<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8728.c" pos:tabs="8"><function pos:start="1:1" pos:end="789:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">load_elf_binary</name><parameter_list pos:start="1:27" pos:end="3:52">(<parameter pos:start="1:28" pos:end="1:53"><decl pos:start="1:28" pos:end="1:53"><type pos:start="1:28" pos:end="1:53"><name pos:start="1:28" pos:end="1:46"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:46">linux_binprm</name></name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:53">bprm</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:83"><decl pos:start="1:56" pos:end="1:83"><type pos:start="1:56" pos:end="1:83"><name pos:start="1:56" pos:end="1:76"><name pos:start="1:56" pos:end="1:61">struct</name> <name pos:start="1:63" pos:end="1:76">target_pt_regs</name></name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type> <name pos:start="1:80" pos:end="1:83">regs</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:51"><decl pos:start="3:28" pos:end="3:51"><type pos:start="3:28" pos:end="3:51"><name pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:33">struct</name> <name pos:start="3:35" pos:end="3:44">image_info</name></name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type> <name pos:start="3:48" pos:end="3:51">info</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="789:1">{<block_content pos:start="7:5" pos:end="787:13">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">elfhdr</name></name></type> <name pos:start="7:19" pos:end="7:24">elf_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">elfhdr</name></name></type> <name pos:start="9:19" pos:end="9:31">interp_elf_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">exec</name></name></type> <name pos:start="11:17" pos:end="11:25">interp_ex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">interpreter_fd</name> <init pos:start="13:24" pos:end="13:27">= <expr pos:start="13:26" pos:end="13:27"><operator pos:start="13:26" pos:end="13:26">-</operator><literal type="number" pos:start="13:27" pos:end="13:27">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="13:30" pos:end="13:48">/* avoid warning */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:39"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">long</name></type> <name pos:start="15:19" pos:end="15:27">load_addr</name></decl>, <decl pos:start="15:30" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:17"/><name pos:start="15:30" pos:end="15:38">load_bias</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">load_addr_set</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:53"><decl pos:start="19:5" pos:end="19:52"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:33">interpreter_type</name> <init pos:start="19:35" pos:end="19:52">= <expr pos:start="19:37" pos:end="19:52"><name pos:start="19:37" pos:end="19:52">INTERPRETER_NONE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:36"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:17">char</name></type> <name pos:start="21:19" pos:end="21:35">ibcs2_interpreter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:17">long</name></type> <name pos:start="25:19" pos:end="25:29">mapped_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:10">struct</name> <name pos:start="27:12" pos:end="27:19">elf_phdr</name></name> <modifier pos:start="27:21" pos:end="27:21">*</modifier></type> <name pos:start="27:23" pos:end="27:30">elf_ppnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:19">elf_phdr</name></name> <modifier pos:start="29:21" pos:end="29:21">*</modifier></type><name pos:start="29:22" pos:end="29:31">elf_phdata</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:38"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:17">long</name></type> <name pos:start="31:19" pos:end="31:25">elf_bss</name></decl>, <decl pos:start="31:28" pos:end="31:28"><type ref="prev" pos:start="31:5" pos:end="31:17"/><name pos:start="31:28" pos:end="31:28">k</name></decl>, <decl pos:start="31:31" pos:end="31:37"><type ref="prev" pos:start="31:5" pos:end="31:17"/><name pos:start="31:31" pos:end="31:37">elf_brk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:15"><decl pos:start="33:5" pos:end="33:14"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:8">char</name> <modifier pos:start="35:10" pos:end="35:10">*</modifier></type> <name pos:start="35:12" pos:end="35:26">elf_interpreter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:50"><decl pos:start="37:5" pos:end="37:27"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:12">unsigned</name> <name pos:start="37:14" pos:end="37:17">long</name></type> <name pos:start="37:19" pos:end="37:27">elf_entry</name></decl>, <decl pos:start="37:30" pos:end="37:49"><type ref="prev" pos:start="37:5" pos:end="37:17"/><name pos:start="37:30" pos:end="37:45">interp_load_addr</name> <init pos:start="37:47" pos:end="37:49">= <expr pos:start="37:49" pos:end="37:49"><literal type="number" pos:start="37:49" pos:end="37:49">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:15"><decl pos:start="39:5" pos:end="39:14"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:14">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:49"><decl pos:start="41:5" pos:end="41:28"><type pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:12">unsigned</name> <name pos:start="41:14" pos:end="41:17">long</name></type> <name pos:start="41:19" pos:end="41:28">start_code</name></decl>, <decl pos:start="41:31" pos:end="41:38"><type ref="prev" pos:start="41:5" pos:end="41:17"/><name pos:start="41:31" pos:end="41:38">end_code</name></decl>, <decl pos:start="41:41" pos:end="41:48"><type ref="prev" pos:start="41:5" pos:end="41:17"/><name pos:start="41:41" pos:end="41:48">end_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:28"><decl pos:start="43:5" pos:end="43:27"><type pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:12">unsigned</name> <name pos:start="43:14" pos:end="43:17">long</name></type> <name pos:start="43:19" pos:end="43:27">elf_stack</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:26"><decl pos:start="45:5" pos:end="45:25"><type pos:start="45:5" pos:end="45:8"><name pos:start="45:5" pos:end="45:8">char</name></type> <name pos:start="45:10" pos:end="45:25"><name pos:start="45:10" pos:end="45:22">passed_fileno</name><index pos:start="45:23" pos:end="45:25">[<expr pos:start="45:24" pos:end="45:24"><literal type="number" pos:start="45:24" pos:end="45:24">6</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:21">ibcs2_interpreter</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <literal type="number" pos:start="49:25" pos:end="49:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:10">status</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:18"><expr pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:13">load_addr</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:13">load_bias</name> <operator pos:start="55:15" pos:end="55:15">=</operator> <literal type="number" pos:start="55:17" pos:end="55:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:10">elf_ex</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">*</operator><operator pos:start="57:15" pos:end="57:15">(</operator><operator pos:start="57:16" pos:end="57:16">(</operator>struct <name pos:start="57:24" pos:end="57:29">elfhdr</name> <operator pos:start="57:31" pos:end="57:31">*</operator><operator pos:start="57:32" pos:end="57:32">)</operator> <name pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:37">bprm</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:42">buf</name></name><operator pos:start="57:43" pos:end="57:43">)</operator></expr>;</expr_stmt>          <comment type="block" pos:start="57:55" pos:end="57:71">/* exec-header */</comment>

<cpp:ifdef pos:start="59:1" pos:end="59:19">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:19">BSWAP_NEEDED</name></cpp:ifdef>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:23"><call pos:start="61:5" pos:end="61:23"><name pos:start="61:5" pos:end="61:14">bswap_ehdr</name><argument_list pos:start="61:15" pos:end="61:23">(<argument pos:start="61:16" pos:end="61:22"><expr pos:start="61:16" pos:end="61:22"><operator pos:start="61:16" pos:end="61:16">&amp;</operator><name pos:start="61:17" pos:end="61:22">elf_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="69:50">(<expr pos:start="67:9" pos:end="69:49"><name pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:14">elf_ex</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:22">e_ident</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">0</literal></expr>]</index></name> <operator pos:start="67:27" pos:end="67:28">!=</operator> <literal type="number" pos:start="67:30" pos:end="67:33">0x7f</literal> <operator pos:start="67:35" pos:end="67:36">||</operator>

	<call pos:start="69:9" pos:end="69:44"><name pos:start="69:9" pos:end="69:15">strncmp</name><argument_list pos:start="69:16" pos:end="69:44">(<argument pos:start="69:17" pos:end="69:34"><expr pos:start="69:17" pos:end="69:34"><operator pos:start="69:17" pos:end="69:17">&amp;</operator><name pos:start="69:18" pos:end="69:34"><name pos:start="69:18" pos:end="69:23">elf_ex</name><operator pos:start="69:24" pos:end="69:24">.</operator><name pos:start="69:25" pos:end="69:31">e_ident</name><index pos:start="69:32" pos:end="69:34">[<expr pos:start="69:33" pos:end="69:33"><literal type="number" pos:start="69:33" pos:end="69:33">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:37" pos:end="69:41"><expr pos:start="69:37" pos:end="69:41"><literal type="string" pos:start="69:37" pos:end="69:41">"ELF"</literal></expr></argument>,<argument pos:start="69:43" pos:end="69:43"><expr pos:start="69:43" pos:end="69:43"><literal type="number" pos:start="69:43" pos:end="69:43">3</literal></expr></argument>)</argument_list></call> <operator pos:start="69:46" pos:end="69:47">!=</operator> <literal type="number" pos:start="69:49" pos:end="69:49">0</literal></expr>)</condition> <block pos:start="69:52" pos:end="73:5">{<block_content pos:start="71:13" pos:end="71:29">

	    <return pos:start="71:13" pos:end="71:29">return  <expr pos:start="71:21" pos:end="71:28"><operator pos:start="71:21" pos:end="71:21">-</operator><name pos:start="71:22" pos:end="71:28">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:54">/* First of all, some simple consistency checks */</comment>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="81:69">(<expr pos:start="79:9" pos:end="81:68"><operator pos:start="79:9" pos:end="79:9">(</operator><name pos:start="79:10" pos:end="79:22"><name pos:start="79:10" pos:end="79:15">elf_ex</name><operator pos:start="79:16" pos:end="79:16">.</operator><name pos:start="79:17" pos:end="79:22">e_type</name></name> <operator pos:start="79:24" pos:end="79:25">!=</operator> <name pos:start="79:27" pos:end="79:33">ET_EXEC</name> <operator pos:start="79:35" pos:end="79:36">&amp;&amp;</operator> <name pos:start="79:38" pos:end="79:50"><name pos:start="79:38" pos:end="79:43">elf_ex</name><operator pos:start="79:44" pos:end="79:44">.</operator><name pos:start="79:45" pos:end="79:50">e_type</name></name> <operator pos:start="79:52" pos:end="79:53">!=</operator> <name pos:start="79:55" pos:end="79:60">ET_DYN</name><operator pos:start="79:61" pos:end="79:61">)</operator> <operator pos:start="79:63" pos:end="79:64">||</operator>

       				<operator pos:start="81:33" pos:end="81:33">(</operator><operator pos:start="81:34" pos:end="81:34">!</operator> <call pos:start="81:36" pos:end="81:67"><name pos:start="81:36" pos:end="81:49">elf_check_arch</name><argument_list pos:start="81:50" pos:end="81:67">(<argument pos:start="81:51" pos:end="81:66"><expr pos:start="81:51" pos:end="81:66"><name pos:start="81:51" pos:end="81:66"><name pos:start="81:51" pos:end="81:56">elf_ex</name><operator pos:start="81:57" pos:end="81:57">.</operator><name pos:start="81:58" pos:end="81:66">e_machine</name></name></expr></argument>)</argument_list></call><operator pos:start="81:68" pos:end="81:68">)</operator></expr>)</condition> <block pos:start="81:71" pos:end="85:5">{<block_content pos:start="83:13" pos:end="83:28">

	    <return pos:start="83:13" pos:end="83:28">return <expr pos:start="83:20" pos:end="83:27"><operator pos:start="83:20" pos:end="83:20">-</operator><name pos:start="83:21" pos:end="83:27">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:51">/* Now read in all of the header information */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:78"><expr pos:start="91:5" pos:end="91:77"><name pos:start="91:5" pos:end="91:14">elf_phdata</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <operator pos:start="91:18" pos:end="91:18">(</operator>struct <name pos:start="91:26" pos:end="91:33">elf_phdr</name> <operator pos:start="91:35" pos:end="91:35">*</operator><operator pos:start="91:36" pos:end="91:36">)</operator><call pos:start="91:37" pos:end="91:77"><name pos:start="91:37" pos:end="91:42">malloc</name><argument_list pos:start="91:43" pos:end="91:77">(<argument pos:start="91:44" pos:end="91:76"><expr pos:start="91:44" pos:end="91:76"><name pos:start="91:44" pos:end="91:61"><name pos:start="91:44" pos:end="91:49">elf_ex</name><operator pos:start="91:50" pos:end="91:50">.</operator><name pos:start="91:51" pos:end="91:61">e_phentsize</name></name><operator pos:start="91:62" pos:end="91:62">*</operator><name pos:start="91:63" pos:end="91:76"><name pos:start="91:63" pos:end="91:68">elf_ex</name><operator pos:start="91:69" pos:end="91:69">.</operator><name pos:start="91:70" pos:end="91:76">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:27">(<expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:18">elf_phdata</name> <operator pos:start="93:20" pos:end="93:21">==</operator> <name pos:start="93:23" pos:end="93:26">NULL</name></expr>)</condition> <block pos:start="93:29" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:23">

	<return pos:start="95:9" pos:end="95:23">return <expr pos:start="95:16" pos:end="95:22"><operator pos:start="95:16" pos:end="95:16">-</operator><name pos:start="95:17" pos:end="95:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:55"><expr pos:start="101:5" pos:end="101:54"><name pos:start="101:5" pos:end="101:10">retval</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:54"><name pos:start="101:14" pos:end="101:18">lseek</name><argument_list pos:start="101:19" pos:end="101:54">(<argument pos:start="101:20" pos:end="101:27"><expr pos:start="101:20" pos:end="101:27"><name pos:start="101:20" pos:end="101:27"><name pos:start="101:20" pos:end="101:23">bprm</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:27">fd</name></name></expr></argument>, <argument pos:start="101:30" pos:end="101:43"><expr pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:43"><name pos:start="101:30" pos:end="101:35">elf_ex</name><operator pos:start="101:36" pos:end="101:36">.</operator><name pos:start="101:37" pos:end="101:43">e_phoff</name></name></expr></argument>, <argument pos:start="101:46" pos:end="101:53"><expr pos:start="101:46" pos:end="101:53"><name pos:start="101:46" pos:end="101:53">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if<condition pos:start="103:7" pos:end="103:18">(<expr pos:start="103:8" pos:end="103:17"><name pos:start="103:8" pos:end="103:13">retval</name> <operator pos:start="103:15" pos:end="103:15">&gt;</operator> <literal type="number" pos:start="103:17" pos:end="103:17">0</literal></expr>)</condition> <block pos:start="103:20" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:69">

	<expr_stmt pos:start="105:9" pos:end="107:69"><expr pos:start="105:9" pos:end="107:68"><name pos:start="105:9" pos:end="105:14">retval</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="107:68"><name pos:start="105:18" pos:end="105:21">read</name><argument_list pos:start="105:22" pos:end="107:68">(<argument pos:start="105:23" pos:end="105:30"><expr pos:start="105:23" pos:end="105:30"><name pos:start="105:23" pos:end="105:30"><name pos:start="105:23" pos:end="105:26">bprm</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:30">fd</name></name></expr></argument>, <argument pos:start="105:33" pos:end="105:51"><expr pos:start="105:33" pos:end="105:51"><operator pos:start="105:33" pos:end="105:33">(</operator><name pos:start="105:34" pos:end="105:37">char</name> <operator pos:start="105:39" pos:end="105:39">*</operator><operator pos:start="105:40" pos:end="105:40">)</operator> <name pos:start="105:42" pos:end="105:51">elf_phdata</name></expr></argument>, 

				<argument pos:start="107:33" pos:end="107:67"><expr pos:start="107:33" pos:end="107:67"><name pos:start="107:33" pos:end="107:50"><name pos:start="107:33" pos:end="107:38">elf_ex</name><operator pos:start="107:39" pos:end="107:39">.</operator><name pos:start="107:40" pos:end="107:50">e_phentsize</name></name> <operator pos:start="107:52" pos:end="107:52">*</operator> <name pos:start="107:54" pos:end="107:67"><name pos:start="107:54" pos:end="107:59">elf_ex</name><operator pos:start="107:60" pos:end="107:60">.</operator><name pos:start="107:61" pos:end="107:67">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="128:0"><if pos:start="113:5" pos:end="128:0">if <condition pos:start="113:8" pos:end="113:19">(<expr pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:14">retval</name> <operator pos:start="113:16" pos:end="113:16">&lt;</operator> <literal type="number" pos:start="113:18" pos:end="113:18">0</literal></expr>)</condition> <block pos:start="113:21" pos:end="128:0">{<block_content pos:start="115:9" pos:end="121:22">

	<expr_stmt pos:start="115:9" pos:end="115:34"><expr pos:start="115:9" pos:end="115:33"><call pos:start="115:9" pos:end="115:33"><name pos:start="115:9" pos:end="115:14">perror</name><argument_list pos:start="115:15" pos:end="115:33">(<argument pos:start="115:16" pos:end="115:32"><expr pos:start="115:16" pos:end="115:32"><literal type="string" pos:start="115:16" pos:end="115:32">"load_elf_binary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="117:9" pos:end="117:17"><expr pos:start="117:9" pos:end="117:16"><call pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:12">exit</name><argument_list pos:start="117:13" pos:end="117:16">(<argument pos:start="117:14" pos:end="117:15"><expr pos:start="117:14" pos:end="117:15"><operator pos:start="117:14" pos:end="117:14">-</operator><literal type="number" pos:start="117:15" pos:end="117:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="119:9" pos:end="119:26"><expr pos:start="119:9" pos:end="119:25"><call pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:12">free</name> <argument_list pos:start="119:14" pos:end="119:25">(<argument pos:start="119:15" pos:end="119:24"><expr pos:start="119:15" pos:end="119:24"><name pos:start="119:15" pos:end="119:24">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="121:9" pos:end="121:22">return <expr pos:start="121:16" pos:end="121:21"><operator pos:start="121:16" pos:end="121:16">-</operator><name pos:start="121:17" pos:end="121:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="127:1" pos:end="127:19">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:19">BSWAP_NEEDED</name></cpp:ifdef>

    <expr_stmt pos:start="129:5" pos:end="129:26"><expr pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:12">elf_ppnt</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <name pos:start="129:16" pos:end="129:25">elf_phdata</name></expr>;</expr_stmt>

    <for pos:start="131:5" pos:end="138:0">for <control pos:start="131:9" pos:end="131:48">(<init pos:start="131:10" pos:end="131:13"><expr pos:start="131:10" pos:end="131:12"><name pos:start="131:10" pos:end="131:10">i</name><operator pos:start="131:11" pos:end="131:11">=</operator><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</init> <condition pos:start="131:15" pos:end="131:31"><expr pos:start="131:15" pos:end="131:30"><name pos:start="131:15" pos:end="131:15">i</name><operator pos:start="131:16" pos:end="131:16">&lt;</operator><name pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:22">elf_ex</name><operator pos:start="131:23" pos:end="131:23">.</operator><name pos:start="131:24" pos:end="131:30">e_phnum</name></name></expr>;</condition> <incr pos:start="131:33" pos:end="131:47"><expr pos:start="131:33" pos:end="131:35"><name pos:start="131:33" pos:end="131:33">i</name><operator pos:start="131:34" pos:end="131:35">++</operator></expr><operator pos:start="131:36" pos:end="131:36">,</operator> <expr pos:start="131:38" pos:end="131:47"><name pos:start="131:38" pos:end="131:45">elf_ppnt</name><operator pos:start="131:46" pos:end="131:47">++</operator></expr></incr>)</control> <block pos:start="131:50" pos:end="138:0">{<block_content pos:start="133:9" pos:end="133:29">

        <expr_stmt pos:start="133:9" pos:end="133:29"><expr pos:start="133:9" pos:end="133:28"><call pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:18">bswap_phdr</name><argument_list pos:start="133:19" pos:end="133:28">(<argument pos:start="133:20" pos:end="133:27"><expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27">elf_ppnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="139:5" pos:end="139:26"><expr pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:12">elf_ppnt</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <name pos:start="139:16" pos:end="139:25">elf_phdata</name></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:16"><expr pos:start="143:5" pos:end="143:15"><name pos:start="143:5" pos:end="143:11">elf_bss</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:16"><expr pos:start="145:5" pos:end="145:15"><name pos:start="145:5" pos:end="145:11">elf_brk</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <literal type="number" pos:start="145:15" pos:end="145:15">0</literal></expr>;</expr_stmt>





    <expr_stmt pos:start="151:5" pos:end="151:21"><expr pos:start="151:5" pos:end="151:20"><name pos:start="151:5" pos:end="151:13">elf_stack</name> <operator pos:start="151:15" pos:end="151:15">=</operator> <operator pos:start="151:17" pos:end="151:17">~</operator><literal type="number" pos:start="151:18" pos:end="151:20">0UL</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:27"><expr pos:start="153:5" pos:end="153:26"><name pos:start="153:5" pos:end="153:19">elf_interpreter</name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:22"><expr pos:start="155:5" pos:end="155:21"><name pos:start="155:5" pos:end="155:14">start_code</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <operator pos:start="155:18" pos:end="155:18">~</operator><literal type="number" pos:start="155:19" pos:end="155:21">0UL</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:17"><expr pos:start="157:5" pos:end="157:16"><name pos:start="157:5" pos:end="157:12">end_code</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <literal type="number" pos:start="157:16" pos:end="157:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:17"><expr pos:start="159:5" pos:end="159:16"><name pos:start="159:5" pos:end="159:12">end_data</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <literal type="number" pos:start="159:16" pos:end="159:16">0</literal></expr>;</expr_stmt>



    <for pos:start="163:5" pos:end="319:5">for<control pos:start="163:8" pos:end="163:36">(<init pos:start="163:9" pos:end="163:12"><expr pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:9">i</name><operator pos:start="163:10" pos:end="163:10">=</operator><literal type="number" pos:start="163:11" pos:end="163:11">0</literal></expr>;</init><condition pos:start="163:13" pos:end="163:31"><expr pos:start="163:13" pos:end="163:30"><name pos:start="163:13" pos:end="163:13">i</name> <operator pos:start="163:15" pos:end="163:15">&lt;</operator> <name pos:start="163:17" pos:end="163:30"><name pos:start="163:17" pos:end="163:22">elf_ex</name><operator pos:start="163:23" pos:end="163:23">.</operator><name pos:start="163:24" pos:end="163:30">e_phnum</name></name></expr>;</condition> <incr pos:start="163:33" pos:end="163:35"><expr pos:start="163:33" pos:end="163:35"><name pos:start="163:33" pos:end="163:33">i</name><operator pos:start="163:34" pos:end="163:35">++</operator></expr></incr>)</control> <block pos:start="163:38" pos:end="319:5">{<block_content pos:start="165:9" pos:end="317:19">

	<if_stmt pos:start="165:9" pos:end="315:9"><if pos:start="165:9" pos:end="315:9">if <condition pos:start="165:12" pos:end="165:42">(<expr pos:start="165:13" pos:end="165:41"><name pos:start="165:13" pos:end="165:28"><name pos:start="165:13" pos:end="165:20">elf_ppnt</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:28">p_type</name></name> <operator pos:start="165:30" pos:end="165:31">==</operator> <name pos:start="165:33" pos:end="165:41">PT_INTERP</name></expr>)</condition> <block pos:start="165:44" pos:end="315:9">{<block_content pos:start="167:13" pos:end="313:13">

	    <if_stmt pos:start="167:13" pos:end="179:13"><if pos:start="167:13" pos:end="179:13">if <condition pos:start="167:16" pos:end="167:42">( <expr pos:start="167:18" pos:end="167:40"><name pos:start="167:18" pos:end="167:32">elf_interpreter</name> <operator pos:start="167:34" pos:end="167:35">!=</operator> <name pos:start="167:37" pos:end="167:40">NULL</name></expr> )</condition>

	    <block pos:start="169:13" pos:end="179:13">{<block_content pos:start="171:17" pos:end="177:31">

		<expr_stmt pos:start="171:17" pos:end="171:34"><expr pos:start="171:17" pos:end="171:33"><call pos:start="171:17" pos:end="171:33"><name pos:start="171:17" pos:end="171:20">free</name> <argument_list pos:start="171:22" pos:end="171:33">(<argument pos:start="171:23" pos:end="171:32"><expr pos:start="171:23" pos:end="171:32"><name pos:start="171:23" pos:end="171:32">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="173:17" pos:end="173:38"><expr pos:start="173:17" pos:end="173:37"><call pos:start="173:17" pos:end="173:37"><name pos:start="173:17" pos:end="173:20">free</name><argument_list pos:start="173:21" pos:end="173:37">(<argument pos:start="173:22" pos:end="173:36"><expr pos:start="173:22" pos:end="173:36"><name pos:start="173:22" pos:end="173:36">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="175:17" pos:end="175:32"><expr pos:start="175:17" pos:end="175:31"><call pos:start="175:17" pos:end="175:31"><name pos:start="175:17" pos:end="175:21">close</name><argument_list pos:start="175:22" pos:end="175:31">(<argument pos:start="175:23" pos:end="175:30"><expr pos:start="175:23" pos:end="175:30"><name pos:start="175:23" pos:end="175:30"><name pos:start="175:23" pos:end="175:26">bprm</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:30">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="177:17" pos:end="177:31">return <expr pos:start="177:24" pos:end="177:30"><operator pos:start="177:24" pos:end="177:24">-</operator><name pos:start="177:25" pos:end="177:30">EINVAL</name></expr>;</return>

	    </block_content>}</block></if></if_stmt>



	    <comment type="block" pos:start="183:13" pos:end="189:15">/* This is the program interpreter used for

	     * shared libraries - for now assume that this

	     * is an a.out format binary

	     */</comment>



	    <expr_stmt pos:start="193:13" pos:end="193:65"><expr pos:start="193:13" pos:end="193:64"><name pos:start="193:13" pos:end="193:27">elf_interpreter</name> <operator pos:start="193:29" pos:end="193:29">=</operator> <operator pos:start="193:31" pos:end="193:31">(</operator><name pos:start="193:32" pos:end="193:35">char</name> <operator pos:start="193:37" pos:end="193:37">*</operator><operator pos:start="193:38" pos:end="193:38">)</operator><call pos:start="193:39" pos:end="193:64"><name pos:start="193:39" pos:end="193:44">malloc</name><argument_list pos:start="193:45" pos:end="193:64">(<argument pos:start="193:46" pos:end="193:63"><expr pos:start="193:46" pos:end="193:63"><name pos:start="193:46" pos:end="193:63"><name pos:start="193:46" pos:end="193:53">elf_ppnt</name><operator pos:start="193:54" pos:end="193:55">-&gt;</operator><name pos:start="193:56" pos:end="193:63">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	    <if_stmt pos:start="197:13" pos:end="205:13"><if pos:start="197:13" pos:end="205:13">if <condition pos:start="197:16" pos:end="197:40">(<expr pos:start="197:17" pos:end="197:39"><name pos:start="197:17" pos:end="197:31">elf_interpreter</name> <operator pos:start="197:33" pos:end="197:34">==</operator> <name pos:start="197:36" pos:end="197:39">NULL</name></expr>)</condition> <block pos:start="197:42" pos:end="205:13">{<block_content pos:start="199:17" pos:end="203:31">

		<expr_stmt pos:start="199:17" pos:end="199:34"><expr pos:start="199:17" pos:end="199:33"><call pos:start="199:17" pos:end="199:33"><name pos:start="199:17" pos:end="199:20">free</name> <argument_list pos:start="199:22" pos:end="199:33">(<argument pos:start="199:23" pos:end="199:32"><expr pos:start="199:23" pos:end="199:32"><name pos:start="199:23" pos:end="199:32">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="201:17" pos:end="201:32"><expr pos:start="201:17" pos:end="201:31"><call pos:start="201:17" pos:end="201:31"><name pos:start="201:17" pos:end="201:21">close</name><argument_list pos:start="201:22" pos:end="201:31">(<argument pos:start="201:23" pos:end="201:30"><expr pos:start="201:23" pos:end="201:30"><name pos:start="201:23" pos:end="201:30"><name pos:start="201:23" pos:end="201:26">bprm</name><operator pos:start="201:27" pos:end="201:28">-&gt;</operator><name pos:start="201:29" pos:end="201:30">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="203:17" pos:end="203:31">return <expr pos:start="203:24" pos:end="203:30"><operator pos:start="203:24" pos:end="203:24">-</operator><name pos:start="203:25" pos:end="203:30">ENOMEM</name></expr>;</return>

	    </block_content>}</block></if></if_stmt>



	    <expr_stmt pos:start="209:13" pos:end="209:67"><expr pos:start="209:13" pos:end="209:66"><name pos:start="209:13" pos:end="209:18">retval</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <call pos:start="209:22" pos:end="209:66"><name pos:start="209:22" pos:end="209:26">lseek</name><argument_list pos:start="209:27" pos:end="209:66">(<argument pos:start="209:28" pos:end="209:35"><expr pos:start="209:28" pos:end="209:35"><name pos:start="209:28" pos:end="209:35"><name pos:start="209:28" pos:end="209:31">bprm</name><operator pos:start="209:32" pos:end="209:33">-&gt;</operator><name pos:start="209:34" pos:end="209:35">fd</name></name></expr></argument>, <argument pos:start="209:38" pos:end="209:55"><expr pos:start="209:38" pos:end="209:55"><name pos:start="209:38" pos:end="209:55"><name pos:start="209:38" pos:end="209:45">elf_ppnt</name><operator pos:start="209:46" pos:end="209:47">-&gt;</operator><name pos:start="209:48" pos:end="209:55">p_offset</name></name></expr></argument>, <argument pos:start="209:58" pos:end="209:65"><expr pos:start="209:58" pos:end="209:65"><name pos:start="209:58" pos:end="209:65">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="211:13" pos:end="215:13"><if pos:start="211:13" pos:end="215:13">if<condition pos:start="211:15" pos:end="211:27">(<expr pos:start="211:16" pos:end="211:26"><name pos:start="211:16" pos:end="211:21">retval</name> <operator pos:start="211:23" pos:end="211:24">&gt;=</operator> <literal type="number" pos:start="211:26" pos:end="211:26">0</literal></expr>)</condition> <block pos:start="211:29" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:77">

		<expr_stmt pos:start="213:17" pos:end="213:77"><expr pos:start="213:17" pos:end="213:76"><name pos:start="213:17" pos:end="213:22">retval</name> <operator pos:start="213:24" pos:end="213:24">=</operator> <call pos:start="213:26" pos:end="213:76"><name pos:start="213:26" pos:end="213:29">read</name><argument_list pos:start="213:30" pos:end="213:76">(<argument pos:start="213:31" pos:end="213:38"><expr pos:start="213:31" pos:end="213:38"><name pos:start="213:31" pos:end="213:38"><name pos:start="213:31" pos:end="213:34">bprm</name><operator pos:start="213:35" pos:end="213:36">-&gt;</operator><name pos:start="213:37" pos:end="213:38">fd</name></name></expr></argument>, <argument pos:start="213:41" pos:end="213:55"><expr pos:start="213:41" pos:end="213:55"><name pos:start="213:41" pos:end="213:55">elf_interpreter</name></expr></argument>, <argument pos:start="213:58" pos:end="213:75"><expr pos:start="213:58" pos:end="213:75"><name pos:start="213:58" pos:end="213:75"><name pos:start="213:58" pos:end="213:65">elf_ppnt</name><operator pos:start="213:66" pos:end="213:67">-&gt;</operator><name pos:start="213:68" pos:end="213:75">p_filesz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="217:13" pos:end="223:13"><if pos:start="217:13" pos:end="223:13">if<condition pos:start="217:15" pos:end="217:26">(<expr pos:start="217:16" pos:end="217:25"><name pos:start="217:16" pos:end="217:21">retval</name> <operator pos:start="217:23" pos:end="217:23">&lt;</operator> <literal type="number" pos:start="217:25" pos:end="217:25">0</literal></expr>)</condition> <block pos:start="217:28" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:25">

	 	<expr_stmt pos:start="219:17" pos:end="219:43"><expr pos:start="219:17" pos:end="219:42"><call pos:start="219:17" pos:end="219:42"><name pos:start="219:17" pos:end="219:22">perror</name><argument_list pos:start="219:23" pos:end="219:42">(<argument pos:start="219:24" pos:end="219:41"><expr pos:start="219:24" pos:end="219:41"><literal type="string" pos:start="219:24" pos:end="219:41">"load_elf_binary2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="221:17" pos:end="221:25"><expr pos:start="221:17" pos:end="221:24"><call pos:start="221:17" pos:end="221:24"><name pos:start="221:17" pos:end="221:20">exit</name><argument_list pos:start="221:21" pos:end="221:24">(<argument pos:start="221:22" pos:end="221:23"><expr pos:start="221:22" pos:end="221:23"><operator pos:start="221:22" pos:end="221:22">-</operator><literal type="number" pos:start="221:23" pos:end="221:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>	



	    <comment type="block" pos:start="227:13" pos:end="231:39">/* If the program interpreter is one of these two,

	       then assume an iBCS2 image. Otherwise assume

	       a native linux image. */</comment>



	    <comment type="block" pos:start="235:13" pos:end="235:61">/* JRP - Need to add X86 lib dir stuff here... */</comment>



	    <if_stmt pos:start="239:13" pos:end="254:0"><if pos:start="239:13" pos:end="254:0">if <condition pos:start="239:16" pos:end="241:64">(<expr pos:start="239:17" pos:end="241:63"><call pos:start="239:17" pos:end="239:60"><name pos:start="239:17" pos:end="239:22">strcmp</name><argument_list pos:start="239:23" pos:end="239:60">(<argument pos:start="239:24" pos:end="239:38"><expr pos:start="239:24" pos:end="239:38"><name pos:start="239:24" pos:end="239:38">elf_interpreter</name></expr></argument>,<argument pos:start="239:40" pos:end="239:59"><expr pos:start="239:40" pos:end="239:59"><literal type="string" pos:start="239:40" pos:end="239:59">"/usr/lib/libc.so.1"</literal></expr></argument>)</argument_list></call> <operator pos:start="239:62" pos:end="239:63">==</operator> <literal type="number" pos:start="239:65" pos:end="239:65">0</literal> <operator pos:start="239:67" pos:end="239:68">||</operator>

		<call pos:start="241:17" pos:end="241:58"><name pos:start="241:17" pos:end="241:22">strcmp</name><argument_list pos:start="241:23" pos:end="241:58">(<argument pos:start="241:24" pos:end="241:38"><expr pos:start="241:24" pos:end="241:38"><name pos:start="241:24" pos:end="241:38">elf_interpreter</name></expr></argument>,<argument pos:start="241:40" pos:end="241:57"><expr pos:start="241:40" pos:end="241:57"><literal type="string" pos:start="241:40" pos:end="241:57">"/usr/lib/ld.so.1"</literal></expr></argument>)</argument_list></call> <operator pos:start="241:60" pos:end="241:61">==</operator> <literal type="number" pos:start="241:63" pos:end="241:63">0</literal></expr>)</condition> <block pos:start="241:66" pos:end="254:0">{<block_content pos:start="243:15" pos:end="243:36">

	      <expr_stmt pos:start="243:15" pos:end="243:36"><expr pos:start="243:15" pos:end="243:35"><name pos:start="243:15" pos:end="243:31">ibcs2_interpreter</name> <operator pos:start="243:33" pos:end="243:33">=</operator> <literal type="number" pos:start="243:35" pos:end="243:35">1</literal></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if>

	    printf("Using ELF interpreter %s\n", elf_interpreter);

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

	    <if_stmt pos:start="255:13" pos:end="275:13"><if pos:start="255:13" pos:end="275:13">if <condition pos:start="255:16" pos:end="255:28">(<expr pos:start="255:17" pos:end="255:27"><name pos:start="255:17" pos:end="255:22">retval</name> <operator pos:start="255:24" pos:end="255:25">&gt;=</operator> <literal type="number" pos:start="255:27" pos:end="255:27">0</literal></expr>)</condition> <block pos:start="255:30" pos:end="275:13">{<block_content pos:start="257:17" pos:end="273:17">

		<expr_stmt pos:start="257:17" pos:end="257:63"><expr pos:start="257:17" pos:end="257:62"><name pos:start="257:17" pos:end="257:22">retval</name> <operator pos:start="257:24" pos:end="257:24">=</operator> <call pos:start="257:26" pos:end="257:62"><name pos:start="257:26" pos:end="257:29">open</name><argument_list pos:start="257:30" pos:end="257:62">(<argument pos:start="257:31" pos:end="257:51"><expr pos:start="257:31" pos:end="257:51"><call pos:start="257:31" pos:end="257:51"><name pos:start="257:31" pos:end="257:34">path</name><argument_list pos:start="257:35" pos:end="257:51">(<argument pos:start="257:36" pos:end="257:50"><expr pos:start="257:36" pos:end="257:50"><name pos:start="257:36" pos:end="257:50">elf_interpreter</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="257:54" pos:end="257:61"><expr pos:start="257:54" pos:end="257:61"><name pos:start="257:54" pos:end="257:61">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="259:17" pos:end="273:17"><if pos:start="259:17" pos:end="263:17">if<condition pos:start="259:19" pos:end="259:31">(<expr pos:start="259:20" pos:end="259:30"><name pos:start="259:20" pos:end="259:25">retval</name> <operator pos:start="259:27" pos:end="259:28">&gt;=</operator> <literal type="number" pos:start="259:30" pos:end="259:30">0</literal></expr>)</condition> <block pos:start="259:33" pos:end="263:17">{<block_content pos:start="261:21" pos:end="261:44">

		    <expr_stmt pos:start="261:21" pos:end="261:44"><expr pos:start="261:21" pos:end="261:43"><name pos:start="261:21" pos:end="261:34">interpreter_fd</name> <operator pos:start="261:36" pos:end="261:36">=</operator> <name pos:start="261:38" pos:end="261:43">retval</name></expr>;</expr_stmt>

		</block_content>}</block></if>

		<else pos:start="265:17" pos:end="273:17">else <block pos:start="265:22" pos:end="273:17">{<block_content pos:start="267:21" pos:end="269:29">

		    <expr_stmt pos:start="267:21" pos:end="267:44"><expr pos:start="267:21" pos:end="267:43"><call pos:start="267:21" pos:end="267:43"><name pos:start="267:21" pos:end="267:26">perror</name><argument_list pos:start="267:27" pos:end="267:43">(<argument pos:start="267:28" pos:end="267:42"><expr pos:start="267:28" pos:end="267:42"><name pos:start="267:28" pos:end="267:42">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="269:21" pos:end="269:29"><expr pos:start="269:21" pos:end="269:28"><call pos:start="269:21" pos:end="269:28"><name pos:start="269:21" pos:end="269:24">exit</name><argument_list pos:start="269:25" pos:end="269:28">(<argument pos:start="269:26" pos:end="269:27"><expr pos:start="269:26" pos:end="269:27"><operator pos:start="269:26" pos:end="269:26">-</operator><literal type="number" pos:start="269:27" pos:end="269:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <comment type="block" pos:start="271:21" pos:end="271:42">/* retval = -errno; */</comment>

		</block_content>}</block></else></if_stmt>

	    </block_content>}</block></if></if_stmt>



	    <if_stmt pos:start="279:13" pos:end="289:13"><if pos:start="279:13" pos:end="289:13">if <condition pos:start="279:16" pos:end="279:28">(<expr pos:start="279:17" pos:end="279:27"><name pos:start="279:17" pos:end="279:22">retval</name> <operator pos:start="279:24" pos:end="279:25">&gt;=</operator> <literal type="number" pos:start="279:27" pos:end="279:27">0</literal></expr>)</condition> <block pos:start="279:30" pos:end="289:13">{<block_content pos:start="281:17" pos:end="287:17">

		<expr_stmt pos:start="281:17" pos:end="281:60"><expr pos:start="281:17" pos:end="281:59"><name pos:start="281:17" pos:end="281:22">retval</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <call pos:start="281:26" pos:end="281:59"><name pos:start="281:26" pos:end="281:30">lseek</name><argument_list pos:start="281:31" pos:end="281:59">(<argument pos:start="281:32" pos:end="281:45"><expr pos:start="281:32" pos:end="281:45"><name pos:start="281:32" pos:end="281:45">interpreter_fd</name></expr></argument>, <argument pos:start="281:48" pos:end="281:48"><expr pos:start="281:48" pos:end="281:48"><literal type="number" pos:start="281:48" pos:end="281:48">0</literal></expr></argument>, <argument pos:start="281:51" pos:end="281:58"><expr pos:start="281:51" pos:end="281:58"><name pos:start="281:51" pos:end="281:58">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="283:17" pos:end="287:17"><if pos:start="283:17" pos:end="287:17">if<condition pos:start="283:19" pos:end="283:31">(<expr pos:start="283:20" pos:end="283:30"><name pos:start="283:20" pos:end="283:25">retval</name> <operator pos:start="283:27" pos:end="283:28">&gt;=</operator> <literal type="number" pos:start="283:30" pos:end="283:30">0</literal></expr>)</condition> <block pos:start="283:33" pos:end="287:17">{<block_content pos:start="285:21" pos:end="285:64">

		    <expr_stmt pos:start="285:21" pos:end="285:64"><expr pos:start="285:21" pos:end="285:63"><name pos:start="285:21" pos:end="285:26">retval</name> <operator pos:start="285:28" pos:end="285:28">=</operator> <call pos:start="285:30" pos:end="285:63"><name pos:start="285:30" pos:end="285:33">read</name><argument_list pos:start="285:34" pos:end="285:63">(<argument pos:start="285:35" pos:end="285:48"><expr pos:start="285:35" pos:end="285:48"><name pos:start="285:35" pos:end="285:48">interpreter_fd</name></expr></argument>,<argument pos:start="285:50" pos:end="285:58"><expr pos:start="285:50" pos:end="285:58"><name pos:start="285:50" pos:end="285:58"><name pos:start="285:50" pos:end="285:53">bprm</name><operator pos:start="285:54" pos:end="285:55">-&gt;</operator><name pos:start="285:56" pos:end="285:58">buf</name></name></expr></argument>,<argument pos:start="285:60" pos:end="285:62"><expr pos:start="285:60" pos:end="285:62"><literal type="number" pos:start="285:60" pos:end="285:62">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="291:13" pos:end="297:13"><if pos:start="291:13" pos:end="297:13">if <condition pos:start="291:16" pos:end="291:28">(<expr pos:start="291:17" pos:end="291:27"><name pos:start="291:17" pos:end="291:22">retval</name> <operator pos:start="291:24" pos:end="291:25">&gt;=</operator> <literal type="number" pos:start="291:27" pos:end="291:27">0</literal></expr>)</condition> <block pos:start="291:30" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:61">

		<expr_stmt pos:start="293:17" pos:end="293:57"><expr pos:start="293:17" pos:end="293:56"><name pos:start="293:17" pos:end="293:25">interp_ex</name> <operator pos:start="293:27" pos:end="293:27">=</operator> <operator pos:start="293:29" pos:end="293:29">*</operator><operator pos:start="293:30" pos:end="293:30">(</operator><operator pos:start="293:31" pos:end="293:31">(</operator>struct <name pos:start="293:39" pos:end="293:42">exec</name> <operator pos:start="293:44" pos:end="293:44">*</operator><operator pos:start="293:45" pos:end="293:45">)</operator> <name pos:start="293:47" pos:end="293:55"><name pos:start="293:47" pos:end="293:50">bprm</name><operator pos:start="293:51" pos:end="293:52">-&gt;</operator><name pos:start="293:53" pos:end="293:55">buf</name></name><operator pos:start="293:56" pos:end="293:56">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="293:59" pos:end="293:80">/* aout exec-header */</comment>

		<expr_stmt pos:start="295:17" pos:end="295:61"><expr pos:start="295:17" pos:end="295:60"><name pos:start="295:17" pos:end="295:29">interp_elf_ex</name><operator pos:start="295:30" pos:end="295:30">=</operator><operator pos:start="295:31" pos:end="295:31">*</operator><operator pos:start="295:32" pos:end="295:32">(</operator><operator pos:start="295:33" pos:end="295:33">(</operator>struct <name pos:start="295:41" pos:end="295:46">elfhdr</name> <operator pos:start="295:48" pos:end="295:48">*</operator><operator pos:start="295:49" pos:end="295:49">)</operator> <name pos:start="295:51" pos:end="295:59"><name pos:start="295:51" pos:end="295:54">bprm</name><operator pos:start="295:55" pos:end="295:56">-&gt;</operator><name pos:start="295:57" pos:end="295:59">buf</name></name><operator pos:start="295:60" pos:end="295:60">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="295:63" pos:end="295:83">/* elf exec-header */</comment>

	    </block_content>}</block></if></if_stmt>

	    <if_stmt pos:start="299:13" pos:end="313:13"><if pos:start="299:13" pos:end="313:13">if <condition pos:start="299:16" pos:end="299:27">(<expr pos:start="299:17" pos:end="299:26"><name pos:start="299:17" pos:end="299:22">retval</name> <operator pos:start="299:24" pos:end="299:24">&lt;</operator> <literal type="number" pos:start="299:26" pos:end="299:26">0</literal></expr>)</condition> <block pos:start="299:29" pos:end="313:13">{<block_content pos:start="301:17" pos:end="311:30">

		<expr_stmt pos:start="301:17" pos:end="301:43"><expr pos:start="301:17" pos:end="301:42"><call pos:start="301:17" pos:end="301:42"><name pos:start="301:17" pos:end="301:22">perror</name><argument_list pos:start="301:23" pos:end="301:42">(<argument pos:start="301:24" pos:end="301:41"><expr pos:start="301:24" pos:end="301:41"><literal type="string" pos:start="301:24" pos:end="301:41">"load_elf_binary3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="303:17" pos:end="303:25"><expr pos:start="303:17" pos:end="303:24"><call pos:start="303:17" pos:end="303:24"><name pos:start="303:17" pos:end="303:20">exit</name><argument_list pos:start="303:21" pos:end="303:24">(<argument pos:start="303:22" pos:end="303:23"><expr pos:start="303:22" pos:end="303:23"><operator pos:start="303:22" pos:end="303:22">-</operator><literal type="number" pos:start="303:23" pos:end="303:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="305:17" pos:end="305:34"><expr pos:start="305:17" pos:end="305:33"><call pos:start="305:17" pos:end="305:33"><name pos:start="305:17" pos:end="305:20">free</name> <argument_list pos:start="305:22" pos:end="305:33">(<argument pos:start="305:23" pos:end="305:32"><expr pos:start="305:23" pos:end="305:32"><name pos:start="305:23" pos:end="305:32">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="307:17" pos:end="307:38"><expr pos:start="307:17" pos:end="307:37"><call pos:start="307:17" pos:end="307:37"><name pos:start="307:17" pos:end="307:20">free</name><argument_list pos:start="307:21" pos:end="307:37">(<argument pos:start="307:22" pos:end="307:36"><expr pos:start="307:22" pos:end="307:36"><name pos:start="307:22" pos:end="307:36">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="309:17" pos:end="309:32"><expr pos:start="309:17" pos:end="309:31"><call pos:start="309:17" pos:end="309:31"><name pos:start="309:17" pos:end="309:21">close</name><argument_list pos:start="309:22" pos:end="309:31">(<argument pos:start="309:23" pos:end="309:30"><expr pos:start="309:23" pos:end="309:30"><name pos:start="309:23" pos:end="309:30"><name pos:start="309:23" pos:end="309:26">bprm</name><operator pos:start="309:27" pos:end="309:28">-&gt;</operator><name pos:start="309:29" pos:end="309:30">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="311:17" pos:end="311:30">return <expr pos:start="311:24" pos:end="311:29"><name pos:start="311:24" pos:end="311:29">retval</name></expr>;</return>

	    </block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="317:9" pos:end="317:19"><expr pos:start="317:9" pos:end="317:18"><name pos:start="317:9" pos:end="317:16">elf_ppnt</name><operator pos:start="317:17" pos:end="317:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="323:5" pos:end="323:60">/* Some simple consistency checks for the interpreter */</comment>

    <if_stmt pos:start="325:5" pos:end="365:5"><if pos:start="325:5" pos:end="365:5">if <condition pos:start="325:8" pos:end="325:24">(<expr pos:start="325:9" pos:end="325:23"><name pos:start="325:9" pos:end="325:23">elf_interpreter</name></expr>)</condition><block pos:start="325:25" pos:end="365:5">{<block_content pos:start="327:9" pos:end="363:9">

	<expr_stmt pos:start="327:9" pos:end="327:62"><expr pos:start="327:9" pos:end="327:61"><name pos:start="327:9" pos:end="327:24">interpreter_type</name> <operator pos:start="327:26" pos:end="327:26">=</operator> <name pos:start="327:28" pos:end="327:42">INTERPRETER_ELF</name> <operator pos:start="327:44" pos:end="327:44">|</operator> <name pos:start="327:46" pos:end="327:61">INTERPRETER_AOUT</name></expr>;</expr_stmt>



	<comment type="block" pos:start="331:9" pos:end="331:55">/* Now figure out which format our binary is */</comment>

	<if_stmt pos:start="333:9" pos:end="339:9"><if pos:start="333:9" pos:end="339:9">if <condition pos:start="333:12" pos:end="335:47">(<expr pos:start="333:13" pos:end="335:46"><operator pos:start="333:13" pos:end="333:13">(</operator><call pos:start="333:14" pos:end="333:31"><name pos:start="333:14" pos:end="333:20">N_MAGIC</name><argument_list pos:start="333:21" pos:end="333:31">(<argument pos:start="333:22" pos:end="333:30"><expr pos:start="333:22" pos:end="333:30"><name pos:start="333:22" pos:end="333:30">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="333:33" pos:end="333:34">!=</operator> <name pos:start="333:36" pos:end="333:41">OMAGIC</name><operator pos:start="333:42" pos:end="333:42">)</operator> <operator pos:start="333:44" pos:end="333:45">&amp;&amp;</operator> <operator pos:start="333:47" pos:end="333:47">(</operator><call pos:start="333:48" pos:end="333:65"><name pos:start="333:48" pos:end="333:54">N_MAGIC</name><argument_list pos:start="333:55" pos:end="333:65">(<argument pos:start="333:56" pos:end="333:64"><expr pos:start="333:56" pos:end="333:64"><name pos:start="333:56" pos:end="333:64">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="333:67" pos:end="333:68">!=</operator> <name pos:start="333:70" pos:end="333:75">ZMAGIC</name><operator pos:start="333:76" pos:end="333:76">)</operator> <operator pos:start="333:78" pos:end="333:79">&amp;&amp;</operator>

	    	<operator pos:start="335:17" pos:end="335:17">(</operator><call pos:start="335:18" pos:end="335:35"><name pos:start="335:18" pos:end="335:24">N_MAGIC</name><argument_list pos:start="335:25" pos:end="335:35">(<argument pos:start="335:26" pos:end="335:34"><expr pos:start="335:26" pos:end="335:34"><name pos:start="335:26" pos:end="335:34">interp_ex</name></expr></argument>)</argument_list></call> <operator pos:start="335:37" pos:end="335:38">!=</operator> <name pos:start="335:40" pos:end="335:45">QMAGIC</name><operator pos:start="335:46" pos:end="335:46">)</operator></expr>)</condition> <block pos:start="335:49" pos:end="339:9">{<block_content pos:start="337:11" pos:end="337:45">

	  <expr_stmt pos:start="337:11" pos:end="337:45"><expr pos:start="337:11" pos:end="337:44"><name pos:start="337:11" pos:end="337:26">interpreter_type</name> <operator pos:start="337:28" pos:end="337:28">=</operator> <name pos:start="337:30" pos:end="337:44">INTERPRETER_ELF</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="343:9" pos:end="349:9"><if pos:start="343:9" pos:end="349:9">if <condition pos:start="343:12" pos:end="345:65">(<expr pos:start="343:13" pos:end="345:64"><name pos:start="343:13" pos:end="343:36"><name pos:start="343:13" pos:end="343:25">interp_elf_ex</name><operator pos:start="343:26" pos:end="343:26">.</operator><name pos:start="343:27" pos:end="343:33">e_ident</name><index pos:start="343:34" pos:end="343:36">[<expr pos:start="343:35" pos:end="343:35"><literal type="number" pos:start="343:35" pos:end="343:35">0</literal></expr>]</index></name> <operator pos:start="343:38" pos:end="343:39">!=</operator> <literal type="number" pos:start="343:41" pos:end="343:44">0x7f</literal> <operator pos:start="343:46" pos:end="343:47">||</operator>

	    	<call pos:start="345:17" pos:end="345:59"><name pos:start="345:17" pos:end="345:23">strncmp</name><argument_list pos:start="345:24" pos:end="345:59">(<argument pos:start="345:25" pos:end="345:49"><expr pos:start="345:25" pos:end="345:49"><operator pos:start="345:25" pos:end="345:25">&amp;</operator><name pos:start="345:26" pos:end="345:49"><name pos:start="345:26" pos:end="345:38">interp_elf_ex</name><operator pos:start="345:39" pos:end="345:39">.</operator><name pos:start="345:40" pos:end="345:46">e_ident</name><index pos:start="345:47" pos:end="345:49">[<expr pos:start="345:48" pos:end="345:48"><literal type="number" pos:start="345:48" pos:end="345:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="345:52" pos:end="345:56"><expr pos:start="345:52" pos:end="345:56"><literal type="string" pos:start="345:52" pos:end="345:56">"ELF"</literal></expr></argument>,<argument pos:start="345:58" pos:end="345:58"><expr pos:start="345:58" pos:end="345:58"><literal type="number" pos:start="345:58" pos:end="345:58">3</literal></expr></argument>)</argument_list></call> <operator pos:start="345:61" pos:end="345:62">!=</operator> <literal type="number" pos:start="345:64" pos:end="345:64">0</literal></expr>)</condition> <block pos:start="345:67" pos:end="349:9">{<block_content pos:start="347:13" pos:end="347:49">

	    <expr_stmt pos:start="347:13" pos:end="347:49"><expr pos:start="347:13" pos:end="347:48"><name pos:start="347:13" pos:end="347:28">interpreter_type</name> <operator pos:start="347:30" pos:end="347:31">&amp;=</operator> <operator pos:start="347:33" pos:end="347:33">~</operator><name pos:start="347:34" pos:end="347:48">INTERPRETER_ELF</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="353:9" pos:end="363:9"><if pos:start="353:9" pos:end="363:9">if <condition pos:start="353:12" pos:end="353:30">(<expr pos:start="353:13" pos:end="353:29"><operator pos:start="353:13" pos:end="353:13">!</operator><name pos:start="353:14" pos:end="353:29">interpreter_type</name></expr>)</condition> <block pos:start="353:32" pos:end="363:9">{<block_content pos:start="355:13" pos:end="361:28">

	    <expr_stmt pos:start="355:13" pos:end="355:34"><expr pos:start="355:13" pos:end="355:33"><call pos:start="355:13" pos:end="355:33"><name pos:start="355:13" pos:end="355:16">free</name><argument_list pos:start="355:17" pos:end="355:33">(<argument pos:start="355:18" pos:end="355:32"><expr pos:start="355:18" pos:end="355:32"><name pos:start="355:18" pos:end="355:32">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="357:13" pos:end="357:29"><expr pos:start="357:13" pos:end="357:28"><call pos:start="357:13" pos:end="357:28"><name pos:start="357:13" pos:end="357:16">free</name><argument_list pos:start="357:17" pos:end="357:28">(<argument pos:start="357:18" pos:end="357:27"><expr pos:start="357:18" pos:end="357:27"><name pos:start="357:18" pos:end="357:27">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="359:13" pos:end="359:28"><expr pos:start="359:13" pos:end="359:27"><call pos:start="359:13" pos:end="359:27"><name pos:start="359:13" pos:end="359:17">close</name><argument_list pos:start="359:18" pos:end="359:27">(<argument pos:start="359:19" pos:end="359:26"><expr pos:start="359:19" pos:end="359:26"><name pos:start="359:19" pos:end="359:26"><name pos:start="359:19" pos:end="359:22">bprm</name><operator pos:start="359:23" pos:end="359:24">-&gt;</operator><name pos:start="359:25" pos:end="359:26">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="361:13" pos:end="361:28">return <expr pos:start="361:20" pos:end="361:27"><operator pos:start="361:20" pos:end="361:20">-</operator><name pos:start="361:21" pos:end="361:27">ELIBBAD</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="369:5" pos:end="371:39">/* OK, we are done with that, now set up the arg stuff,

       and then start this sucker up */</comment>



    <if_stmt pos:start="375:5" pos:end="415:5"><if pos:start="375:5" pos:end="415:5">if <condition pos:start="375:8" pos:end="375:23">(<expr pos:start="375:9" pos:end="375:22"><operator pos:start="375:9" pos:end="375:9">!</operator><name pos:start="375:10" pos:end="375:22"><name pos:start="375:10" pos:end="375:13">bprm</name><operator pos:start="375:14" pos:end="375:15">-&gt;</operator><name pos:start="375:16" pos:end="375:22">sh_bang</name></name></expr>)</condition> <block pos:start="375:25" pos:end="415:5">{<block_content pos:start="377:9" pos:end="413:9">

	<decl_stmt pos:start="377:9" pos:end="377:24"><decl pos:start="377:9" pos:end="377:23"><type pos:start="377:9" pos:end="377:14"><name pos:start="377:9" pos:end="377:12">char</name> <modifier pos:start="377:14" pos:end="377:14">*</modifier></type> <name pos:start="377:16" pos:end="377:23">passed_p</name></decl>;</decl_stmt>



	<if_stmt pos:start="381:9" pos:end="397:9"><if pos:start="381:9" pos:end="397:9">if <condition pos:start="381:12" pos:end="381:49">(<expr pos:start="381:13" pos:end="381:48"><name pos:start="381:13" pos:end="381:28">interpreter_type</name> <operator pos:start="381:30" pos:end="381:31">==</operator> <name pos:start="381:33" pos:end="381:48">INTERPRETER_AOUT</name></expr>)</condition> <block pos:start="381:51" pos:end="397:9">{<block_content pos:start="383:13" pos:end="395:13">

	    <expr_stmt pos:start="383:13" pos:end="383:51"><expr pos:start="383:13" pos:end="383:50"><call pos:start="383:13" pos:end="383:50"><name pos:start="383:13" pos:end="383:19">sprintf</name><argument_list pos:start="383:20" pos:end="383:50">(<argument pos:start="383:21" pos:end="383:33"><expr pos:start="383:21" pos:end="383:33"><name pos:start="383:21" pos:end="383:33">passed_fileno</name></expr></argument>, <argument pos:start="383:36" pos:end="383:39"><expr pos:start="383:36" pos:end="383:39"><literal type="string" pos:start="383:36" pos:end="383:39">"%d"</literal></expr></argument>, <argument pos:start="383:42" pos:end="383:49"><expr pos:start="383:42" pos:end="383:49"><name pos:start="383:42" pos:end="383:49"><name pos:start="383:42" pos:end="383:45">bprm</name><operator pos:start="383:46" pos:end="383:47">-&gt;</operator><name pos:start="383:48" pos:end="383:49">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="385:13" pos:end="385:37"><expr pos:start="385:13" pos:end="385:36"><name pos:start="385:13" pos:end="385:20">passed_p</name> <operator pos:start="385:22" pos:end="385:22">=</operator> <name pos:start="385:24" pos:end="385:36">passed_fileno</name></expr>;</expr_stmt>



	    <if_stmt pos:start="389:13" pos:end="395:13"><if pos:start="389:13" pos:end="395:13">if <condition pos:start="389:16" pos:end="389:32">(<expr pos:start="389:17" pos:end="389:31"><name pos:start="389:17" pos:end="389:31">elf_interpreter</name></expr>)</condition> <block pos:start="389:34" pos:end="395:13">{<block_content pos:start="391:17" pos:end="393:29">

		<expr_stmt pos:start="391:17" pos:end="391:71"><expr pos:start="391:17" pos:end="391:70"><name pos:start="391:17" pos:end="391:23"><name pos:start="391:17" pos:end="391:20">bprm</name><operator pos:start="391:21" pos:end="391:22">-&gt;</operator><name pos:start="391:23" pos:end="391:23">p</name></name> <operator pos:start="391:25" pos:end="391:25">=</operator> <call pos:start="391:27" pos:end="391:70"><name pos:start="391:27" pos:end="391:38">copy_strings</name><argument_list pos:start="391:39" pos:end="391:70">(<argument pos:start="391:40" pos:end="391:40"><expr pos:start="391:40" pos:end="391:40"><literal type="number" pos:start="391:40" pos:end="391:40">1</literal></expr></argument>,<argument pos:start="391:42" pos:end="391:50"><expr pos:start="391:42" pos:end="391:50"><operator pos:start="391:42" pos:end="391:42">&amp;</operator><name pos:start="391:43" pos:end="391:50">passed_p</name></expr></argument>,<argument pos:start="391:52" pos:end="391:61"><expr pos:start="391:52" pos:end="391:61"><name pos:start="391:52" pos:end="391:61"><name pos:start="391:52" pos:end="391:55">bprm</name><operator pos:start="391:56" pos:end="391:57">-&gt;</operator><name pos:start="391:58" pos:end="391:61">page</name></name></expr></argument>,<argument pos:start="391:63" pos:end="391:69"><expr pos:start="391:63" pos:end="391:69"><name pos:start="391:63" pos:end="391:69"><name pos:start="391:63" pos:end="391:66">bprm</name><operator pos:start="391:67" pos:end="391:68">-&gt;</operator><name pos:start="391:69" pos:end="391:69">p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="393:17" pos:end="393:29"><expr pos:start="393:17" pos:end="393:28"><name pos:start="393:17" pos:end="393:26"><name pos:start="393:17" pos:end="393:20">bprm</name><operator pos:start="393:21" pos:end="393:22">-&gt;</operator><name pos:start="393:23" pos:end="393:26">argc</name></name><operator pos:start="393:27" pos:end="393:28">++</operator></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="399:9" pos:end="413:9"><if pos:start="399:9" pos:end="413:9">if <condition pos:start="399:12" pos:end="399:21">(<expr pos:start="399:13" pos:end="399:20"><operator pos:start="399:13" pos:end="399:13">!</operator><name pos:start="399:14" pos:end="399:20"><name pos:start="399:14" pos:end="399:17">bprm</name><operator pos:start="399:18" pos:end="399:19">-&gt;</operator><name pos:start="399:20" pos:end="399:20">p</name></name></expr>)</condition> <block pos:start="399:23" pos:end="413:9">{<block_content pos:start="401:13" pos:end="411:26">

	    <if_stmt pos:start="401:13" pos:end="405:13"><if pos:start="401:13" pos:end="405:13">if <condition pos:start="401:16" pos:end="401:32">(<expr pos:start="401:17" pos:end="401:31"><name pos:start="401:17" pos:end="401:31">elf_interpreter</name></expr>)</condition> <block pos:start="401:34" pos:end="405:13">{<block_content pos:start="403:17" pos:end="403:38">

	        <expr_stmt pos:start="403:17" pos:end="403:38"><expr pos:start="403:17" pos:end="403:37"><call pos:start="403:17" pos:end="403:37"><name pos:start="403:17" pos:end="403:20">free</name><argument_list pos:start="403:21" pos:end="403:37">(<argument pos:start="403:22" pos:end="403:36"><expr pos:start="403:22" pos:end="403:36"><name pos:start="403:22" pos:end="403:36">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="407:13" pos:end="407:30"><expr pos:start="407:13" pos:end="407:29"><call pos:start="407:13" pos:end="407:29"><name pos:start="407:13" pos:end="407:16">free</name> <argument_list pos:start="407:18" pos:end="407:29">(<argument pos:start="407:19" pos:end="407:28"><expr pos:start="407:19" pos:end="407:28"><name pos:start="407:19" pos:end="407:28">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="409:13" pos:end="409:28"><expr pos:start="409:13" pos:end="409:27"><call pos:start="409:13" pos:end="409:27"><name pos:start="409:13" pos:end="409:17">close</name><argument_list pos:start="409:18" pos:end="409:27">(<argument pos:start="409:19" pos:end="409:26"><expr pos:start="409:19" pos:end="409:26"><name pos:start="409:19" pos:end="409:26"><name pos:start="409:19" pos:end="409:22">bprm</name><operator pos:start="409:23" pos:end="409:24">-&gt;</operator><name pos:start="409:25" pos:end="409:26">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="411:13" pos:end="411:26">return <expr pos:start="411:20" pos:end="411:25"><operator pos:start="411:20" pos:end="411:20">-</operator><name pos:start="411:21" pos:end="411:25">E2BIG</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="419:5" pos:end="419:44">/* OK, This is the point of no return */</comment>

    <expr_stmt pos:start="421:5" pos:end="421:23"><expr pos:start="421:5" pos:end="421:22"><name pos:start="421:5" pos:end="421:18"><name pos:start="421:5" pos:end="421:8">info</name><operator pos:start="421:9" pos:end="421:10">-&gt;</operator><name pos:start="421:11" pos:end="421:18">end_data</name></name> <operator pos:start="421:20" pos:end="421:20">=</operator> <literal type="number" pos:start="421:22" pos:end="421:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:23"><expr pos:start="423:5" pos:end="423:22"><name pos:start="423:5" pos:end="423:18"><name pos:start="423:5" pos:end="423:8">info</name><operator pos:start="423:9" pos:end="423:10">-&gt;</operator><name pos:start="423:11" pos:end="423:18">end_code</name></name> <operator pos:start="423:20" pos:end="423:20">=</operator> <literal type="number" pos:start="423:22" pos:end="423:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:53"><expr pos:start="425:5" pos:end="425:52"><name pos:start="425:5" pos:end="425:20"><name pos:start="425:5" pos:end="425:8">info</name><operator pos:start="425:9" pos:end="425:10">-&gt;</operator><name pos:start="425:11" pos:end="425:20">start_mmap</name></name> <operator pos:start="425:22" pos:end="425:22">=</operator> <operator pos:start="425:24" pos:end="425:24">(</operator><name pos:start="425:25" pos:end="425:32">unsigned</name> <name pos:start="425:34" pos:end="425:37">long</name><operator pos:start="425:38" pos:end="425:38">)</operator><name pos:start="425:39" pos:end="425:52">ELF_START_MMAP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:19"><expr pos:start="427:5" pos:end="427:18"><name pos:start="427:5" pos:end="427:14"><name pos:start="427:5" pos:end="427:8">info</name><operator pos:start="427:9" pos:end="427:10">-&gt;</operator><name pos:start="427:11" pos:end="427:14">mmap</name></name> <operator pos:start="427:16" pos:end="427:16">=</operator> <literal type="number" pos:start="427:18" pos:end="427:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:47"><expr pos:start="429:5" pos:end="429:46"><name pos:start="429:5" pos:end="429:13">elf_entry</name> <operator pos:start="429:15" pos:end="429:15">=</operator> <operator pos:start="429:17" pos:end="429:17">(</operator><name pos:start="429:18" pos:end="429:25">unsigned</name> <name pos:start="429:27" pos:end="429:30">long</name><operator pos:start="429:31" pos:end="429:31">)</operator> <name pos:start="429:33" pos:end="429:46"><name pos:start="429:33" pos:end="429:38">elf_ex</name><operator pos:start="429:39" pos:end="429:39">.</operator><name pos:start="429:40" pos:end="429:46">e_entry</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="433:5" pos:end="435:36">/* Do this so that we can load the interpreter, if need be.  We will

       change some of these later */</comment>

    <expr_stmt pos:start="437:5" pos:end="437:18"><expr pos:start="437:5" pos:end="437:17"><name pos:start="437:5" pos:end="437:13"><name pos:start="437:5" pos:end="437:8">info</name><operator pos:start="437:9" pos:end="437:10">-&gt;</operator><name pos:start="437:11" pos:end="437:13">rss</name></name> <operator pos:start="437:15" pos:end="437:15">=</operator> <literal type="number" pos:start="437:17" pos:end="437:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:51"><expr pos:start="439:5" pos:end="439:50"><name pos:start="439:5" pos:end="439:11"><name pos:start="439:5" pos:end="439:8">bprm</name><operator pos:start="439:9" pos:end="439:10">-&gt;</operator><name pos:start="439:11" pos:end="439:11">p</name></name> <operator pos:start="439:13" pos:end="439:13">=</operator> <call pos:start="439:15" pos:end="439:50"><name pos:start="439:15" pos:end="439:29">setup_arg_pages</name><argument_list pos:start="439:30" pos:end="439:50">(<argument pos:start="439:31" pos:end="439:37"><expr pos:start="439:31" pos:end="439:37"><name pos:start="439:31" pos:end="439:37"><name pos:start="439:31" pos:end="439:34">bprm</name><operator pos:start="439:35" pos:end="439:36">-&gt;</operator><name pos:start="439:37" pos:end="439:37">p</name></name></expr></argument>, <argument pos:start="439:40" pos:end="439:43"><expr pos:start="439:40" pos:end="439:43"><name pos:start="439:40" pos:end="439:43">bprm</name></expr></argument>, <argument pos:start="439:46" pos:end="439:49"><expr pos:start="439:46" pos:end="439:49"><name pos:start="439:46" pos:end="439:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:32"><expr pos:start="441:5" pos:end="441:31"><name pos:start="441:5" pos:end="441:21"><name pos:start="441:5" pos:end="441:8">info</name><operator pos:start="441:9" pos:end="441:10">-&gt;</operator><name pos:start="441:11" pos:end="441:21">start_stack</name></name> <operator pos:start="441:23" pos:end="441:23">=</operator> <name pos:start="441:25" pos:end="441:31"><name pos:start="441:25" pos:end="441:28">bprm</name><operator pos:start="441:29" pos:end="441:30">-&gt;</operator><name pos:start="441:31" pos:end="441:31">p</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="445:5" pos:end="453:7">/* Now we do a little grungy work by mmaping the ELF image into

     * the correct location in memory.  At this point, we assume that

     * the image should be loaded at fixed address, not at a variable

     * address.

     */</comment>



    <for pos:start="457:5" pos:end="595:5">for<control pos:start="457:8" pos:end="457:74">(<init pos:start="457:9" pos:end="457:37"><expr pos:start="457:9" pos:end="457:13"><name pos:start="457:9" pos:end="457:9">i</name> <operator pos:start="457:11" pos:end="457:11">=</operator> <literal type="number" pos:start="457:13" pos:end="457:13">0</literal></expr><operator pos:start="457:14" pos:end="457:14">,</operator> <expr pos:start="457:16" pos:end="457:36"><name pos:start="457:16" pos:end="457:23">elf_ppnt</name> <operator pos:start="457:25" pos:end="457:25">=</operator> <name pos:start="457:27" pos:end="457:36">elf_phdata</name></expr>;</init> <condition pos:start="457:39" pos:end="457:57"><expr pos:start="457:39" pos:end="457:56"><name pos:start="457:39" pos:end="457:39">i</name> <operator pos:start="457:41" pos:end="457:41">&lt;</operator> <name pos:start="457:43" pos:end="457:56"><name pos:start="457:43" pos:end="457:48">elf_ex</name><operator pos:start="457:49" pos:end="457:49">.</operator><name pos:start="457:50" pos:end="457:56">e_phnum</name></name></expr>;</condition> <incr pos:start="457:59" pos:end="457:73"><expr pos:start="457:59" pos:end="457:61"><name pos:start="457:59" pos:end="457:59">i</name><operator pos:start="457:60" pos:end="457:61">++</operator></expr><operator pos:start="457:62" pos:end="457:62">,</operator> <expr pos:start="457:64" pos:end="457:73"><name pos:start="457:64" pos:end="457:71">elf_ppnt</name><operator pos:start="457:72" pos:end="457:73">++</operator></expr></incr>)</control> <block pos:start="457:76" pos:end="595:5">{<block_content pos:start="459:9" pos:end="593:37">

        <decl_stmt pos:start="459:9" pos:end="459:25"><decl pos:start="459:9" pos:end="459:24"><type pos:start="459:9" pos:end="459:11"><name pos:start="459:9" pos:end="459:11">int</name></type> <name pos:start="459:13" pos:end="459:20">elf_prot</name> <init pos:start="459:22" pos:end="459:24">= <expr pos:start="459:24" pos:end="459:24"><literal type="number" pos:start="459:24" pos:end="459:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="461:9" pos:end="461:26"><decl pos:start="461:9" pos:end="461:25"><type pos:start="461:9" pos:end="461:11"><name pos:start="461:9" pos:end="461:11">int</name></type> <name pos:start="461:13" pos:end="461:21">elf_flags</name> <init pos:start="461:23" pos:end="461:25">= <expr pos:start="461:25" pos:end="461:25"><literal type="number" pos:start="461:25" pos:end="461:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="463:9" pos:end="463:28"><decl pos:start="463:9" pos:end="463:27"><type pos:start="463:9" pos:end="463:21"><name pos:start="463:9" pos:end="463:16">unsigned</name> <name pos:start="463:18" pos:end="463:21">long</name></type> <name pos:start="463:23" pos:end="463:27">error</name></decl>;</decl_stmt>

        

	<if_stmt pos:start="467:9" pos:end="469:21"><if pos:start="467:9" pos:end="469:21">if <condition pos:start="467:12" pos:end="467:40">(<expr pos:start="467:13" pos:end="467:39"><name pos:start="467:13" pos:end="467:28"><name pos:start="467:13" pos:end="467:20">elf_ppnt</name><operator pos:start="467:21" pos:end="467:22">-&gt;</operator><name pos:start="467:23" pos:end="467:28">p_type</name></name> <operator pos:start="467:30" pos:end="467:31">!=</operator> <name pos:start="467:33" pos:end="467:39">PT_LOAD</name></expr>)</condition><block type="pseudo" pos:start="469:13" pos:end="469:21"><block_content pos:start="469:13" pos:end="469:21">

            <continue pos:start="469:13" pos:end="469:21">continue;</continue></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="473:9" pos:end="473:60"><if pos:start="473:9" pos:end="473:60">if <condition pos:start="473:12" pos:end="473:37">(<expr pos:start="473:13" pos:end="473:36"><name pos:start="473:13" pos:end="473:29"><name pos:start="473:13" pos:end="473:20">elf_ppnt</name><operator pos:start="473:21" pos:end="473:22">-&gt;</operator><name pos:start="473:23" pos:end="473:29">p_flags</name></name> <operator pos:start="473:31" pos:end="473:31">&amp;</operator> <name pos:start="473:33" pos:end="473:36">PF_R</name></expr>)</condition><block type="pseudo" pos:start="473:39" pos:end="473:60"><block_content pos:start="473:39" pos:end="473:60"> <expr_stmt pos:start="473:39" pos:end="473:60"><expr pos:start="473:39" pos:end="473:59"><name pos:start="473:39" pos:end="473:46">elf_prot</name> <operator pos:start="473:48" pos:end="473:49">|=</operator> <name pos:start="473:51" pos:end="473:59">PROT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="475:9" pos:end="475:61"><if pos:start="475:9" pos:end="475:61">if <condition pos:start="475:12" pos:end="475:37">(<expr pos:start="475:13" pos:end="475:36"><name pos:start="475:13" pos:end="475:29"><name pos:start="475:13" pos:end="475:20">elf_ppnt</name><operator pos:start="475:21" pos:end="475:22">-&gt;</operator><name pos:start="475:23" pos:end="475:29">p_flags</name></name> <operator pos:start="475:31" pos:end="475:31">&amp;</operator> <name pos:start="475:33" pos:end="475:36">PF_W</name></expr>)</condition><block type="pseudo" pos:start="475:39" pos:end="475:61"><block_content pos:start="475:39" pos:end="475:61"> <expr_stmt pos:start="475:39" pos:end="475:61"><expr pos:start="475:39" pos:end="475:60"><name pos:start="475:39" pos:end="475:46">elf_prot</name> <operator pos:start="475:48" pos:end="475:49">|=</operator> <name pos:start="475:51" pos:end="475:60">PROT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="477:9" pos:end="477:60"><if pos:start="477:9" pos:end="477:60">if <condition pos:start="477:12" pos:end="477:37">(<expr pos:start="477:13" pos:end="477:36"><name pos:start="477:13" pos:end="477:29"><name pos:start="477:13" pos:end="477:20">elf_ppnt</name><operator pos:start="477:21" pos:end="477:22">-&gt;</operator><name pos:start="477:23" pos:end="477:29">p_flags</name></name> <operator pos:start="477:31" pos:end="477:31">&amp;</operator> <name pos:start="477:33" pos:end="477:36">PF_X</name></expr>)</condition><block type="pseudo" pos:start="477:39" pos:end="477:60"><block_content pos:start="477:39" pos:end="477:60"> <expr_stmt pos:start="477:39" pos:end="477:60"><expr pos:start="477:39" pos:end="477:59"><name pos:start="477:39" pos:end="477:46">elf_prot</name> <operator pos:start="477:48" pos:end="477:49">|=</operator> <name pos:start="477:51" pos:end="477:59">PROT_EXEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:48"><expr pos:start="479:9" pos:end="479:47"><name pos:start="479:9" pos:end="479:17">elf_flags</name> <operator pos:start="479:19" pos:end="479:19">=</operator> <name pos:start="479:21" pos:end="479:31">MAP_PRIVATE</name> <operator pos:start="479:33" pos:end="479:33">|</operator> <name pos:start="479:35" pos:end="479:47">MAP_DENYWRITE</name></expr>;</expr_stmt>

        <if_stmt pos:start="481:9" pos:end="513:9"><if pos:start="481:9" pos:end="485:9">if <condition pos:start="481:12" pos:end="481:54">(<expr pos:start="481:13" pos:end="481:53"><name pos:start="481:13" pos:end="481:25"><name pos:start="481:13" pos:end="481:18">elf_ex</name><operator pos:start="481:19" pos:end="481:19">.</operator><name pos:start="481:20" pos:end="481:25">e_type</name></name> <operator pos:start="481:27" pos:end="481:28">==</operator> <name pos:start="481:30" pos:end="481:36">ET_EXEC</name> <operator pos:start="481:38" pos:end="481:39">||</operator> <name pos:start="481:41" pos:end="481:53">load_addr_set</name></expr>)</condition> <block pos:start="481:56" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:35">

            <expr_stmt pos:start="483:13" pos:end="483:35"><expr pos:start="483:13" pos:end="483:34"><name pos:start="483:13" pos:end="483:21">elf_flags</name> <operator pos:start="483:23" pos:end="483:24">|=</operator> <name pos:start="483:26" pos:end="483:34">MAP_FIXED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="485:11" pos:end="513:9">else if <condition pos:start="485:19" pos:end="485:43">(<expr pos:start="485:20" pos:end="485:42"><name pos:start="485:20" pos:end="485:32"><name pos:start="485:20" pos:end="485:25">elf_ex</name><operator pos:start="485:26" pos:end="485:26">.</operator><name pos:start="485:27" pos:end="485:32">e_type</name></name> <operator pos:start="485:34" pos:end="485:35">==</operator> <name pos:start="485:37" pos:end="485:42">ET_DYN</name></expr>)</condition> <block pos:start="485:45" pos:end="513:9">{<block_content pos:start="497:13" pos:end="511:72">

            <comment type="block" pos:start="487:13" pos:end="491:81">/* Try and get dynamic programs out of the way of the default mmap

               base, as well as whatever program they might try to exec.  This

               is because the brk will follow the loader, and is not movable.  */</comment>

            <comment type="block" pos:start="493:13" pos:end="495:47">/* NOTE: for qemu, we do a big mmap to get enough space

               without harcoding any address */</comment>

            <expr_stmt pos:start="497:13" pos:end="501:39"><expr pos:start="497:13" pos:end="501:38"><name pos:start="497:13" pos:end="497:17">error</name> <operator pos:start="497:19" pos:end="497:19">=</operator> <call pos:start="497:21" pos:end="501:38"><name pos:start="497:21" pos:end="497:31">target_mmap</name><argument_list pos:start="497:32" pos:end="501:38">(<argument pos:start="497:33" pos:end="497:33"><expr pos:start="497:33" pos:end="497:33"><literal type="number" pos:start="497:33" pos:end="497:33">0</literal></expr></argument>, <argument pos:start="497:36" pos:end="497:50"><expr pos:start="497:36" pos:end="497:50"><name pos:start="497:36" pos:end="497:50">ET_DYN_MAP_SIZE</name></expr></argument>,

                                <argument pos:start="499:33" pos:end="499:41"><expr pos:start="499:33" pos:end="499:41"><name pos:start="499:33" pos:end="499:41">PROT_NONE</name></expr></argument>, <argument pos:start="499:44" pos:end="499:65"><expr pos:start="499:44" pos:end="499:65"><name pos:start="499:44" pos:end="499:54">MAP_PRIVATE</name> <operator pos:start="499:56" pos:end="499:56">|</operator> <name pos:start="499:58" pos:end="499:65">MAP_ANON</name></expr></argument>, 

                                <argument pos:start="501:33" pos:end="501:34"><expr pos:start="501:33" pos:end="501:34"><operator pos:start="501:33" pos:end="501:33">-</operator><literal type="number" pos:start="501:34" pos:end="501:34">1</literal></expr></argument>, <argument pos:start="501:37" pos:end="501:37"><expr pos:start="501:37" pos:end="501:37"><literal type="number" pos:start="501:37" pos:end="501:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="503:13" pos:end="509:13"><if pos:start="503:13" pos:end="509:13">if <condition pos:start="503:16" pos:end="503:28">(<expr pos:start="503:17" pos:end="503:27"><name pos:start="503:17" pos:end="503:21">error</name> <operator pos:start="503:23" pos:end="503:24">==</operator> <operator pos:start="503:26" pos:end="503:26">-</operator><literal type="number" pos:start="503:27" pos:end="503:27">1</literal></expr>)</condition> <block pos:start="503:30" pos:end="509:13">{<block_content pos:start="505:17" pos:end="507:25">

                <expr_stmt pos:start="505:17" pos:end="505:31"><expr pos:start="505:17" pos:end="505:30"><call pos:start="505:17" pos:end="505:30"><name pos:start="505:17" pos:end="505:22">perror</name><argument_list pos:start="505:23" pos:end="505:30">(<argument pos:start="505:24" pos:end="505:29"><expr pos:start="505:24" pos:end="505:29"><literal type="string" pos:start="505:24" pos:end="505:29">"mmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="507:17" pos:end="507:25"><expr pos:start="507:17" pos:end="507:24"><call pos:start="507:17" pos:end="507:24"><name pos:start="507:17" pos:end="507:20">exit</name><argument_list pos:start="507:21" pos:end="507:24">(<argument pos:start="507:22" pos:end="507:23"><expr pos:start="507:22" pos:end="507:23"><operator pos:start="507:22" pos:end="507:22">-</operator><literal type="number" pos:start="507:23" pos:end="507:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:72"><expr pos:start="511:13" pos:end="511:71"><name pos:start="511:13" pos:end="511:21">load_bias</name> <operator pos:start="511:23" pos:end="511:23">=</operator> <call pos:start="511:25" pos:end="511:71"><name pos:start="511:25" pos:end="511:44">TARGET_ELF_PAGESTART</name><argument_list pos:start="511:45" pos:end="511:71">(<argument pos:start="511:46" pos:end="511:70"><expr pos:start="511:46" pos:end="511:70"><name pos:start="511:46" pos:end="511:50">error</name> <operator pos:start="511:52" pos:end="511:52">-</operator> <name pos:start="511:54" pos:end="511:70"><name pos:start="511:54" pos:end="511:61">elf_ppnt</name><operator pos:start="511:62" pos:end="511:63">-&gt;</operator><name pos:start="511:64" pos:end="511:70">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <expr_stmt pos:start="517:9" pos:end="531:72"><expr pos:start="517:9" pos:end="531:71"><name pos:start="517:9" pos:end="517:13">error</name> <operator pos:start="517:15" pos:end="517:15">=</operator> <call pos:start="517:17" pos:end="531:71"><name pos:start="517:17" pos:end="517:27">target_mmap</name><argument_list pos:start="517:28" pos:end="531:71">(<argument pos:start="517:29" pos:end="517:79"><expr pos:start="517:29" pos:end="517:79"><call pos:start="517:29" pos:end="517:79"><name pos:start="517:29" pos:end="517:48">TARGET_ELF_PAGESTART</name><argument_list pos:start="517:49" pos:end="517:79">(<argument pos:start="517:50" pos:end="517:78"><expr pos:start="517:50" pos:end="517:78"><name pos:start="517:50" pos:end="517:58">load_bias</name> <operator pos:start="517:60" pos:end="517:60">+</operator> <name pos:start="517:62" pos:end="517:78"><name pos:start="517:62" pos:end="517:69">elf_ppnt</name><operator pos:start="517:70" pos:end="517:71">-&gt;</operator><name pos:start="517:72" pos:end="517:78">p_vaddr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="519:29" pos:end="521:70"><expr pos:start="519:29" pos:end="521:70"><operator pos:start="519:29" pos:end="519:29">(</operator><name pos:start="519:30" pos:end="519:47"><name pos:start="519:30" pos:end="519:37">elf_ppnt</name><operator pos:start="519:38" pos:end="519:39">-&gt;</operator><name pos:start="519:40" pos:end="519:47">p_filesz</name></name> <operator pos:start="519:49" pos:end="519:49">+</operator>

                             <call pos:start="521:30" pos:end="521:69"><name pos:start="521:30" pos:end="521:50">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="521:51" pos:end="521:69">(<argument pos:start="521:52" pos:end="521:68"><expr pos:start="521:52" pos:end="521:68"><name pos:start="521:52" pos:end="521:68"><name pos:start="521:52" pos:end="521:59">elf_ppnt</name><operator pos:start="521:60" pos:end="521:61">-&gt;</operator><name pos:start="521:62" pos:end="521:68">p_vaddr</name></name></expr></argument>)</argument_list></call><operator pos:start="521:70" pos:end="521:70">)</operator></expr></argument>,

                            <argument pos:start="523:29" pos:end="523:36"><expr pos:start="523:29" pos:end="523:36"><name pos:start="523:29" pos:end="523:36">elf_prot</name></expr></argument>,

                            <argument pos:start="525:29" pos:end="525:69"><expr pos:start="525:29" pos:end="525:69"><operator pos:start="525:29" pos:end="525:29">(</operator><name pos:start="525:30" pos:end="525:38">MAP_FIXED</name> <operator pos:start="525:40" pos:end="525:40">|</operator> <name pos:start="525:42" pos:end="525:52">MAP_PRIVATE</name> <operator pos:start="525:54" pos:end="525:54">|</operator> <name pos:start="525:56" pos:end="525:68">MAP_DENYWRITE</name><operator pos:start="525:69" pos:end="525:69">)</operator></expr></argument>,

                            <argument pos:start="527:29" pos:end="527:36"><expr pos:start="527:29" pos:end="527:36"><name pos:start="527:29" pos:end="527:36"><name pos:start="527:29" pos:end="527:32">bprm</name><operator pos:start="527:33" pos:end="527:34">-&gt;</operator><name pos:start="527:35" pos:end="527:36">fd</name></name></expr></argument>,

                            <argument pos:start="529:29" pos:end="531:70"><expr pos:start="529:29" pos:end="531:70"><operator pos:start="529:29" pos:end="529:29">(</operator><name pos:start="529:30" pos:end="529:47"><name pos:start="529:30" pos:end="529:37">elf_ppnt</name><operator pos:start="529:38" pos:end="529:39">-&gt;</operator><name pos:start="529:40" pos:end="529:47">p_offset</name></name> <operator pos:start="529:49" pos:end="529:49">-</operator> 

                             <call pos:start="531:30" pos:end="531:69"><name pos:start="531:30" pos:end="531:50">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="531:51" pos:end="531:69">(<argument pos:start="531:52" pos:end="531:68"><expr pos:start="531:52" pos:end="531:68"><name pos:start="531:52" pos:end="531:68"><name pos:start="531:52" pos:end="531:59">elf_ppnt</name><operator pos:start="531:60" pos:end="531:61">-&gt;</operator><name pos:start="531:62" pos:end="531:68">p_vaddr</name></name></expr></argument>)</argument_list></call><operator pos:start="531:70" pos:end="531:70">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="533:9" pos:end="544:0"><if pos:start="533:9" pos:end="544:0">if <condition pos:start="533:12" pos:end="533:24">(<expr pos:start="533:13" pos:end="533:23"><name pos:start="533:13" pos:end="533:17">error</name> <operator pos:start="533:19" pos:end="533:20">==</operator> <operator pos:start="533:22" pos:end="533:22">-</operator><literal type="number" pos:start="533:23" pos:end="533:23">1</literal></expr>)</condition> <block pos:start="533:26" pos:end="544:0">{<block_content pos:start="535:13" pos:end="537:21">

            <expr_stmt pos:start="535:13" pos:end="535:27"><expr pos:start="535:13" pos:end="535:26"><call pos:start="535:13" pos:end="535:26"><name pos:start="535:13" pos:end="535:18">perror</name><argument_list pos:start="535:19" pos:end="535:26">(<argument pos:start="535:20" pos:end="535:25"><expr pos:start="535:20" pos:end="535:25"><literal type="string" pos:start="535:20" pos:end="535:25">"mmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="537:13" pos:end="537:21"><expr pos:start="537:13" pos:end="537:20"><call pos:start="537:13" pos:end="537:20"><name pos:start="537:13" pos:end="537:16">exit</name><argument_list pos:start="537:17" pos:end="537:20">(<argument pos:start="537:18" pos:end="537:19"><expr pos:start="537:18" pos:end="537:19"><operator pos:start="537:18" pos:end="537:18">-</operator><literal type="number" pos:start="537:19" pos:end="537:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="543:1" pos:end="543:20">#<cpp:directive pos:start="543:2" pos:end="543:6">ifdef</cpp:directive> <name pos:start="543:8" pos:end="543:20">LOW_ELF_STACK</name></cpp:ifdef>

        <if_stmt pos:start="545:9" pos:end="550:0"><if pos:start="545:9" pos:end="550:0">if <condition pos:start="545:12" pos:end="545:64">(<expr pos:start="545:13" pos:end="545:63"><call pos:start="545:13" pos:end="545:51"><name pos:start="545:13" pos:end="545:32">TARGET_ELF_PAGESTART</name><argument_list pos:start="545:33" pos:end="545:51">(<argument pos:start="545:34" pos:end="545:50"><expr pos:start="545:34" pos:end="545:50"><name pos:start="545:34" pos:end="545:50"><name pos:start="545:34" pos:end="545:41">elf_ppnt</name><operator pos:start="545:42" pos:end="545:43">-&gt;</operator><name pos:start="545:44" pos:end="545:50">p_vaddr</name></name></expr></argument>)</argument_list></call> <operator pos:start="545:53" pos:end="545:53">&lt;</operator> <name pos:start="545:55" pos:end="545:63">elf_stack</name></expr>)</condition><block type="pseudo" pos:start="547:13" pos:end="550:0"><block_content pos:start="547:13" pos:end="550:0">

            <expr_stmt pos:start="547:13" pos:end="550:0"><expr pos:start="547:13" pos:end="547:63"><name pos:start="547:13" pos:end="547:21">elf_stack</name> <operator pos:start="547:23" pos:end="547:23">=</operator> <call pos:start="547:25" pos:end="547:63"><name pos:start="547:25" pos:end="547:44">TARGET_ELF_PAGESTART</name><argument_list pos:start="547:45" pos:end="547:63">(<argument pos:start="547:46" pos:end="547:62"><expr pos:start="547:46" pos:end="547:62"><name pos:start="547:46" pos:end="547:62"><name pos:start="547:46" pos:end="547:53">elf_ppnt</name><operator pos:start="547:54" pos:end="547:55">-&gt;</operator><name pos:start="547:56" pos:end="547:62">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="549:1" pos:end="549:6">#<cpp:directive pos:start="549:2" pos:end="549:6">endif</cpp:directive></cpp:endif>

        

        <if_stmt pos:start="553:9" pos:end="569:9"><if pos:start="553:9" pos:end="569:9">if <condition pos:start="553:12" pos:end="553:27">(<expr pos:start="553:13" pos:end="553:26"><operator pos:start="553:13" pos:end="553:13">!</operator><name pos:start="553:14" pos:end="553:26">load_addr_set</name></expr>)</condition> <block pos:start="553:29" pos:end="569:9">{<block_content pos:start="555:13" pos:end="567:13">

            <expr_stmt pos:start="555:13" pos:end="555:30"><expr pos:start="555:13" pos:end="555:29"><name pos:start="555:13" pos:end="555:25">load_addr_set</name> <operator pos:start="555:27" pos:end="555:27">=</operator> <literal type="number" pos:start="555:29" pos:end="555:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="557:13" pos:end="557:63"><expr pos:start="557:13" pos:end="557:62"><name pos:start="557:13" pos:end="557:21">load_addr</name> <operator pos:start="557:23" pos:end="557:23">=</operator> <name pos:start="557:25" pos:end="557:41"><name pos:start="557:25" pos:end="557:32">elf_ppnt</name><operator pos:start="557:33" pos:end="557:34">-&gt;</operator><name pos:start="557:35" pos:end="557:41">p_vaddr</name></name> <operator pos:start="557:43" pos:end="557:43">-</operator> <name pos:start="557:45" pos:end="557:62"><name pos:start="557:45" pos:end="557:52">elf_ppnt</name><operator pos:start="557:53" pos:end="557:54">-&gt;</operator><name pos:start="557:55" pos:end="557:62">p_offset</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="559:13" pos:end="567:13"><if pos:start="559:13" pos:end="567:13">if <condition pos:start="559:16" pos:end="559:40">(<expr pos:start="559:17" pos:end="559:39"><name pos:start="559:17" pos:end="559:29"><name pos:start="559:17" pos:end="559:22">elf_ex</name><operator pos:start="559:23" pos:end="559:23">.</operator><name pos:start="559:24" pos:end="559:29">e_type</name></name> <operator pos:start="559:31" pos:end="559:32">==</operator> <name pos:start="559:34" pos:end="559:39">ET_DYN</name></expr>)</condition> <block pos:start="559:42" pos:end="567:13">{<block_content pos:start="561:17" pos:end="565:39">

                <expr_stmt pos:start="561:17" pos:end="563:72"><expr pos:start="561:17" pos:end="563:71"><name pos:start="561:17" pos:end="561:25">load_bias</name> <operator pos:start="561:27" pos:end="561:28">+=</operator> <name pos:start="561:30" pos:end="561:34">error</name> <operator pos:start="561:36" pos:end="561:36">-</operator>

                    <call pos:start="563:21" pos:end="563:71"><name pos:start="563:21" pos:end="563:40">TARGET_ELF_PAGESTART</name><argument_list pos:start="563:41" pos:end="563:71">(<argument pos:start="563:42" pos:end="563:70"><expr pos:start="563:42" pos:end="563:70"><name pos:start="563:42" pos:end="563:50">load_bias</name> <operator pos:start="563:52" pos:end="563:52">+</operator> <name pos:start="563:54" pos:end="563:70"><name pos:start="563:54" pos:end="563:61">elf_ppnt</name><operator pos:start="563:62" pos:end="563:63">-&gt;</operator><name pos:start="563:64" pos:end="563:70">p_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="565:17" pos:end="565:39"><expr pos:start="565:17" pos:end="565:38"><name pos:start="565:17" pos:end="565:25">load_addr</name> <operator pos:start="565:27" pos:end="565:28">+=</operator> <name pos:start="565:30" pos:end="565:38">load_bias</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="571:9" pos:end="571:30"><expr pos:start="571:9" pos:end="571:29"><name pos:start="571:9" pos:end="571:9">k</name> <operator pos:start="571:11" pos:end="571:11">=</operator> <name pos:start="571:13" pos:end="571:29"><name pos:start="571:13" pos:end="571:20">elf_ppnt</name><operator pos:start="571:21" pos:end="571:22">-&gt;</operator><name pos:start="571:23" pos:end="571:29">p_vaddr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="573:9" pos:end="575:27"><if pos:start="573:9" pos:end="575:27">if <condition pos:start="573:12" pos:end="573:27">(<expr pos:start="573:13" pos:end="573:26"><name pos:start="573:13" pos:end="573:13">k</name> <operator pos:start="573:15" pos:end="573:15">&lt;</operator> <name pos:start="573:17" pos:end="573:26">start_code</name></expr>)</condition><block type="pseudo" pos:start="575:13" pos:end="575:27"><block_content pos:start="575:13" pos:end="575:27"> 

            <expr_stmt pos:start="575:13" pos:end="575:27"><expr pos:start="575:13" pos:end="575:26"><name pos:start="575:13" pos:end="575:22">start_code</name> <operator pos:start="575:24" pos:end="575:24">=</operator> <name pos:start="575:26" pos:end="575:26">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:51"><expr pos:start="577:9" pos:end="577:50"><name pos:start="577:9" pos:end="577:9">k</name> <operator pos:start="577:11" pos:end="577:11">=</operator> <name pos:start="577:13" pos:end="577:29"><name pos:start="577:13" pos:end="577:20">elf_ppnt</name><operator pos:start="577:21" pos:end="577:22">-&gt;</operator><name pos:start="577:23" pos:end="577:29">p_vaddr</name></name> <operator pos:start="577:31" pos:end="577:31">+</operator> <name pos:start="577:33" pos:end="577:50"><name pos:start="577:33" pos:end="577:40">elf_ppnt</name><operator pos:start="577:41" pos:end="577:42">-&gt;</operator><name pos:start="577:43" pos:end="577:50">p_filesz</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="579:9" pos:end="581:24"><if pos:start="579:9" pos:end="581:24">if <condition pos:start="579:12" pos:end="579:24">(<expr pos:start="579:13" pos:end="579:23"><name pos:start="579:13" pos:end="579:13">k</name> <operator pos:start="579:15" pos:end="579:15">&gt;</operator> <name pos:start="579:17" pos:end="579:23">elf_bss</name></expr>)</condition><block type="pseudo" pos:start="581:13" pos:end="581:24"><block_content pos:start="581:13" pos:end="581:24"> 

            <expr_stmt pos:start="581:13" pos:end="581:24"><expr pos:start="581:13" pos:end="581:23"><name pos:start="581:13" pos:end="581:19">elf_bss</name> <operator pos:start="581:21" pos:end="581:21">=</operator> <name pos:start="581:23" pos:end="581:23">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="583:9" pos:end="585:25"><if pos:start="583:9" pos:end="585:25">if <condition pos:start="583:12" pos:end="583:56">(<expr pos:start="583:13" pos:end="583:55"><operator pos:start="583:13" pos:end="583:13">(</operator><name pos:start="583:14" pos:end="583:30"><name pos:start="583:14" pos:end="583:21">elf_ppnt</name><operator pos:start="583:22" pos:end="583:23">-&gt;</operator><name pos:start="583:24" pos:end="583:30">p_flags</name></name> <operator pos:start="583:32" pos:end="583:32">&amp;</operator> <name pos:start="583:34" pos:end="583:37">PF_X</name><operator pos:start="583:38" pos:end="583:38">)</operator> <operator pos:start="583:40" pos:end="583:41">&amp;&amp;</operator> <name pos:start="583:43" pos:end="583:50">end_code</name> <operator pos:start="583:52" pos:end="583:52">&lt;</operator>  <name pos:start="583:55" pos:end="583:55">k</name></expr>)</condition><block type="pseudo" pos:start="585:13" pos:end="585:25"><block_content pos:start="585:13" pos:end="585:25">

            <expr_stmt pos:start="585:13" pos:end="585:25"><expr pos:start="585:13" pos:end="585:24"><name pos:start="585:13" pos:end="585:20">end_code</name> <operator pos:start="585:22" pos:end="585:22">=</operator> <name pos:start="585:24" pos:end="585:24">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="587:9" pos:end="589:25"><if pos:start="587:9" pos:end="589:25">if <condition pos:start="587:12" pos:end="587:25">(<expr pos:start="587:13" pos:end="587:24"><name pos:start="587:13" pos:end="587:20">end_data</name> <operator pos:start="587:22" pos:end="587:22">&lt;</operator> <name pos:start="587:24" pos:end="587:24">k</name></expr>)</condition><block type="pseudo" pos:start="589:13" pos:end="589:25"><block_content pos:start="589:13" pos:end="589:25"> 

            <expr_stmt pos:start="589:13" pos:end="589:25"><expr pos:start="589:13" pos:end="589:24"><name pos:start="589:13" pos:end="589:20">end_data</name> <operator pos:start="589:22" pos:end="589:22">=</operator> <name pos:start="589:24" pos:end="589:24">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:50"><expr pos:start="591:9" pos:end="591:49"><name pos:start="591:9" pos:end="591:9">k</name> <operator pos:start="591:11" pos:end="591:11">=</operator> <name pos:start="591:13" pos:end="591:29"><name pos:start="591:13" pos:end="591:20">elf_ppnt</name><operator pos:start="591:21" pos:end="591:22">-&gt;</operator><name pos:start="591:23" pos:end="591:29">p_vaddr</name></name> <operator pos:start="591:31" pos:end="591:31">+</operator> <name pos:start="591:33" pos:end="591:49"><name pos:start="591:33" pos:end="591:40">elf_ppnt</name><operator pos:start="591:41" pos:end="591:42">-&gt;</operator><name pos:start="591:43" pos:end="591:49">p_memsz</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="593:9" pos:end="593:37"><if pos:start="593:9" pos:end="593:37">if <condition pos:start="593:12" pos:end="593:24">(<expr pos:start="593:13" pos:end="593:23"><name pos:start="593:13" pos:end="593:13">k</name> <operator pos:start="593:15" pos:end="593:15">&gt;</operator> <name pos:start="593:17" pos:end="593:23">elf_brk</name></expr>)</condition><block type="pseudo" pos:start="593:26" pos:end="593:37"><block_content pos:start="593:26" pos:end="593:37"> <expr_stmt pos:start="593:26" pos:end="593:37"><expr pos:start="593:26" pos:end="593:36"><name pos:start="593:26" pos:end="593:32">elf_brk</name> <operator pos:start="593:34" pos:end="593:34">=</operator> <name pos:start="593:36" pos:end="593:36">k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="599:5" pos:end="599:27"><expr pos:start="599:5" pos:end="599:26"><name pos:start="599:5" pos:end="599:13">elf_entry</name> <operator pos:start="599:15" pos:end="599:16">+=</operator> <name pos:start="599:18" pos:end="599:26">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="601:5" pos:end="601:25"><expr pos:start="601:5" pos:end="601:24"><name pos:start="601:5" pos:end="601:11">elf_bss</name> <operator pos:start="601:13" pos:end="601:14">+=</operator> <name pos:start="601:16" pos:end="601:24">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="603:5" pos:end="603:25"><expr pos:start="603:5" pos:end="603:24"><name pos:start="603:5" pos:end="603:11">elf_brk</name> <operator pos:start="603:13" pos:end="603:14">+=</operator> <name pos:start="603:16" pos:end="603:24">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="605:5" pos:end="605:28"><expr pos:start="605:5" pos:end="605:27"><name pos:start="605:5" pos:end="605:14">start_code</name> <operator pos:start="605:16" pos:end="605:17">+=</operator> <name pos:start="605:19" pos:end="605:27">load_bias</name></expr>;</expr_stmt>

    <expr_stmt pos:start="607:5" pos:end="607:26"><expr pos:start="607:5" pos:end="607:25"><name pos:start="607:5" pos:end="607:12">end_code</name> <operator pos:start="607:14" pos:end="607:15">+=</operator> <name pos:start="607:17" pos:end="607:25">load_bias</name></expr>;</expr_stmt>

    <comment type="line" pos:start="609:5" pos:end="609:34">//    start_data += load_bias;</comment>

    <expr_stmt pos:start="611:5" pos:end="611:26"><expr pos:start="611:5" pos:end="611:25"><name pos:start="611:5" pos:end="611:12">end_data</name> <operator pos:start="611:14" pos:end="611:15">+=</operator> <name pos:start="611:17" pos:end="611:25">load_bias</name></expr>;</expr_stmt>



    <if_stmt pos:start="615:5" pos:end="651:5"><if pos:start="615:5" pos:end="651:5">if <condition pos:start="615:8" pos:end="615:24">(<expr pos:start="615:9" pos:end="615:23"><name pos:start="615:9" pos:end="615:23">elf_interpreter</name></expr>)</condition> <block pos:start="615:26" pos:end="651:5">{<block_content pos:start="617:9" pos:end="649:9">

	<if_stmt pos:start="617:9" pos:end="629:9"><if pos:start="617:9" pos:end="621:9">if <condition pos:start="617:12" pos:end="617:33">(<expr pos:start="617:13" pos:end="617:32"><name pos:start="617:13" pos:end="617:28">interpreter_type</name> <operator pos:start="617:30" pos:end="617:30">&amp;</operator> <literal type="number" pos:start="617:32" pos:end="617:32">1</literal></expr>)</condition> <block pos:start="617:35" pos:end="621:9">{<block_content pos:start="619:13" pos:end="619:69">

	    <expr_stmt pos:start="619:13" pos:end="619:69"><expr pos:start="619:13" pos:end="619:68"><name pos:start="619:13" pos:end="619:21">elf_entry</name> <operator pos:start="619:23" pos:end="619:23">=</operator> <call pos:start="619:25" pos:end="619:68"><name pos:start="619:25" pos:end="619:40">load_aout_interp</name><argument_list pos:start="619:41" pos:end="619:68">(<argument pos:start="619:42" pos:end="619:51"><expr pos:start="619:42" pos:end="619:51"><operator pos:start="619:42" pos:end="619:42">&amp;</operator><name pos:start="619:43" pos:end="619:51">interp_ex</name></expr></argument>, <argument pos:start="619:54" pos:end="619:67"><expr pos:start="619:54" pos:end="619:67"><name pos:start="619:54" pos:end="619:67">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if>

	<if type="elseif" pos:start="623:9" pos:end="629:9">else if <condition pos:start="623:17" pos:end="623:38">(<expr pos:start="623:18" pos:end="623:37"><name pos:start="623:18" pos:end="623:33">interpreter_type</name> <operator pos:start="623:35" pos:end="623:35">&amp;</operator> <literal type="number" pos:start="623:37" pos:end="623:37">2</literal></expr>)</condition> <block pos:start="623:40" pos:end="629:9">{<block_content pos:start="625:13" pos:end="627:63">

	    <expr_stmt pos:start="625:13" pos:end="627:63"><expr pos:start="625:13" pos:end="627:62"><name pos:start="625:13" pos:end="625:21">elf_entry</name> <operator pos:start="625:23" pos:end="625:23">=</operator> <call pos:start="625:25" pos:end="627:62"><name pos:start="625:25" pos:end="625:39">load_elf_interp</name><argument_list pos:start="625:40" pos:end="627:62">(<argument pos:start="625:41" pos:end="625:54"><expr pos:start="625:41" pos:end="625:54"><operator pos:start="625:41" pos:end="625:41">&amp;</operator><name pos:start="625:42" pos:end="625:54">interp_elf_ex</name></expr></argument>, <argument pos:start="625:57" pos:end="625:70"><expr pos:start="625:57" pos:end="625:70"><name pos:start="625:57" pos:end="625:70">interpreter_fd</name></expr></argument>,

					    <argument pos:start="627:45" pos:end="627:61"><expr pos:start="627:45" pos:end="627:61"><operator pos:start="627:45" pos:end="627:45">&amp;</operator><name pos:start="627:46" pos:end="627:61">interp_load_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="633:9" pos:end="633:30"><expr pos:start="633:9" pos:end="633:29"><call pos:start="633:9" pos:end="633:29"><name pos:start="633:9" pos:end="633:13">close</name><argument_list pos:start="633:14" pos:end="633:29">(<argument pos:start="633:15" pos:end="633:28"><expr pos:start="633:15" pos:end="633:28"><name pos:start="633:15" pos:end="633:28">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="635:9" pos:end="635:30"><expr pos:start="635:9" pos:end="635:29"><call pos:start="635:9" pos:end="635:29"><name pos:start="635:9" pos:end="635:12">free</name><argument_list pos:start="635:13" pos:end="635:29">(<argument pos:start="635:14" pos:end="635:28"><expr pos:start="635:14" pos:end="635:28"><name pos:start="635:14" pos:end="635:28">elf_interpreter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="639:9" pos:end="649:9"><if pos:start="639:9" pos:end="649:9">if <condition pos:start="639:12" pos:end="639:30">(<expr pos:start="639:13" pos:end="639:29"><name pos:start="639:13" pos:end="639:21">elf_entry</name> <operator pos:start="639:23" pos:end="639:24">==</operator> <operator pos:start="639:26" pos:end="639:26">~</operator><literal type="number" pos:start="639:27" pos:end="639:29">0UL</literal></expr>)</condition> <block pos:start="639:32" pos:end="649:9">{<block_content pos:start="641:13" pos:end="647:21">

	    <expr_stmt pos:start="641:13" pos:end="641:51"><expr pos:start="641:13" pos:end="641:50"><call pos:start="641:13" pos:end="641:50"><name pos:start="641:13" pos:end="641:18">printf</name><argument_list pos:start="641:19" pos:end="641:50">(<argument pos:start="641:20" pos:end="641:49"><expr pos:start="641:20" pos:end="641:49"><literal type="string" pos:start="641:20" pos:end="641:49">"Unable to load interpreter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="643:13" pos:end="643:29"><expr pos:start="643:13" pos:end="643:28"><call pos:start="643:13" pos:end="643:28"><name pos:start="643:13" pos:end="643:16">free</name><argument_list pos:start="643:17" pos:end="643:28">(<argument pos:start="643:18" pos:end="643:27"><expr pos:start="643:18" pos:end="643:27"><name pos:start="643:18" pos:end="643:27">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="645:13" pos:end="645:21"><expr pos:start="645:13" pos:end="645:20"><call pos:start="645:13" pos:end="645:20"><name pos:start="645:13" pos:end="645:16">exit</name><argument_list pos:start="645:17" pos:end="645:20">(<argument pos:start="645:18" pos:end="645:19"><expr pos:start="645:18" pos:end="645:19"><operator pos:start="645:18" pos:end="645:18">-</operator><literal type="number" pos:start="645:19" pos:end="645:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="647:13" pos:end="647:21">return <expr pos:start="647:20" pos:end="647:20"><literal type="number" pos:start="647:20" pos:end="647:20">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="655:5" pos:end="655:21"><expr pos:start="655:5" pos:end="655:20"><call pos:start="655:5" pos:end="655:20"><name pos:start="655:5" pos:end="655:8">free</name><argument_list pos:start="655:9" pos:end="655:20">(<argument pos:start="655:10" pos:end="655:19"><expr pos:start="655:10" pos:end="655:19"><name pos:start="655:10" pos:end="655:19">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="659:5" pos:end="661:40"><if pos:start="659:5" pos:end="661:40">if <condition pos:start="659:8" pos:end="659:17">(<expr pos:start="659:9" pos:end="659:16"><name pos:start="659:9" pos:end="659:16">loglevel</name></expr>)</condition><block type="pseudo" pos:start="661:9" pos:end="661:40"><block_content pos:start="661:9" pos:end="661:40">

	<expr_stmt pos:start="661:9" pos:end="661:40"><expr pos:start="661:9" pos:end="661:39"><call pos:start="661:9" pos:end="661:39"><name pos:start="661:9" pos:end="661:20">load_symbols</name><argument_list pos:start="661:21" pos:end="661:39">(<argument pos:start="661:22" pos:end="661:28"><expr pos:start="661:22" pos:end="661:28"><operator pos:start="661:22" pos:end="661:22">&amp;</operator><name pos:start="661:23" pos:end="661:28">elf_ex</name></expr></argument>, <argument pos:start="661:31" pos:end="661:38"><expr pos:start="661:31" pos:end="661:38"><name pos:start="661:31" pos:end="661:38"><name pos:start="661:31" pos:end="661:34">bprm</name><operator pos:start="661:35" pos:end="661:36">-&gt;</operator><name pos:start="661:37" pos:end="661:38">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="665:5" pos:end="665:62"><if pos:start="665:5" pos:end="665:62">if <condition pos:start="665:8" pos:end="665:45">(<expr pos:start="665:9" pos:end="665:44"><name pos:start="665:9" pos:end="665:24">interpreter_type</name> <operator pos:start="665:26" pos:end="665:27">!=</operator> <name pos:start="665:29" pos:end="665:44">INTERPRETER_AOUT</name></expr>)</condition><block type="pseudo" pos:start="665:47" pos:end="665:62"><block_content pos:start="665:47" pos:end="665:62"> <expr_stmt pos:start="665:47" pos:end="665:62"><expr pos:start="665:47" pos:end="665:61"><call pos:start="665:47" pos:end="665:61"><name pos:start="665:47" pos:end="665:51">close</name><argument_list pos:start="665:52" pos:end="665:61">(<argument pos:start="665:53" pos:end="665:60"><expr pos:start="665:53" pos:end="665:60"><name pos:start="665:53" pos:end="665:60"><name pos:start="665:53" pos:end="665:56">bprm</name><operator pos:start="665:57" pos:end="665:58">-&gt;</operator><name pos:start="665:59" pos:end="665:60">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="667:5" pos:end="672:0"><expr pos:start="667:5" pos:end="667:66"><name pos:start="667:5" pos:end="667:21"><name pos:start="667:5" pos:end="667:8">info</name><operator pos:start="667:9" pos:end="667:10">-&gt;</operator><name pos:start="667:11" pos:end="667:21">personality</name></name> <operator pos:start="667:23" pos:end="667:23">=</operator> <operator pos:start="667:25" pos:end="667:25">(</operator><ternary pos:start="667:26" pos:end="667:65"><condition pos:start="667:26" pos:end="667:44"><expr pos:start="667:26" pos:end="667:42"><name pos:start="667:26" pos:end="667:42">ibcs2_interpreter</name></expr> ?</condition><then pos:start="667:46" pos:end="667:53"> <expr pos:start="667:46" pos:end="667:53"><name pos:start="667:46" pos:end="667:53">PER_SVR4</name></expr> </then><else pos:start="667:55" pos:end="667:65">: <expr pos:start="667:57" pos:end="667:65"><name pos:start="667:57" pos:end="667:65">PER_LINUX</name></expr></else></ternary><operator pos:start="667:66" pos:end="667:66">)</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="671:1" pos:end="671:20">#<cpp:directive pos:start="671:2" pos:end="671:6">ifdef</cpp:directive> <name pos:start="671:8" pos:end="671:20">LOW_ELF_STACK</name></cpp:ifdef>

    <expr_stmt pos:start="673:5" pos:end="676:0"><expr pos:start="673:5" pos:end="673:47"><name pos:start="673:5" pos:end="673:21"><name pos:start="673:5" pos:end="673:8">info</name><operator pos:start="673:9" pos:end="673:10">-&gt;</operator><name pos:start="673:11" pos:end="673:21">start_stack</name></name> <operator pos:start="673:23" pos:end="673:23">=</operator> <name pos:start="673:25" pos:end="673:31"><name pos:start="673:25" pos:end="673:28">bprm</name><operator pos:start="673:29" pos:end="673:30">-&gt;</operator><name pos:start="673:31" pos:end="673:31">p</name></name> <operator pos:start="673:33" pos:end="673:33">=</operator> <name pos:start="673:35" pos:end="673:43">elf_stack</name> <operator pos:start="673:45" pos:end="673:45">-</operator> <literal type="number" pos:start="673:47" pos:end="673:47">4</literal></expr>;</expr_stmt>

<cpp:endif pos:start="675:1" pos:end="675:6">#<cpp:directive pos:start="675:2" pos:end="675:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="677:5" pos:end="693:26"><expr pos:start="677:5" pos:end="693:25"><name pos:start="677:5" pos:end="677:11"><name pos:start="677:5" pos:end="677:8">bprm</name><operator pos:start="677:9" pos:end="677:10">-&gt;</operator><name pos:start="677:11" pos:end="677:11">p</name></name> <operator pos:start="677:13" pos:end="677:13">=</operator> <operator pos:start="677:15" pos:end="677:15">(</operator><name pos:start="677:16" pos:end="677:23">unsigned</name> <name pos:start="677:25" pos:end="677:28">long</name><operator pos:start="677:29" pos:end="677:29">)</operator>

      <call pos:start="679:7" pos:end="693:25"><name pos:start="679:7" pos:end="679:23">create_elf_tables</name><argument_list pos:start="679:24" pos:end="693:25">(<argument pos:start="679:25" pos:end="679:39"><expr pos:start="679:25" pos:end="679:39"><operator pos:start="679:25" pos:end="679:25">(</operator><name pos:start="679:26" pos:end="679:29">char</name> <operator pos:start="679:31" pos:end="679:31">*</operator><operator pos:start="679:32" pos:end="679:32">)</operator><name pos:start="679:33" pos:end="679:39"><name pos:start="679:33" pos:end="679:36">bprm</name><operator pos:start="679:37" pos:end="679:38">-&gt;</operator><name pos:start="679:39" pos:end="679:39">p</name></name></expr></argument>,

		    <argument pos:start="681:21" pos:end="681:30"><expr pos:start="681:21" pos:end="681:30"><name pos:start="681:21" pos:end="681:30"><name pos:start="681:21" pos:end="681:24">bprm</name><operator pos:start="681:25" pos:end="681:26">-&gt;</operator><name pos:start="681:27" pos:end="681:30">argc</name></name></expr></argument>,

		    <argument pos:start="683:21" pos:end="683:30"><expr pos:start="683:21" pos:end="683:30"><name pos:start="683:21" pos:end="683:30"><name pos:start="683:21" pos:end="683:24">bprm</name><operator pos:start="683:25" pos:end="683:26">-&gt;</operator><name pos:start="683:27" pos:end="683:30">envc</name></name></expr></argument>,

                    <argument pos:start="685:21" pos:end="685:27"><expr pos:start="685:21" pos:end="685:27"><operator pos:start="685:21" pos:end="685:21">&amp;</operator><name pos:start="685:22" pos:end="685:27">elf_ex</name></expr></argument>,

                    <argument pos:start="687:21" pos:end="687:29"><expr pos:start="687:21" pos:end="687:29"><name pos:start="687:21" pos:end="687:29">load_addr</name></expr></argument>, <argument pos:start="687:32" pos:end="687:40"><expr pos:start="687:32" pos:end="687:40"><name pos:start="687:32" pos:end="687:40">load_bias</name></expr></argument>,

		    <argument pos:start="689:21" pos:end="689:36"><expr pos:start="689:21" pos:end="689:36"><name pos:start="689:21" pos:end="689:36">interp_load_addr</name></expr></argument>,

		    <argument pos:start="691:21" pos:end="691:66"><expr pos:start="691:21" pos:end="691:66"><operator pos:start="691:21" pos:end="691:21">(</operator><ternary pos:start="691:22" pos:end="691:65"><condition pos:start="691:22" pos:end="691:59"><expr pos:start="691:22" pos:end="691:57"><name pos:start="691:22" pos:end="691:37">interpreter_type</name> <operator pos:start="691:39" pos:end="691:40">==</operator> <name pos:start="691:42" pos:end="691:57">INTERPRETER_AOUT</name></expr> ?</condition><then pos:start="691:61" pos:end="691:61"> <expr pos:start="691:61" pos:end="691:61"><literal type="number" pos:start="691:61" pos:end="691:61">0</literal></expr> </then><else pos:start="691:63" pos:end="691:65">: <expr pos:start="691:65" pos:end="691:65"><literal type="number" pos:start="691:65" pos:end="691:65">1</literal></expr></else></ternary><operator pos:start="691:66" pos:end="691:66">)</operator></expr></argument>,

		    <argument pos:start="693:21" pos:end="693:24"><expr pos:start="693:21" pos:end="693:24"><name pos:start="693:21" pos:end="693:24">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="695:5" pos:end="697:51"><if pos:start="695:5" pos:end="697:51">if <condition pos:start="695:8" pos:end="695:45">(<expr pos:start="695:9" pos:end="695:44"><name pos:start="695:9" pos:end="695:24">interpreter_type</name> <operator pos:start="695:26" pos:end="695:27">==</operator> <name pos:start="695:29" pos:end="695:44">INTERPRETER_AOUT</name></expr>)</condition><block type="pseudo" pos:start="697:7" pos:end="697:51"><block_content pos:start="697:7" pos:end="697:51">

      <expr_stmt pos:start="697:7" pos:end="697:51"><expr pos:start="697:7" pos:end="697:50"><name pos:start="697:7" pos:end="697:21"><name pos:start="697:7" pos:end="697:10">info</name><operator pos:start="697:11" pos:end="697:12">-&gt;</operator><name pos:start="697:13" pos:end="697:21">arg_start</name></name> <operator pos:start="697:23" pos:end="697:24">+=</operator> <call pos:start="697:26" pos:end="697:46"><name pos:start="697:26" pos:end="697:31">strlen</name><argument_list pos:start="697:32" pos:end="697:46">(<argument pos:start="697:33" pos:end="697:45"><expr pos:start="697:33" pos:end="697:45"><name pos:start="697:33" pos:end="697:45">passed_fileno</name></expr></argument>)</argument_list></call> <operator pos:start="697:48" pos:end="697:48">+</operator> <literal type="number" pos:start="697:50" pos:end="697:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="699:5" pos:end="699:42"><expr pos:start="699:5" pos:end="699:41"><name pos:start="699:5" pos:end="699:19"><name pos:start="699:5" pos:end="699:8">info</name><operator pos:start="699:9" pos:end="699:10">-&gt;</operator><name pos:start="699:11" pos:end="699:19">start_brk</name></name> <operator pos:start="699:21" pos:end="699:21">=</operator> <name pos:start="699:23" pos:end="699:31"><name pos:start="699:23" pos:end="699:26">info</name><operator pos:start="699:27" pos:end="699:28">-&gt;</operator><name pos:start="699:29" pos:end="699:31">brk</name></name> <operator pos:start="699:33" pos:end="699:33">=</operator> <name pos:start="699:35" pos:end="699:41">elf_brk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="701:5" pos:end="701:30"><expr pos:start="701:5" pos:end="701:29"><name pos:start="701:5" pos:end="701:18"><name pos:start="701:5" pos:end="701:8">info</name><operator pos:start="701:9" pos:end="701:10">-&gt;</operator><name pos:start="701:11" pos:end="701:18">end_code</name></name> <operator pos:start="701:20" pos:end="701:20">=</operator> <name pos:start="701:22" pos:end="701:29">end_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="703:5" pos:end="703:34"><expr pos:start="703:5" pos:end="703:33"><name pos:start="703:5" pos:end="703:20"><name pos:start="703:5" pos:end="703:8">info</name><operator pos:start="703:9" pos:end="703:10">-&gt;</operator><name pos:start="703:11" pos:end="703:20">start_code</name></name> <operator pos:start="703:22" pos:end="703:22">=</operator> <name pos:start="703:24" pos:end="703:33">start_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="705:5" pos:end="705:30"><expr pos:start="705:5" pos:end="705:29"><name pos:start="705:5" pos:end="705:18"><name pos:start="705:5" pos:end="705:8">info</name><operator pos:start="705:9" pos:end="705:10">-&gt;</operator><name pos:start="705:11" pos:end="705:18">end_data</name></name> <operator pos:start="705:20" pos:end="705:20">=</operator> <name pos:start="705:22" pos:end="705:29">end_data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="707:5" pos:end="707:32"><expr pos:start="707:5" pos:end="707:31"><name pos:start="707:5" pos:end="707:21"><name pos:start="707:5" pos:end="707:8">info</name><operator pos:start="707:9" pos:end="707:10">-&gt;</operator><name pos:start="707:11" pos:end="707:21">start_stack</name></name> <operator pos:start="707:23" pos:end="707:23">=</operator> <name pos:start="707:25" pos:end="707:31"><name pos:start="707:25" pos:end="707:28">bprm</name><operator pos:start="707:29" pos:end="707:30">-&gt;</operator><name pos:start="707:31" pos:end="707:31">p</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="711:5" pos:end="713:18">/* Calling set_brk effectively mmaps the pages that we need for the bss and break

       sections */</comment>

    <expr_stmt pos:start="715:5" pos:end="715:30"><expr pos:start="715:5" pos:end="715:29"><call pos:start="715:5" pos:end="715:29"><name pos:start="715:5" pos:end="715:11">set_brk</name><argument_list pos:start="715:12" pos:end="715:29">(<argument pos:start="715:13" pos:end="715:19"><expr pos:start="715:13" pos:end="715:19"><name pos:start="715:13" pos:end="715:19">elf_bss</name></expr></argument>, <argument pos:start="715:22" pos:end="715:28"><expr pos:start="715:22" pos:end="715:28"><name pos:start="715:22" pos:end="715:28">elf_brk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="719:5" pos:end="738:0"><expr pos:start="719:5" pos:end="719:20"><call pos:start="719:5" pos:end="719:20"><name pos:start="719:5" pos:end="719:11">padzero</name><argument_list pos:start="719:12" pos:end="719:20">(<argument pos:start="719:13" pos:end="719:19"><expr pos:start="719:13" pos:end="719:19"><name pos:start="719:13" pos:end="719:19">elf_bss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="723:1" pos:end="723:5">#<cpp:directive pos:start="723:2" pos:end="723:3">if</cpp:directive> <expr pos:start="723:5" pos:end="723:5"><literal type="number" pos:start="723:5" pos:end="723:5">0</literal></expr></cpp:if>

    printf("(start_brk) %x\n" , info-&gt;start_brk);

    printf("(end_code) %x\n" , info-&gt;end_code);

    printf("(start_code) %x\n" , info-&gt;start_code);

    printf("(end_data) %x\n" , info-&gt;end_data);

    printf("(start_stack) %x\n" , info-&gt;start_stack);

    printf("(brk) %x\n" , info-&gt;brk);

<cpp:endif pos:start="737:1" pos:end="737:6">#<cpp:directive pos:start="737:2" pos:end="737:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="741:5" pos:end="762:0"><if pos:start="741:5" pos:end="762:0">if <condition pos:start="741:8" pos:end="741:40">( <expr pos:start="741:10" pos:end="741:38"><name pos:start="741:10" pos:end="741:26"><name pos:start="741:10" pos:end="741:13">info</name><operator pos:start="741:14" pos:end="741:15">-&gt;</operator><name pos:start="741:16" pos:end="741:26">personality</name></name> <operator pos:start="741:28" pos:end="741:29">==</operator> <name pos:start="741:31" pos:end="741:38">PER_SVR4</name></expr> )</condition>

    <block pos:start="743:5" pos:end="762:0">{<block_content pos:start="753:13" pos:end="755:70">

	    <comment type="block" pos:start="745:13" pos:end="751:52">/* Why this, you ask???  Well SVr4 maps page 0 as read-only,

	       and some applications "depend" upon this behavior.

	       Since we do not have the power to recompile these, we

	       emulate the SVr4 behavior.  Sigh.  */</comment>

	    <expr_stmt pos:start="753:13" pos:end="755:70"><expr pos:start="753:13" pos:end="755:69"><name pos:start="753:13" pos:end="753:23">mapped_addr</name> <operator pos:start="753:25" pos:end="753:25">=</operator> <call pos:start="753:27" pos:end="755:69"><name pos:start="753:27" pos:end="753:37">target_mmap</name><argument_list pos:start="753:38" pos:end="755:69">(<argument pos:start="753:39" pos:end="753:39"><expr pos:start="753:39" pos:end="753:39"><literal type="number" pos:start="753:39" pos:end="753:39">0</literal></expr></argument>, <argument pos:start="753:42" pos:end="753:55"><expr pos:start="753:42" pos:end="753:55"><name pos:start="753:42" pos:end="753:55">host_page_size</name></expr></argument>, <argument pos:start="753:58" pos:end="753:78"><expr pos:start="753:58" pos:end="753:78"><name pos:start="753:58" pos:end="753:66">PROT_READ</name> <operator pos:start="753:68" pos:end="753:68">|</operator> <name pos:start="753:70" pos:end="753:78">PROT_EXEC</name></expr></argument>,

                                      <argument pos:start="755:39" pos:end="755:61"><expr pos:start="755:39" pos:end="755:61"><name pos:start="755:39" pos:end="755:47">MAP_FIXED</name> <operator pos:start="755:49" pos:end="755:49">|</operator> <name pos:start="755:51" pos:end="755:61">MAP_PRIVATE</name></expr></argument>, <argument pos:start="755:64" pos:end="755:65"><expr pos:start="755:64" pos:end="755:65"><operator pos:start="755:64" pos:end="755:64">-</operator><literal type="number" pos:start="755:65" pos:end="755:65">1</literal></expr></argument>, <argument pos:start="755:68" pos:end="755:68"><expr pos:start="755:68" pos:end="755:68"><literal type="number" pos:start="755:68" pos:end="755:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="761:1" pos:end="761:20">#<cpp:directive pos:start="761:2" pos:end="761:6">ifdef</cpp:directive> <name pos:start="761:8" pos:end="761:20">ELF_PLAT_INIT</name></cpp:ifdef>

    <comment type="block" pos:start="763:5" pos:end="773:7">/*

     * The ABI may specify that certain registers be set up in special

     * ways (on i386 %edx is the address of a DT_FINI function, for

     * example.  This macro performs whatever initialization to

     * the regs structure is required.

     */</comment>

    <expr_stmt pos:start="775:5" pos:end="778:0"><expr pos:start="775:5" pos:end="775:23"><call pos:start="775:5" pos:end="775:23"><name pos:start="775:5" pos:end="775:17">ELF_PLAT_INIT</name><argument_list pos:start="775:18" pos:end="775:23">(<argument pos:start="775:19" pos:end="775:22"><expr pos:start="775:19" pos:end="775:22"><name pos:start="775:19" pos:end="775:22">regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="777:1" pos:end="777:6">#<cpp:directive pos:start="777:2" pos:end="777:6">endif</cpp:directive></cpp:endif>





    <expr_stmt pos:start="783:5" pos:end="783:28"><expr pos:start="783:5" pos:end="783:27"><name pos:start="783:5" pos:end="783:15"><name pos:start="783:5" pos:end="783:8">info</name><operator pos:start="783:9" pos:end="783:10">-&gt;</operator><name pos:start="783:11" pos:end="783:15">entry</name></name> <operator pos:start="783:17" pos:end="783:17">=</operator> <name pos:start="783:19" pos:end="783:27">elf_entry</name></expr>;</expr_stmt>



    <return pos:start="787:5" pos:end="787:13">return <expr pos:start="787:12" pos:end="787:12"><literal type="number" pos:start="787:12" pos:end="787:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
