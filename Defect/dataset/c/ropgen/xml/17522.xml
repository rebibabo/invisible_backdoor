<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17522.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">spapr_core_pre_plug</name><parameter_list pos:start="1:25" pos:end="3:38">(<parameter pos:start="1:26" pos:end="1:52"><decl pos:start="1:26" pos:end="1:52"><type pos:start="1:26" pos:end="1:52"><name pos:start="1:26" pos:end="1:39">HotplugHandler</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><name pos:start="1:55" pos:end="1:65">DeviceState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">dev</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:30">Error</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier><modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:37">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">machine</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><call pos:start="7:29" pos:end="7:56"><name pos:start="7:29" pos:end="7:35">MACHINE</name><argument_list pos:start="7:36" pos:end="7:56">(<argument pos:start="7:37" pos:end="7:55"><expr pos:start="7:37" pos:end="7:55"><call pos:start="7:37" pos:end="7:55"><name pos:start="7:37" pos:end="7:42">OBJECT</name><argument_list pos:start="7:43" pos:end="7:55">(<argument pos:start="7:44" pos:end="7:54"><expr pos:start="7:44" pos:end="7:54"><name pos:start="7:44" pos:end="7:54">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:74"><decl pos:start="9:5" pos:end="9:73"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">sPAPRMachineClass</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">smc</name> <init pos:start="9:28" pos:end="9:73">= <expr pos:start="9:30" pos:end="9:73"><call pos:start="9:30" pos:end="9:73"><name pos:start="9:30" pos:end="9:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="9:53" pos:end="9:73">(<argument pos:start="9:54" pos:end="9:72"><expr pos:start="9:54" pos:end="9:72"><call pos:start="9:54" pos:end="9:72"><name pos:start="9:54" pos:end="9:59">OBJECT</name><argument_list pos:start="9:60" pos:end="9:72">(<argument pos:start="9:61" pos:end="9:71"><expr pos:start="9:61" pos:end="9:71"><name pos:start="9:61" pos:end="9:71">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:66"><decl pos:start="11:5" pos:end="11:65"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21">sPAPRMachineState</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:28">spapr</name> <init pos:start="11:30" pos:end="11:65">= <expr pos:start="11:32" pos:end="11:65"><call pos:start="11:32" pos:end="11:65"><name pos:start="11:32" pos:end="11:44">SPAPR_MACHINE</name><argument_list pos:start="11:45" pos:end="11:65">(<argument pos:start="11:46" pos:end="11:64"><expr pos:start="11:46" pos:end="11:64"><call pos:start="11:46" pos:end="11:64"><name pos:start="11:46" pos:end="11:51">OBJECT</name><argument_list pos:start="11:52" pos:end="11:64">(<argument pos:start="11:53" pos:end="11:63"><expr pos:start="11:53" pos:end="11:63"><name pos:start="11:53" pos:end="11:63">hotplug_dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:48"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:23">spapr_max_cores</name> <init pos:start="13:25" pos:end="13:48">= <expr pos:start="13:27" pos:end="13:48"><name pos:start="13:27" pos:end="13:34">max_cpus</name> <operator pos:start="13:36" pos:end="13:36">/</operator> <name pos:start="13:38" pos:end="13:48">smp_threads</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:20">local_err</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">CPUCore</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:15">cc</name> <init pos:start="19:17" pos:end="19:31">= <expr pos:start="19:19" pos:end="19:31"><call pos:start="19:19" pos:end="19:31"><name pos:start="19:19" pos:end="19:26">CPU_CORE</name><argument_list pos:start="19:27" pos:end="19:31">(<argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:71"><decl pos:start="21:5" pos:end="21:70"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:24">base_core_type</name> <init pos:start="21:26" pos:end="21:70">= <expr pos:start="21:28" pos:end="21:70"><call pos:start="21:28" pos:end="21:70"><name pos:start="21:28" pos:end="21:50">spapr_get_cpu_core_type</name><argument_list pos:start="21:51" pos:end="21:70">(<argument pos:start="21:52" pos:end="21:69"><expr pos:start="21:52" pos:end="21:69"><name pos:start="21:52" pos:end="21:69"><name pos:start="21:52" pos:end="21:58">machine</name><operator pos:start="21:59" pos:end="21:60">-&gt;</operator><name pos:start="21:61" pos:end="21:69">cpu_model</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:55"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">type</name> <init pos:start="23:22" pos:end="23:55">= <expr pos:start="23:24" pos:end="23:55"><call pos:start="23:24" pos:end="23:55"><name pos:start="23:24" pos:end="23:42">object_get_typename</name><argument_list pos:start="23:43" pos:end="23:55">(<argument pos:start="23:44" pos:end="23:54"><expr pos:start="23:44" pos:end="23:54"><call pos:start="23:44" pos:end="23:54"><name pos:start="23:44" pos:end="23:49">OBJECT</name><argument_list pos:start="23:50" pos:end="23:54">(<argument pos:start="23:51" pos:end="23:53"><expr pos:start="23:51" pos:end="23:53"><name pos:start="23:51" pos:end="23:53">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><call pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:14">strcmp</name><argument_list pos:start="27:15" pos:end="27:36">(<argument pos:start="27:16" pos:end="27:29"><expr pos:start="27:16" pos:end="27:29"><name pos:start="27:16" pos:end="27:29">base_core_type</name></expr></argument>, <argument pos:start="27:32" pos:end="27:35"><expr pos:start="27:32" pos:end="27:35"><name pos:start="27:32" pos:end="27:35">type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:39" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:77"><expr pos:start="29:9" pos:end="29:76"><call pos:start="29:9" pos:end="29:76"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="29:76">(<argument pos:start="29:20" pos:end="29:29"><expr pos:start="29:20" pos:end="29:29"><operator pos:start="29:20" pos:end="29:20">&amp;</operator><name pos:start="29:21" pos:end="29:29">local_err</name></expr></argument>, <argument pos:start="29:32" pos:end="29:59"><expr pos:start="29:32" pos:end="29:59"><literal type="string" pos:start="29:32" pos:end="29:59">"CPU core type should be %s"</literal></expr></argument>, <argument pos:start="29:62" pos:end="29:75"><expr pos:start="29:62" pos:end="29:75"><name pos:start="29:62" pos:end="29:75">base_core_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:48">(<expr pos:start="37:9" pos:end="37:47"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:28"><name pos:start="37:10" pos:end="37:12">smc</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:28">dr_cpu_enabled</name></name> <operator pos:start="37:30" pos:end="37:31">&amp;&amp;</operator> <name pos:start="37:33" pos:end="37:47"><name pos:start="37:33" pos:end="37:35">dev</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:47">hotplugged</name></name></expr>)</condition> <block pos:start="37:50" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:77"><expr pos:start="39:9" pos:end="39:76"><call pos:start="39:9" pos:end="39:76"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:76">(<argument pos:start="39:20" pos:end="39:29"><expr pos:start="39:20" pos:end="39:29"><operator pos:start="39:20" pos:end="39:20">&amp;</operator><name pos:start="39:21" pos:end="39:29">local_err</name></expr></argument>, <argument pos:start="39:32" pos:end="39:75"><expr pos:start="39:32" pos:end="39:75"><literal type="string" pos:start="39:32" pos:end="39:75">"CPU hotplug not supported for this machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:38">(<expr pos:start="47:9" pos:end="47:37"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:10">cc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:22">nr_threads</name></name> <operator pos:start="47:24" pos:end="47:25">!=</operator> <name pos:start="47:27" pos:end="47:37">smp_threads</name></expr>)</condition> <block pos:start="47:40" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:65">(<argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><operator pos:start="49:20" pos:end="49:20">&amp;</operator><name pos:start="49:21" pos:end="49:29">local_err</name></expr></argument>, <argument pos:start="49:32" pos:end="49:51"><expr pos:start="49:32" pos:end="49:51"><literal type="string" pos:start="49:32" pos:end="49:51">"threads must be %d"</literal></expr></argument>, <argument pos:start="49:54" pos:end="49:64"><expr pos:start="49:54" pos:end="49:64"><name pos:start="49:54" pos:end="49:64">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:34">(<expr pos:start="57:9" pos:end="57:33"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:10">cc</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:19">core_id</name></name> <operator pos:start="57:21" pos:end="57:21">%</operator> <name pos:start="57:23" pos:end="57:33">smp_threads</name></expr>)</condition> <block pos:start="57:36" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:17">

        <expr_stmt pos:start="59:9" pos:end="59:68"><expr pos:start="59:9" pos:end="59:67"><call pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:67">(<argument pos:start="59:20" pos:end="59:29"><expr pos:start="59:20" pos:end="59:29"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:29">local_err</name></expr></argument>, <argument pos:start="59:32" pos:end="59:53"><expr pos:start="59:32" pos:end="59:53"><literal type="string" pos:start="59:32" pos:end="59:53">"invalid core id %d\n"</literal></expr></argument>, <argument pos:start="59:56" pos:end="59:66"><expr pos:start="59:56" pos:end="59:66"><name pos:start="59:56" pos:end="59:66"><name pos:start="59:56" pos:end="59:57">cc</name><operator pos:start="59:58" pos:end="59:59">-&gt;</operator><name pos:start="59:60" pos:end="59:66">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:38"><expr pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:9">index</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:14">cc</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:23">core_id</name></name> <operator pos:start="67:25" pos:end="67:25">/</operator> <name pos:start="67:27" pos:end="67:37">smp_threads</name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:46">(<expr pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:13">index</name> <operator pos:start="69:15" pos:end="69:15">&lt;</operator> <literal type="number" pos:start="69:17" pos:end="69:17">0</literal> <operator pos:start="69:19" pos:end="69:20">||</operator> <name pos:start="69:22" pos:end="69:26">index</name> <operator pos:start="69:28" pos:end="69:29">&gt;=</operator> <name pos:start="69:31" pos:end="69:45">spapr_max_cores</name></expr>)</condition> <block pos:start="69:48" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:17">

        <expr_stmt pos:start="71:9" pos:end="71:71"><expr pos:start="71:9" pos:end="71:70"><call pos:start="71:9" pos:end="71:70"><name pos:start="71:9" pos:end="71:18">error_setg</name><argument_list pos:start="71:19" pos:end="71:70">(<argument pos:start="71:20" pos:end="71:29"><expr pos:start="71:20" pos:end="71:29"><operator pos:start="71:20" pos:end="71:20">&amp;</operator><name pos:start="71:21" pos:end="71:29">local_err</name></expr></argument>, <argument pos:start="71:32" pos:end="71:56"><expr pos:start="71:32" pos:end="71:56"><literal type="string" pos:start="71:32" pos:end="71:56">"core id %d out of range"</literal></expr></argument>, <argument pos:start="71:59" pos:end="71:69"><expr pos:start="71:59" pos:end="71:69"><name pos:start="71:59" pos:end="71:69"><name pos:start="71:59" pos:end="71:60">cc</name><operator pos:start="71:61" pos:end="71:62">-&gt;</operator><name pos:start="71:63" pos:end="71:69">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:28">(<expr pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:13">spapr</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:20">cores</name><index pos:start="79:21" pos:end="79:27">[<expr pos:start="79:22" pos:end="79:26"><name pos:start="79:22" pos:end="79:26">index</name></expr>]</index></name></expr>)</condition> <block pos:start="79:30" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:73"><expr pos:start="81:9" pos:end="81:72"><call pos:start="81:9" pos:end="81:72"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:72">(<argument pos:start="81:20" pos:end="81:29"><expr pos:start="81:20" pos:end="81:29"><operator pos:start="81:20" pos:end="81:20">&amp;</operator><name pos:start="81:21" pos:end="81:29">local_err</name></expr></argument>, <argument pos:start="81:32" pos:end="81:58"><expr pos:start="81:32" pos:end="81:58"><literal type="string" pos:start="81:32" pos:end="81:58">"core %d already populated"</literal></expr></argument>, <argument pos:start="81:61" pos:end="81:71"><expr pos:start="81:61" pos:end="81:71"><name pos:start="81:61" pos:end="81:71"><name pos:start="81:61" pos:end="81:62">cc</name><operator pos:start="81:63" pos:end="81:64">-&gt;</operator><name pos:start="81:65" pos:end="81:71">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="89:1" pos:end="89:4"><name pos:start="89:1" pos:end="89:3">out</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:27"><expr pos:start="91:5" pos:end="91:26"><call pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:10">g_free</name><argument_list pos:start="91:11" pos:end="91:26">(<argument pos:start="91:12" pos:end="91:25"><expr pos:start="91:12" pos:end="91:25"><name pos:start="91:12" pos:end="91:25">base_core_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:37"><expr pos:start="93:5" pos:end="93:36"><call pos:start="93:5" pos:end="93:36"><name pos:start="93:5" pos:end="93:19">error_propagate</name><argument_list pos:start="93:20" pos:end="93:36">(<argument pos:start="93:21" pos:end="93:24"><expr pos:start="93:21" pos:end="93:24"><name pos:start="93:21" pos:end="93:24">errp</name></expr></argument>, <argument pos:start="93:27" pos:end="93:35"><expr pos:start="93:27" pos:end="93:35"><name pos:start="93:27" pos:end="93:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
