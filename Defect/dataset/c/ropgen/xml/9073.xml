<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9073.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">run_test</name><parameter_list pos:start="1:21" pos:end="1:26">(<parameter pos:start="1:22" pos:end="1:25"><decl pos:start="1:22" pos:end="1:25"><type pos:start="1:22" pos:end="1:25"><name pos:start="1:22" pos:end="1:25">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:26">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="15:5">while <condition pos:start="11:11" pos:end="11:72">(<expr pos:start="11:12" pos:end="11:71"><call pos:start="11:12" pos:end="11:40"><name pos:start="11:12" pos:end="11:22">atomic_read</name><argument_list pos:start="11:23" pos:end="11:40">(<argument pos:start="11:24" pos:end="11:39"><expr pos:start="11:24" pos:end="11:39"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:39">n_ready_threads</name></expr></argument>)</argument_list></call> <operator pos:start="11:42" pos:end="11:43">!=</operator> <name pos:start="11:45" pos:end="11:56">n_rw_threads</name> <operator pos:start="11:58" pos:end="11:58">+</operator> <name pos:start="11:60" pos:end="11:71">n_rz_threads</name></expr>)</condition> <block pos:start="11:74" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:20">

        <expr_stmt pos:start="13:9" pos:end="13:20"><expr pos:start="13:9" pos:end="13:19"><call pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:17">cpu_relax</name><argument_list pos:start="13:18" pos:end="13:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="17:5" pos:end="17:37"><expr pos:start="17:5" pos:end="17:36"><call pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:17">atomic_mb_set</name><argument_list pos:start="17:18" pos:end="17:36">(<argument pos:start="17:19" pos:end="17:29"><expr pos:start="17:19" pos:end="17:29"><operator pos:start="17:19" pos:end="17:19">&amp;</operator><name pos:start="17:20" pos:end="17:29">test_start</name></expr></argument>, <argument pos:start="17:32" pos:end="17:35"><expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="19:5" pos:end="23:24">do <block pos:start="19:8" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:36">

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:17">remaining</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:35"><name pos:start="21:21" pos:end="21:25">sleep</name><argument_list pos:start="21:26" pos:end="21:35">(<argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:34">duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="23:13" pos:end="23:23">(<expr pos:start="23:14" pos:end="23:22"><name pos:start="23:14" pos:end="23:22">remaining</name></expr>)</condition>;</do>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:17">atomic_mb_set</name><argument_list pos:start="25:18" pos:end="25:35">(<argument pos:start="25:19" pos:end="25:28"><expr pos:start="25:19" pos:end="25:28"><operator pos:start="25:19" pos:end="25:19">&amp;</operator><name pos:start="25:20" pos:end="25:28">test_stop</name></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="33:5">for <control pos:start="29:9" pos:end="29:38">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:33"><expr pos:start="29:17" pos:end="29:32"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:32">n_rw_threads</name></expr>;</condition> <incr pos:start="29:35" pos:end="29:37"><expr pos:start="29:35" pos:end="29:37"><name pos:start="29:35" pos:end="29:35">i</name><operator pos:start="29:36" pos:end="29:37">++</operator></expr></incr>)</control> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:41">

        <expr_stmt pos:start="31:9" pos:end="31:41"><expr pos:start="31:9" pos:end="31:40"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:24">qemu_thread_join</name><argument_list pos:start="31:25" pos:end="31:40">(<argument pos:start="31:26" pos:end="31:39"><expr pos:start="31:26" pos:end="31:39"><operator pos:start="31:26" pos:end="31:26">&amp;</operator><name pos:start="31:27" pos:end="31:39"><name pos:start="31:27" pos:end="31:36">rw_threads</name><index pos:start="31:37" pos:end="31:39">[<expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="35:5" pos:end="39:5">for <control pos:start="35:9" pos:end="35:38">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:33"><expr pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:32">n_rz_threads</name></expr>;</condition> <incr pos:start="35:35" pos:end="35:37"><expr pos:start="35:35" pos:end="35:37"><name pos:start="35:35" pos:end="35:35">i</name><operator pos:start="35:36" pos:end="35:37">++</operator></expr></incr>)</control> <block pos:start="35:40" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:41">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:24">qemu_thread_join</name><argument_list pos:start="37:25" pos:end="37:40">(<argument pos:start="37:26" pos:end="37:39"><expr pos:start="37:26" pos:end="37:39"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:39"><name pos:start="37:27" pos:end="37:36">rz_threads</name><index pos:start="37:37" pos:end="37:39">[<expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
