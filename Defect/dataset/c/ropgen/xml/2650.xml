<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2650.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="25:78">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">job_id</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:47">creation_flags</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:65">BlockDriverState</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:73">target</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:49"><decl pos:start="5:30" pos:end="5:49"><type pos:start="5:30" pos:end="5:49"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:49">replaces</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:58">int64_t</name></type> <name pos:start="5:60" pos:end="5:64">speed</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:49"><decl pos:start="7:30" pos:end="7:49"><type pos:start="7:30" pos:end="7:49"><name pos:start="7:30" pos:end="7:37">uint32_t</name></type> <name pos:start="7:39" pos:end="7:49">granularity</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:67"><decl pos:start="7:52" pos:end="7:67"><type pos:start="7:52" pos:end="7:67"><name pos:start="7:52" pos:end="7:58">int64_t</name></type> <name pos:start="7:60" pos:end="7:67">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:64"><decl pos:start="9:30" pos:end="9:64"><type pos:start="9:30" pos:end="9:64"><name pos:start="9:30" pos:end="9:51">BlockMirrorBackingMode</name></type> <name pos:start="9:53" pos:end="9:64">backing_mode</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:60"><decl pos:start="13:30" pos:end="13:60"><type pos:start="13:30" pos:end="13:60"><name pos:start="13:30" pos:end="13:44">BlockdevOnError</name></type> <name pos:start="13:46" pos:end="13:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:39"><decl pos:start="15:30" pos:end="15:39"><type pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:33">bool</name></type> <name pos:start="15:35" pos:end="15:39">unmap</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:52"><decl pos:start="17:30" pos:end="17:52"><type pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:48">BlockCompletionFunc</name> <modifier pos:start="17:50" pos:end="17:50">*</modifier></type><name pos:start="17:51" pos:end="17:52">cb</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:41"><decl pos:start="19:30" pos:end="19:41"><type pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:33">void</name> <modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:41">opaque</name></decl></parameter>, <parameter pos:start="19:44" pos:end="19:55"><decl pos:start="19:44" pos:end="19:55"><type pos:start="19:44" pos:end="19:55"><name pos:start="19:44" pos:end="19:48">Error</name> <modifier pos:start="19:50" pos:end="19:50">*</modifier><modifier pos:start="19:51" pos:end="19:51">*</modifier></type><name pos:start="19:52" pos:end="19:55">errp</name></decl></parameter>,

                             <parameter pos:start="21:30" pos:end="21:57"><decl pos:start="21:30" pos:end="21:57"><type pos:start="21:30" pos:end="21:57"><specifier pos:start="21:30" pos:end="21:34">const</specifier> <name pos:start="21:36" pos:end="21:49">BlockJobDriver</name> <modifier pos:start="21:51" pos:end="21:51">*</modifier></type><name pos:start="21:52" pos:end="21:57">driver</name></decl></parameter>,

                             <parameter pos:start="23:30" pos:end="23:46"><decl pos:start="23:30" pos:end="23:46"><type pos:start="23:30" pos:end="23:46"><name pos:start="23:30" pos:end="23:33">bool</name></type> <name pos:start="23:35" pos:end="23:46">is_none_mode</name></decl></parameter>, <parameter pos:start="23:49" pos:end="23:70"><decl pos:start="23:49" pos:end="23:70"><type pos:start="23:49" pos:end="23:70"><name pos:start="23:49" pos:end="23:64">BlockDriverState</name> <modifier pos:start="23:66" pos:end="23:66">*</modifier></type><name pos:start="23:67" pos:end="23:70">base</name></decl></parameter>,

                             <parameter pos:start="25:30" pos:end="25:47"><decl pos:start="25:30" pos:end="25:47"><type pos:start="25:30" pos:end="25:47"><name pos:start="25:30" pos:end="25:33">bool</name></type> <name pos:start="25:35" pos:end="25:47">auto_complete</name></decl></parameter>, <parameter pos:start="25:50" pos:end="25:77"><decl pos:start="25:50" pos:end="25:77"><type pos:start="25:50" pos:end="25:77"><specifier pos:start="25:50" pos:end="25:54">const</specifier> <name pos:start="25:56" pos:end="25:59">char</name> <modifier pos:start="25:61" pos:end="25:61">*</modifier></type><name pos:start="25:62" pos:end="25:77">filter_node_name</name></decl></parameter>)</parameter_list>

<block pos:start="27:1" pos:end="295:1">{<block_content pos:start="29:5" pos:end="293:78">

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:18">MirrorBlockJob</name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:36"><decl pos:start="31:5" pos:end="31:35"><type pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:20">BlockDriverState</name> <modifier pos:start="31:22" pos:end="31:22">*</modifier></type><name pos:start="31:23" pos:end="31:35">mirror_top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:26"><decl pos:start="33:5" pos:end="33:25"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">bool</name></type> <name pos:start="33:10" pos:end="33:25">target_graph_mod</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">bool</name></type> <name pos:start="35:10" pos:end="35:26">target_is_backing</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:28"><decl pos:start="37:5" pos:end="37:27"><type pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:9">Error</name> <modifier pos:start="37:11" pos:end="37:11">*</modifier></type><name pos:start="37:12" pos:end="37:20">local_err</name> <init pos:start="37:22" pos:end="37:27">= <expr pos:start="37:24" pos:end="37:27"><name pos:start="37:24" pos:end="37:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:12"><decl pos:start="39:5" pos:end="39:11"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:25">(<expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:19">granularity</name> <operator pos:start="43:21" pos:end="43:22">==</operator> <literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr>)</condition> <block pos:start="43:27" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:66">

        <expr_stmt pos:start="45:9" pos:end="45:66"><expr pos:start="45:9" pos:end="45:65"><name pos:start="45:9" pos:end="45:19">granularity</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:65"><name pos:start="45:23" pos:end="45:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="45:58" pos:end="45:65">(<argument pos:start="45:59" pos:end="45:64"><expr pos:start="45:59" pos:end="45:64"><name pos:start="45:59" pos:end="45:64">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:10">assert</name> <argument_list pos:start="51:12" pos:end="51:51">(<argument pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:50"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:24">granularity</name> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <operator pos:start="51:28" pos:end="51:28">(</operator><name pos:start="51:29" pos:end="51:39">granularity</name> <operator pos:start="51:41" pos:end="51:41">-</operator> <literal type="number" pos:start="51:43" pos:end="51:43">1</literal><operator pos:start="51:44" pos:end="51:44">)</operator><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:48">==</operator> <literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:21">(<expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:16">buf_size</name> <operator pos:start="55:18" pos:end="55:18">&lt;</operator> <literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>)</condition> <block pos:start="55:23" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:15">

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><call pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="57:56">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:55"><expr pos:start="57:26" pos:end="57:55"><literal type="string" pos:start="57:26" pos:end="57:55">"Invalid parameter 'buf-size'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:22">(<expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:16">buf_size</name> <operator pos:start="65:18" pos:end="65:19">==</operator> <literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr>)</condition> <block pos:start="65:24" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:43">

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:16">buf_size</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="77:37">/* In the case of active commit, add dummy driver to provide consistent

     * reads on the top, while disabling it in the intermediate nodes, and make

     * the backing chain writable. */</comment>

    <expr_stmt pos:start="79:5" pos:end="81:60"><expr pos:start="79:5" pos:end="81:59"><name pos:start="79:5" pos:end="79:17">mirror_top_bs</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <call pos:start="79:21" pos:end="81:59"><name pos:start="79:21" pos:end="79:40">bdrv_new_open_driver</name><argument_list pos:start="79:41" pos:end="81:59">(<argument pos:start="79:42" pos:end="79:57"><expr pos:start="79:42" pos:end="79:57"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:57">bdrv_mirror_top</name></expr></argument>, <argument pos:start="79:60" pos:end="79:75"><expr pos:start="79:60" pos:end="79:75"><name pos:start="79:60" pos:end="79:75">filter_node_name</name></expr></argument>,

                                         <argument pos:start="81:42" pos:end="81:52"><expr pos:start="81:42" pos:end="81:52"><name pos:start="81:42" pos:end="81:52">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="81:55" pos:end="81:58"><expr pos:start="81:55" pos:end="81:58"><name pos:start="81:55" pos:end="81:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:30">(<expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:21">mirror_top_bs</name> <operator pos:start="83:23" pos:end="83:24">==</operator> <name pos:start="83:26" pos:end="83:29">NULL</name></expr>)</condition> <block pos:start="83:32" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:15">

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:53"><expr pos:start="89:5" pos:end="89:52"><name pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:17">mirror_top_bs</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:32">total_sectors</name></name> <operator pos:start="89:34" pos:end="89:34">=</operator> <name pos:start="89:36" pos:end="89:52"><name pos:start="89:36" pos:end="89:37">bs</name><operator pos:start="89:38" pos:end="89:39">-&gt;</operator><name pos:start="89:40" pos:end="89:52">total_sectors</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="95:69">/* bdrv_append takes ownership of the mirror_top_bs reference, need to keep

     * it alive until block_job_create() even if bs has no parent. */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><call pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:12">bdrv_ref</name><argument_list pos:start="97:13" pos:end="97:27">(<argument pos:start="97:14" pos:end="97:26"><expr pos:start="97:14" pos:end="97:26"><name pos:start="97:14" pos:end="97:26">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><call pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:22">bdrv_drained_begin</name><argument_list pos:start="99:23" pos:end="99:26">(<argument pos:start="99:24" pos:end="99:25"><expr pos:start="99:24" pos:end="99:25"><name pos:start="99:24" pos:end="99:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:47"><expr pos:start="101:5" pos:end="101:46"><call pos:start="101:5" pos:end="101:46"><name pos:start="101:5" pos:end="101:15">bdrv_append</name><argument_list pos:start="101:16" pos:end="101:46">(<argument pos:start="101:17" pos:end="101:29"><expr pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:29">mirror_top_bs</name></expr></argument>, <argument pos:start="101:32" pos:end="101:33"><expr pos:start="101:32" pos:end="101:33"><name pos:start="101:32" pos:end="101:33">bs</name></expr></argument>, <argument pos:start="101:36" pos:end="101:45"><expr pos:start="101:36" pos:end="101:45"><operator pos:start="101:36" pos:end="101:36">&amp;</operator><name pos:start="101:37" pos:end="101:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:25"><expr pos:start="103:5" pos:end="103:24"><call pos:start="103:5" pos:end="103:24"><name pos:start="103:5" pos:end="103:20">bdrv_drained_end</name><argument_list pos:start="103:21" pos:end="103:24">(<argument pos:start="103:22" pos:end="103:23"><expr pos:start="103:22" pos:end="103:23"><name pos:start="103:22" pos:end="103:23">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:18">(<expr pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:17">local_err</name></expr>)</condition> <block pos:start="107:20" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:15">

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><call pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:18">bdrv_unref</name><argument_list pos:start="109:19" pos:end="109:33">(<argument pos:start="109:20" pos:end="109:32"><expr pos:start="109:20" pos:end="109:32"><name pos:start="109:20" pos:end="109:32">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><call pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:23">error_propagate</name><argument_list pos:start="111:24" pos:end="111:40">(<argument pos:start="111:25" pos:end="111:28"><expr pos:start="111:25" pos:end="111:28"><name pos:start="111:25" pos:end="111:28">errp</name></expr></argument>, <argument pos:start="111:31" pos:end="111:39"><expr pos:start="111:31" pos:end="111:39"><name pos:start="111:31" pos:end="111:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:75">/* Make sure that the source is not resized while the job is running */</comment>

    <expr_stmt pos:start="121:5" pos:end="129:59"><expr pos:start="121:5" pos:end="129:58"><name pos:start="121:5" pos:end="121:5">s</name> <operator pos:start="121:7" pos:end="121:7">=</operator> <call pos:start="121:9" pos:end="129:58"><name pos:start="121:9" pos:end="121:24">block_job_create</name><argument_list pos:start="121:25" pos:end="129:58">(<argument pos:start="121:26" pos:end="121:31"><expr pos:start="121:26" pos:end="121:31"><name pos:start="121:26" pos:end="121:31">job_id</name></expr></argument>, <argument pos:start="121:34" pos:end="121:39"><expr pos:start="121:34" pos:end="121:39"><name pos:start="121:34" pos:end="121:39">driver</name></expr></argument>, <argument pos:start="121:42" pos:end="121:54"><expr pos:start="121:42" pos:end="121:54"><name pos:start="121:42" pos:end="121:54">mirror_top_bs</name></expr></argument>,

                         <argument pos:start="123:26" pos:end="123:49"><expr pos:start="123:26" pos:end="123:49"><name pos:start="123:26" pos:end="123:49">BLK_PERM_CONSISTENT_READ</name></expr></argument>,

                         <argument pos:start="125:26" pos:end="127:60"><expr pos:start="125:26" pos:end="127:60"><name pos:start="125:26" pos:end="125:49">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="125:51" pos:end="125:51">|</operator> <name pos:start="125:53" pos:end="125:76">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="125:78" pos:end="125:78">|</operator>

                         <name pos:start="127:26" pos:end="127:39">BLK_PERM_WRITE</name> <operator pos:start="127:41" pos:end="127:41">|</operator> <name pos:start="127:43" pos:end="127:60">BLK_PERM_GRAPH_MOD</name></expr></argument>, <argument pos:start="127:63" pos:end="127:67"><expr pos:start="127:63" pos:end="127:67"><name pos:start="127:63" pos:end="127:67">speed</name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:39"><expr pos:start="129:26" pos:end="129:39"><name pos:start="129:26" pos:end="129:39">creation_flags</name></expr></argument>, <argument pos:start="129:42" pos:end="129:43"><expr pos:start="129:42" pos:end="129:43"><name pos:start="129:42" pos:end="129:43">cb</name></expr></argument>, <argument pos:start="129:46" pos:end="129:51"><expr pos:start="129:46" pos:end="129:51"><name pos:start="129:46" pos:end="129:51">opaque</name></expr></argument>, <argument pos:start="129:54" pos:end="129:57"><expr pos:start="129:54" pos:end="129:57"><name pos:start="129:54" pos:end="129:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:30"><expr pos:start="131:5" pos:end="131:29"><call pos:start="131:5" pos:end="131:29"><name pos:start="131:5" pos:end="131:14">bdrv_unref</name><argument_list pos:start="131:15" pos:end="131:29">(<argument pos:start="131:16" pos:end="131:28"><expr pos:start="131:16" pos:end="131:28"><name pos:start="131:16" pos:end="131:28">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="137:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:11">(<expr pos:start="133:9" pos:end="133:10"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:10">s</name></expr>)</condition> <block pos:start="133:13" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:18">

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:19"><expr pos:start="139:5" pos:end="139:18"><name pos:start="139:5" pos:end="139:13"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:13">source</name></name> <operator pos:start="139:15" pos:end="139:15">=</operator> <name pos:start="139:17" pos:end="139:18">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:37"><expr pos:start="141:5" pos:end="141:36"><name pos:start="141:5" pos:end="141:20"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:20">mirror_top_bs</name></name> <operator pos:start="141:22" pos:end="141:22">=</operator> <name pos:start="141:24" pos:end="141:36">mirror_top_bs</name></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="159:51">/* No resize for the target either; while the mirror is still running, a

     * consistent read isn't necessarily possible. We could possibly allow

     * writes and graph modifications, though it would likely defeat the

     * purpose of a mirror, so leave them blocked for now.

     *

     * In the case of active commit, things look a bit different, though,

     * because the target is an already populated backing file in active use.

     * We can allow anything except resize there.*/</comment>

    <expr_stmt pos:start="161:5" pos:end="161:56"><expr pos:start="161:5" pos:end="161:55"><name pos:start="161:5" pos:end="161:21">target_is_backing</name> <operator pos:start="161:23" pos:end="161:23">=</operator> <call pos:start="161:25" pos:end="161:55"><name pos:start="161:25" pos:end="161:43">bdrv_chain_contains</name><argument_list pos:start="161:44" pos:end="161:55">(<argument pos:start="161:45" pos:end="161:46"><expr pos:start="161:45" pos:end="161:46"><name pos:start="161:45" pos:end="161:46">bs</name></expr></argument>, <argument pos:start="161:49" pos:end="161:54"><expr pos:start="161:49" pos:end="161:54"><name pos:start="161:49" pos:end="161:54">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:68"><expr pos:start="163:5" pos:end="163:67"><name pos:start="163:5" pos:end="163:20">target_graph_mod</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <operator pos:start="163:24" pos:end="163:24">(</operator><name pos:start="163:25" pos:end="163:36">backing_mode</name> <operator pos:start="163:38" pos:end="163:39">!=</operator> <name pos:start="163:41" pos:end="163:66">MIRROR_LEAVE_BACKING_CHAIN</name><operator pos:start="163:67" pos:end="163:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="175:70"><expr pos:start="165:5" pos:end="175:69"><name pos:start="165:5" pos:end="165:13"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:13">target</name></name> <operator pos:start="165:15" pos:end="165:15">=</operator> <call pos:start="165:17" pos:end="175:69"><name pos:start="165:17" pos:end="165:23">blk_new</name><argument_list pos:start="165:24" pos:end="175:69">(<argument pos:start="165:25" pos:end="167:67"><expr pos:start="165:25" pos:end="167:67"><name pos:start="165:25" pos:end="165:38">BLK_PERM_WRITE</name> <operator pos:start="165:40" pos:end="165:40">|</operator> <name pos:start="165:42" pos:end="165:56">BLK_PERM_RESIZE</name> <operator pos:start="165:58" pos:end="165:58">|</operator>

                        <operator pos:start="167:25" pos:end="167:25">(</operator><ternary pos:start="167:26" pos:end="167:66"><condition pos:start="167:26" pos:end="167:43"><expr pos:start="167:26" pos:end="167:41"><name pos:start="167:26" pos:end="167:41">target_graph_mod</name></expr> ?</condition><then pos:start="167:45" pos:end="167:62"> <expr pos:start="167:45" pos:end="167:62"><name pos:start="167:45" pos:end="167:62">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="167:64" pos:end="167:66">: <expr pos:start="167:66" pos:end="167:66"><literal type="number" pos:start="167:66" pos:end="167:66">0</literal></expr></else></ternary><operator pos:start="167:67" pos:end="167:67">)</operator></expr></argument>,

                        <argument pos:start="169:25" pos:end="175:68"><expr pos:start="169:25" pos:end="175:68"><name pos:start="169:25" pos:end="169:48">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="169:50" pos:end="169:50">|</operator>

                        <operator pos:start="171:25" pos:end="171:25">(</operator><ternary pos:start="171:26" pos:end="175:67"><condition pos:start="171:26" pos:end="171:44"><expr pos:start="171:26" pos:end="171:42"><name pos:start="171:26" pos:end="171:42">target_is_backing</name></expr> ?</condition><then pos:start="171:46" pos:end="175:63"> <expr pos:start="171:46" pos:end="175:63"><name pos:start="171:46" pos:end="171:69">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="171:71" pos:end="171:71">|</operator>

                                             <name pos:start="173:46" pos:end="173:59">BLK_PERM_WRITE</name> <operator pos:start="173:61" pos:end="173:61">|</operator>

                                             <name pos:start="175:46" pos:end="175:63">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="175:65" pos:end="175:67">: <expr pos:start="175:67" pos:end="175:67"><literal type="number" pos:start="175:67" pos:end="175:67">0</literal></expr></else></ternary><operator pos:start="175:68" pos:end="175:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:49"><expr pos:start="177:5" pos:end="177:48"><name pos:start="177:5" pos:end="177:7">ret</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="177:48"><name pos:start="177:11" pos:end="177:23">blk_insert_bs</name><argument_list pos:start="177:24" pos:end="177:48">(<argument pos:start="177:25" pos:end="177:33"><expr pos:start="177:25" pos:end="177:33"><name pos:start="177:25" pos:end="177:33"><name pos:start="177:25" pos:end="177:25">s</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:33">target</name></name></expr></argument>, <argument pos:start="177:36" pos:end="177:41"><expr pos:start="177:36" pos:end="177:41"><name pos:start="177:36" pos:end="177:41">target</name></expr></argument>, <argument pos:start="177:44" pos:end="177:47"><expr pos:start="177:44" pos:end="177:47"><name pos:start="177:44" pos:end="177:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:16">(<expr pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:11">ret</name> <operator pos:start="179:13" pos:end="179:13">&lt;</operator> <literal type="number" pos:start="179:15" pos:end="179:15">0</literal></expr>)</condition> <block pos:start="179:18" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:18">

        <goto pos:start="181:9" pos:end="181:18">goto <name pos:start="181:14" pos:end="181:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:37"><expr pos:start="187:5" pos:end="187:36"><name pos:start="187:5" pos:end="187:15"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:15">replaces</name></name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="187:36"><name pos:start="187:19" pos:end="187:26">g_strdup</name><argument_list pos:start="187:27" pos:end="187:36">(<argument pos:start="187:28" pos:end="187:35"><expr pos:start="187:28" pos:end="187:35"><name pos:start="187:28" pos:end="187:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:41"><expr pos:start="189:5" pos:end="189:40"><name pos:start="189:5" pos:end="189:22"><name pos:start="189:5" pos:end="189:5">s</name><operator pos:start="189:6" pos:end="189:7">-&gt;</operator><name pos:start="189:8" pos:end="189:22">on_source_error</name></name> <operator pos:start="189:24" pos:end="189:24">=</operator> <name pos:start="189:26" pos:end="189:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:41"><expr pos:start="191:5" pos:end="191:40"><name pos:start="191:5" pos:end="191:22"><name pos:start="191:5" pos:end="191:5">s</name><operator pos:start="191:6" pos:end="191:7">-&gt;</operator><name pos:start="191:8" pos:end="191:22">on_target_error</name></name> <operator pos:start="191:24" pos:end="191:24">=</operator> <name pos:start="191:26" pos:end="191:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:35"><expr pos:start="193:5" pos:end="193:34"><name pos:start="193:5" pos:end="193:19"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:19">is_none_mode</name></name> <operator pos:start="193:21" pos:end="193:21">=</operator> <name pos:start="193:23" pos:end="193:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:35"><expr pos:start="195:5" pos:end="195:34"><name pos:start="195:5" pos:end="195:19"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:19">backing_mode</name></name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:34">backing_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:19"><expr pos:start="197:5" pos:end="197:18"><name pos:start="197:5" pos:end="197:11"><name pos:start="197:5" pos:end="197:5">s</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:11">base</name></name> <operator pos:start="197:13" pos:end="197:13">=</operator> <name pos:start="197:15" pos:end="197:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:33"><expr pos:start="199:5" pos:end="199:32"><name pos:start="199:5" pos:end="199:18"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:18">granularity</name></name> <operator pos:start="199:20" pos:end="199:20">=</operator> <name pos:start="199:22" pos:end="199:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:50"><expr pos:start="201:5" pos:end="201:49"><name pos:start="201:5" pos:end="201:15"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:15">buf_size</name></name> <operator pos:start="201:17" pos:end="201:17">=</operator> <call pos:start="201:19" pos:end="201:49"><name pos:start="201:19" pos:end="201:26">ROUND_UP</name><argument_list pos:start="201:27" pos:end="201:49">(<argument pos:start="201:28" pos:end="201:35"><expr pos:start="201:28" pos:end="201:35"><name pos:start="201:28" pos:end="201:35">buf_size</name></expr></argument>, <argument pos:start="201:38" pos:end="201:48"><expr pos:start="201:38" pos:end="201:48"><name pos:start="201:38" pos:end="201:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:21"><expr pos:start="203:5" pos:end="203:20"><name pos:start="203:5" pos:end="203:12"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:12">unmap</name></name> <operator pos:start="203:14" pos:end="203:14">=</operator> <name pos:start="203:16" pos:end="203:20">unmap</name></expr>;</expr_stmt>

    <if_stmt pos:start="205:5" pos:end="209:5"><if pos:start="205:5" pos:end="209:5">if <condition pos:start="205:8" pos:end="205:22">(<expr pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:21">auto_complete</name></expr>)</condition> <block pos:start="205:24" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:34">

        <expr_stmt pos:start="207:9" pos:end="207:34"><expr pos:start="207:9" pos:end="207:33"><name pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:26">should_complete</name></name> <operator pos:start="207:28" pos:end="207:28">=</operator> <name pos:start="207:30" pos:end="207:33">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:76"><expr pos:start="213:5" pos:end="213:75"><name pos:start="213:5" pos:end="213:19"><name pos:start="213:5" pos:end="213:5">s</name><operator pos:start="213:6" pos:end="213:7">-&gt;</operator><name pos:start="213:8" pos:end="213:19">dirty_bitmap</name></name> <operator pos:start="213:21" pos:end="213:21">=</operator> <call pos:start="213:23" pos:end="213:75"><name pos:start="213:23" pos:end="213:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="213:47" pos:end="213:75">(<argument pos:start="213:48" pos:end="213:49"><expr pos:start="213:48" pos:end="213:49"><name pos:start="213:48" pos:end="213:49">bs</name></expr></argument>, <argument pos:start="213:52" pos:end="213:62"><expr pos:start="213:52" pos:end="213:62"><name pos:start="213:52" pos:end="213:62">granularity</name></expr></argument>, <argument pos:start="213:65" pos:end="213:68"><expr pos:start="213:65" pos:end="213:68"><name pos:start="213:65" pos:end="213:68">NULL</name></expr></argument>, <argument pos:start="213:71" pos:end="213:74"><expr pos:start="213:71" pos:end="213:74"><name pos:start="213:71" pos:end="213:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:25">(<expr pos:start="215:9" pos:end="215:24"><operator pos:start="215:9" pos:end="215:9">!</operator><name pos:start="215:10" pos:end="215:24"><name pos:start="215:10" pos:end="215:10">s</name><operator pos:start="215:11" pos:end="215:12">-&gt;</operator><name pos:start="215:13" pos:end="215:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="215:27" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:18">

        <goto pos:start="217:9" pos:end="217:18">goto <name pos:start="217:14" pos:end="217:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:63">/* Required permissions are already taken with blk_new() */</comment>

    <expr_stmt pos:start="225:5" pos:end="227:37"><expr pos:start="225:5" pos:end="227:36"><call pos:start="225:5" pos:end="227:36"><name pos:start="225:5" pos:end="225:22">block_job_add_bdrv</name><argument_list pos:start="225:23" pos:end="227:36">(<argument pos:start="225:24" pos:end="225:33"><expr pos:start="225:24" pos:end="225:33"><operator pos:start="225:24" pos:end="225:24">&amp;</operator><name pos:start="225:25" pos:end="225:33"><name pos:start="225:25" pos:end="225:25">s</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:33">common</name></name></expr></argument>, <argument pos:start="225:36" pos:end="225:43"><expr pos:start="225:36" pos:end="225:43"><literal type="string" pos:start="225:36" pos:end="225:43">"target"</literal></expr></argument>, <argument pos:start="225:46" pos:end="225:51"><expr pos:start="225:46" pos:end="225:51"><name pos:start="225:46" pos:end="225:51">target</name></expr></argument>, <argument pos:start="225:54" pos:end="225:54"><expr pos:start="225:54" pos:end="225:54"><literal type="number" pos:start="225:54" pos:end="225:54">0</literal></expr></argument>, <argument pos:start="225:57" pos:end="225:68"><expr pos:start="225:57" pos:end="225:68"><name pos:start="225:57" pos:end="225:68">BLK_PERM_ALL</name></expr></argument>,

                       <argument pos:start="227:24" pos:end="227:35"><expr pos:start="227:24" pos:end="227:35"><operator pos:start="227:24" pos:end="227:24">&amp;</operator><name pos:start="227:25" pos:end="227:35">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="233:42">/* In commit_active_start() all intermediate nodes disappear, so

     * any jobs in them must be blocked */</comment>

    <if_stmt pos:start="235:5" pos:end="263:5"><if pos:start="235:5" pos:end="263:5">if <condition pos:start="235:8" pos:end="235:26">(<expr pos:start="235:9" pos:end="235:25"><name pos:start="235:9" pos:end="235:25">target_is_backing</name></expr>)</condition> <block pos:start="235:28" pos:end="263:5">{<block_content pos:start="237:9" pos:end="261:9">

        <decl_stmt pos:start="237:9" pos:end="237:31"><decl pos:start="237:9" pos:end="237:30"><type pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:24">BlockDriverState</name> <modifier pos:start="237:26" pos:end="237:26">*</modifier></type><name pos:start="237:27" pos:end="237:30">iter</name></decl>;</decl_stmt>

        <for pos:start="239:9" pos:end="261:9">for <control pos:start="239:13" pos:end="239:76">(<init pos:start="239:14" pos:end="239:35"><expr pos:start="239:14" pos:end="239:34"><name pos:start="239:14" pos:end="239:17">iter</name> <operator pos:start="239:19" pos:end="239:19">=</operator> <call pos:start="239:21" pos:end="239:34"><name pos:start="239:21" pos:end="239:30">backing_bs</name><argument_list pos:start="239:31" pos:end="239:34">(<argument pos:start="239:32" pos:end="239:33"><expr pos:start="239:32" pos:end="239:33"><name pos:start="239:32" pos:end="239:33">bs</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="239:37" pos:end="239:51"><expr pos:start="239:37" pos:end="239:50"><name pos:start="239:37" pos:end="239:40">iter</name> <operator pos:start="239:42" pos:end="239:43">!=</operator> <name pos:start="239:45" pos:end="239:50">target</name></expr>;</condition> <incr pos:start="239:53" pos:end="239:75"><expr pos:start="239:53" pos:end="239:75"><name pos:start="239:53" pos:end="239:56">iter</name> <operator pos:start="239:58" pos:end="239:58">=</operator> <call pos:start="239:60" pos:end="239:75"><name pos:start="239:60" pos:end="239:69">backing_bs</name><argument_list pos:start="239:70" pos:end="239:75">(<argument pos:start="239:71" pos:end="239:74"><expr pos:start="239:71" pos:end="239:74"><name pos:start="239:71" pos:end="239:74">iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="239:78" pos:end="261:9">{<block_content pos:start="249:13" pos:end="259:13">

            <comment type="block" pos:start="241:13" pos:end="247:65">/* XXX BLK_PERM_WRITE needs to be allowed so we don't block

             * ourselves at s-&gt;base (if writes are blocked for a node, they are

             * also blocked for its backing file). The other options would be a

             * second filter driver above s-&gt;base (== target). */</comment>

            <expr_stmt pos:start="249:13" pos:end="253:43"><expr pos:start="249:13" pos:end="253:42"><name pos:start="249:13" pos:end="249:15">ret</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <call pos:start="249:19" pos:end="253:42"><name pos:start="249:19" pos:end="249:36">block_job_add_bdrv</name><argument_list pos:start="249:37" pos:end="253:42">(<argument pos:start="249:38" pos:end="249:47"><expr pos:start="249:38" pos:end="249:47"><operator pos:start="249:38" pos:end="249:38">&amp;</operator><name pos:start="249:39" pos:end="249:47"><name pos:start="249:39" pos:end="249:39">s</name><operator pos:start="249:40" pos:end="249:41">-&gt;</operator><name pos:start="249:42" pos:end="249:47">common</name></name></expr></argument>, <argument pos:start="249:50" pos:end="249:68"><expr pos:start="249:50" pos:end="249:68"><literal type="string" pos:start="249:50" pos:end="249:68">"intermediate node"</literal></expr></argument>, <argument pos:start="249:71" pos:end="249:74"><expr pos:start="249:71" pos:end="249:74"><name pos:start="249:71" pos:end="249:74">iter</name></expr></argument>, <argument pos:start="249:77" pos:end="249:77"><expr pos:start="249:77" pos:end="249:77"><literal type="number" pos:start="249:77" pos:end="249:77">0</literal></expr></argument>,

                                     <argument pos:start="251:38" pos:end="251:78"><expr pos:start="251:38" pos:end="251:78"><name pos:start="251:38" pos:end="251:61">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="251:63" pos:end="251:63">|</operator> <name pos:start="251:65" pos:end="251:78">BLK_PERM_WRITE</name></expr></argument>,

                                     <argument pos:start="253:38" pos:end="253:41"><expr pos:start="253:38" pos:end="253:41"><name pos:start="253:38" pos:end="253:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="255:13" pos:end="259:13"><if pos:start="255:13" pos:end="259:13">if <condition pos:start="255:16" pos:end="255:24">(<expr pos:start="255:17" pos:end="255:23"><name pos:start="255:17" pos:end="255:19">ret</name> <operator pos:start="255:21" pos:end="255:21">&lt;</operator> <literal type="number" pos:start="255:23" pos:end="255:23">0</literal></expr>)</condition> <block pos:start="255:26" pos:end="259:13">{<block_content pos:start="257:17" pos:end="257:26">

                <goto pos:start="257:17" pos:end="257:26">goto <name pos:start="257:22" pos:end="257:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:38"><expr pos:start="267:5" pos:end="267:37"><call pos:start="267:5" pos:end="267:37"><name pos:start="267:5" pos:end="267:22">trace_mirror_start</name><argument_list pos:start="267:23" pos:end="267:37">(<argument pos:start="267:24" pos:end="267:25"><expr pos:start="267:24" pos:end="267:25"><name pos:start="267:24" pos:end="267:25">bs</name></expr></argument>, <argument pos:start="267:28" pos:end="267:28"><expr pos:start="267:28" pos:end="267:28"><name pos:start="267:28" pos:end="267:28">s</name></expr></argument>, <argument pos:start="267:31" pos:end="267:36"><expr pos:start="267:31" pos:end="267:36"><name pos:start="267:31" pos:end="267:36">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:32"><expr pos:start="269:5" pos:end="269:31"><call pos:start="269:5" pos:end="269:31"><name pos:start="269:5" pos:end="269:19">block_job_start</name><argument_list pos:start="269:20" pos:end="269:31">(<argument pos:start="269:21" pos:end="269:30"><expr pos:start="269:21" pos:end="269:30"><operator pos:start="269:21" pos:end="269:21">&amp;</operator><name pos:start="269:22" pos:end="269:30"><name pos:start="269:22" pos:end="269:22">s</name><operator pos:start="269:23" pos:end="269:24">-&gt;</operator><name pos:start="269:25" pos:end="269:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="271:5" pos:end="271:11">return;</return>



<label pos:start="275:1" pos:end="275:5"><name pos:start="275:1" pos:end="275:4">fail</name>:</label>

    <if_stmt pos:start="277:5" pos:end="285:5"><if pos:start="277:5" pos:end="285:5">if <condition pos:start="277:8" pos:end="277:10">(<expr pos:start="277:9" pos:end="277:9"><name pos:start="277:9" pos:end="277:9">s</name></expr>)</condition> <block pos:start="277:12" pos:end="285:5">{<block_content pos:start="279:9" pos:end="283:36">

        <expr_stmt pos:start="279:9" pos:end="279:28"><expr pos:start="279:9" pos:end="279:27"><call pos:start="279:9" pos:end="279:27"><name pos:start="279:9" pos:end="279:14">g_free</name><argument_list pos:start="279:15" pos:end="279:27">(<argument pos:start="279:16" pos:end="279:26"><expr pos:start="279:16" pos:end="279:26"><name pos:start="279:16" pos:end="279:26"><name pos:start="279:16" pos:end="279:16">s</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:26">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:29"><expr pos:start="281:9" pos:end="281:28"><call pos:start="281:9" pos:end="281:28"><name pos:start="281:9" pos:end="281:17">blk_unref</name><argument_list pos:start="281:18" pos:end="281:28">(<argument pos:start="281:19" pos:end="281:27"><expr pos:start="281:19" pos:end="281:27"><name pos:start="281:19" pos:end="281:27"><name pos:start="281:19" pos:end="281:19">s</name><operator pos:start="281:20" pos:end="281:21">-&gt;</operator><name pos:start="281:22" pos:end="281:27">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:36"><expr pos:start="283:9" pos:end="283:35"><call pos:start="283:9" pos:end="283:35"><name pos:start="283:9" pos:end="283:23">block_job_unref</name><argument_list pos:start="283:24" pos:end="283:35">(<argument pos:start="283:25" pos:end="283:34"><expr pos:start="283:25" pos:end="283:34"><operator pos:start="283:25" pos:end="283:25">&amp;</operator><name pos:start="283:26" pos:end="283:34"><name pos:start="283:26" pos:end="283:26">s</name><operator pos:start="283:27" pos:end="283:28">-&gt;</operator><name pos:start="283:29" pos:end="283:34">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="289:5" pos:end="291:42"><expr pos:start="289:5" pos:end="291:41"><call pos:start="289:5" pos:end="291:41"><name pos:start="289:5" pos:end="289:27">bdrv_child_try_set_perm</name><argument_list pos:start="289:28" pos:end="291:41">(<argument pos:start="289:29" pos:end="289:50"><expr pos:start="289:29" pos:end="289:50"><name pos:start="289:29" pos:end="289:50"><name pos:start="289:29" pos:end="289:41">mirror_top_bs</name><operator pos:start="289:42" pos:end="289:43">-&gt;</operator><name pos:start="289:44" pos:end="289:50">backing</name></name></expr></argument>, <argument pos:start="289:53" pos:end="289:53"><expr pos:start="289:53" pos:end="289:53"><literal type="number" pos:start="289:53" pos:end="289:53">0</literal></expr></argument>, <argument pos:start="289:56" pos:end="289:67"><expr pos:start="289:56" pos:end="289:67"><name pos:start="289:56" pos:end="289:67">BLK_PERM_ALL</name></expr></argument>,

                            <argument pos:start="291:29" pos:end="291:40"><expr pos:start="291:29" pos:end="291:40"><operator pos:start="291:29" pos:end="291:29">&amp;</operator><name pos:start="291:30" pos:end="291:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:78"><expr pos:start="293:5" pos:end="293:77"><call pos:start="293:5" pos:end="293:77"><name pos:start="293:5" pos:end="293:21">bdrv_replace_node</name><argument_list pos:start="293:22" pos:end="293:77">(<argument pos:start="293:23" pos:end="293:35"><expr pos:start="293:23" pos:end="293:35"><name pos:start="293:23" pos:end="293:35">mirror_top_bs</name></expr></argument>, <argument pos:start="293:38" pos:end="293:62"><expr pos:start="293:38" pos:end="293:62"><call pos:start="293:38" pos:end="293:62"><name pos:start="293:38" pos:end="293:47">backing_bs</name><argument_list pos:start="293:48" pos:end="293:62">(<argument pos:start="293:49" pos:end="293:61"><expr pos:start="293:49" pos:end="293:61"><name pos:start="293:49" pos:end="293:61">mirror_top_bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="293:65" pos:end="293:76"><expr pos:start="293:65" pos:end="293:76"><operator pos:start="293:65" pos:end="293:65">&amp;</operator><name pos:start="293:66" pos:end="293:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
