<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/34.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:25">do_rfi</name><parameter_list pos:start="1:26" pos:end="1:79">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">CPUPPCState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:56">target_ulong</name></type> <name pos:start="1:58" pos:end="1:60">nip</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:78"><decl pos:start="1:63" pos:end="1:78"><type pos:start="1:63" pos:end="1:78"><name pos:start="1:63" pos:end="1:74">target_ulong</name></type> <name pos:start="1:76" pos:end="1:78">msr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:25">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:44">= <expr pos:start="5:20" pos:end="5:44"><call pos:start="5:20" pos:end="5:44"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:44">(<argument pos:start="5:24" pos:end="5:43"><expr pos:start="5:24" pos:end="5:43"><call pos:start="5:24" pos:end="5:43"><name pos:start="5:24" pos:end="5:38">ppc_env_get_cpu</name><argument_list pos:start="5:39" pos:end="5:43">(<argument pos:start="5:40" pos:end="5:42"><expr pos:start="5:40" pos:end="5:42"><name pos:start="5:40" pos:end="5:42">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:50">/* MSR:POW cannot be set by any form of rfi */</comment>

    <expr_stmt pos:start="11:5" pos:end="16:0"><expr pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:7">msr</name> <operator pos:start="11:9" pos:end="11:10">&amp;=</operator> <operator pos:start="11:12" pos:end="11:12">~</operator><operator pos:start="11:13" pos:end="11:13">(</operator><literal type="number" pos:start="11:14" pos:end="11:17">1ULL</literal> <operator pos:start="11:19" pos:end="11:20">&lt;&lt;</operator> <name pos:start="11:22" pos:end="11:28">MSR_POW</name><operator pos:start="11:29" pos:end="11:29">)</operator></expr>;</expr_stmt>



<cpp:if pos:start="15:1" pos:end="15:25">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:25">(<argument pos:start="15:13" pos:end="15:24"><expr pos:start="15:13" pos:end="15:24"><name pos:start="15:13" pos:end="15:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="17:5" pos:end="17:44">/* Switching to 32-bit ? Crop the nip */</comment>

    <if_stmt pos:start="19:5" pos:end="26:0"><if pos:start="19:5" pos:end="26:0">if <condition pos:start="19:8" pos:end="19:32">(<expr pos:start="19:9" pos:end="19:31"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:31"><name pos:start="19:10" pos:end="19:21">msr_is_64bit</name><argument_list pos:start="19:22" pos:end="19:31">(<argument pos:start="19:23" pos:end="19:25"><expr pos:start="19:23" pos:end="19:25"><name pos:start="19:23" pos:end="19:25">env</name></expr></argument>, <argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">msr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:34" pos:end="26:0">{<block_content pos:start="21:9" pos:end="21:28">

        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:11">nip</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:23">uint32_t</name><operator pos:start="21:24" pos:end="21:24">)</operator><name pos:start="21:25" pos:end="21:27">nip</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:7">nip</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <operator pos:start="27:11" pos:end="27:11">(</operator><name pos:start="27:12" pos:end="27:19">uint32_t</name><operator pos:start="27:20" pos:end="27:20">)</operator><name pos:start="27:21" pos:end="27:23">nip</name></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="31:5" pos:end="31:56">/* XXX: beware: this is false if VLE is supported */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:12">nip</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:18">nip</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <operator pos:start="33:22" pos:end="33:22">~</operator><operator pos:start="33:23" pos:end="33:23">(</operator><operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:36">target_ulong</name><operator pos:start="33:37" pos:end="33:37">)</operator><literal type="number" pos:start="33:38" pos:end="33:47">0x00000003</literal><operator pos:start="33:48" pos:end="33:48">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:18">hreg_store_msr</name><argument_list pos:start="35:19" pos:end="35:31">(<argument pos:start="35:20" pos:end="35:22"><expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">env</name></expr></argument>, <argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">msr</name></expr></argument>, <argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><literal type="number" pos:start="35:30" pos:end="35:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="37:1" pos:end="37:21">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:11">defined</name><argument_list pos:start="37:12" pos:end="37:21">(<argument pos:start="37:13" pos:end="37:20"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">DEBUG_OP</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:16">cpu_dump_rfi</name><argument_list pos:start="39:17" pos:end="39:36">(<argument pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:20">env</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:25">nip</name></name></expr></argument>, <argument pos:start="39:28" pos:end="39:35"><expr pos:start="39:28" pos:end="39:35"><name pos:start="39:28" pos:end="39:35"><name pos:start="39:28" pos:end="39:30">env</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:35">msr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="43:5" pos:end="47:7">/* No need to raise an exception here,

     * as rfi is always the last insn of a TB

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:50"><expr pos:start="49:5" pos:end="49:49"><name pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:6">cs</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:25">interrupt_request</name></name> <operator pos:start="49:27" pos:end="49:28">|=</operator> <name pos:start="49:30" pos:end="49:49">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:61">/* Context synchronizing: check if TCG TLB needs flush */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:19">check_tlb_flush</name><argument_list pos:start="55:20" pos:end="55:24">(<argument pos:start="55:21" pos:end="55:23"><expr pos:start="55:21" pos:end="55:23"><name pos:start="55:21" pos:end="55:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
