<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6793.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mp_decode_frame</name><parameter_list pos:start="1:27" pos:end="5:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:43"><decl pos:start="3:34" pos:end="3:43"><type pos:start="3:34" pos:end="3:43"><name pos:start="3:34" pos:end="3:37">void</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">data</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:48">int</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:59">data_size</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:48"><decl pos:start="5:34" pos:end="5:48"><type pos:start="5:34" pos:end="5:48"><name pos:start="5:34" pos:end="5:41">AVPacket</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:48">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="117:1">{<block_content pos:start="9:5" pos:end="115:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:23">MotionPixelsContext</name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:27">mp</name> <init pos:start="13:29" pos:end="13:46">= <expr pos:start="13:31" pos:end="13:46"><name pos:start="13:31" pos:end="13:46"><name pos:start="13:31" pos:end="13:35">avctx</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:46">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:17"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:17">count1</name></decl>, <decl pos:start="17:20" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:20" pos:end="17:25">count2</name></decl>, <decl pos:start="17:28" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:28" pos:end="17:29">sz</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:28"><expr pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:6">mp</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:13">frame</name><operator pos:start="21:14" pos:end="21:14">.</operator><name pos:start="21:15" pos:end="21:23">reference</name></name> <operator pos:start="21:25" pos:end="21:25">=</operator> <literal type="number" pos:start="21:27" pos:end="21:27">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:105"><expr pos:start="23:5" pos:end="23:104"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:6">mp</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:13">frame</name><operator pos:start="23:14" pos:end="23:14">.</operator><name pos:start="23:15" pos:end="23:26">buffer_hints</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:50">FF_BUFFER_HINTS_VALID</name> <operator pos:start="23:52" pos:end="23:52">|</operator> <name pos:start="23:54" pos:end="23:77">FF_BUFFER_HINTS_PRESERVE</name> <operator pos:start="23:79" pos:end="23:79">|</operator> <name pos:start="23:81" pos:end="23:104">FF_BUFFER_HINTS_REUSABLE</name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:47">(<expr pos:start="25:9" pos:end="25:46"><call pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:27">reget_buffer</name></name><argument_list pos:start="25:28" pos:end="25:46">(<argument pos:start="25:29" pos:end="25:33"><expr pos:start="25:29" pos:end="25:33"><name pos:start="25:29" pos:end="25:33">avctx</name></expr></argument>, <argument pos:start="25:36" pos:end="25:45"><expr pos:start="25:36" pos:end="25:45"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:45"><name pos:start="25:37" pos:end="25:38">mp</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:45">frame</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:49" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:63"><expr pos:start="27:9" pos:end="27:62"><call pos:start="27:9" pos:end="27:62"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:62">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:61"><expr pos:start="27:37" pos:end="27:61"><literal type="string" pos:start="27:37" pos:end="27:61">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:34">/* le32 bitstream msb first */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:95"><expr pos:start="37:5" pos:end="37:94"><call pos:start="37:5" pos:end="37:94"><name pos:start="37:5" pos:end="37:18">av_fast_malloc</name><argument_list pos:start="37:19" pos:end="37:94">(<argument pos:start="37:20" pos:end="37:32"><expr pos:start="37:20" pos:end="37:32"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:22">mp</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:32">bswapbuf</name></name></expr></argument>, <argument pos:start="37:35" pos:end="37:52"><expr pos:start="37:35" pos:end="37:52"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:52"><name pos:start="37:36" pos:end="37:37">mp</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:52">bswapbuf_size</name></name></expr></argument>, <argument pos:start="37:55" pos:end="37:93"><expr pos:start="37:55" pos:end="37:93"><name pos:start="37:55" pos:end="37:62">buf_size</name> <operator pos:start="37:64" pos:end="37:64">+</operator> <name pos:start="37:66" pos:end="37:93">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:31"><if pos:start="39:5" pos:end="41:31">if <condition pos:start="39:8" pos:end="39:22">(<expr pos:start="39:9" pos:end="39:21"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:11">mp</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:21">bswapbuf</name></name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:31"><block_content pos:start="41:9" pos:end="41:31">

        <return pos:start="41:9" pos:end="41:31">return <expr pos:start="41:16" pos:end="41:30"><call pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:22">AVERROR</name><argument_list pos:start="41:23" pos:end="41:30">(<argument pos:start="41:24" pos:end="41:29"><expr pos:start="41:24" pos:end="41:29"><name pos:start="41:24" pos:end="41:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:85"><expr pos:start="43:5" pos:end="43:84"><call pos:start="43:5" pos:end="43:84"><name pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:6">mp</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:11">dsp</name><operator pos:start="43:12" pos:end="43:12">.</operator><name pos:start="43:13" pos:end="43:21">bswap_buf</name></name><argument_list pos:start="43:22" pos:end="43:84">(<argument pos:start="43:23" pos:end="43:46"><expr pos:start="43:23" pos:end="43:46"><operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:31">uint32_t</name> <operator pos:start="43:33" pos:end="43:33">*</operator><operator pos:start="43:34" pos:end="43:34">)</operator><name pos:start="43:35" pos:end="43:46"><name pos:start="43:35" pos:end="43:36">mp</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:46">bswapbuf</name></name></expr></argument>, <argument pos:start="43:49" pos:end="43:69"><expr pos:start="43:49" pos:end="43:69"><operator pos:start="43:49" pos:end="43:49">(</operator><specifier pos:start="43:50" pos:end="43:54">const</specifier> <name pos:start="43:56" pos:end="43:63">uint32_t</name> <operator pos:start="43:65" pos:end="43:65">*</operator><operator pos:start="43:66" pos:end="43:66">)</operator><name pos:start="43:67" pos:end="43:69">buf</name></expr></argument>, <argument pos:start="43:72" pos:end="43:83"><expr pos:start="43:72" pos:end="43:83"><name pos:start="43:72" pos:end="43:79">buf_size</name> <operator pos:start="43:81" pos:end="43:81">/</operator> <literal type="number" pos:start="43:83" pos:end="43:83">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:84"><if pos:start="45:5" pos:end="47:84">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:16">buf_size</name> <operator pos:start="45:18" pos:end="45:18">&amp;</operator> <literal type="number" pos:start="45:20" pos:end="45:20">3</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:84"><block_content pos:start="47:9" pos:end="47:84">

        <expr_stmt pos:start="47:9" pos:end="47:84"><expr pos:start="47:9" pos:end="47:83"><call pos:start="47:9" pos:end="47:83"><name pos:start="47:9" pos:end="47:14">memcpy</name><argument_list pos:start="47:15" pos:end="47:83">(<argument pos:start="47:16" pos:end="47:45"><expr pos:start="47:16" pos:end="47:45"><name pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:17">mp</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:27">bswapbuf</name></name> <operator pos:start="47:29" pos:end="47:29">+</operator> <operator pos:start="47:31" pos:end="47:31">(</operator><name pos:start="47:32" pos:end="47:39">buf_size</name> <operator pos:start="47:41" pos:end="47:41">&amp;</operator> <operator pos:start="47:43" pos:end="47:43">~</operator><literal type="number" pos:start="47:44" pos:end="47:44">3</literal><operator pos:start="47:45" pos:end="47:45">)</operator></expr></argument>, <argument pos:start="47:48" pos:end="47:68"><expr pos:start="47:48" pos:end="47:68"><name pos:start="47:48" pos:end="47:50">buf</name> <operator pos:start="47:52" pos:end="47:52">+</operator> <operator pos:start="47:54" pos:end="47:54">(</operator><name pos:start="47:55" pos:end="47:62">buf_size</name> <operator pos:start="47:64" pos:end="47:64">&amp;</operator> <operator pos:start="47:66" pos:end="47:66">~</operator><literal type="number" pos:start="47:67" pos:end="47:67">3</literal><operator pos:start="47:68" pos:end="47:68">)</operator></expr></argument>, <argument pos:start="47:71" pos:end="47:82"><expr pos:start="47:71" pos:end="47:82"><name pos:start="47:71" pos:end="47:78">buf_size</name> <operator pos:start="47:80" pos:end="47:80">&amp;</operator> <literal type="number" pos:start="47:82" pos:end="47:82">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:17">init_get_bits</name><argument_list pos:start="49:18" pos:end="49:50">(<argument pos:start="49:19" pos:end="49:21"><expr pos:start="49:19" pos:end="49:21"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:21">gb</name></expr></argument>, <argument pos:start="49:24" pos:end="49:35"><expr pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:35"><name pos:start="49:24" pos:end="49:25">mp</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:35">bswapbuf</name></name></expr></argument>, <argument pos:start="49:38" pos:end="49:49"><expr pos:start="49:38" pos:end="49:49"><name pos:start="49:38" pos:end="49:45">buf_size</name> <operator pos:start="49:47" pos:end="49:47">*</operator> <literal type="number" pos:start="49:49" pos:end="49:49">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:61"><expr pos:start="53:5" pos:end="53:60"><call pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:10">memset</name><argument_list pos:start="53:11" pos:end="53:60">(<argument pos:start="53:12" pos:end="53:26"><expr pos:start="53:12" pos:end="53:26"><name pos:start="53:12" pos:end="53:26"><name pos:start="53:12" pos:end="53:13">mp</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:26">changes_map</name></name></expr></argument>, <argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr></argument>, <argument pos:start="53:32" pos:end="53:59"><expr pos:start="53:32" pos:end="53:59"><name pos:start="53:32" pos:end="53:43"><name pos:start="53:32" pos:end="53:36">avctx</name><operator pos:start="53:37" pos:end="53:38">-&gt;</operator><name pos:start="53:39" pos:end="53:43">width</name></name> <operator pos:start="53:45" pos:end="53:45">*</operator> <name pos:start="53:47" pos:end="53:59"><name pos:start="53:47" pos:end="53:51">avctx</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:59">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="65:5">for <control pos:start="55:9" pos:end="55:52">(<init pos:start="55:10" pos:end="55:40"><expr pos:start="55:10" pos:end="55:39"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <operator pos:start="55:14" pos:end="55:14">!</operator><operator pos:start="55:15" pos:end="55:15">(</operator><name pos:start="55:16" pos:end="55:34"><name pos:start="55:16" pos:end="55:20">avctx</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:31">extradata</name><index pos:start="55:32" pos:end="55:34">[<expr pos:start="55:33" pos:end="55:33"><literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr>]</index></name> <operator pos:start="55:36" pos:end="55:36">&amp;</operator> <literal type="number" pos:start="55:38" pos:end="55:38">2</literal><operator pos:start="55:39" pos:end="55:39">)</operator></expr>;</init> <condition pos:start="55:42" pos:end="55:47"><expr pos:start="55:42" pos:end="55:46"><name pos:start="55:42" pos:end="55:42">i</name> <operator pos:start="55:44" pos:end="55:44">&lt;</operator> <literal type="number" pos:start="55:46" pos:end="55:46">2</literal></expr>;</condition> <incr pos:start="55:49" pos:end="55:51"><expr pos:start="55:49" pos:end="55:51"><operator pos:start="55:49" pos:end="55:50">++</operator><name pos:start="55:51" pos:end="55:51">i</name></expr></incr>)</control> <block pos:start="55:54" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:51">

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:14">count1</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:34"><name pos:start="57:18" pos:end="57:25">get_bits</name><argument_list pos:start="57:26" pos:end="57:34">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><operator pos:start="57:27" pos:end="57:27">&amp;</operator><name pos:start="57:28" pos:end="57:29">gb</name></expr></argument>, <argument pos:start="57:32" pos:end="57:33"><expr pos:start="57:32" pos:end="57:33"><literal type="number" pos:start="57:32" pos:end="57:33">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:14">count2</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:25">get_bits</name><argument_list pos:start="59:26" pos:end="59:34">(<argument pos:start="59:27" pos:end="59:29"><expr pos:start="59:27" pos:end="59:29"><operator pos:start="59:27" pos:end="59:27">&amp;</operator><name pos:start="59:28" pos:end="59:29">gb</name></expr></argument>, <argument pos:start="59:32" pos:end="59:33"><expr pos:start="59:32" pos:end="59:33"><literal type="number" pos:start="59:32" pos:end="59:33">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><call pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:27">mp_read_changes_map</name><argument_list pos:start="61:28" pos:end="61:50">(<argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">mp</name></expr></argument>, <argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><operator pos:start="61:33" pos:end="61:33">&amp;</operator><name pos:start="61:34" pos:end="61:35">gb</name></expr></argument>, <argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">count1</name></expr></argument>, <argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><literal type="number" pos:start="61:46" pos:end="61:46">8</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:49"><expr pos:start="61:49" pos:end="61:49"><name pos:start="61:49" pos:end="61:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><call pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:27">mp_read_changes_map</name><argument_list pos:start="63:28" pos:end="63:50">(<argument pos:start="63:29" pos:end="63:30"><expr pos:start="63:29" pos:end="63:30"><name pos:start="63:29" pos:end="63:30">mp</name></expr></argument>, <argument pos:start="63:33" pos:end="63:35"><expr pos:start="63:33" pos:end="63:35"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:35">gb</name></expr></argument>, <argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><name pos:start="63:38" pos:end="63:43">count2</name></expr></argument>, <argument pos:start="63:46" pos:end="63:46"><expr pos:start="63:46" pos:end="63:46"><literal type="number" pos:start="63:46" pos:end="63:46">4</literal></expr></argument>, <argument pos:start="63:49" pos:end="63:49"><expr pos:start="63:49" pos:end="63:49"><name pos:start="63:49" pos:end="63:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="69:5" pos:end="69:39"><expr pos:start="69:5" pos:end="69:38"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:6">mp</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:19">codes_count</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:38"><name pos:start="69:23" pos:end="69:30">get_bits</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:34">gb</name></expr></argument>, <argument pos:start="69:37" pos:end="69:37"><expr pos:start="69:37" pos:end="69:37"><literal type="number" pos:start="69:37" pos:end="69:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="73:17"><if pos:start="71:5" pos:end="73:17">if <condition pos:start="71:8" pos:end="71:29">(<expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:10">mp</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:23">codes_count</name></name> <operator pos:start="71:25" pos:end="71:26">==</operator> <literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:17"><block_content pos:start="73:9" pos:end="73:17">

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">end</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:32">(<expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:10">mp</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:23">changes_map</name><index pos:start="77:24" pos:end="77:26">[<expr pos:start="77:25" pos:end="77:25"><literal type="number" pos:start="77:25" pos:end="77:25">0</literal></expr>]</index></name> <operator pos:start="77:28" pos:end="77:29">==</operator> <literal type="number" pos:start="77:31" pos:end="77:31">0</literal></expr>)</condition> <block pos:start="77:34" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:31">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><operator pos:start="79:9" pos:end="79:9">*</operator><operator pos:start="79:10" pos:end="79:10">(</operator><name pos:start="79:11" pos:end="79:18">uint16_t</name> <operator pos:start="79:20" pos:end="79:20">*</operator><operator pos:start="79:21" pos:end="79:21">)</operator><name pos:start="79:22" pos:end="79:38"><name pos:start="79:22" pos:end="79:23">mp</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:30">frame</name><operator pos:start="79:31" pos:end="79:31">.</operator><name pos:start="79:32" pos:end="79:35">data</name><index pos:start="79:36" pos:end="79:38">[<expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr>]</index></name> <operator pos:start="79:40" pos:end="79:40">=</operator> <call pos:start="79:42" pos:end="79:58"><name pos:start="79:42" pos:end="79:49">get_bits</name><argument_list pos:start="79:50" pos:end="79:58">(<argument pos:start="79:51" pos:end="79:53"><expr pos:start="79:51" pos:end="79:53"><operator pos:start="79:51" pos:end="79:51">&amp;</operator><name pos:start="79:52" pos:end="79:53">gb</name></expr></argument>, <argument pos:start="79:56" pos:end="79:57"><expr pos:start="79:56" pos:end="79:57"><literal type="number" pos:start="79:56" pos:end="79:57">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:10">mp</name><operator pos:start="81:11" pos:end="81:12">-&gt;</operator><name pos:start="81:13" pos:end="81:23">changes_map</name><index pos:start="81:24" pos:end="81:26">[<expr pos:start="81:25" pos:end="81:25"><literal type="number" pos:start="81:25" pos:end="81:25">0</literal></expr>]</index></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <literal type="number" pos:start="81:30" pos:end="81:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><call pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:23">mp_read_codes_table</name><argument_list pos:start="85:24" pos:end="85:32">(<argument pos:start="85:25" pos:end="85:26"><expr pos:start="85:25" pos:end="85:26"><name pos:start="85:25" pos:end="85:26">mp</name></expr></argument>, <argument pos:start="85:29" pos:end="85:31"><expr pos:start="85:29" pos:end="85:31"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:31">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:27"><expr pos:start="89:5" pos:end="89:26"><name pos:start="89:5" pos:end="89:6">sz</name> <operator pos:start="89:8" pos:end="89:8">=</operator> <call pos:start="89:10" pos:end="89:26"><name pos:start="89:10" pos:end="89:17">get_bits</name><argument_list pos:start="89:18" pos:end="89:26">(<argument pos:start="89:19" pos:end="89:21"><expr pos:start="89:19" pos:end="89:21"><operator pos:start="89:19" pos:end="89:19">&amp;</operator><name pos:start="89:20" pos:end="89:21">gb</name></expr></argument>, <argument pos:start="89:24" pos:end="89:25"><expr pos:start="89:24" pos:end="89:25"><literal type="number" pos:start="89:24" pos:end="89:25">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="93:32"><if pos:start="91:5" pos:end="93:32">if <condition pos:start="91:8" pos:end="91:33">(<expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:13">avctx</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:24">extradata</name><index pos:start="91:25" pos:end="91:27">[<expr pos:start="91:26" pos:end="91:26"><literal type="number" pos:start="91:26" pos:end="91:26">0</literal></expr>]</index></name> <operator pos:start="91:29" pos:end="91:30">!=</operator> <literal type="number" pos:start="91:32" pos:end="91:32">5</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:32"><block_content pos:start="93:9" pos:end="93:32">

        <expr_stmt pos:start="93:9" pos:end="93:32"><expr pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:10">sz</name> <operator pos:start="93:12" pos:end="93:13">+=</operator> <call pos:start="93:15" pos:end="93:31"><name pos:start="93:15" pos:end="93:22">get_bits</name><argument_list pos:start="93:23" pos:end="93:31">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><operator pos:start="93:24" pos:end="93:24">&amp;</operator><name pos:start="93:25" pos:end="93:26">gb</name></expr></argument>, <argument pos:start="93:29" pos:end="93:30"><expr pos:start="93:29" pos:end="93:30"><literal type="number" pos:start="93:29" pos:end="93:30">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="97:17"><if pos:start="95:5" pos:end="97:17">if <condition pos:start="95:8" pos:end="95:16">(<expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:10">sz</name> <operator pos:start="95:12" pos:end="95:13">==</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:17"><block_content pos:start="97:9" pos:end="97:17">

        <goto pos:start="97:9" pos:end="97:17">goto <name pos:start="97:14" pos:end="97:16">end</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:145"><expr pos:start="101:5" pos:end="101:144"><call pos:start="101:5" pos:end="101:144"><name pos:start="101:5" pos:end="101:12">init_vlc</name><argument_list pos:start="101:13" pos:end="101:144">(<argument pos:start="101:14" pos:end="101:21"><expr pos:start="101:14" pos:end="101:21"><operator pos:start="101:14" pos:end="101:14">&amp;</operator><name pos:start="101:15" pos:end="101:21"><name pos:start="101:15" pos:end="101:16">mp</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:21">vlc</name></name></expr></argument>, <argument pos:start="101:24" pos:end="101:41"><expr pos:start="101:24" pos:end="101:41"><name pos:start="101:24" pos:end="101:41"><name pos:start="101:24" pos:end="101:25">mp</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:41">max_codes_bits</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:58"><expr pos:start="101:44" pos:end="101:58"><name pos:start="101:44" pos:end="101:58"><name pos:start="101:44" pos:end="101:45">mp</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:58">codes_count</name></name></expr></argument>, <argument pos:start="101:61" pos:end="101:78"><expr pos:start="101:61" pos:end="101:78"><operator pos:start="101:61" pos:end="101:61">&amp;</operator><name pos:start="101:62" pos:end="101:73"><name pos:start="101:62" pos:end="101:63">mp</name><operator pos:start="101:64" pos:end="101:65">-&gt;</operator><name pos:start="101:66" pos:end="101:70">codes</name><index pos:start="101:71" pos:end="101:73">[<expr pos:start="101:72" pos:end="101:72"><literal type="number" pos:start="101:72" pos:end="101:72">0</literal></expr>]</index></name><operator pos:start="101:74" pos:end="101:74">.</operator><name pos:start="101:75" pos:end="101:78">size</name></expr></argument>, <argument pos:start="101:81" pos:end="101:96"><expr pos:start="101:81" pos:end="101:96"><sizeof pos:start="101:81" pos:end="101:96">sizeof<argument_list pos:start="101:87" pos:end="101:96">(<argument pos:start="101:88" pos:end="101:95"><expr pos:start="101:88" pos:end="101:95"><name pos:start="101:88" pos:end="101:95">HuffCode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:99" pos:end="101:99"><expr pos:start="101:99" pos:end="101:99"><literal type="number" pos:start="101:99" pos:end="101:99">1</literal></expr></argument>, <argument pos:start="101:102" pos:end="101:119"><expr pos:start="101:102" pos:end="101:119"><operator pos:start="101:102" pos:end="101:102">&amp;</operator><name pos:start="101:103" pos:end="101:114"><name pos:start="101:103" pos:end="101:104">mp</name><operator pos:start="101:105" pos:end="101:106">-&gt;</operator><name pos:start="101:107" pos:end="101:111">codes</name><index pos:start="101:112" pos:end="101:114">[<expr pos:start="101:113" pos:end="101:113"><literal type="number" pos:start="101:113" pos:end="101:113">0</literal></expr>]</index></name><operator pos:start="101:115" pos:end="101:115">.</operator><name pos:start="101:116" pos:end="101:119">code</name></expr></argument>, <argument pos:start="101:122" pos:end="101:137"><expr pos:start="101:122" pos:end="101:137"><sizeof pos:start="101:122" pos:end="101:137">sizeof<argument_list pos:start="101:128" pos:end="101:137">(<argument pos:start="101:129" pos:end="101:136"><expr pos:start="101:129" pos:end="101:136"><name pos:start="101:129" pos:end="101:136">HuffCode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="101:140" pos:end="101:140"><expr pos:start="101:140" pos:end="101:140"><literal type="number" pos:start="101:140" pos:end="101:140">4</literal></expr></argument>, <argument pos:start="101:143" pos:end="101:143"><expr pos:start="101:143" pos:end="101:143"><literal type="number" pos:start="101:143" pos:end="101:143">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:36"><expr pos:start="103:5" pos:end="103:35"><call pos:start="103:5" pos:end="103:35"><name pos:start="103:5" pos:end="103:26">mp_decode_frame_helper</name><argument_list pos:start="103:27" pos:end="103:35">(<argument pos:start="103:28" pos:end="103:29"><expr pos:start="103:28" pos:end="103:29"><name pos:start="103:28" pos:end="103:29">mp</name></expr></argument>, <argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><operator pos:start="103:32" pos:end="103:32">&amp;</operator><name pos:start="103:33" pos:end="103:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:23"><expr pos:start="105:5" pos:end="105:22"><call pos:start="105:5" pos:end="105:22"><name pos:start="105:5" pos:end="105:12">free_vlc</name><argument_list pos:start="105:13" pos:end="105:22">(<argument pos:start="105:14" pos:end="105:21"><expr pos:start="105:14" pos:end="105:21"><operator pos:start="105:14" pos:end="105:14">&amp;</operator><name pos:start="105:15" pos:end="105:21"><name pos:start="105:15" pos:end="105:16">mp</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:21">vlc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="109:1" pos:end="109:4"><name pos:start="109:1" pos:end="109:3">end</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:33"><expr pos:start="111:5" pos:end="111:32"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:14">data_size</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <sizeof pos:start="111:18" pos:end="111:32">sizeof<argument_list pos:start="111:24" pos:end="111:32">(<argument pos:start="111:25" pos:end="111:31"><expr pos:start="111:25" pos:end="111:31"><name pos:start="111:25" pos:end="111:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:33"><expr pos:start="113:5" pos:end="113:32"><operator pos:start="113:5" pos:end="113:5">*</operator><operator pos:start="113:6" pos:end="113:6">(</operator><name pos:start="113:7" pos:end="113:13">AVFrame</name> <operator pos:start="113:15" pos:end="113:15">*</operator><operator pos:start="113:16" pos:end="113:16">)</operator><name pos:start="113:17" pos:end="113:20">data</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:32"><name pos:start="113:24" pos:end="113:25">mp</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:32">frame</name></name></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:20">return <expr pos:start="115:12" pos:end="115:19"><name pos:start="115:12" pos:end="115:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
