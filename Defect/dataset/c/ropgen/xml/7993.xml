<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7993.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:28">gic_acknowledge_irq</name><parameter_list pos:start="1:29" pos:end="1:50">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">GICState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:49"><decl pos:start="1:43" pos:end="1:49"><type pos:start="1:43" pos:end="1:49"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:49">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:16">irq</name></decl>, <decl pos:start="5:19" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:21">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">cm</name> <init pos:start="7:12" pos:end="7:21">= <expr pos:start="7:14" pos:end="7:21"><literal type="number" pos:start="7:14" pos:end="7:14">1</literal> <operator pos:start="7:16" pos:end="7:17">&lt;&lt;</operator> <name pos:start="7:19" pos:end="7:21">cpu</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:34"><expr pos:start="9:5" pos:end="9:33"><name pos:start="9:5" pos:end="9:7">irq</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <name pos:start="9:11" pos:end="9:33"><name pos:start="9:11" pos:end="9:11">s</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:28">current_pending</name><index pos:start="9:29" pos:end="9:33">[<expr pos:start="9:30" pos:end="9:32"><name pos:start="9:30" pos:end="9:32">cpu</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="13:70">(<expr pos:start="11:9" pos:end="13:69"><name pos:start="11:9" pos:end="11:11">irq</name> <operator pos:start="11:13" pos:end="11:14">==</operator> <literal type="number" pos:start="11:16" pos:end="11:19">1023</literal>

            <operator pos:start="13:13" pos:end="13:14">||</operator> <call pos:start="13:16" pos:end="13:41"><name pos:start="13:16" pos:end="13:31">GIC_GET_PRIORITY</name><argument_list pos:start="13:32" pos:end="13:41">(<argument pos:start="13:33" pos:end="13:35"><expr pos:start="13:33" pos:end="13:35"><name pos:start="13:33" pos:end="13:35">irq</name></expr></argument>, <argument pos:start="13:38" pos:end="13:40"><expr pos:start="13:38" pos:end="13:40"><name pos:start="13:38" pos:end="13:40">cpu</name></expr></argument>)</argument_list></call> <operator pos:start="13:43" pos:end="13:44">&gt;=</operator> <name pos:start="13:46" pos:end="13:69"><name pos:start="13:46" pos:end="13:46">s</name><operator pos:start="13:47" pos:end="13:48">-&gt;</operator><name pos:start="13:49" pos:end="13:64">running_priority</name><index pos:start="13:65" pos:end="13:69">[<expr pos:start="13:66" pos:end="13:68"><name pos:start="13:66" pos:end="13:68">cpu</name></expr>]</index></name></expr>)</condition> <block pos:start="13:72" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:20">

        <expr_stmt pos:start="15:9" pos:end="15:40"><expr pos:start="15:9" pos:end="15:39"><call pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:15">DPRINTF</name><argument_list pos:start="15:16" pos:end="15:39">(<argument pos:start="15:17" pos:end="15:38"><expr pos:start="15:17" pos:end="15:38"><literal type="string" pos:start="15:17" pos:end="15:38">"ACK no pending IRQ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><literal type="number" pos:start="17:16" pos:end="17:19">1023</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:18">last_active</name><index pos:start="21:19" pos:end="21:23">[<expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">irq</name></expr>]</index><index pos:start="21:24" pos:end="21:28">[<expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">cpu</name></expr>]</index></name> <operator pos:start="21:30" pos:end="21:30">=</operator> <name pos:start="21:32" pos:end="21:50"><name pos:start="21:32" pos:end="21:32">s</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:45">running_irq</name><index pos:start="21:46" pos:end="21:50">[<expr pos:start="21:47" pos:end="21:49"><name pos:start="21:47" pos:end="21:49">cpu</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="79:5"><if pos:start="25:5" pos:end="37:5">if <condition pos:start="25:8" pos:end="25:63">(<expr pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:19">revision</name></name> <operator pos:start="25:21" pos:end="25:22">==</operator> <name pos:start="25:24" pos:end="25:35">REV_11MPCORE</name> <operator pos:start="25:37" pos:end="25:38">||</operator> <name pos:start="25:40" pos:end="25:50"><name pos:start="25:40" pos:end="25:40">s</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:50">revision</name></name> <operator pos:start="25:52" pos:end="25:53">==</operator> <name pos:start="25:55" pos:end="25:62">REV_NVIC</name></expr>)</condition> <block pos:start="25:65" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <comment type="block" pos:start="27:9" pos:end="31:11">/* Clear pending flags for both level and edge triggered interrupts.

         * Level triggered IRQs will be reasserted once they become inactive.

         */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:72"><expr pos:start="33:9" pos:end="33:71"><call pos:start="33:9" pos:end="33:71"><name pos:start="33:9" pos:end="33:25">GIC_CLEAR_PENDING</name><argument_list pos:start="33:26" pos:end="33:71">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">irq</name></expr></argument>, <argument pos:start="33:32" pos:end="33:70"><expr pos:start="33:32" pos:end="33:70"><ternary pos:start="33:32" pos:end="33:70"><condition pos:start="33:32" pos:end="33:52"><expr pos:start="33:32" pos:end="33:50"><call pos:start="33:32" pos:end="33:50"><name pos:start="33:32" pos:end="33:45">GIC_TEST_MODEL</name><argument_list pos:start="33:46" pos:end="33:50">(<argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><name pos:start="33:47" pos:end="33:49">irq</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="33:54" pos:end="33:65"> <expr pos:start="33:54" pos:end="33:65"><name pos:start="33:54" pos:end="33:65">ALL_CPU_MASK</name></expr> </then><else pos:start="33:67" pos:end="33:70">: <expr pos:start="33:69" pos:end="33:70"><name pos:start="33:69" pos:end="33:70">cm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:17">irq</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="79:5">else <block pos:start="37:12" pos:end="79:5">{<block_content pos:start="39:9" pos:end="77:9">

        <if_stmt pos:start="39:9" pos:end="77:9"><if pos:start="39:9" pos:end="63:9">if <condition pos:start="39:12" pos:end="39:30">(<expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:15">irq</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <name pos:start="39:19" pos:end="39:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="39:32" pos:end="63:9">{<block_content pos:start="49:13" pos:end="61:44">

            <comment type="block" pos:start="41:13" pos:end="47:15">/* Lookup the source CPU for the SGI and clear this in the

             * sgi_pending map.  Return the src and clear the overall pending

             * state on this CPU if the SGI is not pending from any CPUs.

             */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:50"><expr pos:start="49:13" pos:end="49:49"><call pos:start="49:13" pos:end="49:49"><name pos:start="49:13" pos:end="49:18">assert</name><argument_list pos:start="49:19" pos:end="49:49">(<argument pos:start="49:20" pos:end="49:48"><expr pos:start="49:20" pos:end="49:48"><name pos:start="49:20" pos:end="49:43"><name pos:start="49:20" pos:end="49:20">s</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:33">sgi_pending</name><index pos:start="49:34" pos:end="49:38">[<expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">irq</name></expr>]</index><index pos:start="49:39" pos:end="49:43">[<expr pos:start="49:40" pos:end="49:42"><name pos:start="49:40" pos:end="49:42">cpu</name></expr>]</index></name> <operator pos:start="49:45" pos:end="49:46">!=</operator> <literal type="number" pos:start="49:48" pos:end="49:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><name pos:start="51:13" pos:end="51:15">src</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:49"><name pos:start="51:19" pos:end="51:23">ctz32</name><argument_list pos:start="51:24" pos:end="51:49">(<argument pos:start="51:25" pos:end="51:48"><expr pos:start="51:25" pos:end="51:48"><name pos:start="51:25" pos:end="51:48"><name pos:start="51:25" pos:end="51:25">s</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:38">sgi_pending</name><index pos:start="51:39" pos:end="51:43">[<expr pos:start="51:40" pos:end="51:42"><name pos:start="51:40" pos:end="51:42">irq</name></expr>]</index><index pos:start="51:44" pos:end="51:48">[<expr pos:start="51:45" pos:end="51:47"><name pos:start="51:45" pos:end="51:47">cpu</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:52"><expr pos:start="53:13" pos:end="53:51"><name pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:26">sgi_pending</name><index pos:start="53:27" pos:end="53:31">[<expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">irq</name></expr>]</index><index pos:start="53:32" pos:end="53:36">[<expr pos:start="53:33" pos:end="53:35"><name pos:start="53:33" pos:end="53:35">cpu</name></expr>]</index></name> <operator pos:start="53:38" pos:end="53:39">&amp;=</operator> <operator pos:start="53:41" pos:end="53:41">~</operator><operator pos:start="53:42" pos:end="53:42">(</operator><literal type="number" pos:start="53:43" pos:end="53:43">1</literal> <operator pos:start="53:45" pos:end="53:46">&lt;&lt;</operator> <name pos:start="53:48" pos:end="53:50">src</name><operator pos:start="53:51" pos:end="53:51">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="59:13"><if pos:start="55:13" pos:end="59:13">if <condition pos:start="55:16" pos:end="55:46">(<expr pos:start="55:17" pos:end="55:45"><name pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:30">sgi_pending</name><index pos:start="55:31" pos:end="55:35">[<expr pos:start="55:32" pos:end="55:34"><name pos:start="55:32" pos:end="55:34">irq</name></expr>]</index><index pos:start="55:36" pos:end="55:40">[<expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:39">cpu</name></expr>]</index></name> <operator pos:start="55:42" pos:end="55:43">==</operator> <literal type="number" pos:start="55:45" pos:end="55:45">0</literal></expr>)</condition> <block pos:start="55:48" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:80">

                <expr_stmt pos:start="57:17" pos:end="57:80"><expr pos:start="57:17" pos:end="57:79"><call pos:start="57:17" pos:end="57:79"><name pos:start="57:17" pos:end="57:33">GIC_CLEAR_PENDING</name><argument_list pos:start="57:34" pos:end="57:79">(<argument pos:start="57:35" pos:end="57:37"><expr pos:start="57:35" pos:end="57:37"><name pos:start="57:35" pos:end="57:37">irq</name></expr></argument>, <argument pos:start="57:40" pos:end="57:78"><expr pos:start="57:40" pos:end="57:78"><ternary pos:start="57:40" pos:end="57:78"><condition pos:start="57:40" pos:end="57:60"><expr pos:start="57:40" pos:end="57:58"><call pos:start="57:40" pos:end="57:58"><name pos:start="57:40" pos:end="57:53">GIC_TEST_MODEL</name><argument_list pos:start="57:54" pos:end="57:58">(<argument pos:start="57:55" pos:end="57:57"><expr pos:start="57:55" pos:end="57:57"><name pos:start="57:55" pos:end="57:57">irq</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="57:62" pos:end="57:73"> <expr pos:start="57:62" pos:end="57:73"><name pos:start="57:62" pos:end="57:73">ALL_CPU_MASK</name></expr> </then><else pos:start="57:75" pos:end="57:78">: <expr pos:start="57:77" pos:end="57:78"><name pos:start="57:77" pos:end="57:78">cm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:21">irq</name> <operator pos:start="61:23" pos:end="61:23">|</operator> <operator pos:start="61:25" pos:end="61:25">(</operator><operator pos:start="61:26" pos:end="61:26">(</operator><name pos:start="61:27" pos:end="61:29">src</name> <operator pos:start="61:31" pos:end="61:31">&amp;</operator> <literal type="number" pos:start="61:33" pos:end="61:35">0x7</literal><operator pos:start="61:36" pos:end="61:36">)</operator> <operator pos:start="61:38" pos:end="61:39">&lt;&lt;</operator> <literal type="number" pos:start="61:41" pos:end="61:42">10</literal><operator pos:start="61:43" pos:end="61:43">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="77:9">else <block pos:start="63:16" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:22">

            <comment type="block" pos:start="65:13" pos:end="71:15">/* Clear pending state for both level and edge triggered

             * interrupts. (level triggered interrupts with an active line

             * remain pending, see gic_test_pending)

             */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:76"><expr pos:start="73:13" pos:end="73:75"><call pos:start="73:13" pos:end="73:75"><name pos:start="73:13" pos:end="73:29">GIC_CLEAR_PENDING</name><argument_list pos:start="73:30" pos:end="73:75">(<argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">irq</name></expr></argument>, <argument pos:start="73:36" pos:end="73:74"><expr pos:start="73:36" pos:end="73:74"><ternary pos:start="73:36" pos:end="73:74"><condition pos:start="73:36" pos:end="73:56"><expr pos:start="73:36" pos:end="73:54"><call pos:start="73:36" pos:end="73:54"><name pos:start="73:36" pos:end="73:49">GIC_TEST_MODEL</name><argument_list pos:start="73:50" pos:end="73:54">(<argument pos:start="73:51" pos:end="73:53"><expr pos:start="73:51" pos:end="73:53"><name pos:start="73:51" pos:end="73:53">irq</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="73:58" pos:end="73:69"> <expr pos:start="73:58" pos:end="73:69"><name pos:start="73:58" pos:end="73:69">ALL_CPU_MASK</name></expr> </then><else pos:start="73:71" pos:end="73:74">: <expr pos:start="73:73" pos:end="73:74"><name pos:start="73:73" pos:end="73:74">cm</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:22"><expr pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:21">irq</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><call pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:23">gic_set_running_irq</name><argument_list pos:start="83:24" pos:end="83:36">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">s</name></expr></argument>, <argument pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">cpu</name></expr></argument>, <argument pos:start="83:33" pos:end="83:35"><expr pos:start="83:33" pos:end="83:35"><name pos:start="83:33" pos:end="83:35">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:29"><expr pos:start="85:5" pos:end="85:28"><call pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:11">DPRINTF</name><argument_list pos:start="85:12" pos:end="85:28">(<argument pos:start="85:13" pos:end="85:22"><expr pos:start="85:13" pos:end="85:22"><literal type="string" pos:start="85:13" pos:end="85:22">"ACK %d\n"</literal></expr></argument>, <argument pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:27">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
