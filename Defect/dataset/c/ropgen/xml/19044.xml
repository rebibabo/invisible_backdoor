<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19044.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">framebuffer_update_display</name><parameter_list pos:start="1:32" pos:end="25:36">(

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:18">DisplaySurface</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:22">ds</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:36"><name pos:start="5:5" pos:end="5:23">MemoryRegionSection</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:36">mem_section</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">cols</name></decl></parameter>, <comment type="block" pos:start="7:15" pos:end="7:37">/* Width in pixels.  */</comment>

    <parameter pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">rows</name></decl></parameter>, <comment type="block" pos:start="9:15" pos:end="9:38">/* Height in pixels.  */</comment>

    <parameter pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">src_width</name></decl></parameter>, <comment type="block" pos:start="11:20" pos:end="11:58">/* Length of source line, in bytes.  */</comment>

    <parameter pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:22">dest_row_pitch</name></decl></parameter>, <comment type="block" pos:start="13:25" pos:end="13:79">/* Bytes between adjacent horizontal output pixels.  */</comment>

    <parameter pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:22">dest_col_pitch</name></decl></parameter>, <comment type="block" pos:start="15:25" pos:end="15:77">/* Bytes between adjacent vertical output pixels.  */</comment>

    <parameter pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">invalidate</name></decl></parameter>, <comment type="block" pos:start="17:21" pos:end="17:61">/* nonzero to redraw the whole image.  */</comment>

    <parameter pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:10">drawfn</name></type> <name pos:start="19:12" pos:end="19:13">fn</name></decl></parameter>,

    <parameter pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:16">opaque</name></decl></parameter>,

    <parameter pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:7">int</name> <modifier pos:start="23:9" pos:end="23:9">*</modifier></type><name pos:start="23:10" pos:end="23:18">first_row</name></decl></parameter>, <comment type="block" pos:start="23:21" pos:end="23:44">/* Input and output.  */</comment>

    <parameter pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:7">int</name> <modifier pos:start="25:9" pos:end="25:9">*</modifier></type><name pos:start="25:10" pos:end="25:17">last_row</name></decl></parameter> <comment type="block" pos:start="25:19" pos:end="25:35">/* Output only */</comment>)</parameter_list>

<block pos:start="27:1" pos:end="139:1">{<block_content pos:start="29:5" pos:end="137:21">

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:10">hwaddr</name></type> <name pos:start="29:12" pos:end="29:18">src_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:18"><decl pos:start="31:5" pos:end="31:17"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">uint8_t</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:17">dest</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">uint8_t</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:16">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:13"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:13">first</name></decl>, <decl pos:start="35:16" pos:end="35:23"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:16" pos:end="35:19">last</name> <init pos:start="35:21" pos:end="35:23">= <expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">dirty</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:14">ram_addr_t</name></type> <name pos:start="41:16" pos:end="41:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:21">mem</name></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:19"><expr pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:5">i</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <operator pos:start="47:9" pos:end="47:9">*</operator><name pos:start="47:10" pos:end="47:18">first_row</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:14">first_row</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <operator pos:start="49:18" pos:end="49:18">-</operator><literal type="number" pos:start="49:19" pos:end="49:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:11">src_len</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <name pos:start="51:15" pos:end="51:23">src_width</name> <operator pos:start="51:25" pos:end="51:25">*</operator> <name pos:start="51:27" pos:end="51:30">rows</name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:26"><expr pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:7">mem</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <name pos:start="55:11" pos:end="55:25"><name pos:start="55:11" pos:end="55:21">mem_section</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:25">mr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:13">(<expr pos:start="57:9" pos:end="57:12"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:12">mem</name></expr>)</condition> <block pos:start="57:15" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:15">

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:41"><expr pos:start="63:5" pos:end="63:40"><call pos:start="63:5" pos:end="63:40"><name pos:start="63:5" pos:end="63:35">memory_region_sync_dirty_bitmap</name><argument_list pos:start="63:36" pos:end="63:40">(<argument pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:39">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:8">addr</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:44"><name pos:start="67:12" pos:end="67:22">mem_section</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:44">offset_within_region</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:7">src</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:40"><name pos:start="69:11" pos:end="69:35">memory_region_get_ram_ptr</name><argument_list pos:start="69:36" pos:end="69:40">(<argument pos:start="69:37" pos:end="69:39"><expr pos:start="69:37" pos:end="69:39"><name pos:start="69:37" pos:end="69:39">mem</name></expr></argument>)</argument_list></call> <operator pos:start="69:42" pos:end="69:42">+</operator> <name pos:start="69:44" pos:end="69:47">addr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:8">dest</name> <operator pos:start="73:10" pos:end="73:10">=</operator> <call pos:start="73:12" pos:end="73:27"><name pos:start="73:12" pos:end="73:23">surface_data</name><argument_list pos:start="73:24" pos:end="73:27">(<argument pos:start="73:25" pos:end="73:26"><expr pos:start="73:25" pos:end="73:26"><name pos:start="73:25" pos:end="73:26">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:27">(<expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:22">dest_col_pitch</name> <operator pos:start="75:24" pos:end="75:24">&lt;</operator> <literal type="number" pos:start="75:26" pos:end="75:26">0</literal></expr>)</condition> <block pos:start="75:29" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:44">

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:12">dest</name> <operator pos:start="77:14" pos:end="77:15">-=</operator> <name pos:start="77:17" pos:end="77:30">dest_col_pitch</name> <operator pos:start="77:32" pos:end="77:32">*</operator> <operator pos:start="77:34" pos:end="77:34">(</operator><name pos:start="77:35" pos:end="77:38">cols</name> <operator pos:start="77:40" pos:end="77:40">-</operator> <literal type="number" pos:start="77:42" pos:end="77:42">1</literal><operator pos:start="77:43" pos:end="77:43">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:27">(<expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:22">dest_row_pitch</name> <operator pos:start="81:24" pos:end="81:24">&lt;</operator> <literal type="number" pos:start="81:26" pos:end="81:26">0</literal></expr>)</condition> <block pos:start="81:29" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:44">

        <expr_stmt pos:start="83:9" pos:end="83:44"><expr pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:12">dest</name> <operator pos:start="83:14" pos:end="83:15">-=</operator> <name pos:start="83:17" pos:end="83:30">dest_row_pitch</name> <operator pos:start="83:32" pos:end="83:32">*</operator> <operator pos:start="83:34" pos:end="83:34">(</operator><name pos:start="83:35" pos:end="83:38">rows</name> <operator pos:start="83:40" pos:end="83:40">-</operator> <literal type="number" pos:start="83:42" pos:end="83:42">1</literal><operator pos:start="83:43" pos:end="83:43">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:15"><expr pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:9">first</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <operator pos:start="87:13" pos:end="87:13">-</operator><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:26"><expr pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:8">addr</name> <operator pos:start="91:10" pos:end="91:11">+=</operator> <name pos:start="91:13" pos:end="91:13">i</name> <operator pos:start="91:15" pos:end="91:15">*</operator> <name pos:start="91:17" pos:end="91:25">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:25"><expr pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:7">src</name> <operator pos:start="93:9" pos:end="93:10">+=</operator> <name pos:start="93:12" pos:end="93:12">i</name> <operator pos:start="93:14" pos:end="93:14">*</operator> <name pos:start="93:16" pos:end="93:24">src_width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:31"><expr pos:start="95:5" pos:end="95:30"><name pos:start="95:5" pos:end="95:8">dest</name> <operator pos:start="95:10" pos:end="95:11">+=</operator> <name pos:start="95:13" pos:end="95:13">i</name> <operator pos:start="95:15" pos:end="95:15">*</operator> <name pos:start="95:17" pos:end="95:30">dest_row_pitch</name></expr>;</expr_stmt>



    <for pos:start="99:5" pos:end="123:5">for <control pos:start="99:9" pos:end="99:25">(<init pos:start="99:10" pos:end="99:10">;</init> <condition pos:start="99:12" pos:end="99:20"><expr pos:start="99:12" pos:end="99:19"><name pos:start="99:12" pos:end="99:12">i</name> <operator pos:start="99:14" pos:end="99:14">&lt;</operator> <name pos:start="99:16" pos:end="99:19">rows</name></expr>;</condition> <incr pos:start="99:22" pos:end="99:24"><expr pos:start="99:22" pos:end="99:24"><name pos:start="99:22" pos:end="99:22">i</name><operator pos:start="99:23" pos:end="99:24">++</operator></expr></incr>)</control> <block pos:start="99:27" pos:end="123:5">{<block_content pos:start="101:9" pos:end="121:31">

        <expr_stmt pos:start="101:9" pos:end="103:63"><expr pos:start="101:9" pos:end="103:62"><name pos:start="101:9" pos:end="101:13">dirty</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="103:62"><name pos:start="101:17" pos:end="101:39">memory_region_get_dirty</name><argument_list pos:start="101:40" pos:end="103:62">(<argument pos:start="101:41" pos:end="101:43"><expr pos:start="101:41" pos:end="101:43"><name pos:start="101:41" pos:end="101:43">mem</name></expr></argument>, <argument pos:start="101:46" pos:end="101:49"><expr pos:start="101:46" pos:end="101:49"><name pos:start="101:46" pos:end="101:49">addr</name></expr></argument>, <argument pos:start="101:52" pos:end="101:60"><expr pos:start="101:52" pos:end="101:60"><name pos:start="101:52" pos:end="101:60">src_width</name></expr></argument>,

                                             <argument pos:start="103:46" pos:end="103:61"><expr pos:start="103:46" pos:end="103:61"><name pos:start="103:46" pos:end="103:61">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:32">(<expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:17">dirty</name> <operator pos:start="105:19" pos:end="105:20">||</operator> <name pos:start="105:22" pos:end="105:31">invalidate</name></expr>)</condition> <block pos:start="105:34" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:21">

            <expr_stmt pos:start="107:13" pos:end="107:56"><expr pos:start="107:13" pos:end="107:55"><call pos:start="107:13" pos:end="107:55"><name pos:start="107:13" pos:end="107:14">fn</name><argument_list pos:start="107:15" pos:end="107:55">(<argument pos:start="107:16" pos:end="107:21"><expr pos:start="107:16" pos:end="107:21"><name pos:start="107:16" pos:end="107:21">opaque</name></expr></argument>, <argument pos:start="107:24" pos:end="107:27"><expr pos:start="107:24" pos:end="107:27"><name pos:start="107:24" pos:end="107:27">dest</name></expr></argument>, <argument pos:start="107:30" pos:end="107:32"><expr pos:start="107:30" pos:end="107:32"><name pos:start="107:30" pos:end="107:32">src</name></expr></argument>, <argument pos:start="107:35" pos:end="107:38"><expr pos:start="107:35" pos:end="107:38"><name pos:start="107:35" pos:end="107:38">cols</name></expr></argument>, <argument pos:start="107:41" pos:end="107:54"><expr pos:start="107:41" pos:end="107:54"><name pos:start="107:41" pos:end="107:54">dest_col_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="111:26"><if pos:start="109:13" pos:end="111:26">if <condition pos:start="109:16" pos:end="109:28">(<expr pos:start="109:17" pos:end="109:27"><name pos:start="109:17" pos:end="109:21">first</name> <operator pos:start="109:23" pos:end="109:24">==</operator> <operator pos:start="109:26" pos:end="109:26">-</operator><literal type="number" pos:start="109:27" pos:end="109:27">1</literal></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:26"><block_content pos:start="111:17" pos:end="111:26">

                <expr_stmt pos:start="111:17" pos:end="111:26"><expr pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:21">first</name> <operator pos:start="111:23" pos:end="111:23">=</operator> <name pos:start="111:25" pos:end="111:25">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:21"><expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:16">last</name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:20">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:12">addr</name> <operator pos:start="117:14" pos:end="117:15">+=</operator> <name pos:start="117:17" pos:end="117:25">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:11">src</name> <operator pos:start="119:13" pos:end="119:14">+=</operator> <name pos:start="119:16" pos:end="119:24">src_width</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:12">dest</name> <operator pos:start="121:14" pos:end="121:15">+=</operator> <name pos:start="121:17" pos:end="121:30">dest_row_pitch</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:18">(<expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:13">first</name> <operator pos:start="125:15" pos:end="125:15">&lt;</operator> <literal type="number" pos:start="125:17" pos:end="125:17">0</literal></expr>)</condition> <block pos:start="125:20" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:15">

        <return pos:start="127:9" pos:end="127:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="133:48"><expr pos:start="131:5" pos:end="133:47"><call pos:start="131:5" pos:end="133:47"><name pos:start="131:5" pos:end="131:29">memory_region_reset_dirty</name><argument_list pos:start="131:30" pos:end="133:47">(<argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">mem</name></expr></argument>, <argument pos:start="131:36" pos:end="131:68"><expr pos:start="131:36" pos:end="131:68"><name pos:start="131:36" pos:end="131:68"><name pos:start="131:36" pos:end="131:46">mem_section</name><operator pos:start="131:47" pos:end="131:48">-&gt;</operator><name pos:start="131:49" pos:end="131:68">offset_within_region</name></name></expr></argument>, <argument pos:start="131:71" pos:end="131:77"><expr pos:start="131:71" pos:end="131:77"><name pos:start="131:71" pos:end="131:77">src_len</name></expr></argument>,

                              <argument pos:start="133:31" pos:end="133:46"><expr pos:start="133:31" pos:end="133:46"><name pos:start="133:31" pos:end="133:46">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><operator pos:start="135:5" pos:end="135:5">*</operator><name pos:start="135:6" pos:end="135:14">first_row</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <name pos:start="135:18" pos:end="135:22">first</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:21"><expr pos:start="137:5" pos:end="137:20"><operator pos:start="137:5" pos:end="137:5">*</operator><name pos:start="137:6" pos:end="137:13">last_row</name> <operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:20">last</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
