<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17759.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_mpeg1_find_frame_end</name><parameter_list pos:start="1:28" pos:end="1:104">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:40">ParseContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">pc</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:59">uint8_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">buf</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:78"><decl pos:start="1:67" pos:end="1:78"><type pos:start="1:67" pos:end="1:78"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:78">buf_size</name></decl></parameter>, <parameter pos:start="1:81" pos:end="1:103"><decl pos:start="1:81" pos:end="1:103"><type pos:start="1:81" pos:end="1:103"><name pos:start="1:81" pos:end="1:100">AVCodecParserContext</name> <modifier pos:start="1:102" pos:end="1:102">*</modifier></type><name pos:start="1:103" pos:end="1:103">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:25">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">state</name> <init pos:start="7:20" pos:end="7:30">= <expr pos:start="7:22" pos:end="7:30"><name pos:start="7:22" pos:end="7:30"><name pos:start="7:22" pos:end="7:23">pc</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:30">state</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:40">/* EOF considered as end of frame */</comment>

    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:16">buf_size</name> <operator pos:start="13:18" pos:end="13:19">==</operator> <literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



<comment type="block" pos:start="19:1" pos:end="31:2">/*

 0  frame start         -&gt; 1/4

 1  first_SEQEXT        -&gt; 0/2

 2  first field start   -&gt; 3/0

 3  second_SEQEXT       -&gt; 2/0

 4  searching end

*/</comment>



    <for pos:start="35:5" pos:end="111:5">for <control pos:start="35:9" pos:end="35:34">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:29"><expr pos:start="35:17" pos:end="35:28"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:28">buf_size</name></expr>;</condition> <incr pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:31">i</name><operator pos:start="35:32" pos:end="35:33">++</operator></expr></incr>)</control> <block pos:start="35:36" pos:end="111:5">{<block_content pos:start="37:9" pos:end="109:9">

        <expr_stmt pos:start="37:9" pos:end="37:77"><expr pos:start="37:9" pos:end="37:76"><call pos:start="37:9" pos:end="37:76"><name pos:start="37:9" pos:end="37:18">av_assert1</name><argument_list pos:start="37:19" pos:end="37:76">(<argument pos:start="37:20" pos:end="37:75"><expr pos:start="37:20" pos:end="37:75"><name pos:start="37:20" pos:end="37:40"><name pos:start="37:20" pos:end="37:21">pc</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:40">frame_start_found</name></name> <operator pos:start="37:42" pos:end="37:43">&gt;=</operator> <literal type="number" pos:start="37:45" pos:end="37:45">0</literal> <operator pos:start="37:47" pos:end="37:48">&amp;&amp;</operator> <name pos:start="37:50" pos:end="37:70"><name pos:start="37:50" pos:end="37:51">pc</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:70">frame_start_found</name></name> <operator pos:start="37:72" pos:end="37:73">&lt;=</operator> <literal type="number" pos:start="37:75" pos:end="37:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="109:9"><if pos:start="39:9" pos:end="59:9">if <condition pos:start="39:12" pos:end="39:38">(<expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:14">pc</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:33">frame_start_found</name></name> <operator pos:start="39:35" pos:end="39:35">&amp;</operator> <literal type="number" pos:start="39:37" pos:end="39:37">1</literal></expr>)</condition> <block pos:start="39:40" pos:end="59:9">{<block_content pos:start="41:13" pos:end="57:20">

            <if_stmt pos:start="41:13" pos:end="55:13"><if pos:start="41:13" pos:end="43:40">if <condition pos:start="41:16" pos:end="41:67">(<expr pos:start="41:17" pos:end="41:66"><name pos:start="41:17" pos:end="41:21">state</name> <operator pos:start="41:23" pos:end="41:24">==</operator> <name pos:start="41:26" pos:end="41:39">EXT_START_CODE</name> <operator pos:start="41:41" pos:end="41:42">&amp;&amp;</operator> <operator pos:start="41:44" pos:end="41:44">(</operator><name pos:start="41:45" pos:end="41:50"><name pos:start="41:45" pos:end="41:47">buf</name><index pos:start="41:48" pos:end="41:50">[<expr pos:start="41:49" pos:end="41:49"><name pos:start="41:49" pos:end="41:49">i</name></expr>]</index></name> <operator pos:start="41:52" pos:end="41:52">&amp;</operator> <literal type="number" pos:start="41:54" pos:end="41:57">0xF0</literal><operator pos:start="41:58" pos:end="41:58">)</operator> <operator pos:start="41:60" pos:end="41:61">!=</operator> <literal type="number" pos:start="41:63" pos:end="41:66">0x80</literal></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:40"><block_content pos:start="43:17" pos:end="43:40">

                <expr_stmt pos:start="43:17" pos:end="43:40"><expr pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:18">pc</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:37">frame_start_found</name></name><operator pos:start="43:38" pos:end="43:39">--</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="45:13" pos:end="55:13">else if <condition pos:start="45:21" pos:end="45:49">(<expr pos:start="45:22" pos:end="45:48"><name pos:start="45:22" pos:end="45:26">state</name> <operator pos:start="45:28" pos:end="45:29">==</operator> <name pos:start="45:31" pos:end="45:44">EXT_START_CODE</name> <operator pos:start="45:46" pos:end="45:46">+</operator> <literal type="number" pos:start="45:48" pos:end="45:48">2</literal></expr>)</condition> <block pos:start="45:51" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:76">

                <if_stmt pos:start="47:17" pos:end="53:76"><if pos:start="47:17" pos:end="49:46">if <condition pos:start="47:20" pos:end="47:38">(<expr pos:start="47:21" pos:end="47:37"><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:27"><name pos:start="47:22" pos:end="47:24">buf</name><index pos:start="47:25" pos:end="47:27">[<expr pos:start="47:26" pos:end="47:26"><name pos:start="47:26" pos:end="47:26">i</name></expr>]</index></name> <operator pos:start="47:29" pos:end="47:29">&amp;</operator> <literal type="number" pos:start="47:31" pos:end="47:31">3</literal><operator pos:start="47:32" pos:end="47:32">)</operator> <operator pos:start="47:34" pos:end="47:35">==</operator> <literal type="number" pos:start="47:37" pos:end="47:37">3</literal></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:46"><block_content pos:start="49:21" pos:end="49:46">

                    <expr_stmt pos:start="49:21" pos:end="49:46"><expr pos:start="49:21" pos:end="49:45"><name pos:start="49:21" pos:end="49:41"><name pos:start="49:21" pos:end="49:22">pc</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:41">frame_start_found</name></name> <operator pos:start="49:43" pos:end="49:43">=</operator> <literal type="number" pos:start="49:45" pos:end="49:45">0</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="51:17" pos:end="53:76">else<block type="pseudo" pos:start="53:21" pos:end="53:76"><block_content pos:start="53:21" pos:end="53:76">

                    <expr_stmt pos:start="53:21" pos:end="53:76"><expr pos:start="53:21" pos:end="53:75"><name pos:start="53:21" pos:end="53:41"><name pos:start="53:21" pos:end="53:22">pc</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:41">frame_start_found</name></name> <operator pos:start="53:43" pos:end="53:43">=</operator> <operator pos:start="53:45" pos:end="53:45">(</operator><name pos:start="53:46" pos:end="53:66"><name pos:start="53:46" pos:end="53:47">pc</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:66">frame_start_found</name></name> <operator pos:start="53:68" pos:end="53:68">+</operator> <literal type="number" pos:start="53:70" pos:end="53:70">1</literal><operator pos:start="53:71" pos:end="53:71">)</operator> <operator pos:start="53:73" pos:end="53:73">&amp;</operator> <literal type="number" pos:start="53:75" pos:end="53:75">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:17">state</name><operator pos:start="57:18" pos:end="57:19">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="109:9">else <block pos:start="59:16" pos:end="109:9">{<block_content pos:start="61:13" pos:end="107:13">

            <expr_stmt pos:start="61:13" pos:end="61:82"><expr pos:start="61:13" pos:end="61:81"><name pos:start="61:13" pos:end="61:13">i</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:71"><name pos:start="61:17" pos:end="61:38">avpriv_find_start_code</name><argument_list pos:start="61:39" pos:end="61:71">(<argument pos:start="61:40" pos:end="61:46"><expr pos:start="61:40" pos:end="61:46"><name pos:start="61:40" pos:end="61:42">buf</name> <operator pos:start="61:44" pos:end="61:44">+</operator> <name pos:start="61:46" pos:end="61:46">i</name></expr></argument>, <argument pos:start="61:49" pos:end="61:62"><expr pos:start="61:49" pos:end="61:62"><name pos:start="61:49" pos:end="61:51">buf</name> <operator pos:start="61:53" pos:end="61:53">+</operator> <name pos:start="61:55" pos:end="61:62">buf_size</name></expr></argument>, <argument pos:start="61:65" pos:end="61:70"><expr pos:start="61:65" pos:end="61:70"><operator pos:start="61:65" pos:end="61:65">&amp;</operator><name pos:start="61:66" pos:end="61:70">state</name></expr></argument>)</argument_list></call> <operator pos:start="61:73" pos:end="61:73">-</operator> <name pos:start="61:75" pos:end="61:77">buf</name> <operator pos:start="61:79" pos:end="61:79">-</operator> <literal type="number" pos:start="61:81" pos:end="61:81">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:109">(<expr pos:start="63:17" pos:end="63:108"><name pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:18">pc</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:37">frame_start_found</name></name> <operator pos:start="63:39" pos:end="63:40">==</operator> <literal type="number" pos:start="63:42" pos:end="63:42">0</literal> <operator pos:start="63:44" pos:end="63:45">&amp;&amp;</operator> <name pos:start="63:47" pos:end="63:51">state</name> <operator pos:start="63:53" pos:end="63:54">&gt;=</operator> <name pos:start="63:56" pos:end="63:75">SLICE_MIN_START_CODE</name> <operator pos:start="63:77" pos:end="63:78">&amp;&amp;</operator> <name pos:start="63:80" pos:end="63:84">state</name> <operator pos:start="63:86" pos:end="63:87">&lt;=</operator> <name pos:start="63:89" pos:end="63:108">SLICE_MAX_START_CODE</name></expr>)</condition> <block pos:start="63:111" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:42">

                <expr_stmt pos:start="65:17" pos:end="65:20"><expr pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:17">i</name><operator pos:start="65:18" pos:end="65:19">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:42"><expr pos:start="67:17" pos:end="67:41"><name pos:start="67:17" pos:end="67:37"><name pos:start="67:17" pos:end="67:18">pc</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:37">frame_start_found</name></name> <operator pos:start="67:39" pos:end="67:39">=</operator> <literal type="number" pos:start="67:41" pos:end="67:41">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="71:13" pos:end="79:13"><if pos:start="71:13" pos:end="79:13">if <condition pos:start="71:16" pos:end="71:38">(<expr pos:start="71:17" pos:end="71:37"><name pos:start="71:17" pos:end="71:21">state</name> <operator pos:start="71:23" pos:end="71:24">==</operator> <name pos:start="71:26" pos:end="71:37">SEQ_END_CODE</name></expr>)</condition> <block pos:start="71:40" pos:end="79:13">{<block_content pos:start="73:17" pos:end="77:27">

                <expr_stmt pos:start="73:17" pos:end="73:42"><expr pos:start="73:17" pos:end="73:41"><name pos:start="73:17" pos:end="73:37"><name pos:start="73:17" pos:end="73:18">pc</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:37">frame_start_found</name></name> <operator pos:start="73:39" pos:end="73:39">=</operator> <literal type="number" pos:start="73:41" pos:end="73:41">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:29"><expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:18">pc</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:25">state</name></name><operator pos:start="75:26" pos:end="75:26">=</operator><operator pos:start="75:27" pos:end="75:27">-</operator><literal type="number" pos:start="75:28" pos:end="75:28">1</literal></expr>;</expr_stmt>

                <return pos:start="77:17" pos:end="77:27">return <expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:24">i</name><operator pos:start="77:25" pos:end="77:25">+</operator><literal type="number" pos:start="77:26" pos:end="77:26">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="81:13" pos:end="83:42"><if pos:start="81:13" pos:end="83:42">if <condition pos:start="81:16" pos:end="81:70">(<expr pos:start="81:17" pos:end="81:69"><name pos:start="81:17" pos:end="81:37"><name pos:start="81:17" pos:end="81:18">pc</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:37">frame_start_found</name></name> <operator pos:start="81:39" pos:end="81:40">==</operator> <literal type="number" pos:start="81:42" pos:end="81:42">2</literal> <operator pos:start="81:44" pos:end="81:45">&amp;&amp;</operator> <name pos:start="81:47" pos:end="81:51">state</name> <operator pos:start="81:53" pos:end="81:54">==</operator> <name pos:start="81:56" pos:end="81:69">SEQ_START_CODE</name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:42"><block_content pos:start="83:17" pos:end="83:42">

                <expr_stmt pos:start="83:17" pos:end="83:42"><expr pos:start="83:17" pos:end="83:41"><name pos:start="83:17" pos:end="83:37"><name pos:start="83:17" pos:end="83:18">pc</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:37">frame_start_found</name></name> <operator pos:start="83:39" pos:end="83:39">=</operator> <literal type="number" pos:start="83:41" pos:end="83:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="87:40"><if pos:start="85:13" pos:end="87:40">if <condition pos:start="85:16" pos:end="85:70">(<expr pos:start="85:17" pos:end="85:69"><name pos:start="85:17" pos:end="85:37"><name pos:start="85:17" pos:end="85:18">pc</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:37">frame_start_found</name></name>  <operator pos:start="85:40" pos:end="85:40">&lt;</operator> <literal type="number" pos:start="85:42" pos:end="85:42">4</literal> <operator pos:start="85:44" pos:end="85:45">&amp;&amp;</operator> <name pos:start="85:47" pos:end="85:51">state</name> <operator pos:start="85:53" pos:end="85:54">==</operator> <name pos:start="85:56" pos:end="85:69">EXT_START_CODE</name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:40"><block_content pos:start="87:17" pos:end="87:40">

                <expr_stmt pos:start="87:17" pos:end="87:40"><expr pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:37"><name pos:start="87:17" pos:end="87:18">pc</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:37">frame_start_found</name></name><operator pos:start="87:38" pos:end="87:39">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="89:13" pos:end="101:13"><if pos:start="89:13" pos:end="101:13">if <condition pos:start="89:16" pos:end="89:76">(<expr pos:start="89:17" pos:end="89:75"><name pos:start="89:17" pos:end="89:37"><name pos:start="89:17" pos:end="89:18">pc</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:37">frame_start_found</name></name> <operator pos:start="89:39" pos:end="89:40">==</operator> <literal type="number" pos:start="89:42" pos:end="89:42">4</literal> <operator pos:start="89:44" pos:end="89:45">&amp;&amp;</operator> <operator pos:start="89:47" pos:end="89:47">(</operator><name pos:start="89:48" pos:end="89:52">state</name> <operator pos:start="89:54" pos:end="89:54">&amp;</operator> <literal type="number" pos:start="89:56" pos:end="89:65">0xFFFFFF00</literal><operator pos:start="89:66" pos:end="89:66">)</operator> <operator pos:start="89:68" pos:end="89:69">==</operator> <literal type="number" pos:start="89:71" pos:end="89:75">0x100</literal></expr>)</condition> <block pos:start="89:78" pos:end="101:13">{<block_content pos:start="91:17" pos:end="99:17">

                <if_stmt pos:start="91:17" pos:end="99:17"><if pos:start="91:17" pos:end="99:17">if <condition pos:start="91:20" pos:end="91:81">(<expr pos:start="91:21" pos:end="91:80"><name pos:start="91:21" pos:end="91:59"><name pos:start="91:21" pos:end="91:25">state</name> <argument_list type="generic" pos:start="91:27" pos:end="91:59">&lt; <argument pos:start="91:29" pos:end="91:57"><expr pos:start="91:29" pos:end="91:57"><name pos:start="91:29" pos:end="91:48">SLICE_MIN_START_CODE</name> <operator pos:start="91:50" pos:end="91:51">||</operator> <name pos:start="91:53" pos:end="91:57">state</name></expr></argument> &gt;</argument_list></name> <name pos:start="91:61" pos:end="91:80">SLICE_MAX_START_CODE</name></expr>)</condition> <block pos:start="91:83" pos:end="99:17">{<block_content pos:start="93:21" pos:end="97:33">

                    <expr_stmt pos:start="93:21" pos:end="93:46"><expr pos:start="93:21" pos:end="93:45"><name pos:start="93:21" pos:end="93:41"><name pos:start="93:21" pos:end="93:22">pc</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:41">frame_start_found</name></name> <operator pos:start="93:43" pos:end="93:43">=</operator> <literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="95:21" pos:end="95:47"><expr pos:start="95:21" pos:end="95:46"><name pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:22">pc</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:29">state</name></name>             <operator pos:start="95:43" pos:end="95:43">=</operator> <operator pos:start="95:45" pos:end="95:45">-</operator><literal type="number" pos:start="95:46" pos:end="95:46">1</literal></expr>;</expr_stmt>

                    <return pos:start="97:21" pos:end="97:33">return <expr pos:start="97:28" pos:end="97:32"><name pos:start="97:28" pos:end="97:28">i</name> <operator pos:start="97:30" pos:end="97:30">-</operator> <literal type="number" pos:start="97:32" pos:end="97:32">3</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:79">(<expr pos:start="103:17" pos:end="103:78"><name pos:start="103:17" pos:end="103:37"><name pos:start="103:17" pos:end="103:18">pc</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:37">frame_start_found</name></name> <operator pos:start="103:39" pos:end="103:40">==</operator> <literal type="number" pos:start="103:42" pos:end="103:42">0</literal> <operator pos:start="103:44" pos:end="103:45">&amp;&amp;</operator> <name pos:start="103:47" pos:end="103:47">s</name> <operator pos:start="103:49" pos:end="103:50">&amp;&amp;</operator> <name pos:start="103:52" pos:end="103:56">state</name> <operator pos:start="103:58" pos:end="103:59">==</operator> <name pos:start="103:61" pos:end="103:78">PICTURE_START_CODE</name></expr>)</condition> <block pos:start="103:81" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:48">

                <expr_stmt pos:start="105:17" pos:end="105:48"><expr pos:start="105:17" pos:end="105:47"><call pos:start="105:17" pos:end="105:47"><name pos:start="105:17" pos:end="105:34">ff_fetch_timestamp</name><argument_list pos:start="105:35" pos:end="105:47">(<argument pos:start="105:36" pos:end="105:36"><expr pos:start="105:36" pos:end="105:36"><name pos:start="105:36" pos:end="105:36">s</name></expr></argument>, <argument pos:start="105:39" pos:end="105:43"><expr pos:start="105:39" pos:end="105:43"><name pos:start="105:39" pos:end="105:39">i</name> <operator pos:start="105:41" pos:end="105:41">-</operator> <literal type="number" pos:start="105:43" pos:end="105:43">3</literal></expr></argument>, <argument pos:start="105:46" pos:end="105:46"><expr pos:start="105:46" pos:end="105:46"><literal type="number" pos:start="105:46" pos:end="105:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="113:5" pos:end="113:22"><expr pos:start="113:5" pos:end="113:21"><name pos:start="113:5" pos:end="113:13"><name pos:start="113:5" pos:end="113:6">pc</name><operator pos:start="113:7" pos:end="113:8">-&gt;</operator><name pos:start="113:9" pos:end="113:13">state</name></name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:21">state</name></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:25">return <expr pos:start="115:12" pos:end="115:24"><name pos:start="115:12" pos:end="115:24">END_NOT_FOUND</name></expr>;</return>

</block_content>}</block></function>
</unit>
