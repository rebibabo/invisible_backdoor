<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21152.c" pos:tabs="8"><function pos:start="1:1" pos:end="347:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">vmsvga_fifo_run</name><parameter_list pos:start="1:28" pos:end="1:53">(<parameter pos:start="1:29" pos:end="1:52"><decl pos:start="1:29" pos:end="1:52"><type pos:start="1:29" pos:end="1:52"><name pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:34">struct</name> <name pos:start="1:36" pos:end="1:49">vmsvga_state_s</name></name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="347:1">{<block_content pos:start="5:5" pos:end="345:19">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">cmd</name></decl>, <decl pos:start="5:19" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:24">colour</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">args</name></decl>, <decl pos:start="7:15" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:17">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">x</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">y</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">dx</name></decl>, <decl pos:start="9:19" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:20">dy</name></decl>, <decl pos:start="9:23" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:27">width</name></decl>, <decl pos:start="9:30" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:35">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:37">vmsvga_cursor_definition_s</name></name></type> <name pos:start="11:39" pos:end="11:44">cursor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">cmd_start</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:7">len</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:31"><name pos:start="17:11" pos:end="17:28">vmsvga_fifo_length</name><argument_list pos:start="17:29" pos:end="17:31">(<argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><name pos:start="17:30" pos:end="17:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="341:5">while <condition pos:start="19:11" pos:end="19:19">(<expr pos:start="19:12" pos:end="19:18"><name pos:start="19:12" pos:end="19:14">len</name> <operator pos:start="19:16" pos:end="19:16">&gt;</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>)</condition> <block pos:start="19:21" pos:end="341:5">{<block_content pos:start="23:9" pos:end="339:9">

        <comment type="block" pos:start="21:9" pos:end="21:75">/* May need to go back to the start of the command if incomplete */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:33"><expr pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:17">cmd_start</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:32"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:26">cmd</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:32">stop</name></name></expr>;</expr_stmt>



        <switch pos:start="27:9" pos:end="339:9">switch <condition pos:start="27:16" pos:end="27:42">(<expr pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:19">cmd</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:41"><name pos:start="27:23" pos:end="27:38">vmsvga_fifo_read</name><argument_list pos:start="27:39" pos:end="27:41">(<argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:44" pos:end="339:9">{<block_content pos:start="29:9" pos:end="337:18">

        <case pos:start="29:9" pos:end="29:29">case <expr pos:start="29:14" pos:end="29:28"><name pos:start="29:14" pos:end="29:28">SVGA_CMD_UPDATE</name></expr>:</case>

        <case pos:start="31:9" pos:end="31:37">case <expr pos:start="31:14" pos:end="31:36"><name pos:start="31:14" pos:end="31:36">SVGA_CMD_UPDATE_VERBOSE</name></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:21"><expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:15">len</name> <operator pos:start="33:17" pos:end="33:18">-=</operator> <literal type="number" pos:start="33:20" pos:end="33:20">5</literal></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="39:13"><if pos:start="35:13" pos:end="39:13">if <condition pos:start="35:16" pos:end="35:24">(<expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:19">len</name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition> <block pos:start="35:26" pos:end="39:13">{<block_content pos:start="37:17" pos:end="37:28">

                <goto pos:start="37:17" pos:end="37:28">goto <name pos:start="37:22" pos:end="37:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:13">x</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:35"><name pos:start="43:17" pos:end="43:32">vmsvga_fifo_read</name><argument_list pos:start="43:33" pos:end="43:35">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><name pos:start="43:34" pos:end="43:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:13">y</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:32">vmsvga_fifo_read</name><argument_list pos:start="45:33" pos:end="45:35">(<argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><name pos:start="45:34" pos:end="45:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:40"><expr pos:start="47:13" pos:end="47:39"><name pos:start="47:13" pos:end="47:17">width</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:39"><name pos:start="47:21" pos:end="47:36">vmsvga_fifo_read</name><argument_list pos:start="47:37" pos:end="47:39">(<argument pos:start="47:38" pos:end="47:38"><expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:41"><expr pos:start="49:13" pos:end="49:40"><name pos:start="49:13" pos:end="49:18">height</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:40"><name pos:start="49:22" pos:end="49:37">vmsvga_fifo_read</name><argument_list pos:start="49:38" pos:end="49:40">(<argument pos:start="49:39" pos:end="49:39"><expr pos:start="49:39" pos:end="49:39"><name pos:start="49:39" pos:end="49:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:63"><expr pos:start="51:13" pos:end="51:62"><call pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:38">vmsvga_update_rect_delayed</name><argument_list pos:start="51:39" pos:end="51:62">(<argument pos:start="51:40" pos:end="51:40"><expr pos:start="51:40" pos:end="51:40"><name pos:start="51:40" pos:end="51:40">s</name></expr></argument>, <argument pos:start="51:43" pos:end="51:43"><expr pos:start="51:43" pos:end="51:43"><name pos:start="51:43" pos:end="51:43">x</name></expr></argument>, <argument pos:start="51:46" pos:end="51:46"><expr pos:start="51:46" pos:end="51:46"><name pos:start="51:46" pos:end="51:46">y</name></expr></argument>, <argument pos:start="51:49" pos:end="51:53"><expr pos:start="51:49" pos:end="51:53"><name pos:start="51:49" pos:end="51:53">width</name></expr></argument>, <argument pos:start="51:56" pos:end="51:61"><expr pos:start="51:56" pos:end="51:61"><name pos:start="51:56" pos:end="51:61">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>



        <case pos:start="57:9" pos:end="57:32">case <expr pos:start="57:14" pos:end="57:31"><name pos:start="57:14" pos:end="57:31">SVGA_CMD_RECT_FILL</name></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:21"><expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:15">len</name> <operator pos:start="59:17" pos:end="59:18">-=</operator> <literal type="number" pos:start="59:20" pos:end="59:20">6</literal></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:24">(<expr pos:start="61:17" pos:end="61:23"><name pos:start="61:17" pos:end="61:19">len</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr>)</condition> <block pos:start="61:26" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:28">

                <goto pos:start="63:17" pos:end="63:28">goto <name pos:start="63:22" pos:end="63:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:41"><expr pos:start="69:13" pos:end="69:40"><name pos:start="69:13" pos:end="69:18">colour</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:40"><name pos:start="69:22" pos:end="69:37">vmsvga_fifo_read</name><argument_list pos:start="69:38" pos:end="69:40">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:36"><expr pos:start="71:13" pos:end="71:35"><name pos:start="71:13" pos:end="71:13">x</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:32">vmsvga_fifo_read</name><argument_list pos:start="71:33" pos:end="71:35">(<argument pos:start="71:34" pos:end="71:34"><expr pos:start="71:34" pos:end="71:34"><name pos:start="71:34" pos:end="71:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:13">y</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:32">vmsvga_fifo_read</name><argument_list pos:start="73:33" pos:end="73:35">(<argument pos:start="73:34" pos:end="73:34"><expr pos:start="73:34" pos:end="73:34"><name pos:start="73:34" pos:end="73:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:17">width</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:39"><name pos:start="75:21" pos:end="75:36">vmsvga_fifo_read</name><argument_list pos:start="75:37" pos:end="75:39">(<argument pos:start="75:38" pos:end="75:38"><expr pos:start="75:38" pos:end="75:38"><name pos:start="75:38" pos:end="75:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="80:0"><expr pos:start="77:13" pos:end="77:40"><name pos:start="77:13" pos:end="77:18">height</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <call pos:start="77:22" pos:end="77:40"><name pos:start="77:22" pos:end="77:37">vmsvga_fifo_read</name><argument_list pos:start="77:38" pos:end="77:40">(<argument pos:start="77:39" pos:end="77:39"><expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="79:1" pos:end="79:20">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:20">HW_FILL_ACCEL</name></cpp:ifdef>

            <expr_stmt pos:start="81:13" pos:end="81:61"><expr pos:start="81:13" pos:end="81:60"><call pos:start="81:13" pos:end="81:60"><name pos:start="81:13" pos:end="81:28">vmsvga_fill_rect</name><argument_list pos:start="81:29" pos:end="81:60">(<argument pos:start="81:30" pos:end="81:30"><expr pos:start="81:30" pos:end="81:30"><name pos:start="81:30" pos:end="81:30">s</name></expr></argument>, <argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><name pos:start="81:33" pos:end="81:38">colour</name></expr></argument>, <argument pos:start="81:41" pos:end="81:41"><expr pos:start="81:41" pos:end="81:41"><name pos:start="81:41" pos:end="81:41">x</name></expr></argument>, <argument pos:start="81:44" pos:end="81:44"><expr pos:start="81:44" pos:end="81:44"><name pos:start="81:44" pos:end="81:44">y</name></expr></argument>, <argument pos:start="81:47" pos:end="81:51"><expr pos:start="81:47" pos:end="81:51"><name pos:start="81:47" pos:end="81:51">width</name></expr></argument>, <argument pos:start="81:54" pos:end="81:59"><expr pos:start="81:54" pos:end="81:59"><name pos:start="81:54" pos:end="81:59">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="86:0">break;</break>

<cpp:else pos:start="85:1" pos:end="85:5">#<cpp:directive pos:start="85:2" pos:end="85:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="87:13" pos:end="87:21"><expr pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:16">args</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="92:0">goto <name pos:start="89:18" pos:end="89:23">badcmd</name>;</goto>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>



        <case pos:start="95:9" pos:end="95:32">case <expr pos:start="95:14" pos:end="95:31"><name pos:start="95:14" pos:end="95:31">SVGA_CMD_RECT_COPY</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:21"><expr pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:15">len</name> <operator pos:start="97:17" pos:end="97:18">-=</operator> <literal type="number" pos:start="97:20" pos:end="97:20">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="103:13"><if pos:start="99:13" pos:end="103:13">if <condition pos:start="99:16" pos:end="99:24">(<expr pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:19">len</name> <operator pos:start="99:21" pos:end="99:21">&lt;</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>)</condition> <block pos:start="99:26" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:28">

                <goto pos:start="101:17" pos:end="101:28">goto <name pos:start="101:22" pos:end="101:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="107:13" pos:end="107:36"><expr pos:start="107:13" pos:end="107:35"><name pos:start="107:13" pos:end="107:13">x</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <call pos:start="107:17" pos:end="107:35"><name pos:start="107:17" pos:end="107:32">vmsvga_fifo_read</name><argument_list pos:start="107:33" pos:end="107:35">(<argument pos:start="107:34" pos:end="107:34"><expr pos:start="107:34" pos:end="107:34"><name pos:start="107:34" pos:end="107:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:36"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:13">y</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <call pos:start="109:17" pos:end="109:35"><name pos:start="109:17" pos:end="109:32">vmsvga_fifo_read</name><argument_list pos:start="109:33" pos:end="109:35">(<argument pos:start="109:34" pos:end="109:34"><expr pos:start="109:34" pos:end="109:34"><name pos:start="109:34" pos:end="109:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:37"><expr pos:start="111:13" pos:end="111:36"><name pos:start="111:13" pos:end="111:14">dx</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:36"><name pos:start="111:18" pos:end="111:33">vmsvga_fifo_read</name><argument_list pos:start="111:34" pos:end="111:36">(<argument pos:start="111:35" pos:end="111:35"><expr pos:start="111:35" pos:end="111:35"><name pos:start="111:35" pos:end="111:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:37"><expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:14">dy</name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:36"><name pos:start="113:18" pos:end="113:33">vmsvga_fifo_read</name><argument_list pos:start="113:34" pos:end="113:36">(<argument pos:start="113:35" pos:end="113:35"><expr pos:start="113:35" pos:end="113:35"><name pos:start="113:35" pos:end="113:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:40"><expr pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:17">width</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <call pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:36">vmsvga_fifo_read</name><argument_list pos:start="115:37" pos:end="115:39">(<argument pos:start="115:38" pos:end="115:38"><expr pos:start="115:38" pos:end="115:38"><name pos:start="115:38" pos:end="115:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="120:0"><expr pos:start="117:13" pos:end="117:40"><name pos:start="117:13" pos:end="117:18">height</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:40"><name pos:start="117:22" pos:end="117:37">vmsvga_fifo_read</name><argument_list pos:start="117:38" pos:end="117:40">(<argument pos:start="117:39" pos:end="117:39"><expr pos:start="117:39" pos:end="117:39"><name pos:start="117:39" pos:end="117:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="119:1" pos:end="119:20">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:20">HW_RECT_ACCEL</name></cpp:ifdef>

            <if_stmt pos:start="121:13" pos:end="128:0"><if pos:start="121:13" pos:end="128:0">if <condition pos:start="121:16" pos:end="121:70">(<expr pos:start="121:17" pos:end="121:69"><call pos:start="121:17" pos:end="121:64"><name pos:start="121:17" pos:end="121:32">vmsvga_copy_rect</name><argument_list pos:start="121:33" pos:end="121:64">(<argument pos:start="121:34" pos:end="121:34"><expr pos:start="121:34" pos:end="121:34"><name pos:start="121:34" pos:end="121:34">s</name></expr></argument>, <argument pos:start="121:37" pos:end="121:37"><expr pos:start="121:37" pos:end="121:37"><name pos:start="121:37" pos:end="121:37">x</name></expr></argument>, <argument pos:start="121:40" pos:end="121:40"><expr pos:start="121:40" pos:end="121:40"><name pos:start="121:40" pos:end="121:40">y</name></expr></argument>, <argument pos:start="121:43" pos:end="121:44"><expr pos:start="121:43" pos:end="121:44"><name pos:start="121:43" pos:end="121:44">dx</name></expr></argument>, <argument pos:start="121:47" pos:end="121:48"><expr pos:start="121:47" pos:end="121:48"><name pos:start="121:47" pos:end="121:48">dy</name></expr></argument>, <argument pos:start="121:51" pos:end="121:55"><expr pos:start="121:51" pos:end="121:55"><name pos:start="121:51" pos:end="121:55">width</name></expr></argument>, <argument pos:start="121:58" pos:end="121:63"><expr pos:start="121:58" pos:end="121:63"><name pos:start="121:58" pos:end="121:63">height</name></expr></argument>)</argument_list></call> <operator pos:start="121:66" pos:end="121:67">==</operator> <literal type="number" pos:start="121:69" pos:end="121:69">0</literal></expr>)</condition> <block pos:start="121:72" pos:end="128:0">{<block_content pos:start="123:17" pos:end="123:22">

                <break pos:start="123:17" pos:end="123:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="127:1" pos:end="127:6">#<cpp:directive pos:start="127:2" pos:end="127:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="129:13" pos:end="129:21"><expr pos:start="129:13" pos:end="129:20"><name pos:start="129:13" pos:end="129:16">args</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <literal type="number" pos:start="129:20" pos:end="129:20">0</literal></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:24">goto <name pos:start="131:18" pos:end="131:23">badcmd</name>;</goto>



        <case pos:start="135:9" pos:end="135:36">case <expr pos:start="135:14" pos:end="135:35"><name pos:start="135:14" pos:end="135:35">SVGA_CMD_DEFINE_CURSOR</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:21"><expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:15">len</name> <operator pos:start="137:17" pos:end="137:18">-=</operator> <literal type="number" pos:start="137:20" pos:end="137:20">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:24">(<expr pos:start="139:17" pos:end="139:23"><name pos:start="139:17" pos:end="139:19">len</name> <operator pos:start="139:21" pos:end="139:21">&lt;</operator> <literal type="number" pos:start="139:23" pos:end="139:23">0</literal></expr>)</condition> <block pos:start="139:26" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:28">

                <goto pos:start="141:17" pos:end="141:28">goto <name pos:start="141:22" pos:end="141:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:44"><expr pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:18">cursor</name><operator pos:start="147:19" pos:end="147:19">.</operator><name pos:start="147:20" pos:end="147:21">id</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <call pos:start="147:25" pos:end="147:43"><name pos:start="147:25" pos:end="147:40">vmsvga_fifo_read</name><argument_list pos:start="147:41" pos:end="147:43">(<argument pos:start="147:42" pos:end="147:42"><expr pos:start="147:42" pos:end="147:42"><name pos:start="147:42" pos:end="147:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:47"><expr pos:start="149:13" pos:end="149:46"><name pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:18">cursor</name><operator pos:start="149:19" pos:end="149:19">.</operator><name pos:start="149:20" pos:end="149:24">hot_x</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <call pos:start="149:28" pos:end="149:46"><name pos:start="149:28" pos:end="149:43">vmsvga_fifo_read</name><argument_list pos:start="149:44" pos:end="149:46">(<argument pos:start="149:45" pos:end="149:45"><expr pos:start="149:45" pos:end="149:45"><name pos:start="149:45" pos:end="149:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:47"><expr pos:start="151:13" pos:end="151:46"><name pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:18">cursor</name><operator pos:start="151:19" pos:end="151:19">.</operator><name pos:start="151:20" pos:end="151:24">hot_y</name></name> <operator pos:start="151:26" pos:end="151:26">=</operator> <call pos:start="151:28" pos:end="151:46"><name pos:start="151:28" pos:end="151:43">vmsvga_fifo_read</name><argument_list pos:start="151:44" pos:end="151:46">(<argument pos:start="151:45" pos:end="151:45"><expr pos:start="151:45" pos:end="151:45"><name pos:start="151:45" pos:end="151:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:51"><expr pos:start="153:13" pos:end="153:50"><name pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:18">cursor</name><operator pos:start="153:19" pos:end="153:19">.</operator><name pos:start="153:20" pos:end="153:24">width</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <name pos:start="153:28" pos:end="153:28">x</name> <operator pos:start="153:30" pos:end="153:30">=</operator> <call pos:start="153:32" pos:end="153:50"><name pos:start="153:32" pos:end="153:47">vmsvga_fifo_read</name><argument_list pos:start="153:48" pos:end="153:50">(<argument pos:start="153:49" pos:end="153:49"><expr pos:start="153:49" pos:end="153:49"><name pos:start="153:49" pos:end="153:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:52"><expr pos:start="155:13" pos:end="155:51"><name pos:start="155:13" pos:end="155:25"><name pos:start="155:13" pos:end="155:18">cursor</name><operator pos:start="155:19" pos:end="155:19">.</operator><name pos:start="155:20" pos:end="155:25">height</name></name> <operator pos:start="155:27" pos:end="155:27">=</operator> <name pos:start="155:29" pos:end="155:29">y</name> <operator pos:start="155:31" pos:end="155:31">=</operator> <call pos:start="155:33" pos:end="155:51"><name pos:start="155:33" pos:end="155:48">vmsvga_fifo_read</name><argument_list pos:start="155:49" pos:end="155:51">(<argument pos:start="155:50" pos:end="155:50"><expr pos:start="155:50" pos:end="155:50"><name pos:start="155:50" pos:end="155:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:32"><expr pos:start="157:13" pos:end="157:31"><call pos:start="157:13" pos:end="157:31"><name pos:start="157:13" pos:end="157:28">vmsvga_fifo_read</name><argument_list pos:start="157:29" pos:end="157:31">(<argument pos:start="157:30" pos:end="157:30"><expr pos:start="157:30" pos:end="157:30"><name pos:start="157:30" pos:end="157:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:45"><expr pos:start="159:13" pos:end="159:44"><name pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:18">cursor</name><operator pos:start="159:19" pos:end="159:19">.</operator><name pos:start="159:20" pos:end="159:22">bpp</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <call pos:start="159:26" pos:end="159:44"><name pos:start="159:26" pos:end="159:41">vmsvga_fifo_read</name><argument_list pos:start="159:42" pos:end="159:44">(<argument pos:start="159:43" pos:end="159:43"><expr pos:start="159:43" pos:end="159:43"><name pos:start="159:43" pos:end="159:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:79"><expr pos:start="163:13" pos:end="163:78"><name pos:start="163:13" pos:end="163:16">args</name> <operator pos:start="163:18" pos:end="163:18">=</operator> <call pos:start="163:20" pos:end="163:41"><name pos:start="163:20" pos:end="163:35">SVGA_BITMAP_SIZE</name><argument_list pos:start="163:36" pos:end="163:41">(<argument pos:start="163:37" pos:end="163:37"><expr pos:start="163:37" pos:end="163:37"><name pos:start="163:37" pos:end="163:37">x</name></expr></argument>, <argument pos:start="163:40" pos:end="163:40"><expr pos:start="163:40" pos:end="163:40"><name pos:start="163:40" pos:end="163:40">y</name></expr></argument>)</argument_list></call> <operator pos:start="163:43" pos:end="163:43">+</operator> <call pos:start="163:45" pos:end="163:78"><name pos:start="163:45" pos:end="163:60">SVGA_PIXMAP_SIZE</name><argument_list pos:start="163:61" pos:end="163:78">(<argument pos:start="163:62" pos:end="163:62"><expr pos:start="163:62" pos:end="163:62"><name pos:start="163:62" pos:end="163:62">x</name></expr></argument>, <argument pos:start="163:65" pos:end="163:65"><expr pos:start="163:65" pos:end="163:65"><name pos:start="163:65" pos:end="163:65">y</name></expr></argument>, <argument pos:start="163:68" pos:end="163:77"><expr pos:start="163:68" pos:end="163:77"><name pos:start="163:68" pos:end="163:77"><name pos:start="163:68" pos:end="163:73">cursor</name><operator pos:start="163:74" pos:end="163:74">.</operator><name pos:start="163:75" pos:end="163:77">bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="171:13"><if pos:start="165:13" pos:end="171:13">if <condition pos:start="165:16" pos:end="167:73">(<expr pos:start="165:17" pos:end="167:72"><call pos:start="165:17" pos:end="165:38"><name pos:start="165:17" pos:end="165:32">SVGA_BITMAP_SIZE</name><argument_list pos:start="165:33" pos:end="165:38">(<argument pos:start="165:34" pos:end="165:34"><expr pos:start="165:34" pos:end="165:34"><name pos:start="165:34" pos:end="165:34">x</name></expr></argument>, <argument pos:start="165:37" pos:end="165:37"><expr pos:start="165:37" pos:end="165:37"><name pos:start="165:37" pos:end="165:37">y</name></expr></argument>)</argument_list></call> <operator pos:start="165:40" pos:end="165:40">&gt;</operator> <sizeof pos:start="165:42" pos:end="165:59">sizeof <name pos:start="165:49" pos:end="165:59"><name pos:start="165:49" pos:end="165:54">cursor</name><operator pos:start="165:55" pos:end="165:55">.</operator><name pos:start="165:56" pos:end="165:59">mask</name></name></sizeof> <operator pos:start="165:61" pos:end="165:62">||</operator>

                <call pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:32">SVGA_PIXMAP_SIZE</name><argument_list pos:start="167:33" pos:end="167:50">(<argument pos:start="167:34" pos:end="167:34"><expr pos:start="167:34" pos:end="167:34"><name pos:start="167:34" pos:end="167:34">x</name></expr></argument>, <argument pos:start="167:37" pos:end="167:37"><expr pos:start="167:37" pos:end="167:37"><name pos:start="167:37" pos:end="167:37">y</name></expr></argument>, <argument pos:start="167:40" pos:end="167:49"><expr pos:start="167:40" pos:end="167:49"><name pos:start="167:40" pos:end="167:49"><name pos:start="167:40" pos:end="167:45">cursor</name><operator pos:start="167:46" pos:end="167:46">.</operator><name pos:start="167:47" pos:end="167:49">bpp</name></name></expr></argument>)</argument_list></call> <operator pos:start="167:52" pos:end="167:52">&gt;</operator> <sizeof pos:start="167:54" pos:end="167:72">sizeof <name pos:start="167:61" pos:end="167:72"><name pos:start="167:61" pos:end="167:66">cursor</name><operator pos:start="167:67" pos:end="167:67">.</operator><name pos:start="167:68" pos:end="167:72">image</name></name></sizeof></expr>)</condition> <block pos:start="167:75" pos:end="171:13">{<block_content pos:start="169:21" pos:end="169:32">

                    <goto pos:start="169:21" pos:end="169:32">goto <name pos:start="169:26" pos:end="169:31">badcmd</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="175:13" pos:end="175:24"><expr pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:15">len</name> <operator pos:start="175:17" pos:end="175:18">-=</operator> <name pos:start="175:20" pos:end="175:23">args</name></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="181:13"><if pos:start="177:13" pos:end="181:13">if <condition pos:start="177:16" pos:end="177:24">(<expr pos:start="177:17" pos:end="177:23"><name pos:start="177:17" pos:end="177:19">len</name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr>)</condition> <block pos:start="177:26" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:28">

                <goto pos:start="179:17" pos:end="179:28">goto <name pos:start="179:22" pos:end="179:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <for pos:start="185:13" pos:end="189:13">for <control pos:start="185:17" pos:end="185:65">(<init pos:start="185:18" pos:end="185:26"><expr pos:start="185:18" pos:end="185:25"><name pos:start="185:18" pos:end="185:21">args</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <literal type="number" pos:start="185:25" pos:end="185:25">0</literal></expr>;</init> <condition pos:start="185:28" pos:end="185:57"><expr pos:start="185:28" pos:end="185:56"><name pos:start="185:28" pos:end="185:31">args</name> <operator pos:start="185:33" pos:end="185:33">&lt;</operator> <call pos:start="185:35" pos:end="185:56"><name pos:start="185:35" pos:end="185:50">SVGA_BITMAP_SIZE</name><argument_list pos:start="185:51" pos:end="185:56">(<argument pos:start="185:52" pos:end="185:52"><expr pos:start="185:52" pos:end="185:52"><name pos:start="185:52" pos:end="185:52">x</name></expr></argument>, <argument pos:start="185:55" pos:end="185:55"><expr pos:start="185:55" pos:end="185:55"><name pos:start="185:55" pos:end="185:55">y</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="185:59" pos:end="185:64"><expr pos:start="185:59" pos:end="185:64"><name pos:start="185:59" pos:end="185:62">args</name><operator pos:start="185:63" pos:end="185:64">++</operator></expr></incr>)</control> <block pos:start="185:67" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:60">

                <expr_stmt pos:start="187:17" pos:end="187:60"><expr pos:start="187:17" pos:end="187:59"><name pos:start="187:17" pos:end="187:33"><name pos:start="187:17" pos:end="187:22">cursor</name><operator pos:start="187:23" pos:end="187:23">.</operator><name pos:start="187:24" pos:end="187:27">mask</name><index pos:start="187:28" pos:end="187:33">[<expr pos:start="187:29" pos:end="187:32"><name pos:start="187:29" pos:end="187:32">args</name></expr>]</index></name> <operator pos:start="187:35" pos:end="187:35">=</operator> <call pos:start="187:37" pos:end="187:59"><name pos:start="187:37" pos:end="187:56">vmsvga_fifo_read_raw</name><argument_list pos:start="187:57" pos:end="187:59">(<argument pos:start="187:58" pos:end="187:58"><expr pos:start="187:58" pos:end="187:58"><name pos:start="187:58" pos:end="187:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="191:13" pos:end="198:0">for <control pos:start="191:17" pos:end="191:77">(<init pos:start="191:18" pos:end="191:26"><expr pos:start="191:18" pos:end="191:25"><name pos:start="191:18" pos:end="191:21">args</name> <operator pos:start="191:23" pos:end="191:23">=</operator> <literal type="number" pos:start="191:25" pos:end="191:25">0</literal></expr>;</init> <condition pos:start="191:28" pos:end="191:69"><expr pos:start="191:28" pos:end="191:68"><name pos:start="191:28" pos:end="191:31">args</name> <operator pos:start="191:33" pos:end="191:33">&lt;</operator> <call pos:start="191:35" pos:end="191:68"><name pos:start="191:35" pos:end="191:50">SVGA_PIXMAP_SIZE</name><argument_list pos:start="191:51" pos:end="191:68">(<argument pos:start="191:52" pos:end="191:52"><expr pos:start="191:52" pos:end="191:52"><name pos:start="191:52" pos:end="191:52">x</name></expr></argument>, <argument pos:start="191:55" pos:end="191:55"><expr pos:start="191:55" pos:end="191:55"><name pos:start="191:55" pos:end="191:55">y</name></expr></argument>, <argument pos:start="191:58" pos:end="191:67"><expr pos:start="191:58" pos:end="191:67"><name pos:start="191:58" pos:end="191:67"><name pos:start="191:58" pos:end="191:63">cursor</name><operator pos:start="191:64" pos:end="191:64">.</operator><name pos:start="191:65" pos:end="191:67">bpp</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="191:71" pos:end="191:76"><expr pos:start="191:71" pos:end="191:76"><name pos:start="191:71" pos:end="191:74">args</name><operator pos:start="191:75" pos:end="191:76">++</operator></expr></incr>)</control> <block pos:start="191:79" pos:end="198:0">{<block_content pos:start="193:17" pos:end="193:61">

                <expr_stmt pos:start="193:17" pos:end="193:61"><expr pos:start="193:17" pos:end="193:60"><name pos:start="193:17" pos:end="193:34"><name pos:start="193:17" pos:end="193:22">cursor</name><operator pos:start="193:23" pos:end="193:23">.</operator><name pos:start="193:24" pos:end="193:28">image</name><index pos:start="193:29" pos:end="193:34">[<expr pos:start="193:30" pos:end="193:33"><name pos:start="193:30" pos:end="193:33">args</name></expr>]</index></name> <operator pos:start="193:36" pos:end="193:36">=</operator> <call pos:start="193:38" pos:end="193:60"><name pos:start="193:38" pos:end="193:57">vmsvga_fifo_read_raw</name><argument_list pos:start="193:58" pos:end="193:60">(<argument pos:start="193:59" pos:end="193:59"><expr pos:start="193:59" pos:end="193:59"><name pos:start="193:59" pos:end="193:59">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

<cpp:ifdef pos:start="197:1" pos:end="197:21">#<cpp:directive pos:start="197:2" pos:end="197:6">ifdef</cpp:directive> <name pos:start="197:8" pos:end="197:21">HW_MOUSE_ACCEL</name></cpp:ifdef>

            <expr_stmt pos:start="199:13" pos:end="199:45"><expr pos:start="199:13" pos:end="199:44"><call pos:start="199:13" pos:end="199:44"><name pos:start="199:13" pos:end="199:32">vmsvga_cursor_define</name><argument_list pos:start="199:33" pos:end="199:44">(<argument pos:start="199:34" pos:end="199:34"><expr pos:start="199:34" pos:end="199:34"><name pos:start="199:34" pos:end="199:34">s</name></expr></argument>, <argument pos:start="199:37" pos:end="199:43"><expr pos:start="199:37" pos:end="199:43"><operator pos:start="199:37" pos:end="199:37">&amp;</operator><name pos:start="199:38" pos:end="199:43">cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="201:13" pos:end="204:0">break;</break>

<cpp:else pos:start="203:1" pos:end="203:5">#<cpp:directive pos:start="203:2" pos:end="203:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="205:13" pos:end="205:21"><expr pos:start="205:13" pos:end="205:20"><name pos:start="205:13" pos:end="205:16">args</name> <operator pos:start="205:18" pos:end="205:18">=</operator> <literal type="number" pos:start="205:20" pos:end="205:20">0</literal></expr>;</expr_stmt>

            <goto pos:start="207:13" pos:end="210:0">goto <name pos:start="207:18" pos:end="207:23">badcmd</name>;</goto>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="213:9" pos:end="219:11">/*

         * Other commands that we at least know the number of arguments

         * for so we can avoid FIFO desync if driver uses them illegally.

         */</comment>

        <case pos:start="221:9" pos:end="221:42">case <expr pos:start="221:14" pos:end="221:41"><name pos:start="221:14" pos:end="221:41">SVGA_CMD_DEFINE_ALPHA_CURSOR</name></expr>:</case>

            <expr_stmt pos:start="223:13" pos:end="223:21"><expr pos:start="223:13" pos:end="223:20"><name pos:start="223:13" pos:end="223:15">len</name> <operator pos:start="223:17" pos:end="223:18">-=</operator> <literal type="number" pos:start="223:20" pos:end="223:20">6</literal></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="229:13"><if pos:start="225:13" pos:end="229:13">if <condition pos:start="225:16" pos:end="225:24">(<expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:19">len</name> <operator pos:start="225:21" pos:end="225:21">&lt;</operator> <literal type="number" pos:start="225:23" pos:end="225:23">0</literal></expr>)</condition> <block pos:start="225:26" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:28">

                <goto pos:start="227:17" pos:end="227:28">goto <name pos:start="227:22" pos:end="227:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:32"><expr pos:start="231:13" pos:end="231:31"><call pos:start="231:13" pos:end="231:31"><name pos:start="231:13" pos:end="231:28">vmsvga_fifo_read</name><argument_list pos:start="231:29" pos:end="231:31">(<argument pos:start="231:30" pos:end="231:30"><expr pos:start="231:30" pos:end="231:30"><name pos:start="231:30" pos:end="231:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:32"><expr pos:start="233:13" pos:end="233:31"><call pos:start="233:13" pos:end="233:31"><name pos:start="233:13" pos:end="233:28">vmsvga_fifo_read</name><argument_list pos:start="233:29" pos:end="233:31">(<argument pos:start="233:30" pos:end="233:30"><expr pos:start="233:30" pos:end="233:30"><name pos:start="233:30" pos:end="233:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:32"><expr pos:start="235:13" pos:end="235:31"><call pos:start="235:13" pos:end="235:31"><name pos:start="235:13" pos:end="235:28">vmsvga_fifo_read</name><argument_list pos:start="235:29" pos:end="235:31">(<argument pos:start="235:30" pos:end="235:30"><expr pos:start="235:30" pos:end="235:30"><name pos:start="235:30" pos:end="235:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:36"><expr pos:start="237:13" pos:end="237:35"><name pos:start="237:13" pos:end="237:13">x</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <call pos:start="237:17" pos:end="237:35"><name pos:start="237:17" pos:end="237:32">vmsvga_fifo_read</name><argument_list pos:start="237:33" pos:end="237:35">(<argument pos:start="237:34" pos:end="237:34"><expr pos:start="237:34" pos:end="237:34"><name pos:start="237:34" pos:end="237:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:36"><expr pos:start="239:13" pos:end="239:35"><name pos:start="239:13" pos:end="239:13">y</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <call pos:start="239:17" pos:end="239:35"><name pos:start="239:17" pos:end="239:32">vmsvga_fifo_read</name><argument_list pos:start="239:33" pos:end="239:35">(<argument pos:start="239:34" pos:end="239:34"><expr pos:start="239:34" pos:end="239:34"><name pos:start="239:34" pos:end="239:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:25"><expr pos:start="241:13" pos:end="241:24"><name pos:start="241:13" pos:end="241:16">args</name> <operator pos:start="241:18" pos:end="241:18">=</operator> <name pos:start="241:20" pos:end="241:20">x</name> <operator pos:start="241:22" pos:end="241:22">*</operator> <name pos:start="241:24" pos:end="241:24">y</name></expr>;</expr_stmt>

            <goto pos:start="243:13" pos:end="243:24">goto <name pos:start="243:18" pos:end="243:23">badcmd</name>;</goto>

        <case pos:start="245:9" pos:end="245:36">case <expr pos:start="245:14" pos:end="245:35"><name pos:start="245:14" pos:end="245:35">SVGA_CMD_RECT_ROP_FILL</name></expr>:</case>

            <expr_stmt pos:start="247:13" pos:end="247:21"><expr pos:start="247:13" pos:end="247:20"><name pos:start="247:13" pos:end="247:16">args</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <literal type="number" pos:start="247:20" pos:end="247:20">6</literal></expr>;</expr_stmt>

            <goto pos:start="249:13" pos:end="249:24">goto <name pos:start="249:18" pos:end="249:23">badcmd</name>;</goto>

        <case pos:start="251:9" pos:end="251:36">case <expr pos:start="251:14" pos:end="251:35"><name pos:start="251:14" pos:end="251:35">SVGA_CMD_RECT_ROP_COPY</name></expr>:</case>

            <expr_stmt pos:start="253:13" pos:end="253:21"><expr pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:16">args</name> <operator pos:start="253:18" pos:end="253:18">=</operator> <literal type="number" pos:start="253:20" pos:end="253:20">7</literal></expr>;</expr_stmt>

            <goto pos:start="255:13" pos:end="255:24">goto <name pos:start="255:18" pos:end="255:23">badcmd</name>;</goto>

        <case pos:start="257:9" pos:end="257:41">case <expr pos:start="257:14" pos:end="257:40"><name pos:start="257:14" pos:end="257:40">SVGA_CMD_DRAW_GLYPH_CLIPPED</name></expr>:</case>

            <expr_stmt pos:start="259:13" pos:end="259:21"><expr pos:start="259:13" pos:end="259:20"><name pos:start="259:13" pos:end="259:15">len</name> <operator pos:start="259:17" pos:end="259:18">-=</operator> <literal type="number" pos:start="259:20" pos:end="259:20">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="261:13" pos:end="265:13"><if pos:start="261:13" pos:end="265:13">if <condition pos:start="261:16" pos:end="261:24">(<expr pos:start="261:17" pos:end="261:23"><name pos:start="261:17" pos:end="261:19">len</name> <operator pos:start="261:21" pos:end="261:21">&lt;</operator> <literal type="number" pos:start="261:23" pos:end="261:23">0</literal></expr>)</condition> <block pos:start="261:26" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:28">

                <goto pos:start="263:17" pos:end="263:28">goto <name pos:start="263:22" pos:end="263:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:32"><expr pos:start="267:13" pos:end="267:31"><call pos:start="267:13" pos:end="267:31"><name pos:start="267:13" pos:end="267:28">vmsvga_fifo_read</name><argument_list pos:start="267:29" pos:end="267:31">(<argument pos:start="267:30" pos:end="267:30"><expr pos:start="267:30" pos:end="267:30"><name pos:start="267:30" pos:end="267:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:32"><expr pos:start="269:13" pos:end="269:31"><call pos:start="269:13" pos:end="269:31"><name pos:start="269:13" pos:end="269:28">vmsvga_fifo_read</name><argument_list pos:start="269:29" pos:end="269:31">(<argument pos:start="269:30" pos:end="269:30"><expr pos:start="269:30" pos:end="269:30"><name pos:start="269:30" pos:end="269:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:50"><expr pos:start="271:13" pos:end="271:49"><name pos:start="271:13" pos:end="271:16">args</name> <operator pos:start="271:18" pos:end="271:18">=</operator> <literal type="number" pos:start="271:20" pos:end="271:22">7</literal> <operator pos:start="271:22" pos:end="271:22">+</operator> <operator pos:start="271:24" pos:end="271:24">(</operator><call pos:start="271:25" pos:end="271:43"><name pos:start="271:25" pos:end="271:40">vmsvga_fifo_read</name><argument_list pos:start="271:41" pos:end="271:43">(<argument pos:start="271:42" pos:end="271:42"><expr pos:start="271:42" pos:end="271:42"><name pos:start="271:42" pos:end="271:42">s</name></expr></argument>)</argument_list></call> <operator pos:start="271:45" pos:end="271:46">&gt;&gt;</operator> <literal type="number" pos:start="271:48" pos:end="271:48">2</literal><operator pos:start="271:49" pos:end="271:49">)</operator></expr>;</expr_stmt>

            <goto pos:start="273:13" pos:end="273:24">goto <name pos:start="273:18" pos:end="273:23">badcmd</name>;</goto>

        <case pos:start="275:9" pos:end="275:42">case <expr pos:start="275:14" pos:end="275:41"><name pos:start="275:14" pos:end="275:41">SVGA_CMD_SURFACE_ALPHA_BLEND</name></expr>:</case>

            <expr_stmt pos:start="277:13" pos:end="277:22"><expr pos:start="277:13" pos:end="277:21"><name pos:start="277:13" pos:end="277:16">args</name> <operator pos:start="277:18" pos:end="277:18">=</operator> <literal type="number" pos:start="277:20" pos:end="277:21">12</literal></expr>;</expr_stmt>

            <goto pos:start="279:13" pos:end="279:24">goto <name pos:start="279:18" pos:end="279:23">badcmd</name>;</goto>



        <comment type="block" pos:start="283:9" pos:end="289:11">/*

         * Other commands that are not listed as depending on any

         * CAPABILITIES bits, but are not described in the README either.

         */</comment>

        <case pos:start="291:9" pos:end="291:35">case <expr pos:start="291:14" pos:end="291:34"><name pos:start="291:14" pos:end="291:34">SVGA_CMD_SURFACE_FILL</name></expr>:</case>

        <case pos:start="293:9" pos:end="293:35">case <expr pos:start="293:14" pos:end="293:34"><name pos:start="293:14" pos:end="293:34">SVGA_CMD_SURFACE_COPY</name></expr>:</case>

        <case pos:start="295:9" pos:end="295:37">case <expr pos:start="295:14" pos:end="295:36"><name pos:start="295:14" pos:end="295:36">SVGA_CMD_FRONT_ROP_FILL</name></expr>:</case>

        <case pos:start="297:9" pos:end="297:28">case <expr pos:start="297:14" pos:end="297:27"><name pos:start="297:14" pos:end="297:27">SVGA_CMD_FENCE</name></expr>:</case>

        <case pos:start="299:9" pos:end="299:34">case <expr pos:start="299:14" pos:end="299:33"><name pos:start="299:14" pos:end="299:33">SVGA_CMD_INVALID_CMD</name></expr>:</case>

            <break pos:start="301:13" pos:end="301:18">break;</break> <comment type="block" pos:start="301:20" pos:end="301:28">/* Nop */</comment>



        <default pos:start="305:9" pos:end="305:16">default:</default>

            <expr_stmt pos:start="307:13" pos:end="307:21"><expr pos:start="307:13" pos:end="307:20"><name pos:start="307:13" pos:end="307:16">args</name> <operator pos:start="307:18" pos:end="307:18">=</operator> <literal type="number" pos:start="307:20" pos:end="307:20">0</literal></expr>;</expr_stmt>

        <label pos:start="309:9" pos:end="309:15"><name pos:start="309:9" pos:end="309:14">badcmd</name>:</label>

            <expr_stmt pos:start="311:13" pos:end="311:24"><expr pos:start="311:13" pos:end="311:23"><name pos:start="311:13" pos:end="311:15">len</name> <operator pos:start="311:17" pos:end="311:18">-=</operator> <name pos:start="311:20" pos:end="311:23">args</name></expr>;</expr_stmt>

            <if_stmt pos:start="313:13" pos:end="317:13"><if pos:start="313:13" pos:end="317:13">if <condition pos:start="313:16" pos:end="313:24">(<expr pos:start="313:17" pos:end="313:23"><name pos:start="313:17" pos:end="313:19">len</name> <operator pos:start="313:21" pos:end="313:21">&lt;</operator> <literal type="number" pos:start="313:23" pos:end="313:23">0</literal></expr>)</condition> <block pos:start="313:26" pos:end="317:13">{<block_content pos:start="315:17" pos:end="315:28">

                <goto pos:start="315:17" pos:end="315:28">goto <name pos:start="315:22" pos:end="315:27">rewind</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <while pos:start="319:13" pos:end="323:13">while <condition pos:start="319:19" pos:end="319:26">(<expr pos:start="319:20" pos:end="319:25"><name pos:start="319:20" pos:end="319:23">args</name><operator pos:start="319:24" pos:end="319:25">--</operator></expr>)</condition> <block pos:start="319:28" pos:end="323:13">{<block_content pos:start="321:17" pos:end="321:36">

                <expr_stmt pos:start="321:17" pos:end="321:36"><expr pos:start="321:17" pos:end="321:35"><call pos:start="321:17" pos:end="321:35"><name pos:start="321:17" pos:end="321:32">vmsvga_fifo_read</name><argument_list pos:start="321:33" pos:end="321:35">(<argument pos:start="321:34" pos:end="321:34"><expr pos:start="321:34" pos:end="321:34"><name pos:start="321:34" pos:end="321:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="325:13" pos:end="327:34"><expr pos:start="325:13" pos:end="327:33"><call pos:start="325:13" pos:end="327:33"><name pos:start="325:13" pos:end="325:18">printf</name><argument_list pos:start="325:19" pos:end="327:33">(<argument pos:start="325:20" pos:end="325:70"><expr pos:start="325:20" pos:end="325:70"><literal type="string" pos:start="325:20" pos:end="325:70">"%s: Unknown command 0x%02x in SVGA command FIFO\n"</literal></expr></argument>,

                   <argument pos:start="327:20" pos:end="327:27"><expr pos:start="327:20" pos:end="327:27"><name pos:start="327:20" pos:end="327:27">__func__</name></expr></argument>, <argument pos:start="327:30" pos:end="327:32"><expr pos:start="327:30" pos:end="327:32"><name pos:start="327:30" pos:end="327:32">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="329:13" pos:end="329:18">break;</break>



        <label pos:start="333:9" pos:end="333:15"><name pos:start="333:9" pos:end="333:14">rewind</name>:</label>

            <expr_stmt pos:start="335:13" pos:end="335:37"><expr pos:start="335:13" pos:end="335:36"><name pos:start="335:13" pos:end="335:24"><name pos:start="335:13" pos:end="335:13">s</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:18">cmd</name><operator pos:start="335:19" pos:end="335:20">-&gt;</operator><name pos:start="335:21" pos:end="335:24">stop</name></name> <operator pos:start="335:26" pos:end="335:26">=</operator> <name pos:start="335:28" pos:end="335:36">cmd_start</name></expr>;</expr_stmt>

            <break pos:start="337:13" pos:end="337:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <expr_stmt pos:start="345:5" pos:end="345:19"><expr pos:start="345:5" pos:end="345:18"><name pos:start="345:5" pos:end="345:14"><name pos:start="345:5" pos:end="345:5">s</name><operator pos:start="345:6" pos:end="345:7">-&gt;</operator><name pos:start="345:8" pos:end="345:14">syncing</name></name> <operator pos:start="345:16" pos:end="345:16">=</operator> <literal type="number" pos:start="345:18" pos:end="345:18">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
