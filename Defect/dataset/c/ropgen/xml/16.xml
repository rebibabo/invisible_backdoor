<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:47"><name pos:start="1:1" pos:end="1:10">print_insn</name> <argument_list pos:start="1:12" pos:end="1:47">(<argument pos:start="1:13" pos:end="1:22">bfd_vma pc</argument>, <argument pos:start="1:25" pos:end="1:46">disassemble_info *info</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="887:1">{<block_content pos:start="5:3" pos:end="885:33">

  <decl_stmt pos:start="5:3" pos:end="5:26"><decl pos:start="5:3" pos:end="5:25"><type pos:start="5:3" pos:end="5:23"><specifier pos:start="5:3" pos:end="5:7">const</specifier> <name pos:start="5:9" pos:end="5:21"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:21">dis386</name></name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:25">dp</name></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:8"><decl pos:start="7:3" pos:end="7:7"><type pos:start="7:3" pos:end="7:5"><name pos:start="7:3" pos:end="7:5">int</name></type> <name pos:start="7:7" pos:end="7:7">i</name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:29"><decl pos:start="9:3" pos:end="9:28"><type pos:start="9:3" pos:end="9:8"><name pos:start="9:3" pos:end="9:6">char</name> <modifier pos:start="9:8" pos:end="9:8">*</modifier></type><name pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:14">op_txt</name><index pos:start="9:15" pos:end="9:28">[<expr pos:start="9:16" pos:end="9:27"><name pos:start="9:16" pos:end="9:27">MAX_OPERANDS</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:16"><decl pos:start="11:3" pos:end="11:15"><type pos:start="11:3" pos:end="11:5"><name pos:start="11:3" pos:end="11:5">int</name></type> <name pos:start="11:7" pos:end="11:15">needcomma</name></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:51"><decl pos:start="13:3" pos:end="13:32"><type pos:start="13:3" pos:end="13:15"><name pos:start="13:3" pos:end="13:10">unsigned</name> <name pos:start="13:12" pos:end="13:15">char</name></type> <name pos:start="13:17" pos:end="13:32">uses_DATA_prefix</name></decl>, <decl pos:start="13:35" pos:end="13:50"><type ref="prev" pos:start="13:3" pos:end="13:15"/><name pos:start="13:35" pos:end="13:50">uses_LOCK_prefix</name></decl>;</decl_stmt>

  <decl_stmt pos:start="15:3" pos:end="15:52"><decl pos:start="15:3" pos:end="15:33"><type pos:start="15:3" pos:end="15:15"><name pos:start="15:3" pos:end="15:10">unsigned</name> <name pos:start="15:12" pos:end="15:15">char</name></type> <name pos:start="15:17" pos:end="15:33">uses_REPNZ_prefix</name></decl>, <decl pos:start="15:36" pos:end="15:51"><type ref="prev" pos:start="15:3" pos:end="15:15"/><name pos:start="15:36" pos:end="15:51">uses_REPZ_prefix</name></decl>;</decl_stmt>

  <decl_stmt pos:start="17:3" pos:end="17:15"><decl pos:start="17:3" pos:end="17:14"><type pos:start="17:3" pos:end="17:5"><name pos:start="17:3" pos:end="17:5">int</name></type> <name pos:start="17:7" pos:end="17:14">sizeflag</name></decl>;</decl_stmt>

  <decl_stmt pos:start="19:3" pos:end="19:16"><decl pos:start="19:3" pos:end="19:15"><type pos:start="19:3" pos:end="19:14"><specifier pos:start="19:3" pos:end="19:7">const</specifier> <name pos:start="19:9" pos:end="19:12">char</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:15">p</name></decl>;</decl_stmt>

  <decl_stmt pos:start="21:3" pos:end="21:26"><decl pos:start="21:3" pos:end="21:25"><type pos:start="21:3" pos:end="21:20"><name pos:start="21:3" pos:end="21:20"><name pos:start="21:3" pos:end="21:8">struct</name> <name pos:start="21:10" pos:end="21:20">dis_private</name></name></type> <name pos:start="21:22" pos:end="21:25">priv</name></decl>;</decl_stmt>

  <decl_stmt pos:start="23:3" pos:end="23:19"><decl pos:start="23:3" pos:end="23:18"><type pos:start="23:3" pos:end="23:15"><name pos:start="23:3" pos:end="23:10">unsigned</name> <name pos:start="23:12" pos:end="23:15">char</name></type> <name pos:start="23:17" pos:end="23:18">op</name></decl>;</decl_stmt>

  <decl_stmt pos:start="25:3" pos:end="25:26"><decl pos:start="25:3" pos:end="25:25"><type pos:start="25:3" pos:end="25:15"><name pos:start="25:3" pos:end="25:10">unsigned</name> <name pos:start="25:12" pos:end="25:15">char</name></type> <name pos:start="25:17" pos:end="25:25">threebyte</name></decl>;</decl_stmt>



  <if_stmt pos:start="29:3" pos:end="37:30"><if pos:start="29:3" pos:end="33:30">if <condition pos:start="29:6" pos:end="31:39">(<expr pos:start="29:7" pos:end="31:38"><name pos:start="29:7" pos:end="29:16"><name pos:start="29:7" pos:end="29:10">info</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:16">mach</name></name> <operator pos:start="29:18" pos:end="29:19">==</operator> <name pos:start="29:21" pos:end="29:48">bfd_mach_x86_64_intel_syntax</name>

      <operator pos:start="31:7" pos:end="31:8">||</operator> <name pos:start="31:10" pos:end="31:19"><name pos:start="31:10" pos:end="31:13">info</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">mach</name></name> <operator pos:start="31:21" pos:end="31:22">==</operator> <name pos:start="31:24" pos:end="31:38">bfd_mach_x86_64</name></expr>)</condition><block type="pseudo" pos:start="33:5" pos:end="33:30"><block_content pos:start="33:5" pos:end="33:30">

    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:16">address_mode</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <name pos:start="33:20" pos:end="33:29">mode_64bit</name></expr>;</expr_stmt></block_content></block></if>

  <else pos:start="35:3" pos:end="37:30">else<block type="pseudo" pos:start="37:5" pos:end="37:30"><block_content pos:start="37:5" pos:end="37:30">

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:16">address_mode</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:29">mode_32bit</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



  <if_stmt pos:start="41:3" pos:end="45:67"><if pos:start="41:3" pos:end="45:67">if <condition pos:start="41:6" pos:end="41:32">(<expr pos:start="41:7" pos:end="41:31"><name pos:start="41:7" pos:end="41:18">intel_syntax</name> <operator pos:start="41:20" pos:end="41:21">==</operator> <operator pos:start="41:23" pos:end="41:23">(</operator><name pos:start="41:24" pos:end="41:27">char</name><operator pos:start="41:28" pos:end="41:28">)</operator> <operator pos:start="41:30" pos:end="41:30">-</operator><literal type="number" pos:start="41:31" pos:end="41:31">1</literal></expr>)</condition><block type="pseudo" pos:start="43:5" pos:end="45:67"><block_content pos:start="43:5" pos:end="45:67">

    <expr_stmt pos:start="43:5" pos:end="45:67"><expr pos:start="43:5" pos:end="45:66"><name pos:start="43:5" pos:end="43:16">intel_syntax</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:24">info</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:30">mach</name></name> <operator pos:start="43:32" pos:end="43:33">==</operator> <name pos:start="43:35" pos:end="43:65">bfd_mach_i386_i386_intel_syntax</name>

		    <operator pos:start="45:21" pos:end="45:22">||</operator> <name pos:start="45:24" pos:end="45:33"><name pos:start="45:24" pos:end="45:27">info</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:33">mach</name></name> <operator pos:start="45:35" pos:end="45:36">==</operator> <name pos:start="45:38" pos:end="45:65">bfd_mach_x86_64_intel_syntax</name><operator pos:start="45:66" pos:end="45:66">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <if_stmt pos:start="49:3" pos:end="65:13"><if pos:start="49:3" pos:end="57:39">if <condition pos:start="49:6" pos:end="55:52">(<expr pos:start="49:7" pos:end="55:51"><name pos:start="49:7" pos:end="49:16"><name pos:start="49:7" pos:end="49:10">info</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:16">mach</name></name> <operator pos:start="49:18" pos:end="49:19">==</operator> <name pos:start="49:21" pos:end="49:38">bfd_mach_i386_i386</name>

      <operator pos:start="51:7" pos:end="51:8">||</operator> <name pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:13">info</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:19">mach</name></name> <operator pos:start="51:21" pos:end="51:22">==</operator> <name pos:start="51:24" pos:end="51:38">bfd_mach_x86_64</name>

      <operator pos:start="53:7" pos:end="53:8">||</operator> <name pos:start="53:10" pos:end="53:19"><name pos:start="53:10" pos:end="53:13">info</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:19">mach</name></name> <operator pos:start="53:21" pos:end="53:22">==</operator> <name pos:start="53:24" pos:end="53:54">bfd_mach_i386_i386_intel_syntax</name>

      <operator pos:start="55:7" pos:end="55:8">||</operator> <name pos:start="55:10" pos:end="55:19"><name pos:start="55:10" pos:end="55:13">info</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:19">mach</name></name> <operator pos:start="55:21" pos:end="55:22">==</operator> <name pos:start="55:24" pos:end="55:51">bfd_mach_x86_64_intel_syntax</name></expr>)</condition><block type="pseudo" pos:start="57:5" pos:end="57:39"><block_content pos:start="57:5" pos:end="57:39">

    <expr_stmt pos:start="57:5" pos:end="57:39"><expr pos:start="57:5" pos:end="57:38"><name pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:8">priv</name><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:22">orig_sizeflag</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:30">AFLAG</name> <operator pos:start="57:32" pos:end="57:32">|</operator> <name pos:start="57:34" pos:end="57:38">DFLAG</name></expr>;</expr_stmt></block_content></block></if>

  <if type="elseif" pos:start="59:3" pos:end="61:27">else if <condition pos:start="59:11" pos:end="59:45">(<expr pos:start="59:12" pos:end="59:44"><name pos:start="59:12" pos:end="59:21"><name pos:start="59:12" pos:end="59:15">info</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:21">mach</name></name> <operator pos:start="59:23" pos:end="59:24">==</operator> <name pos:start="59:26" pos:end="59:44">bfd_mach_i386_i8086</name></expr>)</condition><block type="pseudo" pos:start="61:5" pos:end="61:27"><block_content pos:start="61:5" pos:end="61:27">

    <expr_stmt pos:start="61:5" pos:end="61:27"><expr pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:8">priv</name><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:22">orig_sizeflag</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>;</expr_stmt></block_content></block></if>

  <else pos:start="63:3" pos:end="65:13">else<block type="pseudo" pos:start="65:5" pos:end="65:13"><block_content pos:start="65:5" pos:end="65:13">

    <expr_stmt pos:start="65:5" pos:end="65:13"><expr pos:start="65:5" pos:end="65:12"><call pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:9">abort</name> <argument_list pos:start="65:11" pos:end="65:12">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



  <for pos:start="69:3" pos:end="179:5">for <control pos:start="69:7" pos:end="69:51">(<init pos:start="69:8" pos:end="69:38"><expr pos:start="69:8" pos:end="69:37"><name pos:start="69:8" pos:end="69:8">p</name> <operator pos:start="69:10" pos:end="69:10">=</operator> <name pos:start="69:12" pos:end="69:37"><name pos:start="69:12" pos:end="69:15">info</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:37">disassembler_options</name></name></expr>;</init> <condition pos:start="69:40" pos:end="69:49"><expr pos:start="69:40" pos:end="69:48"><name pos:start="69:40" pos:end="69:40">p</name> <operator pos:start="69:42" pos:end="69:43">!=</operator> <name pos:start="69:45" pos:end="69:48">NULL</name></expr>;</condition> <incr/>)</control>

    <block pos:start="71:5" pos:end="179:5">{<block_content pos:start="73:7" pos:end="177:12">

      <if_stmt pos:start="73:7" pos:end="169:44"><if pos:start="73:7" pos:end="81:9">if <condition pos:start="73:10" pos:end="73:40">(<expr pos:start="73:11" pos:end="73:39"><call pos:start="73:11" pos:end="73:34"><name pos:start="73:11" pos:end="73:17">strncmp</name> <argument_list pos:start="73:19" pos:end="73:34">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">p</name></expr></argument>, <argument pos:start="73:23" pos:end="73:30"><expr pos:start="73:23" pos:end="73:30"><literal type="string" pos:start="73:23" pos:end="73:30">"x86-64"</literal></expr></argument>, <argument pos:start="73:33" pos:end="73:33"><expr pos:start="73:33" pos:end="73:33"><literal type="number" pos:start="73:33" pos:end="73:33">6</literal></expr></argument>)</argument_list></call> <operator pos:start="73:36" pos:end="73:37">==</operator> <literal type="number" pos:start="73:39" pos:end="73:39">0</literal></expr>)</condition>

	<block pos:start="75:9" pos:end="81:9">{<block_content pos:start="77:11" pos:end="79:45">

	  <expr_stmt pos:start="77:11" pos:end="77:36"><expr pos:start="77:11" pos:end="77:35"><name pos:start="77:11" pos:end="77:22">address_mode</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:35">mode_64bit</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="79:11" pos:end="79:45"><expr pos:start="79:11" pos:end="79:44"><name pos:start="79:11" pos:end="79:28"><name pos:start="79:11" pos:end="79:14">priv</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:28">orig_sizeflag</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <name pos:start="79:32" pos:end="79:36">AFLAG</name> <operator pos:start="79:38" pos:end="79:38">|</operator> <name pos:start="79:40" pos:end="79:44">DFLAG</name></expr>;</expr_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="83:7" pos:end="91:9">else if <condition pos:start="83:15" pos:end="83:43">(<expr pos:start="83:16" pos:end="83:42"><call pos:start="83:16" pos:end="83:37"><name pos:start="83:16" pos:end="83:22">strncmp</name> <argument_list pos:start="83:24" pos:end="83:37">(<argument pos:start="83:25" pos:end="83:25"><expr pos:start="83:25" pos:end="83:25"><name pos:start="83:25" pos:end="83:25">p</name></expr></argument>, <argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><literal type="string" pos:start="83:28" pos:end="83:33">"i386"</literal></expr></argument>, <argument pos:start="83:36" pos:end="83:36"><expr pos:start="83:36" pos:end="83:36"><literal type="number" pos:start="83:36" pos:end="83:36">4</literal></expr></argument>)</argument_list></call> <operator pos:start="83:39" pos:end="83:40">==</operator> <literal type="number" pos:start="83:42" pos:end="83:42">0</literal></expr>)</condition>

	<block pos:start="85:9" pos:end="91:9">{<block_content pos:start="87:11" pos:end="89:45">

	  <expr_stmt pos:start="87:11" pos:end="87:36"><expr pos:start="87:11" pos:end="87:35"><name pos:start="87:11" pos:end="87:22">address_mode</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:35">mode_32bit</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="89:11" pos:end="89:45"><expr pos:start="89:11" pos:end="89:44"><name pos:start="89:11" pos:end="89:28"><name pos:start="89:11" pos:end="89:14">priv</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:28">orig_sizeflag</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <name pos:start="89:32" pos:end="89:36">AFLAG</name> <operator pos:start="89:38" pos:end="89:38">|</operator> <name pos:start="89:40" pos:end="89:44">DFLAG</name></expr>;</expr_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="93:7" pos:end="101:9">else if <condition pos:start="93:15" pos:end="93:44">(<expr pos:start="93:16" pos:end="93:43"><call pos:start="93:16" pos:end="93:38"><name pos:start="93:16" pos:end="93:22">strncmp</name> <argument_list pos:start="93:24" pos:end="93:38">(<argument pos:start="93:25" pos:end="93:25"><expr pos:start="93:25" pos:end="93:25"><name pos:start="93:25" pos:end="93:25">p</name></expr></argument>, <argument pos:start="93:28" pos:end="93:34"><expr pos:start="93:28" pos:end="93:34"><literal type="string" pos:start="93:28" pos:end="93:34">"i8086"</literal></expr></argument>, <argument pos:start="93:37" pos:end="93:37"><expr pos:start="93:37" pos:end="93:37"><literal type="number" pos:start="93:37" pos:end="93:37">5</literal></expr></argument>)</argument_list></call> <operator pos:start="93:40" pos:end="93:41">==</operator> <literal type="number" pos:start="93:43" pos:end="93:43">0</literal></expr>)</condition>

	<block pos:start="95:9" pos:end="101:9">{<block_content pos:start="97:11" pos:end="99:33">

	  <expr_stmt pos:start="97:11" pos:end="97:36"><expr pos:start="97:11" pos:end="97:35"><name pos:start="97:11" pos:end="97:22">address_mode</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:35">mode_16bit</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="99:11" pos:end="99:33"><expr pos:start="99:11" pos:end="99:32"><name pos:start="99:11" pos:end="99:28"><name pos:start="99:11" pos:end="99:14">priv</name><operator pos:start="99:15" pos:end="99:15">.</operator><name pos:start="99:16" pos:end="99:28">orig_sizeflag</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <literal type="number" pos:start="99:32" pos:end="99:32">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="103:7" pos:end="109:9">else if <condition pos:start="103:15" pos:end="103:44">(<expr pos:start="103:16" pos:end="103:43"><call pos:start="103:16" pos:end="103:38"><name pos:start="103:16" pos:end="103:22">strncmp</name> <argument_list pos:start="103:24" pos:end="103:38">(<argument pos:start="103:25" pos:end="103:25"><expr pos:start="103:25" pos:end="103:25"><name pos:start="103:25" pos:end="103:25">p</name></expr></argument>, <argument pos:start="103:28" pos:end="103:34"><expr pos:start="103:28" pos:end="103:34"><literal type="string" pos:start="103:28" pos:end="103:34">"intel"</literal></expr></argument>, <argument pos:start="103:37" pos:end="103:37"><expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">5</literal></expr></argument>)</argument_list></call> <operator pos:start="103:40" pos:end="103:41">==</operator> <literal type="number" pos:start="103:43" pos:end="103:43">0</literal></expr>)</condition>

	<block pos:start="105:9" pos:end="109:9">{<block_content pos:start="107:11" pos:end="107:27">

	  <expr_stmt pos:start="107:11" pos:end="107:27"><expr pos:start="107:11" pos:end="107:26"><name pos:start="107:11" pos:end="107:22">intel_syntax</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="number" pos:start="107:26" pos:end="107:26">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="111:7" pos:end="117:9">else if <condition pos:start="111:15" pos:end="111:42">(<expr pos:start="111:16" pos:end="111:41"><call pos:start="111:16" pos:end="111:36"><name pos:start="111:16" pos:end="111:22">strncmp</name> <argument_list pos:start="111:24" pos:end="111:36">(<argument pos:start="111:25" pos:end="111:25"><expr pos:start="111:25" pos:end="111:25"><name pos:start="111:25" pos:end="111:25">p</name></expr></argument>, <argument pos:start="111:28" pos:end="111:32"><expr pos:start="111:28" pos:end="111:32"><literal type="string" pos:start="111:28" pos:end="111:32">"att"</literal></expr></argument>, <argument pos:start="111:35" pos:end="111:35"><expr pos:start="111:35" pos:end="111:35"><literal type="number" pos:start="111:35" pos:end="111:35">3</literal></expr></argument>)</argument_list></call> <operator pos:start="111:38" pos:end="111:39">==</operator> <literal type="number" pos:start="111:41" pos:end="111:41">0</literal></expr>)</condition>

	<block pos:start="113:9" pos:end="117:9">{<block_content pos:start="115:11" pos:end="115:27">

	  <expr_stmt pos:start="115:11" pos:end="115:27"><expr pos:start="115:11" pos:end="115:26"><name pos:start="115:11" pos:end="115:22">intel_syntax</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>;</expr_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="119:7" pos:end="151:9">else if <condition pos:start="119:15" pos:end="119:43">(<expr pos:start="119:16" pos:end="119:42"><call pos:start="119:16" pos:end="119:37"><name pos:start="119:16" pos:end="119:22">strncmp</name> <argument_list pos:start="119:24" pos:end="119:37">(<argument pos:start="119:25" pos:end="119:25"><expr pos:start="119:25" pos:end="119:25"><name pos:start="119:25" pos:end="119:25">p</name></expr></argument>, <argument pos:start="119:28" pos:end="119:33"><expr pos:start="119:28" pos:end="119:33"><literal type="string" pos:start="119:28" pos:end="119:33">"addr"</literal></expr></argument>, <argument pos:start="119:36" pos:end="119:36"><expr pos:start="119:36" pos:end="119:36"><literal type="number" pos:start="119:36" pos:end="119:36">4</literal></expr></argument>)</argument_list></call> <operator pos:start="119:39" pos:end="119:40">==</operator> <literal type="number" pos:start="119:42" pos:end="119:42">0</literal></expr>)</condition>

	<block pos:start="121:9" pos:end="151:9">{<block_content pos:start="123:11" pos:end="149:13">

	  <if_stmt pos:start="123:11" pos:end="149:13"><if pos:start="123:11" pos:end="135:13">if <condition pos:start="123:14" pos:end="123:41">(<expr pos:start="123:15" pos:end="123:40"><name pos:start="123:15" pos:end="123:26">address_mode</name> <operator pos:start="123:28" pos:end="123:29">==</operator> <name pos:start="123:31" pos:end="123:40">mode_64bit</name></expr>)</condition>

	    <block pos:start="125:13" pos:end="135:13">{<block_content pos:start="127:15" pos:end="133:44">

	      <if_stmt pos:start="127:15" pos:end="133:44"><if pos:start="127:15" pos:end="129:45">if <condition pos:start="127:18" pos:end="127:45">(<expr pos:start="127:19" pos:end="127:44"><name pos:start="127:19" pos:end="127:22"><name pos:start="127:19" pos:end="127:19">p</name><index pos:start="127:20" pos:end="127:22">[<expr pos:start="127:21" pos:end="127:21"><literal type="number" pos:start="127:21" pos:end="127:21">4</literal></expr>]</index></name> <operator pos:start="127:24" pos:end="127:25">==</operator> <literal type="char" pos:start="127:27" pos:end="127:29">'3'</literal> <operator pos:start="127:31" pos:end="127:32">&amp;&amp;</operator> <name pos:start="127:34" pos:end="127:37"><name pos:start="127:34" pos:end="127:34">p</name><index pos:start="127:35" pos:end="127:37">[<expr pos:start="127:36" pos:end="127:36"><literal type="number" pos:start="127:36" pos:end="127:36">5</literal></expr>]</index></name> <operator pos:start="127:39" pos:end="127:40">==</operator> <literal type="char" pos:start="127:42" pos:end="127:44">'2'</literal></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:45"><block_content pos:start="129:17" pos:end="129:45">

		<expr_stmt pos:start="129:17" pos:end="129:45"><expr pos:start="129:17" pos:end="129:44"><name pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:20">priv</name><operator pos:start="129:21" pos:end="129:21">.</operator><name pos:start="129:22" pos:end="129:34">orig_sizeflag</name></name> <operator pos:start="129:36" pos:end="129:37">&amp;=</operator> <operator pos:start="129:39" pos:end="129:39">~</operator><name pos:start="129:40" pos:end="129:44">AFLAG</name></expr>;</expr_stmt></block_content></block></if>

	      <if type="elseif" pos:start="131:15" pos:end="133:44">else if <condition pos:start="131:23" pos:end="131:50">(<expr pos:start="131:24" pos:end="131:49"><name pos:start="131:24" pos:end="131:27"><name pos:start="131:24" pos:end="131:24">p</name><index pos:start="131:25" pos:end="131:27">[<expr pos:start="131:26" pos:end="131:26"><literal type="number" pos:start="131:26" pos:end="131:26">4</literal></expr>]</index></name> <operator pos:start="131:29" pos:end="131:30">==</operator> <literal type="char" pos:start="131:32" pos:end="131:34">'6'</literal> <operator pos:start="131:36" pos:end="131:37">&amp;&amp;</operator> <name pos:start="131:39" pos:end="131:42"><name pos:start="131:39" pos:end="131:39">p</name><index pos:start="131:40" pos:end="131:42">[<expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">5</literal></expr>]</index></name> <operator pos:start="131:44" pos:end="131:45">==</operator> <literal type="char" pos:start="131:47" pos:end="131:49">'4'</literal></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:44"><block_content pos:start="133:17" pos:end="133:44">

		<expr_stmt pos:start="133:17" pos:end="133:44"><expr pos:start="133:17" pos:end="133:43"><name pos:start="133:17" pos:end="133:34"><name pos:start="133:17" pos:end="133:20">priv</name><operator pos:start="133:21" pos:end="133:21">.</operator><name pos:start="133:22" pos:end="133:34">orig_sizeflag</name></name> <operator pos:start="133:36" pos:end="133:37">|=</operator> <name pos:start="133:39" pos:end="133:43">AFLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    </block_content>}</block></if>

	  <else pos:start="137:11" pos:end="149:13">else

	    <block pos:start="139:13" pos:end="149:13">{<block_content pos:start="141:15" pos:end="147:44">

	      <if_stmt pos:start="141:15" pos:end="147:44"><if pos:start="141:15" pos:end="143:45">if <condition pos:start="141:18" pos:end="141:45">(<expr pos:start="141:19" pos:end="141:44"><name pos:start="141:19" pos:end="141:22"><name pos:start="141:19" pos:end="141:19">p</name><index pos:start="141:20" pos:end="141:22">[<expr pos:start="141:21" pos:end="141:21"><literal type="number" pos:start="141:21" pos:end="141:21">4</literal></expr>]</index></name> <operator pos:start="141:24" pos:end="141:25">==</operator> <literal type="char" pos:start="141:27" pos:end="141:29">'1'</literal> <operator pos:start="141:31" pos:end="141:32">&amp;&amp;</operator> <name pos:start="141:34" pos:end="141:37"><name pos:start="141:34" pos:end="141:34">p</name><index pos:start="141:35" pos:end="141:37">[<expr pos:start="141:36" pos:end="141:36"><literal type="number" pos:start="141:36" pos:end="141:36">5</literal></expr>]</index></name> <operator pos:start="141:39" pos:end="141:40">==</operator> <literal type="char" pos:start="141:42" pos:end="141:44">'6'</literal></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:45"><block_content pos:start="143:17" pos:end="143:45">

		<expr_stmt pos:start="143:17" pos:end="143:45"><expr pos:start="143:17" pos:end="143:44"><name pos:start="143:17" pos:end="143:34"><name pos:start="143:17" pos:end="143:20">priv</name><operator pos:start="143:21" pos:end="143:21">.</operator><name pos:start="143:22" pos:end="143:34">orig_sizeflag</name></name> <operator pos:start="143:36" pos:end="143:37">&amp;=</operator> <operator pos:start="143:39" pos:end="143:39">~</operator><name pos:start="143:40" pos:end="143:44">AFLAG</name></expr>;</expr_stmt></block_content></block></if>

	      <if type="elseif" pos:start="145:15" pos:end="147:44">else if <condition pos:start="145:23" pos:end="145:50">(<expr pos:start="145:24" pos:end="145:49"><name pos:start="145:24" pos:end="145:27"><name pos:start="145:24" pos:end="145:24">p</name><index pos:start="145:25" pos:end="145:27">[<expr pos:start="145:26" pos:end="145:26"><literal type="number" pos:start="145:26" pos:end="145:26">4</literal></expr>]</index></name> <operator pos:start="145:29" pos:end="145:30">==</operator> <literal type="char" pos:start="145:32" pos:end="145:34">'3'</literal> <operator pos:start="145:36" pos:end="145:37">&amp;&amp;</operator> <name pos:start="145:39" pos:end="145:42"><name pos:start="145:39" pos:end="145:39">p</name><index pos:start="145:40" pos:end="145:42">[<expr pos:start="145:41" pos:end="145:41"><literal type="number" pos:start="145:41" pos:end="145:41">5</literal></expr>]</index></name> <operator pos:start="145:44" pos:end="145:45">==</operator> <literal type="char" pos:start="145:47" pos:end="145:49">'2'</literal></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:44"><block_content pos:start="147:17" pos:end="147:44">

		<expr_stmt pos:start="147:17" pos:end="147:44"><expr pos:start="147:17" pos:end="147:43"><name pos:start="147:17" pos:end="147:34"><name pos:start="147:17" pos:end="147:20">priv</name><operator pos:start="147:21" pos:end="147:21">.</operator><name pos:start="147:22" pos:end="147:34">orig_sizeflag</name></name> <operator pos:start="147:36" pos:end="147:37">|=</operator> <name pos:start="147:39" pos:end="147:43">AFLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    </block_content>}</block></else></if_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="153:7" pos:end="165:9">else if <condition pos:start="153:15" pos:end="153:43">(<expr pos:start="153:16" pos:end="153:42"><call pos:start="153:16" pos:end="153:37"><name pos:start="153:16" pos:end="153:22">strncmp</name> <argument_list pos:start="153:24" pos:end="153:37">(<argument pos:start="153:25" pos:end="153:25"><expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">p</name></expr></argument>, <argument pos:start="153:28" pos:end="153:33"><expr pos:start="153:28" pos:end="153:33"><literal type="string" pos:start="153:28" pos:end="153:33">"data"</literal></expr></argument>, <argument pos:start="153:36" pos:end="153:36"><expr pos:start="153:36" pos:end="153:36"><literal type="number" pos:start="153:36" pos:end="153:36">4</literal></expr></argument>)</argument_list></call> <operator pos:start="153:39" pos:end="153:40">==</operator> <literal type="number" pos:start="153:42" pos:end="153:42">0</literal></expr>)</condition>

	<block pos:start="155:9" pos:end="165:9">{<block_content pos:start="157:11" pos:end="163:40">

	  <if_stmt pos:start="157:11" pos:end="163:40"><if pos:start="157:11" pos:end="159:41">if <condition pos:start="157:14" pos:end="157:41">(<expr pos:start="157:15" pos:end="157:40"><name pos:start="157:15" pos:end="157:18"><name pos:start="157:15" pos:end="157:15">p</name><index pos:start="157:16" pos:end="157:18">[<expr pos:start="157:17" pos:end="157:17"><literal type="number" pos:start="157:17" pos:end="157:17">4</literal></expr>]</index></name> <operator pos:start="157:20" pos:end="157:21">==</operator> <literal type="char" pos:start="157:23" pos:end="157:25">'1'</literal> <operator pos:start="157:27" pos:end="157:28">&amp;&amp;</operator> <name pos:start="157:30" pos:end="157:33"><name pos:start="157:30" pos:end="157:30">p</name><index pos:start="157:31" pos:end="157:33">[<expr pos:start="157:32" pos:end="157:32"><literal type="number" pos:start="157:32" pos:end="157:32">5</literal></expr>]</index></name> <operator pos:start="157:35" pos:end="157:36">==</operator> <literal type="char" pos:start="157:38" pos:end="157:40">'6'</literal></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:41"><block_content pos:start="159:13" pos:end="159:41">

	    <expr_stmt pos:start="159:13" pos:end="159:41"><expr pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:16">priv</name><operator pos:start="159:17" pos:end="159:17">.</operator><name pos:start="159:18" pos:end="159:30">orig_sizeflag</name></name> <operator pos:start="159:32" pos:end="159:33">&amp;=</operator> <operator pos:start="159:35" pos:end="159:35">~</operator><name pos:start="159:36" pos:end="159:40">DFLAG</name></expr>;</expr_stmt></block_content></block></if>

	  <if type="elseif" pos:start="161:11" pos:end="163:40">else if <condition pos:start="161:19" pos:end="161:46">(<expr pos:start="161:20" pos:end="161:45"><name pos:start="161:20" pos:end="161:23"><name pos:start="161:20" pos:end="161:20">p</name><index pos:start="161:21" pos:end="161:23">[<expr pos:start="161:22" pos:end="161:22"><literal type="number" pos:start="161:22" pos:end="161:22">4</literal></expr>]</index></name> <operator pos:start="161:25" pos:end="161:26">==</operator> <literal type="char" pos:start="161:28" pos:end="161:30">'3'</literal> <operator pos:start="161:32" pos:end="161:33">&amp;&amp;</operator> <name pos:start="161:35" pos:end="161:38"><name pos:start="161:35" pos:end="161:35">p</name><index pos:start="161:36" pos:end="161:38">[<expr pos:start="161:37" pos:end="161:37"><literal type="number" pos:start="161:37" pos:end="161:37">5</literal></expr>]</index></name> <operator pos:start="161:40" pos:end="161:41">==</operator> <literal type="char" pos:start="161:43" pos:end="161:45">'2'</literal></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:40"><block_content pos:start="163:13" pos:end="163:40">

	    <expr_stmt pos:start="163:13" pos:end="163:40"><expr pos:start="163:13" pos:end="163:39"><name pos:start="163:13" pos:end="163:30"><name pos:start="163:13" pos:end="163:16">priv</name><operator pos:start="163:17" pos:end="163:17">.</operator><name pos:start="163:18" pos:end="163:30">orig_sizeflag</name></name> <operator pos:start="163:32" pos:end="163:33">|=</operator> <name pos:start="163:35" pos:end="163:39">DFLAG</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if>

      <if type="elseif" pos:start="167:7" pos:end="169:44">else if <condition pos:start="167:15" pos:end="167:45">(<expr pos:start="167:16" pos:end="167:44"><call pos:start="167:16" pos:end="167:39"><name pos:start="167:16" pos:end="167:22">strncmp</name> <argument_list pos:start="167:24" pos:end="167:39">(<argument pos:start="167:25" pos:end="167:25"><expr pos:start="167:25" pos:end="167:25"><name pos:start="167:25" pos:end="167:25">p</name></expr></argument>, <argument pos:start="167:28" pos:end="167:35"><expr pos:start="167:28" pos:end="167:35"><literal type="string" pos:start="167:28" pos:end="167:35">"suffix"</literal></expr></argument>, <argument pos:start="167:38" pos:end="167:38"><expr pos:start="167:38" pos:end="167:38"><literal type="number" pos:start="167:38" pos:end="167:38">6</literal></expr></argument>)</argument_list></call> <operator pos:start="167:41" pos:end="167:42">==</operator> <literal type="number" pos:start="167:44" pos:end="167:44">0</literal></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:44"><block_content pos:start="169:9" pos:end="169:44">

	<expr_stmt pos:start="169:9" pos:end="169:44"><expr pos:start="169:9" pos:end="169:43"><name pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:12">priv</name><operator pos:start="169:13" pos:end="169:13">.</operator><name pos:start="169:14" pos:end="169:26">orig_sizeflag</name></name> <operator pos:start="169:28" pos:end="169:29">|=</operator> <name pos:start="169:31" pos:end="169:43">SUFFIX_ALWAYS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



      <expr_stmt pos:start="173:7" pos:end="173:26"><expr pos:start="173:7" pos:end="173:25"><name pos:start="173:7" pos:end="173:7">p</name> <operator pos:start="173:9" pos:end="173:9">=</operator> <call pos:start="173:11" pos:end="173:25"><name pos:start="173:11" pos:end="173:16">strchr</name> <argument_list pos:start="173:18" pos:end="173:25">(<argument pos:start="173:19" pos:end="173:19"><expr pos:start="173:19" pos:end="173:19"><name pos:start="173:19" pos:end="173:19">p</name></expr></argument>, <argument pos:start="173:22" pos:end="173:24"><expr pos:start="173:22" pos:end="173:24"><literal type="char" pos:start="173:22" pos:end="173:24">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="175:7" pos:end="177:12"><if pos:start="175:7" pos:end="177:12">if <condition pos:start="175:10" pos:end="175:20">(<expr pos:start="175:11" pos:end="175:19"><name pos:start="175:11" pos:end="175:11">p</name> <operator pos:start="175:13" pos:end="175:14">!=</operator> <name pos:start="175:16" pos:end="175:19">NULL</name></expr>)</condition><block type="pseudo" pos:start="177:9" pos:end="177:12"><block_content pos:start="177:9" pos:end="177:12">

	<expr_stmt pos:start="177:9" pos:end="177:12"><expr pos:start="177:9" pos:end="177:11"><name pos:start="177:9" pos:end="177:9">p</name><operator pos:start="177:10" pos:end="177:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



  <if_stmt pos:start="183:3" pos:end="237:5"><if pos:start="183:3" pos:end="209:5">if <condition pos:start="183:6" pos:end="183:19">(<expr pos:start="183:7" pos:end="183:18"><name pos:start="183:7" pos:end="183:18">intel_syntax</name></expr>)</condition>

    <block pos:start="185:5" pos:end="209:5">{<block_content pos:start="187:7" pos:end="207:23">

      <expr_stmt pos:start="187:7" pos:end="187:30"><expr pos:start="187:7" pos:end="187:29"><name pos:start="187:7" pos:end="187:13">names64</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <name pos:start="187:17" pos:end="187:29">intel_names64</name></expr>;</expr_stmt>

      <expr_stmt pos:start="189:7" pos:end="189:30"><expr pos:start="189:7" pos:end="189:29"><name pos:start="189:7" pos:end="189:13">names32</name> <operator pos:start="189:15" pos:end="189:15">=</operator> <name pos:start="189:17" pos:end="189:29">intel_names32</name></expr>;</expr_stmt>

      <expr_stmt pos:start="191:7" pos:end="191:30"><expr pos:start="191:7" pos:end="191:29"><name pos:start="191:7" pos:end="191:13">names16</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <name pos:start="191:17" pos:end="191:29">intel_names16</name></expr>;</expr_stmt>

      <expr_stmt pos:start="193:7" pos:end="193:28"><expr pos:start="193:7" pos:end="193:27"><name pos:start="193:7" pos:end="193:12">names8</name> <operator pos:start="193:14" pos:end="193:14">=</operator> <name pos:start="193:16" pos:end="193:27">intel_names8</name></expr>;</expr_stmt>

      <expr_stmt pos:start="195:7" pos:end="195:34"><expr pos:start="195:7" pos:end="195:33"><name pos:start="195:7" pos:end="195:15">names8rex</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <name pos:start="195:19" pos:end="195:33">intel_names8rex</name></expr>;</expr_stmt>

      <expr_stmt pos:start="197:7" pos:end="197:34"><expr pos:start="197:7" pos:end="197:33"><name pos:start="197:7" pos:end="197:15">names_seg</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <name pos:start="197:19" pos:end="197:33">intel_names_seg</name></expr>;</expr_stmt>

      <expr_stmt pos:start="199:7" pos:end="199:30"><expr pos:start="199:7" pos:end="199:29"><name pos:start="199:7" pos:end="199:13">index16</name> <operator pos:start="199:15" pos:end="199:15">=</operator> <name pos:start="199:17" pos:end="199:29">intel_index16</name></expr>;</expr_stmt>

      <expr_stmt pos:start="201:7" pos:end="201:22"><expr pos:start="201:7" pos:end="201:21"><name pos:start="201:7" pos:end="201:15">open_char</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <literal type="char" pos:start="201:19" pos:end="201:21">'['</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="203:7" pos:end="203:23"><expr pos:start="203:7" pos:end="203:22"><name pos:start="203:7" pos:end="203:16">close_char</name> <operator pos:start="203:18" pos:end="203:18">=</operator> <literal type="char" pos:start="203:20" pos:end="203:22">']'</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="205:7" pos:end="205:27"><expr pos:start="205:7" pos:end="205:26"><name pos:start="205:7" pos:end="205:20">separator_char</name> <operator pos:start="205:22" pos:end="205:22">=</operator> <literal type="char" pos:start="205:24" pos:end="205:26">'+'</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="207:7" pos:end="207:23"><expr pos:start="207:7" pos:end="207:22"><name pos:start="207:7" pos:end="207:16">scale_char</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <literal type="char" pos:start="207:20" pos:end="207:22">'*'</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

  <else pos:start="211:3" pos:end="237:5">else

    <block pos:start="213:5" pos:end="237:5">{<block_content pos:start="215:7" pos:end="235:23">

      <expr_stmt pos:start="215:7" pos:end="215:28"><expr pos:start="215:7" pos:end="215:27"><name pos:start="215:7" pos:end="215:13">names64</name> <operator pos:start="215:15" pos:end="215:15">=</operator> <name pos:start="215:17" pos:end="215:27">att_names64</name></expr>;</expr_stmt>

      <expr_stmt pos:start="217:7" pos:end="217:28"><expr pos:start="217:7" pos:end="217:27"><name pos:start="217:7" pos:end="217:13">names32</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <name pos:start="217:17" pos:end="217:27">att_names32</name></expr>;</expr_stmt>

      <expr_stmt pos:start="219:7" pos:end="219:28"><expr pos:start="219:7" pos:end="219:27"><name pos:start="219:7" pos:end="219:13">names16</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:27">att_names16</name></expr>;</expr_stmt>

      <expr_stmt pos:start="221:7" pos:end="221:26"><expr pos:start="221:7" pos:end="221:25"><name pos:start="221:7" pos:end="221:12">names8</name> <operator pos:start="221:14" pos:end="221:14">=</operator> <name pos:start="221:16" pos:end="221:25">att_names8</name></expr>;</expr_stmt>

      <expr_stmt pos:start="223:7" pos:end="223:32"><expr pos:start="223:7" pos:end="223:31"><name pos:start="223:7" pos:end="223:15">names8rex</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <name pos:start="223:19" pos:end="223:31">att_names8rex</name></expr>;</expr_stmt>

      <expr_stmt pos:start="225:7" pos:end="225:32"><expr pos:start="225:7" pos:end="225:31"><name pos:start="225:7" pos:end="225:15">names_seg</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <name pos:start="225:19" pos:end="225:31">att_names_seg</name></expr>;</expr_stmt>

      <expr_stmt pos:start="227:7" pos:end="227:28"><expr pos:start="227:7" pos:end="227:27"><name pos:start="227:7" pos:end="227:13">index16</name> <operator pos:start="227:15" pos:end="227:15">=</operator> <name pos:start="227:17" pos:end="227:27">att_index16</name></expr>;</expr_stmt>

      <expr_stmt pos:start="229:7" pos:end="229:22"><expr pos:start="229:7" pos:end="229:21"><name pos:start="229:7" pos:end="229:15">open_char</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <literal type="char" pos:start="229:19" pos:end="229:21">'('</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="231:7" pos:end="231:24"><expr pos:start="231:7" pos:end="231:23"><name pos:start="231:7" pos:end="231:16">close_char</name> <operator pos:start="231:18" pos:end="231:18">=</operator>  <literal type="char" pos:start="231:21" pos:end="231:23">')'</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="233:7" pos:end="233:27"><expr pos:start="233:7" pos:end="233:26"><name pos:start="233:7" pos:end="233:20">separator_char</name> <operator pos:start="233:22" pos:end="233:22">=</operator> <literal type="char" pos:start="233:24" pos:end="233:26">','</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="235:7" pos:end="235:23"><expr pos:start="235:7" pos:end="235:22"><name pos:start="235:7" pos:end="235:16">scale_char</name> <operator pos:start="235:18" pos:end="235:18">=</operator> <literal type="char" pos:start="235:20" pos:end="235:22">','</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



  <comment type="block" pos:start="241:3" pos:end="243:59">/* The output looks better if we put 7 bytes on a line, since that

     puts most long word instructions on a single line.  */</comment>

  <expr_stmt pos:start="245:3" pos:end="245:27"><expr pos:start="245:3" pos:end="245:26"><name pos:start="245:3" pos:end="245:22"><name pos:start="245:3" pos:end="245:6">info</name><operator pos:start="245:7" pos:end="245:8">-&gt;</operator><name pos:start="245:9" pos:end="245:22">bytes_per_line</name></name> <operator pos:start="245:24" pos:end="245:24">=</operator> <literal type="number" pos:start="245:26" pos:end="245:26">7</literal></expr>;</expr_stmt>



  <expr_stmt pos:start="249:3" pos:end="249:29"><expr pos:start="249:3" pos:end="249:28"><name pos:start="249:3" pos:end="249:20"><name pos:start="249:3" pos:end="249:6">info</name><operator pos:start="249:7" pos:end="249:8">-&gt;</operator><name pos:start="249:9" pos:end="249:20">private_data</name></name> <operator pos:start="249:22" pos:end="249:22">=</operator> <operator pos:start="249:24" pos:end="249:24">&amp;</operator><name pos:start="249:25" pos:end="249:28">priv</name></expr>;</expr_stmt>

  <expr_stmt pos:start="251:3" pos:end="251:37"><expr pos:start="251:3" pos:end="251:36"><name pos:start="251:3" pos:end="251:18"><name pos:start="251:3" pos:end="251:6">priv</name><operator pos:start="251:7" pos:end="251:7">.</operator><name pos:start="251:8" pos:end="251:18">max_fetched</name></name> <operator pos:start="251:20" pos:end="251:20">=</operator> <name pos:start="251:22" pos:end="251:36"><name pos:start="251:22" pos:end="251:25">priv</name><operator pos:start="251:26" pos:end="251:26">.</operator><name pos:start="251:27" pos:end="251:36">the_buffer</name></name></expr>;</expr_stmt>

  <expr_stmt pos:start="253:3" pos:end="253:23"><expr pos:start="253:3" pos:end="253:22"><name pos:start="253:3" pos:end="253:17"><name pos:start="253:3" pos:end="253:6">priv</name><operator pos:start="253:7" pos:end="253:7">.</operator><name pos:start="253:8" pos:end="253:17">insn_start</name></name> <operator pos:start="253:19" pos:end="253:19">=</operator> <name pos:start="253:21" pos:end="253:22">pc</name></expr>;</expr_stmt>



  <expr_stmt pos:start="257:3" pos:end="257:14"><expr pos:start="257:3" pos:end="257:13"><name pos:start="257:3" pos:end="257:9"><name pos:start="257:3" pos:end="257:6">obuf</name><index pos:start="257:7" pos:end="257:9">[<expr pos:start="257:8" pos:end="257:8"><literal type="number" pos:start="257:8" pos:end="257:8">0</literal></expr>]</index></name> <operator pos:start="257:11" pos:end="257:11">=</operator> <literal type="number" pos:start="257:13" pos:end="257:13">0</literal></expr>;</expr_stmt>

  <for pos:start="259:3" pos:end="267:5">for <control pos:start="259:7" pos:end="259:36">(<init pos:start="259:8" pos:end="259:13"><expr pos:start="259:8" pos:end="259:12"><name pos:start="259:8" pos:end="259:8">i</name> <operator pos:start="259:10" pos:end="259:10">=</operator> <literal type="number" pos:start="259:12" pos:end="259:12">0</literal></expr>;</init> <condition pos:start="259:15" pos:end="259:31"><expr pos:start="259:15" pos:end="259:30"><name pos:start="259:15" pos:end="259:15">i</name> <operator pos:start="259:17" pos:end="259:17">&lt;</operator> <name pos:start="259:19" pos:end="259:30">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="259:33" pos:end="259:35"><expr pos:start="259:33" pos:end="259:35"><operator pos:start="259:33" pos:end="259:34">++</operator><name pos:start="259:35" pos:end="259:35">i</name></expr></incr>)</control>

    <block pos:start="261:5" pos:end="267:5">{<block_content pos:start="263:7" pos:end="265:23">

      <expr_stmt pos:start="263:7" pos:end="263:23"><expr pos:start="263:7" pos:end="263:22"><name pos:start="263:7" pos:end="263:18"><name pos:start="263:7" pos:end="263:12">op_out</name><index pos:start="263:13" pos:end="263:15">[<expr pos:start="263:14" pos:end="263:14"><name pos:start="263:14" pos:end="263:14">i</name></expr>]</index><index pos:start="263:16" pos:end="263:18">[<expr pos:start="263:17" pos:end="263:17"><literal type="number" pos:start="263:17" pos:end="263:17">0</literal></expr>]</index></name> <operator pos:start="263:20" pos:end="263:20">=</operator> <literal type="number" pos:start="263:22" pos:end="263:22">0</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="265:7" pos:end="265:23"><expr pos:start="265:7" pos:end="265:22"><name pos:start="265:7" pos:end="265:17"><name pos:start="265:7" pos:end="265:14">op_index</name><index pos:start="265:15" pos:end="265:17">[<expr pos:start="265:16" pos:end="265:16"><name pos:start="265:16" pos:end="265:16">i</name></expr>]</index></name> <operator pos:start="265:19" pos:end="265:19">=</operator> <operator pos:start="265:21" pos:end="265:21">-</operator><literal type="number" pos:start="265:22" pos:end="265:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



  <expr_stmt pos:start="271:3" pos:end="271:18"><expr pos:start="271:3" pos:end="271:17"><name pos:start="271:3" pos:end="271:10">the_info</name> <operator pos:start="271:12" pos:end="271:12">=</operator> <name pos:start="271:14" pos:end="271:17">info</name></expr>;</expr_stmt>

  <expr_stmt pos:start="273:3" pos:end="273:16"><expr pos:start="273:3" pos:end="273:15"><name pos:start="273:3" pos:end="273:10">start_pc</name> <operator pos:start="273:12" pos:end="273:12">=</operator> <name pos:start="273:14" pos:end="273:15">pc</name></expr>;</expr_stmt>

  <expr_stmt pos:start="275:3" pos:end="275:32"><expr pos:start="275:3" pos:end="275:31"><name pos:start="275:3" pos:end="275:13">start_codep</name> <operator pos:start="275:15" pos:end="275:15">=</operator> <name pos:start="275:17" pos:end="275:31"><name pos:start="275:17" pos:end="275:20">priv</name><operator pos:start="275:21" pos:end="275:21">.</operator><name pos:start="275:22" pos:end="275:31">the_buffer</name></name></expr>;</expr_stmt>

  <expr_stmt pos:start="277:3" pos:end="277:26"><expr pos:start="277:3" pos:end="277:25"><name pos:start="277:3" pos:end="277:7">codep</name> <operator pos:start="277:9" pos:end="277:9">=</operator> <name pos:start="277:11" pos:end="277:25"><name pos:start="277:11" pos:end="277:14">priv</name><operator pos:start="277:15" pos:end="277:15">.</operator><name pos:start="277:16" pos:end="277:25">the_buffer</name></name></expr>;</expr_stmt>



  <if_stmt pos:start="281:3" pos:end="327:5"><if pos:start="281:3" pos:end="327:5">if <condition pos:start="281:6" pos:end="281:38">(<expr pos:start="281:7" pos:end="281:37"><call pos:start="281:7" pos:end="281:32"><name pos:start="281:7" pos:end="281:15">sigsetjmp</name><argument_list pos:start="281:16" pos:end="281:32">(<argument pos:start="281:17" pos:end="281:28"><expr pos:start="281:17" pos:end="281:28"><name pos:start="281:17" pos:end="281:28"><name pos:start="281:17" pos:end="281:20">priv</name><operator pos:start="281:21" pos:end="281:21">.</operator><name pos:start="281:22" pos:end="281:28">bailout</name></name></expr></argument>, <argument pos:start="281:31" pos:end="281:31"><expr pos:start="281:31" pos:end="281:31"><literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr></argument>)</argument_list></call> <operator pos:start="281:34" pos:end="281:35">!=</operator> <literal type="number" pos:start="281:37" pos:end="281:37">0</literal></expr>)</condition>

    <block pos:start="283:5" pos:end="327:5">{<block_content pos:start="285:7" pos:end="325:16">

      <decl_stmt pos:start="285:7" pos:end="285:23"><decl pos:start="285:7" pos:end="285:22"><type pos:start="285:7" pos:end="285:18"><specifier pos:start="285:7" pos:end="285:11">const</specifier> <name pos:start="285:13" pos:end="285:16">char</name> <modifier pos:start="285:18" pos:end="285:18">*</modifier></type><name pos:start="285:19" pos:end="285:22">name</name></decl>;</decl_stmt>



      <comment type="block" pos:start="289:7" pos:end="293:67">/* Getting here means we tried for data but didn't get it.  That

	 means we have an incomplete instruction of some sort.  Just

	 print the first byte as a prefix or a .byte pseudo-op.  */</comment>

      <if_stmt pos:start="295:7" pos:end="321:9"><if pos:start="295:7" pos:end="321:9">if <condition pos:start="295:10" pos:end="295:34">(<expr pos:start="295:11" pos:end="295:33"><name pos:start="295:11" pos:end="295:15">codep</name> <operator pos:start="295:17" pos:end="295:17">&gt;</operator> <name pos:start="295:19" pos:end="295:33"><name pos:start="295:19" pos:end="295:22">priv</name><operator pos:start="295:23" pos:end="295:23">.</operator><name pos:start="295:24" pos:end="295:33">the_buffer</name></name></expr>)</condition>

	<block pos:start="297:9" pos:end="321:9">{<block_content pos:start="299:11" pos:end="319:19">

	  <expr_stmt pos:start="299:11" pos:end="299:70"><expr pos:start="299:11" pos:end="299:69"><name pos:start="299:11" pos:end="299:14">name</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <call pos:start="299:18" pos:end="299:69"><name pos:start="299:18" pos:end="299:28">prefix_name</name> <argument_list pos:start="299:30" pos:end="299:69">(<argument pos:start="299:31" pos:end="299:48"><expr pos:start="299:31" pos:end="299:48"><name pos:start="299:31" pos:end="299:48"><name pos:start="299:31" pos:end="299:34">priv</name><operator pos:start="299:35" pos:end="299:35">.</operator><name pos:start="299:36" pos:end="299:45">the_buffer</name><index pos:start="299:46" pos:end="299:48">[<expr pos:start="299:47" pos:end="299:47"><literal type="number" pos:start="299:47" pos:end="299:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="299:51" pos:end="299:68"><expr pos:start="299:51" pos:end="299:68"><name pos:start="299:51" pos:end="299:68"><name pos:start="299:51" pos:end="299:54">priv</name><operator pos:start="299:55" pos:end="299:55">.</operator><name pos:start="299:56" pos:end="299:68">orig_sizeflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="301:11" pos:end="315:13"><if pos:start="301:11" pos:end="303:61">if <condition pos:start="301:14" pos:end="301:27">(<expr pos:start="301:15" pos:end="301:26"><name pos:start="301:15" pos:end="301:18">name</name> <operator pos:start="301:20" pos:end="301:21">!=</operator> <name pos:start="301:23" pos:end="301:26">NULL</name></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:61"><block_content pos:start="303:13" pos:end="303:61">

	    <expr_stmt pos:start="303:13" pos:end="303:61"><expr pos:start="303:13" pos:end="303:60"><call pos:start="303:13" pos:end="303:60">(<modifier pos:start="303:14" pos:end="303:14">*</modifier><name pos:start="303:15" pos:end="303:32"><name pos:start="303:15" pos:end="303:18">info</name><operator pos:start="303:19" pos:end="303:20">-&gt;</operator><name pos:start="303:21" pos:end="303:32">fprintf_func</name></name>) <argument_list pos:start="303:35" pos:end="303:60">(<argument pos:start="303:36" pos:end="303:47"><expr pos:start="303:36" pos:end="303:47"><name pos:start="303:36" pos:end="303:47"><name pos:start="303:36" pos:end="303:39">info</name><operator pos:start="303:40" pos:end="303:41">-&gt;</operator><name pos:start="303:42" pos:end="303:47">stream</name></name></expr></argument>, <argument pos:start="303:50" pos:end="303:53"><expr pos:start="303:50" pos:end="303:53"><literal type="string" pos:start="303:50" pos:end="303:53">"%s"</literal></expr></argument>, <argument pos:start="303:56" pos:end="303:59"><expr pos:start="303:56" pos:end="303:59"><name pos:start="303:56" pos:end="303:59">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="305:11" pos:end="315:13">else

	    <block pos:start="307:13" pos:end="315:13">{<block_content pos:start="311:15" pos:end="313:72">

	      <comment type="block" pos:start="309:15" pos:end="309:70">/* Just print the first byte as a .byte instruction.  */</comment>

	      <expr_stmt pos:start="311:15" pos:end="313:72"><expr pos:start="311:15" pos:end="313:71"><call pos:start="311:15" pos:end="313:71">(<modifier pos:start="311:16" pos:end="311:16">*</modifier><name pos:start="311:17" pos:end="311:34"><name pos:start="311:17" pos:end="311:20">info</name><operator pos:start="311:21" pos:end="311:22">-&gt;</operator><name pos:start="311:23" pos:end="311:34">fprintf_func</name></name>) <argument_list pos:start="311:37" pos:end="313:71">(<argument pos:start="311:38" pos:end="311:49"><expr pos:start="311:38" pos:end="311:49"><name pos:start="311:38" pos:end="311:49"><name pos:start="311:38" pos:end="311:41">info</name><operator pos:start="311:42" pos:end="311:43">-&gt;</operator><name pos:start="311:44" pos:end="311:49">stream</name></name></expr></argument>, <argument pos:start="311:52" pos:end="311:63"><expr pos:start="311:52" pos:end="311:63"><literal type="string" pos:start="311:52" pos:end="311:63">".byte 0x%x"</literal></expr></argument>,

				     <argument pos:start="313:38" pos:end="313:70"><expr pos:start="313:38" pos:end="313:70"><operator pos:start="313:38" pos:end="313:38">(</operator><name pos:start="313:39" pos:end="313:46">unsigned</name> <name pos:start="313:48" pos:end="313:50">int</name><operator pos:start="313:51" pos:end="313:51">)</operator> <name pos:start="313:53" pos:end="313:70"><name pos:start="313:53" pos:end="313:56">priv</name><operator pos:start="313:57" pos:end="313:57">.</operator><name pos:start="313:58" pos:end="313:67">the_buffer</name><index pos:start="313:68" pos:end="313:70">[<expr pos:start="313:69" pos:end="313:69"><literal type="number" pos:start="313:69" pos:end="313:69">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>



	  <return pos:start="319:11" pos:end="319:19">return <expr pos:start="319:18" pos:end="319:18"><literal type="number" pos:start="319:18" pos:end="319:18">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



      <return pos:start="325:7" pos:end="325:16">return <expr pos:start="325:14" pos:end="325:15"><operator pos:start="325:14" pos:end="325:14">-</operator><literal type="number" pos:start="325:15" pos:end="325:15">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="331:3" pos:end="331:15"><expr pos:start="331:3" pos:end="331:14"><name pos:start="331:3" pos:end="331:7">obufp</name> <operator pos:start="331:9" pos:end="331:9">=</operator> <name pos:start="331:11" pos:end="331:14">obuf</name></expr>;</expr_stmt>

  <expr_stmt pos:start="333:3" pos:end="333:14"><expr pos:start="333:3" pos:end="333:13"><call pos:start="333:3" pos:end="333:13"><name pos:start="333:3" pos:end="333:10">ckprefix</name> <argument_list pos:start="333:12" pos:end="333:13">()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="335:3" pos:end="335:17"><expr pos:start="335:3" pos:end="335:16"><call pos:start="335:3" pos:end="335:16"><name pos:start="335:3" pos:end="335:13">ckvexprefix</name> <argument_list pos:start="335:15" pos:end="335:16">()</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="339:3" pos:end="339:21"><expr pos:start="339:3" pos:end="339:20"><name pos:start="339:3" pos:end="339:12">insn_codep</name> <operator pos:start="339:14" pos:end="339:14">=</operator> <name pos:start="339:16" pos:end="339:20">codep</name></expr>;</expr_stmt>

  <expr_stmt pos:start="341:3" pos:end="341:32"><expr pos:start="341:3" pos:end="341:31"><name pos:start="341:3" pos:end="341:10">sizeflag</name> <operator pos:start="341:12" pos:end="341:12">=</operator> <name pos:start="341:14" pos:end="341:31"><name pos:start="341:14" pos:end="341:17">priv</name><operator pos:start="341:18" pos:end="341:18">.</operator><name pos:start="341:19" pos:end="341:31">orig_sizeflag</name></name></expr>;</expr_stmt>



  <expr_stmt pos:start="345:3" pos:end="345:30"><expr pos:start="345:3" pos:end="345:29"><call pos:start="345:3" pos:end="345:29"><name pos:start="345:3" pos:end="345:12">fetch_data</name><argument_list pos:start="345:13" pos:end="345:29">(<argument pos:start="345:14" pos:end="345:17"><expr pos:start="345:14" pos:end="345:17"><name pos:start="345:14" pos:end="345:17">info</name></expr></argument>, <argument pos:start="345:20" pos:end="345:28"><expr pos:start="345:20" pos:end="345:28"><name pos:start="345:20" pos:end="345:24">codep</name> <operator pos:start="345:26" pos:end="345:26">+</operator> <literal type="number" pos:start="345:28" pos:end="345:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="347:3" pos:end="347:56"><expr pos:start="347:3" pos:end="347:55"><name pos:start="347:3" pos:end="347:16">two_source_ops</name> <operator pos:start="347:18" pos:end="347:18">=</operator> <operator pos:start="347:20" pos:end="347:20">(</operator><operator pos:start="347:21" pos:end="347:21">*</operator><name pos:start="347:22" pos:end="347:26">codep</name> <operator pos:start="347:28" pos:end="347:29">==</operator> <literal type="number" pos:start="347:31" pos:end="347:34">0x62</literal><operator pos:start="347:35" pos:end="347:35">)</operator> <operator pos:start="347:37" pos:end="347:38">||</operator> <operator pos:start="347:40" pos:end="347:40">(</operator><operator pos:start="347:41" pos:end="347:41">*</operator><name pos:start="347:42" pos:end="347:46">codep</name> <operator pos:start="347:48" pos:end="347:49">==</operator> <literal type="number" pos:start="347:51" pos:end="347:54">0xc8</literal><operator pos:start="347:55" pos:end="347:55">)</operator></expr>;</expr_stmt>



  <if_stmt pos:start="351:3" pos:end="377:5"><if pos:start="351:3" pos:end="377:5">if <condition pos:start="351:6" pos:end="355:27">(<expr pos:start="351:7" pos:end="355:26"><operator pos:start="351:7" pos:end="351:7">(</operator><operator pos:start="351:8" pos:end="351:8">(</operator><name pos:start="351:9" pos:end="351:16">prefixes</name> <operator pos:start="351:18" pos:end="351:18">&amp;</operator> <name pos:start="351:20" pos:end="351:31">PREFIX_FWAIT</name><operator pos:start="351:32" pos:end="351:32">)</operator>

       <operator pos:start="353:8" pos:end="353:9">&amp;&amp;</operator> <operator pos:start="353:11" pos:end="353:11">(</operator><operator pos:start="353:12" pos:end="353:12">(</operator><operator pos:start="353:13" pos:end="353:13">*</operator><name pos:start="353:14" pos:end="353:18">codep</name> <operator pos:start="353:20" pos:end="353:20">&lt;</operator> <literal type="number" pos:start="353:22" pos:end="353:25">0xd8</literal><operator pos:start="353:26" pos:end="353:26">)</operator> <operator pos:start="353:28" pos:end="353:29">||</operator> <operator pos:start="353:31" pos:end="353:31">(</operator><operator pos:start="353:32" pos:end="353:32">*</operator><name pos:start="353:33" pos:end="353:37">codep</name> <operator pos:start="353:39" pos:end="353:39">&gt;</operator> <literal type="number" pos:start="353:41" pos:end="353:44">0xdf</literal><operator pos:start="353:45" pos:end="353:45">)</operator><operator pos:start="353:46" pos:end="353:46">)</operator><operator pos:start="353:47" pos:end="353:47">)</operator>

      <operator pos:start="355:7" pos:end="355:8">||</operator> <operator pos:start="355:10" pos:end="355:10">(</operator><name pos:start="355:11" pos:end="355:13">rex</name> <operator pos:start="355:15" pos:end="355:16">&amp;&amp;</operator> <name pos:start="355:18" pos:end="355:25">rex_used</name><operator pos:start="355:26" pos:end="355:26">)</operator></expr>)</condition>

    <block pos:start="357:5" pos:end="377:5">{<block_content pos:start="359:7" pos:end="375:15">

      <decl_stmt pos:start="359:7" pos:end="359:23"><decl pos:start="359:7" pos:end="359:22"><type pos:start="359:7" pos:end="359:18"><specifier pos:start="359:7" pos:end="359:11">const</specifier> <name pos:start="359:13" pos:end="359:16">char</name> <modifier pos:start="359:18" pos:end="359:18">*</modifier></type><name pos:start="359:19" pos:end="359:22">name</name></decl>;</decl_stmt>



      <comment type="block" pos:start="363:7" pos:end="365:56">/* fwait not followed by floating point instruction, or rex followed

	 by other prefixes.  Print the first prefix.  */</comment>

      <expr_stmt pos:start="367:7" pos:end="367:66"><expr pos:start="367:7" pos:end="367:65"><name pos:start="367:7" pos:end="367:10">name</name> <operator pos:start="367:12" pos:end="367:12">=</operator> <call pos:start="367:14" pos:end="367:65"><name pos:start="367:14" pos:end="367:24">prefix_name</name> <argument_list pos:start="367:26" pos:end="367:65">(<argument pos:start="367:27" pos:end="367:44"><expr pos:start="367:27" pos:end="367:44"><name pos:start="367:27" pos:end="367:44"><name pos:start="367:27" pos:end="367:30">priv</name><operator pos:start="367:31" pos:end="367:31">.</operator><name pos:start="367:32" pos:end="367:41">the_buffer</name><index pos:start="367:42" pos:end="367:44">[<expr pos:start="367:43" pos:end="367:43"><literal type="number" pos:start="367:43" pos:end="367:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="367:47" pos:end="367:64"><expr pos:start="367:47" pos:end="367:64"><name pos:start="367:47" pos:end="367:64"><name pos:start="367:47" pos:end="367:50">priv</name><operator pos:start="367:51" pos:end="367:51">.</operator><name pos:start="367:52" pos:end="367:64">orig_sizeflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="369:7" pos:end="371:43"><if pos:start="369:7" pos:end="371:43">if <condition pos:start="369:10" pos:end="369:23">(<expr pos:start="369:11" pos:end="369:22"><name pos:start="369:11" pos:end="369:14">name</name> <operator pos:start="369:16" pos:end="369:17">==</operator> <name pos:start="369:19" pos:end="369:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="371:9" pos:end="371:43"><block_content pos:start="371:9" pos:end="371:43">

	<expr_stmt pos:start="371:9" pos:end="371:43"><expr pos:start="371:9" pos:end="371:42"><name pos:start="371:9" pos:end="371:12">name</name> <operator pos:start="371:14" pos:end="371:14">=</operator> <name pos:start="371:16" pos:end="371:42">INTERNAL_DISASSEMBLER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt pos:start="373:7" pos:end="373:55"><expr pos:start="373:7" pos:end="373:54"><call pos:start="373:7" pos:end="373:54">(<modifier pos:start="373:8" pos:end="373:8">*</modifier><name pos:start="373:9" pos:end="373:26"><name pos:start="373:9" pos:end="373:12">info</name><operator pos:start="373:13" pos:end="373:14">-&gt;</operator><name pos:start="373:15" pos:end="373:26">fprintf_func</name></name>) <argument_list pos:start="373:29" pos:end="373:54">(<argument pos:start="373:30" pos:end="373:41"><expr pos:start="373:30" pos:end="373:41"><name pos:start="373:30" pos:end="373:41"><name pos:start="373:30" pos:end="373:33">info</name><operator pos:start="373:34" pos:end="373:35">-&gt;</operator><name pos:start="373:36" pos:end="373:41">stream</name></name></expr></argument>, <argument pos:start="373:44" pos:end="373:47"><expr pos:start="373:44" pos:end="373:47"><literal type="string" pos:start="373:44" pos:end="373:47">"%s"</literal></expr></argument>, <argument pos:start="373:50" pos:end="373:53"><expr pos:start="373:50" pos:end="373:53"><name pos:start="373:50" pos:end="373:53">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return pos:start="375:7" pos:end="375:15">return <expr pos:start="375:14" pos:end="375:14"><literal type="number" pos:start="375:14" pos:end="375:14">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="381:3" pos:end="381:9"><expr pos:start="381:3" pos:end="381:8"><name pos:start="381:3" pos:end="381:4">op</name> <operator pos:start="381:6" pos:end="381:6">=</operator> <literal type="number" pos:start="381:8" pos:end="381:8">0</literal></expr>;</expr_stmt>

  <if_stmt pos:start="383:3" pos:end="403:5"><if pos:start="383:3" pos:end="403:5">if <condition pos:start="383:6" pos:end="383:31">(<expr pos:start="383:7" pos:end="383:30"><name pos:start="383:7" pos:end="383:14">prefixes</name> <operator pos:start="383:16" pos:end="383:16">&amp;</operator> <name pos:start="383:18" pos:end="383:30">PREFIX_VEX_0F</name></expr>)</condition>

    <block pos:start="385:5" pos:end="403:5">{<block_content pos:start="387:7" pos:end="401:22">

      <expr_stmt pos:start="387:7" pos:end="387:73"><expr pos:start="387:7" pos:end="387:72"><name pos:start="387:7" pos:end="387:19">used_prefixes</name> <operator pos:start="387:21" pos:end="387:22">|=</operator> <name pos:start="387:24" pos:end="387:36">PREFIX_VEX_0F</name> <operator pos:start="387:38" pos:end="387:38">|</operator> <name pos:start="387:40" pos:end="387:54">PREFIX_VEX_0F38</name> <operator pos:start="387:56" pos:end="387:56">|</operator> <name pos:start="387:58" pos:end="387:72">PREFIX_VEX_0F3A</name></expr>;</expr_stmt>

      <if_stmt pos:start="389:7" pos:end="399:29"><if pos:start="389:7" pos:end="391:25">if <condition pos:start="389:10" pos:end="389:37">(<expr pos:start="389:11" pos:end="389:36"><name pos:start="389:11" pos:end="389:18">prefixes</name> <operator pos:start="389:20" pos:end="389:20">&amp;</operator> <name pos:start="389:22" pos:end="389:36">PREFIX_VEX_0F38</name></expr>)</condition><block type="pseudo" pos:start="391:9" pos:end="391:25"><block_content pos:start="391:9" pos:end="391:25">

        <expr_stmt pos:start="391:9" pos:end="391:25"><expr pos:start="391:9" pos:end="391:24"><name pos:start="391:9" pos:end="391:17">threebyte</name> <operator pos:start="391:19" pos:end="391:19">=</operator> <literal type="number" pos:start="391:21" pos:end="391:24">0x38</literal></expr>;</expr_stmt></block_content></block></if>

      <if type="elseif" pos:start="393:7" pos:end="395:25">else if <condition pos:start="393:15" pos:end="393:42">(<expr pos:start="393:16" pos:end="393:41"><name pos:start="393:16" pos:end="393:23">prefixes</name> <operator pos:start="393:25" pos:end="393:25">&amp;</operator> <name pos:start="393:27" pos:end="393:41">PREFIX_VEX_0F3A</name></expr>)</condition><block type="pseudo" pos:start="395:9" pos:end="395:25"><block_content pos:start="395:9" pos:end="395:25">

        <expr_stmt pos:start="395:9" pos:end="395:25"><expr pos:start="395:9" pos:end="395:24"><name pos:start="395:9" pos:end="395:17">threebyte</name> <operator pos:start="395:19" pos:end="395:19">=</operator> <literal type="number" pos:start="395:21" pos:end="395:24">0x3a</literal></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="397:7" pos:end="399:29">else<block type="pseudo" pos:start="399:9" pos:end="399:29"><block_content pos:start="399:9" pos:end="399:29">

        <expr_stmt pos:start="399:9" pos:end="399:29"><expr pos:start="399:9" pos:end="399:28"><name pos:start="399:9" pos:end="399:17">threebyte</name> <operator pos:start="399:19" pos:end="399:19">=</operator> <operator pos:start="399:21" pos:end="399:21">*</operator><name pos:start="399:22" pos:end="399:26">codep</name><operator pos:start="399:27" pos:end="399:28">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <goto pos:start="401:7" pos:end="401:22">goto <name pos:start="401:12" pos:end="401:21">vex_opcode</name>;</goto>

    </block_content>}</block></if></if_stmt>

  <if_stmt pos:start="405:3" pos:end="491:5"><if pos:start="405:3" pos:end="469:5">if <condition pos:start="405:6" pos:end="405:21">(<expr pos:start="405:7" pos:end="405:20"><operator pos:start="405:7" pos:end="405:7">*</operator><name pos:start="405:8" pos:end="405:12">codep</name> <operator pos:start="405:14" pos:end="405:15">==</operator> <literal type="number" pos:start="405:17" pos:end="405:20">0x0f</literal></expr>)</condition>

    <block pos:start="407:5" pos:end="469:5">{<block_content pos:start="409:7" pos:end="467:9">

      <expr_stmt pos:start="409:7" pos:end="409:34"><expr pos:start="409:7" pos:end="409:33"><call pos:start="409:7" pos:end="409:33"><name pos:start="409:7" pos:end="409:16">fetch_data</name><argument_list pos:start="409:17" pos:end="409:33">(<argument pos:start="409:18" pos:end="409:21"><expr pos:start="409:18" pos:end="409:21"><name pos:start="409:18" pos:end="409:21">info</name></expr></argument>, <argument pos:start="409:24" pos:end="409:32"><expr pos:start="409:24" pos:end="409:32"><name pos:start="409:24" pos:end="409:28">codep</name> <operator pos:start="409:30" pos:end="409:30">+</operator> <literal type="number" pos:start="409:32" pos:end="409:32">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="411:7" pos:end="411:27"><expr pos:start="411:7" pos:end="411:26"><name pos:start="411:7" pos:end="411:15">threebyte</name> <operator pos:start="411:17" pos:end="411:17">=</operator> <name pos:start="411:19" pos:end="411:26"><name pos:start="411:19" pos:end="411:23">codep</name><index pos:start="411:24" pos:end="411:26">[<expr pos:start="411:25" pos:end="411:25"><literal type="number" pos:start="411:25" pos:end="411:25">1</literal></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="413:7" pos:end="413:17"><expr pos:start="413:7" pos:end="413:16"><name pos:start="413:7" pos:end="413:11">codep</name> <operator pos:start="413:13" pos:end="413:14">+=</operator> <literal type="number" pos:start="413:16" pos:end="413:16">2</literal></expr>;</expr_stmt>

    <label pos:start="415:5" pos:end="415:15"><name pos:start="415:5" pos:end="415:14">vex_opcode</name>:</label>

      <expr_stmt pos:start="417:7" pos:end="417:38"><expr pos:start="417:7" pos:end="417:37"><name pos:start="417:7" pos:end="417:8">dp</name> <operator pos:start="417:10" pos:end="417:10">=</operator> <operator pos:start="417:12" pos:end="417:12">&amp;</operator><name pos:start="417:13" pos:end="417:37"><name pos:start="417:13" pos:end="417:26">dis386_twobyte</name><index pos:start="417:27" pos:end="417:37">[<expr pos:start="417:28" pos:end="417:36"><name pos:start="417:28" pos:end="417:36">threebyte</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="419:7" pos:end="419:48"><expr pos:start="419:7" pos:end="419:47"><name pos:start="419:7" pos:end="419:16">need_modrm</name> <operator pos:start="419:18" pos:end="419:18">=</operator> <name pos:start="419:20" pos:end="419:47"><name pos:start="419:20" pos:end="419:36">twobyte_has_modrm</name><index pos:start="419:37" pos:end="419:47">[<expr pos:start="419:38" pos:end="419:46"><name pos:start="419:38" pos:end="419:46">threebyte</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="421:7" pos:end="421:61"><expr pos:start="421:7" pos:end="421:60"><name pos:start="421:7" pos:end="421:22">uses_DATA_prefix</name> <operator pos:start="421:24" pos:end="421:24">=</operator> <name pos:start="421:26" pos:end="421:60"><name pos:start="421:26" pos:end="421:49">twobyte_uses_DATA_prefix</name><index pos:start="421:50" pos:end="421:60">[<expr pos:start="421:51" pos:end="421:59"><name pos:start="421:51" pos:end="421:59">threebyte</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="423:7" pos:end="423:63"><expr pos:start="423:7" pos:end="423:62"><name pos:start="423:7" pos:end="423:23">uses_REPNZ_prefix</name> <operator pos:start="423:25" pos:end="423:25">=</operator> <name pos:start="423:27" pos:end="423:62"><name pos:start="423:27" pos:end="423:51">twobyte_uses_REPNZ_prefix</name><index pos:start="423:52" pos:end="423:62">[<expr pos:start="423:53" pos:end="423:61"><name pos:start="423:53" pos:end="423:61">threebyte</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="425:7" pos:end="425:61"><expr pos:start="425:7" pos:end="425:60"><name pos:start="425:7" pos:end="425:22">uses_REPZ_prefix</name> <operator pos:start="425:24" pos:end="425:24">=</operator> <name pos:start="425:26" pos:end="425:60"><name pos:start="425:26" pos:end="425:49">twobyte_uses_REPZ_prefix</name><index pos:start="425:50" pos:end="425:60">[<expr pos:start="425:51" pos:end="425:59"><name pos:start="425:51" pos:end="425:59">threebyte</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="427:7" pos:end="427:53"><expr pos:start="427:7" pos:end="427:52"><name pos:start="427:7" pos:end="427:22">uses_LOCK_prefix</name> <operator pos:start="427:24" pos:end="427:24">=</operator> <operator pos:start="427:26" pos:end="427:26">(</operator><name pos:start="427:27" pos:end="427:35">threebyte</name> <operator pos:start="427:37" pos:end="427:37">&amp;</operator> <operator pos:start="427:39" pos:end="427:39">~</operator><literal type="number" pos:start="427:40" pos:end="427:43">0x02</literal><operator pos:start="427:44" pos:end="427:44">)</operator> <operator pos:start="427:46" pos:end="427:47">==</operator> <literal type="number" pos:start="427:49" pos:end="427:52">0x20</literal></expr>;</expr_stmt>

      <if_stmt pos:start="429:7" pos:end="467:9"><if pos:start="429:7" pos:end="467:9">if <condition pos:start="429:10" pos:end="429:68">(<expr pos:start="429:11" pos:end="429:67"><name pos:start="429:11" pos:end="429:18"><name pos:start="429:11" pos:end="429:12">dp</name><operator pos:start="429:13" pos:end="429:14">-&gt;</operator><name pos:start="429:15" pos:end="429:18">name</name></name> <operator pos:start="429:20" pos:end="429:21">==</operator> <name pos:start="429:23" pos:end="429:26">NULL</name> <operator pos:start="429:28" pos:end="429:29">&amp;&amp;</operator> <name pos:start="429:31" pos:end="429:39"><name pos:start="429:31" pos:end="429:32">dp</name><operator pos:start="429:33" pos:end="429:34">-&gt;</operator><name pos:start="429:35" pos:end="429:36">op</name><index pos:start="429:37" pos:end="429:39">[<expr pos:start="429:38" pos:end="429:38"><literal type="number" pos:start="429:38" pos:end="429:38">0</literal></expr>]</index></name><operator pos:start="429:40" pos:end="429:40">.</operator><name pos:start="429:41" pos:end="429:48">bytemode</name> <operator pos:start="429:50" pos:end="429:51">==</operator> <name pos:start="429:53" pos:end="429:67">IS_3BYTE_OPCODE</name></expr>)</condition>

	<block pos:start="431:9" pos:end="467:9">{<block_content pos:start="433:11" pos:end="465:13">

          <expr_stmt pos:start="433:11" pos:end="433:38"><expr pos:start="433:11" pos:end="433:37"><call pos:start="433:11" pos:end="433:37"><name pos:start="433:11" pos:end="433:20">fetch_data</name><argument_list pos:start="433:21" pos:end="433:37">(<argument pos:start="433:22" pos:end="433:25"><expr pos:start="433:22" pos:end="433:25"><name pos:start="433:22" pos:end="433:25">info</name></expr></argument>, <argument pos:start="433:28" pos:end="433:36"><expr pos:start="433:28" pos:end="433:36"><name pos:start="433:28" pos:end="433:32">codep</name> <operator pos:start="433:34" pos:end="433:34">+</operator> <literal type="number" pos:start="433:36" pos:end="433:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="435:11" pos:end="435:24"><expr pos:start="435:11" pos:end="435:23"><name pos:start="435:11" pos:end="435:12">op</name> <operator pos:start="435:14" pos:end="435:14">=</operator> <operator pos:start="435:16" pos:end="435:16">*</operator><name pos:start="435:17" pos:end="435:21">codep</name><operator pos:start="435:22" pos:end="435:23">++</operator></expr>;</expr_stmt>

	  <switch pos:start="437:11" pos:end="465:13">switch <condition pos:start="437:18" pos:end="437:28">(<expr pos:start="437:19" pos:end="437:27"><name pos:start="437:19" pos:end="437:27">threebyte</name></expr>)</condition>

	    <block pos:start="439:13" pos:end="465:13">{<block_content pos:start="441:13" pos:end="463:20">

	    <case pos:start="441:13" pos:end="441:22">case <expr pos:start="441:18" pos:end="441:21"><literal type="number" pos:start="441:18" pos:end="441:21">0x38</literal></expr>:</case>

	      <expr_stmt pos:start="443:15" pos:end="443:69"><expr pos:start="443:15" pos:end="443:68"><name pos:start="443:15" pos:end="443:30">uses_DATA_prefix</name> <operator pos:start="443:32" pos:end="443:32">=</operator> <name pos:start="443:34" pos:end="443:68"><name pos:start="443:34" pos:end="443:64">threebyte_0x38_uses_DATA_prefix</name><index pos:start="443:65" pos:end="443:68">[<expr pos:start="443:66" pos:end="443:67"><name pos:start="443:66" pos:end="443:67">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <expr_stmt pos:start="445:15" pos:end="445:71"><expr pos:start="445:15" pos:end="445:70"><name pos:start="445:15" pos:end="445:31">uses_REPNZ_prefix</name> <operator pos:start="445:33" pos:end="445:33">=</operator> <name pos:start="445:35" pos:end="445:70"><name pos:start="445:35" pos:end="445:66">threebyte_0x38_uses_REPNZ_prefix</name><index pos:start="445:67" pos:end="445:70">[<expr pos:start="445:68" pos:end="445:69"><name pos:start="445:68" pos:end="445:69">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <expr_stmt pos:start="447:15" pos:end="447:69"><expr pos:start="447:15" pos:end="447:68"><name pos:start="447:15" pos:end="447:30">uses_REPZ_prefix</name> <operator pos:start="447:32" pos:end="447:32">=</operator> <name pos:start="447:34" pos:end="447:68"><name pos:start="447:34" pos:end="447:64">threebyte_0x38_uses_REPZ_prefix</name><index pos:start="447:65" pos:end="447:68">[<expr pos:start="447:66" pos:end="447:67"><name pos:start="447:66" pos:end="447:67">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <break pos:start="449:15" pos:end="449:20">break;</break>

	    <case pos:start="451:13" pos:end="451:22">case <expr pos:start="451:18" pos:end="451:21"><literal type="number" pos:start="451:18" pos:end="451:21">0x3a</literal></expr>:</case>

	      <expr_stmt pos:start="453:15" pos:end="453:69"><expr pos:start="453:15" pos:end="453:68"><name pos:start="453:15" pos:end="453:30">uses_DATA_prefix</name> <operator pos:start="453:32" pos:end="453:32">=</operator> <name pos:start="453:34" pos:end="453:68"><name pos:start="453:34" pos:end="453:64">threebyte_0x3a_uses_DATA_prefix</name><index pos:start="453:65" pos:end="453:68">[<expr pos:start="453:66" pos:end="453:67"><name pos:start="453:66" pos:end="453:67">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <expr_stmt pos:start="455:15" pos:end="455:71"><expr pos:start="455:15" pos:end="455:70"><name pos:start="455:15" pos:end="455:31">uses_REPNZ_prefix</name> <operator pos:start="455:33" pos:end="455:33">=</operator> <name pos:start="455:35" pos:end="455:70"><name pos:start="455:35" pos:end="455:66">threebyte_0x3a_uses_REPNZ_prefix</name><index pos:start="455:67" pos:end="455:70">[<expr pos:start="455:68" pos:end="455:69"><name pos:start="455:68" pos:end="455:69">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <expr_stmt pos:start="457:15" pos:end="457:69"><expr pos:start="457:15" pos:end="457:68"><name pos:start="457:15" pos:end="457:30">uses_REPZ_prefix</name> <operator pos:start="457:32" pos:end="457:32">=</operator> <name pos:start="457:34" pos:end="457:68"><name pos:start="457:34" pos:end="457:64">threebyte_0x3a_uses_REPZ_prefix</name><index pos:start="457:65" pos:end="457:68">[<expr pos:start="457:66" pos:end="457:67"><name pos:start="457:66" pos:end="457:67">op</name></expr>]</index></name></expr>;</expr_stmt>

	      <break pos:start="459:15" pos:end="459:20">break;</break>

	    <default pos:start="461:13" pos:end="461:20">default:</default>

	      <break pos:start="463:15" pos:end="463:20">break;</break>

	    </block_content>}</block></switch>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if>

  <else pos:start="471:3" pos:end="491:5">else

    <block pos:start="473:5" pos:end="491:5">{<block_content pos:start="475:7" pos:end="489:14">

      <expr_stmt pos:start="475:7" pos:end="475:27"><expr pos:start="475:7" pos:end="475:26"><name pos:start="475:7" pos:end="475:8">dp</name> <operator pos:start="475:10" pos:end="475:10">=</operator> <operator pos:start="475:12" pos:end="475:12">&amp;</operator><name pos:start="475:13" pos:end="475:26"><name pos:start="475:13" pos:end="475:18">dis386</name><index pos:start="475:19" pos:end="475:26">[<expr pos:start="475:20" pos:end="475:25"><operator pos:start="475:20" pos:end="475:20">*</operator><name pos:start="475:21" pos:end="475:25">codep</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="477:7" pos:end="477:45"><expr pos:start="477:7" pos:end="477:44"><name pos:start="477:7" pos:end="477:16">need_modrm</name> <operator pos:start="477:18" pos:end="477:18">=</operator> <name pos:start="477:20" pos:end="477:44"><name pos:start="477:20" pos:end="477:36">onebyte_has_modrm</name><index pos:start="477:37" pos:end="477:44">[<expr pos:start="477:38" pos:end="477:43"><operator pos:start="477:38" pos:end="477:38">*</operator><name pos:start="477:39" pos:end="477:43">codep</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="479:7" pos:end="479:27"><expr pos:start="479:7" pos:end="479:26"><name pos:start="479:7" pos:end="479:22">uses_DATA_prefix</name> <operator pos:start="479:24" pos:end="479:24">=</operator> <literal type="number" pos:start="479:26" pos:end="479:26">0</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="481:7" pos:end="481:28"><expr pos:start="481:7" pos:end="481:27"><name pos:start="481:7" pos:end="481:23">uses_REPNZ_prefix</name> <operator pos:start="481:25" pos:end="481:25">=</operator> <literal type="number" pos:start="481:27" pos:end="481:27">0</literal></expr>;</expr_stmt>

      <comment type="block" pos:start="483:7" pos:end="483:32">/* pause is 0xf3 0x90.  */</comment>

      <expr_stmt pos:start="485:7" pos:end="485:40"><expr pos:start="485:7" pos:end="485:39"><name pos:start="485:7" pos:end="485:22">uses_REPZ_prefix</name> <operator pos:start="485:24" pos:end="485:24">=</operator> <operator pos:start="485:26" pos:end="485:26">*</operator><name pos:start="485:27" pos:end="485:31">codep</name> <operator pos:start="485:33" pos:end="485:34">==</operator> <literal type="number" pos:start="485:36" pos:end="485:39">0x90</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="487:7" pos:end="487:27"><expr pos:start="487:7" pos:end="487:26"><name pos:start="487:7" pos:end="487:22">uses_LOCK_prefix</name> <operator pos:start="487:24" pos:end="487:24">=</operator> <literal type="number" pos:start="487:26" pos:end="487:26">0</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="489:7" pos:end="489:14"><expr pos:start="489:7" pos:end="489:13"><name pos:start="489:7" pos:end="489:11">codep</name><operator pos:start="489:12" pos:end="489:13">++</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



  <if_stmt pos:start="495:3" pos:end="503:5"><if pos:start="495:3" pos:end="503:5">if <condition pos:start="495:6" pos:end="495:52">(<expr pos:start="495:7" pos:end="495:51"><operator pos:start="495:7" pos:end="495:7">!</operator><name pos:start="495:8" pos:end="495:23">uses_REPZ_prefix</name> <operator pos:start="495:25" pos:end="495:26">&amp;&amp;</operator> <operator pos:start="495:28" pos:end="495:28">(</operator><name pos:start="495:29" pos:end="495:36">prefixes</name> <operator pos:start="495:38" pos:end="495:38">&amp;</operator> <name pos:start="495:40" pos:end="495:50">PREFIX_REPZ</name><operator pos:start="495:51" pos:end="495:51">)</operator></expr>)</condition>

    <block pos:start="497:5" pos:end="503:5">{<block_content pos:start="499:7" pos:end="501:35">

      <expr_stmt pos:start="499:7" pos:end="499:24"><expr pos:start="499:7" pos:end="499:23"><call pos:start="499:7" pos:end="499:23"><name pos:start="499:7" pos:end="499:13">oappend</name> <argument_list pos:start="499:15" pos:end="499:23">(<argument pos:start="499:16" pos:end="499:22"><expr pos:start="499:16" pos:end="499:22"><literal type="string" pos:start="499:16" pos:end="499:22">"repz "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="501:7" pos:end="501:35"><expr pos:start="501:7" pos:end="501:34"><name pos:start="501:7" pos:end="501:19">used_prefixes</name> <operator pos:start="501:21" pos:end="501:22">|=</operator> <name pos:start="501:24" pos:end="501:34">PREFIX_REPZ</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

  <if_stmt pos:start="505:3" pos:end="513:5"><if pos:start="505:3" pos:end="513:5">if <condition pos:start="505:6" pos:end="505:54">(<expr pos:start="505:7" pos:end="505:53"><operator pos:start="505:7" pos:end="505:7">!</operator><name pos:start="505:8" pos:end="505:24">uses_REPNZ_prefix</name> <operator pos:start="505:26" pos:end="505:27">&amp;&amp;</operator> <operator pos:start="505:29" pos:end="505:29">(</operator><name pos:start="505:30" pos:end="505:37">prefixes</name> <operator pos:start="505:39" pos:end="505:39">&amp;</operator> <name pos:start="505:41" pos:end="505:52">PREFIX_REPNZ</name><operator pos:start="505:53" pos:end="505:53">)</operator></expr>)</condition>

    <block pos:start="507:5" pos:end="513:5">{<block_content pos:start="509:7" pos:end="511:36">

      <expr_stmt pos:start="509:7" pos:end="509:25"><expr pos:start="509:7" pos:end="509:24"><call pos:start="509:7" pos:end="509:24"><name pos:start="509:7" pos:end="509:13">oappend</name> <argument_list pos:start="509:15" pos:end="509:24">(<argument pos:start="509:16" pos:end="509:23"><expr pos:start="509:16" pos:end="509:23"><literal type="string" pos:start="509:16" pos:end="509:23">"repnz "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="511:7" pos:end="511:36"><expr pos:start="511:7" pos:end="511:35"><name pos:start="511:7" pos:end="511:19">used_prefixes</name> <operator pos:start="511:21" pos:end="511:22">|=</operator> <name pos:start="511:24" pos:end="511:35">PREFIX_REPNZ</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <if_stmt pos:start="517:3" pos:end="525:5"><if pos:start="517:3" pos:end="525:5">if <condition pos:start="517:6" pos:end="517:52">(<expr pos:start="517:7" pos:end="517:51"><operator pos:start="517:7" pos:end="517:7">!</operator><name pos:start="517:8" pos:end="517:23">uses_LOCK_prefix</name> <operator pos:start="517:25" pos:end="517:26">&amp;&amp;</operator> <operator pos:start="517:28" pos:end="517:28">(</operator><name pos:start="517:29" pos:end="517:36">prefixes</name> <operator pos:start="517:38" pos:end="517:38">&amp;</operator> <name pos:start="517:40" pos:end="517:50">PREFIX_LOCK</name><operator pos:start="517:51" pos:end="517:51">)</operator></expr>)</condition>

    <block pos:start="519:5" pos:end="525:5">{<block_content pos:start="521:7" pos:end="523:35">

      <expr_stmt pos:start="521:7" pos:end="521:24"><expr pos:start="521:7" pos:end="521:23"><call pos:start="521:7" pos:end="521:23"><name pos:start="521:7" pos:end="521:13">oappend</name> <argument_list pos:start="521:15" pos:end="521:23">(<argument pos:start="521:16" pos:end="521:22"><expr pos:start="521:16" pos:end="521:22"><literal type="string" pos:start="521:16" pos:end="521:22">"lock "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="523:7" pos:end="523:35"><expr pos:start="523:7" pos:end="523:34"><name pos:start="523:7" pos:end="523:19">used_prefixes</name> <operator pos:start="523:21" pos:end="523:22">|=</operator> <name pos:start="523:24" pos:end="523:34">PREFIX_LOCK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <if_stmt pos:start="529:3" pos:end="551:5"><if pos:start="529:3" pos:end="551:5">if <condition pos:start="529:6" pos:end="529:29">(<expr pos:start="529:7" pos:end="529:28"><name pos:start="529:7" pos:end="529:14">prefixes</name> <operator pos:start="529:16" pos:end="529:16">&amp;</operator> <name pos:start="529:18" pos:end="529:28">PREFIX_ADDR</name></expr>)</condition>

    <block pos:start="531:5" pos:end="551:5">{<block_content pos:start="533:7" pos:end="549:9">

      <expr_stmt pos:start="533:7" pos:end="533:24"><expr pos:start="533:7" pos:end="533:23"><name pos:start="533:7" pos:end="533:14">sizeflag</name> <operator pos:start="533:16" pos:end="533:17">^=</operator> <name pos:start="533:19" pos:end="533:23">AFLAG</name></expr>;</expr_stmt>

      <if_stmt pos:start="535:7" pos:end="549:9"><if pos:start="535:7" pos:end="549:9">if <condition pos:start="535:10" pos:end="535:63">(<expr pos:start="535:11" pos:end="535:62"><name pos:start="535:11" pos:end="535:19"><name pos:start="535:11" pos:end="535:12">dp</name><operator pos:start="535:13" pos:end="535:14">-&gt;</operator><name pos:start="535:15" pos:end="535:16">op</name><index pos:start="535:17" pos:end="535:19">[<expr pos:start="535:18" pos:end="535:18"><literal type="number" pos:start="535:18" pos:end="535:18">2</literal></expr>]</index></name><operator pos:start="535:20" pos:end="535:20">.</operator><name pos:start="535:21" pos:end="535:28">bytemode</name> <operator pos:start="535:30" pos:end="535:31">!=</operator> <name pos:start="535:33" pos:end="535:46">loop_jcxz_mode</name> <operator pos:start="535:48" pos:end="535:49">||</operator> <name pos:start="535:51" pos:end="535:62">intel_syntax</name></expr>)</condition>

	<block pos:start="537:9" pos:end="549:9">{<block_content pos:start="539:11" pos:end="547:39">

	  <if_stmt pos:start="539:11" pos:end="545:32"><if pos:start="539:11" pos:end="541:32">if <condition pos:start="539:14" pos:end="539:63">(<expr pos:start="539:15" pos:end="539:62"><operator pos:start="539:15" pos:end="539:15">(</operator><name pos:start="539:16" pos:end="539:23">sizeflag</name> <operator pos:start="539:25" pos:end="539:25">&amp;</operator> <name pos:start="539:27" pos:end="539:31">AFLAG</name><operator pos:start="539:32" pos:end="539:32">)</operator> <operator pos:start="539:34" pos:end="539:35">||</operator> <name pos:start="539:37" pos:end="539:48">address_mode</name> <operator pos:start="539:50" pos:end="539:51">==</operator> <name pos:start="539:53" pos:end="539:62">mode_64bit</name></expr>)</condition><block type="pseudo" pos:start="541:13" pos:end="541:32"><block_content pos:start="541:13" pos:end="541:32">

	    <expr_stmt pos:start="541:13" pos:end="541:32"><expr pos:start="541:13" pos:end="541:31"><call pos:start="541:13" pos:end="541:31"><name pos:start="541:13" pos:end="541:19">oappend</name> <argument_list pos:start="541:21" pos:end="541:31">(<argument pos:start="541:22" pos:end="541:30"><expr pos:start="541:22" pos:end="541:30"><literal type="string" pos:start="541:22" pos:end="541:30">"addr32 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="543:11" pos:end="545:32">else<block type="pseudo" pos:start="545:13" pos:end="545:32"><block_content pos:start="545:13" pos:end="545:32">

	    <expr_stmt pos:start="545:13" pos:end="545:32"><expr pos:start="545:13" pos:end="545:31"><call pos:start="545:13" pos:end="545:31"><name pos:start="545:13" pos:end="545:19">oappend</name> <argument_list pos:start="545:21" pos:end="545:31">(<argument pos:start="545:22" pos:end="545:30"><expr pos:start="545:22" pos:end="545:30"><literal type="string" pos:start="545:22" pos:end="545:30">"addr16 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt pos:start="547:11" pos:end="547:39"><expr pos:start="547:11" pos:end="547:38"><name pos:start="547:11" pos:end="547:23">used_prefixes</name> <operator pos:start="547:25" pos:end="547:26">|=</operator> <name pos:start="547:28" pos:end="547:38">PREFIX_ADDR</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



  <if_stmt pos:start="555:3" pos:end="581:5"><if pos:start="555:3" pos:end="581:5">if <condition pos:start="555:6" pos:end="555:52">(<expr pos:start="555:7" pos:end="555:51"><operator pos:start="555:7" pos:end="555:7">!</operator><name pos:start="555:8" pos:end="555:23">uses_DATA_prefix</name> <operator pos:start="555:25" pos:end="555:26">&amp;&amp;</operator> <operator pos:start="555:28" pos:end="555:28">(</operator><name pos:start="555:29" pos:end="555:36">prefixes</name> <operator pos:start="555:38" pos:end="555:38">&amp;</operator> <name pos:start="555:40" pos:end="555:50">PREFIX_DATA</name><operator pos:start="555:51" pos:end="555:51">)</operator></expr>)</condition>

    <block pos:start="557:5" pos:end="581:5">{<block_content pos:start="559:7" pos:end="579:9">

      <expr_stmt pos:start="559:7" pos:end="559:24"><expr pos:start="559:7" pos:end="559:23"><name pos:start="559:7" pos:end="559:14">sizeflag</name> <operator pos:start="559:16" pos:end="559:17">^=</operator> <name pos:start="559:19" pos:end="559:23">DFLAG</name></expr>;</expr_stmt>

      <if_stmt pos:start="561:7" pos:end="579:9"><if pos:start="561:7" pos:end="579:9">if <condition pos:start="561:10" pos:end="565:27">(<expr pos:start="561:11" pos:end="565:26"><name pos:start="561:11" pos:end="561:19"><name pos:start="561:11" pos:end="561:12">dp</name><operator pos:start="561:13" pos:end="561:14">-&gt;</operator><name pos:start="561:15" pos:end="561:16">op</name><index pos:start="561:17" pos:end="561:19">[<expr pos:start="561:18" pos:end="561:18"><literal type="number" pos:start="561:18" pos:end="561:18">2</literal></expr>]</index></name><operator pos:start="561:20" pos:end="561:20">.</operator><name pos:start="561:21" pos:end="561:28">bytemode</name> <operator pos:start="561:30" pos:end="561:31">==</operator> <name pos:start="561:33" pos:end="561:46">cond_jump_mode</name>

	  <operator pos:start="563:11" pos:end="563:12">&amp;&amp;</operator> <name pos:start="563:14" pos:end="563:22"><name pos:start="563:14" pos:end="563:15">dp</name><operator pos:start="563:16" pos:end="563:17">-&gt;</operator><name pos:start="563:18" pos:end="563:19">op</name><index pos:start="563:20" pos:end="563:22">[<expr pos:start="563:21" pos:end="563:21"><literal type="number" pos:start="563:21" pos:end="563:21">0</literal></expr>]</index></name><operator pos:start="563:23" pos:end="563:23">.</operator><name pos:start="563:24" pos:end="563:31">bytemode</name> <operator pos:start="563:33" pos:end="563:34">==</operator> <name pos:start="563:36" pos:end="563:41">v_mode</name>

	  <operator pos:start="565:11" pos:end="565:12">&amp;&amp;</operator> <operator pos:start="565:14" pos:end="565:14">!</operator><name pos:start="565:15" pos:end="565:26">intel_syntax</name></expr>)</condition>

	<block pos:start="567:9" pos:end="579:9">{<block_content pos:start="569:11" pos:end="577:39">

	  <if_stmt pos:start="569:11" pos:end="575:32"><if pos:start="569:11" pos:end="571:32">if <condition pos:start="569:14" pos:end="569:31">(<expr pos:start="569:15" pos:end="569:30"><name pos:start="569:15" pos:end="569:22">sizeflag</name> <operator pos:start="569:24" pos:end="569:24">&amp;</operator> <name pos:start="569:26" pos:end="569:30">DFLAG</name></expr>)</condition><block type="pseudo" pos:start="571:13" pos:end="571:32"><block_content pos:start="571:13" pos:end="571:32">

	    <expr_stmt pos:start="571:13" pos:end="571:32"><expr pos:start="571:13" pos:end="571:31"><call pos:start="571:13" pos:end="571:31"><name pos:start="571:13" pos:end="571:19">oappend</name> <argument_list pos:start="571:21" pos:end="571:31">(<argument pos:start="571:22" pos:end="571:30"><expr pos:start="571:22" pos:end="571:30"><literal type="string" pos:start="571:22" pos:end="571:30">"data32 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="573:11" pos:end="575:32">else<block type="pseudo" pos:start="575:13" pos:end="575:32"><block_content pos:start="575:13" pos:end="575:32">

	    <expr_stmt pos:start="575:13" pos:end="575:32"><expr pos:start="575:13" pos:end="575:31"><call pos:start="575:13" pos:end="575:31"><name pos:start="575:13" pos:end="575:19">oappend</name> <argument_list pos:start="575:21" pos:end="575:31">(<argument pos:start="575:22" pos:end="575:30"><expr pos:start="575:22" pos:end="575:30"><literal type="string" pos:start="575:22" pos:end="575:30">"data16 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt pos:start="577:11" pos:end="577:39"><expr pos:start="577:11" pos:end="577:38"><name pos:start="577:11" pos:end="577:23">used_prefixes</name> <operator pos:start="577:25" pos:end="577:26">|=</operator> <name pos:start="577:28" pos:end="577:38">PREFIX_DATA</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



  <if_stmt pos:start="585:3" pos:end="611:5"><if pos:start="585:3" pos:end="597:5">if <condition pos:start="585:6" pos:end="585:64">(<expr pos:start="585:7" pos:end="585:63"><name pos:start="585:7" pos:end="585:14"><name pos:start="585:7" pos:end="585:8">dp</name><operator pos:start="585:9" pos:end="585:10">-&gt;</operator><name pos:start="585:11" pos:end="585:14">name</name></name> <operator pos:start="585:16" pos:end="585:17">==</operator> <name pos:start="585:19" pos:end="585:22">NULL</name> <operator pos:start="585:24" pos:end="585:25">&amp;&amp;</operator> <name pos:start="585:27" pos:end="585:35"><name pos:start="585:27" pos:end="585:28">dp</name><operator pos:start="585:29" pos:end="585:30">-&gt;</operator><name pos:start="585:31" pos:end="585:32">op</name><index pos:start="585:33" pos:end="585:35">[<expr pos:start="585:34" pos:end="585:34"><literal type="number" pos:start="585:34" pos:end="585:34">0</literal></expr>]</index></name><operator pos:start="585:36" pos:end="585:36">.</operator><name pos:start="585:37" pos:end="585:44">bytemode</name> <operator pos:start="585:46" pos:end="585:47">==</operator> <name pos:start="585:49" pos:end="585:63">IS_3BYTE_OPCODE</name></expr>)</condition>

    <block pos:start="587:5" pos:end="597:5">{<block_content pos:start="589:7" pos:end="595:28">

      <expr_stmt pos:start="589:7" pos:end="589:53"><expr pos:start="589:7" pos:end="589:52"><name pos:start="589:7" pos:end="589:8">dp</name> <operator pos:start="589:10" pos:end="589:10">=</operator> <operator pos:start="589:12" pos:end="589:12">&amp;</operator><name pos:start="589:13" pos:end="589:52"><name pos:start="589:13" pos:end="589:28">three_byte_table</name><index pos:start="589:29" pos:end="589:48">[<expr pos:start="589:30" pos:end="589:47"><name pos:start="589:30" pos:end="589:38"><name pos:start="589:30" pos:end="589:31">dp</name><operator pos:start="589:32" pos:end="589:33">-&gt;</operator><name pos:start="589:34" pos:end="589:35">op</name><index pos:start="589:36" pos:end="589:38">[<expr pos:start="589:37" pos:end="589:37"><literal type="number" pos:start="589:37" pos:end="589:37">1</literal></expr>]</index></name><operator pos:start="589:39" pos:end="589:39">.</operator><name pos:start="589:40" pos:end="589:47">bytemode</name></expr>]</index><index pos:start="589:49" pos:end="589:52">[<expr pos:start="589:50" pos:end="589:51"><name pos:start="589:50" pos:end="589:51">op</name></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt pos:start="591:7" pos:end="591:36"><expr pos:start="591:7" pos:end="591:35"><name pos:start="591:7" pos:end="591:15"><name pos:start="591:7" pos:end="591:11">modrm</name><operator pos:start="591:12" pos:end="591:12">.</operator><name pos:start="591:13" pos:end="591:15">mod</name></name> <operator pos:start="591:17" pos:end="591:17">=</operator> <operator pos:start="591:19" pos:end="591:19">(</operator><operator pos:start="591:20" pos:end="591:20">*</operator><name pos:start="591:21" pos:end="591:25">codep</name> <operator pos:start="591:27" pos:end="591:28">&gt;&gt;</operator> <literal type="number" pos:start="591:30" pos:end="591:30">6</literal><operator pos:start="591:31" pos:end="591:31">)</operator> <operator pos:start="591:33" pos:end="591:33">&amp;</operator> <literal type="number" pos:start="591:35" pos:end="591:35">3</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="593:7" pos:end="593:36"><expr pos:start="593:7" pos:end="593:35"><name pos:start="593:7" pos:end="593:15"><name pos:start="593:7" pos:end="593:11">modrm</name><operator pos:start="593:12" pos:end="593:12">.</operator><name pos:start="593:13" pos:end="593:15">reg</name></name> <operator pos:start="593:17" pos:end="593:17">=</operator> <operator pos:start="593:19" pos:end="593:19">(</operator><operator pos:start="593:20" pos:end="593:20">*</operator><name pos:start="593:21" pos:end="593:25">codep</name> <operator pos:start="593:27" pos:end="593:28">&gt;&gt;</operator> <literal type="number" pos:start="593:30" pos:end="593:30">3</literal><operator pos:start="593:31" pos:end="593:31">)</operator> <operator pos:start="593:33" pos:end="593:33">&amp;</operator> <literal type="number" pos:start="593:35" pos:end="593:35">7</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="595:7" pos:end="595:28"><expr pos:start="595:7" pos:end="595:27"><name pos:start="595:7" pos:end="595:14"><name pos:start="595:7" pos:end="595:11">modrm</name><operator pos:start="595:12" pos:end="595:12">.</operator><name pos:start="595:13" pos:end="595:14">rm</name></name> <operator pos:start="595:16" pos:end="595:16">=</operator> <operator pos:start="595:18" pos:end="595:18">*</operator><name pos:start="595:19" pos:end="595:23">codep</name> <operator pos:start="595:25" pos:end="595:25">&amp;</operator> <literal type="number" pos:start="595:27" pos:end="595:27">7</literal></expr>;</expr_stmt>

    </block_content>}</block></if>

  <if type="elseif" pos:start="599:3" pos:end="611:5">else if <condition pos:start="599:11" pos:end="599:22">(<expr pos:start="599:12" pos:end="599:21"><name pos:start="599:12" pos:end="599:21">need_modrm</name></expr>)</condition>

    <block pos:start="601:5" pos:end="611:5">{<block_content pos:start="603:7" pos:end="609:28">

      <expr_stmt pos:start="603:7" pos:end="603:34"><expr pos:start="603:7" pos:end="603:33"><call pos:start="603:7" pos:end="603:33"><name pos:start="603:7" pos:end="603:16">fetch_data</name><argument_list pos:start="603:17" pos:end="603:33">(<argument pos:start="603:18" pos:end="603:21"><expr pos:start="603:18" pos:end="603:21"><name pos:start="603:18" pos:end="603:21">info</name></expr></argument>, <argument pos:start="603:24" pos:end="603:32"><expr pos:start="603:24" pos:end="603:32"><name pos:start="603:24" pos:end="603:28">codep</name> <operator pos:start="603:30" pos:end="603:30">+</operator> <literal type="number" pos:start="603:32" pos:end="603:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="605:7" pos:end="605:36"><expr pos:start="605:7" pos:end="605:35"><name pos:start="605:7" pos:end="605:15"><name pos:start="605:7" pos:end="605:11">modrm</name><operator pos:start="605:12" pos:end="605:12">.</operator><name pos:start="605:13" pos:end="605:15">mod</name></name> <operator pos:start="605:17" pos:end="605:17">=</operator> <operator pos:start="605:19" pos:end="605:19">(</operator><operator pos:start="605:20" pos:end="605:20">*</operator><name pos:start="605:21" pos:end="605:25">codep</name> <operator pos:start="605:27" pos:end="605:28">&gt;&gt;</operator> <literal type="number" pos:start="605:30" pos:end="605:30">6</literal><operator pos:start="605:31" pos:end="605:31">)</operator> <operator pos:start="605:33" pos:end="605:33">&amp;</operator> <literal type="number" pos:start="605:35" pos:end="605:35">3</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="607:7" pos:end="607:36"><expr pos:start="607:7" pos:end="607:35"><name pos:start="607:7" pos:end="607:15"><name pos:start="607:7" pos:end="607:11">modrm</name><operator pos:start="607:12" pos:end="607:12">.</operator><name pos:start="607:13" pos:end="607:15">reg</name></name> <operator pos:start="607:17" pos:end="607:17">=</operator> <operator pos:start="607:19" pos:end="607:19">(</operator><operator pos:start="607:20" pos:end="607:20">*</operator><name pos:start="607:21" pos:end="607:25">codep</name> <operator pos:start="607:27" pos:end="607:28">&gt;&gt;</operator> <literal type="number" pos:start="607:30" pos:end="607:30">3</literal><operator pos:start="607:31" pos:end="607:31">)</operator> <operator pos:start="607:33" pos:end="607:33">&amp;</operator> <literal type="number" pos:start="607:35" pos:end="607:35">7</literal></expr>;</expr_stmt>

      <expr_stmt pos:start="609:7" pos:end="609:28"><expr pos:start="609:7" pos:end="609:27"><name pos:start="609:7" pos:end="609:14"><name pos:start="609:7" pos:end="609:11">modrm</name><operator pos:start="609:12" pos:end="609:12">.</operator><name pos:start="609:13" pos:end="609:14">rm</name></name> <operator pos:start="609:16" pos:end="609:16">=</operator> <operator pos:start="609:18" pos:end="609:18">*</operator><name pos:start="609:19" pos:end="609:23">codep</name> <operator pos:start="609:25" pos:end="609:25">&amp;</operator> <literal type="number" pos:start="609:27" pos:end="609:27">7</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <if_stmt pos:start="615:3" pos:end="731:5"><if pos:start="615:3" pos:end="621:5">if <condition pos:start="615:6" pos:end="615:58">(<expr pos:start="615:7" pos:end="615:57"><name pos:start="615:7" pos:end="615:14"><name pos:start="615:7" pos:end="615:8">dp</name><operator pos:start="615:9" pos:end="615:10">-&gt;</operator><name pos:start="615:11" pos:end="615:14">name</name></name> <operator pos:start="615:16" pos:end="615:17">==</operator> <name pos:start="615:19" pos:end="615:22">NULL</name> <operator pos:start="615:24" pos:end="615:25">&amp;&amp;</operator> <name pos:start="615:27" pos:end="615:35"><name pos:start="615:27" pos:end="615:28">dp</name><operator pos:start="615:29" pos:end="615:30">-&gt;</operator><name pos:start="615:31" pos:end="615:32">op</name><index pos:start="615:33" pos:end="615:35">[<expr pos:start="615:34" pos:end="615:34"><literal type="number" pos:start="615:34" pos:end="615:34">0</literal></expr>]</index></name><operator pos:start="615:36" pos:end="615:36">.</operator><name pos:start="615:37" pos:end="615:44">bytemode</name> <operator pos:start="615:46" pos:end="615:47">==</operator> <name pos:start="615:49" pos:end="615:57">FLOATCODE</name></expr>)</condition>

    <block pos:start="617:5" pos:end="621:5">{<block_content pos:start="619:7" pos:end="619:25">

      <expr_stmt pos:start="619:7" pos:end="619:25"><expr pos:start="619:7" pos:end="619:24"><call pos:start="619:7" pos:end="619:24"><name pos:start="619:7" pos:end="619:13">dofloat</name> <argument_list pos:start="619:15" pos:end="619:24">(<argument pos:start="619:16" pos:end="619:23"><expr pos:start="619:16" pos:end="619:23"><name pos:start="619:16" pos:end="619:23">sizeflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if>

  <else pos:start="623:3" pos:end="731:5">else

    <block pos:start="625:5" pos:end="731:5">{<block_content pos:start="627:7" pos:end="729:9">

      <decl_stmt pos:start="627:7" pos:end="627:16"><decl pos:start="627:7" pos:end="627:15"><type pos:start="627:7" pos:end="627:9"><name pos:start="627:7" pos:end="627:9">int</name></type> <name pos:start="627:11" pos:end="627:15">index</name></decl>;</decl_stmt>

      <if_stmt pos:start="629:7" pos:end="707:9"><if pos:start="629:7" pos:end="707:9">if <condition pos:start="629:10" pos:end="629:27">(<expr pos:start="629:11" pos:end="629:26"><name pos:start="629:11" pos:end="629:18"><name pos:start="629:11" pos:end="629:12">dp</name><operator pos:start="629:13" pos:end="629:14">-&gt;</operator><name pos:start="629:15" pos:end="629:18">name</name></name> <operator pos:start="629:20" pos:end="629:21">==</operator> <name pos:start="629:23" pos:end="629:26">NULL</name></expr>)</condition>

	<block pos:start="631:9" pos:end="707:9">{<block_content pos:start="633:11" pos:end="705:13">

	  <switch pos:start="633:11" pos:end="705:13">switch <condition pos:start="633:18" pos:end="633:37">(<expr pos:start="633:19" pos:end="633:36"><name pos:start="633:19" pos:end="633:27"><name pos:start="633:19" pos:end="633:20">dp</name><operator pos:start="633:21" pos:end="633:22">-&gt;</operator><name pos:start="633:23" pos:end="633:24">op</name><index pos:start="633:25" pos:end="633:27">[<expr pos:start="633:26" pos:end="633:26"><literal type="number" pos:start="633:26" pos:end="633:26">0</literal></expr>]</index></name><operator pos:start="633:28" pos:end="633:28">.</operator><name pos:start="633:29" pos:end="633:36">bytemode</name></expr>)</condition>

	    <block pos:start="635:13" pos:end="705:13">{<block_content pos:start="637:13" pos:end="703:20">

	    <case pos:start="637:13" pos:end="637:28">case <expr pos:start="637:18" pos:end="637:27"><name pos:start="637:18" pos:end="637:27">USE_GROUPS</name></expr>:</case>

	      <expr_stmt pos:start="639:15" pos:end="639:56"><expr pos:start="639:15" pos:end="639:55"><name pos:start="639:15" pos:end="639:16">dp</name> <operator pos:start="639:18" pos:end="639:18">=</operator> <operator pos:start="639:20" pos:end="639:20">&amp;</operator><name pos:start="639:21" pos:end="639:55"><name pos:start="639:21" pos:end="639:24">grps</name><index pos:start="639:25" pos:end="639:44">[<expr pos:start="639:26" pos:end="639:43"><name pos:start="639:26" pos:end="639:34"><name pos:start="639:26" pos:end="639:27">dp</name><operator pos:start="639:28" pos:end="639:29">-&gt;</operator><name pos:start="639:30" pos:end="639:31">op</name><index pos:start="639:32" pos:end="639:34">[<expr pos:start="639:33" pos:end="639:33"><literal type="number" pos:start="639:33" pos:end="639:33">1</literal></expr>]</index></name><operator pos:start="639:35" pos:end="639:35">.</operator><name pos:start="639:36" pos:end="639:43">bytemode</name></expr>]</index><index pos:start="639:45" pos:end="639:55">[<expr pos:start="639:46" pos:end="639:54"><name pos:start="639:46" pos:end="639:54"><name pos:start="639:46" pos:end="639:50">modrm</name><operator pos:start="639:51" pos:end="639:51">.</operator><name pos:start="639:52" pos:end="639:54">reg</name></name></expr>]</index></name></expr>;</expr_stmt>

	      <break pos:start="641:15" pos:end="641:20">break;</break>



	    <case pos:start="645:13" pos:end="645:39">case <expr pos:start="645:18" pos:end="645:38"><name pos:start="645:18" pos:end="645:38">USE_PREFIX_USER_TABLE</name></expr>:</case>

	      <expr_stmt pos:start="647:15" pos:end="647:24"><expr pos:start="647:15" pos:end="647:23"><name pos:start="647:15" pos:end="647:19">index</name> <operator pos:start="647:21" pos:end="647:21">=</operator> <literal type="number" pos:start="647:23" pos:end="647:23">0</literal></expr>;</expr_stmt>

	      <expr_stmt pos:start="649:15" pos:end="649:56"><expr pos:start="649:15" pos:end="649:55"><name pos:start="649:15" pos:end="649:27">used_prefixes</name> <operator pos:start="649:29" pos:end="649:30">|=</operator> <operator pos:start="649:32" pos:end="649:32">(</operator><name pos:start="649:33" pos:end="649:40">prefixes</name> <operator pos:start="649:42" pos:end="649:42">&amp;</operator> <name pos:start="649:44" pos:end="649:54">PREFIX_REPZ</name><operator pos:start="649:55" pos:end="649:55">)</operator></expr>;</expr_stmt>

	      <if_stmt pos:start="651:15" pos:end="681:17"><if pos:start="651:15" pos:end="653:26">if <condition pos:start="651:18" pos:end="651:41">(<expr pos:start="651:19" pos:end="651:40"><name pos:start="651:19" pos:end="651:26">prefixes</name> <operator pos:start="651:28" pos:end="651:28">&amp;</operator> <name pos:start="651:30" pos:end="651:40">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="653:17" pos:end="653:26"><block_content pos:start="653:17" pos:end="653:26">

		<expr_stmt pos:start="653:17" pos:end="653:26"><expr pos:start="653:17" pos:end="653:25"><name pos:start="653:17" pos:end="653:21">index</name> <operator pos:start="653:23" pos:end="653:23">=</operator> <literal type="number" pos:start="653:25" pos:end="653:25">1</literal></expr>;</expr_stmt></block_content></block></if>

	      <else pos:start="655:15" pos:end="681:17">else

		<block pos:start="657:17" pos:end="681:17">{<block_content pos:start="663:19" pos:end="679:21">

		  <comment type="block" pos:start="659:19" pos:end="661:44">/* We should check PREFIX_REPNZ and PREFIX_REPZ

		     before PREFIX_DATA.  */</comment>

		  <expr_stmt pos:start="663:19" pos:end="663:61"><expr pos:start="663:19" pos:end="663:60"><name pos:start="663:19" pos:end="663:31">used_prefixes</name> <operator pos:start="663:33" pos:end="663:34">|=</operator> <operator pos:start="663:36" pos:end="663:36">(</operator><name pos:start="663:37" pos:end="663:44">prefixes</name> <operator pos:start="663:46" pos:end="663:46">&amp;</operator> <name pos:start="663:48" pos:end="663:59">PREFIX_REPNZ</name><operator pos:start="663:60" pos:end="663:60">)</operator></expr>;</expr_stmt>

		  <if_stmt pos:start="665:19" pos:end="679:21"><if pos:start="665:19" pos:end="667:30">if <condition pos:start="665:22" pos:end="665:46">(<expr pos:start="665:23" pos:end="665:45"><name pos:start="665:23" pos:end="665:30">prefixes</name> <operator pos:start="665:32" pos:end="665:32">&amp;</operator> <name pos:start="665:34" pos:end="665:45">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="667:21" pos:end="667:30"><block_content pos:start="667:21" pos:end="667:30">

		    <expr_stmt pos:start="667:21" pos:end="667:30"><expr pos:start="667:21" pos:end="667:29"><name pos:start="667:21" pos:end="667:25">index</name> <operator pos:start="667:27" pos:end="667:27">=</operator> <literal type="number" pos:start="667:29" pos:end="667:29">3</literal></expr>;</expr_stmt></block_content></block></if>

		  <else pos:start="669:19" pos:end="679:21">else

		    <block pos:start="671:21" pos:end="679:21">{<block_content pos:start="673:23" pos:end="677:34">

		      <expr_stmt pos:start="673:23" pos:end="673:64"><expr pos:start="673:23" pos:end="673:63"><name pos:start="673:23" pos:end="673:35">used_prefixes</name> <operator pos:start="673:37" pos:end="673:38">|=</operator> <operator pos:start="673:40" pos:end="673:40">(</operator><name pos:start="673:41" pos:end="673:48">prefixes</name> <operator pos:start="673:50" pos:end="673:50">&amp;</operator> <name pos:start="673:52" pos:end="673:62">PREFIX_DATA</name><operator pos:start="673:63" pos:end="673:63">)</operator></expr>;</expr_stmt>

		      <if_stmt pos:start="675:23" pos:end="677:34"><if pos:start="675:23" pos:end="677:34">if <condition pos:start="675:26" pos:end="675:49">(<expr pos:start="675:27" pos:end="675:48"><name pos:start="675:27" pos:end="675:34">prefixes</name> <operator pos:start="675:36" pos:end="675:36">&amp;</operator> <name pos:start="675:38" pos:end="675:48">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="677:25" pos:end="677:34"><block_content pos:start="677:25" pos:end="677:34">

			<expr_stmt pos:start="677:25" pos:end="677:34"><expr pos:start="677:25" pos:end="677:33"><name pos:start="677:25" pos:end="677:29">index</name> <operator pos:start="677:31" pos:end="677:31">=</operator> <literal type="number" pos:start="677:33" pos:end="677:33">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		    </block_content>}</block></else></if_stmt>

		</block_content>}</block></else></if_stmt>

	      <expr_stmt pos:start="683:15" pos:end="683:65"><expr pos:start="683:15" pos:end="683:64"><name pos:start="683:15" pos:end="683:16">dp</name> <operator pos:start="683:18" pos:end="683:18">=</operator> <operator pos:start="683:20" pos:end="683:20">&amp;</operator><name pos:start="683:21" pos:end="683:64"><name pos:start="683:21" pos:end="683:37">prefix_user_table</name><index pos:start="683:38" pos:end="683:57">[<expr pos:start="683:39" pos:end="683:56"><name pos:start="683:39" pos:end="683:47"><name pos:start="683:39" pos:end="683:40">dp</name><operator pos:start="683:41" pos:end="683:42">-&gt;</operator><name pos:start="683:43" pos:end="683:44">op</name><index pos:start="683:45" pos:end="683:47">[<expr pos:start="683:46" pos:end="683:46"><literal type="number" pos:start="683:46" pos:end="683:46">1</literal></expr>]</index></name><operator pos:start="683:48" pos:end="683:48">.</operator><name pos:start="683:49" pos:end="683:56">bytemode</name></expr>]</index><index pos:start="683:58" pos:end="683:64">[<expr pos:start="683:59" pos:end="683:63"><name pos:start="683:59" pos:end="683:63">index</name></expr>]</index></name></expr>;</expr_stmt>

	      <break pos:start="685:15" pos:end="685:20">break;</break>



	    <case pos:start="689:13" pos:end="689:32">case <expr pos:start="689:18" pos:end="689:31"><name pos:start="689:18" pos:end="689:31">X86_64_SPECIAL</name></expr>:</case>

	      <expr_stmt pos:start="691:15" pos:end="691:57"><expr pos:start="691:15" pos:end="691:56"><name pos:start="691:15" pos:end="691:19">index</name> <operator pos:start="691:21" pos:end="691:21">=</operator> <ternary pos:start="691:23" pos:end="691:56"><condition pos:start="691:23" pos:end="691:50"><expr pos:start="691:23" pos:end="691:48"><name pos:start="691:23" pos:end="691:34">address_mode</name> <operator pos:start="691:36" pos:end="691:37">==</operator> <name pos:start="691:39" pos:end="691:48">mode_64bit</name></expr> ?</condition><then pos:start="691:52" pos:end="691:52"> <expr pos:start="691:52" pos:end="691:52"><literal type="number" pos:start="691:52" pos:end="691:52">1</literal></expr> </then><else pos:start="691:54" pos:end="691:56">: <expr pos:start="691:56" pos:end="691:56"><literal type="number" pos:start="691:56" pos:end="691:56">0</literal></expr></else></ternary></expr>;</expr_stmt>

	      <expr_stmt pos:start="693:15" pos:end="693:60"><expr pos:start="693:15" pos:end="693:59"><name pos:start="693:15" pos:end="693:16">dp</name> <operator pos:start="693:18" pos:end="693:18">=</operator> <operator pos:start="693:20" pos:end="693:20">&amp;</operator><name pos:start="693:21" pos:end="693:59"><name pos:start="693:21" pos:end="693:32">x86_64_table</name><index pos:start="693:33" pos:end="693:52">[<expr pos:start="693:34" pos:end="693:51"><name pos:start="693:34" pos:end="693:42"><name pos:start="693:34" pos:end="693:35">dp</name><operator pos:start="693:36" pos:end="693:37">-&gt;</operator><name pos:start="693:38" pos:end="693:39">op</name><index pos:start="693:40" pos:end="693:42">[<expr pos:start="693:41" pos:end="693:41"><literal type="number" pos:start="693:41" pos:end="693:41">1</literal></expr>]</index></name><operator pos:start="693:43" pos:end="693:43">.</operator><name pos:start="693:44" pos:end="693:51">bytemode</name></expr>]</index><index pos:start="693:53" pos:end="693:59">[<expr pos:start="693:54" pos:end="693:58"><name pos:start="693:54" pos:end="693:58">index</name></expr>]</index></name></expr>;</expr_stmt>

	      <break pos:start="695:15" pos:end="695:20">break;</break>



	    <default pos:start="699:13" pos:end="699:20">default:</default>

	      <expr_stmt pos:start="701:15" pos:end="701:52"><expr pos:start="701:15" pos:end="701:51"><call pos:start="701:15" pos:end="701:51"><name pos:start="701:15" pos:end="701:21">oappend</name> <argument_list pos:start="701:23" pos:end="701:51">(<argument pos:start="701:24" pos:end="701:50"><expr pos:start="701:24" pos:end="701:50"><name pos:start="701:24" pos:end="701:50">INTERNAL_DISASSEMBLER_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <break pos:start="703:15" pos:end="703:20">break;</break>

	    </block_content>}</block></switch>

	</block_content>}</block></if></if_stmt>



      <if_stmt pos:start="711:7" pos:end="729:9"><if pos:start="711:7" pos:end="729:9">if <condition pos:start="711:10" pos:end="711:42">(<expr pos:start="711:11" pos:end="711:41"><call pos:start="711:11" pos:end="711:36"><name pos:start="711:11" pos:end="711:15">putop</name> <argument_list pos:start="711:17" pos:end="711:36">(<argument pos:start="711:18" pos:end="711:25"><expr pos:start="711:18" pos:end="711:25"><name pos:start="711:18" pos:end="711:25"><name pos:start="711:18" pos:end="711:19">dp</name><operator pos:start="711:20" pos:end="711:21">-&gt;</operator><name pos:start="711:22" pos:end="711:25">name</name></name></expr></argument>, <argument pos:start="711:28" pos:end="711:35"><expr pos:start="711:28" pos:end="711:35"><name pos:start="711:28" pos:end="711:35">sizeflag</name></expr></argument>)</argument_list></call> <operator pos:start="711:38" pos:end="711:39">==</operator> <literal type="number" pos:start="711:41" pos:end="711:41">0</literal></expr>)</condition>

        <block pos:start="713:9" pos:end="729:9">{<block_content pos:start="715:11" pos:end="727:13">

	  <for pos:start="715:11" pos:end="727:13">for <control pos:start="715:15" pos:end="715:44">(<init pos:start="715:16" pos:end="715:21"><expr pos:start="715:16" pos:end="715:20"><name pos:start="715:16" pos:end="715:16">i</name> <operator pos:start="715:18" pos:end="715:18">=</operator> <literal type="number" pos:start="715:20" pos:end="715:20">0</literal></expr>;</init> <condition pos:start="715:23" pos:end="715:39"><expr pos:start="715:23" pos:end="715:38"><name pos:start="715:23" pos:end="715:23">i</name> <operator pos:start="715:25" pos:end="715:25">&lt;</operator> <name pos:start="715:27" pos:end="715:38">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="715:41" pos:end="715:43"><expr pos:start="715:41" pos:end="715:43"><operator pos:start="715:41" pos:end="715:42">++</operator><name pos:start="715:43" pos:end="715:43">i</name></expr></incr>)</control>

	    <block pos:start="717:13" pos:end="727:13">{<block_content pos:start="719:15" pos:end="725:64">

	      <expr_stmt pos:start="719:15" pos:end="719:32"><expr pos:start="719:15" pos:end="719:31"><name pos:start="719:15" pos:end="719:19">obufp</name> <operator pos:start="719:21" pos:end="719:21">=</operator> <name pos:start="719:23" pos:end="719:31"><name pos:start="719:23" pos:end="719:28">op_out</name><index pos:start="719:29" pos:end="719:31">[<expr pos:start="719:30" pos:end="719:30"><name pos:start="719:30" pos:end="719:30">i</name></expr>]</index></name></expr>;</expr_stmt>

	      <expr_stmt pos:start="721:15" pos:end="721:43"><expr pos:start="721:15" pos:end="721:42"><name pos:start="721:15" pos:end="721:19">op_ad</name> <operator pos:start="721:21" pos:end="721:21">=</operator> <name pos:start="721:23" pos:end="721:34">MAX_OPERANDS</name> <operator pos:start="721:36" pos:end="721:36">-</operator> <literal type="number" pos:start="721:38" pos:end="721:40">1</literal> <operator pos:start="721:40" pos:end="721:40">-</operator> <name pos:start="721:42" pos:end="721:42">i</name></expr>;</expr_stmt>

	      <if_stmt pos:start="723:15" pos:end="725:64"><if pos:start="723:15" pos:end="725:64">if <condition pos:start="723:18" pos:end="723:32">(<expr pos:start="723:19" pos:end="723:31"><name pos:start="723:19" pos:end="723:27"><name pos:start="723:19" pos:end="723:20">dp</name><operator pos:start="723:21" pos:end="723:22">-&gt;</operator><name pos:start="723:23" pos:end="723:24">op</name><index pos:start="723:25" pos:end="723:27">[<expr pos:start="723:26" pos:end="723:26"><name pos:start="723:26" pos:end="723:26">i</name></expr>]</index></name><operator pos:start="723:28" pos:end="723:28">.</operator><name pos:start="723:29" pos:end="723:31">rtn</name></expr>)</condition><block type="pseudo" pos:start="725:17" pos:end="725:64"><block_content pos:start="725:17" pos:end="725:64">

		<expr_stmt pos:start="725:17" pos:end="725:64"><expr pos:start="725:17" pos:end="725:63"><operator pos:start="725:17" pos:end="725:17">(</operator><operator pos:start="725:18" pos:end="725:18">*</operator><name pos:start="725:19" pos:end="725:27"><name pos:start="725:19" pos:end="725:20">dp</name><operator pos:start="725:21" pos:end="725:22">-&gt;</operator><name pos:start="725:23" pos:end="725:24">op</name><index pos:start="725:25" pos:end="725:27">[<expr pos:start="725:26" pos:end="725:26"><name pos:start="725:26" pos:end="725:26">i</name></expr>]</index></name><operator pos:start="725:28" pos:end="725:28">.</operator><name pos:start="725:29" pos:end="725:31">rtn</name><operator pos:start="725:32" pos:end="725:32">)</operator> <operator pos:start="725:34" pos:end="725:34">(</operator><name pos:start="725:35" pos:end="725:43"><name pos:start="725:35" pos:end="725:36">dp</name><operator pos:start="725:37" pos:end="725:38">-&gt;</operator><name pos:start="725:39" pos:end="725:40">op</name><index pos:start="725:41" pos:end="725:43">[<expr pos:start="725:42" pos:end="725:42"><name pos:start="725:42" pos:end="725:42">i</name></expr>]</index></name><operator pos:start="725:44" pos:end="725:44">.</operator><name pos:start="725:45" pos:end="725:52">bytemode</name><operator pos:start="725:53" pos:end="725:53">,</operator> <name pos:start="725:55" pos:end="725:62">sizeflag</name><operator pos:start="725:63" pos:end="725:63">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    </block_content>}</block></for>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



  <comment type="block" pos:start="735:3" pos:end="741:36">/* See if any prefixes were not used.  If so, print the first one

     separately.  If we don't do this, we'll wind up printing an

     instruction stream which does not precisely correspond to the

     bytes we are disassembling.  */</comment>

  <if_stmt pos:start="743:3" pos:end="761:5"><if pos:start="743:3" pos:end="761:5">if <condition pos:start="743:6" pos:end="743:39">(<expr pos:start="743:7" pos:end="743:38"><operator pos:start="743:7" pos:end="743:7">(</operator><name pos:start="743:8" pos:end="743:15">prefixes</name> <operator pos:start="743:17" pos:end="743:17">&amp;</operator> <operator pos:start="743:19" pos:end="743:19">~</operator><name pos:start="743:20" pos:end="743:32">used_prefixes</name><operator pos:start="743:33" pos:end="743:33">)</operator> <operator pos:start="743:35" pos:end="743:36">!=</operator> <literal type="number" pos:start="743:38" pos:end="743:38">0</literal></expr>)</condition>

    <block pos:start="745:5" pos:end="761:5">{<block_content pos:start="747:7" pos:end="759:15">

      <decl_stmt pos:start="747:7" pos:end="747:23"><decl pos:start="747:7" pos:end="747:22"><type pos:start="747:7" pos:end="747:18"><specifier pos:start="747:7" pos:end="747:11">const</specifier> <name pos:start="747:13" pos:end="747:16">char</name> <modifier pos:start="747:18" pos:end="747:18">*</modifier></type><name pos:start="747:19" pos:end="747:22">name</name></decl>;</decl_stmt>



      <expr_stmt pos:start="751:7" pos:end="751:66"><expr pos:start="751:7" pos:end="751:65"><name pos:start="751:7" pos:end="751:10">name</name> <operator pos:start="751:12" pos:end="751:12">=</operator> <call pos:start="751:14" pos:end="751:65"><name pos:start="751:14" pos:end="751:24">prefix_name</name> <argument_list pos:start="751:26" pos:end="751:65">(<argument pos:start="751:27" pos:end="751:44"><expr pos:start="751:27" pos:end="751:44"><name pos:start="751:27" pos:end="751:44"><name pos:start="751:27" pos:end="751:30">priv</name><operator pos:start="751:31" pos:end="751:31">.</operator><name pos:start="751:32" pos:end="751:41">the_buffer</name><index pos:start="751:42" pos:end="751:44">[<expr pos:start="751:43" pos:end="751:43"><literal type="number" pos:start="751:43" pos:end="751:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="751:47" pos:end="751:64"><expr pos:start="751:47" pos:end="751:64"><name pos:start="751:47" pos:end="751:64"><name pos:start="751:47" pos:end="751:50">priv</name><operator pos:start="751:51" pos:end="751:51">.</operator><name pos:start="751:52" pos:end="751:64">orig_sizeflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="753:7" pos:end="755:43"><if pos:start="753:7" pos:end="755:43">if <condition pos:start="753:10" pos:end="753:23">(<expr pos:start="753:11" pos:end="753:22"><name pos:start="753:11" pos:end="753:14">name</name> <operator pos:start="753:16" pos:end="753:17">==</operator> <name pos:start="753:19" pos:end="753:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="755:9" pos:end="755:43"><block_content pos:start="755:9" pos:end="755:43">

	<expr_stmt pos:start="755:9" pos:end="755:43"><expr pos:start="755:9" pos:end="755:42"><name pos:start="755:9" pos:end="755:12">name</name> <operator pos:start="755:14" pos:end="755:14">=</operator> <name pos:start="755:16" pos:end="755:42">INTERNAL_DISASSEMBLER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt pos:start="757:7" pos:end="757:55"><expr pos:start="757:7" pos:end="757:54"><call pos:start="757:7" pos:end="757:54">(<modifier pos:start="757:8" pos:end="757:8">*</modifier><name pos:start="757:9" pos:end="757:26"><name pos:start="757:9" pos:end="757:12">info</name><operator pos:start="757:13" pos:end="757:14">-&gt;</operator><name pos:start="757:15" pos:end="757:26">fprintf_func</name></name>) <argument_list pos:start="757:29" pos:end="757:54">(<argument pos:start="757:30" pos:end="757:41"><expr pos:start="757:30" pos:end="757:41"><name pos:start="757:30" pos:end="757:41"><name pos:start="757:30" pos:end="757:33">info</name><operator pos:start="757:34" pos:end="757:35">-&gt;</operator><name pos:start="757:36" pos:end="757:41">stream</name></name></expr></argument>, <argument pos:start="757:44" pos:end="757:47"><expr pos:start="757:44" pos:end="757:47"><literal type="string" pos:start="757:44" pos:end="757:47">"%s"</literal></expr></argument>, <argument pos:start="757:50" pos:end="757:53"><expr pos:start="757:50" pos:end="757:53"><name pos:start="757:50" pos:end="757:53">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return pos:start="759:7" pos:end="759:15">return <expr pos:start="759:14" pos:end="759:14"><literal type="number" pos:start="759:14" pos:end="759:14">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

  <if_stmt pos:start="763:3" pos:end="777:5"><if pos:start="763:3" pos:end="777:5">if <condition pos:start="763:6" pos:end="763:22">(<expr pos:start="763:7" pos:end="763:21"><name pos:start="763:7" pos:end="763:9">rex</name> <operator pos:start="763:11" pos:end="763:11">&amp;</operator> <operator pos:start="763:13" pos:end="763:13">~</operator><name pos:start="763:14" pos:end="763:21">rex_used</name></expr>)</condition>

    <block pos:start="765:5" pos:end="777:5">{<block_content pos:start="767:7" pos:end="775:56">

      <decl_stmt pos:start="767:7" pos:end="767:23"><decl pos:start="767:7" pos:end="767:22"><type pos:start="767:7" pos:end="767:18"><specifier pos:start="767:7" pos:end="767:11">const</specifier> <name pos:start="767:13" pos:end="767:16">char</name> <modifier pos:start="767:18" pos:end="767:18">*</modifier></type><name pos:start="767:19" pos:end="767:22">name</name></decl>;</decl_stmt>

      <expr_stmt pos:start="769:7" pos:end="769:58"><expr pos:start="769:7" pos:end="769:57"><name pos:start="769:7" pos:end="769:10">name</name> <operator pos:start="769:12" pos:end="769:12">=</operator> <call pos:start="769:14" pos:end="769:57"><name pos:start="769:14" pos:end="769:24">prefix_name</name> <argument_list pos:start="769:26" pos:end="769:57">(<argument pos:start="769:27" pos:end="769:36"><expr pos:start="769:27" pos:end="769:36"><name pos:start="769:27" pos:end="769:29">rex</name> <operator pos:start="769:31" pos:end="769:31">|</operator> <literal type="number" pos:start="769:33" pos:end="769:36">0x40</literal></expr></argument>, <argument pos:start="769:39" pos:end="769:56"><expr pos:start="769:39" pos:end="769:56"><name pos:start="769:39" pos:end="769:56"><name pos:start="769:39" pos:end="769:42">priv</name><operator pos:start="769:43" pos:end="769:43">.</operator><name pos:start="769:44" pos:end="769:56">orig_sizeflag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt pos:start="771:7" pos:end="773:43"><if pos:start="771:7" pos:end="773:43">if <condition pos:start="771:10" pos:end="771:23">(<expr pos:start="771:11" pos:end="771:22"><name pos:start="771:11" pos:end="771:14">name</name> <operator pos:start="771:16" pos:end="771:17">==</operator> <name pos:start="771:19" pos:end="771:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="773:9" pos:end="773:43"><block_content pos:start="773:9" pos:end="773:43">

	<expr_stmt pos:start="773:9" pos:end="773:43"><expr pos:start="773:9" pos:end="773:42"><name pos:start="773:9" pos:end="773:12">name</name> <operator pos:start="773:14" pos:end="773:14">=</operator> <name pos:start="773:16" pos:end="773:42">INTERNAL_DISASSEMBLER_ERROR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt pos:start="775:7" pos:end="775:56"><expr pos:start="775:7" pos:end="775:55"><call pos:start="775:7" pos:end="775:55">(<modifier pos:start="775:8" pos:end="775:8">*</modifier><name pos:start="775:9" pos:end="775:26"><name pos:start="775:9" pos:end="775:12">info</name><operator pos:start="775:13" pos:end="775:14">-&gt;</operator><name pos:start="775:15" pos:end="775:26">fprintf_func</name></name>) <argument_list pos:start="775:29" pos:end="775:55">(<argument pos:start="775:30" pos:end="775:41"><expr pos:start="775:30" pos:end="775:41"><name pos:start="775:30" pos:end="775:41"><name pos:start="775:30" pos:end="775:33">info</name><operator pos:start="775:34" pos:end="775:35">-&gt;</operator><name pos:start="775:36" pos:end="775:41">stream</name></name></expr></argument>, <argument pos:start="775:44" pos:end="775:48"><expr pos:start="775:44" pos:end="775:48"><literal type="string" pos:start="775:44" pos:end="775:48">"%s "</literal></expr></argument>, <argument pos:start="775:51" pos:end="775:54"><expr pos:start="775:51" pos:end="775:54"><name pos:start="775:51" pos:end="775:54">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="781:3" pos:end="781:31"><expr pos:start="781:3" pos:end="781:30"><name pos:start="781:3" pos:end="781:7">obufp</name> <operator pos:start="781:9" pos:end="781:9">=</operator> <name pos:start="781:11" pos:end="781:14">obuf</name> <operator pos:start="781:16" pos:end="781:16">+</operator> <call pos:start="781:18" pos:end="781:30"><name pos:start="781:18" pos:end="781:23">strlen</name> <argument_list pos:start="781:25" pos:end="781:30">(<argument pos:start="781:26" pos:end="781:29"><expr pos:start="781:26" pos:end="781:29"><name pos:start="781:26" pos:end="781:29">obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for pos:start="783:3" pos:end="785:18">for <control pos:start="783:7" pos:end="783:37">(<init pos:start="783:8" pos:end="783:25"><expr pos:start="783:8" pos:end="783:24"><name pos:start="783:8" pos:end="783:8">i</name> <operator pos:start="783:10" pos:end="783:10">=</operator> <call pos:start="783:12" pos:end="783:24"><name pos:start="783:12" pos:end="783:17">strlen</name> <argument_list pos:start="783:19" pos:end="783:24">(<argument pos:start="783:20" pos:end="783:23"><expr pos:start="783:20" pos:end="783:23"><name pos:start="783:20" pos:end="783:23">obuf</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="783:27" pos:end="783:32"><expr pos:start="783:27" pos:end="783:31"><name pos:start="783:27" pos:end="783:27">i</name> <operator pos:start="783:29" pos:end="783:29">&lt;</operator> <literal type="number" pos:start="783:31" pos:end="783:31">6</literal></expr>;</condition> <incr pos:start="783:34" pos:end="783:36"><expr pos:start="783:34" pos:end="783:36"><name pos:start="783:34" pos:end="783:34">i</name><operator pos:start="783:35" pos:end="783:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="785:5" pos:end="785:18"><block_content pos:start="785:5" pos:end="785:18">

    <expr_stmt pos:start="785:5" pos:end="785:18"><expr pos:start="785:5" pos:end="785:17"><call pos:start="785:5" pos:end="785:17"><name pos:start="785:5" pos:end="785:11">oappend</name> <argument_list pos:start="785:13" pos:end="785:17">(<argument pos:start="785:14" pos:end="785:16"><expr pos:start="785:14" pos:end="785:16"><literal type="string" pos:start="785:14" pos:end="785:16">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt pos:start="787:3" pos:end="787:16"><expr pos:start="787:3" pos:end="787:15"><call pos:start="787:3" pos:end="787:15"><name pos:start="787:3" pos:end="787:9">oappend</name> <argument_list pos:start="787:11" pos:end="787:15">(<argument pos:start="787:12" pos:end="787:14"><expr pos:start="787:12" pos:end="787:14"><literal type="string" pos:start="787:12" pos:end="787:14">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt pos:start="789:3" pos:end="789:51"><expr pos:start="789:3" pos:end="789:50"><call pos:start="789:3" pos:end="789:50">(<modifier pos:start="789:4" pos:end="789:4">*</modifier><name pos:start="789:5" pos:end="789:22"><name pos:start="789:5" pos:end="789:8">info</name><operator pos:start="789:9" pos:end="789:10">-&gt;</operator><name pos:start="789:11" pos:end="789:22">fprintf_func</name></name>) <argument_list pos:start="789:25" pos:end="789:50">(<argument pos:start="789:26" pos:end="789:37"><expr pos:start="789:26" pos:end="789:37"><name pos:start="789:26" pos:end="789:37"><name pos:start="789:26" pos:end="789:29">info</name><operator pos:start="789:30" pos:end="789:31">-&gt;</operator><name pos:start="789:32" pos:end="789:37">stream</name></name></expr></argument>, <argument pos:start="789:40" pos:end="789:43"><expr pos:start="789:40" pos:end="789:43"><literal type="string" pos:start="789:40" pos:end="789:43">"%s"</literal></expr></argument>, <argument pos:start="789:46" pos:end="789:49"><expr pos:start="789:46" pos:end="789:49"><name pos:start="789:46" pos:end="789:49">obuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <comment type="block" pos:start="793:3" pos:end="795:78">/* The enter and bound instructions are printed with operands in the same

     order as the intel book; everything else is printed in reverse order.  */</comment>

  <if_stmt pos:start="797:3" pos:end="839:5"><if pos:start="797:3" pos:end="829:5">if <condition pos:start="797:6" pos:end="797:37">(<expr pos:start="797:7" pos:end="797:36"><name pos:start="797:7" pos:end="797:18">intel_syntax</name> <operator pos:start="797:20" pos:end="797:21">||</operator> <name pos:start="797:23" pos:end="797:36">two_source_ops</name></expr>)</condition>

    <block pos:start="799:5" pos:end="829:5">{<block_content pos:start="801:7" pos:end="827:9">

      <decl_stmt pos:start="801:7" pos:end="801:21"><decl pos:start="801:7" pos:end="801:20"><type pos:start="801:7" pos:end="801:13"><name pos:start="801:7" pos:end="801:13">bfd_vma</name></type> <name pos:start="801:15" pos:end="801:20">riprel</name></decl>;</decl_stmt>



      <for pos:start="805:7" pos:end="807:30">for <control pos:start="805:11" pos:end="805:40">(<init pos:start="805:12" pos:end="805:17"><expr pos:start="805:12" pos:end="805:16"><name pos:start="805:12" pos:end="805:12">i</name> <operator pos:start="805:14" pos:end="805:14">=</operator> <literal type="number" pos:start="805:16" pos:end="805:16">0</literal></expr>;</init> <condition pos:start="805:19" pos:end="805:35"><expr pos:start="805:19" pos:end="805:34"><name pos:start="805:19" pos:end="805:19">i</name> <operator pos:start="805:21" pos:end="805:21">&lt;</operator> <name pos:start="805:23" pos:end="805:34">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="805:37" pos:end="805:39"><expr pos:start="805:37" pos:end="805:39"><operator pos:start="805:37" pos:end="805:38">++</operator><name pos:start="805:39" pos:end="805:39">i</name></expr></incr>)</control><block type="pseudo" pos:start="807:9" pos:end="807:30"><block_content pos:start="807:9" pos:end="807:30">

        <expr_stmt pos:start="807:9" pos:end="807:30"><expr pos:start="807:9" pos:end="807:29"><name pos:start="807:9" pos:end="807:17"><name pos:start="807:9" pos:end="807:14">op_txt</name><index pos:start="807:15" pos:end="807:17">[<expr pos:start="807:16" pos:end="807:16"><name pos:start="807:16" pos:end="807:16">i</name></expr>]</index></name> <operator pos:start="807:19" pos:end="807:19">=</operator> <name pos:start="807:21" pos:end="807:29"><name pos:start="807:21" pos:end="807:26">op_out</name><index pos:start="807:27" pos:end="807:29">[<expr pos:start="807:28" pos:end="807:28"><name pos:start="807:28" pos:end="807:28">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



      <for pos:start="811:7" pos:end="827:9">for <control pos:start="811:11" pos:end="811:47">(<init pos:start="811:12" pos:end="811:17"><expr pos:start="811:12" pos:end="811:16"><name pos:start="811:12" pos:end="811:12">i</name> <operator pos:start="811:14" pos:end="811:14">=</operator> <literal type="number" pos:start="811:16" pos:end="811:16">0</literal></expr>;</init> <condition pos:start="811:19" pos:end="811:42"><expr pos:start="811:19" pos:end="811:41"><name pos:start="811:19" pos:end="811:19">i</name> <operator pos:start="811:21" pos:end="811:21">&lt;</operator> <operator pos:start="811:23" pos:end="811:23">(</operator><name pos:start="811:24" pos:end="811:35">MAX_OPERANDS</name> <operator pos:start="811:37" pos:end="811:38">&gt;&gt;</operator> <literal type="number" pos:start="811:40" pos:end="811:40">1</literal><operator pos:start="811:41" pos:end="811:41">)</operator></expr>;</condition> <incr pos:start="811:44" pos:end="811:46"><expr pos:start="811:44" pos:end="811:46"><operator pos:start="811:44" pos:end="811:45">++</operator><name pos:start="811:46" pos:end="811:46">i</name></expr></incr>)</control>

	<block pos:start="813:9" pos:end="827:9">{<block_content pos:start="815:11" pos:end="825:51">

          <expr_stmt pos:start="815:11" pos:end="815:30"><expr pos:start="815:11" pos:end="815:29"><name pos:start="815:11" pos:end="815:15">op_ad</name> <operator pos:start="815:17" pos:end="815:17">=</operator> <name pos:start="815:19" pos:end="815:29"><name pos:start="815:19" pos:end="815:26">op_index</name><index pos:start="815:27" pos:end="815:29">[<expr pos:start="815:28" pos:end="815:28"><name pos:start="815:28" pos:end="815:28">i</name></expr>]</index></name></expr>;</expr_stmt>

          <expr_stmt pos:start="817:11" pos:end="817:55"><expr pos:start="817:11" pos:end="817:54"><name pos:start="817:11" pos:end="817:21"><name pos:start="817:11" pos:end="817:18">op_index</name><index pos:start="817:19" pos:end="817:21">[<expr pos:start="817:20" pos:end="817:20"><name pos:start="817:20" pos:end="817:20">i</name></expr>]</index></name> <operator pos:start="817:23" pos:end="817:23">=</operator> <name pos:start="817:25" pos:end="817:54"><name pos:start="817:25" pos:end="817:32">op_index</name><index pos:start="817:33" pos:end="817:54">[<expr pos:start="817:34" pos:end="817:53"><name pos:start="817:34" pos:end="817:45">MAX_OPERANDS</name> <operator pos:start="817:47" pos:end="817:47">-</operator> <literal type="number" pos:start="817:49" pos:end="817:51">1</literal> <operator pos:start="817:51" pos:end="817:51">-</operator> <name pos:start="817:53" pos:end="817:53">i</name></expr>]</index></name></expr>;</expr_stmt>

          <expr_stmt pos:start="819:11" pos:end="819:49"><expr pos:start="819:11" pos:end="819:48"><name pos:start="819:11" pos:end="819:40"><name pos:start="819:11" pos:end="819:18">op_index</name><index pos:start="819:19" pos:end="819:40">[<expr pos:start="819:20" pos:end="819:39"><name pos:start="819:20" pos:end="819:31">MAX_OPERANDS</name> <operator pos:start="819:33" pos:end="819:33">-</operator> <literal type="number" pos:start="819:35" pos:end="819:35">1</literal> <operator pos:start="819:37" pos:end="819:37">-</operator> <name pos:start="819:39" pos:end="819:39">i</name></expr>]</index></name> <operator pos:start="819:42" pos:end="819:42">=</operator> <name pos:start="819:44" pos:end="819:48">op_ad</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="821:11" pos:end="821:32"><expr pos:start="821:11" pos:end="821:31"><name pos:start="821:11" pos:end="821:16">riprel</name> <operator pos:start="821:18" pos:end="821:18">=</operator> <name pos:start="821:20" pos:end="821:31"><name pos:start="821:20" pos:end="821:28">op_riprel</name><index pos:start="821:29" pos:end="821:31">[<expr pos:start="821:30" pos:end="821:30"><name pos:start="821:30" pos:end="821:30">i</name></expr>]</index></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="823:11" pos:end="823:58"><expr pos:start="823:11" pos:end="823:57"><name pos:start="823:11" pos:end="823:22"><name pos:start="823:11" pos:end="823:19">op_riprel</name><index pos:start="823:20" pos:end="823:22">[<expr pos:start="823:21" pos:end="823:21"><name pos:start="823:21" pos:end="823:21">i</name></expr>]</index></name> <operator pos:start="823:24" pos:end="823:24">=</operator> <name pos:start="823:26" pos:end="823:57"><name pos:start="823:26" pos:end="823:34">op_riprel</name> <index pos:start="823:36" pos:end="823:57">[<expr pos:start="823:37" pos:end="823:56"><name pos:start="823:37" pos:end="823:48">MAX_OPERANDS</name> <operator pos:start="823:50" pos:end="823:50">-</operator> <literal type="number" pos:start="823:52" pos:end="823:54">1</literal> <operator pos:start="823:54" pos:end="823:54">-</operator> <name pos:start="823:56" pos:end="823:56">i</name></expr>]</index></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="825:11" pos:end="825:51"><expr pos:start="825:11" pos:end="825:50"><name pos:start="825:11" pos:end="825:41"><name pos:start="825:11" pos:end="825:19">op_riprel</name><index pos:start="825:20" pos:end="825:41">[<expr pos:start="825:21" pos:end="825:40"><name pos:start="825:21" pos:end="825:32">MAX_OPERANDS</name> <operator pos:start="825:34" pos:end="825:34">-</operator> <literal type="number" pos:start="825:36" pos:end="825:36">1</literal> <operator pos:start="825:38" pos:end="825:38">-</operator> <name pos:start="825:40" pos:end="825:40">i</name></expr>]</index></name> <operator pos:start="825:43" pos:end="825:43">=</operator> <name pos:start="825:45" pos:end="825:50">riprel</name></expr>;</expr_stmt>

	</block_content>}</block></for>

    </block_content>}</block></if>

  <else pos:start="831:3" pos:end="839:5">else

    <block pos:start="833:5" pos:end="839:5">{<block_content pos:start="835:7" pos:end="837:49">

      <for pos:start="835:7" pos:end="837:49">for <control pos:start="835:11" pos:end="835:40">(<init pos:start="835:12" pos:end="835:17"><expr pos:start="835:12" pos:end="835:16"><name pos:start="835:12" pos:end="835:12">i</name> <operator pos:start="835:14" pos:end="835:14">=</operator> <literal type="number" pos:start="835:16" pos:end="835:16">0</literal></expr>;</init> <condition pos:start="835:19" pos:end="835:35"><expr pos:start="835:19" pos:end="835:34"><name pos:start="835:19" pos:end="835:19">i</name> <operator pos:start="835:21" pos:end="835:21">&lt;</operator> <name pos:start="835:23" pos:end="835:34">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="835:37" pos:end="835:39"><expr pos:start="835:37" pos:end="835:39"><operator pos:start="835:37" pos:end="835:38">++</operator><name pos:start="835:39" pos:end="835:39">i</name></expr></incr>)</control><block type="pseudo" pos:start="837:9" pos:end="837:49"><block_content pos:start="837:9" pos:end="837:49">

        <expr_stmt pos:start="837:9" pos:end="837:49"><expr pos:start="837:9" pos:end="837:48"><name pos:start="837:9" pos:end="837:36"><name pos:start="837:9" pos:end="837:14">op_txt</name><index pos:start="837:15" pos:end="837:36">[<expr pos:start="837:16" pos:end="837:35"><name pos:start="837:16" pos:end="837:27">MAX_OPERANDS</name> <operator pos:start="837:29" pos:end="837:29">-</operator> <literal type="number" pos:start="837:31" pos:end="837:31">1</literal> <operator pos:start="837:33" pos:end="837:33">-</operator> <name pos:start="837:35" pos:end="837:35">i</name></expr>]</index></name> <operator pos:start="837:38" pos:end="837:38">=</operator> <name pos:start="837:40" pos:end="837:48"><name pos:start="837:40" pos:end="837:45">op_out</name><index pos:start="837:46" pos:end="837:48">[<expr pos:start="837:47" pos:end="837:47"><name pos:start="837:47" pos:end="837:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



  <expr_stmt pos:start="843:3" pos:end="843:16"><expr pos:start="843:3" pos:end="843:15"><name pos:start="843:3" pos:end="843:11">needcomma</name> <operator pos:start="843:13" pos:end="843:13">=</operator> <literal type="number" pos:start="843:15" pos:end="843:15">0</literal></expr>;</expr_stmt>

  <for pos:start="845:3" pos:end="865:7">for <control pos:start="845:7" pos:end="845:36">(<init pos:start="845:8" pos:end="845:13"><expr pos:start="845:8" pos:end="845:12"><name pos:start="845:8" pos:end="845:8">i</name> <operator pos:start="845:10" pos:end="845:10">=</operator> <literal type="number" pos:start="845:12" pos:end="845:12">0</literal></expr>;</init> <condition pos:start="845:15" pos:end="845:31"><expr pos:start="845:15" pos:end="845:30"><name pos:start="845:15" pos:end="845:15">i</name> <operator pos:start="845:17" pos:end="845:17">&lt;</operator> <name pos:start="845:19" pos:end="845:30">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="845:33" pos:end="845:35"><expr pos:start="845:33" pos:end="845:35"><operator pos:start="845:33" pos:end="845:34">++</operator><name pos:start="845:35" pos:end="845:35">i</name></expr></incr>)</control><block type="pseudo" pos:start="847:5" pos:end="865:7"><block_content pos:start="847:5" pos:end="865:7">

    <if_stmt pos:start="847:5" pos:end="865:7"><if pos:start="847:5" pos:end="865:7">if <condition pos:start="847:8" pos:end="847:19">(<expr pos:start="847:9" pos:end="847:18"><operator pos:start="847:9" pos:end="847:9">*</operator><name pos:start="847:10" pos:end="847:18"><name pos:start="847:10" pos:end="847:15">op_txt</name><index pos:start="847:16" pos:end="847:18">[<expr pos:start="847:17" pos:end="847:17"><name pos:start="847:17" pos:end="847:17">i</name></expr>]</index></name></expr>)</condition>

      <block pos:start="849:7" pos:end="865:7">{<block_content pos:start="851:9" pos:end="863:22">

	<if_stmt pos:start="851:9" pos:end="853:52"><if pos:start="851:9" pos:end="853:52">if <condition pos:start="851:12" pos:end="851:22">(<expr pos:start="851:13" pos:end="851:21"><name pos:start="851:13" pos:end="851:21">needcomma</name></expr>)</condition><block type="pseudo" pos:start="853:11" pos:end="853:52"><block_content pos:start="853:11" pos:end="853:52">

	  <expr_stmt pos:start="853:11" pos:end="853:52"><expr pos:start="853:11" pos:end="853:51"><call pos:start="853:11" pos:end="853:51">(<modifier pos:start="853:12" pos:end="853:12">*</modifier><name pos:start="853:13" pos:end="853:30"><name pos:start="853:13" pos:end="853:16">info</name><operator pos:start="853:17" pos:end="853:18">-&gt;</operator><name pos:start="853:19" pos:end="853:30">fprintf_func</name></name>) <argument_list pos:start="853:33" pos:end="853:51">(<argument pos:start="853:34" pos:end="853:45"><expr pos:start="853:34" pos:end="853:45"><name pos:start="853:34" pos:end="853:45"><name pos:start="853:34" pos:end="853:37">info</name><operator pos:start="853:38" pos:end="853:39">-&gt;</operator><name pos:start="853:40" pos:end="853:45">stream</name></name></expr></argument>, <argument pos:start="853:48" pos:end="853:50"><expr pos:start="853:48" pos:end="853:50"><literal type="string" pos:start="853:48" pos:end="853:50">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="855:9" pos:end="861:64"><if pos:start="855:9" pos:end="857:80">if <condition pos:start="855:12" pos:end="855:47">(<expr pos:start="855:13" pos:end="855:46"><name pos:start="855:13" pos:end="855:23"><name pos:start="855:13" pos:end="855:20">op_index</name><index pos:start="855:21" pos:end="855:23">[<expr pos:start="855:22" pos:end="855:22"><name pos:start="855:22" pos:end="855:22">i</name></expr>]</index></name> <operator pos:start="855:25" pos:end="855:26">!=</operator> <operator pos:start="855:28" pos:end="855:28">-</operator><literal type="number" pos:start="855:29" pos:end="855:29">1</literal> <operator pos:start="855:31" pos:end="855:32">&amp;&amp;</operator> <operator pos:start="855:34" pos:end="855:34">!</operator><name pos:start="855:35" pos:end="855:46"><name pos:start="855:35" pos:end="855:43">op_riprel</name><index pos:start="855:44" pos:end="855:46">[<expr pos:start="855:45" pos:end="855:45"><name pos:start="855:45" pos:end="855:45">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="857:11" pos:end="857:80"><block_content pos:start="857:11" pos:end="857:80">

	  <expr_stmt pos:start="857:11" pos:end="857:80"><expr pos:start="857:11" pos:end="857:79"><call pos:start="857:11" pos:end="857:79">(<modifier pos:start="857:12" pos:end="857:12">*</modifier><name pos:start="857:13" pos:end="857:36"><name pos:start="857:13" pos:end="857:16">info</name><operator pos:start="857:17" pos:end="857:18">-&gt;</operator><name pos:start="857:19" pos:end="857:36">print_address_func</name></name>) <argument_list pos:start="857:39" pos:end="857:79">(<argument pos:start="857:40" pos:end="857:72"><expr pos:start="857:40" pos:end="857:72"><operator pos:start="857:40" pos:end="857:40">(</operator><name pos:start="857:41" pos:end="857:47">bfd_vma</name><operator pos:start="857:48" pos:end="857:48">)</operator> <name pos:start="857:50" pos:end="857:72"><name pos:start="857:50" pos:end="857:59">op_address</name><index pos:start="857:60" pos:end="857:72">[<expr pos:start="857:61" pos:end="857:71"><name pos:start="857:61" pos:end="857:71"><name pos:start="857:61" pos:end="857:68">op_index</name><index pos:start="857:69" pos:end="857:71">[<expr pos:start="857:70" pos:end="857:70"><name pos:start="857:70" pos:end="857:70">i</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="857:75" pos:end="857:78"><expr pos:start="857:75" pos:end="857:78"><name pos:start="857:75" pos:end="857:78">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="859:9" pos:end="861:64">else<block type="pseudo" pos:start="861:11" pos:end="861:64"><block_content pos:start="861:11" pos:end="861:64">

	  <expr_stmt pos:start="861:11" pos:end="861:64"><expr pos:start="861:11" pos:end="861:63"><call pos:start="861:11" pos:end="861:63">(<modifier pos:start="861:12" pos:end="861:12">*</modifier><name pos:start="861:13" pos:end="861:30"><name pos:start="861:13" pos:end="861:16">info</name><operator pos:start="861:17" pos:end="861:18">-&gt;</operator><name pos:start="861:19" pos:end="861:30">fprintf_func</name></name>) <argument_list pos:start="861:33" pos:end="861:63">(<argument pos:start="861:34" pos:end="861:45"><expr pos:start="861:34" pos:end="861:45"><name pos:start="861:34" pos:end="861:45"><name pos:start="861:34" pos:end="861:37">info</name><operator pos:start="861:38" pos:end="861:39">-&gt;</operator><name pos:start="861:40" pos:end="861:45">stream</name></name></expr></argument>, <argument pos:start="861:48" pos:end="861:51"><expr pos:start="861:48" pos:end="861:51"><literal type="string" pos:start="861:48" pos:end="861:51">"%s"</literal></expr></argument>, <argument pos:start="861:54" pos:end="861:62"><expr pos:start="861:54" pos:end="861:62"><name pos:start="861:54" pos:end="861:62"><name pos:start="861:54" pos:end="861:59">op_txt</name><index pos:start="861:60" pos:end="861:62">[<expr pos:start="861:61" pos:end="861:61"><name pos:start="861:61" pos:end="861:61">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt pos:start="863:9" pos:end="863:22"><expr pos:start="863:9" pos:end="863:21"><name pos:start="863:9" pos:end="863:17">needcomma</name> <operator pos:start="863:19" pos:end="863:19">=</operator> <literal type="number" pos:start="863:21" pos:end="863:21">1</literal></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt></block_content></block></for>



  <for pos:start="869:3" pos:end="883:7">for <control pos:start="869:7" pos:end="869:36">(<init pos:start="869:8" pos:end="869:13"><expr pos:start="869:8" pos:end="869:12"><name pos:start="869:8" pos:end="869:8">i</name> <operator pos:start="869:10" pos:end="869:10">=</operator> <literal type="number" pos:start="869:12" pos:end="869:12">0</literal></expr>;</init> <condition pos:start="869:15" pos:end="869:31"><expr pos:start="869:15" pos:end="869:30"><name pos:start="869:15" pos:end="869:15">i</name> <operator pos:start="869:17" pos:end="869:17">&lt;</operator> <name pos:start="869:19" pos:end="869:30">MAX_OPERANDS</name></expr>;</condition> <incr pos:start="869:33" pos:end="869:35"><expr pos:start="869:33" pos:end="869:35"><name pos:start="869:33" pos:end="869:33">i</name><operator pos:start="869:34" pos:end="869:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="871:5" pos:end="883:7"><block_content pos:start="871:5" pos:end="883:7">

    <if_stmt pos:start="871:5" pos:end="883:7"><if pos:start="871:5" pos:end="883:7">if <condition pos:start="871:8" pos:end="871:42">(<expr pos:start="871:9" pos:end="871:41"><name pos:start="871:9" pos:end="871:19"><name pos:start="871:9" pos:end="871:16">op_index</name><index pos:start="871:17" pos:end="871:19">[<expr pos:start="871:18" pos:end="871:18"><name pos:start="871:18" pos:end="871:18">i</name></expr>]</index></name> <operator pos:start="871:21" pos:end="871:22">!=</operator> <operator pos:start="871:24" pos:end="871:24">-</operator><literal type="number" pos:start="871:25" pos:end="871:25">1</literal> <operator pos:start="871:27" pos:end="871:28">&amp;&amp;</operator> <name pos:start="871:30" pos:end="871:41"><name pos:start="871:30" pos:end="871:38">op_riprel</name><index pos:start="871:39" pos:end="871:41">[<expr pos:start="871:40" pos:end="871:40"><name pos:start="871:40" pos:end="871:40">i</name></expr>]</index></name></expr>)</condition>

      <block pos:start="873:7" pos:end="883:7">{<block_content pos:start="875:9" pos:end="881:14">

	<expr_stmt pos:start="875:9" pos:end="875:59"><expr pos:start="875:9" pos:end="875:58"><call pos:start="875:9" pos:end="875:58">(<modifier pos:start="875:10" pos:end="875:10">*</modifier><name pos:start="875:11" pos:end="875:28"><name pos:start="875:11" pos:end="875:14">info</name><operator pos:start="875:15" pos:end="875:16">-&gt;</operator><name pos:start="875:17" pos:end="875:28">fprintf_func</name></name>) <argument_list pos:start="875:31" pos:end="875:58">(<argument pos:start="875:32" pos:end="875:43"><expr pos:start="875:32" pos:end="875:43"><name pos:start="875:32" pos:end="875:43"><name pos:start="875:32" pos:end="875:35">info</name><operator pos:start="875:36" pos:end="875:37">-&gt;</operator><name pos:start="875:38" pos:end="875:43">stream</name></name></expr></argument>, <argument pos:start="875:46" pos:end="875:57"><expr pos:start="875:46" pos:end="875:57"><literal type="string" pos:start="875:46" pos:end="875:57">"        # "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="877:9" pos:end="879:82"><expr pos:start="877:9" pos:end="879:81"><call pos:start="877:9" pos:end="879:81">(<modifier pos:start="877:10" pos:end="877:10">*</modifier><name pos:start="877:11" pos:end="877:34"><name pos:start="877:11" pos:end="877:14">info</name><operator pos:start="877:15" pos:end="877:16">-&gt;</operator><name pos:start="877:17" pos:end="877:34">print_address_func</name></name>) <argument_list pos:start="877:37" pos:end="879:81">(<argument pos:start="877:38" pos:end="879:74"><expr pos:start="877:38" pos:end="879:74"><operator pos:start="877:38" pos:end="877:38">(</operator><name pos:start="877:39" pos:end="877:45">bfd_vma</name><operator pos:start="877:46" pos:end="877:46">)</operator> <operator pos:start="877:48" pos:end="877:48">(</operator><name pos:start="877:49" pos:end="877:56">start_pc</name> <operator pos:start="877:58" pos:end="877:58">+</operator> <name pos:start="877:60" pos:end="877:64">codep</name> <operator pos:start="877:66" pos:end="877:66">-</operator> <name pos:start="877:68" pos:end="877:78">start_codep</name>

						<operator pos:start="879:49" pos:end="879:49">+</operator> <name pos:start="879:51" pos:end="879:73"><name pos:start="879:51" pos:end="879:60">op_address</name><index pos:start="879:61" pos:end="879:73">[<expr pos:start="879:62" pos:end="879:72"><name pos:start="879:62" pos:end="879:72"><name pos:start="879:62" pos:end="879:69">op_index</name><index pos:start="879:70" pos:end="879:72">[<expr pos:start="879:71" pos:end="879:71"><name pos:start="879:71" pos:end="879:71">i</name></expr>]</index></name></expr>]</index></name><operator pos:start="879:74" pos:end="879:74">)</operator></expr></argument>, <argument pos:start="879:77" pos:end="879:80"><expr pos:start="879:77" pos:end="879:80"><name pos:start="879:77" pos:end="879:80">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="881:9" pos:end="881:14">break;</break>

      </block_content>}</block></if></if_stmt></block_content></block></for>

  <return pos:start="885:3" pos:end="885:33">return <expr pos:start="885:10" pos:end="885:32"><name pos:start="885:10" pos:end="885:14">codep</name> <operator pos:start="885:16" pos:end="885:16">-</operator> <name pos:start="885:18" pos:end="885:32"><name pos:start="885:18" pos:end="885:21">priv</name><operator pos:start="885:22" pos:end="885:22">.</operator><name pos:start="885:23" pos:end="885:32">the_buffer</name></name></expr>;</return>

</block_content>}</block>
</unit>
