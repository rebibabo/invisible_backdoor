<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3651.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:21">uint8_t</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:41">bt_hci_event_start</name><parameter_list pos:start="1:42" pos:end="3:33">(<parameter pos:start="1:43" pos:end="1:62"><decl pos:start="1:43" pos:end="1:62"><type pos:start="1:43" pos:end="1:62"><name pos:start="1:43" pos:end="1:57"><name pos:start="1:43" pos:end="1:48">struct</name> <name pos:start="1:50" pos:end="1:57">bt_hci_s</name></name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">hci</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:23"><decl pos:start="3:17" pos:end="3:23"><type pos:start="3:17" pos:end="3:23"><name pos:start="3:17" pos:end="3:19">int</name></type> <name pos:start="3:21" pos:end="3:23">evt</name></decl></parameter>, <parameter pos:start="3:26" pos:end="3:32"><decl pos:start="3:26" pos:end="3:32"><type pos:start="3:26" pos:end="3:32"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:32">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:22">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:19">packet</name></decl>, <decl pos:start="7:22" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:13"/><name pos:start="7:22" pos:end="7:25">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">mask_byte</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:18">(<expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:11">len</name> <operator pos:start="13:13" pos:end="13:13">&gt;</operator> <literal type="number" pos:start="13:15" pos:end="13:17">255</literal></expr>)</condition> <block pos:start="13:20" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:17">

        <expr_stmt pos:start="15:9" pos:end="17:43"><expr pos:start="15:9" pos:end="17:42"><call pos:start="15:9" pos:end="17:42"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="17:42">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:63"><expr pos:start="15:25" pos:end="15:63"><literal type="string" pos:start="15:25" pos:end="15:63">"%s: HCI event params too long (%ib)\n"</literal></expr></argument>,

                        <argument pos:start="17:25" pos:end="17:36"><expr pos:start="17:25" pos:end="17:36"><name pos:start="17:25" pos:end="17:36">__FUNCTION__</name></expr></argument>, <argument pos:start="17:39" pos:end="17:41"><expr pos:start="17:39" pos:end="17:41"><name pos:start="17:39" pos:end="17:41">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:17"><expr pos:start="19:9" pos:end="19:16"><call pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:12">exit</name><argument_list pos:start="19:13" pos:end="19:16">(<argument pos:start="19:14" pos:end="19:15"><expr pos:start="19:14" pos:end="19:15"><operator pos:start="19:14" pos:end="19:14">-</operator><literal type="number" pos:start="19:15" pos:end="19:15">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:13">mask_byte</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <operator pos:start="25:17" pos:end="25:17">(</operator><name pos:start="25:18" pos:end="25:20">evt</name> <operator pos:start="25:22" pos:end="25:22">-</operator> <literal type="number" pos:start="25:24" pos:end="25:24">1</literal><operator pos:start="25:25" pos:end="25:25">)</operator> <operator pos:start="25:27" pos:end="25:28">&gt;&gt;</operator> <literal type="number" pos:start="25:30" pos:end="25:30">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:8">mask</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <literal type="number" pos:start="27:12" pos:end="27:12">1</literal> <operator pos:start="27:14" pos:end="27:15">&lt;&lt;</operator> <operator pos:start="27:17" pos:end="27:17">(</operator><operator pos:start="27:18" pos:end="27:18">(</operator><name pos:start="27:19" pos:end="27:21">evt</name> <operator pos:start="27:23" pos:end="27:23">-</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal><operator pos:start="27:26" pos:end="27:26">)</operator> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <literal type="number" pos:start="27:30" pos:end="27:30">3</literal><operator pos:start="27:31" pos:end="27:31">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:20"><if pos:start="29:5" pos:end="31:20">if <condition pos:start="29:8" pos:end="29:79">(<expr pos:start="29:9" pos:end="29:78"><name pos:start="29:9" pos:end="29:12">mask</name> <operator pos:start="29:14" pos:end="29:14">&amp;</operator> <name pos:start="29:16" pos:end="29:48"><name pos:start="29:16" pos:end="29:37">bt_event_reserved_mask</name><index pos:start="29:38" pos:end="29:48">[<expr pos:start="29:39" pos:end="29:47"><name pos:start="29:39" pos:end="29:47">mask_byte</name></expr>]</index></name> <operator pos:start="29:50" pos:end="29:50">&amp;</operator> <operator pos:start="29:52" pos:end="29:52">~</operator><name pos:start="29:53" pos:end="29:78"><name pos:start="29:53" pos:end="29:55">hci</name><operator pos:start="29:56" pos:end="29:57">-&gt;</operator><name pos:start="29:58" pos:end="29:67">event_mask</name><index pos:start="29:68" pos:end="29:78">[<expr pos:start="29:69" pos:end="29:77"><name pos:start="29:69" pos:end="29:77">mask_byte</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:20"><block_content pos:start="31:9" pos:end="31:20">

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:10">packet</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:41"><name pos:start="35:14" pos:end="35:28"><name pos:start="35:14" pos:end="35:16">hci</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:28">evt_packet</name></name><argument_list pos:start="35:29" pos:end="35:41">(<argument pos:start="35:30" pos:end="35:40"><expr pos:start="35:30" pos:end="35:40"><name pos:start="35:30" pos:end="35:40"><name pos:start="35:30" pos:end="35:32">hci</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:40">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:20"><expr pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:10">packet</name><index pos:start="37:11" pos:end="37:13">[<expr pos:start="37:12" pos:end="37:12"><literal type="number" pos:start="37:12" pos:end="37:12">0</literal></expr>]</index></name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:19">evt</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:10">packet</name><index pos:start="39:11" pos:end="39:13">[<expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">1</literal></expr>]</index></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:19">len</name></expr>;</expr_stmt>



    <return pos:start="43:5" pos:end="43:22">return <expr pos:start="43:12" pos:end="43:21"><operator pos:start="43:12" pos:end="43:12">&amp;</operator><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:18">packet</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">2</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>
</unit>
