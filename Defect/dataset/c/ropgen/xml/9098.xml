<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9098.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">mjpegb_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:57">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:37">uint8_t</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:42">buf</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:56">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="213:1">{<block_content pos:start="9:5" pos:end="211:25">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">MJpegDecodeContext</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:25">s</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_end</name></decl>, <decl pos:start="11:23" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:30">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">picture</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:21">hgb</name></decl>;</decl_stmt> <comment type="block" pos:start="15:24" pos:end="15:43">/* for the header */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:71"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:21">dqt_offs</name></decl>, <decl pos:start="17:24" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:24" pos:end="17:31">dht_offs</name></decl>, <decl pos:start="17:34" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:34" pos:end="17:41">sof_offs</name></decl>, <decl pos:start="17:44" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:44" pos:end="17:51">sos_offs</name></decl>, <decl pos:start="17:54" pos:end="17:70"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:54" pos:end="17:70">second_field_offs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:23">field_size</name></decl>, <decl pos:start="19:26" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:26" pos:end="19:33">sod_offs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:18"><expr pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:11">buf_ptr</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:11">buf_end</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:17">buf</name> <operator pos:start="25:19" pos:end="25:19">+</operator> <name pos:start="25:21" pos:end="25:28">buf_size</name></expr>;</expr_stmt>



<label pos:start="29:1" pos:end="29:12"><name pos:start="29:1" pos:end="29:11">read_header</name>:</label>

    <comment type="block" pos:start="31:5" pos:end="31:28">/* reset on every SOI */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:23">restart_interval</name></name> <operator pos:start="33:25" pos:end="33:25">=</operator> <literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:20">restart_count</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:21">mjpb_skiptosod</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:68"><expr pos:start="41:5" pos:end="41:67"><call pos:start="41:5" pos:end="41:67"><name pos:start="41:5" pos:end="41:17">init_get_bits</name><argument_list pos:start="41:18" pos:end="41:67">(<argument pos:start="41:19" pos:end="41:22"><expr pos:start="41:19" pos:end="41:22"><operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:22">hgb</name></expr></argument>, <argument pos:start="41:25" pos:end="41:31"><expr pos:start="41:25" pos:end="41:31"><name pos:start="41:25" pos:end="41:31">buf_ptr</name></expr></argument>, <comment type="block" pos:start="41:34" pos:end="41:45">/*buf_size*/</comment><argument pos:start="41:46" pos:end="41:66"><expr pos:start="41:46" pos:end="41:66"><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:53">buf_end</name> <operator pos:start="41:55" pos:end="41:55">-</operator> <name pos:start="41:57" pos:end="41:63">buf_ptr</name><operator pos:start="41:64" pos:end="41:64">)</operator><operator pos:start="41:65" pos:end="41:65">*</operator><literal type="number" pos:start="41:66" pos:end="41:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><call pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:13">skip_bits</name><argument_list pos:start="45:14" pos:end="45:23">(<argument pos:start="45:15" pos:end="45:18"><expr pos:start="45:15" pos:end="45:18"><operator pos:start="45:15" pos:end="45:15">&amp;</operator><name pos:start="45:16" pos:end="45:18">hgb</name></expr></argument>, <argument pos:start="45:21" pos:end="45:22"><expr pos:start="45:21" pos:end="45:22"><literal type="number" pos:start="45:21" pos:end="45:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:26" pos:end="45:45">/* reserved zeros */</comment>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:60">(<expr pos:start="49:9" pos:end="49:59"><call pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:21">get_bits_long</name><argument_list pos:start="49:22" pos:end="49:31">(<argument pos:start="49:23" pos:end="49:26"><expr pos:start="49:23" pos:end="49:26"><operator pos:start="49:23" pos:end="49:23">&amp;</operator><name pos:start="49:24" pos:end="49:26">hgb</name></expr></argument>, <argument pos:start="49:29" pos:end="49:30"><expr pos:start="49:29" pos:end="49:30"><literal type="number" pos:start="49:29" pos:end="49:30">32</literal></expr></argument>)</argument_list></call> <operator pos:start="49:33" pos:end="49:34">!=</operator> <call pos:start="49:36" pos:end="49:59"><name pos:start="49:36" pos:end="49:42">MKBETAG</name><argument_list pos:start="49:43" pos:end="49:59">(<argument pos:start="49:44" pos:end="49:46"><expr pos:start="49:44" pos:end="49:46"><literal type="char" pos:start="49:44" pos:end="49:46">'m'</literal></expr></argument>,<argument pos:start="49:48" pos:end="49:50"><expr pos:start="49:48" pos:end="49:50"><literal type="char" pos:start="49:48" pos:end="49:50">'j'</literal></expr></argument>,<argument pos:start="49:52" pos:end="49:54"><expr pos:start="49:52" pos:end="49:54"><literal type="char" pos:start="49:52" pos:end="49:54">'p'</literal></expr></argument>,<argument pos:start="49:56" pos:end="49:58"><expr pos:start="49:56" pos:end="49:58"><literal type="char" pos:start="49:56" pos:end="49:58">'g'</literal></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="51:5" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:17">

        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><call pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:67">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">avctx</name></expr></argument>, <argument pos:start="53:23" pos:end="53:36"><expr pos:start="53:23" pos:end="53:36"><name pos:start="53:23" pos:end="53:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="53:39" pos:end="53:66"><expr pos:start="53:39" pos:end="53:66"><literal type="string" pos:start="53:39" pos:end="53:66">"not mjpeg-b (bad fourcc)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:14">field_size</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:40"><name pos:start="61:18" pos:end="61:30">get_bits_long</name><argument_list pos:start="61:31" pos:end="61:40">(<argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:35">hgb</name></expr></argument>, <argument pos:start="61:38" pos:end="61:39"><expr pos:start="61:38" pos:end="61:39"><literal type="number" pos:start="61:38" pos:end="61:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="61:43" pos:end="61:58">/* field size */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:66"><expr pos:start="63:5" pos:end="63:65"><call pos:start="63:5" pos:end="63:65"><name pos:start="63:5" pos:end="63:10">av_log</name><argument_list pos:start="63:11" pos:end="63:65">(<argument pos:start="63:12" pos:end="63:16"><expr pos:start="63:12" pos:end="63:16"><name pos:start="63:12" pos:end="63:16">avctx</name></expr></argument>, <argument pos:start="63:19" pos:end="63:30"><expr pos:start="63:19" pos:end="63:30"><name pos:start="63:19" pos:end="63:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="63:33" pos:end="63:52"><expr pos:start="63:33" pos:end="63:52"><literal type="string" pos:start="63:33" pos:end="63:52">"field size: 0x%x\n"</literal></expr></argument>, <argument pos:start="63:55" pos:end="63:64"><expr pos:start="63:55" pos:end="63:64"><name pos:start="63:55" pos:end="63:64">field_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:24"><expr pos:start="65:5" pos:end="65:23"><call pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:13">skip_bits</name><argument_list pos:start="65:14" pos:end="65:23">(<argument pos:start="65:15" pos:end="65:18"><expr pos:start="65:15" pos:end="65:18"><operator pos:start="65:15" pos:end="65:15">&amp;</operator><name pos:start="65:16" pos:end="65:18">hgb</name></expr></argument>, <argument pos:start="65:21" pos:end="65:22"><expr pos:start="65:21" pos:end="65:22"><literal type="number" pos:start="65:21" pos:end="65:22">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="65:26" pos:end="65:48">/* padded field size */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:48"><expr pos:start="67:5" pos:end="67:47"><name pos:start="67:5" pos:end="67:21">second_field_offs</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <call pos:start="67:25" pos:end="67:47"><name pos:start="67:25" pos:end="67:37">get_bits_long</name><argument_list pos:start="67:38" pos:end="67:47">(<argument pos:start="67:39" pos:end="67:42"><expr pos:start="67:39" pos:end="67:42"><operator pos:start="67:39" pos:end="67:39">&amp;</operator><name pos:start="67:40" pos:end="67:42">hgb</name></expr></argument>, <argument pos:start="67:45" pos:end="67:46"><expr pos:start="67:45" pos:end="67:46"><literal type="number" pos:start="67:45" pos:end="67:46">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:80"><expr pos:start="69:5" pos:end="69:79"><call pos:start="69:5" pos:end="69:79"><name pos:start="69:5" pos:end="69:10">av_log</name><argument_list pos:start="69:11" pos:end="69:79">(<argument pos:start="69:12" pos:end="69:16"><expr pos:start="69:12" pos:end="69:16"><name pos:start="69:12" pos:end="69:16">avctx</name></expr></argument>, <argument pos:start="69:19" pos:end="69:30"><expr pos:start="69:19" pos:end="69:30"><name pos:start="69:19" pos:end="69:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="69:33" pos:end="69:59"><expr pos:start="69:33" pos:end="69:59"><literal type="string" pos:start="69:33" pos:end="69:59">"second field offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="69:62" pos:end="69:78"><expr pos:start="69:62" pos:end="69:78"><name pos:start="69:62" pos:end="69:78">second_field_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="73:26"><if pos:start="71:5" pos:end="73:26">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:25">second_field_offs</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:26"><block_content pos:start="73:9" pos:end="73:26">

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:21">interlaced</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:39"><expr pos:start="77:5" pos:end="77:38"><name pos:start="77:5" pos:end="77:12">dqt_offs</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:38"><name pos:start="77:16" pos:end="77:28">get_bits_long</name><argument_list pos:start="77:29" pos:end="77:38">(<argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:33">hgb</name></expr></argument>, <argument pos:start="77:36" pos:end="77:37"><expr pos:start="77:36" pos:end="77:37"><literal type="number" pos:start="77:36" pos:end="77:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:62"><expr pos:start="79:5" pos:end="79:61"><call pos:start="79:5" pos:end="79:61"><name pos:start="79:5" pos:end="79:10">av_log</name><argument_list pos:start="79:11" pos:end="79:61">(<argument pos:start="79:12" pos:end="79:16"><expr pos:start="79:12" pos:end="79:16"><name pos:start="79:12" pos:end="79:16">avctx</name></expr></argument>, <argument pos:start="79:19" pos:end="79:30"><expr pos:start="79:19" pos:end="79:30"><name pos:start="79:19" pos:end="79:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="79:33" pos:end="79:50"><expr pos:start="79:33" pos:end="79:50"><literal type="string" pos:start="79:33" pos:end="79:50">"dqt offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:60"><expr pos:start="79:53" pos:end="79:60"><name pos:start="79:53" pos:end="79:60">dqt_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if <condition pos:start="81:8" pos:end="81:17">(<expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:16">dqt_offs</name></expr>)</condition>

    <block pos:start="83:5" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:28">

        <expr_stmt pos:start="85:9" pos:end="85:74"><expr pos:start="85:9" pos:end="85:73"><call pos:start="85:9" pos:end="85:73"><name pos:start="85:9" pos:end="85:21">init_get_bits</name><argument_list pos:start="85:22" pos:end="85:73">(<argument pos:start="85:23" pos:end="85:28"><expr pos:start="85:23" pos:end="85:28"><operator pos:start="85:23" pos:end="85:23">&amp;</operator><name pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:24">s</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:28">gb</name></name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:33">buf</name><operator pos:start="85:34" pos:end="85:34">+</operator><name pos:start="85:35" pos:end="85:42">dqt_offs</name></expr></argument>, <argument pos:start="85:45" pos:end="85:72"><expr pos:start="85:45" pos:end="85:72"><operator pos:start="85:45" pos:end="85:45">(</operator><name pos:start="85:46" pos:end="85:52">buf_end</name> <operator pos:start="85:54" pos:end="85:54">-</operator> <operator pos:start="85:56" pos:end="85:56">(</operator><name pos:start="85:57" pos:end="85:59">buf</name><operator pos:start="85:60" pos:end="85:60">+</operator><name pos:start="85:61" pos:end="85:68">dqt_offs</name><operator pos:start="85:69" pos:end="85:69">)</operator><operator pos:start="85:70" pos:end="85:70">)</operator><operator pos:start="85:71" pos:end="85:71">*</operator><literal type="number" pos:start="85:72" pos:end="85:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:21">start_code</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:27">DQT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:28"><expr pos:start="89:9" pos:end="89:27"><call pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:24">mjpeg_decode_dqt</name><argument_list pos:start="89:25" pos:end="89:27">(<argument pos:start="89:26" pos:end="89:26"><expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:39"><expr pos:start="95:5" pos:end="95:38"><name pos:start="95:5" pos:end="95:12">dht_offs</name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:38"><name pos:start="95:16" pos:end="95:28">get_bits_long</name><argument_list pos:start="95:29" pos:end="95:38">(<argument pos:start="95:30" pos:end="95:33"><expr pos:start="95:30" pos:end="95:33"><operator pos:start="95:30" pos:end="95:30">&amp;</operator><name pos:start="95:31" pos:end="95:33">hgb</name></expr></argument>, <argument pos:start="95:36" pos:end="95:37"><expr pos:start="95:36" pos:end="95:37"><literal type="number" pos:start="95:36" pos:end="95:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:62"><expr pos:start="97:5" pos:end="97:61"><call pos:start="97:5" pos:end="97:61"><name pos:start="97:5" pos:end="97:10">av_log</name><argument_list pos:start="97:11" pos:end="97:61">(<argument pos:start="97:12" pos:end="97:16"><expr pos:start="97:12" pos:end="97:16"><name pos:start="97:12" pos:end="97:16">avctx</name></expr></argument>, <argument pos:start="97:19" pos:end="97:30"><expr pos:start="97:19" pos:end="97:30"><name pos:start="97:19" pos:end="97:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="97:33" pos:end="97:50"><expr pos:start="97:33" pos:end="97:50"><literal type="string" pos:start="97:33" pos:end="97:50">"dht offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="97:53" pos:end="97:60"><expr pos:start="97:53" pos:end="97:60"><name pos:start="97:53" pos:end="97:60">dht_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:17">(<expr pos:start="99:9" pos:end="99:16"><name pos:start="99:9" pos:end="99:16">dht_offs</name></expr>)</condition>

    <block pos:start="101:5" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:28">

        <expr_stmt pos:start="103:9" pos:end="103:74"><expr pos:start="103:9" pos:end="103:73"><call pos:start="103:9" pos:end="103:73"><name pos:start="103:9" pos:end="103:21">init_get_bits</name><argument_list pos:start="103:22" pos:end="103:73">(<argument pos:start="103:23" pos:end="103:28"><expr pos:start="103:23" pos:end="103:28"><operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:28">gb</name></name></expr></argument>, <argument pos:start="103:31" pos:end="103:42"><expr pos:start="103:31" pos:end="103:42"><name pos:start="103:31" pos:end="103:33">buf</name><operator pos:start="103:34" pos:end="103:34">+</operator><name pos:start="103:35" pos:end="103:42">dht_offs</name></expr></argument>, <argument pos:start="103:45" pos:end="103:72"><expr pos:start="103:45" pos:end="103:72"><operator pos:start="103:45" pos:end="103:45">(</operator><name pos:start="103:46" pos:end="103:52">buf_end</name> <operator pos:start="103:54" pos:end="103:54">-</operator> <operator pos:start="103:56" pos:end="103:56">(</operator><name pos:start="103:57" pos:end="103:59">buf</name><operator pos:start="103:60" pos:end="103:60">+</operator><name pos:start="103:61" pos:end="103:68">dht_offs</name><operator pos:start="103:69" pos:end="103:69">)</operator><operator pos:start="103:70" pos:end="103:70">)</operator><operator pos:start="103:71" pos:end="103:71">*</operator><literal type="number" pos:start="103:72" pos:end="103:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:21">start_code</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <name pos:start="105:25" pos:end="105:27">DHT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:28"><expr pos:start="107:9" pos:end="107:27"><call pos:start="107:9" pos:end="107:27"><name pos:start="107:9" pos:end="107:24">mjpeg_decode_dht</name><argument_list pos:start="107:25" pos:end="107:27">(<argument pos:start="107:26" pos:end="107:26"><expr pos:start="107:26" pos:end="107:26"><name pos:start="107:26" pos:end="107:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:39"><expr pos:start="113:5" pos:end="113:38"><name pos:start="113:5" pos:end="113:12">sof_offs</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:38"><name pos:start="113:16" pos:end="113:28">get_bits_long</name><argument_list pos:start="113:29" pos:end="113:38">(<argument pos:start="113:30" pos:end="113:33"><expr pos:start="113:30" pos:end="113:33"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:33">hgb</name></expr></argument>, <argument pos:start="113:36" pos:end="113:37"><expr pos:start="113:36" pos:end="113:37"><literal type="number" pos:start="113:36" pos:end="113:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:62"><expr pos:start="115:5" pos:end="115:61"><call pos:start="115:5" pos:end="115:61"><name pos:start="115:5" pos:end="115:10">av_log</name><argument_list pos:start="115:11" pos:end="115:61">(<argument pos:start="115:12" pos:end="115:16"><expr pos:start="115:12" pos:end="115:16"><name pos:start="115:12" pos:end="115:16">avctx</name></expr></argument>, <argument pos:start="115:19" pos:end="115:30"><expr pos:start="115:19" pos:end="115:30"><name pos:start="115:19" pos:end="115:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="115:33" pos:end="115:50"><expr pos:start="115:33" pos:end="115:50"><literal type="string" pos:start="115:33" pos:end="115:50">"sof offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="115:53" pos:end="115:60"><expr pos:start="115:53" pos:end="115:60"><name pos:start="115:53" pos:end="115:60">sof_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="129:5"><if pos:start="117:5" pos:end="129:5">if <condition pos:start="117:8" pos:end="117:17">(<expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">sof_offs</name></expr>)</condition>

    <block pos:start="119:5" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:22">

        <expr_stmt pos:start="121:9" pos:end="121:74"><expr pos:start="121:9" pos:end="121:73"><call pos:start="121:9" pos:end="121:73"><name pos:start="121:9" pos:end="121:21">init_get_bits</name><argument_list pos:start="121:22" pos:end="121:73">(<argument pos:start="121:23" pos:end="121:28"><expr pos:start="121:23" pos:end="121:28"><operator pos:start="121:23" pos:end="121:23">&amp;</operator><name pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:24">s</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:28">gb</name></name></expr></argument>, <argument pos:start="121:31" pos:end="121:42"><expr pos:start="121:31" pos:end="121:42"><name pos:start="121:31" pos:end="121:33">buf</name><operator pos:start="121:34" pos:end="121:34">+</operator><name pos:start="121:35" pos:end="121:42">sof_offs</name></expr></argument>, <argument pos:start="121:45" pos:end="121:72"><expr pos:start="121:45" pos:end="121:72"><operator pos:start="121:45" pos:end="121:45">(</operator><name pos:start="121:46" pos:end="121:52">buf_end</name> <operator pos:start="121:54" pos:end="121:54">-</operator> <operator pos:start="121:56" pos:end="121:56">(</operator><name pos:start="121:57" pos:end="121:59">buf</name><operator pos:start="121:60" pos:end="121:60">+</operator><name pos:start="121:61" pos:end="121:68">sof_offs</name><operator pos:start="121:69" pos:end="121:69">)</operator><operator pos:start="121:70" pos:end="121:70">)</operator><operator pos:start="121:71" pos:end="121:71">*</operator><literal type="number" pos:start="121:72" pos:end="121:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:21">start_code</name></name> <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:28">SOF0</name></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="127:22"><if pos:start="125:9" pos:end="127:22">if <condition pos:start="125:12" pos:end="125:36">(<expr pos:start="125:13" pos:end="125:35"><call pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:28">mjpeg_decode_sof</name><argument_list pos:start="125:29" pos:end="125:31">(<argument pos:start="125:30" pos:end="125:30"><expr pos:start="125:30" pos:end="125:30"><name pos:start="125:30" pos:end="125:30">s</name></expr></argument>)</argument_list></call> <operator pos:start="125:33" pos:end="125:33">&lt;</operator> <literal type="number" pos:start="125:35" pos:end="125:35">0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:22"><block_content pos:start="127:13" pos:end="127:22">

            <return pos:start="127:13" pos:end="127:22">return <expr pos:start="127:20" pos:end="127:21"><operator pos:start="127:20" pos:end="127:20">-</operator><literal type="number" pos:start="127:21" pos:end="127:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:39"><expr pos:start="133:5" pos:end="133:38"><name pos:start="133:5" pos:end="133:12">sos_offs</name> <operator pos:start="133:14" pos:end="133:14">=</operator> <call pos:start="133:16" pos:end="133:38"><name pos:start="133:16" pos:end="133:28">get_bits_long</name><argument_list pos:start="133:29" pos:end="133:38">(<argument pos:start="133:30" pos:end="133:33"><expr pos:start="133:30" pos:end="133:33"><operator pos:start="133:30" pos:end="133:30">&amp;</operator><name pos:start="133:31" pos:end="133:33">hgb</name></expr></argument>, <argument pos:start="133:36" pos:end="133:37"><expr pos:start="133:36" pos:end="133:37"><literal type="number" pos:start="133:36" pos:end="133:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:62"><expr pos:start="135:5" pos:end="135:61"><call pos:start="135:5" pos:end="135:61"><name pos:start="135:5" pos:end="135:10">av_log</name><argument_list pos:start="135:11" pos:end="135:61">(<argument pos:start="135:12" pos:end="135:16"><expr pos:start="135:12" pos:end="135:16"><name pos:start="135:12" pos:end="135:16">avctx</name></expr></argument>, <argument pos:start="135:19" pos:end="135:30"><expr pos:start="135:19" pos:end="135:30"><name pos:start="135:19" pos:end="135:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="135:33" pos:end="135:50"><expr pos:start="135:33" pos:end="135:50"><literal type="string" pos:start="135:33" pos:end="135:50">"sos offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="135:53" pos:end="135:60"><expr pos:start="135:53" pos:end="135:60"><name pos:start="135:53" pos:end="135:60">sos_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:39"><expr pos:start="137:5" pos:end="137:38"><name pos:start="137:5" pos:end="137:12">sod_offs</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:38"><name pos:start="137:16" pos:end="137:28">get_bits_long</name><argument_list pos:start="137:29" pos:end="137:38">(<argument pos:start="137:30" pos:end="137:33"><expr pos:start="137:30" pos:end="137:33"><operator pos:start="137:30" pos:end="137:30">&amp;</operator><name pos:start="137:31" pos:end="137:33">hgb</name></expr></argument>, <argument pos:start="137:36" pos:end="137:37"><expr pos:start="137:36" pos:end="137:37"><literal type="number" pos:start="137:36" pos:end="137:37">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:62"><expr pos:start="139:5" pos:end="139:61"><call pos:start="139:5" pos:end="139:61"><name pos:start="139:5" pos:end="139:10">av_log</name><argument_list pos:start="139:11" pos:end="139:61">(<argument pos:start="139:12" pos:end="139:16"><expr pos:start="139:12" pos:end="139:16"><name pos:start="139:12" pos:end="139:16">avctx</name></expr></argument>, <argument pos:start="139:19" pos:end="139:30"><expr pos:start="139:19" pos:end="139:30"><name pos:start="139:19" pos:end="139:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="139:33" pos:end="139:50"><expr pos:start="139:33" pos:end="139:50"><literal type="string" pos:start="139:33" pos:end="139:50">"sod offs: 0x%x\n"</literal></expr></argument>, <argument pos:start="139:53" pos:end="139:60"><expr pos:start="139:53" pos:end="139:60"><name pos:start="139:53" pos:end="139:60">sod_offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="155:5"><if pos:start="141:5" pos:end="155:5">if <condition pos:start="141:8" pos:end="141:17">(<expr pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:16">sos_offs</name></expr>)</condition>

    <block pos:start="143:5" pos:end="155:5">{<block_content pos:start="147:9" pos:end="153:28">

<comment type="line" pos:start="145:1" pos:end="145:76">//        init_get_bits(&amp;s-&gt;gb, buf+sos_offs, (buf_end - (buf+sos_offs))*8);</comment>

        <expr_stmt pos:start="147:9" pos:end="147:58"><expr pos:start="147:9" pos:end="147:57"><call pos:start="147:9" pos:end="147:57"><name pos:start="147:9" pos:end="147:21">init_get_bits</name><argument_list pos:start="147:22" pos:end="147:57">(<argument pos:start="147:23" pos:end="147:28"><expr pos:start="147:23" pos:end="147:28"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:28">gb</name></name></expr></argument>, <argument pos:start="147:31" pos:end="147:42"><expr pos:start="147:31" pos:end="147:42"><name pos:start="147:31" pos:end="147:33">buf</name><operator pos:start="147:34" pos:end="147:34">+</operator><name pos:start="147:35" pos:end="147:42">sos_offs</name></expr></argument>, <argument pos:start="147:45" pos:end="147:56"><expr pos:start="147:45" pos:end="147:56"><name pos:start="147:45" pos:end="147:54">field_size</name><operator pos:start="147:55" pos:end="147:55">*</operator><literal type="number" pos:start="147:56" pos:end="147:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:74"><expr pos:start="149:9" pos:end="149:73"><name pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:25">mjpb_skiptosod</name></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <operator pos:start="149:29" pos:end="149:29">(</operator><name pos:start="149:30" pos:end="149:37">sod_offs</name> <operator pos:start="149:39" pos:end="149:39">-</operator> <name pos:start="149:41" pos:end="149:48">sos_offs</name> <operator pos:start="149:50" pos:end="149:50">-</operator> <call pos:start="149:52" pos:end="149:72"><name pos:start="149:52" pos:end="149:60">show_bits</name><argument_list pos:start="149:61" pos:end="149:72">(<argument pos:start="149:62" pos:end="149:67"><expr pos:start="149:62" pos:end="149:67"><operator pos:start="149:62" pos:end="149:62">&amp;</operator><name pos:start="149:63" pos:end="149:67"><name pos:start="149:63" pos:end="149:63">s</name><operator pos:start="149:64" pos:end="149:65">-&gt;</operator><name pos:start="149:66" pos:end="149:67">gb</name></name></expr></argument>, <argument pos:start="149:70" pos:end="149:71"><expr pos:start="149:70" pos:end="149:71"><literal type="number" pos:start="149:70" pos:end="149:71">16</literal></expr></argument>)</argument_list></call><operator pos:start="149:73" pos:end="149:73">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:28"><expr pos:start="151:9" pos:end="151:27"><name pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:21">start_code</name></name> <operator pos:start="151:23" pos:end="151:23">=</operator> <name pos:start="151:25" pos:end="151:27">SOS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:28"><expr pos:start="153:9" pos:end="153:27"><call pos:start="153:9" pos:end="153:27"><name pos:start="153:9" pos:end="153:24">mjpeg_decode_sos</name><argument_list pos:start="153:25" pos:end="153:27">(<argument pos:start="153:26" pos:end="153:26"><expr pos:start="153:26" pos:end="153:26"><name pos:start="153:26" pos:end="153:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="177:5"><if pos:start="159:5" pos:end="177:5">if <condition pos:start="159:8" pos:end="159:22">(<expr pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:21"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:21">interlaced</name></name></expr>)</condition> <block pos:start="159:24" pos:end="177:5">{<block_content pos:start="161:9" pos:end="175:13">

        <expr_stmt pos:start="161:9" pos:end="161:29"><expr pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:23">bottom_field</name></name> <operator pos:start="161:25" pos:end="161:26">^=</operator> <literal type="number" pos:start="161:28" pos:end="161:28">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:58">/* if not bottom field, do not output image yet */</comment>

        <if_stmt pos:start="165:9" pos:end="175:13"><if pos:start="165:9" pos:end="175:13">if <condition pos:start="165:12" pos:end="165:49">(<expr pos:start="165:13" pos:end="165:48"><name pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:27">bottom_field</name></name> <operator pos:start="165:29" pos:end="165:30">&amp;&amp;</operator> <name pos:start="165:32" pos:end="165:48">second_field_offs</name></expr>)</condition>

        <block pos:start="167:9" pos:end="175:13">{<block_content pos:start="169:13" pos:end="173:29">

            <expr_stmt pos:start="169:13" pos:end="169:46"><expr pos:start="169:13" pos:end="169:45"><name pos:start="169:13" pos:end="169:19">buf_ptr</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <name pos:start="169:23" pos:end="169:25">buf</name> <operator pos:start="169:27" pos:end="169:27">+</operator> <name pos:start="169:29" pos:end="169:45">second_field_offs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:34"><expr pos:start="171:13" pos:end="171:33"><name pos:start="171:13" pos:end="171:29">second_field_offs</name> <operator pos:start="171:31" pos:end="171:31">=</operator> <literal type="number" pos:start="171:33" pos:end="171:33">0</literal></expr>;</expr_stmt>

            <goto pos:start="173:13" pos:end="173:29">goto <name pos:start="173:18" pos:end="173:28">read_header</name>;</goto>

            </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="181:5" pos:end="181:66">//XXX FIXME factorize, this looks very similar to the EOI code</comment>



    <expr_stmt pos:start="185:5" pos:end="185:25"><expr pos:start="185:5" pos:end="185:24"><operator pos:start="185:5" pos:end="185:5">*</operator><name pos:start="185:6" pos:end="185:12">picture</name><operator pos:start="185:13" pos:end="185:13">=</operator> <name pos:start="185:15" pos:end="185:24"><name pos:start="185:15" pos:end="185:15">s</name><operator pos:start="185:16" pos:end="185:17">-&gt;</operator><name pos:start="185:18" pos:end="185:24">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:33"><expr pos:start="187:5" pos:end="187:32"><operator pos:start="187:5" pos:end="187:5">*</operator><name pos:start="187:6" pos:end="187:14">data_size</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <sizeof pos:start="187:18" pos:end="187:32">sizeof<argument_list pos:start="187:24" pos:end="187:32">(<argument pos:start="187:25" pos:end="187:31"><expr pos:start="187:25" pos:end="187:31"><name pos:start="187:25" pos:end="187:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="191:5" pos:end="207:5"><if pos:start="191:5" pos:end="207:5">if<condition pos:start="191:7" pos:end="191:20">(<expr pos:start="191:8" pos:end="191:19"><operator pos:start="191:8" pos:end="191:8">!</operator><name pos:start="191:9" pos:end="191:19"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:19">lossless</name></name></expr>)</condition><block pos:start="191:21" pos:end="207:5">{<block_content pos:start="193:9" pos:end="205:40">

        <expr_stmt pos:start="193:9" pos:end="193:81"><expr pos:start="193:9" pos:end="193:80"><name pos:start="193:9" pos:end="193:24"><name pos:start="193:9" pos:end="193:15">picture</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:24">quality</name></name><operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="193:80"><name pos:start="193:27" pos:end="193:31">FFMAX</name><argument_list pos:start="193:32" pos:end="193:80">(<argument pos:start="193:33" pos:end="193:65"><expr pos:start="193:33" pos:end="193:65"><call pos:start="193:33" pos:end="193:65"><name pos:start="193:33" pos:end="193:37">FFMAX</name><argument_list pos:start="193:38" pos:end="193:65">(<argument pos:start="193:39" pos:end="193:50"><expr pos:start="193:39" pos:end="193:50"><name pos:start="193:39" pos:end="193:50"><name pos:start="193:39" pos:end="193:39">s</name><operator pos:start="193:40" pos:end="193:41">-&gt;</operator><name pos:start="193:42" pos:end="193:47">qscale</name><index pos:start="193:48" pos:end="193:50">[<expr pos:start="193:49" pos:end="193:49"><literal type="number" pos:start="193:49" pos:end="193:49">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:53" pos:end="193:64"><expr pos:start="193:53" pos:end="193:64"><name pos:start="193:53" pos:end="193:64"><name pos:start="193:53" pos:end="193:53">s</name><operator pos:start="193:54" pos:end="193:55">-&gt;</operator><name pos:start="193:56" pos:end="193:61">qscale</name><index pos:start="193:62" pos:end="193:64">[<expr pos:start="193:63" pos:end="193:63"><literal type="number" pos:start="193:63" pos:end="193:63">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:68" pos:end="193:79"><expr pos:start="193:68" pos:end="193:79"><name pos:start="193:68" pos:end="193:79"><name pos:start="193:68" pos:end="193:68">s</name><operator pos:start="193:69" pos:end="193:70">-&gt;</operator><name pos:start="193:71" pos:end="193:76">qscale</name><index pos:start="193:77" pos:end="193:79">[<expr pos:start="193:78" pos:end="193:78"><literal type="number" pos:start="193:78" pos:end="193:78">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:28"><expr pos:start="195:9" pos:end="195:27"><name pos:start="195:9" pos:end="195:24"><name pos:start="195:9" pos:end="195:15">picture</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:24">qstride</name></name><operator pos:start="195:25" pos:end="195:25">=</operator> <literal type="number" pos:start="195:27" pos:end="195:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:47"><expr pos:start="197:9" pos:end="197:46"><name pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:15">picture</name><operator pos:start="197:16" pos:end="197:17">-&gt;</operator><name pos:start="197:18" pos:end="197:29">qscale_table</name></name><operator pos:start="197:30" pos:end="197:30">=</operator> <name pos:start="197:32" pos:end="197:46"><name pos:start="197:32" pos:end="197:32">s</name><operator pos:start="197:33" pos:end="197:34">-&gt;</operator><name pos:start="197:35" pos:end="197:46">qscale_table</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:74"><expr pos:start="199:9" pos:end="199:73"><call pos:start="199:9" pos:end="199:73"><name pos:start="199:9" pos:end="199:14">memset</name><argument_list pos:start="199:15" pos:end="199:73">(<argument pos:start="199:16" pos:end="199:36"><expr pos:start="199:16" pos:end="199:36"><name pos:start="199:16" pos:end="199:36"><name pos:start="199:16" pos:end="199:22">picture</name><operator pos:start="199:23" pos:end="199:24">-&gt;</operator><name pos:start="199:25" pos:end="199:36">qscale_table</name></name></expr></argument>, <argument pos:start="199:39" pos:end="199:54"><expr pos:start="199:39" pos:end="199:54"><name pos:start="199:39" pos:end="199:54"><name pos:start="199:39" pos:end="199:45">picture</name><operator pos:start="199:46" pos:end="199:47">-&gt;</operator><name pos:start="199:48" pos:end="199:54">quality</name></name></expr></argument>, <argument pos:start="199:57" pos:end="199:72"><expr pos:start="199:57" pos:end="199:72"><operator pos:start="199:57" pos:end="199:57">(</operator><name pos:start="199:58" pos:end="199:65"><name pos:start="199:58" pos:end="199:58">s</name><operator pos:start="199:59" pos:end="199:60">-&gt;</operator><name pos:start="199:61" pos:end="199:65">width</name></name><operator pos:start="199:66" pos:end="199:66">+</operator><literal type="number" pos:start="199:67" pos:end="199:68">15</literal><operator pos:start="199:69" pos:end="199:69">)</operator><operator pos:start="199:70" pos:end="199:70">/</operator><literal type="number" pos:start="199:71" pos:end="199:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="201:9" pos:end="203:70"><if pos:start="201:9" pos:end="203:70">if<condition pos:start="201:11" pos:end="201:38">(<expr pos:start="201:12" pos:end="201:37"><name pos:start="201:12" pos:end="201:23"><name pos:start="201:12" pos:end="201:16">avctx</name><operator pos:start="201:17" pos:end="201:18">-&gt;</operator><name pos:start="201:19" pos:end="201:23">debug</name></name> <operator pos:start="201:25" pos:end="201:25">&amp;</operator> <name pos:start="201:27" pos:end="201:37">FF_DEBUG_QP</name></expr>)</condition><block type="pseudo" pos:start="203:13" pos:end="203:70"><block_content pos:start="203:13" pos:end="203:70">

            <expr_stmt pos:start="203:13" pos:end="203:70"><expr pos:start="203:13" pos:end="203:69"><call pos:start="203:13" pos:end="203:69"><name pos:start="203:13" pos:end="203:18">av_log</name><argument_list pos:start="203:19" pos:end="203:69">(<argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">avctx</name></expr></argument>, <argument pos:start="203:27" pos:end="203:38"><expr pos:start="203:27" pos:end="203:38"><name pos:start="203:27" pos:end="203:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="203:41" pos:end="203:50"><expr pos:start="203:41" pos:end="203:50"><literal type="string" pos:start="203:41" pos:end="203:50">"QP: %d\n"</literal></expr></argument>, <argument pos:start="203:53" pos:end="203:68"><expr pos:start="203:53" pos:end="203:68"><name pos:start="203:53" pos:end="203:68"><name pos:start="203:53" pos:end="203:59">picture</name><operator pos:start="203:60" pos:end="203:61">-&gt;</operator><name pos:start="203:62" pos:end="203:68">quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:40"><expr pos:start="205:9" pos:end="205:39"><name pos:start="205:9" pos:end="205:24"><name pos:start="205:9" pos:end="205:15">picture</name><operator pos:start="205:16" pos:end="205:17">-&gt;</operator><name pos:start="205:18" pos:end="205:24">quality</name></name><operator pos:start="205:25" pos:end="205:26">*=</operator> <name pos:start="205:28" pos:end="205:39">FF_QP2LAMBDA</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="211:5" pos:end="211:25">return <expr pos:start="211:12" pos:end="211:24"><name pos:start="211:12" pos:end="211:18">buf_ptr</name> <operator pos:start="211:20" pos:end="211:20">-</operator> <name pos:start="211:22" pos:end="211:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
