<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8011.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">omap_ppm_save</name><parameter_list pos:start="1:26" pos:end="3:61">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:46">filename</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:55">uint8_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:25"><decl pos:start="3:21" pos:end="3:25"><type pos:start="3:21" pos:end="3:25"><name pos:start="3:21" pos:end="3:23">int</name></type> <name pos:start="3:25" pos:end="3:25">w</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:32"><decl pos:start="3:28" pos:end="3:32"><type pos:start="3:28" pos:end="3:32"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:32">h</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:46">linesize</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:53">Error</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier><modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">FILE</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">d</name></decl>, <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:19">d1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">y</name></decl>, <decl pos:start="13:17" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:17">x</name></decl>, <decl pos:start="13:20" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:22">bpp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:5">f</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:13">fopen</name><argument_list pos:start="17:14" pos:end="17:29">(<argument pos:start="17:15" pos:end="17:22"><expr pos:start="17:15" pos:end="17:22"><name pos:start="17:15" pos:end="17:22">filename</name></expr></argument>, <argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><literal type="string" pos:start="17:25" pos:end="17:28">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:11">(<expr pos:start="19:9" pos:end="19:10"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:10">f</name></expr>)</condition> <block pos:start="19:13" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:15">

        <expr_stmt pos:start="21:9" pos:end="23:36"><expr pos:start="21:9" pos:end="23:35"><call pos:start="21:9" pos:end="23:35"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="23:35">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:55"><expr pos:start="21:26" pos:end="21:55"><literal type="string" pos:start="21:26" pos:end="21:55">"failed to open file '%s': %s"</literal></expr></argument>, <argument pos:start="21:58" pos:end="21:65"><expr pos:start="21:58" pos:end="21:65"><name pos:start="21:58" pos:end="21:65">filename</name></expr></argument>,

                   <argument pos:start="23:20" pos:end="23:34"><expr pos:start="23:20" pos:end="23:34"><call pos:start="23:20" pos:end="23:34"><name pos:start="23:20" pos:end="23:27">strerror</name><argument_list pos:start="23:28" pos:end="23:34">(<argument pos:start="23:29" pos:end="23:33"><expr pos:start="23:29" pos:end="23:33"><name pos:start="23:29" pos:end="23:33">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:51"><expr pos:start="29:5" pos:end="29:50"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:50"><name pos:start="29:11" pos:end="29:17">fprintf</name><argument_list pos:start="29:18" pos:end="29:50">(<argument pos:start="29:19" pos:end="29:19"><expr pos:start="29:19" pos:end="29:19"><name pos:start="29:19" pos:end="29:19">f</name></expr></argument>, <argument pos:start="29:22" pos:end="29:38"><expr pos:start="29:22" pos:end="29:38"><literal type="string" pos:start="29:22" pos:end="29:38">"P6\n%d %d\n%d\n"</literal></expr></argument>, <argument pos:start="29:41" pos:end="29:41"><expr pos:start="29:41" pos:end="29:41"><name pos:start="29:41" pos:end="29:41">w</name></expr></argument>, <argument pos:start="29:44" pos:end="29:44"><expr pos:start="29:44" pos:end="29:44"><name pos:start="29:44" pos:end="29:44">h</name></expr></argument>, <argument pos:start="29:47" pos:end="29:49"><expr pos:start="29:47" pos:end="29:49"><literal type="number" pos:start="29:47" pos:end="29:49">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:23">

        <goto pos:start="33:9" pos:end="33:23">goto <name pos:start="33:14" pos:end="33:22">write_err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:6">d1</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <name pos:start="37:10" pos:end="37:13">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:23"><expr pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:7">bpp</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:18">linesize</name> <operator pos:start="39:20" pos:end="39:20">/</operator> <name pos:start="39:22" pos:end="39:22">w</name></expr>;</expr_stmt>

    <for pos:start="41:5" pos:end="119:5">for <control pos:start="41:9" pos:end="41:28">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">y</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:17">y</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:21">h</name></expr>;</condition> <incr pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:24">y</name> <operator pos:start="41:26" pos:end="41:27">++</operator></expr></incr>)</control> <block pos:start="41:30" pos:end="119:5">{<block_content pos:start="43:9" pos:end="117:23">

        <expr_stmt pos:start="43:9" pos:end="43:15"><expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:9">d</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <name pos:start="43:13" pos:end="43:14">d1</name></expr>;</expr_stmt>

        <for pos:start="45:9" pos:end="115:9">for <control pos:start="45:13" pos:end="45:32">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">x</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:21">x</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <name pos:start="45:25" pos:end="45:25">w</name></expr>;</condition> <incr pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:28">x</name> <operator pos:start="45:30" pos:end="45:31">++</operator></expr></incr>)</control> <block pos:start="45:34" pos:end="115:9">{<block_content pos:start="47:13" pos:end="113:21">

            <expr_stmt pos:start="47:13" pos:end="47:32"><expr pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:13">v</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <operator pos:start="47:17" pos:end="47:17">*</operator><operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:26">uint32_t</name> <operator pos:start="47:28" pos:end="47:28">*</operator><operator pos:start="47:29" pos:end="47:29">)</operator> <name pos:start="47:31" pos:end="47:31">d</name></expr>;</expr_stmt>

            <switch pos:start="49:13" pos:end="111:13">switch <condition pos:start="49:20" pos:end="49:24">(<expr pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">bpp</name></expr>)</condition> <block pos:start="49:26" pos:end="111:13">{<block_content pos:start="51:13" pos:end="109:22">

            <case pos:start="51:13" pos:end="51:19">case <expr pos:start="51:18" pos:end="51:18"><literal type="number" pos:start="51:18" pos:end="51:18">2</literal></expr>:</case>

                <expr_stmt pos:start="53:17" pos:end="53:48"><expr pos:start="53:17" pos:end="53:47"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:47"><name pos:start="53:23" pos:end="53:27">fputc</name><argument_list pos:start="53:28" pos:end="53:47">(<argument pos:start="53:29" pos:end="53:43"><expr pos:start="53:29" pos:end="53:43"><operator pos:start="53:29" pos:end="53:29">(</operator><name pos:start="53:30" pos:end="53:30">v</name> <operator pos:start="53:32" pos:end="53:33">&gt;&gt;</operator> <literal type="number" pos:start="53:35" pos:end="53:35">8</literal><operator pos:start="53:36" pos:end="53:36">)</operator> <operator pos:start="53:38" pos:end="53:38">&amp;</operator> <literal type="number" pos:start="53:40" pos:end="53:43">0xf8</literal></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><name pos:start="53:46" pos:end="53:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="55:17" pos:end="59:17"><if pos:start="55:17" pos:end="59:17">if <condition pos:start="55:20" pos:end="55:31">(<expr pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:23">ret</name> <operator pos:start="55:25" pos:end="55:26">==</operator> <name pos:start="55:28" pos:end="55:30">EOF</name></expr>)</condition> <block pos:start="55:33" pos:end="59:17">{<block_content pos:start="57:21" pos:end="57:35">

                    <goto pos:start="57:21" pos:end="57:35">goto <name pos:start="57:26" pos:end="57:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:48"><expr pos:start="61:17" pos:end="61:47"><name pos:start="61:17" pos:end="61:19">ret</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <call pos:start="61:23" pos:end="61:47"><name pos:start="61:23" pos:end="61:27">fputc</name><argument_list pos:start="61:28" pos:end="61:47">(<argument pos:start="61:29" pos:end="61:43"><expr pos:start="61:29" pos:end="61:43"><operator pos:start="61:29" pos:end="61:29">(</operator><name pos:start="61:30" pos:end="61:30">v</name> <operator pos:start="61:32" pos:end="61:33">&gt;&gt;</operator> <literal type="number" pos:start="61:35" pos:end="61:35">3</literal><operator pos:start="61:36" pos:end="61:36">)</operator> <operator pos:start="61:38" pos:end="61:38">&amp;</operator> <literal type="number" pos:start="61:40" pos:end="61:43">0xfc</literal></expr></argument>, <argument pos:start="61:46" pos:end="61:46"><expr pos:start="61:46" pos:end="61:46"><name pos:start="61:46" pos:end="61:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="67:17"><if pos:start="63:17" pos:end="67:17">if <condition pos:start="63:20" pos:end="63:31">(<expr pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:23">ret</name> <operator pos:start="63:25" pos:end="63:26">==</operator> <name pos:start="63:28" pos:end="63:30">EOF</name></expr>)</condition> <block pos:start="63:33" pos:end="67:17">{<block_content pos:start="65:21" pos:end="65:35">

                    <goto pos:start="65:21" pos:end="65:35">goto <name pos:start="65:26" pos:end="65:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:48"><expr pos:start="69:17" pos:end="69:47"><name pos:start="69:17" pos:end="69:19">ret</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:47"><name pos:start="69:23" pos:end="69:27">fputc</name><argument_list pos:start="69:28" pos:end="69:47">(<argument pos:start="69:29" pos:end="69:43"><expr pos:start="69:29" pos:end="69:43"><operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:30">v</name> <operator pos:start="69:32" pos:end="69:33">&lt;&lt;</operator> <literal type="number" pos:start="69:35" pos:end="69:35">3</literal><operator pos:start="69:36" pos:end="69:36">)</operator> <operator pos:start="69:38" pos:end="69:38">&amp;</operator> <literal type="number" pos:start="69:40" pos:end="69:43">0xf8</literal></expr></argument>, <argument pos:start="69:46" pos:end="69:46"><expr pos:start="69:46" pos:end="69:46"><name pos:start="69:46" pos:end="69:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:31">(<expr pos:start="71:21" pos:end="71:30"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:26">==</operator> <name pos:start="71:28" pos:end="71:30">EOF</name></expr>)</condition> <block pos:start="71:33" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:35">

                    <goto pos:start="73:21" pos:end="73:35">goto <name pos:start="73:26" pos:end="73:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="77:17" pos:end="77:22">break;</break>

            <case pos:start="79:13" pos:end="79:19">case <expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">3</literal></expr>:</case>

            <case pos:start="81:13" pos:end="81:19">case <expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">4</literal></expr>:</case>

            <default pos:start="83:13" pos:end="83:20">default:</default>

                <expr_stmt pos:start="85:17" pos:end="85:49"><expr pos:start="85:17" pos:end="85:48"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:48"><name pos:start="85:23" pos:end="85:27">fputc</name><argument_list pos:start="85:28" pos:end="85:48">(<argument pos:start="85:29" pos:end="85:44"><expr pos:start="85:29" pos:end="85:44"><operator pos:start="85:29" pos:end="85:29">(</operator><name pos:start="85:30" pos:end="85:30">v</name> <operator pos:start="85:32" pos:end="85:33">&gt;&gt;</operator> <literal type="number" pos:start="85:35" pos:end="85:36">16</literal><operator pos:start="85:37" pos:end="85:37">)</operator> <operator pos:start="85:39" pos:end="85:39">&amp;</operator> <literal type="number" pos:start="85:41" pos:end="85:44">0xff</literal></expr></argument>, <argument pos:start="85:47" pos:end="85:47"><expr pos:start="85:47" pos:end="85:47"><name pos:start="85:47" pos:end="85:47">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="91:17"><if pos:start="87:17" pos:end="91:17">if <condition pos:start="87:20" pos:end="87:31">(<expr pos:start="87:21" pos:end="87:30"><name pos:start="87:21" pos:end="87:23">ret</name> <operator pos:start="87:25" pos:end="87:26">==</operator> <name pos:start="87:28" pos:end="87:30">EOF</name></expr>)</condition> <block pos:start="87:33" pos:end="91:17">{<block_content pos:start="89:21" pos:end="89:35">

                    <goto pos:start="89:21" pos:end="89:35">goto <name pos:start="89:26" pos:end="89:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:48"><expr pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:47"><name pos:start="93:23" pos:end="93:27">fputc</name><argument_list pos:start="93:28" pos:end="93:47">(<argument pos:start="93:29" pos:end="93:43"><expr pos:start="93:29" pos:end="93:43"><operator pos:start="93:29" pos:end="93:29">(</operator><name pos:start="93:30" pos:end="93:30">v</name> <operator pos:start="93:32" pos:end="93:33">&gt;&gt;</operator> <literal type="number" pos:start="93:35" pos:end="93:35">8</literal><operator pos:start="93:36" pos:end="93:36">)</operator> <operator pos:start="93:38" pos:end="93:38">&amp;</operator> <literal type="number" pos:start="93:40" pos:end="93:43">0xff</literal></expr></argument>, <argument pos:start="93:46" pos:end="93:46"><expr pos:start="93:46" pos:end="93:46"><name pos:start="93:46" pos:end="93:46">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="99:17"><if pos:start="95:17" pos:end="99:17">if <condition pos:start="95:20" pos:end="95:31">(<expr pos:start="95:21" pos:end="95:30"><name pos:start="95:21" pos:end="95:23">ret</name> <operator pos:start="95:25" pos:end="95:26">==</operator> <name pos:start="95:28" pos:end="95:30">EOF</name></expr>)</condition> <block pos:start="95:33" pos:end="99:17">{<block_content pos:start="97:21" pos:end="97:35">

                    <goto pos:start="97:21" pos:end="97:35">goto <name pos:start="97:26" pos:end="97:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:43"><expr pos:start="101:17" pos:end="101:42"><name pos:start="101:17" pos:end="101:19">ret</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <call pos:start="101:23" pos:end="101:42"><name pos:start="101:23" pos:end="101:27">fputc</name><argument_list pos:start="101:28" pos:end="101:42">(<argument pos:start="101:29" pos:end="101:38"><expr pos:start="101:29" pos:end="101:38"><operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:30">v</name><operator pos:start="101:31" pos:end="101:31">)</operator> <operator pos:start="101:33" pos:end="101:33">&amp;</operator> <literal type="number" pos:start="101:35" pos:end="101:38">0xff</literal></expr></argument>, <argument pos:start="101:41" pos:end="101:41"><expr pos:start="101:41" pos:end="101:41"><name pos:start="101:41" pos:end="101:41">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="107:17"><if pos:start="103:17" pos:end="107:17">if <condition pos:start="103:20" pos:end="103:31">(<expr pos:start="103:21" pos:end="103:30"><name pos:start="103:21" pos:end="103:23">ret</name> <operator pos:start="103:25" pos:end="103:26">==</operator> <name pos:start="103:28" pos:end="103:30">EOF</name></expr>)</condition> <block pos:start="103:33" pos:end="107:17">{<block_content pos:start="105:21" pos:end="105:35">

                    <goto pos:start="105:21" pos:end="105:35">goto <name pos:start="105:26" pos:end="105:34">write_err</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="109:17" pos:end="109:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="113:13" pos:end="113:21"><expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:13">d</name> <operator pos:start="113:15" pos:end="113:16">+=</operator> <name pos:start="113:18" pos:end="113:20">bpp</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="117:9" pos:end="117:23"><expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:10">d1</name> <operator pos:start="117:12" pos:end="117:13">+=</operator> <name pos:start="117:15" pos:end="117:22">linesize</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="121:1" pos:end="121:4"><name pos:start="121:1" pos:end="121:3">out</name>:</label>

    <expr_stmt pos:start="123:5" pos:end="123:14"><expr pos:start="123:5" pos:end="123:13"><call pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:10">fclose</name><argument_list pos:start="123:11" pos:end="123:13">(<argument pos:start="123:12" pos:end="123:12"><expr pos:start="123:12" pos:end="123:12"><name pos:start="123:12" pos:end="123:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="125:5" pos:end="125:11">return;</return>



<label pos:start="129:1" pos:end="129:10"><name pos:start="129:1" pos:end="129:9">write_err</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="133:32"><expr pos:start="131:5" pos:end="133:31"><call pos:start="131:5" pos:end="133:31"><name pos:start="131:5" pos:end="131:14">error_setg</name><argument_list pos:start="131:15" pos:end="133:31">(<argument pos:start="131:16" pos:end="131:19"><expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">errp</name></expr></argument>, <argument pos:start="131:22" pos:end="131:55"><expr pos:start="131:22" pos:end="131:55"><literal type="string" pos:start="131:22" pos:end="131:55">"failed to write to file '%s': %s"</literal></expr></argument>, <argument pos:start="131:58" pos:end="131:65"><expr pos:start="131:58" pos:end="131:65"><name pos:start="131:58" pos:end="131:65">filename</name></expr></argument>,

               <argument pos:start="133:16" pos:end="133:30"><expr pos:start="133:16" pos:end="133:30"><call pos:start="133:16" pos:end="133:30"><name pos:start="133:16" pos:end="133:23">strerror</name><argument_list pos:start="133:24" pos:end="133:30">(<argument pos:start="133:25" pos:end="133:29"><expr pos:start="133:25" pos:end="133:29"><name pos:start="133:25" pos:end="133:29">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><call pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:10">unlink</name><argument_list pos:start="135:11" pos:end="135:20">(<argument pos:start="135:12" pos:end="135:19"><expr pos:start="135:12" pos:end="135:19"><name pos:start="135:12" pos:end="135:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <goto pos:start="137:5" pos:end="137:13">goto <name pos:start="137:10" pos:end="137:12">out</name>;</goto>

</block_content>}</block></function>
</unit>
