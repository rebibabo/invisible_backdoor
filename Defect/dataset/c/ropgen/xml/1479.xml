<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1479.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">boston_mach_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:41">MachineState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="263:1">{<block_content pos:start="5:5" pos:end="261:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BostonState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:25">cpu_model</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:62"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:23">flash</name></decl>, <decl pos:start="13:26" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:18"><modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:29">ddr</name></decl>, <decl pos:start="13:32" pos:end="13:45"><type ref="prev" pos:start="13:5" pos:end="13:18"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:45">ddr_low_alias</name></decl>, <decl pos:start="13:48" pos:end="13:51"><type ref="prev" pos:start="13:5" pos:end="13:18"><modifier pos:start="13:48" pos:end="13:48">*</modifier></type><name pos:start="13:49" pos:end="13:51">lcd</name></decl>, <decl pos:start="13:54" pos:end="13:61"><type ref="prev" pos:start="13:5" pos:end="13:18"><modifier pos:start="13:54" pos:end="13:54">*</modifier></type><name pos:start="13:55" pos:end="13:61">platreg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:25">sys_mem</name> <init pos:start="15:27" pos:end="15:47">= <expr pos:start="15:29" pos:end="15:47"><call pos:start="15:29" pos:end="15:47"><name pos:start="15:29" pos:end="15:45">get_system_memory</name><argument_list pos:start="15:46" pos:end="15:47">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">XilinxPCIEHost</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:25">pcie2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">PCIDevice</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:19">ahci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">DriveInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:17">hd</name><index pos:start="21:18" pos:end="21:20">[<expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">Chardev</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:16">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:15">fw_size</name></decl>, <decl pos:start="25:18" pos:end="25:24"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:18" pos:end="25:24">fit_err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:15">is_64b</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="33:43">(<expr pos:start="31:9" pos:end="33:42"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:16">machine</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:26">ram_size</name></name> <operator pos:start="31:28" pos:end="31:28">%</operator> <name pos:start="31:30" pos:end="31:35">G_BYTE</name><operator pos:start="31:36" pos:end="31:36">)</operator> <operator pos:start="31:38" pos:end="31:39">||</operator>

        <operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:16">machine</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:26">ram_size</name></name> <operator pos:start="33:28" pos:end="33:28">&gt;</operator> <operator pos:start="33:30" pos:end="33:30">(</operator><literal type="number" pos:start="33:31" pos:end="33:31">2</literal> <operator pos:start="33:33" pos:end="33:33">*</operator> <name pos:start="33:35" pos:end="33:40">G_BYTE</name><operator pos:start="33:41" pos:end="33:41">)</operator><operator pos:start="33:42" pos:end="33:42">)</operator></expr>)</condition> <block pos:start="33:45" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><call pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:54">(<argument pos:start="35:22" pos:end="35:53"><expr pos:start="35:22" pos:end="35:53"><literal type="string" pos:start="35:22" pos:end="35:53">"Memory size must be 1GB or 2GB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:13">cpu_model</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <ternary pos:start="43:17" pos:end="43:45"><condition pos:start="43:17" pos:end="43:36"><expr pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:34"><name pos:start="43:17" pos:end="43:23">machine</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:34">cpu_model</name></name></expr> ?</condition><then/><else pos:start="43:37" pos:end="43:45">: <expr pos:start="43:39" pos:end="43:45"><literal type="string" pos:start="43:39" pos:end="43:45">"I6400"</literal></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:7">dev</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:45"><name pos:start="47:11" pos:end="47:21">qdev_create</name><argument_list pos:start="47:22" pos:end="47:45">(<argument pos:start="47:23" pos:end="47:26"><expr pos:start="47:23" pos:end="47:26"><name pos:start="47:23" pos:end="47:26">NULL</name></expr></argument>, <argument pos:start="47:29" pos:end="47:44"><expr pos:start="47:29" pos:end="47:44"><name pos:start="47:29" pos:end="47:44">TYPE_MIPS_BOSTON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><call pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:20">qdev_init_nofail</name><argument_list pos:start="49:21" pos:end="49:25">(<argument pos:start="49:22" pos:end="49:24"><expr pos:start="49:22" pos:end="49:24"><name pos:start="49:22" pos:end="49:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:5">s</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <call pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:14">BOSTON</name><argument_list pos:start="53:15" pos:end="53:19">(<argument pos:start="53:16" pos:end="53:18"><expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:11">mach</name></name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:21">machine</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:10">cps</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <call pos:start="57:14" pos:end="57:36"><name pos:start="57:14" pos:end="57:19">g_new0</name><argument_list pos:start="57:20" pos:end="57:36">(<argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:32">MIPSCPSState</name></expr></argument>, <argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:41">(<expr pos:start="61:9" pos:end="61:40"><operator pos:start="61:9" pos:end="61:9">!</operator><call pos:start="61:10" pos:end="61:40"><name pos:start="61:10" pos:end="61:29">cpu_supports_cps_smp</name><argument_list pos:start="61:30" pos:end="61:40">(<argument pos:start="61:31" pos:end="61:39"><expr pos:start="61:31" pos:end="61:39"><name pos:start="61:31" pos:end="61:39">cpu_model</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:43" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:16">

        <expr_stmt pos:start="63:9" pos:end="63:63"><expr pos:start="63:9" pos:end="63:62"><call pos:start="63:9" pos:end="63:62"><name pos:start="63:9" pos:end="63:20">error_report</name><argument_list pos:start="63:21" pos:end="63:62">(<argument pos:start="63:22" pos:end="63:61"><expr pos:start="63:22" pos:end="63:61"><literal type="string" pos:start="63:22" pos:end="63:61">"Boston requires CPUs which support CPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:16"><expr pos:start="65:9" pos:end="65:15"><call pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:12">exit</name><argument_list pos:start="65:13" pos:end="65:15">(<argument pos:start="65:14" pos:end="65:14"><expr pos:start="65:14" pos:end="65:14"><literal type="number" pos:start="65:14" pos:end="65:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:10">is_64b</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <call pos:start="71:14" pos:end="71:52"><name pos:start="71:14" pos:end="71:29">cpu_supports_isa</name><argument_list pos:start="71:30" pos:end="71:52">(<argument pos:start="71:31" pos:end="71:39"><expr pos:start="71:31" pos:end="71:39"><name pos:start="71:31" pos:end="71:39">cpu_model</name></expr></argument>, <argument pos:start="71:42" pos:end="71:51"><expr pos:start="71:42" pos:end="71:51"><name pos:start="71:42" pos:end="71:51">ISA_MIPS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:67"><expr pos:start="75:5" pos:end="75:66"><call pos:start="75:5" pos:end="75:66"><name pos:start="75:5" pos:end="75:21">object_initialize</name><argument_list pos:start="75:22" pos:end="75:66">(<argument pos:start="75:23" pos:end="75:28"><expr pos:start="75:23" pos:end="75:28"><name pos:start="75:23" pos:end="75:28"><name pos:start="75:23" pos:end="75:23">s</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:28">cps</name></name></expr></argument>, <argument pos:start="75:31" pos:end="75:50"><expr pos:start="75:31" pos:end="75:50"><sizeof pos:start="75:31" pos:end="75:50">sizeof<argument_list pos:start="75:37" pos:end="75:50">(<argument pos:start="75:38" pos:end="75:49"><expr pos:start="75:38" pos:end="75:49"><name pos:start="75:38" pos:end="75:49">MIPSCPSState</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="75:53" pos:end="75:65"><expr pos:start="75:53" pos:end="75:65"><name pos:start="75:53" pos:end="75:65">TYPE_MIPS_CPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:62"><expr pos:start="77:5" pos:end="77:61"><call pos:start="77:5" pos:end="77:61"><name pos:start="77:5" pos:end="77:23">qdev_set_parent_bus</name><argument_list pos:start="77:24" pos:end="77:61">(<argument pos:start="77:25" pos:end="77:38"><expr pos:start="77:25" pos:end="77:38"><call pos:start="77:25" pos:end="77:38"><name pos:start="77:25" pos:end="77:30">DEVICE</name><argument_list pos:start="77:31" pos:end="77:38">(<argument pos:start="77:32" pos:end="77:37"><expr pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:37"><name pos:start="77:32" pos:end="77:32">s</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:37">cps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:41" pos:end="77:60"><expr pos:start="77:41" pos:end="77:60"><call pos:start="77:41" pos:end="77:60"><name pos:start="77:41" pos:end="77:58">sysbus_get_default</name><argument_list pos:start="77:59" pos:end="77:60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:74"><expr pos:start="81:5" pos:end="81:73"><call pos:start="81:5" pos:end="81:73"><name pos:start="81:5" pos:end="81:27">object_property_set_str</name><argument_list pos:start="81:28" pos:end="81:73">(<argument pos:start="81:29" pos:end="81:42"><expr pos:start="81:29" pos:end="81:42"><call pos:start="81:29" pos:end="81:42"><name pos:start="81:29" pos:end="81:34">OBJECT</name><argument_list pos:start="81:35" pos:end="81:42">(<argument pos:start="81:36" pos:end="81:41"><expr pos:start="81:36" pos:end="81:41"><name pos:start="81:36" pos:end="81:41"><name pos:start="81:36" pos:end="81:36">s</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:41">cps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:45" pos:end="81:53"><expr pos:start="81:45" pos:end="81:53"><name pos:start="81:45" pos:end="81:53">cpu_model</name></expr></argument>, <argument pos:start="81:56" pos:end="81:66"><expr pos:start="81:56" pos:end="81:66"><literal type="string" pos:start="81:56" pos:end="81:66">"cpu-model"</literal></expr></argument>, <argument pos:start="81:69" pos:end="81:72"><expr pos:start="81:69" pos:end="81:72"><operator pos:start="81:69" pos:end="81:69">&amp;</operator><name pos:start="81:70" pos:end="81:72">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:70"><expr pos:start="83:5" pos:end="83:69"><call pos:start="83:5" pos:end="83:69"><name pos:start="83:5" pos:end="83:27">object_property_set_int</name><argument_list pos:start="83:28" pos:end="83:69">(<argument pos:start="83:29" pos:end="83:42"><expr pos:start="83:29" pos:end="83:42"><call pos:start="83:29" pos:end="83:42"><name pos:start="83:29" pos:end="83:34">OBJECT</name><argument_list pos:start="83:35" pos:end="83:42">(<argument pos:start="83:36" pos:end="83:41"><expr pos:start="83:36" pos:end="83:41"><name pos:start="83:36" pos:end="83:41"><name pos:start="83:36" pos:end="83:36">s</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:41">cps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:45" pos:end="83:52"><expr pos:start="83:45" pos:end="83:52"><name pos:start="83:45" pos:end="83:52">smp_cpus</name></expr></argument>, <argument pos:start="83:55" pos:end="83:62"><expr pos:start="83:55" pos:end="83:62"><literal type="string" pos:start="83:55" pos:end="83:62">"num-vp"</literal></expr></argument>, <argument pos:start="83:65" pos:end="83:68"><expr pos:start="83:65" pos:end="83:68"><operator pos:start="83:65" pos:end="83:65">&amp;</operator><name pos:start="83:66" pos:end="83:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:69"><expr pos:start="85:5" pos:end="85:68"><call pos:start="85:5" pos:end="85:68"><name pos:start="85:5" pos:end="85:28">object_property_set_bool</name><argument_list pos:start="85:29" pos:end="85:68">(<argument pos:start="85:30" pos:end="85:43"><expr pos:start="85:30" pos:end="85:43"><call pos:start="85:30" pos:end="85:43"><name pos:start="85:30" pos:end="85:35">OBJECT</name><argument_list pos:start="85:36" pos:end="85:43">(<argument pos:start="85:37" pos:end="85:42"><expr pos:start="85:37" pos:end="85:42"><name pos:start="85:37" pos:end="85:42"><name pos:start="85:37" pos:end="85:37">s</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:42">cps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">true</name></expr></argument>, <argument pos:start="85:52" pos:end="85:61"><expr pos:start="85:52" pos:end="85:61"><literal type="string" pos:start="85:52" pos:end="85:61">"realized"</literal></expr></argument>, <argument pos:start="85:64" pos:end="85:67"><expr pos:start="85:64" pos:end="85:67"><operator pos:start="85:64" pos:end="85:64">&amp;</operator><name pos:start="85:65" pos:end="85:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:20">(<expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:11">err</name> <operator pos:start="89:13" pos:end="89:14">!=</operator> <name pos:start="89:16" pos:end="89:19">NULL</name></expr>)</condition> <block pos:start="89:22" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:16">

        <expr_stmt pos:start="91:9" pos:end="91:50"><expr pos:start="91:9" pos:end="91:49"><call pos:start="91:9" pos:end="91:49"><name pos:start="91:9" pos:end="91:20">error_report</name><argument_list pos:start="91:21" pos:end="91:49">(<argument pos:start="91:22" pos:end="91:25"><expr pos:start="91:22" pos:end="91:25"><literal type="string" pos:start="91:22" pos:end="91:25">"%s"</literal></expr></argument>, <argument pos:start="91:28" pos:end="91:48"><expr pos:start="91:28" pos:end="91:48"><call pos:start="91:28" pos:end="91:48"><name pos:start="91:28" pos:end="91:43">error_get_pretty</name><argument_list pos:start="91:44" pos:end="91:48">(<argument pos:start="91:45" pos:end="91:47"><expr pos:start="91:45" pos:end="91:47"><name pos:start="91:45" pos:end="91:47">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><call pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">exit</name><argument_list pos:start="93:13" pos:end="93:15">(<argument pos:start="93:14" pos:end="93:14"><expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><call pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:27">sysbus_mmio_map_overlap</name><argument_list pos:start="99:28" pos:end="99:60">(<argument pos:start="99:29" pos:end="99:50"><expr pos:start="99:29" pos:end="99:50"><call pos:start="99:29" pos:end="99:50"><name pos:start="99:29" pos:end="99:42">SYS_BUS_DEVICE</name><argument_list pos:start="99:43" pos:end="99:50">(<argument pos:start="99:44" pos:end="99:49"><expr pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:49"><name pos:start="99:44" pos:end="99:44">s</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:49">cps</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:53" pos:end="99:53"><expr pos:start="99:53" pos:end="99:53"><literal type="number" pos:start="99:53" pos:end="99:53">0</literal></expr></argument>, <argument pos:start="99:56" pos:end="99:56"><expr pos:start="99:56" pos:end="99:56"><literal type="number" pos:start="99:56" pos:end="99:56">0</literal></expr></argument>, <argument pos:start="99:59" pos:end="99:59"><expr pos:start="99:59" pos:end="99:59"><literal type="number" pos:start="99:59" pos:end="99:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:36"><expr pos:start="103:5" pos:end="103:35"><name pos:start="103:5" pos:end="103:9">flash</name> <operator pos:start="103:11" pos:end="103:11">=</operator>  <call pos:start="103:14" pos:end="103:35"><name pos:start="103:14" pos:end="103:18">g_new</name><argument_list pos:start="103:19" pos:end="103:35">(<argument pos:start="103:20" pos:end="103:31"><expr pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:31">MemoryRegion</name></expr></argument>, <argument pos:start="103:34" pos:end="103:34"><expr pos:start="103:34" pos:end="103:34"><literal type="number" pos:start="103:34" pos:end="103:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="107:70"><expr pos:start="105:5" pos:end="107:69"><call pos:start="105:5" pos:end="107:69"><name pos:start="105:5" pos:end="105:33">memory_region_init_rom_device</name><argument_list pos:start="105:34" pos:end="107:69">(<argument pos:start="105:35" pos:end="105:39"><expr pos:start="105:35" pos:end="105:39"><name pos:start="105:35" pos:end="105:39">flash</name></expr></argument>, <argument pos:start="105:42" pos:end="105:45"><expr pos:start="105:42" pos:end="105:45"><name pos:start="105:42" pos:end="105:45">NULL</name></expr></argument>, <argument pos:start="105:48" pos:end="105:64"><expr pos:start="105:48" pos:end="105:64"><operator pos:start="105:48" pos:end="105:48">&amp;</operator><name pos:start="105:49" pos:end="105:64">boston_flash_ops</name></expr></argument>, <argument pos:start="105:67" pos:end="105:67"><expr pos:start="105:67" pos:end="105:67"><name pos:start="105:67" pos:end="105:67">s</name></expr></argument>,

                                  <argument pos:start="107:35" pos:end="107:48"><expr pos:start="107:35" pos:end="107:48"><literal type="string" pos:start="107:35" pos:end="107:48">"boston.flash"</literal></expr></argument>, <argument pos:start="107:51" pos:end="107:62"><expr pos:start="107:51" pos:end="107:62"><literal type="number" pos:start="107:51" pos:end="107:53">128</literal> <operator pos:start="107:55" pos:end="107:55">*</operator> <name pos:start="107:57" pos:end="107:62">M_BYTE</name></expr></argument>, <argument pos:start="107:65" pos:end="107:68"><expr pos:start="107:65" pos:end="107:68"><operator pos:start="107:65" pos:end="107:65">&amp;</operator><name pos:start="107:66" pos:end="107:68">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:71"><expr pos:start="109:5" pos:end="109:70"><call pos:start="109:5" pos:end="109:70"><name pos:start="109:5" pos:end="109:39">memory_region_add_subregion_overlap</name><argument_list pos:start="109:40" pos:end="109:70">(<argument pos:start="109:41" pos:end="109:47"><expr pos:start="109:41" pos:end="109:47"><name pos:start="109:41" pos:end="109:47">sys_mem</name></expr></argument>, <argument pos:start="109:50" pos:end="109:59"><expr pos:start="109:50" pos:end="109:59"><literal type="number" pos:start="109:50" pos:end="109:59">0x18000000</literal></expr></argument>, <argument pos:start="109:62" pos:end="109:66"><expr pos:start="109:62" pos:end="109:66"><name pos:start="109:62" pos:end="109:66">flash</name></expr></argument>, <argument pos:start="109:69" pos:end="109:69"><expr pos:start="109:69" pos:end="109:69"><literal type="number" pos:start="109:69" pos:end="109:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:33"><expr pos:start="113:5" pos:end="113:32"><name pos:start="113:5" pos:end="113:7">ddr</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:32"><name pos:start="113:11" pos:end="113:15">g_new</name><argument_list pos:start="113:16" pos:end="113:32">(<argument pos:start="113:17" pos:end="113:28"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:28">MemoryRegion</name></expr></argument>, <argument pos:start="113:31" pos:end="113:31"><expr pos:start="113:31" pos:end="113:31"><literal type="number" pos:start="113:31" pos:end="113:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:60"><expr pos:start="115:5" pos:end="117:59"><call pos:start="115:5" pos:end="117:59"><name pos:start="115:5" pos:end="115:40">memory_region_allocate_system_memory</name><argument_list pos:start="115:41" pos:end="117:59">(<argument pos:start="115:42" pos:end="115:44"><expr pos:start="115:42" pos:end="115:44"><name pos:start="115:42" pos:end="115:44">ddr</name></expr></argument>, <argument pos:start="115:47" pos:end="115:50"><expr pos:start="115:47" pos:end="115:50"><name pos:start="115:47" pos:end="115:50">NULL</name></expr></argument>, <argument pos:start="115:53" pos:end="115:64"><expr pos:start="115:53" pos:end="115:64"><literal type="string" pos:start="115:53" pos:end="115:64">"boston.ddr"</literal></expr></argument>,

                                         <argument pos:start="117:42" pos:end="117:58"><expr pos:start="117:42" pos:end="117:58"><name pos:start="117:42" pos:end="117:58"><name pos:start="117:42" pos:end="117:48">machine</name><operator pos:start="117:49" pos:end="117:50">-&gt;</operator><name pos:start="117:51" pos:end="117:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:69"><expr pos:start="119:5" pos:end="119:68"><call pos:start="119:5" pos:end="119:68"><name pos:start="119:5" pos:end="119:39">memory_region_add_subregion_overlap</name><argument_list pos:start="119:40" pos:end="119:68">(<argument pos:start="119:41" pos:end="119:47"><expr pos:start="119:41" pos:end="119:47"><name pos:start="119:41" pos:end="119:47">sys_mem</name></expr></argument>, <argument pos:start="119:50" pos:end="119:59"><expr pos:start="119:50" pos:end="119:59"><literal type="number" pos:start="119:50" pos:end="119:59">0x80000000</literal></expr></argument>, <argument pos:start="119:62" pos:end="119:64"><expr pos:start="119:62" pos:end="119:64"><name pos:start="119:62" pos:end="119:64">ddr</name></expr></argument>, <argument pos:start="119:67" pos:end="119:67"><expr pos:start="119:67" pos:end="119:67"><literal type="number" pos:start="119:67" pos:end="119:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:43"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:17">ddr_low_alias</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:42"><name pos:start="123:21" pos:end="123:25">g_new</name><argument_list pos:start="123:26" pos:end="123:42">(<argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38">MemoryRegion</name></expr></argument>, <argument pos:start="123:41" pos:end="123:41"><expr pos:start="123:41" pos:end="123:41"><literal type="number" pos:start="123:41" pos:end="123:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="127:77"><expr pos:start="125:5" pos:end="127:76"><call pos:start="125:5" pos:end="127:76"><name pos:start="125:5" pos:end="125:28">memory_region_init_alias</name><argument_list pos:start="125:29" pos:end="127:76">(<argument pos:start="125:30" pos:end="125:42"><expr pos:start="125:30" pos:end="125:42"><name pos:start="125:30" pos:end="125:42">ddr_low_alias</name></expr></argument>, <argument pos:start="125:45" pos:end="125:48"><expr pos:start="125:45" pos:end="125:48"><name pos:start="125:45" pos:end="125:48">NULL</name></expr></argument>, <argument pos:start="125:51" pos:end="125:66"><expr pos:start="125:51" pos:end="125:66"><literal type="string" pos:start="125:51" pos:end="125:66">"boston_low.ddr"</literal></expr></argument>,

                             <argument pos:start="127:30" pos:end="127:32"><expr pos:start="127:30" pos:end="127:32"><name pos:start="127:30" pos:end="127:32">ddr</name></expr></argument>, <argument pos:start="127:35" pos:end="127:35"><expr pos:start="127:35" pos:end="127:35"><literal type="number" pos:start="127:35" pos:end="127:35">0</literal></expr></argument>, <argument pos:start="127:38" pos:end="127:75"><expr pos:start="127:38" pos:end="127:75"><call pos:start="127:38" pos:end="127:75"><name pos:start="127:38" pos:end="127:40">MIN</name><argument_list pos:start="127:41" pos:end="127:75">(<argument pos:start="127:42" pos:end="127:58"><expr pos:start="127:42" pos:end="127:58"><name pos:start="127:42" pos:end="127:58"><name pos:start="127:42" pos:end="127:48">machine</name><operator pos:start="127:49" pos:end="127:50">-&gt;</operator><name pos:start="127:51" pos:end="127:58">ram_size</name></name></expr></argument>, <argument pos:start="127:61" pos:end="127:74"><expr pos:start="127:61" pos:end="127:74"><operator pos:start="127:61" pos:end="127:61">(</operator><literal type="number" pos:start="127:62" pos:end="127:64">256</literal> <operator pos:start="127:66" pos:end="127:66">*</operator> <name pos:start="127:68" pos:end="127:73">M_BYTE</name><operator pos:start="127:74" pos:end="127:74">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:70"><expr pos:start="129:5" pos:end="129:69"><call pos:start="129:5" pos:end="129:69"><name pos:start="129:5" pos:end="129:39">memory_region_add_subregion_overlap</name><argument_list pos:start="129:40" pos:end="129:69">(<argument pos:start="129:41" pos:end="129:47"><expr pos:start="129:41" pos:end="129:47"><name pos:start="129:41" pos:end="129:47">sys_mem</name></expr></argument>, <argument pos:start="129:50" pos:end="129:50"><expr pos:start="129:50" pos:end="129:50"><literal type="number" pos:start="129:50" pos:end="129:50">0</literal></expr></argument>, <argument pos:start="129:53" pos:end="129:65"><expr pos:start="129:53" pos:end="129:65"><name pos:start="129:53" pos:end="129:65">ddr_low_alias</name></expr></argument>, <argument pos:start="129:68" pos:end="129:68"><expr pos:start="129:68" pos:end="129:68"><literal type="number" pos:start="129:68" pos:end="129:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="139:52"><expr pos:start="133:5" pos:end="139:51"><call pos:start="133:5" pos:end="139:51"><name pos:start="133:5" pos:end="133:20">xilinx_pcie_init</name><argument_list pos:start="133:21" pos:end="139:51">(<argument pos:start="133:22" pos:end="133:28"><expr pos:start="133:22" pos:end="133:28"><name pos:start="133:22" pos:end="133:28">sys_mem</name></expr></argument>, <argument pos:start="133:31" pos:end="133:31"><expr pos:start="133:31" pos:end="133:31"><literal type="number" pos:start="133:31" pos:end="133:31">0</literal></expr></argument>,

                     <argument pos:start="135:22" pos:end="135:31"><expr pos:start="135:22" pos:end="135:31"><literal type="number" pos:start="135:22" pos:end="135:31">0x10000000</literal></expr></argument>, <argument pos:start="135:34" pos:end="135:44"><expr pos:start="135:34" pos:end="135:44"><literal type="number" pos:start="135:34" pos:end="135:35">32</literal> <operator pos:start="135:37" pos:end="135:37">*</operator> <name pos:start="135:39" pos:end="135:44">M_BYTE</name></expr></argument>,

                     <argument pos:start="137:22" pos:end="137:31"><expr pos:start="137:22" pos:end="137:31"><literal type="number" pos:start="137:22" pos:end="137:31">0x40000000</literal></expr></argument>, <argument pos:start="137:34" pos:end="137:43"><expr pos:start="137:34" pos:end="137:43"><literal type="number" pos:start="137:34" pos:end="137:34">1</literal> <operator pos:start="137:36" pos:end="137:36">*</operator> <name pos:start="137:38" pos:end="137:43">G_BYTE</name></expr></argument>,

                     <argument pos:start="139:22" pos:end="139:43"><expr pos:start="139:22" pos:end="139:43"><call pos:start="139:22" pos:end="139:43"><name pos:start="139:22" pos:end="139:32">get_cps_irq</name><argument_list pos:start="139:33" pos:end="139:43">(<argument pos:start="139:34" pos:end="139:39"><expr pos:start="139:34" pos:end="139:39"><name pos:start="139:34" pos:end="139:39"><name pos:start="139:34" pos:end="139:34">s</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:39">cps</name></name></expr></argument>, <argument pos:start="139:42" pos:end="139:42"><expr pos:start="139:42" pos:end="139:42"><literal type="number" pos:start="139:42" pos:end="139:42">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:46" pos:end="139:50"><expr pos:start="139:46" pos:end="139:50"><name pos:start="139:46" pos:end="139:50">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="149:52"><expr pos:start="143:5" pos:end="149:51"><call pos:start="143:5" pos:end="149:51"><name pos:start="143:5" pos:end="143:20">xilinx_pcie_init</name><argument_list pos:start="143:21" pos:end="149:51">(<argument pos:start="143:22" pos:end="143:28"><expr pos:start="143:22" pos:end="143:28"><name pos:start="143:22" pos:end="143:28">sys_mem</name></expr></argument>, <argument pos:start="143:31" pos:end="143:31"><expr pos:start="143:31" pos:end="143:31"><literal type="number" pos:start="143:31" pos:end="143:31">1</literal></expr></argument>,

                     <argument pos:start="145:22" pos:end="145:31"><expr pos:start="145:22" pos:end="145:31"><literal type="number" pos:start="145:22" pos:end="145:31">0x12000000</literal></expr></argument>, <argument pos:start="145:34" pos:end="145:44"><expr pos:start="145:34" pos:end="145:44"><literal type="number" pos:start="145:34" pos:end="145:35">32</literal> <operator pos:start="145:37" pos:end="145:37">*</operator> <name pos:start="145:39" pos:end="145:44">M_BYTE</name></expr></argument>,

                     <argument pos:start="147:22" pos:end="147:31"><expr pos:start="147:22" pos:end="147:31"><literal type="number" pos:start="147:22" pos:end="147:31">0x20000000</literal></expr></argument>, <argument pos:start="147:34" pos:end="147:45"><expr pos:start="147:34" pos:end="147:45"><literal type="number" pos:start="147:34" pos:end="147:36">512</literal> <operator pos:start="147:38" pos:end="147:38">*</operator> <name pos:start="147:40" pos:end="147:45">M_BYTE</name></expr></argument>,

                     <argument pos:start="149:22" pos:end="149:43"><expr pos:start="149:22" pos:end="149:43"><call pos:start="149:22" pos:end="149:43"><name pos:start="149:22" pos:end="149:32">get_cps_irq</name><argument_list pos:start="149:33" pos:end="149:43">(<argument pos:start="149:34" pos:end="149:39"><expr pos:start="149:34" pos:end="149:39"><name pos:start="149:34" pos:end="149:39"><name pos:start="149:34" pos:end="149:34">s</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:39">cps</name></name></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:46" pos:end="149:50"><expr pos:start="149:46" pos:end="149:50"><name pos:start="149:46" pos:end="149:50">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="159:59"><expr pos:start="153:5" pos:end="159:58"><name pos:start="153:5" pos:end="153:9">pcie2</name> <operator pos:start="153:11" pos:end="153:11">=</operator> <call pos:start="153:13" pos:end="159:58"><name pos:start="153:13" pos:end="153:28">xilinx_pcie_init</name><argument_list pos:start="153:29" pos:end="159:58">(<argument pos:start="153:30" pos:end="153:36"><expr pos:start="153:30" pos:end="153:36"><name pos:start="153:30" pos:end="153:36">sys_mem</name></expr></argument>, <argument pos:start="153:39" pos:end="153:39"><expr pos:start="153:39" pos:end="153:39"><literal type="number" pos:start="153:39" pos:end="153:39">2</literal></expr></argument>,

                             <argument pos:start="155:30" pos:end="155:39"><expr pos:start="155:30" pos:end="155:39"><literal type="number" pos:start="155:30" pos:end="155:39">0x14000000</literal></expr></argument>, <argument pos:start="155:42" pos:end="155:52"><expr pos:start="155:42" pos:end="155:52"><literal type="number" pos:start="155:42" pos:end="155:43">32</literal> <operator pos:start="155:45" pos:end="155:45">*</operator> <name pos:start="155:47" pos:end="155:52">M_BYTE</name></expr></argument>,

                             <argument pos:start="157:30" pos:end="157:39"><expr pos:start="157:30" pos:end="157:39"><literal type="number" pos:start="157:30" pos:end="157:39">0x16000000</literal></expr></argument>, <argument pos:start="157:42" pos:end="157:51"><expr pos:start="157:42" pos:end="157:51"><literal type="number" pos:start="157:42" pos:end="157:42">1</literal> <operator pos:start="157:44" pos:end="157:44">*</operator> <name pos:start="157:46" pos:end="157:51">M_BYTE</name></expr></argument>,

                             <argument pos:start="159:30" pos:end="159:51"><expr pos:start="159:30" pos:end="159:51"><call pos:start="159:30" pos:end="159:51"><name pos:start="159:30" pos:end="159:40">get_cps_irq</name><argument_list pos:start="159:41" pos:end="159:51">(<argument pos:start="159:42" pos:end="159:47"><expr pos:start="159:42" pos:end="159:47"><name pos:start="159:42" pos:end="159:47"><name pos:start="159:42" pos:end="159:42">s</name><operator pos:start="159:43" pos:end="159:44">-&gt;</operator><name pos:start="159:45" pos:end="159:47">cps</name></name></expr></argument>, <argument pos:start="159:50" pos:end="159:50"><expr pos:start="159:50" pos:end="159:50"><literal type="number" pos:start="159:50" pos:end="159:50">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:54" pos:end="159:57"><expr pos:start="159:54" pos:end="159:57"><name pos:start="159:54" pos:end="159:57">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:37"><expr pos:start="163:5" pos:end="163:36"><name pos:start="163:5" pos:end="163:11">platreg</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:36"><name pos:start="163:15" pos:end="163:19">g_new</name><argument_list pos:start="163:20" pos:end="163:36">(<argument pos:start="163:21" pos:end="163:32"><expr pos:start="163:21" pos:end="163:32"><name pos:start="163:21" pos:end="163:32">MemoryRegion</name></expr></argument>, <argument pos:start="163:35" pos:end="163:35"><expr pos:start="163:35" pos:end="163:35"><literal type="number" pos:start="163:35" pos:end="163:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="167:53"><expr pos:start="165:5" pos:end="167:52"><call pos:start="165:5" pos:end="167:52"><name pos:start="165:5" pos:end="165:25">memory_region_init_io</name><argument_list pos:start="165:26" pos:end="167:52">(<argument pos:start="165:27" pos:end="165:33"><expr pos:start="165:27" pos:end="165:33"><name pos:start="165:27" pos:end="165:33">platreg</name></expr></argument>, <argument pos:start="165:36" pos:end="165:39"><expr pos:start="165:36" pos:end="165:39"><name pos:start="165:36" pos:end="165:39">NULL</name></expr></argument>, <argument pos:start="165:42" pos:end="165:60"><expr pos:start="165:42" pos:end="165:60"><operator pos:start="165:42" pos:end="165:42">&amp;</operator><name pos:start="165:43" pos:end="165:60">boston_platreg_ops</name></expr></argument>, <argument pos:start="165:63" pos:end="165:63"><expr pos:start="165:63" pos:end="165:63"><name pos:start="165:63" pos:end="165:63">s</name></expr></argument>,

                          <argument pos:start="167:27" pos:end="167:43"><expr pos:start="167:27" pos:end="167:43"><literal type="string" pos:start="167:27" pos:end="167:43">"boston-platregs"</literal></expr></argument>, <argument pos:start="167:46" pos:end="167:51"><expr pos:start="167:46" pos:end="167:51"><literal type="number" pos:start="167:46" pos:end="167:51">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:73"><expr pos:start="169:5" pos:end="169:72"><call pos:start="169:5" pos:end="169:72"><name pos:start="169:5" pos:end="169:39">memory_region_add_subregion_overlap</name><argument_list pos:start="169:40" pos:end="169:72">(<argument pos:start="169:41" pos:end="169:47"><expr pos:start="169:41" pos:end="169:47"><name pos:start="169:41" pos:end="169:47">sys_mem</name></expr></argument>, <argument pos:start="169:50" pos:end="169:59"><expr pos:start="169:50" pos:end="169:59"><literal type="number" pos:start="169:50" pos:end="169:59">0x17ffd000</literal></expr></argument>, <argument pos:start="169:62" pos:end="169:68"><expr pos:start="169:62" pos:end="169:68"><name pos:start="169:62" pos:end="169:68">platreg</name></expr></argument>, <argument pos:start="169:71" pos:end="169:71"><expr pos:start="169:71" pos:end="169:71"><literal type="number" pos:start="169:71" pos:end="169:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="177:5"><if pos:start="173:5" pos:end="177:5">if <condition pos:start="173:8" pos:end="173:23">(<expr pos:start="173:9" pos:end="173:22"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:22"><name pos:start="173:10" pos:end="173:19">serial_hds</name><index pos:start="173:20" pos:end="173:22">[<expr pos:start="173:21" pos:end="173:21"><literal type="number" pos:start="173:21" pos:end="173:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="173:25" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:56">

        <expr_stmt pos:start="175:9" pos:end="175:56"><expr pos:start="175:9" pos:end="175:55"><name pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:18">serial_hds</name><index pos:start="175:19" pos:end="175:21">[<expr pos:start="175:20" pos:end="175:20"><literal type="number" pos:start="175:20" pos:end="175:20">0</literal></expr>]</index></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <call pos:start="175:25" pos:end="175:55"><name pos:start="175:25" pos:end="175:36">qemu_chr_new</name><argument_list pos:start="175:37" pos:end="175:55">(<argument pos:start="175:38" pos:end="175:46"><expr pos:start="175:38" pos:end="175:46"><literal type="string" pos:start="175:38" pos:end="175:46">"serial0"</literal></expr></argument>, <argument pos:start="175:49" pos:end="175:54"><expr pos:start="175:49" pos:end="175:54"><literal type="string" pos:start="175:49" pos:end="175:54">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="185:66"><expr pos:start="181:5" pos:end="185:65"><name pos:start="181:5" pos:end="181:11"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:11">uart</name></name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="185:65"><name pos:start="181:15" pos:end="181:28">serial_mm_init</name><argument_list pos:start="181:29" pos:end="185:65">(<argument pos:start="181:30" pos:end="181:36"><expr pos:start="181:30" pos:end="181:36"><name pos:start="181:30" pos:end="181:36">sys_mem</name></expr></argument>, <argument pos:start="181:39" pos:end="181:48"><expr pos:start="181:39" pos:end="181:48"><literal type="number" pos:start="181:39" pos:end="181:48">0x17ffe000</literal></expr></argument>, <argument pos:start="181:51" pos:end="181:51"><expr pos:start="181:51" pos:end="181:51"><literal type="number" pos:start="181:51" pos:end="181:51">2</literal></expr></argument>,

                             <argument pos:start="183:30" pos:end="183:51"><expr pos:start="183:30" pos:end="183:51"><call pos:start="183:30" pos:end="183:51"><name pos:start="183:30" pos:end="183:40">get_cps_irq</name><argument_list pos:start="183:41" pos:end="183:51">(<argument pos:start="183:42" pos:end="183:47"><expr pos:start="183:42" pos:end="183:47"><name pos:start="183:42" pos:end="183:47"><name pos:start="183:42" pos:end="183:42">s</name><operator pos:start="183:43" pos:end="183:44">-&gt;</operator><name pos:start="183:45" pos:end="183:47">cps</name></name></expr></argument>, <argument pos:start="183:50" pos:end="183:50"><expr pos:start="183:50" pos:end="183:50"><literal type="number" pos:start="183:50" pos:end="183:50">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="183:54" pos:end="183:61"><expr pos:start="183:54" pos:end="183:61"><literal type="number" pos:start="183:54" pos:end="183:61">10000000</literal></expr></argument>,

                             <argument pos:start="185:30" pos:end="185:42"><expr pos:start="185:30" pos:end="185:42"><name pos:start="185:30" pos:end="185:42"><name pos:start="185:30" pos:end="185:39">serial_hds</name><index pos:start="185:40" pos:end="185:42">[<expr pos:start="185:41" pos:end="185:41"><literal type="number" pos:start="185:41" pos:end="185:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="185:45" pos:end="185:64"><expr pos:start="185:45" pos:end="185:64"><name pos:start="185:45" pos:end="185:64">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:33"><expr pos:start="189:5" pos:end="189:32"><name pos:start="189:5" pos:end="189:7">lcd</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="189:32"><name pos:start="189:11" pos:end="189:15">g_new</name><argument_list pos:start="189:16" pos:end="189:32">(<argument pos:start="189:17" pos:end="189:28"><expr pos:start="189:17" pos:end="189:28"><name pos:start="189:17" pos:end="189:28">MemoryRegion</name></expr></argument>, <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:76"><expr pos:start="191:5" pos:end="191:75"><call pos:start="191:5" pos:end="191:75"><name pos:start="191:5" pos:end="191:25">memory_region_init_io</name><argument_list pos:start="191:26" pos:end="191:75">(<argument pos:start="191:27" pos:end="191:29"><expr pos:start="191:27" pos:end="191:29"><name pos:start="191:27" pos:end="191:29">lcd</name></expr></argument>, <argument pos:start="191:32" pos:end="191:35"><expr pos:start="191:32" pos:end="191:35"><name pos:start="191:32" pos:end="191:35">NULL</name></expr></argument>, <argument pos:start="191:38" pos:end="191:52"><expr pos:start="191:38" pos:end="191:52"><operator pos:start="191:38" pos:end="191:38">&amp;</operator><name pos:start="191:39" pos:end="191:52">boston_lcd_ops</name></expr></argument>, <argument pos:start="191:55" pos:end="191:55"><expr pos:start="191:55" pos:end="191:55"><name pos:start="191:55" pos:end="191:55">s</name></expr></argument>, <argument pos:start="191:58" pos:end="191:69"><expr pos:start="191:58" pos:end="191:69"><literal type="string" pos:start="191:58" pos:end="191:69">"boston-lcd"</literal></expr></argument>, <argument pos:start="191:72" pos:end="191:74"><expr pos:start="191:72" pos:end="191:74"><literal type="number" pos:start="191:72" pos:end="191:74">0x8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:69"><expr pos:start="193:5" pos:end="193:68"><call pos:start="193:5" pos:end="193:68"><name pos:start="193:5" pos:end="193:39">memory_region_add_subregion_overlap</name><argument_list pos:start="193:40" pos:end="193:68">(<argument pos:start="193:41" pos:end="193:47"><expr pos:start="193:41" pos:end="193:47"><name pos:start="193:41" pos:end="193:47">sys_mem</name></expr></argument>, <argument pos:start="193:50" pos:end="193:59"><expr pos:start="193:50" pos:end="193:59"><literal type="number" pos:start="193:50" pos:end="193:59">0x17fff000</literal></expr></argument>, <argument pos:start="193:62" pos:end="193:64"><expr pos:start="193:62" pos:end="193:64"><name pos:start="193:62" pos:end="193:64">lcd</name></expr></argument>, <argument pos:start="193:67" pos:end="193:67"><expr pos:start="193:67" pos:end="193:67"><literal type="number" pos:start="193:67" pos:end="193:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:44"><expr pos:start="197:5" pos:end="197:43"><name pos:start="197:5" pos:end="197:7">chr</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="197:43"><name pos:start="197:11" pos:end="197:22">qemu_chr_new</name><argument_list pos:start="197:23" pos:end="197:43">(<argument pos:start="197:24" pos:end="197:28"><expr pos:start="197:24" pos:end="197:28"><literal type="string" pos:start="197:24" pos:end="197:28">"lcd"</literal></expr></argument>, <argument pos:start="197:31" pos:end="197:42"><expr pos:start="197:31" pos:end="197:42"><literal type="string" pos:start="197:31" pos:end="197:42">"vc:320x240"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:49"><expr pos:start="199:5" pos:end="199:48"><call pos:start="199:5" pos:end="199:48"><name pos:start="199:5" pos:end="199:20">qemu_chr_fe_init</name><argument_list pos:start="199:21" pos:end="199:48">(<argument pos:start="199:22" pos:end="199:36"><expr pos:start="199:22" pos:end="199:36"><operator pos:start="199:22" pos:end="199:22">&amp;</operator><name pos:start="199:23" pos:end="199:36"><name pos:start="199:23" pos:end="199:23">s</name><operator pos:start="199:24" pos:end="199:25">-&gt;</operator><name pos:start="199:26" pos:end="199:36">lcd_display</name></name></expr></argument>, <argument pos:start="199:39" pos:end="199:41"><expr pos:start="199:39" pos:end="199:41"><name pos:start="199:39" pos:end="199:41">chr</name></expr></argument>, <argument pos:start="199:44" pos:end="199:47"><expr pos:start="199:44" pos:end="199:47"><name pos:start="199:44" pos:end="199:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="203:62"><expr pos:start="201:5" pos:end="203:61"><call pos:start="201:5" pos:end="203:61"><name pos:start="201:5" pos:end="201:28">qemu_chr_fe_set_handlers</name><argument_list pos:start="201:29" pos:end="203:61">(<argument pos:start="201:30" pos:end="201:44"><expr pos:start="201:30" pos:end="201:44"><operator pos:start="201:30" pos:end="201:30">&amp;</operator><name pos:start="201:31" pos:end="201:44"><name pos:start="201:31" pos:end="201:31">s</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:44">lcd_display</name></name></expr></argument>, <argument pos:start="201:47" pos:end="201:50"><expr pos:start="201:47" pos:end="201:50"><name pos:start="201:47" pos:end="201:50">NULL</name></expr></argument>, <argument pos:start="201:53" pos:end="201:56"><expr pos:start="201:53" pos:end="201:56"><name pos:start="201:53" pos:end="201:56">NULL</name></expr></argument>,

                             <argument pos:start="203:30" pos:end="203:45"><expr pos:start="203:30" pos:end="203:45"><name pos:start="203:30" pos:end="203:45">boston_lcd_event</name></expr></argument>, <argument pos:start="203:48" pos:end="203:48"><expr pos:start="203:48" pos:end="203:48"><name pos:start="203:48" pos:end="203:48">s</name></expr></argument>, <argument pos:start="203:51" pos:end="203:54"><expr pos:start="203:51" pos:end="203:54"><name pos:start="203:51" pos:end="203:54">NULL</name></expr></argument>, <argument pos:start="203:57" pos:end="203:60"><expr pos:start="203:57" pos:end="203:60"><name pos:start="203:57" pos:end="203:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="211:65"><expr pos:start="207:5" pos:end="211:64"><name pos:start="207:5" pos:end="207:8">ahci</name> <operator pos:start="207:10" pos:end="207:10">=</operator> <call pos:start="207:12" pos:end="211:64"><name pos:start="207:12" pos:end="207:42">pci_create_simple_multifunction</name><argument_list pos:start="207:43" pos:end="211:64">(<argument pos:start="207:44" pos:end="207:77"><expr pos:start="207:44" pos:end="207:77"><operator pos:start="207:44" pos:end="207:44">&amp;</operator><call pos:start="207:45" pos:end="207:68"><name pos:start="207:45" pos:end="207:54">PCI_BRIDGE</name><argument_list pos:start="207:55" pos:end="207:68">(<argument pos:start="207:56" pos:end="207:67"><expr pos:start="207:56" pos:end="207:67"><operator pos:start="207:56" pos:end="207:56">&amp;</operator><name pos:start="207:57" pos:end="207:67"><name pos:start="207:57" pos:end="207:61">pcie2</name><operator pos:start="207:62" pos:end="207:63">-&gt;</operator><name pos:start="207:64" pos:end="207:67">root</name></name></expr></argument>)</argument_list></call><operator pos:start="207:69" pos:end="207:70">-&gt;</operator><name pos:start="207:71" pos:end="207:77">sec_bus</name></expr></argument>,

                                           <argument pos:start="209:44" pos:end="209:58"><expr pos:start="209:44" pos:end="209:58"><call pos:start="209:44" pos:end="209:58"><name pos:start="209:44" pos:end="209:52">PCI_DEVFN</name><argument_list pos:start="209:53" pos:end="209:58">(<argument pos:start="209:54" pos:end="209:54"><expr pos:start="209:54" pos:end="209:54"><literal type="number" pos:start="209:54" pos:end="209:54">0</literal></expr></argument>, <argument pos:start="209:57" pos:end="209:57"><expr pos:start="209:57" pos:end="209:57"><literal type="number" pos:start="209:57" pos:end="209:57">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="211:44" pos:end="211:47"><expr pos:start="211:44" pos:end="211:47"><name pos:start="211:44" pos:end="211:47">true</name></expr></argument>, <argument pos:start="211:50" pos:end="211:63"><expr pos:start="211:50" pos:end="211:63"><name pos:start="211:50" pos:end="211:63">TYPE_ICH9_AHCI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:59"><expr pos:start="213:5" pos:end="213:58"><call pos:start="213:5" pos:end="213:58"><name pos:start="213:5" pos:end="213:12">g_assert</name><argument_list pos:start="213:13" pos:end="213:58">(<argument pos:start="213:14" pos:end="213:57"><expr pos:start="213:14" pos:end="213:57"><call pos:start="213:14" pos:end="213:27"><name pos:start="213:14" pos:end="213:23">ARRAY_SIZE</name><argument_list pos:start="213:24" pos:end="213:27">(<argument pos:start="213:25" pos:end="213:26"><expr pos:start="213:25" pos:end="213:26"><name pos:start="213:25" pos:end="213:26">hd</name></expr></argument>)</argument_list></call> <operator pos:start="213:29" pos:end="213:30">==</operator> <call pos:start="213:32" pos:end="213:45"><name pos:start="213:32" pos:end="213:39">ICH_AHCI</name><argument_list pos:start="213:40" pos:end="213:45">(<argument pos:start="213:41" pos:end="213:44"><expr pos:start="213:41" pos:end="213:44"><name pos:start="213:41" pos:end="213:44">ahci</name></expr></argument>)</argument_list></call><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:57"><name pos:start="213:48" pos:end="213:51">ahci</name><operator pos:start="213:52" pos:end="213:52">.</operator><name pos:start="213:53" pos:end="213:57">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:50"><expr pos:start="215:5" pos:end="215:49"><call pos:start="215:5" pos:end="215:49"><name pos:start="215:5" pos:end="215:17">ide_drive_get</name><argument_list pos:start="215:18" pos:end="215:49">(<argument pos:start="215:19" pos:end="215:20"><expr pos:start="215:19" pos:end="215:20"><name pos:start="215:19" pos:end="215:20">hd</name></expr></argument>, <argument pos:start="215:23" pos:end="215:48"><expr pos:start="215:23" pos:end="215:48"><call pos:start="215:23" pos:end="215:36"><name pos:start="215:23" pos:end="215:30">ICH_AHCI</name><argument_list pos:start="215:31" pos:end="215:36">(<argument pos:start="215:32" pos:end="215:35"><expr pos:start="215:32" pos:end="215:35"><name pos:start="215:32" pos:end="215:35">ahci</name></expr></argument>)</argument_list></call><operator pos:start="215:37" pos:end="215:38">-&gt;</operator><name pos:start="215:39" pos:end="215:48"><name pos:start="215:39" pos:end="215:42">ahci</name><operator pos:start="215:43" pos:end="215:43">.</operator><name pos:start="215:44" pos:end="215:48">ports</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><call pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:24">ahci_ide_create_devs</name><argument_list pos:start="217:25" pos:end="217:34">(<argument pos:start="217:26" pos:end="217:29"><expr pos:start="217:26" pos:end="217:29"><name pos:start="217:26" pos:end="217:29">ahci</name></expr></argument>, <argument pos:start="217:32" pos:end="217:33"><expr pos:start="217:32" pos:end="217:33"><name pos:start="217:32" pos:end="217:33">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="221:5" pos:end="261:5"><if pos:start="221:5" pos:end="237:5">if <condition pos:start="221:8" pos:end="221:26">(<expr pos:start="221:9" pos:end="221:25"><name pos:start="221:9" pos:end="221:25"><name pos:start="221:9" pos:end="221:15">machine</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:25">firmware</name></name></expr>)</condition> <block pos:start="221:28" pos:end="237:5">{<block_content pos:start="223:9" pos:end="235:9">

        <expr_stmt pos:start="223:9" pos:end="225:62"><expr pos:start="223:9" pos:end="225:61"><name pos:start="223:9" pos:end="223:15">fw_size</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="225:61"><name pos:start="223:19" pos:end="223:37">load_image_targphys</name><argument_list pos:start="223:38" pos:end="225:61">(<argument pos:start="223:39" pos:end="223:55"><expr pos:start="223:39" pos:end="223:55"><name pos:start="223:39" pos:end="223:55"><name pos:start="223:39" pos:end="223:45">machine</name><operator pos:start="223:46" pos:end="223:47">-&gt;</operator><name pos:start="223:48" pos:end="223:55">firmware</name></name></expr></argument>,

                                      <argument pos:start="225:39" pos:end="225:48"><expr pos:start="225:39" pos:end="225:48"><literal type="number" pos:start="225:39" pos:end="225:48">0x1fc00000</literal></expr></argument>, <argument pos:start="225:51" pos:end="225:60"><expr pos:start="225:51" pos:end="225:60"><literal type="number" pos:start="225:51" pos:end="225:51">4</literal> <operator pos:start="225:53" pos:end="225:53">*</operator> <name pos:start="225:55" pos:end="225:60">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="227:9" pos:end="235:9"><if pos:start="227:9" pos:end="235:9">if <condition pos:start="227:12" pos:end="227:26">(<expr pos:start="227:13" pos:end="227:25"><name pos:start="227:13" pos:end="227:19">fw_size</name> <operator pos:start="227:21" pos:end="227:22">==</operator> <operator pos:start="227:24" pos:end="227:24">-</operator><literal type="number" pos:start="227:25" pos:end="227:25">1</literal></expr>)</condition> <block pos:start="227:28" pos:end="235:9">{<block_content pos:start="229:13" pos:end="233:20">

            <expr_stmt pos:start="229:13" pos:end="231:45"><expr pos:start="229:13" pos:end="231:44"><call pos:start="229:13" pos:end="231:44"><name pos:start="229:13" pos:end="229:24">error_printf</name><argument_list pos:start="229:25" pos:end="231:44">(<argument pos:start="229:26" pos:end="229:63"><expr pos:start="229:26" pos:end="229:63"><literal type="string" pos:start="229:26" pos:end="229:63">"unable to load firmware image '%s'\n"</literal></expr></argument>,

                          <argument pos:start="231:27" pos:end="231:43"><expr pos:start="231:27" pos:end="231:43"><name pos:start="231:27" pos:end="231:43"><name pos:start="231:27" pos:end="231:33">machine</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:43">firmware</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:20"><expr pos:start="233:13" pos:end="233:19"><call pos:start="233:13" pos:end="233:19"><name pos:start="233:13" pos:end="233:16">exit</name><argument_list pos:start="233:17" pos:end="233:19">(<argument pos:start="233:18" pos:end="233:18"><expr pos:start="233:18" pos:end="233:18"><literal type="number" pos:start="233:18" pos:end="233:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="237:7" pos:end="255:5">else if <condition pos:start="237:15" pos:end="237:40">(<expr pos:start="237:16" pos:end="237:39"><name pos:start="237:16" pos:end="237:39"><name pos:start="237:16" pos:end="237:22">machine</name><operator pos:start="237:23" pos:end="237:24">-&gt;</operator><name pos:start="237:25" pos:end="237:39">kernel_filename</name></name></expr>)</condition> <block pos:start="237:42" pos:end="255:5">{<block_content pos:start="239:9" pos:end="253:59">

        <expr_stmt pos:start="239:9" pos:end="239:76"><expr pos:start="239:9" pos:end="239:75"><name pos:start="239:9" pos:end="239:15">fit_err</name> <operator pos:start="239:17" pos:end="239:17">=</operator> <call pos:start="239:19" pos:end="239:75"><name pos:start="239:19" pos:end="239:26">load_fit</name><argument_list pos:start="239:27" pos:end="239:75">(<argument pos:start="239:28" pos:end="239:45"><expr pos:start="239:28" pos:end="239:45"><operator pos:start="239:28" pos:end="239:28">&amp;</operator><name pos:start="239:29" pos:end="239:45">boston_fit_loader</name></expr></argument>, <argument pos:start="239:48" pos:end="239:71"><expr pos:start="239:48" pos:end="239:71"><name pos:start="239:48" pos:end="239:71"><name pos:start="239:48" pos:end="239:54">machine</name><operator pos:start="239:55" pos:end="239:56">-&gt;</operator><name pos:start="239:57" pos:end="239:71">kernel_filename</name></name></expr></argument>, <argument pos:start="239:74" pos:end="239:74"><expr pos:start="239:74" pos:end="239:74"><name pos:start="239:74" pos:end="239:74">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="241:9" pos:end="247:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="241:20">(<expr pos:start="241:13" pos:end="241:19"><name pos:start="241:13" pos:end="241:19">fit_err</name></expr>)</condition> <block pos:start="241:22" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:20">

            <expr_stmt pos:start="243:13" pos:end="243:55"><expr pos:start="243:13" pos:end="243:54"><call pos:start="243:13" pos:end="243:54"><name pos:start="243:13" pos:end="243:24">error_printf</name><argument_list pos:start="243:25" pos:end="243:54">(<argument pos:start="243:26" pos:end="243:53"><expr pos:start="243:26" pos:end="243:53"><literal type="string" pos:start="243:26" pos:end="243:53">"unable to load FIT image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:20"><expr pos:start="245:13" pos:end="245:19"><call pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:16">exit</name><argument_list pos:start="245:17" pos:end="245:19">(<argument pos:start="245:18" pos:end="245:18"><expr pos:start="245:18" pos:end="245:18"><literal type="number" pos:start="245:18" pos:end="245:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="251:9" pos:end="253:59"><expr pos:start="251:9" pos:end="253:58"><call pos:start="251:9" pos:end="253:58"><name pos:start="251:9" pos:end="251:20">gen_firmware</name><argument_list pos:start="251:21" pos:end="253:58">(<argument pos:start="251:22" pos:end="251:65"><expr pos:start="251:22" pos:end="251:65"><call pos:start="251:22" pos:end="251:53"><name pos:start="251:22" pos:end="251:46">memory_region_get_ram_ptr</name><argument_list pos:start="251:47" pos:end="251:53">(<argument pos:start="251:48" pos:end="251:52"><expr pos:start="251:48" pos:end="251:52"><name pos:start="251:48" pos:end="251:52">flash</name></expr></argument>)</argument_list></call> <operator pos:start="251:55" pos:end="251:55">+</operator> <literal type="number" pos:start="251:57" pos:end="251:65">0x7c00000</literal></expr></argument>,

                     <argument pos:start="253:22" pos:end="253:36"><expr pos:start="253:22" pos:end="253:36"><name pos:start="253:22" pos:end="253:36"><name pos:start="253:22" pos:end="253:22">s</name><operator pos:start="253:23" pos:end="253:24">-&gt;</operator><name pos:start="253:25" pos:end="253:36">kernel_entry</name></name></expr></argument>, <argument pos:start="253:39" pos:end="253:49"><expr pos:start="253:39" pos:end="253:49"><name pos:start="253:39" pos:end="253:49"><name pos:start="253:39" pos:end="253:39">s</name><operator pos:start="253:40" pos:end="253:41">-&gt;</operator><name pos:start="253:42" pos:end="253:49">fdt_base</name></name></expr></argument>, <argument pos:start="253:52" pos:end="253:57"><expr pos:start="253:52" pos:end="253:57"><name pos:start="253:52" pos:end="253:57">is_64b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="255:7" pos:end="261:5">else if <condition pos:start="255:15" pos:end="255:32">(<expr pos:start="255:16" pos:end="255:31"><operator pos:start="255:16" pos:end="255:16">!</operator><call pos:start="255:17" pos:end="255:31"><name pos:start="255:17" pos:end="255:29">qtest_enabled</name><argument_list pos:start="255:30" pos:end="255:31">()</argument_list></call></expr>)</condition> <block pos:start="255:34" pos:end="261:5">{<block_content pos:start="257:9" pos:end="259:16">

        <expr_stmt pos:start="257:9" pos:end="257:76"><expr pos:start="257:9" pos:end="257:75"><call pos:start="257:9" pos:end="257:75"><name pos:start="257:9" pos:end="257:20">error_printf</name><argument_list pos:start="257:21" pos:end="257:75">(<argument pos:start="257:22" pos:end="257:74"><expr pos:start="257:22" pos:end="257:74"><literal type="string" pos:start="257:22" pos:end="257:74">"Please provide either a -kernel or -bios argument\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:16"><expr pos:start="259:9" pos:end="259:15"><call pos:start="259:9" pos:end="259:15"><name pos:start="259:9" pos:end="259:12">exit</name><argument_list pos:start="259:13" pos:end="259:15">(<argument pos:start="259:14" pos:end="259:14"><expr pos:start="259:14" pos:end="259:14"><literal type="number" pos:start="259:14" pos:end="259:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
