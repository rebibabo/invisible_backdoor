<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12209.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:32">tcp_start_incoming_migration</name><parameter_list pos:start="1:33" pos:end="1:55">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:45"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:54">host_port</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:27">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:22">sockaddr_in</name></name></type> <name pos:start="5:24" pos:end="5:27">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">s</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:46">(<expr pos:start="13:9" pos:end="13:45"><call pos:start="13:9" pos:end="13:41"><name pos:start="13:9" pos:end="13:23">parse_host_port</name><argument_list pos:start="13:24" pos:end="13:41">(<argument pos:start="13:25" pos:end="13:29"><expr pos:start="13:25" pos:end="13:29"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:29">addr</name></expr></argument>, <argument pos:start="13:32" pos:end="13:40"><expr pos:start="13:32" pos:end="13:40"><name pos:start="13:32" pos:end="13:40">host_port</name></expr></argument>)</argument_list></call> <operator pos:start="13:43" pos:end="13:43">&lt;</operator> <literal type="number" pos:start="13:45" pos:end="13:45">0</literal></expr>)</condition> <block pos:start="13:48" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:23">

        <expr_stmt pos:start="15:9" pos:end="15:74"><expr pos:start="15:9" pos:end="15:73"><call pos:start="15:9" pos:end="15:73"><name pos:start="15:9" pos:end="15:15">fprintf</name><argument_list pos:start="15:16" pos:end="15:73">(<argument pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:22"><name pos:start="15:17" pos:end="15:22">stderr</name></expr></argument>, <argument pos:start="15:25" pos:end="15:61"><expr pos:start="15:25" pos:end="15:61"><literal type="string" pos:start="15:25" pos:end="15:61">"invalid host/port combination: %s\n"</literal></expr></argument>, <argument pos:start="15:64" pos:end="15:72"><expr pos:start="15:64" pos:end="15:72"><name pos:start="15:64" pos:end="15:72">host_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:23">return <expr pos:start="17:16" pos:end="17:22"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:40"><expr pos:start="23:5" pos:end="23:39"><name pos:start="23:5" pos:end="23:5">s</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:14">socket</name><argument_list pos:start="23:15" pos:end="23:39">(<argument pos:start="23:16" pos:end="23:22"><expr pos:start="23:16" pos:end="23:22"><name pos:start="23:16" pos:end="23:22">PF_INET</name></expr></argument>, <argument pos:start="23:25" pos:end="23:35"><expr pos:start="23:25" pos:end="23:35"><name pos:start="23:25" pos:end="23:35">SOCK_STREAM</name></expr></argument>, <argument pos:start="23:38" pos:end="23:38"><expr pos:start="23:38" pos:end="23:38"><literal type="number" pos:start="23:38" pos:end="23:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:31"><if pos:start="25:5" pos:end="27:31">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:9">s</name> <operator pos:start="25:11" pos:end="25:12">==</operator> <operator pos:start="25:14" pos:end="25:14">-</operator><literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:31"><block_content pos:start="27:9" pos:end="27:31">

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><operator pos:start="27:16" pos:end="27:16">-</operator><call pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:28">socket_error</name><argument_list pos:start="27:29" pos:end="27:30">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:12"><expr pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">val</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <literal type="number" pos:start="31:11" pos:end="31:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:77"><expr pos:start="33:5" pos:end="33:76"><call pos:start="33:5" pos:end="33:76"><name pos:start="33:5" pos:end="33:14">setsockopt</name><argument_list pos:start="33:15" pos:end="33:76">(<argument pos:start="33:16" pos:end="33:16"><expr pos:start="33:16" pos:end="33:16"><name pos:start="33:16" pos:end="33:16">s</name></expr></argument>, <argument pos:start="33:19" pos:end="33:28"><expr pos:start="33:19" pos:end="33:28"><name pos:start="33:19" pos:end="33:28">SOL_SOCKET</name></expr></argument>, <argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">SO_REUSEADDR</name></expr></argument>, <argument pos:start="33:45" pos:end="33:62"><expr pos:start="33:45" pos:end="33:62"><operator pos:start="33:45" pos:end="33:45">(</operator><specifier pos:start="33:46" pos:end="33:50">const</specifier> <name pos:start="33:52" pos:end="33:55">char</name> <operator pos:start="33:57" pos:end="33:57">*</operator><operator pos:start="33:58" pos:end="33:58">)</operator><operator pos:start="33:59" pos:end="33:59">&amp;</operator><name pos:start="33:60" pos:end="33:62">val</name></expr></argument>, <argument pos:start="33:65" pos:end="33:75"><expr pos:start="33:65" pos:end="33:75"><sizeof pos:start="33:65" pos:end="33:75">sizeof<argument_list pos:start="33:71" pos:end="33:75">(<argument pos:start="33:72" pos:end="33:74"><expr pos:start="33:72" pos:end="33:74"><name pos:start="33:72" pos:end="33:74">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="39:17"><if pos:start="37:5" pos:end="39:17">if <condition pos:start="37:8" pos:end="37:62">(<expr pos:start="37:9" pos:end="37:61"><call pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:12">bind</name><argument_list pos:start="37:13" pos:end="37:55">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><name pos:start="37:14" pos:end="37:14">s</name></expr></argument>, <argument pos:start="37:17" pos:end="37:40"><expr pos:start="37:17" pos:end="37:40"><operator pos:start="37:17" pos:end="37:17">(</operator>struct <name pos:start="37:25" pos:end="37:32">sockaddr</name> <operator pos:start="37:34" pos:end="37:34">*</operator><operator pos:start="37:35" pos:end="37:35">)</operator><operator pos:start="37:36" pos:end="37:36">&amp;</operator><name pos:start="37:37" pos:end="37:40">addr</name></expr></argument>, <argument pos:start="37:43" pos:end="37:54"><expr pos:start="37:43" pos:end="37:54"><sizeof pos:start="37:43" pos:end="37:54">sizeof<argument_list pos:start="37:49" pos:end="37:54">(<argument pos:start="37:50" pos:end="37:53"><expr pos:start="37:50" pos:end="37:53"><name pos:start="37:50" pos:end="37:53">addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="37:57" pos:end="37:58">==</operator> <operator pos:start="37:60" pos:end="37:60">-</operator><literal type="number" pos:start="37:61" pos:end="37:61">1</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:17"><block_content pos:start="39:9" pos:end="39:17">

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">err</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="45:17"><if pos:start="43:5" pos:end="45:17">if <condition pos:start="43:8" pos:end="43:27">(<expr pos:start="43:9" pos:end="43:26"><call pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:14">listen</name><argument_list pos:start="43:15" pos:end="43:20">(<argument pos:start="43:16" pos:end="43:16"><expr pos:start="43:16" pos:end="43:16"><name pos:start="43:16" pos:end="43:16">s</name></expr></argument>, <argument pos:start="43:19" pos:end="43:19"><expr pos:start="43:19" pos:end="43:19"><literal type="number" pos:start="43:19" pos:end="43:19">1</literal></expr></argument>)</argument_list></call> <operator pos:start="43:22" pos:end="43:23">==</operator> <operator pos:start="43:25" pos:end="43:25">-</operator><literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:17"><block_content pos:start="45:9" pos:end="45:17">

        <goto pos:start="45:9" pos:end="45:17">goto <name pos:start="45:14" pos:end="45:16">err</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:51"><expr pos:start="49:5" pos:end="51:50"><call pos:start="49:5" pos:end="51:50"><name pos:start="49:5" pos:end="49:24">qemu_set_fd_handler2</name><argument_list pos:start="49:25" pos:end="51:50">(<argument pos:start="49:26" pos:end="49:26"><expr pos:start="49:26" pos:end="49:26"><name pos:start="49:26" pos:end="49:26">s</name></expr></argument>, <argument pos:start="49:29" pos:end="49:32"><expr pos:start="49:29" pos:end="49:32"><name pos:start="49:29" pos:end="49:32">NULL</name></expr></argument>, <argument pos:start="49:35" pos:end="49:63"><expr pos:start="49:35" pos:end="49:63"><name pos:start="49:35" pos:end="49:63">tcp_accept_incoming_migration</name></expr></argument>, <argument pos:start="49:66" pos:end="49:69"><expr pos:start="49:66" pos:end="49:69"><name pos:start="49:66" pos:end="49:69">NULL</name></expr></argument>,

                         <argument pos:start="51:26" pos:end="51:49"><expr pos:start="51:26" pos:end="51:49"><operator pos:start="51:26" pos:end="51:26">(</operator><name pos:start="51:27" pos:end="51:30">void</name> <operator pos:start="51:32" pos:end="51:32">*</operator><operator pos:start="51:33" pos:end="51:33">)</operator><operator pos:start="51:34" pos:end="51:34">(</operator><name pos:start="51:35" pos:end="51:42">unsigned</name> <name pos:start="51:44" pos:end="51:47">long</name><operator pos:start="51:48" pos:end="51:48">)</operator><name pos:start="51:49" pos:end="51:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>



<label pos:start="59:1" pos:end="59:4"><name pos:start="59:1" pos:end="59:3">err</name>:</label>

    <expr_stmt pos:start="61:5" pos:end="61:13"><expr pos:start="61:5" pos:end="61:12"><call pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:9">close</name><argument_list pos:start="61:10" pos:end="61:12">(<argument pos:start="61:11" pos:end="61:11"><expr pos:start="61:11" pos:end="61:11"><name pos:start="61:11" pos:end="61:11">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="63:27">return <expr pos:start="63:12" pos:end="63:26"><operator pos:start="63:12" pos:end="63:12">-</operator><call pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:24">socket_error</name><argument_list pos:start="63:25" pos:end="63:26">()</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
