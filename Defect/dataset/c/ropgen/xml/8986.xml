<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8986.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:30">nbd_client_thread</name><parameter_list pos:start="1:31" pos:end="1:41">(<parameter pos:start="1:32" pos:end="1:40"><decl pos:start="1:32" pos:end="1:40"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:33">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name> <init pos:start="5:12" pos:end="5:24">= <expr pos:start="5:14" pos:end="5:24"><operator pos:start="5:14" pos:end="5:14">*</operator><operator pos:start="5:15" pos:end="5:15">(</operator><name pos:start="5:16" pos:end="5:18">int</name> <operator pos:start="5:20" pos:end="5:20">*</operator><operator pos:start="5:21" pos:end="5:21">)</operator><name pos:start="5:22" pos:end="5:24">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">off_t</name></type> <name pos:start="7:11" pos:end="7:14">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:20">blocksize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">nbdflags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">sock</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">pthread_t</name></type> <name pos:start="17:15" pos:end="17:31">show_parts_thread</name></decl>;</decl_stmt>



    <do pos:start="21:5" pos:end="31:25">do <block pos:start="21:8" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:9">

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:12">sock</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:45"><name pos:start="23:16" pos:end="23:35">unix_socket_outgoing</name><argument_list pos:start="23:36" pos:end="23:45">(<argument pos:start="23:37" pos:end="23:44"><expr pos:start="23:37" pos:end="23:44"><name pos:start="23:37" pos:end="23:44">sockpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:16">sock</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <operator pos:start="25:21" pos:end="25:21">-</operator><literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>)</condition> <block pos:start="25:25" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:21">

            <goto pos:start="27:13" pos:end="27:21">goto <name pos:start="27:18" pos:end="27:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="31:13" pos:end="31:24">(<expr pos:start="31:14" pos:end="31:23"><name pos:start="31:14" pos:end="31:17">sock</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <operator pos:start="31:22" pos:end="31:22">-</operator><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="35:5" pos:end="37:51"><expr pos:start="35:5" pos:end="37:50"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="37:50"><name pos:start="35:11" pos:end="35:31">nbd_receive_negotiate</name><argument_list pos:start="35:32" pos:end="37:50">(<argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">sock</name></expr></argument>, <argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><name pos:start="35:39" pos:end="35:42">NULL</name></expr></argument>, <argument pos:start="35:45" pos:end="35:53"><expr pos:start="35:45" pos:end="35:53"><operator pos:start="35:45" pos:end="35:45">&amp;</operator><name pos:start="35:46" pos:end="35:53">nbdflags</name></expr></argument>,

                                <argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><operator pos:start="37:33" pos:end="37:33">&amp;</operator><name pos:start="37:34" pos:end="37:37">size</name></expr></argument>, <argument pos:start="37:40" pos:end="37:49"><expr pos:start="37:40" pos:end="37:49"><operator pos:start="37:40" pos:end="37:40">&amp;</operator><name pos:start="37:41" pos:end="37:49">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:14">==</operator> <operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>)</condition> <block pos:start="39:20" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:55"><name pos:start="47:11" pos:end="47:18">nbd_init</name><argument_list pos:start="47:19" pos:end="47:55">(<argument pos:start="47:20" pos:end="47:21"><expr pos:start="47:20" pos:end="47:21"><name pos:start="47:20" pos:end="47:21">fd</name></expr></argument>, <argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">sock</name></expr></argument>, <argument pos:start="47:30" pos:end="47:37"><expr pos:start="47:30" pos:end="47:37"><name pos:start="47:30" pos:end="47:37">nbdflags</name></expr></argument>, <argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><name pos:start="47:40" pos:end="47:43">size</name></expr></argument>, <argument pos:start="47:46" pos:end="47:54"><expr pos:start="47:46" pos:end="47:54"><name pos:start="47:46" pos:end="47:54">blocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <operator pos:start="49:16" pos:end="49:16">-</operator><literal type="number" pos:start="49:17" pos:end="49:17">1</literal></expr>)</condition> <block pos:start="49:20" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:17">

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:32">/* update partition table */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:63"><expr pos:start="59:5" pos:end="59:62"><call pos:start="59:5" pos:end="59:62"><name pos:start="59:5" pos:end="59:18">pthread_create</name><argument_list pos:start="59:19" pos:end="59:62">(<argument pos:start="59:20" pos:end="59:37"><expr pos:start="59:20" pos:end="59:37"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:37">show_parts_thread</name></expr></argument>, <argument pos:start="59:40" pos:end="59:43"><expr pos:start="59:40" pos:end="59:43"><name pos:start="59:40" pos:end="59:43">NULL</name></expr></argument>, <argument pos:start="59:46" pos:end="59:55"><expr pos:start="59:46" pos:end="59:55"><name pos:start="59:46" pos:end="59:55">show_parts</name></expr></argument>, <argument pos:start="59:58" pos:end="59:61"><expr pos:start="59:58" pos:end="59:61"><name pos:start="59:58" pos:end="59:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:15">verbose</name></expr>)</condition> <block pos:start="63:18" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:33">

        <expr_stmt pos:start="65:9" pos:end="67:33"><expr pos:start="65:9" pos:end="67:32"><call pos:start="65:9" pos:end="67:32"><name pos:start="65:9" pos:end="65:15">fprintf</name><argument_list pos:start="65:16" pos:end="67:32">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">stderr</name></expr></argument>, <argument pos:start="65:25" pos:end="65:64"><expr pos:start="65:25" pos:end="65:64"><literal type="string" pos:start="65:25" pos:end="65:64">"NBD device %s is now connected to %s\n"</literal></expr></argument>,

                <argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">device</name></expr></argument>, <argument pos:start="67:25" pos:end="67:31"><expr pos:start="67:25" pos:end="67:31"><name pos:start="67:25" pos:end="67:31">srcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="75:5">else <block pos:start="69:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:43">

        <comment type="block" pos:start="71:9" pos:end="71:63">/* Close stderr so that the qemu-nbd process exits.  */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><call pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:12">dup2</name><argument_list pos:start="73:13" pos:end="73:42">(<argument pos:start="73:14" pos:end="73:26"><expr pos:start="73:14" pos:end="73:26"><name pos:start="73:14" pos:end="73:26">STDOUT_FILENO</name></expr></argument>, <argument pos:start="73:29" pos:end="73:41"><expr pos:start="73:29" pos:end="73:41"><name pos:start="73:29" pos:end="73:41">STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:25"><expr pos:start="79:5" pos:end="79:24"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:24"><name pos:start="79:11" pos:end="79:20">nbd_client</name><argument_list pos:start="79:21" pos:end="79:24">(<argument pos:start="79:22" pos:end="79:23"><expr pos:start="79:22" pos:end="79:23"><name pos:start="79:22" pos:end="79:23">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:12">(<expr pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">ret</name></expr>)</condition> <block pos:start="81:14" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:17">

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:14"><expr pos:start="87:5" pos:end="87:13"><call pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:9">close</name><argument_list pos:start="87:10" pos:end="87:13">(<argument pos:start="87:11" pos:end="87:12"><expr pos:start="87:11" pos:end="87:12"><name pos:start="87:11" pos:end="87:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:28"><expr pos:start="89:5" pos:end="89:27"><call pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:8">kill</name><argument_list pos:start="89:9" pos:end="89:27">(<argument pos:start="89:10" pos:end="89:17"><expr pos:start="89:10" pos:end="89:17"><call pos:start="89:10" pos:end="89:17"><name pos:start="89:10" pos:end="89:15">getpid</name><argument_list pos:start="89:16" pos:end="89:17">()</argument_list></call></expr></argument>, <argument pos:start="89:20" pos:end="89:26"><expr pos:start="89:20" pos:end="89:26"><name pos:start="89:20" pos:end="89:26">SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:33">return <expr pos:start="91:12" pos:end="91:32"><operator pos:start="91:12" pos:end="91:12">(</operator><name pos:start="91:13" pos:end="91:16">void</name> <operator pos:start="91:18" pos:end="91:18">*</operator><operator pos:start="91:19" pos:end="91:19">)</operator> <name pos:start="91:21" pos:end="91:32">EXIT_SUCCESS</name></expr>;</return>



<label pos:start="95:1" pos:end="95:4"><name pos:start="95:1" pos:end="95:3">out</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><call pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:8">kill</name><argument_list pos:start="97:9" pos:end="97:27">(<argument pos:start="97:10" pos:end="97:17"><expr pos:start="97:10" pos:end="97:17"><call pos:start="97:10" pos:end="97:17"><name pos:start="97:10" pos:end="97:15">getpid</name><argument_list pos:start="97:16" pos:end="97:17">()</argument_list></call></expr></argument>, <argument pos:start="97:20" pos:end="97:26"><expr pos:start="97:20" pos:end="97:26"><name pos:start="97:20" pos:end="97:26">SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:33">return <expr pos:start="99:12" pos:end="99:32"><operator pos:start="99:12" pos:end="99:12">(</operator><name pos:start="99:13" pos:end="99:16">void</name> <operator pos:start="99:18" pos:end="99:18">*</operator><operator pos:start="99:19" pos:end="99:19">)</operator> <name pos:start="99:21" pos:end="99:32">EXIT_FAILURE</name></expr>;</return>

</block_content>}</block></function>
</unit>
