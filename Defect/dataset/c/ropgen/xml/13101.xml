<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13101.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">bdrv_all_goto_snapshot</name><parameter_list pos:start="1:27" pos:end="1:77">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">name</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:76"><decl pos:start="1:46" pos:end="1:76"><type pos:start="1:46" pos:end="1:76"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:76">first_bad_bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">err</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BdrvNextIterator</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">it</name> <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="29:5">while <condition pos:start="13:11" pos:end="13:49">(<expr pos:start="13:12" pos:end="13:48"><name pos:start="13:12" pos:end="13:14">err</name> <operator pos:start="13:16" pos:end="13:17">==</operator> <literal type="number" pos:start="13:19" pos:end="13:19">0</literal> <operator pos:start="13:21" pos:end="13:22">&amp;&amp;</operator> <operator pos:start="13:24" pos:end="13:24">(</operator><name pos:start="13:25" pos:end="13:26">it</name> <operator pos:start="13:28" pos:end="13:28">=</operator> <call pos:start="13:30" pos:end="13:47"><name pos:start="13:30" pos:end="13:38">bdrv_next</name><argument_list pos:start="13:39" pos:end="13:47">(<argument pos:start="13:40" pos:end="13:41"><expr pos:start="13:40" pos:end="13:41"><name pos:start="13:40" pos:end="13:41">it</name></expr></argument>, <argument pos:start="13:44" pos:end="13:46"><expr pos:start="13:44" pos:end="13:46"><operator pos:start="13:44" pos:end="13:44">&amp;</operator><name pos:start="13:45" pos:end="13:46">bs</name></expr></argument>)</argument_list></call><operator pos:start="13:48" pos:end="13:48">)</operator></expr>)</condition> <block pos:start="13:51" pos:end="29:5">{<block_content pos:start="15:9" pos:end="27:33">

        <decl_stmt pos:start="15:9" pos:end="15:51"><decl pos:start="15:9" pos:end="15:50"><type pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:18">AioContext</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:23">ctx</name> <init pos:start="15:25" pos:end="15:50">= <expr pos:start="15:27" pos:end="15:50"><call pos:start="15:27" pos:end="15:50"><name pos:start="15:27" pos:end="15:46">bdrv_get_aio_context</name><argument_list pos:start="15:47" pos:end="15:50">(<argument pos:start="15:48" pos:end="15:49"><expr pos:start="15:48" pos:end="15:49"><name pos:start="15:48" pos:end="15:49">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:33"><expr pos:start="19:9" pos:end="19:32"><call pos:start="19:9" pos:end="19:32"><name pos:start="19:9" pos:end="19:27">aio_context_acquire</name><argument_list pos:start="19:28" pos:end="19:32">(<argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:34">(<expr pos:start="21:13" pos:end="21:33"><call pos:start="21:13" pos:end="21:33"><name pos:start="21:13" pos:end="21:29">bdrv_can_snapshot</name><argument_list pos:start="21:30" pos:end="21:33">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:36" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:47">

            <expr_stmt pos:start="23:13" pos:end="23:47"><expr pos:start="23:13" pos:end="23:46"><name pos:start="23:13" pos:end="23:15">err</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:46"><name pos:start="23:19" pos:end="23:36">bdrv_snapshot_goto</name><argument_list pos:start="23:37" pos:end="23:46">(<argument pos:start="23:38" pos:end="23:39"><expr pos:start="23:38" pos:end="23:39"><name pos:start="23:38" pos:end="23:39">bs</name></expr></argument>, <argument pos:start="23:42" pos:end="23:45"><expr pos:start="23:42" pos:end="23:45"><name pos:start="23:42" pos:end="23:45">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:33"><expr pos:start="27:9" pos:end="27:32"><call pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:27">aio_context_release</name><argument_list pos:start="27:28" pos:end="27:32">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><operator pos:start="33:5" pos:end="33:5">*</operator><name pos:start="33:6" pos:end="33:17">first_bad_bs</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:22">bs</name></expr>;</expr_stmt>

    <return pos:start="35:5" pos:end="35:15">return <expr pos:start="35:12" pos:end="35:14"><name pos:start="35:12" pos:end="35:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
