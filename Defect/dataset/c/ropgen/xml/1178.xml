<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1178.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">guess_disk_lchs</name><parameter_list pos:start="1:27" pos:end="3:71">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:30">int</name> <modifier pos:start="3:32" pos:end="3:32">*</modifier></type><name pos:start="3:33" pos:end="3:42">pcylinders</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:55"><decl pos:start="3:45" pos:end="3:55"><type pos:start="3:45" pos:end="3:55"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:55">pheads</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:60">int</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:70">psectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:14">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:33"><name pos:start="7:13" pos:end="7:15">buf</name><index pos:start="7:16" pos:end="7:33">[<expr pos:start="7:17" pos:end="7:32"><name pos:start="7:17" pos:end="7:32">BDRV_SECTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:16">heads</name></decl>, <decl pos:start="9:19" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:25">sectors</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:36">cylinders</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">partition</name></name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">nr_sects</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:23">nb_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><call pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:21">bdrv_get_geometry</name><argument_list pos:start="19:22" pos:end="19:38">(<argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><name pos:start="19:23" pos:end="19:24">bs</name></expr></argument>, <argument pos:start="19:27" pos:end="19:37"><expr pos:start="19:27" pos:end="19:37"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:37">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" format="doxygen" pos:start="23:5" pos:end="31:7">/**

     * The function will be invoked during startup not only in sync I/O mode,

     * but also in async I/O mode. So the I/O throttling function has to

     * be disabled temporarily here, not permanently.

     */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:49">(<expr pos:start="33:9" pos:end="33:48"><call pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:29">bdrv_read_unthrottled</name><argument_list pos:start="33:30" pos:end="33:44">(<argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><name pos:start="33:31" pos:end="33:32">bs</name></expr></argument>, <argument pos:start="33:35" pos:end="33:35"><expr pos:start="33:35" pos:end="33:35"><literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr></argument>, <argument pos:start="33:38" pos:end="33:40"><expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">buf</name></expr></argument>, <argument pos:start="33:43" pos:end="33:43"><expr pos:start="33:43" pos:end="33:43"><literal type="number" pos:start="33:43" pos:end="33:43">1</literal></expr></argument>)</argument_list></call> <operator pos:start="33:46" pos:end="33:46">&lt;</operator> <literal type="number" pos:start="33:48" pos:end="33:48">0</literal></expr>)</condition> <block pos:start="33:51" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:26">/* test msdos magic */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:45">(<expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">buf</name><index pos:start="41:12" pos:end="41:16">[<expr pos:start="41:13" pos:end="41:15"><literal type="number" pos:start="41:13" pos:end="41:15">510</literal></expr>]</index></name> <operator pos:start="41:18" pos:end="41:19">!=</operator> <literal type="number" pos:start="41:21" pos:end="41:24">0x55</literal> <operator pos:start="41:26" pos:end="41:27">||</operator> <name pos:start="41:29" pos:end="41:36"><name pos:start="41:29" pos:end="41:31">buf</name><index pos:start="41:32" pos:end="41:36">[<expr pos:start="41:33" pos:end="41:35"><literal type="number" pos:start="41:33" pos:end="41:35">511</literal></expr>]</index></name> <operator pos:start="41:38" pos:end="41:39">!=</operator> <literal type="number" pos:start="41:41" pos:end="41:44">0xaa</literal></expr>)</condition> <block pos:start="41:47" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="47:5" pos:end="89:5">for <control pos:start="47:9" pos:end="47:27">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <literal type="number" pos:start="47:21" pos:end="47:21">4</literal></expr>;</condition> <incr pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:24">i</name><operator pos:start="47:25" pos:end="47:26">++</operator></expr></incr>)</control> <block pos:start="47:29" pos:end="89:5">{<block_content pos:start="49:9" pos:end="87:9">

        <expr_stmt pos:start="49:9" pos:end="49:52"><expr pos:start="49:9" pos:end="49:51"><name pos:start="49:9" pos:end="49:9">p</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <operator pos:start="49:13" pos:end="49:13">(</operator><operator pos:start="49:14" pos:end="49:14">(</operator>struct <name pos:start="49:22" pos:end="49:30">partition</name> <operator pos:start="49:32" pos:end="49:32">*</operator><operator pos:start="49:33" pos:end="49:33">)</operator><operator pos:start="49:34" pos:end="49:34">(</operator><name pos:start="49:35" pos:end="49:37">buf</name> <operator pos:start="49:39" pos:end="49:39">+</operator> <literal type="number" pos:start="49:41" pos:end="49:45">0x1be</literal><operator pos:start="49:46" pos:end="49:46">)</operator><operator pos:start="49:47" pos:end="49:47">)</operator> <operator pos:start="49:49" pos:end="49:49">+</operator> <name pos:start="49:51" pos:end="49:51">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:16">nr_sects</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:30">le32_to_cpu</name><argument_list pos:start="51:31" pos:end="51:43">(<argument pos:start="51:32" pos:end="51:42"><expr pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:32">p</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:42">nr_sects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="87:9"><if pos:start="53:9" pos:end="87:9">if <condition pos:start="53:12" pos:end="53:36">(<expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:20">nr_sects</name> <operator pos:start="53:22" pos:end="53:23">&amp;&amp;</operator> <name pos:start="53:25" pos:end="53:35"><name pos:start="53:25" pos:end="53:25">p</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:35">end_head</name></name></expr>)</condition> <block pos:start="53:38" pos:end="87:9">{<block_content pos:start="59:13" pos:end="85:21">

            <comment type="block" pos:start="55:13" pos:end="57:37">/* We make the assumption that the partition terminates on

               a cylinder boundary */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:36"><expr pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:17">heads</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:31"><name pos:start="59:21" pos:end="59:21">p</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:31">end_head</name></name> <operator pos:start="59:33" pos:end="59:33">+</operator> <literal type="number" pos:start="59:35" pos:end="59:35">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:19">sectors</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:35"><name pos:start="61:23" pos:end="61:23">p</name><operator pos:start="61:24" pos:end="61:25">-&gt;</operator><name pos:start="61:26" pos:end="61:35">end_sector</name></name> <operator pos:start="61:37" pos:end="61:37">&amp;</operator> <literal type="number" pos:start="61:39" pos:end="61:40">63</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="67:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:29">(<expr pos:start="63:17" pos:end="63:28"><name pos:start="63:17" pos:end="63:23">sectors</name> <operator pos:start="63:25" pos:end="63:26">==</operator> <literal type="number" pos:start="63:28" pos:end="63:28">0</literal></expr>)</condition> <block pos:start="63:31" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:25">

                <continue pos:start="65:17" pos:end="65:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:55"><expr pos:start="69:13" pos:end="69:54"><name pos:start="69:13" pos:end="69:21">cylinders</name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:34">nb_sectors</name> <operator pos:start="69:36" pos:end="69:36">/</operator> <operator pos:start="69:38" pos:end="69:38">(</operator><name pos:start="69:39" pos:end="69:43">heads</name> <operator pos:start="69:45" pos:end="69:45">*</operator> <name pos:start="69:47" pos:end="69:53">sectors</name><operator pos:start="69:54" pos:end="69:54">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="75:13"><if pos:start="71:13" pos:end="75:13">if <condition pos:start="71:16" pos:end="71:51">(<expr pos:start="71:17" pos:end="71:50"><name pos:start="71:17" pos:end="71:44"><name pos:start="71:17" pos:end="71:25">cylinders</name> <argument_list type="generic" pos:start="71:27" pos:end="71:44">&lt; <argument pos:start="71:29" pos:end="71:42"><expr pos:start="71:29" pos:end="71:42"><literal type="number" pos:start="71:29" pos:end="71:29">1</literal> <operator pos:start="71:31" pos:end="71:32">||</operator> <name pos:start="71:34" pos:end="71:42">cylinders</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="71:46" pos:end="71:50">16383</literal></expr>)</condition> <block pos:start="71:53" pos:end="75:13">{<block_content pos:start="73:17" pos:end="73:25">

                <continue pos:start="73:17" pos:end="73:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:28"><expr pos:start="77:13" pos:end="77:27"><operator pos:start="77:13" pos:end="77:13">*</operator><name pos:start="77:14" pos:end="77:19">pheads</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:27">heads</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:32"><expr pos:start="79:13" pos:end="79:31"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:21">psectors</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:31">sectors</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:36"><expr pos:start="81:13" pos:end="81:35"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:23">pcylinders</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:35">cylinders</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:72"><expr pos:start="83:13" pos:end="83:71"><call pos:start="83:13" pos:end="83:71"><name pos:start="83:13" pos:end="83:40">trace_hd_geometry_lchs_guess</name><argument_list pos:start="83:41" pos:end="83:71">(<argument pos:start="83:42" pos:end="83:43"><expr pos:start="83:42" pos:end="83:43"><name pos:start="83:42" pos:end="83:43">bs</name></expr></argument>, <argument pos:start="83:46" pos:end="83:54"><expr pos:start="83:46" pos:end="83:54"><name pos:start="83:46" pos:end="83:54">cylinders</name></expr></argument>, <argument pos:start="83:57" pos:end="83:61"><expr pos:start="83:57" pos:end="83:61"><name pos:start="83:57" pos:end="83:61">heads</name></expr></argument>, <argument pos:start="83:64" pos:end="83:70"><expr pos:start="83:64" pos:end="83:70"><name pos:start="83:64" pos:end="83:70">sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:21">return <expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="91:5" pos:end="91:14">return <expr pos:start="91:12" pos:end="91:13"><operator pos:start="91:12" pos:end="91:12">-</operator><literal type="number" pos:start="91:13" pos:end="91:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
