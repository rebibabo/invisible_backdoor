<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6596.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">tta_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:56">AVPacket</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="297:1">{<block_content pos:start="7:5" pos:end="295:15">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">TTAContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">s</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:25">avctx</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">cur_chan</name> <init pos:start="15:18" pos:end="15:20">= <expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></init></decl>, <decl pos:start="15:23" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:30">framelen</name> <init pos:start="15:32" pos:end="15:48">= <expr pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:34">s</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:48">frame_length</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int32_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:14">p</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:48">(<expr pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:13">avctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:30">err_recognition</name></name> <operator pos:start="21:32" pos:end="21:32">&amp;</operator> <name pos:start="21:34" pos:end="21:47">AV_EF_CRCCHECK</name></expr>)</condition> <block pos:start="21:50" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:39">

        <if_stmt pos:start="23:9" pos:end="25:39"><if pos:start="23:9" pos:end="25:39">if <condition pos:start="23:12" pos:end="23:64">(<expr pos:start="23:13" pos:end="23:63"><name pos:start="23:13" pos:end="23:20">buf_size</name> <operator pos:start="23:22" pos:end="23:22">&lt;</operator> <literal type="number" pos:start="23:24" pos:end="23:24">4</literal> <operator pos:start="23:26" pos:end="23:27">||</operator> <call pos:start="23:29" pos:end="23:63"><name pos:start="23:29" pos:end="23:41">tta_check_crc</name><argument_list pos:start="23:42" pos:end="23:63">(<argument pos:start="23:43" pos:end="23:43"><expr pos:start="23:43" pos:end="23:43"><name pos:start="23:43" pos:end="23:43">s</name></expr></argument>, <argument pos:start="23:46" pos:end="23:48"><expr pos:start="23:46" pos:end="23:48"><name pos:start="23:46" pos:end="23:48">buf</name></expr></argument>, <argument pos:start="23:51" pos:end="23:62"><expr pos:start="23:51" pos:end="23:62"><name pos:start="23:51" pos:end="23:58">buf_size</name> <operator pos:start="23:60" pos:end="23:60">-</operator> <literal type="number" pos:start="23:62" pos:end="23:62">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:39"><block_content pos:start="25:13" pos:end="25:39">

            <return pos:start="25:13" pos:end="25:39">return <expr pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><call pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:17">init_get_bits</name><argument_list pos:start="31:18" pos:end="31:42">(<argument pos:start="31:19" pos:end="31:24"><expr pos:start="31:19" pos:end="31:24"><operator pos:start="31:19" pos:end="31:19">&amp;</operator><name pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:20">s</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:24">gb</name></name></expr></argument>, <argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">buf</name></expr></argument>, <argument pos:start="31:32" pos:end="31:41"><expr pos:start="31:32" pos:end="31:41"><name pos:start="31:32" pos:end="31:39">buf_size</name><operator pos:start="31:40" pos:end="31:40">*</operator><literal type="number" pos:start="31:41" pos:end="31:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="35:5" pos:end="35:21">// FIXME: seeking</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:19">total_frames</name></name><operator pos:start="37:20" pos:end="37:21">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:40"><if pos:start="39:5" pos:end="41:40">if <condition pos:start="39:8" pos:end="39:49">(<expr pos:start="39:9" pos:end="39:48"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:10">s</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:24">total_frames</name></name> <operator pos:start="39:26" pos:end="39:27">&amp;&amp;</operator> <name pos:start="39:29" pos:end="39:48"><name pos:start="39:29" pos:end="39:29">s</name><operator pos:start="39:30" pos:end="39:31">-&gt;</operator><name pos:start="39:32" pos:end="39:48">last_frame_length</name></name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:40"><block_content pos:start="41:9" pos:end="41:40">

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:16">framelen</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:39"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:39">last_frame_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:27">/* get output buffer */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:12">frame</name><operator pos:start="47:13" pos:end="47:13">.</operator><name pos:start="47:14" pos:end="47:23">nb_samples</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:34">framelen</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:52">(<expr pos:start="49:9" pos:end="49:51"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:12">ret</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:46"><name pos:start="49:16" pos:end="49:28">ff_get_buffer</name><argument_list pos:start="49:29" pos:end="49:46">(<argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><name pos:start="49:30" pos:end="49:34">avctx</name></expr></argument>, <argument pos:start="49:37" pos:end="49:45"><expr pos:start="49:37" pos:end="49:45"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:45"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="49:47" pos:end="49:47">)</operator> <operator pos:start="49:49" pos:end="49:49">&lt;</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>)</condition> <block pos:start="49:54" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:19">

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><call pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:60">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:59"><expr pos:start="51:37" pos:end="51:59"><literal type="string" pos:start="51:37" pos:end="51:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="59:5" pos:end="59:64">// decode directly to output buffer for 24-bit sample format</comment>

    <if_stmt pos:start="61:5" pos:end="63:55"><if pos:start="61:5" pos:end="63:55">if <condition pos:start="61:8" pos:end="61:20">(<expr pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:14">bps</name></name> <operator pos:start="61:16" pos:end="61:17">==</operator> <literal type="number" pos:start="61:19" pos:end="61:19">3</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:55"><block_content pos:start="63:9" pos:end="63:55">

        <expr_stmt pos:start="63:9" pos:end="63:55"><expr pos:start="63:9" pos:end="63:54"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:24">decode_buffer</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <operator pos:start="63:28" pos:end="63:28">(</operator><name pos:start="63:29" pos:end="63:35">int32_t</name> <operator pos:start="63:37" pos:end="63:37">*</operator><operator pos:start="63:38" pos:end="63:38">)</operator><name pos:start="63:39" pos:end="63:54"><name pos:start="63:39" pos:end="63:39">s</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:46">frame</name><operator pos:start="63:47" pos:end="63:47">.</operator><name pos:start="63:48" pos:end="63:51">data</name><index pos:start="63:52" pos:end="63:54">[<expr pos:start="63:53" pos:end="63:53"><literal type="number" pos:start="63:53" pos:end="63:53">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="67:5" pos:end="67:30">// init per channel states</comment>

    <for pos:start="69:5" pos:end="77:5">for <control pos:start="69:9" pos:end="69:37">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:31"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:31">channels</name></name></expr>;</condition> <incr pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:34">i</name><operator pos:start="69:35" pos:end="69:36">++</operator></expr></incr>)</control> <block pos:start="69:39" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:46">

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:17">ch_ctx</name><index pos:start="71:18" pos:end="71:20">[<expr pos:start="71:19" pos:end="71:19"><name pos:start="71:19" pos:end="71:19">i</name></expr>]</index></name><operator pos:start="71:21" pos:end="71:21">.</operator><name pos:start="71:22" pos:end="71:30">predictor</name> <operator pos:start="71:32" pos:end="71:32">=</operator> <literal type="number" pos:start="71:34" pos:end="71:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:74"><expr pos:start="73:9" pos:end="73:73"><call pos:start="73:9" pos:end="73:73"><name pos:start="73:9" pos:end="73:22">ttafilter_init</name><argument_list pos:start="73:23" pos:end="73:73">(<argument pos:start="73:24" pos:end="73:43"><expr pos:start="73:24" pos:end="73:43"><operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:36"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:33">ch_ctx</name><index pos:start="73:34" pos:end="73:36">[<expr pos:start="73:35" pos:end="73:35"><name pos:start="73:35" pos:end="73:35">i</name></expr>]</index></name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:43">filter</name></expr></argument>, <argument pos:start="73:46" pos:end="73:72"><expr pos:start="73:46" pos:end="73:72"><name pos:start="73:46" pos:end="73:72"><name pos:start="73:46" pos:end="73:62">ttafilter_configs</name><index pos:start="73:63" pos:end="73:72">[<expr pos:start="73:64" pos:end="73:71"><name pos:start="73:64" pos:end="73:69"><name pos:start="73:64" pos:end="73:64">s</name><operator pos:start="73:65" pos:end="73:66">-&gt;</operator><name pos:start="73:67" pos:end="73:69">bps</name></name><operator pos:start="73:70" pos:end="73:70">-</operator><literal type="number" pos:start="73:71" pos:end="73:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:46"><expr pos:start="75:9" pos:end="75:45"><call pos:start="75:9" pos:end="75:45"><name pos:start="75:9" pos:end="75:17">rice_init</name><argument_list pos:start="75:18" pos:end="75:45">(<argument pos:start="75:19" pos:end="75:36"><expr pos:start="75:19" pos:end="75:36"><operator pos:start="75:19" pos:end="75:19">&amp;</operator><name pos:start="75:20" pos:end="75:31"><name pos:start="75:20" pos:end="75:20">s</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:28">ch_ctx</name><index pos:start="75:29" pos:end="75:31">[<expr pos:start="75:30" pos:end="75:30"><name pos:start="75:30" pos:end="75:30">i</name></expr>]</index></name><operator pos:start="75:32" pos:end="75:32">.</operator><name pos:start="75:33" pos:end="75:36">rice</name></expr></argument>, <argument pos:start="75:39" pos:end="75:40"><expr pos:start="75:39" pos:end="75:40"><literal type="number" pos:start="75:39" pos:end="75:40">10</literal></expr></argument>, <argument pos:start="75:43" pos:end="75:44"><expr pos:start="75:43" pos:end="75:44"><literal type="number" pos:start="75:43" pos:end="75:44">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="81:5" pos:end="235:5">for <control pos:start="81:9" pos:end="81:84">(<init pos:start="81:10" pos:end="81:30"><expr pos:start="81:10" pos:end="81:29"><name pos:start="81:10" pos:end="81:10">p</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:29"><name pos:start="81:14" pos:end="81:14">s</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:29">decode_buffer</name></name></expr>;</init> <condition pos:start="81:32" pos:end="81:79"><expr pos:start="81:32" pos:end="81:78"><name pos:start="81:32" pos:end="81:32">p</name> <operator pos:start="81:34" pos:end="81:34">&lt;</operator> <name pos:start="81:36" pos:end="81:51"><name pos:start="81:36" pos:end="81:36">s</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:51">decode_buffer</name></name> <operator pos:start="81:53" pos:end="81:53">+</operator> <operator pos:start="81:55" pos:end="81:55">(</operator><name pos:start="81:56" pos:end="81:63">framelen</name> <operator pos:start="81:65" pos:end="81:65">*</operator> <name pos:start="81:67" pos:end="81:77"><name pos:start="81:67" pos:end="81:67">s</name><operator pos:start="81:68" pos:end="81:69">-&gt;</operator><name pos:start="81:70" pos:end="81:77">channels</name></name><operator pos:start="81:78" pos:end="81:78">)</operator></expr>;</condition> <incr pos:start="81:81" pos:end="81:83"><expr pos:start="81:81" pos:end="81:83"><name pos:start="81:81" pos:end="81:81">p</name><operator pos:start="81:82" pos:end="81:83">++</operator></expr></incr>)</control> <block pos:start="81:86" pos:end="235:5">{<block_content pos:start="83:9" pos:end="233:9">

        <decl_stmt pos:start="83:9" pos:end="83:60"><decl pos:start="83:9" pos:end="83:59"><type pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:15">int32_t</name> <modifier pos:start="83:17" pos:end="83:17">*</modifier></type><name pos:start="83:18" pos:end="83:26">predictor</name> <init pos:start="83:28" pos:end="83:59">= <expr pos:start="83:30" pos:end="83:59"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:49"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:39">ch_ctx</name><index pos:start="83:40" pos:end="83:49">[<expr pos:start="83:41" pos:end="83:48"><name pos:start="83:41" pos:end="83:48">cur_chan</name></expr>]</index></name><operator pos:start="83:50" pos:end="83:50">.</operator><name pos:start="83:51" pos:end="83:59">predictor</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:56"><decl pos:start="85:9" pos:end="85:55"><type pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:17">TTAFilter</name> <modifier pos:start="85:19" pos:end="85:19">*</modifier></type><name pos:start="85:20" pos:end="85:25">filter</name> <init pos:start="85:27" pos:end="85:55">= <expr pos:start="85:29" pos:end="85:55"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:48"><name pos:start="85:30" pos:end="85:30">s</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:38">ch_ctx</name><index pos:start="85:39" pos:end="85:48">[<expr pos:start="85:40" pos:end="85:47"><name pos:start="85:40" pos:end="85:47">cur_chan</name></expr>]</index></name><operator pos:start="85:49" pos:end="85:49">.</operator><name pos:start="85:50" pos:end="85:55">filter</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:50"><decl pos:start="87:9" pos:end="87:49"><type pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:15">TTARice</name> <modifier pos:start="87:17" pos:end="87:17">*</modifier></type><name pos:start="87:18" pos:end="87:21">rice</name> <init pos:start="87:23" pos:end="87:49">= <expr pos:start="87:25" pos:end="87:49"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:44"><name pos:start="87:26" pos:end="87:26">s</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:34">ch_ctx</name><index pos:start="87:35" pos:end="87:44">[<expr pos:start="87:36" pos:end="87:43"><name pos:start="87:36" pos:end="87:43">cur_chan</name></expr>]</index></name><operator pos:start="87:45" pos:end="87:45">.</operator><name pos:start="87:46" pos:end="87:49">rice</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:33"><decl pos:start="89:9" pos:end="89:22"><type pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">uint32_t</name></type> <name pos:start="89:18" pos:end="89:22">unary</name></decl>, <decl pos:start="89:25" pos:end="89:29"><type ref="prev" pos:start="89:9" pos:end="89:16"/><name pos:start="89:25" pos:end="89:29">depth</name></decl>, <decl pos:start="89:32" pos:end="89:32"><type ref="prev" pos:start="89:9" pos:end="89:16"/><name pos:start="89:32" pos:end="89:32">k</name></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:22"><decl pos:start="91:9" pos:end="91:21"><type pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:15">int32_t</name></type> <name pos:start="91:17" pos:end="91:21">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:38"><expr pos:start="95:9" pos:end="95:37"><name pos:start="95:9" pos:end="95:13">unary</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:29">tta_get_unary</name><argument_list pos:start="95:30" pos:end="95:37">(<argument pos:start="95:31" pos:end="95:36"><expr pos:start="95:31" pos:end="95:36"><operator pos:start="95:31" pos:end="95:31">&amp;</operator><name pos:start="95:32" pos:end="95:36"><name pos:start="95:32" pos:end="95:32">s</name><operator pos:start="95:33" pos:end="95:34">-&gt;</operator><name pos:start="95:35" pos:end="95:36">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="113:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:23">(<expr pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:17">unary</name> <operator pos:start="99:19" pos:end="99:20">==</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>)</condition> <block pos:start="99:25" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:25">

            <expr_stmt pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:17">depth</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:25"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:13">k</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:24"><name pos:start="103:17" pos:end="103:20">rice</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:24">k0</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="113:9">else <block pos:start="105:16" pos:end="113:9">{<block_content pos:start="107:13" pos:end="111:20">

            <expr_stmt pos:start="107:13" pos:end="107:22"><expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:17">depth</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <literal type="number" pos:start="107:21" pos:end="107:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:13">k</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <name pos:start="109:17" pos:end="109:24"><name pos:start="109:17" pos:end="109:20">rice</name><operator pos:start="109:21" pos:end="109:22">-&gt;</operator><name pos:start="109:23" pos:end="109:24">k1</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:20"><expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:17">unary</name><operator pos:start="111:18" pos:end="111:19">--</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:38">(<expr pos:start="117:13" pos:end="117:37"><call pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:25">get_bits_left</name><argument_list pos:start="117:26" pos:end="117:33">(<argument pos:start="117:27" pos:end="117:32"><expr pos:start="117:27" pos:end="117:32"><operator pos:start="117:27" pos:end="117:27">&amp;</operator><name pos:start="117:28" pos:end="117:32"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="117:35" pos:end="117:35">&lt;</operator> <name pos:start="117:37" pos:end="117:37">k</name></expr>)</condition> <block pos:start="117:40" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:23">

            <expr_stmt pos:start="119:13" pos:end="119:38"><expr pos:start="119:13" pos:end="119:37"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:23">goto <name pos:start="121:18" pos:end="121:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="127:9" pos:end="141:26"><if pos:start="127:9" pos:end="139:9">if <condition pos:start="127:12" pos:end="127:14">(<expr pos:start="127:13" pos:end="127:13"><name pos:start="127:13" pos:end="127:13">k</name></expr>)</condition> <block pos:start="127:16" pos:end="139:9">{<block_content pos:start="129:13" pos:end="137:55">

            <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if <condition pos:start="129:16" pos:end="129:35">(<expr pos:start="129:17" pos:end="129:34"><name pos:start="129:17" pos:end="129:17">k</name> <operator pos:start="129:19" pos:end="129:19">&gt;</operator> <name pos:start="129:21" pos:end="129:34">MIN_CACHE_BITS</name></expr>)</condition> <block pos:start="129:37" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:27">

                <expr_stmt pos:start="131:17" pos:end="131:42"><expr pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:19">ret</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="133:17" pos:end="133:27">goto <name pos:start="133:22" pos:end="133:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:55"><expr pos:start="137:13" pos:end="137:54"><name pos:start="137:13" pos:end="137:17">value</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><name pos:start="137:22" pos:end="137:26">unary</name> <operator pos:start="137:28" pos:end="137:29">&lt;&lt;</operator> <name pos:start="137:31" pos:end="137:31">k</name><operator pos:start="137:32" pos:end="137:32">)</operator> <operator pos:start="137:34" pos:end="137:34">+</operator> <call pos:start="137:36" pos:end="137:54"><name pos:start="137:36" pos:end="137:43">get_bits</name><argument_list pos:start="137:44" pos:end="137:54">(<argument pos:start="137:45" pos:end="137:50"><expr pos:start="137:45" pos:end="137:50"><operator pos:start="137:45" pos:end="137:45">&amp;</operator><name pos:start="137:46" pos:end="137:50"><name pos:start="137:46" pos:end="137:46">s</name><operator pos:start="137:47" pos:end="137:48">-&gt;</operator><name pos:start="137:49" pos:end="137:50">gb</name></name></expr></argument>, <argument pos:start="137:53" pos:end="137:53"><expr pos:start="137:53" pos:end="137:53"><name pos:start="137:53" pos:end="137:53">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="141:26">else<block type="pseudo" pos:start="141:13" pos:end="141:26"><block_content pos:start="141:13" pos:end="141:26">

            <expr_stmt pos:start="141:13" pos:end="141:26"><expr pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:17">value</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:25">unary</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <comment type="line" pos:start="145:9" pos:end="145:42">// FIXME: copy paste from original</comment>

        <switch pos:start="147:9" pos:end="175:9">switch <condition pos:start="147:16" pos:end="147:22">(<expr pos:start="147:17" pos:end="147:21"><name pos:start="147:17" pos:end="147:21">depth</name></expr>)</condition> <block pos:start="147:24" pos:end="175:9">{<block_content pos:start="149:9" pos:end="173:27">

        <case pos:start="149:9" pos:end="149:15">case <expr pos:start="149:14" pos:end="149:14"><literal type="number" pos:start="149:14" pos:end="149:14">1</literal></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:52"><expr pos:start="151:13" pos:end="151:51"><name pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:16">rice</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:22">sum1</name></name> <operator pos:start="151:24" pos:end="151:25">+=</operator> <name pos:start="151:27" pos:end="151:31">value</name> <operator pos:start="151:33" pos:end="151:33">-</operator> <operator pos:start="151:35" pos:end="151:35">(</operator><name pos:start="151:36" pos:end="151:45"><name pos:start="151:36" pos:end="151:39">rice</name><operator pos:start="151:40" pos:end="151:41">-&gt;</operator><name pos:start="151:42" pos:end="151:45">sum1</name></name> <operator pos:start="151:47" pos:end="151:48">&gt;&gt;</operator> <literal type="number" pos:start="151:50" pos:end="151:50">4</literal><operator pos:start="151:51" pos:end="151:51">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="159:27"><if pos:start="153:13" pos:end="155:27">if <condition pos:start="153:16" pos:end="153:64">(<expr pos:start="153:17" pos:end="153:63"><name pos:start="153:17" pos:end="153:24"><name pos:start="153:17" pos:end="153:20">rice</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:24">k1</name></name> <operator pos:start="153:26" pos:end="153:26">&gt;</operator> <literal type="number" pos:start="153:28" pos:end="153:28">0</literal> <operator pos:start="153:30" pos:end="153:31">&amp;&amp;</operator> <name pos:start="153:33" pos:end="153:42"><name pos:start="153:33" pos:end="153:36">rice</name><operator pos:start="153:37" pos:end="153:38">-&gt;</operator><name pos:start="153:39" pos:end="153:42">sum1</name></name> <operator pos:start="153:44" pos:end="153:44">&lt;</operator> <name pos:start="153:46" pos:end="153:63"><name pos:start="153:46" pos:end="153:53">shift_16</name><index pos:start="153:54" pos:end="153:63">[<expr pos:start="153:55" pos:end="153:62"><name pos:start="153:55" pos:end="153:62"><name pos:start="153:55" pos:end="153:58">rice</name><operator pos:start="153:59" pos:end="153:60">-&gt;</operator><name pos:start="153:61" pos:end="153:62">k1</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:27"><block_content pos:start="155:17" pos:end="155:27">

                <expr_stmt pos:start="155:17" pos:end="155:27"><expr pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:24"><name pos:start="155:17" pos:end="155:20">rice</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:24">k1</name></name><operator pos:start="155:25" pos:end="155:26">--</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="157:13" pos:end="159:27">else if<condition pos:start="157:20" pos:end="157:56">(<expr pos:start="157:21" pos:end="157:55"><name pos:start="157:21" pos:end="157:30"><name pos:start="157:21" pos:end="157:24">rice</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:30">sum1</name></name> <operator pos:start="157:32" pos:end="157:32">&gt;</operator> <name pos:start="157:34" pos:end="157:55"><name pos:start="157:34" pos:end="157:41">shift_16</name><index pos:start="157:42" pos:end="157:55">[<expr pos:start="157:43" pos:end="157:54"><name pos:start="157:43" pos:end="157:50"><name pos:start="157:43" pos:end="157:46">rice</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:50">k1</name></name> <operator pos:start="157:52" pos:end="157:52">+</operator> <literal type="number" pos:start="157:54" pos:end="157:54">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:27"><block_content pos:start="159:17" pos:end="159:27">

                <expr_stmt pos:start="159:17" pos:end="159:27"><expr pos:start="159:17" pos:end="159:26"><name pos:start="159:17" pos:end="159:24"><name pos:start="159:17" pos:end="159:20">rice</name><operator pos:start="159:21" pos:end="159:22">-&gt;</operator><name pos:start="159:23" pos:end="159:24">k1</name></name><operator pos:start="159:25" pos:end="159:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:39"><expr pos:start="161:13" pos:end="161:38"><name pos:start="161:13" pos:end="161:17">value</name> <operator pos:start="161:19" pos:end="161:20">+=</operator> <name pos:start="161:22" pos:end="161:38"><name pos:start="161:22" pos:end="161:28">shift_1</name><index pos:start="161:29" pos:end="161:38">[<expr pos:start="161:30" pos:end="161:37"><name pos:start="161:30" pos:end="161:37"><name pos:start="161:30" pos:end="161:33">rice</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:37">k0</name></name></expr>]</index></name></expr>;</expr_stmt>

        <default pos:start="163:9" pos:end="163:16">default:</default>

            <expr_stmt pos:start="165:13" pos:end="165:52"><expr pos:start="165:13" pos:end="165:51"><name pos:start="165:13" pos:end="165:22"><name pos:start="165:13" pos:end="165:16">rice</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:22">sum0</name></name> <operator pos:start="165:24" pos:end="165:25">+=</operator> <name pos:start="165:27" pos:end="165:31">value</name> <operator pos:start="165:33" pos:end="165:33">-</operator> <operator pos:start="165:35" pos:end="165:35">(</operator><name pos:start="165:36" pos:end="165:45"><name pos:start="165:36" pos:end="165:39">rice</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:45">sum0</name></name> <operator pos:start="165:47" pos:end="165:48">&gt;&gt;</operator> <literal type="number" pos:start="165:50" pos:end="165:50">4</literal><operator pos:start="165:51" pos:end="165:51">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="173:27"><if pos:start="167:13" pos:end="169:27">if <condition pos:start="167:16" pos:end="167:64">(<expr pos:start="167:17" pos:end="167:63"><name pos:start="167:17" pos:end="167:24"><name pos:start="167:17" pos:end="167:20">rice</name><operator pos:start="167:21" pos:end="167:22">-&gt;</operator><name pos:start="167:23" pos:end="167:24">k0</name></name> <operator pos:start="167:26" pos:end="167:26">&gt;</operator> <literal type="number" pos:start="167:28" pos:end="167:28">0</literal> <operator pos:start="167:30" pos:end="167:31">&amp;&amp;</operator> <name pos:start="167:33" pos:end="167:42"><name pos:start="167:33" pos:end="167:36">rice</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:42">sum0</name></name> <operator pos:start="167:44" pos:end="167:44">&lt;</operator> <name pos:start="167:46" pos:end="167:63"><name pos:start="167:46" pos:end="167:53">shift_16</name><index pos:start="167:54" pos:end="167:63">[<expr pos:start="167:55" pos:end="167:62"><name pos:start="167:55" pos:end="167:62"><name pos:start="167:55" pos:end="167:58">rice</name><operator pos:start="167:59" pos:end="167:60">-&gt;</operator><name pos:start="167:61" pos:end="167:62">k0</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:27"><block_content pos:start="169:17" pos:end="169:27">

                <expr_stmt pos:start="169:17" pos:end="169:27"><expr pos:start="169:17" pos:end="169:26"><name pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:20">rice</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:24">k0</name></name><operator pos:start="169:25" pos:end="169:26">--</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="171:13" pos:end="173:27">else if<condition pos:start="171:20" pos:end="171:56">(<expr pos:start="171:21" pos:end="171:55"><name pos:start="171:21" pos:end="171:30"><name pos:start="171:21" pos:end="171:24">rice</name><operator pos:start="171:25" pos:end="171:26">-&gt;</operator><name pos:start="171:27" pos:end="171:30">sum0</name></name> <operator pos:start="171:32" pos:end="171:32">&gt;</operator> <name pos:start="171:34" pos:end="171:55"><name pos:start="171:34" pos:end="171:41">shift_16</name><index pos:start="171:42" pos:end="171:55">[<expr pos:start="171:43" pos:end="171:54"><name pos:start="171:43" pos:end="171:50"><name pos:start="171:43" pos:end="171:46">rice</name><operator pos:start="171:47" pos:end="171:48">-&gt;</operator><name pos:start="171:49" pos:end="171:50">k0</name></name> <operator pos:start="171:52" pos:end="171:52">+</operator> <literal type="number" pos:start="171:54" pos:end="171:54">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:27"><block_content pos:start="173:17" pos:end="173:27">

                <expr_stmt pos:start="173:17" pos:end="173:27"><expr pos:start="173:17" pos:end="173:26"><name pos:start="173:17" pos:end="173:24"><name pos:start="173:17" pos:end="173:20">rice</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:24">k0</name></name><operator pos:start="173:25" pos:end="173:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></switch>



        <comment type="line" pos:start="179:9" pos:end="179:30">// extract coded value</comment>

        <expr_stmt pos:start="181:9" pos:end="181:52"><expr pos:start="181:9" pos:end="181:51"><operator pos:start="181:9" pos:end="181:9">*</operator><name pos:start="181:10" pos:end="181:10">p</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <literal type="number" pos:start="181:14" pos:end="181:16">1</literal> <operator pos:start="181:16" pos:end="181:16">+</operator> <operator pos:start="181:18" pos:end="181:18">(</operator><operator pos:start="181:19" pos:end="181:19">(</operator><name pos:start="181:20" pos:end="181:24">value</name> <operator pos:start="181:26" pos:end="181:27">&gt;&gt;</operator> <literal type="number" pos:start="181:29" pos:end="181:29">1</literal><operator pos:start="181:30" pos:end="181:30">)</operator> <operator pos:start="181:32" pos:end="181:32">^</operator> <operator pos:start="181:34" pos:end="181:34">(</operator><operator pos:start="181:35" pos:end="181:35">(</operator><name pos:start="181:36" pos:end="181:40">value</name> <operator pos:start="181:42" pos:end="181:42">&amp;</operator> <literal type="number" pos:start="181:44" pos:end="181:44">1</literal><operator pos:start="181:45" pos:end="181:45">)</operator> <operator pos:start="181:47" pos:end="181:47">-</operator> <literal type="number" pos:start="181:49" pos:end="181:49">1</literal><operator pos:start="181:50" pos:end="181:50">)</operator><operator pos:start="181:51" pos:end="181:51">)</operator></expr>;</expr_stmt>



        <comment type="line" pos:start="185:9" pos:end="185:28">// run hybrid filter</comment>

        <expr_stmt pos:start="187:9" pos:end="194:0"><expr pos:start="187:9" pos:end="187:36"><call pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:25">ttafilter_process</name><argument_list pos:start="187:26" pos:end="187:36">(<argument pos:start="187:27" pos:end="187:32"><expr pos:start="187:27" pos:end="187:32"><name pos:start="187:27" pos:end="187:32">filter</name></expr></argument>, <argument pos:start="187:35" pos:end="187:35"><expr pos:start="187:35" pos:end="187:35"><name pos:start="187:35" pos:end="187:35">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="191:9" pos:end="191:33">// fixed order prediction</comment>

<cpp:define pos:start="193:1" pos:end="193:59">#<cpp:directive pos:start="193:2" pos:end="193:7">define</cpp:directive> <cpp:macro pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:12">PRED</name><parameter_list pos:start="193:13" pos:end="193:18">(<parameter pos:start="193:14" pos:end="193:14"><type pos:start="193:14" pos:end="193:14"><name pos:start="193:14" pos:end="193:14">x</name></type></parameter>, <parameter pos:start="193:17" pos:end="193:17"><type pos:start="193:17" pos:end="193:17"><name pos:start="193:17" pos:end="193:17">k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="193:20" pos:end="193:59">(int32_t)((((uint64_t)x &lt;&lt; k) - x) &gt;&gt; k)</cpp:value></cpp:define>

        <switch pos:start="195:9" pos:end="205:9">switch <condition pos:start="195:16" pos:end="195:23">(<expr pos:start="195:17" pos:end="195:22"><name pos:start="195:17" pos:end="195:22"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:22">bps</name></name></expr>)</condition> <block pos:start="195:25" pos:end="205:9">{<block_content pos:start="197:9" pos:end="203:49">

        <case pos:start="197:9" pos:end="197:15">case <expr pos:start="197:14" pos:end="197:14"><literal type="number" pos:start="197:14" pos:end="197:14">1</literal></expr>:</case> <expr_stmt pos:start="197:17" pos:end="197:42"><expr pos:start="197:17" pos:end="197:41"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:18">p</name> <operator pos:start="197:20" pos:end="197:21">+=</operator> <call pos:start="197:23" pos:end="197:41"><name pos:start="197:23" pos:end="197:26">PRED</name><argument_list pos:start="197:27" pos:end="197:41">(<argument pos:start="197:28" pos:end="197:37"><expr pos:start="197:28" pos:end="197:37"><operator pos:start="197:28" pos:end="197:28">*</operator><name pos:start="197:29" pos:end="197:37">predictor</name></expr></argument>, <argument pos:start="197:40" pos:end="197:40"><expr pos:start="197:40" pos:end="197:40"><literal type="number" pos:start="197:40" pos:end="197:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="197:44" pos:end="197:49">break;</break>

        <case pos:start="199:9" pos:end="199:15">case <expr pos:start="199:14" pos:end="199:14"><literal type="number" pos:start="199:14" pos:end="199:14">2</literal></expr>:</case>

        <case pos:start="201:9" pos:end="201:15">case <expr pos:start="201:14" pos:end="201:14"><literal type="number" pos:start="201:14" pos:end="201:14">3</literal></expr>:</case> <expr_stmt pos:start="201:17" pos:end="201:42"><expr pos:start="201:17" pos:end="201:41"><operator pos:start="201:17" pos:end="201:17">*</operator><name pos:start="201:18" pos:end="201:18">p</name> <operator pos:start="201:20" pos:end="201:21">+=</operator> <call pos:start="201:23" pos:end="201:41"><name pos:start="201:23" pos:end="201:26">PRED</name><argument_list pos:start="201:27" pos:end="201:41">(<argument pos:start="201:28" pos:end="201:37"><expr pos:start="201:28" pos:end="201:37"><operator pos:start="201:28" pos:end="201:28">*</operator><name pos:start="201:29" pos:end="201:37">predictor</name></expr></argument>, <argument pos:start="201:40" pos:end="201:40"><expr pos:start="201:40" pos:end="201:40"><literal type="number" pos:start="201:40" pos:end="201:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="201:44" pos:end="201:49">break;</break>

        <case pos:start="203:9" pos:end="203:15">case <expr pos:start="203:14" pos:end="203:14"><literal type="number" pos:start="203:14" pos:end="203:14">4</literal></expr>:</case> <expr_stmt pos:start="203:17" pos:end="203:38"><expr pos:start="203:17" pos:end="203:37"><operator pos:start="203:17" pos:end="203:17">*</operator><name pos:start="203:18" pos:end="203:18">p</name> <operator pos:start="203:20" pos:end="203:21">+=</operator>      <operator pos:start="203:28" pos:end="203:28">*</operator><name pos:start="203:29" pos:end="203:37">predictor</name></expr>;</expr_stmt>     <break pos:start="203:44" pos:end="203:49">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="207:9" pos:end="207:24"><expr pos:start="207:9" pos:end="207:23"><operator pos:start="207:9" pos:end="207:9">*</operator><name pos:start="207:10" pos:end="207:18">predictor</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <operator pos:start="207:22" pos:end="207:22">*</operator><name pos:start="207:23" pos:end="207:23">p</name></expr>;</expr_stmt>



        <comment type="line" pos:start="211:9" pos:end="211:24">// flip channels</comment>

        <if_stmt pos:start="213:9" pos:end="233:9"><if pos:start="213:9" pos:end="215:23">if <condition pos:start="213:12" pos:end="213:39">(<expr pos:start="213:13" pos:end="213:38"><name pos:start="213:13" pos:end="213:20">cur_chan</name> <operator pos:start="213:22" pos:end="213:22">&lt;</operator> <operator pos:start="213:24" pos:end="213:24">(</operator><name pos:start="213:25" pos:end="213:35"><name pos:start="213:25" pos:end="213:25">s</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:35">channels</name></name><operator pos:start="213:36" pos:end="213:36">-</operator><literal type="number" pos:start="213:37" pos:end="213:37">1</literal><operator pos:start="213:38" pos:end="213:38">)</operator></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:23"><block_content pos:start="215:13" pos:end="215:23">

            <expr_stmt pos:start="215:13" pos:end="215:23"><expr pos:start="215:13" pos:end="215:22"><name pos:start="215:13" pos:end="215:20">cur_chan</name><operator pos:start="215:21" pos:end="215:22">++</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="217:9" pos:end="233:9">else <block pos:start="217:14" pos:end="233:9">{<block_content pos:start="221:13" pos:end="231:25">

            <comment type="line" pos:start="219:13" pos:end="219:55">// decorrelate in case of multiple channels</comment>

            <if_stmt pos:start="221:13" pos:end="229:13"><if pos:start="221:13" pos:end="229:13">if <condition pos:start="221:16" pos:end="221:32">(<expr pos:start="221:17" pos:end="221:31"><name pos:start="221:17" pos:end="221:27"><name pos:start="221:17" pos:end="221:17">s</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:27">channels</name></name> <operator pos:start="221:29" pos:end="221:29">&gt;</operator> <literal type="number" pos:start="221:31" pos:end="221:31">1</literal></expr>)</condition> <block pos:start="221:34" pos:end="229:13">{<block_content pos:start="223:17" pos:end="227:39">

                <decl_stmt pos:start="223:17" pos:end="223:35"><decl pos:start="223:17" pos:end="223:34"><type pos:start="223:17" pos:end="223:25"><name pos:start="223:17" pos:end="223:23">int32_t</name> <modifier pos:start="223:25" pos:end="223:25">*</modifier></type><name pos:start="223:26" pos:end="223:26">r</name> <init pos:start="223:28" pos:end="223:34">= <expr pos:start="223:30" pos:end="223:34"><name pos:start="223:30" pos:end="223:30">p</name> <operator pos:start="223:32" pos:end="223:32">-</operator> <literal type="number" pos:start="223:34" pos:end="223:34">1</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="225:17" pos:end="227:39">for <control pos:start="225:21" pos:end="225:60">(<init pos:start="225:22" pos:end="225:34"><expr pos:start="225:22" pos:end="225:33"><operator pos:start="225:22" pos:end="225:22">*</operator><name pos:start="225:23" pos:end="225:23">p</name> <operator pos:start="225:25" pos:end="225:26">+=</operator> <operator pos:start="225:28" pos:end="225:28">*</operator><name pos:start="225:29" pos:end="225:29">r</name> <operator pos:start="225:31" pos:end="225:31">/</operator> <literal type="number" pos:start="225:33" pos:end="225:33">2</literal></expr>;</init> <condition pos:start="225:36" pos:end="225:55"><expr pos:start="225:36" pos:end="225:54"><name pos:start="225:36" pos:end="225:36">r</name> <operator pos:start="225:38" pos:end="225:38">&gt;</operator> <name pos:start="225:40" pos:end="225:40">p</name> <operator pos:start="225:42" pos:end="225:42">-</operator> <name pos:start="225:44" pos:end="225:54"><name pos:start="225:44" pos:end="225:44">s</name><operator pos:start="225:45" pos:end="225:46">-&gt;</operator><name pos:start="225:47" pos:end="225:54">channels</name></name></expr>;</condition> <incr pos:start="225:57" pos:end="225:59"><expr pos:start="225:57" pos:end="225:59"><name pos:start="225:57" pos:end="225:57">r</name><operator pos:start="225:58" pos:end="225:59">--</operator></expr></incr>)</control><block type="pseudo" pos:start="227:21" pos:end="227:39"><block_content pos:start="227:21" pos:end="227:39">

                    <expr_stmt pos:start="227:21" pos:end="227:39"><expr pos:start="227:21" pos:end="227:38"><operator pos:start="227:21" pos:end="227:21">*</operator><name pos:start="227:22" pos:end="227:22">r</name> <operator pos:start="227:24" pos:end="227:24">=</operator> <operator pos:start="227:26" pos:end="227:26">*</operator><operator pos:start="227:27" pos:end="227:27">(</operator><name pos:start="227:28" pos:end="227:28">r</name> <operator pos:start="227:30" pos:end="227:30">+</operator> <literal type="number" pos:start="227:32" pos:end="227:32">1</literal><operator pos:start="227:33" pos:end="227:33">)</operator> <operator pos:start="227:35" pos:end="227:35">-</operator> <operator pos:start="227:37" pos:end="227:37">*</operator><name pos:start="227:38" pos:end="227:38">r</name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:25"><expr pos:start="231:13" pos:end="231:24"><name pos:start="231:13" pos:end="231:20">cur_chan</name> <operator pos:start="231:22" pos:end="231:22">=</operator> <literal type="number" pos:start="231:24" pos:end="231:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="239:5" pos:end="245:5"><if pos:start="239:5" pos:end="245:5">if <condition pos:start="239:8" pos:end="239:35">(<expr pos:start="239:9" pos:end="239:34"><call pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:21">get_bits_left</name><argument_list pos:start="239:22" pos:end="239:29">(<argument pos:start="239:23" pos:end="239:28"><expr pos:start="239:23" pos:end="239:28"><operator pos:start="239:23" pos:end="239:23">&amp;</operator><name pos:start="239:24" pos:end="239:28"><name pos:start="239:24" pos:end="239:24">s</name><operator pos:start="239:25" pos:end="239:26">-&gt;</operator><name pos:start="239:27" pos:end="239:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="239:31" pos:end="239:31">&lt;</operator> <literal type="number" pos:start="239:33" pos:end="239:34">32</literal></expr>)</condition> <block pos:start="239:37" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:19">

        <expr_stmt pos:start="241:9" pos:end="241:34"><expr pos:start="241:9" pos:end="241:33"><name pos:start="241:9" pos:end="241:11">ret</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <name pos:start="241:15" pos:end="241:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="243:9" pos:end="243:19">goto <name pos:start="243:14" pos:end="243:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:31"><expr pos:start="247:5" pos:end="247:30"><call pos:start="247:5" pos:end="247:30"><name pos:start="247:5" pos:end="247:18">skip_bits_long</name><argument_list pos:start="247:19" pos:end="247:30">(<argument pos:start="247:20" pos:end="247:25"><expr pos:start="247:20" pos:end="247:25"><operator pos:start="247:20" pos:end="247:20">&amp;</operator><name pos:start="247:21" pos:end="247:25"><name pos:start="247:21" pos:end="247:21">s</name><operator pos:start="247:22" pos:end="247:23">-&gt;</operator><name pos:start="247:24" pos:end="247:25">gb</name></name></expr></argument>, <argument pos:start="247:28" pos:end="247:29"><expr pos:start="247:28" pos:end="247:29"><literal type="number" pos:start="247:28" pos:end="247:29">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="247:33" pos:end="247:44">// frame crc</comment>



    <comment type="line" pos:start="251:5" pos:end="251:31">// convert to output buffer</comment>

    <if_stmt pos:start="253:5" pos:end="275:5"><if pos:start="253:5" pos:end="261:5">if <condition pos:start="253:8" pos:end="253:20">(<expr pos:start="253:9" pos:end="253:19"><name pos:start="253:9" pos:end="253:14"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:14">bps</name></name> <operator pos:start="253:16" pos:end="253:17">==</operator> <literal type="number" pos:start="253:19" pos:end="253:19">2</literal></expr>)</condition> <block pos:start="253:22" pos:end="261:5">{<block_content pos:start="255:9" pos:end="259:28">

        <decl_stmt pos:start="255:9" pos:end="255:55"><decl pos:start="255:9" pos:end="255:54"><type pos:start="255:9" pos:end="255:17"><name pos:start="255:9" pos:end="255:15">int16_t</name> <modifier pos:start="255:17" pos:end="255:17">*</modifier></type><name pos:start="255:18" pos:end="255:24">samples</name> <init pos:start="255:26" pos:end="255:54">= <expr pos:start="255:28" pos:end="255:54"><operator pos:start="255:28" pos:end="255:28">(</operator><name pos:start="255:29" pos:end="255:35">int16_t</name> <operator pos:start="255:37" pos:end="255:37">*</operator><operator pos:start="255:38" pos:end="255:38">)</operator><name pos:start="255:39" pos:end="255:54"><name pos:start="255:39" pos:end="255:39">s</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:46">frame</name><operator pos:start="255:47" pos:end="255:47">.</operator><name pos:start="255:48" pos:end="255:51">data</name><index pos:start="255:52" pos:end="255:54">[<expr pos:start="255:53" pos:end="255:53"><literal type="number" pos:start="255:53" pos:end="255:53">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="257:9" pos:end="259:28">for <control pos:start="257:13" pos:end="257:88">(<init pos:start="257:14" pos:end="257:34"><expr pos:start="257:14" pos:end="257:33"><name pos:start="257:14" pos:end="257:14">p</name> <operator pos:start="257:16" pos:end="257:16">=</operator> <name pos:start="257:18" pos:end="257:33"><name pos:start="257:18" pos:end="257:18">s</name><operator pos:start="257:19" pos:end="257:20">-&gt;</operator><name pos:start="257:21" pos:end="257:33">decode_buffer</name></name></expr>;</init> <condition pos:start="257:36" pos:end="257:83"><expr pos:start="257:36" pos:end="257:82"><name pos:start="257:36" pos:end="257:36">p</name> <operator pos:start="257:38" pos:end="257:38">&lt;</operator> <name pos:start="257:40" pos:end="257:55"><name pos:start="257:40" pos:end="257:40">s</name><operator pos:start="257:41" pos:end="257:42">-&gt;</operator><name pos:start="257:43" pos:end="257:55">decode_buffer</name></name> <operator pos:start="257:57" pos:end="257:57">+</operator> <operator pos:start="257:59" pos:end="257:59">(</operator><name pos:start="257:60" pos:end="257:67">framelen</name> <operator pos:start="257:69" pos:end="257:69">*</operator> <name pos:start="257:71" pos:end="257:81"><name pos:start="257:71" pos:end="257:71">s</name><operator pos:start="257:72" pos:end="257:73">-&gt;</operator><name pos:start="257:74" pos:end="257:81">channels</name></name><operator pos:start="257:82" pos:end="257:82">)</operator></expr>;</condition> <incr pos:start="257:85" pos:end="257:87"><expr pos:start="257:85" pos:end="257:87"><name pos:start="257:85" pos:end="257:85">p</name><operator pos:start="257:86" pos:end="257:87">++</operator></expr></incr>)</control><block type="pseudo" pos:start="259:13" pos:end="259:28"><block_content pos:start="259:13" pos:end="259:28">

            <expr_stmt pos:start="259:13" pos:end="259:28"><expr pos:start="259:13" pos:end="259:27"><operator pos:start="259:13" pos:end="259:13">*</operator><name pos:start="259:14" pos:end="259:20">samples</name><operator pos:start="259:21" pos:end="259:22">++</operator> <operator pos:start="259:24" pos:end="259:24">=</operator> <operator pos:start="259:26" pos:end="259:26">*</operator><name pos:start="259:27" pos:end="259:27">p</name></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="275:5">else <block pos:start="261:12" pos:end="275:5">{<block_content pos:start="265:9" pos:end="273:32">

        <comment type="line" pos:start="263:9" pos:end="263:49">// shift samples for 24-bit sample format</comment>

        <decl_stmt pos:start="265:9" pos:end="265:55"><decl pos:start="265:9" pos:end="265:54"><type pos:start="265:9" pos:end="265:17"><name pos:start="265:9" pos:end="265:15">int32_t</name> <modifier pos:start="265:17" pos:end="265:17">*</modifier></type><name pos:start="265:18" pos:end="265:24">samples</name> <init pos:start="265:26" pos:end="265:54">= <expr pos:start="265:28" pos:end="265:54"><operator pos:start="265:28" pos:end="265:28">(</operator><name pos:start="265:29" pos:end="265:35">int32_t</name> <operator pos:start="265:37" pos:end="265:37">*</operator><operator pos:start="265:38" pos:end="265:38">)</operator><name pos:start="265:39" pos:end="265:54"><name pos:start="265:39" pos:end="265:39">s</name><operator pos:start="265:40" pos:end="265:41">-&gt;</operator><name pos:start="265:42" pos:end="265:46">frame</name><operator pos:start="265:47" pos:end="265:47">.</operator><name pos:start="265:48" pos:end="265:51">data</name><index pos:start="265:52" pos:end="265:54">[<expr pos:start="265:53" pos:end="265:53"><literal type="number" pos:start="265:53" pos:end="265:53">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for pos:start="267:9" pos:end="269:29">for <control pos:start="267:13" pos:end="267:52">(<init pos:start="267:14" pos:end="267:19"><expr pos:start="267:14" pos:end="267:18"><name pos:start="267:14" pos:end="267:14">i</name> <operator pos:start="267:16" pos:end="267:16">=</operator> <literal type="number" pos:start="267:18" pos:end="267:18">0</literal></expr>;</init> <condition pos:start="267:21" pos:end="267:47"><expr pos:start="267:21" pos:end="267:46"><name pos:start="267:21" pos:end="267:21">i</name> <operator pos:start="267:23" pos:end="267:23">&lt;</operator> <name pos:start="267:25" pos:end="267:32">framelen</name> <operator pos:start="267:34" pos:end="267:34">*</operator> <name pos:start="267:36" pos:end="267:46"><name pos:start="267:36" pos:end="267:36">s</name><operator pos:start="267:37" pos:end="267:38">-&gt;</operator><name pos:start="267:39" pos:end="267:46">channels</name></name></expr>;</condition> <incr pos:start="267:49" pos:end="267:51"><expr pos:start="267:49" pos:end="267:51"><name pos:start="267:49" pos:end="267:49">i</name><operator pos:start="267:50" pos:end="267:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="269:13" pos:end="269:29"><block_content pos:start="269:13" pos:end="269:29">

            <expr_stmt pos:start="269:13" pos:end="269:29"><expr pos:start="269:13" pos:end="269:28"><operator pos:start="269:13" pos:end="269:13">*</operator><name pos:start="269:14" pos:end="269:20">samples</name><operator pos:start="269:21" pos:end="269:22">++</operator> <operator pos:start="269:24" pos:end="269:26">&lt;&lt;=</operator> <literal type="number" pos:start="269:28" pos:end="269:28">8</literal></expr>;</expr_stmt></block_content></block></for>

        <comment type="line" pos:start="271:9" pos:end="271:30">// reset decode buffer</comment>

        <expr_stmt pos:start="273:9" pos:end="273:32"><expr pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:24"><name pos:start="273:9" pos:end="273:9">s</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:24">decode_buffer</name></name> <operator pos:start="273:26" pos:end="273:26">=</operator> <name pos:start="273:28" pos:end="273:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:25"><expr pos:start="279:5" pos:end="279:24"><operator pos:start="279:5" pos:end="279:5">*</operator><name pos:start="279:6" pos:end="279:18">got_frame_ptr</name>   <operator pos:start="279:22" pos:end="279:22">=</operator> <literal type="number" pos:start="279:24" pos:end="279:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:32"><expr pos:start="281:5" pos:end="281:31"><operator pos:start="281:5" pos:end="281:5">*</operator><operator pos:start="281:6" pos:end="281:6">(</operator><name pos:start="281:7" pos:end="281:13">AVFrame</name> <operator pos:start="281:15" pos:end="281:15">*</operator><operator pos:start="281:16" pos:end="281:16">)</operator><name pos:start="281:17" pos:end="281:20">data</name> <operator pos:start="281:22" pos:end="281:22">=</operator> <name pos:start="281:24" pos:end="281:31"><name pos:start="281:24" pos:end="281:24">s</name><operator pos:start="281:25" pos:end="281:26">-&gt;</operator><name pos:start="281:27" pos:end="281:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="285:5" pos:end="285:20">return <expr pos:start="285:12" pos:end="285:19"><name pos:start="285:12" pos:end="285:19">buf_size</name></expr>;</return>

<label pos:start="287:1" pos:end="287:6"><name pos:start="287:1" pos:end="287:5">error</name>:</label>

    <comment type="line" pos:start="289:5" pos:end="289:26">// reset decode buffer</comment>

    <if_stmt pos:start="291:5" pos:end="293:32"><if pos:start="291:5" pos:end="293:32">if <condition pos:start="291:8" pos:end="291:20">(<expr pos:start="291:9" pos:end="291:19"><name pos:start="291:9" pos:end="291:14"><name pos:start="291:9" pos:end="291:9">s</name><operator pos:start="291:10" pos:end="291:11">-&gt;</operator><name pos:start="291:12" pos:end="291:14">bps</name></name> <operator pos:start="291:16" pos:end="291:17">==</operator> <literal type="number" pos:start="291:19" pos:end="291:19">3</literal></expr>)</condition><block type="pseudo" pos:start="293:9" pos:end="293:32"><block_content pos:start="293:9" pos:end="293:32">

        <expr_stmt pos:start="293:9" pos:end="293:32"><expr pos:start="293:9" pos:end="293:31"><name pos:start="293:9" pos:end="293:24"><name pos:start="293:9" pos:end="293:9">s</name><operator pos:start="293:10" pos:end="293:11">-&gt;</operator><name pos:start="293:12" pos:end="293:24">decode_buffer</name></name> <operator pos:start="293:26" pos:end="293:26">=</operator> <name pos:start="293:28" pos:end="293:31">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="295:5" pos:end="295:15">return <expr pos:start="295:12" pos:end="295:14"><name pos:start="295:12" pos:end="295:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
