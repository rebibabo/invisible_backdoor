<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26317.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">backup_start</name><parameter_list pos:start="1:18" pos:end="17:49">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><specifier pos:start="1:19" pos:end="1:23">const</specifier> <name pos:start="1:25" pos:end="1:28">char</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">job_id</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:42"><decl pos:start="3:19" pos:end="3:42"><type pos:start="3:19" pos:end="3:42"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:42">target</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:51">int64_t</name></type> <name pos:start="3:53" pos:end="3:57">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:32">MirrorSyncMode</name></type> <name pos:start="5:34" pos:end="5:42">sync_mode</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:72"><decl pos:start="5:45" pos:end="5:72"><type pos:start="5:45" pos:end="5:72"><name pos:start="5:45" pos:end="5:59">BdrvDirtyBitmap</name> <modifier pos:start="5:61" pos:end="5:61">*</modifier></type><name pos:start="5:62" pos:end="5:72">sync_bitmap</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:31"><decl pos:start="7:19" pos:end="7:31"><type pos:start="7:19" pos:end="7:31"><name pos:start="7:19" pos:end="7:22">bool</name></type> <name pos:start="7:24" pos:end="7:31">compress</name></decl></parameter>,

                  <parameter pos:start="9:19" pos:end="9:49"><decl pos:start="9:19" pos:end="9:49"><type pos:start="9:19" pos:end="9:49"><name pos:start="9:19" pos:end="9:33">BlockdevOnError</name></type> <name pos:start="9:35" pos:end="9:49">on_source_error</name></decl></parameter>,

                  <parameter pos:start="11:19" pos:end="11:49"><decl pos:start="11:19" pos:end="11:49"><type pos:start="11:19" pos:end="11:49"><name pos:start="11:19" pos:end="11:33">BlockdevOnError</name></type> <name pos:start="11:35" pos:end="11:49">on_target_error</name></decl></parameter>,

                  <parameter pos:start="13:19" pos:end="13:36"><decl pos:start="13:19" pos:end="13:36"><type pos:start="13:19" pos:end="13:36"><name pos:start="13:19" pos:end="13:21">int</name></type> <name pos:start="13:23" pos:end="13:36">creation_flags</name></decl></parameter>,

                  <parameter pos:start="15:19" pos:end="15:41"><decl pos:start="15:19" pos:end="15:41"><type pos:start="15:19" pos:end="15:41"><name pos:start="15:19" pos:end="15:37">BlockCompletionFunc</name> <modifier pos:start="15:39" pos:end="15:39">*</modifier></type><name pos:start="15:40" pos:end="15:41">cb</name></decl></parameter>, <parameter pos:start="15:44" pos:end="15:55"><decl pos:start="15:44" pos:end="15:55"><type pos:start="15:44" pos:end="15:55"><name pos:start="15:44" pos:end="15:47">void</name> <modifier pos:start="15:49" pos:end="15:49">*</modifier></type><name pos:start="15:50" pos:end="15:55">opaque</name></decl></parameter>,

                  <parameter pos:start="17:19" pos:end="17:34"><decl pos:start="17:19" pos:end="17:34"><type pos:start="17:19" pos:end="17:34"><name pos:start="17:19" pos:end="17:29">BlockJobTxn</name> <modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:34">txn</name></decl></parameter>, <parameter pos:start="17:37" pos:end="17:48"><decl pos:start="17:37" pos:end="17:48"><type pos:start="17:37" pos:end="17:48"><name pos:start="17:37" pos:end="17:41">Error</name> <modifier pos:start="17:43" pos:end="17:43">*</modifier><modifier pos:start="17:44" pos:end="17:44">*</modifier></type><name pos:start="17:45" pos:end="17:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="19:1" pos:end="249:1">{<block_content pos:start="21:5" pos:end="247:5">

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:19">BlockDriverInfo</name></type> <name pos:start="23:21" pos:end="23:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:18">BackupBlockJob</name> <modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:23">job</name> <init pos:start="25:25" pos:end="25:30">= <expr pos:start="25:27" pos:end="25:30"><name pos:start="25:27" pos:end="25:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:12"><decl pos:start="27:5" pos:end="27:11"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><call pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:14">(<argument pos:start="31:12" pos:end="31:13"><expr pos:start="31:12" pos:end="31:13"><name pos:start="31:12" pos:end="31:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><call pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:18">(<argument pos:start="33:12" pos:end="33:17"><expr pos:start="33:12" pos:end="33:17"><name pos:start="33:12" pos:end="33:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">bs</name> <operator pos:start="37:12" pos:end="37:13">==</operator> <name pos:start="37:15" pos:end="37:20">target</name></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:15">

        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><call pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:64">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:63"><expr pos:start="39:26" pos:end="39:63"><literal type="string" pos:start="39:26" pos:end="39:63">"Source and target cannot be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:30">(<expr pos:start="47:9" pos:end="47:29"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:29"><name pos:start="47:10" pos:end="47:25">bdrv_is_inserted</name><argument_list pos:start="47:26" pos:end="47:29">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:32" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:15">

        <expr_stmt pos:start="49:9" pos:end="51:45"><expr pos:start="49:9" pos:end="51:44"><call pos:start="49:9" pos:end="51:44"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="51:44">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:53"><expr pos:start="49:26" pos:end="49:53"><literal type="string" pos:start="49:26" pos:end="49:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:43"><expr pos:start="51:20" pos:end="51:43"><call pos:start="51:20" pos:end="51:43"><name pos:start="51:20" pos:end="51:39">bdrv_get_device_name</name><argument_list pos:start="51:40" pos:end="51:43">(<argument pos:start="51:41" pos:end="51:42"><expr pos:start="51:41" pos:end="51:42"><name pos:start="51:41" pos:end="51:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:33"><name pos:start="59:10" pos:end="59:25">bdrv_is_inserted</name><argument_list pos:start="59:26" pos:end="59:33">(<argument pos:start="59:27" pos:end="59:32"><expr pos:start="59:27" pos:end="59:32"><name pos:start="59:27" pos:end="59:32">target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:36" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:15">

        <expr_stmt pos:start="61:9" pos:end="63:49"><expr pos:start="61:9" pos:end="63:48"><call pos:start="61:9" pos:end="63:48"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="63:48">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:53"><expr pos:start="61:26" pos:end="61:53"><literal type="string" pos:start="61:26" pos:end="61:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:47"><expr pos:start="63:20" pos:end="63:47"><call pos:start="63:20" pos:end="63:47"><name pos:start="63:20" pos:end="63:39">bdrv_get_device_name</name><argument_list pos:start="63:40" pos:end="63:47">(<argument pos:start="63:41" pos:end="63:46"><expr pos:start="63:41" pos:end="63:46"><name pos:start="63:41" pos:end="63:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:68">(<expr pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:16">compress</name> <operator pos:start="71:18" pos:end="71:19">&amp;&amp;</operator> <name pos:start="71:21" pos:end="71:59"><name pos:start="71:21" pos:end="71:26">target</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:31">drv</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:59">bdrv_co_pwritev_compressed</name></name> <operator pos:start="71:61" pos:end="71:62">==</operator> <name pos:start="71:64" pos:end="71:67">NULL</name></expr>)</condition> <block pos:start="71:70" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:15">

        <expr_stmt pos:start="73:9" pos:end="75:49"><expr pos:start="73:9" pos:end="75:48"><call pos:start="73:9" pos:end="75:48"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="75:48">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:73"><expr pos:start="73:26" pos:end="73:73"><literal type="string" pos:start="73:26" pos:end="73:73">"Compression is not supported for this drive %s"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:47"><expr pos:start="75:20" pos:end="75:47"><call pos:start="75:20" pos:end="75:47"><name pos:start="75:20" pos:end="75:39">bdrv_get_device_name</name><argument_list pos:start="75:40" pos:end="75:47">(<argument pos:start="75:41" pos:end="75:46"><expr pos:start="75:41" pos:end="75:46"><name pos:start="75:41" pos:end="75:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:66">(<expr pos:start="83:9" pos:end="83:65"><call pos:start="83:9" pos:end="83:65"><name pos:start="83:9" pos:end="83:26">bdrv_op_is_blocked</name><argument_list pos:start="83:27" pos:end="83:65">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">bs</name></expr></argument>, <argument pos:start="83:32" pos:end="83:58"><expr pos:start="83:32" pos:end="83:58"><name pos:start="83:32" pos:end="83:58">BLOCK_OP_TYPE_BACKUP_SOURCE</name></expr></argument>, <argument pos:start="83:61" pos:end="83:64"><expr pos:start="83:61" pos:end="83:64"><name pos:start="83:61" pos:end="83:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:68" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:15">

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:70">(<expr pos:start="91:9" pos:end="91:69"><call pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:26">bdrv_op_is_blocked</name><argument_list pos:start="91:27" pos:end="91:69">(<argument pos:start="91:28" pos:end="91:33"><expr pos:start="91:28" pos:end="91:33"><name pos:start="91:28" pos:end="91:33">target</name></expr></argument>, <argument pos:start="91:36" pos:end="91:62"><expr pos:start="91:36" pos:end="91:62"><name pos:start="91:36" pos:end="91:62">BLOCK_OP_TYPE_BACKUP_TARGET</name></expr></argument>, <argument pos:start="91:65" pos:end="91:68"><expr pos:start="91:65" pos:end="91:68"><name pos:start="91:65" pos:end="91:68">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:72" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:15">

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="133:5"><if pos:start="99:5" pos:end="121:5">if <condition pos:start="99:8" pos:end="99:50">(<expr pos:start="99:9" pos:end="99:49"><name pos:start="99:9" pos:end="99:17">sync_mode</name> <operator pos:start="99:19" pos:end="99:20">==</operator> <name pos:start="99:22" pos:end="99:49">MIRROR_SYNC_MODE_INCREMENTAL</name></expr>)</condition> <block pos:start="99:52" pos:end="121:5">{<block_content pos:start="101:9" pos:end="119:9">

        <if_stmt pos:start="101:9" pos:end="109:9"><if pos:start="101:9" pos:end="109:9">if <condition pos:start="101:12" pos:end="101:25">(<expr pos:start="101:13" pos:end="101:24"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:24">sync_bitmap</name></expr>)</condition> <block pos:start="101:27" pos:end="109:9">{<block_content pos:start="103:13" pos:end="107:19">

            <expr_stmt pos:start="103:13" pos:end="105:58"><expr pos:start="103:13" pos:end="105:57"><call pos:start="103:13" pos:end="105:57"><name pos:start="103:13" pos:end="103:22">error_setg</name><argument_list pos:start="103:23" pos:end="105:57">(<argument pos:start="103:24" pos:end="103:27"><expr pos:start="103:24" pos:end="103:27"><name pos:start="103:24" pos:end="103:27">errp</name></expr></argument>, <argument pos:start="103:30" pos:end="105:56"><expr pos:start="103:30" pos:end="105:56"><literal type="string" pos:start="103:30" pos:end="103:68">"must provide a valid bitmap name for "</literal>

                             <literal type="string" pos:start="105:30" pos:end="105:56">"\"incremental\" sync mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:63">/* Create a new bitmap, and freeze/disable this one. */</comment>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:74">(<expr pos:start="115:13" pos:end="115:73"><call pos:start="115:13" pos:end="115:69"><name pos:start="115:13" pos:end="115:46">bdrv_dirty_bitmap_create_successor</name><argument_list pos:start="115:47" pos:end="115:69">(<argument pos:start="115:48" pos:end="115:49"><expr pos:start="115:48" pos:end="115:49"><name pos:start="115:48" pos:end="115:49">bs</name></expr></argument>, <argument pos:start="115:52" pos:end="115:62"><expr pos:start="115:52" pos:end="115:62"><name pos:start="115:52" pos:end="115:62">sync_bitmap</name></expr></argument>, <argument pos:start="115:65" pos:end="115:68"><expr pos:start="115:65" pos:end="115:68"><name pos:start="115:65" pos:end="115:68">errp</name></expr></argument>)</argument_list></call> <operator pos:start="115:71" pos:end="115:71">&lt;</operator> <literal type="number" pos:start="115:73" pos:end="115:73">0</literal></expr>)</condition> <block pos:start="115:76" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:19">

            <return pos:start="117:13" pos:end="117:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="133:5">else if <condition pos:start="121:15" pos:end="121:27">(<expr pos:start="121:16" pos:end="121:26"><name pos:start="121:16" pos:end="121:26">sync_bitmap</name></expr>)</condition> <block pos:start="121:29" pos:end="133:5">{<block_content pos:start="123:9" pos:end="131:15">

        <expr_stmt pos:start="123:9" pos:end="129:53"><expr pos:start="123:9" pos:end="129:52"><call pos:start="123:9" pos:end="129:52"><name pos:start="123:9" pos:end="123:18">error_setg</name><argument_list pos:start="123:19" pos:end="129:52">(<argument pos:start="123:20" pos:end="123:23"><expr pos:start="123:20" pos:end="123:23"><name pos:start="123:20" pos:end="123:23">errp</name></expr></argument>,

                   <argument pos:start="125:20" pos:end="127:64"><expr pos:start="125:20" pos:end="127:64"><literal type="string" pos:start="125:20" pos:end="125:63">"a sync_bitmap was provided to backup_run, "</literal>

                   <literal type="string" pos:start="127:20" pos:end="127:64">"but received an incompatible sync_mode (%s)"</literal></expr></argument>,

                   <argument pos:start="129:20" pos:end="129:51"><expr pos:start="129:20" pos:end="129:51"><name pos:start="129:20" pos:end="129:51"><name pos:start="129:20" pos:end="129:40">MirrorSyncMode_lookup</name><index pos:start="129:41" pos:end="129:51">[<expr pos:start="129:42" pos:end="129:50"><name pos:start="129:42" pos:end="129:50">sync_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:29"><expr pos:start="137:5" pos:end="137:28"><name pos:start="137:5" pos:end="137:7">len</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:28"><name pos:start="137:11" pos:end="137:24">bdrv_getlength</name><argument_list pos:start="137:25" pos:end="137:28">(<argument pos:start="137:26" pos:end="137:27"><expr pos:start="137:26" pos:end="137:27"><name pos:start="137:26" pos:end="137:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">len</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:19">

        <expr_stmt pos:start="141:9" pos:end="143:51"><expr pos:start="141:9" pos:end="143:50"><call pos:start="141:9" pos:end="143:50"><name pos:start="141:9" pos:end="141:24">error_setg_errno</name><argument_list pos:start="141:25" pos:end="143:50">(<argument pos:start="141:26" pos:end="141:29"><expr pos:start="141:26" pos:end="141:29"><name pos:start="141:26" pos:end="141:29">errp</name></expr></argument>, <argument pos:start="141:32" pos:end="141:35"><expr pos:start="141:32" pos:end="141:35"><operator pos:start="141:32" pos:end="141:32">-</operator><name pos:start="141:33" pos:end="141:35">len</name></expr></argument>, <argument pos:start="141:38" pos:end="141:68"><expr pos:start="141:38" pos:end="141:68"><literal type="string" pos:start="141:38" pos:end="141:68">"unable to get length for '%s'"</literal></expr></argument>,

                         <argument pos:start="143:26" pos:end="143:49"><expr pos:start="143:26" pos:end="143:49"><call pos:start="143:26" pos:end="143:49"><name pos:start="143:26" pos:end="143:45">bdrv_get_device_name</name><argument_list pos:start="143:46" pos:end="143:49">(<argument pos:start="143:47" pos:end="143:48"><expr pos:start="143:47" pos:end="143:48"><name pos:start="143:47" pos:end="143:48">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:19">goto <name pos:start="145:14" pos:end="145:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="153:61"><expr pos:start="151:5" pos:end="153:60"><name pos:start="151:5" pos:end="151:7">job</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="153:60"><name pos:start="151:11" pos:end="151:26">block_job_create</name><argument_list pos:start="151:27" pos:end="153:60">(<argument pos:start="151:28" pos:end="151:33"><expr pos:start="151:28" pos:end="151:33"><name pos:start="151:28" pos:end="151:33">job_id</name></expr></argument>, <argument pos:start="151:36" pos:end="151:53"><expr pos:start="151:36" pos:end="151:53"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:53">backup_job_driver</name></expr></argument>, <argument pos:start="151:56" pos:end="151:57"><expr pos:start="151:56" pos:end="151:57"><name pos:start="151:56" pos:end="151:57">bs</name></expr></argument>, <argument pos:start="151:60" pos:end="151:64"><expr pos:start="151:60" pos:end="151:64"><name pos:start="151:60" pos:end="151:64">speed</name></expr></argument>,

                           <argument pos:start="153:28" pos:end="153:41"><expr pos:start="153:28" pos:end="153:41"><name pos:start="153:28" pos:end="153:41">creation_flags</name></expr></argument>, <argument pos:start="153:44" pos:end="153:45"><expr pos:start="153:44" pos:end="153:45"><name pos:start="153:44" pos:end="153:45">cb</name></expr></argument>, <argument pos:start="153:48" pos:end="153:53"><expr pos:start="153:48" pos:end="153:53"><name pos:start="153:48" pos:end="153:53">opaque</name></expr></argument>, <argument pos:start="153:56" pos:end="153:59"><expr pos:start="153:56" pos:end="153:59"><name pos:start="153:56" pos:end="153:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:13">(<expr pos:start="155:9" pos:end="155:12"><operator pos:start="155:9" pos:end="155:9">!</operator><name pos:start="155:10" pos:end="155:12">job</name></expr>)</condition> <block pos:start="155:15" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:19">

        <goto pos:start="157:9" pos:end="157:19">goto <name pos:start="157:14" pos:end="157:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:28"><expr pos:start="163:5" pos:end="163:27"><name pos:start="163:5" pos:end="163:15"><name pos:start="163:5" pos:end="163:7">job</name><operator pos:start="163:8" pos:end="163:9">-&gt;</operator><name pos:start="163:10" pos:end="163:15">target</name></name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:27"><name pos:start="163:19" pos:end="163:25">blk_new</name><argument_list pos:start="163:26" pos:end="163:27">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:39"><expr pos:start="165:5" pos:end="165:38"><call pos:start="165:5" pos:end="165:38"><name pos:start="165:5" pos:end="165:17">blk_insert_bs</name><argument_list pos:start="165:18" pos:end="165:38">(<argument pos:start="165:19" pos:end="165:29"><expr pos:start="165:19" pos:end="165:29"><name pos:start="165:19" pos:end="165:29"><name pos:start="165:19" pos:end="165:21">job</name><operator pos:start="165:22" pos:end="165:23">-&gt;</operator><name pos:start="165:24" pos:end="165:29">target</name></name></expr></argument>, <argument pos:start="165:32" pos:end="165:37"><expr pos:start="165:32" pos:end="165:37"><name pos:start="165:32" pos:end="165:37">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:43"><expr pos:start="169:5" pos:end="169:42"><name pos:start="169:5" pos:end="169:24"><name pos:start="169:5" pos:end="169:7">job</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:24">on_source_error</name></name> <operator pos:start="169:26" pos:end="169:26">=</operator> <name pos:start="169:28" pos:end="169:42">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:43"><expr pos:start="171:5" pos:end="171:42"><name pos:start="171:5" pos:end="171:24"><name pos:start="171:5" pos:end="171:7">job</name><operator pos:start="171:8" pos:end="171:9">-&gt;</operator><name pos:start="171:10" pos:end="171:24">on_target_error</name></name> <operator pos:start="171:26" pos:end="171:26">=</operator> <name pos:start="171:28" pos:end="171:42">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:31"><expr pos:start="173:5" pos:end="173:30"><name pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:7">job</name><operator pos:start="173:8" pos:end="173:9">-&gt;</operator><name pos:start="173:10" pos:end="173:18">sync_mode</name></name> <operator pos:start="173:20" pos:end="173:20">=</operator> <name pos:start="173:22" pos:end="173:30">sync_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:42"><expr pos:start="175:5" pos:end="177:41"><name pos:start="175:5" pos:end="175:20"><name pos:start="175:5" pos:end="175:7">job</name><operator pos:start="175:8" pos:end="175:9">-&gt;</operator><name pos:start="175:10" pos:end="175:20">sync_bitmap</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <ternary pos:start="175:24" pos:end="177:41"><condition pos:start="175:24" pos:end="175:66"><expr pos:start="175:24" pos:end="175:64"><name pos:start="175:24" pos:end="175:32">sync_mode</name> <operator pos:start="175:34" pos:end="175:35">==</operator> <name pos:start="175:37" pos:end="175:64">MIRROR_SYNC_MODE_INCREMENTAL</name></expr> ?</condition><then pos:start="177:24" pos:end="177:34">

                       <expr pos:start="177:24" pos:end="177:34"><name pos:start="177:24" pos:end="177:34">sync_bitmap</name></expr> </then><else pos:start="177:36" pos:end="177:41">: <expr pos:start="177:38" pos:end="177:41"><name pos:start="177:38" pos:end="177:41">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:29"><expr pos:start="179:5" pos:end="179:28"><name pos:start="179:5" pos:end="179:17"><name pos:start="179:5" pos:end="179:7">job</name><operator pos:start="179:8" pos:end="179:9">-&gt;</operator><name pos:start="179:10" pos:end="179:17">compress</name></name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:28">compress</name></expr>;</expr_stmt>



    <comment type="block" pos:start="183:5" pos:end="187:68">/* If there is no backing file on the target, we cannot rely on COW if our

     * backup cluster size is smaller than the target cluster size. Even for

     * targets with a backing file, try to avoid COW if possible. */</comment>

    <expr_stmt pos:start="189:5" pos:end="189:38"><expr pos:start="189:5" pos:end="189:37"><name pos:start="189:5" pos:end="189:7">ret</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="189:37"><name pos:start="189:11" pos:end="189:23">bdrv_get_info</name><argument_list pos:start="189:24" pos:end="189:37">(<argument pos:start="189:25" pos:end="189:30"><expr pos:start="189:25" pos:end="189:30"><name pos:start="189:25" pos:end="189:30">target</name></expr></argument>, <argument pos:start="189:33" pos:end="189:36"><expr pos:start="189:33" pos:end="189:36"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:36">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="191:5" pos:end="215:5"><if pos:start="191:5" pos:end="205:5">if <condition pos:start="191:8" pos:end="191:36">(<expr pos:start="191:9" pos:end="191:35"><name pos:start="191:9" pos:end="191:11">ret</name> <operator pos:start="191:13" pos:end="191:13">&lt;</operator> <literal type="number" pos:start="191:15" pos:end="191:15">0</literal> <operator pos:start="191:17" pos:end="191:18">&amp;&amp;</operator> <operator pos:start="191:20" pos:end="191:20">!</operator><name pos:start="191:21" pos:end="191:35"><name pos:start="191:21" pos:end="191:26">target</name><operator pos:start="191:27" pos:end="191:28">-&gt;</operator><name pos:start="191:29" pos:end="191:35">backing</name></name></expr>)</condition> <block pos:start="191:38" pos:end="205:5">{<block_content pos:start="193:9" pos:end="203:19">

        <expr_stmt pos:start="193:9" pos:end="197:41"><expr pos:start="193:9" pos:end="197:40"><call pos:start="193:9" pos:end="197:40"><name pos:start="193:9" pos:end="193:24">error_setg_errno</name><argument_list pos:start="193:25" pos:end="197:40">(<argument pos:start="193:26" pos:end="193:29"><expr pos:start="193:26" pos:end="193:29"><name pos:start="193:26" pos:end="193:29">errp</name></expr></argument>, <argument pos:start="193:32" pos:end="193:35"><expr pos:start="193:32" pos:end="193:35"><operator pos:start="193:32" pos:end="193:32">-</operator><name pos:start="193:33" pos:end="193:35">ret</name></expr></argument>,

            <argument pos:start="195:13" pos:end="197:39"><expr pos:start="195:13" pos:end="197:39"><literal type="string" pos:start="195:13" pos:end="195:71">"Couldn't determine the cluster size of the target image, "</literal>

            <literal type="string" pos:start="197:13" pos:end="197:39">"which has no backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="201:79"><expr pos:start="199:9" pos:end="201:78"><call pos:start="199:9" pos:end="201:78"><name pos:start="199:9" pos:end="199:25">error_append_hint</name><argument_list pos:start="199:26" pos:end="201:78">(<argument pos:start="199:27" pos:end="199:30"><expr pos:start="199:27" pos:end="199:30"><name pos:start="199:27" pos:end="199:30">errp</name></expr></argument>,

            <argument pos:start="201:13" pos:end="201:77"><expr pos:start="201:13" pos:end="201:77"><literal type="string" pos:start="201:13" pos:end="201:77">"Aborting, since this may create an unusable destination image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="203:9" pos:end="203:19">goto <name pos:start="203:14" pos:end="203:18">error</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="211:5">else if <condition pos:start="205:15" pos:end="205:42">(<expr pos:start="205:16" pos:end="205:41"><name pos:start="205:16" pos:end="205:18">ret</name> <operator pos:start="205:20" pos:end="205:20">&lt;</operator> <literal type="number" pos:start="205:22" pos:end="205:22">0</literal> <operator pos:start="205:24" pos:end="205:25">&amp;&amp;</operator> <name pos:start="205:27" pos:end="205:41"><name pos:start="205:27" pos:end="205:32">target</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:41">backing</name></name></expr>)</condition> <block pos:start="205:44" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:56">

        <comment type="block" pos:start="207:9" pos:end="207:46">/* Not fatal; just trudge on ahead. */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:56"><expr pos:start="209:9" pos:end="209:55"><name pos:start="209:9" pos:end="209:25"><name pos:start="209:9" pos:end="209:11">job</name><operator pos:start="209:12" pos:end="209:13">-&gt;</operator><name pos:start="209:14" pos:end="209:25">cluster_size</name></name> <operator pos:start="209:27" pos:end="209:27">=</operator> <name pos:start="209:29" pos:end="209:55">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="215:5">else <block pos:start="211:12" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:79">

        <expr_stmt pos:start="213:9" pos:end="213:79"><expr pos:start="213:9" pos:end="213:78"><name pos:start="213:9" pos:end="213:25"><name pos:start="213:9" pos:end="213:11">job</name><operator pos:start="213:12" pos:end="213:13">-&gt;</operator><name pos:start="213:14" pos:end="213:25">cluster_size</name></name> <operator pos:start="213:27" pos:end="213:27">=</operator> <call pos:start="213:29" pos:end="213:78"><name pos:start="213:29" pos:end="213:31">MAX</name><argument_list pos:start="213:32" pos:end="213:78">(<argument pos:start="213:33" pos:end="213:59"><expr pos:start="213:33" pos:end="213:59"><name pos:start="213:33" pos:end="213:59">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr></argument>, <argument pos:start="213:62" pos:end="213:77"><expr pos:start="213:62" pos:end="213:77"><name pos:start="213:62" pos:end="213:77"><name pos:start="213:62" pos:end="213:64">bdi</name><operator pos:start="213:65" pos:end="213:65">.</operator><name pos:start="213:66" pos:end="213:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:45"><expr pos:start="219:5" pos:end="219:44"><call pos:start="219:5" pos:end="219:44"><name pos:start="219:5" pos:end="219:22">block_job_add_bdrv</name><argument_list pos:start="219:23" pos:end="219:44">(<argument pos:start="219:24" pos:end="219:35"><expr pos:start="219:24" pos:end="219:35"><operator pos:start="219:24" pos:end="219:24">&amp;</operator><name pos:start="219:25" pos:end="219:35"><name pos:start="219:25" pos:end="219:27">job</name><operator pos:start="219:28" pos:end="219:29">-&gt;</operator><name pos:start="219:30" pos:end="219:35">common</name></name></expr></argument>, <argument pos:start="219:38" pos:end="219:43"><expr pos:start="219:38" pos:end="219:43"><name pos:start="219:38" pos:end="219:43">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:26"><expr pos:start="221:5" pos:end="221:25"><name pos:start="221:5" pos:end="221:19"><name pos:start="221:5" pos:end="221:7">job</name><operator pos:start="221:8" pos:end="221:9">-&gt;</operator><name pos:start="221:10" pos:end="221:15">common</name><operator pos:start="221:16" pos:end="221:16">.</operator><name pos:start="221:17" pos:end="221:19">len</name></name> <operator pos:start="221:21" pos:end="221:21">=</operator> <name pos:start="221:23" pos:end="221:25">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:60"><expr pos:start="223:5" pos:end="223:59"><name pos:start="223:5" pos:end="223:18"><name pos:start="223:5" pos:end="223:7">job</name><operator pos:start="223:8" pos:end="223:9">-&gt;</operator><name pos:start="223:10" pos:end="223:15">common</name><operator pos:start="223:16" pos:end="223:16">.</operator><name pos:start="223:17" pos:end="223:18">co</name></name> <operator pos:start="223:20" pos:end="223:20">=</operator> <call pos:start="223:22" pos:end="223:59"><name pos:start="223:22" pos:end="223:42">qemu_coroutine_create</name><argument_list pos:start="223:43" pos:end="223:59">(<argument pos:start="223:44" pos:end="223:53"><expr pos:start="223:44" pos:end="223:53"><name pos:start="223:44" pos:end="223:53">backup_run</name></expr></argument>, <argument pos:start="223:56" pos:end="223:58"><expr pos:start="223:56" pos:end="223:58"><name pos:start="223:56" pos:end="223:58">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:45"><expr pos:start="225:5" pos:end="225:44"><call pos:start="225:5" pos:end="225:44"><name pos:start="225:5" pos:end="225:25">block_job_txn_add_job</name><argument_list pos:start="225:26" pos:end="225:44">(<argument pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><name pos:start="225:27" pos:end="225:29">txn</name></expr></argument>, <argument pos:start="225:32" pos:end="225:43"><expr pos:start="225:32" pos:end="225:43"><operator pos:start="225:32" pos:end="225:32">&amp;</operator><name pos:start="225:33" pos:end="225:43"><name pos:start="225:33" pos:end="225:35">job</name><operator pos:start="225:36" pos:end="225:37">-&gt;</operator><name pos:start="225:38" pos:end="225:43">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:41"><expr pos:start="227:5" pos:end="227:40"><call pos:start="227:5" pos:end="227:40"><name pos:start="227:5" pos:end="227:24">qemu_coroutine_enter</name><argument_list pos:start="227:25" pos:end="227:40">(<argument pos:start="227:26" pos:end="227:39"><expr pos:start="227:26" pos:end="227:39"><name pos:start="227:26" pos:end="227:39"><name pos:start="227:26" pos:end="227:28">job</name><operator pos:start="227:29" pos:end="227:30">-&gt;</operator><name pos:start="227:31" pos:end="227:36">common</name><operator pos:start="227:37" pos:end="227:37">.</operator><name pos:start="227:38" pos:end="227:39">co</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="229:5" pos:end="229:11">return;</return>



 <label pos:start="233:2" pos:end="233:7"><name pos:start="233:2" pos:end="233:6">error</name>:</label>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:20">(<expr pos:start="235:9" pos:end="235:19"><name pos:start="235:9" pos:end="235:19">sync_bitmap</name></expr>)</condition> <block pos:start="235:22" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:57">

        <expr_stmt pos:start="237:9" pos:end="237:57"><expr pos:start="237:9" pos:end="237:56"><call pos:start="237:9" pos:end="237:56"><name pos:start="237:9" pos:end="237:33">bdrv_reclaim_dirty_bitmap</name><argument_list pos:start="237:34" pos:end="237:56">(<argument pos:start="237:35" pos:end="237:36"><expr pos:start="237:35" pos:end="237:36"><name pos:start="237:35" pos:end="237:36">bs</name></expr></argument>, <argument pos:start="237:39" pos:end="237:49"><expr pos:start="237:39" pos:end="237:49"><name pos:start="237:39" pos:end="237:49">sync_bitmap</name></expr></argument>, <argument pos:start="237:52" pos:end="237:55"><expr pos:start="237:52" pos:end="237:55"><name pos:start="237:52" pos:end="237:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="247:5"><if pos:start="241:5" pos:end="247:5">if <condition pos:start="241:8" pos:end="241:12">(<expr pos:start="241:9" pos:end="241:11"><name pos:start="241:9" pos:end="241:11">job</name></expr>)</condition> <block pos:start="241:14" pos:end="247:5">{<block_content pos:start="243:9" pos:end="245:38">

        <expr_stmt pos:start="243:9" pos:end="243:31"><expr pos:start="243:9" pos:end="243:30"><call pos:start="243:9" pos:end="243:30"><name pos:start="243:9" pos:end="243:17">blk_unref</name><argument_list pos:start="243:18" pos:end="243:30">(<argument pos:start="243:19" pos:end="243:29"><expr pos:start="243:19" pos:end="243:29"><name pos:start="243:19" pos:end="243:29"><name pos:start="243:19" pos:end="243:21">job</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:29">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:38"><expr pos:start="245:9" pos:end="245:37"><call pos:start="245:9" pos:end="245:37"><name pos:start="245:9" pos:end="245:23">block_job_unref</name><argument_list pos:start="245:24" pos:end="245:37">(<argument pos:start="245:25" pos:end="245:36"><expr pos:start="245:25" pos:end="245:36"><operator pos:start="245:25" pos:end="245:25">&amp;</operator><name pos:start="245:26" pos:end="245:36"><name pos:start="245:26" pos:end="245:28">job</name><operator pos:start="245:29" pos:end="245:30">-&gt;</operator><name pos:start="245:31" pos:end="245:36">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
