<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24799.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_dds1</name><parameter_list pos:start="1:23" pos:end="1:81">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:37">GetByteContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">gb</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">frame</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">width</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:80"><decl pos:start="1:71" pos:end="1:80"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:80">height</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:30">frame_start</name> <init pos:start="5:32" pos:end="5:38">= <expr pos:start="5:34" pos:end="5:38"><name pos:start="5:34" pos:end="5:38">frame</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">frame_end</name>   <init pos:start="7:32" pos:end="7:55">= <expr pos:start="7:34" pos:end="7:55"><name pos:start="7:34" pos:end="7:38">frame</name> <operator pos:start="7:40" pos:end="7:40">+</operator> <name pos:start="7:42" pos:end="7:46">width</name> <operator pos:start="7:48" pos:end="7:48">*</operator> <name pos:start="7:50" pos:end="7:55">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">mask</name> <init pos:start="9:14" pos:end="9:22">= <expr pos:start="9:16" pos:end="9:22"><literal type="number" pos:start="9:16" pos:end="9:22">0x10000</literal></expr></init></decl>, <decl pos:start="9:25" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:30">bitbuf</name> <init pos:start="9:32" pos:end="9:34">= <expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">v</name></decl>, <decl pos:start="11:15" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:20">offset</name></decl>, <decl pos:start="11:23" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:23" pos:end="11:27">count</name></decl>, <decl pos:start="11:30" pos:end="11:37"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:30" pos:end="11:37">segments</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:12">segments</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <call pos:start="15:16" pos:end="15:39"><name pos:start="15:16" pos:end="15:35">bytestream2_get_le16</name><argument_list pos:start="15:36" pos:end="15:39">(<argument pos:start="15:37" pos:end="15:38"><expr pos:start="15:37" pos:end="15:38"><name pos:start="15:37" pos:end="15:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="89:5">while <condition pos:start="17:11" pos:end="17:22">(<expr pos:start="17:12" pos:end="17:21"><name pos:start="17:12" pos:end="17:19">segments</name><operator pos:start="17:20" pos:end="17:21">--</operator></expr>)</condition> <block pos:start="17:24" pos:end="89:5">{<block_content pos:start="19:9" pos:end="87:19">

        <if_stmt pos:start="19:9" pos:end="21:39"><if pos:start="19:9" pos:end="21:39">if <condition pos:start="19:12" pos:end="19:47">(<expr pos:start="19:13" pos:end="19:46"><call pos:start="19:13" pos:end="19:42"><name pos:start="19:13" pos:end="19:38">bytestream2_get_bytes_left</name><argument_list pos:start="19:39" pos:end="19:42">(<argument pos:start="19:40" pos:end="19:41"><expr pos:start="19:40" pos:end="19:41"><name pos:start="19:40" pos:end="19:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="19:44" pos:end="19:44">&lt;</operator> <literal type="number" pos:start="19:46" pos:end="19:46">2</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:39"><block_content pos:start="21:13" pos:end="21:39">

            <return pos:start="21:13" pos:end="21:39">return <expr pos:start="21:20" pos:end="21:38"><name pos:start="21:20" pos:end="21:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:28">(<expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:16">mask</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <literal type="number" pos:start="23:21" pos:end="23:27">0x10000</literal></expr>)</condition> <block pos:start="23:30" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:47"><expr pos:start="25:13" pos:end="25:46"><name pos:start="25:13" pos:end="25:18">bitbuf</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:46"><name pos:start="25:22" pos:end="25:42">bytestream2_get_le16u</name><argument_list pos:start="25:43" pos:end="25:46">(<argument pos:start="25:44" pos:end="25:45"><expr pos:start="25:44" pos:end="25:45"><name pos:start="25:44" pos:end="25:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:21"><expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:16">mask</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="33:9" pos:end="85:9"><if pos:start="33:9" pos:end="57:9">if <condition pos:start="33:12" pos:end="33:26">(<expr pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:18">bitbuf</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <name pos:start="33:22" pos:end="33:25">mask</name></expr>)</condition> <block pos:start="33:28" pos:end="57:9">{<block_content pos:start="35:13" pos:end="55:13">

            <expr_stmt pos:start="35:13" pos:end="35:41"><expr pos:start="35:13" pos:end="35:40"><name pos:start="35:13" pos:end="35:13">v</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <call pos:start="35:17" pos:end="35:40"><name pos:start="35:17" pos:end="35:36">bytestream2_get_le16</name><argument_list pos:start="35:37" pos:end="35:40">(<argument pos:start="35:38" pos:end="35:39"><expr pos:start="35:38" pos:end="35:39"><name pos:start="35:38" pos:end="35:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:18">offset</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <operator pos:start="37:22" pos:end="37:22">(</operator><name pos:start="37:23" pos:end="37:23">v</name> <operator pos:start="37:25" pos:end="37:25">&amp;</operator> <literal type="number" pos:start="37:27" pos:end="37:32">0x1FFF</literal><operator pos:start="37:33" pos:end="37:33">)</operator> <operator pos:start="37:35" pos:end="37:36">&lt;&lt;</operator> <literal type="number" pos:start="37:38" pos:end="37:38">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:41"><expr pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:17">count</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><operator pos:start="39:22" pos:end="39:22">(</operator><name pos:start="39:23" pos:end="39:23">v</name> <operator pos:start="39:25" pos:end="39:26">&gt;&gt;</operator> <literal type="number" pos:start="39:28" pos:end="39:29">13</literal><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:32">+</operator> <literal type="number" pos:start="39:34" pos:end="39:34">2</literal><operator pos:start="39:35" pos:end="39:35">)</operator> <operator pos:start="39:37" pos:end="39:38">&lt;&lt;</operator> <literal type="number" pos:start="39:40" pos:end="39:40">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="43:43"><if pos:start="41:13" pos:end="43:43">if <condition pos:start="41:16" pos:end="41:84">(<expr pos:start="41:17" pos:end="41:83"><name pos:start="41:17" pos:end="41:21">frame</name> <operator pos:start="41:23" pos:end="41:23">-</operator> <name pos:start="41:25" pos:end="41:35">frame_start</name> <operator pos:start="41:37" pos:end="41:37">&lt;</operator> <name pos:start="41:39" pos:end="41:44">offset</name> <operator pos:start="41:46" pos:end="41:47">||</operator> <name pos:start="41:49" pos:end="41:57">frame_end</name> <operator pos:start="41:59" pos:end="41:59">-</operator> <name pos:start="41:61" pos:end="41:65">frame</name> <operator pos:start="41:67" pos:end="41:67">&lt;</operator> <name pos:start="41:69" pos:end="41:73">count</name><operator pos:start="41:74" pos:end="41:74">*</operator><literal type="number" pos:start="41:75" pos:end="41:77">2</literal> <operator pos:start="41:77" pos:end="41:77">+</operator> <name pos:start="41:79" pos:end="41:83">width</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:43"><block_content pos:start="43:17" pos:end="43:43">

                <return pos:start="43:17" pos:end="43:43">return <expr pos:start="43:24" pos:end="43:42"><name pos:start="43:24" pos:end="43:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <for pos:start="45:13" pos:end="55:13">for <control pos:start="45:17" pos:end="45:39">(<init pos:start="45:18" pos:end="45:23"><expr pos:start="45:18" pos:end="45:22"><name pos:start="45:18" pos:end="45:18">i</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>;</init> <condition pos:start="45:25" pos:end="45:34"><expr pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:25">i</name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <name pos:start="45:29" pos:end="45:33">count</name></expr>;</condition> <incr pos:start="45:36" pos:end="45:38"><expr pos:start="45:36" pos:end="45:38"><name pos:start="45:36" pos:end="45:36">i</name><operator pos:start="45:37" pos:end="45:38">++</operator></expr></incr>)</control> <block pos:start="45:41" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:27">

                <expr_stmt pos:start="47:17" pos:end="49:65"><expr pos:start="47:17" pos:end="49:64"><name pos:start="47:17" pos:end="47:24"><name pos:start="47:17" pos:end="47:21">frame</name><index pos:start="47:22" pos:end="47:24">[<expr pos:start="47:23" pos:end="47:23"><literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>]</index></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <name pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:32">frame</name><index pos:start="47:33" pos:end="47:35">[<expr pos:start="47:34" pos:end="47:34"><literal type="number" pos:start="47:34" pos:end="47:34">1</literal></expr>]</index></name> <operator pos:start="47:37" pos:end="47:37">=</operator>

                <name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:21">frame</name><index pos:start="49:22" pos:end="49:28">[<expr pos:start="49:23" pos:end="49:27"><name pos:start="49:23" pos:end="49:27">width</name></expr>]</index></name> <operator pos:start="49:30" pos:end="49:30">=</operator> <name pos:start="49:32" pos:end="49:47"><name pos:start="49:32" pos:end="49:36">frame</name><index pos:start="49:37" pos:end="49:47">[<expr pos:start="49:38" pos:end="49:46"><name pos:start="49:38" pos:end="49:42">width</name> <operator pos:start="49:44" pos:end="49:44">+</operator> <literal type="number" pos:start="49:46" pos:end="49:46">1</literal></expr>]</index></name> <operator pos:start="49:49" pos:end="49:49">=</operator> <name pos:start="49:51" pos:end="49:64"><name pos:start="49:51" pos:end="49:55">frame</name><index pos:start="49:56" pos:end="49:64">[<expr pos:start="49:57" pos:end="49:63"><operator pos:start="49:57" pos:end="49:57">-</operator><name pos:start="49:58" pos:end="49:63">offset</name></expr>]</index></name></expr>;</expr_stmt>



                <expr_stmt pos:start="53:17" pos:end="53:27"><expr pos:start="53:17" pos:end="53:26"><name pos:start="53:17" pos:end="53:21">frame</name> <operator pos:start="53:23" pos:end="53:24">+=</operator> <literal type="number" pos:start="53:26" pos:end="53:26">2</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="67:9">else if <condition pos:start="57:19" pos:end="57:40">(<expr pos:start="57:20" pos:end="57:39"><name pos:start="57:20" pos:end="57:25">bitbuf</name> <operator pos:start="57:27" pos:end="57:27">&amp;</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><name pos:start="57:30" pos:end="57:33">mask</name> <operator pos:start="57:35" pos:end="57:36">&lt;&lt;</operator> <literal type="number" pos:start="57:38" pos:end="57:38">1</literal><operator pos:start="57:39" pos:end="57:39">)</operator></expr>)</condition> <block pos:start="57:42" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:23">

            <expr_stmt pos:start="59:13" pos:end="59:43"><expr pos:start="59:13" pos:end="59:42"><name pos:start="59:13" pos:end="59:13">v</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:36">bytestream2_get_le16</name><argument_list pos:start="59:37" pos:end="59:40">(<argument pos:start="59:38" pos:end="59:39"><expr pos:start="59:38" pos:end="59:39"><name pos:start="59:38" pos:end="59:39">gb</name></expr></argument>)</argument_list></call><operator pos:start="59:41" pos:end="59:41">*</operator><literal type="number" pos:start="59:42" pos:end="59:42">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="63:43"><if pos:start="61:13" pos:end="63:43">if <condition pos:start="61:16" pos:end="61:38">(<expr pos:start="61:17" pos:end="61:37"><name pos:start="61:17" pos:end="61:21">frame</name> <operator pos:start="61:23" pos:end="61:23">-</operator> <name pos:start="61:25" pos:end="61:33">frame_end</name> <operator pos:start="61:35" pos:end="61:35">&lt;</operator> <name pos:start="61:37" pos:end="61:37">v</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:43"><block_content pos:start="63:17" pos:end="63:43">

                <return pos:start="63:17" pos:end="63:43">return <expr pos:start="63:24" pos:end="63:42"><name pos:start="63:24" pos:end="63:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:23"><expr pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:17">frame</name> <operator pos:start="65:19" pos:end="65:20">+=</operator> <name pos:start="65:22" pos:end="65:22">v</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="85:9">else <block pos:start="67:16" pos:end="85:9">{<block_content pos:start="69:13" pos:end="83:23">

            <if_stmt pos:start="69:13" pos:end="71:43"><if pos:start="69:13" pos:end="71:43">if <condition pos:start="69:16" pos:end="69:46">(<expr pos:start="69:17" pos:end="69:45"><name pos:start="69:17" pos:end="69:25">frame_end</name> <operator pos:start="69:27" pos:end="69:27">-</operator> <name pos:start="69:29" pos:end="69:33">frame</name> <operator pos:start="69:35" pos:end="69:35">&lt;</operator> <name pos:start="69:37" pos:end="69:41">width</name> <operator pos:start="69:43" pos:end="69:43">+</operator> <literal type="number" pos:start="69:45" pos:end="69:45">3</literal></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:43"><block_content pos:start="71:17" pos:end="71:43">

                <return pos:start="71:17" pos:end="71:43">return <expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:72"><expr pos:start="73:13" pos:end="75:71"><name pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:17">frame</name><index pos:start="73:18" pos:end="73:20">[<expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">0</literal></expr>]</index></name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:31"><name pos:start="73:24" pos:end="73:28">frame</name><index pos:start="73:29" pos:end="73:31">[<expr pos:start="73:30" pos:end="73:30"><literal type="number" pos:start="73:30" pos:end="73:30">1</literal></expr>]</index></name> <operator pos:start="73:33" pos:end="73:33">=</operator>

            <name pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:17">frame</name><index pos:start="75:18" pos:end="75:24">[<expr pos:start="75:19" pos:end="75:23"><name pos:start="75:19" pos:end="75:23">width</name></expr>]</index></name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:43"><name pos:start="75:28" pos:end="75:32">frame</name><index pos:start="75:33" pos:end="75:43">[<expr pos:start="75:34" pos:end="75:42"><name pos:start="75:34" pos:end="75:38">width</name> <operator pos:start="75:40" pos:end="75:40">+</operator> <literal type="number" pos:start="75:42" pos:end="75:42">1</literal></expr>]</index></name> <operator pos:start="75:45" pos:end="75:45">=</operator>  <call pos:start="75:48" pos:end="75:71"><name pos:start="75:48" pos:end="75:67">bytestream2_get_byte</name><argument_list pos:start="75:68" pos:end="75:71">(<argument pos:start="75:69" pos:end="75:70"><expr pos:start="75:69" pos:end="75:70"><name pos:start="75:69" pos:end="75:70">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:23"><expr pos:start="77:13" pos:end="77:22"><name pos:start="77:13" pos:end="77:17">frame</name> <operator pos:start="77:19" pos:end="77:20">+=</operator> <literal type="number" pos:start="77:22" pos:end="77:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:72"><expr pos:start="79:13" pos:end="81:71"><name pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:17">frame</name><index pos:start="79:18" pos:end="79:20">[<expr pos:start="79:19" pos:end="79:19"><literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>]</index></name> <operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:31"><name pos:start="79:24" pos:end="79:28">frame</name><index pos:start="79:29" pos:end="79:31">[<expr pos:start="79:30" pos:end="79:30"><literal type="number" pos:start="79:30" pos:end="79:30">1</literal></expr>]</index></name> <operator pos:start="79:33" pos:end="79:33">=</operator>

            <name pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:17">frame</name><index pos:start="81:18" pos:end="81:24">[<expr pos:start="81:19" pos:end="81:23"><name pos:start="81:19" pos:end="81:23">width</name></expr>]</index></name> <operator pos:start="81:26" pos:end="81:26">=</operator> <name pos:start="81:28" pos:end="81:43"><name pos:start="81:28" pos:end="81:32">frame</name><index pos:start="81:33" pos:end="81:43">[<expr pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:38">width</name> <operator pos:start="81:40" pos:end="81:40">+</operator> <literal type="number" pos:start="81:42" pos:end="81:42">1</literal></expr>]</index></name> <operator pos:start="81:45" pos:end="81:45">=</operator>  <call pos:start="81:48" pos:end="81:71"><name pos:start="81:48" pos:end="81:67">bytestream2_get_byte</name><argument_list pos:start="81:68" pos:end="81:71">(<argument pos:start="81:69" pos:end="81:70"><expr pos:start="81:69" pos:end="81:70"><name pos:start="81:69" pos:end="81:70">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:23"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:17">frame</name> <operator pos:start="83:19" pos:end="83:20">+=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:19"><expr pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:12">mask</name> <operator pos:start="87:14" pos:end="87:16">&lt;&lt;=</operator> <literal type="number" pos:start="87:18" pos:end="87:18">2</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
