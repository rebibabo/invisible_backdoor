<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8934.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:32">arm_cpu_do_unaligned_access</name><parameter_list pos:start="1:33" pos:end="3:64">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:41">CPUState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">cs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:52">vaddr</name></type> <name pos:start="1:54" pos:end="1:58">vaddr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:72">is_write</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:44"><decl pos:start="3:34" pos:end="3:44"><type pos:start="3:34" pos:end="3:44"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:44">is_user</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:63"><decl pos:start="3:47" pos:end="3:63"><type pos:start="3:47" pos:end="3:63"><name pos:start="3:47" pos:end="3:55">uintptr_t</name></type> <name pos:start="3:57" pos:end="3:63">retaddr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:31">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:29">= <expr pos:start="7:19" pos:end="7:29"><call pos:start="7:19" pos:end="7:29"><name pos:start="7:19" pos:end="7:25">ARM_CPU</name><argument_list pos:start="7:26" pos:end="7:29">(<argument pos:start="7:27" pos:end="7:28"><expr pos:start="7:27" pos:end="7:28"><name pos:start="7:27" pos:end="7:28">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUARMState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">target_el</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:16">same_el</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">retaddr</name></expr>)</condition> <block pos:start="17:18" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:39">

        <comment type="block" pos:start="19:9" pos:end="19:42">/* now we have a real cpu fault */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><call pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:25">cpu_restore_state</name><argument_list pos:start="21:26" pos:end="21:38">(<argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><name pos:start="21:27" pos:end="21:28">cs</name></expr></argument>, <argument pos:start="21:31" pos:end="21:37"><expr pos:start="21:31" pos:end="21:37"><name pos:start="21:31" pos:end="21:37">retaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:13">target_el</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:40"><name pos:start="27:17" pos:end="27:35">exception_target_el</name><argument_list pos:start="27:36" pos:end="27:40">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:49"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:11">same_el</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">(</operator><call pos:start="29:16" pos:end="29:34"><name pos:start="29:16" pos:end="29:29">arm_current_el</name><argument_list pos:start="29:30" pos:end="29:34">(<argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">env</name></expr></argument>)</argument_list></call> <operator pos:start="29:36" pos:end="29:37">==</operator> <name pos:start="29:39" pos:end="29:47">target_el</name><operator pos:start="29:48" pos:end="29:48">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:18">exception</name><operator pos:start="33:19" pos:end="33:19">.</operator><name pos:start="33:20" pos:end="33:27">vaddress</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <name pos:start="33:31" pos:end="33:35">vaddr</name></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="41:7">/* the DFSR for an alignment fault depends on whether we're using

     * the LPAE long descriptor format, or the short descriptor format

     */</comment>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:69">(<expr pos:start="43:9" pos:end="43:68"><call pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:36">arm_regime_using_lpae_format</name><argument_list pos:start="43:37" pos:end="43:68">(<argument pos:start="43:38" pos:end="43:40"><expr pos:start="43:38" pos:end="43:40"><name pos:start="43:38" pos:end="43:40">env</name></expr></argument>, <argument pos:start="43:43" pos:end="43:67"><expr pos:start="43:43" pos:end="43:67"><call pos:start="43:43" pos:end="43:67"><name pos:start="43:43" pos:end="43:55">cpu_mmu_index</name><argument_list pos:start="43:56" pos:end="43:67">(<argument pos:start="43:57" pos:end="43:59"><expr pos:start="43:57" pos:end="43:59"><name pos:start="43:57" pos:end="43:59">env</name></expr></argument>, <argument pos:start="43:62" pos:end="43:66"><expr pos:start="43:62" pos:end="43:66"><name pos:start="43:62" pos:end="43:66">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:71" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:34">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:11">env</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:22">exception</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:26">fsr</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <literal type="number" pos:start="45:30" pos:end="45:33">0x21</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:33">

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:22">exception</name><operator pos:start="49:23" pos:end="49:23">.</operator><name pos:start="49:24" pos:end="49:26">fsr</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <literal type="number" pos:start="49:30" pos:end="49:32">0x1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:58">(<expr pos:start="55:9" pos:end="55:57"><name pos:start="55:9" pos:end="55:16">is_write</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <literal type="number" pos:start="55:21" pos:end="55:21">1</literal> <operator pos:start="55:23" pos:end="55:24">&amp;&amp;</operator> <call pos:start="55:26" pos:end="55:57"><name pos:start="55:26" pos:end="55:36">arm_feature</name><argument_list pos:start="55:37" pos:end="55:57">(<argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">env</name></expr></argument>, <argument pos:start="55:43" pos:end="55:56"><expr pos:start="55:43" pos:end="55:56"><name pos:start="55:43" pos:end="55:56">ARM_FEATURE_V6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:60" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:40">

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:11">env</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:22">exception</name><operator pos:start="57:23" pos:end="57:23">.</operator><name pos:start="57:24" pos:end="57:26">fsr</name></name> <operator pos:start="57:28" pos:end="57:29">|=</operator> <operator pos:start="57:31" pos:end="57:31">(</operator><literal type="number" pos:start="57:32" pos:end="57:32">1</literal> <operator pos:start="57:34" pos:end="57:35">&lt;&lt;</operator> <literal type="number" pos:start="57:37" pos:end="57:38">11</literal><operator pos:start="57:39" pos:end="57:39">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="67:31"><expr pos:start="63:5" pos:end="67:30"><call pos:start="63:5" pos:end="67:30"><name pos:start="63:5" pos:end="63:19">raise_exception</name><argument_list pos:start="63:20" pos:end="67:30">(<argument pos:start="63:21" pos:end="63:23"><expr pos:start="63:21" pos:end="63:23"><name pos:start="63:21" pos:end="63:23">env</name></expr></argument>, <argument pos:start="63:26" pos:end="63:40"><expr pos:start="63:26" pos:end="63:40"><name pos:start="63:26" pos:end="63:40">EXCP_DATA_ABORT</name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:73"><expr pos:start="65:21" pos:end="65:73"><call pos:start="65:21" pos:end="65:73"><name pos:start="65:21" pos:end="65:34">syn_data_abort</name><argument_list pos:start="65:35" pos:end="65:73">(<argument pos:start="65:36" pos:end="65:42"><expr pos:start="65:36" pos:end="65:42"><name pos:start="65:36" pos:end="65:42">same_el</name></expr></argument>, <argument pos:start="65:45" pos:end="65:45"><expr pos:start="65:45" pos:end="65:45"><literal type="number" pos:start="65:45" pos:end="65:45">0</literal></expr></argument>, <argument pos:start="65:48" pos:end="65:48"><expr pos:start="65:48" pos:end="65:48"><literal type="number" pos:start="65:48" pos:end="65:48">0</literal></expr></argument>, <argument pos:start="65:51" pos:end="65:51"><expr pos:start="65:51" pos:end="65:51"><literal type="number" pos:start="65:51" pos:end="65:51">0</literal></expr></argument>, <argument pos:start="65:54" pos:end="65:66"><expr pos:start="65:54" pos:end="65:66"><name pos:start="65:54" pos:end="65:61">is_write</name> <operator pos:start="65:63" pos:end="65:64">==</operator> <literal type="number" pos:start="65:66" pos:end="65:66">1</literal></expr></argument>, <argument pos:start="65:69" pos:end="65:72"><expr pos:start="65:69" pos:end="65:72"><literal type="number" pos:start="65:69" pos:end="65:72">0x21</literal></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:29"><expr pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:29">target_el</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
