<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7082.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:30"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:30">tcg_target_ulong</name></type> <name pos:start="1:32" pos:end="1:42">cpu_tb_exec</name><parameter_list pos:start="1:43" pos:end="1:80">(<parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">CPUState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">cpu</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:79"><decl pos:start="1:59" pos:end="1:79"><type pos:start="1:59" pos:end="1:79"><name pos:start="1:59" pos:end="1:74">TranslationBlock</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:79">itb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:5" pos:end="119:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CPUArchState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">env</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">TranslationBlock</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:29">last_tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">tb_exit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">tb_ptr</name> <init pos:start="13:21" pos:end="13:33">= <expr pos:start="13:23" pos:end="13:33"><name pos:start="13:23" pos:end="13:33"><name pos:start="13:23" pos:end="13:25">itb</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:33">tc_ptr</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="26:0"><expr pos:start="17:5" pos:end="21:72"><call pos:start="17:5" pos:end="21:72"><name pos:start="17:5" pos:end="17:26">qemu_log_mask_and_addr</name><argument_list pos:start="17:27" pos:end="21:72">(<argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">CPU_LOG_EXEC</name></expr></argument>, <argument pos:start="17:42" pos:end="17:48"><expr pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:48"><name pos:start="17:42" pos:end="17:44">itb</name><operator pos:start="17:45" pos:end="17:46">-&gt;</operator><name pos:start="17:47" pos:end="17:48">pc</name></name></expr></argument>,

                           <argument pos:start="19:28" pos:end="19:62"><expr pos:start="19:28" pos:end="19:62"><literal type="string" pos:start="19:28" pos:end="19:39">"Trace %p ["</literal> <name pos:start="19:41" pos:end="19:53">TARGET_FMT_lx</name> <literal type="string" pos:start="19:55" pos:end="19:62">"] %s\n"</literal></expr></argument>,

                           <argument pos:start="21:28" pos:end="21:38"><expr pos:start="21:28" pos:end="21:38"><name pos:start="21:28" pos:end="21:38"><name pos:start="21:28" pos:end="21:30">itb</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:38">tc_ptr</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:47"><expr pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:47"><name pos:start="21:41" pos:end="21:43">itb</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:47">pc</name></name></expr></argument>, <argument pos:start="21:50" pos:end="21:71"><expr pos:start="21:50" pos:end="21:71"><call pos:start="21:50" pos:end="21:71"><name pos:start="21:50" pos:end="21:62">lookup_symbol</name><argument_list pos:start="21:63" pos:end="21:71">(<argument pos:start="21:64" pos:end="21:70"><expr pos:start="21:64" pos:end="21:70"><name pos:start="21:64" pos:end="21:70"><name pos:start="21:64" pos:end="21:66">itb</name><operator pos:start="21:67" pos:end="21:68">-&gt;</operator><name pos:start="21:69" pos:end="21:70">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="25:1" pos:end="25:24">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:24"><call pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:24">(<argument pos:start="25:13" pos:end="25:23"><expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="27:5" pos:end="54:0"><if pos:start="27:5" pos:end="54:0">if <condition pos:start="27:8" pos:end="27:43">(<expr pos:start="27:9" pos:end="27:42"><call pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:26">qemu_loglevel_mask</name><argument_list pos:start="27:27" pos:end="27:42">(<argument pos:start="27:28" pos:end="27:41"><expr pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:41">CPU_LOG_TB_CPU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:45" pos:end="54:0">{<block_content pos:start="31:9" pos:end="50:0">

<cpp:if pos:start="29:1" pos:end="29:24">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:24"><call pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:24">(<argument pos:start="29:13" pos:end="29:23"><expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:41"><call pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:21">log_cpu_state</name><argument_list pos:start="31:22" pos:end="31:41">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">cpu</name></expr></argument>, <argument pos:start="31:28" pos:end="31:40"><expr pos:start="31:28" pos:end="31:40"><name pos:start="31:28" pos:end="31:40">CPU_DUMP_CCOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:elif pos:start="33:1" pos:end="33:26">#<cpp:directive pos:start="33:2" pos:end="33:5">elif</cpp:directive> <expr pos:start="33:7" pos:end="33:26"><call pos:start="33:7" pos:end="33:26"><name pos:start="33:7" pos:end="33:13">defined</name><argument_list pos:start="33:14" pos:end="33:26">(<argument pos:start="33:15" pos:end="33:25"><expr pos:start="33:15" pos:end="33:25"><name pos:start="33:15" pos:end="33:25">TARGET_M68K</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="block" pos:start="35:9" pos:end="35:59">/* ??? Should not modify env state for dumping.  */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><call pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:28">cpu_m68k_flush_flags</name><argument_list pos:start="37:29" pos:end="37:45">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">env</name></expr></argument>, <argument pos:start="37:35" pos:end="37:44"><expr pos:start="37:35" pos:end="37:44"><name pos:start="37:35" pos:end="37:44"><name pos:start="37:35" pos:end="37:37">env</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:44">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:11">env</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:18">cc_op</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:32">CC_OP_FLAGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:71"><expr pos:start="41:9" pos:end="41:70"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">env</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:15">sr</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">(</operator><name pos:start="41:20" pos:end="41:26"><name pos:start="41:20" pos:end="41:22">env</name><operator pos:start="41:23" pos:end="41:24">-&gt;</operator><name pos:start="41:25" pos:end="41:26">sr</name></name> <operator pos:start="41:28" pos:end="41:28">&amp;</operator> <literal type="number" pos:start="41:30" pos:end="41:35">0xffe0</literal><operator pos:start="41:36" pos:end="41:36">)</operator> <operator pos:start="41:38" pos:end="41:38">|</operator> <name pos:start="41:40" pos:end="41:51"><name pos:start="41:40" pos:end="41:42">env</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:51">cc_dest</name></name> <operator pos:start="41:53" pos:end="41:53">|</operator> <operator pos:start="41:55" pos:end="41:55">(</operator><name pos:start="41:56" pos:end="41:64"><name pos:start="41:56" pos:end="41:58">env</name><operator pos:start="41:59" pos:end="41:60">-&gt;</operator><name pos:start="41:61" pos:end="41:64">cc_x</name></name> <operator pos:start="41:66" pos:end="41:67">&lt;&lt;</operator> <literal type="number" pos:start="41:69" pos:end="41:69">4</literal><operator pos:start="41:70" pos:end="41:70">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="46:0"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:21">log_cpu_state</name><argument_list pos:start="43:22" pos:end="43:29">(<argument pos:start="43:23" pos:end="43:25"><expr pos:start="43:23" pos:end="43:25"><name pos:start="43:23" pos:end="43:25">cpu</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:29"><call pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:21">log_cpu_state</name><argument_list pos:start="47:22" pos:end="47:29">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">cpu</name></expr></argument>, <argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="53:8" pos:end="53:24">/* DEBUG_DISAS */</comment>



    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:18"><name pos:start="57:5" pos:end="57:7">cpu</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:18">can_do_io</name></name> <operator pos:start="57:20" pos:end="57:20">=</operator> <operator pos:start="57:22" pos:end="57:22">!</operator><name pos:start="57:23" pos:end="57:32">use_icount</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:40"><expr pos:start="59:5" pos:end="59:39"><name pos:start="59:5" pos:end="59:7">ret</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:39"><name pos:start="59:11" pos:end="59:26">tcg_qemu_tb_exec</name><argument_list pos:start="59:27" pos:end="59:39">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">env</name></expr></argument>, <argument pos:start="59:33" pos:end="59:38"><expr pos:start="59:33" pos:end="59:38"><name pos:start="59:33" pos:end="59:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:23"><expr pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:7">cpu</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:18">can_do_io</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:56"><expr pos:start="63:5" pos:end="63:55"><name pos:start="63:5" pos:end="63:11">last_tb</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">(</operator><name pos:start="63:16" pos:end="63:31">TranslationBlock</name> <operator pos:start="63:33" pos:end="63:33">*</operator><operator pos:start="63:34" pos:end="63:34">)</operator><operator pos:start="63:35" pos:end="63:35">(</operator><name pos:start="63:36" pos:end="63:38">ret</name> <operator pos:start="63:40" pos:end="63:40">&amp;</operator> <operator pos:start="63:42" pos:end="63:42">~</operator><name pos:start="63:43" pos:end="63:54">TB_EXIT_MASK</name><operator pos:start="63:55" pos:end="63:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:33"><expr pos:start="65:5" pos:end="65:32"><name pos:start="65:5" pos:end="65:11">tb_exit</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:17">ret</name> <operator pos:start="65:19" pos:end="65:19">&amp;</operator> <name pos:start="65:21" pos:end="65:32">TB_EXIT_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:41"><expr pos:start="67:5" pos:end="67:40"><call pos:start="67:5" pos:end="67:40"><name pos:start="67:5" pos:end="67:22">trace_exec_tb_exit</name><argument_list pos:start="67:23" pos:end="67:40">(<argument pos:start="67:24" pos:end="67:30"><expr pos:start="67:24" pos:end="67:30"><name pos:start="67:24" pos:end="67:30">last_tb</name></expr></argument>, <argument pos:start="67:33" pos:end="67:39"><expr pos:start="67:33" pos:end="67:39"><name pos:start="67:33" pos:end="67:39">tb_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="105:5"><if pos:start="71:5" pos:end="105:5">if <condition pos:start="71:8" pos:end="71:31">(<expr pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:15">tb_exit</name> <operator pos:start="71:17" pos:end="71:17">&gt;</operator> <name pos:start="71:19" pos:end="71:30">TB_EXIT_IDX1</name></expr>)</condition> <block pos:start="71:33" pos:end="105:5">{<block_content pos:start="81:9" pos:end="103:9">

        <comment type="block" pos:start="73:9" pos:end="79:11">/* We didn't start executing this TB (eg because the instruction

         * counter hit zero); we must restore the guest PC to the address

         * of the start of the TB.

         */</comment>

        <decl_stmt pos:start="81:9" pos:end="81:42"><decl pos:start="81:9" pos:end="81:41"><type pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:16">CPUClass</name> <modifier pos:start="81:18" pos:end="81:18">*</modifier></type><name pos:start="81:19" pos:end="81:20">cc</name> <init pos:start="81:22" pos:end="81:41">= <expr pos:start="81:24" pos:end="81:41"><call pos:start="81:24" pos:end="81:41"><name pos:start="81:24" pos:end="81:36">CPU_GET_CLASS</name><argument_list pos:start="81:37" pos:end="81:41">(<argument pos:start="81:38" pos:end="81:40"><expr pos:start="81:38" pos:end="81:40"><name pos:start="81:38" pos:end="81:40">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="83:9" pos:end="91:59"><expr pos:start="83:9" pos:end="91:58"><call pos:start="83:9" pos:end="91:58"><name pos:start="83:9" pos:end="83:30">qemu_log_mask_and_addr</name><argument_list pos:start="83:31" pos:end="91:58">(<argument pos:start="83:32" pos:end="83:43"><expr pos:start="83:32" pos:end="83:43"><name pos:start="83:32" pos:end="83:43">CPU_LOG_EXEC</name></expr></argument>, <argument pos:start="83:46" pos:end="83:56"><expr pos:start="83:46" pos:end="83:56"><name pos:start="83:46" pos:end="83:56"><name pos:start="83:46" pos:end="83:52">last_tb</name><operator pos:start="83:53" pos:end="83:54">-&gt;</operator><name pos:start="83:55" pos:end="83:56">pc</name></name></expr></argument>,

                               <argument pos:start="85:32" pos:end="87:53"><expr pos:start="85:32" pos:end="87:53"><literal type="string" pos:start="85:32" pos:end="85:74">"Stopped execution of TB chain before %p ["</literal>

                               <name pos:start="87:32" pos:end="87:44">TARGET_FMT_lx</name> <literal type="string" pos:start="87:46" pos:end="87:53">"] %s\n"</literal></expr></argument>,

                               <argument pos:start="89:32" pos:end="89:46"><expr pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:38">last_tb</name><operator pos:start="89:39" pos:end="89:40">-&gt;</operator><name pos:start="89:41" pos:end="89:46">tc_ptr</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:59"><expr pos:start="89:49" pos:end="89:59"><name pos:start="89:49" pos:end="89:59"><name pos:start="89:49" pos:end="89:55">last_tb</name><operator pos:start="89:56" pos:end="89:57">-&gt;</operator><name pos:start="89:58" pos:end="89:59">pc</name></name></expr></argument>,

                               <argument pos:start="91:32" pos:end="91:57"><expr pos:start="91:32" pos:end="91:57"><call pos:start="91:32" pos:end="91:57"><name pos:start="91:32" pos:end="91:44">lookup_symbol</name><argument_list pos:start="91:45" pos:end="91:57">(<argument pos:start="91:46" pos:end="91:56"><expr pos:start="91:46" pos:end="91:56"><name pos:start="91:46" pos:end="91:56"><name pos:start="91:46" pos:end="91:52">last_tb</name><operator pos:start="91:53" pos:end="91:54">-&gt;</operator><name pos:start="91:55" pos:end="91:56">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:36">(<expr pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:14">cc</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:35">synchronize_from_tb</name></name></expr>)</condition> <block pos:start="93:38" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:50">

            <expr_stmt pos:start="95:13" pos:end="95:50"><expr pos:start="95:13" pos:end="95:49"><call pos:start="95:13" pos:end="95:49"><name pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:14">cc</name><operator pos:start="95:15" pos:end="95:16">-&gt;</operator><name pos:start="95:17" pos:end="95:35">synchronize_from_tb</name></name><argument_list pos:start="95:36" pos:end="95:49">(<argument pos:start="95:37" pos:end="95:39"><expr pos:start="95:37" pos:end="95:39"><name pos:start="95:37" pos:end="95:39">cpu</name></expr></argument>, <argument pos:start="95:42" pos:end="95:48"><expr pos:start="95:42" pos:end="95:48"><name pos:start="95:42" pos:end="95:48">last_tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="103:9">else <block pos:start="97:16" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:41">

            <expr_stmt pos:start="99:13" pos:end="99:31"><expr pos:start="99:13" pos:end="99:30"><call pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:18">assert</name><argument_list pos:start="99:19" pos:end="99:30">(<argument pos:start="99:20" pos:end="99:29"><expr pos:start="99:20" pos:end="99:29"><name pos:start="99:20" pos:end="99:29"><name pos:start="99:20" pos:end="99:21">cc</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:29">set_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><call pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:14">cc</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:22">set_pc</name></name><argument_list pos:start="101:23" pos:end="101:40">(<argument pos:start="101:24" pos:end="101:26"><expr pos:start="101:24" pos:end="101:26"><name pos:start="101:24" pos:end="101:26">cpu</name></expr></argument>, <argument pos:start="101:29" pos:end="101:39"><expr pos:start="101:29" pos:end="101:39"><name pos:start="101:29" pos:end="101:39"><name pos:start="101:29" pos:end="101:35">last_tb</name><operator pos:start="101:36" pos:end="101:37">-&gt;</operator><name pos:start="101:38" pos:end="101:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="117:5"><if pos:start="107:5" pos:end="117:5">if <condition pos:start="107:8" pos:end="107:37">(<expr pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:15">tb_exit</name> <operator pos:start="107:17" pos:end="107:18">==</operator> <name pos:start="107:20" pos:end="107:36">TB_EXIT_REQUESTED</name></expr>)</condition> <block pos:start="107:39" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:30">

        <comment type="block" pos:start="109:9" pos:end="113:11">/* We were asked to stop executing TBs (probably a pending

         * interrupt. We've now stopped, so clear the flag.

         */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:11">cpu</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:25">tcg_exit_req</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <literal type="number" pos:start="115:29" pos:end="115:29">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
