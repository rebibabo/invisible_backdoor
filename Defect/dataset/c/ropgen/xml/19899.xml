<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19899.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">USBDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:43">usb_host_device_open_addr</name><parameter_list pos:start="1:44" pos:end="1:89">(<parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:55">bus_num</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:65"><decl pos:start="1:58" pos:end="1:65"><type pos:start="1:58" pos:end="1:65"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">addr</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:88"><decl pos:start="1:68" pos:end="1:88"><type pos:start="1:68" pos:end="1:88"><specifier pos:start="1:68" pos:end="1:72">const</specifier> <name pos:start="1:74" pos:end="1:77">char</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:88">prod_name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="191:1">{<block_content pos:start="5:5" pos:end="189:16">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name> <init pos:start="5:12" pos:end="5:15">= <expr pos:start="5:14" pos:end="5:15"><operator pos:start="5:14" pos:end="5:14">-</operator><literal type="number" pos:start="5:15" pos:end="5:15">1</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">USBDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">d</name> <init pos:start="7:18" pos:end="7:23">= <expr pos:start="7:20" pos:end="7:23"><name pos:start="7:20" pos:end="7:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">USBHostDevice</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:31">usbdevfs_connectinfo</name></name></type> <name pos:start="11:33" pos:end="11:34">ci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:12">buf</name><index pos:start="13:13" pos:end="13:18">[<expr pos:start="13:14" pos:end="13:17"><literal type="number" pos:start="13:14" pos:end="13:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><call pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:10">printf</name><argument_list pos:start="17:11" pos:end="17:54">(<argument pos:start="17:12" pos:end="17:38"><expr pos:start="17:12" pos:end="17:38"><literal type="string" pos:start="17:12" pos:end="17:38">"husb: open device %d.%d\n"</literal></expr></argument>, <argument pos:start="17:41" pos:end="17:47"><expr pos:start="17:41" pos:end="17:47"><name pos:start="17:41" pos:end="17:47">bus_num</name></expr></argument>, <argument pos:start="17:50" pos:end="17:53"><expr pos:start="17:50" pos:end="17:53"><name pos:start="17:50" pos:end="17:53">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:30">(<expr pos:start="21:9" pos:end="21:29"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:29">usb_host_device_path</name></expr>)</condition> <block pos:start="21:32" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:53"><expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:14">perror</name><argument_list pos:start="23:15" pos:end="23:52">(<argument pos:start="23:16" pos:end="23:51"><expr pos:start="23:16" pos:end="23:51"><literal type="string" pos:start="23:16" pos:end="23:51">"husb: USB Host Device Path not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:28"><expr pos:start="29:5" pos:end="31:27"><call pos:start="29:5" pos:end="31:27"><name pos:start="29:5" pos:end="29:12">snprintf</name><argument_list pos:start="29:13" pos:end="31:27">(<argument pos:start="29:14" pos:end="29:16"><expr pos:start="29:14" pos:end="29:16"><name pos:start="29:14" pos:end="29:16">buf</name></expr></argument>, <argument pos:start="29:19" pos:end="29:29"><expr pos:start="29:19" pos:end="29:29"><sizeof pos:start="29:19" pos:end="29:29">sizeof<argument_list pos:start="29:25" pos:end="29:29">(<argument pos:start="29:26" pos:end="29:28"><expr pos:start="29:26" pos:end="29:28"><name pos:start="29:26" pos:end="29:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:32" pos:end="29:45"><expr pos:start="29:32" pos:end="29:45"><literal type="string" pos:start="29:32" pos:end="29:45">"%s/%03d/%03d"</literal></expr></argument>, <argument pos:start="29:48" pos:end="29:67"><expr pos:start="29:48" pos:end="29:67"><name pos:start="29:48" pos:end="29:67">usb_host_device_path</name></expr></argument>,

             <argument pos:start="31:14" pos:end="31:20"><expr pos:start="31:14" pos:end="31:20"><name pos:start="31:14" pos:end="31:20">bus_num</name></expr></argument>, <argument pos:start="31:23" pos:end="31:26"><expr pos:start="31:23" pos:end="31:26"><name pos:start="31:23" pos:end="31:26">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:40"><expr pos:start="33:5" pos:end="33:39"><name pos:start="33:5" pos:end="33:6">fd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:39"><name pos:start="33:10" pos:end="33:13">open</name><argument_list pos:start="33:14" pos:end="33:39">(<argument pos:start="33:15" pos:end="33:17"><expr pos:start="33:15" pos:end="33:17"><name pos:start="33:15" pos:end="33:17">buf</name></expr></argument>, <argument pos:start="33:20" pos:end="33:38"><expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:25">O_RDWR</name> <operator pos:start="33:27" pos:end="33:27">|</operator> <name pos:start="33:29" pos:end="33:38">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition> <block pos:start="35:17" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><call pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:14">perror</name><argument_list pos:start="37:15" pos:end="37:19">(<argument pos:start="37:16" pos:end="37:18"><expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><call pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:11">dprintf</name><argument_list pos:start="43:12" pos:end="43:37">(<argument pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:31"><literal type="string" pos:start="43:13" pos:end="43:31">"husb: opened %s\n"</literal></expr></argument>, <argument pos:start="43:34" pos:end="43:36"><expr pos:start="43:34" pos:end="43:36"><name pos:start="43:34" pos:end="43:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:5">d</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:55"><name pos:start="47:9" pos:end="47:18">usb_create</name><argument_list pos:start="47:19" pos:end="47:55">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">NULL</name></expr></argument> <comment type="block" pos:start="47:25" pos:end="47:35">/* FIXME */</comment>, <argument pos:start="47:38" pos:end="47:54"><expr pos:start="47:38" pos:end="47:54"><literal type="string" pos:start="47:38" pos:end="47:54">"USB Host Device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:7">dev</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:42"><name pos:start="49:11" pos:end="49:19">DO_UPCAST</name><argument_list pos:start="49:20" pos:end="49:42">(<argument pos:start="49:21" pos:end="49:33"><expr pos:start="49:21" pos:end="49:33"><name pos:start="49:21" pos:end="49:33">USBHostDevice</name></expr></argument>, <argument pos:start="49:36" pos:end="49:38"><expr pos:start="49:36" pos:end="49:38"><name pos:start="49:36" pos:end="49:38">dev</name></expr></argument>, <argument pos:start="49:41" pos:end="49:41"><expr pos:start="49:41" pos:end="49:41"><name pos:start="49:41" pos:end="49:41">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:7">dev</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:16">bus_num</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:26">bus_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:7">dev</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:13">addr</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:20">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:7">dev</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:11">fd</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:16">fd</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:37">/* read the device description */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:62"><expr pos:start="63:5" pos:end="63:61"><name pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:7">dev</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:18">descr_len</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <call pos:start="63:22" pos:end="63:61"><name pos:start="63:22" pos:end="63:25">read</name><argument_list pos:start="63:26" pos:end="63:61">(<argument pos:start="63:27" pos:end="63:28"><expr pos:start="63:27" pos:end="63:28"><name pos:start="63:27" pos:end="63:28">fd</name></expr></argument>, <argument pos:start="63:31" pos:end="63:40"><expr pos:start="63:31" pos:end="63:40"><name pos:start="63:31" pos:end="63:40"><name pos:start="63:31" pos:end="63:33">dev</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:40">descr</name></name></expr></argument>, <argument pos:start="63:43" pos:end="63:60"><expr pos:start="63:43" pos:end="63:60"><sizeof pos:start="63:43" pos:end="63:60">sizeof<argument_list pos:start="63:49" pos:end="63:60">(<argument pos:start="63:50" pos:end="63:59"><expr pos:start="63:50" pos:end="63:59"><name pos:start="63:50" pos:end="63:59"><name pos:start="63:50" pos:end="63:52">dev</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:59">descr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="76:0"><if pos:start="65:5" pos:end="76:0">if <condition pos:start="65:8" pos:end="65:28">(<expr pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:11">dev</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:22">descr_len</name></name> <operator pos:start="65:24" pos:end="65:25">&lt;=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>)</condition> <block pos:start="65:30" pos:end="76:0">{<block_content pos:start="67:9" pos:end="69:18">

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><call pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:14">perror</name><argument_list pos:start="67:15" pos:end="67:50">(<argument pos:start="67:16" pos:end="67:49"><expr pos:start="67:16" pos:end="67:49"><literal type="string" pos:start="67:16" pos:end="67:49">"husb: reading device data failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:18">goto <name pos:start="69:14" pos:end="69:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="75:1" pos:end="75:12">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:12">DEBUG</name></cpp:ifdef>

    <block pos:start="77:5" pos:end="92:0">{<block_content pos:start="79:9" pos:end="87:65">

        <decl_stmt pos:start="79:9" pos:end="79:14"><decl pos:start="79:9" pos:end="79:13"><type pos:start="79:9" pos:end="79:11"><name pos:start="79:9" pos:end="79:11">int</name></type> <name pos:start="79:13" pos:end="79:13">x</name></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:65"><expr pos:start="81:9" pos:end="81:64"><call pos:start="81:9" pos:end="81:64"><name pos:start="81:9" pos:end="81:14">printf</name><argument_list pos:start="81:15" pos:end="81:64">(<argument pos:start="81:16" pos:end="81:63"><expr pos:start="81:16" pos:end="81:63"><literal type="string" pos:start="81:16" pos:end="81:63">"=== begin dumping device descriptor data ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="83:9" pos:end="85:43">for <control pos:start="83:13" pos:end="83:44">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">x</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:39"><expr pos:start="83:21" pos:end="83:38"><name pos:start="83:21" pos:end="83:21">x</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <name pos:start="83:25" pos:end="83:38"><name pos:start="83:25" pos:end="83:27">dev</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:38">descr_len</name></name></expr>;</condition> <incr pos:start="83:41" pos:end="83:43"><expr pos:start="83:41" pos:end="83:43"><name pos:start="83:41" pos:end="83:41">x</name><operator pos:start="83:42" pos:end="83:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:13" pos:end="85:43"><block_content pos:start="85:13" pos:end="85:43">

            <expr_stmt pos:start="85:13" pos:end="85:43"><expr pos:start="85:13" pos:end="85:42"><call pos:start="85:13" pos:end="85:42"><name pos:start="85:13" pos:end="85:18">printf</name><argument_list pos:start="85:19" pos:end="85:42">(<argument pos:start="85:20" pos:end="85:26"><expr pos:start="85:20" pos:end="85:26"><literal type="string" pos:start="85:20" pos:end="85:26">"%02x "</literal></expr></argument>, <argument pos:start="85:29" pos:end="85:41"><expr pos:start="85:29" pos:end="85:41"><name pos:start="85:29" pos:end="85:41"><name pos:start="85:29" pos:end="85:31">dev</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:38">descr</name><index pos:start="85:39" pos:end="85:41">[<expr pos:start="85:40" pos:end="85:40"><name pos:start="85:40" pos:end="85:40">x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="87:9" pos:end="87:65"><expr pos:start="87:9" pos:end="87:64"><call pos:start="87:9" pos:end="87:64"><name pos:start="87:9" pos:end="87:14">printf</name><argument_list pos:start="87:15" pos:end="87:64">(<argument pos:start="87:16" pos:end="87:63"><expr pos:start="87:16" pos:end="87:63"><literal type="string" pos:start="87:16" pos:end="87:63">"\n=== end dumping device descriptor data ===\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>





    <comment type="block" pos:start="97:5" pos:end="107:7">/* 

     * Initial configuration is -1 which makes us claim first 

     * available config. We used to start with 1, which does not

     * always work. I've seen devices where first config starts 

     * with 2.

     */</comment>

    <if_stmt pos:start="109:5" pos:end="111:18"><if pos:start="109:5" pos:end="111:18">if <condition pos:start="109:8" pos:end="109:44">(<expr pos:start="109:9" pos:end="109:43"><operator pos:start="109:9" pos:end="109:9">!</operator><call pos:start="109:10" pos:end="109:43"><name pos:start="109:10" pos:end="109:34">usb_host_claim_interfaces</name><argument_list pos:start="109:35" pos:end="109:43">(<argument pos:start="109:36" pos:end="109:38"><expr pos:start="109:36" pos:end="109:38"><name pos:start="109:36" pos:end="109:38">dev</name></expr></argument>, <argument pos:start="109:41" pos:end="109:42"><expr pos:start="109:41" pos:end="109:42"><operator pos:start="109:41" pos:end="109:41">-</operator><literal type="number" pos:start="109:42" pos:end="109:42">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:18"><block_content pos:start="111:9" pos:end="111:18">

        <goto pos:start="111:9" pos:end="111:18">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:47"><expr pos:start="115:5" pos:end="115:46"><name pos:start="115:5" pos:end="115:7">ret</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:46"><name pos:start="115:11" pos:end="115:15">ioctl</name><argument_list pos:start="115:16" pos:end="115:46">(<argument pos:start="115:17" pos:end="115:18"><expr pos:start="115:17" pos:end="115:18"><name pos:start="115:17" pos:end="115:18">fd</name></expr></argument>, <argument pos:start="115:21" pos:end="115:40"><expr pos:start="115:21" pos:end="115:40"><name pos:start="115:21" pos:end="115:40">USBDEVFS_CONNECTINFO</name></expr></argument>, <argument pos:start="115:43" pos:end="115:45"><expr pos:start="115:43" pos:end="115:45"><operator pos:start="115:43" pos:end="115:43">&amp;</operator><name pos:start="115:44" pos:end="115:45">ci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:16">(<expr pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">&lt;</operator> <literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>)</condition> <block pos:start="117:18" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:18">

        <expr_stmt pos:start="119:9" pos:end="119:61"><expr pos:start="119:9" pos:end="119:60"><call pos:start="119:9" pos:end="119:60"><name pos:start="119:9" pos:end="119:14">perror</name><argument_list pos:start="119:15" pos:end="119:60">(<argument pos:start="119:16" pos:end="119:59"><expr pos:start="119:16" pos:end="119:59"><literal type="string" pos:start="119:16" pos:end="119:59">"usb_host_device_open: USBDEVFS_CONNECTINFO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:62"><expr pos:start="127:5" pos:end="127:61"><call pos:start="127:5" pos:end="127:61"><name pos:start="127:5" pos:end="127:10">printf</name><argument_list pos:start="127:11" pos:end="127:61">(<argument pos:start="127:12" pos:end="127:45"><expr pos:start="127:12" pos:end="127:45"><literal type="string" pos:start="127:12" pos:end="127:45">"husb: grabbed usb device %d.%d\n"</literal></expr></argument>, <argument pos:start="127:48" pos:end="127:54"><expr pos:start="127:48" pos:end="127:54"><name pos:start="127:48" pos:end="127:54">bus_num</name></expr></argument>, <argument pos:start="127:57" pos:end="127:60"><expr pos:start="127:57" pos:end="127:60"><name pos:start="127:57" pos:end="127:60">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:7">ret</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="131:42"><name pos:start="131:11" pos:end="131:37">usb_linux_update_endp_table</name><argument_list pos:start="131:38" pos:end="131:42">(<argument pos:start="131:39" pos:end="131:41"><expr pos:start="131:39" pos:end="131:41"><name pos:start="131:39" pos:end="131:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:18"><if pos:start="133:5" pos:end="135:18">if <condition pos:start="133:8" pos:end="133:12">(<expr pos:start="133:9" pos:end="133:11"><name pos:start="133:9" pos:end="133:11">ret</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:18"><block_content pos:start="135:9" pos:end="135:18">

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="145:40"><if pos:start="139:5" pos:end="141:39">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:10">ci</name><operator pos:start="139:11" pos:end="139:11">.</operator><name pos:start="139:12" pos:end="139:15">slow</name></name></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:39"><block_content pos:start="141:9" pos:end="141:39">

        <expr_stmt pos:start="141:9" pos:end="141:39"><expr pos:start="141:9" pos:end="141:38"><name pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:11">dev</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:16">dev</name><operator pos:start="141:17" pos:end="141:17">.</operator><name pos:start="141:18" pos:end="141:22">speed</name></name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:38">USB_SPEED_LOW</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="143:5" pos:end="145:40">else<block type="pseudo" pos:start="145:9" pos:end="145:40"><block_content pos:start="145:9" pos:end="145:40">

        <expr_stmt pos:start="145:9" pos:end="145:40"><expr pos:start="145:9" pos:end="145:39"><name pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:11">dev</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:16">dev</name><operator pos:start="145:17" pos:end="145:17">.</operator><name pos:start="145:18" pos:end="145:22">speed</name></name> <operator pos:start="145:24" pos:end="145:24">=</operator> <name pos:start="145:26" pos:end="145:39">USB_SPEED_HIGH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="149:5" pos:end="159:27"><if pos:start="149:5" pos:end="153:46">if <condition pos:start="149:8" pos:end="149:43">(<expr pos:start="149:9" pos:end="149:42"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:18">prod_name</name> <operator pos:start="149:20" pos:end="149:21">||</operator> <name pos:start="149:23" pos:end="149:34"><name pos:start="149:23" pos:end="149:31">prod_name</name><index pos:start="149:32" pos:end="149:34">[<expr pos:start="149:33" pos:end="149:33"><literal type="number" pos:start="149:33" pos:end="149:33">0</literal></expr>]</index></name> <operator pos:start="149:36" pos:end="149:37">==</operator> <literal type="char" pos:start="149:39" pos:end="149:42">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="153:46"><block_content pos:start="151:9" pos:end="153:46">

        <expr_stmt pos:start="151:9" pos:end="153:46"><expr pos:start="151:9" pos:end="153:45"><call pos:start="151:9" pos:end="153:45"><name pos:start="151:9" pos:end="151:16">snprintf</name><argument_list pos:start="151:17" pos:end="153:45">(<argument pos:start="151:18" pos:end="151:33"><expr pos:start="151:18" pos:end="151:33"><name pos:start="151:18" pos:end="151:33"><name pos:start="151:18" pos:end="151:20">dev</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:25">dev</name><operator pos:start="151:26" pos:end="151:26">.</operator><name pos:start="151:27" pos:end="151:33">devname</name></name></expr></argument>, <argument pos:start="151:36" pos:end="151:59"><expr pos:start="151:36" pos:end="151:59"><sizeof pos:start="151:36" pos:end="151:59">sizeof<argument_list pos:start="151:42" pos:end="151:59">(<argument pos:start="151:43" pos:end="151:58"><expr pos:start="151:43" pos:end="151:58"><name pos:start="151:43" pos:end="151:58"><name pos:start="151:43" pos:end="151:45">dev</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:50">dev</name><operator pos:start="151:51" pos:end="151:51">.</operator><name pos:start="151:52" pos:end="151:58">devname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="153:18" pos:end="153:29"><expr pos:start="153:18" pos:end="153:29"><literal type="string" pos:start="153:18" pos:end="153:29">"host:%d.%d"</literal></expr></argument>, <argument pos:start="153:32" pos:end="153:38"><expr pos:start="153:32" pos:end="153:38"><name pos:start="153:32" pos:end="153:38">bus_num</name></expr></argument>, <argument pos:start="153:41" pos:end="153:44"><expr pos:start="153:41" pos:end="153:44"><name pos:start="153:41" pos:end="153:44">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="155:5" pos:end="159:27">else<block type="pseudo" pos:start="157:9" pos:end="159:27"><block_content pos:start="157:9" pos:end="159:27">

        <expr_stmt pos:start="157:9" pos:end="159:27"><expr pos:start="157:9" pos:end="159:26"><call pos:start="157:9" pos:end="159:26"><name pos:start="157:9" pos:end="157:15">pstrcpy</name><argument_list pos:start="157:16" pos:end="159:26">(<argument pos:start="157:17" pos:end="157:32"><expr pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:19">dev</name><operator pos:start="157:20" pos:end="157:21">-&gt;</operator><name pos:start="157:22" pos:end="157:24">dev</name><operator pos:start="157:25" pos:end="157:25">.</operator><name pos:start="157:26" pos:end="157:32">devname</name></name></expr></argument>, <argument pos:start="157:35" pos:end="157:58"><expr pos:start="157:35" pos:end="157:58"><sizeof pos:start="157:35" pos:end="157:58">sizeof<argument_list pos:start="157:41" pos:end="157:58">(<argument pos:start="157:42" pos:end="157:57"><expr pos:start="157:42" pos:end="157:57"><name pos:start="157:42" pos:end="157:57"><name pos:start="157:42" pos:end="157:44">dev</name><operator pos:start="157:45" pos:end="157:46">-&gt;</operator><name pos:start="157:47" pos:end="157:49">dev</name><operator pos:start="157:50" pos:end="157:50">.</operator><name pos:start="157:51" pos:end="157:57">devname</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="159:17" pos:end="159:25"><expr pos:start="159:17" pos:end="159:25"><name pos:start="159:17" pos:end="159:25">prod_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:68">/* USB devio uses 'write' flag to check for async completions */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:60"><expr pos:start="165:5" pos:end="165:59"><call pos:start="165:5" pos:end="165:59"><name pos:start="165:5" pos:end="165:23">qemu_set_fd_handler</name><argument_list pos:start="165:24" pos:end="165:59">(<argument pos:start="165:25" pos:end="165:31"><expr pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:27">dev</name><operator pos:start="165:28" pos:end="165:29">-&gt;</operator><name pos:start="165:30" pos:end="165:31">fd</name></name></expr></argument>, <argument pos:start="165:34" pos:end="165:37"><expr pos:start="165:34" pos:end="165:37"><name pos:start="165:34" pos:end="165:37">NULL</name></expr></argument>, <argument pos:start="165:40" pos:end="165:53"><expr pos:start="165:40" pos:end="165:53"><name pos:start="165:40" pos:end="165:53">async_complete</name></expr></argument>, <argument pos:start="165:56" pos:end="165:58"><expr pos:start="165:56" pos:end="165:58"><name pos:start="165:56" pos:end="165:58">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:22"><expr pos:start="169:5" pos:end="169:21"><call pos:start="169:5" pos:end="169:21"><name pos:start="169:5" pos:end="169:16">hostdev_link</name><argument_list pos:start="169:17" pos:end="169:21">(<argument pos:start="169:18" pos:end="169:20"><expr pos:start="169:18" pos:end="169:20"><name pos:start="169:18" pos:end="169:20">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:24"><expr pos:start="173:5" pos:end="173:23"><call pos:start="173:5" pos:end="173:23"><name pos:start="173:5" pos:end="173:13">qdev_init</name><argument_list pos:start="173:14" pos:end="173:23">(<argument pos:start="173:15" pos:end="173:22"><expr pos:start="173:15" pos:end="173:22"><operator pos:start="173:15" pos:end="173:15">&amp;</operator><name pos:start="173:16" pos:end="173:22"><name pos:start="173:16" pos:end="173:16">d</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:22">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:29">return <expr pos:start="175:12" pos:end="175:28"><operator pos:start="175:12" pos:end="175:12">(</operator><name pos:start="175:13" pos:end="175:21">USBDevice</name> <operator pos:start="175:23" pos:end="175:23">*</operator><operator pos:start="175:24" pos:end="175:24">)</operator> <name pos:start="175:26" pos:end="175:28">dev</name></expr>;</return>



<label pos:start="179:1" pos:end="179:5"><name pos:start="179:1" pos:end="179:4">fail</name>:</label>

    <if_stmt pos:start="181:5" pos:end="183:28"><if pos:start="181:5" pos:end="183:28">if <condition pos:start="181:8" pos:end="181:10">(<expr pos:start="181:9" pos:end="181:9"><name pos:start="181:9" pos:end="181:9">d</name></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:28"><block_content pos:start="183:9" pos:end="183:28">

        <expr_stmt pos:start="183:9" pos:end="183:28"><expr pos:start="183:9" pos:end="183:27"><call pos:start="183:9" pos:end="183:27"><name pos:start="183:9" pos:end="183:17">qdev_free</name><argument_list pos:start="183:18" pos:end="183:27">(<argument pos:start="183:19" pos:end="183:26"><expr pos:start="183:19" pos:end="183:26"><operator pos:start="183:19" pos:end="183:19">&amp;</operator><name pos:start="183:20" pos:end="183:26"><name pos:start="183:20" pos:end="183:20">d</name><operator pos:start="183:21" pos:end="183:22">-&gt;</operator><name pos:start="183:23" pos:end="183:26">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="185:5" pos:end="187:18"><if pos:start="185:5" pos:end="187:18">if <condition pos:start="185:8" pos:end="185:17">(<expr pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:10">fd</name> <operator pos:start="185:12" pos:end="185:13">!=</operator> <operator pos:start="185:15" pos:end="185:15">-</operator><literal type="number" pos:start="185:16" pos:end="185:16">1</literal></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:18"><block_content pos:start="187:9" pos:end="187:18">

        <expr_stmt pos:start="187:9" pos:end="187:18"><expr pos:start="187:9" pos:end="187:17"><call pos:start="187:9" pos:end="187:17"><name pos:start="187:9" pos:end="187:13">close</name><argument_list pos:start="187:14" pos:end="187:17">(<argument pos:start="187:15" pos:end="187:16"><expr pos:start="187:15" pos:end="187:16"><name pos:start="187:15" pos:end="187:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="189:5" pos:end="189:16">return <expr pos:start="189:12" pos:end="189:15"><name pos:start="189:12" pos:end="189:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
