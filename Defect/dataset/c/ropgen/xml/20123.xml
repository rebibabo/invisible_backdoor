<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20123.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">cmdutils_read_file</name><parameter_list pos:start="1:23" pos:end="1:73">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">bufptr</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:66">size_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:15">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">FILE</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">f</name> <init pos:start="7:13" pos:end="7:35">= <expr pos:start="7:15" pos:end="7:35"><call pos:start="7:15" pos:end="7:35"><name pos:start="7:15" pos:end="7:19">fopen</name><argument_list pos:start="7:20" pos:end="7:35">(<argument pos:start="7:21" pos:end="7:28"><expr pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:28">filename</name></expr></argument>, <argument pos:start="7:31" pos:end="7:34"><expr pos:start="7:31" pos:end="7:34"><literal type="string" pos:start="7:31" pos:end="7:34">"rb"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:11">(<expr pos:start="11:9" pos:end="11:10"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:10">f</name></expr>)</condition> <block pos:start="11:13" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:30">

        <expr_stmt pos:start="13:9" pos:end="15:32"><expr pos:start="13:9" pos:end="15:31"><call pos:start="13:9" pos:end="15:31"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="15:31">(<argument pos:start="13:16" pos:end="13:19"><expr pos:start="13:16" pos:end="13:19"><name pos:start="13:16" pos:end="13:19">NULL</name></expr></argument>, <argument pos:start="13:22" pos:end="13:33"><expr pos:start="13:22" pos:end="13:33"><name pos:start="13:22" pos:end="13:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:36" pos:end="13:64"><expr pos:start="13:36" pos:end="13:64"><literal type="string" pos:start="13:36" pos:end="13:64">"Cannot read file '%s': %s\n"</literal></expr></argument>, <argument pos:start="13:67" pos:end="13:74"><expr pos:start="13:67" pos:end="13:74"><name pos:start="13:67" pos:end="13:74">filename</name></expr></argument>,

               <argument pos:start="15:16" pos:end="15:30"><expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:23">strerror</name><argument_list pos:start="15:24" pos:end="15:30">(<argument pos:start="15:25" pos:end="15:29"><expr pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:29">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:30">return <expr pos:start="17:16" pos:end="17:29"><call pos:start="17:16" pos:end="17:29"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:29">(<argument pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:28">errno</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:9">fseek</name><argument_list pos:start="21:10" pos:end="21:25">(<argument pos:start="21:11" pos:end="21:11"><expr pos:start="21:11" pos:end="21:11"><name pos:start="21:11" pos:end="21:11">f</name></expr></argument>, <argument pos:start="21:14" pos:end="21:14"><expr pos:start="21:14" pos:end="21:14"><literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr></argument>, <argument pos:start="21:17" pos:end="21:24"><expr pos:start="21:17" pos:end="21:24"><name pos:start="21:17" pos:end="21:24">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><operator pos:start="23:5" pos:end="23:5">*</operator><name pos:start="23:6" pos:end="23:9">size</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:17">ftell</name><argument_list pos:start="23:18" pos:end="23:20">(<argument pos:start="23:19" pos:end="23:19"><expr pos:start="23:19" pos:end="23:19"><name pos:start="23:19" pos:end="23:19">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:9">fseek</name><argument_list pos:start="25:10" pos:end="25:25">(<argument pos:start="25:11" pos:end="25:11"><expr pos:start="25:11" pos:end="25:11"><name pos:start="25:11" pos:end="25:11">f</name></expr></argument>, <argument pos:start="25:14" pos:end="25:14"><expr pos:start="25:14" pos:end="25:14"><literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr></argument>, <argument pos:start="25:17" pos:end="25:24"><expr pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:24">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><operator pos:start="27:5" pos:end="27:5">*</operator><name pos:start="27:6" pos:end="27:11">bufptr</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:34"><name pos:start="27:15" pos:end="27:23">av_malloc</name><argument_list pos:start="27:24" pos:end="27:34">(<argument pos:start="27:25" pos:end="27:33"><expr pos:start="27:25" pos:end="27:33"><operator pos:start="27:25" pos:end="27:25">*</operator><name pos:start="27:26" pos:end="27:29">size</name> <operator pos:start="27:31" pos:end="27:31">+</operator> <literal type="number" pos:start="27:33" pos:end="27:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">*</operator><name pos:start="29:11" pos:end="29:16">bufptr</name></expr>)</condition> <block pos:start="29:19" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:31">

        <expr_stmt pos:start="31:9" pos:end="31:71"><expr pos:start="31:9" pos:end="31:70"><call pos:start="31:9" pos:end="31:70"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:70">(<argument pos:start="31:16" pos:end="31:19"><expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr></argument>, <argument pos:start="31:22" pos:end="31:33"><expr pos:start="31:22" pos:end="31:33"><name pos:start="31:22" pos:end="31:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:36" pos:end="31:69"><expr pos:start="31:36" pos:end="31:69"><literal type="string" pos:start="31:36" pos:end="31:69">"Could not allocate file buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><call pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:14">fclose</name><argument_list pos:start="33:15" pos:end="33:17">(<argument pos:start="33:16" pos:end="33:16"><expr pos:start="33:16" pos:end="33:16"><name pos:start="33:16" pos:end="33:16">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:31">return <expr pos:start="35:16" pos:end="35:30"><call pos:start="35:16" pos:end="35:30"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:30">(<argument pos:start="35:24" pos:end="35:29"><expr pos:start="35:24" pos:end="35:29"><name pos:start="35:24" pos:end="35:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:37"><name pos:start="39:11" pos:end="39:15">fread</name><argument_list pos:start="39:16" pos:end="39:37">(<argument pos:start="39:17" pos:end="39:23"><expr pos:start="39:17" pos:end="39:23"><operator pos:start="39:17" pos:end="39:17">*</operator><name pos:start="39:18" pos:end="39:23">bufptr</name></expr></argument>, <argument pos:start="39:26" pos:end="39:26"><expr pos:start="39:26" pos:end="39:26"><literal type="number" pos:start="39:26" pos:end="39:26">1</literal></expr></argument>, <argument pos:start="39:29" pos:end="39:33"><expr pos:start="39:29" pos:end="39:33"><operator pos:start="39:29" pos:end="39:29">*</operator><name pos:start="39:30" pos:end="39:33">size</name></expr></argument>, <argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><name pos:start="39:36" pos:end="39:36">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="63:5"><if pos:start="41:5" pos:end="57:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <operator pos:start="41:15" pos:end="41:15">*</operator><name pos:start="41:16" pos:end="41:19">size</name></expr>)</condition> <block pos:start="41:22" pos:end="57:5">{<block_content pos:start="43:9" pos:end="55:30">

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:15">av_free</name><argument_list pos:start="43:16" pos:end="43:24">(<argument pos:start="43:17" pos:end="43:23"><expr pos:start="43:17" pos:end="43:23"><operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:23">bufptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="55:30"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><call pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:18">ferror</name><argument_list pos:start="45:19" pos:end="45:21">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:24" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:33">

            <expr_stmt pos:start="47:13" pos:end="49:46"><expr pos:start="47:13" pos:end="49:45"><call pos:start="47:13" pos:end="49:45"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="49:45">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">NULL</name></expr></argument>, <argument pos:start="47:26" pos:end="47:37"><expr pos:start="47:26" pos:end="47:37"><name pos:start="47:26" pos:end="47:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:40" pos:end="47:76"><expr pos:start="47:40" pos:end="47:76"><literal type="string" pos:start="47:40" pos:end="47:76">"Error while reading file '%s': %s\n"</literal></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:27"><expr pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:27">filename</name></expr></argument>, <argument pos:start="49:30" pos:end="49:44"><expr pos:start="49:30" pos:end="49:44"><call pos:start="49:30" pos:end="49:44"><name pos:start="49:30" pos:end="49:37">strerror</name><argument_list pos:start="49:38" pos:end="49:44">(<argument pos:start="49:39" pos:end="49:43"><expr pos:start="49:39" pos:end="49:43"><name pos:start="49:39" pos:end="49:43">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:33"><expr pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:32"><name pos:start="51:19" pos:end="51:25">AVERROR</name><argument_list pos:start="51:26" pos:end="51:32">(<argument pos:start="51:27" pos:end="51:31"><expr pos:start="51:27" pos:end="51:31"><name pos:start="51:27" pos:end="51:31">errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="55:30">else<block type="pseudo" pos:start="55:13" pos:end="55:30"><block_content pos:start="55:13" pos:end="55:30">

            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:29">AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="63:5">else <block pos:start="57:12" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:36">

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><operator pos:start="61:9" pos:end="61:9">(</operator><operator pos:start="61:10" pos:end="61:10">*</operator><name pos:start="61:11" pos:end="61:16">bufptr</name><operator pos:start="61:17" pos:end="61:17">)</operator><index pos:start="61:18" pos:end="61:28">[<expr pos:start="61:19" pos:end="61:27"><operator pos:start="61:19" pos:end="61:19">(</operator><operator pos:start="61:20" pos:end="61:20">*</operator><name pos:start="61:21" pos:end="61:24">size</name><operator pos:start="61:25" pos:end="61:25">)</operator><operator pos:start="61:26" pos:end="61:27">++</operator></expr>]</index> <operator pos:start="61:30" pos:end="61:30">=</operator> <literal type="char" pos:start="61:32" pos:end="61:35">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:14"><expr pos:start="67:5" pos:end="67:13"><call pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:10">fclose</name><argument_list pos:start="67:11" pos:end="67:13">(<argument pos:start="67:12" pos:end="67:12"><expr pos:start="67:12" pos:end="67:12"><name pos:start="67:12" pos:end="67:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
