<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8821.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">ff_fast_malloc</name><parameter_list pos:start="1:33" pos:end="1:98">(<parameter pos:start="1:34" pos:end="1:42"><decl pos:start="1:34" pos:end="1:42"><type pos:start="1:34" pos:end="1:42"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ptr</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:52">unsigned</name> <name pos:start="1:54" pos:end="1:56">int</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">size</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:79"><decl pos:start="1:65" pos:end="1:79"><type pos:start="1:65" pos:end="1:79"><name pos:start="1:65" pos:end="1:70">size_t</name></type> <name pos:start="1:72" pos:end="1:79">min_size</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:97"><decl pos:start="1:82" pos:end="1:97"><type pos:start="1:82" pos:end="1:97"><name pos:start="1:82" pos:end="1:84">int</name></type> <name pos:start="1:86" pos:end="1:97">zero_realloc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:13">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:17"><if pos:start="9:5" pos:end="11:17">if <condition pos:start="9:8" pos:end="9:25">(<expr pos:start="9:9" pos:end="9:24"><name pos:start="9:9" pos:end="9:16">min_size</name> <operator pos:start="9:18" pos:end="9:18">&lt;</operator> <operator pos:start="9:20" pos:end="9:20">*</operator><name pos:start="9:21" pos:end="9:24">size</name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:56"><expr pos:start="13:5" pos:end="13:55"><name pos:start="13:5" pos:end="13:12">min_size</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <call pos:start="13:16" pos:end="13:55"><name pos:start="13:16" pos:end="13:20">FFMAX</name><argument_list pos:start="13:21" pos:end="13:55">(<argument pos:start="13:22" pos:end="13:44"><expr pos:start="13:22" pos:end="13:44"><literal type="number" pos:start="13:22" pos:end="13:23">17</literal> <operator pos:start="13:25" pos:end="13:25">*</operator> <name pos:start="13:27" pos:end="13:34">min_size</name> <operator pos:start="13:36" pos:end="13:36">/</operator> <literal type="number" pos:start="13:38" pos:end="13:41">16</literal> <operator pos:start="13:41" pos:end="13:41">+</operator> <literal type="number" pos:start="13:43" pos:end="13:44">32</literal></expr></argument>, <argument pos:start="13:47" pos:end="13:54"><expr pos:start="13:47" pos:end="13:54"><name pos:start="13:47" pos:end="13:54">min_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:18"><expr pos:start="15:5" pos:end="15:17"><call pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:12">av_freep</name><argument_list pos:start="15:13" pos:end="15:17">(<argument pos:start="15:14" pos:end="15:16"><expr pos:start="15:14" pos:end="15:16"><name pos:start="15:14" pos:end="15:16">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:68"><expr pos:start="17:5" pos:end="17:67"><name pos:start="17:5" pos:end="17:7">val</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <ternary pos:start="17:11" pos:end="17:67"><condition pos:start="17:11" pos:end="17:24"><expr pos:start="17:11" pos:end="17:22"><name pos:start="17:11" pos:end="17:22">zero_realloc</name></expr> ?</condition><then pos:start="17:26" pos:end="17:45"> <expr pos:start="17:26" pos:end="17:45"><call pos:start="17:26" pos:end="17:45"><name pos:start="17:26" pos:end="17:35">av_mallocz</name><argument_list pos:start="17:36" pos:end="17:45">(<argument pos:start="17:37" pos:end="17:44"><expr pos:start="17:37" pos:end="17:44"><name pos:start="17:37" pos:end="17:44">min_size</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="17:47" pos:end="17:67">: <expr pos:start="17:49" pos:end="17:67"><call pos:start="17:49" pos:end="17:67"><name pos:start="17:49" pos:end="17:57">av_malloc</name><argument_list pos:start="17:58" pos:end="17:67">(<argument pos:start="17:59" pos:end="17:66"><expr pos:start="17:59" pos:end="17:66"><name pos:start="17:59" pos:end="17:66">min_size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><call pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:10">memcpy</name><argument_list pos:start="19:11" pos:end="19:34">(<argument pos:start="19:12" pos:end="19:14"><expr pos:start="19:12" pos:end="19:14"><name pos:start="19:12" pos:end="19:14">ptr</name></expr></argument>, <argument pos:start="19:17" pos:end="19:20"><expr pos:start="19:17" pos:end="19:20"><operator pos:start="19:17" pos:end="19:17">&amp;</operator><name pos:start="19:18" pos:end="19:20">val</name></expr></argument>, <argument pos:start="19:23" pos:end="19:33"><expr pos:start="19:23" pos:end="19:33"><sizeof pos:start="19:23" pos:end="19:33">sizeof<argument_list pos:start="19:29" pos:end="19:33">(<argument pos:start="19:30" pos:end="19:32"><expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:32">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:21"><if pos:start="21:5" pos:end="23:21">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">val</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:21"><block_content pos:start="23:9" pos:end="23:21">

        <expr_stmt pos:start="23:9" pos:end="23:21"><expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:16">min_size</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:9">size</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:20">min_size</name></expr>;</expr_stmt>

    <return pos:start="27:5" pos:end="27:13">return <expr pos:start="27:12" pos:end="27:12"><literal type="number" pos:start="27:12" pos:end="27:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
