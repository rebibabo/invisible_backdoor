<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6895.c" pos:tabs="8"><function pos:start="1:1" pos:end="595:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">alloc_refcount_block</name><parameter_list pos:start="1:32" pos:end="3:77">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:53"><decl pos:start="3:33" pos:end="3:53"><type pos:start="3:33" pos:end="3:53"><name pos:start="3:33" pos:end="3:39">int64_t</name></type> <name pos:start="3:41" pos:end="3:53">cluster_index</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:76"><decl pos:start="3:56" pos:end="3:76"><type pos:start="3:56" pos:end="3:76"><name pos:start="3:56" pos:end="3:59">void</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier><modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:76">refcount_block</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="595:1">{<block_content pos:start="7:5" pos:end="593:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:37">refcount_table_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><call pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:16">BLKDBG_EVENT</name><argument_list pos:start="15:17" pos:end="15:49">(<argument pos:start="15:18" pos:end="15:25"><expr pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:19">bs</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:25">file</name></name></expr></argument>, <argument pos:start="15:28" pos:end="15:48"><expr pos:start="15:28" pos:end="15:48"><name pos:start="15:28" pos:end="15:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:55">/* Find the refcount block for the given cluster */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:67"><expr pos:start="21:5" pos:end="21:66"><name pos:start="21:5" pos:end="21:24">refcount_table_index</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:40">cluster_index</name> <operator pos:start="21:42" pos:end="21:43">&gt;&gt;</operator> <name pos:start="21:45" pos:end="21:66"><name pos:start="21:45" pos:end="21:45">s</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:66">refcount_block_bits</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="61:5"><if pos:start="25:5" pos:end="61:5">if <condition pos:start="25:8" pos:end="25:54">(<expr pos:start="25:9" pos:end="25:53"><name pos:start="25:9" pos:end="25:28">refcount_table_index</name> <operator pos:start="25:30" pos:end="25:30">&lt;</operator> <name pos:start="25:32" pos:end="25:53"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="25:56" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">



        <decl_stmt pos:start="29:9" pos:end="31:71"><decl pos:start="29:9" pos:end="31:70"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint64_t</name></type> <name pos:start="29:18" pos:end="29:38">refcount_block_offset</name> <init pos:start="29:40" pos:end="31:70">=

            <expr pos:start="31:13" pos:end="31:70"><name pos:start="31:13" pos:end="31:51"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:29">refcount_table</name><index pos:start="31:30" pos:end="31:51">[<expr pos:start="31:31" pos:end="31:50"><name pos:start="31:31" pos:end="31:50">refcount_table_index</name></expr>]</index></name> <operator pos:start="31:53" pos:end="31:53">&amp;</operator> <name pos:start="31:55" pos:end="31:70">REFT_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="35:9" pos:end="35:47">/* If it's already there, we're done */</comment>

        <if_stmt pos:start="37:9" pos:end="59:9"><if pos:start="37:9" pos:end="59:9">if <condition pos:start="37:12" pos:end="37:34">(<expr pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:33">refcount_block_offset</name></expr>)</condition> <block pos:start="37:36" pos:end="59:9">{<block_content pos:start="39:13" pos:end="57:56">

            <if_stmt pos:start="39:13" pos:end="51:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="39:62">(<expr pos:start="39:17" pos:end="39:61"><call pos:start="39:17" pos:end="39:61"><name pos:start="39:17" pos:end="39:35">offset_into_cluster</name><argument_list pos:start="39:36" pos:end="39:61">(<argument pos:start="39:37" pos:end="39:37"><expr pos:start="39:37" pos:end="39:37"><name pos:start="39:37" pos:end="39:37">s</name></expr></argument>, <argument pos:start="39:40" pos:end="39:60"><expr pos:start="39:40" pos:end="39:60"><name pos:start="39:40" pos:end="39:60">refcount_block_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:64" pos:end="51:13">{<block_content pos:start="41:17" pos:end="49:28">

                <expr_stmt pos:start="41:17" pos:end="47:62"><expr pos:start="41:17" pos:end="47:61"><call pos:start="41:17" pos:end="47:61"><name pos:start="41:17" pos:end="41:39">qcow2_signal_corruption</name><argument_list pos:start="41:40" pos:end="47:61">(<argument pos:start="41:41" pos:end="41:42"><expr pos:start="41:41" pos:end="41:42"><name pos:start="41:41" pos:end="41:42">bs</name></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">true</name></expr></argument>, <argument pos:start="41:51" pos:end="41:52"><expr pos:start="41:51" pos:end="41:52"><operator pos:start="41:51" pos:end="41:51">-</operator><literal type="number" pos:start="41:52" pos:end="41:52">1</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:56"><expr pos:start="41:55" pos:end="41:56"><operator pos:start="41:55" pos:end="41:55">-</operator><literal type="number" pos:start="41:56" pos:end="41:56">1</literal></expr></argument>, <argument pos:start="41:59" pos:end="45:46"><expr pos:start="41:59" pos:end="45:46"><literal type="string" pos:start="41:59" pos:end="41:78">"Refblock offset %#"</literal>

                                        <name pos:start="43:41" pos:end="43:46">PRIx64</name> <literal type="string" pos:start="43:48" pos:end="43:77">" unaligned (reftable index: "</literal>

                                        <literal type="string" pos:start="45:41" pos:end="45:46">"%#x)"</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:69"><expr pos:start="45:49" pos:end="45:69"><name pos:start="45:49" pos:end="45:69">refcount_block_offset</name></expr></argument>,

                                        <argument pos:start="47:41" pos:end="47:60"><expr pos:start="47:41" pos:end="47:60"><name pos:start="47:41" pos:end="47:60">refcount_table_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:28">return <expr pos:start="49:24" pos:end="49:27"><operator pos:start="49:24" pos:end="49:24">-</operator><name pos:start="49:25" pos:end="49:27">EIO</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



             <return pos:start="55:14" pos:end="57:56">return <expr pos:start="55:21" pos:end="57:55"><call pos:start="55:21" pos:end="57:55"><name pos:start="55:21" pos:end="55:39">load_refcount_block</name><argument_list pos:start="55:40" pos:end="57:55">(<argument pos:start="55:41" pos:end="55:42"><expr pos:start="55:41" pos:end="55:42"><name pos:start="55:41" pos:end="55:42">bs</name></expr></argument>, <argument pos:start="55:45" pos:end="55:65"><expr pos:start="55:45" pos:end="55:65"><name pos:start="55:45" pos:end="55:65">refcount_block_offset</name></expr></argument>,

                                        <argument pos:start="57:41" pos:end="57:54"><expr pos:start="57:41" pos:end="57:54"><name pos:start="57:41" pos:end="57:54">refcount_block</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="107:7">/*

     * If we came here, we need to allocate something. Something is at least

     * a cluster for the new refcount block. It may also include a new refcount

     * table if the old refcount table is too small.

     *

     * Note that allocating clusters here needs some special care:

     *

     * - We can't use the normal qcow2_alloc_clusters(), it would try to

     *   increase the refcount and very likely we would end up with an endless

     *   recursion. Instead we must place the refcount blocks in a way that

     *   they can describe them themselves.

     *

     * - We need to consider that at this point we are inside update_refcounts

     *   and potentially doing an initial refcount increase. This means that

     *   some clusters have already been allocated by the caller, but their

     *   refcount isn't accurate yet. If we allocate clusters for metadata, we

     *   need to return -EAGAIN to signal the caller that it needs to restart

     *   the search for free clusters.

     *

     * - alloc_clusters_noref and qcow2_free_clusters may load a different

     *   refcount block into the cache

     */</comment>



    <expr_stmt pos:start="111:5" pos:end="111:27"><expr pos:start="111:5" pos:end="111:26"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:19">refcount_block</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:26">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:73">/* We write to the refcount table, so we might depend on L2 tables */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:51"><expr pos:start="117:5" pos:end="117:50"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:50"><name pos:start="117:11" pos:end="117:27">qcow2_cache_flush</name><argument_list pos:start="117:28" pos:end="117:50">(<argument pos:start="117:29" pos:end="117:30"><expr pos:start="117:29" pos:end="117:30"><name pos:start="117:29" pos:end="117:30">bs</name></expr></argument>, <argument pos:start="117:33" pos:end="117:49"><expr pos:start="117:33" pos:end="117:49"><name pos:start="117:33" pos:end="117:49"><name pos:start="117:33" pos:end="117:33">s</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:16">(<expr pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">&lt;</operator> <literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>)</condition> <block pos:start="119:18" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:19">

        <return pos:start="121:9" pos:end="121:19">return <expr pos:start="121:16" pos:end="121:18"><name pos:start="121:16" pos:end="121:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:64">/* Allocate the refcount block itself and mark it as used */</comment>

    <decl_stmt pos:start="129:5" pos:end="129:66"><decl pos:start="129:5" pos:end="129:65"><type pos:start="129:5" pos:end="129:11"><name pos:start="129:5" pos:end="129:11">int64_t</name></type> <name pos:start="129:13" pos:end="129:21">new_block</name> <init pos:start="129:23" pos:end="129:65">= <expr pos:start="129:25" pos:end="129:65"><call pos:start="129:25" pos:end="129:65"><name pos:start="129:25" pos:end="129:44">alloc_clusters_noref</name><argument_list pos:start="129:45" pos:end="129:65">(<argument pos:start="129:46" pos:end="129:47"><expr pos:start="129:46" pos:end="129:47"><name pos:start="129:46" pos:end="129:47">bs</name></expr></argument>, <argument pos:start="129:50" pos:end="129:64"><expr pos:start="129:50" pos:end="129:64"><name pos:start="129:50" pos:end="129:64"><name pos:start="129:50" pos:end="129:50">s</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:64">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="131:5" pos:end="140:0"><if pos:start="131:5" pos:end="140:0">if <condition pos:start="131:8" pos:end="131:22">(<expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:17">new_block</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>)</condition> <block pos:start="131:24" pos:end="140:0">{<block_content pos:start="133:9" pos:end="133:25">

        <return pos:start="133:9" pos:end="133:25">return <expr pos:start="133:16" pos:end="133:24"><name pos:start="133:16" pos:end="133:24">new_block</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="139:1" pos:end="139:19">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="141:5" pos:end="148:0"><expr pos:start="141:5" pos:end="145:74"><call pos:start="141:5" pos:end="145:74"><name pos:start="141:5" pos:end="141:11">fprintf</name><argument_list pos:start="141:12" pos:end="145:74">(<argument pos:start="141:13" pos:end="141:18"><expr pos:start="141:13" pos:end="141:18"><name pos:start="141:13" pos:end="141:18">stderr</name></expr></argument>, <argument pos:start="141:21" pos:end="143:27"><expr pos:start="141:21" pos:end="143:27"><literal type="string" pos:start="141:21" pos:end="141:61">"qcow2: Allocate refcount block %d for %"</literal> <name pos:start="141:63" pos:end="141:68">PRIx64</name>

        <literal type="string" pos:start="143:9" pos:end="143:15">" at %"</literal> <name pos:start="143:17" pos:end="143:22">PRIx64</name> <literal type="string" pos:start="143:24" pos:end="143:27">"\n"</literal></expr></argument>,

        <argument pos:start="145:9" pos:end="145:28"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:28">refcount_table_index</name></expr></argument>, <argument pos:start="145:31" pos:end="145:62"><expr pos:start="145:31" pos:end="145:62"><name pos:start="145:31" pos:end="145:43">cluster_index</name> <operator pos:start="145:45" pos:end="145:46">&lt;&lt;</operator> <name pos:start="145:48" pos:end="145:62"><name pos:start="145:48" pos:end="145:48">s</name><operator pos:start="145:49" pos:end="145:50">-&gt;</operator><name pos:start="145:51" pos:end="145:62">cluster_bits</name></name></expr></argument>, <argument pos:start="145:65" pos:end="145:73"><expr pos:start="145:65" pos:end="145:73"><name pos:start="145:65" pos:end="145:73">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="151:5" pos:end="225:5"><if pos:start="151:5" pos:end="179:5">if <condition pos:start="151:8" pos:end="151:79">(<expr pos:start="151:9" pos:end="151:78"><call pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:30">in_same_refcount_block</name><argument_list pos:start="151:31" pos:end="151:78">(<argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><name pos:start="151:32" pos:end="151:32">s</name></expr></argument>, <argument pos:start="151:35" pos:end="151:43"><expr pos:start="151:35" pos:end="151:43"><name pos:start="151:35" pos:end="151:43">new_block</name></expr></argument>, <argument pos:start="151:46" pos:end="151:77"><expr pos:start="151:46" pos:end="151:77"><name pos:start="151:46" pos:end="151:58">cluster_index</name> <operator pos:start="151:60" pos:end="151:61">&lt;&lt;</operator> <name pos:start="151:63" pos:end="151:77"><name pos:start="151:63" pos:end="151:63">s</name><operator pos:start="151:64" pos:end="151:65">-&gt;</operator><name pos:start="151:66" pos:end="151:77">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:81" pos:end="179:5">{<block_content pos:start="155:9" pos:end="177:57">

        <comment type="block" pos:start="153:9" pos:end="153:60">/* Zero the new refcount block before updating it */</comment>

        <expr_stmt pos:start="155:9" pos:end="157:52"><expr pos:start="155:9" pos:end="157:51"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="157:51"><name pos:start="155:15" pos:end="155:35">qcow2_cache_get_empty</name><argument_list pos:start="155:36" pos:end="157:51">(<argument pos:start="155:37" pos:end="155:38"><expr pos:start="155:37" pos:end="155:38"><name pos:start="155:37" pos:end="155:38">bs</name></expr></argument>, <argument pos:start="155:41" pos:end="155:63"><expr pos:start="155:41" pos:end="155:63"><name pos:start="155:41" pos:end="155:63"><name pos:start="155:41" pos:end="155:41">s</name><operator pos:start="155:42" pos:end="155:43">-&gt;</operator><name pos:start="155:44" pos:end="155:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="155:66" pos:end="155:74"><expr pos:start="155:66" pos:end="155:74"><name pos:start="155:66" pos:end="155:74">new_block</name></expr></argument>,

                                    <argument pos:start="157:37" pos:end="157:50"><expr pos:start="157:37" pos:end="157:50"><name pos:start="157:37" pos:end="157:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:20">(<expr pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">&lt;</operator> <literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>)</condition> <block pos:start="159:22" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:28">

            <goto pos:start="161:13" pos:end="161:28">goto <name pos:start="161:18" pos:end="161:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:52"><expr pos:start="167:9" pos:end="167:51"><call pos:start="167:9" pos:end="167:51"><name pos:start="167:9" pos:end="167:14">memset</name><argument_list pos:start="167:15" pos:end="167:51">(<argument pos:start="167:16" pos:end="167:30"><expr pos:start="167:16" pos:end="167:30"><operator pos:start="167:16" pos:end="167:16">*</operator><name pos:start="167:17" pos:end="167:30">refcount_block</name></expr></argument>, <argument pos:start="167:33" pos:end="167:33"><expr pos:start="167:33" pos:end="167:33"><literal type="number" pos:start="167:33" pos:end="167:33">0</literal></expr></argument>, <argument pos:start="167:36" pos:end="167:50"><expr pos:start="167:36" pos:end="167:50"><name pos:start="167:36" pos:end="167:50"><name pos:start="167:36" pos:end="167:36">s</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="171:9" pos:end="171:66">/* The block describes itself, need to update the cache */</comment>

        <decl_stmt pos:start="173:9" pos:end="175:41"><decl pos:start="173:9" pos:end="175:40"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:23">block_index</name> <init pos:start="173:25" pos:end="175:40">= <expr pos:start="173:27" pos:end="175:40"><operator pos:start="173:27" pos:end="173:27">(</operator><name pos:start="173:28" pos:end="173:36">new_block</name> <operator pos:start="173:38" pos:end="173:39">&gt;&gt;</operator> <name pos:start="173:41" pos:end="173:55"><name pos:start="173:41" pos:end="173:41">s</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:55">cluster_bits</name></name><operator pos:start="173:56" pos:end="173:56">)</operator> <operator pos:start="173:58" pos:end="173:58">&amp;</operator>

            <operator pos:start="175:13" pos:end="175:13">(</operator><name pos:start="175:14" pos:end="175:35"><name pos:start="175:14" pos:end="175:14">s</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:35">refcount_block_size</name></name> <operator pos:start="175:37" pos:end="175:37">-</operator> <literal type="number" pos:start="175:39" pos:end="175:39">1</literal><operator pos:start="175:40" pos:end="175:40">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:57"><expr pos:start="177:9" pos:end="177:56"><call pos:start="177:9" pos:end="177:56"><name pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:23">set_refcount</name></name><argument_list pos:start="177:24" pos:end="177:56">(<argument pos:start="177:25" pos:end="177:39"><expr pos:start="177:25" pos:end="177:39"><operator pos:start="177:25" pos:end="177:25">*</operator><name pos:start="177:26" pos:end="177:39">refcount_block</name></expr></argument>, <argument pos:start="177:42" pos:end="177:52"><expr pos:start="177:42" pos:end="177:52"><name pos:start="177:42" pos:end="177:52">block_index</name></expr></argument>, <argument pos:start="177:55" pos:end="177:55"><expr pos:start="177:55" pos:end="177:55"><literal type="number" pos:start="177:55" pos:end="177:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="225:5">else <block pos:start="179:12" pos:end="225:5">{<block_content pos:start="185:9" pos:end="223:52">

        <comment type="block" pos:start="181:9" pos:end="183:54">/* Described somewhere else. This can recurse at most twice before we

         * arrive at a block that describes itself. */</comment>

        <expr_stmt pos:start="185:9" pos:end="187:51"><expr pos:start="185:9" pos:end="187:50"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="187:50"><name pos:start="185:15" pos:end="185:29">update_refcount</name><argument_list pos:start="185:30" pos:end="187:50">(<argument pos:start="185:31" pos:end="185:32"><expr pos:start="185:31" pos:end="185:32"><name pos:start="185:31" pos:end="185:32">bs</name></expr></argument>, <argument pos:start="185:35" pos:end="185:43"><expr pos:start="185:35" pos:end="185:43"><name pos:start="185:35" pos:end="185:43">new_block</name></expr></argument>, <argument pos:start="185:46" pos:end="185:60"><expr pos:start="185:46" pos:end="185:60"><name pos:start="185:46" pos:end="185:60"><name pos:start="185:46" pos:end="185:46">s</name><operator pos:start="185:47" pos:end="185:48">-&gt;</operator><name pos:start="185:49" pos:end="185:60">cluster_size</name></name></expr></argument>, <argument pos:start="185:63" pos:end="185:63"><expr pos:start="185:63" pos:end="185:63"><literal type="number" pos:start="185:63" pos:end="185:63">1</literal></expr></argument>, <argument pos:start="185:66" pos:end="185:70"><expr pos:start="185:66" pos:end="185:70"><name pos:start="185:66" pos:end="185:70">false</name></expr></argument>,

                              <argument pos:start="187:31" pos:end="187:49"><expr pos:start="187:31" pos:end="187:49"><name pos:start="187:31" pos:end="187:49">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="193:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:20">(<expr pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">&lt;</operator> <literal type="number" pos:start="189:19" pos:end="189:19">0</literal></expr>)</condition> <block pos:start="189:22" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:28">

            <goto pos:start="191:13" pos:end="191:28">goto <name pos:start="191:18" pos:end="191:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:61"><expr pos:start="197:9" pos:end="197:60"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:60"><name pos:start="197:15" pos:end="197:31">qcow2_cache_flush</name><argument_list pos:start="197:32" pos:end="197:60">(<argument pos:start="197:33" pos:end="197:34"><expr pos:start="197:33" pos:end="197:34"><name pos:start="197:33" pos:end="197:34">bs</name></expr></argument>, <argument pos:start="197:37" pos:end="197:59"><expr pos:start="197:37" pos:end="197:59"><name pos:start="197:37" pos:end="197:59"><name pos:start="197:37" pos:end="197:37">s</name><operator pos:start="197:38" pos:end="197:39">-&gt;</operator><name pos:start="197:40" pos:end="197:59">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition> <block pos:start="199:22" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:28">

            <goto pos:start="201:13" pos:end="201:28">goto <name pos:start="201:18" pos:end="201:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="207:9" pos:end="209:60">/* Initialize the new refcount block only after updating its refcount,

         * update_refcount uses the refcount cache itself */</comment>

        <expr_stmt pos:start="211:9" pos:end="213:52"><expr pos:start="211:9" pos:end="213:51"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="213:51"><name pos:start="211:15" pos:end="211:35">qcow2_cache_get_empty</name><argument_list pos:start="211:36" pos:end="213:51">(<argument pos:start="211:37" pos:end="211:38"><expr pos:start="211:37" pos:end="211:38"><name pos:start="211:37" pos:end="211:38">bs</name></expr></argument>, <argument pos:start="211:41" pos:end="211:63"><expr pos:start="211:41" pos:end="211:63"><name pos:start="211:41" pos:end="211:63"><name pos:start="211:41" pos:end="211:41">s</name><operator pos:start="211:42" pos:end="211:43">-&gt;</operator><name pos:start="211:44" pos:end="211:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="211:66" pos:end="211:74"><expr pos:start="211:66" pos:end="211:74"><name pos:start="211:66" pos:end="211:74">new_block</name></expr></argument>,

                                    <argument pos:start="213:37" pos:end="213:50"><expr pos:start="213:37" pos:end="213:50"><name pos:start="213:37" pos:end="213:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:20">(<expr pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:15">ret</name> <operator pos:start="215:17" pos:end="215:17">&lt;</operator> <literal type="number" pos:start="215:19" pos:end="215:19">0</literal></expr>)</condition> <block pos:start="215:22" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:28">

            <goto pos:start="217:13" pos:end="217:28">goto <name pos:start="217:18" pos:end="217:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:52"><expr pos:start="223:9" pos:end="223:51"><call pos:start="223:9" pos:end="223:51"><name pos:start="223:9" pos:end="223:14">memset</name><argument_list pos:start="223:15" pos:end="223:51">(<argument pos:start="223:16" pos:end="223:30"><expr pos:start="223:16" pos:end="223:30"><operator pos:start="223:16" pos:end="223:16">*</operator><name pos:start="223:17" pos:end="223:30">refcount_block</name></expr></argument>, <argument pos:start="223:33" pos:end="223:33"><expr pos:start="223:33" pos:end="223:33"><literal type="number" pos:start="223:33" pos:end="223:33">0</literal></expr></argument>, <argument pos:start="223:36" pos:end="223:50"><expr pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:36">s</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:64">/* Now the new refcount block needs to be written to disk */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:56"><expr pos:start="231:5" pos:end="231:55"><call pos:start="231:5" pos:end="231:55"><name pos:start="231:5" pos:end="231:16">BLKDBG_EVENT</name><argument_list pos:start="231:17" pos:end="231:55">(<argument pos:start="231:18" pos:end="231:25"><expr pos:start="231:18" pos:end="231:25"><name pos:start="231:18" pos:end="231:25"><name pos:start="231:18" pos:end="231:19">bs</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:25">file</name></name></expr></argument>, <argument pos:start="231:28" pos:end="231:54"><expr pos:start="231:28" pos:end="231:54"><name pos:start="231:28" pos:end="231:54">BLKDBG_REFBLOCK_ALLOC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:79"><expr pos:start="233:5" pos:end="233:78"><call pos:start="233:5" pos:end="233:78"><name pos:start="233:5" pos:end="233:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="233:33" pos:end="233:78">(<argument pos:start="233:34" pos:end="233:35"><expr pos:start="233:34" pos:end="233:35"><name pos:start="233:34" pos:end="233:35">bs</name></expr></argument>, <argument pos:start="233:38" pos:end="233:60"><expr pos:start="233:38" pos:end="233:60"><name pos:start="233:38" pos:end="233:60"><name pos:start="233:38" pos:end="233:38">s</name><operator pos:start="233:39" pos:end="233:40">-&gt;</operator><name pos:start="233:41" pos:end="233:60">refcount_block_cache</name></name></expr></argument>, <argument pos:start="233:63" pos:end="233:77"><expr pos:start="233:63" pos:end="233:77"><operator pos:start="233:63" pos:end="233:63">*</operator><name pos:start="233:64" pos:end="233:77">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:57"><expr pos:start="235:5" pos:end="235:56"><name pos:start="235:5" pos:end="235:7">ret</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:56"><name pos:start="235:11" pos:end="235:27">qcow2_cache_flush</name><argument_list pos:start="235:28" pos:end="235:56">(<argument pos:start="235:29" pos:end="235:30"><expr pos:start="235:29" pos:end="235:30"><name pos:start="235:29" pos:end="235:30">bs</name></expr></argument>, <argument pos:start="235:33" pos:end="235:55"><expr pos:start="235:33" pos:end="235:55"><name pos:start="235:33" pos:end="235:55"><name pos:start="235:33" pos:end="235:33">s</name><operator pos:start="235:34" pos:end="235:35">-&gt;</operator><name pos:start="235:36" pos:end="235:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="241:5"><if pos:start="237:5" pos:end="241:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:24">

        <goto pos:start="239:9" pos:end="239:24">goto <name pos:start="239:14" pos:end="239:23">fail_block</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:75">/* If the refcount table is big enough, just hook the block up there */</comment>

    <if_stmt pos:start="247:5" pos:end="277:5"><if pos:start="247:5" pos:end="277:5">if <condition pos:start="247:8" pos:end="247:54">(<expr pos:start="247:9" pos:end="247:53"><name pos:start="247:9" pos:end="247:28">refcount_table_index</name> <operator pos:start="247:30" pos:end="247:30">&lt;</operator> <name pos:start="247:32" pos:end="247:53"><name pos:start="247:32" pos:end="247:32">s</name><operator pos:start="247:33" pos:end="247:34">-&gt;</operator><name pos:start="247:35" pos:end="247:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="247:56" pos:end="277:5">{<block_content pos:start="249:9" pos:end="275:23">

        <decl_stmt pos:start="249:9" pos:end="249:49"><decl pos:start="249:9" pos:end="249:48"><type pos:start="249:9" pos:end="249:16"><name pos:start="249:9" pos:end="249:16">uint64_t</name></type> <name pos:start="249:18" pos:end="249:23">data64</name> <init pos:start="249:25" pos:end="249:48">= <expr pos:start="249:27" pos:end="249:48"><call pos:start="249:27" pos:end="249:48"><name pos:start="249:27" pos:end="249:37">cpu_to_be64</name><argument_list pos:start="249:38" pos:end="249:48">(<argument pos:start="249:39" pos:end="249:47"><expr pos:start="249:39" pos:end="249:47"><name pos:start="249:39" pos:end="249:47">new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:61"><expr pos:start="251:9" pos:end="251:60"><call pos:start="251:9" pos:end="251:60"><name pos:start="251:9" pos:end="251:20">BLKDBG_EVENT</name><argument_list pos:start="251:21" pos:end="251:60">(<argument pos:start="251:22" pos:end="251:29"><expr pos:start="251:22" pos:end="251:29"><name pos:start="251:22" pos:end="251:29"><name pos:start="251:22" pos:end="251:23">bs</name><operator pos:start="251:24" pos:end="251:25">-&gt;</operator><name pos:start="251:26" pos:end="251:29">file</name></name></expr></argument>, <argument pos:start="251:32" pos:end="251:59"><expr pos:start="251:32" pos:end="251:59"><name pos:start="251:32" pos:end="251:59">BLKDBG_REFBLOCK_ALLOC_HOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="257:37"><expr pos:start="253:9" pos:end="257:36"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="257:36"><name pos:start="253:15" pos:end="253:30">bdrv_pwrite_sync</name><argument_list pos:start="253:31" pos:end="257:36">(<argument pos:start="253:32" pos:end="253:43"><expr pos:start="253:32" pos:end="253:43"><name pos:start="253:32" pos:end="253:43"><name pos:start="253:32" pos:end="253:33">bs</name><operator pos:start="253:34" pos:end="253:35">-&gt;</operator><name pos:start="253:36" pos:end="253:39">file</name><operator pos:start="253:40" pos:end="253:41">-&gt;</operator><name pos:start="253:42" pos:end="253:43">bs</name></name></expr></argument>,

            <argument pos:start="255:13" pos:end="255:78"><expr pos:start="255:13" pos:end="255:78"><name pos:start="255:13" pos:end="255:36"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:36">refcount_table_offset</name></name> <operator pos:start="255:38" pos:end="255:38">+</operator> <name pos:start="255:40" pos:end="255:59">refcount_table_index</name> <operator pos:start="255:61" pos:end="255:61">*</operator> <sizeof pos:start="255:63" pos:end="255:78">sizeof<argument_list pos:start="255:69" pos:end="255:78">(<argument pos:start="255:70" pos:end="255:77"><expr pos:start="255:70" pos:end="255:77"><name pos:start="255:70" pos:end="255:77">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

            <argument pos:start="257:13" pos:end="257:19"><expr pos:start="257:13" pos:end="257:19"><operator pos:start="257:13" pos:end="257:13">&amp;</operator><name pos:start="257:14" pos:end="257:19">data64</name></expr></argument>, <argument pos:start="257:22" pos:end="257:35"><expr pos:start="257:22" pos:end="257:35"><sizeof pos:start="257:22" pos:end="257:35">sizeof<argument_list pos:start="257:28" pos:end="257:35">(<argument pos:start="257:29" pos:end="257:34"><expr pos:start="257:29" pos:end="257:34"><name pos:start="257:29" pos:end="257:34">data64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:20">(<expr pos:start="259:13" pos:end="259:19"><name pos:start="259:13" pos:end="259:15">ret</name> <operator pos:start="259:17" pos:end="259:17">&lt;</operator> <literal type="number" pos:start="259:19" pos:end="259:19">0</literal></expr>)</condition> <block pos:start="259:22" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:28">

            <goto pos:start="261:13" pos:end="261:28">goto <name pos:start="261:18" pos:end="261:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="267:9" pos:end="267:60"><expr pos:start="267:9" pos:end="267:59"><name pos:start="267:9" pos:end="267:47"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:25">refcount_table</name><index pos:start="267:26" pos:end="267:47">[<expr pos:start="267:27" pos:end="267:46"><name pos:start="267:27" pos:end="267:46">refcount_table_index</name></expr>]</index></name> <operator pos:start="267:49" pos:end="267:49">=</operator> <name pos:start="267:51" pos:end="267:59">new_block</name></expr>;</expr_stmt>



        <comment type="block" pos:start="271:9" pos:end="273:49">/* The new refcount block may be where the caller intended to put its

         * data, so let it restart the search. */</comment>

        <return pos:start="275:9" pos:end="275:23">return <expr pos:start="275:16" pos:end="275:22"><operator pos:start="275:16" pos:end="275:16">-</operator><name pos:start="275:17" pos:end="275:22">EAGAIN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:65"><expr pos:start="281:5" pos:end="281:64"><call pos:start="281:5" pos:end="281:64"><name pos:start="281:5" pos:end="281:19">qcow2_cache_put</name><argument_list pos:start="281:20" pos:end="281:64">(<argument pos:start="281:21" pos:end="281:22"><expr pos:start="281:21" pos:end="281:22"><name pos:start="281:21" pos:end="281:22">bs</name></expr></argument>, <argument pos:start="281:25" pos:end="281:47"><expr pos:start="281:25" pos:end="281:47"><name pos:start="281:25" pos:end="281:47"><name pos:start="281:25" pos:end="281:25">s</name><operator pos:start="281:26" pos:end="281:27">-&gt;</operator><name pos:start="281:28" pos:end="281:47">refcount_block_cache</name></name></expr></argument>, <argument pos:start="281:50" pos:end="281:63"><expr pos:start="281:50" pos:end="281:63"><name pos:start="281:50" pos:end="281:63">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="285:5" pos:end="305:7">/*

     * If we come here, we need to grow the refcount table. Again, a new

     * refcount table needs some space and we can't simply allocate to avoid

     * endless recursion.

     *

     * Therefore let's grab new refcount blocks at the end of the image, which

     * will describe themselves and the new refcount table. This way we can

     * reference them only in the new table and do the switch to the new

     * refcount table at once without producing an inconsistent state in

     * between.

     */</comment>

    <expr_stmt pos:start="307:5" pos:end="307:49"><expr pos:start="307:5" pos:end="307:48"><call pos:start="307:5" pos:end="307:48"><name pos:start="307:5" pos:end="307:16">BLKDBG_EVENT</name><argument_list pos:start="307:17" pos:end="307:48">(<argument pos:start="307:18" pos:end="307:25"><expr pos:start="307:18" pos:end="307:25"><name pos:start="307:18" pos:end="307:25"><name pos:start="307:18" pos:end="307:19">bs</name><operator pos:start="307:20" pos:end="307:21">-&gt;</operator><name pos:start="307:22" pos:end="307:25">file</name></name></expr></argument>, <argument pos:start="307:28" pos:end="307:47"><expr pos:start="307:28" pos:end="307:47"><name pos:start="307:28" pos:end="307:47">BLKDBG_REFTABLE_GROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="311:5" pos:end="331:7">/* Calculate the number of refcount blocks needed so far; this will be the

     * basis for calculating the index of the first cluster used for the

     * self-describing refcount structures which we are about to create.

     *

     * Because we reached this point, there cannot be any refcount entries for

     * cluster_index or higher indices yet. However, because new_block has been

     * allocated to describe that cluster (and it will assume this role later

     * on), we cannot use that index; also, new_block may actually have a higher

     * cluster index than cluster_index, so it needs to be taken into account

     * here (and 1 needs to be added to its value because that cluster is used).

     */</comment>

    <decl_stmt pos:start="333:5" pos:end="337:64"><decl pos:start="333:5" pos:end="337:63"><type pos:start="333:5" pos:end="333:12"><name pos:start="333:5" pos:end="333:12">uint64_t</name></type> <name pos:start="333:14" pos:end="333:24">blocks_used</name> <init pos:start="333:26" pos:end="337:63">= <expr pos:start="333:28" pos:end="337:63"><call pos:start="333:28" pos:end="337:63"><name pos:start="333:28" pos:end="333:39">DIV_ROUND_UP</name><argument_list pos:start="333:40" pos:end="337:63">(<argument pos:start="333:41" pos:end="335:79"><expr pos:start="333:41" pos:end="335:79"><call pos:start="333:41" pos:end="335:79"><name pos:start="333:41" pos:end="333:43">MAX</name><argument_list pos:start="333:44" pos:end="335:79">(<argument pos:start="333:45" pos:end="333:61"><expr pos:start="333:45" pos:end="333:61"><name pos:start="333:45" pos:end="333:57">cluster_index</name> <operator pos:start="333:59" pos:end="333:59">+</operator> <literal type="number" pos:start="333:61" pos:end="333:61">1</literal></expr></argument>,

                                            <argument pos:start="335:45" pos:end="335:78"><expr pos:start="335:45" pos:end="335:78"><operator pos:start="335:45" pos:end="335:45">(</operator><name pos:start="335:46" pos:end="335:54">new_block</name> <operator pos:start="335:56" pos:end="335:57">&gt;&gt;</operator> <name pos:start="335:59" pos:end="335:73"><name pos:start="335:59" pos:end="335:59">s</name><operator pos:start="335:60" pos:end="335:61">-&gt;</operator><name pos:start="335:62" pos:end="335:73">cluster_bits</name></name><operator pos:start="335:74" pos:end="335:74">)</operator> <operator pos:start="335:76" pos:end="335:76">+</operator> <literal type="number" pos:start="335:78" pos:end="335:78">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="337:41" pos:end="337:62"><expr pos:start="337:41" pos:end="337:62"><name pos:start="337:41" pos:end="337:62"><name pos:start="337:41" pos:end="337:41">s</name><operator pos:start="337:42" pos:end="337:43">-&gt;</operator><name pos:start="337:44" pos:end="337:62">refcount_block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="341:5" pos:end="345:5"><if pos:start="341:5" pos:end="345:5">if <condition pos:start="341:8" pos:end="341:64">(<expr pos:start="341:9" pos:end="341:63"><name pos:start="341:9" pos:end="341:19">blocks_used</name> <operator pos:start="341:21" pos:end="341:21">&gt;</operator> <name pos:start="341:23" pos:end="341:44">QCOW_MAX_REFTABLE_SIZE</name> <operator pos:start="341:46" pos:end="341:46">/</operator> <sizeof pos:start="341:48" pos:end="341:63">sizeof<argument_list pos:start="341:54" pos:end="341:63">(<argument pos:start="341:55" pos:end="341:62"><expr pos:start="341:55" pos:end="341:62"><name pos:start="341:55" pos:end="341:62">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="341:66" pos:end="345:5">{<block_content pos:start="343:9" pos:end="343:22">

        <return pos:start="343:9" pos:end="343:22">return <expr pos:start="343:16" pos:end="343:21"><operator pos:start="343:16" pos:end="343:16">-</operator><name pos:start="343:17" pos:end="343:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="349:5" pos:end="349:70">/* And now we need at least one block more for the new metadata */</comment>

    <decl_stmt pos:start="351:5" pos:end="351:71"><decl pos:start="351:5" pos:end="351:70"><type pos:start="351:5" pos:end="351:12"><name pos:start="351:5" pos:end="351:12">uint64_t</name></type> <name pos:start="351:14" pos:end="351:23">table_size</name> <init pos:start="351:25" pos:end="351:70">= <expr pos:start="351:27" pos:end="351:70"><call pos:start="351:27" pos:end="351:70"><name pos:start="351:27" pos:end="351:50">next_refcount_table_size</name><argument_list pos:start="351:51" pos:end="351:70">(<argument pos:start="351:52" pos:end="351:52"><expr pos:start="351:52" pos:end="351:52"><name pos:start="351:52" pos:end="351:52">s</name></expr></argument>, <argument pos:start="351:55" pos:end="351:69"><expr pos:start="351:55" pos:end="351:69"><name pos:start="351:55" pos:end="351:65">blocks_used</name> <operator pos:start="351:67" pos:end="351:67">+</operator> <literal type="number" pos:start="351:69" pos:end="351:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="353:5" pos:end="353:29"><decl pos:start="353:5" pos:end="353:28"><type pos:start="353:5" pos:end="353:12"><name pos:start="353:5" pos:end="353:12">uint64_t</name></type> <name pos:start="353:14" pos:end="353:28">last_table_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="355:5" pos:end="355:29"><decl pos:start="355:5" pos:end="355:28"><type pos:start="355:5" pos:end="355:12"><name pos:start="355:5" pos:end="355:12">uint64_t</name></type> <name pos:start="355:14" pos:end="355:28">blocks_clusters</name></decl>;</decl_stmt>

    <do pos:start="357:5" pos:end="388:0">do <block pos:start="357:8" pos:end="383:5">{<block_content pos:start="359:9" pos:end="379:39">

        <decl_stmt pos:start="359:9" pos:end="361:63"><decl pos:start="359:9" pos:end="361:62"><type pos:start="359:9" pos:end="359:16"><name pos:start="359:9" pos:end="359:16">uint64_t</name></type> <name pos:start="359:18" pos:end="359:31">table_clusters</name> <init pos:start="359:33" pos:end="361:62">=

            <expr pos:start="361:13" pos:end="361:62"><call pos:start="361:13" pos:end="361:62"><name pos:start="361:13" pos:end="361:28">size_to_clusters</name><argument_list pos:start="361:29" pos:end="361:62">(<argument pos:start="361:30" pos:end="361:30"><expr pos:start="361:30" pos:end="361:30"><name pos:start="361:30" pos:end="361:30">s</name></expr></argument>, <argument pos:start="361:33" pos:end="361:61"><expr pos:start="361:33" pos:end="361:61"><name pos:start="361:33" pos:end="361:42">table_size</name> <operator pos:start="361:44" pos:end="361:44">*</operator> <sizeof pos:start="361:46" pos:end="361:61">sizeof<argument_list pos:start="361:52" pos:end="361:61">(<argument pos:start="361:53" pos:end="361:60"><expr pos:start="361:53" pos:end="361:60"><name pos:start="361:53" pos:end="361:60">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="363:9" pos:end="367:38"><expr pos:start="363:9" pos:end="367:37"><name pos:start="363:9" pos:end="363:23">blocks_clusters</name> <operator pos:start="363:25" pos:end="363:25">=</operator> <literal type="number" pos:start="363:27" pos:end="363:29">1</literal> <operator pos:start="363:29" pos:end="363:29">+</operator>

            <operator pos:start="365:13" pos:end="365:13">(</operator><operator pos:start="365:14" pos:end="365:14">(</operator><name pos:start="365:15" pos:end="365:28">table_clusters</name> <operator pos:start="365:30" pos:end="365:30">+</operator> <name pos:start="365:32" pos:end="365:53"><name pos:start="365:32" pos:end="365:32">s</name><operator pos:start="365:33" pos:end="365:34">-&gt;</operator><name pos:start="365:35" pos:end="365:53">refcount_block_size</name></name> <operator pos:start="365:55" pos:end="365:55">-</operator> <literal type="number" pos:start="365:57" pos:end="365:57">1</literal><operator pos:start="365:58" pos:end="365:58">)</operator>

            <operator pos:start="367:13" pos:end="367:13">/</operator> <name pos:start="367:15" pos:end="367:36"><name pos:start="367:15" pos:end="367:15">s</name><operator pos:start="367:16" pos:end="367:17">-&gt;</operator><name pos:start="367:18" pos:end="367:36">refcount_block_size</name></name><operator pos:start="367:37" pos:end="367:37">)</operator></expr>;</expr_stmt>

        <decl_stmt pos:start="369:9" pos:end="369:66"><decl pos:start="369:9" pos:end="369:65"><type pos:start="369:9" pos:end="369:16"><name pos:start="369:9" pos:end="369:16">uint64_t</name></type> <name pos:start="369:18" pos:end="369:30">meta_clusters</name> <init pos:start="369:32" pos:end="369:65">= <expr pos:start="369:34" pos:end="369:65"><name pos:start="369:34" pos:end="369:47">table_clusters</name> <operator pos:start="369:49" pos:end="369:49">+</operator> <name pos:start="369:51" pos:end="369:65">blocks_clusters</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="373:9" pos:end="373:37"><expr pos:start="373:9" pos:end="373:36"><name pos:start="373:9" pos:end="373:23">last_table_size</name> <operator pos:start="373:25" pos:end="373:25">=</operator> <name pos:start="373:27" pos:end="373:36">table_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="379:39"><expr pos:start="375:9" pos:end="379:38"><name pos:start="375:9" pos:end="375:18">table_size</name> <operator pos:start="375:20" pos:end="375:20">=</operator> <call pos:start="375:22" pos:end="379:38"><name pos:start="375:22" pos:end="375:45">next_refcount_table_size</name><argument_list pos:start="375:46" pos:end="379:38">(<argument pos:start="375:47" pos:end="375:47"><expr pos:start="375:47" pos:end="375:47"><name pos:start="375:47" pos:end="375:47">s</name></expr></argument>, <argument pos:start="375:50" pos:end="379:37"><expr pos:start="375:50" pos:end="379:37"><name pos:start="375:50" pos:end="375:60">blocks_used</name> <operator pos:start="375:62" pos:end="375:62">+</operator>

            <operator pos:start="377:13" pos:end="377:13">(</operator><operator pos:start="377:14" pos:end="377:14">(</operator><name pos:start="377:15" pos:end="377:27">meta_clusters</name> <operator pos:start="377:29" pos:end="377:29">+</operator> <name pos:start="377:31" pos:end="377:52"><name pos:start="377:31" pos:end="377:31">s</name><operator pos:start="377:32" pos:end="377:33">-&gt;</operator><name pos:start="377:34" pos:end="377:52">refcount_block_size</name></name> <operator pos:start="377:54" pos:end="377:54">-</operator> <literal type="number" pos:start="377:56" pos:end="377:56">1</literal><operator pos:start="377:57" pos:end="377:57">)</operator>

            <operator pos:start="379:13" pos:end="379:13">/</operator> <name pos:start="379:15" pos:end="379:36"><name pos:start="379:15" pos:end="379:15">s</name><operator pos:start="379:16" pos:end="379:17">-&gt;</operator><name pos:start="379:18" pos:end="379:36">refcount_block_size</name></name><operator pos:start="379:37" pos:end="379:37">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block> while <condition pos:start="383:13" pos:end="383:43">(<expr pos:start="383:14" pos:end="383:42"><name pos:start="383:14" pos:end="383:28">last_table_size</name> <operator pos:start="383:30" pos:end="383:31">!=</operator> <name pos:start="383:33" pos:end="383:42">table_size</name></expr>)</condition>;</do>



<cpp:ifdef pos:start="387:1" pos:end="387:19">#<cpp:directive pos:start="387:2" pos:end="387:6">ifdef</cpp:directive> <name pos:start="387:8" pos:end="387:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="389:5" pos:end="394:0"><expr pos:start="389:5" pos:end="391:43"><call pos:start="389:5" pos:end="391:43"><name pos:start="389:5" pos:end="389:11">fprintf</name><argument_list pos:start="389:12" pos:end="391:43">(<argument pos:start="389:13" pos:end="389:18"><expr pos:start="389:13" pos:end="389:18"><name pos:start="389:13" pos:end="389:18">stderr</name></expr></argument>, <argument pos:start="389:21" pos:end="389:77"><expr pos:start="389:21" pos:end="389:77"><literal type="string" pos:start="389:21" pos:end="389:50">"qcow2: Grow refcount table %"</literal> <name pos:start="389:52" pos:end="389:57">PRId32</name> <literal type="string" pos:start="389:59" pos:end="389:65">" =&gt; %"</literal> <name pos:start="389:67" pos:end="389:72">PRId64</name> <literal type="string" pos:start="389:74" pos:end="389:77">"\n"</literal></expr></argument>,

        <argument pos:start="391:9" pos:end="391:30"><expr pos:start="391:9" pos:end="391:30"><name pos:start="391:9" pos:end="391:30"><name pos:start="391:9" pos:end="391:9">s</name><operator pos:start="391:10" pos:end="391:11">-&gt;</operator><name pos:start="391:12" pos:end="391:30">refcount_table_size</name></name></expr></argument>, <argument pos:start="391:33" pos:end="391:42"><expr pos:start="391:33" pos:end="391:42"><name pos:start="391:33" pos:end="391:42">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="393:1" pos:end="393:6">#<cpp:directive pos:start="393:2" pos:end="393:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="397:5" pos:end="397:50">/* Create the new refcount table and blocks */</comment>

    <decl_stmt pos:start="399:5" pos:end="401:24"><decl pos:start="399:5" pos:end="401:23"><type pos:start="399:5" pos:end="399:12"><name pos:start="399:5" pos:end="399:12">uint64_t</name></type> <name pos:start="399:14" pos:end="399:24">meta_offset</name> <init pos:start="399:26" pos:end="401:23">= <expr pos:start="399:28" pos:end="401:23"><operator pos:start="399:28" pos:end="399:28">(</operator><name pos:start="399:29" pos:end="399:39">blocks_used</name> <operator pos:start="399:41" pos:end="399:41">*</operator> <name pos:start="399:43" pos:end="399:64"><name pos:start="399:43" pos:end="399:43">s</name><operator pos:start="399:44" pos:end="399:45">-&gt;</operator><name pos:start="399:46" pos:end="399:64">refcount_block_size</name></name><operator pos:start="399:65" pos:end="399:65">)</operator> <operator pos:start="399:67" pos:end="399:67">*</operator>

        <name pos:start="401:9" pos:end="401:23"><name pos:start="401:9" pos:end="401:9">s</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:23">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="403:5" pos:end="403:76"><decl pos:start="403:5" pos:end="403:75"><type pos:start="403:5" pos:end="403:12"><name pos:start="403:5" pos:end="403:12">uint64_t</name></type> <name pos:start="403:14" pos:end="403:25">table_offset</name> <init pos:start="403:27" pos:end="403:75">= <expr pos:start="403:29" pos:end="403:75"><name pos:start="403:29" pos:end="403:39">meta_offset</name> <operator pos:start="403:41" pos:end="403:41">+</operator> <name pos:start="403:43" pos:end="403:57">blocks_clusters</name> <operator pos:start="403:59" pos:end="403:59">*</operator> <name pos:start="403:61" pos:end="403:75"><name pos:start="403:61" pos:end="403:61">s</name><operator pos:start="403:62" pos:end="403:63">-&gt;</operator><name pos:start="403:64" pos:end="403:75">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="405:5" pos:end="405:59"><decl pos:start="405:5" pos:end="405:58"><type pos:start="405:5" pos:end="405:14"><name pos:start="405:5" pos:end="405:12">uint64_t</name> <modifier pos:start="405:14" pos:end="405:14">*</modifier></type><name pos:start="405:15" pos:end="405:23">new_table</name> <init pos:start="405:25" pos:end="405:58">= <expr pos:start="405:27" pos:end="405:58"><call pos:start="405:27" pos:end="405:58"><name pos:start="405:27" pos:end="405:36">g_try_new0</name><argument_list pos:start="405:37" pos:end="405:58">(<argument pos:start="405:38" pos:end="405:45"><expr pos:start="405:38" pos:end="405:45"><name pos:start="405:38" pos:end="405:45">uint64_t</name></expr></argument>, <argument pos:start="405:48" pos:end="405:57"><expr pos:start="405:48" pos:end="405:57"><name pos:start="405:48" pos:end="405:57">table_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="407:5" pos:end="407:72"><decl pos:start="407:5" pos:end="407:71"><type pos:start="407:5" pos:end="407:10"><name pos:start="407:5" pos:end="407:8">void</name> <modifier pos:start="407:10" pos:end="407:10">*</modifier></type><name pos:start="407:11" pos:end="407:20">new_blocks</name> <init pos:start="407:22" pos:end="407:71">= <expr pos:start="407:24" pos:end="407:71"><call pos:start="407:24" pos:end="407:71"><name pos:start="407:24" pos:end="407:36">g_try_malloc0</name><argument_list pos:start="407:37" pos:end="407:71">(<argument pos:start="407:38" pos:end="407:70"><expr pos:start="407:38" pos:end="407:70"><name pos:start="407:38" pos:end="407:52">blocks_clusters</name> <operator pos:start="407:54" pos:end="407:54">*</operator> <name pos:start="407:56" pos:end="407:70"><name pos:start="407:56" pos:end="407:56">s</name><operator pos:start="407:57" pos:end="407:58">-&gt;</operator><name pos:start="407:59" pos:end="407:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="411:5" pos:end="411:50"><expr pos:start="411:5" pos:end="411:49"><call pos:start="411:5" pos:end="411:49"><name pos:start="411:5" pos:end="411:10">assert</name><argument_list pos:start="411:11" pos:end="411:49">(<argument pos:start="411:12" pos:end="411:48"><expr pos:start="411:12" pos:end="411:48"><name pos:start="411:12" pos:end="411:21">table_size</name> <operator pos:start="411:23" pos:end="411:23">&gt;</operator> <literal type="number" pos:start="411:25" pos:end="411:25">0</literal> <operator pos:start="411:27" pos:end="411:28">&amp;&amp;</operator> <name pos:start="411:30" pos:end="411:44">blocks_clusters</name> <operator pos:start="411:46" pos:end="411:46">&gt;</operator> <literal type="number" pos:start="411:48" pos:end="411:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="413:5" pos:end="419:5"><if pos:start="413:5" pos:end="419:5">if <condition pos:start="413:8" pos:end="413:48">(<expr pos:start="413:9" pos:end="413:47"><name pos:start="413:9" pos:end="413:17">new_table</name> <operator pos:start="413:19" pos:end="413:20">==</operator> <name pos:start="413:22" pos:end="413:25">NULL</name> <operator pos:start="413:27" pos:end="413:28">||</operator> <name pos:start="413:30" pos:end="413:39">new_blocks</name> <operator pos:start="413:41" pos:end="413:42">==</operator> <name pos:start="413:44" pos:end="413:47">NULL</name></expr>)</condition> <block pos:start="413:50" pos:end="419:5">{<block_content pos:start="415:9" pos:end="417:24">

        <expr_stmt pos:start="415:9" pos:end="415:22"><expr pos:start="415:9" pos:end="415:21"><name pos:start="415:9" pos:end="415:11">ret</name> <operator pos:start="415:13" pos:end="415:13">=</operator> <operator pos:start="415:15" pos:end="415:15">-</operator><name pos:start="415:16" pos:end="415:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="417:9" pos:end="417:24">goto <name pos:start="417:14" pos:end="417:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="423:5" pos:end="423:37">/* Fill the new refcount table */</comment>

    <expr_stmt pos:start="425:5" pos:end="427:51"><expr pos:start="425:5" pos:end="427:50"><call pos:start="425:5" pos:end="427:50"><name pos:start="425:5" pos:end="425:10">memcpy</name><argument_list pos:start="425:11" pos:end="427:50">(<argument pos:start="425:12" pos:end="425:20"><expr pos:start="425:12" pos:end="425:20"><name pos:start="425:12" pos:end="425:20">new_table</name></expr></argument>, <argument pos:start="425:23" pos:end="425:39"><expr pos:start="425:23" pos:end="425:39"><name pos:start="425:23" pos:end="425:39"><name pos:start="425:23" pos:end="425:23">s</name><operator pos:start="425:24" pos:end="425:25">-&gt;</operator><name pos:start="425:26" pos:end="425:39">refcount_table</name></name></expr></argument>,

        <argument pos:start="427:9" pos:end="427:49"><expr pos:start="427:9" pos:end="427:49"><name pos:start="427:9" pos:end="427:30"><name pos:start="427:9" pos:end="427:9">s</name><operator pos:start="427:10" pos:end="427:11">-&gt;</operator><name pos:start="427:12" pos:end="427:30">refcount_table_size</name></name> <operator pos:start="427:32" pos:end="427:32">*</operator> <sizeof pos:start="427:34" pos:end="427:49">sizeof<argument_list pos:start="427:40" pos:end="427:49">(<argument pos:start="427:41" pos:end="427:48"><expr pos:start="427:41" pos:end="427:48"><name pos:start="427:41" pos:end="427:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:48"><expr pos:start="429:5" pos:end="429:47"><name pos:start="429:5" pos:end="429:35"><name pos:start="429:5" pos:end="429:13">new_table</name><index pos:start="429:14" pos:end="429:35">[<expr pos:start="429:15" pos:end="429:34"><name pos:start="429:15" pos:end="429:34">refcount_table_index</name></expr>]</index></name> <operator pos:start="429:37" pos:end="429:37">=</operator> <name pos:start="429:39" pos:end="429:47">new_block</name></expr>;</expr_stmt>



    <decl_stmt pos:start="433:5" pos:end="433:10"><decl pos:start="433:5" pos:end="433:9"><type pos:start="433:5" pos:end="433:7"><name pos:start="433:5" pos:end="433:7">int</name></type> <name pos:start="433:9" pos:end="433:9">i</name></decl>;</decl_stmt>

    <for pos:start="435:5" pos:end="439:5">for <control pos:start="435:9" pos:end="435:41">(<init pos:start="435:10" pos:end="435:15"><expr pos:start="435:10" pos:end="435:14"><name pos:start="435:10" pos:end="435:10">i</name> <operator pos:start="435:12" pos:end="435:12">=</operator> <literal type="number" pos:start="435:14" pos:end="435:14">0</literal></expr>;</init> <condition pos:start="435:17" pos:end="435:36"><expr pos:start="435:17" pos:end="435:35"><name pos:start="435:17" pos:end="435:17">i</name> <operator pos:start="435:19" pos:end="435:19">&lt;</operator> <name pos:start="435:21" pos:end="435:35">blocks_clusters</name></expr>;</condition> <incr pos:start="435:38" pos:end="435:40"><expr pos:start="435:38" pos:end="435:40"><name pos:start="435:38" pos:end="435:38">i</name><operator pos:start="435:39" pos:end="435:40">++</operator></expr></incr>)</control> <block pos:start="435:43" pos:end="439:5">{<block_content pos:start="437:9" pos:end="437:73">

        <expr_stmt pos:start="437:9" pos:end="437:73"><expr pos:start="437:9" pos:end="437:72"><name pos:start="437:9" pos:end="437:34"><name pos:start="437:9" pos:end="437:17">new_table</name><index pos:start="437:18" pos:end="437:34">[<expr pos:start="437:19" pos:end="437:33"><name pos:start="437:19" pos:end="437:29">blocks_used</name> <operator pos:start="437:31" pos:end="437:31">+</operator> <name pos:start="437:33" pos:end="437:33">i</name></expr>]</index></name> <operator pos:start="437:36" pos:end="437:36">=</operator> <name pos:start="437:38" pos:end="437:48">meta_offset</name> <operator pos:start="437:50" pos:end="437:50">+</operator> <operator pos:start="437:52" pos:end="437:52">(</operator><name pos:start="437:53" pos:end="437:53">i</name> <operator pos:start="437:55" pos:end="437:55">*</operator> <name pos:start="437:57" pos:end="437:71"><name pos:start="437:57" pos:end="437:57">s</name><operator pos:start="437:58" pos:end="437:59">-&gt;</operator><name pos:start="437:60" pos:end="437:71">cluster_size</name></name><operator pos:start="437:72" pos:end="437:72">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="443:5" pos:end="443:34">/* Fill the refcount blocks */</comment>

    <decl_stmt pos:start="445:5" pos:end="445:81"><decl pos:start="445:5" pos:end="445:80"><type pos:start="445:5" pos:end="445:12"><name pos:start="445:5" pos:end="445:12">uint64_t</name></type> <name pos:start="445:14" pos:end="445:27">table_clusters</name> <init pos:start="445:29" pos:end="445:80">= <expr pos:start="445:31" pos:end="445:80"><call pos:start="445:31" pos:end="445:80"><name pos:start="445:31" pos:end="445:46">size_to_clusters</name><argument_list pos:start="445:47" pos:end="445:80">(<argument pos:start="445:48" pos:end="445:48"><expr pos:start="445:48" pos:end="445:48"><name pos:start="445:48" pos:end="445:48">s</name></expr></argument>, <argument pos:start="445:51" pos:end="445:79"><expr pos:start="445:51" pos:end="445:79"><name pos:start="445:51" pos:end="445:60">table_size</name> <operator pos:start="445:62" pos:end="445:62">*</operator> <sizeof pos:start="445:64" pos:end="445:79">sizeof<argument_list pos:start="445:70" pos:end="445:79">(<argument pos:start="445:71" pos:end="445:78"><expr pos:start="445:71" pos:end="445:78"><name pos:start="445:71" pos:end="445:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="447:5" pos:end="447:18"><decl pos:start="447:5" pos:end="447:17"><type pos:start="447:5" pos:end="447:7"><name pos:start="447:5" pos:end="447:7">int</name></type> <name pos:start="447:9" pos:end="447:13">block</name> <init pos:start="447:15" pos:end="447:17">= <expr pos:start="447:17" pos:end="447:17"><literal type="number" pos:start="447:17" pos:end="447:17">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="449:5" pos:end="453:5">for <control pos:start="449:9" pos:end="449:58">(<init pos:start="449:10" pos:end="449:15"><expr pos:start="449:10" pos:end="449:14"><name pos:start="449:10" pos:end="449:10">i</name> <operator pos:start="449:12" pos:end="449:12">=</operator> <literal type="number" pos:start="449:14" pos:end="449:14">0</literal></expr>;</init> <condition pos:start="449:17" pos:end="449:53"><expr pos:start="449:17" pos:end="449:52"><name pos:start="449:17" pos:end="449:17">i</name> <operator pos:start="449:19" pos:end="449:19">&lt;</operator> <name pos:start="449:21" pos:end="449:34">table_clusters</name> <operator pos:start="449:36" pos:end="449:36">+</operator> <name pos:start="449:38" pos:end="449:52">blocks_clusters</name></expr>;</condition> <incr pos:start="449:55" pos:end="449:57"><expr pos:start="449:55" pos:end="449:57"><name pos:start="449:55" pos:end="449:55">i</name><operator pos:start="449:56" pos:end="449:57">++</operator></expr></incr>)</control> <block pos:start="449:60" pos:end="453:5">{<block_content pos:start="451:9" pos:end="451:48">

        <expr_stmt pos:start="451:9" pos:end="451:48"><expr pos:start="451:9" pos:end="451:47"><call pos:start="451:9" pos:end="451:47"><name pos:start="451:9" pos:end="451:23"><name pos:start="451:9" pos:end="451:9">s</name><operator pos:start="451:10" pos:end="451:11">-&gt;</operator><name pos:start="451:12" pos:end="451:23">set_refcount</name></name><argument_list pos:start="451:24" pos:end="451:47">(<argument pos:start="451:25" pos:end="451:34"><expr pos:start="451:25" pos:end="451:34"><name pos:start="451:25" pos:end="451:34">new_blocks</name></expr></argument>, <argument pos:start="451:37" pos:end="451:43"><expr pos:start="451:37" pos:end="451:43"><name pos:start="451:37" pos:end="451:41">block</name><operator pos:start="451:42" pos:end="451:43">++</operator></expr></argument>, <argument pos:start="451:46" pos:end="451:46"><expr pos:start="451:46" pos:end="451:46"><literal type="number" pos:start="451:46" pos:end="451:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="457:5" pos:end="457:39">/* Write refcount blocks to disk */</comment>

    <expr_stmt pos:start="459:5" pos:end="459:63"><expr pos:start="459:5" pos:end="459:62"><call pos:start="459:5" pos:end="459:62"><name pos:start="459:5" pos:end="459:16">BLKDBG_EVENT</name><argument_list pos:start="459:17" pos:end="459:62">(<argument pos:start="459:18" pos:end="459:25"><expr pos:start="459:18" pos:end="459:25"><name pos:start="459:18" pos:end="459:25"><name pos:start="459:18" pos:end="459:19">bs</name><operator pos:start="459:20" pos:end="459:21">-&gt;</operator><name pos:start="459:22" pos:end="459:25">file</name></name></expr></argument>, <argument pos:start="459:28" pos:end="459:61"><expr pos:start="459:28" pos:end="459:61"><name pos:start="459:28" pos:end="459:61">BLKDBG_REFBLOCK_ALLOC_WRITE_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="461:5" pos:end="463:43"><expr pos:start="461:5" pos:end="463:42"><name pos:start="461:5" pos:end="461:7">ret</name> <operator pos:start="461:9" pos:end="461:9">=</operator> <call pos:start="461:11" pos:end="463:42"><name pos:start="461:11" pos:end="461:26">bdrv_pwrite_sync</name><argument_list pos:start="461:27" pos:end="463:42">(<argument pos:start="461:28" pos:end="461:39"><expr pos:start="461:28" pos:end="461:39"><name pos:start="461:28" pos:end="461:39"><name pos:start="461:28" pos:end="461:29">bs</name><operator pos:start="461:30" pos:end="461:31">-&gt;</operator><name pos:start="461:32" pos:end="461:35">file</name><operator pos:start="461:36" pos:end="461:37">-&gt;</operator><name pos:start="461:38" pos:end="461:39">bs</name></name></expr></argument>, <argument pos:start="461:42" pos:end="461:52"><expr pos:start="461:42" pos:end="461:52"><name pos:start="461:42" pos:end="461:52">meta_offset</name></expr></argument>, <argument pos:start="461:55" pos:end="461:64"><expr pos:start="461:55" pos:end="461:64"><name pos:start="461:55" pos:end="461:64">new_blocks</name></expr></argument>,

        <argument pos:start="463:9" pos:end="463:41"><expr pos:start="463:9" pos:end="463:41"><name pos:start="463:9" pos:end="463:23">blocks_clusters</name> <operator pos:start="463:25" pos:end="463:25">*</operator> <name pos:start="463:27" pos:end="463:41"><name pos:start="463:27" pos:end="463:27">s</name><operator pos:start="463:28" pos:end="463:29">-&gt;</operator><name pos:start="463:30" pos:end="463:41">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:23"><expr pos:start="465:5" pos:end="465:22"><call pos:start="465:5" pos:end="465:22"><name pos:start="465:5" pos:end="465:10">g_free</name><argument_list pos:start="465:11" pos:end="465:22">(<argument pos:start="465:12" pos:end="465:21"><expr pos:start="465:12" pos:end="465:21"><name pos:start="465:12" pos:end="465:21">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:22"><expr pos:start="467:5" pos:end="467:21"><name pos:start="467:5" pos:end="467:14">new_blocks</name> <operator pos:start="467:16" pos:end="467:16">=</operator> <name pos:start="467:18" pos:end="467:21">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="469:5" pos:end="473:5"><if pos:start="469:5" pos:end="473:5">if <condition pos:start="469:8" pos:end="469:16">(<expr pos:start="469:9" pos:end="469:15"><name pos:start="469:9" pos:end="469:11">ret</name> <operator pos:start="469:13" pos:end="469:13">&lt;</operator> <literal type="number" pos:start="469:15" pos:end="469:15">0</literal></expr>)</condition> <block pos:start="469:18" pos:end="473:5">{<block_content pos:start="471:9" pos:end="471:24">

        <goto pos:start="471:9" pos:end="471:24">goto <name pos:start="471:14" pos:end="471:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="477:5" pos:end="477:38">/* Write refcount table to disk */</comment>

    <for pos:start="479:5" pos:end="483:5">for<control pos:start="479:8" pos:end="479:35">(<init pos:start="479:9" pos:end="479:14"><expr pos:start="479:9" pos:end="479:13"><name pos:start="479:9" pos:end="479:9">i</name> <operator pos:start="479:11" pos:end="479:11">=</operator> <literal type="number" pos:start="479:13" pos:end="479:13">0</literal></expr>;</init> <condition pos:start="479:16" pos:end="479:30"><expr pos:start="479:16" pos:end="479:29"><name pos:start="479:16" pos:end="479:16">i</name> <operator pos:start="479:18" pos:end="479:18">&lt;</operator> <name pos:start="479:20" pos:end="479:29">table_size</name></expr>;</condition> <incr pos:start="479:32" pos:end="479:34"><expr pos:start="479:32" pos:end="479:34"><name pos:start="479:32" pos:end="479:32">i</name><operator pos:start="479:33" pos:end="479:34">++</operator></expr></incr>)</control> <block pos:start="479:37" pos:end="483:5">{<block_content pos:start="481:9" pos:end="481:36">

        <expr_stmt pos:start="481:9" pos:end="481:36"><expr pos:start="481:9" pos:end="481:35"><call pos:start="481:9" pos:end="481:35"><name pos:start="481:9" pos:end="481:20">cpu_to_be64s</name><argument_list pos:start="481:21" pos:end="481:35">(<argument pos:start="481:22" pos:end="481:34"><expr pos:start="481:22" pos:end="481:34"><operator pos:start="481:22" pos:end="481:22">&amp;</operator><name pos:start="481:23" pos:end="481:34"><name pos:start="481:23" pos:end="481:31">new_table</name><index pos:start="481:32" pos:end="481:34">[<expr pos:start="481:33" pos:end="481:33"><name pos:start="481:33" pos:end="481:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="487:5" pos:end="487:62"><expr pos:start="487:5" pos:end="487:61"><call pos:start="487:5" pos:end="487:61"><name pos:start="487:5" pos:end="487:16">BLKDBG_EVENT</name><argument_list pos:start="487:17" pos:end="487:61">(<argument pos:start="487:18" pos:end="487:25"><expr pos:start="487:18" pos:end="487:25"><name pos:start="487:18" pos:end="487:25"><name pos:start="487:18" pos:end="487:19">bs</name><operator pos:start="487:20" pos:end="487:21">-&gt;</operator><name pos:start="487:22" pos:end="487:25">file</name></name></expr></argument>, <argument pos:start="487:28" pos:end="487:60"><expr pos:start="487:28" pos:end="487:60"><name pos:start="487:28" pos:end="487:60">BLKDBG_REFBLOCK_ALLOC_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="491:39"><expr pos:start="489:5" pos:end="491:38"><name pos:start="489:5" pos:end="489:7">ret</name> <operator pos:start="489:9" pos:end="489:9">=</operator> <call pos:start="489:11" pos:end="491:38"><name pos:start="489:11" pos:end="489:26">bdrv_pwrite_sync</name><argument_list pos:start="489:27" pos:end="491:38">(<argument pos:start="489:28" pos:end="489:39"><expr pos:start="489:28" pos:end="489:39"><name pos:start="489:28" pos:end="489:39"><name pos:start="489:28" pos:end="489:29">bs</name><operator pos:start="489:30" pos:end="489:31">-&gt;</operator><name pos:start="489:32" pos:end="489:35">file</name><operator pos:start="489:36" pos:end="489:37">-&gt;</operator><name pos:start="489:38" pos:end="489:39">bs</name></name></expr></argument>, <argument pos:start="489:42" pos:end="489:53"><expr pos:start="489:42" pos:end="489:53"><name pos:start="489:42" pos:end="489:53">table_offset</name></expr></argument>, <argument pos:start="489:56" pos:end="489:64"><expr pos:start="489:56" pos:end="489:64"><name pos:start="489:56" pos:end="489:64">new_table</name></expr></argument>,

        <argument pos:start="491:9" pos:end="491:37"><expr pos:start="491:9" pos:end="491:37"><name pos:start="491:9" pos:end="491:18">table_size</name> <operator pos:start="491:20" pos:end="491:20">*</operator> <sizeof pos:start="491:22" pos:end="491:37">sizeof<argument_list pos:start="491:28" pos:end="491:37">(<argument pos:start="491:29" pos:end="491:36"><expr pos:start="491:29" pos:end="491:36"><name pos:start="491:29" pos:end="491:36">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="493:5" pos:end="497:5"><if pos:start="493:5" pos:end="497:5">if <condition pos:start="493:8" pos:end="493:16">(<expr pos:start="493:9" pos:end="493:15"><name pos:start="493:9" pos:end="493:11">ret</name> <operator pos:start="493:13" pos:end="493:13">&lt;</operator> <literal type="number" pos:start="493:15" pos:end="493:15">0</literal></expr>)</condition> <block pos:start="493:18" pos:end="497:5">{<block_content pos:start="495:9" pos:end="495:24">

        <goto pos:start="495:9" pos:end="495:24">goto <name pos:start="495:14" pos:end="495:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="501:5" pos:end="505:5">for<control pos:start="501:8" pos:end="501:35">(<init pos:start="501:9" pos:end="501:14"><expr pos:start="501:9" pos:end="501:13"><name pos:start="501:9" pos:end="501:9">i</name> <operator pos:start="501:11" pos:end="501:11">=</operator> <literal type="number" pos:start="501:13" pos:end="501:13">0</literal></expr>;</init> <condition pos:start="501:16" pos:end="501:30"><expr pos:start="501:16" pos:end="501:29"><name pos:start="501:16" pos:end="501:16">i</name> <operator pos:start="501:18" pos:end="501:18">&lt;</operator> <name pos:start="501:20" pos:end="501:29">table_size</name></expr>;</condition> <incr pos:start="501:32" pos:end="501:34"><expr pos:start="501:32" pos:end="501:34"><name pos:start="501:32" pos:end="501:32">i</name><operator pos:start="501:33" pos:end="501:34">++</operator></expr></incr>)</control> <block pos:start="501:37" pos:end="505:5">{<block_content pos:start="503:9" pos:end="503:36">

        <expr_stmt pos:start="503:9" pos:end="503:36"><expr pos:start="503:9" pos:end="503:35"><call pos:start="503:9" pos:end="503:35"><name pos:start="503:9" pos:end="503:20">be64_to_cpus</name><argument_list pos:start="503:21" pos:end="503:35">(<argument pos:start="503:22" pos:end="503:34"><expr pos:start="503:22" pos:end="503:34"><operator pos:start="503:22" pos:end="503:22">&amp;</operator><name pos:start="503:23" pos:end="503:34"><name pos:start="503:23" pos:end="503:31">new_table</name><index pos:start="503:32" pos:end="503:34">[<expr pos:start="503:33" pos:end="503:33"><name pos:start="503:33" pos:end="503:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="509:5" pos:end="509:60">/* Hook up the new refcount table in the qcow2 header */</comment>

    <decl_stmt pos:start="511:5" pos:end="511:21"><decl pos:start="511:5" pos:end="511:20"><type pos:start="511:5" pos:end="511:11"><name pos:start="511:5" pos:end="511:11">uint8_t</name></type> <name pos:start="511:13" pos:end="511:20"><name pos:start="511:13" pos:end="511:16">data</name><index pos:start="511:17" pos:end="511:20">[<expr pos:start="511:18" pos:end="511:19"><literal type="number" pos:start="511:18" pos:end="511:19">12</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:48"><expr pos:start="513:5" pos:end="513:47"><call pos:start="513:5" pos:end="513:47"><name pos:start="513:5" pos:end="513:16">cpu_to_be64w</name><argument_list pos:start="513:17" pos:end="513:47">(<argument pos:start="513:18" pos:end="513:32"><expr pos:start="513:18" pos:end="513:32"><operator pos:start="513:18" pos:end="513:18">(</operator><name pos:start="513:19" pos:end="513:26">uint64_t</name><operator pos:start="513:27" pos:end="513:27">*</operator><operator pos:start="513:28" pos:end="513:28">)</operator><name pos:start="513:29" pos:end="513:32">data</name></expr></argument>, <argument pos:start="513:35" pos:end="513:46"><expr pos:start="513:35" pos:end="513:46"><name pos:start="513:35" pos:end="513:46">table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:56"><expr pos:start="515:5" pos:end="515:55"><call pos:start="515:5" pos:end="515:55"><name pos:start="515:5" pos:end="515:16">cpu_to_be32w</name><argument_list pos:start="515:17" pos:end="515:55">(<argument pos:start="515:18" pos:end="515:38"><expr pos:start="515:18" pos:end="515:38"><operator pos:start="515:18" pos:end="515:18">(</operator><name pos:start="515:19" pos:end="515:26">uint32_t</name><operator pos:start="515:27" pos:end="515:27">*</operator><operator pos:start="515:28" pos:end="515:28">)</operator><operator pos:start="515:29" pos:end="515:29">(</operator><name pos:start="515:30" pos:end="515:33">data</name> <operator pos:start="515:35" pos:end="515:35">+</operator> <literal type="number" pos:start="515:37" pos:end="515:37">8</literal><operator pos:start="515:38" pos:end="515:38">)</operator></expr></argument>, <argument pos:start="515:41" pos:end="515:54"><expr pos:start="515:41" pos:end="515:54"><name pos:start="515:41" pos:end="515:54">table_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:63"><expr pos:start="517:5" pos:end="517:62"><call pos:start="517:5" pos:end="517:62"><name pos:start="517:5" pos:end="517:16">BLKDBG_EVENT</name><argument_list pos:start="517:17" pos:end="517:62">(<argument pos:start="517:18" pos:end="517:25"><expr pos:start="517:18" pos:end="517:25"><name pos:start="517:18" pos:end="517:25"><name pos:start="517:18" pos:end="517:19">bs</name><operator pos:start="517:20" pos:end="517:21">-&gt;</operator><name pos:start="517:22" pos:end="517:25">file</name></name></expr></argument>, <argument pos:start="517:28" pos:end="517:61"><expr pos:start="517:28" pos:end="517:61"><name pos:start="517:28" pos:end="517:61">BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="523:47"><expr pos:start="519:5" pos:end="523:46"><name pos:start="519:5" pos:end="519:7">ret</name> <operator pos:start="519:9" pos:end="519:9">=</operator> <call pos:start="519:11" pos:end="523:46"><name pos:start="519:11" pos:end="519:26">bdrv_pwrite_sync</name><argument_list pos:start="519:27" pos:end="523:46">(<argument pos:start="519:28" pos:end="519:39"><expr pos:start="519:28" pos:end="519:39"><name pos:start="519:28" pos:end="519:39"><name pos:start="519:28" pos:end="519:29">bs</name><operator pos:start="519:30" pos:end="519:31">-&gt;</operator><name pos:start="519:32" pos:end="519:35">file</name><operator pos:start="519:36" pos:end="519:37">-&gt;</operator><name pos:start="519:38" pos:end="519:39">bs</name></name></expr></argument>,

                           <argument pos:start="521:28" pos:end="521:70"><expr pos:start="521:28" pos:end="521:70"><call pos:start="521:28" pos:end="521:70"><name pos:start="521:28" pos:end="521:35">offsetof</name><argument_list pos:start="521:36" pos:end="521:70">(<argument pos:start="521:37" pos:end="521:46"><expr pos:start="521:37" pos:end="521:46"><name pos:start="521:37" pos:end="521:46">QCowHeader</name></expr></argument>, <argument pos:start="521:49" pos:end="521:69"><expr pos:start="521:49" pos:end="521:69"><name pos:start="521:49" pos:end="521:69">refcount_table_offset</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="523:28" pos:end="523:31"><expr pos:start="523:28" pos:end="523:31"><name pos:start="523:28" pos:end="523:31">data</name></expr></argument>, <argument pos:start="523:34" pos:end="523:45"><expr pos:start="523:34" pos:end="523:45"><sizeof pos:start="523:34" pos:end="523:45">sizeof<argument_list pos:start="523:40" pos:end="523:45">(<argument pos:start="523:41" pos:end="523:44"><expr pos:start="523:41" pos:end="523:44"><name pos:start="523:41" pos:end="523:44">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="525:5" pos:end="529:5"><if pos:start="525:5" pos:end="529:5">if <condition pos:start="525:8" pos:end="525:16">(<expr pos:start="525:9" pos:end="525:15"><name pos:start="525:9" pos:end="525:11">ret</name> <operator pos:start="525:13" pos:end="525:13">&lt;</operator> <literal type="number" pos:start="525:15" pos:end="525:15">0</literal></expr>)</condition> <block pos:start="525:18" pos:end="529:5">{<block_content pos:start="527:9" pos:end="527:24">

        <goto pos:start="527:9" pos:end="527:24">goto <name pos:start="527:14" pos:end="527:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="533:5" pos:end="533:33">/* And switch it in memory */</comment>

    <decl_stmt pos:start="535:5" pos:end="535:57"><decl pos:start="535:5" pos:end="535:56"><type pos:start="535:5" pos:end="535:12"><name pos:start="535:5" pos:end="535:12">uint64_t</name></type> <name pos:start="535:14" pos:end="535:29">old_table_offset</name> <init pos:start="535:31" pos:end="535:56">= <expr pos:start="535:33" pos:end="535:56"><name pos:start="535:33" pos:end="535:56"><name pos:start="535:33" pos:end="535:33">s</name><operator pos:start="535:34" pos:end="535:35">-&gt;</operator><name pos:start="535:36" pos:end="535:56">refcount_table_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="537:5" pos:end="537:53"><decl pos:start="537:5" pos:end="537:52"><type pos:start="537:5" pos:end="537:12"><name pos:start="537:5" pos:end="537:12">uint64_t</name></type> <name pos:start="537:14" pos:end="537:27">old_table_size</name> <init pos:start="537:29" pos:end="537:52">= <expr pos:start="537:31" pos:end="537:52"><name pos:start="537:31" pos:end="537:52"><name pos:start="537:31" pos:end="537:31">s</name><operator pos:start="537:32" pos:end="537:33">-&gt;</operator><name pos:start="537:34" pos:end="537:52">refcount_table_size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="541:5" pos:end="541:30"><expr pos:start="541:5" pos:end="541:29"><call pos:start="541:5" pos:end="541:29"><name pos:start="541:5" pos:end="541:10">g_free</name><argument_list pos:start="541:11" pos:end="541:29">(<argument pos:start="541:12" pos:end="541:28"><expr pos:start="541:12" pos:end="541:28"><name pos:start="541:12" pos:end="541:28"><name pos:start="541:12" pos:end="541:12">s</name><operator pos:start="541:13" pos:end="541:14">-&gt;</operator><name pos:start="541:15" pos:end="541:28">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:34"><expr pos:start="543:5" pos:end="543:33"><name pos:start="543:5" pos:end="543:21"><name pos:start="543:5" pos:end="543:5">s</name><operator pos:start="543:6" pos:end="543:7">-&gt;</operator><name pos:start="543:8" pos:end="543:21">refcount_table</name></name> <operator pos:start="543:23" pos:end="543:23">=</operator> <name pos:start="543:25" pos:end="543:33">new_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="545:5" pos:end="545:40"><expr pos:start="545:5" pos:end="545:39"><name pos:start="545:5" pos:end="545:26"><name pos:start="545:5" pos:end="545:5">s</name><operator pos:start="545:6" pos:end="545:7">-&gt;</operator><name pos:start="545:8" pos:end="545:26">refcount_table_size</name></name> <operator pos:start="545:28" pos:end="545:28">=</operator> <name pos:start="545:30" pos:end="545:39">table_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="547:44"><expr pos:start="547:5" pos:end="547:43"><name pos:start="547:5" pos:end="547:28"><name pos:start="547:5" pos:end="547:5">s</name><operator pos:start="547:6" pos:end="547:7">-&gt;</operator><name pos:start="547:8" pos:end="547:28">refcount_table_offset</name></name> <operator pos:start="547:30" pos:end="547:30">=</operator> <name pos:start="547:32" pos:end="547:43">table_offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="551:5" pos:end="551:25">/* Free old table. */</comment>

    <expr_stmt pos:start="553:5" pos:end="555:45"><expr pos:start="553:5" pos:end="555:44"><call pos:start="553:5" pos:end="555:44"><name pos:start="553:5" pos:end="553:23">qcow2_free_clusters</name><argument_list pos:start="553:24" pos:end="555:44">(<argument pos:start="553:25" pos:end="553:26"><expr pos:start="553:25" pos:end="553:26"><name pos:start="553:25" pos:end="553:26">bs</name></expr></argument>, <argument pos:start="553:29" pos:end="553:44"><expr pos:start="553:29" pos:end="553:44"><name pos:start="553:29" pos:end="553:44">old_table_offset</name></expr></argument>, <argument pos:start="553:47" pos:end="553:79"><expr pos:start="553:47" pos:end="553:79"><name pos:start="553:47" pos:end="553:60">old_table_size</name> <operator pos:start="553:62" pos:end="553:62">*</operator> <sizeof pos:start="553:64" pos:end="553:79">sizeof<argument_list pos:start="553:70" pos:end="553:79">(<argument pos:start="553:71" pos:end="553:78"><expr pos:start="553:71" pos:end="553:78"><name pos:start="553:71" pos:end="553:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="555:25" pos:end="555:43"><expr pos:start="555:25" pos:end="555:43"><name pos:start="555:25" pos:end="555:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="559:5" pos:end="559:61"><expr pos:start="559:5" pos:end="559:60"><name pos:start="559:5" pos:end="559:7">ret</name> <operator pos:start="559:9" pos:end="559:9">=</operator> <call pos:start="559:11" pos:end="559:60"><name pos:start="559:11" pos:end="559:29">load_refcount_block</name><argument_list pos:start="559:30" pos:end="559:60">(<argument pos:start="559:31" pos:end="559:32"><expr pos:start="559:31" pos:end="559:32"><name pos:start="559:31" pos:end="559:32">bs</name></expr></argument>, <argument pos:start="559:35" pos:end="559:43"><expr pos:start="559:35" pos:end="559:43"><name pos:start="559:35" pos:end="559:43">new_block</name></expr></argument>, <argument pos:start="559:46" pos:end="559:59"><expr pos:start="559:46" pos:end="559:59"><name pos:start="559:46" pos:end="559:59">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="561:5" pos:end="565:5"><if pos:start="561:5" pos:end="565:5">if <condition pos:start="561:8" pos:end="561:16">(<expr pos:start="561:9" pos:end="561:15"><name pos:start="561:9" pos:end="561:11">ret</name> <operator pos:start="561:13" pos:end="561:13">&lt;</operator> <literal type="number" pos:start="561:15" pos:end="561:15">0</literal></expr>)</condition> <block pos:start="561:18" pos:end="565:5">{<block_content pos:start="563:9" pos:end="563:19">

        <return pos:start="563:9" pos:end="563:19">return <expr pos:start="563:16" pos:end="563:18"><name pos:start="563:16" pos:end="563:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="569:5" pos:end="573:68">/* If we were trying to do the initial refcount update for some cluster

     * allocation, we might have used the same clusters to store newly

     * allocated metadata. Make the caller search some new space. */</comment>

    <return pos:start="575:5" pos:end="575:19">return <expr pos:start="575:12" pos:end="575:18"><operator pos:start="575:12" pos:end="575:12">-</operator><name pos:start="575:13" pos:end="575:18">EAGAIN</name></expr>;</return>



<label pos:start="579:1" pos:end="579:11"><name pos:start="579:1" pos:end="579:10">fail_table</name>:</label>

    <expr_stmt pos:start="581:5" pos:end="581:23"><expr pos:start="581:5" pos:end="581:22"><call pos:start="581:5" pos:end="581:22"><name pos:start="581:5" pos:end="581:10">g_free</name><argument_list pos:start="581:11" pos:end="581:22">(<argument pos:start="581:12" pos:end="581:21"><expr pos:start="581:12" pos:end="581:21"><name pos:start="581:12" pos:end="581:21">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="583:5" pos:end="583:22"><expr pos:start="583:5" pos:end="583:21"><call pos:start="583:5" pos:end="583:21"><name pos:start="583:5" pos:end="583:10">g_free</name><argument_list pos:start="583:11" pos:end="583:21">(<argument pos:start="583:12" pos:end="583:20"><expr pos:start="583:12" pos:end="583:20"><name pos:start="583:12" pos:end="583:20">new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="585:1" pos:end="585:11"><name pos:start="585:1" pos:end="585:10">fail_block</name>:</label>

    <if_stmt pos:start="587:5" pos:end="591:5"><if pos:start="587:5" pos:end="591:5">if <condition pos:start="587:8" pos:end="587:32">(<expr pos:start="587:9" pos:end="587:31"><operator pos:start="587:9" pos:end="587:9">*</operator><name pos:start="587:10" pos:end="587:23">refcount_block</name> <operator pos:start="587:25" pos:end="587:26">!=</operator> <name pos:start="587:28" pos:end="587:31">NULL</name></expr>)</condition> <block pos:start="587:34" pos:end="591:5">{<block_content pos:start="589:9" pos:end="589:69">

        <expr_stmt pos:start="589:9" pos:end="589:69"><expr pos:start="589:9" pos:end="589:68"><call pos:start="589:9" pos:end="589:68"><name pos:start="589:9" pos:end="589:23">qcow2_cache_put</name><argument_list pos:start="589:24" pos:end="589:68">(<argument pos:start="589:25" pos:end="589:26"><expr pos:start="589:25" pos:end="589:26"><name pos:start="589:25" pos:end="589:26">bs</name></expr></argument>, <argument pos:start="589:29" pos:end="589:51"><expr pos:start="589:29" pos:end="589:51"><name pos:start="589:29" pos:end="589:51"><name pos:start="589:29" pos:end="589:29">s</name><operator pos:start="589:30" pos:end="589:31">-&gt;</operator><name pos:start="589:32" pos:end="589:51">refcount_block_cache</name></name></expr></argument>, <argument pos:start="589:54" pos:end="589:67"><expr pos:start="589:54" pos:end="589:67"><name pos:start="589:54" pos:end="589:67">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="593:5" pos:end="593:15">return <expr pos:start="593:12" pos:end="593:14"><name pos:start="593:12" pos:end="593:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
