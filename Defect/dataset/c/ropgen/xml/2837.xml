<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2837.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">alloc_buffer</name><parameter_list pos:start="1:24" pos:end="1:82">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:35">FrameBuffer</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier><modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">pool</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:58">AVCodecContext</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:81"><decl pos:start="1:64" pos:end="1:81"><type pos:start="1:64" pos:end="1:81"><name pos:start="1:64" pos:end="1:74">FrameBuffer</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier><modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:81">pbuf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:15">FrameBuffer</name>  <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">buf</name> <init pos:start="5:23" pos:end="5:48">= <expr pos:start="5:25" pos:end="5:48"><call pos:start="5:25" pos:end="5:48"><name pos:start="5:25" pos:end="5:34">av_mallocz</name><argument_list pos:start="5:35" pos:end="5:48">(<argument pos:start="5:36" pos:end="5:47"><expr pos:start="5:36" pos:end="5:47"><sizeof pos:start="5:36" pos:end="5:47">sizeof<argument_list pos:start="5:42" pos:end="5:47">(<argument pos:start="5:43" pos:end="5:46"><expr pos:start="5:43" pos:end="5:46"><operator pos:start="5:43" pos:end="5:43">*</operator><name pos:start="5:44" pos:end="5:46">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:84"><decl pos:start="9:5" pos:end="9:83"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:24">pixel_size</name> <init pos:start="9:26" pos:end="9:83">= <expr pos:start="9:28" pos:end="9:83"><name pos:start="9:28" pos:end="9:61"><name pos:start="9:28" pos:end="9:49">av_pix_fmt_descriptors</name><index pos:start="9:50" pos:end="9:61">[<expr pos:start="9:51" pos:end="9:60"><name pos:start="9:51" pos:end="9:60"><name pos:start="9:51" pos:end="9:51">s</name><operator pos:start="9:52" pos:end="9:53">-&gt;</operator><name pos:start="9:54" pos:end="9:60">pix_fmt</name></name></expr>]</index></name><operator pos:start="9:62" pos:end="9:62">.</operator><name pos:start="9:63" pos:end="9:69"><name pos:start="9:63" pos:end="9:66">comp</name><index pos:start="9:67" pos:end="9:69">[<expr pos:start="9:68" pos:end="9:68"><literal type="number" pos:start="9:68" pos:end="9:68">0</literal></expr>]</index></name><operator pos:start="9:70" pos:end="9:70">.</operator><name pos:start="9:71" pos:end="9:81">step_minus1</name><operator pos:start="9:82" pos:end="9:82">+</operator><literal type="number" pos:start="9:83" pos:end="9:83">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">h_chroma_shift</name></decl>, <decl pos:start="11:25" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:38">v_chroma_shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">edge</name> <init pos:start="13:14" pos:end="13:17">= <expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">32</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="13:20" pos:end="13:84">// XXX should be avcodec_get_edge_width(), but that fails on svq1</comment>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">w</name> <init pos:start="15:11" pos:end="15:20">= <expr pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">width</name></name></expr></init></decl>, <decl pos:start="15:23" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:23">h</name> <init pos:start="15:25" pos:end="15:35">= <expr pos:start="15:27" pos:end="15:35"><name pos:start="15:27" pos:end="15:35"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:35">height</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:31"><if pos:start="19:5" pos:end="21:31">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">buf</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:31"><block_content pos:start="21:9" pos:end="21:31">

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:42">(<expr pos:start="25:9" pos:end="25:41"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:18"><name pos:start="25:11" pos:end="25:11">s</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:18">flags</name></name> <operator pos:start="25:20" pos:end="25:20">&amp;</operator> <name pos:start="25:22" pos:end="25:40">CODEC_FLAG_EMU_EDGE</name><operator pos:start="25:41" pos:end="25:41">)</operator></expr>)</condition> <block pos:start="25:44" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:20">

        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">w</name> <operator pos:start="27:11" pos:end="27:12">+=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">2</literal><operator pos:start="27:15" pos:end="27:15">*</operator><name pos:start="27:16" pos:end="27:19">edge</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:20"><expr pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:9">h</name> <operator pos:start="29:11" pos:end="29:12">+=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">2</literal><operator pos:start="29:15" pos:end="29:15">*</operator><name pos:start="29:16" pos:end="29:19">edge</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><call pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:28">avcodec_align_dimensions</name><argument_list pos:start="35:29" pos:end="35:39">(<argument pos:start="35:30" pos:end="35:30"><expr pos:start="35:30" pos:end="35:30"><name pos:start="35:30" pos:end="35:30">s</name></expr></argument>, <argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><operator pos:start="35:33" pos:end="35:33">&amp;</operator><name pos:start="35:34" pos:end="35:34">w</name></expr></argument>, <argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:38">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:51">(<expr pos:start="37:9" pos:end="39:50"><operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:12">ret</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="39:45"><name pos:start="37:16" pos:end="37:29">av_image_alloc</name><argument_list pos:start="37:30" pos:end="39:45">(<argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:33">buf</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:39">base</name></name></expr></argument>, <argument pos:start="37:42" pos:end="37:54"><expr pos:start="37:42" pos:end="37:54"><name pos:start="37:42" pos:end="37:54"><name pos:start="37:42" pos:end="37:44">buf</name><operator pos:start="37:45" pos:end="37:46">-&gt;</operator><name pos:start="37:47" pos:end="37:54">linesize</name></name></expr></argument>, <argument pos:start="37:57" pos:end="37:57"><expr pos:start="37:57" pos:end="37:57"><name pos:start="37:57" pos:end="37:57">w</name></expr></argument>, <argument pos:start="37:60" pos:end="37:60"><expr pos:start="37:60" pos:end="37:60"><name pos:start="37:60" pos:end="37:60">h</name></expr></argument>,

                              <argument pos:start="39:31" pos:end="39:40"><expr pos:start="39:31" pos:end="39:40"><name pos:start="39:31" pos:end="39:40"><name pos:start="39:31" pos:end="39:31">s</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:40">pix_fmt</name></name></expr></argument>, <argument pos:start="39:43" pos:end="39:44"><expr pos:start="39:43" pos:end="39:44"><literal type="number" pos:start="39:43" pos:end="39:44">32</literal></expr></argument>)</argument_list></call><operator pos:start="39:46" pos:end="39:46">)</operator> <operator pos:start="39:48" pos:end="39:48">&lt;</operator> <literal type="number" pos:start="39:50" pos:end="39:50">0</literal></expr>)</condition> <block pos:start="39:53" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:19">

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><call pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:16">av_freep</name><argument_list pos:start="41:17" pos:end="41:22">(<argument pos:start="41:18" pos:end="41:21"><expr pos:start="41:18" pos:end="41:21"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:21">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:19">return <expr pos:start="43:16" pos:end="43:18"><name pos:start="43:16" pos:end="43:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="47:5" pos:end="55:7">/* XXX this shouldn't be needed, but some tests break without this line

     * those decoders are buggy and need to be fixed.

     * the following tests fail:

     * cdgraphics, ansi, aasc, fraps-v1, qtrle-1bit

     */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><call pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:10">memset</name><argument_list pos:start="57:11" pos:end="57:34">(<argument pos:start="57:12" pos:end="57:23"><expr pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:23"><name pos:start="57:12" pos:end="57:14">buf</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">base</name><index pos:start="57:21" pos:end="57:23">[<expr pos:start="57:22" pos:end="57:22"><literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><literal type="number" pos:start="57:26" pos:end="57:28">128</literal></expr></argument>, <argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:80"><expr pos:start="61:5" pos:end="61:79"><call pos:start="61:5" pos:end="61:79"><name pos:start="61:5" pos:end="61:33">avcodec_get_chroma_sub_sample</name><argument_list pos:start="61:34" pos:end="61:79">(<argument pos:start="61:35" pos:end="61:44"><expr pos:start="61:35" pos:end="61:44"><name pos:start="61:35" pos:end="61:44"><name pos:start="61:35" pos:end="61:35">s</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:44">pix_fmt</name></name></expr></argument>, <argument pos:start="61:47" pos:end="61:61"><expr pos:start="61:47" pos:end="61:61"><operator pos:start="61:47" pos:end="61:47">&amp;</operator><name pos:start="61:48" pos:end="61:61">h_chroma_shift</name></expr></argument>, <argument pos:start="61:64" pos:end="61:78"><expr pos:start="61:64" pos:end="61:78"><operator pos:start="61:64" pos:end="61:64">&amp;</operator><name pos:start="61:65" pos:end="61:78">v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="63:5" pos:end="81:5">for <control pos:start="63:9" pos:end="63:51">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:46"><expr pos:start="63:17" pos:end="63:45"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <call pos:start="63:21" pos:end="63:45"><name pos:start="63:21" pos:end="63:34">FF_ARRAY_ELEMS</name><argument_list pos:start="63:35" pos:end="63:45">(<argument pos:start="63:36" pos:end="63:44"><expr pos:start="63:36" pos:end="63:44"><name pos:start="63:36" pos:end="63:44"><name pos:start="63:36" pos:end="63:38">buf</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:44">data</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="63:48" pos:end="63:50"><expr pos:start="63:48" pos:end="63:50"><name pos:start="63:48" pos:end="63:48">i</name><operator pos:start="63:49" pos:end="63:50">++</operator></expr></incr>)</control> <block pos:start="63:53" pos:end="81:5">{<block_content pos:start="65:9" pos:end="79:69">

        <decl_stmt pos:start="65:9" pos:end="65:54"><decl pos:start="65:9" pos:end="65:53"><type pos:start="65:9" pos:end="65:17"><specifier pos:start="65:9" pos:end="65:13">const</specifier> <name pos:start="65:15" pos:end="65:17">int</name></type> <name pos:start="65:19" pos:end="65:25">h_shift</name> <init pos:start="65:27" pos:end="65:53">= <expr pos:start="65:29" pos:end="65:53"><ternary pos:start="65:29" pos:end="65:53"><condition pos:start="65:29" pos:end="65:34"><expr pos:start="65:29" pos:end="65:32"><name pos:start="65:29" pos:end="65:29">i</name><operator pos:start="65:30" pos:end="65:31">==</operator><literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr> ?</condition><then pos:start="65:36" pos:end="65:36"> <expr pos:start="65:36" pos:end="65:36"><literal type="number" pos:start="65:36" pos:end="65:36">0</literal></expr> </then><else pos:start="65:38" pos:end="65:53">: <expr pos:start="65:40" pos:end="65:53"><name pos:start="65:40" pos:end="65:53">h_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:54"><decl pos:start="67:9" pos:end="67:53"><type pos:start="67:9" pos:end="67:17"><specifier pos:start="67:9" pos:end="67:13">const</specifier> <name pos:start="67:15" pos:end="67:17">int</name></type> <name pos:start="67:19" pos:end="67:25">v_shift</name> <init pos:start="67:27" pos:end="67:53">= <expr pos:start="67:29" pos:end="67:53"><ternary pos:start="67:29" pos:end="67:53"><condition pos:start="67:29" pos:end="67:34"><expr pos:start="67:29" pos:end="67:32"><name pos:start="67:29" pos:end="67:29">i</name><operator pos:start="67:30" pos:end="67:31">==</operator><literal type="number" pos:start="67:32" pos:end="67:32">0</literal></expr> ?</condition><then pos:start="67:36" pos:end="67:36"> <expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr> </then><else pos:start="67:38" pos:end="67:53">: <expr pos:start="67:40" pos:end="67:53"><name pos:start="67:40" pos:end="67:53">v_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="69:9" pos:end="79:69"><if pos:start="69:9" pos:end="71:40">if <condition pos:start="69:12" pos:end="69:43">(<expr pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:20">flags</name></name> <operator pos:start="69:22" pos:end="69:22">&amp;</operator> <name pos:start="69:24" pos:end="69:42">CODEC_FLAG_EMU_EDGE</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:40"><block_content pos:start="71:13" pos:end="71:40">

            <expr_stmt pos:start="71:13" pos:end="71:40"><expr pos:start="71:13" pos:end="71:39"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">buf</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:21">data</name><index pos:start="71:22" pos:end="71:24">[<expr pos:start="71:23" pos:end="71:23"><name pos:start="71:23" pos:end="71:23">i</name></expr>]</index></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:39"><name pos:start="71:28" pos:end="71:30">buf</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:36">base</name><index pos:start="71:37" pos:end="71:39">[<expr pos:start="71:38" pos:end="71:38"><name pos:start="71:38" pos:end="71:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="73:9" pos:end="79:69">else<block type="pseudo" pos:start="75:13" pos:end="79:69"><block_content pos:start="75:13" pos:end="79:69">

            <expr_stmt pos:start="75:13" pos:end="79:69"><expr pos:start="75:13" pos:end="79:68"><name pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:15">buf</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:21">data</name><index pos:start="75:22" pos:end="75:24">[<expr pos:start="75:23" pos:end="75:23"><name pos:start="75:23" pos:end="75:23">i</name></expr>]</index></name> <operator pos:start="75:26" pos:end="75:26">=</operator> <name pos:start="75:28" pos:end="75:39"><name pos:start="75:28" pos:end="75:30">buf</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:36">base</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><name pos:start="75:38" pos:end="75:38">i</name></expr>]</index></name> <operator pos:start="75:41" pos:end="75:41">+</operator>

                           <call pos:start="77:28" pos:end="79:68"><name pos:start="77:28" pos:end="77:34">FFALIGN</name><argument_list pos:start="77:35" pos:end="79:68">(<argument pos:start="77:36" pos:end="79:63"><expr pos:start="77:36" pos:end="79:63"><operator pos:start="77:36" pos:end="77:36">(</operator><name pos:start="77:37" pos:end="77:52"><name pos:start="77:37" pos:end="77:39">buf</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:49">linesize</name><index pos:start="77:50" pos:end="77:52">[<expr pos:start="77:51" pos:end="77:51"><name pos:start="77:51" pos:end="77:51">i</name></expr>]</index></name><operator pos:start="77:53" pos:end="77:53">*</operator><name pos:start="77:54" pos:end="77:57">edge</name> <operator pos:start="77:59" pos:end="77:60">&gt;&gt;</operator> <name pos:start="77:62" pos:end="77:68">v_shift</name><operator pos:start="77:69" pos:end="77:69">)</operator> <operator pos:start="77:71" pos:end="77:71">+</operator>

                                   <operator pos:start="79:36" pos:end="79:36">(</operator><name pos:start="79:37" pos:end="79:46">pixel_size</name><operator pos:start="79:47" pos:end="79:47">*</operator><name pos:start="79:48" pos:end="79:51">edge</name> <operator pos:start="79:53" pos:end="79:54">&gt;&gt;</operator> <name pos:start="79:56" pos:end="79:62">h_shift</name><operator pos:start="79:63" pos:end="79:63">)</operator></expr></argument>, <argument pos:start="79:66" pos:end="79:67"><expr pos:start="79:66" pos:end="79:67"><literal type="number" pos:start="79:66" pos:end="79:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:10"><name pos:start="83:5" pos:end="83:7">buf</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:10">w</name></name>       <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:27"><name pos:start="83:20" pos:end="83:20">s</name><operator pos:start="83:21" pos:end="83:22">-&gt;</operator><name pos:start="83:23" pos:end="83:27">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:29"><expr pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:10"><name pos:start="85:5" pos:end="85:7">buf</name><operator pos:start="85:8" pos:end="85:9">-&gt;</operator><name pos:start="85:10" pos:end="85:10">h</name></name>       <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:20">s</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:28">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:30"><expr pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:7">buf</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:16">pix_fmt</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:29"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:29">pix_fmt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:24"><expr pos:start="89:5" pos:end="89:23"><name pos:start="89:5" pos:end="89:13"><name pos:start="89:5" pos:end="89:7">buf</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:13">pool</name></name>    <operator pos:start="89:18" pos:end="89:18">=</operator> <name pos:start="89:20" pos:end="89:23">pool</name></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:9">pbuf</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <name pos:start="93:13" pos:end="93:15">buf</name></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
