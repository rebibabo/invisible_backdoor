<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/447.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="121:1"><decl pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_pce</name><argument_list pos:start="1:22" pos:end="5:60">(<argument pos:start="1:23" pos:end="1:43"><expr pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:36">AVCodecContext</name> <operator pos:start="1:38" pos:end="1:38">*</operator><name pos:start="1:39" pos:end="1:43">avctx</name></expr></argument>, <argument pos:start="1:46" pos:end="1:67"><expr pos:start="1:46" pos:end="1:67"><name pos:start="1:46" pos:end="1:61">MPEG4AudioConfig</name> <operator pos:start="1:63" pos:end="1:63">*</operator><name pos:start="1:64" pos:end="1:67">m4ac</name></expr></argument>,

                      <argument pos:start="3:23" pos:end="3:46"><expr pos:start="3:23" pos:end="3:46"><call pos:start="3:23" pos:end="3:43"><name pos:start="3:23" pos:end="3:29">uint8_t</name> <argument_list pos:start="3:31" pos:end="3:43">(<argument pos:start="3:32" pos:end="3:42"><expr pos:start="3:32" pos:end="3:42"><operator pos:start="3:32" pos:end="3:32">*</operator><name pos:start="3:33" pos:end="3:42">layout_map</name></expr></argument>)</argument_list></call><index pos:start="3:44" pos:end="3:46">[<expr pos:start="3:45" pos:end="3:45"><literal type="number" pos:start="3:45" pos:end="3:45">3</literal></expr>]</index></expr></argument>,

                      <argument pos:start="5:23" pos:end="5:39"><expr pos:start="5:23" pos:end="5:39"><name pos:start="5:23" pos:end="5:35">GetBitContext</name> <operator pos:start="5:37" pos:end="5:37">*</operator><name pos:start="5:38" pos:end="5:39">gb</name></expr></argument>, <argument pos:start="5:42" pos:end="5:59"><expr pos:start="5:42" pos:end="5:59"><name pos:start="5:42" pos:end="5:44">int</name> <name pos:start="5:46" pos:end="5:59">byte_align_ref</name></expr></argument>)</argument_list>

<block pos:start="7:1" pos:end="121:1">{<block_content pos:start="9:5" pos:end="119:16">

    <decl_stmt pos:start="9:5" pos:end="9:71"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">num_front</name></decl>, <decl pos:start="9:20" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:27">num_side</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">num_back</name></decl>, <decl pos:start="9:40" pos:end="9:46"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:46">num_lfe</name></decl>, <decl pos:start="9:49" pos:end="9:62"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:49" pos:end="9:62">num_assoc_data</name></decl>, <decl pos:start="9:65" pos:end="9:70"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:65" pos:end="9:70">num_cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">sampling_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">comment_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">tags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><call pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:13">skip_bits</name><argument_list pos:start="19:14" pos:end="19:20">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">gb</name></expr></argument>, <argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="19:24" pos:end="19:37">// object_type</comment>



    <expr_stmt pos:start="23:5" pos:end="23:37"><expr pos:start="23:5" pos:end="23:36"><name pos:start="23:5" pos:end="23:18">sampling_index</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:36"><name pos:start="23:22" pos:end="23:29">get_bits</name><argument_list pos:start="23:30" pos:end="23:36">(<argument pos:start="23:31" pos:end="23:32"><expr pos:start="23:31" pos:end="23:32"><name pos:start="23:31" pos:end="23:32">gb</name></expr></argument>, <argument pos:start="23:35" pos:end="23:35"><expr pos:start="23:35" pos:end="23:35"><literal type="number" pos:start="23:35" pos:end="23:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:77"><if pos:start="25:5" pos:end="31:77">if <condition pos:start="25:8" pos:end="25:47">(<expr pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:12">m4ac</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:28">sampling_index</name></name> <operator pos:start="25:30" pos:end="25:31">!=</operator> <name pos:start="25:33" pos:end="25:46">sampling_index</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="31:77"><block_content pos:start="27:9" pos:end="31:77">

        <expr_stmt pos:start="27:9" pos:end="31:77"><expr pos:start="27:9" pos:end="31:76"><call pos:start="27:9" pos:end="31:76"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="31:76">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:36"><expr pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:36">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="29:16" pos:end="31:75"><expr pos:start="29:16" pos:end="31:75"><literal type="string" pos:start="29:16" pos:end="29:70">"Sample rate index in program config element does not "</literal>

               <literal type="string" pos:start="31:16" pos:end="31:75">"match the sample rate index configured by the container.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:13">num_front</name>       <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:37"><name pos:start="35:23" pos:end="35:30">get_bits</name><argument_list pos:start="35:31" pos:end="35:37">(<argument pos:start="35:32" pos:end="35:33"><expr pos:start="35:32" pos:end="35:33"><name pos:start="35:32" pos:end="35:33">gb</name></expr></argument>, <argument pos:start="35:36" pos:end="35:36"><expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:12">num_side</name>        <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:37"><name pos:start="37:23" pos:end="37:30">get_bits</name><argument_list pos:start="37:31" pos:end="37:37">(<argument pos:start="37:32" pos:end="37:33"><expr pos:start="37:32" pos:end="37:33"><name pos:start="37:32" pos:end="37:33">gb</name></expr></argument>, <argument pos:start="37:36" pos:end="37:36"><expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:12">num_back</name>        <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:37"><name pos:start="39:23" pos:end="39:30">get_bits</name><argument_list pos:start="39:31" pos:end="39:37">(<argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">gb</name></expr></argument>, <argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:11">num_lfe</name>         <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:37"><name pos:start="41:23" pos:end="41:30">get_bits</name><argument_list pos:start="41:31" pos:end="41:37">(<argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">gb</name></expr></argument>, <argument pos:start="41:36" pos:end="41:36"><expr pos:start="41:36" pos:end="41:36"><literal type="number" pos:start="41:36" pos:end="41:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:18">num_assoc_data</name>  <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:37"><name pos:start="43:23" pos:end="43:30">get_bits</name><argument_list pos:start="43:31" pos:end="43:37">(<argument pos:start="43:32" pos:end="43:33"><expr pos:start="43:32" pos:end="43:33"><name pos:start="43:32" pos:end="43:33">gb</name></expr></argument>, <argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:10">num_cc</name>          <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:37"><name pos:start="45:23" pos:end="45:30">get_bits</name><argument_list pos:start="45:31" pos:end="45:37">(<argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">gb</name></expr></argument>, <argument pos:start="45:36" pos:end="45:36"><expr pos:start="45:36" pos:end="45:36"><literal type="number" pos:start="45:36" pos:end="45:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="51:25"><if pos:start="49:5" pos:end="51:25">if <condition pos:start="49:8" pos:end="49:22">(<expr pos:start="49:9" pos:end="49:21"><call pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:17">get_bits1</name><argument_list pos:start="49:18" pos:end="49:21">(<argument pos:start="49:19" pos:end="49:20"><expr pos:start="49:19" pos:end="49:20"><name pos:start="49:19" pos:end="49:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:25"><block_content pos:start="51:9" pos:end="51:25">

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><call pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:17">skip_bits</name><argument_list pos:start="51:18" pos:end="51:24">(<argument pos:start="51:19" pos:end="51:20"><expr pos:start="51:19" pos:end="51:20"><name pos:start="51:19" pos:end="51:20">gb</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="51:27" pos:end="51:45">// mono_mixdown_tag</comment>

    <if_stmt pos:start="53:5" pos:end="55:25"><if pos:start="53:5" pos:end="55:25">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><call pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:17">get_bits1</name><argument_list pos:start="53:18" pos:end="53:21">(<argument pos:start="53:19" pos:end="53:20"><expr pos:start="53:19" pos:end="53:20"><name pos:start="53:19" pos:end="53:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:25"><block_content pos:start="55:9" pos:end="55:25">

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><call pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:17">skip_bits</name><argument_list pos:start="55:18" pos:end="55:24">(<argument pos:start="55:19" pos:end="55:20"><expr pos:start="55:19" pos:end="55:20"><name pos:start="55:19" pos:end="55:20">gb</name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="55:27" pos:end="55:47">// stereo_mixdown_tag</comment>



    <if_stmt pos:start="59:5" pos:end="61:25"><if pos:start="59:5" pos:end="61:25">if <condition pos:start="59:8" pos:end="59:22">(<expr pos:start="59:9" pos:end="59:21"><call pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:17">get_bits1</name><argument_list pos:start="59:18" pos:end="59:21">(<argument pos:start="59:19" pos:end="59:20"><expr pos:start="59:19" pos:end="59:20"><name pos:start="59:19" pos:end="59:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:25"><block_content pos:start="61:9" pos:end="61:25">

        <expr_stmt pos:start="61:9" pos:end="61:25"><expr pos:start="61:9" pos:end="61:24"><call pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:17">skip_bits</name><argument_list pos:start="61:18" pos:end="61:24">(<argument pos:start="61:19" pos:end="61:20"><expr pos:start="61:19" pos:end="61:20"><name pos:start="61:19" pos:end="61:20">gb</name></expr></argument>, <argument pos:start="61:23" pos:end="61:23"><expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="61:27" pos:end="61:68">// mixdown_coeff_index and pseudo_surround</comment>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:102">(<expr pos:start="65:9" pos:end="65:101"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:21">get_bits_left</name><argument_list pos:start="65:22" pos:end="65:25">(<argument pos:start="65:23" pos:end="65:24"><expr pos:start="65:23" pos:end="65:24"><name pos:start="65:23" pos:end="65:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="65:27" pos:end="65:27">&lt;</operator> <literal type="number" pos:start="65:29" pos:end="65:29">4</literal> <operator pos:start="65:31" pos:end="65:31">*</operator> <operator pos:start="65:33" pos:end="65:33">(</operator><name pos:start="65:34" pos:end="65:42">num_front</name> <operator pos:start="65:44" pos:end="65:44">+</operator> <name pos:start="65:46" pos:end="65:53">num_side</name> <operator pos:start="65:55" pos:end="65:55">+</operator> <name pos:start="65:57" pos:end="65:64">num_back</name> <operator pos:start="65:66" pos:end="65:66">+</operator> <name pos:start="65:68" pos:end="65:74">num_lfe</name> <operator pos:start="65:76" pos:end="65:76">+</operator> <name pos:start="65:78" pos:end="65:91">num_assoc_data</name> <operator pos:start="65:93" pos:end="65:93">+</operator> <name pos:start="65:95" pos:end="65:100">num_cc</name><operator pos:start="65:101" pos:end="65:101">)</operator></expr>)</condition> <block pos:start="65:104" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:18">

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="67:64">(<argument pos:start="67:16" pos:end="67:20"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:20">avctx</name></expr></argument>, <argument pos:start="67:23" pos:end="67:34"><expr pos:start="67:23" pos:end="67:34"><name pos:start="67:23" pos:end="67:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:37" pos:end="67:63"><expr pos:start="67:37" pos:end="67:63"><literal type="string" pos:start="67:37" pos:end="67:50">"decode_pce: "</literal> <name pos:start="67:52" pos:end="67:63">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:76"><expr pos:start="73:5" pos:end="73:75"><call pos:start="73:5" pos:end="73:75"><name pos:start="73:5" pos:end="73:22">decode_channel_map</name><argument_list pos:start="73:23" pos:end="73:75">(<argument pos:start="73:24" pos:end="73:33"><expr pos:start="73:24" pos:end="73:33"><name pos:start="73:24" pos:end="73:33">layout_map</name></expr></argument>       , <argument pos:start="73:43" pos:end="73:59"><expr pos:start="73:43" pos:end="73:59"><name pos:start="73:43" pos:end="73:59">AAC_CHANNEL_FRONT</name></expr></argument>, <argument pos:start="73:62" pos:end="73:63"><expr pos:start="73:62" pos:end="73:63"><name pos:start="73:62" pos:end="73:63">gb</name></expr></argument>, <argument pos:start="73:66" pos:end="73:74"><expr pos:start="73:66" pos:end="73:74"><name pos:start="73:66" pos:end="73:74">num_front</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:8">tags</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <name pos:start="75:12" pos:end="75:20">num_front</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:75"><expr pos:start="77:5" pos:end="77:74"><call pos:start="77:5" pos:end="77:74"><name pos:start="77:5" pos:end="77:22">decode_channel_map</name><argument_list pos:start="77:23" pos:end="77:74">(<argument pos:start="77:24" pos:end="77:40"><expr pos:start="77:24" pos:end="77:40"><name pos:start="77:24" pos:end="77:33">layout_map</name> <operator pos:start="77:35" pos:end="77:35">+</operator> <name pos:start="77:37" pos:end="77:40">tags</name></expr></argument>, <argument pos:start="77:43" pos:end="77:58"><expr pos:start="77:43" pos:end="77:58"><name pos:start="77:43" pos:end="77:58">AAC_CHANNEL_SIDE</name></expr></argument>,  <argument pos:start="77:62" pos:end="77:63"><expr pos:start="77:62" pos:end="77:63"><name pos:start="77:62" pos:end="77:63">gb</name></expr></argument>, <argument pos:start="77:66" pos:end="77:73"><expr pos:start="77:66" pos:end="77:73"><name pos:start="77:66" pos:end="77:73">num_side</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:21"><expr pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:8">tags</name> <operator pos:start="79:10" pos:end="79:11">+=</operator> <name pos:start="79:13" pos:end="79:20">num_side</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:75"><expr pos:start="81:5" pos:end="81:74"><call pos:start="81:5" pos:end="81:74"><name pos:start="81:5" pos:end="81:22">decode_channel_map</name><argument_list pos:start="81:23" pos:end="81:74">(<argument pos:start="81:24" pos:end="81:40"><expr pos:start="81:24" pos:end="81:40"><name pos:start="81:24" pos:end="81:33">layout_map</name> <operator pos:start="81:35" pos:end="81:35">+</operator> <name pos:start="81:37" pos:end="81:40">tags</name></expr></argument>, <argument pos:start="81:43" pos:end="81:58"><expr pos:start="81:43" pos:end="81:58"><name pos:start="81:43" pos:end="81:58">AAC_CHANNEL_BACK</name></expr></argument>,  <argument pos:start="81:62" pos:end="81:63"><expr pos:start="81:62" pos:end="81:63"><name pos:start="81:62" pos:end="81:63">gb</name></expr></argument>, <argument pos:start="81:66" pos:end="81:73"><expr pos:start="81:66" pos:end="81:73"><name pos:start="81:66" pos:end="81:73">num_back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:8">tags</name> <operator pos:start="83:10" pos:end="83:11">+=</operator> <name pos:start="83:13" pos:end="83:20">num_back</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:74"><expr pos:start="85:5" pos:end="85:73"><call pos:start="85:5" pos:end="85:73"><name pos:start="85:5" pos:end="85:22">decode_channel_map</name><argument_list pos:start="85:23" pos:end="85:73">(<argument pos:start="85:24" pos:end="85:40"><expr pos:start="85:24" pos:end="85:40"><name pos:start="85:24" pos:end="85:33">layout_map</name> <operator pos:start="85:35" pos:end="85:35">+</operator> <name pos:start="85:37" pos:end="85:40">tags</name></expr></argument>, <argument pos:start="85:43" pos:end="85:57"><expr pos:start="85:43" pos:end="85:57"><name pos:start="85:43" pos:end="85:57">AAC_CHANNEL_LFE</name></expr></argument>,   <argument pos:start="85:62" pos:end="85:63"><expr pos:start="85:62" pos:end="85:63"><name pos:start="85:62" pos:end="85:63">gb</name></expr></argument>, <argument pos:start="85:66" pos:end="85:72"><expr pos:start="85:66" pos:end="85:72"><name pos:start="85:66" pos:end="85:72">num_lfe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:20"><expr pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:8">tags</name> <operator pos:start="87:10" pos:end="87:11">+=</operator> <name pos:start="87:13" pos:end="87:19">num_lfe</name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><call pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:18">skip_bits_long</name><argument_list pos:start="91:19" pos:end="91:42">(<argument pos:start="91:20" pos:end="91:21"><expr pos:start="91:20" pos:end="91:21"><name pos:start="91:20" pos:end="91:21">gb</name></expr></argument>, <argument pos:start="91:24" pos:end="91:41"><expr pos:start="91:24" pos:end="91:41"><literal type="number" pos:start="91:24" pos:end="91:24">4</literal> <operator pos:start="91:26" pos:end="91:26">*</operator> <name pos:start="91:28" pos:end="91:41">num_assoc_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:73"><expr pos:start="95:5" pos:end="95:72"><call pos:start="95:5" pos:end="95:72"><name pos:start="95:5" pos:end="95:22">decode_channel_map</name><argument_list pos:start="95:23" pos:end="95:72">(<argument pos:start="95:24" pos:end="95:40"><expr pos:start="95:24" pos:end="95:40"><name pos:start="95:24" pos:end="95:33">layout_map</name> <operator pos:start="95:35" pos:end="95:35">+</operator> <name pos:start="95:37" pos:end="95:40">tags</name></expr></argument>, <argument pos:start="95:43" pos:end="95:56"><expr pos:start="95:43" pos:end="95:56"><name pos:start="95:43" pos:end="95:56">AAC_CHANNEL_CC</name></expr></argument>,    <argument pos:start="95:62" pos:end="95:63"><expr pos:start="95:62" pos:end="95:63"><name pos:start="95:62" pos:end="95:63">gb</name></expr></argument>, <argument pos:start="95:66" pos:end="95:71"><expr pos:start="95:66" pos:end="95:71"><name pos:start="95:66" pos:end="95:71">num_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:19"><expr pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:8">tags</name> <operator pos:start="97:10" pos:end="97:11">+=</operator> <name pos:start="97:13" pos:end="97:18">num_cc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:48"><expr pos:start="101:5" pos:end="101:47"><call pos:start="101:5" pos:end="101:47"><name pos:start="101:5" pos:end="101:27">relative_align_get_bits</name><argument_list pos:start="101:28" pos:end="101:47">(<argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><name pos:start="101:29" pos:end="101:30">gb</name></expr></argument>, <argument pos:start="101:33" pos:end="101:46"><expr pos:start="101:33" pos:end="101:46"><name pos:start="101:33" pos:end="101:46">byte_align_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:45">/* comment field, first byte is length */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:38"><expr pos:start="107:5" pos:end="107:37"><name pos:start="107:5" pos:end="107:15">comment_len</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <call pos:start="107:19" pos:end="107:33"><name pos:start="107:19" pos:end="107:26">get_bits</name><argument_list pos:start="107:27" pos:end="107:33">(<argument pos:start="107:28" pos:end="107:29"><expr pos:start="107:28" pos:end="107:29"><name pos:start="107:28" pos:end="107:29">gb</name></expr></argument>, <argument pos:start="107:32" pos:end="107:32"><expr pos:start="107:32" pos:end="107:32"><literal type="number" pos:start="107:32" pos:end="107:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="107:35" pos:end="107:35">*</operator> <literal type="number" pos:start="107:37" pos:end="107:37">8</literal></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:40">(<expr pos:start="109:9" pos:end="109:39"><call pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:21">get_bits_left</name><argument_list pos:start="109:22" pos:end="109:25">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <name pos:start="109:29" pos:end="109:39">comment_len</name></expr>)</condition> <block pos:start="109:42" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:35">

        <expr_stmt pos:start="111:9" pos:end="111:65"><expr pos:start="111:9" pos:end="111:64"><call pos:start="111:9" pos:end="111:64"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="111:64">(<argument pos:start="111:16" pos:end="111:20"><expr pos:start="111:16" pos:end="111:20"><name pos:start="111:16" pos:end="111:20">avctx</name></expr></argument>, <argument pos:start="111:23" pos:end="111:34"><expr pos:start="111:23" pos:end="111:34"><name pos:start="111:23" pos:end="111:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:37" pos:end="111:63"><expr pos:start="111:37" pos:end="111:63"><literal type="string" pos:start="111:37" pos:end="111:50">"decode_pce: "</literal> <name pos:start="111:52" pos:end="111:63">overread_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:35">return <expr pos:start="113:16" pos:end="113:34"><name pos:start="113:16" pos:end="113:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:36"><expr pos:start="117:5" pos:end="117:35"><call pos:start="117:5" pos:end="117:35"><name pos:start="117:5" pos:end="117:18">skip_bits_long</name><argument_list pos:start="117:19" pos:end="117:35">(<argument pos:start="117:20" pos:end="117:21"><expr pos:start="117:20" pos:end="117:21"><name pos:start="117:20" pos:end="117:21">gb</name></expr></argument>, <argument pos:start="117:24" pos:end="117:34"><expr pos:start="117:24" pos:end="117:34"><name pos:start="117:24" pos:end="117:34">comment_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:16">return <expr pos:start="119:12" pos:end="119:15"><name pos:start="119:12" pos:end="119:15">tags</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>
</unit>
