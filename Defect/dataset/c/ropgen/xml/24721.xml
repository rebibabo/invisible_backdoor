<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24721.c" pos:tabs="8"><function pos:start="1:1" pos:end="253:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">tta_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:24">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:18"><decl pos:start="3:9" pos:end="3:18"><type pos:start="3:9" pos:end="3:18"><name pos:start="3:9" pos:end="3:12">void</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:18">data</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:34"><decl pos:start="3:21" pos:end="3:34"><type pos:start="3:21" pos:end="3:34"><name pos:start="3:21" pos:end="3:23">int</name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:34">data_size</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:23"><decl pos:start="5:9" pos:end="5:23"><type pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:16">AVPacket</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:23">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="253:1">{<block_content pos:start="9:5" pos:end="251:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">TTAContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><call pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:17">init_get_bits</name><argument_list pos:start="19:18" pos:end="19:42">(<argument pos:start="19:19" pos:end="19:24"><expr pos:start="19:19" pos:end="19:24"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:24"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:24">gb</name></name></expr></argument>, <argument pos:start="19:27" pos:end="19:29"><expr pos:start="19:27" pos:end="19:29"><name pos:start="19:27" pos:end="19:29">buf</name></expr></argument>, <argument pos:start="19:32" pos:end="19:41"><expr pos:start="19:32" pos:end="19:41"><name pos:start="19:32" pos:end="19:39">buf_size</name><operator pos:start="19:40" pos:end="19:40">*</operator><literal type="number" pos:start="19:41" pos:end="19:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="21:5" pos:end="247:5">{<block_content pos:start="23:9" pos:end="245:9">

        <decl_stmt pos:start="23:9" pos:end="23:53"><decl pos:start="23:9" pos:end="23:24"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:20">cur_chan</name> <init pos:start="23:22" pos:end="23:24">= <expr pos:start="23:24" pos:end="23:24"><literal type="number" pos:start="23:24" pos:end="23:24">0</literal></expr></init></decl>, <decl pos:start="23:27" pos:end="23:52"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:27" pos:end="23:34">framelen</name> <init pos:start="23:36" pos:end="23:52">= <expr pos:start="23:38" pos:end="23:52"><name pos:start="23:38" pos:end="23:52"><name pos:start="23:38" pos:end="23:38">s</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:52">frame_length</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:19"><decl pos:start="25:9" pos:end="25:18"><type pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:15">int32_t</name> <modifier pos:start="25:17" pos:end="25:17">*</modifier></type><name pos:start="25:18" pos:end="25:18">p</name></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:54">(<expr pos:start="29:13" pos:end="29:53"><operator pos:start="29:13" pos:end="29:13">*</operator><name pos:start="29:14" pos:end="29:22">data_size</name> <operator pos:start="29:24" pos:end="29:24">&lt;</operator> <operator pos:start="29:26" pos:end="29:26">(</operator><name pos:start="29:27" pos:end="29:34">framelen</name> <operator pos:start="29:36" pos:end="29:36">*</operator> <name pos:start="29:38" pos:end="29:48"><name pos:start="29:38" pos:end="29:38">s</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:48">channels</name></name> <operator pos:start="29:50" pos:end="29:50">*</operator> <literal type="number" pos:start="29:52" pos:end="29:52">2</literal><operator pos:start="29:53" pos:end="29:53">)</operator></expr>)</condition> <block pos:start="29:56" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:22">

            <expr_stmt pos:start="31:13" pos:end="31:78"><expr pos:start="31:13" pos:end="31:77"><call pos:start="31:13" pos:end="31:77"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:77">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:76"><expr pos:start="31:41" pos:end="31:76"><literal type="string" pos:start="31:41" pos:end="31:76">"Output buffer size is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="37:9" pos:end="37:25">// FIXME: seeking</comment>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:23">total_frames</name></name><operator pos:start="39:24" pos:end="39:25">--</operator></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:44"><if pos:start="41:9" pos:end="43:44">if <condition pos:start="41:12" pos:end="41:53">(<expr pos:start="41:13" pos:end="41:52"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:14">s</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:28">total_frames</name></name> <operator pos:start="41:30" pos:end="41:31">&amp;&amp;</operator> <name pos:start="41:33" pos:end="41:52"><name pos:start="41:33" pos:end="41:33">s</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:52">last_frame_length</name></name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:44"><block_content pos:start="43:13" pos:end="43:44">

            <expr_stmt pos:start="43:13" pos:end="43:44"><expr pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:20">framelen</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <name pos:start="43:24" pos:end="43:43"><name pos:start="43:24" pos:end="43:24">s</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:43">last_frame_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="line" pos:start="47:9" pos:end="47:34">// init per channel states</comment>

        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:41">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:36"><expr pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:35"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:35">channels</name></name></expr>;</condition> <incr pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:38">i</name><operator pos:start="49:39" pos:end="49:40">++</operator></expr></incr>)</control> <block pos:start="49:43" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:50">

            <expr_stmt pos:start="51:13" pos:end="51:39"><expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">ch_ctx</name><index pos:start="51:22" pos:end="51:24">[<expr pos:start="51:23" pos:end="51:23"><name pos:start="51:23" pos:end="51:23">i</name></expr>]</index></name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:34">predictor</name> <operator pos:start="51:36" pos:end="51:36">=</operator> <literal type="number" pos:start="51:38" pos:end="51:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:113"><expr pos:start="53:13" pos:end="53:112"><call pos:start="53:13" pos:end="53:112"><name pos:start="53:13" pos:end="53:26">ttafilter_init</name><argument_list pos:start="53:27" pos:end="53:112">(<argument pos:start="53:28" pos:end="53:47"><expr pos:start="53:28" pos:end="53:47"><operator pos:start="53:28" pos:end="53:28">&amp;</operator><name pos:start="53:29" pos:end="53:40"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:37">ch_ctx</name><index pos:start="53:38" pos:end="53:40">[<expr pos:start="53:39" pos:end="53:39"><name pos:start="53:39" pos:end="53:39">i</name></expr>]</index></name><operator pos:start="53:41" pos:end="53:41">.</operator><name pos:start="53:42" pos:end="53:47">filter</name></expr></argument>, <argument pos:start="53:50" pos:end="53:79"><expr pos:start="53:50" pos:end="53:79"><name pos:start="53:50" pos:end="53:79"><name pos:start="53:50" pos:end="53:66">ttafilter_configs</name><index pos:start="53:67" pos:end="53:76">[<expr pos:start="53:68" pos:end="53:75"><name pos:start="53:68" pos:end="53:73"><name pos:start="53:68" pos:end="53:68">s</name><operator pos:start="53:69" pos:end="53:70">-&gt;</operator><name pos:start="53:71" pos:end="53:73">bps</name></name><operator pos:start="53:74" pos:end="53:74">-</operator><literal type="number" pos:start="53:75" pos:end="53:75">1</literal></expr>]</index><index pos:start="53:77" pos:end="53:79">[<expr pos:start="53:78" pos:end="53:78"><literal type="number" pos:start="53:78" pos:end="53:78">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:82" pos:end="53:111"><expr pos:start="53:82" pos:end="53:111"><name pos:start="53:82" pos:end="53:111"><name pos:start="53:82" pos:end="53:98">ttafilter_configs</name><index pos:start="53:99" pos:end="53:108">[<expr pos:start="53:100" pos:end="53:107"><name pos:start="53:100" pos:end="53:105"><name pos:start="53:100" pos:end="53:100">s</name><operator pos:start="53:101" pos:end="53:102">-&gt;</operator><name pos:start="53:103" pos:end="53:105">bps</name></name><operator pos:start="53:106" pos:end="53:106">-</operator><literal type="number" pos:start="53:107" pos:end="53:107">1</literal></expr>]</index><index pos:start="53:109" pos:end="53:111">[<expr pos:start="53:110" pos:end="53:110"><literal type="number" pos:start="53:110" pos:end="53:110">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:50"><expr pos:start="55:13" pos:end="55:49"><call pos:start="55:13" pos:end="55:49"><name pos:start="55:13" pos:end="55:21">rice_init</name><argument_list pos:start="55:22" pos:end="55:49">(<argument pos:start="55:23" pos:end="55:40"><expr pos:start="55:23" pos:end="55:40"><operator pos:start="55:23" pos:end="55:23">&amp;</operator><name pos:start="55:24" pos:end="55:35"><name pos:start="55:24" pos:end="55:24">s</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:32">ch_ctx</name><index pos:start="55:33" pos:end="55:35">[<expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">i</name></expr>]</index></name><operator pos:start="55:36" pos:end="55:36">.</operator><name pos:start="55:37" pos:end="55:40">rice</name></expr></argument>, <argument pos:start="55:43" pos:end="55:44"><expr pos:start="55:43" pos:end="55:44"><literal type="number" pos:start="55:43" pos:end="55:44">10</literal></expr></argument>, <argument pos:start="55:47" pos:end="55:48"><expr pos:start="55:47" pos:end="55:48"><literal type="number" pos:start="55:47" pos:end="55:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="61:9" pos:end="209:9">for <control pos:start="61:13" pos:end="61:88">(<init pos:start="61:14" pos:end="61:34"><expr pos:start="61:14" pos:end="61:33"><name pos:start="61:14" pos:end="61:14">p</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:33"><name pos:start="61:18" pos:end="61:18">s</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:33">decode_buffer</name></name></expr>;</init> <condition pos:start="61:36" pos:end="61:83"><expr pos:start="61:36" pos:end="61:82"><name pos:start="61:36" pos:end="61:36">p</name> <operator pos:start="61:38" pos:end="61:38">&lt;</operator> <name pos:start="61:40" pos:end="61:55"><name pos:start="61:40" pos:end="61:40">s</name><operator pos:start="61:41" pos:end="61:42">-&gt;</operator><name pos:start="61:43" pos:end="61:55">decode_buffer</name></name> <operator pos:start="61:57" pos:end="61:57">+</operator> <operator pos:start="61:59" pos:end="61:59">(</operator><name pos:start="61:60" pos:end="61:67">framelen</name> <operator pos:start="61:69" pos:end="61:69">*</operator> <name pos:start="61:71" pos:end="61:81"><name pos:start="61:71" pos:end="61:71">s</name><operator pos:start="61:72" pos:end="61:73">-&gt;</operator><name pos:start="61:74" pos:end="61:81">channels</name></name><operator pos:start="61:82" pos:end="61:82">)</operator></expr>;</condition> <incr pos:start="61:85" pos:end="61:87"><expr pos:start="61:85" pos:end="61:87"><name pos:start="61:85" pos:end="61:85">p</name><operator pos:start="61:86" pos:end="61:87">++</operator></expr></incr>)</control> <block pos:start="61:90" pos:end="209:9">{<block_content pos:start="63:13" pos:end="207:13">

            <decl_stmt pos:start="63:13" pos:end="63:64"><decl pos:start="63:13" pos:end="63:63"><type pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:19">int32_t</name> <modifier pos:start="63:21" pos:end="63:21">*</modifier></type><name pos:start="63:22" pos:end="63:30">predictor</name> <init pos:start="63:32" pos:end="63:63">= <expr pos:start="63:34" pos:end="63:63"><operator pos:start="63:34" pos:end="63:34">&amp;</operator><name pos:start="63:35" pos:end="63:53"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:43">ch_ctx</name><index pos:start="63:44" pos:end="63:53">[<expr pos:start="63:45" pos:end="63:52"><name pos:start="63:45" pos:end="63:52">cur_chan</name></expr>]</index></name><operator pos:start="63:54" pos:end="63:54">.</operator><name pos:start="63:55" pos:end="63:63">predictor</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:60"><decl pos:start="65:13" pos:end="65:59"><type pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:21">TTAFilter</name> <modifier pos:start="65:23" pos:end="65:23">*</modifier></type><name pos:start="65:24" pos:end="65:29">filter</name> <init pos:start="65:31" pos:end="65:59">= <expr pos:start="65:33" pos:end="65:59"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:52"><name pos:start="65:34" pos:end="65:34">s</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:42">ch_ctx</name><index pos:start="65:43" pos:end="65:52">[<expr pos:start="65:44" pos:end="65:51"><name pos:start="65:44" pos:end="65:51">cur_chan</name></expr>]</index></name><operator pos:start="65:53" pos:end="65:53">.</operator><name pos:start="65:54" pos:end="65:59">filter</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="67:13" pos:end="67:54"><decl pos:start="67:13" pos:end="67:53"><type pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:19">TTARice</name> <modifier pos:start="67:21" pos:end="67:21">*</modifier></type><name pos:start="67:22" pos:end="67:25">rice</name> <init pos:start="67:27" pos:end="67:53">= <expr pos:start="67:29" pos:end="67:53"><operator pos:start="67:29" pos:end="67:29">&amp;</operator><name pos:start="67:30" pos:end="67:48"><name pos:start="67:30" pos:end="67:30">s</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:38">ch_ctx</name><index pos:start="67:39" pos:end="67:48">[<expr pos:start="67:40" pos:end="67:47"><name pos:start="67:40" pos:end="67:47">cur_chan</name></expr>]</index></name><operator pos:start="67:49" pos:end="67:49">.</operator><name pos:start="67:50" pos:end="67:53">rice</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:37"><decl pos:start="69:13" pos:end="69:26"><type pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:20">uint32_t</name></type> <name pos:start="69:22" pos:end="69:26">unary</name></decl>, <decl pos:start="69:29" pos:end="69:33"><type ref="prev" pos:start="69:13" pos:end="69:20"/><name pos:start="69:29" pos:end="69:33">depth</name></decl>, <decl pos:start="69:36" pos:end="69:36"><type ref="prev" pos:start="69:13" pos:end="69:20"/><name pos:start="69:36" pos:end="69:36">k</name></decl>;</decl_stmt>

            <decl_stmt pos:start="71:13" pos:end="71:26"><decl pos:start="71:13" pos:end="71:25"><type pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:19">int32_t</name></type> <name pos:start="71:21" pos:end="71:25">value</name></decl>;</decl_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:42"><expr pos:start="75:13" pos:end="75:41"><name pos:start="75:13" pos:end="75:17">unary</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:41"><name pos:start="75:21" pos:end="75:33">tta_get_unary</name><argument_list pos:start="75:34" pos:end="75:41">(<argument pos:start="75:35" pos:end="75:40"><expr pos:start="75:35" pos:end="75:40"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:40"><name pos:start="75:36" pos:end="75:36">s</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="79:13" pos:end="93:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="79:27">(<expr pos:start="79:17" pos:end="79:26"><name pos:start="79:17" pos:end="79:21">unary</name> <operator pos:start="79:23" pos:end="79:24">==</operator> <literal type="number" pos:start="79:26" pos:end="79:26">0</literal></expr>)</condition> <block pos:start="79:29" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:29">

                <expr_stmt pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:21">depth</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:29"><expr pos:start="83:17" pos:end="83:28"><name pos:start="83:17" pos:end="83:17">k</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <name pos:start="83:21" pos:end="83:28"><name pos:start="83:21" pos:end="83:24">rice</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:28">k0</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="93:13">else <block pos:start="85:20" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:24">

                <expr_stmt pos:start="87:17" pos:end="87:26"><expr pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:21">depth</name> <operator pos:start="87:23" pos:end="87:23">=</operator> <literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:17">k</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:28"><name pos:start="89:21" pos:end="89:24">rice</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:28">k1</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:24"><expr pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:21">unary</name><operator pos:start="91:22" pos:end="91:23">--</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="97:13" pos:end="99:26"><if pos:start="97:13" pos:end="99:26">if <condition pos:start="97:16" pos:end="97:42">(<expr pos:start="97:17" pos:end="97:41"><call pos:start="97:17" pos:end="97:37"><name pos:start="97:17" pos:end="97:29">get_bits_left</name><argument_list pos:start="97:30" pos:end="97:37">(<argument pos:start="97:31" pos:end="97:36"><expr pos:start="97:31" pos:end="97:36"><operator pos:start="97:31" pos:end="97:31">&amp;</operator><name pos:start="97:32" pos:end="97:36"><name pos:start="97:32" pos:end="97:32">s</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="97:39" pos:end="97:39">&lt;</operator> <name pos:start="97:41" pos:end="97:41">k</name></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:26"><block_content pos:start="99:17" pos:end="99:26">

                <return pos:start="99:17" pos:end="99:26">return <expr pos:start="99:24" pos:end="99:25"><operator pos:start="99:24" pos:end="99:24">-</operator><literal type="number" pos:start="99:25" pos:end="99:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="103:13" pos:end="113:30"><if pos:start="103:13" pos:end="111:13">if <condition pos:start="103:16" pos:end="103:18">(<expr pos:start="103:17" pos:end="103:17"><name pos:start="103:17" pos:end="103:17">k</name></expr>)</condition> <block pos:start="103:20" pos:end="111:13">{<block_content pos:start="105:17" pos:end="109:59">

                <if_stmt pos:start="105:17" pos:end="107:30"><if pos:start="105:17" pos:end="107:30">if <condition pos:start="105:20" pos:end="105:39">(<expr pos:start="105:21" pos:end="105:38"><name pos:start="105:21" pos:end="105:21">k</name> <operator pos:start="105:23" pos:end="105:23">&gt;</operator> <name pos:start="105:25" pos:end="105:38">MIN_CACHE_BITS</name></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:30"><block_content pos:start="107:21" pos:end="107:30">

                    <return pos:start="107:21" pos:end="107:30">return <expr pos:start="107:28" pos:end="107:29"><operator pos:start="107:28" pos:end="107:28">-</operator><literal type="number" pos:start="107:29" pos:end="107:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:59"><expr pos:start="109:17" pos:end="109:58"><name pos:start="109:17" pos:end="109:21">value</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <operator pos:start="109:25" pos:end="109:25">(</operator><name pos:start="109:26" pos:end="109:30">unary</name> <operator pos:start="109:32" pos:end="109:33">&lt;&lt;</operator> <name pos:start="109:35" pos:end="109:35">k</name><operator pos:start="109:36" pos:end="109:36">)</operator> <operator pos:start="109:38" pos:end="109:38">+</operator> <call pos:start="109:40" pos:end="109:58"><name pos:start="109:40" pos:end="109:47">get_bits</name><argument_list pos:start="109:48" pos:end="109:58">(<argument pos:start="109:49" pos:end="109:54"><expr pos:start="109:49" pos:end="109:54"><operator pos:start="109:49" pos:end="109:49">&amp;</operator><name pos:start="109:50" pos:end="109:54"><name pos:start="109:50" pos:end="109:50">s</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:54">gb</name></name></expr></argument>, <argument pos:start="109:57" pos:end="109:57"><expr pos:start="109:57" pos:end="109:57"><name pos:start="109:57" pos:end="109:57">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="111:15" pos:end="113:30">else<block type="pseudo" pos:start="113:17" pos:end="113:30"><block_content pos:start="113:17" pos:end="113:30">

                <expr_stmt pos:start="113:17" pos:end="113:30"><expr pos:start="113:17" pos:end="113:29"><name pos:start="113:17" pos:end="113:21">value</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:29">unary</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <comment type="line" pos:start="117:13" pos:end="117:46">// FIXME: copy paste from original</comment>

            <switch pos:start="119:13" pos:end="154:0">switch <condition pos:start="119:20" pos:end="119:26">(<expr pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:25">depth</name></expr>)</condition> <block pos:start="119:28" pos:end="154:0">{<block_content pos:start="121:13" pos:end="145:31">

            <case pos:start="121:13" pos:end="121:19">case <expr pos:start="121:18" pos:end="121:18"><literal type="number" pos:start="121:18" pos:end="121:18">1</literal></expr>:</case>

                <expr_stmt pos:start="123:17" pos:end="123:56"><expr pos:start="123:17" pos:end="123:55"><name pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:20">rice</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:26">sum1</name></name> <operator pos:start="123:28" pos:end="123:29">+=</operator> <name pos:start="123:31" pos:end="123:35">value</name> <operator pos:start="123:37" pos:end="123:37">-</operator> <operator pos:start="123:39" pos:end="123:39">(</operator><name pos:start="123:40" pos:end="123:49"><name pos:start="123:40" pos:end="123:43">rice</name><operator pos:start="123:44" pos:end="123:45">-&gt;</operator><name pos:start="123:46" pos:end="123:49">sum1</name></name> <operator pos:start="123:51" pos:end="123:52">&gt;&gt;</operator> <literal type="number" pos:start="123:54" pos:end="123:54">4</literal><operator pos:start="123:55" pos:end="123:55">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="131:31"><if pos:start="125:17" pos:end="127:31">if <condition pos:start="125:20" pos:end="125:68">(<expr pos:start="125:21" pos:end="125:67"><name pos:start="125:21" pos:end="125:28"><name pos:start="125:21" pos:end="125:24">rice</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:28">k1</name></name> <operator pos:start="125:30" pos:end="125:30">&gt;</operator> <literal type="number" pos:start="125:32" pos:end="125:32">0</literal> <operator pos:start="125:34" pos:end="125:35">&amp;&amp;</operator> <name pos:start="125:37" pos:end="125:46"><name pos:start="125:37" pos:end="125:40">rice</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:46">sum1</name></name> <operator pos:start="125:48" pos:end="125:48">&lt;</operator> <name pos:start="125:50" pos:end="125:67"><name pos:start="125:50" pos:end="125:57">shift_16</name><index pos:start="125:58" pos:end="125:67">[<expr pos:start="125:59" pos:end="125:66"><name pos:start="125:59" pos:end="125:66"><name pos:start="125:59" pos:end="125:62">rice</name><operator pos:start="125:63" pos:end="125:64">-&gt;</operator><name pos:start="125:65" pos:end="125:66">k1</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:31"><block_content pos:start="127:21" pos:end="127:31">

                    <expr_stmt pos:start="127:21" pos:end="127:31"><expr pos:start="127:21" pos:end="127:30"><name pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:24">rice</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:28">k1</name></name><operator pos:start="127:29" pos:end="127:30">--</operator></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="129:17" pos:end="131:31">else if<condition pos:start="129:24" pos:end="129:60">(<expr pos:start="129:25" pos:end="129:59"><name pos:start="129:25" pos:end="129:34"><name pos:start="129:25" pos:end="129:28">rice</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:34">sum1</name></name> <operator pos:start="129:36" pos:end="129:36">&gt;</operator> <name pos:start="129:38" pos:end="129:59"><name pos:start="129:38" pos:end="129:45">shift_16</name><index pos:start="129:46" pos:end="129:59">[<expr pos:start="129:47" pos:end="129:58"><name pos:start="129:47" pos:end="129:54"><name pos:start="129:47" pos:end="129:50">rice</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:54">k1</name></name> <operator pos:start="129:56" pos:end="129:56">+</operator> <literal type="number" pos:start="129:58" pos:end="129:58">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="131:21" pos:end="131:31"><block_content pos:start="131:21" pos:end="131:31">

                    <expr_stmt pos:start="131:21" pos:end="131:31"><expr pos:start="131:21" pos:end="131:30"><name pos:start="131:21" pos:end="131:28"><name pos:start="131:21" pos:end="131:24">rice</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:28">k1</name></name><operator pos:start="131:29" pos:end="131:30">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:43"><expr pos:start="133:17" pos:end="133:42"><name pos:start="133:17" pos:end="133:21">value</name> <operator pos:start="133:23" pos:end="133:24">+=</operator> <name pos:start="133:26" pos:end="133:42"><name pos:start="133:26" pos:end="133:32">shift_1</name><index pos:start="133:33" pos:end="133:42">[<expr pos:start="133:34" pos:end="133:41"><name pos:start="133:34" pos:end="133:41"><name pos:start="133:34" pos:end="133:37">rice</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:41">k0</name></name></expr>]</index></name></expr>;</expr_stmt>

            <default pos:start="135:13" pos:end="135:20">default:</default>

                <expr_stmt pos:start="137:17" pos:end="137:56"><expr pos:start="137:17" pos:end="137:55"><name pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:20">rice</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:26">sum0</name></name> <operator pos:start="137:28" pos:end="137:29">+=</operator> <name pos:start="137:31" pos:end="137:35">value</name> <operator pos:start="137:37" pos:end="137:37">-</operator> <operator pos:start="137:39" pos:end="137:39">(</operator><name pos:start="137:40" pos:end="137:49"><name pos:start="137:40" pos:end="137:43">rice</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:49">sum0</name></name> <operator pos:start="137:51" pos:end="137:52">&gt;&gt;</operator> <literal type="number" pos:start="137:54" pos:end="137:54">4</literal><operator pos:start="137:55" pos:end="137:55">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="145:31"><if pos:start="139:17" pos:end="141:31">if <condition pos:start="139:20" pos:end="139:68">(<expr pos:start="139:21" pos:end="139:67"><name pos:start="139:21" pos:end="139:28"><name pos:start="139:21" pos:end="139:24">rice</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:28">k0</name></name> <operator pos:start="139:30" pos:end="139:30">&gt;</operator> <literal type="number" pos:start="139:32" pos:end="139:32">0</literal> <operator pos:start="139:34" pos:end="139:35">&amp;&amp;</operator> <name pos:start="139:37" pos:end="139:46"><name pos:start="139:37" pos:end="139:40">rice</name><operator pos:start="139:41" pos:end="139:42">-&gt;</operator><name pos:start="139:43" pos:end="139:46">sum0</name></name> <operator pos:start="139:48" pos:end="139:48">&lt;</operator> <name pos:start="139:50" pos:end="139:67"><name pos:start="139:50" pos:end="139:57">shift_16</name><index pos:start="139:58" pos:end="139:67">[<expr pos:start="139:59" pos:end="139:66"><name pos:start="139:59" pos:end="139:66"><name pos:start="139:59" pos:end="139:62">rice</name><operator pos:start="139:63" pos:end="139:64">-&gt;</operator><name pos:start="139:65" pos:end="139:66">k0</name></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:31"><block_content pos:start="141:21" pos:end="141:31">

                    <expr_stmt pos:start="141:21" pos:end="141:31"><expr pos:start="141:21" pos:end="141:30"><name pos:start="141:21" pos:end="141:28"><name pos:start="141:21" pos:end="141:24">rice</name><operator pos:start="141:25" pos:end="141:26">-&gt;</operator><name pos:start="141:27" pos:end="141:28">k0</name></name><operator pos:start="141:29" pos:end="141:30">--</operator></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="143:17" pos:end="145:31">else if<condition pos:start="143:24" pos:end="143:60">(<expr pos:start="143:25" pos:end="143:59"><name pos:start="143:25" pos:end="143:34"><name pos:start="143:25" pos:end="143:28">rice</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:34">sum0</name></name> <operator pos:start="143:36" pos:end="143:36">&gt;</operator> <name pos:start="143:38" pos:end="143:59"><name pos:start="143:38" pos:end="143:45">shift_16</name><index pos:start="143:46" pos:end="143:59">[<expr pos:start="143:47" pos:end="143:58"><name pos:start="143:47" pos:end="143:54"><name pos:start="143:47" pos:end="143:50">rice</name><operator pos:start="143:51" pos:end="143:52">-&gt;</operator><name pos:start="143:53" pos:end="143:54">k0</name></name> <operator pos:start="143:56" pos:end="143:56">+</operator> <literal type="number" pos:start="143:58" pos:end="143:58">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="145:31"><block_content pos:start="145:21" pos:end="145:31">

                    <expr_stmt pos:start="145:21" pos:end="145:31"><expr pos:start="145:21" pos:end="145:30"><name pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:24">rice</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:28">k0</name></name><operator pos:start="145:29" pos:end="145:30">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></switch>



            <comment type="line" pos:start="151:13" pos:end="151:34">// extract coded value</comment>

<cpp:define pos:start="153:1" pos:end="153:52">#<cpp:directive pos:start="153:2" pos:end="153:7">define</cpp:directive> <cpp:macro pos:start="153:9" pos:end="153:17"><name pos:start="153:9" pos:end="153:14">UNFOLD</name><parameter_list pos:start="153:15" pos:end="153:17">(<parameter pos:start="153:16" pos:end="153:16"><type pos:start="153:16" pos:end="153:16"><name pos:start="153:16" pos:end="153:16">x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="153:19" pos:end="153:52">(((x)&amp;1) ? (++(x)&gt;&gt;1) : (-(x)&gt;&gt;1))</cpp:value></cpp:define>

            <expr_stmt pos:start="155:13" pos:end="155:31"><expr pos:start="155:13" pos:end="155:30"><operator pos:start="155:13" pos:end="155:13">*</operator><name pos:start="155:14" pos:end="155:14">p</name> <operator pos:start="155:16" pos:end="155:16">=</operator> <call pos:start="155:18" pos:end="155:30"><name pos:start="155:18" pos:end="155:23">UNFOLD</name><argument_list pos:start="155:24" pos:end="155:30">(<argument pos:start="155:25" pos:end="155:29"><expr pos:start="155:25" pos:end="155:29"><name pos:start="155:25" pos:end="155:29">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="159:13" pos:end="159:32">// run hybrid filter</comment>

            <expr_stmt pos:start="161:13" pos:end="168:0"><expr pos:start="161:13" pos:end="161:43"><call pos:start="161:13" pos:end="161:43"><name pos:start="161:13" pos:end="161:29">ttafilter_process</name><argument_list pos:start="161:30" pos:end="161:43">(<argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><name pos:start="161:31" pos:end="161:36">filter</name></expr></argument>, <argument pos:start="161:39" pos:end="161:39"><expr pos:start="161:39" pos:end="161:39"><name pos:start="161:39" pos:end="161:39">p</name></expr></argument>, <argument pos:start="161:42" pos:end="161:42"><expr pos:start="161:42" pos:end="161:42"><literal type="number" pos:start="161:42" pos:end="161:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="line" pos:start="165:13" pos:end="165:37">// fixed order prediction</comment>

<cpp:define pos:start="167:1" pos:end="167:59">#<cpp:directive pos:start="167:2" pos:end="167:7">define</cpp:directive> <cpp:macro pos:start="167:9" pos:end="167:18"><name pos:start="167:9" pos:end="167:12">PRED</name><parameter_list pos:start="167:13" pos:end="167:18">(<parameter pos:start="167:14" pos:end="167:14"><type pos:start="167:14" pos:end="167:14"><name pos:start="167:14" pos:end="167:14">x</name></type></parameter>, <parameter pos:start="167:17" pos:end="167:17"><type pos:start="167:17" pos:end="167:17"><name pos:start="167:17" pos:end="167:17">k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="167:20" pos:end="167:59">(int32_t)((((uint64_t)x &lt;&lt; k) - x) &gt;&gt; k)</cpp:value></cpp:define>

            <switch pos:start="169:13" pos:end="179:13">switch <condition pos:start="169:20" pos:end="169:27">(<expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:26">bps</name></name></expr>)</condition> <block pos:start="169:29" pos:end="179:13">{<block_content pos:start="171:17" pos:end="177:48">

                <case pos:start="171:17" pos:end="171:23">case <expr pos:start="171:22" pos:end="171:22"><literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr>:</case> <expr_stmt pos:start="171:25" pos:end="171:50"><expr pos:start="171:25" pos:end="171:49"><operator pos:start="171:25" pos:end="171:25">*</operator><name pos:start="171:26" pos:end="171:26">p</name> <operator pos:start="171:28" pos:end="171:29">+=</operator> <call pos:start="171:31" pos:end="171:49"><name pos:start="171:31" pos:end="171:34">PRED</name><argument_list pos:start="171:35" pos:end="171:49">(<argument pos:start="171:36" pos:end="171:45"><expr pos:start="171:36" pos:end="171:45"><operator pos:start="171:36" pos:end="171:36">*</operator><name pos:start="171:37" pos:end="171:45">predictor</name></expr></argument>, <argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="171:52" pos:end="171:57">break;</break>

                <case pos:start="173:17" pos:end="173:23">case <expr pos:start="173:22" pos:end="173:22"><literal type="number" pos:start="173:22" pos:end="173:22">2</literal></expr>:</case>

                <case pos:start="175:17" pos:end="175:23">case <expr pos:start="175:22" pos:end="175:22"><literal type="number" pos:start="175:22" pos:end="175:22">3</literal></expr>:</case> <expr_stmt pos:start="175:25" pos:end="175:50"><expr pos:start="175:25" pos:end="175:49"><operator pos:start="175:25" pos:end="175:25">*</operator><name pos:start="175:26" pos:end="175:26">p</name> <operator pos:start="175:28" pos:end="175:29">+=</operator> <call pos:start="175:31" pos:end="175:49"><name pos:start="175:31" pos:end="175:34">PRED</name><argument_list pos:start="175:35" pos:end="175:49">(<argument pos:start="175:36" pos:end="175:45"><expr pos:start="175:36" pos:end="175:45"><operator pos:start="175:36" pos:end="175:36">*</operator><name pos:start="175:37" pos:end="175:45">predictor</name></expr></argument>, <argument pos:start="175:48" pos:end="175:48"><expr pos:start="175:48" pos:end="175:48"><literal type="number" pos:start="175:48" pos:end="175:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="175:52" pos:end="175:57">break;</break>

                <case pos:start="177:17" pos:end="177:23">case <expr pos:start="177:22" pos:end="177:22"><literal type="number" pos:start="177:22" pos:end="177:22">4</literal></expr>:</case> <expr_stmt pos:start="177:25" pos:end="177:41"><expr pos:start="177:25" pos:end="177:40"><operator pos:start="177:25" pos:end="177:25">*</operator><name pos:start="177:26" pos:end="177:26">p</name> <operator pos:start="177:28" pos:end="177:29">+=</operator> <operator pos:start="177:31" pos:end="177:31">*</operator><name pos:start="177:32" pos:end="177:40">predictor</name></expr>;</expr_stmt> <break pos:start="177:43" pos:end="177:48">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="181:13" pos:end="181:28"><expr pos:start="181:13" pos:end="181:27"><operator pos:start="181:13" pos:end="181:13">*</operator><name pos:start="181:14" pos:end="181:22">predictor</name> <operator pos:start="181:24" pos:end="181:24">=</operator> <operator pos:start="181:26" pos:end="181:26">*</operator><name pos:start="181:27" pos:end="181:27">p</name></expr>;</expr_stmt>



            <comment type="line" pos:start="185:13" pos:end="185:28">// flip channels</comment>

            <if_stmt pos:start="187:13" pos:end="207:13"><if pos:start="187:13" pos:end="189:27">if <condition pos:start="187:16" pos:end="187:43">(<expr pos:start="187:17" pos:end="187:42"><name pos:start="187:17" pos:end="187:24">cur_chan</name> <operator pos:start="187:26" pos:end="187:26">&lt;</operator> <operator pos:start="187:28" pos:end="187:28">(</operator><name pos:start="187:29" pos:end="187:39"><name pos:start="187:29" pos:end="187:29">s</name><operator pos:start="187:30" pos:end="187:31">-&gt;</operator><name pos:start="187:32" pos:end="187:39">channels</name></name><operator pos:start="187:40" pos:end="187:40">-</operator><literal type="number" pos:start="187:41" pos:end="187:41">1</literal><operator pos:start="187:42" pos:end="187:42">)</operator></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:27"><block_content pos:start="189:17" pos:end="189:27">

                <expr_stmt pos:start="189:17" pos:end="189:27"><expr pos:start="189:17" pos:end="189:26"><name pos:start="189:17" pos:end="189:24">cur_chan</name><operator pos:start="189:25" pos:end="189:26">++</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="191:13" pos:end="207:13">else <block pos:start="191:18" pos:end="207:13">{<block_content pos:start="195:17" pos:end="205:29">

                <comment type="line" pos:start="193:17" pos:end="193:56">// decorrelate in case of stereo integer</comment>

                <if_stmt pos:start="195:17" pos:end="203:17"><if pos:start="195:17" pos:end="203:17">if <condition pos:start="195:20" pos:end="195:36">(<expr pos:start="195:21" pos:end="195:35"><name pos:start="195:21" pos:end="195:31"><name pos:start="195:21" pos:end="195:21">s</name><operator pos:start="195:22" pos:end="195:23">-&gt;</operator><name pos:start="195:24" pos:end="195:31">channels</name></name> <operator pos:start="195:33" pos:end="195:33">&gt;</operator> <literal type="number" pos:start="195:35" pos:end="195:35">1</literal></expr>)</condition> <block pos:start="195:38" pos:end="203:17">{<block_content pos:start="197:21" pos:end="201:43">

                    <decl_stmt pos:start="197:21" pos:end="197:39"><decl pos:start="197:21" pos:end="197:38"><type pos:start="197:21" pos:end="197:29"><name pos:start="197:21" pos:end="197:27">int32_t</name> <modifier pos:start="197:29" pos:end="197:29">*</modifier></type><name pos:start="197:30" pos:end="197:30">r</name> <init pos:start="197:32" pos:end="197:38">= <expr pos:start="197:34" pos:end="197:38"><name pos:start="197:34" pos:end="197:34">p</name> <operator pos:start="197:36" pos:end="197:36">-</operator> <literal type="number" pos:start="197:38" pos:end="197:38">1</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="199:21" pos:end="201:43">for <control pos:start="199:25" pos:end="199:64">(<init pos:start="199:26" pos:end="199:38"><expr pos:start="199:26" pos:end="199:37"><operator pos:start="199:26" pos:end="199:26">*</operator><name pos:start="199:27" pos:end="199:27">p</name> <operator pos:start="199:29" pos:end="199:30">+=</operator> <operator pos:start="199:32" pos:end="199:32">*</operator><name pos:start="199:33" pos:end="199:33">r</name> <operator pos:start="199:35" pos:end="199:35">/</operator> <literal type="number" pos:start="199:37" pos:end="199:37">2</literal></expr>;</init> <condition pos:start="199:40" pos:end="199:59"><expr pos:start="199:40" pos:end="199:58"><name pos:start="199:40" pos:end="199:40">r</name> <operator pos:start="199:42" pos:end="199:42">&gt;</operator> <name pos:start="199:44" pos:end="199:44">p</name> <operator pos:start="199:46" pos:end="199:46">-</operator> <name pos:start="199:48" pos:end="199:58"><name pos:start="199:48" pos:end="199:48">s</name><operator pos:start="199:49" pos:end="199:50">-&gt;</operator><name pos:start="199:51" pos:end="199:58">channels</name></name></expr>;</condition> <incr pos:start="199:61" pos:end="199:63"><expr pos:start="199:61" pos:end="199:63"><name pos:start="199:61" pos:end="199:61">r</name><operator pos:start="199:62" pos:end="199:63">--</operator></expr></incr>)</control><block type="pseudo" pos:start="201:25" pos:end="201:43"><block_content pos:start="201:25" pos:end="201:43">

                        <expr_stmt pos:start="201:25" pos:end="201:43"><expr pos:start="201:25" pos:end="201:42"><operator pos:start="201:25" pos:end="201:25">*</operator><name pos:start="201:26" pos:end="201:26">r</name> <operator pos:start="201:28" pos:end="201:28">=</operator> <operator pos:start="201:30" pos:end="201:30">*</operator><operator pos:start="201:31" pos:end="201:31">(</operator><name pos:start="201:32" pos:end="201:32">r</name> <operator pos:start="201:34" pos:end="201:34">+</operator> <literal type="number" pos:start="201:36" pos:end="201:36">1</literal><operator pos:start="201:37" pos:end="201:37">)</operator> <operator pos:start="201:39" pos:end="201:39">-</operator> <operator pos:start="201:41" pos:end="201:41">*</operator><name pos:start="201:42" pos:end="201:42">r</name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:29"><expr pos:start="205:17" pos:end="205:28"><name pos:start="205:17" pos:end="205:24">cur_chan</name> <operator pos:start="205:26" pos:end="205:26">=</operator> <literal type="number" pos:start="205:28" pos:end="205:28">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="213:9" pos:end="215:22"><if pos:start="213:9" pos:end="215:22">if <condition pos:start="213:12" pos:end="213:39">(<expr pos:start="213:13" pos:end="213:38"><call pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:25">get_bits_left</name><argument_list pos:start="213:26" pos:end="213:33">(<argument pos:start="213:27" pos:end="213:32"><expr pos:start="213:27" pos:end="213:32"><operator pos:start="213:27" pos:end="213:27">&amp;</operator><name pos:start="213:28" pos:end="213:32"><name pos:start="213:28" pos:end="213:28">s</name><operator pos:start="213:29" pos:end="213:30">-&gt;</operator><name pos:start="213:31" pos:end="213:32">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:35" pos:end="213:35">&lt;</operator> <literal type="number" pos:start="213:37" pos:end="213:38">32</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:22"><block_content pos:start="215:13" pos:end="215:22">

            <return pos:start="215:13" pos:end="215:22">return <expr pos:start="215:20" pos:end="215:21"><operator pos:start="215:20" pos:end="215:20">-</operator><literal type="number" pos:start="215:21" pos:end="215:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><call pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:17">skip_bits</name><argument_list pos:start="217:18" pos:end="217:29">(<argument pos:start="217:19" pos:end="217:24"><expr pos:start="217:19" pos:end="217:24"><operator pos:start="217:19" pos:end="217:19">&amp;</operator><name pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:20">s</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:24">gb</name></name></expr></argument>, <argument pos:start="217:27" pos:end="217:28"><expr pos:start="217:27" pos:end="217:28"><literal type="number" pos:start="217:27" pos:end="217:28">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="217:32" pos:end="217:43">// frame crc</comment>



        <comment type="line" pos:start="221:9" pos:end="221:35">// convert to output buffer</comment>

        <switch pos:start="223:9" pos:end="245:9">switch<condition pos:start="223:15" pos:end="223:22">(<expr pos:start="223:16" pos:end="223:21"><name pos:start="223:16" pos:end="223:21"><name pos:start="223:16" pos:end="223:16">s</name><operator pos:start="223:17" pos:end="223:18">-&gt;</operator><name pos:start="223:19" pos:end="223:21">bps</name></name></expr>)</condition> <block pos:start="223:24" pos:end="245:9">{<block_content pos:start="225:13" pos:end="243:89">

            <case pos:start="225:13" pos:end="225:19">case <expr pos:start="225:18" pos:end="225:18"><literal type="number" pos:start="225:18" pos:end="225:18">2</literal></expr>:</case> <block pos:start="225:21" pos:end="239:13">{<block_content pos:start="227:17" pos:end="237:22">

                <decl_stmt pos:start="227:17" pos:end="227:41"><decl pos:start="227:17" pos:end="227:40"><type pos:start="227:17" pos:end="227:26"><name pos:start="227:17" pos:end="227:24">uint16_t</name> <modifier pos:start="227:26" pos:end="227:26">*</modifier></type><name pos:start="227:27" pos:end="227:33">samples</name> <init pos:start="227:35" pos:end="227:40">= <expr pos:start="227:37" pos:end="227:40"><name pos:start="227:37" pos:end="227:40">data</name></expr></init></decl>;</decl_stmt>

                <for pos:start="229:17" pos:end="233:17">for <control pos:start="229:21" pos:end="229:96">(<init pos:start="229:22" pos:end="229:42"><expr pos:start="229:22" pos:end="229:41"><name pos:start="229:22" pos:end="229:22">p</name> <operator pos:start="229:24" pos:end="229:24">=</operator> <name pos:start="229:26" pos:end="229:41"><name pos:start="229:26" pos:end="229:26">s</name><operator pos:start="229:27" pos:end="229:28">-&gt;</operator><name pos:start="229:29" pos:end="229:41">decode_buffer</name></name></expr>;</init> <condition pos:start="229:44" pos:end="229:91"><expr pos:start="229:44" pos:end="229:90"><name pos:start="229:44" pos:end="229:44">p</name> <operator pos:start="229:46" pos:end="229:46">&lt;</operator> <name pos:start="229:48" pos:end="229:63"><name pos:start="229:48" pos:end="229:48">s</name><operator pos:start="229:49" pos:end="229:50">-&gt;</operator><name pos:start="229:51" pos:end="229:63">decode_buffer</name></name> <operator pos:start="229:65" pos:end="229:65">+</operator> <operator pos:start="229:67" pos:end="229:67">(</operator><name pos:start="229:68" pos:end="229:75">framelen</name> <operator pos:start="229:77" pos:end="229:77">*</operator> <name pos:start="229:79" pos:end="229:89"><name pos:start="229:79" pos:end="229:79">s</name><operator pos:start="229:80" pos:end="229:81">-&gt;</operator><name pos:start="229:82" pos:end="229:89">channels</name></name><operator pos:start="229:90" pos:end="229:90">)</operator></expr>;</condition> <incr pos:start="229:93" pos:end="229:95"><expr pos:start="229:93" pos:end="229:95"><name pos:start="229:93" pos:end="229:93">p</name><operator pos:start="229:94" pos:end="229:95">++</operator></expr></incr>)</control> <block pos:start="229:98" pos:end="233:17">{<block_content pos:start="231:21" pos:end="231:36">

                    <expr_stmt pos:start="231:21" pos:end="231:36"><expr pos:start="231:21" pos:end="231:35"><operator pos:start="231:21" pos:end="231:21">*</operator><name pos:start="231:22" pos:end="231:28">samples</name><operator pos:start="231:29" pos:end="231:30">++</operator> <operator pos:start="231:32" pos:end="231:32">=</operator> <operator pos:start="231:34" pos:end="231:34">*</operator><name pos:start="231:35" pos:end="231:35">p</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="235:17" pos:end="235:66"><expr pos:start="235:17" pos:end="235:65"><operator pos:start="235:17" pos:end="235:17">*</operator><name pos:start="235:18" pos:end="235:26">data_size</name> <operator pos:start="235:28" pos:end="235:28">=</operator> <operator pos:start="235:30" pos:end="235:30">(</operator><name pos:start="235:31" pos:end="235:37">uint8_t</name> <operator pos:start="235:39" pos:end="235:39">*</operator><operator pos:start="235:40" pos:end="235:40">)</operator><name pos:start="235:41" pos:end="235:47">samples</name> <operator pos:start="235:49" pos:end="235:49">-</operator> <operator pos:start="235:51" pos:end="235:51">(</operator><name pos:start="235:52" pos:end="235:58">uint8_t</name> <operator pos:start="235:60" pos:end="235:60">*</operator><operator pos:start="235:61" pos:end="235:61">)</operator><name pos:start="235:62" pos:end="235:65">data</name></expr>;</expr_stmt>

                <break pos:start="237:17" pos:end="237:22">break;</break>

            </block_content>}</block>

            <default pos:start="241:13" pos:end="241:20">default:</default>

                <expr_stmt pos:start="243:17" pos:end="243:89"><expr pos:start="243:17" pos:end="243:88"><call pos:start="243:17" pos:end="243:88"><name pos:start="243:17" pos:end="243:22">av_log</name><argument_list pos:start="243:23" pos:end="243:88">(<argument pos:start="243:24" pos:end="243:31"><expr pos:start="243:24" pos:end="243:31"><name pos:start="243:24" pos:end="243:31"><name pos:start="243:24" pos:end="243:24">s</name><operator pos:start="243:25" pos:end="243:26">-&gt;</operator><name pos:start="243:27" pos:end="243:31">avctx</name></name></expr></argument>, <argument pos:start="243:34" pos:end="243:45"><expr pos:start="243:34" pos:end="243:45"><name pos:start="243:34" pos:end="243:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:48" pos:end="243:87"><expr pos:start="243:48" pos:end="243:87"><literal type="string" pos:start="243:48" pos:end="243:87">"Error, only 16bit samples supported!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block>



    <return pos:start="251:5" pos:end="251:20">return <expr pos:start="251:12" pos:end="251:19"><name pos:start="251:12" pos:end="251:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
