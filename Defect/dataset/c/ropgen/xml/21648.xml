<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21648.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">video_decode_example</name><parameter_list pos:start="1:26" pos:end="1:72">(<parameter pos:start="1:27" pos:end="1:49"><decl pos:start="1:27" pos:end="1:49"><type pos:start="1:27" pos:end="1:49"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:49">outfilename</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><specifier pos:start="1:52" pos:end="1:56">const</specifier> <name pos:start="1:58" pos:end="1:61">char</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:71">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="229:1">{<block_content pos:start="5:5" pos:end="227:17">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVCodec</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:18">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name><init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">frame</name></decl>, <decl pos:start="9:16" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:19">size</name></decl>, <decl pos:start="9:22" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:32">got_picture</name></decl>, <decl pos:start="9:35" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:37">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">FILE</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:20">picture</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:73"><decl pos:start="15:5" pos:end="15:60"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:60"><name pos:start="15:13" pos:end="15:17">inbuf</name><index pos:start="15:18" pos:end="15:60">[<expr pos:start="15:19" pos:end="15:59"><name pos:start="15:19" pos:end="15:28">INBUF_SIZE</name> <operator pos:start="15:30" pos:end="15:30">+</operator> <name pos:start="15:32" pos:end="15:59">FF_INPUT_BUFFER_PADDING_SIZE</name></expr>]</index></name></decl>, <decl pos:start="15:63" pos:end="15:72"><type ref="prev" pos:start="15:5" pos:end="15:11"><modifier pos:start="15:63" pos:end="15:63">*</modifier></type><name pos:start="15:64" pos:end="15:72">inbuf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:12">buf</name><index pos:start="17:13" pos:end="17:18">[<expr pos:start="17:14" pos:end="17:17"><literal type="number" pos:start="17:14" pos:end="17:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:100">/* set end of buffer to 0 (this ensures that no overreading happens for damaged mpeg streams) */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:64"><expr pos:start="23:5" pos:end="23:63"><call pos:start="23:5" pos:end="23:63"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:63">(<argument pos:start="23:12" pos:end="23:29"><expr pos:start="23:12" pos:end="23:29"><name pos:start="23:12" pos:end="23:16">inbuf</name> <operator pos:start="23:18" pos:end="23:18">+</operator> <name pos:start="23:20" pos:end="23:29">INBUF_SIZE</name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:62"><expr pos:start="23:35" pos:end="23:62"><name pos:start="23:35" pos:end="23:62">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><call pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:10">printf</name><argument_list pos:start="27:11" pos:end="27:30">(<argument pos:start="27:12" pos:end="27:29"><expr pos:start="27:12" pos:end="27:29"><literal type="string" pos:start="27:12" pos:end="27:29">"Video decoding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:38">/* find the mpeg1 video decoder */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:54"><expr pos:start="33:5" pos:end="33:53"><name pos:start="33:5" pos:end="33:9">codec</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:53"><name pos:start="33:13" pos:end="33:32">avcodec_find_decoder</name><argument_list pos:start="33:33" pos:end="33:53">(<argument pos:start="33:34" pos:end="33:52"><expr pos:start="33:34" pos:end="33:52"><name pos:start="33:34" pos:end="33:52">CODEC_ID_MPEG1VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:14">codec</name></expr>)</condition> <block pos:start="35:17" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:16">

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><call pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:44">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:43"><expr pos:start="37:25" pos:end="37:43"><literal type="string" pos:start="37:25" pos:end="37:43">"codec not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><call pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">exit</name><argument_list pos:start="39:13" pos:end="39:15">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:5">c</name><operator pos:start="45:6" pos:end="45:6">=</operator> <call pos:start="45:8" pos:end="45:30"><name pos:start="45:8" pos:end="45:28">avcodec_alloc_context</name><argument_list pos:start="45:29" pos:end="45:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:35"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:11">picture</name><operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:34"><name pos:start="47:14" pos:end="47:32">avcodec_alloc_frame</name><argument_list pos:start="47:33" pos:end="47:34">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:40"><if pos:start="51:5" pos:end="53:40">if<condition pos:start="51:7" pos:end="51:47">(<expr pos:start="51:8" pos:end="51:46"><name pos:start="51:8" pos:end="51:26"><name pos:start="51:8" pos:end="51:12">codec</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:26">capabilities</name></name><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:46">CODEC_CAP_TRUNCATED</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:40"><block_content pos:start="53:9" pos:end="53:40">

        <expr_stmt pos:start="53:9" pos:end="53:40"><expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:16">flags</name></name><operator pos:start="53:17" pos:end="53:18">|=</operator> <name pos:start="53:20" pos:end="53:39">CODEC_FLAG_TRUNCATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="53:42" pos:end="53:75">/* we dont send complete frames */</comment>



    <comment type="block" pos:start="57:5" pos:end="61:26">/* for some codecs, such as msmpeg4 and mpeg4, width and height

       MUST be initialized there because these info are not available

       in the bitstream */</comment>



    <comment type="block" pos:start="65:5" pos:end="65:17">/* open it */</comment>

    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:35">(<expr pos:start="67:9" pos:end="67:34"><call pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:20">avcodec_open</name><argument_list pos:start="67:21" pos:end="67:30">(<argument pos:start="67:22" pos:end="67:22"><expr pos:start="67:22" pos:end="67:22"><name pos:start="67:22" pos:end="67:22">c</name></expr></argument>, <argument pos:start="67:25" pos:end="67:29"><expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:29">codec</name></expr></argument>)</argument_list></call> <operator pos:start="67:32" pos:end="67:32">&lt;</operator> <literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr>)</condition> <block pos:start="67:37" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:16">

        <expr_stmt pos:start="69:9" pos:end="69:50"><expr pos:start="69:9" pos:end="69:49"><call pos:start="69:9" pos:end="69:49"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:49">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="69:48"><expr pos:start="69:25" pos:end="69:48"><literal type="string" pos:start="69:25" pos:end="69:48">"could not open codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:16"><expr pos:start="71:9" pos:end="71:15"><call pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:12">exit</name><argument_list pos:start="71:13" pos:end="71:15">(<argument pos:start="71:14" pos:end="71:14"><expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <comment type="block" pos:start="77:5" pos:end="77:55">/* the codec gives us the frame size, in samples */</comment>



    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:5">f</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <call pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:13">fopen</name><argument_list pos:start="81:14" pos:end="81:28">(<argument pos:start="81:15" pos:end="81:22"><expr pos:start="81:15" pos:end="81:22"><name pos:start="81:15" pos:end="81:22">filename</name></expr></argument>, <argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><literal type="string" pos:start="81:25" pos:end="81:27">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:11">(<expr pos:start="83:9" pos:end="83:10"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:10">f</name></expr>)</condition> <block pos:start="83:13" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:16">

        <expr_stmt pos:start="85:9" pos:end="85:57"><expr pos:start="85:9" pos:end="85:56"><call pos:start="85:9" pos:end="85:56"><name pos:start="85:9" pos:end="85:15">fprintf</name><argument_list pos:start="85:16" pos:end="85:56">(<argument pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">stderr</name></expr></argument>, <argument pos:start="85:25" pos:end="85:45"><expr pos:start="85:25" pos:end="85:45"><literal type="string" pos:start="85:25" pos:end="85:45">"could not open %s\n"</literal></expr></argument>, <argument pos:start="85:48" pos:end="85:55"><expr pos:start="85:48" pos:end="85:55"><name pos:start="85:48" pos:end="85:55">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="93:5" pos:end="93:14"><expr pos:start="93:5" pos:end="93:13"><name pos:start="93:5" pos:end="93:9">frame</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <literal type="number" pos:start="93:13" pos:end="93:13">0</literal></expr>;</expr_stmt>

    <for pos:start="95:5" pos:end="179:5">for<control pos:start="95:8" pos:end="95:11">(<init pos:start="95:9" pos:end="95:9">;</init><condition pos:start="95:10" pos:end="95:10">;</condition><incr/>)</control> <block pos:start="95:13" pos:end="179:5">{<block_content pos:start="97:9" pos:end="177:9">

        <expr_stmt pos:start="97:9" pos:end="97:46"><expr pos:start="97:9" pos:end="97:45"><name pos:start="97:9" pos:end="97:12">size</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:45"><name pos:start="97:16" pos:end="97:20">fread</name><argument_list pos:start="97:21" pos:end="97:45">(<argument pos:start="97:22" pos:end="97:26"><expr pos:start="97:22" pos:end="97:26"><name pos:start="97:22" pos:end="97:26">inbuf</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">1</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:41"><expr pos:start="97:32" pos:end="97:41"><name pos:start="97:32" pos:end="97:41">INBUF_SIZE</name></expr></argument>, <argument pos:start="97:44" pos:end="97:44"><expr pos:start="97:44" pos:end="97:44"><name pos:start="97:44" pos:end="97:44">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="101:18"><if pos:start="99:9" pos:end="101:18">if <condition pos:start="99:12" pos:end="99:22">(<expr pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:16">size</name> <operator pos:start="99:18" pos:end="99:19">==</operator> <literal type="number" pos:start="99:21" pos:end="99:21">0</literal></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:18"><block_content pos:start="101:13" pos:end="101:18">

            <break pos:start="101:13" pos:end="101:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="105:9" pos:end="119:48">/* NOTE1: some codecs are stream based (mpegvideo, mpegaudio)

           and this is the only method to use them because you cannot

           know the compressed data size before analysing it. 



           BUT some other codecs (msmpeg4, mpeg4) are inherently frame

           based, so you must call them with all the data for one

           frame exactly. You must also initialize 'width' and

           'height' before initializing them. */</comment>



        <comment type="block" pos:start="123:9" pos:end="127:45">/* NOTE2: some codecs allow the raw parameters (frame size,

           sample rate) to be changed at any frame. We handle this, so

           you should also take care of it */</comment>



        <comment type="block" pos:start="131:9" pos:end="133:61">/* here, we use a stream based decoder (mpeg1video), so we

           feed decoder and see if it could decode a frame */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:26"><expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:17">inbuf_ptr</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <name pos:start="135:21" pos:end="135:25">inbuf</name></expr>;</expr_stmt>

        <while pos:start="137:9" pos:end="177:9">while <condition pos:start="137:15" pos:end="137:24">(<expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:19">size</name> <operator pos:start="137:21" pos:end="137:21">&gt;</operator> <literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr>)</condition> <block pos:start="137:26" pos:end="177:9">{<block_content pos:start="139:13" pos:end="175:29">

            <expr_stmt pos:start="139:13" pos:end="141:56"><expr pos:start="139:13" pos:end="141:55"><name pos:start="139:13" pos:end="139:15">len</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="141:55"><name pos:start="139:19" pos:end="139:38">avcodec_decode_video</name><argument_list pos:start="139:39" pos:end="141:55">(<argument pos:start="139:40" pos:end="139:40"><expr pos:start="139:40" pos:end="139:40"><name pos:start="139:40" pos:end="139:40">c</name></expr></argument>, <argument pos:start="139:43" pos:end="139:49"><expr pos:start="139:43" pos:end="139:49"><name pos:start="139:43" pos:end="139:49">picture</name></expr></argument>, <argument pos:start="139:52" pos:end="139:63"><expr pos:start="139:52" pos:end="139:63"><operator pos:start="139:52" pos:end="139:52">&amp;</operator><name pos:start="139:53" pos:end="139:63">got_picture</name></expr></argument>, 

                                       <argument pos:start="141:40" pos:end="141:48"><expr pos:start="141:40" pos:end="141:48"><name pos:start="141:40" pos:end="141:48">inbuf_ptr</name></expr></argument>, <argument pos:start="141:51" pos:end="141:54"><expr pos:start="141:51" pos:end="141:54"><name pos:start="141:51" pos:end="141:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="149:13"><if pos:start="143:13" pos:end="149:13">if <condition pos:start="143:16" pos:end="143:24">(<expr pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:19">len</name> <operator pos:start="143:21" pos:end="143:21">&lt;</operator> <literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>)</condition> <block pos:start="143:26" pos:end="149:13">{<block_content pos:start="145:17" pos:end="147:24">

                <expr_stmt pos:start="145:17" pos:end="145:74"><expr pos:start="145:17" pos:end="145:73"><call pos:start="145:17" pos:end="145:73"><name pos:start="145:17" pos:end="145:23">fprintf</name><argument_list pos:start="145:24" pos:end="145:73">(<argument pos:start="145:25" pos:end="145:30"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:30">stderr</name></expr></argument>, <argument pos:start="145:33" pos:end="145:65"><expr pos:start="145:33" pos:end="145:65"><literal type="string" pos:start="145:33" pos:end="145:65">"Error while decoding frame %d\n"</literal></expr></argument>, <argument pos:start="145:68" pos:end="145:72"><expr pos:start="145:68" pos:end="145:72"><name pos:start="145:68" pos:end="145:72">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:24"><expr pos:start="147:17" pos:end="147:23"><call pos:start="147:17" pos:end="147:23"><name pos:start="147:17" pos:end="147:20">exit</name><argument_list pos:start="147:21" pos:end="147:23">(<argument pos:start="147:22" pos:end="147:22"><expr pos:start="147:22" pos:end="147:22"><literal type="number" pos:start="147:22" pos:end="147:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="151:13" pos:end="171:13"><if pos:start="151:13" pos:end="171:13">if <condition pos:start="151:16" pos:end="151:28">(<expr pos:start="151:17" pos:end="151:27"><name pos:start="151:17" pos:end="151:27">got_picture</name></expr>)</condition> <block pos:start="151:30" pos:end="171:13">{<block_content pos:start="153:17" pos:end="169:24">

                <expr_stmt pos:start="153:17" pos:end="153:52"><expr pos:start="153:17" pos:end="153:51"><call pos:start="153:17" pos:end="153:51"><name pos:start="153:17" pos:end="153:22">printf</name><argument_list pos:start="153:23" pos:end="153:51">(<argument pos:start="153:24" pos:end="153:43"><expr pos:start="153:24" pos:end="153:43"><literal type="string" pos:start="153:24" pos:end="153:43">"saving frame %3d\n"</literal></expr></argument>, <argument pos:start="153:46" pos:end="153:50"><expr pos:start="153:46" pos:end="153:50"><name pos:start="153:46" pos:end="153:50">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:31"><expr pos:start="155:17" pos:end="155:30"><call pos:start="155:17" pos:end="155:30"><name pos:start="155:17" pos:end="155:22">fflush</name><argument_list pos:start="155:23" pos:end="155:30">(<argument pos:start="155:24" pos:end="155:29"><expr pos:start="155:24" pos:end="155:29"><name pos:start="155:24" pos:end="155:29">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="159:17" pos:end="161:29">/* the picture is allocated by the decoder. no need to

                   free it */</comment>

                <expr_stmt pos:start="163:17" pos:end="163:63"><expr pos:start="163:17" pos:end="163:62"><call pos:start="163:17" pos:end="163:62"><name pos:start="163:17" pos:end="163:24">snprintf</name><argument_list pos:start="163:25" pos:end="163:62">(<argument pos:start="163:26" pos:end="163:28"><expr pos:start="163:26" pos:end="163:28"><name pos:start="163:26" pos:end="163:28">buf</name></expr></argument>, <argument pos:start="163:31" pos:end="163:41"><expr pos:start="163:31" pos:end="163:41"><sizeof pos:start="163:31" pos:end="163:41">sizeof<argument_list pos:start="163:37" pos:end="163:41">(<argument pos:start="163:38" pos:end="163:40"><expr pos:start="163:38" pos:end="163:40"><name pos:start="163:38" pos:end="163:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:44" pos:end="163:54"><expr pos:start="163:44" pos:end="163:54"><name pos:start="163:44" pos:end="163:54">outfilename</name></expr></argument>, <argument pos:start="163:57" pos:end="163:61"><expr pos:start="163:57" pos:end="163:61"><name pos:start="163:57" pos:end="163:61">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="167:51"><expr pos:start="165:17" pos:end="167:50"><call pos:start="165:17" pos:end="167:50"><name pos:start="165:17" pos:end="165:24">pgm_save</name><argument_list pos:start="165:25" pos:end="167:50">(<argument pos:start="165:26" pos:end="165:41"><expr pos:start="165:26" pos:end="165:41"><name pos:start="165:26" pos:end="165:41"><name pos:start="165:26" pos:end="165:32">picture</name><operator pos:start="165:33" pos:end="165:34">-&gt;</operator><name pos:start="165:35" pos:end="165:38">data</name><index pos:start="165:39" pos:end="165:41">[<expr pos:start="165:40" pos:end="165:40"><literal type="number" pos:start="165:40" pos:end="165:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:44" pos:end="165:63"><expr pos:start="165:44" pos:end="165:63"><name pos:start="165:44" pos:end="165:63"><name pos:start="165:44" pos:end="165:50">picture</name><operator pos:start="165:51" pos:end="165:52">-&gt;</operator><name pos:start="165:53" pos:end="165:60">linesize</name><index pos:start="165:61" pos:end="165:63">[<expr pos:start="165:62" pos:end="165:62"><literal type="number" pos:start="165:62" pos:end="165:62">0</literal></expr>]</index></name></expr></argument>, 

                         <argument pos:start="167:26" pos:end="167:33"><expr pos:start="167:26" pos:end="167:33"><name pos:start="167:26" pos:end="167:33"><name pos:start="167:26" pos:end="167:26">c</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:33">width</name></name></expr></argument>, <argument pos:start="167:36" pos:end="167:44"><expr pos:start="167:36" pos:end="167:44"><name pos:start="167:36" pos:end="167:44"><name pos:start="167:36" pos:end="167:36">c</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:44">height</name></name></expr></argument>, <argument pos:start="167:47" pos:end="167:49"><expr pos:start="167:47" pos:end="167:49"><name pos:start="167:47" pos:end="167:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:24"><expr pos:start="169:17" pos:end="169:23"><name pos:start="169:17" pos:end="169:21">frame</name><operator pos:start="169:22" pos:end="169:23">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:24"><expr pos:start="173:13" pos:end="173:23"><name pos:start="173:13" pos:end="173:16">size</name> <operator pos:start="173:18" pos:end="173:19">-=</operator> <name pos:start="173:21" pos:end="173:23">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:29"><expr pos:start="175:13" pos:end="175:28"><name pos:start="175:13" pos:end="175:21">inbuf_ptr</name> <operator pos:start="175:23" pos:end="175:24">+=</operator> <name pos:start="175:26" pos:end="175:28">len</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></for>



    <comment type="block" pos:start="183:5" pos:end="187:51">/* some codecs, such as MPEG, transmit the I and P frame with a

       latency of one frame. You must do the following to have a

       chance to get the last frame of the video */</comment>

    <expr_stmt pos:start="189:5" pos:end="191:40"><expr pos:start="189:5" pos:end="191:39"><name pos:start="189:5" pos:end="189:7">len</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <call pos:start="189:11" pos:end="191:39"><name pos:start="189:11" pos:end="189:30">avcodec_decode_video</name><argument_list pos:start="189:31" pos:end="191:39">(<argument pos:start="189:32" pos:end="189:32"><expr pos:start="189:32" pos:end="189:32"><name pos:start="189:32" pos:end="189:32">c</name></expr></argument>, <argument pos:start="189:35" pos:end="189:41"><expr pos:start="189:35" pos:end="189:41"><name pos:start="189:35" pos:end="189:41">picture</name></expr></argument>, <argument pos:start="189:44" pos:end="189:55"><expr pos:start="189:44" pos:end="189:55"><operator pos:start="189:44" pos:end="189:44">&amp;</operator><name pos:start="189:45" pos:end="189:55">got_picture</name></expr></argument>, 

                               <argument pos:start="191:32" pos:end="191:35"><expr pos:start="191:32" pos:end="191:35"><name pos:start="191:32" pos:end="191:35">NULL</name></expr></argument>, <argument pos:start="191:38" pos:end="191:38"><expr pos:start="191:38" pos:end="191:38"><literal type="number" pos:start="191:38" pos:end="191:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="213:5"><if pos:start="193:5" pos:end="213:5">if <condition pos:start="193:8" pos:end="193:20">(<expr pos:start="193:9" pos:end="193:19"><name pos:start="193:9" pos:end="193:19">got_picture</name></expr>)</condition> <block pos:start="193:22" pos:end="213:5">{<block_content pos:start="195:9" pos:end="211:16">

        <expr_stmt pos:start="195:9" pos:end="195:49"><expr pos:start="195:9" pos:end="195:48"><call pos:start="195:9" pos:end="195:48"><name pos:start="195:9" pos:end="195:14">printf</name><argument_list pos:start="195:15" pos:end="195:48">(<argument pos:start="195:16" pos:end="195:40"><expr pos:start="195:16" pos:end="195:40"><literal type="string" pos:start="195:16" pos:end="195:40">"saving last frame %3d\n"</literal></expr></argument>, <argument pos:start="195:43" pos:end="195:47"><expr pos:start="195:43" pos:end="195:47"><name pos:start="195:43" pos:end="195:47">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:23"><expr pos:start="197:9" pos:end="197:22"><call pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:14">fflush</name><argument_list pos:start="197:15" pos:end="197:22">(<argument pos:start="197:16" pos:end="197:21"><expr pos:start="197:16" pos:end="197:21"><name pos:start="197:16" pos:end="197:21">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <comment type="block" pos:start="201:9" pos:end="203:21">/* the picture is allocated by the decoder. no need to

           free it */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:55"><expr pos:start="205:9" pos:end="205:54"><call pos:start="205:9" pos:end="205:54"><name pos:start="205:9" pos:end="205:16">snprintf</name><argument_list pos:start="205:17" pos:end="205:54">(<argument pos:start="205:18" pos:end="205:20"><expr pos:start="205:18" pos:end="205:20"><name pos:start="205:18" pos:end="205:20">buf</name></expr></argument>, <argument pos:start="205:23" pos:end="205:33"><expr pos:start="205:23" pos:end="205:33"><sizeof pos:start="205:23" pos:end="205:33">sizeof<argument_list pos:start="205:29" pos:end="205:33">(<argument pos:start="205:30" pos:end="205:32"><expr pos:start="205:30" pos:end="205:32"><name pos:start="205:30" pos:end="205:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="205:36" pos:end="205:46"><expr pos:start="205:36" pos:end="205:46"><name pos:start="205:36" pos:end="205:46">outfilename</name></expr></argument>, <argument pos:start="205:49" pos:end="205:53"><expr pos:start="205:49" pos:end="205:53"><name pos:start="205:49" pos:end="205:53">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="209:43"><expr pos:start="207:9" pos:end="209:42"><call pos:start="207:9" pos:end="209:42"><name pos:start="207:9" pos:end="207:16">pgm_save</name><argument_list pos:start="207:17" pos:end="209:42">(<argument pos:start="207:18" pos:end="207:33"><expr pos:start="207:18" pos:end="207:33"><name pos:start="207:18" pos:end="207:33"><name pos:start="207:18" pos:end="207:24">picture</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:30">data</name><index pos:start="207:31" pos:end="207:33">[<expr pos:start="207:32" pos:end="207:32"><literal type="number" pos:start="207:32" pos:end="207:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="207:36" pos:end="207:55"><expr pos:start="207:36" pos:end="207:55"><name pos:start="207:36" pos:end="207:55"><name pos:start="207:36" pos:end="207:42">picture</name><operator pos:start="207:43" pos:end="207:44">-&gt;</operator><name pos:start="207:45" pos:end="207:52">linesize</name><index pos:start="207:53" pos:end="207:55">[<expr pos:start="207:54" pos:end="207:54"><literal type="number" pos:start="207:54" pos:end="207:54">0</literal></expr>]</index></name></expr></argument>, 

                 <argument pos:start="209:18" pos:end="209:25"><expr pos:start="209:18" pos:end="209:25"><name pos:start="209:18" pos:end="209:25"><name pos:start="209:18" pos:end="209:18">c</name><operator pos:start="209:19" pos:end="209:20">-&gt;</operator><name pos:start="209:21" pos:end="209:25">width</name></name></expr></argument>, <argument pos:start="209:28" pos:end="209:36"><expr pos:start="209:28" pos:end="209:36"><name pos:start="209:28" pos:end="209:36"><name pos:start="209:28" pos:end="209:28">c</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:36">height</name></name></expr></argument>, <argument pos:start="209:39" pos:end="209:41"><expr pos:start="209:39" pos:end="209:41"><name pos:start="209:39" pos:end="209:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:16"><expr pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:13">frame</name><operator pos:start="211:14" pos:end="211:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

        

    <expr_stmt pos:start="217:5" pos:end="217:14"><expr pos:start="217:5" pos:end="217:13"><call pos:start="217:5" pos:end="217:13"><name pos:start="217:5" pos:end="217:10">fclose</name><argument_list pos:start="217:11" pos:end="217:13">(<argument pos:start="217:12" pos:end="217:12"><expr pos:start="217:12" pos:end="217:12"><name pos:start="217:12" pos:end="217:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:21"><expr pos:start="221:5" pos:end="221:20"><call pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:17">avcodec_close</name><argument_list pos:start="221:18" pos:end="221:20">(<argument pos:start="221:19" pos:end="221:19"><expr pos:start="221:19" pos:end="221:19"><name pos:start="221:19" pos:end="221:19">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:12"><expr pos:start="223:5" pos:end="223:11"><call pos:start="223:5" pos:end="223:11"><name pos:start="223:5" pos:end="223:8">free</name><argument_list pos:start="223:9" pos:end="223:11">(<argument pos:start="223:10" pos:end="223:10"><expr pos:start="223:10" pos:end="223:10"><name pos:start="223:10" pos:end="223:10">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:18"><expr pos:start="225:5" pos:end="225:17"><call pos:start="225:5" pos:end="225:17"><name pos:start="225:5" pos:end="225:8">free</name><argument_list pos:start="225:9" pos:end="225:17">(<argument pos:start="225:10" pos:end="225:16"><expr pos:start="225:10" pos:end="225:16"><name pos:start="225:10" pos:end="225:16">picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:17"><expr pos:start="227:5" pos:end="227:16"><call pos:start="227:5" pos:end="227:16"><name pos:start="227:5" pos:end="227:10">printf</name><argument_list pos:start="227:11" pos:end="227:16">(<argument pos:start="227:12" pos:end="227:15"><expr pos:start="227:12" pos:end="227:15"><literal type="string" pos:start="227:12" pos:end="227:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
