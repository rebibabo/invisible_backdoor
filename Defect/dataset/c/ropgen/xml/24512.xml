<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24512.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">qmp_ringbuf_write</name><parameter_list pos:start="1:23" pos:end="5:36">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">device</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:38"><decl pos:start="3:24" pos:end="3:38"><type pos:start="3:24" pos:end="3:38"><name pos:start="3:24" pos:end="3:27">bool</name></type> <name pos:start="3:29" pos:end="3:38">has_format</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:62"><decl pos:start="3:41" pos:end="3:62"><type pos:start="3:41" pos:end="3:62"><name pos:start="3:41" pos:end="3:55"><name pos:start="3:41" pos:end="3:44">enum</name> <name pos:start="3:46" pos:end="3:55">DataFormat</name></name></type> <name pos:start="3:57" pos:end="3:62">format</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:35"><decl pos:start="5:24" pos:end="5:35"><type pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:28">Error</name> <modifier pos:start="5:30" pos:end="5:30">*</modifier><modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="75:1">{<block_content pos:start="9:5" pos:end="73:5">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">CharDriverState</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:29">write_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">gsize</name></type> <name pos:start="15:11" pos:end="15:21">write_count</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:7">chr</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:31"><name pos:start="19:11" pos:end="19:23">qemu_chr_find</name><argument_list pos:start="19:24" pos:end="19:31">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><name pos:start="19:25" pos:end="19:30">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">chr</name></expr>)</condition> <block pos:start="21:15" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:58"><expr pos:start="23:9" pos:end="23:57"><call pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:57">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:48"><expr pos:start="23:26" pos:end="23:48"><literal type="string" pos:start="23:26" pos:end="23:48">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:56"><expr pos:start="23:51" pos:end="23:56"><name pos:start="23:51" pos:end="23:56">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:23">chr_is_ringbuf</name><argument_list pos:start="31:24" pos:end="31:28">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">chr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:31" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:62"><expr pos:start="33:9" pos:end="33:61"><call pos:start="33:9" pos:end="33:61"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:61">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>,<argument pos:start="33:25" pos:end="33:52"><expr pos:start="33:25" pos:end="33:52"><literal type="string" pos:start="33:25" pos:end="33:52">"%s is not a ringbuf device"</literal></expr></argument>, <argument pos:start="33:55" pos:end="33:60"><expr pos:start="33:55" pos:end="33:60"><name pos:start="33:55" pos:end="33:60">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:53">(<expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:18">has_format</name> <operator pos:start="41:20" pos:end="41:21">&amp;&amp;</operator> <operator pos:start="41:23" pos:end="41:23">(</operator><name pos:start="41:24" pos:end="41:29">format</name> <operator pos:start="41:31" pos:end="41:32">==</operator> <name pos:start="41:34" pos:end="41:51">DATA_FORMAT_BASE64</name><operator pos:start="41:52" pos:end="41:52">)</operator></expr>)</condition> <block pos:start="41:55" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:57">

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:18">write_data</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:56"><name pos:start="43:22" pos:end="43:36">g_base64_decode</name><argument_list pos:start="43:37" pos:end="43:56">(<argument pos:start="43:38" pos:end="43:41"><expr pos:start="43:38" pos:end="43:41"><name pos:start="43:38" pos:end="43:41">data</name></expr></argument>, <argument pos:start="43:44" pos:end="43:55"><expr pos:start="43:44" pos:end="43:55"><operator pos:start="43:44" pos:end="43:44">&amp;</operator><name pos:start="43:45" pos:end="43:55">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="51:5">else <block pos:start="45:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:35">

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:18">write_data</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <operator pos:start="47:22" pos:end="47:22">(</operator><name pos:start="47:23" pos:end="47:29">uint8_t</name> <operator pos:start="47:31" pos:end="47:31">*</operator><operator pos:start="47:32" pos:end="47:32">)</operator><name pos:start="47:33" pos:end="47:36">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:19">write_count</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:28">strlen</name><argument_list pos:start="49:29" pos:end="49:34">(<argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:58"><expr pos:start="55:5" pos:end="55:57"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:57"><name pos:start="55:11" pos:end="55:27">ringbuf_chr_write</name><argument_list pos:start="55:28" pos:end="55:57">(<argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">chr</name></expr></argument>, <argument pos:start="55:34" pos:end="55:43"><expr pos:start="55:34" pos:end="55:43"><name pos:start="55:34" pos:end="55:43">write_data</name></expr></argument>, <argument pos:start="55:46" pos:end="55:56"><expr pos:start="55:46" pos:end="55:56"><name pos:start="55:46" pos:end="55:56">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:38">(<expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:18">write_data</name> <operator pos:start="59:20" pos:end="59:21">!=</operator> <operator pos:start="59:23" pos:end="59:23">(</operator><name pos:start="59:24" pos:end="59:30">uint8_t</name> <operator pos:start="59:32" pos:end="59:32">*</operator><operator pos:start="59:33" pos:end="59:33">)</operator><name pos:start="59:34" pos:end="59:37">data</name></expr>)</condition> <block pos:start="59:40" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:35">

        <expr_stmt pos:start="61:9" pos:end="61:35"><expr pos:start="61:9" pos:end="61:34"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:14">g_free</name><argument_list pos:start="61:15" pos:end="61:34">(<argument pos:start="61:16" pos:end="61:33"><expr pos:start="61:16" pos:end="61:33"><operator pos:start="61:16" pos:end="61:16">(</operator><name pos:start="61:17" pos:end="61:20">void</name> <operator pos:start="61:22" pos:end="61:22">*</operator><operator pos:start="61:23" pos:end="61:23">)</operator><name pos:start="61:24" pos:end="61:33">write_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition> <block pos:start="67:18" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:15">

        <expr_stmt pos:start="69:9" pos:end="69:65"><expr pos:start="69:9" pos:end="69:64"><call pos:start="69:9" pos:end="69:64"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:64">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:55"><expr pos:start="69:26" pos:end="69:55"><literal type="string" pos:start="69:26" pos:end="69:55">"Failed to write to device %s"</literal></expr></argument>, <argument pos:start="69:58" pos:end="69:63"><expr pos:start="69:58" pos:end="69:63"><name pos:start="69:58" pos:end="69:63">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
