<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8331.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">receive_filter</name><parameter_list pos:start="1:26" pos:end="1:69">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">VirtIONet</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">n</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">buf</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:68"><decl pos:start="1:61" pos:end="1:68"><type pos:start="1:61" pos:end="1:68"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:68">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:13">

    <decl_stmt pos:start="5:5" pos:end="5:72"><decl pos:start="5:5" pos:end="5:71"><type pos:start="5:5" pos:end="5:24"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:24">uint8_t</name></type> <name pos:start="5:26" pos:end="5:32"><name pos:start="5:26" pos:end="5:30">bcast</name><index pos:start="5:31" pos:end="5:32">[]</index></name> <init pos:start="5:34" pos:end="5:71">= <expr pos:start="5:36" pos:end="5:71"><block pos:start="5:36" pos:end="5:71">{<expr pos:start="5:37" pos:end="5:40"><literal type="number" pos:start="5:37" pos:end="5:40">0xff</literal></expr>, <expr pos:start="5:43" pos:end="5:46"><literal type="number" pos:start="5:43" pos:end="5:46">0xff</literal></expr>, <expr pos:start="5:49" pos:end="5:52"><literal type="number" pos:start="5:49" pos:end="5:52">0xff</literal></expr>, <expr pos:start="5:55" pos:end="5:58"><literal type="number" pos:start="5:55" pos:end="5:58">0xff</literal></expr>, <expr pos:start="5:61" pos:end="5:64"><literal type="number" pos:start="5:61" pos:end="5:64">0xff</literal></expr>, <expr pos:start="5:67" pos:end="5:70"><literal type="number" pos:start="5:67" pos:end="5:70">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:24"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:24">uint8_t</name></type> <name pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:29">vlan</name><index pos:start="7:30" pos:end="7:31">[]</index></name> <init pos:start="7:33" pos:end="7:46">= <expr pos:start="7:35" pos:end="7:46"><block pos:start="7:35" pos:end="7:46">{<expr pos:start="7:36" pos:end="7:39"><literal type="number" pos:start="7:36" pos:end="7:39">0x81</literal></expr>, <expr pos:start="7:42" pos:end="7:45"><literal type="number" pos:start="7:42" pos:end="7:45">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name> <init pos:start="9:18" pos:end="9:33">= <expr pos:start="9:20" pos:end="9:33"><operator pos:start="9:20" pos:end="9:20">(</operator><name pos:start="9:21" pos:end="9:27">uint8_t</name> <operator pos:start="9:29" pos:end="9:29">*</operator><operator pos:start="9:30" pos:end="9:30">)</operator><name pos:start="9:31" pos:end="9:33">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:9">n</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:18">promisc</name></name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:46">(<expr pos:start="21:9" pos:end="21:45"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:45"><name pos:start="21:10" pos:end="21:15">memcmp</name><argument_list pos:start="21:16" pos:end="21:45">(<argument pos:start="21:17" pos:end="21:24"><expr pos:start="21:17" pos:end="21:24"><operator pos:start="21:17" pos:end="21:17">&amp;</operator><name pos:start="21:18" pos:end="21:24"><name pos:start="21:18" pos:end="21:20">ptr</name><index pos:start="21:21" pos:end="21:24">[<expr pos:start="21:22" pos:end="21:23"><literal type="number" pos:start="21:22" pos:end="21:23">12</literal></expr>]</index></name></expr></argument>, <argument pos:start="21:27" pos:end="21:30"><expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">vlan</name></expr></argument>, <argument pos:start="21:33" pos:end="21:44"><expr pos:start="21:33" pos:end="21:44"><sizeof pos:start="21:33" pos:end="21:44">sizeof<argument_list pos:start="21:39" pos:end="21:44">(<argument pos:start="21:40" pos:end="21:43"><expr pos:start="21:40" pos:end="21:43"><name pos:start="21:40" pos:end="21:43">vlan</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:48" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:21">

        <decl_stmt pos:start="23:9" pos:end="23:63"><decl pos:start="23:9" pos:end="23:62"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">vid</name> <init pos:start="23:17" pos:end="23:62">= <expr pos:start="23:19" pos:end="23:62"><call pos:start="23:19" pos:end="23:54"><name pos:start="23:19" pos:end="23:30">be16_to_cpup</name><argument_list pos:start="23:31" pos:end="23:54">(<argument pos:start="23:32" pos:end="23:53"><expr pos:start="23:32" pos:end="23:53"><operator pos:start="23:32" pos:end="23:32">(</operator><name pos:start="23:33" pos:end="23:40">uint16_t</name> <operator pos:start="23:42" pos:end="23:42">*</operator><operator pos:start="23:43" pos:end="23:43">)</operator><operator pos:start="23:44" pos:end="23:44">(</operator><name pos:start="23:45" pos:end="23:47">ptr</name> <operator pos:start="23:49" pos:end="23:49">+</operator> <literal type="number" pos:start="23:51" pos:end="23:52">14</literal><operator pos:start="23:53" pos:end="23:53">)</operator></expr></argument>)</argument_list></call> <operator pos:start="23:56" pos:end="23:56">&amp;</operator> <literal type="number" pos:start="23:58" pos:end="23:62">0xfff</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="25:9" pos:end="27:21"><if pos:start="25:9" pos:end="27:21">if <condition pos:start="25:12" pos:end="25:57">(<expr pos:start="25:13" pos:end="25:56"><operator pos:start="25:13" pos:end="25:13">!</operator><operator pos:start="25:14" pos:end="25:14">(</operator><name pos:start="25:15" pos:end="25:32"><name pos:start="25:15" pos:end="25:15">n</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">vlans</name><index pos:start="25:23" pos:end="25:32">[<expr pos:start="25:24" pos:end="25:31"><name pos:start="25:24" pos:end="25:26">vid</name> <operator pos:start="25:28" pos:end="25:29">&gt;&gt;</operator> <literal type="number" pos:start="25:31" pos:end="25:31">5</literal></expr>]</index></name> <operator pos:start="25:34" pos:end="25:34">&amp;</operator> <operator pos:start="25:36" pos:end="25:36">(</operator><literal type="number" pos:start="25:37" pos:end="25:38">1U</literal> <operator pos:start="25:40" pos:end="25:41">&lt;&lt;</operator> <operator pos:start="25:43" pos:end="25:43">(</operator><name pos:start="25:44" pos:end="25:46">vid</name> <operator pos:start="25:48" pos:end="25:48">&amp;</operator> <literal type="number" pos:start="25:50" pos:end="25:53">0x1f</literal><operator pos:start="25:54" pos:end="25:54">)</operator><operator pos:start="25:55" pos:end="25:55">)</operator><operator pos:start="25:56" pos:end="25:56">)</operator></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:21"><block_content pos:start="27:13" pos:end="27:21">

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="53:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:11">ptr</name><index pos:start="33:12" pos:end="33:14">[<expr pos:start="33:13" pos:end="33:13"><literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>]</index></name> <operator pos:start="33:16" pos:end="33:16">&amp;</operator> <literal type="number" pos:start="33:18" pos:end="33:18">1</literal></expr>)</condition> <block pos:start="33:21" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9"> <comment type="line" pos:start="33:23" pos:end="33:34">// multicast</comment>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:47">(<expr pos:start="35:13" pos:end="35:46"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:46"><name pos:start="35:14" pos:end="35:19">memcmp</name><argument_list pos:start="35:20" pos:end="35:46">(<argument pos:start="35:21" pos:end="35:23"><expr pos:start="35:21" pos:end="35:23"><name pos:start="35:21" pos:end="35:23">ptr</name></expr></argument>, <argument pos:start="35:26" pos:end="35:30"><expr pos:start="35:26" pos:end="35:30"><name pos:start="35:26" pos:end="35:30">bcast</name></expr></argument>, <argument pos:start="35:33" pos:end="35:45"><expr pos:start="35:33" pos:end="35:45"><sizeof pos:start="35:33" pos:end="35:45">sizeof<argument_list pos:start="35:39" pos:end="35:45">(<argument pos:start="35:40" pos:end="35:44"><expr pos:start="35:40" pos:end="35:44"><name pos:start="35:40" pos:end="35:44">bcast</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:49" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:21">

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">1</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="43:9">else if <condition pos:start="39:19" pos:end="39:31">(<expr pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:20">n</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:30">allmulti</name></name></expr>)</condition> <block pos:start="39:33" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:21">

            <return pos:start="41:13" pos:end="41:21">return <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="53:5">else <block pos:start="45:12" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:9"> <comment type="line" pos:start="45:14" pos:end="45:23">// unicast</comment>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:43">(<expr pos:start="47:13" pos:end="47:42"><operator pos:start="47:13" pos:end="47:13">!</operator><call pos:start="47:14" pos:end="47:42"><name pos:start="47:14" pos:end="47:19">memcmp</name><argument_list pos:start="47:20" pos:end="47:42">(<argument pos:start="47:21" pos:end="47:23"><expr pos:start="47:21" pos:end="47:23"><name pos:start="47:21" pos:end="47:23">ptr</name></expr></argument>, <argument pos:start="47:26" pos:end="47:31"><expr pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:31"><name pos:start="47:26" pos:end="47:26">n</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:31">mac</name></name></expr></argument>, <argument pos:start="47:34" pos:end="47:41"><expr pos:start="47:34" pos:end="47:41"><name pos:start="47:34" pos:end="47:41">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:45" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:21">

            <return pos:start="49:13" pos:end="49:21">return <expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="57:5" pos:end="63:5">for <control pos:start="57:9" pos:end="57:45">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:40"><expr pos:start="57:17" pos:end="57:39"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:39"><name pos:start="57:21" pos:end="57:21">n</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:32">mac_table</name><operator pos:start="57:33" pos:end="57:33">.</operator><name pos:start="57:34" pos:end="57:39">in_use</name></name></expr>;</condition> <incr pos:start="57:42" pos:end="57:44"><expr pos:start="57:42" pos:end="57:44"><name pos:start="57:42" pos:end="57:42">i</name><operator pos:start="57:43" pos:end="57:44">++</operator></expr></incr>)</control> <block pos:start="57:47" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:21">

        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:69">(<expr pos:start="59:13" pos:end="59:68"><operator pos:start="59:13" pos:end="59:13">!</operator><call pos:start="59:14" pos:end="59:68"><name pos:start="59:14" pos:end="59:19">memcmp</name><argument_list pos:start="59:20" pos:end="59:68">(<argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">ptr</name></expr></argument>, <argument pos:start="59:26" pos:end="59:57"><expr pos:start="59:26" pos:end="59:57"><operator pos:start="59:26" pos:end="59:26">&amp;</operator><name pos:start="59:27" pos:end="59:57"><name pos:start="59:27" pos:end="59:27">n</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:38">mac_table</name><operator pos:start="59:39" pos:end="59:39">.</operator><name pos:start="59:40" pos:end="59:43">macs</name><index pos:start="59:44" pos:end="59:57">[<expr pos:start="59:45" pos:end="59:56"><name pos:start="59:45" pos:end="59:45">i</name> <operator pos:start="59:47" pos:end="59:47">*</operator> <name pos:start="59:49" pos:end="59:56">ETH_ALEN</name></expr>]</index></name></expr></argument>, <argument pos:start="59:60" pos:end="59:67"><expr pos:start="59:60" pos:end="59:67"><name pos:start="59:60" pos:end="59:67">ETH_ALEN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21">

            <return pos:start="61:13" pos:end="61:21">return <expr pos:start="61:20" pos:end="61:20"><literal type="number" pos:start="61:20" pos:end="61:20">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
