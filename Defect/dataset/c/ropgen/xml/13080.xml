<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13080.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_slice_thread_init</name><parameter_list pos:start="1:25" pos:end="1:47">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:13">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ThreadContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">thread_count</name> <init pos:start="9:22" pos:end="9:42">= <expr pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:28">avctx</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:42">thread_count</name></name></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:19">HAVE_W32THREADS</name></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:20"><call pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">w32thread_init</name><argument_list pos:start="15:19" pos:end="15:20">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="21:5" pos:end="37:5"><if pos:start="21:5" pos:end="37:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21">thread_count</name></expr>)</condition> <block pos:start="21:24" pos:end="37:5">{<block_content pos:start="23:9" pos:end="35:51">

        <decl_stmt pos:start="23:9" pos:end="23:37"><decl pos:start="23:9" pos:end="23:36"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:19">nb_cpus</name> <init pos:start="23:21" pos:end="23:36">= <expr pos:start="23:23" pos:end="23:36"><call pos:start="23:23" pos:end="23:36"><name pos:start="23:23" pos:end="23:34">av_cpu_count</name><argument_list pos:start="23:35" pos:end="23:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:76"><expr pos:start="25:9" pos:end="25:75"><call pos:start="25:9" pos:end="25:75"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:75">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="25:37" pos:end="25:65"><expr pos:start="25:37" pos:end="25:65"><literal type="string" pos:start="25:37" pos:end="25:65">"detected %d logical cores\n"</literal></expr></argument>, <argument pos:start="25:68" pos:end="25:74"><expr pos:start="25:68" pos:end="25:74"><name pos:start="25:68" pos:end="25:74">nb_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="27:9" pos:end="27:76">// use number of cores + 1 as thread count if there is more than one</comment>

        <if_stmt pos:start="29:9" pos:end="35:51"><if pos:start="29:9" pos:end="31:86">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:19">nb_cpus</name> <operator pos:start="29:21" pos:end="29:21">&gt;</operator> <literal type="number" pos:start="29:23" pos:end="29:23">1</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:86"><block_content pos:start="31:13" pos:end="31:86">

            <expr_stmt pos:start="31:13" pos:end="31:86"><expr pos:start="31:13" pos:end="31:85"><name pos:start="31:13" pos:end="31:24">thread_count</name> <operator pos:start="31:26" pos:end="31:26">=</operator> <name pos:start="31:28" pos:end="31:46"><name pos:start="31:28" pos:end="31:32">avctx</name><operator pos:start="31:33" pos:end="31:34">-&gt;</operator><name pos:start="31:35" pos:end="31:46">thread_count</name></name> <operator pos:start="31:48" pos:end="31:48">=</operator> <call pos:start="31:50" pos:end="31:85"><name pos:start="31:50" pos:end="31:54">FFMIN</name><argument_list pos:start="31:55" pos:end="31:85">(<argument pos:start="31:56" pos:end="31:66"><expr pos:start="31:56" pos:end="31:66"><name pos:start="31:56" pos:end="31:62">nb_cpus</name> <operator pos:start="31:64" pos:end="31:64">+</operator> <literal type="number" pos:start="31:66" pos:end="31:66">1</literal></expr></argument>, <argument pos:start="31:69" pos:end="31:84"><expr pos:start="31:69" pos:end="31:84"><name pos:start="31:69" pos:end="31:84">MAX_AUTO_THREADS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="33:9" pos:end="35:51">else<block type="pseudo" pos:start="35:13" pos:end="35:51"><block_content pos:start="35:13" pos:end="35:51">

            <expr_stmt pos:start="35:13" pos:end="35:51"><expr pos:start="35:13" pos:end="35:50"><name pos:start="35:13" pos:end="35:24">thread_count</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:46"><name pos:start="35:28" pos:end="35:32">avctx</name><operator pos:start="35:33" pos:end="35:34">-&gt;</operator><name pos:start="35:35" pos:end="35:46">thread_count</name></name> <operator pos:start="35:48" pos:end="35:48">=</operator> <literal type="number" pos:start="35:50" pos:end="35:50">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:20">thread_count</name> <operator pos:start="41:22" pos:end="41:23">&lt;=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">1</literal></expr>)</condition> <block pos:start="41:28" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:17">

        <expr_stmt pos:start="43:9" pos:end="43:38"><expr pos:start="43:9" pos:end="43:37"><name pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:13">avctx</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:33">active_thread_type</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator> <literal type="number" pos:start="43:37" pos:end="43:37">0</literal></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:5">c</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:18">av_mallocz</name><argument_list pos:start="51:19" pos:end="51:41">(<argument pos:start="51:20" pos:end="51:40"><expr pos:start="51:20" pos:end="51:40"><sizeof pos:start="51:20" pos:end="51:40">sizeof<argument_list pos:start="51:26" pos:end="51:40">(<argument pos:start="51:27" pos:end="51:39"><expr pos:start="51:27" pos:end="51:39"><name pos:start="51:27" pos:end="51:39">ThreadContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:18"><if pos:start="53:5" pos:end="55:18">if <condition pos:start="53:8" pos:end="53:11">(<expr pos:start="53:9" pos:end="53:10"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:10">c</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:18"><block_content pos:start="55:9" pos:end="55:18">

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:60"><expr pos:start="59:5" pos:end="59:59"><name pos:start="59:5" pos:end="59:14"><name pos:start="59:5" pos:end="59:5">c</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:14">workers</name></name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:59"><name pos:start="59:18" pos:end="59:27">av_mallocz</name><argument_list pos:start="59:28" pos:end="59:59">(<argument pos:start="59:29" pos:end="59:58"><expr pos:start="59:29" pos:end="59:58"><sizeof pos:start="59:29" pos:end="59:45">sizeof<argument_list pos:start="59:35" pos:end="59:45">(<argument pos:start="59:36" pos:end="59:44"><expr pos:start="59:36" pos:end="59:44"><name pos:start="59:36" pos:end="59:44">pthread_t</name></expr></argument>)</argument_list></sizeof><operator pos:start="59:46" pos:end="59:46">*</operator><name pos:start="59:47" pos:end="59:58">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:20">(<expr pos:start="61:9" pos:end="61:19"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:19"><name pos:start="61:10" pos:end="61:10">c</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:19">workers</name></name></expr>)</condition> <block pos:start="61:22" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:19"><expr pos:start="63:9" pos:end="63:18"><call pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:15">av_free</name><argument_list pos:start="63:16" pos:end="63:18">(<argument pos:start="63:17" pos:end="63:17"><expr pos:start="63:17" pos:end="63:17"><name pos:start="63:17" pos:end="63:17">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:29"><expr pos:start="71:5" pos:end="71:28"><name pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:9">avctx</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:24">thread_opaque</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:28">c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:23"><expr pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:5">c</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:18">current_job</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:5">c</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:16">job_count</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:5">c</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:15">job_size</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:16"><expr pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:5">c</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:11">done</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:50"><expr pos:start="81:5" pos:end="81:49"><call pos:start="81:5" pos:end="81:49"><name pos:start="81:5" pos:end="81:21">pthread_cond_init</name><argument_list pos:start="81:22" pos:end="81:49">(<argument pos:start="81:23" pos:end="81:42"><expr pos:start="81:23" pos:end="81:42"><operator pos:start="81:23" pos:end="81:23">&amp;</operator><name pos:start="81:24" pos:end="81:42"><name pos:start="81:24" pos:end="81:24">c</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:42">current_job_cond</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:48"><expr pos:start="81:45" pos:end="81:48"><name pos:start="81:45" pos:end="81:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><call pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:21">pthread_cond_init</name><argument_list pos:start="83:22" pos:end="83:46">(<argument pos:start="83:23" pos:end="83:39"><expr pos:start="83:23" pos:end="83:39"><operator pos:start="83:23" pos:end="83:23">&amp;</operator><name pos:start="83:24" pos:end="83:39"><name pos:start="83:24" pos:end="83:24">c</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:39">last_job_cond</name></name></expr></argument>, <argument pos:start="83:42" pos:end="83:45"><expr pos:start="83:42" pos:end="83:45"><name pos:start="83:42" pos:end="83:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><call pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:22">pthread_mutex_init</name><argument_list pos:start="85:23" pos:end="85:50">(<argument pos:start="85:24" pos:end="85:43"><expr pos:start="85:24" pos:end="85:43"><operator pos:start="85:24" pos:end="85:24">&amp;</operator><name pos:start="85:25" pos:end="85:43"><name pos:start="85:25" pos:end="85:25">c</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:43">current_job_lock</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:49"><expr pos:start="85:46" pos:end="85:49"><name pos:start="85:46" pos:end="85:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><call pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:22">pthread_mutex_lock</name><argument_list pos:start="87:23" pos:end="87:44">(<argument pos:start="87:24" pos:end="87:43"><expr pos:start="87:24" pos:end="87:43"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:43"><name pos:start="87:25" pos:end="87:25">c</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:43">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="103:5">for <control pos:start="89:9" pos:end="89:34">(<init pos:start="89:10" pos:end="89:13"><expr pos:start="89:10" pos:end="89:12"><name pos:start="89:10" pos:end="89:10">i</name><operator pos:start="89:11" pos:end="89:11">=</operator><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</init> <condition pos:start="89:15" pos:end="89:29"><expr pos:start="89:15" pos:end="89:28"><name pos:start="89:15" pos:end="89:15">i</name><operator pos:start="89:16" pos:end="89:16">&lt;</operator><name pos:start="89:17" pos:end="89:28">thread_count</name></expr>;</condition> <incr pos:start="89:31" pos:end="89:33"><expr pos:start="89:31" pos:end="89:33"><name pos:start="89:31" pos:end="89:31">i</name><operator pos:start="89:32" pos:end="89:33">++</operator></expr></incr>)</control> <block pos:start="89:36" pos:end="103:5">{<block_content pos:start="91:9" pos:end="101:9">

        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="101:9">if<condition pos:start="91:11" pos:end="91:63">(<expr pos:start="91:12" pos:end="91:62"><call pos:start="91:12" pos:end="91:62"><name pos:start="91:12" pos:end="91:25">pthread_create</name><argument_list pos:start="91:26" pos:end="91:62">(<argument pos:start="91:27" pos:end="91:40"><expr pos:start="91:27" pos:end="91:40"><operator pos:start="91:27" pos:end="91:27">&amp;</operator><name pos:start="91:28" pos:end="91:40"><name pos:start="91:28" pos:end="91:28">c</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:37">workers</name><index pos:start="91:38" pos:end="91:40">[<expr pos:start="91:39" pos:end="91:39"><name pos:start="91:39" pos:end="91:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="91:43" pos:end="91:46"><expr pos:start="91:43" pos:end="91:46"><name pos:start="91:43" pos:end="91:46">NULL</name></expr></argument>, <argument pos:start="91:49" pos:end="91:54"><expr pos:start="91:49" pos:end="91:54"><name pos:start="91:49" pos:end="91:54">worker</name></expr></argument>, <argument pos:start="91:57" pos:end="91:61"><expr pos:start="91:57" pos:end="91:61"><name pos:start="91:57" pos:end="91:61">avctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:65" pos:end="101:9">{<block_content pos:start="93:12" pos:end="99:21">

           <expr_stmt pos:start="93:12" pos:end="93:35"><expr pos:start="93:12" pos:end="93:34"><name pos:start="93:12" pos:end="93:30"><name pos:start="93:12" pos:end="93:16">avctx</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:30">thread_count</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <name pos:start="93:34" pos:end="93:34">i</name></expr>;</expr_stmt>

           <expr_stmt pos:start="95:12" pos:end="95:54"><expr pos:start="95:12" pos:end="95:53"><call pos:start="95:12" pos:end="95:53"><name pos:start="95:12" pos:end="95:31">pthread_mutex_unlock</name><argument_list pos:start="95:32" pos:end="95:53">(<argument pos:start="95:33" pos:end="95:52"><expr pos:start="95:33" pos:end="95:52"><operator pos:start="95:33" pos:end="95:33">&amp;</operator><name pos:start="95:34" pos:end="95:52"><name pos:start="95:34" pos:end="95:34">c</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:52">current_job_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="97:12" pos:end="97:33"><expr pos:start="97:12" pos:end="97:32"><call pos:start="97:12" pos:end="97:32"><name pos:start="97:12" pos:end="97:25">ff_thread_free</name><argument_list pos:start="97:26" pos:end="97:32">(<argument pos:start="97:27" pos:end="97:31"><expr pos:start="97:27" pos:end="97:31"><name pos:start="97:27" pos:end="97:31">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="99:12" pos:end="99:21">return <expr pos:start="99:19" pos:end="99:20"><operator pos:start="99:19" pos:end="99:19">-</operator><literal type="number" pos:start="99:20" pos:end="99:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="107:41"><expr pos:start="107:5" pos:end="107:40"><call pos:start="107:5" pos:end="107:40"><name pos:start="107:5" pos:end="107:23">thread_park_workers</name><argument_list pos:start="107:24" pos:end="107:40">(<argument pos:start="107:25" pos:end="107:25"><expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">c</name></expr></argument>, <argument pos:start="107:28" pos:end="107:39"><expr pos:start="107:28" pos:end="107:39"><name pos:start="107:28" pos:end="107:39">thread_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:36"><expr pos:start="111:5" pos:end="111:35"><name pos:start="111:5" pos:end="111:18"><name pos:start="111:5" pos:end="111:9">avctx</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:18">execute</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:35">thread_execute</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:38"><expr pos:start="113:5" pos:end="113:37"><name pos:start="113:5" pos:end="113:19"><name pos:start="113:5" pos:end="113:9">avctx</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:19">execute2</name></name> <operator pos:start="113:21" pos:end="113:21">=</operator> <name pos:start="113:23" pos:end="113:37">thread_execute2</name></expr>;</expr_stmt>

    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
