<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20927.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">huffman_decode</name><parameter_list pos:start="1:26" pos:end="3:58">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:42">MPADecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:57">GranuleDef</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">g</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><name pos:start="3:27" pos:end="3:33">int16_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">exponents</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:57"><decl pos:start="3:47" pos:end="3:57"><type pos:start="3:47" pos:end="3:57"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:57">end_pos</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="251:1">{<block_content pos:start="7:5" pos:end="249:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">s_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">linbits</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:21">code</name></decl>, <decl pos:start="9:24" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:24">x</name></decl>, <decl pos:start="9:27" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:27">y</name></decl>, <decl pos:start="9:30" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:30">l</name></decl>, <decl pos:start="9:33" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:33" pos:end="9:33">v</name></decl>, <decl pos:start="9:36" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:36" pos:end="9:36">i</name></decl>, <decl pos:start="9:39" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:39" pos:end="9:39">j</name></decl>, <decl pos:start="9:42" pos:end="9:42"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:42">k</name></decl>, <decl pos:start="9:45" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:45" pos:end="9:47">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">last_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">VLC</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:12">vlc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:45">/* low frequencies (called big values) */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:16"><expr pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:11">s_index</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="175:5">for<control pos:start="21:8" pos:end="21:20">(<init pos:start="21:9" pos:end="21:12"><expr pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:9">i</name><operator pos:start="21:10" pos:end="21:10">=</operator><literal type="number" pos:start="21:11" pos:end="21:11">0</literal></expr>;</init><condition pos:start="21:13" pos:end="21:16"><expr pos:start="21:13" pos:end="21:15"><name pos:start="21:13" pos:end="21:13">i</name><operator pos:start="21:14" pos:end="21:14">&lt;</operator><literal type="number" pos:start="21:15" pos:end="21:15">3</literal></expr>;</condition><incr pos:start="21:17" pos:end="21:19"><expr pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:17">i</name><operator pos:start="21:18" pos:end="21:19">++</operator></expr></incr>)</control> <block pos:start="21:22" pos:end="175:5">{<block_content pos:start="23:9" pos:end="173:9">

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:9">j</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:13">g</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:26">region_size</name><index pos:start="23:27" pos:end="23:29">[<expr pos:start="23:28" pos:end="23:28"><name pos:start="23:28" pos:end="23:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:21"><if pos:start="25:9" pos:end="27:21">if <condition pos:start="25:12" pos:end="25:19">(<expr pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:13">j</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:21"><block_content pos:start="27:13" pos:end="27:21">

            <continue pos:start="27:13" pos:end="27:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="29:30">/* select vlc table */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:9">k</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:13">g</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:27">table_select</name><index pos:start="31:28" pos:end="31:30">[<expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:9">l</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:25">mpa_huff_data</name><index pos:start="33:26" pos:end="33:28">[<expr pos:start="33:27" pos:end="33:27"><name pos:start="33:27" pos:end="33:27">k</name></expr>]</index><index pos:start="33:29" pos:end="33:31">[<expr pos:start="33:30" pos:end="33:30"><literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:38"><expr pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:15">linbits</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:31">mpa_huff_data</name><index pos:start="35:32" pos:end="35:34">[<expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">k</name></expr>]</index><index pos:start="35:35" pos:end="35:37">[<expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:11">vlc</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:26"><name pos:start="37:16" pos:end="37:23">huff_vlc</name><index pos:start="37:24" pos:end="37:26">[<expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">l</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if<condition pos:start="41:11" pos:end="41:14">(<expr pos:start="41:12" pos:end="41:13"><operator pos:start="41:12" pos:end="41:12">!</operator><name pos:start="41:13" pos:end="41:13">l</name></expr>)</condition><block pos:start="41:15" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:21">

            <expr_stmt pos:start="43:13" pos:end="43:71"><expr pos:start="43:13" pos:end="43:70"><call pos:start="43:13" pos:end="43:70"><name pos:start="43:13" pos:end="43:18">memset</name><argument_list pos:start="43:19" pos:end="43:70">(<argument pos:start="43:20" pos:end="43:41"><expr pos:start="43:20" pos:end="43:41"><operator pos:start="43:20" pos:end="43:20">&amp;</operator><name pos:start="43:21" pos:end="43:41"><name pos:start="43:21" pos:end="43:21">g</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:32">sb_hybrid</name><index pos:start="43:33" pos:end="43:41">[<expr pos:start="43:34" pos:end="43:40"><name pos:start="43:34" pos:end="43:40">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="43:44" pos:end="43:44"><expr pos:start="43:44" pos:end="43:44"><literal type="number" pos:start="43:44" pos:end="43:44">0</literal></expr></argument>, <argument pos:start="43:47" pos:end="43:69"><expr pos:start="43:47" pos:end="43:69"><sizeof pos:start="43:47" pos:end="43:67">sizeof<argument_list pos:start="43:53" pos:end="43:67">(<argument pos:start="43:54" pos:end="43:66"><expr pos:start="43:54" pos:end="43:66"><operator pos:start="43:54" pos:end="43:54">*</operator><name pos:start="43:55" pos:end="43:66"><name pos:start="43:55" pos:end="43:55">g</name><operator pos:start="43:56" pos:end="43:57">-&gt;</operator><name pos:start="43:58" pos:end="43:66">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof><operator pos:start="43:68" pos:end="43:68">*</operator><name pos:start="43:69" pos:end="43:69">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:19">s_index</name> <operator pos:start="45:21" pos:end="45:22">+=</operator> <literal type="number" pos:start="45:24" pos:end="45:24">2</literal><operator pos:start="45:25" pos:end="45:25">*</operator><name pos:start="45:26" pos:end="45:26">j</name></expr>;</expr_stmt>

            <continue pos:start="47:13" pos:end="47:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:51">/* read huffcode and compute each couple */</comment>

        <for pos:start="55:9" pos:end="173:9">for<control pos:start="55:12" pos:end="55:21">(<init pos:start="55:13" pos:end="55:13">;</init><condition pos:start="55:14" pos:end="55:17"><expr pos:start="55:14" pos:end="55:16"><name pos:start="55:14" pos:end="55:14">j</name><operator pos:start="55:15" pos:end="55:15">&gt;</operator><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</condition><incr pos:start="55:18" pos:end="55:20"><expr pos:start="55:18" pos:end="55:20"><name pos:start="55:18" pos:end="55:18">j</name><operator pos:start="55:19" pos:end="55:20">--</operator></expr></incr>)</control> <block pos:start="55:23" pos:end="173:9">{<block_content pos:start="57:13" pos:end="171:40">

            <decl_stmt pos:start="57:13" pos:end="57:25"><decl pos:start="57:13" pos:end="57:24"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:24">exponent</name></decl>;</decl_stmt>



            <if_stmt pos:start="61:13" pos:end="63:22"><if pos:start="61:13" pos:end="63:22">if <condition pos:start="61:16" pos:end="61:50">(<expr pos:start="61:17" pos:end="61:49"><call pos:start="61:17" pos:end="61:38"><name pos:start="61:17" pos:end="61:30">get_bits_count</name><argument_list pos:start="61:31" pos:end="61:38">(<argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><operator pos:start="61:32" pos:end="61:32">&amp;</operator><name pos:start="61:33" pos:end="61:37"><name pos:start="61:33" pos:end="61:33">s</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:37">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:40" pos:end="61:41">&gt;=</operator> <name pos:start="61:43" pos:end="61:49">end_pos</name></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:22"><block_content pos:start="63:17" pos:end="63:22">

                <break pos:start="63:17" pos:end="63:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:51"><expr pos:start="65:13" pos:end="65:50"><name pos:start="65:13" pos:end="65:13">y</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:50"><name pos:start="65:17" pos:end="65:24">get_vlc2</name><argument_list pos:start="65:25" pos:end="65:50">(<argument pos:start="65:26" pos:end="65:31"><expr pos:start="65:26" pos:end="65:31"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:31"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:31">gb</name></name></expr></argument>, <argument pos:start="65:34" pos:end="65:43"><expr pos:start="65:34" pos:end="65:43"><name pos:start="65:34" pos:end="65:43"><name pos:start="65:34" pos:end="65:36">vlc</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:43">table</name></name></expr></argument>, <argument pos:start="65:46" pos:end="65:46"><expr pos:start="65:46" pos:end="65:46"><literal type="number" pos:start="65:46" pos:end="65:46">7</literal></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="69:13" pos:end="79:13"><if pos:start="69:13" pos:end="79:13">if<condition pos:start="69:15" pos:end="69:18">(<expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">!</operator><name pos:start="69:17" pos:end="69:17">y</name></expr>)</condition><block pos:start="69:19" pos:end="79:13">{<block_content pos:start="71:17" pos:end="77:25">

                <expr_stmt pos:start="71:17" pos:end="73:44"><expr pos:start="71:17" pos:end="73:43"><name pos:start="71:17" pos:end="71:39"><name pos:start="71:17" pos:end="71:17">g</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:28">sb_hybrid</name><index pos:start="71:29" pos:end="71:39">[<expr pos:start="71:30" pos:end="71:36"><name pos:start="71:30" pos:end="71:36">s_index</name></expr>  ]</index></name> <operator pos:start="71:41" pos:end="71:41">=</operator>

                <name pos:start="73:17" pos:end="73:39"><name pos:start="73:17" pos:end="73:17">g</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:28">sb_hybrid</name><index pos:start="73:29" pos:end="73:39">[<expr pos:start="73:30" pos:end="73:38"><name pos:start="73:30" pos:end="73:36">s_index</name><operator pos:start="73:37" pos:end="73:37">+</operator><literal type="number" pos:start="73:38" pos:end="73:38">1</literal></expr>]</index></name> <operator pos:start="73:41" pos:end="73:41">=</operator> <literal type="number" pos:start="73:43" pos:end="73:43">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:29"><expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:23">s_index</name> <operator pos:start="75:25" pos:end="75:26">+=</operator> <literal type="number" pos:start="75:28" pos:end="75:28">2</literal></expr>;</expr_stmt>

                <continue pos:start="77:17" pos:end="77:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:23"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">x</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:17">y</name> <operator pos:start="83:19" pos:end="83:20">&gt;&gt;</operator> <literal type="number" pos:start="83:22" pos:end="83:22">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:25"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:13">y</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:17">y</name> <operator pos:start="85:19" pos:end="85:19">&amp;</operator> <literal type="number" pos:start="85:21" pos:end="85:24">0x0f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:41"><expr pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:20">exponent</name><operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:40"><name pos:start="87:23" pos:end="87:31">exponents</name><index pos:start="87:32" pos:end="87:40">[<expr pos:start="87:33" pos:end="87:39"><name pos:start="87:33" pos:end="87:39">s_index</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="91:13" pos:end="93:62"><expr pos:start="91:13" pos:end="93:61"><call pos:start="91:13" pos:end="93:61"><name pos:start="91:13" pos:end="91:19">dprintf</name><argument_list pos:start="91:20" pos:end="93:61">(<argument pos:start="91:21" pos:end="91:55"><expr pos:start="91:21" pos:end="91:55"><literal type="string" pos:start="91:21" pos:end="91:55">"region=%d n=%d x=%d y=%d exp=%d\n"</literal></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:21"><expr pos:start="93:21" pos:end="93:21"><name pos:start="93:21" pos:end="93:21">i</name></expr></argument>, <argument pos:start="93:24" pos:end="93:44"><expr pos:start="93:24" pos:end="93:44"><name pos:start="93:24" pos:end="93:40"><name pos:start="93:24" pos:end="93:24">g</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:37">region_size</name><index pos:start="93:38" pos:end="93:40">[<expr pos:start="93:39" pos:end="93:39"><name pos:start="93:39" pos:end="93:39">i</name></expr>]</index></name> <operator pos:start="93:42" pos:end="93:42">-</operator> <name pos:start="93:44" pos:end="93:44">j</name></expr></argument>, <argument pos:start="93:47" pos:end="93:47"><expr pos:start="93:47" pos:end="93:47"><name pos:start="93:47" pos:end="93:47">x</name></expr></argument>, <argument pos:start="93:50" pos:end="93:50"><expr pos:start="93:50" pos:end="93:50"><name pos:start="93:50" pos:end="93:50">y</name></expr></argument>, <argument pos:start="93:53" pos:end="93:60"><expr pos:start="93:53" pos:end="93:60"><name pos:start="93:53" pos:end="93:60">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="131:13"><if pos:start="95:13" pos:end="127:13">if <condition pos:start="95:16" pos:end="95:18">(<expr pos:start="95:17" pos:end="95:17"><name pos:start="95:17" pos:end="95:17">x</name></expr>)</condition> <block pos:start="95:20" pos:end="127:13">{<block_content pos:start="107:17" pos:end="125:27">

<cpp:if pos:start="97:1" pos:end="97:5">#<cpp:directive pos:start="97:2" pos:end="97:3">if</cpp:directive> <expr pos:start="97:5" pos:end="97:5"><literal type="number" pos:start="97:5" pos:end="97:5">0</literal></expr></cpp:if>

                if (x == 15)

                    x += get_bitsz(&amp;s-&gt;gb, linbits);

                v = l3_unscale(x, exponent);

<cpp:else pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="107:17" pos:end="122:0"><if pos:start="107:17" pos:end="113:17">if <condition pos:start="107:20" pos:end="107:27">(<expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:21">x</name> <operator pos:start="107:23" pos:end="107:23">&lt;</operator> <literal type="number" pos:start="107:25" pos:end="107:26">15</literal></expr>)</condition><block pos:start="107:28" pos:end="113:17">{<block_content pos:start="109:21" pos:end="109:60">

                    <expr_stmt pos:start="109:21" pos:end="109:60"><expr pos:start="109:21" pos:end="109:59"><name pos:start="109:21" pos:end="109:21">v</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:59"><name pos:start="109:25" pos:end="109:36">expval_table</name><index pos:start="109:37" pos:end="109:54">[ <expr pos:start="109:39" pos:end="109:52"><name pos:start="109:39" pos:end="109:46">exponent</name> <operator pos:start="109:48" pos:end="109:48">+</operator> <literal type="number" pos:start="109:50" pos:end="109:52">400</literal></expr> ]</index><index pos:start="109:55" pos:end="109:59">[ <expr pos:start="109:57" pos:end="109:57"><name pos:start="109:57" pos:end="109:57">x</name></expr> ]</index></name></expr>;</expr_stmt>

<comment type="line" pos:start="111:1" pos:end="111:100">//                      v = expval_table[ (exponent&amp;3) + 400 ][ x ] &gt;&gt; FFMIN(0 - (exponent&gt;&gt;2), 31);</comment>

                </block_content>}</block></if><else pos:start="113:18" pos:end="122:0">else<block pos:start="113:22" pos:end="122:0">{<block_content pos:start="115:21" pos:end="117:48">

                    <expr_stmt pos:start="115:21" pos:end="115:52"><expr pos:start="115:21" pos:end="115:51"><name pos:start="115:21" pos:end="115:21">x</name> <operator pos:start="115:23" pos:end="115:24">+=</operator> <call pos:start="115:26" pos:end="115:51"><name pos:start="115:26" pos:end="115:34">get_bitsz</name><argument_list pos:start="115:35" pos:end="115:51">(<argument pos:start="115:36" pos:end="115:41"><expr pos:start="115:36" pos:end="115:41"><operator pos:start="115:36" pos:end="115:36">&amp;</operator><name pos:start="115:37" pos:end="115:41"><name pos:start="115:37" pos:end="115:37">s</name><operator pos:start="115:38" pos:end="115:39">-&gt;</operator><name pos:start="115:40" pos:end="115:41">gb</name></name></expr></argument>, <argument pos:start="115:44" pos:end="115:50"><expr pos:start="115:44" pos:end="115:50"><name pos:start="115:44" pos:end="115:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:48"><expr pos:start="117:21" pos:end="117:47"><name pos:start="117:21" pos:end="117:21">v</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <call pos:start="117:25" pos:end="117:47"><name pos:start="117:25" pos:end="117:34">l3_unscale</name><argument_list pos:start="117:35" pos:end="117:47">(<argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><name pos:start="117:36" pos:end="117:36">x</name></expr></argument>, <argument pos:start="117:39" pos:end="117:46"><expr pos:start="117:39" pos:end="117:46"><name pos:start="117:39" pos:end="117:46">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="123:17" pos:end="125:27"><if pos:start="123:17" pos:end="125:27">if <condition pos:start="123:20" pos:end="123:38">(<expr pos:start="123:21" pos:end="123:37"><call pos:start="123:21" pos:end="123:37"><name pos:start="123:21" pos:end="123:29">get_bits1</name><argument_list pos:start="123:30" pos:end="123:37">(<argument pos:start="123:31" pos:end="123:36"><expr pos:start="123:31" pos:end="123:36"><operator pos:start="123:31" pos:end="123:31">&amp;</operator><name pos:start="123:32" pos:end="123:36"><name pos:start="123:32" pos:end="123:32">s</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="125:21" pos:end="125:27"><block_content pos:start="125:21" pos:end="125:27">

                    <expr_stmt pos:start="125:21" pos:end="125:27"><expr pos:start="125:21" pos:end="125:26"><name pos:start="125:21" pos:end="125:21">v</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <operator pos:start="125:25" pos:end="125:25">-</operator><name pos:start="125:26" pos:end="125:26">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="131:13">else <block pos:start="127:20" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:22">

                <expr_stmt pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:21"><name pos:start="129:17" pos:end="129:17">v</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <literal type="number" pos:start="129:21" pos:end="129:21">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:40"><expr pos:start="133:13" pos:end="133:39"><name pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:13">g</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:24">sb_hybrid</name><index pos:start="133:25" pos:end="133:35">[<expr pos:start="133:26" pos:end="133:34"><name pos:start="133:26" pos:end="133:32">s_index</name><operator pos:start="133:33" pos:end="133:34">++</operator></expr>]</index></name> <operator pos:start="133:37" pos:end="133:37">=</operator> <name pos:start="133:39" pos:end="133:39">v</name></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="169:13"><if pos:start="135:13" pos:end="165:13">if <condition pos:start="135:16" pos:end="135:18">(<expr pos:start="135:17" pos:end="135:17"><name pos:start="135:17" pos:end="135:17">y</name></expr>)</condition> <block pos:start="135:20" pos:end="165:13">{<block_content pos:start="147:17" pos:end="163:27">

<cpp:if pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:5"><literal type="number" pos:start="137:5" pos:end="137:5">0</literal></expr></cpp:if>

                if (y == 15)

                    y += get_bitsz(&amp;s-&gt;gb, linbits);

                v = l3_unscale(y, exponent);

<cpp:else pos:start="145:1" pos:end="145:5">#<cpp:directive pos:start="145:2" pos:end="145:5">else</cpp:directive></cpp:else>

                <if_stmt pos:start="147:17" pos:end="160:0"><if pos:start="147:17" pos:end="151:17">if <condition pos:start="147:20" pos:end="147:27">(<expr pos:start="147:21" pos:end="147:26"><name pos:start="147:21" pos:end="147:21">y</name> <operator pos:start="147:23" pos:end="147:23">&lt;</operator> <literal type="number" pos:start="147:25" pos:end="147:26">15</literal></expr>)</condition><block pos:start="147:28" pos:end="151:17">{<block_content pos:start="149:21" pos:end="149:60">

                    <expr_stmt pos:start="149:21" pos:end="149:60"><expr pos:start="149:21" pos:end="149:59"><name pos:start="149:21" pos:end="149:21">v</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:59"><name pos:start="149:25" pos:end="149:36">expval_table</name><index pos:start="149:37" pos:end="149:54">[ <expr pos:start="149:39" pos:end="149:52"><name pos:start="149:39" pos:end="149:46">exponent</name> <operator pos:start="149:48" pos:end="149:48">+</operator> <literal type="number" pos:start="149:50" pos:end="149:52">400</literal></expr> ]</index><index pos:start="149:55" pos:end="149:59">[ <expr pos:start="149:57" pos:end="149:57"><name pos:start="149:57" pos:end="149:57">y</name></expr> ]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="151:18" pos:end="160:0">else<block pos:start="151:22" pos:end="160:0">{<block_content pos:start="153:21" pos:end="155:48">

                    <expr_stmt pos:start="153:21" pos:end="153:52"><expr pos:start="153:21" pos:end="153:51"><name pos:start="153:21" pos:end="153:21">y</name> <operator pos:start="153:23" pos:end="153:24">+=</operator> <call pos:start="153:26" pos:end="153:51"><name pos:start="153:26" pos:end="153:34">get_bitsz</name><argument_list pos:start="153:35" pos:end="153:51">(<argument pos:start="153:36" pos:end="153:41"><expr pos:start="153:36" pos:end="153:41"><operator pos:start="153:36" pos:end="153:36">&amp;</operator><name pos:start="153:37" pos:end="153:41"><name pos:start="153:37" pos:end="153:37">s</name><operator pos:start="153:38" pos:end="153:39">-&gt;</operator><name pos:start="153:40" pos:end="153:41">gb</name></name></expr></argument>, <argument pos:start="153:44" pos:end="153:50"><expr pos:start="153:44" pos:end="153:50"><name pos:start="153:44" pos:end="153:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:48"><expr pos:start="155:21" pos:end="155:47"><name pos:start="155:21" pos:end="155:21">v</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <call pos:start="155:25" pos:end="155:47"><name pos:start="155:25" pos:end="155:34">l3_unscale</name><argument_list pos:start="155:35" pos:end="155:47">(<argument pos:start="155:36" pos:end="155:36"><expr pos:start="155:36" pos:end="155:36"><name pos:start="155:36" pos:end="155:36">y</name></expr></argument>, <argument pos:start="155:39" pos:end="155:46"><expr pos:start="155:39" pos:end="155:46"><name pos:start="155:39" pos:end="155:46">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

                <if_stmt pos:start="161:17" pos:end="163:27"><if pos:start="161:17" pos:end="163:27">if <condition pos:start="161:20" pos:end="161:38">(<expr pos:start="161:21" pos:end="161:37"><call pos:start="161:21" pos:end="161:37"><name pos:start="161:21" pos:end="161:29">get_bits1</name><argument_list pos:start="161:30" pos:end="161:37">(<argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><operator pos:start="161:31" pos:end="161:31">&amp;</operator><name pos:start="161:32" pos:end="161:36"><name pos:start="161:32" pos:end="161:32">s</name><operator pos:start="161:33" pos:end="161:34">-&gt;</operator><name pos:start="161:35" pos:end="161:36">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="163:21" pos:end="163:27"><block_content pos:start="163:21" pos:end="163:27">

                    <expr_stmt pos:start="163:21" pos:end="163:27"><expr pos:start="163:21" pos:end="163:26"><name pos:start="163:21" pos:end="163:21">v</name> <operator pos:start="163:23" pos:end="163:23">=</operator> <operator pos:start="163:25" pos:end="163:25">-</operator><name pos:start="163:26" pos:end="163:26">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="165:15" pos:end="169:13">else <block pos:start="165:20" pos:end="169:13">{<block_content pos:start="167:17" pos:end="167:22">

                <expr_stmt pos:start="167:17" pos:end="167:22"><expr pos:start="167:17" pos:end="167:21"><name pos:start="167:17" pos:end="167:17">v</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <literal type="number" pos:start="167:21" pos:end="167:21">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:35"><name pos:start="171:13" pos:end="171:13">g</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:24">sb_hybrid</name><index pos:start="171:25" pos:end="171:35">[<expr pos:start="171:26" pos:end="171:34"><name pos:start="171:26" pos:end="171:32">s_index</name><operator pos:start="171:33" pos:end="171:34">++</operator></expr>]</index></name> <operator pos:start="171:37" pos:end="171:37">=</operator> <name pos:start="171:39" pos:end="171:39">v</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="179:5" pos:end="179:26">/* high frequencies */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:48"><expr pos:start="181:5" pos:end="181:47"><name pos:start="181:5" pos:end="181:7">vlc</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <operator pos:start="181:11" pos:end="181:11">&amp;</operator><name pos:start="181:12" pos:end="181:47"><name pos:start="181:12" pos:end="181:24">huff_quad_vlc</name><index pos:start="181:25" pos:end="181:47">[<expr pos:start="181:26" pos:end="181:46"><name pos:start="181:26" pos:end="181:46"><name pos:start="181:26" pos:end="181:26">g</name><operator pos:start="181:27" pos:end="181:28">-&gt;</operator><name pos:start="181:29" pos:end="181:46">count1table_select</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:15"><expr pos:start="183:5" pos:end="183:14"><name pos:start="183:5" pos:end="183:12">last_pos</name><operator pos:start="183:13" pos:end="183:13">=</operator><literal type="number" pos:start="183:14" pos:end="183:14">0</literal></expr>;</expr_stmt>

    <while pos:start="185:5" pos:end="245:5">while <condition pos:start="185:11" pos:end="185:26">(<expr pos:start="185:12" pos:end="185:25"><name pos:start="185:12" pos:end="185:18">s_index</name> <operator pos:start="185:20" pos:end="185:21">&lt;=</operator> <literal type="number" pos:start="185:23" pos:end="185:25">572</literal></expr>)</condition> <block pos:start="185:28" pos:end="245:5">{<block_content pos:start="187:9" pos:end="243:19">

        <expr_stmt pos:start="187:9" pos:end="187:37"><expr pos:start="187:9" pos:end="187:36"><name pos:start="187:9" pos:end="187:11">pos</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:36"><name pos:start="187:15" pos:end="187:28">get_bits_count</name><argument_list pos:start="187:29" pos:end="187:36">(<argument pos:start="187:30" pos:end="187:35"><expr pos:start="187:30" pos:end="187:35"><operator pos:start="187:30" pos:end="187:30">&amp;</operator><name pos:start="187:31" pos:end="187:35"><name pos:start="187:31" pos:end="187:31">s</name><operator pos:start="187:32" pos:end="187:33">-&gt;</operator><name pos:start="187:34" pos:end="187:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="207:9"><if pos:start="189:9" pos:end="207:9">if <condition pos:start="189:12" pos:end="189:27">(<expr pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:15">pos</name> <operator pos:start="189:17" pos:end="189:18">&gt;=</operator> <name pos:start="189:20" pos:end="189:26">end_pos</name></expr>)</condition> <block pos:start="189:29" pos:end="207:9">{<block_content pos:start="191:13" pos:end="205:18">

            <if_stmt pos:start="191:13" pos:end="203:13"><if pos:start="191:13" pos:end="203:13">if <condition pos:start="191:16" pos:end="191:42">(<expr pos:start="191:17" pos:end="191:41"><name pos:start="191:17" pos:end="191:19">pos</name> <operator pos:start="191:21" pos:end="191:21">&gt;</operator> <name pos:start="191:23" pos:end="191:29">end_pos</name> <operator pos:start="191:31" pos:end="191:32">&amp;&amp;</operator> <name pos:start="191:34" pos:end="191:41">last_pos</name></expr>)</condition><block pos:start="191:43" pos:end="203:13">{<block_content pos:start="197:17" pos:end="201:47">

                <comment type="block" pos:start="193:17" pos:end="195:57">/* some encoders generate an incorrect size for this

                   part. We must go back into the data */</comment>

                <expr_stmt pos:start="197:17" pos:end="197:29"><expr pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:23">s_index</name> <operator pos:start="197:25" pos:end="197:26">-=</operator> <literal type="number" pos:start="197:28" pos:end="197:28">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:109"><expr pos:start="199:17" pos:end="199:108"><call pos:start="199:17" pos:end="199:108"><name pos:start="199:17" pos:end="199:29">init_get_bits</name><argument_list pos:start="199:30" pos:end="199:108">(<argument pos:start="199:31" pos:end="199:36"><expr pos:start="199:31" pos:end="199:36"><operator pos:start="199:31" pos:end="199:31">&amp;</operator><name pos:start="199:32" pos:end="199:36"><name pos:start="199:32" pos:end="199:32">s</name><operator pos:start="199:33" pos:end="199:34">-&gt;</operator><name pos:start="199:35" pos:end="199:36">gb</name></name></expr></argument>, <argument pos:start="199:39" pos:end="199:68"><expr pos:start="199:39" pos:end="199:68"><name pos:start="199:39" pos:end="199:50"><name pos:start="199:39" pos:end="199:39">s</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:43">gb</name><operator pos:start="199:44" pos:end="199:44">.</operator><name pos:start="199:45" pos:end="199:50">buffer</name></name> <operator pos:start="199:52" pos:end="199:52">+</operator> <literal type="number" pos:start="199:54" pos:end="199:54">4</literal><operator pos:start="199:55" pos:end="199:55">*</operator><operator pos:start="199:56" pos:end="199:56">(</operator><name pos:start="199:57" pos:end="199:64">last_pos</name><operator pos:start="199:65" pos:end="199:66">&gt;&gt;</operator><literal type="number" pos:start="199:67" pos:end="199:67">5</literal><operator pos:start="199:68" pos:end="199:68">)</operator></expr></argument>, <argument pos:start="199:71" pos:end="199:107"><expr pos:start="199:71" pos:end="199:107"><name pos:start="199:71" pos:end="199:88"><name pos:start="199:71" pos:end="199:71">s</name><operator pos:start="199:72" pos:end="199:73">-&gt;</operator><name pos:start="199:74" pos:end="199:75">gb</name><operator pos:start="199:76" pos:end="199:76">.</operator><name pos:start="199:77" pos:end="199:88">size_in_bits</name></name> <operator pos:start="199:90" pos:end="199:90">-</operator> <operator pos:start="199:92" pos:end="199:92">(</operator><name pos:start="199:93" pos:end="199:100">last_pos</name><operator pos:start="199:101" pos:end="199:101">&amp;</operator><operator pos:start="199:102" pos:end="199:102">(</operator><operator pos:start="199:103" pos:end="199:103">~</operator><literal type="number" pos:start="199:104" pos:end="199:105">31</literal><operator pos:start="199:106" pos:end="199:106">)</operator><operator pos:start="199:107" pos:end="199:107">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:47"><expr pos:start="201:17" pos:end="201:46"><call pos:start="201:17" pos:end="201:46"><name pos:start="201:17" pos:end="201:25">skip_bits</name><argument_list pos:start="201:26" pos:end="201:46">(<argument pos:start="201:27" pos:end="201:32"><expr pos:start="201:27" pos:end="201:32"><operator pos:start="201:27" pos:end="201:27">&amp;</operator><name pos:start="201:28" pos:end="201:32"><name pos:start="201:28" pos:end="201:28">s</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:32">gb</name></name></expr></argument>, <argument pos:start="201:35" pos:end="201:45"><expr pos:start="201:35" pos:end="201:45"><name pos:start="201:35" pos:end="201:42">last_pos</name><operator pos:start="201:43" pos:end="201:43">&amp;</operator><literal type="number" pos:start="201:44" pos:end="201:45">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:22"><expr pos:start="209:9" pos:end="209:21"><name pos:start="209:9" pos:end="209:16">last_pos</name><operator pos:start="209:17" pos:end="209:17">=</operator> <name pos:start="209:19" pos:end="209:21">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:58"><expr pos:start="213:9" pos:end="213:57"><name pos:start="213:9" pos:end="213:12">code</name> <operator pos:start="213:14" pos:end="213:14">=</operator> <call pos:start="213:16" pos:end="213:57"><name pos:start="213:16" pos:end="213:23">get_vlc2</name><argument_list pos:start="213:24" pos:end="213:57">(<argument pos:start="213:25" pos:end="213:30"><expr pos:start="213:25" pos:end="213:30"><operator pos:start="213:25" pos:end="213:25">&amp;</operator><name pos:start="213:26" pos:end="213:30"><name pos:start="213:26" pos:end="213:26">s</name><operator pos:start="213:27" pos:end="213:28">-&gt;</operator><name pos:start="213:29" pos:end="213:30">gb</name></name></expr></argument>, <argument pos:start="213:33" pos:end="213:42"><expr pos:start="213:33" pos:end="213:42"><name pos:start="213:33" pos:end="213:42"><name pos:start="213:33" pos:end="213:35">vlc</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:42">table</name></name></expr></argument>, <argument pos:start="213:45" pos:end="213:53"><expr pos:start="213:45" pos:end="213:53"><name pos:start="213:45" pos:end="213:53"><name pos:start="213:45" pos:end="213:47">vlc</name><operator pos:start="213:48" pos:end="213:49">-&gt;</operator><name pos:start="213:50" pos:end="213:53">bits</name></name></expr></argument>, <argument pos:start="213:56" pos:end="213:56"><expr pos:start="213:56" pos:end="213:56"><literal type="number" pos:start="213:56" pos:end="213:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:63"><expr pos:start="215:9" pos:end="215:62"><call pos:start="215:9" pos:end="215:62"><name pos:start="215:9" pos:end="215:15">dprintf</name><argument_list pos:start="215:16" pos:end="215:62">(<argument pos:start="215:17" pos:end="215:32"><expr pos:start="215:17" pos:end="215:32"><literal type="string" pos:start="215:17" pos:end="215:32">"t=%d code=%d\n"</literal></expr></argument>, <argument pos:start="215:35" pos:end="215:55"><expr pos:start="215:35" pos:end="215:55"><name pos:start="215:35" pos:end="215:55"><name pos:start="215:35" pos:end="215:35">g</name><operator pos:start="215:36" pos:end="215:37">-&gt;</operator><name pos:start="215:38" pos:end="215:55">count1table_select</name></name></expr></argument>, <argument pos:start="215:58" pos:end="215:61"><expr pos:start="215:58" pos:end="215:61"><name pos:start="215:58" pos:end="215:61">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="223:35"><expr pos:start="217:9" pos:end="223:34"><name pos:start="217:9" pos:end="217:31"><name pos:start="217:9" pos:end="217:9">g</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:20">sb_hybrid</name><index pos:start="217:21" pos:end="217:31">[<expr pos:start="217:22" pos:end="217:30"><name pos:start="217:22" pos:end="217:28">s_index</name><operator pos:start="217:29" pos:end="217:29">+</operator><literal type="number" pos:start="217:30" pos:end="217:30">0</literal></expr>]</index></name><operator pos:start="217:32" pos:end="217:32">=</operator>

        <name pos:start="219:9" pos:end="219:31"><name pos:start="219:9" pos:end="219:9">g</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:20">sb_hybrid</name><index pos:start="219:21" pos:end="219:31">[<expr pos:start="219:22" pos:end="219:30"><name pos:start="219:22" pos:end="219:28">s_index</name><operator pos:start="219:29" pos:end="219:29">+</operator><literal type="number" pos:start="219:30" pos:end="219:30">1</literal></expr>]</index></name><operator pos:start="219:32" pos:end="219:32">=</operator>

        <name pos:start="221:9" pos:end="221:31"><name pos:start="221:9" pos:end="221:9">g</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:20">sb_hybrid</name><index pos:start="221:21" pos:end="221:31">[<expr pos:start="221:22" pos:end="221:30"><name pos:start="221:22" pos:end="221:28">s_index</name><operator pos:start="221:29" pos:end="221:29">+</operator><literal type="number" pos:start="221:30" pos:end="221:30">2</literal></expr>]</index></name><operator pos:start="221:32" pos:end="221:32">=</operator>

        <name pos:start="223:9" pos:end="223:31"><name pos:start="223:9" pos:end="223:9">g</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:20">sb_hybrid</name><index pos:start="223:21" pos:end="223:31">[<expr pos:start="223:22" pos:end="223:30"><name pos:start="223:22" pos:end="223:28">s_index</name><operator pos:start="223:29" pos:end="223:29">+</operator><literal type="number" pos:start="223:30" pos:end="223:30">3</literal></expr>]</index></name><operator pos:start="223:32" pos:end="223:32">=</operator> <literal type="number" pos:start="223:34" pos:end="223:34">0</literal></expr>;</expr_stmt>

        <while pos:start="225:9" pos:end="241:9">while<condition pos:start="225:14" pos:end="225:19">(<expr pos:start="225:15" pos:end="225:18"><name pos:start="225:15" pos:end="225:18">code</name></expr>)</condition><block pos:start="225:20" pos:end="241:9">{<block_content pos:start="227:13" pos:end="239:34">

            <decl_stmt pos:start="227:13" pos:end="227:74"><decl pos:start="227:13" pos:end="227:73"><type pos:start="227:13" pos:end="227:28"><specifier pos:start="227:13" pos:end="227:17">const</specifier> <specifier pos:start="227:19" pos:end="227:24">static</specifier> <name pos:start="227:26" pos:end="227:28">int</name></type> <name pos:start="227:30" pos:end="227:39"><name pos:start="227:30" pos:end="227:35">idxtab</name><index pos:start="227:36" pos:end="227:39">[<expr pos:start="227:37" pos:end="227:38"><literal type="number" pos:start="227:37" pos:end="227:38">16</literal></expr>]</index></name><init pos:start="227:40" pos:end="227:73">=<expr pos:start="227:41" pos:end="227:73"><block pos:start="227:41" pos:end="227:73">{<expr pos:start="227:42" pos:end="227:42"><literal type="number" pos:start="227:42" pos:end="227:42">3</literal></expr>,<expr pos:start="227:44" pos:end="227:44"><literal type="number" pos:start="227:44" pos:end="227:44">3</literal></expr>,<expr pos:start="227:46" pos:end="227:46"><literal type="number" pos:start="227:46" pos:end="227:46">2</literal></expr>,<expr pos:start="227:48" pos:end="227:48"><literal type="number" pos:start="227:48" pos:end="227:48">2</literal></expr>,<expr pos:start="227:50" pos:end="227:50"><literal type="number" pos:start="227:50" pos:end="227:50">1</literal></expr>,<expr pos:start="227:52" pos:end="227:52"><literal type="number" pos:start="227:52" pos:end="227:52">1</literal></expr>,<expr pos:start="227:54" pos:end="227:54"><literal type="number" pos:start="227:54" pos:end="227:54">1</literal></expr>,<expr pos:start="227:56" pos:end="227:56"><literal type="number" pos:start="227:56" pos:end="227:56">1</literal></expr>,<expr pos:start="227:58" pos:end="227:58"><literal type="number" pos:start="227:58" pos:end="227:58">0</literal></expr>,<expr pos:start="227:60" pos:end="227:60"><literal type="number" pos:start="227:60" pos:end="227:60">0</literal></expr>,<expr pos:start="227:62" pos:end="227:62"><literal type="number" pos:start="227:62" pos:end="227:62">0</literal></expr>,<expr pos:start="227:64" pos:end="227:64"><literal type="number" pos:start="227:64" pos:end="227:64">0</literal></expr>,<expr pos:start="227:66" pos:end="227:66"><literal type="number" pos:start="227:66" pos:end="227:66">0</literal></expr>,<expr pos:start="227:68" pos:end="227:68"><literal type="number" pos:start="227:68" pos:end="227:68">0</literal></expr>,<expr pos:start="227:70" pos:end="227:70"><literal type="number" pos:start="227:70" pos:end="227:70">0</literal></expr>,<expr pos:start="227:72" pos:end="227:72"><literal type="number" pos:start="227:72" pos:end="227:72">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:42"><decl pos:start="229:13" pos:end="229:41"><type pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">int</name></type> <name pos:start="229:17" pos:end="229:19">pos</name><init pos:start="229:20" pos:end="229:41">= <expr pos:start="229:22" pos:end="229:41"><name pos:start="229:22" pos:end="229:28">s_index</name><operator pos:start="229:29" pos:end="229:29">+</operator><name pos:start="229:30" pos:end="229:41"><name pos:start="229:30" pos:end="229:35">idxtab</name><index pos:start="229:36" pos:end="229:41">[<expr pos:start="229:37" pos:end="229:40"><name pos:start="229:37" pos:end="229:40">code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:36"><expr pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:16">code</name> <operator pos:start="231:18" pos:end="231:19">^=</operator> <literal type="number" pos:start="231:21" pos:end="231:21">8</literal><operator pos:start="231:22" pos:end="231:23">&gt;&gt;</operator><name pos:start="231:24" pos:end="231:35"><name pos:start="231:24" pos:end="231:29">idxtab</name><index pos:start="231:30" pos:end="231:35">[<expr pos:start="231:31" pos:end="231:34"><name pos:start="231:31" pos:end="231:34">code</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:49"><expr pos:start="233:13" pos:end="233:48"><name pos:start="233:13" pos:end="233:13">v</name> <operator pos:start="233:15" pos:end="233:15">=</operator> <name pos:start="233:17" pos:end="233:48"><name pos:start="233:17" pos:end="233:25">exp_table</name><index pos:start="233:26" pos:end="233:48">[ <expr pos:start="233:28" pos:end="233:47"><name pos:start="233:28" pos:end="233:41"><name pos:start="233:28" pos:end="233:36">exponents</name><index pos:start="233:37" pos:end="233:41">[<expr pos:start="233:38" pos:end="233:40"><name pos:start="233:38" pos:end="233:40">pos</name></expr>]</index></name> <operator pos:start="233:43" pos:end="233:43">+</operator> <literal type="number" pos:start="233:45" pos:end="233:47">400</literal></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="237:23"><if pos:start="235:13" pos:end="237:23">if<condition pos:start="235:15" pos:end="235:33">(<expr pos:start="235:16" pos:end="235:32"><call pos:start="235:16" pos:end="235:32"><name pos:start="235:16" pos:end="235:24">get_bits1</name><argument_list pos:start="235:25" pos:end="235:32">(<argument pos:start="235:26" pos:end="235:31"><expr pos:start="235:26" pos:end="235:31"><operator pos:start="235:26" pos:end="235:26">&amp;</operator><name pos:start="235:27" pos:end="235:31"><name pos:start="235:27" pos:end="235:27">s</name><operator pos:start="235:28" pos:end="235:29">-&gt;</operator><name pos:start="235:30" pos:end="235:31">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:23"><block_content pos:start="237:17" pos:end="237:23">

                <expr_stmt pos:start="237:17" pos:end="237:23"><expr pos:start="237:17" pos:end="237:22"><name pos:start="237:17" pos:end="237:17">v</name> <operator pos:start="237:19" pos:end="237:19">=</operator> <operator pos:start="237:21" pos:end="237:21">-</operator><name pos:start="237:22" pos:end="237:22">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:34"><expr pos:start="239:13" pos:end="239:33"><name pos:start="239:13" pos:end="239:29"><name pos:start="239:13" pos:end="239:13">g</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:24">sb_hybrid</name><index pos:start="239:25" pos:end="239:29">[<expr pos:start="239:26" pos:end="239:28"><name pos:start="239:26" pos:end="239:28">pos</name></expr>]</index></name> <operator pos:start="239:31" pos:end="239:31">=</operator> <name pos:start="239:33" pos:end="239:33">v</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="243:9" pos:end="243:19"><expr pos:start="243:9" pos:end="243:18"><name pos:start="243:9" pos:end="243:15">s_index</name><operator pos:start="243:16" pos:end="243:17">+=</operator><literal type="number" pos:start="243:18" pos:end="243:18">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="247:5" pos:end="247:77"><expr pos:start="247:5" pos:end="247:76"><call pos:start="247:5" pos:end="247:76"><name pos:start="247:5" pos:end="247:10">memset</name><argument_list pos:start="247:11" pos:end="247:76">(<argument pos:start="247:12" pos:end="247:33"><expr pos:start="247:12" pos:end="247:33"><operator pos:start="247:12" pos:end="247:12">&amp;</operator><name pos:start="247:13" pos:end="247:33"><name pos:start="247:13" pos:end="247:13">g</name><operator pos:start="247:14" pos:end="247:15">-&gt;</operator><name pos:start="247:16" pos:end="247:24">sb_hybrid</name><index pos:start="247:25" pos:end="247:33">[<expr pos:start="247:26" pos:end="247:32"><name pos:start="247:26" pos:end="247:32">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="247:36" pos:end="247:36"><expr pos:start="247:36" pos:end="247:36"><literal type="number" pos:start="247:36" pos:end="247:36">0</literal></expr></argument>, <argument pos:start="247:39" pos:end="247:75"><expr pos:start="247:39" pos:end="247:75"><sizeof pos:start="247:39" pos:end="247:59">sizeof<argument_list pos:start="247:45" pos:end="247:59">(<argument pos:start="247:46" pos:end="247:58"><expr pos:start="247:46" pos:end="247:58"><operator pos:start="247:46" pos:end="247:46">*</operator><name pos:start="247:47" pos:end="247:58"><name pos:start="247:47" pos:end="247:47">g</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:58">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof><operator pos:start="247:60" pos:end="247:60">*</operator><operator pos:start="247:61" pos:end="247:61">(</operator><literal type="number" pos:start="247:62" pos:end="247:66">576</literal> <operator pos:start="247:66" pos:end="247:66">-</operator> <name pos:start="247:68" pos:end="247:74">s_index</name><operator pos:start="247:75" pos:end="247:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="249:5" pos:end="249:13">return <expr pos:start="249:12" pos:end="249:12"><literal type="number" pos:start="249:12" pos:end="249:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
