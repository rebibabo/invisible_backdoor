<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11588.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:66"><name pos:start="1:1" pos:end="1:31">altivec_packIntArrayToCharArray</name><argument_list pos:start="1:32" pos:end="1:66">(<argument pos:start="1:33" pos:end="1:40">int *val</argument>, <argument pos:start="1:43" pos:end="1:55">uint8_t* dest</argument>, <argument pos:start="1:58" pos:end="1:65">int dstW</argument>)</argument_list></macro> <block pos:start="1:68" pos:end="117:1">{<block_content pos:start="3:3" pos:end="115:3">

  <decl_stmt pos:start="3:3" pos:end="3:17"><decl pos:start="3:3" pos:end="3:16"><type pos:start="3:3" pos:end="3:14"><specifier pos:start="3:3" pos:end="3:10">register</specifier> <name pos:start="3:12" pos:end="3:14">int</name></type> <name pos:start="3:16" pos:end="3:16">i</name></decl>;</decl_stmt>

  <decl_stmt pos:start="5:3" pos:end="7:48"><decl pos:start="5:3" pos:end="7:47"><type pos:start="5:3" pos:end="5:21"><name pos:start="5:3" pos:end="5:8">vector</name> <name pos:start="5:10" pos:end="5:17">unsigned</name> <name pos:start="5:19" pos:end="5:21">int</name></type> <name pos:start="5:23" pos:end="5:46">altivec_vectorShiftInt19</name> <init pos:start="5:48" pos:end="7:47">=

    <expr pos:start="7:5" pos:end="7:47"><call pos:start="7:5" pos:end="7:47"><name pos:start="7:5" pos:end="7:11">vec_add</name><argument_list pos:start="7:12" pos:end="7:47">(<argument pos:start="7:13" pos:end="7:29"><expr pos:start="7:13" pos:end="7:29"><call pos:start="7:13" pos:end="7:29"><name pos:start="7:13" pos:end="7:25">vec_splat_u32</name><argument_list pos:start="7:26" pos:end="7:29">(<argument pos:start="7:27" pos:end="7:28"><expr pos:start="7:27" pos:end="7:28"><literal type="number" pos:start="7:27" pos:end="7:28">10</literal></expr></argument>)</argument_list></call></expr></argument>,<argument pos:start="7:31" pos:end="7:46"><expr pos:start="7:31" pos:end="7:46"><call pos:start="7:31" pos:end="7:46"><name pos:start="7:31" pos:end="7:43">vec_splat_u32</name><argument_list pos:start="7:44" pos:end="7:46">(<argument pos:start="7:45" pos:end="7:45"><expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt pos:start="9:3" pos:end="107:3"><if pos:start="9:3" pos:end="75:3">if <condition pos:start="9:6" pos:end="9:31">(<expr pos:start="9:7" pos:end="9:30"><operator pos:start="9:7" pos:end="9:7">(</operator><name pos:start="9:8" pos:end="9:15">unsigned</name> <name pos:start="9:17" pos:end="9:20">long</name><operator pos:start="9:21" pos:end="9:21">)</operator><name pos:start="9:22" pos:end="9:25">dest</name> <operator pos:start="9:27" pos:end="9:27">%</operator> <literal type="number" pos:start="9:29" pos:end="9:30">16</literal></expr>)</condition> <block pos:start="9:33" pos:end="75:3">{<block_content pos:start="15:5" pos:end="73:5">

    <comment type="block" pos:start="11:5" pos:end="11:56">/* badly aligned store, we force store alignement */</comment>

    <comment type="block" pos:start="13:5" pos:end="13:63">/* and will handle load misalignement on val w/ vec_perm */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:10">vector</name> <name pos:start="15:12" pos:end="15:19">unsigned</name> <name pos:start="15:21" pos:end="15:24">char</name></type> <name pos:start="15:26" pos:end="15:30">perm1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:10">vector</name> <name pos:start="17:12" pos:end="17:17">signed</name> <name pos:start="17:19" pos:end="17:21">int</name></type> <name pos:start="17:23" pos:end="17:24">v1</name></decl>;</decl_stmt>

    <for pos:start="19:5" pos:end="27:5">for <control pos:start="19:9" pos:end="21:50">(<init pos:start="19:10" pos:end="19:16"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr> ;</init> <condition pos:start="19:18" pos:end="21:45"><expr pos:start="19:18" pos:end="21:43"><operator pos:start="19:18" pos:end="19:18">(</operator><name pos:start="19:19" pos:end="19:19">i</name> <operator pos:start="19:21" pos:end="19:21">&lt;</operator> <name pos:start="19:23" pos:end="19:26">dstW</name><operator pos:start="19:27" pos:end="19:27">)</operator> <operator pos:start="19:29" pos:end="19:30">&amp;&amp;</operator>

	   <operator pos:start="21:12" pos:end="21:12">(</operator><operator pos:start="21:13" pos:end="21:13">(</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:22">unsigned</name> <name pos:start="21:24" pos:end="21:27">long</name><operator pos:start="21:28" pos:end="21:28">)</operator><name pos:start="21:29" pos:end="21:32">dest</name> <operator pos:start="21:34" pos:end="21:34">+</operator> <name pos:start="21:36" pos:end="21:36">i</name><operator pos:start="21:37" pos:end="21:37">)</operator> <operator pos:start="21:39" pos:end="21:39">%</operator> <literal type="number" pos:start="21:41" pos:end="21:42">16</literal><operator pos:start="21:43" pos:end="21:43">)</operator></expr> ;</condition> <incr pos:start="21:47" pos:end="21:49"><expr pos:start="21:47" pos:end="21:49"><name pos:start="21:47" pos:end="21:47">i</name><operator pos:start="21:48" pos:end="21:49">++</operator></expr></incr>)</control> <block pos:start="21:52" pos:end="27:5">{<block_content pos:start="23:7" pos:end="25:52">

      <decl_stmt pos:start="23:7" pos:end="23:27"><decl pos:start="23:7" pos:end="23:26"><type pos:start="23:7" pos:end="23:9"><name pos:start="23:7" pos:end="23:9">int</name></type> <name pos:start="23:11" pos:end="23:11">t</name> <init pos:start="23:13" pos:end="23:26">= <expr pos:start="23:15" pos:end="23:26"><name pos:start="23:15" pos:end="23:20"><name pos:start="23:15" pos:end="23:17">val</name><index pos:start="23:18" pos:end="23:20">[<expr pos:start="23:19" pos:end="23:19"><name pos:start="23:19" pos:end="23:19">i</name></expr>]</index></name> <operator pos:start="23:22" pos:end="23:23">&gt;&gt;</operator> <literal type="number" pos:start="23:25" pos:end="23:26">19</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="25:7" pos:end="25:52"><expr pos:start="25:7" pos:end="25:51"><name pos:start="25:7" pos:end="25:13"><name pos:start="25:7" pos:end="25:10">dest</name><index pos:start="25:11" pos:end="25:13">[<expr pos:start="25:12" pos:end="25:12"><name pos:start="25:12" pos:end="25:12">i</name></expr>]</index></name> <operator pos:start="25:15" pos:end="25:15">=</operator> <ternary pos:start="25:17" pos:end="25:51"><condition pos:start="25:17" pos:end="25:25"><expr pos:start="25:17" pos:end="25:23"><operator pos:start="25:17" pos:end="25:17">(</operator><name pos:start="25:18" pos:end="25:18">t</name> <operator pos:start="25:20" pos:end="25:20">&lt;</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal><operator pos:start="25:23" pos:end="25:23">)</operator></expr> ?</condition><then pos:start="25:27" pos:end="25:27"> <expr pos:start="25:27" pos:end="25:27"><literal type="number" pos:start="25:27" pos:end="25:27">0</literal></expr> </then><else pos:start="25:29" pos:end="25:51">: <expr pos:start="25:31" pos:end="25:51"><operator pos:start="25:31" pos:end="25:31">(</operator><ternary pos:start="25:32" pos:end="25:50"><condition pos:start="25:32" pos:end="25:42"><expr pos:start="25:32" pos:end="25:40"><operator pos:start="25:32" pos:end="25:32">(</operator><name pos:start="25:33" pos:end="25:33">t</name> <operator pos:start="25:35" pos:end="25:35">&gt;</operator> <literal type="number" pos:start="25:37" pos:end="25:39">255</literal><operator pos:start="25:40" pos:end="25:40">)</operator></expr> ?</condition><then pos:start="25:44" pos:end="25:46"> <expr pos:start="25:44" pos:end="25:46"><literal type="number" pos:start="25:44" pos:end="25:46">255</literal></expr> </then><else pos:start="25:48" pos:end="25:50">: <expr pos:start="25:50" pos:end="25:50"><name pos:start="25:50" pos:end="25:50">t</name></expr></else></ternary><operator pos:start="25:51" pos:end="25:51">)</operator></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:9">perm1</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:20">vec_lvsl</name><argument_list pos:start="29:21" pos:end="29:33">(<argument pos:start="29:22" pos:end="29:27"><expr pos:start="29:22" pos:end="29:27"><name pos:start="29:22" pos:end="29:22">i</name> <operator pos:start="29:24" pos:end="29:25">&lt;&lt;</operator> <literal type="number" pos:start="29:27" pos:end="29:27">2</literal></expr></argument>, <argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:6">v1</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:15">vec_ld</name><argument_list pos:start="31:16" pos:end="31:28">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:20">&lt;&lt;</operator> <literal type="number" pos:start="31:22" pos:end="31:22">2</literal></expr></argument>, <argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="73:5">for <control pos:start="33:9" pos:end="33:35">( <init pos:start="33:11" pos:end="33:11">;</init> <condition pos:start="33:13" pos:end="33:28"><expr pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:15">&lt;</operator> <operator pos:start="33:17" pos:end="33:17">(</operator><name pos:start="33:18" pos:end="33:21">dstW</name> <operator pos:start="33:23" pos:end="33:23">-</operator> <literal type="number" pos:start="33:25" pos:end="33:26">15</literal><operator pos:start="33:27" pos:end="33:27">)</operator></expr>;</condition> <incr pos:start="33:30" pos:end="33:34"><expr pos:start="33:30" pos:end="33:34"><name pos:start="33:30" pos:end="33:30">i</name><operator pos:start="33:31" pos:end="33:32">+=</operator><literal type="number" pos:start="33:33" pos:end="33:34">16</literal></expr></incr>)</control> <block pos:start="33:37" pos:end="73:5">{<block_content pos:start="35:7" pos:end="71:14">

      <decl_stmt pos:start="35:7" pos:end="35:26"><decl pos:start="35:7" pos:end="35:25"><type pos:start="35:7" pos:end="35:9"><name pos:start="35:7" pos:end="35:9">int</name></type> <name pos:start="35:11" pos:end="35:16">offset</name> <init pos:start="35:18" pos:end="35:25">= <expr pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:20">i</name> <operator pos:start="35:22" pos:end="35:23">&lt;&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">2</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="37:7" pos:end="37:54"><decl pos:start="37:7" pos:end="37:53"><type pos:start="37:7" pos:end="37:23"><name pos:start="37:7" pos:end="37:12">vector</name> <name pos:start="37:14" pos:end="37:19">signed</name> <name pos:start="37:21" pos:end="37:23">int</name></type> <name pos:start="37:25" pos:end="37:26">v2</name> <init pos:start="37:28" pos:end="37:53">= <expr pos:start="37:30" pos:end="37:53"><call pos:start="37:30" pos:end="37:53"><name pos:start="37:30" pos:end="37:35">vec_ld</name><argument_list pos:start="37:36" pos:end="37:53">(<argument pos:start="37:37" pos:end="37:47"><expr pos:start="37:37" pos:end="37:47"><name pos:start="37:37" pos:end="37:42">offset</name> <operator pos:start="37:44" pos:end="37:44">+</operator> <literal type="number" pos:start="37:46" pos:end="37:47">16</literal></expr></argument>, <argument pos:start="37:50" pos:end="37:52"><expr pos:start="37:50" pos:end="37:52"><name pos:start="37:50" pos:end="37:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="39:7" pos:end="39:54"><decl pos:start="39:7" pos:end="39:53"><type pos:start="39:7" pos:end="39:23"><name pos:start="39:7" pos:end="39:12">vector</name> <name pos:start="39:14" pos:end="39:19">signed</name> <name pos:start="39:21" pos:end="39:23">int</name></type> <name pos:start="39:25" pos:end="39:26">v3</name> <init pos:start="39:28" pos:end="39:53">= <expr pos:start="39:30" pos:end="39:53"><call pos:start="39:30" pos:end="39:53"><name pos:start="39:30" pos:end="39:35">vec_ld</name><argument_list pos:start="39:36" pos:end="39:53">(<argument pos:start="39:37" pos:end="39:47"><expr pos:start="39:37" pos:end="39:47"><name pos:start="39:37" pos:end="39:42">offset</name> <operator pos:start="39:44" pos:end="39:44">+</operator> <literal type="number" pos:start="39:46" pos:end="39:47">32</literal></expr></argument>, <argument pos:start="39:50" pos:end="39:52"><expr pos:start="39:50" pos:end="39:52"><name pos:start="39:50" pos:end="39:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="41:7" pos:end="41:54"><decl pos:start="41:7" pos:end="41:53"><type pos:start="41:7" pos:end="41:23"><name pos:start="41:7" pos:end="41:12">vector</name> <name pos:start="41:14" pos:end="41:19">signed</name> <name pos:start="41:21" pos:end="41:23">int</name></type> <name pos:start="41:25" pos:end="41:26">v4</name> <init pos:start="41:28" pos:end="41:53">= <expr pos:start="41:30" pos:end="41:53"><call pos:start="41:30" pos:end="41:53"><name pos:start="41:30" pos:end="41:35">vec_ld</name><argument_list pos:start="41:36" pos:end="41:53">(<argument pos:start="41:37" pos:end="41:47"><expr pos:start="41:37" pos:end="41:47"><name pos:start="41:37" pos:end="41:42">offset</name> <operator pos:start="41:44" pos:end="41:44">+</operator> <literal type="number" pos:start="41:46" pos:end="41:47">48</literal></expr></argument>, <argument pos:start="41:50" pos:end="41:52"><expr pos:start="41:50" pos:end="41:52"><name pos:start="41:50" pos:end="41:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="43:7" pos:end="43:54"><decl pos:start="43:7" pos:end="43:53"><type pos:start="43:7" pos:end="43:23"><name pos:start="43:7" pos:end="43:12">vector</name> <name pos:start="43:14" pos:end="43:19">signed</name> <name pos:start="43:21" pos:end="43:23">int</name></type> <name pos:start="43:25" pos:end="43:26">v5</name> <init pos:start="43:28" pos:end="43:53">= <expr pos:start="43:30" pos:end="43:53"><call pos:start="43:30" pos:end="43:53"><name pos:start="43:30" pos:end="43:35">vec_ld</name><argument_list pos:start="43:36" pos:end="43:53">(<argument pos:start="43:37" pos:end="43:47"><expr pos:start="43:37" pos:end="43:47"><name pos:start="43:37" pos:end="43:42">offset</name> <operator pos:start="43:44" pos:end="43:44">+</operator> <literal type="number" pos:start="43:46" pos:end="43:47">64</literal></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><name pos:start="43:50" pos:end="43:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="45:7" pos:end="45:52"><decl pos:start="45:7" pos:end="45:51"><type pos:start="45:7" pos:end="45:23"><name pos:start="45:7" pos:end="45:12">vector</name> <name pos:start="45:14" pos:end="45:19">signed</name> <name pos:start="45:21" pos:end="45:23">int</name></type> <name pos:start="45:25" pos:end="45:27">v12</name> <init pos:start="45:29" pos:end="45:51">= <expr pos:start="45:31" pos:end="45:51"><call pos:start="45:31" pos:end="45:51"><name pos:start="45:31" pos:end="45:38">vec_perm</name><argument_list pos:start="45:39" pos:end="45:51">(<argument pos:start="45:40" pos:end="45:41"><expr pos:start="45:40" pos:end="45:41"><name pos:start="45:40" pos:end="45:41">v1</name></expr></argument>,<argument pos:start="45:43" pos:end="45:44"><expr pos:start="45:43" pos:end="45:44"><name pos:start="45:43" pos:end="45:44">v2</name></expr></argument>,<argument pos:start="45:46" pos:end="45:50"><expr pos:start="45:46" pos:end="45:50"><name pos:start="45:46" pos:end="45:50">perm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="47:7" pos:end="47:52"><decl pos:start="47:7" pos:end="47:51"><type pos:start="47:7" pos:end="47:23"><name pos:start="47:7" pos:end="47:12">vector</name> <name pos:start="47:14" pos:end="47:19">signed</name> <name pos:start="47:21" pos:end="47:23">int</name></type> <name pos:start="47:25" pos:end="47:27">v23</name> <init pos:start="47:29" pos:end="47:51">= <expr pos:start="47:31" pos:end="47:51"><call pos:start="47:31" pos:end="47:51"><name pos:start="47:31" pos:end="47:38">vec_perm</name><argument_list pos:start="47:39" pos:end="47:51">(<argument pos:start="47:40" pos:end="47:41"><expr pos:start="47:40" pos:end="47:41"><name pos:start="47:40" pos:end="47:41">v2</name></expr></argument>,<argument pos:start="47:43" pos:end="47:44"><expr pos:start="47:43" pos:end="47:44"><name pos:start="47:43" pos:end="47:44">v3</name></expr></argument>,<argument pos:start="47:46" pos:end="47:50"><expr pos:start="47:46" pos:end="47:50"><name pos:start="47:46" pos:end="47:50">perm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="49:7" pos:end="49:52"><decl pos:start="49:7" pos:end="49:51"><type pos:start="49:7" pos:end="49:23"><name pos:start="49:7" pos:end="49:12">vector</name> <name pos:start="49:14" pos:end="49:19">signed</name> <name pos:start="49:21" pos:end="49:23">int</name></type> <name pos:start="49:25" pos:end="49:27">v34</name> <init pos:start="49:29" pos:end="49:51">= <expr pos:start="49:31" pos:end="49:51"><call pos:start="49:31" pos:end="49:51"><name pos:start="49:31" pos:end="49:38">vec_perm</name><argument_list pos:start="49:39" pos:end="49:51">(<argument pos:start="49:40" pos:end="49:41"><expr pos:start="49:40" pos:end="49:41"><name pos:start="49:40" pos:end="49:41">v3</name></expr></argument>,<argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><name pos:start="49:43" pos:end="49:44">v4</name></expr></argument>,<argument pos:start="49:46" pos:end="49:50"><expr pos:start="49:46" pos:end="49:50"><name pos:start="49:46" pos:end="49:50">perm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="51:7" pos:end="51:52"><decl pos:start="51:7" pos:end="51:51"><type pos:start="51:7" pos:end="51:23"><name pos:start="51:7" pos:end="51:12">vector</name> <name pos:start="51:14" pos:end="51:19">signed</name> <name pos:start="51:21" pos:end="51:23">int</name></type> <name pos:start="51:25" pos:end="51:27">v45</name> <init pos:start="51:29" pos:end="51:51">= <expr pos:start="51:31" pos:end="51:51"><call pos:start="51:31" pos:end="51:51"><name pos:start="51:31" pos:end="51:38">vec_perm</name><argument_list pos:start="51:39" pos:end="51:51">(<argument pos:start="51:40" pos:end="51:41"><expr pos:start="51:40" pos:end="51:41"><name pos:start="51:40" pos:end="51:41">v4</name></expr></argument>,<argument pos:start="51:43" pos:end="51:44"><expr pos:start="51:43" pos:end="51:44"><name pos:start="51:43" pos:end="51:44">v5</name></expr></argument>,<argument pos:start="51:46" pos:end="51:50"><expr pos:start="51:46" pos:end="51:50"><name pos:start="51:46" pos:end="51:50">perm1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



      <decl_stmt pos:start="55:7" pos:end="55:68"><decl pos:start="55:7" pos:end="55:67"><type pos:start="55:7" pos:end="55:23"><name pos:start="55:7" pos:end="55:12">vector</name> <name pos:start="55:14" pos:end="55:19">signed</name> <name pos:start="55:21" pos:end="55:23">int</name></type> <name pos:start="55:25" pos:end="55:26">vA</name> <init pos:start="55:28" pos:end="55:67">= <expr pos:start="55:30" pos:end="55:67"><call pos:start="55:30" pos:end="55:67"><name pos:start="55:30" pos:end="55:36">vec_sra</name><argument_list pos:start="55:37" pos:end="55:67">(<argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">v12</name></expr></argument>, <argument pos:start="55:43" pos:end="55:66"><expr pos:start="55:43" pos:end="55:66"><name pos:start="55:43" pos:end="55:66">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="57:7" pos:end="57:68"><decl pos:start="57:7" pos:end="57:67"><type pos:start="57:7" pos:end="57:23"><name pos:start="57:7" pos:end="57:12">vector</name> <name pos:start="57:14" pos:end="57:19">signed</name> <name pos:start="57:21" pos:end="57:23">int</name></type> <name pos:start="57:25" pos:end="57:26">vB</name> <init pos:start="57:28" pos:end="57:67">= <expr pos:start="57:30" pos:end="57:67"><call pos:start="57:30" pos:end="57:67"><name pos:start="57:30" pos:end="57:36">vec_sra</name><argument_list pos:start="57:37" pos:end="57:67">(<argument pos:start="57:38" pos:end="57:40"><expr pos:start="57:38" pos:end="57:40"><name pos:start="57:38" pos:end="57:40">v23</name></expr></argument>, <argument pos:start="57:43" pos:end="57:66"><expr pos:start="57:43" pos:end="57:66"><name pos:start="57:43" pos:end="57:66">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="59:7" pos:end="59:68"><decl pos:start="59:7" pos:end="59:67"><type pos:start="59:7" pos:end="59:23"><name pos:start="59:7" pos:end="59:12">vector</name> <name pos:start="59:14" pos:end="59:19">signed</name> <name pos:start="59:21" pos:end="59:23">int</name></type> <name pos:start="59:25" pos:end="59:26">vC</name> <init pos:start="59:28" pos:end="59:67">= <expr pos:start="59:30" pos:end="59:67"><call pos:start="59:30" pos:end="59:67"><name pos:start="59:30" pos:end="59:36">vec_sra</name><argument_list pos:start="59:37" pos:end="59:67">(<argument pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:40">v34</name></expr></argument>, <argument pos:start="59:43" pos:end="59:66"><expr pos:start="59:43" pos:end="59:66"><name pos:start="59:43" pos:end="59:66">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="61:7" pos:end="61:68"><decl pos:start="61:7" pos:end="61:67"><type pos:start="61:7" pos:end="61:23"><name pos:start="61:7" pos:end="61:12">vector</name> <name pos:start="61:14" pos:end="61:19">signed</name> <name pos:start="61:21" pos:end="61:23">int</name></type> <name pos:start="61:25" pos:end="61:26">vD</name> <init pos:start="61:28" pos:end="61:67">= <expr pos:start="61:30" pos:end="61:67"><call pos:start="61:30" pos:end="61:67"><name pos:start="61:30" pos:end="61:36">vec_sra</name><argument_list pos:start="61:37" pos:end="61:67">(<argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">v45</name></expr></argument>, <argument pos:start="61:43" pos:end="61:66"><expr pos:start="61:43" pos:end="61:66"><name pos:start="61:43" pos:end="61:66">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="63:7" pos:end="63:53"><decl pos:start="63:7" pos:end="63:52"><type pos:start="63:7" pos:end="63:27"><name pos:start="63:7" pos:end="63:12">vector</name> <name pos:start="63:14" pos:end="63:21">unsigned</name> <name pos:start="63:23" pos:end="63:27">short</name></type> <name pos:start="63:29" pos:end="63:31">vs1</name> <init pos:start="63:33" pos:end="63:52">= <expr pos:start="63:35" pos:end="63:52"><call pos:start="63:35" pos:end="63:52"><name pos:start="63:35" pos:end="63:44">vec_packsu</name><argument_list pos:start="63:45" pos:end="63:52">(<argument pos:start="63:46" pos:end="63:47"><expr pos:start="63:46" pos:end="63:47"><name pos:start="63:46" pos:end="63:47">vA</name></expr></argument>, <argument pos:start="63:50" pos:end="63:51"><expr pos:start="63:50" pos:end="63:51"><name pos:start="63:50" pos:end="63:51">vB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="65:7" pos:end="65:53"><decl pos:start="65:7" pos:end="65:52"><type pos:start="65:7" pos:end="65:27"><name pos:start="65:7" pos:end="65:12">vector</name> <name pos:start="65:14" pos:end="65:21">unsigned</name> <name pos:start="65:23" pos:end="65:27">short</name></type> <name pos:start="65:29" pos:end="65:31">vs2</name> <init pos:start="65:33" pos:end="65:52">= <expr pos:start="65:35" pos:end="65:52"><call pos:start="65:35" pos:end="65:52"><name pos:start="65:35" pos:end="65:44">vec_packsu</name><argument_list pos:start="65:45" pos:end="65:52">(<argument pos:start="65:46" pos:end="65:47"><expr pos:start="65:46" pos:end="65:47"><name pos:start="65:46" pos:end="65:47">vC</name></expr></argument>, <argument pos:start="65:50" pos:end="65:51"><expr pos:start="65:50" pos:end="65:51"><name pos:start="65:50" pos:end="65:51">vD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="67:7" pos:end="67:53"><decl pos:start="67:7" pos:end="67:52"><type pos:start="67:7" pos:end="67:26"><name pos:start="67:7" pos:end="67:12">vector</name> <name pos:start="67:14" pos:end="67:21">unsigned</name> <name pos:start="67:23" pos:end="67:26">char</name></type> <name pos:start="67:28" pos:end="67:29">vf</name> <init pos:start="67:31" pos:end="67:52">= <expr pos:start="67:33" pos:end="67:52"><call pos:start="67:33" pos:end="67:52"><name pos:start="67:33" pos:end="67:42">vec_packsu</name><argument_list pos:start="67:43" pos:end="67:52">(<argument pos:start="67:44" pos:end="67:46"><expr pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">vs1</name></expr></argument>, <argument pos:start="67:49" pos:end="67:51"><expr pos:start="67:49" pos:end="67:51"><name pos:start="67:49" pos:end="67:51">vs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="69:7" pos:end="69:26"><expr pos:start="69:7" pos:end="69:25"><call pos:start="69:7" pos:end="69:25"><name pos:start="69:7" pos:end="69:12">vec_st</name><argument_list pos:start="69:13" pos:end="69:25">(<argument pos:start="69:14" pos:end="69:15"><expr pos:start="69:14" pos:end="69:15"><name pos:start="69:14" pos:end="69:15">vf</name></expr></argument>, <argument pos:start="69:18" pos:end="69:18"><expr pos:start="69:18" pos:end="69:18"><name pos:start="69:18" pos:end="69:18">i</name></expr></argument>, <argument pos:start="69:21" pos:end="69:24"><expr pos:start="69:21" pos:end="69:24"><name pos:start="69:21" pos:end="69:24">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="71:7" pos:end="71:14"><expr pos:start="71:7" pos:end="71:13"><name pos:start="71:7" pos:end="71:8">v1</name> <operator pos:start="71:10" pos:end="71:10">=</operator> <name pos:start="71:12" pos:end="71:13">v5</name></expr>;</expr_stmt>

    </block_content>}</block></for>

  </block_content>}</block></if> <else pos:start="75:5" pos:end="107:3">else <block pos:start="75:10" pos:end="107:3">{<block_content pos:start="77:5" pos:end="105:5"> <comment type="line" pos:start="75:12" pos:end="75:45">// dest is properly aligned, great</comment>

    <for pos:start="77:5" pos:end="105:5">for <control pos:start="77:9" pos:end="77:39">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:32"><expr pos:start="77:17" pos:end="77:31"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:25">dstW</name> <operator pos:start="77:27" pos:end="77:27">-</operator> <literal type="number" pos:start="77:29" pos:end="77:30">15</literal><operator pos:start="77:31" pos:end="77:31">)</operator></expr>;</condition> <incr pos:start="77:34" pos:end="77:38"><expr pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:34">i</name><operator pos:start="77:35" pos:end="77:36">+=</operator><literal type="number" pos:start="77:37" pos:end="77:38">16</literal></expr></incr>)</control> <block pos:start="77:41" pos:end="105:5">{<block_content pos:start="79:7" pos:end="103:26">

      <decl_stmt pos:start="79:7" pos:end="79:26"><decl pos:start="79:7" pos:end="79:25"><type pos:start="79:7" pos:end="79:9"><name pos:start="79:7" pos:end="79:9">int</name></type> <name pos:start="79:11" pos:end="79:16">offset</name> <init pos:start="79:18" pos:end="79:25">= <expr pos:start="79:20" pos:end="79:25"><name pos:start="79:20" pos:end="79:20">i</name> <operator pos:start="79:22" pos:end="79:23">&lt;&lt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">2</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="81:7" pos:end="81:49"><decl pos:start="81:7" pos:end="81:48"><type pos:start="81:7" pos:end="81:23"><name pos:start="81:7" pos:end="81:12">vector</name> <name pos:start="81:14" pos:end="81:19">signed</name> <name pos:start="81:21" pos:end="81:23">int</name></type> <name pos:start="81:25" pos:end="81:26">v1</name> <init pos:start="81:28" pos:end="81:48">= <expr pos:start="81:30" pos:end="81:48"><call pos:start="81:30" pos:end="81:48"><name pos:start="81:30" pos:end="81:35">vec_ld</name><argument_list pos:start="81:36" pos:end="81:48">(<argument pos:start="81:37" pos:end="81:42"><expr pos:start="81:37" pos:end="81:42"><name pos:start="81:37" pos:end="81:42">offset</name></expr></argument>, <argument pos:start="81:45" pos:end="81:47"><expr pos:start="81:45" pos:end="81:47"><name pos:start="81:45" pos:end="81:47">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="83:7" pos:end="83:54"><decl pos:start="83:7" pos:end="83:53"><type pos:start="83:7" pos:end="83:23"><name pos:start="83:7" pos:end="83:12">vector</name> <name pos:start="83:14" pos:end="83:19">signed</name> <name pos:start="83:21" pos:end="83:23">int</name></type> <name pos:start="83:25" pos:end="83:26">v2</name> <init pos:start="83:28" pos:end="83:53">= <expr pos:start="83:30" pos:end="83:53"><call pos:start="83:30" pos:end="83:53"><name pos:start="83:30" pos:end="83:35">vec_ld</name><argument_list pos:start="83:36" pos:end="83:53">(<argument pos:start="83:37" pos:end="83:47"><expr pos:start="83:37" pos:end="83:47"><name pos:start="83:37" pos:end="83:42">offset</name> <operator pos:start="83:44" pos:end="83:44">+</operator> <literal type="number" pos:start="83:46" pos:end="83:47">16</literal></expr></argument>, <argument pos:start="83:50" pos:end="83:52"><expr pos:start="83:50" pos:end="83:52"><name pos:start="83:50" pos:end="83:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="85:7" pos:end="85:54"><decl pos:start="85:7" pos:end="85:53"><type pos:start="85:7" pos:end="85:23"><name pos:start="85:7" pos:end="85:12">vector</name> <name pos:start="85:14" pos:end="85:19">signed</name> <name pos:start="85:21" pos:end="85:23">int</name></type> <name pos:start="85:25" pos:end="85:26">v3</name> <init pos:start="85:28" pos:end="85:53">= <expr pos:start="85:30" pos:end="85:53"><call pos:start="85:30" pos:end="85:53"><name pos:start="85:30" pos:end="85:35">vec_ld</name><argument_list pos:start="85:36" pos:end="85:53">(<argument pos:start="85:37" pos:end="85:47"><expr pos:start="85:37" pos:end="85:47"><name pos:start="85:37" pos:end="85:42">offset</name> <operator pos:start="85:44" pos:end="85:44">+</operator> <literal type="number" pos:start="85:46" pos:end="85:47">32</literal></expr></argument>, <argument pos:start="85:50" pos:end="85:52"><expr pos:start="85:50" pos:end="85:52"><name pos:start="85:50" pos:end="85:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="87:7" pos:end="87:54"><decl pos:start="87:7" pos:end="87:53"><type pos:start="87:7" pos:end="87:23"><name pos:start="87:7" pos:end="87:12">vector</name> <name pos:start="87:14" pos:end="87:19">signed</name> <name pos:start="87:21" pos:end="87:23">int</name></type> <name pos:start="87:25" pos:end="87:26">v4</name> <init pos:start="87:28" pos:end="87:53">= <expr pos:start="87:30" pos:end="87:53"><call pos:start="87:30" pos:end="87:53"><name pos:start="87:30" pos:end="87:35">vec_ld</name><argument_list pos:start="87:36" pos:end="87:53">(<argument pos:start="87:37" pos:end="87:47"><expr pos:start="87:37" pos:end="87:47"><name pos:start="87:37" pos:end="87:42">offset</name> <operator pos:start="87:44" pos:end="87:44">+</operator> <literal type="number" pos:start="87:46" pos:end="87:47">48</literal></expr></argument>, <argument pos:start="87:50" pos:end="87:52"><expr pos:start="87:50" pos:end="87:52"><name pos:start="87:50" pos:end="87:52">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="89:7" pos:end="89:67"><decl pos:start="89:7" pos:end="89:66"><type pos:start="89:7" pos:end="89:23"><name pos:start="89:7" pos:end="89:12">vector</name> <name pos:start="89:14" pos:end="89:19">signed</name> <name pos:start="89:21" pos:end="89:23">int</name></type> <name pos:start="89:25" pos:end="89:26">v5</name> <init pos:start="89:28" pos:end="89:66">= <expr pos:start="89:30" pos:end="89:66"><call pos:start="89:30" pos:end="89:66"><name pos:start="89:30" pos:end="89:36">vec_sra</name><argument_list pos:start="89:37" pos:end="89:66">(<argument pos:start="89:38" pos:end="89:39"><expr pos:start="89:38" pos:end="89:39"><name pos:start="89:38" pos:end="89:39">v1</name></expr></argument>, <argument pos:start="89:42" pos:end="89:65"><expr pos:start="89:42" pos:end="89:65"><name pos:start="89:42" pos:end="89:65">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="91:7" pos:end="91:67"><decl pos:start="91:7" pos:end="91:66"><type pos:start="91:7" pos:end="91:23"><name pos:start="91:7" pos:end="91:12">vector</name> <name pos:start="91:14" pos:end="91:19">signed</name> <name pos:start="91:21" pos:end="91:23">int</name></type> <name pos:start="91:25" pos:end="91:26">v6</name> <init pos:start="91:28" pos:end="91:66">= <expr pos:start="91:30" pos:end="91:66"><call pos:start="91:30" pos:end="91:66"><name pos:start="91:30" pos:end="91:36">vec_sra</name><argument_list pos:start="91:37" pos:end="91:66">(<argument pos:start="91:38" pos:end="91:39"><expr pos:start="91:38" pos:end="91:39"><name pos:start="91:38" pos:end="91:39">v2</name></expr></argument>, <argument pos:start="91:42" pos:end="91:65"><expr pos:start="91:42" pos:end="91:65"><name pos:start="91:42" pos:end="91:65">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="93:7" pos:end="93:67"><decl pos:start="93:7" pos:end="93:66"><type pos:start="93:7" pos:end="93:23"><name pos:start="93:7" pos:end="93:12">vector</name> <name pos:start="93:14" pos:end="93:19">signed</name> <name pos:start="93:21" pos:end="93:23">int</name></type> <name pos:start="93:25" pos:end="93:26">v7</name> <init pos:start="93:28" pos:end="93:66">= <expr pos:start="93:30" pos:end="93:66"><call pos:start="93:30" pos:end="93:66"><name pos:start="93:30" pos:end="93:36">vec_sra</name><argument_list pos:start="93:37" pos:end="93:66">(<argument pos:start="93:38" pos:end="93:39"><expr pos:start="93:38" pos:end="93:39"><name pos:start="93:38" pos:end="93:39">v3</name></expr></argument>, <argument pos:start="93:42" pos:end="93:65"><expr pos:start="93:42" pos:end="93:65"><name pos:start="93:42" pos:end="93:65">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="95:7" pos:end="95:67"><decl pos:start="95:7" pos:end="95:66"><type pos:start="95:7" pos:end="95:23"><name pos:start="95:7" pos:end="95:12">vector</name> <name pos:start="95:14" pos:end="95:19">signed</name> <name pos:start="95:21" pos:end="95:23">int</name></type> <name pos:start="95:25" pos:end="95:26">v8</name> <init pos:start="95:28" pos:end="95:66">= <expr pos:start="95:30" pos:end="95:66"><call pos:start="95:30" pos:end="95:66"><name pos:start="95:30" pos:end="95:36">vec_sra</name><argument_list pos:start="95:37" pos:end="95:66">(<argument pos:start="95:38" pos:end="95:39"><expr pos:start="95:38" pos:end="95:39"><name pos:start="95:38" pos:end="95:39">v4</name></expr></argument>, <argument pos:start="95:42" pos:end="95:65"><expr pos:start="95:42" pos:end="95:65"><name pos:start="95:42" pos:end="95:65">altivec_vectorShiftInt19</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="97:7" pos:end="97:53"><decl pos:start="97:7" pos:end="97:52"><type pos:start="97:7" pos:end="97:27"><name pos:start="97:7" pos:end="97:12">vector</name> <name pos:start="97:14" pos:end="97:21">unsigned</name> <name pos:start="97:23" pos:end="97:27">short</name></type> <name pos:start="97:29" pos:end="97:31">vs1</name> <init pos:start="97:33" pos:end="97:52">= <expr pos:start="97:35" pos:end="97:52"><call pos:start="97:35" pos:end="97:52"><name pos:start="97:35" pos:end="97:44">vec_packsu</name><argument_list pos:start="97:45" pos:end="97:52">(<argument pos:start="97:46" pos:end="97:47"><expr pos:start="97:46" pos:end="97:47"><name pos:start="97:46" pos:end="97:47">v5</name></expr></argument>, <argument pos:start="97:50" pos:end="97:51"><expr pos:start="97:50" pos:end="97:51"><name pos:start="97:50" pos:end="97:51">v6</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="99:7" pos:end="99:53"><decl pos:start="99:7" pos:end="99:52"><type pos:start="99:7" pos:end="99:27"><name pos:start="99:7" pos:end="99:12">vector</name> <name pos:start="99:14" pos:end="99:21">unsigned</name> <name pos:start="99:23" pos:end="99:27">short</name></type> <name pos:start="99:29" pos:end="99:31">vs2</name> <init pos:start="99:33" pos:end="99:52">= <expr pos:start="99:35" pos:end="99:52"><call pos:start="99:35" pos:end="99:52"><name pos:start="99:35" pos:end="99:44">vec_packsu</name><argument_list pos:start="99:45" pos:end="99:52">(<argument pos:start="99:46" pos:end="99:47"><expr pos:start="99:46" pos:end="99:47"><name pos:start="99:46" pos:end="99:47">v7</name></expr></argument>, <argument pos:start="99:50" pos:end="99:51"><expr pos:start="99:50" pos:end="99:51"><name pos:start="99:50" pos:end="99:51">v8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt pos:start="101:7" pos:end="101:53"><decl pos:start="101:7" pos:end="101:52"><type pos:start="101:7" pos:end="101:26"><name pos:start="101:7" pos:end="101:12">vector</name> <name pos:start="101:14" pos:end="101:21">unsigned</name> <name pos:start="101:23" pos:end="101:26">char</name></type> <name pos:start="101:28" pos:end="101:29">vf</name> <init pos:start="101:31" pos:end="101:52">= <expr pos:start="101:33" pos:end="101:52"><call pos:start="101:33" pos:end="101:52"><name pos:start="101:33" pos:end="101:42">vec_packsu</name><argument_list pos:start="101:43" pos:end="101:52">(<argument pos:start="101:44" pos:end="101:46"><expr pos:start="101:44" pos:end="101:46"><name pos:start="101:44" pos:end="101:46">vs1</name></expr></argument>, <argument pos:start="101:49" pos:end="101:51"><expr pos:start="101:49" pos:end="101:51"><name pos:start="101:49" pos:end="101:51">vs2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="103:7" pos:end="103:26"><expr pos:start="103:7" pos:end="103:25"><call pos:start="103:7" pos:end="103:25"><name pos:start="103:7" pos:end="103:12">vec_st</name><argument_list pos:start="103:13" pos:end="103:25">(<argument pos:start="103:14" pos:end="103:15"><expr pos:start="103:14" pos:end="103:15"><name pos:start="103:14" pos:end="103:15">vf</name></expr></argument>, <argument pos:start="103:18" pos:end="103:18"><expr pos:start="103:18" pos:end="103:18"><name pos:start="103:18" pos:end="103:18">i</name></expr></argument>, <argument pos:start="103:21" pos:end="103:24"><expr pos:start="103:21" pos:end="103:24"><name pos:start="103:21" pos:end="103:24">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

  </block_content>}</block></else></if_stmt>

  <for pos:start="109:3" pos:end="115:3">for <control pos:start="109:7" pos:end="109:25">( <init pos:start="109:9" pos:end="109:9">;</init> <condition pos:start="109:11" pos:end="109:20"><expr pos:start="109:11" pos:end="109:18"><name pos:start="109:11" pos:end="109:11">i</name> <operator pos:start="109:13" pos:end="109:13">&lt;</operator> <name pos:start="109:15" pos:end="109:18">dstW</name></expr> ;</condition> <incr pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:22">i</name><operator pos:start="109:23" pos:end="109:24">++</operator></expr></incr>)</control> <block pos:start="109:27" pos:end="115:3">{<block_content pos:start="111:5" pos:end="113:50">

    <decl_stmt pos:start="111:5" pos:end="111:25"><decl pos:start="111:5" pos:end="111:24"><type pos:start="111:5" pos:end="111:7"><name pos:start="111:5" pos:end="111:7">int</name></type> <name pos:start="111:9" pos:end="111:9">t</name> <init pos:start="111:11" pos:end="111:24">= <expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:15">val</name><index pos:start="111:16" pos:end="111:18">[<expr pos:start="111:17" pos:end="111:17"><name pos:start="111:17" pos:end="111:17">i</name></expr>]</index></name> <operator pos:start="111:20" pos:end="111:21">&gt;&gt;</operator> <literal type="number" pos:start="111:23" pos:end="111:24">19</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:50"><expr pos:start="113:5" pos:end="113:49"><name pos:start="113:5" pos:end="113:11"><name pos:start="113:5" pos:end="113:8">dest</name><index pos:start="113:9" pos:end="113:11">[<expr pos:start="113:10" pos:end="113:10"><name pos:start="113:10" pos:end="113:10">i</name></expr>]</index></name> <operator pos:start="113:13" pos:end="113:13">=</operator> <ternary pos:start="113:15" pos:end="113:49"><condition pos:start="113:15" pos:end="113:23"><expr pos:start="113:15" pos:end="113:21"><operator pos:start="113:15" pos:end="113:15">(</operator><name pos:start="113:16" pos:end="113:16">t</name> <operator pos:start="113:18" pos:end="113:18">&lt;</operator> <literal type="number" pos:start="113:20" pos:end="113:20">0</literal><operator pos:start="113:21" pos:end="113:21">)</operator></expr> ?</condition><then pos:start="113:25" pos:end="113:25"> <expr pos:start="113:25" pos:end="113:25"><literal type="number" pos:start="113:25" pos:end="113:25">0</literal></expr> </then><else pos:start="113:27" pos:end="113:49">: <expr pos:start="113:29" pos:end="113:49"><operator pos:start="113:29" pos:end="113:29">(</operator><ternary pos:start="113:30" pos:end="113:48"><condition pos:start="113:30" pos:end="113:40"><expr pos:start="113:30" pos:end="113:38"><operator pos:start="113:30" pos:end="113:30">(</operator><name pos:start="113:31" pos:end="113:31">t</name> <operator pos:start="113:33" pos:end="113:33">&gt;</operator> <literal type="number" pos:start="113:35" pos:end="113:37">255</literal><operator pos:start="113:38" pos:end="113:38">)</operator></expr> ?</condition><then pos:start="113:42" pos:end="113:44"> <expr pos:start="113:42" pos:end="113:44"><literal type="number" pos:start="113:42" pos:end="113:44">255</literal></expr> </then><else pos:start="113:46" pos:end="113:48">: <expr pos:start="113:48" pos:end="113:48"><name pos:start="113:48" pos:end="113:48">t</name></expr></else></ternary><operator pos:start="113:49" pos:end="113:49">)</operator></expr></else></ternary></expr>;</expr_stmt>

  </block_content>}</block></for>

</block_content>}</block>
</unit>
