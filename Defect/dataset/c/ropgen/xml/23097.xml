<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23097.c" pos:tabs="8"><function pos:start="1:1" pos:end="58:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_arch_on_sigbus</name><parameter_list pos:start="1:23" pos:end="1:44">(<parameter pos:start="1:24" pos:end="1:31"><decl pos:start="1:24" pos:end="1:31"><type pos:start="1:24" pos:end="1:31"><name pos:start="1:24" pos:end="1:26">int</name></type> <name pos:start="1:28" pos:end="1:31">code</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:43"><decl pos:start="1:34" pos:end="1:43"><type pos:start="1:34" pos:end="1:43"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="58:1">{<block_content pos:start="7:5" pos:end="56:13">

<cpp:ifdef pos:start="5:1" pos:end="5:18">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:18">KVM_CAP_MCE</name></cpp:ifdef>

    <if_stmt pos:start="7:5" pos:end="54:5"><if pos:start="7:5" pos:end="34:5">if <condition pos:start="7:8" pos:end="7:74">(<expr pos:start="7:9" pos:end="7:73"><operator pos:start="7:9" pos:end="7:9">(</operator><name pos:start="7:10" pos:end="7:27"><name pos:start="7:10" pos:end="7:18">first_cpu</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:27">mcg_cap</name></name> <operator pos:start="7:29" pos:end="7:29">&amp;</operator> <name pos:start="7:31" pos:end="7:39">MCG_SER_P</name><operator pos:start="7:40" pos:end="7:40">)</operator> <operator pos:start="7:42" pos:end="7:43">&amp;&amp;</operator> <name pos:start="7:45" pos:end="7:48">addr</name> <operator pos:start="7:50" pos:end="7:51">&amp;&amp;</operator> <name pos:start="7:53" pos:end="7:56">code</name> <operator pos:start="7:58" pos:end="7:59">==</operator> <name pos:start="7:61" pos:end="7:73">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="7:76" pos:end="34:5">{<block_content pos:start="9:9" pos:end="32:47">

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:18"><name pos:start="9:9" pos:end="9:18">ram_addr_t</name></type> <name pos:start="9:20" pos:end="9:27">ram_addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:33"><decl pos:start="11:9" pos:end="11:32"><type pos:start="11:9" pos:end="11:26"><name pos:start="11:9" pos:end="11:26">target_phys_addr_t</name></type> <name pos:start="11:28" pos:end="11:32">paddr</name></decl>;</decl_stmt>



        <comment type="block" pos:start="15:9" pos:end="15:42">/* Hope we are lucky for AO MCE */</comment>

        <if_stmt pos:start="17:9" pos:end="29:9"><if pos:start="17:9" pos:end="29:9">if <condition pos:start="17:12" pos:end="21:55">(<expr pos:start="17:13" pos:end="21:54"><call pos:start="17:13" pos:end="17:52"><name pos:start="17:13" pos:end="17:35">qemu_ram_addr_from_host</name><argument_list pos:start="17:36" pos:end="17:52">(<argument pos:start="17:37" pos:end="17:40"><expr pos:start="17:37" pos:end="17:40"><name pos:start="17:37" pos:end="17:40">addr</name></expr></argument>, <argument pos:start="17:43" pos:end="17:51"><expr pos:start="17:43" pos:end="17:51"><operator pos:start="17:43" pos:end="17:43">&amp;</operator><name pos:start="17:44" pos:end="17:51">ram_addr</name></expr></argument>)</argument_list></call> <operator pos:start="17:54" pos:end="17:55">||</operator>

            <operator pos:start="19:13" pos:end="19:13">!</operator><call pos:start="19:14" pos:end="21:54"><name pos:start="19:14" pos:end="19:46">kvm_physical_memory_addr_from_ram</name><argument_list pos:start="19:47" pos:end="21:54">(<argument pos:start="19:48" pos:end="19:67"><expr pos:start="19:48" pos:end="19:67"><name pos:start="19:48" pos:end="19:67"><name pos:start="19:48" pos:end="19:56">first_cpu</name><operator pos:start="19:57" pos:end="19:58">-&gt;</operator><name pos:start="19:59" pos:end="19:67">kvm_state</name></name></expr></argument>, <argument pos:start="19:70" pos:end="19:77"><expr pos:start="19:70" pos:end="19:77"><name pos:start="19:70" pos:end="19:77">ram_addr</name></expr></argument>,

                                               <argument pos:start="21:48" pos:end="21:53"><expr pos:start="21:48" pos:end="21:53"><operator pos:start="21:48" pos:end="21:48">&amp;</operator><name pos:start="21:49" pos:end="21:53">paddr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:57" pos:end="29:9">{<block_content pos:start="23:13" pos:end="27:21">

            <expr_stmt pos:start="23:13" pos:end="25:72"><expr pos:start="23:13" pos:end="25:71"><call pos:start="23:13" pos:end="25:71"><name pos:start="23:13" pos:end="23:19">fprintf</name><argument_list pos:start="23:20" pos:end="25:71">(<argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><name pos:start="23:21" pos:end="23:26">stderr</name></expr></argument>, <argument pos:start="23:29" pos:end="25:64"><expr pos:start="23:29" pos:end="25:64"><literal type="string" pos:start="23:29" pos:end="23:71">"Hardware memory error for memory used by "</literal>

                    <literal type="string" pos:start="25:21" pos:end="25:64">"QEMU itself instead of guest system!: %p\n"</literal></expr></argument>, <argument pos:start="25:67" pos:end="25:70"><expr pos:start="25:67" pos:end="25:70"><name pos:start="25:67" pos:end="25:70">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>


        <expr_stmt pos:start="32:9" pos:end="32:47"><expr pos:start="32:9" pos:end="32:46"><call pos:start="32:9" pos:end="32:46"><name pos:start="32:9" pos:end="32:22">kvm_mce_inject</name><argument_list pos:start="32:23" pos:end="32:46">(<argument pos:start="32:24" pos:end="32:32"><expr pos:start="32:24" pos:end="32:32"><name pos:start="32:24" pos:end="32:32">first_cpu</name></expr></argument>, <argument pos:start="32:35" pos:end="32:39"><expr pos:start="32:35" pos:end="32:39"><name pos:start="32:35" pos:end="32:39">paddr</name></expr></argument>, <argument pos:start="32:42" pos:end="32:45"><expr pos:start="32:42" pos:end="32:45"><name pos:start="32:42" pos:end="32:45">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="34:7" pos:end="54:5">else

<cpp:endif pos:start="36:1" pos:end="36:6">#<cpp:directive pos:start="36:2" pos:end="36:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="36:8" pos:end="36:24">/* KVM_CAP_MCE */</comment>

    <block pos:start="38:5" pos:end="54:5">{<block_content pos:start="40:9" pos:end="52:9">

        <if_stmt pos:start="40:9" pos:end="52:9"><if pos:start="40:9" pos:end="44:9">if <condition pos:start="40:12" pos:end="40:34">(<expr pos:start="40:13" pos:end="40:33"><name pos:start="40:13" pos:end="40:16">code</name> <operator pos:start="40:18" pos:end="40:19">==</operator> <name pos:start="40:21" pos:end="40:33">BUS_MCEERR_AO</name></expr>)</condition> <block pos:start="40:36" pos:end="44:9">{<block_content pos:start="42:13" pos:end="42:21">

            <return pos:start="42:13" pos:end="42:21">return <expr pos:start="42:20" pos:end="42:20"><literal type="number" pos:start="42:20" pos:end="42:20">0</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="44:11" pos:end="48:9">else if <condition pos:start="44:19" pos:end="44:41">(<expr pos:start="44:20" pos:end="44:40"><name pos:start="44:20" pos:end="44:23">code</name> <operator pos:start="44:25" pos:end="44:26">==</operator> <name pos:start="44:28" pos:end="44:40">BUS_MCEERR_AR</name></expr>)</condition> <block pos:start="44:43" pos:end="48:9">{<block_content pos:start="46:13" pos:end="46:36">

            <expr_stmt pos:start="46:13" pos:end="46:36"><expr pos:start="46:13" pos:end="46:35"><call pos:start="46:13" pos:end="46:35"><name pos:start="46:13" pos:end="46:33">hardware_memory_error</name><argument_list pos:start="46:34" pos:end="46:35">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="48:11" pos:end="52:9">else <block pos:start="48:16" pos:end="52:9">{<block_content pos:start="50:13" pos:end="50:21">

            <return pos:start="50:13" pos:end="50:21">return <expr pos:start="50:20" pos:end="50:20"><literal type="number" pos:start="50:20" pos:end="50:20">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="56:5" pos:end="56:13">return <expr pos:start="56:12" pos:end="56:12"><literal type="number" pos:start="56:12" pos:end="56:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
