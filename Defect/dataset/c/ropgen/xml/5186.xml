<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5186.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">read_low_coeffs</name><parameter_list pos:start="1:27" pos:end="1:102">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:57">int16_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">dst</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:72"><decl pos:start="1:65" pos:end="1:72"><type pos:start="1:65" pos:end="1:72"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:72">size</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:83"><decl pos:start="1:75" pos:end="1:83"><type pos:start="1:75" pos:end="1:83"><name pos:start="1:75" pos:end="1:77">int</name></type> <name pos:start="1:79" pos:end="1:83">width</name></decl></parameter>, <parameter pos:start="1:86" pos:end="1:101"><decl pos:start="1:86" pos:end="1:101"><type pos:start="1:86" pos:end="1:101"><name pos:start="1:86" pos:end="1:94">ptrdiff_t</name></type> <name pos:start="1:96" pos:end="1:101">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:34">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">PixletContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">ctx</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GetBitContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">b</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:33"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:33">gbit</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:17">cnt1</name></decl>, <decl pos:start="9:20" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:24">nbits</name></decl>, <decl pos:start="9:27" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:27">k</name></decl>, <decl pos:start="9:30" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:30" pos:end="9:30">j</name> <init pos:start="9:32" pos:end="9:34">= <expr pos:start="9:34" pos:end="9:34"><literal type="number" pos:start="9:34" pos:end="9:34">0</literal></expr></init></decl>, <decl pos:start="9:37" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:37" pos:end="9:37">i</name> <init pos:start="9:39" pos:end="9:41">= <expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:17">value</name></decl>, <decl pos:start="11:20" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:20" pos:end="11:24">state</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">rlen</name></decl>, <decl pos:start="13:15" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:20">escape</name></decl>, <decl pos:start="13:23" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:26">flag</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="137:5">while <condition pos:start="17:11" pos:end="17:20">(<expr pos:start="17:12" pos:end="17:19"><name pos:start="17:12" pos:end="17:12">i</name> <operator pos:start="17:14" pos:end="17:14">&lt;</operator> <name pos:start="17:16" pos:end="17:19">size</name></expr>)</condition> <block pos:start="17:22" pos:end="137:5">{<block_content pos:start="19:9" pos:end="135:37">

        <expr_stmt pos:start="19:9" pos:end="19:59"><expr pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:13">nbits</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:58"><name pos:start="19:17" pos:end="19:21">FFMIN</name><argument_list pos:start="19:22" pos:end="19:58">(<argument pos:start="19:23" pos:end="19:53"><expr pos:start="19:23" pos:end="19:53"><call pos:start="19:23" pos:end="19:46"><name pos:start="19:23" pos:end="19:28">ff_clz</name><argument_list pos:start="19:29" pos:end="19:46">(<argument pos:start="19:30" pos:end="19:45"><expr pos:start="19:30" pos:end="19:45"><operator pos:start="19:30" pos:end="19:30">(</operator><name pos:start="19:31" pos:end="19:35">state</name> <operator pos:start="19:37" pos:end="19:38">&gt;&gt;</operator> <literal type="number" pos:start="19:40" pos:end="19:40">8</literal><operator pos:start="19:41" pos:end="19:41">)</operator> <operator pos:start="19:43" pos:end="19:43">+</operator> <literal type="number" pos:start="19:45" pos:end="19:45">3</literal></expr></argument>)</argument_list></call> <operator pos:start="19:48" pos:end="19:48">^</operator> <literal type="number" pos:start="19:50" pos:end="19:53">0x1F</literal></expr></argument>, <argument pos:start="19:56" pos:end="19:57"><expr pos:start="19:56" pos:end="19:57"><literal type="number" pos:start="19:56" pos:end="19:57">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><name pos:start="23:9" pos:end="23:12">cnt1</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:33"><name pos:start="23:16" pos:end="23:24">get_unary</name><argument_list pos:start="23:25" pos:end="23:33">(<argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">b</name></expr></argument>, <argument pos:start="23:29" pos:end="23:29"><expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">0</literal></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="47:9"><if pos:start="25:9" pos:end="43:9">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:16">cnt1</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <literal type="number" pos:start="25:20" pos:end="25:20">8</literal></expr>)</condition> <block pos:start="25:23" pos:end="43:9">{<block_content pos:start="27:13" pos:end="41:13">

            <expr_stmt pos:start="27:13" pos:end="27:40"><expr pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:17">value</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:39"><name pos:start="27:21" pos:end="27:29">show_bits</name><argument_list pos:start="27:30" pos:end="27:39">(<argument pos:start="27:31" pos:end="27:31"><expr pos:start="27:31" pos:end="27:31"><name pos:start="27:31" pos:end="27:31">b</name></expr></argument>, <argument pos:start="27:34" pos:end="27:38"><expr pos:start="27:34" pos:end="27:38"><name pos:start="27:34" pos:end="27:38">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="29:13" pos:end="41:13"><if pos:start="29:13" pos:end="35:13">if <condition pos:start="29:16" pos:end="29:27">(<expr pos:start="29:17" pos:end="29:26"><name pos:start="29:17" pos:end="29:21">value</name> <operator pos:start="29:23" pos:end="29:24">&lt;=</operator> <literal type="number" pos:start="29:26" pos:end="29:26">1</literal></expr>)</condition> <block pos:start="29:29" pos:end="35:13">{<block_content pos:start="31:17" pos:end="33:51">

                <expr_stmt pos:start="31:17" pos:end="31:40"><expr pos:start="31:17" pos:end="31:39"><call pos:start="31:17" pos:end="31:39"><name pos:start="31:17" pos:end="31:25">skip_bits</name><argument_list pos:start="31:26" pos:end="31:39">(<argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><name pos:start="31:27" pos:end="31:27">b</name></expr></argument>, <argument pos:start="31:30" pos:end="31:38"><expr pos:start="31:30" pos:end="31:38"><name pos:start="31:30" pos:end="31:34">nbits</name> <operator pos:start="31:36" pos:end="31:36">-</operator> <literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:51"><expr pos:start="33:17" pos:end="33:50"><name pos:start="33:17" pos:end="33:22">escape</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <operator pos:start="33:26" pos:end="33:26">(</operator><operator pos:start="33:27" pos:end="33:27">(</operator><literal type="number" pos:start="33:28" pos:end="33:28">1</literal> <operator pos:start="33:30" pos:end="33:31">&lt;&lt;</operator> <name pos:start="33:33" pos:end="33:37">nbits</name><operator pos:start="33:38" pos:end="33:38">)</operator> <operator pos:start="33:40" pos:end="33:40">-</operator> <literal type="number" pos:start="33:42" pos:end="33:42">1</literal><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:45">*</operator> <name pos:start="33:47" pos:end="33:50">cnt1</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="35:15" pos:end="41:13">else <block pos:start="35:20" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:63">

                <expr_stmt pos:start="37:17" pos:end="37:36"><expr pos:start="37:17" pos:end="37:35"><call pos:start="37:17" pos:end="37:35"><name pos:start="37:17" pos:end="37:25">skip_bits</name><argument_list pos:start="37:26" pos:end="37:35">(<argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">b</name></expr></argument>, <argument pos:start="37:30" pos:end="37:34"><expr pos:start="37:30" pos:end="37:34"><name pos:start="37:30" pos:end="37:34">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:63"><expr pos:start="39:17" pos:end="39:62"><name pos:start="39:17" pos:end="39:22">escape</name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:30">value</name> <operator pos:start="39:32" pos:end="39:32">+</operator> <operator pos:start="39:34" pos:end="39:34">(</operator><operator pos:start="39:35" pos:end="39:35">(</operator><literal type="number" pos:start="39:36" pos:end="39:36">1</literal> <operator pos:start="39:38" pos:end="39:39">&lt;&lt;</operator> <name pos:start="39:41" pos:end="39:45">nbits</name><operator pos:start="39:46" pos:end="39:46">)</operator> <operator pos:start="39:48" pos:end="39:48">-</operator> <literal type="number" pos:start="39:50" pos:end="39:50">1</literal><operator pos:start="39:51" pos:end="39:51">)</operator> <operator pos:start="39:53" pos:end="39:53">*</operator> <name pos:start="39:55" pos:end="39:58">cnt1</name> <operator pos:start="39:60" pos:end="39:60">-</operator> <literal type="number" pos:start="39:62" pos:end="39:62">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="47:9">else <block pos:start="43:16" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:37">

            <expr_stmt pos:start="45:13" pos:end="45:37"><expr pos:start="45:13" pos:end="45:36"><name pos:start="45:13" pos:end="45:18">escape</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <call pos:start="45:22" pos:end="45:36"><name pos:start="45:22" pos:end="45:29">get_bits</name><argument_list pos:start="45:30" pos:end="45:36">(<argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><name pos:start="45:31" pos:end="45:31">b</name></expr></argument>, <argument pos:start="45:34" pos:end="45:35"><expr pos:start="45:34" pos:end="45:35"><literal type="number" pos:start="45:34" pos:end="45:35">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:13">value</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <operator pos:start="51:17" pos:end="51:17">-</operator><operator pos:start="51:18" pos:end="51:18">(</operator><operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:25">escape</name> <operator pos:start="51:27" pos:end="51:27">+</operator> <name pos:start="51:29" pos:end="51:32">flag</name><operator pos:start="51:33" pos:end="51:33">)</operator> <operator pos:start="51:35" pos:end="51:35">&amp;</operator> <literal type="number" pos:start="51:37" pos:end="51:37">1</literal><operator pos:start="51:38" pos:end="51:38">)</operator> <operator pos:start="51:40" pos:end="51:40">|</operator> <literal type="number" pos:start="51:42" pos:end="51:42">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">dst</name><index pos:start="53:12" pos:end="53:16">[<expr pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:13">j</name><operator pos:start="53:14" pos:end="53:15">++</operator></expr>]</index></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <name pos:start="53:20" pos:end="53:24">value</name> <operator pos:start="53:26" pos:end="53:26">*</operator> <operator pos:start="53:28" pos:end="53:28">(</operator><operator pos:start="53:29" pos:end="53:29">(</operator><name pos:start="53:30" pos:end="53:35">escape</name> <operator pos:start="53:37" pos:end="53:37">+</operator> <name pos:start="53:39" pos:end="53:42">flag</name> <operator pos:start="53:44" pos:end="53:44">+</operator> <literal type="number" pos:start="53:46" pos:end="53:46">1</literal><operator pos:start="53:47" pos:end="53:47">)</operator> <operator pos:start="53:49" pos:end="53:50">&gt;&gt;</operator> <literal type="number" pos:start="53:52" pos:end="53:52">1</literal><operator pos:start="53:53" pos:end="53:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">i</name><operator pos:start="55:10" pos:end="55:11">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:23">(<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:13">j</name> <operator pos:start="57:15" pos:end="57:16">==</operator> <name pos:start="57:18" pos:end="57:22">width</name></expr>)</condition> <block pos:start="57:25" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:26">

            <expr_stmt pos:start="59:13" pos:end="59:18"><expr pos:start="59:13" pos:end="59:17"><name pos:start="59:13" pos:end="59:13">j</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <literal type="number" pos:start="59:17" pos:end="59:17">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:26"><expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:15">dst</name> <operator pos:start="61:17" pos:end="61:18">+=</operator> <name pos:start="61:20" pos:end="61:25">stride</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:67"><expr pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:13">state</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <literal type="number" pos:start="65:17" pos:end="65:19">120</literal> <operator pos:start="65:21" pos:end="65:21">*</operator> <operator pos:start="65:23" pos:end="65:23">(</operator><name pos:start="65:24" pos:end="65:29">escape</name> <operator pos:start="65:31" pos:end="65:31">+</operator> <name pos:start="65:33" pos:end="65:36">flag</name><operator pos:start="65:37" pos:end="65:37">)</operator> <operator pos:start="65:39" pos:end="65:39">+</operator> <name pos:start="65:41" pos:end="65:45">state</name> <operator pos:start="65:47" pos:end="65:47">-</operator> <operator pos:start="65:49" pos:end="65:49">(</operator><literal type="number" pos:start="65:50" pos:end="65:52">120</literal> <operator pos:start="65:54" pos:end="65:54">*</operator> <name pos:start="65:56" pos:end="65:60">state</name> <operator pos:start="65:62" pos:end="65:63">&gt;&gt;</operator> <literal type="number" pos:start="65:65" pos:end="65:65">8</literal><operator pos:start="65:66" pos:end="65:66">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:17"><expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:12">flag</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="73:21"><if pos:start="71:9" pos:end="73:21">if <condition pos:start="71:12" pos:end="71:42">(<expr pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:17">state</name> <operator pos:start="71:19" pos:end="71:19">*</operator> <literal type="number" pos:start="71:21" pos:end="71:21">4</literal> <operator pos:start="71:23" pos:end="71:23">&gt;</operator> <literal type="number" pos:start="71:25" pos:end="71:28">0xFF</literal> <operator pos:start="71:30" pos:end="71:31">||</operator> <name pos:start="71:33" pos:end="71:33">i</name> <operator pos:start="71:35" pos:end="71:36">&gt;=</operator> <name pos:start="71:38" pos:end="71:41">size</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:21"><block_content pos:start="73:13" pos:end="73:21">

            <continue pos:start="73:13" pos:end="73:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:71"><expr pos:start="77:9" pos:end="77:70"><name pos:start="77:9" pos:end="77:13">nbits</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <operator pos:start="77:17" pos:end="77:17">(</operator><operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:23">state</name> <operator pos:start="77:25" pos:end="77:25">+</operator> <literal type="number" pos:start="77:27" pos:end="77:27">8</literal><operator pos:start="77:28" pos:end="77:28">)</operator> <operator pos:start="77:30" pos:end="77:31">&gt;&gt;</operator> <literal type="number" pos:start="77:33" pos:end="77:33">5</literal><operator pos:start="77:34" pos:end="77:34">)</operator> <operator pos:start="77:36" pos:end="77:36">+</operator> <operator pos:start="77:38" pos:end="77:38">(</operator><ternary pos:start="77:39" pos:end="77:64"><condition pos:start="77:39" pos:end="77:45"><expr pos:start="77:39" pos:end="77:43"><name pos:start="77:39" pos:end="77:43">state</name></expr> ?</condition><then pos:start="77:47" pos:end="77:59"> <expr pos:start="77:47" pos:end="77:59"><call pos:start="77:47" pos:end="77:59"><name pos:start="77:47" pos:end="77:52">ff_clz</name><argument_list pos:start="77:53" pos:end="77:59">(<argument pos:start="77:54" pos:end="77:58"><expr pos:start="77:54" pos:end="77:58"><name pos:start="77:54" pos:end="77:58">state</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="77:61" pos:end="77:64">: <expr pos:start="77:63" pos:end="77:64"><literal type="number" pos:start="77:63" pos:end="77:64">32</literal></expr></else></ternary><operator pos:start="77:65" pos:end="77:65">)</operator> <operator pos:start="77:67" pos:end="77:67">-</operator> <literal type="number" pos:start="77:69" pos:end="77:70">24</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:45"><expr pos:start="79:9" pos:end="79:44"><name pos:start="79:9" pos:end="79:14">escape</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:44"><name pos:start="79:18" pos:end="79:30">av_mod_uintp2</name><argument_list pos:start="79:31" pos:end="79:44">(<argument pos:start="79:32" pos:end="79:36"><expr pos:start="79:32" pos:end="79:36"><literal type="number" pos:start="79:32" pos:end="79:36">16383</literal></expr></argument>, <argument pos:start="79:39" pos:end="79:43"><expr pos:start="79:39" pos:end="79:43"><name pos:start="79:39" pos:end="79:43">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:12">cnt1</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="81:33"><name pos:start="81:16" pos:end="81:24">get_unary</name><argument_list pos:start="81:25" pos:end="81:33">(<argument pos:start="81:26" pos:end="81:26"><expr pos:start="81:26" pos:end="81:26"><name pos:start="81:26" pos:end="81:26">b</name></expr></argument>, <argument pos:start="81:29" pos:end="81:29"><expr pos:start="81:29" pos:end="81:29"><literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr></argument>, <argument pos:start="81:32" pos:end="81:32"><expr pos:start="81:32" pos:end="81:32"><literal type="number" pos:start="81:32" pos:end="81:32">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="105:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:21">(<expr pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:16">cnt1</name> <operator pos:start="83:18" pos:end="83:18">&gt;</operator> <literal type="number" pos:start="83:20" pos:end="83:20">7</literal></expr>)</condition> <block pos:start="83:23" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:35">

            <expr_stmt pos:start="85:13" pos:end="85:35"><expr pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:16">rlen</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:34"><name pos:start="85:20" pos:end="85:27">get_bits</name><argument_list pos:start="85:28" pos:end="85:34">(<argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">b</name></expr></argument>, <argument pos:start="85:32" pos:end="85:33"><expr pos:start="85:32" pos:end="85:33"><literal type="number" pos:start="85:32" pos:end="85:33">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="105:9">else <block pos:start="87:16" pos:end="105:9">{<block_content pos:start="89:13" pos:end="103:13">

            <expr_stmt pos:start="89:13" pos:end="89:40"><expr pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:17">value</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <call pos:start="89:21" pos:end="89:39"><name pos:start="89:21" pos:end="89:29">show_bits</name><argument_list pos:start="89:30" pos:end="89:39">(<argument pos:start="89:31" pos:end="89:31"><expr pos:start="89:31" pos:end="89:31"><name pos:start="89:31" pos:end="89:31">b</name></expr></argument>, <argument pos:start="89:34" pos:end="89:38"><expr pos:start="89:34" pos:end="89:38"><name pos:start="89:34" pos:end="89:38">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="103:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:26">(<expr pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:21">value</name> <operator pos:start="91:23" pos:end="91:23">&gt;</operator> <literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>)</condition> <block pos:start="91:28" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:49">

                <expr_stmt pos:start="93:17" pos:end="93:36"><expr pos:start="93:17" pos:end="93:35"><call pos:start="93:17" pos:end="93:35"><name pos:start="93:17" pos:end="93:25">skip_bits</name><argument_list pos:start="93:26" pos:end="93:35">(<argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">b</name></expr></argument>, <argument pos:start="93:30" pos:end="93:34"><expr pos:start="93:30" pos:end="93:34"><name pos:start="93:30" pos:end="93:34">nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:49"><expr pos:start="95:17" pos:end="95:48"><name pos:start="95:17" pos:end="95:20">rlen</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:28">value</name> <operator pos:start="95:30" pos:end="95:30">+</operator> <name pos:start="95:32" pos:end="95:37">escape</name> <operator pos:start="95:39" pos:end="95:39">*</operator> <name pos:start="95:41" pos:end="95:44">cnt1</name> <operator pos:start="95:46" pos:end="95:46">-</operator> <literal type="number" pos:start="95:48" pos:end="95:48">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="103:13">else <block pos:start="97:20" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:37">

                <expr_stmt pos:start="99:17" pos:end="99:40"><expr pos:start="99:17" pos:end="99:39"><call pos:start="99:17" pos:end="99:39"><name pos:start="99:17" pos:end="99:25">skip_bits</name><argument_list pos:start="99:26" pos:end="99:39">(<argument pos:start="99:27" pos:end="99:27"><expr pos:start="99:27" pos:end="99:27"><name pos:start="99:27" pos:end="99:27">b</name></expr></argument>, <argument pos:start="99:30" pos:end="99:38"><expr pos:start="99:30" pos:end="99:38"><name pos:start="99:30" pos:end="99:34">nbits</name> <operator pos:start="99:36" pos:end="99:36">-</operator> <literal type="number" pos:start="99:38" pos:end="99:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:37"><expr pos:start="101:17" pos:end="101:36"><name pos:start="101:17" pos:end="101:20">rlen</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:29">escape</name> <operator pos:start="101:31" pos:end="101:31">*</operator> <name pos:start="101:33" pos:end="101:36">cnt1</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="109:9" pos:end="111:39"><if pos:start="109:9" pos:end="111:39">if <condition pos:start="109:12" pos:end="109:28">(<expr pos:start="109:13" pos:end="109:27"><name pos:start="109:13" pos:end="109:16">rlen</name> <operator pos:start="109:18" pos:end="109:18">&gt;</operator> <name pos:start="109:20" pos:end="109:23">size</name> <operator pos:start="109:25" pos:end="109:25">-</operator> <name pos:start="109:27" pos:end="109:27">i</name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:39"><block_content pos:start="111:13" pos:end="111:39">

            <return pos:start="111:13" pos:end="111:39">return <expr pos:start="111:20" pos:end="111:38"><name pos:start="111:20" pos:end="111:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:18"><expr pos:start="113:9" pos:end="113:17"><name pos:start="113:9" pos:end="113:9">i</name> <operator pos:start="113:11" pos:end="113:12">+=</operator> <name pos:start="113:14" pos:end="113:17">rlen</name></expr>;</expr_stmt>



        <for pos:start="117:9" pos:end="129:9">for <control pos:start="117:13" pos:end="117:34">(<init pos:start="117:14" pos:end="117:19"><expr pos:start="117:14" pos:end="117:18"><name pos:start="117:14" pos:end="117:14">k</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</init> <condition pos:start="117:21" pos:end="117:29"><expr pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:21">k</name> <operator pos:start="117:23" pos:end="117:23">&lt;</operator> <name pos:start="117:25" pos:end="117:28">rlen</name></expr>;</condition> <incr pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:31">k</name><operator pos:start="117:32" pos:end="117:33">++</operator></expr></incr>)</control> <block pos:start="117:36" pos:end="129:9">{<block_content pos:start="119:13" pos:end="127:13">

            <expr_stmt pos:start="119:13" pos:end="119:25"><expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:15">dst</name><index pos:start="119:16" pos:end="119:20">[<expr pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:17">j</name><operator pos:start="119:18" pos:end="119:19">++</operator></expr>]</index></name> <operator pos:start="119:22" pos:end="119:22">=</operator> <literal type="number" pos:start="119:24" pos:end="119:24">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="127:13"><if pos:start="121:13" pos:end="127:13">if <condition pos:start="121:16" pos:end="121:27">(<expr pos:start="121:17" pos:end="121:26"><name pos:start="121:17" pos:end="121:17">j</name> <operator pos:start="121:19" pos:end="121:20">==</operator> <name pos:start="121:22" pos:end="121:26">width</name></expr>)</condition> <block pos:start="121:29" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:30">

                <expr_stmt pos:start="123:17" pos:end="123:22"><expr pos:start="123:17" pos:end="123:21"><name pos:start="123:17" pos:end="123:17">j</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <literal type="number" pos:start="123:21" pos:end="123:21">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:30"><expr pos:start="125:17" pos:end="125:29"><name pos:start="125:17" pos:end="125:19">dst</name> <operator pos:start="125:21" pos:end="125:22">+=</operator> <name pos:start="125:24" pos:end="125:29">stride</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">state</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <literal type="number" pos:start="133:17" pos:end="133:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:37"><expr pos:start="135:9" pos:end="135:36"><name pos:start="135:9" pos:end="135:12">flag</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <ternary pos:start="135:16" pos:end="135:36"><condition pos:start="135:16" pos:end="135:30"><expr pos:start="135:16" pos:end="135:28"><name pos:start="135:16" pos:end="135:19">rlen</name> <operator pos:start="135:21" pos:end="135:21">&lt;</operator> <literal type="number" pos:start="135:23" pos:end="135:28">0xFFFF</literal></expr> ?</condition><then pos:start="135:32" pos:end="135:32"> <expr pos:start="135:32" pos:end="135:32"><literal type="number" pos:start="135:32" pos:end="135:32">1</literal></expr> </then><else pos:start="135:34" pos:end="135:36">: <expr pos:start="135:36" pos:end="135:36"><literal type="number" pos:start="135:36" pos:end="135:36">0</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="141:5" pos:end="141:22"><expr pos:start="141:5" pos:end="141:21"><call pos:start="141:5" pos:end="141:21"><name pos:start="141:5" pos:end="141:18">align_get_bits</name><argument_list pos:start="141:19" pos:end="141:21">(<argument pos:start="141:20" pos:end="141:20"><expr pos:start="141:20" pos:end="141:20"><name pos:start="141:20" pos:end="141:20">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:34">return <expr pos:start="143:12" pos:end="143:33"><call pos:start="143:12" pos:end="143:28"><name pos:start="143:12" pos:end="143:25">get_bits_count</name><argument_list pos:start="143:26" pos:end="143:28">(<argument pos:start="143:27" pos:end="143:27"><expr pos:start="143:27" pos:end="143:27"><name pos:start="143:27" pos:end="143:27">b</name></expr></argument>)</argument_list></call> <operator pos:start="143:30" pos:end="143:31">&gt;&gt;</operator> <literal type="number" pos:start="143:33" pos:end="143:33">3</literal></expr>;</return>

</block_content>}</block></function>
</unit>
