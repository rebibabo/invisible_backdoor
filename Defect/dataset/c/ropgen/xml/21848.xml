<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21848.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">tap_open</name><parameter_list pos:start="1:13" pos:end="3:52">(<parameter pos:start="1:14" pos:end="1:25"><decl pos:start="1:14" pos:end="1:25"><type pos:start="1:14" pos:end="1:25"><name pos:start="1:14" pos:end="1:17">char</name> <modifier pos:start="1:19" pos:end="1:19">*</modifier></type><name pos:start="1:20" pos:end="1:25">ifname</name></decl></parameter>, <parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:42">ifname_size</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:47">int</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:57">vnet_hdr</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:34"><decl pos:start="3:14" pos:end="3:34"><type pos:start="3:14" pos:end="3:34"><name pos:start="3:14" pos:end="3:16">int</name></type> <name pos:start="3:18" pos:end="3:34">vnet_hdr_required</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:51"><decl pos:start="3:37" pos:end="3:51"><type pos:start="3:37" pos:end="3:51"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:51">mq_required</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:14">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">ifreq</name></name></type> <name pos:start="7:18" pos:end="7:20">ifr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name></decl>, <decl pos:start="9:13" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name> <init pos:start="11:13" pos:end="11:43">= <expr pos:start="11:15" pos:end="11:43"><sizeof pos:start="11:15" pos:end="11:43">sizeof<argument_list pos:start="11:21" pos:end="11:43">(<argument pos:start="11:22" pos:end="11:42"><expr pos:start="11:22" pos:end="11:42">struct <name pos:start="11:29" pos:end="11:42">virtio_net_hdr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:7">TFR</name><argument_list pos:start="15:8" pos:end="15:40">(<argument pos:start="15:9" pos:end="15:39"><expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:10">fd</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:39"><name pos:start="15:14" pos:end="15:17">open</name><argument_list pos:start="15:18" pos:end="15:39">(<argument pos:start="15:19" pos:end="15:30"><expr pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:30">PATH_NET_TUN</name></expr></argument>, <argument pos:start="15:33" pos:end="15:38"><expr pos:start="15:33" pos:end="15:38"><name pos:start="15:33" pos:end="15:38">O_RDWR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:10">fd</name> <operator pos:start="17:12" pos:end="17:12">&lt;</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>)</condition> <block pos:start="17:17" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:60"><expr pos:start="19:9" pos:end="19:59"><call pos:start="19:9" pos:end="19:59"><name pos:start="19:9" pos:end="19:20">error_report</name><argument_list pos:start="19:21" pos:end="19:59">(<argument pos:start="19:22" pos:end="19:44"><expr pos:start="19:22" pos:end="19:44"><literal type="string" pos:start="19:22" pos:end="19:44">"could not open %s: %m"</literal></expr></argument>, <argument pos:start="19:47" pos:end="19:58"><expr pos:start="19:47" pos:end="19:58"><name pos:start="19:47" pos:end="19:58">PATH_NET_TUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><call pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:10">memset</name><argument_list pos:start="25:11" pos:end="25:32">(<argument pos:start="25:12" pos:end="25:15"><expr pos:start="25:12" pos:end="25:15"><operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:15">ifr</name></expr></argument>, <argument pos:start="25:18" pos:end="25:18"><expr pos:start="25:18" pos:end="25:18"><literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr></argument>, <argument pos:start="25:21" pos:end="25:31"><expr pos:start="25:21" pos:end="25:31"><sizeof pos:start="25:21" pos:end="25:31">sizeof<argument_list pos:start="25:27" pos:end="25:31">(<argument pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:30">ifr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">ifr</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:17">ifr_flags</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:27">IFF_TAP</name> <operator pos:start="27:29" pos:end="27:29">|</operator> <name pos:start="27:31" pos:end="27:39">IFF_NO_PI</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="79:5"><if pos:start="31:5" pos:end="79:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:17">vnet_hdr</name></expr>)</condition> <block pos:start="31:20" pos:end="79:5">{<block_content pos:start="33:9" pos:end="77:41">

        <decl_stmt pos:start="33:9" pos:end="33:30"><decl pos:start="33:9" pos:end="33:29"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:16">unsigned</name> <name pos:start="33:18" pos:end="33:20">int</name></type> <name pos:start="33:22" pos:end="33:29">features</name></decl>;</decl_stmt>



        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="39:36">(<expr pos:start="37:13" pos:end="39:35"><call pos:start="37:13" pos:end="37:48"><name pos:start="37:13" pos:end="37:17">ioctl</name><argument_list pos:start="37:18" pos:end="37:48">(<argument pos:start="37:19" pos:end="37:20"><expr pos:start="37:19" pos:end="37:20"><name pos:start="37:19" pos:end="37:20">fd</name></expr></argument>, <argument pos:start="37:23" pos:end="37:36"><expr pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:36">TUNGETFEATURES</name></expr></argument>, <argument pos:start="37:39" pos:end="37:47"><expr pos:start="37:39" pos:end="37:47"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:47">features</name></expr></argument>)</argument_list></call> <operator pos:start="37:50" pos:end="37:51">==</operator> <literal type="number" pos:start="37:53" pos:end="37:53">0</literal> <operator pos:start="37:55" pos:end="37:56">&amp;&amp;</operator>

            <name pos:start="39:13" pos:end="39:20">features</name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <name pos:start="39:24" pos:end="39:35">IFF_VNET_HDR</name></expr>)</condition> <block pos:start="39:38" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:42">

            <expr_stmt pos:start="41:13" pos:end="41:26"><expr pos:start="41:13" pos:end="41:25"><operator pos:start="41:13" pos:end="41:13">*</operator><name pos:start="41:14" pos:end="41:21">vnet_hdr</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <literal type="number" pos:start="41:25" pos:end="41:25">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:42"><expr pos:start="43:13" pos:end="43:41"><name pos:start="43:13" pos:end="43:25"><name pos:start="43:13" pos:end="43:15">ifr</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:25">ifr_flags</name></name> <operator pos:start="43:27" pos:end="43:28">|=</operator> <name pos:start="43:30" pos:end="43:41">IFF_VNET_HDR</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:26">

            <expr_stmt pos:start="47:13" pos:end="47:26"><expr pos:start="47:13" pos:end="47:25"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:21">vnet_hdr</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="53:9" pos:end="63:9"><if pos:start="53:9" pos:end="63:9">if <condition pos:start="53:12" pos:end="53:44">(<expr pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:29">vnet_hdr_required</name> <operator pos:start="53:31" pos:end="53:32">&amp;&amp;</operator> <operator pos:start="53:34" pos:end="53:34">!</operator><operator pos:start="53:35" pos:end="53:35">*</operator><name pos:start="53:36" pos:end="53:43">vnet_hdr</name></expr>)</condition> <block pos:start="53:46" pos:end="63:9">{<block_content pos:start="55:13" pos:end="61:22">

            <expr_stmt pos:start="55:13" pos:end="57:63"><expr pos:start="55:13" pos:end="57:62"><call pos:start="55:13" pos:end="57:62"><name pos:start="55:13" pos:end="55:24">error_report</name><argument_list pos:start="55:25" pos:end="57:62">(<argument pos:start="55:26" pos:end="57:61"><expr pos:start="55:26" pos:end="57:61"><literal type="string" pos:start="55:26" pos:end="55:63">"vnet_hdr=1 requested, but no kernel "</literal>

                         <literal type="string" pos:start="57:26" pos:end="57:61">"support for IFF_VNET_HDR available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:22"><expr pos:start="59:13" pos:end="59:21"><call pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:17">close</name><argument_list pos:start="59:18" pos:end="59:21">(<argument pos:start="59:19" pos:end="59:20"><expr pos:start="59:19" pos:end="59:20"><name pos:start="59:19" pos:end="59:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="65:9" pos:end="75:11">/*

         * Make sure vnet header size has the default value: for a persistent

         * tap it might have been modified e.g. by another instance of qemu.

         * Ignore errors since old kernels do not support this ioctl: in this

         * case the header size implicitly has the correct value.

         */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:13">ioctl</name><argument_list pos:start="77:14" pos:end="77:40">(<argument pos:start="77:15" pos:end="77:16"><expr pos:start="77:15" pos:end="77:16"><name pos:start="77:15" pos:end="77:16">fd</name></expr></argument>, <argument pos:start="77:19" pos:end="77:33"><expr pos:start="77:19" pos:end="77:33"><name pos:start="77:19" pos:end="77:33">TUNSETVNETHDRSZ</name></expr></argument>, <argument pos:start="77:36" pos:end="77:39"><expr pos:start="77:36" pos:end="77:39"><operator pos:start="77:36" pos:end="77:36">&amp;</operator><name pos:start="77:37" pos:end="77:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="107:5"><if pos:start="83:5" pos:end="107:5">if <condition pos:start="83:8" pos:end="83:20">(<expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:19">mq_required</name></expr>)</condition> <block pos:start="83:22" pos:end="107:5">{<block_content pos:start="85:9" pos:end="105:9">

        <decl_stmt pos:start="85:9" pos:end="85:30"><decl pos:start="85:9" pos:end="85:29"><type pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:16">unsigned</name> <name pos:start="85:18" pos:end="85:20">int</name></type> <name pos:start="85:22" pos:end="85:29">features</name></decl>;</decl_stmt>



        <if_stmt pos:start="89:9" pos:end="105:9"><if pos:start="89:9" pos:end="101:9">if <condition pos:start="89:12" pos:end="91:42">(<expr pos:start="89:13" pos:end="91:41"><operator pos:start="89:13" pos:end="89:13">(</operator><call pos:start="89:14" pos:end="89:49"><name pos:start="89:14" pos:end="89:18">ioctl</name><argument_list pos:start="89:19" pos:end="89:49">(<argument pos:start="89:20" pos:end="89:21"><expr pos:start="89:20" pos:end="89:21"><name pos:start="89:20" pos:end="89:21">fd</name></expr></argument>, <argument pos:start="89:24" pos:end="89:37"><expr pos:start="89:24" pos:end="89:37"><name pos:start="89:24" pos:end="89:37">TUNGETFEATURES</name></expr></argument>, <argument pos:start="89:40" pos:end="89:48"><expr pos:start="89:40" pos:end="89:48"><operator pos:start="89:40" pos:end="89:40">&amp;</operator><name pos:start="89:41" pos:end="89:48">features</name></expr></argument>)</argument_list></call> <operator pos:start="89:51" pos:end="89:52">!=</operator> <literal type="number" pos:start="89:54" pos:end="89:54">0</literal><operator pos:start="89:55" pos:end="89:55">)</operator> <operator pos:start="89:57" pos:end="89:58">||</operator>

            <operator pos:start="91:13" pos:end="91:13">!</operator><operator pos:start="91:14" pos:end="91:14">(</operator><name pos:start="91:15" pos:end="91:22">features</name> <operator pos:start="91:24" pos:end="91:24">&amp;</operator> <name pos:start="91:26" pos:end="91:40">IFF_MULTI_QUEUE</name><operator pos:start="91:41" pos:end="91:41">)</operator></expr>)</condition> <block pos:start="91:44" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:22">

            <expr_stmt pos:start="93:13" pos:end="95:66"><expr pos:start="93:13" pos:end="95:65"><call pos:start="93:13" pos:end="95:65"><name pos:start="93:13" pos:end="93:24">error_report</name><argument_list pos:start="93:25" pos:end="95:65">(<argument pos:start="93:26" pos:end="95:64"><expr pos:start="93:26" pos:end="95:64"><literal type="string" pos:start="93:26" pos:end="93:62">"multiqueue required, but no kernel "</literal>

                         <literal type="string" pos:start="95:26" pos:end="95:64">"support for IFF_MULTI_QUEUE available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><call pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:17">close</name><argument_list pos:start="97:18" pos:end="97:21">(<argument pos:start="97:19" pos:end="97:20"><expr pos:start="97:19" pos:end="97:20"><name pos:start="97:19" pos:end="97:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:22">return <expr pos:start="99:20" pos:end="99:21"><operator pos:start="99:20" pos:end="99:20">-</operator><literal type="number" pos:start="99:21" pos:end="99:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="105:9">else <block pos:start="101:16" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:45">

            <expr_stmt pos:start="103:13" pos:end="103:45"><expr pos:start="103:13" pos:end="103:44"><name pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:15">ifr</name><operator pos:start="103:16" pos:end="103:16">.</operator><name pos:start="103:17" pos:end="103:25">ifr_flags</name></name> <operator pos:start="103:27" pos:end="103:28">|=</operator> <name pos:start="103:30" pos:end="103:44">IFF_MULTI_QUEUE</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="117:49"><if pos:start="111:5" pos:end="113:48">if <condition pos:start="111:8" pos:end="111:26">(<expr pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:14">ifname</name><index pos:start="111:15" pos:end="111:17">[<expr pos:start="111:16" pos:end="111:16"><literal type="number" pos:start="111:16" pos:end="111:16">0</literal></expr>]</index></name> <operator pos:start="111:19" pos:end="111:20">!=</operator> <literal type="char" pos:start="111:22" pos:end="111:25">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:48"><block_content pos:start="113:9" pos:end="113:48">

        <expr_stmt pos:start="113:9" pos:end="113:48"><expr pos:start="113:9" pos:end="113:47"><call pos:start="113:9" pos:end="113:47"><name pos:start="113:9" pos:end="113:15">pstrcpy</name><argument_list pos:start="113:16" pos:end="113:47">(<argument pos:start="113:17" pos:end="113:28"><expr pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:28"><name pos:start="113:17" pos:end="113:19">ifr</name><operator pos:start="113:20" pos:end="113:20">.</operator><name pos:start="113:21" pos:end="113:28">ifr_name</name></name></expr></argument>, <argument pos:start="113:31" pos:end="113:38"><expr pos:start="113:31" pos:end="113:38"><name pos:start="113:31" pos:end="113:38">IFNAMSIZ</name></expr></argument>, <argument pos:start="113:41" pos:end="113:46"><expr pos:start="113:41" pos:end="113:46"><name pos:start="113:41" pos:end="113:46">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="115:5" pos:end="117:49">else<block type="pseudo" pos:start="117:9" pos:end="117:49"><block_content pos:start="117:9" pos:end="117:49">

        <expr_stmt pos:start="117:9" pos:end="117:49"><expr pos:start="117:9" pos:end="117:48"><call pos:start="117:9" pos:end="117:48"><name pos:start="117:9" pos:end="117:15">pstrcpy</name><argument_list pos:start="117:16" pos:end="117:48">(<argument pos:start="117:17" pos:end="117:28"><expr pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:19">ifr</name><operator pos:start="117:20" pos:end="117:20">.</operator><name pos:start="117:21" pos:end="117:28">ifr_name</name></name></expr></argument>, <argument pos:start="117:31" pos:end="117:38"><expr pos:start="117:31" pos:end="117:38"><name pos:start="117:31" pos:end="117:38">IFNAMSIZ</name></expr></argument>, <argument pos:start="117:41" pos:end="117:47"><expr pos:start="117:41" pos:end="117:47"><literal type="string" pos:start="117:41" pos:end="117:47">"tap%d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:46"><expr pos:start="119:5" pos:end="119:45"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:45"><name pos:start="119:11" pos:end="119:15">ioctl</name><argument_list pos:start="119:16" pos:end="119:45">(<argument pos:start="119:17" pos:end="119:18"><expr pos:start="119:17" pos:end="119:18"><name pos:start="119:17" pos:end="119:18">fd</name></expr></argument>, <argument pos:start="119:21" pos:end="119:29"><expr pos:start="119:21" pos:end="119:29"><name pos:start="119:21" pos:end="119:29">TUNSETIFF</name></expr></argument>, <argument pos:start="119:32" pos:end="119:44"><expr pos:start="119:32" pos:end="119:44"><operator pos:start="119:32" pos:end="119:32">(</operator><name pos:start="119:33" pos:end="119:36">void</name> <operator pos:start="119:38" pos:end="119:38">*</operator><operator pos:start="119:39" pos:end="119:39">)</operator> <operator pos:start="119:41" pos:end="119:41">&amp;</operator><name pos:start="119:42" pos:end="119:44">ifr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="137:5"><if pos:start="121:5" pos:end="137:5">if <condition pos:start="121:8" pos:end="121:17">(<expr pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:14">!=</operator> <literal type="number" pos:start="121:16" pos:end="121:16">0</literal></expr>)</condition> <block pos:start="121:19" pos:end="137:5">{<block_content pos:start="123:9" pos:end="135:18">

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:30">(<expr pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:18">ifname</name><index pos:start="123:19" pos:end="123:21">[<expr pos:start="123:20" pos:end="123:20"><literal type="number" pos:start="123:20" pos:end="123:20">0</literal></expr>]</index></name> <operator pos:start="123:23" pos:end="123:24">!=</operator> <literal type="char" pos:start="123:26" pos:end="123:29">'\0'</literal></expr>)</condition> <block pos:start="123:32" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:88">

            <expr_stmt pos:start="125:13" pos:end="125:88"><expr pos:start="125:13" pos:end="125:87"><call pos:start="125:13" pos:end="125:87"><name pos:start="125:13" pos:end="125:24">error_report</name><argument_list pos:start="125:25" pos:end="125:87">(<argument pos:start="125:26" pos:end="125:58"><expr pos:start="125:26" pos:end="125:58"><literal type="string" pos:start="125:26" pos:end="125:58">"could not configure %s (%s): %m"</literal></expr></argument>, <argument pos:start="125:61" pos:end="125:72"><expr pos:start="125:61" pos:end="125:72"><name pos:start="125:61" pos:end="125:72">PATH_NET_TUN</name></expr></argument>, <argument pos:start="125:75" pos:end="125:86"><expr pos:start="125:75" pos:end="125:86"><name pos:start="125:75" pos:end="125:86"><name pos:start="125:75" pos:end="125:77">ifr</name><operator pos:start="125:78" pos:end="125:78">.</operator><name pos:start="125:79" pos:end="125:86">ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="131:9">else <block pos:start="127:16" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:69">

            <expr_stmt pos:start="129:13" pos:end="129:69"><expr pos:start="129:13" pos:end="129:68"><call pos:start="129:13" pos:end="129:68"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:68">(<argument pos:start="129:26" pos:end="129:53"><expr pos:start="129:26" pos:end="129:53"><literal type="string" pos:start="129:26" pos:end="129:53">"could not configure %s: %m"</literal></expr></argument>, <argument pos:start="129:56" pos:end="129:67"><expr pos:start="129:56" pos:end="129:67"><name pos:start="129:56" pos:end="129:67">PATH_NET_TUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><call pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">close</name><argument_list pos:start="133:14" pos:end="133:17">(<argument pos:start="133:15" pos:end="133:16"><expr pos:start="133:15" pos:end="133:16"><name pos:start="133:15" pos:end="133:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:18">return <expr pos:start="135:16" pos:end="135:17"><operator pos:start="135:16" pos:end="135:16">-</operator><literal type="number" pos:start="135:17" pos:end="135:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:47"><expr pos:start="139:5" pos:end="139:46"><call pos:start="139:5" pos:end="139:46"><name pos:start="139:5" pos:end="139:11">pstrcpy</name><argument_list pos:start="139:12" pos:end="139:46">(<argument pos:start="139:13" pos:end="139:18"><expr pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:18">ifname</name></expr></argument>, <argument pos:start="139:21" pos:end="139:31"><expr pos:start="139:21" pos:end="139:31"><name pos:start="139:21" pos:end="139:31">ifname_size</name></expr></argument>, <argument pos:start="139:34" pos:end="139:45"><expr pos:start="139:34" pos:end="139:45"><name pos:start="139:34" pos:end="139:45"><name pos:start="139:34" pos:end="139:36">ifr</name><operator pos:start="139:37" pos:end="139:37">.</operator><name pos:start="139:38" pos:end="139:45">ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:35"><expr pos:start="141:5" pos:end="141:34"><call pos:start="141:5" pos:end="141:34"><name pos:start="141:5" pos:end="141:9">fcntl</name><argument_list pos:start="141:10" pos:end="141:34">(<argument pos:start="141:11" pos:end="141:12"><expr pos:start="141:11" pos:end="141:12"><name pos:start="141:11" pos:end="141:12">fd</name></expr></argument>, <argument pos:start="141:15" pos:end="141:21"><expr pos:start="141:15" pos:end="141:21"><name pos:start="141:15" pos:end="141:21">F_SETFL</name></expr></argument>, <argument pos:start="141:24" pos:end="141:33"><expr pos:start="141:24" pos:end="141:33"><name pos:start="141:24" pos:end="141:33">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:14">return <expr pos:start="143:12" pos:end="143:13"><name pos:start="143:12" pos:end="143:13">fd</name></expr>;</return>

</block_content>}</block></function>
</unit>
