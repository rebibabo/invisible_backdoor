<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2686.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">long</name></type> <name pos:start="1:13" pos:end="1:26">getrampagesize</name><parameter_list pos:start="1:27" pos:end="1:32">(<parameter pos:start="1:28" pos:end="1:31"><decl pos:start="1:28" pos:end="1:31"><type pos:start="1:28" pos:end="1:31"><name pos:start="1:28" pos:end="1:31">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:18">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">long</name></type> <name pos:start="5:10" pos:end="5:15">hpsize</name> <init pos:start="5:17" pos:end="5:26">= <expr pos:start="5:19" pos:end="5:26"><name pos:start="5:19" pos:end="5:26">LONG_MAX</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">Object</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:23">memdev_root</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:17">(<expr pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">mem_path</name></expr>)</condition> <block pos:start="11:19" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:41">

        <return pos:start="13:9" pos:end="13:41">return <expr pos:start="13:16" pos:end="13:40"><call pos:start="13:16" pos:end="13:40"><name pos:start="13:16" pos:end="13:30">gethugepagesize</name><argument_list pos:start="13:31" pos:end="13:40">(<argument pos:start="13:32" pos:end="13:39"><expr pos:start="13:32" pos:end="13:39"><name pos:start="13:32" pos:end="13:39">mem_path</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="37:7">/* it's possible we have memory-backend objects with

     * hugepage-backed RAM. these may get mapped into system

     * address space via -numa parameters or memory hotplug

     * hooks. we want to take these into account, but we

     * also want to make sure these supported hugepage

     * sizes are applicable across the entire range of memory

     * we may boot from, so we take the min across all

     * backends, and assume normal pages in cases where a

     * backend isn't backed by hugepages.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:56"><expr pos:start="39:5" pos:end="39:55"><name pos:start="39:5" pos:end="39:15">memdev_root</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:55"><name pos:start="39:19" pos:end="39:37">object_resolve_path</name><argument_list pos:start="39:38" pos:end="39:55">(<argument pos:start="39:39" pos:end="39:48"><expr pos:start="39:39" pos:end="39:48"><literal type="string" pos:start="39:39" pos:end="39:48">"/objects"</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:54"><expr pos:start="39:51" pos:end="39:54"><name pos:start="39:51" pos:end="39:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:21">(<expr pos:start="41:9" pos:end="41:20"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:20">memdev_root</name></expr>)</condition> <block pos:start="41:23" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:29">

        <return pos:start="43:9" pos:end="43:29">return <expr pos:start="43:16" pos:end="43:28"><call pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:26">getpagesize</name><argument_list pos:start="43:27" pos:end="43:28">()</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:76"><expr pos:start="49:5" pos:end="49:75"><call pos:start="49:5" pos:end="49:75"><name pos:start="49:5" pos:end="49:24">object_child_foreach</name><argument_list pos:start="49:25" pos:end="49:75">(<argument pos:start="49:26" pos:end="49:36"><expr pos:start="49:26" pos:end="49:36"><name pos:start="49:26" pos:end="49:36">memdev_root</name></expr></argument>, <argument pos:start="49:39" pos:end="49:65"><expr pos:start="49:39" pos:end="49:65"><name pos:start="49:39" pos:end="49:65">find_max_supported_pagesize</name></expr></argument>, <argument pos:start="49:68" pos:end="49:74"><expr pos:start="49:68" pos:end="49:74"><operator pos:start="49:68" pos:end="49:68">&amp;</operator><name pos:start="49:69" pos:end="49:74">hpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:14">hpsize</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <name pos:start="53:19" pos:end="53:26">LONG_MAX</name></expr>)</condition> <block pos:start="53:29" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:29">

        <return pos:start="55:9" pos:end="55:29">return <expr pos:start="55:16" pos:end="55:28"><call pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:26">getpagesize</name><argument_list pos:start="55:27" pos:end="55:28">()</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="77:5"><if pos:start="61:5" pos:end="77:5">if <condition pos:start="61:8" pos:end="61:53">(<expr pos:start="61:9" pos:end="61:52"><name pos:start="61:9" pos:end="61:21">nb_numa_nodes</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal> <operator pos:start="61:28" pos:end="61:29">&amp;&amp;</operator> <name pos:start="61:31" pos:end="61:36">hpsize</name> <operator pos:start="61:38" pos:end="61:38">&gt;</operator> <call pos:start="61:40" pos:end="61:52"><name pos:start="61:40" pos:end="61:50">getpagesize</name><argument_list pos:start="61:51" pos:end="61:52">()</argument_list></call></expr>)</condition> <block pos:start="61:55" pos:end="77:5">{<block_content pos:start="65:9" pos:end="75:29">

        <comment type="block" pos:start="63:9" pos:end="63:79">/* No NUMA nodes and normal RAM without -mem-path ==&gt; no huge pages! */</comment>

        <decl_stmt pos:start="65:9" pos:end="65:27"><decl pos:start="65:9" pos:end="65:26"><type pos:start="65:9" pos:end="65:19"><specifier pos:start="65:9" pos:end="65:14">static</specifier> <name pos:start="65:16" pos:end="65:19">bool</name></type> <name pos:start="65:21" pos:end="65:26">warned</name></decl>;</decl_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:19">warned</name></expr>)</condition> <block pos:start="67:22" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:26">

            <expr_stmt pos:start="69:13" pos:end="69:78"><expr pos:start="69:13" pos:end="69:77"><call pos:start="69:13" pos:end="69:77"><name pos:start="69:13" pos:end="69:24">error_report</name><argument_list pos:start="69:25" pos:end="69:77">(<argument pos:start="69:26" pos:end="69:76"><expr pos:start="69:26" pos:end="69:76"><literal type="string" pos:start="69:26" pos:end="69:76">"Huge page support disabled (n/a for main memory)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:26"><expr pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:18">warned</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:25">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="75:9" pos:end="75:29">return <expr pos:start="75:16" pos:end="75:28"><call pos:start="75:16" pos:end="75:28"><name pos:start="75:16" pos:end="75:26">getpagesize</name><argument_list pos:start="75:27" pos:end="75:28">()</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:18">return <expr pos:start="81:12" pos:end="81:17"><name pos:start="81:12" pos:end="81:17">hpsize</name></expr>;</return>

</block_content>}</block></function>
</unit>
