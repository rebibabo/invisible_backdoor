<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13593.c" pos:tabs="8"><function pos:start="1:1" pos:end="2695:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name><parameter_list pos:start="1:9" pos:end="1:44">(<parameter pos:start="1:10" pos:end="1:17"><decl pos:start="1:10" pos:end="1:17"><type pos:start="1:10" pos:end="1:17"><name pos:start="1:10" pos:end="1:12">int</name></type> <name pos:start="1:14" pos:end="1:17">argc</name></decl></parameter>, <parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:23">char</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier><modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:30">argv</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">envp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="2695:1">{<block_content pos:start="5:5" pos:end="2693:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:27">gdbstub_dev</name> <init pos:start="5:29" pos:end="5:34">= <expr pos:start="5:31" pos:end="5:34"><name pos:start="5:31" pos:end="5:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">snapshot</name></decl>, <decl pos:start="9:19" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:28">linux_boot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:29">icount_option</name> <init pos:start="11:31" pos:end="11:36">= <expr pos:start="11:33" pos:end="11:36"><name pos:start="11:33" pos:end="11:36">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:31">kernel_filename</name></decl>, <decl pos:start="15:34" pos:end="15:48"><type ref="prev" pos:start="15:5" pos:end="15:16"><modifier pos:start="15:34" pos:end="15:34">*</modifier></type><name pos:start="15:35" pos:end="15:48">kernel_cmdline</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:25"><name pos:start="17:10" pos:end="17:21">boot_devices</name><index pos:start="17:22" pos:end="17:25">[<expr pos:start="17:23" pos:end="17:24"><literal type="number" pos:start="17:23" pos:end="17:24">33</literal></expr>]</index></name> <init pos:start="17:27" pos:end="17:33">= <expr pos:start="17:29" pos:end="17:33"><literal type="string" pos:start="17:29" pos:end="17:33">"cad"</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:36" pos:end="17:70">/* default to HD-&gt;floppy-&gt;CD-ROM */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">DisplayState</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:20">ds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:27"><name pos:start="21:5" pos:end="21:25">DisplayChangeListener</name> <modifier pos:start="21:27" pos:end="21:27">*</modifier></type><name pos:start="21:28" pos:end="21:30">dcl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">cyls</name></decl>, <decl pos:start="23:15" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:19">heads</name></decl>, <decl pos:start="23:22" pos:end="23:25"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:22" pos:end="23:25">secs</name></decl>, <decl pos:start="23:28" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:28" pos:end="23:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">QemuOpts</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:22">hda_opts</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>, <decl pos:start="25:32" pos:end="25:36"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:32" pos:end="25:32">*</modifier></type><name pos:start="25:33" pos:end="25:36">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">QemuOptsList</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:23">olist</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:15"><decl pos:start="29:5" pos:end="29:14"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:14">optind</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:22">optarg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:30"><decl pos:start="33:5" pos:end="33:29"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:22">loadvm</name> <init pos:start="33:24" pos:end="33:29">= <expr pos:start="33:26" pos:end="33:29"><name pos:start="33:26" pos:end="33:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:25"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:15">QEMUMachine</name> <modifier pos:start="35:17" pos:end="35:17">*</modifier></type><name pos:start="35:18" pos:end="35:24">machine</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:26"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:16"><specifier pos:start="37:5" pos:end="37:9">const</specifier> <name pos:start="37:11" pos:end="37:14">char</name> <modifier pos:start="37:16" pos:end="37:16">*</modifier></type><name pos:start="37:17" pos:end="37:25">cpu_model</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:32"><decl pos:start="39:5" pos:end="39:31"><type pos:start="39:5" pos:end="39:16"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:14">char</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:24">pid_file</name> <init pos:start="39:26" pos:end="39:31">= <expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="44:0"><decl pos:start="41:5" pos:end="41:31"><type pos:start="41:5" pos:end="41:16"><specifier pos:start="41:5" pos:end="41:9">const</specifier> <name pos:start="41:11" pos:end="41:14">char</name> <modifier pos:start="41:16" pos:end="41:16">*</modifier></type><name pos:start="41:17" pos:end="41:24">incoming</name> <init pos:start="41:26" pos:end="41:31">= <expr pos:start="41:28" pos:end="41:31"><name pos:start="41:28" pos:end="41:31">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="43:1" pos:end="43:17">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:17">CONFIG_VNC</name></cpp:ifdef>

    <decl_stmt pos:start="45:5" pos:end="48:0"><decl pos:start="45:5" pos:end="45:25"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:21">show_vnc_port</name> <init pos:start="45:23" pos:end="45:25">= <expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="49:5" pos:end="49:22"><decl pos:start="49:5" pos:end="49:21"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:17">defconfig</name> <init pos:start="49:19" pos:end="49:21">= <expr pos:start="49:21" pos:end="49:21"><literal type="number" pos:start="49:21" pos:end="49:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:32"><decl pos:start="51:5" pos:end="51:31"><type pos:start="51:5" pos:end="51:16"><specifier pos:start="51:5" pos:end="51:9">const</specifier> <name pos:start="51:11" pos:end="51:14">char</name> <modifier pos:start="51:16" pos:end="51:16">*</modifier></type><name pos:start="51:17" pos:end="51:24">log_mask</name> <init pos:start="51:26" pos:end="51:31">= <expr pos:start="51:28" pos:end="51:31"><name pos:start="51:28" pos:end="51:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:32"><decl pos:start="53:5" pos:end="53:31"><type pos:start="53:5" pos:end="53:16"><specifier pos:start="53:5" pos:end="53:9">const</specifier> <name pos:start="53:11" pos:end="53:14">char</name> <modifier pos:start="53:16" pos:end="53:16">*</modifier></type><name pos:start="53:17" pos:end="53:24">log_file</name> <init pos:start="53:26" pos:end="53:31">= <expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="63:6"><decl pos:start="55:5" pos:end="63:5"><type pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:14">GMemVTable</name></type> <name pos:start="55:16" pos:end="55:24">mem_trace</name> <init pos:start="55:26" pos:end="63:5">= <expr pos:start="55:28" pos:end="63:5"><block pos:start="55:28" pos:end="63:5">{

        <expr pos:start="57:9" pos:end="57:34"><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:15">malloc</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:34">malloc_and_trace</name></expr>,

        <expr pos:start="59:9" pos:end="59:36"><operator pos:start="59:9" pos:end="59:9">.</operator><name pos:start="59:10" pos:end="59:16">realloc</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:36">realloc_and_trace</name></expr>,

        <expr pos:start="61:9" pos:end="61:30"><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:13">free</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:30">free_and_trace</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:36"><decl pos:start="65:5" pos:end="65:35"><type pos:start="65:5" pos:end="65:16"><specifier pos:start="65:5" pos:end="65:9">const</specifier> <name pos:start="65:11" pos:end="65:14">char</name> <modifier pos:start="65:16" pos:end="65:16">*</modifier></type><name pos:start="65:17" pos:end="65:28">trace_events</name> <init pos:start="65:30" pos:end="65:35">= <expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:34"><decl pos:start="67:5" pos:end="67:33"><type pos:start="67:5" pos:end="67:16"><specifier pos:start="67:5" pos:end="67:9">const</specifier> <name pos:start="67:11" pos:end="67:14">char</name> <modifier pos:start="67:16" pos:end="67:16">*</modifier></type><name pos:start="67:17" pos:end="67:26">trace_file</name> <init pos:start="67:28" pos:end="67:33">= <expr pos:start="67:30" pos:end="67:33"><name pos:start="67:30" pos:end="67:33">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><call pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:10">atexit</name><argument_list pos:start="71:11" pos:end="71:35">(<argument pos:start="71:12" pos:end="71:34"><expr pos:start="71:12" pos:end="71:34"><name pos:start="71:12" pos:end="71:34">qemu_run_exit_notifiers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:32"><expr pos:start="73:5" pos:end="73:31"><call pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:22">error_set_progname</name><argument_list pos:start="73:23" pos:end="73:31">(<argument pos:start="73:24" pos:end="73:30"><expr pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:30"><name pos:start="73:24" pos:end="73:27">argv</name><index pos:start="73:28" pos:end="73:30">[<expr pos:start="73:29" pos:end="73:29"><literal type="number" pos:start="73:29" pos:end="73:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><call pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:20">g_mem_set_vtable</name><argument_list pos:start="77:21" pos:end="77:32">(<argument pos:start="77:22" pos:end="77:31"><expr pos:start="77:22" pos:end="77:31"><operator pos:start="77:22" pos:end="77:22">&amp;</operator><name pos:start="77:23" pos:end="77:31">mem_trace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="93:5"><if pos:start="79:5" pos:end="93:5">if <condition pos:start="79:8" pos:end="79:30">(<expr pos:start="79:9" pos:end="79:29"><operator pos:start="79:9" pos:end="79:9">!</operator><call pos:start="79:10" pos:end="79:29"><name pos:start="79:10" pos:end="79:27">g_thread_supported</name><argument_list pos:start="79:28" pos:end="79:29">()</argument_list></call></expr>)</condition> <block pos:start="79:32" pos:end="93:5">{<block_content pos:start="83:9" pos:end="92:0">

<cpp:if pos:start="81:1" pos:end="81:33">#<cpp:directive pos:start="81:2" pos:end="81:3">if</cpp:directive> <expr pos:start="81:5" pos:end="81:33"><operator pos:start="81:5" pos:end="81:5">!</operator><call pos:start="81:6" pos:end="81:33"><name pos:start="81:6" pos:end="81:23">GLIB_CHECK_VERSION</name><argument_list pos:start="81:24" pos:end="81:33">(<argument pos:start="81:25" pos:end="81:32"><expr pos:start="81:25" pos:end="81:32"><literal type="number" pos:start="81:25" pos:end="81:25">2</literal><operator pos:start="81:26" pos:end="81:26">,</operator> <literal type="number" pos:start="81:28" pos:end="81:29">31</literal><operator pos:start="81:30" pos:end="81:30">,</operator> <literal type="number" pos:start="81:32" pos:end="81:32">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="83:9" pos:end="86:0"><expr pos:start="83:9" pos:end="83:27"><call pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:21">g_thread_init</name><argument_list pos:start="83:22" pos:end="83:27">(<argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><name pos:start="83:23" pos:end="83:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="85:1" pos:end="85:5">#<cpp:directive pos:start="85:2" pos:end="85:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="87:9" pos:end="87:66"><expr pos:start="87:9" pos:end="87:65"><call pos:start="87:9" pos:end="87:65"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:65">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:64"><expr pos:start="87:25" pos:end="87:64"><literal type="string" pos:start="87:25" pos:end="87:64">"glib threading failed to initialize.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:15"><call pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:12">exit</name><argument_list pos:start="89:13" pos:end="89:15">(<argument pos:start="89:14" pos:end="89:14"><expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:20"><expr pos:start="97:5" pos:end="97:19"><call pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:17">runstate_init</name><argument_list pos:start="97:18" pos:end="97:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:18"><expr pos:start="101:5" pos:end="101:17"><call pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:15">init_clocks</name><argument_list pos:start="101:16" pos:end="101:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:27"><expr pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:13">rtc_clock</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:26">host_clock</name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:32"><expr pos:start="107:5" pos:end="107:31"><call pos:start="107:5" pos:end="107:31"><name pos:start="107:5" pos:end="107:25">qemu_cache_utils_init</name><argument_list pos:start="107:26" pos:end="107:31">(<argument pos:start="107:27" pos:end="107:30"><expr pos:start="107:27" pos:end="107:30"><name pos:start="107:27" pos:end="107:30">envp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:39"><expr pos:start="111:5" pos:end="111:38"><call pos:start="111:5" pos:end="111:38"><name pos:start="111:5" pos:end="111:14">QLIST_INIT</name> <argument_list pos:start="111:16" pos:end="111:38">(<argument pos:start="111:17" pos:end="111:37"><expr pos:start="111:17" pos:end="111:37"><operator pos:start="111:17" pos:end="111:17">&amp;</operator><name pos:start="111:18" pos:end="111:37">vm_change_state_head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:37"><expr pos:start="113:5" pos:end="113:36"><call pos:start="113:5" pos:end="113:36"><name pos:start="113:5" pos:end="113:34">os_setup_early_signal_handling</name><argument_list pos:start="113:35" pos:end="113:36">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><call pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:20">module_call_init</name><argument_list pos:start="117:21" pos:end="117:41">(<argument pos:start="117:22" pos:end="117:40"><expr pos:start="117:22" pos:end="117:40"><name pos:start="117:22" pos:end="117:40">MODULE_INIT_MACHINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:11">machine</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <call pos:start="119:15" pos:end="119:36"><name pos:start="119:15" pos:end="119:34">find_default_machine</name><argument_list pos:start="119:35" pos:end="119:36">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:21"><expr pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:13">cpu_model</name> <operator pos:start="121:15" pos:end="121:15">=</operator> <name pos:start="121:17" pos:end="121:20">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:27"><expr pos:start="123:5" pos:end="123:26"><name pos:start="123:5" pos:end="123:19">initrd_filename</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <name pos:start="123:23" pos:end="123:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:17"><expr pos:start="125:5" pos:end="125:16"><name pos:start="125:5" pos:end="125:12">ram_size</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <literal type="number" pos:start="125:16" pos:end="125:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:17"><expr pos:start="127:5" pos:end="127:16"><name pos:start="127:5" pos:end="127:12">snapshot</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <literal type="number" pos:start="127:16" pos:end="127:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:27"><expr pos:start="129:5" pos:end="129:26"><name pos:start="129:5" pos:end="129:19">kernel_filename</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:24"><expr pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:18">kernel_cmdline</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <literal type="string" pos:start="131:22" pos:end="131:23">""</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:8">cyls</name> <operator pos:start="133:10" pos:end="133:10">=</operator> <name pos:start="133:12" pos:end="133:16">heads</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <name pos:start="133:20" pos:end="133:23">secs</name> <operator pos:start="133:25" pos:end="133:25">=</operator> <literal type="number" pos:start="133:27" pos:end="133:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:44"><expr pos:start="135:5" pos:end="135:43"><name pos:start="135:5" pos:end="135:15">translation</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>



    <for pos:start="139:5" pos:end="145:5">for <control pos:start="139:9" pos:end="139:35">(<init pos:start="139:10" pos:end="139:15"><expr pos:start="139:10" pos:end="139:14"><name pos:start="139:10" pos:end="139:10">i</name> <operator pos:start="139:12" pos:end="139:12">=</operator> <literal type="number" pos:start="139:14" pos:end="139:14">0</literal></expr>;</init> <condition pos:start="139:17" pos:end="139:30"><expr pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:17">i</name> <operator pos:start="139:19" pos:end="139:19">&lt;</operator> <name pos:start="139:21" pos:end="139:29">MAX_NODES</name></expr>;</condition> <incr pos:start="139:32" pos:end="139:34"><expr pos:start="139:32" pos:end="139:34"><name pos:start="139:32" pos:end="139:32">i</name><operator pos:start="139:33" pos:end="139:34">++</operator></expr></incr>)</control> <block pos:start="139:37" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:28">

        <expr_stmt pos:start="141:9" pos:end="141:24"><expr pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:16">node_mem</name><index pos:start="141:17" pos:end="141:19">[<expr pos:start="141:18" pos:end="141:18"><name pos:start="141:18" pos:end="141:18">i</name></expr>]</index></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <literal type="number" pos:start="141:23" pos:end="141:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:28"><expr pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:20">node_cpumask</name><index pos:start="143:21" pos:end="143:23">[<expr pos:start="143:22" pos:end="143:22"><name pos:start="143:22" pos:end="143:22">i</name></expr>]</index></name> <operator pos:start="143:25" pos:end="143:25">=</operator> <literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="149:5" pos:end="149:22"><expr pos:start="149:5" pos:end="149:21"><name pos:start="149:5" pos:end="149:17">nb_numa_nodes</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <literal type="number" pos:start="149:21" pos:end="149:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:16"><expr pos:start="151:5" pos:end="151:15"><name pos:start="151:5" pos:end="151:11">nb_nics</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:17"><expr pos:start="155:5" pos:end="155:16"><name pos:start="155:5" pos:end="155:13">autostart</name><operator pos:start="155:14" pos:end="155:14">=</operator> <literal type="number" pos:start="155:16" pos:end="155:16">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:38">/* first pass of option parsing */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:15"><expr pos:start="161:5" pos:end="161:14"><name pos:start="161:5" pos:end="161:10">optind</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <literal type="number" pos:start="161:14" pos:end="161:14">1</literal></expr>;</expr_stmt>

    <while pos:start="163:5" pos:end="193:5">while <condition pos:start="163:11" pos:end="163:25">(<expr pos:start="163:12" pos:end="163:24"><name pos:start="163:12" pos:end="163:17">optind</name> <operator pos:start="163:19" pos:end="163:19">&lt;</operator> <name pos:start="163:21" pos:end="163:24">argc</name></expr>)</condition> <block pos:start="163:27" pos:end="193:5">{<block_content pos:start="165:9" pos:end="191:9">

        <if_stmt pos:start="165:9" pos:end="191:9"><if pos:start="165:9" pos:end="173:9">if <condition pos:start="165:12" pos:end="165:35">(<expr pos:start="165:13" pos:end="165:34"><name pos:start="165:13" pos:end="165:27"><name pos:start="165:13" pos:end="165:16">argv</name><index pos:start="165:17" pos:end="165:24">[<expr pos:start="165:18" pos:end="165:23"><name pos:start="165:18" pos:end="165:23">optind</name></expr>]</index><index pos:start="165:25" pos:end="165:27">[<expr pos:start="165:26" pos:end="165:26"><literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr>]</index></name> <operator pos:start="165:29" pos:end="165:30">!=</operator> <literal type="char" pos:start="165:32" pos:end="165:34">'-'</literal></expr>)</condition> <block pos:start="165:37" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:21">

            <comment type="block" pos:start="167:13" pos:end="167:28">/* disk image */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:21"><expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:18">optind</name><operator pos:start="169:19" pos:end="169:20">++</operator></expr>;</expr_stmt>

            <continue pos:start="171:13" pos:end="171:21">continue;</continue>

        </block_content>}</block></if> <else pos:start="173:11" pos:end="191:9">else <block pos:start="173:16" pos:end="191:9">{<block_content pos:start="175:13" pos:end="189:13">

            <decl_stmt pos:start="175:13" pos:end="175:35"><decl pos:start="175:13" pos:end="175:34"><type pos:start="175:13" pos:end="175:30"><specifier pos:start="175:13" pos:end="175:17">const</specifier> <name pos:start="175:19" pos:end="175:28">QEMUOption</name> <modifier pos:start="175:30" pos:end="175:30">*</modifier></type><name pos:start="175:31" pos:end="175:34">popt</name></decl>;</decl_stmt>



            <expr_stmt pos:start="179:13" pos:end="179:60"><expr pos:start="179:13" pos:end="179:59"><name pos:start="179:13" pos:end="179:16">popt</name> <operator pos:start="179:18" pos:end="179:18">=</operator> <call pos:start="179:20" pos:end="179:59"><name pos:start="179:20" pos:end="179:29">lookup_opt</name><argument_list pos:start="179:30" pos:end="179:59">(<argument pos:start="179:31" pos:end="179:34"><expr pos:start="179:31" pos:end="179:34"><name pos:start="179:31" pos:end="179:34">argc</name></expr></argument>, <argument pos:start="179:37" pos:end="179:40"><expr pos:start="179:37" pos:end="179:40"><name pos:start="179:37" pos:end="179:40">argv</name></expr></argument>, <argument pos:start="179:43" pos:end="179:49"><expr pos:start="179:43" pos:end="179:49"><operator pos:start="179:43" pos:end="179:43">&amp;</operator><name pos:start="179:44" pos:end="179:49">optarg</name></expr></argument>, <argument pos:start="179:52" pos:end="179:58"><expr pos:start="179:52" pos:end="179:58"><operator pos:start="179:52" pos:end="179:52">&amp;</operator><name pos:start="179:53" pos:end="179:58">optind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="181:13" pos:end="189:13">switch <condition pos:start="181:20" pos:end="181:32">(<expr pos:start="181:21" pos:end="181:31"><name pos:start="181:21" pos:end="181:31"><name pos:start="181:21" pos:end="181:24">popt</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:31">index</name></name></expr>)</condition> <block pos:start="181:34" pos:end="189:13">{<block_content pos:start="183:13" pos:end="187:22">

            <case pos:start="183:13" pos:end="183:41">case <expr pos:start="183:18" pos:end="183:40"><name pos:start="183:18" pos:end="183:40">QEMU_OPTION_nodefconfig</name></expr>:</case>

                <expr_stmt pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:27"><name pos:start="185:17" pos:end="185:25">defconfig</name><operator pos:start="185:26" pos:end="185:26">=</operator><literal type="number" pos:start="185:27" pos:end="185:27">0</literal></expr>;</expr_stmt>

                <break pos:start="187:17" pos:end="187:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="197:5" pos:end="221:5"><if pos:start="197:5" pos:end="221:5">if <condition pos:start="197:8" pos:end="197:18">(<expr pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:17">defconfig</name></expr>)</condition> <block pos:start="197:20" pos:end="221:5">{<block_content pos:start="199:9" pos:end="219:9">

        <decl_stmt pos:start="199:9" pos:end="199:16"><decl pos:start="199:9" pos:end="199:15"><type pos:start="199:9" pos:end="199:11"><name pos:start="199:9" pos:end="199:11">int</name></type> <name pos:start="199:13" pos:end="199:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:70"><expr pos:start="203:9" pos:end="203:69"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <call pos:start="203:15" pos:end="203:69"><name pos:start="203:15" pos:end="203:35">qemu_read_config_file</name><argument_list pos:start="203:36" pos:end="203:69">(<argument pos:start="203:37" pos:end="203:68"><expr pos:start="203:37" pos:end="203:68"><name pos:start="203:37" pos:end="203:55">CONFIG_QEMU_CONFDIR</name> <literal type="string" pos:start="203:57" pos:end="203:68">"/qemu.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="209:9"><if pos:start="205:9" pos:end="209:9">if <condition pos:start="205:12" pos:end="205:38">(<expr pos:start="205:13" pos:end="205:37"><name pos:start="205:13" pos:end="205:15">ret</name> <operator pos:start="205:17" pos:end="205:17">&lt;</operator> <literal type="number" pos:start="205:19" pos:end="205:19">0</literal> <operator pos:start="205:21" pos:end="205:22">&amp;&amp;</operator> <name pos:start="205:24" pos:end="205:26">ret</name> <operator pos:start="205:28" pos:end="205:29">!=</operator> <operator pos:start="205:31" pos:end="205:31">-</operator><name pos:start="205:32" pos:end="205:37">ENOENT</name></expr>)</condition> <block pos:start="205:40" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:20">

            <expr_stmt pos:start="207:13" pos:end="207:20"><expr pos:start="207:13" pos:end="207:19"><call pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:16">exit</name><argument_list pos:start="207:17" pos:end="207:19">(<argument pos:start="207:18" pos:end="207:18"><expr pos:start="207:18" pos:end="207:18"><literal type="number" pos:start="207:18" pos:end="207:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="213:9" pos:end="213:54"><expr pos:start="213:9" pos:end="213:53"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <call pos:start="213:15" pos:end="213:53"><name pos:start="213:15" pos:end="213:35">qemu_read_config_file</name><argument_list pos:start="213:36" pos:end="213:53">(<argument pos:start="213:37" pos:end="213:52"><expr pos:start="213:37" pos:end="213:52"><name pos:start="213:37" pos:end="213:52">arch_config_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:38">(<expr pos:start="215:13" pos:end="215:37"><name pos:start="215:13" pos:end="215:15">ret</name> <operator pos:start="215:17" pos:end="215:17">&lt;</operator> <literal type="number" pos:start="215:19" pos:end="215:19">0</literal> <operator pos:start="215:21" pos:end="215:22">&amp;&amp;</operator> <name pos:start="215:24" pos:end="215:26">ret</name> <operator pos:start="215:28" pos:end="215:29">!=</operator> <operator pos:start="215:31" pos:end="215:31">-</operator><name pos:start="215:32" pos:end="215:37">ENOENT</name></expr>)</condition> <block pos:start="215:40" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:20">

            <expr_stmt pos:start="217:13" pos:end="217:20"><expr pos:start="217:13" pos:end="217:19"><call pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:16">exit</name><argument_list pos:start="217:17" pos:end="217:19">(<argument pos:start="217:18" pos:end="217:18"><expr pos:start="217:18" pos:end="217:18"><literal type="number" pos:start="217:18" pos:end="217:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:18"><expr pos:start="223:5" pos:end="223:17"><call pos:start="223:5" pos:end="223:17"><name pos:start="223:5" pos:end="223:15">cpudef_init</name><argument_list pos:start="223:16" pos:end="223:17">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:39">/* second pass of option parsing */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:15"><expr pos:start="229:5" pos:end="229:14"><name pos:start="229:5" pos:end="229:10">optind</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <literal type="number" pos:start="229:14" pos:end="229:14">1</literal></expr>;</expr_stmt>

    <for pos:start="231:5" pos:end="1835:5">for<control pos:start="231:8" pos:end="231:11">(<init pos:start="231:9" pos:end="231:9">;</init><condition pos:start="231:10" pos:end="231:10">;</condition><incr/>)</control> <block pos:start="231:13" pos:end="1835:5">{<block_content pos:start="233:9" pos:end="1833:9">

        <if_stmt pos:start="233:9" pos:end="235:18"><if pos:start="233:9" pos:end="235:18">if <condition pos:start="233:12" pos:end="233:27">(<expr pos:start="233:13" pos:end="233:26"><name pos:start="233:13" pos:end="233:18">optind</name> <operator pos:start="233:20" pos:end="233:21">&gt;=</operator> <name pos:start="233:23" pos:end="233:26">argc</name></expr>)</condition><block type="pseudo" pos:start="235:13" pos:end="235:18"><block_content pos:start="235:13" pos:end="235:18">

            <break pos:start="235:13" pos:end="235:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="237:9" pos:end="1833:9"><if pos:start="237:9" pos:end="241:9">if <condition pos:start="237:12" pos:end="237:35">(<expr pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:16">argv</name><index pos:start="237:17" pos:end="237:24">[<expr pos:start="237:18" pos:end="237:23"><name pos:start="237:18" pos:end="237:23">optind</name></expr>]</index><index pos:start="237:25" pos:end="237:27">[<expr pos:start="237:26" pos:end="237:26"><literal type="number" pos:start="237:26" pos:end="237:26">0</literal></expr>]</index></name> <operator pos:start="237:29" pos:end="237:30">!=</operator> <literal type="char" pos:start="237:32" pos:end="237:34">'-'</literal></expr>)</condition> <block pos:start="237:37" pos:end="241:9">{<block_content pos:start="239:13" pos:end="239:73">

	    <expr_stmt pos:start="239:13" pos:end="239:73"><expr pos:start="239:13" pos:end="239:72"><name pos:start="239:13" pos:end="239:20">hda_opts</name> <operator pos:start="239:22" pos:end="239:22">=</operator> <call pos:start="239:24" pos:end="239:72"><name pos:start="239:24" pos:end="239:32">drive_add</name><argument_list pos:start="239:33" pos:end="239:72">(<argument pos:start="239:34" pos:end="239:43"><expr pos:start="239:34" pos:end="239:43"><name pos:start="239:34" pos:end="239:43">IF_DEFAULT</name></expr></argument>, <argument pos:start="239:46" pos:end="239:46"><expr pos:start="239:46" pos:end="239:46"><literal type="number" pos:start="239:46" pos:end="239:46">0</literal></expr></argument>, <argument pos:start="239:49" pos:end="239:62"><expr pos:start="239:49" pos:end="239:62"><name pos:start="239:49" pos:end="239:62"><name pos:start="239:49" pos:end="239:52">argv</name><index pos:start="239:53" pos:end="239:62">[<expr pos:start="239:54" pos:end="239:61"><name pos:start="239:54" pos:end="239:59">optind</name><operator pos:start="239:60" pos:end="239:61">++</operator></expr>]</index></name></expr></argument>, <argument pos:start="239:65" pos:end="239:71"><expr pos:start="239:65" pos:end="239:71"><name pos:start="239:65" pos:end="239:71">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="241:11" pos:end="1833:9">else <block pos:start="241:16" pos:end="1833:9">{<block_content pos:start="243:13" pos:end="1831:13">

            <decl_stmt pos:start="243:13" pos:end="243:35"><decl pos:start="243:13" pos:end="243:34"><type pos:start="243:13" pos:end="243:30"><specifier pos:start="243:13" pos:end="243:17">const</specifier> <name pos:start="243:19" pos:end="243:28">QEMUOption</name> <modifier pos:start="243:30" pos:end="243:30">*</modifier></type><name pos:start="243:31" pos:end="243:34">popt</name></decl>;</decl_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:60"><expr pos:start="247:13" pos:end="247:59"><name pos:start="247:13" pos:end="247:16">popt</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <call pos:start="247:20" pos:end="247:59"><name pos:start="247:20" pos:end="247:29">lookup_opt</name><argument_list pos:start="247:30" pos:end="247:59">(<argument pos:start="247:31" pos:end="247:34"><expr pos:start="247:31" pos:end="247:34"><name pos:start="247:31" pos:end="247:34">argc</name></expr></argument>, <argument pos:start="247:37" pos:end="247:40"><expr pos:start="247:37" pos:end="247:40"><name pos:start="247:37" pos:end="247:40">argv</name></expr></argument>, <argument pos:start="247:43" pos:end="247:49"><expr pos:start="247:43" pos:end="247:49"><operator pos:start="247:43" pos:end="247:43">&amp;</operator><name pos:start="247:44" pos:end="247:49">optarg</name></expr></argument>, <argument pos:start="247:52" pos:end="247:58"><expr pos:start="247:52" pos:end="247:58"><operator pos:start="247:52" pos:end="247:52">&amp;</operator><name pos:start="247:53" pos:end="247:58">optind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="249:13" pos:end="255:13"><if pos:start="249:13" pos:end="255:13">if <condition pos:start="249:16" pos:end="249:47">(<expr pos:start="249:17" pos:end="249:46"><operator pos:start="249:17" pos:end="249:17">!</operator><operator pos:start="249:18" pos:end="249:18">(</operator><name pos:start="249:19" pos:end="249:33"><name pos:start="249:19" pos:end="249:22">popt</name><operator pos:start="249:23" pos:end="249:24">-&gt;</operator><name pos:start="249:25" pos:end="249:33">arch_mask</name></name> <operator pos:start="249:35" pos:end="249:35">&amp;</operator> <name pos:start="249:37" pos:end="249:45">arch_type</name><operator pos:start="249:46" pos:end="249:46">)</operator></expr>)</condition> <block pos:start="249:49" pos:end="255:13">{<block_content pos:start="251:17" pos:end="253:24">

                <expr_stmt pos:start="251:17" pos:end="251:80"><expr pos:start="251:17" pos:end="251:79"><call pos:start="251:17" pos:end="251:79"><name pos:start="251:17" pos:end="251:22">printf</name><argument_list pos:start="251:23" pos:end="251:79">(<argument pos:start="251:24" pos:end="251:66"><expr pos:start="251:24" pos:end="251:66"><literal type="string" pos:start="251:24" pos:end="251:66">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="251:69" pos:end="251:78"><expr pos:start="251:69" pos:end="251:78"><name pos:start="251:69" pos:end="251:78"><name pos:start="251:69" pos:end="251:72">popt</name><operator pos:start="251:73" pos:end="251:74">-&gt;</operator><name pos:start="251:75" pos:end="251:78">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:24"><expr pos:start="253:17" pos:end="253:23"><call pos:start="253:17" pos:end="253:23"><name pos:start="253:17" pos:end="253:20">exit</name><argument_list pos:start="253:21" pos:end="253:23">(<argument pos:start="253:22" pos:end="253:22"><expr pos:start="253:22" pos:end="253:22"><literal type="number" pos:start="253:22" pos:end="253:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="257:13" pos:end="1831:13">switch<condition pos:start="257:19" pos:end="257:31">(<expr pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:23">popt</name><operator pos:start="257:24" pos:end="257:25">-&gt;</operator><name pos:start="257:26" pos:end="257:30">index</name></name></expr>)</condition> <block pos:start="257:33" pos:end="1831:13">{<block_content pos:start="259:13" pos:end="1829:55">

            <case pos:start="259:13" pos:end="259:31">case <expr pos:start="259:18" pos:end="259:30"><name pos:start="259:18" pos:end="259:30">QEMU_OPTION_M</name></expr>:</case>

                <expr_stmt pos:start="261:17" pos:end="261:48"><expr pos:start="261:17" pos:end="261:47"><name pos:start="261:17" pos:end="261:23">machine</name> <operator pos:start="261:25" pos:end="261:25">=</operator> <call pos:start="261:27" pos:end="261:47"><name pos:start="261:27" pos:end="261:39">machine_parse</name><argument_list pos:start="261:40" pos:end="261:47">(<argument pos:start="261:41" pos:end="261:46"><expr pos:start="261:41" pos:end="261:46"><name pos:start="261:41" pos:end="261:46">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="263:17" pos:end="263:22">break;</break>

            <case pos:start="265:13" pos:end="265:33">case <expr pos:start="265:18" pos:end="265:32"><name pos:start="265:18" pos:end="265:32">QEMU_OPTION_cpu</name></expr>:</case>

                <comment type="block" pos:start="267:17" pos:end="267:55">/* hw initialization will check this */</comment>

                <if_stmt pos:start="269:17" pos:end="279:17"><if pos:start="269:17" pos:end="275:17">if <condition pos:start="269:20" pos:end="269:35">(<expr pos:start="269:21" pos:end="269:34"><operator pos:start="269:21" pos:end="269:21">*</operator><name pos:start="269:22" pos:end="269:27">optarg</name> <operator pos:start="269:29" pos:end="269:30">==</operator> <literal type="char" pos:start="269:32" pos:end="269:34">'?'</literal></expr>)</condition> <block pos:start="269:37" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:28">

                    <expr_stmt pos:start="271:21" pos:end="271:56"><expr pos:start="271:21" pos:end="271:55"><call pos:start="271:21" pos:end="271:55"><name pos:start="271:21" pos:end="271:29">list_cpus</name><argument_list pos:start="271:30" pos:end="271:55">(<argument pos:start="271:31" pos:end="271:36"><expr pos:start="271:31" pos:end="271:36"><name pos:start="271:31" pos:end="271:36">stdout</name></expr></argument>, <argument pos:start="271:39" pos:end="271:46"><expr pos:start="271:39" pos:end="271:46"><operator pos:start="271:39" pos:end="271:39">&amp;</operator><name pos:start="271:40" pos:end="271:46">fprintf</name></expr></argument>, <argument pos:start="271:49" pos:end="271:54"><expr pos:start="271:49" pos:end="271:54"><name pos:start="271:49" pos:end="271:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:28"><expr pos:start="273:21" pos:end="273:27"><call pos:start="273:21" pos:end="273:27"><name pos:start="273:21" pos:end="273:24">exit</name><argument_list pos:start="273:25" pos:end="273:27">(<argument pos:start="273:26" pos:end="273:26"><expr pos:start="273:26" pos:end="273:26"><literal type="number" pos:start="273:26" pos:end="273:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="275:19" pos:end="279:17">else <block pos:start="275:24" pos:end="279:17">{<block_content pos:start="277:21" pos:end="277:39">

                    <expr_stmt pos:start="277:21" pos:end="277:39"><expr pos:start="277:21" pos:end="277:38"><name pos:start="277:21" pos:end="277:29">cpu_model</name> <operator pos:start="277:31" pos:end="277:31">=</operator> <name pos:start="277:33" pos:end="277:38">optarg</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="281:17" pos:end="281:22">break;</break>

            <case pos:start="283:13" pos:end="283:36">case <expr pos:start="283:18" pos:end="283:35"><name pos:start="283:18" pos:end="283:35">QEMU_OPTION_initrd</name></expr>:</case>

                <expr_stmt pos:start="285:17" pos:end="285:41"><expr pos:start="285:17" pos:end="285:40"><name pos:start="285:17" pos:end="285:31">initrd_filename</name> <operator pos:start="285:33" pos:end="285:33">=</operator> <name pos:start="285:35" pos:end="285:40">optarg</name></expr>;</expr_stmt>

                <break pos:start="287:17" pos:end="287:22">break;</break>

            <case pos:start="289:13" pos:end="289:33">case <expr pos:start="289:18" pos:end="289:32"><name pos:start="289:18" pos:end="289:32">QEMU_OPTION_hda</name></expr>:</case>

                <block pos:start="291:17" pos:end="319:17">{<block_content pos:start="293:21" pos:end="317:26">

                    <decl_stmt pos:start="293:21" pos:end="293:34"><decl pos:start="293:21" pos:end="293:33"><type pos:start="293:21" pos:end="293:24"><name pos:start="293:21" pos:end="293:24">char</name></type> <name pos:start="293:26" pos:end="293:33"><name pos:start="293:26" pos:end="293:28">buf</name><index pos:start="293:29" pos:end="293:33">[<expr pos:start="293:30" pos:end="293:32"><literal type="number" pos:start="293:30" pos:end="293:32">256</literal></expr>]</index></name></decl>;</decl_stmt>

                    <if_stmt pos:start="295:21" pos:end="313:53"><if pos:start="295:21" pos:end="297:66">if <condition pos:start="295:24" pos:end="295:34">(<expr pos:start="295:25" pos:end="295:33"><name pos:start="295:25" pos:end="295:28">cyls</name> <operator pos:start="295:30" pos:end="295:31">==</operator> <literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>)</condition><block type="pseudo" pos:start="297:25" pos:end="297:66"><block_content pos:start="297:25" pos:end="297:66">

                        <expr_stmt pos:start="297:25" pos:end="297:66"><expr pos:start="297:25" pos:end="297:65"><call pos:start="297:25" pos:end="297:65"><name pos:start="297:25" pos:end="297:32">snprintf</name><argument_list pos:start="297:33" pos:end="297:65">(<argument pos:start="297:34" pos:end="297:36"><expr pos:start="297:34" pos:end="297:36"><name pos:start="297:34" pos:end="297:36">buf</name></expr></argument>, <argument pos:start="297:39" pos:end="297:49"><expr pos:start="297:39" pos:end="297:49"><sizeof pos:start="297:39" pos:end="297:49">sizeof<argument_list pos:start="297:45" pos:end="297:49">(<argument pos:start="297:46" pos:end="297:48"><expr pos:start="297:46" pos:end="297:48"><name pos:start="297:46" pos:end="297:48">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="297:52" pos:end="297:55"><expr pos:start="297:52" pos:end="297:55"><literal type="string" pos:start="297:52" pos:end="297:55">"%s"</literal></expr></argument>, <argument pos:start="297:58" pos:end="297:64"><expr pos:start="297:58" pos:end="297:64"><name pos:start="297:58" pos:end="297:64">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="299:21" pos:end="313:53">else<block type="pseudo" pos:start="301:25" pos:end="313:53"><block_content pos:start="301:25" pos:end="313:53">

                        <expr_stmt pos:start="301:25" pos:end="313:53"><expr pos:start="301:25" pos:end="313:52"><call pos:start="301:25" pos:end="313:52"><name pos:start="301:25" pos:end="301:32">snprintf</name><argument_list pos:start="301:33" pos:end="313:52">(<argument pos:start="301:34" pos:end="301:36"><expr pos:start="301:34" pos:end="301:36"><name pos:start="301:34" pos:end="301:36">buf</name></expr></argument>, <argument pos:start="301:39" pos:end="301:49"><expr pos:start="301:39" pos:end="301:49"><sizeof pos:start="301:39" pos:end="301:49">sizeof<argument_list pos:start="301:45" pos:end="301:49">(<argument pos:start="301:46" pos:end="301:48"><expr pos:start="301:46" pos:end="301:48"><name pos:start="301:46" pos:end="301:48">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                 <argument pos:start="303:34" pos:end="303:64"><expr pos:start="303:34" pos:end="303:64"><literal type="string" pos:start="303:34" pos:end="303:64">"%s,cyls=%d,heads=%d,secs=%d%s"</literal></expr></argument>,

                                 <argument pos:start="305:34" pos:end="305:40"><expr pos:start="305:34" pos:end="305:40"><name pos:start="305:34" pos:end="305:40">HD_OPTS</name></expr></argument> , <argument pos:start="305:44" pos:end="305:47"><expr pos:start="305:44" pos:end="305:47"><name pos:start="305:44" pos:end="305:47">cyls</name></expr></argument>, <argument pos:start="305:50" pos:end="305:54"><expr pos:start="305:50" pos:end="305:54"><name pos:start="305:50" pos:end="305:54">heads</name></expr></argument>, <argument pos:start="305:57" pos:end="305:60"><expr pos:start="305:57" pos:end="305:60"><name pos:start="305:57" pos:end="305:60">secs</name></expr></argument>,

                                 <argument pos:start="307:34" pos:end="313:51"><expr pos:start="307:34" pos:end="313:51"><ternary pos:start="307:34" pos:end="313:51"><condition pos:start="307:34" pos:end="307:74"><expr pos:start="307:34" pos:end="307:72"><name pos:start="307:34" pos:end="307:44">translation</name> <operator pos:start="307:46" pos:end="307:47">==</operator> <name pos:start="307:49" pos:end="307:72">BIOS_ATA_TRANSLATION_LBA</name></expr> ?</condition><then pos:start="309:34" pos:end="309:45">

                                 <expr pos:start="309:34" pos:end="309:45"><literal type="string" pos:start="309:34" pos:end="309:45">",trans=lba"</literal></expr> </then><else pos:start="309:47" pos:end="313:51">:

                                 <expr pos:start="311:34" pos:end="313:51"><ternary pos:start="311:34" pos:end="313:51"><condition pos:start="311:34" pos:end="311:75"><expr pos:start="311:34" pos:end="311:73"><name pos:start="311:34" pos:end="311:44">translation</name> <operator pos:start="311:46" pos:end="311:47">==</operator> <name pos:start="311:49" pos:end="311:73">BIOS_ATA_TRANSLATION_NONE</name></expr> ?</condition><then pos:start="313:34" pos:end="313:46">

                                 <expr pos:start="313:34" pos:end="313:46"><literal type="string" pos:start="313:34" pos:end="313:46">",trans=none"</literal></expr> </then><else pos:start="313:48" pos:end="313:51">: <expr pos:start="313:50" pos:end="313:51"><literal type="string" pos:start="313:50" pos:end="313:51">""</literal></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:58"><expr pos:start="315:21" pos:end="315:57"><call pos:start="315:21" pos:end="315:57"><name pos:start="315:21" pos:end="315:29">drive_add</name><argument_list pos:start="315:30" pos:end="315:57">(<argument pos:start="315:31" pos:end="315:40"><expr pos:start="315:31" pos:end="315:40"><name pos:start="315:31" pos:end="315:40">IF_DEFAULT</name></expr></argument>, <argument pos:start="315:43" pos:end="315:43"><expr pos:start="315:43" pos:end="315:43"><literal type="number" pos:start="315:43" pos:end="315:43">0</literal></expr></argument>, <argument pos:start="315:46" pos:end="315:51"><expr pos:start="315:46" pos:end="315:51"><name pos:start="315:46" pos:end="315:51">optarg</name></expr></argument>, <argument pos:start="315:54" pos:end="315:56"><expr pos:start="315:54" pos:end="315:56"><name pos:start="315:54" pos:end="315:56">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="317:21" pos:end="317:26">break;</break>

                </block_content>}</block>

            <case pos:start="321:13" pos:end="321:33">case <expr pos:start="321:18" pos:end="321:32"><name pos:start="321:18" pos:end="321:32">QEMU_OPTION_hdb</name></expr>:</case>

            <case pos:start="323:13" pos:end="323:33">case <expr pos:start="323:18" pos:end="323:32"><name pos:start="323:18" pos:end="323:32">QEMU_OPTION_hdc</name></expr>:</case>

            <case pos:start="325:13" pos:end="325:33">case <expr pos:start="325:18" pos:end="325:32"><name pos:start="325:18" pos:end="325:32">QEMU_OPTION_hdd</name></expr>:</case>

                <expr_stmt pos:start="327:17" pos:end="329:35"><expr pos:start="327:17" pos:end="329:34"><call pos:start="327:17" pos:end="329:34"><name pos:start="327:17" pos:end="327:25">drive_add</name><argument_list pos:start="327:26" pos:end="329:34">(<argument pos:start="327:27" pos:end="327:36"><expr pos:start="327:27" pos:end="327:36"><name pos:start="327:27" pos:end="327:36">IF_DEFAULT</name></expr></argument>, <argument pos:start="327:39" pos:end="327:67"><expr pos:start="327:39" pos:end="327:67"><name pos:start="327:39" pos:end="327:49"><name pos:start="327:39" pos:end="327:42">popt</name><operator pos:start="327:43" pos:end="327:44">-&gt;</operator><name pos:start="327:45" pos:end="327:49">index</name></name> <operator pos:start="327:51" pos:end="327:51">-</operator> <name pos:start="327:53" pos:end="327:67">QEMU_OPTION_hda</name></expr></argument>, <argument pos:start="327:70" pos:end="327:75"><expr pos:start="327:70" pos:end="327:75"><name pos:start="327:70" pos:end="327:75">optarg</name></expr></argument>,

                          <argument pos:start="329:27" pos:end="329:33"><expr pos:start="329:27" pos:end="329:33"><name pos:start="329:27" pos:end="329:33">HD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="331:17" pos:end="331:22">break;</break>

            <case pos:start="333:13" pos:end="333:35">case <expr pos:start="333:18" pos:end="333:34"><name pos:start="333:18" pos:end="333:34">QEMU_OPTION_drive</name></expr>:</case>

                <if_stmt pos:start="335:17" pos:end="339:17"><if pos:start="335:17" pos:end="339:17">if <condition pos:start="335:20" pos:end="335:46">(<expr pos:start="335:21" pos:end="335:45"><call pos:start="335:21" pos:end="335:37"><name pos:start="335:21" pos:end="335:29">drive_def</name><argument_list pos:start="335:30" pos:end="335:37">(<argument pos:start="335:31" pos:end="335:36"><expr pos:start="335:31" pos:end="335:36"><name pos:start="335:31" pos:end="335:36">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="335:39" pos:end="335:40">==</operator> <name pos:start="335:42" pos:end="335:45">NULL</name></expr>)</condition> <block pos:start="335:48" pos:end="339:17">{<block_content pos:start="337:21" pos:end="337:28">

                    <expr_stmt pos:start="337:21" pos:end="337:28"><expr pos:start="337:21" pos:end="337:27"><call pos:start="337:21" pos:end="337:27"><name pos:start="337:21" pos:end="337:24">exit</name><argument_list pos:start="337:25" pos:end="337:27">(<argument pos:start="337:26" pos:end="337:26"><expr pos:start="337:26" pos:end="337:26"><literal type="number" pos:start="337:26" pos:end="337:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

	        <break pos:start="341:17" pos:end="341:22">break;</break>

            <case pos:start="343:13" pos:end="343:33">case <expr pos:start="343:18" pos:end="343:32"><name pos:start="343:18" pos:end="343:32">QEMU_OPTION_set</name></expr>:</case>

                <if_stmt pos:start="345:17" pos:end="347:28"><if pos:start="345:17" pos:end="347:28">if <condition pos:start="345:20" pos:end="345:49">(<expr pos:start="345:21" pos:end="345:48"><call pos:start="345:21" pos:end="345:43"><name pos:start="345:21" pos:end="345:35">qemu_set_option</name><argument_list pos:start="345:36" pos:end="345:43">(<argument pos:start="345:37" pos:end="345:42"><expr pos:start="345:37" pos:end="345:42"><name pos:start="345:37" pos:end="345:42">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="345:45" pos:end="345:46">!=</operator> <literal type="number" pos:start="345:48" pos:end="345:48">0</literal></expr>)</condition><block type="pseudo" pos:start="347:21" pos:end="347:28"><block_content pos:start="347:21" pos:end="347:28">

                    <expr_stmt pos:start="347:21" pos:end="347:28"><expr pos:start="347:21" pos:end="347:27"><call pos:start="347:21" pos:end="347:27"><name pos:start="347:21" pos:end="347:24">exit</name><argument_list pos:start="347:25" pos:end="347:27">(<argument pos:start="347:26" pos:end="347:26"><expr pos:start="347:26" pos:end="347:26"><literal type="number" pos:start="347:26" pos:end="347:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	        <break pos:start="349:17" pos:end="349:22">break;</break>

            <case pos:start="351:13" pos:end="351:36">case <expr pos:start="351:18" pos:end="351:35"><name pos:start="351:18" pos:end="351:35">QEMU_OPTION_global</name></expr>:</case>

                <if_stmt pos:start="353:17" pos:end="355:28"><if pos:start="353:17" pos:end="355:28">if <condition pos:start="353:20" pos:end="353:52">(<expr pos:start="353:21" pos:end="353:51"><call pos:start="353:21" pos:end="353:46"><name pos:start="353:21" pos:end="353:38">qemu_global_option</name><argument_list pos:start="353:39" pos:end="353:46">(<argument pos:start="353:40" pos:end="353:45"><expr pos:start="353:40" pos:end="353:45"><name pos:start="353:40" pos:end="353:45">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="353:48" pos:end="353:49">!=</operator> <literal type="number" pos:start="353:51" pos:end="353:51">0</literal></expr>)</condition><block type="pseudo" pos:start="355:21" pos:end="355:28"><block_content pos:start="355:21" pos:end="355:28">

                    <expr_stmt pos:start="355:21" pos:end="355:28"><expr pos:start="355:21" pos:end="355:27"><call pos:start="355:21" pos:end="355:27"><name pos:start="355:21" pos:end="355:24">exit</name><argument_list pos:start="355:25" pos:end="355:27">(<argument pos:start="355:26" pos:end="355:26"><expr pos:start="355:26" pos:end="355:26"><literal type="number" pos:start="355:26" pos:end="355:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	        <break pos:start="357:17" pos:end="357:22">break;</break>

            <case pos:start="359:13" pos:end="359:38">case <expr pos:start="359:18" pos:end="359:37"><name pos:start="359:18" pos:end="359:37">QEMU_OPTION_mtdblock</name></expr>:</case>

                <expr_stmt pos:start="361:17" pos:end="361:56"><expr pos:start="361:17" pos:end="361:55"><call pos:start="361:17" pos:end="361:55"><name pos:start="361:17" pos:end="361:25">drive_add</name><argument_list pos:start="361:26" pos:end="361:55">(<argument pos:start="361:27" pos:end="361:32"><expr pos:start="361:27" pos:end="361:32"><name pos:start="361:27" pos:end="361:32">IF_MTD</name></expr></argument>, <argument pos:start="361:35" pos:end="361:36"><expr pos:start="361:35" pos:end="361:36"><operator pos:start="361:35" pos:end="361:35">-</operator><literal type="number" pos:start="361:36" pos:end="361:36">1</literal></expr></argument>, <argument pos:start="361:39" pos:end="361:44"><expr pos:start="361:39" pos:end="361:44"><name pos:start="361:39" pos:end="361:44">optarg</name></expr></argument>, <argument pos:start="361:47" pos:end="361:54"><expr pos:start="361:47" pos:end="361:54"><name pos:start="361:47" pos:end="361:54">MTD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="363:17" pos:end="363:22">break;</break>

            <case pos:start="365:13" pos:end="365:32">case <expr pos:start="365:18" pos:end="365:31"><name pos:start="365:18" pos:end="365:31">QEMU_OPTION_sd</name></expr>:</case>

                <expr_stmt pos:start="367:17" pos:end="367:53"><expr pos:start="367:17" pos:end="367:52"><call pos:start="367:17" pos:end="367:52"><name pos:start="367:17" pos:end="367:25">drive_add</name><argument_list pos:start="367:26" pos:end="367:52">(<argument pos:start="367:27" pos:end="367:31"><expr pos:start="367:27" pos:end="367:31"><name pos:start="367:27" pos:end="367:31">IF_SD</name></expr></argument>, <argument pos:start="367:34" pos:end="367:34"><expr pos:start="367:34" pos:end="367:34"><literal type="number" pos:start="367:34" pos:end="367:34">0</literal></expr></argument>, <argument pos:start="367:37" pos:end="367:42"><expr pos:start="367:37" pos:end="367:42"><name pos:start="367:37" pos:end="367:42">optarg</name></expr></argument>, <argument pos:start="367:45" pos:end="367:51"><expr pos:start="367:45" pos:end="367:51"><name pos:start="367:45" pos:end="367:51">SD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="369:17" pos:end="369:22">break;</break>

            <case pos:start="371:13" pos:end="371:36">case <expr pos:start="371:18" pos:end="371:35"><name pos:start="371:18" pos:end="371:35">QEMU_OPTION_pflash</name></expr>:</case>

                <expr_stmt pos:start="373:17" pos:end="373:62"><expr pos:start="373:17" pos:end="373:61"><call pos:start="373:17" pos:end="373:61"><name pos:start="373:17" pos:end="373:25">drive_add</name><argument_list pos:start="373:26" pos:end="373:61">(<argument pos:start="373:27" pos:end="373:35"><expr pos:start="373:27" pos:end="373:35"><name pos:start="373:27" pos:end="373:35">IF_PFLASH</name></expr></argument>, <argument pos:start="373:38" pos:end="373:39"><expr pos:start="373:38" pos:end="373:39"><operator pos:start="373:38" pos:end="373:38">-</operator><literal type="number" pos:start="373:39" pos:end="373:39">1</literal></expr></argument>, <argument pos:start="373:42" pos:end="373:47"><expr pos:start="373:42" pos:end="373:47"><name pos:start="373:42" pos:end="373:47">optarg</name></expr></argument>, <argument pos:start="373:50" pos:end="373:60"><expr pos:start="373:50" pos:end="373:60"><name pos:start="373:50" pos:end="373:60">PFLASH_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="375:17" pos:end="375:22">break;</break>

            <case pos:start="377:13" pos:end="377:38">case <expr pos:start="377:18" pos:end="377:37"><name pos:start="377:18" pos:end="377:37">QEMU_OPTION_snapshot</name></expr>:</case>

                <expr_stmt pos:start="379:17" pos:end="379:29"><expr pos:start="379:17" pos:end="379:28"><name pos:start="379:17" pos:end="379:24">snapshot</name> <operator pos:start="379:26" pos:end="379:26">=</operator> <literal type="number" pos:start="379:28" pos:end="379:28">1</literal></expr>;</expr_stmt>

                <break pos:start="381:17" pos:end="381:22">break;</break>

            <case pos:start="383:13" pos:end="383:36">case <expr pos:start="383:18" pos:end="383:35"><name pos:start="383:18" pos:end="383:35">QEMU_OPTION_hdachs</name></expr>:</case>

                <block pos:start="385:17" pos:end="477:17">{<block_content pos:start="387:21" pos:end="475:21">

                    <decl_stmt pos:start="387:21" pos:end="387:34"><decl pos:start="387:21" pos:end="387:33"><type pos:start="387:21" pos:end="387:32"><specifier pos:start="387:21" pos:end="387:25">const</specifier> <name pos:start="387:27" pos:end="387:30">char</name> <modifier pos:start="387:32" pos:end="387:32">*</modifier></type><name pos:start="387:33" pos:end="387:33">p</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="389:21" pos:end="389:31"><expr pos:start="389:21" pos:end="389:30"><name pos:start="389:21" pos:end="389:21">p</name> <operator pos:start="389:23" pos:end="389:23">=</operator> <name pos:start="389:25" pos:end="389:30">optarg</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:53"><expr pos:start="391:21" pos:end="391:52"><name pos:start="391:21" pos:end="391:24">cyls</name> <operator pos:start="391:26" pos:end="391:26">=</operator> <call pos:start="391:28" pos:end="391:52"><name pos:start="391:28" pos:end="391:33">strtol</name><argument_list pos:start="391:34" pos:end="391:52">(<argument pos:start="391:35" pos:end="391:35"><expr pos:start="391:35" pos:end="391:35"><name pos:start="391:35" pos:end="391:35">p</name></expr></argument>, <argument pos:start="391:38" pos:end="391:48"><expr pos:start="391:38" pos:end="391:48"><operator pos:start="391:38" pos:end="391:38">(</operator><name pos:start="391:39" pos:end="391:42">char</name> <operator pos:start="391:44" pos:end="391:44">*</operator><operator pos:start="391:45" pos:end="391:45">*</operator><operator pos:start="391:46" pos:end="391:46">)</operator><operator pos:start="391:47" pos:end="391:47">&amp;</operator><name pos:start="391:48" pos:end="391:48">p</name></expr></argument>, <argument pos:start="391:51" pos:end="391:51"><expr pos:start="391:51" pos:end="391:51"><literal type="number" pos:start="391:51" pos:end="391:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="393:21" pos:end="395:38"><if pos:start="393:21" pos:end="395:38">if <condition pos:start="393:24" pos:end="393:49">(<expr pos:start="393:25" pos:end="393:48"><name pos:start="393:25" pos:end="393:42"><name pos:start="393:25" pos:end="393:28">cyls</name> <argument_list type="generic" pos:start="393:30" pos:end="393:42">&lt; <argument pos:start="393:32" pos:end="393:40"><expr pos:start="393:32" pos:end="393:40"><literal type="number" pos:start="393:32" pos:end="393:32">1</literal> <operator pos:start="393:34" pos:end="393:35">||</operator> <name pos:start="393:37" pos:end="393:40">cyls</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="393:44" pos:end="393:48">16383</literal></expr>)</condition><block type="pseudo" pos:start="395:25" pos:end="395:38"><block_content pos:start="395:25" pos:end="395:38">

                        <goto pos:start="395:25" pos:end="395:38">goto <name pos:start="395:30" pos:end="395:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="397:21" pos:end="399:38"><if pos:start="397:21" pos:end="399:38">if <condition pos:start="397:24" pos:end="397:34">(<expr pos:start="397:25" pos:end="397:33"><operator pos:start="397:25" pos:end="397:25">*</operator><name pos:start="397:26" pos:end="397:26">p</name> <operator pos:start="397:28" pos:end="397:29">!=</operator> <literal type="char" pos:start="397:31" pos:end="397:33">','</literal></expr>)</condition><block type="pseudo" pos:start="399:25" pos:end="399:38"><block_content pos:start="399:25" pos:end="399:38">

                        <goto pos:start="399:25" pos:end="399:38">goto <name pos:start="399:30" pos:end="399:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="401:21" pos:end="401:24"><expr pos:start="401:21" pos:end="401:23"><name pos:start="401:21" pos:end="401:21">p</name><operator pos:start="401:22" pos:end="401:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="403:21" pos:end="403:54"><expr pos:start="403:21" pos:end="403:53"><name pos:start="403:21" pos:end="403:25">heads</name> <operator pos:start="403:27" pos:end="403:27">=</operator> <call pos:start="403:29" pos:end="403:53"><name pos:start="403:29" pos:end="403:34">strtol</name><argument_list pos:start="403:35" pos:end="403:53">(<argument pos:start="403:36" pos:end="403:36"><expr pos:start="403:36" pos:end="403:36"><name pos:start="403:36" pos:end="403:36">p</name></expr></argument>, <argument pos:start="403:39" pos:end="403:49"><expr pos:start="403:39" pos:end="403:49"><operator pos:start="403:39" pos:end="403:39">(</operator><name pos:start="403:40" pos:end="403:43">char</name> <operator pos:start="403:45" pos:end="403:45">*</operator><operator pos:start="403:46" pos:end="403:46">*</operator><operator pos:start="403:47" pos:end="403:47">)</operator><operator pos:start="403:48" pos:end="403:48">&amp;</operator><name pos:start="403:49" pos:end="403:49">p</name></expr></argument>, <argument pos:start="403:52" pos:end="403:52"><expr pos:start="403:52" pos:end="403:52"><literal type="number" pos:start="403:52" pos:end="403:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="405:21" pos:end="407:38"><if pos:start="405:21" pos:end="407:38">if <condition pos:start="405:24" pos:end="405:48">(<expr pos:start="405:25" pos:end="405:47"><name pos:start="405:25" pos:end="405:44"><name pos:start="405:25" pos:end="405:29">heads</name> <argument_list type="generic" pos:start="405:31" pos:end="405:44">&lt; <argument pos:start="405:33" pos:end="405:42"><expr pos:start="405:33" pos:end="405:42"><literal type="number" pos:start="405:33" pos:end="405:33">1</literal> <operator pos:start="405:35" pos:end="405:36">||</operator> <name pos:start="405:38" pos:end="405:42">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="405:46" pos:end="405:47">16</literal></expr>)</condition><block type="pseudo" pos:start="407:25" pos:end="407:38"><block_content pos:start="407:25" pos:end="407:38">

                        <goto pos:start="407:25" pos:end="407:38">goto <name pos:start="407:30" pos:end="407:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="409:21" pos:end="411:38"><if pos:start="409:21" pos:end="411:38">if <condition pos:start="409:24" pos:end="409:34">(<expr pos:start="409:25" pos:end="409:33"><operator pos:start="409:25" pos:end="409:25">*</operator><name pos:start="409:26" pos:end="409:26">p</name> <operator pos:start="409:28" pos:end="409:29">!=</operator> <literal type="char" pos:start="409:31" pos:end="409:33">','</literal></expr>)</condition><block type="pseudo" pos:start="411:25" pos:end="411:38"><block_content pos:start="411:25" pos:end="411:38">

                        <goto pos:start="411:25" pos:end="411:38">goto <name pos:start="411:30" pos:end="411:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="413:21" pos:end="413:24"><expr pos:start="413:21" pos:end="413:23"><name pos:start="413:21" pos:end="413:21">p</name><operator pos:start="413:22" pos:end="413:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="415:21" pos:end="415:53"><expr pos:start="415:21" pos:end="415:52"><name pos:start="415:21" pos:end="415:24">secs</name> <operator pos:start="415:26" pos:end="415:26">=</operator> <call pos:start="415:28" pos:end="415:52"><name pos:start="415:28" pos:end="415:33">strtol</name><argument_list pos:start="415:34" pos:end="415:52">(<argument pos:start="415:35" pos:end="415:35"><expr pos:start="415:35" pos:end="415:35"><name pos:start="415:35" pos:end="415:35">p</name></expr></argument>, <argument pos:start="415:38" pos:end="415:48"><expr pos:start="415:38" pos:end="415:48"><operator pos:start="415:38" pos:end="415:38">(</operator><name pos:start="415:39" pos:end="415:42">char</name> <operator pos:start="415:44" pos:end="415:44">*</operator><operator pos:start="415:45" pos:end="415:45">*</operator><operator pos:start="415:46" pos:end="415:46">)</operator><operator pos:start="415:47" pos:end="415:47">&amp;</operator><name pos:start="415:48" pos:end="415:48">p</name></expr></argument>, <argument pos:start="415:51" pos:end="415:51"><expr pos:start="415:51" pos:end="415:51"><literal type="number" pos:start="415:51" pos:end="415:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="417:21" pos:end="419:38"><if pos:start="417:21" pos:end="419:38">if <condition pos:start="417:24" pos:end="417:46">(<expr pos:start="417:25" pos:end="417:45"><name pos:start="417:25" pos:end="417:42"><name pos:start="417:25" pos:end="417:28">secs</name> <argument_list type="generic" pos:start="417:30" pos:end="417:42">&lt; <argument pos:start="417:32" pos:end="417:40"><expr pos:start="417:32" pos:end="417:40"><literal type="number" pos:start="417:32" pos:end="417:32">1</literal> <operator pos:start="417:34" pos:end="417:35">||</operator> <name pos:start="417:37" pos:end="417:40">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="417:44" pos:end="417:45">63</literal></expr>)</condition><block type="pseudo" pos:start="419:25" pos:end="419:38"><block_content pos:start="419:25" pos:end="419:38">

                        <goto pos:start="419:25" pos:end="419:38">goto <name pos:start="419:30" pos:end="419:37">chs_fail</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="421:21" pos:end="449:21"><if pos:start="421:21" pos:end="441:21">if <condition pos:start="421:24" pos:end="421:34">(<expr pos:start="421:25" pos:end="421:33"><operator pos:start="421:25" pos:end="421:25">*</operator><name pos:start="421:26" pos:end="421:26">p</name> <operator pos:start="421:28" pos:end="421:29">==</operator> <literal type="char" pos:start="421:31" pos:end="421:33">','</literal></expr>)</condition> <block pos:start="421:36" pos:end="441:21">{<block_content pos:start="423:25" pos:end="439:42">

                        <expr_stmt pos:start="423:25" pos:end="423:28"><expr pos:start="423:25" pos:end="423:27"><name pos:start="423:25" pos:end="423:25">p</name><operator pos:start="423:26" pos:end="423:27">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="425:25" pos:end="439:42"><if pos:start="425:25" pos:end="427:68">if <condition pos:start="425:28" pos:end="425:47">(<expr pos:start="425:29" pos:end="425:46"><operator pos:start="425:29" pos:end="425:29">!</operator><call pos:start="425:30" pos:end="425:46"><name pos:start="425:30" pos:end="425:35">strcmp</name><argument_list pos:start="425:36" pos:end="425:46">(<argument pos:start="425:37" pos:end="425:37"><expr pos:start="425:37" pos:end="425:37"><name pos:start="425:37" pos:end="425:37">p</name></expr></argument>, <argument pos:start="425:40" pos:end="425:45"><expr pos:start="425:40" pos:end="425:45"><literal type="string" pos:start="425:40" pos:end="425:45">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="427:29" pos:end="427:68"><block_content pos:start="427:29" pos:end="427:68">

                            <expr_stmt pos:start="427:29" pos:end="427:68"><expr pos:start="427:29" pos:end="427:67"><name pos:start="427:29" pos:end="427:39">translation</name> <operator pos:start="427:41" pos:end="427:41">=</operator> <name pos:start="427:43" pos:end="427:67">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

                        <if type="elseif" pos:start="429:25" pos:end="431:67">else if <condition pos:start="429:33" pos:end="429:51">(<expr pos:start="429:34" pos:end="429:50"><operator pos:start="429:34" pos:end="429:34">!</operator><call pos:start="429:35" pos:end="429:50"><name pos:start="429:35" pos:end="429:40">strcmp</name><argument_list pos:start="429:41" pos:end="429:50">(<argument pos:start="429:42" pos:end="429:42"><expr pos:start="429:42" pos:end="429:42"><name pos:start="429:42" pos:end="429:42">p</name></expr></argument>, <argument pos:start="429:45" pos:end="429:49"><expr pos:start="429:45" pos:end="429:49"><literal type="string" pos:start="429:45" pos:end="429:49">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="431:29" pos:end="431:67"><block_content pos:start="431:29" pos:end="431:67">

                            <expr_stmt pos:start="431:29" pos:end="431:67"><expr pos:start="431:29" pos:end="431:66"><name pos:start="431:29" pos:end="431:39">translation</name> <operator pos:start="431:41" pos:end="431:41">=</operator> <name pos:start="431:43" pos:end="431:66">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

                        <if type="elseif" pos:start="433:25" pos:end="435:68">else if <condition pos:start="433:33" pos:end="433:52">(<expr pos:start="433:34" pos:end="433:51"><operator pos:start="433:34" pos:end="433:34">!</operator><call pos:start="433:35" pos:end="433:51"><name pos:start="433:35" pos:end="433:40">strcmp</name><argument_list pos:start="433:41" pos:end="433:51">(<argument pos:start="433:42" pos:end="433:42"><expr pos:start="433:42" pos:end="433:42"><name pos:start="433:42" pos:end="433:42">p</name></expr></argument>, <argument pos:start="433:45" pos:end="433:50"><expr pos:start="433:45" pos:end="433:50"><literal type="string" pos:start="433:45" pos:end="433:50">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="435:29" pos:end="435:68"><block_content pos:start="435:29" pos:end="435:68">

                            <expr_stmt pos:start="435:29" pos:end="435:68"><expr pos:start="435:29" pos:end="435:67"><name pos:start="435:29" pos:end="435:39">translation</name> <operator pos:start="435:41" pos:end="435:41">=</operator> <name pos:start="435:43" pos:end="435:67">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="437:25" pos:end="439:42">else<block type="pseudo" pos:start="439:29" pos:end="439:42"><block_content pos:start="439:29" pos:end="439:42">

                            <goto pos:start="439:29" pos:end="439:42">goto <name pos:start="439:34" pos:end="439:41">chs_fail</name>;</goto></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="441:23" pos:end="449:21">else if <condition pos:start="441:31" pos:end="441:42">(<expr pos:start="441:32" pos:end="441:41"><operator pos:start="441:32" pos:end="441:32">*</operator><name pos:start="441:33" pos:end="441:33">p</name> <operator pos:start="441:35" pos:end="441:36">!=</operator> <literal type="char" pos:start="441:38" pos:end="441:41">'\0'</literal></expr>)</condition> <block pos:start="441:44" pos:end="449:21">{<block_content pos:start="443:21" pos:end="447:32">

                    <label pos:start="443:21" pos:end="443:29"><name pos:start="443:21" pos:end="443:28">chs_fail</name>:</label>

                        <expr_stmt pos:start="445:25" pos:end="445:79"><expr pos:start="445:25" pos:end="445:78"><call pos:start="445:25" pos:end="445:78"><name pos:start="445:25" pos:end="445:31">fprintf</name><argument_list pos:start="445:32" pos:end="445:78">(<argument pos:start="445:33" pos:end="445:38"><expr pos:start="445:33" pos:end="445:38"><name pos:start="445:33" pos:end="445:38">stderr</name></expr></argument>, <argument pos:start="445:41" pos:end="445:77"><expr pos:start="445:41" pos:end="445:77"><literal type="string" pos:start="445:41" pos:end="445:77">"qemu: invalid physical CHS format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="447:25" pos:end="447:32"><expr pos:start="447:25" pos:end="447:31"><call pos:start="447:25" pos:end="447:31"><name pos:start="447:25" pos:end="447:28">exit</name><argument_list pos:start="447:29" pos:end="447:31">(<argument pos:start="447:30" pos:end="447:30"><expr pos:start="447:30" pos:end="447:30"><literal type="number" pos:start="447:30" pos:end="447:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

		    <if_stmt pos:start="451:21" pos:end="475:21"><if pos:start="451:21" pos:end="475:21">if <condition pos:start="451:24" pos:end="451:41">(<expr pos:start="451:25" pos:end="451:40"><name pos:start="451:25" pos:end="451:32">hda_opts</name> <operator pos:start="451:34" pos:end="451:35">!=</operator> <name pos:start="451:37" pos:end="451:40">NULL</name></expr>)</condition> <block pos:start="451:43" pos:end="475:21">{<block_content pos:start="453:25" pos:end="473:68">

                        <decl_stmt pos:start="453:25" pos:end="453:37"><decl pos:start="453:25" pos:end="453:36"><type pos:start="453:25" pos:end="453:28"><name pos:start="453:25" pos:end="453:28">char</name></type> <name pos:start="453:30" pos:end="453:36"><name pos:start="453:30" pos:end="453:32">num</name><index pos:start="453:33" pos:end="453:36">[<expr pos:start="453:34" pos:end="453:35"><literal type="number" pos:start="453:34" pos:end="453:35">16</literal></expr>]</index></name></decl>;</decl_stmt>

                        <expr_stmt pos:start="455:25" pos:end="455:63"><expr pos:start="455:25" pos:end="455:62"><call pos:start="455:25" pos:end="455:62"><name pos:start="455:25" pos:end="455:32">snprintf</name><argument_list pos:start="455:33" pos:end="455:62">(<argument pos:start="455:34" pos:end="455:36"><expr pos:start="455:34" pos:end="455:36"><name pos:start="455:34" pos:end="455:36">num</name></expr></argument>, <argument pos:start="455:39" pos:end="455:49"><expr pos:start="455:39" pos:end="455:49"><sizeof pos:start="455:39" pos:end="455:49">sizeof<argument_list pos:start="455:45" pos:end="455:49">(<argument pos:start="455:46" pos:end="455:48"><expr pos:start="455:46" pos:end="455:48"><name pos:start="455:46" pos:end="455:48">num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="455:52" pos:end="455:55"><expr pos:start="455:52" pos:end="455:55"><literal type="string" pos:start="455:52" pos:end="455:55">"%d"</literal></expr></argument>, <argument pos:start="455:58" pos:end="455:61"><expr pos:start="455:58" pos:end="455:61"><name pos:start="455:58" pos:end="455:61">cyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="457:25" pos:end="457:60"><expr pos:start="457:25" pos:end="457:59"><call pos:start="457:25" pos:end="457:59"><name pos:start="457:25" pos:end="457:36">qemu_opt_set</name><argument_list pos:start="457:37" pos:end="457:59">(<argument pos:start="457:38" pos:end="457:45"><expr pos:start="457:38" pos:end="457:45"><name pos:start="457:38" pos:end="457:45">hda_opts</name></expr></argument>, <argument pos:start="457:48" pos:end="457:53"><expr pos:start="457:48" pos:end="457:53"><literal type="string" pos:start="457:48" pos:end="457:53">"cyls"</literal></expr></argument>, <argument pos:start="457:56" pos:end="457:58"><expr pos:start="457:56" pos:end="457:58"><name pos:start="457:56" pos:end="457:58">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="459:25" pos:end="459:64"><expr pos:start="459:25" pos:end="459:63"><call pos:start="459:25" pos:end="459:63"><name pos:start="459:25" pos:end="459:32">snprintf</name><argument_list pos:start="459:33" pos:end="459:63">(<argument pos:start="459:34" pos:end="459:36"><expr pos:start="459:34" pos:end="459:36"><name pos:start="459:34" pos:end="459:36">num</name></expr></argument>, <argument pos:start="459:39" pos:end="459:49"><expr pos:start="459:39" pos:end="459:49"><sizeof pos:start="459:39" pos:end="459:49">sizeof<argument_list pos:start="459:45" pos:end="459:49">(<argument pos:start="459:46" pos:end="459:48"><expr pos:start="459:46" pos:end="459:48"><name pos:start="459:46" pos:end="459:48">num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="459:52" pos:end="459:55"><expr pos:start="459:52" pos:end="459:55"><literal type="string" pos:start="459:52" pos:end="459:55">"%d"</literal></expr></argument>, <argument pos:start="459:58" pos:end="459:62"><expr pos:start="459:58" pos:end="459:62"><name pos:start="459:58" pos:end="459:62">heads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="461:25" pos:end="461:61"><expr pos:start="461:25" pos:end="461:60"><call pos:start="461:25" pos:end="461:60"><name pos:start="461:25" pos:end="461:36">qemu_opt_set</name><argument_list pos:start="461:37" pos:end="461:60">(<argument pos:start="461:38" pos:end="461:45"><expr pos:start="461:38" pos:end="461:45"><name pos:start="461:38" pos:end="461:45">hda_opts</name></expr></argument>, <argument pos:start="461:48" pos:end="461:54"><expr pos:start="461:48" pos:end="461:54"><literal type="string" pos:start="461:48" pos:end="461:54">"heads"</literal></expr></argument>, <argument pos:start="461:57" pos:end="461:59"><expr pos:start="461:57" pos:end="461:59"><name pos:start="461:57" pos:end="461:59">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="463:25" pos:end="463:63"><expr pos:start="463:25" pos:end="463:62"><call pos:start="463:25" pos:end="463:62"><name pos:start="463:25" pos:end="463:32">snprintf</name><argument_list pos:start="463:33" pos:end="463:62">(<argument pos:start="463:34" pos:end="463:36"><expr pos:start="463:34" pos:end="463:36"><name pos:start="463:34" pos:end="463:36">num</name></expr></argument>, <argument pos:start="463:39" pos:end="463:49"><expr pos:start="463:39" pos:end="463:49"><sizeof pos:start="463:39" pos:end="463:49">sizeof<argument_list pos:start="463:45" pos:end="463:49">(<argument pos:start="463:46" pos:end="463:48"><expr pos:start="463:46" pos:end="463:48"><name pos:start="463:46" pos:end="463:48">num</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="463:52" pos:end="463:55"><expr pos:start="463:52" pos:end="463:55"><literal type="string" pos:start="463:52" pos:end="463:55">"%d"</literal></expr></argument>, <argument pos:start="463:58" pos:end="463:61"><expr pos:start="463:58" pos:end="463:61"><name pos:start="463:58" pos:end="463:61">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="465:25" pos:end="465:60"><expr pos:start="465:25" pos:end="465:59"><call pos:start="465:25" pos:end="465:59"><name pos:start="465:25" pos:end="465:36">qemu_opt_set</name><argument_list pos:start="465:37" pos:end="465:59">(<argument pos:start="465:38" pos:end="465:45"><expr pos:start="465:38" pos:end="465:45"><name pos:start="465:38" pos:end="465:45">hda_opts</name></expr></argument>, <argument pos:start="465:48" pos:end="465:53"><expr pos:start="465:48" pos:end="465:53"><literal type="string" pos:start="465:48" pos:end="465:53">"secs"</literal></expr></argument>, <argument pos:start="465:56" pos:end="465:58"><expr pos:start="465:56" pos:end="465:58"><name pos:start="465:56" pos:end="465:58">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="467:25" pos:end="469:67"><if pos:start="467:25" pos:end="469:67">if <condition pos:start="467:28" pos:end="467:68">(<expr pos:start="467:29" pos:end="467:67"><name pos:start="467:29" pos:end="467:39">translation</name> <operator pos:start="467:41" pos:end="467:42">==</operator> <name pos:start="467:44" pos:end="467:67">BIOS_ATA_TRANSLATION_LBA</name></expr>)</condition><block type="pseudo" pos:start="469:29" pos:end="469:67"><block_content pos:start="469:29" pos:end="469:67">

                            <expr_stmt pos:start="469:29" pos:end="469:67"><expr pos:start="469:29" pos:end="469:66"><call pos:start="469:29" pos:end="469:66"><name pos:start="469:29" pos:end="469:40">qemu_opt_set</name><argument_list pos:start="469:41" pos:end="469:66">(<argument pos:start="469:42" pos:end="469:49"><expr pos:start="469:42" pos:end="469:49"><name pos:start="469:42" pos:end="469:49">hda_opts</name></expr></argument>, <argument pos:start="469:52" pos:end="469:58"><expr pos:start="469:52" pos:end="469:58"><literal type="string" pos:start="469:52" pos:end="469:58">"trans"</literal></expr></argument>, <argument pos:start="469:61" pos:end="469:65"><expr pos:start="469:61" pos:end="469:65"><literal type="string" pos:start="469:61" pos:end="469:65">"lba"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt pos:start="471:25" pos:end="473:68"><if pos:start="471:25" pos:end="473:68">if <condition pos:start="471:28" pos:end="471:69">(<expr pos:start="471:29" pos:end="471:68"><name pos:start="471:29" pos:end="471:39">translation</name> <operator pos:start="471:41" pos:end="471:42">==</operator> <name pos:start="471:44" pos:end="471:68">BIOS_ATA_TRANSLATION_NONE</name></expr>)</condition><block type="pseudo" pos:start="473:29" pos:end="473:68"><block_content pos:start="473:29" pos:end="473:68">

                            <expr_stmt pos:start="473:29" pos:end="473:68"><expr pos:start="473:29" pos:end="473:67"><call pos:start="473:29" pos:end="473:67"><name pos:start="473:29" pos:end="473:40">qemu_opt_set</name><argument_list pos:start="473:41" pos:end="473:67">(<argument pos:start="473:42" pos:end="473:49"><expr pos:start="473:42" pos:end="473:49"><name pos:start="473:42" pos:end="473:49">hda_opts</name></expr></argument>, <argument pos:start="473:52" pos:end="473:58"><expr pos:start="473:52" pos:end="473:58"><literal type="string" pos:start="473:52" pos:end="473:58">"trans"</literal></expr></argument>, <argument pos:start="473:61" pos:end="473:66"><expr pos:start="473:61" pos:end="473:66"><literal type="string" pos:start="473:61" pos:end="473:66">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="479:17" pos:end="479:22">break;</break>

            <case pos:start="481:13" pos:end="481:34">case <expr pos:start="481:18" pos:end="481:33"><name pos:start="481:18" pos:end="481:33">QEMU_OPTION_numa</name></expr>:</case>

                <if_stmt pos:start="483:17" pos:end="489:17"><if pos:start="483:17" pos:end="489:17">if <condition pos:start="483:20" pos:end="483:47">(<expr pos:start="483:21" pos:end="483:46"><name pos:start="483:21" pos:end="483:33">nb_numa_nodes</name> <operator pos:start="483:35" pos:end="483:36">&gt;=</operator> <name pos:start="483:38" pos:end="483:46">MAX_NODES</name></expr>)</condition> <block pos:start="483:49" pos:end="489:17">{<block_content pos:start="485:21" pos:end="487:28">

                    <expr_stmt pos:start="485:21" pos:end="485:67"><expr pos:start="485:21" pos:end="485:66"><call pos:start="485:21" pos:end="485:66"><name pos:start="485:21" pos:end="485:27">fprintf</name><argument_list pos:start="485:28" pos:end="485:66">(<argument pos:start="485:29" pos:end="485:34"><expr pos:start="485:29" pos:end="485:34"><name pos:start="485:29" pos:end="485:34">stderr</name></expr></argument>, <argument pos:start="485:37" pos:end="485:65"><expr pos:start="485:37" pos:end="485:65"><literal type="string" pos:start="485:37" pos:end="485:65">"qemu: too many NUMA nodes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="487:21" pos:end="487:28"><expr pos:start="487:21" pos:end="487:27"><call pos:start="487:21" pos:end="487:27"><name pos:start="487:21" pos:end="487:24">exit</name><argument_list pos:start="487:25" pos:end="487:27">(<argument pos:start="487:26" pos:end="487:26"><expr pos:start="487:26" pos:end="487:26"><literal type="number" pos:start="487:26" pos:end="487:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="491:17" pos:end="491:33"><expr pos:start="491:17" pos:end="491:32"><call pos:start="491:17" pos:end="491:32"><name pos:start="491:17" pos:end="491:24">numa_add</name><argument_list pos:start="491:25" pos:end="491:32">(<argument pos:start="491:26" pos:end="491:31"><expr pos:start="491:26" pos:end="491:31"><name pos:start="491:26" pos:end="491:31">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="493:17" pos:end="493:22">break;</break>

            <case pos:start="495:13" pos:end="495:37">case <expr pos:start="495:18" pos:end="495:36"><name pos:start="495:18" pos:end="495:36">QEMU_OPTION_display</name></expr>:</case>

                <expr_stmt pos:start="497:17" pos:end="497:54"><expr pos:start="497:17" pos:end="497:53"><name pos:start="497:17" pos:end="497:28">display_type</name> <operator pos:start="497:30" pos:end="497:30">=</operator> <call pos:start="497:32" pos:end="497:53"><name pos:start="497:32" pos:end="497:45">select_display</name><argument_list pos:start="497:46" pos:end="497:53">(<argument pos:start="497:47" pos:end="497:52"><expr pos:start="497:47" pos:end="497:52"><name pos:start="497:47" pos:end="497:52">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="499:17" pos:end="499:22">break;</break>

            <case pos:start="501:13" pos:end="501:39">case <expr pos:start="501:18" pos:end="501:38"><name pos:start="501:18" pos:end="501:38">QEMU_OPTION_nographic</name></expr>:</case>

                <expr_stmt pos:start="503:17" pos:end="503:44"><expr pos:start="503:17" pos:end="503:43"><name pos:start="503:17" pos:end="503:28">display_type</name> <operator pos:start="503:30" pos:end="503:30">=</operator> <name pos:start="503:32" pos:end="503:43">DT_NOGRAPHIC</name></expr>;</expr_stmt>

                <break pos:start="505:17" pos:end="505:22">break;</break>

            <case pos:start="507:13" pos:end="510:0">case <expr pos:start="507:18" pos:end="507:35"><name pos:start="507:18" pos:end="507:35">QEMU_OPTION_curses</name></expr>:</case>

<cpp:ifdef pos:start="509:1" pos:end="509:20">#<cpp:directive pos:start="509:2" pos:end="509:6">ifdef</cpp:directive> <name pos:start="509:8" pos:end="509:20">CONFIG_CURSES</name></cpp:ifdef>

                <expr_stmt pos:start="511:17" pos:end="514:0"><expr pos:start="511:17" pos:end="511:40"><name pos:start="511:17" pos:end="511:28">display_type</name> <operator pos:start="511:30" pos:end="511:30">=</operator> <name pos:start="511:32" pos:end="511:40">DT_CURSES</name></expr>;</expr_stmt>

<cpp:else pos:start="513:1" pos:end="513:5">#<cpp:directive pos:start="513:2" pos:end="513:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="515:17" pos:end="515:64"><expr pos:start="515:17" pos:end="515:63"><call pos:start="515:17" pos:end="515:63"><name pos:start="515:17" pos:end="515:23">fprintf</name><argument_list pos:start="515:24" pos:end="515:63">(<argument pos:start="515:25" pos:end="515:30"><expr pos:start="515:25" pos:end="515:30"><name pos:start="515:25" pos:end="515:30">stderr</name></expr></argument>, <argument pos:start="515:33" pos:end="515:62"><expr pos:start="515:33" pos:end="515:62"><literal type="string" pos:start="515:33" pos:end="515:62">"Curses support is disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="520:0"><expr pos:start="517:17" pos:end="517:23"><call pos:start="517:17" pos:end="517:23"><name pos:start="517:17" pos:end="517:20">exit</name><argument_list pos:start="517:21" pos:end="517:23">(<argument pos:start="517:22" pos:end="517:22"><expr pos:start="517:22" pos:end="517:22"><literal type="number" pos:start="517:22" pos:end="517:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="519:1" pos:end="519:6">#<cpp:directive pos:start="519:2" pos:end="519:6">endif</cpp:directive></cpp:endif>

                <break pos:start="521:17" pos:end="521:22">break;</break>

            <case pos:start="523:13" pos:end="523:38">case <expr pos:start="523:18" pos:end="523:37"><name pos:start="523:18" pos:end="523:37">QEMU_OPTION_portrait</name></expr>:</case>

                <expr_stmt pos:start="525:17" pos:end="525:36"><expr pos:start="525:17" pos:end="525:35"><name pos:start="525:17" pos:end="525:30">graphic_rotate</name> <operator pos:start="525:32" pos:end="525:32">=</operator> <literal type="number" pos:start="525:34" pos:end="525:35">90</literal></expr>;</expr_stmt>

                <break pos:start="527:17" pos:end="527:22">break;</break>

            <case pos:start="529:13" pos:end="529:36">case <expr pos:start="529:18" pos:end="529:35"><name pos:start="529:18" pos:end="529:35">QEMU_OPTION_rotate</name></expr>:</case>

                <expr_stmt pos:start="531:17" pos:end="531:71"><expr pos:start="531:17" pos:end="531:70"><name pos:start="531:17" pos:end="531:30">graphic_rotate</name> <operator pos:start="531:32" pos:end="531:32">=</operator> <call pos:start="531:34" pos:end="531:70"><name pos:start="531:34" pos:end="531:39">strtol</name><argument_list pos:start="531:40" pos:end="531:70">(<argument pos:start="531:41" pos:end="531:46"><expr pos:start="531:41" pos:end="531:46"><name pos:start="531:41" pos:end="531:46">optarg</name></expr></argument>, <argument pos:start="531:49" pos:end="531:65"><expr pos:start="531:49" pos:end="531:65"><operator pos:start="531:49" pos:end="531:49">(</operator><name pos:start="531:50" pos:end="531:53">char</name> <operator pos:start="531:55" pos:end="531:55">*</operator><operator pos:start="531:56" pos:end="531:56">*</operator><operator pos:start="531:57" pos:end="531:57">)</operator> <operator pos:start="531:59" pos:end="531:59">&amp;</operator><name pos:start="531:60" pos:end="531:65">optarg</name></expr></argument>, <argument pos:start="531:68" pos:end="531:69"><expr pos:start="531:68" pos:end="531:69"><literal type="number" pos:start="531:68" pos:end="531:69">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="533:17" pos:end="543:17"><if pos:start="533:17" pos:end="543:17">if <condition pos:start="533:20" pos:end="535:67">(<expr pos:start="533:21" pos:end="535:66"><name pos:start="533:21" pos:end="533:34">graphic_rotate</name> <operator pos:start="533:36" pos:end="533:37">!=</operator> <literal type="number" pos:start="533:39" pos:end="533:39">0</literal> <operator pos:start="533:41" pos:end="533:42">&amp;&amp;</operator> <name pos:start="533:44" pos:end="533:57">graphic_rotate</name> <operator pos:start="533:59" pos:end="533:60">!=</operator> <literal type="number" pos:start="533:62" pos:end="533:63">90</literal> <operator pos:start="533:65" pos:end="533:66">&amp;&amp;</operator>

                    <name pos:start="535:21" pos:end="535:34">graphic_rotate</name> <operator pos:start="535:36" pos:end="535:37">!=</operator> <literal type="number" pos:start="535:39" pos:end="535:41">180</literal> <operator pos:start="535:43" pos:end="535:44">&amp;&amp;</operator> <name pos:start="535:46" pos:end="535:59">graphic_rotate</name> <operator pos:start="535:61" pos:end="535:62">!=</operator> <literal type="number" pos:start="535:64" pos:end="535:66">270</literal></expr>)</condition> <block pos:start="535:69" pos:end="543:17">{<block_content pos:start="537:21" pos:end="541:28">

                    <expr_stmt pos:start="537:21" pos:end="539:79"><expr pos:start="537:21" pos:end="539:78"><call pos:start="537:21" pos:end="539:78"><name pos:start="537:21" pos:end="537:27">fprintf</name><argument_list pos:start="537:28" pos:end="539:78">(<argument pos:start="537:29" pos:end="537:34"><expr pos:start="537:29" pos:end="537:34"><name pos:start="537:29" pos:end="537:34">stderr</name></expr></argument>,

                        <argument pos:start="539:25" pos:end="539:77"><expr pos:start="539:25" pos:end="539:77"><literal type="string" pos:start="539:25" pos:end="539:77">"qemu: only 90, 180, 270 deg rotation is available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="541:21" pos:end="541:28"><expr pos:start="541:21" pos:end="541:27"><call pos:start="541:21" pos:end="541:27"><name pos:start="541:21" pos:end="541:24">exit</name><argument_list pos:start="541:25" pos:end="541:27">(<argument pos:start="541:26" pos:end="541:26"><expr pos:start="541:26" pos:end="541:26"><literal type="number" pos:start="541:26" pos:end="541:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="545:17" pos:end="545:22">break;</break>

            <case pos:start="547:13" pos:end="547:36">case <expr pos:start="547:18" pos:end="547:35"><name pos:start="547:18" pos:end="547:35">QEMU_OPTION_kernel</name></expr>:</case>

                <expr_stmt pos:start="549:17" pos:end="549:41"><expr pos:start="549:17" pos:end="549:40"><name pos:start="549:17" pos:end="549:31">kernel_filename</name> <operator pos:start="549:33" pos:end="549:33">=</operator> <name pos:start="549:35" pos:end="549:40">optarg</name></expr>;</expr_stmt>

                <break pos:start="551:17" pos:end="551:22">break;</break>

            <case pos:start="553:13" pos:end="553:36">case <expr pos:start="553:18" pos:end="553:35"><name pos:start="553:18" pos:end="553:35">QEMU_OPTION_append</name></expr>:</case>

                <expr_stmt pos:start="555:17" pos:end="555:40"><expr pos:start="555:17" pos:end="555:39"><name pos:start="555:17" pos:end="555:30">kernel_cmdline</name> <operator pos:start="555:32" pos:end="555:32">=</operator> <name pos:start="555:34" pos:end="555:39">optarg</name></expr>;</expr_stmt>

                <break pos:start="557:17" pos:end="557:22">break;</break>

            <case pos:start="559:13" pos:end="559:35">case <expr pos:start="559:18" pos:end="559:34"><name pos:start="559:18" pos:end="559:34">QEMU_OPTION_cdrom</name></expr>:</case>

                <expr_stmt pos:start="561:17" pos:end="561:61"><expr pos:start="561:17" pos:end="561:60"><call pos:start="561:17" pos:end="561:60"><name pos:start="561:17" pos:end="561:25">drive_add</name><argument_list pos:start="561:26" pos:end="561:60">(<argument pos:start="561:27" pos:end="561:36"><expr pos:start="561:27" pos:end="561:36"><name pos:start="561:27" pos:end="561:36">IF_DEFAULT</name></expr></argument>, <argument pos:start="561:39" pos:end="561:39"><expr pos:start="561:39" pos:end="561:39"><literal type="number" pos:start="561:39" pos:end="561:39">2</literal></expr></argument>, <argument pos:start="561:42" pos:end="561:47"><expr pos:start="561:42" pos:end="561:47"><name pos:start="561:42" pos:end="561:47">optarg</name></expr></argument>, <argument pos:start="561:50" pos:end="561:59"><expr pos:start="561:50" pos:end="561:59"><name pos:start="561:50" pos:end="561:59">CDROM_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="563:17" pos:end="563:22">break;</break>

            <case pos:start="565:13" pos:end="565:34">case <expr pos:start="565:18" pos:end="565:33"><name pos:start="565:18" pos:end="565:33">QEMU_OPTION_boot</name></expr>:</case>

                <block pos:start="567:17" pos:end="665:17">{<block_content pos:start="569:21" pos:end="663:21">

                    <decl_stmt pos:start="569:21" pos:end="575:22"><decl pos:start="569:21" pos:end="575:21"><type pos:start="569:21" pos:end="569:45"><specifier pos:start="569:21" pos:end="569:26">static</specifier> <specifier pos:start="569:28" pos:end="569:32">const</specifier> <name pos:start="569:34" pos:end="569:37">char</name> <modifier pos:start="569:39" pos:end="569:39">*</modifier> <specifier pos:start="569:41" pos:end="569:45">const</specifier></type> <name pos:start="569:47" pos:end="569:54"><name pos:start="569:47" pos:end="569:52">params</name><index pos:start="569:53" pos:end="569:54">[]</index></name> <init pos:start="569:56" pos:end="575:21">= <expr pos:start="569:58" pos:end="575:21"><block pos:start="569:58" pos:end="575:21">{

                        <expr pos:start="571:25" pos:end="571:31"><literal type="string" pos:start="571:25" pos:end="571:31">"order"</literal></expr>, <expr pos:start="571:34" pos:end="571:39"><literal type="string" pos:start="571:34" pos:end="571:39">"once"</literal></expr>, <expr pos:start="571:42" pos:end="571:47"><literal type="string" pos:start="571:42" pos:end="571:47">"menu"</literal></expr>,

                        <expr pos:start="573:25" pos:end="573:32"><literal type="string" pos:start="573:25" pos:end="573:32">"splash"</literal></expr>, <expr pos:start="573:35" pos:end="573:47"><literal type="string" pos:start="573:35" pos:end="573:47">"splash-time"</literal></expr>, <expr pos:start="573:50" pos:end="573:53"><name pos:start="573:50" pos:end="573:53">NULL</name></expr>

                    }</block></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="577:21" pos:end="577:51"><decl pos:start="577:21" pos:end="577:50"><type pos:start="577:21" pos:end="577:24"><name pos:start="577:21" pos:end="577:24">char</name></type> <name pos:start="577:26" pos:end="577:50"><name pos:start="577:26" pos:end="577:28">buf</name><index pos:start="577:29" pos:end="577:50">[<expr pos:start="577:30" pos:end="577:49"><sizeof pos:start="577:30" pos:end="577:49">sizeof<argument_list pos:start="577:36" pos:end="577:49">(<argument pos:start="577:37" pos:end="577:48"><expr pos:start="577:37" pos:end="577:48"><name pos:start="577:37" pos:end="577:48">boot_devices</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>

                    <decl_stmt pos:start="579:21" pos:end="579:48"><decl pos:start="579:21" pos:end="579:47"><type pos:start="579:21" pos:end="579:26"><name pos:start="579:21" pos:end="579:24">char</name> <modifier pos:start="579:26" pos:end="579:26">*</modifier></type><name pos:start="579:27" pos:end="579:47">standard_boot_devices</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="581:21" pos:end="581:35"><decl pos:start="581:21" pos:end="581:34"><type pos:start="581:21" pos:end="581:23"><name pos:start="581:21" pos:end="581:23">int</name></type> <name pos:start="581:25" pos:end="581:30">legacy</name> <init pos:start="581:32" pos:end="581:34">= <expr pos:start="581:34" pos:end="581:34"><literal type="number" pos:start="581:34" pos:end="581:34">0</literal></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="585:21" pos:end="601:21"><if pos:start="585:21" pos:end="591:21">if <condition pos:start="585:24" pos:end="585:45">(<expr pos:start="585:25" pos:end="585:44"><operator pos:start="585:25" pos:end="585:25">!</operator><call pos:start="585:26" pos:end="585:44"><name pos:start="585:26" pos:end="585:31">strchr</name><argument_list pos:start="585:32" pos:end="585:44">(<argument pos:start="585:33" pos:end="585:38"><expr pos:start="585:33" pos:end="585:38"><name pos:start="585:33" pos:end="585:38">optarg</name></expr></argument>, <argument pos:start="585:41" pos:end="585:43"><expr pos:start="585:41" pos:end="585:43"><literal type="char" pos:start="585:41" pos:end="585:43">'='</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="585:47" pos:end="591:21">{<block_content pos:start="587:25" pos:end="589:58">

                        <expr_stmt pos:start="587:25" pos:end="587:35"><expr pos:start="587:25" pos:end="587:34"><name pos:start="587:25" pos:end="587:30">legacy</name> <operator pos:start="587:32" pos:end="587:32">=</operator> <literal type="number" pos:start="587:34" pos:end="587:34">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="589:25" pos:end="589:58"><expr pos:start="589:25" pos:end="589:57"><call pos:start="589:25" pos:end="589:57"><name pos:start="589:25" pos:end="589:31">pstrcpy</name><argument_list pos:start="589:32" pos:end="589:57">(<argument pos:start="589:33" pos:end="589:35"><expr pos:start="589:33" pos:end="589:35"><name pos:start="589:33" pos:end="589:35">buf</name></expr></argument>, <argument pos:start="589:38" pos:end="589:48"><expr pos:start="589:38" pos:end="589:48"><sizeof pos:start="589:38" pos:end="589:48">sizeof<argument_list pos:start="589:44" pos:end="589:48">(<argument pos:start="589:45" pos:end="589:47"><expr pos:start="589:45" pos:end="589:47"><name pos:start="589:45" pos:end="589:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="589:51" pos:end="589:56"><expr pos:start="589:51" pos:end="589:56"><name pos:start="589:51" pos:end="589:56">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="591:23" pos:end="601:21">else if <condition pos:start="591:31" pos:end="591:82">(<expr pos:start="591:32" pos:end="591:81"><call pos:start="591:32" pos:end="591:77"><name pos:start="591:32" pos:end="591:43">check_params</name><argument_list pos:start="591:44" pos:end="591:77">(<argument pos:start="591:45" pos:end="591:47"><expr pos:start="591:45" pos:end="591:47"><name pos:start="591:45" pos:end="591:47">buf</name></expr></argument>, <argument pos:start="591:50" pos:end="591:60"><expr pos:start="591:50" pos:end="591:60"><sizeof pos:start="591:50" pos:end="591:60">sizeof<argument_list pos:start="591:56" pos:end="591:60">(<argument pos:start="591:57" pos:end="591:59"><expr pos:start="591:57" pos:end="591:59"><name pos:start="591:57" pos:end="591:59">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="591:63" pos:end="591:68"><expr pos:start="591:63" pos:end="591:68"><name pos:start="591:63" pos:end="591:68">params</name></expr></argument>, <argument pos:start="591:71" pos:end="591:76"><expr pos:start="591:71" pos:end="591:76"><name pos:start="591:71" pos:end="591:76">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="591:79" pos:end="591:79">&lt;</operator> <literal type="number" pos:start="591:81" pos:end="591:81">0</literal></expr>)</condition> <block pos:start="591:84" pos:end="601:21">{<block_content pos:start="593:25" pos:end="599:32">

                        <expr_stmt pos:start="593:25" pos:end="597:45"><expr pos:start="593:25" pos:end="597:44"><call pos:start="593:25" pos:end="597:44"><name pos:start="593:25" pos:end="593:31">fprintf</name><argument_list pos:start="593:32" pos:end="597:44">(<argument pos:start="593:33" pos:end="593:38"><expr pos:start="593:33" pos:end="593:38"><name pos:start="593:33" pos:end="593:38">stderr</name></expr></argument>,

                                <argument pos:start="595:33" pos:end="595:77"><expr pos:start="595:33" pos:end="595:77"><literal type="string" pos:start="595:33" pos:end="595:77">"qemu: unknown boot parameter '%s' in '%s'\n"</literal></expr></argument>,

                                <argument pos:start="597:33" pos:end="597:35"><expr pos:start="597:33" pos:end="597:35"><name pos:start="597:33" pos:end="597:35">buf</name></expr></argument>, <argument pos:start="597:38" pos:end="597:43"><expr pos:start="597:38" pos:end="597:43"><name pos:start="597:38" pos:end="597:43">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="599:25" pos:end="599:32"><expr pos:start="599:25" pos:end="599:31"><call pos:start="599:25" pos:end="599:31"><name pos:start="599:25" pos:end="599:28">exit</name><argument_list pos:start="599:29" pos:end="599:31">(<argument pos:start="599:30" pos:end="599:30"><expr pos:start="599:30" pos:end="599:30"><literal type="number" pos:start="599:30" pos:end="599:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="605:21" pos:end="613:21"><if pos:start="605:21" pos:end="613:21">if <condition pos:start="605:24" pos:end="607:75">(<expr pos:start="605:25" pos:end="607:74"><name pos:start="605:25" pos:end="605:30">legacy</name> <operator pos:start="605:32" pos:end="605:33">||</operator>

                        <call pos:start="607:25" pos:end="607:74"><name pos:start="607:25" pos:end="607:39">get_param_value</name><argument_list pos:start="607:40" pos:end="607:74">(<argument pos:start="607:41" pos:end="607:43"><expr pos:start="607:41" pos:end="607:43"><name pos:start="607:41" pos:end="607:43">buf</name></expr></argument>, <argument pos:start="607:46" pos:end="607:56"><expr pos:start="607:46" pos:end="607:56"><sizeof pos:start="607:46" pos:end="607:56">sizeof<argument_list pos:start="607:52" pos:end="607:56">(<argument pos:start="607:53" pos:end="607:55"><expr pos:start="607:53" pos:end="607:55"><name pos:start="607:53" pos:end="607:55">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="607:59" pos:end="607:65"><expr pos:start="607:59" pos:end="607:65"><literal type="string" pos:start="607:59" pos:end="607:65">"order"</literal></expr></argument>, <argument pos:start="607:68" pos:end="607:73"><expr pos:start="607:68" pos:end="607:73"><name pos:start="607:68" pos:end="607:73">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="607:77" pos:end="613:21">{<block_content pos:start="609:25" pos:end="611:73">

                        <expr_stmt pos:start="609:25" pos:end="609:50"><expr pos:start="609:25" pos:end="609:49"><call pos:start="609:25" pos:end="609:49"><name pos:start="609:25" pos:end="609:44">validate_bootdevices</name><argument_list pos:start="609:45" pos:end="609:49">(<argument pos:start="609:46" pos:end="609:48"><expr pos:start="609:46" pos:end="609:48"><name pos:start="609:46" pos:end="609:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="611:25" pos:end="611:73"><expr pos:start="611:25" pos:end="611:72"><call pos:start="611:25" pos:end="611:72"><name pos:start="611:25" pos:end="611:31">pstrcpy</name><argument_list pos:start="611:32" pos:end="611:72">(<argument pos:start="611:33" pos:end="611:44"><expr pos:start="611:33" pos:end="611:44"><name pos:start="611:33" pos:end="611:44">boot_devices</name></expr></argument>, <argument pos:start="611:47" pos:end="611:66"><expr pos:start="611:47" pos:end="611:66"><sizeof pos:start="611:47" pos:end="611:66">sizeof<argument_list pos:start="611:53" pos:end="611:66">(<argument pos:start="611:54" pos:end="611:65"><expr pos:start="611:54" pos:end="611:65"><name pos:start="611:54" pos:end="611:65">boot_devices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="611:69" pos:end="611:71"><expr pos:start="611:69" pos:end="611:71"><name pos:start="611:69" pos:end="611:71">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="615:21" pos:end="663:21"><if pos:start="615:21" pos:end="663:21">if <condition pos:start="615:24" pos:end="615:32">(<expr pos:start="615:25" pos:end="615:31"><operator pos:start="615:25" pos:end="615:25">!</operator><name pos:start="615:26" pos:end="615:31">legacy</name></expr>)</condition> <block pos:start="615:34" pos:end="663:21">{<block_content pos:start="617:25" pos:end="661:51">

                        <if_stmt pos:start="617:25" pos:end="631:25"><if pos:start="617:25" pos:end="631:25">if <condition pos:start="617:28" pos:end="619:60">(<expr pos:start="617:29" pos:end="619:59"><call pos:start="617:29" pos:end="619:59"><name pos:start="617:29" pos:end="617:43">get_param_value</name><argument_list pos:start="617:44" pos:end="619:59">(<argument pos:start="617:45" pos:end="617:47"><expr pos:start="617:45" pos:end="617:47"><name pos:start="617:45" pos:end="617:47">buf</name></expr></argument>, <argument pos:start="617:50" pos:end="617:60"><expr pos:start="617:50" pos:end="617:60"><sizeof pos:start="617:50" pos:end="617:60">sizeof<argument_list pos:start="617:56" pos:end="617:60">(<argument pos:start="617:57" pos:end="617:59"><expr pos:start="617:57" pos:end="617:59"><name pos:start="617:57" pos:end="617:59">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="619:45" pos:end="619:50"><expr pos:start="619:45" pos:end="619:50"><literal type="string" pos:start="619:45" pos:end="619:50">"once"</literal></expr></argument>, <argument pos:start="619:53" pos:end="619:58"><expr pos:start="619:53" pos:end="619:58"><name pos:start="619:53" pos:end="619:58">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="619:62" pos:end="631:25">{<block_content pos:start="621:29" pos:end="629:71">

                            <expr_stmt pos:start="621:29" pos:end="621:54"><expr pos:start="621:29" pos:end="621:53"><call pos:start="621:29" pos:end="621:53"><name pos:start="621:29" pos:end="621:48">validate_bootdevices</name><argument_list pos:start="621:49" pos:end="621:53">(<argument pos:start="621:50" pos:end="621:52"><expr pos:start="621:50" pos:end="621:52"><name pos:start="621:50" pos:end="621:52">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="623:29" pos:end="623:75"><expr pos:start="623:29" pos:end="623:74"><name pos:start="623:29" pos:end="623:49">standard_boot_devices</name> <operator pos:start="623:51" pos:end="623:51">=</operator> <call pos:start="623:53" pos:end="623:74"><name pos:start="623:53" pos:end="623:60">g_strdup</name><argument_list pos:start="623:61" pos:end="623:74">(<argument pos:start="623:62" pos:end="623:73"><expr pos:start="623:62" pos:end="623:73"><name pos:start="623:62" pos:end="623:73">boot_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="625:29" pos:end="625:77"><expr pos:start="625:29" pos:end="625:76"><call pos:start="625:29" pos:end="625:76"><name pos:start="625:29" pos:end="625:35">pstrcpy</name><argument_list pos:start="625:36" pos:end="625:76">(<argument pos:start="625:37" pos:end="625:48"><expr pos:start="625:37" pos:end="625:48"><name pos:start="625:37" pos:end="625:48">boot_devices</name></expr></argument>, <argument pos:start="625:51" pos:end="625:70"><expr pos:start="625:51" pos:end="625:70"><sizeof pos:start="625:51" pos:end="625:70">sizeof<argument_list pos:start="625:57" pos:end="625:70">(<argument pos:start="625:58" pos:end="625:69"><expr pos:start="625:58" pos:end="625:69"><name pos:start="625:58" pos:end="625:69">boot_devices</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="625:73" pos:end="625:75"><expr pos:start="625:73" pos:end="625:75"><name pos:start="625:73" pos:end="625:75">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="627:29" pos:end="629:71"><expr pos:start="627:29" pos:end="629:70"><call pos:start="627:29" pos:end="629:70"><name pos:start="627:29" pos:end="627:47">qemu_register_reset</name><argument_list pos:start="627:48" pos:end="629:70">(<argument pos:start="627:49" pos:end="627:68"><expr pos:start="627:49" pos:end="627:68"><name pos:start="627:49" pos:end="627:68">restore_boot_devices</name></expr></argument>,

                                                <argument pos:start="629:49" pos:end="629:69"><expr pos:start="629:49" pos:end="629:69"><name pos:start="629:49" pos:end="629:69">standard_boot_devices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="633:25" pos:end="657:25"><if pos:start="633:25" pos:end="657:25">if <condition pos:start="633:28" pos:end="635:60">(<expr pos:start="633:29" pos:end="635:59"><call pos:start="633:29" pos:end="635:59"><name pos:start="633:29" pos:end="633:43">get_param_value</name><argument_list pos:start="633:44" pos:end="635:59">(<argument pos:start="633:45" pos:end="633:47"><expr pos:start="633:45" pos:end="633:47"><name pos:start="633:45" pos:end="633:47">buf</name></expr></argument>, <argument pos:start="633:50" pos:end="633:60"><expr pos:start="633:50" pos:end="633:60"><sizeof pos:start="633:50" pos:end="633:60">sizeof<argument_list pos:start="633:56" pos:end="633:60">(<argument pos:start="633:57" pos:end="633:59"><expr pos:start="633:57" pos:end="633:59"><name pos:start="633:57" pos:end="633:59">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                            <argument pos:start="635:45" pos:end="635:50"><expr pos:start="635:45" pos:end="635:50"><literal type="string" pos:start="635:45" pos:end="635:50">"menu"</literal></expr></argument>, <argument pos:start="635:53" pos:end="635:58"><expr pos:start="635:53" pos:end="635:58"><name pos:start="635:53" pos:end="635:58">optarg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="635:62" pos:end="657:25">{<block_content pos:start="637:29" pos:end="655:29">

                            <if_stmt pos:start="637:29" pos:end="655:29"><if pos:start="637:29" pos:end="641:29">if <condition pos:start="637:32" pos:end="637:51">(<expr pos:start="637:33" pos:end="637:50"><operator pos:start="637:33" pos:end="637:33">!</operator><call pos:start="637:34" pos:end="637:50"><name pos:start="637:34" pos:end="637:39">strcmp</name><argument_list pos:start="637:40" pos:end="637:50">(<argument pos:start="637:41" pos:end="637:43"><expr pos:start="637:41" pos:end="637:43"><name pos:start="637:41" pos:end="637:43">buf</name></expr></argument>, <argument pos:start="637:46" pos:end="637:49"><expr pos:start="637:46" pos:end="637:49"><literal type="string" pos:start="637:46" pos:end="637:49">"on"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="637:53" pos:end="641:29">{<block_content pos:start="639:33" pos:end="639:46">

                                <expr_stmt pos:start="639:33" pos:end="639:46"><expr pos:start="639:33" pos:end="639:45"><name pos:start="639:33" pos:end="639:41">boot_menu</name> <operator pos:start="639:43" pos:end="639:43">=</operator> <literal type="number" pos:start="639:45" pos:end="639:45">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="641:31" pos:end="645:29">else if <condition pos:start="641:39" pos:end="641:59">(<expr pos:start="641:40" pos:end="641:58"><operator pos:start="641:40" pos:end="641:40">!</operator><call pos:start="641:41" pos:end="641:58"><name pos:start="641:41" pos:end="641:46">strcmp</name><argument_list pos:start="641:47" pos:end="641:58">(<argument pos:start="641:48" pos:end="641:50"><expr pos:start="641:48" pos:end="641:50"><name pos:start="641:48" pos:end="641:50">buf</name></expr></argument>, <argument pos:start="641:53" pos:end="641:57"><expr pos:start="641:53" pos:end="641:57"><literal type="string" pos:start="641:53" pos:end="641:57">"off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="641:61" pos:end="645:29">{<block_content pos:start="643:33" pos:end="643:46">

                                <expr_stmt pos:start="643:33" pos:end="643:46"><expr pos:start="643:33" pos:end="643:45"><name pos:start="643:33" pos:end="643:41">boot_menu</name> <operator pos:start="643:43" pos:end="643:43">=</operator> <literal type="number" pos:start="643:45" pos:end="643:45">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="645:31" pos:end="655:29">else <block pos:start="645:36" pos:end="655:29">{<block_content pos:start="647:33" pos:end="653:40">

                                <expr_stmt pos:start="647:33" pos:end="651:45"><expr pos:start="647:33" pos:end="651:44"><call pos:start="647:33" pos:end="651:44"><name pos:start="647:33" pos:end="647:39">fprintf</name><argument_list pos:start="647:40" pos:end="651:44">(<argument pos:start="647:41" pos:end="647:46"><expr pos:start="647:41" pos:end="647:46"><name pos:start="647:41" pos:end="647:46">stderr</name></expr></argument>,

                                        <argument pos:start="649:41" pos:end="649:75"><expr pos:start="649:41" pos:end="649:75"><literal type="string" pos:start="649:41" pos:end="649:75">"qemu: invalid option value '%s'\n"</literal></expr></argument>,

                                        <argument pos:start="651:41" pos:end="651:43"><expr pos:start="651:41" pos:end="651:43"><name pos:start="651:41" pos:end="651:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="653:33" pos:end="653:40"><expr pos:start="653:33" pos:end="653:39"><call pos:start="653:33" pos:end="653:39"><name pos:start="653:33" pos:end="653:36">exit</name><argument_list pos:start="653:37" pos:end="653:39">(<argument pos:start="653:38" pos:end="653:38"><expr pos:start="653:38" pos:end="653:38"><literal type="number" pos:start="653:38" pos:end="653:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="659:25" pos:end="661:51"><expr pos:start="659:25" pos:end="661:50"><call pos:start="659:25" pos:end="661:50"><name pos:start="659:25" pos:end="659:39">qemu_opts_parse</name><argument_list pos:start="659:40" pos:end="661:50">(<argument pos:start="659:41" pos:end="659:67"><expr pos:start="659:41" pos:end="659:67"><call pos:start="659:41" pos:end="659:67"><name pos:start="659:41" pos:end="659:54">qemu_find_opts</name><argument_list pos:start="659:55" pos:end="659:67">(<argument pos:start="659:56" pos:end="659:66"><expr pos:start="659:56" pos:end="659:66"><literal type="string" pos:start="659:56" pos:end="659:66">"boot-opts"</literal></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="661:41" pos:end="661:46"><expr pos:start="661:41" pos:end="661:46"><name pos:start="661:41" pos:end="661:46">optarg</name></expr></argument>, <argument pos:start="661:49" pos:end="661:49"><expr pos:start="661:49" pos:end="661:49"><literal type="number" pos:start="661:49" pos:end="661:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="667:17" pos:end="667:22">break;</break>

            <case pos:start="669:13" pos:end="669:33">case <expr pos:start="669:18" pos:end="669:32"><name pos:start="669:18" pos:end="669:32">QEMU_OPTION_fda</name></expr>:</case>

            <case pos:start="671:13" pos:end="671:33">case <expr pos:start="671:18" pos:end="671:32"><name pos:start="671:18" pos:end="671:32">QEMU_OPTION_fdb</name></expr>:</case>

                <expr_stmt pos:start="673:17" pos:end="675:43"><expr pos:start="673:17" pos:end="675:42"><call pos:start="673:17" pos:end="675:42"><name pos:start="673:17" pos:end="673:25">drive_add</name><argument_list pos:start="673:26" pos:end="675:42">(<argument pos:start="673:27" pos:end="673:35"><expr pos:start="673:27" pos:end="673:35"><name pos:start="673:27" pos:end="673:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="673:38" pos:end="673:66"><expr pos:start="673:38" pos:end="673:66"><name pos:start="673:38" pos:end="673:48"><name pos:start="673:38" pos:end="673:41">popt</name><operator pos:start="673:42" pos:end="673:43">-&gt;</operator><name pos:start="673:44" pos:end="673:48">index</name></name> <operator pos:start="673:50" pos:end="673:50">-</operator> <name pos:start="673:52" pos:end="673:66">QEMU_OPTION_fda</name></expr></argument>,

                          <argument pos:start="675:27" pos:end="675:32"><expr pos:start="675:27" pos:end="675:32"><name pos:start="675:27" pos:end="675:32">optarg</name></expr></argument>, <argument pos:start="675:35" pos:end="675:41"><expr pos:start="675:35" pos:end="675:41"><name pos:start="675:35" pos:end="675:41">FD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="677:17" pos:end="677:22">break;</break>

            <case pos:start="679:13" pos:end="679:43">case <expr pos:start="679:18" pos:end="679:42"><name pos:start="679:18" pos:end="679:42">QEMU_OPTION_no_fd_bootchk</name></expr>:</case>

                <expr_stmt pos:start="681:17" pos:end="681:31"><expr pos:start="681:17" pos:end="681:30"><name pos:start="681:17" pos:end="681:26">fd_bootchk</name> <operator pos:start="681:28" pos:end="681:28">=</operator> <literal type="number" pos:start="681:30" pos:end="681:30">0</literal></expr>;</expr_stmt>

                <break pos:start="683:17" pos:end="683:22">break;</break>

            <case pos:start="685:13" pos:end="685:36">case <expr pos:start="685:18" pos:end="685:35"><name pos:start="685:18" pos:end="685:35">QEMU_OPTION_netdev</name></expr>:</case>

                <if_stmt pos:start="687:17" pos:end="691:17"><if pos:start="687:17" pos:end="691:17">if <condition pos:start="687:20" pos:end="687:77">(<expr pos:start="687:21" pos:end="687:76"><call pos:start="687:21" pos:end="687:70"><name pos:start="687:21" pos:end="687:36">net_client_parse</name><argument_list pos:start="687:37" pos:end="687:70">(<argument pos:start="687:38" pos:end="687:61"><expr pos:start="687:38" pos:end="687:61"><call pos:start="687:38" pos:end="687:61"><name pos:start="687:38" pos:end="687:51">qemu_find_opts</name><argument_list pos:start="687:52" pos:end="687:61">(<argument pos:start="687:53" pos:end="687:60"><expr pos:start="687:53" pos:end="687:60"><literal type="string" pos:start="687:53" pos:end="687:60">"netdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="687:64" pos:end="687:69"><expr pos:start="687:64" pos:end="687:69"><name pos:start="687:64" pos:end="687:69">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="687:72" pos:end="687:73">==</operator> <operator pos:start="687:75" pos:end="687:75">-</operator><literal type="number" pos:start="687:76" pos:end="687:76">1</literal></expr>)</condition> <block pos:start="687:79" pos:end="691:17">{<block_content pos:start="689:21" pos:end="689:28">

                    <expr_stmt pos:start="689:21" pos:end="689:28"><expr pos:start="689:21" pos:end="689:27"><call pos:start="689:21" pos:end="689:27"><name pos:start="689:21" pos:end="689:24">exit</name><argument_list pos:start="689:25" pos:end="689:27">(<argument pos:start="689:26" pos:end="689:26"><expr pos:start="689:26" pos:end="689:26"><literal type="number" pos:start="689:26" pos:end="689:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="693:17" pos:end="693:22">break;</break>

            <case pos:start="695:13" pos:end="695:33">case <expr pos:start="695:18" pos:end="695:32"><name pos:start="695:18" pos:end="695:32">QEMU_OPTION_net</name></expr>:</case>

                <if_stmt pos:start="697:17" pos:end="701:17"><if pos:start="697:17" pos:end="701:17">if <condition pos:start="697:20" pos:end="697:74">(<expr pos:start="697:21" pos:end="697:73"><call pos:start="697:21" pos:end="697:67"><name pos:start="697:21" pos:end="697:36">net_client_parse</name><argument_list pos:start="697:37" pos:end="697:67">(<argument pos:start="697:38" pos:end="697:58"><expr pos:start="697:38" pos:end="697:58"><call pos:start="697:38" pos:end="697:58"><name pos:start="697:38" pos:end="697:51">qemu_find_opts</name><argument_list pos:start="697:52" pos:end="697:58">(<argument pos:start="697:53" pos:end="697:57"><expr pos:start="697:53" pos:end="697:57"><literal type="string" pos:start="697:53" pos:end="697:57">"net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="697:61" pos:end="697:66"><expr pos:start="697:61" pos:end="697:66"><name pos:start="697:61" pos:end="697:66">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="697:69" pos:end="697:70">==</operator> <operator pos:start="697:72" pos:end="697:72">-</operator><literal type="number" pos:start="697:73" pos:end="697:73">1</literal></expr>)</condition> <block pos:start="697:76" pos:end="701:17">{<block_content pos:start="699:21" pos:end="699:28">

                    <expr_stmt pos:start="699:21" pos:end="699:28"><expr pos:start="699:21" pos:end="699:27"><call pos:start="699:21" pos:end="699:27"><name pos:start="699:21" pos:end="699:24">exit</name><argument_list pos:start="699:25" pos:end="699:27">(<argument pos:start="699:26" pos:end="699:26"><expr pos:start="699:26" pos:end="699:26"><literal type="number" pos:start="699:26" pos:end="699:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="703:17" pos:end="706:0">break;</break>

<cpp:ifdef pos:start="705:1" pos:end="705:19">#<cpp:directive pos:start="705:2" pos:end="705:6">ifdef</cpp:directive> <name pos:start="705:8" pos:end="705:19">CONFIG_SLIRP</name></cpp:ifdef>

            <case pos:start="707:13" pos:end="707:34">case <expr pos:start="707:18" pos:end="707:33"><name pos:start="707:18" pos:end="707:33">QEMU_OPTION_tftp</name></expr>:</case>

                <expr_stmt pos:start="709:17" pos:end="709:44"><expr pos:start="709:17" pos:end="709:43"><name pos:start="709:17" pos:end="709:34">legacy_tftp_prefix</name> <operator pos:start="709:36" pos:end="709:36">=</operator> <name pos:start="709:38" pos:end="709:43">optarg</name></expr>;</expr_stmt>

                <break pos:start="711:17" pos:end="711:22">break;</break>

            <case pos:start="713:13" pos:end="713:35">case <expr pos:start="713:18" pos:end="713:34"><name pos:start="713:18" pos:end="713:34">QEMU_OPTION_bootp</name></expr>:</case>

                <expr_stmt pos:start="715:17" pos:end="715:47"><expr pos:start="715:17" pos:end="715:46"><name pos:start="715:17" pos:end="715:37">legacy_bootp_filename</name> <operator pos:start="715:39" pos:end="715:39">=</operator> <name pos:start="715:41" pos:end="715:46">optarg</name></expr>;</expr_stmt>

                <break pos:start="717:17" pos:end="717:22">break;</break>

            <case pos:start="719:13" pos:end="719:35">case <expr pos:start="719:18" pos:end="719:34"><name pos:start="719:18" pos:end="719:34">QEMU_OPTION_redir</name></expr>:</case>

                <if_stmt pos:start="721:17" pos:end="723:28"><if pos:start="721:17" pos:end="723:28">if <condition pos:start="721:20" pos:end="721:48">(<expr pos:start="721:21" pos:end="721:47"><call pos:start="721:21" pos:end="721:43"><name pos:start="721:21" pos:end="721:35">net_slirp_redir</name><argument_list pos:start="721:36" pos:end="721:43">(<argument pos:start="721:37" pos:end="721:42"><expr pos:start="721:37" pos:end="721:42"><name pos:start="721:37" pos:end="721:42">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="721:45" pos:end="721:45">&lt;</operator> <literal type="number" pos:start="721:47" pos:end="721:47">0</literal></expr>)</condition><block type="pseudo" pos:start="723:21" pos:end="723:28"><block_content pos:start="723:21" pos:end="723:28">

                    <expr_stmt pos:start="723:21" pos:end="723:28"><expr pos:start="723:21" pos:end="723:27"><call pos:start="723:21" pos:end="723:27"><name pos:start="723:21" pos:end="723:24">exit</name><argument_list pos:start="723:25" pos:end="723:27">(<argument pos:start="723:26" pos:end="723:26"><expr pos:start="723:26" pos:end="723:26"><literal type="number" pos:start="723:26" pos:end="723:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="725:17" pos:end="728:0">break;</break>

<cpp:endif pos:start="727:1" pos:end="727:6">#<cpp:directive pos:start="727:2" pos:end="727:6">endif</cpp:directive></cpp:endif>

            <case pos:start="729:13" pos:end="729:32">case <expr pos:start="729:18" pos:end="729:31"><name pos:start="729:18" pos:end="729:31">QEMU_OPTION_bt</name></expr>:</case>

                <expr_stmt pos:start="731:17" pos:end="731:50"><expr pos:start="731:17" pos:end="731:49"><call pos:start="731:17" pos:end="731:49"><name pos:start="731:17" pos:end="731:33">add_device_config</name><argument_list pos:start="731:34" pos:end="731:49">(<argument pos:start="731:35" pos:end="731:40"><expr pos:start="731:35" pos:end="731:40"><name pos:start="731:35" pos:end="731:40">DEV_BT</name></expr></argument>, <argument pos:start="731:43" pos:end="731:48"><expr pos:start="731:43" pos:end="731:48"><name pos:start="731:43" pos:end="731:48">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="733:17" pos:end="733:22">break;</break>

            <case pos:start="735:13" pos:end="735:40">case <expr pos:start="735:18" pos:end="735:39"><name pos:start="735:18" pos:end="735:39">QEMU_OPTION_audio_help</name></expr>:</case>

                <if_stmt pos:start="737:17" pos:end="743:17"><if pos:start="737:17" pos:end="743:17">if <condition pos:start="737:20" pos:end="737:41">(<expr pos:start="737:21" pos:end="737:40"><operator pos:start="737:21" pos:end="737:21">!</operator><operator pos:start="737:22" pos:end="737:22">(</operator><call pos:start="737:23" pos:end="737:39"><name pos:start="737:23" pos:end="737:37">audio_available</name><argument_list pos:start="737:38" pos:end="737:39">()</argument_list></call><operator pos:start="737:40" pos:end="737:40">)</operator></expr>)</condition> <block pos:start="737:43" pos:end="743:17">{<block_content pos:start="739:21" pos:end="741:28">

                    <expr_stmt pos:start="739:21" pos:end="739:84"><expr pos:start="739:21" pos:end="739:83"><call pos:start="739:21" pos:end="739:83"><name pos:start="739:21" pos:end="739:26">printf</name><argument_list pos:start="739:27" pos:end="739:83">(<argument pos:start="739:28" pos:end="739:70"><expr pos:start="739:28" pos:end="739:70"><literal type="string" pos:start="739:28" pos:end="739:70">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="739:73" pos:end="739:82"><expr pos:start="739:73" pos:end="739:82"><name pos:start="739:73" pos:end="739:82"><name pos:start="739:73" pos:end="739:76">popt</name><operator pos:start="739:77" pos:end="739:78">-&gt;</operator><name pos:start="739:79" pos:end="739:82">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="741:21" pos:end="741:28"><expr pos:start="741:21" pos:end="741:27"><call pos:start="741:21" pos:end="741:27"><name pos:start="741:21" pos:end="741:24">exit</name><argument_list pos:start="741:25" pos:end="741:27">(<argument pos:start="741:26" pos:end="741:26"><expr pos:start="741:26" pos:end="741:26"><literal type="number" pos:start="741:26" pos:end="741:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="745:17" pos:end="745:28"><expr pos:start="745:17" pos:end="745:27"><call pos:start="745:17" pos:end="745:27"><name pos:start="745:17" pos:end="745:24">AUD_help</name> <argument_list pos:start="745:26" pos:end="745:27">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="747:17" pos:end="747:25"><expr pos:start="747:17" pos:end="747:24"><call pos:start="747:17" pos:end="747:24"><name pos:start="747:17" pos:end="747:20">exit</name> <argument_list pos:start="747:22" pos:end="747:24">(<argument pos:start="747:23" pos:end="747:23"><expr pos:start="747:23" pos:end="747:23"><literal type="number" pos:start="747:23" pos:end="747:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="749:17" pos:end="749:22">break;</break>

            <case pos:start="751:13" pos:end="751:37">case <expr pos:start="751:18" pos:end="751:36"><name pos:start="751:18" pos:end="751:36">QEMU_OPTION_soundhw</name></expr>:</case>

                <if_stmt pos:start="753:17" pos:end="759:17"><if pos:start="753:17" pos:end="759:17">if <condition pos:start="753:20" pos:end="753:41">(<expr pos:start="753:21" pos:end="753:40"><operator pos:start="753:21" pos:end="753:21">!</operator><operator pos:start="753:22" pos:end="753:22">(</operator><call pos:start="753:23" pos:end="753:39"><name pos:start="753:23" pos:end="753:37">audio_available</name><argument_list pos:start="753:38" pos:end="753:39">()</argument_list></call><operator pos:start="753:40" pos:end="753:40">)</operator></expr>)</condition> <block pos:start="753:43" pos:end="759:17">{<block_content pos:start="755:21" pos:end="757:28">

                    <expr_stmt pos:start="755:21" pos:end="755:84"><expr pos:start="755:21" pos:end="755:83"><call pos:start="755:21" pos:end="755:83"><name pos:start="755:21" pos:end="755:26">printf</name><argument_list pos:start="755:27" pos:end="755:83">(<argument pos:start="755:28" pos:end="755:70"><expr pos:start="755:28" pos:end="755:70"><literal type="string" pos:start="755:28" pos:end="755:70">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="755:73" pos:end="755:82"><expr pos:start="755:73" pos:end="755:82"><name pos:start="755:73" pos:end="755:82"><name pos:start="755:73" pos:end="755:76">popt</name><operator pos:start="755:77" pos:end="755:78">-&gt;</operator><name pos:start="755:79" pos:end="755:82">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="757:21" pos:end="757:28"><expr pos:start="757:21" pos:end="757:27"><call pos:start="757:21" pos:end="757:27"><name pos:start="757:21" pos:end="757:24">exit</name><argument_list pos:start="757:25" pos:end="757:27">(<argument pos:start="757:26" pos:end="757:26"><expr pos:start="757:26" pos:end="757:26"><literal type="number" pos:start="757:26" pos:end="757:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="761:17" pos:end="761:40"><expr pos:start="761:17" pos:end="761:39"><call pos:start="761:17" pos:end="761:39"><name pos:start="761:17" pos:end="761:30">select_soundhw</name> <argument_list pos:start="761:32" pos:end="761:39">(<argument pos:start="761:33" pos:end="761:38"><expr pos:start="761:33" pos:end="761:38"><name pos:start="761:33" pos:end="761:38">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="763:17" pos:end="763:22">break;</break>

            <case pos:start="765:13" pos:end="765:31">case <expr pos:start="765:18" pos:end="765:30"><name pos:start="765:18" pos:end="765:30">QEMU_OPTION_h</name></expr>:</case>

                <expr_stmt pos:start="767:17" pos:end="767:24"><expr pos:start="767:17" pos:end="767:23"><call pos:start="767:17" pos:end="767:23"><name pos:start="767:17" pos:end="767:20">help</name><argument_list pos:start="767:21" pos:end="767:23">(<argument pos:start="767:22" pos:end="767:22"><expr pos:start="767:22" pos:end="767:22"><literal type="number" pos:start="767:22" pos:end="767:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="769:17" pos:end="769:22">break;</break>

            <case pos:start="771:13" pos:end="771:37">case <expr pos:start="771:18" pos:end="771:36"><name pos:start="771:18" pos:end="771:36">QEMU_OPTION_version</name></expr>:</case>

                <expr_stmt pos:start="773:17" pos:end="773:26"><expr pos:start="773:17" pos:end="773:25"><call pos:start="773:17" pos:end="773:25"><name pos:start="773:17" pos:end="773:23">version</name><argument_list pos:start="773:24" pos:end="773:25">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="775:17" pos:end="775:24"><expr pos:start="775:17" pos:end="775:23"><call pos:start="775:17" pos:end="775:23"><name pos:start="775:17" pos:end="775:20">exit</name><argument_list pos:start="775:21" pos:end="775:23">(<argument pos:start="775:22" pos:end="775:22"><expr pos:start="775:22" pos:end="775:22"><literal type="number" pos:start="775:22" pos:end="775:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="777:17" pos:end="777:22">break;</break>

            <case pos:start="779:13" pos:end="779:31">case <expr pos:start="779:18" pos:end="779:30"><name pos:start="779:18" pos:end="779:30">QEMU_OPTION_m</name></expr>:</case> <block pos:start="779:33" pos:end="811:13">{<block_content pos:start="781:17" pos:end="809:22">

                <decl_stmt pos:start="781:17" pos:end="781:30"><decl pos:start="781:17" pos:end="781:29"><type pos:start="781:17" pos:end="781:23"><name pos:start="781:17" pos:end="781:23">int64_t</name></type> <name pos:start="781:25" pos:end="781:29">value</name></decl>;</decl_stmt>

                <decl_stmt pos:start="783:17" pos:end="783:26"><decl pos:start="783:17" pos:end="783:25"><type pos:start="783:17" pos:end="783:22"><name pos:start="783:17" pos:end="783:20">char</name> <modifier pos:start="783:22" pos:end="783:22">*</modifier></type><name pos:start="783:23" pos:end="783:25">end</name></decl>;</decl_stmt>



                <expr_stmt pos:start="787:17" pos:end="787:46"><expr pos:start="787:17" pos:end="787:45"><name pos:start="787:17" pos:end="787:21">value</name> <operator pos:start="787:23" pos:end="787:23">=</operator> <call pos:start="787:25" pos:end="787:45"><name pos:start="787:25" pos:end="787:31">strtosz</name><argument_list pos:start="787:32" pos:end="787:45">(<argument pos:start="787:33" pos:end="787:38"><expr pos:start="787:33" pos:end="787:38"><name pos:start="787:33" pos:end="787:38">optarg</name></expr></argument>, <argument pos:start="787:41" pos:end="787:44"><expr pos:start="787:41" pos:end="787:44"><operator pos:start="787:41" pos:end="787:41">&amp;</operator><name pos:start="787:42" pos:end="787:44">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="789:17" pos:end="795:17"><if pos:start="789:17" pos:end="795:17">if <condition pos:start="789:20" pos:end="789:38">(<expr pos:start="789:21" pos:end="789:37"><name pos:start="789:21" pos:end="789:25">value</name> <operator pos:start="789:27" pos:end="789:27">&lt;</operator> <literal type="number" pos:start="789:29" pos:end="789:29">0</literal> <operator pos:start="789:31" pos:end="789:32">||</operator> <operator pos:start="789:34" pos:end="789:34">*</operator><name pos:start="789:35" pos:end="789:37">end</name></expr>)</condition> <block pos:start="789:40" pos:end="795:17">{<block_content pos:start="791:21" pos:end="793:28">

                    <expr_stmt pos:start="791:21" pos:end="791:76"><expr pos:start="791:21" pos:end="791:75"><call pos:start="791:21" pos:end="791:75"><name pos:start="791:21" pos:end="791:27">fprintf</name><argument_list pos:start="791:28" pos:end="791:75">(<argument pos:start="791:29" pos:end="791:34"><expr pos:start="791:29" pos:end="791:34"><name pos:start="791:29" pos:end="791:34">stderr</name></expr></argument>, <argument pos:start="791:37" pos:end="791:66"><expr pos:start="791:37" pos:end="791:66"><literal type="string" pos:start="791:37" pos:end="791:66">"qemu: invalid ram size: %s\n"</literal></expr></argument>, <argument pos:start="791:69" pos:end="791:74"><expr pos:start="791:69" pos:end="791:74"><name pos:start="791:69" pos:end="791:74">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="793:21" pos:end="793:28"><expr pos:start="793:21" pos:end="793:27"><call pos:start="793:21" pos:end="793:27"><name pos:start="793:21" pos:end="793:24">exit</name><argument_list pos:start="793:25" pos:end="793:27">(<argument pos:start="793:26" pos:end="793:26"><expr pos:start="793:26" pos:end="793:26"><literal type="number" pos:start="793:26" pos:end="793:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="799:17" pos:end="805:17"><if pos:start="799:17" pos:end="805:17">if <condition pos:start="799:20" pos:end="799:57">(<expr pos:start="799:21" pos:end="799:56"><name pos:start="799:21" pos:end="799:25">value</name> <operator pos:start="799:27" pos:end="799:28">!=</operator> <operator pos:start="799:30" pos:end="799:30">(</operator><name pos:start="799:31" pos:end="799:38">uint64_t</name><operator pos:start="799:39" pos:end="799:39">)</operator><operator pos:start="799:40" pos:end="799:40">(</operator><name pos:start="799:41" pos:end="799:50">ram_addr_t</name><operator pos:start="799:51" pos:end="799:51">)</operator><name pos:start="799:52" pos:end="799:56">value</name></expr>)</condition> <block pos:start="799:59" pos:end="805:17">{<block_content pos:start="801:21" pos:end="803:28">

                    <expr_stmt pos:start="801:21" pos:end="801:66"><expr pos:start="801:21" pos:end="801:65"><call pos:start="801:21" pos:end="801:65"><name pos:start="801:21" pos:end="801:27">fprintf</name><argument_list pos:start="801:28" pos:end="801:65">(<argument pos:start="801:29" pos:end="801:34"><expr pos:start="801:29" pos:end="801:34"><name pos:start="801:29" pos:end="801:34">stderr</name></expr></argument>, <argument pos:start="801:37" pos:end="801:64"><expr pos:start="801:37" pos:end="801:64"><literal type="string" pos:start="801:37" pos:end="801:64">"qemu: ram size too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="803:21" pos:end="803:28"><expr pos:start="803:21" pos:end="803:27"><call pos:start="803:21" pos:end="803:27"><name pos:start="803:21" pos:end="803:24">exit</name><argument_list pos:start="803:25" pos:end="803:27">(<argument pos:start="803:26" pos:end="803:26"><expr pos:start="803:26" pos:end="803:26"><literal type="number" pos:start="803:26" pos:end="803:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:33"><expr pos:start="807:17" pos:end="807:32"><name pos:start="807:17" pos:end="807:24">ram_size</name> <operator pos:start="807:26" pos:end="807:26">=</operator> <name pos:start="807:28" pos:end="807:32">value</name></expr>;</expr_stmt>

                <break pos:start="809:17" pos:end="809:22">break;</break>

            </block_content>}</block>

            <case pos:start="813:13" pos:end="813:37">case <expr pos:start="813:18" pos:end="813:36"><name pos:start="813:18" pos:end="813:36">QEMU_OPTION_mempath</name></expr>:</case>

                <expr_stmt pos:start="815:17" pos:end="815:34"><expr pos:start="815:17" pos:end="815:33"><name pos:start="815:17" pos:end="815:24">mem_path</name> <operator pos:start="815:26" pos:end="815:26">=</operator> <name pos:start="815:28" pos:end="815:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="817:17" pos:end="820:0">break;</break>

<cpp:ifdef pos:start="819:1" pos:end="819:19">#<cpp:directive pos:start="819:2" pos:end="819:6">ifdef</cpp:directive> <name pos:start="819:8" pos:end="819:19">MAP_POPULATE</name></cpp:ifdef>

            <case pos:start="821:13" pos:end="821:42">case <expr pos:start="821:18" pos:end="821:41"><name pos:start="821:18" pos:end="821:41">QEMU_OPTION_mem_prealloc</name></expr>:</case>

                <expr_stmt pos:start="823:17" pos:end="823:33"><expr pos:start="823:17" pos:end="823:32"><name pos:start="823:17" pos:end="823:28">mem_prealloc</name> <operator pos:start="823:30" pos:end="823:30">=</operator> <literal type="number" pos:start="823:32" pos:end="823:32">1</literal></expr>;</expr_stmt>

                <break pos:start="825:17" pos:end="828:0">break;</break>

<cpp:endif pos:start="827:1" pos:end="827:6">#<cpp:directive pos:start="827:2" pos:end="827:6">endif</cpp:directive></cpp:endif>

            <case pos:start="829:13" pos:end="829:31">case <expr pos:start="829:18" pos:end="829:30"><name pos:start="829:18" pos:end="829:30">QEMU_OPTION_d</name></expr>:</case>

                <expr_stmt pos:start="831:17" pos:end="831:34"><expr pos:start="831:17" pos:end="831:33"><name pos:start="831:17" pos:end="831:24">log_mask</name> <operator pos:start="831:26" pos:end="831:26">=</operator> <name pos:start="831:28" pos:end="831:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="833:17" pos:end="833:22">break;</break>

            <case pos:start="835:13" pos:end="835:31">case <expr pos:start="835:18" pos:end="835:30"><name pos:start="835:18" pos:end="835:30">QEMU_OPTION_D</name></expr>:</case>

                <expr_stmt pos:start="837:17" pos:end="837:34"><expr pos:start="837:17" pos:end="837:33"><name pos:start="837:17" pos:end="837:24">log_file</name> <operator pos:start="837:26" pos:end="837:26">=</operator> <name pos:start="837:28" pos:end="837:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="839:17" pos:end="839:22">break;</break>

            <case pos:start="841:13" pos:end="841:31">case <expr pos:start="841:18" pos:end="841:30"><name pos:start="841:18" pos:end="841:30">QEMU_OPTION_s</name></expr>:</case>

                <expr_stmt pos:start="843:17" pos:end="843:59"><expr pos:start="843:17" pos:end="843:58"><name pos:start="843:17" pos:end="843:27">gdbstub_dev</name> <operator pos:start="843:29" pos:end="843:29">=</operator> <literal type="string" pos:start="843:31" pos:end="843:37">"tcp::"</literal> <name pos:start="843:39" pos:end="843:58">DEFAULT_GDBSTUB_PORT</name></expr>;</expr_stmt>

                <break pos:start="845:17" pos:end="845:22">break;</break>

            <case pos:start="847:13" pos:end="847:33">case <expr pos:start="847:18" pos:end="847:32"><name pos:start="847:18" pos:end="847:32">QEMU_OPTION_gdb</name></expr>:</case>

                <expr_stmt pos:start="849:17" pos:end="849:37"><expr pos:start="849:17" pos:end="849:36"><name pos:start="849:17" pos:end="849:27">gdbstub_dev</name> <operator pos:start="849:29" pos:end="849:29">=</operator> <name pos:start="849:31" pos:end="849:36">optarg</name></expr>;</expr_stmt>

                <break pos:start="851:17" pos:end="851:22">break;</break>

            <case pos:start="853:13" pos:end="853:31">case <expr pos:start="853:18" pos:end="853:30"><name pos:start="853:18" pos:end="853:30">QEMU_OPTION_L</name></expr>:</case>

                <expr_stmt pos:start="855:17" pos:end="855:34"><expr pos:start="855:17" pos:end="855:33"><name pos:start="855:17" pos:end="855:24">data_dir</name> <operator pos:start="855:26" pos:end="855:26">=</operator> <name pos:start="855:28" pos:end="855:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="857:17" pos:end="857:22">break;</break>

            <case pos:start="859:13" pos:end="859:34">case <expr pos:start="859:18" pos:end="859:33"><name pos:start="859:18" pos:end="859:33">QEMU_OPTION_bios</name></expr>:</case>

                <expr_stmt pos:start="861:17" pos:end="861:35"><expr pos:start="861:17" pos:end="861:34"><name pos:start="861:17" pos:end="861:25">bios_name</name> <operator pos:start="861:27" pos:end="861:27">=</operator> <name pos:start="861:29" pos:end="861:34">optarg</name></expr>;</expr_stmt>

                <break pos:start="863:17" pos:end="863:22">break;</break>

            <case pos:start="865:13" pos:end="865:40">case <expr pos:start="865:18" pos:end="865:39"><name pos:start="865:18" pos:end="865:39">QEMU_OPTION_singlestep</name></expr>:</case>

                <expr_stmt pos:start="867:17" pos:end="867:31"><expr pos:start="867:17" pos:end="867:30"><name pos:start="867:17" pos:end="867:26">singlestep</name> <operator pos:start="867:28" pos:end="867:28">=</operator> <literal type="number" pos:start="867:30" pos:end="867:30">1</literal></expr>;</expr_stmt>

                <break pos:start="869:17" pos:end="869:22">break;</break>

            <case pos:start="871:13" pos:end="871:31">case <expr pos:start="871:18" pos:end="871:30"><name pos:start="871:18" pos:end="871:30">QEMU_OPTION_S</name></expr>:</case>

                <expr_stmt pos:start="873:17" pos:end="873:30"><expr pos:start="873:17" pos:end="873:29"><name pos:start="873:17" pos:end="873:25">autostart</name> <operator pos:start="873:27" pos:end="873:27">=</operator> <literal type="number" pos:start="873:29" pos:end="873:29">0</literal></expr>;</expr_stmt>

                <break pos:start="875:17" pos:end="875:22">break;</break>

	    <case pos:start="877:13" pos:end="877:31">case <expr pos:start="877:18" pos:end="877:30"><name pos:start="877:18" pos:end="877:30">QEMU_OPTION_k</name></expr>:</case>

		<expr_stmt pos:start="879:17" pos:end="879:41"><expr pos:start="879:17" pos:end="879:40"><name pos:start="879:17" pos:end="879:31">keyboard_layout</name> <operator pos:start="879:33" pos:end="879:33">=</operator> <name pos:start="879:35" pos:end="879:40">optarg</name></expr>;</expr_stmt>

		<break pos:start="881:17" pos:end="881:22">break;</break>

            <case pos:start="883:13" pos:end="883:39">case <expr pos:start="883:18" pos:end="883:38"><name pos:start="883:18" pos:end="883:38">QEMU_OPTION_localtime</name></expr>:</case>

                <expr_stmt pos:start="885:17" pos:end="885:28"><expr pos:start="885:17" pos:end="885:27"><name pos:start="885:17" pos:end="885:23">rtc_utc</name> <operator pos:start="885:25" pos:end="885:25">=</operator> <literal type="number" pos:start="885:27" pos:end="885:27">0</literal></expr>;</expr_stmt>

                <break pos:start="887:17" pos:end="887:22">break;</break>

            <case pos:start="889:13" pos:end="889:33">case <expr pos:start="889:18" pos:end="889:32"><name pos:start="889:18" pos:end="889:32">QEMU_OPTION_vga</name></expr>:</case>

                <expr_stmt pos:start="891:17" pos:end="891:38"><expr pos:start="891:17" pos:end="891:37"><call pos:start="891:17" pos:end="891:37"><name pos:start="891:17" pos:end="891:28">select_vgahw</name> <argument_list pos:start="891:30" pos:end="891:37">(<argument pos:start="891:31" pos:end="891:36"><expr pos:start="891:31" pos:end="891:36"><name pos:start="891:31" pos:end="891:36">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="893:17" pos:end="893:22">break;</break>

            <case pos:start="895:13" pos:end="895:31">case <expr pos:start="895:18" pos:end="895:30"><name pos:start="895:18" pos:end="895:30">QEMU_OPTION_g</name></expr>:</case>

                <block pos:start="897:17" pos:end="959:17">{<block_content pos:start="899:21" pos:end="957:42">

                    <decl_stmt pos:start="899:21" pos:end="899:34"><decl pos:start="899:21" pos:end="899:33"><type pos:start="899:21" pos:end="899:32"><specifier pos:start="899:21" pos:end="899:25">const</specifier> <name pos:start="899:27" pos:end="899:30">char</name> <modifier pos:start="899:32" pos:end="899:32">*</modifier></type><name pos:start="899:33" pos:end="899:33">p</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="901:21" pos:end="901:36"><decl pos:start="901:21" pos:end="901:25"><type pos:start="901:21" pos:end="901:23"><name pos:start="901:21" pos:end="901:23">int</name></type> <name pos:start="901:25" pos:end="901:25">w</name></decl>, <decl pos:start="901:28" pos:end="901:28"><type ref="prev" pos:start="901:21" pos:end="901:23"/><name pos:start="901:28" pos:end="901:28">h</name></decl>, <decl pos:start="901:31" pos:end="901:35"><type ref="prev" pos:start="901:21" pos:end="901:23"/><name pos:start="901:31" pos:end="901:35">depth</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="903:21" pos:end="903:31"><expr pos:start="903:21" pos:end="903:30"><name pos:start="903:21" pos:end="903:21">p</name> <operator pos:start="903:23" pos:end="903:23">=</operator> <name pos:start="903:25" pos:end="903:30">optarg</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="905:21" pos:end="905:51"><expr pos:start="905:21" pos:end="905:50"><name pos:start="905:21" pos:end="905:21">w</name> <operator pos:start="905:23" pos:end="905:23">=</operator> <call pos:start="905:25" pos:end="905:50"><name pos:start="905:25" pos:end="905:30">strtol</name><argument_list pos:start="905:31" pos:end="905:50">(<argument pos:start="905:32" pos:end="905:32"><expr pos:start="905:32" pos:end="905:32"><name pos:start="905:32" pos:end="905:32">p</name></expr></argument>, <argument pos:start="905:35" pos:end="905:45"><expr pos:start="905:35" pos:end="905:45"><operator pos:start="905:35" pos:end="905:35">(</operator><name pos:start="905:36" pos:end="905:39">char</name> <operator pos:start="905:41" pos:end="905:41">*</operator><operator pos:start="905:42" pos:end="905:42">*</operator><operator pos:start="905:43" pos:end="905:43">)</operator><operator pos:start="905:44" pos:end="905:44">&amp;</operator><name pos:start="905:45" pos:end="905:45">p</name></expr></argument>, <argument pos:start="905:48" pos:end="905:49"><expr pos:start="905:48" pos:end="905:49"><literal type="number" pos:start="905:48" pos:end="905:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="907:21" pos:end="915:21"><if pos:start="907:21" pos:end="915:21">if <condition pos:start="907:24" pos:end="907:31">(<expr pos:start="907:25" pos:end="907:30"><name pos:start="907:25" pos:end="907:25">w</name> <operator pos:start="907:27" pos:end="907:28">&lt;=</operator> <literal type="number" pos:start="907:30" pos:end="907:30">0</literal></expr>)</condition> <block pos:start="907:33" pos:end="915:21">{<block_content pos:start="909:21" pos:end="913:32">

                    <label pos:start="909:21" pos:end="909:34"><name pos:start="909:21" pos:end="909:33">graphic_error</name>:</label>

                        <expr_stmt pos:start="911:25" pos:end="911:79"><expr pos:start="911:25" pos:end="911:78"><call pos:start="911:25" pos:end="911:78"><name pos:start="911:25" pos:end="911:31">fprintf</name><argument_list pos:start="911:32" pos:end="911:78">(<argument pos:start="911:33" pos:end="911:38"><expr pos:start="911:33" pos:end="911:38"><name pos:start="911:33" pos:end="911:38">stderr</name></expr></argument>, <argument pos:start="911:41" pos:end="911:77"><expr pos:start="911:41" pos:end="911:77"><literal type="string" pos:start="911:41" pos:end="911:77">"qemu: invalid resolution or depth\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="913:25" pos:end="913:32"><expr pos:start="913:25" pos:end="913:31"><call pos:start="913:25" pos:end="913:31"><name pos:start="913:25" pos:end="913:28">exit</name><argument_list pos:start="913:29" pos:end="913:31">(<argument pos:start="913:30" pos:end="913:30"><expr pos:start="913:30" pos:end="913:30"><literal type="number" pos:start="913:30" pos:end="913:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="917:21" pos:end="919:43"><if pos:start="917:21" pos:end="919:43">if <condition pos:start="917:24" pos:end="917:34">(<expr pos:start="917:25" pos:end="917:33"><operator pos:start="917:25" pos:end="917:25">*</operator><name pos:start="917:26" pos:end="917:26">p</name> <operator pos:start="917:28" pos:end="917:29">!=</operator> <literal type="char" pos:start="917:31" pos:end="917:33">'x'</literal></expr>)</condition><block type="pseudo" pos:start="919:25" pos:end="919:43"><block_content pos:start="919:25" pos:end="919:43">

                        <goto pos:start="919:25" pos:end="919:43">goto <name pos:start="919:30" pos:end="919:42">graphic_error</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="921:21" pos:end="921:24"><expr pos:start="921:21" pos:end="921:23"><name pos:start="921:21" pos:end="921:21">p</name><operator pos:start="921:22" pos:end="921:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="923:21" pos:end="923:51"><expr pos:start="923:21" pos:end="923:50"><name pos:start="923:21" pos:end="923:21">h</name> <operator pos:start="923:23" pos:end="923:23">=</operator> <call pos:start="923:25" pos:end="923:50"><name pos:start="923:25" pos:end="923:30">strtol</name><argument_list pos:start="923:31" pos:end="923:50">(<argument pos:start="923:32" pos:end="923:32"><expr pos:start="923:32" pos:end="923:32"><name pos:start="923:32" pos:end="923:32">p</name></expr></argument>, <argument pos:start="923:35" pos:end="923:45"><expr pos:start="923:35" pos:end="923:45"><operator pos:start="923:35" pos:end="923:35">(</operator><name pos:start="923:36" pos:end="923:39">char</name> <operator pos:start="923:41" pos:end="923:41">*</operator><operator pos:start="923:42" pos:end="923:42">*</operator><operator pos:start="923:43" pos:end="923:43">)</operator><operator pos:start="923:44" pos:end="923:44">&amp;</operator><name pos:start="923:45" pos:end="923:45">p</name></expr></argument>, <argument pos:start="923:48" pos:end="923:49"><expr pos:start="923:48" pos:end="923:49"><literal type="number" pos:start="923:48" pos:end="923:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="925:21" pos:end="927:43"><if pos:start="925:21" pos:end="927:43">if <condition pos:start="925:24" pos:end="925:31">(<expr pos:start="925:25" pos:end="925:30"><name pos:start="925:25" pos:end="925:25">h</name> <operator pos:start="925:27" pos:end="925:28">&lt;=</operator> <literal type="number" pos:start="925:30" pos:end="925:30">0</literal></expr>)</condition><block type="pseudo" pos:start="927:25" pos:end="927:43"><block_content pos:start="927:25" pos:end="927:43">

                        <goto pos:start="927:25" pos:end="927:43">goto <name pos:start="927:30" pos:end="927:42">graphic_error</name>;</goto></block_content></block></if></if_stmt>

                    <if_stmt pos:start="929:21" pos:end="949:21"><if pos:start="929:21" pos:end="941:21">if <condition pos:start="929:24" pos:end="929:34">(<expr pos:start="929:25" pos:end="929:33"><operator pos:start="929:25" pos:end="929:25">*</operator><name pos:start="929:26" pos:end="929:26">p</name> <operator pos:start="929:28" pos:end="929:29">==</operator> <literal type="char" pos:start="929:31" pos:end="929:33">'x'</literal></expr>)</condition> <block pos:start="929:36" pos:end="941:21">{<block_content pos:start="931:25" pos:end="939:47">

                        <expr_stmt pos:start="931:25" pos:end="931:28"><expr pos:start="931:25" pos:end="931:27"><name pos:start="931:25" pos:end="931:25">p</name><operator pos:start="931:26" pos:end="931:27">++</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="933:25" pos:end="933:59"><expr pos:start="933:25" pos:end="933:58"><name pos:start="933:25" pos:end="933:29">depth</name> <operator pos:start="933:31" pos:end="933:31">=</operator> <call pos:start="933:33" pos:end="933:58"><name pos:start="933:33" pos:end="933:38">strtol</name><argument_list pos:start="933:39" pos:end="933:58">(<argument pos:start="933:40" pos:end="933:40"><expr pos:start="933:40" pos:end="933:40"><name pos:start="933:40" pos:end="933:40">p</name></expr></argument>, <argument pos:start="933:43" pos:end="933:53"><expr pos:start="933:43" pos:end="933:53"><operator pos:start="933:43" pos:end="933:43">(</operator><name pos:start="933:44" pos:end="933:47">char</name> <operator pos:start="933:49" pos:end="933:49">*</operator><operator pos:start="933:50" pos:end="933:50">*</operator><operator pos:start="933:51" pos:end="933:51">)</operator><operator pos:start="933:52" pos:end="933:52">&amp;</operator><name pos:start="933:53" pos:end="933:53">p</name></expr></argument>, <argument pos:start="933:56" pos:end="933:57"><expr pos:start="933:56" pos:end="933:57"><literal type="number" pos:start="933:56" pos:end="933:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="935:25" pos:end="939:47"><if pos:start="935:25" pos:end="939:47">if <condition pos:start="935:28" pos:end="937:55">(<expr pos:start="935:29" pos:end="937:54"><name pos:start="935:29" pos:end="935:33">depth</name> <operator pos:start="935:35" pos:end="935:36">!=</operator> <literal type="number" pos:start="935:38" pos:end="935:38">8</literal> <operator pos:start="935:40" pos:end="935:41">&amp;&amp;</operator> <name pos:start="935:43" pos:end="935:47">depth</name> <operator pos:start="935:49" pos:end="935:50">!=</operator> <literal type="number" pos:start="935:52" pos:end="935:53">15</literal> <operator pos:start="935:55" pos:end="935:56">&amp;&amp;</operator> <name pos:start="935:58" pos:end="935:62">depth</name> <operator pos:start="935:64" pos:end="935:65">!=</operator> <literal type="number" pos:start="935:67" pos:end="935:68">16</literal> <operator pos:start="935:70" pos:end="935:71">&amp;&amp;</operator>

                            <name pos:start="937:29" pos:end="937:33">depth</name> <operator pos:start="937:35" pos:end="937:36">!=</operator> <literal type="number" pos:start="937:38" pos:end="937:39">24</literal> <operator pos:start="937:41" pos:end="937:42">&amp;&amp;</operator> <name pos:start="937:44" pos:end="937:48">depth</name> <operator pos:start="937:50" pos:end="937:51">!=</operator> <literal type="number" pos:start="937:53" pos:end="937:54">32</literal></expr>)</condition><block type="pseudo" pos:start="939:29" pos:end="939:47"><block_content pos:start="939:29" pos:end="939:47">

                            <goto pos:start="939:29" pos:end="939:47">goto <name pos:start="939:34" pos:end="939:46">graphic_error</name>;</goto></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="941:23" pos:end="945:21">else if <condition pos:start="941:31" pos:end="941:42">(<expr pos:start="941:32" pos:end="941:41"><operator pos:start="941:32" pos:end="941:32">*</operator><name pos:start="941:33" pos:end="941:33">p</name> <operator pos:start="941:35" pos:end="941:36">==</operator> <literal type="char" pos:start="941:38" pos:end="941:41">'\0'</literal></expr>)</condition> <block pos:start="941:44" pos:end="945:21">{<block_content pos:start="943:25" pos:end="943:46">

                        <expr_stmt pos:start="943:25" pos:end="943:46"><expr pos:start="943:25" pos:end="943:45"><name pos:start="943:25" pos:end="943:29">depth</name> <operator pos:start="943:31" pos:end="943:31">=</operator> <name pos:start="943:33" pos:end="943:45">graphic_depth</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="945:23" pos:end="949:21">else <block pos:start="945:28" pos:end="949:21">{<block_content pos:start="947:25" pos:end="947:43">

                        <goto pos:start="947:25" pos:end="947:43">goto <name pos:start="947:30" pos:end="947:42">graphic_error</name>;</goto>

                    </block_content>}</block></else></if_stmt>



                    <expr_stmt pos:start="953:21" pos:end="953:38"><expr pos:start="953:21" pos:end="953:37"><name pos:start="953:21" pos:end="953:33">graphic_width</name> <operator pos:start="953:35" pos:end="953:35">=</operator> <name pos:start="953:37" pos:end="953:37">w</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="955:21" pos:end="955:39"><expr pos:start="955:21" pos:end="955:38"><name pos:start="955:21" pos:end="955:34">graphic_height</name> <operator pos:start="955:36" pos:end="955:36">=</operator> <name pos:start="955:38" pos:end="955:38">h</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="957:21" pos:end="957:42"><expr pos:start="957:21" pos:end="957:41"><name pos:start="957:21" pos:end="957:33">graphic_depth</name> <operator pos:start="957:35" pos:end="957:35">=</operator> <name pos:start="957:37" pos:end="957:41">depth</name></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="961:17" pos:end="961:22">break;</break>

            <case pos:start="963:13" pos:end="963:34">case <expr pos:start="963:18" pos:end="963:33"><name pos:start="963:18" pos:end="963:33">QEMU_OPTION_echr</name></expr>:</case>

                <block pos:start="965:17" pos:end="977:17">{<block_content pos:start="967:21" pos:end="975:26">

                    <decl_stmt pos:start="967:21" pos:end="967:28"><decl pos:start="967:21" pos:end="967:27"><type pos:start="967:21" pos:end="967:26"><name pos:start="967:21" pos:end="967:24">char</name> <modifier pos:start="967:26" pos:end="967:26">*</modifier></type><name pos:start="967:27" pos:end="967:27">r</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="969:21" pos:end="969:61"><expr pos:start="969:21" pos:end="969:60"><name pos:start="969:21" pos:end="969:36">term_escape_char</name> <operator pos:start="969:38" pos:end="969:38">=</operator> <call pos:start="969:40" pos:end="969:60"><name pos:start="969:40" pos:end="969:45">strtol</name><argument_list pos:start="969:46" pos:end="969:60">(<argument pos:start="969:47" pos:end="969:52"><expr pos:start="969:47" pos:end="969:52"><name pos:start="969:47" pos:end="969:52">optarg</name></expr></argument>, <argument pos:start="969:55" pos:end="969:56"><expr pos:start="969:55" pos:end="969:56"><operator pos:start="969:55" pos:end="969:55">&amp;</operator><name pos:start="969:56" pos:end="969:56">r</name></expr></argument>, <argument pos:start="969:59" pos:end="969:59"><expr pos:start="969:59" pos:end="969:59"><literal type="number" pos:start="969:59" pos:end="969:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="971:21" pos:end="973:57"><if pos:start="971:21" pos:end="973:57">if <condition pos:start="971:24" pos:end="971:36">(<expr pos:start="971:25" pos:end="971:35"><name pos:start="971:25" pos:end="971:25">r</name> <operator pos:start="971:27" pos:end="971:28">==</operator> <name pos:start="971:30" pos:end="971:35">optarg</name></expr>)</condition><block type="pseudo" pos:start="973:25" pos:end="973:57"><block_content pos:start="973:25" pos:end="973:57">

                        <expr_stmt pos:start="973:25" pos:end="973:57"><expr pos:start="973:25" pos:end="973:56"><call pos:start="973:25" pos:end="973:56"><name pos:start="973:25" pos:end="973:30">printf</name><argument_list pos:start="973:31" pos:end="973:56">(<argument pos:start="973:32" pos:end="973:55"><expr pos:start="973:32" pos:end="973:55"><literal type="string" pos:start="973:32" pos:end="973:55">"Bad argument to echr\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="975:21" pos:end="975:26">break;</break>

                </block_content>}</block>

            <case pos:start="979:13" pos:end="979:37">case <expr pos:start="979:18" pos:end="979:36"><name pos:start="979:18" pos:end="979:36">QEMU_OPTION_monitor</name></expr>:</case>

                <expr_stmt pos:start="981:17" pos:end="981:50"><expr pos:start="981:17" pos:end="981:49"><call pos:start="981:17" pos:end="981:49"><name pos:start="981:17" pos:end="981:29">monitor_parse</name><argument_list pos:start="981:30" pos:end="981:49">(<argument pos:start="981:31" pos:end="981:36"><expr pos:start="981:31" pos:end="981:36"><name pos:start="981:31" pos:end="981:36">optarg</name></expr></argument>, <argument pos:start="981:39" pos:end="981:48"><expr pos:start="981:39" pos:end="981:48"><literal type="string" pos:start="981:39" pos:end="981:48">"readline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="983:17" pos:end="983:36"><expr pos:start="983:17" pos:end="983:35"><name pos:start="983:17" pos:end="983:31">default_monitor</name> <operator pos:start="983:33" pos:end="983:33">=</operator> <literal type="number" pos:start="983:35" pos:end="983:35">0</literal></expr>;</expr_stmt>

                <break pos:start="985:17" pos:end="985:22">break;</break>

            <case pos:start="987:13" pos:end="987:33">case <expr pos:start="987:18" pos:end="987:32"><name pos:start="987:18" pos:end="987:32">QEMU_OPTION_qmp</name></expr>:</case>

                <expr_stmt pos:start="989:17" pos:end="989:49"><expr pos:start="989:17" pos:end="989:48"><call pos:start="989:17" pos:end="989:48"><name pos:start="989:17" pos:end="989:29">monitor_parse</name><argument_list pos:start="989:30" pos:end="989:48">(<argument pos:start="989:31" pos:end="989:36"><expr pos:start="989:31" pos:end="989:36"><name pos:start="989:31" pos:end="989:36">optarg</name></expr></argument>, <argument pos:start="989:39" pos:end="989:47"><expr pos:start="989:39" pos:end="989:47"><literal type="string" pos:start="989:39" pos:end="989:47">"control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="991:17" pos:end="991:36"><expr pos:start="991:17" pos:end="991:35"><name pos:start="991:17" pos:end="991:31">default_monitor</name> <operator pos:start="991:33" pos:end="991:33">=</operator> <literal type="number" pos:start="991:35" pos:end="991:35">0</literal></expr>;</expr_stmt>

                <break pos:start="993:17" pos:end="993:22">break;</break>

            <case pos:start="995:13" pos:end="995:33">case <expr pos:start="995:18" pos:end="995:32"><name pos:start="995:18" pos:end="995:32">QEMU_OPTION_mon</name></expr>:</case>

                <expr_stmt pos:start="997:17" pos:end="997:73"><expr pos:start="997:17" pos:end="997:72"><name pos:start="997:17" pos:end="997:20">opts</name> <operator pos:start="997:22" pos:end="997:22">=</operator> <call pos:start="997:24" pos:end="997:72"><name pos:start="997:24" pos:end="997:38">qemu_opts_parse</name><argument_list pos:start="997:39" pos:end="997:72">(<argument pos:start="997:40" pos:end="997:60"><expr pos:start="997:40" pos:end="997:60"><call pos:start="997:40" pos:end="997:60"><name pos:start="997:40" pos:end="997:53">qemu_find_opts</name><argument_list pos:start="997:54" pos:end="997:60">(<argument pos:start="997:55" pos:end="997:59"><expr pos:start="997:55" pos:end="997:59"><literal type="string" pos:start="997:55" pos:end="997:59">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="997:63" pos:end="997:68"><expr pos:start="997:63" pos:end="997:68"><name pos:start="997:63" pos:end="997:68">optarg</name></expr></argument>, <argument pos:start="997:71" pos:end="997:71"><expr pos:start="997:71" pos:end="997:71"><literal type="number" pos:start="997:71" pos:end="997:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="999:17" pos:end="1003:17"><if pos:start="999:17" pos:end="1003:17">if <condition pos:start="999:20" pos:end="999:26">(<expr pos:start="999:21" pos:end="999:25"><operator pos:start="999:21" pos:end="999:21">!</operator><name pos:start="999:22" pos:end="999:25">opts</name></expr>)</condition> <block pos:start="999:28" pos:end="1003:17">{<block_content pos:start="1001:21" pos:end="1001:28">

                    <expr_stmt pos:start="1001:21" pos:end="1001:28"><expr pos:start="1001:21" pos:end="1001:27"><call pos:start="1001:21" pos:end="1001:27"><name pos:start="1001:21" pos:end="1001:24">exit</name><argument_list pos:start="1001:25" pos:end="1001:27">(<argument pos:start="1001:26" pos:end="1001:26"><expr pos:start="1001:26" pos:end="1001:26"><literal type="number" pos:start="1001:26" pos:end="1001:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1005:17" pos:end="1005:36"><expr pos:start="1005:17" pos:end="1005:35"><name pos:start="1005:17" pos:end="1005:31">default_monitor</name> <operator pos:start="1005:33" pos:end="1005:33">=</operator> <literal type="number" pos:start="1005:35" pos:end="1005:35">0</literal></expr>;</expr_stmt>

                <break pos:start="1007:17" pos:end="1007:22">break;</break>

            <case pos:start="1009:13" pos:end="1009:37">case <expr pos:start="1009:18" pos:end="1009:36"><name pos:start="1009:18" pos:end="1009:36">QEMU_OPTION_chardev</name></expr>:</case>

                <expr_stmt pos:start="1011:17" pos:end="1011:77"><expr pos:start="1011:17" pos:end="1011:76"><name pos:start="1011:17" pos:end="1011:20">opts</name> <operator pos:start="1011:22" pos:end="1011:22">=</operator> <call pos:start="1011:24" pos:end="1011:76"><name pos:start="1011:24" pos:end="1011:38">qemu_opts_parse</name><argument_list pos:start="1011:39" pos:end="1011:76">(<argument pos:start="1011:40" pos:end="1011:64"><expr pos:start="1011:40" pos:end="1011:64"><call pos:start="1011:40" pos:end="1011:64"><name pos:start="1011:40" pos:end="1011:53">qemu_find_opts</name><argument_list pos:start="1011:54" pos:end="1011:64">(<argument pos:start="1011:55" pos:end="1011:63"><expr pos:start="1011:55" pos:end="1011:63"><literal type="string" pos:start="1011:55" pos:end="1011:63">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1011:67" pos:end="1011:72"><expr pos:start="1011:67" pos:end="1011:72"><name pos:start="1011:67" pos:end="1011:72">optarg</name></expr></argument>, <argument pos:start="1011:75" pos:end="1011:75"><expr pos:start="1011:75" pos:end="1011:75"><literal type="number" pos:start="1011:75" pos:end="1011:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1013:17" pos:end="1017:17"><if pos:start="1013:17" pos:end="1017:17">if <condition pos:start="1013:20" pos:end="1013:26">(<expr pos:start="1013:21" pos:end="1013:25"><operator pos:start="1013:21" pos:end="1013:21">!</operator><name pos:start="1013:22" pos:end="1013:25">opts</name></expr>)</condition> <block pos:start="1013:28" pos:end="1017:17">{<block_content pos:start="1015:21" pos:end="1015:28">

                    <expr_stmt pos:start="1015:21" pos:end="1015:28"><expr pos:start="1015:21" pos:end="1015:27"><call pos:start="1015:21" pos:end="1015:27"><name pos:start="1015:21" pos:end="1015:24">exit</name><argument_list pos:start="1015:25" pos:end="1015:27">(<argument pos:start="1015:26" pos:end="1015:26"><expr pos:start="1015:26" pos:end="1015:26"><literal type="number" pos:start="1015:26" pos:end="1015:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1019:17" pos:end="1019:22">break;</break>

            <case pos:start="1021:13" pos:end="1021:35">case <expr pos:start="1021:18" pos:end="1021:34"><name pos:start="1021:18" pos:end="1021:34">QEMU_OPTION_fsdev</name></expr>:</case>

                <expr_stmt pos:start="1023:17" pos:end="1023:48"><expr pos:start="1023:17" pos:end="1023:47"><name pos:start="1023:17" pos:end="1023:21">olist</name> <operator pos:start="1023:23" pos:end="1023:23">=</operator> <call pos:start="1023:25" pos:end="1023:47"><name pos:start="1023:25" pos:end="1023:38">qemu_find_opts</name><argument_list pos:start="1023:39" pos:end="1023:47">(<argument pos:start="1023:40" pos:end="1023:46"><expr pos:start="1023:40" pos:end="1023:46"><literal type="string" pos:start="1023:40" pos:end="1023:46">"fsdev"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1025:17" pos:end="1031:17"><if pos:start="1025:17" pos:end="1031:17">if <condition pos:start="1025:20" pos:end="1025:27">(<expr pos:start="1025:21" pos:end="1025:26"><operator pos:start="1025:21" pos:end="1025:21">!</operator><name pos:start="1025:22" pos:end="1025:26">olist</name></expr>)</condition> <block pos:start="1025:29" pos:end="1031:17">{<block_content pos:start="1027:21" pos:end="1029:28">

                    <expr_stmt pos:start="1027:21" pos:end="1027:84"><expr pos:start="1027:21" pos:end="1027:83"><call pos:start="1027:21" pos:end="1027:83"><name pos:start="1027:21" pos:end="1027:27">fprintf</name><argument_list pos:start="1027:28" pos:end="1027:83">(<argument pos:start="1027:29" pos:end="1027:34"><expr pos:start="1027:29" pos:end="1027:34"><name pos:start="1027:29" pos:end="1027:34">stderr</name></expr></argument>, <argument pos:start="1027:37" pos:end="1027:82"><expr pos:start="1027:37" pos:end="1027:82"><literal type="string" pos:start="1027:37" pos:end="1027:82">"fsdev is not supported by this qemu build.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1029:21" pos:end="1029:28"><expr pos:start="1029:21" pos:end="1029:27"><call pos:start="1029:21" pos:end="1029:27"><name pos:start="1029:21" pos:end="1029:24">exit</name><argument_list pos:start="1029:25" pos:end="1029:27">(<argument pos:start="1029:26" pos:end="1029:26"><expr pos:start="1029:26" pos:end="1029:26"><literal type="number" pos:start="1029:26" pos:end="1029:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1033:17" pos:end="1033:57"><expr pos:start="1033:17" pos:end="1033:56"><name pos:start="1033:17" pos:end="1033:20">opts</name> <operator pos:start="1033:22" pos:end="1033:22">=</operator> <call pos:start="1033:24" pos:end="1033:56"><name pos:start="1033:24" pos:end="1033:38">qemu_opts_parse</name><argument_list pos:start="1033:39" pos:end="1033:56">(<argument pos:start="1033:40" pos:end="1033:44"><expr pos:start="1033:40" pos:end="1033:44"><name pos:start="1033:40" pos:end="1033:44">olist</name></expr></argument>, <argument pos:start="1033:47" pos:end="1033:52"><expr pos:start="1033:47" pos:end="1033:52"><name pos:start="1033:47" pos:end="1033:52">optarg</name></expr></argument>, <argument pos:start="1033:55" pos:end="1033:55"><expr pos:start="1033:55" pos:end="1033:55"><literal type="number" pos:start="1033:55" pos:end="1033:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1035:17" pos:end="1041:17"><if pos:start="1035:17" pos:end="1041:17">if <condition pos:start="1035:20" pos:end="1035:26">(<expr pos:start="1035:21" pos:end="1035:25"><operator pos:start="1035:21" pos:end="1035:21">!</operator><name pos:start="1035:22" pos:end="1035:25">opts</name></expr>)</condition> <block pos:start="1035:28" pos:end="1041:17">{<block_content pos:start="1037:21" pos:end="1039:28">

                    <expr_stmt pos:start="1037:21" pos:end="1037:65"><expr pos:start="1037:21" pos:end="1037:64"><call pos:start="1037:21" pos:end="1037:64"><name pos:start="1037:21" pos:end="1037:27">fprintf</name><argument_list pos:start="1037:28" pos:end="1037:64">(<argument pos:start="1037:29" pos:end="1037:34"><expr pos:start="1037:29" pos:end="1037:34"><name pos:start="1037:29" pos:end="1037:34">stderr</name></expr></argument>, <argument pos:start="1037:37" pos:end="1037:55"><expr pos:start="1037:37" pos:end="1037:55"><literal type="string" pos:start="1037:37" pos:end="1037:55">"parse error: %s\n"</literal></expr></argument>, <argument pos:start="1037:58" pos:end="1037:63"><expr pos:start="1037:58" pos:end="1037:63"><name pos:start="1037:58" pos:end="1037:63">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1039:21" pos:end="1039:28"><expr pos:start="1039:21" pos:end="1039:27"><call pos:start="1039:21" pos:end="1039:27"><name pos:start="1039:21" pos:end="1039:24">exit</name><argument_list pos:start="1039:25" pos:end="1039:27">(<argument pos:start="1039:26" pos:end="1039:26"><expr pos:start="1039:26" pos:end="1039:26"><literal type="number" pos:start="1039:26" pos:end="1039:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1043:17" pos:end="1043:22">break;</break>

            <case pos:start="1045:13" pos:end="1045:36">case <expr pos:start="1045:18" pos:end="1045:35"><name pos:start="1045:18" pos:end="1045:35">QEMU_OPTION_virtfs</name></expr>:</case> <block pos:start="1045:38" pos:end="1157:13">{<block_content pos:start="1047:17" pos:end="1155:22">

                <decl_stmt pos:start="1047:17" pos:end="1047:32"><decl pos:start="1047:17" pos:end="1047:31"><type pos:start="1047:17" pos:end="1047:26"><name pos:start="1047:17" pos:end="1047:24">QemuOpts</name> <modifier pos:start="1047:26" pos:end="1047:26">*</modifier></type><name pos:start="1047:27" pos:end="1047:31">fsdev</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1049:17" pos:end="1049:33"><decl pos:start="1049:17" pos:end="1049:32"><type pos:start="1049:17" pos:end="1049:26"><name pos:start="1049:17" pos:end="1049:24">QemuOpts</name> <modifier pos:start="1049:26" pos:end="1049:26">*</modifier></type><name pos:start="1049:27" pos:end="1049:32">device</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1051:17" pos:end="1051:37"><decl pos:start="1051:17" pos:end="1051:36"><type pos:start="1051:17" pos:end="1051:28"><specifier pos:start="1051:17" pos:end="1051:21">const</specifier> <name pos:start="1051:23" pos:end="1051:26">char</name> <modifier pos:start="1051:28" pos:end="1051:28">*</modifier></type><name pos:start="1051:29" pos:end="1051:36">writeout</name></decl>;</decl_stmt>



                <expr_stmt pos:start="1055:17" pos:end="1055:49"><expr pos:start="1055:17" pos:end="1055:48"><name pos:start="1055:17" pos:end="1055:21">olist</name> <operator pos:start="1055:23" pos:end="1055:23">=</operator> <call pos:start="1055:25" pos:end="1055:48"><name pos:start="1055:25" pos:end="1055:38">qemu_find_opts</name><argument_list pos:start="1055:39" pos:end="1055:48">(<argument pos:start="1055:40" pos:end="1055:47"><expr pos:start="1055:40" pos:end="1055:47"><literal type="string" pos:start="1055:40" pos:end="1055:47">"virtfs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1057:17" pos:end="1063:17"><if pos:start="1057:17" pos:end="1063:17">if <condition pos:start="1057:20" pos:end="1057:27">(<expr pos:start="1057:21" pos:end="1057:26"><operator pos:start="1057:21" pos:end="1057:21">!</operator><name pos:start="1057:22" pos:end="1057:26">olist</name></expr>)</condition> <block pos:start="1057:29" pos:end="1063:17">{<block_content pos:start="1059:21" pos:end="1061:28">

                    <expr_stmt pos:start="1059:21" pos:end="1059:85"><expr pos:start="1059:21" pos:end="1059:84"><call pos:start="1059:21" pos:end="1059:84"><name pos:start="1059:21" pos:end="1059:27">fprintf</name><argument_list pos:start="1059:28" pos:end="1059:84">(<argument pos:start="1059:29" pos:end="1059:34"><expr pos:start="1059:29" pos:end="1059:34"><name pos:start="1059:29" pos:end="1059:34">stderr</name></expr></argument>, <argument pos:start="1059:37" pos:end="1059:83"><expr pos:start="1059:37" pos:end="1059:83"><literal type="string" pos:start="1059:37" pos:end="1059:83">"virtfs is not supported by this qemu build.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1061:21" pos:end="1061:28"><expr pos:start="1061:21" pos:end="1061:27"><call pos:start="1061:21" pos:end="1061:27"><name pos:start="1061:21" pos:end="1061:24">exit</name><argument_list pos:start="1061:25" pos:end="1061:27">(<argument pos:start="1061:26" pos:end="1061:26"><expr pos:start="1061:26" pos:end="1061:26"><literal type="number" pos:start="1061:26" pos:end="1061:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1065:17" pos:end="1065:57"><expr pos:start="1065:17" pos:end="1065:56"><name pos:start="1065:17" pos:end="1065:20">opts</name> <operator pos:start="1065:22" pos:end="1065:22">=</operator> <call pos:start="1065:24" pos:end="1065:56"><name pos:start="1065:24" pos:end="1065:38">qemu_opts_parse</name><argument_list pos:start="1065:39" pos:end="1065:56">(<argument pos:start="1065:40" pos:end="1065:44"><expr pos:start="1065:40" pos:end="1065:44"><name pos:start="1065:40" pos:end="1065:44">olist</name></expr></argument>, <argument pos:start="1065:47" pos:end="1065:52"><expr pos:start="1065:47" pos:end="1065:52"><name pos:start="1065:47" pos:end="1065:52">optarg</name></expr></argument>, <argument pos:start="1065:55" pos:end="1065:55"><expr pos:start="1065:55" pos:end="1065:55"><literal type="number" pos:start="1065:55" pos:end="1065:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1067:17" pos:end="1073:17"><if pos:start="1067:17" pos:end="1073:17">if <condition pos:start="1067:20" pos:end="1067:26">(<expr pos:start="1067:21" pos:end="1067:25"><operator pos:start="1067:21" pos:end="1067:21">!</operator><name pos:start="1067:22" pos:end="1067:25">opts</name></expr>)</condition> <block pos:start="1067:28" pos:end="1073:17">{<block_content pos:start="1069:21" pos:end="1071:28">

                    <expr_stmt pos:start="1069:21" pos:end="1069:65"><expr pos:start="1069:21" pos:end="1069:64"><call pos:start="1069:21" pos:end="1069:64"><name pos:start="1069:21" pos:end="1069:27">fprintf</name><argument_list pos:start="1069:28" pos:end="1069:64">(<argument pos:start="1069:29" pos:end="1069:34"><expr pos:start="1069:29" pos:end="1069:34"><name pos:start="1069:29" pos:end="1069:34">stderr</name></expr></argument>, <argument pos:start="1069:37" pos:end="1069:55"><expr pos:start="1069:37" pos:end="1069:55"><literal type="string" pos:start="1069:37" pos:end="1069:55">"parse error: %s\n"</literal></expr></argument>, <argument pos:start="1069:58" pos:end="1069:63"><expr pos:start="1069:58" pos:end="1069:63"><name pos:start="1069:58" pos:end="1069:63">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1071:21" pos:end="1071:28"><expr pos:start="1071:21" pos:end="1071:27"><call pos:start="1071:21" pos:end="1071:27"><name pos:start="1071:21" pos:end="1071:24">exit</name><argument_list pos:start="1071:25" pos:end="1071:27">(<argument pos:start="1071:26" pos:end="1071:26"><expr pos:start="1071:26" pos:end="1071:26"><literal type="number" pos:start="1071:26" pos:end="1071:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="1077:17" pos:end="1091:17"><if pos:start="1077:17" pos:end="1091:17">if <condition pos:start="1077:20" pos:end="1081:59">(<expr pos:start="1077:21" pos:end="1081:58"><call pos:start="1077:21" pos:end="1077:50"><name pos:start="1077:21" pos:end="1077:32">qemu_opt_get</name><argument_list pos:start="1077:33" pos:end="1077:50">(<argument pos:start="1077:34" pos:end="1077:37"><expr pos:start="1077:34" pos:end="1077:37"><name pos:start="1077:34" pos:end="1077:37">opts</name></expr></argument>, <argument pos:start="1077:40" pos:end="1077:49"><expr pos:start="1077:40" pos:end="1077:49"><literal type="string" pos:start="1077:40" pos:end="1077:49">"fsdriver"</literal></expr></argument>)</argument_list></call> <operator pos:start="1077:52" pos:end="1077:53">==</operator> <name pos:start="1077:55" pos:end="1077:58">NULL</name> <operator pos:start="1077:60" pos:end="1077:61">||</operator>

                        <call pos:start="1079:25" pos:end="1079:55"><name pos:start="1079:25" pos:end="1079:36">qemu_opt_get</name><argument_list pos:start="1079:37" pos:end="1079:55">(<argument pos:start="1079:38" pos:end="1079:41"><expr pos:start="1079:38" pos:end="1079:41"><name pos:start="1079:38" pos:end="1079:41">opts</name></expr></argument>, <argument pos:start="1079:44" pos:end="1079:54"><expr pos:start="1079:44" pos:end="1079:54"><literal type="string" pos:start="1079:44" pos:end="1079:54">"mount_tag"</literal></expr></argument>)</argument_list></call> <operator pos:start="1079:57" pos:end="1079:58">==</operator> <name pos:start="1079:60" pos:end="1079:63">NULL</name> <operator pos:start="1079:65" pos:end="1079:66">||</operator>

                        <call pos:start="1081:25" pos:end="1081:50"><name pos:start="1081:25" pos:end="1081:36">qemu_opt_get</name><argument_list pos:start="1081:37" pos:end="1081:50">(<argument pos:start="1081:38" pos:end="1081:41"><expr pos:start="1081:38" pos:end="1081:41"><name pos:start="1081:38" pos:end="1081:41">opts</name></expr></argument>, <argument pos:start="1081:44" pos:end="1081:49"><expr pos:start="1081:44" pos:end="1081:49"><literal type="string" pos:start="1081:44" pos:end="1081:49">"path"</literal></expr></argument>)</argument_list></call> <operator pos:start="1081:52" pos:end="1081:53">==</operator> <name pos:start="1081:55" pos:end="1081:58">NULL</name></expr>)</condition> <block pos:start="1081:61" pos:end="1091:17">{<block_content pos:start="1083:21" pos:end="1089:28">

                    <expr_stmt pos:start="1083:21" pos:end="1087:48"><expr pos:start="1083:21" pos:end="1087:47"><call pos:start="1083:21" pos:end="1087:47"><name pos:start="1083:21" pos:end="1083:27">fprintf</name><argument_list pos:start="1083:28" pos:end="1087:47">(<argument pos:start="1083:29" pos:end="1083:34"><expr pos:start="1083:29" pos:end="1083:34"><name pos:start="1083:29" pos:end="1083:34">stderr</name></expr></argument>, <argument pos:start="1083:37" pos:end="1087:46"><expr pos:start="1083:37" pos:end="1087:46"><literal type="string" pos:start="1083:37" pos:end="1083:80">"Usage: -virtfs fsdriver,path=/share_path/,"</literal>

                            <literal type="string" pos:start="1085:29" pos:end="1085:73">"[security_model={mapped|passthrough|none}],"</literal>

                            <literal type="string" pos:start="1087:29" pos:end="1087:46">"mount_tag=tag.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1089:21" pos:end="1089:28"><expr pos:start="1089:21" pos:end="1089:27"><call pos:start="1089:21" pos:end="1089:27"><name pos:start="1089:21" pos:end="1089:24">exit</name><argument_list pos:start="1089:25" pos:end="1089:27">(<argument pos:start="1089:26" pos:end="1089:26"><expr pos:start="1089:26" pos:end="1089:26"><literal type="number" pos:start="1089:26" pos:end="1089:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1093:17" pos:end="1095:77"><expr pos:start="1093:17" pos:end="1095:76"><name pos:start="1093:17" pos:end="1093:21">fsdev</name> <operator pos:start="1093:23" pos:end="1093:23">=</operator> <call pos:start="1093:25" pos:end="1095:76"><name pos:start="1093:25" pos:end="1093:40">qemu_opts_create</name><argument_list pos:start="1093:41" pos:end="1095:76">(<argument pos:start="1093:42" pos:end="1093:64"><expr pos:start="1093:42" pos:end="1093:64"><call pos:start="1093:42" pos:end="1093:64"><name pos:start="1093:42" pos:end="1093:55">qemu_find_opts</name><argument_list pos:start="1093:56" pos:end="1093:64">(<argument pos:start="1093:57" pos:end="1093:63"><expr pos:start="1093:57" pos:end="1093:63"><literal type="string" pos:start="1093:57" pos:end="1093:63">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>,

                                         <argument pos:start="1095:42" pos:end="1095:72"><expr pos:start="1095:42" pos:end="1095:72"><call pos:start="1095:42" pos:end="1095:72"><name pos:start="1095:42" pos:end="1095:53">qemu_opt_get</name><argument_list pos:start="1095:54" pos:end="1095:72">(<argument pos:start="1095:55" pos:end="1095:58"><expr pos:start="1095:55" pos:end="1095:58"><name pos:start="1095:55" pos:end="1095:58">opts</name></expr></argument>, <argument pos:start="1095:61" pos:end="1095:71"><expr pos:start="1095:61" pos:end="1095:71"><literal type="string" pos:start="1095:61" pos:end="1095:71">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1095:75" pos:end="1095:75"><expr pos:start="1095:75" pos:end="1095:75"><literal type="number" pos:start="1095:75" pos:end="1095:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1097:17" pos:end="1105:17"><if pos:start="1097:17" pos:end="1105:17">if <condition pos:start="1097:20" pos:end="1097:27">(<expr pos:start="1097:21" pos:end="1097:26"><operator pos:start="1097:21" pos:end="1097:21">!</operator><name pos:start="1097:22" pos:end="1097:26">fsdev</name></expr>)</condition> <block pos:start="1097:29" pos:end="1105:17">{<block_content pos:start="1099:21" pos:end="1103:28">

                    <expr_stmt pos:start="1099:21" pos:end="1101:61"><expr pos:start="1099:21" pos:end="1101:60"><call pos:start="1099:21" pos:end="1101:60"><name pos:start="1099:21" pos:end="1099:27">fprintf</name><argument_list pos:start="1099:28" pos:end="1101:60">(<argument pos:start="1099:29" pos:end="1099:34"><expr pos:start="1099:29" pos:end="1099:34"><name pos:start="1099:29" pos:end="1099:34">stderr</name></expr></argument>, <argument pos:start="1099:37" pos:end="1099:62"><expr pos:start="1099:37" pos:end="1099:62"><literal type="string" pos:start="1099:37" pos:end="1099:62">"duplicate fsdev id: %s\n"</literal></expr></argument>,

                            <argument pos:start="1101:29" pos:end="1101:59"><expr pos:start="1101:29" pos:end="1101:59"><call pos:start="1101:29" pos:end="1101:59"><name pos:start="1101:29" pos:end="1101:40">qemu_opt_get</name><argument_list pos:start="1101:41" pos:end="1101:59">(<argument pos:start="1101:42" pos:end="1101:45"><expr pos:start="1101:42" pos:end="1101:45"><name pos:start="1101:42" pos:end="1101:45">opts</name></expr></argument>, <argument pos:start="1101:48" pos:end="1101:58"><expr pos:start="1101:48" pos:end="1101:58"><literal type="string" pos:start="1101:48" pos:end="1101:58">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1103:21" pos:end="1103:28"><expr pos:start="1103:21" pos:end="1103:27"><call pos:start="1103:21" pos:end="1103:27"><name pos:start="1103:21" pos:end="1103:24">exit</name><argument_list pos:start="1103:25" pos:end="1103:27">(<argument pos:start="1103:26" pos:end="1103:26"><expr pos:start="1103:26" pos:end="1103:26"><literal type="number" pos:start="1103:26" pos:end="1103:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="1109:17" pos:end="1109:58"><expr pos:start="1109:17" pos:end="1109:57"><name pos:start="1109:17" pos:end="1109:24">writeout</name> <operator pos:start="1109:26" pos:end="1109:26">=</operator> <call pos:start="1109:28" pos:end="1109:57"><name pos:start="1109:28" pos:end="1109:39">qemu_opt_get</name><argument_list pos:start="1109:40" pos:end="1109:57">(<argument pos:start="1109:41" pos:end="1109:44"><expr pos:start="1109:41" pos:end="1109:44"><name pos:start="1109:41" pos:end="1109:44">opts</name></expr></argument>, <argument pos:start="1109:47" pos:end="1109:56"><expr pos:start="1109:47" pos:end="1109:56"><literal type="string" pos:start="1109:47" pos:end="1109:56">"writeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1111:17" pos:end="1127:17"><if pos:start="1111:17" pos:end="1127:17">if <condition pos:start="1111:20" pos:end="1111:29">(<expr pos:start="1111:21" pos:end="1111:28"><name pos:start="1111:21" pos:end="1111:28">writeout</name></expr>)</condition> <block pos:start="1111:31" pos:end="1127:17">{<block_content pos:start="1115:21" pos:end="1126:0">

<cpp:ifdef pos:start="1113:1" pos:end="1113:29">#<cpp:directive pos:start="1113:2" pos:end="1113:6">ifdef</cpp:directive> <name pos:start="1113:8" pos:end="1113:29">CONFIG_SYNC_FILE_RANGE</name></cpp:ifdef>

                    <expr_stmt pos:start="1115:21" pos:end="1118:0"><expr pos:start="1115:21" pos:end="1115:61"><call pos:start="1115:21" pos:end="1115:61"><name pos:start="1115:21" pos:end="1115:32">qemu_opt_set</name><argument_list pos:start="1115:33" pos:end="1115:61">(<argument pos:start="1115:34" pos:end="1115:38"><expr pos:start="1115:34" pos:end="1115:38"><name pos:start="1115:34" pos:end="1115:38">fsdev</name></expr></argument>, <argument pos:start="1115:41" pos:end="1115:50"><expr pos:start="1115:41" pos:end="1115:50"><literal type="string" pos:start="1115:41" pos:end="1115:50">"writeout"</literal></expr></argument>, <argument pos:start="1115:53" pos:end="1115:60"><expr pos:start="1115:53" pos:end="1115:60"><name pos:start="1115:53" pos:end="1115:60">writeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1117:1" pos:end="1117:5">#<cpp:directive pos:start="1117:2" pos:end="1117:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="1119:21" pos:end="1121:47"><expr pos:start="1119:21" pos:end="1121:46"><call pos:start="1119:21" pos:end="1121:46"><name pos:start="1119:21" pos:end="1119:27">fprintf</name><argument_list pos:start="1119:28" pos:end="1121:46">(<argument pos:start="1119:29" pos:end="1119:34"><expr pos:start="1119:29" pos:end="1119:34"><name pos:start="1119:29" pos:end="1119:34">stderr</name></expr></argument>, <argument pos:start="1119:37" pos:end="1121:45"><expr pos:start="1119:37" pos:end="1121:45"><literal type="string" pos:start="1119:37" pos:end="1119:74">"writeout=immediate not supported on "</literal>

                            <literal type="string" pos:start="1121:29" pos:end="1121:45">"this platform\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1123:21" pos:end="1126:0"><expr pos:start="1123:21" pos:end="1123:27"><call pos:start="1123:21" pos:end="1123:27"><name pos:start="1123:21" pos:end="1123:24">exit</name><argument_list pos:start="1123:25" pos:end="1123:27">(<argument pos:start="1123:26" pos:end="1123:26"><expr pos:start="1123:26" pos:end="1123:26"><literal type="number" pos:start="1123:26" pos:end="1123:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1125:1" pos:end="1125:6">#<cpp:directive pos:start="1125:2" pos:end="1125:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1129:17" pos:end="1129:80"><expr pos:start="1129:17" pos:end="1129:79"><call pos:start="1129:17" pos:end="1129:79"><name pos:start="1129:17" pos:end="1129:28">qemu_opt_set</name><argument_list pos:start="1129:29" pos:end="1129:79">(<argument pos:start="1129:30" pos:end="1129:34"><expr pos:start="1129:30" pos:end="1129:34"><name pos:start="1129:30" pos:end="1129:34">fsdev</name></expr></argument>, <argument pos:start="1129:37" pos:end="1129:46"><expr pos:start="1129:37" pos:end="1129:46"><literal type="string" pos:start="1129:37" pos:end="1129:46">"fsdriver"</literal></expr></argument>, <argument pos:start="1129:49" pos:end="1129:78"><expr pos:start="1129:49" pos:end="1129:78"><call pos:start="1129:49" pos:end="1129:78"><name pos:start="1129:49" pos:end="1129:60">qemu_opt_get</name><argument_list pos:start="1129:61" pos:end="1129:78">(<argument pos:start="1129:62" pos:end="1129:65"><expr pos:start="1129:62" pos:end="1129:65"><name pos:start="1129:62" pos:end="1129:65">opts</name></expr></argument>, <argument pos:start="1129:68" pos:end="1129:77"><expr pos:start="1129:68" pos:end="1129:77"><literal type="string" pos:start="1129:68" pos:end="1129:77">"fsdriver"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1131:17" pos:end="1131:72"><expr pos:start="1131:17" pos:end="1131:71"><call pos:start="1131:17" pos:end="1131:71"><name pos:start="1131:17" pos:end="1131:28">qemu_opt_set</name><argument_list pos:start="1131:29" pos:end="1131:71">(<argument pos:start="1131:30" pos:end="1131:34"><expr pos:start="1131:30" pos:end="1131:34"><name pos:start="1131:30" pos:end="1131:34">fsdev</name></expr></argument>, <argument pos:start="1131:37" pos:end="1131:42"><expr pos:start="1131:37" pos:end="1131:42"><literal type="string" pos:start="1131:37" pos:end="1131:42">"path"</literal></expr></argument>, <argument pos:start="1131:45" pos:end="1131:70"><expr pos:start="1131:45" pos:end="1131:70"><call pos:start="1131:45" pos:end="1131:70"><name pos:start="1131:45" pos:end="1131:56">qemu_opt_get</name><argument_list pos:start="1131:57" pos:end="1131:70">(<argument pos:start="1131:58" pos:end="1131:61"><expr pos:start="1131:58" pos:end="1131:61"><name pos:start="1131:58" pos:end="1131:61">opts</name></expr></argument>, <argument pos:start="1131:64" pos:end="1131:69"><expr pos:start="1131:64" pos:end="1131:69"><literal type="string" pos:start="1131:64" pos:end="1131:69">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1135:67"><expr pos:start="1133:17" pos:end="1135:66"><call pos:start="1133:17" pos:end="1135:66"><name pos:start="1133:17" pos:end="1133:28">qemu_opt_set</name><argument_list pos:start="1133:29" pos:end="1135:66">(<argument pos:start="1133:30" pos:end="1133:34"><expr pos:start="1133:30" pos:end="1133:34"><name pos:start="1133:30" pos:end="1133:34">fsdev</name></expr></argument>, <argument pos:start="1133:37" pos:end="1133:52"><expr pos:start="1133:37" pos:end="1133:52"><literal type="string" pos:start="1133:37" pos:end="1133:52">"security_model"</literal></expr></argument>,

                             <argument pos:start="1135:30" pos:end="1135:65"><expr pos:start="1135:30" pos:end="1135:65"><call pos:start="1135:30" pos:end="1135:65"><name pos:start="1135:30" pos:end="1135:41">qemu_opt_get</name><argument_list pos:start="1135:42" pos:end="1135:65">(<argument pos:start="1135:43" pos:end="1135:46"><expr pos:start="1135:43" pos:end="1135:46"><name pos:start="1135:43" pos:end="1135:46">opts</name></expr></argument>, <argument pos:start="1135:49" pos:end="1135:64"><expr pos:start="1135:49" pos:end="1135:64"><literal type="string" pos:start="1135:49" pos:end="1135:64">"security_model"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="1139:17" pos:end="1141:72"><expr pos:start="1139:17" pos:end="1141:71"><call pos:start="1139:17" pos:end="1141:71"><name pos:start="1139:17" pos:end="1139:33">qemu_opt_set_bool</name><argument_list pos:start="1139:34" pos:end="1141:71">(<argument pos:start="1139:35" pos:end="1139:39"><expr pos:start="1139:35" pos:end="1139:39"><name pos:start="1139:35" pos:end="1139:39">fsdev</name></expr></argument>, <argument pos:start="1139:42" pos:end="1139:51"><expr pos:start="1139:42" pos:end="1139:51"><literal type="string" pos:start="1139:42" pos:end="1139:51">"readonly"</literal></expr></argument>,

                                <argument pos:start="1141:33" pos:end="1141:70"><expr pos:start="1141:33" pos:end="1141:70"><call pos:start="1141:33" pos:end="1141:70"><name pos:start="1141:33" pos:end="1141:49">qemu_opt_get_bool</name><argument_list pos:start="1141:50" pos:end="1141:70">(<argument pos:start="1141:51" pos:end="1141:54"><expr pos:start="1141:51" pos:end="1141:54"><name pos:start="1141:51" pos:end="1141:54">opts</name></expr></argument>, <argument pos:start="1141:57" pos:end="1141:66"><expr pos:start="1141:57" pos:end="1141:66"><literal type="string" pos:start="1141:57" pos:end="1141:66">"readonly"</literal></expr></argument>, <argument pos:start="1141:69" pos:end="1141:69"><expr pos:start="1141:69" pos:end="1141:69"><literal type="number" pos:start="1141:69" pos:end="1141:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1143:17" pos:end="1143:77"><expr pos:start="1143:17" pos:end="1143:76"><name pos:start="1143:17" pos:end="1143:22">device</name> <operator pos:start="1143:24" pos:end="1143:24">=</operator> <call pos:start="1143:26" pos:end="1143:76"><name pos:start="1143:26" pos:end="1143:41">qemu_opts_create</name><argument_list pos:start="1143:42" pos:end="1143:76">(<argument pos:start="1143:43" pos:end="1143:66"><expr pos:start="1143:43" pos:end="1143:66"><call pos:start="1143:43" pos:end="1143:66"><name pos:start="1143:43" pos:end="1143:56">qemu_find_opts</name><argument_list pos:start="1143:57" pos:end="1143:66">(<argument pos:start="1143:58" pos:end="1143:65"><expr pos:start="1143:58" pos:end="1143:65"><literal type="string" pos:start="1143:58" pos:end="1143:65">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1143:69" pos:end="1143:72"><expr pos:start="1143:69" pos:end="1143:72"><name pos:start="1143:69" pos:end="1143:72">NULL</name></expr></argument>, <argument pos:start="1143:75" pos:end="1143:75"><expr pos:start="1143:75" pos:end="1143:75"><literal type="number" pos:start="1143:75" pos:end="1143:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1145:17" pos:end="1145:64"><expr pos:start="1145:17" pos:end="1145:63"><call pos:start="1145:17" pos:end="1145:63"><name pos:start="1145:17" pos:end="1145:28">qemu_opt_set</name><argument_list pos:start="1145:29" pos:end="1145:63">(<argument pos:start="1145:30" pos:end="1145:35"><expr pos:start="1145:30" pos:end="1145:35"><name pos:start="1145:30" pos:end="1145:35">device</name></expr></argument>, <argument pos:start="1145:38" pos:end="1145:45"><expr pos:start="1145:38" pos:end="1145:45"><literal type="string" pos:start="1145:38" pos:end="1145:45">"driver"</literal></expr></argument>, <argument pos:start="1145:48" pos:end="1145:62"><expr pos:start="1145:48" pos:end="1145:62"><literal type="string" pos:start="1145:48" pos:end="1145:62">"virtio-9p-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1147:17" pos:end="1149:62"><expr pos:start="1147:17" pos:end="1149:61"><call pos:start="1147:17" pos:end="1149:61"><name pos:start="1147:17" pos:end="1147:28">qemu_opt_set</name><argument_list pos:start="1147:29" pos:end="1149:61">(<argument pos:start="1147:30" pos:end="1147:35"><expr pos:start="1147:30" pos:end="1147:35"><name pos:start="1147:30" pos:end="1147:35">device</name></expr></argument>, <argument pos:start="1147:38" pos:end="1147:44"><expr pos:start="1147:38" pos:end="1147:44"><literal type="string" pos:start="1147:38" pos:end="1147:44">"fsdev"</literal></expr></argument>,

                             <argument pos:start="1149:30" pos:end="1149:60"><expr pos:start="1149:30" pos:end="1149:60"><call pos:start="1149:30" pos:end="1149:60"><name pos:start="1149:30" pos:end="1149:41">qemu_opt_get</name><argument_list pos:start="1149:42" pos:end="1149:60">(<argument pos:start="1149:43" pos:end="1149:46"><expr pos:start="1149:43" pos:end="1149:46"><name pos:start="1149:43" pos:end="1149:46">opts</name></expr></argument>, <argument pos:start="1149:49" pos:end="1149:59"><expr pos:start="1149:49" pos:end="1149:59"><literal type="string" pos:start="1149:49" pos:end="1149:59">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1151:17" pos:end="1153:62"><expr pos:start="1151:17" pos:end="1153:61"><call pos:start="1151:17" pos:end="1153:61"><name pos:start="1151:17" pos:end="1151:28">qemu_opt_set</name><argument_list pos:start="1151:29" pos:end="1153:61">(<argument pos:start="1151:30" pos:end="1151:35"><expr pos:start="1151:30" pos:end="1151:35"><name pos:start="1151:30" pos:end="1151:35">device</name></expr></argument>, <argument pos:start="1151:38" pos:end="1151:48"><expr pos:start="1151:38" pos:end="1151:48"><literal type="string" pos:start="1151:38" pos:end="1151:48">"mount_tag"</literal></expr></argument>,

                             <argument pos:start="1153:30" pos:end="1153:60"><expr pos:start="1153:30" pos:end="1153:60"><call pos:start="1153:30" pos:end="1153:60"><name pos:start="1153:30" pos:end="1153:41">qemu_opt_get</name><argument_list pos:start="1153:42" pos:end="1153:60">(<argument pos:start="1153:43" pos:end="1153:46"><expr pos:start="1153:43" pos:end="1153:46"><name pos:start="1153:43" pos:end="1153:46">opts</name></expr></argument>, <argument pos:start="1153:49" pos:end="1153:59"><expr pos:start="1153:49" pos:end="1153:59"><literal type="string" pos:start="1153:49" pos:end="1153:59">"mount_tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1155:17" pos:end="1155:22">break;</break>

            </block_content>}</block>

            <case pos:start="1159:13" pos:end="1159:42">case <expr pos:start="1159:18" pos:end="1159:41"><name pos:start="1159:18" pos:end="1159:41">QEMU_OPTION_virtfs_synth</name></expr>:</case> <block pos:start="1159:44" pos:end="1193:13">{<block_content pos:start="1161:17" pos:end="1191:22">

                <decl_stmt pos:start="1161:17" pos:end="1161:32"><decl pos:start="1161:17" pos:end="1161:31"><type pos:start="1161:17" pos:end="1161:26"><name pos:start="1161:17" pos:end="1161:24">QemuOpts</name> <modifier pos:start="1161:26" pos:end="1161:26">*</modifier></type><name pos:start="1161:27" pos:end="1161:31">fsdev</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1163:17" pos:end="1163:33"><decl pos:start="1163:17" pos:end="1163:32"><type pos:start="1163:17" pos:end="1163:26"><name pos:start="1163:17" pos:end="1163:24">QemuOpts</name> <modifier pos:start="1163:26" pos:end="1163:26">*</modifier></type><name pos:start="1163:27" pos:end="1163:32">device</name></decl>;</decl_stmt>



                <expr_stmt pos:start="1167:17" pos:end="1167:80"><expr pos:start="1167:17" pos:end="1167:79"><name pos:start="1167:17" pos:end="1167:21">fsdev</name> <operator pos:start="1167:23" pos:end="1167:23">=</operator> <call pos:start="1167:25" pos:end="1167:79"><name pos:start="1167:25" pos:end="1167:40">qemu_opts_create</name><argument_list pos:start="1167:41" pos:end="1167:79">(<argument pos:start="1167:42" pos:end="1167:64"><expr pos:start="1167:42" pos:end="1167:64"><call pos:start="1167:42" pos:end="1167:64"><name pos:start="1167:42" pos:end="1167:55">qemu_find_opts</name><argument_list pos:start="1167:56" pos:end="1167:64">(<argument pos:start="1167:57" pos:end="1167:63"><expr pos:start="1167:57" pos:end="1167:63"><literal type="string" pos:start="1167:57" pos:end="1167:63">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1167:67" pos:end="1167:75"><expr pos:start="1167:67" pos:end="1167:75"><literal type="string" pos:start="1167:67" pos:end="1167:75">"v_synth"</literal></expr></argument>, <argument pos:start="1167:78" pos:end="1167:78"><expr pos:start="1167:78" pos:end="1167:78"><literal type="number" pos:start="1167:78" pos:end="1167:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1169:17" pos:end="1175:17"><if pos:start="1169:17" pos:end="1175:17">if <condition pos:start="1169:20" pos:end="1169:27">(<expr pos:start="1169:21" pos:end="1169:26"><operator pos:start="1169:21" pos:end="1169:21">!</operator><name pos:start="1169:22" pos:end="1169:26">fsdev</name></expr>)</condition> <block pos:start="1169:29" pos:end="1175:17">{<block_content pos:start="1171:21" pos:end="1173:28">

                    <expr_stmt pos:start="1171:21" pos:end="1171:78"><expr pos:start="1171:21" pos:end="1171:77"><call pos:start="1171:21" pos:end="1171:77"><name pos:start="1171:21" pos:end="1171:27">fprintf</name><argument_list pos:start="1171:28" pos:end="1171:77">(<argument pos:start="1171:29" pos:end="1171:34"><expr pos:start="1171:29" pos:end="1171:34"><name pos:start="1171:29" pos:end="1171:34">stderr</name></expr></argument>, <argument pos:start="1171:37" pos:end="1171:60"><expr pos:start="1171:37" pos:end="1171:60"><literal type="string" pos:start="1171:37" pos:end="1171:60">"duplicate option: %s\n"</literal></expr></argument>, <argument pos:start="1171:63" pos:end="1171:76"><expr pos:start="1171:63" pos:end="1171:76"><literal type="string" pos:start="1171:63" pos:end="1171:76">"virtfs_synth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:28"><expr pos:start="1173:21" pos:end="1173:27"><call pos:start="1173:21" pos:end="1173:27"><name pos:start="1173:21" pos:end="1173:24">exit</name><argument_list pos:start="1173:25" pos:end="1173:27">(<argument pos:start="1173:26" pos:end="1173:26"><expr pos:start="1173:26" pos:end="1173:26"><literal type="number" pos:start="1173:26" pos:end="1173:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1177:17" pos:end="1177:57"><expr pos:start="1177:17" pos:end="1177:56"><call pos:start="1177:17" pos:end="1177:56"><name pos:start="1177:17" pos:end="1177:28">qemu_opt_set</name><argument_list pos:start="1177:29" pos:end="1177:56">(<argument pos:start="1177:30" pos:end="1177:34"><expr pos:start="1177:30" pos:end="1177:34"><name pos:start="1177:30" pos:end="1177:34">fsdev</name></expr></argument>, <argument pos:start="1177:37" pos:end="1177:46"><expr pos:start="1177:37" pos:end="1177:46"><literal type="string" pos:start="1177:37" pos:end="1177:46">"fsdriver"</literal></expr></argument>, <argument pos:start="1177:49" pos:end="1177:55"><expr pos:start="1177:49" pos:end="1177:55"><literal type="string" pos:start="1177:49" pos:end="1177:55">"synth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1179:17" pos:end="1179:49"><expr pos:start="1179:17" pos:end="1179:48"><call pos:start="1179:17" pos:end="1179:48"><name pos:start="1179:17" pos:end="1179:28">qemu_opt_set</name><argument_list pos:start="1179:29" pos:end="1179:48">(<argument pos:start="1179:30" pos:end="1179:34"><expr pos:start="1179:30" pos:end="1179:34"><name pos:start="1179:30" pos:end="1179:34">fsdev</name></expr></argument>, <argument pos:start="1179:37" pos:end="1179:42"><expr pos:start="1179:37" pos:end="1179:42"><literal type="string" pos:start="1179:37" pos:end="1179:42">"path"</literal></expr></argument>, <argument pos:start="1179:45" pos:end="1179:47"><expr pos:start="1179:45" pos:end="1179:47"><literal type="string" pos:start="1179:45" pos:end="1179:47">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="1179:51" pos:end="1179:63">/* ignored */</comment>



                <expr_stmt pos:start="1183:17" pos:end="1183:77"><expr pos:start="1183:17" pos:end="1183:76"><name pos:start="1183:17" pos:end="1183:22">device</name> <operator pos:start="1183:24" pos:end="1183:24">=</operator> <call pos:start="1183:26" pos:end="1183:76"><name pos:start="1183:26" pos:end="1183:41">qemu_opts_create</name><argument_list pos:start="1183:42" pos:end="1183:76">(<argument pos:start="1183:43" pos:end="1183:66"><expr pos:start="1183:43" pos:end="1183:66"><call pos:start="1183:43" pos:end="1183:66"><name pos:start="1183:43" pos:end="1183:56">qemu_find_opts</name><argument_list pos:start="1183:57" pos:end="1183:66">(<argument pos:start="1183:58" pos:end="1183:65"><expr pos:start="1183:58" pos:end="1183:65"><literal type="string" pos:start="1183:58" pos:end="1183:65">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1183:69" pos:end="1183:72"><expr pos:start="1183:69" pos:end="1183:72"><name pos:start="1183:69" pos:end="1183:72">NULL</name></expr></argument>, <argument pos:start="1183:75" pos:end="1183:75"><expr pos:start="1183:75" pos:end="1183:75"><literal type="number" pos:start="1183:75" pos:end="1183:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1185:17" pos:end="1185:64"><expr pos:start="1185:17" pos:end="1185:63"><call pos:start="1185:17" pos:end="1185:63"><name pos:start="1185:17" pos:end="1185:28">qemu_opt_set</name><argument_list pos:start="1185:29" pos:end="1185:63">(<argument pos:start="1185:30" pos:end="1185:35"><expr pos:start="1185:30" pos:end="1185:35"><name pos:start="1185:30" pos:end="1185:35">device</name></expr></argument>, <argument pos:start="1185:38" pos:end="1185:45"><expr pos:start="1185:38" pos:end="1185:45"><literal type="string" pos:start="1185:38" pos:end="1185:45">"driver"</literal></expr></argument>, <argument pos:start="1185:48" pos:end="1185:62"><expr pos:start="1185:48" pos:end="1185:62"><literal type="string" pos:start="1185:48" pos:end="1185:62">"virtio-9p-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1187:17" pos:end="1187:57"><expr pos:start="1187:17" pos:end="1187:56"><call pos:start="1187:17" pos:end="1187:56"><name pos:start="1187:17" pos:end="1187:28">qemu_opt_set</name><argument_list pos:start="1187:29" pos:end="1187:56">(<argument pos:start="1187:30" pos:end="1187:35"><expr pos:start="1187:30" pos:end="1187:35"><name pos:start="1187:30" pos:end="1187:35">device</name></expr></argument>, <argument pos:start="1187:38" pos:end="1187:44"><expr pos:start="1187:38" pos:end="1187:44"><literal type="string" pos:start="1187:38" pos:end="1187:44">"fsdev"</literal></expr></argument>, <argument pos:start="1187:47" pos:end="1187:55"><expr pos:start="1187:47" pos:end="1187:55"><literal type="string" pos:start="1187:47" pos:end="1187:55">"v_synth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1189:17" pos:end="1189:61"><expr pos:start="1189:17" pos:end="1189:60"><call pos:start="1189:17" pos:end="1189:60"><name pos:start="1189:17" pos:end="1189:28">qemu_opt_set</name><argument_list pos:start="1189:29" pos:end="1189:60">(<argument pos:start="1189:30" pos:end="1189:35"><expr pos:start="1189:30" pos:end="1189:35"><name pos:start="1189:30" pos:end="1189:35">device</name></expr></argument>, <argument pos:start="1189:38" pos:end="1189:48"><expr pos:start="1189:38" pos:end="1189:48"><literal type="string" pos:start="1189:38" pos:end="1189:48">"mount_tag"</literal></expr></argument>, <argument pos:start="1189:51" pos:end="1189:59"><expr pos:start="1189:51" pos:end="1189:59"><literal type="string" pos:start="1189:51" pos:end="1189:59">"v_synth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1191:17" pos:end="1191:22">break;</break>

            </block_content>}</block>

            <case pos:start="1195:13" pos:end="1195:36">case <expr pos:start="1195:18" pos:end="1195:35"><name pos:start="1195:18" pos:end="1195:35">QEMU_OPTION_serial</name></expr>:</case>

                <expr_stmt pos:start="1197:17" pos:end="1197:54"><expr pos:start="1197:17" pos:end="1197:53"><call pos:start="1197:17" pos:end="1197:53"><name pos:start="1197:17" pos:end="1197:33">add_device_config</name><argument_list pos:start="1197:34" pos:end="1197:53">(<argument pos:start="1197:35" pos:end="1197:44"><expr pos:start="1197:35" pos:end="1197:44"><name pos:start="1197:35" pos:end="1197:44">DEV_SERIAL</name></expr></argument>, <argument pos:start="1197:47" pos:end="1197:52"><expr pos:start="1197:47" pos:end="1197:52"><name pos:start="1197:47" pos:end="1197:52">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1199:17" pos:end="1199:35"><expr pos:start="1199:17" pos:end="1199:34"><name pos:start="1199:17" pos:end="1199:30">default_serial</name> <operator pos:start="1199:32" pos:end="1199:32">=</operator> <literal type="number" pos:start="1199:34" pos:end="1199:34">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1201:17" pos:end="1205:17"><if pos:start="1201:17" pos:end="1205:17">if <condition pos:start="1201:20" pos:end="1201:52">(<expr pos:start="1201:21" pos:end="1201:51"><call pos:start="1201:21" pos:end="1201:46"><name pos:start="1201:21" pos:end="1201:27">strncmp</name><argument_list pos:start="1201:28" pos:end="1201:46">(<argument pos:start="1201:29" pos:end="1201:34"><expr pos:start="1201:29" pos:end="1201:34"><name pos:start="1201:29" pos:end="1201:34">optarg</name></expr></argument>, <argument pos:start="1201:37" pos:end="1201:42"><expr pos:start="1201:37" pos:end="1201:42"><literal type="string" pos:start="1201:37" pos:end="1201:42">"mon:"</literal></expr></argument>, <argument pos:start="1201:45" pos:end="1201:45"><expr pos:start="1201:45" pos:end="1201:45"><literal type="number" pos:start="1201:45" pos:end="1201:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1201:48" pos:end="1201:49">==</operator> <literal type="number" pos:start="1201:51" pos:end="1201:51">0</literal></expr>)</condition> <block pos:start="1201:54" pos:end="1205:17">{<block_content pos:start="1203:21" pos:end="1203:40">

                    <expr_stmt pos:start="1203:21" pos:end="1203:40"><expr pos:start="1203:21" pos:end="1203:39"><name pos:start="1203:21" pos:end="1203:35">default_monitor</name> <operator pos:start="1203:37" pos:end="1203:37">=</operator> <literal type="number" pos:start="1203:39" pos:end="1203:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1207:17" pos:end="1207:22">break;</break>

            <case pos:start="1209:13" pos:end="1209:38">case <expr pos:start="1209:18" pos:end="1209:37"><name pos:start="1209:18" pos:end="1209:37">QEMU_OPTION_watchdog</name></expr>:</case>

                <if_stmt pos:start="1211:17" pos:end="1219:17"><if pos:start="1211:17" pos:end="1219:17">if <condition pos:start="1211:20" pos:end="1211:29">(<expr pos:start="1211:21" pos:end="1211:28"><name pos:start="1211:21" pos:end="1211:28">watchdog</name></expr>)</condition> <block pos:start="1211:31" pos:end="1219:17">{<block_content pos:start="1213:21" pos:end="1217:29">

                    <expr_stmt pos:start="1213:21" pos:end="1215:77"><expr pos:start="1213:21" pos:end="1215:76"><call pos:start="1213:21" pos:end="1215:76"><name pos:start="1213:21" pos:end="1213:27">fprintf</name><argument_list pos:start="1213:28" pos:end="1215:76">(<argument pos:start="1213:29" pos:end="1213:34"><expr pos:start="1213:29" pos:end="1213:34"><name pos:start="1213:29" pos:end="1213:34">stderr</name></expr></argument>,

                            <argument pos:start="1215:29" pos:end="1215:75"><expr pos:start="1215:29" pos:end="1215:75"><literal type="string" pos:start="1215:29" pos:end="1215:75">"qemu: only one watchdog option may be given\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="1217:21" pos:end="1217:29">return <expr pos:start="1217:28" pos:end="1217:28"><literal type="number" pos:start="1217:28" pos:end="1217:28">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1221:17" pos:end="1221:34"><expr pos:start="1221:17" pos:end="1221:33"><name pos:start="1221:17" pos:end="1221:24">watchdog</name> <operator pos:start="1221:26" pos:end="1221:26">=</operator> <name pos:start="1221:28" pos:end="1221:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="1223:17" pos:end="1223:22">break;</break>

            <case pos:start="1225:13" pos:end="1225:45">case <expr pos:start="1225:18" pos:end="1225:44"><name pos:start="1225:18" pos:end="1225:44">QEMU_OPTION_watchdog_action</name></expr>:</case>

                <if_stmt pos:start="1227:17" pos:end="1233:17"><if pos:start="1227:17" pos:end="1233:17">if <condition pos:start="1227:20" pos:end="1227:57">(<expr pos:start="1227:21" pos:end="1227:56"><call pos:start="1227:21" pos:end="1227:50"><name pos:start="1227:21" pos:end="1227:42">select_watchdog_action</name><argument_list pos:start="1227:43" pos:end="1227:50">(<argument pos:start="1227:44" pos:end="1227:49"><expr pos:start="1227:44" pos:end="1227:49"><name pos:start="1227:44" pos:end="1227:49">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="1227:52" pos:end="1227:53">==</operator> <operator pos:start="1227:55" pos:end="1227:55">-</operator><literal type="number" pos:start="1227:56" pos:end="1227:56">1</literal></expr>)</condition> <block pos:start="1227:59" pos:end="1233:17">{<block_content pos:start="1229:21" pos:end="1231:28">

                    <expr_stmt pos:start="1229:21" pos:end="1229:76"><expr pos:start="1229:21" pos:end="1229:75"><call pos:start="1229:21" pos:end="1229:75"><name pos:start="1229:21" pos:end="1229:27">fprintf</name><argument_list pos:start="1229:28" pos:end="1229:75">(<argument pos:start="1229:29" pos:end="1229:34"><expr pos:start="1229:29" pos:end="1229:34"><name pos:start="1229:29" pos:end="1229:34">stderr</name></expr></argument>, <argument pos:start="1229:37" pos:end="1229:74"><expr pos:start="1229:37" pos:end="1229:74"><literal type="string" pos:start="1229:37" pos:end="1229:74">"Unknown -watchdog-action parameter\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1231:21" pos:end="1231:28"><expr pos:start="1231:21" pos:end="1231:27"><call pos:start="1231:21" pos:end="1231:27"><name pos:start="1231:21" pos:end="1231:24">exit</name><argument_list pos:start="1231:25" pos:end="1231:27">(<argument pos:start="1231:26" pos:end="1231:26"><expr pos:start="1231:26" pos:end="1231:26"><literal type="number" pos:start="1231:26" pos:end="1231:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1235:17" pos:end="1235:22">break;</break>

            <case pos:start="1237:13" pos:end="1237:39">case <expr pos:start="1237:18" pos:end="1237:38"><name pos:start="1237:18" pos:end="1237:38">QEMU_OPTION_virtiocon</name></expr>:</case>

                <expr_stmt pos:start="1239:17" pos:end="1239:55"><expr pos:start="1239:17" pos:end="1239:54"><call pos:start="1239:17" pos:end="1239:54"><name pos:start="1239:17" pos:end="1239:33">add_device_config</name><argument_list pos:start="1239:34" pos:end="1239:54">(<argument pos:start="1239:35" pos:end="1239:45"><expr pos:start="1239:35" pos:end="1239:45"><name pos:start="1239:35" pos:end="1239:45">DEV_VIRTCON</name></expr></argument>, <argument pos:start="1239:48" pos:end="1239:53"><expr pos:start="1239:48" pos:end="1239:53"><name pos:start="1239:48" pos:end="1239:53">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1241:17" pos:end="1241:36"><expr pos:start="1241:17" pos:end="1241:35"><name pos:start="1241:17" pos:end="1241:31">default_virtcon</name> <operator pos:start="1241:33" pos:end="1241:33">=</operator> <literal type="number" pos:start="1241:35" pos:end="1241:35">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1243:17" pos:end="1247:17"><if pos:start="1243:17" pos:end="1247:17">if <condition pos:start="1243:20" pos:end="1243:52">(<expr pos:start="1243:21" pos:end="1243:51"><call pos:start="1243:21" pos:end="1243:46"><name pos:start="1243:21" pos:end="1243:27">strncmp</name><argument_list pos:start="1243:28" pos:end="1243:46">(<argument pos:start="1243:29" pos:end="1243:34"><expr pos:start="1243:29" pos:end="1243:34"><name pos:start="1243:29" pos:end="1243:34">optarg</name></expr></argument>, <argument pos:start="1243:37" pos:end="1243:42"><expr pos:start="1243:37" pos:end="1243:42"><literal type="string" pos:start="1243:37" pos:end="1243:42">"mon:"</literal></expr></argument>, <argument pos:start="1243:45" pos:end="1243:45"><expr pos:start="1243:45" pos:end="1243:45"><literal type="number" pos:start="1243:45" pos:end="1243:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1243:48" pos:end="1243:49">==</operator> <literal type="number" pos:start="1243:51" pos:end="1243:51">0</literal></expr>)</condition> <block pos:start="1243:54" pos:end="1247:17">{<block_content pos:start="1245:21" pos:end="1245:40">

                    <expr_stmt pos:start="1245:21" pos:end="1245:40"><expr pos:start="1245:21" pos:end="1245:39"><name pos:start="1245:21" pos:end="1245:35">default_monitor</name> <operator pos:start="1245:37" pos:end="1245:37">=</operator> <literal type="number" pos:start="1245:39" pos:end="1245:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1249:17" pos:end="1249:22">break;</break>

            <case pos:start="1251:13" pos:end="1251:38">case <expr pos:start="1251:18" pos:end="1251:37"><name pos:start="1251:18" pos:end="1251:37">QEMU_OPTION_parallel</name></expr>:</case>

                <expr_stmt pos:start="1253:17" pos:end="1253:56"><expr pos:start="1253:17" pos:end="1253:55"><call pos:start="1253:17" pos:end="1253:55"><name pos:start="1253:17" pos:end="1253:33">add_device_config</name><argument_list pos:start="1253:34" pos:end="1253:55">(<argument pos:start="1253:35" pos:end="1253:46"><expr pos:start="1253:35" pos:end="1253:46"><name pos:start="1253:35" pos:end="1253:46">DEV_PARALLEL</name></expr></argument>, <argument pos:start="1253:49" pos:end="1253:54"><expr pos:start="1253:49" pos:end="1253:54"><name pos:start="1253:49" pos:end="1253:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1255:17" pos:end="1255:37"><expr pos:start="1255:17" pos:end="1255:36"><name pos:start="1255:17" pos:end="1255:32">default_parallel</name> <operator pos:start="1255:34" pos:end="1255:34">=</operator> <literal type="number" pos:start="1255:36" pos:end="1255:36">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="1257:17" pos:end="1261:17"><if pos:start="1257:17" pos:end="1261:17">if <condition pos:start="1257:20" pos:end="1257:52">(<expr pos:start="1257:21" pos:end="1257:51"><call pos:start="1257:21" pos:end="1257:46"><name pos:start="1257:21" pos:end="1257:27">strncmp</name><argument_list pos:start="1257:28" pos:end="1257:46">(<argument pos:start="1257:29" pos:end="1257:34"><expr pos:start="1257:29" pos:end="1257:34"><name pos:start="1257:29" pos:end="1257:34">optarg</name></expr></argument>, <argument pos:start="1257:37" pos:end="1257:42"><expr pos:start="1257:37" pos:end="1257:42"><literal type="string" pos:start="1257:37" pos:end="1257:42">"mon:"</literal></expr></argument>, <argument pos:start="1257:45" pos:end="1257:45"><expr pos:start="1257:45" pos:end="1257:45"><literal type="number" pos:start="1257:45" pos:end="1257:45">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1257:48" pos:end="1257:49">==</operator> <literal type="number" pos:start="1257:51" pos:end="1257:51">0</literal></expr>)</condition> <block pos:start="1257:54" pos:end="1261:17">{<block_content pos:start="1259:21" pos:end="1259:40">

                    <expr_stmt pos:start="1259:21" pos:end="1259:40"><expr pos:start="1259:21" pos:end="1259:39"><name pos:start="1259:21" pos:end="1259:35">default_monitor</name> <operator pos:start="1259:37" pos:end="1259:37">=</operator> <literal type="number" pos:start="1259:39" pos:end="1259:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1263:17" pos:end="1263:22">break;</break>

            <case pos:start="1265:13" pos:end="1265:38">case <expr pos:start="1265:18" pos:end="1265:37"><name pos:start="1265:18" pos:end="1265:37">QEMU_OPTION_debugcon</name></expr>:</case>

                <expr_stmt pos:start="1267:17" pos:end="1267:56"><expr pos:start="1267:17" pos:end="1267:55"><call pos:start="1267:17" pos:end="1267:55"><name pos:start="1267:17" pos:end="1267:33">add_device_config</name><argument_list pos:start="1267:34" pos:end="1267:55">(<argument pos:start="1267:35" pos:end="1267:46"><expr pos:start="1267:35" pos:end="1267:46"><name pos:start="1267:35" pos:end="1267:46">DEV_DEBUGCON</name></expr></argument>, <argument pos:start="1267:49" pos:end="1267:54"><expr pos:start="1267:49" pos:end="1267:54"><name pos:start="1267:49" pos:end="1267:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1269:17" pos:end="1269:22">break;</break>

	    <case pos:start="1271:13" pos:end="1271:36">case <expr pos:start="1271:18" pos:end="1271:35"><name pos:start="1271:18" pos:end="1271:35">QEMU_OPTION_loadvm</name></expr>:</case>

		<expr_stmt pos:start="1273:17" pos:end="1273:32"><expr pos:start="1273:17" pos:end="1273:31"><name pos:start="1273:17" pos:end="1273:22">loadvm</name> <operator pos:start="1273:24" pos:end="1273:24">=</operator> <name pos:start="1273:26" pos:end="1273:31">optarg</name></expr>;</expr_stmt>

		<break pos:start="1275:17" pos:end="1275:22">break;</break>

            <case pos:start="1277:13" pos:end="1277:41">case <expr pos:start="1277:18" pos:end="1277:40"><name pos:start="1277:18" pos:end="1277:40">QEMU_OPTION_full_screen</name></expr>:</case>

                <expr_stmt pos:start="1279:17" pos:end="1279:32"><expr pos:start="1279:17" pos:end="1279:31"><name pos:start="1279:17" pos:end="1279:27">full_screen</name> <operator pos:start="1279:29" pos:end="1279:29">=</operator> <literal type="number" pos:start="1279:31" pos:end="1279:31">1</literal></expr>;</expr_stmt>

                <break pos:start="1281:17" pos:end="1284:0">break;</break>

<cpp:ifdef pos:start="1283:1" pos:end="1283:17">#<cpp:directive pos:start="1283:2" pos:end="1283:6">ifdef</cpp:directive> <name pos:start="1283:8" pos:end="1283:17">CONFIG_SDL</name></cpp:ifdef>

            <case pos:start="1285:13" pos:end="1285:38">case <expr pos:start="1285:18" pos:end="1285:37"><name pos:start="1285:18" pos:end="1285:37">QEMU_OPTION_no_frame</name></expr>:</case>

                <expr_stmt pos:start="1287:17" pos:end="1287:29"><expr pos:start="1287:17" pos:end="1287:28"><name pos:start="1287:17" pos:end="1287:24">no_frame</name> <operator pos:start="1287:26" pos:end="1287:26">=</operator> <literal type="number" pos:start="1287:28" pos:end="1287:28">1</literal></expr>;</expr_stmt>

                <break pos:start="1289:17" pos:end="1289:22">break;</break>

            <case pos:start="1291:13" pos:end="1291:38">case <expr pos:start="1291:18" pos:end="1291:37"><name pos:start="1291:18" pos:end="1291:37">QEMU_OPTION_alt_grab</name></expr>:</case>

                <expr_stmt pos:start="1293:17" pos:end="1293:29"><expr pos:start="1293:17" pos:end="1293:28"><name pos:start="1293:17" pos:end="1293:24">alt_grab</name> <operator pos:start="1293:26" pos:end="1293:26">=</operator> <literal type="number" pos:start="1293:28" pos:end="1293:28">1</literal></expr>;</expr_stmt>

                <break pos:start="1295:17" pos:end="1295:22">break;</break>

            <case pos:start="1297:13" pos:end="1297:39">case <expr pos:start="1297:18" pos:end="1297:38"><name pos:start="1297:18" pos:end="1297:38">QEMU_OPTION_ctrl_grab</name></expr>:</case>

                <expr_stmt pos:start="1299:17" pos:end="1299:30"><expr pos:start="1299:17" pos:end="1299:29"><name pos:start="1299:17" pos:end="1299:25">ctrl_grab</name> <operator pos:start="1299:27" pos:end="1299:27">=</operator> <literal type="number" pos:start="1299:29" pos:end="1299:29">1</literal></expr>;</expr_stmt>

                <break pos:start="1301:17" pos:end="1301:22">break;</break>

            <case pos:start="1303:13" pos:end="1303:37">case <expr pos:start="1303:18" pos:end="1303:36"><name pos:start="1303:18" pos:end="1303:36">QEMU_OPTION_no_quit</name></expr>:</case>

                <expr_stmt pos:start="1305:17" pos:end="1305:28"><expr pos:start="1305:17" pos:end="1305:27"><name pos:start="1305:17" pos:end="1305:23">no_quit</name> <operator pos:start="1305:25" pos:end="1305:25">=</operator> <literal type="number" pos:start="1305:27" pos:end="1305:27">1</literal></expr>;</expr_stmt>

                <break pos:start="1307:17" pos:end="1307:22">break;</break>

            <case pos:start="1309:13" pos:end="1309:33">case <expr pos:start="1309:18" pos:end="1309:32"><name pos:start="1309:18" pos:end="1309:32">QEMU_OPTION_sdl</name></expr>:</case>

                <expr_stmt pos:start="1311:17" pos:end="1311:38"><expr pos:start="1311:17" pos:end="1311:37"><name pos:start="1311:17" pos:end="1311:28">display_type</name> <operator pos:start="1311:30" pos:end="1311:30">=</operator> <name pos:start="1311:32" pos:end="1311:37">DT_SDL</name></expr>;</expr_stmt>

                <break pos:start="1313:17" pos:end="1316:0">break;</break>

<cpp:else pos:start="1315:1" pos:end="1315:5">#<cpp:directive pos:start="1315:2" pos:end="1315:5">else</cpp:directive></cpp:else>

            <case pos:start="1317:13" pos:end="1317:38">case <expr pos:start="1317:18" pos:end="1317:37"><name pos:start="1317:18" pos:end="1317:37">QEMU_OPTION_no_frame</name></expr>:</case>

            <case pos:start="1319:13" pos:end="1319:38">case <expr pos:start="1319:18" pos:end="1319:37"><name pos:start="1319:18" pos:end="1319:37">QEMU_OPTION_alt_grab</name></expr>:</case>

            <case pos:start="1321:13" pos:end="1321:39">case <expr pos:start="1321:18" pos:end="1321:38"><name pos:start="1321:18" pos:end="1321:38">QEMU_OPTION_ctrl_grab</name></expr>:</case>

            <case pos:start="1323:13" pos:end="1323:37">case <expr pos:start="1323:18" pos:end="1323:36"><name pos:start="1323:18" pos:end="1323:36">QEMU_OPTION_no_quit</name></expr>:</case>

            <case pos:start="1325:13" pos:end="1325:33">case <expr pos:start="1325:18" pos:end="1325:32"><name pos:start="1325:18" pos:end="1325:32">QEMU_OPTION_sdl</name></expr>:</case>

                <expr_stmt pos:start="1327:17" pos:end="1327:61"><expr pos:start="1327:17" pos:end="1327:60"><call pos:start="1327:17" pos:end="1327:60"><name pos:start="1327:17" pos:end="1327:23">fprintf</name><argument_list pos:start="1327:24" pos:end="1327:60">(<argument pos:start="1327:25" pos:end="1327:30"><expr pos:start="1327:25" pos:end="1327:30"><name pos:start="1327:25" pos:end="1327:30">stderr</name></expr></argument>, <argument pos:start="1327:33" pos:end="1327:59"><expr pos:start="1327:33" pos:end="1327:59"><literal type="string" pos:start="1327:33" pos:end="1327:59">"SDL support is disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1329:17" pos:end="1332:0"><expr pos:start="1329:17" pos:end="1329:23"><call pos:start="1329:17" pos:end="1329:23"><name pos:start="1329:17" pos:end="1329:20">exit</name><argument_list pos:start="1329:21" pos:end="1329:23">(<argument pos:start="1329:22" pos:end="1329:22"><expr pos:start="1329:22" pos:end="1329:22"><literal type="number" pos:start="1329:22" pos:end="1329:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1331:1" pos:end="1331:6">#<cpp:directive pos:start="1331:2" pos:end="1331:6">endif</cpp:directive></cpp:endif>

            <case pos:start="1333:13" pos:end="1333:37">case <expr pos:start="1333:18" pos:end="1333:36"><name pos:start="1333:18" pos:end="1333:36">QEMU_OPTION_pidfile</name></expr>:</case>

                <expr_stmt pos:start="1335:17" pos:end="1335:34"><expr pos:start="1335:17" pos:end="1335:33"><name pos:start="1335:17" pos:end="1335:24">pid_file</name> <operator pos:start="1335:26" pos:end="1335:26">=</operator> <name pos:start="1335:28" pos:end="1335:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="1337:17" pos:end="1337:22">break;</break>

            <case pos:start="1339:13" pos:end="1339:40">case <expr pos:start="1339:18" pos:end="1339:39"><name pos:start="1339:18" pos:end="1339:39">QEMU_OPTION_win2k_hack</name></expr>:</case>

                <expr_stmt pos:start="1341:17" pos:end="1341:39"><expr pos:start="1341:17" pos:end="1341:38"><name pos:start="1341:17" pos:end="1341:34">win2k_install_hack</name> <operator pos:start="1341:36" pos:end="1341:36">=</operator> <literal type="number" pos:start="1341:38" pos:end="1341:38">1</literal></expr>;</expr_stmt>

                <break pos:start="1343:17" pos:end="1343:22">break;</break>

            <case pos:start="1345:13" pos:end="1345:41">case <expr pos:start="1345:18" pos:end="1345:40"><name pos:start="1345:18" pos:end="1345:40">QEMU_OPTION_rtc_td_hack</name></expr>:</case>

                <expr_stmt pos:start="1347:17" pos:end="1347:32"><expr pos:start="1347:17" pos:end="1347:31"><name pos:start="1347:17" pos:end="1347:27">rtc_td_hack</name> <operator pos:start="1347:29" pos:end="1347:29">=</operator> <literal type="number" pos:start="1347:31" pos:end="1347:31">1</literal></expr>;</expr_stmt>

                <break pos:start="1349:17" pos:end="1349:22">break;</break>

            <case pos:start="1351:13" pos:end="1351:39">case <expr pos:start="1351:18" pos:end="1351:38"><name pos:start="1351:18" pos:end="1351:38">QEMU_OPTION_acpitable</name></expr>:</case>

                <expr_stmt pos:start="1353:17" pos:end="1353:44"><expr pos:start="1353:17" pos:end="1353:43"><call pos:start="1353:17" pos:end="1353:43"><name pos:start="1353:17" pos:end="1353:35">do_acpitable_option</name><argument_list pos:start="1353:36" pos:end="1353:43">(<argument pos:start="1353:37" pos:end="1353:42"><expr pos:start="1353:37" pos:end="1353:42"><name pos:start="1353:37" pos:end="1353:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1355:17" pos:end="1355:22">break;</break>

            <case pos:start="1357:13" pos:end="1357:36">case <expr pos:start="1357:18" pos:end="1357:35"><name pos:start="1357:18" pos:end="1357:35">QEMU_OPTION_smbios</name></expr>:</case>

                <expr_stmt pos:start="1359:17" pos:end="1359:41"><expr pos:start="1359:17" pos:end="1359:40"><call pos:start="1359:17" pos:end="1359:40"><name pos:start="1359:17" pos:end="1359:32">do_smbios_option</name><argument_list pos:start="1359:33" pos:end="1359:40">(<argument pos:start="1359:34" pos:end="1359:39"><expr pos:start="1359:34" pos:end="1359:39"><name pos:start="1359:34" pos:end="1359:39">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1361:17" pos:end="1361:22">break;</break>

            <case pos:start="1363:13" pos:end="1363:40">case <expr pos:start="1363:18" pos:end="1363:39"><name pos:start="1363:18" pos:end="1363:39">QEMU_OPTION_enable_kvm</name></expr>:</case>

                <expr_stmt pos:start="1365:17" pos:end="1365:50"><expr pos:start="1365:17" pos:end="1365:49"><name pos:start="1365:17" pos:end="1365:21">olist</name> <operator pos:start="1365:23" pos:end="1365:23">=</operator> <call pos:start="1365:25" pos:end="1365:49"><name pos:start="1365:25" pos:end="1365:38">qemu_find_opts</name><argument_list pos:start="1365:39" pos:end="1365:49">(<argument pos:start="1365:40" pos:end="1365:48"><expr pos:start="1365:40" pos:end="1365:48"><literal type="string" pos:start="1365:40" pos:end="1365:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1367:17" pos:end="1367:39"><expr pos:start="1367:17" pos:end="1367:38"><call pos:start="1367:17" pos:end="1367:38"><name pos:start="1367:17" pos:end="1367:31">qemu_opts_reset</name><argument_list pos:start="1367:32" pos:end="1367:38">(<argument pos:start="1367:33" pos:end="1367:37"><expr pos:start="1367:33" pos:end="1367:37"><name pos:start="1367:33" pos:end="1367:37">olist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1369:17" pos:end="1369:55"><expr pos:start="1369:17" pos:end="1369:54"><call pos:start="1369:17" pos:end="1369:54"><name pos:start="1369:17" pos:end="1369:31">qemu_opts_parse</name><argument_list pos:start="1369:32" pos:end="1369:54">(<argument pos:start="1369:33" pos:end="1369:37"><expr pos:start="1369:33" pos:end="1369:37"><name pos:start="1369:33" pos:end="1369:37">olist</name></expr></argument>, <argument pos:start="1369:40" pos:end="1369:50"><expr pos:start="1369:40" pos:end="1369:50"><literal type="string" pos:start="1369:40" pos:end="1369:50">"accel=kvm"</literal></expr></argument>, <argument pos:start="1369:53" pos:end="1369:53"><expr pos:start="1369:53" pos:end="1369:53"><literal type="number" pos:start="1369:53" pos:end="1369:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1371:17" pos:end="1371:22">break;</break>

            <case pos:start="1373:13" pos:end="1373:37">case <expr pos:start="1373:18" pos:end="1373:36"><name pos:start="1373:18" pos:end="1373:36">QEMU_OPTION_machine</name></expr>:</case>

                <expr_stmt pos:start="1375:17" pos:end="1375:50"><expr pos:start="1375:17" pos:end="1375:49"><name pos:start="1375:17" pos:end="1375:21">olist</name> <operator pos:start="1375:23" pos:end="1375:23">=</operator> <call pos:start="1375:25" pos:end="1375:49"><name pos:start="1375:25" pos:end="1375:38">qemu_find_opts</name><argument_list pos:start="1375:39" pos:end="1375:49">(<argument pos:start="1375:40" pos:end="1375:48"><expr pos:start="1375:40" pos:end="1375:48"><literal type="string" pos:start="1375:40" pos:end="1375:48">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1377:17" pos:end="1377:39"><expr pos:start="1377:17" pos:end="1377:38"><call pos:start="1377:17" pos:end="1377:38"><name pos:start="1377:17" pos:end="1377:31">qemu_opts_reset</name><argument_list pos:start="1377:32" pos:end="1377:38">(<argument pos:start="1377:33" pos:end="1377:37"><expr pos:start="1377:33" pos:end="1377:37"><name pos:start="1377:33" pos:end="1377:37">olist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1379:17" pos:end="1379:57"><expr pos:start="1379:17" pos:end="1379:56"><name pos:start="1379:17" pos:end="1379:20">opts</name> <operator pos:start="1379:22" pos:end="1379:22">=</operator> <call pos:start="1379:24" pos:end="1379:56"><name pos:start="1379:24" pos:end="1379:38">qemu_opts_parse</name><argument_list pos:start="1379:39" pos:end="1379:56">(<argument pos:start="1379:40" pos:end="1379:44"><expr pos:start="1379:40" pos:end="1379:44"><name pos:start="1379:40" pos:end="1379:44">olist</name></expr></argument>, <argument pos:start="1379:47" pos:end="1379:52"><expr pos:start="1379:47" pos:end="1379:52"><name pos:start="1379:47" pos:end="1379:52">optarg</name></expr></argument>, <argument pos:start="1379:55" pos:end="1379:55"><expr pos:start="1379:55" pos:end="1379:55"><literal type="number" pos:start="1379:55" pos:end="1379:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1381:17" pos:end="1387:17"><if pos:start="1381:17" pos:end="1387:17">if <condition pos:start="1381:20" pos:end="1381:26">(<expr pos:start="1381:21" pos:end="1381:25"><operator pos:start="1381:21" pos:end="1381:21">!</operator><name pos:start="1381:22" pos:end="1381:25">opts</name></expr>)</condition> <block pos:start="1381:28" pos:end="1387:17">{<block_content pos:start="1383:21" pos:end="1385:28">

                    <expr_stmt pos:start="1383:21" pos:end="1383:65"><expr pos:start="1383:21" pos:end="1383:64"><call pos:start="1383:21" pos:end="1383:64"><name pos:start="1383:21" pos:end="1383:27">fprintf</name><argument_list pos:start="1383:28" pos:end="1383:64">(<argument pos:start="1383:29" pos:end="1383:34"><expr pos:start="1383:29" pos:end="1383:34"><name pos:start="1383:29" pos:end="1383:34">stderr</name></expr></argument>, <argument pos:start="1383:37" pos:end="1383:55"><expr pos:start="1383:37" pos:end="1383:55"><literal type="string" pos:start="1383:37" pos:end="1383:55">"parse error: %s\n"</literal></expr></argument>, <argument pos:start="1383:58" pos:end="1383:63"><expr pos:start="1383:58" pos:end="1383:63"><name pos:start="1383:58" pos:end="1383:63">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1385:21" pos:end="1385:28"><expr pos:start="1385:21" pos:end="1385:27"><call pos:start="1385:21" pos:end="1385:27"><name pos:start="1385:21" pos:end="1385:24">exit</name><argument_list pos:start="1385:25" pos:end="1385:27">(<argument pos:start="1385:26" pos:end="1385:26"><expr pos:start="1385:26" pos:end="1385:26"><literal type="number" pos:start="1385:26" pos:end="1385:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1389:17" pos:end="1389:52"><expr pos:start="1389:17" pos:end="1389:51"><name pos:start="1389:17" pos:end="1389:22">optarg</name> <operator pos:start="1389:24" pos:end="1389:24">=</operator> <call pos:start="1389:26" pos:end="1389:51"><name pos:start="1389:26" pos:end="1389:37">qemu_opt_get</name><argument_list pos:start="1389:38" pos:end="1389:51">(<argument pos:start="1389:39" pos:end="1389:42"><expr pos:start="1389:39" pos:end="1389:42"><name pos:start="1389:39" pos:end="1389:42">opts</name></expr></argument>, <argument pos:start="1389:45" pos:end="1389:50"><expr pos:start="1389:45" pos:end="1389:50"><literal type="string" pos:start="1389:45" pos:end="1389:50">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1391:17" pos:end="1395:17"><if pos:start="1391:17" pos:end="1395:17">if <condition pos:start="1391:20" pos:end="1391:27">(<expr pos:start="1391:21" pos:end="1391:26"><name pos:start="1391:21" pos:end="1391:26">optarg</name></expr>)</condition> <block pos:start="1391:29" pos:end="1395:17">{<block_content pos:start="1393:21" pos:end="1393:52">

                    <expr_stmt pos:start="1393:21" pos:end="1393:52"><expr pos:start="1393:21" pos:end="1393:51"><name pos:start="1393:21" pos:end="1393:27">machine</name> <operator pos:start="1393:29" pos:end="1393:29">=</operator> <call pos:start="1393:31" pos:end="1393:51"><name pos:start="1393:31" pos:end="1393:43">machine_parse</name><argument_list pos:start="1393:44" pos:end="1393:51">(<argument pos:start="1393:45" pos:end="1393:50"><expr pos:start="1393:45" pos:end="1393:50"><name pos:start="1393:45" pos:end="1393:50">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1397:17" pos:end="1397:22">break;</break>

            <case pos:start="1399:13" pos:end="1399:33">case <expr pos:start="1399:18" pos:end="1399:32"><name pos:start="1399:18" pos:end="1399:32">QEMU_OPTION_usb</name></expr>:</case>

                <expr_stmt pos:start="1401:17" pos:end="1401:32"><expr pos:start="1401:17" pos:end="1401:31"><name pos:start="1401:17" pos:end="1401:27">usb_enabled</name> <operator pos:start="1401:29" pos:end="1401:29">=</operator> <literal type="number" pos:start="1401:31" pos:end="1401:31">1</literal></expr>;</expr_stmt>

                <break pos:start="1403:17" pos:end="1403:22">break;</break>

            <case pos:start="1405:13" pos:end="1405:39">case <expr pos:start="1405:18" pos:end="1405:38"><name pos:start="1405:18" pos:end="1405:38">QEMU_OPTION_usbdevice</name></expr>:</case>

                <expr_stmt pos:start="1407:17" pos:end="1407:32"><expr pos:start="1407:17" pos:end="1407:31"><name pos:start="1407:17" pos:end="1407:27">usb_enabled</name> <operator pos:start="1407:29" pos:end="1407:29">=</operator> <literal type="number" pos:start="1407:31" pos:end="1407:31">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1409:17" pos:end="1409:51"><expr pos:start="1409:17" pos:end="1409:50"><call pos:start="1409:17" pos:end="1409:50"><name pos:start="1409:17" pos:end="1409:33">add_device_config</name><argument_list pos:start="1409:34" pos:end="1409:50">(<argument pos:start="1409:35" pos:end="1409:41"><expr pos:start="1409:35" pos:end="1409:41"><name pos:start="1409:35" pos:end="1409:41">DEV_USB</name></expr></argument>, <argument pos:start="1409:44" pos:end="1409:49"><expr pos:start="1409:44" pos:end="1409:49"><name pos:start="1409:44" pos:end="1409:49">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1411:17" pos:end="1411:22">break;</break>

            <case pos:start="1413:13" pos:end="1413:36">case <expr pos:start="1413:18" pos:end="1413:35"><name pos:start="1413:18" pos:end="1413:35">QEMU_OPTION_device</name></expr>:</case>

                <if_stmt pos:start="1415:17" pos:end="1419:17"><if pos:start="1415:17" pos:end="1419:17">if <condition pos:start="1415:20" pos:end="1415:74">(<expr pos:start="1415:21" pos:end="1415:73"><operator pos:start="1415:21" pos:end="1415:21">!</operator><call pos:start="1415:22" pos:end="1415:73"><name pos:start="1415:22" pos:end="1415:36">qemu_opts_parse</name><argument_list pos:start="1415:37" pos:end="1415:73">(<argument pos:start="1415:38" pos:end="1415:61"><expr pos:start="1415:38" pos:end="1415:61"><call pos:start="1415:38" pos:end="1415:61"><name pos:start="1415:38" pos:end="1415:51">qemu_find_opts</name><argument_list pos:start="1415:52" pos:end="1415:61">(<argument pos:start="1415:53" pos:end="1415:60"><expr pos:start="1415:53" pos:end="1415:60"><literal type="string" pos:start="1415:53" pos:end="1415:60">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1415:64" pos:end="1415:69"><expr pos:start="1415:64" pos:end="1415:69"><name pos:start="1415:64" pos:end="1415:69">optarg</name></expr></argument>, <argument pos:start="1415:72" pos:end="1415:72"><expr pos:start="1415:72" pos:end="1415:72"><literal type="number" pos:start="1415:72" pos:end="1415:72">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1415:76" pos:end="1419:17">{<block_content pos:start="1417:21" pos:end="1417:28">

                    <expr_stmt pos:start="1417:21" pos:end="1417:28"><expr pos:start="1417:21" pos:end="1417:27"><call pos:start="1417:21" pos:end="1417:27"><name pos:start="1417:21" pos:end="1417:24">exit</name><argument_list pos:start="1417:25" pos:end="1417:27">(<argument pos:start="1417:26" pos:end="1417:26"><expr pos:start="1417:26" pos:end="1417:26"><literal type="number" pos:start="1417:26" pos:end="1417:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1421:17" pos:end="1421:22">break;</break>

            <case pos:start="1423:13" pos:end="1423:33">case <expr pos:start="1423:18" pos:end="1423:32"><name pos:start="1423:18" pos:end="1423:32">QEMU_OPTION_smp</name></expr>:</case>

                <expr_stmt pos:start="1425:17" pos:end="1425:34"><expr pos:start="1425:17" pos:end="1425:33"><call pos:start="1425:17" pos:end="1425:33"><name pos:start="1425:17" pos:end="1425:25">smp_parse</name><argument_list pos:start="1425:26" pos:end="1425:33">(<argument pos:start="1425:27" pos:end="1425:32"><expr pos:start="1425:27" pos:end="1425:32"><name pos:start="1425:27" pos:end="1425:32">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1427:17" pos:end="1433:17"><if pos:start="1427:17" pos:end="1433:17">if <condition pos:start="1427:20" pos:end="1427:33">(<expr pos:start="1427:21" pos:end="1427:32"><name pos:start="1427:21" pos:end="1427:28">smp_cpus</name> <operator pos:start="1427:30" pos:end="1427:30">&lt;</operator> <literal type="number" pos:start="1427:32" pos:end="1427:32">1</literal></expr>)</condition> <block pos:start="1427:35" pos:end="1433:17">{<block_content pos:start="1429:21" pos:end="1431:28">

                    <expr_stmt pos:start="1429:21" pos:end="1429:64"><expr pos:start="1429:21" pos:end="1429:63"><call pos:start="1429:21" pos:end="1429:63"><name pos:start="1429:21" pos:end="1429:27">fprintf</name><argument_list pos:start="1429:28" pos:end="1429:63">(<argument pos:start="1429:29" pos:end="1429:34"><expr pos:start="1429:29" pos:end="1429:34"><name pos:start="1429:29" pos:end="1429:34">stderr</name></expr></argument>, <argument pos:start="1429:37" pos:end="1429:62"><expr pos:start="1429:37" pos:end="1429:62"><literal type="string" pos:start="1429:37" pos:end="1429:62">"Invalid number of CPUs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1431:21" pos:end="1431:28"><expr pos:start="1431:21" pos:end="1431:27"><call pos:start="1431:21" pos:end="1431:27"><name pos:start="1431:21" pos:end="1431:24">exit</name><argument_list pos:start="1431:25" pos:end="1431:27">(<argument pos:start="1431:26" pos:end="1431:26"><expr pos:start="1431:26" pos:end="1431:26"><literal type="number" pos:start="1431:26" pos:end="1431:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1435:17" pos:end="1443:17"><if pos:start="1435:17" pos:end="1443:17">if <condition pos:start="1435:20" pos:end="1435:40">(<expr pos:start="1435:21" pos:end="1435:39"><name pos:start="1435:21" pos:end="1435:28">max_cpus</name> <operator pos:start="1435:30" pos:end="1435:30">&lt;</operator> <name pos:start="1435:32" pos:end="1435:39">smp_cpus</name></expr>)</condition> <block pos:start="1435:42" pos:end="1443:17">{<block_content pos:start="1437:21" pos:end="1441:28">

                    <expr_stmt pos:start="1437:21" pos:end="1439:37"><expr pos:start="1437:21" pos:end="1439:36"><call pos:start="1437:21" pos:end="1439:36"><name pos:start="1437:21" pos:end="1437:27">fprintf</name><argument_list pos:start="1437:28" pos:end="1439:36">(<argument pos:start="1437:29" pos:end="1437:34"><expr pos:start="1437:29" pos:end="1437:34"><name pos:start="1437:29" pos:end="1437:34">stderr</name></expr></argument>, <argument pos:start="1437:37" pos:end="1439:35"><expr pos:start="1437:37" pos:end="1439:35"><literal type="string" pos:start="1437:37" pos:end="1437:79">"maxcpus must be equal to or greater than "</literal>

                            <literal type="string" pos:start="1439:29" pos:end="1439:35">"smp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1441:21" pos:end="1441:28"><expr pos:start="1441:21" pos:end="1441:27"><call pos:start="1441:21" pos:end="1441:27"><name pos:start="1441:21" pos:end="1441:24">exit</name><argument_list pos:start="1441:25" pos:end="1441:27">(<argument pos:start="1441:26" pos:end="1441:26"><expr pos:start="1441:26" pos:end="1441:26"><literal type="number" pos:start="1441:26" pos:end="1441:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1445:17" pos:end="1451:17"><if pos:start="1445:17" pos:end="1451:17">if <condition pos:start="1445:20" pos:end="1445:35">(<expr pos:start="1445:21" pos:end="1445:34"><name pos:start="1445:21" pos:end="1445:28">max_cpus</name> <operator pos:start="1445:30" pos:end="1445:30">&gt;</operator> <literal type="number" pos:start="1445:32" pos:end="1445:34">255</literal></expr>)</condition> <block pos:start="1445:37" pos:end="1451:17">{<block_content pos:start="1447:21" pos:end="1449:28">

                    <expr_stmt pos:start="1447:21" pos:end="1447:71"><expr pos:start="1447:21" pos:end="1447:70"><call pos:start="1447:21" pos:end="1447:70"><name pos:start="1447:21" pos:end="1447:27">fprintf</name><argument_list pos:start="1447:28" pos:end="1447:70">(<argument pos:start="1447:29" pos:end="1447:34"><expr pos:start="1447:29" pos:end="1447:34"><name pos:start="1447:29" pos:end="1447:34">stderr</name></expr></argument>, <argument pos:start="1447:37" pos:end="1447:69"><expr pos:start="1447:37" pos:end="1447:69"><literal type="string" pos:start="1447:37" pos:end="1447:69">"Unsupported number of maxcpus\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1449:21" pos:end="1449:28"><expr pos:start="1449:21" pos:end="1449:27"><call pos:start="1449:21" pos:end="1449:27"><name pos:start="1449:21" pos:end="1449:24">exit</name><argument_list pos:start="1449:25" pos:end="1449:27">(<argument pos:start="1449:26" pos:end="1449:26"><expr pos:start="1449:26" pos:end="1449:26"><literal type="number" pos:start="1449:26" pos:end="1449:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1453:17" pos:end="1453:22">break;</break>

	    <case pos:start="1455:13" pos:end="1458:0">case <expr pos:start="1455:18" pos:end="1455:32"><name pos:start="1455:18" pos:end="1455:32">QEMU_OPTION_vnc</name></expr>:</case>

<cpp:ifdef pos:start="1457:1" pos:end="1457:17">#<cpp:directive pos:start="1457:2" pos:end="1457:6">ifdef</cpp:directive> <name pos:start="1457:8" pos:end="1457:17">CONFIG_VNC</name></cpp:ifdef>

                <expr_stmt pos:start="1459:17" pos:end="1459:33"><expr pos:start="1459:17" pos:end="1459:32"><name pos:start="1459:17" pos:end="1459:30">display_remote</name><operator pos:start="1459:31" pos:end="1459:32">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1461:17" pos:end="1464:0"><expr pos:start="1461:17" pos:end="1461:36"><name pos:start="1461:17" pos:end="1461:27">vnc_display</name> <operator pos:start="1461:29" pos:end="1461:29">=</operator> <name pos:start="1461:31" pos:end="1461:36">optarg</name></expr>;</expr_stmt>

<cpp:else pos:start="1463:1" pos:end="1463:5">#<cpp:directive pos:start="1463:2" pos:end="1463:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="1465:17" pos:end="1465:61"><expr pos:start="1465:17" pos:end="1465:60"><call pos:start="1465:17" pos:end="1465:60"><name pos:start="1465:17" pos:end="1465:23">fprintf</name><argument_list pos:start="1465:24" pos:end="1465:60">(<argument pos:start="1465:25" pos:end="1465:30"><expr pos:start="1465:25" pos:end="1465:30"><name pos:start="1465:25" pos:end="1465:30">stderr</name></expr></argument>, <argument pos:start="1465:33" pos:end="1465:59"><expr pos:start="1465:33" pos:end="1465:59"><literal type="string" pos:start="1465:33" pos:end="1465:59">"VNC support is disabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1467:17" pos:end="1470:0"><expr pos:start="1467:17" pos:end="1467:23"><call pos:start="1467:17" pos:end="1467:23"><name pos:start="1467:17" pos:end="1467:20">exit</name><argument_list pos:start="1467:21" pos:end="1467:23">(<argument pos:start="1467:22" pos:end="1467:22"><expr pos:start="1467:22" pos:end="1467:22"><literal type="number" pos:start="1467:22" pos:end="1467:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1469:1" pos:end="1469:6">#<cpp:directive pos:start="1469:2" pos:end="1469:6">endif</cpp:directive></cpp:endif>

                <break pos:start="1471:17" pos:end="1471:22">break;</break>

            <case pos:start="1473:13" pos:end="1473:37">case <expr pos:start="1473:18" pos:end="1473:36"><name pos:start="1473:18" pos:end="1473:36">QEMU_OPTION_no_acpi</name></expr>:</case>

                <expr_stmt pos:start="1475:17" pos:end="1475:33"><expr pos:start="1475:17" pos:end="1475:32"><name pos:start="1475:17" pos:end="1475:28">acpi_enabled</name> <operator pos:start="1475:30" pos:end="1475:30">=</operator> <literal type="number" pos:start="1475:32" pos:end="1475:32">0</literal></expr>;</expr_stmt>

                <break pos:start="1477:17" pos:end="1477:22">break;</break>

            <case pos:start="1479:13" pos:end="1479:37">case <expr pos:start="1479:18" pos:end="1479:36"><name pos:start="1479:18" pos:end="1479:36">QEMU_OPTION_no_hpet</name></expr>:</case>

                <expr_stmt pos:start="1481:17" pos:end="1481:28"><expr pos:start="1481:17" pos:end="1481:27"><name pos:start="1481:17" pos:end="1481:23">no_hpet</name> <operator pos:start="1481:25" pos:end="1481:25">=</operator> <literal type="number" pos:start="1481:27" pos:end="1481:27">1</literal></expr>;</expr_stmt>

                <break pos:start="1483:17" pos:end="1483:22">break;</break>

            <case pos:start="1485:13" pos:end="1485:37">case <expr pos:start="1485:18" pos:end="1485:36"><name pos:start="1485:18" pos:end="1485:36">QEMU_OPTION_balloon</name></expr>:</case>

                <if_stmt pos:start="1487:17" pos:end="1493:17"><if pos:start="1487:17" pos:end="1493:17">if <condition pos:start="1487:20" pos:end="1487:46">(<expr pos:start="1487:21" pos:end="1487:45"><call pos:start="1487:21" pos:end="1487:41"><name pos:start="1487:21" pos:end="1487:33">balloon_parse</name><argument_list pos:start="1487:34" pos:end="1487:41">(<argument pos:start="1487:35" pos:end="1487:40"><expr pos:start="1487:35" pos:end="1487:40"><name pos:start="1487:35" pos:end="1487:40">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="1487:43" pos:end="1487:43">&lt;</operator> <literal type="number" pos:start="1487:45" pos:end="1487:45">0</literal></expr>)</condition> <block pos:start="1487:48" pos:end="1493:17">{<block_content pos:start="1489:21" pos:end="1491:28">

                    <expr_stmt pos:start="1489:21" pos:end="1489:78"><expr pos:start="1489:21" pos:end="1489:77"><call pos:start="1489:21" pos:end="1489:77"><name pos:start="1489:21" pos:end="1489:27">fprintf</name><argument_list pos:start="1489:28" pos:end="1489:77">(<argument pos:start="1489:29" pos:end="1489:34"><expr pos:start="1489:29" pos:end="1489:34"><name pos:start="1489:29" pos:end="1489:34">stderr</name></expr></argument>, <argument pos:start="1489:37" pos:end="1489:68"><expr pos:start="1489:37" pos:end="1489:68"><literal type="string" pos:start="1489:37" pos:end="1489:68">"Unknown -balloon argument %s\n"</literal></expr></argument>, <argument pos:start="1489:71" pos:end="1489:76"><expr pos:start="1489:71" pos:end="1489:76"><name pos:start="1489:71" pos:end="1489:76">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1491:21" pos:end="1491:28"><expr pos:start="1491:21" pos:end="1491:27"><call pos:start="1491:21" pos:end="1491:27"><name pos:start="1491:21" pos:end="1491:24">exit</name><argument_list pos:start="1491:25" pos:end="1491:27">(<argument pos:start="1491:26" pos:end="1491:26"><expr pos:start="1491:26" pos:end="1491:26"><literal type="number" pos:start="1491:26" pos:end="1491:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1495:17" pos:end="1495:22">break;</break>

            <case pos:start="1497:13" pos:end="1497:39">case <expr pos:start="1497:18" pos:end="1497:38"><name pos:start="1497:18" pos:end="1497:38">QEMU_OPTION_no_reboot</name></expr>:</case>

                <expr_stmt pos:start="1499:17" pos:end="1499:30"><expr pos:start="1499:17" pos:end="1499:29"><name pos:start="1499:17" pos:end="1499:25">no_reboot</name> <operator pos:start="1499:27" pos:end="1499:27">=</operator> <literal type="number" pos:start="1499:29" pos:end="1499:29">1</literal></expr>;</expr_stmt>

                <break pos:start="1501:17" pos:end="1501:22">break;</break>

            <case pos:start="1503:13" pos:end="1503:41">case <expr pos:start="1503:18" pos:end="1503:40"><name pos:start="1503:18" pos:end="1503:40">QEMU_OPTION_no_shutdown</name></expr>:</case>

                <expr_stmt pos:start="1505:17" pos:end="1505:32"><expr pos:start="1505:17" pos:end="1505:31"><name pos:start="1505:17" pos:end="1505:27">no_shutdown</name> <operator pos:start="1505:29" pos:end="1505:29">=</operator> <literal type="number" pos:start="1505:31" pos:end="1505:31">1</literal></expr>;</expr_stmt>

                <break pos:start="1507:17" pos:end="1507:22">break;</break>

            <case pos:start="1509:13" pos:end="1509:41">case <expr pos:start="1509:18" pos:end="1509:40"><name pos:start="1509:18" pos:end="1509:40">QEMU_OPTION_show_cursor</name></expr>:</case>

                <expr_stmt pos:start="1511:17" pos:end="1511:32"><expr pos:start="1511:17" pos:end="1511:31"><name pos:start="1511:17" pos:end="1511:27">cursor_hide</name> <operator pos:start="1511:29" pos:end="1511:29">=</operator> <literal type="number" pos:start="1511:31" pos:end="1511:31">0</literal></expr>;</expr_stmt>

                <break pos:start="1513:17" pos:end="1513:22">break;</break>

            <case pos:start="1515:13" pos:end="1515:34">case <expr pos:start="1515:18" pos:end="1515:33"><name pos:start="1515:18" pos:end="1515:33">QEMU_OPTION_uuid</name></expr>:</case>

                <if_stmt pos:start="1517:17" pos:end="1525:17"><if pos:start="1517:17" pos:end="1525:17">if<condition pos:start="1517:19" pos:end="1517:58">(<expr pos:start="1517:20" pos:end="1517:57"><call pos:start="1517:20" pos:end="1517:53"><name pos:start="1517:20" pos:end="1517:34">qemu_uuid_parse</name><argument_list pos:start="1517:35" pos:end="1517:53">(<argument pos:start="1517:36" pos:end="1517:41"><expr pos:start="1517:36" pos:end="1517:41"><name pos:start="1517:36" pos:end="1517:41">optarg</name></expr></argument>, <argument pos:start="1517:44" pos:end="1517:52"><expr pos:start="1517:44" pos:end="1517:52"><name pos:start="1517:44" pos:end="1517:52">qemu_uuid</name></expr></argument>)</argument_list></call> <operator pos:start="1517:55" pos:end="1517:55">&lt;</operator> <literal type="number" pos:start="1517:57" pos:end="1517:57">0</literal></expr>)</condition> <block pos:start="1517:60" pos:end="1525:17">{<block_content pos:start="1519:21" pos:end="1523:28">

                    <expr_stmt pos:start="1519:21" pos:end="1521:48"><expr pos:start="1519:21" pos:end="1521:47"><call pos:start="1519:21" pos:end="1521:47"><name pos:start="1519:21" pos:end="1519:27">fprintf</name><argument_list pos:start="1519:28" pos:end="1521:47">(<argument pos:start="1519:29" pos:end="1519:34"><expr pos:start="1519:29" pos:end="1519:34"><name pos:start="1519:29" pos:end="1519:34">stderr</name></expr></argument>, <argument pos:start="1519:37" pos:end="1521:46"><expr pos:start="1519:37" pos:end="1521:46"><literal type="string" pos:start="1519:37" pos:end="1519:64">"Fail to parse UUID string."</literal>

                            <literal type="string" pos:start="1521:29" pos:end="1521:46">" Wrong format.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1523:21" pos:end="1523:28"><expr pos:start="1523:21" pos:end="1523:27"><call pos:start="1523:21" pos:end="1523:27"><name pos:start="1523:21" pos:end="1523:24">exit</name><argument_list pos:start="1523:25" pos:end="1523:27">(<argument pos:start="1523:26" pos:end="1523:26"><expr pos:start="1523:26" pos:end="1523:26"><literal type="number" pos:start="1523:26" pos:end="1523:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1527:17" pos:end="1527:22">break;</break>

	    <case pos:start="1529:13" pos:end="1529:40">case <expr pos:start="1529:18" pos:end="1529:39"><name pos:start="1529:18" pos:end="1529:39">QEMU_OPTION_option_rom</name></expr>:</case>

		<if_stmt pos:start="1531:17" pos:end="1537:17"><if pos:start="1531:17" pos:end="1537:17">if <condition pos:start="1531:20" pos:end="1531:54">(<expr pos:start="1531:21" pos:end="1531:53"><name pos:start="1531:21" pos:end="1531:34">nb_option_roms</name> <operator pos:start="1531:36" pos:end="1531:37">&gt;=</operator> <name pos:start="1531:39" pos:end="1531:53">MAX_OPTION_ROMS</name></expr>)</condition> <block pos:start="1531:56" pos:end="1537:17">{<block_content pos:start="1533:21" pos:end="1535:28">

		    <expr_stmt pos:start="1533:21" pos:end="1533:62"><expr pos:start="1533:21" pos:end="1533:61"><call pos:start="1533:21" pos:end="1533:61"><name pos:start="1533:21" pos:end="1533:27">fprintf</name><argument_list pos:start="1533:28" pos:end="1533:61">(<argument pos:start="1533:29" pos:end="1533:34"><expr pos:start="1533:29" pos:end="1533:34"><name pos:start="1533:29" pos:end="1533:34">stderr</name></expr></argument>, <argument pos:start="1533:37" pos:end="1533:60"><expr pos:start="1533:37" pos:end="1533:60"><literal type="string" pos:start="1533:37" pos:end="1533:60">"Too many option ROMs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="1535:21" pos:end="1535:28"><expr pos:start="1535:21" pos:end="1535:27"><call pos:start="1535:21" pos:end="1535:27"><name pos:start="1535:21" pos:end="1535:24">exit</name><argument_list pos:start="1535:25" pos:end="1535:27">(<argument pos:start="1535:26" pos:end="1535:26"><expr pos:start="1535:26" pos:end="1535:26"><literal type="number" pos:start="1535:26" pos:end="1535:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1539:17" pos:end="1539:80"><expr pos:start="1539:17" pos:end="1539:79"><name pos:start="1539:17" pos:end="1539:20">opts</name> <operator pos:start="1539:22" pos:end="1539:22">=</operator> <call pos:start="1539:24" pos:end="1539:79"><name pos:start="1539:24" pos:end="1539:38">qemu_opts_parse</name><argument_list pos:start="1539:39" pos:end="1539:79">(<argument pos:start="1539:40" pos:end="1539:67"><expr pos:start="1539:40" pos:end="1539:67"><call pos:start="1539:40" pos:end="1539:67"><name pos:start="1539:40" pos:end="1539:53">qemu_find_opts</name><argument_list pos:start="1539:54" pos:end="1539:67">(<argument pos:start="1539:55" pos:end="1539:66"><expr pos:start="1539:55" pos:end="1539:66"><literal type="string" pos:start="1539:55" pos:end="1539:66">"option-rom"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1539:70" pos:end="1539:75"><expr pos:start="1539:70" pos:end="1539:75"><name pos:start="1539:70" pos:end="1539:75">optarg</name></expr></argument>, <argument pos:start="1539:78" pos:end="1539:78"><expr pos:start="1539:78" pos:end="1539:78"><literal type="number" pos:start="1539:78" pos:end="1539:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1541:17" pos:end="1541:80"><expr pos:start="1541:17" pos:end="1541:79"><name pos:start="1541:17" pos:end="1541:42"><name pos:start="1541:17" pos:end="1541:26">option_rom</name><index pos:start="1541:27" pos:end="1541:42">[<expr pos:start="1541:28" pos:end="1541:41"><name pos:start="1541:28" pos:end="1541:41">nb_option_roms</name></expr>]</index></name><operator pos:start="1541:43" pos:end="1541:43">.</operator><name pos:start="1541:44" pos:end="1541:47">name</name> <operator pos:start="1541:49" pos:end="1541:49">=</operator> <call pos:start="1541:51" pos:end="1541:79"><name pos:start="1541:51" pos:end="1541:62">qemu_opt_get</name><argument_list pos:start="1541:63" pos:end="1541:79">(<argument pos:start="1541:64" pos:end="1541:67"><expr pos:start="1541:64" pos:end="1541:67"><name pos:start="1541:64" pos:end="1541:67">opts</name></expr></argument>, <argument pos:start="1541:70" pos:end="1541:78"><expr pos:start="1541:70" pos:end="1541:78"><literal type="string" pos:start="1541:70" pos:end="1541:78">"romfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1543:17" pos:end="1545:63"><expr pos:start="1543:17" pos:end="1545:62"><name pos:start="1543:17" pos:end="1543:42"><name pos:start="1543:17" pos:end="1543:26">option_rom</name><index pos:start="1543:27" pos:end="1543:42">[<expr pos:start="1543:28" pos:end="1543:41"><name pos:start="1543:28" pos:end="1543:41">nb_option_roms</name></expr>]</index></name><operator pos:start="1543:43" pos:end="1543:43">.</operator><name pos:start="1543:44" pos:end="1543:52">bootindex</name> <operator pos:start="1543:54" pos:end="1543:54">=</operator>

                    <call pos:start="1545:21" pos:end="1545:62"><name pos:start="1545:21" pos:end="1545:39">qemu_opt_get_number</name><argument_list pos:start="1545:40" pos:end="1545:62">(<argument pos:start="1545:41" pos:end="1545:44"><expr pos:start="1545:41" pos:end="1545:44"><name pos:start="1545:41" pos:end="1545:44">opts</name></expr></argument>, <argument pos:start="1545:47" pos:end="1545:57"><expr pos:start="1545:47" pos:end="1545:57"><literal type="string" pos:start="1545:47" pos:end="1545:57">"bootindex"</literal></expr></argument>, <argument pos:start="1545:60" pos:end="1545:61"><expr pos:start="1545:60" pos:end="1545:61"><operator pos:start="1545:60" pos:end="1545:60">-</operator><literal type="number" pos:start="1545:61" pos:end="1545:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1547:17" pos:end="1553:17"><if pos:start="1547:17" pos:end="1553:17">if <condition pos:start="1547:20" pos:end="1547:53">(<expr pos:start="1547:21" pos:end="1547:52"><operator pos:start="1547:21" pos:end="1547:21">!</operator><name pos:start="1547:22" pos:end="1547:47"><name pos:start="1547:22" pos:end="1547:31">option_rom</name><index pos:start="1547:32" pos:end="1547:47">[<expr pos:start="1547:33" pos:end="1547:46"><name pos:start="1547:33" pos:end="1547:46">nb_option_roms</name></expr>]</index></name><operator pos:start="1547:48" pos:end="1547:48">.</operator><name pos:start="1547:49" pos:end="1547:52">name</name></expr>)</condition> <block pos:start="1547:55" pos:end="1553:17">{<block_content pos:start="1549:21" pos:end="1551:28">

                    <expr_stmt pos:start="1549:21" pos:end="1549:74"><expr pos:start="1549:21" pos:end="1549:73"><call pos:start="1549:21" pos:end="1549:73"><name pos:start="1549:21" pos:end="1549:27">fprintf</name><argument_list pos:start="1549:28" pos:end="1549:73">(<argument pos:start="1549:29" pos:end="1549:34"><expr pos:start="1549:29" pos:end="1549:34"><name pos:start="1549:29" pos:end="1549:34">stderr</name></expr></argument>, <argument pos:start="1549:37" pos:end="1549:72"><expr pos:start="1549:37" pos:end="1549:72"><literal type="string" pos:start="1549:37" pos:end="1549:72">"Option ROM file is not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1551:21" pos:end="1551:28"><expr pos:start="1551:21" pos:end="1551:27"><call pos:start="1551:21" pos:end="1551:27"><name pos:start="1551:21" pos:end="1551:24">exit</name><argument_list pos:start="1551:25" pos:end="1551:27">(<argument pos:start="1551:26" pos:end="1551:26"><expr pos:start="1551:26" pos:end="1551:26"><literal type="number" pos:start="1551:26" pos:end="1551:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="1555:17" pos:end="1555:33"><expr pos:start="1555:17" pos:end="1555:32"><name pos:start="1555:17" pos:end="1555:30">nb_option_roms</name><operator pos:start="1555:31" pos:end="1555:32">++</operator></expr>;</expr_stmt>

		<break pos:start="1557:17" pos:end="1557:22">break;</break>

            <case pos:start="1559:13" pos:end="1559:41">case <expr pos:start="1559:18" pos:end="1559:40"><name pos:start="1559:18" pos:end="1559:40">QEMU_OPTION_semihosting</name></expr>:</case>

                <expr_stmt pos:start="1561:17" pos:end="1561:40"><expr pos:start="1561:17" pos:end="1561:39"><name pos:start="1561:17" pos:end="1561:35">semihosting_enabled</name> <operator pos:start="1561:37" pos:end="1561:37">=</operator> <literal type="number" pos:start="1561:39" pos:end="1561:39">1</literal></expr>;</expr_stmt>

                <break pos:start="1563:17" pos:end="1563:22">break;</break>

            <case pos:start="1565:13" pos:end="1565:34">case <expr pos:start="1565:18" pos:end="1565:33"><name pos:start="1565:18" pos:end="1565:33">QEMU_OPTION_name</name></expr>:</case>

                <expr_stmt pos:start="1567:17" pos:end="1567:45"><expr pos:start="1567:17" pos:end="1567:44"><name pos:start="1567:17" pos:end="1567:25">qemu_name</name> <operator pos:start="1567:27" pos:end="1567:27">=</operator> <call pos:start="1567:29" pos:end="1567:44"><name pos:start="1567:29" pos:end="1567:36">g_strdup</name><argument_list pos:start="1567:37" pos:end="1567:44">(<argument pos:start="1567:38" pos:end="1567:43"><expr pos:start="1567:38" pos:end="1567:43"><name pos:start="1567:38" pos:end="1567:43">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		 <block pos:start="1569:18" pos:end="1591:18">{<block_content pos:start="1571:22" pos:end="1589:22">

		     <decl_stmt pos:start="1571:22" pos:end="1571:54"><decl pos:start="1571:22" pos:end="1571:53"><type pos:start="1571:22" pos:end="1571:27"><name pos:start="1571:22" pos:end="1571:25">char</name> <modifier pos:start="1571:27" pos:end="1571:27">*</modifier></type><name pos:start="1571:28" pos:end="1571:28">p</name> <init pos:start="1571:30" pos:end="1571:53">= <expr pos:start="1571:32" pos:end="1571:53"><call pos:start="1571:32" pos:end="1571:53"><name pos:start="1571:32" pos:end="1571:37">strchr</name><argument_list pos:start="1571:38" pos:end="1571:53">(<argument pos:start="1571:39" pos:end="1571:47"><expr pos:start="1571:39" pos:end="1571:47"><name pos:start="1571:39" pos:end="1571:47">qemu_name</name></expr></argument>, <argument pos:start="1571:50" pos:end="1571:52"><expr pos:start="1571:50" pos:end="1571:52"><literal type="char" pos:start="1571:50" pos:end="1571:52">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		     <if_stmt pos:start="1573:22" pos:end="1589:22"><if pos:start="1573:22" pos:end="1589:22">if <condition pos:start="1573:25" pos:end="1573:35">(<expr pos:start="1573:26" pos:end="1573:34"><name pos:start="1573:26" pos:end="1573:26">p</name> <operator pos:start="1573:28" pos:end="1573:29">!=</operator> <name pos:start="1573:31" pos:end="1573:34">NULL</name></expr>)</condition> <block pos:start="1573:37" pos:end="1589:22">{<block_content pos:start="1575:25" pos:end="1587:44">

		        <expr_stmt pos:start="1575:25" pos:end="1575:33"><expr pos:start="1575:25" pos:end="1575:32"><operator pos:start="1575:25" pos:end="1575:25">*</operator><name pos:start="1575:26" pos:end="1575:26">p</name><operator pos:start="1575:27" pos:end="1575:28">++</operator> <operator pos:start="1575:30" pos:end="1575:30">=</operator> <literal type="number" pos:start="1575:32" pos:end="1575:32">0</literal></expr>;</expr_stmt>

			<if_stmt pos:start="1577:25" pos:end="1583:25"><if pos:start="1577:25" pos:end="1583:25">if <condition pos:start="1577:28" pos:end="1577:54">(<expr pos:start="1577:29" pos:end="1577:53"><call pos:start="1577:29" pos:end="1577:53"><name pos:start="1577:29" pos:end="1577:35">strncmp</name><argument_list pos:start="1577:36" pos:end="1577:53">(<argument pos:start="1577:37" pos:end="1577:37"><expr pos:start="1577:37" pos:end="1577:37"><name pos:start="1577:37" pos:end="1577:37">p</name></expr></argument>, <argument pos:start="1577:40" pos:end="1577:49"><expr pos:start="1577:40" pos:end="1577:49"><literal type="string" pos:start="1577:40" pos:end="1577:49">"process="</literal></expr></argument>, <argument pos:start="1577:52" pos:end="1577:52"><expr pos:start="1577:52" pos:end="1577:52"><literal type="number" pos:start="1577:52" pos:end="1577:52">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1577:56" pos:end="1583:25">{<block_content pos:start="1579:29" pos:end="1581:36">

			    <expr_stmt pos:start="1579:29" pos:end="1579:84"><expr pos:start="1579:29" pos:end="1579:83"><call pos:start="1579:29" pos:end="1579:83"><name pos:start="1579:29" pos:end="1579:35">fprintf</name><argument_list pos:start="1579:36" pos:end="1579:83">(<argument pos:start="1579:37" pos:end="1579:42"><expr pos:start="1579:37" pos:end="1579:42"><name pos:start="1579:37" pos:end="1579:42">stderr</name></expr></argument>, <argument pos:start="1579:45" pos:end="1579:79"><expr pos:start="1579:45" pos:end="1579:79"><literal type="string" pos:start="1579:45" pos:end="1579:79">"Unknown subargument %s to -name\n"</literal></expr></argument>, <argument pos:start="1579:82" pos:end="1579:82"><expr pos:start="1579:82" pos:end="1579:82"><name pos:start="1579:82" pos:end="1579:82">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <expr_stmt pos:start="1581:29" pos:end="1581:36"><expr pos:start="1581:29" pos:end="1581:35"><call pos:start="1581:29" pos:end="1581:35"><name pos:start="1581:29" pos:end="1581:32">exit</name><argument_list pos:start="1581:33" pos:end="1581:35">(<argument pos:start="1581:34" pos:end="1581:34"><expr pos:start="1581:34" pos:end="1581:34"><literal type="number" pos:start="1581:34" pos:end="1581:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>

			<expr_stmt pos:start="1585:25" pos:end="1585:31"><expr pos:start="1585:25" pos:end="1585:30"><name pos:start="1585:25" pos:end="1585:25">p</name> <operator pos:start="1585:27" pos:end="1585:28">+=</operator> <literal type="number" pos:start="1585:30" pos:end="1585:30">8</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="1587:25" pos:end="1587:44"><expr pos:start="1587:25" pos:end="1587:43"><call pos:start="1587:25" pos:end="1587:43"><name pos:start="1587:25" pos:end="1587:40">os_set_proc_name</name><argument_list pos:start="1587:41" pos:end="1587:43">(<argument pos:start="1587:42" pos:end="1587:42"><expr pos:start="1587:42" pos:end="1587:42"><name pos:start="1587:42" pos:end="1587:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		     </block_content>}</block></if></if_stmt>	

		 </block_content>}</block>	

                <break pos:start="1593:17" pos:end="1593:22">break;</break>

            <case pos:start="1595:13" pos:end="1595:38">case <expr pos:start="1595:18" pos:end="1595:37"><name pos:start="1595:18" pos:end="1595:37">QEMU_OPTION_prom_env</name></expr>:</case>

                <if_stmt pos:start="1597:17" pos:end="1603:17"><if pos:start="1597:17" pos:end="1603:17">if <condition pos:start="1597:20" pos:end="1597:50">(<expr pos:start="1597:21" pos:end="1597:49"><name pos:start="1597:21" pos:end="1597:32">nb_prom_envs</name> <operator pos:start="1597:34" pos:end="1597:35">&gt;=</operator> <name pos:start="1597:37" pos:end="1597:49">MAX_PROM_ENVS</name></expr>)</condition> <block pos:start="1597:52" pos:end="1603:17">{<block_content pos:start="1599:21" pos:end="1601:28">

                    <expr_stmt pos:start="1599:21" pos:end="1599:65"><expr pos:start="1599:21" pos:end="1599:64"><call pos:start="1599:21" pos:end="1599:64"><name pos:start="1599:21" pos:end="1599:27">fprintf</name><argument_list pos:start="1599:28" pos:end="1599:64">(<argument pos:start="1599:29" pos:end="1599:34"><expr pos:start="1599:29" pos:end="1599:34"><name pos:start="1599:29" pos:end="1599:34">stderr</name></expr></argument>, <argument pos:start="1599:37" pos:end="1599:63"><expr pos:start="1599:37" pos:end="1599:63"><literal type="string" pos:start="1599:37" pos:end="1599:63">"Too many prom variables\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1601:21" pos:end="1601:28"><expr pos:start="1601:21" pos:end="1601:27"><call pos:start="1601:21" pos:end="1601:27"><name pos:start="1601:21" pos:end="1601:24">exit</name><argument_list pos:start="1601:25" pos:end="1601:27">(<argument pos:start="1601:26" pos:end="1601:26"><expr pos:start="1601:26" pos:end="1601:26"><literal type="number" pos:start="1601:26" pos:end="1601:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1605:17" pos:end="1605:49"><expr pos:start="1605:17" pos:end="1605:48"><name pos:start="1605:17" pos:end="1605:39"><name pos:start="1605:17" pos:end="1605:25">prom_envs</name><index pos:start="1605:26" pos:end="1605:39">[<expr pos:start="1605:27" pos:end="1605:38"><name pos:start="1605:27" pos:end="1605:38">nb_prom_envs</name></expr>]</index></name> <operator pos:start="1605:41" pos:end="1605:41">=</operator> <name pos:start="1605:43" pos:end="1605:48">optarg</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1607:17" pos:end="1607:31"><expr pos:start="1607:17" pos:end="1607:30"><name pos:start="1607:17" pos:end="1607:28">nb_prom_envs</name><operator pos:start="1607:29" pos:end="1607:30">++</operator></expr>;</expr_stmt>

                <break pos:start="1609:17" pos:end="1609:22">break;</break>

            <case pos:start="1611:13" pos:end="1611:39">case <expr pos:start="1611:18" pos:end="1611:38"><name pos:start="1611:18" pos:end="1611:38">QEMU_OPTION_old_param</name></expr>:</case>

                <expr_stmt pos:start="1613:17" pos:end="1613:30"><expr pos:start="1613:17" pos:end="1613:29"><name pos:start="1613:17" pos:end="1613:25">old_param</name> <operator pos:start="1613:27" pos:end="1613:27">=</operator> <literal type="number" pos:start="1613:29" pos:end="1613:29">1</literal></expr>;</expr_stmt>

                <break pos:start="1615:17" pos:end="1615:22">break;</break>

            <case pos:start="1617:13" pos:end="1617:35">case <expr pos:start="1617:18" pos:end="1617:34"><name pos:start="1617:18" pos:end="1617:34">QEMU_OPTION_clock</name></expr>:</case>

                <expr_stmt pos:start="1619:17" pos:end="1619:41"><expr pos:start="1619:17" pos:end="1619:40"><call pos:start="1619:17" pos:end="1619:40"><name pos:start="1619:17" pos:end="1619:32">configure_alarms</name><argument_list pos:start="1619:33" pos:end="1619:40">(<argument pos:start="1619:34" pos:end="1619:39"><expr pos:start="1619:34" pos:end="1619:39"><name pos:start="1619:34" pos:end="1619:39">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1621:17" pos:end="1621:22">break;</break>

            <case pos:start="1623:13" pos:end="1623:39">case <expr pos:start="1623:18" pos:end="1623:38"><name pos:start="1623:18" pos:end="1623:38">QEMU_OPTION_startdate</name></expr>:</case>

                <expr_stmt pos:start="1625:17" pos:end="1625:53"><expr pos:start="1625:17" pos:end="1625:52"><call pos:start="1625:17" pos:end="1625:52"><name pos:start="1625:17" pos:end="1625:41">configure_rtc_date_offset</name><argument_list pos:start="1625:42" pos:end="1625:52">(<argument pos:start="1625:43" pos:end="1625:48"><expr pos:start="1625:43" pos:end="1625:48"><name pos:start="1625:43" pos:end="1625:48">optarg</name></expr></argument>, <argument pos:start="1625:51" pos:end="1625:51"><expr pos:start="1625:51" pos:end="1625:51"><literal type="number" pos:start="1625:51" pos:end="1625:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1627:17" pos:end="1627:22">break;</break>

            <case pos:start="1629:13" pos:end="1629:33">case <expr pos:start="1629:18" pos:end="1629:32"><name pos:start="1629:18" pos:end="1629:32">QEMU_OPTION_rtc</name></expr>:</case>

                <expr_stmt pos:start="1631:17" pos:end="1631:73"><expr pos:start="1631:17" pos:end="1631:72"><name pos:start="1631:17" pos:end="1631:20">opts</name> <operator pos:start="1631:22" pos:end="1631:22">=</operator> <call pos:start="1631:24" pos:end="1631:72"><name pos:start="1631:24" pos:end="1631:38">qemu_opts_parse</name><argument_list pos:start="1631:39" pos:end="1631:72">(<argument pos:start="1631:40" pos:end="1631:60"><expr pos:start="1631:40" pos:end="1631:60"><call pos:start="1631:40" pos:end="1631:60"><name pos:start="1631:40" pos:end="1631:53">qemu_find_opts</name><argument_list pos:start="1631:54" pos:end="1631:60">(<argument pos:start="1631:55" pos:end="1631:59"><expr pos:start="1631:55" pos:end="1631:59"><literal type="string" pos:start="1631:55" pos:end="1631:59">"rtc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1631:63" pos:end="1631:68"><expr pos:start="1631:63" pos:end="1631:68"><name pos:start="1631:63" pos:end="1631:68">optarg</name></expr></argument>, <argument pos:start="1631:71" pos:end="1631:71"><expr pos:start="1631:71" pos:end="1631:71"><literal type="number" pos:start="1631:71" pos:end="1631:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1633:17" pos:end="1637:17"><if pos:start="1633:17" pos:end="1637:17">if <condition pos:start="1633:20" pos:end="1633:26">(<expr pos:start="1633:21" pos:end="1633:25"><operator pos:start="1633:21" pos:end="1633:21">!</operator><name pos:start="1633:22" pos:end="1633:25">opts</name></expr>)</condition> <block pos:start="1633:28" pos:end="1637:17">{<block_content pos:start="1635:21" pos:end="1635:28">

                    <expr_stmt pos:start="1635:21" pos:end="1635:28"><expr pos:start="1635:21" pos:end="1635:27"><call pos:start="1635:21" pos:end="1635:27"><name pos:start="1635:21" pos:end="1635:24">exit</name><argument_list pos:start="1635:25" pos:end="1635:27">(<argument pos:start="1635:26" pos:end="1635:26"><expr pos:start="1635:26" pos:end="1635:26"><literal type="number" pos:start="1635:26" pos:end="1635:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1639:17" pos:end="1639:36"><expr pos:start="1639:17" pos:end="1639:35"><call pos:start="1639:17" pos:end="1639:35"><name pos:start="1639:17" pos:end="1639:29">configure_rtc</name><argument_list pos:start="1639:30" pos:end="1639:35">(<argument pos:start="1639:31" pos:end="1639:34"><expr pos:start="1639:31" pos:end="1639:34"><name pos:start="1639:31" pos:end="1639:34">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1641:17" pos:end="1641:22">break;</break>

            <case pos:start="1643:13" pos:end="1643:37">case <expr pos:start="1643:18" pos:end="1643:36"><name pos:start="1643:18" pos:end="1643:36">QEMU_OPTION_tb_size</name></expr>:</case>

                <expr_stmt pos:start="1645:17" pos:end="1645:54"><expr pos:start="1645:17" pos:end="1645:53"><name pos:start="1645:17" pos:end="1645:27">tcg_tb_size</name> <operator pos:start="1645:29" pos:end="1645:29">=</operator> <call pos:start="1645:31" pos:end="1645:53"><name pos:start="1645:31" pos:end="1645:36">strtol</name><argument_list pos:start="1645:37" pos:end="1645:53">(<argument pos:start="1645:38" pos:end="1645:43"><expr pos:start="1645:38" pos:end="1645:43"><name pos:start="1645:38" pos:end="1645:43">optarg</name></expr></argument>, <argument pos:start="1645:46" pos:end="1645:49"><expr pos:start="1645:46" pos:end="1645:49"><name pos:start="1645:46" pos:end="1645:49">NULL</name></expr></argument>, <argument pos:start="1645:52" pos:end="1645:52"><expr pos:start="1645:52" pos:end="1645:52"><literal type="number" pos:start="1645:52" pos:end="1645:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1647:17" pos:end="1651:17"><if pos:start="1647:17" pos:end="1651:17">if <condition pos:start="1647:20" pos:end="1647:36">(<expr pos:start="1647:21" pos:end="1647:35"><name pos:start="1647:21" pos:end="1647:31">tcg_tb_size</name> <operator pos:start="1647:33" pos:end="1647:33">&lt;</operator> <literal type="number" pos:start="1647:35" pos:end="1647:35">0</literal></expr>)</condition> <block pos:start="1647:38" pos:end="1651:17">{<block_content pos:start="1649:21" pos:end="1649:36">

                    <expr_stmt pos:start="1649:21" pos:end="1649:36"><expr pos:start="1649:21" pos:end="1649:35"><name pos:start="1649:21" pos:end="1649:31">tcg_tb_size</name> <operator pos:start="1649:33" pos:end="1649:33">=</operator> <literal type="number" pos:start="1649:35" pos:end="1649:35">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1653:17" pos:end="1653:22">break;</break>

            <case pos:start="1655:13" pos:end="1655:36">case <expr pos:start="1655:18" pos:end="1655:35"><name pos:start="1655:18" pos:end="1655:35">QEMU_OPTION_icount</name></expr>:</case>

                <expr_stmt pos:start="1657:17" pos:end="1657:39"><expr pos:start="1657:17" pos:end="1657:38"><name pos:start="1657:17" pos:end="1657:29">icount_option</name> <operator pos:start="1657:31" pos:end="1657:31">=</operator> <name pos:start="1657:33" pos:end="1657:38">optarg</name></expr>;</expr_stmt>

                <break pos:start="1659:17" pos:end="1659:22">break;</break>

            <case pos:start="1661:13" pos:end="1661:38">case <expr pos:start="1661:18" pos:end="1661:37"><name pos:start="1661:18" pos:end="1661:37">QEMU_OPTION_incoming</name></expr>:</case>

                <expr_stmt pos:start="1663:17" pos:end="1663:34"><expr pos:start="1663:17" pos:end="1663:33"><name pos:start="1663:17" pos:end="1663:24">incoming</name> <operator pos:start="1663:26" pos:end="1663:26">=</operator> <name pos:start="1663:28" pos:end="1663:33">optarg</name></expr>;</expr_stmt>

                <break pos:start="1665:17" pos:end="1665:22">break;</break>

            <case pos:start="1667:13" pos:end="1667:40">case <expr pos:start="1667:18" pos:end="1667:39"><name pos:start="1667:18" pos:end="1667:39">QEMU_OPTION_nodefaults</name></expr>:</case>

                <expr_stmt pos:start="1669:17" pos:end="1669:35"><expr pos:start="1669:17" pos:end="1669:34"><name pos:start="1669:17" pos:end="1669:30">default_serial</name> <operator pos:start="1669:32" pos:end="1669:32">=</operator> <literal type="number" pos:start="1669:34" pos:end="1669:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1671:17" pos:end="1671:37"><expr pos:start="1671:17" pos:end="1671:36"><name pos:start="1671:17" pos:end="1671:32">default_parallel</name> <operator pos:start="1671:34" pos:end="1671:34">=</operator> <literal type="number" pos:start="1671:36" pos:end="1671:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1673:17" pos:end="1673:36"><expr pos:start="1673:17" pos:end="1673:35"><name pos:start="1673:17" pos:end="1673:31">default_virtcon</name> <operator pos:start="1673:33" pos:end="1673:33">=</operator> <literal type="number" pos:start="1673:35" pos:end="1673:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1675:17" pos:end="1675:36"><expr pos:start="1675:17" pos:end="1675:35"><name pos:start="1675:17" pos:end="1675:31">default_monitor</name> <operator pos:start="1675:33" pos:end="1675:33">=</operator> <literal type="number" pos:start="1675:35" pos:end="1675:35">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1677:17" pos:end="1677:32"><expr pos:start="1677:17" pos:end="1677:31"><name pos:start="1677:17" pos:end="1677:27">default_vga</name> <operator pos:start="1677:29" pos:end="1677:29">=</operator> <literal type="number" pos:start="1677:31" pos:end="1677:31">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1679:17" pos:end="1679:32"><expr pos:start="1679:17" pos:end="1679:31"><name pos:start="1679:17" pos:end="1679:27">default_net</name> <operator pos:start="1679:29" pos:end="1679:29">=</operator> <literal type="number" pos:start="1679:31" pos:end="1679:31">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1681:17" pos:end="1681:35"><expr pos:start="1681:17" pos:end="1681:34"><name pos:start="1681:17" pos:end="1681:30">default_floppy</name> <operator pos:start="1681:32" pos:end="1681:32">=</operator> <literal type="number" pos:start="1681:34" pos:end="1681:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1683:17" pos:end="1683:34"><expr pos:start="1683:17" pos:end="1683:33"><name pos:start="1683:17" pos:end="1683:29">default_cdrom</name> <operator pos:start="1683:31" pos:end="1683:31">=</operator> <literal type="number" pos:start="1683:33" pos:end="1683:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1685:17" pos:end="1685:35"><expr pos:start="1685:17" pos:end="1685:34"><name pos:start="1685:17" pos:end="1685:30">default_sdcard</name> <operator pos:start="1685:32" pos:end="1685:32">=</operator> <literal type="number" pos:start="1685:34" pos:end="1685:34">0</literal></expr>;</expr_stmt>

                <break pos:start="1687:17" pos:end="1687:22">break;</break>

            <case pos:start="1689:13" pos:end="1689:39">case <expr pos:start="1689:18" pos:end="1689:38"><name pos:start="1689:18" pos:end="1689:38">QEMU_OPTION_xen_domid</name></expr>:</case>

                <if_stmt pos:start="1691:17" pos:end="1697:17"><if pos:start="1691:17" pos:end="1697:17">if <condition pos:start="1691:20" pos:end="1691:39">(<expr pos:start="1691:21" pos:end="1691:38"><operator pos:start="1691:21" pos:end="1691:21">!</operator><operator pos:start="1691:22" pos:end="1691:22">(</operator><call pos:start="1691:23" pos:end="1691:37"><name pos:start="1691:23" pos:end="1691:35">xen_available</name><argument_list pos:start="1691:36" pos:end="1691:37">()</argument_list></call><operator pos:start="1691:38" pos:end="1691:38">)</operator></expr>)</condition> <block pos:start="1691:41" pos:end="1697:17">{<block_content pos:start="1693:21" pos:end="1695:28">

                    <expr_stmt pos:start="1693:21" pos:end="1693:84"><expr pos:start="1693:21" pos:end="1693:83"><call pos:start="1693:21" pos:end="1693:83"><name pos:start="1693:21" pos:end="1693:26">printf</name><argument_list pos:start="1693:27" pos:end="1693:83">(<argument pos:start="1693:28" pos:end="1693:70"><expr pos:start="1693:28" pos:end="1693:70"><literal type="string" pos:start="1693:28" pos:end="1693:70">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="1693:73" pos:end="1693:82"><expr pos:start="1693:73" pos:end="1693:82"><name pos:start="1693:73" pos:end="1693:82"><name pos:start="1693:73" pos:end="1693:76">popt</name><operator pos:start="1693:77" pos:end="1693:78">-&gt;</operator><name pos:start="1693:79" pos:end="1693:82">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1695:21" pos:end="1695:28"><expr pos:start="1695:21" pos:end="1695:27"><call pos:start="1695:21" pos:end="1695:27"><name pos:start="1695:21" pos:end="1695:24">exit</name><argument_list pos:start="1695:25" pos:end="1695:27">(<argument pos:start="1695:26" pos:end="1695:26"><expr pos:start="1695:26" pos:end="1695:26"><literal type="number" pos:start="1695:26" pos:end="1695:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1699:17" pos:end="1699:41"><expr pos:start="1699:17" pos:end="1699:40"><name pos:start="1699:17" pos:end="1699:25">xen_domid</name> <operator pos:start="1699:27" pos:end="1699:27">=</operator> <call pos:start="1699:29" pos:end="1699:40"><name pos:start="1699:29" pos:end="1699:32">atoi</name><argument_list pos:start="1699:33" pos:end="1699:40">(<argument pos:start="1699:34" pos:end="1699:39"><expr pos:start="1699:34" pos:end="1699:39"><name pos:start="1699:34" pos:end="1699:39">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1701:17" pos:end="1701:22">break;</break>

            <case pos:start="1703:13" pos:end="1703:40">case <expr pos:start="1703:18" pos:end="1703:39"><name pos:start="1703:18" pos:end="1703:39">QEMU_OPTION_xen_create</name></expr>:</case>

                <if_stmt pos:start="1705:17" pos:end="1711:17"><if pos:start="1705:17" pos:end="1711:17">if <condition pos:start="1705:20" pos:end="1705:39">(<expr pos:start="1705:21" pos:end="1705:38"><operator pos:start="1705:21" pos:end="1705:21">!</operator><operator pos:start="1705:22" pos:end="1705:22">(</operator><call pos:start="1705:23" pos:end="1705:37"><name pos:start="1705:23" pos:end="1705:35">xen_available</name><argument_list pos:start="1705:36" pos:end="1705:37">()</argument_list></call><operator pos:start="1705:38" pos:end="1705:38">)</operator></expr>)</condition> <block pos:start="1705:41" pos:end="1711:17">{<block_content pos:start="1707:21" pos:end="1709:28">

                    <expr_stmt pos:start="1707:21" pos:end="1707:84"><expr pos:start="1707:21" pos:end="1707:83"><call pos:start="1707:21" pos:end="1707:83"><name pos:start="1707:21" pos:end="1707:26">printf</name><argument_list pos:start="1707:27" pos:end="1707:83">(<argument pos:start="1707:28" pos:end="1707:70"><expr pos:start="1707:28" pos:end="1707:70"><literal type="string" pos:start="1707:28" pos:end="1707:70">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="1707:73" pos:end="1707:82"><expr pos:start="1707:73" pos:end="1707:82"><name pos:start="1707:73" pos:end="1707:82"><name pos:start="1707:73" pos:end="1707:76">popt</name><operator pos:start="1707:77" pos:end="1707:78">-&gt;</operator><name pos:start="1707:79" pos:end="1707:82">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1709:21" pos:end="1709:28"><expr pos:start="1709:21" pos:end="1709:27"><call pos:start="1709:21" pos:end="1709:27"><name pos:start="1709:21" pos:end="1709:24">exit</name><argument_list pos:start="1709:25" pos:end="1709:27">(<argument pos:start="1709:26" pos:end="1709:26"><expr pos:start="1709:26" pos:end="1709:26"><literal type="number" pos:start="1709:26" pos:end="1709:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1713:17" pos:end="1713:38"><expr pos:start="1713:17" pos:end="1713:37"><name pos:start="1713:17" pos:end="1713:24">xen_mode</name> <operator pos:start="1713:26" pos:end="1713:26">=</operator> <name pos:start="1713:28" pos:end="1713:37">XEN_CREATE</name></expr>;</expr_stmt>

                <break pos:start="1715:17" pos:end="1715:22">break;</break>

            <case pos:start="1717:13" pos:end="1717:40">case <expr pos:start="1717:18" pos:end="1717:39"><name pos:start="1717:18" pos:end="1717:39">QEMU_OPTION_xen_attach</name></expr>:</case>

                <if_stmt pos:start="1719:17" pos:end="1725:17"><if pos:start="1719:17" pos:end="1725:17">if <condition pos:start="1719:20" pos:end="1719:39">(<expr pos:start="1719:21" pos:end="1719:38"><operator pos:start="1719:21" pos:end="1719:21">!</operator><operator pos:start="1719:22" pos:end="1719:22">(</operator><call pos:start="1719:23" pos:end="1719:37"><name pos:start="1719:23" pos:end="1719:35">xen_available</name><argument_list pos:start="1719:36" pos:end="1719:37">()</argument_list></call><operator pos:start="1719:38" pos:end="1719:38">)</operator></expr>)</condition> <block pos:start="1719:41" pos:end="1725:17">{<block_content pos:start="1721:21" pos:end="1723:28">

                    <expr_stmt pos:start="1721:21" pos:end="1721:84"><expr pos:start="1721:21" pos:end="1721:83"><call pos:start="1721:21" pos:end="1721:83"><name pos:start="1721:21" pos:end="1721:26">printf</name><argument_list pos:start="1721:27" pos:end="1721:83">(<argument pos:start="1721:28" pos:end="1721:70"><expr pos:start="1721:28" pos:end="1721:70"><literal type="string" pos:start="1721:28" pos:end="1721:70">"Option %s not supported for this target\n"</literal></expr></argument>, <argument pos:start="1721:73" pos:end="1721:82"><expr pos:start="1721:73" pos:end="1721:82"><name pos:start="1721:73" pos:end="1721:82"><name pos:start="1721:73" pos:end="1721:76">popt</name><operator pos:start="1721:77" pos:end="1721:78">-&gt;</operator><name pos:start="1721:79" pos:end="1721:82">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1723:21" pos:end="1723:28"><expr pos:start="1723:21" pos:end="1723:27"><call pos:start="1723:21" pos:end="1723:27"><name pos:start="1723:21" pos:end="1723:24">exit</name><argument_list pos:start="1723:25" pos:end="1723:27">(<argument pos:start="1723:26" pos:end="1723:26"><expr pos:start="1723:26" pos:end="1723:26"><literal type="number" pos:start="1723:26" pos:end="1723:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1727:17" pos:end="1727:38"><expr pos:start="1727:17" pos:end="1727:37"><name pos:start="1727:17" pos:end="1727:24">xen_mode</name> <operator pos:start="1727:26" pos:end="1727:26">=</operator> <name pos:start="1727:28" pos:end="1727:37">XEN_ATTACH</name></expr>;</expr_stmt>

                <break pos:start="1729:17" pos:end="1729:22">break;</break>

            <case pos:start="1731:13" pos:end="1731:35">case <expr pos:start="1731:18" pos:end="1731:34"><name pos:start="1731:18" pos:end="1731:34">QEMU_OPTION_trace</name></expr>:</case>

            <block pos:start="1733:13" pos:end="1749:13">{<block_content pos:start="1735:17" pos:end="1747:22">

                <expr_stmt pos:start="1735:17" pos:end="1735:75"><expr pos:start="1735:17" pos:end="1735:74"><name pos:start="1735:17" pos:end="1735:20">opts</name> <operator pos:start="1735:22" pos:end="1735:22">=</operator> <call pos:start="1735:24" pos:end="1735:74"><name pos:start="1735:24" pos:end="1735:38">qemu_opts_parse</name><argument_list pos:start="1735:39" pos:end="1735:74">(<argument pos:start="1735:40" pos:end="1735:62"><expr pos:start="1735:40" pos:end="1735:62"><call pos:start="1735:40" pos:end="1735:62"><name pos:start="1735:40" pos:end="1735:53">qemu_find_opts</name><argument_list pos:start="1735:54" pos:end="1735:62">(<argument pos:start="1735:55" pos:end="1735:61"><expr pos:start="1735:55" pos:end="1735:61"><literal type="string" pos:start="1735:55" pos:end="1735:61">"trace"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1735:65" pos:end="1735:70"><expr pos:start="1735:65" pos:end="1735:70"><name pos:start="1735:65" pos:end="1735:70">optarg</name></expr></argument>, <argument pos:start="1735:73" pos:end="1735:73"><expr pos:start="1735:73" pos:end="1735:73"><literal type="number" pos:start="1735:73" pos:end="1735:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1737:17" pos:end="1741:17"><if pos:start="1737:17" pos:end="1741:17">if <condition pos:start="1737:20" pos:end="1737:26">(<expr pos:start="1737:21" pos:end="1737:25"><operator pos:start="1737:21" pos:end="1737:21">!</operator><name pos:start="1737:22" pos:end="1737:25">opts</name></expr>)</condition> <block pos:start="1737:28" pos:end="1741:17">{<block_content pos:start="1739:21" pos:end="1739:28">

                    <expr_stmt pos:start="1739:21" pos:end="1739:28"><expr pos:start="1739:21" pos:end="1739:27"><call pos:start="1739:21" pos:end="1739:27"><name pos:start="1739:21" pos:end="1739:24">exit</name><argument_list pos:start="1739:25" pos:end="1739:27">(<argument pos:start="1739:26" pos:end="1739:26"><expr pos:start="1739:26" pos:end="1739:26"><literal type="number" pos:start="1739:26" pos:end="1739:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1743:17" pos:end="1743:60"><expr pos:start="1743:17" pos:end="1743:59"><name pos:start="1743:17" pos:end="1743:28">trace_events</name> <operator pos:start="1743:30" pos:end="1743:30">=</operator> <call pos:start="1743:32" pos:end="1743:59"><name pos:start="1743:32" pos:end="1743:43">qemu_opt_get</name><argument_list pos:start="1743:44" pos:end="1743:59">(<argument pos:start="1743:45" pos:end="1743:48"><expr pos:start="1743:45" pos:end="1743:48"><name pos:start="1743:45" pos:end="1743:48">opts</name></expr></argument>, <argument pos:start="1743:51" pos:end="1743:58"><expr pos:start="1743:51" pos:end="1743:58"><literal type="string" pos:start="1743:51" pos:end="1743:58">"events"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1745:17" pos:end="1745:56"><expr pos:start="1745:17" pos:end="1745:55"><name pos:start="1745:17" pos:end="1745:26">trace_file</name> <operator pos:start="1745:28" pos:end="1745:28">=</operator> <call pos:start="1745:30" pos:end="1745:55"><name pos:start="1745:30" pos:end="1745:41">qemu_opt_get</name><argument_list pos:start="1745:42" pos:end="1745:55">(<argument pos:start="1745:43" pos:end="1745:46"><expr pos:start="1745:43" pos:end="1745:46"><name pos:start="1745:43" pos:end="1745:46">opts</name></expr></argument>, <argument pos:start="1745:49" pos:end="1745:54"><expr pos:start="1745:49" pos:end="1745:54"><literal type="string" pos:start="1745:49" pos:end="1745:54">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1747:17" pos:end="1747:22">break;</break>

            </block_content>}</block>

            <case pos:start="1751:13" pos:end="1751:40">case <expr pos:start="1751:18" pos:end="1751:39"><name pos:start="1751:18" pos:end="1751:39">QEMU_OPTION_readconfig</name></expr>:</case>

                <block pos:start="1753:17" pos:end="1769:17">{<block_content pos:start="1755:21" pos:end="1767:26">

                    <decl_stmt pos:start="1755:21" pos:end="1755:60"><decl pos:start="1755:21" pos:end="1755:59"><type pos:start="1755:21" pos:end="1755:23"><name pos:start="1755:21" pos:end="1755:23">int</name></type> <name pos:start="1755:25" pos:end="1755:27">ret</name> <init pos:start="1755:29" pos:end="1755:59">= <expr pos:start="1755:31" pos:end="1755:59"><call pos:start="1755:31" pos:end="1755:59"><name pos:start="1755:31" pos:end="1755:51">qemu_read_config_file</name><argument_list pos:start="1755:52" pos:end="1755:59">(<argument pos:start="1755:53" pos:end="1755:58"><expr pos:start="1755:53" pos:end="1755:58"><name pos:start="1755:53" pos:end="1755:58">optarg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="1757:21" pos:end="1765:21"><if pos:start="1757:21" pos:end="1765:21">if <condition pos:start="1757:24" pos:end="1757:32">(<expr pos:start="1757:25" pos:end="1757:31"><name pos:start="1757:25" pos:end="1757:27">ret</name> <operator pos:start="1757:29" pos:end="1757:29">&lt;</operator> <literal type="number" pos:start="1757:31" pos:end="1757:31">0</literal></expr>)</condition> <block pos:start="1757:34" pos:end="1765:21">{<block_content pos:start="1759:25" pos:end="1763:32">

                        <expr_stmt pos:start="1759:25" pos:end="1761:44"><expr pos:start="1759:25" pos:end="1761:43"><call pos:start="1759:25" pos:end="1761:43"><name pos:start="1759:25" pos:end="1759:31">fprintf</name><argument_list pos:start="1759:32" pos:end="1761:43">(<argument pos:start="1759:33" pos:end="1759:38"><expr pos:start="1759:33" pos:end="1759:38"><name pos:start="1759:33" pos:end="1759:38">stderr</name></expr></argument>, <argument pos:start="1759:41" pos:end="1759:62"><expr pos:start="1759:41" pos:end="1759:62"><literal type="string" pos:start="1759:41" pos:end="1759:62">"read config %s: %s\n"</literal></expr></argument>, <argument pos:start="1759:65" pos:end="1759:70"><expr pos:start="1759:65" pos:end="1759:70"><name pos:start="1759:65" pos:end="1759:70">optarg</name></expr></argument>,

                            <argument pos:start="1761:29" pos:end="1761:42"><expr pos:start="1761:29" pos:end="1761:42"><call pos:start="1761:29" pos:end="1761:42"><name pos:start="1761:29" pos:end="1761:36">strerror</name><argument_list pos:start="1761:37" pos:end="1761:42">(<argument pos:start="1761:38" pos:end="1761:41"><expr pos:start="1761:38" pos:end="1761:41"><operator pos:start="1761:38" pos:end="1761:38">-</operator><name pos:start="1761:39" pos:end="1761:41">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1763:25" pos:end="1763:32"><expr pos:start="1763:25" pos:end="1763:31"><call pos:start="1763:25" pos:end="1763:31"><name pos:start="1763:25" pos:end="1763:28">exit</name><argument_list pos:start="1763:29" pos:end="1763:31">(<argument pos:start="1763:30" pos:end="1763:30"><expr pos:start="1763:30" pos:end="1763:30"><literal type="number" pos:start="1763:30" pos:end="1763:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="1767:21" pos:end="1767:26">break;</break>

                </block_content>}</block>

            <case pos:start="1771:13" pos:end="1771:35">case <expr pos:start="1771:18" pos:end="1771:34"><name pos:start="1771:18" pos:end="1771:34">QEMU_OPTION_spice</name></expr>:</case>

                <expr_stmt pos:start="1773:17" pos:end="1773:48"><expr pos:start="1773:17" pos:end="1773:47"><name pos:start="1773:17" pos:end="1773:21">olist</name> <operator pos:start="1773:23" pos:end="1773:23">=</operator> <call pos:start="1773:25" pos:end="1773:47"><name pos:start="1773:25" pos:end="1773:38">qemu_find_opts</name><argument_list pos:start="1773:39" pos:end="1773:47">(<argument pos:start="1773:40" pos:end="1773:46"><expr pos:start="1773:40" pos:end="1773:46"><literal type="string" pos:start="1773:40" pos:end="1773:46">"spice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1775:17" pos:end="1781:17"><if pos:start="1775:17" pos:end="1781:17">if <condition pos:start="1775:20" pos:end="1775:27">(<expr pos:start="1775:21" pos:end="1775:26"><operator pos:start="1775:21" pos:end="1775:21">!</operator><name pos:start="1775:22" pos:end="1775:26">olist</name></expr>)</condition> <block pos:start="1775:29" pos:end="1781:17">{<block_content pos:start="1777:21" pos:end="1779:28">

                    <expr_stmt pos:start="1777:21" pos:end="1777:84"><expr pos:start="1777:21" pos:end="1777:83"><call pos:start="1777:21" pos:end="1777:83"><name pos:start="1777:21" pos:end="1777:27">fprintf</name><argument_list pos:start="1777:28" pos:end="1777:83">(<argument pos:start="1777:29" pos:end="1777:34"><expr pos:start="1777:29" pos:end="1777:34"><name pos:start="1777:29" pos:end="1777:34">stderr</name></expr></argument>, <argument pos:start="1777:37" pos:end="1777:82"><expr pos:start="1777:37" pos:end="1777:82"><literal type="string" pos:start="1777:37" pos:end="1777:82">"spice is not supported by this qemu build.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1779:21" pos:end="1779:28"><expr pos:start="1779:21" pos:end="1779:27"><call pos:start="1779:21" pos:end="1779:27"><name pos:start="1779:21" pos:end="1779:24">exit</name><argument_list pos:start="1779:25" pos:end="1779:27">(<argument pos:start="1779:26" pos:end="1779:26"><expr pos:start="1779:26" pos:end="1779:26"><literal type="number" pos:start="1779:26" pos:end="1779:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1783:17" pos:end="1783:57"><expr pos:start="1783:17" pos:end="1783:56"><name pos:start="1783:17" pos:end="1783:20">opts</name> <operator pos:start="1783:22" pos:end="1783:22">=</operator> <call pos:start="1783:24" pos:end="1783:56"><name pos:start="1783:24" pos:end="1783:38">qemu_opts_parse</name><argument_list pos:start="1783:39" pos:end="1783:56">(<argument pos:start="1783:40" pos:end="1783:44"><expr pos:start="1783:40" pos:end="1783:44"><name pos:start="1783:40" pos:end="1783:44">olist</name></expr></argument>, <argument pos:start="1783:47" pos:end="1783:52"><expr pos:start="1783:47" pos:end="1783:52"><name pos:start="1783:47" pos:end="1783:52">optarg</name></expr></argument>, <argument pos:start="1783:55" pos:end="1783:55"><expr pos:start="1783:55" pos:end="1783:55"><literal type="number" pos:start="1783:55" pos:end="1783:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1785:17" pos:end="1791:17"><if pos:start="1785:17" pos:end="1791:17">if <condition pos:start="1785:20" pos:end="1785:26">(<expr pos:start="1785:21" pos:end="1785:25"><operator pos:start="1785:21" pos:end="1785:21">!</operator><name pos:start="1785:22" pos:end="1785:25">opts</name></expr>)</condition> <block pos:start="1785:28" pos:end="1791:17">{<block_content pos:start="1787:21" pos:end="1789:28">

                    <expr_stmt pos:start="1787:21" pos:end="1787:65"><expr pos:start="1787:21" pos:end="1787:64"><call pos:start="1787:21" pos:end="1787:64"><name pos:start="1787:21" pos:end="1787:27">fprintf</name><argument_list pos:start="1787:28" pos:end="1787:64">(<argument pos:start="1787:29" pos:end="1787:34"><expr pos:start="1787:29" pos:end="1787:34"><name pos:start="1787:29" pos:end="1787:34">stderr</name></expr></argument>, <argument pos:start="1787:37" pos:end="1787:55"><expr pos:start="1787:37" pos:end="1787:55"><literal type="string" pos:start="1787:37" pos:end="1787:55">"parse error: %s\n"</literal></expr></argument>, <argument pos:start="1787:58" pos:end="1787:63"><expr pos:start="1787:58" pos:end="1787:63"><name pos:start="1787:58" pos:end="1787:63">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1789:21" pos:end="1789:28"><expr pos:start="1789:21" pos:end="1789:27"><call pos:start="1789:21" pos:end="1789:27"><name pos:start="1789:21" pos:end="1789:24">exit</name><argument_list pos:start="1789:25" pos:end="1789:27">(<argument pos:start="1789:26" pos:end="1789:26"><expr pos:start="1789:26" pos:end="1789:26"><literal type="number" pos:start="1789:26" pos:end="1789:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1793:17" pos:end="1793:22">break;</break>

            <case pos:start="1795:13" pos:end="1795:41">case <expr pos:start="1795:18" pos:end="1795:40"><name pos:start="1795:18" pos:end="1795:40">QEMU_OPTION_writeconfig</name></expr>:</case>

                <block pos:start="1797:17" pos:end="1825:17">{<block_content pos:start="1799:21" pos:end="1823:26">

                    <decl_stmt pos:start="1799:21" pos:end="1799:29"><decl pos:start="1799:21" pos:end="1799:28"><type pos:start="1799:21" pos:end="1799:26"><name pos:start="1799:21" pos:end="1799:24">FILE</name> <modifier pos:start="1799:26" pos:end="1799:26">*</modifier></type><name pos:start="1799:27" pos:end="1799:28">fp</name></decl>;</decl_stmt>

                    <if_stmt pos:start="1801:21" pos:end="1817:21"><if pos:start="1801:21" pos:end="1805:21">if <condition pos:start="1801:24" pos:end="1801:49">(<expr pos:start="1801:25" pos:end="1801:48"><call pos:start="1801:25" pos:end="1801:43"><name pos:start="1801:25" pos:end="1801:30">strcmp</name><argument_list pos:start="1801:31" pos:end="1801:43">(<argument pos:start="1801:32" pos:end="1801:37"><expr pos:start="1801:32" pos:end="1801:37"><name pos:start="1801:32" pos:end="1801:37">optarg</name></expr></argument>, <argument pos:start="1801:40" pos:end="1801:42"><expr pos:start="1801:40" pos:end="1801:42"><literal type="string" pos:start="1801:40" pos:end="1801:42">"-"</literal></expr></argument>)</argument_list></call> <operator pos:start="1801:45" pos:end="1801:46">==</operator> <literal type="number" pos:start="1801:48" pos:end="1801:48">0</literal></expr>)</condition> <block pos:start="1801:51" pos:end="1805:21">{<block_content pos:start="1803:25" pos:end="1803:36">

                        <expr_stmt pos:start="1803:25" pos:end="1803:36"><expr pos:start="1803:25" pos:end="1803:35"><name pos:start="1803:25" pos:end="1803:26">fp</name> <operator pos:start="1803:28" pos:end="1803:28">=</operator> <name pos:start="1803:30" pos:end="1803:35">stdout</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1805:23" pos:end="1817:21">else <block pos:start="1805:28" pos:end="1817:21">{<block_content pos:start="1807:25" pos:end="1815:25">

                        <expr_stmt pos:start="1807:25" pos:end="1807:48"><expr pos:start="1807:25" pos:end="1807:47"><name pos:start="1807:25" pos:end="1807:26">fp</name> <operator pos:start="1807:28" pos:end="1807:28">=</operator> <call pos:start="1807:30" pos:end="1807:47"><name pos:start="1807:30" pos:end="1807:34">fopen</name><argument_list pos:start="1807:35" pos:end="1807:47">(<argument pos:start="1807:36" pos:end="1807:41"><expr pos:start="1807:36" pos:end="1807:41"><name pos:start="1807:36" pos:end="1807:41">optarg</name></expr></argument>, <argument pos:start="1807:44" pos:end="1807:46"><expr pos:start="1807:44" pos:end="1807:46"><literal type="string" pos:start="1807:44" pos:end="1807:46">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1809:25" pos:end="1815:25"><if pos:start="1809:25" pos:end="1815:25">if <condition pos:start="1809:28" pos:end="1809:39">(<expr pos:start="1809:29" pos:end="1809:38"><name pos:start="1809:29" pos:end="1809:30">fp</name> <operator pos:start="1809:32" pos:end="1809:33">==</operator> <name pos:start="1809:35" pos:end="1809:38">NULL</name></expr>)</condition> <block pos:start="1809:41" pos:end="1815:25">{<block_content pos:start="1811:29" pos:end="1813:36">

                            <expr_stmt pos:start="1811:29" pos:end="1811:86"><expr pos:start="1811:29" pos:end="1811:85"><call pos:start="1811:29" pos:end="1811:85"><name pos:start="1811:29" pos:end="1811:35">fprintf</name><argument_list pos:start="1811:36" pos:end="1811:85">(<argument pos:start="1811:37" pos:end="1811:42"><expr pos:start="1811:37" pos:end="1811:42"><name pos:start="1811:37" pos:end="1811:42">stderr</name></expr></argument>, <argument pos:start="1811:45" pos:end="1811:59"><expr pos:start="1811:45" pos:end="1811:59"><literal type="string" pos:start="1811:45" pos:end="1811:59">"open %s: %s\n"</literal></expr></argument>, <argument pos:start="1811:62" pos:end="1811:67"><expr pos:start="1811:62" pos:end="1811:67"><name pos:start="1811:62" pos:end="1811:67">optarg</name></expr></argument>, <argument pos:start="1811:70" pos:end="1811:84"><expr pos:start="1811:70" pos:end="1811:84"><call pos:start="1811:70" pos:end="1811:84"><name pos:start="1811:70" pos:end="1811:77">strerror</name><argument_list pos:start="1811:78" pos:end="1811:84">(<argument pos:start="1811:79" pos:end="1811:83"><expr pos:start="1811:79" pos:end="1811:83"><name pos:start="1811:79" pos:end="1811:83">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1813:29" pos:end="1813:36"><expr pos:start="1813:29" pos:end="1813:35"><call pos:start="1813:29" pos:end="1813:35"><name pos:start="1813:29" pos:end="1813:32">exit</name><argument_list pos:start="1813:33" pos:end="1813:35">(<argument pos:start="1813:34" pos:end="1813:34"><expr pos:start="1813:34" pos:end="1813:34"><literal type="number" pos:start="1813:34" pos:end="1813:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1819:21" pos:end="1819:42"><expr pos:start="1819:21" pos:end="1819:41"><call pos:start="1819:21" pos:end="1819:41"><name pos:start="1819:21" pos:end="1819:37">qemu_config_write</name><argument_list pos:start="1819:38" pos:end="1819:41">(<argument pos:start="1819:39" pos:end="1819:40"><expr pos:start="1819:39" pos:end="1819:40"><name pos:start="1819:39" pos:end="1819:40">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1821:21" pos:end="1821:31"><expr pos:start="1821:21" pos:end="1821:30"><call pos:start="1821:21" pos:end="1821:30"><name pos:start="1821:21" pos:end="1821:26">fclose</name><argument_list pos:start="1821:27" pos:end="1821:30">(<argument pos:start="1821:28" pos:end="1821:29"><expr pos:start="1821:28" pos:end="1821:29"><name pos:start="1821:28" pos:end="1821:29">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1823:21" pos:end="1823:26">break;</break>

                </block_content>}</block>

            <default pos:start="1827:13" pos:end="1827:20">default:</default>

                <expr_stmt pos:start="1829:17" pos:end="1829:55"><expr pos:start="1829:17" pos:end="1829:54"><call pos:start="1829:17" pos:end="1829:54"><name pos:start="1829:17" pos:end="1829:33">os_parse_cmd_args</name><argument_list pos:start="1829:34" pos:end="1829:54">(<argument pos:start="1829:35" pos:end="1829:45"><expr pos:start="1829:35" pos:end="1829:45"><name pos:start="1829:35" pos:end="1829:45"><name pos:start="1829:35" pos:end="1829:38">popt</name><operator pos:start="1829:39" pos:end="1829:40">-&gt;</operator><name pos:start="1829:41" pos:end="1829:45">index</name></name></expr></argument>, <argument pos:start="1829:48" pos:end="1829:53"><expr pos:start="1829:48" pos:end="1829:53"><name pos:start="1829:48" pos:end="1829:53">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="1837:5" pos:end="1837:19"><expr pos:start="1837:5" pos:end="1837:18"><call pos:start="1837:5" pos:end="1837:18"><name pos:start="1837:5" pos:end="1837:16">loc_set_none</name><argument_list pos:start="1837:17" pos:end="1837:18">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="1841:5" pos:end="1849:7">/* Open the logfile at this point, if necessary. We can't open the logfile

     * when encountering either of the logging options (-d or -D) because the

     * other one may be encountered later on the command line, changing the

     * location or level of logging.

     */</comment>

    <if_stmt pos:start="1851:5" pos:end="1861:5"><if pos:start="1851:5" pos:end="1861:5">if <condition pos:start="1851:8" pos:end="1851:17">(<expr pos:start="1851:9" pos:end="1851:16"><name pos:start="1851:9" pos:end="1851:16">log_mask</name></expr>)</condition> <block pos:start="1851:19" pos:end="1861:5">{<block_content pos:start="1853:9" pos:end="1859:30">

        <if_stmt pos:start="1853:9" pos:end="1857:9"><if pos:start="1853:9" pos:end="1857:9">if <condition pos:start="1853:12" pos:end="1853:21">(<expr pos:start="1853:13" pos:end="1853:20"><name pos:start="1853:13" pos:end="1853:20">log_file</name></expr>)</condition> <block pos:start="1853:23" pos:end="1857:9">{<block_content pos:start="1855:13" pos:end="1855:43">

            <expr_stmt pos:start="1855:13" pos:end="1855:43"><expr pos:start="1855:13" pos:end="1855:42"><call pos:start="1855:13" pos:end="1855:42"><name pos:start="1855:13" pos:end="1855:32">set_cpu_log_filename</name><argument_list pos:start="1855:33" pos:end="1855:42">(<argument pos:start="1855:34" pos:end="1855:41"><expr pos:start="1855:34" pos:end="1855:41"><name pos:start="1855:34" pos:end="1855:41">log_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="1859:9" pos:end="1859:30"><expr pos:start="1859:9" pos:end="1859:29"><call pos:start="1859:9" pos:end="1859:29"><name pos:start="1859:9" pos:end="1859:19">set_cpu_log</name><argument_list pos:start="1859:20" pos:end="1859:29">(<argument pos:start="1859:21" pos:end="1859:28"><expr pos:start="1859:21" pos:end="1859:28"><name pos:start="1859:21" pos:end="1859:28">log_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="1865:5" pos:end="1869:5"><if pos:start="1865:5" pos:end="1869:5">if <condition pos:start="1865:8" pos:end="1865:54">(<expr pos:start="1865:9" pos:end="1865:53"><operator pos:start="1865:9" pos:end="1865:9">!</operator><call pos:start="1865:10" pos:end="1865:53"><name pos:start="1865:10" pos:end="1865:27">trace_backend_init</name><argument_list pos:start="1865:28" pos:end="1865:53">(<argument pos:start="1865:29" pos:end="1865:40"><expr pos:start="1865:29" pos:end="1865:40"><name pos:start="1865:29" pos:end="1865:40">trace_events</name></expr></argument>, <argument pos:start="1865:43" pos:end="1865:52"><expr pos:start="1865:43" pos:end="1865:52"><name pos:start="1865:43" pos:end="1865:52">trace_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1865:56" pos:end="1869:5">{<block_content pos:start="1867:9" pos:end="1867:16">

        <expr_stmt pos:start="1867:9" pos:end="1867:16"><expr pos:start="1867:9" pos:end="1867:15"><call pos:start="1867:9" pos:end="1867:15"><name pos:start="1867:9" pos:end="1867:12">exit</name><argument_list pos:start="1867:13" pos:end="1867:15">(<argument pos:start="1867:14" pos:end="1867:14"><expr pos:start="1867:14" pos:end="1867:14"><literal type="number" pos:start="1867:14" pos:end="1867:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="1873:5" pos:end="1875:27">/* If no data_dir is specified then try to find it relative to the

       executable path.  */</comment>

    <if_stmt pos:start="1877:5" pos:end="1881:5"><if pos:start="1877:5" pos:end="1881:5">if <condition pos:start="1877:8" pos:end="1877:18">(<expr pos:start="1877:9" pos:end="1877:17"><operator pos:start="1877:9" pos:end="1877:9">!</operator><name pos:start="1877:10" pos:end="1877:17">data_dir</name></expr>)</condition> <block pos:start="1877:20" pos:end="1881:5">{<block_content pos:start="1879:9" pos:end="1879:44">

        <expr_stmt pos:start="1879:9" pos:end="1879:44"><expr pos:start="1879:9" pos:end="1879:43"><name pos:start="1879:9" pos:end="1879:16">data_dir</name> <operator pos:start="1879:18" pos:end="1879:18">=</operator> <call pos:start="1879:20" pos:end="1879:43"><name pos:start="1879:20" pos:end="1879:34">os_find_datadir</name><argument_list pos:start="1879:35" pos:end="1879:43">(<argument pos:start="1879:36" pos:end="1879:42"><expr pos:start="1879:36" pos:end="1879:42"><name pos:start="1879:36" pos:end="1879:42"><name pos:start="1879:36" pos:end="1879:39">argv</name><index pos:start="1879:40" pos:end="1879:42">[<expr pos:start="1879:41" pos:end="1879:41"><literal type="number" pos:start="1879:41" pos:end="1879:41">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="1883:5" pos:end="1883:73">/* If all else fails use the install path specified when building. */</comment>

    <if_stmt pos:start="1885:5" pos:end="1889:5"><if pos:start="1885:5" pos:end="1889:5">if <condition pos:start="1885:8" pos:end="1885:18">(<expr pos:start="1885:9" pos:end="1885:17"><operator pos:start="1885:9" pos:end="1885:9">!</operator><name pos:start="1885:10" pos:end="1885:17">data_dir</name></expr>)</condition> <block pos:start="1885:20" pos:end="1889:5">{<block_content pos:start="1887:9" pos:end="1887:39">

        <expr_stmt pos:start="1887:9" pos:end="1887:39"><expr pos:start="1887:9" pos:end="1887:38"><name pos:start="1887:9" pos:end="1887:16">data_dir</name> <operator pos:start="1887:18" pos:end="1887:18">=</operator> <name pos:start="1887:20" pos:end="1887:38">CONFIG_QEMU_DATADIR</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="1893:5" pos:end="1899:5"><if pos:start="1893:5" pos:end="1899:5">if <condition pos:start="1893:8" pos:end="1893:24">(<expr pos:start="1893:9" pos:end="1893:23"><name pos:start="1893:9" pos:end="1893:15">machine</name> <operator pos:start="1893:17" pos:end="1893:18">==</operator> <name pos:start="1893:20" pos:end="1893:23">NULL</name></expr>)</condition> <block pos:start="1893:26" pos:end="1899:5">{<block_content pos:start="1895:9" pos:end="1897:16">

        <expr_stmt pos:start="1895:9" pos:end="1895:47"><expr pos:start="1895:9" pos:end="1895:46"><call pos:start="1895:9" pos:end="1895:46"><name pos:start="1895:9" pos:end="1895:15">fprintf</name><argument_list pos:start="1895:16" pos:end="1895:46">(<argument pos:start="1895:17" pos:end="1895:22"><expr pos:start="1895:17" pos:end="1895:22"><name pos:start="1895:17" pos:end="1895:22">stderr</name></expr></argument>, <argument pos:start="1895:25" pos:end="1895:45"><expr pos:start="1895:25" pos:end="1895:45"><literal type="string" pos:start="1895:25" pos:end="1895:45">"No machine found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1897:9" pos:end="1897:16"><expr pos:start="1897:9" pos:end="1897:15"><call pos:start="1897:9" pos:end="1897:15"><name pos:start="1897:9" pos:end="1897:12">exit</name><argument_list pos:start="1897:13" pos:end="1897:15">(<argument pos:start="1897:14" pos:end="1897:14"><expr pos:start="1897:14" pos:end="1897:14"><literal type="number" pos:start="1897:14" pos:end="1897:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="1903:5" pos:end="1909:7">/*

     * Default to max_cpus = smp_cpus, in case the user doesn't

     * specify a max_cpus value.

     */</comment>

    <if_stmt pos:start="1911:5" pos:end="1913:28"><if pos:start="1911:5" pos:end="1913:28">if <condition pos:start="1911:8" pos:end="1911:18">(<expr pos:start="1911:9" pos:end="1911:17"><operator pos:start="1911:9" pos:end="1911:9">!</operator><name pos:start="1911:10" pos:end="1911:17">max_cpus</name></expr>)</condition><block type="pseudo" pos:start="1913:9" pos:end="1913:28"><block_content pos:start="1913:9" pos:end="1913:28">

        <expr_stmt pos:start="1913:9" pos:end="1913:28"><expr pos:start="1913:9" pos:end="1913:27"><name pos:start="1913:9" pos:end="1913:16">max_cpus</name> <operator pos:start="1913:18" pos:end="1913:18">=</operator> <name pos:start="1913:20" pos:end="1913:27">smp_cpus</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="1917:5" pos:end="1917:47"><expr pos:start="1917:5" pos:end="1917:46"><name pos:start="1917:5" pos:end="1917:21"><name pos:start="1917:5" pos:end="1917:11">machine</name><operator pos:start="1917:12" pos:end="1917:13">-&gt;</operator><name pos:start="1917:14" pos:end="1917:21">max_cpus</name></name> <operator pos:start="1917:23" pos:end="1917:23">=</operator> <ternary pos:start="1917:25" pos:end="1917:46"><condition pos:start="1917:25" pos:end="1917:43"><expr pos:start="1917:25" pos:end="1917:41"><name pos:start="1917:25" pos:end="1917:41"><name pos:start="1917:25" pos:end="1917:31">machine</name><operator pos:start="1917:32" pos:end="1917:33">-&gt;</operator><name pos:start="1917:34" pos:end="1917:41">max_cpus</name></name></expr> ?</condition><then/><else pos:start="1917:44" pos:end="1917:46">: <expr pos:start="1917:46" pos:end="1917:46"><literal type="number" pos:start="1917:46" pos:end="1917:46">1</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="block" pos:start="1917:49" pos:end="1917:67">/* Default to UP */</comment>

    <if_stmt pos:start="1919:5" pos:end="1929:5"><if pos:start="1919:5" pos:end="1929:5">if <condition pos:start="1919:8" pos:end="1919:37">(<expr pos:start="1919:9" pos:end="1919:36"><name pos:start="1919:9" pos:end="1919:16">smp_cpus</name> <operator pos:start="1919:18" pos:end="1919:18">&gt;</operator> <name pos:start="1919:20" pos:end="1919:36"><name pos:start="1919:20" pos:end="1919:26">machine</name><operator pos:start="1919:27" pos:end="1919:28">-&gt;</operator><name pos:start="1919:29" pos:end="1919:36">max_cpus</name></name></expr>)</condition> <block pos:start="1919:39" pos:end="1929:5">{<block_content pos:start="1921:9" pos:end="1927:16">

        <expr_stmt pos:start="1921:9" pos:end="1925:35"><expr pos:start="1921:9" pos:end="1925:34"><call pos:start="1921:9" pos:end="1925:34"><name pos:start="1921:9" pos:end="1921:15">fprintf</name><argument_list pos:start="1921:16" pos:end="1925:34">(<argument pos:start="1921:17" pos:end="1921:22"><expr pos:start="1921:17" pos:end="1921:22"><name pos:start="1921:17" pos:end="1921:22">stderr</name></expr></argument>, <argument pos:start="1921:25" pos:end="1923:50"><expr pos:start="1921:25" pos:end="1923:50"><literal type="string" pos:start="1921:25" pos:end="1921:78">"Number of SMP cpus requested (%d), exceeds max cpus "</literal>

                <literal type="string" pos:start="1923:17" pos:end="1923:50">"supported by machine `%s' (%d)\n"</literal></expr></argument>, <argument pos:start="1923:53" pos:end="1923:60"><expr pos:start="1923:53" pos:end="1923:60"><name pos:start="1923:53" pos:end="1923:60">smp_cpus</name></expr></argument>,  <argument pos:start="1923:64" pos:end="1923:76"><expr pos:start="1923:64" pos:end="1923:76"><name pos:start="1923:64" pos:end="1923:76"><name pos:start="1923:64" pos:end="1923:70">machine</name><operator pos:start="1923:71" pos:end="1923:72">-&gt;</operator><name pos:start="1923:73" pos:end="1923:76">name</name></name></expr></argument>,

                <argument pos:start="1925:17" pos:end="1925:33"><expr pos:start="1925:17" pos:end="1925:33"><name pos:start="1925:17" pos:end="1925:33"><name pos:start="1925:17" pos:end="1925:23">machine</name><operator pos:start="1925:24" pos:end="1925:25">-&gt;</operator><name pos:start="1925:26" pos:end="1925:33">max_cpus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1927:9" pos:end="1927:16"><expr pos:start="1927:9" pos:end="1927:15"><call pos:start="1927:9" pos:end="1927:15"><name pos:start="1927:9" pos:end="1927:12">exit</name><argument_list pos:start="1927:13" pos:end="1927:15">(<argument pos:start="1927:14" pos:end="1927:14"><expr pos:start="1927:14" pos:end="1927:14"><literal type="number" pos:start="1927:14" pos:end="1927:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="1933:5" pos:end="1939:7">/*

     * Get the default machine options from the machine if it is not already

     * specified either by the configuration file or by the command line.

     */</comment>

    <if_stmt pos:start="1941:5" pos:end="1973:5"><if pos:start="1941:5" pos:end="1973:5">if <condition pos:start="1941:8" pos:end="1941:38">(<expr pos:start="1941:9" pos:end="1941:37"><name pos:start="1941:9" pos:end="1941:37"><name pos:start="1941:9" pos:end="1941:15">machine</name><operator pos:start="1941:16" pos:end="1941:17">-&gt;</operator><name pos:start="1941:18" pos:end="1941:37">default_machine_opts</name></name></expr>)</condition> <block pos:start="1941:40" pos:end="1973:5">{<block_content pos:start="1943:9" pos:end="1971:9">

        <decl_stmt pos:start="1943:9" pos:end="1943:55"><decl pos:start="1943:9" pos:end="1943:54"><type pos:start="1943:9" pos:end="1943:22"><name pos:start="1943:9" pos:end="1943:20">QemuOptsList</name> <modifier pos:start="1943:22" pos:end="1943:22">*</modifier></type><name pos:start="1943:23" pos:end="1943:26">list</name> <init pos:start="1943:28" pos:end="1943:54">= <expr pos:start="1943:30" pos:end="1943:54"><call pos:start="1943:30" pos:end="1943:54"><name pos:start="1943:30" pos:end="1943:43">qemu_find_opts</name><argument_list pos:start="1943:44" pos:end="1943:54">(<argument pos:start="1943:45" pos:end="1943:53"><expr pos:start="1943:45" pos:end="1943:53"><literal type="string" pos:start="1943:45" pos:end="1943:53">"machine"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="1945:9" pos:end="1945:29"><decl pos:start="1945:9" pos:end="1945:28"><type pos:start="1945:9" pos:end="1945:20"><specifier pos:start="1945:9" pos:end="1945:13">const</specifier> <name pos:start="1945:15" pos:end="1945:18">char</name> <modifier pos:start="1945:20" pos:end="1945:20">*</modifier></type><name pos:start="1945:21" pos:end="1945:21">p</name> <init pos:start="1945:23" pos:end="1945:28">= <expr pos:start="1945:25" pos:end="1945:28"><name pos:start="1945:25" pos:end="1945:28">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="1949:9" pos:end="1953:9"><if pos:start="1949:9" pos:end="1953:9">if <condition pos:start="1949:12" pos:end="1949:39">(<expr pos:start="1949:13" pos:end="1949:38"><operator pos:start="1949:13" pos:end="1949:13">!</operator><call pos:start="1949:14" pos:end="1949:38"><name pos:start="1949:14" pos:end="1949:25">QTAILQ_EMPTY</name><argument_list pos:start="1949:26" pos:end="1949:38">(<argument pos:start="1949:27" pos:end="1949:37"><expr pos:start="1949:27" pos:end="1949:37"><operator pos:start="1949:27" pos:end="1949:27">&amp;</operator><name pos:start="1949:28" pos:end="1949:37"><name pos:start="1949:28" pos:end="1949:31">list</name><operator pos:start="1949:32" pos:end="1949:33">-&gt;</operator><name pos:start="1949:34" pos:end="1949:37">head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1949:41" pos:end="1953:9">{<block_content pos:start="1951:13" pos:end="1951:65">

            <expr_stmt pos:start="1951:13" pos:end="1951:65"><expr pos:start="1951:13" pos:end="1951:64"><name pos:start="1951:13" pos:end="1951:13">p</name> <operator pos:start="1951:15" pos:end="1951:15">=</operator> <call pos:start="1951:17" pos:end="1951:64"><name pos:start="1951:17" pos:end="1951:28">qemu_opt_get</name><argument_list pos:start="1951:29" pos:end="1951:64">(<argument pos:start="1951:30" pos:end="1951:54"><expr pos:start="1951:30" pos:end="1951:54"><call pos:start="1951:30" pos:end="1951:54"><name pos:start="1951:30" pos:end="1951:41">QTAILQ_FIRST</name><argument_list pos:start="1951:42" pos:end="1951:54">(<argument pos:start="1951:43" pos:end="1951:53"><expr pos:start="1951:43" pos:end="1951:53"><operator pos:start="1951:43" pos:end="1951:43">&amp;</operator><name pos:start="1951:44" pos:end="1951:53"><name pos:start="1951:44" pos:end="1951:47">list</name><operator pos:start="1951:48" pos:end="1951:49">-&gt;</operator><name pos:start="1951:50" pos:end="1951:53">head</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1951:57" pos:end="1951:63"><expr pos:start="1951:57" pos:end="1951:63"><literal type="string" pos:start="1951:57" pos:end="1951:63">"accel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1955:9" pos:end="1971:9"><if pos:start="1955:9" pos:end="1971:9">if <condition pos:start="1955:12" pos:end="1955:22">(<expr pos:start="1955:13" pos:end="1955:21"><name pos:start="1955:13" pos:end="1955:13">p</name> <operator pos:start="1955:15" pos:end="1955:16">==</operator> <name pos:start="1955:18" pos:end="1955:21">NULL</name></expr>)</condition> <block pos:start="1955:24" pos:end="1971:9">{<block_content pos:start="1957:13" pos:end="1969:13">

            <expr_stmt pos:start="1957:13" pos:end="1957:34"><expr pos:start="1957:13" pos:end="1957:33"><call pos:start="1957:13" pos:end="1957:33"><name pos:start="1957:13" pos:end="1957:27">qemu_opts_reset</name><argument_list pos:start="1957:28" pos:end="1957:33">(<argument pos:start="1957:29" pos:end="1957:32"><expr pos:start="1957:29" pos:end="1957:32"><name pos:start="1957:29" pos:end="1957:32">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1959:13" pos:end="1959:75"><expr pos:start="1959:13" pos:end="1959:74"><name pos:start="1959:13" pos:end="1959:16">opts</name> <operator pos:start="1959:18" pos:end="1959:18">=</operator> <call pos:start="1959:20" pos:end="1959:74"><name pos:start="1959:20" pos:end="1959:34">qemu_opts_parse</name><argument_list pos:start="1959:35" pos:end="1959:74">(<argument pos:start="1959:36" pos:end="1959:39"><expr pos:start="1959:36" pos:end="1959:39"><name pos:start="1959:36" pos:end="1959:39">list</name></expr></argument>, <argument pos:start="1959:42" pos:end="1959:70"><expr pos:start="1959:42" pos:end="1959:70"><name pos:start="1959:42" pos:end="1959:70"><name pos:start="1959:42" pos:end="1959:48">machine</name><operator pos:start="1959:49" pos:end="1959:50">-&gt;</operator><name pos:start="1959:51" pos:end="1959:70">default_machine_opts</name></name></expr></argument>, <argument pos:start="1959:73" pos:end="1959:73"><expr pos:start="1959:73" pos:end="1959:73"><literal type="number" pos:start="1959:73" pos:end="1959:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1961:13" pos:end="1969:13"><if pos:start="1961:13" pos:end="1969:13">if <condition pos:start="1961:16" pos:end="1961:22">(<expr pos:start="1961:17" pos:end="1961:21"><operator pos:start="1961:17" pos:end="1961:17">!</operator><name pos:start="1961:18" pos:end="1961:21">opts</name></expr>)</condition> <block pos:start="1961:24" pos:end="1969:13">{<block_content pos:start="1963:17" pos:end="1967:24">

                <expr_stmt pos:start="1963:17" pos:end="1965:70"><expr pos:start="1963:17" pos:end="1965:69"><call pos:start="1963:17" pos:end="1965:69"><name pos:start="1963:17" pos:end="1963:23">fprintf</name><argument_list pos:start="1963:24" pos:end="1965:69">(<argument pos:start="1963:25" pos:end="1963:30"><expr pos:start="1963:25" pos:end="1963:30"><name pos:start="1963:25" pos:end="1963:30">stderr</name></expr></argument>, <argument pos:start="1963:33" pos:end="1963:66"><expr pos:start="1963:33" pos:end="1963:66"><literal type="string" pos:start="1963:33" pos:end="1963:66">"parse error for machine %s: %s\n"</literal></expr></argument>,

                        <argument pos:start="1965:25" pos:end="1965:37"><expr pos:start="1965:25" pos:end="1965:37"><name pos:start="1965:25" pos:end="1965:37"><name pos:start="1965:25" pos:end="1965:31">machine</name><operator pos:start="1965:32" pos:end="1965:33">-&gt;</operator><name pos:start="1965:34" pos:end="1965:37">name</name></name></expr></argument>, <argument pos:start="1965:40" pos:end="1965:68"><expr pos:start="1965:40" pos:end="1965:68"><name pos:start="1965:40" pos:end="1965:68"><name pos:start="1965:40" pos:end="1965:46">machine</name><operator pos:start="1965:47" pos:end="1965:48">-&gt;</operator><name pos:start="1965:49" pos:end="1965:68">default_machine_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1967:17" pos:end="1967:24"><expr pos:start="1967:17" pos:end="1967:23"><call pos:start="1967:17" pos:end="1967:23"><name pos:start="1967:17" pos:end="1967:20">exit</name><argument_list pos:start="1967:21" pos:end="1967:23">(<argument pos:start="1967:22" pos:end="1967:22"><expr pos:start="1967:22" pos:end="1967:22"><literal type="number" pos:start="1967:22" pos:end="1967:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="1977:5" pos:end="1977:79"><expr pos:start="1977:5" pos:end="1977:78"><call pos:start="1977:5" pos:end="1977:78"><name pos:start="1977:5" pos:end="1977:21">qemu_opts_foreach</name><argument_list pos:start="1977:22" pos:end="1977:78">(<argument pos:start="1977:23" pos:end="1977:46"><expr pos:start="1977:23" pos:end="1977:46"><call pos:start="1977:23" pos:end="1977:46"><name pos:start="1977:23" pos:end="1977:36">qemu_find_opts</name><argument_list pos:start="1977:37" pos:end="1977:46">(<argument pos:start="1977:38" pos:end="1977:45"><expr pos:start="1977:38" pos:end="1977:45"><literal type="string" pos:start="1977:38" pos:end="1977:45">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1977:49" pos:end="1977:68"><expr pos:start="1977:49" pos:end="1977:68"><name pos:start="1977:49" pos:end="1977:68">default_driver_check</name></expr></argument>, <argument pos:start="1977:71" pos:end="1977:74"><expr pos:start="1977:71" pos:end="1977:74"><name pos:start="1977:71" pos:end="1977:74">NULL</name></expr></argument>, <argument pos:start="1977:77" pos:end="1977:77"><expr pos:start="1977:77" pos:end="1977:77"><literal type="number" pos:start="1977:77" pos:end="1977:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="1979:5" pos:end="1979:79"><expr pos:start="1979:5" pos:end="1979:78"><call pos:start="1979:5" pos:end="1979:78"><name pos:start="1979:5" pos:end="1979:21">qemu_opts_foreach</name><argument_list pos:start="1979:22" pos:end="1979:78">(<argument pos:start="1979:23" pos:end="1979:46"><expr pos:start="1979:23" pos:end="1979:46"><call pos:start="1979:23" pos:end="1979:46"><name pos:start="1979:23" pos:end="1979:36">qemu_find_opts</name><argument_list pos:start="1979:37" pos:end="1979:46">(<argument pos:start="1979:38" pos:end="1979:45"><expr pos:start="1979:38" pos:end="1979:45"><literal type="string" pos:start="1979:38" pos:end="1979:45">"global"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1979:49" pos:end="1979:68"><expr pos:start="1979:49" pos:end="1979:68"><name pos:start="1979:49" pos:end="1979:68">default_driver_check</name></expr></argument>, <argument pos:start="1979:71" pos:end="1979:74"><expr pos:start="1979:71" pos:end="1979:74"><name pos:start="1979:71" pos:end="1979:74">NULL</name></expr></argument>, <argument pos:start="1979:77" pos:end="1979:77"><expr pos:start="1979:77" pos:end="1979:77"><literal type="number" pos:start="1979:77" pos:end="1979:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="1983:5" pos:end="1987:5"><if pos:start="1983:5" pos:end="1987:5">if <condition pos:start="1983:8" pos:end="1983:27">(<expr pos:start="1983:9" pos:end="1983:26"><name pos:start="1983:9" pos:end="1983:26"><name pos:start="1983:9" pos:end="1983:15">machine</name><operator pos:start="1983:16" pos:end="1983:17">-&gt;</operator><name pos:start="1983:18" pos:end="1983:26">no_serial</name></name></expr>)</condition> <block pos:start="1983:29" pos:end="1987:5">{<block_content pos:start="1985:9" pos:end="1985:27">

        <expr_stmt pos:start="1985:9" pos:end="1985:27"><expr pos:start="1985:9" pos:end="1985:26"><name pos:start="1985:9" pos:end="1985:22">default_serial</name> <operator pos:start="1985:24" pos:end="1985:24">=</operator> <literal type="number" pos:start="1985:26" pos:end="1985:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1989:5" pos:end="1993:5"><if pos:start="1989:5" pos:end="1993:5">if <condition pos:start="1989:8" pos:end="1989:29">(<expr pos:start="1989:9" pos:end="1989:28"><name pos:start="1989:9" pos:end="1989:28"><name pos:start="1989:9" pos:end="1989:15">machine</name><operator pos:start="1989:16" pos:end="1989:17">-&gt;</operator><name pos:start="1989:18" pos:end="1989:28">no_parallel</name></name></expr>)</condition> <block pos:start="1989:31" pos:end="1993:5">{<block_content pos:start="1991:9" pos:end="1991:29">

        <expr_stmt pos:start="1991:9" pos:end="1991:29"><expr pos:start="1991:9" pos:end="1991:28"><name pos:start="1991:9" pos:end="1991:24">default_parallel</name> <operator pos:start="1991:26" pos:end="1991:26">=</operator> <literal type="number" pos:start="1991:28" pos:end="1991:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="1995:5" pos:end="1999:5"><if pos:start="1995:5" pos:end="1999:5">if <condition pos:start="1995:8" pos:end="1995:30">(<expr pos:start="1995:9" pos:end="1995:29"><operator pos:start="1995:9" pos:end="1995:9">!</operator><name pos:start="1995:10" pos:end="1995:29"><name pos:start="1995:10" pos:end="1995:16">machine</name><operator pos:start="1995:17" pos:end="1995:18">-&gt;</operator><name pos:start="1995:19" pos:end="1995:29">use_virtcon</name></name></expr>)</condition> <block pos:start="1995:32" pos:end="1999:5">{<block_content pos:start="1997:9" pos:end="1997:28">

        <expr_stmt pos:start="1997:9" pos:end="1997:28"><expr pos:start="1997:9" pos:end="1997:27"><name pos:start="1997:9" pos:end="1997:23">default_virtcon</name> <operator pos:start="1997:25" pos:end="1997:25">=</operator> <literal type="number" pos:start="1997:27" pos:end="1997:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2001:5" pos:end="2005:5"><if pos:start="2001:5" pos:end="2005:5">if <condition pos:start="2001:8" pos:end="2001:24">(<expr pos:start="2001:9" pos:end="2001:23"><name pos:start="2001:9" pos:end="2001:23"><name pos:start="2001:9" pos:end="2001:15">machine</name><operator pos:start="2001:16" pos:end="2001:17">-&gt;</operator><name pos:start="2001:18" pos:end="2001:23">no_vga</name></name></expr>)</condition> <block pos:start="2001:26" pos:end="2005:5">{<block_content pos:start="2003:9" pos:end="2003:24">

        <expr_stmt pos:start="2003:9" pos:end="2003:24"><expr pos:start="2003:9" pos:end="2003:23"><name pos:start="2003:9" pos:end="2003:19">default_vga</name> <operator pos:start="2003:21" pos:end="2003:21">=</operator> <literal type="number" pos:start="2003:23" pos:end="2003:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2007:5" pos:end="2011:5"><if pos:start="2007:5" pos:end="2011:5">if <condition pos:start="2007:8" pos:end="2007:27">(<expr pos:start="2007:9" pos:end="2007:26"><name pos:start="2007:9" pos:end="2007:26"><name pos:start="2007:9" pos:end="2007:15">machine</name><operator pos:start="2007:16" pos:end="2007:17">-&gt;</operator><name pos:start="2007:18" pos:end="2007:26">no_floppy</name></name></expr>)</condition> <block pos:start="2007:29" pos:end="2011:5">{<block_content pos:start="2009:9" pos:end="2009:27">

        <expr_stmt pos:start="2009:9" pos:end="2009:27"><expr pos:start="2009:9" pos:end="2009:26"><name pos:start="2009:9" pos:end="2009:22">default_floppy</name> <operator pos:start="2009:24" pos:end="2009:24">=</operator> <literal type="number" pos:start="2009:26" pos:end="2009:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2013:5" pos:end="2017:5"><if pos:start="2013:5" pos:end="2017:5">if <condition pos:start="2013:8" pos:end="2013:26">(<expr pos:start="2013:9" pos:end="2013:25"><name pos:start="2013:9" pos:end="2013:25"><name pos:start="2013:9" pos:end="2013:15">machine</name><operator pos:start="2013:16" pos:end="2013:17">-&gt;</operator><name pos:start="2013:18" pos:end="2013:25">no_cdrom</name></name></expr>)</condition> <block pos:start="2013:28" pos:end="2017:5">{<block_content pos:start="2015:9" pos:end="2015:26">

        <expr_stmt pos:start="2015:9" pos:end="2015:26"><expr pos:start="2015:9" pos:end="2015:25"><name pos:start="2015:9" pos:end="2015:21">default_cdrom</name> <operator pos:start="2015:23" pos:end="2015:23">=</operator> <literal type="number" pos:start="2015:25" pos:end="2015:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="2019:5" pos:end="2023:5"><if pos:start="2019:5" pos:end="2023:5">if <condition pos:start="2019:8" pos:end="2019:27">(<expr pos:start="2019:9" pos:end="2019:26"><name pos:start="2019:9" pos:end="2019:26"><name pos:start="2019:9" pos:end="2019:15">machine</name><operator pos:start="2019:16" pos:end="2019:17">-&gt;</operator><name pos:start="2019:18" pos:end="2019:26">no_sdcard</name></name></expr>)</condition> <block pos:start="2019:29" pos:end="2023:5">{<block_content pos:start="2021:9" pos:end="2021:27">

        <expr_stmt pos:start="2021:9" pos:end="2021:27"><expr pos:start="2021:9" pos:end="2021:26"><name pos:start="2021:9" pos:end="2021:22">default_sdcard</name> <operator pos:start="2021:24" pos:end="2021:24">=</operator> <literal type="number" pos:start="2021:26" pos:end="2021:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2027:5" pos:end="2075:5"><if pos:start="2027:5" pos:end="2057:5">if <condition pos:start="2027:8" pos:end="2027:37">(<expr pos:start="2027:9" pos:end="2027:36"><name pos:start="2027:9" pos:end="2027:20">display_type</name> <operator pos:start="2027:22" pos:end="2027:23">==</operator> <name pos:start="2027:25" pos:end="2027:36">DT_NOGRAPHIC</name></expr>)</condition> <block pos:start="2027:39" pos:end="2057:5">{<block_content pos:start="2029:9" pos:end="2055:9">

        <if_stmt pos:start="2029:9" pos:end="2031:52"><if pos:start="2029:9" pos:end="2031:52">if <condition pos:start="2029:12" pos:end="2029:29">(<expr pos:start="2029:13" pos:end="2029:28"><name pos:start="2029:13" pos:end="2029:28">default_parallel</name></expr>)</condition><block type="pseudo" pos:start="2031:13" pos:end="2031:52"><block_content pos:start="2031:13" pos:end="2031:52">

            <expr_stmt pos:start="2031:13" pos:end="2031:52"><expr pos:start="2031:13" pos:end="2031:51"><call pos:start="2031:13" pos:end="2031:51"><name pos:start="2031:13" pos:end="2031:29">add_device_config</name><argument_list pos:start="2031:30" pos:end="2031:51">(<argument pos:start="2031:31" pos:end="2031:42"><expr pos:start="2031:31" pos:end="2031:42"><name pos:start="2031:31" pos:end="2031:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="2031:45" pos:end="2031:50"><expr pos:start="2031:45" pos:end="2031:50"><literal type="string" pos:start="2031:45" pos:end="2031:50">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2033:9" pos:end="2055:9"><if pos:start="2033:9" pos:end="2037:9">if <condition pos:start="2033:12" pos:end="2033:46">(<expr pos:start="2033:13" pos:end="2033:45"><name pos:start="2033:13" pos:end="2033:26">default_serial</name> <operator pos:start="2033:28" pos:end="2033:29">&amp;&amp;</operator> <name pos:start="2033:31" pos:end="2033:45">default_monitor</name></expr>)</condition> <block pos:start="2033:48" pos:end="2037:9">{<block_content pos:start="2035:13" pos:end="2035:55">

            <expr_stmt pos:start="2035:13" pos:end="2035:55"><expr pos:start="2035:13" pos:end="2035:54"><call pos:start="2035:13" pos:end="2035:54"><name pos:start="2035:13" pos:end="2035:29">add_device_config</name><argument_list pos:start="2035:30" pos:end="2035:54">(<argument pos:start="2035:31" pos:end="2035:40"><expr pos:start="2035:31" pos:end="2035:40"><name pos:start="2035:31" pos:end="2035:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="2035:43" pos:end="2035:53"><expr pos:start="2035:43" pos:end="2035:53"><literal type="string" pos:start="2035:43" pos:end="2035:53">"mon:stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="2037:11" pos:end="2041:9">else if <condition pos:start="2037:19" pos:end="2037:54">(<expr pos:start="2037:20" pos:end="2037:53"><name pos:start="2037:20" pos:end="2037:34">default_virtcon</name> <operator pos:start="2037:36" pos:end="2037:37">&amp;&amp;</operator> <name pos:start="2037:39" pos:end="2037:53">default_monitor</name></expr>)</condition> <block pos:start="2037:56" pos:end="2041:9">{<block_content pos:start="2039:13" pos:end="2039:56">

            <expr_stmt pos:start="2039:13" pos:end="2039:56"><expr pos:start="2039:13" pos:end="2039:55"><call pos:start="2039:13" pos:end="2039:55"><name pos:start="2039:13" pos:end="2039:29">add_device_config</name><argument_list pos:start="2039:30" pos:end="2039:55">(<argument pos:start="2039:31" pos:end="2039:41"><expr pos:start="2039:31" pos:end="2039:41"><name pos:start="2039:31" pos:end="2039:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="2039:44" pos:end="2039:54"><expr pos:start="2039:44" pos:end="2039:54"><literal type="string" pos:start="2039:44" pos:end="2039:54">"mon:stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2041:11" pos:end="2055:9">else <block pos:start="2041:16" pos:end="2055:9">{<block_content pos:start="2043:13" pos:end="2053:51">

            <if_stmt pos:start="2043:13" pos:end="2045:55"><if pos:start="2043:13" pos:end="2045:55">if <condition pos:start="2043:16" pos:end="2043:31">(<expr pos:start="2043:17" pos:end="2043:30"><name pos:start="2043:17" pos:end="2043:30">default_serial</name></expr>)</condition><block type="pseudo" pos:start="2045:17" pos:end="2045:55"><block_content pos:start="2045:17" pos:end="2045:55">

                <expr_stmt pos:start="2045:17" pos:end="2045:55"><expr pos:start="2045:17" pos:end="2045:54"><call pos:start="2045:17" pos:end="2045:54"><name pos:start="2045:17" pos:end="2045:33">add_device_config</name><argument_list pos:start="2045:34" pos:end="2045:54">(<argument pos:start="2045:35" pos:end="2045:44"><expr pos:start="2045:35" pos:end="2045:44"><name pos:start="2045:35" pos:end="2045:44">DEV_SERIAL</name></expr></argument>, <argument pos:start="2045:47" pos:end="2045:53"><expr pos:start="2045:47" pos:end="2045:53"><literal type="string" pos:start="2045:47" pos:end="2045:53">"stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="2047:13" pos:end="2049:56"><if pos:start="2047:13" pos:end="2049:56">if <condition pos:start="2047:16" pos:end="2047:32">(<expr pos:start="2047:17" pos:end="2047:31"><name pos:start="2047:17" pos:end="2047:31">default_virtcon</name></expr>)</condition><block type="pseudo" pos:start="2049:17" pos:end="2049:56"><block_content pos:start="2049:17" pos:end="2049:56">

                <expr_stmt pos:start="2049:17" pos:end="2049:56"><expr pos:start="2049:17" pos:end="2049:55"><call pos:start="2049:17" pos:end="2049:55"><name pos:start="2049:17" pos:end="2049:33">add_device_config</name><argument_list pos:start="2049:34" pos:end="2049:55">(<argument pos:start="2049:35" pos:end="2049:45"><expr pos:start="2049:35" pos:end="2049:45"><name pos:start="2049:35" pos:end="2049:45">DEV_VIRTCON</name></expr></argument>, <argument pos:start="2049:48" pos:end="2049:54"><expr pos:start="2049:48" pos:end="2049:54"><literal type="string" pos:start="2049:48" pos:end="2049:54">"stdio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="2051:13" pos:end="2053:51"><if pos:start="2051:13" pos:end="2053:51">if <condition pos:start="2051:16" pos:end="2051:32">(<expr pos:start="2051:17" pos:end="2051:31"><name pos:start="2051:17" pos:end="2051:31">default_monitor</name></expr>)</condition><block type="pseudo" pos:start="2053:17" pos:end="2053:51"><block_content pos:start="2053:17" pos:end="2053:51">

                <expr_stmt pos:start="2053:17" pos:end="2053:51"><expr pos:start="2053:17" pos:end="2053:50"><call pos:start="2053:17" pos:end="2053:50"><name pos:start="2053:17" pos:end="2053:29">monitor_parse</name><argument_list pos:start="2053:30" pos:end="2053:50">(<argument pos:start="2053:31" pos:end="2053:37"><expr pos:start="2053:31" pos:end="2053:37"><literal type="string" pos:start="2053:31" pos:end="2053:37">"stdio"</literal></expr></argument>, <argument pos:start="2053:40" pos:end="2053:49"><expr pos:start="2053:40" pos:end="2053:49"><literal type="string" pos:start="2053:40" pos:end="2053:49">"readline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="2057:7" pos:end="2075:5">else <block pos:start="2057:12" pos:end="2075:5">{<block_content pos:start="2059:9" pos:end="2073:57">

        <if_stmt pos:start="2059:9" pos:end="2061:56"><if pos:start="2059:9" pos:end="2061:56">if <condition pos:start="2059:12" pos:end="2059:27">(<expr pos:start="2059:13" pos:end="2059:26"><name pos:start="2059:13" pos:end="2059:26">default_serial</name></expr>)</condition><block type="pseudo" pos:start="2061:13" pos:end="2061:56"><block_content pos:start="2061:13" pos:end="2061:56">

            <expr_stmt pos:start="2061:13" pos:end="2061:56"><expr pos:start="2061:13" pos:end="2061:55"><call pos:start="2061:13" pos:end="2061:55"><name pos:start="2061:13" pos:end="2061:29">add_device_config</name><argument_list pos:start="2061:30" pos:end="2061:55">(<argument pos:start="2061:31" pos:end="2061:40"><expr pos:start="2061:31" pos:end="2061:40"><name pos:start="2061:31" pos:end="2061:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="2061:43" pos:end="2061:54"><expr pos:start="2061:43" pos:end="2061:54"><literal type="string" pos:start="2061:43" pos:end="2061:54">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2063:9" pos:end="2065:58"><if pos:start="2063:9" pos:end="2065:58">if <condition pos:start="2063:12" pos:end="2063:29">(<expr pos:start="2063:13" pos:end="2063:28"><name pos:start="2063:13" pos:end="2063:28">default_parallel</name></expr>)</condition><block type="pseudo" pos:start="2065:13" pos:end="2065:58"><block_content pos:start="2065:13" pos:end="2065:58">

            <expr_stmt pos:start="2065:13" pos:end="2065:58"><expr pos:start="2065:13" pos:end="2065:57"><call pos:start="2065:13" pos:end="2065:57"><name pos:start="2065:13" pos:end="2065:29">add_device_config</name><argument_list pos:start="2065:30" pos:end="2065:57">(<argument pos:start="2065:31" pos:end="2065:42"><expr pos:start="2065:31" pos:end="2065:42"><name pos:start="2065:31" pos:end="2065:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="2065:45" pos:end="2065:56"><expr pos:start="2065:45" pos:end="2065:56"><literal type="string" pos:start="2065:45" pos:end="2065:56">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2067:9" pos:end="2069:52"><if pos:start="2067:9" pos:end="2069:52">if <condition pos:start="2067:12" pos:end="2067:28">(<expr pos:start="2067:13" pos:end="2067:27"><name pos:start="2067:13" pos:end="2067:27">default_monitor</name></expr>)</condition><block type="pseudo" pos:start="2069:13" pos:end="2069:52"><block_content pos:start="2069:13" pos:end="2069:52">

            <expr_stmt pos:start="2069:13" pos:end="2069:52"><expr pos:start="2069:13" pos:end="2069:51"><call pos:start="2069:13" pos:end="2069:51"><name pos:start="2069:13" pos:end="2069:25">monitor_parse</name><argument_list pos:start="2069:26" pos:end="2069:51">(<argument pos:start="2069:27" pos:end="2069:38"><expr pos:start="2069:27" pos:end="2069:38"><literal type="string" pos:start="2069:27" pos:end="2069:38">"vc:80Cx24C"</literal></expr></argument>, <argument pos:start="2069:41" pos:end="2069:50"><expr pos:start="2069:41" pos:end="2069:50"><literal type="string" pos:start="2069:41" pos:end="2069:50">"readline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2071:9" pos:end="2073:57"><if pos:start="2071:9" pos:end="2073:57">if <condition pos:start="2071:12" pos:end="2071:28">(<expr pos:start="2071:13" pos:end="2071:27"><name pos:start="2071:13" pos:end="2071:27">default_virtcon</name></expr>)</condition><block type="pseudo" pos:start="2073:13" pos:end="2073:57"><block_content pos:start="2073:13" pos:end="2073:57">

            <expr_stmt pos:start="2073:13" pos:end="2073:57"><expr pos:start="2073:13" pos:end="2073:56"><call pos:start="2073:13" pos:end="2073:56"><name pos:start="2073:13" pos:end="2073:29">add_device_config</name><argument_list pos:start="2073:30" pos:end="2073:56">(<argument pos:start="2073:31" pos:end="2073:41"><expr pos:start="2073:31" pos:end="2073:41"><name pos:start="2073:31" pos:end="2073:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="2073:44" pos:end="2073:55"><expr pos:start="2073:44" pos:end="2073:55"><literal type="string" pos:start="2073:44" pos:end="2073:55">"vc:80Cx24C"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="2077:5" pos:end="2079:40"><if pos:start="2077:5" pos:end="2079:40">if <condition pos:start="2077:8" pos:end="2077:20">(<expr pos:start="2077:9" pos:end="2077:19"><name pos:start="2077:9" pos:end="2077:19">default_vga</name></expr>)</condition><block type="pseudo" pos:start="2079:9" pos:end="2079:40"><block_content pos:start="2079:9" pos:end="2079:40">

        <expr_stmt pos:start="2079:9" pos:end="2079:40"><expr pos:start="2079:9" pos:end="2079:39"><name pos:start="2079:9" pos:end="2079:26">vga_interface_type</name> <operator pos:start="2079:28" pos:end="2079:28">=</operator> <name pos:start="2079:30" pos:end="2079:39">VGA_CIRRUS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="2083:5" pos:end="2083:18"><expr pos:start="2083:5" pos:end="2083:17"><call pos:start="2083:5" pos:end="2083:17"><name pos:start="2083:5" pos:end="2083:15">socket_init</name><argument_list pos:start="2083:16" pos:end="2083:17">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2087:5" pos:end="2092:0"><if pos:start="2087:5" pos:end="2092:0">if <condition pos:start="2087:8" pos:end="2087:86">(<expr pos:start="2087:9" pos:end="2087:85"><call pos:start="2087:9" pos:end="2087:80"><name pos:start="2087:9" pos:end="2087:25">qemu_opts_foreach</name><argument_list pos:start="2087:26" pos:end="2087:80">(<argument pos:start="2087:27" pos:end="2087:51"><expr pos:start="2087:27" pos:end="2087:51"><call pos:start="2087:27" pos:end="2087:51"><name pos:start="2087:27" pos:end="2087:40">qemu_find_opts</name><argument_list pos:start="2087:41" pos:end="2087:51">(<argument pos:start="2087:42" pos:end="2087:50"><expr pos:start="2087:42" pos:end="2087:50"><literal type="string" pos:start="2087:42" pos:end="2087:50">"chardev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2087:54" pos:end="2087:70"><expr pos:start="2087:54" pos:end="2087:70"><name pos:start="2087:54" pos:end="2087:70">chardev_init_func</name></expr></argument>, <argument pos:start="2087:73" pos:end="2087:76"><expr pos:start="2087:73" pos:end="2087:76"><name pos:start="2087:73" pos:end="2087:76">NULL</name></expr></argument>, <argument pos:start="2087:79" pos:end="2087:79"><expr pos:start="2087:79" pos:end="2087:79"><literal type="number" pos:start="2087:79" pos:end="2087:79">1</literal></expr></argument>)</argument_list></call> <operator pos:start="2087:82" pos:end="2087:83">!=</operator> <literal type="number" pos:start="2087:85" pos:end="2087:85">0</literal></expr>)</condition><block type="pseudo" pos:start="2089:9" pos:end="2092:0"><block_content pos:start="2089:9" pos:end="2092:0">

        <expr_stmt pos:start="2089:9" pos:end="2092:0"><expr pos:start="2089:9" pos:end="2089:15"><call pos:start="2089:9" pos:end="2089:15"><name pos:start="2089:9" pos:end="2089:12">exit</name><argument_list pos:start="2089:13" pos:end="2089:15">(<argument pos:start="2089:14" pos:end="2089:14"><expr pos:start="2089:14" pos:end="2089:14"><literal type="number" pos:start="2089:14" pos:end="2089:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="2091:1" pos:end="2091:20">#<cpp:directive pos:start="2091:2" pos:end="2091:6">ifdef</cpp:directive> <name pos:start="2091:8" pos:end="2091:20">CONFIG_VIRTFS</name></cpp:ifdef>

    <if_stmt pos:start="2093:5" pos:end="2100:0"><if pos:start="2093:5" pos:end="2100:0">if <condition pos:start="2093:8" pos:end="2093:82">(<expr pos:start="2093:9" pos:end="2093:81"><call pos:start="2093:9" pos:end="2093:76"><name pos:start="2093:9" pos:end="2093:25">qemu_opts_foreach</name><argument_list pos:start="2093:26" pos:end="2093:76">(<argument pos:start="2093:27" pos:end="2093:49"><expr pos:start="2093:27" pos:end="2093:49"><call pos:start="2093:27" pos:end="2093:49"><name pos:start="2093:27" pos:end="2093:40">qemu_find_opts</name><argument_list pos:start="2093:41" pos:end="2093:49">(<argument pos:start="2093:42" pos:end="2093:48"><expr pos:start="2093:42" pos:end="2093:48"><literal type="string" pos:start="2093:42" pos:end="2093:48">"fsdev"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2093:52" pos:end="2093:66"><expr pos:start="2093:52" pos:end="2093:66"><name pos:start="2093:52" pos:end="2093:66">fsdev_init_func</name></expr></argument>, <argument pos:start="2093:69" pos:end="2093:72"><expr pos:start="2093:69" pos:end="2093:72"><name pos:start="2093:69" pos:end="2093:72">NULL</name></expr></argument>, <argument pos:start="2093:75" pos:end="2093:75"><expr pos:start="2093:75" pos:end="2093:75"><literal type="number" pos:start="2093:75" pos:end="2093:75">1</literal></expr></argument>)</argument_list></call> <operator pos:start="2093:78" pos:end="2093:79">!=</operator> <literal type="number" pos:start="2093:81" pos:end="2093:81">0</literal></expr>)</condition> <block pos:start="2093:84" pos:end="2100:0">{<block_content pos:start="2095:9" pos:end="2095:16">

        <expr_stmt pos:start="2095:9" pos:end="2095:16"><expr pos:start="2095:9" pos:end="2095:15"><call pos:start="2095:9" pos:end="2095:15"><name pos:start="2095:9" pos:end="2095:12">exit</name><argument_list pos:start="2095:13" pos:end="2095:15">(<argument pos:start="2095:14" pos:end="2095:14"><expr pos:start="2095:14" pos:end="2095:14"><literal type="number" pos:start="2095:14" pos:end="2095:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2099:1" pos:end="2099:6">#<cpp:directive pos:start="2099:2" pos:end="2099:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="2103:5" pos:end="2103:19"><expr pos:start="2103:5" pos:end="2103:18"><call pos:start="2103:5" pos:end="2103:18"><name pos:start="2103:5" pos:end="2103:16">os_daemonize</name><argument_list pos:start="2103:17" pos:end="2103:18">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2107:5" pos:end="2113:5"><if pos:start="2107:5" pos:end="2113:5">if <condition pos:start="2107:8" pos:end="2107:55">(<expr pos:start="2107:9" pos:end="2107:54"><name pos:start="2107:9" pos:end="2107:16">pid_file</name> <operator pos:start="2107:18" pos:end="2107:19">&amp;&amp;</operator> <call pos:start="2107:21" pos:end="2107:49"><name pos:start="2107:21" pos:end="2107:39">qemu_create_pidfile</name><argument_list pos:start="2107:40" pos:end="2107:49">(<argument pos:start="2107:41" pos:end="2107:48"><expr pos:start="2107:41" pos:end="2107:48"><name pos:start="2107:41" pos:end="2107:48">pid_file</name></expr></argument>)</argument_list></call> <operator pos:start="2107:51" pos:end="2107:52">!=</operator> <literal type="number" pos:start="2107:54" pos:end="2107:54">0</literal></expr>)</condition> <block pos:start="2107:57" pos:end="2113:5">{<block_content pos:start="2109:9" pos:end="2111:16">

        <expr_stmt pos:start="2109:9" pos:end="2109:27"><expr pos:start="2109:9" pos:end="2109:26"><call pos:start="2109:9" pos:end="2109:26"><name pos:start="2109:9" pos:end="2109:24">os_pidfile_error</name><argument_list pos:start="2109:25" pos:end="2109:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2111:9" pos:end="2111:16"><expr pos:start="2111:9" pos:end="2111:15"><call pos:start="2111:9" pos:end="2111:15"><name pos:start="2111:9" pos:end="2111:12">exit</name><argument_list pos:start="2111:13" pos:end="2111:15">(<argument pos:start="2111:14" pos:end="2111:14"><expr pos:start="2111:14" pos:end="2111:14"><literal type="number" pos:start="2111:14" pos:end="2111:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="2117:5" pos:end="2117:25">/* init the memory */</comment>

    <if_stmt pos:start="2119:5" pos:end="2123:5"><if pos:start="2119:5" pos:end="2123:5">if <condition pos:start="2119:8" pos:end="2119:22">(<expr pos:start="2119:9" pos:end="2119:21"><name pos:start="2119:9" pos:end="2119:16">ram_size</name> <operator pos:start="2119:18" pos:end="2119:19">==</operator> <literal type="number" pos:start="2119:21" pos:end="2119:21">0</literal></expr>)</condition> <block pos:start="2119:24" pos:end="2123:5">{<block_content pos:start="2121:9" pos:end="2121:50">

        <expr_stmt pos:start="2121:9" pos:end="2121:50"><expr pos:start="2121:9" pos:end="2121:49"><name pos:start="2121:9" pos:end="2121:16">ram_size</name> <operator pos:start="2121:18" pos:end="2121:18">=</operator> <name pos:start="2121:20" pos:end="2121:35">DEFAULT_RAM_SIZE</name> <operator pos:start="2121:37" pos:end="2121:37">*</operator> <literal type="number" pos:start="2121:39" pos:end="2121:42">1024</literal> <operator pos:start="2121:44" pos:end="2121:44">*</operator> <literal type="number" pos:start="2121:46" pos:end="2121:49">1024</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="2127:5" pos:end="2127:28"><expr pos:start="2127:5" pos:end="2127:27"><call pos:start="2127:5" pos:end="2127:27"><name pos:start="2127:5" pos:end="2127:25">configure_accelerator</name><argument_list pos:start="2127:26" pos:end="2127:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2131:5" pos:end="2131:25"><expr pos:start="2131:5" pos:end="2131:24"><call pos:start="2131:5" pos:end="2131:24"><name pos:start="2131:5" pos:end="2131:22">qemu_init_cpu_loop</name><argument_list pos:start="2131:23" pos:end="2131:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2133:5" pos:end="2139:5"><if pos:start="2133:5" pos:end="2139:5">if <condition pos:start="2133:8" pos:end="2133:30">(<expr pos:start="2133:9" pos:end="2133:29"><call pos:start="2133:9" pos:end="2133:29"><name pos:start="2133:9" pos:end="2133:27">qemu_init_main_loop</name><argument_list pos:start="2133:28" pos:end="2133:29">()</argument_list></call></expr>)</condition> <block pos:start="2133:32" pos:end="2139:5">{<block_content pos:start="2135:9" pos:end="2137:16">

        <expr_stmt pos:start="2135:9" pos:end="2135:56"><expr pos:start="2135:9" pos:end="2135:55"><call pos:start="2135:9" pos:end="2135:55"><name pos:start="2135:9" pos:end="2135:15">fprintf</name><argument_list pos:start="2135:16" pos:end="2135:55">(<argument pos:start="2135:17" pos:end="2135:22"><expr pos:start="2135:17" pos:end="2135:22"><name pos:start="2135:17" pos:end="2135:22">stderr</name></expr></argument>, <argument pos:start="2135:25" pos:end="2135:54"><expr pos:start="2135:25" pos:end="2135:54"><literal type="string" pos:start="2135:25" pos:end="2135:54">"qemu_init_main_loop failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2137:9" pos:end="2137:16"><expr pos:start="2137:9" pos:end="2137:15"><call pos:start="2137:9" pos:end="2137:15"><name pos:start="2137:9" pos:end="2137:12">exit</name><argument_list pos:start="2137:13" pos:end="2137:15">(<argument pos:start="2137:14" pos:end="2137:14"><expr pos:start="2137:14" pos:end="2137:14"><literal type="number" pos:start="2137:14" pos:end="2137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2141:5" pos:end="2141:43"><expr pos:start="2141:5" pos:end="2141:42"><name pos:start="2141:5" pos:end="2141:14">linux_boot</name> <operator pos:start="2141:16" pos:end="2141:16">=</operator> <operator pos:start="2141:18" pos:end="2141:18">(</operator><name pos:start="2141:19" pos:end="2141:33">kernel_filename</name> <operator pos:start="2141:35" pos:end="2141:36">!=</operator> <name pos:start="2141:38" pos:end="2141:41">NULL</name><operator pos:start="2141:42" pos:end="2141:42">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="2145:5" pos:end="2151:5"><if pos:start="2145:5" pos:end="2151:5">if <condition pos:start="2145:8" pos:end="2145:47">(<expr pos:start="2145:9" pos:end="2145:46"><operator pos:start="2145:9" pos:end="2145:9">!</operator><name pos:start="2145:10" pos:end="2145:19">linux_boot</name> <operator pos:start="2145:21" pos:end="2145:22">&amp;&amp;</operator> <operator pos:start="2145:24" pos:end="2145:24">*</operator><name pos:start="2145:25" pos:end="2145:38">kernel_cmdline</name> <operator pos:start="2145:40" pos:end="2145:41">!=</operator> <literal type="char" pos:start="2145:43" pos:end="2145:46">'\0'</literal></expr>)</condition> <block pos:start="2145:49" pos:end="2151:5">{<block_content pos:start="2147:9" pos:end="2149:16">

        <expr_stmt pos:start="2147:9" pos:end="2147:70"><expr pos:start="2147:9" pos:end="2147:69"><call pos:start="2147:9" pos:end="2147:69"><name pos:start="2147:9" pos:end="2147:15">fprintf</name><argument_list pos:start="2147:16" pos:end="2147:69">(<argument pos:start="2147:17" pos:end="2147:22"><expr pos:start="2147:17" pos:end="2147:22"><name pos:start="2147:17" pos:end="2147:22">stderr</name></expr></argument>, <argument pos:start="2147:25" pos:end="2147:68"><expr pos:start="2147:25" pos:end="2147:68"><literal type="string" pos:start="2147:25" pos:end="2147:68">"-append only allowed with -kernel option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2149:9" pos:end="2149:16"><expr pos:start="2149:9" pos:end="2149:15"><call pos:start="2149:9" pos:end="2149:15"><name pos:start="2149:9" pos:end="2149:12">exit</name><argument_list pos:start="2149:13" pos:end="2149:15">(<argument pos:start="2149:14" pos:end="2149:14"><expr pos:start="2149:14" pos:end="2149:14"><literal type="number" pos:start="2149:14" pos:end="2149:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2155:5" pos:end="2161:5"><if pos:start="2155:5" pos:end="2161:5">if <condition pos:start="2155:8" pos:end="2155:47">(<expr pos:start="2155:9" pos:end="2155:46"><operator pos:start="2155:9" pos:end="2155:9">!</operator><name pos:start="2155:10" pos:end="2155:19">linux_boot</name> <operator pos:start="2155:21" pos:end="2155:22">&amp;&amp;</operator> <name pos:start="2155:24" pos:end="2155:38">initrd_filename</name> <operator pos:start="2155:40" pos:end="2155:41">!=</operator> <name pos:start="2155:43" pos:end="2155:46">NULL</name></expr>)</condition> <block pos:start="2155:49" pos:end="2161:5">{<block_content pos:start="2157:9" pos:end="2159:16">

        <expr_stmt pos:start="2157:9" pos:end="2157:70"><expr pos:start="2157:9" pos:end="2157:69"><call pos:start="2157:9" pos:end="2157:69"><name pos:start="2157:9" pos:end="2157:15">fprintf</name><argument_list pos:start="2157:16" pos:end="2157:69">(<argument pos:start="2157:17" pos:end="2157:22"><expr pos:start="2157:17" pos:end="2157:22"><name pos:start="2157:17" pos:end="2157:22">stderr</name></expr></argument>, <argument pos:start="2157:25" pos:end="2157:68"><expr pos:start="2157:25" pos:end="2157:68"><literal type="string" pos:start="2157:25" pos:end="2157:68">"-initrd only allowed with -kernel option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2159:9" pos:end="2159:16"><expr pos:start="2159:9" pos:end="2159:15"><call pos:start="2159:9" pos:end="2159:15"><name pos:start="2159:9" pos:end="2159:12">exit</name><argument_list pos:start="2159:13" pos:end="2159:15">(<argument pos:start="2159:14" pos:end="2159:14"><expr pos:start="2159:14" pos:end="2159:14"><literal type="number" pos:start="2159:14" pos:end="2159:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="2165:5" pos:end="2165:28"><expr pos:start="2165:5" pos:end="2165:27"><call pos:start="2165:5" pos:end="2165:27"><name pos:start="2165:5" pos:end="2165:25">os_set_line_buffering</name><argument_list pos:start="2165:26" pos:end="2165:27">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2169:5" pos:end="2175:5"><if pos:start="2169:5" pos:end="2175:5">if <condition pos:start="2169:8" pos:end="2169:31">(<expr pos:start="2169:9" pos:end="2169:30"><call pos:start="2169:9" pos:end="2169:26"><name pos:start="2169:9" pos:end="2169:24">init_timer_alarm</name><argument_list pos:start="2169:25" pos:end="2169:26">()</argument_list></call> <operator pos:start="2169:28" pos:end="2169:28">&lt;</operator> <literal type="number" pos:start="2169:30" pos:end="2169:30">0</literal></expr>)</condition> <block pos:start="2169:33" pos:end="2175:5">{<block_content pos:start="2171:9" pos:end="2173:16">

        <expr_stmt pos:start="2171:9" pos:end="2171:62"><expr pos:start="2171:9" pos:end="2171:61"><call pos:start="2171:9" pos:end="2171:61"><name pos:start="2171:9" pos:end="2171:15">fprintf</name><argument_list pos:start="2171:16" pos:end="2171:61">(<argument pos:start="2171:17" pos:end="2171:22"><expr pos:start="2171:17" pos:end="2171:22"><name pos:start="2171:17" pos:end="2171:22">stderr</name></expr></argument>, <argument pos:start="2171:25" pos:end="2171:60"><expr pos:start="2171:25" pos:end="2171:60"><literal type="string" pos:start="2171:25" pos:end="2171:60">"could not initialize alarm timer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2173:9" pos:end="2173:16"><expr pos:start="2173:9" pos:end="2173:15"><call pos:start="2173:9" pos:end="2173:15"><name pos:start="2173:9" pos:end="2173:12">exit</name><argument_list pos:start="2173:13" pos:end="2173:15">(<argument pos:start="2173:14" pos:end="2173:14"><expr pos:start="2173:14" pos:end="2173:14"><literal type="number" pos:start="2173:14" pos:end="2173:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2179:5" pos:end="2185:5"><if pos:start="2179:5" pos:end="2185:5">if <condition pos:start="2179:8" pos:end="2179:58">(<expr pos:start="2179:9" pos:end="2179:57"><name pos:start="2179:9" pos:end="2179:21">icount_option</name> <operator pos:start="2179:23" pos:end="2179:24">&amp;&amp;</operator> <operator pos:start="2179:26" pos:end="2179:26">(</operator><call pos:start="2179:27" pos:end="2179:39"><name pos:start="2179:27" pos:end="2179:37">kvm_enabled</name><argument_list pos:start="2179:38" pos:end="2179:39">()</argument_list></call> <operator pos:start="2179:41" pos:end="2179:42">||</operator> <call pos:start="2179:44" pos:end="2179:56"><name pos:start="2179:44" pos:end="2179:54">xen_enabled</name><argument_list pos:start="2179:55" pos:end="2179:56">()</argument_list></call><operator pos:start="2179:57" pos:end="2179:57">)</operator></expr>)</condition> <block pos:start="2179:60" pos:end="2185:5">{<block_content pos:start="2181:9" pos:end="2183:16">

        <expr_stmt pos:start="2181:9" pos:end="2181:68"><expr pos:start="2181:9" pos:end="2181:67"><call pos:start="2181:9" pos:end="2181:67"><name pos:start="2181:9" pos:end="2181:15">fprintf</name><argument_list pos:start="2181:16" pos:end="2181:67">(<argument pos:start="2181:17" pos:end="2181:22"><expr pos:start="2181:17" pos:end="2181:22"><name pos:start="2181:17" pos:end="2181:22">stderr</name></expr></argument>, <argument pos:start="2181:25" pos:end="2181:66"><expr pos:start="2181:25" pos:end="2181:66"><literal type="string" pos:start="2181:25" pos:end="2181:66">"-icount is not allowed with kvm or xen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2183:9" pos:end="2183:16"><expr pos:start="2183:9" pos:end="2183:15"><call pos:start="2183:9" pos:end="2183:15"><name pos:start="2183:9" pos:end="2183:12">exit</name><argument_list pos:start="2183:13" pos:end="2183:15">(<argument pos:start="2183:14" pos:end="2183:14"><expr pos:start="2183:14" pos:end="2183:14"><literal type="number" pos:start="2183:14" pos:end="2183:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2187:5" pos:end="2187:36"><expr pos:start="2187:5" pos:end="2187:35"><call pos:start="2187:5" pos:end="2187:35"><name pos:start="2187:5" pos:end="2187:20">configure_icount</name><argument_list pos:start="2187:21" pos:end="2187:35">(<argument pos:start="2187:22" pos:end="2187:34"><expr pos:start="2187:22" pos:end="2187:34"><name pos:start="2187:22" pos:end="2187:34">icount_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2191:5" pos:end="2195:5"><if pos:start="2191:5" pos:end="2195:5">if <condition pos:start="2191:8" pos:end="2191:31">(<expr pos:start="2191:9" pos:end="2191:30"><call pos:start="2191:9" pos:end="2191:26"><name pos:start="2191:9" pos:end="2191:24">net_init_clients</name><argument_list pos:start="2191:25" pos:end="2191:26">()</argument_list></call> <operator pos:start="2191:28" pos:end="2191:28">&lt;</operator> <literal type="number" pos:start="2191:30" pos:end="2191:30">0</literal></expr>)</condition> <block pos:start="2191:33" pos:end="2195:5">{<block_content pos:start="2193:9" pos:end="2193:16">

        <expr_stmt pos:start="2193:9" pos:end="2193:16"><expr pos:start="2193:9" pos:end="2193:15"><call pos:start="2193:9" pos:end="2193:15"><name pos:start="2193:9" pos:end="2193:12">exit</name><argument_list pos:start="2193:13" pos:end="2193:15">(<argument pos:start="2193:14" pos:end="2193:14"><expr pos:start="2193:14" pos:end="2193:14"><literal type="number" pos:start="2193:14" pos:end="2193:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="2199:5" pos:end="2199:34">/* init the bluetooth world */</comment>

    <if_stmt pos:start="2201:5" pos:end="2203:16"><if pos:start="2201:5" pos:end="2203:16">if <condition pos:start="2201:8" pos:end="2201:48">(<expr pos:start="2201:9" pos:end="2201:47"><call pos:start="2201:9" pos:end="2201:47"><name pos:start="2201:9" pos:end="2201:29">foreach_device_config</name><argument_list pos:start="2201:30" pos:end="2201:47">(<argument pos:start="2201:31" pos:end="2201:36"><expr pos:start="2201:31" pos:end="2201:36"><name pos:start="2201:31" pos:end="2201:36">DEV_BT</name></expr></argument>, <argument pos:start="2201:39" pos:end="2201:46"><expr pos:start="2201:39" pos:end="2201:46"><name pos:start="2201:39" pos:end="2201:46">bt_parse</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2203:9" pos:end="2203:16"><block_content pos:start="2203:9" pos:end="2203:16">

        <expr_stmt pos:start="2203:9" pos:end="2203:16"><expr pos:start="2203:9" pos:end="2203:15"><call pos:start="2203:9" pos:end="2203:15"><name pos:start="2203:9" pos:end="2203:12">exit</name><argument_list pos:start="2203:13" pos:end="2203:15">(<argument pos:start="2203:14" pos:end="2203:14"><expr pos:start="2203:14" pos:end="2203:14"><literal type="number" pos:start="2203:14" pos:end="2203:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="2207:5" pos:end="2219:5"><if pos:start="2207:5" pos:end="2219:5">if <condition pos:start="2207:8" pos:end="2207:23">(<expr pos:start="2207:9" pos:end="2207:22"><operator pos:start="2207:9" pos:end="2207:9">!</operator><call pos:start="2207:10" pos:end="2207:22"><name pos:start="2207:10" pos:end="2207:20">xen_enabled</name><argument_list pos:start="2207:21" pos:end="2207:22">()</argument_list></call></expr>)</condition> <block pos:start="2207:25" pos:end="2219:5">{<block_content pos:start="2211:9" pos:end="2217:9">

        <comment type="block" pos:start="2209:9" pos:end="2209:71">/* On 32-bit hosts, QEMU is limited by virtual address space */</comment>

        <if_stmt pos:start="2211:9" pos:end="2217:9"><if pos:start="2211:9" pos:end="2217:9">if <condition pos:start="2211:12" pos:end="2211:60">(<expr pos:start="2211:13" pos:end="2211:59"><name pos:start="2211:13" pos:end="2211:20">ram_size</name> <operator pos:start="2211:22" pos:end="2211:22">&gt;</operator> <operator pos:start="2211:24" pos:end="2211:24">(</operator><literal type="number" pos:start="2211:25" pos:end="2211:28">2047</literal> <operator pos:start="2211:30" pos:end="2211:31">&lt;&lt;</operator> <literal type="number" pos:start="2211:33" pos:end="2211:34">20</literal><operator pos:start="2211:35" pos:end="2211:35">)</operator> <operator pos:start="2211:37" pos:end="2211:38">&amp;&amp;</operator> <name pos:start="2211:40" pos:end="2211:53">HOST_LONG_BITS</name> <operator pos:start="2211:55" pos:end="2211:56">==</operator> <literal type="number" pos:start="2211:58" pos:end="2211:59">32</literal></expr>)</condition> <block pos:start="2211:62" pos:end="2217:9">{<block_content pos:start="2213:13" pos:end="2215:20">

            <expr_stmt pos:start="2213:13" pos:end="2213:76"><expr pos:start="2213:13" pos:end="2213:75"><call pos:start="2213:13" pos:end="2213:75"><name pos:start="2213:13" pos:end="2213:19">fprintf</name><argument_list pos:start="2213:20" pos:end="2213:75">(<argument pos:start="2213:21" pos:end="2213:26"><expr pos:start="2213:21" pos:end="2213:26"><name pos:start="2213:21" pos:end="2213:26">stderr</name></expr></argument>, <argument pos:start="2213:29" pos:end="2213:74"><expr pos:start="2213:29" pos:end="2213:74"><literal type="string" pos:start="2213:29" pos:end="2213:74">"qemu: at most 2047 MB RAM can be simulated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2215:13" pos:end="2215:20"><expr pos:start="2215:13" pos:end="2215:19"><call pos:start="2215:13" pos:end="2215:19"><name pos:start="2215:13" pos:end="2215:16">exit</name><argument_list pos:start="2215:17" pos:end="2215:19">(<argument pos:start="2215:18" pos:end="2215:18"><expr pos:start="2215:18" pos:end="2215:18"><literal type="number" pos:start="2215:18" pos:end="2215:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="2223:5" pos:end="2223:24"><expr pos:start="2223:5" pos:end="2223:23"><call pos:start="2223:5" pos:end="2223:23"><name pos:start="2223:5" pos:end="2223:21">cpu_exec_init_all</name><argument_list pos:start="2223:22" pos:end="2223:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2227:5" pos:end="2227:31"><expr pos:start="2227:5" pos:end="2227:30"><call pos:start="2227:5" pos:end="2227:30"><name pos:start="2227:5" pos:end="2227:28">bdrv_init_with_whitelist</name><argument_list pos:start="2227:29" pos:end="2227:30">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2231:5" pos:end="2231:19"><expr pos:start="2231:5" pos:end="2231:18"><call pos:start="2231:5" pos:end="2231:18"><name pos:start="2231:5" pos:end="2231:16">blk_mig_init</name><argument_list pos:start="2231:17" pos:end="2231:18">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="2235:5" pos:end="2235:40">/* open the virtual block devices */</comment>

    <if_stmt pos:start="2237:5" pos:end="2239:83"><if pos:start="2237:5" pos:end="2239:83">if <condition pos:start="2237:8" pos:end="2237:17">(<expr pos:start="2237:9" pos:end="2237:16"><name pos:start="2237:9" pos:end="2237:16">snapshot</name></expr>)</condition><block type="pseudo" pos:start="2239:9" pos:end="2239:83"><block_content pos:start="2239:9" pos:end="2239:83">

        <expr_stmt pos:start="2239:9" pos:end="2239:83"><expr pos:start="2239:9" pos:end="2239:82"><call pos:start="2239:9" pos:end="2239:82"><name pos:start="2239:9" pos:end="2239:25">qemu_opts_foreach</name><argument_list pos:start="2239:26" pos:end="2239:82">(<argument pos:start="2239:27" pos:end="2239:49"><expr pos:start="2239:27" pos:end="2239:49"><call pos:start="2239:27" pos:end="2239:49"><name pos:start="2239:27" pos:end="2239:40">qemu_find_opts</name><argument_list pos:start="2239:41" pos:end="2239:49">(<argument pos:start="2239:42" pos:end="2239:48"><expr pos:start="2239:42" pos:end="2239:48"><literal type="string" pos:start="2239:42" pos:end="2239:48">"drive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2239:52" pos:end="2239:72"><expr pos:start="2239:52" pos:end="2239:72"><name pos:start="2239:52" pos:end="2239:72">drive_enable_snapshot</name></expr></argument>, <argument pos:start="2239:75" pos:end="2239:78"><expr pos:start="2239:75" pos:end="2239:78"><name pos:start="2239:75" pos:end="2239:78">NULL</name></expr></argument>, <argument pos:start="2239:81" pos:end="2239:81"><expr pos:start="2239:81" pos:end="2239:81"><literal type="number" pos:start="2239:81" pos:end="2239:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="2241:5" pos:end="2243:16"><if pos:start="2241:5" pos:end="2243:16">if <condition pos:start="2241:8" pos:end="2241:96">(<expr pos:start="2241:9" pos:end="2241:95"><call pos:start="2241:9" pos:end="2241:90"><name pos:start="2241:9" pos:end="2241:25">qemu_opts_foreach</name><argument_list pos:start="2241:26" pos:end="2241:90">(<argument pos:start="2241:27" pos:end="2241:49"><expr pos:start="2241:27" pos:end="2241:49"><call pos:start="2241:27" pos:end="2241:49"><name pos:start="2241:27" pos:end="2241:40">qemu_find_opts</name><argument_list pos:start="2241:41" pos:end="2241:49">(<argument pos:start="2241:42" pos:end="2241:48"><expr pos:start="2241:42" pos:end="2241:48"><literal type="string" pos:start="2241:42" pos:end="2241:48">"drive"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2241:52" pos:end="2241:66"><expr pos:start="2241:52" pos:end="2241:66"><name pos:start="2241:52" pos:end="2241:66">drive_init_func</name></expr></argument>, <argument pos:start="2241:69" pos:end="2241:86"><expr pos:start="2241:69" pos:end="2241:86"><operator pos:start="2241:69" pos:end="2241:69">&amp;</operator><name pos:start="2241:70" pos:end="2241:86"><name pos:start="2241:70" pos:end="2241:76">machine</name><operator pos:start="2241:77" pos:end="2241:78">-&gt;</operator><name pos:start="2241:79" pos:end="2241:86">use_scsi</name></name></expr></argument>, <argument pos:start="2241:89" pos:end="2241:89"><expr pos:start="2241:89" pos:end="2241:89"><literal type="number" pos:start="2241:89" pos:end="2241:89">1</literal></expr></argument>)</argument_list></call> <operator pos:start="2241:92" pos:end="2241:93">!=</operator> <literal type="number" pos:start="2241:95" pos:end="2241:95">0</literal></expr>)</condition><block type="pseudo" pos:start="2243:9" pos:end="2243:16"><block_content pos:start="2243:9" pos:end="2243:16">

        <expr_stmt pos:start="2243:9" pos:end="2243:16"><expr pos:start="2243:9" pos:end="2243:15"><call pos:start="2243:9" pos:end="2243:15"><name pos:start="2243:9" pos:end="2243:12">exit</name><argument_list pos:start="2243:13" pos:end="2243:15">(<argument pos:start="2243:14" pos:end="2243:14"><expr pos:start="2243:14" pos:end="2243:14"><literal type="number" pos:start="2243:14" pos:end="2243:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="2247:5" pos:end="2249:45"><expr pos:start="2247:5" pos:end="2249:44"><call pos:start="2247:5" pos:end="2249:44"><name pos:start="2247:5" pos:end="2247:17">default_drive</name><argument_list pos:start="2247:18" pos:end="2249:44">(<argument pos:start="2247:19" pos:end="2247:31"><expr pos:start="2247:19" pos:end="2247:31"><name pos:start="2247:19" pos:end="2247:31">default_cdrom</name></expr></argument>, <argument pos:start="2247:34" pos:end="2247:41"><expr pos:start="2247:34" pos:end="2247:41"><name pos:start="2247:34" pos:end="2247:41">snapshot</name></expr></argument>, <argument pos:start="2247:44" pos:end="2247:60"><expr pos:start="2247:44" pos:end="2247:60"><name pos:start="2247:44" pos:end="2247:60"><name pos:start="2247:44" pos:end="2247:50">machine</name><operator pos:start="2247:51" pos:end="2247:52">-&gt;</operator><name pos:start="2247:53" pos:end="2247:60">use_scsi</name></name></expr></argument>,

                  <argument pos:start="2249:19" pos:end="2249:28"><expr pos:start="2249:19" pos:end="2249:28"><name pos:start="2249:19" pos:end="2249:28">IF_DEFAULT</name></expr></argument>, <argument pos:start="2249:31" pos:end="2249:31"><expr pos:start="2249:31" pos:end="2249:31"><literal type="number" pos:start="2249:31" pos:end="2249:31">2</literal></expr></argument>, <argument pos:start="2249:34" pos:end="2249:43"><expr pos:start="2249:34" pos:end="2249:43"><name pos:start="2249:34" pos:end="2249:43">CDROM_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2251:5" pos:end="2253:41"><expr pos:start="2251:5" pos:end="2253:40"><call pos:start="2251:5" pos:end="2253:40"><name pos:start="2251:5" pos:end="2251:17">default_drive</name><argument_list pos:start="2251:18" pos:end="2253:40">(<argument pos:start="2251:19" pos:end="2251:32"><expr pos:start="2251:19" pos:end="2251:32"><name pos:start="2251:19" pos:end="2251:32">default_floppy</name></expr></argument>, <argument pos:start="2251:35" pos:end="2251:42"><expr pos:start="2251:35" pos:end="2251:42"><name pos:start="2251:35" pos:end="2251:42">snapshot</name></expr></argument>, <argument pos:start="2251:45" pos:end="2251:61"><expr pos:start="2251:45" pos:end="2251:61"><name pos:start="2251:45" pos:end="2251:61"><name pos:start="2251:45" pos:end="2251:51">machine</name><operator pos:start="2251:52" pos:end="2251:53">-&gt;</operator><name pos:start="2251:54" pos:end="2251:61">use_scsi</name></name></expr></argument>,

                  <argument pos:start="2253:19" pos:end="2253:27"><expr pos:start="2253:19" pos:end="2253:27"><name pos:start="2253:19" pos:end="2253:27">IF_FLOPPY</name></expr></argument>, <argument pos:start="2253:30" pos:end="2253:30"><expr pos:start="2253:30" pos:end="2253:30"><literal type="number" pos:start="2253:30" pos:end="2253:30">0</literal></expr></argument>, <argument pos:start="2253:33" pos:end="2253:39"><expr pos:start="2253:33" pos:end="2253:39"><name pos:start="2253:33" pos:end="2253:39">FD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2255:5" pos:end="2257:37"><expr pos:start="2255:5" pos:end="2257:36"><call pos:start="2255:5" pos:end="2257:36"><name pos:start="2255:5" pos:end="2255:17">default_drive</name><argument_list pos:start="2255:18" pos:end="2257:36">(<argument pos:start="2255:19" pos:end="2255:32"><expr pos:start="2255:19" pos:end="2255:32"><name pos:start="2255:19" pos:end="2255:32">default_sdcard</name></expr></argument>, <argument pos:start="2255:35" pos:end="2255:42"><expr pos:start="2255:35" pos:end="2255:42"><name pos:start="2255:35" pos:end="2255:42">snapshot</name></expr></argument>, <argument pos:start="2255:45" pos:end="2255:61"><expr pos:start="2255:45" pos:end="2255:61"><name pos:start="2255:45" pos:end="2255:61"><name pos:start="2255:45" pos:end="2255:51">machine</name><operator pos:start="2255:52" pos:end="2255:53">-&gt;</operator><name pos:start="2255:54" pos:end="2255:61">use_scsi</name></name></expr></argument>,

                  <argument pos:start="2257:19" pos:end="2257:23"><expr pos:start="2257:19" pos:end="2257:23"><name pos:start="2257:19" pos:end="2257:23">IF_SD</name></expr></argument>, <argument pos:start="2257:26" pos:end="2257:26"><expr pos:start="2257:26" pos:end="2257:26"><literal type="number" pos:start="2257:26" pos:end="2257:26">0</literal></expr></argument>, <argument pos:start="2257:29" pos:end="2257:35"><expr pos:start="2257:29" pos:end="2257:35"><name pos:start="2257:29" pos:end="2257:35">SD_OPTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2261:5" pos:end="2263:41"><expr pos:start="2261:5" pos:end="2263:40"><call pos:start="2261:5" pos:end="2263:40"><name pos:start="2261:5" pos:end="2261:24">register_savevm_live</name><argument_list pos:start="2261:25" pos:end="2263:40">(<argument pos:start="2261:26" pos:end="2261:29"><expr pos:start="2261:26" pos:end="2261:29"><name pos:start="2261:26" pos:end="2261:29">NULL</name></expr></argument>, <argument pos:start="2261:32" pos:end="2261:36"><expr pos:start="2261:32" pos:end="2261:36"><literal type="string" pos:start="2261:32" pos:end="2261:36">"ram"</literal></expr></argument>, <argument pos:start="2261:39" pos:end="2261:39"><expr pos:start="2261:39" pos:end="2261:39"><literal type="number" pos:start="2261:39" pos:end="2261:39">0</literal></expr></argument>, <argument pos:start="2261:42" pos:end="2261:42"><expr pos:start="2261:42" pos:end="2261:42"><literal type="number" pos:start="2261:42" pos:end="2261:42">4</literal></expr></argument>, <argument pos:start="2261:45" pos:end="2261:48"><expr pos:start="2261:45" pos:end="2261:48"><name pos:start="2261:45" pos:end="2261:48">NULL</name></expr></argument>, <argument pos:start="2261:51" pos:end="2261:63"><expr pos:start="2261:51" pos:end="2261:63"><name pos:start="2261:51" pos:end="2261:63">ram_save_live</name></expr></argument>, <argument pos:start="2261:66" pos:end="2261:69"><expr pos:start="2261:66" pos:end="2261:69"><name pos:start="2261:66" pos:end="2261:69">NULL</name></expr></argument>,

                         <argument pos:start="2263:26" pos:end="2263:33"><expr pos:start="2263:26" pos:end="2263:33"><name pos:start="2263:26" pos:end="2263:33">ram_load</name></expr></argument>, <argument pos:start="2263:36" pos:end="2263:39"><expr pos:start="2263:36" pos:end="2263:39"><name pos:start="2263:36" pos:end="2263:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2267:5" pos:end="2347:5"><if pos:start="2267:5" pos:end="2347:5">if <condition pos:start="2267:8" pos:end="2267:26">(<expr pos:start="2267:9" pos:end="2267:25"><name pos:start="2267:9" pos:end="2267:21">nb_numa_nodes</name> <operator pos:start="2267:23" pos:end="2267:23">&gt;</operator> <literal type="number" pos:start="2267:25" pos:end="2267:25">0</literal></expr>)</condition> <block pos:start="2267:28" pos:end="2347:5">{<block_content pos:start="2269:9" pos:end="2345:9">

        <decl_stmt pos:start="2269:9" pos:end="2269:14"><decl pos:start="2269:9" pos:end="2269:13"><type pos:start="2269:9" pos:end="2269:11"><name pos:start="2269:9" pos:end="2269:11">int</name></type> <name pos:start="2269:13" pos:end="2269:13">i</name></decl>;</decl_stmt>



        <if_stmt pos:start="2273:9" pos:end="2277:9"><if pos:start="2273:9" pos:end="2277:9">if <condition pos:start="2273:12" pos:end="2273:38">(<expr pos:start="2273:13" pos:end="2273:37"><name pos:start="2273:13" pos:end="2273:25">nb_numa_nodes</name> <operator pos:start="2273:27" pos:end="2273:27">&gt;</operator> <name pos:start="2273:29" pos:end="2273:37">MAX_NODES</name></expr>)</condition> <block pos:start="2273:40" pos:end="2277:9">{<block_content pos:start="2275:13" pos:end="2275:38">

            <expr_stmt pos:start="2275:13" pos:end="2275:38"><expr pos:start="2275:13" pos:end="2275:37"><name pos:start="2275:13" pos:end="2275:25">nb_numa_nodes</name> <operator pos:start="2275:27" pos:end="2275:27">=</operator> <name pos:start="2275:29" pos:end="2275:37">MAX_NODES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="2281:9" pos:end="2285:11">/* If no memory size if given for any node, assume the default case

         * and distribute the available memory equally across all nodes

         */</comment>

        <for pos:start="2287:9" pos:end="2293:9">for <control pos:start="2287:13" pos:end="2287:43">(<init pos:start="2287:14" pos:end="2287:19"><expr pos:start="2287:14" pos:end="2287:18"><name pos:start="2287:14" pos:end="2287:14">i</name> <operator pos:start="2287:16" pos:end="2287:16">=</operator> <literal type="number" pos:start="2287:18" pos:end="2287:18">0</literal></expr>;</init> <condition pos:start="2287:21" pos:end="2287:38"><expr pos:start="2287:21" pos:end="2287:37"><name pos:start="2287:21" pos:end="2287:21">i</name> <operator pos:start="2287:23" pos:end="2287:23">&lt;</operator> <name pos:start="2287:25" pos:end="2287:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="2287:40" pos:end="2287:42"><expr pos:start="2287:40" pos:end="2287:42"><name pos:start="2287:40" pos:end="2287:40">i</name><operator pos:start="2287:41" pos:end="2287:42">++</operator></expr></incr>)</control> <block pos:start="2287:45" pos:end="2293:9">{<block_content pos:start="2289:13" pos:end="2291:22">

            <if_stmt pos:start="2289:13" pos:end="2291:22"><if pos:start="2289:13" pos:end="2291:22">if <condition pos:start="2289:16" pos:end="2289:33">(<expr pos:start="2289:17" pos:end="2289:32"><name pos:start="2289:17" pos:end="2289:27"><name pos:start="2289:17" pos:end="2289:24">node_mem</name><index pos:start="2289:25" pos:end="2289:27">[<expr pos:start="2289:26" pos:end="2289:26"><name pos:start="2289:26" pos:end="2289:26">i</name></expr>]</index></name> <operator pos:start="2289:29" pos:end="2289:30">!=</operator> <literal type="number" pos:start="2289:32" pos:end="2289:32">0</literal></expr>)</condition><block type="pseudo" pos:start="2291:17" pos:end="2291:22"><block_content pos:start="2291:17" pos:end="2291:22">

                <break pos:start="2291:17" pos:end="2291:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="2295:9" pos:end="2317:9"><if pos:start="2295:9" pos:end="2317:9">if <condition pos:start="2295:12" pos:end="2295:31">(<expr pos:start="2295:13" pos:end="2295:30"><name pos:start="2295:13" pos:end="2295:13">i</name> <operator pos:start="2295:15" pos:end="2295:16">==</operator> <name pos:start="2295:18" pos:end="2295:30">nb_numa_nodes</name></expr>)</condition> <block pos:start="2295:33" pos:end="2317:9">{<block_content pos:start="2297:13" pos:end="2315:45">

            <decl_stmt pos:start="2297:13" pos:end="2297:33"><decl pos:start="2297:13" pos:end="2297:32"><type pos:start="2297:13" pos:end="2297:20"><name pos:start="2297:13" pos:end="2297:20">uint64_t</name></type> <name pos:start="2297:22" pos:end="2297:28">usedmem</name> <init pos:start="2297:30" pos:end="2297:32">= <expr pos:start="2297:32" pos:end="2297:32"><literal type="number" pos:start="2297:32" pos:end="2297:32">0</literal></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="2301:13" pos:end="2305:15">/* On Linux, the each node's border has to be 8MB aligned,

             * the final node gets the rest.

             */</comment>

            <for pos:start="2307:13" pos:end="2313:13">for <control pos:start="2307:17" pos:end="2307:51">(<init pos:start="2307:18" pos:end="2307:23"><expr pos:start="2307:18" pos:end="2307:22"><name pos:start="2307:18" pos:end="2307:18">i</name> <operator pos:start="2307:20" pos:end="2307:20">=</operator> <literal type="number" pos:start="2307:22" pos:end="2307:22">0</literal></expr>;</init> <condition pos:start="2307:25" pos:end="2307:46"><expr pos:start="2307:25" pos:end="2307:45"><name pos:start="2307:25" pos:end="2307:25">i</name> <operator pos:start="2307:27" pos:end="2307:27">&lt;</operator> <name pos:start="2307:29" pos:end="2307:41">nb_numa_nodes</name> <operator pos:start="2307:43" pos:end="2307:43">-</operator> <literal type="number" pos:start="2307:45" pos:end="2307:45">1</literal></expr>;</condition> <incr pos:start="2307:48" pos:end="2307:50"><expr pos:start="2307:48" pos:end="2307:50"><name pos:start="2307:48" pos:end="2307:48">i</name><operator pos:start="2307:49" pos:end="2307:50">++</operator></expr></incr>)</control> <block pos:start="2307:53" pos:end="2313:13">{<block_content pos:start="2309:17" pos:end="2311:39">

                <expr_stmt pos:start="2309:17" pos:end="2309:78"><expr pos:start="2309:17" pos:end="2309:77"><name pos:start="2309:17" pos:end="2309:27"><name pos:start="2309:17" pos:end="2309:24">node_mem</name><index pos:start="2309:25" pos:end="2309:27">[<expr pos:start="2309:26" pos:end="2309:26"><name pos:start="2309:26" pos:end="2309:26">i</name></expr>]</index></name> <operator pos:start="2309:29" pos:end="2309:29">=</operator> <operator pos:start="2309:31" pos:end="2309:31">(</operator><name pos:start="2309:32" pos:end="2309:39">ram_size</name> <operator pos:start="2309:41" pos:end="2309:41">/</operator> <name pos:start="2309:43" pos:end="2309:55">nb_numa_nodes</name><operator pos:start="2309:56" pos:end="2309:56">)</operator> <operator pos:start="2309:58" pos:end="2309:58">&amp;</operator> <operator pos:start="2309:60" pos:end="2309:60">~</operator><operator pos:start="2309:61" pos:end="2309:61">(</operator><operator pos:start="2309:62" pos:end="2309:62">(</operator><literal type="number" pos:start="2309:63" pos:end="2309:63">1</literal> <operator pos:start="2309:65" pos:end="2309:66">&lt;&lt;</operator> <literal type="number" pos:start="2309:68" pos:end="2309:71">23UL</literal><operator pos:start="2309:72" pos:end="2309:72">)</operator> <operator pos:start="2309:74" pos:end="2309:74">-</operator> <literal type="number" pos:start="2309:76" pos:end="2309:76">1</literal><operator pos:start="2309:77" pos:end="2309:77">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2311:17" pos:end="2311:39"><expr pos:start="2311:17" pos:end="2311:38"><name pos:start="2311:17" pos:end="2311:23">usedmem</name> <operator pos:start="2311:25" pos:end="2311:26">+=</operator> <name pos:start="2311:28" pos:end="2311:38"><name pos:start="2311:28" pos:end="2311:35">node_mem</name><index pos:start="2311:36" pos:end="2311:38">[<expr pos:start="2311:37" pos:end="2311:37"><name pos:start="2311:37" pos:end="2311:37">i</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="2315:13" pos:end="2315:45"><expr pos:start="2315:13" pos:end="2315:44"><name pos:start="2315:13" pos:end="2315:23"><name pos:start="2315:13" pos:end="2315:20">node_mem</name><index pos:start="2315:21" pos:end="2315:23">[<expr pos:start="2315:22" pos:end="2315:22"><name pos:start="2315:22" pos:end="2315:22">i</name></expr>]</index></name> <operator pos:start="2315:25" pos:end="2315:25">=</operator> <name pos:start="2315:27" pos:end="2315:34">ram_size</name> <operator pos:start="2315:36" pos:end="2315:36">-</operator> <name pos:start="2315:38" pos:end="2315:44">usedmem</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="2321:9" pos:end="2327:9">for <control pos:start="2321:13" pos:end="2321:43">(<init pos:start="2321:14" pos:end="2321:19"><expr pos:start="2321:14" pos:end="2321:18"><name pos:start="2321:14" pos:end="2321:14">i</name> <operator pos:start="2321:16" pos:end="2321:16">=</operator> <literal type="number" pos:start="2321:18" pos:end="2321:18">0</literal></expr>;</init> <condition pos:start="2321:21" pos:end="2321:38"><expr pos:start="2321:21" pos:end="2321:37"><name pos:start="2321:21" pos:end="2321:21">i</name> <operator pos:start="2321:23" pos:end="2321:23">&lt;</operator> <name pos:start="2321:25" pos:end="2321:37">nb_numa_nodes</name></expr>;</condition> <incr pos:start="2321:40" pos:end="2321:42"><expr pos:start="2321:40" pos:end="2321:42"><name pos:start="2321:40" pos:end="2321:40">i</name><operator pos:start="2321:41" pos:end="2321:42">++</operator></expr></incr>)</control> <block pos:start="2321:45" pos:end="2327:9">{<block_content pos:start="2323:13" pos:end="2325:22">

            <if_stmt pos:start="2323:13" pos:end="2325:22"><if pos:start="2323:13" pos:end="2325:22">if <condition pos:start="2323:16" pos:end="2323:37">(<expr pos:start="2323:17" pos:end="2323:36"><name pos:start="2323:17" pos:end="2323:31"><name pos:start="2323:17" pos:end="2323:28">node_cpumask</name><index pos:start="2323:29" pos:end="2323:31">[<expr pos:start="2323:30" pos:end="2323:30"><name pos:start="2323:30" pos:end="2323:30">i</name></expr>]</index></name> <operator pos:start="2323:33" pos:end="2323:34">!=</operator> <literal type="number" pos:start="2323:36" pos:end="2323:36">0</literal></expr>)</condition><block type="pseudo" pos:start="2325:17" pos:end="2325:22"><block_content pos:start="2325:17" pos:end="2325:22">

                <break pos:start="2325:17" pos:end="2325:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="2329:9" pos:end="2335:11">/* assigning the VCPUs round-robin is easier to implement, guest OSes

         * must cope with this anyway, because there are BIOSes out there in

         * real machines which also use this scheme.

         */</comment>

        <if_stmt pos:start="2337:9" pos:end="2345:9"><if pos:start="2337:9" pos:end="2345:9">if <condition pos:start="2337:12" pos:end="2337:31">(<expr pos:start="2337:13" pos:end="2337:30"><name pos:start="2337:13" pos:end="2337:13">i</name> <operator pos:start="2337:15" pos:end="2337:16">==</operator> <name pos:start="2337:18" pos:end="2337:30">nb_numa_nodes</name></expr>)</condition> <block pos:start="2337:33" pos:end="2345:9">{<block_content pos:start="2339:13" pos:end="2343:13">

            <for pos:start="2339:13" pos:end="2343:13">for <control pos:start="2339:17" pos:end="2339:42">(<init pos:start="2339:18" pos:end="2339:23"><expr pos:start="2339:18" pos:end="2339:22"><name pos:start="2339:18" pos:end="2339:18">i</name> <operator pos:start="2339:20" pos:end="2339:20">=</operator> <literal type="number" pos:start="2339:22" pos:end="2339:22">0</literal></expr>;</init> <condition pos:start="2339:25" pos:end="2339:37"><expr pos:start="2339:25" pos:end="2339:36"><name pos:start="2339:25" pos:end="2339:25">i</name> <operator pos:start="2339:27" pos:end="2339:27">&lt;</operator> <name pos:start="2339:29" pos:end="2339:36">max_cpus</name></expr>;</condition> <incr pos:start="2339:39" pos:end="2339:41"><expr pos:start="2339:39" pos:end="2339:41"><name pos:start="2339:39" pos:end="2339:39">i</name><operator pos:start="2339:40" pos:end="2339:41">++</operator></expr></incr>)</control> <block pos:start="2339:44" pos:end="2343:13">{<block_content pos:start="2341:17" pos:end="2341:58">

                <expr_stmt pos:start="2341:17" pos:end="2341:58"><expr pos:start="2341:17" pos:end="2341:57"><name pos:start="2341:17" pos:end="2341:47"><name pos:start="2341:17" pos:end="2341:28">node_cpumask</name><index pos:start="2341:29" pos:end="2341:47">[<expr pos:start="2341:30" pos:end="2341:46"><name pos:start="2341:30" pos:end="2341:30">i</name> <operator pos:start="2341:32" pos:end="2341:32">%</operator> <name pos:start="2341:34" pos:end="2341:46">nb_numa_nodes</name></expr>]</index></name> <operator pos:start="2341:49" pos:end="2341:50">|=</operator> <literal type="number" pos:start="2341:52" pos:end="2341:52">1</literal> <operator pos:start="2341:54" pos:end="2341:55">&lt;&lt;</operator> <name pos:start="2341:57" pos:end="2341:57">i</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2351:5" pos:end="2355:5"><if pos:start="2351:5" pos:end="2355:5">if <condition pos:start="2351:8" pos:end="2351:78">(<expr pos:start="2351:9" pos:end="2351:77"><call pos:start="2351:9" pos:end="2351:72"><name pos:start="2351:9" pos:end="2351:25">qemu_opts_foreach</name><argument_list pos:start="2351:26" pos:end="2351:72">(<argument pos:start="2351:27" pos:end="2351:47"><expr pos:start="2351:27" pos:end="2351:47"><call pos:start="2351:27" pos:end="2351:47"><name pos:start="2351:27" pos:end="2351:40">qemu_find_opts</name><argument_list pos:start="2351:41" pos:end="2351:47">(<argument pos:start="2351:42" pos:end="2351:46"><expr pos:start="2351:42" pos:end="2351:46"><literal type="string" pos:start="2351:42" pos:end="2351:46">"mon"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2351:50" pos:end="2351:62"><expr pos:start="2351:50" pos:end="2351:62"><name pos:start="2351:50" pos:end="2351:62">mon_init_func</name></expr></argument>, <argument pos:start="2351:65" pos:end="2351:68"><expr pos:start="2351:65" pos:end="2351:68"><name pos:start="2351:65" pos:end="2351:68">NULL</name></expr></argument>, <argument pos:start="2351:71" pos:end="2351:71"><expr pos:start="2351:71" pos:end="2351:71"><literal type="number" pos:start="2351:71" pos:end="2351:71">1</literal></expr></argument>)</argument_list></call> <operator pos:start="2351:74" pos:end="2351:75">!=</operator> <literal type="number" pos:start="2351:77" pos:end="2351:77">0</literal></expr>)</condition> <block pos:start="2351:80" pos:end="2355:5">{<block_content pos:start="2353:9" pos:end="2353:16">

        <expr_stmt pos:start="2353:9" pos:end="2353:16"><expr pos:start="2353:9" pos:end="2353:15"><call pos:start="2353:9" pos:end="2353:15"><name pos:start="2353:9" pos:end="2353:12">exit</name><argument_list pos:start="2353:13" pos:end="2353:15">(<argument pos:start="2353:14" pos:end="2353:14"><expr pos:start="2353:14" pos:end="2353:14"><literal type="number" pos:start="2353:14" pos:end="2353:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2359:5" pos:end="2361:16"><if pos:start="2359:5" pos:end="2361:16">if <condition pos:start="2359:8" pos:end="2359:60">(<expr pos:start="2359:9" pos:end="2359:59"><call pos:start="2359:9" pos:end="2359:55"><name pos:start="2359:9" pos:end="2359:29">foreach_device_config</name><argument_list pos:start="2359:30" pos:end="2359:55">(<argument pos:start="2359:31" pos:end="2359:40"><expr pos:start="2359:31" pos:end="2359:40"><name pos:start="2359:31" pos:end="2359:40">DEV_SERIAL</name></expr></argument>, <argument pos:start="2359:43" pos:end="2359:54"><expr pos:start="2359:43" pos:end="2359:54"><name pos:start="2359:43" pos:end="2359:54">serial_parse</name></expr></argument>)</argument_list></call> <operator pos:start="2359:57" pos:end="2359:57">&lt;</operator> <literal type="number" pos:start="2359:59" pos:end="2359:59">0</literal></expr>)</condition><block type="pseudo" pos:start="2361:9" pos:end="2361:16"><block_content pos:start="2361:9" pos:end="2361:16">

        <expr_stmt pos:start="2361:9" pos:end="2361:16"><expr pos:start="2361:9" pos:end="2361:15"><call pos:start="2361:9" pos:end="2361:15"><name pos:start="2361:9" pos:end="2361:12">exit</name><argument_list pos:start="2361:13" pos:end="2361:15">(<argument pos:start="2361:14" pos:end="2361:14"><expr pos:start="2361:14" pos:end="2361:14"><literal type="number" pos:start="2361:14" pos:end="2361:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="2363:5" pos:end="2365:16"><if pos:start="2363:5" pos:end="2365:16">if <condition pos:start="2363:8" pos:end="2363:64">(<expr pos:start="2363:9" pos:end="2363:63"><call pos:start="2363:9" pos:end="2363:59"><name pos:start="2363:9" pos:end="2363:29">foreach_device_config</name><argument_list pos:start="2363:30" pos:end="2363:59">(<argument pos:start="2363:31" pos:end="2363:42"><expr pos:start="2363:31" pos:end="2363:42"><name pos:start="2363:31" pos:end="2363:42">DEV_PARALLEL</name></expr></argument>, <argument pos:start="2363:45" pos:end="2363:58"><expr pos:start="2363:45" pos:end="2363:58"><name pos:start="2363:45" pos:end="2363:58">parallel_parse</name></expr></argument>)</argument_list></call> <operator pos:start="2363:61" pos:end="2363:61">&lt;</operator> <literal type="number" pos:start="2363:63" pos:end="2363:63">0</literal></expr>)</condition><block type="pseudo" pos:start="2365:9" pos:end="2365:16"><block_content pos:start="2365:9" pos:end="2365:16">

        <expr_stmt pos:start="2365:9" pos:end="2365:16"><expr pos:start="2365:9" pos:end="2365:15"><call pos:start="2365:9" pos:end="2365:15"><name pos:start="2365:9" pos:end="2365:12">exit</name><argument_list pos:start="2365:13" pos:end="2365:15">(<argument pos:start="2365:14" pos:end="2365:14"><expr pos:start="2365:14" pos:end="2365:14"><literal type="number" pos:start="2365:14" pos:end="2365:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="2367:5" pos:end="2369:16"><if pos:start="2367:5" pos:end="2369:16">if <condition pos:start="2367:8" pos:end="2367:62">(<expr pos:start="2367:9" pos:end="2367:61"><call pos:start="2367:9" pos:end="2367:57"><name pos:start="2367:9" pos:end="2367:29">foreach_device_config</name><argument_list pos:start="2367:30" pos:end="2367:57">(<argument pos:start="2367:31" pos:end="2367:41"><expr pos:start="2367:31" pos:end="2367:41"><name pos:start="2367:31" pos:end="2367:41">DEV_VIRTCON</name></expr></argument>, <argument pos:start="2367:44" pos:end="2367:56"><expr pos:start="2367:44" pos:end="2367:56"><name pos:start="2367:44" pos:end="2367:56">virtcon_parse</name></expr></argument>)</argument_list></call> <operator pos:start="2367:59" pos:end="2367:59">&lt;</operator> <literal type="number" pos:start="2367:61" pos:end="2367:61">0</literal></expr>)</condition><block type="pseudo" pos:start="2369:9" pos:end="2369:16"><block_content pos:start="2369:9" pos:end="2369:16">

        <expr_stmt pos:start="2369:9" pos:end="2369:16"><expr pos:start="2369:9" pos:end="2369:15"><call pos:start="2369:9" pos:end="2369:15"><name pos:start="2369:9" pos:end="2369:12">exit</name><argument_list pos:start="2369:13" pos:end="2369:15">(<argument pos:start="2369:14" pos:end="2369:14"><expr pos:start="2369:14" pos:end="2369:14"><literal type="number" pos:start="2369:14" pos:end="2369:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="2371:5" pos:end="2373:16"><if pos:start="2371:5" pos:end="2373:16">if <condition pos:start="2371:8" pos:end="2371:64">(<expr pos:start="2371:9" pos:end="2371:63"><call pos:start="2371:9" pos:end="2371:59"><name pos:start="2371:9" pos:end="2371:29">foreach_device_config</name><argument_list pos:start="2371:30" pos:end="2371:59">(<argument pos:start="2371:31" pos:end="2371:42"><expr pos:start="2371:31" pos:end="2371:42"><name pos:start="2371:31" pos:end="2371:42">DEV_DEBUGCON</name></expr></argument>, <argument pos:start="2371:45" pos:end="2371:58"><expr pos:start="2371:45" pos:end="2371:58"><name pos:start="2371:45" pos:end="2371:58">debugcon_parse</name></expr></argument>)</argument_list></call> <operator pos:start="2371:61" pos:end="2371:61">&lt;</operator> <literal type="number" pos:start="2371:63" pos:end="2371:63">0</literal></expr>)</condition><block type="pseudo" pos:start="2373:9" pos:end="2373:16"><block_content pos:start="2373:9" pos:end="2373:16">

        <expr_stmt pos:start="2373:9" pos:end="2373:16"><expr pos:start="2373:9" pos:end="2373:15"><call pos:start="2373:9" pos:end="2373:15"><name pos:start="2373:9" pos:end="2373:12">exit</name><argument_list pos:start="2373:13" pos:end="2373:15">(<argument pos:start="2373:14" pos:end="2373:14"><expr pos:start="2373:14" pos:end="2373:14"><literal type="number" pos:start="2373:14" pos:end="2373:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="2377:5" pos:end="2377:41"><expr pos:start="2377:5" pos:end="2377:40"><call pos:start="2377:5" pos:end="2377:40"><name pos:start="2377:5" pos:end="2377:20">module_call_init</name><argument_list pos:start="2377:21" pos:end="2377:40">(<argument pos:start="2377:22" pos:end="2377:39"><expr pos:start="2377:22" pos:end="2377:39"><name pos:start="2377:22" pos:end="2377:39">MODULE_INIT_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2381:5" pos:end="2383:16"><if pos:start="2381:5" pos:end="2383:16">if <condition pos:start="2381:8" pos:end="2381:84">(<expr pos:start="2381:9" pos:end="2381:83"><call pos:start="2381:9" pos:end="2381:78"><name pos:start="2381:9" pos:end="2381:25">qemu_opts_foreach</name><argument_list pos:start="2381:26" pos:end="2381:78">(<argument pos:start="2381:27" pos:end="2381:50"><expr pos:start="2381:27" pos:end="2381:50"><call pos:start="2381:27" pos:end="2381:50"><name pos:start="2381:27" pos:end="2381:40">qemu_find_opts</name><argument_list pos:start="2381:41" pos:end="2381:50">(<argument pos:start="2381:42" pos:end="2381:49"><expr pos:start="2381:42" pos:end="2381:49"><literal type="string" pos:start="2381:42" pos:end="2381:49">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2381:53" pos:end="2381:68"><expr pos:start="2381:53" pos:end="2381:68"><name pos:start="2381:53" pos:end="2381:68">device_help_func</name></expr></argument>, <argument pos:start="2381:71" pos:end="2381:74"><expr pos:start="2381:71" pos:end="2381:74"><name pos:start="2381:71" pos:end="2381:74">NULL</name></expr></argument>, <argument pos:start="2381:77" pos:end="2381:77"><expr pos:start="2381:77" pos:end="2381:77"><literal type="number" pos:start="2381:77" pos:end="2381:77">0</literal></expr></argument>)</argument_list></call> <operator pos:start="2381:80" pos:end="2381:81">!=</operator> <literal type="number" pos:start="2381:83" pos:end="2381:83">0</literal></expr>)</condition><block type="pseudo" pos:start="2383:9" pos:end="2383:16"><block_content pos:start="2383:9" pos:end="2383:16">

        <expr_stmt pos:start="2383:9" pos:end="2383:16"><expr pos:start="2383:9" pos:end="2383:15"><call pos:start="2383:9" pos:end="2383:15"><name pos:start="2383:9" pos:end="2383:12">exit</name><argument_list pos:start="2383:13" pos:end="2383:15">(<argument pos:start="2383:14" pos:end="2383:14"><expr pos:start="2383:14" pos:end="2383:14"><literal type="number" pos:start="2383:14" pos:end="2383:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="2387:5" pos:end="2395:5"><if pos:start="2387:5" pos:end="2395:5">if <condition pos:start="2387:8" pos:end="2387:17">(<expr pos:start="2387:9" pos:end="2387:16"><name pos:start="2387:9" pos:end="2387:16">watchdog</name></expr>)</condition> <block pos:start="2387:19" pos:end="2395:5">{<block_content pos:start="2389:9" pos:end="2393:34">

        <expr_stmt pos:start="2389:9" pos:end="2389:38"><expr pos:start="2389:9" pos:end="2389:37"><name pos:start="2389:9" pos:end="2389:9">i</name> <operator pos:start="2389:11" pos:end="2389:11">=</operator> <call pos:start="2389:13" pos:end="2389:37"><name pos:start="2389:13" pos:end="2389:27">select_watchdog</name><argument_list pos:start="2389:28" pos:end="2389:37">(<argument pos:start="2389:29" pos:end="2389:36"><expr pos:start="2389:29" pos:end="2389:36"><name pos:start="2389:29" pos:end="2389:36">watchdog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2391:9" pos:end="2393:34"><if pos:start="2391:9" pos:end="2393:34">if <condition pos:start="2391:12" pos:end="2391:18">(<expr pos:start="2391:13" pos:end="2391:17"><name pos:start="2391:13" pos:end="2391:13">i</name> <operator pos:start="2391:15" pos:end="2391:15">&gt;</operator> <literal type="number" pos:start="2391:17" pos:end="2391:17">0</literal></expr>)</condition><block type="pseudo" pos:start="2393:13" pos:end="2393:34"><block_content pos:start="2393:13" pos:end="2393:34">

            <expr_stmt pos:start="2393:13" pos:end="2393:34"><expr pos:start="2393:13" pos:end="2393:33"><call pos:start="2393:13" pos:end="2393:33"><name pos:start="2393:13" pos:end="2393:16">exit</name> <argument_list pos:start="2393:18" pos:end="2393:33">(<argument pos:start="2393:19" pos:end="2393:32"><expr pos:start="2393:19" pos:end="2393:32"><ternary pos:start="2393:19" pos:end="2393:32"><condition pos:start="2393:19" pos:end="2393:26"><expr pos:start="2393:19" pos:end="2393:24"><name pos:start="2393:19" pos:end="2393:19">i</name> <operator pos:start="2393:21" pos:end="2393:22">==</operator> <literal type="number" pos:start="2393:24" pos:end="2393:24">1</literal></expr> ?</condition><then pos:start="2393:28" pos:end="2393:28"> <expr pos:start="2393:28" pos:end="2393:28"><literal type="number" pos:start="2393:28" pos:end="2393:28">1</literal></expr> </then><else pos:start="2393:30" pos:end="2393:32">: <expr pos:start="2393:32" pos:end="2393:32"><literal type="number" pos:start="2393:32" pos:end="2393:32">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2399:5" pos:end="2403:5"><if pos:start="2399:5" pos:end="2403:5">if <condition pos:start="2399:8" pos:end="2399:30">(<expr pos:start="2399:9" pos:end="2399:29"><name pos:start="2399:9" pos:end="2399:29"><name pos:start="2399:9" pos:end="2399:15">machine</name><operator pos:start="2399:16" pos:end="2399:17">-&gt;</operator><name pos:start="2399:18" pos:end="2399:29">compat_props</name></name></expr>)</condition> <block pos:start="2399:32" pos:end="2403:5">{<block_content pos:start="2401:9" pos:end="2401:62">

        <expr_stmt pos:start="2401:9" pos:end="2401:62"><expr pos:start="2401:9" pos:end="2401:61"><call pos:start="2401:9" pos:end="2401:61"><name pos:start="2401:9" pos:end="2401:38">qdev_prop_register_global_list</name><argument_list pos:start="2401:39" pos:end="2401:61">(<argument pos:start="2401:40" pos:end="2401:60"><expr pos:start="2401:40" pos:end="2401:60"><name pos:start="2401:40" pos:end="2401:60"><name pos:start="2401:40" pos:end="2401:46">machine</name><operator pos:start="2401:47" pos:end="2401:48">-&gt;</operator><name pos:start="2401:49" pos:end="2401:60">compat_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="2405:5" pos:end="2405:23"><expr pos:start="2405:5" pos:end="2405:22"><call pos:start="2405:5" pos:end="2405:22"><name pos:start="2405:5" pos:end="2405:20">qemu_add_globals</name><argument_list pos:start="2405:21" pos:end="2405:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2409:5" pos:end="2409:24"><expr pos:start="2409:5" pos:end="2409:23"><call pos:start="2409:5" pos:end="2409:23"><name pos:start="2409:5" pos:end="2409:21">qdev_machine_init</name><argument_list pos:start="2409:22" pos:end="2409:23">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2413:5" pos:end="2415:79"><expr pos:start="2413:5" pos:end="2415:78"><call pos:start="2413:5" pos:end="2415:78"><name pos:start="2413:5" pos:end="2413:17"><name pos:start="2413:5" pos:end="2413:11">machine</name><operator pos:start="2413:12" pos:end="2413:13">-&gt;</operator><name pos:start="2413:14" pos:end="2413:17">init</name></name><argument_list pos:start="2413:18" pos:end="2415:78">(<argument pos:start="2413:19" pos:end="2413:26"><expr pos:start="2413:19" pos:end="2413:26"><name pos:start="2413:19" pos:end="2413:26">ram_size</name></expr></argument>, <argument pos:start="2413:29" pos:end="2413:40"><expr pos:start="2413:29" pos:end="2413:40"><name pos:start="2413:29" pos:end="2413:40">boot_devices</name></expr></argument>,

                  <argument pos:start="2415:19" pos:end="2415:33"><expr pos:start="2415:19" pos:end="2415:33"><name pos:start="2415:19" pos:end="2415:33">kernel_filename</name></expr></argument>, <argument pos:start="2415:36" pos:end="2415:49"><expr pos:start="2415:36" pos:end="2415:49"><name pos:start="2415:36" pos:end="2415:49">kernel_cmdline</name></expr></argument>, <argument pos:start="2415:52" pos:end="2415:66"><expr pos:start="2415:52" pos:end="2415:66"><name pos:start="2415:52" pos:end="2415:66">initrd_filename</name></expr></argument>, <argument pos:start="2415:69" pos:end="2415:77"><expr pos:start="2415:69" pos:end="2415:77"><name pos:start="2415:69" pos:end="2415:77">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2419:5" pos:end="2419:36"><expr pos:start="2419:5" pos:end="2419:35"><call pos:start="2419:5" pos:end="2419:35"><name pos:start="2419:5" pos:end="2419:33">cpu_synchronize_all_post_init</name><argument_list pos:start="2419:34" pos:end="2419:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2423:5" pos:end="2423:21"><expr pos:start="2423:5" pos:end="2423:20"><call pos:start="2423:5" pos:end="2423:20"><name pos:start="2423:5" pos:end="2423:18">set_numa_modes</name><argument_list pos:start="2423:19" pos:end="2423:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2427:5" pos:end="2427:30"><expr pos:start="2427:5" pos:end="2427:29"><name pos:start="2427:5" pos:end="2427:19">current_machine</name> <operator pos:start="2427:21" pos:end="2427:21">=</operator> <name pos:start="2427:23" pos:end="2427:29">machine</name></expr>;</expr_stmt>



    <comment type="block" pos:start="2431:5" pos:end="2431:26">/* init USB devices */</comment>

    <if_stmt pos:start="2433:5" pos:end="2439:5"><if pos:start="2433:5" pos:end="2439:5">if <condition pos:start="2433:8" pos:end="2433:20">(<expr pos:start="2433:9" pos:end="2433:19"><name pos:start="2433:9" pos:end="2433:19">usb_enabled</name></expr>)</condition> <block pos:start="2433:22" pos:end="2439:5">{<block_content pos:start="2435:9" pos:end="2437:20">

        <if_stmt pos:start="2435:9" pos:end="2437:20"><if pos:start="2435:9" pos:end="2437:20">if <condition pos:start="2435:12" pos:end="2435:58">(<expr pos:start="2435:13" pos:end="2435:57"><call pos:start="2435:13" pos:end="2435:53"><name pos:start="2435:13" pos:end="2435:33">foreach_device_config</name><argument_list pos:start="2435:34" pos:end="2435:53">(<argument pos:start="2435:35" pos:end="2435:41"><expr pos:start="2435:35" pos:end="2435:41"><name pos:start="2435:35" pos:end="2435:41">DEV_USB</name></expr></argument>, <argument pos:start="2435:44" pos:end="2435:52"><expr pos:start="2435:44" pos:end="2435:52"><name pos:start="2435:44" pos:end="2435:52">usb_parse</name></expr></argument>)</argument_list></call> <operator pos:start="2435:55" pos:end="2435:55">&lt;</operator> <literal type="number" pos:start="2435:57" pos:end="2435:57">0</literal></expr>)</condition><block type="pseudo" pos:start="2437:13" pos:end="2437:20"><block_content pos:start="2437:13" pos:end="2437:20">

            <expr_stmt pos:start="2437:13" pos:end="2437:20"><expr pos:start="2437:13" pos:end="2437:19"><call pos:start="2437:13" pos:end="2437:19"><name pos:start="2437:13" pos:end="2437:16">exit</name><argument_list pos:start="2437:17" pos:end="2437:19">(<argument pos:start="2437:18" pos:end="2437:18"><expr pos:start="2437:18" pos:end="2437:18"><literal type="number" pos:start="2437:18" pos:end="2437:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="2443:5" pos:end="2443:30">/* init generic devices */</comment>

    <if_stmt pos:start="2445:5" pos:end="2447:16"><if pos:start="2445:5" pos:end="2447:16">if <condition pos:start="2445:8" pos:end="2445:84">(<expr pos:start="2445:9" pos:end="2445:83"><call pos:start="2445:9" pos:end="2445:78"><name pos:start="2445:9" pos:end="2445:25">qemu_opts_foreach</name><argument_list pos:start="2445:26" pos:end="2445:78">(<argument pos:start="2445:27" pos:end="2445:50"><expr pos:start="2445:27" pos:end="2445:50"><call pos:start="2445:27" pos:end="2445:50"><name pos:start="2445:27" pos:end="2445:40">qemu_find_opts</name><argument_list pos:start="2445:41" pos:end="2445:50">(<argument pos:start="2445:42" pos:end="2445:49"><expr pos:start="2445:42" pos:end="2445:49"><literal type="string" pos:start="2445:42" pos:end="2445:49">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="2445:53" pos:end="2445:68"><expr pos:start="2445:53" pos:end="2445:68"><name pos:start="2445:53" pos:end="2445:68">device_init_func</name></expr></argument>, <argument pos:start="2445:71" pos:end="2445:74"><expr pos:start="2445:71" pos:end="2445:74"><name pos:start="2445:71" pos:end="2445:74">NULL</name></expr></argument>, <argument pos:start="2445:77" pos:end="2445:77"><expr pos:start="2445:77" pos:end="2445:77"><literal type="number" pos:start="2445:77" pos:end="2445:77">1</literal></expr></argument>)</argument_list></call> <operator pos:start="2445:80" pos:end="2445:81">!=</operator> <literal type="number" pos:start="2445:83" pos:end="2445:83">0</literal></expr>)</condition><block type="pseudo" pos:start="2447:9" pos:end="2447:16"><block_content pos:start="2447:9" pos:end="2447:16">

        <expr_stmt pos:start="2447:9" pos:end="2447:16"><expr pos:start="2447:9" pos:end="2447:15"><call pos:start="2447:9" pos:end="2447:15"><name pos:start="2447:9" pos:end="2447:12">exit</name><argument_list pos:start="2447:13" pos:end="2447:15">(<argument pos:start="2447:14" pos:end="2447:14"><expr pos:start="2447:14" pos:end="2447:14"><literal type="number" pos:start="2447:14" pos:end="2447:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="2451:5" pos:end="2451:24"><expr pos:start="2451:5" pos:end="2451:23"><call pos:start="2451:5" pos:end="2451:23"><name pos:start="2451:5" pos:end="2451:21">net_check_clients</name><argument_list pos:start="2451:22" pos:end="2451:23">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="2455:5" pos:end="2455:56">/* just use the first displaystate for the moment */</comment>

    <expr_stmt pos:start="2457:5" pos:end="2457:28"><expr pos:start="2457:5" pos:end="2457:27"><name pos:start="2457:5" pos:end="2457:6">ds</name> <operator pos:start="2457:8" pos:end="2457:8">=</operator> <call pos:start="2457:10" pos:end="2457:27"><name pos:start="2457:10" pos:end="2457:25">get_displaystate</name><argument_list pos:start="2457:26" pos:end="2457:27">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2461:5" pos:end="2463:25"><if pos:start="2461:5" pos:end="2463:25">if <condition pos:start="2461:8" pos:end="2461:20">(<expr pos:start="2461:9" pos:end="2461:19"><name pos:start="2461:9" pos:end="2461:19">using_spice</name></expr>)</condition><block type="pseudo" pos:start="2463:9" pos:end="2463:25"><block_content pos:start="2463:9" pos:end="2463:25">

        <expr_stmt pos:start="2463:9" pos:end="2463:25"><expr pos:start="2463:9" pos:end="2463:24"><name pos:start="2463:9" pos:end="2463:22">display_remote</name><operator pos:start="2463:23" pos:end="2463:24">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="2465:5" pos:end="2483:5"><if pos:start="2465:5" pos:end="2483:5">if <condition pos:start="2465:8" pos:end="2465:54">(<expr pos:start="2465:9" pos:end="2465:53"><name pos:start="2465:9" pos:end="2465:20">display_type</name> <operator pos:start="2465:22" pos:end="2465:23">==</operator> <name pos:start="2465:25" pos:end="2465:34">DT_DEFAULT</name> <operator pos:start="2465:36" pos:end="2465:37">&amp;&amp;</operator> <operator pos:start="2465:39" pos:end="2465:39">!</operator><name pos:start="2465:40" pos:end="2465:53">display_remote</name></expr>)</condition> <block pos:start="2465:56" pos:end="2483:5">{<block_content pos:start="2469:9" pos:end="2482:0">

<cpp:if pos:start="2467:1" pos:end="2467:48">#<cpp:directive pos:start="2467:2" pos:end="2467:3">if</cpp:directive> <expr pos:start="2467:5" pos:end="2467:48"><call pos:start="2467:5" pos:end="2467:23"><name pos:start="2467:5" pos:end="2467:11">defined</name><argument_list pos:start="2467:12" pos:end="2467:23">(<argument pos:start="2467:13" pos:end="2467:22"><expr pos:start="2467:13" pos:end="2467:22"><name pos:start="2467:13" pos:end="2467:22">CONFIG_SDL</name></expr></argument>)</argument_list></call> <operator pos:start="2467:25" pos:end="2467:26">||</operator> <call pos:start="2467:28" pos:end="2467:48"><name pos:start="2467:28" pos:end="2467:34">defined</name><argument_list pos:start="2467:35" pos:end="2467:48">(<argument pos:start="2467:36" pos:end="2467:47"><expr pos:start="2467:36" pos:end="2467:47"><name pos:start="2467:36" pos:end="2467:47">CONFIG_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="2469:9" pos:end="2472:0"><expr pos:start="2469:9" pos:end="2469:29"><name pos:start="2469:9" pos:end="2469:20">display_type</name> <operator pos:start="2469:22" pos:end="2469:22">=</operator> <name pos:start="2469:24" pos:end="2469:29">DT_SDL</name></expr>;</expr_stmt>

<cpp:elif pos:start="2471:1" pos:end="2471:25">#<cpp:directive pos:start="2471:2" pos:end="2471:5">elif</cpp:directive> <expr pos:start="2471:7" pos:end="2471:25"><call pos:start="2471:7" pos:end="2471:25"><name pos:start="2471:7" pos:end="2471:13">defined</name><argument_list pos:start="2471:14" pos:end="2471:25">(<argument pos:start="2471:15" pos:end="2471:24"><expr pos:start="2471:15" pos:end="2471:24"><name pos:start="2471:15" pos:end="2471:24">CONFIG_VNC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <expr_stmt pos:start="2473:9" pos:end="2473:42"><expr pos:start="2473:9" pos:end="2473:41"><name pos:start="2473:9" pos:end="2473:19">vnc_display</name> <operator pos:start="2473:21" pos:end="2473:21">=</operator> <literal type="string" pos:start="2473:23" pos:end="2473:41">"localhost:0,to=99"</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2475:9" pos:end="2478:0"><expr pos:start="2475:9" pos:end="2475:25"><name pos:start="2475:9" pos:end="2475:21">show_vnc_port</name> <operator pos:start="2475:23" pos:end="2475:23">=</operator> <literal type="number" pos:start="2475:25" pos:end="2475:25">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="2477:1" pos:end="2477:5">#<cpp:directive pos:start="2477:2" pos:end="2477:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="2479:9" pos:end="2482:0"><expr pos:start="2479:9" pos:end="2479:30"><name pos:start="2479:9" pos:end="2479:20">display_type</name> <operator pos:start="2479:22" pos:end="2479:22">=</operator> <name pos:start="2479:24" pos:end="2479:30">DT_NONE</name></expr>;</expr_stmt>

<cpp:endif pos:start="2481:1" pos:end="2481:6">#<cpp:directive pos:start="2481:2" pos:end="2481:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="2489:5" pos:end="2489:29">/* init local displays */</comment>

    <switch pos:start="2491:5" pos:end="2529:5">switch <condition pos:start="2491:12" pos:end="2491:25">(<expr pos:start="2491:13" pos:end="2491:24"><name pos:start="2491:13" pos:end="2491:24">display_type</name></expr>)</condition> <block pos:start="2491:27" pos:end="2529:5">{<block_content pos:start="2493:5" pos:end="2527:14">

    <case pos:start="2493:5" pos:end="2493:22">case <expr pos:start="2493:10" pos:end="2493:21"><name pos:start="2493:10" pos:end="2493:21">DT_NOGRAPHIC</name></expr>:</case>

        <break pos:start="2495:9" pos:end="2498:0">break;</break>

<cpp:if pos:start="2497:1" pos:end="2497:26">#<cpp:directive pos:start="2497:2" pos:end="2497:3">if</cpp:directive> <expr pos:start="2497:5" pos:end="2497:26"><call pos:start="2497:5" pos:end="2497:26"><name pos:start="2497:5" pos:end="2497:11">defined</name><argument_list pos:start="2497:12" pos:end="2497:26">(<argument pos:start="2497:13" pos:end="2497:25"><expr pos:start="2497:13" pos:end="2497:25"><name pos:start="2497:13" pos:end="2497:25">CONFIG_CURSES</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2499:5" pos:end="2499:19">case <expr pos:start="2499:10" pos:end="2499:18"><name pos:start="2499:10" pos:end="2499:18">DT_CURSES</name></expr>:</case>

        <expr_stmt pos:start="2501:9" pos:end="2501:45"><expr pos:start="2501:9" pos:end="2501:44"><call pos:start="2501:9" pos:end="2501:44"><name pos:start="2501:9" pos:end="2501:27">curses_display_init</name><argument_list pos:start="2501:28" pos:end="2501:44">(<argument pos:start="2501:29" pos:end="2501:30"><expr pos:start="2501:29" pos:end="2501:30"><name pos:start="2501:29" pos:end="2501:30">ds</name></expr></argument>, <argument pos:start="2501:33" pos:end="2501:43"><expr pos:start="2501:33" pos:end="2501:43"><name pos:start="2501:33" pos:end="2501:43">full_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2503:9" pos:end="2508:0">break;</break>

<cpp:endif pos:start="2505:1" pos:end="2505:6">#<cpp:directive pos:start="2505:2" pos:end="2505:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="2507:1" pos:end="2507:23">#<cpp:directive pos:start="2507:2" pos:end="2507:3">if</cpp:directive> <expr pos:start="2507:5" pos:end="2507:23"><call pos:start="2507:5" pos:end="2507:23"><name pos:start="2507:5" pos:end="2507:11">defined</name><argument_list pos:start="2507:12" pos:end="2507:23">(<argument pos:start="2507:13" pos:end="2507:22"><expr pos:start="2507:13" pos:end="2507:22"><name pos:start="2507:13" pos:end="2507:22">CONFIG_SDL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="2509:5" pos:end="2509:16">case <expr pos:start="2509:10" pos:end="2509:15"><name pos:start="2509:10" pos:end="2509:15">DT_SDL</name></expr>:</case>

        <expr_stmt pos:start="2511:9" pos:end="2511:52"><expr pos:start="2511:9" pos:end="2511:51"><call pos:start="2511:9" pos:end="2511:51"><name pos:start="2511:9" pos:end="2511:24">sdl_display_init</name><argument_list pos:start="2511:25" pos:end="2511:51">(<argument pos:start="2511:26" pos:end="2511:27"><expr pos:start="2511:26" pos:end="2511:27"><name pos:start="2511:26" pos:end="2511:27">ds</name></expr></argument>, <argument pos:start="2511:30" pos:end="2511:40"><expr pos:start="2511:30" pos:end="2511:40"><name pos:start="2511:30" pos:end="2511:40">full_screen</name></expr></argument>, <argument pos:start="2511:43" pos:end="2511:50"><expr pos:start="2511:43" pos:end="2511:50"><name pos:start="2511:43" pos:end="2511:50">no_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2513:9" pos:end="2516:0">break;</break>

<cpp:elif pos:start="2515:1" pos:end="2515:27">#<cpp:directive pos:start="2515:2" pos:end="2515:5">elif</cpp:directive> <expr pos:start="2515:7" pos:end="2515:27"><call pos:start="2515:7" pos:end="2515:27"><name pos:start="2515:7" pos:end="2515:13">defined</name><argument_list pos:start="2515:14" pos:end="2515:27">(<argument pos:start="2515:15" pos:end="2515:26"><expr pos:start="2515:15" pos:end="2515:26"><name pos:start="2515:15" pos:end="2515:26">CONFIG_COCOA</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <case pos:start="2517:5" pos:end="2517:16">case <expr pos:start="2517:10" pos:end="2517:15"><name pos:start="2517:10" pos:end="2517:15">DT_SDL</name></expr>:</case>

        <expr_stmt pos:start="2519:9" pos:end="2519:44"><expr pos:start="2519:9" pos:end="2519:43"><call pos:start="2519:9" pos:end="2519:43"><name pos:start="2519:9" pos:end="2519:26">cocoa_display_init</name><argument_list pos:start="2519:27" pos:end="2519:43">(<argument pos:start="2519:28" pos:end="2519:29"><expr pos:start="2519:28" pos:end="2519:29"><name pos:start="2519:28" pos:end="2519:29">ds</name></expr></argument>, <argument pos:start="2519:32" pos:end="2519:42"><expr pos:start="2519:32" pos:end="2519:42"><name pos:start="2519:32" pos:end="2519:42">full_screen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="2521:9" pos:end="2524:0">break;</break>

<cpp:endif pos:start="2523:1" pos:end="2523:6">#<cpp:directive pos:start="2523:2" pos:end="2523:6">endif</cpp:directive></cpp:endif>

    <default pos:start="2525:5" pos:end="2525:12">default:</default>

        <break pos:start="2527:9" pos:end="2527:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="2533:5" pos:end="2533:74">/* must be after terminal init, SDL library changes signal handlers */</comment>

    <expr_stmt pos:start="2535:5" pos:end="2540:0"><expr pos:start="2535:5" pos:end="2535:30"><call pos:start="2535:5" pos:end="2535:30"><name pos:start="2535:5" pos:end="2535:28">os_setup_signal_handling</name><argument_list pos:start="2535:29" pos:end="2535:30">()</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="2539:1" pos:end="2539:17">#<cpp:directive pos:start="2539:2" pos:end="2539:6">ifdef</cpp:directive> <name pos:start="2539:8" pos:end="2539:17">CONFIG_VNC</name></cpp:ifdef>

    <comment type="block" pos:start="2541:5" pos:end="2541:30">/* init remote displays */</comment>

    <if_stmt pos:start="2543:5" pos:end="2564:0"><if pos:start="2543:5" pos:end="2564:0">if <condition pos:start="2543:8" pos:end="2543:20">(<expr pos:start="2543:9" pos:end="2543:19"><name pos:start="2543:9" pos:end="2543:19">vnc_display</name></expr>)</condition> <block pos:start="2543:22" pos:end="2564:0">{<block_content pos:start="2545:9" pos:end="2557:9">

        <expr_stmt pos:start="2545:9" pos:end="2545:29"><expr pos:start="2545:9" pos:end="2545:28"><call pos:start="2545:9" pos:end="2545:28"><name pos:start="2545:9" pos:end="2545:24">vnc_display_init</name><argument_list pos:start="2545:25" pos:end="2545:28">(<argument pos:start="2545:26" pos:end="2545:27"><expr pos:start="2545:26" pos:end="2545:27"><name pos:start="2545:26" pos:end="2545:27">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2547:9" pos:end="2549:20"><if pos:start="2547:9" pos:end="2549:20">if <condition pos:start="2547:12" pos:end="2547:50">(<expr pos:start="2547:13" pos:end="2547:49"><call pos:start="2547:13" pos:end="2547:45"><name pos:start="2547:13" pos:end="2547:28">vnc_display_open</name><argument_list pos:start="2547:29" pos:end="2547:45">(<argument pos:start="2547:30" pos:end="2547:31"><expr pos:start="2547:30" pos:end="2547:31"><name pos:start="2547:30" pos:end="2547:31">ds</name></expr></argument>, <argument pos:start="2547:34" pos:end="2547:44"><expr pos:start="2547:34" pos:end="2547:44"><name pos:start="2547:34" pos:end="2547:44">vnc_display</name></expr></argument>)</argument_list></call> <operator pos:start="2547:47" pos:end="2547:47">&lt;</operator> <literal type="number" pos:start="2547:49" pos:end="2547:49">0</literal></expr>)</condition><block type="pseudo" pos:start="2549:13" pos:end="2549:20"><block_content pos:start="2549:13" pos:end="2549:20">

            <expr_stmt pos:start="2549:13" pos:end="2549:20"><expr pos:start="2549:13" pos:end="2549:19"><call pos:start="2549:13" pos:end="2549:19"><name pos:start="2549:13" pos:end="2549:16">exit</name><argument_list pos:start="2549:17" pos:end="2549:19">(<argument pos:start="2549:18" pos:end="2549:18"><expr pos:start="2549:18" pos:end="2549:18"><literal type="number" pos:start="2549:18" pos:end="2549:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="2553:9" pos:end="2557:9"><if pos:start="2553:9" pos:end="2557:9">if <condition pos:start="2553:12" pos:end="2553:26">(<expr pos:start="2553:13" pos:end="2553:25"><name pos:start="2553:13" pos:end="2553:25">show_vnc_port</name></expr>)</condition> <block pos:start="2553:28" pos:end="2557:9">{<block_content pos:start="2555:13" pos:end="2555:79">

            <expr_stmt pos:start="2555:13" pos:end="2555:79"><expr pos:start="2555:13" pos:end="2555:78"><call pos:start="2555:13" pos:end="2555:78"><name pos:start="2555:13" pos:end="2555:18">printf</name><argument_list pos:start="2555:19" pos:end="2555:78">(<argument pos:start="2555:20" pos:end="2555:49"><expr pos:start="2555:20" pos:end="2555:49"><literal type="string" pos:start="2555:20" pos:end="2555:49">"VNC server running on `%s'\n"</literal></expr></argument>, <argument pos:start="2555:52" pos:end="2555:77"><expr pos:start="2555:52" pos:end="2555:77"><call pos:start="2555:52" pos:end="2555:77"><name pos:start="2555:52" pos:end="2555:73">vnc_display_local_addr</name><argument_list pos:start="2555:74" pos:end="2555:77">(<argument pos:start="2555:75" pos:end="2555:76"><expr pos:start="2555:75" pos:end="2555:76"><name pos:start="2555:75" pos:end="2555:76">ds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2561:1" pos:end="2561:6">#<cpp:directive pos:start="2561:2" pos:end="2561:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="2563:1" pos:end="2563:19">#<cpp:directive pos:start="2563:2" pos:end="2563:6">ifdef</cpp:directive> <name pos:start="2563:8" pos:end="2563:19">CONFIG_SPICE</name></cpp:ifdef>

    <if_stmt pos:start="2565:5" pos:end="2572:0"><if pos:start="2565:5" pos:end="2572:0">if <condition pos:start="2565:8" pos:end="2565:36">(<expr pos:start="2565:9" pos:end="2565:35"><name pos:start="2565:9" pos:end="2565:19">using_spice</name> <operator pos:start="2565:21" pos:end="2565:22">&amp;&amp;</operator> <operator pos:start="2565:24" pos:end="2565:24">!</operator><name pos:start="2565:25" pos:end="2565:35">qxl_enabled</name></expr>)</condition> <block pos:start="2565:38" pos:end="2572:0">{<block_content pos:start="2567:9" pos:end="2567:36">

        <expr_stmt pos:start="2567:9" pos:end="2567:36"><expr pos:start="2567:9" pos:end="2567:35"><call pos:start="2567:9" pos:end="2567:35"><name pos:start="2567:9" pos:end="2567:31">qemu_spice_display_init</name><argument_list pos:start="2567:32" pos:end="2567:35">(<argument pos:start="2567:33" pos:end="2567:34"><expr pos:start="2567:33" pos:end="2567:34"><name pos:start="2567:33" pos:end="2567:34">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="2571:1" pos:end="2571:6">#<cpp:directive pos:start="2571:2" pos:end="2571:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="2575:5" pos:end="2575:23">/* display setup */</comment>

    <expr_stmt pos:start="2577:5" pos:end="2577:19"><expr pos:start="2577:5" pos:end="2577:18"><call pos:start="2577:5" pos:end="2577:18"><name pos:start="2577:5" pos:end="2577:14">dpy_resize</name><argument_list pos:start="2577:15" pos:end="2577:18">(<argument pos:start="2577:16" pos:end="2577:17"><expr pos:start="2577:16" pos:end="2577:17"><name pos:start="2577:16" pos:end="2577:17">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2579:5" pos:end="2579:24"><expr pos:start="2579:5" pos:end="2579:23"><name pos:start="2579:5" pos:end="2579:7">dcl</name> <operator pos:start="2579:9" pos:end="2579:9">=</operator> <name pos:start="2579:11" pos:end="2579:23"><name pos:start="2579:11" pos:end="2579:12">ds</name><operator pos:start="2579:13" pos:end="2579:14">-&gt;</operator><name pos:start="2579:15" pos:end="2579:23">listeners</name></name></expr>;</expr_stmt>

    <while pos:start="2581:5" pos:end="2595:5">while <condition pos:start="2581:11" pos:end="2581:23">(<expr pos:start="2581:12" pos:end="2581:22"><name pos:start="2581:12" pos:end="2581:14">dcl</name> <operator pos:start="2581:16" pos:end="2581:17">!=</operator> <name pos:start="2581:19" pos:end="2581:22">NULL</name></expr>)</condition> <block pos:start="2581:25" pos:end="2595:5">{<block_content pos:start="2583:9" pos:end="2593:24">

        <if_stmt pos:start="2583:9" pos:end="2591:9"><if pos:start="2583:9" pos:end="2591:9">if <condition pos:start="2583:12" pos:end="2583:37">(<expr pos:start="2583:13" pos:end="2583:36"><name pos:start="2583:13" pos:end="2583:28"><name pos:start="2583:13" pos:end="2583:15">dcl</name><operator pos:start="2583:16" pos:end="2583:17">-&gt;</operator><name pos:start="2583:18" pos:end="2583:28">dpy_refresh</name></name> <operator pos:start="2583:30" pos:end="2583:31">!=</operator> <name pos:start="2583:33" pos:end="2583:36">NULL</name></expr>)</condition> <block pos:start="2583:39" pos:end="2591:9">{<block_content pos:start="2585:13" pos:end="2589:18">

            <expr_stmt pos:start="2585:13" pos:end="2585:72"><expr pos:start="2585:13" pos:end="2585:71"><name pos:start="2585:13" pos:end="2585:25"><name pos:start="2585:13" pos:end="2585:14">ds</name><operator pos:start="2585:15" pos:end="2585:16">-&gt;</operator><name pos:start="2585:17" pos:end="2585:25">gui_timer</name></name> <operator pos:start="2585:27" pos:end="2585:27">=</operator> <call pos:start="2585:29" pos:end="2585:71"><name pos:start="2585:29" pos:end="2585:45">qemu_new_timer_ms</name><argument_list pos:start="2585:46" pos:end="2585:71">(<argument pos:start="2585:47" pos:end="2585:54"><expr pos:start="2585:47" pos:end="2585:54"><name pos:start="2585:47" pos:end="2585:54">rt_clock</name></expr></argument>, <argument pos:start="2585:57" pos:end="2585:66"><expr pos:start="2585:57" pos:end="2585:66"><name pos:start="2585:57" pos:end="2585:66">gui_update</name></expr></argument>, <argument pos:start="2585:69" pos:end="2585:70"><expr pos:start="2585:69" pos:end="2585:70"><name pos:start="2585:69" pos:end="2585:70">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2587:13" pos:end="2587:71"><expr pos:start="2587:13" pos:end="2587:70"><call pos:start="2587:13" pos:end="2587:70"><name pos:start="2587:13" pos:end="2587:26">qemu_mod_timer</name><argument_list pos:start="2587:27" pos:end="2587:70">(<argument pos:start="2587:28" pos:end="2587:40"><expr pos:start="2587:28" pos:end="2587:40"><name pos:start="2587:28" pos:end="2587:40"><name pos:start="2587:28" pos:end="2587:29">ds</name><operator pos:start="2587:30" pos:end="2587:31">-&gt;</operator><name pos:start="2587:32" pos:end="2587:40">gui_timer</name></name></expr></argument>, <argument pos:start="2587:43" pos:end="2587:69"><expr pos:start="2587:43" pos:end="2587:69"><call pos:start="2587:43" pos:end="2587:69"><name pos:start="2587:43" pos:end="2587:59">qemu_get_clock_ms</name><argument_list pos:start="2587:60" pos:end="2587:69">(<argument pos:start="2587:61" pos:end="2587:68"><expr pos:start="2587:61" pos:end="2587:68"><name pos:start="2587:61" pos:end="2587:68">rt_clock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="2589:13" pos:end="2589:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2593:9" pos:end="2593:24"><expr pos:start="2593:9" pos:end="2593:23"><name pos:start="2593:9" pos:end="2593:11">dcl</name> <operator pos:start="2593:13" pos:end="2593:13">=</operator> <name pos:start="2593:15" pos:end="2593:23"><name pos:start="2593:15" pos:end="2593:17">dcl</name><operator pos:start="2593:18" pos:end="2593:19">-&gt;</operator><name pos:start="2593:20" pos:end="2593:23">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="2597:5" pos:end="2597:34"><expr pos:start="2597:5" pos:end="2597:33"><call pos:start="2597:5" pos:end="2597:33"><name pos:start="2597:5" pos:end="2597:29">text_consoles_set_display</name><argument_list pos:start="2597:30" pos:end="2597:33">(<argument pos:start="2597:31" pos:end="2597:32"><expr pos:start="2597:31" pos:end="2597:32"><name pos:start="2597:31" pos:end="2597:32">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2601:5" pos:end="2609:5"><if pos:start="2601:5" pos:end="2609:5">if <condition pos:start="2601:8" pos:end="2601:56">(<expr pos:start="2601:9" pos:end="2601:55"><name pos:start="2601:9" pos:end="2601:19">gdbstub_dev</name> <operator pos:start="2601:21" pos:end="2601:22">&amp;&amp;</operator> <call pos:start="2601:24" pos:end="2601:51"><name pos:start="2601:24" pos:end="2601:38">gdbserver_start</name><argument_list pos:start="2601:39" pos:end="2601:51">(<argument pos:start="2601:40" pos:end="2601:50"><expr pos:start="2601:40" pos:end="2601:50"><name pos:start="2601:40" pos:end="2601:50">gdbstub_dev</name></expr></argument>)</argument_list></call> <operator pos:start="2601:53" pos:end="2601:53">&lt;</operator> <literal type="number" pos:start="2601:55" pos:end="2601:55">0</literal></expr>)</condition> <block pos:start="2601:58" pos:end="2609:5">{<block_content pos:start="2603:9" pos:end="2607:16">

        <expr_stmt pos:start="2603:9" pos:end="2605:29"><expr pos:start="2603:9" pos:end="2605:28"><call pos:start="2603:9" pos:end="2605:28"><name pos:start="2603:9" pos:end="2603:15">fprintf</name><argument_list pos:start="2603:16" pos:end="2605:28">(<argument pos:start="2603:17" pos:end="2603:22"><expr pos:start="2603:17" pos:end="2603:22"><name pos:start="2603:17" pos:end="2603:22">stderr</name></expr></argument>, <argument pos:start="2603:25" pos:end="2603:73"><expr pos:start="2603:25" pos:end="2603:73"><literal type="string" pos:start="2603:25" pos:end="2603:73">"qemu: could not open gdbserver on device '%s'\n"</literal></expr></argument>,

                <argument pos:start="2605:17" pos:end="2605:27"><expr pos:start="2605:17" pos:end="2605:27"><name pos:start="2605:17" pos:end="2605:27">gdbstub_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2607:9" pos:end="2607:16"><expr pos:start="2607:9" pos:end="2607:15"><call pos:start="2607:9" pos:end="2607:15"><name pos:start="2607:9" pos:end="2607:12">exit</name><argument_list pos:start="2607:13" pos:end="2607:15">(<argument pos:start="2607:14" pos:end="2607:14"><expr pos:start="2607:14" pos:end="2607:14"><literal type="number" pos:start="2607:14" pos:end="2607:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="2613:5" pos:end="2613:33"><expr pos:start="2613:5" pos:end="2613:32"><call pos:start="2613:5" pos:end="2613:32"><name pos:start="2613:5" pos:end="2613:30">qdev_machine_creation_done</name><argument_list pos:start="2613:31" pos:end="2613:32">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="2617:5" pos:end="2623:5"><if pos:start="2617:5" pos:end="2623:5">if <condition pos:start="2617:8" pos:end="2617:28">(<expr pos:start="2617:9" pos:end="2617:27"><call pos:start="2617:9" pos:end="2617:22"><name pos:start="2617:9" pos:end="2617:20">rom_load_all</name><argument_list pos:start="2617:21" pos:end="2617:22">()</argument_list></call> <operator pos:start="2617:24" pos:end="2617:25">!=</operator> <literal type="number" pos:start="2617:27" pos:end="2617:27">0</literal></expr>)</condition> <block pos:start="2617:30" pos:end="2623:5">{<block_content pos:start="2619:9" pos:end="2621:16">

        <expr_stmt pos:start="2619:9" pos:end="2619:48"><expr pos:start="2619:9" pos:end="2619:47"><call pos:start="2619:9" pos:end="2619:47"><name pos:start="2619:9" pos:end="2619:15">fprintf</name><argument_list pos:start="2619:16" pos:end="2619:47">(<argument pos:start="2619:17" pos:end="2619:22"><expr pos:start="2619:17" pos:end="2619:22"><name pos:start="2619:17" pos:end="2619:22">stderr</name></expr></argument>, <argument pos:start="2619:25" pos:end="2619:46"><expr pos:start="2619:25" pos:end="2619:46"><literal type="string" pos:start="2619:25" pos:end="2619:46">"rom loading failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2621:9" pos:end="2621:16"><expr pos:start="2621:9" pos:end="2621:15"><call pos:start="2621:9" pos:end="2621:15"><name pos:start="2621:9" pos:end="2621:12">exit</name><argument_list pos:start="2621:13" pos:end="2621:15">(<argument pos:start="2621:14" pos:end="2621:14"><expr pos:start="2621:14" pos:end="2621:14"><literal type="number" pos:start="2621:14" pos:end="2621:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="2627:5" pos:end="2629:39">/* TODO: once all bus devices are qdevified, this should be done

     * when bus is created by qdev.c */</comment>

    <expr_stmt pos:start="2631:5" pos:end="2631:65"><expr pos:start="2631:5" pos:end="2631:64"><call pos:start="2631:5" pos:end="2631:64"><name pos:start="2631:5" pos:end="2631:23">qemu_register_reset</name><argument_list pos:start="2631:24" pos:end="2631:64">(<argument pos:start="2631:25" pos:end="2631:41"><expr pos:start="2631:25" pos:end="2631:41"><name pos:start="2631:25" pos:end="2631:41">qbus_reset_all_fn</name></expr></argument>, <argument pos:start="2631:44" pos:end="2631:63"><expr pos:start="2631:44" pos:end="2631:63"><call pos:start="2631:44" pos:end="2631:63"><name pos:start="2631:44" pos:end="2631:61">sysbus_get_default</name><argument_list pos:start="2631:62" pos:end="2631:63">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2633:5" pos:end="2633:43"><expr pos:start="2633:5" pos:end="2633:42"><call pos:start="2633:5" pos:end="2633:42"><name pos:start="2633:5" pos:end="2633:40">qemu_run_machine_init_done_notifiers</name><argument_list pos:start="2633:41" pos:end="2633:42">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2637:5" pos:end="2637:38"><expr pos:start="2637:5" pos:end="2637:37"><call pos:start="2637:5" pos:end="2637:37"><name pos:start="2637:5" pos:end="2637:21">qemu_system_reset</name><argument_list pos:start="2637:22" pos:end="2637:37">(<argument pos:start="2637:23" pos:end="2637:36"><expr pos:start="2637:23" pos:end="2637:36"><name pos:start="2637:23" pos:end="2637:36">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="2639:5" pos:end="2647:5"><if pos:start="2639:5" pos:end="2647:5">if <condition pos:start="2639:8" pos:end="2639:15">(<expr pos:start="2639:9" pos:end="2639:14"><name pos:start="2639:9" pos:end="2639:14">loadvm</name></expr>)</condition> <block pos:start="2639:17" pos:end="2647:5">{<block_content pos:start="2641:9" pos:end="2645:9">

        <if_stmt pos:start="2641:9" pos:end="2645:9"><if pos:start="2641:9" pos:end="2645:9">if <condition pos:start="2641:12" pos:end="2641:37">(<expr pos:start="2641:13" pos:end="2641:36"><call pos:start="2641:13" pos:end="2641:32"><name pos:start="2641:13" pos:end="2641:24">load_vmstate</name><argument_list pos:start="2641:25" pos:end="2641:32">(<argument pos:start="2641:26" pos:end="2641:31"><expr pos:start="2641:26" pos:end="2641:31"><name pos:start="2641:26" pos:end="2641:31">loadvm</name></expr></argument>)</argument_list></call> <operator pos:start="2641:34" pos:end="2641:34">&lt;</operator> <literal type="number" pos:start="2641:36" pos:end="2641:36">0</literal></expr>)</condition> <block pos:start="2641:39" pos:end="2645:9">{<block_content pos:start="2643:13" pos:end="2643:26">

            <expr_stmt pos:start="2643:13" pos:end="2643:26"><expr pos:start="2643:13" pos:end="2643:25"><name pos:start="2643:13" pos:end="2643:21">autostart</name> <operator pos:start="2643:23" pos:end="2643:23">=</operator> <literal type="number" pos:start="2643:25" pos:end="2643:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="2651:5" pos:end="2671:5"><if pos:start="2651:5" pos:end="2667:5">if <condition pos:start="2651:8" pos:end="2651:17">(<expr pos:start="2651:9" pos:end="2651:16"><name pos:start="2651:9" pos:end="2651:16">incoming</name></expr>)</condition> <block pos:start="2651:19" pos:end="2667:5">{<block_content pos:start="2653:9" pos:end="2665:9">

        <expr_stmt pos:start="2653:9" pos:end="2653:42"><expr pos:start="2653:9" pos:end="2653:41"><call pos:start="2653:9" pos:end="2653:41"><name pos:start="2653:9" pos:end="2653:20">runstate_set</name><argument_list pos:start="2653:21" pos:end="2653:41">(<argument pos:start="2653:22" pos:end="2653:40"><expr pos:start="2653:22" pos:end="2653:40"><name pos:start="2653:22" pos:end="2653:40">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="2655:9" pos:end="2655:58"><decl pos:start="2655:9" pos:end="2655:57"><type pos:start="2655:9" pos:end="2655:11"><name pos:start="2655:9" pos:end="2655:11">int</name></type> <name pos:start="2655:13" pos:end="2655:15">ret</name> <init pos:start="2655:17" pos:end="2655:57">= <expr pos:start="2655:19" pos:end="2655:57"><call pos:start="2655:19" pos:end="2655:57"><name pos:start="2655:19" pos:end="2655:47">qemu_start_incoming_migration</name><argument_list pos:start="2655:48" pos:end="2655:57">(<argument pos:start="2655:49" pos:end="2655:56"><expr pos:start="2655:49" pos:end="2655:56"><name pos:start="2655:49" pos:end="2655:56">incoming</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="2657:9" pos:end="2665:9"><if pos:start="2657:9" pos:end="2665:9">if <condition pos:start="2657:12" pos:end="2657:20">(<expr pos:start="2657:13" pos:end="2657:19"><name pos:start="2657:13" pos:end="2657:15">ret</name> <operator pos:start="2657:17" pos:end="2657:17">&lt;</operator> <literal type="number" pos:start="2657:19" pos:end="2657:19">0</literal></expr>)</condition> <block pos:start="2657:22" pos:end="2665:9">{<block_content pos:start="2659:13" pos:end="2663:22">

            <expr_stmt pos:start="2659:13" pos:end="2661:35"><expr pos:start="2659:13" pos:end="2661:34"><call pos:start="2659:13" pos:end="2661:34"><name pos:start="2659:13" pos:end="2659:19">fprintf</name><argument_list pos:start="2659:20" pos:end="2661:34">(<argument pos:start="2659:21" pos:end="2659:26"><expr pos:start="2659:21" pos:end="2659:26"><name pos:start="2659:21" pos:end="2659:26">stderr</name></expr></argument>, <argument pos:start="2659:29" pos:end="2659:76"><expr pos:start="2659:29" pos:end="2659:76"><literal type="string" pos:start="2659:29" pos:end="2659:76">"Migration failed. Exit code %s(%d), exiting.\n"</literal></expr></argument>,

                    <argument pos:start="2661:21" pos:end="2661:28"><expr pos:start="2661:21" pos:end="2661:28"><name pos:start="2661:21" pos:end="2661:28">incoming</name></expr></argument>, <argument pos:start="2661:31" pos:end="2661:33"><expr pos:start="2661:31" pos:end="2661:33"><name pos:start="2661:31" pos:end="2661:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2663:13" pos:end="2663:22"><expr pos:start="2663:13" pos:end="2663:21"><call pos:start="2663:13" pos:end="2663:21"><name pos:start="2663:13" pos:end="2663:16">exit</name><argument_list pos:start="2663:17" pos:end="2663:21">(<argument pos:start="2663:18" pos:end="2663:20"><expr pos:start="2663:18" pos:end="2663:20"><name pos:start="2663:18" pos:end="2663:20">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="2667:7" pos:end="2671:5">else if <condition pos:start="2667:15" pos:end="2667:25">(<expr pos:start="2667:16" pos:end="2667:24"><name pos:start="2667:16" pos:end="2667:24">autostart</name></expr>)</condition> <block pos:start="2667:27" pos:end="2671:5">{<block_content pos:start="2669:9" pos:end="2669:19">

        <expr_stmt pos:start="2669:9" pos:end="2669:19"><expr pos:start="2669:9" pos:end="2669:18"><call pos:start="2669:9" pos:end="2669:18"><name pos:start="2669:9" pos:end="2669:16">vm_start</name><argument_list pos:start="2669:17" pos:end="2669:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="2675:5" pos:end="2675:20"><expr pos:start="2675:5" pos:end="2675:19"><call pos:start="2675:5" pos:end="2675:19"><name pos:start="2675:5" pos:end="2675:17">os_setup_post</name><argument_list pos:start="2675:18" pos:end="2675:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="2679:5" pos:end="2679:23"><expr pos:start="2679:5" pos:end="2679:22"><call pos:start="2679:5" pos:end="2679:22"><name pos:start="2679:5" pos:end="2679:20">resume_all_vcpus</name><argument_list pos:start="2679:21" pos:end="2679:22">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2681:5" pos:end="2681:16"><expr pos:start="2681:5" pos:end="2681:15"><call pos:start="2681:5" pos:end="2681:15"><name pos:start="2681:5" pos:end="2681:13">main_loop</name><argument_list pos:start="2681:14" pos:end="2681:15">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2683:5" pos:end="2683:21"><expr pos:start="2683:5" pos:end="2683:20"><call pos:start="2683:5" pos:end="2683:20"><name pos:start="2683:5" pos:end="2683:18">bdrv_close_all</name><argument_list pos:start="2683:19" pos:end="2683:20">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2685:5" pos:end="2685:22"><expr pos:start="2685:5" pos:end="2685:21"><call pos:start="2685:5" pos:end="2685:21"><name pos:start="2685:5" pos:end="2685:19">pause_all_vcpus</name><argument_list pos:start="2685:20" pos:end="2685:21">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2687:5" pos:end="2687:18"><expr pos:start="2687:5" pos:end="2687:17"><call pos:start="2687:5" pos:end="2687:17"><name pos:start="2687:5" pos:end="2687:15">net_cleanup</name><argument_list pos:start="2687:16" pos:end="2687:17">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="2689:5" pos:end="2689:15"><expr pos:start="2689:5" pos:end="2689:14"><call pos:start="2689:5" pos:end="2689:14"><name pos:start="2689:5" pos:end="2689:12">res_free</name><argument_list pos:start="2689:13" pos:end="2689:14">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="2693:5" pos:end="2693:13">return <expr pos:start="2693:12" pos:end="2693:12"><literal type="number" pos:start="2693:12" pos:end="2693:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
