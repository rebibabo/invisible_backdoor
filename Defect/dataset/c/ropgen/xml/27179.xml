<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27179.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">json_lexer_feed_char</name><parameter_list pos:start="1:32" pos:end="1:70">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:41">JSONLexer</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">lexer</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:57"><decl pos:start="1:51" pos:end="1:57"><type pos:start="1:51" pos:end="1:57"><name pos:start="1:51" pos:end="1:54">char</name></type> <name pos:start="1:56" pos:end="1:57">ch</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:69"><decl pos:start="1:60" pos:end="1:69"><type pos:start="1:60" pos:end="1:69"><name pos:start="1:60" pos:end="1:63">bool</name></type> <name pos:start="1:65" pos:end="1:69">flush</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:21">char_consumed</name></decl>, <decl pos:start="5:24" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:32">new_state</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:15"><expr pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:9">lexer</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:12">x</name></name><operator pos:start="9:13" pos:end="9:14">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:10">ch</name> <operator pos:start="11:12" pos:end="11:13">==</operator> <literal type="char" pos:start="11:15" pos:end="11:18">'\n'</literal></expr>)</condition> <block pos:start="11:21" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:19">

        <expr_stmt pos:start="13:9" pos:end="13:21"><expr pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:13">lexer</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:16">x</name></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:19"><expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:13">lexer</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:16">y</name></name><operator pos:start="15:17" pos:end="15:18">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <do pos:start="21:5" pos:end="79:39">do <block pos:start="21:8" pos:end="79:5">{<block_content pos:start="23:9" pos:end="77:33">

        <expr_stmt pos:start="23:9" pos:end="23:58"><expr pos:start="23:9" pos:end="23:57"><name pos:start="23:9" pos:end="23:17">new_state</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:57"><name pos:start="23:21" pos:end="23:30">json_lexer</name><index pos:start="23:31" pos:end="23:44">[<expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:36">lexer</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:43">state</name></name></expr>]</index><index pos:start="23:45" pos:end="23:57">[<expr pos:start="23:46" pos:end="23:56"><operator pos:start="23:46" pos:end="23:46">(</operator><name pos:start="23:47" pos:end="23:53">uint8_t</name><operator pos:start="23:54" pos:end="23:54">)</operator><name pos:start="23:55" pos:end="23:56">ch</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:76"><expr pos:start="25:9" pos:end="25:75"><name pos:start="25:9" pos:end="25:21">char_consumed</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <operator pos:start="25:25" pos:end="25:25">!</operator><call pos:start="25:26" pos:end="25:75"><name pos:start="25:26" pos:end="25:50">TERMINAL_NEEDED_LOOKAHEAD</name><argument_list pos:start="25:51" pos:end="25:75">(<argument pos:start="25:52" pos:end="25:63"><expr pos:start="25:52" pos:end="25:63"><name pos:start="25:52" pos:end="25:63"><name pos:start="25:52" pos:end="25:56">lexer</name><operator pos:start="25:57" pos:end="25:58">-&gt;</operator><name pos:start="25:59" pos:end="25:63">state</name></name></expr></argument>, <argument pos:start="25:66" pos:end="25:74"><expr pos:start="25:66" pos:end="25:74"><name pos:start="25:66" pos:end="25:74">new_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:26">(<expr pos:start="27:13" pos:end="27:25"><name pos:start="27:13" pos:end="27:25">char_consumed</name></expr>)</condition> <block pos:start="27:28" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:49">

            <expr_stmt pos:start="29:13" pos:end="29:49"><expr pos:start="29:13" pos:end="29:48"><call pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:30">qstring_append_chr</name><argument_list pos:start="29:31" pos:end="29:48">(<argument pos:start="29:32" pos:end="29:43"><expr pos:start="29:32" pos:end="29:43"><name pos:start="29:32" pos:end="29:43"><name pos:start="29:32" pos:end="29:36">lexer</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:43">token</name></name></expr></argument>, <argument pos:start="29:46" pos:end="29:47"><expr pos:start="29:46" pos:end="29:47"><name pos:start="29:46" pos:end="29:47">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="35:9" pos:end="75:9">switch <condition pos:start="35:16" pos:end="35:26">(<expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:25">new_state</name></expr>)</condition> <block pos:start="35:28" pos:end="75:9">{<block_content pos:start="37:9" pos:end="73:18">

        <case pos:start="37:9" pos:end="37:27">case <expr pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:26">JSON_OPERATOR</name></expr>:</case>

        <case pos:start="39:9" pos:end="39:25">case <expr pos:start="39:14" pos:end="39:24"><name pos:start="39:14" pos:end="39:24">JSON_ESCAPE</name></expr>:</case>

        <case pos:start="41:9" pos:end="41:26">case <expr pos:start="41:14" pos:end="41:25"><name pos:start="41:14" pos:end="41:25">JSON_INTEGER</name></expr>:</case>

        <case pos:start="43:9" pos:end="43:24">case <expr pos:start="43:14" pos:end="43:23"><name pos:start="43:14" pos:end="43:23">JSON_FLOAT</name></expr>:</case>

        <case pos:start="45:9" pos:end="45:26">case <expr pos:start="45:14" pos:end="45:25"><name pos:start="45:14" pos:end="45:25">JSON_KEYWORD</name></expr>:</case>

        <case pos:start="47:9" pos:end="47:25">case <expr pos:start="47:14" pos:end="47:24"><name pos:start="47:14" pos:end="47:24">JSON_STRING</name></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:76"><expr pos:start="49:13" pos:end="49:75"><call pos:start="49:13" pos:end="49:75"><name pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:17">lexer</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">emit</name></name><argument_list pos:start="49:24" pos:end="49:75">(<argument pos:start="49:25" pos:end="49:29"><expr pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:29">lexer</name></expr></argument>, <argument pos:start="49:32" pos:end="49:43"><expr pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:36">lexer</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:43">token</name></name></expr></argument>, <argument pos:start="49:46" pos:end="49:54"><expr pos:start="49:46" pos:end="49:54"><name pos:start="49:46" pos:end="49:54">new_state</name></expr></argument>, <argument pos:start="49:57" pos:end="49:64"><expr pos:start="49:57" pos:end="49:64"><name pos:start="49:57" pos:end="49:64"><name pos:start="49:57" pos:end="49:61">lexer</name><operator pos:start="49:62" pos:end="49:63">-&gt;</operator><name pos:start="49:64" pos:end="49:64">x</name></name></expr></argument>, <argument pos:start="49:67" pos:end="49:74"><expr pos:start="49:67" pos:end="49:74"><name pos:start="49:67" pos:end="49:74"><name pos:start="49:67" pos:end="49:71">lexer</name><operator pos:start="49:72" pos:end="49:73">-&gt;</operator><name pos:start="49:74" pos:end="49:74">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="51:9" pos:end="51:23">case <expr pos:start="51:14" pos:end="51:22"><name pos:start="51:14" pos:end="51:22">JSON_SKIP</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><call pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:19">QDECREF</name><argument_list pos:start="53:20" pos:end="53:33">(<argument pos:start="53:21" pos:end="53:32"><expr pos:start="53:21" pos:end="53:32"><name pos:start="53:21" pos:end="53:32"><name pos:start="53:21" pos:end="53:25">lexer</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:32">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:41"><expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:17">lexer</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:24">token</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <call pos:start="55:28" pos:end="55:40"><name pos:start="55:28" pos:end="55:38">qstring_new</name><argument_list pos:start="55:39" pos:end="55:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:33"><expr pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:21">new_state</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:32">IN_START</name></expr>;</expr_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        <case pos:start="61:9" pos:end="61:22">case <expr pos:start="61:14" pos:end="61:21"><name pos:start="61:14" pos:end="61:21">IN_ERROR</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><call pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:19">QDECREF</name><argument_list pos:start="63:20" pos:end="63:33">(<argument pos:start="63:21" pos:end="63:32"><expr pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:25">lexer</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:32">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:17">lexer</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:24">token</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <call pos:start="65:28" pos:end="65:40"><name pos:start="65:28" pos:end="65:38">qstring_new</name><argument_list pos:start="65:39" pos:end="65:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:21">new_state</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:32">IN_START</name></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:27">return <expr pos:start="69:20" pos:end="69:26"><operator pos:start="69:20" pos:end="69:20">-</operator><name pos:start="69:21" pos:end="69:26">EINVAL</name></expr>;</return>

        <default pos:start="71:9" pos:end="71:16">default:</default>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="77:9" pos:end="77:33"><expr pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:13">lexer</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:20">state</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:32">new_state</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="79:13" pos:end="79:38">(<expr pos:start="79:14" pos:end="79:37"><operator pos:start="79:14" pos:end="79:14">!</operator><name pos:start="79:15" pos:end="79:27">char_consumed</name> <operator pos:start="79:29" pos:end="79:30">&amp;&amp;</operator> <operator pos:start="79:32" pos:end="79:32">!</operator><name pos:start="79:33" pos:end="79:37">flush</name></expr>)</condition>;</do>



    <comment type="block" pos:start="83:5" pos:end="87:7">/* Do not let a single token grow to an arbitrarily large size,

     * this is a security consideration.

     */</comment>

    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:46">(<expr pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:13">lexer</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:20">token</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:28">length</name></name> <operator pos:start="89:30" pos:end="89:30">&gt;</operator> <name pos:start="89:32" pos:end="89:45">MAX_TOKEN_SIZE</name></expr>)</condition> <block pos:start="89:48" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:32">

        <expr_stmt pos:start="91:9" pos:end="91:75"><expr pos:start="91:9" pos:end="91:74"><call pos:start="91:9" pos:end="91:74"><name pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:13">lexer</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:19">emit</name></name><argument_list pos:start="91:20" pos:end="91:74">(<argument pos:start="91:21" pos:end="91:25"><expr pos:start="91:21" pos:end="91:25"><name pos:start="91:21" pos:end="91:25">lexer</name></expr></argument>, <argument pos:start="91:28" pos:end="91:39"><expr pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:32">lexer</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:39">token</name></name></expr></argument>, <argument pos:start="91:42" pos:end="91:53"><expr pos:start="91:42" pos:end="91:53"><name pos:start="91:42" pos:end="91:53"><name pos:start="91:42" pos:end="91:46">lexer</name><operator pos:start="91:47" pos:end="91:48">-&gt;</operator><name pos:start="91:49" pos:end="91:53">state</name></name></expr></argument>, <argument pos:start="91:56" pos:end="91:63"><expr pos:start="91:56" pos:end="91:63"><name pos:start="91:56" pos:end="91:63"><name pos:start="91:56" pos:end="91:60">lexer</name><operator pos:start="91:61" pos:end="91:62">-&gt;</operator><name pos:start="91:63" pos:end="91:63">x</name></name></expr></argument>, <argument pos:start="91:66" pos:end="91:73"><expr pos:start="91:66" pos:end="91:73"><name pos:start="91:66" pos:end="91:73"><name pos:start="91:66" pos:end="91:70">lexer</name><operator pos:start="91:71" pos:end="91:72">-&gt;</operator><name pos:start="91:73" pos:end="91:73">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><call pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:15">QDECREF</name><argument_list pos:start="93:16" pos:end="93:29">(<argument pos:start="93:17" pos:end="93:28"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:21">lexer</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:28">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:13">lexer</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:20">token</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="95:36"><name pos:start="95:24" pos:end="95:34">qstring_new</name><argument_list pos:start="95:35" pos:end="95:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:32"><expr pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:13">lexer</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">state</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <name pos:start="97:24" pos:end="97:31">IN_START</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
