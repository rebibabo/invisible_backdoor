<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12167.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">cbs_mpeg2_read_unit</name><parameter_list pos:start="1:31" pos:end="3:56">(<parameter pos:start="1:32" pos:end="1:57"><decl pos:start="1:32" pos:end="1:57"><type pos:start="1:32" pos:end="1:57"><name pos:start="1:32" pos:end="1:52">CodedBitstreamContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">ctx</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:55"><decl pos:start="3:32" pos:end="3:55"><type pos:start="3:32" pos:end="3:55"><name pos:start="3:32" pos:end="3:49">CodedBitstreamUnit</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">unit</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">BitstreamContext</name></type> <name pos:start="7:22" pos:end="7:23">bc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:63"><expr pos:start="13:5" pos:end="13:62"><name pos:start="13:5" pos:end="13:7">err</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:62"><name pos:start="13:11" pos:end="13:24">bitstream_init</name><argument_list pos:start="13:25" pos:end="13:62">(<argument pos:start="13:26" pos:end="13:28"><expr pos:start="13:26" pos:end="13:28"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:28">bc</name></expr></argument>, <argument pos:start="13:31" pos:end="13:40"><expr pos:start="13:31" pos:end="13:40"><name pos:start="13:31" pos:end="13:40"><name pos:start="13:31" pos:end="13:34">unit</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:40">data</name></name></expr></argument>, <argument pos:start="13:43" pos:end="13:61"><expr pos:start="13:43" pos:end="13:61"><literal type="number" pos:start="13:43" pos:end="13:43">8</literal> <operator pos:start="13:45" pos:end="13:45">*</operator> <name pos:start="13:47" pos:end="13:61"><name pos:start="13:47" pos:end="13:50">unit</name><operator pos:start="13:51" pos:end="13:52">-&gt;</operator><name pos:start="13:53" pos:end="13:61">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:19"><if pos:start="15:5" pos:end="17:19">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">err</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:19"><block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">err</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="135:5"><if pos:start="21:5" pos:end="79:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><call pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:28">MPEG2_START_IS_SLICE</name><argument_list pos:start="21:29" pos:end="21:40">(<argument pos:start="21:30" pos:end="21:39"><expr pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:33">unit</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:39">type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:43" pos:end="79:5">{<block_content pos:start="23:9" pos:end="75:30">

        <decl_stmt pos:start="23:9" pos:end="23:29"><decl pos:start="23:9" pos:end="23:28"><type pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:21">MPEG2RawSlice</name> <modifier pos:start="23:23" pos:end="23:23">*</modifier></type><name pos:start="23:24" pos:end="23:28">slice</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:21"><decl pos:start="25:9" pos:end="25:15"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:15">pos</name></decl>, <decl pos:start="25:18" pos:end="25:20"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:18" pos:end="25:20">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:13">slice</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:42"><name pos:start="29:17" pos:end="29:26">av_mallocz</name><argument_list pos:start="29:27" pos:end="29:42">(<argument pos:start="29:28" pos:end="29:41"><expr pos:start="29:28" pos:end="29:41"><sizeof pos:start="29:28" pos:end="29:41">sizeof<argument_list pos:start="29:34" pos:end="29:41">(<argument pos:start="29:35" pos:end="29:40"><expr pos:start="29:35" pos:end="29:40"><operator pos:start="29:35" pos:end="29:35">*</operator><name pos:start="29:36" pos:end="29:40">slice</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="33:35"><if pos:start="31:9" pos:end="33:35">if <condition pos:start="31:12" pos:end="31:19">(<expr pos:start="31:13" pos:end="31:18"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:18">slice</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:35"><block_content pos:start="33:13" pos:end="33:35">

            <return pos:start="33:13" pos:end="33:35">return <expr pos:start="33:20" pos:end="33:34"><call pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:26">AVERROR</name><argument_list pos:start="33:27" pos:end="33:34">(<argument pos:start="33:28" pos:end="33:33"><expr pos:start="33:28" pos:end="33:33"><name pos:start="33:28" pos:end="33:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:68"><expr pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:11">err</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:67"><name pos:start="35:15" pos:end="35:41">cbs_mpeg2_read_slice_header</name><argument_list pos:start="35:42" pos:end="35:67">(<argument pos:start="35:43" pos:end="35:45"><expr pos:start="35:43" pos:end="35:45"><name pos:start="35:43" pos:end="35:45">ctx</name></expr></argument>, <argument pos:start="35:48" pos:end="35:50"><expr pos:start="35:48" pos:end="35:50"><operator pos:start="35:48" pos:end="35:48">&amp;</operator><name pos:start="35:49" pos:end="35:50">bc</name></expr></argument>, <argument pos:start="35:53" pos:end="35:66"><expr pos:start="35:53" pos:end="35:66"><operator pos:start="35:53" pos:end="35:53">&amp;</operator><name pos:start="35:54" pos:end="35:66"><name pos:start="35:54" pos:end="35:58">slice</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:66">header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:20">(<expr pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:15">err</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr>)</condition> <block pos:start="37:22" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:23">

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><call pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:19">av_free</name><argument_list pos:start="39:20" pos:end="39:26">(<argument pos:start="39:21" pos:end="39:25"><expr pos:start="39:21" pos:end="39:25"><name pos:start="39:21" pos:end="39:25">slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:23">return <expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:11">pos</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:33"><name pos:start="47:15" pos:end="47:28">bitstream_tell</name><argument_list pos:start="47:29" pos:end="47:33">(<argument pos:start="47:30" pos:end="47:32"><expr pos:start="47:30" pos:end="47:32"><operator pos:start="47:30" pos:end="47:30">&amp;</operator><name pos:start="47:31" pos:end="47:32">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:30"><expr pos:start="49:9" pos:end="49:29"><name pos:start="49:9" pos:end="49:11">len</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:29"><name pos:start="49:15" pos:end="49:18">unit</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:29">data_size</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:13">slice</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:24">data_size</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:30">len</name> <operator pos:start="53:32" pos:end="53:32">-</operator> <name pos:start="53:34" pos:end="53:36">pos</name> <operator pos:start="53:38" pos:end="53:38">/</operator> <literal type="number" pos:start="53:40" pos:end="53:40">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:13">slice</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:19">data</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:49"><name pos:start="55:23" pos:end="55:31">av_malloc</name><argument_list pos:start="55:32" pos:end="55:49">(<argument pos:start="55:33" pos:end="55:48"><expr pos:start="55:33" pos:end="55:48"><name pos:start="55:33" pos:end="55:48"><name pos:start="55:33" pos:end="55:37">slice</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:48">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:24"><name pos:start="57:14" pos:end="57:18">slice</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:24">data</name></name></expr>)</condition> <block pos:start="57:27" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:35">

            <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><call pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:19">av_free</name><argument_list pos:start="59:20" pos:end="59:26">(<argument pos:start="59:21" pos:end="59:25"><expr pos:start="59:21" pos:end="59:25"><name pos:start="59:21" pos:end="59:25">slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:35">return <expr pos:start="61:20" pos:end="61:34"><call pos:start="61:20" pos:end="61:34"><name pos:start="61:20" pos:end="61:26">AVERROR</name><argument_list pos:start="61:27" pos:end="61:34">(<argument pos:start="61:28" pos:end="61:33"><expr pos:start="61:28" pos:end="61:33"><name pos:start="61:28" pos:end="61:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="69:55"><expr pos:start="67:9" pos:end="69:54"><call pos:start="67:9" pos:end="69:54"><name pos:start="67:9" pos:end="67:14">memcpy</name><argument_list pos:start="67:15" pos:end="69:54">(<argument pos:start="67:16" pos:end="67:26"><expr pos:start="67:16" pos:end="67:26"><name pos:start="67:16" pos:end="67:26"><name pos:start="67:16" pos:end="67:20">slice</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:26">data</name></name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:35"><expr pos:start="69:16" pos:end="69:35"><name pos:start="69:16" pos:end="69:25"><name pos:start="69:16" pos:end="69:19">unit</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:25">data</name></name> <operator pos:start="69:27" pos:end="69:27">+</operator> <name pos:start="69:29" pos:end="69:31">pos</name> <operator pos:start="69:33" pos:end="69:33">/</operator> <literal type="number" pos:start="69:35" pos:end="69:35">8</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:53"><expr pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:53"><name pos:start="69:38" pos:end="69:42">slice</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:53">data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:40"><expr pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:13">slice</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:29">data_bit_start</name></name> <operator pos:start="71:31" pos:end="71:31">=</operator> <name pos:start="71:33" pos:end="71:35">pos</name> <operator pos:start="71:37" pos:end="71:37">%</operator> <literal type="number" pos:start="71:39" pos:end="71:39">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:12">unit</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:21">content</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:29">slice</name></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="79:7" pos:end="135:5">else <block pos:start="79:12" pos:end="135:5">{<block_content pos:start="81:9" pos:end="133:9">

        <switch pos:start="81:9" pos:end="133:9">switch <condition pos:start="81:16" pos:end="81:27">(<expr pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:20">unit</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:26">type</name></name></expr>)</condition> <block pos:start="81:29" pos:end="133:9">{<block_content pos:start="113:13" pos:end="131:39">

<cpp:define pos:start="83:1" pos:end="111:18">#<cpp:directive pos:start="83:2" pos:end="83:7">define</cpp:directive> <cpp:macro pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:13">START</name><parameter_list pos:start="83:14" pos:end="83:37">(<parameter pos:start="83:15" pos:end="83:24"><type pos:start="83:15" pos:end="83:24"><name pos:start="83:15" pos:end="83:24">start_code</name></type></parameter>, <parameter pos:start="83:27" pos:end="83:30"><type pos:start="83:27" pos:end="83:30"><name pos:start="83:27" pos:end="83:30">type</name></type></parameter>, <parameter pos:start="83:33" pos:end="83:36"><type pos:start="83:33" pos:end="83:36"><name pos:start="83:33" pos:end="83:36">func</name></type></parameter>)</parameter_list></cpp:macro> \

        <cpp:value pos:start="85:9" pos:end="111:18">case start_code: \

            { \

                type *header; \

                header = av_mallocz(sizeof(*header)); \

                if (!header) \

                    return AVERROR(ENOMEM); \

                err = cbs_mpeg2_read_ ## func(ctx, &amp;bc, header); \

                if (err &lt; 0) { \

                    av_free(header); \

                    return err; \

                } \

                unit-&gt;content = header; \

            } \

            break;</cpp:value></cpp:define>

            <expr_stmt pos:start="113:13" pos:end="113:64"><expr pos:start="113:13" pos:end="113:63"><call pos:start="113:13" pos:end="113:63"><name pos:start="113:13" pos:end="113:17">START</name><argument_list pos:start="113:18" pos:end="113:63">(<argument pos:start="113:19" pos:end="113:22"><expr pos:start="113:19" pos:end="113:22"><literal type="number" pos:start="113:19" pos:end="113:22">0x00</literal></expr></argument>, <argument pos:start="113:25" pos:end="113:45"><expr pos:start="113:25" pos:end="113:45"><name pos:start="113:25" pos:end="113:45">MPEG2RawPictureHeader</name></expr></argument>,  <argument pos:start="113:49" pos:end="113:62"><expr pos:start="113:49" pos:end="113:62"><name pos:start="113:49" pos:end="113:62">picture_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:59"><expr pos:start="115:13" pos:end="115:58"><call pos:start="115:13" pos:end="115:58"><name pos:start="115:13" pos:end="115:17">START</name><argument_list pos:start="115:18" pos:end="115:58">(<argument pos:start="115:19" pos:end="115:22"><expr pos:start="115:19" pos:end="115:22"><literal type="number" pos:start="115:19" pos:end="115:22">0xb2</literal></expr></argument>, <argument pos:start="115:25" pos:end="115:40"><expr pos:start="115:25" pos:end="115:40"><name pos:start="115:25" pos:end="115:40">MPEG2RawUserData</name></expr></argument>,       <argument pos:start="115:49" pos:end="115:57"><expr pos:start="115:49" pos:end="115:57"><name pos:start="115:49" pos:end="115:57">user_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:65"><expr pos:start="117:13" pos:end="117:64"><call pos:start="117:13" pos:end="117:64"><name pos:start="117:13" pos:end="117:17">START</name><argument_list pos:start="117:18" pos:end="117:64">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><literal type="number" pos:start="117:19" pos:end="117:22">0xb3</literal></expr></argument>, <argument pos:start="117:25" pos:end="117:46"><expr pos:start="117:25" pos:end="117:46"><name pos:start="117:25" pos:end="117:46">MPEG2RawSequenceHeader</name></expr></argument>, <argument pos:start="117:49" pos:end="117:63"><expr pos:start="117:49" pos:end="117:63"><name pos:start="117:49" pos:end="117:63">sequence_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:64"><expr pos:start="119:13" pos:end="119:63"><call pos:start="119:13" pos:end="119:63"><name pos:start="119:13" pos:end="119:17">START</name><argument_list pos:start="119:18" pos:end="119:63">(<argument pos:start="119:19" pos:end="119:22"><expr pos:start="119:19" pos:end="119:22"><literal type="number" pos:start="119:19" pos:end="119:22">0xb5</literal></expr></argument>, <argument pos:start="119:25" pos:end="119:45"><expr pos:start="119:25" pos:end="119:45"><name pos:start="119:25" pos:end="119:45">MPEG2RawExtensionData</name></expr></argument>,  <argument pos:start="119:49" pos:end="119:62"><expr pos:start="119:49" pos:end="119:62"><name pos:start="119:49" pos:end="119:62">extension_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="124:0"><expr pos:start="121:13" pos:end="121:80"><call pos:start="121:13" pos:end="121:80"><name pos:start="121:13" pos:end="121:17">START</name><argument_list pos:start="121:18" pos:end="121:80">(<argument pos:start="121:19" pos:end="121:22"><expr pos:start="121:19" pos:end="121:22"><literal type="number" pos:start="121:19" pos:end="121:22">0xb8</literal></expr></argument>, <argument pos:start="121:25" pos:end="121:53"><expr pos:start="121:25" pos:end="121:53"><name pos:start="121:25" pos:end="121:53">MPEG2RawGroupOfPicturesHeader</name></expr></argument>, <argument pos:start="121:56" pos:end="121:79"><expr pos:start="121:56" pos:end="121:79"><name pos:start="121:56" pos:end="121:79">group_of_pictures_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef pos:start="123:1" pos:end="123:12">#<cpp:directive pos:start="123:2" pos:end="123:6">undef</cpp:directive> <name pos:start="123:8" pos:end="123:12">START</name></cpp:undef>

        <default pos:start="125:9" pos:end="125:16">default:</default>

            <expr_stmt pos:start="127:13" pos:end="129:31"><expr pos:start="127:13" pos:end="129:30"><call pos:start="127:13" pos:end="129:30"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="129:30">(<argument pos:start="127:20" pos:end="127:31"><expr pos:start="127:20" pos:end="127:31"><name pos:start="127:20" pos:end="127:31"><name pos:start="127:20" pos:end="127:22">ctx</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:31">log_ctx</name></name></expr></argument>, <argument pos:start="127:34" pos:end="127:45"><expr pos:start="127:34" pos:end="127:45"><name pos:start="127:34" pos:end="127:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:48" pos:end="127:75"><expr pos:start="127:48" pos:end="127:75"><literal type="string" pos:start="127:48" pos:end="127:75">"Unknown start code %02x.\n"</literal></expr></argument>,

                   <argument pos:start="129:20" pos:end="129:29"><expr pos:start="129:20" pos:end="129:29"><name pos:start="129:20" pos:end="129:29"><name pos:start="129:20" pos:end="129:23">unit</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:29">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
