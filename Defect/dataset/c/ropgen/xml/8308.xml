<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8308.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">tx_fifo_push</name><parameter_list pos:start="1:25" pos:end="1:56">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:38">lan9118_state</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:51">uint32_t</name></type> <name pos:start="1:53" pos:end="1:55">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:45">(<expr pos:start="9:9" pos:end="9:44"><name pos:start="9:9" pos:end="9:25"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:14">txp</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:25">fifo_used</name></name> <operator pos:start="9:27" pos:end="9:28">==</operator> <name pos:start="9:30" pos:end="9:44"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:44">tx_fifo_size</name></name></expr>)</condition> <block pos:start="9:47" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:15">

        <expr_stmt pos:start="11:9" pos:end="11:31"><expr pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:18">int_sts</name></name> <operator pos:start="11:20" pos:end="11:21">|=</operator> <name pos:start="11:23" pos:end="11:30">TDFO_INT</name></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="17:5" pos:end="155:5">switch <condition pos:start="17:12" pos:end="17:26">(<expr pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">txp</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:25">state</name></name></expr>)</condition> <block pos:start="17:28" pos:end="155:5">{<block_content pos:start="19:5" pos:end="153:14">

    <case pos:start="19:5" pos:end="19:17">case <expr pos:start="19:10" pos:end="19:16"><name pos:start="19:10" pos:end="19:16">TX_IDLE</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">txp</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:21">cmd_a</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:27">val</name> <operator pos:start="21:29" pos:end="21:29">&amp;</operator> <literal type="number" pos:start="21:31" pos:end="21:40">0x831f37ff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">txp</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:25">fifo_used</name></name><operator pos:start="23:26" pos:end="23:27">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">txp</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:21">state</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:28">TX_B</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:62"><expr pos:start="27:9" pos:end="27:61"><name pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">txp</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:27">buffer_size</name></name> <operator pos:start="27:29" pos:end="27:29">=</operator> <call pos:start="27:31" pos:end="27:61"><name pos:start="27:31" pos:end="27:39">extract32</name><argument_list pos:start="27:40" pos:end="27:61">(<argument pos:start="27:41" pos:end="27:53"><expr pos:start="27:41" pos:end="27:53"><name pos:start="27:41" pos:end="27:53"><name pos:start="27:41" pos:end="27:41">s</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:46">txp</name><operator pos:start="27:47" pos:end="27:48">-&gt;</operator><name pos:start="27:49" pos:end="27:53">cmd_a</name></name></expr></argument>, <argument pos:start="27:56" pos:end="27:56"><expr pos:start="27:56" pos:end="27:56"><literal type="number" pos:start="27:56" pos:end="27:56">0</literal></expr></argument>, <argument pos:start="27:59" pos:end="27:60"><expr pos:start="27:59" pos:end="27:60"><literal type="number" pos:start="27:59" pos:end="27:60">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:14">txp</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:22">offset</name></name> <operator pos:start="29:24" pos:end="29:24">=</operator> <call pos:start="29:26" pos:end="29:56"><name pos:start="29:26" pos:end="29:34">extract32</name><argument_list pos:start="29:35" pos:end="29:56">(<argument pos:start="29:36" pos:end="29:48"><expr pos:start="29:36" pos:end="29:48"><name pos:start="29:36" pos:end="29:48"><name pos:start="29:36" pos:end="29:36">s</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:41">txp</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:48">cmd_a</name></name></expr></argument>, <argument pos:start="29:51" pos:end="29:52"><expr pos:start="29:51" pos:end="29:52"><literal type="number" pos:start="29:51" pos:end="29:52">16</literal></expr></argument>, <argument pos:start="29:55" pos:end="29:55"><expr pos:start="29:55" pos:end="29:55"><literal type="number" pos:start="29:55" pos:end="29:55">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><name pos:start="33:10" pos:end="33:13">TX_B</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="71:9"><if pos:start="35:9" pos:end="71:9">if <condition pos:start="35:12" pos:end="35:35">(<expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">txp</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:25">cmd_a</name></name> <operator pos:start="35:27" pos:end="35:27">&amp;</operator> <literal type="number" pos:start="35:29" pos:end="35:34">0x2000</literal></expr>)</condition> <block pos:start="35:37" pos:end="71:9">{<block_content pos:start="39:13" pos:end="69:28">

            <comment type="block" pos:start="37:13" pos:end="37:31">/* First segment */</comment>

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">txp</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:25">cmd_b</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:31">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:32"><expr pos:start="41:13" pos:end="41:31"><name pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:18">txp</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:29">fifo_used</name></name><operator pos:start="41:30" pos:end="41:31">++</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="43:13" pos:end="43:64">/* End alignment does not include command words.  */</comment>

            <expr_stmt pos:start="45:13" pos:end="45:64"><expr pos:start="45:13" pos:end="45:63"><name pos:start="45:13" pos:end="45:13">n</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:36"><name pos:start="45:18" pos:end="45:18">s</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:23">txp</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:36">buffer_size</name></name> <operator pos:start="45:38" pos:end="45:38">+</operator> <name pos:start="45:40" pos:end="45:53"><name pos:start="45:40" pos:end="45:40">s</name><operator pos:start="45:41" pos:end="45:42">-&gt;</operator><name pos:start="45:43" pos:end="45:45">txp</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:53">offset</name></name> <operator pos:start="45:55" pos:end="45:55">+</operator> <literal type="number" pos:start="45:57" pos:end="45:57">3</literal><operator pos:start="45:58" pos:end="45:58">)</operator> <operator pos:start="45:60" pos:end="45:61">&gt;&gt;</operator> <literal type="number" pos:start="45:63" pos:end="45:63">2</literal></expr>;</expr_stmt>

            <switch pos:start="47:13" pos:end="65:13">switch <condition pos:start="47:20" pos:end="47:34">(<expr pos:start="47:21" pos:end="47:33"><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:22">n</name> <operator pos:start="47:24" pos:end="47:25">&gt;&gt;</operator> <literal type="number" pos:start="47:27" pos:end="47:28">24</literal><operator pos:start="47:29" pos:end="47:29">)</operator> <operator pos:start="47:31" pos:end="47:31">&amp;</operator> <literal type="number" pos:start="47:33" pos:end="47:33">3</literal></expr>)</condition> <block pos:start="47:36" pos:end="65:13">{<block_content pos:start="49:13" pos:end="63:22">

            <case pos:start="49:13" pos:end="49:19">case <expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">1</literal></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:17">n</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <operator pos:start="51:21" pos:end="51:21">(</operator><operator pos:start="51:22" pos:end="51:22">-</operator><name pos:start="51:23" pos:end="51:23">n</name><operator pos:start="51:24" pos:end="51:24">)</operator> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <literal type="number" pos:start="51:28" pos:end="51:28">3</literal></expr>;</expr_stmt>

                <break pos:start="53:17" pos:end="53:22">break;</break>

            <case pos:start="55:13" pos:end="55:19">case <expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">2</literal></expr>:</case>

                <expr_stmt pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">n</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <operator pos:start="57:21" pos:end="57:21">(</operator><operator pos:start="57:22" pos:end="57:22">-</operator><name pos:start="57:23" pos:end="57:23">n</name><operator pos:start="57:24" pos:end="57:24">)</operator> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:28">7</literal></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <default pos:start="61:13" pos:end="61:20">default:</default>

                <expr_stmt pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:21"><name pos:start="63:17" pos:end="63:17">n</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">0</literal></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:18">txp</name><operator pos:start="67:19" pos:end="67:20">-&gt;</operator><name pos:start="67:21" pos:end="67:23">pad</name></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <name pos:start="67:27" pos:end="67:27">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:28"><expr pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:18">txp</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:23">len</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="77:31"><expr pos:start="73:9" pos:end="77:30"><call pos:start="73:9" pos:end="77:30"><name pos:start="73:9" pos:end="73:15">DPRINTF</name><argument_list pos:start="73:16" pos:end="77:30">(<argument pos:start="73:17" pos:end="73:58"><expr pos:start="73:17" pos:end="73:58"><literal type="string" pos:start="73:17" pos:end="73:58">"Block len:%d offset:%d pad:%d cmd %08x\n"</literal></expr></argument>,

                <argument pos:start="75:17" pos:end="75:35"><expr pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:22">txp</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:35">buffer_size</name></name></expr></argument>, <argument pos:start="75:38" pos:end="75:51"><expr pos:start="75:38" pos:end="75:51"><name pos:start="75:38" pos:end="75:51"><name pos:start="75:38" pos:end="75:38">s</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:43">txp</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:51">offset</name></name></expr></argument>, <argument pos:start="75:54" pos:end="75:64"><expr pos:start="75:54" pos:end="75:64"><name pos:start="75:54" pos:end="75:64"><name pos:start="75:54" pos:end="75:54">s</name><operator pos:start="75:55" pos:end="75:56">-&gt;</operator><name pos:start="75:57" pos:end="75:59">txp</name><operator pos:start="75:60" pos:end="75:61">-&gt;</operator><name pos:start="75:62" pos:end="75:64">pad</name></name></expr></argument>,

                <argument pos:start="77:17" pos:end="77:29"><expr pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:29"><name pos:start="77:17" pos:end="77:17">s</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:22">txp</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:29">cmd_a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:14">txp</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:21">state</name></name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:31">TX_DATA</name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:17">case <expr pos:start="83:10" pos:end="83:16"><name pos:start="83:10" pos:end="83:16">TX_DATA</name></expr>:</case>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:32">(<expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:18">txp</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:26">offset</name></name> <operator pos:start="85:28" pos:end="85:29">&gt;=</operator> <literal type="number" pos:start="85:31" pos:end="85:31">4</literal></expr>)</condition> <block pos:start="85:34" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:18">

            <expr_stmt pos:start="87:13" pos:end="87:32"><expr pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:18">txp</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:26">offset</name></name> <operator pos:start="87:28" pos:end="87:29">-=</operator> <literal type="number" pos:start="87:31" pos:end="87:31">4</literal></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="133:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:57">(<expr pos:start="93:13" pos:end="93:56"><name pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:18">txp</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:31">buffer_size</name></name> <operator pos:start="93:33" pos:end="93:34">&lt;=</operator> <literal type="number" pos:start="93:36" pos:end="93:36">0</literal> <operator pos:start="93:38" pos:end="93:39">&amp;&amp;</operator> <name pos:start="93:41" pos:end="93:51"><name pos:start="93:41" pos:end="93:41">s</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:46">txp</name><operator pos:start="93:47" pos:end="93:48">-&gt;</operator><name pos:start="93:49" pos:end="93:51">pad</name></name> <operator pos:start="93:53" pos:end="93:54">!=</operator> <literal type="number" pos:start="93:56" pos:end="93:56">0</literal></expr>)</condition> <block pos:start="93:59" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:26">

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">txp</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:23">pad</name></name><operator pos:start="95:24" pos:end="95:25">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="133:9">else <block pos:start="97:16" pos:end="133:9">{<block_content pos:start="99:13" pos:end="131:32">

            <expr_stmt pos:start="99:13" pos:end="99:18"><expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:13">n</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <literal type="number" pos:start="99:17" pos:end="99:17">4</literal></expr>;</expr_stmt>

            <while pos:start="101:13" pos:end="109:13">while <condition pos:start="101:19" pos:end="101:34">(<expr pos:start="101:20" pos:end="101:33"><name pos:start="101:20" pos:end="101:33"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:25">txp</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:33">offset</name></name></expr>)</condition> <block pos:start="101:36" pos:end="109:13">{<block_content pos:start="103:17" pos:end="107:33">

                <expr_stmt pos:start="103:17" pos:end="103:26"><expr pos:start="103:17" pos:end="103:25"><name pos:start="103:17" pos:end="103:19">val</name> <operator pos:start="103:21" pos:end="103:23">&gt;&gt;=</operator> <literal type="number" pos:start="103:25" pos:end="103:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:20"><expr pos:start="105:17" pos:end="105:19"><name pos:start="105:17" pos:end="105:17">n</name><operator pos:start="105:18" pos:end="105:19">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:33"><expr pos:start="107:17" pos:end="107:32"><name pos:start="107:17" pos:end="107:30"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:22">txp</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:30">offset</name></name><operator pos:start="107:31" pos:end="107:32">--</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <comment type="block" pos:start="111:13" pos:end="115:17">/* Documentation is somewhat unclear on the ordering of bytes

               in FIFO words.  Empirical results show it to be little-endian.

               */</comment>

            <comment type="block" pos:start="117:13" pos:end="117:48">/* TODO: FIFO overflow checking.  */</comment>

            <while pos:start="119:13" pos:end="129:13">while <condition pos:start="119:19" pos:end="119:23">(<expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:20">n</name><operator pos:start="119:21" pos:end="119:22">--</operator></expr>)</condition> <block pos:start="119:25" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:38">

                <expr_stmt pos:start="121:17" pos:end="121:55"><expr pos:start="121:17" pos:end="121:54"><name pos:start="121:17" pos:end="121:41"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:22">txp</name><operator pos:start="121:23" pos:end="121:24">-&gt;</operator><name pos:start="121:25" pos:end="121:28">data</name><index pos:start="121:29" pos:end="121:41">[<expr pos:start="121:30" pos:end="121:40"><name pos:start="121:30" pos:end="121:40"><name pos:start="121:30" pos:end="121:30">s</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:35">txp</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:40">len</name></name></expr>]</index></name> <operator pos:start="121:43" pos:end="121:43">=</operator> <name pos:start="121:45" pos:end="121:47">val</name> <operator pos:start="121:49" pos:end="121:49">&amp;</operator> <literal type="number" pos:start="121:51" pos:end="121:54">0xff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:30"><expr pos:start="123:17" pos:end="123:29"><name pos:start="123:17" pos:end="123:27"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:22">txp</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:27">len</name></name><operator pos:start="123:28" pos:end="123:29">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:26"><expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:19">val</name> <operator pos:start="125:21" pos:end="125:23">&gt;&gt;=</operator> <literal type="number" pos:start="125:25" pos:end="125:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:38"><expr pos:start="127:17" pos:end="127:37"><name pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:22">txp</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:35">buffer_size</name></name><operator pos:start="127:36" pos:end="127:37">--</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="131:13" pos:end="131:32"><expr pos:start="131:13" pos:end="131:31"><name pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:18">txp</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:29">fifo_used</name></name><operator pos:start="131:30" pos:end="131:31">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="135:9" pos:end="151:9"><if pos:start="135:9" pos:end="151:9">if <condition pos:start="135:12" pos:end="135:57">(<expr pos:start="135:13" pos:end="135:56"><name pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:18">txp</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:31">buffer_size</name></name> <operator pos:start="135:33" pos:end="135:34">&lt;=</operator> <literal type="number" pos:start="135:36" pos:end="135:36">0</literal> <operator pos:start="135:38" pos:end="135:39">&amp;&amp;</operator> <name pos:start="135:41" pos:end="135:51"><name pos:start="135:41" pos:end="135:41">s</name><operator pos:start="135:42" pos:end="135:43">-&gt;</operator><name pos:start="135:44" pos:end="135:46">txp</name><operator pos:start="135:47" pos:end="135:48">-&gt;</operator><name pos:start="135:49" pos:end="135:51">pad</name></name> <operator pos:start="135:53" pos:end="135:54">==</operator> <literal type="number" pos:start="135:56" pos:end="135:56">0</literal></expr>)</condition> <block pos:start="135:59" pos:end="151:9">{<block_content pos:start="137:13" pos:end="149:36">

            <if_stmt pos:start="137:13" pos:end="141:13"><if pos:start="137:13" pos:end="141:13">if <condition pos:start="137:16" pos:end="137:39">(<expr pos:start="137:17" pos:end="137:38"><name pos:start="137:17" pos:end="137:29"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:22">txp</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:29">cmd_a</name></name> <operator pos:start="137:31" pos:end="137:31">&amp;</operator> <literal type="number" pos:start="137:33" pos:end="137:38">0x1000</literal></expr>)</condition> <block pos:start="137:41" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:32">

                <expr_stmt pos:start="139:17" pos:end="139:32"><expr pos:start="139:17" pos:end="139:31"><call pos:start="139:17" pos:end="139:31"><name pos:start="139:17" pos:end="139:28">do_tx_packet</name><argument_list pos:start="139:29" pos:end="139:31">(<argument pos:start="139:30" pos:end="139:30"><expr pos:start="139:30" pos:end="139:30"><name pos:start="139:30" pos:end="139:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="143:13" pos:end="147:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:43">(<expr pos:start="143:17" pos:end="143:42"><name pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:17">s</name><operator pos:start="143:18" pos:end="143:19">-&gt;</operator><name pos:start="143:20" pos:end="143:22">txp</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:29">cmd_a</name></name> <operator pos:start="143:31" pos:end="143:31">&amp;</operator> <literal type="number" pos:start="143:33" pos:end="143:42">0x80000000</literal></expr>)</condition> <block pos:start="143:45" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:41">

                <expr_stmt pos:start="145:17" pos:end="145:41"><expr pos:start="145:17" pos:end="145:40"><name pos:start="145:17" pos:end="145:26"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:26">int_sts</name></name> <operator pos:start="145:28" pos:end="145:29">|=</operator> <name pos:start="145:31" pos:end="145:40">TX_IOC_INT</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:36"><expr pos:start="149:13" pos:end="149:35"><name pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:18">txp</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:25">state</name></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <name pos:start="149:29" pos:end="149:35">TX_IDLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
