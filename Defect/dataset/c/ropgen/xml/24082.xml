<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24082.c" pos:tabs="8"><function pos:start="1:1" pos:end="479:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:37">avcodec_open2</name><parameter_list pos:start="1:38" pos:end="1:100">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:68">AVCodec</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:75">codec</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:99"><decl pos:start="1:78" pos:end="1:99"><type pos:start="1:78" pos:end="1:99"><name pos:start="1:78" pos:end="1:89">AVDictionary</name> <modifier pos:start="1:91" pos:end="1:91">*</modifier><modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:99">options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="479:1">{<block_content pos:start="5:5" pos:end="477:13">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AVDictionary</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">tmp</name> <init pos:start="7:23" pos:end="7:28">= <expr pos:start="7:25" pos:end="7:28"><name pos:start="7:25" pos:end="7:28">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:17"><if pos:start="11:5" pos:end="13:17">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><call pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:23">avcodec_is_open</name><argument_list pos:start="11:24" pos:end="11:30">(<argument pos:start="11:25" pos:end="11:29"><expr pos:start="11:25" pos:end="11:29"><name pos:start="11:25" pos:end="11:29">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:17"><block_content pos:start="13:9" pos:end="13:17">

        <return pos:start="13:9" pos:end="13:17">return <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:34">(<expr pos:start="17:9" pos:end="17:33"><operator pos:start="17:9" pos:end="17:9">(</operator><operator pos:start="17:10" pos:end="17:10">!</operator><name pos:start="17:11" pos:end="17:15">codec</name> <operator pos:start="17:17" pos:end="17:18">&amp;&amp;</operator> <operator pos:start="17:20" pos:end="17:20">!</operator><name pos:start="17:21" pos:end="17:32"><name pos:start="17:21" pos:end="17:25">avctx</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:32">codec</name></name><operator pos:start="17:33" pos:end="17:33">)</operator></expr>)</condition> <block pos:start="17:36" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:31">

        <expr_stmt pos:start="19:9" pos:end="19:79"><expr pos:start="19:9" pos:end="19:78"><call pos:start="19:9" pos:end="19:78"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:78">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:77"><expr pos:start="19:37" pos:end="19:77"><literal type="string" pos:start="19:37" pos:end="19:77">"No codec provided to avcodec_open2().\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:31">return <expr pos:start="21:16" pos:end="21:30"><call pos:start="21:16" pos:end="21:30"><name pos:start="21:16" pos:end="21:22">AVERROR</name><argument_list pos:start="21:23" pos:end="21:30">(<argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:57">(<expr pos:start="25:9" pos:end="25:56"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:14">codec</name> <operator pos:start="25:16" pos:end="25:17">&amp;&amp;</operator> <name pos:start="25:19" pos:end="25:30"><name pos:start="25:19" pos:end="25:23">avctx</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:30">codec</name></name> <operator pos:start="25:32" pos:end="25:33">&amp;&amp;</operator> <name pos:start="25:35" pos:end="25:39">codec</name> <operator pos:start="25:41" pos:end="25:42">!=</operator> <name pos:start="25:44" pos:end="25:55"><name pos:start="25:44" pos:end="25:48">avctx</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:55">codec</name></name><operator pos:start="25:56" pos:end="25:56">)</operator></expr>)</condition> <block pos:start="25:59" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:31">

        <expr_stmt pos:start="27:9" pos:end="29:87"><expr pos:start="27:9" pos:end="29:86"><call pos:start="27:9" pos:end="29:86"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:86">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="29:52"><expr pos:start="27:37" pos:end="29:52"><literal type="string" pos:start="27:37" pos:end="27:80">"This AVCodecContext was allocated for %s, "</literal>

               <literal type="string" pos:start="29:16" pos:end="29:52">"but %s passed to avcodec_open2().\n"</literal></expr></argument>, <argument pos:start="29:55" pos:end="29:72"><expr pos:start="29:55" pos:end="29:72"><name pos:start="29:55" pos:end="29:72"><name pos:start="29:55" pos:end="29:59">avctx</name><operator pos:start="29:60" pos:end="29:61">-&gt;</operator><name pos:start="29:62" pos:end="29:66">codec</name><operator pos:start="29:67" pos:end="29:68">-&gt;</operator><name pos:start="29:69" pos:end="29:72">name</name></name></expr></argument>, <argument pos:start="29:75" pos:end="29:85"><expr pos:start="29:75" pos:end="29:85"><name pos:start="29:75" pos:end="29:85"><name pos:start="29:75" pos:end="29:79">codec</name><operator pos:start="29:80" pos:end="29:81">-&gt;</operator><name pos:start="29:82" pos:end="29:85">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="37:29"><if pos:start="35:5" pos:end="37:29">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:14">codec</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:29"><block_content pos:start="37:9" pos:end="37:29">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:13">codec</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:21">avctx</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:28">codec</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:31"><if pos:start="41:5" pos:end="43:31">if <condition pos:start="41:8" pos:end="41:84">(<expr pos:start="41:9" pos:end="41:83"><name pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:13">avctx</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:29">extradata_size</name></name> <operator pos:start="41:31" pos:end="41:31">&lt;</operator> <literal type="number" pos:start="41:33" pos:end="41:33">0</literal> <operator pos:start="41:35" pos:end="41:36">||</operator> <name pos:start="41:38" pos:end="41:58"><name pos:start="41:38" pos:end="41:42">avctx</name><operator pos:start="41:43" pos:end="41:44">-&gt;</operator><name pos:start="41:45" pos:end="41:58">extradata_size</name></name> <operator pos:start="41:60" pos:end="41:61">&gt;=</operator> <name pos:start="41:63" pos:end="41:83">FF_MAX_EXTRADATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:31"><block_content pos:start="43:9" pos:end="43:31">

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="49:40"><if pos:start="47:5" pos:end="49:40">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:15">options</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:40"><block_content pos:start="49:9" pos:end="49:40">

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:20">av_dict_copy</name><argument_list pos:start="49:21" pos:end="49:39">(<argument pos:start="49:22" pos:end="49:25"><expr pos:start="49:22" pos:end="49:25"><operator pos:start="49:22" pos:end="49:22">&amp;</operator><name pos:start="49:23" pos:end="49:25">tmp</name></expr></argument>, <argument pos:start="49:28" pos:end="49:35"><expr pos:start="49:28" pos:end="49:35"><operator pos:start="49:28" pos:end="49:28">*</operator><name pos:start="49:29" pos:end="49:35">options</name></expr></argument>, <argument pos:start="49:38" pos:end="49:38"><expr pos:start="49:38" pos:end="49:38"><literal type="number" pos:start="49:38" pos:end="49:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:69">/* If there is a user-supplied mutex locking routine, call it. */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:22">(<expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="55:24" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:22">

        <if_stmt pos:start="57:9" pos:end="59:22"><if pos:start="57:9" pos:end="59:22">if <condition pos:start="57:12" pos:end="57:59">(<expr pos:start="57:13" pos:end="57:58"><call pos:start="57:13" pos:end="57:58">(<modifier pos:start="57:14" pos:end="57:14">*</modifier><name pos:start="57:15" pos:end="57:27">ff_lockmgr_cb</name>)<argument_list pos:start="57:29" pos:end="57:58">(<argument pos:start="57:30" pos:end="57:41"><expr pos:start="57:30" pos:end="57:41"><operator pos:start="57:30" pos:end="57:30">&amp;</operator><name pos:start="57:31" pos:end="57:41">codec_mutex</name></expr></argument>, <argument pos:start="57:44" pos:end="57:57"><expr pos:start="57:44" pos:end="57:57"><name pos:start="57:44" pos:end="57:57">AV_LOCK_OBTAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:22"><block_content pos:start="59:13" pos:end="59:22">

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:31"><expr pos:start="65:5" pos:end="65:30"><name pos:start="65:5" pos:end="65:28">entangled_thread_counter</name><operator pos:start="65:29" pos:end="65:30">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if<condition pos:start="67:7" pos:end="67:37">(<expr pos:start="67:8" pos:end="67:36"><name pos:start="67:8" pos:end="67:31">entangled_thread_counter</name> <operator pos:start="67:33" pos:end="67:34">!=</operator> <literal type="number" pos:start="67:36" pos:end="67:36">1</literal></expr>)</condition><block pos:start="67:38" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:97"><expr pos:start="69:9" pos:end="69:96"><call pos:start="69:9" pos:end="69:96"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:96">(<argument pos:start="69:16" pos:end="69:20"><expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">avctx</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="69:95"><expr pos:start="69:37" pos:end="69:95"><literal type="string" pos:start="69:37" pos:end="69:95">"insufficient thread locking around avcodec_open/close()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:17"><expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><literal type="number" pos:start="71:16" pos:end="71:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:58"><expr pos:start="79:5" pos:end="79:57"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:9">avctx</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">internal</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:57"><name pos:start="79:23" pos:end="79:32">av_mallocz</name><argument_list pos:start="79:33" pos:end="79:57">(<argument pos:start="79:34" pos:end="79:56"><expr pos:start="79:34" pos:end="79:56"><sizeof pos:start="79:34" pos:end="79:56">sizeof<argument_list pos:start="79:40" pos:end="79:56">(<argument pos:start="79:41" pos:end="79:55"><expr pos:start="79:41" pos:end="79:55"><name pos:start="79:41" pos:end="79:55">AVCodecInternal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:25">(<expr pos:start="81:9" pos:end="81:24"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:24"><name pos:start="81:10" pos:end="81:14">avctx</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:24">internal</name></name></expr>)</condition> <block pos:start="81:27" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:17">

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:29"><name pos:start="83:15" pos:end="83:21">AVERROR</name><argument_list pos:start="83:22" pos:end="83:29">(<argument pos:start="83:23" pos:end="83:28"><expr pos:start="83:23" pos:end="83:28"><name pos:start="83:23" pos:end="83:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="123:5"><if pos:start="91:5" pos:end="119:5">if <condition pos:start="91:8" pos:end="91:34">(<expr pos:start="91:9" pos:end="91:33"><name pos:start="91:9" pos:end="91:29"><name pos:start="91:9" pos:end="91:13">codec</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:29">priv_data_size</name></name> <operator pos:start="91:31" pos:end="91:31">&gt;</operator> <literal type="number" pos:start="91:33" pos:end="91:33">0</literal></expr>)</condition> <block pos:start="91:36" pos:end="119:5">{<block_content pos:start="93:7" pos:end="117:28">

      <if_stmt pos:start="93:7" pos:end="113:7"><if pos:start="93:7" pos:end="113:7">if<condition pos:start="93:9" pos:end="93:27">(<expr pos:start="93:10" pos:end="93:26"><operator pos:start="93:10" pos:end="93:10">!</operator><name pos:start="93:11" pos:end="93:26"><name pos:start="93:11" pos:end="93:15">avctx</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:26">priv_data</name></name></expr>)</condition><block pos:start="93:28" pos:end="113:7">{<block_content pos:start="95:9" pos:end="111:9">

        <expr_stmt pos:start="95:9" pos:end="95:61"><expr pos:start="95:9" pos:end="95:60"><name pos:start="95:9" pos:end="95:24"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:24">priv_data</name></name> <operator pos:start="95:26" pos:end="95:26">=</operator> <call pos:start="95:28" pos:end="95:60"><name pos:start="95:28" pos:end="95:37">av_mallocz</name><argument_list pos:start="95:38" pos:end="95:60">(<argument pos:start="95:39" pos:end="95:59"><expr pos:start="95:39" pos:end="95:59"><name pos:start="95:39" pos:end="95:59"><name pos:start="95:39" pos:end="95:43">codec</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:59">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:30">(<expr pos:start="97:13" pos:end="97:29"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:18">avctx</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:29">priv_data</name></name></expr>)</condition> <block pos:start="97:32" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:21">

            <expr_stmt pos:start="99:13" pos:end="99:34"><expr pos:start="99:13" pos:end="99:33"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:33"><name pos:start="99:19" pos:end="99:25">AVERROR</name><argument_list pos:start="99:26" pos:end="99:33">(<argument pos:start="99:27" pos:end="99:32"><expr pos:start="99:27" pos:end="99:32"><name pos:start="99:27" pos:end="99:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:21">goto <name pos:start="101:18" pos:end="101:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:17">codec</name><operator pos:start="105:18" pos:end="105:19">-&gt;</operator><name pos:start="105:20" pos:end="105:29">priv_class</name></name></expr>)</condition> <block pos:start="105:32" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:50">

            <expr_stmt pos:start="107:13" pos:end="107:66"><expr pos:start="107:13" pos:end="107:65"><operator pos:start="107:13" pos:end="107:13">*</operator><operator pos:start="107:14" pos:end="107:14">(</operator><specifier pos:start="107:15" pos:end="107:19">const</specifier> <name pos:start="107:21" pos:end="107:27">AVClass</name><operator pos:start="107:28" pos:end="107:28">*</operator><operator pos:start="107:29" pos:end="107:29">*</operator><operator pos:start="107:30" pos:end="107:30">)</operator><name pos:start="107:31" pos:end="107:46"><name pos:start="107:31" pos:end="107:35">avctx</name><operator pos:start="107:36" pos:end="107:37">-&gt;</operator><name pos:start="107:38" pos:end="107:46">priv_data</name></name><operator pos:start="107:47" pos:end="107:47">=</operator> <name pos:start="107:49" pos:end="107:65"><name pos:start="107:49" pos:end="107:53">codec</name><operator pos:start="107:54" pos:end="107:55">-&gt;</operator><name pos:start="107:56" pos:end="107:65">priv_class</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:50"><expr pos:start="109:13" pos:end="109:49"><call pos:start="109:13" pos:end="109:49"><name pos:start="109:13" pos:end="109:31">av_opt_set_defaults</name><argument_list pos:start="109:32" pos:end="109:49">(<argument pos:start="109:33" pos:end="109:48"><expr pos:start="109:33" pos:end="109:48"><name pos:start="109:33" pos:end="109:48"><name pos:start="109:33" pos:end="109:37">avctx</name><operator pos:start="109:38" pos:end="109:39">-&gt;</operator><name pos:start="109:40" pos:end="109:48">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

      </block_content>}</block></if></if_stmt>

      <if_stmt pos:start="115:7" pos:end="117:28"><if pos:start="115:7" pos:end="117:28">if <condition pos:start="115:10" pos:end="115:83">(<expr pos:start="115:11" pos:end="115:82"><name pos:start="115:11" pos:end="115:27"><name pos:start="115:11" pos:end="115:15">codec</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:27">priv_class</name></name> <operator pos:start="115:29" pos:end="115:30">&amp;&amp;</operator> <operator pos:start="115:32" pos:end="115:32">(</operator><name pos:start="115:33" pos:end="115:35">ret</name> <operator pos:start="115:37" pos:end="115:37">=</operator> <call pos:start="115:39" pos:end="115:77"><name pos:start="115:39" pos:end="115:53">av_opt_set_dict</name><argument_list pos:start="115:54" pos:end="115:77">(<argument pos:start="115:55" pos:end="115:70"><expr pos:start="115:55" pos:end="115:70"><name pos:start="115:55" pos:end="115:70"><name pos:start="115:55" pos:end="115:59">avctx</name><operator pos:start="115:60" pos:end="115:61">-&gt;</operator><name pos:start="115:62" pos:end="115:70">priv_data</name></name></expr></argument>, <argument pos:start="115:73" pos:end="115:76"><expr pos:start="115:73" pos:end="115:76"><operator pos:start="115:73" pos:end="115:73">&amp;</operator><name pos:start="115:74" pos:end="115:76">tmp</name></expr></argument>)</argument_list></call><operator pos:start="115:78" pos:end="115:78">)</operator> <operator pos:start="115:80" pos:end="115:80">&lt;</operator> <literal type="number" pos:start="115:82" pos:end="115:82">0</literal></expr>)</condition><block type="pseudo" pos:start="117:11" pos:end="117:28"><block_content pos:start="117:11" pos:end="117:28">

          <goto pos:start="117:11" pos:end="117:28">goto <name pos:start="117:16" pos:end="117:27">free_and_end</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="123:5">else <block pos:start="119:12" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:32">

        <expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:13">avctx</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:24">priv_data</name></name> <operator pos:start="121:26" pos:end="121:26">=</operator> <name pos:start="121:28" pos:end="121:31">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="125:5" pos:end="127:26"><if pos:start="125:5" pos:end="127:26">if <condition pos:start="125:8" pos:end="125:49">(<expr pos:start="125:9" pos:end="125:48"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:12">ret</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:43"><name pos:start="125:16" pos:end="125:30">av_opt_set_dict</name><argument_list pos:start="125:31" pos:end="125:43">(<argument pos:start="125:32" pos:end="125:36"><expr pos:start="125:32" pos:end="125:36"><name pos:start="125:32" pos:end="125:36">avctx</name></expr></argument>, <argument pos:start="125:39" pos:end="125:42"><expr pos:start="125:39" pos:end="125:42"><operator pos:start="125:39" pos:end="125:39">&amp;</operator><name pos:start="125:40" pos:end="125:42">tmp</name></expr></argument>)</argument_list></call><operator pos:start="125:44" pos:end="125:44">)</operator> <operator pos:start="125:46" pos:end="125:46">&lt;</operator> <literal type="number" pos:start="125:48" pos:end="125:48">0</literal></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:26"><block_content pos:start="127:9" pos:end="127:26">

        <goto pos:start="127:9" pos:end="127:26">goto <name pos:start="127:14" pos:end="127:25">free_and_end</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="131:5" pos:end="141:9"><if pos:start="131:5" pos:end="141:9">if <condition pos:start="131:8" pos:end="131:53">(<expr pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:13">codec</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:27">capabilities</name></name> <operator pos:start="131:29" pos:end="131:29">&amp;</operator> <name pos:start="131:31" pos:end="131:52">CODEC_CAP_EXPERIMENTAL</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="141:9"><block_content pos:start="133:9" pos:end="141:9">

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:70">(<expr pos:start="133:13" pos:end="133:69"><name pos:start="133:13" pos:end="133:40"><name pos:start="133:13" pos:end="133:17">avctx</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:40">strict_std_compliance</name></name> <operator pos:start="133:42" pos:end="133:42">&gt;</operator> <name pos:start="133:44" pos:end="133:69">FF_COMPLIANCE_EXPERIMENTAL</name></expr>)</condition> <block pos:start="133:72" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:30">

            <expr_stmt pos:start="135:13" pos:end="135:123"><expr pos:start="135:13" pos:end="135:122"><call pos:start="135:13" pos:end="135:122"><name pos:start="135:13" pos:end="135:18">av_log</name><argument_list pos:start="135:19" pos:end="135:122">(<argument pos:start="135:20" pos:end="135:24"><expr pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:24">avctx</name></expr></argument>, <argument pos:start="135:27" pos:end="135:38"><expr pos:start="135:27" pos:end="135:38"><name pos:start="135:27" pos:end="135:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:41" pos:end="135:121"><expr pos:start="135:41" pos:end="135:121"><literal type="string" pos:start="135:41" pos:end="135:121">"Codec is experimental but experimental codecs are not enabled, try -strict -2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:21"><expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <operator pos:start="137:19" pos:end="137:19">-</operator><literal type="number" pos:start="137:20" pos:end="137:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="139:13" pos:end="139:30">goto <name pos:start="139:18" pos:end="139:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="145:5" pos:end="145:114">//We only call avcodec_set_dimensions() for non h264 codecs so as not to overwrite previously setup dimensions</comment>

    <if_stmt pos:start="147:5" pos:end="157:5"><if pos:start="147:5" pos:end="157:5">if<condition pos:start="147:7" pos:end="147:122">(<expr pos:start="147:8" pos:end="147:121"><operator pos:start="147:8" pos:end="147:8">!</operator><operator pos:start="147:9" pos:end="147:9">(</operator> <name pos:start="147:11" pos:end="147:28"><name pos:start="147:11" pos:end="147:15">avctx</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:28">coded_width</name></name> <operator pos:start="147:30" pos:end="147:31">&amp;&amp;</operator> <name pos:start="147:33" pos:end="147:51"><name pos:start="147:33" pos:end="147:37">avctx</name><operator pos:start="147:38" pos:end="147:39">-&gt;</operator><name pos:start="147:40" pos:end="147:51">coded_height</name></name> <operator pos:start="147:53" pos:end="147:54">&amp;&amp;</operator> <name pos:start="147:56" pos:end="147:67"><name pos:start="147:56" pos:end="147:60">avctx</name><operator pos:start="147:61" pos:end="147:62">-&gt;</operator><name pos:start="147:63" pos:end="147:67">width</name></name> <operator pos:start="147:69" pos:end="147:70">&amp;&amp;</operator> <name pos:start="147:72" pos:end="147:84"><name pos:start="147:72" pos:end="147:76">avctx</name><operator pos:start="147:77" pos:end="147:78">-&gt;</operator><name pos:start="147:79" pos:end="147:84">height</name></name> <operator pos:start="147:86" pos:end="147:87">&amp;&amp;</operator> <name pos:start="147:89" pos:end="147:103"><name pos:start="147:89" pos:end="147:93">avctx</name><operator pos:start="147:94" pos:end="147:95">-&gt;</operator><name pos:start="147:96" pos:end="147:103">codec_id</name></name> <operator pos:start="147:105" pos:end="147:106">==</operator> <name pos:start="147:108" pos:end="147:120">CODEC_ID_H264</name><operator pos:start="147:121" pos:end="147:121">)</operator></expr>)</condition><block pos:start="147:123" pos:end="157:5">{<block_content pos:start="149:5" pos:end="155:67">

    <if_stmt pos:start="149:5" pos:end="155:67"><if pos:start="149:5" pos:end="151:79">if<condition pos:start="149:7" pos:end="149:49">(<expr pos:start="149:8" pos:end="149:48"><name pos:start="149:8" pos:end="149:25"><name pos:start="149:8" pos:end="149:12">avctx</name><operator pos:start="149:13" pos:end="149:14">-&gt;</operator><name pos:start="149:15" pos:end="149:25">coded_width</name></name> <operator pos:start="149:27" pos:end="149:28">&amp;&amp;</operator> <name pos:start="149:30" pos:end="149:48"><name pos:start="149:30" pos:end="149:34">avctx</name><operator pos:start="149:35" pos:end="149:36">-&gt;</operator><name pos:start="149:37" pos:end="149:48">coded_height</name></name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:79"><block_content pos:start="151:9" pos:end="151:79">

        <expr_stmt pos:start="151:9" pos:end="151:79"><expr pos:start="151:9" pos:end="151:78"><call pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:30">avcodec_set_dimensions</name><argument_list pos:start="151:31" pos:end="151:78">(<argument pos:start="151:32" pos:end="151:36"><expr pos:start="151:32" pos:end="151:36"><name pos:start="151:32" pos:end="151:36">avctx</name></expr></argument>, <argument pos:start="151:39" pos:end="151:56"><expr pos:start="151:39" pos:end="151:56"><name pos:start="151:39" pos:end="151:56"><name pos:start="151:39" pos:end="151:43">avctx</name><operator pos:start="151:44" pos:end="151:45">-&gt;</operator><name pos:start="151:46" pos:end="151:56">coded_width</name></name></expr></argument>, <argument pos:start="151:59" pos:end="151:77"><expr pos:start="151:59" pos:end="151:77"><name pos:start="151:59" pos:end="151:77"><name pos:start="151:59" pos:end="151:63">avctx</name><operator pos:start="151:64" pos:end="151:65">-&gt;</operator><name pos:start="151:66" pos:end="151:77">coded_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="153:5" pos:end="155:67">else if<condition pos:start="153:12" pos:end="153:42">(<expr pos:start="153:13" pos:end="153:41"><name pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:17">avctx</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:24">width</name></name> <operator pos:start="153:26" pos:end="153:27">&amp;&amp;</operator> <name pos:start="153:29" pos:end="153:41"><name pos:start="153:29" pos:end="153:33">avctx</name><operator pos:start="153:34" pos:end="153:35">-&gt;</operator><name pos:start="153:36" pos:end="153:41">height</name></name></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:67"><block_content pos:start="155:9" pos:end="155:67">

        <expr_stmt pos:start="155:9" pos:end="155:67"><expr pos:start="155:9" pos:end="155:66"><call pos:start="155:9" pos:end="155:66"><name pos:start="155:9" pos:end="155:30">avcodec_set_dimensions</name><argument_list pos:start="155:31" pos:end="155:66">(<argument pos:start="155:32" pos:end="155:36"><expr pos:start="155:32" pos:end="155:36"><name pos:start="155:32" pos:end="155:36">avctx</name></expr></argument>, <argument pos:start="155:39" pos:end="155:50"><expr pos:start="155:39" pos:end="155:50"><name pos:start="155:39" pos:end="155:50"><name pos:start="155:39" pos:end="155:43">avctx</name><operator pos:start="155:44" pos:end="155:45">-&gt;</operator><name pos:start="155:46" pos:end="155:50">width</name></name></expr></argument>, <argument pos:start="155:53" pos:end="155:65"><expr pos:start="155:53" pos:end="155:65"><name pos:start="155:53" pos:end="155:65"><name pos:start="155:53" pos:end="155:57">avctx</name><operator pos:start="155:58" pos:end="155:59">-&gt;</operator><name pos:start="155:60" pos:end="155:65">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="165:90">(<expr pos:start="161:9" pos:end="165:89"><operator pos:start="161:9" pos:end="161:9">(</operator><name pos:start="161:10" pos:end="161:27"><name pos:start="161:10" pos:end="161:14">avctx</name><operator pos:start="161:15" pos:end="161:16">-&gt;</operator><name pos:start="161:17" pos:end="161:27">coded_width</name></name> <operator pos:start="161:29" pos:end="161:30">||</operator> <name pos:start="161:32" pos:end="161:50"><name pos:start="161:32" pos:end="161:36">avctx</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:50">coded_height</name></name> <operator pos:start="161:52" pos:end="161:53">||</operator> <name pos:start="161:55" pos:end="161:66"><name pos:start="161:55" pos:end="161:59">avctx</name><operator pos:start="161:60" pos:end="161:61">-&gt;</operator><name pos:start="161:62" pos:end="161:66">width</name></name> <operator pos:start="161:68" pos:end="161:69">||</operator> <name pos:start="161:71" pos:end="161:83"><name pos:start="161:71" pos:end="161:75">avctx</name><operator pos:start="161:76" pos:end="161:77">-&gt;</operator><name pos:start="161:78" pos:end="161:83">height</name></name><operator pos:start="161:84" pos:end="161:84">)</operator>

        <operator pos:start="163:9" pos:end="163:10">&amp;&amp;</operator> <operator pos:start="163:12" pos:end="163:12">(</operator>  <call pos:start="163:15" pos:end="163:84"><name pos:start="163:15" pos:end="163:33">av_image_check_size</name><argument_list pos:start="163:34" pos:end="163:84">(<argument pos:start="163:35" pos:end="163:52"><expr pos:start="163:35" pos:end="163:52"><name pos:start="163:35" pos:end="163:52"><name pos:start="163:35" pos:end="163:39">avctx</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:52">coded_width</name></name></expr></argument>, <argument pos:start="163:55" pos:end="163:73"><expr pos:start="163:55" pos:end="163:73"><name pos:start="163:55" pos:end="163:73"><name pos:start="163:55" pos:end="163:59">avctx</name><operator pos:start="163:60" pos:end="163:61">-&gt;</operator><name pos:start="163:62" pos:end="163:73">coded_height</name></name></expr></argument>, <argument pos:start="163:76" pos:end="163:76"><expr pos:start="163:76" pos:end="163:76"><literal type="number" pos:start="163:76" pos:end="163:76">0</literal></expr></argument>, <argument pos:start="163:79" pos:end="163:83"><expr pos:start="163:79" pos:end="163:83"><name pos:start="163:79" pos:end="163:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="163:86" pos:end="163:86">&lt;</operator> <literal type="number" pos:start="163:88" pos:end="163:88">0</literal>

           <operator pos:start="165:12" pos:end="165:13">||</operator> <call pos:start="165:15" pos:end="165:84"><name pos:start="165:15" pos:end="165:33">av_image_check_size</name><argument_list pos:start="165:34" pos:end="165:84">(<argument pos:start="165:35" pos:end="165:46"><expr pos:start="165:35" pos:end="165:46"><name pos:start="165:35" pos:end="165:46"><name pos:start="165:35" pos:end="165:39">avctx</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:46">width</name></name></expr></argument>,       <argument pos:start="165:55" pos:end="165:67"><expr pos:start="165:55" pos:end="165:67"><name pos:start="165:55" pos:end="165:67"><name pos:start="165:55" pos:end="165:59">avctx</name><operator pos:start="165:60" pos:end="165:61">-&gt;</operator><name pos:start="165:62" pos:end="165:67">height</name></name></expr></argument>,       <argument pos:start="165:76" pos:end="165:76"><expr pos:start="165:76" pos:end="165:76"><literal type="number" pos:start="165:76" pos:end="165:76">0</literal></expr></argument>, <argument pos:start="165:79" pos:end="165:83"><expr pos:start="165:79" pos:end="165:83"><name pos:start="165:79" pos:end="165:83">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="165:86" pos:end="165:86">&lt;</operator> <literal type="number" pos:start="165:88" pos:end="165:88">0</literal><operator pos:start="165:89" pos:end="165:89">)</operator></expr>)</condition> <block pos:start="165:92" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:44">

        <expr_stmt pos:start="167:9" pos:end="167:80"><expr pos:start="167:9" pos:end="167:79"><call pos:start="167:9" pos:end="167:79"><name pos:start="167:9" pos:end="167:14">av_log</name><argument_list pos:start="167:15" pos:end="167:79">(<argument pos:start="167:16" pos:end="167:20"><expr pos:start="167:16" pos:end="167:20"><name pos:start="167:16" pos:end="167:20">avctx</name></expr></argument>, <argument pos:start="167:23" pos:end="167:36"><expr pos:start="167:23" pos:end="167:36"><name pos:start="167:23" pos:end="167:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="167:39" pos:end="167:78"><expr pos:start="167:39" pos:end="167:78"><literal type="string" pos:start="167:39" pos:end="167:78">"ignoring invalid width/height values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:44"><expr pos:start="169:9" pos:end="169:43"><call pos:start="169:9" pos:end="169:43"><name pos:start="169:9" pos:end="169:30">avcodec_set_dimensions</name><argument_list pos:start="169:31" pos:end="169:43">(<argument pos:start="169:32" pos:end="169:36"><expr pos:start="169:32" pos:end="169:36"><name pos:start="169:32" pos:end="169:36">avctx</name></expr></argument>, <argument pos:start="169:39" pos:end="169:39"><expr pos:start="169:39" pos:end="169:39"><literal type="number" pos:start="169:39" pos:end="169:39">0</literal></expr></argument>, <argument pos:start="169:42" pos:end="169:42"><expr pos:start="169:42" pos:end="169:42"><literal type="number" pos:start="169:42" pos:end="169:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="175:5" pos:end="177:74">/* if the decoder init function was already called previously,

       free the already allocated subtitle_header before overwriting it */</comment>

    <if_stmt pos:start="179:5" pos:end="186:0"><if pos:start="179:5" pos:end="186:0">if <condition pos:start="179:8" pos:end="179:35">(<expr pos:start="179:9" pos:end="179:34"><call pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:27">av_codec_is_decoder</name><argument_list pos:start="179:28" pos:end="179:34">(<argument pos:start="179:29" pos:end="179:33"><expr pos:start="179:29" pos:end="179:33"><name pos:start="179:29" pos:end="179:33">codec</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="181:9" pos:end="186:0"><block_content pos:start="181:9" pos:end="186:0">

        <expr_stmt pos:start="181:9" pos:end="186:0"><expr pos:start="181:9" pos:end="181:41"><call pos:start="181:9" pos:end="181:41"><name pos:start="181:9" pos:end="181:16">av_freep</name><argument_list pos:start="181:17" pos:end="181:41">(<argument pos:start="181:18" pos:end="181:40"><expr pos:start="181:18" pos:end="181:40"><operator pos:start="181:18" pos:end="181:18">&amp;</operator><name pos:start="181:19" pos:end="181:40"><name pos:start="181:19" pos:end="181:23">avctx</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:40">subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="185:1" pos:end="185:29">#<cpp:directive pos:start="185:2" pos:end="185:7">define</cpp:directive> <cpp:macro pos:start="185:9" pos:end="185:24"><name pos:start="185:9" pos:end="185:24">SANE_NB_CHANNELS</name></cpp:macro> <cpp:value pos:start="185:26" pos:end="185:29">128U</cpp:value></cpp:define>

    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:43">(<expr pos:start="187:9" pos:end="187:42"><name pos:start="187:9" pos:end="187:23"><name pos:start="187:9" pos:end="187:13">avctx</name><operator pos:start="187:14" pos:end="187:15">-&gt;</operator><name pos:start="187:16" pos:end="187:23">channels</name></name> <operator pos:start="187:25" pos:end="187:25">&gt;</operator> <name pos:start="187:27" pos:end="187:42">SANE_NB_CHANNELS</name></expr>)</condition> <block pos:start="187:45" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:26">

        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:29"><name pos:start="189:15" pos:end="189:21">AVERROR</name><argument_list pos:start="189:22" pos:end="189:29">(<argument pos:start="189:23" pos:end="189:28"><expr pos:start="189:23" pos:end="189:28"><name pos:start="189:23" pos:end="189:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="191:9" pos:end="191:26">goto <name pos:start="191:14" pos:end="191:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:25"><expr pos:start="197:5" pos:end="197:24"><name pos:start="197:5" pos:end="197:16"><name pos:start="197:5" pos:end="197:9">avctx</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:16">codec</name></name> <operator pos:start="197:18" pos:end="197:18">=</operator> <name pos:start="197:20" pos:end="197:24">codec</name></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="207:5"><if pos:start="199:5" pos:end="207:5">if <condition pos:start="199:8" pos:end="201:41">(<expr pos:start="199:9" pos:end="201:40"><operator pos:start="199:9" pos:end="199:9">(</operator><name pos:start="199:10" pos:end="199:26"><name pos:start="199:10" pos:end="199:14">avctx</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:26">codec_type</name></name> <operator pos:start="199:28" pos:end="199:29">==</operator> <name pos:start="199:31" pos:end="199:50">AVMEDIA_TYPE_UNKNOWN</name> <operator pos:start="199:52" pos:end="199:53">||</operator> <name pos:start="199:55" pos:end="199:71"><name pos:start="199:55" pos:end="199:59">avctx</name><operator pos:start="199:60" pos:end="199:61">-&gt;</operator><name pos:start="199:62" pos:end="199:71">codec_type</name></name> <operator pos:start="199:73" pos:end="199:74">==</operator> <name pos:start="199:76" pos:end="199:86"><name pos:start="199:76" pos:end="199:80">codec</name><operator pos:start="199:81" pos:end="199:82">-&gt;</operator><name pos:start="199:83" pos:end="199:86">type</name></name><operator pos:start="199:87" pos:end="199:87">)</operator> <operator pos:start="199:89" pos:end="199:90">&amp;&amp;</operator>

        <name pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:13">avctx</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:23">codec_id</name></name> <operator pos:start="201:25" pos:end="201:26">==</operator> <name pos:start="201:28" pos:end="201:40">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="201:43" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:38">

        <expr_stmt pos:start="203:9" pos:end="203:40"><expr pos:start="203:9" pos:end="203:39"><name pos:start="203:9" pos:end="203:25"><name pos:start="203:9" pos:end="203:13">avctx</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:25">codec_type</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <name pos:start="203:29" pos:end="203:39"><name pos:start="203:29" pos:end="203:33">codec</name><operator pos:start="203:34" pos:end="203:35">-&gt;</operator><name pos:start="203:36" pos:end="203:39">type</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:38"><expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:13">avctx</name><operator pos:start="205:14" pos:end="205:15">-&gt;</operator><name pos:start="205:16" pos:end="205:23">codec_id</name></name>   <operator pos:start="205:27" pos:end="205:27">=</operator> <name pos:start="205:29" pos:end="205:37"><name pos:start="205:29" pos:end="205:33">codec</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:37">id</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="209:5" pos:end="219:5"><if pos:start="209:5" pos:end="219:5">if <condition pos:start="209:8" pos:end="211:76">(<expr pos:start="209:9" pos:end="211:75"><name pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:13">avctx</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:23">codec_id</name></name> <operator pos:start="209:25" pos:end="209:26">!=</operator> <name pos:start="209:28" pos:end="209:36"><name pos:start="209:28" pos:end="209:32">codec</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:36">id</name></name> <operator pos:start="209:38" pos:end="209:39">||</operator> <operator pos:start="209:41" pos:end="209:41">(</operator><name pos:start="209:42" pos:end="209:58"><name pos:start="209:42" pos:end="209:46">avctx</name><operator pos:start="209:47" pos:end="209:48">-&gt;</operator><name pos:start="209:49" pos:end="209:58">codec_type</name></name> <operator pos:start="209:60" pos:end="209:61">!=</operator> <name pos:start="209:63" pos:end="209:73"><name pos:start="209:63" pos:end="209:67">codec</name><operator pos:start="209:68" pos:end="209:69">-&gt;</operator><name pos:start="209:70" pos:end="209:73">type</name></name>

                           <operator pos:start="211:28" pos:end="211:29">&amp;&amp;</operator> <name pos:start="211:31" pos:end="211:47"><name pos:start="211:31" pos:end="211:35">avctx</name><operator pos:start="211:36" pos:end="211:37">-&gt;</operator><name pos:start="211:38" pos:end="211:47">codec_type</name></name> <operator pos:start="211:49" pos:end="211:50">!=</operator> <name pos:start="211:52" pos:end="211:74">AVMEDIA_TYPE_ATTACHMENT</name><operator pos:start="211:75" pos:end="211:75">)</operator></expr>)</condition> <block pos:start="211:78" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:26">

        <expr_stmt pos:start="213:9" pos:end="213:69"><expr pos:start="213:9" pos:end="213:68"><call pos:start="213:9" pos:end="213:68"><name pos:start="213:9" pos:end="213:14">av_log</name><argument_list pos:start="213:15" pos:end="213:68">(<argument pos:start="213:16" pos:end="213:20"><expr pos:start="213:16" pos:end="213:20"><name pos:start="213:16" pos:end="213:20">avctx</name></expr></argument>, <argument pos:start="213:23" pos:end="213:34"><expr pos:start="213:23" pos:end="213:34"><name pos:start="213:23" pos:end="213:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="213:37" pos:end="213:67"><expr pos:start="213:37" pos:end="213:67"><literal type="string" pos:start="213:37" pos:end="213:67">"codec type or id mismatches\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:30"><expr pos:start="215:9" pos:end="215:29"><name pos:start="215:9" pos:end="215:11">ret</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <call pos:start="215:15" pos:end="215:29"><name pos:start="215:15" pos:end="215:21">AVERROR</name><argument_list pos:start="215:22" pos:end="215:29">(<argument pos:start="215:23" pos:end="215:28"><expr pos:start="215:23" pos:end="215:28"><name pos:start="215:23" pos:end="215:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="217:9" pos:end="217:26">goto <name pos:start="217:14" pos:end="217:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:28"><expr pos:start="221:5" pos:end="221:27"><name pos:start="221:5" pos:end="221:23"><name pos:start="221:5" pos:end="221:9">avctx</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:23">frame_number</name></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <literal type="number" pos:start="221:27" pos:end="221:27">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="225:5" pos:end="233:5"><if pos:start="225:5" pos:end="233:5">if <condition pos:start="225:8" pos:end="227:57">(<expr pos:start="225:9" pos:end="227:56"><name pos:start="225:9" pos:end="225:25"><name pos:start="225:9" pos:end="225:13">avctx</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:25">codec_type</name></name> <operator pos:start="225:27" pos:end="225:28">==</operator> <name pos:start="225:30" pos:end="225:47">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="225:49" pos:end="225:50">&amp;&amp;</operator>

        <operator pos:start="227:9" pos:end="227:9">(</operator><operator pos:start="227:10" pos:end="227:10">!</operator><name pos:start="227:11" pos:end="227:30"><name pos:start="227:11" pos:end="227:15">avctx</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:26">time_base</name><operator pos:start="227:27" pos:end="227:27">.</operator><name pos:start="227:28" pos:end="227:30">num</name></name> <operator pos:start="227:32" pos:end="227:33">||</operator> <operator pos:start="227:35" pos:end="227:35">!</operator><name pos:start="227:36" pos:end="227:55"><name pos:start="227:36" pos:end="227:40">avctx</name><operator pos:start="227:41" pos:end="227:42">-&gt;</operator><name pos:start="227:43" pos:end="227:51">time_base</name><operator pos:start="227:52" pos:end="227:52">.</operator><name pos:start="227:53" pos:end="227:55">den</name></name><operator pos:start="227:56" pos:end="227:56">)</operator></expr>)</condition> <block pos:start="227:59" pos:end="233:5">{<block_content pos:start="229:9" pos:end="231:50">

        <expr_stmt pos:start="229:9" pos:end="229:33"><expr pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:28"><name pos:start="229:9" pos:end="229:13">avctx</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:24">time_base</name><operator pos:start="229:25" pos:end="229:25">.</operator><name pos:start="229:26" pos:end="229:28">num</name></name> <operator pos:start="229:30" pos:end="229:30">=</operator> <literal type="number" pos:start="229:32" pos:end="229:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:50"><expr pos:start="231:9" pos:end="231:49"><name pos:start="231:9" pos:end="231:28"><name pos:start="231:9" pos:end="231:13">avctx</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:24">time_base</name><operator pos:start="231:25" pos:end="231:25">.</operator><name pos:start="231:26" pos:end="231:28">den</name></name> <operator pos:start="231:30" pos:end="231:30">=</operator> <name pos:start="231:32" pos:end="231:49"><name pos:start="231:32" pos:end="231:36">avctx</name><operator pos:start="231:37" pos:end="231:38">-&gt;</operator><name pos:start="231:39" pos:end="231:49">sample_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="239:109"><if pos:start="237:5" pos:end="239:109">if <condition pos:start="237:8" pos:end="237:22">(<expr pos:start="237:9" pos:end="237:21"><operator pos:start="237:9" pos:end="237:9">!</operator><name pos:start="237:10" pos:end="237:21">HAVE_THREADS</name></expr>)</condition><block type="pseudo" pos:start="239:9" pos:end="239:109"><block_content pos:start="239:9" pos:end="239:109">

        <expr_stmt pos:start="239:9" pos:end="239:109"><expr pos:start="239:9" pos:end="239:108"><call pos:start="239:9" pos:end="239:108"><name pos:start="239:9" pos:end="239:14">av_log</name><argument_list pos:start="239:15" pos:end="239:108">(<argument pos:start="239:16" pos:end="239:20"><expr pos:start="239:16" pos:end="239:20"><name pos:start="239:16" pos:end="239:20">avctx</name></expr></argument>, <argument pos:start="239:23" pos:end="239:36"><expr pos:start="239:23" pos:end="239:36"><name pos:start="239:23" pos:end="239:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="239:39" pos:end="239:107"><expr pos:start="239:39" pos:end="239:107"><literal type="string" pos:start="239:39" pos:end="239:107">"Warning: not compiled with thread support, using thread emulation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="253:5"><if pos:start="243:5" pos:end="253:5">if <condition pos:start="243:8" pos:end="243:46">(<expr pos:start="243:9" pos:end="243:45"><name pos:start="243:9" pos:end="243:20">HAVE_THREADS</name> <operator pos:start="243:22" pos:end="243:23">&amp;&amp;</operator> <operator pos:start="243:25" pos:end="243:25">!</operator><name pos:start="243:26" pos:end="243:45"><name pos:start="243:26" pos:end="243:30">avctx</name><operator pos:start="243:31" pos:end="243:32">-&gt;</operator><name pos:start="243:33" pos:end="243:45">thread_opaque</name></name></expr>)</condition> <block pos:start="243:48" pos:end="253:5">{<block_content pos:start="245:9" pos:end="251:9">

        <expr_stmt pos:start="245:9" pos:end="245:36"><expr pos:start="245:9" pos:end="245:35"><name pos:start="245:9" pos:end="245:11">ret</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <call pos:start="245:15" pos:end="245:35"><name pos:start="245:15" pos:end="245:28">ff_thread_init</name><argument_list pos:start="245:29" pos:end="245:35">(<argument pos:start="245:30" pos:end="245:34"><expr pos:start="245:30" pos:end="245:34"><name pos:start="245:30" pos:end="245:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="247:9" pos:end="251:9"><if pos:start="247:9" pos:end="251:9">if <condition pos:start="247:12" pos:end="247:20">(<expr pos:start="247:13" pos:end="247:19"><name pos:start="247:13" pos:end="247:15">ret</name> <operator pos:start="247:17" pos:end="247:17">&lt;</operator> <literal type="number" pos:start="247:19" pos:end="247:19">0</literal></expr>)</condition> <block pos:start="247:22" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:30">

            <goto pos:start="249:13" pos:end="249:30">goto <name pos:start="249:18" pos:end="249:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="255:5" pos:end="257:32"><if pos:start="255:5" pos:end="257:32">if <condition pos:start="255:8" pos:end="255:73">(<expr pos:start="255:9" pos:end="255:72"><operator pos:start="255:9" pos:end="255:9">!</operator><name pos:start="255:10" pos:end="255:21">HAVE_THREADS</name> <operator pos:start="255:23" pos:end="255:24">&amp;&amp;</operator> <operator pos:start="255:26" pos:end="255:26">!</operator><operator pos:start="255:27" pos:end="255:27">(</operator><name pos:start="255:28" pos:end="255:46"><name pos:start="255:28" pos:end="255:32">codec</name><operator pos:start="255:33" pos:end="255:34">-&gt;</operator><name pos:start="255:35" pos:end="255:46">capabilities</name></name> <operator pos:start="255:48" pos:end="255:48">&amp;</operator> <name pos:start="255:50" pos:end="255:71">CODEC_CAP_AUTO_THREADS</name><operator pos:start="255:72" pos:end="255:72">)</operator></expr>)</condition><block type="pseudo" pos:start="257:9" pos:end="257:32"><block_content pos:start="257:9" pos:end="257:32">

        <expr_stmt pos:start="257:9" pos:end="257:32"><expr pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:27"><name pos:start="257:9" pos:end="257:13">avctx</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:27">thread_count</name></name> <operator pos:start="257:29" pos:end="257:29">=</operator> <literal type="number" pos:start="257:31" pos:end="257:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="261:5" pos:end="271:5"><if pos:start="261:5" pos:end="271:5">if <condition pos:start="261:8" pos:end="261:70">(<expr pos:start="261:9" pos:end="261:69"><name pos:start="261:9" pos:end="261:32"><name pos:start="261:9" pos:end="261:13">avctx</name><operator pos:start="261:14" pos:end="261:15">-&gt;</operator><name pos:start="261:16" pos:end="261:20">codec</name><operator pos:start="261:21" pos:end="261:22">-&gt;</operator><name pos:start="261:23" pos:end="261:32">max_lowres</name></name> <operator pos:start="261:34" pos:end="261:34">&lt;</operator> <name pos:start="261:36" pos:end="261:48"><name pos:start="261:36" pos:end="261:40">avctx</name><operator pos:start="261:41" pos:end="261:42">-&gt;</operator><name pos:start="261:43" pos:end="261:48">lowres</name></name> <operator pos:start="261:50" pos:end="261:51">||</operator> <name pos:start="261:53" pos:end="261:65"><name pos:start="261:53" pos:end="261:57">avctx</name><operator pos:start="261:58" pos:end="261:59">-&gt;</operator><name pos:start="261:60" pos:end="261:65">lowres</name></name> <operator pos:start="261:67" pos:end="261:67">&lt;</operator> <literal type="number" pos:start="261:69" pos:end="261:69">0</literal></expr>)</condition> <block pos:start="261:72" pos:end="271:5">{<block_content pos:start="263:9" pos:end="269:26">

        <expr_stmt pos:start="263:9" pos:end="265:41"><expr pos:start="263:9" pos:end="265:40"><call pos:start="263:9" pos:end="265:40"><name pos:start="263:9" pos:end="263:14">av_log</name><argument_list pos:start="263:15" pos:end="265:40">(<argument pos:start="263:16" pos:end="263:20"><expr pos:start="263:16" pos:end="263:20"><name pos:start="263:16" pos:end="263:20">avctx</name></expr></argument>, <argument pos:start="263:23" pos:end="263:34"><expr pos:start="263:23" pos:end="263:34"><name pos:start="263:23" pos:end="263:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:37" pos:end="263:99"><expr pos:start="263:37" pos:end="263:99"><literal type="string" pos:start="263:37" pos:end="263:99">"The maximum value for lowres supported by the decoder is %d\n"</literal></expr></argument>,

               <argument pos:start="265:16" pos:end="265:39"><expr pos:start="265:16" pos:end="265:39"><name pos:start="265:16" pos:end="265:39"><name pos:start="265:16" pos:end="265:20">avctx</name><operator pos:start="265:21" pos:end="265:22">-&gt;</operator><name pos:start="265:23" pos:end="265:27">codec</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:39">max_lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:30"><expr pos:start="267:9" pos:end="267:29"><name pos:start="267:9" pos:end="267:11">ret</name> <operator pos:start="267:13" pos:end="267:13">=</operator> <call pos:start="267:15" pos:end="267:29"><name pos:start="267:15" pos:end="267:21">AVERROR</name><argument_list pos:start="267:22" pos:end="267:29">(<argument pos:start="267:23" pos:end="267:28"><expr pos:start="267:23" pos:end="267:28"><name pos:start="267:23" pos:end="267:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="269:9" pos:end="269:26">goto <name pos:start="269:14" pos:end="269:25">free_and_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="275:5" pos:end="389:5"><if pos:start="275:5" pos:end="389:5">if <condition pos:start="275:8" pos:end="275:42">(<expr pos:start="275:9" pos:end="275:41"><call pos:start="275:9" pos:end="275:41"><name pos:start="275:9" pos:end="275:27">av_codec_is_encoder</name><argument_list pos:start="275:28" pos:end="275:41">(<argument pos:start="275:29" pos:end="275:40"><expr pos:start="275:29" pos:end="275:40"><name pos:start="275:29" pos:end="275:40"><name pos:start="275:29" pos:end="275:33">avctx</name><operator pos:start="275:34" pos:end="275:35">-&gt;</operator><name pos:start="275:36" pos:end="275:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="275:44" pos:end="389:5">{<block_content pos:start="277:9" pos:end="387:9">

        <decl_stmt pos:start="277:9" pos:end="277:14"><decl pos:start="277:9" pos:end="277:13"><type pos:start="277:9" pos:end="277:11"><name pos:start="277:9" pos:end="277:11">int</name></type> <name pos:start="277:13" pos:end="277:13">i</name></decl>;</decl_stmt>

        <if_stmt pos:start="279:9" pos:end="297:9"><if pos:start="279:9" pos:end="297:9">if <condition pos:start="279:12" pos:end="279:38">(<expr pos:start="279:13" pos:end="279:37"><name pos:start="279:13" pos:end="279:37"><name pos:start="279:13" pos:end="279:17">avctx</name><operator pos:start="279:18" pos:end="279:19">-&gt;</operator><name pos:start="279:20" pos:end="279:24">codec</name><operator pos:start="279:25" pos:end="279:26">-&gt;</operator><name pos:start="279:27" pos:end="279:37">sample_fmts</name></name></expr>)</condition> <block pos:start="279:40" pos:end="297:9">{<block_content pos:start="281:13" pos:end="295:13">

            <for pos:start="281:13" pos:end="285:26">for <control pos:start="281:17" pos:end="281:80">(<init pos:start="281:18" pos:end="281:23"><expr pos:start="281:18" pos:end="281:22"><name pos:start="281:18" pos:end="281:18">i</name> <operator pos:start="281:20" pos:end="281:20">=</operator> <literal type="number" pos:start="281:22" pos:end="281:22">0</literal></expr>;</init> <condition pos:start="281:25" pos:end="281:75"><expr pos:start="281:25" pos:end="281:74"><name pos:start="281:25" pos:end="281:52"><name pos:start="281:25" pos:end="281:29">avctx</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:36">codec</name><operator pos:start="281:37" pos:end="281:38">-&gt;</operator><name pos:start="281:39" pos:end="281:49">sample_fmts</name><index pos:start="281:50" pos:end="281:52">[<expr pos:start="281:51" pos:end="281:51"><name pos:start="281:51" pos:end="281:51">i</name></expr>]</index></name> <operator pos:start="281:54" pos:end="281:55">!=</operator> <name pos:start="281:57" pos:end="281:74">AV_SAMPLE_FMT_NONE</name></expr>;</condition> <incr pos:start="281:77" pos:end="281:79"><expr pos:start="281:77" pos:end="281:79"><name pos:start="281:77" pos:end="281:77">i</name><operator pos:start="281:78" pos:end="281:79">++</operator></expr></incr>)</control><block type="pseudo" pos:start="283:17" pos:end="285:26"><block_content pos:start="283:17" pos:end="285:26">

                <if_stmt pos:start="283:17" pos:end="285:26"><if pos:start="283:17" pos:end="285:26">if <condition pos:start="283:20" pos:end="283:70">(<expr pos:start="283:21" pos:end="283:69"><name pos:start="283:21" pos:end="283:37"><name pos:start="283:21" pos:end="283:25">avctx</name><operator pos:start="283:26" pos:end="283:27">-&gt;</operator><name pos:start="283:28" pos:end="283:37">sample_fmt</name></name> <operator pos:start="283:39" pos:end="283:40">==</operator> <name pos:start="283:42" pos:end="283:69"><name pos:start="283:42" pos:end="283:46">avctx</name><operator pos:start="283:47" pos:end="283:48">-&gt;</operator><name pos:start="283:49" pos:end="283:53">codec</name><operator pos:start="283:54" pos:end="283:55">-&gt;</operator><name pos:start="283:56" pos:end="283:66">sample_fmts</name><index pos:start="283:67" pos:end="283:69">[<expr pos:start="283:68" pos:end="283:68"><name pos:start="283:68" pos:end="283:68">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="285:21" pos:end="285:26"><block_content pos:start="285:21" pos:end="285:26">

                    <break pos:start="285:21" pos:end="285:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="287:13" pos:end="295:13"><if pos:start="287:13" pos:end="295:13">if <condition pos:start="287:16" pos:end="287:67">(<expr pos:start="287:17" pos:end="287:66"><name pos:start="287:17" pos:end="287:44"><name pos:start="287:17" pos:end="287:21">avctx</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:28">codec</name><operator pos:start="287:29" pos:end="287:30">-&gt;</operator><name pos:start="287:31" pos:end="287:41">sample_fmts</name><index pos:start="287:42" pos:end="287:44">[<expr pos:start="287:43" pos:end="287:43"><name pos:start="287:43" pos:end="287:43">i</name></expr>]</index></name> <operator pos:start="287:46" pos:end="287:47">==</operator> <name pos:start="287:49" pos:end="287:66">AV_SAMPLE_FMT_NONE</name></expr>)</condition> <block pos:start="287:69" pos:end="295:13">{<block_content pos:start="289:17" pos:end="293:34">

                <expr_stmt pos:start="289:17" pos:end="289:88"><expr pos:start="289:17" pos:end="289:87"><call pos:start="289:17" pos:end="289:87"><name pos:start="289:17" pos:end="289:22">av_log</name><argument_list pos:start="289:23" pos:end="289:87">(<argument pos:start="289:24" pos:end="289:28"><expr pos:start="289:24" pos:end="289:28"><name pos:start="289:24" pos:end="289:28">avctx</name></expr></argument>, <argument pos:start="289:31" pos:end="289:42"><expr pos:start="289:31" pos:end="289:42"><name pos:start="289:31" pos:end="289:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="289:45" pos:end="289:86"><expr pos:start="289:45" pos:end="289:86"><literal type="string" pos:start="289:45" pos:end="289:86">"Specified sample_fmt is not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:38"><expr pos:start="291:17" pos:end="291:37"><name pos:start="291:17" pos:end="291:19">ret</name> <operator pos:start="291:21" pos:end="291:21">=</operator> <call pos:start="291:23" pos:end="291:37"><name pos:start="291:23" pos:end="291:29">AVERROR</name><argument_list pos:start="291:30" pos:end="291:37">(<argument pos:start="291:31" pos:end="291:36"><expr pos:start="291:31" pos:end="291:36"><name pos:start="291:31" pos:end="291:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="293:17" pos:end="293:34">goto <name pos:start="293:22" pos:end="293:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="299:9" pos:end="321:9"><if pos:start="299:9" pos:end="321:9">if <condition pos:start="299:12" pos:end="299:35">(<expr pos:start="299:13" pos:end="299:34"><name pos:start="299:13" pos:end="299:34"><name pos:start="299:13" pos:end="299:17">avctx</name><operator pos:start="299:18" pos:end="299:19">-&gt;</operator><name pos:start="299:20" pos:end="299:24">codec</name><operator pos:start="299:25" pos:end="299:26">-&gt;</operator><name pos:start="299:27" pos:end="299:34">pix_fmts</name></name></expr>)</condition> <block pos:start="299:37" pos:end="321:9">{<block_content pos:start="301:13" pos:end="319:13">

            <for pos:start="301:13" pos:end="305:26">for <control pos:start="301:17" pos:end="301:71">(<init pos:start="301:18" pos:end="301:23"><expr pos:start="301:18" pos:end="301:22"><name pos:start="301:18" pos:end="301:18">i</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <literal type="number" pos:start="301:22" pos:end="301:22">0</literal></expr>;</init> <condition pos:start="301:25" pos:end="301:66"><expr pos:start="301:25" pos:end="301:65"><name pos:start="301:25" pos:end="301:49"><name pos:start="301:25" pos:end="301:29">avctx</name><operator pos:start="301:30" pos:end="301:31">-&gt;</operator><name pos:start="301:32" pos:end="301:36">codec</name><operator pos:start="301:37" pos:end="301:38">-&gt;</operator><name pos:start="301:39" pos:end="301:46">pix_fmts</name><index pos:start="301:47" pos:end="301:49">[<expr pos:start="301:48" pos:end="301:48"><name pos:start="301:48" pos:end="301:48">i</name></expr>]</index></name> <operator pos:start="301:51" pos:end="301:52">!=</operator> <name pos:start="301:54" pos:end="301:65">PIX_FMT_NONE</name></expr>;</condition> <incr pos:start="301:68" pos:end="301:70"><expr pos:start="301:68" pos:end="301:70"><name pos:start="301:68" pos:end="301:68">i</name><operator pos:start="301:69" pos:end="301:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="303:17" pos:end="305:26"><block_content pos:start="303:17" pos:end="305:26">

                <if_stmt pos:start="303:17" pos:end="305:26"><if pos:start="303:17" pos:end="305:26">if <condition pos:start="303:20" pos:end="303:64">(<expr pos:start="303:21" pos:end="303:63"><name pos:start="303:21" pos:end="303:34"><name pos:start="303:21" pos:end="303:25">avctx</name><operator pos:start="303:26" pos:end="303:27">-&gt;</operator><name pos:start="303:28" pos:end="303:34">pix_fmt</name></name> <operator pos:start="303:36" pos:end="303:37">==</operator> <name pos:start="303:39" pos:end="303:63"><name pos:start="303:39" pos:end="303:43">avctx</name><operator pos:start="303:44" pos:end="303:45">-&gt;</operator><name pos:start="303:46" pos:end="303:50">codec</name><operator pos:start="303:51" pos:end="303:52">-&gt;</operator><name pos:start="303:53" pos:end="303:60">pix_fmts</name><index pos:start="303:61" pos:end="303:63">[<expr pos:start="303:62" pos:end="303:62"><name pos:start="303:62" pos:end="303:62">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="305:21" pos:end="305:26"><block_content pos:start="305:21" pos:end="305:26">

                    <break pos:start="305:21" pos:end="305:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="307:13" pos:end="319:13"><if pos:start="307:13" pos:end="319:13">if <condition pos:start="307:16" pos:end="311:82">(<expr pos:start="307:17" pos:end="311:81"><name pos:start="307:17" pos:end="307:41"><name pos:start="307:17" pos:end="307:21">avctx</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:28">codec</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:38">pix_fmts</name><index pos:start="307:39" pos:end="307:41">[<expr pos:start="307:40" pos:end="307:40"><name pos:start="307:40" pos:end="307:40">i</name></expr>]</index></name> <operator pos:start="307:43" pos:end="307:44">==</operator> <name pos:start="307:46" pos:end="307:57">PIX_FMT_NONE</name>

                <operator pos:start="309:17" pos:end="309:18">&amp;&amp;</operator> <operator pos:start="309:20" pos:end="309:20">!</operator><operator pos:start="309:21" pos:end="309:21">(</operator><operator pos:start="309:22" pos:end="309:22">(</operator><name pos:start="309:23" pos:end="309:37"><name pos:start="309:23" pos:end="309:27">avctx</name><operator pos:start="309:28" pos:end="309:29">-&gt;</operator><name pos:start="309:30" pos:end="309:37">codec_id</name></name> <operator pos:start="309:39" pos:end="309:40">==</operator> <name pos:start="309:42" pos:end="309:55">CODEC_ID_MJPEG</name> <operator pos:start="309:57" pos:end="309:58">||</operator> <name pos:start="309:60" pos:end="309:74"><name pos:start="309:60" pos:end="309:64">avctx</name><operator pos:start="309:65" pos:end="309:66">-&gt;</operator><name pos:start="309:67" pos:end="309:74">codec_id</name></name> <operator pos:start="309:76" pos:end="309:77">==</operator> <name pos:start="309:79" pos:end="309:92">CODEC_ID_LJPEG</name><operator pos:start="309:93" pos:end="309:93">)</operator>

                     <operator pos:start="311:22" pos:end="311:23">&amp;&amp;</operator> <name pos:start="311:25" pos:end="311:52"><name pos:start="311:25" pos:end="311:29">avctx</name><operator pos:start="311:30" pos:end="311:31">-&gt;</operator><name pos:start="311:32" pos:end="311:52">strict_std_compliance</name></name> <operator pos:start="311:54" pos:end="311:55">&lt;=</operator> <name pos:start="311:57" pos:end="311:80">FF_COMPLIANCE_UNOFFICIAL</name><operator pos:start="311:81" pos:end="311:81">)</operator></expr>)</condition> <block pos:start="311:84" pos:end="319:13">{<block_content pos:start="313:17" pos:end="317:34">

                <expr_stmt pos:start="313:17" pos:end="313:84"><expr pos:start="313:17" pos:end="313:83"><call pos:start="313:17" pos:end="313:83"><name pos:start="313:17" pos:end="313:22">av_log</name><argument_list pos:start="313:23" pos:end="313:83">(<argument pos:start="313:24" pos:end="313:28"><expr pos:start="313:24" pos:end="313:28"><name pos:start="313:24" pos:end="313:28">avctx</name></expr></argument>, <argument pos:start="313:31" pos:end="313:42"><expr pos:start="313:31" pos:end="313:42"><name pos:start="313:31" pos:end="313:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="313:45" pos:end="313:82"><expr pos:start="313:45" pos:end="313:82"><literal type="string" pos:start="313:45" pos:end="313:82">"Specified pix_fmt is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:38"><expr pos:start="315:17" pos:end="315:37"><name pos:start="315:17" pos:end="315:19">ret</name> <operator pos:start="315:21" pos:end="315:21">=</operator> <call pos:start="315:23" pos:end="315:37"><name pos:start="315:23" pos:end="315:29">AVERROR</name><argument_list pos:start="315:30" pos:end="315:37">(<argument pos:start="315:31" pos:end="315:36"><expr pos:start="315:31" pos:end="315:36"><name pos:start="315:31" pos:end="315:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="317:17" pos:end="317:34">goto <name pos:start="317:22" pos:end="317:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="323:9" pos:end="341:9"><if pos:start="323:9" pos:end="341:9">if <condition pos:start="323:12" pos:end="323:48">(<expr pos:start="323:13" pos:end="323:47"><name pos:start="323:13" pos:end="323:47"><name pos:start="323:13" pos:end="323:17">avctx</name><operator pos:start="323:18" pos:end="323:19">-&gt;</operator><name pos:start="323:20" pos:end="323:24">codec</name><operator pos:start="323:25" pos:end="323:26">-&gt;</operator><name pos:start="323:27" pos:end="323:47">supported_samplerates</name></name></expr>)</condition> <block pos:start="323:50" pos:end="341:9">{<block_content pos:start="325:13" pos:end="339:13">

            <for pos:start="325:13" pos:end="329:26">for <control pos:start="325:17" pos:end="325:73">(<init pos:start="325:18" pos:end="325:23"><expr pos:start="325:18" pos:end="325:22"><name pos:start="325:18" pos:end="325:18">i</name> <operator pos:start="325:20" pos:end="325:20">=</operator> <literal type="number" pos:start="325:22" pos:end="325:22">0</literal></expr>;</init> <condition pos:start="325:25" pos:end="325:68"><expr pos:start="325:25" pos:end="325:67"><name pos:start="325:25" pos:end="325:62"><name pos:start="325:25" pos:end="325:29">avctx</name><operator pos:start="325:30" pos:end="325:31">-&gt;</operator><name pos:start="325:32" pos:end="325:36">codec</name><operator pos:start="325:37" pos:end="325:38">-&gt;</operator><name pos:start="325:39" pos:end="325:59">supported_samplerates</name><index pos:start="325:60" pos:end="325:62">[<expr pos:start="325:61" pos:end="325:61"><name pos:start="325:61" pos:end="325:61">i</name></expr>]</index></name> <operator pos:start="325:64" pos:end="325:65">!=</operator> <literal type="number" pos:start="325:67" pos:end="325:67">0</literal></expr>;</condition> <incr pos:start="325:70" pos:end="325:72"><expr pos:start="325:70" pos:end="325:72"><name pos:start="325:70" pos:end="325:70">i</name><operator pos:start="325:71" pos:end="325:72">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:17" pos:end="329:26"><block_content pos:start="327:17" pos:end="329:26">

                <if_stmt pos:start="327:17" pos:end="329:26"><if pos:start="327:17" pos:end="329:26">if <condition pos:start="327:20" pos:end="327:81">(<expr pos:start="327:21" pos:end="327:80"><name pos:start="327:21" pos:end="327:38"><name pos:start="327:21" pos:end="327:25">avctx</name><operator pos:start="327:26" pos:end="327:27">-&gt;</operator><name pos:start="327:28" pos:end="327:38">sample_rate</name></name> <operator pos:start="327:40" pos:end="327:41">==</operator> <name pos:start="327:43" pos:end="327:80"><name pos:start="327:43" pos:end="327:47">avctx</name><operator pos:start="327:48" pos:end="327:49">-&gt;</operator><name pos:start="327:50" pos:end="327:54">codec</name><operator pos:start="327:55" pos:end="327:56">-&gt;</operator><name pos:start="327:57" pos:end="327:77">supported_samplerates</name><index pos:start="327:78" pos:end="327:80">[<expr pos:start="327:79" pos:end="327:79"><name pos:start="327:79" pos:end="327:79">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="329:21" pos:end="329:26"><block_content pos:start="329:21" pos:end="329:26">

                    <break pos:start="329:21" pos:end="329:26">break;</break></block_content></block></if></if_stmt></block_content></block></for>

            <if_stmt pos:start="331:13" pos:end="339:13"><if pos:start="331:13" pos:end="339:13">if <condition pos:start="331:16" pos:end="331:60">(<expr pos:start="331:17" pos:end="331:59"><name pos:start="331:17" pos:end="331:54"><name pos:start="331:17" pos:end="331:21">avctx</name><operator pos:start="331:22" pos:end="331:23">-&gt;</operator><name pos:start="331:24" pos:end="331:28">codec</name><operator pos:start="331:29" pos:end="331:30">-&gt;</operator><name pos:start="331:31" pos:end="331:51">supported_samplerates</name><index pos:start="331:52" pos:end="331:54">[<expr pos:start="331:53" pos:end="331:53"><name pos:start="331:53" pos:end="331:53">i</name></expr>]</index></name> <operator pos:start="331:56" pos:end="331:57">==</operator> <literal type="number" pos:start="331:59" pos:end="331:59">0</literal></expr>)</condition> <block pos:start="331:62" pos:end="339:13">{<block_content pos:start="333:17" pos:end="337:34">

                <expr_stmt pos:start="333:17" pos:end="333:88"><expr pos:start="333:17" pos:end="333:87"><call pos:start="333:17" pos:end="333:87"><name pos:start="333:17" pos:end="333:22">av_log</name><argument_list pos:start="333:23" pos:end="333:87">(<argument pos:start="333:24" pos:end="333:28"><expr pos:start="333:24" pos:end="333:28"><name pos:start="333:24" pos:end="333:28">avctx</name></expr></argument>, <argument pos:start="333:31" pos:end="333:42"><expr pos:start="333:31" pos:end="333:42"><name pos:start="333:31" pos:end="333:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="333:45" pos:end="333:86"><expr pos:start="333:45" pos:end="333:86"><literal type="string" pos:start="333:45" pos:end="333:86">"Specified sample_rate is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:38"><expr pos:start="335:17" pos:end="335:37"><name pos:start="335:17" pos:end="335:19">ret</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="335:37"><name pos:start="335:23" pos:end="335:29">AVERROR</name><argument_list pos:start="335:30" pos:end="335:37">(<argument pos:start="335:31" pos:end="335:36"><expr pos:start="335:31" pos:end="335:36"><name pos:start="335:31" pos:end="335:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="337:17" pos:end="337:34">goto <name pos:start="337:22" pos:end="337:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="343:9" pos:end="369:9"><if pos:start="343:9" pos:end="369:9">if <condition pos:start="343:12" pos:end="343:42">(<expr pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:17">avctx</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:24">codec</name><operator pos:start="343:25" pos:end="343:26">-&gt;</operator><name pos:start="343:27" pos:end="343:41">channel_layouts</name></name></expr>)</condition> <block pos:start="343:44" pos:end="369:9">{<block_content pos:start="345:13" pos:end="367:13">

            <if_stmt pos:start="345:13" pos:end="367:13"><if pos:start="345:13" pos:end="349:13">if <condition pos:start="345:16" pos:end="345:39">(<expr pos:start="345:17" pos:end="345:38"><operator pos:start="345:17" pos:end="345:17">!</operator><name pos:start="345:18" pos:end="345:38"><name pos:start="345:18" pos:end="345:22">avctx</name><operator pos:start="345:23" pos:end="345:24">-&gt;</operator><name pos:start="345:25" pos:end="345:38">channel_layout</name></name></expr>)</condition> <block pos:start="345:41" pos:end="349:13">{<block_content pos:start="347:17" pos:end="347:80">

                <expr_stmt pos:start="347:17" pos:end="347:80"><expr pos:start="347:17" pos:end="347:79"><call pos:start="347:17" pos:end="347:79"><name pos:start="347:17" pos:end="347:22">av_log</name><argument_list pos:start="347:23" pos:end="347:79">(<argument pos:start="347:24" pos:end="347:28"><expr pos:start="347:24" pos:end="347:28"><name pos:start="347:24" pos:end="347:28">avctx</name></expr></argument>, <argument pos:start="347:31" pos:end="347:44"><expr pos:start="347:31" pos:end="347:44"><name pos:start="347:31" pos:end="347:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="347:47" pos:end="347:78"><expr pos:start="347:47" pos:end="347:78"><literal type="string" pos:start="347:47" pos:end="347:78">"channel_layout not specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="349:15" pos:end="367:13">else <block pos:start="349:20" pos:end="367:13">{<block_content pos:start="351:17" pos:end="365:17">

                <for pos:start="351:17" pos:end="355:30">for <control pos:start="351:21" pos:end="351:71">(<init pos:start="351:22" pos:end="351:27"><expr pos:start="351:22" pos:end="351:26"><name pos:start="351:22" pos:end="351:22">i</name> <operator pos:start="351:24" pos:end="351:24">=</operator> <literal type="number" pos:start="351:26" pos:end="351:26">0</literal></expr>;</init> <condition pos:start="351:29" pos:end="351:66"><expr pos:start="351:29" pos:end="351:65"><name pos:start="351:29" pos:end="351:60"><name pos:start="351:29" pos:end="351:33">avctx</name><operator pos:start="351:34" pos:end="351:35">-&gt;</operator><name pos:start="351:36" pos:end="351:40">codec</name><operator pos:start="351:41" pos:end="351:42">-&gt;</operator><name pos:start="351:43" pos:end="351:57">channel_layouts</name><index pos:start="351:58" pos:end="351:60">[<expr pos:start="351:59" pos:end="351:59"><name pos:start="351:59" pos:end="351:59">i</name></expr>]</index></name> <operator pos:start="351:62" pos:end="351:63">!=</operator> <literal type="number" pos:start="351:65" pos:end="351:65">0</literal></expr>;</condition> <incr pos:start="351:68" pos:end="351:70"><expr pos:start="351:68" pos:end="351:70"><name pos:start="351:68" pos:end="351:68">i</name><operator pos:start="351:69" pos:end="351:70">++</operator></expr></incr>)</control><block type="pseudo" pos:start="353:21" pos:end="355:30"><block_content pos:start="353:21" pos:end="355:30">

                    <if_stmt pos:start="353:21" pos:end="355:30"><if pos:start="353:21" pos:end="355:30">if <condition pos:start="353:24" pos:end="353:82">(<expr pos:start="353:25" pos:end="353:81"><name pos:start="353:25" pos:end="353:45"><name pos:start="353:25" pos:end="353:29">avctx</name><operator pos:start="353:30" pos:end="353:31">-&gt;</operator><name pos:start="353:32" pos:end="353:45">channel_layout</name></name> <operator pos:start="353:47" pos:end="353:48">==</operator> <name pos:start="353:50" pos:end="353:81"><name pos:start="353:50" pos:end="353:54">avctx</name><operator pos:start="353:55" pos:end="353:56">-&gt;</operator><name pos:start="353:57" pos:end="353:61">codec</name><operator pos:start="353:62" pos:end="353:63">-&gt;</operator><name pos:start="353:64" pos:end="353:78">channel_layouts</name><index pos:start="353:79" pos:end="353:81">[<expr pos:start="353:80" pos:end="353:80"><name pos:start="353:80" pos:end="353:80">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="355:25" pos:end="355:30"><block_content pos:start="355:25" pos:end="355:30">

                        <break pos:start="355:25" pos:end="355:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>

                <if_stmt pos:start="357:17" pos:end="365:17"><if pos:start="357:17" pos:end="365:17">if <condition pos:start="357:20" pos:end="357:58">(<expr pos:start="357:21" pos:end="357:57"><name pos:start="357:21" pos:end="357:52"><name pos:start="357:21" pos:end="357:25">avctx</name><operator pos:start="357:26" pos:end="357:27">-&gt;</operator><name pos:start="357:28" pos:end="357:32">codec</name><operator pos:start="357:33" pos:end="357:34">-&gt;</operator><name pos:start="357:35" pos:end="357:49">channel_layouts</name><index pos:start="357:50" pos:end="357:52">[<expr pos:start="357:51" pos:end="357:51"><name pos:start="357:51" pos:end="357:51">i</name></expr>]</index></name> <operator pos:start="357:54" pos:end="357:55">==</operator> <literal type="number" pos:start="357:57" pos:end="357:57">0</literal></expr>)</condition> <block pos:start="357:60" pos:end="365:17">{<block_content pos:start="359:21" pos:end="363:38">

                    <expr_stmt pos:start="359:21" pos:end="359:95"><expr pos:start="359:21" pos:end="359:94"><call pos:start="359:21" pos:end="359:94"><name pos:start="359:21" pos:end="359:26">av_log</name><argument_list pos:start="359:27" pos:end="359:94">(<argument pos:start="359:28" pos:end="359:32"><expr pos:start="359:28" pos:end="359:32"><name pos:start="359:28" pos:end="359:32">avctx</name></expr></argument>, <argument pos:start="359:35" pos:end="359:46"><expr pos:start="359:35" pos:end="359:46"><name pos:start="359:35" pos:end="359:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:49" pos:end="359:93"><expr pos:start="359:49" pos:end="359:93"><literal type="string" pos:start="359:49" pos:end="359:93">"Specified channel_layout is not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:42"><expr pos:start="361:21" pos:end="361:41"><name pos:start="361:21" pos:end="361:23">ret</name> <operator pos:start="361:25" pos:end="361:25">=</operator> <call pos:start="361:27" pos:end="361:41"><name pos:start="361:27" pos:end="361:33">AVERROR</name><argument_list pos:start="361:34" pos:end="361:41">(<argument pos:start="361:35" pos:end="361:40"><expr pos:start="361:35" pos:end="361:40"><name pos:start="361:35" pos:end="361:40">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="363:21" pos:end="363:38">goto <name pos:start="363:26" pos:end="363:37">free_and_end</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="371:9" pos:end="387:9"><if pos:start="371:9" pos:end="383:9">if <condition pos:start="371:12" pos:end="371:53">(<expr pos:start="371:13" pos:end="371:52"><name pos:start="371:13" pos:end="371:33"><name pos:start="371:13" pos:end="371:17">avctx</name><operator pos:start="371:18" pos:end="371:19">-&gt;</operator><name pos:start="371:20" pos:end="371:33">channel_layout</name></name> <operator pos:start="371:35" pos:end="371:36">&amp;&amp;</operator> <name pos:start="371:38" pos:end="371:52"><name pos:start="371:38" pos:end="371:42">avctx</name><operator pos:start="371:43" pos:end="371:44">-&gt;</operator><name pos:start="371:45" pos:end="371:52">channels</name></name></expr>)</condition> <block pos:start="371:55" pos:end="383:9">{<block_content pos:start="373:13" pos:end="381:13">

            <if_stmt pos:start="373:13" pos:end="381:13"><if pos:start="373:13" pos:end="381:13">if <condition pos:start="373:16" pos:end="373:92">(<expr pos:start="373:17" pos:end="373:91"><call pos:start="373:17" pos:end="373:72"><name pos:start="373:17" pos:end="373:49">av_get_channel_layout_nb_channels</name><argument_list pos:start="373:50" pos:end="373:72">(<argument pos:start="373:51" pos:end="373:71"><expr pos:start="373:51" pos:end="373:71"><name pos:start="373:51" pos:end="373:71"><name pos:start="373:51" pos:end="373:55">avctx</name><operator pos:start="373:56" pos:end="373:57">-&gt;</operator><name pos:start="373:58" pos:end="373:71">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="373:74" pos:end="373:75">!=</operator> <name pos:start="373:77" pos:end="373:91"><name pos:start="373:77" pos:end="373:81">avctx</name><operator pos:start="373:82" pos:end="373:83">-&gt;</operator><name pos:start="373:84" pos:end="373:91">channels</name></name></expr>)</condition> <block pos:start="373:94" pos:end="381:13">{<block_content pos:start="375:17" pos:end="379:34">

                <expr_stmt pos:start="375:17" pos:end="375:98"><expr pos:start="375:17" pos:end="375:97"><call pos:start="375:17" pos:end="375:97"><name pos:start="375:17" pos:end="375:22">av_log</name><argument_list pos:start="375:23" pos:end="375:97">(<argument pos:start="375:24" pos:end="375:28"><expr pos:start="375:24" pos:end="375:28"><name pos:start="375:24" pos:end="375:28">avctx</name></expr></argument>, <argument pos:start="375:31" pos:end="375:42"><expr pos:start="375:31" pos:end="375:42"><name pos:start="375:31" pos:end="375:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="375:45" pos:end="375:96"><expr pos:start="375:45" pos:end="375:96"><literal type="string" pos:start="375:45" pos:end="375:96">"channel layout does not match number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:38"><expr pos:start="377:17" pos:end="377:37"><name pos:start="377:17" pos:end="377:19">ret</name> <operator pos:start="377:21" pos:end="377:21">=</operator> <call pos:start="377:23" pos:end="377:37"><name pos:start="377:23" pos:end="377:29">AVERROR</name><argument_list pos:start="377:30" pos:end="377:37">(<argument pos:start="377:31" pos:end="377:36"><expr pos:start="377:31" pos:end="377:36"><name pos:start="377:31" pos:end="377:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="379:17" pos:end="379:34">goto <name pos:start="379:22" pos:end="379:33">free_and_end</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="383:11" pos:end="387:9">else if <condition pos:start="383:19" pos:end="383:41">(<expr pos:start="383:20" pos:end="383:40"><name pos:start="383:20" pos:end="383:40"><name pos:start="383:20" pos:end="383:24">avctx</name><operator pos:start="383:25" pos:end="383:26">-&gt;</operator><name pos:start="383:27" pos:end="383:40">channel_layout</name></name></expr>)</condition> <block pos:start="383:43" pos:end="387:9">{<block_content pos:start="385:13" pos:end="385:87">

            <expr_stmt pos:start="385:13" pos:end="385:87"><expr pos:start="385:13" pos:end="385:86"><name pos:start="385:13" pos:end="385:27"><name pos:start="385:13" pos:end="385:17">avctx</name><operator pos:start="385:18" pos:end="385:19">-&gt;</operator><name pos:start="385:20" pos:end="385:27">channels</name></name> <operator pos:start="385:29" pos:end="385:29">=</operator> <call pos:start="385:31" pos:end="385:86"><name pos:start="385:31" pos:end="385:63">av_get_channel_layout_nb_channels</name><argument_list pos:start="385:64" pos:end="385:86">(<argument pos:start="385:65" pos:end="385:85"><expr pos:start="385:65" pos:end="385:85"><name pos:start="385:65" pos:end="385:85"><name pos:start="385:65" pos:end="385:69">avctx</name><operator pos:start="385:70" pos:end="385:71">-&gt;</operator><name pos:start="385:72" pos:end="385:85">channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="393:5" pos:end="395:45"><expr pos:start="393:5" pos:end="395:44"><name pos:start="393:5" pos:end="393:40"><name pos:start="393:5" pos:end="393:9">avctx</name><operator pos:start="393:10" pos:end="393:11">-&gt;</operator><name pos:start="393:12" pos:end="393:40">pts_correction_num_faulty_pts</name></name> <operator pos:start="393:42" pos:end="393:42">=</operator>

    <name pos:start="395:5" pos:end="395:40"><name pos:start="395:5" pos:end="395:9">avctx</name><operator pos:start="395:10" pos:end="395:11">-&gt;</operator><name pos:start="395:12" pos:end="395:40">pts_correction_num_faulty_dts</name></name> <operator pos:start="395:42" pos:end="395:42">=</operator> <literal type="number" pos:start="395:44" pos:end="395:44">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="399:47"><expr pos:start="397:5" pos:end="399:46"><name pos:start="397:5" pos:end="397:34"><name pos:start="397:5" pos:end="397:9">avctx</name><operator pos:start="397:10" pos:end="397:11">-&gt;</operator><name pos:start="397:12" pos:end="397:34">pts_correction_last_pts</name></name> <operator pos:start="397:36" pos:end="397:36">=</operator>

    <name pos:start="399:5" pos:end="399:34"><name pos:start="399:5" pos:end="399:9">avctx</name><operator pos:start="399:10" pos:end="399:11">-&gt;</operator><name pos:start="399:12" pos:end="399:34">pts_correction_last_dts</name></name> <operator pos:start="399:36" pos:end="399:36">=</operator> <name pos:start="399:38" pos:end="399:46">INT64_MIN</name></expr>;</expr_stmt>



    <if_stmt pos:start="403:5" pos:end="413:5"><if pos:start="403:5" pos:end="413:5">if<condition pos:start="403:7" pos:end="403:74">(<expr pos:start="403:8" pos:end="403:73"><name pos:start="403:8" pos:end="403:25"><name pos:start="403:8" pos:end="403:12">avctx</name><operator pos:start="403:13" pos:end="403:14">-&gt;</operator><name pos:start="403:15" pos:end="403:19">codec</name><operator pos:start="403:20" pos:end="403:21">-&gt;</operator><name pos:start="403:22" pos:end="403:25">init</name></name> <operator pos:start="403:27" pos:end="403:28">&amp;&amp;</operator> <operator pos:start="403:30" pos:end="403:30">!</operator><operator pos:start="403:31" pos:end="403:31">(</operator><name pos:start="403:32" pos:end="403:56"><name pos:start="403:32" pos:end="403:36">avctx</name><operator pos:start="403:37" pos:end="403:38">-&gt;</operator><name pos:start="403:39" pos:end="403:56">active_thread_type</name></name><operator pos:start="403:57" pos:end="403:57">&amp;</operator><name pos:start="403:58" pos:end="403:72">FF_THREAD_FRAME</name><operator pos:start="403:73" pos:end="403:73">)</operator></expr>)</condition><block pos:start="403:75" pos:end="413:5">{<block_content pos:start="405:9" pos:end="411:9">

        <expr_stmt pos:start="405:9" pos:end="405:40"><expr pos:start="405:9" pos:end="405:39"><name pos:start="405:9" pos:end="405:11">ret</name> <operator pos:start="405:13" pos:end="405:13">=</operator> <call pos:start="405:15" pos:end="405:39"><name pos:start="405:15" pos:end="405:32"><name pos:start="405:15" pos:end="405:19">avctx</name><operator pos:start="405:20" pos:end="405:21">-&gt;</operator><name pos:start="405:22" pos:end="405:26">codec</name><operator pos:start="405:27" pos:end="405:28">-&gt;</operator><name pos:start="405:29" pos:end="405:32">init</name></name><argument_list pos:start="405:33" pos:end="405:39">(<argument pos:start="405:34" pos:end="405:38"><expr pos:start="405:34" pos:end="405:38"><name pos:start="405:34" pos:end="405:38">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="407:9" pos:end="411:9"><if pos:start="407:9" pos:end="411:9">if <condition pos:start="407:12" pos:end="407:20">(<expr pos:start="407:13" pos:end="407:19"><name pos:start="407:13" pos:end="407:15">ret</name> <operator pos:start="407:17" pos:end="407:17">&lt;</operator> <literal type="number" pos:start="407:19" pos:end="407:19">0</literal></expr>)</condition> <block pos:start="407:22" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:30">

            <goto pos:start="409:13" pos:end="409:30">goto <name pos:start="409:18" pos:end="409:29">free_and_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="417:5" pos:end="417:10"><expr pos:start="417:5" pos:end="417:9"><name pos:start="417:5" pos:end="417:7">ret</name><operator pos:start="417:8" pos:end="417:8">=</operator><literal type="number" pos:start="417:9" pos:end="417:9">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="421:5" pos:end="439:5"><if pos:start="421:5" pos:end="439:5">if <condition pos:start="421:8" pos:end="421:42">(<expr pos:start="421:9" pos:end="421:41"><call pos:start="421:9" pos:end="421:41"><name pos:start="421:9" pos:end="421:27">av_codec_is_decoder</name><argument_list pos:start="421:28" pos:end="421:41">(<argument pos:start="421:29" pos:end="421:40"><expr pos:start="421:29" pos:end="421:40"><name pos:start="421:29" pos:end="421:40"><name pos:start="421:29" pos:end="421:33">avctx</name><operator pos:start="421:34" pos:end="421:35">-&gt;</operator><name pos:start="421:36" pos:end="421:40">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="421:44" pos:end="439:5">{<block_content pos:start="423:9" pos:end="437:9">

        <if_stmt pos:start="423:9" pos:end="425:50"><if pos:start="423:9" pos:end="425:50">if <condition pos:start="423:12" pos:end="423:29">(<expr pos:start="423:13" pos:end="423:28"><operator pos:start="423:13" pos:end="423:13">!</operator><name pos:start="423:14" pos:end="423:28"><name pos:start="423:14" pos:end="423:18">avctx</name><operator pos:start="423:19" pos:end="423:20">-&gt;</operator><name pos:start="423:21" pos:end="423:28">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="425:13" pos:end="425:50"><block_content pos:start="425:13" pos:end="425:50">

            <expr_stmt pos:start="425:13" pos:end="425:50"><expr pos:start="425:13" pos:end="425:49"><name pos:start="425:13" pos:end="425:27"><name pos:start="425:13" pos:end="425:17">avctx</name><operator pos:start="425:18" pos:end="425:19">-&gt;</operator><name pos:start="425:20" pos:end="425:27">bit_rate</name></name> <operator pos:start="425:29" pos:end="425:29">=</operator> <call pos:start="425:31" pos:end="425:49"><name pos:start="425:31" pos:end="425:42">get_bit_rate</name><argument_list pos:start="425:43" pos:end="425:49">(<argument pos:start="425:44" pos:end="425:48"><expr pos:start="425:44" pos:end="425:48"><name pos:start="425:44" pos:end="425:48">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="427:9" pos:end="427:54">/* validate channel layout from the decoder */</comment>

        <if_stmt pos:start="429:9" pos:end="437:9"><if pos:start="429:9" pos:end="437:9">if <condition pos:start="429:12" pos:end="431:88">(<expr pos:start="429:13" pos:end="431:87"><name pos:start="429:13" pos:end="429:33"><name pos:start="429:13" pos:end="429:17">avctx</name><operator pos:start="429:18" pos:end="429:19">-&gt;</operator><name pos:start="429:20" pos:end="429:33">channel_layout</name></name> <operator pos:start="429:35" pos:end="429:36">&amp;&amp;</operator>

            <call pos:start="431:13" pos:end="431:68"><name pos:start="431:13" pos:end="431:45">av_get_channel_layout_nb_channels</name><argument_list pos:start="431:46" pos:end="431:68">(<argument pos:start="431:47" pos:end="431:67"><expr pos:start="431:47" pos:end="431:67"><name pos:start="431:47" pos:end="431:67"><name pos:start="431:47" pos:end="431:51">avctx</name><operator pos:start="431:52" pos:end="431:53">-&gt;</operator><name pos:start="431:54" pos:end="431:67">channel_layout</name></name></expr></argument>)</argument_list></call> <operator pos:start="431:70" pos:end="431:71">!=</operator> <name pos:start="431:73" pos:end="431:87"><name pos:start="431:73" pos:end="431:77">avctx</name><operator pos:start="431:78" pos:end="431:79">-&gt;</operator><name pos:start="431:80" pos:end="431:87">channels</name></name></expr>)</condition> <block pos:start="431:90" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:38">

            <expr_stmt pos:start="433:13" pos:end="433:96"><expr pos:start="433:13" pos:end="433:95"><call pos:start="433:13" pos:end="433:95"><name pos:start="433:13" pos:end="433:18">av_log</name><argument_list pos:start="433:19" pos:end="433:95">(<argument pos:start="433:20" pos:end="433:24"><expr pos:start="433:20" pos:end="433:24"><name pos:start="433:20" pos:end="433:24">avctx</name></expr></argument>, <argument pos:start="433:27" pos:end="433:40"><expr pos:start="433:27" pos:end="433:40"><name pos:start="433:27" pos:end="433:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="433:43" pos:end="433:94"><expr pos:start="433:43" pos:end="433:94"><literal type="string" pos:start="433:43" pos:end="433:94">"channel layout does not match number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:38"><expr pos:start="435:13" pos:end="435:37"><name pos:start="435:13" pos:end="435:33"><name pos:start="435:13" pos:end="435:17">avctx</name><operator pos:start="435:18" pos:end="435:19">-&gt;</operator><name pos:start="435:20" pos:end="435:33">channel_layout</name></name> <operator pos:start="435:35" pos:end="435:35">=</operator> <literal type="number" pos:start="435:37" pos:end="435:37">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="441:1" pos:end="441:4"><name pos:start="441:1" pos:end="441:3">end</name>:</label>

    <expr_stmt pos:start="443:5" pos:end="443:31"><expr pos:start="443:5" pos:end="443:30"><name pos:start="443:5" pos:end="443:28">entangled_thread_counter</name><operator pos:start="443:29" pos:end="443:30">--</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="447:5" pos:end="447:42">/* Release any user-supplied mutex. */</comment>

    <if_stmt pos:start="449:5" pos:end="453:5"><if pos:start="449:5" pos:end="453:5">if <condition pos:start="449:8" pos:end="449:22">(<expr pos:start="449:9" pos:end="449:21"><name pos:start="449:9" pos:end="449:21">ff_lockmgr_cb</name></expr>)</condition> <block pos:start="449:24" pos:end="453:5">{<block_content pos:start="451:9" pos:end="451:56">

        <expr_stmt pos:start="451:9" pos:end="451:56"><expr pos:start="451:9" pos:end="451:55"><call pos:start="451:9" pos:end="451:55">(<modifier pos:start="451:10" pos:end="451:10">*</modifier><name pos:start="451:11" pos:end="451:23">ff_lockmgr_cb</name>)<argument_list pos:start="451:25" pos:end="451:55">(<argument pos:start="451:26" pos:end="451:37"><expr pos:start="451:26" pos:end="451:37"><operator pos:start="451:26" pos:end="451:26">&amp;</operator><name pos:start="451:27" pos:end="451:37">codec_mutex</name></expr></argument>, <argument pos:start="451:40" pos:end="451:54"><expr pos:start="451:40" pos:end="451:54"><name pos:start="451:40" pos:end="451:54">AV_LOCK_RELEASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="455:5" pos:end="461:5"><if pos:start="455:5" pos:end="461:5">if <condition pos:start="455:8" pos:end="455:16">(<expr pos:start="455:9" pos:end="455:15"><name pos:start="455:9" pos:end="455:15">options</name></expr>)</condition> <block pos:start="455:18" pos:end="461:5">{<block_content pos:start="457:9" pos:end="459:23">

        <expr_stmt pos:start="457:9" pos:end="457:30"><expr pos:start="457:9" pos:end="457:29"><call pos:start="457:9" pos:end="457:29"><name pos:start="457:9" pos:end="457:20">av_dict_free</name><argument_list pos:start="457:21" pos:end="457:29">(<argument pos:start="457:22" pos:end="457:28"><expr pos:start="457:22" pos:end="457:28"><name pos:start="457:22" pos:end="457:28">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:23"><expr pos:start="459:9" pos:end="459:22"><operator pos:start="459:9" pos:end="459:9">*</operator><name pos:start="459:10" pos:end="459:16">options</name> <operator pos:start="459:18" pos:end="459:18">=</operator> <name pos:start="459:20" pos:end="459:22">tmp</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="465:5" pos:end="465:15">return <expr pos:start="465:12" pos:end="465:14"><name pos:start="465:12" pos:end="465:14">ret</name></expr>;</return>

<label pos:start="467:1" pos:end="467:13"><name pos:start="467:1" pos:end="467:12">free_and_end</name>:</label>

    <expr_stmt pos:start="469:5" pos:end="469:23"><expr pos:start="469:5" pos:end="469:22"><call pos:start="469:5" pos:end="469:22"><name pos:start="469:5" pos:end="469:16">av_dict_free</name><argument_list pos:start="469:17" pos:end="469:22">(<argument pos:start="469:18" pos:end="469:21"><expr pos:start="469:18" pos:end="469:21"><operator pos:start="469:18" pos:end="469:18">&amp;</operator><name pos:start="469:19" pos:end="469:21">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:32"><expr pos:start="471:5" pos:end="471:31"><call pos:start="471:5" pos:end="471:31"><name pos:start="471:5" pos:end="471:12">av_freep</name><argument_list pos:start="471:13" pos:end="471:31">(<argument pos:start="471:14" pos:end="471:30"><expr pos:start="471:14" pos:end="471:30"><operator pos:start="471:14" pos:end="471:14">&amp;</operator><name pos:start="471:15" pos:end="471:30"><name pos:start="471:15" pos:end="471:19">avctx</name><operator pos:start="471:20" pos:end="471:21">-&gt;</operator><name pos:start="471:22" pos:end="471:30">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:31"><expr pos:start="473:5" pos:end="473:30"><call pos:start="473:5" pos:end="473:30"><name pos:start="473:5" pos:end="473:12">av_freep</name><argument_list pos:start="473:13" pos:end="473:30">(<argument pos:start="473:14" pos:end="473:29"><expr pos:start="473:14" pos:end="473:29"><operator pos:start="473:14" pos:end="473:14">&amp;</operator><name pos:start="473:15" pos:end="473:29"><name pos:start="473:15" pos:end="473:19">avctx</name><operator pos:start="473:20" pos:end="473:21">-&gt;</operator><name pos:start="473:22" pos:end="473:29">internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:23"><expr pos:start="475:5" pos:end="475:22"><name pos:start="475:5" pos:end="475:16"><name pos:start="475:5" pos:end="475:9">avctx</name><operator pos:start="475:10" pos:end="475:11">-&gt;</operator><name pos:start="475:12" pos:end="475:16">codec</name></name><operator pos:start="475:17" pos:end="475:17">=</operator> <name pos:start="475:19" pos:end="475:22">NULL</name></expr>;</expr_stmt>

    <goto pos:start="477:5" pos:end="477:13">goto <name pos:start="477:10" pos:end="477:12">end</name>;</goto>

</block_content>}</block></function>
</unit>
