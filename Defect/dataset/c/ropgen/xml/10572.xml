<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10572.c" pos:tabs="8"><function pos:start="1:1" pos:end="343:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">nbd_receive_negotiate</name><parameter_list pos:start="1:26" pos:end="7:52">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">QIOChannel</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ioc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">name</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:69">uint16_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:51"><decl pos:start="3:27" pos:end="3:51"><type pos:start="3:27" pos:end="3:51"><name pos:start="3:27" pos:end="3:41">QCryptoTLSCreds</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:51">tlscreds</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:73"><decl pos:start="3:54" pos:end="3:73"><type pos:start="3:54" pos:end="3:73"><specifier pos:start="3:54" pos:end="3:58">const</specifier> <name pos:start="3:60" pos:end="3:63">char</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:73">hostname</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:45"><decl pos:start="5:27" pos:end="5:45"><type pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:36">QIOChannel</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier><modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:45">outioc</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:37"><decl pos:start="7:27" pos:end="7:37"><type pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">off_t</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:37">size</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:51"><decl pos:start="7:40" pos:end="7:51"><type pos:start="7:40" pos:end="7:51"><name pos:start="7:40" pos:end="7:44">Error</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier><modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="343:1">{<block_content pos:start="11:5" pos:end="341:14">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:17">[<expr pos:start="11:14" pos:end="11:16"><literal type="number" pos:start="11:14" pos:end="11:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">magic</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:21" pos:end="13:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:15">zeroes</name> <init pos:start="17:17" pos:end="17:22">= <expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">true</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:52"><expr pos:start="21:5" pos:end="23:51"><call pos:start="21:5" pos:end="23:51"><name pos:start="21:5" pos:end="21:9">TRACE</name><argument_list pos:start="21:10" pos:end="23:51">(<argument pos:start="21:11" pos:end="21:58"><expr pos:start="21:11" pos:end="21:58"><literal type="string" pos:start="21:11" pos:end="21:58">"Receiving negotiation tlscreds=%p hostname=%s."</literal></expr></argument>,

          <argument pos:start="23:11" pos:end="23:18"><expr pos:start="23:11" pos:end="23:18"><name pos:start="23:11" pos:end="23:18">tlscreds</name></expr></argument>, <argument pos:start="23:21" pos:end="23:50"><expr pos:start="23:21" pos:end="23:50"><ternary pos:start="23:21" pos:end="23:50"><condition pos:start="23:21" pos:end="23:30"><expr pos:start="23:21" pos:end="23:28"><name pos:start="23:21" pos:end="23:28">hostname</name></expr> ?</condition><then pos:start="23:32" pos:end="23:39"> <expr pos:start="23:32" pos:end="23:39"><name pos:start="23:32" pos:end="23:39">hostname</name></expr> </then><else pos:start="23:41" pos:end="23:50">: <expr pos:start="23:43" pos:end="23:50"><literal type="string" pos:start="23:43" pos:end="23:50">"&lt;null&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:17"><expr pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:6">rc</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">-</operator><name pos:start="27:11" pos:end="27:16">EINVAL</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:14">outioc</name></expr>)</condition> <block pos:start="31:17" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:23">

        <expr_stmt pos:start="33:9" pos:end="33:23"><expr pos:start="33:9" pos:end="33:22"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:15">outioc</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:16">tlscreds</name> <operator pos:start="37:18" pos:end="37:19">&amp;&amp;</operator> <operator pos:start="37:21" pos:end="37:21">!</operator><name pos:start="37:22" pos:end="37:27">outioc</name></expr>)</condition> <block pos:start="37:30" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:64"><expr pos:start="39:9" pos:end="39:63"><call pos:start="39:9" pos:end="39:63"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:63">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:62"><expr pos:start="39:26" pos:end="39:62"><literal type="string" pos:start="39:26" pos:end="39:62">"Output I/O channel required for TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:41">(<expr pos:start="47:9" pos:end="47:40"><call pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:17">read_sync</name><argument_list pos:start="47:18" pos:end="47:36">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><name pos:start="47:19" pos:end="47:21">ioc</name></expr></argument>, <argument pos:start="47:24" pos:end="47:26"><expr pos:start="47:24" pos:end="47:26"><name pos:start="47:24" pos:end="47:26">buf</name></expr></argument>, <argument pos:start="47:29" pos:end="47:29"><expr pos:start="47:29" pos:end="47:29"><literal type="number" pos:start="47:29" pos:end="47:29">8</literal></expr></argument>, <argument pos:start="47:32" pos:end="47:35"><expr pos:start="47:32" pos:end="47:35"><name pos:start="47:32" pos:end="47:35">errp</name></expr></argument>)</argument_list></call> <operator pos:start="47:38" pos:end="47:38">&lt;</operator> <literal type="number" pos:start="47:40" pos:end="47:40">0</literal></expr>)</condition> <block pos:start="47:43" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><call pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:21">error_prepend</name><argument_list pos:start="49:22" pos:end="49:50">(<argument pos:start="49:23" pos:end="49:26"><expr pos:start="49:23" pos:end="49:26"><name pos:start="49:23" pos:end="49:26">errp</name></expr></argument>, <argument pos:start="49:29" pos:end="49:49"><expr pos:start="49:29" pos:end="49:49"><literal type="string" pos:start="49:29" pos:end="49:49">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:7">buf</name><index pos:start="57:8" pos:end="57:10">[<expr pos:start="57:9" pos:end="57:9"><literal type="number" pos:start="57:9" pos:end="57:9">8</literal></expr>]</index></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="char" pos:start="57:14" pos:end="57:17">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:25">(<expr pos:start="59:9" pos:end="59:24"><call pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:14">strlen</name><argument_list pos:start="59:15" pos:end="59:19">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="59:21" pos:end="59:22">==</operator> <literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>)</condition> <block pos:start="59:27" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:18">

        <expr_stmt pos:start="61:9" pos:end="61:66"><expr pos:start="61:9" pos:end="61:65"><call pos:start="61:9" pos:end="61:65"><name pos:start="61:9" pos:end="61:18">error_setg</name><argument_list pos:start="61:19" pos:end="61:65">(<argument pos:start="61:20" pos:end="61:23"><expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">errp</name></expr></argument>, <argument pos:start="61:26" pos:end="61:64"><expr pos:start="61:26" pos:end="61:64"><literal type="string" pos:start="61:26" pos:end="61:64">"Server connection closed unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="85:47"><expr pos:start="69:5" pos:end="85:46"><call pos:start="69:5" pos:end="85:46"><name pos:start="69:5" pos:end="69:9">TRACE</name><argument_list pos:start="69:10" pos:end="85:46">(<argument pos:start="69:11" pos:end="69:37"><expr pos:start="69:11" pos:end="69:37"><literal type="string" pos:start="69:11" pos:end="69:37">"Magic is %c%c%c%c%c%c%c%c"</literal></expr></argument>,

          <argument pos:start="71:11" pos:end="71:45"><expr pos:start="71:11" pos:end="71:45"><ternary pos:start="71:11" pos:end="71:45"><condition pos:start="71:11" pos:end="71:32"><expr pos:start="71:11" pos:end="71:30"><call pos:start="71:11" pos:end="71:30"><name pos:start="71:11" pos:end="71:22">qemu_isprint</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:26">buf</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="71:34" pos:end="71:39"> <expr pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:36">buf</name><index pos:start="71:37" pos:end="71:39">[<expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">0</literal></expr>]</index></name></expr> </then><else pos:start="71:41" pos:end="71:45">: <expr pos:start="71:43" pos:end="71:45"><literal type="char" pos:start="71:43" pos:end="71:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="73:11" pos:end="73:45"><expr pos:start="73:11" pos:end="73:45"><ternary pos:start="73:11" pos:end="73:45"><condition pos:start="73:11" pos:end="73:32"><expr pos:start="73:11" pos:end="73:30"><call pos:start="73:11" pos:end="73:30"><name pos:start="73:11" pos:end="73:22">qemu_isprint</name><argument_list pos:start="73:23" pos:end="73:30">(<argument pos:start="73:24" pos:end="73:29"><expr pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:26">buf</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><literal type="number" pos:start="73:28" pos:end="73:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="73:34" pos:end="73:39"> <expr pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:36">buf</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">1</literal></expr>]</index></name></expr> </then><else pos:start="73:41" pos:end="73:45">: <expr pos:start="73:43" pos:end="73:45"><literal type="char" pos:start="73:43" pos:end="73:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="75:11" pos:end="75:45"><expr pos:start="75:11" pos:end="75:45"><ternary pos:start="75:11" pos:end="75:45"><condition pos:start="75:11" pos:end="75:32"><expr pos:start="75:11" pos:end="75:30"><call pos:start="75:11" pos:end="75:30"><name pos:start="75:11" pos:end="75:22">qemu_isprint</name><argument_list pos:start="75:23" pos:end="75:30">(<argument pos:start="75:24" pos:end="75:29"><expr pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:26">buf</name><index pos:start="75:27" pos:end="75:29">[<expr pos:start="75:28" pos:end="75:28"><literal type="number" pos:start="75:28" pos:end="75:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="75:34" pos:end="75:39"> <expr pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:36">buf</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">2</literal></expr>]</index></name></expr> </then><else pos:start="75:41" pos:end="75:45">: <expr pos:start="75:43" pos:end="75:45"><literal type="char" pos:start="75:43" pos:end="75:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="77:11" pos:end="77:45"><expr pos:start="77:11" pos:end="77:45"><ternary pos:start="77:11" pos:end="77:45"><condition pos:start="77:11" pos:end="77:32"><expr pos:start="77:11" pos:end="77:30"><call pos:start="77:11" pos:end="77:30"><name pos:start="77:11" pos:end="77:22">qemu_isprint</name><argument_list pos:start="77:23" pos:end="77:30">(<argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:26">buf</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="77:34" pos:end="77:39"> <expr pos:start="77:34" pos:end="77:39"><name pos:start="77:34" pos:end="77:39"><name pos:start="77:34" pos:end="77:36">buf</name><index pos:start="77:37" pos:end="77:39">[<expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">3</literal></expr>]</index></name></expr> </then><else pos:start="77:41" pos:end="77:45">: <expr pos:start="77:43" pos:end="77:45"><literal type="char" pos:start="77:43" pos:end="77:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="79:11" pos:end="79:45"><expr pos:start="79:11" pos:end="79:45"><ternary pos:start="79:11" pos:end="79:45"><condition pos:start="79:11" pos:end="79:32"><expr pos:start="79:11" pos:end="79:30"><call pos:start="79:11" pos:end="79:30"><name pos:start="79:11" pos:end="79:22">qemu_isprint</name><argument_list pos:start="79:23" pos:end="79:30">(<argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:26">buf</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><literal type="number" pos:start="79:28" pos:end="79:28">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="79:34" pos:end="79:39"> <expr pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:36">buf</name><index pos:start="79:37" pos:end="79:39">[<expr pos:start="79:38" pos:end="79:38"><literal type="number" pos:start="79:38" pos:end="79:38">4</literal></expr>]</index></name></expr> </then><else pos:start="79:41" pos:end="79:45">: <expr pos:start="79:43" pos:end="79:45"><literal type="char" pos:start="79:43" pos:end="79:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="81:11" pos:end="81:45"><expr pos:start="81:11" pos:end="81:45"><ternary pos:start="81:11" pos:end="81:45"><condition pos:start="81:11" pos:end="81:32"><expr pos:start="81:11" pos:end="81:30"><call pos:start="81:11" pos:end="81:30"><name pos:start="81:11" pos:end="81:22">qemu_isprint</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:26">buf</name><index pos:start="81:27" pos:end="81:29">[<expr pos:start="81:28" pos:end="81:28"><literal type="number" pos:start="81:28" pos:end="81:28">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="81:34" pos:end="81:39"> <expr pos:start="81:34" pos:end="81:39"><name pos:start="81:34" pos:end="81:39"><name pos:start="81:34" pos:end="81:36">buf</name><index pos:start="81:37" pos:end="81:39">[<expr pos:start="81:38" pos:end="81:38"><literal type="number" pos:start="81:38" pos:end="81:38">5</literal></expr>]</index></name></expr> </then><else pos:start="81:41" pos:end="81:45">: <expr pos:start="81:43" pos:end="81:45"><literal type="char" pos:start="81:43" pos:end="81:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="83:11" pos:end="83:45"><expr pos:start="83:11" pos:end="83:45"><ternary pos:start="83:11" pos:end="83:45"><condition pos:start="83:11" pos:end="83:32"><expr pos:start="83:11" pos:end="83:30"><call pos:start="83:11" pos:end="83:30"><name pos:start="83:11" pos:end="83:22">qemu_isprint</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:26">buf</name><index pos:start="83:27" pos:end="83:29">[<expr pos:start="83:28" pos:end="83:28"><literal type="number" pos:start="83:28" pos:end="83:28">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="83:34" pos:end="83:39"> <expr pos:start="83:34" pos:end="83:39"><name pos:start="83:34" pos:end="83:39"><name pos:start="83:34" pos:end="83:36">buf</name><index pos:start="83:37" pos:end="83:39">[<expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">6</literal></expr>]</index></name></expr> </then><else pos:start="83:41" pos:end="83:45">: <expr pos:start="83:43" pos:end="83:45"><literal type="char" pos:start="83:43" pos:end="83:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="85:11" pos:end="85:45"><expr pos:start="85:11" pos:end="85:45"><ternary pos:start="85:11" pos:end="85:45"><condition pos:start="85:11" pos:end="85:32"><expr pos:start="85:11" pos:end="85:30"><call pos:start="85:11" pos:end="85:30"><name pos:start="85:11" pos:end="85:22">qemu_isprint</name><argument_list pos:start="85:23" pos:end="85:30">(<argument pos:start="85:24" pos:end="85:29"><expr pos:start="85:24" pos:end="85:29"><name pos:start="85:24" pos:end="85:29"><name pos:start="85:24" pos:end="85:26">buf</name><index pos:start="85:27" pos:end="85:29">[<expr pos:start="85:28" pos:end="85:28"><literal type="number" pos:start="85:28" pos:end="85:28">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="85:34" pos:end="85:39"> <expr pos:start="85:34" pos:end="85:39"><name pos:start="85:34" pos:end="85:39"><name pos:start="85:34" pos:end="85:36">buf</name><index pos:start="85:37" pos:end="85:39">[<expr pos:start="85:38" pos:end="85:38"><literal type="number" pos:start="85:38" pos:end="85:38">7</literal></expr>]</index></name></expr> </then><else pos:start="85:41" pos:end="85:45">: <expr pos:start="85:43" pos:end="85:45"><literal type="char" pos:start="85:43" pos:end="85:45">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:40">(<expr pos:start="89:9" pos:end="89:39"><call pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:14">memcmp</name><argument_list pos:start="89:15" pos:end="89:34">(<argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">buf</name></expr></argument>, <argument pos:start="89:21" pos:end="89:30"><expr pos:start="89:21" pos:end="89:30"><literal type="string" pos:start="89:21" pos:end="89:30">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><literal type="number" pos:start="89:33" pos:end="89:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="89:36" pos:end="89:37">!=</operator> <literal type="number" pos:start="89:39" pos:end="89:39">0</literal></expr>)</condition> <block pos:start="89:42" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:18">

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><call pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="91:50">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:49"><expr pos:start="91:26" pos:end="91:49"><literal type="string" pos:start="91:26" pos:end="91:49">"Invalid magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:18">goto <name pos:start="93:14" pos:end="93:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:56">(<expr pos:start="99:9" pos:end="99:55"><call pos:start="99:9" pos:end="99:51"><name pos:start="99:9" pos:end="99:17">read_sync</name><argument_list pos:start="99:18" pos:end="99:51">(<argument pos:start="99:19" pos:end="99:21"><expr pos:start="99:19" pos:end="99:21"><name pos:start="99:19" pos:end="99:21">ioc</name></expr></argument>, <argument pos:start="99:24" pos:end="99:29"><expr pos:start="99:24" pos:end="99:29"><operator pos:start="99:24" pos:end="99:24">&amp;</operator><name pos:start="99:25" pos:end="99:29">magic</name></expr></argument>, <argument pos:start="99:32" pos:end="99:44"><expr pos:start="99:32" pos:end="99:44"><sizeof pos:start="99:32" pos:end="99:44">sizeof<argument_list pos:start="99:38" pos:end="99:44">(<argument pos:start="99:39" pos:end="99:43"><expr pos:start="99:39" pos:end="99:43"><name pos:start="99:39" pos:end="99:43">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="99:47" pos:end="99:50"><expr pos:start="99:47" pos:end="99:50"><name pos:start="99:47" pos:end="99:50">errp</name></expr></argument>)</argument_list></call> <operator pos:start="99:53" pos:end="99:53">&lt;</operator> <literal type="number" pos:start="99:55" pos:end="99:55">0</literal></expr>)</condition> <block pos:start="99:58" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:18">

        <expr_stmt pos:start="101:9" pos:end="101:52"><expr pos:start="101:9" pos:end="101:51"><call pos:start="101:9" pos:end="101:51"><name pos:start="101:9" pos:end="101:21">error_prepend</name><argument_list pos:start="101:22" pos:end="101:51">(<argument pos:start="101:23" pos:end="101:26"><expr pos:start="101:23" pos:end="101:26"><name pos:start="101:23" pos:end="101:26">errp</name></expr></argument>, <argument pos:start="101:29" pos:end="101:50"><expr pos:start="101:29" pos:end="101:50"><literal type="string" pos:start="101:29" pos:end="101:50">"Failed to read magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:31"><expr pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:9">magic</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <call pos:start="107:13" pos:end="107:30"><name pos:start="107:13" pos:end="107:23">be64_to_cpu</name><argument_list pos:start="107:24" pos:end="107:30">(<argument pos:start="107:25" pos:end="107:29"><expr pos:start="107:25" pos:end="107:29"><name pos:start="107:25" pos:end="107:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:40"><expr pos:start="109:5" pos:end="109:39"><call pos:start="109:5" pos:end="109:39"><name pos:start="109:5" pos:end="109:9">TRACE</name><argument_list pos:start="109:10" pos:end="109:39">(<argument pos:start="109:11" pos:end="109:31"><expr pos:start="109:11" pos:end="109:31"><literal type="string" pos:start="109:11" pos:end="109:24">"Magic is 0x%"</literal> <name pos:start="109:26" pos:end="109:31">PRIx64</name></expr></argument>, <argument pos:start="109:34" pos:end="109:38"><expr pos:start="109:34" pos:end="109:38"><name pos:start="109:34" pos:end="109:38">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="321:5"><if pos:start="113:5" pos:end="257:5">if <condition pos:start="113:8" pos:end="113:32">(<expr pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:13">magic</name> <operator pos:start="113:15" pos:end="113:16">==</operator> <name pos:start="113:18" pos:end="113:31">NBD_OPTS_MAGIC</name></expr>)</condition> <block pos:start="113:34" pos:end="257:5">{<block_content pos:start="115:9" pos:end="255:28">

        <decl_stmt pos:start="115:9" pos:end="115:33"><decl pos:start="115:9" pos:end="115:32"><type pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">uint32_t</name></type> <name pos:start="115:18" pos:end="115:28">clientflags</name> <init pos:start="115:30" pos:end="115:32">= <expr pos:start="115:32" pos:end="115:32"><literal type="number" pos:start="115:32" pos:end="115:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:29"><decl pos:start="117:9" pos:end="117:28"><type pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">uint16_t</name></type> <name pos:start="117:18" pos:end="117:28">globalflags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="119:9" pos:end="119:35"><decl pos:start="119:9" pos:end="119:34"><type pos:start="119:9" pos:end="119:12"><name pos:start="119:9" pos:end="119:12">bool</name></type> <name pos:start="119:14" pos:end="119:26">fixedNewStyle</name> <init pos:start="119:28" pos:end="119:34">= <expr pos:start="119:30" pos:end="119:34"><name pos:start="119:30" pos:end="119:34">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:72">(<expr pos:start="123:13" pos:end="123:71"><call pos:start="123:13" pos:end="123:67"><name pos:start="123:13" pos:end="123:21">read_sync</name><argument_list pos:start="123:22" pos:end="123:67">(<argument pos:start="123:23" pos:end="123:25"><expr pos:start="123:23" pos:end="123:25"><name pos:start="123:23" pos:end="123:25">ioc</name></expr></argument>, <argument pos:start="123:28" pos:end="123:39"><expr pos:start="123:28" pos:end="123:39"><operator pos:start="123:28" pos:end="123:28">&amp;</operator><name pos:start="123:29" pos:end="123:39">globalflags</name></expr></argument>, <argument pos:start="123:42" pos:end="123:60"><expr pos:start="123:42" pos:end="123:60"><sizeof pos:start="123:42" pos:end="123:60">sizeof<argument_list pos:start="123:48" pos:end="123:60">(<argument pos:start="123:49" pos:end="123:59"><expr pos:start="123:49" pos:end="123:59"><name pos:start="123:49" pos:end="123:59">globalflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="123:63" pos:end="123:66"><expr pos:start="123:63" pos:end="123:66"><name pos:start="123:63" pos:end="123:66">errp</name></expr></argument>)</argument_list></call> <operator pos:start="123:69" pos:end="123:69">&lt;</operator> <literal type="number" pos:start="123:71" pos:end="123:71">0</literal></expr>)</condition> <block pos:start="123:74" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:22">

            <expr_stmt pos:start="125:13" pos:end="125:63"><expr pos:start="125:13" pos:end="125:62"><call pos:start="125:13" pos:end="125:62"><name pos:start="125:13" pos:end="125:25">error_prepend</name><argument_list pos:start="125:26" pos:end="125:62">(<argument pos:start="125:27" pos:end="125:30"><expr pos:start="125:27" pos:end="125:30"><name pos:start="125:27" pos:end="125:30">errp</name></expr></argument>, <argument pos:start="125:33" pos:end="125:61"><expr pos:start="125:33" pos:end="125:61"><literal type="string" pos:start="125:33" pos:end="125:61">"Failed to read server flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:22">goto <name pos:start="127:18" pos:end="127:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:19">globalflags</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <call pos:start="131:23" pos:end="131:46"><name pos:start="131:23" pos:end="131:33">be16_to_cpu</name><argument_list pos:start="131:34" pos:end="131:46">(<argument pos:start="131:35" pos:end="131:45"><expr pos:start="131:35" pos:end="131:45"><name pos:start="131:35" pos:end="131:45">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:56"><expr pos:start="133:9" pos:end="133:55"><call pos:start="133:9" pos:end="133:55"><name pos:start="133:9" pos:end="133:13">TRACE</name><argument_list pos:start="133:14" pos:end="133:55">(<argument pos:start="133:15" pos:end="133:41"><expr pos:start="133:15" pos:end="133:41"><literal type="string" pos:start="133:15" pos:end="133:34">"Global flags are %"</literal> <name pos:start="133:36" pos:end="133:41">PRIx32</name></expr></argument>, <argument pos:start="133:44" pos:end="133:54"><expr pos:start="133:44" pos:end="133:54"><name pos:start="133:44" pos:end="133:54">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="143:9"><if pos:start="135:9" pos:end="143:9">if <condition pos:start="135:12" pos:end="135:50">(<expr pos:start="135:13" pos:end="135:49"><name pos:start="135:13" pos:end="135:23">globalflags</name> <operator pos:start="135:25" pos:end="135:25">&amp;</operator> <name pos:start="135:27" pos:end="135:49">NBD_FLAG_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="135:52" pos:end="143:9">{<block_content pos:start="137:13" pos:end="141:53">

            <expr_stmt pos:start="137:13" pos:end="137:33"><expr pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:25">fixedNewStyle</name> <operator pos:start="137:27" pos:end="137:27">=</operator> <name pos:start="137:29" pos:end="137:32">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:53"><expr pos:start="139:13" pos:end="139:52"><call pos:start="139:13" pos:end="139:52"><name pos:start="139:13" pos:end="139:17">TRACE</name><argument_list pos:start="139:18" pos:end="139:52">(<argument pos:start="139:19" pos:end="139:51"><expr pos:start="139:19" pos:end="139:51"><literal type="string" pos:start="139:19" pos:end="139:51">"Server supports fixed new style"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:53"><expr pos:start="141:13" pos:end="141:52"><name pos:start="141:13" pos:end="141:23">clientflags</name> <operator pos:start="141:25" pos:end="141:26">|=</operator> <name pos:start="141:28" pos:end="141:52">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="153:9">if <condition pos:start="145:12" pos:end="145:45">(<expr pos:start="145:13" pos:end="145:44"><name pos:start="145:13" pos:end="145:23">globalflags</name> <operator pos:start="145:25" pos:end="145:25">&amp;</operator> <name pos:start="145:27" pos:end="145:44">NBD_FLAG_NO_ZEROES</name></expr>)</condition> <block pos:start="145:47" pos:end="153:9">{<block_content pos:start="147:13" pos:end="151:48">

            <expr_stmt pos:start="147:13" pos:end="147:27"><expr pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:18">zeroes</name> <operator pos:start="147:20" pos:end="147:20">=</operator> <name pos:start="147:22" pos:end="147:26">false</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:47"><expr pos:start="149:13" pos:end="149:46"><call pos:start="149:13" pos:end="149:46"><name pos:start="149:13" pos:end="149:17">TRACE</name><argument_list pos:start="149:18" pos:end="149:46">(<argument pos:start="149:19" pos:end="149:45"><expr pos:start="149:19" pos:end="149:45"><literal type="string" pos:start="149:19" pos:end="149:45">"Server supports no zeroes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:48"><expr pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:23">clientflags</name> <operator pos:start="151:25" pos:end="151:26">|=</operator> <name pos:start="151:28" pos:end="151:47">NBD_FLAG_C_NO_ZEROES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="155:9" pos:end="155:36">/* client requested flags */</comment>

        <expr_stmt pos:start="157:9" pos:end="157:47"><expr pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:19">clientflags</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <call pos:start="157:23" pos:end="157:46"><name pos:start="157:23" pos:end="157:33">cpu_to_be32</name><argument_list pos:start="157:34" pos:end="157:46">(<argument pos:start="157:35" pos:end="157:45"><expr pos:start="157:35" pos:end="157:45"><name pos:start="157:35" pos:end="157:45">clientflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:73">(<expr pos:start="159:13" pos:end="159:72"><call pos:start="159:13" pos:end="159:68"><name pos:start="159:13" pos:end="159:22">write_sync</name><argument_list pos:start="159:23" pos:end="159:68">(<argument pos:start="159:24" pos:end="159:26"><expr pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">ioc</name></expr></argument>, <argument pos:start="159:29" pos:end="159:40"><expr pos:start="159:29" pos:end="159:40"><operator pos:start="159:29" pos:end="159:29">&amp;</operator><name pos:start="159:30" pos:end="159:40">clientflags</name></expr></argument>, <argument pos:start="159:43" pos:end="159:61"><expr pos:start="159:43" pos:end="159:61"><sizeof pos:start="159:43" pos:end="159:61">sizeof<argument_list pos:start="159:49" pos:end="159:61">(<argument pos:start="159:50" pos:end="159:60"><expr pos:start="159:50" pos:end="159:60"><name pos:start="159:50" pos:end="159:60">clientflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="159:64" pos:end="159:67"><expr pos:start="159:64" pos:end="159:67"><name pos:start="159:64" pos:end="159:67">errp</name></expr></argument>)</argument_list></call> <operator pos:start="159:70" pos:end="159:70">&lt;</operator> <literal type="number" pos:start="159:72" pos:end="159:72">0</literal></expr>)</condition> <block pos:start="159:75" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:22">

            <expr_stmt pos:start="161:13" pos:end="161:68"><expr pos:start="161:13" pos:end="161:67"><call pos:start="161:13" pos:end="161:67"><name pos:start="161:13" pos:end="161:25">error_prepend</name><argument_list pos:start="161:26" pos:end="161:67">(<argument pos:start="161:27" pos:end="161:30"><expr pos:start="161:27" pos:end="161:30"><name pos:start="161:27" pos:end="161:30">errp</name></expr></argument>, <argument pos:start="161:33" pos:end="161:66"><expr pos:start="161:33" pos:end="161:66"><literal type="string" pos:start="161:33" pos:end="161:66">"Failed to send clientflags field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="167:9" pos:end="189:9"><if pos:start="167:9" pos:end="189:9">if <condition pos:start="167:12" pos:end="167:21">(<expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:20">tlscreds</name></expr>)</condition> <block pos:start="167:23" pos:end="189:9">{<block_content pos:start="169:13" pos:end="187:13">

            <if_stmt pos:start="169:13" pos:end="187:13"><if pos:start="169:13" pos:end="181:13">if <condition pos:start="169:16" pos:end="169:30">(<expr pos:start="169:17" pos:end="169:29"><name pos:start="169:17" pos:end="169:29">fixedNewStyle</name></expr>)</condition> <block pos:start="169:32" pos:end="181:13">{<block_content pos:start="171:17" pos:end="179:30">

                <expr_stmt pos:start="171:17" pos:end="171:78"><expr pos:start="171:17" pos:end="171:77"><operator pos:start="171:17" pos:end="171:17">*</operator><name pos:start="171:18" pos:end="171:23">outioc</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <call pos:start="171:27" pos:end="171:77"><name pos:start="171:27" pos:end="171:46">nbd_receive_starttls</name><argument_list pos:start="171:47" pos:end="171:77">(<argument pos:start="171:48" pos:end="171:50"><expr pos:start="171:48" pos:end="171:50"><name pos:start="171:48" pos:end="171:50">ioc</name></expr></argument>, <argument pos:start="171:53" pos:end="171:60"><expr pos:start="171:53" pos:end="171:60"><name pos:start="171:53" pos:end="171:60">tlscreds</name></expr></argument>, <argument pos:start="171:63" pos:end="171:70"><expr pos:start="171:63" pos:end="171:70"><name pos:start="171:63" pos:end="171:70">hostname</name></expr></argument>, <argument pos:start="171:73" pos:end="171:76"><expr pos:start="171:73" pos:end="171:76"><name pos:start="171:73" pos:end="171:76">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="173:17" pos:end="177:17"><if pos:start="173:17" pos:end="177:17">if <condition pos:start="173:20" pos:end="173:29">(<expr pos:start="173:21" pos:end="173:28"><operator pos:start="173:21" pos:end="173:21">!</operator><operator pos:start="173:22" pos:end="173:22">*</operator><name pos:start="173:23" pos:end="173:28">outioc</name></expr>)</condition> <block pos:start="173:31" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:30">

                    <goto pos:start="175:21" pos:end="175:30">goto <name pos:start="175:26" pos:end="175:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:30"><expr pos:start="179:17" pos:end="179:29"><name pos:start="179:17" pos:end="179:19">ioc</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <operator pos:start="179:23" pos:end="179:23">*</operator><name pos:start="179:24" pos:end="179:29">outioc</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="181:15" pos:end="187:13">else <block pos:start="181:20" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:26">

                <expr_stmt pos:start="183:17" pos:end="183:69"><expr pos:start="183:17" pos:end="183:68"><call pos:start="183:17" pos:end="183:68"><name pos:start="183:17" pos:end="183:26">error_setg</name><argument_list pos:start="183:27" pos:end="183:68">(<argument pos:start="183:28" pos:end="183:31"><expr pos:start="183:28" pos:end="183:31"><name pos:start="183:28" pos:end="183:31">errp</name></expr></argument>, <argument pos:start="183:34" pos:end="183:67"><expr pos:start="183:34" pos:end="183:67"><literal type="string" pos:start="183:34" pos:end="183:67">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="185:17" pos:end="185:26">goto <name pos:start="185:22" pos:end="185:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="191:9" pos:end="197:9"><if pos:start="191:9" pos:end="197:9">if <condition pos:start="191:12" pos:end="191:18">(<expr pos:start="191:13" pos:end="191:17"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:17">name</name></expr>)</condition> <block pos:start="191:20" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:22">

            <expr_stmt pos:start="193:13" pos:end="193:56"><expr pos:start="193:13" pos:end="193:55"><call pos:start="193:13" pos:end="193:55"><name pos:start="193:13" pos:end="193:17">TRACE</name><argument_list pos:start="193:18" pos:end="193:55">(<argument pos:start="193:19" pos:end="193:54"><expr pos:start="193:19" pos:end="193:54"><literal type="string" pos:start="193:19" pos:end="193:54">"Using default NBD export name \"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:22"><expr pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:16">name</name> <operator pos:start="195:18" pos:end="195:18">=</operator> <literal type="string" pos:start="195:20" pos:end="195:21">""</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="219:9"><if pos:start="199:9" pos:end="219:9">if <condition pos:start="199:12" pos:end="199:26">(<expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:25">fixedNewStyle</name></expr>)</condition> <block pos:start="199:28" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:13">

            <comment type="block" pos:start="201:13" pos:end="211:15">/* Check our desired export is present in the

             * server export list. Since NBD_OPT_EXPORT_NAME

             * cannot return an error message, running this

             * query gives us good error reporting if the

             * server required TLS

             */</comment>

            <if_stmt pos:start="213:13" pos:end="217:13"><if pos:start="213:13" pos:end="217:13">if <condition pos:start="213:16" pos:end="213:63">(<expr pos:start="213:17" pos:end="213:62"><call pos:start="213:17" pos:end="213:58"><name pos:start="213:17" pos:end="213:41">nbd_receive_query_exports</name><argument_list pos:start="213:42" pos:end="213:58">(<argument pos:start="213:43" pos:end="213:45"><expr pos:start="213:43" pos:end="213:45"><name pos:start="213:43" pos:end="213:45">ioc</name></expr></argument>, <argument pos:start="213:48" pos:end="213:51"><expr pos:start="213:48" pos:end="213:51"><name pos:start="213:48" pos:end="213:51">name</name></expr></argument>, <argument pos:start="213:54" pos:end="213:57"><expr pos:start="213:54" pos:end="213:57"><name pos:start="213:54" pos:end="213:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="213:60" pos:end="213:60">&lt;</operator> <literal type="number" pos:start="213:62" pos:end="213:62">0</literal></expr>)</condition> <block pos:start="213:65" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:26">

                <goto pos:start="215:17" pos:end="215:26">goto <name pos:start="215:22" pos:end="215:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="221:9" pos:end="221:43">/* write the export name request */</comment>

        <if_stmt pos:start="223:9" pos:end="229:9"><if pos:start="223:9" pos:end="229:9">if <condition pos:start="223:12" pos:end="225:46">(<expr pos:start="223:13" pos:end="225:45"><call pos:start="223:13" pos:end="225:41"><name pos:start="223:13" pos:end="223:35">nbd_send_option_request</name><argument_list pos:start="223:36" pos:end="225:41">(<argument pos:start="223:37" pos:end="223:39"><expr pos:start="223:37" pos:end="223:39"><name pos:start="223:37" pos:end="223:39">ioc</name></expr></argument>, <argument pos:start="223:42" pos:end="223:60"><expr pos:start="223:42" pos:end="223:60"><name pos:start="223:42" pos:end="223:60">NBD_OPT_EXPORT_NAME</name></expr></argument>, <argument pos:start="223:63" pos:end="223:64"><expr pos:start="223:63" pos:end="223:64"><operator pos:start="223:63" pos:end="223:63">-</operator><literal type="number" pos:start="223:64" pos:end="223:64">1</literal></expr></argument>, <argument pos:start="223:67" pos:end="223:70"><expr pos:start="223:67" pos:end="223:70"><name pos:start="223:67" pos:end="223:70">name</name></expr></argument>,

                                    <argument pos:start="225:37" pos:end="225:40"><expr pos:start="225:37" pos:end="225:40"><name pos:start="225:37" pos:end="225:40">errp</name></expr></argument>)</argument_list></call> <operator pos:start="225:43" pos:end="225:43">&lt;</operator> <literal type="number" pos:start="225:45" pos:end="225:45">0</literal></expr>)</condition> <block pos:start="225:48" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:22">

            <goto pos:start="227:13" pos:end="227:22">goto <name pos:start="227:18" pos:end="227:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="233:9" pos:end="233:31">/* Read the response */</comment>

        <if_stmt pos:start="235:9" pos:end="241:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:52">(<expr pos:start="235:13" pos:end="235:51"><call pos:start="235:13" pos:end="235:47"><name pos:start="235:13" pos:end="235:21">read_sync</name><argument_list pos:start="235:22" pos:end="235:47">(<argument pos:start="235:23" pos:end="235:25"><expr pos:start="235:23" pos:end="235:25"><name pos:start="235:23" pos:end="235:25">ioc</name></expr></argument>, <argument pos:start="235:28" pos:end="235:29"><expr pos:start="235:28" pos:end="235:29"><operator pos:start="235:28" pos:end="235:28">&amp;</operator><name pos:start="235:29" pos:end="235:29">s</name></expr></argument>, <argument pos:start="235:32" pos:end="235:40"><expr pos:start="235:32" pos:end="235:40"><sizeof pos:start="235:32" pos:end="235:40">sizeof<argument_list pos:start="235:38" pos:end="235:40">(<argument pos:start="235:39" pos:end="235:39"><expr pos:start="235:39" pos:end="235:39"><name pos:start="235:39" pos:end="235:39">s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="235:43" pos:end="235:46"><expr pos:start="235:43" pos:end="235:46"><name pos:start="235:43" pos:end="235:46">errp</name></expr></argument>)</argument_list></call> <operator pos:start="235:49" pos:end="235:49">&lt;</operator> <literal type="number" pos:start="235:51" pos:end="235:51">0</literal></expr>)</condition> <block pos:start="235:54" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:22">

            <expr_stmt pos:start="237:13" pos:end="237:64"><expr pos:start="237:13" pos:end="237:63"><call pos:start="237:13" pos:end="237:63"><name pos:start="237:13" pos:end="237:25">error_prepend</name><argument_list pos:start="237:26" pos:end="237:63">(<argument pos:start="237:27" pos:end="237:30"><expr pos:start="237:27" pos:end="237:30"><name pos:start="237:27" pos:end="237:30">errp</name></expr></argument>, <argument pos:start="237:33" pos:end="237:62"><expr pos:start="237:33" pos:end="237:62"><literal type="string" pos:start="237:33" pos:end="237:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:22">goto <name pos:start="239:18" pos:end="239:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:31"><expr pos:start="243:9" pos:end="243:30"><operator pos:start="243:9" pos:end="243:9">*</operator><name pos:start="243:10" pos:end="243:13">size</name> <operator pos:start="243:15" pos:end="243:15">=</operator> <call pos:start="243:17" pos:end="243:30"><name pos:start="243:17" pos:end="243:27">be64_to_cpu</name><argument_list pos:start="243:28" pos:end="243:30">(<argument pos:start="243:29" pos:end="243:29"><expr pos:start="243:29" pos:end="243:29"><name pos:start="243:29" pos:end="243:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="247:9" pos:end="253:9"><if pos:start="247:9" pos:end="253:9">if <condition pos:start="247:12" pos:end="247:60">(<expr pos:start="247:13" pos:end="247:59"><call pos:start="247:13" pos:end="247:55"><name pos:start="247:13" pos:end="247:21">read_sync</name><argument_list pos:start="247:22" pos:end="247:55">(<argument pos:start="247:23" pos:end="247:25"><expr pos:start="247:23" pos:end="247:25"><name pos:start="247:23" pos:end="247:25">ioc</name></expr></argument>, <argument pos:start="247:28" pos:end="247:32"><expr pos:start="247:28" pos:end="247:32"><name pos:start="247:28" pos:end="247:32">flags</name></expr></argument>, <argument pos:start="247:35" pos:end="247:48"><expr pos:start="247:35" pos:end="247:48"><sizeof pos:start="247:35" pos:end="247:48">sizeof<argument_list pos:start="247:41" pos:end="247:48">(<argument pos:start="247:42" pos:end="247:47"><expr pos:start="247:42" pos:end="247:47"><operator pos:start="247:42" pos:end="247:42">*</operator><name pos:start="247:43" pos:end="247:47">flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="247:51" pos:end="247:54"><expr pos:start="247:51" pos:end="247:54"><name pos:start="247:51" pos:end="247:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="247:57" pos:end="247:57">&lt;</operator> <literal type="number" pos:start="247:59" pos:end="247:59">0</literal></expr>)</condition> <block pos:start="247:62" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:22">

            <expr_stmt pos:start="249:13" pos:end="249:63"><expr pos:start="249:13" pos:end="249:62"><call pos:start="249:13" pos:end="249:62"><name pos:start="249:13" pos:end="249:25">error_prepend</name><argument_list pos:start="249:26" pos:end="249:62">(<argument pos:start="249:27" pos:end="249:30"><expr pos:start="249:27" pos:end="249:30"><name pos:start="249:27" pos:end="249:30">errp</name></expr></argument>, <argument pos:start="249:33" pos:end="249:61"><expr pos:start="249:33" pos:end="249:61"><literal type="string" pos:start="249:33" pos:end="249:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="251:13" pos:end="251:22">goto <name pos:start="251:18" pos:end="251:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:28"><expr pos:start="255:9" pos:end="255:27"><call pos:start="255:9" pos:end="255:27"><name pos:start="255:9" pos:end="255:20">be16_to_cpus</name><argument_list pos:start="255:21" pos:end="255:27">(<argument pos:start="255:22" pos:end="255:26"><expr pos:start="255:22" pos:end="255:26"><name pos:start="255:22" pos:end="255:26">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="257:7" pos:end="315:5">else if <condition pos:start="257:15" pos:end="257:41">(<expr pos:start="257:16" pos:end="257:40"><name pos:start="257:16" pos:end="257:20">magic</name> <operator pos:start="257:22" pos:end="257:23">==</operator> <name pos:start="257:25" pos:end="257:40">NBD_CLIENT_MAGIC</name></expr>)</condition> <block pos:start="257:43" pos:end="315:5">{<block_content pos:start="259:9" pos:end="313:26">

        <decl_stmt pos:start="259:9" pos:end="259:26"><decl pos:start="259:9" pos:end="259:25"><type pos:start="259:9" pos:end="259:16"><name pos:start="259:9" pos:end="259:16">uint32_t</name></type> <name pos:start="259:18" pos:end="259:25">oldflags</name></decl>;</decl_stmt>



        <if_stmt pos:start="263:9" pos:end="269:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:17">(<expr pos:start="263:13" pos:end="263:16"><name pos:start="263:13" pos:end="263:16">name</name></expr>)</condition> <block pos:start="263:19" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:22">

            <expr_stmt pos:start="265:13" pos:end="265:69"><expr pos:start="265:13" pos:end="265:68"><call pos:start="265:13" pos:end="265:68"><name pos:start="265:13" pos:end="265:22">error_setg</name><argument_list pos:start="265:23" pos:end="265:68">(<argument pos:start="265:24" pos:end="265:27"><expr pos:start="265:24" pos:end="265:27"><name pos:start="265:24" pos:end="265:27">errp</name></expr></argument>, <argument pos:start="265:30" pos:end="265:67"><expr pos:start="265:30" pos:end="265:67"><literal type="string" pos:start="265:30" pos:end="265:67">"Server does not support export names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="267:13" pos:end="267:22">goto <name pos:start="267:18" pos:end="267:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="277:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:21">(<expr pos:start="271:13" pos:end="271:20"><name pos:start="271:13" pos:end="271:20">tlscreds</name></expr>)</condition> <block pos:start="271:23" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:22">

            <expr_stmt pos:start="273:13" pos:end="273:65"><expr pos:start="273:13" pos:end="273:64"><call pos:start="273:13" pos:end="273:64"><name pos:start="273:13" pos:end="273:22">error_setg</name><argument_list pos:start="273:23" pos:end="273:64">(<argument pos:start="273:24" pos:end="273:27"><expr pos:start="273:24" pos:end="273:27"><name pos:start="273:24" pos:end="273:27">errp</name></expr></argument>, <argument pos:start="273:30" pos:end="273:63"><expr pos:start="273:30" pos:end="273:63"><literal type="string" pos:start="273:30" pos:end="273:63">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="275:13" pos:end="275:22">goto <name pos:start="275:18" pos:end="275:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:52">(<expr pos:start="281:13" pos:end="281:51"><call pos:start="281:13" pos:end="281:47"><name pos:start="281:13" pos:end="281:21">read_sync</name><argument_list pos:start="281:22" pos:end="281:47">(<argument pos:start="281:23" pos:end="281:25"><expr pos:start="281:23" pos:end="281:25"><name pos:start="281:23" pos:end="281:25">ioc</name></expr></argument>, <argument pos:start="281:28" pos:end="281:29"><expr pos:start="281:28" pos:end="281:29"><operator pos:start="281:28" pos:end="281:28">&amp;</operator><name pos:start="281:29" pos:end="281:29">s</name></expr></argument>, <argument pos:start="281:32" pos:end="281:40"><expr pos:start="281:32" pos:end="281:40"><sizeof pos:start="281:32" pos:end="281:40">sizeof<argument_list pos:start="281:38" pos:end="281:40">(<argument pos:start="281:39" pos:end="281:39"><expr pos:start="281:39" pos:end="281:39"><name pos:start="281:39" pos:end="281:39">s</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="281:43" pos:end="281:46"><expr pos:start="281:43" pos:end="281:46"><name pos:start="281:43" pos:end="281:46">errp</name></expr></argument>)</argument_list></call> <operator pos:start="281:49" pos:end="281:49">&lt;</operator> <literal type="number" pos:start="281:51" pos:end="281:51">0</literal></expr>)</condition> <block pos:start="281:54" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:22">

            <expr_stmt pos:start="283:13" pos:end="283:64"><expr pos:start="283:13" pos:end="283:63"><call pos:start="283:13" pos:end="283:63"><name pos:start="283:13" pos:end="283:25">error_prepend</name><argument_list pos:start="283:26" pos:end="283:63">(<argument pos:start="283:27" pos:end="283:30"><expr pos:start="283:27" pos:end="283:30"><name pos:start="283:27" pos:end="283:30">errp</name></expr></argument>, <argument pos:start="283:33" pos:end="283:62"><expr pos:start="283:33" pos:end="283:62"><literal type="string" pos:start="283:33" pos:end="283:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="285:13" pos:end="285:22">goto <name pos:start="285:18" pos:end="285:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:31"><expr pos:start="289:9" pos:end="289:30"><operator pos:start="289:9" pos:end="289:9">*</operator><name pos:start="289:10" pos:end="289:13">size</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <call pos:start="289:17" pos:end="289:30"><name pos:start="289:17" pos:end="289:27">be64_to_cpu</name><argument_list pos:start="289:28" pos:end="289:30">(<argument pos:start="289:29" pos:end="289:29"><expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:41"><expr pos:start="291:9" pos:end="291:40"><call pos:start="291:9" pos:end="291:40"><name pos:start="291:9" pos:end="291:13">TRACE</name><argument_list pos:start="291:14" pos:end="291:40">(<argument pos:start="291:15" pos:end="291:32"><expr pos:start="291:15" pos:end="291:32"><literal type="string" pos:start="291:15" pos:end="291:25">"Size is %"</literal> <name pos:start="291:27" pos:end="291:32">PRIu64</name></expr></argument>, <argument pos:start="291:35" pos:end="291:39"><expr pos:start="291:35" pos:end="291:39"><operator pos:start="291:35" pos:end="291:35">*</operator><name pos:start="291:36" pos:end="291:39">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="295:9" pos:end="301:9"><if pos:start="295:9" pos:end="301:9">if <condition pos:start="295:12" pos:end="295:66">(<expr pos:start="295:13" pos:end="295:65"><call pos:start="295:13" pos:end="295:61"><name pos:start="295:13" pos:end="295:21">read_sync</name><argument_list pos:start="295:22" pos:end="295:61">(<argument pos:start="295:23" pos:end="295:25"><expr pos:start="295:23" pos:end="295:25"><name pos:start="295:23" pos:end="295:25">ioc</name></expr></argument>, <argument pos:start="295:28" pos:end="295:36"><expr pos:start="295:28" pos:end="295:36"><operator pos:start="295:28" pos:end="295:28">&amp;</operator><name pos:start="295:29" pos:end="295:36">oldflags</name></expr></argument>, <argument pos:start="295:39" pos:end="295:54"><expr pos:start="295:39" pos:end="295:54"><sizeof pos:start="295:39" pos:end="295:54">sizeof<argument_list pos:start="295:45" pos:end="295:54">(<argument pos:start="295:46" pos:end="295:53"><expr pos:start="295:46" pos:end="295:53"><name pos:start="295:46" pos:end="295:53">oldflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="295:57" pos:end="295:60"><expr pos:start="295:57" pos:end="295:60"><name pos:start="295:57" pos:end="295:60">errp</name></expr></argument>)</argument_list></call> <operator pos:start="295:63" pos:end="295:63">&lt;</operator> <literal type="number" pos:start="295:65" pos:end="295:65">0</literal></expr>)</condition> <block pos:start="295:68" pos:end="301:9">{<block_content pos:start="297:13" pos:end="299:22">

            <expr_stmt pos:start="297:13" pos:end="297:63"><expr pos:start="297:13" pos:end="297:62"><call pos:start="297:13" pos:end="297:62"><name pos:start="297:13" pos:end="297:25">error_prepend</name><argument_list pos:start="297:26" pos:end="297:62">(<argument pos:start="297:27" pos:end="297:30"><expr pos:start="297:27" pos:end="297:30"><name pos:start="297:27" pos:end="297:30">errp</name></expr></argument>, <argument pos:start="297:33" pos:end="297:61"><expr pos:start="297:33" pos:end="297:61"><literal type="string" pos:start="297:33" pos:end="297:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="299:13" pos:end="299:22">goto <name pos:start="299:18" pos:end="299:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:32"><expr pos:start="303:9" pos:end="303:31"><call pos:start="303:9" pos:end="303:31"><name pos:start="303:9" pos:end="303:20">be32_to_cpus</name><argument_list pos:start="303:21" pos:end="303:31">(<argument pos:start="303:22" pos:end="303:30"><expr pos:start="303:22" pos:end="303:30"><operator pos:start="303:22" pos:end="303:22">&amp;</operator><name pos:start="303:23" pos:end="303:30">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="305:9" pos:end="311:9"><if pos:start="305:9" pos:end="311:9">if <condition pos:start="305:12" pos:end="305:31">(<expr pos:start="305:13" pos:end="305:30"><name pos:start="305:13" pos:end="305:20">oldflags</name> <operator pos:start="305:22" pos:end="305:22">&amp;</operator> <operator pos:start="305:24" pos:end="305:24">~</operator><literal type="number" pos:start="305:25" pos:end="305:30">0xffff</literal></expr>)</condition> <block pos:start="305:33" pos:end="311:9">{<block_content pos:start="307:13" pos:end="309:22">

            <expr_stmt pos:start="307:13" pos:end="307:77"><expr pos:start="307:13" pos:end="307:76"><call pos:start="307:13" pos:end="307:76"><name pos:start="307:13" pos:end="307:22">error_setg</name><argument_list pos:start="307:23" pos:end="307:76">(<argument pos:start="307:24" pos:end="307:27"><expr pos:start="307:24" pos:end="307:27"><name pos:start="307:24" pos:end="307:27">errp</name></expr></argument>, <argument pos:start="307:30" pos:end="307:65"><expr pos:start="307:30" pos:end="307:65"><literal type="string" pos:start="307:30" pos:end="307:58">"Unexpected export flags %0x"</literal> <name pos:start="307:60" pos:end="307:65">PRIx32</name></expr></argument>, <argument pos:start="307:68" pos:end="307:75"><expr pos:start="307:68" pos:end="307:75"><name pos:start="307:68" pos:end="307:75">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="309:13" pos:end="309:22">goto <name pos:start="309:18" pos:end="309:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:26"><expr pos:start="313:9" pos:end="313:25"><operator pos:start="313:9" pos:end="313:9">*</operator><name pos:start="313:10" pos:end="313:14">flags</name> <operator pos:start="313:16" pos:end="313:16">=</operator> <name pos:start="313:18" pos:end="313:25">oldflags</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="315:7" pos:end="321:5">else <block pos:start="315:12" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:18">

        <expr_stmt pos:start="317:9" pos:end="317:47"><expr pos:start="317:9" pos:end="317:46"><call pos:start="317:9" pos:end="317:46"><name pos:start="317:9" pos:end="317:18">error_setg</name><argument_list pos:start="317:19" pos:end="317:46">(<argument pos:start="317:20" pos:end="317:23"><expr pos:start="317:20" pos:end="317:23"><name pos:start="317:20" pos:end="317:23">errp</name></expr></argument>, <argument pos:start="317:26" pos:end="317:45"><expr pos:start="317:26" pos:end="317:45"><literal type="string" pos:start="317:26" pos:end="317:45">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="319:9" pos:end="319:18">goto <name pos:start="319:14" pos:end="319:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:71"><expr pos:start="325:5" pos:end="325:70"><call pos:start="325:5" pos:end="325:70"><name pos:start="325:5" pos:end="325:9">TRACE</name><argument_list pos:start="325:10" pos:end="325:70">(<argument pos:start="325:11" pos:end="325:54"><expr pos:start="325:11" pos:end="325:54"><literal type="string" pos:start="325:11" pos:end="325:21">"Size is %"</literal> <name pos:start="325:23" pos:end="325:28">PRIu64</name> <literal type="string" pos:start="325:30" pos:end="325:47">", export flags %"</literal> <name pos:start="325:49" pos:end="325:54">PRIx16</name></expr></argument>, <argument pos:start="325:57" pos:end="325:61"><expr pos:start="325:57" pos:end="325:61"><operator pos:start="325:57" pos:end="325:57">*</operator><name pos:start="325:58" pos:end="325:61">size</name></expr></argument>, <argument pos:start="325:64" pos:end="325:69"><expr pos:start="325:64" pos:end="325:69"><operator pos:start="325:64" pos:end="325:64">*</operator><name pos:start="325:65" pos:end="325:69">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="327:5" pos:end="333:5"><if pos:start="327:5" pos:end="333:5">if <condition pos:start="327:8" pos:end="327:48">(<expr pos:start="327:9" pos:end="327:47"><name pos:start="327:9" pos:end="327:14">zeroes</name> <operator pos:start="327:16" pos:end="327:17">&amp;&amp;</operator> <call pos:start="327:19" pos:end="327:43"><name pos:start="327:19" pos:end="327:27">drop_sync</name><argument_list pos:start="327:28" pos:end="327:43">(<argument pos:start="327:29" pos:end="327:31"><expr pos:start="327:29" pos:end="327:31"><name pos:start="327:29" pos:end="327:31">ioc</name></expr></argument>, <argument pos:start="327:34" pos:end="327:36"><expr pos:start="327:34" pos:end="327:36"><literal type="number" pos:start="327:34" pos:end="327:36">124</literal></expr></argument>, <argument pos:start="327:39" pos:end="327:42"><expr pos:start="327:39" pos:end="327:42"><name pos:start="327:39" pos:end="327:42">errp</name></expr></argument>)</argument_list></call> <operator pos:start="327:45" pos:end="327:45">&lt;</operator> <literal type="number" pos:start="327:47" pos:end="327:47">0</literal></expr>)</condition> <block pos:start="327:50" pos:end="333:5">{<block_content pos:start="329:9" pos:end="331:18">

        <expr_stmt pos:start="329:9" pos:end="329:61"><expr pos:start="329:9" pos:end="329:60"><call pos:start="329:9" pos:end="329:60"><name pos:start="329:9" pos:end="329:21">error_prepend</name><argument_list pos:start="329:22" pos:end="329:60">(<argument pos:start="329:23" pos:end="329:26"><expr pos:start="329:23" pos:end="329:26"><name pos:start="329:23" pos:end="329:26">errp</name></expr></argument>, <argument pos:start="329:29" pos:end="329:59"><expr pos:start="329:29" pos:end="329:59"><literal type="string" pos:start="329:29" pos:end="329:59">"Failed to read reserved block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="331:9" pos:end="331:18">goto <name pos:start="331:14" pos:end="331:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:11"><expr pos:start="335:5" pos:end="335:10"><name pos:start="335:5" pos:end="335:6">rc</name> <operator pos:start="335:8" pos:end="335:8">=</operator> <literal type="number" pos:start="335:10" pos:end="335:10">0</literal></expr>;</expr_stmt>



<label pos:start="339:1" pos:end="339:5"><name pos:start="339:1" pos:end="339:4">fail</name>:</label>

    <return pos:start="341:5" pos:end="341:14">return <expr pos:start="341:12" pos:end="341:13"><name pos:start="341:12" pos:end="341:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
