<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25824.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">tm2_build_huff_table</name><parameter_list pos:start="1:32" pos:end="1:64">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:42">TM2Context</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:63"><decl pos:start="1:50" pos:end="1:63"><type pos:start="1:50" pos:end="1:63"><name pos:start="1:50" pos:end="1:57">TM2Codes</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">code</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:15">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">TM2Huff</name></type> <name pos:start="5:13" pos:end="5:16">huff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">res</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:8">huff</name><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:17">val_bits</name></name> <operator pos:start="11:19" pos:end="11:19">=</operator> <call pos:start="11:21" pos:end="11:41"><name pos:start="11:21" pos:end="11:28">get_bits</name><argument_list pos:start="11:29" pos:end="11:41">(<argument pos:start="11:30" pos:end="11:37"><expr pos:start="11:30" pos:end="11:37"><operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:37"><name pos:start="11:31" pos:end="11:33">ctx</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:37">gb</name></name></expr></argument>, <argument pos:start="11:40" pos:end="11:40"><expr pos:start="11:40" pos:end="11:40"><literal type="number" pos:start="11:40" pos:end="11:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:42"><expr pos:start="13:5" pos:end="13:41"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:8">huff</name><operator pos:start="13:9" pos:end="13:9">.</operator><name pos:start="13:10" pos:end="13:17">max_bits</name></name> <operator pos:start="13:19" pos:end="13:19">=</operator> <call pos:start="13:21" pos:end="13:41"><name pos:start="13:21" pos:end="13:28">get_bits</name><argument_list pos:start="13:29" pos:end="13:41">(<argument pos:start="13:30" pos:end="13:37"><expr pos:start="13:30" pos:end="13:37"><operator pos:start="13:30" pos:end="13:30">&amp;</operator><name pos:start="13:31" pos:end="13:37"><name pos:start="13:31" pos:end="13:33">ctx</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:37">gb</name></name></expr></argument>, <argument pos:start="13:40" pos:end="13:40"><expr pos:start="13:40" pos:end="13:40"><literal type="number" pos:start="13:40" pos:end="13:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:8">huff</name><operator pos:start="15:9" pos:end="15:9">.</operator><name pos:start="15:10" pos:end="15:17">min_bits</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <call pos:start="15:21" pos:end="15:41"><name pos:start="15:21" pos:end="15:28">get_bits</name><argument_list pos:start="15:29" pos:end="15:41">(<argument pos:start="15:30" pos:end="15:37"><expr pos:start="15:30" pos:end="15:37"><operator pos:start="15:30" pos:end="15:30">&amp;</operator><name pos:start="15:31" pos:end="15:37"><name pos:start="15:31" pos:end="15:33">ctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:37">gb</name></name></expr></argument>, <argument pos:start="15:40" pos:end="15:40"><expr pos:start="15:40" pos:end="15:40"><literal type="number" pos:start="15:40" pos:end="15:40">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">huff</name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:14">nodes</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:44"><name pos:start="17:18" pos:end="17:30">get_bits_long</name><argument_list pos:start="17:31" pos:end="17:44">(<argument pos:start="17:32" pos:end="17:39"><expr pos:start="17:32" pos:end="17:39"><operator pos:start="17:32" pos:end="17:32">&amp;</operator><name pos:start="17:33" pos:end="17:39"><name pos:start="17:33" pos:end="17:35">ctx</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:39">gb</name></name></expr></argument>, <argument pos:start="17:42" pos:end="17:43"><expr pos:start="17:42" pos:end="17:43"><literal type="number" pos:start="17:42" pos:end="17:43">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:17"><expr pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:8">huff</name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:12">num</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:44">/* check for correct codes parameters */</comment>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if<condition pos:start="25:7" pos:end="27:51">(<expr pos:start="25:8" pos:end="27:50"><operator pos:start="25:8" pos:end="25:8">(</operator><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:12">huff</name><operator pos:start="25:13" pos:end="25:13">.</operator><name pos:start="25:14" pos:end="25:21">val_bits</name></name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <literal type="number" pos:start="25:25" pos:end="25:25">1</literal><operator pos:start="25:26" pos:end="25:26">)</operator> <operator pos:start="25:28" pos:end="25:29">||</operator> <operator pos:start="25:31" pos:end="25:31">(</operator><name pos:start="25:32" pos:end="25:44"><name pos:start="25:32" pos:end="25:35">huff</name><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:44">val_bits</name></name> <operator pos:start="25:46" pos:end="25:46">&gt;</operator> <literal type="number" pos:start="25:48" pos:end="25:49">32</literal><operator pos:start="25:50" pos:end="25:50">)</operator> <operator pos:start="25:52" pos:end="25:53">||</operator>

       <operator pos:start="27:8" pos:end="27:8">(</operator><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:12">huff</name><operator pos:start="27:13" pos:end="27:13">.</operator><name pos:start="27:14" pos:end="27:21">max_bits</name></name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal><operator pos:start="27:26" pos:end="27:26">)</operator> <operator pos:start="27:28" pos:end="27:29">||</operator> <operator pos:start="27:31" pos:end="27:31">(</operator><name pos:start="27:32" pos:end="27:44"><name pos:start="27:32" pos:end="27:35">huff</name><operator pos:start="27:36" pos:end="27:36">.</operator><name pos:start="27:37" pos:end="27:44">max_bits</name></name> <operator pos:start="27:46" pos:end="27:46">&gt;</operator> <literal type="number" pos:start="27:48" pos:end="27:49">32</literal><operator pos:start="27:50" pos:end="27:50">)</operator></expr>)</condition> <block pos:start="27:53" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:18">

        <expr_stmt pos:start="29:9" pos:end="31:45"><expr pos:start="29:9" pos:end="31:44"><call pos:start="29:9" pos:end="31:44"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="31:44">(<argument pos:start="29:16" pos:end="29:25"><expr pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:18">ctx</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:25">avctx</name></name></expr></argument>, <argument pos:start="29:28" pos:end="29:39"><expr pos:start="29:28" pos:end="29:39"><name pos:start="29:28" pos:end="29:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:42" pos:end="29:112"><expr pos:start="29:42" pos:end="29:112"><literal type="string" pos:start="29:42" pos:end="29:112">"Incorrect tree parameters - literal length: %i, max code length: %i\n"</literal></expr></argument>,

               <argument pos:start="31:16" pos:end="31:28"><expr pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:19">huff</name><operator pos:start="31:20" pos:end="31:20">.</operator><name pos:start="31:21" pos:end="31:28">val_bits</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:43"><expr pos:start="31:31" pos:end="31:43"><name pos:start="31:31" pos:end="31:43"><name pos:start="31:31" pos:end="31:34">huff</name><operator pos:start="31:35" pos:end="31:35">.</operator><name pos:start="31:36" pos:end="31:43">max_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if<condition pos:start="37:7" pos:end="37:51">(<expr pos:start="37:8" pos:end="37:50"><operator pos:start="37:8" pos:end="37:8">(</operator><name pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:12">huff</name><operator pos:start="37:13" pos:end="37:13">.</operator><name pos:start="37:14" pos:end="37:18">nodes</name></name> <operator pos:start="37:20" pos:end="37:21">&lt;=</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal><operator pos:start="37:24" pos:end="37:24">)</operator> <operator pos:start="37:26" pos:end="37:27">||</operator> <operator pos:start="37:29" pos:end="37:29">(</operator><name pos:start="37:30" pos:end="37:39"><name pos:start="37:30" pos:end="37:33">huff</name><operator pos:start="37:34" pos:end="37:34">.</operator><name pos:start="37:35" pos:end="37:39">nodes</name></name> <operator pos:start="37:41" pos:end="37:41">&gt;</operator> <literal type="number" pos:start="37:43" pos:end="37:49">0x10000</literal><operator pos:start="37:50" pos:end="37:50">)</operator></expr>)</condition> <block pos:start="37:53" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:101"><expr pos:start="39:9" pos:end="39:100"><call pos:start="39:9" pos:end="39:100"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:100">(<argument pos:start="39:16" pos:end="39:25"><expr pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:18">ctx</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:25">avctx</name></name></expr></argument>, <argument pos:start="39:28" pos:end="39:39"><expr pos:start="39:28" pos:end="39:39"><name pos:start="39:28" pos:end="39:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:42" pos:end="39:87"><expr pos:start="39:42" pos:end="39:87"><literal type="string" pos:start="39:42" pos:end="39:87">"Incorrect number of Huffman tree nodes: %i\n"</literal></expr></argument>, <argument pos:start="39:90" pos:end="39:99"><expr pos:start="39:90" pos:end="39:99"><name pos:start="39:90" pos:end="39:99"><name pos:start="39:90" pos:end="39:93">huff</name><operator pos:start="39:94" pos:end="39:94">.</operator><name pos:start="39:95" pos:end="39:99">nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:23">/* one-node tree */</comment>

    <if_stmt pos:start="47:5" pos:end="49:26"><if pos:start="47:5" pos:end="49:26">if<condition pos:start="47:7" pos:end="47:26">(<expr pos:start="47:8" pos:end="47:25"><name pos:start="47:8" pos:end="47:20"><name pos:start="47:8" pos:end="47:11">huff</name><operator pos:start="47:12" pos:end="47:12">.</operator><name pos:start="47:13" pos:end="47:20">max_bits</name></name> <operator pos:start="47:22" pos:end="47:23">==</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:26"><block_content pos:start="49:9" pos:end="49:26">

        <expr_stmt pos:start="49:9" pos:end="49:26"><expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:12">huff</name><operator pos:start="49:13" pos:end="49:13">.</operator><name pos:start="49:14" pos:end="49:21">max_bits</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <literal type="number" pos:start="49:25" pos:end="49:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:74">/* allocate space for codes - it is exactly ceil(nodes / 2) entries */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:8">huff</name><operator pos:start="55:9" pos:end="55:9">.</operator><name pos:start="55:10" pos:end="55:16">max_num</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:24">huff</name><operator pos:start="55:25" pos:end="55:25">.</operator><name pos:start="55:26" pos:end="55:30">nodes</name></name> <operator pos:start="55:32" pos:end="55:32">+</operator> <literal type="number" pos:start="55:34" pos:end="55:34">1</literal><operator pos:start="55:35" pos:end="55:35">)</operator> <operator pos:start="55:37" pos:end="55:38">&gt;&gt;</operator> <literal type="number" pos:start="55:40" pos:end="55:40">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:55"><expr pos:start="57:5" pos:end="57:54"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:8">huff</name><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:13">nums</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:54"><name pos:start="57:17" pos:end="57:26">av_mallocz</name><argument_list pos:start="57:27" pos:end="57:54">(<argument pos:start="57:28" pos:end="57:53"><expr pos:start="57:28" pos:end="57:53"><name pos:start="57:28" pos:end="57:39"><name pos:start="57:28" pos:end="57:31">huff</name><operator pos:start="57:32" pos:end="57:32">.</operator><name pos:start="57:33" pos:end="57:39">max_num</name></name> <operator pos:start="57:41" pos:end="57:41">*</operator> <sizeof pos:start="57:43" pos:end="57:53">sizeof<argument_list pos:start="57:49" pos:end="57:53">(<argument pos:start="57:50" pos:end="57:52"><expr pos:start="57:50" pos:end="57:52"><name pos:start="57:50" pos:end="57:52">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:60"><expr pos:start="59:5" pos:end="59:59"><name pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:8">huff</name><operator pos:start="59:9" pos:end="59:9">.</operator><name pos:start="59:10" pos:end="59:13">bits</name></name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:59"><name pos:start="59:17" pos:end="59:26">av_mallocz</name><argument_list pos:start="59:27" pos:end="59:59">(<argument pos:start="59:28" pos:end="59:58"><expr pos:start="59:28" pos:end="59:58"><name pos:start="59:28" pos:end="59:39"><name pos:start="59:28" pos:end="59:31">huff</name><operator pos:start="59:32" pos:end="59:32">.</operator><name pos:start="59:33" pos:end="59:39">max_num</name></name> <operator pos:start="59:41" pos:end="59:41">*</operator> <sizeof pos:start="59:43" pos:end="59:58">sizeof<argument_list pos:start="59:49" pos:end="59:58">(<argument pos:start="59:50" pos:end="59:57"><expr pos:start="59:50" pos:end="59:57"><name pos:start="59:50" pos:end="59:57">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:55"><expr pos:start="61:5" pos:end="61:54"><name pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:8">huff</name><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:13">lens</name></name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:54"><name pos:start="61:17" pos:end="61:26">av_mallocz</name><argument_list pos:start="61:27" pos:end="61:54">(<argument pos:start="61:28" pos:end="61:53"><expr pos:start="61:28" pos:end="61:53"><name pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:31">huff</name><operator pos:start="61:32" pos:end="61:32">.</operator><name pos:start="61:33" pos:end="61:39">max_num</name></name> <operator pos:start="61:41" pos:end="61:41">*</operator> <sizeof pos:start="61:43" pos:end="61:53">sizeof<argument_list pos:start="61:49" pos:end="61:53">(<argument pos:start="61:50" pos:end="61:52"><expr pos:start="61:50" pos:end="61:52"><name pos:start="61:50" pos:end="61:52">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="67:17"><if pos:start="65:5" pos:end="67:17">if<condition pos:start="65:7" pos:end="65:45">(<expr pos:start="65:8" pos:end="65:44"><call pos:start="65:8" pos:end="65:38"><name pos:start="65:8" pos:end="65:20">tm2_read_tree</name><argument_list pos:start="65:21" pos:end="65:38">(<argument pos:start="65:22" pos:end="65:24"><expr pos:start="65:22" pos:end="65:24"><name pos:start="65:22" pos:end="65:24">ctx</name></expr></argument>, <argument pos:start="65:27" pos:end="65:27"><expr pos:start="65:27" pos:end="65:27"><literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr></argument>, <argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr></argument>, <argument pos:start="65:33" pos:end="65:37"><expr pos:start="65:33" pos:end="65:37"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:37">huff</name></expr></argument>)</argument_list></call> <operator pos:start="65:40" pos:end="65:41">==</operator> <operator pos:start="65:43" pos:end="65:43">-</operator><literal type="number" pos:start="65:44" pos:end="65:44">1</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:17"><block_content pos:start="67:9" pos:end="67:17">

        <expr_stmt pos:start="67:9" pos:end="67:17"><expr pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:11">res</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <operator pos:start="67:15" pos:end="67:15">-</operator><literal type="number" pos:start="67:16" pos:end="67:16">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if<condition pos:start="71:7" pos:end="71:32">(<expr pos:start="71:8" pos:end="71:31"><name pos:start="71:8" pos:end="71:15"><name pos:start="71:8" pos:end="71:11">huff</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:15">num</name></name> <operator pos:start="71:17" pos:end="71:18">!=</operator> <name pos:start="71:20" pos:end="71:31"><name pos:start="71:20" pos:end="71:23">huff</name><operator pos:start="71:24" pos:end="71:24">.</operator><name pos:start="71:25" pos:end="71:31">max_num</name></name></expr>)</condition> <block pos:start="71:34" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:17">

        <expr_stmt pos:start="73:9" pos:end="75:39"><expr pos:start="73:9" pos:end="75:38"><call pos:start="73:9" pos:end="75:38"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="75:38">(<argument pos:start="73:16" pos:end="73:25"><expr pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:18">ctx</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:25">avctx</name></name></expr></argument>, <argument pos:start="73:28" pos:end="73:39"><expr pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:42" pos:end="73:83"><expr pos:start="73:42" pos:end="73:83"><literal type="string" pos:start="73:42" pos:end="73:83">"Got less codes than expected: %i of %i\n"</literal></expr></argument>,

               <argument pos:start="75:16" pos:end="75:23"><expr pos:start="75:16" pos:end="75:23"><name pos:start="75:16" pos:end="75:23"><name pos:start="75:16" pos:end="75:19">huff</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:23">num</name></name></expr></argument>, <argument pos:start="75:26" pos:end="75:37"><expr pos:start="75:26" pos:end="75:37"><name pos:start="75:26" pos:end="75:37"><name pos:start="75:26" pos:end="75:29">huff</name><operator pos:start="75:30" pos:end="75:30">.</operator><name pos:start="75:31" pos:end="75:37">max_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:17"><expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:11">res</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <operator pos:start="77:15" pos:end="77:15">-</operator><literal type="number" pos:start="77:16" pos:end="77:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:36">/* convert codes to vlc_table */</comment>

    <if_stmt pos:start="85:5" pos:end="121:5"><if pos:start="85:5" pos:end="121:5">if<condition pos:start="85:7" pos:end="85:17">(<expr pos:start="85:8" pos:end="85:16"><name pos:start="85:8" pos:end="85:10">res</name> <operator pos:start="85:12" pos:end="85:13">!=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><literal type="number" pos:start="85:16" pos:end="85:16">1</literal></expr>)</condition> <block pos:start="85:19" pos:end="121:5">{<block_content pos:start="87:9" pos:end="119:9">

        <decl_stmt pos:start="87:9" pos:end="87:14"><decl pos:start="87:9" pos:end="87:13"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="95:70"><expr pos:start="91:9" pos:end="95:69"><name pos:start="91:9" pos:end="91:11">res</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="95:69"><name pos:start="91:15" pos:end="91:22">init_vlc</name><argument_list pos:start="91:23" pos:end="95:69">(<argument pos:start="91:24" pos:end="91:33"><expr pos:start="91:24" pos:end="91:33"><operator pos:start="91:24" pos:end="91:24">&amp;</operator><name pos:start="91:25" pos:end="91:33"><name pos:start="91:25" pos:end="91:28">code</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:33">vlc</name></name></expr></argument>, <argument pos:start="91:36" pos:end="91:48"><expr pos:start="91:36" pos:end="91:48"><name pos:start="91:36" pos:end="91:48"><name pos:start="91:36" pos:end="91:39">huff</name><operator pos:start="91:40" pos:end="91:40">.</operator><name pos:start="91:41" pos:end="91:48">max_bits</name></name></expr></argument>, <argument pos:start="91:51" pos:end="91:62"><expr pos:start="91:51" pos:end="91:62"><name pos:start="91:51" pos:end="91:62"><name pos:start="91:51" pos:end="91:54">huff</name><operator pos:start="91:55" pos:end="91:55">.</operator><name pos:start="91:56" pos:end="91:62">max_num</name></name></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:29"><expr pos:start="93:21" pos:end="93:29"><name pos:start="93:21" pos:end="93:29"><name pos:start="93:21" pos:end="93:24">huff</name><operator pos:start="93:25" pos:end="93:25">.</operator><name pos:start="93:26" pos:end="93:29">lens</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:42"><expr pos:start="93:32" pos:end="93:42"><sizeof pos:start="93:32" pos:end="93:42">sizeof<argument_list pos:start="93:38" pos:end="93:42">(<argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><name pos:start="93:39" pos:end="93:41">int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:45" pos:end="93:55"><expr pos:start="93:45" pos:end="93:55"><sizeof pos:start="93:45" pos:end="93:55">sizeof<argument_list pos:start="93:51" pos:end="93:55">(<argument pos:start="93:52" pos:end="93:54"><expr pos:start="93:52" pos:end="93:54"><name pos:start="93:52" pos:end="93:54">int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="95:21" pos:end="95:29"><expr pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:24">huff</name><operator pos:start="95:25" pos:end="95:25">.</operator><name pos:start="95:26" pos:end="95:29">bits</name></name></expr></argument>, <argument pos:start="95:32" pos:end="95:47"><expr pos:start="95:32" pos:end="95:47"><sizeof pos:start="95:32" pos:end="95:47">sizeof<argument_list pos:start="95:38" pos:end="95:47">(<argument pos:start="95:39" pos:end="95:46"><expr pos:start="95:39" pos:end="95:46"><name pos:start="95:39" pos:end="95:46">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:50" pos:end="95:65"><expr pos:start="95:50" pos:end="95:65"><sizeof pos:start="95:50" pos:end="95:65">sizeof<argument_list pos:start="95:56" pos:end="95:65">(<argument pos:start="95:57" pos:end="95:64"><expr pos:start="95:57" pos:end="95:64"><name pos:start="95:57" pos:end="95:64">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:68" pos:end="95:68"><expr pos:start="95:68" pos:end="95:68"><literal type="number" pos:start="95:68" pos:end="95:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="105:20"><if pos:start="97:9" pos:end="103:9">if<condition pos:start="97:11" pos:end="97:19">(<expr pos:start="97:12" pos:end="97:18"><name pos:start="97:12" pos:end="97:14">res</name> <operator pos:start="97:16" pos:end="97:16">&lt;</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>)</condition> <block pos:start="97:21" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:21">

            <expr_stmt pos:start="99:13" pos:end="99:73"><expr pos:start="99:13" pos:end="99:72"><call pos:start="99:13" pos:end="99:72"><name pos:start="99:13" pos:end="99:18">av_log</name><argument_list pos:start="99:19" pos:end="99:72">(<argument pos:start="99:20" pos:end="99:29"><expr pos:start="99:20" pos:end="99:29"><name pos:start="99:20" pos:end="99:29"><name pos:start="99:20" pos:end="99:22">ctx</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:29">avctx</name></name></expr></argument>, <argument pos:start="99:32" pos:end="99:43"><expr pos:start="99:32" pos:end="99:43"><name pos:start="99:32" pos:end="99:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:46" pos:end="99:71"><expr pos:start="99:46" pos:end="99:71"><literal type="string" pos:start="99:46" pos:end="99:71">"Cannot build VLC table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:21"><expr pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:15">res</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">-</operator><literal type="number" pos:start="101:20" pos:end="101:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="105:20">else<block type="pseudo" pos:start="105:13" pos:end="105:20"><block_content pos:start="105:13" pos:end="105:20">

            <expr_stmt pos:start="105:13" pos:end="105:20"><expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">res</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="107:9" pos:end="119:9"><if pos:start="107:9" pos:end="119:9">if<condition pos:start="107:11" pos:end="107:21">(<expr pos:start="107:12" pos:end="107:20"><name pos:start="107:12" pos:end="107:14">res</name> <operator pos:start="107:16" pos:end="107:17">!=</operator> <operator pos:start="107:19" pos:end="107:19">-</operator><literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>)</condition> <block pos:start="107:23" pos:end="119:9">{<block_content pos:start="109:13" pos:end="117:47">

            <expr_stmt pos:start="109:13" pos:end="109:39"><expr pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:16">code</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:22">bits</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:38"><name pos:start="109:26" pos:end="109:29">huff</name><operator pos:start="109:30" pos:end="109:30">.</operator><name pos:start="109:31" pos:end="109:38">max_bits</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:16">code</name><operator pos:start="111:17" pos:end="111:18">-&gt;</operator><name pos:start="111:19" pos:end="111:24">length</name></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <name pos:start="111:28" pos:end="111:39"><name pos:start="111:28" pos:end="111:31">huff</name><operator pos:start="111:32" pos:end="111:32">.</operator><name pos:start="111:33" pos:end="111:39">max_num</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:65"><expr pos:start="113:13" pos:end="113:64"><name pos:start="113:13" pos:end="113:24"><name pos:start="113:13" pos:end="113:16">code</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:24">recode</name></name> <operator pos:start="113:26" pos:end="113:26">=</operator> <call pos:start="113:28" pos:end="113:64"><name pos:start="113:28" pos:end="113:36">av_malloc</name><argument_list pos:start="113:37" pos:end="113:64">(<argument pos:start="113:38" pos:end="113:63"><expr pos:start="113:38" pos:end="113:63"><name pos:start="113:38" pos:end="113:49"><name pos:start="113:38" pos:end="113:41">code</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:49">length</name></name> <operator pos:start="113:51" pos:end="113:51">*</operator> <sizeof pos:start="113:53" pos:end="113:63">sizeof<argument_list pos:start="113:59" pos:end="113:63">(<argument pos:start="113:60" pos:end="113:62"><expr pos:start="113:60" pos:end="113:62"><name pos:start="113:60" pos:end="113:62">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="115:13" pos:end="117:47">for<control pos:start="115:16" pos:end="115:45">(<init pos:start="115:17" pos:end="115:22"><expr pos:start="115:17" pos:end="115:21"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <literal type="number" pos:start="115:21" pos:end="115:21">0</literal></expr>;</init> <condition pos:start="115:24" pos:end="115:40"><expr pos:start="115:24" pos:end="115:39"><name pos:start="115:24" pos:end="115:24">i</name> <operator pos:start="115:26" pos:end="115:26">&lt;</operator> <name pos:start="115:28" pos:end="115:39"><name pos:start="115:28" pos:end="115:31">code</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:39">length</name></name></expr>;</condition> <incr pos:start="115:42" pos:end="115:44"><expr pos:start="115:42" pos:end="115:44"><name pos:start="115:42" pos:end="115:42">i</name><operator pos:start="115:43" pos:end="115:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="117:17" pos:end="117:47"><block_content pos:start="117:17" pos:end="117:47">

                <expr_stmt pos:start="117:17" pos:end="117:47"><expr pos:start="117:17" pos:end="117:46"><name pos:start="117:17" pos:end="117:31"><name pos:start="117:17" pos:end="117:20">code</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:28">recode</name><index pos:start="117:29" pos:end="117:31">[<expr pos:start="117:30" pos:end="117:30"><name pos:start="117:30" pos:end="117:30">i</name></expr>]</index></name> <operator pos:start="117:33" pos:end="117:33">=</operator> <name pos:start="117:35" pos:end="117:46"><name pos:start="117:35" pos:end="117:38">huff</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:43">nums</name><index pos:start="117:44" pos:end="117:46">[<expr pos:start="117:45" pos:end="117:45"><name pos:start="117:45" pos:end="117:45">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="123:5" pos:end="123:31">/* free allocated memory */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:23"><expr pos:start="125:5" pos:end="125:22"><call pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:11">av_free</name><argument_list pos:start="125:12" pos:end="125:22">(<argument pos:start="125:13" pos:end="125:21"><expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:16">huff</name><operator pos:start="125:17" pos:end="125:17">.</operator><name pos:start="125:18" pos:end="125:21">nums</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:23"><expr pos:start="127:5" pos:end="127:22"><call pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:11">av_free</name><argument_list pos:start="127:12" pos:end="127:22">(<argument pos:start="127:13" pos:end="127:21"><expr pos:start="127:13" pos:end="127:21"><name pos:start="127:13" pos:end="127:21"><name pos:start="127:13" pos:end="127:16">huff</name><operator pos:start="127:17" pos:end="127:17">.</operator><name pos:start="127:18" pos:end="127:21">bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:23"><expr pos:start="129:5" pos:end="129:22"><call pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:11">av_free</name><argument_list pos:start="129:12" pos:end="129:22">(<argument pos:start="129:13" pos:end="129:21"><expr pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:16">huff</name><operator pos:start="129:17" pos:end="129:17">.</operator><name pos:start="129:18" pos:end="129:21">lens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="133:5" pos:end="133:15">return <expr pos:start="133:12" pos:end="133:14"><name pos:start="133:12" pos:end="133:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
