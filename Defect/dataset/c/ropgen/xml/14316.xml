<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14316.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">usb_serial_handle_data</name><parameter_list pos:start="1:35" pos:end="1:64">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:44">USBDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">dev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:60">USBPacket</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:5">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">USBSerialState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:45">= <expr pos:start="5:25" pos:end="5:45"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:39">USBSerialState</name> <operator pos:start="5:41" pos:end="5:41">*</operator><operator pos:start="5:42" pos:end="5:42">)</operator><name pos:start="5:43" pos:end="5:45">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:17">devep</name> <init pos:start="7:19" pos:end="7:29">= <expr pos:start="7:21" pos:end="7:29"><name pos:start="7:21" pos:end="7:29"><name pos:start="7:21" pos:end="7:21">p</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:25">ep</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:29">nr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:16">iovec</name></name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:21"><name pos:start="11:13" pos:end="11:18">header</name><index pos:start="11:19" pos:end="11:21">[<expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:20">first_len</name></decl>, <decl pos:start="13:23" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:25">len</name></decl>;</decl_stmt>



    <switch pos:start="17:5" pos:end="123:5">switch <condition pos:start="17:12" pos:end="17:19">(<expr pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:18"><name pos:start="17:13" pos:end="17:13">p</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:18">pid</name></name></expr>)</condition> <block pos:start="17:21" pos:end="123:5">{<block_content pos:start="19:5" pos:end="121:14">

    <case pos:start="19:5" pos:end="19:23">case <expr pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:22">USB_TOKEN_OUT</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="23:22"><if pos:start="21:9" pos:end="23:22">if <condition pos:start="21:12" pos:end="21:23">(<expr pos:start="21:13" pos:end="21:22"><name pos:start="21:13" pos:end="21:17">devep</name> <operator pos:start="21:19" pos:end="21:20">!=</operator> <literal type="number" pos:start="21:22" pos:end="21:22">2</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:22"><block_content pos:start="23:13" pos:end="23:22">

            <goto pos:start="23:13" pos:end="23:22">goto <name pos:start="23:18" pos:end="23:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <for pos:start="25:9" pos:end="31:9">for <control pos:start="25:13" pos:end="25:41">(<init pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:18"><name pos:start="25:14" pos:end="25:14">i</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</init> <condition pos:start="25:21" pos:end="25:36"><expr pos:start="25:21" pos:end="25:35"><name pos:start="25:21" pos:end="25:21">i</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <name pos:start="25:25" pos:end="25:35"><name pos:start="25:25" pos:end="25:25">p</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:30">iov</name><operator pos:start="25:31" pos:end="25:31">.</operator><name pos:start="25:32" pos:end="25:35">niov</name></name></expr>;</condition> <incr pos:start="25:38" pos:end="25:40"><expr pos:start="25:38" pos:end="25:40"><name pos:start="25:38" pos:end="25:38">i</name><operator pos:start="25:39" pos:end="25:40">++</operator></expr></incr>)</control> <block pos:start="25:43" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:66">

            <expr_stmt pos:start="27:13" pos:end="27:33"><expr pos:start="27:13" pos:end="27:32"><name pos:start="27:13" pos:end="27:15">iov</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:19">p</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:24">iov</name><operator pos:start="27:25" pos:end="27:25">.</operator><name pos:start="27:26" pos:end="27:28">iov</name></name> <operator pos:start="27:30" pos:end="27:30">+</operator> <name pos:start="27:32" pos:end="27:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:66"><expr pos:start="29:13" pos:end="29:65"><call pos:start="29:13" pos:end="29:65"><name pos:start="29:13" pos:end="29:29">qemu_chr_fe_write</name><argument_list pos:start="29:30" pos:end="29:65">(<argument pos:start="29:31" pos:end="29:35"><expr pos:start="29:31" pos:end="29:35"><name pos:start="29:31" pos:end="29:35"><name pos:start="29:31" pos:end="29:31">s</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:35">cs</name></name></expr></argument>, <argument pos:start="29:38" pos:end="29:50"><expr pos:start="29:38" pos:end="29:50"><name pos:start="29:38" pos:end="29:50"><name pos:start="29:38" pos:end="29:40">iov</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:50">iov_base</name></name></expr></argument>, <argument pos:start="29:53" pos:end="29:64"><expr pos:start="29:53" pos:end="29:64"><name pos:start="29:53" pos:end="29:64"><name pos:start="29:53" pos:end="29:55">iov</name><operator pos:start="29:56" pos:end="29:57">-&gt;</operator><name pos:start="29:58" pos:end="29:64">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="33:9" pos:end="33:39"><expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:9">p</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:24">actual_length</name></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <name pos:start="33:28" pos:end="33:38"><name pos:start="33:28" pos:end="33:28">p</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:33">iov</name><operator pos:start="33:34" pos:end="33:34">.</operator><name pos:start="33:35" pos:end="33:38">size</name></name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="35:14">break;</break>



    <case pos:start="39:5" pos:end="39:22">case <expr pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="41:9" pos:end="43:22"><if pos:start="41:9" pos:end="43:22">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:17">devep</name> <operator pos:start="41:19" pos:end="41:20">!=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">1</literal></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:22"><block_content pos:start="43:13" pos:end="43:22">

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:17">first_len</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:28">RECV_BUF</name> <operator pos:start="45:30" pos:end="45:30">-</operator> <name pos:start="45:32" pos:end="45:42"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:42">recv_ptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:26"><expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:11">len</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:25"><name pos:start="47:15" pos:end="47:15">p</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:20">iov</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:25">size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:18">&lt;=</operator> <literal type="number" pos:start="49:20" pos:end="49:20">2</literal></expr>)</condition> <block pos:start="49:23" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:18">

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:13">p</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">status</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:35">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:47"><expr pos:start="57:9" pos:end="57:46"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">header</name><index pos:start="57:15" pos:end="57:17">[<expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>]</index></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <call pos:start="57:21" pos:end="57:42"><name pos:start="57:21" pos:end="57:39">usb_get_modem_lines</name><argument_list pos:start="57:40" pos:end="57:42">(<argument pos:start="57:41" pos:end="57:41"><expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">s</name></expr></argument>)</argument_list></call> <operator pos:start="57:44" pos:end="57:44">|</operator> <literal type="number" pos:start="57:46" pos:end="57:46">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:45">/* We do not have the uart details */</comment>

        <comment type="block" pos:start="61:9" pos:end="61:33">/* handle serial break */</comment>

        <if_stmt pos:start="63:9" pos:end="77:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:59">(<expr pos:start="63:13" pos:end="63:58"><name pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:13">s</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:28">event_trigger</name></name> <operator pos:start="63:30" pos:end="63:31">&amp;&amp;</operator> <name pos:start="63:33" pos:end="63:48"><name pos:start="63:33" pos:end="63:33">s</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:48">event_trigger</name></name> <operator pos:start="63:50" pos:end="63:50">&amp;</operator> <name pos:start="63:52" pos:end="63:58">FTDI_BI</name></expr>)</condition> <block pos:start="63:61" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:18">

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:28">event_trigger</name></name> <operator pos:start="65:30" pos:end="65:31">&amp;=</operator> <operator pos:start="65:33" pos:end="65:33">~</operator><name pos:start="65:34" pos:end="65:40">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:18">header</name><index pos:start="67:19" pos:end="67:21">[<expr pos:start="67:20" pos:end="67:20"><literal type="number" pos:start="67:20" pos:end="67:20">1</literal></expr>]</index></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:31">FTDI_BI</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:42"><expr pos:start="69:13" pos:end="69:41"><call pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:27">usb_packet_copy</name><argument_list pos:start="69:28" pos:end="69:41">(<argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">p</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">header</name></expr></argument>, <argument pos:start="69:40" pos:end="69:40"><expr pos:start="69:40" pos:end="69:40"><literal type="number" pos:start="69:40" pos:end="69:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="77:9">else <block pos:start="73:16" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:26">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:21"><name pos:start="75:13" pos:end="75:18">header</name><index pos:start="75:19" pos:end="75:21">[<expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">1</literal></expr>]</index></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:17"><expr pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:11">len</name> <operator pos:start="79:13" pos:end="79:14">-=</operator> <literal type="number" pos:start="79:16" pos:end="79:16">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="83:31"><if pos:start="81:9" pos:end="83:31">if <condition pos:start="81:12" pos:end="81:31">(<expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:15">len</name> <operator pos:start="81:17" pos:end="81:17">&gt;</operator> <name pos:start="81:19" pos:end="81:30"><name pos:start="81:19" pos:end="81:19">s</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:30">recv_used</name></name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:31"><block_content pos:start="83:13" pos:end="83:31">

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:15">len</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:30"><name pos:start="83:19" pos:end="83:19">s</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:30">recv_used</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:17">(<expr pos:start="85:13" pos:end="85:16"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:16">len</name></expr>)</condition> <block pos:start="85:19" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:18">

            <expr_stmt pos:start="87:13" pos:end="87:36"><expr pos:start="87:13" pos:end="87:35"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:13">p</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:21">status</name></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:35">USB_RET_NAK</name></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="93:9" pos:end="95:28"><if pos:start="93:9" pos:end="95:28">if <condition pos:start="93:12" pos:end="93:28">(<expr pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:21">first_len</name> <operator pos:start="93:23" pos:end="93:23">&gt;</operator> <name pos:start="93:25" pos:end="93:27">len</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:28"><block_content pos:start="95:13" pos:end="95:28">

            <expr_stmt pos:start="95:13" pos:end="95:28"><expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:21">first_len</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:27">len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:38"><expr pos:start="97:9" pos:end="97:37"><call pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:23">usb_packet_copy</name><argument_list pos:start="97:24" pos:end="97:37">(<argument pos:start="97:25" pos:end="97:25"><expr pos:start="97:25" pos:end="97:25"><name pos:start="97:25" pos:end="97:25">p</name></expr></argument>, <argument pos:start="97:28" pos:end="97:33"><expr pos:start="97:28" pos:end="97:33"><name pos:start="97:28" pos:end="97:33">header</name></expr></argument>, <argument pos:start="97:36" pos:end="97:36"><expr pos:start="97:36" pos:end="97:36"><literal type="number" pos:start="97:36" pos:end="97:36">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:65"><expr pos:start="99:9" pos:end="99:64"><call pos:start="99:9" pos:end="99:64"><name pos:start="99:9" pos:end="99:23">usb_packet_copy</name><argument_list pos:start="99:24" pos:end="99:64">(<argument pos:start="99:25" pos:end="99:25"><expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">p</name></expr></argument>, <argument pos:start="99:28" pos:end="99:52"><expr pos:start="99:28" pos:end="99:52"><name pos:start="99:28" pos:end="99:38"><name pos:start="99:28" pos:end="99:28">s</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:38">recv_buf</name></name> <operator pos:start="99:40" pos:end="99:40">+</operator> <name pos:start="99:42" pos:end="99:52"><name pos:start="99:42" pos:end="99:42">s</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:52">recv_ptr</name></name></expr></argument>, <argument pos:start="99:55" pos:end="99:63"><expr pos:start="99:55" pos:end="99:63"><name pos:start="99:55" pos:end="99:63">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="103:61"><if pos:start="101:9" pos:end="103:61">if <condition pos:start="101:12" pos:end="101:28">(<expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:15">len</name> <operator pos:start="101:17" pos:end="101:17">&gt;</operator> <name pos:start="101:19" pos:end="101:27">first_len</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:61"><block_content pos:start="103:13" pos:end="103:61">

            <expr_stmt pos:start="103:13" pos:end="103:61"><expr pos:start="103:13" pos:end="103:60"><call pos:start="103:13" pos:end="103:60"><name pos:start="103:13" pos:end="103:27">usb_packet_copy</name><argument_list pos:start="103:28" pos:end="103:60">(<argument pos:start="103:29" pos:end="103:29"><expr pos:start="103:29" pos:end="103:29"><name pos:start="103:29" pos:end="103:29">p</name></expr></argument>, <argument pos:start="103:32" pos:end="103:42"><expr pos:start="103:32" pos:end="103:42"><name pos:start="103:32" pos:end="103:42"><name pos:start="103:32" pos:end="103:32">s</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:42">recv_buf</name></name></expr></argument>, <argument pos:start="103:45" pos:end="103:59"><expr pos:start="103:45" pos:end="103:59"><name pos:start="103:45" pos:end="103:47">len</name> <operator pos:start="103:49" pos:end="103:49">-</operator> <name pos:start="103:51" pos:end="103:59">first_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:20">recv_used</name></name> <operator pos:start="105:22" pos:end="105:23">-=</operator> <name pos:start="105:25" pos:end="105:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:19">recv_ptr</name></name> <operator pos:start="107:21" pos:end="107:21">=</operator> <operator pos:start="107:23" pos:end="107:23">(</operator><name pos:start="107:24" pos:end="107:34"><name pos:start="107:24" pos:end="107:24">s</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:34">recv_ptr</name></name> <operator pos:start="107:36" pos:end="107:36">+</operator> <name pos:start="107:38" pos:end="107:40">len</name><operator pos:start="107:41" pos:end="107:41">)</operator> <operator pos:start="107:43" pos:end="107:43">%</operator> <name pos:start="107:45" pos:end="107:52">RECV_BUF</name></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>



    <default pos:start="113:5" pos:end="113:12">default:</default>

        <expr_stmt pos:start="115:9" pos:end="115:31"><expr pos:start="115:9" pos:end="115:30"><call pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:15">DPRINTF</name><argument_list pos:start="115:16" pos:end="115:30">(<argument pos:start="115:17" pos:end="115:29"><expr pos:start="115:17" pos:end="115:29"><literal type="string" pos:start="115:17" pos:end="115:29">"Bad token\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="117:5" pos:end="117:9"><name pos:start="117:5" pos:end="117:8">fail</name>:</label>

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:9">p</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:17">status</name></name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:33">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
