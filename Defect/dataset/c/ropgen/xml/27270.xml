<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27270.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">test_visitor_in_struct</name><parameter_list pos:start="1:35" pos:end="3:54">(<parameter pos:start="1:36" pos:end="1:61"><decl pos:start="1:36" pos:end="1:61"><type pos:start="1:36" pos:end="1:61"><name pos:start="1:36" pos:end="1:55">TestInputVisitorData</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:45">void</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:53">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="31:1">{<block_content pos:start="7:5" pos:end="29:14">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TestStruct</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">Visitor</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">v</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:94"><expr pos:start="13:5" pos:end="13:93"><name pos:start="13:5" pos:end="13:5">v</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <call pos:start="13:9" pos:end="13:93"><name pos:start="13:9" pos:end="13:31">visitor_input_test_init</name><argument_list pos:start="13:32" pos:end="13:93">(<argument pos:start="13:33" pos:end="13:36"><expr pos:start="13:33" pos:end="13:36"><name pos:start="13:33" pos:end="13:36">data</name></expr></argument>, <argument pos:start="13:39" pos:end="13:92"><expr pos:start="13:39" pos:end="13:92"><literal type="string" pos:start="13:39" pos:end="13:92">"{ 'integer': -42, 'boolean': true, 'string': 'foo' }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:53"><expr pos:start="17:5" pos:end="17:52"><call pos:start="17:5" pos:end="17:52"><name pos:start="17:5" pos:end="17:25">visit_type_TestStruct</name><argument_list pos:start="17:26" pos:end="17:52">(<argument pos:start="17:27" pos:end="17:27"><expr pos:start="17:27" pos:end="17:27"><name pos:start="17:27" pos:end="17:27">v</name></expr></argument>, <argument pos:start="17:30" pos:end="17:33"><expr pos:start="17:30" pos:end="17:33"><name pos:start="17:30" pos:end="17:33">NULL</name></expr></argument>, <argument pos:start="17:36" pos:end="17:37"><expr pos:start="17:36" pos:end="17:37"><operator pos:start="17:36" pos:end="17:36">&amp;</operator><name pos:start="17:37" pos:end="17:37">p</name></expr></argument>, <argument pos:start="17:40" pos:end="17:51"><expr pos:start="17:40" pos:end="17:51"><operator pos:start="17:40" pos:end="17:40">&amp;</operator><name pos:start="17:41" pos:end="17:51">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><call pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:19">g_assert_cmpint</name><argument_list pos:start="19:20" pos:end="19:40">(<argument pos:start="19:21" pos:end="19:30"><expr pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:30"><name pos:start="19:21" pos:end="19:21">p</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:30">integer</name></name></expr></argument>, <argument pos:start="19:33" pos:end="19:34"><expr pos:start="19:33" pos:end="19:34"><operator pos:start="19:33" pos:end="19:34">==</operator></expr></argument>, <argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><operator pos:start="19:37" pos:end="19:37">-</operator><literal type="number" pos:start="19:38" pos:end="19:39">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><call pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:12">g_assert</name><argument_list pos:start="21:13" pos:end="21:32">(<argument pos:start="21:14" pos:end="21:31"><expr pos:start="21:14" pos:end="21:31"><name pos:start="21:14" pos:end="21:23"><name pos:start="21:14" pos:end="21:14">p</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">boolean</name></name> <operator pos:start="21:25" pos:end="21:26">==</operator> <name pos:start="21:28" pos:end="21:31">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:19">g_assert_cmpstr</name><argument_list pos:start="23:20" pos:end="23:41">(<argument pos:start="23:21" pos:end="23:29"><expr pos:start="23:21" pos:end="23:29"><name pos:start="23:21" pos:end="23:29"><name pos:start="23:21" pos:end="23:21">p</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:29">string</name></name></expr></argument>, <argument pos:start="23:32" pos:end="23:33"><expr pos:start="23:32" pos:end="23:33"><operator pos:start="23:32" pos:end="23:33">==</operator></expr></argument>, <argument pos:start="23:36" pos:end="23:40"><expr pos:start="23:36" pos:end="23:40"><literal type="string" pos:start="23:36" pos:end="23:40">"foo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><call pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:10">g_free</name><argument_list pos:start="27:11" pos:end="27:21">(<argument pos:start="27:12" pos:end="27:20"><expr pos:start="27:12" pos:end="27:20"><name pos:start="27:12" pos:end="27:20"><name pos:start="27:12" pos:end="27:12">p</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:20">string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:14"><expr pos:start="29:5" pos:end="29:13"><call pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:10">g_free</name><argument_list pos:start="29:11" pos:end="29:13">(<argument pos:start="29:12" pos:end="29:12"><expr pos:start="29:12" pos:end="29:12"><name pos:start="29:12" pos:end="29:12">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
