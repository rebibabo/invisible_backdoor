<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16910.c" pos:tabs="8"><function pos:start="1:1" pos:end="503:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name> <parameter_list pos:start="1:31" pos:end="11:53">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:41">ram_addr_t</name></type> <name pos:start="1:43" pos:end="1:50">ram_size</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:54">boot_device</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:58"><decl pos:start="5:32" pos:end="5:58"><type pos:start="5:32" pos:end="5:58"><specifier pos:start="5:32" pos:end="5:36">const</specifier> <name pos:start="5:38" pos:end="5:41">char</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:58">kernel_filename</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:57"><decl pos:start="7:32" pos:end="7:57"><type pos:start="7:32" pos:end="7:57"><specifier pos:start="7:32" pos:end="7:36">const</specifier> <name pos:start="7:38" pos:end="7:41">char</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:57">kernel_cmdline</name></decl></parameter>,

                               <parameter pos:start="9:32" pos:end="9:58"><decl pos:start="9:32" pos:end="9:58"><type pos:start="9:32" pos:end="9:58"><specifier pos:start="9:32" pos:end="9:36">const</specifier> <name pos:start="9:38" pos:end="9:41">char</name> <modifier pos:start="9:43" pos:end="9:43">*</modifier></type><name pos:start="9:44" pos:end="9:58">initrd_filename</name></decl></parameter>,

                               <parameter pos:start="11:32" pos:end="11:52"><decl pos:start="11:32" pos:end="11:52"><type pos:start="11:32" pos:end="11:52"><specifier pos:start="11:32" pos:end="11:36">const</specifier> <name pos:start="11:38" pos:end="11:41">char</name> <modifier pos:start="11:43" pos:end="11:43">*</modifier></type><name pos:start="11:44" pos:end="11:52">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="503:1">{<block_content pos:start="15:5" pos:end="501:52">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">qemu_irq</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">pic</name></decl>, <decl pos:start="19:20" pos:end="19:34"><type ref="prev" pos:start="19:5" pos:end="19:14"><modifier pos:start="19:20" pos:end="19:20">*</modifier><modifier pos:start="19:21" pos:end="19:21">*</modifier></type><name pos:start="19:22" pos:end="19:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:18">linux_boot</name></decl>, <decl pos:start="21:21" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:21" pos:end="21:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:39"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:25">ram_offset</name></decl>, <decl pos:start="23:28" pos:end="23:38"><type ref="prev" pos:start="23:5" pos:end="23:14"/><name pos:start="23:28" pos:end="23:38">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:56"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:24">kernel_base</name></decl>, <decl pos:start="25:27" pos:end="25:37"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:27" pos:end="25:37">initrd_base</name></decl>, <decl pos:start="25:40" pos:end="25:55"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:40" pos:end="25:51">cmdline_base</name> <init pos:start="25:53" pos:end="25:55">= <expr pos:start="25:55" pos:end="25:55"><literal type="number" pos:start="25:55" pos:end="25:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int32_t</name></type> <name pos:start="27:13" pos:end="27:23">kernel_size</name></decl>, <decl pos:start="27:26" pos:end="27:36"><type ref="prev" pos:start="27:5" pos:end="27:11"/><name pos:start="27:26" pos:end="27:36">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">PCIBus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:19">MacIONVRAMState</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:18"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:49"><decl pos:start="35:5" pos:end="35:25"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">MemoryRegion</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:25">pic_mem</name></decl>, <decl pos:start="35:28" pos:end="35:37"><type ref="prev" pos:start="35:5" pos:end="35:18"><modifier pos:start="35:28" pos:end="35:28">*</modifier></type><name pos:start="35:29" pos:end="35:37">dbdma_mem</name></decl>, <decl pos:start="35:40" pos:end="35:48"><type ref="prev" pos:start="35:5" pos:end="35:18"><modifier pos:start="35:40" pos:end="35:40">*</modifier></type><name pos:start="35:41" pos:end="35:48">cuda_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:76"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:16">MemoryRegion</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:26">escc_mem</name></decl>, <decl pos:start="37:29" pos:end="37:62"><type ref="prev" pos:start="37:5" pos:end="37:18"><modifier pos:start="37:29" pos:end="37:29">*</modifier></type><name pos:start="37:30" pos:end="37:37">escc_bar</name> <init pos:start="37:39" pos:end="37:62">= <expr pos:start="37:41" pos:end="37:62"><call pos:start="37:41" pos:end="37:62"><name pos:start="37:41" pos:end="37:45">g_new</name><argument_list pos:start="37:46" pos:end="37:62">(<argument pos:start="37:47" pos:end="37:58"><expr pos:start="37:47" pos:end="37:58"><name pos:start="37:47" pos:end="37:58">MemoryRegion</name></expr></argument>, <argument pos:start="37:61" pos:end="37:61"><expr pos:start="37:61" pos:end="37:61"><literal type="number" pos:start="37:61" pos:end="37:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="37:65" pos:end="37:75"><type ref="prev" pos:start="37:5" pos:end="37:18"><modifier pos:start="37:65" pos:end="37:65">*</modifier></type><name pos:start="37:66" pos:end="37:75"><name pos:start="37:66" pos:end="37:72">ide_mem</name><index pos:start="37:73" pos:end="37:75">[<expr pos:start="37:74" pos:end="37:74"><literal type="number" pos:start="37:74" pos:end="37:74">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:29"><decl pos:start="39:5" pos:end="39:28"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:12">uint16_t</name></type> <name pos:start="39:14" pos:end="39:28">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:46"><decl pos:start="41:5" pos:end="41:45"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">DriveInfo</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:45"><name pos:start="41:16" pos:end="41:17">hd</name><index pos:start="41:18" pos:end="41:45">[<expr pos:start="41:19" pos:end="41:44"><name pos:start="41:19" pos:end="41:29">MAX_IDE_BUS</name> <operator pos:start="41:31" pos:end="41:31">*</operator> <name pos:start="41:33" pos:end="41:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:17"><decl pos:start="43:5" pos:end="43:16"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:8">void</name> <modifier pos:start="43:10" pos:end="43:10">*</modifier></type><name pos:start="43:11" pos:end="43:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:16"><decl pos:start="45:5" pos:end="45:15"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:8">void</name> <modifier pos:start="45:10" pos:end="45:10">*</modifier></type><name pos:start="45:11" pos:end="45:15">dbdma</name></decl>;</decl_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:14">linux_boot</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <operator pos:start="49:18" pos:end="49:18">(</operator><name pos:start="49:19" pos:end="49:33">kernel_filename</name> <operator pos:start="49:35" pos:end="49:36">!=</operator> <name pos:start="49:38" pos:end="49:41">NULL</name><operator pos:start="49:42" pos:end="49:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:19">/* init CPUs */</comment>

    <if_stmt pos:start="55:5" pos:end="57:25"><if pos:start="55:5" pos:end="57:25">if <condition pos:start="55:8" pos:end="55:26">(<expr pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:17">cpu_model</name> <operator pos:start="55:19" pos:end="55:20">==</operator> <name pos:start="55:22" pos:end="55:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:25"><block_content pos:start="57:9" pos:end="57:25">

        <expr_stmt pos:start="57:9" pos:end="57:25"><expr pos:start="57:9" pos:end="57:24"><name pos:start="57:9" pos:end="57:17">cpu_model</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="string" pos:start="57:21" pos:end="57:24">"G3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="59:5" pos:end="77:5">for <control pos:start="59:9" pos:end="59:34">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:29"><expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <name pos:start="59:21" pos:end="59:28">smp_cpus</name></expr>;</condition> <incr pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:31">i</name><operator pos:start="59:32" pos:end="59:33">++</operator></expr></incr>)</control> <block pos:start="59:36" pos:end="77:5">{<block_content pos:start="61:9" pos:end="75:64">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:11">env</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:33"><name pos:start="61:15" pos:end="61:22">cpu_init</name><argument_list pos:start="61:23" pos:end="61:33">(<argument pos:start="61:24" pos:end="61:32"><expr pos:start="61:24" pos:end="61:32"><name pos:start="61:24" pos:end="61:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:17">(<expr pos:start="63:13" pos:end="63:16"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:16">env</name></expr>)</condition> <block pos:start="63:19" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:20">

            <expr_stmt pos:start="65:13" pos:end="65:71"><expr pos:start="65:13" pos:end="65:70"><call pos:start="65:13" pos:end="65:70"><name pos:start="65:13" pos:end="65:19">fprintf</name><argument_list pos:start="65:20" pos:end="65:70">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">stderr</name></expr></argument>, <argument pos:start="65:29" pos:end="65:69"><expr pos:start="65:29" pos:end="65:69"><literal type="string" pos:start="65:29" pos:end="65:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">exit</name><argument_list pos:start="67:17" pos:end="67:19">(<argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:49">/* Set time-base frequency to 16.6 Mhz */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:42"><expr pos:start="73:9" pos:end="73:41"><call pos:start="73:9" pos:end="73:41"><name pos:start="73:9" pos:end="73:23">cpu_ppc_tb_init</name><argument_list pos:start="73:24" pos:end="73:41">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">env</name></expr></argument>,  <argument pos:start="73:31" pos:end="73:40"><expr pos:start="73:31" pos:end="73:40"><literal type="number" pos:start="73:31" pos:end="73:40">16600000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:64"><expr pos:start="75:9" pos:end="75:63"><call pos:start="75:9" pos:end="75:63"><name pos:start="75:9" pos:end="75:27">qemu_register_reset</name><argument_list pos:start="75:28" pos:end="75:63">(<argument pos:start="75:29" pos:end="75:57"><expr pos:start="75:29" pos:end="75:57"><operator pos:start="75:29" pos:end="75:29">(</operator><name pos:start="75:30" pos:end="75:45">QEMUResetHandler</name><operator pos:start="75:46" pos:end="75:46">*</operator><operator pos:start="75:47" pos:end="75:47">)</operator><operator pos:start="75:48" pos:end="75:48">&amp;</operator><name pos:start="75:49" pos:end="75:57">cpu_reset</name></expr></argument>, <argument pos:start="75:60" pos:end="75:62"><expr pos:start="75:60" pos:end="75:62"><name pos:start="75:60" pos:end="75:62">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="81:5" pos:end="81:22">/* allocate RAM */</comment>

    <if_stmt pos:start="83:5" pos:end="93:5"><if pos:start="83:5" pos:end="93:5">if <condition pos:start="83:8" pos:end="83:32">(<expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:16">ram_size</name> <operator pos:start="83:18" pos:end="83:18">&gt;</operator> <operator pos:start="83:20" pos:end="83:20">(</operator><literal type="number" pos:start="83:21" pos:end="83:24">2047</literal> <operator pos:start="83:26" pos:end="83:27">&lt;&lt;</operator> <literal type="number" pos:start="83:29" pos:end="83:30">20</literal><operator pos:start="83:31" pos:end="83:31">)</operator></expr>)</condition> <block pos:start="83:34" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:16">

        <expr_stmt pos:start="85:9" pos:end="89:54"><expr pos:start="85:9" pos:end="89:53"><call pos:start="85:9" pos:end="89:53"><name pos:start="85:9" pos:end="85:15">fprintf</name><argument_list pos:start="85:16" pos:end="89:53">(<argument pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">stderr</name></expr></argument>,

                <argument pos:start="87:17" pos:end="87:82"><expr pos:start="87:17" pos:end="87:82"><literal type="string" pos:start="87:17" pos:end="87:82">"qemu: Too much memory for this machine: %d MB, maximum 2047 MB\n"</literal></expr></argument>,

                <argument pos:start="89:17" pos:end="89:52"><expr pos:start="89:17" pos:end="89:52"><operator pos:start="89:17" pos:end="89:17">(</operator><operator pos:start="89:18" pos:end="89:18">(</operator><name pos:start="89:19" pos:end="89:26">unsigned</name> <name pos:start="89:28" pos:end="89:30">int</name><operator pos:start="89:31" pos:end="89:31">)</operator><name pos:start="89:32" pos:end="89:39">ram_size</name> <operator pos:start="89:41" pos:end="89:41">/</operator> <operator pos:start="89:43" pos:end="89:43">(</operator><literal type="number" pos:start="89:44" pos:end="89:44">1</literal> <operator pos:start="89:46" pos:end="89:47">&lt;&lt;</operator> <literal type="number" pos:start="89:49" pos:end="89:50">20</literal><operator pos:start="89:51" pos:end="89:51">)</operator><operator pos:start="89:52" pos:end="89:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:16"><expr pos:start="91:9" pos:end="91:15"><call pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">exit</name><argument_list pos:start="91:13" pos:end="91:15">(<argument pos:start="91:14" pos:end="91:14"><expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:68"><expr pos:start="97:5" pos:end="97:67"><name pos:start="97:5" pos:end="97:14">ram_offset</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <call pos:start="97:18" pos:end="97:67"><name pos:start="97:18" pos:end="97:31">qemu_ram_alloc</name><argument_list pos:start="97:32" pos:end="97:67">(<argument pos:start="97:33" pos:end="97:36"><expr pos:start="97:33" pos:end="97:36"><name pos:start="97:33" pos:end="97:36">NULL</name></expr></argument>, <argument pos:start="97:39" pos:end="97:56"><expr pos:start="97:39" pos:end="97:56"><literal type="string" pos:start="97:39" pos:end="97:56">"ppc_heathrow.ram"</literal></expr></argument>, <argument pos:start="97:59" pos:end="97:66"><expr pos:start="97:59" pos:end="97:66"><name pos:start="97:59" pos:end="97:66">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:58"><expr pos:start="99:5" pos:end="99:57"><call pos:start="99:5" pos:end="99:57"><name pos:start="99:5" pos:end="99:32">cpu_register_physical_memory</name><argument_list pos:start="99:33" pos:end="99:57">(<argument pos:start="99:34" pos:end="99:34"><expr pos:start="99:34" pos:end="99:34"><literal type="number" pos:start="99:34" pos:end="99:34">0</literal></expr></argument>, <argument pos:start="99:37" pos:end="99:44"><expr pos:start="99:37" pos:end="99:44"><name pos:start="99:37" pos:end="99:44">ram_size</name></expr></argument>, <argument pos:start="99:47" pos:end="99:56"><expr pos:start="99:47" pos:end="99:56"><name pos:start="99:47" pos:end="99:56">ram_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:71"><expr pos:start="105:5" pos:end="105:70"><name pos:start="105:5" pos:end="105:15">bios_offset</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:70"><name pos:start="105:19" pos:end="105:32">qemu_ram_alloc</name><argument_list pos:start="105:33" pos:end="105:70">(<argument pos:start="105:34" pos:end="105:37"><expr pos:start="105:34" pos:end="105:37"><name pos:start="105:34" pos:end="105:37">NULL</name></expr></argument>, <argument pos:start="105:40" pos:end="105:58"><expr pos:start="105:40" pos:end="105:58"><literal type="string" pos:start="105:40" pos:end="105:58">"ppc_heathrow.bios"</literal></expr></argument>, <argument pos:start="105:61" pos:end="105:69"><expr pos:start="105:61" pos:end="105:69"><name pos:start="105:61" pos:end="105:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="109:34"><if pos:start="107:5" pos:end="109:34">if <condition pos:start="107:8" pos:end="107:26">(<expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:17">bios_name</name> <operator pos:start="107:19" pos:end="107:20">==</operator> <name pos:start="107:22" pos:end="107:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:34"><block_content pos:start="109:9" pos:end="109:34">

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:17">bios_name</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:62"><expr pos:start="111:5" pos:end="111:61"><name pos:start="111:5" pos:end="111:12">filename</name> <operator pos:start="111:14" pos:end="111:14">=</operator> <call pos:start="111:16" pos:end="111:61"><name pos:start="111:16" pos:end="111:29">qemu_find_file</name><argument_list pos:start="111:30" pos:end="111:61">(<argument pos:start="111:31" pos:end="111:49"><expr pos:start="111:31" pos:end="111:49"><name pos:start="111:31" pos:end="111:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="111:52" pos:end="111:60"><expr pos:start="111:52" pos:end="111:60"><name pos:start="111:52" pos:end="111:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:81"><expr pos:start="113:5" pos:end="113:80"><call pos:start="113:5" pos:end="113:80"><name pos:start="113:5" pos:end="113:32">cpu_register_physical_memory</name><argument_list pos:start="113:33" pos:end="113:80">(<argument pos:start="113:34" pos:end="113:42"><expr pos:start="113:34" pos:end="113:42"><name pos:start="113:34" pos:end="113:42">PROM_ADDR</name></expr></argument>, <argument pos:start="113:45" pos:end="113:53"><expr pos:start="113:45" pos:end="113:53"><name pos:start="113:45" pos:end="113:53">BIOS_SIZE</name></expr></argument>, <argument pos:start="113:56" pos:end="113:79"><expr pos:start="113:56" pos:end="113:79"><name pos:start="113:56" pos:end="113:66">bios_offset</name> <operator pos:start="113:68" pos:end="113:68">|</operator> <name pos:start="113:70" pos:end="113:79">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="127:5">if <condition pos:start="119:8" pos:end="119:17">(<expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:16">filename</name></expr>)</condition> <block pos:start="119:19" pos:end="127:5">{<block_content pos:start="121:9" pos:end="125:25">

        <expr_stmt pos:start="121:9" pos:end="123:48"><expr pos:start="121:9" pos:end="123:47"><name pos:start="121:9" pos:end="121:17">bios_size</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <call pos:start="121:21" pos:end="123:47"><name pos:start="121:21" pos:end="121:28">load_elf</name><argument_list pos:start="121:29" pos:end="123:47">(<argument pos:start="121:30" pos:end="121:37"><expr pos:start="121:30" pos:end="121:37"><name pos:start="121:30" pos:end="121:37">filename</name></expr></argument>, <argument pos:start="121:40" pos:end="121:40"><expr pos:start="121:40" pos:end="121:40"><literal type="number" pos:start="121:40" pos:end="121:40">0</literal></expr></argument>, <argument pos:start="121:43" pos:end="121:46"><expr pos:start="121:43" pos:end="121:46"><name pos:start="121:43" pos:end="121:46">NULL</name></expr></argument>, <argument pos:start="121:49" pos:end="121:52"><expr pos:start="121:49" pos:end="121:52"><name pos:start="121:49" pos:end="121:52">NULL</name></expr></argument>, <argument pos:start="121:55" pos:end="121:58"><expr pos:start="121:55" pos:end="121:58"><name pos:start="121:55" pos:end="121:58">NULL</name></expr></argument>, <argument pos:start="121:61" pos:end="121:64"><expr pos:start="121:61" pos:end="121:64"><name pos:start="121:61" pos:end="121:64">NULL</name></expr></argument>,

                             <argument pos:start="123:30" pos:end="123:30"><expr pos:start="123:30" pos:end="123:30"><literal type="number" pos:start="123:30" pos:end="123:30">1</literal></expr></argument>, <argument pos:start="123:33" pos:end="123:43"><expr pos:start="123:33" pos:end="123:43"><name pos:start="123:33" pos:end="123:43">ELF_MACHINE</name></expr></argument>, <argument pos:start="123:46" pos:end="123:46"><expr pos:start="123:46" pos:end="123:46"><literal type="number" pos:start="123:46" pos:end="123:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:25"><expr pos:start="125:9" pos:end="125:24"><call pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:14">g_free</name><argument_list pos:start="125:15" pos:end="125:24">(<argument pos:start="125:16" pos:end="125:23"><expr pos:start="125:16" pos:end="125:23"><name pos:start="125:16" pos:end="125:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="131:5">else <block pos:start="127:12" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:23">

        <expr_stmt pos:start="129:9" pos:end="129:23"><expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:17">bios_size</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <operator pos:start="129:21" pos:end="129:21">-</operator><literal type="number" pos:start="129:22" pos:end="129:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:47">(<expr pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:17">bios_size</name> <argument_list type="generic" pos:start="133:19" pos:end="133:36">&lt; <argument pos:start="133:21" pos:end="133:34"><expr pos:start="133:21" pos:end="133:34"><literal type="number" pos:start="133:21" pos:end="133:21">0</literal> <operator pos:start="133:23" pos:end="133:24">||</operator> <name pos:start="133:26" pos:end="133:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="133:38" pos:end="133:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="133:49" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:16">

        <expr_stmt pos:start="135:9" pos:end="135:72"><expr pos:start="135:9" pos:end="135:71"><call pos:start="135:9" pos:end="135:71"><name pos:start="135:9" pos:end="135:16">hw_error</name><argument_list pos:start="135:17" pos:end="135:71">(<argument pos:start="135:18" pos:end="135:59"><expr pos:start="135:18" pos:end="135:59"><literal type="string" pos:start="135:18" pos:end="135:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="135:62" pos:end="135:70"><expr pos:start="135:62" pos:end="135:70"><name pos:start="135:62" pos:end="135:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="281:5"><if pos:start="143:5" pos:end="227:5">if <condition pos:start="143:8" pos:end="143:19">(<expr pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:18">linux_boot</name></expr>)</condition> <block pos:start="143:21" pos:end="227:5">{<block_content pos:start="145:9" pos:end="225:30">

        <decl_stmt pos:start="145:9" pos:end="145:29"><decl pos:start="145:9" pos:end="145:28"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint64_t</name></type> <name pos:start="145:18" pos:end="145:24">lowaddr</name> <init pos:start="145:26" pos:end="145:28">= <expr pos:start="145:28" pos:end="145:28"><literal type="number" pos:start="145:28" pos:end="145:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="152:0"><decl pos:start="147:9" pos:end="147:24"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="151:1" pos:end="151:19">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="153:9" pos:end="156:0"><expr pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:20">bswap_needed</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <literal type="number" pos:start="153:24" pos:end="153:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="155:1" pos:end="155:5">#<cpp:directive pos:start="155:2" pos:end="155:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="157:9" pos:end="160:0"><expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:20">bswap_needed</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="161:9" pos:end="161:39"><expr pos:start="161:9" pos:end="161:38"><name pos:start="161:9" pos:end="161:19">kernel_base</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <name pos:start="161:23" pos:end="161:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="165:72"><expr pos:start="163:9" pos:end="165:71"><name pos:start="163:9" pos:end="163:19">kernel_size</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <call pos:start="163:23" pos:end="165:71"><name pos:start="163:23" pos:end="163:30">load_elf</name><argument_list pos:start="163:31" pos:end="165:71">(<argument pos:start="163:32" pos:end="163:46"><expr pos:start="163:32" pos:end="163:46"><name pos:start="163:32" pos:end="163:46">kernel_filename</name></expr></argument>, <argument pos:start="163:49" pos:end="163:72"><expr pos:start="163:49" pos:end="163:72"><name pos:start="163:49" pos:end="163:72">translate_kernel_address</name></expr></argument>, <argument pos:start="163:75" pos:end="163:78"><expr pos:start="163:75" pos:end="163:78"><name pos:start="163:75" pos:end="163:78">NULL</name></expr></argument>,

                               <argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">NULL</name></expr></argument>, <argument pos:start="165:38" pos:end="165:45"><expr pos:start="165:38" pos:end="165:45"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:45">lowaddr</name></expr></argument>, <argument pos:start="165:48" pos:end="165:51"><expr pos:start="165:48" pos:end="165:51"><name pos:start="165:48" pos:end="165:51">NULL</name></expr></argument>, <argument pos:start="165:54" pos:end="165:54"><expr pos:start="165:54" pos:end="165:54"><literal type="number" pos:start="165:54" pos:end="165:54">1</literal></expr></argument>, <argument pos:start="165:57" pos:end="165:67"><expr pos:start="165:57" pos:end="165:67"><name pos:start="165:57" pos:end="165:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="165:70" pos:end="165:70"><expr pos:start="165:70" pos:end="165:70"><literal type="number" pos:start="165:70" pos:end="165:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="173:54"><if pos:start="167:9" pos:end="173:54">if <condition pos:start="167:12" pos:end="167:28">(<expr pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:23">kernel_size</name> <operator pos:start="167:25" pos:end="167:25">&lt;</operator> <literal type="number" pos:start="167:27" pos:end="167:27">0</literal></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="173:54"><block_content pos:start="169:13" pos:end="173:54">

            <expr_stmt pos:start="169:13" pos:end="173:54"><expr pos:start="169:13" pos:end="173:53"><name pos:start="169:13" pos:end="169:23">kernel_size</name> <operator pos:start="169:25" pos:end="169:25">=</operator> <call pos:start="169:27" pos:end="173:53"><name pos:start="169:27" pos:end="169:35">load_aout</name><argument_list pos:start="169:36" pos:end="173:53">(<argument pos:start="169:37" pos:end="169:51"><expr pos:start="169:37" pos:end="169:51"><name pos:start="169:37" pos:end="169:51">kernel_filename</name></expr></argument>, <argument pos:start="169:54" pos:end="169:64"><expr pos:start="169:54" pos:end="169:64"><name pos:start="169:54" pos:end="169:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="171:37" pos:end="171:58"><expr pos:start="171:37" pos:end="171:58"><name pos:start="171:37" pos:end="171:44">ram_size</name> <operator pos:start="171:46" pos:end="171:46">-</operator> <name pos:start="171:48" pos:end="171:58">kernel_base</name></expr></argument>, <argument pos:start="171:61" pos:end="171:72"><expr pos:start="171:61" pos:end="171:72"><name pos:start="171:61" pos:end="171:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="173:37" pos:end="173:52"><expr pos:start="173:37" pos:end="173:52"><name pos:start="173:37" pos:end="173:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="175:9" pos:end="181:70"><if pos:start="175:9" pos:end="181:70">if <condition pos:start="175:12" pos:end="175:28">(<expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:23">kernel_size</name> <operator pos:start="175:25" pos:end="175:25">&lt;</operator> <literal type="number" pos:start="175:27" pos:end="175:27">0</literal></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="181:70"><block_content pos:start="177:13" pos:end="181:70">

            <expr_stmt pos:start="177:13" pos:end="181:70"><expr pos:start="177:13" pos:end="181:69"><name pos:start="177:13" pos:end="177:23">kernel_size</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <call pos:start="177:27" pos:end="181:69"><name pos:start="177:27" pos:end="177:45">load_image_targphys</name><argument_list pos:start="177:46" pos:end="181:69">(<argument pos:start="177:47" pos:end="177:61"><expr pos:start="177:47" pos:end="177:61"><name pos:start="177:47" pos:end="177:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="179:47" pos:end="179:57"><expr pos:start="179:47" pos:end="179:57"><name pos:start="179:47" pos:end="179:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="181:47" pos:end="181:68"><expr pos:start="181:47" pos:end="181:68"><name pos:start="181:47" pos:end="181:54">ram_size</name> <operator pos:start="181:56" pos:end="181:56">-</operator> <name pos:start="181:58" pos:end="181:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="191:9"><if pos:start="183:9" pos:end="191:9">if <condition pos:start="183:12" pos:end="183:28">(<expr pos:start="183:13" pos:end="183:27"><name pos:start="183:13" pos:end="183:23">kernel_size</name> <operator pos:start="183:25" pos:end="183:25">&lt;</operator> <literal type="number" pos:start="183:27" pos:end="183:27">0</literal></expr>)</condition> <block pos:start="183:30" pos:end="191:9">{<block_content pos:start="185:13" pos:end="189:20">

            <expr_stmt pos:start="185:13" pos:end="187:39"><expr pos:start="185:13" pos:end="187:38"><call pos:start="185:13" pos:end="187:38"><name pos:start="185:13" pos:end="185:20">hw_error</name><argument_list pos:start="185:21" pos:end="187:38">(<argument pos:start="185:22" pos:end="185:57"><expr pos:start="185:22" pos:end="185:57"><literal type="string" pos:start="185:22" pos:end="185:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="187:23" pos:end="187:37"><expr pos:start="187:23" pos:end="187:37"><name pos:start="187:23" pos:end="187:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:20"><expr pos:start="189:13" pos:end="189:19"><call pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:16">exit</name><argument_list pos:start="189:17" pos:end="189:19">(<argument pos:start="189:18" pos:end="189:18"><expr pos:start="189:18" pos:end="189:18"><literal type="number" pos:start="189:18" pos:end="189:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:25">/* load initrd */</comment>

        <if_stmt pos:start="195:9" pos:end="223:9"><if pos:start="195:9" pos:end="215:9">if <condition pos:start="195:12" pos:end="195:28">(<expr pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:27">initrd_filename</name></expr>)</condition> <block pos:start="195:30" pos:end="215:9">{<block_content pos:start="197:13" pos:end="213:65">

            <expr_stmt pos:start="197:13" pos:end="197:77"><expr pos:start="197:13" pos:end="197:76"><name pos:start="197:13" pos:end="197:23">initrd_base</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <call pos:start="197:27" pos:end="197:76"><name pos:start="197:27" pos:end="197:36">round_page</name><argument_list pos:start="197:37" pos:end="197:76">(<argument pos:start="197:38" pos:end="197:75"><expr pos:start="197:38" pos:end="197:75"><name pos:start="197:38" pos:end="197:48">kernel_base</name> <operator pos:start="197:50" pos:end="197:50">+</operator> <name pos:start="197:52" pos:end="197:62">kernel_size</name> <operator pos:start="197:64" pos:end="197:64">+</operator> <name pos:start="197:66" pos:end="197:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="201:70"><expr pos:start="199:13" pos:end="201:69"><name pos:start="199:13" pos:end="199:23">initrd_size</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <call pos:start="199:27" pos:end="201:69"><name pos:start="199:27" pos:end="199:45">load_image_targphys</name><argument_list pos:start="199:46" pos:end="201:69">(<argument pos:start="199:47" pos:end="199:61"><expr pos:start="199:47" pos:end="199:61"><name pos:start="199:47" pos:end="199:61">initrd_filename</name></expr></argument>, <argument pos:start="199:64" pos:end="199:74"><expr pos:start="199:64" pos:end="199:74"><name pos:start="199:64" pos:end="199:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="201:47" pos:end="201:68"><expr pos:start="201:47" pos:end="201:68"><name pos:start="201:47" pos:end="201:54">ram_size</name> <operator pos:start="201:56" pos:end="201:56">-</operator> <name pos:start="201:58" pos:end="201:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="211:13"><if pos:start="203:13" pos:end="211:13">if <condition pos:start="203:16" pos:end="203:32">(<expr pos:start="203:17" pos:end="203:31"><name pos:start="203:17" pos:end="203:27">initrd_size</name> <operator pos:start="203:29" pos:end="203:29">&lt;</operator> <literal type="number" pos:start="203:31" pos:end="203:31">0</literal></expr>)</condition> <block pos:start="203:34" pos:end="211:13">{<block_content pos:start="205:17" pos:end="209:24">

                <expr_stmt pos:start="205:17" pos:end="207:42"><expr pos:start="205:17" pos:end="207:41"><call pos:start="205:17" pos:end="207:41"><name pos:start="205:17" pos:end="205:24">hw_error</name><argument_list pos:start="205:25" pos:end="207:41">(<argument pos:start="205:26" pos:end="205:71"><expr pos:start="205:26" pos:end="205:71"><literal type="string" pos:start="205:26" pos:end="205:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="207:26" pos:end="207:40"><expr pos:start="207:26" pos:end="207:40"><name pos:start="207:26" pos:end="207:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:24"><expr pos:start="209:17" pos:end="209:23"><call pos:start="209:17" pos:end="209:23"><name pos:start="209:17" pos:end="209:20">exit</name><argument_list pos:start="209:21" pos:end="209:23">(<argument pos:start="209:22" pos:end="209:22"><expr pos:start="209:22" pos:end="209:22"><literal type="number" pos:start="209:22" pos:end="209:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:65"><expr pos:start="213:13" pos:end="213:64"><name pos:start="213:13" pos:end="213:24">cmdline_base</name> <operator pos:start="213:26" pos:end="213:26">=</operator> <call pos:start="213:28" pos:end="213:64"><name pos:start="213:28" pos:end="213:37">round_page</name><argument_list pos:start="213:38" pos:end="213:64">(<argument pos:start="213:39" pos:end="213:63"><expr pos:start="213:39" pos:end="213:63"><name pos:start="213:39" pos:end="213:49">initrd_base</name> <operator pos:start="213:51" pos:end="213:51">+</operator> <name pos:start="213:53" pos:end="213:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="223:9">else <block pos:start="215:16" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:78">

            <expr_stmt pos:start="217:13" pos:end="217:28"><expr pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:23">initrd_base</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:28"><expr pos:start="219:13" pos:end="219:27"><name pos:start="219:13" pos:end="219:23">initrd_size</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <literal type="number" pos:start="219:27" pos:end="219:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:78"><expr pos:start="221:13" pos:end="221:77"><name pos:start="221:13" pos:end="221:24">cmdline_base</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <call pos:start="221:28" pos:end="221:77"><name pos:start="221:28" pos:end="221:37">round_page</name><argument_list pos:start="221:38" pos:end="221:77">(<argument pos:start="221:39" pos:end="221:76"><expr pos:start="221:39" pos:end="221:76"><name pos:start="221:39" pos:end="221:49">kernel_base</name> <operator pos:start="221:51" pos:end="221:51">+</operator> <name pos:start="221:53" pos:end="221:63">kernel_size</name> <operator pos:start="221:65" pos:end="221:65">+</operator> <name pos:start="221:67" pos:end="221:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:30"><expr pos:start="225:9" pos:end="225:29"><name pos:start="225:9" pos:end="225:23">ppc_boot_device</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <literal type="char" pos:start="225:27" pos:end="225:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="281:5">else <block pos:start="227:12" pos:end="281:5">{<block_content pos:start="229:9" pos:end="279:9">

        <expr_stmt pos:start="229:9" pos:end="229:24"><expr pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:19">kernel_base</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:24"><expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:19">kernel_size</name> <operator pos:start="231:21" pos:end="231:21">=</operator> <literal type="number" pos:start="231:23" pos:end="231:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:19">initrd_base</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:24"><expr pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:19">initrd_size</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <literal type="number" pos:start="235:23" pos:end="235:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:31"><expr pos:start="237:9" pos:end="237:30"><name pos:start="237:9" pos:end="237:23">ppc_boot_device</name> <operator pos:start="237:25" pos:end="237:25">=</operator> <literal type="char" pos:start="237:27" pos:end="237:30">'\0'</literal></expr>;</expr_stmt>

        <for pos:start="239:9" pos:end="271:9">for <control pos:start="239:13" pos:end="239:48">(<init pos:start="239:14" pos:end="239:19"><expr pos:start="239:14" pos:end="239:18"><name pos:start="239:14" pos:end="239:14">i</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <literal type="number" pos:start="239:18" pos:end="239:18">0</literal></expr>;</init> <condition pos:start="239:21" pos:end="239:43"><expr pos:start="239:21" pos:end="239:42"><name pos:start="239:21" pos:end="239:34"><name pos:start="239:21" pos:end="239:31">boot_device</name><index pos:start="239:32" pos:end="239:34">[<expr pos:start="239:33" pos:end="239:33"><name pos:start="239:33" pos:end="239:33">i</name></expr>]</index></name> <operator pos:start="239:36" pos:end="239:37">!=</operator> <literal type="char" pos:start="239:39" pos:end="239:42">'\0'</literal></expr>;</condition> <incr pos:start="239:45" pos:end="239:47"><expr pos:start="239:45" pos:end="239:47"><name pos:start="239:45" pos:end="239:45">i</name><operator pos:start="239:46" pos:end="239:47">++</operator></expr></incr>)</control> <block pos:start="239:50" pos:end="271:9">{<block_content pos:start="261:13" pos:end="270:0">

            <comment type="block" pos:start="241:13" pos:end="247:15">/* TOFIX: for now, the second IDE channel is not properly

             *        used by OHW. The Mac floppy disk are not emulated.

             *        For now, OHW cannot boot from the network.

             */</comment>

<cpp:if pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:5"><literal type="number" pos:start="249:5" pos:end="249:5">0</literal></expr></cpp:if>

            if (boot_device[i] &gt;= 'a' &amp;&amp; boot_device[i] &lt;= 'f') {

                ppc_boot_device = boot_device[i];

                break;

            }

<cpp:else pos:start="259:1" pos:end="259:5">#<cpp:directive pos:start="259:2" pos:end="259:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="261:13" pos:end="270:0"><if pos:start="261:13" pos:end="270:0">if <condition pos:start="261:16" pos:end="261:63">(<expr pos:start="261:17" pos:end="261:62"><name pos:start="261:17" pos:end="261:30"><name pos:start="261:17" pos:end="261:27">boot_device</name><index pos:start="261:28" pos:end="261:30">[<expr pos:start="261:29" pos:end="261:29"><name pos:start="261:29" pos:end="261:29">i</name></expr>]</index></name> <operator pos:start="261:32" pos:end="261:33">&gt;=</operator> <literal type="char" pos:start="261:35" pos:end="261:37">'c'</literal> <operator pos:start="261:39" pos:end="261:40">&amp;&amp;</operator> <name pos:start="261:42" pos:end="261:55"><name pos:start="261:42" pos:end="261:52">boot_device</name><index pos:start="261:53" pos:end="261:55">[<expr pos:start="261:54" pos:end="261:54"><name pos:start="261:54" pos:end="261:54">i</name></expr>]</index></name> <operator pos:start="261:57" pos:end="261:58">&lt;=</operator> <literal type="char" pos:start="261:60" pos:end="261:62">'d'</literal></expr>)</condition> <block pos:start="261:65" pos:end="270:0">{<block_content pos:start="263:17" pos:end="265:22">

                <expr_stmt pos:start="263:17" pos:end="263:49"><expr pos:start="263:17" pos:end="263:48"><name pos:start="263:17" pos:end="263:31">ppc_boot_device</name> <operator pos:start="263:33" pos:end="263:33">=</operator> <name pos:start="263:35" pos:end="263:48"><name pos:start="263:35" pos:end="263:45">boot_device</name><index pos:start="263:46" pos:end="263:48">[<expr pos:start="263:47" pos:end="263:47"><name pos:start="263:47" pos:end="263:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="265:17" pos:end="265:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="269:1" pos:end="269:6">#<cpp:directive pos:start="269:2" pos:end="269:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:36">(<expr pos:start="273:13" pos:end="273:35"><name pos:start="273:13" pos:end="273:27">ppc_boot_device</name> <operator pos:start="273:29" pos:end="273:30">==</operator> <literal type="char" pos:start="273:32" pos:end="273:35">'\0'</literal></expr>)</condition> <block pos:start="273:38" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:20">

            <expr_stmt pos:start="275:13" pos:end="275:75"><expr pos:start="275:13" pos:end="275:74"><call pos:start="275:13" pos:end="275:74"><name pos:start="275:13" pos:end="275:19">fprintf</name><argument_list pos:start="275:20" pos:end="275:74">(<argument pos:start="275:21" pos:end="275:26"><expr pos:start="275:21" pos:end="275:26"><name pos:start="275:21" pos:end="275:26">stderr</name></expr></argument>, <argument pos:start="275:29" pos:end="275:73"><expr pos:start="275:29" pos:end="275:73"><literal type="string" pos:start="275:29" pos:end="275:73">"No valid boot device for G3 Beige machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:20"><expr pos:start="277:13" pos:end="277:19"><call pos:start="277:13" pos:end="277:19"><name pos:start="277:13" pos:end="277:16">exit</name><argument_list pos:start="277:17" pos:end="277:19">(<argument pos:start="277:18" pos:end="277:18"><expr pos:start="277:18" pos:end="277:18"><literal type="number" pos:start="277:18" pos:end="277:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:42"><expr pos:start="287:5" pos:end="287:41"><call pos:start="287:5" pos:end="287:41"><name pos:start="287:5" pos:end="287:17">isa_mmio_init</name><argument_list pos:start="287:18" pos:end="287:41">(<argument pos:start="287:19" pos:end="287:28"><expr pos:start="287:19" pos:end="287:28"><literal type="number" pos:start="287:19" pos:end="287:28">0xfe000000</literal></expr></argument>, <argument pos:start="287:31" pos:end="287:40"><expr pos:start="287:31" pos:end="287:40"><literal type="number" pos:start="287:31" pos:end="287:40">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:61"><expr pos:start="293:5" pos:end="293:60"><name pos:start="293:5" pos:end="293:17">heathrow_irqs</name> <operator pos:start="293:19" pos:end="293:19">=</operator> <call pos:start="293:21" pos:end="293:60"><name pos:start="293:21" pos:end="293:29">g_malloc0</name><argument_list pos:start="293:30" pos:end="293:60">(<argument pos:start="293:31" pos:end="293:59"><expr pos:start="293:31" pos:end="293:59"><name pos:start="293:31" pos:end="293:38">smp_cpus</name> <operator pos:start="293:40" pos:end="293:40">*</operator> <sizeof pos:start="293:42" pos:end="293:59">sizeof<argument_list pos:start="293:48" pos:end="293:59">(<argument pos:start="293:49" pos:end="293:58"><expr pos:start="293:49" pos:end="293:58"><name pos:start="293:49" pos:end="293:56">qemu_irq</name> <operator pos:start="293:58" pos:end="293:58">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="297:51"><expr pos:start="295:5" pos:end="297:50"><name pos:start="295:5" pos:end="295:20"><name pos:start="295:5" pos:end="295:17">heathrow_irqs</name><index pos:start="295:18" pos:end="295:20">[<expr pos:start="295:19" pos:end="295:19"><literal type="number" pos:start="295:19" pos:end="295:19">0</literal></expr>]</index></name> <operator pos:start="295:22" pos:end="295:22">=</operator>

        <call pos:start="297:9" pos:end="297:50"><name pos:start="297:9" pos:end="297:17">g_malloc0</name><argument_list pos:start="297:18" pos:end="297:50">(<argument pos:start="297:19" pos:end="297:49"><expr pos:start="297:19" pos:end="297:49"><name pos:start="297:19" pos:end="297:26">smp_cpus</name> <operator pos:start="297:28" pos:end="297:28">*</operator> <sizeof pos:start="297:30" pos:end="297:45">sizeof<argument_list pos:start="297:36" pos:end="297:45">(<argument pos:start="297:37" pos:end="297:44"><expr pos:start="297:37" pos:end="297:44"><name pos:start="297:37" pos:end="297:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="297:47" pos:end="297:47">*</operator> <literal type="number" pos:start="297:49" pos:end="297:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="299:5" pos:end="299:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="301:5" pos:end="321:5">for <control pos:start="301:9" pos:end="301:34">(<init pos:start="301:10" pos:end="301:15"><expr pos:start="301:10" pos:end="301:14"><name pos:start="301:10" pos:end="301:10">i</name> <operator pos:start="301:12" pos:end="301:12">=</operator> <literal type="number" pos:start="301:14" pos:end="301:14">0</literal></expr>;</init> <condition pos:start="301:17" pos:end="301:29"><expr pos:start="301:17" pos:end="301:28"><name pos:start="301:17" pos:end="301:17">i</name> <operator pos:start="301:19" pos:end="301:19">&lt;</operator> <name pos:start="301:21" pos:end="301:28">smp_cpus</name></expr>;</condition> <incr pos:start="301:31" pos:end="301:33"><expr pos:start="301:31" pos:end="301:33"><name pos:start="301:31" pos:end="301:31">i</name><operator pos:start="301:32" pos:end="301:33">++</operator></expr></incr>)</control> <block pos:start="301:36" pos:end="321:5">{<block_content pos:start="303:9" pos:end="319:9">

        <switch pos:start="303:9" pos:end="319:9">switch <condition pos:start="303:16" pos:end="303:31">(<expr pos:start="303:17" pos:end="303:30"><call pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:25">PPC_INPUT</name><argument_list pos:start="303:26" pos:end="303:30">(<argument pos:start="303:27" pos:end="303:29"><expr pos:start="303:27" pos:end="303:29"><name pos:start="303:27" pos:end="303:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:33" pos:end="319:9">{<block_content pos:start="305:9" pos:end="317:74">

        <case pos:start="305:9" pos:end="305:33">case <expr pos:start="305:14" pos:end="305:32"><name pos:start="305:14" pos:end="305:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="307:13" pos:end="307:58"><expr pos:start="307:13" pos:end="307:57"><name pos:start="307:13" pos:end="307:28"><name pos:start="307:13" pos:end="307:25">heathrow_irqs</name><index pos:start="307:26" pos:end="307:28">[<expr pos:start="307:27" pos:end="307:27"><name pos:start="307:27" pos:end="307:27">i</name></expr>]</index></name> <operator pos:start="307:30" pos:end="307:30">=</operator> <name pos:start="307:32" pos:end="307:47"><name pos:start="307:32" pos:end="307:44">heathrow_irqs</name><index pos:start="307:45" pos:end="307:47">[<expr pos:start="307:46" pos:end="307:46"><literal type="number" pos:start="307:46" pos:end="307:46">0</literal></expr>]</index></name> <operator pos:start="307:49" pos:end="307:49">+</operator> <operator pos:start="307:51" pos:end="307:51">(</operator><name pos:start="307:52" pos:end="307:52">i</name> <operator pos:start="307:54" pos:end="307:54">*</operator> <literal type="number" pos:start="307:56" pos:end="307:56">1</literal><operator pos:start="307:57" pos:end="307:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="311:64"><expr pos:start="309:13" pos:end="311:63"><name pos:start="309:13" pos:end="309:31"><name pos:start="309:13" pos:end="309:25">heathrow_irqs</name><index pos:start="309:26" pos:end="309:28">[<expr pos:start="309:27" pos:end="309:27"><name pos:start="309:27" pos:end="309:27">i</name></expr>]</index><index pos:start="309:29" pos:end="309:31">[<expr pos:start="309:30" pos:end="309:30"><literal type="number" pos:start="309:30" pos:end="309:30">0</literal></expr>]</index></name> <operator pos:start="309:33" pos:end="309:33">=</operator>

                <operator pos:start="311:17" pos:end="311:17">(</operator><operator pos:start="311:18" pos:end="311:18">(</operator><name pos:start="311:19" pos:end="311:26">qemu_irq</name> <operator pos:start="311:28" pos:end="311:28">*</operator><operator pos:start="311:29" pos:end="311:29">)</operator><name pos:start="311:30" pos:end="311:44"><name pos:start="311:30" pos:end="311:32">env</name><operator pos:start="311:33" pos:end="311:34">-&gt;</operator><name pos:start="311:35" pos:end="311:44">irq_inputs</name></name><operator pos:start="311:45" pos:end="311:45">)</operator><index pos:start="311:46" pos:end="311:63">[<expr pos:start="311:47" pos:end="311:62"><name pos:start="311:47" pos:end="311:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        <default pos:start="315:9" pos:end="315:16">default:</default>

            <expr_stmt pos:start="317:13" pos:end="317:74"><expr pos:start="317:13" pos:end="317:73"><call pos:start="317:13" pos:end="317:73"><name pos:start="317:13" pos:end="317:20">hw_error</name><argument_list pos:start="317:21" pos:end="317:73">(<argument pos:start="317:22" pos:end="317:72"><expr pos:start="317:22" pos:end="317:72"><literal type="string" pos:start="317:22" pos:end="317:72">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="325:5" pos:end="325:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="327:5" pos:end="331:5"><if pos:start="327:5" pos:end="331:5">if <condition pos:start="327:8" pos:end="327:46">(<expr pos:start="327:9" pos:end="327:45"><call pos:start="327:9" pos:end="327:22"><name pos:start="327:9" pos:end="327:17">PPC_INPUT</name><argument_list pos:start="327:18" pos:end="327:22">(<argument pos:start="327:19" pos:end="327:21"><expr pos:start="327:19" pos:end="327:21"><name pos:start="327:19" pos:end="327:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="327:24" pos:end="327:25">!=</operator> <name pos:start="327:27" pos:end="327:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="327:48" pos:end="331:5">{<block_content pos:start="329:9" pos:end="329:68">

        <expr_stmt pos:start="329:9" pos:end="329:68"><expr pos:start="329:9" pos:end="329:67"><call pos:start="329:9" pos:end="329:67"><name pos:start="329:9" pos:end="329:16">hw_error</name><argument_list pos:start="329:17" pos:end="329:67">(<argument pos:start="329:18" pos:end="329:66"><expr pos:start="329:18" pos:end="329:66"><literal type="string" pos:start="329:18" pos:end="329:66">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:56"><expr pos:start="333:5" pos:end="333:55"><name pos:start="333:5" pos:end="333:7">pic</name> <operator pos:start="333:9" pos:end="333:9">=</operator> <call pos:start="333:11" pos:end="333:55"><name pos:start="333:11" pos:end="333:27">heathrow_pic_init</name><argument_list pos:start="333:28" pos:end="333:55">(<argument pos:start="333:29" pos:end="333:36"><expr pos:start="333:29" pos:end="333:36"><operator pos:start="333:29" pos:end="333:29">&amp;</operator><name pos:start="333:30" pos:end="333:36">pic_mem</name></expr></argument>, <argument pos:start="333:39" pos:end="333:39"><expr pos:start="333:39" pos:end="333:39"><literal type="number" pos:start="333:39" pos:end="333:39">1</literal></expr></argument>, <argument pos:start="333:42" pos:end="333:54"><expr pos:start="333:42" pos:end="333:54"><name pos:start="333:42" pos:end="333:54">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="335:5" pos:end="339:48"><expr pos:start="335:5" pos:end="339:47"><name pos:start="335:5" pos:end="335:11">pci_bus</name> <operator pos:start="335:13" pos:end="335:13">=</operator> <call pos:start="335:15" pos:end="339:47"><name pos:start="335:15" pos:end="335:30">pci_grackle_init</name><argument_list pos:start="335:31" pos:end="339:47">(<argument pos:start="335:32" pos:end="335:41"><expr pos:start="335:32" pos:end="335:41"><literal type="number" pos:start="335:32" pos:end="335:41">0xfec00000</literal></expr></argument>, <argument pos:start="335:44" pos:end="335:46"><expr pos:start="335:44" pos:end="335:46"><name pos:start="335:44" pos:end="335:46">pic</name></expr></argument>,

                               <argument pos:start="337:32" pos:end="337:50"><expr pos:start="337:32" pos:end="337:50"><call pos:start="337:32" pos:end="337:50"><name pos:start="337:32" pos:end="337:48">get_system_memory</name><argument_list pos:start="337:49" pos:end="337:50">()</argument_list></call></expr></argument>,

                               <argument pos:start="339:32" pos:end="339:46"><expr pos:start="339:32" pos:end="339:46"><call pos:start="339:32" pos:end="339:46"><name pos:start="339:32" pos:end="339:44">get_system_io</name><argument_list pos:start="339:45" pos:end="339:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:26"><expr pos:start="341:5" pos:end="341:25"><call pos:start="341:5" pos:end="341:25"><name pos:start="341:5" pos:end="341:16">pci_vga_init</name><argument_list pos:start="341:17" pos:end="341:25">(<argument pos:start="341:18" pos:end="341:24"><expr pos:start="341:18" pos:end="341:24"><name pos:start="341:18" pos:end="341:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="347:61"><expr pos:start="345:5" pos:end="347:60"><name pos:start="345:5" pos:end="345:12">escc_mem</name> <operator pos:start="345:14" pos:end="345:14">=</operator> <call pos:start="345:16" pos:end="347:60"><name pos:start="345:16" pos:end="345:24">escc_init</name><argument_list pos:start="345:25" pos:end="347:60">(<argument pos:start="345:26" pos:end="345:35"><expr pos:start="345:26" pos:end="345:35"><literal type="number" pos:start="345:26" pos:end="345:35">0x80013000</literal></expr></argument>, <argument pos:start="345:38" pos:end="345:46"><expr pos:start="345:38" pos:end="345:46"><name pos:start="345:38" pos:end="345:46"><name pos:start="345:38" pos:end="345:40">pic</name><index pos:start="345:41" pos:end="345:46">[<expr pos:start="345:42" pos:end="345:45"><literal type="number" pos:start="345:42" pos:end="345:45">0x0f</literal></expr>]</index></name></expr></argument>, <argument pos:start="345:49" pos:end="345:57"><expr pos:start="345:49" pos:end="345:57"><name pos:start="345:49" pos:end="345:57"><name pos:start="345:49" pos:end="345:51">pic</name><index pos:start="345:52" pos:end="345:57">[<expr pos:start="345:53" pos:end="345:56"><literal type="number" pos:start="345:53" pos:end="345:56">0x10</literal></expr>]</index></name></expr></argument>, <argument pos:start="345:60" pos:end="345:72"><expr pos:start="345:60" pos:end="345:72"><name pos:start="345:60" pos:end="345:72"><name pos:start="345:60" pos:end="345:69">serial_hds</name><index pos:start="345:70" pos:end="345:72">[<expr pos:start="345:71" pos:end="345:71"><literal type="number" pos:start="345:71" pos:end="345:71">0</literal></expr>]</index></name></expr></argument>,

                               <argument pos:start="347:32" pos:end="347:44"><expr pos:start="347:32" pos:end="347:44"><name pos:start="347:32" pos:end="347:44"><name pos:start="347:32" pos:end="347:41">serial_hds</name><index pos:start="347:42" pos:end="347:44">[<expr pos:start="347:43" pos:end="347:43"><literal type="number" pos:start="347:43" pos:end="347:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="347:47" pos:end="347:56"><expr pos:start="347:47" pos:end="347:56"><name pos:start="347:47" pos:end="347:56">ESCC_CLOCK</name></expr></argument>, <argument pos:start="347:59" pos:end="347:59"><expr pos:start="347:59" pos:end="347:59"><literal type="number" pos:start="347:59" pos:end="347:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="351:72"><expr pos:start="349:5" pos:end="351:71"><call pos:start="349:5" pos:end="351:71"><name pos:start="349:5" pos:end="349:28">memory_region_init_alias</name><argument_list pos:start="349:29" pos:end="351:71">(<argument pos:start="349:30" pos:end="349:37"><expr pos:start="349:30" pos:end="349:37"><name pos:start="349:30" pos:end="349:37">escc_bar</name></expr></argument>, <argument pos:start="349:40" pos:end="349:49"><expr pos:start="349:40" pos:end="349:49"><literal type="string" pos:start="349:40" pos:end="349:49">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="351:30" pos:end="351:37"><expr pos:start="351:30" pos:end="351:37"><name pos:start="351:30" pos:end="351:37">escc_mem</name></expr></argument>, <argument pos:start="351:40" pos:end="351:40"><expr pos:start="351:40" pos:end="351:40"><literal type="number" pos:start="351:40" pos:end="351:40">0</literal></expr></argument>, <argument pos:start="351:43" pos:end="351:70"><expr pos:start="351:43" pos:end="351:70"><call pos:start="351:43" pos:end="351:70"><name pos:start="351:43" pos:end="351:60">memory_region_size</name><argument_list pos:start="351:61" pos:end="351:70">(<argument pos:start="351:62" pos:end="351:69"><expr pos:start="351:62" pos:end="351:69"><name pos:start="351:62" pos:end="351:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="355:5" pos:end="357:60">for<control pos:start="355:8" pos:end="355:32">(<init pos:start="355:9" pos:end="355:14"><expr pos:start="355:9" pos:end="355:13"><name pos:start="355:9" pos:end="355:9">i</name> <operator pos:start="355:11" pos:end="355:11">=</operator> <literal type="number" pos:start="355:13" pos:end="355:13">0</literal></expr>;</init> <condition pos:start="355:16" pos:end="355:27"><expr pos:start="355:16" pos:end="355:26"><name pos:start="355:16" pos:end="355:16">i</name> <operator pos:start="355:18" pos:end="355:18">&lt;</operator> <name pos:start="355:20" pos:end="355:26">nb_nics</name></expr>;</condition> <incr pos:start="355:29" pos:end="355:31"><expr pos:start="355:29" pos:end="355:31"><name pos:start="355:29" pos:end="355:29">i</name><operator pos:start="355:30" pos:end="355:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="357:9" pos:end="357:60"><block_content pos:start="357:9" pos:end="357:60">

        <expr_stmt pos:start="357:9" pos:end="357:60"><expr pos:start="357:9" pos:end="357:59"><call pos:start="357:9" pos:end="357:59"><name pos:start="357:9" pos:end="357:27">pci_nic_init_nofail</name><argument_list pos:start="357:28" pos:end="357:59">(<argument pos:start="357:29" pos:end="357:40"><expr pos:start="357:29" pos:end="357:40"><operator pos:start="357:29" pos:end="357:29">&amp;</operator><name pos:start="357:30" pos:end="357:40"><name pos:start="357:30" pos:end="357:37">nd_table</name><index pos:start="357:38" pos:end="357:40">[<expr pos:start="357:39" pos:end="357:39"><name pos:start="357:39" pos:end="357:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="357:43" pos:end="357:52"><expr pos:start="357:43" pos:end="357:52"><literal type="string" pos:start="357:43" pos:end="357:52">"ne2k_pci"</literal></expr></argument>, <argument pos:start="357:55" pos:end="357:58"><expr pos:start="357:55" pos:end="357:58"><name pos:start="357:55" pos:end="357:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <expr_stmt pos:start="363:5" pos:end="363:35"><expr pos:start="363:5" pos:end="363:34"><call pos:start="363:5" pos:end="363:34"><name pos:start="363:5" pos:end="363:17">ide_drive_get</name><argument_list pos:start="363:18" pos:end="363:34">(<argument pos:start="363:19" pos:end="363:20"><expr pos:start="363:19" pos:end="363:20"><name pos:start="363:19" pos:end="363:20">hd</name></expr></argument>, <argument pos:start="363:23" pos:end="363:33"><expr pos:start="363:23" pos:end="363:33"><name pos:start="363:23" pos:end="363:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:57">/* First IDE channel is a MAC IDE on the MacIO bus */</comment>

    <expr_stmt pos:start="369:5" pos:end="369:35"><expr pos:start="369:5" pos:end="369:34"><name pos:start="369:5" pos:end="369:9">dbdma</name> <operator pos:start="369:11" pos:end="369:11">=</operator> <call pos:start="369:13" pos:end="369:34"><name pos:start="369:13" pos:end="369:22">DBDMA_init</name><argument_list pos:start="369:23" pos:end="369:34">(<argument pos:start="369:24" pos:end="369:33"><expr pos:start="369:24" pos:end="369:33"><operator pos:start="369:24" pos:end="369:24">&amp;</operator><name pos:start="369:25" pos:end="369:33">dbdma_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:22"><expr pos:start="371:5" pos:end="371:21"><name pos:start="371:5" pos:end="371:14"><name pos:start="371:5" pos:end="371:11">ide_mem</name><index pos:start="371:12" pos:end="371:14">[<expr pos:start="371:13" pos:end="371:13"><literal type="number" pos:start="371:13" pos:end="371:13">0</literal></expr>]</index></name> <operator pos:start="371:16" pos:end="371:16">=</operator> <name pos:start="371:18" pos:end="371:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:70"><expr pos:start="373:5" pos:end="373:69"><name pos:start="373:5" pos:end="373:14"><name pos:start="373:5" pos:end="373:11">ide_mem</name><index pos:start="373:12" pos:end="373:14">[<expr pos:start="373:13" pos:end="373:13"><literal type="number" pos:start="373:13" pos:end="373:13">1</literal></expr>]</index></name> <operator pos:start="373:16" pos:end="373:16">=</operator> <call pos:start="373:18" pos:end="373:69"><name pos:start="373:18" pos:end="373:30">pmac_ide_init</name><argument_list pos:start="373:31" pos:end="373:69">(<argument pos:start="373:32" pos:end="373:33"><expr pos:start="373:32" pos:end="373:33"><name pos:start="373:32" pos:end="373:33">hd</name></expr></argument>, <argument pos:start="373:36" pos:end="373:44"><expr pos:start="373:36" pos:end="373:44"><name pos:start="373:36" pos:end="373:44"><name pos:start="373:36" pos:end="373:38">pic</name><index pos:start="373:39" pos:end="373:44">[<expr pos:start="373:40" pos:end="373:43"><literal type="number" pos:start="373:40" pos:end="373:43">0x0D</literal></expr>]</index></name></expr></argument>, <argument pos:start="373:47" pos:end="373:51"><expr pos:start="373:47" pos:end="373:51"><name pos:start="373:47" pos:end="373:51">dbdma</name></expr></argument>, <argument pos:start="373:54" pos:end="373:57"><expr pos:start="373:54" pos:end="373:57"><literal type="number" pos:start="373:54" pos:end="373:57">0x16</literal></expr></argument>, <argument pos:start="373:60" pos:end="373:68"><expr pos:start="373:60" pos:end="373:68"><name pos:start="373:60" pos:end="373:68"><name pos:start="373:60" pos:end="373:62">pic</name><index pos:start="373:63" pos:end="373:68">[<expr pos:start="373:64" pos:end="373:67"><literal type="number" pos:start="373:64" pos:end="373:67">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="377:5" pos:end="377:55">/* Second IDE channel is a CMD646 on the PCI bus */</comment>

    <expr_stmt pos:start="379:5" pos:end="379:29"><expr pos:start="379:5" pos:end="379:28"><name pos:start="379:5" pos:end="379:9"><name pos:start="379:5" pos:end="379:6">hd</name><index pos:start="379:7" pos:end="379:9">[<expr pos:start="379:8" pos:end="379:8"><literal type="number" pos:start="379:8" pos:end="379:8">0</literal></expr>]</index></name> <operator pos:start="379:11" pos:end="379:11">=</operator> <name pos:start="379:13" pos:end="379:28"><name pos:start="379:13" pos:end="379:14">hd</name><index pos:start="379:15" pos:end="379:28">[<expr pos:start="379:16" pos:end="379:27"><name pos:start="379:16" pos:end="379:27">MAX_IDE_DEVS</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:33"><expr pos:start="381:5" pos:end="381:32"><name pos:start="381:5" pos:end="381:9"><name pos:start="381:5" pos:end="381:6">hd</name><index pos:start="381:7" pos:end="381:9">[<expr pos:start="381:8" pos:end="381:8"><literal type="number" pos:start="381:8" pos:end="381:8">1</literal></expr>]</index></name> <operator pos:start="381:11" pos:end="381:11">=</operator> <name pos:start="381:13" pos:end="381:32"><name pos:start="381:13" pos:end="381:14">hd</name><index pos:start="381:15" pos:end="381:32">[<expr pos:start="381:16" pos:end="381:31"><name pos:start="381:16" pos:end="381:27">MAX_IDE_DEVS</name> <operator pos:start="381:29" pos:end="381:29">+</operator> <literal type="number" pos:start="381:31" pos:end="381:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:25"><expr pos:start="383:5" pos:end="383:24"><name pos:start="383:5" pos:end="383:9"><name pos:start="383:5" pos:end="383:6">hd</name><index pos:start="383:7" pos:end="383:9">[<expr pos:start="383:8" pos:end="383:8"><literal type="number" pos:start="383:8" pos:end="383:8">3</literal></expr>]</index></name> <operator pos:start="383:11" pos:end="383:11">=</operator> <name pos:start="383:13" pos:end="383:17"><name pos:start="383:13" pos:end="383:14">hd</name><index pos:start="383:15" pos:end="383:17">[<expr pos:start="383:16" pos:end="383:16"><literal type="number" pos:start="383:16" pos:end="383:16">2</literal></expr>]</index></name> <operator pos:start="383:19" pos:end="383:19">=</operator> <name pos:start="383:21" pos:end="383:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:40"><expr pos:start="385:5" pos:end="385:39"><call pos:start="385:5" pos:end="385:39"><name pos:start="385:5" pos:end="385:23">pci_cmd646_ide_init</name><argument_list pos:start="385:24" pos:end="385:39">(<argument pos:start="385:25" pos:end="385:31"><expr pos:start="385:25" pos:end="385:31"><name pos:start="385:25" pos:end="385:31">pci_bus</name></expr></argument>, <argument pos:start="385:34" pos:end="385:35"><expr pos:start="385:34" pos:end="385:35"><name pos:start="385:34" pos:end="385:35">hd</name></expr></argument>, <argument pos:start="385:38" pos:end="385:38"><expr pos:start="385:38" pos:end="385:38"><literal type="number" pos:start="385:38" pos:end="385:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="389:5" pos:end="389:34">/* cuda also initialize ADB */</comment>

    <expr_stmt pos:start="391:5" pos:end="391:36"><expr pos:start="391:5" pos:end="391:35"><call pos:start="391:5" pos:end="391:35"><name pos:start="391:5" pos:end="391:13">cuda_init</name><argument_list pos:start="391:14" pos:end="391:35">(<argument pos:start="391:15" pos:end="391:23"><expr pos:start="391:15" pos:end="391:23"><operator pos:start="391:15" pos:end="391:15">&amp;</operator><name pos:start="391:16" pos:end="391:23">cuda_mem</name></expr></argument>, <argument pos:start="391:26" pos:end="391:34"><expr pos:start="391:26" pos:end="391:34"><name pos:start="391:26" pos:end="391:34"><name pos:start="391:26" pos:end="391:28">pic</name><index pos:start="391:29" pos:end="391:34">[<expr pos:start="391:30" pos:end="391:33"><literal type="number" pos:start="391:30" pos:end="391:33">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="395:5" pos:end="395:27"><expr pos:start="395:5" pos:end="395:26"><call pos:start="395:5" pos:end="395:26"><name pos:start="395:5" pos:end="395:16">adb_kbd_init</name><argument_list pos:start="395:17" pos:end="395:26">(<argument pos:start="395:18" pos:end="395:25"><expr pos:start="395:18" pos:end="395:25"><operator pos:start="395:18" pos:end="395:18">&amp;</operator><name pos:start="395:19" pos:end="395:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:29"><expr pos:start="397:5" pos:end="397:28"><call pos:start="397:5" pos:end="397:28"><name pos:start="397:5" pos:end="397:18">adb_mouse_init</name><argument_list pos:start="397:19" pos:end="397:28">(<argument pos:start="397:20" pos:end="397:27"><expr pos:start="397:20" pos:end="397:27"><operator pos:start="397:20" pos:end="397:20">&amp;</operator><name pos:start="397:21" pos:end="397:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="401:5" pos:end="401:38"><expr pos:start="401:5" pos:end="401:37"><name pos:start="401:5" pos:end="401:7">nvr</name> <operator pos:start="401:9" pos:end="401:9">=</operator> <call pos:start="401:11" pos:end="401:37"><name pos:start="401:11" pos:end="401:26">macio_nvram_init</name><argument_list pos:start="401:27" pos:end="401:37">(<argument pos:start="401:28" pos:end="401:33"><expr pos:start="401:28" pos:end="401:33"><literal type="number" pos:start="401:28" pos:end="401:33">0x2000</literal></expr></argument>, <argument pos:start="401:36" pos:end="401:36"><expr pos:start="401:36" pos:end="401:36"><literal type="number" pos:start="401:36" pos:end="401:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:45"><expr pos:start="403:5" pos:end="403:44"><call pos:start="403:5" pos:end="403:44"><name pos:start="403:5" pos:end="403:31">pmac_format_nvram_partition</name><argument_list pos:start="403:32" pos:end="403:44">(<argument pos:start="403:33" pos:end="403:35"><expr pos:start="403:33" pos:end="403:35"><name pos:start="403:33" pos:end="403:35">nvr</name></expr></argument>, <argument pos:start="403:38" pos:end="403:43"><expr pos:start="403:38" pos:end="403:43"><literal type="number" pos:start="403:38" pos:end="403:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="407:5" pos:end="409:63"><expr pos:start="407:5" pos:end="409:62"><call pos:start="407:5" pos:end="409:62"><name pos:start="407:5" pos:end="407:14">macio_init</name><argument_list pos:start="407:15" pos:end="409:62">(<argument pos:start="407:16" pos:end="407:22"><expr pos:start="407:16" pos:end="407:22"><name pos:start="407:16" pos:end="407:22">pci_bus</name></expr></argument>, <argument pos:start="407:25" pos:end="407:52"><expr pos:start="407:25" pos:end="407:52"><name pos:start="407:25" pos:end="407:52">PCI_DEVICE_ID_APPLE_343S1201</name></expr></argument>, <argument pos:start="407:55" pos:end="407:55"><expr pos:start="407:55" pos:end="407:55"><literal type="number" pos:start="407:55" pos:end="407:55">1</literal></expr></argument>, <argument pos:start="407:58" pos:end="407:64"><expr pos:start="407:58" pos:end="407:64"><name pos:start="407:58" pos:end="407:64">pic_mem</name></expr></argument>,

               <argument pos:start="409:16" pos:end="409:24"><expr pos:start="409:16" pos:end="409:24"><name pos:start="409:16" pos:end="409:24">dbdma_mem</name></expr></argument>, <argument pos:start="409:27" pos:end="409:34"><expr pos:start="409:27" pos:end="409:34"><name pos:start="409:27" pos:end="409:34">cuda_mem</name></expr></argument>, <argument pos:start="409:37" pos:end="409:39"><expr pos:start="409:37" pos:end="409:39"><name pos:start="409:37" pos:end="409:39">nvr</name></expr></argument>, <argument pos:start="409:42" pos:end="409:42"><expr pos:start="409:42" pos:end="409:42"><literal type="number" pos:start="409:42" pos:end="409:42">2</literal></expr></argument>, <argument pos:start="409:45" pos:end="409:51"><expr pos:start="409:45" pos:end="409:51"><name pos:start="409:45" pos:end="409:51">ide_mem</name></expr></argument>, <argument pos:start="409:54" pos:end="409:61"><expr pos:start="409:54" pos:end="409:61"><name pos:start="409:54" pos:end="409:61">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="413:5" pos:end="417:5"><if pos:start="413:5" pos:end="417:5">if <condition pos:start="413:8" pos:end="413:20">(<expr pos:start="413:9" pos:end="413:19"><name pos:start="413:9" pos:end="413:19">usb_enabled</name></expr>)</condition> <block pos:start="413:22" pos:end="417:5">{<block_content pos:start="415:9" pos:end="415:39">

        <expr_stmt pos:start="415:9" pos:end="415:39"><expr pos:start="415:9" pos:end="415:38"><call pos:start="415:9" pos:end="415:38"><name pos:start="415:9" pos:end="415:25">usb_ohci_init_pci</name><argument_list pos:start="415:26" pos:end="415:38">(<argument pos:start="415:27" pos:end="415:33"><expr pos:start="415:27" pos:end="415:33"><name pos:start="415:27" pos:end="415:33">pci_bus</name></expr></argument>, <argument pos:start="415:36" pos:end="415:37"><expr pos:start="415:36" pos:end="415:37"><operator pos:start="415:36" pos:end="415:36">-</operator><literal type="number" pos:start="415:37" pos:end="415:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="421:5" pos:end="423:27"><if pos:start="421:5" pos:end="423:27">if <condition pos:start="421:8" pos:end="421:73">(<expr pos:start="421:9" pos:end="421:72"><name pos:start="421:9" pos:end="421:21">graphic_depth</name> <operator pos:start="421:23" pos:end="421:24">!=</operator> <literal type="number" pos:start="421:26" pos:end="421:27">15</literal> <operator pos:start="421:29" pos:end="421:30">&amp;&amp;</operator> <name pos:start="421:32" pos:end="421:44">graphic_depth</name> <operator pos:start="421:46" pos:end="421:47">!=</operator> <literal type="number" pos:start="421:49" pos:end="421:50">32</literal> <operator pos:start="421:52" pos:end="421:53">&amp;&amp;</operator> <name pos:start="421:55" pos:end="421:67">graphic_depth</name> <operator pos:start="421:69" pos:end="421:70">!=</operator> <literal type="number" pos:start="421:72" pos:end="421:72">8</literal></expr>)</condition><block type="pseudo" pos:start="423:9" pos:end="423:27"><block_content pos:start="423:9" pos:end="423:27">

        <expr_stmt pos:start="423:9" pos:end="423:27"><expr pos:start="423:9" pos:end="423:26"><name pos:start="423:9" pos:end="423:21">graphic_depth</name> <operator pos:start="423:23" pos:end="423:23">=</operator> <literal type="number" pos:start="423:25" pos:end="423:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="427:5" pos:end="427:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="431:5" pos:end="431:55"><expr pos:start="431:5" pos:end="431:54"><name pos:start="431:5" pos:end="431:10">fw_cfg</name> <operator pos:start="431:12" pos:end="431:12">=</operator> <call pos:start="431:14" pos:end="431:54"><name pos:start="431:14" pos:end="431:24">fw_cfg_init</name><argument_list pos:start="431:25" pos:end="431:54">(<argument pos:start="431:26" pos:end="431:26"><expr pos:start="431:26" pos:end="431:26"><literal type="number" pos:start="431:26" pos:end="431:26">0</literal></expr></argument>, <argument pos:start="431:29" pos:end="431:29"><expr pos:start="431:29" pos:end="431:29"><literal type="number" pos:start="431:29" pos:end="431:29">0</literal></expr></argument>, <argument pos:start="431:32" pos:end="431:39"><expr pos:start="431:32" pos:end="431:39"><name pos:start="431:32" pos:end="431:39">CFG_ADDR</name></expr></argument>, <argument pos:start="431:42" pos:end="431:53"><expr pos:start="431:42" pos:end="431:53"><name pos:start="431:42" pos:end="431:49">CFG_ADDR</name> <operator pos:start="431:51" pos:end="431:51">+</operator> <literal type="number" pos:start="431:53" pos:end="431:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:41"><expr pos:start="433:5" pos:end="433:40"><call pos:start="433:5" pos:end="433:40"><name pos:start="433:5" pos:end="433:18">fw_cfg_add_i32</name><argument_list pos:start="433:19" pos:end="433:40">(<argument pos:start="433:20" pos:end="433:25"><expr pos:start="433:20" pos:end="433:25"><name pos:start="433:20" pos:end="433:25">fw_cfg</name></expr></argument>, <argument pos:start="433:28" pos:end="433:36"><expr pos:start="433:28" pos:end="433:36"><name pos:start="433:28" pos:end="433:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="433:39" pos:end="433:39"><expr pos:start="433:39" pos:end="433:39"><literal type="number" pos:start="433:39" pos:end="433:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:64"><expr pos:start="435:5" pos:end="435:63"><call pos:start="435:5" pos:end="435:63"><name pos:start="435:5" pos:end="435:18">fw_cfg_add_i64</name><argument_list pos:start="435:19" pos:end="435:63">(<argument pos:start="435:20" pos:end="435:25"><expr pos:start="435:20" pos:end="435:25"><name pos:start="435:20" pos:end="435:25">fw_cfg</name></expr></argument>, <argument pos:start="435:28" pos:end="435:42"><expr pos:start="435:28" pos:end="435:42"><name pos:start="435:28" pos:end="435:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="435:45" pos:end="435:62"><expr pos:start="435:45" pos:end="435:62"><operator pos:start="435:45" pos:end="435:45">(</operator><name pos:start="435:46" pos:end="435:53">uint64_t</name><operator pos:start="435:54" pos:end="435:54">)</operator><name pos:start="435:55" pos:end="435:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:61"><expr pos:start="437:5" pos:end="437:60"><call pos:start="437:5" pos:end="437:60"><name pos:start="437:5" pos:end="437:18">fw_cfg_add_i16</name><argument_list pos:start="437:19" pos:end="437:60">(<argument pos:start="437:20" pos:end="437:25"><expr pos:start="437:20" pos:end="437:25"><name pos:start="437:20" pos:end="437:25">fw_cfg</name></expr></argument>, <argument pos:start="437:28" pos:end="437:44"><expr pos:start="437:28" pos:end="437:44"><name pos:start="437:28" pos:end="437:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="437:47" pos:end="437:59"><expr pos:start="437:47" pos:end="437:59"><name pos:start="437:47" pos:end="437:59">ARCH_HEATHROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:60"><expr pos:start="439:5" pos:end="439:59"><call pos:start="439:5" pos:end="439:59"><name pos:start="439:5" pos:end="439:18">fw_cfg_add_i32</name><argument_list pos:start="439:19" pos:end="439:59">(<argument pos:start="439:20" pos:end="439:25"><expr pos:start="439:20" pos:end="439:25"><name pos:start="439:20" pos:end="439:25">fw_cfg</name></expr></argument>, <argument pos:start="439:28" pos:end="439:45"><expr pos:start="439:28" pos:end="439:45"><name pos:start="439:28" pos:end="439:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="439:48" pos:end="439:58"><expr pos:start="439:48" pos:end="439:58"><name pos:start="439:48" pos:end="439:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:60"><expr pos:start="441:5" pos:end="441:59"><call pos:start="441:5" pos:end="441:59"><name pos:start="441:5" pos:end="441:18">fw_cfg_add_i32</name><argument_list pos:start="441:19" pos:end="441:59">(<argument pos:start="441:20" pos:end="441:25"><expr pos:start="441:20" pos:end="441:25"><name pos:start="441:20" pos:end="441:25">fw_cfg</name></expr></argument>, <argument pos:start="441:28" pos:end="441:45"><expr pos:start="441:28" pos:end="441:45"><name pos:start="441:28" pos:end="441:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="441:48" pos:end="441:58"><expr pos:start="441:48" pos:end="441:58"><name pos:start="441:48" pos:end="441:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="443:5" pos:end="453:5"><if pos:start="443:5" pos:end="449:5">if <condition pos:start="443:8" pos:end="443:23">(<expr pos:start="443:9" pos:end="443:22"><name pos:start="443:9" pos:end="443:22">kernel_cmdline</name></expr>)</condition> <block pos:start="443:25" pos:end="449:5">{<block_content pos:start="445:9" pos:end="447:84">

        <expr_stmt pos:start="445:9" pos:end="445:68"><expr pos:start="445:9" pos:end="445:67"><call pos:start="445:9" pos:end="445:67"><name pos:start="445:9" pos:end="445:22">fw_cfg_add_i32</name><argument_list pos:start="445:23" pos:end="445:67">(<argument pos:start="445:24" pos:end="445:29"><expr pos:start="445:24" pos:end="445:29"><name pos:start="445:24" pos:end="445:29">fw_cfg</name></expr></argument>, <argument pos:start="445:32" pos:end="445:52"><expr pos:start="445:32" pos:end="445:52"><name pos:start="445:32" pos:end="445:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="445:55" pos:end="445:66"><expr pos:start="445:55" pos:end="445:66"><name pos:start="445:55" pos:end="445:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:84"><expr pos:start="447:9" pos:end="447:83"><call pos:start="447:9" pos:end="447:83"><name pos:start="447:9" pos:end="447:24">pstrcpy_targphys</name><argument_list pos:start="447:25" pos:end="447:83">(<argument pos:start="447:26" pos:end="447:34"><expr pos:start="447:26" pos:end="447:34"><literal type="string" pos:start="447:26" pos:end="447:34">"cmdline"</literal></expr></argument>, <argument pos:start="447:37" pos:end="447:48"><expr pos:start="447:37" pos:end="447:48"><name pos:start="447:37" pos:end="447:48">cmdline_base</name></expr></argument>, <argument pos:start="447:51" pos:end="447:66"><expr pos:start="447:51" pos:end="447:66"><name pos:start="447:51" pos:end="447:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="447:69" pos:end="447:82"><expr pos:start="447:69" pos:end="447:82"><name pos:start="447:69" pos:end="447:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="449:7" pos:end="453:5">else <block pos:start="449:12" pos:end="453:5">{<block_content pos:start="451:9" pos:end="451:57">

        <expr_stmt pos:start="451:9" pos:end="451:57"><expr pos:start="451:9" pos:end="451:56"><call pos:start="451:9" pos:end="451:56"><name pos:start="451:9" pos:end="451:22">fw_cfg_add_i32</name><argument_list pos:start="451:23" pos:end="451:56">(<argument pos:start="451:24" pos:end="451:29"><expr pos:start="451:24" pos:end="451:29"><name pos:start="451:24" pos:end="451:29">fw_cfg</name></expr></argument>, <argument pos:start="451:32" pos:end="451:52"><expr pos:start="451:32" pos:end="451:52"><name pos:start="451:32" pos:end="451:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="451:55" pos:end="451:55"><expr pos:start="451:55" pos:end="451:55"><literal type="number" pos:start="451:55" pos:end="451:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="455:5" pos:end="455:60"><expr pos:start="455:5" pos:end="455:59"><call pos:start="455:5" pos:end="455:59"><name pos:start="455:5" pos:end="455:18">fw_cfg_add_i32</name><argument_list pos:start="455:19" pos:end="455:59">(<argument pos:start="455:20" pos:end="455:25"><expr pos:start="455:20" pos:end="455:25"><name pos:start="455:20" pos:end="455:25">fw_cfg</name></expr></argument>, <argument pos:start="455:28" pos:end="455:45"><expr pos:start="455:28" pos:end="455:45"><name pos:start="455:28" pos:end="455:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="455:48" pos:end="455:58"><expr pos:start="455:48" pos:end="455:58"><name pos:start="455:48" pos:end="455:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="457:5" pos:end="457:60"><expr pos:start="457:5" pos:end="457:59"><call pos:start="457:5" pos:end="457:59"><name pos:start="457:5" pos:end="457:18">fw_cfg_add_i32</name><argument_list pos:start="457:19" pos:end="457:59">(<argument pos:start="457:20" pos:end="457:25"><expr pos:start="457:20" pos:end="457:25"><name pos:start="457:20" pos:end="457:25">fw_cfg</name></expr></argument>, <argument pos:start="457:28" pos:end="457:45"><expr pos:start="457:28" pos:end="457:45"><name pos:start="457:28" pos:end="457:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="457:48" pos:end="457:58"><expr pos:start="457:48" pos:end="457:58"><name pos:start="457:48" pos:end="457:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="459:5" pos:end="459:64"><expr pos:start="459:5" pos:end="459:63"><call pos:start="459:5" pos:end="459:63"><name pos:start="459:5" pos:end="459:18">fw_cfg_add_i16</name><argument_list pos:start="459:19" pos:end="459:63">(<argument pos:start="459:20" pos:end="459:25"><expr pos:start="459:20" pos:end="459:25"><name pos:start="459:20" pos:end="459:25">fw_cfg</name></expr></argument>, <argument pos:start="459:28" pos:end="459:45"><expr pos:start="459:28" pos:end="459:45"><name pos:start="459:28" pos:end="459:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="459:48" pos:end="459:62"><expr pos:start="459:48" pos:end="459:62"><name pos:start="459:48" pos:end="459:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="463:5" pos:end="463:60"><expr pos:start="463:5" pos:end="463:59"><call pos:start="463:5" pos:end="463:59"><name pos:start="463:5" pos:end="463:18">fw_cfg_add_i16</name><argument_list pos:start="463:19" pos:end="463:59">(<argument pos:start="463:20" pos:end="463:25"><expr pos:start="463:20" pos:end="463:25"><name pos:start="463:20" pos:end="463:25">fw_cfg</name></expr></argument>, <argument pos:start="463:28" pos:end="463:43"><expr pos:start="463:28" pos:end="463:43"><name pos:start="463:28" pos:end="463:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="463:46" pos:end="463:58"><expr pos:start="463:46" pos:end="463:58"><name pos:start="463:46" pos:end="463:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:62"><expr pos:start="465:5" pos:end="465:61"><call pos:start="465:5" pos:end="465:61"><name pos:start="465:5" pos:end="465:18">fw_cfg_add_i16</name><argument_list pos:start="465:19" pos:end="465:61">(<argument pos:start="465:20" pos:end="465:25"><expr pos:start="465:20" pos:end="465:25"><name pos:start="465:20" pos:end="465:25">fw_cfg</name></expr></argument>, <argument pos:start="465:28" pos:end="465:44"><expr pos:start="465:28" pos:end="465:44"><name pos:start="465:28" pos:end="465:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="465:47" pos:end="465:60"><expr pos:start="465:47" pos:end="465:60"><name pos:start="465:47" pos:end="465:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="467:60"><expr pos:start="467:5" pos:end="467:59"><call pos:start="467:5" pos:end="467:59"><name pos:start="467:5" pos:end="467:18">fw_cfg_add_i16</name><argument_list pos:start="467:19" pos:end="467:59">(<argument pos:start="467:20" pos:end="467:25"><expr pos:start="467:20" pos:end="467:25"><name pos:start="467:20" pos:end="467:25">fw_cfg</name></expr></argument>, <argument pos:start="467:28" pos:end="467:43"><expr pos:start="467:28" pos:end="467:43"><name pos:start="467:28" pos:end="467:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="467:46" pos:end="467:58"><expr pos:start="467:46" pos:end="467:58"><name pos:start="467:46" pos:end="467:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="471:5" pos:end="471:61"><expr pos:start="471:5" pos:end="471:60"><call pos:start="471:5" pos:end="471:60"><name pos:start="471:5" pos:end="471:18">fw_cfg_add_i32</name><argument_list pos:start="471:19" pos:end="471:60">(<argument pos:start="471:20" pos:end="471:25"><expr pos:start="471:20" pos:end="471:25"><name pos:start="471:20" pos:end="471:25">fw_cfg</name></expr></argument>, <argument pos:start="471:28" pos:end="471:44"><expr pos:start="471:28" pos:end="471:44"><name pos:start="471:28" pos:end="471:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="471:47" pos:end="471:59"><expr pos:start="471:47" pos:end="471:59"><call pos:start="471:47" pos:end="471:59"><name pos:start="471:47" pos:end="471:57">kvm_enabled</name><argument_list pos:start="471:58" pos:end="471:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="473:5" pos:end="497:5"><if pos:start="473:5" pos:end="493:5">if <condition pos:start="473:8" pos:end="473:22">(<expr pos:start="473:9" pos:end="473:21"><call pos:start="473:9" pos:end="473:21"><name pos:start="473:9" pos:end="473:19">kvm_enabled</name><argument_list pos:start="473:20" pos:end="473:21">()</argument_list></call></expr>)</condition> <block pos:start="473:24" pos:end="493:5">{<block_content pos:start="477:9" pos:end="492:0">

<cpp:ifdef pos:start="475:1" pos:end="475:17">#<cpp:directive pos:start="475:2" pos:end="475:6">ifdef</cpp:directive> <name pos:start="475:8" pos:end="475:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="477:9" pos:end="477:27"><decl pos:start="477:9" pos:end="477:26"><type pos:start="477:9" pos:end="477:17"><name pos:start="477:9" pos:end="477:15">uint8_t</name> <modifier pos:start="477:17" pos:end="477:17">*</modifier></type><name pos:start="477:18" pos:end="477:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="481:9" pos:end="481:71"><expr pos:start="481:9" pos:end="481:70"><call pos:start="481:9" pos:end="481:70"><name pos:start="481:9" pos:end="481:22">fw_cfg_add_i32</name><argument_list pos:start="481:23" pos:end="481:70">(<argument pos:start="481:24" pos:end="481:29"><expr pos:start="481:24" pos:end="481:29"><name pos:start="481:24" pos:end="481:29">fw_cfg</name></expr></argument>, <argument pos:start="481:32" pos:end="481:48"><expr pos:start="481:32" pos:end="481:48"><name pos:start="481:32" pos:end="481:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="481:51" pos:end="481:69"><expr pos:start="481:51" pos:end="481:69"><call pos:start="481:51" pos:end="481:69"><name pos:start="481:51" pos:end="481:67">kvmppc_get_tbfreq</name><argument_list pos:start="481:68" pos:end="481:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="483:9" pos:end="483:33"><expr pos:start="483:9" pos:end="483:32"><name pos:start="483:9" pos:end="483:17">hypercall</name> <operator pos:start="483:19" pos:end="483:19">=</operator> <call pos:start="483:21" pos:end="483:32"><name pos:start="483:21" pos:end="483:28">g_malloc</name><argument_list pos:start="483:29" pos:end="483:32">(<argument pos:start="483:30" pos:end="483:31"><expr pos:start="483:30" pos:end="483:31"><literal type="number" pos:start="483:30" pos:end="483:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:49"><expr pos:start="485:9" pos:end="485:48"><call pos:start="485:9" pos:end="485:48"><name pos:start="485:9" pos:end="485:28">kvmppc_get_hypercall</name><argument_list pos:start="485:29" pos:end="485:48">(<argument pos:start="485:30" pos:end="485:32"><expr pos:start="485:30" pos:end="485:32"><name pos:start="485:30" pos:end="485:32">env</name></expr></argument>, <argument pos:start="485:35" pos:end="485:43"><expr pos:start="485:35" pos:end="485:43"><name pos:start="485:35" pos:end="485:43">hypercall</name></expr></argument>, <argument pos:start="485:46" pos:end="485:47"><expr pos:start="485:46" pos:end="485:47"><literal type="number" pos:start="485:46" pos:end="485:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:67"><expr pos:start="487:9" pos:end="487:66"><call pos:start="487:9" pos:end="487:66"><name pos:start="487:9" pos:end="487:24">fw_cfg_add_bytes</name><argument_list pos:start="487:25" pos:end="487:66">(<argument pos:start="487:26" pos:end="487:31"><expr pos:start="487:26" pos:end="487:31"><name pos:start="487:26" pos:end="487:31">fw_cfg</name></expr></argument>, <argument pos:start="487:34" pos:end="487:50"><expr pos:start="487:34" pos:end="487:50"><name pos:start="487:34" pos:end="487:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="487:53" pos:end="487:61"><expr pos:start="487:53" pos:end="487:61"><name pos:start="487:53" pos:end="487:61">hypercall</name></expr></argument>, <argument pos:start="487:64" pos:end="487:65"><expr pos:start="487:64" pos:end="487:65"><literal type="number" pos:start="487:64" pos:end="487:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="489:9" pos:end="492:0"><expr pos:start="489:9" pos:end="489:60"><call pos:start="489:9" pos:end="489:60"><name pos:start="489:9" pos:end="489:22">fw_cfg_add_i32</name><argument_list pos:start="489:23" pos:end="489:60">(<argument pos:start="489:24" pos:end="489:29"><expr pos:start="489:24" pos:end="489:29"><name pos:start="489:24" pos:end="489:29">fw_cfg</name></expr></argument>, <argument pos:start="489:32" pos:end="489:49"><expr pos:start="489:32" pos:end="489:49"><name pos:start="489:32" pos:end="489:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="489:52" pos:end="489:59"><expr pos:start="489:52" pos:end="489:59"><call pos:start="489:52" pos:end="489:59"><name pos:start="489:52" pos:end="489:57">getpid</name><argument_list pos:start="489:58" pos:end="489:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="491:1" pos:end="491:6">#<cpp:directive pos:start="491:2" pos:end="491:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="493:7" pos:end="497:5">else <block pos:start="493:12" pos:end="497:5">{<block_content pos:start="495:9" pos:end="495:71">

        <expr_stmt pos:start="495:9" pos:end="495:71"><expr pos:start="495:9" pos:end="495:70"><call pos:start="495:9" pos:end="495:70"><name pos:start="495:9" pos:end="495:22">fw_cfg_add_i32</name><argument_list pos:start="495:23" pos:end="495:70">(<argument pos:start="495:24" pos:end="495:29"><expr pos:start="495:24" pos:end="495:29"><name pos:start="495:24" pos:end="495:29">fw_cfg</name></expr></argument>, <argument pos:start="495:32" pos:end="495:48"><expr pos:start="495:32" pos:end="495:48"><name pos:start="495:32" pos:end="495:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="495:51" pos:end="495:69"><expr pos:start="495:51" pos:end="495:69"><call pos:start="495:51" pos:end="495:69"><name pos:start="495:51" pos:end="495:67">get_ticks_per_sec</name><argument_list pos:start="495:68" pos:end="495:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="501:5" pos:end="501:52"><expr pos:start="501:5" pos:end="501:51"><call pos:start="501:5" pos:end="501:51"><name pos:start="501:5" pos:end="501:26">qemu_register_boot_set</name><argument_list pos:start="501:27" pos:end="501:51">(<argument pos:start="501:28" pos:end="501:42"><expr pos:start="501:28" pos:end="501:42"><name pos:start="501:28" pos:end="501:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="501:45" pos:end="501:50"><expr pos:start="501:45" pos:end="501:50"><name pos:start="501:45" pos:end="501:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
