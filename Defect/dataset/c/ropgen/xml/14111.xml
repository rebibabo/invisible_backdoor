<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14111.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">virtio_blk_data_plane_create</name><parameter_list pos:start="1:34" pos:end="5:47">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:46">VirtIODevice</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">vdev</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:72"><decl pos:start="1:55" pos:end="1:72"><type pos:start="1:55" pos:end="1:72"><name pos:start="1:55" pos:end="1:67">VirtIOBlkConf</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">blk</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:66"><decl pos:start="3:35" pos:end="3:66"><type pos:start="3:35" pos:end="3:66"><name pos:start="3:35" pos:end="3:54">VirtIOBlockDataPlane</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:66">dataplane</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:46"><decl pos:start="5:35" pos:end="5:46"><type pos:start="5:35" pos:end="5:46"><name pos:start="5:35" pos:end="5:39">Error</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="119:1">{<block_content pos:start="9:5" pos:end="117:19">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24">VirtIOBlockDataPlane</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:27">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><operator pos:start="15:5" pos:end="15:5">*</operator><name pos:start="15:6" pos:end="15:14">dataplane</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <name pos:start="15:18" pos:end="15:21">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:25">(<expr pos:start="19:9" pos:end="19:24"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:12">blk</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:24">data_plane</name></name></expr>)</condition> <block pos:start="19:27" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:11">blk</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:17">scsi</name></name></expr>)</condition> <block pos:start="27:20" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:15">

        <expr_stmt pos:start="29:9" pos:end="31:77"><expr pos:start="29:9" pos:end="31:76"><call pos:start="29:9" pos:end="31:76"><name pos:start="29:9" pos:end="29:18">error_setg</name><argument_list pos:start="29:19" pos:end="31:76">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">errp</name></expr></argument>,

                   <argument pos:start="31:20" pos:end="31:75"><expr pos:start="31:20" pos:end="31:75"><literal type="string" pos:start="31:20" pos:end="31:75">"device is incompatible with x-data-plane, use scsi=off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:24">(<expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:11">blk</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:23">config_wce</name></name></expr>)</condition> <block pos:start="39:26" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:15">

        <expr_stmt pos:start="41:9" pos:end="43:47"><expr pos:start="41:9" pos:end="43:46"><call pos:start="41:9" pos:end="43:46"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="43:46">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="43:45"><expr pos:start="41:26" pos:end="43:45"><literal type="string" pos:start="41:26" pos:end="41:69">"device is incompatible with x-data-plane, "</literal>

                         <literal type="string" pos:start="43:26" pos:end="43:45">"use config-wce=off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="55:7">/* If dataplane is (re-)enabled while the guest is running there could be

     * block jobs that can conflict.

     */</comment>

    <if_stmt pos:start="57:5" pos:end="67:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:78">(<expr pos:start="57:9" pos:end="57:77"><call pos:start="57:9" pos:end="57:77"><name pos:start="57:9" pos:end="57:26">bdrv_op_is_blocked</name><argument_list pos:start="57:27" pos:end="57:77">(<argument pos:start="57:28" pos:end="57:39"><expr pos:start="57:28" pos:end="57:39"><name pos:start="57:28" pos:end="57:39"><name pos:start="57:28" pos:end="57:30">blk</name><operator pos:start="57:31" pos:end="57:32">-&gt;</operator><name pos:start="57:33" pos:end="57:36">conf</name><operator pos:start="57:37" pos:end="57:37">.</operator><name pos:start="57:38" pos:end="57:39">bs</name></name></expr></argument>, <argument pos:start="57:42" pos:end="57:64"><expr pos:start="57:42" pos:end="57:64"><name pos:start="57:42" pos:end="57:64">BLOCK_OP_TYPE_DATAPLANE</name></expr></argument>, <argument pos:start="57:67" pos:end="57:76"><expr pos:start="57:67" pos:end="57:76"><operator pos:start="57:67" pos:end="57:67">&amp;</operator><name pos:start="57:68" pos:end="57:76">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:80" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:15">

        <expr_stmt pos:start="59:9" pos:end="61:51"><expr pos:start="59:9" pos:end="61:50"><call pos:start="59:9" pos:end="61:50"><name pos:start="59:9" pos:end="59:20">error_report</name><argument_list pos:start="59:21" pos:end="61:50">(<argument pos:start="59:22" pos:end="59:56"><expr pos:start="59:22" pos:end="59:56"><literal type="string" pos:start="59:22" pos:end="59:56">"cannot start dataplane thread: %s"</literal></expr></argument>,

                      <argument pos:start="61:23" pos:end="61:49"><expr pos:start="61:23" pos:end="61:49"><call pos:start="61:23" pos:end="61:49"><name pos:start="61:23" pos:end="61:38">error_get_pretty</name><argument_list pos:start="61:39" pos:end="61:49">(<argument pos:start="61:40" pos:end="61:48"><expr pos:start="61:40" pos:end="61:48"><name pos:start="61:40" pos:end="61:48">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:30"><expr pos:start="63:9" pos:end="63:29"><call pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:18">error_free</name><argument_list pos:start="63:19" pos:end="63:29">(<argument pos:start="63:20" pos:end="63:28"><expr pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:40"><expr pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:5">s</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <call pos:start="71:9" pos:end="71:39"><name pos:start="71:9" pos:end="71:14">g_new0</name><argument_list pos:start="71:15" pos:end="71:39">(<argument pos:start="71:16" pos:end="71:35"><expr pos:start="71:16" pos:end="71:35"><name pos:start="71:16" pos:end="71:35">VirtIOBlockDataPlane</name></expr></argument>, <argument pos:start="71:38" pos:end="71:38"><expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:11"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:11">vdev</name></name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:18">vdev</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:10"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:10">blk</name></name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:16">blk</name></expr>;</expr_stmt>



    <if_stmt pos:start="79:5" pos:end="105:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:22">(<expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:11">blk</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:21">iothread</name></name></expr>)</condition> <block pos:start="79:24" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:40">

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:19">iothread</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:35"><name pos:start="81:23" pos:end="81:25">blk</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:35">iothread</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:40"><expr pos:start="83:9" pos:end="83:39"><call pos:start="83:9" pos:end="83:39"><name pos:start="83:9" pos:end="83:18">object_ref</name><argument_list pos:start="83:19" pos:end="83:39">(<argument pos:start="83:20" pos:end="83:38"><expr pos:start="83:20" pos:end="83:38"><call pos:start="83:20" pos:end="83:38"><name pos:start="83:20" pos:end="83:25">OBJECT</name><argument_list pos:start="83:26" pos:end="83:38">(<argument pos:start="83:27" pos:end="83:37"><expr pos:start="83:27" pos:end="83:37"><name pos:start="83:27" pos:end="83:37"><name pos:start="83:27" pos:end="83:27">s</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:37">iothread</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="105:5">else <block pos:start="85:12" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:48">

        <comment type="block" pos:start="87:9" pos:end="93:11">/* Create per-device IOThread if none specified.  This is for

         * x-data-plane option compatibility.  If x-data-plane is removed we

         * can drop this.

         */</comment>

        <expr_stmt pos:start="95:9" pos:end="99:41"><expr pos:start="95:9" pos:end="99:40"><call pos:start="95:9" pos:end="99:40"><name pos:start="95:9" pos:end="95:25">object_initialize</name><argument_list pos:start="95:26" pos:end="99:40">(<argument pos:start="95:27" pos:end="95:51"><expr pos:start="95:27" pos:end="95:51"><operator pos:start="95:27" pos:end="95:27">&amp;</operator><name pos:start="95:28" pos:end="95:51"><name pos:start="95:28" pos:end="95:28">s</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:51">internal_iothread_obj</name></name></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:58"><expr pos:start="97:27" pos:end="97:58"><sizeof pos:start="97:27" pos:end="97:58">sizeof<argument_list pos:start="97:33" pos:end="97:58">(<argument pos:start="97:34" pos:end="97:57"><expr pos:start="97:34" pos:end="97:57"><name pos:start="97:34" pos:end="97:57"><name pos:start="97:34" pos:end="97:34">s</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:57">internal_iothread_obj</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                          <argument pos:start="99:27" pos:end="99:39"><expr pos:start="99:27" pos:end="99:39"><name pos:start="99:27" pos:end="99:39">TYPE_IOTHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:81"><expr pos:start="101:9" pos:end="101:80"><call pos:start="101:9" pos:end="101:80"><name pos:start="101:9" pos:end="101:31">user_creatable_complete</name><argument_list pos:start="101:32" pos:end="101:80">(<argument pos:start="101:33" pos:end="101:65"><expr pos:start="101:33" pos:end="101:65"><call pos:start="101:33" pos:end="101:65"><name pos:start="101:33" pos:end="101:38">OBJECT</name><argument_list pos:start="101:39" pos:end="101:65">(<argument pos:start="101:40" pos:end="101:64"><expr pos:start="101:40" pos:end="101:64"><operator pos:start="101:40" pos:end="101:40">&amp;</operator><name pos:start="101:41" pos:end="101:64"><name pos:start="101:41" pos:end="101:41">s</name><operator pos:start="101:42" pos:end="101:43">-&gt;</operator><name pos:start="101:44" pos:end="101:64">internal_iothread_obj</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:68" pos:end="101:79"><expr pos:start="101:68" pos:end="101:79"><operator pos:start="101:68" pos:end="101:68">&amp;</operator><name pos:start="101:69" pos:end="101:79">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:48"><expr pos:start="103:9" pos:end="103:47"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:19">iothread</name></name> <operator pos:start="103:21" pos:end="103:21">=</operator> <operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:47"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:47">internal_iothread_obj</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:10"><name pos:start="107:5" pos:end="107:5">s</name><operator pos:start="107:6" pos:end="107:7">-&gt;</operator><name pos:start="107:8" pos:end="107:10">ctx</name></name> <operator pos:start="107:12" pos:end="107:12">=</operator> <call pos:start="107:14" pos:end="107:50"><name pos:start="107:14" pos:end="107:37">iothread_get_aio_context</name><argument_list pos:start="107:38" pos:end="107:50">(<argument pos:start="107:39" pos:end="107:49"><expr pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:39">s</name><operator pos:start="107:40" pos:end="107:41">-&gt;</operator><name pos:start="107:42" pos:end="107:49">iothread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:68"><expr pos:start="111:5" pos:end="111:67"><call pos:start="111:5" pos:end="111:67"><name pos:start="111:5" pos:end="111:14">error_setg</name><argument_list pos:start="111:15" pos:end="111:67">(<argument pos:start="111:16" pos:end="111:26"><expr pos:start="111:16" pos:end="111:26"><operator pos:start="111:16" pos:end="111:16">&amp;</operator><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:26">blocker</name></name></expr></argument>, <argument pos:start="111:29" pos:end="111:66"><expr pos:start="111:29" pos:end="111:66"><literal type="string" pos:start="111:29" pos:end="111:66">"block device is in use by data plane"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:48"><expr pos:start="113:5" pos:end="113:47"><call pos:start="113:5" pos:end="113:47"><name pos:start="113:5" pos:end="113:21">bdrv_op_block_all</name><argument_list pos:start="113:22" pos:end="113:47">(<argument pos:start="113:23" pos:end="113:34"><expr pos:start="113:23" pos:end="113:34"><name pos:start="113:23" pos:end="113:34"><name pos:start="113:23" pos:end="113:25">blk</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:31">conf</name><operator pos:start="113:32" pos:end="113:32">.</operator><name pos:start="113:33" pos:end="113:34">bs</name></name></expr></argument>, <argument pos:start="113:37" pos:end="113:46"><expr pos:start="113:37" pos:end="113:46"><name pos:start="113:37" pos:end="113:46"><name pos:start="113:37" pos:end="113:37">s</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:46">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:19"><expr pos:start="117:5" pos:end="117:18"><operator pos:start="117:5" pos:end="117:5">*</operator><name pos:start="117:6" pos:end="117:14">dataplane</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <name pos:start="117:18" pos:end="117:18">s</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
