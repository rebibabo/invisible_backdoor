<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25275.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">commit_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:41">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">CommitBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">active</name> <init pos:start="7:30" pos:end="7:40">= <expr pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:32">s</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:40">active</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">top</name> <init pos:start="9:27" pos:end="9:34">= <expr pos:start="9:29" pos:end="9:34"><name pos:start="9:29" pos:end="9:34"><name pos:start="9:29" pos:end="9:29">s</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:34">top</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">base</name> <init pos:start="11:28" pos:end="11:36">= <expr pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:30">s</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:32">overlay_bs</name> <init pos:start="13:34" pos:end="13:39">= <expr pos:start="13:36" pos:end="13:39"><name pos:start="13:36" pos:end="13:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name></decl>, <decl pos:start="15:25" pos:end="15:27"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:25" pos:end="15:27">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">n</name> <init pos:start="19:11" pos:end="19:13">= <expr pos:start="19:13" pos:end="19:13"><literal type="number" pos:start="19:13" pos:end="19:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:26"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:21">bytes_written</name> <init pos:start="23:23" pos:end="23:25">= <expr pos:start="23:25" pos:end="23:25"><literal type="number" pos:start="23:25" pos:end="23:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int64_t</name></type> <name pos:start="25:13" pos:end="25:20">base_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <name pos:start="29:11" pos:end="29:23"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:19">common</name><operator pos:start="29:20" pos:end="29:20">.</operator><name pos:start="29:21" pos:end="29:23">len</name></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <call pos:start="29:27" pos:end="29:45"><name pos:start="29:27" pos:end="29:40">bdrv_getlength</name><argument_list pos:start="29:41" pos:end="29:45">(<argument pos:start="29:42" pos:end="29:44"><expr pos:start="29:42" pos:end="29:44"><name pos:start="29:42" pos:end="29:44">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:26">(<expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:17">common</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:21">len</name></name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">0</literal></expr>)</condition> <block pos:start="35:28" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:33">

        <goto pos:start="37:9" pos:end="37:33">goto <name pos:start="37:14" pos:end="37:32">exit_restore_reopen</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:42"><expr pos:start="43:5" pos:end="43:41"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <name pos:start="43:11" pos:end="43:18">base_len</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:41"><name pos:start="43:22" pos:end="43:35">bdrv_getlength</name><argument_list pos:start="43:36" pos:end="43:41">(<argument pos:start="43:37" pos:end="43:40"><expr pos:start="43:37" pos:end="43:40"><name pos:start="43:37" pos:end="43:40">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:21">(<expr pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:16">base_len</name> <operator pos:start="45:18" pos:end="45:18">&lt;</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>)</condition> <block pos:start="45:23" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:33">

        <goto pos:start="47:9" pos:end="47:33">goto <name pos:start="47:14" pos:end="47:32">exit_restore_reopen</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:33">(<expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:16">base_len</name> <operator pos:start="53:18" pos:end="53:18">&lt;</operator> <name pos:start="53:20" pos:end="53:32"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:28">common</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:32">len</name></name></expr>)</condition> <block pos:start="53:35" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:9">

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:48"><name pos:start="55:15" pos:end="55:27">bdrv_truncate</name><argument_list pos:start="55:28" pos:end="55:48">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">base</name></expr></argument>, <argument pos:start="55:35" pos:end="55:47"><expr pos:start="55:35" pos:end="55:47"><name pos:start="55:35" pos:end="55:47"><name pos:start="55:35" pos:end="55:35">s</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:43">common</name><operator pos:start="55:44" pos:end="55:44">.</operator><name pos:start="55:45" pos:end="55:47">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:16">(<expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">ret</name></expr>)</condition> <block pos:start="57:18" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:37">

            <goto pos:start="59:13" pos:end="59:37">goto <name pos:start="59:18" pos:end="59:36">exit_restore_reopen</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:48"><expr pos:start="67:5" pos:end="67:47"><name pos:start="67:5" pos:end="67:14">overlay_bs</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:47"><name pos:start="67:18" pos:end="67:34">bdrv_find_overlay</name><argument_list pos:start="67:35" pos:end="67:47">(<argument pos:start="67:36" pos:end="67:41"><expr pos:start="67:36" pos:end="67:41"><name pos:start="67:36" pos:end="67:41">active</name></expr></argument>, <argument pos:start="67:44" pos:end="67:46"><expr pos:start="67:44" pos:end="67:46"><name pos:start="67:44" pos:end="67:46">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:44"><expr pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:7">end</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <name pos:start="71:11" pos:end="71:23"><name pos:start="71:11" pos:end="71:11">s</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:19">common</name><operator pos:start="71:20" pos:end="71:20">.</operator><name pos:start="71:21" pos:end="71:23">len</name></name> <operator pos:start="71:25" pos:end="71:26">&gt;&gt;</operator> <name pos:start="71:28" pos:end="71:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:51"><expr pos:start="73:5" pos:end="73:50"><name pos:start="73:5" pos:end="73:7">buf</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:50"><name pos:start="73:11" pos:end="73:25">qemu_blockalign</name><argument_list pos:start="73:26" pos:end="73:50">(<argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">top</name></expr></argument>, <argument pos:start="73:32" pos:end="73:49"><expr pos:start="73:32" pos:end="73:49"><name pos:start="73:32" pos:end="73:49">COMMIT_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="157:5">for <control pos:start="77:9" pos:end="77:59">(<init pos:start="77:10" pos:end="77:24"><expr pos:start="77:10" pos:end="77:23"><name pos:start="77:10" pos:end="77:19">sector_num</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>;</init> <condition pos:start="77:26" pos:end="77:42"><expr pos:start="77:26" pos:end="77:41"><name pos:start="77:26" pos:end="77:35">sector_num</name> <operator pos:start="77:37" pos:end="77:37">&lt;</operator> <name pos:start="77:39" pos:end="77:41">end</name></expr>;</condition> <incr pos:start="77:44" pos:end="77:58"><expr pos:start="77:44" pos:end="77:58"><name pos:start="77:44" pos:end="77:53">sector_num</name> <operator pos:start="77:55" pos:end="77:56">+=</operator> <name pos:start="77:58" pos:end="77:58">n</name></expr></incr>)</control> <block pos:start="77:61" pos:end="157:5">{<block_content pos:start="79:9" pos:end="155:49">

        <decl_stmt pos:start="79:9" pos:end="79:30"><decl pos:start="79:9" pos:end="79:29"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint64_t</name></type> <name pos:start="79:18" pos:end="79:25">delay_ns</name> <init pos:start="79:27" pos:end="79:29">= <expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:18"><decl pos:start="81:9" pos:end="81:17"><type pos:start="81:9" pos:end="81:12"><name pos:start="81:9" pos:end="81:12">bool</name></type> <name pos:start="81:14" pos:end="81:17">copy</name></decl>;</decl_stmt>



<label pos:start="85:1" pos:end="85:5"><name pos:start="85:1" pos:end="85:4">wait</name>:</label>

        <comment type="block" pos:start="87:9" pos:end="91:11">/* Note that even when no rate limit is applied we need to yield

         * with no pending I/O here so that bdrv_drain_all() returns.

         */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:59"><expr pos:start="93:9" pos:end="93:58"><call pos:start="93:9" pos:end="93:58"><name pos:start="93:9" pos:end="93:26">block_job_sleep_ns</name><argument_list pos:start="93:27" pos:end="93:58">(<argument pos:start="93:28" pos:end="93:37"><expr pos:start="93:28" pos:end="93:37"><operator pos:start="93:28" pos:end="93:28">&amp;</operator><name pos:start="93:29" pos:end="93:37"><name pos:start="93:29" pos:end="93:29">s</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:37">common</name></name></expr></argument>, <argument pos:start="93:40" pos:end="93:47"><expr pos:start="93:40" pos:end="93:47"><name pos:start="93:40" pos:end="93:47">rt_clock</name></expr></argument>, <argument pos:start="93:50" pos:end="93:57"><expr pos:start="93:50" pos:end="93:57"><name pos:start="93:50" pos:end="93:57">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:47">(<expr pos:start="95:13" pos:end="95:46"><call pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:34">block_job_is_cancelled</name><argument_list pos:start="95:35" pos:end="95:46">(<argument pos:start="95:36" pos:end="95:45"><expr pos:start="95:36" pos:end="95:45"><operator pos:start="95:36" pos:end="95:36">&amp;</operator><name pos:start="95:37" pos:end="95:45"><name pos:start="95:37" pos:end="95:37">s</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:49" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:18">

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="101:9" pos:end="101:46">/* Copy if allocated above the base */</comment>

        <expr_stmt pos:start="103:9" pos:end="107:45"><expr pos:start="103:9" pos:end="107:44"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="107:44"><name pos:start="103:15" pos:end="103:40">bdrv_co_is_allocated_above</name><argument_list pos:start="103:41" pos:end="107:44">(<argument pos:start="103:42" pos:end="103:44"><expr pos:start="103:42" pos:end="103:44"><name pos:start="103:42" pos:end="103:44">top</name></expr></argument>, <argument pos:start="103:47" pos:end="103:50"><expr pos:start="103:47" pos:end="103:50"><name pos:start="103:47" pos:end="103:50">base</name></expr></argument>, <argument pos:start="103:53" pos:end="103:62"><expr pos:start="103:53" pos:end="103:62"><name pos:start="103:53" pos:end="103:62">sector_num</name></expr></argument>,

                                         <argument pos:start="105:42" pos:end="105:78"><expr pos:start="105:42" pos:end="105:78"><name pos:start="105:42" pos:end="105:59">COMMIT_BUFFER_SIZE</name> <operator pos:start="105:61" pos:end="105:61">/</operator> <name pos:start="105:63" pos:end="105:78">BDRV_SECTOR_SIZE</name></expr></argument>,

                                         <argument pos:start="107:42" pos:end="107:43"><expr pos:start="107:42" pos:end="107:43"><operator pos:start="107:42" pos:end="107:42">&amp;</operator><name pos:start="107:43" pos:end="107:43">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:12">copy</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <operator pos:start="109:16" pos:end="109:16">(</operator><name pos:start="109:17" pos:end="109:19">ret</name> <operator pos:start="109:21" pos:end="109:22">==</operator> <literal type="number" pos:start="109:24" pos:end="109:24">1</literal><operator pos:start="109:25" pos:end="109:25">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:58"><expr pos:start="111:9" pos:end="111:57"><call pos:start="111:9" pos:end="111:57"><name pos:start="111:9" pos:end="111:34">trace_commit_one_iteration</name><argument_list pos:start="111:35" pos:end="111:57">(<argument pos:start="111:36" pos:end="111:36"><expr pos:start="111:36" pos:end="111:36"><name pos:start="111:36" pos:end="111:36">s</name></expr></argument>, <argument pos:start="111:39" pos:end="111:48"><expr pos:start="111:39" pos:end="111:48"><name pos:start="111:39" pos:end="111:48">sector_num</name></expr></argument>, <argument pos:start="111:51" pos:end="111:51"><expr pos:start="111:51" pos:end="111:51"><name pos:start="111:51" pos:end="111:51">n</name></expr></argument>, <argument pos:start="111:54" pos:end="111:56"><expr pos:start="111:54" pos:end="111:56"><name pos:start="111:54" pos:end="111:56">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="131:9"><if pos:start="113:9" pos:end="131:9">if <condition pos:start="113:12" pos:end="113:17">(<expr pos:start="113:13" pos:end="113:16"><name pos:start="113:13" pos:end="113:16">copy</name></expr>)</condition> <block pos:start="113:19" pos:end="131:9">{<block_content pos:start="115:13" pos:end="129:50">

            <if_stmt pos:start="115:13" pos:end="125:13"><if pos:start="115:13" pos:end="125:13">if <condition pos:start="115:16" pos:end="115:32">(<expr pos:start="115:17" pos:end="115:31"><name pos:start="115:17" pos:end="115:31"><name pos:start="115:17" pos:end="115:17">s</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:25">common</name><operator pos:start="115:26" pos:end="115:26">.</operator><name pos:start="115:27" pos:end="115:31">speed</name></name></expr>)</condition> <block pos:start="115:34" pos:end="125:13">{<block_content pos:start="117:17" pos:end="123:17">

                <expr_stmt pos:start="117:17" pos:end="117:67"><expr pos:start="117:17" pos:end="117:66"><name pos:start="117:17" pos:end="117:24">delay_ns</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="117:66"><name pos:start="117:28" pos:end="117:52">ratelimit_calculate_delay</name><argument_list pos:start="117:53" pos:end="117:66">(<argument pos:start="117:54" pos:end="117:62"><expr pos:start="117:54" pos:end="117:62"><operator pos:start="117:54" pos:end="117:54">&amp;</operator><name pos:start="117:55" pos:end="117:62"><name pos:start="117:55" pos:end="117:55">s</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:62">limit</name></name></expr></argument>, <argument pos:start="117:65" pos:end="117:65"><expr pos:start="117:65" pos:end="117:65"><name pos:start="117:65" pos:end="117:65">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="123:17"><if pos:start="119:17" pos:end="123:17">if <condition pos:start="119:20" pos:end="119:33">(<expr pos:start="119:21" pos:end="119:32"><name pos:start="119:21" pos:end="119:28">delay_ns</name> <operator pos:start="119:30" pos:end="119:30">&gt;</operator> <literal type="number" pos:start="119:32" pos:end="119:32">0</literal></expr>)</condition> <block pos:start="119:35" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:30">

                    <goto pos:start="121:21" pos:end="121:30">goto <name pos:start="121:26" pos:end="121:29">wait</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:65"><expr pos:start="127:13" pos:end="127:64"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <call pos:start="127:19" pos:end="127:64"><name pos:start="127:19" pos:end="127:33">commit_populate</name><argument_list pos:start="127:34" pos:end="127:64">(<argument pos:start="127:35" pos:end="127:37"><expr pos:start="127:35" pos:end="127:37"><name pos:start="127:35" pos:end="127:37">top</name></expr></argument>, <argument pos:start="127:40" pos:end="127:43"><expr pos:start="127:40" pos:end="127:43"><name pos:start="127:40" pos:end="127:43">base</name></expr></argument>, <argument pos:start="127:46" pos:end="127:55"><expr pos:start="127:46" pos:end="127:55"><name pos:start="127:46" pos:end="127:55">sector_num</name></expr></argument>, <argument pos:start="127:58" pos:end="127:58"><expr pos:start="127:58" pos:end="127:58"><name pos:start="127:58" pos:end="127:58">n</name></expr></argument>, <argument pos:start="127:61" pos:end="127:63"><expr pos:start="127:61" pos:end="127:63"><name pos:start="127:61" pos:end="127:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:50"><expr pos:start="129:13" pos:end="129:49"><name pos:start="129:13" pos:end="129:25">bytes_written</name> <operator pos:start="129:27" pos:end="129:28">+=</operator> <name pos:start="129:30" pos:end="129:30">n</name> <operator pos:start="129:32" pos:end="129:32">*</operator> <name pos:start="129:34" pos:end="129:49">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="133:9" pos:end="151:9"><if pos:start="133:9" pos:end="151:9">if <condition pos:start="133:12" pos:end="133:20">(<expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>)</condition> <block pos:start="133:22" pos:end="151:9">{<block_content pos:start="135:13" pos:end="149:13">

            <if_stmt pos:start="135:13" pos:end="149:13"><if pos:start="135:13" pos:end="143:13">if <condition pos:start="135:16" pos:end="139:76">(<expr pos:start="135:17" pos:end="139:75"><name pos:start="135:17" pos:end="135:27"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:27">on_error</name></name> <operator pos:start="135:29" pos:end="135:30">==</operator> <name pos:start="135:32" pos:end="135:53">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="135:55" pos:end="135:56">||</operator>

                <name pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:17">s</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:27">on_error</name></name> <operator pos:start="137:29" pos:end="137:30">==</operator> <name pos:start="137:32" pos:end="137:55">BLOCKDEV_ON_ERROR_REPORT</name><operator pos:start="137:56" pos:end="137:57">||</operator>

                <operator pos:start="139:17" pos:end="139:17">(</operator><name pos:start="139:18" pos:end="139:28"><name pos:start="139:18" pos:end="139:18">s</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:28">on_error</name></name> <operator pos:start="139:30" pos:end="139:31">==</operator> <name pos:start="139:33" pos:end="139:56">BLOCKDEV_ON_ERROR_ENOSPC</name> <operator pos:start="139:58" pos:end="139:59">&amp;&amp;</operator> <name pos:start="139:61" pos:end="139:63">ret</name> <operator pos:start="139:65" pos:end="139:66">==</operator> <operator pos:start="139:68" pos:end="139:68">-</operator><name pos:start="139:69" pos:end="139:74">ENOSPC</name><operator pos:start="139:75" pos:end="139:75">)</operator></expr>)</condition> <block pos:start="139:78" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:35">

                <goto pos:start="141:17" pos:end="141:35">goto <name pos:start="141:22" pos:end="141:34">exit_free_buf</name>;</goto>

            </block_content>}</block></if> <else pos:start="143:15" pos:end="149:13">else <block pos:start="143:20" pos:end="149:13">{<block_content pos:start="145:17" pos:end="147:25">

                <expr_stmt pos:start="145:17" pos:end="145:22"><expr pos:start="145:17" pos:end="145:21"><name pos:start="145:17" pos:end="145:17">n</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <literal type="number" pos:start="145:21" pos:end="145:21">0</literal></expr>;</expr_stmt>

                <continue pos:start="147:17" pos:end="147:25">continue;</continue>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="153:9" pos:end="153:30">/* Publish progress */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:49"><expr pos:start="155:9" pos:end="155:48"><name pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:17">common</name><operator pos:start="155:18" pos:end="155:18">.</operator><name pos:start="155:19" pos:end="155:24">offset</name></name> <operator pos:start="155:26" pos:end="155:27">+=</operator> <name pos:start="155:29" pos:end="155:29">n</name> <operator pos:start="155:31" pos:end="155:31">*</operator> <name pos:start="155:33" pos:end="155:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="161:5" pos:end="161:12"><expr pos:start="161:5" pos:end="161:11"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <literal type="number" pos:start="161:11" pos:end="161:11">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="165:5" pos:end="171:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:65">(<expr pos:start="165:9" pos:end="165:64"><operator pos:start="165:9" pos:end="165:9">!</operator><call pos:start="165:10" pos:end="165:43"><name pos:start="165:10" pos:end="165:31">block_job_is_cancelled</name><argument_list pos:start="165:32" pos:end="165:43">(<argument pos:start="165:33" pos:end="165:42"><expr pos:start="165:33" pos:end="165:42"><operator pos:start="165:33" pos:end="165:33">&amp;</operator><name pos:start="165:34" pos:end="165:42"><name pos:start="165:34" pos:end="165:34">s</name><operator pos:start="165:35" pos:end="165:36">-&gt;</operator><name pos:start="165:37" pos:end="165:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="165:45" pos:end="165:46">&amp;&amp;</operator> <name pos:start="165:48" pos:end="165:57">sector_num</name> <operator pos:start="165:59" pos:end="165:60">==</operator> <name pos:start="165:62" pos:end="165:64">end</name></expr>)</condition> <block pos:start="165:67" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:56">

        <comment type="block" pos:start="167:9" pos:end="167:21">/* success */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:56"><expr pos:start="169:9" pos:end="169:55"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:55"><name pos:start="169:15" pos:end="169:36">bdrv_drop_intermediate</name><argument_list pos:start="169:37" pos:end="169:55">(<argument pos:start="169:38" pos:end="169:43"><expr pos:start="169:38" pos:end="169:43"><name pos:start="169:38" pos:end="169:43">active</name></expr></argument>, <argument pos:start="169:46" pos:end="169:48"><expr pos:start="169:46" pos:end="169:48"><name pos:start="169:46" pos:end="169:48">top</name></expr></argument>, <argument pos:start="169:51" pos:end="169:54"><expr pos:start="169:51" pos:end="169:54"><name pos:start="169:51" pos:end="169:54">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="175:1" pos:end="175:14"><name pos:start="175:1" pos:end="175:13">exit_free_buf</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:20"><expr pos:start="177:5" pos:end="177:19"><call pos:start="177:5" pos:end="177:19"><name pos:start="177:5" pos:end="177:14">qemu_vfree</name><argument_list pos:start="177:15" pos:end="177:19">(<argument pos:start="177:16" pos:end="177:18"><expr pos:start="177:16" pos:end="177:18"><name pos:start="177:16" pos:end="177:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="181:1" pos:end="181:20"><name pos:start="181:1" pos:end="181:19">exit_restore_reopen</name>:</label>

    <comment type="block" pos:start="183:5" pos:end="187:30">/* restore base open flags here if appropriate (e.g., change the base back

     * to r/o). These reopens do not need to be atomic, since we won't abort

     * even on failure here */</comment>

    <if_stmt pos:start="189:5" pos:end="193:5"><if pos:start="189:5" pos:end="193:5">if <condition pos:start="189:8" pos:end="189:46">(<expr pos:start="189:9" pos:end="189:45"><name pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:21">base_flags</name></name> <operator pos:start="189:23" pos:end="189:24">!=</operator> <call pos:start="189:26" pos:end="189:45"><name pos:start="189:26" pos:end="189:39">bdrv_get_flags</name><argument_list pos:start="189:40" pos:end="189:45">(<argument pos:start="189:41" pos:end="189:44"><expr pos:start="189:41" pos:end="189:44"><name pos:start="189:41" pos:end="189:44">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="189:48" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:47">

        <expr_stmt pos:start="191:9" pos:end="191:47"><expr pos:start="191:9" pos:end="191:46"><call pos:start="191:9" pos:end="191:46"><name pos:start="191:9" pos:end="191:19">bdrv_reopen</name><argument_list pos:start="191:20" pos:end="191:46">(<argument pos:start="191:21" pos:end="191:24"><expr pos:start="191:21" pos:end="191:24"><name pos:start="191:21" pos:end="191:24">base</name></expr></argument>, <argument pos:start="191:27" pos:end="191:39"><expr pos:start="191:27" pos:end="191:39"><name pos:start="191:27" pos:end="191:39"><name pos:start="191:27" pos:end="191:27">s</name><operator pos:start="191:28" pos:end="191:29">-&gt;</operator><name pos:start="191:30" pos:end="191:39">base_flags</name></name></expr></argument>, <argument pos:start="191:42" pos:end="191:45"><expr pos:start="191:42" pos:end="191:45"><name pos:start="191:42" pos:end="191:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="195:5" pos:end="199:5"><if pos:start="195:5" pos:end="199:5">if <condition pos:start="195:8" pos:end="195:60">(<expr pos:start="195:9" pos:end="195:59"><name pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:29">orig_overlay_flags</name></name> <operator pos:start="195:31" pos:end="195:32">!=</operator> <call pos:start="195:34" pos:end="195:59"><name pos:start="195:34" pos:end="195:47">bdrv_get_flags</name><argument_list pos:start="195:48" pos:end="195:59">(<argument pos:start="195:49" pos:end="195:58"><expr pos:start="195:49" pos:end="195:58"><name pos:start="195:49" pos:end="195:58">overlay_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:62" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:61">

        <expr_stmt pos:start="197:9" pos:end="197:61"><expr pos:start="197:9" pos:end="197:60"><call pos:start="197:9" pos:end="197:60"><name pos:start="197:9" pos:end="197:19">bdrv_reopen</name><argument_list pos:start="197:20" pos:end="197:60">(<argument pos:start="197:21" pos:end="197:30"><expr pos:start="197:21" pos:end="197:30"><name pos:start="197:21" pos:end="197:30">overlay_bs</name></expr></argument>, <argument pos:start="197:33" pos:end="197:53"><expr pos:start="197:33" pos:end="197:53"><name pos:start="197:33" pos:end="197:53"><name pos:start="197:33" pos:end="197:33">s</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:53">orig_overlay_flags</name></name></expr></argument>, <argument pos:start="197:56" pos:end="197:59"><expr pos:start="197:56" pos:end="197:59"><name pos:start="197:56" pos:end="197:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:41"><expr pos:start="203:5" pos:end="203:40"><call pos:start="203:5" pos:end="203:40"><name pos:start="203:5" pos:end="203:23">block_job_completed</name><argument_list pos:start="203:24" pos:end="203:40">(<argument pos:start="203:25" pos:end="203:34"><expr pos:start="203:25" pos:end="203:34"><operator pos:start="203:25" pos:end="203:25">&amp;</operator><name pos:start="203:26" pos:end="203:34"><name pos:start="203:26" pos:end="203:26">s</name><operator pos:start="203:27" pos:end="203:28">-&gt;</operator><name pos:start="203:29" pos:end="203:34">common</name></name></expr></argument>, <argument pos:start="203:37" pos:end="203:39"><expr pos:start="203:37" pos:end="203:39"><name pos:start="203:37" pos:end="203:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
