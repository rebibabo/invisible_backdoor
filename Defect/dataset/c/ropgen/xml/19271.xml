<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19271.c" pos:tabs="8"><function pos:start="1:1" pos:end="435:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">build_pci_bus_end</name><parameter_list pos:start="1:30" pos:end="1:59">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:36">PCIBus</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">bus</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:58">bus_state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="435:1">{<block_content pos:start="5:5" pos:end="433:18">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:33"><name pos:start="5:5" pos:end="5:31">AcpiBuildPciBusHotplugState</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:38">child</name> <init pos:start="5:40" pos:end="5:50">= <expr pos:start="5:42" pos:end="5:50"><name pos:start="5:42" pos:end="5:50">bus_state</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:31">AcpiBuildPciBusHotplugState</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:39">parent</name> <init pos:start="7:41" pos:end="7:55">= <expr pos:start="7:43" pos:end="7:55"><name pos:start="7:43" pos:end="7:55"><name pos:start="7:43" pos:end="7:47">child</name><operator pos:start="7:48" pos:end="7:49">-&gt;</operator><name pos:start="7:50" pos:end="7:55">parent</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">GArray</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:21">bus_table</name> <init pos:start="9:23" pos:end="9:43">= <expr pos:start="9:25" pos:end="9:43"><call pos:start="9:25" pos:end="9:43"><name pos:start="9:25" pos:end="9:41">build_alloc_array</name><argument_list pos:start="9:42" pos:end="9:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:54"><expr pos:start="11:5" pos:end="11:53"><call pos:start="11:5" pos:end="11:53"><name pos:start="11:5" pos:end="11:18">DECLARE_BITMAP</name><argument_list pos:start="11:19" pos:end="11:53">(<argument pos:start="11:20" pos:end="11:38"><expr pos:start="11:20" pos:end="11:38"><name pos:start="11:20" pos:end="11:38">slot_hotplug_enable</name></expr></argument>, <argument pos:start="11:41" pos:end="11:52"><expr pos:start="11:41" pos:end="11:52"><name pos:start="11:41" pos:end="11:52">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:54"><expr pos:start="13:5" pos:end="13:53"><call pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:18">DECLARE_BITMAP</name><argument_list pos:start="13:19" pos:end="13:53">(<argument pos:start="13:20" pos:end="13:38"><expr pos:start="13:20" pos:end="13:38"><name pos:start="13:20" pos:end="13:38">slot_device_present</name></expr></argument>, <argument pos:start="13:41" pos:end="13:52"><expr pos:start="13:41" pos:end="13:52"><name pos:start="13:41" pos:end="13:52">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><call pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:18">DECLARE_BITMAP</name><argument_list pos:start="15:19" pos:end="15:52">(<argument pos:start="15:20" pos:end="15:37"><expr pos:start="15:20" pos:end="15:37"><name pos:start="15:20" pos:end="15:37">slot_device_system</name></expr></argument>, <argument pos:start="15:40" pos:end="15:51"><expr pos:start="15:40" pos:end="15:51"><name pos:start="15:40" pos:end="15:51">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:50"><expr pos:start="17:5" pos:end="17:49"><call pos:start="17:5" pos:end="17:49"><name pos:start="17:5" pos:end="17:18">DECLARE_BITMAP</name><argument_list pos:start="17:19" pos:end="17:49">(<argument pos:start="17:20" pos:end="17:34"><expr pos:start="17:20" pos:end="17:34"><name pos:start="17:20" pos:end="17:34">slot_device_vga</name></expr></argument>, <argument pos:start="17:37" pos:end="17:48"><expr pos:start="17:37" pos:end="17:48"><name pos:start="17:37" pos:end="17:48">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:50"><expr pos:start="19:5" pos:end="19:49"><call pos:start="19:5" pos:end="19:49"><name pos:start="19:5" pos:end="19:18">DECLARE_BITMAP</name><argument_list pos:start="19:19" pos:end="19:49">(<argument pos:start="19:20" pos:end="19:34"><expr pos:start="19:20" pos:end="19:34"><name pos:start="19:20" pos:end="19:34">slot_device_qxl</name></expr></argument>, <argument pos:start="19:37" pos:end="19:48"><expr pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:48">PCI_SLOT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">uint8_t</name></type> <name pos:start="21:13" pos:end="21:14">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">QObject</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:17">bsel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:19"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">GArray</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:18">method</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:37"><decl pos:start="29:5" pos:end="29:36"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:28">bus_hotplug_support</name> <init pos:start="29:30" pos:end="29:36">= <expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="41:7">/*

     * Skip bridge subtree creation if bridge hotplug is disabled

     * to make acpi tables compatible with legacy machine types.

     * Skip creation for hotplugged bridges as well.

     */</comment>

    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="55:5">if <condition pos:start="43:8" pos:end="45:65">(<expr pos:start="43:9" pos:end="45:64"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:11">bus</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:23">parent_dev</name></name> <operator pos:start="43:25" pos:end="43:26">&amp;&amp;</operator> <operator pos:start="43:28" pos:end="43:28">(</operator><operator pos:start="43:29" pos:end="43:29">!</operator><name pos:start="43:30" pos:end="43:51"><name pos:start="43:30" pos:end="43:34">child</name><operator pos:start="43:35" pos:end="43:36">-&gt;</operator><name pos:start="43:37" pos:end="43:51">pcihp_bridge_en</name></name> <operator pos:start="43:53" pos:end="43:54">||</operator>

                            <call pos:start="45:29" pos:end="45:51"><name pos:start="45:29" pos:end="45:34">DEVICE</name><argument_list pos:start="45:35" pos:end="45:51">(<argument pos:start="45:36" pos:end="45:50"><expr pos:start="45:36" pos:end="45:50"><name pos:start="45:36" pos:end="45:50"><name pos:start="45:36" pos:end="45:38">bus</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:50">parent_dev</name></name></expr></argument>)</argument_list></call><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:63">hotplugged</name><operator pos:start="45:64" pos:end="45:64">)</operator></expr>)</condition> <block pos:start="45:67" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:15">

        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><call pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:24">build_free_array</name><argument_list pos:start="47:25" pos:end="47:35">(<argument pos:start="47:26" pos:end="47:34"><expr pos:start="47:26" pos:end="47:34"><name pos:start="47:26" pos:end="47:34">bus_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:43"><expr pos:start="49:9" pos:end="49:42"><call pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:35">build_pci_bus_state_cleanup</name><argument_list pos:start="49:36" pos:end="49:42">(<argument pos:start="49:37" pos:end="49:41"><expr pos:start="49:37" pos:end="49:41"><name pos:start="49:37" pos:end="49:41">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><call pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:14">g_free</name><argument_list pos:start="51:15" pos:end="51:21">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="87:5"><if pos:start="59:5" pos:end="81:5">if <condition pos:start="59:8" pos:end="59:24">(<expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:11">bus</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:23">parent_dev</name></name></expr>)</condition> <block pos:start="59:26" pos:end="81:5">{<block_content pos:start="61:9" pos:end="79:61">

        <expr_stmt pos:start="61:9" pos:end="61:18"><expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:10">op</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:17">0x82</literal></expr>;</expr_stmt> <comment type="block" pos:start="61:20" pos:end="61:33">/* DeviceOp */</comment>

        <expr_stmt pos:start="63:9" pos:end="65:53"><expr pos:start="63:9" pos:end="65:52"><call pos:start="63:9" pos:end="65:52"><name pos:start="63:9" pos:end="63:31">build_append_namestring</name><argument_list pos:start="63:32" pos:end="65:52">(<argument pos:start="63:33" pos:end="63:41"><expr pos:start="63:33" pos:end="63:41"><name pos:start="63:33" pos:end="63:41">bus_table</name></expr></argument>, <argument pos:start="63:44" pos:end="63:51"><expr pos:start="63:44" pos:end="63:51"><literal type="string" pos:start="63:44" pos:end="63:51">"S%.02X"</literal></expr></argument>,

                             <argument pos:start="65:30" pos:end="65:51"><expr pos:start="65:30" pos:end="65:51"><name pos:start="65:30" pos:end="65:51"><name pos:start="65:30" pos:end="65:32">bus</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:44">parent_dev</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:51">devfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><call pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:25">build_append_byte</name><argument_list pos:start="67:26" pos:end="67:42">(<argument pos:start="67:27" pos:end="67:35"><expr pos:start="67:27" pos:end="67:35"><name pos:start="67:27" pos:end="67:35">bus_table</name></expr></argument>, <argument pos:start="67:38" pos:end="67:41"><expr pos:start="67:38" pos:end="67:41"><literal type="number" pos:start="67:38" pos:end="67:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:45" pos:end="67:56">/* NameOp */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><call pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:31">build_append_namestring</name><argument_list pos:start="69:32" pos:end="69:50">(<argument pos:start="69:33" pos:end="69:41"><expr pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:41">bus_table</name></expr></argument>, <argument pos:start="69:44" pos:end="69:49"><expr pos:start="69:44" pos:end="69:49"><literal type="string" pos:start="69:44" pos:end="69:49">"_SUN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:70"><expr pos:start="71:9" pos:end="71:69"><call pos:start="71:9" pos:end="71:69"><name pos:start="71:9" pos:end="71:24">build_append_int</name><argument_list pos:start="71:25" pos:end="71:69">(<argument pos:start="71:26" pos:end="71:34"><expr pos:start="71:26" pos:end="71:34"><name pos:start="71:26" pos:end="71:34">bus_table</name></expr></argument>, <argument pos:start="71:37" pos:end="71:68"><expr pos:start="71:37" pos:end="71:68"><call pos:start="71:37" pos:end="71:68"><name pos:start="71:37" pos:end="71:44">PCI_SLOT</name><argument_list pos:start="71:45" pos:end="71:68">(<argument pos:start="71:46" pos:end="71:67"><expr pos:start="71:46" pos:end="71:67"><name pos:start="71:46" pos:end="71:67"><name pos:start="71:46" pos:end="71:48">bus</name><operator pos:start="71:49" pos:end="71:50">-&gt;</operator><name pos:start="71:51" pos:end="71:60">parent_dev</name><operator pos:start="71:61" pos:end="71:62">-&gt;</operator><name pos:start="71:63" pos:end="71:67">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><call pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:25">build_append_byte</name><argument_list pos:start="73:26" pos:end="73:42">(<argument pos:start="73:27" pos:end="73:35"><expr pos:start="73:27" pos:end="73:35"><name pos:start="73:27" pos:end="73:35">bus_table</name></expr></argument>, <argument pos:start="73:38" pos:end="73:41"><expr pos:start="73:38" pos:end="73:41"><literal type="number" pos:start="73:38" pos:end="73:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="73:45" pos:end="73:56">/* NameOp */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><call pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:31">build_append_namestring</name><argument_list pos:start="75:32" pos:end="75:50">(<argument pos:start="75:33" pos:end="75:41"><expr pos:start="75:33" pos:end="75:41"><name pos:start="75:33" pos:end="75:41">bus_table</name></expr></argument>, <argument pos:start="75:44" pos:end="75:49"><expr pos:start="75:44" pos:end="75:49"><literal type="string" pos:start="75:44" pos:end="75:49">"_ADR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="79:61"><expr pos:start="77:9" pos:end="79:60"><call pos:start="77:9" pos:end="79:60"><name pos:start="77:9" pos:end="77:24">build_append_int</name><argument_list pos:start="77:25" pos:end="79:60">(<argument pos:start="77:26" pos:end="77:34"><expr pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:34">bus_table</name></expr></argument>, <argument pos:start="77:37" pos:end="79:59"><expr pos:start="77:37" pos:end="79:59"><operator pos:start="77:37" pos:end="77:37">(</operator><call pos:start="77:38" pos:end="77:69"><name pos:start="77:38" pos:end="77:45">PCI_SLOT</name><argument_list pos:start="77:46" pos:end="77:69">(<argument pos:start="77:47" pos:end="77:68"><expr pos:start="77:47" pos:end="77:68"><name pos:start="77:47" pos:end="77:68"><name pos:start="77:47" pos:end="77:49">bus</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:61">parent_dev</name><operator pos:start="77:62" pos:end="77:63">-&gt;</operator><name pos:start="77:64" pos:end="77:68">devfn</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:71" pos:end="77:72">&lt;&lt;</operator> <literal type="number" pos:start="77:74" pos:end="77:75">16</literal><operator pos:start="77:76" pos:end="77:76">)</operator> <operator pos:start="77:78" pos:end="77:78">|</operator>

                           <call pos:start="79:28" pos:end="79:59"><name pos:start="79:28" pos:end="79:35">PCI_FUNC</name><argument_list pos:start="79:36" pos:end="79:59">(<argument pos:start="79:37" pos:end="79:58"><expr pos:start="79:37" pos:end="79:58"><name pos:start="79:37" pos:end="79:58"><name pos:start="79:37" pos:end="79:39">bus</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:51">parent_dev</name><operator pos:start="79:52" pos:end="79:53">-&gt;</operator><name pos:start="79:54" pos:end="79:58">devfn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="87:5">else <block pos:start="81:12" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:51">

        <expr_stmt pos:start="83:9" pos:end="83:18"><expr pos:start="83:9" pos:end="83:17"><name pos:start="83:9" pos:end="83:10">op</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:17">0x10</literal></expr>;</expr_stmt> <comment type="block" pos:start="83:20" pos:end="83:32">/* ScopeOp */</comment><empty_stmt pos:start="83:33" pos:end="83:33">;</empty_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><call pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:31">build_append_namestring</name><argument_list pos:start="85:32" pos:end="85:50">(<argument pos:start="85:33" pos:end="85:41"><expr pos:start="85:33" pos:end="85:41"><name pos:start="85:33" pos:end="85:41">bus_table</name></expr></argument>, <argument pos:start="85:44" pos:end="85:49"><expr pos:start="85:44" pos:end="85:49"><literal type="string" pos:start="85:44" pos:end="85:49">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:80"><expr pos:start="91:5" pos:end="91:79"><name pos:start="91:5" pos:end="91:8">bsel</name> <operator pos:start="91:10" pos:end="91:10">=</operator> <call pos:start="91:12" pos:end="91:79"><name pos:start="91:12" pos:end="91:38">object_property_get_qobject</name><argument_list pos:start="91:39" pos:end="91:79">(<argument pos:start="91:40" pos:end="91:50"><expr pos:start="91:40" pos:end="91:50"><call pos:start="91:40" pos:end="91:50"><name pos:start="91:40" pos:end="91:45">OBJECT</name><argument_list pos:start="91:46" pos:end="91:50">(<argument pos:start="91:47" pos:end="91:49"><expr pos:start="91:47" pos:end="91:49"><name pos:start="91:47" pos:end="91:49">bus</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:53" pos:end="91:72"><expr pos:start="91:53" pos:end="91:72"><name pos:start="91:53" pos:end="91:72">ACPI_PCIHP_PROP_BSEL</name></expr></argument>, <argument pos:start="91:75" pos:end="91:78"><expr pos:start="91:75" pos:end="91:78"><name pos:start="91:75" pos:end="91:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="109:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:13">(<expr pos:start="93:9" pos:end="93:12"><name pos:start="93:9" pos:end="93:12">bsel</name></expr>)</condition> <block pos:start="93:15" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:70">

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><call pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:25">build_append_byte</name><argument_list pos:start="95:26" pos:end="95:42">(<argument pos:start="95:27" pos:end="95:35"><expr pos:start="95:27" pos:end="95:35"><name pos:start="95:27" pos:end="95:35">bus_table</name></expr></argument>, <argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><literal type="number" pos:start="95:38" pos:end="95:41">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:45" pos:end="95:56">/* NameOp */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:51"><expr pos:start="97:9" pos:end="97:50"><call pos:start="97:9" pos:end="97:50"><name pos:start="97:9" pos:end="97:31">build_append_namestring</name><argument_list pos:start="97:32" pos:end="97:50">(<argument pos:start="97:33" pos:end="97:41"><expr pos:start="97:33" pos:end="97:41"><name pos:start="97:33" pos:end="97:41">bus_table</name></expr></argument>, <argument pos:start="97:44" pos:end="97:49"><expr pos:start="97:44" pos:end="97:49"><literal type="string" pos:start="97:44" pos:end="97:49">"BSEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:73"><expr pos:start="99:9" pos:end="99:72"><call pos:start="99:9" pos:end="99:72"><name pos:start="99:9" pos:end="99:24">build_append_int</name><argument_list pos:start="99:25" pos:end="99:72">(<argument pos:start="99:26" pos:end="99:34"><expr pos:start="99:26" pos:end="99:34"><name pos:start="99:26" pos:end="99:34">bus_table</name></expr></argument>, <argument pos:start="99:37" pos:end="99:71"><expr pos:start="99:37" pos:end="99:71"><call pos:start="99:37" pos:end="99:71"><name pos:start="99:37" pos:end="99:48">qint_get_int</name><argument_list pos:start="99:49" pos:end="99:71">(<argument pos:start="99:50" pos:end="99:70"><expr pos:start="99:50" pos:end="99:70"><call pos:start="99:50" pos:end="99:70"><name pos:start="99:50" pos:end="99:64">qobject_to_qint</name><argument_list pos:start="99:65" pos:end="99:70">(<argument pos:start="99:66" pos:end="99:69"><expr pos:start="99:66" pos:end="99:69"><name pos:start="99:66" pos:end="99:69">bsel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:70"><expr pos:start="101:9" pos:end="101:69"><call pos:start="101:9" pos:end="101:69"><name pos:start="101:9" pos:end="101:14">memset</name><argument_list pos:start="101:15" pos:end="101:69">(<argument pos:start="101:16" pos:end="101:34"><expr pos:start="101:16" pos:end="101:34"><name pos:start="101:16" pos:end="101:34">slot_hotplug_enable</name></expr></argument>, <argument pos:start="101:37" pos:end="101:40"><expr pos:start="101:37" pos:end="101:40"><literal type="number" pos:start="101:37" pos:end="101:40">0xff</literal></expr></argument>, <argument pos:start="101:43" pos:end="101:68"><expr pos:start="101:43" pos:end="101:68"><sizeof pos:start="101:43" pos:end="101:68">sizeof <name pos:start="101:50" pos:end="101:68">slot_hotplug_enable</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="109:5">else <block pos:start="103:12" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:70">

        <comment type="block" pos:start="105:9" pos:end="105:50">/* No bsel - no slots are hot-pluggable */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:70"><expr pos:start="107:9" pos:end="107:69"><call pos:start="107:9" pos:end="107:69"><name pos:start="107:9" pos:end="107:14">memset</name><argument_list pos:start="107:15" pos:end="107:69">(<argument pos:start="107:16" pos:end="107:34"><expr pos:start="107:16" pos:end="107:34"><name pos:start="107:16" pos:end="107:34">slot_hotplug_enable</name></expr></argument>, <argument pos:start="107:37" pos:end="107:40"><expr pos:start="107:37" pos:end="107:40"><literal type="number" pos:start="107:37" pos:end="107:40">0x00</literal></expr></argument>, <argument pos:start="107:43" pos:end="107:68"><expr pos:start="107:43" pos:end="107:68"><sizeof pos:start="107:43" pos:end="107:68">sizeof <name pos:start="107:50" pos:end="107:68">slot_hotplug_enable</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:66"><expr pos:start="113:5" pos:end="113:65"><call pos:start="113:5" pos:end="113:65"><name pos:start="113:5" pos:end="113:10">memset</name><argument_list pos:start="113:11" pos:end="113:65">(<argument pos:start="113:12" pos:end="113:30"><expr pos:start="113:12" pos:end="113:30"><name pos:start="113:12" pos:end="113:30">slot_device_present</name></expr></argument>, <argument pos:start="113:33" pos:end="113:36"><expr pos:start="113:33" pos:end="113:36"><literal type="number" pos:start="113:33" pos:end="113:36">0x00</literal></expr></argument>, <argument pos:start="113:39" pos:end="113:64"><expr pos:start="113:39" pos:end="113:64"><sizeof pos:start="113:39" pos:end="113:64">sizeof <name pos:start="113:46" pos:end="113:64">slot_device_present</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:65"><expr pos:start="115:5" pos:end="115:64"><call pos:start="115:5" pos:end="115:64"><name pos:start="115:5" pos:end="115:10">memset</name><argument_list pos:start="115:11" pos:end="115:64">(<argument pos:start="115:12" pos:end="115:29"><expr pos:start="115:12" pos:end="115:29"><name pos:start="115:12" pos:end="115:29">slot_device_system</name></expr></argument>, <argument pos:start="115:32" pos:end="115:35"><expr pos:start="115:32" pos:end="115:35"><literal type="number" pos:start="115:32" pos:end="115:35">0x00</literal></expr></argument>, <argument pos:start="115:38" pos:end="115:63"><expr pos:start="115:38" pos:end="115:63"><sizeof pos:start="115:38" pos:end="115:63">sizeof <name pos:start="115:45" pos:end="115:63">slot_device_present</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:58"><expr pos:start="117:5" pos:end="117:57"><call pos:start="117:5" pos:end="117:57"><name pos:start="117:5" pos:end="117:10">memset</name><argument_list pos:start="117:11" pos:end="117:57">(<argument pos:start="117:12" pos:end="117:26"><expr pos:start="117:12" pos:end="117:26"><name pos:start="117:12" pos:end="117:26">slot_device_vga</name></expr></argument>, <argument pos:start="117:29" pos:end="117:32"><expr pos:start="117:29" pos:end="117:32"><literal type="number" pos:start="117:29" pos:end="117:32">0x00</literal></expr></argument>, <argument pos:start="117:35" pos:end="117:56"><expr pos:start="117:35" pos:end="117:56"><sizeof pos:start="117:35" pos:end="117:56">sizeof <name pos:start="117:42" pos:end="117:56">slot_device_vga</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:58"><expr pos:start="119:5" pos:end="119:57"><call pos:start="119:5" pos:end="119:57"><name pos:start="119:5" pos:end="119:10">memset</name><argument_list pos:start="119:11" pos:end="119:57">(<argument pos:start="119:12" pos:end="119:26"><expr pos:start="119:12" pos:end="119:26"><name pos:start="119:12" pos:end="119:26">slot_device_qxl</name></expr></argument>, <argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><literal type="number" pos:start="119:29" pos:end="119:32">0x00</literal></expr></argument>, <argument pos:start="119:35" pos:end="119:56"><expr pos:start="119:35" pos:end="119:56"><sizeof pos:start="119:35" pos:end="119:56">sizeof <name pos:start="119:42" pos:end="119:56">slot_device_qxl</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="123:5" pos:end="199:5">for <control pos:start="123:9" pos:end="123:64">(<init pos:start="123:10" pos:end="123:15"><expr pos:start="123:10" pos:end="123:14"><name pos:start="123:10" pos:end="123:10">i</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr>;</init> <condition pos:start="123:17" pos:end="123:45"><expr pos:start="123:17" pos:end="123:44"><name pos:start="123:17" pos:end="123:17">i</name> <operator pos:start="123:19" pos:end="123:19">&lt;</operator> <call pos:start="123:21" pos:end="123:44"><name pos:start="123:21" pos:end="123:30">ARRAY_SIZE</name><argument_list pos:start="123:31" pos:end="123:44">(<argument pos:start="123:32" pos:end="123:43"><expr pos:start="123:32" pos:end="123:43"><name pos:start="123:32" pos:end="123:43"><name pos:start="123:32" pos:end="123:34">bus</name><operator pos:start="123:35" pos:end="123:36">-&gt;</operator><name pos:start="123:37" pos:end="123:43">devices</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="123:47" pos:end="123:63"><expr pos:start="123:47" pos:end="123:63"><name pos:start="123:47" pos:end="123:47">i</name> <operator pos:start="123:49" pos:end="123:50">+=</operator> <name pos:start="123:52" pos:end="123:63">PCI_FUNC_MAX</name></expr></incr>)</control> <block pos:start="123:66" pos:end="199:5">{<block_content pos:start="125:9" pos:end="197:9">

        <decl_stmt pos:start="125:9" pos:end="125:24"><decl pos:start="125:9" pos:end="125:23"><type pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:19">DeviceClass</name> <modifier pos:start="125:21" pos:end="125:21">*</modifier></type><name pos:start="125:22" pos:end="125:23">dc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:27"><decl pos:start="127:9" pos:end="127:26"><type pos:start="127:9" pos:end="127:24"><name pos:start="127:9" pos:end="127:22">PCIDeviceClass</name> <modifier pos:start="127:24" pos:end="127:24">*</modifier></type><name pos:start="127:25" pos:end="127:26">pc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:42"><decl pos:start="129:9" pos:end="129:41"><type pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:17">PCIDevice</name> <modifier pos:start="129:19" pos:end="129:19">*</modifier></type><name pos:start="129:20" pos:end="129:23">pdev</name> <init pos:start="129:25" pos:end="129:41">= <expr pos:start="129:27" pos:end="129:41"><name pos:start="129:27" pos:end="129:41"><name pos:start="129:27" pos:end="129:29">bus</name><operator pos:start="129:30" pos:end="129:31">-&gt;</operator><name pos:start="129:32" pos:end="129:38">devices</name><index pos:start="129:39" pos:end="129:41">[<expr pos:start="129:40" pos:end="129:40"><name pos:start="129:40" pos:end="129:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:31"><decl pos:start="131:9" pos:end="131:30"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:16">slot</name> <init pos:start="131:18" pos:end="131:30">= <expr pos:start="131:20" pos:end="131:30"><call pos:start="131:20" pos:end="131:30"><name pos:start="131:20" pos:end="131:27">PCI_SLOT</name><argument_list pos:start="131:28" pos:end="131:30">(<argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:28"><decl pos:start="133:9" pos:end="133:27"><type pos:start="133:9" pos:end="133:12"><name pos:start="133:9" pos:end="133:12">bool</name></type> <name pos:start="133:14" pos:end="133:27">bridge_in_acpi</name></decl>;</decl_stmt>



        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:18">(<expr pos:start="137:13" pos:end="137:17"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:17">pdev</name></expr>)</condition> <block pos:start="137:20" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:21">

            <continue pos:start="139:13" pos:end="139:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:43"><expr pos:start="145:9" pos:end="145:42"><call pos:start="145:9" pos:end="145:42"><name pos:start="145:9" pos:end="145:15">set_bit</name><argument_list pos:start="145:16" pos:end="145:42">(<argument pos:start="145:17" pos:end="145:20"><expr pos:start="145:17" pos:end="145:20"><name pos:start="145:17" pos:end="145:20">slot</name></expr></argument>, <argument pos:start="145:23" pos:end="145:41"><expr pos:start="145:23" pos:end="145:41"><name pos:start="145:23" pos:end="145:41">slot_device_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:40"><expr pos:start="147:9" pos:end="147:39"><name pos:start="147:9" pos:end="147:10">pc</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <call pos:start="147:14" pos:end="147:39"><name pos:start="147:14" pos:end="147:33">PCI_DEVICE_GET_CLASS</name><argument_list pos:start="147:34" pos:end="147:39">(<argument pos:start="147:35" pos:end="147:38"><expr pos:start="147:35" pos:end="147:38"><name pos:start="147:35" pos:end="147:38">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:36"><expr pos:start="149:9" pos:end="149:35"><name pos:start="149:9" pos:end="149:10">dc</name> <operator pos:start="149:12" pos:end="149:12">=</operator> <call pos:start="149:14" pos:end="149:35"><name pos:start="149:14" pos:end="149:29">DEVICE_GET_CLASS</name><argument_list pos:start="149:30" pos:end="149:35">(<argument pos:start="149:31" pos:end="149:34"><expr pos:start="149:31" pos:end="149:34"><name pos:start="149:31" pos:end="149:34">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="153:9" pos:end="161:11">/* When hotplug for bridges is enabled, bridges are

         * described in ACPI separately (see build_pci_bus_end).

         * In this case they aren't themselves hot-pluggable.

         * Hotplugged bridges *are* hot-pluggable.

         */</comment>

        <expr_stmt pos:start="163:9" pos:end="165:35"><expr pos:start="163:9" pos:end="165:34"><name pos:start="163:9" pos:end="163:22">bridge_in_acpi</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <name pos:start="163:26" pos:end="163:38"><name pos:start="163:26" pos:end="163:27">pc</name><operator pos:start="163:28" pos:end="163:29">-&gt;</operator><name pos:start="163:30" pos:end="163:38">is_bridge</name></name> <operator pos:start="163:40" pos:end="163:41">&amp;&amp;</operator> <name pos:start="163:43" pos:end="163:64"><name pos:start="163:43" pos:end="163:47">child</name><operator pos:start="163:48" pos:end="163:49">-&gt;</operator><name pos:start="163:50" pos:end="163:64">pcihp_bridge_en</name></name> <operator pos:start="163:66" pos:end="163:67">&amp;&amp;</operator>

         <operator pos:start="165:10" pos:end="165:10">!</operator><call pos:start="165:11" pos:end="165:22"><name pos:start="165:11" pos:end="165:16">DEVICE</name><argument_list pos:start="165:17" pos:end="165:22">(<argument pos:start="165:18" pos:end="165:21"><expr pos:start="165:18" pos:end="165:21"><name pos:start="165:18" pos:end="165:21">pdev</name></expr></argument>)</argument_list></call><operator pos:start="165:23" pos:end="165:24">-&gt;</operator><name pos:start="165:25" pos:end="165:34">hotplugged</name></expr>;</expr_stmt>



        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:67">(<expr pos:start="169:13" pos:end="169:66"><name pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:14">pc</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:24">class_id</name></name> <operator pos:start="169:26" pos:end="169:27">==</operator> <name pos:start="169:29" pos:end="169:48">PCI_CLASS_BRIDGE_ISA</name> <operator pos:start="169:50" pos:end="169:51">||</operator> <name pos:start="169:53" pos:end="169:66">bridge_in_acpi</name></expr>)</condition> <block pos:start="169:69" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:46">

            <expr_stmt pos:start="171:13" pos:end="171:46"><expr pos:start="171:13" pos:end="171:45"><call pos:start="171:13" pos:end="171:45"><name pos:start="171:13" pos:end="171:19">set_bit</name><argument_list pos:start="171:20" pos:end="171:45">(<argument pos:start="171:21" pos:end="171:24"><expr pos:start="171:21" pos:end="171:24"><name pos:start="171:21" pos:end="171:24">slot</name></expr></argument>, <argument pos:start="171:27" pos:end="171:44"><expr pos:start="171:27" pos:end="171:44"><name pos:start="171:27" pos:end="171:44">slot_device_system</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="177:9" pos:end="189:9"><if pos:start="177:9" pos:end="189:9">if <condition pos:start="177:12" pos:end="177:50">(<expr pos:start="177:13" pos:end="177:49"><name pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:14">pc</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:24">class_id</name></name> <operator pos:start="177:26" pos:end="177:27">==</operator> <name pos:start="177:29" pos:end="177:49">PCI_CLASS_DISPLAY_VGA</name></expr>)</condition> <block pos:start="177:52" pos:end="189:9">{<block_content pos:start="179:13" pos:end="187:13">

            <expr_stmt pos:start="179:13" pos:end="179:43"><expr pos:start="179:13" pos:end="179:42"><call pos:start="179:13" pos:end="179:42"><name pos:start="179:13" pos:end="179:19">set_bit</name><argument_list pos:start="179:20" pos:end="179:42">(<argument pos:start="179:21" pos:end="179:24"><expr pos:start="179:21" pos:end="179:24"><name pos:start="179:21" pos:end="179:24">slot</name></expr></argument>, <argument pos:start="179:27" pos:end="179:41"><expr pos:start="179:27" pos:end="179:41"><name pos:start="179:27" pos:end="179:41">slot_device_vga</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="183:13" pos:end="187:13"><if pos:start="183:13" pos:end="187:13">if <condition pos:start="183:16" pos:end="183:61">(<expr pos:start="183:17" pos:end="183:60"><call pos:start="183:17" pos:end="183:60"><name pos:start="183:17" pos:end="183:35">object_dynamic_cast</name><argument_list pos:start="183:36" pos:end="183:60">(<argument pos:start="183:37" pos:end="183:48"><expr pos:start="183:37" pos:end="183:48"><call pos:start="183:37" pos:end="183:48"><name pos:start="183:37" pos:end="183:42">OBJECT</name><argument_list pos:start="183:43" pos:end="183:48">(<argument pos:start="183:44" pos:end="183:47"><expr pos:start="183:44" pos:end="183:47"><name pos:start="183:44" pos:end="183:47">pdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="183:51" pos:end="183:59"><expr pos:start="183:51" pos:end="183:59"><literal type="string" pos:start="183:51" pos:end="183:59">"qxl-vga"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:63" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:47">

                <expr_stmt pos:start="185:17" pos:end="185:47"><expr pos:start="185:17" pos:end="185:46"><call pos:start="185:17" pos:end="185:46"><name pos:start="185:17" pos:end="185:23">set_bit</name><argument_list pos:start="185:24" pos:end="185:46">(<argument pos:start="185:25" pos:end="185:28"><expr pos:start="185:25" pos:end="185:28"><name pos:start="185:25" pos:end="185:28">slot</name></expr></argument>, <argument pos:start="185:31" pos:end="185:45"><expr pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:45">slot_device_qxl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:48">(<expr pos:start="193:13" pos:end="193:47"><operator pos:start="193:13" pos:end="193:13">!</operator><name pos:start="193:14" pos:end="193:29"><name pos:start="193:14" pos:end="193:15">dc</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:29">hotpluggable</name></name> <operator pos:start="193:31" pos:end="193:32">||</operator> <name pos:start="193:34" pos:end="193:47">bridge_in_acpi</name></expr>)</condition> <block pos:start="193:50" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:49">

            <expr_stmt pos:start="195:13" pos:end="195:49"><expr pos:start="195:13" pos:end="195:48"><call pos:start="195:13" pos:end="195:48"><name pos:start="195:13" pos:end="195:21">clear_bit</name><argument_list pos:start="195:22" pos:end="195:48">(<argument pos:start="195:23" pos:end="195:26"><expr pos:start="195:23" pos:end="195:26"><name pos:start="195:23" pos:end="195:26">slot</name></expr></argument>, <argument pos:start="195:29" pos:end="195:47"><expr pos:start="195:29" pos:end="195:47"><name pos:start="195:29" pos:end="195:47">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="203:5" pos:end="203:44">/* Append Device object for each slot */</comment>

    <for pos:start="205:5" pos:end="265:5">for <control pos:start="205:9" pos:end="205:38">(<init pos:start="205:10" pos:end="205:15"><expr pos:start="205:10" pos:end="205:14"><name pos:start="205:10" pos:end="205:10">i</name> <operator pos:start="205:12" pos:end="205:12">=</operator> <literal type="number" pos:start="205:14" pos:end="205:14">0</literal></expr>;</init> <condition pos:start="205:17" pos:end="205:33"><expr pos:start="205:17" pos:end="205:32"><name pos:start="205:17" pos:end="205:17">i</name> <operator pos:start="205:19" pos:end="205:19">&lt;</operator> <name pos:start="205:21" pos:end="205:32">PCI_SLOT_MAX</name></expr>;</condition> <incr pos:start="205:35" pos:end="205:37"><expr pos:start="205:35" pos:end="205:37"><name pos:start="205:35" pos:end="205:35">i</name><operator pos:start="205:36" pos:end="205:37">++</operator></expr></incr>)</control> <block pos:start="205:40" pos:end="265:5">{<block_content pos:start="207:9" pos:end="263:9">

        <decl_stmt pos:start="207:9" pos:end="207:58"><decl pos:start="207:9" pos:end="207:57"><type pos:start="207:9" pos:end="207:12"><name pos:start="207:9" pos:end="207:12">bool</name></type> <name pos:start="207:14" pos:end="207:22">can_eject</name> <init pos:start="207:24" pos:end="207:57">= <expr pos:start="207:26" pos:end="207:57"><call pos:start="207:26" pos:end="207:57"><name pos:start="207:26" pos:end="207:33">test_bit</name><argument_list pos:start="207:34" pos:end="207:57">(<argument pos:start="207:35" pos:end="207:35"><expr pos:start="207:35" pos:end="207:35"><name pos:start="207:35" pos:end="207:35">i</name></expr></argument>, <argument pos:start="207:38" pos:end="207:56"><expr pos:start="207:38" pos:end="207:56"><name pos:start="207:38" pos:end="207:56">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:56"><decl pos:start="209:9" pos:end="209:55"><type pos:start="209:9" pos:end="209:12"><name pos:start="209:9" pos:end="209:12">bool</name></type> <name pos:start="209:14" pos:end="209:20">present</name> <init pos:start="209:22" pos:end="209:55">= <expr pos:start="209:24" pos:end="209:55"><call pos:start="209:24" pos:end="209:55"><name pos:start="209:24" pos:end="209:31">test_bit</name><argument_list pos:start="209:32" pos:end="209:55">(<argument pos:start="209:33" pos:end="209:33"><expr pos:start="209:33" pos:end="209:33"><name pos:start="209:33" pos:end="209:33">i</name></expr></argument>, <argument pos:start="209:36" pos:end="209:54"><expr pos:start="209:36" pos:end="209:54"><name pos:start="209:36" pos:end="209:54">slot_device_present</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:48"><decl pos:start="211:9" pos:end="211:47"><type pos:start="211:9" pos:end="211:12"><name pos:start="211:9" pos:end="211:12">bool</name></type> <name pos:start="211:14" pos:end="211:16">vga</name> <init pos:start="211:18" pos:end="211:47">= <expr pos:start="211:20" pos:end="211:47"><call pos:start="211:20" pos:end="211:47"><name pos:start="211:20" pos:end="211:27">test_bit</name><argument_list pos:start="211:28" pos:end="211:47">(<argument pos:start="211:29" pos:end="211:29"><expr pos:start="211:29" pos:end="211:29"><name pos:start="211:29" pos:end="211:29">i</name></expr></argument>, <argument pos:start="211:32" pos:end="211:46"><expr pos:start="211:32" pos:end="211:46"><name pos:start="211:32" pos:end="211:46">slot_device_vga</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:48"><decl pos:start="213:9" pos:end="213:47"><type pos:start="213:9" pos:end="213:12"><name pos:start="213:9" pos:end="213:12">bool</name></type> <name pos:start="213:14" pos:end="213:16">qxl</name> <init pos:start="213:18" pos:end="213:47">= <expr pos:start="213:20" pos:end="213:47"><call pos:start="213:20" pos:end="213:47"><name pos:start="213:20" pos:end="213:27">test_bit</name><argument_list pos:start="213:28" pos:end="213:47">(<argument pos:start="213:29" pos:end="213:29"><expr pos:start="213:29" pos:end="213:29"><name pos:start="213:29" pos:end="213:29">i</name></expr></argument>, <argument pos:start="213:32" pos:end="213:46"><expr pos:start="213:32" pos:end="213:46"><name pos:start="213:32" pos:end="213:46">slot_device_qxl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:54"><decl pos:start="215:9" pos:end="215:53"><type pos:start="215:9" pos:end="215:12"><name pos:start="215:9" pos:end="215:12">bool</name></type> <name pos:start="215:14" pos:end="215:19">system</name> <init pos:start="215:21" pos:end="215:53">= <expr pos:start="215:23" pos:end="215:53"><call pos:start="215:23" pos:end="215:53"><name pos:start="215:23" pos:end="215:30">test_bit</name><argument_list pos:start="215:31" pos:end="215:53">(<argument pos:start="215:32" pos:end="215:32"><expr pos:start="215:32" pos:end="215:32"><name pos:start="215:32" pos:end="215:32">i</name></expr></argument>, <argument pos:start="215:35" pos:end="215:52"><expr pos:start="215:35" pos:end="215:52"><name pos:start="215:35" pos:end="215:52">slot_device_system</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="217:9" pos:end="263:9"><if pos:start="217:9" pos:end="229:9">if <condition pos:start="217:12" pos:end="217:22">(<expr pos:start="217:13" pos:end="217:21"><name pos:start="217:13" pos:end="217:21">can_eject</name></expr>)</condition> <block pos:start="217:24" pos:end="229:9">{<block_content pos:start="219:13" pos:end="227:39">

            <decl_stmt pos:start="219:13" pos:end="221:60"><decl pos:start="219:13" pos:end="221:59"><type pos:start="219:13" pos:end="219:18"><name pos:start="219:13" pos:end="219:16">void</name> <modifier pos:start="219:18" pos:end="219:18">*</modifier></type><name pos:start="219:19" pos:end="219:23">pcihp</name> <init pos:start="219:25" pos:end="221:59">= <expr pos:start="219:27" pos:end="221:59"><call pos:start="219:27" pos:end="221:59"><name pos:start="219:27" pos:end="219:40">acpi_data_push</name><argument_list pos:start="219:41" pos:end="221:59">(<argument pos:start="219:42" pos:end="219:50"><expr pos:start="219:42" pos:end="219:50"><name pos:start="219:42" pos:end="219:50">bus_table</name></expr></argument>,

                                         <argument pos:start="221:42" pos:end="221:58"><expr pos:start="221:42" pos:end="221:58"><name pos:start="221:42" pos:end="221:58">ACPI_PCIHP_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:61"><expr pos:start="223:13" pos:end="223:60"><call pos:start="223:13" pos:end="223:60"><name pos:start="223:13" pos:end="223:18">memcpy</name><argument_list pos:start="223:19" pos:end="223:60">(<argument pos:start="223:20" pos:end="223:24"><expr pos:start="223:20" pos:end="223:24"><name pos:start="223:20" pos:end="223:24">pcihp</name></expr></argument>, <argument pos:start="223:27" pos:end="223:40"><expr pos:start="223:27" pos:end="223:40"><name pos:start="223:27" pos:end="223:40">ACPI_PCIHP_AML</name></expr></argument>, <argument pos:start="223:43" pos:end="223:59"><expr pos:start="223:43" pos:end="223:59"><name pos:start="223:43" pos:end="223:59">ACPI_PCIHP_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:34"><expr pos:start="225:13" pos:end="225:33"><call pos:start="225:13" pos:end="225:33"><name pos:start="225:13" pos:end="225:23">patch_pcihp</name><argument_list pos:start="225:24" pos:end="225:33">(<argument pos:start="225:25" pos:end="225:25"><expr pos:start="225:25" pos:end="225:25"><name pos:start="225:25" pos:end="225:25">i</name></expr></argument>, <argument pos:start="225:28" pos:end="225:32"><expr pos:start="225:28" pos:end="225:32"><name pos:start="225:28" pos:end="225:32">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:39"><expr pos:start="227:13" pos:end="227:38"><name pos:start="227:13" pos:end="227:31">bus_hotplug_support</name> <operator pos:start="227:33" pos:end="227:33">=</operator> <name pos:start="227:35" pos:end="227:38">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="229:11" pos:end="239:9">else if <condition pos:start="229:19" pos:end="229:23">(<expr pos:start="229:20" pos:end="229:22"><name pos:start="229:20" pos:end="229:22">qxl</name></expr>)</condition> <block pos:start="229:25" pos:end="239:9">{<block_content pos:start="231:13" pos:end="237:35">

            <decl_stmt pos:start="231:13" pos:end="233:61"><decl pos:start="231:13" pos:end="233:60"><type pos:start="231:13" pos:end="231:18"><name pos:start="231:13" pos:end="231:16">void</name> <modifier pos:start="231:18" pos:end="231:18">*</modifier></type><name pos:start="231:19" pos:end="231:23">pcihp</name> <init pos:start="231:25" pos:end="233:60">= <expr pos:start="231:27" pos:end="233:60"><call pos:start="231:27" pos:end="233:60"><name pos:start="231:27" pos:end="231:40">acpi_data_push</name><argument_list pos:start="231:41" pos:end="233:60">(<argument pos:start="231:42" pos:end="231:50"><expr pos:start="231:42" pos:end="231:50"><name pos:start="231:42" pos:end="231:50">bus_table</name></expr></argument>,

                                         <argument pos:start="233:42" pos:end="233:59"><expr pos:start="233:42" pos:end="233:59"><name pos:start="233:42" pos:end="233:59">ACPI_PCIQXL_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:63"><expr pos:start="235:13" pos:end="235:62"><call pos:start="235:13" pos:end="235:62"><name pos:start="235:13" pos:end="235:18">memcpy</name><argument_list pos:start="235:19" pos:end="235:62">(<argument pos:start="235:20" pos:end="235:24"><expr pos:start="235:20" pos:end="235:24"><name pos:start="235:20" pos:end="235:24">pcihp</name></expr></argument>, <argument pos:start="235:27" pos:end="235:41"><expr pos:start="235:27" pos:end="235:41"><name pos:start="235:27" pos:end="235:41">ACPI_PCIQXL_AML</name></expr></argument>, <argument pos:start="235:44" pos:end="235:61"><expr pos:start="235:44" pos:end="235:61"><name pos:start="235:44" pos:end="235:61">ACPI_PCIQXL_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:35"><expr pos:start="237:13" pos:end="237:34"><call pos:start="237:13" pos:end="237:34"><name pos:start="237:13" pos:end="237:24">patch_pciqxl</name><argument_list pos:start="237:25" pos:end="237:34">(<argument pos:start="237:26" pos:end="237:26"><expr pos:start="237:26" pos:end="237:26"><name pos:start="237:26" pos:end="237:26">i</name></expr></argument>, <argument pos:start="237:29" pos:end="237:33"><expr pos:start="237:29" pos:end="237:33"><name pos:start="237:29" pos:end="237:33">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="239:11" pos:end="249:9">else if <condition pos:start="239:19" pos:end="239:23">(<expr pos:start="239:20" pos:end="239:22"><name pos:start="239:20" pos:end="239:22">vga</name></expr>)</condition> <block pos:start="239:25" pos:end="249:9">{<block_content pos:start="241:13" pos:end="247:35">

            <decl_stmt pos:start="241:13" pos:end="243:61"><decl pos:start="241:13" pos:end="243:60"><type pos:start="241:13" pos:end="241:18"><name pos:start="241:13" pos:end="241:16">void</name> <modifier pos:start="241:18" pos:end="241:18">*</modifier></type><name pos:start="241:19" pos:end="241:23">pcihp</name> <init pos:start="241:25" pos:end="243:60">= <expr pos:start="241:27" pos:end="243:60"><call pos:start="241:27" pos:end="243:60"><name pos:start="241:27" pos:end="241:40">acpi_data_push</name><argument_list pos:start="241:41" pos:end="243:60">(<argument pos:start="241:42" pos:end="241:50"><expr pos:start="241:42" pos:end="241:50"><name pos:start="241:42" pos:end="241:50">bus_table</name></expr></argument>,

                                         <argument pos:start="243:42" pos:end="243:59"><expr pos:start="243:42" pos:end="243:59"><name pos:start="243:42" pos:end="243:59">ACPI_PCIVGA_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:63"><expr pos:start="245:13" pos:end="245:62"><call pos:start="245:13" pos:end="245:62"><name pos:start="245:13" pos:end="245:18">memcpy</name><argument_list pos:start="245:19" pos:end="245:62">(<argument pos:start="245:20" pos:end="245:24"><expr pos:start="245:20" pos:end="245:24"><name pos:start="245:20" pos:end="245:24">pcihp</name></expr></argument>, <argument pos:start="245:27" pos:end="245:41"><expr pos:start="245:27" pos:end="245:41"><name pos:start="245:27" pos:end="245:41">ACPI_PCIVGA_AML</name></expr></argument>, <argument pos:start="245:44" pos:end="245:61"><expr pos:start="245:44" pos:end="245:61"><name pos:start="245:44" pos:end="245:61">ACPI_PCIVGA_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:35"><expr pos:start="247:13" pos:end="247:34"><call pos:start="247:13" pos:end="247:34"><name pos:start="247:13" pos:end="247:24">patch_pcivga</name><argument_list pos:start="247:25" pos:end="247:34">(<argument pos:start="247:26" pos:end="247:26"><expr pos:start="247:26" pos:end="247:26"><name pos:start="247:26" pos:end="247:26">i</name></expr></argument>, <argument pos:start="247:29" pos:end="247:33"><expr pos:start="247:29" pos:end="247:33"><name pos:start="247:29" pos:end="247:33">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="253:9">else if <condition pos:start="249:19" pos:end="249:26">(<expr pos:start="249:20" pos:end="249:25"><name pos:start="249:20" pos:end="249:25">system</name></expr>)</condition> <block pos:start="249:28" pos:end="253:9">{<block_content>

            <comment type="block" pos:start="251:13" pos:end="251:77">/* Nothing to do: system devices are in DSDT or in SSDT above. */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="253:11" pos:end="263:9">else if <condition pos:start="253:19" pos:end="253:27">(<expr pos:start="253:20" pos:end="253:26"><name pos:start="253:20" pos:end="253:26">present</name></expr>)</condition> <block pos:start="253:29" pos:end="263:9">{<block_content pos:start="255:13" pos:end="261:36">

            <decl_stmt pos:start="255:13" pos:end="257:62"><decl pos:start="255:13" pos:end="257:61"><type pos:start="255:13" pos:end="255:18"><name pos:start="255:13" pos:end="255:16">void</name> <modifier pos:start="255:18" pos:end="255:18">*</modifier></type><name pos:start="255:19" pos:end="255:23">pcihp</name> <init pos:start="255:25" pos:end="257:61">= <expr pos:start="255:27" pos:end="257:61"><call pos:start="255:27" pos:end="257:61"><name pos:start="255:27" pos:end="255:40">acpi_data_push</name><argument_list pos:start="255:41" pos:end="257:61">(<argument pos:start="255:42" pos:end="255:50"><expr pos:start="255:42" pos:end="255:50"><name pos:start="255:42" pos:end="255:50">bus_table</name></expr></argument>,

                                         <argument pos:start="257:42" pos:end="257:60"><expr pos:start="257:42" pos:end="257:60"><name pos:start="257:42" pos:end="257:60">ACPI_PCINOHP_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:65"><expr pos:start="259:13" pos:end="259:64"><call pos:start="259:13" pos:end="259:64"><name pos:start="259:13" pos:end="259:18">memcpy</name><argument_list pos:start="259:19" pos:end="259:64">(<argument pos:start="259:20" pos:end="259:24"><expr pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:24">pcihp</name></expr></argument>, <argument pos:start="259:27" pos:end="259:42"><expr pos:start="259:27" pos:end="259:42"><name pos:start="259:27" pos:end="259:42">ACPI_PCINOHP_AML</name></expr></argument>, <argument pos:start="259:45" pos:end="259:63"><expr pos:start="259:45" pos:end="259:63"><name pos:start="259:45" pos:end="259:63">ACPI_PCINOHP_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:36"><expr pos:start="261:13" pos:end="261:35"><call pos:start="261:13" pos:end="261:35"><name pos:start="261:13" pos:end="261:25">patch_pcinohp</name><argument_list pos:start="261:26" pos:end="261:35">(<argument pos:start="261:27" pos:end="261:27"><expr pos:start="261:27" pos:end="261:27"><name pos:start="261:27" pos:end="261:27">i</name></expr></argument>, <argument pos:start="261:30" pos:end="261:34"><expr pos:start="261:30" pos:end="261:34"><name pos:start="261:30" pos:end="261:34">pcihp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="269:5" pos:end="331:5"><if pos:start="269:5" pos:end="331:5">if <condition pos:start="269:8" pos:end="269:13">(<expr pos:start="269:9" pos:end="269:12"><name pos:start="269:9" pos:end="269:12">bsel</name></expr>)</condition> <block pos:start="269:15" pos:end="331:5">{<block_content pos:start="271:9" pos:end="329:59">

        <expr_stmt pos:start="271:9" pos:end="271:47"><expr pos:start="271:9" pos:end="271:46"><name pos:start="271:9" pos:end="271:14">method</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <call pos:start="271:18" pos:end="271:46"><name pos:start="271:18" pos:end="271:35">build_alloc_method</name><argument_list pos:start="271:36" pos:end="271:46">(<argument pos:start="271:37" pos:end="271:42"><expr pos:start="271:37" pos:end="271:42"><literal type="string" pos:start="271:37" pos:end="271:42">"DVNT"</literal></expr></argument>, <argument pos:start="271:45" pos:end="271:45"><expr pos:start="271:45" pos:end="271:45"><literal type="number" pos:start="271:45" pos:end="271:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="275:9" pos:end="325:9">for <control pos:start="275:13" pos:end="275:42">(<init pos:start="275:14" pos:end="275:19"><expr pos:start="275:14" pos:end="275:18"><name pos:start="275:14" pos:end="275:14">i</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <literal type="number" pos:start="275:18" pos:end="275:18">0</literal></expr>;</init> <condition pos:start="275:21" pos:end="275:37"><expr pos:start="275:21" pos:end="275:36"><name pos:start="275:21" pos:end="275:21">i</name> <operator pos:start="275:23" pos:end="275:23">&lt;</operator> <name pos:start="275:25" pos:end="275:36">PCI_SLOT_MAX</name></expr>;</condition> <incr pos:start="275:39" pos:end="275:41"><expr pos:start="275:39" pos:end="275:41"><name pos:start="275:39" pos:end="275:39">i</name><operator pos:start="275:40" pos:end="275:41">++</operator></expr></incr>)</control> <block pos:start="275:44" pos:end="325:9">{<block_content pos:start="277:13" pos:end="323:37">

            <decl_stmt pos:start="277:13" pos:end="277:27"><decl pos:start="277:13" pos:end="277:26"><type pos:start="277:13" pos:end="277:20"><name pos:start="277:13" pos:end="277:18">GArray</name> <modifier pos:start="277:20" pos:end="277:20">*</modifier></type><name pos:start="277:21" pos:end="277:26">notify</name></decl>;</decl_stmt>

            <decl_stmt pos:start="279:13" pos:end="279:23"><decl pos:start="279:13" pos:end="279:22"><type pos:start="279:13" pos:end="279:19"><name pos:start="279:13" pos:end="279:19">uint8_t</name></type> <name pos:start="279:21" pos:end="279:22">op</name></decl>;</decl_stmt>



            <if_stmt pos:start="283:13" pos:end="287:13"><if pos:start="283:13" pos:end="287:13">if <condition pos:start="283:16" pos:end="283:50">(<expr pos:start="283:17" pos:end="283:49"><operator pos:start="283:17" pos:end="283:17">!</operator><call pos:start="283:18" pos:end="283:49"><name pos:start="283:18" pos:end="283:25">test_bit</name><argument_list pos:start="283:26" pos:end="283:49">(<argument pos:start="283:27" pos:end="283:27"><expr pos:start="283:27" pos:end="283:27"><name pos:start="283:27" pos:end="283:27">i</name></expr></argument>, <argument pos:start="283:30" pos:end="283:48"><expr pos:start="283:30" pos:end="283:48"><name pos:start="283:30" pos:end="283:48">slot_hotplug_enable</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:52" pos:end="287:13">{<block_content pos:start="285:17" pos:end="285:25">

                <continue pos:start="285:17" pos:end="285:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="291:13" pos:end="291:41"><expr pos:start="291:13" pos:end="291:40"><name pos:start="291:13" pos:end="291:18">notify</name> <operator pos:start="291:20" pos:end="291:20">=</operator> <call pos:start="291:22" pos:end="291:40"><name pos:start="291:22" pos:end="291:38">build_alloc_array</name><argument_list pos:start="291:39" pos:end="291:40">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:22"><expr pos:start="293:13" pos:end="293:21"><name pos:start="293:13" pos:end="293:14">op</name> <operator pos:start="293:16" pos:end="293:16">=</operator> <literal type="number" pos:start="293:18" pos:end="293:21">0xA0</literal></expr>;</expr_stmt> <comment type="block" pos:start="293:24" pos:end="293:33">/* IfOp */</comment>



            <expr_stmt pos:start="297:13" pos:end="297:44"><expr pos:start="297:13" pos:end="297:43"><call pos:start="297:13" pos:end="297:43"><name pos:start="297:13" pos:end="297:29">build_append_byte</name><argument_list pos:start="297:30" pos:end="297:43">(<argument pos:start="297:31" pos:end="297:36"><expr pos:start="297:31" pos:end="297:36"><name pos:start="297:31" pos:end="297:36">notify</name></expr></argument>, <argument pos:start="297:39" pos:end="297:42"><expr pos:start="297:39" pos:end="297:42"><literal type="number" pos:start="297:39" pos:end="297:42">0x7B</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="297:46" pos:end="297:56">/* AndOp */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:44"><expr pos:start="299:13" pos:end="299:43"><call pos:start="299:13" pos:end="299:43"><name pos:start="299:13" pos:end="299:29">build_append_byte</name><argument_list pos:start="299:30" pos:end="299:43">(<argument pos:start="299:31" pos:end="299:36"><expr pos:start="299:31" pos:end="299:36"><name pos:start="299:31" pos:end="299:36">notify</name></expr></argument>, <argument pos:start="299:39" pos:end="299:42"><expr pos:start="299:39" pos:end="299:42"><literal type="number" pos:start="299:39" pos:end="299:42">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="299:46" pos:end="299:57">/* Arg0Op */</comment>

            <expr_stmt pos:start="301:13" pos:end="301:48"><expr pos:start="301:13" pos:end="301:47"><call pos:start="301:13" pos:end="301:47"><name pos:start="301:13" pos:end="301:28">build_append_int</name><argument_list pos:start="301:29" pos:end="301:47">(<argument pos:start="301:30" pos:end="301:35"><expr pos:start="301:30" pos:end="301:35"><name pos:start="301:30" pos:end="301:35">notify</name></expr></argument>, <argument pos:start="301:38" pos:end="301:46"><expr pos:start="301:38" pos:end="301:46"><literal type="number" pos:start="301:38" pos:end="301:41">0x1U</literal> <operator pos:start="301:43" pos:end="301:44">&lt;&lt;</operator> <name pos:start="301:46" pos:end="301:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:44"><expr pos:start="303:13" pos:end="303:43"><call pos:start="303:13" pos:end="303:43"><name pos:start="303:13" pos:end="303:29">build_append_byte</name><argument_list pos:start="303:30" pos:end="303:43">(<argument pos:start="303:31" pos:end="303:36"><expr pos:start="303:31" pos:end="303:36"><name pos:start="303:31" pos:end="303:36">notify</name></expr></argument>, <argument pos:start="303:39" pos:end="303:42"><expr pos:start="303:39" pos:end="303:42"><literal type="number" pos:start="303:39" pos:end="303:42">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="303:46" pos:end="303:59">/* NullName */</comment>

            <expr_stmt pos:start="305:13" pos:end="305:44"><expr pos:start="305:13" pos:end="305:43"><call pos:start="305:13" pos:end="305:43"><name pos:start="305:13" pos:end="305:29">build_append_byte</name><argument_list pos:start="305:30" pos:end="305:43">(<argument pos:start="305:31" pos:end="305:36"><expr pos:start="305:31" pos:end="305:36"><name pos:start="305:31" pos:end="305:36">notify</name></expr></argument>, <argument pos:start="305:39" pos:end="305:42"><expr pos:start="305:39" pos:end="305:42"><literal type="number" pos:start="305:39" pos:end="305:42">0x86</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="305:46" pos:end="305:59">/* NotifyOp */</comment>

            <expr_stmt pos:start="307:13" pos:end="307:71"><expr pos:start="307:13" pos:end="307:70"><call pos:start="307:13" pos:end="307:70"><name pos:start="307:13" pos:end="307:35">build_append_namestring</name><argument_list pos:start="307:36" pos:end="307:70">(<argument pos:start="307:37" pos:end="307:42"><expr pos:start="307:37" pos:end="307:42"><name pos:start="307:37" pos:end="307:42">notify</name></expr></argument>, <argument pos:start="307:45" pos:end="307:52"><expr pos:start="307:45" pos:end="307:52"><literal type="string" pos:start="307:45" pos:end="307:52">"S%.02X"</literal></expr></argument>, <argument pos:start="307:55" pos:end="307:69"><expr pos:start="307:55" pos:end="307:69"><call pos:start="307:55" pos:end="307:69"><name pos:start="307:55" pos:end="307:63">PCI_DEVFN</name><argument_list pos:start="307:64" pos:end="307:69">(<argument pos:start="307:65" pos:end="307:65"><expr pos:start="307:65" pos:end="307:65"><name pos:start="307:65" pos:end="307:65">i</name></expr></argument>, <argument pos:start="307:68" pos:end="307:68"><expr pos:start="307:68" pos:end="307:68"><literal type="number" pos:start="307:68" pos:end="307:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:44"><expr pos:start="309:13" pos:end="309:43"><call pos:start="309:13" pos:end="309:43"><name pos:start="309:13" pos:end="309:29">build_append_byte</name><argument_list pos:start="309:30" pos:end="309:43">(<argument pos:start="309:31" pos:end="309:36"><expr pos:start="309:31" pos:end="309:36"><name pos:start="309:31" pos:end="309:36">notify</name></expr></argument>, <argument pos:start="309:39" pos:end="309:42"><expr pos:start="309:39" pos:end="309:42"><literal type="number" pos:start="309:39" pos:end="309:42">0x69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="309:46" pos:end="309:57">/* Arg1Op */</comment>



            <comment type="block" pos:start="313:13" pos:end="313:28">/* Pack it up */</comment>

            <expr_stmt pos:start="315:13" pos:end="315:38"><expr pos:start="315:13" pos:end="315:37"><call pos:start="315:13" pos:end="315:37"><name pos:start="315:13" pos:end="315:25">build_package</name><argument_list pos:start="315:26" pos:end="315:37">(<argument pos:start="315:27" pos:end="315:32"><expr pos:start="315:27" pos:end="315:32"><name pos:start="315:27" pos:end="315:32">notify</name></expr></argument>, <argument pos:start="315:35" pos:end="315:36"><expr pos:start="315:35" pos:end="315:36"><name pos:start="315:35" pos:end="315:36">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="319:13" pos:end="319:47"><expr pos:start="319:13" pos:end="319:46"><call pos:start="319:13" pos:end="319:46"><name pos:start="319:13" pos:end="319:30">build_append_array</name><argument_list pos:start="319:31" pos:end="319:46">(<argument pos:start="319:32" pos:end="319:37"><expr pos:start="319:32" pos:end="319:37"><name pos:start="319:32" pos:end="319:37">method</name></expr></argument>, <argument pos:start="319:40" pos:end="319:45"><expr pos:start="319:40" pos:end="319:45"><name pos:start="319:40" pos:end="319:45">notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="323:13" pos:end="323:37"><expr pos:start="323:13" pos:end="323:36"><call pos:start="323:13" pos:end="323:36"><name pos:start="323:13" pos:end="323:28">build_free_array</name><argument_list pos:start="323:29" pos:end="323:36">(<argument pos:start="323:30" pos:end="323:35"><expr pos:start="323:30" pos:end="323:35"><name pos:start="323:30" pos:end="323:35">notify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="329:9" pos:end="329:59"><expr pos:start="329:9" pos:end="329:58"><call pos:start="329:9" pos:end="329:58"><name pos:start="329:9" pos:end="329:39">build_append_and_cleanup_method</name><argument_list pos:start="329:40" pos:end="329:58">(<argument pos:start="329:41" pos:end="329:49"><expr pos:start="329:41" pos:end="329:49"><name pos:start="329:41" pos:end="329:49">bus_table</name></expr></argument>, <argument pos:start="329:52" pos:end="329:57"><expr pos:start="329:52" pos:end="329:57"><name pos:start="329:52" pos:end="329:57">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="335:5" pos:end="339:7">/* Append PCNT method to notify about events on local and child buses.

     * Add unconditionally for root since DSDT expects it.

     */</comment>

    <if_stmt pos:start="341:5" pos:end="423:5"><if pos:start="341:5" pos:end="423:5">if <condition pos:start="341:8" pos:end="341:76">(<expr pos:start="341:9" pos:end="341:75"><name pos:start="341:9" pos:end="341:27">bus_hotplug_support</name> <operator pos:start="341:29" pos:end="341:30">||</operator> <name pos:start="341:32" pos:end="341:55"><name pos:start="341:32" pos:end="341:36">child</name><operator pos:start="341:37" pos:end="341:38">-&gt;</operator><name pos:start="341:39" pos:end="341:50">notify_table</name><operator pos:start="341:51" pos:end="341:52">-&gt;</operator><name pos:start="341:53" pos:end="341:55">len</name></name> <operator pos:start="341:57" pos:end="341:58">||</operator> <operator pos:start="341:60" pos:end="341:60">!</operator><name pos:start="341:61" pos:end="341:75"><name pos:start="341:61" pos:end="341:63">bus</name><operator pos:start="341:64" pos:end="341:65">-&gt;</operator><name pos:start="341:66" pos:end="341:75">parent_dev</name></name></expr>)</condition> <block pos:start="341:78" pos:end="423:5">{<block_content pos:start="343:9" pos:end="421:9">

        <expr_stmt pos:start="343:9" pos:end="343:47"><expr pos:start="343:9" pos:end="343:46"><name pos:start="343:9" pos:end="343:14">method</name> <operator pos:start="343:16" pos:end="343:16">=</operator> <call pos:start="343:18" pos:end="343:46"><name pos:start="343:18" pos:end="343:35">build_alloc_method</name><argument_list pos:start="343:36" pos:end="343:46">(<argument pos:start="343:37" pos:end="343:42"><expr pos:start="343:37" pos:end="343:42"><literal type="string" pos:start="343:37" pos:end="343:42">"PCNT"</literal></expr></argument>, <argument pos:start="343:45" pos:end="343:45"><expr pos:start="343:45" pos:end="343:45"><literal type="number" pos:start="343:45" pos:end="343:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="347:9" pos:end="347:77">/* If bus supports hotplug select it and notify about local events */</comment>

        <if_stmt pos:start="349:9" pos:end="369:9"><if pos:start="349:9" pos:end="369:9">if <condition pos:start="349:12" pos:end="349:17">(<expr pos:start="349:13" pos:end="349:16"><name pos:start="349:13" pos:end="349:16">bsel</name></expr>)</condition> <block pos:start="349:19" pos:end="369:9">{<block_content pos:start="351:13" pos:end="367:40">

            <expr_stmt pos:start="351:13" pos:end="351:44"><expr pos:start="351:13" pos:end="351:43"><call pos:start="351:13" pos:end="351:43"><name pos:start="351:13" pos:end="351:29">build_append_byte</name><argument_list pos:start="351:30" pos:end="351:43">(<argument pos:start="351:31" pos:end="351:36"><expr pos:start="351:31" pos:end="351:36"><name pos:start="351:31" pos:end="351:36">method</name></expr></argument>, <argument pos:start="351:39" pos:end="351:42"><expr pos:start="351:39" pos:end="351:42"><literal type="number" pos:start="351:39" pos:end="351:42">0x70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="351:46" pos:end="351:58">/* StoreOp */</comment>

            <expr_stmt pos:start="353:13" pos:end="353:74"><expr pos:start="353:13" pos:end="353:73"><call pos:start="353:13" pos:end="353:73"><name pos:start="353:13" pos:end="353:28">build_append_int</name><argument_list pos:start="353:29" pos:end="353:73">(<argument pos:start="353:30" pos:end="353:35"><expr pos:start="353:30" pos:end="353:35"><name pos:start="353:30" pos:end="353:35">method</name></expr></argument>, <argument pos:start="353:38" pos:end="353:72"><expr pos:start="353:38" pos:end="353:72"><call pos:start="353:38" pos:end="353:72"><name pos:start="353:38" pos:end="353:49">qint_get_int</name><argument_list pos:start="353:50" pos:end="353:72">(<argument pos:start="353:51" pos:end="353:71"><expr pos:start="353:51" pos:end="353:71"><call pos:start="353:51" pos:end="353:71"><name pos:start="353:51" pos:end="353:65">qobject_to_qint</name><argument_list pos:start="353:66" pos:end="353:71">(<argument pos:start="353:67" pos:end="353:70"><expr pos:start="353:67" pos:end="353:70"><name pos:start="353:67" pos:end="353:70">bsel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:52"><expr pos:start="355:13" pos:end="355:51"><call pos:start="355:13" pos:end="355:51"><name pos:start="355:13" pos:end="355:35">build_append_namestring</name><argument_list pos:start="355:36" pos:end="355:51">(<argument pos:start="355:37" pos:end="355:42"><expr pos:start="355:37" pos:end="355:42"><name pos:start="355:37" pos:end="355:42">method</name></expr></argument>, <argument pos:start="355:45" pos:end="355:50"><expr pos:start="355:45" pos:end="355:50"><literal type="string" pos:start="355:45" pos:end="355:50">"BNUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:52"><expr pos:start="357:13" pos:end="357:51"><call pos:start="357:13" pos:end="357:51"><name pos:start="357:13" pos:end="357:35">build_append_namestring</name><argument_list pos:start="357:36" pos:end="357:51">(<argument pos:start="357:37" pos:end="357:42"><expr pos:start="357:37" pos:end="357:42"><name pos:start="357:37" pos:end="357:42">method</name></expr></argument>, <argument pos:start="357:45" pos:end="357:50"><expr pos:start="357:45" pos:end="357:50"><literal type="string" pos:start="357:45" pos:end="357:50">"DVNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:52"><expr pos:start="359:13" pos:end="359:51"><call pos:start="359:13" pos:end="359:51"><name pos:start="359:13" pos:end="359:35">build_append_namestring</name><argument_list pos:start="359:36" pos:end="359:51">(<argument pos:start="359:37" pos:end="359:42"><expr pos:start="359:37" pos:end="359:42"><name pos:start="359:37" pos:end="359:42">method</name></expr></argument>, <argument pos:start="359:45" pos:end="359:50"><expr pos:start="359:45" pos:end="359:50"><literal type="string" pos:start="359:45" pos:end="359:50">"PCIU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:40"><expr pos:start="361:13" pos:end="361:39"><call pos:start="361:13" pos:end="361:39"><name pos:start="361:13" pos:end="361:28">build_append_int</name><argument_list pos:start="361:29" pos:end="361:39">(<argument pos:start="361:30" pos:end="361:35"><expr pos:start="361:30" pos:end="361:35"><name pos:start="361:30" pos:end="361:35">method</name></expr></argument>, <argument pos:start="361:38" pos:end="361:38"><expr pos:start="361:38" pos:end="361:38"><literal type="number" pos:start="361:38" pos:end="361:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="361:42" pos:end="361:59">/* Device Check */</comment>

            <expr_stmt pos:start="363:13" pos:end="363:52"><expr pos:start="363:13" pos:end="363:51"><call pos:start="363:13" pos:end="363:51"><name pos:start="363:13" pos:end="363:35">build_append_namestring</name><argument_list pos:start="363:36" pos:end="363:51">(<argument pos:start="363:37" pos:end="363:42"><expr pos:start="363:37" pos:end="363:42"><name pos:start="363:37" pos:end="363:42">method</name></expr></argument>, <argument pos:start="363:45" pos:end="363:50"><expr pos:start="363:45" pos:end="363:50"><literal type="string" pos:start="363:45" pos:end="363:50">"DVNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="365:13" pos:end="365:52"><expr pos:start="365:13" pos:end="365:51"><call pos:start="365:13" pos:end="365:51"><name pos:start="365:13" pos:end="365:35">build_append_namestring</name><argument_list pos:start="365:36" pos:end="365:51">(<argument pos:start="365:37" pos:end="365:42"><expr pos:start="365:37" pos:end="365:42"><name pos:start="365:37" pos:end="365:42">method</name></expr></argument>, <argument pos:start="365:45" pos:end="365:50"><expr pos:start="365:45" pos:end="365:50"><literal type="string" pos:start="365:45" pos:end="365:50">"PCID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:40"><expr pos:start="367:13" pos:end="367:39"><call pos:start="367:13" pos:end="367:39"><name pos:start="367:13" pos:end="367:28">build_append_int</name><argument_list pos:start="367:29" pos:end="367:39">(<argument pos:start="367:30" pos:end="367:35"><expr pos:start="367:30" pos:end="367:35"><name pos:start="367:30" pos:end="367:35">method</name></expr></argument>, <argument pos:start="367:38" pos:end="367:38"><expr pos:start="367:38" pos:end="367:38"><literal type="number" pos:start="367:38" pos:end="367:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="367:42" pos:end="367:60">/* Eject Request */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="373:9" pos:end="373:55">/* Notify about child bus events in any case */</comment>

        <expr_stmt pos:start="375:9" pos:end="375:56"><expr pos:start="375:9" pos:end="375:55"><call pos:start="375:9" pos:end="375:55"><name pos:start="375:9" pos:end="375:26">build_append_array</name><argument_list pos:start="375:27" pos:end="375:55">(<argument pos:start="375:28" pos:end="375:33"><expr pos:start="375:28" pos:end="375:33"><name pos:start="375:28" pos:end="375:33">method</name></expr></argument>, <argument pos:start="375:36" pos:end="375:54"><expr pos:start="375:36" pos:end="375:54"><name pos:start="375:36" pos:end="375:54"><name pos:start="375:36" pos:end="375:40">child</name><operator pos:start="375:41" pos:end="375:42">-&gt;</operator><name pos:start="375:43" pos:end="375:54">notify_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="379:9" pos:end="379:59"><expr pos:start="379:9" pos:end="379:58"><call pos:start="379:9" pos:end="379:58"><name pos:start="379:9" pos:end="379:39">build_append_and_cleanup_method</name><argument_list pos:start="379:40" pos:end="379:58">(<argument pos:start="379:41" pos:end="379:49"><expr pos:start="379:41" pos:end="379:49"><name pos:start="379:41" pos:end="379:49">bus_table</name></expr></argument>, <argument pos:start="379:52" pos:end="379:57"><expr pos:start="379:52" pos:end="379:57"><name pos:start="379:52" pos:end="379:57">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="383:9" pos:end="383:47">/* Append description of child buses */</comment>

        <expr_stmt pos:start="385:9" pos:end="385:59"><expr pos:start="385:9" pos:end="385:58"><call pos:start="385:9" pos:end="385:58"><name pos:start="385:9" pos:end="385:26">build_append_array</name><argument_list pos:start="385:27" pos:end="385:58">(<argument pos:start="385:28" pos:end="385:36"><expr pos:start="385:28" pos:end="385:36"><name pos:start="385:28" pos:end="385:36">bus_table</name></expr></argument>, <argument pos:start="385:39" pos:end="385:57"><expr pos:start="385:39" pos:end="385:57"><name pos:start="385:39" pos:end="385:57"><name pos:start="385:39" pos:end="385:43">child</name><operator pos:start="385:44" pos:end="385:45">-&gt;</operator><name pos:start="385:46" pos:end="385:57">device_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="389:9" pos:end="389:24">/* Pack it up */</comment>

        <if_stmt pos:start="391:9" pos:end="399:9"><if pos:start="391:9" pos:end="395:9">if <condition pos:start="391:12" pos:end="391:28">(<expr pos:start="391:13" pos:end="391:27"><name pos:start="391:13" pos:end="391:27"><name pos:start="391:13" pos:end="391:15">bus</name><operator pos:start="391:16" pos:end="391:17">-&gt;</operator><name pos:start="391:18" pos:end="391:27">parent_dev</name></name></expr>)</condition> <block pos:start="391:30" pos:end="395:9">{<block_content pos:start="393:13" pos:end="393:47">

            <expr_stmt pos:start="393:13" pos:end="393:47"><expr pos:start="393:13" pos:end="393:46"><call pos:start="393:13" pos:end="393:46"><name pos:start="393:13" pos:end="393:31">build_extop_package</name><argument_list pos:start="393:32" pos:end="393:46">(<argument pos:start="393:33" pos:end="393:41"><expr pos:start="393:33" pos:end="393:41"><name pos:start="393:33" pos:end="393:41">bus_table</name></expr></argument>, <argument pos:start="393:44" pos:end="393:45"><expr pos:start="393:44" pos:end="393:45"><name pos:start="393:44" pos:end="393:45">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="395:11" pos:end="399:9">else <block pos:start="395:16" pos:end="399:9">{<block_content pos:start="397:13" pos:end="397:41">

            <expr_stmt pos:start="397:13" pos:end="397:41"><expr pos:start="397:13" pos:end="397:40"><call pos:start="397:13" pos:end="397:40"><name pos:start="397:13" pos:end="397:25">build_package</name><argument_list pos:start="397:26" pos:end="397:40">(<argument pos:start="397:27" pos:end="397:35"><expr pos:start="397:27" pos:end="397:35"><name pos:start="397:27" pos:end="397:35">bus_table</name></expr></argument>, <argument pos:start="397:38" pos:end="397:39"><expr pos:start="397:38" pos:end="397:39"><name pos:start="397:38" pos:end="397:39">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="403:9" pos:end="403:56">/* Append our bus description to parent table */</comment>

        <expr_stmt pos:start="405:9" pos:end="405:60"><expr pos:start="405:9" pos:end="405:59"><call pos:start="405:9" pos:end="405:59"><name pos:start="405:9" pos:end="405:26">build_append_array</name><argument_list pos:start="405:27" pos:end="405:59">(<argument pos:start="405:28" pos:end="405:47"><expr pos:start="405:28" pos:end="405:47"><name pos:start="405:28" pos:end="405:47"><name pos:start="405:28" pos:end="405:33">parent</name><operator pos:start="405:34" pos:end="405:35">-&gt;</operator><name pos:start="405:36" pos:end="405:47">device_table</name></name></expr></argument>, <argument pos:start="405:50" pos:end="405:58"><expr pos:start="405:50" pos:end="405:58"><name pos:start="405:50" pos:end="405:58">bus_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="409:9" pos:end="413:11">/* Also tell parent how to notify us, invoking PCNT method.

         * At the moment this is not needed for root as we have a single root.

         */</comment>

        <if_stmt pos:start="415:9" pos:end="421:9"><if pos:start="415:9" pos:end="421:9">if <condition pos:start="415:12" pos:end="415:28">(<expr pos:start="415:13" pos:end="415:27"><name pos:start="415:13" pos:end="415:27"><name pos:start="415:13" pos:end="415:15">bus</name><operator pos:start="415:16" pos:end="415:17">-&gt;</operator><name pos:start="415:18" pos:end="415:27">parent_dev</name></name></expr>)</condition> <block pos:start="415:30" pos:end="421:9">{<block_content pos:start="417:13" pos:end="419:60">

            <expr_stmt pos:start="417:13" pos:end="419:60"><expr pos:start="417:13" pos:end="419:59"><call pos:start="417:13" pos:end="419:59"><name pos:start="417:13" pos:end="417:35">build_append_namestring</name><argument_list pos:start="417:36" pos:end="419:59">(<argument pos:start="417:37" pos:end="417:56"><expr pos:start="417:37" pos:end="417:56"><name pos:start="417:37" pos:end="417:56"><name pos:start="417:37" pos:end="417:42">parent</name><operator pos:start="417:43" pos:end="417:44">-&gt;</operator><name pos:start="417:45" pos:end="417:56">notify_table</name></name></expr></argument>, <argument pos:start="417:59" pos:end="417:72"><expr pos:start="417:59" pos:end="417:72"><literal type="string" pos:start="417:59" pos:end="417:72">"^PCNT.S%.02X"</literal></expr></argument>,

                                    <argument pos:start="419:37" pos:end="419:58"><expr pos:start="419:37" pos:end="419:58"><name pos:start="419:37" pos:end="419:58"><name pos:start="419:37" pos:end="419:39">bus</name><operator pos:start="419:40" pos:end="419:41">-&gt;</operator><name pos:start="419:42" pos:end="419:51">parent_dev</name><operator pos:start="419:52" pos:end="419:53">-&gt;</operator><name pos:start="419:54" pos:end="419:58">devfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="427:5" pos:end="427:25"><expr pos:start="427:5" pos:end="427:24"><call pos:start="427:5" pos:end="427:24"><name pos:start="427:5" pos:end="427:18">qobject_decref</name><argument_list pos:start="427:19" pos:end="427:24">(<argument pos:start="427:20" pos:end="427:23"><expr pos:start="427:20" pos:end="427:23"><name pos:start="427:20" pos:end="427:23">bsel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:32"><expr pos:start="429:5" pos:end="429:31"><call pos:start="429:5" pos:end="429:31"><name pos:start="429:5" pos:end="429:20">build_free_array</name><argument_list pos:start="429:21" pos:end="429:31">(<argument pos:start="429:22" pos:end="429:30"><expr pos:start="429:22" pos:end="429:30"><name pos:start="429:22" pos:end="429:30">bus_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:39"><expr pos:start="431:5" pos:end="431:38"><call pos:start="431:5" pos:end="431:38"><name pos:start="431:5" pos:end="431:31">build_pci_bus_state_cleanup</name><argument_list pos:start="431:32" pos:end="431:38">(<argument pos:start="431:33" pos:end="431:37"><expr pos:start="431:33" pos:end="431:37"><name pos:start="431:33" pos:end="431:37">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:18"><expr pos:start="433:5" pos:end="433:17"><call pos:start="433:5" pos:end="433:17"><name pos:start="433:5" pos:end="433:10">g_free</name><argument_list pos:start="433:11" pos:end="433:17">(<argument pos:start="433:12" pos:end="433:16"><expr pos:start="433:12" pos:end="433:16"><name pos:start="433:12" pos:end="433:16">child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
