<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16323.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">commit_start</name><parameter_list pos:start="1:18" pos:end="7:45">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:62"><decl pos:start="1:41" pos:end="1:62"><type pos:start="1:41" pos:end="1:62"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">base</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:39"><decl pos:start="3:19" pos:end="3:39"><type pos:start="3:19" pos:end="3:39"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">top</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:48">int64_t</name></type> <name pos:start="3:50" pos:end="3:54">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:33">BlockdevOnError</name></type> <name pos:start="5:35" pos:end="5:42">on_error</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:73"><decl pos:start="5:45" pos:end="5:73"><type pos:start="5:45" pos:end="5:73"><name pos:start="5:45" pos:end="5:69">BlockDriverCompletionFunc</name> <modifier pos:start="5:71" pos:end="5:71">*</modifier></type><name pos:start="5:72" pos:end="5:73">cb</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:22">void</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:30">opaque</name></decl></parameter>, <parameter pos:start="7:33" pos:end="7:44"><decl pos:start="7:33" pos:end="7:44"><type pos:start="7:33" pos:end="7:44"><name pos:start="7:33" pos:end="7:37">Error</name> <modifier pos:start="7:39" pos:end="7:39">*</modifier><modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:44">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="153:1">{<block_content pos:start="11:5" pos:end="151:42">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">CommitBlockJob</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockReopenQueue</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:34">reopen_queue</name> <init pos:start="13:36" pos:end="13:41">= <expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26">orig_overlay_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">orig_base_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:32">overlay_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="29:38">(<expr pos:start="25:9" pos:end="29:37"><operator pos:start="25:9" pos:end="25:9">(</operator><name pos:start="25:10" pos:end="25:17">on_error</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:43">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="25:45" pos:end="25:46">||</operator>

         <name pos:start="27:10" pos:end="27:17">on_error</name> <operator pos:start="27:19" pos:end="27:20">==</operator> <name pos:start="27:22" pos:end="27:45">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:49">&amp;&amp;</operator>

        <operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:37"><name pos:start="29:10" pos:end="29:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="29:34" pos:end="29:37">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:40" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><call pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:17">error_set</name><argument_list pos:start="31:18" pos:end="31:59">(<argument pos:start="31:19" pos:end="31:22"><expr pos:start="31:19" pos:end="31:22"><name pos:start="31:19" pos:end="31:22">errp</name></expr></argument>, <argument pos:start="31:25" pos:end="31:58"><expr pos:start="31:25" pos:end="31:58"><name pos:start="31:25" pos:end="31:58">QERR_INVALID_PARAMETER_COMBINATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:64">/* Once we support top == active layer, remove this check */</comment>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:11">top</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <name pos:start="41:16" pos:end="41:17">bs</name></expr>)</condition> <block pos:start="41:20" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:77"><expr pos:start="43:9" pos:end="45:76"><call pos:start="43:9" pos:end="45:76"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="45:76">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>,

                   <argument pos:start="45:20" pos:end="45:75"><expr pos:start="45:20" pos:end="45:75"><literal type="string" pos:start="45:20" pos:end="45:75">"Top image as the active layer is currently unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:20">(<expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">top</name> <operator pos:start="53:13" pos:end="53:14">==</operator> <name pos:start="53:16" pos:end="53:19">base</name></expr>)</condition> <block pos:start="53:22" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:79"><expr pos:start="55:9" pos:end="55:78"><call pos:start="55:9" pos:end="55:78"><name pos:start="55:9" pos:end="55:18">error_setg</name><argument_list pos:start="55:19" pos:end="55:78">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">errp</name></expr></argument>, <argument pos:start="55:26" pos:end="55:77"><expr pos:start="55:26" pos:end="55:77"><literal type="string" pos:start="55:26" pos:end="55:77">"Invalid files for merge: top and base are the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:14">overlay_bs</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <call pos:start="63:18" pos:end="63:43"><name pos:start="63:18" pos:end="63:34">bdrv_find_overlay</name><argument_list pos:start="63:35" pos:end="63:43">(<argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><name pos:start="63:36" pos:end="63:37">bs</name></expr></argument>, <argument pos:start="63:40" pos:end="63:42"><expr pos:start="63:40" pos:end="63:42"><name pos:start="63:40" pos:end="63:42">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:27">(<expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:18">overlay_bs</name> <operator pos:start="67:20" pos:end="67:21">==</operator> <name pos:start="67:23" pos:end="67:26">NULL</name></expr>)</condition> <block pos:start="67:29" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:15">

        <expr_stmt pos:start="69:9" pos:end="69:80"><expr pos:start="69:9" pos:end="69:79"><call pos:start="69:9" pos:end="69:79"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:79">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:63"><expr pos:start="69:26" pos:end="69:63"><literal type="string" pos:start="69:26" pos:end="69:63">"Could not find overlay image for %s:"</literal></expr></argument>, <argument pos:start="69:66" pos:end="69:78"><expr pos:start="69:66" pos:end="69:78"><name pos:start="69:66" pos:end="69:78"><name pos:start="69:66" pos:end="69:68">top</name><operator pos:start="69:69" pos:end="69:70">-&gt;</operator><name pos:start="69:71" pos:end="69:78">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:46"><expr pos:start="77:5" pos:end="77:45"><name pos:start="77:5" pos:end="77:19">orig_base_flags</name>    <operator pos:start="77:24" pos:end="77:24">=</operator> <call pos:start="77:26" pos:end="77:45"><name pos:start="77:26" pos:end="77:39">bdrv_get_flags</name><argument_list pos:start="77:40" pos:end="77:45">(<argument pos:start="77:41" pos:end="77:44"><expr pos:start="77:41" pos:end="77:44"><name pos:start="77:41" pos:end="77:44">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:52"><expr pos:start="79:5" pos:end="79:51"><name pos:start="79:5" pos:end="79:22">orig_overlay_flags</name> <operator pos:start="79:24" pos:end="79:24">=</operator> <call pos:start="79:26" pos:end="79:51"><name pos:start="79:26" pos:end="79:39">bdrv_get_flags</name><argument_list pos:start="79:40" pos:end="79:51">(<argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><name pos:start="79:41" pos:end="79:50">overlay_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:56">/* convert base &amp; overlay_bs to r/w, if necessary */</comment>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:41">(<expr pos:start="85:9" pos:end="85:40"><operator pos:start="85:9" pos:end="85:9">!</operator><operator pos:start="85:10" pos:end="85:10">(</operator><name pos:start="85:11" pos:end="85:25">orig_base_flags</name> <operator pos:start="85:27" pos:end="85:27">&amp;</operator> <name pos:start="85:29" pos:end="85:39">BDRV_O_RDWR</name><operator pos:start="85:40" pos:end="85:40">)</operator></expr>)</condition> <block pos:start="85:43" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:72">

        <expr_stmt pos:start="87:9" pos:end="89:72"><expr pos:start="87:9" pos:end="89:71"><name pos:start="87:9" pos:end="87:20">reopen_queue</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="89:71"><name pos:start="87:24" pos:end="87:40">bdrv_reopen_queue</name><argument_list pos:start="87:41" pos:end="89:71">(<argument pos:start="87:42" pos:end="87:53"><expr pos:start="87:42" pos:end="87:53"><name pos:start="87:42" pos:end="87:53">reopen_queue</name></expr></argument>, <argument pos:start="87:56" pos:end="87:59"><expr pos:start="87:56" pos:end="87:59"><name pos:start="87:56" pos:end="87:59">base</name></expr></argument>,

                                         <argument pos:start="89:42" pos:end="89:70"><expr pos:start="89:42" pos:end="89:70"><name pos:start="89:42" pos:end="89:56">orig_base_flags</name> <operator pos:start="89:58" pos:end="89:58">|</operator> <name pos:start="89:60" pos:end="89:70">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:44">(<expr pos:start="93:9" pos:end="93:43"><operator pos:start="93:9" pos:end="93:9">!</operator><operator pos:start="93:10" pos:end="93:10">(</operator><name pos:start="93:11" pos:end="93:28">orig_overlay_flags</name> <operator pos:start="93:30" pos:end="93:30">&amp;</operator> <name pos:start="93:32" pos:end="93:42">BDRV_O_RDWR</name><operator pos:start="93:43" pos:end="93:43">)</operator></expr>)</condition> <block pos:start="93:46" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:75">

        <expr_stmt pos:start="95:9" pos:end="97:75"><expr pos:start="95:9" pos:end="97:74"><name pos:start="95:9" pos:end="95:20">reopen_queue</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <call pos:start="95:24" pos:end="97:74"><name pos:start="95:24" pos:end="95:40">bdrv_reopen_queue</name><argument_list pos:start="95:41" pos:end="97:74">(<argument pos:start="95:42" pos:end="95:53"><expr pos:start="95:42" pos:end="95:53"><name pos:start="95:42" pos:end="95:53">reopen_queue</name></expr></argument>, <argument pos:start="95:56" pos:end="95:65"><expr pos:start="95:56" pos:end="95:65"><name pos:start="95:56" pos:end="95:65">overlay_bs</name></expr></argument>,

                                         <argument pos:start="97:42" pos:end="97:73"><expr pos:start="97:42" pos:end="97:73"><name pos:start="97:42" pos:end="97:59">orig_overlay_flags</name> <operator pos:start="97:61" pos:end="97:61">|</operator> <name pos:start="97:63" pos:end="97:73">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="113:5"><if pos:start="101:5" pos:end="113:5">if <condition pos:start="101:8" pos:end="101:21">(<expr pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:20">reopen_queue</name></expr>)</condition> <block pos:start="101:23" pos:end="113:5">{<block_content pos:start="103:9" pos:end="111:9">

        <expr_stmt pos:start="103:9" pos:end="103:55"><expr pos:start="103:9" pos:end="103:54"><call pos:start="103:9" pos:end="103:54"><name pos:start="103:9" pos:end="103:28">bdrv_reopen_multiple</name><argument_list pos:start="103:29" pos:end="103:54">(<argument pos:start="103:30" pos:end="103:41"><expr pos:start="103:30" pos:end="103:41"><name pos:start="103:30" pos:end="103:41">reopen_queue</name></expr></argument>, <argument pos:start="103:44" pos:end="103:53"><expr pos:start="103:44" pos:end="103:53"><operator pos:start="103:44" pos:end="103:44">&amp;</operator><name pos:start="103:45" pos:end="103:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:21">local_err</name> <operator pos:start="105:23" pos:end="105:24">!=</operator> <name pos:start="105:26" pos:end="105:29">NULL</name></expr>)</condition> <block pos:start="105:32" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:19">

            <expr_stmt pos:start="107:13" pos:end="107:45"><expr pos:start="107:13" pos:end="107:44"><call pos:start="107:13" pos:end="107:44"><name pos:start="107:13" pos:end="107:27">error_propagate</name><argument_list pos:start="107:28" pos:end="107:44">(<argument pos:start="107:29" pos:end="107:32"><expr pos:start="107:29" pos:end="107:32"><name pos:start="107:29" pos:end="107:32">errp</name></expr></argument>, <argument pos:start="107:35" pos:end="107:43"><expr pos:start="107:35" pos:end="107:43"><name pos:start="107:35" pos:end="107:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="119:5" pos:end="119:74"><expr pos:start="119:5" pos:end="119:73"><name pos:start="119:5" pos:end="119:5">s</name> <operator pos:start="119:7" pos:end="119:7">=</operator> <call pos:start="119:9" pos:end="119:73"><name pos:start="119:9" pos:end="119:24">block_job_create</name><argument_list pos:start="119:25" pos:end="119:73">(<argument pos:start="119:26" pos:end="119:43"><expr pos:start="119:26" pos:end="119:43"><operator pos:start="119:26" pos:end="119:26">&amp;</operator><name pos:start="119:27" pos:end="119:43">commit_job_driver</name></expr></argument>, <argument pos:start="119:46" pos:end="119:47"><expr pos:start="119:46" pos:end="119:47"><name pos:start="119:46" pos:end="119:47">bs</name></expr></argument>, <argument pos:start="119:50" pos:end="119:54"><expr pos:start="119:50" pos:end="119:54"><name pos:start="119:50" pos:end="119:54">speed</name></expr></argument>, <argument pos:start="119:57" pos:end="119:58"><expr pos:start="119:57" pos:end="119:58"><name pos:start="119:57" pos:end="119:58">cb</name></expr></argument>, <argument pos:start="119:61" pos:end="119:66"><expr pos:start="119:61" pos:end="119:66"><name pos:start="119:61" pos:end="119:66">opaque</name></expr></argument>, <argument pos:start="119:69" pos:end="119:72"><expr pos:start="119:69" pos:end="119:72"><name pos:start="119:69" pos:end="119:72">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:11">(<expr pos:start="121:9" pos:end="121:10"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:10">s</name></expr>)</condition> <block pos:start="121:13" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:15">

        <return pos:start="123:9" pos:end="123:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:21"><expr pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:11"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:11">base</name></name>   <operator pos:start="129:15" pos:end="129:15">=</operator> <name pos:start="129:17" pos:end="129:20">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:20"><expr pos:start="131:5" pos:end="131:19"><name pos:start="131:5" pos:end="131:10"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:10">top</name></name>    <operator pos:start="131:15" pos:end="131:15">=</operator> <name pos:start="131:17" pos:end="131:19">top</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:19"><expr pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:13"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:13">active</name></name> <operator pos:start="133:15" pos:end="133:15">=</operator> <name pos:start="133:17" pos:end="133:18">bs</name></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:45"><expr pos:start="137:5" pos:end="137:44"><name pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:17">base_flags</name></name>          <operator pos:start="137:28" pos:end="137:28">=</operator> <name pos:start="137:30" pos:end="137:44">orig_base_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:48"><expr pos:start="139:5" pos:end="139:47"><name pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:25">orig_overlay_flags</name></name>  <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:47">orig_overlay_flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:27"><expr pos:start="143:5" pos:end="143:26"><name pos:start="143:5" pos:end="143:15"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:15">on_error</name></name> <operator pos:start="143:17" pos:end="143:17">=</operator> <name pos:start="143:19" pos:end="143:26">on_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:53"><expr pos:start="145:5" pos:end="145:52"><name pos:start="145:5" pos:end="145:16"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:13">common</name><operator pos:start="145:14" pos:end="145:14">.</operator><name pos:start="145:15" pos:end="145:16">co</name></name> <operator pos:start="145:18" pos:end="145:18">=</operator> <call pos:start="145:20" pos:end="145:52"><name pos:start="145:20" pos:end="145:40">qemu_coroutine_create</name><argument_list pos:start="145:41" pos:end="145:52">(<argument pos:start="145:42" pos:end="145:51"><expr pos:start="145:42" pos:end="145:51"><name pos:start="145:42" pos:end="145:51">commit_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:63"><expr pos:start="149:5" pos:end="149:62"><call pos:start="149:5" pos:end="149:62"><name pos:start="149:5" pos:end="149:22">trace_commit_start</name><argument_list pos:start="149:23" pos:end="149:62">(<argument pos:start="149:24" pos:end="149:25"><expr pos:start="149:24" pos:end="149:25"><name pos:start="149:24" pos:end="149:25">bs</name></expr></argument>, <argument pos:start="149:28" pos:end="149:31"><expr pos:start="149:28" pos:end="149:31"><name pos:start="149:28" pos:end="149:31">base</name></expr></argument>, <argument pos:start="149:34" pos:end="149:36"><expr pos:start="149:34" pos:end="149:36"><name pos:start="149:34" pos:end="149:36">top</name></expr></argument>, <argument pos:start="149:39" pos:end="149:39"><expr pos:start="149:39" pos:end="149:39"><name pos:start="149:39" pos:end="149:39">s</name></expr></argument>, <argument pos:start="149:42" pos:end="149:53"><expr pos:start="149:42" pos:end="149:53"><name pos:start="149:42" pos:end="149:53"><name pos:start="149:42" pos:end="149:42">s</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:50">common</name><operator pos:start="149:51" pos:end="149:51">.</operator><name pos:start="149:52" pos:end="149:53">co</name></name></expr></argument>, <argument pos:start="149:56" pos:end="149:61"><expr pos:start="149:56" pos:end="149:61"><name pos:start="149:56" pos:end="149:61">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:42"><expr pos:start="151:5" pos:end="151:41"><call pos:start="151:5" pos:end="151:41"><name pos:start="151:5" pos:end="151:24">qemu_coroutine_enter</name><argument_list pos:start="151:25" pos:end="151:41">(<argument pos:start="151:26" pos:end="151:37"><expr pos:start="151:26" pos:end="151:37"><name pos:start="151:26" pos:end="151:37"><name pos:start="151:26" pos:end="151:26">s</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:34">common</name><operator pos:start="151:35" pos:end="151:35">.</operator><name pos:start="151:36" pos:end="151:37">co</name></name></expr></argument>, <argument pos:start="151:40" pos:end="151:40"><expr pos:start="151:40" pos:end="151:40"><name pos:start="151:40" pos:end="151:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
