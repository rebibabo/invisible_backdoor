<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15406.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">targa_encode_frame</name><parameter_list pos:start="1:30" pos:end="3:64">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:66"><decl pos:start="1:54" pos:end="1:66"><type pos:start="1:54" pos:end="1:66"><name pos:start="1:54" pos:end="1:61">AVPacket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">pkt</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:46"><decl pos:start="3:31" pos:end="3:46"><type pos:start="3:31" pos:end="3:46"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">AVFrame</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:46">p</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:63"><decl pos:start="3:49" pos:end="3:63"><type pos:start="3:49" pos:end="3:63"><name pos:start="3:49" pos:end="3:51">int</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:63">got_packet</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">TargaContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bpp</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:20">picsize</name></decl>, <decl pos:start="9:23" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:30">datasize</name> <init pos:start="9:32" pos:end="9:35">= <expr pos:start="9:34" pos:end="9:35"><operator pos:start="9:34" pos:end="9:34">-</operator><literal type="number" pos:start="9:35" pos:end="9:35">1</literal></expr></init></decl>, <decl pos:start="9:38" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:38" pos:end="9:40">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">out</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if<condition pos:start="15:7" pos:end="15:55">(<expr pos:start="15:8" pos:end="15:54"><name pos:start="15:8" pos:end="15:19"><name pos:start="15:8" pos:end="15:12">avctx</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:19">width</name></name> <operator pos:start="15:21" pos:end="15:21">&gt;</operator> <literal type="number" pos:start="15:23" pos:end="15:28">0xffff</literal> <operator pos:start="15:30" pos:end="15:31">||</operator> <name pos:start="15:33" pos:end="15:45"><name pos:start="15:33" pos:end="15:37">avctx</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:45">height</name></name> <operator pos:start="15:47" pos:end="15:47">&gt;</operator> <literal type="number" pos:start="15:49" pos:end="15:54">0xffff</literal></expr>)</condition> <block pos:start="15:57" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:31">

        <expr_stmt pos:start="17:9" pos:end="17:68"><expr pos:start="17:9" pos:end="17:67"><call pos:start="17:9" pos:end="17:67"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:67">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:66"><expr pos:start="17:37" pos:end="17:66"><literal type="string" pos:start="17:37" pos:end="17:66">"image dimensions too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="25:71"><expr pos:start="23:5" pos:end="25:70"><name pos:start="23:5" pos:end="23:11">picsize</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="25:70"><name pos:start="23:15" pos:end="23:38">av_image_get_buffer_size</name><argument_list pos:start="23:39" pos:end="25:70">(<argument pos:start="23:40" pos:end="23:53"><expr pos:start="23:40" pos:end="23:53"><name pos:start="23:40" pos:end="23:53"><name pos:start="23:40" pos:end="23:44">avctx</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:53">pix_fmt</name></name></expr></argument>,

                                       <argument pos:start="25:40" pos:end="25:51"><expr pos:start="25:40" pos:end="25:51"><name pos:start="25:40" pos:end="25:51"><name pos:start="25:40" pos:end="25:44">avctx</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:51">width</name></name></expr></argument>, <argument pos:start="25:54" pos:end="25:66"><expr pos:start="25:54" pos:end="25:66"><name pos:start="25:54" pos:end="25:66"><name pos:start="25:54" pos:end="25:58">avctx</name><operator pos:start="25:59" pos:end="25:60">-&gt;</operator><name pos:start="25:61" pos:end="25:66">height</name></name></expr></argument>, <argument pos:start="25:69" pos:end="25:69"><expr pos:start="25:69" pos:end="25:69"><literal type="number" pos:start="25:69" pos:end="25:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:55">(<expr pos:start="27:9" pos:end="27:54"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:12">ret</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:49"><name pos:start="27:16" pos:end="27:30">ff_alloc_packet</name><argument_list pos:start="27:31" pos:end="27:49">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">pkt</name></expr></argument>, <argument pos:start="27:37" pos:end="27:48"><expr pos:start="27:37" pos:end="27:48"><name pos:start="27:37" pos:end="27:43">picsize</name> <operator pos:start="27:45" pos:end="27:45">+</operator> <literal type="number" pos:start="27:47" pos:end="27:48">45</literal></expr></argument>)</argument_list></call><operator pos:start="27:50" pos:end="27:50">)</operator> <operator pos:start="27:52" pos:end="27:52">&lt;</operator> <literal type="number" pos:start="27:54" pos:end="27:54">0</literal></expr>)</condition> <block pos:start="27:57" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:19">

        <expr_stmt pos:start="29:9" pos:end="29:65"><expr pos:start="29:9" pos:end="29:64"><call pos:start="29:9" pos:end="29:64"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:64">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:63"><expr pos:start="29:37" pos:end="29:63"><literal type="string" pos:start="29:37" pos:end="29:63">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:60">/* zero out the header and only set applicable fields */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><call pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:10">memset</name><argument_list pos:start="39:11" pos:end="39:28">(<argument pos:start="39:12" pos:end="39:20"><expr pos:start="39:12" pos:end="39:20"><name pos:start="39:12" pos:end="39:20"><name pos:start="39:12" pos:end="39:14">pkt</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:20">data</name></name></expr></argument>, <argument pos:start="39:23" pos:end="39:23"><expr pos:start="39:23" pos:end="39:23"><literal type="number" pos:start="39:23" pos:end="39:23">0</literal></expr></argument>, <argument pos:start="39:26" pos:end="39:27"><expr pos:start="39:26" pos:end="39:27"><literal type="number" pos:start="39:26" pos:end="39:27">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><call pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:11">AV_WL16</name><argument_list pos:start="41:12" pos:end="41:39">(<argument pos:start="41:13" pos:end="41:24"><expr pos:start="41:13" pos:end="41:24"><name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:15">pkt</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:21">data</name></name><operator pos:start="41:22" pos:end="41:22">+</operator><literal type="number" pos:start="41:23" pos:end="41:24">12</literal></expr></argument>, <argument pos:start="41:27" pos:end="41:38"><expr pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:31">avctx</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:38">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:41"><expr pos:start="43:5" pos:end="43:40"><call pos:start="43:5" pos:end="43:40"><name pos:start="43:5" pos:end="43:11">AV_WL16</name><argument_list pos:start="43:12" pos:end="43:40">(<argument pos:start="43:13" pos:end="43:24"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:15">pkt</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:21">data</name></name><operator pos:start="43:22" pos:end="43:22">+</operator><literal type="number" pos:start="43:23" pos:end="43:24">14</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:39"><expr pos:start="43:27" pos:end="43:39"><name pos:start="43:27" pos:end="43:39"><name pos:start="43:27" pos:end="43:31">avctx</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:39">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:82">/* image descriptor byte: origin is always top-left, bits 0-3 specify alpha */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:71"><expr pos:start="47:5" pos:end="47:70"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:7">pkt</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:13">data</name><index pos:start="47:14" pos:end="47:17">[<expr pos:start="47:15" pos:end="47:16"><literal type="number" pos:start="47:15" pos:end="47:16">17</literal></expr>]</index></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="number" pos:start="47:21" pos:end="47:24">0x20</literal> <operator pos:start="47:26" pos:end="47:26">|</operator> <operator pos:start="47:28" pos:end="47:28">(</operator><ternary pos:start="47:29" pos:end="47:69"><condition pos:start="47:29" pos:end="47:63"><expr pos:start="47:29" pos:end="47:61"><name pos:start="47:29" pos:end="47:42"><name pos:start="47:29" pos:end="47:33">avctx</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:42">pix_fmt</name></name> <operator pos:start="47:44" pos:end="47:45">==</operator> <name pos:start="47:47" pos:end="47:61">AV_PIX_FMT_BGRA</name></expr> ?</condition><then pos:start="47:65" pos:end="47:65"> <expr pos:start="47:65" pos:end="47:65"><literal type="number" pos:start="47:65" pos:end="47:65">8</literal></expr> </then><else pos:start="47:67" pos:end="47:69">: <expr pos:start="47:69" pos:end="47:69"><literal type="number" pos:start="47:69" pos:end="47:69">0</literal></expr></else></ternary><operator pos:start="47:70" pos:end="47:70">)</operator></expr>;</expr_stmt>



    <switch pos:start="51:5" pos:end="93:5">switch<condition pos:start="51:11" pos:end="51:26">(<expr pos:start="51:12" pos:end="51:25"><name pos:start="51:12" pos:end="51:25"><name pos:start="51:12" pos:end="51:16">avctx</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:25">pix_fmt</name></name></expr>)</condition> <block pos:start="51:28" pos:end="93:5">{<block_content pos:start="53:5" pos:end="91:31">

    <case pos:start="53:5" pos:end="53:26">case <expr pos:start="53:10" pos:end="53:25"><name pos:start="53:10" pos:end="53:25">AV_PIX_FMT_GRAY8</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:11">pkt</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">data</name><index pos:start="55:18" pos:end="55:20">[<expr pos:start="55:19" pos:end="55:19"><literal type="number" pos:start="55:19" pos:end="55:19">2</literal></expr>]</index></name>  <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:30">TGA_BW</name></expr>;</expr_stmt>     <comment type="block" pos:start="55:37" pos:end="55:70">/* uncompressed grayscale image */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:11">pkt</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:17">data</name><index pos:start="57:18" pos:end="57:21">[<expr pos:start="57:19" pos:end="57:20"><literal type="number" pos:start="57:19" pos:end="57:20">16</literal></expr>]</index></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">8</literal></expr>;</expr_stmt>          <comment type="block" pos:start="57:37" pos:end="57:45">/* bpp */</comment>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:29">case <expr pos:start="61:10" pos:end="61:28"><name pos:start="61:10" pos:end="61:28">AV_PIX_FMT_RGB555LE</name></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">pkt</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:17">data</name><index pos:start="63:18" pos:end="63:20">[<expr pos:start="63:19" pos:end="63:19"><literal type="number" pos:start="63:19" pos:end="63:19">2</literal></expr>]</index></name>  <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:31">TGA_RGB</name></expr>;</expr_stmt>    <comment type="block" pos:start="63:37" pos:end="63:71">/* uncompresses true-color image */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:11">pkt</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:17">data</name><index pos:start="65:18" pos:end="65:21">[<expr pos:start="65:19" pos:end="65:20"><literal type="number" pos:start="65:19" pos:end="65:20">16</literal></expr>]</index></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <literal type="number" pos:start="65:25" pos:end="65:26">16</literal></expr>;</expr_stmt>         <comment type="block" pos:start="65:37" pos:end="65:45">/* bpp */</comment>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:26">case <expr pos:start="69:10" pos:end="69:25"><name pos:start="69:10" pos:end="69:25">AV_PIX_FMT_BGR24</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:32"><expr pos:start="71:9" pos:end="71:31"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">pkt</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:17">data</name><index pos:start="71:18" pos:end="71:20">[<expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">2</literal></expr>]</index></name>  <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:31">TGA_RGB</name></expr>;</expr_stmt>    <comment type="block" pos:start="71:37" pos:end="71:71">/* uncompressed true-color image */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">pkt</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:17">data</name><index pos:start="73:18" pos:end="73:21">[<expr pos:start="73:19" pos:end="73:20"><literal type="number" pos:start="73:19" pos:end="73:20">16</literal></expr>]</index></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <literal type="number" pos:start="73:25" pos:end="73:26">24</literal></expr>;</expr_stmt>         <comment type="block" pos:start="73:37" pos:end="73:45">/* bpp */</comment>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:25">case <expr pos:start="77:10" pos:end="77:24"><name pos:start="77:10" pos:end="77:24">AV_PIX_FMT_BGRA</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:32"><expr pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:11">pkt</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:17">data</name><index pos:start="79:18" pos:end="79:20">[<expr pos:start="79:19" pos:end="79:19"><literal type="number" pos:start="79:19" pos:end="79:19">2</literal></expr>]</index></name>  <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:31">TGA_RGB</name></expr>;</expr_stmt>    <comment type="block" pos:start="79:37" pos:end="79:71">/* uncompressed true-color image */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:11">pkt</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:17">data</name><index pos:start="81:18" pos:end="81:21">[<expr pos:start="81:19" pos:end="81:20"><literal type="number" pos:start="81:19" pos:end="81:20">16</literal></expr>]</index></name> <operator pos:start="81:23" pos:end="81:23">=</operator> <literal type="number" pos:start="81:25" pos:end="81:26">32</literal></expr>;</expr_stmt>         <comment type="block" pos:start="81:37" pos:end="81:45">/* bpp */</comment>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="89:52"><expr pos:start="87:9" pos:end="89:51"><call pos:start="87:9" pos:end="89:51"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="89:51">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:37" pos:end="87:72"><expr pos:start="87:37" pos:end="87:72"><literal type="string" pos:start="87:37" pos:end="87:72">"Pixel format '%s' not supported.\n"</literal></expr></argument>,

               <argument pos:start="89:16" pos:end="89:50"><expr pos:start="89:16" pos:end="89:50"><call pos:start="89:16" pos:end="89:50"><name pos:start="89:16" pos:end="89:34">av_get_pix_fmt_name</name><argument_list pos:start="89:35" pos:end="89:50">(<argument pos:start="89:36" pos:end="89:49"><expr pos:start="89:36" pos:end="89:49"><name pos:start="89:36" pos:end="89:49"><name pos:start="89:36" pos:end="89:40">avctx</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:49">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:31">return <expr pos:start="91:16" pos:end="91:30"><call pos:start="91:16" pos:end="91:30"><name pos:start="91:16" pos:end="91:22">AVERROR</name><argument_list pos:start="91:23" pos:end="91:30">(<argument pos:start="91:24" pos:end="91:29"><expr pos:start="91:24" pos:end="91:29"><name pos:start="91:24" pos:end="91:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><name pos:start="95:5" pos:end="95:7">bpp</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <name pos:start="95:11" pos:end="95:23"><name pos:start="95:11" pos:end="95:13">pkt</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:19">data</name><index pos:start="95:20" pos:end="95:23">[<expr pos:start="95:21" pos:end="95:22"><literal type="number" pos:start="95:21" pos:end="95:22">16</literal></expr>]</index></name> <operator pos:start="95:25" pos:end="95:26">&gt;&gt;</operator> <literal type="number" pos:start="95:28" pos:end="95:28">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="104:0"><expr pos:start="99:5" pos:end="99:24"><name pos:start="99:5" pos:end="99:7">out</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <name pos:start="99:11" pos:end="99:19"><name pos:start="99:11" pos:end="99:13">pkt</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:19">data</name></name> <operator pos:start="99:21" pos:end="99:21">+</operator> <literal type="number" pos:start="99:23" pos:end="99:24">18</literal></expr>;</expr_stmt>  <comment type="block" pos:start="99:28" pos:end="99:68">/* skip past the header we just output */</comment>



<cpp:if pos:start="103:1" pos:end="103:21">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:21">FF_API_CODER_TYPE</name></expr></cpp:if>

<macro pos:start="105:1" pos:end="105:31"><name pos:start="105:1" pos:end="105:31">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

    <if_stmt pos:start="107:5" pos:end="109:19"><if pos:start="107:5" pos:end="109:19">if <condition pos:start="107:8" pos:end="107:47">(<expr pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:13">avctx</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:25">coder_type</name></name> <operator pos:start="107:27" pos:end="107:28">==</operator> <name pos:start="107:30" pos:end="107:46">FF_CODER_TYPE_RAW</name></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:19"><block_content pos:start="109:9" pos:end="109:19">

        <expr_stmt pos:start="109:9" pos:end="109:19"><expr pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:14">rle</name></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro pos:start="111:1" pos:end="114:0"><name pos:start="111:1" pos:end="114:0">FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="117:5" pos:end="117:29">/* try RLE compression */</comment>

    <if_stmt pos:start="119:5" pos:end="121:87"><if pos:start="119:5" pos:end="121:87">if <condition pos:start="119:8" pos:end="119:15">(<expr pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:14">rle</name></name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:87"><block_content pos:start="121:9" pos:end="121:87">

        <expr_stmt pos:start="121:9" pos:end="121:87"><expr pos:start="121:9" pos:end="121:86"><name pos:start="121:9" pos:end="121:16">datasize</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:86"><name pos:start="121:20" pos:end="121:35">targa_encode_rle</name><argument_list pos:start="121:36" pos:end="121:86">(<argument pos:start="121:37" pos:end="121:39"><expr pos:start="121:37" pos:end="121:39"><name pos:start="121:37" pos:end="121:39">out</name></expr></argument>, <argument pos:start="121:42" pos:end="121:48"><expr pos:start="121:42" pos:end="121:48"><name pos:start="121:42" pos:end="121:48">picsize</name></expr></argument>, <argument pos:start="121:51" pos:end="121:51"><expr pos:start="121:51" pos:end="121:51"><name pos:start="121:51" pos:end="121:51">p</name></expr></argument>, <argument pos:start="121:54" pos:end="121:56"><expr pos:start="121:54" pos:end="121:56"><name pos:start="121:54" pos:end="121:56">bpp</name></expr></argument>, <argument pos:start="121:59" pos:end="121:70"><expr pos:start="121:59" pos:end="121:70"><name pos:start="121:59" pos:end="121:70"><name pos:start="121:59" pos:end="121:63">avctx</name><operator pos:start="121:64" pos:end="121:65">-&gt;</operator><name pos:start="121:66" pos:end="121:70">width</name></name></expr></argument>, <argument pos:start="121:73" pos:end="121:85"><expr pos:start="121:73" pos:end="121:85"><name pos:start="121:73" pos:end="121:85"><name pos:start="121:73" pos:end="121:77">avctx</name><operator pos:start="121:78" pos:end="121:79">-&gt;</operator><name pos:start="121:80" pos:end="121:85">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:65">/* if that worked well, mark the picture as RLE compressed */</comment>

    <if_stmt pos:start="127:5" pos:end="135:82"><if pos:start="127:5" pos:end="129:26">if<condition pos:start="127:7" pos:end="127:21">(<expr pos:start="127:8" pos:end="127:20"><name pos:start="127:8" pos:end="127:15">datasize</name> <operator pos:start="127:17" pos:end="127:18">&gt;=</operator> <literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:26"><block_content pos:start="129:9" pos:end="129:26">

        <expr_stmt pos:start="129:9" pos:end="129:26"><expr pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:20"><name pos:start="129:9" pos:end="129:11">pkt</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:17">data</name><index pos:start="129:18" pos:end="129:20">[<expr pos:start="129:19" pos:end="129:19"><literal type="number" pos:start="129:19" pos:end="129:19">2</literal></expr>]</index></name> <operator pos:start="129:22" pos:end="129:23">|=</operator> <literal type="number" pos:start="129:25" pos:end="129:25">8</literal></expr>;</expr_stmt></block_content></block></if>



    <comment type="block" pos:start="133:5" pos:end="133:66">/* if RLE didn't make it smaller, go back to no compression */</comment>

    <else pos:start="135:5" pos:end="135:82">else<block type="pseudo" pos:start="135:10" pos:end="135:82"><block_content pos:start="135:10" pos:end="135:82"> <expr_stmt pos:start="135:10" pos:end="135:82"><expr pos:start="135:10" pos:end="135:81"><name pos:start="135:10" pos:end="135:17">datasize</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:81"><name pos:start="135:21" pos:end="135:39">targa_encode_normal</name><argument_list pos:start="135:40" pos:end="135:81">(<argument pos:start="135:41" pos:end="135:43"><expr pos:start="135:41" pos:end="135:43"><name pos:start="135:41" pos:end="135:43">out</name></expr></argument>, <argument pos:start="135:46" pos:end="135:46"><expr pos:start="135:46" pos:end="135:46"><name pos:start="135:46" pos:end="135:46">p</name></expr></argument>, <argument pos:start="135:49" pos:end="135:51"><expr pos:start="135:49" pos:end="135:51"><name pos:start="135:49" pos:end="135:51">bpp</name></expr></argument>, <argument pos:start="135:54" pos:end="135:65"><expr pos:start="135:54" pos:end="135:65"><name pos:start="135:54" pos:end="135:65"><name pos:start="135:54" pos:end="135:58">avctx</name><operator pos:start="135:59" pos:end="135:60">-&gt;</operator><name pos:start="135:61" pos:end="135:65">width</name></name></expr></argument>, <argument pos:start="135:68" pos:end="135:80"><expr pos:start="135:68" pos:end="135:80"><name pos:start="135:68" pos:end="135:80"><name pos:start="135:68" pos:end="135:72">avctx</name><operator pos:start="135:73" pos:end="135:74">-&gt;</operator><name pos:start="135:75" pos:end="135:80">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:20"><expr pos:start="139:5" pos:end="139:19"><name pos:start="139:5" pos:end="139:7">out</name> <operator pos:start="139:9" pos:end="139:10">+=</operator> <name pos:start="139:12" pos:end="139:19">datasize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="147:55">/* The standard recommends including this section, even if we don't use

     * any of the features it affords. TODO: take advantage of the pixel

     * aspect ratio and encoder ID fields available? */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:57"><expr pos:start="149:5" pos:end="149:56"><call pos:start="149:5" pos:end="149:56"><name pos:start="149:5" pos:end="149:10">memcpy</name><argument_list pos:start="149:11" pos:end="149:56">(<argument pos:start="149:12" pos:end="149:14"><expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">out</name></expr></argument>, <argument pos:start="149:17" pos:end="149:51"><expr pos:start="149:17" pos:end="149:51"><literal type="string" pos:start="149:17" pos:end="149:51">"\0\0\0\0\0\0\0\0TRUEVISION-XFILE."</literal></expr></argument>, <argument pos:start="149:54" pos:end="149:55"><expr pos:start="149:54" pos:end="149:55"><literal type="number" pos:start="149:54" pos:end="149:55">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:39"><expr pos:start="153:5" pos:end="153:38"><name pos:start="153:5" pos:end="153:13"><name pos:start="153:5" pos:end="153:7">pkt</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:13">size</name></name>   <operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:21">out</name> <operator pos:start="153:23" pos:end="153:23">+</operator> <literal type="number" pos:start="153:25" pos:end="153:28">26</literal> <operator pos:start="153:28" pos:end="153:28">-</operator> <name pos:start="153:30" pos:end="153:38"><name pos:start="153:30" pos:end="153:32">pkt</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:38">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:34"><expr pos:start="155:5" pos:end="155:33"><name pos:start="155:5" pos:end="155:14"><name pos:start="155:5" pos:end="155:7">pkt</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:14">flags</name></name> <operator pos:start="155:16" pos:end="155:17">|=</operator> <name pos:start="155:19" pos:end="155:33">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:20"><expr pos:start="157:5" pos:end="157:19"><operator pos:start="157:5" pos:end="157:5">*</operator><name pos:start="157:6" pos:end="157:15">got_packet</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <literal type="number" pos:start="157:19" pos:end="157:19">1</literal></expr>;</expr_stmt>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
