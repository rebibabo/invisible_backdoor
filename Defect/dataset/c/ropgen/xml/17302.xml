<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17302.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">net_socket_mcast_create</name><parameter_list pos:start="1:35" pos:end="1:92">(<parameter pos:start="1:36" pos:end="1:64"><decl pos:start="1:36" pos:end="1:64"><type pos:start="1:36" pos:end="1:64"><name pos:start="1:36" pos:end="1:53"><name pos:start="1:36" pos:end="1:41">struct</name> <name pos:start="1:43" pos:end="1:53">sockaddr_in</name></name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:64">mcastaddr</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:91"><decl pos:start="1:67" pos:end="1:91"><type pos:start="1:67" pos:end="1:91"><name pos:start="1:67" pos:end="1:80"><name pos:start="1:67" pos:end="1:72">struct</name> <name pos:start="1:74" pos:end="1:80">in_addr</name></name> <modifier pos:start="1:82" pos:end="1:82">*</modifier></type><name pos:start="1:83" pos:end="1:91">localaddr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="145:1">{<block_content pos:start="5:5" pos:end="143:14">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">ip_mreq</name></name></type> <name pos:start="5:20" pos:end="5:22">imr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">val</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">ret</name></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="23:5"><if pos:start="11:5" pos:end="23:5">if <condition pos:start="11:8" pos:end="11:57">(<expr pos:start="11:9" pos:end="11:56"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:56"><name pos:start="11:10" pos:end="11:21">IN_MULTICAST</name><argument_list pos:start="11:22" pos:end="11:56">(<argument pos:start="11:23" pos:end="11:55"><expr pos:start="11:23" pos:end="11:55"><call pos:start="11:23" pos:end="11:55"><name pos:start="11:23" pos:end="11:27">ntohl</name><argument_list pos:start="11:28" pos:end="11:55">(<argument pos:start="11:29" pos:end="11:54"><expr pos:start="11:29" pos:end="11:54"><name pos:start="11:29" pos:end="11:54"><name pos:start="11:29" pos:end="11:37">mcastaddr</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:47">sin_addr</name><operator pos:start="11:48" pos:end="11:48">.</operator><name pos:start="11:49" pos:end="11:54">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:59" pos:end="23:5">{<block_content pos:start="13:9" pos:end="19:18">

	<expr_stmt pos:start="13:9" pos:end="17:56"><expr pos:start="13:9" pos:end="17:55"><call pos:start="13:9" pos:end="17:55"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="17:55">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:113"><expr pos:start="13:25" pos:end="13:113"><literal type="string" pos:start="13:25" pos:end="13:113">"qemu: error: specified mcastaddr \"%s\" (0x%08x) does not contain a multicast address\n"</literal></expr></argument>,

		<argument pos:start="15:17" pos:end="15:46"><expr pos:start="15:17" pos:end="15:46"><call pos:start="15:17" pos:end="15:46"><name pos:start="15:17" pos:end="15:25">inet_ntoa</name><argument_list pos:start="15:26" pos:end="15:46">(<argument pos:start="15:27" pos:end="15:45"><expr pos:start="15:27" pos:end="15:45"><name pos:start="15:27" pos:end="15:45"><name pos:start="15:27" pos:end="15:35">mcastaddr</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:45">sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="17:17" pos:end="17:54"><expr pos:start="17:17" pos:end="17:54"><operator pos:start="17:17" pos:end="17:17">(</operator><name pos:start="17:18" pos:end="17:20">int</name><operator pos:start="17:21" pos:end="17:21">)</operator><call pos:start="17:22" pos:end="17:54"><name pos:start="17:22" pos:end="17:26">ntohl</name><argument_list pos:start="17:27" pos:end="17:54">(<argument pos:start="17:28" pos:end="17:53"><expr pos:start="17:28" pos:end="17:53"><name pos:start="17:28" pos:end="17:53"><name pos:start="17:28" pos:end="17:36">mcastaddr</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:46">sin_addr</name><operator pos:start="17:47" pos:end="17:47">.</operator><name pos:start="17:48" pos:end="17:53">s_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>



    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:6">fd</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:44"><name pos:start="25:10" pos:end="25:20">qemu_socket</name><argument_list pos:start="25:21" pos:end="25:44">(<argument pos:start="25:22" pos:end="25:28"><expr pos:start="25:22" pos:end="25:28"><name pos:start="25:22" pos:end="25:28">PF_INET</name></expr></argument>, <argument pos:start="25:31" pos:end="25:40"><expr pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:40">SOCK_DGRAM</name></expr></argument>, <argument pos:start="25:43" pos:end="25:43"><expr pos:start="25:43" pos:end="25:43"><literal type="number" pos:start="25:43" pos:end="25:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:15">(<expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:12">&lt;</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>)</condition> <block pos:start="27:17" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><call pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:14">perror</name><argument_list pos:start="29:15" pos:end="29:45">(<argument pos:start="29:16" pos:end="29:44"><expr pos:start="29:16" pos:end="29:44"><literal type="string" pos:start="29:16" pos:end="29:44">"socket(PF_INET, SOCK_DGRAM)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:12"><expr pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:7">val</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <literal type="number" pos:start="37:11" pos:end="37:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:52"><expr pos:start="39:5" pos:end="41:51"><name pos:start="39:5" pos:end="39:7">ret</name><operator pos:start="39:8" pos:end="39:8">=</operator><call pos:start="39:9" pos:end="41:51"><name pos:start="39:9" pos:end="39:18">setsockopt</name><argument_list pos:start="39:19" pos:end="41:51">(<argument pos:start="39:20" pos:end="39:21"><expr pos:start="39:20" pos:end="39:21"><name pos:start="39:20" pos:end="39:21">fd</name></expr></argument>, <argument pos:start="39:24" pos:end="39:33"><expr pos:start="39:24" pos:end="39:33"><name pos:start="39:24" pos:end="39:33">SOL_SOCKET</name></expr></argument>, <argument pos:start="39:36" pos:end="39:47"><expr pos:start="39:36" pos:end="39:47"><name pos:start="39:36" pos:end="39:47">SO_REUSEADDR</name></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:37"><expr pos:start="41:20" pos:end="41:37"><operator pos:start="41:20" pos:end="41:20">(</operator><specifier pos:start="41:21" pos:end="41:25">const</specifier> <name pos:start="41:27" pos:end="41:30">char</name> <operator pos:start="41:32" pos:end="41:32">*</operator><operator pos:start="41:33" pos:end="41:33">)</operator><operator pos:start="41:34" pos:end="41:34">&amp;</operator><name pos:start="41:35" pos:end="41:37">val</name></expr></argument>, <argument pos:start="41:40" pos:end="41:50"><expr pos:start="41:40" pos:end="41:50"><sizeof pos:start="41:40" pos:end="41:50">sizeof<argument_list pos:start="41:46" pos:end="41:50">(<argument pos:start="41:47" pos:end="41:49"><expr pos:start="41:47" pos:end="41:49"><name pos:start="41:47" pos:end="41:49">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

	<expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><call pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:14">perror</name><argument_list pos:start="45:15" pos:end="45:54">(<argument pos:start="45:16" pos:end="45:53"><expr pos:start="45:16" pos:end="45:53"><literal type="string" pos:start="45:16" pos:end="45:53">"setsockopt(SOL_SOCKET, SO_REUSEADDR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:69"><expr pos:start="53:5" pos:end="53:68"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:68"><name pos:start="53:11" pos:end="53:14">bind</name><argument_list pos:start="53:15" pos:end="53:68">(<argument pos:start="53:16" pos:end="53:17"><expr pos:start="53:16" pos:end="53:17"><name pos:start="53:16" pos:end="53:17">fd</name></expr></argument>, <argument pos:start="53:20" pos:end="53:47"><expr pos:start="53:20" pos:end="53:47"><operator pos:start="53:20" pos:end="53:20">(</operator>struct <name pos:start="53:28" pos:end="53:35">sockaddr</name> <operator pos:start="53:37" pos:end="53:37">*</operator><operator pos:start="53:38" pos:end="53:38">)</operator><name pos:start="53:39" pos:end="53:47">mcastaddr</name></expr></argument>, <argument pos:start="53:50" pos:end="53:67"><expr pos:start="53:50" pos:end="53:67"><sizeof pos:start="53:50" pos:end="53:67">sizeof<argument_list pos:start="53:56" pos:end="53:67">(<argument pos:start="53:57" pos:end="53:66"><expr pos:start="53:57" pos:end="53:66"><operator pos:start="53:57" pos:end="53:57">*</operator><name pos:start="53:58" pos:end="53:66">mcastaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition> <block pos:start="55:18" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:14">perror</name><argument_list pos:start="57:15" pos:end="57:22">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><literal type="string" pos:start="57:16" pos:end="57:21">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:18">goto <name pos:start="59:14" pos:end="59:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:37">/* Add host to multicast group */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:7">imr</name><operator pos:start="67:8" pos:end="67:8">.</operator><name pos:start="67:9" pos:end="67:21">imr_multiaddr</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:43"><name pos:start="67:25" pos:end="67:33">mcastaddr</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:43">sin_addr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:18">(<expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:17">localaddr</name></expr>)</condition> <block pos:start="69:20" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:39">

        <expr_stmt pos:start="71:9" pos:end="71:39"><expr pos:start="71:9" pos:end="71:38"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:11">imr</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:25">imr_interface</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <operator pos:start="71:29" pos:end="71:29">*</operator><name pos:start="71:30" pos:end="71:38">localaddr</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="77:5">else <block pos:start="73:12" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:53">

        <expr_stmt pos:start="75:9" pos:end="75:53"><expr pos:start="75:9" pos:end="75:52"><name pos:start="75:9" pos:end="75:32"><name pos:start="75:9" pos:end="75:11">imr</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:25">imr_interface</name><operator pos:start="75:26" pos:end="75:26">.</operator><name pos:start="75:27" pos:end="75:32">s_addr</name></name> <operator pos:start="75:34" pos:end="75:34">=</operator> <call pos:start="75:36" pos:end="75:52"><name pos:start="75:36" pos:end="75:40">htonl</name><argument_list pos:start="75:41" pos:end="75:52">(<argument pos:start="75:42" pos:end="75:51"><expr pos:start="75:42" pos:end="75:51"><name pos:start="75:42" pos:end="75:51">INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="83:65"><expr pos:start="81:5" pos:end="83:64"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="83:64"><name pos:start="81:11" pos:end="81:20">setsockopt</name><argument_list pos:start="81:21" pos:end="83:64">(<argument pos:start="81:22" pos:end="81:23"><expr pos:start="81:22" pos:end="81:23"><name pos:start="81:22" pos:end="81:23">fd</name></expr></argument>, <argument pos:start="81:26" pos:end="81:35"><expr pos:start="81:26" pos:end="81:35"><name pos:start="81:26" pos:end="81:35">IPPROTO_IP</name></expr></argument>, <argument pos:start="81:38" pos:end="81:54"><expr pos:start="81:38" pos:end="81:54"><name pos:start="81:38" pos:end="81:54">IP_ADD_MEMBERSHIP</name></expr></argument>,

                     <argument pos:start="83:22" pos:end="83:39"><expr pos:start="83:22" pos:end="83:39"><operator pos:start="83:22" pos:end="83:22">(</operator><specifier pos:start="83:23" pos:end="83:27">const</specifier> <name pos:start="83:29" pos:end="83:32">char</name> <operator pos:start="83:34" pos:end="83:34">*</operator><operator pos:start="83:35" pos:end="83:35">)</operator><operator pos:start="83:36" pos:end="83:36">&amp;</operator><name pos:start="83:37" pos:end="83:39">imr</name></expr></argument>, <argument pos:start="83:42" pos:end="83:63"><expr pos:start="83:42" pos:end="83:63"><sizeof pos:start="83:42" pos:end="83:63">sizeof<argument_list pos:start="83:48" pos:end="83:63">(<argument pos:start="83:49" pos:end="83:62"><expr pos:start="83:49" pos:end="83:62">struct <name pos:start="83:56" pos:end="83:62">ip_mreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:16">(<expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">&lt;</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>)</condition> <block pos:start="85:18" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:18">

	<expr_stmt pos:start="87:9" pos:end="87:48"><expr pos:start="87:9" pos:end="87:47"><call pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:14">perror</name><argument_list pos:start="87:15" pos:end="87:47">(<argument pos:start="87:16" pos:end="87:46"><expr pos:start="87:16" pos:end="87:46"><literal type="string" pos:start="87:16" pos:end="87:46">"setsockopt(IP_ADD_MEMBERSHIP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:70">/* Force mcast msgs to loopback (eg. several QEMUs in same host */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:12"><expr pos:start="97:5" pos:end="97:11"><name pos:start="97:5" pos:end="97:7">val</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <literal type="number" pos:start="97:11" pos:end="97:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:52"><expr pos:start="99:5" pos:end="101:51"><name pos:start="99:5" pos:end="99:7">ret</name><operator pos:start="99:8" pos:end="99:8">=</operator><call pos:start="99:9" pos:end="101:51"><name pos:start="99:9" pos:end="99:18">setsockopt</name><argument_list pos:start="99:19" pos:end="101:51">(<argument pos:start="99:20" pos:end="99:21"><expr pos:start="99:20" pos:end="99:21"><name pos:start="99:20" pos:end="99:21">fd</name></expr></argument>, <argument pos:start="99:24" pos:end="99:33"><expr pos:start="99:24" pos:end="99:33"><name pos:start="99:24" pos:end="99:33">IPPROTO_IP</name></expr></argument>, <argument pos:start="99:36" pos:end="99:52"><expr pos:start="99:36" pos:end="99:52"><name pos:start="99:36" pos:end="99:52">IP_MULTICAST_LOOP</name></expr></argument>,

                   <argument pos:start="101:20" pos:end="101:37"><expr pos:start="101:20" pos:end="101:37"><operator pos:start="101:20" pos:end="101:20">(</operator><specifier pos:start="101:21" pos:end="101:25">const</specifier> <name pos:start="101:27" pos:end="101:30">char</name> <operator pos:start="101:32" pos:end="101:32">*</operator><operator pos:start="101:33" pos:end="101:33">)</operator><operator pos:start="101:34" pos:end="101:34">&amp;</operator><name pos:start="101:35" pos:end="101:37">val</name></expr></argument>, <argument pos:start="101:40" pos:end="101:50"><expr pos:start="101:40" pos:end="101:50"><sizeof pos:start="101:40" pos:end="101:50">sizeof<argument_list pos:start="101:46" pos:end="101:50">(<argument pos:start="101:47" pos:end="101:49"><expr pos:start="101:47" pos:end="101:49"><name pos:start="101:47" pos:end="101:49">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:16">(<expr pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">&lt;</operator> <literal type="number" pos:start="103:15" pos:end="103:15">0</literal></expr>)</condition> <block pos:start="103:18" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:18">

	<expr_stmt pos:start="105:9" pos:end="105:56"><expr pos:start="105:9" pos:end="105:55"><call pos:start="105:9" pos:end="105:55"><name pos:start="105:9" pos:end="105:14">perror</name><argument_list pos:start="105:15" pos:end="105:55">(<argument pos:start="105:16" pos:end="105:54"><expr pos:start="105:16" pos:end="105:54"><literal type="string" pos:start="105:16" pos:end="105:54">"setsockopt(SOL_IP, IP_MULTICAST_LOOP)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<goto pos:start="107:9" pos:end="107:18">goto <name pos:start="107:14" pos:end="107:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:73">/* If a bind address is given, only send packets from that address */</comment>

    <if_stmt pos:start="115:5" pos:end="129:5"><if pos:start="115:5" pos:end="129:5">if <condition pos:start="115:8" pos:end="115:26">(<expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:17">localaddr</name> <operator pos:start="115:19" pos:end="115:20">!=</operator> <name pos:start="115:22" pos:end="115:25">NULL</name></expr>)</condition> <block pos:start="115:28" pos:end="129:5">{<block_content pos:start="117:9" pos:end="127:9">

        <expr_stmt pos:start="117:9" pos:end="119:70"><expr pos:start="117:9" pos:end="119:69"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="119:69"><name pos:start="117:15" pos:end="117:24">setsockopt</name><argument_list pos:start="117:25" pos:end="119:69">(<argument pos:start="117:26" pos:end="117:27"><expr pos:start="117:26" pos:end="117:27"><name pos:start="117:26" pos:end="117:27">fd</name></expr></argument>, <argument pos:start="117:30" pos:end="117:39"><expr pos:start="117:30" pos:end="117:39"><name pos:start="117:30" pos:end="117:39">IPPROTO_IP</name></expr></argument>, <argument pos:start="117:42" pos:end="117:56"><expr pos:start="117:42" pos:end="117:56"><name pos:start="117:42" pos:end="117:56">IP_MULTICAST_IF</name></expr></argument>,

                         <argument pos:start="119:26" pos:end="119:48"><expr pos:start="119:26" pos:end="119:48"><operator pos:start="119:26" pos:end="119:26">(</operator><specifier pos:start="119:27" pos:end="119:31">const</specifier> <name pos:start="119:33" pos:end="119:36">char</name> <operator pos:start="119:38" pos:end="119:38">*</operator><operator pos:start="119:39" pos:end="119:39">)</operator><name pos:start="119:40" pos:end="119:48">localaddr</name></expr></argument>, <argument pos:start="119:51" pos:end="119:68"><expr pos:start="119:51" pos:end="119:68"><sizeof pos:start="119:51" pos:end="119:68">sizeof<argument_list pos:start="119:57" pos:end="119:68">(<argument pos:start="119:58" pos:end="119:67"><expr pos:start="119:58" pos:end="119:67"><operator pos:start="119:58" pos:end="119:58">*</operator><name pos:start="119:59" pos:end="119:67">localaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:22">

            <expr_stmt pos:start="123:13" pos:end="123:50"><expr pos:start="123:13" pos:end="123:49"><call pos:start="123:13" pos:end="123:49"><name pos:start="123:13" pos:end="123:18">perror</name><argument_list pos:start="123:19" pos:end="123:49">(<argument pos:start="123:20" pos:end="123:48"><expr pos:start="123:20" pos:end="123:48"><literal type="string" pos:start="123:20" pos:end="123:48">"setsockopt(IP_MULTICAST_IF)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:22">goto <name pos:start="125:18" pos:end="125:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><call pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:23">socket_set_nonblock</name><argument_list pos:start="133:24" pos:end="133:27">(<argument pos:start="133:25" pos:end="133:26"><expr pos:start="133:25" pos:end="133:26"><name pos:start="133:25" pos:end="133:26">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:14">return <expr pos:start="135:12" pos:end="135:13"><name pos:start="135:12" pos:end="135:13">fd</name></expr>;</return>

<label pos:start="137:1" pos:end="137:5"><name pos:start="137:1" pos:end="137:4">fail</name>:</label>

    <if_stmt pos:start="139:5" pos:end="141:24"><if pos:start="139:5" pos:end="141:24">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:10">fd</name> <operator pos:start="139:12" pos:end="139:13">&gt;=</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition><block type="pseudo" pos:start="141:9" pos:end="141:24"><block_content pos:start="141:9" pos:end="141:24">

        <expr_stmt pos:start="141:9" pos:end="141:24"><expr pos:start="141:9" pos:end="141:23"><call pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:19">closesocket</name><argument_list pos:start="141:20" pos:end="141:23">(<argument pos:start="141:21" pos:end="141:22"><expr pos:start="141:21" pos:end="141:22"><name pos:start="141:21" pos:end="141:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="143:5" pos:end="143:14">return <expr pos:start="143:12" pos:end="143:13"><operator pos:start="143:12" pos:end="143:12">-</operator><literal type="number" pos:start="143:13" pos:end="143:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
