<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4999.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_st</name> <parameter_list pos:start="1:29" pos:end="1:72">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">TCGContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:56">TCGArg</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">args</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:71"><decl pos:start="1:65" pos:end="1:71"><type pos:start="1:65" pos:end="1:71"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:71">opc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="182:0">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">addr_reg</name></decl>, <decl pos:start="5:19" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:20">r0</name></decl>, <decl pos:start="5:23" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:23" pos:end="5:24">r1</name></decl>, <decl pos:start="5:27" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:34">data_reg</name></decl>, <decl pos:start="5:37" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:45">data_reg2</name></decl>, <decl pos:start="5:48" pos:end="5:52"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:48" pos:end="5:52">bswap</name></decl>, <decl pos:start="5:55" pos:end="5:59"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:55" pos:end="5:59">rbase</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:21">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">mem_index</name></decl>, <decl pos:start="9:20" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:21">r2</name></decl>, <decl pos:start="9:24" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:32">addr_reg2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:22">label_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:12">data_reg</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <operator pos:start="17:16" pos:end="17:16">*</operator><name pos:start="17:17" pos:end="17:20">args</name><operator pos:start="17:21" pos:end="17:22">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:22"><if pos:start="19:5" pos:end="21:28">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:11">opc</name> <operator pos:start="19:13" pos:end="19:14">==</operator> <literal type="number" pos:start="19:16" pos:end="19:16">3</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:28"><block_content pos:start="21:9" pos:end="21:28">

        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:17">data_reg2</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <operator pos:start="21:21" pos:end="21:21">*</operator><name pos:start="21:22" pos:end="21:25">args</name><operator pos:start="21:26" pos:end="21:27">++</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="23:5" pos:end="25:22">else<block type="pseudo" pos:start="25:9" pos:end="25:22"><block_content pos:start="25:9" pos:end="25:22">

        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:17">data_reg2</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="34:0"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:12">addr_reg</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <operator pos:start="27:16" pos:end="27:16">*</operator><name pos:start="27:17" pos:end="27:20">args</name><operator pos:start="27:21" pos:end="27:22">++</operator></expr>;</expr_stmt>



<cpp:ifdef pos:start="31:1" pos:end="31:21">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:21">CONFIG_SOFTMMU</name></cpp:ifdef>

<cpp:if pos:start="33:1" pos:end="33:26">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:20">TARGET_LONG_BITS</name> <operator pos:start="33:22" pos:end="33:23">==</operator> <literal type="number" pos:start="33:25" pos:end="33:26">64</literal></expr></cpp:if>

    <expr_stmt pos:start="35:5" pos:end="38:0"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:13">addr_reg2</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <operator pos:start="35:17" pos:end="35:17">*</operator><name pos:start="35:18" pos:end="35:21">args</name><operator pos:start="35:22" pos:end="35:23">++</operator></expr>;</expr_stmt>

<cpp:else pos:start="37:1" pos:end="37:5">#<cpp:directive pos:start="37:2" pos:end="37:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">addr_reg2</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:13">mem_index</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:11"><expr pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:6">r0</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <literal type="number" pos:start="45:10" pos:end="45:10">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:11"><expr pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:6">r1</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <literal type="number" pos:start="47:10" pos:end="47:10">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:11"><expr pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:6">r2</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <literal type="number" pos:start="49:10" pos:end="49:10">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:14"><expr pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:9">rbase</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <literal type="number" pos:start="51:13" pos:end="51:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="68:0"><expr pos:start="55:5" pos:end="65:9"><call pos:start="55:5" pos:end="65:9"><name pos:start="55:5" pos:end="55:21">tcg_out_tlb_check</name> <argument_list pos:start="55:23" pos:end="65:9">(

        <argument pos:start="57:9" pos:end="57:9"><expr pos:start="57:9" pos:end="57:9"><name pos:start="57:9" pos:end="57:9">s</name></expr></argument>, <argument pos:start="57:12" pos:end="57:13"><expr pos:start="57:12" pos:end="57:13"><name pos:start="57:12" pos:end="57:13">r0</name></expr></argument>, <argument pos:start="57:16" pos:end="57:17"><expr pos:start="57:16" pos:end="57:17"><name pos:start="57:16" pos:end="57:17">r1</name></expr></argument>, <argument pos:start="57:20" pos:end="57:21"><expr pos:start="57:20" pos:end="57:21"><name pos:start="57:20" pos:end="57:21">r2</name></expr></argument>, <argument pos:start="57:24" pos:end="57:31"><expr pos:start="57:24" pos:end="57:31"><name pos:start="57:24" pos:end="57:31">addr_reg</name></expr></argument>, <argument pos:start="57:34" pos:end="57:42"><expr pos:start="57:34" pos:end="57:42"><name pos:start="57:34" pos:end="57:42">addr_reg2</name></expr></argument>, <argument pos:start="57:45" pos:end="57:51"><expr pos:start="57:45" pos:end="57:51"><name pos:start="57:45" pos:end="57:47">opc</name> <operator pos:start="57:49" pos:end="57:49">&amp;</operator> <literal type="number" pos:start="57:51" pos:end="57:51">3</literal></expr></argument>,

        <argument pos:start="59:9" pos:end="59:67"><expr pos:start="59:9" pos:end="59:67"><call pos:start="59:9" pos:end="59:67"><name pos:start="59:9" pos:end="59:16">offsetof</name> <argument_list pos:start="59:18" pos:end="59:67">(<argument pos:start="59:19" pos:end="59:30"><expr pos:start="59:19" pos:end="59:30"><name pos:start="59:19" pos:end="59:30">CPUArchState</name></expr></argument>, <argument pos:start="59:33" pos:end="59:66"><expr pos:start="59:33" pos:end="59:66"><name pos:start="59:33" pos:end="59:55"><name pos:start="59:33" pos:end="59:41">tlb_table</name><index pos:start="59:42" pos:end="59:52">[<expr pos:start="59:43" pos:end="59:51"><name pos:start="59:43" pos:end="59:51">mem_index</name></expr>]</index><index pos:start="59:53" pos:end="59:55">[<expr pos:start="59:54" pos:end="59:54"><literal type="number" pos:start="59:54" pos:end="59:54">0</literal></expr>]</index></name><operator pos:start="59:56" pos:end="59:56">.</operator><name pos:start="59:57" pos:end="59:66">addr_write</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="61:9" pos:end="61:75"><expr pos:start="61:9" pos:end="61:75"><call pos:start="61:9" pos:end="61:38"><name pos:start="61:9" pos:end="61:16">offsetof</name> <argument_list pos:start="61:18" pos:end="61:38">(<argument pos:start="61:19" pos:end="61:29"><expr pos:start="61:19" pos:end="61:29"><name pos:start="61:19" pos:end="61:29">CPUTLBEntry</name></expr></argument>, <argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37">addend</name></expr></argument>)</argument_list></call> <operator pos:start="61:40" pos:end="61:40">-</operator> <call pos:start="61:42" pos:end="61:75"><name pos:start="61:42" pos:end="61:49">offsetof</name> <argument_list pos:start="61:51" pos:end="61:75">(<argument pos:start="61:52" pos:end="61:62"><expr pos:start="61:52" pos:end="61:62"><name pos:start="61:52" pos:end="61:62">CPUTLBEntry</name></expr></argument>, <argument pos:start="61:65" pos:end="61:74"><expr pos:start="61:65" pos:end="61:74"><name pos:start="61:65" pos:end="61:74">addr_write</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="63:9" pos:end="63:18"><expr pos:start="63:9" pos:end="63:18"><operator pos:start="63:9" pos:end="63:9">&amp;</operator><name pos:start="63:10" pos:end="63:18">label_ptr</name></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="67:1" pos:end="67:5">#<cpp:directive pos:start="67:2" pos:end="67:5">else</cpp:directive></cpp:else>  <comment type="block" pos:start="67:8" pos:end="67:28">/* !CONFIG_SOFTMMU */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:18"><expr pos:start="69:5" pos:end="69:17"><name pos:start="69:5" pos:end="69:6">r0</name> <operator pos:start="69:8" pos:end="69:8">=</operator> <name pos:start="69:10" pos:end="69:17">addr_reg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:11"><expr pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:6">r1</name> <operator pos:start="71:8" pos:end="71:8">=</operator> <literal type="number" pos:start="71:10" pos:end="71:10">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="80:0"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:9">rbase</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <ternary pos:start="73:13" pos:end="73:47"><condition pos:start="73:13" pos:end="73:24"><expr pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:22">GUEST_BASE</name></expr> ?</condition><then pos:start="73:26" pos:end="73:43"> <expr pos:start="73:26" pos:end="73:43"><name pos:start="73:26" pos:end="73:43">TCG_GUEST_BASE_REG</name></expr> </then><else pos:start="73:45" pos:end="73:47">: <expr pos:start="73:47" pos:end="73:47"><literal type="number" pos:start="73:47" pos:end="73:47">0</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="79:1" pos:end="79:29">#<cpp:directive pos:start="79:2" pos:end="79:6">ifdef</cpp:directive> <name pos:start="79:8" pos:end="79:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="81:5" pos:end="84:0"><expr pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:9">bswap</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <literal type="number" pos:start="81:13" pos:end="81:13">0</literal></expr>;</expr_stmt>

<cpp:else pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="85:5" pos:end="88:0"><expr pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:9">bswap</name> <operator pos:start="85:11" pos:end="85:11">=</operator> <literal type="number" pos:start="85:13" pos:end="85:13">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

    <switch pos:start="89:5" pos:end="160:0">switch <condition pos:start="89:12" pos:end="89:16">(<expr pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">opc</name></expr>)</condition> <block pos:start="89:18" pos:end="160:0">{<block_content pos:start="91:5" pos:end="153:14">

    <case pos:start="91:5" pos:end="91:11">case <expr pos:start="91:10" pos:end="91:10"><literal type="number" pos:start="91:10" pos:end="91:10">0</literal></expr>:</case>

        <expr_stmt pos:start="93:9" pos:end="93:56"><expr pos:start="93:9" pos:end="93:55"><call pos:start="93:9" pos:end="93:55"><name pos:start="93:9" pos:end="93:17">tcg_out32</name> <argument_list pos:start="93:19" pos:end="93:55">(<argument pos:start="93:20" pos:end="93:20"><expr pos:start="93:20" pos:end="93:20"><name pos:start="93:20" pos:end="93:20">s</name></expr></argument>, <argument pos:start="93:23" pos:end="93:54"><expr pos:start="93:23" pos:end="93:54"><name pos:start="93:23" pos:end="93:26">STBX</name> <operator pos:start="93:28" pos:end="93:28">|</operator> <call pos:start="93:30" pos:end="93:54"><name pos:start="93:30" pos:end="93:32">SAB</name> <argument_list pos:start="93:34" pos:end="93:54">(<argument pos:start="93:35" pos:end="93:42"><expr pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:42">data_reg</name></expr></argument>, <argument pos:start="93:45" pos:end="93:49"><expr pos:start="93:45" pos:end="93:49"><name pos:start="93:45" pos:end="93:49">rbase</name></expr></argument>, <argument pos:start="93:52" pos:end="93:53"><expr pos:start="93:52" pos:end="93:53"><name pos:start="93:52" pos:end="93:53">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>

    <case pos:start="97:5" pos:end="97:11">case <expr pos:start="97:10" pos:end="97:10"><literal type="number" pos:start="97:10" pos:end="97:10">1</literal></expr>:</case>

        <if_stmt pos:start="99:9" pos:end="105:60"><if pos:start="99:9" pos:end="101:62">if <condition pos:start="99:12" pos:end="99:18">(<expr pos:start="99:13" pos:end="99:17"><name pos:start="99:13" pos:end="99:17">bswap</name></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:62"><block_content pos:start="101:13" pos:end="101:62">

            <expr_stmt pos:start="101:13" pos:end="101:62"><expr pos:start="101:13" pos:end="101:61"><call pos:start="101:13" pos:end="101:61"><name pos:start="101:13" pos:end="101:21">tcg_out32</name> <argument_list pos:start="101:23" pos:end="101:61">(<argument pos:start="101:24" pos:end="101:24"><expr pos:start="101:24" pos:end="101:24"><name pos:start="101:24" pos:end="101:24">s</name></expr></argument>, <argument pos:start="101:27" pos:end="101:60"><expr pos:start="101:27" pos:end="101:60"><name pos:start="101:27" pos:end="101:32">STHBRX</name> <operator pos:start="101:34" pos:end="101:34">|</operator> <call pos:start="101:36" pos:end="101:60"><name pos:start="101:36" pos:end="101:38">SAB</name> <argument_list pos:start="101:40" pos:end="101:60">(<argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:48">data_reg</name></expr></argument>, <argument pos:start="101:51" pos:end="101:55"><expr pos:start="101:51" pos:end="101:55"><name pos:start="101:51" pos:end="101:55">rbase</name></expr></argument>, <argument pos:start="101:58" pos:end="101:59"><expr pos:start="101:58" pos:end="101:59"><name pos:start="101:58" pos:end="101:59">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="103:9" pos:end="105:60">else<block type="pseudo" pos:start="105:13" pos:end="105:60"><block_content pos:start="105:13" pos:end="105:60">

            <expr_stmt pos:start="105:13" pos:end="105:60"><expr pos:start="105:13" pos:end="105:59"><call pos:start="105:13" pos:end="105:59"><name pos:start="105:13" pos:end="105:21">tcg_out32</name> <argument_list pos:start="105:23" pos:end="105:59">(<argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><name pos:start="105:24" pos:end="105:24">s</name></expr></argument>, <argument pos:start="105:27" pos:end="105:58"><expr pos:start="105:27" pos:end="105:58"><name pos:start="105:27" pos:end="105:30">STHX</name> <operator pos:start="105:32" pos:end="105:32">|</operator> <call pos:start="105:34" pos:end="105:58"><name pos:start="105:34" pos:end="105:36">SAB</name> <argument_list pos:start="105:38" pos:end="105:58">(<argument pos:start="105:39" pos:end="105:46"><expr pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:46">data_reg</name></expr></argument>, <argument pos:start="105:49" pos:end="105:53"><expr pos:start="105:49" pos:end="105:53"><name pos:start="105:49" pos:end="105:53">rbase</name></expr></argument>, <argument pos:start="105:56" pos:end="105:57"><expr pos:start="105:56" pos:end="105:57"><name pos:start="105:56" pos:end="105:57">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>

    <case pos:start="109:5" pos:end="109:11">case <expr pos:start="109:10" pos:end="109:10"><literal type="number" pos:start="109:10" pos:end="109:10">2</literal></expr>:</case>

        <if_stmt pos:start="111:9" pos:end="117:60"><if pos:start="111:9" pos:end="113:62">if <condition pos:start="111:12" pos:end="111:18">(<expr pos:start="111:13" pos:end="111:17"><name pos:start="111:13" pos:end="111:17">bswap</name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:62"><block_content pos:start="113:13" pos:end="113:62">

            <expr_stmt pos:start="113:13" pos:end="113:62"><expr pos:start="113:13" pos:end="113:61"><call pos:start="113:13" pos:end="113:61"><name pos:start="113:13" pos:end="113:21">tcg_out32</name> <argument_list pos:start="113:23" pos:end="113:61">(<argument pos:start="113:24" pos:end="113:24"><expr pos:start="113:24" pos:end="113:24"><name pos:start="113:24" pos:end="113:24">s</name></expr></argument>, <argument pos:start="113:27" pos:end="113:60"><expr pos:start="113:27" pos:end="113:60"><name pos:start="113:27" pos:end="113:32">STWBRX</name> <operator pos:start="113:34" pos:end="113:34">|</operator> <call pos:start="113:36" pos:end="113:60"><name pos:start="113:36" pos:end="113:38">SAB</name> <argument_list pos:start="113:40" pos:end="113:60">(<argument pos:start="113:41" pos:end="113:48"><expr pos:start="113:41" pos:end="113:48"><name pos:start="113:41" pos:end="113:48">data_reg</name></expr></argument>, <argument pos:start="113:51" pos:end="113:55"><expr pos:start="113:51" pos:end="113:55"><name pos:start="113:51" pos:end="113:55">rbase</name></expr></argument>, <argument pos:start="113:58" pos:end="113:59"><expr pos:start="113:58" pos:end="113:59"><name pos:start="113:58" pos:end="113:59">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="115:9" pos:end="117:60">else<block type="pseudo" pos:start="117:13" pos:end="117:60"><block_content pos:start="117:13" pos:end="117:60">

            <expr_stmt pos:start="117:13" pos:end="117:60"><expr pos:start="117:13" pos:end="117:59"><call pos:start="117:13" pos:end="117:59"><name pos:start="117:13" pos:end="117:21">tcg_out32</name> <argument_list pos:start="117:23" pos:end="117:59">(<argument pos:start="117:24" pos:end="117:24"><expr pos:start="117:24" pos:end="117:24"><name pos:start="117:24" pos:end="117:24">s</name></expr></argument>, <argument pos:start="117:27" pos:end="117:58"><expr pos:start="117:27" pos:end="117:58"><name pos:start="117:27" pos:end="117:30">STWX</name> <operator pos:start="117:32" pos:end="117:32">|</operator> <call pos:start="117:34" pos:end="117:58"><name pos:start="117:34" pos:end="117:36">SAB</name> <argument_list pos:start="117:38" pos:end="117:58">(<argument pos:start="117:39" pos:end="117:46"><expr pos:start="117:39" pos:end="117:46"><name pos:start="117:39" pos:end="117:46">data_reg</name></expr></argument>, <argument pos:start="117:49" pos:end="117:53"><expr pos:start="117:49" pos:end="117:53"><name pos:start="117:49" pos:end="117:53">rbase</name></expr></argument>, <argument pos:start="117:56" pos:end="117:57"><expr pos:start="117:56" pos:end="117:57"><name pos:start="117:56" pos:end="117:57">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:11">case <expr pos:start="121:10" pos:end="121:10"><literal type="number" pos:start="121:10" pos:end="121:10">3</literal></expr>:</case>

        <if_stmt pos:start="123:9" pos:end="151:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:18">(<expr pos:start="123:13" pos:end="123:17"><name pos:start="123:13" pos:end="123:17">bswap</name></expr>)</condition> <block pos:start="123:20" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:63">

            <expr_stmt pos:start="125:13" pos:end="125:56"><expr pos:start="125:13" pos:end="125:55"><call pos:start="125:13" pos:end="125:55"><name pos:start="125:13" pos:end="125:21">tcg_out32</name> <argument_list pos:start="125:23" pos:end="125:55">(<argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><name pos:start="125:24" pos:end="125:24">s</name></expr></argument>, <argument pos:start="125:27" pos:end="125:54"><expr pos:start="125:27" pos:end="125:54"><name pos:start="125:27" pos:end="125:30">ADDI</name> <operator pos:start="125:32" pos:end="125:32">|</operator> <call pos:start="125:34" pos:end="125:40"><name pos:start="125:34" pos:end="125:35">RT</name> <argument_list pos:start="125:37" pos:end="125:40">(<argument pos:start="125:38" pos:end="125:39"><expr pos:start="125:38" pos:end="125:39"><name pos:start="125:38" pos:end="125:39">r1</name></expr></argument>)</argument_list></call> <operator pos:start="125:42" pos:end="125:42">|</operator> <call pos:start="125:44" pos:end="125:50"><name pos:start="125:44" pos:end="125:45">RA</name> <argument_list pos:start="125:47" pos:end="125:50">(<argument pos:start="125:48" pos:end="125:49"><expr pos:start="125:48" pos:end="125:49"><name pos:start="125:48" pos:end="125:49">r0</name></expr></argument>)</argument_list></call> <operator pos:start="125:52" pos:end="125:52">|</operator> <literal type="number" pos:start="125:54" pos:end="125:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:63"><expr pos:start="127:13" pos:end="127:62"><call pos:start="127:13" pos:end="127:62"><name pos:start="127:13" pos:end="127:21">tcg_out32</name> <argument_list pos:start="127:23" pos:end="127:62">(<argument pos:start="127:24" pos:end="127:24"><expr pos:start="127:24" pos:end="127:24"><name pos:start="127:24" pos:end="127:24">s</name></expr></argument>, <argument pos:start="127:27" pos:end="127:61"><expr pos:start="127:27" pos:end="127:61"><name pos:start="127:27" pos:end="127:32">STWBRX</name> <operator pos:start="127:34" pos:end="127:34">|</operator> <call pos:start="127:36" pos:end="127:61"><name pos:start="127:36" pos:end="127:38">SAB</name> <argument_list pos:start="127:40" pos:end="127:61">(<argument pos:start="127:41" pos:end="127:48"><expr pos:start="127:41" pos:end="127:48"><name pos:start="127:41" pos:end="127:48">data_reg</name></expr></argument>,  <argument pos:start="127:52" pos:end="127:56"><expr pos:start="127:52" pos:end="127:56"><name pos:start="127:52" pos:end="127:56">rbase</name></expr></argument>, <argument pos:start="127:59" pos:end="127:60"><expr pos:start="127:59" pos:end="127:60"><name pos:start="127:59" pos:end="127:60">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:63"><expr pos:start="129:13" pos:end="129:62"><call pos:start="129:13" pos:end="129:62"><name pos:start="129:13" pos:end="129:21">tcg_out32</name> <argument_list pos:start="129:23" pos:end="129:62">(<argument pos:start="129:24" pos:end="129:24"><expr pos:start="129:24" pos:end="129:24"><name pos:start="129:24" pos:end="129:24">s</name></expr></argument>, <argument pos:start="129:27" pos:end="129:61"><expr pos:start="129:27" pos:end="129:61"><name pos:start="129:27" pos:end="129:32">STWBRX</name> <operator pos:start="129:34" pos:end="129:34">|</operator> <call pos:start="129:36" pos:end="129:61"><name pos:start="129:36" pos:end="129:38">SAB</name> <argument_list pos:start="129:40" pos:end="129:61">(<argument pos:start="129:41" pos:end="129:49"><expr pos:start="129:41" pos:end="129:49"><name pos:start="129:41" pos:end="129:49">data_reg2</name></expr></argument>, <argument pos:start="129:52" pos:end="129:56"><expr pos:start="129:52" pos:end="129:56"><name pos:start="129:52" pos:end="129:56">rbase</name></expr></argument>, <argument pos:start="129:59" pos:end="129:60"><expr pos:start="129:59" pos:end="129:60"><name pos:start="129:59" pos:end="129:60">r1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="133:9" pos:end="151:9">else <block pos:start="133:14" pos:end="151:9">{<block_content pos:start="137:13" pos:end="150:0">

<cpp:ifdef pos:start="135:1" pos:end="135:28">#<cpp:directive pos:start="135:2" pos:end="135:6">ifdef</cpp:directive> <name pos:start="135:8" pos:end="135:28">CONFIG_USE_GUEST_BASE</name></cpp:ifdef>

            <expr_stmt pos:start="137:13" pos:end="137:61"><expr pos:start="137:13" pos:end="137:60"><call pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:21">tcg_out32</name> <argument_list pos:start="137:23" pos:end="137:60">(<argument pos:start="137:24" pos:end="137:24"><expr pos:start="137:24" pos:end="137:24"><name pos:start="137:24" pos:end="137:24">s</name></expr></argument>, <argument pos:start="137:27" pos:end="137:59"><expr pos:start="137:27" pos:end="137:59"><name pos:start="137:27" pos:end="137:30">STWX</name> <operator pos:start="137:32" pos:end="137:32">|</operator> <call pos:start="137:34" pos:end="137:59"><name pos:start="137:34" pos:end="137:36">SAB</name> <argument_list pos:start="137:38" pos:end="137:59">(<argument pos:start="137:39" pos:end="137:47"><expr pos:start="137:39" pos:end="137:47"><name pos:start="137:39" pos:end="137:47">data_reg2</name></expr></argument>, <argument pos:start="137:50" pos:end="137:54"><expr pos:start="137:50" pos:end="137:54"><name pos:start="137:50" pos:end="137:54">rbase</name></expr></argument>, <argument pos:start="137:57" pos:end="137:58"><expr pos:start="137:57" pos:end="137:58"><name pos:start="137:57" pos:end="137:58">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:56"><expr pos:start="139:13" pos:end="139:55"><call pos:start="139:13" pos:end="139:55"><name pos:start="139:13" pos:end="139:21">tcg_out32</name> <argument_list pos:start="139:23" pos:end="139:55">(<argument pos:start="139:24" pos:end="139:24"><expr pos:start="139:24" pos:end="139:24"><name pos:start="139:24" pos:end="139:24">s</name></expr></argument>, <argument pos:start="139:27" pos:end="139:54"><expr pos:start="139:27" pos:end="139:54"><name pos:start="139:27" pos:end="139:30">ADDI</name> <operator pos:start="139:32" pos:end="139:32">|</operator> <call pos:start="139:34" pos:end="139:40"><name pos:start="139:34" pos:end="139:35">RT</name> <argument_list pos:start="139:37" pos:end="139:40">(<argument pos:start="139:38" pos:end="139:39"><expr pos:start="139:38" pos:end="139:39"><name pos:start="139:38" pos:end="139:39">r1</name></expr></argument>)</argument_list></call> <operator pos:start="139:42" pos:end="139:42">|</operator> <call pos:start="139:44" pos:end="139:50"><name pos:start="139:44" pos:end="139:45">RA</name> <argument_list pos:start="139:47" pos:end="139:50">(<argument pos:start="139:48" pos:end="139:49"><expr pos:start="139:48" pos:end="139:49"><name pos:start="139:48" pos:end="139:49">r0</name></expr></argument>)</argument_list></call> <operator pos:start="139:52" pos:end="139:52">|</operator> <literal type="number" pos:start="139:54" pos:end="139:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="144:0"><expr pos:start="141:13" pos:end="141:60"><call pos:start="141:13" pos:end="141:60"><name pos:start="141:13" pos:end="141:21">tcg_out32</name> <argument_list pos:start="141:23" pos:end="141:60">(<argument pos:start="141:24" pos:end="141:24"><expr pos:start="141:24" pos:end="141:24"><name pos:start="141:24" pos:end="141:24">s</name></expr></argument>, <argument pos:start="141:27" pos:end="141:59"><expr pos:start="141:27" pos:end="141:59"><name pos:start="141:27" pos:end="141:30">STWX</name> <operator pos:start="141:32" pos:end="141:32">|</operator> <call pos:start="141:34" pos:end="141:59"><name pos:start="141:34" pos:end="141:36">SAB</name> <argument_list pos:start="141:38" pos:end="141:59">(<argument pos:start="141:39" pos:end="141:46"><expr pos:start="141:39" pos:end="141:46"><name pos:start="141:39" pos:end="141:46">data_reg</name></expr></argument>,  <argument pos:start="141:50" pos:end="141:54"><expr pos:start="141:50" pos:end="141:54"><name pos:start="141:50" pos:end="141:54">rbase</name></expr></argument>, <argument pos:start="141:57" pos:end="141:58"><expr pos:start="141:57" pos:end="141:58"><name pos:start="141:57" pos:end="141:58">r1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="143:1" pos:end="143:5">#<cpp:directive pos:start="143:2" pos:end="143:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="145:13" pos:end="145:58"><expr pos:start="145:13" pos:end="145:57"><call pos:start="145:13" pos:end="145:57"><name pos:start="145:13" pos:end="145:21">tcg_out32</name> <argument_list pos:start="145:23" pos:end="145:57">(<argument pos:start="145:24" pos:end="145:24"><expr pos:start="145:24" pos:end="145:24"><name pos:start="145:24" pos:end="145:24">s</name></expr></argument>, <argument pos:start="145:27" pos:end="145:56"><expr pos:start="145:27" pos:end="145:56"><name pos:start="145:27" pos:end="145:29">STW</name> <operator pos:start="145:31" pos:end="145:31">|</operator> <call pos:start="145:33" pos:end="145:46"><name pos:start="145:33" pos:end="145:34">RS</name> <argument_list pos:start="145:36" pos:end="145:46">(<argument pos:start="145:37" pos:end="145:45"><expr pos:start="145:37" pos:end="145:45"><name pos:start="145:37" pos:end="145:45">data_reg2</name></expr></argument>)</argument_list></call> <operator pos:start="145:48" pos:end="145:48">|</operator> <call pos:start="145:50" pos:end="145:56"><name pos:start="145:50" pos:end="145:51">RA</name> <argument_list pos:start="145:53" pos:end="145:56">(<argument pos:start="145:54" pos:end="145:55"><expr pos:start="145:54" pos:end="145:55"><name pos:start="145:54" pos:end="145:55">r0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="150:0"><expr pos:start="147:13" pos:end="147:60"><call pos:start="147:13" pos:end="147:60"><name pos:start="147:13" pos:end="147:21">tcg_out32</name> <argument_list pos:start="147:23" pos:end="147:60">(<argument pos:start="147:24" pos:end="147:24"><expr pos:start="147:24" pos:end="147:24"><name pos:start="147:24" pos:end="147:24">s</name></expr></argument>, <argument pos:start="147:27" pos:end="147:59"><expr pos:start="147:27" pos:end="147:59"><name pos:start="147:27" pos:end="147:29">STW</name> <operator pos:start="147:31" pos:end="147:31">|</operator> <call pos:start="147:33" pos:end="147:45"><name pos:start="147:33" pos:end="147:34">RS</name> <argument_list pos:start="147:36" pos:end="147:45">(<argument pos:start="147:37" pos:end="147:44"><expr pos:start="147:37" pos:end="147:44"><name pos:start="147:37" pos:end="147:44">data_reg</name></expr></argument>)</argument_list></call> <operator pos:start="147:47" pos:end="147:47">|</operator> <call pos:start="147:49" pos:end="147:55"><name pos:start="147:49" pos:end="147:50">RA</name> <argument_list pos:start="147:52" pos:end="147:55">(<argument pos:start="147:53" pos:end="147:54"><expr pos:start="147:53" pos:end="147:54"><name pos:start="147:53" pos:end="147:54">r0</name></expr></argument>)</argument_list></call> <operator pos:start="147:57" pos:end="147:57">|</operator> <literal type="number" pos:start="147:59" pos:end="147:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    </block_content>}</block></switch>



<cpp:ifdef pos:start="159:1" pos:end="159:21">#<cpp:directive pos:start="159:2" pos:end="159:6">ifdef</cpp:directive> <name pos:start="159:8" pos:end="159:21">CONFIG_SOFTMMU</name></cpp:ifdef>

    <expr_stmt pos:start="161:5" pos:end="182:0"><expr pos:start="161:5" pos:end="179:35"><call pos:start="161:5" pos:end="179:35"><name pos:start="161:5" pos:end="161:23">add_qemu_ldst_label</name> <argument_list pos:start="161:25" pos:end="179:35">(<argument pos:start="161:26" pos:end="161:26"><expr pos:start="161:26" pos:end="161:26"><name pos:start="161:26" pos:end="161:26">s</name></expr></argument>,

                         <argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr></argument>,

                         <argument pos:start="165:26" pos:end="165:28"><expr pos:start="165:26" pos:end="165:28"><name pos:start="165:26" pos:end="165:28">opc</name></expr></argument>,

                         <argument pos:start="167:26" pos:end="167:33"><expr pos:start="167:26" pos:end="167:33"><name pos:start="167:26" pos:end="167:33">data_reg</name></expr></argument>,

                         <argument pos:start="169:26" pos:end="169:34"><expr pos:start="169:26" pos:end="169:34"><name pos:start="169:26" pos:end="169:34">data_reg2</name></expr></argument>,

                         <argument pos:start="171:26" pos:end="171:33"><expr pos:start="171:26" pos:end="171:33"><name pos:start="171:26" pos:end="171:33">addr_reg</name></expr></argument>,

                         <argument pos:start="173:26" pos:end="173:34"><expr pos:start="173:26" pos:end="173:34"><name pos:start="173:26" pos:end="173:34">addr_reg2</name></expr></argument>,

                         <argument pos:start="175:26" pos:end="175:34"><expr pos:start="175:26" pos:end="175:34"><name pos:start="175:26" pos:end="175:34">mem_index</name></expr></argument>,

                         <argument pos:start="177:26" pos:end="177:36"><expr pos:start="177:26" pos:end="177:36"><name pos:start="177:26" pos:end="177:36"><name pos:start="177:26" pos:end="177:26">s</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:36">code_ptr</name></name></expr></argument>,

                         <argument pos:start="179:26" pos:end="179:34"><expr pos:start="179:26" pos:end="179:34"><name pos:start="179:26" pos:end="179:34">label_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="181:1" pos:end="181:6">#<cpp:directive pos:start="181:2" pos:end="181:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
