<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8350.c" pos:tabs="8"><function pos:start="1:1" pos:end="108:14"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">nbd_receive_negotiate</name><parameter_list pos:start="1:26" pos:end="4:39">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">QIOChannel</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ioc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">name</name></decl></parameter>,
                          <parameter pos:start="2:27" pos:end="2:51"><decl pos:start="2:27" pos:end="2:51"><type pos:start="2:27" pos:end="2:51"><name pos:start="2:27" pos:end="2:41">QCryptoTLSCreds</name> <modifier pos:start="2:43" pos:end="2:43">*</modifier></type><name pos:start="2:44" pos:end="2:51">tlscreds</name></decl></parameter>, <parameter pos:start="2:54" pos:end="2:73"><decl pos:start="2:54" pos:end="2:73"><type pos:start="2:54" pos:end="2:73"><specifier pos:start="2:54" pos:end="2:58">const</specifier> <name pos:start="2:60" pos:end="2:63">char</name> <modifier pos:start="2:65" pos:end="2:65">*</modifier></type><name pos:start="2:66" pos:end="2:73">hostname</name></decl></parameter>,
                          <parameter pos:start="3:27" pos:end="3:45"><decl pos:start="3:27" pos:end="3:45"><type pos:start="3:27" pos:end="3:45"><name pos:start="3:27" pos:end="3:36">QIOChannel</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier><modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:45">outioc</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:66"><decl pos:start="3:48" pos:end="3:66"><type pos:start="3:48" pos:end="3:66"><name pos:start="3:48" pos:end="3:60">NBDExportInfo</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:66">info</name></decl></parameter>,
                          <parameter pos:start="4:27" pos:end="4:38"><decl pos:start="4:27" pos:end="4:38"><type pos:start="4:27" pos:end="4:38"><name pos:start="4:27" pos:end="4:31">Error</name> <modifier pos:start="4:33" pos:end="4:33">*</modifier><modifier pos:start="4:34" pos:end="4:34">*</modifier></type><name pos:start="4:35" pos:end="4:38">errp</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="108:14">{<block_content pos:start="6:5" pos:end="108:14">
    <decl_stmt pos:start="6:5" pos:end="6:18"><decl pos:start="6:5" pos:end="6:17"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">char</name></type> <name pos:start="6:10" pos:end="6:17"><name pos:start="6:10" pos:end="6:12">buf</name><index pos:start="6:13" pos:end="6:17">[<expr pos:start="6:14" pos:end="6:16"><literal type="number" pos:start="6:14" pos:end="6:16">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:11"><decl pos:start="8:5" pos:end="8:10"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:10">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:15">zeroes</name> <init pos:start="9:17" pos:end="9:22">= <expr pos:start="9:19" pos:end="9:22"><name pos:start="9:19" pos:end="9:22">true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:51"><decl pos:start="10:5" pos:end="10:50"><type pos:start="10:5" pos:end="10:8"><name pos:start="10:5" pos:end="10:8">bool</name></type> <name pos:start="10:10" pos:end="10:25">structured_reply</name> <init pos:start="10:27" pos:end="10:50">= <expr pos:start="10:29" pos:end="10:50"><name pos:start="10:29" pos:end="10:50"><name pos:start="10:29" pos:end="10:32">info</name><operator pos:start="10:33" pos:end="10:34">-&gt;</operator><name pos:start="10:35" pos:end="10:50">structured_reply</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:74"><expr pos:start="11:5" pos:end="11:73"><call pos:start="11:5" pos:end="11:73"><name pos:start="11:5" pos:end="11:31">trace_nbd_receive_negotiate</name><argument_list pos:start="11:32" pos:end="11:73">(<argument pos:start="11:33" pos:end="11:40"><expr pos:start="11:33" pos:end="11:40"><name pos:start="11:33" pos:end="11:40">tlscreds</name></expr></argument>, <argument pos:start="11:43" pos:end="11:72"><expr pos:start="11:43" pos:end="11:72"><ternary pos:start="11:43" pos:end="11:72"><condition pos:start="11:43" pos:end="11:52"><expr pos:start="11:43" pos:end="11:50"><name pos:start="11:43" pos:end="11:50">hostname</name></expr> ?</condition><then pos:start="11:54" pos:end="11:61"> <expr pos:start="11:54" pos:end="11:61"><name pos:start="11:54" pos:end="11:61">hostname</name></expr> </then><else pos:start="11:63" pos:end="11:72">: <expr pos:start="11:65" pos:end="11:72"><literal type="string" pos:start="11:65" pos:end="11:72">"&lt;null&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:35"><expr pos:start="12:5" pos:end="12:34"><name pos:start="12:5" pos:end="12:26"><name pos:start="12:5" pos:end="12:8">info</name><operator pos:start="12:9" pos:end="12:10">-&gt;</operator><name pos:start="12:11" pos:end="12:26">structured_reply</name></name> <operator pos:start="12:28" pos:end="12:28">=</operator> <name pos:start="12:30" pos:end="12:34">false</name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:17"><expr pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:6">rc</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <operator pos:start="13:10" pos:end="13:10">-</operator><name pos:start="13:11" pos:end="13:16">EINVAL</name></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="108:14"><if pos:start="14:5" pos:end="108:14">if <condition pos:start="14:8" pos:end="14:15">(<expr pos:start="14:9" pos:end="14:14"><name pos:start="14:9" pos:end="14:14">outioc</name></expr>)</condition> <block pos:start="14:17" pos:end="108:14">{<block_content pos:start="15:9" pos:end="108:14">
        <expr_stmt pos:start="15:9" pos:end="15:23"><expr pos:start="15:9" pos:end="15:22"><operator pos:start="15:9" pos:end="15:9">*</operator><name pos:start="15:10" pos:end="15:15">outioc</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:22">NULL</name></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="108:14"><if pos:start="16:5" pos:end="108:14">if <condition pos:start="16:8" pos:end="16:28">(<expr pos:start="16:9" pos:end="16:27"><name pos:start="16:9" pos:end="16:16">tlscreds</name> <operator pos:start="16:18" pos:end="16:19">&amp;&amp;</operator> <operator pos:start="16:21" pos:end="16:21">!</operator><name pos:start="16:22" pos:end="16:27">outioc</name></expr>)</condition> <block pos:start="16:30" pos:end="108:14">{<block_content pos:start="17:9" pos:end="108:14">
        <expr_stmt pos:start="17:9" pos:end="17:64"><expr pos:start="17:9" pos:end="17:63"><call pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="17:63">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:62"><expr pos:start="17:26" pos:end="17:62"><literal type="string" pos:start="17:26" pos:end="17:62">"Output I/O channel required for TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="108:14"><if pos:start="18:5" pos:end="108:14">if <condition pos:start="18:8" pos:end="18:40">(<expr pos:start="18:9" pos:end="18:39"><call pos:start="18:9" pos:end="18:35"><name pos:start="18:9" pos:end="18:16">nbd_read</name><argument_list pos:start="18:17" pos:end="18:35">(<argument pos:start="18:18" pos:end="18:20"><expr pos:start="18:18" pos:end="18:20"><name pos:start="18:18" pos:end="18:20">ioc</name></expr></argument>, <argument pos:start="18:23" pos:end="18:25"><expr pos:start="18:23" pos:end="18:25"><name pos:start="18:23" pos:end="18:25">buf</name></expr></argument>, <argument pos:start="18:28" pos:end="18:28"><expr pos:start="18:28" pos:end="18:28"><literal type="number" pos:start="18:28" pos:end="18:28">8</literal></expr></argument>, <argument pos:start="18:31" pos:end="18:34"><expr pos:start="18:31" pos:end="18:34"><name pos:start="18:31" pos:end="18:34">errp</name></expr></argument>)</argument_list></call> <operator pos:start="18:37" pos:end="18:37">&lt;</operator> <literal type="number" pos:start="18:39" pos:end="18:39">0</literal></expr>)</condition> <block pos:start="18:42" pos:end="108:14">{<block_content pos:start="19:9" pos:end="108:14">
        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><call pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:21">error_prepend</name><argument_list pos:start="19:22" pos:end="19:50">(<argument pos:start="19:23" pos:end="19:26"><expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">errp</name></expr></argument>, <argument pos:start="19:29" pos:end="19:49"><expr pos:start="19:29" pos:end="19:49"><literal type="string" pos:start="19:29" pos:end="19:49">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:18"><expr pos:start="20:5" pos:end="20:17"><name pos:start="20:5" pos:end="20:10"><name pos:start="20:5" pos:end="20:7">buf</name><index pos:start="20:8" pos:end="20:10">[<expr pos:start="20:9" pos:end="20:9"><literal type="number" pos:start="20:9" pos:end="20:9">8</literal></expr>]</index></name> <operator pos:start="20:12" pos:end="20:12">=</operator> <literal type="char" pos:start="20:14" pos:end="20:17">'\0'</literal></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="108:14"><if pos:start="21:5" pos:end="108:14">if <condition pos:start="21:8" pos:end="21:25">(<expr pos:start="21:9" pos:end="21:24"><call pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:14">strlen</name><argument_list pos:start="21:15" pos:end="21:19">(<argument pos:start="21:16" pos:end="21:18"><expr pos:start="21:16" pos:end="21:18"><name pos:start="21:16" pos:end="21:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="21:21" pos:end="21:22">==</operator> <literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr>)</condition> <block pos:start="21:27" pos:end="108:14">{<block_content pos:start="22:9" pos:end="108:14">
        <expr_stmt pos:start="22:9" pos:end="22:66"><expr pos:start="22:9" pos:end="22:65"><call pos:start="22:9" pos:end="22:65"><name pos:start="22:9" pos:end="22:18">error_setg</name><argument_list pos:start="22:19" pos:end="22:65">(<argument pos:start="22:20" pos:end="22:23"><expr pos:start="22:20" pos:end="22:23"><name pos:start="22:20" pos:end="22:23">errp</name></expr></argument>, <argument pos:start="22:26" pos:end="22:64"><expr pos:start="22:26" pos:end="22:64"><literal type="string" pos:start="22:26" pos:end="22:64">"Server connection closed unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:9">magic</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:20">ldq_be_p</name><argument_list pos:start="23:21" pos:end="23:25">(<argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><name pos:start="23:22" pos:end="23:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:45"><expr pos:start="24:5" pos:end="24:44"><call pos:start="24:5" pos:end="24:44"><name pos:start="24:5" pos:end="24:37">trace_nbd_receive_negotiate_magic</name><argument_list pos:start="24:38" pos:end="24:44">(<argument pos:start="24:39" pos:end="24:43"><expr pos:start="24:39" pos:end="24:43"><name pos:start="24:39" pos:end="24:43">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="25:5" pos:end="108:14"><if pos:start="25:5" pos:end="108:14">if <condition pos:start="25:8" pos:end="25:40">(<expr pos:start="25:9" pos:end="25:39"><call pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:14">memcmp</name><argument_list pos:start="25:15" pos:end="25:34">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">buf</name></expr></argument>, <argument pos:start="25:21" pos:end="25:30"><expr pos:start="25:21" pos:end="25:30"><literal type="string" pos:start="25:21" pos:end="25:30">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="25:33" pos:end="25:33"><expr pos:start="25:33" pos:end="25:33"><literal type="number" pos:start="25:33" pos:end="25:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="25:36" pos:end="25:37">!=</operator> <literal type="number" pos:start="25:39" pos:end="25:39">0</literal></expr>)</condition> <block pos:start="25:42" pos:end="108:14">{<block_content pos:start="26:9" pos:end="108:14">
        <expr_stmt pos:start="26:9" pos:end="26:51"><expr pos:start="26:9" pos:end="26:50"><call pos:start="26:9" pos:end="26:50"><name pos:start="26:9" pos:end="26:18">error_setg</name><argument_list pos:start="26:19" pos:end="26:50">(<argument pos:start="26:20" pos:end="26:23"><expr pos:start="26:20" pos:end="26:23"><name pos:start="26:20" pos:end="26:23">errp</name></expr></argument>, <argument pos:start="26:26" pos:end="26:49"><expr pos:start="26:26" pos:end="26:49"><literal type="string" pos:start="26:26" pos:end="26:49">"Invalid magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="108:14"><if pos:start="27:5" pos:end="108:14">if <condition pos:start="27:8" pos:end="27:55">(<expr pos:start="27:9" pos:end="27:54"><call pos:start="27:9" pos:end="27:50"><name pos:start="27:9" pos:end="27:16">nbd_read</name><argument_list pos:start="27:17" pos:end="27:50">(<argument pos:start="27:18" pos:end="27:20"><expr pos:start="27:18" pos:end="27:20"><name pos:start="27:18" pos:end="27:20">ioc</name></expr></argument>, <argument pos:start="27:23" pos:end="27:28"><expr pos:start="27:23" pos:end="27:28"><operator pos:start="27:23" pos:end="27:23">&amp;</operator><name pos:start="27:24" pos:end="27:28">magic</name></expr></argument>, <argument pos:start="27:31" pos:end="27:43"><expr pos:start="27:31" pos:end="27:43"><sizeof pos:start="27:31" pos:end="27:43">sizeof<argument_list pos:start="27:37" pos:end="27:43">(<argument pos:start="27:38" pos:end="27:42"><expr pos:start="27:38" pos:end="27:42"><name pos:start="27:38" pos:end="27:42">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:46" pos:end="27:49"><expr pos:start="27:46" pos:end="27:49"><name pos:start="27:46" pos:end="27:49">errp</name></expr></argument>)</argument_list></call> <operator pos:start="27:52" pos:end="27:52">&lt;</operator> <literal type="number" pos:start="27:54" pos:end="27:54">0</literal></expr>)</condition> <block pos:start="27:57" pos:end="108:14">{<block_content pos:start="28:9" pos:end="108:14">
        <expr_stmt pos:start="28:9" pos:end="28:52"><expr pos:start="28:9" pos:end="28:51"><call pos:start="28:9" pos:end="28:51"><name pos:start="28:9" pos:end="28:21">error_prepend</name><argument_list pos:start="28:22" pos:end="28:51">(<argument pos:start="28:23" pos:end="28:26"><expr pos:start="28:23" pos:end="28:26"><name pos:start="28:23" pos:end="28:26">errp</name></expr></argument>, <argument pos:start="28:29" pos:end="28:50"><expr pos:start="28:29" pos:end="28:50"><literal type="string" pos:start="28:29" pos:end="28:50">"Failed to read magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:9">magic</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:23">be64_to_cpu</name><argument_list pos:start="29:24" pos:end="29:30">(<argument pos:start="29:25" pos:end="29:29"><expr pos:start="29:25" pos:end="29:29"><name pos:start="29:25" pos:end="29:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:45"><expr pos:start="30:5" pos:end="30:44"><call pos:start="30:5" pos:end="30:44"><name pos:start="30:5" pos:end="30:37">trace_nbd_receive_negotiate_magic</name><argument_list pos:start="30:38" pos:end="30:44">(<argument pos:start="30:39" pos:end="30:43"><expr pos:start="30:39" pos:end="30:43"><name pos:start="30:39" pos:end="30:43">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="31:5" pos:end="108:14"><if pos:start="31:5" pos:end="108:14">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:13">magic</name> <operator pos:start="31:15" pos:end="31:16">==</operator> <name pos:start="31:18" pos:end="31:31">NBD_OPTS_MAGIC</name></expr>)</condition> <block pos:start="31:34" pos:end="108:14">{<block_content pos:start="32:9" pos:end="108:14">
        <decl_stmt pos:start="32:9" pos:end="32:33"><decl pos:start="32:9" pos:end="32:32"><type pos:start="32:9" pos:end="32:16"><name pos:start="32:9" pos:end="32:16">uint32_t</name></type> <name pos:start="32:18" pos:end="32:28">clientflags</name> <init pos:start="32:30" pos:end="32:32">= <expr pos:start="32:32" pos:end="32:32"><literal type="number" pos:start="32:32" pos:end="32:32">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="33:9" pos:end="33:29"><decl pos:start="33:9" pos:end="33:28"><type pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">uint16_t</name></type> <name pos:start="33:18" pos:end="33:28">globalflags</name></decl>;</decl_stmt>
        <decl_stmt pos:start="34:9" pos:end="34:35"><decl pos:start="34:9" pos:end="34:34"><type pos:start="34:9" pos:end="34:12"><name pos:start="34:9" pos:end="34:12">bool</name></type> <name pos:start="34:14" pos:end="34:26">fixedNewStyle</name> <init pos:start="34:28" pos:end="34:34">= <expr pos:start="34:30" pos:end="34:34"><name pos:start="34:30" pos:end="34:34">false</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="35:9" pos:end="108:14"><if pos:start="35:9" pos:end="108:14">if <condition pos:start="35:12" pos:end="35:71">(<expr pos:start="35:13" pos:end="35:70"><call pos:start="35:13" pos:end="35:66"><name pos:start="35:13" pos:end="35:20">nbd_read</name><argument_list pos:start="35:21" pos:end="35:66">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">ioc</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:38">globalflags</name></expr></argument>, <argument pos:start="35:41" pos:end="35:59"><expr pos:start="35:41" pos:end="35:59"><sizeof pos:start="35:41" pos:end="35:59">sizeof<argument_list pos:start="35:47" pos:end="35:59">(<argument pos:start="35:48" pos:end="35:58"><expr pos:start="35:48" pos:end="35:58"><name pos:start="35:48" pos:end="35:58">globalflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:62" pos:end="35:65"><expr pos:start="35:62" pos:end="35:65"><name pos:start="35:62" pos:end="35:65">errp</name></expr></argument>)</argument_list></call> <operator pos:start="35:68" pos:end="35:68">&lt;</operator> <literal type="number" pos:start="35:70" pos:end="35:70">0</literal></expr>)</condition> <block pos:start="35:73" pos:end="108:14">{<block_content pos:start="36:13" pos:end="108:14">
            <expr_stmt pos:start="36:13" pos:end="36:63"><expr pos:start="36:13" pos:end="36:62"><call pos:start="36:13" pos:end="36:62"><name pos:start="36:13" pos:end="36:25">error_prepend</name><argument_list pos:start="36:26" pos:end="36:62">(<argument pos:start="36:27" pos:end="36:30"><expr pos:start="36:27" pos:end="36:30"><name pos:start="36:27" pos:end="36:30">errp</name></expr></argument>, <argument pos:start="36:33" pos:end="36:61"><expr pos:start="36:33" pos:end="36:61"><literal type="string" pos:start="36:33" pos:end="36:61">"Failed to read server flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:19">globalflags</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:46"><name pos:start="37:23" pos:end="37:33">be16_to_cpu</name><argument_list pos:start="37:34" pos:end="37:46">(<argument pos:start="37:35" pos:end="37:45"><expr pos:start="37:35" pos:end="37:45"><name pos:start="37:35" pos:end="37:45">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:62"><expr pos:start="38:9" pos:end="38:61"><call pos:start="38:9" pos:end="38:61"><name pos:start="38:9" pos:end="38:48">trace_nbd_receive_negotiate_server_flags</name><argument_list pos:start="38:49" pos:end="38:61">(<argument pos:start="38:50" pos:end="38:60"><expr pos:start="38:50" pos:end="38:60"><name pos:start="38:50" pos:end="38:60">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="39:9" pos:end="108:14"><if pos:start="39:9" pos:end="108:14">if <condition pos:start="39:12" pos:end="39:50">(<expr pos:start="39:13" pos:end="39:49"><name pos:start="39:13" pos:end="39:23">globalflags</name> <operator pos:start="39:25" pos:end="39:25">&amp;</operator> <name pos:start="39:27" pos:end="39:49">NBD_FLAG_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="39:52" pos:end="108:14">{<block_content pos:start="40:13" pos:end="108:14">
            <expr_stmt pos:start="40:13" pos:end="40:33"><expr pos:start="40:13" pos:end="40:32"><name pos:start="40:13" pos:end="40:25">fixedNewStyle</name> <operator pos:start="40:27" pos:end="40:27">=</operator> <name pos:start="40:29" pos:end="40:32">true</name></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:53"><expr pos:start="41:13" pos:end="41:52"><name pos:start="41:13" pos:end="41:23">clientflags</name> <operator pos:start="41:25" pos:end="41:26">|=</operator> <name pos:start="41:28" pos:end="41:52">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>;</expr_stmt>
        <if_stmt pos:start="42:9" pos:end="108:14"><if pos:start="42:9" pos:end="108:14">if <condition pos:start="42:12" pos:end="42:45">(<expr pos:start="42:13" pos:end="42:44"><name pos:start="42:13" pos:end="42:23">globalflags</name> <operator pos:start="42:25" pos:end="42:25">&amp;</operator> <name pos:start="42:27" pos:end="42:44">NBD_FLAG_NO_ZEROES</name></expr>)</condition> <block pos:start="42:47" pos:end="108:14">{<block_content pos:start="43:13" pos:end="108:14">
            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:18">zeroes</name> <operator pos:start="43:20" pos:end="43:20">=</operator> <name pos:start="43:22" pos:end="43:26">false</name></expr>;</expr_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:48"><expr pos:start="44:13" pos:end="44:47"><name pos:start="44:13" pos:end="44:23">clientflags</name> <operator pos:start="44:25" pos:end="44:26">|=</operator> <name pos:start="44:28" pos:end="44:47">NBD_FLAG_C_NO_ZEROES</name></expr>;</expr_stmt>
        <comment type="block" pos:start="45:9" pos:end="45:36">/* client requested flags */</comment>
        <expr_stmt pos:start="46:9" pos:end="46:47"><expr pos:start="46:9" pos:end="46:46"><name pos:start="46:9" pos:end="46:19">clientflags</name> <operator pos:start="46:21" pos:end="46:21">=</operator> <call pos:start="46:23" pos:end="46:46"><name pos:start="46:23" pos:end="46:33">cpu_to_be32</name><argument_list pos:start="46:34" pos:end="46:46">(<argument pos:start="46:35" pos:end="46:45"><expr pos:start="46:35" pos:end="46:45"><name pos:start="46:35" pos:end="46:45">clientflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="47:9" pos:end="108:14"><if pos:start="47:9" pos:end="108:14">if <condition pos:start="47:12" pos:end="47:72">(<expr pos:start="47:13" pos:end="47:71"><call pos:start="47:13" pos:end="47:67"><name pos:start="47:13" pos:end="47:21">nbd_write</name><argument_list pos:start="47:22" pos:end="47:67">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">ioc</name></expr></argument>, <argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:39">clientflags</name></expr></argument>, <argument pos:start="47:42" pos:end="47:60"><expr pos:start="47:42" pos:end="47:60"><sizeof pos:start="47:42" pos:end="47:60">sizeof<argument_list pos:start="47:48" pos:end="47:60">(<argument pos:start="47:49" pos:end="47:59"><expr pos:start="47:49" pos:end="47:59"><name pos:start="47:49" pos:end="47:59">clientflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:63" pos:end="47:66"><expr pos:start="47:63" pos:end="47:66"><name pos:start="47:63" pos:end="47:66">errp</name></expr></argument>)</argument_list></call> <operator pos:start="47:69" pos:end="47:69">&lt;</operator> <literal type="number" pos:start="47:71" pos:end="47:71">0</literal></expr>)</condition> <block pos:start="47:74" pos:end="108:14">{<block_content pos:start="48:13" pos:end="108:14">
            <expr_stmt pos:start="48:13" pos:end="48:68"><expr pos:start="48:13" pos:end="48:67"><call pos:start="48:13" pos:end="48:67"><name pos:start="48:13" pos:end="48:25">error_prepend</name><argument_list pos:start="48:26" pos:end="48:67">(<argument pos:start="48:27" pos:end="48:30"><expr pos:start="48:27" pos:end="48:30"><name pos:start="48:27" pos:end="48:30">errp</name></expr></argument>, <argument pos:start="48:33" pos:end="48:66"><expr pos:start="48:33" pos:end="48:66"><literal type="string" pos:start="48:33" pos:end="48:66">"Failed to send clientflags field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="49:9" pos:end="108:14"><if pos:start="49:9" pos:end="108:14">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:20">tlscreds</name></expr>)</condition> <block pos:start="49:23" pos:end="108:14">{<block_content pos:start="50:13" pos:end="108:14">
            <if_stmt pos:start="50:13" pos:end="108:14"><if pos:start="50:13" pos:end="108:14">if <condition pos:start="50:16" pos:end="50:30">(<expr pos:start="50:17" pos:end="50:29"><name pos:start="50:17" pos:end="50:29">fixedNewStyle</name></expr>)</condition> <block pos:start="50:32" pos:end="108:14">{<block_content pos:start="51:17" pos:end="108:14">
                <expr_stmt pos:start="51:17" pos:end="51:78"><expr pos:start="51:17" pos:end="51:77"><operator pos:start="51:17" pos:end="51:17">*</operator><name pos:start="51:18" pos:end="51:23">outioc</name> <operator pos:start="51:25" pos:end="51:25">=</operator> <call pos:start="51:27" pos:end="51:77"><name pos:start="51:27" pos:end="51:46">nbd_receive_starttls</name><argument_list pos:start="51:47" pos:end="51:77">(<argument pos:start="51:48" pos:end="51:50"><expr pos:start="51:48" pos:end="51:50"><name pos:start="51:48" pos:end="51:50">ioc</name></expr></argument>, <argument pos:start="51:53" pos:end="51:60"><expr pos:start="51:53" pos:end="51:60"><name pos:start="51:53" pos:end="51:60">tlscreds</name></expr></argument>, <argument pos:start="51:63" pos:end="51:70"><expr pos:start="51:63" pos:end="51:70"><name pos:start="51:63" pos:end="51:70">hostname</name></expr></argument>, <argument pos:start="51:73" pos:end="51:76"><expr pos:start="51:73" pos:end="51:76"><name pos:start="51:73" pos:end="51:76">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="52:17" pos:end="108:14"><if pos:start="52:17" pos:end="54:13">if <condition pos:start="52:20" pos:end="52:29">(<expr pos:start="52:21" pos:end="52:28"><operator pos:start="52:21" pos:end="52:21">!</operator><operator pos:start="52:22" pos:end="52:22">*</operator><name pos:start="52:23" pos:end="52:28">outioc</name></expr>)</condition> <block pos:start="52:31" pos:end="54:13">{<block_content pos:start="53:17" pos:end="53:30">
                <expr_stmt pos:start="53:17" pos:end="53:30"><expr pos:start="53:17" pos:end="53:29"><name pos:start="53:17" pos:end="53:19">ioc</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <operator pos:start="53:23" pos:end="53:23">*</operator><name pos:start="53:24" pos:end="53:29">outioc</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="54:15" pos:end="108:14">else <block pos:start="54:20" pos:end="108:14">{<block_content pos:start="55:17" pos:end="108:14">
                <expr_stmt pos:start="55:17" pos:end="55:69"><expr pos:start="55:17" pos:end="55:68"><call pos:start="55:17" pos:end="55:68"><name pos:start="55:17" pos:end="55:26">error_setg</name><argument_list pos:start="55:27" pos:end="55:68">(<argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">errp</name></expr></argument>, <argument pos:start="55:34" pos:end="55:67"><expr pos:start="55:34" pos:end="55:67"><literal type="string" pos:start="55:34" pos:end="55:67">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="56:9" pos:end="108:14"><if pos:start="56:9" pos:end="108:14">if <condition pos:start="56:12" pos:end="56:18">(<expr pos:start="56:13" pos:end="56:17"><operator pos:start="56:13" pos:end="56:13">!</operator><name pos:start="56:14" pos:end="56:17">name</name></expr>)</condition> <block pos:start="56:20" pos:end="108:14">{<block_content pos:start="57:13" pos:end="108:14">
            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><call pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:52">trace_nbd_receive_negotiate_default_name</name><argument_list pos:start="57:53" pos:end="57:54">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="58:22"><expr pos:start="58:13" pos:end="58:21"><name pos:start="58:13" pos:end="58:16">name</name> <operator pos:start="58:18" pos:end="58:18">=</operator> <literal type="string" pos:start="58:20" pos:end="58:21">""</literal></expr>;</expr_stmt>
        <if_stmt pos:start="59:9" pos:end="108:14"><if pos:start="59:9" pos:end="108:14">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:25">fixedNewStyle</name></expr>)</condition> <block pos:start="59:28" pos:end="108:14">{<block_content pos:start="60:13" pos:end="108:14">
            <decl_stmt pos:start="60:13" pos:end="60:23"><decl pos:start="60:13" pos:end="60:22"><type pos:start="60:13" pos:end="60:15"><name pos:start="60:13" pos:end="60:15">int</name></type> <name pos:start="60:17" pos:end="60:22">result</name></decl>;</decl_stmt>
            <comment type="block" pos:start="61:13" pos:end="65:56">/* Try NBD_OPT_GO first - if it works, we are done (it
             * also gives us a good message if the server requires
             * TLS).  If it is not available, fall back to
             * NBD_OPT_LIST for nicer error messages about a missing
             * export, then use NBD_OPT_EXPORT_NAME.  */</comment>
            <expr_stmt pos:start="66:13" pos:end="66:55"><expr pos:start="66:13" pos:end="66:54"><name pos:start="66:13" pos:end="66:18">result</name> <operator pos:start="66:20" pos:end="66:20">=</operator> <call pos:start="66:22" pos:end="66:54"><name pos:start="66:22" pos:end="66:31">nbd_opt_go</name><argument_list pos:start="66:32" pos:end="66:54">(<argument pos:start="66:33" pos:end="66:35"><expr pos:start="66:33" pos:end="66:35"><name pos:start="66:33" pos:end="66:35">ioc</name></expr></argument>, <argument pos:start="66:38" pos:end="66:41"><expr pos:start="66:38" pos:end="66:41"><name pos:start="66:38" pos:end="66:41">name</name></expr></argument>, <argument pos:start="66:44" pos:end="66:47"><expr pos:start="66:44" pos:end="66:47"><name pos:start="66:44" pos:end="66:47">info</name></expr></argument>, <argument pos:start="66:50" pos:end="66:53"><expr pos:start="66:50" pos:end="66:53"><name pos:start="66:50" pos:end="66:53">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="67:13" pos:end="108:14"><if pos:start="67:13" pos:end="108:14">if <condition pos:start="67:16" pos:end="67:27">(<expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:22">result</name> <operator pos:start="67:24" pos:end="67:24">&gt;</operator> <literal type="number" pos:start="67:26" pos:end="67:26">0</literal></expr>)</condition> <block pos:start="67:29" pos:end="108:14">{<block_content pos:start="68:17" pos:end="108:14">
                <return pos:start="68:17" pos:end="68:25">return <expr pos:start="68:24" pos:end="68:24"><literal type="number" pos:start="68:24" pos:end="68:24">0</literal></expr>;</return>
            <comment type="block" pos:start="69:13" pos:end="74:15">/* Check our desired export is present in the
             * server export list. Since NBD_OPT_EXPORT_NAME
             * cannot return an error message, running this
             * query gives us better error reporting if the
             * export name is not available.
             */</comment>
            <if_stmt pos:start="75:13" pos:end="108:14"><if pos:start="75:13" pos:end="108:14">if <condition pos:start="75:16" pos:end="75:63">(<expr pos:start="75:17" pos:end="75:62"><call pos:start="75:17" pos:end="75:58"><name pos:start="75:17" pos:end="75:41">nbd_receive_query_exports</name><argument_list pos:start="75:42" pos:end="75:58">(<argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><name pos:start="75:43" pos:end="75:45">ioc</name></expr></argument>, <argument pos:start="75:48" pos:end="75:51"><expr pos:start="75:48" pos:end="75:51"><name pos:start="75:48" pos:end="75:51">name</name></expr></argument>, <argument pos:start="75:54" pos:end="75:57"><expr pos:start="75:54" pos:end="75:57"><name pos:start="75:54" pos:end="75:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="75:60" pos:end="75:60">&lt;</operator> <literal type="number" pos:start="75:62" pos:end="75:62">0</literal></expr>)</condition> <block pos:start="75:65" pos:end="108:14">{<block_content pos:start="77:9" pos:end="108:14">
        <comment type="block" pos:start="76:9" pos:end="76:43">/* write the export name request */</comment>
        <if_stmt pos:start="77:9" pos:end="108:14"><if pos:start="77:9" pos:end="108:14">if <condition pos:start="77:12" pos:end="78:46">(<expr pos:start="77:13" pos:end="78:45"><call pos:start="77:13" pos:end="78:41"><name pos:start="77:13" pos:end="77:35">nbd_send_option_request</name><argument_list pos:start="77:36" pos:end="78:41">(<argument pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><name pos:start="77:37" pos:end="77:39">ioc</name></expr></argument>, <argument pos:start="77:42" pos:end="77:60"><expr pos:start="77:42" pos:end="77:60"><name pos:start="77:42" pos:end="77:60">NBD_OPT_EXPORT_NAME</name></expr></argument>, <argument pos:start="77:63" pos:end="77:64"><expr pos:start="77:63" pos:end="77:64"><operator pos:start="77:63" pos:end="77:63">-</operator><literal type="number" pos:start="77:64" pos:end="77:64">1</literal></expr></argument>, <argument pos:start="77:67" pos:end="77:70"><expr pos:start="77:67" pos:end="77:70"><name pos:start="77:67" pos:end="77:70">name</name></expr></argument>,
                                    <argument pos:start="78:37" pos:end="78:40"><expr pos:start="78:37" pos:end="78:40"><name pos:start="78:37" pos:end="78:40">errp</name></expr></argument>)</argument_list></call> <operator pos:start="78:43" pos:end="78:43">&lt;</operator> <literal type="number" pos:start="78:45" pos:end="78:45">0</literal></expr>)</condition> <block pos:start="78:48" pos:end="108:14">{<block_content pos:start="80:9" pos:end="108:14">
        <comment type="block" pos:start="79:9" pos:end="79:31">/* Read the response */</comment>
        <if_stmt pos:start="80:9" pos:end="108:14"><if pos:start="80:9" pos:end="108:14">if <condition pos:start="80:12" pos:end="80:69">(<expr pos:start="80:13" pos:end="80:68"><call pos:start="80:13" pos:end="80:64"><name pos:start="80:13" pos:end="80:20">nbd_read</name><argument_list pos:start="80:21" pos:end="80:64">(<argument pos:start="80:22" pos:end="80:24"><expr pos:start="80:22" pos:end="80:24"><name pos:start="80:22" pos:end="80:24">ioc</name></expr></argument>, <argument pos:start="80:27" pos:end="80:37"><expr pos:start="80:27" pos:end="80:37"><operator pos:start="80:27" pos:end="80:27">&amp;</operator><name pos:start="80:28" pos:end="80:37"><name pos:start="80:28" pos:end="80:31">info</name><operator pos:start="80:32" pos:end="80:33">-&gt;</operator><name pos:start="80:34" pos:end="80:37">size</name></name></expr></argument>, <argument pos:start="80:40" pos:end="80:57"><expr pos:start="80:40" pos:end="80:57"><sizeof pos:start="80:40" pos:end="80:57">sizeof<argument_list pos:start="80:46" pos:end="80:57">(<argument pos:start="80:47" pos:end="80:56"><expr pos:start="80:47" pos:end="80:56"><name pos:start="80:47" pos:end="80:56"><name pos:start="80:47" pos:end="80:50">info</name><operator pos:start="80:51" pos:end="80:52">-&gt;</operator><name pos:start="80:53" pos:end="80:56">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="80:60" pos:end="80:63"><expr pos:start="80:60" pos:end="80:63"><name pos:start="80:60" pos:end="80:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="80:66" pos:end="80:66">&lt;</operator> <literal type="number" pos:start="80:68" pos:end="80:68">0</literal></expr>)</condition> <block pos:start="80:71" pos:end="108:14">{<block_content pos:start="81:13" pos:end="108:14">
            <expr_stmt pos:start="81:13" pos:end="81:64"><expr pos:start="81:13" pos:end="81:63"><call pos:start="81:13" pos:end="81:63"><name pos:start="81:13" pos:end="81:25">error_prepend</name><argument_list pos:start="81:26" pos:end="81:63">(<argument pos:start="81:27" pos:end="81:30"><expr pos:start="81:27" pos:end="81:30"><name pos:start="81:27" pos:end="81:30">errp</name></expr></argument>, <argument pos:start="81:33" pos:end="81:62"><expr pos:start="81:33" pos:end="81:62"><literal type="string" pos:start="81:33" pos:end="81:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="82:9" pos:end="82:34"><expr pos:start="82:9" pos:end="82:33"><call pos:start="82:9" pos:end="82:33"><name pos:start="82:9" pos:end="82:20">be64_to_cpus</name><argument_list pos:start="82:21" pos:end="82:33">(<argument pos:start="82:22" pos:end="82:32"><expr pos:start="82:22" pos:end="82:32"><operator pos:start="82:22" pos:end="82:22">&amp;</operator><name pos:start="82:23" pos:end="82:32"><name pos:start="82:23" pos:end="82:26">info</name><operator pos:start="82:27" pos:end="82:28">-&gt;</operator><name pos:start="82:29" pos:end="82:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="83:9" pos:end="108:14"><if pos:start="83:9" pos:end="86:5">if <condition pos:start="83:12" pos:end="83:71">(<expr pos:start="83:13" pos:end="83:70"><call pos:start="83:13" pos:end="83:66"><name pos:start="83:13" pos:end="83:20">nbd_read</name><argument_list pos:start="83:21" pos:end="83:66">(<argument pos:start="83:22" pos:end="83:24"><expr pos:start="83:22" pos:end="83:24"><name pos:start="83:22" pos:end="83:24">ioc</name></expr></argument>, <argument pos:start="83:27" pos:end="83:38"><expr pos:start="83:27" pos:end="83:38"><operator pos:start="83:27" pos:end="83:27">&amp;</operator><name pos:start="83:28" pos:end="83:38"><name pos:start="83:28" pos:end="83:31">info</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:38">flags</name></name></expr></argument>, <argument pos:start="83:41" pos:end="83:59"><expr pos:start="83:41" pos:end="83:59"><sizeof pos:start="83:41" pos:end="83:59">sizeof<argument_list pos:start="83:47" pos:end="83:59">(<argument pos:start="83:48" pos:end="83:58"><expr pos:start="83:48" pos:end="83:58"><name pos:start="83:48" pos:end="83:58"><name pos:start="83:48" pos:end="83:51">info</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:58">flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="83:62" pos:end="83:65"><expr pos:start="83:62" pos:end="83:65"><name pos:start="83:62" pos:end="83:65">errp</name></expr></argument>)</argument_list></call> <operator pos:start="83:68" pos:end="83:68">&lt;</operator> <literal type="number" pos:start="83:70" pos:end="83:70">0</literal></expr>)</condition> <block pos:start="83:73" pos:end="86:5">{<block_content pos:start="84:13" pos:end="85:35">
            <expr_stmt pos:start="84:13" pos:end="84:63"><expr pos:start="84:13" pos:end="84:62"><call pos:start="84:13" pos:end="84:62"><name pos:start="84:13" pos:end="84:25">error_prepend</name><argument_list pos:start="84:26" pos:end="84:62">(<argument pos:start="84:27" pos:end="84:30"><expr pos:start="84:27" pos:end="84:30"><name pos:start="84:27" pos:end="84:30">errp</name></expr></argument>, <argument pos:start="84:33" pos:end="84:61"><expr pos:start="84:33" pos:end="84:61"><literal type="string" pos:start="84:33" pos:end="84:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:35"><expr pos:start="85:9" pos:end="85:34"><call pos:start="85:9" pos:end="85:34"><name pos:start="85:9" pos:end="85:20">be16_to_cpus</name><argument_list pos:start="85:21" pos:end="85:34">(<argument pos:start="85:22" pos:end="85:33"><expr pos:start="85:22" pos:end="85:33"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:33"><name pos:start="85:23" pos:end="85:26">info</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:33">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="86:7" pos:end="108:14">else if <condition pos:start="86:15" pos:end="86:41">(<expr pos:start="86:16" pos:end="86:40"><name pos:start="86:16" pos:end="86:20">magic</name> <operator pos:start="86:22" pos:end="86:23">==</operator> <name pos:start="86:25" pos:end="86:40">NBD_CLIENT_MAGIC</name></expr>)</condition> <block pos:start="86:43" pos:end="108:14">{<block_content pos:start="87:9" pos:end="108:14">
        <decl_stmt pos:start="87:9" pos:end="87:26"><decl pos:start="87:9" pos:end="87:25"><type pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">uint32_t</name></type> <name pos:start="87:18" pos:end="87:25">oldflags</name></decl>;</decl_stmt>
        <if_stmt pos:start="88:9" pos:end="108:14"><if pos:start="88:9" pos:end="108:14">if <condition pos:start="88:12" pos:end="88:17">(<expr pos:start="88:13" pos:end="88:16"><name pos:start="88:13" pos:end="88:16">name</name></expr>)</condition> <block pos:start="88:19" pos:end="108:14">{<block_content pos:start="89:13" pos:end="108:14">
            <expr_stmt pos:start="89:13" pos:end="89:69"><expr pos:start="89:13" pos:end="89:68"><call pos:start="89:13" pos:end="89:68"><name pos:start="89:13" pos:end="89:22">error_setg</name><argument_list pos:start="89:23" pos:end="89:68">(<argument pos:start="89:24" pos:end="89:27"><expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">errp</name></expr></argument>, <argument pos:start="89:30" pos:end="89:67"><expr pos:start="89:30" pos:end="89:67"><literal type="string" pos:start="89:30" pos:end="89:67">"Server does not support export names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="90:9" pos:end="108:14"><if pos:start="90:9" pos:end="108:14">if <condition pos:start="90:12" pos:end="90:21">(<expr pos:start="90:13" pos:end="90:20"><name pos:start="90:13" pos:end="90:20">tlscreds</name></expr>)</condition> <block pos:start="90:23" pos:end="108:14">{<block_content pos:start="91:13" pos:end="108:14">
            <expr_stmt pos:start="91:13" pos:end="91:65"><expr pos:start="91:13" pos:end="91:64"><call pos:start="91:13" pos:end="91:64"><name pos:start="91:13" pos:end="91:22">error_setg</name><argument_list pos:start="91:23" pos:end="91:64">(<argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">errp</name></expr></argument>, <argument pos:start="91:30" pos:end="91:63"><expr pos:start="91:30" pos:end="91:63"><literal type="string" pos:start="91:30" pos:end="91:63">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="92:9" pos:end="108:14"><if pos:start="92:9" pos:end="108:14">if <condition pos:start="92:12" pos:end="92:69">(<expr pos:start="92:13" pos:end="92:68"><call pos:start="92:13" pos:end="92:64"><name pos:start="92:13" pos:end="92:20">nbd_read</name><argument_list pos:start="92:21" pos:end="92:64">(<argument pos:start="92:22" pos:end="92:24"><expr pos:start="92:22" pos:end="92:24"><name pos:start="92:22" pos:end="92:24">ioc</name></expr></argument>, <argument pos:start="92:27" pos:end="92:37"><expr pos:start="92:27" pos:end="92:37"><operator pos:start="92:27" pos:end="92:27">&amp;</operator><name pos:start="92:28" pos:end="92:37"><name pos:start="92:28" pos:end="92:31">info</name><operator pos:start="92:32" pos:end="92:33">-&gt;</operator><name pos:start="92:34" pos:end="92:37">size</name></name></expr></argument>, <argument pos:start="92:40" pos:end="92:57"><expr pos:start="92:40" pos:end="92:57"><sizeof pos:start="92:40" pos:end="92:57">sizeof<argument_list pos:start="92:46" pos:end="92:57">(<argument pos:start="92:47" pos:end="92:56"><expr pos:start="92:47" pos:end="92:56"><name pos:start="92:47" pos:end="92:56"><name pos:start="92:47" pos:end="92:50">info</name><operator pos:start="92:51" pos:end="92:52">-&gt;</operator><name pos:start="92:53" pos:end="92:56">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="92:60" pos:end="92:63"><expr pos:start="92:60" pos:end="92:63"><name pos:start="92:60" pos:end="92:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="92:66" pos:end="92:66">&lt;</operator> <literal type="number" pos:start="92:68" pos:end="92:68">0</literal></expr>)</condition> <block pos:start="92:71" pos:end="108:14">{<block_content pos:start="93:13" pos:end="108:14">
            <expr_stmt pos:start="93:13" pos:end="93:64"><expr pos:start="93:13" pos:end="93:63"><call pos:start="93:13" pos:end="93:63"><name pos:start="93:13" pos:end="93:25">error_prepend</name><argument_list pos:start="93:26" pos:end="93:63">(<argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><name pos:start="93:27" pos:end="93:30">errp</name></expr></argument>, <argument pos:start="93:33" pos:end="93:62"><expr pos:start="93:33" pos:end="93:62"><literal type="string" pos:start="93:33" pos:end="93:62">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="94:9" pos:end="94:34"><expr pos:start="94:9" pos:end="94:33"><call pos:start="94:9" pos:end="94:33"><name pos:start="94:9" pos:end="94:20">be64_to_cpus</name><argument_list pos:start="94:21" pos:end="94:33">(<argument pos:start="94:22" pos:end="94:32"><expr pos:start="94:22" pos:end="94:32"><operator pos:start="94:22" pos:end="94:22">&amp;</operator><name pos:start="94:23" pos:end="94:32"><name pos:start="94:23" pos:end="94:26">info</name><operator pos:start="94:27" pos:end="94:28">-&gt;</operator><name pos:start="94:29" pos:end="94:32">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="95:9" pos:end="108:14"><if pos:start="95:9" pos:end="108:14">if <condition pos:start="95:12" pos:end="95:65">(<expr pos:start="95:13" pos:end="95:64"><call pos:start="95:13" pos:end="95:60"><name pos:start="95:13" pos:end="95:20">nbd_read</name><argument_list pos:start="95:21" pos:end="95:60">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">ioc</name></expr></argument>, <argument pos:start="95:27" pos:end="95:35"><expr pos:start="95:27" pos:end="95:35"><operator pos:start="95:27" pos:end="95:27">&amp;</operator><name pos:start="95:28" pos:end="95:35">oldflags</name></expr></argument>, <argument pos:start="95:38" pos:end="95:53"><expr pos:start="95:38" pos:end="95:53"><sizeof pos:start="95:38" pos:end="95:53">sizeof<argument_list pos:start="95:44" pos:end="95:53">(<argument pos:start="95:45" pos:end="95:52"><expr pos:start="95:45" pos:end="95:52"><name pos:start="95:45" pos:end="95:52">oldflags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:56" pos:end="95:59"><expr pos:start="95:56" pos:end="95:59"><name pos:start="95:56" pos:end="95:59">errp</name></expr></argument>)</argument_list></call> <operator pos:start="95:62" pos:end="95:62">&lt;</operator> <literal type="number" pos:start="95:64" pos:end="95:64">0</literal></expr>)</condition> <block pos:start="95:67" pos:end="108:14">{<block_content pos:start="96:13" pos:end="108:14">
            <expr_stmt pos:start="96:13" pos:end="96:63"><expr pos:start="96:13" pos:end="96:62"><call pos:start="96:13" pos:end="96:62"><name pos:start="96:13" pos:end="96:25">error_prepend</name><argument_list pos:start="96:26" pos:end="96:62">(<argument pos:start="96:27" pos:end="96:30"><expr pos:start="96:27" pos:end="96:30"><name pos:start="96:27" pos:end="96:30">errp</name></expr></argument>, <argument pos:start="96:33" pos:end="96:61"><expr pos:start="96:33" pos:end="96:61"><literal type="string" pos:start="96:33" pos:end="96:61">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="97:9" pos:end="97:32"><expr pos:start="97:9" pos:end="97:31"><call pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:20">be32_to_cpus</name><argument_list pos:start="97:21" pos:end="97:31">(<argument pos:start="97:22" pos:end="97:30"><expr pos:start="97:22" pos:end="97:30"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:30">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="98:9" pos:end="108:14"><if pos:start="98:9" pos:end="101:5">if <condition pos:start="98:12" pos:end="98:31">(<expr pos:start="98:13" pos:end="98:30"><name pos:start="98:13" pos:end="98:20">oldflags</name> <operator pos:start="98:22" pos:end="98:22">&amp;</operator> <operator pos:start="98:24" pos:end="98:24">~</operator><literal type="number" pos:start="98:25" pos:end="98:30">0xffff</literal></expr>)</condition> <block pos:start="98:33" pos:end="101:5">{<block_content pos:start="99:13" pos:end="100:31">
            <expr_stmt pos:start="99:13" pos:end="99:77"><expr pos:start="99:13" pos:end="99:76"><call pos:start="99:13" pos:end="99:76"><name pos:start="99:13" pos:end="99:22">error_setg</name><argument_list pos:start="99:23" pos:end="99:76">(<argument pos:start="99:24" pos:end="99:27"><expr pos:start="99:24" pos:end="99:27"><name pos:start="99:24" pos:end="99:27">errp</name></expr></argument>, <argument pos:start="99:30" pos:end="99:65"><expr pos:start="99:30" pos:end="99:65"><literal type="string" pos:start="99:30" pos:end="99:58">"Unexpected export flags %0x"</literal> <name pos:start="99:60" pos:end="99:65">PRIx32</name></expr></argument>, <argument pos:start="99:68" pos:end="99:75"><expr pos:start="99:68" pos:end="99:75"><name pos:start="99:68" pos:end="99:75">oldflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="100:9" pos:end="100:31"><expr pos:start="100:9" pos:end="100:30"><name pos:start="100:9" pos:end="100:19"><name pos:start="100:9" pos:end="100:12">info</name><operator pos:start="100:13" pos:end="100:14">-&gt;</operator><name pos:start="100:15" pos:end="100:19">flags</name></name> <operator pos:start="100:21" pos:end="100:21">=</operator> <name pos:start="100:23" pos:end="100:30">oldflags</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="101:7" pos:end="108:14">else <block pos:start="101:12" pos:end="108:14">{<block_content pos:start="102:9" pos:end="108:14">
        <expr_stmt pos:start="102:9" pos:end="102:47"><expr pos:start="102:9" pos:end="102:46"><call pos:start="102:9" pos:end="102:46"><name pos:start="102:9" pos:end="102:18">error_setg</name><argument_list pos:start="102:19" pos:end="102:46">(<argument pos:start="102:20" pos:end="102:23"><expr pos:start="102:20" pos:end="102:23"><name pos:start="102:20" pos:end="102:23">errp</name></expr></argument>, <argument pos:start="102:26" pos:end="102:45"><expr pos:start="102:26" pos:end="102:45"><literal type="string" pos:start="102:26" pos:end="102:45">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="103:5" pos:end="103:68"><expr pos:start="103:5" pos:end="103:67"><call pos:start="103:5" pos:end="103:67"><name pos:start="103:5" pos:end="103:42">trace_nbd_receive_negotiate_size_flags</name><argument_list pos:start="103:43" pos:end="103:67">(<argument pos:start="103:44" pos:end="103:53"><expr pos:start="103:44" pos:end="103:53"><name pos:start="103:44" pos:end="103:53"><name pos:start="103:44" pos:end="103:47">info</name><operator pos:start="103:48" pos:end="103:49">-&gt;</operator><name pos:start="103:50" pos:end="103:53">size</name></name></expr></argument>, <argument pos:start="103:56" pos:end="103:66"><expr pos:start="103:56" pos:end="103:66"><name pos:start="103:56" pos:end="103:66"><name pos:start="103:56" pos:end="103:59">info</name><operator pos:start="103:60" pos:end="103:61">-&gt;</operator><name pos:start="103:62" pos:end="103:66">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="104:5" pos:end="108:14"><if pos:start="104:5" pos:end="108:14">if <condition pos:start="104:8" pos:end="104:47">(<expr pos:start="104:9" pos:end="104:46"><name pos:start="104:9" pos:end="104:14">zeroes</name> <operator pos:start="104:16" pos:end="104:17">&amp;&amp;</operator> <call pos:start="104:19" pos:end="104:42"><name pos:start="104:19" pos:end="104:26">nbd_drop</name><argument_list pos:start="104:27" pos:end="104:42">(<argument pos:start="104:28" pos:end="104:30"><expr pos:start="104:28" pos:end="104:30"><name pos:start="104:28" pos:end="104:30">ioc</name></expr></argument>, <argument pos:start="104:33" pos:end="104:35"><expr pos:start="104:33" pos:end="104:35"><literal type="number" pos:start="104:33" pos:end="104:35">124</literal></expr></argument>, <argument pos:start="104:38" pos:end="104:41"><expr pos:start="104:38" pos:end="104:41"><name pos:start="104:38" pos:end="104:41">errp</name></expr></argument>)</argument_list></call> <operator pos:start="104:44" pos:end="104:44">&lt;</operator> <literal type="number" pos:start="104:46" pos:end="104:46">0</literal></expr>)</condition> <block pos:start="104:49" pos:end="108:14">{<block_content pos:start="105:9" pos:end="108:14">
        <expr_stmt pos:start="105:9" pos:end="105:61"><expr pos:start="105:9" pos:end="105:60"><call pos:start="105:9" pos:end="105:60"><name pos:start="105:9" pos:end="105:21">error_prepend</name><argument_list pos:start="105:22" pos:end="105:60">(<argument pos:start="105:23" pos:end="105:26"><expr pos:start="105:23" pos:end="105:26"><name pos:start="105:23" pos:end="105:26">errp</name></expr></argument>, <argument pos:start="105:29" pos:end="105:59"><expr pos:start="105:29" pos:end="105:59"><literal type="string" pos:start="105:29" pos:end="105:59">"Failed to read reserved block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="106:5" pos:end="106:11"><expr pos:start="106:5" pos:end="106:10"><name pos:start="106:5" pos:end="106:6">rc</name> <operator pos:start="106:8" pos:end="106:8">=</operator> <literal type="number" pos:start="106:10" pos:end="106:10">0</literal></expr>;</expr_stmt>
<label pos:start="107:1" pos:end="107:5"><name pos:start="107:1" pos:end="107:4">fail</name>:</label>
    <return pos:start="108:5" pos:end="108:14">return <expr pos:start="108:12" pos:end="108:13"><name pos:start="108:12" pos:end="108:13">rc</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
