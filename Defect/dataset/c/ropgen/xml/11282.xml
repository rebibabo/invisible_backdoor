<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11282.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:34">omx_encode_init</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:15">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">OMXCodecContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:39">= <expr pos:start="7:15" pos:end="7:39"><name pos:start="7:15" pos:end="7:39">AVERROR_ENCODER_NOT_FOUND</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">role</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">OMX_BUFFERHEADERTYPE</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:32">buffer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">OMX_ERRORTYPE</name></type> <name pos:start="13:19" pos:end="13:21">err</name></decl>;</decl_stmt>



<cpp:if pos:start="17:1" pos:end="17:18">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">CONFIG_OMX_RPI</name></expr></cpp:if>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:21">input_zerocopy</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <literal type="number" pos:start="19:25" pos:end="19:25">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="25:5" pos:end="25:63"><expr pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:18">omx_context</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:62"><name pos:start="25:22" pos:end="25:29">omx_init</name><argument_list pos:start="25:30" pos:end="25:62">(<argument pos:start="25:31" pos:end="25:35"><expr pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:35">avctx</name></expr></argument>, <argument pos:start="25:38" pos:end="25:47"><expr pos:start="25:38" pos:end="25:47"><name pos:start="25:38" pos:end="25:47"><name pos:start="25:38" pos:end="25:38">s</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:47">libname</name></name></expr></argument>, <argument pos:start="25:50" pos:end="25:61"><expr pos:start="25:50" pos:end="25:61"><name pos:start="25:50" pos:end="25:61"><name pos:start="25:50" pos:end="25:50">s</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:61">libprefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:41"><if pos:start="27:5" pos:end="29:41">if <condition pos:start="27:8" pos:end="27:24">(<expr pos:start="27:9" pos:end="27:23"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:23"><name pos:start="27:10" pos:end="27:10">s</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:23">omx_context</name></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:41"><block_content pos:start="29:9" pos:end="29:41">

        <return pos:start="29:9" pos:end="29:41">return <expr pos:start="29:16" pos:end="29:40"><name pos:start="29:16" pos:end="29:40">AVERROR_ENCODER_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><call pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:22">pthread_mutex_init</name><argument_list pos:start="33:23" pos:end="33:45">(<argument pos:start="33:24" pos:end="33:38"><expr pos:start="33:24" pos:end="33:38"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:38"><name pos:start="33:25" pos:end="33:25">s</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:38">state_mutex</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><call pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:21">pthread_cond_init</name><argument_list pos:start="35:22" pos:end="35:43">(<argument pos:start="35:23" pos:end="35:36"><expr pos:start="35:23" pos:end="35:36"><operator pos:start="35:23" pos:end="35:23">&amp;</operator><name pos:start="35:24" pos:end="35:36"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:36">state_cond</name></name></expr></argument>, <argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><name pos:start="35:39" pos:end="35:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><call pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:22">pthread_mutex_init</name><argument_list pos:start="37:23" pos:end="37:45">(<argument pos:start="37:24" pos:end="37:38"><expr pos:start="37:24" pos:end="37:38"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:38"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:38">input_mutex</name></name></expr></argument>, <argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><call pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:21">pthread_cond_init</name><argument_list pos:start="39:22" pos:end="39:43">(<argument pos:start="39:23" pos:end="39:36"><expr pos:start="39:23" pos:end="39:36"><operator pos:start="39:23" pos:end="39:23">&amp;</operator><name pos:start="39:24" pos:end="39:36"><name pos:start="39:24" pos:end="39:24">s</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:36">input_cond</name></name></expr></argument>, <argument pos:start="39:39" pos:end="39:42"><expr pos:start="39:39" pos:end="39:42"><name pos:start="39:39" pos:end="39:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:47"><expr pos:start="41:5" pos:end="41:46"><call pos:start="41:5" pos:end="41:46"><name pos:start="41:5" pos:end="41:22">pthread_mutex_init</name><argument_list pos:start="41:23" pos:end="41:46">(<argument pos:start="41:24" pos:end="41:39"><expr pos:start="41:24" pos:end="41:39"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:39"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:39">output_mutex</name></name></expr></argument>, <argument pos:start="41:42" pos:end="41:45"><expr pos:start="41:42" pos:end="41:45"><name pos:start="41:42" pos:end="41:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><call pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:21">pthread_cond_init</name><argument_list pos:start="43:22" pos:end="43:44">(<argument pos:start="43:23" pos:end="43:37"><expr pos:start="43:23" pos:end="43:37"><operator pos:start="43:23" pos:end="43:23">&amp;</operator><name pos:start="43:24" pos:end="43:37"><name pos:start="43:24" pos:end="43:24">s</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:37">output_cond</name></name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:24">mutex_cond_inited</name></name> <operator pos:start="45:26" pos:end="45:26">=</operator> <literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:12">avctx</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:12">state</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:30">OMX_StateLoaded</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:29"><expr pos:start="51:5" pos:end="51:28"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:12">error</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:28">OMX_ErrorNone</name></expr>;</expr_stmt>



    <switch pos:start="55:5" pos:end="73:5">switch <condition pos:start="55:12" pos:end="55:29">(<expr pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:17">avctx</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:24">codec</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:28">id</name></name></expr>)</condition> <block pos:start="55:31" pos:end="73:5">{<block_content pos:start="57:5" pos:end="71:31">

    <case pos:start="57:5" pos:end="57:27">case <expr pos:start="57:10" pos:end="57:26"><name pos:start="57:10" pos:end="57:26">AV_CODEC_ID_MPEG4</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:12">role</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <literal type="string" pos:start="59:16" pos:end="59:36">"video_encoder.mpeg4"</literal></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:26">case <expr pos:start="63:10" pos:end="63:25"><name pos:start="63:10" pos:end="63:25">AV_CODEC_ID_H264</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:12">role</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <literal type="string" pos:start="65:16" pos:end="65:34">"video_encoder.avc"</literal></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <default pos:start="69:5" pos:end="69:12">default:</default>

        <return pos:start="71:9" pos:end="71:31">return <expr pos:start="71:16" pos:end="71:30"><call pos:start="71:16" pos:end="71:30"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="77:5" pos:end="79:18"><if pos:start="77:5" pos:end="79:18">if <condition pos:start="77:8" pos:end="77:110">(<expr pos:start="77:9" pos:end="77:109"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:12">ret</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:104"><name pos:start="77:16" pos:end="77:29">find_component</name><argument_list pos:start="77:30" pos:end="77:104">(<argument pos:start="77:31" pos:end="77:44"><expr pos:start="77:31" pos:end="77:44"><name pos:start="77:31" pos:end="77:44"><name pos:start="77:31" pos:end="77:31">s</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:44">omx_context</name></name></expr></argument>, <argument pos:start="77:47" pos:end="77:51"><expr pos:start="77:47" pos:end="77:51"><name pos:start="77:47" pos:end="77:51">avctx</name></expr></argument>, <argument pos:start="77:54" pos:end="77:57"><expr pos:start="77:54" pos:end="77:57"><name pos:start="77:54" pos:end="77:57">role</name></expr></argument>, <argument pos:start="77:60" pos:end="77:76"><expr pos:start="77:60" pos:end="77:76"><name pos:start="77:60" pos:end="77:76"><name pos:start="77:60" pos:end="77:60">s</name><operator pos:start="77:61" pos:end="77:62">-&gt;</operator><name pos:start="77:63" pos:end="77:76">component_name</name></name></expr></argument>, <argument pos:start="77:79" pos:end="77:103"><expr pos:start="77:79" pos:end="77:103"><sizeof pos:start="77:79" pos:end="77:103">sizeof<argument_list pos:start="77:85" pos:end="77:103">(<argument pos:start="77:86" pos:end="77:102"><expr pos:start="77:86" pos:end="77:102"><name pos:start="77:86" pos:end="77:102"><name pos:start="77:86" pos:end="77:86">s</name><operator pos:start="77:87" pos:end="77:88">-&gt;</operator><name pos:start="77:89" pos:end="77:102">component_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="77:105" pos:end="77:105">)</operator> <operator pos:start="77:107" pos:end="77:107">&lt;</operator> <literal type="number" pos:start="77:109" pos:end="77:109">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:18"><block_content pos:start="79:9" pos:end="79:18">

        <goto pos:start="79:9" pos:end="79:18">goto <name pos:start="79:14" pos:end="79:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:64"><expr pos:start="83:5" pos:end="83:63"><call pos:start="83:5" pos:end="83:63"><name pos:start="83:5" pos:end="83:10">av_log</name><argument_list pos:start="83:11" pos:end="83:63">(<argument pos:start="83:12" pos:end="83:16"><expr pos:start="83:12" pos:end="83:16"><name pos:start="83:12" pos:end="83:16">avctx</name></expr></argument>, <argument pos:start="83:19" pos:end="83:29"><expr pos:start="83:19" pos:end="83:29"><name pos:start="83:19" pos:end="83:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="83:32" pos:end="83:43"><expr pos:start="83:32" pos:end="83:43"><literal type="string" pos:start="83:32" pos:end="83:43">"Using %s\n"</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:62"><expr pos:start="83:46" pos:end="83:62"><name pos:start="83:46" pos:end="83:62"><name pos:start="83:46" pos:end="83:46">s</name><operator pos:start="83:47" pos:end="83:48">-&gt;</operator><name pos:start="83:49" pos:end="83:62">component_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="89:18"><if pos:start="87:5" pos:end="89:18">if <condition pos:start="87:8" pos:end="87:52">(<expr pos:start="87:9" pos:end="87:51"><operator pos:start="87:9" pos:end="87:9">(</operator><name pos:start="87:10" pos:end="87:12">ret</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:46"><name pos:start="87:16" pos:end="87:33">omx_component_init</name><argument_list pos:start="87:34" pos:end="87:46">(<argument pos:start="87:35" pos:end="87:39"><expr pos:start="87:35" pos:end="87:39"><name pos:start="87:35" pos:end="87:39">avctx</name></expr></argument>, <argument pos:start="87:42" pos:end="87:45"><expr pos:start="87:42" pos:end="87:45"><name pos:start="87:42" pos:end="87:45">role</name></expr></argument>)</argument_list></call><operator pos:start="87:47" pos:end="87:47">)</operator> <operator pos:start="87:49" pos:end="87:49">&lt;</operator> <literal type="number" pos:start="87:51" pos:end="87:51">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:18"><block_content pos:start="89:9" pos:end="89:18">

        <goto pos:start="89:9" pos:end="89:18">goto <name pos:start="89:14" pos:end="89:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="177:5"><if pos:start="93:5" pos:end="177:5">if <condition pos:start="93:8" pos:end="93:51">(<expr pos:start="93:9" pos:end="93:50"><name pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:20">flags</name></name> <operator pos:start="93:22" pos:end="93:22">&amp;</operator> <name pos:start="93:24" pos:end="93:50">AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block pos:start="93:53" pos:end="177:5">{<block_content pos:start="95:9" pos:end="175:9">

        <while pos:start="95:9" pos:end="175:9">while <condition pos:start="95:15" pos:end="95:17">(<expr pos:start="95:16" pos:end="95:16"><literal type="number" pos:start="95:16" pos:end="95:16">1</literal></expr>)</condition> <block pos:start="95:19" pos:end="175:9">{<block_content pos:start="97:13" pos:end="173:13">

            <expr_stmt pos:start="97:13" pos:end="99:82"><expr pos:start="97:13" pos:end="99:81"><name pos:start="97:13" pos:end="97:18">buffer</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="99:81"><name pos:start="97:22" pos:end="97:31">get_buffer</name><argument_list pos:start="97:32" pos:end="99:81">(<argument pos:start="97:33" pos:end="97:48"><expr pos:start="97:33" pos:end="97:48"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:48"><name pos:start="97:34" pos:end="97:34">s</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:48">output_mutex</name></name></expr></argument>, <argument pos:start="97:51" pos:end="97:65"><expr pos:start="97:51" pos:end="97:65"><operator pos:start="97:51" pos:end="97:51">&amp;</operator><name pos:start="97:52" pos:end="97:65"><name pos:start="97:52" pos:end="97:52">s</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:65">output_cond</name></name></expr></argument>,

                                <argument pos:start="99:33" pos:end="99:56"><expr pos:start="99:33" pos:end="99:56"><operator pos:start="99:33" pos:end="99:33">&amp;</operator><name pos:start="99:34" pos:end="99:56"><name pos:start="99:34" pos:end="99:34">s</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:56">num_done_out_buffers</name></name></expr></argument>, <argument pos:start="99:59" pos:end="99:77"><expr pos:start="99:59" pos:end="99:77"><name pos:start="99:59" pos:end="99:77"><name pos:start="99:59" pos:end="99:59">s</name><operator pos:start="99:60" pos:end="99:61">-&gt;</operator><name pos:start="99:62" pos:end="99:77">done_out_buffers</name></name></expr></argument>, <argument pos:start="99:80" pos:end="99:80"><expr pos:start="99:80" pos:end="99:80"><literal type="number" pos:start="99:80" pos:end="99:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="117:13"><if pos:start="101:13" pos:end="117:13">if <condition pos:start="101:16" pos:end="101:60">(<expr pos:start="101:17" pos:end="101:59"><name pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:22">buffer</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:30">nFlags</name></name> <operator pos:start="101:32" pos:end="101:32">&amp;</operator> <name pos:start="101:34" pos:end="101:59">OMX_BUFFERFLAG_CODECCONFIG</name></expr>)</condition> <block pos:start="101:62" pos:end="117:13">{<block_content pos:start="103:17" pos:end="115:98">

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if <condition pos:start="103:20" pos:end="103:138">(<expr pos:start="103:21" pos:end="103:137"><operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:24">ret</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <call pos:start="103:28" pos:end="103:132"><name pos:start="103:28" pos:end="103:38">av_reallocp</name><argument_list pos:start="103:39" pos:end="103:132">(<argument pos:start="103:40" pos:end="103:56"><expr pos:start="103:40" pos:end="103:56"><operator pos:start="103:40" pos:end="103:40">&amp;</operator><name pos:start="103:41" pos:end="103:56"><name pos:start="103:41" pos:end="103:45">avctx</name><operator pos:start="103:46" pos:end="103:47">-&gt;</operator><name pos:start="103:48" pos:end="103:56">extradata</name></name></expr></argument>, <argument pos:start="103:59" pos:end="103:131"><expr pos:start="103:59" pos:end="103:131"><name pos:start="103:59" pos:end="103:79"><name pos:start="103:59" pos:end="103:63">avctx</name><operator pos:start="103:64" pos:end="103:65">-&gt;</operator><name pos:start="103:66" pos:end="103:79">extradata_size</name></name> <operator pos:start="103:81" pos:end="103:81">+</operator> <name pos:start="103:83" pos:end="103:100"><name pos:start="103:83" pos:end="103:88">buffer</name><operator pos:start="103:89" pos:end="103:90">-&gt;</operator><name pos:start="103:91" pos:end="103:100">nFilledLen</name></name> <operator pos:start="103:102" pos:end="103:102">+</operator> <name pos:start="103:104" pos:end="103:131">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="103:133" pos:end="103:133">)</operator> <operator pos:start="103:135" pos:end="103:135">&lt;</operator> <literal type="number" pos:start="103:137" pos:end="103:137">0</literal></expr>)</condition> <block pos:start="103:140" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:30">

                    <expr_stmt pos:start="105:21" pos:end="105:46"><expr pos:start="105:21" pos:end="105:45"><name pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:25">avctx</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:41">extradata_size</name></name> <operator pos:start="105:43" pos:end="105:43">=</operator> <literal type="number" pos:start="105:45" pos:end="105:45">0</literal></expr>;</expr_stmt>

                    <goto pos:start="107:21" pos:end="107:30">goto <name pos:start="107:26" pos:end="107:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:120"><expr pos:start="111:17" pos:end="111:119"><call pos:start="111:17" pos:end="111:119"><name pos:start="111:17" pos:end="111:22">memcpy</name><argument_list pos:start="111:23" pos:end="111:119">(<argument pos:start="111:24" pos:end="111:63"><expr pos:start="111:24" pos:end="111:63"><name pos:start="111:24" pos:end="111:39"><name pos:start="111:24" pos:end="111:28">avctx</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:39">extradata</name></name> <operator pos:start="111:41" pos:end="111:41">+</operator> <name pos:start="111:43" pos:end="111:63"><name pos:start="111:43" pos:end="111:47">avctx</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:63">extradata_size</name></name></expr></argument>, <argument pos:start="111:66" pos:end="111:98"><expr pos:start="111:66" pos:end="111:98"><name pos:start="111:66" pos:end="111:80"><name pos:start="111:66" pos:end="111:71">buffer</name><operator pos:start="111:72" pos:end="111:73">-&gt;</operator><name pos:start="111:74" pos:end="111:80">pBuffer</name></name> <operator pos:start="111:82" pos:end="111:82">+</operator> <name pos:start="111:84" pos:end="111:98"><name pos:start="111:84" pos:end="111:89">buffer</name><operator pos:start="111:90" pos:end="111:91">-&gt;</operator><name pos:start="111:92" pos:end="111:98">nOffset</name></name></expr></argument>, <argument pos:start="111:101" pos:end="111:118"><expr pos:start="111:101" pos:end="111:118"><name pos:start="111:101" pos:end="111:118"><name pos:start="111:101" pos:end="111:106">buffer</name><operator pos:start="111:107" pos:end="111:108">-&gt;</operator><name pos:start="111:109" pos:end="111:118">nFilledLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:60"><expr pos:start="113:17" pos:end="113:59"><name pos:start="113:17" pos:end="113:37"><name pos:start="113:17" pos:end="113:21">avctx</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:37">extradata_size</name></name> <operator pos:start="113:39" pos:end="113:40">+=</operator> <name pos:start="113:42" pos:end="113:59"><name pos:start="113:42" pos:end="113:47">buffer</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:59">nFilledLen</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:98"><expr pos:start="115:17" pos:end="115:97"><call pos:start="115:17" pos:end="115:97"><name pos:start="115:17" pos:end="115:22">memset</name><argument_list pos:start="115:23" pos:end="115:97">(<argument pos:start="115:24" pos:end="115:63"><expr pos:start="115:24" pos:end="115:63"><name pos:start="115:24" pos:end="115:39"><name pos:start="115:24" pos:end="115:28">avctx</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:39">extradata</name></name> <operator pos:start="115:41" pos:end="115:41">+</operator> <name pos:start="115:43" pos:end="115:63"><name pos:start="115:43" pos:end="115:47">avctx</name><operator pos:start="115:48" pos:end="115:49">-&gt;</operator><name pos:start="115:50" pos:end="115:63">extradata_size</name></name></expr></argument>, <argument pos:start="115:66" pos:end="115:66"><expr pos:start="115:66" pos:end="115:66"><literal type="number" pos:start="115:66" pos:end="115:66">0</literal></expr></argument>, <argument pos:start="115:69" pos:end="115:96"><expr pos:start="115:69" pos:end="115:96"><name pos:start="115:69" pos:end="115:96">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:56"><expr pos:start="119:13" pos:end="119:55"><name pos:start="119:13" pos:end="119:15">err</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <call pos:start="119:19" pos:end="119:55"><name pos:start="119:19" pos:end="119:36">OMX_FillThisBuffer</name><argument_list pos:start="119:37" pos:end="119:55">(<argument pos:start="119:38" pos:end="119:46"><expr pos:start="119:38" pos:end="119:46"><name pos:start="119:38" pos:end="119:46"><name pos:start="119:38" pos:end="119:38">s</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:46">handle</name></name></expr></argument>, <argument pos:start="119:49" pos:end="119:54"><expr pos:start="119:49" pos:end="119:54"><name pos:start="119:49" pos:end="119:54">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="121:13" pos:end="133:13"><if pos:start="121:13" pos:end="133:13">if <condition pos:start="121:16" pos:end="121:37">(<expr pos:start="121:17" pos:end="121:36"><name pos:start="121:17" pos:end="121:19">err</name> <operator pos:start="121:21" pos:end="121:22">!=</operator> <name pos:start="121:24" pos:end="121:36">OMX_ErrorNone</name></expr>)</condition> <block pos:start="121:39" pos:end="133:13">{<block_content pos:start="123:17" pos:end="131:26">

                <expr_stmt pos:start="123:17" pos:end="125:85"><expr pos:start="123:17" pos:end="125:84"><call pos:start="123:17" pos:end="125:84"><name pos:start="123:17" pos:end="123:29">append_buffer</name><argument_list pos:start="123:30" pos:end="125:84">(<argument pos:start="123:31" pos:end="123:46"><expr pos:start="123:31" pos:end="123:46"><operator pos:start="123:31" pos:end="123:31">&amp;</operator><name pos:start="123:32" pos:end="123:46"><name pos:start="123:32" pos:end="123:32">s</name><operator pos:start="123:33" pos:end="123:34">-&gt;</operator><name pos:start="123:35" pos:end="123:46">output_mutex</name></name></expr></argument>, <argument pos:start="123:49" pos:end="123:63"><expr pos:start="123:49" pos:end="123:63"><operator pos:start="123:49" pos:end="123:49">&amp;</operator><name pos:start="123:50" pos:end="123:63"><name pos:start="123:50" pos:end="123:50">s</name><operator pos:start="123:51" pos:end="123:52">-&gt;</operator><name pos:start="123:53" pos:end="123:63">output_cond</name></name></expr></argument>,

                              <argument pos:start="125:31" pos:end="125:54"><expr pos:start="125:31" pos:end="125:54"><operator pos:start="125:31" pos:end="125:31">&amp;</operator><name pos:start="125:32" pos:end="125:54"><name pos:start="125:32" pos:end="125:32">s</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:54">num_done_out_buffers</name></name></expr></argument>, <argument pos:start="125:57" pos:end="125:75"><expr pos:start="125:57" pos:end="125:75"><name pos:start="125:57" pos:end="125:75"><name pos:start="125:57" pos:end="125:57">s</name><operator pos:start="125:58" pos:end="125:59">-&gt;</operator><name pos:start="125:60" pos:end="125:75">done_out_buffers</name></name></expr></argument>, <argument pos:start="125:78" pos:end="125:83"><expr pos:start="125:78" pos:end="125:83"><name pos:start="125:78" pos:end="125:83">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:84"><expr pos:start="127:17" pos:end="127:83"><call pos:start="127:17" pos:end="127:83"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:83">(<argument pos:start="127:24" pos:end="127:28"><expr pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:28">avctx</name></expr></argument>, <argument pos:start="127:31" pos:end="127:42"><expr pos:start="127:31" pos:end="127:42"><name pos:start="127:31" pos:end="127:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:45" pos:end="127:77"><expr pos:start="127:45" pos:end="127:77"><literal type="string" pos:start="127:45" pos:end="127:77">"OMX_FillThisBuffer failed: %x\n"</literal></expr></argument>, <argument pos:start="127:80" pos:end="127:82"><expr pos:start="127:80" pos:end="127:82"><name pos:start="127:80" pos:end="127:82">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:38"><expr pos:start="129:17" pos:end="129:37"><name pos:start="129:17" pos:end="129:19">ret</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:37">AVERROR_UNKNOWN</name></expr>;</expr_stmt>

                <goto pos:start="131:17" pos:end="131:26">goto <name pos:start="131:22" pos:end="131:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="135:13" pos:end="173:13"><if pos:start="135:13" pos:end="167:13">if <condition pos:start="135:16" pos:end="135:53">(<expr pos:start="135:17" pos:end="135:52"><name pos:start="135:17" pos:end="135:32"><name pos:start="135:17" pos:end="135:21">avctx</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:28">codec</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:32">id</name></name> <operator pos:start="135:34" pos:end="135:35">==</operator> <name pos:start="135:37" pos:end="135:52">AV_CODEC_ID_H264</name></expr>)</condition> <block pos:start="135:55" pos:end="167:13">{<block_content pos:start="143:17" pos:end="165:26">

                <comment type="line" pos:start="137:17" pos:end="137:83">// For H.264, the extradata can be returned in two separate buffers</comment>

                <comment type="line" pos:start="139:17" pos:end="139:69">// (the videocore encoder on raspberry pi does this);</comment>

                <comment type="line" pos:start="141:17" pos:end="141:87">// therefore check that we have got both SPS and PPS before continuing.</comment>

                <decl_stmt pos:start="143:17" pos:end="143:37"><decl pos:start="143:17" pos:end="143:36"><type pos:start="143:17" pos:end="143:19"><name pos:start="143:17" pos:end="143:19">int</name></type> <name pos:start="143:21" pos:end="143:28"><name pos:start="143:21" pos:end="143:24">nals</name><index pos:start="143:25" pos:end="143:28">[<expr pos:start="143:26" pos:end="143:27"><literal type="number" pos:start="143:26" pos:end="143:27">32</literal></expr>]</index></name> <init pos:start="143:30" pos:end="143:36">= <expr pos:start="143:32" pos:end="143:36"><block pos:start="143:32" pos:end="143:36">{ <expr pos:start="143:34" pos:end="143:34"><literal type="number" pos:start="143:34" pos:end="143:34">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="145:17" pos:end="145:22"><decl pos:start="145:17" pos:end="145:21"><type pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:19">int</name></type> <name pos:start="145:21" pos:end="145:21">i</name></decl>;</decl_stmt>

                <for pos:start="147:17" pos:end="161:17">for <control pos:start="147:21" pos:end="147:63">(<init pos:start="147:22" pos:end="147:27"><expr pos:start="147:22" pos:end="147:26"><name pos:start="147:22" pos:end="147:22">i</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <literal type="number" pos:start="147:26" pos:end="147:26">0</literal></expr>;</init> <condition pos:start="147:29" pos:end="147:58"><expr pos:start="147:29" pos:end="147:57"><name pos:start="147:29" pos:end="147:29">i</name> <operator pos:start="147:31" pos:end="147:31">+</operator> <literal type="number" pos:start="147:33" pos:end="147:33">4</literal> <operator pos:start="147:35" pos:end="147:35">&lt;</operator> <name pos:start="147:37" pos:end="147:57"><name pos:start="147:37" pos:end="147:41">avctx</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:57">extradata_size</name></name></expr>;</condition> <incr pos:start="147:60" pos:end="147:62"><expr pos:start="147:60" pos:end="147:62"><name pos:start="147:60" pos:end="147:60">i</name><operator pos:start="147:61" pos:end="147:62">++</operator></expr></incr>)</control> <block pos:start="147:65" pos:end="161:17">{<block_content pos:start="149:22" pos:end="159:22">

                     <if_stmt pos:start="149:22" pos:end="159:22"><if pos:start="149:22" pos:end="159:22">if <condition pos:start="149:25" pos:end="155:54">(<expr pos:start="149:26" pos:end="155:53"><operator pos:start="149:26" pos:end="149:26">!</operator><name pos:start="149:27" pos:end="149:49"><name pos:start="149:27" pos:end="149:31">avctx</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:42">extradata</name><index pos:start="149:43" pos:end="149:49">[<expr pos:start="149:44" pos:end="149:48"><name pos:start="149:44" pos:end="149:44">i</name> <operator pos:start="149:46" pos:end="149:46">+</operator> <literal type="number" pos:start="149:48" pos:end="149:48">0</literal></expr>]</index></name> <operator pos:start="149:51" pos:end="149:52">&amp;&amp;</operator>

                         <operator pos:start="151:26" pos:end="151:26">!</operator><name pos:start="151:27" pos:end="151:49"><name pos:start="151:27" pos:end="151:31">avctx</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:42">extradata</name><index pos:start="151:43" pos:end="151:49">[<expr pos:start="151:44" pos:end="151:48"><name pos:start="151:44" pos:end="151:44">i</name> <operator pos:start="151:46" pos:end="151:46">+</operator> <literal type="number" pos:start="151:48" pos:end="151:48">1</literal></expr>]</index></name> <operator pos:start="151:51" pos:end="151:52">&amp;&amp;</operator>

                         <operator pos:start="153:26" pos:end="153:26">!</operator><name pos:start="153:27" pos:end="153:49"><name pos:start="153:27" pos:end="153:31">avctx</name><operator pos:start="153:32" pos:end="153:33">-&gt;</operator><name pos:start="153:34" pos:end="153:42">extradata</name><index pos:start="153:43" pos:end="153:49">[<expr pos:start="153:44" pos:end="153:48"><name pos:start="153:44" pos:end="153:44">i</name> <operator pos:start="153:46" pos:end="153:46">+</operator> <literal type="number" pos:start="153:48" pos:end="153:48">2</literal></expr>]</index></name> <operator pos:start="153:51" pos:end="153:52">&amp;&amp;</operator>

                         <name pos:start="155:26" pos:end="155:48"><name pos:start="155:26" pos:end="155:30">avctx</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:41">extradata</name><index pos:start="155:42" pos:end="155:48">[<expr pos:start="155:43" pos:end="155:47"><name pos:start="155:43" pos:end="155:43">i</name> <operator pos:start="155:45" pos:end="155:45">+</operator> <literal type="number" pos:start="155:47" pos:end="155:47">3</literal></expr>]</index></name> <operator pos:start="155:50" pos:end="155:51">==</operator> <literal type="number" pos:start="155:53" pos:end="155:53">1</literal></expr>)</condition> <block pos:start="155:56" pos:end="159:22">{<block_content pos:start="157:26" pos:end="157:64">

                         <expr_stmt pos:start="157:26" pos:end="157:64"><expr pos:start="157:26" pos:end="157:63"><name pos:start="157:26" pos:end="157:61"><name pos:start="157:26" pos:end="157:29">nals</name><index pos:start="157:30" pos:end="157:61">[<expr pos:start="157:31" pos:end="157:60"><name pos:start="157:31" pos:end="157:53"><name pos:start="157:31" pos:end="157:35">avctx</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:46">extradata</name><index pos:start="157:47" pos:end="157:53">[<expr pos:start="157:48" pos:end="157:52"><name pos:start="157:48" pos:end="157:48">i</name> <operator pos:start="157:50" pos:end="157:50">+</operator> <literal type="number" pos:start="157:52" pos:end="157:52">4</literal></expr>]</index></name> <operator pos:start="157:55" pos:end="157:55">&amp;</operator> <literal type="number" pos:start="157:57" pos:end="157:60">0x1f</literal></expr>]</index></name><operator pos:start="157:62" pos:end="157:63">++</operator></expr>;</expr_stmt>

                     </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="163:17" pos:end="165:26"><if pos:start="163:17" pos:end="165:26">if <condition pos:start="163:20" pos:end="163:51">(<expr pos:start="163:21" pos:end="163:50"><name pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:24">nals</name><index pos:start="163:25" pos:end="163:33">[<expr pos:start="163:26" pos:end="163:32"><name pos:start="163:26" pos:end="163:32">NAL_SPS</name></expr>]</index></name> <operator pos:start="163:35" pos:end="163:36">&amp;&amp;</operator> <name pos:start="163:38" pos:end="163:50"><name pos:start="163:38" pos:end="163:41">nals</name><index pos:start="163:42" pos:end="163:50">[<expr pos:start="163:43" pos:end="163:49"><name pos:start="163:43" pos:end="163:49">NAL_PPS</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="165:21" pos:end="165:26"><block_content pos:start="165:21" pos:end="165:26">

                    <break pos:start="165:21" pos:end="165:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="173:13">else <block pos:start="167:20" pos:end="173:13">{<block_content pos:start="169:17" pos:end="171:26">

                <if_stmt pos:start="169:17" pos:end="171:26"><if pos:start="169:17" pos:end="171:26">if <condition pos:start="169:20" pos:end="169:46">(<expr pos:start="169:21" pos:end="169:45"><name pos:start="169:21" pos:end="169:41"><name pos:start="169:21" pos:end="169:25">avctx</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:41">extradata_size</name></name> <operator pos:start="169:43" pos:end="169:43">&gt;</operator> <literal type="number" pos:start="169:45" pos:end="169:45">0</literal></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:26"><block_content pos:start="171:21" pos:end="171:26">

                    <break pos:start="171:21" pos:end="171:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><literal type="number" pos:start="181:12" pos:end="181:12">0</literal></expr>;</return>

<label pos:start="183:1" pos:end="183:5"><name pos:start="183:1" pos:end="183:4">fail</name>:</label>

    <return pos:start="185:5" pos:end="185:15">return <expr pos:start="185:12" pos:end="185:14"><name pos:start="185:12" pos:end="185:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
