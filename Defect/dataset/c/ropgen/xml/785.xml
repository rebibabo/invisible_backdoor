<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/785.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">get_physical_address</name> <parameter_list pos:start="1:26" pos:end="3:66">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">CPUState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:50">mmu_ctx_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><name pos:start="1:58" pos:end="1:69">target_ulong</name></type> <name pos:start="1:71" pos:end="1:75">eaddr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:32"><decl pos:start="3:27" pos:end="3:32"><type pos:start="3:27" pos:end="3:32"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:32">rw</name></decl></parameter>, <parameter pos:start="3:35" pos:end="3:49"><decl pos:start="3:35" pos:end="3:49"><type pos:start="3:35" pos:end="3:49"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:49">access_type</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:65"><decl pos:start="3:52" pos:end="3:65"><type pos:start="3:52" pos:end="3:65"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:65">check_BATs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:15">

    <decl_stmt pos:start="7:5" pos:end="18:0"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:5"><literal type="number" pos:start="9:5" pos:end="9:5">0</literal></expr></cpp:if>

    if (loglevel != 0) {

        fprintf(logfile, "%s\n", __func__);

    }

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="19:5" pos:end="126:0"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="21:52">(<expr pos:start="19:9" pos:end="21:51"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:20">access_type</name> <operator pos:start="19:22" pos:end="19:23">==</operator> <name pos:start="19:25" pos:end="19:35">ACCESS_CODE</name> <operator pos:start="19:37" pos:end="19:38">&amp;&amp;</operator> <name pos:start="19:40" pos:end="19:45">msr_ir</name> <operator pos:start="19:47" pos:end="19:48">==</operator> <literal type="number" pos:start="19:50" pos:end="19:50">0</literal><operator pos:start="19:51" pos:end="19:51">)</operator> <operator pos:start="19:53" pos:end="19:54">||</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:20">access_type</name> <operator pos:start="21:22" pos:end="21:23">!=</operator> <name pos:start="21:25" pos:end="21:35">ACCESS_CODE</name> <operator pos:start="21:37" pos:end="21:38">&amp;&amp;</operator> <name pos:start="21:40" pos:end="21:45">msr_dr</name> <operator pos:start="21:47" pos:end="21:48">==</operator> <literal type="number" pos:start="21:50" pos:end="21:50">0</literal><operator pos:start="21:51" pos:end="21:51">)</operator></expr>)</condition> <block pos:start="21:54" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:50">

        <comment type="block" pos:start="23:9" pos:end="23:36">/* No address translation */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:50"><expr pos:start="25:9" pos:end="25:49"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:49"><name pos:start="25:15" pos:end="25:28">check_physical</name><argument_list pos:start="25:29" pos:end="25:49">(<argument pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:32">env</name></expr></argument>, <argument pos:start="25:35" pos:end="25:37"><expr pos:start="25:35" pos:end="25:37"><name pos:start="25:35" pos:end="25:37">ctx</name></expr></argument>, <argument pos:start="25:40" pos:end="25:44"><expr pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:44">eaddr</name></expr></argument>, <argument pos:start="25:47" pos:end="25:48"><expr pos:start="25:47" pos:end="25:48"><name pos:start="25:47" pos:end="25:48">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="27:7" pos:end="126:0">else <block pos:start="27:12" pos:end="126:0">{<block_content pos:start="29:9" pos:end="111:9">

        <expr_stmt pos:start="29:9" pos:end="29:17"><expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">-</operator><literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>;</expr_stmt>

        <switch pos:start="31:9" pos:end="111:9">switch <condition pos:start="31:16" pos:end="31:31">(<expr pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:19">env</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:30">mmu_model</name></name></expr>)</condition> <block pos:start="31:33" pos:end="111:9">{<block_content pos:start="33:9" pos:end="109:22">

        <case pos:start="33:9" pos:end="33:29">case <expr pos:start="33:14" pos:end="33:28"><name pos:start="33:14" pos:end="33:28">POWERPC_MMU_32B</name></expr>:</case>

        <case pos:start="35:9" pos:end="35:34">case <expr pos:start="35:14" pos:end="35:33"><name pos:start="35:14" pos:end="35:33">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

        <case pos:start="37:9" pos:end="37:35">case <expr pos:start="37:14" pos:end="37:34"><name pos:start="37:14" pos:end="37:34">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

            <comment type="block" pos:start="39:13" pos:end="39:35">/* Try to find a BAT */</comment>

            <if_stmt pos:start="41:13" pos:end="48:0"><if pos:start="41:13" pos:end="48:0">if <condition pos:start="41:16" pos:end="41:27">(<expr pos:start="41:17" pos:end="41:26"><name pos:start="41:17" pos:end="41:26">check_BATs</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="48:0"><block_content pos:start="43:17" pos:end="48:0">

                <expr_stmt pos:start="43:17" pos:end="48:0"><expr pos:start="43:17" pos:end="43:63"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:63"><name pos:start="43:23" pos:end="43:29">get_bat</name><argument_list pos:start="43:30" pos:end="43:63">(<argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">env</name></expr></argument>, <argument pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><name pos:start="43:36" pos:end="43:38">ctx</name></expr></argument>, <argument pos:start="43:41" pos:end="43:45"><expr pos:start="43:41" pos:end="43:45"><name pos:start="43:41" pos:end="43:45">eaddr</name></expr></argument>, <argument pos:start="43:48" pos:end="43:49"><expr pos:start="43:48" pos:end="43:49"><name pos:start="43:48" pos:end="43:49">rw</name></expr></argument>, <argument pos:start="43:52" pos:end="43:62"><expr pos:start="43:52" pos:end="43:62"><name pos:start="43:52" pos:end="43:62">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="block" pos:start="45:13" pos:end="45:31">/* No break here */</comment>

<cpp:if pos:start="47:1" pos:end="47:25">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:25"><call pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:25">(<argument pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="49:9" pos:end="49:29">case <expr pos:start="49:14" pos:end="49:28"><name pos:start="49:14" pos:end="49:28">POWERPC_MMU_64B</name></expr>:</case>

        <case pos:start="51:9" pos:end="54:0">case <expr pos:start="51:14" pos:end="51:33"><name pos:start="51:14" pos:end="51:33">POWERPC_MMU_64BRIDGE</name></expr>:</case>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:24">(<expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:21">&lt;</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>)</condition> <block pos:start="55:26" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:68">

                <comment type="block" pos:start="57:17" pos:end="57:70">/* We didn't match any BAT entry or don't have BATs */</comment>

                <expr_stmt pos:start="59:17" pos:end="59:68"><expr pos:start="59:17" pos:end="59:67"><name pos:start="59:17" pos:end="59:19">ret</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:67"><name pos:start="59:23" pos:end="59:33">get_segment</name><argument_list pos:start="59:34" pos:end="59:67">(<argument pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><name pos:start="59:35" pos:end="59:37">env</name></expr></argument>, <argument pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><name pos:start="59:40" pos:end="59:42">ctx</name></expr></argument>, <argument pos:start="59:45" pos:end="59:49"><expr pos:start="59:45" pos:end="59:49"><name pos:start="59:45" pos:end="59:49">eaddr</name></expr></argument>, <argument pos:start="59:52" pos:end="59:53"><expr pos:start="59:52" pos:end="59:53"><name pos:start="59:52" pos:end="59:53">rw</name></expr></argument>, <argument pos:start="59:56" pos:end="59:66"><expr pos:start="59:56" pos:end="59:66"><name pos:start="59:56" pos:end="59:66">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:34">case <expr pos:start="65:14" pos:end="65:33"><name pos:start="65:14" pos:end="65:33">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

        <case pos:start="67:9" pos:end="67:36">case <expr pos:start="67:14" pos:end="67:35"><name pos:start="67:14" pos:end="67:35">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="71:63"><expr pos:start="69:13" pos:end="71:62"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="71:62"><name pos:start="69:19" pos:end="69:45">mmu40x_get_physical_address</name><argument_list pos:start="69:46" pos:end="71:62">(<argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:49">env</name></expr></argument>, <argument pos:start="69:52" pos:end="69:54"><expr pos:start="69:52" pos:end="69:54"><name pos:start="69:52" pos:end="69:54">ctx</name></expr></argument>, <argument pos:start="69:57" pos:end="69:61"><expr pos:start="69:57" pos:end="69:61"><name pos:start="69:57" pos:end="69:61">eaddr</name></expr></argument>,

                                              <argument pos:start="71:47" pos:end="71:48"><expr pos:start="71:47" pos:end="71:48"><name pos:start="71:47" pos:end="71:48">rw</name></expr></argument>, <argument pos:start="71:51" pos:end="71:61"><expr pos:start="71:51" pos:end="71:61"><name pos:start="71:51" pos:end="71:61">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:29">case <expr pos:start="75:14" pos:end="75:28"><name pos:start="75:14" pos:end="75:28">POWERPC_MMU_601</name></expr>:</case>

            <comment type="block" pos:start="77:13" pos:end="77:27">/* XXX: TODO */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:62"><expr pos:start="79:13" pos:end="79:61"><call pos:start="79:13" pos:end="79:61"><name pos:start="79:13" pos:end="79:21">cpu_abort</name><argument_list pos:start="79:22" pos:end="79:61">(<argument pos:start="79:23" pos:end="79:25"><expr pos:start="79:23" pos:end="79:25"><name pos:start="79:23" pos:end="79:25">env</name></expr></argument>, <argument pos:start="79:28" pos:end="79:60"><expr pos:start="79:28" pos:end="79:60"><literal type="string" pos:start="79:28" pos:end="79:60">"601 MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        <case pos:start="83:9" pos:end="83:31">case <expr pos:start="83:14" pos:end="83:30"><name pos:start="83:14" pos:end="83:30">POWERPC_MMU_BOOKE</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="87:65"><expr pos:start="85:13" pos:end="87:64"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="87:64"><name pos:start="85:19" pos:end="85:47">mmubooke_get_physical_address</name><argument_list pos:start="85:48" pos:end="87:64">(<argument pos:start="85:49" pos:end="85:51"><expr pos:start="85:49" pos:end="85:51"><name pos:start="85:49" pos:end="85:51">env</name></expr></argument>, <argument pos:start="85:54" pos:end="85:56"><expr pos:start="85:54" pos:end="85:56"><name pos:start="85:54" pos:end="85:56">ctx</name></expr></argument>, <argument pos:start="85:59" pos:end="85:63"><expr pos:start="85:59" pos:end="85:63"><name pos:start="85:59" pos:end="85:63">eaddr</name></expr></argument>,

                                                <argument pos:start="87:49" pos:end="87:50"><expr pos:start="87:49" pos:end="87:50"><name pos:start="87:49" pos:end="87:50">rw</name></expr></argument>, <argument pos:start="87:53" pos:end="87:63"><expr pos:start="87:53" pos:end="87:63"><name pos:start="87:53" pos:end="87:63">access_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:35">case <expr pos:start="91:14" pos:end="91:34"><name pos:start="91:14" pos:end="91:34">POWERPC_MMU_BOOKE_FSL</name></expr>:</case>

            <comment type="block" pos:start="93:13" pos:end="93:27">/* XXX: TODO */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:68"><expr pos:start="95:13" pos:end="95:67"><call pos:start="95:13" pos:end="95:67"><name pos:start="95:13" pos:end="95:21">cpu_abort</name><argument_list pos:start="95:22" pos:end="95:67">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><name pos:start="95:23" pos:end="95:25">env</name></expr></argument>, <argument pos:start="95:28" pos:end="95:66"><expr pos:start="95:28" pos:end="95:66"><literal type="string" pos:start="95:28" pos:end="95:66">"BookE FSL MMU model not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:22">return <expr pos:start="97:20" pos:end="97:21"><operator pos:start="97:20" pos:end="97:20">-</operator><literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</return>

        <case pos:start="99:9" pos:end="99:34">case <expr pos:start="99:14" pos:end="99:33"><name pos:start="99:14" pos:end="99:33">POWERPC_MMU_REAL_4xx</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:72"><expr pos:start="101:13" pos:end="101:71"><call pos:start="101:13" pos:end="101:71"><name pos:start="101:13" pos:end="101:21">cpu_abort</name><argument_list pos:start="101:22" pos:end="101:71">(<argument pos:start="101:23" pos:end="101:25"><expr pos:start="101:23" pos:end="101:25"><name pos:start="101:23" pos:end="101:25">env</name></expr></argument>, <argument pos:start="101:28" pos:end="101:70"><expr pos:start="101:28" pos:end="101:70"><literal type="string" pos:start="101:28" pos:end="101:70">"PowerPC 401 does not do any translation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        <default pos:start="105:9" pos:end="105:16">default:</default>

            <expr_stmt pos:start="107:13" pos:end="107:61"><expr pos:start="107:13" pos:end="107:60"><call pos:start="107:13" pos:end="107:60"><name pos:start="107:13" pos:end="107:21">cpu_abort</name><argument_list pos:start="107:22" pos:end="107:60">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:25">env</name></expr></argument>, <argument pos:start="107:28" pos:end="107:59"><expr pos:start="107:28" pos:end="107:59"><literal type="string" pos:start="107:28" pos:end="107:59">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="115:1" pos:end="115:5">#<cpp:directive pos:start="115:2" pos:end="115:3">if</cpp:directive> <expr pos:start="115:5" pos:end="115:5"><literal type="number" pos:start="115:5" pos:end="115:5">0</literal></expr></cpp:if>

    if (loglevel != 0) {

        fprintf(logfile, "%s address " ADDRX " =&gt; %d " PADDRX "\n",

                __func__, eaddr, ret, ctx-&gt;raddr);

    }

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>



    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
