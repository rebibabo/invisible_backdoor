<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5809.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">IOMMUTLBEntry</name></type> <name pos:start="1:22" pos:end="1:41">s390_translate_iommu</name><parameter_list pos:start="1:42" pos:end="3:56">(<parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:54">MemoryRegion</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">iommu</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:74"><decl pos:start="1:64" pos:end="1:74"><type pos:start="1:64" pos:end="1:74"><name pos:start="1:64" pos:end="1:69">hwaddr</name></type> <name pos:start="1:71" pos:end="1:74">addr</name></decl></parameter>,

                                          <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:46">bool</name></type> <name pos:start="3:48" pos:end="3:55">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">pte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:72"><decl pos:start="11:5" pos:end="11:71"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">S390PCIBusDevice</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">pbdev</name> <init pos:start="11:29" pos:end="11:71">= <expr pos:start="11:31" pos:end="11:71"><call pos:start="11:31" pos:end="11:71"><name pos:start="11:31" pos:end="11:42">container_of</name><argument_list pos:start="11:43" pos:end="11:71">(<argument pos:start="11:44" pos:end="11:48"><expr pos:start="11:44" pos:end="11:48"><name pos:start="11:44" pos:end="11:48">iommu</name></expr></argument>, <argument pos:start="11:51" pos:end="11:66"><expr pos:start="11:51" pos:end="11:66"><name pos:start="11:51" pos:end="11:66">S390PCIBusDevice</name></expr></argument>, <argument pos:start="11:69" pos:end="11:70"><expr pos:start="11:69" pos:end="11:70"><name pos:start="11:69" pos:end="11:70">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">S390pciState</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="27:6"><decl pos:start="15:5" pos:end="27:5"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">IOMMUTLBEntry</name></type> <name pos:start="15:19" pos:end="15:21">ret</name> <init pos:start="15:23" pos:end="27:5">= <expr pos:start="15:25" pos:end="27:5"><block pos:start="15:25" pos:end="27:5">{

        <expr pos:start="17:9" pos:end="17:42"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:18">target_as</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <operator pos:start="17:22" pos:end="17:22">&amp;</operator><name pos:start="17:23" pos:end="17:42">address_space_memory</name></expr>,

        <expr pos:start="19:9" pos:end="19:17"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:13">iova</name> <operator pos:start="19:15" pos:end="19:15">=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>,

        <expr pos:start="21:9" pos:end="21:28"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:24">translated_addr</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>,

        <expr pos:start="23:9" pos:end="23:31"><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:18">addr_mask</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <operator pos:start="23:22" pos:end="23:22">~</operator><operator pos:start="23:23" pos:end="23:23">(</operator><name pos:start="23:24" pos:end="23:29">hwaddr</name><operator pos:start="23:30" pos:end="23:30">)</operator><literal type="number" pos:start="23:31" pos:end="23:31">0</literal></expr>,

        <expr pos:start="25:9" pos:end="25:26"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:13">perm</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:26">IOMMU_NONE</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:43">(<expr pos:start="31:9" pos:end="31:42"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:14">pbdev</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:26">configured</name></name> <operator pos:start="31:28" pos:end="31:29">||</operator> <operator pos:start="31:31" pos:end="31:31">!</operator><name pos:start="31:32" pos:end="31:42"><name pos:start="31:32" pos:end="31:36">pbdev</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:42">pdev</name></name></expr>)</condition> <block pos:start="31:45" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:19">

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><call pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:11">DPRINTF</name><argument_list pos:start="39:12" pos:end="39:53">(<argument pos:start="39:13" pos:end="39:46"><expr pos:start="39:13" pos:end="39:46"><literal type="string" pos:start="39:13" pos:end="39:34">"iommu trans addr 0x%"</literal> <name pos:start="39:36" pos:end="39:41">PRIx64</name> <literal type="string" pos:start="39:43" pos:end="39:46">"\n"</literal></expr></argument>, <argument pos:start="39:49" pos:end="39:52"><expr pos:start="39:49" pos:end="39:52"><name pos:start="39:49" pos:end="39:52">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:76"><expr pos:start="43:5" pos:end="43:75"><name pos:start="43:5" pos:end="43:5">s</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <call pos:start="43:9" pos:end="43:75"><name pos:start="43:9" pos:end="43:28">S390_PCI_HOST_BRIDGE</name><argument_list pos:start="43:29" pos:end="43:75">(<argument pos:start="43:30" pos:end="43:74"><expr pos:start="43:30" pos:end="43:74"><call pos:start="43:30" pos:end="43:61"><name pos:start="43:30" pos:end="43:48">pci_device_root_bus</name><argument_list pos:start="43:49" pos:end="43:61">(<argument pos:start="43:50" pos:end="43:60"><expr pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:60"><name pos:start="43:50" pos:end="43:54">pbdev</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:60">pdev</name></name></expr></argument>)</argument_list></call><operator pos:start="43:62" pos:end="43:63">-&gt;</operator><name pos:start="43:64" pos:end="43:74"><name pos:start="43:64" pos:end="43:67">qbus</name><operator pos:start="43:68" pos:end="43:68">.</operator><name pos:start="43:69" pos:end="43:74">parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="49:7">/* s390 does not have an APIC mapped to main storage so we use

     * a separate AddressSpace only for msix notifications

     */</comment>

    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="65:5">if <condition pos:start="51:8" pos:end="51:30">(<expr pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:12">addr</name> <operator pos:start="51:14" pos:end="51:15">==</operator> <name pos:start="51:17" pos:end="51:29">ZPCI_MSI_ADDR</name></expr>)</condition> <block pos:start="51:32" pos:end="65:5">{<block_content pos:start="53:9" pos:end="63:19">

        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:21">target_as</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <operator pos:start="53:25" pos:end="53:25">&amp;</operator><name pos:start="53:26" pos:end="53:42"><name pos:start="53:26" pos:end="53:26">s</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:42">msix_notify_as</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:11">ret</name><operator pos:start="55:12" pos:end="55:12">.</operator><name pos:start="55:13" pos:end="55:16">iova</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:23">addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:11">ret</name><operator pos:start="57:12" pos:end="57:12">.</operator><name pos:start="57:13" pos:end="57:27">translated_addr</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:34">addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">ret</name><operator pos:start="59:12" pos:end="59:12">.</operator><name pos:start="59:13" pos:end="59:21">addr_mask</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <literal type="number" pos:start="59:25" pos:end="59:29">0xfff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:28"><expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:11">ret</name><operator pos:start="61:12" pos:end="61:12">.</operator><name pos:start="61:13" pos:end="61:16">perm</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:27">IOMMU_RW</name></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:19">return <expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="81:5"><if pos:start="69:5" pos:end="81:5">if <condition pos:start="69:8" pos:end="69:23">(<expr pos:start="69:9" pos:end="69:22"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:22"><name pos:start="69:10" pos:end="69:14">pbdev</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:22">g_iota</name></name></expr>)</condition> <block pos:start="69:25" pos:end="81:5">{<block_content pos:start="71:9" pos:end="79:19">

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:13">pbdev</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:26">error_state</name></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:33">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:13">pbdev</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:28">lgstg_blocked</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:35">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:47"><expr pos:start="75:9" pos:end="77:46"><call pos:start="75:9" pos:end="77:46"><name pos:start="75:9" pos:end="75:37">s390_pci_generate_error_event</name><argument_list pos:start="75:38" pos:end="77:46">(<argument pos:start="75:39" pos:end="75:55"><expr pos:start="75:39" pos:end="75:55"><name pos:start="75:39" pos:end="75:55">ERR_EVENT_INVALAS</name></expr></argument>, <argument pos:start="75:58" pos:end="75:66"><expr pos:start="75:58" pos:end="75:66"><name pos:start="75:58" pos:end="75:66"><name pos:start="75:58" pos:end="75:62">pbdev</name><operator pos:start="75:63" pos:end="75:64">-&gt;</operator><name pos:start="75:65" pos:end="75:66">fh</name></name></expr></argument>, <argument pos:start="75:69" pos:end="75:78"><expr pos:start="75:69" pos:end="75:78"><name pos:start="75:69" pos:end="75:78"><name pos:start="75:69" pos:end="75:73">pbdev</name><operator pos:start="75:74" pos:end="75:75">-&gt;</operator><name pos:start="75:76" pos:end="75:78">fid</name></name></expr></argument>,

                                      <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><name pos:start="77:39" pos:end="77:42">addr</name></expr></argument>, <argument pos:start="77:45" pos:end="77:45"><expr pos:start="77:45" pos:end="77:45"><literal type="number" pos:start="77:45" pos:end="77:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="85:5" pos:end="97:5"><if pos:start="85:5" pos:end="97:5">if <condition pos:start="85:8" pos:end="85:47">(<expr pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:12">addr</name> <argument_list type="generic" pos:start="85:14" pos:end="85:35">&lt; <argument pos:start="85:16" pos:end="85:33"><expr pos:start="85:16" pos:end="85:33"><name pos:start="85:16" pos:end="85:25"><name pos:start="85:16" pos:end="85:20">pbdev</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:25">pba</name></name> <operator pos:start="85:27" pos:end="85:28">||</operator> <name pos:start="85:30" pos:end="85:33">addr</name></expr></argument> &gt;</argument_list></name> <name pos:start="85:37" pos:end="85:46"><name pos:start="85:37" pos:end="85:41">pbdev</name><operator pos:start="85:42" pos:end="85:43">-&gt;</operator><name pos:start="85:44" pos:end="85:46">pal</name></name></expr>)</condition> <block pos:start="85:49" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:19">

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:13">pbdev</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:26">error_state</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:33">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:36"><expr pos:start="89:9" pos:end="89:35"><name pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:13">pbdev</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:28">lgstg_blocked</name></name> <operator pos:start="89:30" pos:end="89:30">=</operator> <name pos:start="89:32" pos:end="89:35">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="93:47"><expr pos:start="91:9" pos:end="93:46"><call pos:start="91:9" pos:end="93:46"><name pos:start="91:9" pos:end="91:37">s390_pci_generate_error_event</name><argument_list pos:start="91:38" pos:end="93:46">(<argument pos:start="91:39" pos:end="91:55"><expr pos:start="91:39" pos:end="91:55"><name pos:start="91:39" pos:end="91:55">ERR_EVENT_OORANGE</name></expr></argument>, <argument pos:start="91:58" pos:end="91:66"><expr pos:start="91:58" pos:end="91:66"><name pos:start="91:58" pos:end="91:66"><name pos:start="91:58" pos:end="91:62">pbdev</name><operator pos:start="91:63" pos:end="91:64">-&gt;</operator><name pos:start="91:65" pos:end="91:66">fh</name></name></expr></argument>, <argument pos:start="91:69" pos:end="91:78"><expr pos:start="91:69" pos:end="91:78"><name pos:start="91:69" pos:end="91:78"><name pos:start="91:69" pos:end="91:73">pbdev</name><operator pos:start="91:74" pos:end="91:75">-&gt;</operator><name pos:start="91:76" pos:end="91:78">fid</name></name></expr></argument>,

                                      <argument pos:start="93:39" pos:end="93:42"><expr pos:start="93:39" pos:end="93:42"><name pos:start="93:39" pos:end="93:42">addr</name></expr></argument>, <argument pos:start="93:45" pos:end="93:45"><expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:19">return <expr pos:start="95:16" pos:end="95:18"><name pos:start="95:16" pos:end="95:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:41"><expr pos:start="101:5" pos:end="103:40"><name pos:start="101:5" pos:end="101:7">pte</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="103:40"><name pos:start="101:11" pos:end="101:34">s390_guest_io_table_walk</name><argument_list pos:start="101:35" pos:end="103:40">(<argument pos:start="101:36" pos:end="101:75"><expr pos:start="101:36" pos:end="101:75"><call pos:start="101:36" pos:end="101:75"><name pos:start="101:36" pos:end="101:60">s390_pci_get_table_origin</name><argument_list pos:start="101:61" pos:end="101:75">(<argument pos:start="101:62" pos:end="101:74"><expr pos:start="101:62" pos:end="101:74"><name pos:start="101:62" pos:end="101:74"><name pos:start="101:62" pos:end="101:66">pbdev</name><operator pos:start="101:67" pos:end="101:68">-&gt;</operator><name pos:start="101:69" pos:end="101:74">g_iota</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="103:36" pos:end="103:39"><expr pos:start="103:36" pos:end="103:39"><name pos:start="103:36" pos:end="103:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="107:5" pos:end="119:5"><if pos:start="107:5" pos:end="119:5">if <condition pos:start="107:8" pos:end="107:13">(<expr pos:start="107:9" pos:end="107:12"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:12">pte</name></expr>)</condition> <block pos:start="107:15" pos:end="119:5">{<block_content pos:start="109:9" pos:end="117:19">

        <expr_stmt pos:start="109:9" pos:end="109:34"><expr pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:13">pbdev</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:26">error_state</name></name> <operator pos:start="109:28" pos:end="109:28">=</operator> <name pos:start="109:30" pos:end="109:33">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:36"><expr pos:start="111:9" pos:end="111:35"><name pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:13">pbdev</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:28">lgstg_blocked</name></name> <operator pos:start="111:30" pos:end="111:30">=</operator> <name pos:start="111:32" pos:end="111:35">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:61"><expr pos:start="113:9" pos:end="115:60"><call pos:start="113:9" pos:end="115:60"><name pos:start="113:9" pos:end="113:37">s390_pci_generate_error_event</name><argument_list pos:start="113:38" pos:end="115:60">(<argument pos:start="113:39" pos:end="113:52"><expr pos:start="113:39" pos:end="113:52"><name pos:start="113:39" pos:end="113:52">ERR_EVENT_SERR</name></expr></argument>, <argument pos:start="113:55" pos:end="113:63"><expr pos:start="113:55" pos:end="113:63"><name pos:start="113:55" pos:end="113:63"><name pos:start="113:55" pos:end="113:59">pbdev</name><operator pos:start="113:60" pos:end="113:61">-&gt;</operator><name pos:start="113:62" pos:end="113:63">fh</name></name></expr></argument>, <argument pos:start="113:66" pos:end="113:75"><expr pos:start="113:66" pos:end="113:75"><name pos:start="113:66" pos:end="113:75"><name pos:start="113:66" pos:end="113:70">pbdev</name><operator pos:start="113:71" pos:end="113:72">-&gt;</operator><name pos:start="113:73" pos:end="113:75">fid</name></name></expr></argument>,

                                      <argument pos:start="115:39" pos:end="115:42"><expr pos:start="115:39" pos:end="115:42"><name pos:start="115:39" pos:end="115:42">addr</name></expr></argument>, <argument pos:start="115:45" pos:end="115:59"><expr pos:start="115:45" pos:end="115:59"><name pos:start="115:45" pos:end="115:59">ERR_EVENT_Q_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:19">return <expr pos:start="117:16" pos:end="117:18"><name pos:start="117:16" pos:end="117:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:9">flags</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <name pos:start="123:13" pos:end="123:15">pte</name> <operator pos:start="123:17" pos:end="123:17">&amp;</operator> <name pos:start="123:19" pos:end="123:36">ZPCI_PTE_FLAG_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:20"><expr pos:start="125:5" pos:end="125:19"><name pos:start="125:5" pos:end="125:12"><name pos:start="125:5" pos:end="125:7">ret</name><operator pos:start="125:8" pos:end="125:8">.</operator><name pos:start="125:9" pos:end="125:12">iova</name></name> <operator pos:start="125:14" pos:end="125:14">=</operator> <name pos:start="125:16" pos:end="125:19">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:51"><expr pos:start="127:5" pos:end="127:50"><name pos:start="127:5" pos:end="127:23"><name pos:start="127:5" pos:end="127:7">ret</name><operator pos:start="127:8" pos:end="127:8">.</operator><name pos:start="127:9" pos:end="127:23">translated_addr</name></name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:29">pte</name> <operator pos:start="127:31" pos:end="127:31">&amp;</operator> <name pos:start="127:33" pos:end="127:50">ZPCI_PTE_ADDR_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:26"><expr pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:7">ret</name><operator pos:start="129:8" pos:end="129:8">.</operator><name pos:start="129:9" pos:end="129:17">addr_mask</name></name> <operator pos:start="129:19" pos:end="129:19">=</operator> <literal type="number" pos:start="129:21" pos:end="129:25">0xfff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:33">(<expr pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:13">flags</name> <operator pos:start="133:15" pos:end="133:15">&amp;</operator> <name pos:start="133:17" pos:end="133:32">ZPCI_PTE_INVALID</name></expr>)</condition> <block pos:start="133:35" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:30">

        <expr_stmt pos:start="135:9" pos:end="135:30"><expr pos:start="135:9" pos:end="135:29"><name pos:start="135:9" pos:end="135:16"><name pos:start="135:9" pos:end="135:11">ret</name><operator pos:start="135:12" pos:end="135:12">.</operator><name pos:start="135:13" pos:end="135:16">perm</name></name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:29">IOMMU_NONE</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="141:5">else <block pos:start="137:12" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:28">

        <expr_stmt pos:start="139:9" pos:end="139:28"><expr pos:start="139:9" pos:end="139:27"><name pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:11">ret</name><operator pos:start="139:12" pos:end="139:12">.</operator><name pos:start="139:13" pos:end="139:16">perm</name></name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:27">IOMMU_RW</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="145:5" pos:end="145:15">return <expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
