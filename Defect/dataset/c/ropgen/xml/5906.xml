<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5906.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vdi_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">QemuOpts</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">opts</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="233:1">{<block_content pos:start="5:5" pos:end="231:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">bytes</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:21">block_size</name> <init pos:start="11:23" pos:end="11:44">= <expr pos:start="11:25" pos:end="11:44"><name pos:start="11:25" pos:end="11:44">DEFAULT_CLUSTER_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:23">image_type</name> <init pos:start="13:25" pos:end="13:42">= <expr pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:42">VDI_TYPE_DYNAMIC</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">VdiHeader</name></type> <name pos:start="15:15" pos:end="15:20">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:20">bmap_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:18">offset</name> <init pos:start="21:20" pos:end="21:22">= <expr pos:start="21:22" pos:end="21:22"><literal type="number" pos:start="21:22" pos:end="21:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">BlockDriverState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:24">bs</name> <init pos:start="25:26" pos:end="25:31">= <expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">uint32_t</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:18">bmap</name> <init pos:start="27:20" pos:end="27:25">= <expr pos:start="27:22" pos:end="27:25"><name pos:start="27:22" pos:end="27:25">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><call pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:10">logout</name><argument_list pos:start="31:11" pos:end="31:16">(<argument pos:start="31:12" pos:end="31:15"><expr pos:start="31:12" pos:end="31:15"><literal type="string" pos:start="31:12" pos:end="31:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:27">/* Read out options. */</comment>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:9">bytes</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:58"><name pos:start="37:13" pos:end="37:33">qemu_opt_get_size_del</name><argument_list pos:start="37:34" pos:end="37:58">(<argument pos:start="37:35" pos:end="37:38"><expr pos:start="37:35" pos:end="37:38"><name pos:start="37:35" pos:end="37:38">opts</name></expr></argument>, <argument pos:start="37:41" pos:end="37:54"><expr pos:start="37:41" pos:end="37:54"><name pos:start="37:41" pos:end="37:54">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="37:57" pos:end="37:57"><expr pos:start="37:57" pos:end="37:57"><literal type="number" pos:start="37:57" pos:end="37:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="39:1" pos:end="39:34">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:34">(<argument pos:start="39:13" pos:end="39:33"><expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:33">CONFIG_VDI_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="41:5" pos:end="41:59">/* TODO: Additional checks (SECTOR_SIZE * 2^n, ...). */</comment>

    <expr_stmt pos:start="43:5" pos:end="52:0"><expr pos:start="43:5" pos:end="47:60"><name pos:start="43:5" pos:end="43:14">block_size</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <call pos:start="43:18" pos:end="47:60"><name pos:start="43:18" pos:end="43:38">qemu_opt_get_size_del</name><argument_list pos:start="43:39" pos:end="47:60">(<argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">opts</name></expr></argument>,

                                       <argument pos:start="45:40" pos:end="45:61"><expr pos:start="45:40" pos:end="45:61"><name pos:start="45:40" pos:end="45:61">BLOCK_OPT_CLUSTER_SIZE</name></expr></argument>,

                                       <argument pos:start="47:40" pos:end="47:59"><expr pos:start="47:40" pos:end="47:59"><name pos:start="47:40" pos:end="47:59">DEFAULT_CLUSTER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="51:1" pos:end="51:36">#<cpp:directive pos:start="51:2" pos:end="51:3">if</cpp:directive> <expr pos:start="51:5" pos:end="51:36"><call pos:start="51:5" pos:end="51:36"><name pos:start="51:5" pos:end="51:11">defined</name><argument_list pos:start="51:12" pos:end="51:36">(<argument pos:start="51:13" pos:end="51:35"><expr pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:35">CONFIG_VDI_STATIC_IMAGE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="53:5" pos:end="60:0"><if pos:start="53:5" pos:end="60:0">if <condition pos:start="53:8" pos:end="53:61">(<expr pos:start="53:9" pos:end="53:60"><call pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:29">qemu_opt_get_bool_del</name><argument_list pos:start="53:30" pos:end="53:60">(<argument pos:start="53:31" pos:end="53:34"><expr pos:start="53:31" pos:end="53:34"><name pos:start="53:31" pos:end="53:34">opts</name></expr></argument>, <argument pos:start="53:37" pos:end="53:52"><expr pos:start="53:37" pos:end="53:52"><name pos:start="53:37" pos:end="53:52">BLOCK_OPT_STATIC</name></expr></argument>, <argument pos:start="53:55" pos:end="53:59"><expr pos:start="53:55" pos:end="53:59"><name pos:start="53:55" pos:end="53:59">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:63" pos:end="60:0">{<block_content pos:start="55:9" pos:end="55:37">

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:18">image_type</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <name pos:start="55:22" pos:end="55:36">VDI_TYPE_STATIC</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="63:5" pos:end="75:5"><if pos:start="63:5" pos:end="75:5">if <condition pos:start="63:8" pos:end="63:34">(<expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:13">bytes</name> <operator pos:start="63:15" pos:end="63:15">&gt;</operator> <name pos:start="63:17" pos:end="63:33">VDI_DISK_SIZE_MAX</name></expr>)</condition> <block pos:start="63:36" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:18">

        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">-</operator><name pos:start="65:16" pos:end="65:22">ENOTSUP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="71:52"><expr pos:start="67:9" pos:end="71:51"><call pos:start="67:9" pos:end="71:51"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="71:51">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="69:61"><expr pos:start="67:26" pos:end="69:61"><literal type="string" pos:start="67:26" pos:end="67:66">"Unsupported VDI image size (size is 0x%"</literal> <name pos:start="67:68" pos:end="67:73">PRIx64</name>

                          <literal type="string" pos:start="69:27" pos:end="69:50">", max supported is 0x%"</literal> <name pos:start="69:52" pos:end="69:57">PRIx64</name> <literal type="string" pos:start="69:59" pos:end="69:61">")"</literal></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:31"><expr pos:start="71:27" pos:end="71:31"><name pos:start="71:27" pos:end="71:31">bytes</name></expr></argument>, <argument pos:start="71:34" pos:end="71:50"><expr pos:start="71:34" pos:end="71:50"><name pos:start="71:34" pos:end="71:50">VDI_DISK_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:55"><expr pos:start="79:5" pos:end="79:54"><name pos:start="79:5" pos:end="79:7">ret</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:54"><name pos:start="79:11" pos:end="79:26">bdrv_create_file</name><argument_list pos:start="79:27" pos:end="79:54">(<argument pos:start="79:28" pos:end="79:35"><expr pos:start="79:28" pos:end="79:35"><name pos:start="79:28" pos:end="79:35">filename</name></expr></argument>, <argument pos:start="79:38" pos:end="79:41"><expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">opts</name></expr></argument>, <argument pos:start="79:44" pos:end="79:53"><expr pos:start="79:44" pos:end="79:53"><operator pos:start="79:44" pos:end="79:44">&amp;</operator><name pos:start="79:45" pos:end="79:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">&lt;</operator> <literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>)</condition> <block pos:start="81:18" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><call pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:23">error_propagate</name><argument_list pos:start="83:24" pos:end="83:40">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><name pos:start="83:25" pos:end="83:28">errp</name></expr></argument>, <argument pos:start="83:31" pos:end="83:39"><expr pos:start="83:31" pos:end="83:39"><name pos:start="83:31" pos:end="83:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:38"><expr pos:start="89:5" pos:end="91:37"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="91:37"><name pos:start="89:11" pos:end="89:19">bdrv_open</name><argument_list pos:start="89:20" pos:end="91:37">(<argument pos:start="89:21" pos:end="89:23"><expr pos:start="89:21" pos:end="89:23"><operator pos:start="89:21" pos:end="89:21">&amp;</operator><name pos:start="89:22" pos:end="89:23">bs</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33">filename</name></expr></argument>, <argument pos:start="89:36" pos:end="89:39"><expr pos:start="89:36" pos:end="89:39"><name pos:start="89:36" pos:end="89:39">NULL</name></expr></argument>, <argument pos:start="89:42" pos:end="89:45"><expr pos:start="89:42" pos:end="89:45"><name pos:start="89:42" pos:end="89:45">NULL</name></expr></argument>, <argument pos:start="89:48" pos:end="89:76"><expr pos:start="89:48" pos:end="89:76"><name pos:start="89:48" pos:end="89:58">BDRV_O_RDWR</name> <operator pos:start="89:60" pos:end="89:60">|</operator> <name pos:start="89:62" pos:end="89:76">BDRV_O_PROTOCOL</name></expr></argument>,

                    <argument pos:start="91:21" pos:end="91:24"><expr pos:start="91:21" pos:end="91:24"><name pos:start="91:21" pos:end="91:24">NULL</name></expr></argument>, <argument pos:start="91:27" pos:end="91:36"><expr pos:start="91:27" pos:end="91:36"><operator pos:start="91:27" pos:end="91:27">&amp;</operator><name pos:start="91:28" pos:end="91:36">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:23">error_propagate</name><argument_list pos:start="95:24" pos:end="95:40">(<argument pos:start="95:25" pos:end="95:28"><expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">errp</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="105:29">/* We need enough blocks to store the given disk size,

       so always round up. */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:51"><expr pos:start="107:5" pos:end="107:50"><name pos:start="107:5" pos:end="107:10">blocks</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <operator pos:start="107:14" pos:end="107:14">(</operator><name pos:start="107:15" pos:end="107:19">bytes</name> <operator pos:start="107:21" pos:end="107:21">+</operator> <name pos:start="107:23" pos:end="107:32">block_size</name> <operator pos:start="107:34" pos:end="107:34">-</operator> <literal type="number" pos:start="107:36" pos:end="107:36">1</literal><operator pos:start="107:37" pos:end="107:37">)</operator> <operator pos:start="107:39" pos:end="107:39">/</operator> <name pos:start="107:41" pos:end="107:50">block_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:42"><expr pos:start="111:5" pos:end="111:41"><name pos:start="111:5" pos:end="111:13">bmap_size</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <name pos:start="111:17" pos:end="111:22">blocks</name> <operator pos:start="111:24" pos:end="111:24">*</operator> <sizeof pos:start="111:26" pos:end="111:41">sizeof<argument_list pos:start="111:32" pos:end="111:41">(<argument pos:start="111:33" pos:end="111:40"><expr pos:start="111:33" pos:end="111:40"><name pos:start="111:33" pos:end="111:40">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:68"><expr pos:start="113:5" pos:end="113:67"><name pos:start="113:5" pos:end="113:13">bmap_size</name> <operator pos:start="113:15" pos:end="113:15">=</operator> <operator pos:start="113:17" pos:end="113:17">(</operator><operator pos:start="113:18" pos:end="113:18">(</operator><name pos:start="113:19" pos:end="113:27">bmap_size</name> <operator pos:start="113:29" pos:end="113:29">+</operator> <name pos:start="113:31" pos:end="113:41">SECTOR_SIZE</name> <operator pos:start="113:43" pos:end="113:43">-</operator> <literal type="number" pos:start="113:45" pos:end="113:45">1</literal><operator pos:start="113:46" pos:end="113:46">)</operator> <operator pos:start="113:48" pos:end="113:48">&amp;</operator> <operator pos:start="113:50" pos:end="113:50">~</operator><operator pos:start="113:51" pos:end="113:51">(</operator><name pos:start="113:52" pos:end="113:62">SECTOR_SIZE</name> <operator pos:start="113:64" pos:end="113:64">-</operator><literal type="number" pos:start="113:65" pos:end="113:65">1</literal><operator pos:start="113:66" pos:end="113:66">)</operator><operator pos:start="113:67" pos:end="113:67">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><call pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:10">memset</name><argument_list pos:start="117:11" pos:end="117:38">(<argument pos:start="117:12" pos:end="117:18"><expr pos:start="117:12" pos:end="117:18"><operator pos:start="117:12" pos:end="117:12">&amp;</operator><name pos:start="117:13" pos:end="117:18">header</name></expr></argument>, <argument pos:start="117:21" pos:end="117:21"><expr pos:start="117:21" pos:end="117:21"><literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr></argument>, <argument pos:start="117:24" pos:end="117:37"><expr pos:start="117:24" pos:end="117:37"><sizeof pos:start="117:24" pos:end="117:37">sizeof<argument_list pos:start="117:30" pos:end="117:37">(<argument pos:start="117:31" pos:end="117:36"><expr pos:start="117:31" pos:end="117:36"><name pos:start="117:31" pos:end="117:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:56"><expr pos:start="119:5" pos:end="119:55"><call pos:start="119:5" pos:end="119:55"><name pos:start="119:5" pos:end="119:11">pstrcpy</name><argument_list pos:start="119:12" pos:end="119:55">(<argument pos:start="119:13" pos:end="119:23"><expr pos:start="119:13" pos:end="119:23"><name pos:start="119:13" pos:end="119:23"><name pos:start="119:13" pos:end="119:18">header</name><operator pos:start="119:19" pos:end="119:19">.</operator><name pos:start="119:20" pos:end="119:23">text</name></name></expr></argument>, <argument pos:start="119:26" pos:end="119:44"><expr pos:start="119:26" pos:end="119:44"><sizeof pos:start="119:26" pos:end="119:44">sizeof<argument_list pos:start="119:32" pos:end="119:44">(<argument pos:start="119:33" pos:end="119:43"><expr pos:start="119:33" pos:end="119:43"><name pos:start="119:33" pos:end="119:43"><name pos:start="119:33" pos:end="119:38">header</name><operator pos:start="119:39" pos:end="119:39">.</operator><name pos:start="119:40" pos:end="119:43">text</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="119:47" pos:end="119:54"><expr pos:start="119:47" pos:end="119:54"><name pos:start="119:47" pos:end="119:54">VDI_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:37"><expr pos:start="121:5" pos:end="121:36"><name pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:10">header</name><operator pos:start="121:11" pos:end="121:11">.</operator><name pos:start="121:12" pos:end="121:20">signature</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:36">VDI_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:18"><name pos:start="123:5" pos:end="123:10">header</name><operator pos:start="123:11" pos:end="123:11">.</operator><name pos:start="123:12" pos:end="123:18">version</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:36">VDI_VERSION_1_1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:31"><expr pos:start="125:5" pos:end="125:30"><name pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:10">header</name><operator pos:start="125:11" pos:end="125:11">.</operator><name pos:start="125:12" pos:end="125:22">header_size</name></name> <operator pos:start="125:24" pos:end="125:24">=</operator> <literal type="number" pos:start="125:26" pos:end="125:30">0x180</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><name pos:start="127:5" pos:end="127:21"><name pos:start="127:5" pos:end="127:10">header</name><operator pos:start="127:11" pos:end="127:11">.</operator><name pos:start="127:12" pos:end="127:21">image_type</name></name> <operator pos:start="127:23" pos:end="127:23">=</operator> <name pos:start="127:25" pos:end="127:34">image_type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:31"><expr pos:start="129:5" pos:end="129:30"><name pos:start="129:5" pos:end="129:22"><name pos:start="129:5" pos:end="129:10">header</name><operator pos:start="129:11" pos:end="129:11">.</operator><name pos:start="129:12" pos:end="129:22">offset_bmap</name></name> <operator pos:start="129:24" pos:end="129:24">=</operator> <literal type="number" pos:start="129:26" pos:end="129:30">0x200</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:22"><name pos:start="131:5" pos:end="131:10">header</name><operator pos:start="131:11" pos:end="131:11">.</operator><name pos:start="131:12" pos:end="131:22">offset_data</name></name> <operator pos:start="131:24" pos:end="131:24">=</operator> <literal type="number" pos:start="131:26" pos:end="131:32">0x200</literal> <operator pos:start="131:32" pos:end="131:32">+</operator> <name pos:start="131:34" pos:end="131:42">bmap_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:37"><expr pos:start="133:5" pos:end="133:36"><name pos:start="133:5" pos:end="133:22"><name pos:start="133:5" pos:end="133:10">header</name><operator pos:start="133:11" pos:end="133:11">.</operator><name pos:start="133:12" pos:end="133:22">sector_size</name></name> <operator pos:start="133:24" pos:end="133:24">=</operator> <name pos:start="133:26" pos:end="133:36">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:29"><expr pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:10">header</name><operator pos:start="135:11" pos:end="135:11">.</operator><name pos:start="135:12" pos:end="135:20">disk_size</name></name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:28">bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:35"><expr pos:start="137:5" pos:end="137:34"><name pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:10">header</name><operator pos:start="137:11" pos:end="137:11">.</operator><name pos:start="137:12" pos:end="137:21">block_size</name></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:34">block_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:36"><expr pos:start="139:5" pos:end="139:35"><name pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:10">header</name><operator pos:start="139:11" pos:end="139:11">.</operator><name pos:start="139:12" pos:end="139:26">blocks_in_image</name></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:35">blocks</name></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="145:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:38">(<expr pos:start="141:9" pos:end="141:37"><name pos:start="141:9" pos:end="141:18">image_type</name> <operator pos:start="141:20" pos:end="141:21">==</operator> <name pos:start="141:23" pos:end="141:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="141:40" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:41">

        <expr_stmt pos:start="143:9" pos:end="143:41"><expr pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:31"><name pos:start="143:9" pos:end="143:14">header</name><operator pos:start="143:15" pos:end="143:15">.</operator><name pos:start="143:16" pos:end="143:31">blocks_allocated</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:40">blocks</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:37"><expr pos:start="147:5" pos:end="147:36"><call pos:start="147:5" pos:end="147:36"><name pos:start="147:5" pos:end="147:17">uuid_generate</name><argument_list pos:start="147:18" pos:end="147:36">(<argument pos:start="147:19" pos:end="147:35"><expr pos:start="147:19" pos:end="147:35"><name pos:start="147:19" pos:end="147:35"><name pos:start="147:19" pos:end="147:24">header</name><operator pos:start="147:25" pos:end="147:25">.</operator><name pos:start="147:26" pos:end="147:35">uuid_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="154:0"><expr pos:start="149:5" pos:end="149:40"><call pos:start="149:5" pos:end="149:40"><name pos:start="149:5" pos:end="149:17">uuid_generate</name><argument_list pos:start="149:18" pos:end="149:40">(<argument pos:start="149:19" pos:end="149:39"><expr pos:start="149:19" pos:end="149:39"><name pos:start="149:19" pos:end="149:39"><name pos:start="149:19" pos:end="149:24">header</name><operator pos:start="149:25" pos:end="149:25">.</operator><name pos:start="149:26" pos:end="149:39">uuid_last_snap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="151:5" pos:end="151:78">/* There is no need to set header.uuid_link or header.uuid_parent here. */</comment>

<cpp:if pos:start="153:1" pos:end="153:29">#<cpp:directive pos:start="153:2" pos:end="153:3">if</cpp:directive> <expr pos:start="153:5" pos:end="153:29"><call pos:start="153:5" pos:end="153:29"><name pos:start="153:5" pos:end="153:11">defined</name><argument_list pos:start="153:12" pos:end="153:29">(<argument pos:start="153:13" pos:end="153:28"><expr pos:start="153:13" pos:end="153:28"><name pos:start="153:13" pos:end="153:28">CONFIG_VDI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="155:5" pos:end="158:0"><expr pos:start="155:5" pos:end="155:29"><call pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:20">vdi_header_print</name><argument_list pos:start="155:21" pos:end="155:29">(<argument pos:start="155:22" pos:end="155:28"><expr pos:start="155:22" pos:end="155:28"><operator pos:start="155:22" pos:end="155:22">&amp;</operator><name pos:start="155:23" pos:end="155:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="159:5" pos:end="159:30"><expr pos:start="159:5" pos:end="159:29"><call pos:start="159:5" pos:end="159:29"><name pos:start="159:5" pos:end="159:20">vdi_header_to_le</name><argument_list pos:start="159:21" pos:end="159:29">(<argument pos:start="159:22" pos:end="159:28"><expr pos:start="159:22" pos:end="159:28"><operator pos:start="159:22" pos:end="159:22">&amp;</operator><name pos:start="159:23" pos:end="159:28">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:64"><expr pos:start="161:5" pos:end="161:63"><name pos:start="161:5" pos:end="161:7">ret</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:63"><name pos:start="161:11" pos:end="161:26">bdrv_pwrite_sync</name><argument_list pos:start="161:27" pos:end="161:63">(<argument pos:start="161:28" pos:end="161:29"><expr pos:start="161:28" pos:end="161:29"><name pos:start="161:28" pos:end="161:29">bs</name></expr></argument>, <argument pos:start="161:32" pos:end="161:37"><expr pos:start="161:32" pos:end="161:37"><name pos:start="161:32" pos:end="161:37">offset</name></expr></argument>, <argument pos:start="161:40" pos:end="161:46"><expr pos:start="161:40" pos:end="161:46"><operator pos:start="161:40" pos:end="161:40">&amp;</operator><name pos:start="161:41" pos:end="161:46">header</name></expr></argument>, <argument pos:start="161:49" pos:end="161:62"><expr pos:start="161:49" pos:end="161:62"><sizeof pos:start="161:49" pos:end="161:62">sizeof<argument_list pos:start="161:55" pos:end="161:62">(<argument pos:start="161:56" pos:end="161:61"><expr pos:start="161:56" pos:end="161:61"><name pos:start="161:56" pos:end="161:61">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:16">(<expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">&lt;</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>)</condition> <block pos:start="163:18" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:18">

        <expr_stmt pos:start="165:9" pos:end="165:65"><expr pos:start="165:9" pos:end="165:64"><call pos:start="165:9" pos:end="165:64"><name pos:start="165:9" pos:end="165:18">error_setg</name><argument_list pos:start="165:19" pos:end="165:64">(<argument pos:start="165:20" pos:end="165:23"><expr pos:start="165:20" pos:end="165:23"><name pos:start="165:20" pos:end="165:23">errp</name></expr></argument>, <argument pos:start="165:26" pos:end="165:53"><expr pos:start="165:26" pos:end="165:53"><literal type="string" pos:start="165:26" pos:end="165:53">"Error writing header to %s"</literal></expr></argument>, <argument pos:start="165:56" pos:end="165:63"><expr pos:start="165:56" pos:end="165:63"><name pos:start="165:56" pos:end="165:63">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:18">goto <name pos:start="167:14" pos:end="167:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:29"><expr pos:start="171:5" pos:end="171:28"><name pos:start="171:5" pos:end="171:10">offset</name> <operator pos:start="171:12" pos:end="171:13">+=</operator> <sizeof pos:start="171:15" pos:end="171:28">sizeof<argument_list pos:start="171:21" pos:end="171:28">(<argument pos:start="171:22" pos:end="171:27"><expr pos:start="171:22" pos:end="171:27"><name pos:start="171:22" pos:end="171:27">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="175:5" pos:end="205:5"><if pos:start="175:5" pos:end="205:5">if <condition pos:start="175:8" pos:end="175:22">(<expr pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:17">bmap_size</name> <operator pos:start="175:19" pos:end="175:19">&gt;</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>)</condition> <block pos:start="175:24" pos:end="205:5">{<block_content pos:start="177:9" pos:end="203:28">

        <expr_stmt pos:start="177:9" pos:end="177:36"><expr pos:start="177:9" pos:end="177:35"><name pos:start="177:9" pos:end="177:12">bmap</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:35"><name pos:start="177:16" pos:end="177:24">g_malloc0</name><argument_list pos:start="177:25" pos:end="177:35">(<argument pos:start="177:26" pos:end="177:34"><expr pos:start="177:26" pos:end="177:34"><name pos:start="177:26" pos:end="177:34">bmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="179:9" pos:end="191:9">for <control pos:start="179:13" pos:end="179:36">(<init pos:start="179:14" pos:end="179:19"><expr pos:start="179:14" pos:end="179:18"><name pos:start="179:14" pos:end="179:14">i</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <literal type="number" pos:start="179:18" pos:end="179:18">0</literal></expr>;</init> <condition pos:start="179:21" pos:end="179:31"><expr pos:start="179:21" pos:end="179:30"><name pos:start="179:21" pos:end="179:21">i</name> <operator pos:start="179:23" pos:end="179:23">&lt;</operator> <name pos:start="179:25" pos:end="179:30">blocks</name></expr>;</condition> <incr pos:start="179:33" pos:end="179:35"><expr pos:start="179:33" pos:end="179:35"><name pos:start="179:33" pos:end="179:33">i</name><operator pos:start="179:34" pos:end="179:35">++</operator></expr></incr>)</control> <block pos:start="179:38" pos:end="191:9">{<block_content pos:start="181:13" pos:end="189:13">

            <if_stmt pos:start="181:13" pos:end="189:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:46">(<expr pos:start="181:17" pos:end="181:45"><name pos:start="181:17" pos:end="181:26">image_type</name> <operator pos:start="181:28" pos:end="181:29">==</operator> <name pos:start="181:31" pos:end="181:45">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="181:48" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:28">

                <expr_stmt pos:start="183:17" pos:end="183:28"><expr pos:start="183:17" pos:end="183:27"><name pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:20">bmap</name><index pos:start="183:21" pos:end="183:23">[<expr pos:start="183:22" pos:end="183:22"><name pos:start="183:22" pos:end="183:22">i</name></expr>]</index></name> <operator pos:start="183:25" pos:end="183:25">=</operator> <name pos:start="183:27" pos:end="183:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:42">

                <expr_stmt pos:start="187:17" pos:end="187:42"><expr pos:start="187:17" pos:end="187:41"><name pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:20">bmap</name><index pos:start="187:21" pos:end="187:23">[<expr pos:start="187:22" pos:end="187:22"><name pos:start="187:22" pos:end="187:22">i</name></expr>]</index></name> <operator pos:start="187:25" pos:end="187:25">=</operator> <name pos:start="187:27" pos:end="187:41">VDI_UNALLOCATED</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="193:9" pos:end="193:60"><expr pos:start="193:9" pos:end="193:59"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="193:59"><name pos:start="193:15" pos:end="193:30">bdrv_pwrite_sync</name><argument_list pos:start="193:31" pos:end="193:59">(<argument pos:start="193:32" pos:end="193:33"><expr pos:start="193:32" pos:end="193:33"><name pos:start="193:32" pos:end="193:33">bs</name></expr></argument>, <argument pos:start="193:36" pos:end="193:41"><expr pos:start="193:36" pos:end="193:41"><name pos:start="193:36" pos:end="193:41">offset</name></expr></argument>, <argument pos:start="193:44" pos:end="193:47"><expr pos:start="193:44" pos:end="193:47"><name pos:start="193:44" pos:end="193:47">bmap</name></expr></argument>, <argument pos:start="193:50" pos:end="193:58"><expr pos:start="193:50" pos:end="193:58"><name pos:start="193:50" pos:end="193:58">bmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:20">(<expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">&lt;</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>)</condition> <block pos:start="195:22" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:22">

            <expr_stmt pos:start="197:13" pos:end="197:67"><expr pos:start="197:13" pos:end="197:66"><call pos:start="197:13" pos:end="197:66"><name pos:start="197:13" pos:end="197:22">error_setg</name><argument_list pos:start="197:23" pos:end="197:66">(<argument pos:start="197:24" pos:end="197:27"><expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">errp</name></expr></argument>, <argument pos:start="197:30" pos:end="197:55"><expr pos:start="197:30" pos:end="197:55"><literal type="string" pos:start="197:30" pos:end="197:55">"Error writing bmap to %s"</literal></expr></argument>, <argument pos:start="197:58" pos:end="197:65"><expr pos:start="197:58" pos:end="197:65"><name pos:start="197:58" pos:end="197:65">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="199:13" pos:end="199:22">goto <name pos:start="199:18" pos:end="199:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:28"><expr pos:start="203:9" pos:end="203:27"><name pos:start="203:9" pos:end="203:14">offset</name> <operator pos:start="203:16" pos:end="203:17">+=</operator> <name pos:start="203:19" pos:end="203:27">bmap_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="209:5" pos:end="221:5"><if pos:start="209:5" pos:end="221:5">if <condition pos:start="209:8" pos:end="209:38">(<expr pos:start="209:9" pos:end="209:37"><name pos:start="209:9" pos:end="209:18">image_type</name> <operator pos:start="209:20" pos:end="209:21">==</operator> <name pos:start="209:23" pos:end="209:37">VDI_TYPE_STATIC</name></expr>)</condition> <block pos:start="209:40" pos:end="221:5">{<block_content pos:start="211:9" pos:end="219:9">

        <expr_stmt pos:start="211:9" pos:end="211:62"><expr pos:start="211:9" pos:end="211:61"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="211:61"><name pos:start="211:15" pos:end="211:27">bdrv_truncate</name><argument_list pos:start="211:28" pos:end="211:61">(<argument pos:start="211:29" pos:end="211:30"><expr pos:start="211:29" pos:end="211:30"><name pos:start="211:29" pos:end="211:30">bs</name></expr></argument>, <argument pos:start="211:33" pos:end="211:60"><expr pos:start="211:33" pos:end="211:60"><name pos:start="211:33" pos:end="211:38">offset</name> <operator pos:start="211:40" pos:end="211:40">+</operator> <name pos:start="211:42" pos:end="211:47">blocks</name> <operator pos:start="211:49" pos:end="211:49">*</operator> <name pos:start="211:51" pos:end="211:60">block_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:20">(<expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:17">&lt;</operator> <literal type="number" pos:start="213:19" pos:end="213:19">0</literal></expr>)</condition> <block pos:start="213:22" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:22">

            <expr_stmt pos:start="215:13" pos:end="215:75"><expr pos:start="215:13" pos:end="215:74"><call pos:start="215:13" pos:end="215:74"><name pos:start="215:13" pos:end="215:22">error_setg</name><argument_list pos:start="215:23" pos:end="215:74">(<argument pos:start="215:24" pos:end="215:27"><expr pos:start="215:24" pos:end="215:27"><name pos:start="215:24" pos:end="215:27">errp</name></expr></argument>, <argument pos:start="215:30" pos:end="215:63"><expr pos:start="215:30" pos:end="215:63"><literal type="string" pos:start="215:30" pos:end="215:63">"Failed to statically allocate %s"</literal></expr></argument>, <argument pos:start="215:66" pos:end="215:73"><expr pos:start="215:66" pos:end="215:73"><name pos:start="215:66" pos:end="215:73">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="217:13" pos:end="217:22">goto <name pos:start="217:18" pos:end="217:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="225:1" pos:end="225:5"><name pos:start="225:1" pos:end="225:4">exit</name>:</label>

    <expr_stmt pos:start="227:5" pos:end="227:19"><expr pos:start="227:5" pos:end="227:18"><call pos:start="227:5" pos:end="227:18"><name pos:start="227:5" pos:end="227:14">bdrv_unref</name><argument_list pos:start="227:15" pos:end="227:18">(<argument pos:start="227:16" pos:end="227:17"><expr pos:start="227:16" pos:end="227:17"><name pos:start="227:16" pos:end="227:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:17"><expr pos:start="229:5" pos:end="229:16"><call pos:start="229:5" pos:end="229:16"><name pos:start="229:5" pos:end="229:10">g_free</name><argument_list pos:start="229:11" pos:end="229:16">(<argument pos:start="229:12" pos:end="229:15"><expr pos:start="229:12" pos:end="229:15"><name pos:start="229:12" pos:end="229:15">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="231:5" pos:end="231:15">return <expr pos:start="231:12" pos:end="231:14"><name pos:start="231:12" pos:end="231:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
