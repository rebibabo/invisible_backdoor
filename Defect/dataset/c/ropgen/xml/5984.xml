<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5984.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">get_pixels_altivec</name><parameter_list pos:start="1:31" pos:end="1:93">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><name pos:start="1:32" pos:end="1:38">int16_t</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier><specifier pos:start="1:41" pos:end="1:48">restrict</specifier></type> <name pos:start="1:50" pos:end="1:54">block</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:77">pixels</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:92"><decl pos:start="1:80" pos:end="1:92"><type pos:start="1:80" pos:end="1:92"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:92">line_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:10">vector</name> <name pos:start="7:12" pos:end="7:19">unsigned</name> <name pos:start="7:21" pos:end="7:24">char</name></type> <name pos:start="7:26" pos:end="7:29">perm</name> <init pos:start="7:31" pos:end="7:51">= <expr pos:start="7:33" pos:end="7:51"><call pos:start="7:33" pos:end="7:51"><name pos:start="7:33" pos:end="7:40">vec_lvsl</name><argument_list pos:start="7:41" pos:end="7:51">(<argument pos:start="7:42" pos:end="7:42"><expr pos:start="7:42" pos:end="7:42"><literal type="number" pos:start="7:42" pos:end="7:42">0</literal></expr></argument>, <argument pos:start="7:45" pos:end="7:50"><expr pos:start="7:45" pos:end="7:50"><name pos:start="7:45" pos:end="7:50">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">vector</name> <name pos:start="9:12" pos:end="9:19">unsigned</name> <name pos:start="9:21" pos:end="9:24">char</name></type> <name pos:start="9:26" pos:end="9:30">bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:82"><decl pos:start="11:5" pos:end="11:81"><type pos:start="11:5" pos:end="11:30"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:16">vector</name> <name pos:start="11:18" pos:end="11:25">unsigned</name> <name pos:start="11:27" pos:end="11:30">char</name></type> <name pos:start="11:32" pos:end="11:35">zero</name> <init pos:start="11:37" pos:end="11:81">= <expr pos:start="11:39" pos:end="11:81"><operator pos:start="11:39" pos:end="11:39">(</operator><specifier pos:start="11:40" pos:end="11:44">const</specifier> <name pos:start="11:46" pos:end="11:51">vector</name> <name pos:start="11:53" pos:end="11:60">unsigned</name> <name pos:start="11:62" pos:end="11:65">char</name><operator pos:start="11:66" pos:end="11:66">)</operator><call pos:start="11:67" pos:end="11:81"><name pos:start="11:67" pos:end="11:78">vec_splat_u8</name><argument_list pos:start="11:79" pos:end="11:81">(<argument pos:start="11:80" pos:end="11:80"><expr pos:start="11:80" pos:end="11:80"><literal type="number" pos:start="11:80" pos:end="11:80">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:10">vector</name> <name pos:start="13:12" pos:end="13:17">signed</name> <name pos:start="13:19" pos:end="13:23">short</name></type> <name pos:start="13:25" pos:end="13:30">shorts</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="47:5">for <control pos:start="17:9" pos:end="17:27">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">8</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:24">i</name><operator pos:start="17:25" pos:end="17:26">++</operator></expr></incr>)</control> <block pos:start="17:29" pos:end="47:5">{<block_content pos:start="25:9" pos:end="45:28">

        <comment type="line" pos:start="19:9" pos:end="19:45">// Read potentially unaligned pixels.</comment>

        <comment type="line" pos:start="21:9" pos:end="21:61">// We're reading 16 pixels, and actually only want 8,</comment>

        <comment type="line" pos:start="23:9" pos:end="23:43">// but we simply ignore the extras.</comment>

        <decl_stmt pos:start="25:9" pos:end="25:55"><decl pos:start="25:9" pos:end="25:54"><type pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:14">vector</name> <name pos:start="25:16" pos:end="25:23">unsigned</name> <name pos:start="25:25" pos:end="25:28">char</name></type> <name pos:start="25:30" pos:end="25:33">pixl</name> <init pos:start="25:35" pos:end="25:54">= <expr pos:start="25:37" pos:end="25:54"><call pos:start="25:37" pos:end="25:54"><name pos:start="25:37" pos:end="25:42">vec_ld</name><argument_list pos:start="25:43" pos:end="25:54">( <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">0</literal></expr></argument>, <argument pos:start="25:48" pos:end="25:53"><expr pos:start="25:48" pos:end="25:53"><name pos:start="25:48" pos:end="25:53">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:55"><decl pos:start="27:9" pos:end="27:54"><type pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:14">vector</name> <name pos:start="27:16" pos:end="27:23">unsigned</name> <name pos:start="27:25" pos:end="27:28">char</name></type> <name pos:start="27:30" pos:end="27:33">pixr</name> <init pos:start="27:35" pos:end="27:54">= <expr pos:start="27:37" pos:end="27:54"><call pos:start="27:37" pos:end="27:54"><name pos:start="27:37" pos:end="27:42">vec_ld</name><argument_list pos:start="27:43" pos:end="27:54">(<argument pos:start="27:44" pos:end="27:45"><expr pos:start="27:44" pos:end="27:45"><literal type="number" pos:start="27:44" pos:end="27:45">15</literal></expr></argument>, <argument pos:start="27:48" pos:end="27:53"><expr pos:start="27:48" pos:end="27:53"><name pos:start="27:48" pos:end="27:53">pixels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:13">bytes</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:42"><name pos:start="29:17" pos:end="29:24">vec_perm</name><argument_list pos:start="29:25" pos:end="29:42">(<argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:29">pixl</name></expr></argument>, <argument pos:start="29:32" pos:end="29:35"><expr pos:start="29:32" pos:end="29:35"><name pos:start="29:32" pos:end="29:35">pixr</name></expr></argument>, <argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><name pos:start="29:38" pos:end="29:41">perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="33:9" pos:end="33:40">// convert the bytes into shorts</comment>

        <expr_stmt pos:start="35:9" pos:end="35:62"><expr pos:start="35:9" pos:end="35:61"><name pos:start="35:9" pos:end="35:14">shorts</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:24">vector</name> <name pos:start="35:26" pos:end="35:31">signed</name> <name pos:start="35:33" pos:end="35:37">short</name><operator pos:start="35:38" pos:end="35:38">)</operator><call pos:start="35:39" pos:end="35:61"><name pos:start="35:39" pos:end="35:48">vec_mergeh</name><argument_list pos:start="35:49" pos:end="35:61">(<argument pos:start="35:50" pos:end="35:53"><expr pos:start="35:50" pos:end="35:53"><name pos:start="35:50" pos:end="35:53">zero</name></expr></argument>, <argument pos:start="35:56" pos:end="35:60"><expr pos:start="35:56" pos:end="35:60"><name pos:start="35:56" pos:end="35:60">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="39:9" pos:end="39:77">// save the data to the block, we assume the block is 16-byte aligned</comment>

        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:14">vec_st</name><argument_list pos:start="41:15" pos:end="41:57">(<argument pos:start="41:16" pos:end="41:21"><expr pos:start="41:16" pos:end="41:21"><name pos:start="41:16" pos:end="41:21">shorts</name></expr></argument>, <argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:24">i</name><operator pos:start="41:25" pos:end="41:25">*</operator><literal type="number" pos:start="41:26" pos:end="41:27">16</literal></expr></argument>, <argument pos:start="41:30" pos:end="41:56"><expr pos:start="41:30" pos:end="41:56"><operator pos:start="41:30" pos:end="41:30">(</operator><name pos:start="41:31" pos:end="41:36">vector</name> <name pos:start="41:38" pos:end="41:43">signed</name> <name pos:start="41:45" pos:end="41:49">short</name><operator pos:start="41:50" pos:end="41:50">*</operator><operator pos:start="41:51" pos:end="41:51">)</operator><name pos:start="41:52" pos:end="41:56">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:28"><expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:14">pixels</name> <operator pos:start="45:16" pos:end="45:17">+=</operator> <name pos:start="45:19" pos:end="45:27">line_size</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
