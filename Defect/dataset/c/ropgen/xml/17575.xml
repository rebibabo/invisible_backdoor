<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17575.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">palmte_init</name><parameter_list pos:start="1:24" pos:end="7:67">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:34">ram_addr_t</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:61">vga_ram_size</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:26">char</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:39">boot_device</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:43"><decl pos:start="5:17" pos:end="5:43"><type pos:start="5:17" pos:end="5:43"><specifier pos:start="5:17" pos:end="5:21">const</specifier> <name pos:start="5:23" pos:end="5:26">char</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:43">kernel_filename</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:71"><decl pos:start="5:46" pos:end="5:71"><type pos:start="5:46" pos:end="5:71"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:55">char</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:71">kernel_cmdline</name></decl></parameter>,

                <parameter pos:start="7:17" pos:end="7:43"><decl pos:start="7:17" pos:end="7:43"><type pos:start="7:17" pos:end="7:43"><specifier pos:start="7:17" pos:end="7:21">const</specifier> <name pos:start="7:23" pos:end="7:26">char</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:43">initrd_filename</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:66"><decl pos:start="7:46" pos:end="7:66"><type pos:start="7:46" pos:end="7:66"><specifier pos:start="7:46" pos:end="7:50">const</specifier> <name pos:start="7:52" pos:end="7:55">char</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:66">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="173:1">{<block_content pos:start="11:5" pos:end="171:19">

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:27">omap_mpu_state_s</name></name> <modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:32">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">flash_size</name> <init pos:start="13:20" pos:end="13:31">= <expr pos:start="13:22" pos:end="13:31"><literal type="number" pos:start="13:22" pos:end="13:31">0x00800000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">sdram_size</name> <init pos:start="15:20" pos:end="15:42">= <expr pos:start="15:22" pos:end="15:42"><name pos:start="15:22" pos:end="15:42"><name pos:start="15:22" pos:end="15:33">palmte_binfo</name><operator pos:start="15:34" pos:end="15:34">.</operator><name pos:start="15:35" pos:end="15:42">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">io</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:40"><decl pos:start="19:5" pos:end="19:39"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:10">static</specifier> <name pos:start="19:12" pos:end="19:19">uint32_t</name></type> <name pos:start="19:21" pos:end="19:26">cs0val</name> <init pos:start="19:28" pos:end="19:39">= <expr pos:start="19:30" pos:end="19:39"><literal type="number" pos:start="19:30" pos:end="19:39">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:19"><specifier pos:start="21:5" pos:end="21:10">static</specifier> <name pos:start="21:12" pos:end="21:19">uint32_t</name></type> <name pos:start="21:21" pos:end="21:26">cs1val</name> <init pos:start="21:28" pos:end="21:39">= <expr pos:start="21:30" pos:end="21:39"><literal type="number" pos:start="21:30" pos:end="21:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:39"><type pos:start="23:5" pos:end="23:19"><specifier pos:start="23:5" pos:end="23:10">static</specifier> <name pos:start="23:12" pos:end="23:19">uint32_t</name></type> <name pos:start="23:21" pos:end="23:26">cs2val</name> <init pos:start="23:28" pos:end="23:39">= <expr pos:start="23:30" pos:end="23:39"><literal type="number" pos:start="23:30" pos:end="23:39">0x0000e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:40"><decl pos:start="25:5" pos:end="25:39"><type pos:start="25:5" pos:end="25:19"><specifier pos:start="25:5" pos:end="25:10">static</specifier> <name pos:start="25:12" pos:end="25:19">uint32_t</name></type> <name pos:start="25:21" pos:end="25:26">cs3val</name> <init pos:start="25:28" pos:end="25:39">= <expr pos:start="25:30" pos:end="25:39"><literal type="number" pos:start="25:30" pos:end="25:39">0xe1a0e1a0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">ram_addr_t</name></type> <name pos:start="27:16" pos:end="27:25">phys_flash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:33"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:16">rom_size</name></decl>, <decl pos:start="29:19" pos:end="29:32"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:19" pos:end="29:28">rom_loaded</name> <init pos:start="29:30" pos:end="29:32">= <expr pos:start="29:32" pos:end="29:32"><literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:42"><decl pos:start="31:5" pos:end="31:41"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">DisplayState</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:20">ds</name> <init pos:start="31:22" pos:end="31:41">= <expr pos:start="31:24" pos:end="31:41"><call pos:start="31:24" pos:end="31:41"><name pos:start="31:24" pos:end="31:39">get_displaystate</name><argument_list pos:start="31:40" pos:end="31:41">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:64">(<expr pos:start="35:9" pos:end="35:63"><name pos:start="35:9" pos:end="35:16">ram_size</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <name pos:start="35:20" pos:end="35:29">flash_size</name> <operator pos:start="35:31" pos:end="35:31">+</operator> <name pos:start="35:33" pos:end="35:42">sdram_size</name> <operator pos:start="35:44" pos:end="35:44">+</operator> <name pos:start="35:46" pos:end="35:63">OMAP15XX_SRAM_SIZE</name></expr>)</condition> <block pos:start="35:66" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:16">

        <expr_stmt pos:start="37:9" pos:end="39:70"><expr pos:start="37:9" pos:end="39:69"><call pos:start="37:9" pos:end="39:69"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="39:69">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:69"><expr pos:start="37:25" pos:end="37:69"><literal type="string" pos:start="37:25" pos:end="37:69">"This architecture uses %i bytes of memory\n"</literal></expr></argument>,

                        <argument pos:start="39:25" pos:end="39:68"><expr pos:start="39:25" pos:end="39:68"><name pos:start="39:25" pos:end="39:34">flash_size</name> <operator pos:start="39:36" pos:end="39:36">+</operator> <name pos:start="39:38" pos:end="39:47">sdram_size</name> <operator pos:start="39:49" pos:end="39:49">+</operator> <name pos:start="39:51" pos:end="39:68">OMAP15XX_SRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><call pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:12">exit</name><argument_list pos:start="41:13" pos:end="41:15">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:50"><expr pos:start="47:5" pos:end="47:49"><name pos:start="47:5" pos:end="47:7">cpu</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:49"><name pos:start="47:11" pos:end="47:26">omap310_mpu_init</name><argument_list pos:start="47:27" pos:end="47:49">(<argument pos:start="47:28" pos:end="47:37"><expr pos:start="47:28" pos:end="47:37"><name pos:start="47:28" pos:end="47:37">sdram_size</name></expr></argument>, <argument pos:start="47:40" pos:end="47:48"><expr pos:start="47:40" pos:end="47:48"><name pos:start="47:40" pos:end="47:48">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:32">/* External Flash (EMIFS) */</comment>

    <expr_stmt pos:start="53:5" pos:end="55:76"><expr pos:start="53:5" pos:end="55:75"><call pos:start="53:5" pos:end="55:75"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="55:75">(<argument pos:start="53:34" pos:end="53:46"><expr pos:start="53:34" pos:end="53:46"><name pos:start="53:34" pos:end="53:46">OMAP_CS0_BASE</name></expr></argument>, <argument pos:start="53:49" pos:end="53:58"><expr pos:start="53:49" pos:end="53:58"><name pos:start="53:49" pos:end="53:58">flash_size</name></expr></argument>,

                    <argument pos:start="55:21" pos:end="55:74"><expr pos:start="55:21" pos:end="55:74"><operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:31">phys_flash</name> <operator pos:start="55:33" pos:end="55:33">=</operator> <call pos:start="55:35" pos:end="55:60"><name pos:start="55:35" pos:end="55:48">qemu_ram_alloc</name><argument_list pos:start="55:49" pos:end="55:60">(<argument pos:start="55:50" pos:end="55:59"><expr pos:start="55:50" pos:end="55:59"><name pos:start="55:50" pos:end="55:59">flash_size</name></expr></argument>)</argument_list></call><operator pos:start="55:61" pos:end="55:61">)</operator> <operator pos:start="55:63" pos:end="55:63">|</operator> <name pos:start="55:65" pos:end="55:74">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:75"><expr pos:start="59:5" pos:end="59:74"><name pos:start="59:5" pos:end="59:6">io</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:74"><name pos:start="59:10" pos:end="59:31">cpu_register_io_memory</name><argument_list pos:start="59:32" pos:end="59:74">(<argument pos:start="59:33" pos:end="59:33"><expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">0</literal></expr></argument>, <argument pos:start="59:36" pos:end="59:48"><expr pos:start="59:36" pos:end="59:48"><name pos:start="59:36" pos:end="59:48">static_readfn</name></expr></argument>, <argument pos:start="59:51" pos:end="59:64"><expr pos:start="59:51" pos:end="59:64"><name pos:start="59:51" pos:end="59:64">static_writefn</name></expr></argument>, <argument pos:start="59:67" pos:end="59:73"><expr pos:start="59:67" pos:end="59:73"><operator pos:start="59:67" pos:end="59:67">&amp;</operator><name pos:start="59:68" pos:end="59:73">cs0val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:52"><expr pos:start="61:5" pos:end="63:51"><call pos:start="61:5" pos:end="63:51"><name pos:start="61:5" pos:end="61:32">cpu_register_physical_memory</name><argument_list pos:start="61:33" pos:end="63:51">(<argument pos:start="61:34" pos:end="61:59"><expr pos:start="61:34" pos:end="61:59"><name pos:start="61:34" pos:end="61:46">OMAP_CS0_BASE</name> <operator pos:start="61:48" pos:end="61:48">+</operator> <name pos:start="61:50" pos:end="61:59">flash_size</name></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:46"><expr pos:start="63:21" pos:end="63:46"><name pos:start="63:21" pos:end="63:33">OMAP_CS0_SIZE</name> <operator pos:start="63:35" pos:end="63:35">-</operator> <name pos:start="63:37" pos:end="63:46">flash_size</name></expr></argument>, <argument pos:start="63:49" pos:end="63:50"><expr pos:start="63:49" pos:end="63:50"><name pos:start="63:49" pos:end="63:50">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:75"><expr pos:start="65:5" pos:end="65:74"><name pos:start="65:5" pos:end="65:6">io</name> <operator pos:start="65:8" pos:end="65:8">=</operator> <call pos:start="65:10" pos:end="65:74"><name pos:start="65:10" pos:end="65:31">cpu_register_io_memory</name><argument_list pos:start="65:32" pos:end="65:74">(<argument pos:start="65:33" pos:end="65:33"><expr pos:start="65:33" pos:end="65:33"><literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr></argument>, <argument pos:start="65:36" pos:end="65:48"><expr pos:start="65:36" pos:end="65:48"><name pos:start="65:36" pos:end="65:48">static_readfn</name></expr></argument>, <argument pos:start="65:51" pos:end="65:64"><expr pos:start="65:51" pos:end="65:64"><name pos:start="65:51" pos:end="65:64">static_writefn</name></expr></argument>, <argument pos:start="65:67" pos:end="65:73"><expr pos:start="65:67" pos:end="65:73"><operator pos:start="65:67" pos:end="65:67">&amp;</operator><name pos:start="65:68" pos:end="65:73">cs1val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:67"><expr pos:start="67:5" pos:end="67:66"><call pos:start="67:5" pos:end="67:66"><name pos:start="67:5" pos:end="67:32">cpu_register_physical_memory</name><argument_list pos:start="67:33" pos:end="67:66">(<argument pos:start="67:34" pos:end="67:46"><expr pos:start="67:34" pos:end="67:46"><name pos:start="67:34" pos:end="67:46">OMAP_CS1_BASE</name></expr></argument>, <argument pos:start="67:49" pos:end="67:61"><expr pos:start="67:49" pos:end="67:61"><name pos:start="67:49" pos:end="67:61">OMAP_CS1_SIZE</name></expr></argument>, <argument pos:start="67:64" pos:end="67:65"><expr pos:start="67:64" pos:end="67:65"><name pos:start="67:64" pos:end="67:65">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:75"><expr pos:start="69:5" pos:end="69:74"><name pos:start="69:5" pos:end="69:6">io</name> <operator pos:start="69:8" pos:end="69:8">=</operator> <call pos:start="69:10" pos:end="69:74"><name pos:start="69:10" pos:end="69:31">cpu_register_io_memory</name><argument_list pos:start="69:32" pos:end="69:74">(<argument pos:start="69:33" pos:end="69:33"><expr pos:start="69:33" pos:end="69:33"><literal type="number" pos:start="69:33" pos:end="69:33">0</literal></expr></argument>, <argument pos:start="69:36" pos:end="69:48"><expr pos:start="69:36" pos:end="69:48"><name pos:start="69:36" pos:end="69:48">static_readfn</name></expr></argument>, <argument pos:start="69:51" pos:end="69:64"><expr pos:start="69:51" pos:end="69:64"><name pos:start="69:51" pos:end="69:64">static_writefn</name></expr></argument>, <argument pos:start="69:67" pos:end="69:73"><expr pos:start="69:67" pos:end="69:73"><operator pos:start="69:67" pos:end="69:67">&amp;</operator><name pos:start="69:68" pos:end="69:73">cs2val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:67"><expr pos:start="71:5" pos:end="71:66"><call pos:start="71:5" pos:end="71:66"><name pos:start="71:5" pos:end="71:32">cpu_register_physical_memory</name><argument_list pos:start="71:33" pos:end="71:66">(<argument pos:start="71:34" pos:end="71:46"><expr pos:start="71:34" pos:end="71:46"><name pos:start="71:34" pos:end="71:46">OMAP_CS2_BASE</name></expr></argument>, <argument pos:start="71:49" pos:end="71:61"><expr pos:start="71:49" pos:end="71:61"><name pos:start="71:49" pos:end="71:61">OMAP_CS2_SIZE</name></expr></argument>, <argument pos:start="71:64" pos:end="71:65"><expr pos:start="71:64" pos:end="71:65"><name pos:start="71:64" pos:end="71:65">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:75"><expr pos:start="73:5" pos:end="73:74"><name pos:start="73:5" pos:end="73:6">io</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:74"><name pos:start="73:10" pos:end="73:31">cpu_register_io_memory</name><argument_list pos:start="73:32" pos:end="73:74">(<argument pos:start="73:33" pos:end="73:33"><expr pos:start="73:33" pos:end="73:33"><literal type="number" pos:start="73:33" pos:end="73:33">0</literal></expr></argument>, <argument pos:start="73:36" pos:end="73:48"><expr pos:start="73:36" pos:end="73:48"><name pos:start="73:36" pos:end="73:48">static_readfn</name></expr></argument>, <argument pos:start="73:51" pos:end="73:64"><expr pos:start="73:51" pos:end="73:64"><name pos:start="73:51" pos:end="73:64">static_writefn</name></expr></argument>, <argument pos:start="73:67" pos:end="73:73"><expr pos:start="73:67" pos:end="73:73"><operator pos:start="73:67" pos:end="73:67">&amp;</operator><name pos:start="73:68" pos:end="73:73">cs3val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:67"><expr pos:start="75:5" pos:end="75:66"><call pos:start="75:5" pos:end="75:66"><name pos:start="75:5" pos:end="75:32">cpu_register_physical_memory</name><argument_list pos:start="75:33" pos:end="75:66">(<argument pos:start="75:34" pos:end="75:46"><expr pos:start="75:34" pos:end="75:46"><name pos:start="75:34" pos:end="75:46">OMAP_CS3_BASE</name></expr></argument>, <argument pos:start="75:49" pos:end="75:61"><expr pos:start="75:49" pos:end="75:61"><name pos:start="75:49" pos:end="75:61">OMAP_CS3_SIZE</name></expr></argument>, <argument pos:start="75:64" pos:end="75:65"><expr pos:start="75:64" pos:end="75:65"><name pos:start="75:64" pos:end="75:65">io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:32"><expr pos:start="79:5" pos:end="79:31"><call pos:start="79:5" pos:end="79:31"><name pos:start="79:5" pos:end="79:26">palmte_microwire_setup</name><argument_list pos:start="79:27" pos:end="79:31">(<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:57"><expr pos:start="83:5" pos:end="83:56"><call pos:start="83:5" pos:end="83:56"><name pos:start="83:5" pos:end="83:30">qemu_add_kbd_event_handler</name><argument_list pos:start="83:31" pos:end="83:56">(<argument pos:start="83:32" pos:end="83:50"><expr pos:start="83:32" pos:end="83:50"><name pos:start="83:32" pos:end="83:50">palmte_button_event</name></expr></argument>, <argument pos:start="83:53" pos:end="83:55"><expr pos:start="83:53" pos:end="83:55"><name pos:start="83:53" pos:end="83:55">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><call pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:21">palmte_gpio_setup</name><argument_list pos:start="87:22" pos:end="87:26">(<argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:45">/* Setup initial (reset) machine state */</comment>

    <if_stmt pos:start="93:5" pos:end="127:5"><if pos:start="93:5" pos:end="127:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:22">nb_option_roms</name></expr>)</condition> <block pos:start="93:25" pos:end="127:5">{<block_content pos:start="95:9" pos:end="125:9">

        <expr_stmt pos:start="95:9" pos:end="95:49"><expr pos:start="95:9" pos:end="95:48"><name pos:start="95:9" pos:end="95:16">rom_size</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:48"><name pos:start="95:20" pos:end="95:33">get_image_size</name><argument_list pos:start="95:34" pos:end="95:48">(<argument pos:start="95:35" pos:end="95:47"><expr pos:start="95:35" pos:end="95:47"><name pos:start="95:35" pos:end="95:47"><name pos:start="95:35" pos:end="95:44">option_rom</name><index pos:start="95:45" pos:end="95:47">[<expr pos:start="95:46" pos:end="95:46"><literal type="number" pos:start="95:46" pos:end="95:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:34">(<expr pos:start="97:13" pos:end="97:33"><name pos:start="97:13" pos:end="97:20">rom_size</name> <operator pos:start="97:22" pos:end="97:22">&gt;</operator> <name pos:start="97:24" pos:end="97:33">flash_size</name></expr>)</condition> <block pos:start="97:36" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:25">

            <expr_stmt pos:start="99:13" pos:end="101:64"><expr pos:start="99:13" pos:end="101:63"><call pos:start="99:13" pos:end="101:63"><name pos:start="99:13" pos:end="99:19">fprintf</name><argument_list pos:start="99:20" pos:end="101:63">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">stderr</name></expr></argument>, <argument pos:start="99:29" pos:end="99:63"><expr pos:start="99:29" pos:end="99:63"><literal type="string" pos:start="99:29" pos:end="99:63">"%s: ROM image too big (%x &gt; %x)\n"</literal></expr></argument>,

                            <argument pos:start="101:29" pos:end="101:40"><expr pos:start="101:29" pos:end="101:40"><name pos:start="101:29" pos:end="101:40">__FUNCTION__</name></expr></argument>, <argument pos:start="101:43" pos:end="101:50"><expr pos:start="101:43" pos:end="101:50"><name pos:start="101:43" pos:end="101:50">rom_size</name></expr></argument>, <argument pos:start="101:53" pos:end="101:62"><expr pos:start="101:53" pos:end="101:62"><name pos:start="101:53" pos:end="101:62">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:25"><expr pos:start="103:13" pos:end="103:24"><name pos:start="103:13" pos:end="103:20">rom_size</name> <operator pos:start="103:22" pos:end="103:22">=</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="117:9"><if pos:start="107:9" pos:end="117:9">if <condition pos:start="107:12" pos:end="107:25">(<expr pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:20">rom_size</name> <operator pos:start="107:22" pos:end="107:22">&gt;</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>)</condition> <block pos:start="107:27" pos:end="117:9">{<block_content pos:start="109:13" pos:end="115:44">

            <expr_stmt pos:start="109:13" pos:end="111:55"><expr pos:start="109:13" pos:end="111:54"><name pos:start="109:13" pos:end="109:20">rom_size</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="111:54"><name pos:start="109:24" pos:end="109:42">load_image_targphys</name><argument_list pos:start="109:43" pos:end="111:54">(<argument pos:start="109:44" pos:end="109:56"><expr pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:56"><name pos:start="109:44" pos:end="109:53">option_rom</name><index pos:start="109:54" pos:end="109:56">[<expr pos:start="109:55" pos:end="109:55"><literal type="number" pos:start="109:55" pos:end="109:55">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:59" pos:end="109:71"><expr pos:start="109:59" pos:end="109:71"><name pos:start="109:59" pos:end="109:71">OMAP_CS0_BASE</name></expr></argument>,

                                           <argument pos:start="111:44" pos:end="111:53"><expr pos:start="111:44" pos:end="111:53"><name pos:start="111:44" pos:end="111:53">flash_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:27"><expr pos:start="113:13" pos:end="113:26"><name pos:start="113:13" pos:end="113:22">rom_loaded</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:44"><expr pos:start="115:13" pos:end="115:43"><name pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:15">cpu</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:20">env</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:26">regs</name><index pos:start="115:27" pos:end="115:30">[<expr pos:start="115:28" pos:end="115:29"><literal type="number" pos:start="115:28" pos:end="115:29">15</literal></expr>]</index></name> <operator pos:start="115:32" pos:end="115:32">=</operator> <literal type="number" pos:start="115:34" pos:end="115:43">0x00000000</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:25">(<expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:20">rom_size</name> <operator pos:start="119:22" pos:end="119:22">&lt;</operator> <literal type="number" pos:start="119:24" pos:end="119:24">0</literal></expr>)</condition> <block pos:start="119:27" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:57">

            <expr_stmt pos:start="121:13" pos:end="123:57"><expr pos:start="121:13" pos:end="123:56"><call pos:start="121:13" pos:end="123:56"><name pos:start="121:13" pos:end="121:19">fprintf</name><argument_list pos:start="121:20" pos:end="123:56">(<argument pos:start="121:21" pos:end="121:26"><expr pos:start="121:21" pos:end="121:26"><name pos:start="121:21" pos:end="121:26">stderr</name></expr></argument>, <argument pos:start="121:29" pos:end="121:54"><expr pos:start="121:29" pos:end="121:54"><literal type="string" pos:start="121:29" pos:end="121:54">"%s: error loading '%s'\n"</literal></expr></argument>,

                            <argument pos:start="123:29" pos:end="123:40"><expr pos:start="123:29" pos:end="123:40"><name pos:start="123:29" pos:end="123:40">__FUNCTION__</name></expr></argument>, <argument pos:start="123:43" pos:end="123:55"><expr pos:start="123:43" pos:end="123:55"><name pos:start="123:43" pos:end="123:55"><name pos:start="123:43" pos:end="123:52">option_rom</name><index pos:start="123:53" pos:end="123:55">[<expr pos:start="123:54" pos:end="123:54"><literal type="number" pos:start="123:54" pos:end="123:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:40">(<expr pos:start="131:9" pos:end="131:39"><operator pos:start="131:9" pos:end="131:9">!</operator><name pos:start="131:10" pos:end="131:19">rom_loaded</name> <operator pos:start="131:21" pos:end="131:22">&amp;&amp;</operator> <operator pos:start="131:24" pos:end="131:24">!</operator><name pos:start="131:25" pos:end="131:39">kernel_filename</name></expr>)</condition> <block pos:start="131:42" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:16">

        <expr_stmt pos:start="133:9" pos:end="133:67"><expr pos:start="133:9" pos:end="133:66"><call pos:start="133:9" pos:end="133:66"><name pos:start="133:9" pos:end="133:15">fprintf</name><argument_list pos:start="133:16" pos:end="133:66">(<argument pos:start="133:17" pos:end="133:22"><expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:22">stderr</name></expr></argument>, <argument pos:start="133:25" pos:end="133:65"><expr pos:start="133:25" pos:end="133:65"><literal type="string" pos:start="133:25" pos:end="133:65">"Kernel or ROM image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:16"><expr pos:start="135:9" pos:end="135:15"><call pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:12">exit</name><argument_list pos:start="135:13" pos:end="135:15">(<argument pos:start="135:14" pos:end="135:14"><expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:27">/* Load the kernel.  */</comment>

    <if_stmt pos:start="143:5" pos:end="159:5"><if pos:start="143:5" pos:end="159:5">if <condition pos:start="143:8" pos:end="143:24">(<expr pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:23">kernel_filename</name></expr>)</condition> <block pos:start="143:26" pos:end="159:5">{<block_content pos:start="147:9" pos:end="157:49">

        <comment type="block" pos:start="145:9" pos:end="145:35">/* Start at bootloader.  */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:55"><expr pos:start="147:9" pos:end="147:54"><name pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:11">cpu</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:16">env</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:22">regs</name><index pos:start="147:23" pos:end="147:26">[<expr pos:start="147:24" pos:end="147:25"><literal type="number" pos:start="147:24" pos:end="147:25">15</literal></expr>]</index></name> <operator pos:start="147:28" pos:end="147:28">=</operator> <name pos:start="147:30" pos:end="147:54"><name pos:start="147:30" pos:end="147:41">palmte_binfo</name><operator pos:start="147:42" pos:end="147:42">.</operator><name pos:start="147:43" pos:end="147:54">loader_start</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:55"><expr pos:start="151:9" pos:end="151:54"><name pos:start="151:9" pos:end="151:36"><name pos:start="151:9" pos:end="151:20">palmte_binfo</name><operator pos:start="151:21" pos:end="151:21">.</operator><name pos:start="151:22" pos:end="151:36">kernel_filename</name></name> <operator pos:start="151:38" pos:end="151:38">=</operator> <name pos:start="151:40" pos:end="151:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:53"><expr pos:start="153:9" pos:end="153:52"><name pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:20">palmte_binfo</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:35">kernel_cmdline</name></name> <operator pos:start="153:37" pos:end="153:37">=</operator> <name pos:start="153:39" pos:end="153:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:55"><expr pos:start="155:9" pos:end="155:54"><name pos:start="155:9" pos:end="155:36"><name pos:start="155:9" pos:end="155:20">palmte_binfo</name><operator pos:start="155:21" pos:end="155:21">.</operator><name pos:start="155:22" pos:end="155:36">initrd_filename</name></name> <operator pos:start="155:38" pos:end="155:38">=</operator> <name pos:start="155:40" pos:end="155:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:49"><expr pos:start="157:9" pos:end="157:48"><call pos:start="157:9" pos:end="157:48"><name pos:start="157:9" pos:end="157:23">arm_load_kernel</name><argument_list pos:start="157:24" pos:end="157:48">(<argument pos:start="157:25" pos:end="157:32"><expr pos:start="157:25" pos:end="157:32"><name pos:start="157:25" pos:end="157:32"><name pos:start="157:25" pos:end="157:27">cpu</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:32">env</name></name></expr></argument>, <argument pos:start="157:35" pos:end="157:47"><expr pos:start="157:35" pos:end="157:47"><operator pos:start="157:35" pos:end="157:35">&amp;</operator><name pos:start="157:36" pos:end="157:47">palmte_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="167:54">/* FIXME: We shouldn't really be doing this here.  The LCD controller

       will set the size once configured, so this just sets an initial

       size until the guest activates the display.  */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:59"><expr pos:start="169:5" pos:end="169:58"><name pos:start="169:5" pos:end="169:15"><name pos:start="169:5" pos:end="169:6">ds</name><operator pos:start="169:7" pos:end="169:8">-&gt;</operator><name pos:start="169:9" pos:end="169:15">surface</name></name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:58"><name pos:start="169:19" pos:end="169:44">qemu_resize_displaysurface</name><argument_list pos:start="169:45" pos:end="169:58">(<argument pos:start="169:46" pos:end="169:47"><expr pos:start="169:46" pos:end="169:47"><name pos:start="169:46" pos:end="169:47">ds</name></expr></argument>, <argument pos:start="169:50" pos:end="169:52"><expr pos:start="169:50" pos:end="169:52"><literal type="number" pos:start="169:50" pos:end="169:52">320</literal></expr></argument>, <argument pos:start="169:55" pos:end="169:57"><expr pos:start="169:55" pos:end="169:57"><literal type="number" pos:start="169:55" pos:end="169:57">320</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:19"><expr pos:start="171:5" pos:end="171:18"><call pos:start="171:5" pos:end="171:18"><name pos:start="171:5" pos:end="171:14">dpy_resize</name><argument_list pos:start="171:15" pos:end="171:18">(<argument pos:start="171:16" pos:end="171:17"><expr pos:start="171:16" pos:end="171:17"><name pos:start="171:16" pos:end="171:17">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
