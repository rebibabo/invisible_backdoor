<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13581.c" pos:tabs="8"><function pos:start="1:1" pos:end="579:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">assigned_device_pci_cap_init</name><parameter_list pos:start="1:40" pos:end="1:73">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><name pos:start="1:41" pos:end="1:49">PCIDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">pci_dev</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="579:1">{<block_content pos:start="5:5" pos:end="577:13">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AssignedDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:45">= <expr pos:start="5:27" pos:end="5:45"><call pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:36">PCI_ASSIGN</name><argument_list pos:start="5:37" pos:end="5:45">(<argument pos:start="5:38" pos:end="5:44"><expr pos:start="5:38" pos:end="5:44"><name pos:start="5:38" pos:end="5:44">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIRegion</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:25">pci_region</name> <init pos:start="7:27" pos:end="7:52">= <expr pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:31">dev</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:44">real_device</name><operator pos:start="7:45" pos:end="7:45">.</operator><name pos:start="7:46" pos:end="7:52">regions</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">pos</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:70">/* Clear initial capabilities pointer and status copied from hw */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><call pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:16">pci_set_byte</name><argument_list pos:start="15:17" pos:end="15:58">(<argument pos:start="15:18" pos:end="15:54"><expr pos:start="15:18" pos:end="15:54"><name pos:start="15:18" pos:end="15:32"><name pos:start="15:18" pos:end="15:24">pci_dev</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:32">config</name></name> <operator pos:start="15:34" pos:end="15:34">+</operator> <name pos:start="15:36" pos:end="15:54">PCI_CAPABILITY_LIST</name></expr></argument>, <argument pos:start="15:57" pos:end="15:57"><expr pos:start="15:57" pos:end="15:57"><literal type="number" pos:start="15:57" pos:end="15:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="21:39"><expr pos:start="17:5" pos:end="21:38"><call pos:start="17:5" pos:end="21:38"><name pos:start="17:5" pos:end="17:16">pci_set_word</name><argument_list pos:start="17:17" pos:end="21:38">(<argument pos:start="17:18" pos:end="17:45"><expr pos:start="17:18" pos:end="17:45"><name pos:start="17:18" pos:end="17:32"><name pos:start="17:18" pos:end="17:24">pci_dev</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:32">config</name></name> <operator pos:start="17:34" pos:end="17:34">+</operator> <name pos:start="17:36" pos:end="17:45">PCI_STATUS</name></expr></argument>,

                 <argument pos:start="19:18" pos:end="21:37"><expr pos:start="19:18" pos:end="21:37"><call pos:start="19:18" pos:end="19:59"><name pos:start="19:18" pos:end="19:29">pci_get_word</name><argument_list pos:start="19:30" pos:end="19:59">(<argument pos:start="19:31" pos:end="19:58"><expr pos:start="19:31" pos:end="19:58"><name pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:37">pci_dev</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:45">config</name></name> <operator pos:start="19:47" pos:end="19:47">+</operator> <name pos:start="19:49" pos:end="19:58">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="19:61" pos:end="19:61">&amp;</operator>

                 <operator pos:start="21:18" pos:end="21:18">~</operator><name pos:start="21:19" pos:end="21:37">PCI_STATUS_CAP_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:67">/* Expose MSI capability

     * MSI capability is the 1st capability in capability config */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:58"><expr pos:start="29:5" pos:end="29:57"><name pos:start="29:5" pos:end="29:7">pos</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:57"><name pos:start="29:11" pos:end="29:29">pci_find_cap_offset</name><argument_list pos:start="29:30" pos:end="29:57">(<argument pos:start="29:31" pos:end="29:37"><expr pos:start="29:31" pos:end="29:37"><name pos:start="29:31" pos:end="29:37">pci_dev</name></expr></argument>, <argument pos:start="29:40" pos:end="29:53"><expr pos:start="29:40" pos:end="29:53"><name pos:start="29:40" pos:end="29:53">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><literal type="number" pos:start="29:56" pos:end="29:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="81:5"><if pos:start="31:5" pos:end="81:5">if <condition pos:start="31:8" pos:end="31:75">(<expr pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:11">pos</name> <operator pos:start="31:13" pos:end="31:14">!=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal> <operator pos:start="31:18" pos:end="31:19">&amp;&amp;</operator> <call pos:start="31:21" pos:end="31:74"><name pos:start="31:21" pos:end="31:39">kvm_check_extension</name><argument_list pos:start="31:40" pos:end="31:74">(<argument pos:start="31:41" pos:end="31:49"><expr pos:start="31:41" pos:end="31:49"><name pos:start="31:41" pos:end="31:49">kvm_state</name></expr></argument>, <argument pos:start="31:52" pos:end="31:73"><expr pos:start="31:52" pos:end="31:73"><name pos:start="31:52" pos:end="31:73">KVM_CAP_ASSIGN_DEV_IRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:77" pos:end="81:5">{<block_content pos:start="33:9" pos:end="79:69">

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:47">(<expr pos:start="33:13" pos:end="33:46"><call pos:start="33:13" pos:end="33:42"><name pos:start="33:13" pos:end="33:36">verify_irqchip_in_kernel</name><argument_list pos:start="33:37" pos:end="33:42">(<argument pos:start="33:38" pos:end="33:41"><expr pos:start="33:38" pos:end="33:41"><name pos:start="33:38" pos:end="33:41">errp</name></expr></argument>)</argument_list></call> <operator pos:start="33:44" pos:end="33:44">&lt;</operator> <literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr>)</condition> <block pos:start="33:49" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:28">

            <return pos:start="35:13" pos:end="35:28">return <expr pos:start="35:20" pos:end="35:27"><operator pos:start="35:20" pos:end="35:20">-</operator><name pos:start="35:21" pos:end="35:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:11">dev</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:16">dev</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:28">cap_present</name></name> <operator pos:start="39:30" pos:end="39:31">|=</operator> <name pos:start="39:33" pos:end="39:48">QEMU_PCI_CAP_MSI</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:54"><expr pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:11">dev</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:16">cap</name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:26">available</name></name> <operator pos:start="41:28" pos:end="41:29">|=</operator> <name pos:start="41:31" pos:end="41:53">ASSIGNED_DEVICE_CAP_MSI</name></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:53">/* Only 32-bit/no-mask currently supported */</comment>

        <expr_stmt pos:start="45:9" pos:end="47:40"><expr pos:start="45:9" pos:end="47:39"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="47:39"><name pos:start="45:15" pos:end="45:32">pci_add_capability</name><argument_list pos:start="45:33" pos:end="47:39">(<argument pos:start="45:34" pos:end="45:40"><expr pos:start="45:34" pos:end="45:40"><name pos:start="45:34" pos:end="45:40">pci_dev</name></expr></argument>, <argument pos:start="45:43" pos:end="45:56"><expr pos:start="45:43" pos:end="45:56"><name pos:start="45:43" pos:end="45:56">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="45:59" pos:end="45:61"><expr pos:start="45:59" pos:end="45:61"><name pos:start="45:59" pos:end="45:61">pos</name></expr></argument>, <argument pos:start="45:64" pos:end="45:65"><expr pos:start="45:64" pos:end="45:65"><literal type="number" pos:start="45:64" pos:end="45:65">10</literal></expr></argument>,

                                  <argument pos:start="47:35" pos:end="47:38"><expr pos:start="47:35" pos:end="47:38"><name pos:start="47:35" pos:end="47:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:20">(<expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition> <block pos:start="49:22" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:23">

            <return pos:start="51:13" pos:end="51:23">return <expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:15">pci_dev</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:24">msi_cap</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:30">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="63:42"><expr pos:start="59:9" pos:end="63:41"><call pos:start="59:9" pos:end="63:41"><name pos:start="59:9" pos:end="59:20">pci_set_word</name><argument_list pos:start="59:21" pos:end="63:41">(<argument pos:start="59:22" pos:end="59:58"><expr pos:start="59:22" pos:end="59:58"><name pos:start="59:22" pos:end="59:36"><name pos:start="59:22" pos:end="59:28">pci_dev</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:36">config</name></name> <operator pos:start="59:38" pos:end="59:38">+</operator> <name pos:start="59:40" pos:end="59:42">pos</name> <operator pos:start="59:44" pos:end="59:44">+</operator> <name pos:start="59:46" pos:end="59:58">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="61:22" pos:end="63:40"><expr pos:start="61:22" pos:end="63:40"><call pos:start="61:22" pos:end="61:72"><name pos:start="61:22" pos:end="61:33">pci_get_word</name><argument_list pos:start="61:34" pos:end="61:72">(<argument pos:start="61:35" pos:end="61:71"><expr pos:start="61:35" pos:end="61:71"><name pos:start="61:35" pos:end="61:49"><name pos:start="61:35" pos:end="61:41">pci_dev</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:49">config</name></name> <operator pos:start="61:51" pos:end="61:51">+</operator> <name pos:start="61:53" pos:end="61:55">pos</name> <operator pos:start="61:57" pos:end="61:57">+</operator> <name pos:start="61:59" pos:end="61:71">PCI_MSI_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="61:74" pos:end="61:74">&amp;</operator>

                     <name pos:start="63:22" pos:end="63:40">PCI_MSI_FLAGS_QMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:68"><expr pos:start="65:9" pos:end="65:67"><call pos:start="65:9" pos:end="65:67"><name pos:start="65:9" pos:end="65:20">pci_set_long</name><argument_list pos:start="65:21" pos:end="65:67">(<argument pos:start="65:22" pos:end="65:63"><expr pos:start="65:22" pos:end="65:63"><name pos:start="65:22" pos:end="65:36"><name pos:start="65:22" pos:end="65:28">pci_dev</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:36">config</name></name> <operator pos:start="65:38" pos:end="65:38">+</operator> <name pos:start="65:40" pos:end="65:42">pos</name> <operator pos:start="65:44" pos:end="65:44">+</operator> <name pos:start="65:46" pos:end="65:63">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="65:66" pos:end="65:66"><expr pos:start="65:66" pos:end="65:66"><literal type="number" pos:start="65:66" pos:end="65:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><call pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:20">pci_set_word</name><argument_list pos:start="67:21" pos:end="67:64">(<argument pos:start="67:22" pos:end="67:60"><expr pos:start="67:22" pos:end="67:60"><name pos:start="67:22" pos:end="67:36"><name pos:start="67:22" pos:end="67:28">pci_dev</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:36">config</name></name> <operator pos:start="67:38" pos:end="67:38">+</operator> <name pos:start="67:40" pos:end="67:42">pos</name> <operator pos:start="67:44" pos:end="67:44">+</operator> <name pos:start="67:46" pos:end="67:60">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="67:63" pos:end="67:63"><expr pos:start="67:63" pos:end="67:63"><literal type="number" pos:start="67:63" pos:end="67:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="71:9" pos:end="71:33">/* Set writable fields */</comment>

        <expr_stmt pos:start="73:9" pos:end="75:65"><expr pos:start="73:9" pos:end="75:64"><call pos:start="73:9" pos:end="75:64"><name pos:start="73:9" pos:end="73:20">pci_set_word</name><argument_list pos:start="73:21" pos:end="75:64">(<argument pos:start="73:22" pos:end="73:57"><expr pos:start="73:22" pos:end="73:57"><name pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:28">pci_dev</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:35">wmask</name></name> <operator pos:start="73:37" pos:end="73:37">+</operator> <name pos:start="73:39" pos:end="73:41">pos</name> <operator pos:start="73:43" pos:end="73:43">+</operator> <name pos:start="73:45" pos:end="73:57">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:63"><expr pos:start="75:22" pos:end="75:63"><name pos:start="75:22" pos:end="75:40">PCI_MSI_FLAGS_QSIZE</name> <operator pos:start="75:42" pos:end="75:42">|</operator> <name pos:start="75:44" pos:end="75:63">PCI_MSI_FLAGS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:76"><expr pos:start="77:9" pos:end="77:75"><call pos:start="77:9" pos:end="77:75"><name pos:start="77:9" pos:end="77:20">pci_set_long</name><argument_list pos:start="77:21" pos:end="77:75">(<argument pos:start="77:22" pos:end="77:62"><expr pos:start="77:22" pos:end="77:62"><name pos:start="77:22" pos:end="77:35"><name pos:start="77:22" pos:end="77:28">pci_dev</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:35">wmask</name></name> <operator pos:start="77:37" pos:end="77:37">+</operator> <name pos:start="77:39" pos:end="77:41">pos</name> <operator pos:start="77:43" pos:end="77:43">+</operator> <name pos:start="77:45" pos:end="77:62">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="77:65" pos:end="77:74"><expr pos:start="77:65" pos:end="77:74"><literal type="number" pos:start="77:65" pos:end="77:74">0xfffffffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:69"><expr pos:start="79:9" pos:end="79:68"><call pos:start="79:9" pos:end="79:68"><name pos:start="79:9" pos:end="79:20">pci_set_word</name><argument_list pos:start="79:21" pos:end="79:68">(<argument pos:start="79:22" pos:end="79:59"><expr pos:start="79:22" pos:end="79:59"><name pos:start="79:22" pos:end="79:35"><name pos:start="79:22" pos:end="79:28">pci_dev</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">wmask</name></name> <operator pos:start="79:37" pos:end="79:37">+</operator> <name pos:start="79:39" pos:end="79:41">pos</name> <operator pos:start="79:43" pos:end="79:43">+</operator> <name pos:start="79:45" pos:end="79:59">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="79:62" pos:end="79:67"><expr pos:start="79:62" pos:end="79:67"><literal type="number" pos:start="79:62" pos:end="79:67">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="83:5" pos:end="83:33">/* Expose MSI-X capability */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:59"><expr pos:start="85:5" pos:end="85:58"><name pos:start="85:5" pos:end="85:7">pos</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:58"><name pos:start="85:11" pos:end="85:29">pci_find_cap_offset</name><argument_list pos:start="85:30" pos:end="85:58">(<argument pos:start="85:31" pos:end="85:37"><expr pos:start="85:31" pos:end="85:37"><name pos:start="85:31" pos:end="85:37">pci_dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:54"><expr pos:start="85:40" pos:end="85:54"><name pos:start="85:40" pos:end="85:54">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="85:57" pos:end="85:57"><expr pos:start="85:57" pos:end="85:57"><literal type="number" pos:start="85:57" pos:end="85:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="151:5"><if pos:start="87:5" pos:end="151:5">if <condition pos:start="87:8" pos:end="87:57">(<expr pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:11">pos</name> <operator pos:start="87:13" pos:end="87:14">!=</operator> <literal type="number" pos:start="87:16" pos:end="87:16">0</literal> <operator pos:start="87:18" pos:end="87:19">&amp;&amp;</operator> <call pos:start="87:21" pos:end="87:56"><name pos:start="87:21" pos:end="87:45">kvm_device_msix_supported</name><argument_list pos:start="87:46" pos:end="87:56">(<argument pos:start="87:47" pos:end="87:55"><expr pos:start="87:47" pos:end="87:55"><name pos:start="87:47" pos:end="87:55">kvm_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:59" pos:end="151:5">{<block_content pos:start="89:9" pos:end="149:33">

        <decl_stmt pos:start="89:9" pos:end="89:19"><decl pos:start="89:9" pos:end="89:18"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:18">bar_nr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:34"><decl pos:start="91:9" pos:end="91:33"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">uint32_t</name></type> <name pos:start="91:18" pos:end="91:33">msix_table_entry</name></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:26"><decl pos:start="93:9" pos:end="93:25"><type pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:16">uint16_t</name></type> <name pos:start="93:18" pos:end="93:25">msix_max</name></decl>;</decl_stmt>



        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:47">(<expr pos:start="97:13" pos:end="97:46"><call pos:start="97:13" pos:end="97:42"><name pos:start="97:13" pos:end="97:36">verify_irqchip_in_kernel</name><argument_list pos:start="97:37" pos:end="97:42">(<argument pos:start="97:38" pos:end="97:41"><expr pos:start="97:38" pos:end="97:41"><name pos:start="97:38" pos:end="97:41">errp</name></expr></argument>)</argument_list></call> <operator pos:start="97:44" pos:end="97:44">&lt;</operator> <literal type="number" pos:start="97:46" pos:end="97:46">0</literal></expr>)</condition> <block pos:start="97:49" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:28">

            <return pos:start="99:13" pos:end="99:28">return <expr pos:start="99:20" pos:end="99:27"><operator pos:start="99:20" pos:end="99:20">-</operator><name pos:start="99:21" pos:end="99:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:50"><expr pos:start="103:9" pos:end="103:49"><name pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:11">dev</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:16">dev</name><operator pos:start="103:17" pos:end="103:17">.</operator><name pos:start="103:18" pos:end="103:28">cap_present</name></name> <operator pos:start="103:30" pos:end="103:31">|=</operator> <name pos:start="103:33" pos:end="103:49">QEMU_PCI_CAP_MSIX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:11">dev</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:16">cap</name><operator pos:start="105:17" pos:end="105:17">.</operator><name pos:start="105:18" pos:end="105:26">available</name></name> <operator pos:start="105:28" pos:end="105:29">|=</operator> <name pos:start="105:31" pos:end="105:54">ASSIGNED_DEVICE_CAP_MSIX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:40"><expr pos:start="107:9" pos:end="109:39"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="109:39"><name pos:start="107:15" pos:end="107:32">pci_add_capability</name><argument_list pos:start="107:33" pos:end="109:39">(<argument pos:start="107:34" pos:end="107:40"><expr pos:start="107:34" pos:end="107:40"><name pos:start="107:34" pos:end="107:40">pci_dev</name></expr></argument>, <argument pos:start="107:43" pos:end="107:57"><expr pos:start="107:43" pos:end="107:57"><name pos:start="107:43" pos:end="107:57">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="107:60" pos:end="107:62"><expr pos:start="107:60" pos:end="107:62"><name pos:start="107:60" pos:end="107:62">pos</name></expr></argument>, <argument pos:start="107:65" pos:end="107:66"><expr pos:start="107:65" pos:end="107:66"><literal type="number" pos:start="107:65" pos:end="107:66">12</literal></expr></argument>,

                                  <argument pos:start="109:35" pos:end="109:38"><expr pos:start="109:35" pos:end="109:38"><name pos:start="109:35" pos:end="109:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">&lt;</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:32"><expr pos:start="117:9" pos:end="117:31"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:15">pci_dev</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:25">msix_cap</name></name> <operator pos:start="117:27" pos:end="117:27">=</operator> <name pos:start="117:29" pos:end="117:31">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="121:9" pos:end="123:46"><expr pos:start="121:9" pos:end="123:45"><name pos:start="121:9" pos:end="121:16">msix_max</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <operator pos:start="121:20" pos:end="121:20">(</operator><call pos:start="121:21" pos:end="121:72"><name pos:start="121:21" pos:end="121:32">pci_get_word</name><argument_list pos:start="121:33" pos:end="121:72">(<argument pos:start="121:34" pos:end="121:71"><expr pos:start="121:34" pos:end="121:71"><name pos:start="121:34" pos:end="121:48"><name pos:start="121:34" pos:end="121:40">pci_dev</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:48">config</name></name> <operator pos:start="121:50" pos:end="121:50">+</operator> <name pos:start="121:52" pos:end="121:54">pos</name> <operator pos:start="121:56" pos:end="121:56">+</operator> <name pos:start="121:58" pos:end="121:71">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="121:74" pos:end="121:74">&amp;</operator>

                    <name pos:start="123:21" pos:end="123:40">PCI_MSIX_FLAGS_QSIZE</name><operator pos:start="123:41" pos:end="123:41">)</operator> <operator pos:start="123:43" pos:end="123:43">+</operator> <literal type="number" pos:start="123:45" pos:end="123:45">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:55"><expr pos:start="125:9" pos:end="125:54"><name pos:start="125:9" pos:end="125:16">msix_max</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:54"><name pos:start="125:20" pos:end="125:22">MIN</name><argument_list pos:start="125:23" pos:end="125:54">(<argument pos:start="125:24" pos:end="125:31"><expr pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:31">msix_max</name></expr></argument>, <argument pos:start="125:34" pos:end="125:53"><expr pos:start="125:34" pos:end="125:53"><name pos:start="125:34" pos:end="125:53">KVM_MAX_MSIX_PER_DEV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:75"><expr pos:start="127:9" pos:end="127:74"><call pos:start="127:9" pos:end="127:74"><name pos:start="127:9" pos:end="127:20">pci_set_word</name><argument_list pos:start="127:21" pos:end="127:74">(<argument pos:start="127:22" pos:end="127:59"><expr pos:start="127:22" pos:end="127:59"><name pos:start="127:22" pos:end="127:36"><name pos:start="127:22" pos:end="127:28">pci_dev</name><operator pos:start="127:29" pos:end="127:30">-&gt;</operator><name pos:start="127:31" pos:end="127:36">config</name></name> <operator pos:start="127:38" pos:end="127:38">+</operator> <name pos:start="127:40" pos:end="127:42">pos</name> <operator pos:start="127:44" pos:end="127:44">+</operator> <name pos:start="127:46" pos:end="127:59">PCI_MSIX_FLAGS</name></expr></argument>, <argument pos:start="127:62" pos:end="127:73"><expr pos:start="127:62" pos:end="127:73"><name pos:start="127:62" pos:end="127:69">msix_max</name> <operator pos:start="127:71" pos:end="127:71">-</operator> <literal type="number" pos:start="127:73" pos:end="127:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:61">/* Only enable and function mask bits are writable */</comment>

        <expr_stmt pos:start="133:9" pos:end="135:69"><expr pos:start="133:9" pos:end="135:68"><call pos:start="133:9" pos:end="135:68"><name pos:start="133:9" pos:end="133:20">pci_set_word</name><argument_list pos:start="133:21" pos:end="135:68">(<argument pos:start="133:22" pos:end="133:58"><expr pos:start="133:22" pos:end="133:58"><name pos:start="133:22" pos:end="133:35"><name pos:start="133:22" pos:end="133:28">pci_dev</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:35">wmask</name></name> <operator pos:start="133:37" pos:end="133:37">+</operator> <name pos:start="133:39" pos:end="133:41">pos</name> <operator pos:start="133:43" pos:end="133:43">+</operator> <name pos:start="133:45" pos:end="133:58">PCI_MSIX_FLAGS</name></expr></argument>,

                     <argument pos:start="135:22" pos:end="135:67"><expr pos:start="135:22" pos:end="135:67"><name pos:start="135:22" pos:end="135:42">PCI_MSIX_FLAGS_ENABLE</name> <operator pos:start="135:44" pos:end="135:44">|</operator> <name pos:start="135:46" pos:end="135:67">PCI_MSIX_FLAGS_MASKALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:80"><expr pos:start="139:9" pos:end="139:79"><name pos:start="139:9" pos:end="139:24">msix_table_entry</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <call pos:start="139:28" pos:end="139:79"><name pos:start="139:28" pos:end="139:39">pci_get_long</name><argument_list pos:start="139:40" pos:end="139:79">(<argument pos:start="139:41" pos:end="139:78"><expr pos:start="139:41" pos:end="139:78"><name pos:start="139:41" pos:end="139:55"><name pos:start="139:41" pos:end="139:47">pci_dev</name><operator pos:start="139:48" pos:end="139:49">-&gt;</operator><name pos:start="139:50" pos:end="139:55">config</name></name> <operator pos:start="139:57" pos:end="139:57">+</operator> <name pos:start="139:59" pos:end="139:61">pos</name> <operator pos:start="139:63" pos:end="139:63">+</operator> <name pos:start="139:65" pos:end="139:78">PCI_MSIX_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:59"><expr pos:start="141:9" pos:end="141:58"><name pos:start="141:9" pos:end="141:14">bar_nr</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:33">msix_table_entry</name> <operator pos:start="141:35" pos:end="141:35">&amp;</operator> <name pos:start="141:37" pos:end="141:58">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:52"><expr pos:start="143:9" pos:end="143:51"><name pos:start="143:9" pos:end="143:24">msix_table_entry</name> <operator pos:start="143:26" pos:end="143:27">&amp;=</operator> <operator pos:start="143:29" pos:end="143:29">~</operator><name pos:start="143:30" pos:end="143:51">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:79"><expr pos:start="145:9" pos:end="145:78"><name pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:11">dev</name><operator pos:start="145:12" pos:end="145:13">-&gt;</operator><name pos:start="145:14" pos:end="145:28">msix_table_addr</name></name> <operator pos:start="145:30" pos:end="145:30">=</operator> <name pos:start="145:32" pos:end="145:49"><name pos:start="145:32" pos:end="145:41">pci_region</name><index pos:start="145:42" pos:end="145:49">[<expr pos:start="145:43" pos:end="145:48"><name pos:start="145:43" pos:end="145:48">bar_nr</name></expr>]</index></name><operator pos:start="145:50" pos:end="145:50">.</operator><name pos:start="145:51" pos:end="145:59">base_addr</name> <operator pos:start="145:61" pos:end="145:61">+</operator> <name pos:start="145:63" pos:end="145:78">msix_table_entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:65"><expr pos:start="147:9" pos:end="147:64"><name pos:start="147:9" pos:end="147:28"><name pos:start="147:9" pos:end="147:11">dev</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:28">msix_table_size</name></name> <operator pos:start="147:30" pos:end="147:30">=</operator> <name pos:start="147:32" pos:end="147:39">msix_max</name> <operator pos:start="147:41" pos:end="147:41">*</operator> <sizeof pos:start="147:43" pos:end="147:64">sizeof<argument_list pos:start="147:49" pos:end="147:64">(<argument pos:start="147:50" pos:end="147:63"><expr pos:start="147:50" pos:end="147:63"><name pos:start="147:50" pos:end="147:63">MSIXTableEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:33"><expr pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:21"><name pos:start="149:9" pos:end="149:11">dev</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:21">msix_max</name></name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:32">msix_max</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:77">/* Minimal PM support, nothing writable, device appears to NAK changes */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:57"><expr pos:start="157:5" pos:end="157:56"><name pos:start="157:5" pos:end="157:7">pos</name> <operator pos:start="157:9" pos:end="157:9">=</operator> <call pos:start="157:11" pos:end="157:56"><name pos:start="157:11" pos:end="157:29">pci_find_cap_offset</name><argument_list pos:start="157:30" pos:end="157:56">(<argument pos:start="157:31" pos:end="157:37"><expr pos:start="157:31" pos:end="157:37"><name pos:start="157:31" pos:end="157:37">pci_dev</name></expr></argument>, <argument pos:start="157:40" pos:end="157:52"><expr pos:start="157:40" pos:end="157:52"><name pos:start="157:40" pos:end="157:52">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="157:55" pos:end="157:55"><expr pos:start="157:55" pos:end="157:55"><literal type="number" pos:start="157:55" pos:end="157:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="203:5"><if pos:start="159:5" pos:end="203:5">if <condition pos:start="159:8" pos:end="159:12">(<expr pos:start="159:9" pos:end="159:11"><name pos:start="159:9" pos:end="159:11">pos</name></expr>)</condition> <block pos:start="159:14" pos:end="203:5">{<block_content pos:start="161:9" pos:end="201:70">

        <decl_stmt pos:start="161:9" pos:end="161:21"><decl pos:start="161:9" pos:end="161:20"><type pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">uint16_t</name></type> <name pos:start="161:18" pos:end="161:20">pmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="165:9" pos:end="167:40"><expr pos:start="165:9" pos:end="167:39"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="167:39"><name pos:start="165:15" pos:end="165:32">pci_add_capability</name><argument_list pos:start="165:33" pos:end="167:39">(<argument pos:start="165:34" pos:end="165:40"><expr pos:start="165:34" pos:end="165:40"><name pos:start="165:34" pos:end="165:40">pci_dev</name></expr></argument>, <argument pos:start="165:43" pos:end="165:55"><expr pos:start="165:43" pos:end="165:55"><name pos:start="165:43" pos:end="165:55">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="165:58" pos:end="165:60"><expr pos:start="165:58" pos:end="165:60"><name pos:start="165:58" pos:end="165:60">pos</name></expr></argument>, <argument pos:start="165:63" pos:end="165:75"><expr pos:start="165:63" pos:end="165:75"><name pos:start="165:63" pos:end="165:75">PCI_PM_SIZEOF</name></expr></argument>,

                                  <argument pos:start="167:35" pos:end="167:38"><expr pos:start="167:35" pos:end="167:38"><name pos:start="167:35" pos:end="167:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition> <block pos:start="169:22" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:23">

            <return pos:start="171:13" pos:end="171:23">return <expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:61"><expr pos:start="177:9" pos:end="177:60"><call pos:start="177:9" pos:end="177:60"><name pos:start="177:9" pos:end="177:35">assigned_dev_setup_cap_read</name><argument_list pos:start="177:36" pos:end="177:60">(<argument pos:start="177:37" pos:end="177:39"><expr pos:start="177:37" pos:end="177:39"><name pos:start="177:37" pos:end="177:39">dev</name></expr></argument>, <argument pos:start="177:42" pos:end="177:44"><expr pos:start="177:42" pos:end="177:44"><name pos:start="177:42" pos:end="177:44">pos</name></expr></argument>, <argument pos:start="177:47" pos:end="177:59"><expr pos:start="177:47" pos:end="177:59"><name pos:start="177:47" pos:end="177:59">PCI_PM_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:66"><expr pos:start="181:9" pos:end="181:65"><name pos:start="181:9" pos:end="181:11">pmc</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="181:65"><name pos:start="181:15" pos:end="181:26">pci_get_word</name><argument_list pos:start="181:27" pos:end="181:65">(<argument pos:start="181:28" pos:end="181:64"><expr pos:start="181:28" pos:end="181:64"><name pos:start="181:28" pos:end="181:42"><name pos:start="181:28" pos:end="181:34">pci_dev</name><operator pos:start="181:35" pos:end="181:36">-&gt;</operator><name pos:start="181:37" pos:end="181:42">config</name></name> <operator pos:start="181:44" pos:end="181:44">+</operator> <name pos:start="181:46" pos:end="181:48">pos</name> <operator pos:start="181:50" pos:end="181:50">+</operator> <name pos:start="181:52" pos:end="181:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:54"><expr pos:start="183:9" pos:end="183:53"><name pos:start="183:9" pos:end="183:11">pmc</name> <operator pos:start="183:13" pos:end="183:14">&amp;=</operator> <operator pos:start="183:16" pos:end="183:16">(</operator><name pos:start="183:17" pos:end="183:35">PCI_PM_CAP_VER_MASK</name> <operator pos:start="183:37" pos:end="183:37">|</operator> <name pos:start="183:39" pos:end="183:52">PCI_PM_CAP_DSI</name><operator pos:start="183:53" pos:end="183:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:65"><expr pos:start="185:9" pos:end="185:64"><call pos:start="185:9" pos:end="185:64"><name pos:start="185:9" pos:end="185:20">pci_set_word</name><argument_list pos:start="185:21" pos:end="185:64">(<argument pos:start="185:22" pos:end="185:58"><expr pos:start="185:22" pos:end="185:58"><name pos:start="185:22" pos:end="185:36"><name pos:start="185:22" pos:end="185:28">pci_dev</name><operator pos:start="185:29" pos:end="185:30">-&gt;</operator><name pos:start="185:31" pos:end="185:36">config</name></name> <operator pos:start="185:38" pos:end="185:38">+</operator> <name pos:start="185:40" pos:end="185:42">pos</name> <operator pos:start="185:44" pos:end="185:44">+</operator> <name pos:start="185:46" pos:end="185:58">PCI_CAP_FLAGS</name></expr></argument>, <argument pos:start="185:61" pos:end="185:63"><expr pos:start="185:61" pos:end="185:63"><name pos:start="185:61" pos:end="185:63">pmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="189:9" pos:end="191:55">/* assign_device will bring the device up to D0, so we don't need

         * to worry about doing that ourselves here. */</comment>

        <expr_stmt pos:start="193:9" pos:end="195:48"><expr pos:start="193:9" pos:end="195:47"><call pos:start="193:9" pos:end="195:47"><name pos:start="193:9" pos:end="193:20">pci_set_word</name><argument_list pos:start="193:21" pos:end="195:47">(<argument pos:start="193:22" pos:end="193:56"><expr pos:start="193:22" pos:end="193:56"><name pos:start="193:22" pos:end="193:36"><name pos:start="193:22" pos:end="193:28">pci_dev</name><operator pos:start="193:29" pos:end="193:30">-&gt;</operator><name pos:start="193:31" pos:end="193:36">config</name></name> <operator pos:start="193:38" pos:end="193:38">+</operator> <name pos:start="193:40" pos:end="193:42">pos</name> <operator pos:start="193:44" pos:end="193:44">+</operator> <name pos:start="193:46" pos:end="193:56">PCI_PM_CTRL</name></expr></argument>,

                     <argument pos:start="195:22" pos:end="195:46"><expr pos:start="195:22" pos:end="195:46"><name pos:start="195:22" pos:end="195:46">PCI_PM_CTRL_NO_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="199:9" pos:end="199:71"><expr pos:start="199:9" pos:end="199:70"><call pos:start="199:9" pos:end="199:70"><name pos:start="199:9" pos:end="199:20">pci_set_byte</name><argument_list pos:start="199:21" pos:end="199:70">(<argument pos:start="199:22" pos:end="199:66"><expr pos:start="199:22" pos:end="199:66"><name pos:start="199:22" pos:end="199:36"><name pos:start="199:22" pos:end="199:28">pci_dev</name><operator pos:start="199:29" pos:end="199:30">-&gt;</operator><name pos:start="199:31" pos:end="199:36">config</name></name> <operator pos:start="199:38" pos:end="199:38">+</operator> <name pos:start="199:40" pos:end="199:42">pos</name> <operator pos:start="199:44" pos:end="199:44">+</operator> <name pos:start="199:46" pos:end="199:66">PCI_PM_PPB_EXTENSIONS</name></expr></argument>, <argument pos:start="199:69" pos:end="199:69"><expr pos:start="199:69" pos:end="199:69"><literal type="number" pos:start="199:69" pos:end="199:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:70"><expr pos:start="201:9" pos:end="201:69"><call pos:start="201:9" pos:end="201:69"><name pos:start="201:9" pos:end="201:20">pci_set_byte</name><argument_list pos:start="201:21" pos:end="201:69">(<argument pos:start="201:22" pos:end="201:65"><expr pos:start="201:22" pos:end="201:65"><name pos:start="201:22" pos:end="201:36"><name pos:start="201:22" pos:end="201:28">pci_dev</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:36">config</name></name> <operator pos:start="201:38" pos:end="201:38">+</operator> <name pos:start="201:40" pos:end="201:42">pos</name> <operator pos:start="201:44" pos:end="201:44">+</operator> <name pos:start="201:46" pos:end="201:65">PCI_PM_DATA_REGISTER</name></expr></argument>, <argument pos:start="201:68" pos:end="201:68"><expr pos:start="201:68" pos:end="201:68"><literal type="number" pos:start="201:68" pos:end="201:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:58"><expr pos:start="207:5" pos:end="207:57"><name pos:start="207:5" pos:end="207:7">pos</name> <operator pos:start="207:9" pos:end="207:9">=</operator> <call pos:start="207:11" pos:end="207:57"><name pos:start="207:11" pos:end="207:29">pci_find_cap_offset</name><argument_list pos:start="207:30" pos:end="207:57">(<argument pos:start="207:31" pos:end="207:37"><expr pos:start="207:31" pos:end="207:37"><name pos:start="207:31" pos:end="207:37">pci_dev</name></expr></argument>, <argument pos:start="207:40" pos:end="207:53"><expr pos:start="207:40" pos:end="207:53"><name pos:start="207:40" pos:end="207:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="207:56" pos:end="207:56"><expr pos:start="207:56" pos:end="207:56"><literal type="number" pos:start="207:56" pos:end="207:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="433:5"><if pos:start="209:5" pos:end="433:5">if <condition pos:start="209:8" pos:end="209:12">(<expr pos:start="209:9" pos:end="209:11"><name pos:start="209:9" pos:end="209:11">pos</name></expr>)</condition> <block pos:start="209:14" pos:end="433:5">{<block_content pos:start="211:9" pos:end="431:9">

        <decl_stmt pos:start="211:9" pos:end="211:34"><decl pos:start="211:9" pos:end="211:23"><type pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:15">uint8_t</name></type> <name pos:start="211:17" pos:end="211:23">version</name></decl>, <decl pos:start="211:26" pos:end="211:33"><type ref="prev" pos:start="211:9" pos:end="211:15"/><name pos:start="211:26" pos:end="211:29">size</name> <init pos:start="211:31" pos:end="211:33">= <expr pos:start="211:33" pos:end="211:33"><literal type="number" pos:start="211:33" pos:end="211:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:38"><decl pos:start="213:9" pos:end="213:21"><type pos:start="213:9" pos:end="213:16"><name pos:start="213:9" pos:end="213:16">uint16_t</name></type> <name pos:start="213:18" pos:end="213:21">type</name></decl>, <decl pos:start="213:24" pos:end="213:29"><type ref="prev" pos:start="213:9" pos:end="213:16"/><name pos:start="213:24" pos:end="213:29">devctl</name></decl>, <decl pos:start="213:32" pos:end="213:37"><type ref="prev" pos:start="213:9" pos:end="213:16"/><name pos:start="213:32" pos:end="213:37">lnksta</name></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:32"><decl pos:start="215:9" pos:end="215:23"><type pos:start="215:9" pos:end="215:16"><name pos:start="215:9" pos:end="215:16">uint32_t</name></type> <name pos:start="215:18" pos:end="215:23">devcap</name></decl>, <decl pos:start="215:26" pos:end="215:31"><type ref="prev" pos:start="215:9" pos:end="215:16"/><name pos:start="215:26" pos:end="215:31">lnkcap</name></decl>;</decl_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:70"><expr pos:start="219:9" pos:end="219:69"><name pos:start="219:9" pos:end="219:15">version</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <call pos:start="219:19" pos:end="219:69"><name pos:start="219:19" pos:end="219:30">pci_get_byte</name><argument_list pos:start="219:31" pos:end="219:69">(<argument pos:start="219:32" pos:end="219:68"><expr pos:start="219:32" pos:end="219:68"><name pos:start="219:32" pos:end="219:46"><name pos:start="219:32" pos:end="219:38">pci_dev</name><operator pos:start="219:39" pos:end="219:40">-&gt;</operator><name pos:start="219:41" pos:end="219:46">config</name></name> <operator pos:start="219:48" pos:end="219:48">+</operator> <name pos:start="219:50" pos:end="219:52">pos</name> <operator pos:start="219:54" pos:end="219:54">+</operator> <name pos:start="219:56" pos:end="219:68">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:38"><expr pos:start="221:9" pos:end="221:37"><name pos:start="221:9" pos:end="221:15">version</name> <operator pos:start="221:17" pos:end="221:18">&amp;=</operator> <name pos:start="221:20" pos:end="221:37">PCI_EXP_FLAGS_VERS</name></expr>;</expr_stmt>

        <if_stmt pos:start="223:9" pos:end="283:9"><if pos:start="223:9" pos:end="227:9">if <condition pos:start="223:12" pos:end="223:25">(<expr pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:19">version</name> <operator pos:start="223:21" pos:end="223:22">==</operator> <literal type="number" pos:start="223:24" pos:end="223:24">1</literal></expr>)</condition> <block pos:start="223:27" pos:end="227:9">{<block_content pos:start="225:13" pos:end="225:24">

            <expr_stmt pos:start="225:13" pos:end="225:24"><expr pos:start="225:13" pos:end="225:23"><name pos:start="225:13" pos:end="225:16">size</name> <operator pos:start="225:18" pos:end="225:18">=</operator> <literal type="number" pos:start="225:20" pos:end="225:23">0x14</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="227:11" pos:end="261:9">else if <condition pos:start="227:19" pos:end="227:32">(<expr pos:start="227:20" pos:end="227:31"><name pos:start="227:20" pos:end="227:26">version</name> <operator pos:start="227:28" pos:end="227:29">==</operator> <literal type="number" pos:start="227:31" pos:end="227:31">2</literal></expr>)</condition> <block pos:start="227:34" pos:end="261:9">{<block_content pos:start="241:13" pos:end="259:13">

            <comment type="block" pos:start="229:13" pos:end="239:15">/*

             * Check for non-std size, accept reduced size to 0x34,

             * which is what bcm5761 implemented, violating the

             * PCIe v3.0 spec that regs should exist and be read as 0,

             * not optionally provided and shorten the struct size.

             */</comment>

            <expr_stmt pos:start="241:13" pos:end="241:58"><expr pos:start="241:13" pos:end="241:57"><name pos:start="241:13" pos:end="241:16">size</name> <operator pos:start="241:18" pos:end="241:18">=</operator> <call pos:start="241:20" pos:end="241:57"><name pos:start="241:20" pos:end="241:22">MIN</name><argument_list pos:start="241:23" pos:end="241:57">(<argument pos:start="241:24" pos:end="241:27"><expr pos:start="241:24" pos:end="241:27"><literal type="number" pos:start="241:24" pos:end="241:27">0x3c</literal></expr></argument>, <argument pos:start="241:30" pos:end="241:56"><expr pos:start="241:30" pos:end="241:56"><name pos:start="241:30" pos:end="241:50">PCI_CONFIG_SPACE_SIZE</name> <operator pos:start="241:52" pos:end="241:52">-</operator> <name pos:start="241:54" pos:end="241:56">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="259:13"><if pos:start="243:13" pos:end="251:13">if <condition pos:start="243:16" pos:end="243:28">(<expr pos:start="243:17" pos:end="243:27"><name pos:start="243:17" pos:end="243:20">size</name> <operator pos:start="243:22" pos:end="243:22">&lt;</operator> <literal type="number" pos:start="243:24" pos:end="243:27">0x34</literal></expr>)</condition> <block pos:start="243:30" pos:end="251:13">{<block_content pos:start="245:17" pos:end="249:31">

                <expr_stmt pos:start="245:17" pos:end="247:43"><expr pos:start="245:17" pos:end="247:42"><call pos:start="245:17" pos:end="247:42"><name pos:start="245:17" pos:end="245:26">error_setg</name><argument_list pos:start="245:27" pos:end="247:42">(<argument pos:start="245:28" pos:end="245:31"><expr pos:start="245:28" pos:end="245:31"><name pos:start="245:28" pos:end="245:31">errp</name></expr></argument>, <argument pos:start="245:34" pos:end="245:64"><expr pos:start="245:34" pos:end="245:64"><literal type="string" pos:start="245:34" pos:end="245:64">"Invalid size PCIe cap-id 0x%x"</literal></expr></argument>,

                           <argument pos:start="247:28" pos:end="247:41"><expr pos:start="247:28" pos:end="247:41"><name pos:start="247:28" pos:end="247:41">PCI_CAP_ID_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="249:17" pos:end="249:31">return <expr pos:start="249:24" pos:end="249:30"><operator pos:start="249:24" pos:end="249:24">-</operator><name pos:start="249:25" pos:end="249:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="251:15" pos:end="259:13">else if <condition pos:start="251:23" pos:end="251:36">(<expr pos:start="251:24" pos:end="251:35"><name pos:start="251:24" pos:end="251:27">size</name> <operator pos:start="251:29" pos:end="251:30">!=</operator> <literal type="number" pos:start="251:32" pos:end="251:35">0x3c</literal></expr>)</condition> <block pos:start="251:38" pos:end="259:13">{<block_content pos:start="253:17" pos:end="257:61">

                <expr_stmt pos:start="253:17" pos:end="257:61"><expr pos:start="253:17" pos:end="257:60"><call pos:start="253:17" pos:end="257:60"><name pos:start="253:17" pos:end="253:28">error_report</name><argument_list pos:start="253:29" pos:end="257:60">(<argument pos:start="253:30" pos:end="255:78"><expr pos:start="253:30" pos:end="255:78"><literal type="string" pos:start="253:30" pos:end="253:65">"WARNING, %s: PCIe cap-id 0x%x has "</literal>

                             <literal type="string" pos:start="255:30" pos:end="255:78">"non-standard size 0x%x; std size should be 0x3c"</literal></expr></argument>,

                             <argument pos:start="257:30" pos:end="257:37"><expr pos:start="257:30" pos:end="257:37"><name pos:start="257:30" pos:end="257:37">__func__</name></expr></argument>, <argument pos:start="257:40" pos:end="257:53"><expr pos:start="257:40" pos:end="257:53"><name pos:start="257:40" pos:end="257:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="257:56" pos:end="257:59"><expr pos:start="257:56" pos:end="257:59"><name pos:start="257:56" pos:end="257:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="261:11" pos:end="283:9">else if <condition pos:start="261:19" pos:end="261:32">(<expr pos:start="261:20" pos:end="261:31"><name pos:start="261:20" pos:end="261:26">version</name> <operator pos:start="261:28" pos:end="261:29">==</operator> <literal type="number" pos:start="261:31" pos:end="261:31">0</literal></expr>)</condition> <block pos:start="261:34" pos:end="283:9">{<block_content pos:start="263:13" pos:end="281:13">

            <decl_stmt pos:start="263:13" pos:end="263:30"><decl pos:start="263:13" pos:end="263:24"><type pos:start="263:13" pos:end="263:20"><name pos:start="263:13" pos:end="263:20">uint16_t</name></type> <name pos:start="263:22" pos:end="263:24">vid</name></decl>, <decl pos:start="263:27" pos:end="263:29"><type ref="prev" pos:start="263:13" pos:end="263:20"/><name pos:start="263:27" pos:end="263:29">did</name></decl>;</decl_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:64"><expr pos:start="265:13" pos:end="265:63"><name pos:start="265:13" pos:end="265:15">vid</name> <operator pos:start="265:17" pos:end="265:17">=</operator> <call pos:start="265:19" pos:end="265:63"><name pos:start="265:19" pos:end="265:30">pci_get_word</name><argument_list pos:start="265:31" pos:end="265:63">(<argument pos:start="265:32" pos:end="265:62"><expr pos:start="265:32" pos:end="265:62"><name pos:start="265:32" pos:end="265:46"><name pos:start="265:32" pos:end="265:38">pci_dev</name><operator pos:start="265:39" pos:end="265:40">-&gt;</operator><name pos:start="265:41" pos:end="265:46">config</name></name> <operator pos:start="265:48" pos:end="265:48">+</operator> <name pos:start="265:50" pos:end="265:62">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:64"><expr pos:start="267:13" pos:end="267:63"><name pos:start="267:13" pos:end="267:15">did</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <call pos:start="267:19" pos:end="267:63"><name pos:start="267:19" pos:end="267:30">pci_get_word</name><argument_list pos:start="267:31" pos:end="267:63">(<argument pos:start="267:32" pos:end="267:62"><expr pos:start="267:32" pos:end="267:62"><name pos:start="267:32" pos:end="267:46"><name pos:start="267:32" pos:end="267:38">pci_dev</name><operator pos:start="267:39" pos:end="267:40">-&gt;</operator><name pos:start="267:41" pos:end="267:46">config</name></name> <operator pos:start="267:48" pos:end="267:48">+</operator> <name pos:start="267:50" pos:end="267:62">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="269:13" pos:end="281:13"><if pos:start="269:13" pos:end="281:13">if <condition pos:start="269:16" pos:end="269:60">(<expr pos:start="269:17" pos:end="269:59"><name pos:start="269:17" pos:end="269:19">vid</name> <operator pos:start="269:21" pos:end="269:22">==</operator> <name pos:start="269:24" pos:end="269:42">PCI_VENDOR_ID_INTEL</name> <operator pos:start="269:44" pos:end="269:45">&amp;&amp;</operator> <name pos:start="269:47" pos:end="269:49">did</name> <operator pos:start="269:51" pos:end="269:52">==</operator> <literal type="number" pos:start="269:54" pos:end="269:59">0x10ed</literal></expr>)</condition> <block pos:start="269:62" pos:end="281:13">{<block_content pos:start="279:17" pos:end="279:28">

                <comment type="block" pos:start="271:17" pos:end="277:19">/*

                 * quirk for Intel 82599 VF with invalid PCIe capability

                 * version, should really be version 2 (same as PF)

                 */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:28"><expr pos:start="279:17" pos:end="279:27"><name pos:start="279:17" pos:end="279:20">size</name> <operator pos:start="279:22" pos:end="279:22">=</operator> <literal type="number" pos:start="279:24" pos:end="279:27">0x3c</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="287:9" pos:end="295:9"><if pos:start="287:9" pos:end="295:9">if <condition pos:start="287:12" pos:end="287:22">(<expr pos:start="287:13" pos:end="287:21"><name pos:start="287:13" pos:end="287:16">size</name> <operator pos:start="287:18" pos:end="287:19">==</operator> <literal type="number" pos:start="287:21" pos:end="287:21">0</literal></expr>)</condition> <block pos:start="287:24" pos:end="295:9">{<block_content pos:start="289:13" pos:end="293:27">

            <expr_stmt pos:start="289:13" pos:end="291:32"><expr pos:start="289:13" pos:end="291:31"><call pos:start="289:13" pos:end="291:31"><name pos:start="289:13" pos:end="289:22">error_setg</name><argument_list pos:start="289:23" pos:end="291:31">(<argument pos:start="289:24" pos:end="289:27"><expr pos:start="289:24" pos:end="289:27"><name pos:start="289:24" pos:end="289:27">errp</name></expr></argument>, <argument pos:start="289:30" pos:end="289:76"><expr pos:start="289:30" pos:end="289:76"><literal type="string" pos:start="289:30" pos:end="289:76">"Unsupported PCI express capability version %d"</literal></expr></argument>,

                       <argument pos:start="291:24" pos:end="291:30"><expr pos:start="291:24" pos:end="291:30"><name pos:start="291:24" pos:end="291:30">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="293:13" pos:end="293:27">return <expr pos:start="293:20" pos:end="293:26"><operator pos:start="293:20" pos:end="293:20">-</operator><name pos:start="293:21" pos:end="293:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="299:9" pos:end="301:40"><expr pos:start="299:9" pos:end="301:39"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">=</operator> <call pos:start="299:15" pos:end="301:39"><name pos:start="299:15" pos:end="299:32">pci_add_capability</name><argument_list pos:start="299:33" pos:end="301:39">(<argument pos:start="299:34" pos:end="299:40"><expr pos:start="299:34" pos:end="299:40"><name pos:start="299:34" pos:end="299:40">pci_dev</name></expr></argument>, <argument pos:start="299:43" pos:end="299:56"><expr pos:start="299:43" pos:end="299:56"><name pos:start="299:43" pos:end="299:56">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="299:59" pos:end="299:61"><expr pos:start="299:59" pos:end="299:61"><name pos:start="299:59" pos:end="299:61">pos</name></expr></argument>, <argument pos:start="299:64" pos:end="299:67"><expr pos:start="299:64" pos:end="299:67"><name pos:start="299:64" pos:end="299:67">size</name></expr></argument>,

                                  <argument pos:start="301:35" pos:end="301:38"><expr pos:start="301:35" pos:end="301:38"><name pos:start="301:35" pos:end="301:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="307:9"><if pos:start="303:9" pos:end="307:9">if <condition pos:start="303:12" pos:end="303:20">(<expr pos:start="303:13" pos:end="303:19"><name pos:start="303:13" pos:end="303:15">ret</name> <operator pos:start="303:17" pos:end="303:17">&lt;</operator> <literal type="number" pos:start="303:19" pos:end="303:19">0</literal></expr>)</condition> <block pos:start="303:22" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:23">

            <return pos:start="305:13" pos:end="305:23">return <expr pos:start="305:20" pos:end="305:22"><name pos:start="305:20" pos:end="305:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="311:9" pos:end="311:52"><expr pos:start="311:9" pos:end="311:51"><call pos:start="311:9" pos:end="311:51"><name pos:start="311:9" pos:end="311:35">assigned_dev_setup_cap_read</name><argument_list pos:start="311:36" pos:end="311:51">(<argument pos:start="311:37" pos:end="311:39"><expr pos:start="311:37" pos:end="311:39"><name pos:start="311:37" pos:end="311:39">dev</name></expr></argument>, <argument pos:start="311:42" pos:end="311:44"><expr pos:start="311:42" pos:end="311:44"><name pos:start="311:42" pos:end="311:44">pos</name></expr></argument>, <argument pos:start="311:47" pos:end="311:50"><expr pos:start="311:47" pos:end="311:50"><name pos:start="311:47" pos:end="311:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:67"><expr pos:start="315:9" pos:end="315:66"><name pos:start="315:9" pos:end="315:12">type</name> <operator pos:start="315:14" pos:end="315:14">=</operator> <call pos:start="315:16" pos:end="315:66"><name pos:start="315:16" pos:end="315:27">pci_get_word</name><argument_list pos:start="315:28" pos:end="315:66">(<argument pos:start="315:29" pos:end="315:65"><expr pos:start="315:29" pos:end="315:65"><name pos:start="315:29" pos:end="315:43"><name pos:start="315:29" pos:end="315:35">pci_dev</name><operator pos:start="315:36" pos:end="315:37">-&gt;</operator><name pos:start="315:38" pos:end="315:43">config</name></name> <operator pos:start="315:45" pos:end="315:45">+</operator> <name pos:start="315:47" pos:end="315:49">pos</name> <operator pos:start="315:51" pos:end="315:51">+</operator> <name pos:start="315:53" pos:end="315:65">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:48"><expr pos:start="317:9" pos:end="317:47"><name pos:start="317:9" pos:end="317:12">type</name> <operator pos:start="317:14" pos:end="317:14">=</operator> <operator pos:start="317:16" pos:end="317:16">(</operator><name pos:start="317:17" pos:end="317:20">type</name> <operator pos:start="317:22" pos:end="317:22">&amp;</operator> <name pos:start="317:24" pos:end="317:41">PCI_EXP_FLAGS_TYPE</name><operator pos:start="317:42" pos:end="317:42">)</operator> <operator pos:start="317:44" pos:end="317:45">&gt;&gt;</operator> <literal type="number" pos:start="317:47" pos:end="317:47">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="329:9"><if pos:start="319:9" pos:end="329:9">if <condition pos:start="319:12" pos:end="321:72">(<expr pos:start="319:13" pos:end="321:71"><name pos:start="319:13" pos:end="319:16">type</name> <operator pos:start="319:18" pos:end="319:19">!=</operator> <name pos:start="319:21" pos:end="319:41">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="319:43" pos:end="319:44">&amp;&amp;</operator>

            <name pos:start="321:13" pos:end="321:16">type</name> <operator pos:start="321:18" pos:end="321:19">!=</operator> <name pos:start="321:21" pos:end="321:40">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="321:42" pos:end="321:43">&amp;&amp;</operator> <name pos:start="321:45" pos:end="321:48">type</name> <operator pos:start="321:50" pos:end="321:51">!=</operator> <name pos:start="321:53" pos:end="321:71">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="321:74" pos:end="329:9">{<block_content pos:start="323:13" pos:end="327:27">

            <expr_stmt pos:start="323:13" pos:end="325:59"><expr pos:start="323:13" pos:end="325:58"><call pos:start="323:13" pos:end="325:58"><name pos:start="323:13" pos:end="323:22">error_setg</name><argument_list pos:start="323:23" pos:end="325:58">(<argument pos:start="323:24" pos:end="323:27"><expr pos:start="323:24" pos:end="323:27"><name pos:start="323:24" pos:end="323:27">errp</name></expr></argument>, <argument pos:start="323:30" pos:end="325:51"><expr pos:start="323:30" pos:end="325:51"><literal type="string" pos:start="323:30" pos:end="323:72">"Device assignment only supports endpoint "</literal>

                       <literal type="string" pos:start="325:24" pos:end="325:51">"assignment, device type %d"</literal></expr></argument>, <argument pos:start="325:54" pos:end="325:57"><expr pos:start="325:54" pos:end="325:57"><name pos:start="325:54" pos:end="325:57">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="327:13" pos:end="327:27">return <expr pos:start="327:20" pos:end="327:26"><operator pos:start="327:20" pos:end="327:20">-</operator><name pos:start="327:21" pos:end="327:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="333:9" pos:end="335:75">/* capabilities, pass existing read-only copy

         * PCI_EXP_FLAGS_IRQ: updated by hardware, should be direct read */</comment>



        <comment type="block" pos:start="339:9" pos:end="339:43">/* device capabilities: hide FLR */</comment>

        <expr_stmt pos:start="341:9" pos:end="341:70"><expr pos:start="341:9" pos:end="341:69"><name pos:start="341:9" pos:end="341:14">devcap</name> <operator pos:start="341:16" pos:end="341:16">=</operator> <call pos:start="341:18" pos:end="341:69"><name pos:start="341:18" pos:end="341:29">pci_get_long</name><argument_list pos:start="341:30" pos:end="341:69">(<argument pos:start="341:31" pos:end="341:68"><expr pos:start="341:31" pos:end="341:68"><name pos:start="341:31" pos:end="341:45"><name pos:start="341:31" pos:end="341:37">pci_dev</name><operator pos:start="341:38" pos:end="341:39">-&gt;</operator><name pos:start="341:40" pos:end="341:45">config</name></name> <operator pos:start="341:47" pos:end="341:47">+</operator> <name pos:start="341:49" pos:end="341:51">pos</name> <operator pos:start="341:53" pos:end="341:53">+</operator> <name pos:start="341:55" pos:end="341:68">PCI_EXP_DEVCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:38"><expr pos:start="343:9" pos:end="343:37"><name pos:start="343:9" pos:end="343:14">devcap</name> <operator pos:start="343:16" pos:end="343:17">&amp;=</operator> <operator pos:start="343:19" pos:end="343:19">~</operator><name pos:start="343:20" pos:end="343:37">PCI_EXP_DEVCAP_FLR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:69"><expr pos:start="345:9" pos:end="345:68"><call pos:start="345:9" pos:end="345:68"><name pos:start="345:9" pos:end="345:20">pci_set_long</name><argument_list pos:start="345:21" pos:end="345:68">(<argument pos:start="345:22" pos:end="345:59"><expr pos:start="345:22" pos:end="345:59"><name pos:start="345:22" pos:end="345:36"><name pos:start="345:22" pos:end="345:28">pci_dev</name><operator pos:start="345:29" pos:end="345:30">-&gt;</operator><name pos:start="345:31" pos:end="345:36">config</name></name> <operator pos:start="345:38" pos:end="345:38">+</operator> <name pos:start="345:40" pos:end="345:42">pos</name> <operator pos:start="345:44" pos:end="345:44">+</operator> <name pos:start="345:46" pos:end="345:59">PCI_EXP_DEVCAP</name></expr></argument>, <argument pos:start="345:62" pos:end="345:67"><expr pos:start="345:62" pos:end="345:67"><name pos:start="345:62" pos:end="345:67">devcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="349:9" pos:end="355:11">/* device control: clear all error reporting enable bits, leaving

         *                 only a few host values.  Note, these are

         *                 all writable, but not passed to hw.

         */</comment>

        <expr_stmt pos:start="357:9" pos:end="357:70"><expr pos:start="357:9" pos:end="357:69"><name pos:start="357:9" pos:end="357:14">devctl</name> <operator pos:start="357:16" pos:end="357:16">=</operator> <call pos:start="357:18" pos:end="357:69"><name pos:start="357:18" pos:end="357:29">pci_get_word</name><argument_list pos:start="357:30" pos:end="357:69">(<argument pos:start="357:31" pos:end="357:68"><expr pos:start="357:31" pos:end="357:68"><name pos:start="357:31" pos:end="357:45"><name pos:start="357:31" pos:end="357:37">pci_dev</name><operator pos:start="357:38" pos:end="357:39">-&gt;</operator><name pos:start="357:40" pos:end="357:45">config</name></name> <operator pos:start="357:47" pos:end="357:47">+</operator> <name pos:start="357:49" pos:end="357:51">pos</name> <operator pos:start="357:53" pos:end="357:53">+</operator> <name pos:start="357:55" pos:end="357:68">PCI_EXP_DEVCTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="361:70"><expr pos:start="359:9" pos:end="361:69"><name pos:start="359:9" pos:end="359:14">devctl</name> <operator pos:start="359:16" pos:end="359:16">=</operator> <operator pos:start="359:18" pos:end="359:18">(</operator><name pos:start="359:19" pos:end="359:24">devctl</name> <operator pos:start="359:26" pos:end="359:26">&amp;</operator> <operator pos:start="359:28" pos:end="359:28">(</operator><name pos:start="359:29" pos:end="359:49">PCI_EXP_DEVCTL_READRQ</name> <operator pos:start="359:51" pos:end="359:51">|</operator> <name pos:start="359:53" pos:end="359:74">PCI_EXP_DEVCTL_PAYLOAD</name><operator pos:start="359:75" pos:end="359:75">)</operator><operator pos:start="359:76" pos:end="359:76">)</operator> <operator pos:start="359:78" pos:end="359:78">|</operator>

                  <name pos:start="361:19" pos:end="361:41">PCI_EXP_DEVCTL_RELAX_EN</name> <operator pos:start="361:43" pos:end="361:43">|</operator> <name pos:start="361:45" pos:end="361:69">PCI_EXP_DEVCTL_NOSNOOP_EN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:69"><expr pos:start="363:9" pos:end="363:68"><call pos:start="363:9" pos:end="363:68"><name pos:start="363:9" pos:end="363:20">pci_set_word</name><argument_list pos:start="363:21" pos:end="363:68">(<argument pos:start="363:22" pos:end="363:59"><expr pos:start="363:22" pos:end="363:59"><name pos:start="363:22" pos:end="363:36"><name pos:start="363:22" pos:end="363:28">pci_dev</name><operator pos:start="363:29" pos:end="363:30">-&gt;</operator><name pos:start="363:31" pos:end="363:36">config</name></name> <operator pos:start="363:38" pos:end="363:38">+</operator> <name pos:start="363:40" pos:end="363:42">pos</name> <operator pos:start="363:44" pos:end="363:44">+</operator> <name pos:start="363:46" pos:end="363:59">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="363:62" pos:end="363:67"><expr pos:start="363:62" pos:end="363:67"><name pos:start="363:62" pos:end="363:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:65"><expr pos:start="365:9" pos:end="365:64"><name pos:start="365:9" pos:end="365:14">devctl</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <name pos:start="365:18" pos:end="365:39">PCI_EXP_DEVCTL_BCR_FLR</name> <operator pos:start="365:41" pos:end="365:41">|</operator> <name pos:start="365:43" pos:end="365:64">PCI_EXP_DEVCTL_AUX_PME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:69"><expr pos:start="367:9" pos:end="367:68"><call pos:start="367:9" pos:end="367:68"><name pos:start="367:9" pos:end="367:20">pci_set_word</name><argument_list pos:start="367:21" pos:end="367:68">(<argument pos:start="367:22" pos:end="367:58"><expr pos:start="367:22" pos:end="367:58"><name pos:start="367:22" pos:end="367:35"><name pos:start="367:22" pos:end="367:28">pci_dev</name><operator pos:start="367:29" pos:end="367:30">-&gt;</operator><name pos:start="367:31" pos:end="367:35">wmask</name></name> <operator pos:start="367:37" pos:end="367:37">+</operator> <name pos:start="367:39" pos:end="367:41">pos</name> <operator pos:start="367:43" pos:end="367:43">+</operator> <name pos:start="367:45" pos:end="367:58">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="367:61" pos:end="367:67"><expr pos:start="367:61" pos:end="367:67"><operator pos:start="367:61" pos:end="367:61">~</operator><name pos:start="367:62" pos:end="367:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="371:9" pos:end="371:33">/* Clear device status */</comment>

        <expr_stmt pos:start="373:9" pos:end="373:64"><expr pos:start="373:9" pos:end="373:63"><call pos:start="373:9" pos:end="373:63"><name pos:start="373:9" pos:end="373:20">pci_set_word</name><argument_list pos:start="373:21" pos:end="373:63">(<argument pos:start="373:22" pos:end="373:59"><expr pos:start="373:22" pos:end="373:59"><name pos:start="373:22" pos:end="373:36"><name pos:start="373:22" pos:end="373:28">pci_dev</name><operator pos:start="373:29" pos:end="373:30">-&gt;</operator><name pos:start="373:31" pos:end="373:36">config</name></name> <operator pos:start="373:38" pos:end="373:38">+</operator> <name pos:start="373:40" pos:end="373:42">pos</name> <operator pos:start="373:44" pos:end="373:44">+</operator> <name pos:start="373:46" pos:end="373:59">PCI_EXP_DEVSTA</name></expr></argument>, <argument pos:start="373:62" pos:end="373:62"><expr pos:start="373:62" pos:end="373:62"><literal type="number" pos:start="373:62" pos:end="373:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="377:9" pos:end="377:76">/* Link capabilities, expose links and latencues, clear reporting */</comment>

        <expr_stmt pos:start="379:9" pos:end="379:70"><expr pos:start="379:9" pos:end="379:69"><name pos:start="379:9" pos:end="379:14">lnkcap</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <call pos:start="379:18" pos:end="379:69"><name pos:start="379:18" pos:end="379:29">pci_get_long</name><argument_list pos:start="379:30" pos:end="379:69">(<argument pos:start="379:31" pos:end="379:68"><expr pos:start="379:31" pos:end="379:68"><name pos:start="379:31" pos:end="379:45"><name pos:start="379:31" pos:end="379:37">pci_dev</name><operator pos:start="379:38" pos:end="379:39">-&gt;</operator><name pos:start="379:40" pos:end="379:45">config</name></name> <operator pos:start="379:47" pos:end="379:47">+</operator> <name pos:start="379:49" pos:end="379:51">pos</name> <operator pos:start="379:53" pos:end="379:53">+</operator> <name pos:start="379:55" pos:end="379:68">PCI_EXP_LNKCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="385:40"><expr pos:start="381:9" pos:end="385:39"><name pos:start="381:9" pos:end="381:14">lnkcap</name> <operator pos:start="381:16" pos:end="381:17">&amp;=</operator> <operator pos:start="381:19" pos:end="381:19">(</operator><name pos:start="381:20" pos:end="381:37">PCI_EXP_LNKCAP_SLS</name> <operator pos:start="381:39" pos:end="381:39">|</operator> <name pos:start="381:41" pos:end="381:58">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="381:60" pos:end="381:60">|</operator>

                   <name pos:start="383:20" pos:end="383:39">PCI_EXP_LNKCAP_ASPMS</name> <operator pos:start="383:41" pos:end="383:41">|</operator> <name pos:start="383:43" pos:end="383:62">PCI_EXP_LNKCAP_L0SEL</name> <operator pos:start="383:64" pos:end="383:64">|</operator>

                   <name pos:start="385:20" pos:end="385:38">PCI_EXP_LNKCAP_L1EL</name><operator pos:start="385:39" pos:end="385:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:69"><expr pos:start="387:9" pos:end="387:68"><call pos:start="387:9" pos:end="387:68"><name pos:start="387:9" pos:end="387:20">pci_set_long</name><argument_list pos:start="387:21" pos:end="387:68">(<argument pos:start="387:22" pos:end="387:59"><expr pos:start="387:22" pos:end="387:59"><name pos:start="387:22" pos:end="387:36"><name pos:start="387:22" pos:end="387:28">pci_dev</name><operator pos:start="387:29" pos:end="387:30">-&gt;</operator><name pos:start="387:31" pos:end="387:36">config</name></name> <operator pos:start="387:38" pos:end="387:38">+</operator> <name pos:start="387:40" pos:end="387:42">pos</name> <operator pos:start="387:44" pos:end="387:44">+</operator> <name pos:start="387:46" pos:end="387:59">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="387:62" pos:end="387:67"><expr pos:start="387:62" pos:end="387:67"><name pos:start="387:62" pos:end="387:67">lnkcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="391:9" pos:end="391:78">/* Link control, pass existing read-only copy.  Should be writable? */</comment>



        <comment type="block" pos:start="395:9" pos:end="395:62">/* Link status, only expose current speed and width */</comment>

        <expr_stmt pos:start="397:9" pos:end="397:70"><expr pos:start="397:9" pos:end="397:69"><name pos:start="397:9" pos:end="397:14">lnksta</name> <operator pos:start="397:16" pos:end="397:16">=</operator> <call pos:start="397:18" pos:end="397:69"><name pos:start="397:18" pos:end="397:29">pci_get_word</name><argument_list pos:start="397:30" pos:end="397:69">(<argument pos:start="397:31" pos:end="397:68"><expr pos:start="397:31" pos:end="397:68"><name pos:start="397:31" pos:end="397:45"><name pos:start="397:31" pos:end="397:37">pci_dev</name><operator pos:start="397:38" pos:end="397:39">-&gt;</operator><name pos:start="397:40" pos:end="397:45">config</name></name> <operator pos:start="397:47" pos:end="397:47">+</operator> <name pos:start="397:49" pos:end="397:51">pos</name> <operator pos:start="397:53" pos:end="397:53">+</operator> <name pos:start="397:55" pos:end="397:68">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:60"><expr pos:start="399:9" pos:end="399:59"><name pos:start="399:9" pos:end="399:14">lnksta</name> <operator pos:start="399:16" pos:end="399:17">&amp;=</operator> <operator pos:start="399:19" pos:end="399:19">(</operator><name pos:start="399:20" pos:end="399:37">PCI_EXP_LNKSTA_CLS</name> <operator pos:start="399:39" pos:end="399:39">|</operator> <name pos:start="399:41" pos:end="399:58">PCI_EXP_LNKSTA_NLW</name><operator pos:start="399:59" pos:end="399:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:69"><expr pos:start="401:9" pos:end="401:68"><call pos:start="401:9" pos:end="401:68"><name pos:start="401:9" pos:end="401:20">pci_set_word</name><argument_list pos:start="401:21" pos:end="401:68">(<argument pos:start="401:22" pos:end="401:59"><expr pos:start="401:22" pos:end="401:59"><name pos:start="401:22" pos:end="401:36"><name pos:start="401:22" pos:end="401:28">pci_dev</name><operator pos:start="401:29" pos:end="401:30">-&gt;</operator><name pos:start="401:31" pos:end="401:36">config</name></name> <operator pos:start="401:38" pos:end="401:38">+</operator> <name pos:start="401:40" pos:end="401:42">pos</name> <operator pos:start="401:44" pos:end="401:44">+</operator> <name pos:start="401:46" pos:end="401:59">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="401:62" pos:end="401:67"><expr pos:start="401:62" pos:end="401:67"><name pos:start="401:62" pos:end="401:67">lnksta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="405:9" pos:end="431:9"><if pos:start="405:9" pos:end="431:9">if <condition pos:start="405:12" pos:end="405:25">(<expr pos:start="405:13" pos:end="405:24"><name pos:start="405:13" pos:end="405:19">version</name> <operator pos:start="405:21" pos:end="405:22">&gt;=</operator> <literal type="number" pos:start="405:24" pos:end="405:24">2</literal></expr>)</condition> <block pos:start="405:27" pos:end="431:9">{<block_content pos:start="409:13" pos:end="423:67">

            <comment type="block" pos:start="407:13" pos:end="407:79">/* Slot capabilities, control, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="409:13" pos:end="409:68"><expr pos:start="409:13" pos:end="409:67"><call pos:start="409:13" pos:end="409:67"><name pos:start="409:13" pos:end="409:24">pci_set_long</name><argument_list pos:start="409:25" pos:end="409:67">(<argument pos:start="409:26" pos:end="409:63"><expr pos:start="409:26" pos:end="409:63"><name pos:start="409:26" pos:end="409:40"><name pos:start="409:26" pos:end="409:32">pci_dev</name><operator pos:start="409:33" pos:end="409:34">-&gt;</operator><name pos:start="409:35" pos:end="409:40">config</name></name> <operator pos:start="409:42" pos:end="409:42">+</operator> <name pos:start="409:44" pos:end="409:46">pos</name> <operator pos:start="409:48" pos:end="409:48">+</operator> <name pos:start="409:50" pos:end="409:63">PCI_EXP_SLTCAP</name></expr></argument>, <argument pos:start="409:66" pos:end="409:66"><expr pos:start="409:66" pos:end="409:66"><literal type="number" pos:start="409:66" pos:end="409:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:68"><expr pos:start="411:13" pos:end="411:67"><call pos:start="411:13" pos:end="411:67"><name pos:start="411:13" pos:end="411:24">pci_set_word</name><argument_list pos:start="411:25" pos:end="411:67">(<argument pos:start="411:26" pos:end="411:63"><expr pos:start="411:26" pos:end="411:63"><name pos:start="411:26" pos:end="411:40"><name pos:start="411:26" pos:end="411:32">pci_dev</name><operator pos:start="411:33" pos:end="411:34">-&gt;</operator><name pos:start="411:35" pos:end="411:40">config</name></name> <operator pos:start="411:42" pos:end="411:42">+</operator> <name pos:start="411:44" pos:end="411:46">pos</name> <operator pos:start="411:48" pos:end="411:48">+</operator> <name pos:start="411:50" pos:end="411:63">PCI_EXP_SLTCTL</name></expr></argument>, <argument pos:start="411:66" pos:end="411:66"><expr pos:start="411:66" pos:end="411:66"><literal type="number" pos:start="411:66" pos:end="411:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:68"><expr pos:start="413:13" pos:end="413:67"><call pos:start="413:13" pos:end="413:67"><name pos:start="413:13" pos:end="413:24">pci_set_word</name><argument_list pos:start="413:25" pos:end="413:67">(<argument pos:start="413:26" pos:end="413:63"><expr pos:start="413:26" pos:end="413:63"><name pos:start="413:26" pos:end="413:40"><name pos:start="413:26" pos:end="413:32">pci_dev</name><operator pos:start="413:33" pos:end="413:34">-&gt;</operator><name pos:start="413:35" pos:end="413:40">config</name></name> <operator pos:start="413:42" pos:end="413:42">+</operator> <name pos:start="413:44" pos:end="413:46">pos</name> <operator pos:start="413:48" pos:end="413:48">+</operator> <name pos:start="413:50" pos:end="413:63">PCI_EXP_SLTSTA</name></expr></argument>, <argument pos:start="413:66" pos:end="413:66"><expr pos:start="413:66" pos:end="413:66"><literal type="number" pos:start="413:66" pos:end="413:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="417:13" pos:end="417:79">/* Root control, capabilities, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:67"><expr pos:start="419:13" pos:end="419:66"><call pos:start="419:13" pos:end="419:66"><name pos:start="419:13" pos:end="419:24">pci_set_word</name><argument_list pos:start="419:25" pos:end="419:66">(<argument pos:start="419:26" pos:end="419:62"><expr pos:start="419:26" pos:end="419:62"><name pos:start="419:26" pos:end="419:40"><name pos:start="419:26" pos:end="419:32">pci_dev</name><operator pos:start="419:33" pos:end="419:34">-&gt;</operator><name pos:start="419:35" pos:end="419:40">config</name></name> <operator pos:start="419:42" pos:end="419:42">+</operator> <name pos:start="419:44" pos:end="419:46">pos</name> <operator pos:start="419:48" pos:end="419:48">+</operator> <name pos:start="419:50" pos:end="419:62">PCI_EXP_RTCTL</name></expr></argument>, <argument pos:start="419:65" pos:end="419:65"><expr pos:start="419:65" pos:end="419:65"><literal type="number" pos:start="419:65" pos:end="419:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:67"><expr pos:start="421:13" pos:end="421:66"><call pos:start="421:13" pos:end="421:66"><name pos:start="421:13" pos:end="421:24">pci_set_word</name><argument_list pos:start="421:25" pos:end="421:66">(<argument pos:start="421:26" pos:end="421:62"><expr pos:start="421:26" pos:end="421:62"><name pos:start="421:26" pos:end="421:40"><name pos:start="421:26" pos:end="421:32">pci_dev</name><operator pos:start="421:33" pos:end="421:34">-&gt;</operator><name pos:start="421:35" pos:end="421:40">config</name></name> <operator pos:start="421:42" pos:end="421:42">+</operator> <name pos:start="421:44" pos:end="421:46">pos</name> <operator pos:start="421:48" pos:end="421:48">+</operator> <name pos:start="421:50" pos:end="421:62">PCI_EXP_RTCAP</name></expr></argument>, <argument pos:start="421:65" pos:end="421:65"><expr pos:start="421:65" pos:end="421:65"><literal type="number" pos:start="421:65" pos:end="421:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:67"><expr pos:start="423:13" pos:end="423:66"><call pos:start="423:13" pos:end="423:66"><name pos:start="423:13" pos:end="423:24">pci_set_long</name><argument_list pos:start="423:25" pos:end="423:66">(<argument pos:start="423:26" pos:end="423:62"><expr pos:start="423:26" pos:end="423:62"><name pos:start="423:26" pos:end="423:40"><name pos:start="423:26" pos:end="423:32">pci_dev</name><operator pos:start="423:33" pos:end="423:34">-&gt;</operator><name pos:start="423:35" pos:end="423:40">config</name></name> <operator pos:start="423:42" pos:end="423:42">+</operator> <name pos:start="423:44" pos:end="423:46">pos</name> <operator pos:start="423:48" pos:end="423:48">+</operator> <name pos:start="423:50" pos:end="423:62">PCI_EXP_RTSTA</name></expr></argument>, <argument pos:start="423:65" pos:end="423:65"><expr pos:start="423:65" pos:end="423:65"><literal type="number" pos:start="423:65" pos:end="423:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="427:13" pos:end="427:77">/* Device capabilities/control 2, pass existing read-only copy */</comment>

            <comment type="block" pos:start="429:13" pos:end="429:62">/* Link control 2, pass existing read-only copy */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="437:5" pos:end="437:59"><expr pos:start="437:5" pos:end="437:58"><name pos:start="437:5" pos:end="437:7">pos</name> <operator pos:start="437:9" pos:end="437:9">=</operator> <call pos:start="437:11" pos:end="437:58"><name pos:start="437:11" pos:end="437:29">pci_find_cap_offset</name><argument_list pos:start="437:30" pos:end="437:58">(<argument pos:start="437:31" pos:end="437:37"><expr pos:start="437:31" pos:end="437:37"><name pos:start="437:31" pos:end="437:37">pci_dev</name></expr></argument>, <argument pos:start="437:40" pos:end="437:54"><expr pos:start="437:40" pos:end="437:54"><name pos:start="437:40" pos:end="437:54">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="437:57" pos:end="437:57"><expr pos:start="437:57" pos:end="437:57"><literal type="number" pos:start="437:57" pos:end="437:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="439:5" pos:end="493:5"><if pos:start="439:5" pos:end="493:5">if <condition pos:start="439:8" pos:end="439:12">(<expr pos:start="439:9" pos:end="439:11"><name pos:start="439:9" pos:end="439:11">pos</name></expr>)</condition> <block pos:start="439:14" pos:end="493:5">{<block_content pos:start="441:9" pos:end="491:67">

        <decl_stmt pos:start="441:9" pos:end="441:21"><decl pos:start="441:9" pos:end="441:20"><type pos:start="441:9" pos:end="441:16"><name pos:start="441:9" pos:end="441:16">uint16_t</name></type> <name pos:start="441:18" pos:end="441:20">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="443:9" pos:end="443:24"><decl pos:start="443:9" pos:end="443:23"><type pos:start="443:9" pos:end="443:16"><name pos:start="443:9" pos:end="443:16">uint32_t</name></type> <name pos:start="443:18" pos:end="443:23">status</name></decl>;</decl_stmt>



        <comment type="block" pos:start="447:9" pos:end="447:56">/* Only expose the minimum, 8 byte capability */</comment>

        <expr_stmt pos:start="449:9" pos:end="451:40"><expr pos:start="449:9" pos:end="451:39"><name pos:start="449:9" pos:end="449:11">ret</name> <operator pos:start="449:13" pos:end="449:13">=</operator> <call pos:start="449:15" pos:end="451:39"><name pos:start="449:15" pos:end="449:32">pci_add_capability</name><argument_list pos:start="449:33" pos:end="451:39">(<argument pos:start="449:34" pos:end="449:40"><expr pos:start="449:34" pos:end="449:40"><name pos:start="449:34" pos:end="449:40">pci_dev</name></expr></argument>, <argument pos:start="449:43" pos:end="449:57"><expr pos:start="449:43" pos:end="449:57"><name pos:start="449:43" pos:end="449:57">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="449:60" pos:end="449:62"><expr pos:start="449:60" pos:end="449:62"><name pos:start="449:60" pos:end="449:62">pos</name></expr></argument>, <argument pos:start="449:65" pos:end="449:65"><expr pos:start="449:65" pos:end="449:65"><literal type="number" pos:start="449:65" pos:end="449:65">8</literal></expr></argument>,

                                  <argument pos:start="451:35" pos:end="451:38"><expr pos:start="451:35" pos:end="451:38"><name pos:start="451:35" pos:end="451:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="453:9" pos:end="457:9"><if pos:start="453:9" pos:end="457:9">if <condition pos:start="453:12" pos:end="453:20">(<expr pos:start="453:13" pos:end="453:19"><name pos:start="453:13" pos:end="453:15">ret</name> <operator pos:start="453:17" pos:end="453:17">&lt;</operator> <literal type="number" pos:start="453:19" pos:end="453:19">0</literal></expr>)</condition> <block pos:start="453:22" pos:end="457:9">{<block_content pos:start="455:13" pos:end="455:23">

            <return pos:start="455:13" pos:end="455:23">return <expr pos:start="455:20" pos:end="455:22"><name pos:start="455:20" pos:end="455:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="461:9" pos:end="461:49"><expr pos:start="461:9" pos:end="461:48"><call pos:start="461:9" pos:end="461:48"><name pos:start="461:9" pos:end="461:35">assigned_dev_setup_cap_read</name><argument_list pos:start="461:36" pos:end="461:48">(<argument pos:start="461:37" pos:end="461:39"><expr pos:start="461:37" pos:end="461:39"><name pos:start="461:37" pos:end="461:39">dev</name></expr></argument>, <argument pos:start="461:42" pos:end="461:44"><expr pos:start="461:42" pos:end="461:44"><name pos:start="461:42" pos:end="461:44">pos</name></expr></argument>, <argument pos:start="461:47" pos:end="461:47"><expr pos:start="461:47" pos:end="461:47"><literal type="number" pos:start="461:47" pos:end="461:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="465:9" pos:end="465:74">/* Command register, clear upper bits, including extended modes */</comment>

        <expr_stmt pos:start="467:9" pos:end="467:62"><expr pos:start="467:9" pos:end="467:61"><name pos:start="467:9" pos:end="467:11">cmd</name> <operator pos:start="467:13" pos:end="467:13">=</operator> <call pos:start="467:15" pos:end="467:61"><name pos:start="467:15" pos:end="467:26">pci_get_word</name><argument_list pos:start="467:27" pos:end="467:61">(<argument pos:start="467:28" pos:end="467:60"><expr pos:start="467:28" pos:end="467:60"><name pos:start="467:28" pos:end="467:42"><name pos:start="467:28" pos:end="467:34">pci_dev</name><operator pos:start="467:35" pos:end="467:36">-&gt;</operator><name pos:start="467:37" pos:end="467:42">config</name></name> <operator pos:start="467:44" pos:end="467:44">+</operator> <name pos:start="467:46" pos:end="467:48">pos</name> <operator pos:start="467:50" pos:end="467:50">+</operator> <name pos:start="467:52" pos:end="467:60">PCI_X_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="471:37"><expr pos:start="469:9" pos:end="471:36"><name pos:start="469:9" pos:end="469:11">cmd</name> <operator pos:start="469:13" pos:end="469:14">&amp;=</operator> <operator pos:start="469:16" pos:end="469:16">(</operator><name pos:start="469:17" pos:end="469:33">PCI_X_CMD_DPERR_E</name> <operator pos:start="469:35" pos:end="469:35">|</operator> <name pos:start="469:37" pos:end="469:49">PCI_X_CMD_ERO</name> <operator pos:start="469:51" pos:end="469:51">|</operator> <name pos:start="469:53" pos:end="469:70">PCI_X_CMD_MAX_READ</name> <operator pos:start="469:72" pos:end="469:72">|</operator>

                <name pos:start="471:17" pos:end="471:35">PCI_X_CMD_MAX_SPLIT</name><operator pos:start="471:36" pos:end="471:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="473:9" pos:end="473:61"><expr pos:start="473:9" pos:end="473:60"><call pos:start="473:9" pos:end="473:60"><name pos:start="473:9" pos:end="473:20">pci_set_word</name><argument_list pos:start="473:21" pos:end="473:60">(<argument pos:start="473:22" pos:end="473:54"><expr pos:start="473:22" pos:end="473:54"><name pos:start="473:22" pos:end="473:36"><name pos:start="473:22" pos:end="473:28">pci_dev</name><operator pos:start="473:29" pos:end="473:30">-&gt;</operator><name pos:start="473:31" pos:end="473:36">config</name></name> <operator pos:start="473:38" pos:end="473:38">+</operator> <name pos:start="473:40" pos:end="473:42">pos</name> <operator pos:start="473:44" pos:end="473:44">+</operator> <name pos:start="473:46" pos:end="473:54">PCI_X_CMD</name></expr></argument>, <argument pos:start="473:57" pos:end="473:59"><expr pos:start="473:57" pos:end="473:59"><name pos:start="473:57" pos:end="473:59">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="477:9" pos:end="479:41">/* Status register, update with emulated PCI bus location, clear

         * error bits, leave the rest. */</comment>

        <expr_stmt pos:start="481:9" pos:end="481:68"><expr pos:start="481:9" pos:end="481:67"><name pos:start="481:9" pos:end="481:14">status</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <call pos:start="481:18" pos:end="481:67"><name pos:start="481:18" pos:end="481:29">pci_get_long</name><argument_list pos:start="481:30" pos:end="481:67">(<argument pos:start="481:31" pos:end="481:66"><expr pos:start="481:31" pos:end="481:66"><name pos:start="481:31" pos:end="481:45"><name pos:start="481:31" pos:end="481:37">pci_dev</name><operator pos:start="481:38" pos:end="481:39">-&gt;</operator><name pos:start="481:40" pos:end="481:45">config</name></name> <operator pos:start="481:47" pos:end="481:47">+</operator> <name pos:start="481:49" pos:end="481:51">pos</name> <operator pos:start="481:53" pos:end="481:53">+</operator> <name pos:start="481:55" pos:end="481:66">PCI_X_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="483:9" pos:end="483:59"><expr pos:start="483:9" pos:end="483:58"><name pos:start="483:9" pos:end="483:14">status</name> <operator pos:start="483:16" pos:end="483:17">&amp;=</operator> <operator pos:start="483:19" pos:end="483:19">~</operator><operator pos:start="483:20" pos:end="483:20">(</operator><name pos:start="483:21" pos:end="483:36">PCI_X_STATUS_BUS</name> <operator pos:start="483:38" pos:end="483:38">|</operator> <name pos:start="483:40" pos:end="483:57">PCI_X_STATUS_DEVFN</name><operator pos:start="483:58" pos:end="483:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:39"><expr pos:start="485:9" pos:end="485:38"><name pos:start="485:9" pos:end="485:14">status</name> <operator pos:start="485:16" pos:end="485:17">|=</operator> <call pos:start="485:19" pos:end="485:38"><name pos:start="485:19" pos:end="485:29">pci_get_bdf</name><argument_list pos:start="485:30" pos:end="485:38">(<argument pos:start="485:31" pos:end="485:37"><expr pos:start="485:31" pos:end="485:37"><name pos:start="485:31" pos:end="485:37">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="487:9" pos:end="489:42"><expr pos:start="487:9" pos:end="489:41"><name pos:start="487:9" pos:end="487:14">status</name> <operator pos:start="487:16" pos:end="487:17">&amp;=</operator> <operator pos:start="487:19" pos:end="487:19">~</operator><operator pos:start="487:20" pos:end="487:20">(</operator><name pos:start="487:21" pos:end="487:41">PCI_X_STATUS_SPL_DISC</name> <operator pos:start="487:43" pos:end="487:43">|</operator> <name pos:start="487:45" pos:end="487:64">PCI_X_STATUS_UNX_SPL</name> <operator pos:start="487:66" pos:end="487:66">|</operator>

                    <name pos:start="489:21" pos:end="489:40">PCI_X_STATUS_SPL_ERR</name><operator pos:start="489:41" pos:end="489:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:67"><expr pos:start="491:9" pos:end="491:66"><call pos:start="491:9" pos:end="491:66"><name pos:start="491:9" pos:end="491:20">pci_set_long</name><argument_list pos:start="491:21" pos:end="491:66">(<argument pos:start="491:22" pos:end="491:57"><expr pos:start="491:22" pos:end="491:57"><name pos:start="491:22" pos:end="491:36"><name pos:start="491:22" pos:end="491:28">pci_dev</name><operator pos:start="491:29" pos:end="491:30">-&gt;</operator><name pos:start="491:31" pos:end="491:36">config</name></name> <operator pos:start="491:38" pos:end="491:38">+</operator> <name pos:start="491:40" pos:end="491:42">pos</name> <operator pos:start="491:44" pos:end="491:44">+</operator> <name pos:start="491:46" pos:end="491:57">PCI_X_STATUS</name></expr></argument>, <argument pos:start="491:60" pos:end="491:65"><expr pos:start="491:60" pos:end="491:65"><name pos:start="491:60" pos:end="491:65">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="497:5" pos:end="497:58"><expr pos:start="497:5" pos:end="497:57"><name pos:start="497:5" pos:end="497:7">pos</name> <operator pos:start="497:9" pos:end="497:9">=</operator> <call pos:start="497:11" pos:end="497:57"><name pos:start="497:11" pos:end="497:29">pci_find_cap_offset</name><argument_list pos:start="497:30" pos:end="497:57">(<argument pos:start="497:31" pos:end="497:37"><expr pos:start="497:31" pos:end="497:37"><name pos:start="497:31" pos:end="497:37">pci_dev</name></expr></argument>, <argument pos:start="497:40" pos:end="497:53"><expr pos:start="497:40" pos:end="497:53"><name pos:start="497:40" pos:end="497:53">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="497:56" pos:end="497:56"><expr pos:start="497:56" pos:end="497:56"><literal type="number" pos:start="497:56" pos:end="497:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="499:5" pos:end="523:5"><if pos:start="499:5" pos:end="523:5">if <condition pos:start="499:8" pos:end="499:12">(<expr pos:start="499:9" pos:end="499:11"><name pos:start="499:9" pos:end="499:11">pos</name></expr>)</condition> <block pos:start="499:14" pos:end="523:5">{<block_content pos:start="503:9" pos:end="521:58">

        <comment type="block" pos:start="501:9" pos:end="501:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="503:9" pos:end="505:40"><expr pos:start="503:9" pos:end="505:39"><name pos:start="503:9" pos:end="503:11">ret</name> <operator pos:start="503:13" pos:end="503:13">=</operator> <call pos:start="503:15" pos:end="505:39"><name pos:start="503:15" pos:end="503:32">pci_add_capability</name><argument_list pos:start="503:33" pos:end="505:39">(<argument pos:start="503:34" pos:end="503:40"><expr pos:start="503:34" pos:end="503:40"><name pos:start="503:34" pos:end="503:40">pci_dev</name></expr></argument>, <argument pos:start="503:43" pos:end="503:56"><expr pos:start="503:43" pos:end="503:56"><name pos:start="503:43" pos:end="503:56">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="503:59" pos:end="503:61"><expr pos:start="503:59" pos:end="503:61"><name pos:start="503:59" pos:end="503:61">pos</name></expr></argument>, <argument pos:start="503:64" pos:end="503:64"><expr pos:start="503:64" pos:end="503:64"><literal type="number" pos:start="503:64" pos:end="503:64">8</literal></expr></argument>,

                                  <argument pos:start="505:35" pos:end="505:38"><expr pos:start="505:35" pos:end="505:38"><name pos:start="505:35" pos:end="505:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="507:9" pos:end="511:9"><if pos:start="507:9" pos:end="511:9">if <condition pos:start="507:12" pos:end="507:20">(<expr pos:start="507:13" pos:end="507:19"><name pos:start="507:13" pos:end="507:15">ret</name> <operator pos:start="507:17" pos:end="507:17">&lt;</operator> <literal type="number" pos:start="507:19" pos:end="507:19">0</literal></expr>)</condition> <block pos:start="507:22" pos:end="511:9">{<block_content pos:start="509:13" pos:end="509:23">

            <return pos:start="509:13" pos:end="509:23">return <expr pos:start="509:20" pos:end="509:22"><name pos:start="509:20" pos:end="509:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="515:9" pos:end="515:49"><expr pos:start="515:9" pos:end="515:48"><call pos:start="515:9" pos:end="515:48"><name pos:start="515:9" pos:end="515:35">assigned_dev_setup_cap_read</name><argument_list pos:start="515:36" pos:end="515:48">(<argument pos:start="515:37" pos:end="515:39"><expr pos:start="515:37" pos:end="515:39"><name pos:start="515:37" pos:end="515:39">dev</name></expr></argument>, <argument pos:start="515:42" pos:end="515:44"><expr pos:start="515:42" pos:end="515:44"><name pos:start="515:42" pos:end="515:44">pos</name></expr></argument>, <argument pos:start="515:47" pos:end="515:47"><expr pos:start="515:47" pos:end="515:47"><literal type="number" pos:start="515:47" pos:end="515:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="519:9" pos:end="519:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="521:9" pos:end="521:58"><expr pos:start="521:9" pos:end="521:57"><call pos:start="521:9" pos:end="521:57"><name pos:start="521:9" pos:end="521:40">assigned_dev_direct_config_write</name><argument_list pos:start="521:41" pos:end="521:57">(<argument pos:start="521:42" pos:end="521:44"><expr pos:start="521:42" pos:end="521:44"><name pos:start="521:42" pos:end="521:44">dev</name></expr></argument>, <argument pos:start="521:47" pos:end="521:53"><expr pos:start="521:47" pos:end="521:53"><name pos:start="521:47" pos:end="521:49">pos</name> <operator pos:start="521:51" pos:end="521:51">+</operator> <literal type="number" pos:start="521:53" pos:end="521:53">2</literal></expr></argument>, <argument pos:start="521:56" pos:end="521:56"><expr pos:start="521:56" pos:end="521:56"><literal type="number" pos:start="521:56" pos:end="521:56">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="527:5" pos:end="527:69">/* Devices can have multiple vendor capabilities, get them all */</comment>

    <for pos:start="529:5" pos:end="557:5">for <control pos:start="529:9" pos:end="531:33">(<init pos:start="529:10" pos:end="529:17"><expr pos:start="529:10" pos:end="529:16"><name pos:start="529:10" pos:end="529:12">pos</name> <operator pos:start="529:14" pos:end="529:14">=</operator> <literal type="number" pos:start="529:16" pos:end="529:16">0</literal></expr>;</init> <condition pos:start="529:19" pos:end="529:77"><expr pos:start="529:19" pos:end="529:76"><operator pos:start="529:19" pos:end="529:19">(</operator><name pos:start="529:20" pos:end="529:22">pos</name> <operator pos:start="529:24" pos:end="529:24">=</operator> <call pos:start="529:26" pos:end="529:75"><name pos:start="529:26" pos:end="529:44">pci_find_cap_offset</name><argument_list pos:start="529:45" pos:end="529:75">(<argument pos:start="529:46" pos:end="529:52"><expr pos:start="529:46" pos:end="529:52"><name pos:start="529:46" pos:end="529:52">pci_dev</name></expr></argument>, <argument pos:start="529:55" pos:end="529:69"><expr pos:start="529:55" pos:end="529:69"><name pos:start="529:55" pos:end="529:69">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="529:72" pos:end="529:74"><expr pos:start="529:72" pos:end="529:74"><name pos:start="529:72" pos:end="529:74">pos</name></expr></argument>)</argument_list></call><operator pos:start="529:76" pos:end="529:76">)</operator></expr>;</condition>

        <incr pos:start="531:9" pos:end="531:32"><expr pos:start="531:9" pos:end="531:32"><name pos:start="531:9" pos:end="531:11">pos</name> <operator pos:start="531:13" pos:end="531:14">+=</operator> <name pos:start="531:16" pos:end="531:32">PCI_CAP_LIST_NEXT</name></expr></incr>)</control> <block pos:start="531:35" pos:end="557:5">{<block_content pos:start="533:9" pos:end="555:64">

        <decl_stmt pos:start="533:9" pos:end="533:74"><decl pos:start="533:9" pos:end="533:73"><type pos:start="533:9" pos:end="533:15"><name pos:start="533:9" pos:end="533:15">uint8_t</name></type> <name pos:start="533:17" pos:end="533:19">len</name> <init pos:start="533:21" pos:end="533:73">= <expr pos:start="533:23" pos:end="533:73"><call pos:start="533:23" pos:end="533:73"><name pos:start="533:23" pos:end="533:34">pci_get_byte</name><argument_list pos:start="533:35" pos:end="533:73">(<argument pos:start="533:36" pos:end="533:72"><expr pos:start="533:36" pos:end="533:72"><name pos:start="533:36" pos:end="533:50"><name pos:start="533:36" pos:end="533:42">pci_dev</name><operator pos:start="533:43" pos:end="533:44">-&gt;</operator><name pos:start="533:45" pos:end="533:50">config</name></name> <operator pos:start="533:52" pos:end="533:52">+</operator> <name pos:start="533:54" pos:end="533:56">pos</name> <operator pos:start="533:58" pos:end="533:58">+</operator> <name pos:start="533:60" pos:end="533:72">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="535:9" pos:end="535:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="537:9" pos:end="539:40"><expr pos:start="537:9" pos:end="539:39"><name pos:start="537:9" pos:end="537:11">ret</name> <operator pos:start="537:13" pos:end="537:13">=</operator> <call pos:start="537:15" pos:end="539:39"><name pos:start="537:15" pos:end="537:32">pci_add_capability</name><argument_list pos:start="537:33" pos:end="539:39">(<argument pos:start="537:34" pos:end="537:40"><expr pos:start="537:34" pos:end="537:40"><name pos:start="537:34" pos:end="537:40">pci_dev</name></expr></argument>, <argument pos:start="537:43" pos:end="537:57"><expr pos:start="537:43" pos:end="537:57"><name pos:start="537:43" pos:end="537:57">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="537:60" pos:end="537:62"><expr pos:start="537:60" pos:end="537:62"><name pos:start="537:60" pos:end="537:62">pos</name></expr></argument>, <argument pos:start="537:65" pos:end="537:67"><expr pos:start="537:65" pos:end="537:67"><name pos:start="537:65" pos:end="537:67">len</name></expr></argument>,

                                  <argument pos:start="539:35" pos:end="539:38"><expr pos:start="539:35" pos:end="539:38"><name pos:start="539:35" pos:end="539:38">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="541:9" pos:end="545:9"><if pos:start="541:9" pos:end="545:9">if <condition pos:start="541:12" pos:end="541:20">(<expr pos:start="541:13" pos:end="541:19"><name pos:start="541:13" pos:end="541:15">ret</name> <operator pos:start="541:17" pos:end="541:17">&lt;</operator> <literal type="number" pos:start="541:19" pos:end="541:19">0</literal></expr>)</condition> <block pos:start="541:22" pos:end="545:9">{<block_content pos:start="543:13" pos:end="543:23">

            <return pos:start="543:13" pos:end="543:23">return <expr pos:start="543:20" pos:end="543:22"><name pos:start="543:20" pos:end="543:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="549:9" pos:end="549:51"><expr pos:start="549:9" pos:end="549:50"><call pos:start="549:9" pos:end="549:50"><name pos:start="549:9" pos:end="549:35">assigned_dev_setup_cap_read</name><argument_list pos:start="549:36" pos:end="549:50">(<argument pos:start="549:37" pos:end="549:39"><expr pos:start="549:37" pos:end="549:39"><name pos:start="549:37" pos:end="549:39">dev</name></expr></argument>, <argument pos:start="549:42" pos:end="549:44"><expr pos:start="549:42" pos:end="549:44"><name pos:start="549:42" pos:end="549:44">pos</name></expr></argument>, <argument pos:start="549:47" pos:end="549:49"><expr pos:start="549:47" pos:end="549:49"><name pos:start="549:47" pos:end="549:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="553:9" pos:end="553:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="555:9" pos:end="555:64"><expr pos:start="555:9" pos:end="555:63"><call pos:start="555:9" pos:end="555:63"><name pos:start="555:9" pos:end="555:40">assigned_dev_direct_config_write</name><argument_list pos:start="555:41" pos:end="555:63">(<argument pos:start="555:42" pos:end="555:44"><expr pos:start="555:42" pos:end="555:44"><name pos:start="555:42" pos:end="555:44">dev</name></expr></argument>, <argument pos:start="555:47" pos:end="555:53"><expr pos:start="555:47" pos:end="555:53"><name pos:start="555:47" pos:end="555:49">pos</name> <operator pos:start="555:51" pos:end="555:51">+</operator> <literal type="number" pos:start="555:53" pos:end="555:53">2</literal></expr></argument>, <argument pos:start="555:56" pos:end="555:62"><expr pos:start="555:56" pos:end="555:62"><name pos:start="555:56" pos:end="555:58">len</name> <operator pos:start="555:60" pos:end="555:60">-</operator> <literal type="number" pos:start="555:62" pos:end="555:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="561:5" pos:end="563:17">/* If real and virtual capability list status bits differ, virtualize the

     * access. */</comment>

    <if_stmt pos:start="565:5" pos:end="573:5"><if pos:start="565:5" pos:end="573:5">if <condition pos:start="565:8" pos:end="569:30">(<expr pos:start="565:9" pos:end="569:29"><operator pos:start="565:9" pos:end="565:9">(</operator><call pos:start="565:10" pos:end="565:51"><name pos:start="565:10" pos:end="565:21">pci_get_word</name><argument_list pos:start="565:22" pos:end="565:51">(<argument pos:start="565:23" pos:end="565:50"><expr pos:start="565:23" pos:end="565:50"><name pos:start="565:23" pos:end="565:37"><name pos:start="565:23" pos:end="565:29">pci_dev</name><operator pos:start="565:30" pos:end="565:31">-&gt;</operator><name pos:start="565:32" pos:end="565:37">config</name></name> <operator pos:start="565:39" pos:end="565:39">+</operator> <name pos:start="565:41" pos:end="565:50">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="565:53" pos:end="565:53">&amp;</operator> <name pos:start="565:55" pos:end="565:73">PCI_STATUS_CAP_LIST</name><operator pos:start="565:74" pos:end="565:74">)</operator> <operator pos:start="565:76" pos:end="565:77">!=</operator>

        <operator pos:start="567:9" pos:end="567:9">(</operator><call pos:start="567:10" pos:end="567:56"><name pos:start="567:10" pos:end="567:35">assigned_dev_pci_read_byte</name><argument_list pos:start="567:36" pos:end="567:56">(<argument pos:start="567:37" pos:end="567:43"><expr pos:start="567:37" pos:end="567:43"><name pos:start="567:37" pos:end="567:43">pci_dev</name></expr></argument>, <argument pos:start="567:46" pos:end="567:55"><expr pos:start="567:46" pos:end="567:55"><name pos:start="567:46" pos:end="567:55">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="567:58" pos:end="567:58">&amp;</operator>

         <name pos:start="569:10" pos:end="569:28">PCI_STATUS_CAP_LIST</name><operator pos:start="569:29" pos:end="569:29">)</operator></expr>)</condition> <block pos:start="569:32" pos:end="573:5">{<block_content pos:start="571:9" pos:end="571:68">

        <expr_stmt pos:start="571:9" pos:end="571:68"><expr pos:start="571:9" pos:end="571:67"><name pos:start="571:9" pos:end="571:44"><name pos:start="571:9" pos:end="571:11">dev</name><operator pos:start="571:12" pos:end="571:13">-&gt;</operator><name pos:start="571:14" pos:end="571:32">emulate_config_read</name><index pos:start="571:33" pos:end="571:44">[<expr pos:start="571:34" pos:end="571:43"><name pos:start="571:34" pos:end="571:43">PCI_STATUS</name></expr>]</index></name> <operator pos:start="571:46" pos:end="571:47">|=</operator> <name pos:start="571:49" pos:end="571:67">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="577:5" pos:end="577:13">return <expr pos:start="577:12" pos:end="577:12"><literal type="number" pos:start="577:12" pos:end="577:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
