<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24920.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_plane</name><parameter_list pos:start="1:24" pos:end="5:66">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:54">uint8_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">src</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:31">uint8_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">dst</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:48">stride</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">width</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:45"><decl pos:start="5:36" pos:end="5:45"><type pos:start="5:36" pos:end="5:45"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:45">height</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:65"><decl pos:start="5:48" pos:end="5:65"><type pos:start="5:48" pos:end="5:65"><name pos:start="5:48" pos:end="5:61">PutByteContext</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:65">pb</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="273:1">{<block_content pos:start="9:5" pos:end="271:13">

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">UtvideoContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">c</name>        <init pos:start="9:30" pos:end="9:47">= <expr pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:36">avctx</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:47">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type>  <name pos:start="11:14" pos:end="11:25"><name pos:start="11:14" pos:end="11:20">lengths</name><index pos:start="11:21" pos:end="11:25">[<expr pos:start="11:22" pos:end="11:24"><literal type="number" pos:start="11:22" pos:end="11:24">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:24"><name pos:start="13:14" pos:end="13:19">counts</name><index pos:start="13:20" pos:end="13:24">[<expr pos:start="13:21" pos:end="13:23"><literal type="number" pos:start="13:21" pos:end="13:23">256</literal></expr>]</index></name>     <init pos:start="13:30" pos:end="13:36">= <expr pos:start="13:32" pos:end="13:36"><block pos:start="13:32" pos:end="13:36">{ <expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">HuffEntry</name></type> <name pos:start="17:15" pos:end="17:21"><name pos:start="17:15" pos:end="17:16">he</name><index pos:start="17:17" pos:end="17:21">[<expr pos:start="17:18" pos:end="17:20"><literal type="number" pos:start="17:18" pos:end="17:20">256</literal></expr>]</index></name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:19">offset</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>, <decl pos:start="21:26" pos:end="21:38"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:26" pos:end="21:34">slice_len</name> <init pos:start="21:36" pos:end="21:38">= <expr pos:start="21:38" pos:end="21:38"><literal type="number" pos:start="21:38" pos:end="21:38">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type>      <name pos:start="23:14" pos:end="23:14">i</name></decl>, <decl pos:start="23:17" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:17" pos:end="23:22">sstart</name></decl>, <decl pos:start="23:25" pos:end="23:32"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:25" pos:end="23:28">send</name> <init pos:start="23:30" pos:end="23:32">= <expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type>      <name pos:start="25:14" pos:end="25:19">symbol</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:37">/* Do prediction / make planes */</comment>

    <switch pos:start="31:5" pos:end="89:5">switch <condition pos:start="31:12" pos:end="31:26">(<expr pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:13">c</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:25">frame_pred</name></name></expr>)</condition> <block pos:start="31:28" pos:end="89:5">{<block_content pos:start="33:5" pos:end="87:40">

    <case pos:start="33:5" pos:end="33:19">case <expr pos:start="33:10" pos:end="33:18"><name pos:start="33:10" pos:end="33:18">PRED_NONE</name></expr>:</case>

        <for pos:start="35:9" pos:end="45:9">for <control pos:start="35:13" pos:end="35:39">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:34"><expr pos:start="35:21" pos:end="35:33"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:33"><name pos:start="35:25" pos:end="35:25">c</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:33">slices</name></name></expr>;</condition> <incr pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:36">i</name><operator pos:start="35:37" pos:end="35:38">++</operator></expr></incr>)</control> <block pos:start="35:41" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:54">

            <expr_stmt pos:start="37:13" pos:end="37:26"><expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:18">sstart</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:25">send</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:50"><expr pos:start="39:13" pos:end="39:49"><name pos:start="39:13" pos:end="39:16">send</name>   <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:27">height</name> <operator pos:start="39:29" pos:end="39:29">*</operator> <operator pos:start="39:31" pos:end="39:31">(</operator><name pos:start="39:32" pos:end="39:32">i</name> <operator pos:start="39:34" pos:end="39:34">+</operator> <literal type="number" pos:start="39:36" pos:end="39:36">1</literal><operator pos:start="39:37" pos:end="39:37">)</operator> <operator pos:start="39:39" pos:end="39:39">/</operator> <name pos:start="39:41" pos:end="39:49"><name pos:start="39:41" pos:end="39:41">c</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:49">slices</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="43:54"><expr pos:start="41:13" pos:end="43:53"><call pos:start="41:13" pos:end="43:53"><name pos:start="41:13" pos:end="41:23">write_plane</name><argument_list pos:start="41:24" pos:end="43:53">(<argument pos:start="41:25" pos:end="41:45"><expr pos:start="41:25" pos:end="41:45"><name pos:start="41:25" pos:end="41:27">src</name> <operator pos:start="41:29" pos:end="41:29">+</operator> <name pos:start="41:31" pos:end="41:36">sstart</name> <operator pos:start="41:38" pos:end="41:38">*</operator> <name pos:start="41:40" pos:end="41:45">stride</name></expr></argument>, <argument pos:start="41:48" pos:end="41:67"><expr pos:start="41:48" pos:end="41:67"><name pos:start="41:48" pos:end="41:50">dst</name> <operator pos:start="41:52" pos:end="41:52">+</operator> <name pos:start="41:54" pos:end="41:59">sstart</name> <operator pos:start="41:61" pos:end="41:61">*</operator> <name pos:start="41:63" pos:end="41:67">width</name></expr></argument>,

                        <argument pos:start="43:25" pos:end="43:30"><expr pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:30">stride</name></expr></argument>, <argument pos:start="43:33" pos:end="43:37"><expr pos:start="43:33" pos:end="43:37"><name pos:start="43:33" pos:end="43:37">width</name></expr></argument>, <argument pos:start="43:40" pos:end="43:52"><expr pos:start="43:40" pos:end="43:52"><name pos:start="43:40" pos:end="43:43">send</name> <operator pos:start="43:45" pos:end="43:45">-</operator> <name pos:start="43:47" pos:end="43:52">sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:19">case <expr pos:start="49:10" pos:end="49:18"><name pos:start="49:10" pos:end="49:18">PRED_LEFT</name></expr>:</case>

        <for pos:start="51:9" pos:end="61:9">for <control pos:start="51:13" pos:end="51:39">(<init pos:start="51:14" pos:end="51:19"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:14">i</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</init> <condition pos:start="51:21" pos:end="51:34"><expr pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:21">i</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <name pos:start="51:25" pos:end="51:33"><name pos:start="51:25" pos:end="51:25">c</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:33">slices</name></name></expr>;</condition> <incr pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><name pos:start="51:36" pos:end="51:36">i</name><operator pos:start="51:37" pos:end="51:38">++</operator></expr></incr>)</control> <block pos:start="51:41" pos:end="61:9">{<block_content pos:start="53:13" pos:end="59:55">

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:18">sstart</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:25">send</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:50"><expr pos:start="55:13" pos:end="55:49"><name pos:start="55:13" pos:end="55:16">send</name>   <operator pos:start="55:20" pos:end="55:20">=</operator> <name pos:start="55:22" pos:end="55:27">height</name> <operator pos:start="55:29" pos:end="55:29">*</operator> <operator pos:start="55:31" pos:end="55:31">(</operator><name pos:start="55:32" pos:end="55:32">i</name> <operator pos:start="55:34" pos:end="55:34">+</operator> <literal type="number" pos:start="55:36" pos:end="55:36">1</literal><operator pos:start="55:37" pos:end="55:37">)</operator> <operator pos:start="55:39" pos:end="55:39">/</operator> <name pos:start="55:41" pos:end="55:49"><name pos:start="55:41" pos:end="55:41">c</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:49">slices</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="59:55"><expr pos:start="57:13" pos:end="59:54"><call pos:start="57:13" pos:end="59:54"><name pos:start="57:13" pos:end="57:24">left_predict</name><argument_list pos:start="57:25" pos:end="59:54">(<argument pos:start="57:26" pos:end="57:46"><expr pos:start="57:26" pos:end="57:46"><name pos:start="57:26" pos:end="57:28">src</name> <operator pos:start="57:30" pos:end="57:30">+</operator> <name pos:start="57:32" pos:end="57:37">sstart</name> <operator pos:start="57:39" pos:end="57:39">*</operator> <name pos:start="57:41" pos:end="57:46">stride</name></expr></argument>, <argument pos:start="57:49" pos:end="57:68"><expr pos:start="57:49" pos:end="57:68"><name pos:start="57:49" pos:end="57:51">dst</name> <operator pos:start="57:53" pos:end="57:53">+</operator> <name pos:start="57:55" pos:end="57:60">sstart</name> <operator pos:start="57:62" pos:end="57:62">*</operator> <name pos:start="57:64" pos:end="57:68">width</name></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:31"><expr pos:start="59:26" pos:end="59:31"><name pos:start="59:26" pos:end="59:31">stride</name></expr></argument>, <argument pos:start="59:34" pos:end="59:38"><expr pos:start="59:34" pos:end="59:38"><name pos:start="59:34" pos:end="59:38">width</name></expr></argument>, <argument pos:start="59:41" pos:end="59:53"><expr pos:start="59:41" pos:end="59:53"><name pos:start="59:41" pos:end="59:44">send</name> <operator pos:start="59:46" pos:end="59:46">-</operator> <name pos:start="59:48" pos:end="59:53">sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:21">case <expr pos:start="65:10" pos:end="65:20"><name pos:start="65:10" pos:end="65:20">PRED_MEDIAN</name></expr>:</case>

        <for pos:start="67:9" pos:end="77:9">for <control pos:start="67:13" pos:end="67:39">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:34"><expr pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:25">c</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:33">slices</name></name></expr>;</condition> <incr pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><name pos:start="67:36" pos:end="67:36">i</name><operator pos:start="67:37" pos:end="67:38">++</operator></expr></incr>)</control> <block pos:start="67:41" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:57">

            <expr_stmt pos:start="69:13" pos:end="69:26"><expr pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:18">sstart</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:25">send</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:50"><expr pos:start="71:13" pos:end="71:49"><name pos:start="71:13" pos:end="71:16">send</name>   <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:27">height</name> <operator pos:start="71:29" pos:end="71:29">*</operator> <operator pos:start="71:31" pos:end="71:31">(</operator><name pos:start="71:32" pos:end="71:32">i</name> <operator pos:start="71:34" pos:end="71:34">+</operator> <literal type="number" pos:start="71:36" pos:end="71:36">1</literal><operator pos:start="71:37" pos:end="71:37">)</operator> <operator pos:start="71:39" pos:end="71:39">/</operator> <name pos:start="71:41" pos:end="71:49"><name pos:start="71:41" pos:end="71:41">c</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:49">slices</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:57"><expr pos:start="73:13" pos:end="75:56"><call pos:start="73:13" pos:end="75:56"><name pos:start="73:13" pos:end="73:26">median_predict</name><argument_list pos:start="73:27" pos:end="75:56">(<argument pos:start="73:28" pos:end="73:28"><expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">c</name></expr></argument>, <argument pos:start="73:31" pos:end="73:51"><expr pos:start="73:31" pos:end="73:51"><name pos:start="73:31" pos:end="73:33">src</name> <operator pos:start="73:35" pos:end="73:35">+</operator> <name pos:start="73:37" pos:end="73:42">sstart</name> <operator pos:start="73:44" pos:end="73:44">*</operator> <name pos:start="73:46" pos:end="73:51">stride</name></expr></argument>, <argument pos:start="73:54" pos:end="73:73"><expr pos:start="73:54" pos:end="73:73"><name pos:start="73:54" pos:end="73:56">dst</name> <operator pos:start="73:58" pos:end="73:58">+</operator> <name pos:start="73:60" pos:end="73:65">sstart</name> <operator pos:start="73:67" pos:end="73:67">*</operator> <name pos:start="73:69" pos:end="73:73">width</name></expr></argument>,

                           <argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">stride</name></expr></argument>, <argument pos:start="75:36" pos:end="75:40"><expr pos:start="75:36" pos:end="75:40"><name pos:start="75:36" pos:end="75:40">width</name></expr></argument>, <argument pos:start="75:43" pos:end="75:55"><expr pos:start="75:43" pos:end="75:55"><name pos:start="75:43" pos:end="75:46">send</name> <operator pos:start="75:48" pos:end="75:48">-</operator> <name pos:start="75:50" pos:end="75:55">sstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <default pos:start="81:5" pos:end="81:12">default:</default>

        <expr_stmt pos:start="83:9" pos:end="85:30"><expr pos:start="83:9" pos:end="85:29"><call pos:start="83:9" pos:end="85:29"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="85:29">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:67"><expr pos:start="83:37" pos:end="83:67"><literal type="string" pos:start="83:37" pos:end="83:67">"Unknown prediction mode: %d\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:28"><expr pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:28"><name pos:start="85:16" pos:end="85:16">c</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:28">frame_pred</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:40">return <expr pos:start="87:16" pos:end="87:39"><name pos:start="87:16" pos:end="87:39">AVERROR_OPTION_NOT_FOUND</name></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="93:5" pos:end="93:35">/* Count the usage of values */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:44"><expr pos:start="95:5" pos:end="95:43"><call pos:start="95:5" pos:end="95:43"><name pos:start="95:5" pos:end="95:15">count_usage</name><argument_list pos:start="95:16" pos:end="95:43">(<argument pos:start="95:17" pos:end="95:19"><expr pos:start="95:17" pos:end="95:19"><name pos:start="95:17" pos:end="95:19">dst</name></expr></argument>, <argument pos:start="95:22" pos:end="95:26"><expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:26">width</name></expr></argument>, <argument pos:start="95:29" pos:end="95:34"><expr pos:start="95:29" pos:end="95:34"><name pos:start="95:29" pos:end="95:34">height</name></expr></argument>, <argument pos:start="95:37" pos:end="95:42"><expr pos:start="95:37" pos:end="95:42"><name pos:start="95:37" pos:end="95:42">counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:65">/* Check for a special case where only one symbol was used */</comment>

    <for pos:start="101:5" pos:end="151:5">for <control pos:start="101:9" pos:end="101:44">(<init pos:start="101:10" pos:end="101:20"><expr pos:start="101:10" pos:end="101:19"><name pos:start="101:10" pos:end="101:15">symbol</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr>;</init> <condition pos:start="101:22" pos:end="101:34"><expr pos:start="101:22" pos:end="101:33"><name pos:start="101:22" pos:end="101:27">symbol</name> <operator pos:start="101:29" pos:end="101:29">&lt;</operator> <literal type="number" pos:start="101:31" pos:end="101:33">256</literal></expr>;</condition> <incr pos:start="101:36" pos:end="101:43"><expr pos:start="101:36" pos:end="101:43"><name pos:start="101:36" pos:end="101:41">symbol</name><operator pos:start="101:42" pos:end="101:43">++</operator></expr></incr>)</control> <block pos:start="101:46" pos:end="151:5">{<block_content pos:start="105:9" pos:end="149:9">

        <comment type="block" pos:start="103:9" pos:end="103:74">/* If non-zero count is found, see if it matches width * height */</comment>

        <if_stmt pos:start="105:9" pos:end="149:9"><if pos:start="105:9" pos:end="149:9">if <condition pos:start="105:12" pos:end="105:27">(<expr pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:18">counts</name><index pos:start="105:19" pos:end="105:26">[<expr pos:start="105:20" pos:end="105:25"><name pos:start="105:20" pos:end="105:25">symbol</name></expr>]</index></name></expr>)</condition> <block pos:start="105:29" pos:end="149:9">{<block_content pos:start="109:13" pos:end="147:18">

            <comment type="block" pos:start="107:13" pos:end="107:58">/* Special case if only one symbol was used */</comment>

            <if_stmt pos:start="109:13" pos:end="145:13"><if pos:start="109:13" pos:end="145:13">if <condition pos:start="109:16" pos:end="109:49">(<expr pos:start="109:17" pos:end="109:48"><name pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:22">counts</name><index pos:start="109:23" pos:end="109:30">[<expr pos:start="109:24" pos:end="109:29"><name pos:start="109:24" pos:end="109:29">symbol</name></expr>]</index></name> <operator pos:start="109:32" pos:end="109:33">==</operator> <name pos:start="109:35" pos:end="109:39">width</name> <operator pos:start="109:41" pos:end="109:41">*</operator> <name pos:start="109:43" pos:end="109:48">height</name></expr>)</condition> <block pos:start="109:51" pos:end="145:13">{<block_content pos:start="119:17" pos:end="143:25">

                <comment type="block" pos:start="111:17" pos:end="117:19">/*

                 * Write a zero for the single symbol

                 * used in the plane, else 0xFF.

                 */</comment>

                <for pos:start="119:17" pos:end="129:17">for <control pos:start="119:21" pos:end="119:41">(<init pos:start="119:22" pos:end="119:27"><expr pos:start="119:22" pos:end="119:26"><name pos:start="119:22" pos:end="119:22">i</name> <operator pos:start="119:24" pos:end="119:24">=</operator> <literal type="number" pos:start="119:26" pos:end="119:26">0</literal></expr>;</init> <condition pos:start="119:29" pos:end="119:36"><expr pos:start="119:29" pos:end="119:35"><name pos:start="119:29" pos:end="119:29">i</name> <operator pos:start="119:31" pos:end="119:31">&lt;</operator> <literal type="number" pos:start="119:33" pos:end="119:35">256</literal></expr>;</condition> <incr pos:start="119:38" pos:end="119:40"><expr pos:start="119:38" pos:end="119:40"><name pos:start="119:38" pos:end="119:38">i</name><operator pos:start="119:39" pos:end="119:40">++</operator></expr></incr>)</control> <block pos:start="119:43" pos:end="129:17">{<block_content pos:start="121:21" pos:end="127:55">

                    <if_stmt pos:start="121:21" pos:end="127:55"><if pos:start="121:21" pos:end="123:52">if <condition pos:start="121:24" pos:end="121:36">(<expr pos:start="121:25" pos:end="121:35"><name pos:start="121:25" pos:end="121:25">i</name> <operator pos:start="121:27" pos:end="121:28">==</operator> <name pos:start="121:30" pos:end="121:35">symbol</name></expr>)</condition><block type="pseudo" pos:start="123:25" pos:end="123:52"><block_content pos:start="123:25" pos:end="123:52">

                        <expr_stmt pos:start="123:25" pos:end="123:52"><expr pos:start="123:25" pos:end="123:51"><call pos:start="123:25" pos:end="123:51"><name pos:start="123:25" pos:end="123:44">bytestream2_put_byte</name><argument_list pos:start="123:45" pos:end="123:51">(<argument pos:start="123:46" pos:end="123:47"><expr pos:start="123:46" pos:end="123:47"><name pos:start="123:46" pos:end="123:47">pb</name></expr></argument>, <argument pos:start="123:50" pos:end="123:50"><expr pos:start="123:50" pos:end="123:50"><literal type="number" pos:start="123:50" pos:end="123:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="125:21" pos:end="127:55">else<block type="pseudo" pos:start="127:25" pos:end="127:55"><block_content pos:start="127:25" pos:end="127:55">

                        <expr_stmt pos:start="127:25" pos:end="127:55"><expr pos:start="127:25" pos:end="127:54"><call pos:start="127:25" pos:end="127:54"><name pos:start="127:25" pos:end="127:44">bytestream2_put_byte</name><argument_list pos:start="127:45" pos:end="127:54">(<argument pos:start="127:46" pos:end="127:47"><expr pos:start="127:46" pos:end="127:47"><name pos:start="127:46" pos:end="127:47">pb</name></expr></argument>, <argument pos:start="127:50" pos:end="127:53"><expr pos:start="127:50" pos:end="127:53"><literal type="number" pos:start="127:50" pos:end="127:53">0xFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="133:17" pos:end="133:46">/* Write zeroes for lengths */</comment>

                <for pos:start="135:17" pos:end="137:48">for <control pos:start="135:21" pos:end="135:47">(<init pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:26"><name pos:start="135:22" pos:end="135:22">i</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <literal type="number" pos:start="135:26" pos:end="135:26">0</literal></expr>;</init> <condition pos:start="135:29" pos:end="135:42"><expr pos:start="135:29" pos:end="135:41"><name pos:start="135:29" pos:end="135:29">i</name> <operator pos:start="135:31" pos:end="135:31">&lt;</operator> <name pos:start="135:33" pos:end="135:41"><name pos:start="135:33" pos:end="135:33">c</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:41">slices</name></name></expr>;</condition> <incr pos:start="135:44" pos:end="135:46"><expr pos:start="135:44" pos:end="135:46"><name pos:start="135:44" pos:end="135:44">i</name><operator pos:start="135:45" pos:end="135:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="137:21" pos:end="137:48"><block_content pos:start="137:21" pos:end="137:48">

                    <expr_stmt pos:start="137:21" pos:end="137:48"><expr pos:start="137:21" pos:end="137:47"><call pos:start="137:21" pos:end="137:47"><name pos:start="137:21" pos:end="137:40">bytestream2_put_le32</name><argument_list pos:start="137:41" pos:end="137:47">(<argument pos:start="137:42" pos:end="137:43"><expr pos:start="137:42" pos:end="137:43"><name pos:start="137:42" pos:end="137:43">pb</name></expr></argument>, <argument pos:start="137:46" pos:end="137:46"><expr pos:start="137:46" pos:end="137:46"><literal type="number" pos:start="137:46" pos:end="137:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <comment type="block" pos:start="141:17" pos:end="141:57">/* And that's all for that plane folks */</comment>

                <return pos:start="143:17" pos:end="143:25">return <expr pos:start="143:24" pos:end="143:24"><literal type="number" pos:start="143:24" pos:end="143:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="155:5" pos:end="155:35">/* Calculate huffman lengths */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:43"><expr pos:start="157:5" pos:end="157:42"><call pos:start="157:5" pos:end="157:42"><name pos:start="157:5" pos:end="157:25">ff_huff_gen_len_table</name><argument_list pos:start="157:26" pos:end="157:42">(<argument pos:start="157:27" pos:end="157:33"><expr pos:start="157:27" pos:end="157:33"><name pos:start="157:27" pos:end="157:33">lengths</name></expr></argument>, <argument pos:start="157:36" pos:end="157:41"><expr pos:start="157:36" pos:end="157:41"><name pos:start="157:36" pos:end="157:41">counts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="169:7">/*

     * Write the plane's header into the output packet:

     * - huffman code lengths (256 bytes)

     * - slice end offsets (gotten from the slice lengths)

     */</comment>

    <for pos:start="171:5" pos:end="181:5">for <control pos:start="171:9" pos:end="171:29">(<init pos:start="171:10" pos:end="171:15"><expr pos:start="171:10" pos:end="171:14"><name pos:start="171:10" pos:end="171:10">i</name> <operator pos:start="171:12" pos:end="171:12">=</operator> <literal type="number" pos:start="171:14" pos:end="171:14">0</literal></expr>;</init> <condition pos:start="171:17" pos:end="171:24"><expr pos:start="171:17" pos:end="171:23"><name pos:start="171:17" pos:end="171:17">i</name> <operator pos:start="171:19" pos:end="171:19">&lt;</operator> <literal type="number" pos:start="171:21" pos:end="171:23">256</literal></expr>;</condition> <incr pos:start="171:26" pos:end="171:28"><expr pos:start="171:26" pos:end="171:28"><name pos:start="171:26" pos:end="171:26">i</name><operator pos:start="171:27" pos:end="171:28">++</operator></expr></incr>)</control> <block pos:start="171:31" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:22">

        <expr_stmt pos:start="173:9" pos:end="173:45"><expr pos:start="173:9" pos:end="173:44"><call pos:start="173:9" pos:end="173:44"><name pos:start="173:9" pos:end="173:28">bytestream2_put_byte</name><argument_list pos:start="173:29" pos:end="173:44">(<argument pos:start="173:30" pos:end="173:31"><expr pos:start="173:30" pos:end="173:31"><name pos:start="173:30" pos:end="173:31">pb</name></expr></argument>, <argument pos:start="173:34" pos:end="173:43"><expr pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:43"><name pos:start="173:34" pos:end="173:40">lengths</name><index pos:start="173:41" pos:end="173:43">[<expr pos:start="173:42" pos:end="173:42"><name pos:start="173:42" pos:end="173:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:31"><expr pos:start="177:9" pos:end="177:30"><name pos:start="177:9" pos:end="177:13"><name pos:start="177:9" pos:end="177:10">he</name><index pos:start="177:11" pos:end="177:13">[<expr pos:start="177:12" pos:end="177:12"><name pos:start="177:12" pos:end="177:12">i</name></expr>]</index></name><operator pos:start="177:14" pos:end="177:14">.</operator><name pos:start="177:15" pos:end="177:17">len</name> <operator pos:start="177:19" pos:end="177:19">=</operator> <name pos:start="177:21" pos:end="177:30"><name pos:start="177:21" pos:end="177:27">lengths</name><index pos:start="177:28" pos:end="177:30">[<expr pos:start="177:29" pos:end="177:29"><name pos:start="177:29" pos:end="177:29">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:22"><expr pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:13"><name pos:start="179:9" pos:end="179:10">he</name><index pos:start="179:11" pos:end="179:13">[<expr pos:start="179:12" pos:end="179:12"><name pos:start="179:12" pos:end="179:12">i</name></expr>]</index></name><operator pos:start="179:14" pos:end="179:14">.</operator><name pos:start="179:15" pos:end="179:17">sym</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:21">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="185:5" pos:end="185:48">/* Calculate the huffman codes themselves */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:24"><expr pos:start="187:5" pos:end="187:23"><call pos:start="187:5" pos:end="187:23"><name pos:start="187:5" pos:end="187:19">calculate_codes</name><argument_list pos:start="187:20" pos:end="187:23">(<argument pos:start="187:21" pos:end="187:22"><expr pos:start="187:21" pos:end="187:22"><name pos:start="187:21" pos:end="187:22">he</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:13"><expr pos:start="191:5" pos:end="191:12"><name pos:start="191:5" pos:end="191:8">send</name> <operator pos:start="191:10" pos:end="191:10">=</operator> <literal type="number" pos:start="191:12" pos:end="191:12">0</literal></expr>;</expr_stmt>

    <for pos:start="193:5" pos:end="261:5">for <control pos:start="193:9" pos:end="193:35">(<init pos:start="193:10" pos:end="193:15"><expr pos:start="193:10" pos:end="193:14"><name pos:start="193:10" pos:end="193:10">i</name> <operator pos:start="193:12" pos:end="193:12">=</operator> <literal type="number" pos:start="193:14" pos:end="193:14">0</literal></expr>;</init> <condition pos:start="193:17" pos:end="193:30"><expr pos:start="193:17" pos:end="193:29"><name pos:start="193:17" pos:end="193:17">i</name> <operator pos:start="193:19" pos:end="193:19">&lt;</operator> <name pos:start="193:21" pos:end="193:29"><name pos:start="193:21" pos:end="193:21">c</name><operator pos:start="193:22" pos:end="193:23">-&gt;</operator><name pos:start="193:24" pos:end="193:29">slices</name></name></expr>;</condition> <incr pos:start="193:32" pos:end="193:34"><expr pos:start="193:32" pos:end="193:34"><name pos:start="193:32" pos:end="193:32">i</name><operator pos:start="193:33" pos:end="193:34">++</operator></expr></incr>)</control> <block pos:start="193:37" pos:end="261:5">{<block_content pos:start="195:9" pos:end="259:27">

        <expr_stmt pos:start="195:9" pos:end="195:23"><expr pos:start="195:9" pos:end="195:22"><name pos:start="195:9" pos:end="195:14">sstart</name>  <operator pos:start="195:17" pos:end="195:17">=</operator> <name pos:start="195:19" pos:end="195:22">send</name></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:47"><expr pos:start="197:9" pos:end="197:46"><name pos:start="197:9" pos:end="197:12">send</name>    <operator pos:start="197:17" pos:end="197:17">=</operator> <name pos:start="197:19" pos:end="197:24">height</name> <operator pos:start="197:26" pos:end="197:26">*</operator> <operator pos:start="197:28" pos:end="197:28">(</operator><name pos:start="197:29" pos:end="197:29">i</name> <operator pos:start="197:31" pos:end="197:31">+</operator> <literal type="number" pos:start="197:33" pos:end="197:33">1</literal><operator pos:start="197:34" pos:end="197:34">)</operator> <operator pos:start="197:36" pos:end="197:36">/</operator> <name pos:start="197:38" pos:end="197:46"><name pos:start="197:38" pos:end="197:38">c</name><operator pos:start="197:39" pos:end="197:40">-&gt;</operator><name pos:start="197:41" pos:end="197:46">slices</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="201:9" pos:end="207:11">/*

         * Write the huffman codes to a buffer,

         * get the offset in bits and convert to bytes.

         */</comment>

        <expr_stmt pos:start="209:9" pos:end="213:59"><expr pos:start="209:9" pos:end="213:58"><name pos:start="209:9" pos:end="209:14">offset</name> <operator pos:start="209:16" pos:end="209:17">+=</operator> <call pos:start="209:19" pos:end="213:53"><name pos:start="209:19" pos:end="209:34">write_huff_codes</name><argument_list pos:start="209:35" pos:end="213:53">(<argument pos:start="209:36" pos:end="209:55"><expr pos:start="209:36" pos:end="209:55"><name pos:start="209:36" pos:end="209:38">dst</name> <operator pos:start="209:40" pos:end="209:40">+</operator> <name pos:start="209:42" pos:end="209:47">sstart</name> <operator pos:start="209:49" pos:end="209:49">*</operator> <name pos:start="209:51" pos:end="209:55">width</name></expr></argument>, <argument pos:start="209:58" pos:end="209:70"><expr pos:start="209:58" pos:end="209:70"><name pos:start="209:58" pos:end="209:70"><name pos:start="209:58" pos:end="209:58">c</name><operator pos:start="209:59" pos:end="209:60">-&gt;</operator><name pos:start="209:61" pos:end="209:70">slice_bits</name></name></expr></argument>,

                                   <argument pos:start="211:36" pos:end="211:58"><expr pos:start="211:36" pos:end="211:58"><name pos:start="211:36" pos:end="211:40">width</name> <operator pos:start="211:42" pos:end="211:42">*</operator> <operator pos:start="211:44" pos:end="211:44">(</operator><name pos:start="211:45" pos:end="211:48">send</name> <operator pos:start="211:50" pos:end="211:50">-</operator> <name pos:start="211:52" pos:end="211:57">sstart</name><operator pos:start="211:58" pos:end="211:58">)</operator></expr></argument>, <argument pos:start="211:61" pos:end="211:65"><expr pos:start="211:61" pos:end="211:65"><name pos:start="211:61" pos:end="211:65">width</name></expr></argument>,

                                   <argument pos:start="213:36" pos:end="213:48"><expr pos:start="213:36" pos:end="213:48"><name pos:start="213:36" pos:end="213:39">send</name> <operator pos:start="213:41" pos:end="213:41">-</operator> <name pos:start="213:43" pos:end="213:48">sstart</name></expr></argument>, <argument pos:start="213:51" pos:end="213:52"><expr pos:start="213:51" pos:end="213:52"><name pos:start="213:51" pos:end="213:52">he</name></expr></argument>)</argument_list></call> <operator pos:start="213:55" pos:end="213:56">&gt;&gt;</operator> <literal type="number" pos:start="213:58" pos:end="213:58">3</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:39"><expr pos:start="217:9" pos:end="217:38"><name pos:start="217:9" pos:end="217:17">slice_len</name> <operator pos:start="217:19" pos:end="217:19">=</operator> <name pos:start="217:21" pos:end="217:26">offset</name> <operator pos:start="217:28" pos:end="217:28">-</operator> <name pos:start="217:30" pos:end="217:38">slice_len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="221:9" pos:end="221:48">/* Byteswap the written huffman codes */</comment>

        <expr_stmt pos:start="223:9" pos:end="227:41"><expr pos:start="223:9" pos:end="227:40"><call pos:start="223:9" pos:end="227:40"><name pos:start="223:9" pos:end="223:24"><name pos:start="223:9" pos:end="223:9">c</name><operator pos:start="223:10" pos:end="223:11">-&gt;</operator><name pos:start="223:12" pos:end="223:14">dsp</name><operator pos:start="223:15" pos:end="223:15">.</operator><name pos:start="223:16" pos:end="223:24">bswap_buf</name></name><argument_list pos:start="223:25" pos:end="227:40">(<argument pos:start="223:26" pos:end="223:51"><expr pos:start="223:26" pos:end="223:51"><operator pos:start="223:26" pos:end="223:26">(</operator><name pos:start="223:27" pos:end="223:34">uint32_t</name> <operator pos:start="223:36" pos:end="223:36">*</operator><operator pos:start="223:37" pos:end="223:37">)</operator> <name pos:start="223:39" pos:end="223:51"><name pos:start="223:39" pos:end="223:39">c</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:51">slice_bits</name></name></expr></argument>,

                         <argument pos:start="225:26" pos:end="225:51"><expr pos:start="225:26" pos:end="225:51"><operator pos:start="225:26" pos:end="225:26">(</operator><name pos:start="225:27" pos:end="225:34">uint32_t</name> <operator pos:start="225:36" pos:end="225:36">*</operator><operator pos:start="225:37" pos:end="225:37">)</operator> <name pos:start="225:39" pos:end="225:51"><name pos:start="225:39" pos:end="225:39">c</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:51">slice_bits</name></name></expr></argument>,

                         <argument pos:start="227:26" pos:end="227:39"><expr pos:start="227:26" pos:end="227:39"><name pos:start="227:26" pos:end="227:34">slice_len</name> <operator pos:start="227:36" pos:end="227:37">&gt;&gt;</operator> <literal type="number" pos:start="227:39" pos:end="227:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="231:9" pos:end="231:44">/* Write the offset to the stream */</comment>

        <expr_stmt pos:start="233:9" pos:end="233:41"><expr pos:start="233:9" pos:end="233:40"><call pos:start="233:9" pos:end="233:40"><name pos:start="233:9" pos:end="233:28">bytestream2_put_le32</name><argument_list pos:start="233:29" pos:end="233:40">(<argument pos:start="233:30" pos:end="233:31"><expr pos:start="233:30" pos:end="233:31"><name pos:start="233:30" pos:end="233:31">pb</name></expr></argument>, <argument pos:start="233:34" pos:end="233:39"><expr pos:start="233:34" pos:end="233:39"><name pos:start="233:34" pos:end="233:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:49">/* Seek to the data part of the packet */</comment>

        <expr_stmt pos:start="239:9" pos:end="241:57"><expr pos:start="239:9" pos:end="241:56"><call pos:start="239:9" pos:end="241:56"><name pos:start="239:9" pos:end="239:26">bytestream2_seek_p</name><argument_list pos:start="239:27" pos:end="241:56">(<argument pos:start="239:28" pos:end="239:29"><expr pos:start="239:28" pos:end="239:29"><name pos:start="239:28" pos:end="239:29">pb</name></expr></argument>, <argument pos:start="239:32" pos:end="241:45"><expr pos:start="239:32" pos:end="241:45"><literal type="number" pos:start="239:32" pos:end="239:32">4</literal> <operator pos:start="239:34" pos:end="239:34">*</operator> <operator pos:start="239:36" pos:end="239:36">(</operator><name pos:start="239:37" pos:end="239:45"><name pos:start="239:37" pos:end="239:37">c</name><operator pos:start="239:38" pos:end="239:39">-&gt;</operator><name pos:start="239:40" pos:end="239:45">slices</name></name> <operator pos:start="239:47" pos:end="239:47">-</operator> <name pos:start="239:49" pos:end="239:49">i</name> <operator pos:start="239:51" pos:end="239:51">-</operator> <literal type="number" pos:start="239:53" pos:end="239:53">1</literal><operator pos:start="239:54" pos:end="239:54">)</operator> <operator pos:start="239:56" pos:end="239:56">+</operator>

                           <name pos:start="241:28" pos:end="241:33">offset</name> <operator pos:start="241:35" pos:end="241:35">-</operator> <name pos:start="241:37" pos:end="241:45">slice_len</name></expr></argument>, <argument pos:start="241:48" pos:end="241:55"><expr pos:start="241:48" pos:end="241:55"><name pos:start="241:48" pos:end="241:55">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="245:9" pos:end="245:59">/* Write the slices' data into the output packet */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:61"><expr pos:start="247:9" pos:end="247:60"><call pos:start="247:9" pos:end="247:60"><name pos:start="247:9" pos:end="247:30">bytestream2_put_buffer</name><argument_list pos:start="247:31" pos:end="247:60">(<argument pos:start="247:32" pos:end="247:33"><expr pos:start="247:32" pos:end="247:33"><name pos:start="247:32" pos:end="247:33">pb</name></expr></argument>, <argument pos:start="247:36" pos:end="247:48"><expr pos:start="247:36" pos:end="247:48"><name pos:start="247:36" pos:end="247:48"><name pos:start="247:36" pos:end="247:36">c</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:48">slice_bits</name></name></expr></argument>, <argument pos:start="247:51" pos:end="247:59"><expr pos:start="247:51" pos:end="247:59"><name pos:start="247:51" pos:end="247:59">slice_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="251:9" pos:end="251:44">/* Seek back to the slice offsets */</comment>

        <expr_stmt pos:start="253:9" pos:end="255:37"><expr pos:start="253:9" pos:end="255:36"><call pos:start="253:9" pos:end="255:36"><name pos:start="253:9" pos:end="253:26">bytestream2_seek_p</name><argument_list pos:start="253:27" pos:end="255:36">(<argument pos:start="253:28" pos:end="253:29"><expr pos:start="253:28" pos:end="253:29"><name pos:start="253:28" pos:end="253:29">pb</name></expr></argument>, <argument pos:start="253:32" pos:end="253:64"><expr pos:start="253:32" pos:end="253:64"><operator pos:start="253:32" pos:end="253:32">-</operator><literal type="number" pos:start="253:33" pos:end="253:33">4</literal> <operator pos:start="253:35" pos:end="253:35">*</operator> <operator pos:start="253:37" pos:end="253:37">(</operator><name pos:start="253:38" pos:end="253:46"><name pos:start="253:38" pos:end="253:38">c</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:46">slices</name></name> <operator pos:start="253:48" pos:end="253:48">-</operator> <name pos:start="253:50" pos:end="253:50">i</name> <operator pos:start="253:52" pos:end="253:52">-</operator> <literal type="number" pos:start="253:54" pos:end="253:54">1</literal><operator pos:start="253:55" pos:end="253:55">)</operator> <operator pos:start="253:57" pos:end="253:57">-</operator> <name pos:start="253:59" pos:end="253:64">offset</name></expr></argument>,

                           <argument pos:start="255:28" pos:end="255:35"><expr pos:start="255:28" pos:end="255:35"><name pos:start="255:28" pos:end="255:35">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="259:9" pos:end="259:27"><expr pos:start="259:9" pos:end="259:26"><name pos:start="259:9" pos:end="259:17">slice_len</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <name pos:start="259:21" pos:end="259:26">offset</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="265:5" pos:end="265:60">/* And at the end seek to the end of written slice(s) */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:45"><expr pos:start="267:5" pos:end="267:44"><call pos:start="267:5" pos:end="267:44"><name pos:start="267:5" pos:end="267:22">bytestream2_seek_p</name><argument_list pos:start="267:23" pos:end="267:44">(<argument pos:start="267:24" pos:end="267:25"><expr pos:start="267:24" pos:end="267:25"><name pos:start="267:24" pos:end="267:25">pb</name></expr></argument>, <argument pos:start="267:28" pos:end="267:33"><expr pos:start="267:28" pos:end="267:33"><name pos:start="267:28" pos:end="267:33">offset</name></expr></argument>, <argument pos:start="267:36" pos:end="267:43"><expr pos:start="267:36" pos:end="267:43"><name pos:start="267:36" pos:end="267:43">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="271:5" pos:end="271:13">return <expr pos:start="271:12" pos:end="271:12"><literal type="number" pos:start="271:12" pos:end="271:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
