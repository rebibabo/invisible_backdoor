<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19409.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">float_number</name><parameter_list pos:start="1:25" pos:end="1:30">(<parameter pos:start="1:26" pos:end="1:29"><decl pos:start="1:26" pos:end="1:29"><type pos:start="1:26" pos:end="1:29"><name pos:start="1:26" pos:end="1:29">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <struct pos:start="7:5" pos:end="27:6">struct <block pos:start="7:12" pos:end="15:5">{

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:20"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:18">char</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:27">encoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:23"><decl pos:start="11:9" pos:end="11:22"><type pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:14">double</name></type> <name pos:start="11:16" pos:end="11:22">decoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:17"><decl pos:start="13:9" pos:end="13:16"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:16">skip</name></decl>;</decl_stmt>

    }</block> <decl pos:start="15:7" pos:end="27:5"><name pos:start="15:7" pos:end="15:18"><name pos:start="15:7" pos:end="15:16">test_cases</name><index pos:start="15:17" pos:end="15:18">[]</index></name> <init pos:start="15:20" pos:end="27:5">= <expr pos:start="15:22" pos:end="27:5"><block pos:start="15:22" pos:end="27:5">{

        <expr pos:start="17:9" pos:end="17:26"><block pos:start="17:9" pos:end="17:26">{ <expr pos:start="17:11" pos:end="17:17"><literal type="string" pos:start="17:11" pos:end="17:17">"32.43"</literal></expr>, <expr pos:start="17:20" pos:end="17:24"><literal type="number" pos:start="17:20" pos:end="17:24">32.43</literal></expr> }</block></expr>,

        <expr pos:start="19:9" pos:end="19:26"><block pos:start="19:9" pos:end="19:26">{ <expr pos:start="19:11" pos:end="19:17"><literal type="string" pos:start="19:11" pos:end="19:17">"0.222"</literal></expr>, <expr pos:start="19:20" pos:end="19:24"><literal type="number" pos:start="19:20" pos:end="19:24">0.222</literal></expr> }</block></expr>,

        <expr pos:start="21:9" pos:end="21:34"><block pos:start="21:9" pos:end="21:34">{ <expr pos:start="21:11" pos:end="21:21"><literal type="string" pos:start="21:11" pos:end="21:21">"-32.12313"</literal></expr>, <expr pos:start="21:24" pos:end="21:32"><operator pos:start="21:24" pos:end="21:24">-</operator><literal type="number" pos:start="21:25" pos:end="21:32">32.12313</literal></expr> }</block></expr>,

        <expr pos:start="23:9" pos:end="23:47"><block pos:start="23:9" pos:end="23:47">{ <expr pos:start="23:11" pos:end="23:22"><literal type="string" pos:start="23:11" pos:end="23:22">"-32.20e-10"</literal></expr>, <expr pos:start="23:25" pos:end="23:34"><operator pos:start="23:25" pos:end="23:25">-</operator><literal type="number" pos:start="23:26" pos:end="23:34">32.20e-10</literal></expr>, <expr pos:start="23:37" pos:end="23:45"><operator pos:start="23:37" pos:end="23:37">.</operator><name pos:start="23:38" pos:end="23:41">skip</name> <operator pos:start="23:43" pos:end="23:43">=</operator> <literal type="number" pos:start="23:45" pos:end="23:45">1</literal></expr> }</block></expr>,

        <expr pos:start="25:9" pos:end="25:11"><block pos:start="25:9" pos:end="25:11">{ }</block></expr>,

    }</block></expr></init></decl>;</struct>



    <for pos:start="31:5" pos:end="67:5">for <control pos:start="31:9" pos:end="31:43">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:38"><expr pos:start="31:17" pos:end="31:37"><name pos:start="31:17" pos:end="31:29"><name pos:start="31:17" pos:end="31:26">test_cases</name><index pos:start="31:27" pos:end="31:29">[<expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">i</name></expr>]</index></name><operator pos:start="31:30" pos:end="31:30">.</operator><name pos:start="31:31" pos:end="31:37">encoded</name></expr>;</condition> <incr pos:start="31:40" pos:end="31:42"><expr pos:start="31:40" pos:end="31:42"><name pos:start="31:40" pos:end="31:40">i</name><operator pos:start="31:41" pos:end="31:42">++</operator></expr></incr>)</control> <block pos:start="31:45" pos:end="67:5">{<block_content pos:start="33:9" pos:end="65:24">

        <decl_stmt pos:start="33:9" pos:end="33:21"><decl pos:start="33:9" pos:end="33:20"><type pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:15">QObject</name> <modifier pos:start="33:17" pos:end="33:17">*</modifier></type><name pos:start="33:18" pos:end="33:20">obj</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:23"><decl pos:start="35:9" pos:end="35:22"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:14">QFloat</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:22">qfloat</name></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:11">obj</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:60"><name pos:start="39:15" pos:end="39:31">qobject_from_json</name><argument_list pos:start="39:32" pos:end="39:60">(<argument pos:start="39:33" pos:end="39:53"><expr pos:start="39:33" pos:end="39:53"><name pos:start="39:33" pos:end="39:45"><name pos:start="39:33" pos:end="39:42">test_cases</name><index pos:start="39:43" pos:end="39:45">[<expr pos:start="39:44" pos:end="39:44"><name pos:start="39:44" pos:end="39:44">i</name></expr>]</index></name><operator pos:start="39:46" pos:end="39:46">.</operator><name pos:start="39:47" pos:end="39:53">encoded</name></expr></argument>, <argument pos:start="39:56" pos:end="39:59"><expr pos:start="39:56" pos:end="39:59"><name pos:start="39:56" pos:end="39:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:14">qfloat</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:39"><name pos:start="41:18" pos:end="41:34">qobject_to_qfloat</name><argument_list pos:start="41:35" pos:end="41:39">(<argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:38">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><call pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:16">g_assert</name><argument_list pos:start="43:17" pos:end="43:24">(<argument pos:start="43:18" pos:end="43:23"><expr pos:start="43:18" pos:end="43:23"><name pos:start="43:18" pos:end="43:23">qfloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:69"><expr pos:start="45:9" pos:end="45:68"><call pos:start="45:9" pos:end="45:68"><name pos:start="45:9" pos:end="45:16">g_assert</name><argument_list pos:start="45:17" pos:end="45:68">(<argument pos:start="45:18" pos:end="45:67"><expr pos:start="45:18" pos:end="45:67"><call pos:start="45:18" pos:end="45:42"><name pos:start="45:18" pos:end="45:34">qfloat_get_double</name><argument_list pos:start="45:35" pos:end="45:42">(<argument pos:start="45:36" pos:end="45:41"><expr pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:41">qfloat</name></expr></argument>)</argument_list></call> <operator pos:start="45:44" pos:end="45:45">==</operator> <name pos:start="45:47" pos:end="45:59"><name pos:start="45:47" pos:end="45:56">test_cases</name><index pos:start="45:57" pos:end="45:59">[<expr pos:start="45:58" pos:end="45:58"><name pos:start="45:58" pos:end="45:58">i</name></expr>]</index></name><operator pos:start="45:60" pos:end="45:60">.</operator><name pos:start="45:61" pos:end="45:67">decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="61:9"><if pos:start="49:9" pos:end="61:9">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:22">test_cases</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><name pos:start="49:24" pos:end="49:24">i</name></expr>]</index></name><operator pos:start="49:26" pos:end="49:26">.</operator><name pos:start="49:27" pos:end="49:30">skip</name> <operator pos:start="49:32" pos:end="49:33">==</operator> <literal type="number" pos:start="49:35" pos:end="49:35">0</literal></expr>)</condition> <block pos:start="49:38" pos:end="61:9">{<block_content pos:start="51:13" pos:end="59:25">

            <decl_stmt pos:start="51:13" pos:end="51:25"><decl pos:start="51:13" pos:end="51:24"><type pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:19">QString</name> <modifier pos:start="51:21" pos:end="51:21">*</modifier></type><name pos:start="51:22" pos:end="51:24">str</name></decl>;</decl_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:15">str</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="55:38"><name pos:start="55:19" pos:end="55:33">qobject_to_json</name><argument_list pos:start="55:34" pos:end="55:38">(<argument pos:start="55:35" pos:end="55:37"><expr pos:start="55:35" pos:end="55:37"><name pos:start="55:35" pos:end="55:37">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:79"><expr pos:start="57:13" pos:end="57:78"><call pos:start="57:13" pos:end="57:78"><name pos:start="57:13" pos:end="57:20">g_assert</name><argument_list pos:start="57:21" pos:end="57:78">(<argument pos:start="57:22" pos:end="57:77"><expr pos:start="57:22" pos:end="57:77"><call pos:start="57:22" pos:end="57:72"><name pos:start="57:22" pos:end="57:27">strcmp</name><argument_list pos:start="57:28" pos:end="57:72">(<argument pos:start="57:29" pos:end="57:48"><expr pos:start="57:29" pos:end="57:48"><call pos:start="57:29" pos:end="57:48"><name pos:start="57:29" pos:end="57:43">qstring_get_str</name><argument_list pos:start="57:44" pos:end="57:48">(<argument pos:start="57:45" pos:end="57:47"><expr pos:start="57:45" pos:end="57:47"><name pos:start="57:45" pos:end="57:47">str</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:51" pos:end="57:71"><expr pos:start="57:51" pos:end="57:71"><name pos:start="57:51" pos:end="57:63"><name pos:start="57:51" pos:end="57:60">test_cases</name><index pos:start="57:61" pos:end="57:63">[<expr pos:start="57:62" pos:end="57:62"><name pos:start="57:62" pos:end="57:62">i</name></expr>]</index></name><operator pos:start="57:64" pos:end="57:64">.</operator><name pos:start="57:65" pos:end="57:71">encoded</name></expr></argument>)</argument_list></call> <operator pos:start="57:74" pos:end="57:75">==</operator> <literal type="number" pos:start="57:77" pos:end="57:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:25"><expr pos:start="59:13" pos:end="59:24"><call pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:19">QDECREF</name><argument_list pos:start="59:20" pos:end="59:24">(<argument pos:start="59:21" pos:end="59:23"><expr pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><call pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:15">QDECREF</name><argument_list pos:start="65:16" pos:end="65:23">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">qfloat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
