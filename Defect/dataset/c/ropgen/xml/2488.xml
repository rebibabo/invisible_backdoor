<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2488.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">stream_desc_store</name><parameter_list pos:start="1:30" pos:end="1:60">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:36">struct</name> <name pos:start="1:38" pos:end="1:43">Stream</name></name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:54">hwaddr</name></type> <name pos:start="1:56" pos:end="1:59">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="29:1">{<block_content pos:start="5:5" pos:end="27:59">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:16">SDesc</name></name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">d</name> <init pos:start="5:21" pos:end="5:30">= <expr pos:start="5:23" pos:end="5:30"><operator pos:start="5:23" pos:end="5:23">&amp;</operator><name pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:24">s</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:48">/* Convert from host endianness into LE.  */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:5">d</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:21">buffer_address</name></name> <operator pos:start="13:23" pos:end="13:23">=</operator> <call pos:start="13:25" pos:end="13:54"><name pos:start="13:25" pos:end="13:35">cpu_to_le64</name><argument_list pos:start="13:36" pos:end="13:54">(<argument pos:start="13:37" pos:end="13:53"><expr pos:start="13:37" pos:end="13:53"><name pos:start="13:37" pos:end="13:53"><name pos:start="13:37" pos:end="13:37">d</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:53">buffer_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:5">d</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:14">nxtdesc</name></name> <operator pos:start="15:16" pos:end="15:16">=</operator> <call pos:start="15:18" pos:end="15:40"><name pos:start="15:18" pos:end="15:28">cpu_to_le64</name><argument_list pos:start="15:29" pos:end="15:40">(<argument pos:start="15:30" pos:end="15:39"><expr pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:30">d</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:39">nxtdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:5">d</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:14">control</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:40"><name pos:start="17:18" pos:end="17:28">cpu_to_le32</name><argument_list pos:start="17:29" pos:end="17:40">(<argument pos:start="17:30" pos:end="17:39"><expr pos:start="17:30" pos:end="17:39"><name pos:start="17:30" pos:end="17:39"><name pos:start="17:30" pos:end="17:30">d</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:39">control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:5">d</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:13">status</name></name> <operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:38"><name pos:start="19:17" pos:end="19:27">cpu_to_le32</name><argument_list pos:start="19:28" pos:end="19:38">(<argument pos:start="19:29" pos:end="19:37"><expr pos:start="19:29" pos:end="19:37"><name pos:start="19:29" pos:end="19:37"><name pos:start="19:29" pos:end="19:29">d</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:37">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="25:5">for <control pos:start="21:9" pos:end="21:44">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:39"><expr pos:start="21:17" pos:end="21:38"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <call pos:start="21:21" pos:end="21:38"><name pos:start="21:21" pos:end="21:30">ARRAY_SIZE</name><argument_list pos:start="21:31" pos:end="21:38">(<argument pos:start="21:32" pos:end="21:37"><expr pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:37"><name pos:start="21:32" pos:end="21:32">d</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:37">app</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:41">i</name><operator pos:start="21:42" pos:end="21:43">++</operator></expr></incr>)</control> <block pos:start="21:46" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:43">

        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">d</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">app</name><index pos:start="23:15" pos:end="23:17">[<expr pos:start="23:16" pos:end="23:16"><name pos:start="23:16" pos:end="23:16">i</name></expr>]</index></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:42"><name pos:start="23:21" pos:end="23:31">cpu_to_le32</name><argument_list pos:start="23:32" pos:end="23:42">(<argument pos:start="23:33" pos:end="23:41"><expr pos:start="23:33" pos:end="23:41"><name pos:start="23:33" pos:end="23:41"><name pos:start="23:33" pos:end="23:33">d</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:38">app</name><index pos:start="23:39" pos:end="23:41">[<expr pos:start="23:40" pos:end="23:40"><name pos:start="23:40" pos:end="23:40">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><call pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:29">cpu_physical_memory_write</name><argument_list pos:start="27:30" pos:end="27:58">(<argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">addr</name></expr></argument>, <argument pos:start="27:37" pos:end="27:46"><expr pos:start="27:37" pos:end="27:46"><operator pos:start="27:37" pos:end="27:37">(</operator><name pos:start="27:38" pos:end="27:41">void</name> <operator pos:start="27:43" pos:end="27:43">*</operator><operator pos:start="27:44" pos:end="27:44">)</operator> <name pos:start="27:46" pos:end="27:46">d</name></expr></argument>, <argument pos:start="27:49" pos:end="27:57"><expr pos:start="27:49" pos:end="27:57"><sizeof pos:start="27:49" pos:end="27:54">sizeof <name/></sizeof>*<name pos:start="27:57" pos:end="27:57">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
