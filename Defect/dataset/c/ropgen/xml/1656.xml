<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1656.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">dv_decode_ac</name><parameter_list pos:start="1:25" pos:end="1:74">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:38">GetBitContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">gb</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:53">BlockInfo</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">mb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:66">DCTELEM</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">block</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:18">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">last_index</name> <init pos:start="5:20" pos:end="5:38">= <expr pos:start="5:22" pos:end="5:38"><call pos:start="5:22" pos:end="5:38"><name pos:start="5:22" pos:end="5:34">get_bits_size</name><argument_list pos:start="5:35" pos:end="5:38">(<argument pos:start="5:36" pos:end="5:37"><expr pos:start="5:36" pos:end="5:37"><name pos:start="5:36" pos:end="5:37">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:29">scan_table</name> <init pos:start="7:31" pos:end="7:46">= <expr pos:start="7:33" pos:end="7:46"><name pos:start="7:33" pos:end="7:46"><name pos:start="7:33" pos:end="7:34">mb</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:46">scan_table</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:30">shift_table</name> <init pos:start="9:32" pos:end="9:48">= <expr pos:start="9:34" pos:end="9:48"><name pos:start="9:34" pos:end="9:48"><name pos:start="9:34" pos:end="9:35">mb</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:48">shift_table</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">pos</name> <init pos:start="11:13" pos:end="11:21">= <expr pos:start="11:15" pos:end="11:21"><name pos:start="11:15" pos:end="11:21"><name pos:start="11:15" pos:end="11:16">mb</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:21">pos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:25">partial_bit_count</name> <init pos:start="13:27" pos:end="13:49">= <expr pos:start="13:29" pos:end="13:49"><name pos:start="13:29" pos:end="13:49"><name pos:start="13:29" pos:end="13:30">mb</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:49">partial_bit_count</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">level</name></decl>, <decl pos:start="15:16" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:16" pos:end="15:19">pos1</name></decl>, <decl pos:start="15:22" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:24">run</name></decl>, <decl pos:start="15:27" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:33">vlc_len</name></decl>, <decl pos:start="15:36" pos:end="15:40"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:36" pos:end="15:40">index</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><call pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:15">OPEN_READER</name><argument_list pos:start="19:16" pos:end="19:23">(<argument pos:start="19:17" pos:end="19:18"><expr pos:start="19:17" pos:end="19:18"><name pos:start="19:17" pos:end="19:18">re</name></expr></argument>, <argument pos:start="19:21" pos:end="19:22"><expr pos:start="19:21" pos:end="19:22"><name pos:start="19:21" pos:end="19:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><call pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:16">UPDATE_CACHE</name><argument_list pos:start="21:17" pos:end="21:24">(<argument pos:start="21:18" pos:end="21:19"><expr pos:start="21:18" pos:end="21:19"><name pos:start="21:18" pos:end="21:19">re</name></expr></argument>, <argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><name pos:start="21:22" pos:end="21:23">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="25:5" pos:end="25:55">/* if we must parse a partial vlc, we do it here */</comment>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:30">(<expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:25">partial_bit_count</name> <operator pos:start="27:27" pos:end="27:27">&gt;</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>)</condition> <block pos:start="27:32" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:34">

        <expr_stmt pos:start="29:9" pos:end="31:88"><expr pos:start="29:9" pos:end="31:87"><name pos:start="29:9" pos:end="29:16">re_cache</name> <operator pos:start="29:18" pos:end="29:18">=</operator> <operator pos:start="29:20" pos:end="29:20">(</operator><operator pos:start="29:21" pos:end="29:21">(</operator><name pos:start="29:22" pos:end="29:29">unsigned</name><operator pos:start="29:30" pos:end="29:30">)</operator><name pos:start="29:31" pos:end="29:38">re_cache</name> <operator pos:start="29:40" pos:end="29:41">&gt;&gt;</operator> <name pos:start="29:43" pos:end="29:59">partial_bit_count</name><operator pos:start="29:60" pos:end="29:60">)</operator> <operator pos:start="29:62" pos:end="29:62">|</operator>

	           <operator pos:start="31:20" pos:end="31:20">(</operator><name pos:start="31:21" pos:end="31:42"><name pos:start="31:21" pos:end="31:22">mb</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:42">partial_bit_buffer</name></name> <operator pos:start="31:44" pos:end="31:45">&lt;&lt;</operator> <operator pos:start="31:47" pos:end="31:47">(</operator><sizeof pos:start="31:48" pos:end="31:63">sizeof<argument_list pos:start="31:54" pos:end="31:63">(<argument pos:start="31:55" pos:end="31:62"><expr pos:start="31:55" pos:end="31:62"><name pos:start="31:55" pos:end="31:62">re_cache</name></expr></argument>)</argument_list></sizeof><operator pos:start="31:64" pos:end="31:64">*</operator><literal type="number" pos:start="31:65" pos:end="31:67">8</literal> <operator pos:start="31:67" pos:end="31:67">-</operator> <name pos:start="31:69" pos:end="31:85">partial_bit_count</name><operator pos:start="31:86" pos:end="31:86">)</operator><operator pos:start="31:87" pos:end="31:87">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:38"><expr pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:16">re_index</name> <operator pos:start="33:18" pos:end="33:19">-=</operator> <name pos:start="33:21" pos:end="33:37">partial_bit_count</name></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:10">mb</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:29">partial_bit_count</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <literal type="number" pos:start="35:33" pos:end="35:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:61">/* get the AC coefficients until last_index is reached */</comment>

    <for pos:start="43:5" pos:end="117:5">for<control pos:start="43:8" pos:end="43:11">(<init pos:start="43:9" pos:end="43:9">;</init><condition pos:start="43:10" pos:end="43:10">;</condition><incr/>)</control> <block pos:start="43:13" pos:end="117:5">{<block_content pos:start="47:9" pos:end="115:29">

<cpp:ifdef pos:start="45:1" pos:end="45:16">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="47:9" pos:end="50:0"><expr pos:start="47:9" pos:end="47:82"><call pos:start="47:9" pos:end="47:82"><name pos:start="47:9" pos:end="47:14">printf</name><argument_list pos:start="47:15" pos:end="47:82">(<argument pos:start="47:16" pos:end="47:42"><expr pos:start="47:16" pos:end="47:42"><literal type="string" pos:start="47:16" pos:end="47:42">"%2d: bits=%04x index=%d\n"</literal></expr></argument>, <argument pos:start="47:45" pos:end="47:47"><expr pos:start="47:45" pos:end="47:47"><name pos:start="47:45" pos:end="47:47">pos</name></expr></argument>, <argument pos:start="47:50" pos:end="47:71"><expr pos:start="47:50" pos:end="47:71"><call pos:start="47:50" pos:end="47:71"><name pos:start="47:50" pos:end="47:59">SHOW_UBITS</name><argument_list pos:start="47:60" pos:end="47:71">(<argument pos:start="47:61" pos:end="47:62"><expr pos:start="47:61" pos:end="47:62"><name pos:start="47:61" pos:end="47:62">re</name></expr></argument>, <argument pos:start="47:65" pos:end="47:66"><expr pos:start="47:65" pos:end="47:66"><name pos:start="47:65" pos:end="47:66">gb</name></expr></argument>, <argument pos:start="47:69" pos:end="47:70"><expr pos:start="47:69" pos:end="47:70"><literal type="number" pos:start="47:69" pos:end="47:70">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:74" pos:end="47:81"><expr pos:start="47:74" pos:end="47:81"><name pos:start="47:74" pos:end="47:81">re_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="51:9" pos:end="51:42">/* our own optimized GET_RL_VLC */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:50"><expr pos:start="53:9" pos:end="53:49"><name pos:start="53:9" pos:end="53:13">index</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:49"><name pos:start="53:17" pos:end="53:25">NEG_USR32</name><argument_list pos:start="53:26" pos:end="53:49">(<argument pos:start="53:27" pos:end="53:34"><expr pos:start="53:27" pos:end="53:34"><name pos:start="53:27" pos:end="53:34">re_cache</name></expr></argument>, <argument pos:start="53:37" pos:end="53:48"><expr pos:start="53:37" pos:end="53:48"><name pos:start="53:37" pos:end="53:48">TEX_VLC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:15">vlc_len</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:34"><name pos:start="55:19" pos:end="55:27">dv_rl_vlc</name><index pos:start="55:28" pos:end="55:34">[<expr pos:start="55:29" pos:end="55:33"><name pos:start="55:29" pos:end="55:33">index</name></expr>]</index></name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:38">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:19">vlc_len</name> <operator pos:start="57:21" pos:end="57:21">&lt;</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition> <block pos:start="57:26" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:45">

            <expr_stmt pos:start="59:13" pos:end="59:101"><expr pos:start="59:13" pos:end="59:100"><name pos:start="59:13" pos:end="59:17">index</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:75"><name pos:start="59:21" pos:end="59:29">NEG_USR32</name><argument_list pos:start="59:30" pos:end="59:75">(<argument pos:start="59:31" pos:end="59:64"><expr pos:start="59:31" pos:end="59:64"><operator pos:start="59:31" pos:end="59:31">(</operator><name pos:start="59:32" pos:end="59:39">unsigned</name><operator pos:start="59:40" pos:end="59:40">)</operator><name pos:start="59:41" pos:end="59:48">re_cache</name> <operator pos:start="59:50" pos:end="59:51">&lt;&lt;</operator> <name pos:start="59:53" pos:end="59:64">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="59:67" pos:end="59:74"><expr pos:start="59:67" pos:end="59:74"><operator pos:start="59:67" pos:end="59:67">-</operator><name pos:start="59:68" pos:end="59:74">vlc_len</name></expr></argument>)</argument_list></call> <operator pos:start="59:77" pos:end="59:77">+</operator> <name pos:start="59:79" pos:end="59:94"><name pos:start="59:79" pos:end="59:87">dv_rl_vlc</name><index pos:start="59:88" pos:end="59:94">[<expr pos:start="59:89" pos:end="59:93"><name pos:start="59:89" pos:end="59:93">index</name></expr>]</index></name><operator pos:start="59:95" pos:end="59:95">.</operator><name pos:start="59:96" pos:end="59:100">level</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:19">vlc_len</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:34">TEX_VLC_BITS</name> <operator pos:start="61:36" pos:end="61:36">-</operator> <name pos:start="61:38" pos:end="61:44">vlc_len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:13">level</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:25">dv_rl_vlc</name><index pos:start="65:26" pos:end="65:32">[<expr pos:start="65:27" pos:end="65:31"><name pos:start="65:27" pos:end="65:31">index</name></expr>]</index></name><operator pos:start="65:33" pos:end="65:33">.</operator><name pos:start="65:34" pos:end="65:38">level</name></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:35"><expr pos:start="67:9" pos:end="67:34"><name pos:start="67:9" pos:end="67:11">run</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:30"><name pos:start="67:15" pos:end="67:23">dv_rl_vlc</name><index pos:start="67:24" pos:end="67:30">[<expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:29">index</name></expr>]</index></name><operator pos:start="67:31" pos:end="67:31">.</operator><name pos:start="67:32" pos:end="67:34">run</name></expr>;</expr_stmt>

	

	<comment type="block" pos:start="71:9" pos:end="71:61">/* gotta check if we're still within gb boundaries */</comment>

	<if_stmt pos:start="73:9" pos:end="85:9"><if pos:start="73:9" pos:end="85:9">if <condition pos:start="73:12" pos:end="73:44">(<expr pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:20">re_index</name> <operator pos:start="73:22" pos:end="73:22">+</operator> <name pos:start="73:24" pos:end="73:30">vlc_len</name> <operator pos:start="73:32" pos:end="73:32">&gt;</operator> <name pos:start="73:34" pos:end="73:43">last_index</name></expr>)</condition> <block pos:start="73:46" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:18">

	    <comment type="block" pos:start="75:13" pos:end="75:81">/* should be &lt; 16 bits otherwise a codeword could have been parsed */</comment>

	    <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:33"><name pos:start="77:13" pos:end="77:14">mb</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:33">partial_bit_count</name></name> <operator pos:start="77:35" pos:end="77:35">=</operator> <name pos:start="77:37" pos:end="77:46">last_index</name> <operator pos:start="77:48" pos:end="77:48">-</operator> <name pos:start="77:50" pos:end="77:57">re_index</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="79:13" pos:end="79:80"><expr pos:start="79:13" pos:end="79:79"><name pos:start="79:13" pos:end="79:34"><name pos:start="79:13" pos:end="79:14">mb</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:34">partial_bit_buffer</name></name> <operator pos:start="79:36" pos:end="79:36">=</operator> <call pos:start="79:38" pos:end="79:79"><name pos:start="79:38" pos:end="79:46">NEG_USR32</name><argument_list pos:start="79:47" pos:end="79:79">(<argument pos:start="79:48" pos:end="79:55"><expr pos:start="79:48" pos:end="79:55"><name pos:start="79:48" pos:end="79:55">re_cache</name></expr></argument>, <argument pos:start="79:58" pos:end="79:78"><expr pos:start="79:58" pos:end="79:78"><name pos:start="79:58" pos:end="79:78"><name pos:start="79:58" pos:end="79:59">mb</name><operator pos:start="79:60" pos:end="79:61">-&gt;</operator><name pos:start="79:62" pos:end="79:78">partial_bit_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:20">re_index</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:33">last_index</name></expr>;</expr_stmt>

	    <break pos:start="83:13" pos:end="83:18">break;</break>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="87:9" pos:end="92:0"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:16">re_index</name> <operator pos:start="87:18" pos:end="87:19">+=</operator> <name pos:start="87:21" pos:end="87:27">vlc_len</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="91:1" pos:end="91:16">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:16">VLC_DEBUG</name></cpp:ifdef>

	<expr_stmt pos:start="93:9" pos:end="96:0"><expr pos:start="93:9" pos:end="93:47"><call pos:start="93:9" pos:end="93:47"><name pos:start="93:9" pos:end="93:14">printf</name><argument_list pos:start="93:15" pos:end="93:47">(<argument pos:start="93:16" pos:end="93:34"><expr pos:start="93:16" pos:end="93:34"><literal type="string" pos:start="93:16" pos:end="93:34">"run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="93:37" pos:end="93:39"><expr pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">run</name></expr></argument>, <argument pos:start="93:42" pos:end="93:46"><expr pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:46">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">pos</name> <operator pos:start="97:13" pos:end="97:14">+=</operator> <name pos:start="97:16" pos:end="97:18">run</name></expr>;</expr_stmt> 	

	<if_stmt pos:start="99:9" pos:end="101:18"><if pos:start="99:9" pos:end="101:18">if <condition pos:start="99:12" pos:end="99:22">(<expr pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:15">pos</name> <operator pos:start="99:17" pos:end="99:18">&gt;=</operator> <literal type="number" pos:start="99:20" pos:end="99:21">64</literal></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:18"><block_content pos:start="101:13" pos:end="101:18">

	    <break pos:start="101:13" pos:end="101:18">break;</break></block_content></block></if></if_stmt>

        

	<if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:18">(<expr pos:start="105:13" pos:end="105:17"><name pos:start="105:13" pos:end="105:17">level</name></expr>)</condition> <block pos:start="105:20" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:53">

            <expr_stmt pos:start="107:13" pos:end="107:35"><expr pos:start="107:13" pos:end="107:34"><name pos:start="107:13" pos:end="107:16">pos1</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:34"><name pos:start="107:20" pos:end="107:29">scan_table</name><index pos:start="107:30" pos:end="107:34">[<expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">pos</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:53"><expr pos:start="109:13" pos:end="109:52"><name pos:start="109:13" pos:end="109:23"><name pos:start="109:13" pos:end="109:17">block</name><index pos:start="109:18" pos:end="109:23">[<expr pos:start="109:19" pos:end="109:22"><name pos:start="109:19" pos:end="109:22">pos1</name></expr>]</index></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:31">level</name> <operator pos:start="109:33" pos:end="109:34">&lt;&lt;</operator> <name pos:start="109:36" pos:end="109:52"><name pos:start="109:36" pos:end="109:46">shift_table</name><index pos:start="109:47" pos:end="109:52">[<expr pos:start="109:48" pos:end="109:51"><name pos:start="109:48" pos:end="109:51">pos1</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt> 



        <expr_stmt pos:start="115:9" pos:end="115:29"><expr pos:start="115:9" pos:end="115:28"><call pos:start="115:9" pos:end="115:28"><name pos:start="115:9" pos:end="115:20">UPDATE_CACHE</name><argument_list pos:start="115:21" pos:end="115:28">(<argument pos:start="115:22" pos:end="115:23"><expr pos:start="115:22" pos:end="115:23"><name pos:start="115:22" pos:end="115:23">re</name></expr></argument>, <argument pos:start="115:26" pos:end="115:27"><expr pos:start="115:26" pos:end="115:27"><name pos:start="115:26" pos:end="115:27">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="119:5" pos:end="119:25"><expr pos:start="119:5" pos:end="119:24"><call pos:start="119:5" pos:end="119:24"><name pos:start="119:5" pos:end="119:16">CLOSE_READER</name><argument_list pos:start="119:17" pos:end="119:24">(<argument pos:start="119:18" pos:end="119:19"><expr pos:start="119:18" pos:end="119:19"><name pos:start="119:18" pos:end="119:19">re</name></expr></argument>, <argument pos:start="119:22" pos:end="119:23"><expr pos:start="119:22" pos:end="119:23"><name pos:start="119:22" pos:end="119:23">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:18"><expr pos:start="121:5" pos:end="121:17"><name pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:6">mb</name><operator pos:start="121:7" pos:end="121:8">-&gt;</operator><name pos:start="121:9" pos:end="121:11">pos</name></name> <operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:17">pos</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
