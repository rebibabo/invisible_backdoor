<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16828.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">raw_open_common</name><parameter_list pos:start="1:27" pos:end="3:58">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:69">filename</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:30">int</name></type> <name pos:start="3:32" pos:end="3:41">bdrv_flags</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:57"><decl pos:start="3:44" pos:end="3:57"><type pos:start="3:44" pos:end="3:57"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:57">open_flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:18">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name></decl>, <decl pos:start="9:13" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:46"><expr pos:start="13:5" pos:end="13:45"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:45"><name pos:start="13:11" pos:end="13:34">raw_normalize_devicepath</name><argument_list pos:start="13:35" pos:end="13:45">(<argument pos:start="13:36" pos:end="13:44"><expr pos:start="13:36" pos:end="13:44"><operator pos:start="13:36" pos:end="13:36">&amp;</operator><name pos:start="13:37" pos:end="13:44">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">!=</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>)</condition> <block pos:start="15:19" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:17">open_flags</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:30">open_flags</name> <operator pos:start="23:32" pos:end="23:32">|</operator> <name pos:start="23:34" pos:end="23:41">O_BINARY</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:17">open_flags</name></name> <operator pos:start="25:19" pos:end="25:20">&amp;=</operator> <operator pos:start="25:22" pos:end="25:22">~</operator><name pos:start="25:23" pos:end="25:31">O_ACCMODE</name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:33">(<expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:18">bdrv_flags</name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <name pos:start="27:22" pos:end="27:32">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="27:35" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:32">

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:21">open_flags</name></name> <operator pos:start="29:23" pos:end="29:24">|=</operator> <name pos:start="29:26" pos:end="29:31">O_RDWR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:34">

        <expr_stmt pos:start="33:9" pos:end="33:34"><expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:21">open_flags</name></name> <operator pos:start="33:23" pos:end="33:24">|=</operator> <name pos:start="33:26" pos:end="33:33">O_RDONLY</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:38">/* Use O_DSYNC for write-through caching, no flags for write-back caching,

     * and O_DIRECT for no caching. */</comment>

    <if_stmt pos:start="43:5" pos:end="45:34"><if pos:start="43:5" pos:end="45:34">if <condition pos:start="43:8" pos:end="43:38">(<expr pos:start="43:9" pos:end="43:37"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:19">bdrv_flags</name> <operator pos:start="43:21" pos:end="43:21">&amp;</operator> <name pos:start="43:23" pos:end="43:36">BDRV_O_NOCACHE</name><operator pos:start="43:37" pos:end="43:37">)</operator></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:34"><block_content pos:start="45:9" pos:end="45:34">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:21">open_flags</name></name> <operator pos:start="45:23" pos:end="45:24">|=</operator> <name pos:start="45:26" pos:end="45:33">O_DIRECT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="49:33"><if pos:start="47:5" pos:end="49:33">if <condition pos:start="47:8" pos:end="47:40">(<expr pos:start="47:9" pos:end="47:39"><operator pos:start="47:9" pos:end="47:9">!</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:20">bdrv_flags</name> <operator pos:start="47:22" pos:end="47:22">&amp;</operator> <name pos:start="47:24" pos:end="47:38">BDRV_O_CACHE_WB</name><operator pos:start="47:39" pos:end="47:39">)</operator></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:33"><block_content pos:start="49:9" pos:end="49:33">

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:21">open_flags</name></name> <operator pos:start="49:23" pos:end="49:24">|=</operator> <name pos:start="49:26" pos:end="49:32">O_DSYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:15"><expr pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:9"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:9">fd</name></name> <operator pos:start="53:11" pos:end="53:11">=</operator> <operator pos:start="53:13" pos:end="53:13">-</operator><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:6">fd</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <call pos:start="55:10" pos:end="55:49"><name pos:start="55:10" pos:end="55:18">qemu_open</name><argument_list pos:start="55:19" pos:end="55:49">(<argument pos:start="55:20" pos:end="55:27"><expr pos:start="55:20" pos:end="55:27"><name pos:start="55:20" pos:end="55:27">filename</name></expr></argument>, <argument pos:start="55:30" pos:end="55:42"><expr pos:start="55:30" pos:end="55:42"><name pos:start="55:30" pos:end="55:42"><name pos:start="55:30" pos:end="55:30">s</name><operator pos:start="55:31" pos:end="55:32">-&gt;</operator><name pos:start="55:33" pos:end="55:42">open_flags</name></name></expr></argument>, <argument pos:start="55:45" pos:end="55:48"><expr pos:start="55:45" pos:end="55:48"><literal type="number" pos:start="55:45" pos:end="55:48">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="67:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:15">(<expr pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:10">fd</name> <operator pos:start="57:12" pos:end="57:12">&lt;</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>)</condition> <block pos:start="57:17" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:19">

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">-</operator><name pos:start="59:16" pos:end="59:20">errno</name></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="63:26"><if pos:start="61:9" pos:end="63:26">if <condition pos:start="61:12" pos:end="61:26">(<expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:18">==</operator> <operator pos:start="61:20" pos:end="61:20">-</operator><name pos:start="61:21" pos:end="61:25">EROFS</name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:26"><block_content pos:start="63:13" pos:end="63:26">

            <expr_stmt pos:start="63:13" pos:end="63:26"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><name pos:start="63:20" pos:end="63:25">EACCES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="65:9" pos:end="65:19">return <expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:15"><expr pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:9"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:9">fd</name></name> <operator pos:start="69:11" pos:end="69:11">=</operator> <name pos:start="69:13" pos:end="69:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:18">aligned_buf</name></name> <operator pos:start="71:20" pos:end="71:20">=</operator> <name pos:start="71:22" pos:end="71:25">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="95:5"><if pos:start="75:5" pos:end="95:5">if <condition pos:start="75:8" pos:end="75:38">(<expr pos:start="75:9" pos:end="75:37"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:19">bdrv_flags</name> <operator pos:start="75:21" pos:end="75:21">&amp;</operator> <name pos:start="75:23" pos:end="75:36">BDRV_O_NOCACHE</name><operator pos:start="75:37" pos:end="75:37">)</operator></expr>)</condition> <block pos:start="75:40" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:9">

        <comment type="block" pos:start="77:9" pos:end="83:11">/*

         * Allocate a buffer for read/modify/write cycles.  Chose the size

         * pessimistically as we don't know the block size yet.

         */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:49"><expr pos:start="85:9" pos:end="85:48"><name pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:27">aligned_buf_size</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <literal type="number" pos:start="85:31" pos:end="85:32">32</literal> <operator pos:start="85:34" pos:end="85:34">*</operator> <name pos:start="85:36" pos:end="85:48">MAX_BLOCKSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:75"><expr pos:start="87:9" pos:end="87:74"><name pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:22">aligned_buf</name></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <call pos:start="87:26" pos:end="87:74"><name pos:start="87:26" pos:end="87:38">qemu_memalign</name><argument_list pos:start="87:39" pos:end="87:74">(<argument pos:start="87:40" pos:end="87:52"><expr pos:start="87:40" pos:end="87:52"><name pos:start="87:40" pos:end="87:52">MAX_BLOCKSIZE</name></expr></argument>, <argument pos:start="87:55" pos:end="87:73"><expr pos:start="87:55" pos:end="87:73"><name pos:start="87:55" pos:end="87:73"><name pos:start="87:55" pos:end="87:55">s</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:73">aligned_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:35">(<expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:26">aligned_buf</name></name> <operator pos:start="89:28" pos:end="89:29">==</operator> <name pos:start="89:31" pos:end="89:34">NULL</name></expr>)</condition> <block pos:start="89:37" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:27">

            <goto pos:start="91:13" pos:end="91:27">goto <name pos:start="91:18" pos:end="91:26">out_close</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:70">/* We're falling back to POSIX AIO in some cases so init always */</comment>

    <if_stmt pos:start="101:5" pos:end="110:0"><if pos:start="101:5" pos:end="110:0">if <condition pos:start="101:8" pos:end="101:24">(<expr pos:start="101:9" pos:end="101:23"><call pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:17">paio_init</name><argument_list pos:start="101:18" pos:end="101:19">()</argument_list></call> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition> <block pos:start="101:26" pos:end="110:0">{<block_content pos:start="103:9" pos:end="103:26">

        <goto pos:start="103:9" pos:end="103:26">goto <name pos:start="103:14" pos:end="103:25">out_free_buf</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="109:1" pos:end="109:23">#<cpp:directive pos:start="109:2" pos:end="109:6">ifdef</cpp:directive> <name pos:start="109:8" pos:end="109:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <comment type="block" pos:start="111:5" pos:end="117:7">/*

     * Currently Linux do AIO only for files opened with O_DIRECT

     * specified so check NOCACHE flag too

     */</comment>

    <if_stmt pos:start="119:5" pos:end="152:0"><if pos:start="119:5" pos:end="135:5">if <condition pos:start="119:8" pos:end="121:57">(<expr pos:start="119:9" pos:end="121:56"><operator pos:start="119:9" pos:end="119:9">(</operator><name pos:start="119:10" pos:end="119:19">bdrv_flags</name> <operator pos:start="119:21" pos:end="119:21">&amp;</operator> <operator pos:start="119:23" pos:end="119:23">(</operator><name pos:start="119:24" pos:end="119:37">BDRV_O_NOCACHE</name><operator pos:start="119:38" pos:end="119:38">|</operator><name pos:start="119:39" pos:end="119:55">BDRV_O_NATIVE_AIO</name><operator pos:start="119:56" pos:end="119:56">)</operator><operator pos:start="119:57" pos:end="119:57">)</operator> <operator pos:start="119:59" pos:end="119:60">==</operator>

                      <operator pos:start="121:23" pos:end="121:23">(</operator><name pos:start="121:24" pos:end="121:37">BDRV_O_NOCACHE</name><operator pos:start="121:38" pos:end="121:38">|</operator><name pos:start="121:39" pos:end="121:55">BDRV_O_NATIVE_AIO</name><operator pos:start="121:56" pos:end="121:56">)</operator></expr>)</condition> <block pos:start="121:59" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:23">



        <expr_stmt pos:start="125:9" pos:end="125:33"><expr pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:18"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:18">aio_ctx</name></name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:32"><name pos:start="125:22" pos:end="125:30">laio_init</name><argument_list pos:start="125:31" pos:end="125:32">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:24">(<expr pos:start="127:13" pos:end="127:23"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:23"><name pos:start="127:14" pos:end="127:14">s</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:23">aio_ctx</name></name></expr>)</condition> <block pos:start="127:26" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:30">

            <goto pos:start="129:13" pos:end="129:30">goto <name pos:start="129:18" pos:end="129:29">out_free_buf</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:23"><expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:18">use_aio</name></name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="152:0">else

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

    <block pos:start="139:5" pos:end="152:0">{<block_content pos:start="143:9" pos:end="146:0">

<cpp:ifdef pos:start="141:1" pos:end="141:23">#<cpp:directive pos:start="141:2" pos:end="141:6">ifdef</cpp:directive> <name pos:start="141:8" pos:end="141:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

        <expr_stmt pos:start="143:9" pos:end="146:0"><expr pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">use_aio</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="151:1" pos:end="151:17">#<cpp:directive pos:start="151:2" pos:end="151:6">ifdef</cpp:directive> <name pos:start="151:8" pos:end="151:17">CONFIG_XFS</name></cpp:ifdef>

    <if_stmt pos:start="153:5" pos:end="160:0"><if pos:start="153:5" pos:end="160:0">if <condition pos:start="153:8" pos:end="153:36">(<expr pos:start="153:9" pos:end="153:35"><call pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:28">platform_test_xfs_fd</name><argument_list pos:start="153:29" pos:end="153:35">(<argument pos:start="153:30" pos:end="153:34"><expr pos:start="153:30" pos:end="153:34"><name pos:start="153:30" pos:end="153:34"><name pos:start="153:30" pos:end="153:30">s</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:34">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:38" pos:end="160:0">{<block_content pos:start="155:9" pos:end="155:22">

        <expr_stmt pos:start="155:9" pos:end="155:22"><expr pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:17"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:17">is_xfs</name></name> <operator pos:start="155:19" pos:end="155:19">=</operator> <literal type="number" pos:start="155:21" pos:end="155:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>



    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>



<label pos:start="167:1" pos:end="167:13"><name pos:start="167:1" pos:end="167:12">out_free_buf</name>:</label>

    <expr_stmt pos:start="169:5" pos:end="169:31"><expr pos:start="169:5" pos:end="169:30"><call pos:start="169:5" pos:end="169:30"><name pos:start="169:5" pos:end="169:14">qemu_vfree</name><argument_list pos:start="169:15" pos:end="169:30">(<argument pos:start="169:16" pos:end="169:29"><expr pos:start="169:16" pos:end="169:29"><name pos:start="169:16" pos:end="169:29"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:29">aligned_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="171:1" pos:end="171:10"><name pos:start="171:1" pos:end="171:9">out_close</name>:</label>

    <expr_stmt pos:start="173:5" pos:end="173:19"><expr pos:start="173:5" pos:end="173:18"><call pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:14">qemu_close</name><argument_list pos:start="173:15" pos:end="173:18">(<argument pos:start="173:16" pos:end="173:17"><expr pos:start="173:16" pos:end="173:17"><name pos:start="173:16" pos:end="173:17">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:18">return <expr pos:start="175:12" pos:end="175:17"><operator pos:start="175:12" pos:end="175:12">-</operator><name pos:start="175:13" pos:end="175:17">errno</name></expr>;</return>

</block_content>}</block></function>
</unit>
