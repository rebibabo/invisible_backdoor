<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26857.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_guest_fstrim</name><parameter_list pos:start="1:22" pos:end="1:70">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:26">bool</name></type> <name pos:start="1:28" pos:end="1:38">has_minimum</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:47">int64_t</name></type> <name pos:start="1:49" pos:end="1:55">minimum</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:62">Error</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier><modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:69">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:32">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">FsMountList</name></type> <name pos:start="7:17" pos:end="7:22">mounts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">FsMount</name></name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">mount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="23:6"><decl pos:start="15:5" pos:end="23:5"><type pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:23">fstrim_range</name></name></type> <name pos:start="15:25" pos:end="15:25">r</name> <init pos:start="15:27" pos:end="23:5">= <expr pos:start="15:29" pos:end="23:5"><block pos:start="15:29" pos:end="23:5">{

        <expr pos:start="17:9" pos:end="17:18"><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:14">start</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>,

        <expr pos:start="19:9" pos:end="19:17"><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:12">len</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>,

        <expr pos:start="21:9" pos:end="21:43"><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:15">minlen</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:29">has_minimum</name> <operator pos:start="21:31" pos:end="21:31">?</operator> <name pos:start="21:33" pos:end="21:39">minimum</name> <operator pos:start="21:41" pos:end="21:41">:</operator> <literal type="number" pos:start="21:43" pos:end="21:43">0</literal></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><call pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:8">slog</name><argument_list pos:start="27:9" pos:end="27:31">(<argument pos:start="27:10" pos:end="27:30"><expr pos:start="27:10" pos:end="27:30"><literal type="string" pos:start="27:10" pos:end="27:30">"guest-fstrim called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:25"><expr pos:start="31:5" pos:end="31:24"><call pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:15">QTAILQ_INIT</name><argument_list pos:start="31:16" pos:end="31:24">(<argument pos:start="31:17" pos:end="31:23"><expr pos:start="31:17" pos:end="31:23"><operator pos:start="31:17" pos:end="31:17">&amp;</operator><name pos:start="31:18" pos:end="31:23">mounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><call pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:23">build_fs_mount_list</name><argument_list pos:start="33:24" pos:end="33:44">(<argument pos:start="33:25" pos:end="33:31"><expr pos:start="33:25" pos:end="33:31"><operator pos:start="33:25" pos:end="33:25">&amp;</operator><name pos:start="33:26" pos:end="33:31">mounts</name></expr></argument>, <argument pos:start="33:34" pos:end="33:43"><expr pos:start="33:34" pos:end="33:43"><operator pos:start="33:34" pos:end="33:34">&amp;</operator><name pos:start="33:35" pos:end="33:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:23">error_propagate</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">errp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:18">QTAILQ_FOREACH</name><argument_list pos:start="45:19" pos:end="45:40">(<argument pos:start="45:20" pos:end="45:24">mount</argument>, <argument pos:start="45:27" pos:end="45:33">&amp;mounts</argument>, <argument pos:start="45:36" pos:end="45:39">next</argument>)</argument_list></macro> <block pos:start="45:42" pos:end="91:5">{<block_content pos:start="47:9" pos:end="89:18">

        <expr_stmt pos:start="47:9" pos:end="47:49"><expr pos:start="47:9" pos:end="47:48"><name pos:start="47:9" pos:end="47:10">fd</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:48"><name pos:start="47:14" pos:end="47:22">qemu_open</name><argument_list pos:start="47:23" pos:end="47:48">(<argument pos:start="47:24" pos:end="47:37"><expr pos:start="47:24" pos:end="47:37"><name pos:start="47:24" pos:end="47:37"><name pos:start="47:24" pos:end="47:28">mount</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:37">dirname</name></name></expr></argument>, <argument pos:start="47:40" pos:end="47:47"><expr pos:start="47:40" pos:end="47:47"><name pos:start="47:40" pos:end="47:47">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:14">fd</name> <operator pos:start="49:16" pos:end="49:17">==</operator> <operator pos:start="49:19" pos:end="49:19">-</operator><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>)</condition> <block pos:start="49:23" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:23">

            <expr_stmt pos:start="51:13" pos:end="51:79"><expr pos:start="51:13" pos:end="51:78"><call pos:start="51:13" pos:end="51:78"><name pos:start="51:13" pos:end="51:28">error_setg_errno</name><argument_list pos:start="51:29" pos:end="51:78">(<argument pos:start="51:30" pos:end="51:33"><expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">errp</name></expr></argument>, <argument pos:start="51:36" pos:end="51:40"><expr pos:start="51:36" pos:end="51:40"><name pos:start="51:36" pos:end="51:40">errno</name></expr></argument>, <argument pos:start="51:43" pos:end="51:61"><expr pos:start="51:43" pos:end="51:61"><literal type="string" pos:start="51:43" pos:end="51:61">"failed to open %s"</literal></expr></argument>, <argument pos:start="51:64" pos:end="51:77"><expr pos:start="51:64" pos:end="51:77"><name pos:start="51:64" pos:end="51:77"><name pos:start="51:64" pos:end="51:68">mount</name><operator pos:start="51:69" pos:end="51:70">-&gt;</operator><name pos:start="51:71" pos:end="51:77">dirname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="53:13" pos:end="53:23">goto <name pos:start="53:18" pos:end="53:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="59:9" pos:end="69:11">/* We try to cull filesytems we know won't work in advance, but other

         * filesytems may not implement fstrim for less obvious reasons.  These

         * will report EOPNOTSUPP; we simply ignore these errors.  Any other

         * error means an unexpected error, so return it in those cases.  In

         * some other cases ENOTTY will be reported (e.g. CD-ROMs).

         */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:35"><name pos:start="71:15" pos:end="71:19">ioctl</name><argument_list pos:start="71:20" pos:end="71:35">(<argument pos:start="71:21" pos:end="71:22"><expr pos:start="71:21" pos:end="71:22"><name pos:start="71:21" pos:end="71:22">fd</name></expr></argument>, <argument pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:30">FITRIM</name></expr></argument>, <argument pos:start="71:33" pos:end="71:34"><expr pos:start="71:33" pos:end="71:34"><operator pos:start="71:33" pos:end="71:33">&amp;</operator><name pos:start="71:34" pos:end="71:34">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="87:9"><if pos:start="73:9" pos:end="87:9">if <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:18">==</operator> <operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>)</condition> <block pos:start="73:24" pos:end="87:9">{<block_content pos:start="75:13" pos:end="85:13">

            <if_stmt pos:start="75:13" pos:end="85:13"><if pos:start="75:13" pos:end="85:13">if <condition pos:start="75:16" pos:end="75:55">(<expr pos:start="75:17" pos:end="75:54"><name pos:start="75:17" pos:end="75:21">errno</name> <operator pos:start="75:23" pos:end="75:24">!=</operator> <name pos:start="75:26" pos:end="75:31">ENOTTY</name> <operator pos:start="75:33" pos:end="75:34">&amp;&amp;</operator> <name pos:start="75:36" pos:end="75:40">errno</name> <operator pos:start="75:42" pos:end="75:43">!=</operator> <name pos:start="75:45" pos:end="75:54">EOPNOTSUPP</name></expr>)</condition> <block pos:start="75:57" pos:end="85:13">{<block_content pos:start="77:17" pos:end="83:27">

                <expr_stmt pos:start="77:17" pos:end="79:49"><expr pos:start="77:17" pos:end="79:48"><call pos:start="77:17" pos:end="79:48"><name pos:start="77:17" pos:end="77:32">error_setg_errno</name><argument_list pos:start="77:33" pos:end="79:48">(<argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><name pos:start="77:34" pos:end="77:37">errp</name></expr></argument>, <argument pos:start="77:40" pos:end="77:44"><expr pos:start="77:40" pos:end="77:44"><name pos:start="77:40" pos:end="77:44">errno</name></expr></argument>, <argument pos:start="77:47" pos:end="77:65"><expr pos:start="77:47" pos:end="77:65"><literal type="string" pos:start="77:47" pos:end="77:65">"failed to trim %s"</literal></expr></argument>,

                                 <argument pos:start="79:34" pos:end="79:47"><expr pos:start="79:34" pos:end="79:47"><name pos:start="79:34" pos:end="79:47"><name pos:start="79:34" pos:end="79:38">mount</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:47">dirname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:25"><call pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:21">close</name><argument_list pos:start="81:22" pos:end="81:25">(<argument pos:start="81:23" pos:end="81:24"><expr pos:start="81:23" pos:end="81:24"><name pos:start="81:23" pos:end="81:24">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="83:17" pos:end="83:27">goto <name pos:start="83:22" pos:end="83:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:18"><expr pos:start="89:9" pos:end="89:17"><call pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:13">close</name><argument_list pos:start="89:14" pos:end="89:17">(<argument pos:start="89:15" pos:end="89:16"><expr pos:start="89:15" pos:end="89:16"><name pos:start="89:15" pos:end="89:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



<label pos:start="95:1" pos:end="95:6"><name pos:start="95:1" pos:end="95:5">error</name>:</label>

    <expr_stmt pos:start="97:5" pos:end="97:32"><expr pos:start="97:5" pos:end="97:31"><call pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:22">free_fs_mount_list</name><argument_list pos:start="97:23" pos:end="97:31">(<argument pos:start="97:24" pos:end="97:30"><expr pos:start="97:24" pos:end="97:30"><operator pos:start="97:24" pos:end="97:24">&amp;</operator><name pos:start="97:25" pos:end="97:30">mounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
