<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19953.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">cbs_read_se_golomb</name><parameter_list pos:start="1:30" pos:end="5:67">(<parameter pos:start="1:31" pos:end="1:56"><decl pos:start="1:31" pos:end="1:56"><type pos:start="1:31" pos:end="1:56"><name pos:start="1:31" pos:end="1:51">CodedBitstreamContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:78"><decl pos:start="1:59" pos:end="1:78"><type pos:start="1:59" pos:end="1:78"><name pos:start="1:59" pos:end="1:74">BitstreamContext</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:78">bc</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:46"><decl pos:start="3:31" pos:end="3:46"><type pos:start="3:31" pos:end="3:46"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">name</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:65"><decl pos:start="3:49" pos:end="3:65"><type pos:start="3:49" pos:end="3:65"><name pos:start="3:49" pos:end="3:55">int32_t</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:65">write_to</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:47"><decl pos:start="5:31" pos:end="5:47"><type pos:start="5:31" pos:end="5:47"><name pos:start="5:31" pos:end="5:37">int32_t</name></type> <name pos:start="5:39" pos:end="5:47">range_min</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:66"><decl pos:start="5:50" pos:end="5:66"><type pos:start="5:50" pos:end="5:66"><name pos:start="5:50" pos:end="5:56">int32_t</name></type> <name pos:start="5:58" pos:end="5:66">range_max</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="107:1">{<block_content pos:start="9:5" pos:end="105:13">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:17">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">position</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="85:5"><if pos:start="15:5" pos:end="81:5">if <condition pos:start="15:8" pos:end="15:26">(<expr pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:25">trace_enable</name></name></expr>)</condition> <block pos:start="15:28" pos:end="81:5">{<block_content pos:start="17:9" pos:end="79:70">

        <decl_stmt pos:start="17:9" pos:end="17:22"><decl pos:start="17:9" pos:end="17:21"><type pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:12">char</name></type> <name pos:start="17:14" pos:end="17:21"><name pos:start="17:14" pos:end="17:17">bits</name><index pos:start="17:18" pos:end="17:21">[<expr pos:start="17:19" pos:end="17:20"><literal type="number" pos:start="17:19" pos:end="17:20">65</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:19"><decl pos:start="19:9" pos:end="19:18"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:18">v</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:23"><decl pos:start="21:9" pos:end="21:22"><type pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:16">unsigned</name> <name pos:start="21:18" pos:end="21:20">int</name></type> <name pos:start="21:22" pos:end="21:22">k</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:17"><decl pos:start="23:9" pos:end="23:13"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">i</name></decl>, <decl pos:start="23:16" pos:end="23:16"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:16" pos:end="23:16">j</name></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:16">position</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:37"><name pos:start="27:20" pos:end="27:33">bitstream_tell</name><argument_list pos:start="27:34" pos:end="27:37">(<argument pos:start="27:35" pos:end="27:36"><expr pos:start="27:35" pos:end="27:36"><name pos:start="27:35" pos:end="27:36">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="31:9" pos:end="41:9">for <control pos:start="31:13" pos:end="31:32">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:27"><expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:21">i</name> <operator pos:start="31:23" pos:end="31:23">&lt;</operator> <literal type="number" pos:start="31:25" pos:end="31:26">32</literal></expr>;</condition> <incr pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><name pos:start="31:29" pos:end="31:29">i</name><operator pos:start="31:30" pos:end="31:31">++</operator></expr></incr>)</control> <block pos:start="31:34" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:22">

            <expr_stmt pos:start="33:13" pos:end="33:39"><expr pos:start="33:13" pos:end="33:38"><name pos:start="33:13" pos:end="33:13">k</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:34">bitstream_read_bit</name><argument_list pos:start="33:35" pos:end="33:38">(<argument pos:start="33:36" pos:end="33:37"><expr pos:start="33:36" pos:end="33:37"><name pos:start="33:36" pos:end="33:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:36"><expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:16">bits</name><index pos:start="35:17" pos:end="35:19">[<expr pos:start="35:18" pos:end="35:18"><name pos:start="35:18" pos:end="35:18">i</name></expr>]</index></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <ternary pos:start="35:23" pos:end="35:35"><condition pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">k</name></expr> ?</condition><then pos:start="35:27" pos:end="35:29"> <expr pos:start="35:27" pos:end="35:29"><literal type="char" pos:start="35:27" pos:end="35:29">'1'</literal></expr> </then><else pos:start="35:31" pos:end="35:35">: <expr pos:start="35:33" pos:end="35:35"><literal type="char" pos:start="35:33" pos:end="35:35">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="39:22"><if pos:start="37:13" pos:end="39:22">if <condition pos:start="37:16" pos:end="37:18">(<expr pos:start="37:17" pos:end="37:17"><name pos:start="37:17" pos:end="37:17">k</name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:22"><block_content pos:start="39:17" pos:end="39:22">

                <break pos:start="39:17" pos:end="39:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:13">i</name> <operator pos:start="43:15" pos:end="43:16">&gt;=</operator> <literal type="number" pos:start="43:18" pos:end="43:19">32</literal></expr>)</condition> <block pos:start="43:22" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:39">

            <expr_stmt pos:start="45:13" pos:end="49:51"><expr pos:start="45:13" pos:end="49:50"><call pos:start="45:13" pos:end="49:50"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="49:50">(<argument pos:start="45:20" pos:end="45:31"><expr pos:start="45:20" pos:end="45:31"><name pos:start="45:20" pos:end="45:31"><name pos:start="45:20" pos:end="45:22">ctx</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:31">log_ctx</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:45"><expr pos:start="45:34" pos:end="45:45"><name pos:start="45:34" pos:end="45:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:48" pos:end="49:43"><expr pos:start="45:48" pos:end="49:43"><literal type="string" pos:start="45:48" pos:end="45:67">"Invalid se-golomb "</literal>

                   <literal type="string" pos:start="47:20" pos:end="47:50">"code found while reading %s: "</literal>

                   <literal type="string" pos:start="49:20" pos:end="49:43">"more than 31 zeroes.\n"</literal></expr></argument>, <argument pos:start="49:46" pos:end="49:49"><expr pos:start="49:46" pos:end="49:49"><name pos:start="49:46" pos:end="49:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:39">return <expr pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">v</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <literal type="number" pos:start="55:13" pos:end="55:13">1</literal></expr>;</expr_stmt>

        <for pos:start="57:9" pos:end="65:9">for <control pos:start="57:13" pos:end="57:31">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">j</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:25"><name pos:start="57:21" pos:end="57:21">j</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:25">i</name></expr>;</condition> <incr pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:28">j</name><operator pos:start="57:29" pos:end="57:30">++</operator></expr></incr>)</control> <block pos:start="57:33" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:27">

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:13">k</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:38"><name pos:start="59:17" pos:end="59:34">bitstream_read_bit</name><argument_list pos:start="59:35" pos:end="59:38">(<argument pos:start="59:36" pos:end="59:37"><expr pos:start="59:36" pos:end="59:37"><name pos:start="59:36" pos:end="59:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:16">bits</name><index pos:start="61:17" pos:end="61:27">[<expr pos:start="61:18" pos:end="61:26"><name pos:start="61:18" pos:end="61:18">i</name> <operator pos:start="61:20" pos:end="61:20">+</operator> <name pos:start="61:22" pos:end="61:22">j</name> <operator pos:start="61:24" pos:end="61:24">+</operator> <literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr>]</index></name> <operator pos:start="61:29" pos:end="61:29">=</operator> <ternary pos:start="61:31" pos:end="61:43"><condition pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">k</name></expr> ?</condition><then pos:start="61:35" pos:end="61:37"> <expr pos:start="61:35" pos:end="61:37"><literal type="char" pos:start="61:35" pos:end="61:37">'1'</literal></expr> </then><else pos:start="61:39" pos:end="61:43">: <expr pos:start="61:41" pos:end="61:43"><literal type="char" pos:start="61:41" pos:end="61:43">'0'</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:13">v</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <name pos:start="63:17" pos:end="63:17">v</name> <operator pos:start="63:19" pos:end="63:20">&lt;&lt;</operator> <literal type="number" pos:start="63:22" pos:end="63:22">1</literal> <operator pos:start="63:24" pos:end="63:24">|</operator> <name pos:start="63:26" pos:end="63:26">k</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="67:9" pos:end="67:28"><expr pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:12">bits</name><index pos:start="67:13" pos:end="67:23">[<expr pos:start="67:14" pos:end="67:22"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">+</operator> <name pos:start="67:18" pos:end="67:18">j</name> <operator pos:start="67:20" pos:end="67:20">+</operator> <literal type="number" pos:start="67:22" pos:end="67:22">1</literal></expr>]</index></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="75:26"><if pos:start="69:9" pos:end="71:38">if <condition pos:start="69:12" pos:end="69:18">(<expr pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:13">v</name> <operator pos:start="69:15" pos:end="69:15">&amp;</operator> <literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:38"><block_content pos:start="71:13" pos:end="71:38">

            <expr_stmt pos:start="71:13" pos:end="71:38"><expr pos:start="71:13" pos:end="71:37"><name pos:start="71:13" pos:end="71:17">value</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <operator pos:start="71:21" pos:end="71:21">-</operator><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:29">int32_t</name><operator pos:start="71:30" pos:end="71:30">)</operator><operator pos:start="71:31" pos:end="71:31">(</operator><name pos:start="71:32" pos:end="71:32">v</name> <operator pos:start="71:34" pos:end="71:34">/</operator> <literal type="number" pos:start="71:36" pos:end="71:36">2</literal><operator pos:start="71:37" pos:end="71:37">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="73:9" pos:end="75:26">else<block type="pseudo" pos:start="75:13" pos:end="75:26"><block_content pos:start="75:13" pos:end="75:26">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:17">value</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:21">v</name> <operator pos:start="75:23" pos:end="75:23">/</operator> <literal type="number" pos:start="75:25" pos:end="75:25">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:70"><expr pos:start="79:9" pos:end="79:69"><call pos:start="79:9" pos:end="79:69"><name pos:start="79:9" pos:end="79:35">ff_cbs_trace_syntax_element</name><argument_list pos:start="79:36" pos:end="79:69">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">ctx</name></expr></argument>, <argument pos:start="79:42" pos:end="79:49"><expr pos:start="79:42" pos:end="79:49"><name pos:start="79:42" pos:end="79:49">position</name></expr></argument>, <argument pos:start="79:52" pos:end="79:55"><expr pos:start="79:52" pos:end="79:55"><name pos:start="79:52" pos:end="79:55">name</name></expr></argument>, <argument pos:start="79:58" pos:end="79:61"><expr pos:start="79:58" pos:end="79:61"><name pos:start="79:58" pos:end="79:61">bits</name></expr></argument>, <argument pos:start="79:64" pos:end="79:68"><expr pos:start="79:64" pos:end="79:68"><name pos:start="79:64" pos:end="79:68">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="85:5">else <block pos:start="81:12" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:39">

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:13">value</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:38"><name pos:start="83:17" pos:end="83:34">get_se_golomb_long</name><argument_list pos:start="83:35" pos:end="83:38">(<argument pos:start="83:36" pos:end="83:37"><expr pos:start="83:36" pos:end="83:37"><name pos:start="83:36" pos:end="83:37">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:47">(<expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:13">value</name> <argument_list type="generic" pos:start="89:15" pos:end="89:36">&lt; <argument pos:start="89:17" pos:end="89:34"><expr pos:start="89:17" pos:end="89:34"><name pos:start="89:17" pos:end="89:25">range_min</name> <operator pos:start="89:27" pos:end="89:28">||</operator> <name pos:start="89:30" pos:end="89:34">value</name></expr></argument> &gt;</argument_list></name> <name pos:start="89:38" pos:end="89:46">range_max</name></expr>)</condition> <block pos:start="89:49" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:35">

        <expr_stmt pos:start="91:9" pos:end="95:50"><expr pos:start="91:9" pos:end="95:49"><call pos:start="91:9" pos:end="95:49"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="95:49">(<argument pos:start="91:16" pos:end="91:27"><expr pos:start="91:16" pos:end="91:27"><name pos:start="91:16" pos:end="91:27"><name pos:start="91:16" pos:end="91:18">ctx</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:27">log_ctx</name></name></expr></argument>, <argument pos:start="91:30" pos:end="91:41"><expr pos:start="91:30" pos:end="91:41"><name pos:start="91:30" pos:end="91:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:44" pos:end="93:67"><expr pos:start="91:44" pos:end="93:67"><literal type="string" pos:start="91:44" pos:end="91:62">"%s out of range: "</literal>

               <literal type="string" pos:start="93:16" pos:end="93:18">"%"</literal><name pos:start="93:19" pos:end="93:24">PRId32</name><literal type="string" pos:start="93:25" pos:end="93:45">", but must be in [%"</literal><name pos:start="93:46" pos:end="93:51">PRId32</name><literal type="string" pos:start="93:52" pos:end="93:55">",%"</literal><name pos:start="93:56" pos:end="93:61">PRId32</name><literal type="string" pos:start="93:62" pos:end="93:67">"].\n"</literal></expr></argument>,

               <argument pos:start="95:16" pos:end="95:19"><expr pos:start="95:16" pos:end="95:19"><name pos:start="95:16" pos:end="95:19">name</name></expr></argument>, <argument pos:start="95:22" pos:end="95:26"><expr pos:start="95:22" pos:end="95:26"><name pos:start="95:22" pos:end="95:26">value</name></expr></argument>, <argument pos:start="95:29" pos:end="95:37"><expr pos:start="95:29" pos:end="95:37"><name pos:start="95:29" pos:end="95:37">range_min</name></expr></argument>, <argument pos:start="95:40" pos:end="95:48"><expr pos:start="95:40" pos:end="95:48"><name pos:start="95:40" pos:end="95:48">range_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:35">return <expr pos:start="97:16" pos:end="97:34"><name pos:start="97:16" pos:end="97:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><operator pos:start="103:5" pos:end="103:5">*</operator><name pos:start="103:6" pos:end="103:13">write_to</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:21">value</name></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
