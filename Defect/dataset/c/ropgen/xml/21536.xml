<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21536.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockMeasureInfo</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:38">qcow2_measure</name><parameter_list pos:start="1:39" pos:end="3:52">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:47">QemuOpts</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">opts</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:78"><decl pos:start="1:56" pos:end="1:78"><type pos:start="1:56" pos:end="1:78"><name pos:start="1:56" pos:end="1:71">BlockDriverState</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:78">in_bs</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:44">Error</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier><modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="263:1">{<block_content pos:start="7:5" pos:end="261:16">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockMeasureInfo</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">required</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="11:28" pos:end="11:71">/* bytes that contribute to required size */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:25">virtual_size</name></decl>;</decl_stmt> <comment type="block" pos:start="13:28" pos:end="13:59">/* disk size as seen by guest */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:26">refcount_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:22">l2_tables</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:23">cluster_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">version</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:16">optstr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">PreallocMode</name></type> <name pos:start="25:18" pos:end="25:25">prealloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:26"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:25">has_backing_file</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:38">/* Parse image creation options */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:68"><expr pos:start="33:5" pos:end="33:67"><name pos:start="33:5" pos:end="33:16">cluster_size</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:67"><name pos:start="33:20" pos:end="33:49">qcow2_opt_get_cluster_size_del</name><argument_list pos:start="33:50" pos:end="33:67">(<argument pos:start="33:51" pos:end="33:54"><expr pos:start="33:51" pos:end="33:54"><name pos:start="33:51" pos:end="33:54">opts</name></expr></argument>, <argument pos:start="33:57" pos:end="33:66"><expr pos:start="33:57" pos:end="33:66"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:17">

        <goto pos:start="37:9" pos:end="37:17">goto <name pos:start="37:14" pos:end="37:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:58"><expr pos:start="43:5" pos:end="43:57"><name pos:start="43:5" pos:end="43:11">version</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:57"><name pos:start="43:15" pos:end="43:39">qcow2_opt_get_version_del</name><argument_list pos:start="43:40" pos:end="43:57">(<argument pos:start="43:41" pos:end="43:44"><expr pos:start="43:41" pos:end="43:44"><name pos:start="43:41" pos:end="43:44">opts</name></expr></argument>, <argument pos:start="43:47" pos:end="43:56"><expr pos:start="43:47" pos:end="43:56"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:17">local_err</name></expr>)</condition> <block pos:start="45:20" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <goto pos:start="47:9" pos:end="47:17">goto <name pos:start="47:14" pos:end="47:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:17">refcount_bits</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:78"><name pos:start="53:21" pos:end="53:51">qcow2_opt_get_refcount_bits_del</name><argument_list pos:start="53:52" pos:end="53:78">(<argument pos:start="53:53" pos:end="53:56"><expr pos:start="53:53" pos:end="53:56"><name pos:start="53:53" pos:end="53:56">opts</name></expr></argument>, <argument pos:start="53:59" pos:end="53:65"><expr pos:start="53:59" pos:end="53:65"><name pos:start="53:59" pos:end="53:65">version</name></expr></argument>, <argument pos:start="53:68" pos:end="53:77"><expr pos:start="53:68" pos:end="53:77"><operator pos:start="53:68" pos:end="53:68">&amp;</operator><name pos:start="53:69" pos:end="53:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:17">local_err</name></expr>)</condition> <block pos:start="55:20" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:17">

        <goto pos:start="57:9" pos:end="57:17">goto <name pos:start="57:14" pos:end="57:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:56"><expr pos:start="63:5" pos:end="63:55"><name pos:start="63:5" pos:end="63:10">optstr</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:55"><name pos:start="63:14" pos:end="63:29">qemu_opt_get_del</name><argument_list pos:start="63:30" pos:end="63:55">(<argument pos:start="63:31" pos:end="63:34"><expr pos:start="63:31" pos:end="63:34"><name pos:start="63:31" pos:end="63:34">opts</name></expr></argument>, <argument pos:start="63:37" pos:end="63:54"><expr pos:start="63:37" pos:end="63:54"><name pos:start="63:37" pos:end="63:54">BLOCK_OPT_PREALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:62"><expr pos:start="65:5" pos:end="67:61"><name pos:start="65:5" pos:end="65:12">prealloc</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="67:61"><name pos:start="65:16" pos:end="65:30">qapi_enum_parse</name><argument_list pos:start="65:31" pos:end="67:61">(<argument pos:start="65:32" pos:end="65:51"><expr pos:start="65:32" pos:end="65:51"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:51">PreallocMode_lookup</name></expr></argument>, <argument pos:start="65:54" pos:end="65:59"><expr pos:start="65:54" pos:end="65:59"><name pos:start="65:54" pos:end="65:59">optstr</name></expr></argument>,

                               <argument pos:start="67:32" pos:end="67:48"><expr pos:start="67:32" pos:end="67:48"><name pos:start="67:32" pos:end="67:48">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="67:51" pos:end="67:60"><expr pos:start="67:51" pos:end="67:60"><operator pos:start="67:51" pos:end="67:51">&amp;</operator><name pos:start="67:52" pos:end="67:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:19"><expr pos:start="69:5" pos:end="69:18"><call pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:10">g_free</name><argument_list pos:start="69:11" pos:end="69:18">(<argument pos:start="69:12" pos:end="69:17"><expr pos:start="69:12" pos:end="69:17"><name pos:start="69:12" pos:end="69:17">optstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:18">(<expr pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:17">local_err</name></expr>)</condition> <block pos:start="71:20" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:17">

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:60"><expr pos:start="79:5" pos:end="79:59"><name pos:start="79:5" pos:end="79:10">optstr</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:59"><name pos:start="79:14" pos:end="79:29">qemu_opt_get_del</name><argument_list pos:start="79:30" pos:end="79:59">(<argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">opts</name></expr></argument>, <argument pos:start="79:37" pos:end="79:58"><expr pos:start="79:37" pos:end="79:58"><name pos:start="79:37" pos:end="79:58">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:32"><expr pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:20">has_backing_file</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <operator pos:start="81:24" pos:end="81:24">!</operator><operator pos:start="81:25" pos:end="81:25">!</operator><name pos:start="81:26" pos:end="81:31">optstr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:19"><expr pos:start="83:5" pos:end="83:18"><call pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:10">g_free</name><argument_list pos:start="83:11" pos:end="83:18">(<argument pos:start="83:12" pos:end="83:17"><expr pos:start="83:12" pos:end="83:17"><name pos:start="83:12" pos:end="83:17">optstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="89:46"><expr pos:start="87:5" pos:end="89:45"><name pos:start="87:5" pos:end="87:16">virtual_size</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="89:45"><name pos:start="87:20" pos:end="87:31">align_offset</name><argument_list pos:start="87:32" pos:end="89:45">(<argument pos:start="87:33" pos:end="87:78"><expr pos:start="87:33" pos:end="87:78"><call pos:start="87:33" pos:end="87:78"><name pos:start="87:33" pos:end="87:53">qemu_opt_get_size_del</name><argument_list pos:start="87:54" pos:end="87:78">(<argument pos:start="87:55" pos:end="87:58"><expr pos:start="87:55" pos:end="87:58"><name pos:start="87:55" pos:end="87:58">opts</name></expr></argument>, <argument pos:start="87:61" pos:end="87:74"><expr pos:start="87:61" pos:end="87:74"><name pos:start="87:61" pos:end="87:74">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="87:77" pos:end="87:77"><expr pos:start="87:77" pos:end="87:77"><literal type="number" pos:start="87:77" pos:end="87:77">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="89:33" pos:end="89:44"><expr pos:start="89:33" pos:end="89:44"><name pos:start="89:33" pos:end="89:44">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:47">/* Check that virtual disk size is valid */</comment>

    <expr_stmt pos:start="95:5" pos:end="97:62"><expr pos:start="95:5" pos:end="97:61"><name pos:start="95:5" pos:end="95:13">l2_tables</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <call pos:start="95:17" pos:end="97:61"><name pos:start="95:17" pos:end="95:28">DIV_ROUND_UP</name><argument_list pos:start="95:29" pos:end="97:61">(<argument pos:start="95:30" pos:end="95:56"><expr pos:start="95:30" pos:end="95:56"><name pos:start="95:30" pos:end="95:41">virtual_size</name> <operator pos:start="95:43" pos:end="95:43">/</operator> <name pos:start="95:45" pos:end="95:56">cluster_size</name></expr></argument>,

                             <argument pos:start="97:30" pos:end="97:60"><expr pos:start="97:30" pos:end="97:60"><name pos:start="97:30" pos:end="97:41">cluster_size</name> <operator pos:start="97:43" pos:end="97:43">/</operator> <sizeof pos:start="97:45" pos:end="97:60">sizeof<argument_list pos:start="97:51" pos:end="97:60">(<argument pos:start="97:52" pos:end="97:59"><expr pos:start="97:52" pos:end="97:59"><name pos:start="97:52" pos:end="97:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:56">(<expr pos:start="99:9" pos:end="99:55"><name pos:start="99:9" pos:end="99:17">l2_tables</name> <operator pos:start="99:19" pos:end="99:19">*</operator> <sizeof pos:start="99:21" pos:end="99:36">sizeof<argument_list pos:start="99:27" pos:end="99:36">(<argument pos:start="99:28" pos:end="99:35"><expr pos:start="99:28" pos:end="99:35"><name pos:start="99:28" pos:end="99:35">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="99:38" pos:end="99:38">&gt;</operator> <name pos:start="99:40" pos:end="99:55">QCOW_MAX_L1_SIZE</name></expr>)</condition> <block pos:start="99:58" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:17">

        <expr_stmt pos:start="101:9" pos:end="103:68"><expr pos:start="101:9" pos:end="103:67"><call pos:start="101:9" pos:end="103:67"><name pos:start="101:9" pos:end="101:18">error_setg</name><argument_list pos:start="101:19" pos:end="103:67">(<argument pos:start="101:20" pos:end="101:29"><expr pos:start="101:20" pos:end="101:29"><operator pos:start="101:20" pos:end="101:20">&amp;</operator><name pos:start="101:21" pos:end="101:29">local_err</name></expr></argument>, <argument pos:start="101:32" pos:end="103:66"><expr pos:start="101:32" pos:end="103:66"><literal type="string" pos:start="101:32" pos:end="101:61">"The image size is too large "</literal>

                               <literal type="string" pos:start="103:32" pos:end="103:66">"(try using a larger cluster size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:17">goto <name pos:start="105:14" pos:end="105:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:33">/* Account for input image */</comment>

    <if_stmt pos:start="113:5" pos:end="215:5"><if pos:start="113:5" pos:end="215:5">if <condition pos:start="113:8" pos:end="113:14">(<expr pos:start="113:9" pos:end="113:13"><name pos:start="113:9" pos:end="113:13">in_bs</name></expr>)</condition> <block pos:start="113:16" pos:end="215:5">{<block_content pos:start="115:9" pos:end="213:9">

        <decl_stmt pos:start="115:9" pos:end="115:46"><decl pos:start="115:9" pos:end="115:45"><type pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:15">int64_t</name></type> <name pos:start="115:17" pos:end="115:21">ssize</name> <init pos:start="115:23" pos:end="115:45">= <expr pos:start="115:25" pos:end="115:45"><call pos:start="115:25" pos:end="115:45"><name pos:start="115:25" pos:end="115:38">bdrv_getlength</name><argument_list pos:start="115:39" pos:end="115:45">(<argument pos:start="115:40" pos:end="115:44"><expr pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:44">in_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:22">(<expr pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:17">ssize</name> <operator pos:start="117:19" pos:end="117:19">&lt;</operator> <literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr>)</condition> <block pos:start="117:24" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:21">

            <expr_stmt pos:start="119:13" pos:end="121:65"><expr pos:start="119:13" pos:end="121:64"><call pos:start="119:13" pos:end="121:64"><name pos:start="119:13" pos:end="119:28">error_setg_errno</name><argument_list pos:start="119:29" pos:end="121:64">(<argument pos:start="119:30" pos:end="119:39"><expr pos:start="119:30" pos:end="119:39"><operator pos:start="119:30" pos:end="119:30">&amp;</operator><name pos:start="119:31" pos:end="119:39">local_err</name></expr></argument>, <argument pos:start="119:42" pos:end="119:47"><expr pos:start="119:42" pos:end="119:47"><operator pos:start="119:42" pos:end="119:42">-</operator><name pos:start="119:43" pos:end="119:47">ssize</name></expr></argument>,

                             <argument pos:start="121:30" pos:end="121:63"><expr pos:start="121:30" pos:end="121:63"><literal type="string" pos:start="121:30" pos:end="121:63">"Unable to get image virtual_size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:21">goto <name pos:start="123:18" pos:end="123:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:57"><expr pos:start="129:9" pos:end="129:56"><name pos:start="129:9" pos:end="129:20">virtual_size</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:56"><name pos:start="129:24" pos:end="129:35">align_offset</name><argument_list pos:start="129:36" pos:end="129:56">(<argument pos:start="129:37" pos:end="129:41"><expr pos:start="129:37" pos:end="129:41"><name pos:start="129:37" pos:end="129:41">ssize</name></expr></argument>, <argument pos:start="129:44" pos:end="129:55"><expr pos:start="129:44" pos:end="129:55"><name pos:start="129:44" pos:end="129:55">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="213:9"><if pos:start="133:9" pos:end="147:9">if <condition pos:start="133:12" pos:end="133:29">(<expr pos:start="133:13" pos:end="133:28"><name pos:start="133:13" pos:end="133:28">has_backing_file</name></expr>)</condition> <block pos:start="133:31" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:36">

            <comment type="block" pos:start="135:13" pos:end="143:15">/* We don't how much of the backing chain is shared by the input

             * image and the new image file.  In the worst case the new image's

             * backing file has nothing in common with the input image.  Be

             * conservative and assume all clusters need to be written.

             */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:36"><expr pos:start="145:13" pos:end="145:35"><name pos:start="145:13" pos:end="145:20">required</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <name pos:start="145:24" pos:end="145:35">virtual_size</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="213:9">else <block pos:start="147:16" pos:end="213:9">{<block_content pos:start="149:13" pos:end="211:13">

            <decl_stmt pos:start="149:13" pos:end="149:27"><decl pos:start="149:13" pos:end="149:26"><type pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:19">int64_t</name></type> <name pos:start="149:21" pos:end="149:26">offset</name></decl>;</decl_stmt>

            <decl_stmt pos:start="151:13" pos:end="151:25"><decl pos:start="151:13" pos:end="151:24"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:20">pnum</name> <init pos:start="151:22" pos:end="151:24">= <expr pos:start="151:24" pos:end="151:24"><literal type="number" pos:start="151:24" pos:end="151:24">0</literal></expr></init></decl>;</decl_stmt>



            <for pos:start="155:13" pos:end="211:13">for <control pos:start="155:17" pos:end="157:51">(<init pos:start="155:18" pos:end="155:28"><expr pos:start="155:18" pos:end="155:27"><name pos:start="155:18" pos:end="155:23">offset</name> <operator pos:start="155:25" pos:end="155:25">=</operator> <literal type="number" pos:start="155:27" pos:end="155:27">0</literal></expr>;</init> <condition pos:start="155:30" pos:end="155:44"><expr pos:start="155:30" pos:end="155:43"><name pos:start="155:30" pos:end="155:35">offset</name> <operator pos:start="155:37" pos:end="155:37">&lt;</operator> <name pos:start="155:39" pos:end="155:43">ssize</name></expr>;</condition>

                 <incr pos:start="157:18" pos:end="157:50"><expr pos:start="157:18" pos:end="157:50"><name pos:start="157:18" pos:end="157:23">offset</name> <operator pos:start="157:25" pos:end="157:26">+=</operator> <name pos:start="157:28" pos:end="157:31">pnum</name> <operator pos:start="157:33" pos:end="157:33">*</operator> <name pos:start="157:35" pos:end="157:50">BDRV_SECTOR_SIZE</name></expr></incr>)</control> <block pos:start="157:53" pos:end="211:13">{<block_content pos:start="159:17" pos:end="209:17">

                <decl_stmt pos:start="159:17" pos:end="161:80"><decl pos:start="159:17" pos:end="161:79"><type pos:start="159:17" pos:end="159:19"><name pos:start="159:17" pos:end="159:19">int</name></type> <name pos:start="159:21" pos:end="159:30">nb_sectors</name> <init pos:start="159:32" pos:end="161:79">= <expr pos:start="159:34" pos:end="161:79"><call pos:start="159:34" pos:end="161:60"><name pos:start="159:34" pos:end="159:36">MIN</name><argument_list pos:start="159:37" pos:end="161:60">(<argument pos:start="159:38" pos:end="159:51"><expr pos:start="159:38" pos:end="159:51"><name pos:start="159:38" pos:end="159:42">ssize</name> <operator pos:start="159:44" pos:end="159:44">-</operator> <name pos:start="159:46" pos:end="159:51">offset</name></expr></argument>,

                                     <argument pos:start="161:38" pos:end="161:59"><expr pos:start="161:38" pos:end="161:59"><name pos:start="161:38" pos:end="161:59">BDRV_REQUEST_MAX_BYTES</name></expr></argument>)</argument_list></call> <operator pos:start="161:62" pos:end="161:62">/</operator> <name pos:start="161:64" pos:end="161:79">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="163:17" pos:end="163:39"><decl pos:start="163:17" pos:end="163:38"><type pos:start="163:17" pos:end="163:34"><name pos:start="163:17" pos:end="163:32">BlockDriverState</name> <modifier pos:start="163:34" pos:end="163:34">*</modifier></type><name pos:start="163:35" pos:end="163:38">file</name></decl>;</decl_stmt>

                <decl_stmt pos:start="165:17" pos:end="165:28"><decl pos:start="165:17" pos:end="165:27"><type pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:23">int64_t</name></type> <name pos:start="165:25" pos:end="165:27">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="169:17" pos:end="175:64"><expr pos:start="169:17" pos:end="175:63"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="175:63"><name pos:start="169:23" pos:end="169:49">bdrv_get_block_status_above</name><argument_list pos:start="169:50" pos:end="175:63">(<argument pos:start="169:51" pos:end="169:55"><expr pos:start="169:51" pos:end="169:55"><name pos:start="169:51" pos:end="169:55">in_bs</name></expr></argument>, <argument pos:start="169:58" pos:end="169:61"><expr pos:start="169:58" pos:end="169:61"><name pos:start="169:58" pos:end="169:61">NULL</name></expr></argument>,

                                                  <argument pos:start="171:51" pos:end="171:76"><expr pos:start="171:51" pos:end="171:76"><name pos:start="171:51" pos:end="171:56">offset</name> <operator pos:start="171:58" pos:end="171:59">&gt;&gt;</operator> <name pos:start="171:61" pos:end="171:76">BDRV_SECTOR_BITS</name></expr></argument>,

                                                  <argument pos:start="173:51" pos:end="173:60"><expr pos:start="173:51" pos:end="173:60"><name pos:start="173:51" pos:end="173:60">nb_sectors</name></expr></argument>,

                                                  <argument pos:start="175:51" pos:end="175:55"><expr pos:start="175:51" pos:end="175:55"><operator pos:start="175:51" pos:end="175:51">&amp;</operator><name pos:start="175:52" pos:end="175:55">pnum</name></expr></argument>, <argument pos:start="175:58" pos:end="175:62"><expr pos:start="175:58" pos:end="175:62"><operator pos:start="175:58" pos:end="175:58">&amp;</operator><name pos:start="175:59" pos:end="175:62">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="177:17" pos:end="185:17"><if pos:start="177:17" pos:end="185:17">if <condition pos:start="177:20" pos:end="177:28">(<expr pos:start="177:21" pos:end="177:27"><name pos:start="177:21" pos:end="177:23">ret</name> <operator pos:start="177:25" pos:end="177:25">&lt;</operator> <literal type="number" pos:start="177:27" pos:end="177:27">0</literal></expr>)</condition> <block pos:start="177:30" pos:end="185:17">{<block_content pos:start="179:21" pos:end="183:29">

                    <expr_stmt pos:start="179:21" pos:end="181:67"><expr pos:start="179:21" pos:end="181:66"><call pos:start="179:21" pos:end="181:66"><name pos:start="179:21" pos:end="179:36">error_setg_errno</name><argument_list pos:start="179:37" pos:end="181:66">(<argument pos:start="179:38" pos:end="179:47"><expr pos:start="179:38" pos:end="179:47"><operator pos:start="179:38" pos:end="179:38">&amp;</operator><name pos:start="179:39" pos:end="179:47">local_err</name></expr></argument>, <argument pos:start="179:50" pos:end="179:53"><expr pos:start="179:50" pos:end="179:53"><operator pos:start="179:50" pos:end="179:50">-</operator><name pos:start="179:51" pos:end="179:53">ret</name></expr></argument>,

                                     <argument pos:start="181:38" pos:end="181:65"><expr pos:start="181:38" pos:end="181:65"><literal type="string" pos:start="181:38" pos:end="181:65">"Unable to get block status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="183:21" pos:end="183:29">goto <name pos:start="183:26" pos:end="183:28">err</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="189:17" pos:end="209:17"><if pos:start="189:17" pos:end="193:17">if <condition pos:start="189:20" pos:end="189:42">(<expr pos:start="189:21" pos:end="189:41"><name pos:start="189:21" pos:end="189:23">ret</name> <operator pos:start="189:25" pos:end="189:25">&amp;</operator> <name pos:start="189:27" pos:end="189:41">BDRV_BLOCK_ZERO</name></expr>)</condition> <block pos:start="189:44" pos:end="193:17">{<block_content>

                    <comment type="block" pos:start="191:21" pos:end="191:71">/* Skip zero regions (safe with no backing file) */</comment>

                </block_content>}</block></if> <if type="elseif" pos:start="193:19" pos:end="209:17">else if <condition pos:start="193:27" pos:end="195:68">(<expr pos:start="193:28" pos:end="195:67"><operator pos:start="193:28" pos:end="193:28">(</operator><name pos:start="193:29" pos:end="193:31">ret</name> <operator pos:start="193:33" pos:end="193:33">&amp;</operator> <operator pos:start="193:35" pos:end="193:35">(</operator><name pos:start="193:36" pos:end="193:50">BDRV_BLOCK_DATA</name> <operator pos:start="193:52" pos:end="193:52">|</operator> <name pos:start="193:54" pos:end="193:73">BDRV_BLOCK_ALLOCATED</name><operator pos:start="193:74" pos:end="193:74">)</operator><operator pos:start="193:75" pos:end="193:75">)</operator> <operator pos:start="193:77" pos:end="193:78">==</operator>

                           <operator pos:start="195:28" pos:end="195:28">(</operator><name pos:start="195:29" pos:end="195:43">BDRV_BLOCK_DATA</name> <operator pos:start="195:45" pos:end="195:45">|</operator> <name pos:start="195:47" pos:end="195:66">BDRV_BLOCK_ALLOCATED</name><operator pos:start="195:67" pos:end="195:67">)</operator></expr>)</condition> <block pos:start="195:70" pos:end="209:17">{<block_content pos:start="199:21" pos:end="207:80">

                    <comment type="block" pos:start="197:21" pos:end="197:74">/* Extend pnum to end of cluster for next iteration */</comment>

                    <expr_stmt pos:start="199:21" pos:end="201:77"><expr pos:start="199:21" pos:end="201:76"><name pos:start="199:21" pos:end="199:24">pnum</name> <operator pos:start="199:26" pos:end="199:26">=</operator> <operator pos:start="199:28" pos:end="199:28">(</operator><call pos:start="199:29" pos:end="201:46"><name pos:start="199:29" pos:end="199:36">ROUND_UP</name><argument_list pos:start="199:37" pos:end="201:46">(<argument pos:start="199:38" pos:end="199:69"><expr pos:start="199:38" pos:end="199:69"><name pos:start="199:38" pos:end="199:43">offset</name> <operator pos:start="199:45" pos:end="199:45">+</operator> <name pos:start="199:47" pos:end="199:50">pnum</name> <operator pos:start="199:52" pos:end="199:52">*</operator> <name pos:start="199:54" pos:end="199:69">BDRV_SECTOR_SIZE</name></expr></argument>,

                                 <argument pos:start="201:34" pos:end="201:45"><expr pos:start="201:34" pos:end="201:45"><name pos:start="201:34" pos:end="201:45">cluster_size</name></expr></argument>)</argument_list></call> <operator pos:start="201:48" pos:end="201:48">-</operator> <name pos:start="201:50" pos:end="201:55">offset</name><operator pos:start="201:56" pos:end="201:56">)</operator> <operator pos:start="201:58" pos:end="201:59">&gt;&gt;</operator> <name pos:start="201:61" pos:end="201:76">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>



                    <comment type="block" pos:start="205:21" pos:end="205:51">/* Count clusters we've seen */</comment>

                    <expr_stmt pos:start="207:21" pos:end="207:80"><expr pos:start="207:21" pos:end="207:79"><name pos:start="207:21" pos:end="207:28">required</name> <operator pos:start="207:30" pos:end="207:31">+=</operator> <name pos:start="207:33" pos:end="207:38">offset</name> <operator pos:start="207:40" pos:end="207:40">%</operator> <name pos:start="207:42" pos:end="207:53">cluster_size</name> <operator pos:start="207:55" pos:end="207:55">+</operator> <name pos:start="207:57" pos:end="207:60">pnum</name> <operator pos:start="207:62" pos:end="207:62">*</operator> <name pos:start="207:64" pos:end="207:79">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="219:5" pos:end="223:7">/* Take into account preallocation.  Nothing special is needed for

     * PREALLOC_MODE_METADATA since metadata is always counted.

     */</comment>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:75">(<expr pos:start="225:9" pos:end="225:74"><name pos:start="225:9" pos:end="225:16">prealloc</name> <operator pos:start="225:18" pos:end="225:19">==</operator> <name pos:start="225:21" pos:end="225:38">PREALLOC_MODE_FULL</name> <operator pos:start="225:40" pos:end="225:41">||</operator> <name pos:start="225:43" pos:end="225:50">prealloc</name> <operator pos:start="225:52" pos:end="225:53">==</operator> <name pos:start="225:55" pos:end="225:74">PREALLOC_MODE_FALLOC</name></expr>)</condition> <block pos:start="225:77" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:32">

        <expr_stmt pos:start="227:9" pos:end="227:32"><expr pos:start="227:9" pos:end="227:31"><name pos:start="227:9" pos:end="227:16">required</name> <operator pos:start="227:18" pos:end="227:18">=</operator> <name pos:start="227:20" pos:end="227:31">virtual_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:38"><expr pos:start="233:5" pos:end="233:37"><name pos:start="233:5" pos:end="233:8">info</name> <operator pos:start="233:10" pos:end="233:10">=</operator> <call pos:start="233:12" pos:end="233:37"><name pos:start="233:12" pos:end="233:16">g_new</name><argument_list pos:start="233:17" pos:end="233:37">(<argument pos:start="233:18" pos:end="233:33"><expr pos:start="233:18" pos:end="233:33"><name pos:start="233:18" pos:end="233:33">BlockMeasureInfo</name></expr></argument>, <argument pos:start="233:36" pos:end="233:36"><expr pos:start="233:36" pos:end="233:36"><literal type="number" pos:start="233:36" pos:end="233:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="239:55"><expr pos:start="235:5" pos:end="239:54"><name pos:start="235:5" pos:end="235:25"><name pos:start="235:5" pos:end="235:8">info</name><operator pos:start="235:9" pos:end="235:10">-&gt;</operator><name pos:start="235:11" pos:end="235:25">fully_allocated</name></name> <operator pos:start="235:27" pos:end="235:27">=</operator>

        <call pos:start="237:9" pos:end="239:54"><name pos:start="237:9" pos:end="237:32">qcow2_calc_prealloc_size</name><argument_list pos:start="237:33" pos:end="239:54">(<argument pos:start="237:34" pos:end="237:45"><expr pos:start="237:34" pos:end="237:45"><name pos:start="237:34" pos:end="237:45">virtual_size</name></expr></argument>, <argument pos:start="237:48" pos:end="237:59"><expr pos:start="237:48" pos:end="237:59"><name pos:start="237:48" pos:end="237:59">cluster_size</name></expr></argument>,

                                 <argument pos:start="239:34" pos:end="239:53"><expr pos:start="239:34" pos:end="239:53"><call pos:start="239:34" pos:end="239:53"><name pos:start="239:34" pos:end="239:38">ctz32</name><argument_list pos:start="239:39" pos:end="239:53">(<argument pos:start="239:40" pos:end="239:52"><expr pos:start="239:40" pos:end="239:52"><name pos:start="239:40" pos:end="239:52">refcount_bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="243:5" pos:end="249:7">/* Remove data clusters that are not required.  This overestimates the

     * required size because metadata needed for the fully allocated file is

     * still counted.

     */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:69"><expr pos:start="251:5" pos:end="251:68"><name pos:start="251:5" pos:end="251:18"><name pos:start="251:5" pos:end="251:8">info</name><operator pos:start="251:9" pos:end="251:10">-&gt;</operator><name pos:start="251:11" pos:end="251:18">required</name></name> <operator pos:start="251:20" pos:end="251:20">=</operator> <name pos:start="251:22" pos:end="251:42"><name pos:start="251:22" pos:end="251:25">info</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:42">fully_allocated</name></name> <operator pos:start="251:44" pos:end="251:44">-</operator> <name pos:start="251:46" pos:end="251:57">virtual_size</name> <operator pos:start="251:59" pos:end="251:59">+</operator> <name pos:start="251:61" pos:end="251:68">required</name></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:16">return <expr pos:start="253:12" pos:end="253:15"><name pos:start="253:12" pos:end="253:15">info</name></expr>;</return>



<label pos:start="257:1" pos:end="257:4"><name pos:start="257:1" pos:end="257:3">err</name>:</label>

    <expr_stmt pos:start="259:5" pos:end="259:37"><expr pos:start="259:5" pos:end="259:36"><call pos:start="259:5" pos:end="259:36"><name pos:start="259:5" pos:end="259:19">error_propagate</name><argument_list pos:start="259:20" pos:end="259:36">(<argument pos:start="259:21" pos:end="259:24"><expr pos:start="259:21" pos:end="259:24"><name pos:start="259:21" pos:end="259:24">errp</name></expr></argument>, <argument pos:start="259:27" pos:end="259:35"><expr pos:start="259:27" pos:end="259:35"><name pos:start="259:27" pos:end="259:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="261:5" pos:end="261:16">return <expr pos:start="261:12" pos:end="261:15"><name pos:start="261:12" pos:end="261:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
