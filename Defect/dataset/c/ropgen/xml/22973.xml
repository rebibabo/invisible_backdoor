<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22973.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:49"><name pos:start="1:1" pos:end="1:10">build_dsdt</name><argument_list pos:start="1:11" pos:end="3:49">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>,
           <argument pos:start="2:12" pos:end="2:25">AcpiPmInfo *pm</argument>, <argument pos:start="2:28" pos:end="2:45">AcpiMiscInfo *misc</argument>,
           <argument pos:start="3:12" pos:end="3:25">PcPciInfo *pci</argument>, <argument pos:start="3:28" pos:end="3:48">MachineState *machine</argument>)</argument_list></macro>
<block pos:start="4:1" pos:end="299:25">{<block_content pos:start="5:5" pos:end="299:25">
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CrsRangeEntry</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:24">entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:68"><decl pos:start="6:5" pos:end="6:13"><type pos:start="6:5" pos:end="6:9"><name pos:start="6:5" pos:end="6:7">Aml</name> <modifier pos:start="6:9" pos:end="6:9">*</modifier></type><name pos:start="6:10" pos:end="6:13">dsdt</name></decl>, <decl pos:start="6:16" pos:end="6:24"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:24">sb_scope</name></decl>, <decl pos:start="6:27" pos:end="6:32"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:27" pos:end="6:27">*</modifier></type><name pos:start="6:28" pos:end="6:32">scope</name></decl>, <decl pos:start="6:35" pos:end="6:38"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:35" pos:end="6:35">*</modifier></type><name pos:start="6:36" pos:end="6:38">dev</name></decl>, <decl pos:start="6:41" pos:end="6:47"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:41" pos:end="6:41">*</modifier></type><name pos:start="6:42" pos:end="6:47">method</name></decl>, <decl pos:start="6:50" pos:end="6:55"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:50" pos:end="6:50">*</modifier></type><name pos:start="6:51" pos:end="6:55">field</name></decl>, <decl pos:start="6:58" pos:end="6:61"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:58" pos:end="6:58">*</modifier></type><name pos:start="6:59" pos:end="6:61">pkg</name></decl>, <decl pos:start="6:64" pos:end="6:67"><type ref="prev" pos:start="6:5" pos:end="6:9"><modifier pos:start="6:64" pos:end="6:64">*</modifier></type><name pos:start="6:65" pos:end="6:67">crs</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:75"><decl pos:start="7:5" pos:end="7:74"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">GPtrArray</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:25">mem_ranges</name> <init pos:start="7:27" pos:end="7:74">= <expr pos:start="7:29" pos:end="7:74"><call pos:start="7:29" pos:end="7:74"><name pos:start="7:29" pos:end="7:58">g_ptr_array_new_with_free_func</name><argument_list pos:start="7:59" pos:end="7:74">(<argument pos:start="7:60" pos:end="7:73"><expr pos:start="7:60" pos:end="7:73"><name pos:start="7:60" pos:end="7:73">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:74"><decl pos:start="8:5" pos:end="8:73"><type pos:start="8:5" pos:end="8:15"><name pos:start="8:5" pos:end="8:13">GPtrArray</name> <modifier pos:start="8:15" pos:end="8:15">*</modifier></type><name pos:start="8:16" pos:end="8:24">io_ranges</name> <init pos:start="8:26" pos:end="8:73">= <expr pos:start="8:28" pos:end="8:73"><call pos:start="8:28" pos:end="8:73"><name pos:start="8:28" pos:end="8:57">g_ptr_array_new_with_free_func</name><argument_list pos:start="8:58" pos:end="8:73">(<argument pos:start="8:59" pos:end="8:72"><expr pos:start="8:59" pos:end="8:72"><name pos:start="8:59" pos:end="8:72">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:24">pcms</name> <init pos:start="9:26" pos:end="9:46">= <expr pos:start="9:28" pos:end="9:46"><call pos:start="9:28" pos:end="9:46"><name pos:start="9:28" pos:end="9:37">PC_MACHINE</name><argument_list pos:start="9:38" pos:end="9:46">(<argument pos:start="9:39" pos:end="9:45"><expr pos:start="9:39" pos:end="9:45"><name pos:start="9:39" pos:end="9:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:41"><decl pos:start="10:5" pos:end="10:40"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:12">uint32_t</name></type> <name pos:start="10:14" pos:end="10:19">nr_mem</name> <init pos:start="10:21" pos:end="10:40">= <expr pos:start="10:23" pos:end="10:40"><name pos:start="10:23" pos:end="10:40"><name pos:start="10:23" pos:end="10:29">machine</name><operator pos:start="10:30" pos:end="10:31">-&gt;</operator><name pos:start="10:32" pos:end="10:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">root_bus_limit</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><literal type="number" pos:start="11:26" pos:end="11:29">0xFF</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:23"><decl pos:start="12:5" pos:end="12:22"><type pos:start="12:5" pos:end="12:12"><name pos:start="12:5" pos:end="12:10">PCIBus</name> <modifier pos:start="12:12" pos:end="12:12">*</modifier></type><name pos:start="12:13" pos:end="12:15">bus</name> <init pos:start="12:17" pos:end="12:22">= <expr pos:start="12:19" pos:end="12:22"><name pos:start="12:19" pos:end="12:22">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>
    <expr_stmt pos:start="14:5" pos:end="14:32"><expr pos:start="14:5" pos:end="14:31"><name pos:start="14:5" pos:end="14:8">dsdt</name> <operator pos:start="14:10" pos:end="14:10">=</operator> <call pos:start="14:12" pos:end="14:31"><name pos:start="14:12" pos:end="14:29">init_aml_allocator</name><argument_list pos:start="14:30" pos:end="14:31">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="15:5" pos:end="15:34">/* Reserve space for header */</comment>
    <expr_stmt pos:start="16:5" pos:end="16:55"><expr pos:start="16:5" pos:end="16:54"><call pos:start="16:5" pos:end="16:54"><name pos:start="16:5" pos:end="16:18">acpi_data_push</name><argument_list pos:start="16:19" pos:end="16:54">(<argument pos:start="16:20" pos:end="16:28"><expr pos:start="16:20" pos:end="16:28"><name pos:start="16:20" pos:end="16:28"><name pos:start="16:20" pos:end="16:23">dsdt</name><operator pos:start="16:24" pos:end="16:25">-&gt;</operator><name pos:start="16:26" pos:end="16:28">buf</name></name></expr></argument>, <argument pos:start="16:31" pos:end="16:53"><expr pos:start="16:31" pos:end="16:53"><sizeof pos:start="16:31" pos:end="16:53">sizeof<argument_list pos:start="16:37" pos:end="16:53">(<argument pos:start="16:38" pos:end="16:52"><expr pos:start="16:38" pos:end="16:52"><name pos:start="16:38" pos:end="16:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:24"><expr pos:start="17:5" pos:end="17:23"><call pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:17">build_dbg_aml</name><argument_list pos:start="17:18" pos:end="17:23">(<argument pos:start="17:19" pos:end="17:22"><expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="299:25"><if pos:start="18:5" pos:end="32:5">if <condition pos:start="18:8" pos:end="18:23">(<expr pos:start="18:9" pos:end="18:22"><name pos:start="18:9" pos:end="18:22"><name pos:start="18:9" pos:end="18:12">misc</name><operator pos:start="18:13" pos:end="18:14">-&gt;</operator><name pos:start="18:15" pos:end="18:22">is_piix4</name></name></expr>)</condition> <block pos:start="18:25" pos:end="32:5">{<block_content pos:start="19:9" pos:end="31:35">
        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:16">sb_scope</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <call pos:start="19:20" pos:end="19:35"><name pos:start="19:20" pos:end="19:28">aml_scope</name><argument_list pos:start="19:29" pos:end="19:35">(<argument pos:start="19:30" pos:end="19:34"><expr pos:start="19:30" pos:end="19:34"><literal type="string" pos:start="19:30" pos:end="19:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:33"><expr pos:start="20:9" pos:end="20:32"><name pos:start="20:9" pos:end="20:11">dev</name> <operator pos:start="20:13" pos:end="20:13">=</operator> <call pos:start="20:15" pos:end="20:32"><name pos:start="20:15" pos:end="20:24">aml_device</name><argument_list pos:start="20:25" pos:end="20:32">(<argument pos:start="20:26" pos:end="20:31"><expr pos:start="20:26" pos:end="20:31"><literal type="string" pos:start="20:26" pos:end="20:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:70"><expr pos:start="21:9" pos:end="21:69"><call pos:start="21:9" pos:end="21:69"><name pos:start="21:9" pos:end="21:18">aml_append</name><argument_list pos:start="21:19" pos:end="21:69">(<argument pos:start="21:20" pos:end="21:22"><expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">dev</name></expr></argument>, <argument pos:start="21:25" pos:end="21:68"><expr pos:start="21:25" pos:end="21:68"><call pos:start="21:25" pos:end="21:68"><name pos:start="21:25" pos:end="21:37">aml_name_decl</name><argument_list pos:start="21:38" pos:end="21:68">(<argument pos:start="21:39" pos:end="21:44"><expr pos:start="21:39" pos:end="21:44"><literal type="string" pos:start="21:39" pos:end="21:44">"_HID"</literal></expr></argument>, <argument pos:start="21:47" pos:end="21:67"><expr pos:start="21:47" pos:end="21:67"><call pos:start="21:47" pos:end="21:67"><name pos:start="21:47" pos:end="21:56">aml_eisaid</name><argument_list pos:start="21:57" pos:end="21:67">(<argument pos:start="21:58" pos:end="21:66"><expr pos:start="21:58" pos:end="21:66"><literal type="string" pos:start="21:58" pos:end="21:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:59"><expr pos:start="22:9" pos:end="22:58"><call pos:start="22:9" pos:end="22:58"><name pos:start="22:9" pos:end="22:18">aml_append</name><argument_list pos:start="22:19" pos:end="22:58">(<argument pos:start="22:20" pos:end="22:22"><expr pos:start="22:20" pos:end="22:22"><name pos:start="22:20" pos:end="22:22">dev</name></expr></argument>, <argument pos:start="22:25" pos:end="22:57"><expr pos:start="22:25" pos:end="22:57"><call pos:start="22:25" pos:end="22:57"><name pos:start="22:25" pos:end="22:37">aml_name_decl</name><argument_list pos:start="22:38" pos:end="22:57">(<argument pos:start="22:39" pos:end="22:44"><expr pos:start="22:39" pos:end="22:44"><literal type="string" pos:start="22:39" pos:end="22:44">"_ADR"</literal></expr></argument>, <argument pos:start="22:47" pos:end="22:56"><expr pos:start="22:47" pos:end="22:56"><call pos:start="22:47" pos:end="22:56"><name pos:start="22:47" pos:end="22:53">aml_int</name><argument_list pos:start="22:54" pos:end="22:56">(<argument pos:start="22:55" pos:end="22:55"><expr pos:start="22:55" pos:end="22:55"><literal type="number" pos:start="22:55" pos:end="22:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:59"><expr pos:start="23:9" pos:end="23:58"><call pos:start="23:9" pos:end="23:58"><name pos:start="23:9" pos:end="23:18">aml_append</name><argument_list pos:start="23:19" pos:end="23:58">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">dev</name></expr></argument>, <argument pos:start="23:25" pos:end="23:57"><expr pos:start="23:25" pos:end="23:57"><call pos:start="23:25" pos:end="23:57"><name pos:start="23:25" pos:end="23:37">aml_name_decl</name><argument_list pos:start="23:38" pos:end="23:57">(<argument pos:start="23:39" pos:end="23:44"><expr pos:start="23:39" pos:end="23:44"><literal type="string" pos:start="23:39" pos:end="23:44">"_UID"</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:56"><expr pos:start="23:47" pos:end="23:56"><call pos:start="23:47" pos:end="23:56"><name pos:start="23:47" pos:end="23:53">aml_int</name><argument_list pos:start="23:54" pos:end="23:56">(<argument pos:start="23:55" pos:end="23:55"><expr pos:start="23:55" pos:end="23:55"><literal type="number" pos:start="23:55" pos:end="23:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:34"><expr pos:start="24:9" pos:end="24:33"><call pos:start="24:9" pos:end="24:33"><name pos:start="24:9" pos:end="24:18">aml_append</name><argument_list pos:start="24:19" pos:end="24:33">(<argument pos:start="24:20" pos:end="24:27"><expr pos:start="24:20" pos:end="24:27"><name pos:start="24:20" pos:end="24:27">sb_scope</name></expr></argument>, <argument pos:start="24:30" pos:end="24:32"><expr pos:start="24:30" pos:end="24:32"><name pos:start="24:30" pos:end="24:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:35"><expr pos:start="25:9" pos:end="25:34"><call pos:start="25:9" pos:end="25:34"><name pos:start="25:9" pos:end="25:18">aml_append</name><argument_list pos:start="25:19" pos:end="25:34">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">dsdt</name></expr></argument>, <argument pos:start="25:26" pos:end="25:33"><expr pos:start="25:26" pos:end="25:33"><name pos:start="25:26" pos:end="25:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:29"><expr pos:start="26:9" pos:end="26:28"><call pos:start="26:9" pos:end="26:28"><name pos:start="26:9" pos:end="26:22">build_hpet_aml</name><argument_list pos:start="26:23" pos:end="26:28">(<argument pos:start="26:24" pos:end="26:27"><expr pos:start="26:24" pos:end="26:27"><name pos:start="26:24" pos:end="26:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:22">build_piix4_pm</name><argument_list pos:start="27:23" pos:end="27:28">(<argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><name pos:start="27:24" pos:end="27:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:37"><expr pos:start="28:9" pos:end="28:36"><call pos:start="28:9" pos:end="28:36"><name pos:start="28:9" pos:end="28:30">build_piix4_isa_bridge</name><argument_list pos:start="28:31" pos:end="28:36">(<argument pos:start="28:32" pos:end="28:35"><expr pos:start="28:32" pos:end="28:35"><name pos:start="28:32" pos:end="28:35">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:36"><expr pos:start="29:9" pos:end="29:35"><call pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:29">build_isa_devices_aml</name><argument_list pos:start="29:30" pos:end="29:35">(<argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><name pos:start="29:31" pos:end="29:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:38"><expr pos:start="30:9" pos:end="30:37"><call pos:start="30:9" pos:end="30:37"><name pos:start="30:9" pos:end="30:31">build_piix4_pci_hotplug</name><argument_list pos:start="30:32" pos:end="30:37">(<argument pos:start="30:33" pos:end="30:36"><expr pos:start="30:33" pos:end="30:36"><name pos:start="30:33" pos:end="30:36">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><call pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:28">build_piix4_pci0_int</name><argument_list pos:start="31:29" pos:end="31:34">(<argument pos:start="31:30" pos:end="31:33"><expr pos:start="31:30" pos:end="31:33"><name pos:start="31:30" pos:end="31:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="32:7" pos:end="299:25">else <block pos:start="32:12" pos:end="299:25">{<block_content pos:start="33:9" pos:end="299:25">
        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:16">sb_scope</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:35"><name pos:start="33:20" pos:end="33:28">aml_scope</name><argument_list pos:start="33:29" pos:end="33:35">(<argument pos:start="33:30" pos:end="33:34"><expr pos:start="33:30" pos:end="33:34"><literal type="string" pos:start="33:30" pos:end="33:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="34:9" pos:end="35:80"><expr pos:start="34:9" pos:end="35:79"><call pos:start="34:9" pos:end="35:79"><name pos:start="34:9" pos:end="34:18">aml_append</name><argument_list pos:start="34:19" pos:end="35:79">(<argument pos:start="34:20" pos:end="34:27"><expr pos:start="34:20" pos:end="34:27"><name pos:start="34:20" pos:end="34:27">sb_scope</name></expr></argument>,
            <argument pos:start="35:13" pos:end="35:78"><expr pos:start="35:13" pos:end="35:78"><call pos:start="35:13" pos:end="35:78"><name pos:start="35:13" pos:end="35:32">aml_operation_region</name><argument_list pos:start="35:33" pos:end="35:78">(<argument pos:start="35:34" pos:end="35:39"><expr pos:start="35:34" pos:end="35:39"><literal type="string" pos:start="35:34" pos:end="35:39">"PCST"</literal></expr></argument>, <argument pos:start="35:42" pos:end="35:54"><expr pos:start="35:42" pos:end="35:54"><name pos:start="35:42" pos:end="35:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="35:57" pos:end="35:71"><expr pos:start="35:57" pos:end="35:71"><call pos:start="35:57" pos:end="35:71"><name pos:start="35:57" pos:end="35:63">aml_int</name><argument_list pos:start="35:64" pos:end="35:71">(<argument pos:start="35:65" pos:end="35:70"><expr pos:start="35:65" pos:end="35:70"><literal type="number" pos:start="35:65" pos:end="35:70">0xae00</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:74" pos:end="35:77"><expr pos:start="35:74" pos:end="35:77"><literal type="number" pos:start="35:74" pos:end="35:77">0x0c</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="37:80"><expr pos:start="36:9" pos:end="37:79"><call pos:start="36:9" pos:end="37:79"><name pos:start="36:9" pos:end="36:18">aml_append</name><argument_list pos:start="36:19" pos:end="37:79">(<argument pos:start="36:20" pos:end="36:27"><expr pos:start="36:20" pos:end="36:27"><name pos:start="36:20" pos:end="36:27">sb_scope</name></expr></argument>,
            <argument pos:start="37:13" pos:end="37:78"><expr pos:start="37:13" pos:end="37:78"><call pos:start="37:13" pos:end="37:78"><name pos:start="37:13" pos:end="37:32">aml_operation_region</name><argument_list pos:start="37:33" pos:end="37:78">(<argument pos:start="37:34" pos:end="37:39"><expr pos:start="37:34" pos:end="37:39"><literal type="string" pos:start="37:34" pos:end="37:39">"PCSB"</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:54"><expr pos:start="37:42" pos:end="37:54"><name pos:start="37:42" pos:end="37:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="37:57" pos:end="37:71"><expr pos:start="37:57" pos:end="37:71"><call pos:start="37:57" pos:end="37:71"><name pos:start="37:57" pos:end="37:63">aml_int</name><argument_list pos:start="37:64" pos:end="37:71">(<argument pos:start="37:65" pos:end="37:70"><expr pos:start="37:65" pos:end="37:70"><literal type="number" pos:start="37:65" pos:end="37:70">0xae0c</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:74" pos:end="37:77"><expr pos:start="37:74" pos:end="37:77"><literal type="number" pos:start="37:74" pos:end="37:77">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:79"><expr pos:start="38:9" pos:end="38:78"><name pos:start="38:9" pos:end="38:13">field</name> <operator pos:start="38:15" pos:end="38:15">=</operator> <call pos:start="38:17" pos:end="38:78"><name pos:start="38:17" pos:end="38:25">aml_field</name><argument_list pos:start="38:26" pos:end="38:78">(<argument pos:start="38:27" pos:end="38:32"><expr pos:start="38:27" pos:end="38:32"><literal type="string" pos:start="38:27" pos:end="38:32">"PCSB"</literal></expr></argument>, <argument pos:start="38:35" pos:end="38:45"><expr pos:start="38:35" pos:end="38:45"><name pos:start="38:35" pos:end="38:45">AML_ANY_ACC</name></expr></argument>, <argument pos:start="38:48" pos:end="38:57"><expr pos:start="38:48" pos:end="38:57"><name pos:start="38:48" pos:end="38:57">AML_NOLOCK</name></expr></argument>, <argument pos:start="38:60" pos:end="38:77"><expr pos:start="38:60" pos:end="38:77"><name pos:start="38:60" pos:end="38:77">AML_WRITE_AS_ZEROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:54"><expr pos:start="39:9" pos:end="39:53"><call pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:18">aml_append</name><argument_list pos:start="39:19" pos:end="39:53">(<argument pos:start="39:20" pos:end="39:24"><expr pos:start="39:20" pos:end="39:24"><name pos:start="39:20" pos:end="39:24">field</name></expr></argument>, <argument pos:start="39:27" pos:end="39:52"><expr pos:start="39:27" pos:end="39:52"><call pos:start="39:27" pos:end="39:52"><name pos:start="39:27" pos:end="39:41">aml_named_field</name><argument_list pos:start="39:42" pos:end="39:52">(<argument pos:start="39:43" pos:end="39:48"><expr pos:start="39:43" pos:end="39:48"><literal type="string" pos:start="39:43" pos:end="39:48">"PCIB"</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:51"><expr pos:start="39:51" pos:end="39:51"><literal type="number" pos:start="39:51" pos:end="39:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:36"><expr pos:start="40:9" pos:end="40:35"><call pos:start="40:9" pos:end="40:35"><name pos:start="40:9" pos:end="40:18">aml_append</name><argument_list pos:start="40:19" pos:end="40:35">(<argument pos:start="40:20" pos:end="40:27"><expr pos:start="40:20" pos:end="40:27"><name pos:start="40:20" pos:end="40:27">sb_scope</name></expr></argument>, <argument pos:start="40:30" pos:end="40:34"><expr pos:start="40:30" pos:end="40:34"><name pos:start="40:30" pos:end="40:34">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:18">aml_append</name><argument_list pos:start="41:19" pos:end="41:34">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">dsdt</name></expr></argument>, <argument pos:start="41:26" pos:end="41:33"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:36"><expr pos:start="42:9" pos:end="42:35"><name pos:start="42:9" pos:end="42:16">sb_scope</name> <operator pos:start="42:18" pos:end="42:18">=</operator> <call pos:start="42:20" pos:end="42:35"><name pos:start="42:20" pos:end="42:28">aml_scope</name><argument_list pos:start="42:29" pos:end="42:35">(<argument pos:start="42:30" pos:end="42:34"><expr pos:start="42:30" pos:end="42:34"><literal type="string" pos:start="42:30" pos:end="42:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:11">dev</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:32"><name pos:start="43:15" pos:end="43:24">aml_device</name><argument_list pos:start="43:25" pos:end="43:32">(<argument pos:start="43:26" pos:end="43:31"><expr pos:start="43:26" pos:end="43:31"><literal type="string" pos:start="43:26" pos:end="43:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:70"><expr pos:start="44:9" pos:end="44:69"><call pos:start="44:9" pos:end="44:69"><name pos:start="44:9" pos:end="44:18">aml_append</name><argument_list pos:start="44:19" pos:end="44:69">(<argument pos:start="44:20" pos:end="44:22"><expr pos:start="44:20" pos:end="44:22"><name pos:start="44:20" pos:end="44:22">dev</name></expr></argument>, <argument pos:start="44:25" pos:end="44:68"><expr pos:start="44:25" pos:end="44:68"><call pos:start="44:25" pos:end="44:68"><name pos:start="44:25" pos:end="44:37">aml_name_decl</name><argument_list pos:start="44:38" pos:end="44:68">(<argument pos:start="44:39" pos:end="44:44"><expr pos:start="44:39" pos:end="44:44"><literal type="string" pos:start="44:39" pos:end="44:44">"_HID"</literal></expr></argument>, <argument pos:start="44:47" pos:end="44:67"><expr pos:start="44:47" pos:end="44:67"><call pos:start="44:47" pos:end="44:67"><name pos:start="44:47" pos:end="44:56">aml_eisaid</name><argument_list pos:start="44:57" pos:end="44:67">(<argument pos:start="44:58" pos:end="44:66"><expr pos:start="44:58" pos:end="44:66"><literal type="string" pos:start="44:58" pos:end="44:66">"PNP0A08"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:70"><expr pos:start="45:9" pos:end="45:69"><call pos:start="45:9" pos:end="45:69"><name pos:start="45:9" pos:end="45:18">aml_append</name><argument_list pos:start="45:19" pos:end="45:69">(<argument pos:start="45:20" pos:end="45:22"><expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">dev</name></expr></argument>, <argument pos:start="45:25" pos:end="45:68"><expr pos:start="45:25" pos:end="45:68"><call pos:start="45:25" pos:end="45:68"><name pos:start="45:25" pos:end="45:37">aml_name_decl</name><argument_list pos:start="45:38" pos:end="45:68">(<argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><literal type="string" pos:start="45:39" pos:end="45:44">"_CID"</literal></expr></argument>, <argument pos:start="45:47" pos:end="45:67"><expr pos:start="45:47" pos:end="45:67"><call pos:start="45:47" pos:end="45:67"><name pos:start="45:47" pos:end="45:56">aml_eisaid</name><argument_list pos:start="45:57" pos:end="45:67">(<argument pos:start="45:58" pos:end="45:66"><expr pos:start="45:58" pos:end="45:66"><literal type="string" pos:start="45:58" pos:end="45:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:59"><expr pos:start="46:9" pos:end="46:58"><call pos:start="46:9" pos:end="46:58"><name pos:start="46:9" pos:end="46:18">aml_append</name><argument_list pos:start="46:19" pos:end="46:58">(<argument pos:start="46:20" pos:end="46:22"><expr pos:start="46:20" pos:end="46:22"><name pos:start="46:20" pos:end="46:22">dev</name></expr></argument>, <argument pos:start="46:25" pos:end="46:57"><expr pos:start="46:25" pos:end="46:57"><call pos:start="46:25" pos:end="46:57"><name pos:start="46:25" pos:end="46:37">aml_name_decl</name><argument_list pos:start="46:38" pos:end="46:57">(<argument pos:start="46:39" pos:end="46:44"><expr pos:start="46:39" pos:end="46:44"><literal type="string" pos:start="46:39" pos:end="46:44">"_ADR"</literal></expr></argument>, <argument pos:start="46:47" pos:end="46:56"><expr pos:start="46:47" pos:end="46:56"><call pos:start="46:47" pos:end="46:56"><name pos:start="46:47" pos:end="46:53">aml_int</name><argument_list pos:start="46:54" pos:end="46:56">(<argument pos:start="46:55" pos:end="46:55"><expr pos:start="46:55" pos:end="46:55"><literal type="number" pos:start="46:55" pos:end="46:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:59"><expr pos:start="47:9" pos:end="47:58"><call pos:start="47:9" pos:end="47:58"><name pos:start="47:9" pos:end="47:18">aml_append</name><argument_list pos:start="47:19" pos:end="47:58">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">dev</name></expr></argument>, <argument pos:start="47:25" pos:end="47:57"><expr pos:start="47:25" pos:end="47:57"><call pos:start="47:25" pos:end="47:57"><name pos:start="47:25" pos:end="47:37">aml_name_decl</name><argument_list pos:start="47:38" pos:end="47:57">(<argument pos:start="47:39" pos:end="47:44"><expr pos:start="47:39" pos:end="47:44"><literal type="string" pos:start="47:39" pos:end="47:44">"_UID"</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:56"><expr pos:start="47:47" pos:end="47:56"><call pos:start="47:47" pos:end="47:56"><name pos:start="47:47" pos:end="47:53">aml_int</name><argument_list pos:start="47:54" pos:end="47:56">(<argument pos:start="47:55" pos:end="47:55"><expr pos:start="47:55" pos:end="47:55"><literal type="number" pos:start="47:55" pos:end="47:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:59"><expr pos:start="48:9" pos:end="48:58"><call pos:start="48:9" pos:end="48:58"><name pos:start="48:9" pos:end="48:18">aml_append</name><argument_list pos:start="48:19" pos:end="48:58">(<argument pos:start="48:20" pos:end="48:22"><expr pos:start="48:20" pos:end="48:22"><name pos:start="48:20" pos:end="48:22">dev</name></expr></argument>, <argument pos:start="48:25" pos:end="48:57"><expr pos:start="48:25" pos:end="48:57"><call pos:start="48:25" pos:end="48:57"><name pos:start="48:25" pos:end="48:37">aml_name_decl</name><argument_list pos:start="48:38" pos:end="48:57">(<argument pos:start="48:39" pos:end="48:44"><expr pos:start="48:39" pos:end="48:44"><literal type="string" pos:start="48:39" pos:end="48:44">"SUPP"</literal></expr></argument>, <argument pos:start="48:47" pos:end="48:56"><expr pos:start="48:47" pos:end="48:56"><call pos:start="48:47" pos:end="48:56"><name pos:start="48:47" pos:end="48:53">aml_int</name><argument_list pos:start="48:54" pos:end="48:56">(<argument pos:start="48:55" pos:end="48:55"><expr pos:start="48:55" pos:end="48:55"><literal type="number" pos:start="48:55" pos:end="48:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:18">aml_append</name><argument_list pos:start="49:19" pos:end="49:58">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:57"><expr pos:start="49:25" pos:end="49:57"><call pos:start="49:25" pos:end="49:57"><name pos:start="49:25" pos:end="49:37">aml_name_decl</name><argument_list pos:start="49:38" pos:end="49:57">(<argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><literal type="string" pos:start="49:39" pos:end="49:44">"CTRL"</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:56"><expr pos:start="49:47" pos:end="49:56"><call pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:53">aml_int</name><argument_list pos:start="49:54" pos:end="49:56">(<argument pos:start="49:55" pos:end="49:55"><expr pos:start="49:55" pos:end="49:55"><literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:48"><expr pos:start="50:9" pos:end="50:47"><call pos:start="50:9" pos:end="50:47"><name pos:start="50:9" pos:end="50:18">aml_append</name><argument_list pos:start="50:19" pos:end="50:47">(<argument pos:start="50:20" pos:end="50:22"><expr pos:start="50:20" pos:end="50:22"><name pos:start="50:20" pos:end="50:22">dev</name></expr></argument>, <argument pos:start="50:25" pos:end="50:46"><expr pos:start="50:25" pos:end="50:46"><call pos:start="50:25" pos:end="50:46"><name pos:start="50:25" pos:end="50:44">build_q35_osc_method</name><argument_list pos:start="50:45" pos:end="50:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><call pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:18">aml_append</name><argument_list pos:start="51:19" pos:end="51:33">(<argument pos:start="51:20" pos:end="51:27"><expr pos:start="51:20" pos:end="51:27"><name pos:start="51:20" pos:end="51:27">sb_scope</name></expr></argument>, <argument pos:start="51:30" pos:end="51:32"><expr pos:start="51:30" pos:end="51:32"><name pos:start="51:30" pos:end="51:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:35"><expr pos:start="52:9" pos:end="52:34"><call pos:start="52:9" pos:end="52:34"><name pos:start="52:9" pos:end="52:18">aml_append</name><argument_list pos:start="52:19" pos:end="52:34">(<argument pos:start="52:20" pos:end="52:23"><expr pos:start="52:20" pos:end="52:23"><name pos:start="52:20" pos:end="52:23">dsdt</name></expr></argument>, <argument pos:start="52:26" pos:end="52:33"><expr pos:start="52:26" pos:end="52:33"><name pos:start="52:26" pos:end="52:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:29"><expr pos:start="53:9" pos:end="53:28"><call pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:22">build_hpet_aml</name><argument_list pos:start="53:23" pos:end="53:28">(<argument pos:start="53:24" pos:end="53:27"><expr pos:start="53:24" pos:end="53:27"><name pos:start="53:24" pos:end="53:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:35"><expr pos:start="54:9" pos:end="54:34"><call pos:start="54:9" pos:end="54:34"><name pos:start="54:9" pos:end="54:28">build_q35_isa_bridge</name><argument_list pos:start="54:29" pos:end="54:34">(<argument pos:start="54:30" pos:end="54:33"><expr pos:start="54:30" pos:end="54:33"><name pos:start="54:30" pos:end="54:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><call pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:29">build_isa_devices_aml</name><argument_list pos:start="55:30" pos:end="55:35">(<argument pos:start="55:31" pos:end="55:34"><expr pos:start="55:31" pos:end="55:34"><name pos:start="55:31" pos:end="55:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="56:9" pos:end="56:33"><expr pos:start="56:9" pos:end="56:32"><call pos:start="56:9" pos:end="56:32"><name pos:start="56:9" pos:end="56:26">build_q35_pci0_int</name><argument_list pos:start="56:27" pos:end="56:32">(<argument pos:start="56:28" pos:end="56:31"><expr pos:start="56:28" pos:end="56:31"><name pos:start="56:28" pos:end="56:31">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><call pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:25">build_cpu_hotplug_aml</name><argument_list pos:start="57:26" pos:end="57:31">(<argument pos:start="57:27" pos:end="57:30"><expr pos:start="57:27" pos:end="57:30"><name pos:start="57:27" pos:end="57:30">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="59:48"><expr pos:start="58:5" pos:end="59:47"><call pos:start="58:5" pos:end="59:47"><name pos:start="58:5" pos:end="58:28">build_memory_hotplug_aml</name><argument_list pos:start="58:29" pos:end="59:47">(<argument pos:start="58:30" pos:end="58:33"><expr pos:start="58:30" pos:end="58:33"><name pos:start="58:30" pos:end="58:33">dsdt</name></expr></argument>, <argument pos:start="58:36" pos:end="58:41"><expr pos:start="58:36" pos:end="58:41"><name pos:start="58:36" pos:end="58:41">nr_mem</name></expr></argument>, <argument pos:start="58:44" pos:end="58:61"><expr pos:start="58:44" pos:end="58:61"><name pos:start="58:44" pos:end="58:61"><name pos:start="58:44" pos:end="58:45">pm</name><operator pos:start="58:46" pos:end="58:47">-&gt;</operator><name pos:start="58:48" pos:end="58:61">mem_hp_io_base</name></name></expr></argument>,
                             <argument pos:start="59:30" pos:end="59:46"><expr pos:start="59:30" pos:end="59:46"><name pos:start="59:30" pos:end="59:46"><name pos:start="59:30" pos:end="59:31">pm</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="60:5" pos:end="60:31"><expr pos:start="60:5" pos:end="60:30"><name pos:start="60:5" pos:end="60:9">scope</name> <operator pos:start="60:11" pos:end="60:11">=</operator>  <call pos:start="60:14" pos:end="60:30"><name pos:start="60:14" pos:end="60:22">aml_scope</name><argument_list pos:start="60:23" pos:end="60:30">(<argument pos:start="60:24" pos:end="60:29"><expr pos:start="60:24" pos:end="60:29"><literal type="string" pos:start="60:24" pos:end="60:29">"_GPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block pos:start="61:5" pos:end="299:25">{<block_content pos:start="62:9" pos:end="299:25">
        <expr_stmt pos:start="62:9" pos:end="62:73"><expr pos:start="62:9" pos:end="62:72"><call pos:start="62:9" pos:end="62:72"><name pos:start="62:9" pos:end="62:18">aml_append</name><argument_list pos:start="62:19" pos:end="62:72">(<argument pos:start="62:20" pos:end="62:24"><expr pos:start="62:20" pos:end="62:24"><name pos:start="62:20" pos:end="62:24">scope</name></expr></argument>, <argument pos:start="62:27" pos:end="62:71"><expr pos:start="62:27" pos:end="62:71"><call pos:start="62:27" pos:end="62:71"><name pos:start="62:27" pos:end="62:39">aml_name_decl</name><argument_list pos:start="62:40" pos:end="62:71">(<argument pos:start="62:41" pos:end="62:46"><expr pos:start="62:41" pos:end="62:46"><literal type="string" pos:start="62:41" pos:end="62:46">"_HID"</literal></expr></argument>, <argument pos:start="62:49" pos:end="62:70"><expr pos:start="62:49" pos:end="62:70"><call pos:start="62:49" pos:end="62:70"><name pos:start="62:49" pos:end="62:58">aml_string</name><argument_list pos:start="62:59" pos:end="62:70">(<argument pos:start="62:60" pos:end="62:69"><expr pos:start="62:60" pos:end="62:69"><literal type="string" pos:start="62:60" pos:end="62:69">"ACPI0006"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="63:9" pos:end="63:68"><expr pos:start="63:9" pos:end="63:67"><call pos:start="63:9" pos:end="63:67"><name pos:start="63:9" pos:end="63:18">aml_append</name><argument_list pos:start="63:19" pos:end="63:67">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">scope</name></expr></argument>, <argument pos:start="63:27" pos:end="63:66"><expr pos:start="63:27" pos:end="63:66"><call pos:start="63:27" pos:end="63:66"><name pos:start="63:27" pos:end="63:36">aml_method</name><argument_list pos:start="63:37" pos:end="63:66">(<argument pos:start="63:38" pos:end="63:43"><expr pos:start="63:38" pos:end="63:43"><literal type="string" pos:start="63:38" pos:end="63:43">"_L00"</literal></expr></argument>, <argument pos:start="63:46" pos:end="63:46"><expr pos:start="63:46" pos:end="63:46"><literal type="number" pos:start="63:46" pos:end="63:46">0</literal></expr></argument>, <argument pos:start="63:49" pos:end="63:65"><expr pos:start="63:49" pos:end="63:65"><name pos:start="63:49" pos:end="63:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="64:9" pos:end="299:25"><if pos:start="64:9" pos:end="71:9">if <condition pos:start="64:12" pos:end="64:27">(<expr pos:start="64:13" pos:end="64:26"><name pos:start="64:13" pos:end="64:26"><name pos:start="64:13" pos:end="64:16">misc</name><operator pos:start="64:17" pos:end="64:18">-&gt;</operator><name pos:start="64:19" pos:end="64:26">is_piix4</name></name></expr>)</condition> <block pos:start="64:29" pos:end="71:9">{<block_content pos:start="65:13" pos:end="70:38">
            <expr_stmt pos:start="65:13" pos:end="65:62"><expr pos:start="65:13" pos:end="65:61"><name pos:start="65:13" pos:end="65:18">method</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:61"><name pos:start="65:22" pos:end="65:31">aml_method</name><argument_list pos:start="65:32" pos:end="65:61">(<argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><literal type="string" pos:start="65:33" pos:end="65:38">"_E01"</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:41"><expr pos:start="65:41" pos:end="65:41"><literal type="number" pos:start="65:41" pos:end="65:41">0</literal></expr></argument>, <argument pos:start="65:44" pos:end="65:60"><expr pos:start="65:44" pos:end="65:60"><name pos:start="65:44" pos:end="65:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="66:13" pos:end="67:66"><expr pos:start="66:13" pos:end="67:65"><call pos:start="66:13" pos:end="67:65"><name pos:start="66:13" pos:end="66:22">aml_append</name><argument_list pos:start="66:23" pos:end="67:65">(<argument pos:start="66:24" pos:end="66:29"><expr pos:start="66:24" pos:end="66:29"><name pos:start="66:24" pos:end="66:29">method</name></expr></argument>,
                <argument pos:start="67:17" pos:end="67:64"><expr pos:start="67:17" pos:end="67:64"><call pos:start="67:17" pos:end="67:64"><name pos:start="67:17" pos:end="67:27">aml_acquire</name><argument_list pos:start="67:28" pos:end="67:64">(<argument pos:start="67:29" pos:end="67:55"><expr pos:start="67:29" pos:end="67:55"><call pos:start="67:29" pos:end="67:55"><name pos:start="67:29" pos:end="67:36">aml_name</name><argument_list pos:start="67:37" pos:end="67:55">(<argument pos:start="67:38" pos:end="67:54"><expr pos:start="67:38" pos:end="67:54"><literal type="string" pos:start="67:38" pos:end="67:54">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:58" pos:end="67:63"><expr pos:start="67:58" pos:end="67:63"><literal type="number" pos:start="67:58" pos:end="67:63">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:61"><expr pos:start="68:13" pos:end="68:60"><call pos:start="68:13" pos:end="68:60"><name pos:start="68:13" pos:end="68:22">aml_append</name><argument_list pos:start="68:23" pos:end="68:60">(<argument pos:start="68:24" pos:end="68:29"><expr pos:start="68:24" pos:end="68:29"><name pos:start="68:24" pos:end="68:29">method</name></expr></argument>, <argument pos:start="68:32" pos:end="68:59"><expr pos:start="68:32" pos:end="68:59"><call pos:start="68:32" pos:end="68:59"><name pos:start="68:32" pos:end="68:40">aml_call0</name><argument_list pos:start="68:41" pos:end="68:59">(<argument pos:start="68:42" pos:end="68:58"><expr pos:start="68:42" pos:end="68:58"><literal type="string" pos:start="68:42" pos:end="68:58">"\\_SB.PCI0.PCNT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:73"><expr pos:start="69:13" pos:end="69:72"><call pos:start="69:13" pos:end="69:72"><name pos:start="69:13" pos:end="69:22">aml_append</name><argument_list pos:start="69:23" pos:end="69:72">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:29">method</name></expr></argument>, <argument pos:start="69:32" pos:end="69:71"><expr pos:start="69:32" pos:end="69:71"><call pos:start="69:32" pos:end="69:71"><name pos:start="69:32" pos:end="69:42">aml_release</name><argument_list pos:start="69:43" pos:end="69:71">(<argument pos:start="69:44" pos:end="69:70"><expr pos:start="69:44" pos:end="69:70"><call pos:start="69:44" pos:end="69:70"><name pos:start="69:44" pos:end="69:51">aml_name</name><argument_list pos:start="69:52" pos:end="69:70">(<argument pos:start="69:53" pos:end="69:69"><expr pos:start="69:53" pos:end="69:69"><literal type="string" pos:start="69:53" pos:end="69:69">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:38"><expr pos:start="70:13" pos:end="70:37"><call pos:start="70:13" pos:end="70:37"><name pos:start="70:13" pos:end="70:22">aml_append</name><argument_list pos:start="70:23" pos:end="70:37">(<argument pos:start="70:24" pos:end="70:28"><expr pos:start="70:24" pos:end="70:28"><name pos:start="70:24" pos:end="70:28">scope</name></expr></argument>, <argument pos:start="70:31" pos:end="70:36"><expr pos:start="70:31" pos:end="70:36"><name pos:start="70:31" pos:end="70:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="71:11" pos:end="299:25">else <block pos:start="71:16" pos:end="299:25">{<block_content pos:start="72:13" pos:end="299:25">
            <expr_stmt pos:start="72:13" pos:end="72:72"><expr pos:start="72:13" pos:end="72:71"><call pos:start="72:13" pos:end="72:71"><name pos:start="72:13" pos:end="72:22">aml_append</name><argument_list pos:start="72:23" pos:end="72:71">(<argument pos:start="72:24" pos:end="72:28"><expr pos:start="72:24" pos:end="72:28"><name pos:start="72:24" pos:end="72:28">scope</name></expr></argument>, <argument pos:start="72:31" pos:end="72:70"><expr pos:start="72:31" pos:end="72:70"><call pos:start="72:31" pos:end="72:70"><name pos:start="72:31" pos:end="72:40">aml_method</name><argument_list pos:start="72:41" pos:end="72:70">(<argument pos:start="72:42" pos:end="72:47"><expr pos:start="72:42" pos:end="72:47"><literal type="string" pos:start="72:42" pos:end="72:47">"_L01"</literal></expr></argument>, <argument pos:start="72:50" pos:end="72:50"><expr pos:start="72:50" pos:end="72:50"><literal type="number" pos:start="72:50" pos:end="72:50">0</literal></expr></argument>, <argument pos:start="72:53" pos:end="72:69"><expr pos:start="72:53" pos:end="72:69"><name pos:start="72:53" pos:end="72:69">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="73:9" pos:end="73:58"><expr pos:start="73:9" pos:end="73:57"><name pos:start="73:9" pos:end="73:14">method</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <call pos:start="73:18" pos:end="73:57"><name pos:start="73:18" pos:end="73:27">aml_method</name><argument_list pos:start="73:28" pos:end="73:57">(<argument pos:start="73:29" pos:end="73:34"><expr pos:start="73:29" pos:end="73:34"><literal type="string" pos:start="73:29" pos:end="73:34">"_E02"</literal></expr></argument>, <argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><literal type="number" pos:start="73:37" pos:end="73:37">0</literal></expr></argument>, <argument pos:start="73:40" pos:end="73:56"><expr pos:start="73:40" pos:end="73:56"><name pos:start="73:40" pos:end="73:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:64"><expr pos:start="74:9" pos:end="74:63"><call pos:start="74:9" pos:end="74:63"><name pos:start="74:9" pos:end="74:18">aml_append</name><argument_list pos:start="74:19" pos:end="74:63">(<argument pos:start="74:20" pos:end="74:25"><expr pos:start="74:20" pos:end="74:25"><name pos:start="74:20" pos:end="74:25">method</name></expr></argument>, <argument pos:start="74:28" pos:end="74:62"><expr pos:start="74:28" pos:end="74:62"><call pos:start="74:28" pos:end="74:62"><name pos:start="74:28" pos:end="74:36">aml_call0</name><argument_list pos:start="74:37" pos:end="74:62">(<argument pos:start="74:38" pos:end="74:61"><expr pos:start="74:38" pos:end="74:61"><literal type="string" pos:start="74:38" pos:end="74:45">"\\_SB."</literal> <name pos:start="74:47" pos:end="74:61">CPU_SCAN_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:34"><expr pos:start="75:9" pos:end="75:33"><call pos:start="75:9" pos:end="75:33"><name pos:start="75:9" pos:end="75:18">aml_append</name><argument_list pos:start="75:19" pos:end="75:33">(<argument pos:start="75:20" pos:end="75:24"><expr pos:start="75:20" pos:end="75:24"><name pos:start="75:20" pos:end="75:24">scope</name></expr></argument>, <argument pos:start="75:27" pos:end="75:32"><expr pos:start="75:27" pos:end="75:32"><name pos:start="75:27" pos:end="75:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="76:9" pos:end="76:58"><expr pos:start="76:9" pos:end="76:57"><name pos:start="76:9" pos:end="76:14">method</name> <operator pos:start="76:16" pos:end="76:16">=</operator> <call pos:start="76:18" pos:end="76:57"><name pos:start="76:18" pos:end="76:27">aml_method</name><argument_list pos:start="76:28" pos:end="76:57">(<argument pos:start="76:29" pos:end="76:34"><expr pos:start="76:29" pos:end="76:34"><literal type="string" pos:start="76:29" pos:end="76:34">"_E03"</literal></expr></argument>, <argument pos:start="76:37" pos:end="76:37"><expr pos:start="76:37" pos:end="76:37"><literal type="number" pos:start="76:37" pos:end="76:37">0</literal></expr></argument>, <argument pos:start="76:40" pos:end="76:56"><expr pos:start="76:40" pos:end="76:56"><name pos:start="76:40" pos:end="76:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="77:9" pos:end="77:67"><expr pos:start="77:9" pos:end="77:66"><call pos:start="77:9" pos:end="77:66"><name pos:start="77:9" pos:end="77:18">aml_append</name><argument_list pos:start="77:19" pos:end="77:66">(<argument pos:start="77:20" pos:end="77:25"><expr pos:start="77:20" pos:end="77:25"><name pos:start="77:20" pos:end="77:25">method</name></expr></argument>, <argument pos:start="77:28" pos:end="77:65"><expr pos:start="77:28" pos:end="77:65"><call pos:start="77:28" pos:end="77:65"><name pos:start="77:28" pos:end="77:36">aml_call0</name><argument_list pos:start="77:37" pos:end="77:65">(<argument pos:start="77:38" pos:end="77:64"><expr pos:start="77:38" pos:end="77:64"><name pos:start="77:38" pos:end="77:64">MEMORY_HOTPLUG_HANDLER_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:34"><expr pos:start="78:9" pos:end="78:33"><call pos:start="78:9" pos:end="78:33"><name pos:start="78:9" pos:end="78:18">aml_append</name><argument_list pos:start="78:19" pos:end="78:33">(<argument pos:start="78:20" pos:end="78:24"><expr pos:start="78:20" pos:end="78:24"><name pos:start="78:20" pos:end="78:24">scope</name></expr></argument>, <argument pos:start="78:27" pos:end="78:32"><expr pos:start="78:27" pos:end="78:32"><name pos:start="78:27" pos:end="78:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:68"><expr pos:start="79:9" pos:end="79:67"><call pos:start="79:9" pos:end="79:67"><name pos:start="79:9" pos:end="79:18">aml_append</name><argument_list pos:start="79:19" pos:end="79:67">(<argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">scope</name></expr></argument>, <argument pos:start="79:27" pos:end="79:66"><expr pos:start="79:27" pos:end="79:66"><call pos:start="79:27" pos:end="79:66"><name pos:start="79:27" pos:end="79:36">aml_method</name><argument_list pos:start="79:37" pos:end="79:66">(<argument pos:start="79:38" pos:end="79:43"><expr pos:start="79:38" pos:end="79:43"><literal type="string" pos:start="79:38" pos:end="79:43">"_L04"</literal></expr></argument>, <argument pos:start="79:46" pos:end="79:46"><expr pos:start="79:46" pos:end="79:46"><literal type="number" pos:start="79:46" pos:end="79:46">0</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:65"><expr pos:start="79:49" pos:end="79:65"><name pos:start="79:49" pos:end="79:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="80:9" pos:end="80:68"><expr pos:start="80:9" pos:end="80:67"><call pos:start="80:9" pos:end="80:67"><name pos:start="80:9" pos:end="80:18">aml_append</name><argument_list pos:start="80:19" pos:end="80:67">(<argument pos:start="80:20" pos:end="80:24"><expr pos:start="80:20" pos:end="80:24"><name pos:start="80:20" pos:end="80:24">scope</name></expr></argument>, <argument pos:start="80:27" pos:end="80:66"><expr pos:start="80:27" pos:end="80:66"><call pos:start="80:27" pos:end="80:66"><name pos:start="80:27" pos:end="80:36">aml_method</name><argument_list pos:start="80:37" pos:end="80:66">(<argument pos:start="80:38" pos:end="80:43"><expr pos:start="80:38" pos:end="80:43"><literal type="string" pos:start="80:38" pos:end="80:43">"_L05"</literal></expr></argument>, <argument pos:start="80:46" pos:end="80:46"><expr pos:start="80:46" pos:end="80:46"><literal type="number" pos:start="80:46" pos:end="80:46">0</literal></expr></argument>, <argument pos:start="80:49" pos:end="80:65"><expr pos:start="80:49" pos:end="80:65"><name pos:start="80:49" pos:end="80:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="81:9" pos:end="81:68"><expr pos:start="81:9" pos:end="81:67"><call pos:start="81:9" pos:end="81:67"><name pos:start="81:9" pos:end="81:18">aml_append</name><argument_list pos:start="81:19" pos:end="81:67">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">scope</name></expr></argument>, <argument pos:start="81:27" pos:end="81:66"><expr pos:start="81:27" pos:end="81:66"><call pos:start="81:27" pos:end="81:66"><name pos:start="81:27" pos:end="81:36">aml_method</name><argument_list pos:start="81:37" pos:end="81:66">(<argument pos:start="81:38" pos:end="81:43"><expr pos:start="81:38" pos:end="81:43"><literal type="string" pos:start="81:38" pos:end="81:43">"_L06"</literal></expr></argument>, <argument pos:start="81:46" pos:end="81:46"><expr pos:start="81:46" pos:end="81:46"><literal type="number" pos:start="81:46" pos:end="81:46">0</literal></expr></argument>, <argument pos:start="81:49" pos:end="81:65"><expr pos:start="81:49" pos:end="81:65"><name pos:start="81:49" pos:end="81:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="82:9" pos:end="82:68"><expr pos:start="82:9" pos:end="82:67"><call pos:start="82:9" pos:end="82:67"><name pos:start="82:9" pos:end="82:18">aml_append</name><argument_list pos:start="82:19" pos:end="82:67">(<argument pos:start="82:20" pos:end="82:24"><expr pos:start="82:20" pos:end="82:24"><name pos:start="82:20" pos:end="82:24">scope</name></expr></argument>, <argument pos:start="82:27" pos:end="82:66"><expr pos:start="82:27" pos:end="82:66"><call pos:start="82:27" pos:end="82:66"><name pos:start="82:27" pos:end="82:36">aml_method</name><argument_list pos:start="82:37" pos:end="82:66">(<argument pos:start="82:38" pos:end="82:43"><expr pos:start="82:38" pos:end="82:43"><literal type="string" pos:start="82:38" pos:end="82:43">"_L07"</literal></expr></argument>, <argument pos:start="82:46" pos:end="82:46"><expr pos:start="82:46" pos:end="82:46"><literal type="number" pos:start="82:46" pos:end="82:46">0</literal></expr></argument>, <argument pos:start="82:49" pos:end="82:65"><expr pos:start="82:49" pos:end="82:65"><name pos:start="82:49" pos:end="82:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="83:9" pos:end="83:68"><expr pos:start="83:9" pos:end="83:67"><call pos:start="83:9" pos:end="83:67"><name pos:start="83:9" pos:end="83:18">aml_append</name><argument_list pos:start="83:19" pos:end="83:67">(<argument pos:start="83:20" pos:end="83:24"><expr pos:start="83:20" pos:end="83:24"><name pos:start="83:20" pos:end="83:24">scope</name></expr></argument>, <argument pos:start="83:27" pos:end="83:66"><expr pos:start="83:27" pos:end="83:66"><call pos:start="83:27" pos:end="83:66"><name pos:start="83:27" pos:end="83:36">aml_method</name><argument_list pos:start="83:37" pos:end="83:66">(<argument pos:start="83:38" pos:end="83:43"><expr pos:start="83:38" pos:end="83:43"><literal type="string" pos:start="83:38" pos:end="83:43">"_L08"</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:46"><expr pos:start="83:46" pos:end="83:46"><literal type="number" pos:start="83:46" pos:end="83:46">0</literal></expr></argument>, <argument pos:start="83:49" pos:end="83:65"><expr pos:start="83:49" pos:end="83:65"><name pos:start="83:49" pos:end="83:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="84:9" pos:end="84:68"><expr pos:start="84:9" pos:end="84:67"><call pos:start="84:9" pos:end="84:67"><name pos:start="84:9" pos:end="84:18">aml_append</name><argument_list pos:start="84:19" pos:end="84:67">(<argument pos:start="84:20" pos:end="84:24"><expr pos:start="84:20" pos:end="84:24"><name pos:start="84:20" pos:end="84:24">scope</name></expr></argument>, <argument pos:start="84:27" pos:end="84:66"><expr pos:start="84:27" pos:end="84:66"><call pos:start="84:27" pos:end="84:66"><name pos:start="84:27" pos:end="84:36">aml_method</name><argument_list pos:start="84:37" pos:end="84:66">(<argument pos:start="84:38" pos:end="84:43"><expr pos:start="84:38" pos:end="84:43"><literal type="string" pos:start="84:38" pos:end="84:43">"_L09"</literal></expr></argument>, <argument pos:start="84:46" pos:end="84:46"><expr pos:start="84:46" pos:end="84:46"><literal type="number" pos:start="84:46" pos:end="84:46">0</literal></expr></argument>, <argument pos:start="84:49" pos:end="84:65"><expr pos:start="84:49" pos:end="84:65"><name pos:start="84:49" pos:end="84:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="85:9" pos:end="85:68"><expr pos:start="85:9" pos:end="85:67"><call pos:start="85:9" pos:end="85:67"><name pos:start="85:9" pos:end="85:18">aml_append</name><argument_list pos:start="85:19" pos:end="85:67">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">scope</name></expr></argument>, <argument pos:start="85:27" pos:end="85:66"><expr pos:start="85:27" pos:end="85:66"><call pos:start="85:27" pos:end="85:66"><name pos:start="85:27" pos:end="85:36">aml_method</name><argument_list pos:start="85:37" pos:end="85:66">(<argument pos:start="85:38" pos:end="85:43"><expr pos:start="85:38" pos:end="85:43"><literal type="string" pos:start="85:38" pos:end="85:43">"_L0A"</literal></expr></argument>, <argument pos:start="85:46" pos:end="85:46"><expr pos:start="85:46" pos:end="85:46"><literal type="number" pos:start="85:46" pos:end="85:46">0</literal></expr></argument>, <argument pos:start="85:49" pos:end="85:65"><expr pos:start="85:49" pos:end="85:65"><name pos:start="85:49" pos:end="85:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="86:9" pos:end="86:68"><expr pos:start="86:9" pos:end="86:67"><call pos:start="86:9" pos:end="86:67"><name pos:start="86:9" pos:end="86:18">aml_append</name><argument_list pos:start="86:19" pos:end="86:67">(<argument pos:start="86:20" pos:end="86:24"><expr pos:start="86:20" pos:end="86:24"><name pos:start="86:20" pos:end="86:24">scope</name></expr></argument>, <argument pos:start="86:27" pos:end="86:66"><expr pos:start="86:27" pos:end="86:66"><call pos:start="86:27" pos:end="86:66"><name pos:start="86:27" pos:end="86:36">aml_method</name><argument_list pos:start="86:37" pos:end="86:66">(<argument pos:start="86:38" pos:end="86:43"><expr pos:start="86:38" pos:end="86:43"><literal type="string" pos:start="86:38" pos:end="86:43">"_L0B"</literal></expr></argument>, <argument pos:start="86:46" pos:end="86:46"><expr pos:start="86:46" pos:end="86:46"><literal type="number" pos:start="86:46" pos:end="86:46">0</literal></expr></argument>, <argument pos:start="86:49" pos:end="86:65"><expr pos:start="86:49" pos:end="86:65"><name pos:start="86:49" pos:end="86:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="87:9" pos:end="87:68"><expr pos:start="87:9" pos:end="87:67"><call pos:start="87:9" pos:end="87:67"><name pos:start="87:9" pos:end="87:18">aml_append</name><argument_list pos:start="87:19" pos:end="87:67">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">scope</name></expr></argument>, <argument pos:start="87:27" pos:end="87:66"><expr pos:start="87:27" pos:end="87:66"><call pos:start="87:27" pos:end="87:66"><name pos:start="87:27" pos:end="87:36">aml_method</name><argument_list pos:start="87:37" pos:end="87:66">(<argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><literal type="string" pos:start="87:38" pos:end="87:43">"_L0C"</literal></expr></argument>, <argument pos:start="87:46" pos:end="87:46"><expr pos:start="87:46" pos:end="87:46"><literal type="number" pos:start="87:46" pos:end="87:46">0</literal></expr></argument>, <argument pos:start="87:49" pos:end="87:65"><expr pos:start="87:49" pos:end="87:65"><name pos:start="87:49" pos:end="87:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:68"><expr pos:start="88:9" pos:end="88:67"><call pos:start="88:9" pos:end="88:67"><name pos:start="88:9" pos:end="88:18">aml_append</name><argument_list pos:start="88:19" pos:end="88:67">(<argument pos:start="88:20" pos:end="88:24"><expr pos:start="88:20" pos:end="88:24"><name pos:start="88:20" pos:end="88:24">scope</name></expr></argument>, <argument pos:start="88:27" pos:end="88:66"><expr pos:start="88:27" pos:end="88:66"><call pos:start="88:27" pos:end="88:66"><name pos:start="88:27" pos:end="88:36">aml_method</name><argument_list pos:start="88:37" pos:end="88:66">(<argument pos:start="88:38" pos:end="88:43"><expr pos:start="88:38" pos:end="88:43"><literal type="string" pos:start="88:38" pos:end="88:43">"_L0D"</literal></expr></argument>, <argument pos:start="88:46" pos:end="88:46"><expr pos:start="88:46" pos:end="88:46"><literal type="number" pos:start="88:46" pos:end="88:46">0</literal></expr></argument>, <argument pos:start="88:49" pos:end="88:65"><expr pos:start="88:49" pos:end="88:65"><name pos:start="88:49" pos:end="88:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="89:9" pos:end="89:68"><expr pos:start="89:9" pos:end="89:67"><call pos:start="89:9" pos:end="89:67"><name pos:start="89:9" pos:end="89:18">aml_append</name><argument_list pos:start="89:19" pos:end="89:67">(<argument pos:start="89:20" pos:end="89:24"><expr pos:start="89:20" pos:end="89:24"><name pos:start="89:20" pos:end="89:24">scope</name></expr></argument>, <argument pos:start="89:27" pos:end="89:66"><expr pos:start="89:27" pos:end="89:66"><call pos:start="89:27" pos:end="89:66"><name pos:start="89:27" pos:end="89:36">aml_method</name><argument_list pos:start="89:37" pos:end="89:66">(<argument pos:start="89:38" pos:end="89:43"><expr pos:start="89:38" pos:end="89:43"><literal type="string" pos:start="89:38" pos:end="89:43">"_L0E"</literal></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><literal type="number" pos:start="89:46" pos:end="89:46">0</literal></expr></argument>, <argument pos:start="89:49" pos:end="89:65"><expr pos:start="89:49" pos:end="89:65"><name pos:start="89:49" pos:end="89:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="90:9" pos:end="90:68"><expr pos:start="90:9" pos:end="90:67"><call pos:start="90:9" pos:end="90:67"><name pos:start="90:9" pos:end="90:18">aml_append</name><argument_list pos:start="90:19" pos:end="90:67">(<argument pos:start="90:20" pos:end="90:24"><expr pos:start="90:20" pos:end="90:24"><name pos:start="90:20" pos:end="90:24">scope</name></expr></argument>, <argument pos:start="90:27" pos:end="90:66"><expr pos:start="90:27" pos:end="90:66"><call pos:start="90:27" pos:end="90:66"><name pos:start="90:27" pos:end="90:36">aml_method</name><argument_list pos:start="90:37" pos:end="90:66">(<argument pos:start="90:38" pos:end="90:43"><expr pos:start="90:38" pos:end="90:43"><literal type="string" pos:start="90:38" pos:end="90:43">"_L0F"</literal></expr></argument>, <argument pos:start="90:46" pos:end="90:46"><expr pos:start="90:46" pos:end="90:46"><literal type="number" pos:start="90:46" pos:end="90:46">0</literal></expr></argument>, <argument pos:start="90:49" pos:end="90:65"><expr pos:start="90:49" pos:end="90:65"><name pos:start="90:49" pos:end="90:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><call pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:14">aml_append</name><argument_list pos:start="91:15" pos:end="91:27">(<argument pos:start="91:16" pos:end="91:19"><expr pos:start="91:16" pos:end="91:19"><name pos:start="91:16" pos:end="91:19">dsdt</name></expr></argument>, <argument pos:start="91:22" pos:end="91:26"><expr pos:start="91:22" pos:end="91:26"><name pos:start="91:22" pos:end="91:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="92:5" pos:end="92:35"><expr pos:start="92:5" pos:end="92:34"><name pos:start="92:5" pos:end="92:7">bus</name> <operator pos:start="92:9" pos:end="92:9">=</operator> <call pos:start="92:11" pos:end="92:29"><name pos:start="92:11" pos:end="92:20">PC_MACHINE</name><argument_list pos:start="92:21" pos:end="92:29">(<argument pos:start="92:22" pos:end="92:28"><expr pos:start="92:22" pos:end="92:28"><name pos:start="92:22" pos:end="92:28">machine</name></expr></argument>)</argument_list></call><operator pos:start="92:30" pos:end="92:31">-&gt;</operator><name pos:start="92:32" pos:end="92:34">bus</name></expr>;</expr_stmt>
    <if_stmt pos:start="93:5" pos:end="299:25"><if pos:start="93:5" pos:end="299:25">if <condition pos:start="93:8" pos:end="93:12">(<expr pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">bus</name></expr>)</condition> <block pos:start="93:14" pos:end="299:25">{<block_content pos:start="94:9" pos:end="299:25">
        <macro pos:start="94:9" pos:end="94:48"><name pos:start="94:9" pos:end="94:21">QLIST_FOREACH</name><argument_list pos:start="94:22" pos:end="94:48">(<argument pos:start="94:23" pos:end="94:25">bus</argument>, <argument pos:start="94:28" pos:end="94:38">&amp;bus-&gt;child</argument>, <argument pos:start="94:41" pos:end="94:47">sibling</argument>)</argument_list></macro> <block pos:start="94:50" pos:end="299:25">{<block_content pos:start="95:13" pos:end="299:25">
            <decl_stmt pos:start="95:13" pos:end="95:47"><decl pos:start="95:13" pos:end="95:46"><type pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:19">uint8_t</name></type> <name pos:start="95:21" pos:end="95:27">bus_num</name> <init pos:start="95:29" pos:end="95:46">= <expr pos:start="95:31" pos:end="95:46"><call pos:start="95:31" pos:end="95:46"><name pos:start="95:31" pos:end="95:41">pci_bus_num</name><argument_list pos:start="95:42" pos:end="95:46">(<argument pos:start="95:43" pos:end="95:45"><expr pos:start="95:43" pos:end="95:45"><name pos:start="95:43" pos:end="95:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="96:13" pos:end="96:55"><decl pos:start="96:13" pos:end="96:54"><type pos:start="96:13" pos:end="96:19"><name pos:start="96:13" pos:end="96:19">uint8_t</name></type> <name pos:start="96:21" pos:end="96:29">numa_node</name> <init pos:start="96:31" pos:end="96:54">= <expr pos:start="96:33" pos:end="96:54"><call pos:start="96:33" pos:end="96:54"><name pos:start="96:33" pos:end="96:49">pci_bus_numa_node</name><argument_list pos:start="96:50" pos:end="96:54">(<argument pos:start="96:51" pos:end="96:53"><expr pos:start="96:51" pos:end="96:53"><name pos:start="96:51" pos:end="96:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block" pos:start="97:13" pos:end="97:51">/* look only for expander root buses */</comment>
            <if_stmt pos:start="98:13" pos:end="299:25"><if pos:start="98:13" pos:end="299:25">if <condition pos:start="98:16" pos:end="98:38">(<expr pos:start="98:17" pos:end="98:37"><operator pos:start="98:17" pos:end="98:17">!</operator><call pos:start="98:18" pos:end="98:37"><name pos:start="98:18" pos:end="98:32">pci_bus_is_root</name><argument_list pos:start="98:33" pos:end="98:37">(<argument pos:start="98:34" pos:end="98:36"><expr pos:start="98:34" pos:end="98:36"><name pos:start="98:34" pos:end="98:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="98:40" pos:end="299:25">{<block_content pos:start="99:17" pos:end="299:25">
                <continue pos:start="99:17" pos:end="99:25">continue;</continue>
            <if_stmt pos:start="100:13" pos:end="299:25"><if pos:start="100:13" pos:end="299:25">if <condition pos:start="100:16" pos:end="100:41">(<expr pos:start="100:17" pos:end="100:40"><name pos:start="100:17" pos:end="100:23">bus_num</name> <operator pos:start="100:25" pos:end="100:25">&lt;</operator> <name pos:start="100:27" pos:end="100:40">root_bus_limit</name></expr>)</condition> <block pos:start="100:43" pos:end="299:25">{<block_content pos:start="101:17" pos:end="299:25">
                <expr_stmt pos:start="101:17" pos:end="101:45"><expr pos:start="101:17" pos:end="101:44"><name pos:start="101:17" pos:end="101:30">root_bus_limit</name> <operator pos:start="101:32" pos:end="101:32">=</operator> <name pos:start="101:34" pos:end="101:40">bus_num</name> <operator pos:start="101:42" pos:end="101:42">-</operator> <literal type="number" pos:start="101:44" pos:end="101:44">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="102:13" pos:end="102:39"><expr pos:start="102:13" pos:end="102:38"><name pos:start="102:13" pos:end="102:17">scope</name> <operator pos:start="102:19" pos:end="102:19">=</operator> <call pos:start="102:21" pos:end="102:38"><name pos:start="102:21" pos:end="102:29">aml_scope</name><argument_list pos:start="102:30" pos:end="102:38">(<argument pos:start="102:31" pos:end="102:37"><expr pos:start="102:31" pos:end="102:37"><literal type="string" pos:start="102:31" pos:end="102:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="103:13" pos:end="103:49"><expr pos:start="103:13" pos:end="103:48"><name pos:start="103:13" pos:end="103:15">dev</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:48"><name pos:start="103:19" pos:end="103:28">aml_device</name><argument_list pos:start="103:29" pos:end="103:48">(<argument pos:start="103:30" pos:end="103:38"><expr pos:start="103:30" pos:end="103:38"><literal type="string" pos:start="103:30" pos:end="103:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="103:41" pos:end="103:47"><expr pos:start="103:41" pos:end="103:47"><name pos:start="103:41" pos:end="103:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="104:13" pos:end="104:69"><expr pos:start="104:13" pos:end="104:68"><call pos:start="104:13" pos:end="104:68"><name pos:start="104:13" pos:end="104:22">aml_append</name><argument_list pos:start="104:23" pos:end="104:68">(<argument pos:start="104:24" pos:end="104:26"><expr pos:start="104:24" pos:end="104:26"><name pos:start="104:24" pos:end="104:26">dev</name></expr></argument>, <argument pos:start="104:29" pos:end="104:67"><expr pos:start="104:29" pos:end="104:67"><call pos:start="104:29" pos:end="104:67"><name pos:start="104:29" pos:end="104:41">aml_name_decl</name><argument_list pos:start="104:42" pos:end="104:67">(<argument pos:start="104:43" pos:end="104:48"><expr pos:start="104:43" pos:end="104:48"><literal type="string" pos:start="104:43" pos:end="104:48">"_UID"</literal></expr></argument>, <argument pos:start="104:51" pos:end="104:66"><expr pos:start="104:51" pos:end="104:66"><call pos:start="104:51" pos:end="104:66"><name pos:start="104:51" pos:end="104:57">aml_int</name><argument_list pos:start="104:58" pos:end="104:66">(<argument pos:start="104:59" pos:end="104:65"><expr pos:start="104:59" pos:end="104:65"><name pos:start="104:59" pos:end="104:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="105:13" pos:end="105:74"><expr pos:start="105:13" pos:end="105:73"><call pos:start="105:13" pos:end="105:73"><name pos:start="105:13" pos:end="105:22">aml_append</name><argument_list pos:start="105:23" pos:end="105:73">(<argument pos:start="105:24" pos:end="105:26"><expr pos:start="105:24" pos:end="105:26"><name pos:start="105:24" pos:end="105:26">dev</name></expr></argument>, <argument pos:start="105:29" pos:end="105:72"><expr pos:start="105:29" pos:end="105:72"><call pos:start="105:29" pos:end="105:72"><name pos:start="105:29" pos:end="105:41">aml_name_decl</name><argument_list pos:start="105:42" pos:end="105:72">(<argument pos:start="105:43" pos:end="105:48"><expr pos:start="105:43" pos:end="105:48"><literal type="string" pos:start="105:43" pos:end="105:48">"_HID"</literal></expr></argument>, <argument pos:start="105:51" pos:end="105:71"><expr pos:start="105:51" pos:end="105:71"><call pos:start="105:51" pos:end="105:71"><name pos:start="105:51" pos:end="105:60">aml_eisaid</name><argument_list pos:start="105:61" pos:end="105:71">(<argument pos:start="105:62" pos:end="105:70"><expr pos:start="105:62" pos:end="105:70"><literal type="string" pos:start="105:62" pos:end="105:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="106:13" pos:end="106:69"><expr pos:start="106:13" pos:end="106:68"><call pos:start="106:13" pos:end="106:68"><name pos:start="106:13" pos:end="106:22">aml_append</name><argument_list pos:start="106:23" pos:end="106:68">(<argument pos:start="106:24" pos:end="106:26"><expr pos:start="106:24" pos:end="106:26"><name pos:start="106:24" pos:end="106:26">dev</name></expr></argument>, <argument pos:start="106:29" pos:end="106:67"><expr pos:start="106:29" pos:end="106:67"><call pos:start="106:29" pos:end="106:67"><name pos:start="106:29" pos:end="106:41">aml_name_decl</name><argument_list pos:start="106:42" pos:end="106:67">(<argument pos:start="106:43" pos:end="106:48"><expr pos:start="106:43" pos:end="106:48"><literal type="string" pos:start="106:43" pos:end="106:48">"_BBN"</literal></expr></argument>, <argument pos:start="106:51" pos:end="106:66"><expr pos:start="106:51" pos:end="106:66"><call pos:start="106:51" pos:end="106:66"><name pos:start="106:51" pos:end="106:57">aml_int</name><argument_list pos:start="106:58" pos:end="106:66">(<argument pos:start="106:59" pos:end="106:65"><expr pos:start="106:59" pos:end="106:65"><name pos:start="106:59" pos:end="106:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="107:13" pos:end="299:25"><if pos:start="107:13" pos:end="299:25">if <condition pos:start="107:16" pos:end="107:50">(<expr pos:start="107:17" pos:end="107:49"><name pos:start="107:17" pos:end="107:25">numa_node</name> <operator pos:start="107:27" pos:end="107:28">!=</operator> <name pos:start="107:30" pos:end="107:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="107:52" pos:end="299:25">{<block_content pos:start="108:17" pos:end="299:25">
                <expr_stmt pos:start="108:17" pos:end="108:75"><expr pos:start="108:17" pos:end="108:74"><call pos:start="108:17" pos:end="108:74"><name pos:start="108:17" pos:end="108:26">aml_append</name><argument_list pos:start="108:27" pos:end="108:74">(<argument pos:start="108:28" pos:end="108:30"><expr pos:start="108:28" pos:end="108:30"><name pos:start="108:28" pos:end="108:30">dev</name></expr></argument>, <argument pos:start="108:33" pos:end="108:73"><expr pos:start="108:33" pos:end="108:73"><call pos:start="108:33" pos:end="108:73"><name pos:start="108:33" pos:end="108:45">aml_name_decl</name><argument_list pos:start="108:46" pos:end="108:73">(<argument pos:start="108:47" pos:end="108:52"><expr pos:start="108:47" pos:end="108:52"><literal type="string" pos:start="108:47" pos:end="108:52">"_PXM"</literal></expr></argument>, <argument pos:start="108:55" pos:end="108:72"><expr pos:start="108:55" pos:end="108:72"><call pos:start="108:55" pos:end="108:72"><name pos:start="108:55" pos:end="108:61">aml_int</name><argument_list pos:start="108:62" pos:end="108:72">(<argument pos:start="108:63" pos:end="108:71"><expr pos:start="108:63" pos:end="108:71"><name pos:start="108:63" pos:end="108:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="109:13" pos:end="109:46"><expr pos:start="109:13" pos:end="109:45"><call pos:start="109:13" pos:end="109:45"><name pos:start="109:13" pos:end="109:22">aml_append</name><argument_list pos:start="109:23" pos:end="109:45">(<argument pos:start="109:24" pos:end="109:26"><expr pos:start="109:24" pos:end="109:26"><name pos:start="109:24" pos:end="109:26">dev</name></expr></argument>, <argument pos:start="109:29" pos:end="109:44"><expr pos:start="109:29" pos:end="109:44"><call pos:start="109:29" pos:end="109:44"><name pos:start="109:29" pos:end="109:37">build_prt</name><argument_list pos:start="109:38" pos:end="109:44">(<argument pos:start="109:39" pos:end="109:43"><expr pos:start="109:39" pos:end="109:43"><name pos:start="109:39" pos:end="109:43">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="110:13" pos:end="111:51"><expr pos:start="110:13" pos:end="111:50"><name pos:start="110:13" pos:end="110:15">crs</name> <operator pos:start="110:17" pos:end="110:17">=</operator> <call pos:start="110:19" pos:end="111:50"><name pos:start="110:19" pos:end="110:27">build_crs</name><argument_list pos:start="110:28" pos:end="111:50">(<argument pos:start="110:29" pos:end="110:61"><expr pos:start="110:29" pos:end="110:61"><call pos:start="110:29" pos:end="110:61"><name pos:start="110:29" pos:end="110:43">PCI_HOST_BRIDGE</name><argument_list pos:start="110:44" pos:end="110:61">(<argument pos:start="110:45" pos:end="110:60"><expr pos:start="110:45" pos:end="110:60"><call pos:start="110:45" pos:end="110:52"><name pos:start="110:45" pos:end="110:47">BUS</name><argument_list pos:start="110:48" pos:end="110:52">(<argument pos:start="110:49" pos:end="110:51"><expr pos:start="110:49" pos:end="110:51"><name pos:start="110:49" pos:end="110:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="110:53" pos:end="110:54">-&gt;</operator><name pos:start="110:55" pos:end="110:60">parent</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument pos:start="111:29" pos:end="111:37"><expr pos:start="111:29" pos:end="111:37"><name pos:start="111:29" pos:end="111:37">io_ranges</name></expr></argument>, <argument pos:start="111:40" pos:end="111:49"><expr pos:start="111:40" pos:end="111:49"><name pos:start="111:40" pos:end="111:49">mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="112:13" pos:end="112:56"><expr pos:start="112:13" pos:end="112:55"><call pos:start="112:13" pos:end="112:55"><name pos:start="112:13" pos:end="112:22">aml_append</name><argument_list pos:start="112:23" pos:end="112:55">(<argument pos:start="112:24" pos:end="112:26"><expr pos:start="112:24" pos:end="112:26"><name pos:start="112:24" pos:end="112:26">dev</name></expr></argument>, <argument pos:start="112:29" pos:end="112:54"><expr pos:start="112:29" pos:end="112:54"><call pos:start="112:29" pos:end="112:54"><name pos:start="112:29" pos:end="112:41">aml_name_decl</name><argument_list pos:start="112:42" pos:end="112:54">(<argument pos:start="112:43" pos:end="112:48"><expr pos:start="112:43" pos:end="112:48"><literal type="string" pos:start="112:43" pos:end="112:48">"_CRS"</literal></expr></argument>, <argument pos:start="112:51" pos:end="112:53"><expr pos:start="112:51" pos:end="112:53"><name pos:start="112:51" pos:end="112:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="113:13" pos:end="113:35"><expr pos:start="113:13" pos:end="113:34"><call pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:22">aml_append</name><argument_list pos:start="113:23" pos:end="113:34">(<argument pos:start="113:24" pos:end="113:28"><expr pos:start="113:24" pos:end="113:28"><name pos:start="113:24" pos:end="113:28">scope</name></expr></argument>, <argument pos:start="113:31" pos:end="113:33"><expr pos:start="113:31" pos:end="113:33"><name pos:start="113:31" pos:end="113:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="114:13" pos:end="114:36"><expr pos:start="114:13" pos:end="114:35"><call pos:start="114:13" pos:end="114:35"><name pos:start="114:13" pos:end="114:22">aml_append</name><argument_list pos:start="114:23" pos:end="114:35">(<argument pos:start="114:24" pos:end="114:27"><expr pos:start="114:24" pos:end="114:27"><name pos:start="114:24" pos:end="114:27">dsdt</name></expr></argument>, <argument pos:start="114:30" pos:end="114:34"><expr pos:start="114:30" pos:end="114:34"><name pos:start="114:30" pos:end="114:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="115:5" pos:end="115:36"><expr pos:start="115:5" pos:end="115:35"><name pos:start="115:5" pos:end="115:9">scope</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <call pos:start="115:13" pos:end="115:35"><name pos:start="115:13" pos:end="115:21">aml_scope</name><argument_list pos:start="115:22" pos:end="115:35">(<argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><literal type="string" pos:start="115:23" pos:end="115:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="116:5" pos:end="116:25">/* build PCI0._CRS */</comment>
    <expr_stmt pos:start="117:5" pos:end="117:34"><expr pos:start="117:5" pos:end="117:33"><name pos:start="117:5" pos:end="117:7">crs</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:33"><name pos:start="117:11" pos:end="117:31">aml_resource_template</name><argument_list pos:start="117:32" pos:end="117:33">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="118:5" pos:end="121:57"><expr pos:start="118:5" pos:end="121:56"><call pos:start="118:5" pos:end="121:56"><name pos:start="118:5" pos:end="118:14">aml_append</name><argument_list pos:start="118:15" pos:end="121:56">(<argument pos:start="118:16" pos:end="118:18"><expr pos:start="118:16" pos:end="118:18"><name pos:start="118:16" pos:end="118:18">crs</name></expr></argument>,
        <argument pos:start="119:9" pos:end="121:55"><expr pos:start="119:9" pos:end="121:55"><call pos:start="119:9" pos:end="121:55"><name pos:start="119:9" pos:end="119:27">aml_word_bus_number</name><argument_list pos:start="119:28" pos:end="121:55">(<argument pos:start="119:29" pos:end="119:41"><expr pos:start="119:29" pos:end="119:41"><name pos:start="119:29" pos:end="119:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="119:44" pos:end="119:56"><expr pos:start="119:44" pos:end="119:56"><name pos:start="119:44" pos:end="119:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="119:59" pos:end="119:72"><expr pos:start="119:59" pos:end="119:72"><name pos:start="119:59" pos:end="119:72">AML_POS_DECODE</name></expr></argument>,
                            <argument pos:start="120:29" pos:end="120:34"><expr pos:start="120:29" pos:end="120:34"><literal type="number" pos:start="120:29" pos:end="120:34">0x0000</literal></expr></argument>, <argument pos:start="120:37" pos:end="120:39"><expr pos:start="120:37" pos:end="120:39"><literal type="number" pos:start="120:37" pos:end="120:39">0x0</literal></expr></argument>, <argument pos:start="120:42" pos:end="120:55"><expr pos:start="120:42" pos:end="120:55"><name pos:start="120:42" pos:end="120:55">root_bus_limit</name></expr></argument>,
                            <argument pos:start="121:29" pos:end="121:34"><expr pos:start="121:29" pos:end="121:34"><literal type="number" pos:start="121:29" pos:end="121:34">0x0000</literal></expr></argument>, <argument pos:start="121:37" pos:end="121:54"><expr pos:start="121:37" pos:end="121:54"><name pos:start="121:37" pos:end="121:50">root_bus_limit</name> <operator pos:start="121:52" pos:end="121:52">+</operator> <literal type="number" pos:start="121:54" pos:end="121:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="122:5" pos:end="122:70"><expr pos:start="122:5" pos:end="122:69"><call pos:start="122:5" pos:end="122:69"><name pos:start="122:5" pos:end="122:14">aml_append</name><argument_list pos:start="122:15" pos:end="122:69">(<argument pos:start="122:16" pos:end="122:18"><expr pos:start="122:16" pos:end="122:18"><name pos:start="122:16" pos:end="122:18">crs</name></expr></argument>, <argument pos:start="122:21" pos:end="122:68"><expr pos:start="122:21" pos:end="122:68"><call pos:start="122:21" pos:end="122:68"><name pos:start="122:21" pos:end="122:26">aml_io</name><argument_list pos:start="122:27" pos:end="122:68">(<argument pos:start="122:28" pos:end="122:39"><expr pos:start="122:28" pos:end="122:39"><name pos:start="122:28" pos:end="122:39">AML_DECODE16</name></expr></argument>, <argument pos:start="122:42" pos:end="122:47"><expr pos:start="122:42" pos:end="122:47"><literal type="number" pos:start="122:42" pos:end="122:47">0x0CF8</literal></expr></argument>, <argument pos:start="122:50" pos:end="122:55"><expr pos:start="122:50" pos:end="122:55"><literal type="number" pos:start="122:50" pos:end="122:55">0x0CF8</literal></expr></argument>, <argument pos:start="122:58" pos:end="122:61"><expr pos:start="122:58" pos:end="122:61"><literal type="number" pos:start="122:58" pos:end="122:61">0x01</literal></expr></argument>, <argument pos:start="122:64" pos:end="122:67"><expr pos:start="122:64" pos:end="122:67"><literal type="number" pos:start="122:64" pos:end="122:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="123:5" pos:end="126:61"><expr pos:start="123:5" pos:end="126:60"><call pos:start="123:5" pos:end="126:60"><name pos:start="123:5" pos:end="123:14">aml_append</name><argument_list pos:start="123:15" pos:end="126:60">(<argument pos:start="123:16" pos:end="123:18"><expr pos:start="123:16" pos:end="123:18"><name pos:start="123:16" pos:end="123:18">crs</name></expr></argument>,
        <argument pos:start="124:9" pos:end="126:59"><expr pos:start="124:9" pos:end="126:59"><call pos:start="124:9" pos:end="126:59"><name pos:start="124:9" pos:end="124:19">aml_word_io</name><argument_list pos:start="124:20" pos:end="126:59">(<argument pos:start="124:21" pos:end="124:33"><expr pos:start="124:21" pos:end="124:33"><name pos:start="124:21" pos:end="124:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="124:36" pos:end="124:48"><expr pos:start="124:36" pos:end="124:48"><name pos:start="124:36" pos:end="124:48">AML_MAX_FIXED</name></expr></argument>,
                    <argument pos:start="125:21" pos:end="125:34"><expr pos:start="125:21" pos:end="125:34"><name pos:start="125:21" pos:end="125:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="125:37" pos:end="125:52"><expr pos:start="125:37" pos:end="125:52"><name pos:start="125:37" pos:end="125:52">AML_ENTIRE_RANGE</name></expr></argument>,
                    <argument pos:start="126:21" pos:end="126:26"><expr pos:start="126:21" pos:end="126:26"><literal type="number" pos:start="126:21" pos:end="126:26">0x0000</literal></expr></argument>, <argument pos:start="126:29" pos:end="126:34"><expr pos:start="126:29" pos:end="126:34"><literal type="number" pos:start="126:29" pos:end="126:34">0x0000</literal></expr></argument>, <argument pos:start="126:37" pos:end="126:42"><expr pos:start="126:37" pos:end="126:42"><literal type="number" pos:start="126:37" pos:end="126:42">0x0CF7</literal></expr></argument>, <argument pos:start="126:45" pos:end="126:50"><expr pos:start="126:45" pos:end="126:50"><literal type="number" pos:start="126:45" pos:end="126:50">0x0000</literal></expr></argument>, <argument pos:start="126:53" pos:end="126:58"><expr pos:start="126:53" pos:end="126:58"><literal type="number" pos:start="126:53" pos:end="126:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="127:5" pos:end="127:60"><expr pos:start="127:5" pos:end="127:59"><call pos:start="127:5" pos:end="127:59"><name pos:start="127:5" pos:end="127:32">crs_replace_with_free_ranges</name><argument_list pos:start="127:33" pos:end="127:59">(<argument pos:start="127:34" pos:end="127:42"><expr pos:start="127:34" pos:end="127:42"><name pos:start="127:34" pos:end="127:42">io_ranges</name></expr></argument>, <argument pos:start="127:45" pos:end="127:50"><expr pos:start="127:45" pos:end="127:50"><literal type="number" pos:start="127:45" pos:end="127:50">0x0D00</literal></expr></argument>, <argument pos:start="127:53" pos:end="127:58"><expr pos:start="127:53" pos:end="127:58"><literal type="number" pos:start="127:53" pos:end="127:58">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="128:5" pos:end="299:25">for <control pos:start="128:9" pos:end="128:40">(<init pos:start="128:10" pos:end="128:15"><expr pos:start="128:10" pos:end="128:14"><name pos:start="128:10" pos:end="128:10">i</name> <operator pos:start="128:12" pos:end="128:12">=</operator> <literal type="number" pos:start="128:14" pos:end="128:14">0</literal></expr>;</init> <condition pos:start="128:17" pos:end="128:35"><expr pos:start="128:17" pos:end="128:34"><name pos:start="128:17" pos:end="128:17">i</name> <operator pos:start="128:19" pos:end="128:19">&lt;</operator> <name pos:start="128:21" pos:end="128:34"><name pos:start="128:21" pos:end="128:29">io_ranges</name><operator pos:start="128:30" pos:end="128:31">-&gt;</operator><name pos:start="128:32" pos:end="128:34">len</name></name></expr>;</condition> <incr pos:start="128:37" pos:end="128:39"><expr pos:start="128:37" pos:end="128:39"><name pos:start="128:37" pos:end="128:37">i</name><operator pos:start="128:38" pos:end="128:39">++</operator></expr></incr>)</control> <block pos:start="128:42" pos:end="299:25">{<block_content pos:start="129:9" pos:end="299:25">
        <expr_stmt pos:start="129:9" pos:end="129:48"><expr pos:start="129:9" pos:end="129:47"><name pos:start="129:9" pos:end="129:13">entry</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="129:47"><name pos:start="129:17" pos:end="129:33">g_ptr_array_index</name><argument_list pos:start="129:34" pos:end="129:47">(<argument pos:start="129:35" pos:end="129:43"><expr pos:start="129:35" pos:end="129:43"><name pos:start="129:35" pos:end="129:43">io_ranges</name></expr></argument>, <argument pos:start="129:46" pos:end="129:46"><expr pos:start="129:46" pos:end="129:46"><name pos:start="129:46" pos:end="129:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="130:9" pos:end="134:65"><expr pos:start="130:9" pos:end="134:64"><call pos:start="130:9" pos:end="134:64"><name pos:start="130:9" pos:end="130:18">aml_append</name><argument_list pos:start="130:19" pos:end="134:64">(<argument pos:start="130:20" pos:end="130:22"><expr pos:start="130:20" pos:end="130:22"><name pos:start="130:20" pos:end="130:22">crs</name></expr></argument>,
            <argument pos:start="131:13" pos:end="134:63"><expr pos:start="131:13" pos:end="134:63"><call pos:start="131:13" pos:end="134:63"><name pos:start="131:13" pos:end="131:23">aml_word_io</name><argument_list pos:start="131:24" pos:end="134:63">(<argument pos:start="131:25" pos:end="131:37"><expr pos:start="131:25" pos:end="131:37"><name pos:start="131:25" pos:end="131:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="131:40" pos:end="131:52"><expr pos:start="131:40" pos:end="131:52"><name pos:start="131:40" pos:end="131:52">AML_MAX_FIXED</name></expr></argument>,
                        <argument pos:start="132:25" pos:end="132:38"><expr pos:start="132:25" pos:end="132:38"><name pos:start="132:25" pos:end="132:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="132:41" pos:end="132:56"><expr pos:start="132:41" pos:end="132:56"><name pos:start="132:41" pos:end="132:56">AML_ENTIRE_RANGE</name></expr></argument>,
                        <argument pos:start="133:25" pos:end="133:30"><expr pos:start="133:25" pos:end="133:30"><literal type="number" pos:start="133:25" pos:end="133:30">0x0000</literal></expr></argument>, <argument pos:start="133:33" pos:end="133:43"><expr pos:start="133:33" pos:end="133:43"><name pos:start="133:33" pos:end="133:43"><name pos:start="133:33" pos:end="133:37">entry</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:43">base</name></name></expr></argument>, <argument pos:start="133:46" pos:end="133:57"><expr pos:start="133:46" pos:end="133:57"><name pos:start="133:46" pos:end="133:57"><name pos:start="133:46" pos:end="133:50">entry</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:57">limit</name></name></expr></argument>,
                        <argument pos:start="134:25" pos:end="134:30"><expr pos:start="134:25" pos:end="134:30"><literal type="number" pos:start="134:25" pos:end="134:30">0x0000</literal></expr></argument>, <argument pos:start="134:33" pos:end="134:62"><expr pos:start="134:33" pos:end="134:62"><name pos:start="134:33" pos:end="134:44"><name pos:start="134:33" pos:end="134:37">entry</name><operator pos:start="134:38" pos:end="134:39">-&gt;</operator><name pos:start="134:40" pos:end="134:44">limit</name></name> <operator pos:start="134:46" pos:end="134:46">-</operator> <name pos:start="134:48" pos:end="134:58"><name pos:start="134:48" pos:end="134:52">entry</name><operator pos:start="134:53" pos:end="134:54">-&gt;</operator><name pos:start="134:55" pos:end="134:58">base</name></name> <operator pos:start="134:60" pos:end="134:60">+</operator> <literal type="number" pos:start="134:62" pos:end="134:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="135:5" pos:end="138:68"><expr pos:start="135:5" pos:end="138:67"><call pos:start="135:5" pos:end="138:67"><name pos:start="135:5" pos:end="135:14">aml_append</name><argument_list pos:start="135:15" pos:end="138:67">(<argument pos:start="135:16" pos:end="135:18"><expr pos:start="135:16" pos:end="135:18"><name pos:start="135:16" pos:end="135:18">crs</name></expr></argument>,
        <argument pos:start="136:9" pos:end="138:66"><expr pos:start="136:9" pos:end="138:66"><call pos:start="136:9" pos:end="138:66"><name pos:start="136:9" pos:end="136:24">aml_dword_memory</name><argument_list pos:start="136:25" pos:end="138:66">(<argument pos:start="136:26" pos:end="136:39"><expr pos:start="136:26" pos:end="136:39"><name pos:start="136:26" pos:end="136:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="136:42" pos:end="136:54"><expr pos:start="136:42" pos:end="136:54"><name pos:start="136:42" pos:end="136:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="136:57" pos:end="136:69"><expr pos:start="136:57" pos:end="136:69"><name pos:start="136:57" pos:end="136:69">AML_MAX_FIXED</name></expr></argument>,
                         <argument pos:start="137:26" pos:end="137:38"><expr pos:start="137:26" pos:end="137:38"><name pos:start="137:26" pos:end="137:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="137:41" pos:end="137:54"><expr pos:start="137:41" pos:end="137:54"><name pos:start="137:41" pos:end="137:54">AML_READ_WRITE</name></expr></argument>,
                         <argument pos:start="138:26" pos:end="138:26"><expr pos:start="138:26" pos:end="138:26"><literal type="number" pos:start="138:26" pos:end="138:26">0</literal></expr></argument>, <argument pos:start="138:29" pos:end="138:38"><expr pos:start="138:29" pos:end="138:38"><literal type="number" pos:start="138:29" pos:end="138:38">0x000A0000</literal></expr></argument>, <argument pos:start="138:41" pos:end="138:50"><expr pos:start="138:41" pos:end="138:50"><literal type="number" pos:start="138:41" pos:end="138:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="138:53" pos:end="138:53"><expr pos:start="138:53" pos:end="138:53"><literal type="number" pos:start="138:53" pos:end="138:53">0</literal></expr></argument>, <argument pos:start="138:56" pos:end="138:65"><expr pos:start="138:56" pos:end="138:65"><literal type="number" pos:start="138:56" pos:end="138:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="139:5" pos:end="139:79"><expr pos:start="139:5" pos:end="139:78"><call pos:start="139:5" pos:end="139:78"><name pos:start="139:5" pos:end="139:32">crs_replace_with_free_ranges</name><argument_list pos:start="139:33" pos:end="139:78">(<argument pos:start="139:34" pos:end="139:43"><expr pos:start="139:34" pos:end="139:43"><name pos:start="139:34" pos:end="139:43">mem_ranges</name></expr></argument>, <argument pos:start="139:46" pos:end="139:59"><expr pos:start="139:46" pos:end="139:59"><name pos:start="139:46" pos:end="139:59"><name pos:start="139:46" pos:end="139:48">pci</name><operator pos:start="139:49" pos:end="139:50">-&gt;</operator><name pos:start="139:51" pos:end="139:53">w32</name><operator pos:start="139:54" pos:end="139:54">.</operator><name pos:start="139:55" pos:end="139:59">begin</name></name></expr></argument>, <argument pos:start="139:62" pos:end="139:77"><expr pos:start="139:62" pos:end="139:77"><name pos:start="139:62" pos:end="139:73"><name pos:start="139:62" pos:end="139:64">pci</name><operator pos:start="139:65" pos:end="139:66">-&gt;</operator><name pos:start="139:67" pos:end="139:69">w32</name><operator pos:start="139:70" pos:end="139:70">.</operator><name pos:start="139:71" pos:end="139:73">end</name></name> <operator pos:start="139:75" pos:end="139:75">-</operator> <literal type="number" pos:start="139:77" pos:end="139:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="140:5" pos:end="299:25">for <control pos:start="140:9" pos:end="140:41">(<init pos:start="140:10" pos:end="140:15"><expr pos:start="140:10" pos:end="140:14"><name pos:start="140:10" pos:end="140:10">i</name> <operator pos:start="140:12" pos:end="140:12">=</operator> <literal type="number" pos:start="140:14" pos:end="140:14">0</literal></expr>;</init> <condition pos:start="140:17" pos:end="140:36"><expr pos:start="140:17" pos:end="140:35"><name pos:start="140:17" pos:end="140:17">i</name> <operator pos:start="140:19" pos:end="140:19">&lt;</operator> <name pos:start="140:21" pos:end="140:35"><name pos:start="140:21" pos:end="140:30">mem_ranges</name><operator pos:start="140:31" pos:end="140:32">-&gt;</operator><name pos:start="140:33" pos:end="140:35">len</name></name></expr>;</condition> <incr pos:start="140:38" pos:end="140:40"><expr pos:start="140:38" pos:end="140:40"><name pos:start="140:38" pos:end="140:38">i</name><operator pos:start="140:39" pos:end="140:40">++</operator></expr></incr>)</control> <block pos:start="140:43" pos:end="299:25">{<block_content pos:start="141:9" pos:end="299:25">
        <expr_stmt pos:start="141:9" pos:end="141:49"><expr pos:start="141:9" pos:end="141:48"><name pos:start="141:9" pos:end="141:13">entry</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <call pos:start="141:17" pos:end="141:48"><name pos:start="141:17" pos:end="141:33">g_ptr_array_index</name><argument_list pos:start="141:34" pos:end="141:48">(<argument pos:start="141:35" pos:end="141:44"><expr pos:start="141:35" pos:end="141:44"><name pos:start="141:35" pos:end="141:44">mem_ranges</name></expr></argument>, <argument pos:start="141:47" pos:end="141:47"><expr pos:start="141:47" pos:end="141:47"><name pos:start="141:47" pos:end="141:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="142:9" pos:end="146:65"><expr pos:start="142:9" pos:end="146:64"><call pos:start="142:9" pos:end="146:64"><name pos:start="142:9" pos:end="142:18">aml_append</name><argument_list pos:start="142:19" pos:end="146:64">(<argument pos:start="142:20" pos:end="142:22"><expr pos:start="142:20" pos:end="142:22"><name pos:start="142:20" pos:end="142:22">crs</name></expr></argument>,
            <argument pos:start="143:13" pos:end="146:63"><expr pos:start="143:13" pos:end="146:63"><call pos:start="143:13" pos:end="146:63"><name pos:start="143:13" pos:end="143:28">aml_dword_memory</name><argument_list pos:start="143:29" pos:end="146:63">(<argument pos:start="143:30" pos:end="143:43"><expr pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="143:46" pos:end="143:58"><expr pos:start="143:46" pos:end="143:58"><name pos:start="143:46" pos:end="143:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="143:61" pos:end="143:73"><expr pos:start="143:61" pos:end="143:73"><name pos:start="143:61" pos:end="143:73">AML_MAX_FIXED</name></expr></argument>,
                             <argument pos:start="144:30" pos:end="144:46"><expr pos:start="144:30" pos:end="144:46"><name pos:start="144:30" pos:end="144:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="144:49" pos:end="144:62"><expr pos:start="144:49" pos:end="144:62"><name pos:start="144:49" pos:end="144:62">AML_READ_WRITE</name></expr></argument>,
                             <argument pos:start="145:30" pos:end="145:30"><expr pos:start="145:30" pos:end="145:30"><literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr></argument>, <argument pos:start="145:33" pos:end="145:43"><expr pos:start="145:33" pos:end="145:43"><name pos:start="145:33" pos:end="145:43"><name pos:start="145:33" pos:end="145:37">entry</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:43">base</name></name></expr></argument>, <argument pos:start="145:46" pos:end="145:57"><expr pos:start="145:46" pos:end="145:57"><name pos:start="145:46" pos:end="145:57"><name pos:start="145:46" pos:end="145:50">entry</name><operator pos:start="145:51" pos:end="145:52">-&gt;</operator><name pos:start="145:53" pos:end="145:57">limit</name></name></expr></argument>,
                             <argument pos:start="146:30" pos:end="146:30"><expr pos:start="146:30" pos:end="146:30"><literal type="number" pos:start="146:30" pos:end="146:30">0</literal></expr></argument>, <argument pos:start="146:33" pos:end="146:62"><expr pos:start="146:33" pos:end="146:62"><name pos:start="146:33" pos:end="146:44"><name pos:start="146:33" pos:end="146:37">entry</name><operator pos:start="146:38" pos:end="146:39">-&gt;</operator><name pos:start="146:40" pos:end="146:44">limit</name></name> <operator pos:start="146:46" pos:end="146:46">-</operator> <name pos:start="146:48" pos:end="146:58"><name pos:start="146:48" pos:end="146:52">entry</name><operator pos:start="146:53" pos:end="146:54">-&gt;</operator><name pos:start="146:55" pos:end="146:58">base</name></name> <operator pos:start="146:60" pos:end="146:60">+</operator> <literal type="number" pos:start="146:62" pos:end="146:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="147:5" pos:end="299:25"><if pos:start="147:5" pos:end="299:25">if <condition pos:start="147:8" pos:end="147:23">(<expr pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:11">pci</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:16">w64</name><operator pos:start="147:17" pos:end="147:17">.</operator><name pos:start="147:18" pos:end="147:22">begin</name></name></expr>)</condition> <block pos:start="147:25" pos:end="299:25">{<block_content pos:start="148:9" pos:end="299:25">
        <expr_stmt pos:start="148:9" pos:end="152:61"><expr pos:start="148:9" pos:end="152:60"><call pos:start="148:9" pos:end="152:60"><name pos:start="148:9" pos:end="148:18">aml_append</name><argument_list pos:start="148:19" pos:end="152:60">(<argument pos:start="148:20" pos:end="148:22"><expr pos:start="148:20" pos:end="148:22"><name pos:start="148:20" pos:end="148:22">crs</name></expr></argument>,
            <argument pos:start="149:13" pos:end="152:59"><expr pos:start="149:13" pos:end="152:59"><call pos:start="149:13" pos:end="152:59"><name pos:start="149:13" pos:end="149:28">aml_qword_memory</name><argument_list pos:start="149:29" pos:end="152:59">(<argument pos:start="149:30" pos:end="149:43"><expr pos:start="149:30" pos:end="149:43"><name pos:start="149:30" pos:end="149:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="149:46" pos:end="149:58"><expr pos:start="149:46" pos:end="149:58"><name pos:start="149:46" pos:end="149:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="149:61" pos:end="149:73"><expr pos:start="149:61" pos:end="149:73"><name pos:start="149:61" pos:end="149:73">AML_MAX_FIXED</name></expr></argument>,
                             <argument pos:start="150:30" pos:end="150:42"><expr pos:start="150:30" pos:end="150:42"><name pos:start="150:30" pos:end="150:42">AML_CACHEABLE</name></expr></argument>, <argument pos:start="150:45" pos:end="150:58"><expr pos:start="150:45" pos:end="150:58"><name pos:start="150:45" pos:end="150:58">AML_READ_WRITE</name></expr></argument>,
                             <argument pos:start="151:30" pos:end="151:30"><expr pos:start="151:30" pos:end="151:30"><literal type="number" pos:start="151:30" pos:end="151:30">0</literal></expr></argument>, <argument pos:start="151:33" pos:end="151:46"><expr pos:start="151:33" pos:end="151:46"><name pos:start="151:33" pos:end="151:46"><name pos:start="151:33" pos:end="151:35">pci</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:40">w64</name><operator pos:start="151:41" pos:end="151:41">.</operator><name pos:start="151:42" pos:end="151:46">begin</name></name></expr></argument>, <argument pos:start="151:49" pos:end="151:64"><expr pos:start="151:49" pos:end="151:64"><name pos:start="151:49" pos:end="151:60"><name pos:start="151:49" pos:end="151:51">pci</name><operator pos:start="151:52" pos:end="151:53">-&gt;</operator><name pos:start="151:54" pos:end="151:56">w64</name><operator pos:start="151:57" pos:end="151:57">.</operator><name pos:start="151:58" pos:end="151:60">end</name></name> <operator pos:start="151:62" pos:end="151:62">-</operator> <literal type="number" pos:start="151:64" pos:end="151:64">1</literal></expr></argument>, <argument pos:start="151:67" pos:end="151:67"><expr pos:start="151:67" pos:end="151:67"><literal type="number" pos:start="151:67" pos:end="151:67">0</literal></expr></argument>,
                             <argument pos:start="152:30" pos:end="152:58"><expr pos:start="152:30" pos:end="152:58"><name pos:start="152:30" pos:end="152:41"><name pos:start="152:30" pos:end="152:32">pci</name><operator pos:start="152:33" pos:end="152:34">-&gt;</operator><name pos:start="152:35" pos:end="152:37">w64</name><operator pos:start="152:38" pos:end="152:38">.</operator><name pos:start="152:39" pos:end="152:41">end</name></name> <operator pos:start="152:43" pos:end="152:43">-</operator> <name pos:start="152:45" pos:end="152:58"><name pos:start="152:45" pos:end="152:47">pci</name><operator pos:start="152:48" pos:end="152:49">-&gt;</operator><name pos:start="152:50" pos:end="152:52">w64</name><operator pos:start="152:53" pos:end="152:53">.</operator><name pos:start="152:54" pos:end="152:58">begin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="153:5" pos:end="153:50"><expr pos:start="153:5" pos:end="153:49"><call pos:start="153:5" pos:end="153:49"><name pos:start="153:5" pos:end="153:14">aml_append</name><argument_list pos:start="153:15" pos:end="153:49">(<argument pos:start="153:16" pos:end="153:20"><expr pos:start="153:16" pos:end="153:20"><name pos:start="153:16" pos:end="153:20">scope</name></expr></argument>, <argument pos:start="153:23" pos:end="153:48"><expr pos:start="153:23" pos:end="153:48"><call pos:start="153:23" pos:end="153:48"><name pos:start="153:23" pos:end="153:35">aml_name_decl</name><argument_list pos:start="153:36" pos:end="153:48">(<argument pos:start="153:37" pos:end="153:42"><expr pos:start="153:37" pos:end="153:42"><literal type="string" pos:start="153:37" pos:end="153:42">"_CRS"</literal></expr></argument>, <argument pos:start="153:45" pos:end="153:47"><expr pos:start="153:45" pos:end="153:47"><name pos:start="153:45" pos:end="153:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="154:5" pos:end="154:38">/* reserve GPE0 block resources */</comment>
    <expr_stmt pos:start="155:5" pos:end="155:29"><expr pos:start="155:5" pos:end="155:28"><name pos:start="155:5" pos:end="155:7">dev</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <call pos:start="155:11" pos:end="155:28"><name pos:start="155:11" pos:end="155:20">aml_device</name><argument_list pos:start="155:21" pos:end="155:28">(<argument pos:start="155:22" pos:end="155:27"><expr pos:start="155:22" pos:end="155:27"><literal type="string" pos:start="155:22" pos:end="155:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="156:5" pos:end="156:66"><expr pos:start="156:5" pos:end="156:65"><call pos:start="156:5" pos:end="156:65"><name pos:start="156:5" pos:end="156:14">aml_append</name><argument_list pos:start="156:15" pos:end="156:65">(<argument pos:start="156:16" pos:end="156:18"><expr pos:start="156:16" pos:end="156:18"><name pos:start="156:16" pos:end="156:18">dev</name></expr></argument>, <argument pos:start="156:21" pos:end="156:64"><expr pos:start="156:21" pos:end="156:64"><call pos:start="156:21" pos:end="156:64"><name pos:start="156:21" pos:end="156:33">aml_name_decl</name><argument_list pos:start="156:34" pos:end="156:64">(<argument pos:start="156:35" pos:end="156:40"><expr pos:start="156:35" pos:end="156:40"><literal type="string" pos:start="156:35" pos:end="156:40">"_HID"</literal></expr></argument>, <argument pos:start="156:43" pos:end="156:63"><expr pos:start="156:43" pos:end="156:63"><call pos:start="156:43" pos:end="156:63"><name pos:start="156:43" pos:end="156:52">aml_string</name><argument_list pos:start="156:53" pos:end="156:63">(<argument pos:start="156:54" pos:end="156:62"><expr pos:start="156:54" pos:end="156:62"><literal type="string" pos:start="156:54" pos:end="156:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:73"><expr pos:start="157:5" pos:end="157:72"><call pos:start="157:5" pos:end="157:72"><name pos:start="157:5" pos:end="157:14">aml_append</name><argument_list pos:start="157:15" pos:end="157:72">(<argument pos:start="157:16" pos:end="157:18"><expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">dev</name></expr></argument>, <argument pos:start="157:21" pos:end="157:71"><expr pos:start="157:21" pos:end="157:71"><call pos:start="157:21" pos:end="157:71"><name pos:start="157:21" pos:end="157:33">aml_name_decl</name><argument_list pos:start="157:34" pos:end="157:71">(<argument pos:start="157:35" pos:end="157:40"><expr pos:start="157:35" pos:end="157:40"><literal type="string" pos:start="157:35" pos:end="157:40">"_UID"</literal></expr></argument>, <argument pos:start="157:43" pos:end="157:70"><expr pos:start="157:43" pos:end="157:70"><call pos:start="157:43" pos:end="157:70"><name pos:start="157:43" pos:end="157:52">aml_string</name><argument_list pos:start="157:53" pos:end="157:70">(<argument pos:start="157:54" pos:end="157:69"><expr pos:start="157:54" pos:end="157:69"><literal type="string" pos:start="157:54" pos:end="157:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="158:5" pos:end="158:64">/* device present, functioning, decoding, not shown in UI */</comment>
    <expr_stmt pos:start="159:5" pos:end="159:57"><expr pos:start="159:5" pos:end="159:56"><call pos:start="159:5" pos:end="159:56"><name pos:start="159:5" pos:end="159:14">aml_append</name><argument_list pos:start="159:15" pos:end="159:56">(<argument pos:start="159:16" pos:end="159:18"><expr pos:start="159:16" pos:end="159:18"><name pos:start="159:16" pos:end="159:18">dev</name></expr></argument>, <argument pos:start="159:21" pos:end="159:55"><expr pos:start="159:21" pos:end="159:55"><call pos:start="159:21" pos:end="159:55"><name pos:start="159:21" pos:end="159:33">aml_name_decl</name><argument_list pos:start="159:34" pos:end="159:55">(<argument pos:start="159:35" pos:end="159:40"><expr pos:start="159:35" pos:end="159:40"><literal type="string" pos:start="159:35" pos:end="159:40">"_STA"</literal></expr></argument>, <argument pos:start="159:43" pos:end="159:54"><expr pos:start="159:43" pos:end="159:54"><call pos:start="159:43" pos:end="159:54"><name pos:start="159:43" pos:end="159:49">aml_int</name><argument_list pos:start="159:50" pos:end="159:54">(<argument pos:start="159:51" pos:end="159:53"><expr pos:start="159:51" pos:end="159:53"><literal type="number" pos:start="159:51" pos:end="159:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="160:5" pos:end="160:34"><expr pos:start="160:5" pos:end="160:33"><name pos:start="160:5" pos:end="160:7">crs</name> <operator pos:start="160:9" pos:end="160:9">=</operator> <call pos:start="160:11" pos:end="160:33"><name pos:start="160:11" pos:end="160:31">aml_resource_template</name><argument_list pos:start="160:32" pos:end="160:33">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="161:5" pos:end="163:6"><expr pos:start="161:5" pos:end="163:5"><call pos:start="161:5" pos:end="163:5"><name pos:start="161:5" pos:end="161:14">aml_append</name><argument_list pos:start="161:15" pos:end="163:5">(<argument pos:start="161:16" pos:end="161:18"><expr pos:start="161:16" pos:end="161:18"><name pos:start="161:16" pos:end="161:18">crs</name></expr></argument>,
        <argument pos:start="162:9" pos:end="162:77"><expr pos:start="162:9" pos:end="162:77"><call pos:start="162:9" pos:end="162:77"><name pos:start="162:9" pos:end="162:14">aml_io</name><argument_list pos:start="162:15" pos:end="162:77">(<argument pos:start="162:16" pos:end="162:27"><expr pos:start="162:16" pos:end="162:27"><name pos:start="162:16" pos:end="162:27">AML_DECODE16</name></expr></argument>, <argument pos:start="162:30" pos:end="162:41"><expr pos:start="162:30" pos:end="162:41"><name pos:start="162:30" pos:end="162:41"><name pos:start="162:30" pos:end="162:31">pm</name><operator pos:start="162:32" pos:end="162:33">-&gt;</operator><name pos:start="162:34" pos:end="162:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="162:44" pos:end="162:55"><expr pos:start="162:44" pos:end="162:55"><name pos:start="162:44" pos:end="162:55"><name pos:start="162:44" pos:end="162:45">pm</name><operator pos:start="162:46" pos:end="162:47">-&gt;</operator><name pos:start="162:48" pos:end="162:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="162:58" pos:end="162:58"><expr pos:start="162:58" pos:end="162:58"><literal type="number" pos:start="162:58" pos:end="162:58">1</literal></expr></argument>, <argument pos:start="162:61" pos:end="162:76"><expr pos:start="162:61" pos:end="162:76"><name pos:start="162:61" pos:end="162:76"><name pos:start="162:61" pos:end="162:62">pm</name><operator pos:start="162:63" pos:end="162:64">-&gt;</operator><name pos:start="162:65" pos:end="162:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="164:5" pos:end="164:48"><expr pos:start="164:5" pos:end="164:47"><call pos:start="164:5" pos:end="164:47"><name pos:start="164:5" pos:end="164:14">aml_append</name><argument_list pos:start="164:15" pos:end="164:47">(<argument pos:start="164:16" pos:end="164:18"><expr pos:start="164:16" pos:end="164:18"><name pos:start="164:16" pos:end="164:18">dev</name></expr></argument>, <argument pos:start="164:21" pos:end="164:46"><expr pos:start="164:21" pos:end="164:46"><call pos:start="164:21" pos:end="164:46"><name pos:start="164:21" pos:end="164:33">aml_name_decl</name><argument_list pos:start="164:34" pos:end="164:46">(<argument pos:start="164:35" pos:end="164:40"><expr pos:start="164:35" pos:end="164:40"><literal type="string" pos:start="164:35" pos:end="164:40">"_CRS"</literal></expr></argument>, <argument pos:start="164:43" pos:end="164:45"><expr pos:start="164:43" pos:end="164:45"><name pos:start="164:43" pos:end="164:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="165:5" pos:end="165:27"><expr pos:start="165:5" pos:end="165:26"><call pos:start="165:5" pos:end="165:26"><name pos:start="165:5" pos:end="165:14">aml_append</name><argument_list pos:start="165:15" pos:end="165:26">(<argument pos:start="165:16" pos:end="165:20"><expr pos:start="165:16" pos:end="165:20"><name pos:start="165:16" pos:end="165:20">scope</name></expr></argument>, <argument pos:start="165:23" pos:end="165:25"><expr pos:start="165:23" pos:end="165:25"><name pos:start="165:23" pos:end="165:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:38"><expr pos:start="166:5" pos:end="166:37"><call pos:start="166:5" pos:end="166:37"><name pos:start="166:5" pos:end="166:20">g_ptr_array_free</name><argument_list pos:start="166:21" pos:end="166:37">(<argument pos:start="166:22" pos:end="166:30"><expr pos:start="166:22" pos:end="166:30"><name pos:start="166:22" pos:end="166:30">io_ranges</name></expr></argument>, <argument pos:start="166:33" pos:end="166:36"><expr pos:start="166:33" pos:end="166:36"><name pos:start="166:33" pos:end="166:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="167:5" pos:end="167:39"><expr pos:start="167:5" pos:end="167:38"><call pos:start="167:5" pos:end="167:38"><name pos:start="167:5" pos:end="167:20">g_ptr_array_free</name><argument_list pos:start="167:21" pos:end="167:38">(<argument pos:start="167:22" pos:end="167:31"><expr pos:start="167:22" pos:end="167:31"><name pos:start="167:22" pos:end="167:31">mem_ranges</name></expr></argument>, <argument pos:start="167:34" pos:end="167:37"><expr pos:start="167:34" pos:end="167:37"><name pos:start="167:34" pos:end="167:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="168:5" pos:end="168:33">/* reserve PCIHP resources */</comment>
    <if_stmt pos:start="169:5" pos:end="299:25"><if pos:start="169:5" pos:end="299:25">if <condition pos:start="169:8" pos:end="169:25">(<expr pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:10">pm</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="169:27" pos:end="299:25">{<block_content pos:start="170:9" pos:end="299:25">
        <expr_stmt pos:start="170:9" pos:end="170:33"><expr pos:start="170:9" pos:end="170:32"><name pos:start="170:9" pos:end="170:11">dev</name> <operator pos:start="170:13" pos:end="170:13">=</operator> <call pos:start="170:15" pos:end="170:32"><name pos:start="170:15" pos:end="170:24">aml_device</name><argument_list pos:start="170:25" pos:end="170:32">(<argument pos:start="170:26" pos:end="170:31"><expr pos:start="170:26" pos:end="170:31"><literal type="string" pos:start="170:26" pos:end="170:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="171:9" pos:end="171:70"><expr pos:start="171:9" pos:end="171:69"><call pos:start="171:9" pos:end="171:69"><name pos:start="171:9" pos:end="171:18">aml_append</name><argument_list pos:start="171:19" pos:end="171:69">(<argument pos:start="171:20" pos:end="171:22"><expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">dev</name></expr></argument>, <argument pos:start="171:25" pos:end="171:68"><expr pos:start="171:25" pos:end="171:68"><call pos:start="171:25" pos:end="171:68"><name pos:start="171:25" pos:end="171:37">aml_name_decl</name><argument_list pos:start="171:38" pos:end="171:68">(<argument pos:start="171:39" pos:end="171:44"><expr pos:start="171:39" pos:end="171:44"><literal type="string" pos:start="171:39" pos:end="171:44">"_HID"</literal></expr></argument>, <argument pos:start="171:47" pos:end="171:67"><expr pos:start="171:47" pos:end="171:67"><call pos:start="171:47" pos:end="171:67"><name pos:start="171:47" pos:end="171:56">aml_string</name><argument_list pos:start="171:57" pos:end="171:67">(<argument pos:start="171:58" pos:end="171:66"><expr pos:start="171:58" pos:end="171:66"><literal type="string" pos:start="171:58" pos:end="171:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="172:9" pos:end="173:72"><expr pos:start="172:9" pos:end="173:71"><call pos:start="172:9" pos:end="173:71"><name pos:start="172:9" pos:end="172:18">aml_append</name><argument_list pos:start="172:19" pos:end="173:71">(<argument pos:start="172:20" pos:end="172:22"><expr pos:start="172:20" pos:end="172:22"><name pos:start="172:20" pos:end="172:22">dev</name></expr></argument>,
            <argument pos:start="173:13" pos:end="173:70"><expr pos:start="173:13" pos:end="173:70"><call pos:start="173:13" pos:end="173:70"><name pos:start="173:13" pos:end="173:25">aml_name_decl</name><argument_list pos:start="173:26" pos:end="173:70">(<argument pos:start="173:27" pos:end="173:32"><expr pos:start="173:27" pos:end="173:32"><literal type="string" pos:start="173:27" pos:end="173:32">"_UID"</literal></expr></argument>, <argument pos:start="173:35" pos:end="173:69"><expr pos:start="173:35" pos:end="173:69"><call pos:start="173:35" pos:end="173:69"><name pos:start="173:35" pos:end="173:44">aml_string</name><argument_list pos:start="173:45" pos:end="173:69">(<argument pos:start="173:46" pos:end="173:68"><expr pos:start="173:46" pos:end="173:68"><literal type="string" pos:start="173:46" pos:end="173:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="174:9" pos:end="174:68">/* device present, functioning, decoding, not shown in UI */</comment>
        <expr_stmt pos:start="175:9" pos:end="175:61"><expr pos:start="175:9" pos:end="175:60"><call pos:start="175:9" pos:end="175:60"><name pos:start="175:9" pos:end="175:18">aml_append</name><argument_list pos:start="175:19" pos:end="175:60">(<argument pos:start="175:20" pos:end="175:22"><expr pos:start="175:20" pos:end="175:22"><name pos:start="175:20" pos:end="175:22">dev</name></expr></argument>, <argument pos:start="175:25" pos:end="175:59"><expr pos:start="175:25" pos:end="175:59"><call pos:start="175:25" pos:end="175:59"><name pos:start="175:25" pos:end="175:37">aml_name_decl</name><argument_list pos:start="175:38" pos:end="175:59">(<argument pos:start="175:39" pos:end="175:44"><expr pos:start="175:39" pos:end="175:44"><literal type="string" pos:start="175:39" pos:end="175:44">"_STA"</literal></expr></argument>, <argument pos:start="175:47" pos:end="175:58"><expr pos:start="175:47" pos:end="175:58"><call pos:start="175:47" pos:end="175:58"><name pos:start="175:47" pos:end="175:53">aml_int</name><argument_list pos:start="175:54" pos:end="175:58">(<argument pos:start="175:55" pos:end="175:57"><expr pos:start="175:55" pos:end="175:57"><literal type="number" pos:start="175:55" pos:end="175:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="176:9" pos:end="176:38"><expr pos:start="176:9" pos:end="176:37"><name pos:start="176:9" pos:end="176:11">crs</name> <operator pos:start="176:13" pos:end="176:13">=</operator> <call pos:start="176:15" pos:end="176:37"><name pos:start="176:15" pos:end="176:35">aml_resource_template</name><argument_list pos:start="176:36" pos:end="176:37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="177:9" pos:end="180:10"><expr pos:start="177:9" pos:end="180:9"><call pos:start="177:9" pos:end="180:9"><name pos:start="177:9" pos:end="177:18">aml_append</name><argument_list pos:start="177:19" pos:end="180:9">(<argument pos:start="177:20" pos:end="177:22"><expr pos:start="177:20" pos:end="177:22"><name pos:start="177:20" pos:end="177:22">crs</name></expr></argument>,
            <argument pos:start="178:13" pos:end="179:36"><expr pos:start="178:13" pos:end="179:36"><call pos:start="178:13" pos:end="179:36"><name pos:start="178:13" pos:end="178:18">aml_io</name><argument_list pos:start="178:19" pos:end="179:36">(<argument pos:start="178:20" pos:end="178:31"><expr pos:start="178:20" pos:end="178:31"><name pos:start="178:20" pos:end="178:31">AML_DECODE16</name></expr></argument>, <argument pos:start="178:34" pos:end="178:50"><expr pos:start="178:34" pos:end="178:50"><name pos:start="178:34" pos:end="178:50"><name pos:start="178:34" pos:end="178:35">pm</name><operator pos:start="178:36" pos:end="178:37">-&gt;</operator><name pos:start="178:38" pos:end="178:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="178:53" pos:end="178:69"><expr pos:start="178:53" pos:end="178:69"><name pos:start="178:53" pos:end="178:69"><name pos:start="178:53" pos:end="178:54">pm</name><operator pos:start="178:55" pos:end="178:56">-&gt;</operator><name pos:start="178:57" pos:end="178:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="178:72" pos:end="178:72"><expr pos:start="178:72" pos:end="178:72"><literal type="number" pos:start="178:72" pos:end="178:72">1</literal></expr></argument>,
                   <argument pos:start="179:20" pos:end="179:35"><expr pos:start="179:20" pos:end="179:35"><name pos:start="179:20" pos:end="179:35"><name pos:start="179:20" pos:end="179:21">pm</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="181:9" pos:end="181:52"><expr pos:start="181:9" pos:end="181:51"><call pos:start="181:9" pos:end="181:51"><name pos:start="181:9" pos:end="181:18">aml_append</name><argument_list pos:start="181:19" pos:end="181:51">(<argument pos:start="181:20" pos:end="181:22"><expr pos:start="181:20" pos:end="181:22"><name pos:start="181:20" pos:end="181:22">dev</name></expr></argument>, <argument pos:start="181:25" pos:end="181:50"><expr pos:start="181:25" pos:end="181:50"><call pos:start="181:25" pos:end="181:50"><name pos:start="181:25" pos:end="181:37">aml_name_decl</name><argument_list pos:start="181:38" pos:end="181:50">(<argument pos:start="181:39" pos:end="181:44"><expr pos:start="181:39" pos:end="181:44"><literal type="string" pos:start="181:39" pos:end="181:44">"_CRS"</literal></expr></argument>, <argument pos:start="181:47" pos:end="181:49"><expr pos:start="181:47" pos:end="181:49"><name pos:start="181:47" pos:end="181:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="182:9" pos:end="182:31"><expr pos:start="182:9" pos:end="182:30"><call pos:start="182:9" pos:end="182:30"><name pos:start="182:9" pos:end="182:18">aml_append</name><argument_list pos:start="182:19" pos:end="182:30">(<argument pos:start="182:20" pos:end="182:24"><expr pos:start="182:20" pos:end="182:24"><name pos:start="182:20" pos:end="182:24">scope</name></expr></argument>, <argument pos:start="182:27" pos:end="182:29"><expr pos:start="182:27" pos:end="182:29"><name pos:start="182:27" pos:end="182:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:28"><expr pos:start="183:5" pos:end="183:27"><call pos:start="183:5" pos:end="183:27"><name pos:start="183:5" pos:end="183:14">aml_append</name><argument_list pos:start="183:15" pos:end="183:27">(<argument pos:start="183:16" pos:end="183:19"><expr pos:start="183:16" pos:end="183:19"><name pos:start="183:16" pos:end="183:19">dsdt</name></expr></argument>, <argument pos:start="183:22" pos:end="183:26"><expr pos:start="183:22" pos:end="183:26"><name pos:start="183:22" pos:end="183:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="184:5" pos:end="184:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>
    <expr_stmt pos:start="185:5" pos:end="185:28"><expr pos:start="185:5" pos:end="185:27"><name pos:start="185:5" pos:end="185:9">scope</name> <operator pos:start="185:11" pos:end="185:11">=</operator> <call pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:21">aml_scope</name><argument_list pos:start="185:22" pos:end="185:27">(<argument pos:start="185:23" pos:end="185:26"><expr pos:start="185:23" pos:end="185:26"><literal type="string" pos:start="185:23" pos:end="185:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="186:5" pos:end="299:25"><if pos:start="186:5" pos:end="299:25">if <condition pos:start="186:8" pos:end="186:25">(<expr pos:start="186:9" pos:end="186:24"><operator pos:start="186:9" pos:end="186:9">!</operator><name pos:start="186:10" pos:end="186:24"><name pos:start="186:10" pos:end="186:11">pm</name><operator pos:start="186:12" pos:end="186:13">-&gt;</operator><name pos:start="186:14" pos:end="186:24">s3_disabled</name></name></expr>)</condition> <block pos:start="186:27" pos:end="299:25">{<block_content pos:start="187:9" pos:end="299:25">
        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:11">pkg</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:28"><name pos:start="187:15" pos:end="187:25">aml_package</name><argument_list pos:start="187:26" pos:end="187:28">(<argument pos:start="187:27" pos:end="187:27"><expr pos:start="187:27" pos:end="187:27"><literal type="number" pos:start="187:27" pos:end="187:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="188:9" pos:end="188:36"><expr pos:start="188:9" pos:end="188:35"><call pos:start="188:9" pos:end="188:35"><name pos:start="188:9" pos:end="188:18">aml_append</name><argument_list pos:start="188:19" pos:end="188:35">(<argument pos:start="188:20" pos:end="188:22"><expr pos:start="188:20" pos:end="188:22"><name pos:start="188:20" pos:end="188:22">pkg</name></expr></argument>, <argument pos:start="188:25" pos:end="188:34"><expr pos:start="188:25" pos:end="188:34"><call pos:start="188:25" pos:end="188:34"><name pos:start="188:25" pos:end="188:31">aml_int</name><argument_list pos:start="188:32" pos:end="188:34">(<argument pos:start="188:33" pos:end="188:33"><expr pos:start="188:33" pos:end="188:33"><literal type="number" pos:start="188:33" pos:end="188:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="188:38" pos:end="188:59">/* PM1a_CNT.SLP_TYP */</comment>
        <expr_stmt pos:start="189:9" pos:end="189:36"><expr pos:start="189:9" pos:end="189:35"><call pos:start="189:9" pos:end="189:35"><name pos:start="189:9" pos:end="189:18">aml_append</name><argument_list pos:start="189:19" pos:end="189:35">(<argument pos:start="189:20" pos:end="189:22"><expr pos:start="189:20" pos:end="189:22"><name pos:start="189:20" pos:end="189:22">pkg</name></expr></argument>, <argument pos:start="189:25" pos:end="189:34"><expr pos:start="189:25" pos:end="189:34"><call pos:start="189:25" pos:end="189:34"><name pos:start="189:25" pos:end="189:31">aml_int</name><argument_list pos:start="189:32" pos:end="189:34">(<argument pos:start="189:33" pos:end="189:33"><expr pos:start="189:33" pos:end="189:33"><literal type="number" pos:start="189:33" pos:end="189:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="189:38" pos:end="189:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>
        <expr_stmt pos:start="190:9" pos:end="190:36"><expr pos:start="190:9" pos:end="190:35"><call pos:start="190:9" pos:end="190:35"><name pos:start="190:9" pos:end="190:18">aml_append</name><argument_list pos:start="190:19" pos:end="190:35">(<argument pos:start="190:20" pos:end="190:22"><expr pos:start="190:20" pos:end="190:22"><name pos:start="190:20" pos:end="190:22">pkg</name></expr></argument>, <argument pos:start="190:25" pos:end="190:34"><expr pos:start="190:25" pos:end="190:34"><call pos:start="190:25" pos:end="190:34"><name pos:start="190:25" pos:end="190:31">aml_int</name><argument_list pos:start="190:32" pos:end="190:34">(<argument pos:start="190:33" pos:end="190:33"><expr pos:start="190:33" pos:end="190:33"><literal type="number" pos:start="190:33" pos:end="190:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="190:38" pos:end="190:51">/* reserved */</comment>
        <expr_stmt pos:start="191:9" pos:end="191:36"><expr pos:start="191:9" pos:end="191:35"><call pos:start="191:9" pos:end="191:35"><name pos:start="191:9" pos:end="191:18">aml_append</name><argument_list pos:start="191:19" pos:end="191:35">(<argument pos:start="191:20" pos:end="191:22"><expr pos:start="191:20" pos:end="191:22"><name pos:start="191:20" pos:end="191:22">pkg</name></expr></argument>, <argument pos:start="191:25" pos:end="191:34"><expr pos:start="191:25" pos:end="191:34"><call pos:start="191:25" pos:end="191:34"><name pos:start="191:25" pos:end="191:31">aml_int</name><argument_list pos:start="191:32" pos:end="191:34">(<argument pos:start="191:33" pos:end="191:33"><expr pos:start="191:33" pos:end="191:33"><literal type="number" pos:start="191:33" pos:end="191:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="191:38" pos:end="191:51">/* reserved */</comment>
        <expr_stmt pos:start="192:9" pos:end="192:53"><expr pos:start="192:9" pos:end="192:52"><call pos:start="192:9" pos:end="192:52"><name pos:start="192:9" pos:end="192:18">aml_append</name><argument_list pos:start="192:19" pos:end="192:52">(<argument pos:start="192:20" pos:end="192:24"><expr pos:start="192:20" pos:end="192:24"><name pos:start="192:20" pos:end="192:24">scope</name></expr></argument>, <argument pos:start="192:27" pos:end="192:51"><expr pos:start="192:27" pos:end="192:51"><call pos:start="192:27" pos:end="192:51"><name pos:start="192:27" pos:end="192:39">aml_name_decl</name><argument_list pos:start="192:40" pos:end="192:51">(<argument pos:start="192:41" pos:end="192:45"><expr pos:start="192:41" pos:end="192:45"><literal type="string" pos:start="192:41" pos:end="192:45">"_S3"</literal></expr></argument>, <argument pos:start="192:48" pos:end="192:50"><expr pos:start="192:48" pos:end="192:50"><name pos:start="192:48" pos:end="192:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="193:5" pos:end="299:25"><if pos:start="193:5" pos:end="299:25">if <condition pos:start="193:8" pos:end="193:25">(<expr pos:start="193:9" pos:end="193:24"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:24"><name pos:start="193:10" pos:end="193:11">pm</name><operator pos:start="193:12" pos:end="193:13">-&gt;</operator><name pos:start="193:14" pos:end="193:24">s4_disabled</name></name></expr>)</condition> <block pos:start="193:27" pos:end="299:25">{<block_content pos:start="194:9" pos:end="299:25">
        <expr_stmt pos:start="194:9" pos:end="194:29"><expr pos:start="194:9" pos:end="194:28"><name pos:start="194:9" pos:end="194:11">pkg</name> <operator pos:start="194:13" pos:end="194:13">=</operator> <call pos:start="194:15" pos:end="194:28"><name pos:start="194:15" pos:end="194:25">aml_package</name><argument_list pos:start="194:26" pos:end="194:28">(<argument pos:start="194:27" pos:end="194:27"><expr pos:start="194:27" pos:end="194:27"><literal type="number" pos:start="194:27" pos:end="194:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="195:9" pos:end="195:45"><expr pos:start="195:9" pos:end="195:44"><call pos:start="195:9" pos:end="195:44"><name pos:start="195:9" pos:end="195:18">aml_append</name><argument_list pos:start="195:19" pos:end="195:44">(<argument pos:start="195:20" pos:end="195:22"><expr pos:start="195:20" pos:end="195:22"><name pos:start="195:20" pos:end="195:22">pkg</name></expr></argument>, <argument pos:start="195:25" pos:end="195:43"><expr pos:start="195:25" pos:end="195:43"><call pos:start="195:25" pos:end="195:43"><name pos:start="195:25" pos:end="195:31">aml_int</name><argument_list pos:start="195:32" pos:end="195:43">(<argument pos:start="195:33" pos:end="195:42"><expr pos:start="195:33" pos:end="195:42"><name pos:start="195:33" pos:end="195:42"><name pos:start="195:33" pos:end="195:34">pm</name><operator pos:start="195:35" pos:end="195:36">-&gt;</operator><name pos:start="195:37" pos:end="195:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="195:47" pos:end="195:68">/* PM1a_CNT.SLP_TYP */</comment>
        <comment type="block" pos:start="196:9" pos:end="196:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>
        <expr_stmt pos:start="197:9" pos:end="197:45"><expr pos:start="197:9" pos:end="197:44"><call pos:start="197:9" pos:end="197:44"><name pos:start="197:9" pos:end="197:18">aml_append</name><argument_list pos:start="197:19" pos:end="197:44">(<argument pos:start="197:20" pos:end="197:22"><expr pos:start="197:20" pos:end="197:22"><name pos:start="197:20" pos:end="197:22">pkg</name></expr></argument>, <argument pos:start="197:25" pos:end="197:43"><expr pos:start="197:25" pos:end="197:43"><call pos:start="197:25" pos:end="197:43"><name pos:start="197:25" pos:end="197:31">aml_int</name><argument_list pos:start="197:32" pos:end="197:43">(<argument pos:start="197:33" pos:end="197:42"><expr pos:start="197:33" pos:end="197:42"><name pos:start="197:33" pos:end="197:42"><name pos:start="197:33" pos:end="197:34">pm</name><operator pos:start="197:35" pos:end="197:36">-&gt;</operator><name pos:start="197:37" pos:end="197:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="198:9" pos:end="198:36"><expr pos:start="198:9" pos:end="198:35"><call pos:start="198:9" pos:end="198:35"><name pos:start="198:9" pos:end="198:18">aml_append</name><argument_list pos:start="198:19" pos:end="198:35">(<argument pos:start="198:20" pos:end="198:22"><expr pos:start="198:20" pos:end="198:22"><name pos:start="198:20" pos:end="198:22">pkg</name></expr></argument>, <argument pos:start="198:25" pos:end="198:34"><expr pos:start="198:25" pos:end="198:34"><call pos:start="198:25" pos:end="198:34"><name pos:start="198:25" pos:end="198:31">aml_int</name><argument_list pos:start="198:32" pos:end="198:34">(<argument pos:start="198:33" pos:end="198:33"><expr pos:start="198:33" pos:end="198:33"><literal type="number" pos:start="198:33" pos:end="198:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="198:38" pos:end="198:51">/* reserved */</comment>
        <expr_stmt pos:start="199:9" pos:end="199:36"><expr pos:start="199:9" pos:end="199:35"><call pos:start="199:9" pos:end="199:35"><name pos:start="199:9" pos:end="199:18">aml_append</name><argument_list pos:start="199:19" pos:end="199:35">(<argument pos:start="199:20" pos:end="199:22"><expr pos:start="199:20" pos:end="199:22"><name pos:start="199:20" pos:end="199:22">pkg</name></expr></argument>, <argument pos:start="199:25" pos:end="199:34"><expr pos:start="199:25" pos:end="199:34"><call pos:start="199:25" pos:end="199:34"><name pos:start="199:25" pos:end="199:31">aml_int</name><argument_list pos:start="199:32" pos:end="199:34">(<argument pos:start="199:33" pos:end="199:33"><expr pos:start="199:33" pos:end="199:33"><literal type="number" pos:start="199:33" pos:end="199:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="199:38" pos:end="199:51">/* reserved */</comment>
        <expr_stmt pos:start="200:9" pos:end="200:53"><expr pos:start="200:9" pos:end="200:52"><call pos:start="200:9" pos:end="200:52"><name pos:start="200:9" pos:end="200:18">aml_append</name><argument_list pos:start="200:19" pos:end="200:52">(<argument pos:start="200:20" pos:end="200:24"><expr pos:start="200:20" pos:end="200:24"><name pos:start="200:20" pos:end="200:24">scope</name></expr></argument>, <argument pos:start="200:27" pos:end="200:51"><expr pos:start="200:27" pos:end="200:51"><call pos:start="200:27" pos:end="200:51"><name pos:start="200:27" pos:end="200:39">aml_name_decl</name><argument_list pos:start="200:40" pos:end="200:51">(<argument pos:start="200:41" pos:end="200:45"><expr pos:start="200:41" pos:end="200:45"><literal type="string" pos:start="200:41" pos:end="200:45">"_S4"</literal></expr></argument>, <argument pos:start="200:48" pos:end="200:50"><expr pos:start="200:48" pos:end="200:50"><name pos:start="200:48" pos:end="200:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="201:5" pos:end="201:25"><expr pos:start="201:5" pos:end="201:24"><name pos:start="201:5" pos:end="201:7">pkg</name> <operator pos:start="201:9" pos:end="201:9">=</operator> <call pos:start="201:11" pos:end="201:24"><name pos:start="201:11" pos:end="201:21">aml_package</name><argument_list pos:start="201:22" pos:end="201:24">(<argument pos:start="201:23" pos:end="201:23"><expr pos:start="201:23" pos:end="201:23"><literal type="number" pos:start="201:23" pos:end="201:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="202:5" pos:end="202:32"><expr pos:start="202:5" pos:end="202:31"><call pos:start="202:5" pos:end="202:31"><name pos:start="202:5" pos:end="202:14">aml_append</name><argument_list pos:start="202:15" pos:end="202:31">(<argument pos:start="202:16" pos:end="202:18"><expr pos:start="202:16" pos:end="202:18"><name pos:start="202:16" pos:end="202:18">pkg</name></expr></argument>, <argument pos:start="202:21" pos:end="202:30"><expr pos:start="202:21" pos:end="202:30"><call pos:start="202:21" pos:end="202:30"><name pos:start="202:21" pos:end="202:27">aml_int</name><argument_list pos:start="202:28" pos:end="202:30">(<argument pos:start="202:29" pos:end="202:29"><expr pos:start="202:29" pos:end="202:29"><literal type="number" pos:start="202:29" pos:end="202:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="202:34" pos:end="202:55">/* PM1a_CNT.SLP_TYP */</comment>
    <expr_stmt pos:start="203:5" pos:end="203:32"><expr pos:start="203:5" pos:end="203:31"><call pos:start="203:5" pos:end="203:31"><name pos:start="203:5" pos:end="203:14">aml_append</name><argument_list pos:start="203:15" pos:end="203:31">(<argument pos:start="203:16" pos:end="203:18"><expr pos:start="203:16" pos:end="203:18"><name pos:start="203:16" pos:end="203:18">pkg</name></expr></argument>, <argument pos:start="203:21" pos:end="203:30"><expr pos:start="203:21" pos:end="203:30"><call pos:start="203:21" pos:end="203:30"><name pos:start="203:21" pos:end="203:27">aml_int</name><argument_list pos:start="203:28" pos:end="203:30">(<argument pos:start="203:29" pos:end="203:29"><expr pos:start="203:29" pos:end="203:29"><literal type="number" pos:start="203:29" pos:end="203:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="203:34" pos:end="203:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>
    <expr_stmt pos:start="204:5" pos:end="204:32"><expr pos:start="204:5" pos:end="204:31"><call pos:start="204:5" pos:end="204:31"><name pos:start="204:5" pos:end="204:14">aml_append</name><argument_list pos:start="204:15" pos:end="204:31">(<argument pos:start="204:16" pos:end="204:18"><expr pos:start="204:16" pos:end="204:18"><name pos:start="204:16" pos:end="204:18">pkg</name></expr></argument>, <argument pos:start="204:21" pos:end="204:30"><expr pos:start="204:21" pos:end="204:30"><call pos:start="204:21" pos:end="204:30"><name pos:start="204:21" pos:end="204:27">aml_int</name><argument_list pos:start="204:28" pos:end="204:30">(<argument pos:start="204:29" pos:end="204:29"><expr pos:start="204:29" pos:end="204:29"><literal type="number" pos:start="204:29" pos:end="204:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="204:34" pos:end="204:47">/* reserved */</comment>
    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><call pos:start="205:5" pos:end="205:31"><name pos:start="205:5" pos:end="205:14">aml_append</name><argument_list pos:start="205:15" pos:end="205:31">(<argument pos:start="205:16" pos:end="205:18"><expr pos:start="205:16" pos:end="205:18"><name pos:start="205:16" pos:end="205:18">pkg</name></expr></argument>, <argument pos:start="205:21" pos:end="205:30"><expr pos:start="205:21" pos:end="205:30"><call pos:start="205:21" pos:end="205:30"><name pos:start="205:21" pos:end="205:27">aml_int</name><argument_list pos:start="205:28" pos:end="205:30">(<argument pos:start="205:29" pos:end="205:29"><expr pos:start="205:29" pos:end="205:29"><literal type="number" pos:start="205:29" pos:end="205:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="205:34" pos:end="205:47">/* reserved */</comment>
    <expr_stmt pos:start="206:5" pos:end="206:49"><expr pos:start="206:5" pos:end="206:48"><call pos:start="206:5" pos:end="206:48"><name pos:start="206:5" pos:end="206:14">aml_append</name><argument_list pos:start="206:15" pos:end="206:48">(<argument pos:start="206:16" pos:end="206:20"><expr pos:start="206:16" pos:end="206:20"><name pos:start="206:16" pos:end="206:20">scope</name></expr></argument>, <argument pos:start="206:23" pos:end="206:47"><expr pos:start="206:23" pos:end="206:47"><call pos:start="206:23" pos:end="206:47"><name pos:start="206:23" pos:end="206:35">aml_name_decl</name><argument_list pos:start="206:36" pos:end="206:47">(<argument pos:start="206:37" pos:end="206:41"><expr pos:start="206:37" pos:end="206:41"><literal type="string" pos:start="206:37" pos:end="206:41">"_S5"</literal></expr></argument>, <argument pos:start="206:44" pos:end="206:46"><expr pos:start="206:44" pos:end="206:46"><name pos:start="206:44" pos:end="206:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="207:5" pos:end="207:28"><expr pos:start="207:5" pos:end="207:27"><call pos:start="207:5" pos:end="207:27"><name pos:start="207:5" pos:end="207:14">aml_append</name><argument_list pos:start="207:15" pos:end="207:27">(<argument pos:start="207:16" pos:end="207:19"><expr pos:start="207:16" pos:end="207:19"><name pos:start="207:16" pos:end="207:19">dsdt</name></expr></argument>, <argument pos:start="207:22" pos:end="207:26"><expr pos:start="207:22" pos:end="207:26"><name pos:start="207:22" pos:end="207:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="208:5" pos:end="208:45">/* create fw_cfg node, unconditionally */</comment>
    <block pos:start="209:5" pos:end="299:25">{<block_content pos:start="214:9" pos:end="299:25">
        <comment type="block" pos:start="210:9" pos:end="213:71">/* when using port i/o, the 8-bit data register *always* overlaps
         * with half of the 16-bit control register. Hence, the total size
         * of the i/o region used is FW_CFG_CTL_SIZE; when using DMA, the
         * DMA control register is located at FW_CFG_DMA_IO_BASE + 4 */</comment>
        <decl_stmt pos:start="214:9" pos:end="217:42"><decl pos:start="214:9" pos:end="217:41"><type pos:start="214:9" pos:end="214:15"><name pos:start="214:9" pos:end="214:15">uint8_t</name></type> <name pos:start="214:17" pos:end="214:23">io_size</name> <init pos:start="214:25" pos:end="217:41">= <expr pos:start="214:27" pos:end="217:41"><ternary pos:start="214:27" pos:end="217:41"><condition pos:start="214:27" pos:end="215:73"><expr pos:start="214:27" pos:end="215:71"><call pos:start="214:27" pos:end="215:71"><name pos:start="214:27" pos:end="214:50">object_property_get_bool</name><argument_list pos:start="214:51" pos:end="215:71">(<argument pos:start="214:52" pos:end="214:71"><expr pos:start="214:52" pos:end="214:71"><call pos:start="214:52" pos:end="214:71"><name pos:start="214:52" pos:end="214:57">OBJECT</name><argument_list pos:start="214:58" pos:end="214:71">(<argument pos:start="214:59" pos:end="214:70"><expr pos:start="214:59" pos:end="214:70"><name pos:start="214:59" pos:end="214:70"><name pos:start="214:59" pos:end="214:62">pcms</name><operator pos:start="214:63" pos:end="214:64">-&gt;</operator><name pos:start="214:65" pos:end="214:70">fw_cfg</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument pos:start="215:52" pos:end="215:64"><expr pos:start="215:52" pos:end="215:64"><literal type="string" pos:start="215:52" pos:end="215:64">"dma_enabled"</literal></expr></argument>, <argument pos:start="215:67" pos:end="215:70"><expr pos:start="215:67" pos:end="215:70"><name pos:start="215:67" pos:end="215:70">NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="216:27" pos:end="216:75">
                          <expr pos:start="216:27" pos:end="216:75"><call pos:start="216:27" pos:end="216:54"><name pos:start="216:27" pos:end="216:34">ROUND_UP</name><argument_list pos:start="216:35" pos:end="216:54">(<argument pos:start="216:36" pos:end="216:50"><expr pos:start="216:36" pos:end="216:50"><name pos:start="216:36" pos:end="216:50">FW_CFG_CTL_SIZE</name></expr></argument>, <argument pos:start="216:53" pos:end="216:53"><expr pos:start="216:53" pos:end="216:53"><literal type="number" pos:start="216:53" pos:end="216:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="216:56" pos:end="216:56">+</operator> <sizeof pos:start="216:58" pos:end="216:75">sizeof<argument_list pos:start="216:64" pos:end="216:75">(<argument pos:start="216:65" pos:end="216:74"><expr pos:start="216:65" pos:end="216:74"><name pos:start="216:65" pos:end="216:74">dma_addr_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="216:77" pos:end="217:41">:
                          <expr pos:start="217:27" pos:end="217:41"><name pos:start="217:27" pos:end="217:41">FW_CFG_CTL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="218:9" pos:end="218:40"><expr pos:start="218:9" pos:end="218:39"><name pos:start="218:9" pos:end="218:13">scope</name> <operator pos:start="218:15" pos:end="218:15">=</operator> <call pos:start="218:17" pos:end="218:39"><name pos:start="218:17" pos:end="218:25">aml_scope</name><argument_list pos:start="218:26" pos:end="218:39">(<argument pos:start="218:27" pos:end="218:38"><expr pos:start="218:27" pos:end="218:38"><literal type="string" pos:start="218:27" pos:end="218:38">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="219:9" pos:end="219:33"><expr pos:start="219:9" pos:end="219:32"><name pos:start="219:9" pos:end="219:11">dev</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <call pos:start="219:15" pos:end="219:32"><name pos:start="219:15" pos:end="219:24">aml_device</name><argument_list pos:start="219:25" pos:end="219:32">(<argument pos:start="219:26" pos:end="219:31"><expr pos:start="219:26" pos:end="219:31"><literal type="string" pos:start="219:26" pos:end="219:31">"FWCF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="220:9" pos:end="220:71"><expr pos:start="220:9" pos:end="220:70"><call pos:start="220:9" pos:end="220:70"><name pos:start="220:9" pos:end="220:18">aml_append</name><argument_list pos:start="220:19" pos:end="220:70">(<argument pos:start="220:20" pos:end="220:22"><expr pos:start="220:20" pos:end="220:22"><name pos:start="220:20" pos:end="220:22">dev</name></expr></argument>, <argument pos:start="220:25" pos:end="220:69"><expr pos:start="220:25" pos:end="220:69"><call pos:start="220:25" pos:end="220:69"><name pos:start="220:25" pos:end="220:37">aml_name_decl</name><argument_list pos:start="220:38" pos:end="220:69">(<argument pos:start="220:39" pos:end="220:44"><expr pos:start="220:39" pos:end="220:44"><literal type="string" pos:start="220:39" pos:end="220:44">"_HID"</literal></expr></argument>, <argument pos:start="220:47" pos:end="220:68"><expr pos:start="220:47" pos:end="220:68"><call pos:start="220:47" pos:end="220:68"><name pos:start="220:47" pos:end="220:56">aml_string</name><argument_list pos:start="220:57" pos:end="220:68">(<argument pos:start="220:58" pos:end="220:67"><expr pos:start="220:58" pos:end="220:67"><literal type="string" pos:start="220:58" pos:end="220:67">"QEMU0002"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="221:9" pos:end="221:68">/* device present, functioning, decoding, not shown in UI */</comment>
        <expr_stmt pos:start="222:9" pos:end="222:61"><expr pos:start="222:9" pos:end="222:60"><call pos:start="222:9" pos:end="222:60"><name pos:start="222:9" pos:end="222:18">aml_append</name><argument_list pos:start="222:19" pos:end="222:60">(<argument pos:start="222:20" pos:end="222:22"><expr pos:start="222:20" pos:end="222:22"><name pos:start="222:20" pos:end="222:22">dev</name></expr></argument>, <argument pos:start="222:25" pos:end="222:59"><expr pos:start="222:25" pos:end="222:59"><call pos:start="222:25" pos:end="222:59"><name pos:start="222:25" pos:end="222:37">aml_name_decl</name><argument_list pos:start="222:38" pos:end="222:59">(<argument pos:start="222:39" pos:end="222:44"><expr pos:start="222:39" pos:end="222:44"><literal type="string" pos:start="222:39" pos:end="222:44">"_STA"</literal></expr></argument>, <argument pos:start="222:47" pos:end="222:58"><expr pos:start="222:47" pos:end="222:58"><call pos:start="222:47" pos:end="222:58"><name pos:start="222:47" pos:end="222:53">aml_int</name><argument_list pos:start="222:54" pos:end="222:58">(<argument pos:start="222:55" pos:end="222:57"><expr pos:start="222:55" pos:end="222:57"><literal type="number" pos:start="222:55" pos:end="222:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="223:9" pos:end="223:38"><expr pos:start="223:9" pos:end="223:37"><name pos:start="223:9" pos:end="223:11">crs</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:37"><name pos:start="223:15" pos:end="223:35">aml_resource_template</name><argument_list pos:start="223:36" pos:end="223:37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="224:9" pos:end="226:10"><expr pos:start="224:9" pos:end="226:9"><call pos:start="224:9" pos:end="226:9"><name pos:start="224:9" pos:end="224:18">aml_append</name><argument_list pos:start="224:19" pos:end="226:9">(<argument pos:start="224:20" pos:end="224:22"><expr pos:start="224:20" pos:end="224:22"><name pos:start="224:20" pos:end="224:22">crs</name></expr></argument>,
            <argument pos:start="225:13" pos:end="225:79"><expr pos:start="225:13" pos:end="225:79"><call pos:start="225:13" pos:end="225:79"><name pos:start="225:13" pos:end="225:18">aml_io</name><argument_list pos:start="225:19" pos:end="225:79">(<argument pos:start="225:20" pos:end="225:31"><expr pos:start="225:20" pos:end="225:31"><name pos:start="225:20" pos:end="225:31">AML_DECODE16</name></expr></argument>, <argument pos:start="225:34" pos:end="225:47"><expr pos:start="225:34" pos:end="225:47"><name pos:start="225:34" pos:end="225:47">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="225:50" pos:end="225:63"><expr pos:start="225:50" pos:end="225:63"><name pos:start="225:50" pos:end="225:63">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="225:66" pos:end="225:69"><expr pos:start="225:66" pos:end="225:69"><literal type="number" pos:start="225:66" pos:end="225:69">0x01</literal></expr></argument>, <argument pos:start="225:72" pos:end="225:78"><expr pos:start="225:72" pos:end="225:78"><name pos:start="225:72" pos:end="225:78">io_size</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="227:9" pos:end="227:52"><expr pos:start="227:9" pos:end="227:51"><call pos:start="227:9" pos:end="227:51"><name pos:start="227:9" pos:end="227:18">aml_append</name><argument_list pos:start="227:19" pos:end="227:51">(<argument pos:start="227:20" pos:end="227:22"><expr pos:start="227:20" pos:end="227:22"><name pos:start="227:20" pos:end="227:22">dev</name></expr></argument>, <argument pos:start="227:25" pos:end="227:50"><expr pos:start="227:25" pos:end="227:50"><call pos:start="227:25" pos:end="227:50"><name pos:start="227:25" pos:end="227:37">aml_name_decl</name><argument_list pos:start="227:38" pos:end="227:50">(<argument pos:start="227:39" pos:end="227:44"><expr pos:start="227:39" pos:end="227:44"><literal type="string" pos:start="227:39" pos:end="227:44">"_CRS"</literal></expr></argument>, <argument pos:start="227:47" pos:end="227:49"><expr pos:start="227:47" pos:end="227:49"><name pos:start="227:47" pos:end="227:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="228:9" pos:end="228:31"><expr pos:start="228:9" pos:end="228:30"><call pos:start="228:9" pos:end="228:30"><name pos:start="228:9" pos:end="228:18">aml_append</name><argument_list pos:start="228:19" pos:end="228:30">(<argument pos:start="228:20" pos:end="228:24"><expr pos:start="228:20" pos:end="228:24"><name pos:start="228:20" pos:end="228:24">scope</name></expr></argument>, <argument pos:start="228:27" pos:end="228:29"><expr pos:start="228:27" pos:end="228:29"><name pos:start="228:27" pos:end="228:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="229:9" pos:end="229:32"><expr pos:start="229:9" pos:end="229:31"><call pos:start="229:9" pos:end="229:31"><name pos:start="229:9" pos:end="229:18">aml_append</name><argument_list pos:start="229:19" pos:end="229:31">(<argument pos:start="229:20" pos:end="229:23"><expr pos:start="229:20" pos:end="229:23"><name pos:start="229:20" pos:end="229:23">dsdt</name></expr></argument>, <argument pos:start="229:26" pos:end="229:30"><expr pos:start="229:26" pos:end="229:30"><name pos:start="229:26" pos:end="229:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="230:5" pos:end="299:25"><if pos:start="230:5" pos:end="299:25">if <condition pos:start="230:8" pos:end="230:31">(<expr pos:start="230:9" pos:end="230:30"><name pos:start="230:9" pos:end="230:30"><name pos:start="230:9" pos:end="230:12">misc</name><operator pos:start="230:13" pos:end="230:14">-&gt;</operator><name pos:start="230:15" pos:end="230:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="230:33" pos:end="299:25">{<block_content pos:start="231:9" pos:end="299:25">
        <expr_stmt pos:start="231:9" pos:end="231:44"><expr pos:start="231:9" pos:end="231:43"><name pos:start="231:9" pos:end="231:13">scope</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <call pos:start="231:17" pos:end="231:43"><name pos:start="231:17" pos:end="231:25">aml_scope</name><argument_list pos:start="231:26" pos:end="231:43">(<argument pos:start="231:27" pos:end="231:42"><expr pos:start="231:27" pos:end="231:42"><literal type="string" pos:start="231:27" pos:end="231:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="232:9" pos:end="232:32"><expr pos:start="232:9" pos:end="232:31"><name pos:start="232:9" pos:end="232:11">dev</name> <operator pos:start="232:13" pos:end="232:13">=</operator> <call pos:start="232:15" pos:end="232:31"><name pos:start="232:15" pos:end="232:24">aml_device</name><argument_list pos:start="232:25" pos:end="232:31">(<argument pos:start="232:26" pos:end="232:30"><expr pos:start="232:26" pos:end="232:30"><literal type="string" pos:start="232:26" pos:end="232:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="233:9" pos:end="233:70"><expr pos:start="233:9" pos:end="233:69"><call pos:start="233:9" pos:end="233:69"><name pos:start="233:9" pos:end="233:18">aml_append</name><argument_list pos:start="233:19" pos:end="233:69">(<argument pos:start="233:20" pos:end="233:22"><expr pos:start="233:20" pos:end="233:22"><name pos:start="233:20" pos:end="233:22">dev</name></expr></argument>, <argument pos:start="233:25" pos:end="233:68"><expr pos:start="233:25" pos:end="233:68"><call pos:start="233:25" pos:end="233:68"><name pos:start="233:25" pos:end="233:37">aml_name_decl</name><argument_list pos:start="233:38" pos:end="233:68">(<argument pos:start="233:39" pos:end="233:44"><expr pos:start="233:39" pos:end="233:44"><literal type="string" pos:start="233:39" pos:end="233:44">"_HID"</literal></expr></argument>, <argument pos:start="233:47" pos:end="233:67"><expr pos:start="233:47" pos:end="233:67"><call pos:start="233:47" pos:end="233:67"><name pos:start="233:47" pos:end="233:56">aml_eisaid</name><argument_list pos:start="233:57" pos:end="233:67">(<argument pos:start="233:58" pos:end="233:66"><expr pos:start="233:58" pos:end="233:66"><literal type="string" pos:start="233:58" pos:end="233:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="234:9" pos:end="234:68">/* device present, functioning, decoding, not shown in UI */</comment>
        <expr_stmt pos:start="235:9" pos:end="235:61"><expr pos:start="235:9" pos:end="235:60"><call pos:start="235:9" pos:end="235:60"><name pos:start="235:9" pos:end="235:18">aml_append</name><argument_list pos:start="235:19" pos:end="235:60">(<argument pos:start="235:20" pos:end="235:22"><expr pos:start="235:20" pos:end="235:22"><name pos:start="235:20" pos:end="235:22">dev</name></expr></argument>, <argument pos:start="235:25" pos:end="235:59"><expr pos:start="235:25" pos:end="235:59"><call pos:start="235:25" pos:end="235:59"><name pos:start="235:25" pos:end="235:37">aml_name_decl</name><argument_list pos:start="235:38" pos:end="235:59">(<argument pos:start="235:39" pos:end="235:44"><expr pos:start="235:39" pos:end="235:44"><literal type="string" pos:start="235:39" pos:end="235:44">"_STA"</literal></expr></argument>, <argument pos:start="235:47" pos:end="235:58"><expr pos:start="235:47" pos:end="235:58"><call pos:start="235:47" pos:end="235:58"><name pos:start="235:47" pos:end="235:53">aml_int</name><argument_list pos:start="235:54" pos:end="235:58">(<argument pos:start="235:55" pos:end="235:57"><expr pos:start="235:55" pos:end="235:57"><literal type="number" pos:start="235:55" pos:end="235:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="236:9" pos:end="236:38"><expr pos:start="236:9" pos:end="236:37"><name pos:start="236:9" pos:end="236:11">crs</name> <operator pos:start="236:13" pos:end="236:13">=</operator> <call pos:start="236:15" pos:end="236:37"><name pos:start="236:15" pos:end="236:35">aml_resource_template</name><argument_list pos:start="236:36" pos:end="236:37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="237:9" pos:end="240:10"><expr pos:start="237:9" pos:end="240:9"><call pos:start="237:9" pos:end="240:9"><name pos:start="237:9" pos:end="237:18">aml_append</name><argument_list pos:start="237:19" pos:end="240:9">(<argument pos:start="237:20" pos:end="237:22"><expr pos:start="237:20" pos:end="237:22"><name pos:start="237:20" pos:end="237:22">crs</name></expr></argument>,
            <argument pos:start="238:13" pos:end="239:50"><expr pos:start="238:13" pos:end="239:50"><call pos:start="238:13" pos:end="239:50"><name pos:start="238:13" pos:end="238:18">aml_io</name><argument_list pos:start="238:19" pos:end="239:50">(<argument pos:start="238:20" pos:end="238:31"><expr pos:start="238:20" pos:end="238:31"><name pos:start="238:20" pos:end="238:31">AML_DECODE16</name></expr></argument>, <argument pos:start="238:34" pos:end="238:55"><expr pos:start="238:34" pos:end="238:55"><name pos:start="238:34" pos:end="238:55"><name pos:start="238:34" pos:end="238:37">misc</name><operator pos:start="238:38" pos:end="238:39">-&gt;</operator><name pos:start="238:40" pos:end="238:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="238:58" pos:end="238:79"><expr pos:start="238:58" pos:end="238:79"><name pos:start="238:58" pos:end="238:79"><name pos:start="238:58" pos:end="238:61">misc</name><operator pos:start="238:62" pos:end="238:63">-&gt;</operator><name pos:start="238:64" pos:end="238:79">applesmc_io_base</name></name></expr></argument>,
                   <argument pos:start="239:20" pos:end="239:23"><expr pos:start="239:20" pos:end="239:23"><literal type="number" pos:start="239:20" pos:end="239:23">0x01</literal></expr></argument>, <argument pos:start="239:26" pos:end="239:49"><expr pos:start="239:26" pos:end="239:49"><name pos:start="239:26" pos:end="239:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="241:9" pos:end="241:45"><expr pos:start="241:9" pos:end="241:44"><call pos:start="241:9" pos:end="241:44"><name pos:start="241:9" pos:end="241:18">aml_append</name><argument_list pos:start="241:19" pos:end="241:44">(<argument pos:start="241:20" pos:end="241:22"><expr pos:start="241:20" pos:end="241:22"><name pos:start="241:20" pos:end="241:22">crs</name></expr></argument>, <argument pos:start="241:25" pos:end="241:43"><expr pos:start="241:25" pos:end="241:43"><call pos:start="241:25" pos:end="241:43"><name pos:start="241:25" pos:end="241:40">aml_irq_no_flags</name><argument_list pos:start="241:41" pos:end="241:43">(<argument pos:start="241:42" pos:end="241:42"><expr pos:start="241:42" pos:end="241:42"><literal type="number" pos:start="241:42" pos:end="241:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="242:9" pos:end="242:52"><expr pos:start="242:9" pos:end="242:51"><call pos:start="242:9" pos:end="242:51"><name pos:start="242:9" pos:end="242:18">aml_append</name><argument_list pos:start="242:19" pos:end="242:51">(<argument pos:start="242:20" pos:end="242:22"><expr pos:start="242:20" pos:end="242:22"><name pos:start="242:20" pos:end="242:22">dev</name></expr></argument>, <argument pos:start="242:25" pos:end="242:50"><expr pos:start="242:25" pos:end="242:50"><call pos:start="242:25" pos:end="242:50"><name pos:start="242:25" pos:end="242:37">aml_name_decl</name><argument_list pos:start="242:38" pos:end="242:50">(<argument pos:start="242:39" pos:end="242:44"><expr pos:start="242:39" pos:end="242:44"><literal type="string" pos:start="242:39" pos:end="242:44">"_CRS"</literal></expr></argument>, <argument pos:start="242:47" pos:end="242:49"><expr pos:start="242:47" pos:end="242:49"><name pos:start="242:47" pos:end="242:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="243:9" pos:end="243:31"><expr pos:start="243:9" pos:end="243:30"><call pos:start="243:9" pos:end="243:30"><name pos:start="243:9" pos:end="243:18">aml_append</name><argument_list pos:start="243:19" pos:end="243:30">(<argument pos:start="243:20" pos:end="243:24"><expr pos:start="243:20" pos:end="243:24"><name pos:start="243:20" pos:end="243:24">scope</name></expr></argument>, <argument pos:start="243:27" pos:end="243:29"><expr pos:start="243:27" pos:end="243:29"><name pos:start="243:27" pos:end="243:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="244:9" pos:end="244:32"><expr pos:start="244:9" pos:end="244:31"><call pos:start="244:9" pos:end="244:31"><name pos:start="244:9" pos:end="244:18">aml_append</name><argument_list pos:start="244:19" pos:end="244:31">(<argument pos:start="244:20" pos:end="244:23"><expr pos:start="244:20" pos:end="244:23"><name pos:start="244:20" pos:end="244:23">dsdt</name></expr></argument>, <argument pos:start="244:26" pos:end="244:30"><expr pos:start="244:26" pos:end="244:30"><name pos:start="244:26" pos:end="244:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="245:5" pos:end="299:25"><if pos:start="245:5" pos:end="299:25">if <condition pos:start="245:8" pos:end="245:27">(<expr pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:12">misc</name><operator pos:start="245:13" pos:end="245:14">-&gt;</operator><name pos:start="245:15" pos:end="245:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="245:29" pos:end="299:25">{<block_content pos:start="246:9" pos:end="299:25">
        <expr_stmt pos:start="246:9" pos:end="246:44"><expr pos:start="246:9" pos:end="246:43"><name pos:start="246:9" pos:end="246:13">scope</name> <operator pos:start="246:15" pos:end="246:15">=</operator> <call pos:start="246:17" pos:end="246:43"><name pos:start="246:17" pos:end="246:25">aml_scope</name><argument_list pos:start="246:26" pos:end="246:43">(<argument pos:start="246:27" pos:end="246:42"><expr pos:start="246:27" pos:end="246:42"><literal type="string" pos:start="246:27" pos:end="246:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="247:9" pos:end="247:33"><expr pos:start="247:9" pos:end="247:32"><name pos:start="247:9" pos:end="247:11">dev</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <call pos:start="247:15" pos:end="247:32"><name pos:start="247:15" pos:end="247:24">aml_device</name><argument_list pos:start="247:25" pos:end="247:32">(<argument pos:start="247:26" pos:end="247:31"><expr pos:start="247:26" pos:end="247:31"><literal type="string" pos:start="247:26" pos:end="247:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="248:9" pos:end="248:71"><expr pos:start="248:9" pos:end="248:70"><call pos:start="248:9" pos:end="248:70"><name pos:start="248:9" pos:end="248:18">aml_append</name><argument_list pos:start="248:19" pos:end="248:70">(<argument pos:start="248:20" pos:end="248:22"><expr pos:start="248:20" pos:end="248:22"><name pos:start="248:20" pos:end="248:22">dev</name></expr></argument>, <argument pos:start="248:25" pos:end="248:69"><expr pos:start="248:25" pos:end="248:69"><call pos:start="248:25" pos:end="248:69"><name pos:start="248:25" pos:end="248:37">aml_name_decl</name><argument_list pos:start="248:38" pos:end="248:69">(<argument pos:start="248:39" pos:end="248:44"><expr pos:start="248:39" pos:end="248:44"><literal type="string" pos:start="248:39" pos:end="248:44">"_HID"</literal></expr></argument>, <argument pos:start="248:47" pos:end="248:68"><expr pos:start="248:47" pos:end="248:68"><call pos:start="248:47" pos:end="248:68"><name pos:start="248:47" pos:end="248:56">aml_string</name><argument_list pos:start="248:57" pos:end="248:68">(<argument pos:start="248:58" pos:end="248:67"><expr pos:start="248:58" pos:end="248:67"><literal type="string" pos:start="248:58" pos:end="248:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="249:9" pos:end="249:38"><expr pos:start="249:9" pos:end="249:37"><name pos:start="249:9" pos:end="249:11">crs</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:37"><name pos:start="249:15" pos:end="249:35">aml_resource_template</name><argument_list pos:start="249:36" pos:end="249:37">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="250:9" pos:end="252:10"><expr pos:start="250:9" pos:end="252:9"><call pos:start="250:9" pos:end="252:9"><name pos:start="250:9" pos:end="250:18">aml_append</name><argument_list pos:start="250:19" pos:end="252:9">(<argument pos:start="250:20" pos:end="250:22"><expr pos:start="250:20" pos:end="250:22"><name pos:start="250:20" pos:end="250:22">crs</name></expr></argument>,
            <argument pos:start="251:13" pos:end="251:78"><expr pos:start="251:13" pos:end="251:78"><call pos:start="251:13" pos:end="251:78"><name pos:start="251:13" pos:end="251:18">aml_io</name><argument_list pos:start="251:19" pos:end="251:78">(<argument pos:start="251:20" pos:end="251:31"><expr pos:start="251:20" pos:end="251:31"><name pos:start="251:20" pos:end="251:31">AML_DECODE16</name></expr></argument>, <argument pos:start="251:34" pos:end="251:51"><expr pos:start="251:34" pos:end="251:51"><name pos:start="251:34" pos:end="251:51"><name pos:start="251:34" pos:end="251:37">misc</name><operator pos:start="251:38" pos:end="251:39">-&gt;</operator><name pos:start="251:40" pos:end="251:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="251:54" pos:end="251:71"><expr pos:start="251:54" pos:end="251:71"><name pos:start="251:54" pos:end="251:71"><name pos:start="251:54" pos:end="251:57">misc</name><operator pos:start="251:58" pos:end="251:59">-&gt;</operator><name pos:start="251:60" pos:end="251:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="251:74" pos:end="251:74"><expr pos:start="251:74" pos:end="251:74"><literal type="number" pos:start="251:74" pos:end="251:74">1</literal></expr></argument>, <argument pos:start="251:77" pos:end="251:77"><expr pos:start="251:77" pos:end="251:77"><literal type="number" pos:start="251:77" pos:end="251:77">1</literal></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="253:9" pos:end="253:52"><expr pos:start="253:9" pos:end="253:51"><call pos:start="253:9" pos:end="253:51"><name pos:start="253:9" pos:end="253:18">aml_append</name><argument_list pos:start="253:19" pos:end="253:51">(<argument pos:start="253:20" pos:end="253:22"><expr pos:start="253:20" pos:end="253:22"><name pos:start="253:20" pos:end="253:22">dev</name></expr></argument>, <argument pos:start="253:25" pos:end="253:50"><expr pos:start="253:25" pos:end="253:50"><call pos:start="253:25" pos:end="253:50"><name pos:start="253:25" pos:end="253:37">aml_name_decl</name><argument_list pos:start="253:38" pos:end="253:50">(<argument pos:start="253:39" pos:end="253:44"><expr pos:start="253:39" pos:end="253:44"><literal type="string" pos:start="253:39" pos:end="253:44">"_CRS"</literal></expr></argument>, <argument pos:start="253:47" pos:end="253:49"><expr pos:start="253:47" pos:end="253:49"><name pos:start="253:47" pos:end="253:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="254:9" pos:end="255:79"><expr pos:start="254:9" pos:end="255:78"><call pos:start="254:9" pos:end="255:78"><name pos:start="254:9" pos:end="254:18">aml_append</name><argument_list pos:start="254:19" pos:end="255:78">(<argument pos:start="254:20" pos:end="254:22"><expr pos:start="254:20" pos:end="254:22"><name pos:start="254:20" pos:end="254:22">dev</name></expr></argument>, <argument pos:start="254:25" pos:end="255:77"><expr pos:start="254:25" pos:end="255:77"><call pos:start="254:25" pos:end="255:77"><name pos:start="254:25" pos:end="254:44">aml_operation_region</name><argument_list pos:start="254:45" pos:end="255:77">(<argument pos:start="254:46" pos:end="254:51"><expr pos:start="254:46" pos:end="254:51"><literal type="string" pos:start="254:46" pos:end="254:51">"PEOR"</literal></expr></argument>, <argument pos:start="254:54" pos:end="254:66"><expr pos:start="254:54" pos:end="254:66"><name pos:start="254:54" pos:end="254:66">AML_SYSTEM_IO</name></expr></argument>,
                                              <argument pos:start="255:47" pos:end="255:73"><expr pos:start="255:47" pos:end="255:73"><call pos:start="255:47" pos:end="255:73"><name pos:start="255:47" pos:end="255:53">aml_int</name><argument_list pos:start="255:54" pos:end="255:73">(<argument pos:start="255:55" pos:end="255:72"><expr pos:start="255:55" pos:end="255:72"><name pos:start="255:55" pos:end="255:72"><name pos:start="255:55" pos:end="255:58">misc</name><operator pos:start="255:59" pos:end="255:60">-&gt;</operator><name pos:start="255:61" pos:end="255:72">pvpanic_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="255:76" pos:end="255:76"><expr pos:start="255:76" pos:end="255:76"><literal type="number" pos:start="255:76" pos:end="255:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="256:9" pos:end="256:74"><expr pos:start="256:9" pos:end="256:73"><name pos:start="256:9" pos:end="256:13">field</name> <operator pos:start="256:15" pos:end="256:15">=</operator> <call pos:start="256:17" pos:end="256:73"><name pos:start="256:17" pos:end="256:25">aml_field</name><argument_list pos:start="256:26" pos:end="256:73">(<argument pos:start="256:27" pos:end="256:32"><expr pos:start="256:27" pos:end="256:32"><literal type="string" pos:start="256:27" pos:end="256:32">"PEOR"</literal></expr></argument>, <argument pos:start="256:35" pos:end="256:46"><expr pos:start="256:35" pos:end="256:46"><name pos:start="256:35" pos:end="256:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="256:49" pos:end="256:58"><expr pos:start="256:49" pos:end="256:58"><name pos:start="256:49" pos:end="256:58">AML_NOLOCK</name></expr></argument>, <argument pos:start="256:61" pos:end="256:72"><expr pos:start="256:61" pos:end="256:72"><name pos:start="256:61" pos:end="256:72">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="257:9" pos:end="257:54"><expr pos:start="257:9" pos:end="257:53"><call pos:start="257:9" pos:end="257:53"><name pos:start="257:9" pos:end="257:18">aml_append</name><argument_list pos:start="257:19" pos:end="257:53">(<argument pos:start="257:20" pos:end="257:24"><expr pos:start="257:20" pos:end="257:24"><name pos:start="257:20" pos:end="257:24">field</name></expr></argument>, <argument pos:start="257:27" pos:end="257:52"><expr pos:start="257:27" pos:end="257:52"><call pos:start="257:27" pos:end="257:52"><name pos:start="257:27" pos:end="257:41">aml_named_field</name><argument_list pos:start="257:42" pos:end="257:52">(<argument pos:start="257:43" pos:end="257:48"><expr pos:start="257:43" pos:end="257:48"><literal type="string" pos:start="257:43" pos:end="257:48">"PEPT"</literal></expr></argument>, <argument pos:start="257:51" pos:end="257:51"><expr pos:start="257:51" pos:end="257:51"><literal type="number" pos:start="257:51" pos:end="257:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="258:9" pos:end="258:31"><expr pos:start="258:9" pos:end="258:30"><call pos:start="258:9" pos:end="258:30"><name pos:start="258:9" pos:end="258:18">aml_append</name><argument_list pos:start="258:19" pos:end="258:30">(<argument pos:start="258:20" pos:end="258:22"><expr pos:start="258:20" pos:end="258:22"><name pos:start="258:20" pos:end="258:22">dev</name></expr></argument>, <argument pos:start="258:25" pos:end="258:29"><expr pos:start="258:25" pos:end="258:29"><name pos:start="258:25" pos:end="258:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="259:9" pos:end="259:64">/* device present, functioning, decoding, shown in UI */</comment>
        <expr_stmt pos:start="260:9" pos:end="260:61"><expr pos:start="260:9" pos:end="260:60"><call pos:start="260:9" pos:end="260:60"><name pos:start="260:9" pos:end="260:18">aml_append</name><argument_list pos:start="260:19" pos:end="260:60">(<argument pos:start="260:20" pos:end="260:22"><expr pos:start="260:20" pos:end="260:22"><name pos:start="260:20" pos:end="260:22">dev</name></expr></argument>, <argument pos:start="260:25" pos:end="260:59"><expr pos:start="260:25" pos:end="260:59"><call pos:start="260:25" pos:end="260:59"><name pos:start="260:25" pos:end="260:37">aml_name_decl</name><argument_list pos:start="260:38" pos:end="260:59">(<argument pos:start="260:39" pos:end="260:44"><expr pos:start="260:39" pos:end="260:44"><literal type="string" pos:start="260:39" pos:end="260:44">"_STA"</literal></expr></argument>, <argument pos:start="260:47" pos:end="260:58"><expr pos:start="260:47" pos:end="260:58"><call pos:start="260:47" pos:end="260:58"><name pos:start="260:47" pos:end="260:53">aml_int</name><argument_list pos:start="260:54" pos:end="260:58">(<argument pos:start="260:55" pos:end="260:57"><expr pos:start="260:55" pos:end="260:57"><literal type="number" pos:start="260:55" pos:end="260:57">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="261:9" pos:end="261:58"><expr pos:start="261:9" pos:end="261:57"><name pos:start="261:9" pos:end="261:14">method</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <call pos:start="261:18" pos:end="261:57"><name pos:start="261:18" pos:end="261:27">aml_method</name><argument_list pos:start="261:28" pos:end="261:57">(<argument pos:start="261:29" pos:end="261:34"><expr pos:start="261:29" pos:end="261:34"><literal type="string" pos:start="261:29" pos:end="261:34">"RDPT"</literal></expr></argument>, <argument pos:start="261:37" pos:end="261:37"><expr pos:start="261:37" pos:end="261:37"><literal type="number" pos:start="261:37" pos:end="261:37">0</literal></expr></argument>, <argument pos:start="261:40" pos:end="261:56"><expr pos:start="261:40" pos:end="261:56"><name pos:start="261:40" pos:end="261:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="262:9" pos:end="262:70"><expr pos:start="262:9" pos:end="262:69"><call pos:start="262:9" pos:end="262:69"><name pos:start="262:9" pos:end="262:18">aml_append</name><argument_list pos:start="262:19" pos:end="262:69">(<argument pos:start="262:20" pos:end="262:25"><expr pos:start="262:20" pos:end="262:25"><name pos:start="262:20" pos:end="262:25">method</name></expr></argument>, <argument pos:start="262:28" pos:end="262:68"><expr pos:start="262:28" pos:end="262:68"><call pos:start="262:28" pos:end="262:68"><name pos:start="262:28" pos:end="262:36">aml_store</name><argument_list pos:start="262:37" pos:end="262:68">(<argument pos:start="262:38" pos:end="262:53"><expr pos:start="262:38" pos:end="262:53"><call pos:start="262:38" pos:end="262:53"><name pos:start="262:38" pos:end="262:45">aml_name</name><argument_list pos:start="262:46" pos:end="262:53">(<argument pos:start="262:47" pos:end="262:52"><expr pos:start="262:47" pos:end="262:52"><literal type="string" pos:start="262:47" pos:end="262:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="262:56" pos:end="262:67"><expr pos:start="262:56" pos:end="262:67"><call pos:start="262:56" pos:end="262:67"><name pos:start="262:56" pos:end="262:64">aml_local</name><argument_list pos:start="262:65" pos:end="262:67">(<argument pos:start="262:66" pos:end="262:66"><expr pos:start="262:66" pos:end="262:66"><literal type="number" pos:start="262:66" pos:end="262:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="263:9" pos:end="263:53"><expr pos:start="263:9" pos:end="263:52"><call pos:start="263:9" pos:end="263:52"><name pos:start="263:9" pos:end="263:18">aml_append</name><argument_list pos:start="263:19" pos:end="263:52">(<argument pos:start="263:20" pos:end="263:25"><expr pos:start="263:20" pos:end="263:25"><name pos:start="263:20" pos:end="263:25">method</name></expr></argument>, <argument pos:start="263:28" pos:end="263:51"><expr pos:start="263:28" pos:end="263:51"><call pos:start="263:28" pos:end="263:51"><name pos:start="263:28" pos:end="263:37">aml_return</name><argument_list pos:start="263:38" pos:end="263:51">(<argument pos:start="263:39" pos:end="263:50"><expr pos:start="263:39" pos:end="263:50"><call pos:start="263:39" pos:end="263:50"><name pos:start="263:39" pos:end="263:47">aml_local</name><argument_list pos:start="263:48" pos:end="263:50">(<argument pos:start="263:49" pos:end="263:49"><expr pos:start="263:49" pos:end="263:49"><literal type="number" pos:start="263:49" pos:end="263:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="264:9" pos:end="264:32"><expr pos:start="264:9" pos:end="264:31"><call pos:start="264:9" pos:end="264:31"><name pos:start="264:9" pos:end="264:18">aml_append</name><argument_list pos:start="264:19" pos:end="264:31">(<argument pos:start="264:20" pos:end="264:22"><expr pos:start="264:20" pos:end="264:22"><name pos:start="264:20" pos:end="264:22">dev</name></expr></argument>, <argument pos:start="264:25" pos:end="264:30"><expr pos:start="264:25" pos:end="264:30"><name pos:start="264:25" pos:end="264:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="265:9" pos:end="265:58"><expr pos:start="265:9" pos:end="265:57"><name pos:start="265:9" pos:end="265:14">method</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <call pos:start="265:18" pos:end="265:57"><name pos:start="265:18" pos:end="265:27">aml_method</name><argument_list pos:start="265:28" pos:end="265:57">(<argument pos:start="265:29" pos:end="265:34"><expr pos:start="265:29" pos:end="265:34"><literal type="string" pos:start="265:29" pos:end="265:34">"WRPT"</literal></expr></argument>, <argument pos:start="265:37" pos:end="265:37"><expr pos:start="265:37" pos:end="265:37"><literal type="number" pos:start="265:37" pos:end="265:37">1</literal></expr></argument>, <argument pos:start="265:40" pos:end="265:56"><expr pos:start="265:40" pos:end="265:56"><name pos:start="265:40" pos:end="265:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="266:9" pos:end="266:68"><expr pos:start="266:9" pos:end="266:67"><call pos:start="266:9" pos:end="266:67"><name pos:start="266:9" pos:end="266:18">aml_append</name><argument_list pos:start="266:19" pos:end="266:67">(<argument pos:start="266:20" pos:end="266:25"><expr pos:start="266:20" pos:end="266:25"><name pos:start="266:20" pos:end="266:25">method</name></expr></argument>, <argument pos:start="266:28" pos:end="266:66"><expr pos:start="266:28" pos:end="266:66"><call pos:start="266:28" pos:end="266:66"><name pos:start="266:28" pos:end="266:36">aml_store</name><argument_list pos:start="266:37" pos:end="266:66">(<argument pos:start="266:38" pos:end="266:47"><expr pos:start="266:38" pos:end="266:47"><call pos:start="266:38" pos:end="266:47"><name pos:start="266:38" pos:end="266:44">aml_arg</name><argument_list pos:start="266:45" pos:end="266:47">(<argument pos:start="266:46" pos:end="266:46"><expr pos:start="266:46" pos:end="266:46"><literal type="number" pos:start="266:46" pos:end="266:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="266:50" pos:end="266:65"><expr pos:start="266:50" pos:end="266:65"><call pos:start="266:50" pos:end="266:65"><name pos:start="266:50" pos:end="266:57">aml_name</name><argument_list pos:start="266:58" pos:end="266:65">(<argument pos:start="266:59" pos:end="266:64"><expr pos:start="266:59" pos:end="266:64"><literal type="string" pos:start="266:59" pos:end="266:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="267:9" pos:end="267:32"><expr pos:start="267:9" pos:end="267:31"><call pos:start="267:9" pos:end="267:31"><name pos:start="267:9" pos:end="267:18">aml_append</name><argument_list pos:start="267:19" pos:end="267:31">(<argument pos:start="267:20" pos:end="267:22"><expr pos:start="267:20" pos:end="267:22"><name pos:start="267:20" pos:end="267:22">dev</name></expr></argument>, <argument pos:start="267:25" pos:end="267:30"><expr pos:start="267:25" pos:end="267:30"><name pos:start="267:25" pos:end="267:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="268:9" pos:end="268:31"><expr pos:start="268:9" pos:end="268:30"><call pos:start="268:9" pos:end="268:30"><name pos:start="268:9" pos:end="268:18">aml_append</name><argument_list pos:start="268:19" pos:end="268:30">(<argument pos:start="268:20" pos:end="268:24"><expr pos:start="268:20" pos:end="268:24"><name pos:start="268:20" pos:end="268:24">scope</name></expr></argument>, <argument pos:start="268:27" pos:end="268:29"><expr pos:start="268:27" pos:end="268:29"><name pos:start="268:27" pos:end="268:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="269:9" pos:end="269:32"><expr pos:start="269:9" pos:end="269:31"><call pos:start="269:9" pos:end="269:31"><name pos:start="269:9" pos:end="269:18">aml_append</name><argument_list pos:start="269:19" pos:end="269:31">(<argument pos:start="269:20" pos:end="269:23"><expr pos:start="269:20" pos:end="269:23"><name pos:start="269:20" pos:end="269:23">dsdt</name></expr></argument>, <argument pos:start="269:26" pos:end="269:30"><expr pos:start="269:26" pos:end="269:30"><name pos:start="269:26" pos:end="269:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="270:5" pos:end="270:34"><expr pos:start="270:5" pos:end="270:33"><name pos:start="270:5" pos:end="270:12">sb_scope</name> <operator pos:start="270:14" pos:end="270:14">=</operator> <call pos:start="270:16" pos:end="270:33"><name pos:start="270:16" pos:end="270:24">aml_scope</name><argument_list pos:start="270:25" pos:end="270:33">(<argument pos:start="270:26" pos:end="270:32"><expr pos:start="270:26" pos:end="270:32"><literal type="string" pos:start="270:26" pos:end="270:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block pos:start="271:5" pos:end="299:25">{<block_content pos:start="272:9" pos:end="299:25">
        <expr_stmt pos:start="272:9" pos:end="272:55"><expr pos:start="272:9" pos:end="272:54"><call pos:start="272:9" pos:end="272:54"><name pos:start="272:9" pos:end="272:31">build_processor_devices</name><argument_list pos:start="272:32" pos:end="272:54">(<argument pos:start="272:33" pos:end="272:40"><expr pos:start="272:33" pos:end="272:40"><name pos:start="272:33" pos:end="272:40">sb_scope</name></expr></argument>, <argument pos:start="272:43" pos:end="272:49"><expr pos:start="272:43" pos:end="272:49"><name pos:start="272:43" pos:end="272:49">machine</name></expr></argument>, <argument pos:start="272:52" pos:end="272:53"><expr pos:start="272:52" pos:end="272:53"><name pos:start="272:52" pos:end="272:53">pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="273:9" pos:end="274:48"><expr pos:start="273:9" pos:end="274:47"><call pos:start="273:9" pos:end="274:47"><name pos:start="273:9" pos:end="273:28">build_memory_devices</name><argument_list pos:start="273:29" pos:end="274:47">(<argument pos:start="273:30" pos:end="273:37"><expr pos:start="273:30" pos:end="273:37"><name pos:start="273:30" pos:end="273:37">sb_scope</name></expr></argument>, <argument pos:start="273:40" pos:end="273:45"><expr pos:start="273:40" pos:end="273:45"><name pos:start="273:40" pos:end="273:45">nr_mem</name></expr></argument>, <argument pos:start="273:48" pos:end="273:65"><expr pos:start="273:48" pos:end="273:65"><name pos:start="273:48" pos:end="273:65"><name pos:start="273:48" pos:end="273:49">pm</name><operator pos:start="273:50" pos:end="273:51">-&gt;</operator><name pos:start="273:52" pos:end="273:65">mem_hp_io_base</name></name></expr></argument>,
                             <argument pos:start="274:30" pos:end="274:46"><expr pos:start="274:30" pos:end="274:46"><name pos:start="274:30" pos:end="274:46"><name pos:start="274:30" pos:end="274:31">pm</name><operator pos:start="274:32" pos:end="274:33">-&gt;</operator><name pos:start="274:34" pos:end="274:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block pos:start="275:9" pos:end="299:25">{<block_content pos:start="276:13" pos:end="299:25">
            <decl_stmt pos:start="276:13" pos:end="276:29"><decl pos:start="276:13" pos:end="276:28"><type pos:start="276:13" pos:end="276:20"><name pos:start="276:13" pos:end="276:18">Object</name> <modifier pos:start="276:20" pos:end="276:20">*</modifier></type><name pos:start="276:21" pos:end="276:28">pci_host</name></decl>;</decl_stmt>
            <decl_stmt pos:start="277:13" pos:end="277:31"><decl pos:start="277:13" pos:end="277:30"><type pos:start="277:13" pos:end="277:20"><name pos:start="277:13" pos:end="277:18">PCIBus</name> <modifier pos:start="277:20" pos:end="277:20">*</modifier></type><name pos:start="277:21" pos:end="277:23">bus</name> <init pos:start="277:25" pos:end="277:30">= <expr pos:start="277:27" pos:end="277:30"><name pos:start="277:27" pos:end="277:30">NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="278:13" pos:end="278:48"><expr pos:start="278:13" pos:end="278:47"><name pos:start="278:13" pos:end="278:20">pci_host</name> <operator pos:start="278:22" pos:end="278:22">=</operator> <call pos:start="278:24" pos:end="278:47"><name pos:start="278:24" pos:end="278:45">acpi_get_i386_pci_host</name><argument_list pos:start="278:46" pos:end="278:47">()</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="279:13" pos:end="299:25"><if pos:start="279:13" pos:end="299:25">if <condition pos:start="279:16" pos:end="279:25">(<expr pos:start="279:17" pos:end="279:24"><name pos:start="279:17" pos:end="279:24">pci_host</name></expr>)</condition> <block pos:start="279:27" pos:end="299:25">{<block_content pos:start="280:17" pos:end="299:25">
                <expr_stmt pos:start="280:17" pos:end="280:53"><expr pos:start="280:17" pos:end="280:52"><name pos:start="280:17" pos:end="280:19">bus</name> <operator pos:start="280:21" pos:end="280:21">=</operator> <call pos:start="280:23" pos:end="280:47"><name pos:start="280:23" pos:end="280:37">PCI_HOST_BRIDGE</name><argument_list pos:start="280:38" pos:end="280:47">(<argument pos:start="280:39" pos:end="280:46"><expr pos:start="280:39" pos:end="280:46"><name pos:start="280:39" pos:end="280:46">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="280:48" pos:end="280:49">-&gt;</operator><name pos:start="280:50" pos:end="280:52">bus</name></expr>;</expr_stmt>
            <if_stmt pos:start="281:13" pos:end="299:25"><if pos:start="281:13" pos:end="299:25">if <condition pos:start="281:16" pos:end="281:20">(<expr pos:start="281:17" pos:end="281:19"><name pos:start="281:17" pos:end="281:19">bus</name></expr>)</condition> <block pos:start="281:22" pos:end="299:25">{<block_content pos:start="282:17" pos:end="299:25">
                <decl_stmt pos:start="282:17" pos:end="282:47"><decl pos:start="282:17" pos:end="282:46"><type pos:start="282:17" pos:end="282:21"><name pos:start="282:17" pos:end="282:19">Aml</name> <modifier pos:start="282:21" pos:end="282:21">*</modifier></type><name pos:start="282:22" pos:end="282:26">scope</name> <init pos:start="282:28" pos:end="282:46">= <expr pos:start="282:30" pos:end="282:46"><call pos:start="282:30" pos:end="282:46"><name pos:start="282:30" pos:end="282:38">aml_scope</name><argument_list pos:start="282:39" pos:end="282:46">(<argument pos:start="282:40" pos:end="282:45"><expr pos:start="282:40" pos:end="282:45"><literal type="string" pos:start="282:40" pos:end="282:45">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="block" pos:start="283:17" pos:end="283:77">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>
                <expr_stmt pos:start="284:17" pos:end="284:78"><expr pos:start="284:17" pos:end="284:77"><call pos:start="284:17" pos:end="284:77"><name pos:start="284:17" pos:end="284:44">build_append_pci_bus_devices</name><argument_list pos:start="284:45" pos:end="284:77">(<argument pos:start="284:46" pos:end="284:50"><expr pos:start="284:46" pos:end="284:50"><name pos:start="284:46" pos:end="284:50">scope</name></expr></argument>, <argument pos:start="284:53" pos:end="284:55"><expr pos:start="284:53" pos:end="284:55"><name pos:start="284:53" pos:end="284:55">bus</name></expr></argument>, <argument pos:start="284:58" pos:end="284:76"><expr pos:start="284:58" pos:end="284:76"><name pos:start="284:58" pos:end="284:76"><name pos:start="284:58" pos:end="284:59">pm</name><operator pos:start="284:60" pos:end="284:61">-&gt;</operator><name pos:start="284:62" pos:end="284:76">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="285:21" pos:end="285:48"><expr pos:start="285:21" pos:end="285:47"><name pos:start="285:21" pos:end="285:23">dev</name> <operator pos:start="285:25" pos:end="285:25">=</operator> <call pos:start="285:27" pos:end="285:47"><name pos:start="285:27" pos:end="285:36">aml_device</name><argument_list pos:start="285:37" pos:end="285:47">(<argument pos:start="285:38" pos:end="285:46"><expr pos:start="285:38" pos:end="285:46"><literal type="string" pos:start="285:38" pos:end="285:46">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="286:21" pos:end="286:82"><expr pos:start="286:21" pos:end="286:81"><call pos:start="286:21" pos:end="286:81"><name pos:start="286:21" pos:end="286:30">aml_append</name><argument_list pos:start="286:31" pos:end="286:81">(<argument pos:start="286:32" pos:end="286:34"><expr pos:start="286:32" pos:end="286:34"><name pos:start="286:32" pos:end="286:34">dev</name></expr></argument>, <argument pos:start="286:37" pos:end="286:80"><expr pos:start="286:37" pos:end="286:80"><call pos:start="286:37" pos:end="286:80"><name pos:start="286:37" pos:end="286:49">aml_name_decl</name><argument_list pos:start="286:50" pos:end="286:80">(<argument pos:start="286:51" pos:end="286:56"><expr pos:start="286:51" pos:end="286:56"><literal type="string" pos:start="286:51" pos:end="286:56">"_HID"</literal></expr></argument>, <argument pos:start="286:59" pos:end="286:79"><expr pos:start="286:59" pos:end="286:79"><call pos:start="286:59" pos:end="286:79"><name pos:start="286:59" pos:end="286:68">aml_eisaid</name><argument_list pos:start="286:69" pos:end="286:79">(<argument pos:start="286:70" pos:end="286:78"><expr pos:start="286:70" pos:end="286:78"><literal type="string" pos:start="286:70" pos:end="286:78">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="287:21" pos:end="287:73"><expr pos:start="287:21" pos:end="287:72"><call pos:start="287:21" pos:end="287:72"><name pos:start="287:21" pos:end="287:30">aml_append</name><argument_list pos:start="287:31" pos:end="287:72">(<argument pos:start="287:32" pos:end="287:34"><expr pos:start="287:32" pos:end="287:34"><name pos:start="287:32" pos:end="287:34">dev</name></expr></argument>, <argument pos:start="287:37" pos:end="287:71"><expr pos:start="287:37" pos:end="287:71"><call pos:start="287:37" pos:end="287:71"><name pos:start="287:37" pos:end="287:49">aml_name_decl</name><argument_list pos:start="287:50" pos:end="287:71">(<argument pos:start="287:51" pos:end="287:56"><expr pos:start="287:51" pos:end="287:56"><literal type="string" pos:start="287:51" pos:end="287:56">"_STA"</literal></expr></argument>, <argument pos:start="287:59" pos:end="287:70"><expr pos:start="287:59" pos:end="287:70"><call pos:start="287:59" pos:end="287:70"><name pos:start="287:59" pos:end="287:65">aml_int</name><argument_list pos:start="287:66" pos:end="287:70">(<argument pos:start="287:67" pos:end="287:69"><expr pos:start="287:67" pos:end="287:69"><literal type="number" pos:start="287:67" pos:end="287:69">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="288:21" pos:end="288:50"><expr pos:start="288:21" pos:end="288:49"><name pos:start="288:21" pos:end="288:23">crs</name> <operator pos:start="288:25" pos:end="288:25">=</operator> <call pos:start="288:27" pos:end="288:49"><name pos:start="288:27" pos:end="288:47">aml_resource_template</name><argument_list pos:start="288:48" pos:end="288:49">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="289:21" pos:end="289:67"><expr pos:start="289:21" pos:end="289:66"><call pos:start="289:21" pos:end="289:66"><name pos:start="289:21" pos:end="289:30">aml_append</name><argument_list pos:start="289:31" pos:end="289:66">(<argument pos:start="289:32" pos:end="289:34"><expr pos:start="289:32" pos:end="289:34"><name pos:start="289:32" pos:end="289:34">crs</name></expr></argument>, <argument pos:start="289:37" pos:end="289:65"><expr pos:start="289:37" pos:end="289:65"><call pos:start="289:37" pos:end="289:65"><name pos:start="289:37" pos:end="289:52">aml_irq_no_flags</name><argument_list pos:start="289:53" pos:end="289:65">(<argument pos:start="289:54" pos:end="289:64"><expr pos:start="289:54" pos:end="289:64"><name pos:start="289:54" pos:end="289:64">TPM_TIS_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="290:21" pos:end="290:64"><expr pos:start="290:21" pos:end="290:63"><call pos:start="290:21" pos:end="290:63"><name pos:start="290:21" pos:end="290:30">aml_append</name><argument_list pos:start="290:31" pos:end="290:63">(<argument pos:start="290:32" pos:end="290:34"><expr pos:start="290:32" pos:end="290:34"><name pos:start="290:32" pos:end="290:34">dev</name></expr></argument>, <argument pos:start="290:37" pos:end="290:62"><expr pos:start="290:37" pos:end="290:62"><call pos:start="290:37" pos:end="290:62"><name pos:start="290:37" pos:end="290:49">aml_name_decl</name><argument_list pos:start="290:50" pos:end="290:62">(<argument pos:start="290:51" pos:end="290:56"><expr pos:start="290:51" pos:end="290:56"><literal type="string" pos:start="290:51" pos:end="290:56">"_CRS"</literal></expr></argument>, <argument pos:start="290:59" pos:end="290:61"><expr pos:start="290:59" pos:end="290:61"><name pos:start="290:59" pos:end="290:61">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="291:21" pos:end="291:43"><expr pos:start="291:21" pos:end="291:42"><call pos:start="291:21" pos:end="291:42"><name pos:start="291:21" pos:end="291:30">aml_append</name><argument_list pos:start="291:31" pos:end="291:42">(<argument pos:start="291:32" pos:end="291:36"><expr pos:start="291:32" pos:end="291:36"><name pos:start="291:32" pos:end="291:36">scope</name></expr></argument>, <argument pos:start="291:39" pos:end="291:41"><expr pos:start="291:39" pos:end="291:41"><name pos:start="291:39" pos:end="291:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="292:17" pos:end="292:44"><expr pos:start="292:17" pos:end="292:43"><call pos:start="292:17" pos:end="292:43"><name pos:start="292:17" pos:end="292:26">aml_append</name><argument_list pos:start="292:27" pos:end="292:43">(<argument pos:start="292:28" pos:end="292:35"><expr pos:start="292:28" pos:end="292:35"><name pos:start="292:28" pos:end="292:35">sb_scope</name></expr></argument>, <argument pos:start="292:38" pos:end="292:42"><expr pos:start="292:38" pos:end="292:42"><name pos:start="292:38" pos:end="292:42">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="293:9" pos:end="293:35"><expr pos:start="293:9" pos:end="293:34"><call pos:start="293:9" pos:end="293:34"><name pos:start="293:9" pos:end="293:18">aml_append</name><argument_list pos:start="293:19" pos:end="293:34">(<argument pos:start="293:20" pos:end="293:23"><expr pos:start="293:20" pos:end="293:23"><name pos:start="293:20" pos:end="293:23">dsdt</name></expr></argument>, <argument pos:start="293:26" pos:end="293:33"><expr pos:start="293:26" pos:end="293:33"><name pos:start="293:26" pos:end="293:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="294:5" pos:end="294:69">/* copy AML table into ACPI tables blob and patch header there */</comment>
    <expr_stmt pos:start="295:5" pos:end="295:69"><expr pos:start="295:5" pos:end="295:68"><call pos:start="295:5" pos:end="295:68"><name pos:start="295:5" pos:end="295:23">g_array_append_vals</name><argument_list pos:start="295:24" pos:end="295:68">(<argument pos:start="295:25" pos:end="295:34"><expr pos:start="295:25" pos:end="295:34"><name pos:start="295:25" pos:end="295:34">table_data</name></expr></argument>, <argument pos:start="295:37" pos:end="295:51"><expr pos:start="295:37" pos:end="295:51"><name pos:start="295:37" pos:end="295:51"><name pos:start="295:37" pos:end="295:40">dsdt</name><operator pos:start="295:41" pos:end="295:42">-&gt;</operator><name pos:start="295:43" pos:end="295:45">buf</name><operator pos:start="295:46" pos:end="295:47">-&gt;</operator><name pos:start="295:48" pos:end="295:51">data</name></name></expr></argument>, <argument pos:start="295:54" pos:end="295:67"><expr pos:start="295:54" pos:end="295:67"><name pos:start="295:54" pos:end="295:67"><name pos:start="295:54" pos:end="295:57">dsdt</name><operator pos:start="295:58" pos:end="295:59">-&gt;</operator><name pos:start="295:60" pos:end="295:62">buf</name><operator pos:start="295:63" pos:end="295:64">-&gt;</operator><name pos:start="295:65" pos:end="295:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="296:5" pos:end="298:47"><expr pos:start="296:5" pos:end="298:46"><call pos:start="296:5" pos:end="298:46"><name pos:start="296:5" pos:end="296:16">build_header</name><argument_list pos:start="296:17" pos:end="298:46">(<argument pos:start="296:18" pos:end="296:23"><expr pos:start="296:18" pos:end="296:23"><name pos:start="296:18" pos:end="296:23">linker</name></expr></argument>, <argument pos:start="296:26" pos:end="296:35"><expr pos:start="296:26" pos:end="296:35"><name pos:start="296:26" pos:end="296:35">table_data</name></expr></argument>,
        <argument pos:start="297:9" pos:end="297:69"><expr pos:start="297:9" pos:end="297:69"><operator pos:start="297:9" pos:end="297:9">(</operator><name pos:start="297:10" pos:end="297:13">void</name> <operator pos:start="297:15" pos:end="297:15">*</operator><operator pos:start="297:16" pos:end="297:16">)</operator><operator pos:start="297:17" pos:end="297:17">(</operator><name pos:start="297:18" pos:end="297:33"><name pos:start="297:18" pos:end="297:27">table_data</name><operator pos:start="297:28" pos:end="297:29">-&gt;</operator><name pos:start="297:30" pos:end="297:33">data</name></name> <operator pos:start="297:35" pos:end="297:35">+</operator> <name pos:start="297:37" pos:end="297:51"><name pos:start="297:37" pos:end="297:46">table_data</name><operator pos:start="297:47" pos:end="297:48">-&gt;</operator><name pos:start="297:49" pos:end="297:51">len</name></name> <operator pos:start="297:53" pos:end="297:53">-</operator> <name pos:start="297:55" pos:end="297:68"><name pos:start="297:55" pos:end="297:58">dsdt</name><operator pos:start="297:59" pos:end="297:60">-&gt;</operator><name pos:start="297:61" pos:end="297:63">buf</name><operator pos:start="297:64" pos:end="297:65">-&gt;</operator><name pos:start="297:66" pos:end="297:68">len</name></name><operator pos:start="297:69" pos:end="297:69">)</operator></expr></argument>,
        <argument pos:start="298:9" pos:end="298:14"><expr pos:start="298:9" pos:end="298:14"><literal type="string" pos:start="298:9" pos:end="298:14">"DSDT"</literal></expr></argument>, <argument pos:start="298:17" pos:end="298:30"><expr pos:start="298:17" pos:end="298:30"><name pos:start="298:17" pos:end="298:30"><name pos:start="298:17" pos:end="298:20">dsdt</name><operator pos:start="298:21" pos:end="298:22">-&gt;</operator><name pos:start="298:23" pos:end="298:25">buf</name><operator pos:start="298:26" pos:end="298:27">-&gt;</operator><name pos:start="298:28" pos:end="298:30">len</name></name></expr></argument>, <argument pos:start="298:33" pos:end="298:33"><expr pos:start="298:33" pos:end="298:33"><literal type="number" pos:start="298:33" pos:end="298:33">1</literal></expr></argument>, <argument pos:start="298:36" pos:end="298:39"><expr pos:start="298:36" pos:end="298:39"><name pos:start="298:36" pos:end="298:39">NULL</name></expr></argument>, <argument pos:start="298:42" pos:end="298:45"><expr pos:start="298:42" pos:end="298:45"><name pos:start="298:42" pos:end="298:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="299:5" pos:end="299:25"><expr pos:start="299:5" pos:end="299:24"><call pos:start="299:5" pos:end="299:24"><name pos:start="299:5" pos:end="299:22">free_aml_allocator</name><argument_list pos:start="299:23" pos:end="299:24">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></block_content></block></else></if_stmt></block_content></block></unit>
