<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25457.c" pos:tabs="8"><function pos:start="1:1" pos:end="232:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:33">ls_decode_line</name><parameter_list pos:start="1:34" pos:end="5:65">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:42">JLSState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">state</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><name pos:start="1:52" pos:end="1:69">MJpegDecodeContext</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:72">s</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:38">void</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">last</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:55"><decl pos:start="3:47" pos:end="3:55"><type pos:start="3:47" pos:end="3:55"><name pos:start="3:47" pos:end="3:50">void</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:55">dst</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:66"><decl pos:start="3:58" pos:end="3:66"><type pos:start="3:58" pos:end="3:66"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:66">last2</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:73"><decl pos:start="3:69" pos:end="3:73"><type pos:start="3:69" pos:end="3:73"><name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:73">w</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:44"><decl pos:start="5:35" pos:end="5:44"><type pos:start="5:35" pos:end="5:44"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:44">stride</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:54"><decl pos:start="5:47" pos:end="5:54"><type pos:start="5:47" pos:end="5:54"><name pos:start="5:47" pos:end="5:49">int</name></type> <name pos:start="5:51" pos:end="5:54">comp</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:64"><decl pos:start="5:57" pos:end="5:64"><type pos:start="5:57" pos:end="5:64"><name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:64">bits</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="232:1">{<block_content pos:start="9:5" pos:end="230:5">

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">x</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">Ra</name></decl>, <decl pos:start="11:13" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:14">Rb</name></decl>, <decl pos:start="11:17" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:18">Rc</name></decl>, <decl pos:start="11:21" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:21" pos:end="11:22">Rd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">D0</name></decl>, <decl pos:start="13:13" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:14">D1</name></decl>, <decl pos:start="13:17" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:17" pos:end="13:18">D2</name></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="230:5">while <condition pos:start="17:11" pos:end="17:17">(<expr pos:start="17:12" pos:end="17:16"><name pos:start="17:12" pos:end="17:12">x</name> <operator pos:start="17:14" pos:end="17:14">&lt;</operator> <name pos:start="17:16" pos:end="17:16">w</name></expr>)</condition> <block pos:start="17:19" pos:end="230:5">{<block_content pos:start="19:9" pos:end="228:20">

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">err</name></decl>, <decl pos:start="19:18" pos:end="19:21"><type ref="prev" pos:start="19:9" pos:end="19:11"/><name pos:start="19:18" pos:end="19:21">pred</name></decl>;</decl_stmt>



        <comment type="block" pos:start="23:9" pos:end="23:31">/* compute gradients */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:49"><expr pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:10">Ra</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <ternary pos:start="25:14" pos:end="25:48"><condition pos:start="25:14" pos:end="25:16"><expr pos:start="25:14" pos:end="25:14"><name pos:start="25:14" pos:end="25:14">x</name></expr> ?</condition><then pos:start="25:18" pos:end="25:35"> <expr pos:start="25:18" pos:end="25:35"><call pos:start="25:18" pos:end="25:35"><name pos:start="25:18" pos:end="25:18">R</name><argument_list pos:start="25:19" pos:end="25:35">(<argument pos:start="25:20" pos:end="25:22"><expr pos:start="25:20" pos:end="25:22"><name pos:start="25:20" pos:end="25:22">dst</name></expr></argument>, <argument pos:start="25:25" pos:end="25:34"><expr pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:25">x</name> <operator pos:start="25:27" pos:end="25:27">-</operator> <name pos:start="25:29" pos:end="25:34">stride</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="25:37" pos:end="25:48">: <expr pos:start="25:39" pos:end="25:48"><call pos:start="25:39" pos:end="25:48"><name pos:start="25:39" pos:end="25:39">R</name><argument_list pos:start="25:40" pos:end="25:48">(<argument pos:start="25:41" pos:end="25:44"><expr pos:start="25:41" pos:end="25:44"><name pos:start="25:41" pos:end="25:44">last</name></expr></argument>, <argument pos:start="25:47" pos:end="25:47"><expr pos:start="25:47" pos:end="25:47"><name pos:start="25:47" pos:end="25:47">x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:24"><expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:10">Rb</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:23"><name pos:start="27:14" pos:end="27:14">R</name><argument_list pos:start="27:15" pos:end="27:23">(<argument pos:start="27:16" pos:end="27:19"><expr pos:start="27:16" pos:end="27:19"><name pos:start="27:16" pos:end="27:19">last</name></expr></argument>, <argument pos:start="27:22" pos:end="27:22"><expr pos:start="27:22" pos:end="27:22"><name pos:start="27:22" pos:end="27:22">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:45"><expr pos:start="29:9" pos:end="29:44"><name pos:start="29:9" pos:end="29:10">Rc</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <ternary pos:start="29:14" pos:end="29:44"><condition pos:start="29:14" pos:end="29:16"><expr pos:start="29:14" pos:end="29:14"><name pos:start="29:14" pos:end="29:14">x</name></expr> ?</condition><then pos:start="29:18" pos:end="29:36"> <expr pos:start="29:18" pos:end="29:36"><call pos:start="29:18" pos:end="29:36"><name pos:start="29:18" pos:end="29:18">R</name><argument_list pos:start="29:19" pos:end="29:36">(<argument pos:start="29:20" pos:end="29:23"><expr pos:start="29:20" pos:end="29:23"><name pos:start="29:20" pos:end="29:23">last</name></expr></argument>, <argument pos:start="29:26" pos:end="29:35"><expr pos:start="29:26" pos:end="29:35"><name pos:start="29:26" pos:end="29:26">x</name> <operator pos:start="29:28" pos:end="29:28">-</operator> <name pos:start="29:30" pos:end="29:35">stride</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="29:38" pos:end="29:44">: <expr pos:start="29:40" pos:end="29:44"><name pos:start="29:40" pos:end="29:44">last2</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:66"><expr pos:start="31:9" pos:end="31:65"><name pos:start="31:9" pos:end="31:10">Rd</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <ternary pos:start="31:14" pos:end="31:65"><condition pos:start="31:14" pos:end="31:32"><expr pos:start="31:14" pos:end="31:30"><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:15">x</name> <operator pos:start="31:17" pos:end="31:18">&gt;=</operator> <name pos:start="31:20" pos:end="31:20">w</name> <operator pos:start="31:22" pos:end="31:22">-</operator> <name pos:start="31:24" pos:end="31:29">stride</name><operator pos:start="31:30" pos:end="31:30">)</operator></expr> ?</condition><then pos:start="31:34" pos:end="31:43"> <expr pos:start="31:34" pos:end="31:43"><call pos:start="31:34" pos:end="31:43"><name pos:start="31:34" pos:end="31:34">R</name><argument_list pos:start="31:35" pos:end="31:43">(<argument pos:start="31:36" pos:end="31:39"><expr pos:start="31:36" pos:end="31:39"><name pos:start="31:36" pos:end="31:39">last</name></expr></argument>, <argument pos:start="31:42" pos:end="31:42"><expr pos:start="31:42" pos:end="31:42"><name pos:start="31:42" pos:end="31:42">x</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="31:45" pos:end="31:65">: <expr pos:start="31:47" pos:end="31:65"><call pos:start="31:47" pos:end="31:65"><name pos:start="31:47" pos:end="31:47">R</name><argument_list pos:start="31:48" pos:end="31:65">(<argument pos:start="31:49" pos:end="31:52"><expr pos:start="31:49" pos:end="31:52"><name pos:start="31:49" pos:end="31:52">last</name></expr></argument>, <argument pos:start="31:55" pos:end="31:64"><expr pos:start="31:55" pos:end="31:64"><name pos:start="31:55" pos:end="31:55">x</name> <operator pos:start="31:57" pos:end="31:57">+</operator> <name pos:start="31:59" pos:end="31:64">stride</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:10">D0</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:15">Rd</name> <operator pos:start="33:17" pos:end="33:17">-</operator> <name pos:start="33:19" pos:end="33:20">Rb</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:10">D1</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <name pos:start="35:14" pos:end="35:15">Rb</name> <operator pos:start="35:17" pos:end="35:17">-</operator> <name pos:start="35:19" pos:end="35:20">Rc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:21"><expr pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">D2</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:15">Rc</name> <operator pos:start="37:17" pos:end="37:17">-</operator> <name pos:start="37:19" pos:end="37:20">Ra</name></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:22">/* run mode */</comment>

        <if_stmt pos:start="41:9" pos:end="206:9"><if pos:start="41:9" pos:end="156:9">if <condition pos:start="41:12" pos:end="45:39">(<expr pos:start="41:13" pos:end="45:38"><operator pos:start="41:13" pos:end="41:13">(</operator><call pos:start="41:14" pos:end="41:22"><name pos:start="41:14" pos:end="41:18">FFABS</name><argument_list pos:start="41:19" pos:end="41:22">(<argument pos:start="41:20" pos:end="41:21"><expr pos:start="41:20" pos:end="41:21"><name pos:start="41:20" pos:end="41:21">D0</name></expr></argument>)</argument_list></call> <operator pos:start="41:24" pos:end="41:25">&lt;=</operator> <name pos:start="41:27" pos:end="41:37"><name pos:start="41:27" pos:end="41:31">state</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:37">near</name></name><operator pos:start="41:38" pos:end="41:38">)</operator> <operator pos:start="41:40" pos:end="41:41">&amp;&amp;</operator>

            <operator pos:start="43:13" pos:end="43:13">(</operator><call pos:start="43:14" pos:end="43:22"><name pos:start="43:14" pos:end="43:18">FFABS</name><argument_list pos:start="43:19" pos:end="43:22">(<argument pos:start="43:20" pos:end="43:21"><expr pos:start="43:20" pos:end="43:21"><name pos:start="43:20" pos:end="43:21">D1</name></expr></argument>)</argument_list></call> <operator pos:start="43:24" pos:end="43:25">&lt;=</operator> <name pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:31">state</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:37">near</name></name><operator pos:start="43:38" pos:end="43:38">)</operator> <operator pos:start="43:40" pos:end="43:41">&amp;&amp;</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><call pos:start="45:14" pos:end="45:22"><name pos:start="45:14" pos:end="45:18">FFABS</name><argument_list pos:start="45:19" pos:end="45:22">(<argument pos:start="45:20" pos:end="45:21"><expr pos:start="45:20" pos:end="45:21"><name pos:start="45:20" pos:end="45:21">D2</name></expr></argument>)</argument_list></call> <operator pos:start="45:24" pos:end="45:25">&lt;=</operator> <name pos:start="45:27" pos:end="45:37"><name pos:start="45:27" pos:end="45:31">state</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:37">near</name></name><operator pos:start="45:38" pos:end="45:38">)</operator></expr>)</condition> <block pos:start="45:41" pos:end="156:9">{<block_content pos:start="47:13" pos:end="154:13">

            <decl_stmt pos:start="47:13" pos:end="47:18"><decl pos:start="47:13" pos:end="47:17"><type pos:start="47:13" pos:end="47:15"><name pos:start="47:13" pos:end="47:15">int</name></type> <name pos:start="47:17" pos:end="47:17">r</name></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:23"><decl pos:start="49:13" pos:end="49:22"><type pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">int</name></type> <name pos:start="49:17" pos:end="49:22">RItype</name></decl>;</decl_stmt>



            <comment type="block" pos:start="53:13" pos:end="53:50">/* decode full runs while available */</comment>

            <while pos:start="55:13" pos:end="87:13">while <condition pos:start="55:19" pos:end="55:37">(<expr pos:start="55:20" pos:end="55:36"><call pos:start="55:20" pos:end="55:36"><name pos:start="55:20" pos:end="55:28">get_bits1</name><argument_list pos:start="55:29" pos:end="55:36">(<argument pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><operator pos:start="55:30" pos:end="55:30">&amp;</operator><name pos:start="55:31" pos:end="55:35"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:35">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:39" pos:end="87:13">{<block_content pos:start="57:17" pos:end="85:27">

                <decl_stmt pos:start="57:17" pos:end="57:22"><decl pos:start="57:17" pos:end="57:21"><type pos:start="57:17" pos:end="57:19"><name pos:start="57:17" pos:end="57:19">int</name></type> <name pos:start="57:21" pos:end="57:21">r</name></decl>;</decl_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:61"><expr pos:start="59:17" pos:end="59:60"><name pos:start="59:17" pos:end="59:17">r</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">1</literal> <operator pos:start="59:23" pos:end="59:24">&lt;&lt;</operator> <name pos:start="59:26" pos:end="59:60"><name pos:start="59:26" pos:end="59:36">ff_log2_run</name><index pos:start="59:37" pos:end="59:60">[<expr pos:start="59:38" pos:end="59:59"><name pos:start="59:38" pos:end="59:59"><name pos:start="59:38" pos:end="59:42">state</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:53">run_index</name><index pos:start="59:54" pos:end="59:59">[<expr pos:start="59:55" pos:end="59:58"><name pos:start="59:55" pos:end="59:58">comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="61:17" pos:end="63:41"><if pos:start="61:17" pos:end="63:41">if <condition pos:start="61:20" pos:end="61:39">(<expr pos:start="61:21" pos:end="61:38"><name pos:start="61:21" pos:end="61:21">x</name> <operator pos:start="61:23" pos:end="61:23">+</operator> <name pos:start="61:25" pos:end="61:25">r</name> <operator pos:start="61:27" pos:end="61:27">*</operator> <name pos:start="61:29" pos:end="61:34">stride</name> <operator pos:start="61:36" pos:end="61:36">&gt;</operator> <name pos:start="61:38" pos:end="61:38">w</name></expr>)</condition><block type="pseudo" pos:start="63:21" pos:end="63:41"><block_content pos:start="63:21" pos:end="63:41">

                    <expr_stmt pos:start="63:21" pos:end="63:41"><expr pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:21">r</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <operator pos:start="63:25" pos:end="63:25">(</operator><name pos:start="63:26" pos:end="63:26">w</name> <operator pos:start="63:28" pos:end="63:28">-</operator> <name pos:start="63:30" pos:end="63:30">x</name><operator pos:start="63:31" pos:end="63:31">)</operator> <operator pos:start="63:33" pos:end="63:33">/</operator> <name pos:start="63:35" pos:end="63:40">stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <for pos:start="65:17" pos:end="71:17">for <control pos:start="65:21" pos:end="65:39">(<init pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:26"><name pos:start="65:22" pos:end="65:22">i</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>;</init> <condition pos:start="65:29" pos:end="65:34"><expr pos:start="65:29" pos:end="65:33"><name pos:start="65:29" pos:end="65:29">i</name> <operator pos:start="65:31" pos:end="65:31">&lt;</operator> <name pos:start="65:33" pos:end="65:33">r</name></expr>;</condition> <incr pos:start="65:36" pos:end="65:38"><expr pos:start="65:36" pos:end="65:38"><name pos:start="65:36" pos:end="65:36">i</name><operator pos:start="65:37" pos:end="65:38">++</operator></expr></incr>)</control> <block pos:start="65:41" pos:end="71:17">{<block_content pos:start="67:21" pos:end="69:32">

                    <expr_stmt pos:start="67:21" pos:end="67:34"><expr pos:start="67:21" pos:end="67:33"><call pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:21">W</name><argument_list pos:start="67:22" pos:end="67:33">(<argument pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:25">dst</name></expr></argument>, <argument pos:start="67:28" pos:end="67:28"><expr pos:start="67:28" pos:end="67:28"><name pos:start="67:28" pos:end="67:28">x</name></expr></argument>, <argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><name pos:start="67:31" pos:end="67:32">Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:32"><expr pos:start="69:21" pos:end="69:31"><name pos:start="69:21" pos:end="69:21">x</name> <operator pos:start="69:23" pos:end="69:24">+=</operator> <name pos:start="69:26" pos:end="69:31">stride</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="73:17" pos:end="73:54">/* if EOL reached, we stop decoding */</comment>

                <if_stmt pos:start="75:17" pos:end="77:27"><if pos:start="75:17" pos:end="77:27">if <condition pos:start="75:20" pos:end="75:66">(<expr pos:start="75:21" pos:end="75:65"><name pos:start="75:21" pos:end="75:21">r</name> <operator pos:start="75:23" pos:end="75:24">!=</operator> <literal type="number" pos:start="75:26" pos:end="75:26">1</literal> <operator pos:start="75:28" pos:end="75:29">&lt;&lt;</operator> <name pos:start="75:31" pos:end="75:65"><name pos:start="75:31" pos:end="75:41">ff_log2_run</name><index pos:start="75:42" pos:end="75:65">[<expr pos:start="75:43" pos:end="75:64"><name pos:start="75:43" pos:end="75:64"><name pos:start="75:43" pos:end="75:47">state</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:58">run_index</name><index pos:start="75:59" pos:end="75:64">[<expr pos:start="75:60" pos:end="75:63"><name pos:start="75:60" pos:end="75:63">comp</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="77:21" pos:end="77:27"><block_content pos:start="77:21" pos:end="77:27">

                    <return pos:start="77:21" pos:end="77:27">return;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="79:17" pos:end="81:45"><if pos:start="79:17" pos:end="81:45">if <condition pos:start="79:20" pos:end="79:48">(<expr pos:start="79:21" pos:end="79:47"><name pos:start="79:21" pos:end="79:42"><name pos:start="79:21" pos:end="79:25">state</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:36">run_index</name><index pos:start="79:37" pos:end="79:42">[<expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">comp</name></expr>]</index></name> <operator pos:start="79:44" pos:end="79:44">&lt;</operator> <literal type="number" pos:start="79:46" pos:end="79:47">31</literal></expr>)</condition><block type="pseudo" pos:start="81:21" pos:end="81:45"><block_content pos:start="81:21" pos:end="81:45">

                    <expr_stmt pos:start="81:21" pos:end="81:45"><expr pos:start="81:21" pos:end="81:44"><name pos:start="81:21" pos:end="81:42"><name pos:start="81:21" pos:end="81:25">state</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:36">run_index</name><index pos:start="81:37" pos:end="81:42">[<expr pos:start="81:38" pos:end="81:41"><name pos:start="81:38" pos:end="81:41">comp</name></expr>]</index></name><operator pos:start="81:43" pos:end="81:44">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="83:17" pos:end="85:27"><if pos:start="83:17" pos:end="85:27">if <condition pos:start="83:20" pos:end="83:35">(<expr pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:21">x</name> <operator pos:start="83:23" pos:end="83:23">+</operator> <name pos:start="83:25" pos:end="83:30">stride</name> <operator pos:start="83:32" pos:end="83:32">&gt;</operator> <name pos:start="83:34" pos:end="83:34">w</name></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:27"><block_content pos:start="85:21" pos:end="85:27">

                    <return pos:start="85:21" pos:end="85:27">return;</return></block_content></block></if></if_stmt>

            </block_content>}</block></while>

            <comment type="block" pos:start="89:13" pos:end="89:36">/* decode aborted run */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:52"><expr pos:start="91:13" pos:end="91:51"><name pos:start="91:13" pos:end="91:13">r</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <name pos:start="91:17" pos:end="91:51"><name pos:start="91:17" pos:end="91:27">ff_log2_run</name><index pos:start="91:28" pos:end="91:51">[<expr pos:start="91:29" pos:end="91:50"><name pos:start="91:29" pos:end="91:50"><name pos:start="91:29" pos:end="91:33">state</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:44">run_index</name><index pos:start="91:45" pos:end="91:50">[<expr pos:start="91:46" pos:end="91:49"><name pos:start="91:46" pos:end="91:49">comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="95:45"><if pos:start="93:13" pos:end="95:45">if <condition pos:start="93:16" pos:end="93:18">(<expr pos:start="93:17" pos:end="93:17"><name pos:start="93:17" pos:end="93:17">r</name></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:45"><block_content pos:start="95:17" pos:end="95:45">

                <expr_stmt pos:start="95:17" pos:end="95:45"><expr pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:17">r</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <call pos:start="95:21" pos:end="95:44"><name pos:start="95:21" pos:end="95:33">get_bits_long</name><argument_list pos:start="95:34" pos:end="95:44">(<argument pos:start="95:35" pos:end="95:40"><expr pos:start="95:35" pos:end="95:40"><operator pos:start="95:35" pos:end="95:35">&amp;</operator><name pos:start="95:36" pos:end="95:40"><name pos:start="95:36" pos:end="95:36">s</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:40">gb</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:43"><expr pos:start="95:43" pos:end="95:43"><name pos:start="95:43" pos:end="95:43">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="97:13" pos:end="101:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:35">(<expr pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:17">x</name> <operator pos:start="97:19" pos:end="97:19">+</operator> <name pos:start="97:21" pos:end="97:21">r</name> <operator pos:start="97:23" pos:end="97:23">*</operator> <name pos:start="97:25" pos:end="97:30">stride</name> <operator pos:start="97:32" pos:end="97:32">&gt;</operator> <name pos:start="97:34" pos:end="97:34">w</name></expr>)</condition> <block pos:start="97:37" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:37">

                <expr_stmt pos:start="99:17" pos:end="99:37"><expr pos:start="99:17" pos:end="99:36"><name pos:start="99:17" pos:end="99:17">r</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:22">w</name> <operator pos:start="99:24" pos:end="99:24">-</operator> <name pos:start="99:26" pos:end="99:26">x</name><operator pos:start="99:27" pos:end="99:27">)</operator> <operator pos:start="99:29" pos:end="99:29">/</operator> <name pos:start="99:31" pos:end="99:36">stride</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <for pos:start="103:13" pos:end="109:13">for <control pos:start="103:17" pos:end="103:35">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">i</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:30"><expr pos:start="103:25" pos:end="103:29"><name pos:start="103:25" pos:end="103:25">i</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:29">r</name></expr>;</condition> <incr pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:32">i</name><operator pos:start="103:33" pos:end="103:34">++</operator></expr></incr>)</control> <block pos:start="103:37" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:28">

                <expr_stmt pos:start="105:17" pos:end="105:30"><expr pos:start="105:17" pos:end="105:29"><call pos:start="105:17" pos:end="105:29"><name pos:start="105:17" pos:end="105:17">W</name><argument_list pos:start="105:18" pos:end="105:29">(<argument pos:start="105:19" pos:end="105:21"><expr pos:start="105:19" pos:end="105:21"><name pos:start="105:19" pos:end="105:21">dst</name></expr></argument>, <argument pos:start="105:24" pos:end="105:24"><expr pos:start="105:24" pos:end="105:24"><name pos:start="105:24" pos:end="105:24">x</name></expr></argument>, <argument pos:start="105:27" pos:end="105:28"><expr pos:start="105:27" pos:end="105:28"><name pos:start="105:27" pos:end="105:28">Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:28"><expr pos:start="107:17" pos:end="107:27"><name pos:start="107:17" pos:end="107:17">x</name> <operator pos:start="107:19" pos:end="107:20">+=</operator> <name pos:start="107:22" pos:end="107:27">stride</name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="113:13" pos:end="120:13"><if pos:start="113:13" pos:end="120:13">if <condition pos:start="113:16" pos:end="113:23">(<expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:17">x</name> <operator pos:start="113:19" pos:end="113:20">&gt;=</operator> <name pos:start="113:22" pos:end="113:22">w</name></expr>)</condition> <block pos:start="113:25" pos:end="120:13">{<block_content pos:start="115:17" pos:end="118:23">

                <expr_stmt pos:start="115:17" pos:end="115:61"><expr pos:start="115:17" pos:end="115:60"><call pos:start="115:17" pos:end="115:60"><name pos:start="115:17" pos:end="115:22">av_log</name><argument_list pos:start="115:23" pos:end="115:60">(<argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">NULL</name></expr></argument>, <argument pos:start="115:30" pos:end="115:41"><expr pos:start="115:30" pos:end="115:41"><name pos:start="115:30" pos:end="115:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:44" pos:end="115:59"><expr pos:start="115:44" pos:end="115:59"><literal type="string" pos:start="115:44" pos:end="115:59">"run overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <return pos:start="118:17" pos:end="118:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="124:13" pos:end="124:46">/* decode run termination value */</comment>

            <expr_stmt pos:start="126:13" pos:end="126:32"><expr pos:start="126:13" pos:end="126:31"><name pos:start="126:13" pos:end="126:14">Rb</name>     <operator pos:start="126:20" pos:end="126:20">=</operator> <call pos:start="126:22" pos:end="126:31"><name pos:start="126:22" pos:end="126:22">R</name><argument_list pos:start="126:23" pos:end="126:31">(<argument pos:start="126:24" pos:end="126:27"><expr pos:start="126:24" pos:end="126:27"><name pos:start="126:24" pos:end="126:27">last</name></expr></argument>, <argument pos:start="126:30" pos:end="126:30"><expr pos:start="126:30" pos:end="126:30"><name pos:start="126:30" pos:end="126:30">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="128:13" pos:end="128:61"><expr pos:start="128:13" pos:end="128:60"><name pos:start="128:13" pos:end="128:18">RItype</name> <operator pos:start="128:20" pos:end="128:20">=</operator> <ternary pos:start="128:22" pos:end="128:60"><condition pos:start="128:22" pos:end="128:54"><expr pos:start="128:22" pos:end="128:52"><operator pos:start="128:22" pos:end="128:22">(</operator><call pos:start="128:23" pos:end="128:36"><name pos:start="128:23" pos:end="128:27">FFABS</name><argument_list pos:start="128:28" pos:end="128:36">(<argument pos:start="128:29" pos:end="128:35"><expr pos:start="128:29" pos:end="128:35"><name pos:start="128:29" pos:end="128:30">Ra</name> <operator pos:start="128:32" pos:end="128:32">-</operator> <name pos:start="128:34" pos:end="128:35">Rb</name></expr></argument>)</argument_list></call> <operator pos:start="128:38" pos:end="128:39">&lt;=</operator> <name pos:start="128:41" pos:end="128:51"><name pos:start="128:41" pos:end="128:45">state</name><operator pos:start="128:46" pos:end="128:47">-&gt;</operator><name pos:start="128:48" pos:end="128:51">near</name></name><operator pos:start="128:52" pos:end="128:52">)</operator></expr> ?</condition><then pos:start="128:56" pos:end="128:56"> <expr pos:start="128:56" pos:end="128:56"><literal type="number" pos:start="128:56" pos:end="128:56">1</literal></expr> </then><else pos:start="128:58" pos:end="128:60">: <expr pos:start="128:60" pos:end="128:60"><literal type="number" pos:start="128:60" pos:end="128:60">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="130:13" pos:end="132:78"><expr pos:start="130:13" pos:end="132:77"><name pos:start="130:13" pos:end="130:15">err</name>    <operator pos:start="130:20" pos:end="130:20">=</operator> <call pos:start="130:22" pos:end="132:77"><name pos:start="130:22" pos:end="130:40">ls_get_code_runterm</name><argument_list pos:start="130:41" pos:end="132:77">(<argument pos:start="130:42" pos:end="130:47"><expr pos:start="130:42" pos:end="130:47"><operator pos:start="130:42" pos:end="130:42">&amp;</operator><name pos:start="130:43" pos:end="130:47"><name pos:start="130:43" pos:end="130:43">s</name><operator pos:start="130:44" pos:end="130:45">-&gt;</operator><name pos:start="130:46" pos:end="130:47">gb</name></name></expr></argument>, <argument pos:start="130:50" pos:end="130:54"><expr pos:start="130:50" pos:end="130:54"><name pos:start="130:50" pos:end="130:54">state</name></expr></argument>, <argument pos:start="130:57" pos:end="130:62"><expr pos:start="130:57" pos:end="130:62"><name pos:start="130:57" pos:end="130:62">RItype</name></expr></argument>,

                                         <argument pos:start="132:42" pos:end="132:76"><expr pos:start="132:42" pos:end="132:76"><name pos:start="132:42" pos:end="132:76"><name pos:start="132:42" pos:end="132:52">ff_log2_run</name><index pos:start="132:53" pos:end="132:76">[<expr pos:start="132:54" pos:end="132:75"><name pos:start="132:54" pos:end="132:75"><name pos:start="132:54" pos:end="132:58">state</name><operator pos:start="132:59" pos:end="132:60">-&gt;</operator><name pos:start="132:61" pos:end="132:69">run_index</name><index pos:start="132:70" pos:end="132:75">[<expr pos:start="132:71" pos:end="132:74"><name pos:start="132:71" pos:end="132:74">comp</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="134:13" pos:end="136:41"><if pos:start="134:13" pos:end="136:41">if <condition pos:start="134:16" pos:end="134:39">(<expr pos:start="134:17" pos:end="134:38"><name pos:start="134:17" pos:end="134:38"><name pos:start="134:17" pos:end="134:21">state</name><operator pos:start="134:22" pos:end="134:23">-&gt;</operator><name pos:start="134:24" pos:end="134:32">run_index</name><index pos:start="134:33" pos:end="134:38">[<expr pos:start="134:34" pos:end="134:37"><name pos:start="134:34" pos:end="134:37">comp</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="136:17" pos:end="136:41"><block_content pos:start="136:17" pos:end="136:41">

                <expr_stmt pos:start="136:17" pos:end="136:41"><expr pos:start="136:17" pos:end="136:40"><name pos:start="136:17" pos:end="136:38"><name pos:start="136:17" pos:end="136:21">state</name><operator pos:start="136:22" pos:end="136:23">-&gt;</operator><name pos:start="136:24" pos:end="136:32">run_index</name><index pos:start="136:33" pos:end="136:38">[<expr pos:start="136:34" pos:end="136:37"><name pos:start="136:34" pos:end="136:37">comp</name></expr>]</index></name><operator pos:start="136:39" pos:end="136:40">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="140:13" pos:end="154:13"><if pos:start="140:13" pos:end="144:13">if <condition pos:start="140:16" pos:end="140:38">(<expr pos:start="140:17" pos:end="140:37"><name pos:start="140:17" pos:end="140:27"><name pos:start="140:17" pos:end="140:21">state</name><operator pos:start="140:22" pos:end="140:23">-&gt;</operator><name pos:start="140:24" pos:end="140:27">near</name></name> <operator pos:start="140:29" pos:end="140:30">&amp;&amp;</operator> <name pos:start="140:32" pos:end="140:37">RItype</name></expr>)</condition> <block pos:start="140:40" pos:end="144:13">{<block_content pos:start="142:17" pos:end="142:32">

                <expr_stmt pos:start="142:17" pos:end="142:32"><expr pos:start="142:17" pos:end="142:31"><name pos:start="142:17" pos:end="142:20">pred</name> <operator pos:start="142:22" pos:end="142:22">=</operator> <name pos:start="142:24" pos:end="142:25">Ra</name> <operator pos:start="142:27" pos:end="142:27">+</operator> <name pos:start="142:29" pos:end="142:31">err</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="144:15" pos:end="154:13">else <block pos:start="144:20" pos:end="154:13">{<block_content pos:start="146:17" pos:end="152:36">

                <if_stmt pos:start="146:17" pos:end="152:36"><if pos:start="146:17" pos:end="148:36">if <condition pos:start="146:20" pos:end="146:28">(<expr pos:start="146:21" pos:end="146:27"><name pos:start="146:21" pos:end="146:22">Rb</name> <operator pos:start="146:24" pos:end="146:24">&lt;</operator> <name pos:start="146:26" pos:end="146:27">Ra</name></expr>)</condition><block type="pseudo" pos:start="148:21" pos:end="148:36"><block_content pos:start="148:21" pos:end="148:36">

                    <expr_stmt pos:start="148:21" pos:end="148:36"><expr pos:start="148:21" pos:end="148:35"><name pos:start="148:21" pos:end="148:24">pred</name> <operator pos:start="148:26" pos:end="148:26">=</operator> <name pos:start="148:28" pos:end="148:29">Rb</name> <operator pos:start="148:31" pos:end="148:31">-</operator> <name pos:start="148:33" pos:end="148:35">err</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="150:17" pos:end="152:36">else<block type="pseudo" pos:start="152:21" pos:end="152:36"><block_content pos:start="152:21" pos:end="152:36">

                    <expr_stmt pos:start="152:21" pos:end="152:36"><expr pos:start="152:21" pos:end="152:35"><name pos:start="152:21" pos:end="152:24">pred</name> <operator pos:start="152:26" pos:end="152:26">=</operator> <name pos:start="152:28" pos:end="152:29">Rb</name> <operator pos:start="152:31" pos:end="152:31">+</operator> <name pos:start="152:33" pos:end="152:35">err</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="156:11" pos:end="206:9">else <block pos:start="156:16" pos:end="206:9">{<block_content pos:start="158:13" pos:end="204:24"> <comment type="block" pos:start="156:18" pos:end="156:35">/* regular mode */</comment>

            <decl_stmt pos:start="158:13" pos:end="158:30"><decl pos:start="158:13" pos:end="158:23"><type pos:start="158:13" pos:end="158:15"><name pos:start="158:13" pos:end="158:15">int</name></type> <name pos:start="158:17" pos:end="158:23">context</name></decl>, <decl pos:start="158:26" pos:end="158:29"><type ref="prev" pos:start="158:13" pos:end="158:15"/><name pos:start="158:26" pos:end="158:29">sign</name></decl>;</decl_stmt>



            <expr_stmt pos:start="162:13" pos:end="166:52"><expr pos:start="162:13" pos:end="166:51"><name pos:start="162:13" pos:end="162:19">context</name> <operator pos:start="162:21" pos:end="162:21">=</operator> <call pos:start="162:23" pos:end="162:51"><name pos:start="162:23" pos:end="162:40">ff_jpegls_quantize</name><argument_list pos:start="162:41" pos:end="162:51">(<argument pos:start="162:42" pos:end="162:46"><expr pos:start="162:42" pos:end="162:46"><name pos:start="162:42" pos:end="162:46">state</name></expr></argument>, <argument pos:start="162:49" pos:end="162:50"><expr pos:start="162:49" pos:end="162:50"><name pos:start="162:49" pos:end="162:50">D0</name></expr></argument>)</argument_list></call> <operator pos:start="162:53" pos:end="162:53">*</operator> <literal type="number" pos:start="162:55" pos:end="162:58">81</literal> <operator pos:start="162:58" pos:end="162:58">+</operator>

                      <call pos:start="164:23" pos:end="164:51"><name pos:start="164:23" pos:end="164:40">ff_jpegls_quantize</name><argument_list pos:start="164:41" pos:end="164:51">(<argument pos:start="164:42" pos:end="164:46"><expr pos:start="164:42" pos:end="164:46"><name pos:start="164:42" pos:end="164:46">state</name></expr></argument>, <argument pos:start="164:49" pos:end="164:50"><expr pos:start="164:49" pos:end="164:50"><name pos:start="164:49" pos:end="164:50">D1</name></expr></argument>)</argument_list></call> <operator pos:start="164:53" pos:end="164:53">*</operator>  <literal type="number" pos:start="164:56" pos:end="164:58">9</literal> <operator pos:start="164:58" pos:end="164:58">+</operator>

                      <call pos:start="166:23" pos:end="166:51"><name pos:start="166:23" pos:end="166:40">ff_jpegls_quantize</name><argument_list pos:start="166:41" pos:end="166:51">(<argument pos:start="166:42" pos:end="166:46"><expr pos:start="166:42" pos:end="166:46"><name pos:start="166:42" pos:end="166:46">state</name></expr></argument>, <argument pos:start="166:49" pos:end="166:50"><expr pos:start="166:49" pos:end="166:50"><name pos:start="166:49" pos:end="166:50">D2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="168:13" pos:end="168:53"><expr pos:start="168:13" pos:end="168:52"><name pos:start="168:13" pos:end="168:16">pred</name>    <operator pos:start="168:21" pos:end="168:21">=</operator> <call pos:start="168:23" pos:end="168:52"><name pos:start="168:23" pos:end="168:30">mid_pred</name><argument_list pos:start="168:31" pos:end="168:52">(<argument pos:start="168:32" pos:end="168:33"><expr pos:start="168:32" pos:end="168:33"><name pos:start="168:32" pos:end="168:33">Ra</name></expr></argument>, <argument pos:start="168:36" pos:end="168:47"><expr pos:start="168:36" pos:end="168:47"><name pos:start="168:36" pos:end="168:37">Ra</name> <operator pos:start="168:39" pos:end="168:39">+</operator> <name pos:start="168:41" pos:end="168:42">Rb</name> <operator pos:start="168:44" pos:end="168:44">-</operator> <name pos:start="168:46" pos:end="168:47">Rc</name></expr></argument>, <argument pos:start="168:50" pos:end="168:51"><expr pos:start="168:50" pos:end="168:51"><name pos:start="168:50" pos:end="168:51">Rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="172:13" pos:end="182:13"><if pos:start="172:13" pos:end="178:13">if <condition pos:start="172:16" pos:end="172:28">(<expr pos:start="172:17" pos:end="172:27"><name pos:start="172:17" pos:end="172:23">context</name> <operator pos:start="172:25" pos:end="172:25">&lt;</operator> <literal type="number" pos:start="172:27" pos:end="172:27">0</literal></expr>)</condition> <block pos:start="172:30" pos:end="178:13">{<block_content pos:start="174:17" pos:end="176:28">

                <expr_stmt pos:start="174:17" pos:end="174:35"><expr pos:start="174:17" pos:end="174:34"><name pos:start="174:17" pos:end="174:23">context</name> <operator pos:start="174:25" pos:end="174:25">=</operator> <operator pos:start="174:27" pos:end="174:27">-</operator><name pos:start="174:28" pos:end="174:34">context</name></expr>;</expr_stmt>

                <expr_stmt pos:start="176:17" pos:end="176:28"><expr pos:start="176:17" pos:end="176:27"><name pos:start="176:17" pos:end="176:20">sign</name>    <operator pos:start="176:25" pos:end="176:25">=</operator> <literal type="number" pos:start="176:27" pos:end="176:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="178:15" pos:end="182:13">else <block pos:start="178:20" pos:end="182:13">{<block_content pos:start="180:17" pos:end="180:25">

                <expr_stmt pos:start="180:17" pos:end="180:25"><expr pos:start="180:17" pos:end="180:24"><name pos:start="180:17" pos:end="180:20">sign</name> <operator pos:start="180:22" pos:end="180:22">=</operator> <literal type="number" pos:start="180:24" pos:end="180:24">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="186:13" pos:end="198:13"><if pos:start="186:13" pos:end="192:13">if <condition pos:start="186:16" pos:end="186:21">(<expr pos:start="186:17" pos:end="186:20"><name pos:start="186:17" pos:end="186:20">sign</name></expr>)</condition> <block pos:start="186:23" pos:end="192:13">{<block_content pos:start="188:17" pos:end="190:68">

                <expr_stmt pos:start="188:17" pos:end="188:75"><expr pos:start="188:17" pos:end="188:74"><name pos:start="188:17" pos:end="188:20">pred</name> <operator pos:start="188:22" pos:end="188:22">=</operator> <call pos:start="188:24" pos:end="188:74"><name pos:start="188:24" pos:end="188:30">av_clip</name><argument_list pos:start="188:31" pos:end="188:74">(<argument pos:start="188:32" pos:end="188:55"><expr pos:start="188:32" pos:end="188:55"><name pos:start="188:32" pos:end="188:35">pred</name> <operator pos:start="188:37" pos:end="188:37">-</operator> <name pos:start="188:39" pos:end="188:55"><name pos:start="188:39" pos:end="188:43">state</name><operator pos:start="188:44" pos:end="188:45">-&gt;</operator><name pos:start="188:46" pos:end="188:46">C</name><index pos:start="188:47" pos:end="188:55">[<expr pos:start="188:48" pos:end="188:54"><name pos:start="188:48" pos:end="188:54">context</name></expr>]</index></name></expr></argument>, <argument pos:start="188:58" pos:end="188:58"><expr pos:start="188:58" pos:end="188:58"><literal type="number" pos:start="188:58" pos:end="188:58">0</literal></expr></argument>, <argument pos:start="188:61" pos:end="188:73"><expr pos:start="188:61" pos:end="188:73"><name pos:start="188:61" pos:end="188:73"><name pos:start="188:61" pos:end="188:65">state</name><operator pos:start="188:66" pos:end="188:67">-&gt;</operator><name pos:start="188:68" pos:end="188:73">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="190:17" pos:end="190:68"><expr pos:start="190:17" pos:end="190:67"><name pos:start="190:17" pos:end="190:19">err</name>  <operator pos:start="190:22" pos:end="190:22">=</operator> <operator pos:start="190:24" pos:end="190:24">-</operator><call pos:start="190:25" pos:end="190:67"><name pos:start="190:25" pos:end="190:43">ls_get_code_regular</name><argument_list pos:start="190:44" pos:end="190:67">(<argument pos:start="190:45" pos:end="190:50"><expr pos:start="190:45" pos:end="190:50"><operator pos:start="190:45" pos:end="190:45">&amp;</operator><name pos:start="190:46" pos:end="190:50"><name pos:start="190:46" pos:end="190:46">s</name><operator pos:start="190:47" pos:end="190:48">-&gt;</operator><name pos:start="190:49" pos:end="190:50">gb</name></name></expr></argument>, <argument pos:start="190:53" pos:end="190:57"><expr pos:start="190:53" pos:end="190:57"><name pos:start="190:53" pos:end="190:57">state</name></expr></argument>, <argument pos:start="190:60" pos:end="190:66"><expr pos:start="190:60" pos:end="190:66"><name pos:start="190:60" pos:end="190:66">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="192:15" pos:end="198:13">else <block pos:start="192:20" pos:end="198:13">{<block_content pos:start="194:17" pos:end="196:67">

                <expr_stmt pos:start="194:17" pos:end="194:75"><expr pos:start="194:17" pos:end="194:74"><name pos:start="194:17" pos:end="194:20">pred</name> <operator pos:start="194:22" pos:end="194:22">=</operator> <call pos:start="194:24" pos:end="194:74"><name pos:start="194:24" pos:end="194:30">av_clip</name><argument_list pos:start="194:31" pos:end="194:74">(<argument pos:start="194:32" pos:end="194:55"><expr pos:start="194:32" pos:end="194:55"><name pos:start="194:32" pos:end="194:35">pred</name> <operator pos:start="194:37" pos:end="194:37">+</operator> <name pos:start="194:39" pos:end="194:55"><name pos:start="194:39" pos:end="194:43">state</name><operator pos:start="194:44" pos:end="194:45">-&gt;</operator><name pos:start="194:46" pos:end="194:46">C</name><index pos:start="194:47" pos:end="194:55">[<expr pos:start="194:48" pos:end="194:54"><name pos:start="194:48" pos:end="194:54">context</name></expr>]</index></name></expr></argument>, <argument pos:start="194:58" pos:end="194:58"><expr pos:start="194:58" pos:end="194:58"><literal type="number" pos:start="194:58" pos:end="194:58">0</literal></expr></argument>, <argument pos:start="194:61" pos:end="194:73"><expr pos:start="194:61" pos:end="194:73"><name pos:start="194:61" pos:end="194:73"><name pos:start="194:61" pos:end="194:65">state</name><operator pos:start="194:66" pos:end="194:67">-&gt;</operator><name pos:start="194:68" pos:end="194:73">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="196:17" pos:end="196:67"><expr pos:start="196:17" pos:end="196:66"><name pos:start="196:17" pos:end="196:19">err</name>  <operator pos:start="196:22" pos:end="196:22">=</operator> <call pos:start="196:24" pos:end="196:66"><name pos:start="196:24" pos:end="196:42">ls_get_code_regular</name><argument_list pos:start="196:43" pos:end="196:66">(<argument pos:start="196:44" pos:end="196:49"><expr pos:start="196:44" pos:end="196:49"><operator pos:start="196:44" pos:end="196:44">&amp;</operator><name pos:start="196:45" pos:end="196:49"><name pos:start="196:45" pos:end="196:45">s</name><operator pos:start="196:46" pos:end="196:47">-&gt;</operator><name pos:start="196:48" pos:end="196:49">gb</name></name></expr></argument>, <argument pos:start="196:52" pos:end="196:56"><expr pos:start="196:52" pos:end="196:56"><name pos:start="196:52" pos:end="196:56">state</name></expr></argument>, <argument pos:start="196:59" pos:end="196:65"><expr pos:start="196:59" pos:end="196:65"><name pos:start="196:59" pos:end="196:65">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="202:13" pos:end="202:71">/* we have to do something more for near-lossless coding */</comment>

            <expr_stmt pos:start="204:13" pos:end="204:24"><expr pos:start="204:13" pos:end="204:23"><name pos:start="204:13" pos:end="204:16">pred</name> <operator pos:start="204:18" pos:end="204:19">+=</operator> <name pos:start="204:21" pos:end="204:23">err</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="208:9" pos:end="220:9"><if pos:start="208:9" pos:end="220:9">if <condition pos:start="208:12" pos:end="208:24">(<expr pos:start="208:13" pos:end="208:23"><name pos:start="208:13" pos:end="208:23"><name pos:start="208:13" pos:end="208:17">state</name><operator pos:start="208:18" pos:end="208:19">-&gt;</operator><name pos:start="208:20" pos:end="208:23">near</name></name></expr>)</condition> <block pos:start="208:26" pos:end="220:9">{<block_content pos:start="210:13" pos:end="218:51">

            <if_stmt pos:start="210:13" pos:end="216:54"><if pos:start="210:13" pos:end="212:54">if <condition pos:start="210:16" pos:end="210:36">(<expr pos:start="210:17" pos:end="210:35"><name pos:start="210:17" pos:end="210:20">pred</name> <operator pos:start="210:22" pos:end="210:22">&lt;</operator> <operator pos:start="210:24" pos:end="210:24">-</operator><name pos:start="210:25" pos:end="210:35"><name pos:start="210:25" pos:end="210:29">state</name><operator pos:start="210:30" pos:end="210:31">-&gt;</operator><name pos:start="210:32" pos:end="210:35">near</name></name></expr>)</condition><block type="pseudo" pos:start="212:17" pos:end="212:54"><block_content pos:start="212:17" pos:end="212:54">

                <expr_stmt pos:start="212:17" pos:end="212:54"><expr pos:start="212:17" pos:end="212:53"><name pos:start="212:17" pos:end="212:20">pred</name> <operator pos:start="212:22" pos:end="212:23">+=</operator> <name pos:start="212:25" pos:end="212:36"><name pos:start="212:25" pos:end="212:29">state</name><operator pos:start="212:30" pos:end="212:31">-&gt;</operator><name pos:start="212:32" pos:end="212:36">range</name></name> <operator pos:start="212:38" pos:end="212:38">*</operator> <name pos:start="212:40" pos:end="212:53"><name pos:start="212:40" pos:end="212:44">state</name><operator pos:start="212:45" pos:end="212:46">-&gt;</operator><name pos:start="212:47" pos:end="212:53">twonear</name></name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="214:13" pos:end="216:54">else if <condition pos:start="214:21" pos:end="214:56">(<expr pos:start="214:22" pos:end="214:55"><name pos:start="214:22" pos:end="214:25">pred</name> <operator pos:start="214:27" pos:end="214:27">&gt;</operator> <name pos:start="214:29" pos:end="214:41"><name pos:start="214:29" pos:end="214:33">state</name><operator pos:start="214:34" pos:end="214:35">-&gt;</operator><name pos:start="214:36" pos:end="214:41">maxval</name></name> <operator pos:start="214:43" pos:end="214:43">+</operator> <name pos:start="214:45" pos:end="214:55"><name pos:start="214:45" pos:end="214:49">state</name><operator pos:start="214:50" pos:end="214:51">-&gt;</operator><name pos:start="214:52" pos:end="214:55">near</name></name></expr>)</condition><block type="pseudo" pos:start="216:17" pos:end="216:54"><block_content pos:start="216:17" pos:end="216:54">

                <expr_stmt pos:start="216:17" pos:end="216:54"><expr pos:start="216:17" pos:end="216:53"><name pos:start="216:17" pos:end="216:20">pred</name> <operator pos:start="216:22" pos:end="216:23">-=</operator> <name pos:start="216:25" pos:end="216:36"><name pos:start="216:25" pos:end="216:29">state</name><operator pos:start="216:30" pos:end="216:31">-&gt;</operator><name pos:start="216:32" pos:end="216:36">range</name></name> <operator pos:start="216:38" pos:end="216:38">*</operator> <name pos:start="216:40" pos:end="216:53"><name pos:start="216:40" pos:end="216:44">state</name><operator pos:start="216:45" pos:end="216:46">-&gt;</operator><name pos:start="216:47" pos:end="216:53">twonear</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="218:13" pos:end="218:51"><expr pos:start="218:13" pos:end="218:50"><name pos:start="218:13" pos:end="218:16">pred</name> <operator pos:start="218:18" pos:end="218:18">=</operator> <call pos:start="218:20" pos:end="218:50"><name pos:start="218:20" pos:end="218:26">av_clip</name><argument_list pos:start="218:27" pos:end="218:50">(<argument pos:start="218:28" pos:end="218:31"><expr pos:start="218:28" pos:end="218:31"><name pos:start="218:28" pos:end="218:31">pred</name></expr></argument>, <argument pos:start="218:34" pos:end="218:34"><expr pos:start="218:34" pos:end="218:34"><literal type="number" pos:start="218:34" pos:end="218:34">0</literal></expr></argument>, <argument pos:start="218:37" pos:end="218:49"><expr pos:start="218:37" pos:end="218:49"><name pos:start="218:37" pos:end="218:49"><name pos:start="218:37" pos:end="218:41">state</name><operator pos:start="218:42" pos:end="218:43">-&gt;</operator><name pos:start="218:44" pos:end="218:49">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="224:9" pos:end="224:30"><expr pos:start="224:9" pos:end="224:29"><name pos:start="224:9" pos:end="224:12">pred</name> <operator pos:start="224:14" pos:end="224:15">&amp;=</operator> <name pos:start="224:17" pos:end="224:29"><name pos:start="224:17" pos:end="224:21">state</name><operator pos:start="224:22" pos:end="224:23">-&gt;</operator><name pos:start="224:24" pos:end="224:29">maxval</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="226:9" pos:end="226:24"><expr pos:start="226:9" pos:end="226:23"><call pos:start="226:9" pos:end="226:23"><name pos:start="226:9" pos:end="226:9">W</name><argument_list pos:start="226:10" pos:end="226:23">(<argument pos:start="226:11" pos:end="226:13"><expr pos:start="226:11" pos:end="226:13"><name pos:start="226:11" pos:end="226:13">dst</name></expr></argument>, <argument pos:start="226:16" pos:end="226:16"><expr pos:start="226:16" pos:end="226:16"><name pos:start="226:16" pos:end="226:16">x</name></expr></argument>, <argument pos:start="226:19" pos:end="226:22"><expr pos:start="226:19" pos:end="226:22"><name pos:start="226:19" pos:end="226:22">pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="228:9" pos:end="228:20"><expr pos:start="228:9" pos:end="228:19"><name pos:start="228:9" pos:end="228:9">x</name> <operator pos:start="228:11" pos:end="228:12">+=</operator> <name pos:start="228:14" pos:end="228:19">stride</name></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function></unit>
