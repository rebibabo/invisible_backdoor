<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5763.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_mpv_frame_size_alloc</name><parameter_list pos:start="1:28" pos:end="1:60">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">MpegEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:59">linesize</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:27">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">alloc_size</name> <init pos:start="5:20" pos:end="5:54">= <expr pos:start="5:22" pos:end="5:54"><call pos:start="5:22" pos:end="5:54"><name pos:start="5:22" pos:end="5:28">FFALIGN</name><argument_list pos:start="5:29" pos:end="5:54">(<argument pos:start="5:30" pos:end="5:49"><expr pos:start="5:30" pos:end="5:49"><call pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:34">FFABS</name><argument_list pos:start="5:35" pos:end="5:44">(<argument pos:start="5:36" pos:end="5:43"><expr pos:start="5:36" pos:end="5:43"><name pos:start="5:36" pos:end="5:43">linesize</name></expr></argument>)</argument_list></call> <operator pos:start="5:46" pos:end="5:46">+</operator> <literal type="number" pos:start="5:48" pos:end="5:49">64</literal></expr></argument>, <argument pos:start="5:52" pos:end="5:53"><expr pos:start="5:52" pos:end="5:53"><literal type="number" pos:start="5:52" pos:end="5:53">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="9:5" pos:end="9:51">// edge emu needs blocksize + filter length - 1</comment>

    <comment type="line" pos:start="11:5" pos:end="11:47">// (= 17x17 for  halfpel / 21x21 for  h264)</comment>

    <comment type="line" pos:start="13:5" pos:end="13:72">// VC1 computes luma and chroma simultaneously and needs 19X19 + 9x9</comment>

    <comment type="line" pos:start="15:5" pos:end="15:64">// at uvlinesize. It supports only YUV420 so 24x24 is enough</comment>

    <comment type="line" pos:start="17:5" pos:end="17:37">// linesize * interlaced * MBsize</comment>

    <expr_stmt pos:start="19:5" pos:end="21:28"><expr pos:start="19:5" pos:end="21:27"><call pos:start="19:5" pos:end="21:27"><name pos:start="19:5" pos:end="19:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="19:22" pos:end="21:27">(<argument pos:start="19:23" pos:end="19:30"><expr pos:start="19:23" pos:end="19:30"><name pos:start="19:23" pos:end="19:30"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:30">avctx</name></name></expr></argument>, <argument pos:start="19:33" pos:end="19:50"><expr pos:start="19:33" pos:end="19:50"><name pos:start="19:33" pos:end="19:50"><name pos:start="19:33" pos:end="19:33">s</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:50">edge_emu_buffer</name></name></expr></argument>, <argument pos:start="19:53" pos:end="19:71"><expr pos:start="19:53" pos:end="19:71"><name pos:start="19:53" pos:end="19:62">alloc_size</name> <operator pos:start="19:64" pos:end="19:64">*</operator> <literal type="number" pos:start="19:66" pos:end="19:66">4</literal> <operator pos:start="19:68" pos:end="19:68">*</operator> <literal type="number" pos:start="19:70" pos:end="19:71">24</literal></expr></argument>,

                      <argument pos:start="21:23" pos:end="21:26"><expr pos:start="21:23" pos:end="21:26"><name pos:start="21:23" pos:end="21:26">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="25:5" pos:end="27:27"><name pos:start="25:5" pos:end="25:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="25:22" pos:end="27:27">(<argument pos:start="25:23" pos:end="25:30">s-&gt;avctx</argument>, <argument pos:start="25:33" pos:end="25:48">s-&gt;me.scratchpad</argument>, <argument pos:start="25:51" pos:end="25:73">alloc_size * <literal type="number" pos:start="25:64" pos:end="25:64">2</literal> * <literal type="number" pos:start="25:68" pos:end="25:69">16</literal> * <literal type="number" pos:start="25:73" pos:end="25:73">2</literal></argument>,

                      <argument pos:start="27:23" pos:end="27:26">fail</argument>)</argument_list></macro>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:9">me</name><operator pos:start="29:10" pos:end="29:10">.</operator><name pos:start="29:11" pos:end="29:14">temp</name></name>         <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:41"><name pos:start="29:26" pos:end="29:26">s</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:30">me</name><operator pos:start="29:31" pos:end="29:31">.</operator><name pos:start="29:32" pos:end="29:41">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:20">rd_scratchpad</name></name>   <operator pos:start="31:24" pos:end="31:24">=</operator> <name pos:start="31:26" pos:end="31:41"><name pos:start="31:26" pos:end="31:26">s</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:30">me</name><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:41">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:19">b_scratchpad</name></name>    <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:41"><name pos:start="33:26" pos:end="33:26">s</name><operator pos:start="33:27" pos:end="33:28">-&gt;</operator><name pos:start="33:29" pos:end="33:30">me</name><operator pos:start="33:31" pos:end="33:31">.</operator><name pos:start="33:32" pos:end="33:41">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:22">obmc_scratchpad</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:41"><name pos:start="35:26" pos:end="35:26">s</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:30">me</name><operator pos:start="35:31" pos:end="35:31">.</operator><name pos:start="35:32" pos:end="35:41">scratchpad</name></name> <operator pos:start="35:43" pos:end="35:43">+</operator> <literal type="number" pos:start="35:45" pos:end="35:46">16</literal></expr>;</expr_stmt>



    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

<label pos:start="41:1" pos:end="41:5"><name pos:start="41:1" pos:end="41:4">fail</name>:</label>

    <expr_stmt pos:start="43:5" pos:end="43:34"><expr pos:start="43:5" pos:end="43:33"><call pos:start="43:5" pos:end="43:33"><name pos:start="43:5" pos:end="43:12">av_freep</name><argument_list pos:start="43:13" pos:end="43:33">(<argument pos:start="43:14" pos:end="43:32"><expr pos:start="43:14" pos:end="43:32"><operator pos:start="43:14" pos:end="43:14">&amp;</operator><name pos:start="43:15" pos:end="43:32"><name pos:start="43:15" pos:end="43:15">s</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:32">edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:27">return <expr pos:start="45:12" pos:end="45:26"><call pos:start="45:12" pos:end="45:26"><name pos:start="45:12" pos:end="45:18">AVERROR</name><argument_list pos:start="45:19" pos:end="45:26">(<argument pos:start="45:20" pos:end="45:25"><expr pos:start="45:20" pos:end="45:25"><name pos:start="45:20" pos:end="45:25">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
