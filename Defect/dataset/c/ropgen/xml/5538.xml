<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5538.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">icp_realize</name><parameter_list pos:start="1:24" pos:end="1:55">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:35">DeviceState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:47">Error</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier><modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:73">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">ICPState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">icp</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><call pos:start="5:21" pos:end="5:28"><name pos:start="5:21" pos:end="5:23">ICP</name><argument_list pos:start="5:24" pos:end="5:28">(<argument pos:start="5:25" pos:end="5:27"><expr pos:start="5:25" pos:end="5:27"><name pos:start="5:25" pos:end="5:27">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ICPStateClass</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">icpc</name> <init pos:start="7:25" pos:end="7:44">= <expr pos:start="7:27" pos:end="7:44"><call pos:start="7:27" pos:end="7:44"><name pos:start="7:27" pos:end="7:39">ICP_GET_CLASS</name><argument_list pos:start="7:40" pos:end="7:44">(<argument pos:start="7:41" pos:end="7:43"><expr pos:start="7:41" pos:end="7:43"><name pos:start="7:41" pos:end="7:43">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">PowerPCCPU</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUPPCState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">Object</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:15">obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:14">err</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:69"><expr pos:start="19:5" pos:end="19:68"><name pos:start="19:5" pos:end="19:7">obj</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:68"><name pos:start="19:11" pos:end="19:34">object_property_get_link</name><argument_list pos:start="19:35" pos:end="19:68">(<argument pos:start="19:36" pos:end="19:46"><expr pos:start="19:36" pos:end="19:46"><call pos:start="19:36" pos:end="19:46"><name pos:start="19:36" pos:end="19:41">OBJECT</name><argument_list pos:start="19:42" pos:end="19:46">(<argument pos:start="19:43" pos:end="19:45"><expr pos:start="19:43" pos:end="19:45"><name pos:start="19:43" pos:end="19:45">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:49" pos:end="19:61"><expr pos:start="19:49" pos:end="19:61"><name pos:start="19:49" pos:end="19:61">ICP_PROP_XICS</name></expr></argument>, <argument pos:start="19:64" pos:end="19:67"><expr pos:start="19:64" pos:end="19:67"><operator pos:start="19:64" pos:end="19:64">&amp;</operator><name pos:start="19:65" pos:end="19:67">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">obj</name></expr>)</condition> <block pos:start="21:15" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="25:52"><expr pos:start="23:9" pos:end="25:51"><call pos:start="23:9" pos:end="25:51"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="25:51">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:78"><expr pos:start="23:26" pos:end="23:78"><literal type="string" pos:start="23:26" pos:end="23:46">"%s: required link '"</literal> <name pos:start="23:48" pos:end="23:60">ICP_PROP_XICS</name> <literal type="string" pos:start="23:62" pos:end="23:78">"' not found: %s"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27">__func__</name></expr></argument>, <argument pos:start="25:30" pos:end="25:50"><expr pos:start="25:30" pos:end="25:50"><call pos:start="25:30" pos:end="25:50"><name pos:start="25:30" pos:end="25:45">error_get_pretty</name><argument_list pos:start="25:46" pos:end="25:50">(<argument pos:start="25:47" pos:end="25:49"><expr pos:start="25:47" pos:end="25:49"><name pos:start="25:47" pos:end="25:49">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:33"><expr pos:start="33:5" pos:end="33:32"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:7">icp</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:13">xics</name></name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:27">XICS_FABRIC</name><argument_list pos:start="33:28" pos:end="33:32">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:68"><expr pos:start="37:5" pos:end="37:67"><name pos:start="37:5" pos:end="37:7">obj</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:67"><name pos:start="37:11" pos:end="37:34">object_property_get_link</name><argument_list pos:start="37:35" pos:end="37:67">(<argument pos:start="37:36" pos:end="37:46"><expr pos:start="37:36" pos:end="37:46"><call pos:start="37:36" pos:end="37:46"><name pos:start="37:36" pos:end="37:41">OBJECT</name><argument_list pos:start="37:42" pos:end="37:46">(<argument pos:start="37:43" pos:end="37:45"><expr pos:start="37:43" pos:end="37:45"><name pos:start="37:43" pos:end="37:45">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:49" pos:end="37:60"><expr pos:start="37:49" pos:end="37:60"><name pos:start="37:49" pos:end="37:60">ICP_PROP_CPU</name></expr></argument>, <argument pos:start="37:63" pos:end="37:66"><expr pos:start="37:63" pos:end="37:66"><operator pos:start="37:63" pos:end="37:63">&amp;</operator><name pos:start="37:64" pos:end="37:66">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:12">obj</name></expr>)</condition> <block pos:start="39:15" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:15">

        <expr_stmt pos:start="41:9" pos:end="43:52"><expr pos:start="41:9" pos:end="43:51"><call pos:start="41:9" pos:end="43:51"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="43:51">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:77"><expr pos:start="41:26" pos:end="41:77"><literal type="string" pos:start="41:26" pos:end="41:46">"%s: required link '"</literal> <name pos:start="41:48" pos:end="41:59">ICP_PROP_CPU</name> <literal type="string" pos:start="41:61" pos:end="41:77">"' not found: %s"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:27"><expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:27">__func__</name></expr></argument>, <argument pos:start="43:30" pos:end="43:50"><expr pos:start="43:30" pos:end="43:50"><call pos:start="43:30" pos:end="43:50"><name pos:start="43:30" pos:end="43:45">error_get_pretty</name><argument_list pos:start="43:46" pos:end="43:50">(<argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><name pos:start="43:47" pos:end="43:49">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:7">cpu</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:26"><name pos:start="51:11" pos:end="51:21">POWERPC_CPU</name><argument_list pos:start="51:22" pos:end="51:26">(<argument pos:start="51:23" pos:end="51:25"><expr pos:start="51:23" pos:end="51:25"><name pos:start="51:23" pos:end="51:25">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:13"><name pos:start="53:5" pos:end="53:7">cpu</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:13">intc</name></name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:22">OBJECT</name><argument_list pos:start="53:23" pos:end="53:27">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">icp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:7">icp</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:11">cs</name></name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:22"><name pos:start="55:15" pos:end="55:17">CPU</name><argument_list pos:start="55:18" pos:end="55:22">(<argument pos:start="55:19" pos:end="55:21"><expr pos:start="55:19" pos:end="55:21"><name pos:start="55:19" pos:end="55:21">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:7">env</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <operator pos:start="59:11" pos:end="59:11">&amp;</operator><name pos:start="59:12" pos:end="59:19"><name pos:start="59:12" pos:end="59:14">cpu</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:19">env</name></name></expr>;</expr_stmt>

    <switch pos:start="61:5" pos:end="85:5">switch <condition pos:start="61:12" pos:end="61:27">(<expr pos:start="61:13" pos:end="61:26"><call pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:21">PPC_INPUT</name><argument_list pos:start="61:22" pos:end="61:26">(<argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:29" pos:end="85:5">{<block_content pos:start="63:5" pos:end="83:15">

    <case pos:start="63:5" pos:end="63:32">case <expr pos:start="63:10" pos:end="63:31"><name pos:start="63:10" pos:end="63:31">PPC_FLAGS_INPUT_POWER7</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:11">icp</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:19">output</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:55"><name pos:start="65:23" pos:end="65:25">env</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:37">irq_inputs</name><index pos:start="65:38" pos:end="65:55">[<expr pos:start="65:39" pos:end="65:54"><name pos:start="65:39" pos:end="65:54">POWER7_INPUT_INT</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>



    <case pos:start="71:5" pos:end="71:29">case <expr pos:start="71:10" pos:end="71:28"><name pos:start="71:10" pos:end="71:28">PPC_FLAGS_INPUT_970</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:56"><expr pos:start="73:9" pos:end="73:55"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:11">icp</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:19">output</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:55"><name pos:start="73:23" pos:end="73:25">env</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:37">irq_inputs</name><index pos:start="73:38" pos:end="73:55">[<expr pos:start="73:39" pos:end="73:54"><name pos:start="73:39" pos:end="73:54">PPC970_INPUT_INT</name></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>



    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="81:90"><expr pos:start="81:9" pos:end="81:89"><call pos:start="81:9" pos:end="81:89"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:89">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:88"><expr pos:start="81:26" pos:end="81:88"><literal type="string" pos:start="81:26" pos:end="81:88">"XICS interrupt controller does not support this CPU bus model"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:15">return;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:22">(<expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:12">icpc</name><operator pos:start="89:13" pos:end="89:14">-&gt;</operator><name pos:start="89:15" pos:end="89:21">realize</name></name></expr>)</condition> <block pos:start="89:24" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:33">

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><call pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:12">icpc</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:21">realize</name></name><argument_list pos:start="91:22" pos:end="91:32">(<argument pos:start="91:23" pos:end="91:25"><expr pos:start="91:23" pos:end="91:25"><name pos:start="91:23" pos:end="91:25">icp</name></expr></argument>, <argument pos:start="91:28" pos:end="91:31"><expr pos:start="91:28" pos:end="91:31"><name pos:start="91:28" pos:end="91:31">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:40"><expr pos:start="97:5" pos:end="97:39"><call pos:start="97:5" pos:end="97:39"><name pos:start="97:5" pos:end="97:23">qemu_register_reset</name><argument_list pos:start="97:24" pos:end="97:39">(<argument pos:start="97:25" pos:end="97:33"><expr pos:start="97:25" pos:end="97:33"><name pos:start="97:25" pos:end="97:33">icp_reset</name></expr></argument>, <argument pos:start="97:36" pos:end="97:38"><expr pos:start="97:36" pos:end="97:38"><name pos:start="97:36" pos:end="97:38">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:73"><expr pos:start="99:5" pos:end="99:72"><call pos:start="99:5" pos:end="99:72"><name pos:start="99:5" pos:end="99:20">vmstate_register</name><argument_list pos:start="99:21" pos:end="99:72">(<argument pos:start="99:22" pos:end="99:25"><expr pos:start="99:22" pos:end="99:25"><name pos:start="99:22" pos:end="99:25">NULL</name></expr></argument>, <argument pos:start="99:28" pos:end="99:45"><expr pos:start="99:28" pos:end="99:45"><name pos:start="99:28" pos:end="99:45"><name pos:start="99:28" pos:end="99:30">icp</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:34">cs</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:45">cpu_index</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:66"><expr pos:start="99:48" pos:end="99:66"><operator pos:start="99:48" pos:end="99:48">&amp;</operator><name pos:start="99:49" pos:end="99:66">vmstate_icp_server</name></expr></argument>, <argument pos:start="99:69" pos:end="99:71"><expr pos:start="99:69" pos:end="99:71"><name pos:start="99:69" pos:end="99:71">icp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
