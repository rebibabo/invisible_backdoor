<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7750.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:37">ppc_radix64_walk_tree</name><parameter_list pos:start="1:38" pos:end="9:55">(<parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:48">PowerPCCPU</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">cpu</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:62"><decl pos:start="1:56" pos:end="1:62"><type pos:start="1:56" pos:end="1:62"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:62">rwx</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:75"><decl pos:start="1:65" pos:end="1:75"><type pos:start="1:65" pos:end="1:75"><name pos:start="1:65" pos:end="1:69">vaddr</name></type> <name pos:start="1:71" pos:end="1:75">eaddr</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:56"><decl pos:start="3:39" pos:end="3:56"><type pos:start="3:39" pos:end="3:56"><name pos:start="3:39" pos:end="3:46">uint64_t</name></type> <name pos:start="3:48" pos:end="3:56">base_addr</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:66">uint64_t</name></type> <name pos:start="3:68" pos:end="3:70">nls</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:44">hwaddr</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:51">raddr</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:63"><decl pos:start="5:54" pos:end="5:63"><type pos:start="5:54" pos:end="5:63"><name pos:start="5:54" pos:end="5:56">int</name> <modifier pos:start="5:58" pos:end="5:58">*</modifier></type><name pos:start="5:59" pos:end="5:63">psize</name></decl></parameter>,

                                      <parameter pos:start="7:39" pos:end="7:54"><decl pos:start="7:39" pos:end="7:54"><type pos:start="7:39" pos:end="7:54"><name pos:start="7:39" pos:end="7:41">int</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:54">fault_cause</name></decl></parameter>, <parameter pos:start="7:57" pos:end="7:65"><decl pos:start="7:57" pos:end="7:65"><type pos:start="7:57" pos:end="7:65"><name pos:start="7:57" pos:end="7:59">int</name> <modifier pos:start="7:61" pos:end="7:61">*</modifier></type><name pos:start="7:62" pos:end="7:65">prot</name></decl></parameter>,

                                      <parameter pos:start="9:39" pos:end="9:54"><decl pos:start="9:39" pos:end="9:54"><type pos:start="9:39" pos:end="9:54"><name pos:start="9:39" pos:end="9:44">hwaddr</name> <modifier pos:start="9:46" pos:end="9:46">*</modifier></type><name pos:start="9:47" pos:end="9:54">pte_addr</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="89:1">{<block_content pos:start="13:5" pos:end="87:62">

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">cs</name> <init pos:start="13:18" pos:end="13:27">= <expr pos:start="13:20" pos:end="13:27"><call pos:start="13:20" pos:end="13:27"><name pos:start="13:20" pos:end="13:22">CPU</name><argument_list pos:start="13:23" pos:end="13:27">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:18">index</name></decl>, <decl pos:start="15:21" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:21" pos:end="15:23">pde</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">nls</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">5</literal></expr>)</condition> <block pos:start="19:18" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17"> <comment type="block" pos:start="19:20" pos:end="19:62">/* Directory maps less than 2**5 entries */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:20">fault_cause</name> <operator pos:start="21:22" pos:end="21:23">|=</operator> <name pos:start="21:25" pos:end="21:41">DSISR_R_BADCONFIG</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:68">/* Read page &lt;directory/table&gt; entry from guest address space */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:9">index</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:17">eaddr</name> <operator pos:start="31:19" pos:end="31:20">&gt;&gt;</operator> <operator pos:start="31:22" pos:end="31:22">(</operator><operator pos:start="31:23" pos:end="31:23">*</operator><name pos:start="31:24" pos:end="31:28">psize</name> <operator pos:start="31:30" pos:end="31:30">-</operator> <name pos:start="31:32" pos:end="31:34">nls</name><operator pos:start="31:35" pos:end="31:35">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="31:38" pos:end="31:48">/* Shift */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:9">index</name> <operator pos:start="33:11" pos:end="33:12">&amp;=</operator> <operator pos:start="33:14" pos:end="33:14">(</operator><operator pos:start="33:15" pos:end="33:15">(</operator><literal type="number" pos:start="33:16" pos:end="33:18">1UL</literal> <operator pos:start="33:20" pos:end="33:21">&lt;&lt;</operator> <name pos:start="33:23" pos:end="33:25">nls</name><operator pos:start="33:26" pos:end="33:26">)</operator> <operator pos:start="33:28" pos:end="33:28">-</operator> <literal type="number" pos:start="33:30" pos:end="33:30">1</literal><operator pos:start="33:31" pos:end="33:31">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="33:34" pos:end="33:43">/* Mask */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:62"><expr pos:start="35:5" pos:end="35:61"><name pos:start="35:5" pos:end="35:7">pde</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:61"><name pos:start="35:11" pos:end="35:18">ldq_phys</name><argument_list pos:start="35:19" pos:end="35:61">(<argument pos:start="35:20" pos:end="35:25"><expr pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:25"><name pos:start="35:20" pos:end="35:21">cs</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:25">as</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:60"><expr pos:start="35:28" pos:end="35:60"><name pos:start="35:28" pos:end="35:36">base_addr</name> <operator pos:start="35:38" pos:end="35:38">+</operator> <operator pos:start="35:40" pos:end="35:40">(</operator><name pos:start="35:41" pos:end="35:45">index</name> <operator pos:start="35:47" pos:end="35:47">*</operator> <sizeof pos:start="35:49" pos:end="35:59">sizeof<argument_list pos:start="35:55" pos:end="35:59">(<argument pos:start="35:56" pos:end="35:58"><expr pos:start="35:56" pos:end="35:58"><name pos:start="35:56" pos:end="35:58">pde</name></expr></argument>)</argument_list></sizeof><operator pos:start="35:60" pos:end="35:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:29">(<expr pos:start="37:9" pos:end="37:28"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:13">pde</name> <operator pos:start="37:15" pos:end="37:15">&amp;</operator> <name pos:start="37:17" pos:end="37:27">R_PTE_VALID</name><operator pos:start="37:28" pos:end="37:28">)</operator></expr>)</condition> <block pos:start="37:31" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17"> <comment type="block" pos:start="37:33" pos:end="37:51">/* Invalid Entry */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:20">fault_cause</name> <operator pos:start="39:22" pos:end="39:23">|=</operator> <name pos:start="39:25" pos:end="39:35">DSISR_NOPTE</name></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:17">return <expr pos:start="41:16" pos:end="41:16"><literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:10">psize</name> <operator pos:start="47:12" pos:end="47:13">-=</operator> <name pos:start="47:15" pos:end="47:17">nls</name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:68">/* Check if Leaf Entry -&gt; Page Table Entry -&gt; Stop the Search */</comment>

    <if_stmt pos:start="53:5" pos:end="77:5"><if pos:start="53:5" pos:end="77:5">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:11">pde</name> <operator pos:start="53:13" pos:end="53:13">&amp;</operator> <name pos:start="53:15" pos:end="53:24">R_PTE_LEAF</name></expr>)</condition> <block pos:start="53:27" pos:end="77:5">{<block_content pos:start="55:9" pos:end="75:19">

        <decl_stmt pos:start="55:9" pos:end="55:39"><decl pos:start="55:9" pos:end="55:38"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint64_t</name></type> <name pos:start="55:18" pos:end="55:20">rpn</name> <init pos:start="55:22" pos:end="55:38">= <expr pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:26">pde</name> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <name pos:start="55:30" pos:end="55:38">R_PTE_RPN</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:44"><decl pos:start="57:9" pos:end="57:43"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">uint64_t</name></type> <name pos:start="57:18" pos:end="57:21">mask</name> <init pos:start="57:23" pos:end="57:43">= <expr pos:start="57:25" pos:end="57:43"><operator pos:start="57:25" pos:end="57:25">(</operator><literal type="number" pos:start="57:26" pos:end="57:28">1UL</literal> <operator pos:start="57:30" pos:end="57:31">&lt;&lt;</operator> <operator pos:start="57:33" pos:end="57:33">*</operator><name pos:start="57:34" pos:end="57:38">psize</name><operator pos:start="57:39" pos:end="57:39">)</operator> <operator pos:start="57:41" pos:end="57:41">-</operator> <literal type="number" pos:start="57:43" pos:end="57:43">1</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:69">(<expr pos:start="61:13" pos:end="61:68"><call pos:start="61:13" pos:end="61:68"><name pos:start="61:13" pos:end="61:34">ppc_radix64_check_prot</name><argument_list pos:start="61:35" pos:end="61:68">(<argument pos:start="61:36" pos:end="61:38"><expr pos:start="61:36" pos:end="61:38"><name pos:start="61:36" pos:end="61:38">cpu</name></expr></argument>, <argument pos:start="61:41" pos:end="61:43"><expr pos:start="61:41" pos:end="61:43"><name pos:start="61:41" pos:end="61:43">rwx</name></expr></argument>, <argument pos:start="61:46" pos:end="61:48"><expr pos:start="61:46" pos:end="61:48"><name pos:start="61:46" pos:end="61:48">pde</name></expr></argument>, <argument pos:start="61:51" pos:end="61:61"><expr pos:start="61:51" pos:end="61:61"><name pos:start="61:51" pos:end="61:61">fault_cause</name></expr></argument>, <argument pos:start="61:64" pos:end="61:67"><expr pos:start="61:64" pos:end="61:67"><name pos:start="61:64" pos:end="61:67">prot</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:71" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:21">

            <return pos:start="63:13" pos:end="63:21">return <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</return> <comment type="block" pos:start="63:23" pos:end="63:52">/* Protection Denied Access */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:76">/* Or high bits of rpn and low bits to ea to form whole real addr */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:48"><expr pos:start="71:9" pos:end="71:47"><operator pos:start="71:9" pos:end="71:9">*</operator><name pos:start="71:10" pos:end="71:14">raddr</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <operator pos:start="71:18" pos:end="71:18">(</operator><name pos:start="71:19" pos:end="71:21">rpn</name> <operator pos:start="71:23" pos:end="71:23">&amp;</operator> <operator pos:start="71:25" pos:end="71:25">~</operator><name pos:start="71:26" pos:end="71:29">mask</name><operator pos:start="71:30" pos:end="71:30">)</operator> <operator pos:start="71:32" pos:end="71:32">|</operator> <operator pos:start="71:34" pos:end="71:34">(</operator><name pos:start="71:35" pos:end="71:39">eaddr</name> <operator pos:start="71:41" pos:end="71:41">&amp;</operator> <name pos:start="71:43" pos:end="71:46">mask</name><operator pos:start="71:47" pos:end="71:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:54"><expr pos:start="73:9" pos:end="73:53"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:17">pte_addr</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:29">base_addr</name> <operator pos:start="73:31" pos:end="73:31">+</operator> <operator pos:start="73:33" pos:end="73:33">(</operator><name pos:start="73:34" pos:end="73:38">index</name> <operator pos:start="73:40" pos:end="73:40">*</operator> <sizeof pos:start="73:42" pos:end="73:52">sizeof<argument_list pos:start="73:48" pos:end="73:52">(<argument pos:start="73:49" pos:end="73:51"><expr pos:start="73:49" pos:end="73:51"><name pos:start="73:49" pos:end="73:51">pde</name></expr></argument>)</argument_list></sizeof><operator pos:start="73:53" pos:end="73:53">)</operator></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:19">return <expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">pde</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:34">/* Next Level of Radix Tree */</comment>

    <return pos:start="83:5" pos:end="87:62">return <expr pos:start="83:12" pos:end="87:61"><call pos:start="83:12" pos:end="87:61"><name pos:start="83:12" pos:end="83:32">ppc_radix64_walk_tree</name><argument_list pos:start="83:33" pos:end="87:61">(<argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">cpu</name></expr></argument>, <argument pos:start="83:39" pos:end="83:41"><expr pos:start="83:39" pos:end="83:41"><name pos:start="83:39" pos:end="83:41">rwx</name></expr></argument>, <argument pos:start="83:44" pos:end="83:48"><expr pos:start="83:44" pos:end="83:48"><name pos:start="83:44" pos:end="83:48">eaddr</name></expr></argument>, <argument pos:start="83:51" pos:end="83:65"><expr pos:start="83:51" pos:end="83:65"><name pos:start="83:51" pos:end="83:53">pde</name> <operator pos:start="83:55" pos:end="83:55">&amp;</operator> <name pos:start="83:57" pos:end="83:65">R_PDE_NLB</name></expr></argument>,

                                 <argument pos:start="85:34" pos:end="85:48"><expr pos:start="85:34" pos:end="85:48"><name pos:start="85:34" pos:end="85:36">pde</name> <operator pos:start="85:38" pos:end="85:38">&amp;</operator> <name pos:start="85:40" pos:end="85:48">R_PDE_NLS</name></expr></argument>, <argument pos:start="85:51" pos:end="85:55"><expr pos:start="85:51" pos:end="85:55"><name pos:start="85:51" pos:end="85:55">raddr</name></expr></argument>, <argument pos:start="85:58" pos:end="85:62"><expr pos:start="85:58" pos:end="85:62"><name pos:start="85:58" pos:end="85:62">psize</name></expr></argument>,

                                 <argument pos:start="87:34" pos:end="87:44"><expr pos:start="87:34" pos:end="87:44"><name pos:start="87:34" pos:end="87:44">fault_cause</name></expr></argument>, <argument pos:start="87:47" pos:end="87:50"><expr pos:start="87:47" pos:end="87:50"><name pos:start="87:47" pos:end="87:50">prot</name></expr></argument>, <argument pos:start="87:53" pos:end="87:60"><expr pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:60">pte_addr</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
