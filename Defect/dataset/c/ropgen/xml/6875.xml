<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6875.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">CodeBook</name></type> <name pos:start="1:17" pos:end="1:31">unpack_codebook</name><parameter_list pos:start="1:32" pos:end="3:47">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:45">GetBitContext</name><modifier pos:start="1:46" pos:end="1:46">*</modifier></type> <name pos:start="1:48" pos:end="1:49">gb</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:59">unsigned</name></type> <name pos:start="1:61" pos:end="1:65">depth</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:46"><decl pos:start="3:34" pos:end="3:46"><type pos:start="3:34" pos:end="3:46"><name pos:start="3:34" pos:end="3:41">unsigned</name></type> <name pos:start="3:43" pos:end="3:46">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:14">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:17" pos:end="7:17">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">CodeBook</name></type> <name pos:start="9:14" pos:end="9:15">cb</name> <init pos:start="9:17" pos:end="9:23">= <expr pos:start="9:19" pos:end="9:23"><block pos:start="9:19" pos:end="9:23">{ <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if <condition pos:start="13:8" pos:end="13:50">(<expr pos:start="13:9" pos:end="13:49"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:49"><name pos:start="13:10" pos:end="13:24">can_safely_read</name><argument_list pos:start="13:25" pos:end="13:49">(<argument pos:start="13:26" pos:end="13:27"><expr pos:start="13:26" pos:end="13:27"><name pos:start="13:26" pos:end="13:27">gb</name></expr></argument>, <argument pos:start="13:30" pos:end="13:48"><expr pos:start="13:30" pos:end="13:48"><operator pos:start="13:30" pos:end="13:30">(</operator><name pos:start="13:31" pos:end="13:38">uint64_t</name><operator pos:start="13:39" pos:end="13:39">)</operator><name pos:start="13:40" pos:end="13:43">size</name> <operator pos:start="13:45" pos:end="13:45">*</operator> <literal type="number" pos:start="13:47" pos:end="13:48">34</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18">

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><name pos:start="15:16" pos:end="15:17">cb</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:45">(<expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:15">&gt;=</operator> <name pos:start="19:17" pos:end="19:23">INT_MAX</name> <operator pos:start="19:25" pos:end="19:25">/</operator> <sizeof pos:start="19:27" pos:end="19:44">sizeof<argument_list pos:start="19:33" pos:end="19:44">(<argument pos:start="19:34" pos:end="19:43"><expr pos:start="19:34" pos:end="19:43"><name pos:start="19:34" pos:end="19:43">MacroBlock</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><name pos:start="21:16" pos:end="21:17">cb</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:64"><expr pos:start="23:5" pos:end="23:63"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:6">cb</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:13">blocks</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:63"><name pos:start="23:17" pos:end="23:25">av_malloc</name><argument_list pos:start="23:26" pos:end="23:63">(<argument pos:start="23:27" pos:end="23:62"><expr pos:start="23:27" pos:end="23:62"><ternary pos:start="23:27" pos:end="23:62"><condition pos:start="23:27" pos:end="23:32"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">size</name></expr> ?</condition><then pos:start="23:34" pos:end="23:58"> <expr pos:start="23:34" pos:end="23:58"><name pos:start="23:34" pos:end="23:37">size</name> <operator pos:start="23:39" pos:end="23:39">*</operator> <sizeof pos:start="23:41" pos:end="23:58">sizeof<argument_list pos:start="23:47" pos:end="23:58">(<argument pos:start="23:48" pos:end="23:57"><expr pos:start="23:48" pos:end="23:57"><name pos:start="23:48" pos:end="23:57">MacroBlock</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="23:60" pos:end="23:62">: <expr pos:start="23:62" pos:end="23:62"><literal type="number" pos:start="23:62" pos:end="23:62">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18"><name pos:start="25:10" pos:end="25:11">cb</name><operator pos:start="25:12" pos:end="25:12">.</operator><name pos:start="25:13" pos:end="25:18">blocks</name></name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><name pos:start="27:16" pos:end="27:17">cb</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:21"><expr pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:6">cb</name><operator pos:start="31:7" pos:end="31:7">.</operator><name pos:start="31:8" pos:end="31:12">depth</name></name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:20">depth</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:19"><expr pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:6">cb</name><operator pos:start="33:7" pos:end="33:7">.</operator><name pos:start="33:8" pos:end="33:11">size</name></name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:18">size</name></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="57:5">for <control pos:start="35:9" pos:end="35:30">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:25"><expr pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:24">size</name></expr>;</condition> <incr pos:start="35:27" pos:end="35:29"><expr pos:start="35:27" pos:end="35:29"><name pos:start="35:27" pos:end="35:27">i</name><operator pos:start="35:28" pos:end="35:29">++</operator></expr></incr>)</control> <block pos:start="35:32" pos:end="57:5">{<block_content pos:start="37:9" pos:end="55:9">

        <decl_stmt pos:start="37:9" pos:end="37:45"><decl pos:start="37:9" pos:end="37:44"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">unsigned</name></type> <name pos:start="37:18" pos:end="37:26">mask_bits</name> <init pos:start="37:28" pos:end="37:44">= <expr pos:start="37:30" pos:end="37:44"><call pos:start="37:30" pos:end="37:44"><name pos:start="37:30" pos:end="37:37">get_bits</name><argument_list pos:start="37:38" pos:end="37:44">(<argument pos:start="37:39" pos:end="37:40"><expr pos:start="37:39" pos:end="37:40"><name pos:start="37:39" pos:end="37:40">gb</name></expr></argument>, <argument pos:start="37:43" pos:end="37:43"><expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:43"><decl pos:start="39:9" pos:end="39:42"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">unsigned</name></type> <name pos:start="39:18" pos:end="39:23">color0</name> <init pos:start="39:25" pos:end="39:42">= <expr pos:start="39:27" pos:end="39:42"><call pos:start="39:27" pos:end="39:42"><name pos:start="39:27" pos:end="39:34">get_bits</name><argument_list pos:start="39:35" pos:end="39:42">(<argument pos:start="39:36" pos:end="39:37"><expr pos:start="39:36" pos:end="39:37"><name pos:start="39:36" pos:end="39:37">gb</name></expr></argument>, <argument pos:start="39:40" pos:end="39:41"><expr pos:start="39:40" pos:end="39:41"><literal type="number" pos:start="39:40" pos:end="39:41">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:43"><decl pos:start="41:9" pos:end="41:42"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">unsigned</name></type> <name pos:start="41:18" pos:end="41:23">color1</name> <init pos:start="41:25" pos:end="41:42">= <expr pos:start="41:27" pos:end="41:42"><call pos:start="41:27" pos:end="41:42"><name pos:start="41:27" pos:end="41:34">get_bits</name><argument_list pos:start="41:35" pos:end="41:42">(<argument pos:start="41:36" pos:end="41:37"><expr pos:start="41:36" pos:end="41:37"><name pos:start="41:36" pos:end="41:37">gb</name></expr></argument>, <argument pos:start="41:40" pos:end="41:41"><expr pos:start="41:40" pos:end="41:41"><literal type="number" pos:start="41:40" pos:end="41:41">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <for pos:start="45:9" pos:end="55:9">for <control pos:start="45:13" pos:end="45:31">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">j</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:21">j</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <literal type="number" pos:start="45:25" pos:end="45:25">4</literal></expr>;</condition> <incr pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:28">j</name><operator pos:start="45:29" pos:end="45:30">++</operator></expr></incr>)</control> <block pos:start="45:33" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:48">

            <if_stmt pos:start="47:13" pos:end="53:48"><if pos:start="47:13" pos:end="49:48">if <condition pos:start="47:16" pos:end="47:37">(<expr pos:start="47:17" pos:end="47:36"><name pos:start="47:17" pos:end="47:25">mask_bits</name> <operator pos:start="47:27" pos:end="47:27">&amp;</operator> <operator pos:start="47:29" pos:end="47:29">(</operator><literal type="number" pos:start="47:30" pos:end="47:30">1</literal> <operator pos:start="47:32" pos:end="47:33">&lt;&lt;</operator> <name pos:start="47:35" pos:end="47:35">j</name><operator pos:start="47:36" pos:end="47:36">)</operator></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:48"><block_content pos:start="49:17" pos:end="49:48">

                <expr_stmt pos:start="49:17" pos:end="49:48"><expr pos:start="49:17" pos:end="49:47"><name pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:18">cb</name><operator pos:start="49:19" pos:end="49:19">.</operator><name pos:start="49:20" pos:end="49:25">blocks</name><index pos:start="49:26" pos:end="49:28">[<expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">i</name></expr>]</index></name><operator pos:start="49:29" pos:end="49:29">.</operator><name pos:start="49:30" pos:end="49:38"><name pos:start="49:30" pos:end="49:35">pixels</name><index pos:start="49:36" pos:end="49:38">[<expr pos:start="49:37" pos:end="49:37"><name pos:start="49:37" pos:end="49:37">j</name></expr>]</index></name> <operator pos:start="49:40" pos:end="49:40">=</operator> <name pos:start="49:42" pos:end="49:47">color1</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="51:13" pos:end="53:48">else<block type="pseudo" pos:start="53:17" pos:end="53:48"><block_content pos:start="53:17" pos:end="53:48">

                <expr_stmt pos:start="53:17" pos:end="53:48"><expr pos:start="53:17" pos:end="53:47"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:18">cb</name><operator pos:start="53:19" pos:end="53:19">.</operator><name pos:start="53:20" pos:end="53:25">blocks</name><index pos:start="53:26" pos:end="53:28">[<expr pos:start="53:27" pos:end="53:27"><name pos:start="53:27" pos:end="53:27">i</name></expr>]</index></name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:35">pixels</name><index pos:start="53:36" pos:end="53:38">[<expr pos:start="53:37" pos:end="53:37"><name pos:start="53:37" pos:end="53:37">j</name></expr>]</index></name> <operator pos:start="53:40" pos:end="53:40">=</operator> <name pos:start="53:42" pos:end="53:47">color0</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="59:5" pos:end="59:14">return <expr pos:start="59:12" pos:end="59:13"><name pos:start="59:12" pos:end="59:13">cb</name></expr>;</return>

</block_content>}</block></function>
</unit>
