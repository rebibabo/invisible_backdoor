<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16244.c" pos:tabs="8"><function pos:start="1:1" pos:end="725:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:75"><decl pos:start="1:39" pos:end="1:75"><type pos:start="1:39" pos:end="1:75"><name pos:start="1:39" pos:end="1:56">BlockInterfaceType</name></type> <name pos:start="1:58" pos:end="1:75">block_default_type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="725:1">{<block_content pos:start="5:5" pos:end="723:16">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">file</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">mediastr</name> <init pos:start="11:26" pos:end="11:29">= <expr pos:start="11:28" pos:end="11:29"><literal type="string" pos:start="11:28" pos:end="11:29">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:22">BlockInterfaceType</name></type> <name pos:start="13:24" pos:end="13:27">type</name></decl>;</decl_stmt>

    <enum pos:start="15:5" pos:end="15:43">enum <block pos:start="15:10" pos:end="15:36">{ <decl pos:start="15:12" pos:end="15:21"><name pos:start="15:12" pos:end="15:21">MEDIA_DISK</name></decl>, <decl pos:start="15:24" pos:end="15:34"><name pos:start="15:24" pos:end="15:34">MEDIA_CDROM</name></decl> }</block> <decl pos:start="15:38" pos:end="15:42"><name pos:start="15:38" pos:end="15:42">media</name></decl>;</enum>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">bus_id</name></decl>, <decl pos:start="17:17" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:17" pos:end="17:23">unit_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">cyls</name></decl>, <decl pos:start="19:15" pos:end="19:19"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:19">heads</name></decl>, <decl pos:start="19:22" pos:end="19:25"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:22" pos:end="19:25">secs</name></decl>, <decl pos:start="19:28" pos:end="19:38"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:28" pos:end="19:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">BlockDriver</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">drv</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">max_devs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:15"><decl pos:start="27:5" pos:end="27:14"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:10">ro</name> <init pos:start="27:12" pos:end="27:14">= <expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">bdrv_flags</name> <init pos:start="29:20" pos:end="29:22">= <expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:38"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:21">on_read_error</name></decl>, <decl pos:start="31:24" pos:end="31:37"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:24" pos:end="31:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:24"><decl pos:start="33:5" pos:end="33:23"><type pos:start="33:5" pos:end="33:16"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:14">char</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">DriveInfo</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:27"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:16">BlockIOLimit</name></type> <name pos:start="37:18" pos:end="37:26">io_limits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:16">snapshot</name> <init pos:start="39:18" pos:end="39:20">= <expr pos:start="39:20" pos:end="39:20"><literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">bool</name></type> <name pos:start="41:10" pos:end="41:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:12"><decl pos:start="43:5" pos:end="43:11"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:15">translation</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:9">media</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <name pos:start="49:13" pos:end="49:22">MEDIA_DISK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:28">/* extract parameters */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:10">bus_id</name>  <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:49"><name pos:start="55:15" pos:end="55:33">qemu_opt_get_number</name><argument_list pos:start="55:34" pos:end="55:49">(<argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">opts</name></expr></argument>, <argument pos:start="55:41" pos:end="55:45"><expr pos:start="55:41" pos:end="55:45"><literal type="string" pos:start="55:41" pos:end="55:45">"bus"</literal></expr></argument>, <argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><literal type="number" pos:start="55:48" pos:end="55:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:11">unit_id</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:51"><name pos:start="57:15" pos:end="57:33">qemu_opt_get_number</name><argument_list pos:start="57:34" pos:end="57:51">(<argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">opts</name></expr></argument>, <argument pos:start="57:41" pos:end="57:46"><expr pos:start="57:41" pos:end="57:46"><literal type="string" pos:start="57:41" pos:end="57:46">"unit"</literal></expr></argument>, <argument pos:start="57:49" pos:end="57:50"><expr pos:start="57:49" pos:end="57:50"><operator pos:start="57:49" pos:end="57:49">-</operator><literal type="number" pos:start="57:50" pos:end="57:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:53"><expr pos:start="59:5" pos:end="59:52"><name pos:start="59:5" pos:end="59:9">index</name>   <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:52"><name pos:start="59:15" pos:end="59:33">qemu_opt_get_number</name><argument_list pos:start="59:34" pos:end="59:52">(<argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">opts</name></expr></argument>, <argument pos:start="59:41" pos:end="59:47"><expr pos:start="59:41" pos:end="59:47"><literal type="string" pos:start="59:41" pos:end="59:47">"index"</literal></expr></argument>, <argument pos:start="59:50" pos:end="59:51"><expr pos:start="59:50" pos:end="59:51"><operator pos:start="59:50" pos:end="59:50">-</operator><literal type="number" pos:start="59:51" pos:end="59:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:8">cyls</name>  <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:48"><name pos:start="63:13" pos:end="63:31">qemu_opt_get_number</name><argument_list pos:start="63:32" pos:end="63:48">(<argument pos:start="63:33" pos:end="63:36"><expr pos:start="63:33" pos:end="63:36"><name pos:start="63:33" pos:end="63:36">opts</name></expr></argument>, <argument pos:start="63:39" pos:end="63:44"><expr pos:start="63:39" pos:end="63:44"><literal type="string" pos:start="63:39" pos:end="63:44">"cyls"</literal></expr></argument>, <argument pos:start="63:47" pos:end="63:47"><expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:50"><expr pos:start="65:5" pos:end="65:49"><name pos:start="65:5" pos:end="65:9">heads</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:49"><name pos:start="65:13" pos:end="65:31">qemu_opt_get_number</name><argument_list pos:start="65:32" pos:end="65:49">(<argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">opts</name></expr></argument>, <argument pos:start="65:39" pos:end="65:45"><expr pos:start="65:39" pos:end="65:45"><literal type="string" pos:start="65:39" pos:end="65:45">"heads"</literal></expr></argument>, <argument pos:start="65:48" pos:end="65:48"><expr pos:start="65:48" pos:end="65:48"><literal type="number" pos:start="65:48" pos:end="65:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:49"><expr pos:start="67:5" pos:end="67:48"><name pos:start="67:5" pos:end="67:8">secs</name>  <operator pos:start="67:11" pos:end="67:11">=</operator> <call pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:31">qemu_opt_get_number</name><argument_list pos:start="67:32" pos:end="67:48">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">opts</name></expr></argument>, <argument pos:start="67:39" pos:end="67:44"><expr pos:start="67:39" pos:end="67:44"><literal type="string" pos:start="67:39" pos:end="67:44">"secs"</literal></expr></argument>, <argument pos:start="67:47" pos:end="67:47"><expr pos:start="67:47" pos:end="67:47"><literal type="number" pos:start="67:47" pos:end="67:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:54"><expr pos:start="71:5" pos:end="71:53"><name pos:start="71:5" pos:end="71:12">snapshot</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <call pos:start="71:16" pos:end="71:53"><name pos:start="71:16" pos:end="71:32">qemu_opt_get_bool</name><argument_list pos:start="71:33" pos:end="71:53">(<argument pos:start="71:34" pos:end="71:37"><expr pos:start="71:34" pos:end="71:37"><name pos:start="71:34" pos:end="71:37">opts</name></expr></argument>, <argument pos:start="71:40" pos:end="71:49"><expr pos:start="71:40" pos:end="71:49"><literal type="string" pos:start="71:40" pos:end="71:49">"snapshot"</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:52"><expr pos:start="71:52" pos:end="71:52"><literal type="number" pos:start="71:52" pos:end="71:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:6">ro</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <call pos:start="73:10" pos:end="73:47"><name pos:start="73:10" pos:end="73:26">qemu_opt_get_bool</name><argument_list pos:start="73:27" pos:end="73:47">(<argument pos:start="73:28" pos:end="73:31"><expr pos:start="73:28" pos:end="73:31"><name pos:start="73:28" pos:end="73:31">opts</name></expr></argument>, <argument pos:start="73:34" pos:end="73:43"><expr pos:start="73:34" pos:end="73:43"><literal type="string" pos:start="73:34" pos:end="73:43">"readonly"</literal></expr></argument>, <argument pos:start="73:46" pos:end="73:46"><expr pos:start="73:46" pos:end="73:46"><literal type="number" pos:start="73:46" pos:end="73:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:66"><expr pos:start="75:5" pos:end="75:65"><name pos:start="75:5" pos:end="75:16">copy_on_read</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:65"><name pos:start="75:20" pos:end="75:36">qemu_opt_get_bool</name><argument_list pos:start="75:37" pos:end="75:65">(<argument pos:start="75:38" pos:end="75:41"><expr pos:start="75:38" pos:end="75:41"><name pos:start="75:38" pos:end="75:41">opts</name></expr></argument>, <argument pos:start="75:44" pos:end="75:57"><expr pos:start="75:44" pos:end="75:57"><literal type="string" pos:start="75:44" pos:end="75:57">"copy-on-read"</literal></expr></argument>, <argument pos:start="75:60" pos:end="75:64"><expr pos:start="75:60" pos:end="75:64"><name pos:start="75:60" pos:end="75:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:8">file</name> <operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:37"><name pos:start="79:12" pos:end="79:23">qemu_opt_get</name><argument_list pos:start="79:24" pos:end="79:37">(<argument pos:start="79:25" pos:end="79:28"><expr pos:start="79:25" pos:end="79:28"><name pos:start="79:25" pos:end="79:28">opts</name></expr></argument>, <argument pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:36"><literal type="string" pos:start="79:31" pos:end="79:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:42"><expr pos:start="81:5" pos:end="81:41"><name pos:start="81:5" pos:end="81:10">serial</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:41"><name pos:start="81:14" pos:end="81:25">qemu_opt_get</name><argument_list pos:start="81:26" pos:end="81:41">(<argument pos:start="81:27" pos:end="81:30"><expr pos:start="81:27" pos:end="81:30"><name pos:start="81:27" pos:end="81:30">opts</name></expr></argument>, <argument pos:start="81:33" pos:end="81:40"><expr pos:start="81:33" pos:end="81:40"><literal type="string" pos:start="81:33" pos:end="81:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="103:5"><if pos:start="85:5" pos:end="99:5">if <condition pos:start="85:8" pos:end="85:49">(<expr pos:start="85:9" pos:end="85:48"><operator pos:start="85:9" pos:end="85:9">(</operator><name pos:start="85:10" pos:end="85:12">buf</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:39"><name pos:start="85:16" pos:end="85:27">qemu_opt_get</name><argument_list pos:start="85:28" pos:end="85:39">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">opts</name></expr></argument>, <argument pos:start="85:35" pos:end="85:38"><expr pos:start="85:35" pos:end="85:38"><literal type="string" pos:start="85:35" pos:end="85:38">"if"</literal></expr></argument>)</argument_list></call><operator pos:start="85:40" pos:end="85:40">)</operator> <operator pos:start="85:42" pos:end="85:43">!=</operator> <name pos:start="85:45" pos:end="85:48">NULL</name></expr>)</condition> <block pos:start="85:51" pos:end="99:5">{<block_content pos:start="87:9" pos:end="97:9">

        <for pos:start="87:9" pos:end="89:13">for <control pos:start="87:13" pos:end="87:77">(<init pos:start="87:14" pos:end="87:22"><expr pos:start="87:14" pos:end="87:21"><name pos:start="87:14" pos:end="87:17">type</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <literal type="number" pos:start="87:21" pos:end="87:21">0</literal></expr>;</init> <condition pos:start="87:24" pos:end="87:69"><expr pos:start="87:24" pos:end="87:68"><name pos:start="87:24" pos:end="87:27">type</name> <operator pos:start="87:29" pos:end="87:29">&lt;</operator> <name pos:start="87:31" pos:end="87:38">IF_COUNT</name> <operator pos:start="87:40" pos:end="87:41">&amp;&amp;</operator> <call pos:start="87:43" pos:end="87:68"><name pos:start="87:43" pos:end="87:48">strcmp</name><argument_list pos:start="87:49" pos:end="87:68">(<argument pos:start="87:50" pos:end="87:52"><expr pos:start="87:50" pos:end="87:52"><name pos:start="87:50" pos:end="87:52">buf</name></expr></argument>, <argument pos:start="87:55" pos:end="87:67"><expr pos:start="87:55" pos:end="87:67"><name pos:start="87:55" pos:end="87:67"><name pos:start="87:55" pos:end="87:61">if_name</name><index pos:start="87:62" pos:end="87:67">[<expr pos:start="87:63" pos:end="87:66"><name pos:start="87:63" pos:end="87:66">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="87:71" pos:end="87:76"><expr pos:start="87:71" pos:end="87:76"><name pos:start="87:71" pos:end="87:74">type</name><operator pos:start="87:75" pos:end="87:76">++</operator></expr></incr>)</control><block type="pseudo" pos:start="89:13" pos:end="89:13"><block_content pos:start="89:13" pos:end="89:13">

            <empty_stmt pos:start="89:13" pos:end="89:13">;</empty_stmt></block_content></block></for>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:29">(<expr pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:16">type</name> <operator pos:start="91:18" pos:end="91:19">==</operator> <name pos:start="91:21" pos:end="91:28">IF_COUNT</name></expr>)</condition> <block pos:start="91:31" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:24">

            <expr_stmt pos:start="93:13" pos:end="93:59"><expr pos:start="93:13" pos:end="93:58"><call pos:start="93:13" pos:end="93:58"><name pos:start="93:13" pos:end="93:24">error_report</name><argument_list pos:start="93:25" pos:end="93:58">(<argument pos:start="93:26" pos:end="93:52"><expr pos:start="93:26" pos:end="93:52"><literal type="string" pos:start="93:26" pos:end="93:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="93:55" pos:end="93:57"><expr pos:start="93:55" pos:end="93:57"><name pos:start="93:55" pos:end="93:57">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:24">return <expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="103:5">else <block pos:start="99:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:34">

        <expr_stmt pos:start="101:9" pos:end="101:34"><expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:12">type</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:33">block_default_type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:33"><expr pos:start="107:5" pos:end="107:32"><name pos:start="107:5" pos:end="107:12">max_devs</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <name pos:start="107:16" pos:end="107:32"><name pos:start="107:16" pos:end="107:26">if_max_devs</name><index pos:start="107:27" pos:end="107:32">[<expr pos:start="107:28" pos:end="107:31"><name pos:start="107:28" pos:end="107:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="137:5"><if pos:start="111:5" pos:end="137:5">if <condition pos:start="111:8" pos:end="111:30">(<expr pos:start="111:9" pos:end="111:29"><name pos:start="111:9" pos:end="111:12">cyls</name> <operator pos:start="111:14" pos:end="111:15">||</operator> <name pos:start="111:17" pos:end="111:21">heads</name> <operator pos:start="111:23" pos:end="111:24">||</operator> <name pos:start="111:26" pos:end="111:29">secs</name></expr>)</condition> <block pos:start="111:32" pos:end="137:5">{<block_content pos:start="113:9" pos:end="135:9">

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:21">(<expr pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:16">cyls</name> <operator pos:start="113:18" pos:end="113:18">&lt;</operator> <literal type="number" pos:start="113:20" pos:end="113:20">1</literal></expr>)</condition> <block pos:start="113:23" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:24">

            <expr_stmt pos:start="115:13" pos:end="115:57"><expr pos:start="115:13" pos:end="115:56"><call pos:start="115:13" pos:end="115:56"><name pos:start="115:13" pos:end="115:24">error_report</name><argument_list pos:start="115:25" pos:end="115:56">(<argument pos:start="115:26" pos:end="115:55"><expr pos:start="115:26" pos:end="115:55"><literal type="string" pos:start="115:26" pos:end="115:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="117:13" pos:end="117:24">return <expr pos:start="117:20" pos:end="117:23"><name pos:start="117:20" pos:end="117:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:17">heads</name> <operator pos:start="121:19" pos:end="121:19">&lt;</operator> <literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>)</condition> <block pos:start="121:24" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:24">

            <expr_stmt pos:start="123:13" pos:end="123:58"><expr pos:start="123:13" pos:end="123:57"><call pos:start="123:13" pos:end="123:57"><name pos:start="123:13" pos:end="123:24">error_report</name><argument_list pos:start="123:25" pos:end="123:57">(<argument pos:start="123:26" pos:end="123:56"><expr pos:start="123:26" pos:end="123:56"><literal type="string" pos:start="123:26" pos:end="123:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="125:13" pos:end="125:24">return <expr pos:start="125:20" pos:end="125:23"><name pos:start="125:20" pos:end="125:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:21">(<expr pos:start="129:13" pos:end="129:20"><name pos:start="129:13" pos:end="129:16">secs</name> <operator pos:start="129:18" pos:end="129:18">&lt;</operator> <literal type="number" pos:start="129:20" pos:end="129:20">1</literal></expr>)</condition> <block pos:start="129:23" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:24">

            <expr_stmt pos:start="131:13" pos:end="131:57"><expr pos:start="131:13" pos:end="131:56"><call pos:start="131:13" pos:end="131:56"><name pos:start="131:13" pos:end="131:24">error_report</name><argument_list pos:start="131:25" pos:end="131:56">(<argument pos:start="131:26" pos:end="131:55"><expr pos:start="131:26" pos:end="131:55"><literal type="string" pos:start="131:26" pos:end="131:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="133:13" pos:end="133:24">return <expr pos:start="133:20" pos:end="133:23"><name pos:start="133:20" pos:end="133:23">NULL</name></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="173:5"><if pos:start="141:5" pos:end="173:5">if <condition pos:start="141:8" pos:end="141:52">(<expr pos:start="141:9" pos:end="141:51"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:12">buf</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <call pos:start="141:16" pos:end="141:42"><name pos:start="141:16" pos:end="141:27">qemu_opt_get</name><argument_list pos:start="141:28" pos:end="141:42">(<argument pos:start="141:29" pos:end="141:32"><expr pos:start="141:29" pos:end="141:32"><name pos:start="141:29" pos:end="141:32">opts</name></expr></argument>, <argument pos:start="141:35" pos:end="141:41"><expr pos:start="141:35" pos:end="141:41"><literal type="string" pos:start="141:35" pos:end="141:41">"trans"</literal></expr></argument>)</argument_list></call><operator pos:start="141:43" pos:end="141:43">)</operator> <operator pos:start="141:45" pos:end="141:46">!=</operator> <name pos:start="141:48" pos:end="141:51">NULL</name></expr>)</condition> <block pos:start="141:54" pos:end="173:5">{<block_content pos:start="143:9" pos:end="171:9">

        <if_stmt pos:start="143:9" pos:end="151:9"><if pos:start="143:9" pos:end="151:9">if <condition pos:start="143:12" pos:end="143:18">(<expr pos:start="143:13" pos:end="143:17"><operator pos:start="143:13" pos:end="143:13">!</operator><name pos:start="143:14" pos:end="143:17">cyls</name></expr>)</condition> <block pos:start="143:20" pos:end="151:9">{<block_content pos:start="145:13" pos:end="149:24">

            <expr_stmt pos:start="145:13" pos:end="147:30"><expr pos:start="145:13" pos:end="147:29"><call pos:start="145:13" pos:end="147:29"><name pos:start="145:13" pos:end="145:24">error_report</name><argument_list pos:start="145:25" pos:end="147:29">(<argument pos:start="145:26" pos:end="145:76"><expr pos:start="145:26" pos:end="145:76"><literal type="string" pos:start="145:26" pos:end="145:76">"'%s' trans must be used with cyls, heads and secs"</literal></expr></argument>,

                         <argument pos:start="147:26" pos:end="147:28"><expr pos:start="147:26" pos:end="147:28"><name pos:start="147:26" pos:end="147:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="149:13" pos:end="149:24">return <expr pos:start="149:20" pos:end="149:23"><name pos:start="149:20" pos:end="149:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="153:9" pos:end="171:9"><if pos:start="153:9" pos:end="155:52">if <condition pos:start="153:12" pos:end="153:33">(<expr pos:start="153:13" pos:end="153:32"><operator pos:start="153:13" pos:end="153:13">!</operator><call pos:start="153:14" pos:end="153:32"><name pos:start="153:14" pos:end="153:19">strcmp</name><argument_list pos:start="153:20" pos:end="153:32">(<argument pos:start="153:21" pos:end="153:23"><expr pos:start="153:21" pos:end="153:23"><name pos:start="153:21" pos:end="153:23">buf</name></expr></argument>, <argument pos:start="153:26" pos:end="153:31"><expr pos:start="153:26" pos:end="153:31"><literal type="string" pos:start="153:26" pos:end="153:31">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="155:13" pos:end="155:52"><block_content pos:start="155:13" pos:end="155:52">

            <expr_stmt pos:start="155:13" pos:end="155:52"><expr pos:start="155:13" pos:end="155:51"><name pos:start="155:13" pos:end="155:23">translation</name> <operator pos:start="155:25" pos:end="155:25">=</operator> <name pos:start="155:27" pos:end="155:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="157:9" pos:end="159:51">else if <condition pos:start="157:17" pos:end="157:37">(<expr pos:start="157:18" pos:end="157:36"><operator pos:start="157:18" pos:end="157:18">!</operator><call pos:start="157:19" pos:end="157:36"><name pos:start="157:19" pos:end="157:24">strcmp</name><argument_list pos:start="157:25" pos:end="157:36">(<argument pos:start="157:26" pos:end="157:28"><expr pos:start="157:26" pos:end="157:28"><name pos:start="157:26" pos:end="157:28">buf</name></expr></argument>, <argument pos:start="157:31" pos:end="157:35"><expr pos:start="157:31" pos:end="157:35"><literal type="string" pos:start="157:31" pos:end="157:35">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="159:13" pos:end="159:51"><block_content pos:start="159:13" pos:end="159:51">

            <expr_stmt pos:start="159:13" pos:end="159:51"><expr pos:start="159:13" pos:end="159:50"><name pos:start="159:13" pos:end="159:23">translation</name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="161:9" pos:end="163:52">else if <condition pos:start="161:17" pos:end="161:38">(<expr pos:start="161:18" pos:end="161:37"><operator pos:start="161:18" pos:end="161:18">!</operator><call pos:start="161:19" pos:end="161:37"><name pos:start="161:19" pos:end="161:24">strcmp</name><argument_list pos:start="161:25" pos:end="161:37">(<argument pos:start="161:26" pos:end="161:28"><expr pos:start="161:26" pos:end="161:28"><name pos:start="161:26" pos:end="161:28">buf</name></expr></argument>, <argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><literal type="string" pos:start="161:31" pos:end="161:36">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:52"><block_content pos:start="163:13" pos:end="163:52">

            <expr_stmt pos:start="163:13" pos:end="163:52"><expr pos:start="163:13" pos:end="163:51"><name pos:start="163:13" pos:end="163:23">translation</name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="165:9" pos:end="171:9">else <block pos:start="165:14" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:24">

            <expr_stmt pos:start="167:13" pos:end="167:63"><expr pos:start="167:13" pos:end="167:62"><call pos:start="167:13" pos:end="167:62"><name pos:start="167:13" pos:end="167:24">error_report</name><argument_list pos:start="167:25" pos:end="167:62">(<argument pos:start="167:26" pos:end="167:56"><expr pos:start="167:26" pos:end="167:56"><literal type="string" pos:start="167:26" pos:end="167:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="167:59" pos:end="167:61"><expr pos:start="167:59" pos:end="167:61"><name pos:start="167:59" pos:end="167:61">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="169:13" pos:end="169:24">return <expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="177:5" pos:end="203:5"><if pos:start="177:5" pos:end="203:5">if <condition pos:start="177:8" pos:end="177:52">(<expr pos:start="177:9" pos:end="177:51"><operator pos:start="177:9" pos:end="177:9">(</operator><name pos:start="177:10" pos:end="177:12">buf</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:42"><name pos:start="177:16" pos:end="177:27">qemu_opt_get</name><argument_list pos:start="177:28" pos:end="177:42">(<argument pos:start="177:29" pos:end="177:32"><expr pos:start="177:29" pos:end="177:32"><name pos:start="177:29" pos:end="177:32">opts</name></expr></argument>, <argument pos:start="177:35" pos:end="177:41"><expr pos:start="177:35" pos:end="177:41"><literal type="string" pos:start="177:35" pos:end="177:41">"media"</literal></expr></argument>)</argument_list></call><operator pos:start="177:43" pos:end="177:43">)</operator> <operator pos:start="177:45" pos:end="177:46">!=</operator> <name pos:start="177:48" pos:end="177:51">NULL</name></expr>)</condition> <block pos:start="177:54" pos:end="203:5">{<block_content pos:start="179:9" pos:end="201:9">

        <if_stmt pos:start="179:9" pos:end="201:9"><if pos:start="179:9" pos:end="183:9">if <condition pos:start="179:12" pos:end="179:33">(<expr pos:start="179:13" pos:end="179:32"><operator pos:start="179:13" pos:end="179:13">!</operator><call pos:start="179:14" pos:end="179:32"><name pos:start="179:14" pos:end="179:19">strcmp</name><argument_list pos:start="179:20" pos:end="179:32">(<argument pos:start="179:21" pos:end="179:23"><expr pos:start="179:21" pos:end="179:23"><name pos:start="179:21" pos:end="179:23">buf</name></expr></argument>, <argument pos:start="179:26" pos:end="179:31"><expr pos:start="179:26" pos:end="179:31"><literal type="string" pos:start="179:26" pos:end="179:31">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:35" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:31">

	    <expr_stmt pos:start="181:13" pos:end="181:31"><expr pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:17">media</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:30">MEDIA_DISK</name></expr>;</expr_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="183:11" pos:end="195:9">else if <condition pos:start="183:19" pos:end="183:41">(<expr pos:start="183:20" pos:end="183:40"><operator pos:start="183:20" pos:end="183:20">!</operator><call pos:start="183:21" pos:end="183:40"><name pos:start="183:21" pos:end="183:26">strcmp</name><argument_list pos:start="183:27" pos:end="183:40">(<argument pos:start="183:28" pos:end="183:30"><expr pos:start="183:28" pos:end="183:30"><name pos:start="183:28" pos:end="183:30">buf</name></expr></argument>, <argument pos:start="183:33" pos:end="183:39"><expr pos:start="183:33" pos:end="183:39"><literal type="string" pos:start="183:33" pos:end="183:39">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:43" pos:end="195:9">{<block_content pos:start="185:13" pos:end="193:32">

            <if_stmt pos:start="185:13" pos:end="191:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:38">(<expr pos:start="185:17" pos:end="185:37"><name pos:start="185:17" pos:end="185:20">cyls</name> <operator pos:start="185:22" pos:end="185:23">||</operator> <name pos:start="185:25" pos:end="185:28">secs</name> <operator pos:start="185:30" pos:end="185:31">||</operator> <name pos:start="185:33" pos:end="185:37">heads</name></expr>)</condition> <block pos:start="185:40" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:28">

                <expr_stmt pos:start="187:17" pos:end="187:68"><expr pos:start="187:17" pos:end="187:67"><call pos:start="187:17" pos:end="187:67"><name pos:start="187:17" pos:end="187:28">error_report</name><argument_list pos:start="187:29" pos:end="187:67">(<argument pos:start="187:30" pos:end="187:61"><expr pos:start="187:30" pos:end="187:61"><literal type="string" pos:start="187:30" pos:end="187:61">"CHS can't be set with media=%s"</literal></expr></argument>, <argument pos:start="187:64" pos:end="187:66"><expr pos:start="187:64" pos:end="187:66"><name pos:start="187:64" pos:end="187:66">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	        <return pos:start="189:17" pos:end="189:28">return <expr pos:start="189:24" pos:end="189:27"><name pos:start="189:24" pos:end="189:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

	    <expr_stmt pos:start="193:13" pos:end="193:32"><expr pos:start="193:13" pos:end="193:31"><name pos:start="193:13" pos:end="193:17">media</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <name pos:start="193:21" pos:end="193:31">MEDIA_CDROM</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="195:11" pos:end="201:9">else <block pos:start="195:16" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:24">

	    <expr_stmt pos:start="197:13" pos:end="197:52"><expr pos:start="197:13" pos:end="197:51"><call pos:start="197:13" pos:end="197:51"><name pos:start="197:13" pos:end="197:24">error_report</name><argument_list pos:start="197:25" pos:end="197:51">(<argument pos:start="197:26" pos:end="197:45"><expr pos:start="197:26" pos:end="197:45"><literal type="string" pos:start="197:26" pos:end="197:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="197:48" pos:end="197:50"><expr pos:start="197:48" pos:end="197:50"><name pos:start="197:48" pos:end="197:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="199:13" pos:end="199:24">return <expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">NULL</name></expr>;</return>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:34"><expr pos:start="207:5" pos:end="207:33"><name pos:start="207:5" pos:end="207:14">bdrv_flags</name> <operator pos:start="207:16" pos:end="207:17">|=</operator> <name pos:start="207:19" pos:end="207:33">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="224:0"><if pos:start="209:5" pos:end="224:0">if <condition pos:start="209:8" pos:end="209:52">(<expr pos:start="209:9" pos:end="209:51"><operator pos:start="209:9" pos:end="209:9">(</operator><name pos:start="209:10" pos:end="209:12">buf</name> <operator pos:start="209:14" pos:end="209:14">=</operator> <call pos:start="209:16" pos:end="209:42"><name pos:start="209:16" pos:end="209:27">qemu_opt_get</name><argument_list pos:start="209:28" pos:end="209:42">(<argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">opts</name></expr></argument>, <argument pos:start="209:35" pos:end="209:41"><expr pos:start="209:35" pos:end="209:41"><literal type="string" pos:start="209:35" pos:end="209:41">"cache"</literal></expr></argument>)</argument_list></call><operator pos:start="209:43" pos:end="209:43">)</operator> <operator pos:start="209:45" pos:end="209:46">!=</operator> <name pos:start="209:48" pos:end="209:51">NULL</name></expr>)</condition> <block pos:start="209:54" pos:end="224:0">{<block_content pos:start="211:9" pos:end="217:9">

        <if_stmt pos:start="211:9" pos:end="217:9"><if pos:start="211:9" pos:end="217:9">if <condition pos:start="211:12" pos:end="211:58">(<expr pos:start="211:13" pos:end="211:57"><call pos:start="211:13" pos:end="211:52"><name pos:start="211:13" pos:end="211:34">bdrv_parse_cache_flags</name><argument_list pos:start="211:35" pos:end="211:52">(<argument pos:start="211:36" pos:end="211:38"><expr pos:start="211:36" pos:end="211:38"><name pos:start="211:36" pos:end="211:38">buf</name></expr></argument>, <argument pos:start="211:41" pos:end="211:51"><expr pos:start="211:41" pos:end="211:51"><operator pos:start="211:41" pos:end="211:41">&amp;</operator><name pos:start="211:42" pos:end="211:51">bdrv_flags</name></expr></argument>)</argument_list></call> <operator pos:start="211:54" pos:end="211:55">!=</operator> <literal type="number" pos:start="211:57" pos:end="211:57">0</literal></expr>)</condition> <block pos:start="211:60" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:24">

            <expr_stmt pos:start="213:13" pos:end="213:49"><expr pos:start="213:13" pos:end="213:48"><call pos:start="213:13" pos:end="213:48"><name pos:start="213:13" pos:end="213:24">error_report</name><argument_list pos:start="213:25" pos:end="213:48">(<argument pos:start="213:26" pos:end="213:47"><expr pos:start="213:26" pos:end="213:47"><literal type="string" pos:start="213:26" pos:end="213:47">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="215:13" pos:end="215:24">return <expr pos:start="215:20" pos:end="215:23"><name pos:start="215:20" pos:end="215:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="223:1" pos:end="223:23">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="225:5" pos:end="246:0"><if pos:start="225:5" pos:end="246:0">if <condition pos:start="225:8" pos:end="225:50">(<expr pos:start="225:9" pos:end="225:49"><operator pos:start="225:9" pos:end="225:9">(</operator><name pos:start="225:10" pos:end="225:12">buf</name> <operator pos:start="225:14" pos:end="225:14">=</operator> <call pos:start="225:16" pos:end="225:40"><name pos:start="225:16" pos:end="225:27">qemu_opt_get</name><argument_list pos:start="225:28" pos:end="225:40">(<argument pos:start="225:29" pos:end="225:32"><expr pos:start="225:29" pos:end="225:32"><name pos:start="225:29" pos:end="225:32">opts</name></expr></argument>, <argument pos:start="225:35" pos:end="225:39"><expr pos:start="225:35" pos:end="225:39"><literal type="string" pos:start="225:35" pos:end="225:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="225:41" pos:end="225:41">)</operator> <operator pos:start="225:43" pos:end="225:44">!=</operator> <name pos:start="225:46" pos:end="225:49">NULL</name></expr>)</condition> <block pos:start="225:52" pos:end="246:0">{<block_content pos:start="227:9" pos:end="241:9">

        <if_stmt pos:start="227:9" pos:end="241:9"><if pos:start="227:9" pos:end="231:9">if <condition pos:start="227:12" pos:end="227:35">(<expr pos:start="227:13" pos:end="227:34"><operator pos:start="227:13" pos:end="227:13">!</operator><call pos:start="227:14" pos:end="227:34"><name pos:start="227:14" pos:end="227:19">strcmp</name><argument_list pos:start="227:20" pos:end="227:34">(<argument pos:start="227:21" pos:end="227:23"><expr pos:start="227:21" pos:end="227:23"><name pos:start="227:21" pos:end="227:23">buf</name></expr></argument>, <argument pos:start="227:26" pos:end="227:33"><expr pos:start="227:26" pos:end="227:33"><literal type="string" pos:start="227:26" pos:end="227:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:37" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:44">

            <expr_stmt pos:start="229:13" pos:end="229:44"><expr pos:start="229:13" pos:end="229:43"><name pos:start="229:13" pos:end="229:22">bdrv_flags</name> <operator pos:start="229:24" pos:end="229:25">|=</operator> <name pos:start="229:27" pos:end="229:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="231:11" pos:end="235:9">else if <condition pos:start="231:19" pos:end="231:43">(<expr pos:start="231:20" pos:end="231:42"><operator pos:start="231:20" pos:end="231:20">!</operator><call pos:start="231:21" pos:end="231:42"><name pos:start="231:21" pos:end="231:26">strcmp</name><argument_list pos:start="231:27" pos:end="231:42">(<argument pos:start="231:28" pos:end="231:30"><expr pos:start="231:28" pos:end="231:30"><name pos:start="231:28" pos:end="231:30">buf</name></expr></argument>, <argument pos:start="231:33" pos:end="231:41"><expr pos:start="231:33" pos:end="231:41"><literal type="string" pos:start="231:33" pos:end="231:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:45" pos:end="235:9">{<block_content>

            <comment type="block" pos:start="233:13" pos:end="233:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="241:9">else <block pos:start="235:16" pos:end="241:9">{<block_content pos:start="237:12" pos:end="239:23">

           <expr_stmt pos:start="237:12" pos:end="237:46"><expr pos:start="237:12" pos:end="237:45"><call pos:start="237:12" pos:end="237:45"><name pos:start="237:12" pos:end="237:23">error_report</name><argument_list pos:start="237:24" pos:end="237:45">(<argument pos:start="237:25" pos:end="237:44"><expr pos:start="237:25" pos:end="237:44"><literal type="string" pos:start="237:25" pos:end="237:44">"invalid aio option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="239:12" pos:end="239:23">return <expr pos:start="239:19" pos:end="239:22"><name pos:start="239:19" pos:end="239:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="245:1" pos:end="245:6">#<cpp:directive pos:start="245:2" pos:end="245:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="249:5" pos:end="273:5"><if pos:start="249:5" pos:end="273:5">if <condition pos:start="249:8" pos:end="249:53">(<expr pos:start="249:9" pos:end="249:52"><operator pos:start="249:9" pos:end="249:9">(</operator><name pos:start="249:10" pos:end="249:12">buf</name> <operator pos:start="249:14" pos:end="249:14">=</operator> <call pos:start="249:16" pos:end="249:43"><name pos:start="249:16" pos:end="249:27">qemu_opt_get</name><argument_list pos:start="249:28" pos:end="249:43">(<argument pos:start="249:29" pos:end="249:32"><expr pos:start="249:29" pos:end="249:32"><name pos:start="249:29" pos:end="249:32">opts</name></expr></argument>, <argument pos:start="249:35" pos:end="249:42"><expr pos:start="249:35" pos:end="249:42"><literal type="string" pos:start="249:35" pos:end="249:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="249:44" pos:end="249:44">)</operator> <operator pos:start="249:46" pos:end="249:47">!=</operator> <name pos:start="249:49" pos:end="249:52">NULL</name></expr>)</condition> <block pos:start="249:55" pos:end="273:5">{<block_content pos:start="251:9" pos:end="271:9">

        <if_stmt pos:start="251:9" pos:end="261:9"><if pos:start="251:9" pos:end="261:9">if <condition pos:start="251:12" pos:end="251:32">(<expr pos:start="251:13" pos:end="251:31"><call pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:26">is_help_option</name><argument_list pos:start="251:27" pos:end="251:31">(<argument pos:start="251:28" pos:end="251:30"><expr pos:start="251:28" pos:end="251:30"><name pos:start="251:28" pos:end="251:30">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:34" pos:end="261:9">{<block_content pos:start="253:13" pos:end="259:24">

            <expr_stmt pos:start="253:13" pos:end="253:47"><expr pos:start="253:13" pos:end="253:46"><call pos:start="253:13" pos:end="253:46"><name pos:start="253:13" pos:end="253:24">error_printf</name><argument_list pos:start="253:25" pos:end="253:46">(<argument pos:start="253:26" pos:end="253:45"><expr pos:start="253:26" pos:end="253:45"><literal type="string" pos:start="253:26" pos:end="253:45">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:57"><expr pos:start="255:13" pos:end="255:56"><call pos:start="255:13" pos:end="255:56"><name pos:start="255:13" pos:end="255:31">bdrv_iterate_format</name><argument_list pos:start="255:32" pos:end="255:56">(<argument pos:start="255:33" pos:end="255:49"><expr pos:start="255:33" pos:end="255:49"><name pos:start="255:33" pos:end="255:49">bdrv_format_print</name></expr></argument>, <argument pos:start="255:52" pos:end="255:55"><expr pos:start="255:52" pos:end="255:55"><name pos:start="255:52" pos:end="255:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:31"><expr pos:start="257:13" pos:end="257:30"><call pos:start="257:13" pos:end="257:30"><name pos:start="257:13" pos:end="257:24">error_printf</name><argument_list pos:start="257:25" pos:end="257:30">(<argument pos:start="257:26" pos:end="257:29"><expr pos:start="257:26" pos:end="257:29"><literal type="string" pos:start="257:26" pos:end="257:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="259:13" pos:end="259:24">return <expr pos:start="259:20" pos:end="259:23"><name pos:start="259:20" pos:end="259:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:48"><expr pos:start="263:9" pos:end="263:47"><name pos:start="263:9" pos:end="263:11">drv</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="263:47"><name pos:start="263:15" pos:end="263:42">bdrv_find_whitelisted_format</name><argument_list pos:start="263:43" pos:end="263:47">(<argument pos:start="263:44" pos:end="263:46"><expr pos:start="263:44" pos:end="263:46"><name pos:start="263:44" pos:end="263:46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:17">(<expr pos:start="265:13" pos:end="265:16"><operator pos:start="265:13" pos:end="265:13">!</operator><name pos:start="265:14" pos:end="265:16">drv</name></expr>)</condition> <block pos:start="265:19" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:24">

            <expr_stmt pos:start="267:13" pos:end="267:53"><expr pos:start="267:13" pos:end="267:52"><call pos:start="267:13" pos:end="267:52"><name pos:start="267:13" pos:end="267:24">error_report</name><argument_list pos:start="267:25" pos:end="267:52">(<argument pos:start="267:26" pos:end="267:46"><expr pos:start="267:26" pos:end="267:46"><literal type="string" pos:start="267:26" pos:end="267:46">"'%s' invalid format"</literal></expr></argument>, <argument pos:start="267:49" pos:end="267:51"><expr pos:start="267:49" pos:end="267:51"><name pos:start="267:49" pos:end="267:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="269:13" pos:end="269:24">return <expr pos:start="269:20" pos:end="269:23"><name pos:start="269:20" pos:end="269:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="277:5" pos:end="277:29">/* disk I/O throttling */</comment>

    <expr_stmt pos:start="279:5" pos:end="281:63"><expr pos:start="279:5" pos:end="281:62"><name pos:start="279:5" pos:end="279:39"><name pos:start="279:5" pos:end="279:13">io_limits</name><operator pos:start="279:14" pos:end="279:14">.</operator><name pos:start="279:15" pos:end="279:17">bps</name><index pos:start="279:18" pos:end="279:39">[<expr pos:start="279:19" pos:end="279:38"><name pos:start="279:19" pos:end="279:38">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name>  <operator pos:start="279:42" pos:end="279:42">=</operator>

                           <call pos:start="281:28" pos:end="281:62"><name pos:start="281:28" pos:end="281:46">qemu_opt_get_number</name><argument_list pos:start="281:47" pos:end="281:62">(<argument pos:start="281:48" pos:end="281:51"><expr pos:start="281:48" pos:end="281:51"><name pos:start="281:48" pos:end="281:51">opts</name></expr></argument>, <argument pos:start="281:54" pos:end="281:58"><expr pos:start="281:54" pos:end="281:58"><literal type="string" pos:start="281:54" pos:end="281:58">"bps"</literal></expr></argument>, <argument pos:start="281:61" pos:end="281:61"><expr pos:start="281:61" pos:end="281:61"><literal type="number" pos:start="281:61" pos:end="281:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="285:66"><expr pos:start="283:5" pos:end="285:65"><name pos:start="283:5" pos:end="283:38"><name pos:start="283:5" pos:end="283:13">io_limits</name><operator pos:start="283:14" pos:end="283:14">.</operator><name pos:start="283:15" pos:end="283:17">bps</name><index pos:start="283:18" pos:end="283:38">[<expr pos:start="283:19" pos:end="283:37"><name pos:start="283:19" pos:end="283:37">BLOCK_IO_LIMIT_READ</name></expr>]</index></name>   <operator pos:start="283:42" pos:end="283:42">=</operator>

                           <call pos:start="285:28" pos:end="285:65"><name pos:start="285:28" pos:end="285:46">qemu_opt_get_number</name><argument_list pos:start="285:47" pos:end="285:65">(<argument pos:start="285:48" pos:end="285:51"><expr pos:start="285:48" pos:end="285:51"><name pos:start="285:48" pos:end="285:51">opts</name></expr></argument>, <argument pos:start="285:54" pos:end="285:61"><expr pos:start="285:54" pos:end="285:61"><literal type="string" pos:start="285:54" pos:end="285:61">"bps_rd"</literal></expr></argument>, <argument pos:start="285:64" pos:end="285:64"><expr pos:start="285:64" pos:end="285:64"><literal type="number" pos:start="285:64" pos:end="285:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="289:66"><expr pos:start="287:5" pos:end="289:65"><name pos:start="287:5" pos:end="287:39"><name pos:start="287:5" pos:end="287:13">io_limits</name><operator pos:start="287:14" pos:end="287:14">.</operator><name pos:start="287:15" pos:end="287:17">bps</name><index pos:start="287:18" pos:end="287:39">[<expr pos:start="287:19" pos:end="287:38"><name pos:start="287:19" pos:end="287:38">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name>  <operator pos:start="287:42" pos:end="287:42">=</operator>

                           <call pos:start="289:28" pos:end="289:65"><name pos:start="289:28" pos:end="289:46">qemu_opt_get_number</name><argument_list pos:start="289:47" pos:end="289:65">(<argument pos:start="289:48" pos:end="289:51"><expr pos:start="289:48" pos:end="289:51"><name pos:start="289:48" pos:end="289:51">opts</name></expr></argument>, <argument pos:start="289:54" pos:end="289:61"><expr pos:start="289:54" pos:end="289:61"><literal type="string" pos:start="289:54" pos:end="289:61">"bps_wr"</literal></expr></argument>, <argument pos:start="289:64" pos:end="289:64"><expr pos:start="289:64" pos:end="289:64"><literal type="number" pos:start="289:64" pos:end="289:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="293:64"><expr pos:start="291:5" pos:end="293:63"><name pos:start="291:5" pos:end="291:40"><name pos:start="291:5" pos:end="291:13">io_limits</name><operator pos:start="291:14" pos:end="291:14">.</operator><name pos:start="291:15" pos:end="291:18">iops</name><index pos:start="291:19" pos:end="291:40">[<expr pos:start="291:20" pos:end="291:39"><name pos:start="291:20" pos:end="291:39">BLOCK_IO_LIMIT_TOTAL</name></expr>]</index></name> <operator pos:start="291:42" pos:end="291:42">=</operator>

                           <call pos:start="293:28" pos:end="293:63"><name pos:start="293:28" pos:end="293:46">qemu_opt_get_number</name><argument_list pos:start="293:47" pos:end="293:63">(<argument pos:start="293:48" pos:end="293:51"><expr pos:start="293:48" pos:end="293:51"><name pos:start="293:48" pos:end="293:51">opts</name></expr></argument>, <argument pos:start="293:54" pos:end="293:59"><expr pos:start="293:54" pos:end="293:59"><literal type="string" pos:start="293:54" pos:end="293:59">"iops"</literal></expr></argument>, <argument pos:start="293:62" pos:end="293:62"><expr pos:start="293:62" pos:end="293:62"><literal type="number" pos:start="293:62" pos:end="293:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="297:67"><expr pos:start="295:5" pos:end="297:66"><name pos:start="295:5" pos:end="295:39"><name pos:start="295:5" pos:end="295:13">io_limits</name><operator pos:start="295:14" pos:end="295:14">.</operator><name pos:start="295:15" pos:end="295:18">iops</name><index pos:start="295:19" pos:end="295:39">[<expr pos:start="295:20" pos:end="295:38"><name pos:start="295:20" pos:end="295:38">BLOCK_IO_LIMIT_READ</name></expr>]</index></name>  <operator pos:start="295:42" pos:end="295:42">=</operator>

                           <call pos:start="297:28" pos:end="297:66"><name pos:start="297:28" pos:end="297:46">qemu_opt_get_number</name><argument_list pos:start="297:47" pos:end="297:66">(<argument pos:start="297:48" pos:end="297:51"><expr pos:start="297:48" pos:end="297:51"><name pos:start="297:48" pos:end="297:51">opts</name></expr></argument>, <argument pos:start="297:54" pos:end="297:62"><expr pos:start="297:54" pos:end="297:62"><literal type="string" pos:start="297:54" pos:end="297:62">"iops_rd"</literal></expr></argument>, <argument pos:start="297:65" pos:end="297:65"><expr pos:start="297:65" pos:end="297:65"><literal type="number" pos:start="297:65" pos:end="297:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="301:67"><expr pos:start="299:5" pos:end="301:66"><name pos:start="299:5" pos:end="299:40"><name pos:start="299:5" pos:end="299:13">io_limits</name><operator pos:start="299:14" pos:end="299:14">.</operator><name pos:start="299:15" pos:end="299:18">iops</name><index pos:start="299:19" pos:end="299:40">[<expr pos:start="299:20" pos:end="299:39"><name pos:start="299:20" pos:end="299:39">BLOCK_IO_LIMIT_WRITE</name></expr>]</index></name> <operator pos:start="299:42" pos:end="299:42">=</operator>

                           <call pos:start="301:28" pos:end="301:66"><name pos:start="301:28" pos:end="301:46">qemu_opt_get_number</name><argument_list pos:start="301:47" pos:end="301:66">(<argument pos:start="301:48" pos:end="301:51"><expr pos:start="301:48" pos:end="301:51"><name pos:start="301:48" pos:end="301:51">opts</name></expr></argument>, <argument pos:start="301:54" pos:end="301:62"><expr pos:start="301:54" pos:end="301:62"><literal type="string" pos:start="301:54" pos:end="301:62">"iops_wr"</literal></expr></argument>, <argument pos:start="301:65" pos:end="301:65"><expr pos:start="301:65" pos:end="301:65"><literal type="number" pos:start="301:65" pos:end="301:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="305:5" pos:end="313:5"><if pos:start="305:5" pos:end="313:5">if <condition pos:start="305:8" pos:end="305:40">(<expr pos:start="305:9" pos:end="305:39"><operator pos:start="305:9" pos:end="305:9">!</operator><call pos:start="305:10" pos:end="305:39"><name pos:start="305:10" pos:end="305:27">do_check_io_limits</name><argument_list pos:start="305:28" pos:end="305:39">(<argument pos:start="305:29" pos:end="305:38"><expr pos:start="305:29" pos:end="305:38"><operator pos:start="305:29" pos:end="305:29">&amp;</operator><name pos:start="305:30" pos:end="305:38">io_limits</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:42" pos:end="313:5">{<block_content pos:start="307:9" pos:end="311:20">

        <expr_stmt pos:start="307:9" pos:end="309:56"><expr pos:start="307:9" pos:end="309:55"><call pos:start="307:9" pos:end="309:55"><name pos:start="307:9" pos:end="307:20">error_report</name><argument_list pos:start="307:21" pos:end="309:55">(<argument pos:start="307:22" pos:end="309:54"><expr pos:start="307:22" pos:end="309:54"><literal type="string" pos:start="307:22" pos:end="307:68">"bps(iops) and bps_rd/bps_wr(iops_rd/iops_wr) "</literal>

                     <literal type="string" pos:start="309:22" pos:end="309:54">"cannot be used at the same time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="311:9" pos:end="311:20">return <expr pos:start="311:16" pos:end="311:19"><name pos:start="311:16" pos:end="311:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="317:5" pos:end="325:5"><if pos:start="317:5" pos:end="325:5">if <condition pos:start="317:8" pos:end="317:43">(<expr pos:start="317:9" pos:end="317:42"><call pos:start="317:9" pos:end="317:34"><name pos:start="317:9" pos:end="317:20">qemu_opt_get</name><argument_list pos:start="317:21" pos:end="317:34">(<argument pos:start="317:22" pos:end="317:25"><expr pos:start="317:22" pos:end="317:25"><name pos:start="317:22" pos:end="317:25">opts</name></expr></argument>, <argument pos:start="317:28" pos:end="317:33"><expr pos:start="317:28" pos:end="317:33"><literal type="string" pos:start="317:28" pos:end="317:33">"boot"</literal></expr></argument>)</argument_list></call> <operator pos:start="317:36" pos:end="317:37">!=</operator> <name pos:start="317:39" pos:end="317:42">NULL</name></expr>)</condition> <block pos:start="317:45" pos:end="325:5">{<block_content pos:start="319:9" pos:end="323:42">

        <expr_stmt pos:start="319:9" pos:end="323:42"><expr pos:start="319:9" pos:end="323:41"><call pos:start="319:9" pos:end="323:41"><name pos:start="319:9" pos:end="319:15">fprintf</name><argument_list pos:start="319:16" pos:end="323:41">(<argument pos:start="319:17" pos:end="319:22"><expr pos:start="319:17" pos:end="319:22"><name pos:start="319:17" pos:end="319:22">stderr</name></expr></argument>, <argument pos:start="319:25" pos:end="323:40"><expr pos:start="319:25" pos:end="323:40"><literal type="string" pos:start="319:25" pos:end="319:74">"qemu-kvm: boot=on|off is deprecated and will be "</literal>

                <literal type="string" pos:start="321:17" pos:end="321:78">"ignored. Future versions will reject this parameter. Please "</literal>

                <literal type="string" pos:start="323:17" pos:end="323:40">"update your scripts.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:46"><expr pos:start="329:5" pos:end="329:45"><name pos:start="329:5" pos:end="329:18">on_write_error</name> <operator pos:start="329:20" pos:end="329:20">=</operator> <name pos:start="329:22" pos:end="329:45">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="351:5"><if pos:start="331:5" pos:end="351:5">if <condition pos:start="331:8" pos:end="331:53">(<expr pos:start="331:9" pos:end="331:52"><operator pos:start="331:9" pos:end="331:9">(</operator><name pos:start="331:10" pos:end="331:12">buf</name> <operator pos:start="331:14" pos:end="331:14">=</operator> <call pos:start="331:16" pos:end="331:43"><name pos:start="331:16" pos:end="331:27">qemu_opt_get</name><argument_list pos:start="331:28" pos:end="331:43">(<argument pos:start="331:29" pos:end="331:32"><expr pos:start="331:29" pos:end="331:32"><name pos:start="331:29" pos:end="331:32">opts</name></expr></argument>, <argument pos:start="331:35" pos:end="331:42"><expr pos:start="331:35" pos:end="331:42"><literal type="string" pos:start="331:35" pos:end="331:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="331:44" pos:end="331:44">)</operator> <operator pos:start="331:46" pos:end="331:47">!=</operator> <name pos:start="331:49" pos:end="331:52">NULL</name></expr>)</condition> <block pos:start="331:55" pos:end="351:5">{<block_content pos:start="333:9" pos:end="349:9">

        <if_stmt pos:start="333:9" pos:end="339:9"><if pos:start="333:9" pos:end="339:9">if <condition pos:start="333:12" pos:end="333:86">(<expr pos:start="333:13" pos:end="333:85"><name pos:start="333:13" pos:end="333:16">type</name> <operator pos:start="333:18" pos:end="333:19">!=</operator> <name pos:start="333:21" pos:end="333:26">IF_IDE</name> <operator pos:start="333:28" pos:end="333:29">&amp;&amp;</operator> <name pos:start="333:31" pos:end="333:34">type</name> <operator pos:start="333:36" pos:end="333:37">!=</operator> <name pos:start="333:39" pos:end="333:45">IF_SCSI</name> <operator pos:start="333:47" pos:end="333:48">&amp;&amp;</operator> <name pos:start="333:50" pos:end="333:53">type</name> <operator pos:start="333:55" pos:end="333:56">!=</operator> <name pos:start="333:58" pos:end="333:66">IF_VIRTIO</name> <operator pos:start="333:68" pos:end="333:69">&amp;&amp;</operator> <name pos:start="333:71" pos:end="333:74">type</name> <operator pos:start="333:76" pos:end="333:77">!=</operator> <name pos:start="333:79" pos:end="333:85">IF_NONE</name></expr>)</condition> <block pos:start="333:88" pos:end="339:9">{<block_content pos:start="335:13" pos:end="337:24">

            <expr_stmt pos:start="335:13" pos:end="335:69"><expr pos:start="335:13" pos:end="335:68"><call pos:start="335:13" pos:end="335:68"><name pos:start="335:13" pos:end="335:24">error_report</name><argument_list pos:start="335:25" pos:end="335:68">(<argument pos:start="335:26" pos:end="335:67"><expr pos:start="335:26" pos:end="335:67"><literal type="string" pos:start="335:26" pos:end="335:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="337:13" pos:end="337:24">return <expr pos:start="337:20" pos:end="337:23"><name pos:start="337:20" pos:end="337:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="343:9" pos:end="343:58"><expr pos:start="343:9" pos:end="343:57"><name pos:start="343:9" pos:end="343:22">on_write_error</name> <operator pos:start="343:24" pos:end="343:24">=</operator> <call pos:start="343:26" pos:end="343:57"><name pos:start="343:26" pos:end="343:49">parse_block_error_action</name><argument_list pos:start="343:50" pos:end="343:57">(<argument pos:start="343:51" pos:end="343:53"><expr pos:start="343:51" pos:end="343:53"><name pos:start="343:51" pos:end="343:53">buf</name></expr></argument>, <argument pos:start="343:56" pos:end="343:56"><expr pos:start="343:56" pos:end="343:56"><literal type="number" pos:start="343:56" pos:end="343:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="345:9" pos:end="349:9"><if pos:start="345:9" pos:end="349:9">if <condition pos:start="345:12" pos:end="345:31">(<expr pos:start="345:13" pos:end="345:30"><name pos:start="345:13" pos:end="345:26">on_write_error</name> <operator pos:start="345:28" pos:end="345:28">&lt;</operator> <literal type="number" pos:start="345:30" pos:end="345:30">0</literal></expr>)</condition> <block pos:start="345:33" pos:end="349:9">{<block_content pos:start="347:13" pos:end="347:24">

            <return pos:start="347:13" pos:end="347:24">return <expr pos:start="347:20" pos:end="347:23"><name pos:start="347:20" pos:end="347:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="355:5" pos:end="355:45"><expr pos:start="355:5" pos:end="355:44"><name pos:start="355:5" pos:end="355:17">on_read_error</name> <operator pos:start="355:19" pos:end="355:19">=</operator> <name pos:start="355:21" pos:end="355:44">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="357:5" pos:end="377:5"><if pos:start="357:5" pos:end="377:5">if <condition pos:start="357:8" pos:end="357:53">(<expr pos:start="357:9" pos:end="357:52"><operator pos:start="357:9" pos:end="357:9">(</operator><name pos:start="357:10" pos:end="357:12">buf</name> <operator pos:start="357:14" pos:end="357:14">=</operator> <call pos:start="357:16" pos:end="357:43"><name pos:start="357:16" pos:end="357:27">qemu_opt_get</name><argument_list pos:start="357:28" pos:end="357:43">(<argument pos:start="357:29" pos:end="357:32"><expr pos:start="357:29" pos:end="357:32"><name pos:start="357:29" pos:end="357:32">opts</name></expr></argument>, <argument pos:start="357:35" pos:end="357:42"><expr pos:start="357:35" pos:end="357:42"><literal type="string" pos:start="357:35" pos:end="357:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="357:44" pos:end="357:44">)</operator> <operator pos:start="357:46" pos:end="357:47">!=</operator> <name pos:start="357:49" pos:end="357:52">NULL</name></expr>)</condition> <block pos:start="357:55" pos:end="377:5">{<block_content pos:start="359:9" pos:end="375:9">

        <if_stmt pos:start="359:9" pos:end="365:9"><if pos:start="359:9" pos:end="365:9">if <condition pos:start="359:12" pos:end="359:86">(<expr pos:start="359:13" pos:end="359:85"><name pos:start="359:13" pos:end="359:16">type</name> <operator pos:start="359:18" pos:end="359:19">!=</operator> <name pos:start="359:21" pos:end="359:26">IF_IDE</name> <operator pos:start="359:28" pos:end="359:29">&amp;&amp;</operator> <name pos:start="359:31" pos:end="359:34">type</name> <operator pos:start="359:36" pos:end="359:37">!=</operator> <name pos:start="359:39" pos:end="359:47">IF_VIRTIO</name> <operator pos:start="359:49" pos:end="359:50">&amp;&amp;</operator> <name pos:start="359:52" pos:end="359:55">type</name> <operator pos:start="359:57" pos:end="359:58">!=</operator> <name pos:start="359:60" pos:end="359:66">IF_SCSI</name> <operator pos:start="359:68" pos:end="359:69">&amp;&amp;</operator> <name pos:start="359:71" pos:end="359:74">type</name> <operator pos:start="359:76" pos:end="359:77">!=</operator> <name pos:start="359:79" pos:end="359:85">IF_NONE</name></expr>)</condition> <block pos:start="359:88" pos:end="365:9">{<block_content pos:start="361:13" pos:end="363:24">

            <expr_stmt pos:start="361:13" pos:end="361:69"><expr pos:start="361:13" pos:end="361:68"><call pos:start="361:13" pos:end="361:68"><name pos:start="361:13" pos:end="361:24">error_report</name><argument_list pos:start="361:25" pos:end="361:68">(<argument pos:start="361:26" pos:end="361:67"><expr pos:start="361:26" pos:end="361:67"><literal type="string" pos:start="361:26" pos:end="361:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="363:13" pos:end="363:24">return <expr pos:start="363:20" pos:end="363:23"><name pos:start="363:20" pos:end="363:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="369:9" pos:end="369:57"><expr pos:start="369:9" pos:end="369:56"><name pos:start="369:9" pos:end="369:21">on_read_error</name> <operator pos:start="369:23" pos:end="369:23">=</operator> <call pos:start="369:25" pos:end="369:56"><name pos:start="369:25" pos:end="369:48">parse_block_error_action</name><argument_list pos:start="369:49" pos:end="369:56">(<argument pos:start="369:50" pos:end="369:52"><expr pos:start="369:50" pos:end="369:52"><name pos:start="369:50" pos:end="369:52">buf</name></expr></argument>, <argument pos:start="369:55" pos:end="369:55"><expr pos:start="369:55" pos:end="369:55"><literal type="number" pos:start="369:55" pos:end="369:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="371:9" pos:end="375:9"><if pos:start="371:9" pos:end="375:9">if <condition pos:start="371:12" pos:end="371:30">(<expr pos:start="371:13" pos:end="371:29"><name pos:start="371:13" pos:end="371:25">on_read_error</name> <operator pos:start="371:27" pos:end="371:27">&lt;</operator> <literal type="number" pos:start="371:29" pos:end="371:29">0</literal></expr>)</condition> <block pos:start="371:32" pos:end="375:9">{<block_content pos:start="373:13" pos:end="373:24">

            <return pos:start="373:13" pos:end="373:24">return <expr pos:start="373:20" pos:end="373:23"><name pos:start="373:20" pos:end="373:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="381:5" pos:end="391:5"><if pos:start="381:5" pos:end="391:5">if <condition pos:start="381:8" pos:end="381:55">(<expr pos:start="381:9" pos:end="381:54"><operator pos:start="381:9" pos:end="381:9">(</operator><name pos:start="381:10" pos:end="381:16">devaddr</name> <operator pos:start="381:18" pos:end="381:18">=</operator> <call pos:start="381:20" pos:end="381:45"><name pos:start="381:20" pos:end="381:31">qemu_opt_get</name><argument_list pos:start="381:32" pos:end="381:45">(<argument pos:start="381:33" pos:end="381:36"><expr pos:start="381:33" pos:end="381:36"><name pos:start="381:33" pos:end="381:36">opts</name></expr></argument>, <argument pos:start="381:39" pos:end="381:44"><expr pos:start="381:39" pos:end="381:44"><literal type="string" pos:start="381:39" pos:end="381:44">"addr"</literal></expr></argument>)</argument_list></call><operator pos:start="381:46" pos:end="381:46">)</operator> <operator pos:start="381:48" pos:end="381:49">!=</operator> <name pos:start="381:51" pos:end="381:54">NULL</name></expr>)</condition> <block pos:start="381:57" pos:end="391:5">{<block_content pos:start="383:9" pos:end="389:9">

        <if_stmt pos:start="383:9" pos:end="389:9"><if pos:start="383:9" pos:end="389:9">if <condition pos:start="383:12" pos:end="383:30">(<expr pos:start="383:13" pos:end="383:29"><name pos:start="383:13" pos:end="383:16">type</name> <operator pos:start="383:18" pos:end="383:19">!=</operator> <name pos:start="383:21" pos:end="383:29">IF_VIRTIO</name></expr>)</condition> <block pos:start="383:32" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:24">

            <expr_stmt pos:start="385:13" pos:end="385:67"><expr pos:start="385:13" pos:end="385:66"><call pos:start="385:13" pos:end="385:66"><name pos:start="385:13" pos:end="385:24">error_report</name><argument_list pos:start="385:25" pos:end="385:66">(<argument pos:start="385:26" pos:end="385:65"><expr pos:start="385:26" pos:end="385:65"><literal type="string" pos:start="385:26" pos:end="385:65">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="387:13" pos:end="387:24">return <expr pos:start="387:20" pos:end="387:23"><name pos:start="387:20" pos:end="387:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="395:5" pos:end="395:46">/* compute bus and unit according index */</comment>



    <if_stmt pos:start="399:5" pos:end="413:5"><if pos:start="399:5" pos:end="413:5">if <condition pos:start="399:8" pos:end="399:20">(<expr pos:start="399:9" pos:end="399:19"><name pos:start="399:9" pos:end="399:13">index</name> <operator pos:start="399:15" pos:end="399:16">!=</operator> <operator pos:start="399:18" pos:end="399:18">-</operator><literal type="number" pos:start="399:19" pos:end="399:19">1</literal></expr>)</condition> <block pos:start="399:22" pos:end="413:5">{<block_content pos:start="401:9" pos:end="411:54">

        <if_stmt pos:start="401:9" pos:end="407:9"><if pos:start="401:9" pos:end="407:9">if <condition pos:start="401:12" pos:end="401:41">(<expr pos:start="401:13" pos:end="401:40"><name pos:start="401:13" pos:end="401:18">bus_id</name> <operator pos:start="401:20" pos:end="401:21">!=</operator> <literal type="number" pos:start="401:23" pos:end="401:23">0</literal> <operator pos:start="401:25" pos:end="401:26">||</operator> <name pos:start="401:28" pos:end="401:34">unit_id</name> <operator pos:start="401:36" pos:end="401:37">!=</operator> <operator pos:start="401:39" pos:end="401:39">-</operator><literal type="number" pos:start="401:40" pos:end="401:40">1</literal></expr>)</condition> <block pos:start="401:43" pos:end="407:9">{<block_content pos:start="403:13" pos:end="405:24">

            <expr_stmt pos:start="403:13" pos:end="403:67"><expr pos:start="403:13" pos:end="403:66"><call pos:start="403:13" pos:end="403:66"><name pos:start="403:13" pos:end="403:24">error_report</name><argument_list pos:start="403:25" pos:end="403:66">(<argument pos:start="403:26" pos:end="403:65"><expr pos:start="403:26" pos:end="403:65"><literal type="string" pos:start="403:26" pos:end="403:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="405:13" pos:end="405:24">return <expr pos:start="405:20" pos:end="405:23"><name pos:start="405:20" pos:end="405:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:52"><expr pos:start="409:9" pos:end="409:51"><name pos:start="409:9" pos:end="409:14">bus_id</name> <operator pos:start="409:16" pos:end="409:16">=</operator> <call pos:start="409:18" pos:end="409:51"><name pos:start="409:18" pos:end="409:38">drive_index_to_bus_id</name><argument_list pos:start="409:39" pos:end="409:51">(<argument pos:start="409:40" pos:end="409:43"><expr pos:start="409:40" pos:end="409:43"><name pos:start="409:40" pos:end="409:43">type</name></expr></argument>, <argument pos:start="409:46" pos:end="409:50"><expr pos:start="409:46" pos:end="409:50"><name pos:start="409:46" pos:end="409:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:54"><expr pos:start="411:9" pos:end="411:53"><name pos:start="411:9" pos:end="411:15">unit_id</name> <operator pos:start="411:17" pos:end="411:17">=</operator> <call pos:start="411:19" pos:end="411:53"><name pos:start="411:19" pos:end="411:40">drive_index_to_unit_id</name><argument_list pos:start="411:41" pos:end="411:53">(<argument pos:start="411:42" pos:end="411:45"><expr pos:start="411:42" pos:end="411:45"><name pos:start="411:42" pos:end="411:45">type</name></expr></argument>, <argument pos:start="411:48" pos:end="411:52"><expr pos:start="411:48" pos:end="411:52"><name pos:start="411:48" pos:end="411:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="417:5" pos:end="421:7">/* if user doesn't specify a unit_id,

     * try to find the first free

     */</comment>



    <if_stmt pos:start="425:5" pos:end="443:5"><if pos:start="425:5" pos:end="443:5">if <condition pos:start="425:8" pos:end="425:22">(<expr pos:start="425:9" pos:end="425:21"><name pos:start="425:9" pos:end="425:15">unit_id</name> <operator pos:start="425:17" pos:end="425:18">==</operator> <operator pos:start="425:20" pos:end="425:20">-</operator><literal type="number" pos:start="425:21" pos:end="425:21">1</literal></expr>)</condition> <block pos:start="425:24" pos:end="443:5">{<block_content pos:start="427:8" pos:end="441:8">

       <expr_stmt pos:start="427:8" pos:end="427:19"><expr pos:start="427:8" pos:end="427:18"><name pos:start="427:8" pos:end="427:14">unit_id</name> <operator pos:start="427:16" pos:end="427:16">=</operator> <literal type="number" pos:start="427:18" pos:end="427:18">0</literal></expr>;</expr_stmt>

       <while pos:start="429:8" pos:end="441:8">while <condition pos:start="429:14" pos:end="429:55">(<expr pos:start="429:15" pos:end="429:54"><call pos:start="429:15" pos:end="429:46"><name pos:start="429:15" pos:end="429:23">drive_get</name><argument_list pos:start="429:24" pos:end="429:46">(<argument pos:start="429:25" pos:end="429:28"><expr pos:start="429:25" pos:end="429:28"><name pos:start="429:25" pos:end="429:28">type</name></expr></argument>, <argument pos:start="429:31" pos:end="429:36"><expr pos:start="429:31" pos:end="429:36"><name pos:start="429:31" pos:end="429:36">bus_id</name></expr></argument>, <argument pos:start="429:39" pos:end="429:45"><expr pos:start="429:39" pos:end="429:45"><name pos:start="429:39" pos:end="429:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="429:48" pos:end="429:49">!=</operator> <name pos:start="429:51" pos:end="429:54">NULL</name></expr>)</condition> <block pos:start="429:57" pos:end="441:8">{<block_content pos:start="431:12" pos:end="439:12">

           <expr_stmt pos:start="431:12" pos:end="431:21"><expr pos:start="431:12" pos:end="431:20"><name pos:start="431:12" pos:end="431:18">unit_id</name><operator pos:start="431:19" pos:end="431:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="433:12" pos:end="439:12"><if pos:start="433:12" pos:end="439:12">if <condition pos:start="433:15" pos:end="433:47">(<expr pos:start="433:16" pos:end="433:46"><name pos:start="433:16" pos:end="433:23">max_devs</name> <operator pos:start="433:25" pos:end="433:26">&amp;&amp;</operator> <name pos:start="433:28" pos:end="433:34">unit_id</name> <operator pos:start="433:36" pos:end="433:37">&gt;=</operator> <name pos:start="433:39" pos:end="433:46">max_devs</name></expr>)</condition> <block pos:start="433:49" pos:end="439:12">{<block_content pos:start="435:16" pos:end="437:24">

               <expr_stmt pos:start="435:16" pos:end="435:35"><expr pos:start="435:16" pos:end="435:34"><name pos:start="435:16" pos:end="435:22">unit_id</name> <operator pos:start="435:24" pos:end="435:25">-=</operator> <name pos:start="435:27" pos:end="435:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="437:16" pos:end="437:24"><expr pos:start="437:16" pos:end="437:23"><name pos:start="437:16" pos:end="437:21">bus_id</name><operator pos:start="437:22" pos:end="437:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="447:5" pos:end="447:23">/* check unit id */</comment>



    <if_stmt pos:start="451:5" pos:end="459:5"><if pos:start="451:5" pos:end="459:5">if <condition pos:start="451:8" pos:end="451:40">(<expr pos:start="451:9" pos:end="451:39"><name pos:start="451:9" pos:end="451:16">max_devs</name> <operator pos:start="451:18" pos:end="451:19">&amp;&amp;</operator> <name pos:start="451:21" pos:end="451:27">unit_id</name> <operator pos:start="451:29" pos:end="451:30">&gt;=</operator> <name pos:start="451:32" pos:end="451:39">max_devs</name></expr>)</condition> <block pos:start="451:42" pos:end="459:5">{<block_content pos:start="453:9" pos:end="457:20">

        <expr_stmt pos:start="453:9" pos:end="455:44"><expr pos:start="453:9" pos:end="455:43"><call pos:start="453:9" pos:end="455:43"><name pos:start="453:9" pos:end="453:20">error_report</name><argument_list pos:start="453:21" pos:end="455:43">(<argument pos:start="453:22" pos:end="453:50"><expr pos:start="453:22" pos:end="453:50"><literal type="string" pos:start="453:22" pos:end="453:50">"unit %d too big (max is %d)"</literal></expr></argument>,

                     <argument pos:start="455:22" pos:end="455:28"><expr pos:start="455:22" pos:end="455:28"><name pos:start="455:22" pos:end="455:28">unit_id</name></expr></argument>, <argument pos:start="455:31" pos:end="455:42"><expr pos:start="455:31" pos:end="455:42"><name pos:start="455:31" pos:end="455:38">max_devs</name> <operator pos:start="455:40" pos:end="455:40">-</operator> <literal type="number" pos:start="455:42" pos:end="455:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="457:9" pos:end="457:20">return <expr pos:start="457:16" pos:end="457:19"><name pos:start="457:16" pos:end="457:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="463:5" pos:end="467:7">/*

     * catch multiple definitions

     */</comment>



    <if_stmt pos:start="471:5" pos:end="479:5"><if pos:start="471:5" pos:end="479:5">if <condition pos:start="471:8" pos:end="471:49">(<expr pos:start="471:9" pos:end="471:48"><call pos:start="471:9" pos:end="471:40"><name pos:start="471:9" pos:end="471:17">drive_get</name><argument_list pos:start="471:18" pos:end="471:40">(<argument pos:start="471:19" pos:end="471:22"><expr pos:start="471:19" pos:end="471:22"><name pos:start="471:19" pos:end="471:22">type</name></expr></argument>, <argument pos:start="471:25" pos:end="471:30"><expr pos:start="471:25" pos:end="471:30"><name pos:start="471:25" pos:end="471:30">bus_id</name></expr></argument>, <argument pos:start="471:33" pos:end="471:39"><expr pos:start="471:33" pos:end="471:39"><name pos:start="471:33" pos:end="471:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="471:42" pos:end="471:43">!=</operator> <name pos:start="471:45" pos:end="471:48">NULL</name></expr>)</condition> <block pos:start="471:51" pos:end="479:5">{<block_content pos:start="473:9" pos:end="477:20">

        <expr_stmt pos:start="473:9" pos:end="475:45"><expr pos:start="473:9" pos:end="475:44"><call pos:start="473:9" pos:end="475:44"><name pos:start="473:9" pos:end="473:20">error_report</name><argument_list pos:start="473:21" pos:end="475:44">(<argument pos:start="473:22" pos:end="473:67"><expr pos:start="473:22" pos:end="473:67"><literal type="string" pos:start="473:22" pos:end="473:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="475:22" pos:end="475:27"><expr pos:start="475:22" pos:end="475:27"><name pos:start="475:22" pos:end="475:27">bus_id</name></expr></argument>, <argument pos:start="475:30" pos:end="475:36"><expr pos:start="475:30" pos:end="475:36"><name pos:start="475:30" pos:end="475:36">unit_id</name></expr></argument>, <argument pos:start="475:39" pos:end="475:43"><expr pos:start="475:39" pos:end="475:43"><name pos:start="475:39" pos:end="475:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="477:9" pos:end="477:20">return <expr pos:start="477:16" pos:end="477:19"><name pos:start="477:16" pos:end="477:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="483:5" pos:end="483:14">/* init */</comment>



    <expr_stmt pos:start="487:5" pos:end="487:38"><expr pos:start="487:5" pos:end="487:37"><name pos:start="487:5" pos:end="487:9">dinfo</name> <operator pos:start="487:11" pos:end="487:11">=</operator> <call pos:start="487:13" pos:end="487:37"><name pos:start="487:13" pos:end="487:21">g_malloc0</name><argument_list pos:start="487:22" pos:end="487:37">(<argument pos:start="487:23" pos:end="487:36"><expr pos:start="487:23" pos:end="487:36"><sizeof pos:start="487:23" pos:end="487:36">sizeof<argument_list pos:start="487:29" pos:end="487:36">(<argument pos:start="487:30" pos:end="487:35"><expr pos:start="487:30" pos:end="487:35"><operator pos:start="487:30" pos:end="487:30">*</operator><name pos:start="487:31" pos:end="487:35">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="489:5" pos:end="515:5"><if pos:start="489:5" pos:end="493:5">if <condition pos:start="489:8" pos:end="489:43">(<expr pos:start="489:9" pos:end="489:42"><operator pos:start="489:9" pos:end="489:9">(</operator><name pos:start="489:10" pos:end="489:12">buf</name> <operator pos:start="489:14" pos:end="489:14">=</operator> <call pos:start="489:16" pos:end="489:33"><name pos:start="489:16" pos:end="489:27">qemu_opts_id</name><argument_list pos:start="489:28" pos:end="489:33">(<argument pos:start="489:29" pos:end="489:32"><expr pos:start="489:29" pos:end="489:32"><name pos:start="489:29" pos:end="489:32">opts</name></expr></argument>)</argument_list></call><operator pos:start="489:34" pos:end="489:34">)</operator> <operator pos:start="489:36" pos:end="489:37">!=</operator> <name pos:start="489:39" pos:end="489:42">NULL</name></expr>)</condition> <block pos:start="489:45" pos:end="493:5">{<block_content pos:start="491:9" pos:end="491:34">

        <expr_stmt pos:start="491:9" pos:end="491:34"><expr pos:start="491:9" pos:end="491:33"><name pos:start="491:9" pos:end="491:17"><name pos:start="491:9" pos:end="491:13">dinfo</name><operator pos:start="491:14" pos:end="491:15">-&gt;</operator><name pos:start="491:16" pos:end="491:17">id</name></name> <operator pos:start="491:19" pos:end="491:19">=</operator> <call pos:start="491:21" pos:end="491:33"><name pos:start="491:21" pos:end="491:28">g_strdup</name><argument_list pos:start="491:29" pos:end="491:33">(<argument pos:start="491:30" pos:end="491:32"><expr pos:start="491:30" pos:end="491:32"><name pos:start="491:30" pos:end="491:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="493:7" pos:end="515:5">else <block pos:start="493:12" pos:end="515:5">{<block_content pos:start="497:9" pos:end="513:55">

        <comment type="block" pos:start="495:9" pos:end="495:42">/* no id supplied -&gt; create one */</comment>

        <expr_stmt pos:start="497:9" pos:end="497:34"><expr pos:start="497:9" pos:end="497:33"><name pos:start="497:9" pos:end="497:17"><name pos:start="497:9" pos:end="497:13">dinfo</name><operator pos:start="497:14" pos:end="497:15">-&gt;</operator><name pos:start="497:16" pos:end="497:17">id</name></name> <operator pos:start="497:19" pos:end="497:19">=</operator> <call pos:start="497:21" pos:end="497:33"><name pos:start="497:21" pos:end="497:29">g_malloc0</name><argument_list pos:start="497:30" pos:end="497:33">(<argument pos:start="497:31" pos:end="497:32"><expr pos:start="497:31" pos:end="497:32"><literal type="number" pos:start="497:31" pos:end="497:32">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="499:9" pos:end="501:62"><if pos:start="499:9" pos:end="501:62">if <condition pos:start="499:12" pos:end="499:46">(<expr pos:start="499:13" pos:end="499:45"><name pos:start="499:13" pos:end="499:16">type</name> <operator pos:start="499:18" pos:end="499:19">==</operator> <name pos:start="499:21" pos:end="499:26">IF_IDE</name> <operator pos:start="499:28" pos:end="499:29">||</operator> <name pos:start="499:31" pos:end="499:34">type</name> <operator pos:start="499:36" pos:end="499:37">==</operator> <name pos:start="499:39" pos:end="499:45">IF_SCSI</name></expr>)</condition><block type="pseudo" pos:start="501:13" pos:end="501:62"><block_content pos:start="501:13" pos:end="501:62">

            <expr_stmt pos:start="501:13" pos:end="501:62"><expr pos:start="501:13" pos:end="501:61"><name pos:start="501:13" pos:end="501:20">mediastr</name> <operator pos:start="501:22" pos:end="501:22">=</operator> <ternary pos:start="501:24" pos:end="501:61"><condition pos:start="501:24" pos:end="501:47"><expr pos:start="501:24" pos:end="501:45"><operator pos:start="501:24" pos:end="501:24">(</operator><name pos:start="501:25" pos:end="501:29">media</name> <operator pos:start="501:31" pos:end="501:32">==</operator> <name pos:start="501:34" pos:end="501:44">MEDIA_CDROM</name><operator pos:start="501:45" pos:end="501:45">)</operator></expr> ?</condition><then pos:start="501:49" pos:end="501:53"> <expr pos:start="501:49" pos:end="501:53"><literal type="string" pos:start="501:49" pos:end="501:53">"-cd"</literal></expr> </then><else pos:start="501:55" pos:end="501:61">: <expr pos:start="501:57" pos:end="501:61"><literal type="string" pos:start="501:57" pos:end="501:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="503:9" pos:end="513:55"><if pos:start="503:9" pos:end="507:63">if <condition pos:start="503:12" pos:end="503:21">(<expr pos:start="503:13" pos:end="503:20"><name pos:start="503:13" pos:end="503:20">max_devs</name></expr>)</condition><block type="pseudo" pos:start="505:13" pos:end="507:63"><block_content pos:start="505:13" pos:end="507:63">

            <expr_stmt pos:start="505:13" pos:end="507:63"><expr pos:start="505:13" pos:end="507:62"><call pos:start="505:13" pos:end="507:62"><name pos:start="505:13" pos:end="505:20">snprintf</name><argument_list pos:start="505:21" pos:end="507:62">(<argument pos:start="505:22" pos:end="505:30"><expr pos:start="505:22" pos:end="505:30"><name pos:start="505:22" pos:end="505:30"><name pos:start="505:22" pos:end="505:26">dinfo</name><operator pos:start="505:27" pos:end="505:28">-&gt;</operator><name pos:start="505:29" pos:end="505:30">id</name></name></expr></argument>, <argument pos:start="505:33" pos:end="505:34"><expr pos:start="505:33" pos:end="505:34"><literal type="number" pos:start="505:33" pos:end="505:34">32</literal></expr></argument>, <argument pos:start="505:37" pos:end="505:46"><expr pos:start="505:37" pos:end="505:46"><literal type="string" pos:start="505:37" pos:end="505:46">"%s%i%s%i"</literal></expr></argument>,

                     <argument pos:start="507:22" pos:end="507:34"><expr pos:start="507:22" pos:end="507:34"><name pos:start="507:22" pos:end="507:34"><name pos:start="507:22" pos:end="507:28">if_name</name><index pos:start="507:29" pos:end="507:34">[<expr pos:start="507:30" pos:end="507:33"><name pos:start="507:30" pos:end="507:33">type</name></expr>]</index></name></expr></argument>, <argument pos:start="507:37" pos:end="507:42"><expr pos:start="507:37" pos:end="507:42"><name pos:start="507:37" pos:end="507:42">bus_id</name></expr></argument>, <argument pos:start="507:45" pos:end="507:52"><expr pos:start="507:45" pos:end="507:52"><name pos:start="507:45" pos:end="507:52">mediastr</name></expr></argument>, <argument pos:start="507:55" pos:end="507:61"><expr pos:start="507:55" pos:end="507:61"><name pos:start="507:55" pos:end="507:61">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="509:9" pos:end="513:55">else<block type="pseudo" pos:start="511:13" pos:end="513:55"><block_content pos:start="511:13" pos:end="513:55">

            <expr_stmt pos:start="511:13" pos:end="513:55"><expr pos:start="511:13" pos:end="513:54"><call pos:start="511:13" pos:end="513:54"><name pos:start="511:13" pos:end="511:20">snprintf</name><argument_list pos:start="511:21" pos:end="513:54">(<argument pos:start="511:22" pos:end="511:30"><expr pos:start="511:22" pos:end="511:30"><name pos:start="511:22" pos:end="511:30"><name pos:start="511:22" pos:end="511:26">dinfo</name><operator pos:start="511:27" pos:end="511:28">-&gt;</operator><name pos:start="511:29" pos:end="511:30">id</name></name></expr></argument>, <argument pos:start="511:33" pos:end="511:34"><expr pos:start="511:33" pos:end="511:34"><literal type="number" pos:start="511:33" pos:end="511:34">32</literal></expr></argument>, <argument pos:start="511:37" pos:end="511:44"><expr pos:start="511:37" pos:end="511:44"><literal type="string" pos:start="511:37" pos:end="511:44">"%s%s%i"</literal></expr></argument>,

                     <argument pos:start="513:22" pos:end="513:34"><expr pos:start="513:22" pos:end="513:34"><name pos:start="513:22" pos:end="513:34"><name pos:start="513:22" pos:end="513:28">if_name</name><index pos:start="513:29" pos:end="513:34">[<expr pos:start="513:30" pos:end="513:33"><name pos:start="513:30" pos:end="513:33">type</name></expr>]</index></name></expr></argument>, <argument pos:start="513:37" pos:end="513:44"><expr pos:start="513:37" pos:end="513:44"><name pos:start="513:37" pos:end="513:44">mediastr</name></expr></argument>, <argument pos:start="513:47" pos:end="513:53"><expr pos:start="513:47" pos:end="513:53"><name pos:start="513:47" pos:end="513:53">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:38"><expr pos:start="517:5" pos:end="517:37"><name pos:start="517:5" pos:end="517:15"><name pos:start="517:5" pos:end="517:9">dinfo</name><operator pos:start="517:10" pos:end="517:11">-&gt;</operator><name pos:start="517:12" pos:end="517:15">bdrv</name></name> <operator pos:start="517:17" pos:end="517:17">=</operator> <call pos:start="517:19" pos:end="517:37"><name pos:start="517:19" pos:end="517:26">bdrv_new</name><argument_list pos:start="517:27" pos:end="517:37">(<argument pos:start="517:28" pos:end="517:36"><expr pos:start="517:28" pos:end="517:36"><name pos:start="517:28" pos:end="517:36"><name pos:start="517:28" pos:end="517:32">dinfo</name><operator pos:start="517:33" pos:end="517:34">-&gt;</operator><name pos:start="517:35" pos:end="517:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:61"><expr pos:start="519:5" pos:end="519:60"><name pos:start="519:5" pos:end="519:27"><name pos:start="519:5" pos:end="519:9">dinfo</name><operator pos:start="519:10" pos:end="519:11">-&gt;</operator><name pos:start="519:12" pos:end="519:15">bdrv</name><operator pos:start="519:16" pos:end="519:17">-&gt;</operator><name pos:start="519:18" pos:end="519:27">open_flags</name></name> <operator pos:start="519:29" pos:end="519:29">=</operator> <ternary pos:start="519:31" pos:end="519:60"><condition pos:start="519:31" pos:end="519:40"><expr pos:start="519:31" pos:end="519:38"><name pos:start="519:31" pos:end="519:38">snapshot</name></expr> ?</condition><then pos:start="519:42" pos:end="519:56"> <expr pos:start="519:42" pos:end="519:56"><name pos:start="519:42" pos:end="519:56">BDRV_O_SNAPSHOT</name></expr> </then><else pos:start="519:58" pos:end="519:60">: <expr pos:start="519:60" pos:end="519:60"><literal type="number" pos:start="519:60" pos:end="519:60">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:32"><expr pos:start="521:5" pos:end="521:31"><name pos:start="521:5" pos:end="521:26"><name pos:start="521:5" pos:end="521:9">dinfo</name><operator pos:start="521:10" pos:end="521:11">-&gt;</operator><name pos:start="521:12" pos:end="521:15">bdrv</name><operator pos:start="521:16" pos:end="521:17">-&gt;</operator><name pos:start="521:18" pos:end="521:26">read_only</name></name> <operator pos:start="521:28" pos:end="521:28">=</operator> <name pos:start="521:30" pos:end="521:31">ro</name></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:29"><expr pos:start="523:5" pos:end="523:28"><name pos:start="523:5" pos:end="523:18"><name pos:start="523:5" pos:end="523:9">dinfo</name><operator pos:start="523:10" pos:end="523:11">-&gt;</operator><name pos:start="523:12" pos:end="523:18">devaddr</name></name> <operator pos:start="523:20" pos:end="523:20">=</operator> <name pos:start="523:22" pos:end="523:28">devaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="525:23"><expr pos:start="525:5" pos:end="525:22"><name pos:start="525:5" pos:end="525:15"><name pos:start="525:5" pos:end="525:9">dinfo</name><operator pos:start="525:10" pos:end="525:11">-&gt;</operator><name pos:start="525:12" pos:end="525:15">type</name></name> <operator pos:start="525:17" pos:end="525:17">=</operator> <name pos:start="525:19" pos:end="525:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="527:5" pos:end="527:24"><expr pos:start="527:5" pos:end="527:23"><name pos:start="527:5" pos:end="527:14"><name pos:start="527:5" pos:end="527:9">dinfo</name><operator pos:start="527:10" pos:end="527:11">-&gt;</operator><name pos:start="527:12" pos:end="527:14">bus</name></name> <operator pos:start="527:16" pos:end="527:16">=</operator> <name pos:start="527:18" pos:end="527:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="529:5" pos:end="529:26"><expr pos:start="529:5" pos:end="529:25"><name pos:start="529:5" pos:end="529:15"><name pos:start="529:5" pos:end="529:9">dinfo</name><operator pos:start="529:10" pos:end="529:11">-&gt;</operator><name pos:start="529:12" pos:end="529:15">unit</name></name> <operator pos:start="529:17" pos:end="529:17">=</operator> <name pos:start="529:19" pos:end="529:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="531:5" pos:end="531:23"><expr pos:start="531:5" pos:end="531:22"><name pos:start="531:5" pos:end="531:15"><name pos:start="531:5" pos:end="531:9">dinfo</name><operator pos:start="531:10" pos:end="531:11">-&gt;</operator><name pos:start="531:12" pos:end="531:15">cyls</name></name> <operator pos:start="531:17" pos:end="531:17">=</operator> <name pos:start="531:19" pos:end="531:22">cyls</name></expr>;</expr_stmt>

    <expr_stmt pos:start="533:5" pos:end="533:25"><expr pos:start="533:5" pos:end="533:24"><name pos:start="533:5" pos:end="533:16"><name pos:start="533:5" pos:end="533:9">dinfo</name><operator pos:start="533:10" pos:end="533:11">-&gt;</operator><name pos:start="533:12" pos:end="533:16">heads</name></name> <operator pos:start="533:18" pos:end="533:18">=</operator> <name pos:start="533:20" pos:end="533:24">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:23"><expr pos:start="535:5" pos:end="535:22"><name pos:start="535:5" pos:end="535:15"><name pos:start="535:5" pos:end="535:9">dinfo</name><operator pos:start="535:10" pos:end="535:11">-&gt;</operator><name pos:start="535:12" pos:end="535:15">secs</name></name> <operator pos:start="535:17" pos:end="535:17">=</operator> <name pos:start="535:19" pos:end="535:22">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="537:5" pos:end="537:31"><expr pos:start="537:5" pos:end="537:30"><name pos:start="537:5" pos:end="537:16"><name pos:start="537:5" pos:end="537:9">dinfo</name><operator pos:start="537:10" pos:end="537:11">-&gt;</operator><name pos:start="537:12" pos:end="537:16">trans</name></name> <operator pos:start="537:18" pos:end="537:18">=</operator> <name pos:start="537:20" pos:end="537:30">translation</name></expr>;</expr_stmt>

    <expr_stmt pos:start="539:5" pos:end="539:23"><expr pos:start="539:5" pos:end="539:22"><name pos:start="539:5" pos:end="539:15"><name pos:start="539:5" pos:end="539:9">dinfo</name><operator pos:start="539:10" pos:end="539:11">-&gt;</operator><name pos:start="539:12" pos:end="539:15">opts</name></name> <operator pos:start="539:17" pos:end="539:17">=</operator> <name pos:start="539:19" pos:end="539:22">opts</name></expr>;</expr_stmt>

    <expr_stmt pos:start="541:5" pos:end="541:24"><expr pos:start="541:5" pos:end="541:23"><name pos:start="541:5" pos:end="541:19"><name pos:start="541:5" pos:end="541:9">dinfo</name><operator pos:start="541:10" pos:end="541:11">-&gt;</operator><name pos:start="541:12" pos:end="541:19">refcount</name></name> <operator pos:start="541:21" pos:end="541:21">=</operator> <literal type="number" pos:start="541:23" pos:end="541:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:27"><expr pos:start="543:5" pos:end="543:26"><name pos:start="543:5" pos:end="543:17"><name pos:start="543:5" pos:end="543:9">dinfo</name><operator pos:start="543:10" pos:end="543:11">-&gt;</operator><name pos:start="543:12" pos:end="543:17">serial</name></name> <operator pos:start="543:19" pos:end="543:19">=</operator> <name pos:start="543:21" pos:end="543:26">serial</name></expr>;</expr_stmt>

    <expr_stmt pos:start="545:5" pos:end="545:45"><expr pos:start="545:5" pos:end="545:44"><call pos:start="545:5" pos:end="545:44"><name pos:start="545:5" pos:end="545:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="545:23" pos:end="545:44">(<argument pos:start="545:24" pos:end="545:30"><expr pos:start="545:24" pos:end="545:30"><operator pos:start="545:24" pos:end="545:24">&amp;</operator><name pos:start="545:25" pos:end="545:30">drives</name></expr></argument>, <argument pos:start="545:33" pos:end="545:37"><expr pos:start="545:33" pos:end="545:37"><name pos:start="545:33" pos:end="545:37">dinfo</name></expr></argument>, <argument pos:start="545:40" pos:end="545:43"><expr pos:start="545:40" pos:end="545:43"><name pos:start="545:40" pos:end="545:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="549:5" pos:end="549:66"><expr pos:start="549:5" pos:end="549:65"><call pos:start="549:5" pos:end="549:65"><name pos:start="549:5" pos:end="549:21">bdrv_set_on_error</name><argument_list pos:start="549:22" pos:end="549:65">(<argument pos:start="549:23" pos:end="549:33"><expr pos:start="549:23" pos:end="549:33"><name pos:start="549:23" pos:end="549:33"><name pos:start="549:23" pos:end="549:27">dinfo</name><operator pos:start="549:28" pos:end="549:29">-&gt;</operator><name pos:start="549:30" pos:end="549:33">bdrv</name></name></expr></argument>, <argument pos:start="549:36" pos:end="549:48"><expr pos:start="549:36" pos:end="549:48"><name pos:start="549:36" pos:end="549:48">on_read_error</name></expr></argument>, <argument pos:start="549:51" pos:end="549:64"><expr pos:start="549:51" pos:end="549:64"><name pos:start="549:51" pos:end="549:64">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="553:5" pos:end="553:29">/* disk I/O throttling */</comment>

    <expr_stmt pos:start="555:5" pos:end="555:48"><expr pos:start="555:5" pos:end="555:47"><call pos:start="555:5" pos:end="555:47"><name pos:start="555:5" pos:end="555:22">bdrv_set_io_limits</name><argument_list pos:start="555:23" pos:end="555:47">(<argument pos:start="555:24" pos:end="555:34"><expr pos:start="555:24" pos:end="555:34"><name pos:start="555:24" pos:end="555:34"><name pos:start="555:24" pos:end="555:28">dinfo</name><operator pos:start="555:29" pos:end="555:30">-&gt;</operator><name pos:start="555:31" pos:end="555:34">bdrv</name></name></expr></argument>, <argument pos:start="555:37" pos:end="555:46"><expr pos:start="555:37" pos:end="555:46"><operator pos:start="555:37" pos:end="555:37">&amp;</operator><name pos:start="555:38" pos:end="555:46">io_limits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="559:5" pos:end="611:5">switch<condition pos:start="559:11" pos:end="559:16">(<expr pos:start="559:12" pos:end="559:15"><name pos:start="559:12" pos:end="559:15">type</name></expr>)</condition> <block pos:start="559:18" pos:end="611:5">{<block_content pos:start="561:5" pos:end="609:16">

    <case pos:start="561:5" pos:end="561:16">case <expr pos:start="561:10" pos:end="561:15"><name pos:start="561:10" pos:end="561:15">IF_IDE</name></expr>:</case>

    <case pos:start="563:5" pos:end="563:17">case <expr pos:start="563:10" pos:end="563:16"><name pos:start="563:10" pos:end="563:16">IF_SCSI</name></expr>:</case>

    <case pos:start="565:5" pos:end="565:16">case <expr pos:start="565:10" pos:end="565:15"><name pos:start="565:10" pos:end="565:15">IF_XEN</name></expr>:</case>

    <case pos:start="567:5" pos:end="567:17">case <expr pos:start="567:10" pos:end="567:16"><name pos:start="567:10" pos:end="567:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="569:9" pos:end="569:47"><expr pos:start="569:9" pos:end="569:46"><name pos:start="569:9" pos:end="569:23"><name pos:start="569:9" pos:end="569:13">dinfo</name><operator pos:start="569:14" pos:end="569:15">-&gt;</operator><name pos:start="569:16" pos:end="569:23">media_cd</name></name> <operator pos:start="569:25" pos:end="569:25">=</operator> <name pos:start="569:27" pos:end="569:31">media</name> <operator pos:start="569:33" pos:end="569:34">==</operator> <name pos:start="569:36" pos:end="569:46">MEDIA_CDROM</name></expr>;</expr_stmt>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <case pos:start="573:5" pos:end="573:15">case <expr pos:start="573:10" pos:end="573:14"><name pos:start="573:10" pos:end="573:14">IF_SD</name></expr>:</case>

    <case pos:start="575:5" pos:end="575:19">case <expr pos:start="575:10" pos:end="575:18"><name pos:start="575:10" pos:end="575:18">IF_FLOPPY</name></expr>:</case>

    <case pos:start="577:5" pos:end="577:19">case <expr pos:start="577:10" pos:end="577:18"><name pos:start="577:10" pos:end="577:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="579:5" pos:end="579:16">case <expr pos:start="579:10" pos:end="579:15"><name pos:start="579:10" pos:end="579:15">IF_MTD</name></expr>:</case>

        <break pos:start="581:9" pos:end="581:14">break;</break>

    <case pos:start="583:5" pos:end="583:19">case <expr pos:start="583:10" pos:end="583:18"><name pos:start="583:10" pos:end="583:18">IF_VIRTIO</name></expr>:</case>

        <comment type="block" pos:start="585:9" pos:end="585:37">/* add virtio block device */</comment>

        <expr_stmt pos:start="587:9" pos:end="587:65"><expr pos:start="587:9" pos:end="587:64"><name pos:start="587:9" pos:end="587:12">opts</name> <operator pos:start="587:14" pos:end="587:14">=</operator> <call pos:start="587:16" pos:end="587:64"><name pos:start="587:16" pos:end="587:38">qemu_opts_create_nofail</name><argument_list pos:start="587:39" pos:end="587:64">(<argument pos:start="587:40" pos:end="587:63"><expr pos:start="587:40" pos:end="587:63"><call pos:start="587:40" pos:end="587:63"><name pos:start="587:40" pos:end="587:53">qemu_find_opts</name><argument_list pos:start="587:54" pos:end="587:63">(<argument pos:start="587:55" pos:end="587:62"><expr pos:start="587:55" pos:end="587:62"><literal type="string" pos:start="587:55" pos:end="587:62">"device"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="589:9" pos:end="597:9"><if pos:start="589:9" pos:end="593:9">if <condition pos:start="589:12" pos:end="589:41">(<expr pos:start="589:13" pos:end="589:40"><name pos:start="589:13" pos:end="589:21">arch_type</name> <operator pos:start="589:23" pos:end="589:24">==</operator> <name pos:start="589:26" pos:end="589:40">QEMU_ARCH_S390X</name></expr>)</condition> <block pos:start="589:43" pos:end="593:9">{<block_content pos:start="591:13" pos:end="591:60">

            <expr_stmt pos:start="591:13" pos:end="591:60"><expr pos:start="591:13" pos:end="591:59"><call pos:start="591:13" pos:end="591:59"><name pos:start="591:13" pos:end="591:24">qemu_opt_set</name><argument_list pos:start="591:25" pos:end="591:59">(<argument pos:start="591:26" pos:end="591:29"><expr pos:start="591:26" pos:end="591:29"><name pos:start="591:26" pos:end="591:29">opts</name></expr></argument>, <argument pos:start="591:32" pos:end="591:39"><expr pos:start="591:32" pos:end="591:39"><literal type="string" pos:start="591:32" pos:end="591:39">"driver"</literal></expr></argument>, <argument pos:start="591:42" pos:end="591:58"><expr pos:start="591:42" pos:end="591:58"><literal type="string" pos:start="591:42" pos:end="591:58">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="593:11" pos:end="597:9">else <block pos:start="593:16" pos:end="597:9">{<block_content pos:start="595:13" pos:end="595:59">

            <expr_stmt pos:start="595:13" pos:end="595:59"><expr pos:start="595:13" pos:end="595:58"><call pos:start="595:13" pos:end="595:58"><name pos:start="595:13" pos:end="595:24">qemu_opt_set</name><argument_list pos:start="595:25" pos:end="595:58">(<argument pos:start="595:26" pos:end="595:29"><expr pos:start="595:26" pos:end="595:29"><name pos:start="595:26" pos:end="595:29">opts</name></expr></argument>, <argument pos:start="595:32" pos:end="595:39"><expr pos:start="595:32" pos:end="595:39"><literal type="string" pos:start="595:32" pos:end="595:39">"driver"</literal></expr></argument>, <argument pos:start="595:42" pos:end="595:57"><expr pos:start="595:42" pos:end="595:57"><literal type="string" pos:start="595:42" pos:end="595:57">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:47"><expr pos:start="599:9" pos:end="599:46"><call pos:start="599:9" pos:end="599:46"><name pos:start="599:9" pos:end="599:20">qemu_opt_set</name><argument_list pos:start="599:21" pos:end="599:46">(<argument pos:start="599:22" pos:end="599:25"><expr pos:start="599:22" pos:end="599:25"><name pos:start="599:22" pos:end="599:25">opts</name></expr></argument>, <argument pos:start="599:28" pos:end="599:34"><expr pos:start="599:28" pos:end="599:34"><literal type="string" pos:start="599:28" pos:end="599:34">"drive"</literal></expr></argument>, <argument pos:start="599:37" pos:end="599:45"><expr pos:start="599:37" pos:end="599:45"><name pos:start="599:37" pos:end="599:45"><name pos:start="599:37" pos:end="599:41">dinfo</name><operator pos:start="599:42" pos:end="599:43">-&gt;</operator><name pos:start="599:44" pos:end="599:45">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="601:9" pos:end="603:48"><if pos:start="601:9" pos:end="603:48">if <condition pos:start="601:12" pos:end="601:20">(<expr pos:start="601:13" pos:end="601:19"><name pos:start="601:13" pos:end="601:19">devaddr</name></expr>)</condition><block type="pseudo" pos:start="603:13" pos:end="603:48"><block_content pos:start="603:13" pos:end="603:48">

            <expr_stmt pos:start="603:13" pos:end="603:48"><expr pos:start="603:13" pos:end="603:47"><call pos:start="603:13" pos:end="603:47"><name pos:start="603:13" pos:end="603:24">qemu_opt_set</name><argument_list pos:start="603:25" pos:end="603:47">(<argument pos:start="603:26" pos:end="603:29"><expr pos:start="603:26" pos:end="603:29"><name pos:start="603:26" pos:end="603:29">opts</name></expr></argument>, <argument pos:start="603:32" pos:end="603:37"><expr pos:start="603:32" pos:end="603:37"><literal type="string" pos:start="603:32" pos:end="603:37">"addr"</literal></expr></argument>, <argument pos:start="603:40" pos:end="603:46"><expr pos:start="603:40" pos:end="603:46"><name pos:start="603:40" pos:end="603:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="605:9" pos:end="605:14">break;</break>

    <default pos:start="607:5" pos:end="607:12">default:</default>

        <expr_stmt pos:start="609:9" pos:end="609:16"><expr pos:start="609:9" pos:end="609:15"><call pos:start="609:9" pos:end="609:15"><name pos:start="609:9" pos:end="609:13">abort</name><argument_list pos:start="609:14" pos:end="609:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="613:5" pos:end="617:5"><if pos:start="613:5" pos:end="617:5">if <condition pos:start="613:8" pos:end="613:24">(<expr pos:start="613:9" pos:end="613:23"><operator pos:start="613:9" pos:end="613:9">!</operator><name pos:start="613:10" pos:end="613:13">file</name> <operator pos:start="613:15" pos:end="613:16">||</operator> <operator pos:start="613:18" pos:end="613:18">!</operator><operator pos:start="613:19" pos:end="613:19">*</operator><name pos:start="613:20" pos:end="613:23">file</name></expr>)</condition> <block pos:start="613:26" pos:end="617:5">{<block_content pos:start="615:9" pos:end="615:21">

        <return pos:start="615:9" pos:end="615:21">return <expr pos:start="615:16" pos:end="615:20"><name pos:start="615:16" pos:end="615:20">dinfo</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="619:5" pos:end="627:5"><if pos:start="619:5" pos:end="627:5">if <condition pos:start="619:8" pos:end="619:17">(<expr pos:start="619:9" pos:end="619:16"><name pos:start="619:9" pos:end="619:16">snapshot</name></expr>)</condition> <block pos:start="619:19" pos:end="627:5">{<block_content pos:start="623:9" pos:end="625:72">

        <comment type="block" pos:start="621:9" pos:end="621:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="623:9" pos:end="623:41"><expr pos:start="623:9" pos:end="623:40"><name pos:start="623:9" pos:end="623:18">bdrv_flags</name> <operator pos:start="623:20" pos:end="623:21">&amp;=</operator> <operator pos:start="623:23" pos:end="623:23">~</operator><name pos:start="623:24" pos:end="623:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="625:9" pos:end="625:72"><expr pos:start="625:9" pos:end="625:71"><name pos:start="625:9" pos:end="625:18">bdrv_flags</name> <operator pos:start="625:20" pos:end="625:21">|=</operator> <operator pos:start="625:23" pos:end="625:23">(</operator><name pos:start="625:24" pos:end="625:38">BDRV_O_SNAPSHOT</name><operator pos:start="625:39" pos:end="625:39">|</operator><name pos:start="625:40" pos:end="625:54">BDRV_O_CACHE_WB</name><operator pos:start="625:55" pos:end="625:55">|</operator><name pos:start="625:56" pos:end="625:70">BDRV_O_NO_FLUSH</name><operator pos:start="625:71" pos:end="625:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="631:5" pos:end="635:5"><if pos:start="631:5" pos:end="635:5">if <condition pos:start="631:8" pos:end="631:21">(<expr pos:start="631:9" pos:end="631:20"><name pos:start="631:9" pos:end="631:20">copy_on_read</name></expr>)</condition> <block pos:start="631:23" pos:end="635:5">{<block_content pos:start="633:9" pos:end="633:42">

        <expr_stmt pos:start="633:9" pos:end="633:42"><expr pos:start="633:9" pos:end="633:41"><name pos:start="633:9" pos:end="633:18">bdrv_flags</name> <operator pos:start="633:20" pos:end="633:21">|=</operator> <name pos:start="633:23" pos:end="633:41">BDRV_O_COPY_ON_READ</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="639:5" pos:end="643:5"><if pos:start="639:5" pos:end="643:5">if <condition pos:start="639:8" pos:end="639:44">(<expr pos:start="639:9" pos:end="639:43"><call pos:start="639:9" pos:end="639:43"><name pos:start="639:9" pos:end="639:22">runstate_check</name><argument_list pos:start="639:23" pos:end="639:43">(<argument pos:start="639:24" pos:end="639:42"><expr pos:start="639:24" pos:end="639:42"><name pos:start="639:24" pos:end="639:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="639:46" pos:end="643:5">{<block_content pos:start="641:9" pos:end="641:38">

        <expr_stmt pos:start="641:9" pos:end="641:38"><expr pos:start="641:9" pos:end="641:37"><name pos:start="641:9" pos:end="641:18">bdrv_flags</name> <operator pos:start="641:20" pos:end="641:21">|=</operator> <name pos:start="641:23" pos:end="641:37">BDRV_O_INCOMING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="647:5" pos:end="665:5"><if pos:start="647:5" pos:end="653:5">if <condition pos:start="647:8" pos:end="647:29">(<expr pos:start="647:9" pos:end="647:28"><name pos:start="647:9" pos:end="647:13">media</name> <operator pos:start="647:15" pos:end="647:16">==</operator> <name pos:start="647:18" pos:end="647:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="647:31" pos:end="653:5">{<block_content pos:start="651:9" pos:end="651:15">

        <comment type="block" pos:start="649:9" pos:end="649:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="651:9" pos:end="651:15"><expr pos:start="651:9" pos:end="651:14"><name pos:start="651:9" pos:end="651:10">ro</name> <operator pos:start="651:12" pos:end="651:12">=</operator> <literal type="number" pos:start="651:14" pos:end="651:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="653:7" pos:end="665:5">else if <condition pos:start="653:15" pos:end="653:23">(<expr pos:start="653:16" pos:end="653:22"><name pos:start="653:16" pos:end="653:17">ro</name> <operator pos:start="653:19" pos:end="653:20">==</operator> <literal type="number" pos:start="653:22" pos:end="653:22">1</literal></expr>)</condition> <block pos:start="653:25" pos:end="665:5">{<block_content pos:start="655:9" pos:end="663:9">

        <if_stmt pos:start="655:9" pos:end="663:9"><if pos:start="655:9" pos:end="663:9">if <condition pos:start="655:12" pos:end="657:49">(<expr pos:start="655:13" pos:end="657:48"><name pos:start="655:13" pos:end="655:16">type</name> <operator pos:start="655:18" pos:end="655:19">!=</operator> <name pos:start="655:21" pos:end="655:27">IF_SCSI</name> <operator pos:start="655:29" pos:end="655:30">&amp;&amp;</operator> <name pos:start="655:32" pos:end="655:35">type</name> <operator pos:start="655:37" pos:end="655:38">!=</operator> <name pos:start="655:40" pos:end="655:48">IF_VIRTIO</name> <operator pos:start="655:50" pos:end="655:51">&amp;&amp;</operator> <name pos:start="655:53" pos:end="655:56">type</name> <operator pos:start="655:58" pos:end="655:59">!=</operator> <name pos:start="655:61" pos:end="655:69">IF_FLOPPY</name> <operator pos:start="655:71" pos:end="655:72">&amp;&amp;</operator>

            <name pos:start="657:13" pos:end="657:16">type</name> <operator pos:start="657:18" pos:end="657:19">!=</operator> <name pos:start="657:21" pos:end="657:27">IF_NONE</name> <operator pos:start="657:29" pos:end="657:30">&amp;&amp;</operator> <name pos:start="657:32" pos:end="657:35">type</name> <operator pos:start="657:37" pos:end="657:38">!=</operator> <name pos:start="657:40" pos:end="657:48">IF_PFLASH</name></expr>)</condition> <block pos:start="657:51" pos:end="663:9">{<block_content pos:start="659:13" pos:end="661:21">

            <expr_stmt pos:start="659:13" pos:end="659:68"><expr pos:start="659:13" pos:end="659:67"><call pos:start="659:13" pos:end="659:67"><name pos:start="659:13" pos:end="659:24">error_report</name><argument_list pos:start="659:25" pos:end="659:67">(<argument pos:start="659:26" pos:end="659:66"><expr pos:start="659:26" pos:end="659:66"><literal type="string" pos:start="659:26" pos:end="659:66">"readonly not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="661:13" pos:end="661:21">goto <name pos:start="661:18" pos:end="661:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="669:5" pos:end="669:39"><expr pos:start="669:5" pos:end="669:38"><name pos:start="669:5" pos:end="669:14">bdrv_flags</name> <operator pos:start="669:16" pos:end="669:17">|=</operator> <ternary pos:start="669:19" pos:end="669:38"><condition pos:start="669:19" pos:end="669:22"><expr pos:start="669:19" pos:end="669:20"><name pos:start="669:19" pos:end="669:20">ro</name></expr> ?</condition><then pos:start="669:24" pos:end="669:24"> <expr pos:start="669:24" pos:end="669:24"><literal type="number" pos:start="669:24" pos:end="669:24">0</literal></expr> </then><else pos:start="669:26" pos:end="669:38">: <expr pos:start="669:28" pos:end="669:38"><name pos:start="669:28" pos:end="669:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="673:5" pos:end="677:5"><if pos:start="673:5" pos:end="677:5">if <condition pos:start="673:8" pos:end="673:27">(<expr pos:start="673:9" pos:end="673:26"><name pos:start="673:9" pos:end="673:10">ro</name> <operator pos:start="673:12" pos:end="673:13">&amp;&amp;</operator> <name pos:start="673:15" pos:end="673:26">copy_on_read</name></expr>)</condition> <block pos:start="673:29" pos:end="677:5">{<block_content pos:start="675:9" pos:end="675:74">

        <expr_stmt pos:start="675:9" pos:end="675:74"><expr pos:start="675:9" pos:end="675:73"><call pos:start="675:9" pos:end="675:73"><name pos:start="675:9" pos:end="675:20">error_report</name><argument_list pos:start="675:21" pos:end="675:73">(<argument pos:start="675:22" pos:end="675:72"><expr pos:start="675:22" pos:end="675:72"><literal type="string" pos:start="675:22" pos:end="675:72">"warning: disabling copy_on_read on readonly drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="681:5" pos:end="681:56"><expr pos:start="681:5" pos:end="681:55"><name pos:start="681:5" pos:end="681:7">ret</name> <operator pos:start="681:9" pos:end="681:9">=</operator> <call pos:start="681:11" pos:end="681:55"><name pos:start="681:11" pos:end="681:19">bdrv_open</name><argument_list pos:start="681:20" pos:end="681:55">(<argument pos:start="681:21" pos:end="681:31"><expr pos:start="681:21" pos:end="681:31"><name pos:start="681:21" pos:end="681:31"><name pos:start="681:21" pos:end="681:25">dinfo</name><operator pos:start="681:26" pos:end="681:27">-&gt;</operator><name pos:start="681:28" pos:end="681:31">bdrv</name></name></expr></argument>, <argument pos:start="681:34" pos:end="681:37"><expr pos:start="681:34" pos:end="681:37"><name pos:start="681:34" pos:end="681:37">file</name></expr></argument>, <argument pos:start="681:40" pos:end="681:49"><expr pos:start="681:40" pos:end="681:49"><name pos:start="681:40" pos:end="681:49">bdrv_flags</name></expr></argument>, <argument pos:start="681:52" pos:end="681:54"><expr pos:start="681:52" pos:end="681:54"><name pos:start="681:52" pos:end="681:54">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="683:5" pos:end="701:5"><if pos:start="683:5" pos:end="701:5">if <condition pos:start="683:8" pos:end="683:16">(<expr pos:start="683:9" pos:end="683:15"><name pos:start="683:9" pos:end="683:11">ret</name> <operator pos:start="683:13" pos:end="683:13">&lt;</operator> <literal type="number" pos:start="683:15" pos:end="683:15">0</literal></expr>)</condition> <block pos:start="683:18" pos:end="701:5">{<block_content pos:start="685:9" pos:end="699:17">

        <if_stmt pos:start="685:9" pos:end="697:9"><if pos:start="685:9" pos:end="691:9">if <condition pos:start="685:12" pos:end="685:32">(<expr pos:start="685:13" pos:end="685:31"><name pos:start="685:13" pos:end="685:15">ret</name> <operator pos:start="685:17" pos:end="685:18">==</operator> <operator pos:start="685:20" pos:end="685:20">-</operator><name pos:start="685:21" pos:end="685:31">EMEDIUMTYPE</name></expr>)</condition> <block pos:start="685:34" pos:end="691:9">{<block_content pos:start="687:13" pos:end="689:49">

            <expr_stmt pos:start="687:13" pos:end="689:49"><expr pos:start="687:13" pos:end="689:48"><call pos:start="687:13" pos:end="689:48"><name pos:start="687:13" pos:end="687:24">error_report</name><argument_list pos:start="687:25" pos:end="689:48">(<argument pos:start="687:26" pos:end="687:73"><expr pos:start="687:26" pos:end="687:73"><literal type="string" pos:start="687:26" pos:end="687:73">"could not open disk image %s: not in %s format"</literal></expr></argument>,

                         <argument pos:start="689:26" pos:end="689:29"><expr pos:start="689:26" pos:end="689:29"><name pos:start="689:26" pos:end="689:29">file</name></expr></argument>, <argument pos:start="689:32" pos:end="689:47"><expr pos:start="689:32" pos:end="689:47"><name pos:start="689:32" pos:end="689:47"><name pos:start="689:32" pos:end="689:34">drv</name><operator pos:start="689:35" pos:end="689:36">-&gt;</operator><name pos:start="689:37" pos:end="689:47">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="691:11" pos:end="697:9">else <block pos:start="691:16" pos:end="697:9">{<block_content pos:start="693:13" pos:end="695:47">

            <expr_stmt pos:start="693:13" pos:end="695:47"><expr pos:start="693:13" pos:end="695:46"><call pos:start="693:13" pos:end="695:46"><name pos:start="693:13" pos:end="693:24">error_report</name><argument_list pos:start="693:25" pos:end="695:46">(<argument pos:start="693:26" pos:end="693:59"><expr pos:start="693:26" pos:end="693:59"><literal type="string" pos:start="693:26" pos:end="693:59">"could not open disk image %s: %s"</literal></expr></argument>,

                         <argument pos:start="695:26" pos:end="695:29"><expr pos:start="695:26" pos:end="695:29"><name pos:start="695:26" pos:end="695:29">file</name></expr></argument>, <argument pos:start="695:32" pos:end="695:45"><expr pos:start="695:32" pos:end="695:45"><call pos:start="695:32" pos:end="695:45"><name pos:start="695:32" pos:end="695:39">strerror</name><argument_list pos:start="695:40" pos:end="695:45">(<argument pos:start="695:41" pos:end="695:44"><expr pos:start="695:41" pos:end="695:44"><operator pos:start="695:41" pos:end="695:41">-</operator><name pos:start="695:42" pos:end="695:44">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <goto pos:start="699:9" pos:end="699:17">goto <name pos:start="699:14" pos:end="699:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="705:5" pos:end="707:22"><if pos:start="705:5" pos:end="707:22">if <condition pos:start="705:8" pos:end="705:39">(<expr pos:start="705:9" pos:end="705:38"><call pos:start="705:9" pos:end="705:38"><name pos:start="705:9" pos:end="705:25">bdrv_key_required</name><argument_list pos:start="705:26" pos:end="705:38">(<argument pos:start="705:27" pos:end="705:37"><expr pos:start="705:27" pos:end="705:37"><name pos:start="705:27" pos:end="705:37"><name pos:start="705:27" pos:end="705:31">dinfo</name><operator pos:start="705:32" pos:end="705:33">-&gt;</operator><name pos:start="705:34" pos:end="705:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="707:9" pos:end="707:22"><block_content pos:start="707:9" pos:end="707:22">

        <expr_stmt pos:start="707:9" pos:end="707:22"><expr pos:start="707:9" pos:end="707:21"><name pos:start="707:9" pos:end="707:17">autostart</name> <operator pos:start="707:19" pos:end="707:19">=</operator> <literal type="number" pos:start="707:21" pos:end="707:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="709:5" pos:end="709:17">return <expr pos:start="709:12" pos:end="709:16"><name pos:start="709:12" pos:end="709:16">dinfo</name></expr>;</return>



<label pos:start="713:1" pos:end="713:4"><name pos:start="713:1" pos:end="713:3">err</name>:</label>

    <expr_stmt pos:start="715:5" pos:end="715:29"><expr pos:start="715:5" pos:end="715:28"><call pos:start="715:5" pos:end="715:28"><name pos:start="715:5" pos:end="715:15">bdrv_delete</name><argument_list pos:start="715:16" pos:end="715:28">(<argument pos:start="715:17" pos:end="715:27"><expr pos:start="715:17" pos:end="715:27"><name pos:start="715:17" pos:end="715:27"><name pos:start="715:17" pos:end="715:21">dinfo</name><operator pos:start="715:22" pos:end="715:23">-&gt;</operator><name pos:start="715:24" pos:end="715:27">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="717:5" pos:end="717:22"><expr pos:start="717:5" pos:end="717:21"><call pos:start="717:5" pos:end="717:21"><name pos:start="717:5" pos:end="717:10">g_free</name><argument_list pos:start="717:11" pos:end="717:21">(<argument pos:start="717:12" pos:end="717:20"><expr pos:start="717:12" pos:end="717:20"><name pos:start="717:12" pos:end="717:20"><name pos:start="717:12" pos:end="717:16">dinfo</name><operator pos:start="717:17" pos:end="717:18">-&gt;</operator><name pos:start="717:19" pos:end="717:20">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="719:5" pos:end="719:40"><expr pos:start="719:5" pos:end="719:39"><call pos:start="719:5" pos:end="719:39"><name pos:start="719:5" pos:end="719:17">QTAILQ_REMOVE</name><argument_list pos:start="719:18" pos:end="719:39">(<argument pos:start="719:19" pos:end="719:25"><expr pos:start="719:19" pos:end="719:25"><operator pos:start="719:19" pos:end="719:19">&amp;</operator><name pos:start="719:20" pos:end="719:25">drives</name></expr></argument>, <argument pos:start="719:28" pos:end="719:32"><expr pos:start="719:28" pos:end="719:32"><name pos:start="719:28" pos:end="719:32">dinfo</name></expr></argument>, <argument pos:start="719:35" pos:end="719:38"><expr pos:start="719:35" pos:end="719:38"><name pos:start="719:35" pos:end="719:38">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="721:5" pos:end="721:18"><expr pos:start="721:5" pos:end="721:17"><call pos:start="721:5" pos:end="721:17"><name pos:start="721:5" pos:end="721:10">g_free</name><argument_list pos:start="721:11" pos:end="721:17">(<argument pos:start="721:12" pos:end="721:16"><expr pos:start="721:12" pos:end="721:16"><name pos:start="721:12" pos:end="721:16">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="723:5" pos:end="723:16">return <expr pos:start="723:12" pos:end="723:15"><name pos:start="723:12" pos:end="723:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
