<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23221.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">usb_hub_handle_data</name><parameter_list pos:start="1:31" pos:end="1:60">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:40">USBDevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">dev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:56">USBPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:15">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">USBHubState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:39">= <expr pos:start="5:22" pos:end="5:39"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:33">USBHubState</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator><name pos:start="5:37" pos:end="5:39">dev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="85:5">switch<condition pos:start="11:11" pos:end="11:18">(<expr pos:start="11:12" pos:end="11:17"><name pos:start="11:12" pos:end="11:17"><name pos:start="11:12" pos:end="11:12">p</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:17">pid</name></name></expr>)</condition> <block pos:start="11:20" pos:end="85:5">{<block_content pos:start="13:5" pos:end="83:14">

    <case pos:start="13:5" pos:end="13:22">case <expr pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:21">USB_TOKEN_IN</name></expr>:</case>

        <if_stmt pos:start="15:9" pos:end="71:9"><if pos:start="15:9" pos:end="67:9">if <condition pos:start="15:12" pos:end="15:26">(<expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:20"><name pos:start="15:13" pos:end="15:13">p</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:20">devep</name></name> <operator pos:start="15:22" pos:end="15:23">==</operator> <literal type="number" pos:start="15:25" pos:end="15:25">1</literal></expr>)</condition> <block pos:start="15:28" pos:end="67:9">{<block_content pos:start="17:13" pos:end="65:13">

            <decl_stmt pos:start="17:13" pos:end="17:29"><decl pos:start="17:13" pos:end="17:28"><type pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:22">USBHubPort</name> <modifier pos:start="17:24" pos:end="17:24">*</modifier></type><name pos:start="17:25" pos:end="17:28">port</name></decl>;</decl_stmt>

            <decl_stmt pos:start="19:13" pos:end="19:32"><decl pos:start="19:13" pos:end="19:31"><type pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:20">unsigned</name> <name pos:start="19:22" pos:end="19:24">int</name></type> <name pos:start="19:26" pos:end="19:31">status</name></decl>;</decl_stmt>

            <decl_stmt pos:start="21:13" pos:end="21:27"><decl pos:start="21:13" pos:end="21:26"><type pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:19">uint8_t</name></type> <name pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:23">buf</name><index pos:start="21:24" pos:end="21:26">[<expr pos:start="21:25" pos:end="21:25"><literal type="number" pos:start="21:25" pos:end="21:25">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="23:13" pos:end="23:21"><decl pos:start="23:13" pos:end="23:17"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:17">i</name></decl>, <decl pos:start="23:20" pos:end="23:20"><type ref="prev" pos:start="23:13" pos:end="23:15"/><name pos:start="23:20" pos:end="23:20">n</name></decl>;</decl_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:13">n</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <operator pos:start="25:17" pos:end="25:17">(</operator><name pos:start="25:18" pos:end="25:26">NUM_PORTS</name> <operator pos:start="25:28" pos:end="25:28">+</operator> <literal type="number" pos:start="25:30" pos:end="25:32">1</literal> <operator pos:start="25:32" pos:end="25:32">+</operator> <literal type="number" pos:start="25:34" pos:end="25:34">7</literal><operator pos:start="25:35" pos:end="25:35">)</operator> <operator pos:start="25:37" pos:end="25:37">/</operator> <literal type="number" pos:start="25:39" pos:end="25:39">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="35:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:33">(<expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:27"><name pos:start="27:17" pos:end="27:17">p</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:22">iov</name><operator pos:start="27:23" pos:end="27:23">.</operator><name pos:start="27:24" pos:end="27:27">size</name></name> <operator pos:start="27:29" pos:end="27:30">==</operator> <literal type="number" pos:start="27:32" pos:end="27:32">1</literal></expr>)</condition> <block pos:start="27:35" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:22"> <comment type="block" pos:start="27:37" pos:end="27:60">/* FreeBSD workaround */</comment>

                <expr_stmt pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:21"><name pos:start="29:17" pos:end="29:17">n</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="31:15" pos:end="35:13">else if <condition pos:start="31:23" pos:end="31:39">(<expr pos:start="31:24" pos:end="31:38"><name pos:start="31:24" pos:end="31:24">n</name> <operator pos:start="31:26" pos:end="31:26">&gt;</operator> <name pos:start="31:28" pos:end="31:38"><name pos:start="31:28" pos:end="31:28">p</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:33">iov</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:38">size</name></name></expr>)</condition> <block pos:start="31:41" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:38">

                <return pos:start="33:17" pos:end="33:38">return <expr pos:start="33:24" pos:end="33:37"><name pos:start="33:24" pos:end="33:37">USB_RET_BABBLE</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:23"><expr pos:start="37:13" pos:end="37:22"><name pos:start="37:13" pos:end="37:18">status</name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</expr_stmt>

            <for pos:start="39:13" pos:end="47:13">for<control pos:start="39:16" pos:end="39:42">(<init pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:21"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>;</init> <condition pos:start="39:24" pos:end="39:37"><expr pos:start="39:24" pos:end="39:36"><name pos:start="39:24" pos:end="39:24">i</name> <operator pos:start="39:26" pos:end="39:26">&lt;</operator> <name pos:start="39:28" pos:end="39:36">NUM_PORTS</name></expr>;</condition> <incr pos:start="39:39" pos:end="39:41"><expr pos:start="39:39" pos:end="39:41"><name pos:start="39:39" pos:end="39:39">i</name><operator pos:start="39:40" pos:end="39:41">++</operator></expr></incr>)</control> <block pos:start="39:44" pos:end="47:13">{<block_content pos:start="41:17" pos:end="45:45">

                <expr_stmt pos:start="41:17" pos:end="41:36"><expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:20">port</name> <operator pos:start="41:22" pos:end="41:22">=</operator> <operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:35"><name pos:start="41:25" pos:end="41:25">s</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:32">ports</name><index pos:start="41:33" pos:end="41:35">[<expr pos:start="41:34" pos:end="41:34"><name pos:start="41:34" pos:end="41:34">i</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="43:17" pos:end="45:45"><if pos:start="43:17" pos:end="45:45">if <condition pos:start="43:20" pos:end="43:38">(<expr pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:37"><name pos:start="43:21" pos:end="43:24">port</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:37">wPortChange</name></name></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:45"><block_content pos:start="45:21" pos:end="45:45">

                    <expr_stmt pos:start="45:21" pos:end="45:45"><expr pos:start="45:21" pos:end="45:44"><name pos:start="45:21" pos:end="45:26">status</name> <operator pos:start="45:28" pos:end="45:29">|=</operator> <operator pos:start="45:31" pos:end="45:31">(</operator><literal type="number" pos:start="45:32" pos:end="45:32">1</literal> <operator pos:start="45:34" pos:end="45:35">&lt;&lt;</operator> <operator pos:start="45:37" pos:end="45:37">(</operator><name pos:start="45:38" pos:end="45:38">i</name> <operator pos:start="45:40" pos:end="45:40">+</operator> <literal type="number" pos:start="45:42" pos:end="45:42">1</literal><operator pos:start="45:43" pos:end="45:43">)</operator><operator pos:start="45:44" pos:end="45:44">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="49:13" pos:end="65:13"><if pos:start="49:13" pos:end="61:13">if <condition pos:start="49:16" pos:end="49:28">(<expr pos:start="49:17" pos:end="49:27"><name pos:start="49:17" pos:end="49:22">status</name> <operator pos:start="49:24" pos:end="49:25">!=</operator> <literal type="number" pos:start="49:27" pos:end="49:27">0</literal></expr>)</condition> <block pos:start="49:30" pos:end="61:13">{<block_content pos:start="51:17" pos:end="59:24">

                <for pos:start="51:17" pos:end="55:17">for<control pos:start="51:20" pos:end="51:38">(<init pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:25"><name pos:start="51:21" pos:end="51:21">i</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr>;</init> <condition pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:32"><name pos:start="51:28" pos:end="51:28">i</name> <operator pos:start="51:30" pos:end="51:30">&lt;</operator> <name pos:start="51:32" pos:end="51:32">n</name></expr>;</condition> <incr pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:35">i</name><operator pos:start="51:36" pos:end="51:37">++</operator></expr></incr>)</control> <block pos:start="51:40" pos:end="55:17">{<block_content pos:start="53:21" pos:end="53:47">

                    <expr_stmt pos:start="53:21" pos:end="53:47"><expr pos:start="53:21" pos:end="53:46"><name pos:start="53:21" pos:end="53:26"><name pos:start="53:21" pos:end="53:23">buf</name><index pos:start="53:24" pos:end="53:26">[<expr pos:start="53:25" pos:end="53:25"><name pos:start="53:25" pos:end="53:25">i</name></expr>]</index></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:35">status</name> <operator pos:start="53:37" pos:end="53:38">&gt;&gt;</operator> <operator pos:start="53:40" pos:end="53:40">(</operator><literal type="number" pos:start="53:41" pos:end="53:41">8</literal> <operator pos:start="53:43" pos:end="53:43">*</operator> <name pos:start="53:45" pos:end="53:45">i</name><operator pos:start="53:46" pos:end="53:46">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="57:17" pos:end="57:43"><expr pos:start="57:17" pos:end="57:42"><call pos:start="57:17" pos:end="57:42"><name pos:start="57:17" pos:end="57:31">usb_packet_copy</name><argument_list pos:start="57:32" pos:end="57:42">(<argument pos:start="57:33" pos:end="57:33"><expr pos:start="57:33" pos:end="57:33"><name pos:start="57:33" pos:end="57:33">p</name></expr></argument>, <argument pos:start="57:36" pos:end="57:38"><expr pos:start="57:36" pos:end="57:38"><name pos:start="57:36" pos:end="57:38">buf</name></expr></argument>, <argument pos:start="57:41" pos:end="57:41"><expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:24"><expr pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:19">ret</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:23">n</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="65:13">else <block pos:start="61:20" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:34">

                <expr_stmt pos:start="63:17" pos:end="63:34"><expr pos:start="63:17" pos:end="63:33"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:33">USB_RET_NAK</name></expr>;</expr_stmt> <comment type="block" pos:start="63:36" pos:end="63:54">/* usb11 11.13.1 */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:22">

            <goto pos:start="69:13" pos:end="69:22">goto <name pos:start="69:18" pos:end="69:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:23">case <expr pos:start="75:10" pos:end="75:22"><name pos:start="75:10" pos:end="75:22">USB_TOKEN_OUT</name></expr>:</case>

    <default pos:start="77:5" pos:end="77:12">default:</default>

    <label pos:start="79:5" pos:end="79:9"><name pos:start="79:5" pos:end="79:8">fail</name>:</label>

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:27">USB_RET_STALL</name></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="87:5" pos:end="87:15">return <expr pos:start="87:12" pos:end="87:14"><name pos:start="87:12" pos:end="87:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
