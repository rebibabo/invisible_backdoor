<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17282.c" pos:tabs="8"><function pos:start="1:1" pos:end="337:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_create2</name><parameter_list pos:start="1:25" pos:end="9:38">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:45">filename</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">total_size</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:49"><decl pos:start="3:26" pos:end="3:49"><type pos:start="3:26" pos:end="3:49"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:35">char</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:49">backing_file</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:77"><decl pos:start="3:52" pos:end="3:77"><type pos:start="3:52" pos:end="3:77"><specifier pos:start="3:52" pos:end="3:56">const</specifier> <name pos:start="3:58" pos:end="3:61">char</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:77">backing_format</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:34"><decl pos:start="5:26" pos:end="5:34"><type pos:start="5:26" pos:end="5:34"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:34">flags</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><name pos:start="5:37" pos:end="5:42">size_t</name></type> <name pos:start="5:44" pos:end="5:55">cluster_size</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:69"><decl pos:start="5:58" pos:end="5:69"><type pos:start="5:58" pos:end="5:69"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:69">prealloc</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:53"><decl pos:start="7:26" pos:end="7:53"><type pos:start="7:26" pos:end="7:53"><name pos:start="7:26" pos:end="7:44">QEMUOptionParameter</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:53">options</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:66"><decl pos:start="7:56" pos:end="7:66"><type pos:start="7:56" pos:end="7:66"><name pos:start="7:56" pos:end="7:58">int</name></type> <name pos:start="7:60" pos:end="7:66">version</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:37"><decl pos:start="9:26" pos:end="9:37"><type pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:30">Error</name> <modifier pos:start="9:32" pos:end="9:32">*</modifier><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:37">errp</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="337:1">{<block_content pos:start="15:5" pos:end="335:15">

    <comment type="block" pos:start="13:5" pos:end="13:32">/* Calculate cluster_bits */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">cluster_bits</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:16">cluster_bits</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:36"><name pos:start="17:20" pos:end="17:22">ffs</name><argument_list pos:start="17:23" pos:end="17:36">(<argument pos:start="17:24" pos:end="17:35"><expr pos:start="17:24" pos:end="17:35"><name pos:start="17:24" pos:end="17:35">cluster_size</name></expr></argument>)</argument_list></call> <operator pos:start="17:38" pos:end="17:38">-</operator> <literal type="number" pos:start="17:40" pos:end="17:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="21:44">(<expr pos:start="19:9" pos:end="21:43"><name pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:20">cluster_bits</name> <argument_list type="generic" pos:start="19:22" pos:end="19:57">&lt; <argument pos:start="19:24" pos:end="19:55"><expr pos:start="19:24" pos:end="19:55"><name pos:start="19:24" pos:end="19:39">MIN_CLUSTER_BITS</name> <operator pos:start="19:41" pos:end="19:42">||</operator> <name pos:start="19:44" pos:end="19:55">cluster_bits</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:59" pos:end="19:74">MAX_CLUSTER_BITS</name> <operator pos:start="19:76" pos:end="19:77">||</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><literal type="number" pos:start="21:10" pos:end="21:10">1</literal> <operator pos:start="21:12" pos:end="21:13">&lt;&lt;</operator> <name pos:start="21:15" pos:end="21:26">cluster_bits</name><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:30">!=</operator> <name pos:start="21:32" pos:end="21:43">cluster_size</name></expr>)</condition>

    <block pos:start="23:5" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:23">

        <expr_stmt pos:start="25:9" pos:end="27:79"><expr pos:start="25:9" pos:end="27:78"><call pos:start="25:9" pos:end="27:78"><name pos:start="25:9" pos:end="25:18">error_setg</name><argument_list pos:start="25:19" pos:end="27:78">(<argument pos:start="25:20" pos:end="25:23"><expr pos:start="25:20" pos:end="25:23"><name pos:start="25:20" pos:end="25:23">errp</name></expr></argument>, <argument pos:start="25:26" pos:end="27:24"><expr pos:start="25:26" pos:end="27:24"><literal type="string" pos:start="25:26" pos:end="25:78">"Cluster size must be a power of two between %d and "</literal>

                   <literal type="string" pos:start="27:20" pos:end="27:24">"%dk"</literal></expr></argument>, <argument pos:start="27:27" pos:end="27:47"><expr pos:start="27:27" pos:end="27:47"><literal type="number" pos:start="27:27" pos:end="27:27">1</literal> <operator pos:start="27:29" pos:end="27:30">&lt;&lt;</operator> <name pos:start="27:32" pos:end="27:47">MIN_CLUSTER_BITS</name></expr></argument>, <argument pos:start="27:50" pos:end="27:77"><expr pos:start="27:50" pos:end="27:77"><literal type="number" pos:start="27:50" pos:end="27:50">1</literal> <operator pos:start="27:52" pos:end="27:53">&lt;&lt;</operator> <operator pos:start="27:55" pos:end="27:55">(</operator><name pos:start="27:56" pos:end="27:71">MAX_CLUSTER_BITS</name> <operator pos:start="27:73" pos:end="27:73">-</operator> <literal type="number" pos:start="27:75" pos:end="27:76">10</literal><operator pos:start="27:77" pos:end="27:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="57:7">/*

     * Open the image file and write a minimal qcow2 header.

     *

     * We keep things simple and start with a zero-sized image. We also

     * do without refcount blocks or a L1 table for now. We'll fix the

     * inconsistency later.

     *

     * We do need a refcount table because growing the refcount table means

     * allocating two new refcount blocks - the seconds of which would be at

     * 2 GB for 64k clusters, and we don't want to have a 2 GB initial file

     * size for any qcow2 image.

     */</comment>

    <decl_stmt pos:start="59:5" pos:end="59:25"><decl pos:start="59:5" pos:end="59:24"><type pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:20">BlockDriverState</name><modifier pos:start="59:21" pos:end="59:21">*</modifier></type> <name pos:start="59:23" pos:end="59:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:23"><decl pos:start="61:5" pos:end="61:22"><type pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:14">QCowHeader</name> <modifier pos:start="61:16" pos:end="61:16">*</modifier></type><name pos:start="61:17" pos:end="61:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="63:5" pos:end="63:28"><decl pos:start="63:5" pos:end="63:27"><type pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:11">uint8_t</name><modifier pos:start="63:12" pos:end="63:12">*</modifier></type> <name pos:start="63:14" pos:end="63:27">refcount_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="65:5" pos:end="65:28"><decl pos:start="65:5" pos:end="65:27"><type pos:start="65:5" pos:end="65:11"><name pos:start="65:5" pos:end="65:9">Error</name> <modifier pos:start="65:11" pos:end="65:11">*</modifier></type><name pos:start="65:12" pos:end="65:20">local_err</name> <init pos:start="65:22" pos:end="65:27">= <expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="67:5" pos:end="67:12"><decl pos:start="67:5" pos:end="67:11"><type pos:start="67:5" pos:end="67:7"><name pos:start="67:5" pos:end="67:7">int</name></type> <name pos:start="67:9" pos:end="67:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:58"><expr pos:start="71:5" pos:end="71:57"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:57"><name pos:start="71:11" pos:end="71:26">bdrv_create_file</name><argument_list pos:start="71:27" pos:end="71:57">(<argument pos:start="71:28" pos:end="71:35"><expr pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:35">filename</name></expr></argument>, <argument pos:start="71:38" pos:end="71:44"><expr pos:start="71:38" pos:end="71:44"><name pos:start="71:38" pos:end="71:44">options</name></expr></argument>, <argument pos:start="71:47" pos:end="71:56"><expr pos:start="71:47" pos:end="71:56"><operator pos:start="71:47" pos:end="71:47">&amp;</operator><name pos:start="71:48" pos:end="71:56">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:16">(<expr pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>)</condition> <block pos:start="73:18" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:19">

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><call pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:23">error_propagate</name><argument_list pos:start="75:24" pos:end="75:40">(<argument pos:start="75:25" pos:end="75:28"><expr pos:start="75:25" pos:end="75:28"><name pos:start="75:25" pos:end="75:28">errp</name></expr></argument>, <argument pos:start="75:31" pos:end="75:39"><expr pos:start="75:31" pos:end="75:39"><name pos:start="75:31" pos:end="75:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:19">return <expr pos:start="77:16" pos:end="77:18"><name pos:start="77:16" pos:end="77:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:14"><expr pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:6">bs</name> <operator pos:start="83:8" pos:end="83:8">=</operator> <name pos:start="83:10" pos:end="83:13">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:38"><expr pos:start="85:5" pos:end="87:37"><name pos:start="85:5" pos:end="85:7">ret</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="87:37"><name pos:start="85:11" pos:end="85:19">bdrv_open</name><argument_list pos:start="85:20" pos:end="87:37">(<argument pos:start="85:21" pos:end="85:23"><expr pos:start="85:21" pos:end="85:23"><operator pos:start="85:21" pos:end="85:21">&amp;</operator><name pos:start="85:22" pos:end="85:23">bs</name></expr></argument>, <argument pos:start="85:26" pos:end="85:33"><expr pos:start="85:26" pos:end="85:33"><name pos:start="85:26" pos:end="85:33">filename</name></expr></argument>, <argument pos:start="85:36" pos:end="85:39"><expr pos:start="85:36" pos:end="85:39"><name pos:start="85:36" pos:end="85:39">NULL</name></expr></argument>, <argument pos:start="85:42" pos:end="85:45"><expr pos:start="85:42" pos:end="85:45"><name pos:start="85:42" pos:end="85:45">NULL</name></expr></argument>, <argument pos:start="85:48" pos:end="85:76"><expr pos:start="85:48" pos:end="85:76"><name pos:start="85:48" pos:end="85:58">BDRV_O_RDWR</name> <operator pos:start="85:60" pos:end="85:60">|</operator> <name pos:start="85:62" pos:end="85:76">BDRV_O_PROTOCOL</name></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:24"><expr pos:start="87:21" pos:end="87:24"><name pos:start="87:21" pos:end="87:24">NULL</name></expr></argument>, <argument pos:start="87:27" pos:end="87:36"><expr pos:start="87:27" pos:end="87:36"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:36">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:19">

        <expr_stmt pos:start="91:9" pos:end="91:41"><expr pos:start="91:9" pos:end="91:40"><call pos:start="91:9" pos:end="91:40"><name pos:start="91:9" pos:end="91:23">error_propagate</name><argument_list pos:start="91:24" pos:end="91:40">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">errp</name></expr></argument>, <argument pos:start="91:31" pos:end="91:39"><expr pos:start="91:31" pos:end="91:39"><name pos:start="91:31" pos:end="91:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:19">return <expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:26">/* Write the header */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:65"><expr pos:start="101:5" pos:end="101:64"><call pos:start="101:5" pos:end="101:64"><name pos:start="101:5" pos:end="101:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="101:22" pos:end="101:64">(<argument pos:start="101:23" pos:end="101:63"><expr pos:start="101:23" pos:end="101:63"><operator pos:start="101:23" pos:end="101:23">(</operator><literal type="number" pos:start="101:24" pos:end="101:24">1</literal> <operator pos:start="101:26" pos:end="101:27">&lt;&lt;</operator> <name pos:start="101:29" pos:end="101:44">MIN_CLUSTER_BITS</name><operator pos:start="101:45" pos:end="101:45">)</operator> <operator pos:start="101:47" pos:end="101:47">&lt;</operator> <sizeof pos:start="101:49" pos:end="101:63">sizeof<argument_list pos:start="101:55" pos:end="101:63">(<argument pos:start="101:56" pos:end="101:62"><expr pos:start="101:56" pos:end="101:62"><operator pos:start="101:56" pos:end="101:56">*</operator><name pos:start="101:57" pos:end="101:62">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:37"><expr pos:start="103:5" pos:end="103:36"><name pos:start="103:5" pos:end="103:10">header</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <call pos:start="103:14" pos:end="103:36"><name pos:start="103:14" pos:end="103:22">g_malloc0</name><argument_list pos:start="103:23" pos:end="103:36">(<argument pos:start="103:24" pos:end="103:35"><expr pos:start="103:24" pos:end="103:35"><name pos:start="103:24" pos:end="103:35">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="127:6"><expr pos:start="105:5" pos:end="127:5"><operator pos:start="105:5" pos:end="105:5">*</operator><name pos:start="105:6" pos:end="105:11">header</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">(</operator><name pos:start="105:16" pos:end="105:25">QCowHeader</name><operator pos:start="105:26" pos:end="105:26">)</operator> <block pos:start="105:28" pos:end="127:5">{

        <expr pos:start="107:9" pos:end="107:61"><operator pos:start="107:9" pos:end="107:9">.</operator><name pos:start="107:10" pos:end="107:14">magic</name>                      <operator pos:start="107:37" pos:end="107:37">=</operator> <call pos:start="107:39" pos:end="107:61"><name pos:start="107:39" pos:end="107:49">cpu_to_be32</name><argument_list pos:start="107:50" pos:end="107:61">(<argument pos:start="107:51" pos:end="107:60"><expr pos:start="107:51" pos:end="107:60"><name pos:start="107:51" pos:end="107:60">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="109:9" pos:end="109:58"><operator pos:start="109:9" pos:end="109:9">.</operator><name pos:start="109:10" pos:end="109:16">version</name>                    <operator pos:start="109:37" pos:end="109:37">=</operator> <call pos:start="109:39" pos:end="109:58"><name pos:start="109:39" pos:end="109:49">cpu_to_be32</name><argument_list pos:start="109:50" pos:end="109:58">(<argument pos:start="109:51" pos:end="109:57"><expr pos:start="109:51" pos:end="109:57"><name pos:start="109:51" pos:end="109:57">version</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="111:9" pos:end="111:63"><operator pos:start="111:9" pos:end="111:9">.</operator><name pos:start="111:10" pos:end="111:21">cluster_bits</name>               <operator pos:start="111:37" pos:end="111:37">=</operator> <call pos:start="111:39" pos:end="111:63"><name pos:start="111:39" pos:end="111:49">cpu_to_be32</name><argument_list pos:start="111:50" pos:end="111:63">(<argument pos:start="111:51" pos:end="111:62"><expr pos:start="111:51" pos:end="111:62"><name pos:start="111:51" pos:end="111:62">cluster_bits</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="113:9" pos:end="113:52"><operator pos:start="113:9" pos:end="113:9">.</operator><name pos:start="113:10" pos:end="113:13">size</name>                       <operator pos:start="113:37" pos:end="113:37">=</operator> <call pos:start="113:39" pos:end="113:52"><name pos:start="113:39" pos:end="113:49">cpu_to_be64</name><argument_list pos:start="113:50" pos:end="113:52">(<argument pos:start="113:51" pos:end="113:51"><expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="115:9" pos:end="115:52"><operator pos:start="115:9" pos:end="115:9">.</operator><name pos:start="115:10" pos:end="115:24">l1_table_offset</name>            <operator pos:start="115:37" pos:end="115:37">=</operator> <call pos:start="115:39" pos:end="115:52"><name pos:start="115:39" pos:end="115:49">cpu_to_be64</name><argument_list pos:start="115:50" pos:end="115:52">(<argument pos:start="115:51" pos:end="115:51"><expr pos:start="115:51" pos:end="115:51"><literal type="number" pos:start="115:51" pos:end="115:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="117:9" pos:end="117:52"><operator pos:start="117:9" pos:end="117:9">.</operator><name pos:start="117:10" pos:end="117:16">l1_size</name>                    <operator pos:start="117:37" pos:end="117:37">=</operator> <call pos:start="117:39" pos:end="117:52"><name pos:start="117:39" pos:end="117:49">cpu_to_be32</name><argument_list pos:start="117:50" pos:end="117:52">(<argument pos:start="117:51" pos:end="117:51"><expr pos:start="117:51" pos:end="117:51"><literal type="number" pos:start="117:51" pos:end="117:51">0</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="119:9" pos:end="119:63"><operator pos:start="119:9" pos:end="119:9">.</operator><name pos:start="119:10" pos:end="119:30">refcount_table_offset</name>      <operator pos:start="119:37" pos:end="119:37">=</operator> <call pos:start="119:39" pos:end="119:63"><name pos:start="119:39" pos:end="119:49">cpu_to_be64</name><argument_list pos:start="119:50" pos:end="119:63">(<argument pos:start="119:51" pos:end="119:62"><expr pos:start="119:51" pos:end="119:62"><name pos:start="119:51" pos:end="119:62">cluster_size</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="121:9" pos:end="121:52"><operator pos:start="121:9" pos:end="121:9">.</operator><name pos:start="121:10" pos:end="121:32">refcount_table_clusters</name>    <operator pos:start="121:37" pos:end="121:37">=</operator> <call pos:start="121:39" pos:end="121:52"><name pos:start="121:39" pos:end="121:49">cpu_to_be32</name><argument_list pos:start="121:50" pos:end="121:52">(<argument pos:start="121:51" pos:end="121:51"><expr pos:start="121:51" pos:end="121:51"><literal type="number" pos:start="121:51" pos:end="121:51">1</literal></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="123:9" pos:end="123:69"><operator pos:start="123:9" pos:end="123:9">.</operator><name pos:start="123:10" pos:end="123:23">refcount_order</name>             <operator pos:start="123:37" pos:end="123:37">=</operator> <call pos:start="123:39" pos:end="123:69"><name pos:start="123:39" pos:end="123:49">cpu_to_be32</name><argument_list pos:start="123:50" pos:end="123:69">(<argument pos:start="123:51" pos:end="123:68"><expr pos:start="123:51" pos:end="123:68"><literal type="number" pos:start="123:51" pos:end="123:53">3</literal> <operator pos:start="123:53" pos:end="123:53">+</operator> <name pos:start="123:55" pos:end="123:68">REFCOUNT_SHIFT</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="125:9" pos:end="125:66"><operator pos:start="125:9" pos:end="125:9">.</operator><name pos:start="125:10" pos:end="125:22">header_length</name>              <operator pos:start="125:37" pos:end="125:37">=</operator> <call pos:start="125:39" pos:end="125:66"><name pos:start="125:39" pos:end="125:49">cpu_to_be32</name><argument_list pos:start="125:50" pos:end="125:66">(<argument pos:start="125:51" pos:end="125:65"><expr pos:start="125:51" pos:end="125:65"><sizeof pos:start="125:51" pos:end="125:65">sizeof<argument_list pos:start="125:57" pos:end="125:65">(<argument pos:start="125:58" pos:end="125:64"><expr pos:start="125:58" pos:end="125:64"><operator pos:start="125:58" pos:end="125:58">*</operator><name pos:start="125:59" pos:end="125:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,

    }</block></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:35">(<expr pos:start="131:9" pos:end="131:34"><name pos:start="131:9" pos:end="131:13">flags</name> <operator pos:start="131:15" pos:end="131:15">&amp;</operator> <name pos:start="131:17" pos:end="131:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="131:37" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:59">

        <expr_stmt pos:start="133:9" pos:end="133:59"><expr pos:start="133:9" pos:end="133:58"><name pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:14">header</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:28">crypt_method</name></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <call pos:start="133:32" pos:end="133:58"><name pos:start="133:32" pos:end="133:42">cpu_to_be32</name><argument_list pos:start="133:43" pos:end="133:58">(<argument pos:start="133:44" pos:end="133:57"><expr pos:start="133:44" pos:end="133:57"><name pos:start="133:44" pos:end="133:57">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="135:7" pos:end="139:5">else <block pos:start="135:12" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:60">

        <expr_stmt pos:start="137:9" pos:end="137:60"><expr pos:start="137:9" pos:end="137:59"><name pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:14">header</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:28">crypt_method</name></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <call pos:start="137:32" pos:end="137:59"><name pos:start="137:32" pos:end="137:42">cpu_to_be32</name><argument_list pos:start="137:43" pos:end="137:59">(<argument pos:start="137:44" pos:end="137:58"><expr pos:start="137:44" pos:end="137:58"><name pos:start="137:44" pos:end="137:58">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:42">(<expr pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:13">flags</name> <operator pos:start="143:15" pos:end="143:15">&amp;</operator> <name pos:start="143:17" pos:end="143:41">BLOCK_FLAG_LAZY_REFCOUNTS</name></expr>)</condition> <block pos:start="143:44" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:53">

        <expr_stmt pos:start="145:9" pos:end="147:53"><expr pos:start="145:9" pos:end="147:52"><name pos:start="145:9" pos:end="145:35"><name pos:start="145:9" pos:end="145:14">header</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:35">compatible_features</name></name> <operator pos:start="145:37" pos:end="145:38">|=</operator>

            <call pos:start="147:13" pos:end="147:52"><name pos:start="147:13" pos:end="147:23">cpu_to_be64</name><argument_list pos:start="147:24" pos:end="147:52">(<argument pos:start="147:25" pos:end="147:51"><expr pos:start="147:25" pos:end="147:51"><name pos:start="147:25" pos:end="147:51">QCOW2_COMPAT_LAZY_REFCOUNTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:51"><expr pos:start="153:5" pos:end="153:50"><name pos:start="153:5" pos:end="153:7">ret</name> <operator pos:start="153:9" pos:end="153:9">=</operator> <call pos:start="153:11" pos:end="153:50"><name pos:start="153:11" pos:end="153:21">bdrv_pwrite</name><argument_list pos:start="153:22" pos:end="153:50">(<argument pos:start="153:23" pos:end="153:24"><expr pos:start="153:23" pos:end="153:24"><name pos:start="153:23" pos:end="153:24">bs</name></expr></argument>, <argument pos:start="153:27" pos:end="153:27"><expr pos:start="153:27" pos:end="153:27"><literal type="number" pos:start="153:27" pos:end="153:27">0</literal></expr></argument>, <argument pos:start="153:30" pos:end="153:35"><expr pos:start="153:30" pos:end="153:35"><name pos:start="153:30" pos:end="153:35">header</name></expr></argument>, <argument pos:start="153:38" pos:end="153:49"><expr pos:start="153:38" pos:end="153:49"><name pos:start="153:38" pos:end="153:49">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><call pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:10">g_free</name><argument_list pos:start="155:11" pos:end="155:18">(<argument pos:start="155:12" pos:end="155:17"><expr pos:start="155:12" pos:end="155:17"><name pos:start="155:12" pos:end="155:17">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:16">(<expr pos:start="157:9" pos:end="157:15"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:13">&lt;</operator> <literal type="number" pos:start="157:15" pos:end="157:15">0</literal></expr>)</condition> <block pos:start="157:18" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:17">

        <expr_stmt pos:start="159:9" pos:end="159:69"><expr pos:start="159:9" pos:end="159:68"><call pos:start="159:9" pos:end="159:68"><name pos:start="159:9" pos:end="159:24">error_setg_errno</name><argument_list pos:start="159:25" pos:end="159:68">(<argument pos:start="159:26" pos:end="159:29"><expr pos:start="159:26" pos:end="159:29"><name pos:start="159:26" pos:end="159:29">errp</name></expr></argument>, <argument pos:start="159:32" pos:end="159:35"><expr pos:start="159:32" pos:end="159:35"><operator pos:start="159:32" pos:end="159:32">-</operator><name pos:start="159:33" pos:end="159:35">ret</name></expr></argument>, <argument pos:start="159:38" pos:end="159:67"><expr pos:start="159:38" pos:end="159:67"><literal type="string" pos:start="159:38" pos:end="159:67">"Could not write qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="161:9" pos:end="161:17">goto <name pos:start="161:14" pos:end="161:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:39">/* Write an empty refcount table */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:45"><expr pos:start="169:5" pos:end="169:44"><name pos:start="169:5" pos:end="169:18">refcount_table</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <call pos:start="169:22" pos:end="169:44"><name pos:start="169:22" pos:end="169:30">g_malloc0</name><argument_list pos:start="169:31" pos:end="169:44">(<argument pos:start="169:32" pos:end="169:43"><expr pos:start="169:32" pos:end="169:43"><name pos:start="169:32" pos:end="169:43">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:70"><expr pos:start="171:5" pos:end="171:69"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:69"><name pos:start="171:11" pos:end="171:21">bdrv_pwrite</name><argument_list pos:start="171:22" pos:end="171:69">(<argument pos:start="171:23" pos:end="171:24"><expr pos:start="171:23" pos:end="171:24"><name pos:start="171:23" pos:end="171:24">bs</name></expr></argument>, <argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:38">cluster_size</name></expr></argument>, <argument pos:start="171:41" pos:end="171:54"><expr pos:start="171:41" pos:end="171:54"><name pos:start="171:41" pos:end="171:54">refcount_table</name></expr></argument>, <argument pos:start="171:57" pos:end="171:68"><expr pos:start="171:57" pos:end="171:68"><name pos:start="171:57" pos:end="171:68">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:27"><expr pos:start="173:5" pos:end="173:26"><call pos:start="173:5" pos:end="173:26"><name pos:start="173:5" pos:end="173:10">g_free</name><argument_list pos:start="173:11" pos:end="173:26">(<argument pos:start="173:12" pos:end="173:25"><expr pos:start="173:12" pos:end="173:25"><name pos:start="173:12" pos:end="173:25">refcount_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:16">(<expr pos:start="177:9" pos:end="177:15"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">&lt;</operator> <literal type="number" pos:start="177:15" pos:end="177:15">0</literal></expr>)</condition> <block pos:start="177:18" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:17">

        <expr_stmt pos:start="179:9" pos:end="179:71"><expr pos:start="179:9" pos:end="179:70"><call pos:start="179:9" pos:end="179:70"><name pos:start="179:9" pos:end="179:24">error_setg_errno</name><argument_list pos:start="179:25" pos:end="179:70">(<argument pos:start="179:26" pos:end="179:29"><expr pos:start="179:26" pos:end="179:29"><name pos:start="179:26" pos:end="179:29">errp</name></expr></argument>, <argument pos:start="179:32" pos:end="179:35"><expr pos:start="179:32" pos:end="179:35"><operator pos:start="179:32" pos:end="179:32">-</operator><name pos:start="179:33" pos:end="179:35">ret</name></expr></argument>, <argument pos:start="179:38" pos:end="179:69"><expr pos:start="179:38" pos:end="179:69"><literal type="string" pos:start="179:38" pos:end="179:69">"Could not write refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="181:9" pos:end="181:17">goto <name pos:start="181:14" pos:end="181:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:19"><expr pos:start="187:5" pos:end="187:18"><call pos:start="187:5" pos:end="187:18"><name pos:start="187:5" pos:end="187:14">bdrv_unref</name><argument_list pos:start="187:15" pos:end="187:18">(<argument pos:start="187:16" pos:end="187:17"><expr pos:start="187:16" pos:end="187:17"><name pos:start="187:16" pos:end="187:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:14"><expr pos:start="189:5" pos:end="189:13"><name pos:start="189:5" pos:end="189:6">bs</name> <operator pos:start="189:8" pos:end="189:8">=</operator> <name pos:start="189:10" pos:end="189:13">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="193:5" pos:end="201:7">/*

     * And now open the image and make it consistent first (i.e. increase the

     * refcount of the cluster that is occupied by the header and the refcount

     * table)

     */</comment>

    <decl_stmt pos:start="203:5" pos:end="203:49"><decl pos:start="203:5" pos:end="203:48"><type pos:start="203:5" pos:end="203:16"><name pos:start="203:5" pos:end="203:15">BlockDriver</name><modifier pos:start="203:16" pos:end="203:16">*</modifier></type> <name pos:start="203:18" pos:end="203:20">drv</name> <init pos:start="203:22" pos:end="203:48">= <expr pos:start="203:24" pos:end="203:48"><call pos:start="203:24" pos:end="203:48"><name pos:start="203:24" pos:end="203:39">bdrv_find_format</name><argument_list pos:start="203:40" pos:end="203:48">(<argument pos:start="203:41" pos:end="203:47"><expr pos:start="203:41" pos:end="203:47"><literal type="string" pos:start="203:41" pos:end="203:47">"qcow2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:24"><expr pos:start="205:5" pos:end="205:23"><call pos:start="205:5" pos:end="205:23"><name pos:start="205:5" pos:end="205:10">assert</name><argument_list pos:start="205:11" pos:end="205:23">(<argument pos:start="205:12" pos:end="205:22"><expr pos:start="205:12" pos:end="205:22"><name pos:start="205:12" pos:end="205:14">drv</name> <operator pos:start="205:16" pos:end="205:17">!=</operator> <name pos:start="205:19" pos:end="205:22">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="209:74"><expr pos:start="207:5" pos:end="209:73"><name pos:start="207:5" pos:end="207:7">ret</name> <operator pos:start="207:9" pos:end="207:9">=</operator> <call pos:start="207:11" pos:end="209:73"><name pos:start="207:11" pos:end="207:19">bdrv_open</name><argument_list pos:start="207:20" pos:end="209:73">(<argument pos:start="207:21" pos:end="207:23"><expr pos:start="207:21" pos:end="207:23"><operator pos:start="207:21" pos:end="207:21">&amp;</operator><name pos:start="207:22" pos:end="207:23">bs</name></expr></argument>, <argument pos:start="207:26" pos:end="207:33"><expr pos:start="207:26" pos:end="207:33"><name pos:start="207:26" pos:end="207:33">filename</name></expr></argument>, <argument pos:start="207:36" pos:end="207:39"><expr pos:start="207:36" pos:end="207:39"><name pos:start="207:36" pos:end="207:39">NULL</name></expr></argument>, <argument pos:start="207:42" pos:end="207:45"><expr pos:start="207:42" pos:end="207:45"><name pos:start="207:42" pos:end="207:45">NULL</name></expr></argument>,

        <argument pos:start="209:9" pos:end="209:55"><expr pos:start="209:9" pos:end="209:55"><name pos:start="209:9" pos:end="209:19">BDRV_O_RDWR</name> <operator pos:start="209:21" pos:end="209:21">|</operator> <name pos:start="209:23" pos:end="209:37">BDRV_O_CACHE_WB</name> <operator pos:start="209:39" pos:end="209:39">|</operator> <name pos:start="209:41" pos:end="209:55">BDRV_O_NO_FLUSH</name></expr></argument>, <argument pos:start="209:58" pos:end="209:60"><expr pos:start="209:58" pos:end="209:60"><name pos:start="209:58" pos:end="209:60">drv</name></expr></argument>, <argument pos:start="209:63" pos:end="209:72"><expr pos:start="209:63" pos:end="209:72"><operator pos:start="209:63" pos:end="209:63">&amp;</operator><name pos:start="209:64" pos:end="209:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="211:5" pos:end="217:5"><if pos:start="211:5" pos:end="217:5">if <condition pos:start="211:8" pos:end="211:16">(<expr pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">&lt;</operator> <literal type="number" pos:start="211:15" pos:end="211:15">0</literal></expr>)</condition> <block pos:start="211:18" pos:end="217:5">{<block_content pos:start="213:9" pos:end="215:17">

        <expr_stmt pos:start="213:9" pos:end="213:41"><expr pos:start="213:9" pos:end="213:40"><call pos:start="213:9" pos:end="213:40"><name pos:start="213:9" pos:end="213:23">error_propagate</name><argument_list pos:start="213:24" pos:end="213:40">(<argument pos:start="213:25" pos:end="213:28"><expr pos:start="213:25" pos:end="213:28"><name pos:start="213:25" pos:end="213:28">errp</name></expr></argument>, <argument pos:start="213:31" pos:end="213:39"><expr pos:start="213:31" pos:end="213:39"><name pos:start="213:31" pos:end="213:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:17">goto <name pos:start="215:14" pos:end="215:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:53"><expr pos:start="221:5" pos:end="221:52"><name pos:start="221:5" pos:end="221:7">ret</name> <operator pos:start="221:9" pos:end="221:9">=</operator> <call pos:start="221:11" pos:end="221:52"><name pos:start="221:11" pos:end="221:30">qcow2_alloc_clusters</name><argument_list pos:start="221:31" pos:end="221:52">(<argument pos:start="221:32" pos:end="221:33"><expr pos:start="221:32" pos:end="221:33"><name pos:start="221:32" pos:end="221:33">bs</name></expr></argument>, <argument pos:start="221:36" pos:end="221:51"><expr pos:start="221:36" pos:end="221:51"><literal type="number" pos:start="221:36" pos:end="221:36">2</literal> <operator pos:start="221:38" pos:end="221:38">*</operator> <name pos:start="221:40" pos:end="221:51">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="223:5" pos:end="239:5"><if pos:start="223:5" pos:end="233:5">if <condition pos:start="223:8" pos:end="223:16">(<expr pos:start="223:9" pos:end="223:15"><name pos:start="223:9" pos:end="223:11">ret</name> <operator pos:start="223:13" pos:end="223:13">&lt;</operator> <literal type="number" pos:start="223:15" pos:end="223:15">0</literal></expr>)</condition> <block pos:start="223:18" pos:end="233:5">{<block_content pos:start="225:9" pos:end="229:17">

        <expr_stmt pos:start="225:9" pos:end="227:54"><expr pos:start="225:9" pos:end="227:53"><call pos:start="225:9" pos:end="227:53"><name pos:start="225:9" pos:end="225:24">error_setg_errno</name><argument_list pos:start="225:25" pos:end="227:53">(<argument pos:start="225:26" pos:end="225:29"><expr pos:start="225:26" pos:end="225:29"><name pos:start="225:26" pos:end="225:29">errp</name></expr></argument>, <argument pos:start="225:32" pos:end="225:35"><expr pos:start="225:32" pos:end="225:35"><operator pos:start="225:32" pos:end="225:32">-</operator><name pos:start="225:33" pos:end="225:35">ret</name></expr></argument>, <argument pos:start="225:38" pos:end="227:52"><expr pos:start="225:38" pos:end="227:52"><literal type="string" pos:start="225:38" pos:end="225:77">"Could not allocate clusters for qcow2 "</literal>

                         <literal type="string" pos:start="227:26" pos:end="227:52">"header and refcount table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:17">goto <name pos:start="229:14" pos:end="229:16">out</name>;</goto>



    </block_content>}</block></if> <if type="elseif" pos:start="233:7" pos:end="239:5">else if <condition pos:start="233:15" pos:end="233:24">(<expr pos:start="233:16" pos:end="233:23"><name pos:start="233:16" pos:end="233:18">ret</name> <operator pos:start="233:20" pos:end="233:21">!=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">0</literal></expr>)</condition> <block pos:start="233:26" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:16">

        <expr_stmt pos:start="235:9" pos:end="235:77"><expr pos:start="235:9" pos:end="235:76"><call pos:start="235:9" pos:end="235:76"><name pos:start="235:9" pos:end="235:20">error_report</name><argument_list pos:start="235:21" pos:end="235:76">(<argument pos:start="235:22" pos:end="235:75"><expr pos:start="235:22" pos:end="235:75"><literal type="string" pos:start="235:22" pos:end="235:75">"Huh, first cluster in empty image is already in use?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:16"><expr pos:start="237:9" pos:end="237:15"><call pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:13">abort</name><argument_list pos:start="237:14" pos:end="237:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="243:5" pos:end="243:76">/* Okay, now that we have a valid image, let's give it the right size */</comment>

    <expr_stmt pos:start="245:5" pos:end="245:59"><expr pos:start="245:5" pos:end="245:58"><name pos:start="245:5" pos:end="245:7">ret</name> <operator pos:start="245:9" pos:end="245:9">=</operator> <call pos:start="245:11" pos:end="245:58"><name pos:start="245:11" pos:end="245:23">bdrv_truncate</name><argument_list pos:start="245:24" pos:end="245:58">(<argument pos:start="245:25" pos:end="245:26"><expr pos:start="245:25" pos:end="245:26"><name pos:start="245:25" pos:end="245:26">bs</name></expr></argument>, <argument pos:start="245:29" pos:end="245:57"><expr pos:start="245:29" pos:end="245:57"><name pos:start="245:29" pos:end="245:38">total_size</name> <operator pos:start="245:40" pos:end="245:40">*</operator> <name pos:start="245:42" pos:end="245:57">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="253:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:16">(<expr pos:start="247:9" pos:end="247:15"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">&lt;</operator> <literal type="number" pos:start="247:15" pos:end="247:15">0</literal></expr>)</condition> <block pos:start="247:18" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:17">

        <expr_stmt pos:start="249:9" pos:end="249:63"><expr pos:start="249:9" pos:end="249:62"><call pos:start="249:9" pos:end="249:62"><name pos:start="249:9" pos:end="249:24">error_setg_errno</name><argument_list pos:start="249:25" pos:end="249:62">(<argument pos:start="249:26" pos:end="249:29"><expr pos:start="249:26" pos:end="249:29"><name pos:start="249:26" pos:end="249:29">errp</name></expr></argument>, <argument pos:start="249:32" pos:end="249:35"><expr pos:start="249:32" pos:end="249:35"><operator pos:start="249:32" pos:end="249:32">-</operator><name pos:start="249:33" pos:end="249:35">ret</name></expr></argument>, <argument pos:start="249:38" pos:end="249:61"><expr pos:start="249:38" pos:end="249:61"><literal type="string" pos:start="249:38" pos:end="249:61">"Could not resize image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="251:9" pos:end="251:17">goto <name pos:start="251:14" pos:end="251:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="257:5" pos:end="257:43">/* Want a backing file? There you go.*/</comment>

    <if_stmt pos:start="259:5" pos:end="273:5"><if pos:start="259:5" pos:end="273:5">if <condition pos:start="259:8" pos:end="259:21">(<expr pos:start="259:9" pos:end="259:20"><name pos:start="259:9" pos:end="259:20">backing_file</name></expr>)</condition> <block pos:start="259:23" pos:end="273:5">{<block_content pos:start="261:9" pos:end="271:9">

        <expr_stmt pos:start="261:9" pos:end="261:73"><expr pos:start="261:9" pos:end="261:72"><name pos:start="261:9" pos:end="261:11">ret</name> <operator pos:start="261:13" pos:end="261:13">=</operator> <call pos:start="261:15" pos:end="261:72"><name pos:start="261:15" pos:end="261:38">bdrv_change_backing_file</name><argument_list pos:start="261:39" pos:end="261:72">(<argument pos:start="261:40" pos:end="261:41"><expr pos:start="261:40" pos:end="261:41"><name pos:start="261:40" pos:end="261:41">bs</name></expr></argument>, <argument pos:start="261:44" pos:end="261:55"><expr pos:start="261:44" pos:end="261:55"><name pos:start="261:44" pos:end="261:55">backing_file</name></expr></argument>, <argument pos:start="261:58" pos:end="261:71"><expr pos:start="261:58" pos:end="261:71"><name pos:start="261:58" pos:end="261:71">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="271:9"><if pos:start="263:9" pos:end="271:9">if <condition pos:start="263:12" pos:end="263:20">(<expr pos:start="263:13" pos:end="263:19"><name pos:start="263:13" pos:end="263:15">ret</name> <operator pos:start="263:17" pos:end="263:17">&lt;</operator> <literal type="number" pos:start="263:19" pos:end="263:19">0</literal></expr>)</condition> <block pos:start="263:22" pos:end="271:9">{<block_content pos:start="265:13" pos:end="269:21">

            <expr_stmt pos:start="265:13" pos:end="267:79"><expr pos:start="265:13" pos:end="267:78"><call pos:start="265:13" pos:end="267:78"><name pos:start="265:13" pos:end="265:28">error_setg_errno</name><argument_list pos:start="265:29" pos:end="267:78">(<argument pos:start="265:30" pos:end="265:33"><expr pos:start="265:30" pos:end="265:33"><name pos:start="265:30" pos:end="265:33">errp</name></expr></argument>, <argument pos:start="265:36" pos:end="265:39"><expr pos:start="265:36" pos:end="265:39"><operator pos:start="265:36" pos:end="265:36">-</operator><name pos:start="265:37" pos:end="265:39">ret</name></expr></argument>, <argument pos:start="265:42" pos:end="267:47"><expr pos:start="265:42" pos:end="267:47"><literal type="string" pos:start="265:42" pos:end="265:78">"Could not assign backing file '%s' "</literal>

                             <literal type="string" pos:start="267:30" pos:end="267:47">"with format '%s'"</literal></expr></argument>, <argument pos:start="267:50" pos:end="267:61"><expr pos:start="267:50" pos:end="267:61"><name pos:start="267:50" pos:end="267:61">backing_file</name></expr></argument>, <argument pos:start="267:64" pos:end="267:77"><expr pos:start="267:64" pos:end="267:77"><name pos:start="267:64" pos:end="267:77">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="269:13" pos:end="269:21">goto <name pos:start="269:18" pos:end="269:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="277:5" pos:end="277:68">/* And if we're supposed to preallocate metadata, do that now */</comment>

    <if_stmt pos:start="279:5" pos:end="297:5"><if pos:start="279:5" pos:end="297:5">if <condition pos:start="279:8" pos:end="279:17">(<expr pos:start="279:9" pos:end="279:16"><name pos:start="279:9" pos:end="279:16">prealloc</name></expr>)</condition> <block pos:start="279:19" pos:end="297:5">{<block_content pos:start="281:9" pos:end="295:9">

        <decl_stmt pos:start="281:9" pos:end="281:38"><decl pos:start="281:9" pos:end="281:37"><type pos:start="281:9" pos:end="281:23"><name pos:start="281:9" pos:end="281:21">BDRVQcowState</name> <modifier pos:start="281:23" pos:end="281:23">*</modifier></type><name pos:start="281:24" pos:end="281:24">s</name> <init pos:start="281:26" pos:end="281:37">= <expr pos:start="281:28" pos:end="281:37"><name pos:start="281:28" pos:end="281:37"><name pos:start="281:28" pos:end="281:29">bs</name><operator pos:start="281:30" pos:end="281:31">-&gt;</operator><name pos:start="281:32" pos:end="281:37">opaque</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:37"><expr pos:start="283:9" pos:end="283:36"><call pos:start="283:9" pos:end="283:36"><name pos:start="283:9" pos:end="283:26">qemu_co_mutex_lock</name><argument_list pos:start="283:27" pos:end="283:36">(<argument pos:start="283:28" pos:end="283:35"><expr pos:start="283:28" pos:end="283:35"><operator pos:start="283:28" pos:end="283:28">&amp;</operator><name pos:start="283:29" pos:end="283:35"><name pos:start="283:29" pos:end="283:29">s</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:30"><expr pos:start="285:9" pos:end="285:29"><name pos:start="285:9" pos:end="285:11">ret</name> <operator pos:start="285:13" pos:end="285:13">=</operator> <call pos:start="285:15" pos:end="285:29"><name pos:start="285:15" pos:end="285:25">preallocate</name><argument_list pos:start="285:26" pos:end="285:29">(<argument pos:start="285:27" pos:end="285:28"><expr pos:start="285:27" pos:end="285:28"><name pos:start="285:27" pos:end="285:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:39"><expr pos:start="287:9" pos:end="287:38"><call pos:start="287:9" pos:end="287:38"><name pos:start="287:9" pos:end="287:28">qemu_co_mutex_unlock</name><argument_list pos:start="287:29" pos:end="287:38">(<argument pos:start="287:30" pos:end="287:37"><expr pos:start="287:30" pos:end="287:37"><operator pos:start="287:30" pos:end="287:30">&amp;</operator><name pos:start="287:31" pos:end="287:37"><name pos:start="287:31" pos:end="287:31">s</name><operator pos:start="287:32" pos:end="287:33">-&gt;</operator><name pos:start="287:34" pos:end="287:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="295:9"><if pos:start="289:9" pos:end="295:9">if <condition pos:start="289:12" pos:end="289:20">(<expr pos:start="289:13" pos:end="289:19"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">&lt;</operator> <literal type="number" pos:start="289:19" pos:end="289:19">0</literal></expr>)</condition> <block pos:start="289:22" pos:end="295:9">{<block_content pos:start="291:13" pos:end="293:21">

            <expr_stmt pos:start="291:13" pos:end="291:75"><expr pos:start="291:13" pos:end="291:74"><call pos:start="291:13" pos:end="291:74"><name pos:start="291:13" pos:end="291:28">error_setg_errno</name><argument_list pos:start="291:29" pos:end="291:74">(<argument pos:start="291:30" pos:end="291:33"><expr pos:start="291:30" pos:end="291:33"><name pos:start="291:30" pos:end="291:33">errp</name></expr></argument>, <argument pos:start="291:36" pos:end="291:39"><expr pos:start="291:36" pos:end="291:39"><operator pos:start="291:36" pos:end="291:36">-</operator><name pos:start="291:37" pos:end="291:39">ret</name></expr></argument>, <argument pos:start="291:42" pos:end="291:73"><expr pos:start="291:42" pos:end="291:73"><literal type="string" pos:start="291:42" pos:end="291:73">"Could not preallocate metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="293:13" pos:end="293:21">goto <name pos:start="293:18" pos:end="293:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:19"><expr pos:start="301:5" pos:end="301:18"><call pos:start="301:5" pos:end="301:18"><name pos:start="301:5" pos:end="301:14">bdrv_unref</name><argument_list pos:start="301:15" pos:end="301:18">(<argument pos:start="301:16" pos:end="301:17"><expr pos:start="301:16" pos:end="301:17"><name pos:start="301:16" pos:end="301:17">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:14"><expr pos:start="303:5" pos:end="303:13"><name pos:start="303:5" pos:end="303:6">bs</name> <operator pos:start="303:8" pos:end="303:8">=</operator> <name pos:start="303:10" pos:end="303:13">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:79">/* Reopen the image without BDRV_O_NO_FLUSH to flush it before returning */</comment>

    <expr_stmt pos:start="309:5" pos:end="313:37"><expr pos:start="309:5" pos:end="313:36"><name pos:start="309:5" pos:end="309:7">ret</name> <operator pos:start="309:9" pos:end="309:9">=</operator> <call pos:start="309:11" pos:end="313:36"><name pos:start="309:11" pos:end="309:19">bdrv_open</name><argument_list pos:start="309:20" pos:end="313:36">(<argument pos:start="309:21" pos:end="309:23"><expr pos:start="309:21" pos:end="309:23"><operator pos:start="309:21" pos:end="309:21">&amp;</operator><name pos:start="309:22" pos:end="309:23">bs</name></expr></argument>, <argument pos:start="309:26" pos:end="309:33"><expr pos:start="309:26" pos:end="309:33"><name pos:start="309:26" pos:end="309:33">filename</name></expr></argument>, <argument pos:start="309:36" pos:end="309:39"><expr pos:start="309:36" pos:end="309:39"><name pos:start="309:36" pos:end="309:39">NULL</name></expr></argument>, <argument pos:start="309:42" pos:end="309:45"><expr pos:start="309:42" pos:end="309:45"><name pos:start="309:42" pos:end="309:45">NULL</name></expr></argument>,

                    <argument pos:start="311:21" pos:end="311:69"><expr pos:start="311:21" pos:end="311:69"><name pos:start="311:21" pos:end="311:31">BDRV_O_RDWR</name> <operator pos:start="311:33" pos:end="311:33">|</operator> <name pos:start="311:35" pos:end="311:49">BDRV_O_CACHE_WB</name> <operator pos:start="311:51" pos:end="311:51">|</operator> <name pos:start="311:53" pos:end="311:69">BDRV_O_NO_BACKING</name></expr></argument>,

                    <argument pos:start="313:21" pos:end="313:23"><expr pos:start="313:21" pos:end="313:23"><name pos:start="313:21" pos:end="313:23">drv</name></expr></argument>, <argument pos:start="313:26" pos:end="313:35"><expr pos:start="313:26" pos:end="313:35"><operator pos:start="313:26" pos:end="313:26">&amp;</operator><name pos:start="313:27" pos:end="313:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if <condition pos:start="315:8" pos:end="315:18">(<expr pos:start="315:9" pos:end="315:17"><name pos:start="315:9" pos:end="315:17">local_err</name></expr>)</condition> <block pos:start="315:20" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:17">

        <expr_stmt pos:start="317:9" pos:end="317:41"><expr pos:start="317:9" pos:end="317:40"><call pos:start="317:9" pos:end="317:40"><name pos:start="317:9" pos:end="317:23">error_propagate</name><argument_list pos:start="317:24" pos:end="317:40">(<argument pos:start="317:25" pos:end="317:28"><expr pos:start="317:25" pos:end="317:28"><name pos:start="317:25" pos:end="317:28">errp</name></expr></argument>, <argument pos:start="317:31" pos:end="317:39"><expr pos:start="317:31" pos:end="317:39"><name pos:start="317:31" pos:end="317:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="319:9" pos:end="319:17">goto <name pos:start="319:14" pos:end="319:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="325:5" pos:end="325:12"><expr pos:start="325:5" pos:end="325:11"><name pos:start="325:5" pos:end="325:7">ret</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <literal type="number" pos:start="325:11" pos:end="325:11">0</literal></expr>;</expr_stmt>

<label pos:start="327:1" pos:end="327:4"><name pos:start="327:1" pos:end="327:3">out</name>:</label>

    <if_stmt pos:start="329:5" pos:end="333:5"><if pos:start="329:5" pos:end="333:5">if <condition pos:start="329:8" pos:end="329:11">(<expr pos:start="329:9" pos:end="329:10"><name pos:start="329:9" pos:end="329:10">bs</name></expr>)</condition> <block pos:start="329:13" pos:end="333:5">{<block_content pos:start="331:9" pos:end="331:23">

        <expr_stmt pos:start="331:9" pos:end="331:23"><expr pos:start="331:9" pos:end="331:22"><call pos:start="331:9" pos:end="331:22"><name pos:start="331:9" pos:end="331:18">bdrv_unref</name><argument_list pos:start="331:19" pos:end="331:22">(<argument pos:start="331:20" pos:end="331:21"><expr pos:start="331:20" pos:end="331:21"><name pos:start="331:20" pos:end="331:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="335:5" pos:end="335:15">return <expr pos:start="335:12" pos:end="335:14"><name pos:start="335:12" pos:end="335:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
