<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9277.c" pos:tabs="8"><function pos:start="1:1" pos:end="339:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">amrwb_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:66">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="339:1">{<block_content pos:start="7:5" pos:end="337:28">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">AMRWBContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">ctx</name>  <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:14">AMRWBFrame</name>   <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">cf</name>   <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:36"><name pos:start="9:27" pos:end="9:29">ctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:36">frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">buf</name> <init pos:start="11:24" pos:end="11:36">= <expr pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:36"><name pos:start="11:26" pos:end="11:30">avpkt</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">buf_size</name>       <init pos:start="13:24" pos:end="13:36">= <expr pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:36"><name pos:start="13:26" pos:end="13:30">avpkt</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:24">expected_fr_size</name></decl>, <decl pos:start="15:27" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:37">header_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">float</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">buf_out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:39"><decl pos:start="19:5" pos:end="19:38"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:38"><name pos:start="19:11" pos:end="19:22">spare_vector</name><index pos:start="19:23" pos:end="19:38">[<expr pos:start="19:24" pos:end="19:37"><name pos:start="19:24" pos:end="19:37">AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="line" pos:start="19:46" pos:end="19:112">// extra stack space to hold result from anti-sparseness processing</comment>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:9">float</name></type> <name pos:start="21:11" pos:end="21:27">fixed_gain_factor</name></decl>;</decl_stmt>                 <comment type="line" pos:start="21:46" pos:end="21:84">// fixed gain correction factor (gamma)</comment>

    <decl_stmt pos:start="23:5" pos:end="23:30"><decl pos:start="23:5" pos:end="23:29"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">float</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:29">synth_fixed_vector</name></decl>;</decl_stmt>               <comment type="line" pos:start="23:46" pos:end="23:101">// pointer to the fixed vector that synthesis should use</comment>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:9"><name pos:start="25:5" pos:end="25:9">float</name></type> <name pos:start="25:11" pos:end="25:26">synth_fixed_gain</name></decl>;</decl_stmt>                  <comment type="line" pos:start="25:46" pos:end="25:88">// the fixed gain that synthesis should use</comment>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:9">float</name></type> <name pos:start="27:11" pos:end="27:19">voice_fac</name></decl>, <decl pos:start="27:22" pos:end="27:29"><type ref="prev" pos:start="27:5" pos:end="27:9"/><name pos:start="27:22" pos:end="27:29">stab_fac</name></decl>;</decl_stmt>               <comment type="line" pos:start="27:46" pos:end="27:82">// parameters used for gain smoothing</comment>

    <decl_stmt pos:start="29:5" pos:end="29:36"><decl pos:start="29:5" pos:end="29:35"><type pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:9">float</name></type> <name pos:start="29:11" pos:end="29:35"><name pos:start="29:11" pos:end="29:19">synth_exc</name><index pos:start="29:20" pos:end="29:35">[<expr pos:start="29:21" pos:end="29:34"><name pos:start="29:21" pos:end="29:34">AMRWB_SFR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>         <comment type="line" pos:start="29:46" pos:end="29:87">// post-processed excitation for synthesis</comment>

    <decl_stmt pos:start="31:5" pos:end="31:37"><decl pos:start="31:5" pos:end="31:36"><type pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:9">float</name></type> <name pos:start="31:11" pos:end="31:36"><name pos:start="31:11" pos:end="31:16">hb_exc</name><index pos:start="31:17" pos:end="31:36">[<expr pos:start="31:18" pos:end="31:35"><name pos:start="31:18" pos:end="31:35">AMRWB_SFR_SIZE_16k</name></expr>]</index></name></decl>;</decl_stmt>        <comment type="line" pos:start="31:46" pos:end="31:86">// excitation for the high frequency band</comment>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:9">float</name></type> <name pos:start="33:11" pos:end="33:40"><name pos:start="33:11" pos:end="33:20">hb_samples</name><index pos:start="33:21" pos:end="33:40">[<expr pos:start="33:22" pos:end="33:39"><name pos:start="33:22" pos:end="33:39">AMRWB_SFR_SIZE_16k</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="line" pos:start="33:46" pos:end="33:89">// filtered high-band samples from synthesis</comment>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:9">float</name></type> <name pos:start="35:11" pos:end="35:17">hb_gain</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:20"><decl pos:start="37:5" pos:end="37:11"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:11">sub</name></decl>, <decl pos:start="37:14" pos:end="37:14"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:14" pos:end="37:14">i</name></decl>, <decl pos:start="37:17" pos:end="37:19"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:17" pos:end="37:19">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:27">/* get output buffer */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:53"><expr pos:start="43:5" pos:end="43:52"><name pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:16">avframe</name><operator pos:start="43:17" pos:end="43:17">.</operator><name pos:start="43:18" pos:end="43:27">nb_samples</name></name> <operator pos:start="43:29" pos:end="43:29">=</operator> <literal type="number" pos:start="43:31" pos:end="43:31">4</literal> <operator pos:start="43:33" pos:end="43:33">*</operator> <name pos:start="43:35" pos:end="43:52">AMRWB_SFR_SIZE_16k</name></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:60">(<expr pos:start="45:9" pos:end="45:59"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:12">ret</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:54"><name pos:start="45:16" pos:end="45:32"><name pos:start="45:16" pos:end="45:20">avctx</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:32">get_buffer</name></name><argument_list pos:start="45:33" pos:end="45:54">(<argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><name pos:start="45:34" pos:end="45:38">avctx</name></expr></argument>, <argument pos:start="45:41" pos:end="45:53"><expr pos:start="45:41" pos:end="45:53"><operator pos:start="45:41" pos:end="45:41">&amp;</operator><name pos:start="45:42" pos:end="45:53"><name pos:start="45:42" pos:end="45:44">ctx</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:53">avframe</name></name></expr></argument>)</argument_list></call><operator pos:start="45:55" pos:end="45:55">)</operator> <operator pos:start="45:57" pos:end="45:57">&lt;</operator> <literal type="number" pos:start="45:59" pos:end="45:59">0</literal></expr>)</condition> <block pos:start="45:62" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:19">

        <expr_stmt pos:start="47:9" pos:end="47:61"><expr pos:start="47:9" pos:end="47:60"><call pos:start="47:9" pos:end="47:60"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:60">(<argument pos:start="47:16" pos:end="47:20"><expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">avctx</name></expr></argument>, <argument pos:start="47:23" pos:end="47:34"><expr pos:start="47:23" pos:end="47:34"><name pos:start="47:23" pos:end="47:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:37" pos:end="47:59"><expr pos:start="47:37" pos:end="47:59"><literal type="string" pos:start="47:37" pos:end="47:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:19">return <expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:11">buf_out</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:20">float</name> <operator pos:start="53:22" pos:end="53:22">*</operator><operator pos:start="53:23" pos:end="53:23">)</operator><name pos:start="53:24" pos:end="53:43"><name pos:start="53:24" pos:end="53:26">ctx</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:35">avframe</name><operator pos:start="53:36" pos:end="53:36">.</operator><name pos:start="53:37" pos:end="53:40">data</name><index pos:start="53:41" pos:end="53:43">[<expr pos:start="53:42" pos:end="53:42"><literal type="number" pos:start="53:42" pos:end="53:42">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:15">header_size</name>      <operator pos:start="57:22" pos:end="57:22">=</operator> <call pos:start="57:24" pos:end="57:51"><name pos:start="57:24" pos:end="57:41">decode_mime_header</name><argument_list pos:start="57:42" pos:end="57:51">(<argument pos:start="57:43" pos:end="57:45"><expr pos:start="57:43" pos:end="57:45"><name pos:start="57:43" pos:end="57:45">ctx</name></expr></argument>, <argument pos:start="57:48" pos:end="57:50"><expr pos:start="57:48" pos:end="57:50"><name pos:start="57:48" pos:end="57:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:70"><expr pos:start="59:5" pos:end="59:69"><name pos:start="59:5" pos:end="59:20">expected_fr_size</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <operator pos:start="59:24" pos:end="59:24">(</operator><operator pos:start="59:25" pos:end="59:25">(</operator><name pos:start="59:26" pos:end="59:54"><name pos:start="59:26" pos:end="59:36">cf_sizes_wb</name><index pos:start="59:37" pos:end="59:54">[<expr pos:start="59:38" pos:end="59:53"><name pos:start="59:38" pos:end="59:53"><name pos:start="59:38" pos:end="59:40">ctx</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:53">fr_cur_mode</name></name></expr>]</index></name> <operator pos:start="59:56" pos:end="59:56">+</operator> <literal type="number" pos:start="59:58" pos:end="59:58">7</literal><operator pos:start="59:59" pos:end="59:59">)</operator> <operator pos:start="59:61" pos:end="59:62">&gt;&gt;</operator> <literal type="number" pos:start="59:64" pos:end="59:64">3</literal><operator pos:start="59:65" pos:end="59:65">)</operator> <operator pos:start="59:67" pos:end="59:67">+</operator> <literal type="number" pos:start="59:69" pos:end="59:69">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:36">(<expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:16">buf_size</name> <operator pos:start="63:18" pos:end="63:18">&lt;</operator> <name pos:start="63:20" pos:end="63:35">expected_fr_size</name></expr>)</condition> <block pos:start="63:38" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:24">

        <expr_stmt pos:start="65:9" pos:end="67:71"><expr pos:start="65:9" pos:end="67:70"><call pos:start="65:9" pos:end="67:70"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="67:70">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>,

            <argument pos:start="67:13" pos:end="67:59"><expr pos:start="67:13" pos:end="67:59"><literal type="string" pos:start="67:13" pos:end="67:59">"Frame too small (%d bytes). Truncated file?\n"</literal></expr></argument>, <argument pos:start="67:62" pos:end="67:69"><expr pos:start="67:62" pos:end="67:69"><name pos:start="67:62" pos:end="67:69">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:27"><expr pos:start="69:9" pos:end="69:26"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:22">got_frame_ptr</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:24">return <expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="79:78"><if pos:start="77:5" pos:end="79:78">if <condition pos:start="77:8" pos:end="77:56">(<expr pos:start="77:9" pos:end="77:55"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:24"><name pos:start="77:10" pos:end="77:12">ctx</name><operator pos:start="77:13" pos:end="77:14">-&gt;</operator><name pos:start="77:15" pos:end="77:24">fr_quality</name></name> <operator pos:start="77:26" pos:end="77:27">||</operator> <name pos:start="77:29" pos:end="77:44"><name pos:start="77:29" pos:end="77:31">ctx</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:44">fr_cur_mode</name></name> <operator pos:start="77:46" pos:end="77:46">&gt;</operator> <name pos:start="77:48" pos:end="77:55">MODE_SID</name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:78"><block_content pos:start="79:9" pos:end="79:78">

        <expr_stmt pos:start="79:9" pos:end="79:78"><expr pos:start="79:9" pos:end="79:77"><call pos:start="79:9" pos:end="79:77"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:77">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:76"><expr pos:start="79:37" pos:end="79:76"><literal type="string" pos:start="79:37" pos:end="79:76">"Encountered a bad or corrupted frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="85:53"><if pos:start="83:5" pos:end="85:53">if <condition pos:start="83:8" pos:end="83:37">(<expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:11">ctx</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:24">fr_cur_mode</name></name> <operator pos:start="83:26" pos:end="83:27">==</operator> <name pos:start="83:29" pos:end="83:36">MODE_SID</name></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:53"><block_content pos:start="85:9" pos:end="85:53"> <comment type="block" pos:start="83:39" pos:end="83:63">/* Comfort noise frame */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:53"><expr pos:start="85:9" pos:end="85:52"><call pos:start="85:9" pos:end="85:52"><name pos:start="85:9" pos:end="85:30">av_log_missing_feature</name><argument_list pos:start="85:31" pos:end="85:52">(<argument pos:start="85:32" pos:end="85:36"><expr pos:start="85:32" pos:end="85:36"><name pos:start="85:32" pos:end="85:36">avctx</name></expr></argument>, <argument pos:start="85:39" pos:end="85:48"><expr pos:start="85:39" pos:end="85:48"><literal type="string" pos:start="85:39" pos:end="85:48">"SID mode"</literal></expr></argument>, <argument pos:start="85:51" pos:end="85:51"><expr pos:start="85:51" pos:end="85:51"><literal type="number" pos:start="85:51" pos:end="85:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="91:18"><if pos:start="89:5" pos:end="91:18">if <condition pos:start="89:8" pos:end="89:37">(<expr pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:11">ctx</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:24">fr_cur_mode</name></name> <operator pos:start="89:26" pos:end="89:27">&gt;=</operator> <name pos:start="89:29" pos:end="89:36">MODE_SID</name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:18"><block_content pos:start="91:9" pos:end="91:18">

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="97:72"><expr pos:start="95:5" pos:end="97:71"><call pos:start="95:5" pos:end="97:71"><name pos:start="95:5" pos:end="95:22">ff_amr_bit_reorder</name><argument_list pos:start="95:23" pos:end="97:71">(<argument pos:start="95:24" pos:end="95:47"><expr pos:start="95:24" pos:end="95:47"><operator pos:start="95:24" pos:end="95:24">(</operator><name pos:start="95:25" pos:end="95:32">uint16_t</name> <operator pos:start="95:34" pos:end="95:34">*</operator><operator pos:start="95:35" pos:end="95:35">)</operator> <operator pos:start="95:37" pos:end="95:37">&amp;</operator><name pos:start="95:38" pos:end="95:47"><name pos:start="95:38" pos:end="95:40">ctx</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:47">frame</name></name></expr></argument>, <argument pos:start="95:50" pos:end="95:67"><expr pos:start="95:50" pos:end="95:67"><sizeof pos:start="95:50" pos:end="95:67">sizeof<argument_list pos:start="95:56" pos:end="95:67">(<argument pos:start="95:57" pos:end="95:66"><expr pos:start="95:57" pos:end="95:66"><name pos:start="95:57" pos:end="95:66">AMRWBFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>,

        <argument pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:11">buf</name> <operator pos:start="97:13" pos:end="97:13">+</operator> <name pos:start="97:15" pos:end="97:25">header_size</name></expr></argument>, <argument pos:start="97:28" pos:end="97:70"><expr pos:start="97:28" pos:end="97:70"><name pos:start="97:28" pos:end="97:70"><name pos:start="97:28" pos:end="97:52">amr_bit_orderings_by_mode</name><index pos:start="97:53" pos:end="97:70">[<expr pos:start="97:54" pos:end="97:69"><name pos:start="97:54" pos:end="97:69"><name pos:start="97:54" pos:end="97:56">ctx</name><operator pos:start="97:57" pos:end="97:58">-&gt;</operator><name pos:start="97:59" pos:end="97:69">fr_cur_mode</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:41">/* Decode the quantized ISF vector */</comment>

    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:38">(<expr pos:start="103:9" pos:end="103:37"><name pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:24">fr_cur_mode</name></name> <operator pos:start="103:26" pos:end="103:27">==</operator> <name pos:start="103:29" pos:end="103:37">MODE_6k60</name></expr>)</condition> <block pos:start="103:40" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:57">

        <expr_stmt pos:start="105:9" pos:end="105:57"><expr pos:start="105:9" pos:end="105:56"><call pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:30">decode_isf_indices_36b</name><argument_list pos:start="105:31" pos:end="105:56">(<argument pos:start="105:32" pos:end="105:41"><expr pos:start="105:32" pos:end="105:41"><name pos:start="105:32" pos:end="105:41"><name pos:start="105:32" pos:end="105:33">cf</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:41">isp_id</name></name></expr></argument>, <argument pos:start="105:44" pos:end="105:55"><expr pos:start="105:44" pos:end="105:55"><name pos:start="105:44" pos:end="105:55"><name pos:start="105:44" pos:end="105:46">ctx</name><operator pos:start="105:47" pos:end="105:48">-&gt;</operator><name pos:start="105:49" pos:end="105:55">isf_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:57">

        <expr_stmt pos:start="109:9" pos:end="109:57"><expr pos:start="109:9" pos:end="109:56"><call pos:start="109:9" pos:end="109:56"><name pos:start="109:9" pos:end="109:30">decode_isf_indices_46b</name><argument_list pos:start="109:31" pos:end="109:56">(<argument pos:start="109:32" pos:end="109:41"><expr pos:start="109:32" pos:end="109:41"><name pos:start="109:32" pos:end="109:41"><name pos:start="109:32" pos:end="109:33">cf</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:41">isp_id</name></name></expr></argument>, <argument pos:start="109:44" pos:end="109:55"><expr pos:start="109:44" pos:end="109:55"><name pos:start="109:44" pos:end="109:55"><name pos:start="109:44" pos:end="109:46">ctx</name><operator pos:start="109:47" pos:end="109:48">-&gt;</operator><name pos:start="109:49" pos:end="109:55">isf_cur</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:57"><expr pos:start="115:5" pos:end="115:56"><call pos:start="115:5" pos:end="115:56"><name pos:start="115:5" pos:end="115:25">isf_add_mean_and_past</name><argument_list pos:start="115:26" pos:end="115:56">(<argument pos:start="115:27" pos:end="115:38"><expr pos:start="115:27" pos:end="115:38"><name pos:start="115:27" pos:end="115:38"><name pos:start="115:27" pos:end="115:29">ctx</name><operator pos:start="115:30" pos:end="115:31">-&gt;</operator><name pos:start="115:32" pos:end="115:38">isf_cur</name></name></expr></argument>, <argument pos:start="115:41" pos:end="115:55"><expr pos:start="115:41" pos:end="115:55"><name pos:start="115:41" pos:end="115:55"><name pos:start="115:41" pos:end="115:43">ctx</name><operator pos:start="115:44" pos:end="115:45">-&gt;</operator><name pos:start="115:46" pos:end="115:55">isf_q_past</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:69"><expr pos:start="117:5" pos:end="117:68"><call pos:start="117:5" pos:end="117:68"><name pos:start="117:5" pos:end="117:23">ff_set_min_dist_lsf</name><argument_list pos:start="117:24" pos:end="117:68">(<argument pos:start="117:25" pos:end="117:36"><expr pos:start="117:25" pos:end="117:36"><name pos:start="117:25" pos:end="117:36"><name pos:start="117:25" pos:end="117:27">ctx</name><operator pos:start="117:28" pos:end="117:29">-&gt;</operator><name pos:start="117:30" pos:end="117:36">isf_cur</name></name></expr></argument>, <argument pos:start="117:39" pos:end="117:53"><expr pos:start="117:39" pos:end="117:53"><name pos:start="117:39" pos:end="117:53">MIN_ISF_SPACING</name></expr></argument>, <argument pos:start="117:56" pos:end="117:67"><expr pos:start="117:56" pos:end="117:67"><name pos:start="117:56" pos:end="117:63">LP_ORDER</name> <operator pos:start="117:65" pos:end="117:65">-</operator> <literal type="number" pos:start="117:67" pos:end="117:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:67"><expr pos:start="121:5" pos:end="121:66"><name pos:start="121:5" pos:end="121:12">stab_fac</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <call pos:start="121:16" pos:end="121:66"><name pos:start="121:16" pos:end="121:31">stability_factor</name><argument_list pos:start="121:32" pos:end="121:66">(<argument pos:start="121:33" pos:end="121:44"><expr pos:start="121:33" pos:end="121:44"><name pos:start="121:33" pos:end="121:44"><name pos:start="121:33" pos:end="121:35">ctx</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:44">isf_cur</name></name></expr></argument>, <argument pos:start="121:47" pos:end="121:65"><expr pos:start="121:47" pos:end="121:65"><name pos:start="121:47" pos:end="121:65"><name pos:start="121:47" pos:end="121:49">ctx</name><operator pos:start="121:50" pos:end="121:51">-&gt;</operator><name pos:start="121:52" pos:end="121:65">isf_past_final</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:30"><name pos:start="125:5" pos:end="125:7">ctx</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:16">isf_cur</name><index pos:start="125:17" pos:end="125:30">[<expr pos:start="125:18" pos:end="125:29"><name pos:start="125:18" pos:end="125:25">LP_ORDER</name> <operator pos:start="125:27" pos:end="125:27">-</operator> <literal type="number" pos:start="125:29" pos:end="125:29">1</literal></expr>]</index></name> <operator pos:start="125:32" pos:end="125:33">*=</operator> <literal type="number" pos:start="125:35" pos:end="125:37">2.0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:59"><expr pos:start="127:5" pos:end="127:58"><call pos:start="127:5" pos:end="127:58"><name pos:start="127:5" pos:end="127:21">ff_acelp_lsf2lspd</name><argument_list pos:start="127:22" pos:end="127:58">(<argument pos:start="127:23" pos:end="127:33"><expr pos:start="127:23" pos:end="127:33"><name pos:start="127:23" pos:end="127:33"><name pos:start="127:23" pos:end="127:25">ctx</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:30">isp</name><index pos:start="127:31" pos:end="127:33">[<expr pos:start="127:32" pos:end="127:32"><literal type="number" pos:start="127:32" pos:end="127:32">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="127:36" pos:end="127:47"><expr pos:start="127:36" pos:end="127:47"><name pos:start="127:36" pos:end="127:47"><name pos:start="127:36" pos:end="127:38">ctx</name><operator pos:start="127:39" pos:end="127:40">-&gt;</operator><name pos:start="127:41" pos:end="127:47">isf_cur</name></name></expr></argument>, <argument pos:start="127:50" pos:end="127:57"><expr pos:start="127:50" pos:end="127:57"><name pos:start="127:50" pos:end="127:57">LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:49">/* Generate a ISP vector for each subframe */</comment>

    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:25">(<expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:11">ctx</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:24">first_frame</name></name></expr>)</condition> <block pos:start="133:27" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:75">

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:11">ctx</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:24">first_frame</name></name> <operator pos:start="135:26" pos:end="135:26">=</operator> <literal type="number" pos:start="135:28" pos:end="135:28">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:75"><expr pos:start="137:9" pos:end="137:74"><call pos:start="137:9" pos:end="137:74"><name pos:start="137:9" pos:end="137:14">memcpy</name><argument_list pos:start="137:15" pos:end="137:74">(<argument pos:start="137:16" pos:end="137:33"><expr pos:start="137:16" pos:end="137:33"><name pos:start="137:16" pos:end="137:33"><name pos:start="137:16" pos:end="137:18">ctx</name><operator pos:start="137:19" pos:end="137:20">-&gt;</operator><name pos:start="137:21" pos:end="137:33">isp_sub4_past</name></name></expr></argument>, <argument pos:start="137:36" pos:end="137:46"><expr pos:start="137:36" pos:end="137:46"><name pos:start="137:36" pos:end="137:46"><name pos:start="137:36" pos:end="137:38">ctx</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:43">isp</name><index pos:start="137:44" pos:end="137:46">[<expr pos:start="137:45" pos:end="137:45"><literal type="number" pos:start="137:45" pos:end="137:45">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:49" pos:end="137:73"><expr pos:start="137:49" pos:end="137:73"><name pos:start="137:49" pos:end="137:56">LP_ORDER</name> <operator pos:start="137:58" pos:end="137:58">*</operator> <sizeof pos:start="137:60" pos:end="137:73">sizeof<argument_list pos:start="137:66" pos:end="137:73">(<argument pos:start="137:67" pos:end="137:72"><expr pos:start="137:67" pos:end="137:72"><name pos:start="137:67" pos:end="137:72">double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:50"><expr pos:start="141:5" pos:end="141:49"><call pos:start="141:5" pos:end="141:49"><name pos:start="141:5" pos:end="141:19">interpolate_isp</name><argument_list pos:start="141:20" pos:end="141:49">(<argument pos:start="141:21" pos:end="141:28"><expr pos:start="141:21" pos:end="141:28"><name pos:start="141:21" pos:end="141:28"><name pos:start="141:21" pos:end="141:23">ctx</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:28">isp</name></name></expr></argument>, <argument pos:start="141:31" pos:end="141:48"><expr pos:start="141:31" pos:end="141:48"><name pos:start="141:31" pos:end="141:48"><name pos:start="141:31" pos:end="141:33">ctx</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:48">isp_sub4_past</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="145:5" pos:end="147:69">for <control pos:start="145:9" pos:end="145:33">(<init pos:start="145:10" pos:end="145:17"><expr pos:start="145:10" pos:end="145:16"><name pos:start="145:10" pos:end="145:12">sub</name> <operator pos:start="145:14" pos:end="145:14">=</operator> <literal type="number" pos:start="145:16" pos:end="145:16">0</literal></expr>;</init> <condition pos:start="145:19" pos:end="145:26"><expr pos:start="145:19" pos:end="145:25"><name pos:start="145:19" pos:end="145:21">sub</name> <operator pos:start="145:23" pos:end="145:23">&lt;</operator> <literal type="number" pos:start="145:25" pos:end="145:25">4</literal></expr>;</condition> <incr pos:start="145:28" pos:end="145:32"><expr pos:start="145:28" pos:end="145:32"><name pos:start="145:28" pos:end="145:30">sub</name><operator pos:start="145:31" pos:end="145:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="147:9" pos:end="147:69"><block_content pos:start="147:9" pos:end="147:69">

        <expr_stmt pos:start="147:9" pos:end="147:69"><expr pos:start="147:9" pos:end="147:68"><call pos:start="147:9" pos:end="147:68"><name pos:start="147:9" pos:end="147:24">ff_amrwb_lsp2lpc</name><argument_list pos:start="147:25" pos:end="147:68">(<argument pos:start="147:26" pos:end="147:38"><expr pos:start="147:26" pos:end="147:38"><name pos:start="147:26" pos:end="147:38"><name pos:start="147:26" pos:end="147:28">ctx</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:33">isp</name><index pos:start="147:34" pos:end="147:38">[<expr pos:start="147:35" pos:end="147:37"><name pos:start="147:35" pos:end="147:37">sub</name></expr>]</index></name></expr></argument>, <argument pos:start="147:41" pos:end="147:57"><expr pos:start="147:41" pos:end="147:57"><name pos:start="147:41" pos:end="147:57"><name pos:start="147:41" pos:end="147:43">ctx</name><operator pos:start="147:44" pos:end="147:45">-&gt;</operator><name pos:start="147:46" pos:end="147:52">lp_coef</name><index pos:start="147:53" pos:end="147:57">[<expr pos:start="147:54" pos:end="147:56"><name pos:start="147:54" pos:end="147:56">sub</name></expr>]</index></name></expr></argument>, <argument pos:start="147:60" pos:end="147:67"><expr pos:start="147:60" pos:end="147:67"><name pos:start="147:60" pos:end="147:67">LP_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="151:5" pos:end="319:5">for <control pos:start="151:9" pos:end="151:33">(<init pos:start="151:10" pos:end="151:17"><expr pos:start="151:10" pos:end="151:16"><name pos:start="151:10" pos:end="151:12">sub</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <literal type="number" pos:start="151:16" pos:end="151:16">0</literal></expr>;</init> <condition pos:start="151:19" pos:end="151:26"><expr pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:21">sub</name> <operator pos:start="151:23" pos:end="151:23">&lt;</operator> <literal type="number" pos:start="151:25" pos:end="151:25">4</literal></expr>;</condition> <incr pos:start="151:28" pos:end="151:32"><expr pos:start="151:28" pos:end="151:32"><name pos:start="151:28" pos:end="151:30">sub</name><operator pos:start="151:31" pos:end="151:32">++</operator></expr></incr>)</control> <block pos:start="151:35" pos:end="319:5">{<block_content pos:start="153:9" pos:end="317:30">

        <decl_stmt pos:start="153:9" pos:end="153:63"><decl pos:start="153:9" pos:end="153:62"><type pos:start="153:9" pos:end="153:29"><specifier pos:start="153:9" pos:end="153:13">const</specifier> <name pos:start="153:15" pos:end="153:27">AMRWBSubFrame</name> <modifier pos:start="153:29" pos:end="153:29">*</modifier></type><name pos:start="153:30" pos:end="153:41">cur_subframe</name> <init pos:start="153:43" pos:end="153:62">= <expr pos:start="153:45" pos:end="153:62"><operator pos:start="153:45" pos:end="153:45">&amp;</operator><name pos:start="153:46" pos:end="153:62"><name pos:start="153:46" pos:end="153:47">cf</name><operator pos:start="153:48" pos:end="153:49">-&gt;</operator><name pos:start="153:50" pos:end="153:57">subframe</name><index pos:start="153:58" pos:end="153:62">[<expr pos:start="153:59" pos:end="153:61"><name pos:start="153:59" pos:end="153:61">sub</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="155:9" pos:end="155:60"><decl pos:start="155:9" pos:end="155:59"><type pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:13">float</name> <modifier pos:start="155:15" pos:end="155:15">*</modifier></type><name pos:start="155:16" pos:end="155:22">sub_buf</name> <init pos:start="155:24" pos:end="155:59">= <expr pos:start="155:26" pos:end="155:59"><name pos:start="155:26" pos:end="155:32">buf_out</name> <operator pos:start="155:34" pos:end="155:34">+</operator> <name pos:start="155:36" pos:end="155:38">sub</name> <operator pos:start="155:40" pos:end="155:40">*</operator> <name pos:start="155:42" pos:end="155:59">AMRWB_SFR_SIZE_16k</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:53">/* Decode adaptive codebook (pitch vector) */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:52"><expr pos:start="161:9" pos:end="161:51"><call pos:start="161:9" pos:end="161:51"><name pos:start="161:9" pos:end="161:27">decode_pitch_vector</name><argument_list pos:start="161:28" pos:end="161:51">(<argument pos:start="161:29" pos:end="161:31"><expr pos:start="161:29" pos:end="161:31"><name pos:start="161:29" pos:end="161:31">ctx</name></expr></argument>, <argument pos:start="161:34" pos:end="161:45"><expr pos:start="161:34" pos:end="161:45"><name pos:start="161:34" pos:end="161:45">cur_subframe</name></expr></argument>, <argument pos:start="161:48" pos:end="161:50"><expr pos:start="161:48" pos:end="161:50"><name pos:start="161:48" pos:end="161:50">sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="163:9" pos:end="163:55">/* Decode innovative codebook (fixed vector) */</comment>

        <expr_stmt pos:start="165:9" pos:end="167:68"><expr pos:start="165:9" pos:end="167:67"><call pos:start="165:9" pos:end="167:67"><name pos:start="165:9" pos:end="165:27">decode_fixed_vector</name><argument_list pos:start="165:28" pos:end="167:67">(<argument pos:start="165:29" pos:end="165:45"><expr pos:start="165:29" pos:end="165:45"><name pos:start="165:29" pos:end="165:45"><name pos:start="165:29" pos:end="165:31">ctx</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:45">fixed_vector</name></name></expr></argument>, <argument pos:start="165:48" pos:end="165:67"><expr pos:start="165:48" pos:end="165:67"><name pos:start="165:48" pos:end="165:67"><name pos:start="165:48" pos:end="165:59">cur_subframe</name><operator pos:start="165:60" pos:end="165:61">-&gt;</operator><name pos:start="165:62" pos:end="165:67">pul_ih</name></name></expr></argument>,

                            <argument pos:start="167:29" pos:end="167:48"><expr pos:start="167:29" pos:end="167:48"><name pos:start="167:29" pos:end="167:48"><name pos:start="167:29" pos:end="167:40">cur_subframe</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:48">pul_il</name></name></expr></argument>, <argument pos:start="167:51" pos:end="167:66"><expr pos:start="167:51" pos:end="167:66"><name pos:start="167:51" pos:end="167:66"><name pos:start="167:51" pos:end="167:53">ctx</name><operator pos:start="167:54" pos:end="167:55">-&gt;</operator><name pos:start="167:56" pos:end="167:66">fr_cur_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><call pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:24">pitch_sharpening</name><argument_list pos:start="171:25" pos:end="171:48">(<argument pos:start="171:26" pos:end="171:28"><expr pos:start="171:26" pos:end="171:28"><name pos:start="171:26" pos:end="171:28">ctx</name></expr></argument>, <argument pos:start="171:31" pos:end="171:47"><expr pos:start="171:31" pos:end="171:47"><name pos:start="171:31" pos:end="171:47"><name pos:start="171:31" pos:end="171:33">ctx</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:47">fixed_vector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="177:62"><expr pos:start="175:9" pos:end="177:61"><call pos:start="175:9" pos:end="177:61"><name pos:start="175:9" pos:end="175:20">decode_gains</name><argument_list pos:start="175:21" pos:end="177:61">(<argument pos:start="175:22" pos:end="175:42"><expr pos:start="175:22" pos:end="175:42"><name pos:start="175:22" pos:end="175:42"><name pos:start="175:22" pos:end="175:33">cur_subframe</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:42">vq_gain</name></name></expr></argument>, <argument pos:start="175:45" pos:end="175:60"><expr pos:start="175:45" pos:end="175:60"><name pos:start="175:45" pos:end="175:60"><name pos:start="175:45" pos:end="175:47">ctx</name><operator pos:start="175:48" pos:end="175:49">-&gt;</operator><name pos:start="175:50" pos:end="175:60">fr_cur_mode</name></name></expr></argument>,

                     <argument pos:start="177:22" pos:end="177:39"><expr pos:start="177:22" pos:end="177:39"><operator pos:start="177:22" pos:end="177:22">&amp;</operator><name pos:start="177:23" pos:end="177:39">fixed_gain_factor</name></expr></argument>, <argument pos:start="177:42" pos:end="177:60"><expr pos:start="177:42" pos:end="177:60"><operator pos:start="177:42" pos:end="177:42">&amp;</operator><name pos:start="177:43" pos:end="177:60"><name pos:start="177:43" pos:end="177:45">ctx</name><operator pos:start="177:46" pos:end="177:47">-&gt;</operator><name pos:start="177:48" pos:end="177:57">pitch_gain</name><index pos:start="177:58" pos:end="177:60">[<expr pos:start="177:59" pos:end="177:59"><literal type="number" pos:start="177:59" pos:end="177:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="191:53"><expr pos:start="181:9" pos:end="191:52"><name pos:start="181:9" pos:end="181:26"><name pos:start="181:9" pos:end="181:11">ctx</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:23">fixed_gain</name><index pos:start="181:24" pos:end="181:26">[<expr pos:start="181:25" pos:end="181:25"><literal type="number" pos:start="181:25" pos:end="181:25">0</literal></expr>]</index></name> <operator pos:start="181:28" pos:end="181:28">=</operator>

            <call pos:start="183:13" pos:end="191:52"><name pos:start="183:13" pos:end="183:33">ff_amr_set_fixed_gain</name><argument_list pos:start="183:34" pos:end="191:52">(<argument pos:start="183:35" pos:end="183:51"><expr pos:start="183:35" pos:end="183:51"><name pos:start="183:35" pos:end="183:51">fixed_gain_factor</name></expr></argument>,

                       <argument pos:start="185:24" pos:end="187:71"><expr pos:start="185:24" pos:end="187:71"><call pos:start="185:24" pos:end="187:54"><name pos:start="185:24" pos:end="185:38">ff_dot_productf</name><argument_list pos:start="185:39" pos:end="187:54">(<argument pos:start="185:40" pos:end="185:56"><expr pos:start="185:40" pos:end="185:56"><name pos:start="185:40" pos:end="185:56"><name pos:start="185:40" pos:end="185:42">ctx</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:56">fixed_vector</name></name></expr></argument>, <argument pos:start="185:59" pos:end="185:75"><expr pos:start="185:59" pos:end="185:75"><name pos:start="185:59" pos:end="185:75"><name pos:start="185:59" pos:end="185:61">ctx</name><operator pos:start="185:62" pos:end="185:63">-&gt;</operator><name pos:start="185:64" pos:end="185:75">fixed_vector</name></name></expr></argument>,

                                       <argument pos:start="187:40" pos:end="187:53"><expr pos:start="187:40" pos:end="187:53"><name pos:start="187:40" pos:end="187:53">AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="187:56" pos:end="187:56">/</operator> <name pos:start="187:58" pos:end="187:71">AMRWB_SFR_SIZE</name></expr></argument>,

                       <argument pos:start="189:24" pos:end="189:44"><expr pos:start="189:24" pos:end="189:44"><name pos:start="189:24" pos:end="189:44"><name pos:start="189:24" pos:end="189:26">ctx</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:44">prediction_error</name></name></expr></argument>,

                       <argument pos:start="191:24" pos:end="191:34"><expr pos:start="191:24" pos:end="191:34"><name pos:start="191:24" pos:end="191:34">ENERGY_MEAN</name></expr></argument>, <argument pos:start="191:37" pos:end="191:51"><expr pos:start="191:37" pos:end="191:51"><name pos:start="191:37" pos:end="191:51">energy_pred_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="195:9" pos:end="195:69">/* Calculate voice factor and store tilt for next subframe */</comment>

        <expr_stmt pos:start="197:9" pos:end="199:77"><expr pos:start="197:9" pos:end="199:76"><name pos:start="197:9" pos:end="197:17">voice_fac</name>      <operator pos:start="197:24" pos:end="197:24">=</operator> <call pos:start="197:26" pos:end="199:76"><name pos:start="197:26" pos:end="197:37">voice_factor</name><argument_list pos:start="197:38" pos:end="199:76">(<argument pos:start="197:39" pos:end="197:55"><expr pos:start="197:39" pos:end="197:55"><name pos:start="197:39" pos:end="197:55"><name pos:start="197:39" pos:end="197:41">ctx</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:55">pitch_vector</name></name></expr></argument>, <argument pos:start="197:58" pos:end="197:75"><expr pos:start="197:58" pos:end="197:75"><name pos:start="197:58" pos:end="197:75"><name pos:start="197:58" pos:end="197:60">ctx</name><operator pos:start="197:61" pos:end="197:62">-&gt;</operator><name pos:start="197:63" pos:end="197:72">pitch_gain</name><index pos:start="197:73" pos:end="197:75">[<expr pos:start="197:74" pos:end="197:74"><literal type="number" pos:start="197:74" pos:end="197:74">0</literal></expr>]</index></name></expr></argument>,

                                      <argument pos:start="199:39" pos:end="199:55"><expr pos:start="199:39" pos:end="199:55"><name pos:start="199:39" pos:end="199:55"><name pos:start="199:39" pos:end="199:41">ctx</name><operator pos:start="199:42" pos:end="199:43">-&gt;</operator><name pos:start="199:44" pos:end="199:55">fixed_vector</name></name></expr></argument>, <argument pos:start="199:58" pos:end="199:75"><expr pos:start="199:58" pos:end="199:75"><name pos:start="199:58" pos:end="199:75"><name pos:start="199:58" pos:end="199:60">ctx</name><operator pos:start="199:61" pos:end="199:62">-&gt;</operator><name pos:start="199:63" pos:end="199:72">fixed_gain</name><index pos:start="199:73" pos:end="199:75">[<expr pos:start="199:74" pos:end="199:74"><literal type="number" pos:start="199:74" pos:end="199:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:49"><expr pos:start="201:9" pos:end="201:48"><name pos:start="201:9" pos:end="201:22"><name pos:start="201:9" pos:end="201:11">ctx</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:22">tilt_coef</name></name> <operator pos:start="201:24" pos:end="201:24">=</operator> <name pos:start="201:26" pos:end="201:34">voice_fac</name> <operator pos:start="201:36" pos:end="201:36">*</operator> <literal type="number" pos:start="201:38" pos:end="201:43">0.25</literal> <operator pos:start="201:43" pos:end="201:43">+</operator> <literal type="number" pos:start="201:45" pos:end="201:48">0.25</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="205:9" pos:end="205:42">/* Construct current excitation */</comment>

        <for pos:start="207:9" pos:end="215:9">for <control pos:start="207:13" pos:end="207:44">(<init pos:start="207:14" pos:end="207:19"><expr pos:start="207:14" pos:end="207:18"><name pos:start="207:14" pos:end="207:14">i</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <literal type="number" pos:start="207:18" pos:end="207:18">0</literal></expr>;</init> <condition pos:start="207:21" pos:end="207:39"><expr pos:start="207:21" pos:end="207:38"><name pos:start="207:21" pos:end="207:21">i</name> <operator pos:start="207:23" pos:end="207:23">&lt;</operator> <name pos:start="207:25" pos:end="207:38">AMRWB_SFR_SIZE</name></expr>;</condition> <incr pos:start="207:41" pos:end="207:43"><expr pos:start="207:41" pos:end="207:43"><name pos:start="207:41" pos:end="207:41">i</name><operator pos:start="207:42" pos:end="207:43">++</operator></expr></incr>)</control> <block pos:start="207:46" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:60">

            <expr_stmt pos:start="209:13" pos:end="209:53"><expr pos:start="209:13" pos:end="209:52"><name pos:start="209:13" pos:end="209:30"><name pos:start="209:13" pos:end="209:15">ctx</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:27">excitation</name><index pos:start="209:28" pos:end="209:30">[<expr pos:start="209:29" pos:end="209:29"><name pos:start="209:29" pos:end="209:29">i</name></expr>]</index></name> <operator pos:start="209:32" pos:end="209:33">*=</operator> <name pos:start="209:35" pos:end="209:52"><name pos:start="209:35" pos:end="209:37">ctx</name><operator pos:start="209:38" pos:end="209:39">-&gt;</operator><name pos:start="209:40" pos:end="209:49">pitch_gain</name><index pos:start="209:50" pos:end="209:52">[<expr pos:start="209:51" pos:end="209:51"><literal type="number" pos:start="209:51" pos:end="209:51">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:76"><expr pos:start="211:13" pos:end="211:75"><name pos:start="211:13" pos:end="211:30"><name pos:start="211:13" pos:end="211:15">ctx</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:27">excitation</name><index pos:start="211:28" pos:end="211:30">[<expr pos:start="211:29" pos:end="211:29"><name pos:start="211:29" pos:end="211:29">i</name></expr>]</index></name> <operator pos:start="211:32" pos:end="211:33">+=</operator> <name pos:start="211:35" pos:end="211:52"><name pos:start="211:35" pos:end="211:37">ctx</name><operator pos:start="211:38" pos:end="211:39">-&gt;</operator><name pos:start="211:40" pos:end="211:49">fixed_gain</name><index pos:start="211:50" pos:end="211:52">[<expr pos:start="211:51" pos:end="211:51"><literal type="number" pos:start="211:51" pos:end="211:51">0</literal></expr>]</index></name> <operator pos:start="211:54" pos:end="211:54">*</operator> <name pos:start="211:56" pos:end="211:75"><name pos:start="211:56" pos:end="211:58">ctx</name><operator pos:start="211:59" pos:end="211:60">-&gt;</operator><name pos:start="211:61" pos:end="211:72">fixed_vector</name><index pos:start="211:73" pos:end="211:75">[<expr pos:start="211:74" pos:end="211:74"><name pos:start="211:74" pos:end="211:74">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:60"><expr pos:start="213:13" pos:end="213:59"><name pos:start="213:13" pos:end="213:30"><name pos:start="213:13" pos:end="213:15">ctx</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:27">excitation</name><index pos:start="213:28" pos:end="213:30">[<expr pos:start="213:29" pos:end="213:29"><name pos:start="213:29" pos:end="213:29">i</name></expr>]</index></name> <operator pos:start="213:32" pos:end="213:32">=</operator> <call pos:start="213:34" pos:end="213:59"><name pos:start="213:34" pos:end="213:39">truncf</name><argument_list pos:start="213:40" pos:end="213:59">(<argument pos:start="213:41" pos:end="213:58"><expr pos:start="213:41" pos:end="213:58"><name pos:start="213:41" pos:end="213:58"><name pos:start="213:41" pos:end="213:43">ctx</name><operator pos:start="213:44" pos:end="213:45">-&gt;</operator><name pos:start="213:46" pos:end="213:55">excitation</name><index pos:start="213:56" pos:end="213:58">[<expr pos:start="213:57" pos:end="213:57"><name pos:start="213:57" pos:end="213:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="219:9" pos:end="219:52">/* Post-processing of excitation elements */</comment>

        <expr_stmt pos:start="221:9" pos:end="223:63"><expr pos:start="221:9" pos:end="223:62"><name pos:start="221:9" pos:end="221:24">synth_fixed_gain</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <call pos:start="221:28" pos:end="223:62"><name pos:start="221:28" pos:end="221:41">noise_enhancer</name><argument_list pos:start="221:42" pos:end="223:62">(<argument pos:start="221:43" pos:end="221:60"><expr pos:start="221:43" pos:end="221:60"><name pos:start="221:43" pos:end="221:60"><name pos:start="221:43" pos:end="221:45">ctx</name><operator pos:start="221:46" pos:end="221:47">-&gt;</operator><name pos:start="221:48" pos:end="221:57">fixed_gain</name><index pos:start="221:58" pos:end="221:60">[<expr pos:start="221:59" pos:end="221:59"><literal type="number" pos:start="221:59" pos:end="221:59">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="221:63" pos:end="221:80"><expr pos:start="221:63" pos:end="221:80"><operator pos:start="221:63" pos:end="221:63">&amp;</operator><name pos:start="221:64" pos:end="221:80"><name pos:start="221:64" pos:end="221:66">ctx</name><operator pos:start="221:67" pos:end="221:68">-&gt;</operator><name pos:start="221:69" pos:end="221:80">prev_tr_gain</name></name></expr></argument>,

                                          <argument pos:start="223:43" pos:end="223:51"><expr pos:start="223:43" pos:end="223:51"><name pos:start="223:43" pos:end="223:51">voice_fac</name></expr></argument>, <argument pos:start="223:54" pos:end="223:61"><expr pos:start="223:54" pos:end="223:61"><name pos:start="223:54" pos:end="223:61">stab_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="227:9" pos:end="229:59"><expr pos:start="227:9" pos:end="229:58"><name pos:start="227:9" pos:end="227:26">synth_fixed_vector</name> <operator pos:start="227:28" pos:end="227:28">=</operator> <call pos:start="227:30" pos:end="229:58"><name pos:start="227:30" pos:end="227:44">anti_sparseness</name><argument_list pos:start="227:45" pos:end="229:58">(<argument pos:start="227:46" pos:end="227:48"><expr pos:start="227:46" pos:end="227:48"><name pos:start="227:46" pos:end="227:48">ctx</name></expr></argument>, <argument pos:start="227:51" pos:end="227:67"><expr pos:start="227:51" pos:end="227:67"><name pos:start="227:51" pos:end="227:67"><name pos:start="227:51" pos:end="227:53">ctx</name><operator pos:start="227:54" pos:end="227:55">-&gt;</operator><name pos:start="227:56" pos:end="227:67">fixed_vector</name></name></expr></argument>,

                                             <argument pos:start="229:46" pos:end="229:57"><expr pos:start="229:46" pos:end="229:57"><name pos:start="229:46" pos:end="229:57">spare_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="233:9" pos:end="233:54"><expr pos:start="233:9" pos:end="233:53"><call pos:start="233:9" pos:end="233:53"><name pos:start="233:9" pos:end="233:22">pitch_enhancer</name><argument_list pos:start="233:23" pos:end="233:53">(<argument pos:start="233:24" pos:end="233:41"><expr pos:start="233:24" pos:end="233:41"><name pos:start="233:24" pos:end="233:41">synth_fixed_vector</name></expr></argument>, <argument pos:start="233:44" pos:end="233:52"><expr pos:start="233:44" pos:end="233:52"><name pos:start="233:44" pos:end="233:52">voice_fac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="237:9" pos:end="239:66"><expr pos:start="237:9" pos:end="239:65"><call pos:start="237:9" pos:end="239:65"><name pos:start="237:9" pos:end="237:17">synthesis</name><argument_list pos:start="237:18" pos:end="239:65">(<argument pos:start="237:19" pos:end="237:21"><expr pos:start="237:19" pos:end="237:21"><name pos:start="237:19" pos:end="237:21">ctx</name></expr></argument>, <argument pos:start="237:24" pos:end="237:40"><expr pos:start="237:24" pos:end="237:40"><name pos:start="237:24" pos:end="237:40"><name pos:start="237:24" pos:end="237:26">ctx</name><operator pos:start="237:27" pos:end="237:28">-&gt;</operator><name pos:start="237:29" pos:end="237:35">lp_coef</name><index pos:start="237:36" pos:end="237:40">[<expr pos:start="237:37" pos:end="237:39"><name pos:start="237:37" pos:end="237:39">sub</name></expr>]</index></name></expr></argument>, <argument pos:start="237:43" pos:end="237:51"><expr pos:start="237:43" pos:end="237:51"><name pos:start="237:43" pos:end="237:51">synth_exc</name></expr></argument>, <argument pos:start="237:54" pos:end="237:69"><expr pos:start="237:54" pos:end="237:69"><name pos:start="237:54" pos:end="237:69">synth_fixed_gain</name></expr></argument>,

                  <argument pos:start="239:19" pos:end="239:36"><expr pos:start="239:19" pos:end="239:36"><name pos:start="239:19" pos:end="239:36">synth_fixed_vector</name></expr></argument>, <argument pos:start="239:39" pos:end="239:64"><expr pos:start="239:39" pos:end="239:64"><operator pos:start="239:39" pos:end="239:39">&amp;</operator><name pos:start="239:40" pos:end="239:64"><name pos:start="239:40" pos:end="239:42">ctx</name><operator pos:start="239:43" pos:end="239:44">-&gt;</operator><name pos:start="239:45" pos:end="239:54">samples_az</name><index pos:start="239:55" pos:end="239:64">[<expr pos:start="239:56" pos:end="239:63"><name pos:start="239:56" pos:end="239:63">LP_ORDER</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="243:9" pos:end="243:46">/* Synthesis speech post-processing */</comment>

        <expr_stmt pos:start="245:9" pos:end="247:77"><expr pos:start="245:9" pos:end="247:76"><call pos:start="245:9" pos:end="247:76"><name pos:start="245:9" pos:end="245:19">de_emphasis</name><argument_list pos:start="245:20" pos:end="247:76">(<argument pos:start="245:21" pos:end="245:50"><expr pos:start="245:21" pos:end="245:50"><operator pos:start="245:21" pos:end="245:21">&amp;</operator><name pos:start="245:22" pos:end="245:50"><name pos:start="245:22" pos:end="245:24">ctx</name><operator pos:start="245:25" pos:end="245:26">-&gt;</operator><name pos:start="245:27" pos:end="245:36">samples_up</name><index pos:start="245:37" pos:end="245:50">[<expr pos:start="245:38" pos:end="245:49"><name pos:start="245:38" pos:end="245:49">UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="247:21" pos:end="247:46"><expr pos:start="247:21" pos:end="247:46"><operator pos:start="247:21" pos:end="247:21">&amp;</operator><name pos:start="247:22" pos:end="247:46"><name pos:start="247:22" pos:end="247:24">ctx</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:36">samples_az</name><index pos:start="247:37" pos:end="247:46">[<expr pos:start="247:38" pos:end="247:45"><name pos:start="247:38" pos:end="247:45">LP_ORDER</name></expr>]</index></name></expr></argument>, <argument pos:start="247:49" pos:end="247:59"><expr pos:start="247:49" pos:end="247:59"><name pos:start="247:49" pos:end="247:59">PREEMPH_FAC</name></expr></argument>, <argument pos:start="247:62" pos:end="247:75"><expr pos:start="247:62" pos:end="247:75"><name pos:start="247:62" pos:end="247:75"><name pos:start="247:62" pos:end="247:64">ctx</name><operator pos:start="247:65" pos:end="247:66">-&gt;</operator><name pos:start="247:67" pos:end="247:75">demph_mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="251:9" pos:end="255:58"><expr pos:start="251:9" pos:end="255:57"><call pos:start="251:9" pos:end="255:57"><name pos:start="251:9" pos:end="251:48">ff_acelp_apply_order_2_transfer_function</name><argument_list pos:start="251:49" pos:end="255:57">(<argument pos:start="251:50" pos:end="251:79"><expr pos:start="251:50" pos:end="251:79"><operator pos:start="251:50" pos:end="251:50">&amp;</operator><name pos:start="251:51" pos:end="251:79"><name pos:start="251:51" pos:end="251:53">ctx</name><operator pos:start="251:54" pos:end="251:55">-&gt;</operator><name pos:start="251:56" pos:end="251:65">samples_up</name><index pos:start="251:66" pos:end="251:79">[<expr pos:start="251:67" pos:end="251:78"><name pos:start="251:67" pos:end="251:78">UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>,

            <argument pos:start="253:13" pos:end="253:42"><expr pos:start="253:13" pos:end="253:42"><operator pos:start="253:13" pos:end="253:13">&amp;</operator><name pos:start="253:14" pos:end="253:42"><name pos:start="253:14" pos:end="253:16">ctx</name><operator pos:start="253:17" pos:end="253:18">-&gt;</operator><name pos:start="253:19" pos:end="253:28">samples_up</name><index pos:start="253:29" pos:end="253:42">[<expr pos:start="253:30" pos:end="253:41"><name pos:start="253:30" pos:end="253:41">UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>, <argument pos:start="253:45" pos:end="253:53"><expr pos:start="253:45" pos:end="253:53"><name pos:start="253:45" pos:end="253:53">hpf_zeros</name></expr></argument>, <argument pos:start="253:56" pos:end="253:67"><expr pos:start="253:56" pos:end="253:67"><name pos:start="253:56" pos:end="253:67">hpf_31_poles</name></expr></argument>,

            <argument pos:start="255:13" pos:end="255:23"><expr pos:start="255:13" pos:end="255:23"><name pos:start="255:13" pos:end="255:23">hpf_31_gain</name></expr></argument>, <argument pos:start="255:26" pos:end="255:40"><expr pos:start="255:26" pos:end="255:40"><name pos:start="255:26" pos:end="255:40"><name pos:start="255:26" pos:end="255:28">ctx</name><operator pos:start="255:29" pos:end="255:30">-&gt;</operator><name pos:start="255:31" pos:end="255:40">hpf_31_mem</name></name></expr></argument>, <argument pos:start="255:43" pos:end="255:56"><expr pos:start="255:43" pos:end="255:56"><name pos:start="255:43" pos:end="255:56">AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="259:9" pos:end="261:41"><expr pos:start="259:9" pos:end="261:40"><call pos:start="259:9" pos:end="261:40"><name pos:start="259:9" pos:end="259:20">upsample_5_4</name><argument_list pos:start="259:21" pos:end="261:40">(<argument pos:start="259:22" pos:end="259:28"><expr pos:start="259:22" pos:end="259:28"><name pos:start="259:22" pos:end="259:28">sub_buf</name></expr></argument>, <argument pos:start="259:31" pos:end="259:60"><expr pos:start="259:31" pos:end="259:60"><operator pos:start="259:31" pos:end="259:31">&amp;</operator><name pos:start="259:32" pos:end="259:60"><name pos:start="259:32" pos:end="259:34">ctx</name><operator pos:start="259:35" pos:end="259:36">-&gt;</operator><name pos:start="259:37" pos:end="259:46">samples_up</name><index pos:start="259:47" pos:end="259:60">[<expr pos:start="259:48" pos:end="259:59"><name pos:start="259:48" pos:end="259:59">UPS_FIR_SIZE</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="261:22" pos:end="261:39"><expr pos:start="261:22" pos:end="261:39"><name pos:start="261:22" pos:end="261:39">AMRWB_SFR_SIZE_16k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="265:9" pos:end="265:65">/* High frequency band (6.4 - 7.0 kHz) generation part */</comment>

        <expr_stmt pos:start="267:9" pos:end="271:60"><expr pos:start="267:9" pos:end="271:59"><call pos:start="267:9" pos:end="271:59"><name pos:start="267:9" pos:end="267:48">ff_acelp_apply_order_2_transfer_function</name><argument_list pos:start="267:49" pos:end="271:59">(<argument pos:start="267:50" pos:end="267:59"><expr pos:start="267:50" pos:end="267:59"><name pos:start="267:50" pos:end="267:59">hb_samples</name></expr></argument>,

            <argument pos:start="269:13" pos:end="269:42"><expr pos:start="269:13" pos:end="269:42"><operator pos:start="269:13" pos:end="269:13">&amp;</operator><name pos:start="269:14" pos:end="269:42"><name pos:start="269:14" pos:end="269:16">ctx</name><operator pos:start="269:17" pos:end="269:18">-&gt;</operator><name pos:start="269:19" pos:end="269:28">samples_up</name><index pos:start="269:29" pos:end="269:42">[<expr pos:start="269:30" pos:end="269:41"><name pos:start="269:30" pos:end="269:41">UPS_MEM_SIZE</name></expr>]</index></name></expr></argument>, <argument pos:start="269:45" pos:end="269:53"><expr pos:start="269:45" pos:end="269:53"><name pos:start="269:45" pos:end="269:53">hpf_zeros</name></expr></argument>, <argument pos:start="269:56" pos:end="269:68"><expr pos:start="269:56" pos:end="269:68"><name pos:start="269:56" pos:end="269:68">hpf_400_poles</name></expr></argument>,

            <argument pos:start="271:13" pos:end="271:24"><expr pos:start="271:13" pos:end="271:24"><name pos:start="271:13" pos:end="271:24">hpf_400_gain</name></expr></argument>, <argument pos:start="271:27" pos:end="271:42"><expr pos:start="271:27" pos:end="271:42"><name pos:start="271:27" pos:end="271:42"><name pos:start="271:27" pos:end="271:29">ctx</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:42">hpf_400_mem</name></name></expr></argument>, <argument pos:start="271:45" pos:end="271:58"><expr pos:start="271:45" pos:end="271:58"><name pos:start="271:45" pos:end="271:58">AMRWB_SFR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="275:9" pos:end="277:63"><expr pos:start="275:9" pos:end="277:62"><name pos:start="275:9" pos:end="275:15">hb_gain</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <call pos:start="275:19" pos:end="277:62"><name pos:start="275:19" pos:end="275:30">find_hb_gain</name><argument_list pos:start="275:31" pos:end="277:62">(<argument pos:start="275:32" pos:end="275:34"><expr pos:start="275:32" pos:end="275:34"><name pos:start="275:32" pos:end="275:34">ctx</name></expr></argument>, <argument pos:start="275:37" pos:end="275:46"><expr pos:start="275:37" pos:end="275:46"><name pos:start="275:37" pos:end="275:46">hb_samples</name></expr></argument>,

                               <argument pos:start="277:32" pos:end="277:52"><expr pos:start="277:32" pos:end="277:52"><name pos:start="277:32" pos:end="277:52"><name pos:start="277:32" pos:end="277:43">cur_subframe</name><operator pos:start="277:44" pos:end="277:45">-&gt;</operator><name pos:start="277:46" pos:end="277:52">hb_gain</name></name></expr></argument>, <argument pos:start="277:55" pos:end="277:61"><expr pos:start="277:55" pos:end="277:61"><name pos:start="277:55" pos:end="277:61"><name pos:start="277:55" pos:end="277:56">cf</name><operator pos:start="277:57" pos:end="277:58">-&gt;</operator><name pos:start="277:59" pos:end="277:61">vad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="281:9" pos:end="281:62"><expr pos:start="281:9" pos:end="281:61"><call pos:start="281:9" pos:end="281:61"><name pos:start="281:9" pos:end="281:28">scaled_hb_excitation</name><argument_list pos:start="281:29" pos:end="281:61">(<argument pos:start="281:30" pos:end="281:32"><expr pos:start="281:30" pos:end="281:32"><name pos:start="281:30" pos:end="281:32">ctx</name></expr></argument>, <argument pos:start="281:35" pos:end="281:40"><expr pos:start="281:35" pos:end="281:40"><name pos:start="281:35" pos:end="281:40">hb_exc</name></expr></argument>, <argument pos:start="281:43" pos:end="281:51"><expr pos:start="281:43" pos:end="281:51"><name pos:start="281:43" pos:end="281:51">synth_exc</name></expr></argument>, <argument pos:start="281:54" pos:end="281:60"><expr pos:start="281:54" pos:end="281:60"><name pos:start="281:54" pos:end="281:60">hb_gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="285:9" pos:end="287:64"><expr pos:start="285:9" pos:end="287:63"><call pos:start="285:9" pos:end="287:63"><name pos:start="285:9" pos:end="285:20">hb_synthesis</name><argument_list pos:start="285:21" pos:end="287:63">(<argument pos:start="285:22" pos:end="285:24"><expr pos:start="285:22" pos:end="285:24"><name pos:start="285:22" pos:end="285:24">ctx</name></expr></argument>, <argument pos:start="285:27" pos:end="285:29"><expr pos:start="285:27" pos:end="285:29"><name pos:start="285:27" pos:end="285:29">sub</name></expr></argument>, <argument pos:start="285:32" pos:end="285:61"><expr pos:start="285:32" pos:end="285:61"><operator pos:start="285:32" pos:end="285:32">&amp;</operator><name pos:start="285:33" pos:end="285:61"><name pos:start="285:33" pos:end="285:35">ctx</name><operator pos:start="285:36" pos:end="285:37">-&gt;</operator><name pos:start="285:38" pos:end="285:47">samples_hb</name><index pos:start="285:48" pos:end="285:61">[<expr pos:start="285:49" pos:end="285:60"><name pos:start="285:49" pos:end="285:60">LP_ORDER_16k</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="287:22" pos:end="287:27"><expr pos:start="287:22" pos:end="287:27"><name pos:start="287:22" pos:end="287:27">hb_exc</name></expr></argument>, <argument pos:start="287:30" pos:end="287:41"><expr pos:start="287:30" pos:end="287:41"><name pos:start="287:30" pos:end="287:41"><name pos:start="287:30" pos:end="287:32">ctx</name><operator pos:start="287:33" pos:end="287:34">-&gt;</operator><name pos:start="287:35" pos:end="287:41">isf_cur</name></name></expr></argument>, <argument pos:start="287:44" pos:end="287:62"><expr pos:start="287:44" pos:end="287:62"><name pos:start="287:44" pos:end="287:62"><name pos:start="287:44" pos:end="287:46">ctx</name><operator pos:start="287:47" pos:end="287:48">-&gt;</operator><name pos:start="287:49" pos:end="287:62">isf_past_final</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="291:9" pos:end="291:47">/* High-band post-processing filters */</comment>

        <expr_stmt pos:start="293:9" pos:end="295:54"><expr pos:start="293:9" pos:end="295:53"><call pos:start="293:9" pos:end="295:53"><name pos:start="293:9" pos:end="293:21">hb_fir_filter</name><argument_list pos:start="293:22" pos:end="295:53">(<argument pos:start="293:23" pos:end="293:32"><expr pos:start="293:23" pos:end="293:32"><name pos:start="293:23" pos:end="293:32">hb_samples</name></expr></argument>, <argument pos:start="293:35" pos:end="293:46"><expr pos:start="293:35" pos:end="293:46"><name pos:start="293:35" pos:end="293:46">bpf_6_7_coef</name></expr></argument>, <argument pos:start="293:49" pos:end="293:64"><expr pos:start="293:49" pos:end="293:64"><name pos:start="293:49" pos:end="293:64"><name pos:start="293:49" pos:end="293:51">ctx</name><operator pos:start="293:52" pos:end="293:53">-&gt;</operator><name pos:start="293:54" pos:end="293:64">bpf_6_7_mem</name></name></expr></argument>,

                      <argument pos:start="295:23" pos:end="295:52"><expr pos:start="295:23" pos:end="295:52"><operator pos:start="295:23" pos:end="295:23">&amp;</operator><name pos:start="295:24" pos:end="295:52"><name pos:start="295:24" pos:end="295:26">ctx</name><operator pos:start="295:27" pos:end="295:28">-&gt;</operator><name pos:start="295:29" pos:end="295:38">samples_hb</name><index pos:start="295:39" pos:end="295:52">[<expr pos:start="295:40" pos:end="295:51"><name pos:start="295:40" pos:end="295:51">LP_ORDER_16k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="299:9" pos:end="303:38"><if pos:start="299:9" pos:end="303:38">if <condition pos:start="299:12" pos:end="299:43">(<expr pos:start="299:13" pos:end="299:42"><name pos:start="299:13" pos:end="299:28"><name pos:start="299:13" pos:end="299:15">ctx</name><operator pos:start="299:16" pos:end="299:17">-&gt;</operator><name pos:start="299:18" pos:end="299:28">fr_cur_mode</name></name> <operator pos:start="299:30" pos:end="299:31">==</operator> <name pos:start="299:33" pos:end="299:42">MODE_23k85</name></expr>)</condition><block type="pseudo" pos:start="301:13" pos:end="303:38"><block_content pos:start="301:13" pos:end="303:38">

            <expr_stmt pos:start="301:13" pos:end="303:38"><expr pos:start="301:13" pos:end="303:37"><call pos:start="301:13" pos:end="303:37"><name pos:start="301:13" pos:end="301:25">hb_fir_filter</name><argument_list pos:start="301:26" pos:end="303:37">(<argument pos:start="301:27" pos:end="301:36"><expr pos:start="301:27" pos:end="301:36"><name pos:start="301:27" pos:end="301:36">hb_samples</name></expr></argument>, <argument pos:start="301:39" pos:end="301:48"><expr pos:start="301:39" pos:end="301:48"><name pos:start="301:39" pos:end="301:48">lpf_7_coef</name></expr></argument>, <argument pos:start="301:51" pos:end="301:64"><expr pos:start="301:51" pos:end="301:64"><name pos:start="301:51" pos:end="301:64"><name pos:start="301:51" pos:end="301:53">ctx</name><operator pos:start="301:54" pos:end="301:55">-&gt;</operator><name pos:start="301:56" pos:end="301:64">lpf_7_mem</name></name></expr></argument>,

                          <argument pos:start="303:27" pos:end="303:36"><expr pos:start="303:27" pos:end="303:36"><name pos:start="303:27" pos:end="303:36">hb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="307:9" pos:end="307:50">/* Add the low and high frequency bands */</comment>

        <for pos:start="309:9" pos:end="311:75">for <control pos:start="309:13" pos:end="309:48">(<init pos:start="309:14" pos:end="309:19"><expr pos:start="309:14" pos:end="309:18"><name pos:start="309:14" pos:end="309:14">i</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <literal type="number" pos:start="309:18" pos:end="309:18">0</literal></expr>;</init> <condition pos:start="309:21" pos:end="309:43"><expr pos:start="309:21" pos:end="309:42"><name pos:start="309:21" pos:end="309:21">i</name> <operator pos:start="309:23" pos:end="309:23">&lt;</operator> <name pos:start="309:25" pos:end="309:42">AMRWB_SFR_SIZE_16k</name></expr>;</condition> <incr pos:start="309:45" pos:end="309:47"><expr pos:start="309:45" pos:end="309:47"><name pos:start="309:45" pos:end="309:45">i</name><operator pos:start="309:46" pos:end="309:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="311:13" pos:end="311:75"><block_content pos:start="311:13" pos:end="311:75">

            <expr_stmt pos:start="311:13" pos:end="311:75"><expr pos:start="311:13" pos:end="311:74"><name pos:start="311:13" pos:end="311:22"><name pos:start="311:13" pos:end="311:19">sub_buf</name><index pos:start="311:20" pos:end="311:22">[<expr pos:start="311:21" pos:end="311:21"><name pos:start="311:21" pos:end="311:21">i</name></expr>]</index></name> <operator pos:start="311:24" pos:end="311:24">=</operator> <operator pos:start="311:26" pos:end="311:26">(</operator><name pos:start="311:27" pos:end="311:36"><name pos:start="311:27" pos:end="311:33">sub_buf</name><index pos:start="311:34" pos:end="311:36">[<expr pos:start="311:35" pos:end="311:35"><name pos:start="311:35" pos:end="311:35">i</name></expr>]</index></name> <operator pos:start="311:38" pos:end="311:38">+</operator> <name pos:start="311:40" pos:end="311:52"><name pos:start="311:40" pos:end="311:49">hb_samples</name><index pos:start="311:50" pos:end="311:52">[<expr pos:start="311:51" pos:end="311:51"><name pos:start="311:51" pos:end="311:51">i</name></expr>]</index></name><operator pos:start="311:53" pos:end="311:53">)</operator> <operator pos:start="311:55" pos:end="311:55">*</operator> <operator pos:start="311:57" pos:end="311:57">(</operator><literal type="number" pos:start="311:58" pos:end="311:61">1.0f</literal> <operator pos:start="311:63" pos:end="311:63">/</operator> <operator pos:start="311:65" pos:end="311:65">(</operator><literal type="number" pos:start="311:66" pos:end="311:66">1</literal> <operator pos:start="311:68" pos:end="311:69">&lt;&lt;</operator> <literal type="number" pos:start="311:71" pos:end="311:72">15</literal><operator pos:start="311:73" pos:end="311:73">)</operator><operator pos:start="311:74" pos:end="311:74">)</operator></expr>;</expr_stmt></block_content></block></for>



        <comment type="block" pos:start="315:9" pos:end="315:40">/* Update buffers and history */</comment>

        <expr_stmt pos:start="317:9" pos:end="317:30"><expr pos:start="317:9" pos:end="317:29"><call pos:start="317:9" pos:end="317:29"><name pos:start="317:9" pos:end="317:24">update_sub_state</name><argument_list pos:start="317:25" pos:end="317:29">(<argument pos:start="317:26" pos:end="317:28"><expr pos:start="317:26" pos:end="317:28"><name pos:start="317:26" pos:end="317:28">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="323:5" pos:end="323:37">/* update state for next frame */</comment>

    <expr_stmt pos:start="325:5" pos:end="325:79"><expr pos:start="325:5" pos:end="325:78"><call pos:start="325:5" pos:end="325:78"><name pos:start="325:5" pos:end="325:10">memcpy</name><argument_list pos:start="325:11" pos:end="325:78">(<argument pos:start="325:12" pos:end="325:29"><expr pos:start="325:12" pos:end="325:29"><name pos:start="325:12" pos:end="325:29"><name pos:start="325:12" pos:end="325:14">ctx</name><operator pos:start="325:15" pos:end="325:16">-&gt;</operator><name pos:start="325:17" pos:end="325:29">isp_sub4_past</name></name></expr></argument>, <argument pos:start="325:32" pos:end="325:42"><expr pos:start="325:32" pos:end="325:42"><name pos:start="325:32" pos:end="325:42"><name pos:start="325:32" pos:end="325:34">ctx</name><operator pos:start="325:35" pos:end="325:36">-&gt;</operator><name pos:start="325:37" pos:end="325:39">isp</name><index pos:start="325:40" pos:end="325:42">[<expr pos:start="325:41" pos:end="325:41"><literal type="number" pos:start="325:41" pos:end="325:41">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="325:45" pos:end="325:77"><expr pos:start="325:45" pos:end="325:77"><name pos:start="325:45" pos:end="325:52">LP_ORDER</name> <operator pos:start="325:54" pos:end="325:54">*</operator> <sizeof pos:start="325:56" pos:end="325:77">sizeof<argument_list pos:start="325:62" pos:end="325:77">(<argument pos:start="325:63" pos:end="325:76"><expr pos:start="325:63" pos:end="325:76"><name pos:start="325:63" pos:end="325:76"><name pos:start="325:63" pos:end="325:65">ctx</name><operator pos:start="325:66" pos:end="325:67">-&gt;</operator><name pos:start="325:68" pos:end="325:70">isp</name><index pos:start="325:71" pos:end="325:73">[<expr pos:start="325:72" pos:end="325:72"><literal type="number" pos:start="325:72" pos:end="325:72">3</literal></expr>]</index><index pos:start="325:74" pos:end="325:76">[<expr pos:start="325:75" pos:end="325:75"><literal type="number" pos:start="325:75" pos:end="325:75">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:72"><expr pos:start="327:5" pos:end="327:71"><call pos:start="327:5" pos:end="327:71"><name pos:start="327:5" pos:end="327:10">memcpy</name><argument_list pos:start="327:11" pos:end="327:71">(<argument pos:start="327:12" pos:end="327:30"><expr pos:start="327:12" pos:end="327:30"><name pos:start="327:12" pos:end="327:30"><name pos:start="327:12" pos:end="327:14">ctx</name><operator pos:start="327:15" pos:end="327:16">-&gt;</operator><name pos:start="327:17" pos:end="327:30">isf_past_final</name></name></expr></argument>, <argument pos:start="327:33" pos:end="327:44"><expr pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:35">ctx</name><operator pos:start="327:36" pos:end="327:37">-&gt;</operator><name pos:start="327:38" pos:end="327:44">isf_cur</name></name></expr></argument>, <argument pos:start="327:47" pos:end="327:70"><expr pos:start="327:47" pos:end="327:70"><name pos:start="327:47" pos:end="327:54">LP_ORDER</name> <operator pos:start="327:56" pos:end="327:56">*</operator> <sizeof pos:start="327:58" pos:end="327:70">sizeof<argument_list pos:start="327:64" pos:end="327:70">(<argument pos:start="327:65" pos:end="327:69"><expr pos:start="327:65" pos:end="327:69"><name pos:start="327:65" pos:end="327:69">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:25"><expr pos:start="331:5" pos:end="331:24"><operator pos:start="331:5" pos:end="331:5">*</operator><name pos:start="331:6" pos:end="331:18">got_frame_ptr</name>   <operator pos:start="331:22" pos:end="331:22">=</operator> <literal type="number" pos:start="331:24" pos:end="331:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:36"><expr pos:start="333:5" pos:end="333:35"><operator pos:start="333:5" pos:end="333:5">*</operator><operator pos:start="333:6" pos:end="333:6">(</operator><name pos:start="333:7" pos:end="333:13">AVFrame</name> <operator pos:start="333:15" pos:end="333:15">*</operator><operator pos:start="333:16" pos:end="333:16">)</operator><name pos:start="333:17" pos:end="333:20">data</name> <operator pos:start="333:22" pos:end="333:22">=</operator> <name pos:start="333:24" pos:end="333:35"><name pos:start="333:24" pos:end="333:26">ctx</name><operator pos:start="333:27" pos:end="333:28">-&gt;</operator><name pos:start="333:29" pos:end="333:35">avframe</name></name></expr>;</expr_stmt>



    <return pos:start="337:5" pos:end="337:28">return <expr pos:start="337:12" pos:end="337:27"><name pos:start="337:12" pos:end="337:27">expected_fr_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
