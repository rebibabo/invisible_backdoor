<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8259.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">kvm_cpu_fill_host</name><parameter_list pos:start="1:30" pos:end="1:53">(<parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:39">x86_def_t</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">x86_cpu_def</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:35">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">eax</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">0</literal></expr></init></decl>, <decl pos:start="5:23" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:23" pos:end="5:25">ebx</name> <init pos:start="5:27" pos:end="5:29">= <expr pos:start="5:29" pos:end="5:29"><literal type="number" pos:start="5:29" pos:end="5:29">0</literal></expr></init></decl>, <decl pos:start="5:32" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:32" pos:end="5:34">ecx</name> <init pos:start="5:36" pos:end="5:38">= <expr pos:start="5:38" pos:end="5:38"><literal type="number" pos:start="5:38" pos:end="5:38">0</literal></expr></init></decl>, <decl pos:start="5:41" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:41" pos:end="5:43">edx</name> <init pos:start="5:45" pos:end="5:47">= <expr pos:start="5:47" pos:end="5:47"><literal type="number" pos:start="5:47" pos:end="5:47">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:25">(<argument pos:start="9:12" pos:end="9:24"><expr pos:start="9:12" pos:end="9:24"><call pos:start="9:12" pos:end="9:24"><name pos:start="9:12" pos:end="9:22">kvm_enabled</name><argument_list pos:start="9:23" pos:end="9:24">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:15">x86_cpu_def</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:21">name</name></name> <operator pos:start="13:23" pos:end="13:23">=</operator> <literal type="string" pos:start="13:25" pos:end="13:30">"host"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><call pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:14">host_cpuid</name><argument_list pos:start="15:15" pos:end="15:46">(<argument pos:start="15:16" pos:end="15:18"><expr pos:start="15:16" pos:end="15:18"><literal type="number" pos:start="15:16" pos:end="15:18">0x0</literal></expr></argument>, <argument pos:start="15:21" pos:end="15:21"><expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></argument>, <argument pos:start="15:24" pos:end="15:27"><expr pos:start="15:24" pos:end="15:27"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:27">eax</name></expr></argument>, <argument pos:start="15:30" pos:end="15:33"><expr pos:start="15:30" pos:end="15:33"><operator pos:start="15:30" pos:end="15:30">&amp;</operator><name pos:start="15:31" pos:end="15:33">ebx</name></expr></argument>, <argument pos:start="15:36" pos:end="15:39"><expr pos:start="15:36" pos:end="15:39"><operator pos:start="15:36" pos:end="15:36">&amp;</operator><name pos:start="15:37" pos:end="15:39">ecx</name></expr></argument>, <argument pos:start="15:42" pos:end="15:45"><expr pos:start="15:42" pos:end="15:45"><operator pos:start="15:42" pos:end="15:42">&amp;</operator><name pos:start="15:43" pos:end="15:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:15">x86_cpu_def</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:22">level</name></name> <operator pos:start="17:24" pos:end="17:24">=</operator> <name pos:start="17:26" pos:end="17:28">eax</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:31"><expr pos:start="19:5" pos:end="19:30"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:15">x86_cpu_def</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:24">vendor1</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <name pos:start="19:28" pos:end="19:30">ebx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:15">x86_cpu_def</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:24">vendor2</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:30">edx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:15">x86_cpu_def</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:24">vendor3</name></name> <operator pos:start="23:26" pos:end="23:26">=</operator> <name pos:start="23:28" pos:end="23:30">ecx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:14">host_cpuid</name><argument_list pos:start="27:15" pos:end="27:46">(<argument pos:start="27:16" pos:end="27:18"><expr pos:start="27:16" pos:end="27:18"><literal type="number" pos:start="27:16" pos:end="27:18">0x1</literal></expr></argument>, <argument pos:start="27:21" pos:end="27:21"><expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></argument>, <argument pos:start="27:24" pos:end="27:27"><expr pos:start="27:24" pos:end="27:27"><operator pos:start="27:24" pos:end="27:24">&amp;</operator><name pos:start="27:25" pos:end="27:27">eax</name></expr></argument>, <argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><operator pos:start="27:30" pos:end="27:30">&amp;</operator><name pos:start="27:31" pos:end="27:33">ebx</name></expr></argument>, <argument pos:start="27:36" pos:end="27:39"><expr pos:start="27:36" pos:end="27:39"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:39">ecx</name></expr></argument>, <argument pos:start="27:42" pos:end="27:45"><expr pos:start="27:42" pos:end="27:45"><operator pos:start="27:42" pos:end="27:42">&amp;</operator><name pos:start="27:43" pos:end="27:45">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:69"><expr pos:start="29:5" pos:end="29:68"><name pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:15">x86_cpu_def</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:23">family</name></name> <operator pos:start="29:25" pos:end="29:25">=</operator> <operator pos:start="29:27" pos:end="29:27">(</operator><operator pos:start="29:28" pos:end="29:28">(</operator><name pos:start="29:29" pos:end="29:31">eax</name> <operator pos:start="29:33" pos:end="29:34">&gt;&gt;</operator> <literal type="number" pos:start="29:36" pos:end="29:36">8</literal><operator pos:start="29:37" pos:end="29:37">)</operator> <operator pos:start="29:39" pos:end="29:39">&amp;</operator> <literal type="number" pos:start="29:41" pos:end="29:44">0x0F</literal><operator pos:start="29:45" pos:end="29:45">)</operator> <operator pos:start="29:47" pos:end="29:47">+</operator> <operator pos:start="29:49" pos:end="29:49">(</operator><operator pos:start="29:50" pos:end="29:50">(</operator><name pos:start="29:51" pos:end="29:53">eax</name> <operator pos:start="29:55" pos:end="29:56">&gt;&gt;</operator> <literal type="number" pos:start="29:58" pos:end="29:59">20</literal><operator pos:start="29:60" pos:end="29:60">)</operator> <operator pos:start="29:62" pos:end="29:62">&amp;</operator> <literal type="number" pos:start="29:64" pos:end="29:67">0xFF</literal><operator pos:start="29:68" pos:end="29:68">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:15">x86_cpu_def</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:22">model</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <operator pos:start="31:26" pos:end="31:26">(</operator><operator pos:start="31:27" pos:end="31:27">(</operator><name pos:start="31:28" pos:end="31:30">eax</name> <operator pos:start="31:32" pos:end="31:33">&gt;&gt;</operator> <literal type="number" pos:start="31:35" pos:end="31:35">4</literal><operator pos:start="31:36" pos:end="31:36">)</operator> <operator pos:start="31:38" pos:end="31:38">&amp;</operator> <literal type="number" pos:start="31:40" pos:end="31:43">0x0F</literal><operator pos:start="31:44" pos:end="31:44">)</operator> <operator pos:start="31:46" pos:end="31:46">|</operator> <operator pos:start="31:48" pos:end="31:48">(</operator><operator pos:start="31:49" pos:end="31:49">(</operator><name pos:start="31:50" pos:end="31:52">eax</name> <operator pos:start="31:54" pos:end="31:54">&amp;</operator> <literal type="number" pos:start="31:56" pos:end="31:62">0xF0000</literal><operator pos:start="31:63" pos:end="31:63">)</operator> <operator pos:start="31:65" pos:end="31:66">&gt;&gt;</operator> <literal type="number" pos:start="31:68" pos:end="31:69">12</literal><operator pos:start="31:70" pos:end="31:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:15">x86_cpu_def</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:25">stepping</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <name pos:start="33:29" pos:end="33:31">eax</name> <operator pos:start="33:33" pos:end="33:33">&amp;</operator> <literal type="number" pos:start="33:35" pos:end="33:38">0x0F</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:15">x86_cpu_def</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:29">ext_features</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <name pos:start="35:33" pos:end="35:35">ecx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:15">x86_cpu_def</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">features</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:31">edx</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:32">(<expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:19">x86_cpu_def</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:26">level</name></name> <operator pos:start="41:28" pos:end="41:29">&gt;=</operator> <literal type="number" pos:start="41:31" pos:end="41:31">7</literal></expr>)</condition> <block pos:start="41:34" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:101">

        <expr_stmt pos:start="43:9" pos:end="43:101"><expr pos:start="43:9" pos:end="43:100"><name pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:19">x86_cpu_def</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="43:45" pos:end="43:45">=</operator> <call pos:start="43:47" pos:end="43:100"><name pos:start="43:47" pos:end="43:74">kvm_arch_get_supported_cpuid</name><argument_list pos:start="43:75" pos:end="43:100">(<argument pos:start="43:76" pos:end="43:84"><expr pos:start="43:76" pos:end="43:84"><name pos:start="43:76" pos:end="43:84">kvm_state</name></expr></argument>, <argument pos:start="43:87" pos:end="43:89"><expr pos:start="43:87" pos:end="43:89"><literal type="number" pos:start="43:87" pos:end="43:89">0x7</literal></expr></argument>, <argument pos:start="43:92" pos:end="43:92"><expr pos:start="43:92" pos:end="43:92"><literal type="number" pos:start="43:92" pos:end="43:92">0</literal></expr></argument>, <argument pos:start="43:95" pos:end="43:99"><expr pos:start="43:95" pos:end="43:99"><name pos:start="43:95" pos:end="43:99">R_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:48">

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:19">x86_cpu_def</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:43">cpuid_7_0_ebx_features</name></name> <operator pos:start="47:45" pos:end="47:45">=</operator> <literal type="number" pos:start="47:47" pos:end="47:47">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:54"><expr pos:start="53:5" pos:end="53:53"><call pos:start="53:5" pos:end="53:53"><name pos:start="53:5" pos:end="53:14">host_cpuid</name><argument_list pos:start="53:15" pos:end="53:53">(<argument pos:start="53:16" pos:end="53:25"><expr pos:start="53:16" pos:end="53:25"><literal type="number" pos:start="53:16" pos:end="53:25">0x80000000</literal></expr></argument>, <argument pos:start="53:28" pos:end="53:28"><expr pos:start="53:28" pos:end="53:28"><literal type="number" pos:start="53:28" pos:end="53:28">0</literal></expr></argument>, <argument pos:start="53:31" pos:end="53:34"><expr pos:start="53:31" pos:end="53:34"><operator pos:start="53:31" pos:end="53:31">&amp;</operator><name pos:start="53:32" pos:end="53:34">eax</name></expr></argument>, <argument pos:start="53:37" pos:end="53:40"><expr pos:start="53:37" pos:end="53:40"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:40">ebx</name></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><operator pos:start="53:43" pos:end="53:43">&amp;</operator><name pos:start="53:44" pos:end="53:46">ecx</name></expr></argument>, <argument pos:start="53:49" pos:end="53:52"><expr pos:start="53:49" pos:end="53:52"><operator pos:start="53:49" pos:end="53:49">&amp;</operator><name pos:start="53:50" pos:end="53:52">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:30"><expr pos:start="55:5" pos:end="55:29"><name pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:15">x86_cpu_def</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:23">xlevel</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:29">eax</name></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:54"><expr pos:start="59:5" pos:end="59:53"><call pos:start="59:5" pos:end="59:53"><name pos:start="59:5" pos:end="59:14">host_cpuid</name><argument_list pos:start="59:15" pos:end="59:53">(<argument pos:start="59:16" pos:end="59:25"><expr pos:start="59:16" pos:end="59:25"><literal type="number" pos:start="59:16" pos:end="59:25">0x80000001</literal></expr></argument>, <argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:34"><expr pos:start="59:31" pos:end="59:34"><operator pos:start="59:31" pos:end="59:31">&amp;</operator><name pos:start="59:32" pos:end="59:34">eax</name></expr></argument>, <argument pos:start="59:37" pos:end="59:40"><expr pos:start="59:37" pos:end="59:40"><operator pos:start="59:37" pos:end="59:37">&amp;</operator><name pos:start="59:38" pos:end="59:40">ebx</name></expr></argument>, <argument pos:start="59:43" pos:end="59:46"><expr pos:start="59:43" pos:end="59:46"><operator pos:start="59:43" pos:end="59:43">&amp;</operator><name pos:start="59:44" pos:end="59:46">ecx</name></expr></argument>, <argument pos:start="59:49" pos:end="59:52"><expr pos:start="59:49" pos:end="59:52"><operator pos:start="59:49" pos:end="59:49">&amp;</operator><name pos:start="59:50" pos:end="59:52">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:37"><expr pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:15">x86_cpu_def</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:30">ext2_features</name></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <name pos:start="61:34" pos:end="61:36">edx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:30"><name pos:start="63:5" pos:end="63:15">x86_cpu_def</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:30">ext3_features</name></name> <operator pos:start="63:32" pos:end="63:32">=</operator> <name pos:start="63:34" pos:end="63:36">ecx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><call pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:25">cpu_x86_fill_model_id</name><argument_list pos:start="65:26" pos:end="65:48">(<argument pos:start="65:27" pos:end="65:47"><expr pos:start="65:27" pos:end="65:47"><name pos:start="65:27" pos:end="65:47"><name pos:start="65:27" pos:end="65:37">x86_cpu_def</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:47">model_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:32"><name pos:start="67:5" pos:end="67:15">x86_cpu_def</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:32">vendor_override</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <literal type="number" pos:start="67:36" pos:end="67:36">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:43">/* Call Centaur's CPUID instruction. */</comment>

    <if_stmt pos:start="73:5" pos:end="93:5"><if pos:start="73:5" pos:end="93:5">if <condition pos:start="73:8" pos:end="77:51">(<expr pos:start="73:9" pos:end="77:50"><name pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:19">x86_cpu_def</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:28">vendor1</name></name> <operator pos:start="73:30" pos:end="73:31">==</operator> <name pos:start="73:33" pos:end="73:50">CPUID_VENDOR_VIA_1</name> <operator pos:start="73:52" pos:end="73:53">&amp;&amp;</operator>

        <name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:19">x86_cpu_def</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:28">vendor2</name></name> <operator pos:start="75:30" pos:end="75:31">==</operator> <name pos:start="75:33" pos:end="75:50">CPUID_VENDOR_VIA_2</name> <operator pos:start="75:52" pos:end="75:53">&amp;&amp;</operator>

        <name pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:19">x86_cpu_def</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:28">vendor3</name></name> <operator pos:start="77:30" pos:end="77:31">==</operator> <name pos:start="77:33" pos:end="77:50">CPUID_VENDOR_VIA_3</name></expr>)</condition> <block pos:start="77:53" pos:end="93:5">{<block_content pos:start="79:9" pos:end="91:9">

        <expr_stmt pos:start="79:9" pos:end="79:58"><expr pos:start="79:9" pos:end="79:57"><call pos:start="79:9" pos:end="79:57"><name pos:start="79:9" pos:end="79:18">host_cpuid</name><argument_list pos:start="79:19" pos:end="79:57">(<argument pos:start="79:20" pos:end="79:29"><expr pos:start="79:20" pos:end="79:29"><literal type="number" pos:start="79:20" pos:end="79:29">0xC0000000</literal></expr></argument>, <argument pos:start="79:32" pos:end="79:32"><expr pos:start="79:32" pos:end="79:32"><literal type="number" pos:start="79:32" pos:end="79:32">0</literal></expr></argument>, <argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><operator pos:start="79:35" pos:end="79:35">&amp;</operator><name pos:start="79:36" pos:end="79:38">eax</name></expr></argument>, <argument pos:start="79:41" pos:end="79:44"><expr pos:start="79:41" pos:end="79:44"><operator pos:start="79:41" pos:end="79:41">&amp;</operator><name pos:start="79:42" pos:end="79:44">ebx</name></expr></argument>, <argument pos:start="79:47" pos:end="79:50"><expr pos:start="79:47" pos:end="79:50"><operator pos:start="79:47" pos:end="79:47">&amp;</operator><name pos:start="79:48" pos:end="79:50">ecx</name></expr></argument>, <argument pos:start="79:53" pos:end="79:56"><expr pos:start="79:53" pos:end="79:56"><operator pos:start="79:53" pos:end="79:53">&amp;</operator><name pos:start="79:54" pos:end="79:56">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:30">(<expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:15">eax</name> <operator pos:start="81:17" pos:end="81:18">&gt;=</operator> <literal type="number" pos:start="81:20" pos:end="81:29">0xC0000001</literal></expr>)</condition> <block pos:start="81:32" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:45">

            <comment type="block" pos:start="83:13" pos:end="83:48">/* Support VIA max extended level */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:39"><expr pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:32"><name pos:start="85:13" pos:end="85:23">x86_cpu_def</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:32">xlevel2</name></name> <operator pos:start="85:34" pos:end="85:34">=</operator> <name pos:start="85:36" pos:end="85:38">eax</name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:62"><expr pos:start="87:13" pos:end="87:61"><call pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:22">host_cpuid</name><argument_list pos:start="87:23" pos:end="87:61">(<argument pos:start="87:24" pos:end="87:33"><expr pos:start="87:24" pos:end="87:33"><literal type="number" pos:start="87:24" pos:end="87:33">0xC0000001</literal></expr></argument>, <argument pos:start="87:36" pos:end="87:36"><expr pos:start="87:36" pos:end="87:36"><literal type="number" pos:start="87:36" pos:end="87:36">0</literal></expr></argument>, <argument pos:start="87:39" pos:end="87:42"><expr pos:start="87:39" pos:end="87:42"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:42">eax</name></expr></argument>, <argument pos:start="87:45" pos:end="87:48"><expr pos:start="87:45" pos:end="87:48"><operator pos:start="87:45" pos:end="87:45">&amp;</operator><name pos:start="87:46" pos:end="87:48">ebx</name></expr></argument>, <argument pos:start="87:51" pos:end="87:54"><expr pos:start="87:51" pos:end="87:54"><operator pos:start="87:51" pos:end="87:51">&amp;</operator><name pos:start="87:52" pos:end="87:54">ecx</name></expr></argument>, <argument pos:start="87:57" pos:end="87:60"><expr pos:start="87:57" pos:end="87:60"><operator pos:start="87:57" pos:end="87:57">&amp;</operator><name pos:start="87:58" pos:end="87:60">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:45"><expr pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:38"><name pos:start="89:13" pos:end="89:23">x86_cpu_def</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:38">ext4_features</name></name> <operator pos:start="89:40" pos:end="89:40">=</operator> <name pos:start="89:42" pos:end="89:44">edx</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="107:7">/*

     * Every SVM feature requires emulation support in KVM - so we can't just

     * read the host features here. KVM might even support SVM features not

     * available on the host hardware. Just set all bits and mask out the

     * unsupported ones later.

     */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:35"><expr pos:start="109:5" pos:end="109:34"><name pos:start="109:5" pos:end="109:29"><name pos:start="109:5" pos:end="109:15">x86_cpu_def</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:29">svm_features</name></name> <operator pos:start="109:31" pos:end="109:31">=</operator> <operator pos:start="109:33" pos:end="109:33">-</operator><literal type="number" pos:start="109:34" pos:end="109:34">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
