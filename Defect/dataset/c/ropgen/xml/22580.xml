<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22580.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">qcow2_alloc_cluster_offset</name><parameter_list pos:start="1:31" pos:end="3:52">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:68">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:15"><decl pos:start="3:5" pos:end="3:15"><type pos:start="3:5" pos:end="3:15"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:15">n_start</name></decl></parameter>, <parameter pos:start="3:18" pos:end="3:26"><decl pos:start="3:18" pos:end="3:26"><type pos:start="3:18" pos:end="3:26"><name pos:start="3:18" pos:end="3:20">int</name></type> <name pos:start="3:22" pos:end="3:26">n_end</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">num</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:48">QCowL2Meta</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:51">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="269:1">{<block_content pos:start="7:5" pos:end="267:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">l2_index</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">ret</name></decl>, <decl pos:start="9:24" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:30">sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:28">nb_clusters</name></decl>, <decl pos:start="13:31" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:31" pos:end="13:43">keep_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:27">cluster_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:54"><expr pos:start="19:5" pos:end="21:53"><call pos:start="19:5" pos:end="21:53"><name pos:start="19:5" pos:end="19:37">trace_qcow2_alloc_clusters_offset</name><argument_list pos:start="19:38" pos:end="21:53">(<argument pos:start="19:39" pos:end="19:59"><expr pos:start="19:39" pos:end="19:59"><call pos:start="19:39" pos:end="19:59"><name pos:start="19:39" pos:end="19:57">qemu_coroutine_self</name><argument_list pos:start="19:58" pos:end="19:59">()</argument_list></call></expr></argument>, <argument pos:start="19:62" pos:end="19:67"><expr pos:start="19:62" pos:end="19:67"><name pos:start="19:62" pos:end="19:67">offset</name></expr></argument>,

                                      <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">n_start</name></expr></argument>, <argument pos:start="21:48" pos:end="21:52"><expr pos:start="21:48" pos:end="21:52"><name pos:start="21:48" pos:end="21:52">n_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:54">/* Find L2 entry for the first involved cluster */</comment>

<label pos:start="27:1" pos:end="27:6"><name pos:start="27:1" pos:end="27:5">again</name>:</label>

    <expr_stmt pos:start="29:5" pos:end="29:62"><expr pos:start="29:5" pos:end="29:61"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:61"><name pos:start="29:11" pos:end="29:27">get_cluster_table</name><argument_list pos:start="29:28" pos:end="29:61">(<argument pos:start="29:29" pos:end="29:30"><expr pos:start="29:29" pos:end="29:30"><name pos:start="29:29" pos:end="29:30">bs</name></expr></argument>, <argument pos:start="29:33" pos:end="29:38"><expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38">offset</name></expr></argument>, <argument pos:start="29:41" pos:end="29:49"><expr pos:start="29:41" pos:end="29:49"><operator pos:start="29:41" pos:end="29:41">&amp;</operator><name pos:start="29:42" pos:end="29:49">l2_table</name></expr></argument>, <argument pos:start="29:52" pos:end="29:60"><expr pos:start="29:52" pos:end="29:60"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:60">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:19">

        <return pos:start="33:9" pos:end="33:19">return <expr pos:start="33:16" pos:end="33:18"><name pos:start="33:16" pos:end="33:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="45:7">/*

     * Calculate the number of clusters to look for. We stop at L2 table

     * boundaries to keep things simple.

     */</comment>

    <expr_stmt pos:start="47:5" pos:end="49:45"><expr pos:start="47:5" pos:end="49:44"><name pos:start="47:5" pos:end="47:15">nb_clusters</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="49:44"><name pos:start="47:19" pos:end="47:21">MIN</name><argument_list pos:start="47:22" pos:end="49:44">(<argument pos:start="47:23" pos:end="47:68"><expr pos:start="47:23" pos:end="47:68"><call pos:start="47:23" pos:end="47:68"><name pos:start="47:23" pos:end="47:38">size_to_clusters</name><argument_list pos:start="47:39" pos:end="47:68">(<argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><name pos:start="47:40" pos:end="47:40">s</name></expr></argument>, <argument pos:start="47:43" pos:end="47:67"><expr pos:start="47:43" pos:end="47:67"><name pos:start="47:43" pos:end="47:47">n_end</name> <operator pos:start="47:49" pos:end="47:50">&lt;&lt;</operator> <name pos:start="47:52" pos:end="47:67">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="49:23" pos:end="49:43"><expr pos:start="49:23" pos:end="49:43"><name pos:start="49:23" pos:end="49:32"><name pos:start="49:23" pos:end="49:23">s</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:32">l2_size</name></name> <operator pos:start="49:34" pos:end="49:34">-</operator> <name pos:start="49:36" pos:end="49:43">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:53"><expr pos:start="53:5" pos:end="53:52"><name pos:start="53:5" pos:end="53:18">cluster_offset</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <call pos:start="53:22" pos:end="53:52"><name pos:start="53:22" pos:end="53:32">be64_to_cpu</name><argument_list pos:start="53:33" pos:end="53:52">(<argument pos:start="53:34" pos:end="53:51"><expr pos:start="53:34" pos:end="53:51"><name pos:start="53:34" pos:end="53:51"><name pos:start="53:34" pos:end="53:41">l2_table</name><index pos:start="53:42" pos:end="53:51">[<expr pos:start="53:43" pos:end="53:50"><name pos:start="53:43" pos:end="53:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="63:7">/*

     * Check how many clusters are already allocated and don't need COW, and how

     * many need a new allocation.

     */</comment>

    <if_stmt pos:start="65:5" pos:end="105:5"><if pos:start="65:5" pos:end="85:5">if <condition pos:start="65:8" pos:end="67:48">(<expr pos:start="65:9" pos:end="67:47"><call pos:start="65:9" pos:end="65:46"><name pos:start="65:9" pos:end="65:30">qcow2_get_cluster_type</name><argument_list pos:start="65:31" pos:end="65:46">(<argument pos:start="65:32" pos:end="65:45"><expr pos:start="65:32" pos:end="65:45"><name pos:start="65:32" pos:end="65:45">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="65:48" pos:end="65:49">==</operator> <name pos:start="65:51" pos:end="65:70">QCOW2_CLUSTER_NORMAL</name>

        <operator pos:start="67:9" pos:end="67:10">&amp;&amp;</operator> <operator pos:start="67:12" pos:end="67:12">(</operator><name pos:start="67:13" pos:end="67:26">cluster_offset</name> <operator pos:start="67:28" pos:end="67:28">&amp;</operator> <name pos:start="67:30" pos:end="67:46">QCOW_OFLAG_COPIED</name><operator pos:start="67:47" pos:end="67:47">)</operator></expr>)</condition>

    <block pos:start="69:5" pos:end="85:5">{<block_content pos:start="73:9" pos:end="83:37">

        <comment type="block" pos:start="71:9" pos:end="71:52">/* We keep all QCOW_OFLAG_COPIED clusters */</comment>

        <expr_stmt pos:start="73:9" pos:end="79:75"><expr pos:start="73:9" pos:end="79:74"><name pos:start="73:9" pos:end="73:21">keep_clusters</name> <operator pos:start="73:23" pos:end="73:23">=</operator>

            <call pos:start="75:13" pos:end="79:74"><name pos:start="75:13" pos:end="75:37">count_contiguous_clusters</name><argument_list pos:start="75:38" pos:end="79:74">(<argument pos:start="75:39" pos:end="75:49"><expr pos:start="75:39" pos:end="75:49"><name pos:start="75:39" pos:end="75:49">nb_clusters</name></expr></argument>, <argument pos:start="75:52" pos:end="75:66"><expr pos:start="75:52" pos:end="75:66"><name pos:start="75:52" pos:end="75:66"><name pos:start="75:52" pos:end="75:52">s</name><operator pos:start="75:53" pos:end="75:54">-&gt;</operator><name pos:start="75:55" pos:end="75:66">cluster_size</name></name></expr></argument>,

                                      <argument pos:start="77:39" pos:end="77:57"><expr pos:start="77:39" pos:end="77:57"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:57"><name pos:start="77:40" pos:end="77:47">l2_table</name><index pos:start="77:48" pos:end="77:57">[<expr pos:start="77:49" pos:end="77:56"><name pos:start="77:49" pos:end="77:56">l2_index</name></expr>]</index></name></expr></argument>, <argument pos:start="77:60" pos:end="77:60"><expr pos:start="77:60" pos:end="77:60"><literal type="number" pos:start="77:60" pos:end="77:60">0</literal></expr></argument>,

                                      <argument pos:start="79:39" pos:end="79:73"><expr pos:start="79:39" pos:end="79:73"><name pos:start="79:39" pos:end="79:55">QCOW_OFLAG_COPIED</name> <operator pos:start="79:57" pos:end="79:57">|</operator> <name pos:start="79:59" pos:end="79:73">QCOW_OFLAG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:14">assert</name><argument_list pos:start="81:15" pos:end="81:44">(<argument pos:start="81:16" pos:end="81:43"><expr pos:start="81:16" pos:end="81:43"><name pos:start="81:16" pos:end="81:28">keep_clusters</name> <operator pos:start="81:30" pos:end="81:31">&lt;=</operator> <name pos:start="81:33" pos:end="81:43">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:37"><expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:19">nb_clusters</name> <operator pos:start="83:21" pos:end="83:22">-=</operator> <name pos:start="83:24" pos:end="83:36">keep_clusters</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="105:5">else <block pos:start="85:12" pos:end="105:5">{<block_content pos:start="89:9" pos:end="103:27">

        <comment type="block" pos:start="87:9" pos:end="87:70">/* For the moment, overwrite compressed clusters one by one */</comment>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:51">(<expr pos:start="89:13" pos:end="89:50"><name pos:start="89:13" pos:end="89:26">cluster_offset</name> <operator pos:start="89:28" pos:end="89:28">&amp;</operator> <name pos:start="89:30" pos:end="89:50">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="89:53" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:28">

            <expr_stmt pos:start="91:13" pos:end="91:28"><expr pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:23">nb_clusters</name> <operator pos:start="91:25" pos:end="91:25">=</operator> <literal type="number" pos:start="91:27" pos:end="91:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:81">

            <expr_stmt pos:start="95:13" pos:end="95:81"><expr pos:start="95:13" pos:end="95:80"><name pos:start="95:13" pos:end="95:23">nb_clusters</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="95:80"><name pos:start="95:27" pos:end="95:44">count_cow_clusters</name><argument_list pos:start="95:45" pos:end="95:80">(<argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><name pos:start="95:46" pos:end="95:46">s</name></expr></argument>, <argument pos:start="95:49" pos:end="95:59"><expr pos:start="95:49" pos:end="95:59"><name pos:start="95:49" pos:end="95:59">nb_clusters</name></expr></argument>, <argument pos:start="95:62" pos:end="95:69"><expr pos:start="95:62" pos:end="95:69"><name pos:start="95:62" pos:end="95:69">l2_table</name></expr></argument>, <argument pos:start="95:72" pos:end="95:79"><expr pos:start="95:72" pos:end="95:79"><name pos:start="95:72" pos:end="95:79">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:26"><expr pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:21">keep_clusters</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <literal type="number" pos:start="101:25" pos:end="101:25">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:22">cluster_offset</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:18">cluster_offset</name> <operator pos:start="109:20" pos:end="109:21">&amp;=</operator> <name pos:start="109:23" pos:end="109:37">L2E_OFFSET_MASK</name></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="125:7">/*

     * The L2 table isn't used any more after this. As long as the cache works

     * synchronously, it's important to release it before calling

     * do_alloc_cluster_offset, which may yield if we need to wait for another

     * request to complete. If we still had the reference, we could use up the

     * whole cache with sleeping requests.

     */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:69"><expr pos:start="127:5" pos:end="127:68"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:68"><name pos:start="127:11" pos:end="127:25">qcow2_cache_put</name><argument_list pos:start="127:26" pos:end="127:68">(<argument pos:start="127:27" pos:end="127:28"><expr pos:start="127:27" pos:end="127:28"><name pos:start="127:27" pos:end="127:28">bs</name></expr></argument>, <argument pos:start="127:31" pos:end="127:47"><expr pos:start="127:31" pos:end="127:47"><name pos:start="127:31" pos:end="127:47"><name pos:start="127:31" pos:end="127:31">s</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="127:50" pos:end="127:67"><expr pos:start="127:50" pos:end="127:67"><operator pos:start="127:50" pos:end="127:50">(</operator><name pos:start="127:51" pos:end="127:54">void</name><operator pos:start="127:55" pos:end="127:55">*</operator><operator pos:start="127:56" pos:end="127:56">*</operator><operator pos:start="127:57" pos:end="127:57">)</operator> <operator pos:start="127:59" pos:end="127:59">&amp;</operator><name pos:start="127:60" pos:end="127:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:16">(<expr pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">&lt;</operator> <literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>)</condition> <block pos:start="129:18" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:19">

        <return pos:start="131:9" pos:end="131:19">return <expr pos:start="131:16" pos:end="131:18"><name pos:start="131:16" pos:end="131:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:61">/* If there is something left to allocate, do that now */</comment>

    <expr_stmt pos:start="139:5" pos:end="145:6"><expr pos:start="139:5" pos:end="145:5"><operator pos:start="139:5" pos:end="139:5">*</operator><name pos:start="139:6" pos:end="139:6">m</name> <operator pos:start="139:8" pos:end="139:8">=</operator> <operator pos:start="139:10" pos:end="139:10">(</operator><name pos:start="139:11" pos:end="139:20">QCowL2Meta</name><operator pos:start="139:21" pos:end="139:21">)</operator> <block pos:start="139:23" pos:end="145:5">{

        <expr pos:start="141:9" pos:end="141:44"><operator pos:start="141:9" pos:end="141:9">.</operator><name pos:start="141:10" pos:end="141:23">cluster_offset</name>     <operator pos:start="141:29" pos:end="141:29">=</operator> <name pos:start="141:31" pos:end="141:44">cluster_offset</name></expr>,

        <expr pos:start="143:9" pos:end="143:31"><operator pos:start="143:9" pos:end="143:9">.</operator><name pos:start="143:10" pos:end="143:20">nb_clusters</name>        <operator pos:start="143:29" pos:end="143:29">=</operator> <literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:47"><expr pos:start="147:5" pos:end="147:46"><call pos:start="147:5" pos:end="147:46"><name pos:start="147:5" pos:end="147:22">qemu_co_queue_init</name><argument_list pos:start="147:23" pos:end="147:46">(<argument pos:start="147:24" pos:end="147:45"><expr pos:start="147:24" pos:end="147:45"><operator pos:start="147:24" pos:end="147:24">&amp;</operator><name pos:start="147:25" pos:end="147:45"><name pos:start="147:25" pos:end="147:25">m</name><operator pos:start="147:26" pos:end="147:27">-&gt;</operator><name pos:start="147:28" pos:end="147:45">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="151:5" pos:end="233:5"><if pos:start="151:5" pos:end="233:5">if <condition pos:start="151:8" pos:end="151:24">(<expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:19">nb_clusters</name> <operator pos:start="151:21" pos:end="151:21">&gt;</operator> <literal type="number" pos:start="151:23" pos:end="151:23">0</literal></expr>)</condition> <block pos:start="151:26" pos:end="233:5">{<block_content pos:start="153:9" pos:end="231:9">

        <decl_stmt pos:start="153:9" pos:end="153:30"><decl pos:start="153:9" pos:end="153:29"><type pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:16">uint64_t</name></type> <name pos:start="153:18" pos:end="153:29">alloc_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="155:9" pos:end="155:38"><decl pos:start="155:9" pos:end="155:37"><type pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:16">uint64_t</name></type> <name pos:start="155:18" pos:end="155:37">alloc_cluster_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="157:9" pos:end="157:62"><decl pos:start="157:9" pos:end="157:61"><type pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:16">uint64_t</name></type> <name pos:start="157:18" pos:end="157:27">keep_bytes</name> <init pos:start="157:29" pos:end="157:61">= <expr pos:start="157:31" pos:end="157:61"><name pos:start="157:31" pos:end="157:43">keep_clusters</name> <operator pos:start="157:45" pos:end="157:45">*</operator> <name pos:start="157:47" pos:end="157:61"><name pos:start="157:47" pos:end="157:47">s</name><operator pos:start="157:48" pos:end="157:49">-&gt;</operator><name pos:start="157:50" pos:end="157:61">cluster_size</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:52">/* Calculate start and size of allocation */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:43"><expr pos:start="163:9" pos:end="163:42"><name pos:start="163:9" pos:end="163:20">alloc_offset</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:29">offset</name> <operator pos:start="163:31" pos:end="163:31">+</operator> <name pos:start="163:33" pos:end="163:42">keep_bytes</name></expr>;</expr_stmt>



        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:31">(<expr pos:start="167:13" pos:end="167:30"><name pos:start="167:13" pos:end="167:25">keep_clusters</name> <operator pos:start="167:27" pos:end="167:28">==</operator> <literal type="number" pos:start="167:30" pos:end="167:30">0</literal></expr>)</condition> <block pos:start="167:33" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:37">

            <expr_stmt pos:start="169:13" pos:end="169:37"><expr pos:start="169:13" pos:end="169:36"><name pos:start="169:13" pos:end="169:32">alloc_cluster_offset</name> <operator pos:start="169:34" pos:end="169:34">=</operator> <literal type="number" pos:start="169:36" pos:end="169:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="171:11" pos:end="175:9">else <block pos:start="171:16" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:63">

            <expr_stmt pos:start="173:13" pos:end="173:63"><expr pos:start="173:13" pos:end="173:62"><name pos:start="173:13" pos:end="173:32">alloc_cluster_offset</name> <operator pos:start="173:34" pos:end="173:34">=</operator> <name pos:start="173:36" pos:end="173:49">cluster_offset</name> <operator pos:start="173:51" pos:end="173:51">+</operator> <name pos:start="173:53" pos:end="173:62">keep_bytes</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="179:9" pos:end="179:72">/* Allocate, if necessary at a given offset in the image file */</comment>

        <expr_stmt pos:start="181:9" pos:end="183:52"><expr pos:start="181:9" pos:end="183:51"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="183:51"><name pos:start="181:15" pos:end="181:37">do_alloc_cluster_offset</name><argument_list pos:start="181:38" pos:end="183:51">(<argument pos:start="181:39" pos:end="181:40"><expr pos:start="181:39" pos:end="181:40"><name pos:start="181:39" pos:end="181:40">bs</name></expr></argument>, <argument pos:start="181:43" pos:end="181:54"><expr pos:start="181:43" pos:end="181:54"><name pos:start="181:43" pos:end="181:54">alloc_offset</name></expr></argument>, <argument pos:start="181:57" pos:end="181:77"><expr pos:start="181:57" pos:end="181:77"><operator pos:start="181:57" pos:end="181:57">&amp;</operator><name pos:start="181:58" pos:end="181:77">alloc_cluster_offset</name></expr></argument>,

                                      <argument pos:start="183:39" pos:end="183:50"><expr pos:start="183:39" pos:end="183:50"><operator pos:start="183:39" pos:end="183:39">&amp;</operator><name pos:start="183:40" pos:end="183:50">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="193:9"><if pos:start="185:9" pos:end="189:9">if <condition pos:start="185:12" pos:end="185:27">(<expr pos:start="185:13" pos:end="185:26"><name pos:start="185:13" pos:end="185:15">ret</name> <operator pos:start="185:17" pos:end="185:18">==</operator> <operator pos:start="185:20" pos:end="185:20">-</operator><name pos:start="185:21" pos:end="185:26">EAGAIN</name></expr>)</condition> <block pos:start="185:29" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:23">

            <goto pos:start="187:13" pos:end="187:23">goto <name pos:start="187:18" pos:end="187:22">again</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="189:11" pos:end="193:9">else if <condition pos:start="189:19" pos:end="189:27">(<expr pos:start="189:20" pos:end="189:26"><name pos:start="189:20" pos:end="189:22">ret</name> <operator pos:start="189:24" pos:end="189:24">&lt;</operator> <literal type="number" pos:start="189:26" pos:end="189:26">0</literal></expr>)</condition> <block pos:start="189:29" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:22">

            <goto pos:start="191:13" pos:end="191:22">goto <name pos:start="191:18" pos:end="191:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="197:9" pos:end="197:51">/* save info needed for meta data update */</comment>

        <if_stmt pos:start="199:9" pos:end="231:9"><if pos:start="199:9" pos:end="231:9">if <condition pos:start="199:12" pos:end="199:28">(<expr pos:start="199:13" pos:end="199:27"><name pos:start="199:13" pos:end="199:23">nb_clusters</name> <operator pos:start="199:25" pos:end="199:25">&gt;</operator> <literal type="number" pos:start="199:27" pos:end="199:27">0</literal></expr>)</condition> <block pos:start="199:30" pos:end="231:9">{<block_content pos:start="201:13" pos:end="229:69">

            <decl_stmt pos:start="201:13" pos:end="201:79"><decl pos:start="201:13" pos:end="201:78"><type pos:start="201:13" pos:end="201:15"><name pos:start="201:13" pos:end="201:15">int</name></type> <name pos:start="201:17" pos:end="201:33">requested_sectors</name> <init pos:start="201:35" pos:end="201:78">= <expr pos:start="201:37" pos:end="201:78"><name pos:start="201:37" pos:end="201:41">n_end</name> <operator pos:start="201:43" pos:end="201:43">-</operator> <name pos:start="201:45" pos:end="201:57">keep_clusters</name> <operator pos:start="201:59" pos:end="201:59">*</operator> <name pos:start="201:61" pos:end="201:78"><name pos:start="201:61" pos:end="201:61">s</name><operator pos:start="201:62" pos:end="201:63">-&gt;</operator><name pos:start="201:64" pos:end="201:78">cluster_sectors</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="203:13" pos:end="205:72"><decl pos:start="203:13" pos:end="205:71"><type pos:start="203:13" pos:end="203:15"><name pos:start="203:13" pos:end="203:15">int</name></type> <name pos:start="203:17" pos:end="203:29">avail_sectors</name> <init pos:start="203:31" pos:end="205:71">= <expr pos:start="203:33" pos:end="205:71"><operator pos:start="203:33" pos:end="203:33">(</operator><name pos:start="203:34" pos:end="203:46">keep_clusters</name> <operator pos:start="203:48" pos:end="203:48">+</operator> <name pos:start="203:50" pos:end="203:60">nb_clusters</name><operator pos:start="203:61" pos:end="203:61">)</operator>

                                <operator pos:start="205:33" pos:end="205:34">&lt;&lt;</operator> <operator pos:start="205:36" pos:end="205:36">(</operator><name pos:start="205:37" pos:end="205:51"><name pos:start="205:37" pos:end="205:37">s</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:51">cluster_bits</name></name> <operator pos:start="205:53" pos:end="205:53">-</operator> <name pos:start="205:55" pos:end="205:70">BDRV_SECTOR_BITS</name><operator pos:start="205:71" pos:end="205:71">)</operator></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="209:13" pos:end="225:14"><expr pos:start="209:13" pos:end="225:13"><operator pos:start="209:13" pos:end="209:13">*</operator><name pos:start="209:14" pos:end="209:14">m</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <operator pos:start="209:18" pos:end="209:18">(</operator><name pos:start="209:19" pos:end="209:28">QCowL2Meta</name><operator pos:start="209:29" pos:end="209:29">)</operator> <block pos:start="209:31" pos:end="225:13">{

                <expr pos:start="211:17" pos:end="213:71"><operator pos:start="211:17" pos:end="211:17">.</operator><name pos:start="211:18" pos:end="211:31">cluster_offset</name> <operator pos:start="211:33" pos:end="211:33">=</operator> <name pos:start="211:35" pos:end="211:47">keep_clusters</name> <operator pos:start="211:49" pos:end="211:50">==</operator> <literal type="number" pos:start="211:52" pos:end="211:52">0</literal> <operator pos:start="211:54" pos:end="211:54">?</operator>

                                  <name pos:start="213:35" pos:end="213:54">alloc_cluster_offset</name> <operator pos:start="213:56" pos:end="213:56">:</operator> <name pos:start="213:58" pos:end="213:71">cluster_offset</name></expr>,

                <expr pos:start="215:17" pos:end="215:54"><operator pos:start="215:17" pos:end="215:17">.</operator><name pos:start="215:18" pos:end="215:29">alloc_offset</name>   <operator pos:start="215:33" pos:end="215:33">=</operator> <name pos:start="215:35" pos:end="215:54">alloc_cluster_offset</name></expr>,

                <expr pos:start="217:17" pos:end="217:46"><operator pos:start="217:17" pos:end="217:17">.</operator><name pos:start="217:18" pos:end="217:23">offset</name>         <operator pos:start="217:33" pos:end="217:33">=</operator> <name pos:start="217:35" pos:end="217:46">alloc_offset</name></expr>,

                <expr pos:start="219:17" pos:end="219:66"><operator pos:start="219:17" pos:end="219:17">.</operator><name pos:start="219:18" pos:end="219:24">n_start</name>        <operator pos:start="219:33" pos:end="219:33">=</operator> <name pos:start="219:35" pos:end="219:47">keep_clusters</name> <operator pos:start="219:49" pos:end="219:50">==</operator> <literal type="number" pos:start="219:52" pos:end="219:52">0</literal> <operator pos:start="219:54" pos:end="219:54">?</operator> <name pos:start="219:56" pos:end="219:62">n_start</name> <operator pos:start="219:64" pos:end="219:64">:</operator> <literal type="number" pos:start="219:66" pos:end="219:66">0</literal></expr>,

                <expr pos:start="221:17" pos:end="221:45"><operator pos:start="221:17" pos:end="221:17">.</operator><name pos:start="221:18" pos:end="221:28">nb_clusters</name>    <operator pos:start="221:33" pos:end="221:33">=</operator> <name pos:start="221:35" pos:end="221:45">nb_clusters</name></expr>,

                <expr pos:start="223:17" pos:end="223:71"><operator pos:start="223:17" pos:end="223:17">.</operator><name pos:start="223:18" pos:end="223:29">nb_available</name>   <operator pos:start="223:33" pos:end="223:33">=</operator> <call pos:start="223:35" pos:end="223:71"><name pos:start="223:35" pos:end="223:37">MIN</name><argument_list pos:start="223:38" pos:end="223:71">(<argument pos:start="223:39" pos:end="223:55"><expr pos:start="223:39" pos:end="223:55"><name pos:start="223:39" pos:end="223:55">requested_sectors</name></expr></argument>, <argument pos:start="223:58" pos:end="223:70"><expr pos:start="223:58" pos:end="223:70"><name pos:start="223:58" pos:end="223:70">avail_sectors</name></expr></argument>)</argument_list></call></expr>,

            }</block></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:55"><expr pos:start="227:13" pos:end="227:54"><call pos:start="227:13" pos:end="227:54"><name pos:start="227:13" pos:end="227:30">qemu_co_queue_init</name><argument_list pos:start="227:31" pos:end="227:54">(<argument pos:start="227:32" pos:end="227:53"><expr pos:start="227:32" pos:end="227:53"><operator pos:start="227:32" pos:end="227:32">&amp;</operator><name pos:start="227:33" pos:end="227:53"><name pos:start="227:33" pos:end="227:33">m</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:53">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:69"><expr pos:start="229:13" pos:end="229:68"><call pos:start="229:13" pos:end="229:68"><name pos:start="229:13" pos:end="229:29">QLIST_INSERT_HEAD</name><argument_list pos:start="229:30" pos:end="229:68">(<argument pos:start="229:31" pos:end="229:48"><expr pos:start="229:31" pos:end="229:48"><operator pos:start="229:31" pos:end="229:31">&amp;</operator><name pos:start="229:32" pos:end="229:48"><name pos:start="229:32" pos:end="229:32">s</name><operator pos:start="229:33" pos:end="229:34">-&gt;</operator><name pos:start="229:35" pos:end="229:48">cluster_allocs</name></name></expr></argument>, <argument pos:start="229:51" pos:end="229:51"><expr pos:start="229:51" pos:end="229:51"><name pos:start="229:51" pos:end="229:51">m</name></expr></argument>, <argument pos:start="229:54" pos:end="229:67"><expr pos:start="229:54" pos:end="229:67"><name pos:start="229:54" pos:end="229:67">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:27">/* Some cleanup work */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:69"><expr pos:start="239:5" pos:end="239:68"><name pos:start="239:5" pos:end="239:11">sectors</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <operator pos:start="239:15" pos:end="239:15">(</operator><name pos:start="239:16" pos:end="239:28">keep_clusters</name> <operator pos:start="239:30" pos:end="239:30">+</operator> <name pos:start="239:32" pos:end="239:42">nb_clusters</name><operator pos:start="239:43" pos:end="239:43">)</operator> <operator pos:start="239:45" pos:end="239:46">&lt;&lt;</operator> <operator pos:start="239:48" pos:end="239:48">(</operator><name pos:start="239:49" pos:end="239:63"><name pos:start="239:49" pos:end="239:49">s</name><operator pos:start="239:50" pos:end="239:51">-&gt;</operator><name pos:start="239:52" pos:end="239:63">cluster_bits</name></name> <operator pos:start="239:65" pos:end="239:65">-</operator> <literal type="number" pos:start="239:67" pos:end="239:67">9</literal><operator pos:start="239:68" pos:end="239:68">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:24">(<expr pos:start="241:9" pos:end="241:23"><name pos:start="241:9" pos:end="241:15">sectors</name> <operator pos:start="241:17" pos:end="241:17">&gt;</operator> <name pos:start="241:19" pos:end="241:23">n_end</name></expr>)</condition> <block pos:start="241:26" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:24">

        <expr_stmt pos:start="243:9" pos:end="243:24"><expr pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:15">sectors</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <name pos:start="243:19" pos:end="243:23">n_end</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:30"><expr pos:start="249:5" pos:end="249:29"><call pos:start="249:5" pos:end="249:29"><name pos:start="249:5" pos:end="249:10">assert</name><argument_list pos:start="249:11" pos:end="249:29">(<argument pos:start="249:12" pos:end="249:28"><expr pos:start="249:12" pos:end="249:28"><name pos:start="249:12" pos:end="249:18">sectors</name> <operator pos:start="249:20" pos:end="249:20">&gt;</operator> <name pos:start="249:22" pos:end="249:28">n_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="251:5" pos:end="251:29"><expr pos:start="251:5" pos:end="251:28"><operator pos:start="251:5" pos:end="251:5">*</operator><name pos:start="251:6" pos:end="251:8">num</name> <operator pos:start="251:10" pos:end="251:10">=</operator> <name pos:start="251:12" pos:end="251:18">sectors</name> <operator pos:start="251:20" pos:end="251:20">-</operator> <name pos:start="251:22" pos:end="251:28">n_start</name></expr>;</expr_stmt>



    <return pos:start="255:5" pos:end="255:13">return <expr pos:start="255:12" pos:end="255:12"><literal type="number" pos:start="255:12" pos:end="255:12">0</literal></expr>;</return>



<label pos:start="259:1" pos:end="259:5"><name pos:start="259:1" pos:end="259:4">fail</name>:</label>

    <if_stmt pos:start="261:5" pos:end="265:5"><if pos:start="261:5" pos:end="265:5">if <condition pos:start="261:8" pos:end="261:27">(<expr pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:9">m</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:22">nb_clusters</name></name> <operator pos:start="261:24" pos:end="261:24">&gt;</operator> <literal type="number" pos:start="261:26" pos:end="261:26">0</literal></expr>)</condition> <block pos:start="261:29" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:40">

        <expr_stmt pos:start="263:9" pos:end="263:40"><expr pos:start="263:9" pos:end="263:39"><call pos:start="263:9" pos:end="263:39"><name pos:start="263:9" pos:end="263:20">QLIST_REMOVE</name><argument_list pos:start="263:21" pos:end="263:39">(<argument pos:start="263:22" pos:end="263:22"><expr pos:start="263:22" pos:end="263:22"><name pos:start="263:22" pos:end="263:22">m</name></expr></argument>, <argument pos:start="263:25" pos:end="263:38"><expr pos:start="263:25" pos:end="263:38"><name pos:start="263:25" pos:end="263:38">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="267:5" pos:end="267:15">return <expr pos:start="267:12" pos:end="267:14"><name pos:start="267:12" pos:end="267:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
