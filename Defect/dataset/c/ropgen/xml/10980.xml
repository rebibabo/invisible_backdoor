<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10980.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">decode_luma_residual</name><parameter_list pos:start="1:25" pos:end="7:53">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><specifier pos:start="1:26" pos:end="1:30">const</specifier> <name pos:start="1:32" pos:end="1:42">H264Context</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">h</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:67"><decl pos:start="1:48" pos:end="1:67"><type pos:start="1:48" pos:end="1:67"><name pos:start="1:48" pos:end="1:63">H264SliceContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">sl</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:38">GetBitContext</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:42">gb</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:63"><decl pos:start="3:45" pos:end="3:63"><type pos:start="3:45" pos:end="3:63"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:57">uint8_t</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:63">scan</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:47"><decl pos:start="5:26" pos:end="5:47"><type pos:start="5:26" pos:end="5:47"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:38">uint8_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:47">scan8x8</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:64"><decl pos:start="5:50" pos:end="5:64"><type pos:start="5:50" pos:end="5:64"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:64">pixel_shift</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:36"><decl pos:start="7:26" pos:end="7:36"><type pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:28">int</name></type> <name pos:start="7:30" pos:end="7:36">mb_type</name></decl></parameter>, <parameter pos:start="7:39" pos:end="7:45"><decl pos:start="7:39" pos:end="7:45"><type pos:start="7:39" pos:end="7:45"><name pos:start="7:39" pos:end="7:41">int</name></type> <name pos:start="7:43" pos:end="7:45">cbp</name></decl></parameter>, <parameter pos:start="7:48" pos:end="7:52"><decl pos:start="7:48" pos:end="7:52"><type pos:start="7:48" pos:end="7:52"><name pos:start="7:48" pos:end="7:50">int</name></type> <name pos:start="7:52" pos:end="7:52">p</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="137:1">{<block_content pos:start="11:5" pos:end="135:5">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">i4x4</name></decl>, <decl pos:start="11:15" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:18">i8x8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:60"><decl pos:start="13:5" pos:end="13:59"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:14">qscale</name> <init pos:start="13:16" pos:end="13:59">= <expr pos:start="13:18" pos:end="13:59"><ternary pos:start="13:18" pos:end="13:59"><condition pos:start="13:18" pos:end="13:25"><expr pos:start="13:18" pos:end="13:23"><name pos:start="13:18" pos:end="13:18">p</name> <operator pos:start="13:20" pos:end="13:21">==</operator> <literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr> ?</condition><then pos:start="13:27" pos:end="13:36"> <expr pos:start="13:27" pos:end="13:36"><name pos:start="13:27" pos:end="13:36"><name pos:start="13:27" pos:end="13:28">sl</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:36">qscale</name></name></expr> </then><else pos:start="13:38" pos:end="13:59">: <expr pos:start="13:40" pos:end="13:59"><name pos:start="13:40" pos:end="13:59"><name pos:start="13:40" pos:end="13:41">sl</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:52">chroma_qp</name><index pos:start="13:53" pos:end="13:59">[<expr pos:start="13:54" pos:end="13:58"><name pos:start="13:54" pos:end="13:54">p</name> <operator pos:start="13:56" pos:end="13:56">-</operator> <literal type="number" pos:start="13:58" pos:end="13:58">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="15:5" pos:end="135:5"><if pos:start="15:5" pos:end="67:5">if<condition pos:start="15:7" pos:end="15:30">(<expr pos:start="15:8" pos:end="15:29"><call pos:start="15:8" pos:end="15:29"><name pos:start="15:8" pos:end="15:20">IS_INTRA16x16</name><argument_list pos:start="15:21" pos:end="15:29">(<argument pos:start="15:22" pos:end="15:28"><expr pos:start="15:22" pos:end="15:28"><name pos:start="15:22" pos:end="15:28">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="15:31" pos:end="67:5">{<block_content pos:start="17:9" pos:end="65:9">

        <expr_stmt pos:start="17:9" pos:end="17:40"><expr pos:start="17:9" pos:end="17:39"><call pos:start="17:9" pos:end="17:39"><name pos:start="17:9" pos:end="17:18">AV_ZERO128</name><argument_list pos:start="17:19" pos:end="17:39">(<argument pos:start="17:20" pos:end="17:38"><expr pos:start="17:20" pos:end="17:38"><name pos:start="17:20" pos:end="17:36"><name pos:start="17:20" pos:end="17:21">sl</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:33">mb_luma_dc</name><index pos:start="17:34" pos:end="17:36">[<expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">p</name></expr>]</index></name><operator pos:start="17:37" pos:end="17:37">+</operator><literal type="number" pos:start="17:38" pos:end="17:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:40"><expr pos:start="19:9" pos:end="19:39"><call pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:18">AV_ZERO128</name><argument_list pos:start="19:19" pos:end="19:39">(<argument pos:start="19:20" pos:end="19:38"><expr pos:start="19:20" pos:end="19:38"><name pos:start="19:20" pos:end="19:36"><name pos:start="19:20" pos:end="19:21">sl</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:33">mb_luma_dc</name><index pos:start="19:34" pos:end="19:36">[<expr pos:start="19:35" pos:end="19:35"><name pos:start="19:35" pos:end="19:35">p</name></expr>]</index></name><operator pos:start="19:37" pos:end="19:37">+</operator><literal type="number" pos:start="19:38" pos:end="19:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><call pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:18">AV_ZERO128</name><argument_list pos:start="21:19" pos:end="21:40">(<argument pos:start="21:20" pos:end="21:39"><expr pos:start="21:20" pos:end="21:39"><name pos:start="21:20" pos:end="21:36"><name pos:start="21:20" pos:end="21:21">sl</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:33">mb_luma_dc</name><index pos:start="21:34" pos:end="21:36">[<expr pos:start="21:35" pos:end="21:35"><name pos:start="21:35" pos:end="21:35">p</name></expr>]</index></name><operator pos:start="21:37" pos:end="21:37">+</operator><literal type="number" pos:start="21:38" pos:end="21:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><call pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:18">AV_ZERO128</name><argument_list pos:start="23:19" pos:end="23:40">(<argument pos:start="23:20" pos:end="23:39"><expr pos:start="23:20" pos:end="23:39"><name pos:start="23:20" pos:end="23:36"><name pos:start="23:20" pos:end="23:21">sl</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:33">mb_luma_dc</name><index pos:start="23:34" pos:end="23:36">[<expr pos:start="23:35" pos:end="23:35"><name pos:start="23:35" pos:end="23:35">p</name></expr>]</index></name><operator pos:start="23:37" pos:end="23:37">+</operator><literal type="number" pos:start="23:38" pos:end="23:39">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:103">(<expr pos:start="25:13" pos:end="25:102"><call pos:start="25:13" pos:end="25:98"><name pos:start="25:13" pos:end="25:27">decode_residual</name><argument_list pos:start="25:28" pos:end="25:98">(<argument pos:start="25:29" pos:end="25:29"><expr pos:start="25:29" pos:end="25:29"><name pos:start="25:29" pos:end="25:29">h</name></expr></argument>, <argument pos:start="25:32" pos:end="25:33"><expr pos:start="25:32" pos:end="25:33"><name pos:start="25:32" pos:end="25:33">sl</name></expr></argument>, <argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">gb</name></expr></argument>, <argument pos:start="25:40" pos:end="25:56"><expr pos:start="25:40" pos:end="25:56"><name pos:start="25:40" pos:end="25:56"><name pos:start="25:40" pos:end="25:41">sl</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:53">mb_luma_dc</name><index pos:start="25:54" pos:end="25:56">[<expr pos:start="25:55" pos:end="25:55"><name pos:start="25:55" pos:end="25:55">p</name></expr>]</index></name></expr></argument>, <argument pos:start="25:59" pos:end="25:81"><expr pos:start="25:59" pos:end="25:81"><name pos:start="25:59" pos:end="25:77">LUMA_DC_BLOCK_INDEX</name> <operator pos:start="25:79" pos:end="25:79">+</operator> <name pos:start="25:81" pos:end="25:81">p</name></expr></argument>, <argument pos:start="25:84" pos:end="25:87"><expr pos:start="25:84" pos:end="25:87"><name pos:start="25:84" pos:end="25:87">scan</name></expr></argument>, <argument pos:start="25:90" pos:end="25:93"><expr pos:start="25:90" pos:end="25:93"><name pos:start="25:90" pos:end="25:93">NULL</name></expr></argument>, <argument pos:start="25:96" pos:end="25:97"><expr pos:start="25:96" pos:end="25:97"><literal type="number" pos:start="25:96" pos:end="25:97">16</literal></expr></argument>)</argument_list></call> <operator pos:start="25:100" pos:end="25:100">&lt;</operator> <literal type="number" pos:start="25:102" pos:end="25:102">0</literal></expr>)</condition> <block pos:start="25:105" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return> <comment type="line" pos:start="27:24" pos:end="27:78">//FIXME continue if partitioned and other return -1 too</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:48"><expr pos:start="33:9" pos:end="33:47"><call pos:start="33:9" pos:end="33:47"><name pos:start="33:9" pos:end="33:14">assert</name><argument_list pos:start="33:15" pos:end="33:47">(<argument pos:start="33:16" pos:end="33:46"><expr pos:start="33:16" pos:end="33:46"><operator pos:start="33:16" pos:end="33:16">(</operator><name pos:start="33:17" pos:end="33:19">cbp</name><operator pos:start="33:20" pos:end="33:20">&amp;</operator><literal type="number" pos:start="33:21" pos:end="33:22">15</literal><operator pos:start="33:23" pos:end="33:23">)</operator> <operator pos:start="33:25" pos:end="33:26">==</operator> <literal type="number" pos:start="33:28" pos:end="33:28">0</literal> <operator pos:start="33:30" pos:end="33:31">||</operator> <operator pos:start="33:33" pos:end="33:33">(</operator><name pos:start="33:34" pos:end="33:36">cbp</name><operator pos:start="33:37" pos:end="33:37">&amp;</operator><literal type="number" pos:start="33:38" pos:end="33:39">15</literal><operator pos:start="33:40" pos:end="33:40">)</operator> <operator pos:start="33:42" pos:end="33:43">==</operator> <literal type="number" pos:start="33:45" pos:end="33:46">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="65:9"><if pos:start="37:9" pos:end="59:9">if<condition pos:start="37:11" pos:end="37:18">(<expr pos:start="37:12" pos:end="37:17"><name pos:start="37:12" pos:end="37:14">cbp</name><operator pos:start="37:15" pos:end="37:15">&amp;</operator><literal type="number" pos:start="37:16" pos:end="37:17">15</literal></expr>)</condition><block pos:start="37:19" pos:end="59:9">{<block_content pos:start="39:13" pos:end="57:23">

            <for pos:start="39:13" pos:end="55:13">for<control pos:start="39:16" pos:end="39:39">(<init pos:start="39:17" pos:end="39:23"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:20">i8x8</name><operator pos:start="39:21" pos:end="39:21">=</operator><literal type="number" pos:start="39:22" pos:end="39:22">0</literal></expr>;</init> <condition pos:start="39:25" pos:end="39:31"><expr pos:start="39:25" pos:end="39:30"><name pos:start="39:25" pos:end="39:28">i8x8</name><operator pos:start="39:29" pos:end="39:29">&lt;</operator><literal type="number" pos:start="39:30" pos:end="39:30">4</literal></expr>;</condition> <incr pos:start="39:33" pos:end="39:38"><expr pos:start="39:33" pos:end="39:38"><name pos:start="39:33" pos:end="39:36">i8x8</name><operator pos:start="39:37" pos:end="39:38">++</operator></expr></incr>)</control><block pos:start="39:40" pos:end="55:13">{<block_content pos:start="41:17" pos:end="53:17">

                <for pos:start="41:17" pos:end="53:17">for<control pos:start="41:20" pos:end="41:43">(<init pos:start="41:21" pos:end="41:27"><expr pos:start="41:21" pos:end="41:26"><name pos:start="41:21" pos:end="41:24">i4x4</name><operator pos:start="41:25" pos:end="41:25">=</operator><literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>;</init> <condition pos:start="41:29" pos:end="41:35"><expr pos:start="41:29" pos:end="41:34"><name pos:start="41:29" pos:end="41:32">i4x4</name><operator pos:start="41:33" pos:end="41:33">&lt;</operator><literal type="number" pos:start="41:34" pos:end="41:34">4</literal></expr>;</condition> <incr pos:start="41:37" pos:end="41:42"><expr pos:start="41:37" pos:end="41:42"><name pos:start="41:37" pos:end="41:40">i4x4</name><operator pos:start="41:41" pos:end="41:42">++</operator></expr></incr>)</control><block pos:start="41:44" pos:end="53:17">{<block_content pos:start="43:21" pos:end="51:21">

                    <decl_stmt pos:start="43:21" pos:end="43:58"><decl pos:start="43:21" pos:end="43:57"><type pos:start="43:21" pos:end="43:29"><specifier pos:start="43:21" pos:end="43:25">const</specifier> <name pos:start="43:27" pos:end="43:29">int</name></type> <name pos:start="43:31" pos:end="43:35">index</name><init pos:start="43:36" pos:end="43:57">= <expr pos:start="43:38" pos:end="43:57"><name pos:start="43:38" pos:end="43:41">i4x4</name> <operator pos:start="43:43" pos:end="43:43">+</operator> <literal type="number" pos:start="43:45" pos:end="43:45">4</literal><operator pos:start="43:46" pos:end="43:46">*</operator><name pos:start="43:47" pos:end="43:50">i8x8</name> <operator pos:start="43:52" pos:end="43:52">+</operator> <name pos:start="43:54" pos:end="43:54">p</name><operator pos:start="43:55" pos:end="43:55">*</operator><literal type="number" pos:start="43:56" pos:end="43:57">16</literal></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="45:21" pos:end="51:21"><if pos:start="45:21" pos:end="51:21">if<condition pos:start="45:23" pos:end="47:80">( <expr pos:start="45:25" pos:end="47:78"><call pos:start="45:25" pos:end="47:74"><name pos:start="45:25" pos:end="45:39">decode_residual</name><argument_list pos:start="45:40" pos:end="47:74">(<argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><name pos:start="45:41" pos:end="45:41">h</name></expr></argument>, <argument pos:start="45:44" pos:end="45:45"><expr pos:start="45:44" pos:end="45:45"><name pos:start="45:44" pos:end="45:45">sl</name></expr></argument>, <argument pos:start="45:48" pos:end="45:49"><expr pos:start="45:48" pos:end="45:49"><name pos:start="45:48" pos:end="45:49">gb</name></expr></argument>, <argument pos:start="45:52" pos:end="45:85"><expr pos:start="45:52" pos:end="45:85"><name pos:start="45:52" pos:end="45:57"><name pos:start="45:52" pos:end="45:53">sl</name><operator pos:start="45:54" pos:end="45:55">-&gt;</operator><name pos:start="45:56" pos:end="45:57">mb</name></name> <operator pos:start="45:59" pos:end="45:59">+</operator> <operator pos:start="45:61" pos:end="45:61">(</operator><literal type="number" pos:start="45:62" pos:end="45:63">16</literal><operator pos:start="45:64" pos:end="45:64">*</operator><name pos:start="45:65" pos:end="45:69">index</name> <operator pos:start="45:71" pos:end="45:72">&lt;&lt;</operator> <name pos:start="45:74" pos:end="45:84">pixel_shift</name><operator pos:start="45:85" pos:end="45:85">)</operator></expr></argument>,

                        <argument pos:start="47:25" pos:end="47:29"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:29">index</name></expr></argument>, <argument pos:start="47:32" pos:end="47:39"><expr pos:start="47:32" pos:end="47:39"><name pos:start="47:32" pos:end="47:35">scan</name> <operator pos:start="47:37" pos:end="47:37">+</operator> <literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr></argument>, <argument pos:start="47:42" pos:end="47:69"><expr pos:start="47:42" pos:end="47:69"><name pos:start="47:42" pos:end="47:69"><name pos:start="47:42" pos:end="47:42">h</name><operator pos:start="47:43" pos:end="47:44">-&gt;</operator><name pos:start="47:45" pos:end="47:58">dequant4_coeff</name><index pos:start="47:59" pos:end="47:61">[<expr pos:start="47:60" pos:end="47:60"><name pos:start="47:60" pos:end="47:60">p</name></expr>]</index><index pos:start="47:62" pos:end="47:69">[<expr pos:start="47:63" pos:end="47:68"><name pos:start="47:63" pos:end="47:68">qscale</name></expr>]</index></name></expr></argument>, <argument pos:start="47:72" pos:end="47:73"><expr pos:start="47:72" pos:end="47:73"><literal type="number" pos:start="47:72" pos:end="47:73">15</literal></expr></argument>)</argument_list></call> <operator pos:start="47:76" pos:end="47:76">&lt;</operator> <literal type="number" pos:start="47:78" pos:end="47:78">0</literal></expr> )</condition><block pos:start="47:81" pos:end="51:21">{<block_content pos:start="49:25" pos:end="49:34">

                        <return pos:start="49:25" pos:end="49:34">return <expr pos:start="49:32" pos:end="49:33"><operator pos:start="49:32" pos:end="49:32">-</operator><literal type="number" pos:start="49:33" pos:end="49:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><literal type="number" pos:start="57:20" pos:end="57:22">0xf</literal></expr>;</return>

        </block_content>}</block></if><else pos:start="59:10" pos:end="65:9">else<block pos:start="59:14" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:21">

            <expr_stmt pos:start="61:13" pos:end="61:82"><expr pos:start="61:13" pos:end="61:81"><call pos:start="61:13" pos:end="61:81"><name pos:start="61:13" pos:end="61:26">fill_rectangle</name><argument_list pos:start="61:27" pos:end="61:81">(<argument pos:start="61:28" pos:end="61:65"><expr pos:start="61:28" pos:end="61:65"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:65"><name pos:start="61:29" pos:end="61:30">sl</name><operator pos:start="61:31" pos:end="61:32">-&gt;</operator><name pos:start="61:33" pos:end="61:52">non_zero_count_cache</name><index pos:start="61:53" pos:end="61:65">[<expr pos:start="61:54" pos:end="61:64"><name pos:start="61:54" pos:end="61:64"><name pos:start="61:54" pos:end="61:58">scan8</name><index pos:start="61:59" pos:end="61:64">[<expr pos:start="61:60" pos:end="61:63"><name pos:start="61:60" pos:end="61:60">p</name><operator pos:start="61:61" pos:end="61:61">*</operator><literal type="number" pos:start="61:62" pos:end="61:63">16</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument pos:start="61:68" pos:end="61:68"><expr pos:start="61:68" pos:end="61:68"><literal type="number" pos:start="61:68" pos:end="61:68">4</literal></expr></argument>, <argument pos:start="61:71" pos:end="61:71"><expr pos:start="61:71" pos:end="61:71"><literal type="number" pos:start="61:71" pos:end="61:71">4</literal></expr></argument>, <argument pos:start="61:74" pos:end="61:74"><expr pos:start="61:74" pos:end="61:74"><literal type="number" pos:start="61:74" pos:end="61:74">8</literal></expr></argument>, <argument pos:start="61:77" pos:end="61:77"><expr pos:start="61:77" pos:end="61:77"><literal type="number" pos:start="61:77" pos:end="61:77">0</literal></expr></argument>, <argument pos:start="61:80" pos:end="61:80"><expr pos:start="61:80" pos:end="61:80"><literal type="number" pos:start="61:80" pos:end="61:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:21">return <expr pos:start="63:20" pos:end="63:20"><literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="67:6" pos:end="135:5">else<block pos:start="67:10" pos:end="135:5">{<block_content pos:start="69:9" pos:end="133:23">

        <decl_stmt pos:start="69:9" pos:end="69:48"><decl pos:start="69:9" pos:end="69:47"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:15">cqm</name> <init pos:start="69:17" pos:end="69:47">= <expr pos:start="69:19" pos:end="69:47"><operator pos:start="69:19" pos:end="69:19">(</operator><ternary pos:start="69:20" pos:end="69:44"><condition pos:start="69:20" pos:end="69:40"><expr pos:start="69:20" pos:end="69:38"><call pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:27">IS_INTRA</name><argument_list pos:start="69:28" pos:end="69:38">( <argument pos:start="69:30" pos:end="69:36"><expr pos:start="69:30" pos:end="69:36"><name pos:start="69:30" pos:end="69:36">mb_type</name></expr></argument> )</argument_list></call></expr> ?</condition><then pos:start="69:42" pos:end="69:42"> <expr pos:start="69:42" pos:end="69:42"><literal type="number" pos:start="69:42" pos:end="69:42">0</literal></expr></then><else pos:start="69:43" pos:end="69:44">:<expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">3</literal></expr></else></ternary><operator pos:start="69:45" pos:end="69:45">)</operator><operator pos:start="69:46" pos:end="69:46">+</operator><name pos:start="69:47" pos:end="69:47">p</name></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="71:9" pos:end="71:101">/* For CAVLC 4:4:4, we need to keep track of the luma 8x8 CBP for deblocking nnz purposes. */</comment>

        <decl_stmt pos:start="73:9" pos:end="73:24"><decl pos:start="73:9" pos:end="73:23"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:19">new_cbp</name> <init pos:start="73:21" pos:end="73:23">= <expr pos:start="73:23" pos:end="73:23"><literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr></init></decl>;</decl_stmt>

        <for pos:start="75:9" pos:end="131:9">for<control pos:start="75:12" pos:end="75:35">(<init pos:start="75:13" pos:end="75:19"><expr pos:start="75:13" pos:end="75:18"><name pos:start="75:13" pos:end="75:16">i8x8</name><operator pos:start="75:17" pos:end="75:17">=</operator><literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:27"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:24">i8x8</name><operator pos:start="75:25" pos:end="75:25">&lt;</operator><literal type="number" pos:start="75:26" pos:end="75:26">4</literal></expr>;</condition> <incr pos:start="75:29" pos:end="75:34"><expr pos:start="75:29" pos:end="75:34"><name pos:start="75:29" pos:end="75:32">i8x8</name><operator pos:start="75:33" pos:end="75:34">++</operator></expr></incr>)</control><block pos:start="75:36" pos:end="131:9">{<block_content pos:start="77:13" pos:end="129:13">

            <if_stmt pos:start="77:13" pos:end="129:13"><if pos:start="77:13" pos:end="123:13">if<condition pos:start="77:15" pos:end="77:31">(<expr pos:start="77:16" pos:end="77:30"><name pos:start="77:16" pos:end="77:18">cbp</name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <operator pos:start="77:22" pos:end="77:22">(</operator><literal type="number" pos:start="77:23" pos:end="77:23">1</literal><operator pos:start="77:24" pos:end="77:25">&lt;&lt;</operator><name pos:start="77:26" pos:end="77:29">i8x8</name><operator pos:start="77:30" pos:end="77:30">)</operator></expr>)</condition><block pos:start="77:32" pos:end="123:13">{<block_content pos:start="79:17" pos:end="121:17">

                <if_stmt pos:start="79:17" pos:end="121:17"><if pos:start="79:17" pos:end="103:17">if<condition pos:start="79:19" pos:end="79:38">(<expr pos:start="79:20" pos:end="79:37"><call pos:start="79:20" pos:end="79:37"><name pos:start="79:20" pos:end="79:28">IS_8x8DCT</name><argument_list pos:start="79:29" pos:end="79:37">(<argument pos:start="79:30" pos:end="79:36"><expr pos:start="79:30" pos:end="79:36"><name pos:start="79:30" pos:end="79:36">mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="79:39" pos:end="103:17">{<block_content pos:start="81:21" pos:end="101:48">

                    <decl_stmt pos:start="81:21" pos:end="81:73"><decl pos:start="81:21" pos:end="81:72"><type pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:27">int16_t</name> <modifier pos:start="81:29" pos:end="81:29">*</modifier></type><name pos:start="81:30" pos:end="81:32">buf</name> <init pos:start="81:34" pos:end="81:72">= <expr pos:start="81:36" pos:end="81:72"><operator pos:start="81:36" pos:end="81:36">&amp;</operator><name pos:start="81:37" pos:end="81:72"><name pos:start="81:37" pos:end="81:38">sl</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:42">mb</name><index pos:start="81:43" pos:end="81:72">[<expr pos:start="81:44" pos:end="81:71"><literal type="number" pos:start="81:44" pos:end="81:45">64</literal><operator pos:start="81:46" pos:end="81:46">*</operator><name pos:start="81:47" pos:end="81:50">i8x8</name><operator pos:start="81:51" pos:end="81:51">+</operator><literal type="number" pos:start="81:52" pos:end="81:54">256</literal><operator pos:start="81:55" pos:end="81:55">*</operator><name pos:start="81:56" pos:end="81:56">p</name> <operator pos:start="81:58" pos:end="81:59">&lt;&lt;</operator> <name pos:start="81:61" pos:end="81:71">pixel_shift</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="83:21" pos:end="83:33"><decl pos:start="83:21" pos:end="83:32"><type pos:start="83:21" pos:end="83:29"><name pos:start="83:21" pos:end="83:27">uint8_t</name> <modifier pos:start="83:29" pos:end="83:29">*</modifier></type><name pos:start="83:30" pos:end="83:32">nnz</name></decl>;</decl_stmt>

                    <for pos:start="85:21" pos:end="95:21">for<control pos:start="85:24" pos:end="85:47">(<init pos:start="85:25" pos:end="85:31"><expr pos:start="85:25" pos:end="85:30"><name pos:start="85:25" pos:end="85:28">i4x4</name><operator pos:start="85:29" pos:end="85:29">=</operator><literal type="number" pos:start="85:30" pos:end="85:30">0</literal></expr>;</init> <condition pos:start="85:33" pos:end="85:39"><expr pos:start="85:33" pos:end="85:38"><name pos:start="85:33" pos:end="85:36">i4x4</name><operator pos:start="85:37" pos:end="85:37">&lt;</operator><literal type="number" pos:start="85:38" pos:end="85:38">4</literal></expr>;</condition> <incr pos:start="85:41" pos:end="85:46"><expr pos:start="85:41" pos:end="85:46"><name pos:start="85:41" pos:end="85:44">i4x4</name><operator pos:start="85:45" pos:end="85:46">++</operator></expr></incr>)</control><block pos:start="85:48" pos:end="95:21">{<block_content pos:start="87:25" pos:end="93:38">

                        <decl_stmt pos:start="87:25" pos:end="87:62"><decl pos:start="87:25" pos:end="87:61"><type pos:start="87:25" pos:end="87:33"><specifier pos:start="87:25" pos:end="87:29">const</specifier> <name pos:start="87:31" pos:end="87:33">int</name></type> <name pos:start="87:35" pos:end="87:39">index</name><init pos:start="87:40" pos:end="87:61">= <expr pos:start="87:42" pos:end="87:61"><name pos:start="87:42" pos:end="87:45">i4x4</name> <operator pos:start="87:47" pos:end="87:47">+</operator> <literal type="number" pos:start="87:49" pos:end="87:49">4</literal><operator pos:start="87:50" pos:end="87:50">*</operator><name pos:start="87:51" pos:end="87:54">i8x8</name> <operator pos:start="87:56" pos:end="87:56">+</operator> <name pos:start="87:58" pos:end="87:58">p</name><operator pos:start="87:59" pos:end="87:59">*</operator><literal type="number" pos:start="87:60" pos:end="87:61">16</literal></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="89:25" pos:end="93:38"><if pos:start="89:25" pos:end="93:38">if<condition pos:start="89:27" pos:end="91:85">( <expr pos:start="89:29" pos:end="91:83"><call pos:start="89:29" pos:end="91:79"><name pos:start="89:29" pos:end="89:43">decode_residual</name><argument_list pos:start="89:44" pos:end="91:79">(<argument pos:start="89:45" pos:end="89:45"><expr pos:start="89:45" pos:end="89:45"><name pos:start="89:45" pos:end="89:45">h</name></expr></argument>, <argument pos:start="89:48" pos:end="89:49"><expr pos:start="89:48" pos:end="89:49"><name pos:start="89:48" pos:end="89:49">sl</name></expr></argument>, <argument pos:start="89:52" pos:end="89:53"><expr pos:start="89:52" pos:end="89:53"><name pos:start="89:52" pos:end="89:53">gb</name></expr></argument>, <argument pos:start="89:56" pos:end="89:58"><expr pos:start="89:56" pos:end="89:58"><name pos:start="89:56" pos:end="89:58">buf</name></expr></argument>, <argument pos:start="89:61" pos:end="89:65"><expr pos:start="89:61" pos:end="89:65"><name pos:start="89:61" pos:end="89:65">index</name></expr></argument>, <argument pos:start="89:68" pos:end="89:82"><expr pos:start="89:68" pos:end="89:82"><name pos:start="89:68" pos:end="89:74">scan8x8</name><operator pos:start="89:75" pos:end="89:75">+</operator><literal type="number" pos:start="89:76" pos:end="89:77">16</literal><operator pos:start="89:78" pos:end="89:78">*</operator><name pos:start="89:79" pos:end="89:82">i4x4</name></expr></argument>,

                                            <argument pos:start="91:45" pos:end="91:74"><expr pos:start="91:45" pos:end="91:74"><name pos:start="91:45" pos:end="91:74"><name pos:start="91:45" pos:end="91:45">h</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:61">dequant8_coeff</name><index pos:start="91:62" pos:end="91:66">[<expr pos:start="91:63" pos:end="91:65"><name pos:start="91:63" pos:end="91:65">cqm</name></expr>]</index><index pos:start="91:67" pos:end="91:74">[<expr pos:start="91:68" pos:end="91:73"><name pos:start="91:68" pos:end="91:73">qscale</name></expr>]</index></name></expr></argument>, <argument pos:start="91:77" pos:end="91:78"><expr pos:start="91:77" pos:end="91:78"><literal type="number" pos:start="91:77" pos:end="91:78">16</literal></expr></argument>)</argument_list></call> <operator pos:start="91:81" pos:end="91:81">&lt;</operator> <literal type="number" pos:start="91:83" pos:end="91:83">0</literal></expr> )</condition><block type="pseudo" pos:start="93:29" pos:end="93:38"><block_content pos:start="93:29" pos:end="93:38">

                            <return pos:start="93:29" pos:end="93:38">return <expr pos:start="93:36" pos:end="93:37"><operator pos:start="93:36" pos:end="93:36">-</operator><literal type="number" pos:start="93:37" pos:end="93:37">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="97:21" pos:end="97:78"><expr pos:start="97:21" pos:end="97:77"><name pos:start="97:21" pos:end="97:23">nnz</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <operator pos:start="97:27" pos:end="97:27">&amp;</operator><name pos:start="97:28" pos:end="97:77"><name pos:start="97:28" pos:end="97:29">sl</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:51">non_zero_count_cache</name><index pos:start="97:52" pos:end="97:77">[<expr pos:start="97:53" pos:end="97:76"><name pos:start="97:53" pos:end="97:76"><name pos:start="97:53" pos:end="97:57">scan8</name><index pos:start="97:58" pos:end="97:76">[<expr pos:start="97:59" pos:end="97:75"><literal type="number" pos:start="97:59" pos:end="97:59">4</literal> <operator pos:start="97:61" pos:end="97:61">*</operator> <name pos:start="97:63" pos:end="97:66">i8x8</name> <operator pos:start="97:68" pos:end="97:68">+</operator> <name pos:start="97:70" pos:end="97:70">p</name> <operator pos:start="97:72" pos:end="97:72">*</operator> <literal type="number" pos:start="97:74" pos:end="97:75">16</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:55"><expr pos:start="99:21" pos:end="99:54"><name pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:23">nnz</name><index pos:start="99:24" pos:end="99:26">[<expr pos:start="99:25" pos:end="99:25"><literal type="number" pos:start="99:25" pos:end="99:25">0</literal></expr>]</index></name> <operator pos:start="99:28" pos:end="99:29">+=</operator> <name pos:start="99:31" pos:end="99:36"><name pos:start="99:31" pos:end="99:33">nnz</name><index pos:start="99:34" pos:end="99:36">[<expr pos:start="99:35" pos:end="99:35"><literal type="number" pos:start="99:35" pos:end="99:35">1</literal></expr>]</index></name> <operator pos:start="99:38" pos:end="99:38">+</operator> <name pos:start="99:40" pos:end="99:45"><name pos:start="99:40" pos:end="99:42">nnz</name><index pos:start="99:43" pos:end="99:45">[<expr pos:start="99:44" pos:end="99:44"><literal type="number" pos:start="99:44" pos:end="99:44">8</literal></expr>]</index></name> <operator pos:start="99:47" pos:end="99:47">+</operator> <name pos:start="99:49" pos:end="99:54"><name pos:start="99:49" pos:end="99:51">nnz</name><index pos:start="99:52" pos:end="99:54">[<expr pos:start="99:53" pos:end="99:53"><literal type="number" pos:start="99:53" pos:end="99:53">9</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:48"><expr pos:start="101:21" pos:end="101:47"><name pos:start="101:21" pos:end="101:27">new_cbp</name> <operator pos:start="101:29" pos:end="101:30">|=</operator> <operator pos:start="101:32" pos:end="101:32">!</operator><operator pos:start="101:33" pos:end="101:33">!</operator><name pos:start="101:34" pos:end="101:39"><name pos:start="101:34" pos:end="101:36">nnz</name><index pos:start="101:37" pos:end="101:39">[<expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr>]</index></name> <operator pos:start="101:41" pos:end="101:42">&lt;&lt;</operator> <name pos:start="101:44" pos:end="101:47">i8x8</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="103:18" pos:end="121:17">else<block pos:start="103:22" pos:end="121:17">{<block_content pos:start="105:21" pos:end="119:21">

                    <for pos:start="105:21" pos:end="119:21">for<control pos:start="105:24" pos:end="105:47">(<init pos:start="105:25" pos:end="105:31"><expr pos:start="105:25" pos:end="105:30"><name pos:start="105:25" pos:end="105:28">i4x4</name><operator pos:start="105:29" pos:end="105:29">=</operator><literal type="number" pos:start="105:30" pos:end="105:30">0</literal></expr>;</init> <condition pos:start="105:33" pos:end="105:39"><expr pos:start="105:33" pos:end="105:38"><name pos:start="105:33" pos:end="105:36">i4x4</name><operator pos:start="105:37" pos:end="105:37">&lt;</operator><literal type="number" pos:start="105:38" pos:end="105:38">4</literal></expr>;</condition> <incr pos:start="105:41" pos:end="105:46"><expr pos:start="105:41" pos:end="105:46"><name pos:start="105:41" pos:end="105:44">i4x4</name><operator pos:start="105:45" pos:end="105:46">++</operator></expr></incr>)</control><block pos:start="105:48" pos:end="119:21">{<block_content pos:start="107:25" pos:end="117:82">

                        <decl_stmt pos:start="107:25" pos:end="107:62"><decl pos:start="107:25" pos:end="107:61"><type pos:start="107:25" pos:end="107:33"><specifier pos:start="107:25" pos:end="107:29">const</specifier> <name pos:start="107:31" pos:end="107:33">int</name></type> <name pos:start="107:35" pos:end="107:39">index</name><init pos:start="107:40" pos:end="107:61">= <expr pos:start="107:42" pos:end="107:61"><name pos:start="107:42" pos:end="107:45">i4x4</name> <operator pos:start="107:47" pos:end="107:47">+</operator> <literal type="number" pos:start="107:49" pos:end="107:49">4</literal><operator pos:start="107:50" pos:end="107:50">*</operator><name pos:start="107:51" pos:end="107:54">i8x8</name> <operator pos:start="107:56" pos:end="107:56">+</operator> <name pos:start="107:58" pos:end="107:58">p</name><operator pos:start="107:59" pos:end="107:59">*</operator><literal type="number" pos:start="107:60" pos:end="107:61">16</literal></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="109:25" pos:end="115:25"><if pos:start="109:25" pos:end="115:25">if<condition pos:start="109:27" pos:end="111:91">( <expr pos:start="109:29" pos:end="111:89"><call pos:start="109:29" pos:end="111:85"><name pos:start="109:29" pos:end="109:43">decode_residual</name><argument_list pos:start="109:44" pos:end="111:85">(<argument pos:start="109:45" pos:end="109:45"><expr pos:start="109:45" pos:end="109:45"><name pos:start="109:45" pos:end="109:45">h</name></expr></argument>, <argument pos:start="109:48" pos:end="109:49"><expr pos:start="109:48" pos:end="109:49"><name pos:start="109:48" pos:end="109:49">sl</name></expr></argument>, <argument pos:start="109:52" pos:end="109:53"><expr pos:start="109:52" pos:end="109:53"><name pos:start="109:52" pos:end="109:53">gb</name></expr></argument>, <argument pos:start="109:56" pos:end="109:89"><expr pos:start="109:56" pos:end="109:89"><name pos:start="109:56" pos:end="109:61"><name pos:start="109:56" pos:end="109:57">sl</name><operator pos:start="109:58" pos:end="109:59">-&gt;</operator><name pos:start="109:60" pos:end="109:61">mb</name></name> <operator pos:start="109:63" pos:end="109:63">+</operator> <operator pos:start="109:65" pos:end="109:65">(</operator><literal type="number" pos:start="109:66" pos:end="109:67">16</literal><operator pos:start="109:68" pos:end="109:68">*</operator><name pos:start="109:69" pos:end="109:73">index</name> <operator pos:start="109:75" pos:end="109:76">&lt;&lt;</operator> <name pos:start="109:78" pos:end="109:88">pixel_shift</name><operator pos:start="109:89" pos:end="109:89">)</operator></expr></argument>, <argument pos:start="109:92" pos:end="109:96"><expr pos:start="109:92" pos:end="109:96"><name pos:start="109:92" pos:end="109:96">index</name></expr></argument>,

                                            <argument pos:start="111:45" pos:end="111:48"><expr pos:start="111:45" pos:end="111:48"><name pos:start="111:45" pos:end="111:48">scan</name></expr></argument>, <argument pos:start="111:51" pos:end="111:80"><expr pos:start="111:51" pos:end="111:80"><name pos:start="111:51" pos:end="111:80"><name pos:start="111:51" pos:end="111:51">h</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:67">dequant4_coeff</name><index pos:start="111:68" pos:end="111:72">[<expr pos:start="111:69" pos:end="111:71"><name pos:start="111:69" pos:end="111:71">cqm</name></expr>]</index><index pos:start="111:73" pos:end="111:80">[<expr pos:start="111:74" pos:end="111:79"><name pos:start="111:74" pos:end="111:79">qscale</name></expr>]</index></name></expr></argument>, <argument pos:start="111:83" pos:end="111:84"><expr pos:start="111:83" pos:end="111:84"><literal type="number" pos:start="111:83" pos:end="111:84">16</literal></expr></argument>)</argument_list></call> <operator pos:start="111:87" pos:end="111:87">&lt;</operator> <literal type="number" pos:start="111:89" pos:end="111:89">0</literal></expr> )</condition><block pos:start="111:92" pos:end="115:25">{<block_content pos:start="113:29" pos:end="113:38">

                            <return pos:start="113:29" pos:end="113:38">return <expr pos:start="113:36" pos:end="113:37"><operator pos:start="113:36" pos:end="113:36">-</operator><literal type="number" pos:start="113:37" pos:end="113:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="117:25" pos:end="117:82"><expr pos:start="117:25" pos:end="117:81"><name pos:start="117:25" pos:end="117:31">new_cbp</name> <operator pos:start="117:33" pos:end="117:34">|=</operator> <name pos:start="117:36" pos:end="117:73"><name pos:start="117:36" pos:end="117:37">sl</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:59">non_zero_count_cache</name><index pos:start="117:60" pos:end="117:73">[<expr pos:start="117:61" pos:end="117:72"><name pos:start="117:61" pos:end="117:72"><name pos:start="117:61" pos:end="117:65">scan8</name><index pos:start="117:66" pos:end="117:72">[<expr pos:start="117:67" pos:end="117:71"><name pos:start="117:67" pos:end="117:71">index</name></expr>]</index></name></expr>]</index></name> <operator pos:start="117:75" pos:end="117:76">&lt;&lt;</operator> <name pos:start="117:78" pos:end="117:81">i8x8</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if><else pos:start="123:14" pos:end="129:13">else<block pos:start="123:18" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:54">

                <decl_stmt pos:start="125:17" pos:end="125:90"><decl pos:start="125:17" pos:end="125:89"><type pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:23">uint8_t</name> <modifier pos:start="125:25" pos:end="125:25">*</modifier> <specifier pos:start="125:27" pos:end="125:31">const</specifier></type> <name pos:start="125:33" pos:end="125:35">nnz</name> <init pos:start="125:37" pos:end="125:89">= <expr pos:start="125:39" pos:end="125:89"><operator pos:start="125:39" pos:end="125:39">&amp;</operator><name pos:start="125:40" pos:end="125:89"><name pos:start="125:40" pos:end="125:41">sl</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:63">non_zero_count_cache</name><index pos:start="125:64" pos:end="125:89">[<expr pos:start="125:65" pos:end="125:88"><name pos:start="125:65" pos:end="125:88"><name pos:start="125:65" pos:end="125:69">scan8</name><index pos:start="125:70" pos:end="125:88">[<expr pos:start="125:71" pos:end="125:87"><literal type="number" pos:start="125:71" pos:end="125:71">4</literal> <operator pos:start="125:73" pos:end="125:73">*</operator> <name pos:start="125:75" pos:end="125:78">i8x8</name> <operator pos:start="125:80" pos:end="125:80">+</operator> <name pos:start="125:82" pos:end="125:82">p</name> <operator pos:start="125:84" pos:end="125:84">*</operator> <literal type="number" pos:start="125:86" pos:end="125:87">16</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:54"><expr pos:start="127:17" pos:end="127:53"><name pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:19">nnz</name><index pos:start="127:20" pos:end="127:22">[<expr pos:start="127:21" pos:end="127:21"><literal type="number" pos:start="127:21" pos:end="127:21">0</literal></expr>]</index></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <name pos:start="127:26" pos:end="127:31"><name pos:start="127:26" pos:end="127:28">nnz</name><index pos:start="127:29" pos:end="127:31">[<expr pos:start="127:30" pos:end="127:30"><literal type="number" pos:start="127:30" pos:end="127:30">1</literal></expr>]</index></name> <operator pos:start="127:33" pos:end="127:33">=</operator> <name pos:start="127:35" pos:end="127:40"><name pos:start="127:35" pos:end="127:37">nnz</name><index pos:start="127:38" pos:end="127:40">[<expr pos:start="127:39" pos:end="127:39"><literal type="number" pos:start="127:39" pos:end="127:39">8</literal></expr>]</index></name> <operator pos:start="127:42" pos:end="127:42">=</operator> <name pos:start="127:44" pos:end="127:49"><name pos:start="127:44" pos:end="127:46">nnz</name><index pos:start="127:47" pos:end="127:49">[<expr pos:start="127:48" pos:end="127:48"><literal type="number" pos:start="127:48" pos:end="127:48">9</literal></expr>]</index></name> <operator pos:start="127:51" pos:end="127:51">=</operator> <literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <return pos:start="133:9" pos:end="133:23">return <expr pos:start="133:16" pos:end="133:22"><name pos:start="133:16" pos:end="133:22">new_cbp</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
