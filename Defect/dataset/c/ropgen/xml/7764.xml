<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7764.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:35">exynos4210_pmu_read</name><parameter_list pos:start="1:36" pos:end="3:50">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:75"><decl pos:start="1:51" pos:end="1:75"><type pos:start="1:51" pos:end="1:75"><name pos:start="1:51" pos:end="1:68">target_phys_addr_t</name></type> <name pos:start="1:70" pos:end="1:75">offset</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:44">unsigned</name></type> <name pos:start="3:46" pos:end="3:49">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="35:1">{<block_content pos:start="7:5" pos:end="33:13">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">Exynos4210PmuState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:47">Exynos4210PmuState</name> <operator pos:start="7:49" pos:end="7:49">*</operator><operator pos:start="7:50" pos:end="7:50">)</operator><name pos:start="7:51" pos:end="7:56">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:28"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:26">Exynos4210PmuReg</name> <modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:33">reg_p</name> <init pos:start="11:35" pos:end="11:55">= <expr pos:start="11:37" pos:end="11:55"><name pos:start="11:37" pos:end="11:55">exynos4210_pmu_regs</name></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="29:5">for <control pos:start="15:9" pos:end="15:46">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:41"><expr pos:start="15:17" pos:end="15:40"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:40">PMU_NUM_OF_REGISTERS</name></expr>;</condition> <incr pos:start="15:43" pos:end="15:45"><expr pos:start="15:43" pos:end="15:45"><name pos:start="15:43" pos:end="15:43">i</name><operator pos:start="15:44" pos:end="15:45">++</operator></expr></incr>)</control> <block pos:start="15:48" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:16">

        <if_stmt pos:start="17:9" pos:end="25:9"><if pos:start="17:9" pos:end="25:9">if <condition pos:start="17:12" pos:end="17:36">(<expr pos:start="17:13" pos:end="17:35"><name pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:17">reg_p</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:25">offset</name></name> <operator pos:start="17:27" pos:end="17:28">==</operator> <name pos:start="17:30" pos:end="17:35">offset</name></expr>)</condition> <block pos:start="17:38" pos:end="25:9">{<block_content pos:start="19:13" pos:end="23:29">

            <expr_stmt pos:start="19:13" pos:end="21:64"><expr pos:start="19:13" pos:end="21:63"><call pos:start="19:13" pos:end="21:63"><name pos:start="19:13" pos:end="19:30">PRINT_DEBUG_EXTEND</name><argument_list pos:start="19:31" pos:end="21:63">(<argument pos:start="19:32" pos:end="19:56"><expr pos:start="19:32" pos:end="19:56"><literal type="string" pos:start="19:32" pos:end="19:56">"%s [0x%04x] -&gt; 0x%04x\n"</literal></expr></argument>, <argument pos:start="19:59" pos:end="19:69"><expr pos:start="19:59" pos:end="19:69"><name pos:start="19:59" pos:end="19:69"><name pos:start="19:59" pos:end="19:63">reg_p</name><operator pos:start="19:64" pos:end="19:65">-&gt;</operator><name pos:start="19:66" pos:end="19:69">name</name></name></expr></argument>,

                                   <argument pos:start="21:36" pos:end="21:51"><expr pos:start="21:36" pos:end="21:51"><operator pos:start="21:36" pos:end="21:36">(</operator><name pos:start="21:37" pos:end="21:44">uint32_t</name><operator pos:start="21:45" pos:end="21:45">)</operator><name pos:start="21:46" pos:end="21:51">offset</name></expr></argument>, <argument pos:start="21:54" pos:end="21:62"><expr pos:start="21:54" pos:end="21:62"><name pos:start="21:54" pos:end="21:62"><name pos:start="21:54" pos:end="21:54">s</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:59">reg</name><index pos:start="21:60" pos:end="21:62">[<expr pos:start="21:61" pos:end="21:61"><name pos:start="21:61" pos:end="21:61">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="23:13" pos:end="23:29">return <expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:20">s</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:25">reg</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><name pos:start="23:27" pos:end="23:27">i</name></expr>]</index></name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:13">reg_p</name><operator pos:start="27:14" pos:end="27:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="31:5" pos:end="31:78"><expr pos:start="31:5" pos:end="31:77"><call pos:start="31:5" pos:end="31:77"><name pos:start="31:5" pos:end="31:15">PRINT_DEBUG</name><argument_list pos:start="31:16" pos:end="31:77">(<argument pos:start="31:17" pos:end="31:58"><expr pos:start="31:17" pos:end="31:58"><literal type="string" pos:start="31:17" pos:end="31:58">"QEMU PMU ERROR: bad read offset 0x%04x\n"</literal></expr></argument>, <argument pos:start="31:61" pos:end="31:76"><expr pos:start="31:61" pos:end="31:76"><operator pos:start="31:61" pos:end="31:61">(</operator><name pos:start="31:62" pos:end="31:69">uint32_t</name><operator pos:start="31:70" pos:end="31:70">)</operator><name pos:start="31:71" pos:end="31:76">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="33:5" pos:end="33:13">return <expr pos:start="33:12" pos:end="33:12"><literal type="number" pos:start="33:12" pos:end="33:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
