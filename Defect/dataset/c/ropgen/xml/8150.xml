<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8150.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">cpu_x86_signal_handler</name><parameter_list pos:start="1:27" pos:end="3:37">(<parameter pos:start="1:28" pos:end="1:42"><decl pos:start="1:28" pos:end="1:42"><type pos:start="1:28" pos:end="1:42"><name pos:start="1:28" pos:end="1:30">int</name></type> <name pos:start="1:32" pos:end="1:42">host_signum</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:50">struct</name> <name pos:start="1:52" pos:end="1:58">siginfo</name></name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>, 

                           <parameter pos:start="3:28" pos:end="3:36"><decl pos:start="3:28" pos:end="3:36"><type pos:start="3:28" pos:end="3:36"><name pos:start="3:28" pos:end="3:31">void</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">puc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:48">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint32_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">regs</name> <init pos:start="7:20" pos:end="7:43">= <expr pos:start="7:22" pos:end="7:43"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:30">uint32_t</name> <operator pos:start="7:32" pos:end="7:32">*</operator><operator pos:start="7:33" pos:end="7:33">)</operator><operator pos:start="7:34" pos:end="7:34">(</operator><name pos:start="7:35" pos:end="7:38">info</name> <operator pos:start="7:40" pos:end="7:40">+</operator> <literal type="number" pos:start="7:42" pos:end="7:42">1</literal><operator pos:start="7:43" pos:end="7:43">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:17">sigmask</name> <init pos:start="9:19" pos:end="9:31">= <expr pos:start="9:21" pos:end="9:31"><operator pos:start="9:21" pos:end="9:21">(</operator><name pos:start="9:22" pos:end="9:25">regs</name> <operator pos:start="9:27" pos:end="9:27">+</operator> <literal type="number" pos:start="9:29" pos:end="9:30">20</literal><operator pos:start="9:31" pos:end="9:31">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:20">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">is_write</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:17">insn</name></decl>;</decl_stmt>

    

    <comment type="block" pos:start="19:5" pos:end="19:49">/* XXX: is there a standard glibc define ? */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:6">pc</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <name pos:start="21:10" pos:end="21:16"><name pos:start="21:10" pos:end="21:13">regs</name><index pos:start="21:14" pos:end="21:16">[<expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:57">/* XXX: need kernel patch to get write flag faster */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:12">is_write</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:8">insn</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <operator pos:start="27:12" pos:end="27:12">*</operator><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:21">uint32_t</name> <operator pos:start="27:23" pos:end="27:23">*</operator><operator pos:start="27:24" pos:end="27:24">)</operator><name pos:start="27:25" pos:end="27:26">pc</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="53:5"><if pos:start="29:5" pos:end="53:5">if <condition pos:start="29:8" pos:end="29:26">(<expr pos:start="29:9" pos:end="29:25"><operator pos:start="29:9" pos:end="29:9">(</operator><name pos:start="29:10" pos:end="29:13">insn</name> <operator pos:start="29:15" pos:end="29:16">&gt;&gt;</operator> <literal type="number" pos:start="29:18" pos:end="29:19">30</literal><operator pos:start="29:20" pos:end="29:20">)</operator> <operator pos:start="29:22" pos:end="29:23">==</operator> <literal type="number" pos:start="29:25" pos:end="29:25">3</literal></expr>)</condition> <block pos:start="29:28" pos:end="53:5">{<block_content pos:start="31:7" pos:end="51:7">

      <switch pos:start="31:7" pos:end="51:7">switch<condition pos:start="31:13" pos:end="31:33">(<expr pos:start="31:14" pos:end="31:32"><operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:18">insn</name> <operator pos:start="31:20" pos:end="31:21">&gt;&gt;</operator> <literal type="number" pos:start="31:23" pos:end="31:24">19</literal><operator pos:start="31:25" pos:end="31:25">)</operator> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <literal type="number" pos:start="31:29" pos:end="31:32">0x3f</literal></expr>)</condition> <block pos:start="31:35" pos:end="51:7">{<block_content pos:start="33:7" pos:end="49:14">

      <case pos:start="33:7" pos:end="33:16">case <expr pos:start="33:12" pos:end="33:15"><literal type="number" pos:start="33:12" pos:end="33:15">0x05</literal></expr>:</case> <comment type="line" pos:start="33:18" pos:end="33:23">// stb</comment>

      <case pos:start="35:7" pos:end="35:16">case <expr pos:start="35:12" pos:end="35:15"><literal type="number" pos:start="35:12" pos:end="35:15">0x06</literal></expr>:</case> <comment type="line" pos:start="35:18" pos:end="35:23">// sth</comment>

      <case pos:start="37:7" pos:end="37:16">case <expr pos:start="37:12" pos:end="37:15"><literal type="number" pos:start="37:12" pos:end="37:15">0x04</literal></expr>:</case> <comment type="line" pos:start="37:18" pos:end="37:22">// st</comment>

      <case pos:start="39:7" pos:end="39:16">case <expr pos:start="39:12" pos:end="39:15"><literal type="number" pos:start="39:12" pos:end="39:15">0x07</literal></expr>:</case> <comment type="line" pos:start="39:18" pos:end="39:23">// std</comment>

      <case pos:start="41:7" pos:end="41:16">case <expr pos:start="41:12" pos:end="41:15"><literal type="number" pos:start="41:12" pos:end="41:15">0x24</literal></expr>:</case> <comment type="line" pos:start="41:18" pos:end="41:23">// stf</comment>

      <case pos:start="43:7" pos:end="43:16">case <expr pos:start="43:12" pos:end="43:15"><literal type="number" pos:start="43:12" pos:end="43:15">0x27</literal></expr>:</case> <comment type="line" pos:start="43:18" pos:end="43:24">// stdf</comment>

      <case pos:start="45:7" pos:end="45:16">case <expr pos:start="45:12" pos:end="45:15"><literal type="number" pos:start="45:12" pos:end="45:15">0x25</literal></expr>:</case> <comment type="line" pos:start="45:18" pos:end="45:25">// stfsr</comment>

	<expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:16">is_write</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <literal type="number" pos:start="47:20" pos:end="47:20">1</literal></expr>;</expr_stmt>

	<break pos:start="49:9" pos:end="49:14">break;</break>

      </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <return pos:start="55:5" pos:end="57:48">return <expr pos:start="55:12" pos:end="57:47"><call pos:start="55:12" pos:end="57:47"><name pos:start="55:12" pos:end="55:28">handle_cpu_signal</name><argument_list pos:start="55:29" pos:end="57:47">(<argument pos:start="55:30" pos:end="55:31"><expr pos:start="55:30" pos:end="55:31"><name pos:start="55:30" pos:end="55:31">pc</name></expr></argument>, <argument pos:start="55:34" pos:end="55:61"><expr pos:start="55:34" pos:end="55:61"><operator pos:start="55:34" pos:end="55:34">(</operator><name pos:start="55:35" pos:end="55:42">unsigned</name> <name pos:start="55:44" pos:end="55:47">long</name><operator pos:start="55:48" pos:end="55:48">)</operator><name pos:start="55:49" pos:end="55:61"><name pos:start="55:49" pos:end="55:52">info</name><operator pos:start="55:53" pos:end="55:54">-&gt;</operator><name pos:start="55:55" pos:end="55:61">si_addr</name></name></expr></argument>, 

                             <argument pos:start="57:30" pos:end="57:37"><expr pos:start="57:30" pos:end="57:37"><name pos:start="57:30" pos:end="57:37">is_write</name></expr></argument>, <argument pos:start="57:40" pos:end="57:46"><expr pos:start="57:40" pos:end="57:46"><name pos:start="57:40" pos:end="57:46">sigmask</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
