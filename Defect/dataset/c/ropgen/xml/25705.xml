<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25705.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">bt_submit_sco</name><parameter_list pos:start="1:26" pos:end="3:48">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:32">struct</name> <name pos:start="1:34" pos:end="1:40">HCIInfo</name></name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">info</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:35"><decl pos:start="3:17" pos:end="3:35"><type pos:start="3:17" pos:end="3:35"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:29">uint8_t</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">data</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:47"><decl pos:start="3:38" pos:end="3:47"><type pos:start="3:38" pos:end="3:47"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:47">length</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="49:5">

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">bt_hci_s</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">hci</name> <init pos:start="7:26" pos:end="7:46">= <expr pos:start="7:28" pos:end="7:46"><call pos:start="7:28" pos:end="7:46"><name pos:start="7:28" pos:end="7:40">hci_from_info</name><argument_list pos:start="7:41" pos:end="7:46">(<argument pos:start="7:42" pos:end="7:45"><expr pos:start="7:42" pos:end="7:45"><name pos:start="7:42" pos:end="7:45">info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:19">handle</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">datalen</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:14">length</name> <operator pos:start="15:16" pos:end="15:16">&lt;</operator> <literal type="number" pos:start="15:18" pos:end="15:18">3</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:50"><expr pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:10">handle</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:49"><name pos:start="21:14" pos:end="21:23">acl_handle</name><argument_list pos:start="21:24" pos:end="21:49">(<argument pos:start="21:25" pos:end="21:48"><expr pos:start="21:25" pos:end="21:48"><operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:32"><name pos:start="21:26" pos:end="21:29">data</name><index pos:start="21:30" pos:end="21:32">[<expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">1</literal></expr>]</index></name> <operator pos:start="21:34" pos:end="21:35">&lt;&lt;</operator> <literal type="number" pos:start="21:37" pos:end="21:37">8</literal><operator pos:start="21:38" pos:end="21:38">)</operator> <operator pos:start="21:40" pos:end="21:40">|</operator> <name pos:start="21:42" pos:end="21:48"><name pos:start="21:42" pos:end="21:45">data</name><index pos:start="21:46" pos:end="21:48">[<expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:22"><expr pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:11">datalen</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:21"><name pos:start="23:15" pos:end="23:18">data</name><index pos:start="23:19" pos:end="23:21">[<expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:10">length</name> <operator pos:start="25:12" pos:end="25:13">-=</operator> <literal type="number" pos:start="25:15" pos:end="25:15">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:39">(<expr pos:start="29:9" pos:end="29:38"><call pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:25">bt_hci_handle_bad</name><argument_list pos:start="29:26" pos:end="29:38">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">hci</name></expr></argument>, <argument pos:start="29:32" pos:end="29:37"><expr pos:start="29:32" pos:end="29:37"><name pos:start="29:32" pos:end="29:37">handle</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:41" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="33:46"><expr pos:start="31:9" pos:end="33:45"><call pos:start="31:9" pos:end="33:45"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="33:45">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:55"><expr pos:start="31:25" pos:end="31:55"><literal type="string" pos:start="31:25" pos:end="31:55">"%s: invalid SCO handle %03x\n"</literal></expr></argument>,

                        <argument pos:start="33:25" pos:end="33:36"><expr pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:36">__FUNCTION__</name></expr></argument>, <argument pos:start="33:39" pos:end="33:44"><expr pos:start="33:39" pos:end="33:44"><name pos:start="33:39" pos:end="33:44">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:15">datalen</name> <operator pos:start="41:17" pos:end="41:17">&gt;</operator> <name pos:start="41:19" pos:end="41:24">length</name></expr>)</condition> <block pos:start="41:27" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:55"><expr pos:start="43:9" pos:end="45:54"><call pos:start="43:9" pos:end="45:54"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:54">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:64"><expr pos:start="43:25" pos:end="43:64"><literal type="string" pos:start="43:25" pos:end="43:64">"%s: SCO packet too short (%iB &lt; %iB)\n"</literal></expr></argument>,

                        <argument pos:start="45:25" pos:end="45:36"><expr pos:start="45:25" pos:end="45:36"><name pos:start="45:25" pos:end="45:36">__FUNCTION__</name></expr></argument>, <argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><name pos:start="45:39" pos:end="45:44">length</name></expr></argument>, <argument pos:start="45:47" pos:end="45:53"><expr pos:start="45:47" pos:end="45:53"><name pos:start="45:47" pos:end="45:53">datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:14">/* TODO */</comment>



    <comment type="block" pos:start="57:5" pos:end="63:21">/* TODO: increase counter and send EVT_NUM_COMP_PKTS if synchronous

     * Flow Control is enabled.

     * (See Read/Write_Synchronous_Flow_Control_Enable on page 513 and

     * page 514.)  */</comment>

</block_content>}</block></function>
</unit>
