<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16798.c" pos:tabs="8"><function pos:start="1:1" pos:end="365:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">nbd_receive_negotiate</name><parameter_list pos:start="1:26" pos:end="7:52">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">QIOChannel</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">ioc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">name</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:76"><decl pos:start="1:62" pos:end="1:76"><type pos:start="1:62" pos:end="1:76"><name pos:start="1:62" pos:end="1:69">uint32_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:76">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:51"><decl pos:start="3:27" pos:end="3:51"><type pos:start="3:27" pos:end="3:51"><name pos:start="3:27" pos:end="3:41">QCryptoTLSCreds</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:51">tlscreds</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:73"><decl pos:start="3:54" pos:end="3:73"><type pos:start="3:54" pos:end="3:73"><specifier pos:start="3:54" pos:end="3:58">const</specifier> <name pos:start="3:60" pos:end="3:63">char</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:73">hostname</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:45"><decl pos:start="5:27" pos:end="5:45"><type pos:start="5:27" pos:end="5:45"><name pos:start="5:27" pos:end="5:36">QIOChannel</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier><modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:45">outioc</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:37"><decl pos:start="7:27" pos:end="7:37"><type pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:31">off_t</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:37">size</name></decl></parameter>, <parameter pos:start="7:40" pos:end="7:51"><decl pos:start="7:40" pos:end="7:51"><type pos:start="7:40" pos:end="7:51"><name pos:start="7:40" pos:end="7:44">Error</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier><modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="365:1">{<block_content pos:start="11:5" pos:end="363:14">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:17">[<expr pos:start="11:14" pos:end="11:16"><literal type="number" pos:start="11:14" pos:end="11:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">magic</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:21" pos:end="13:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:52"><expr pos:start="19:5" pos:end="21:51"><call pos:start="19:5" pos:end="21:51"><name pos:start="19:5" pos:end="19:9">TRACE</name><argument_list pos:start="19:10" pos:end="21:51">(<argument pos:start="19:11" pos:end="19:58"><expr pos:start="19:11" pos:end="19:58"><literal type="string" pos:start="19:11" pos:end="19:58">"Receiving negotiation tlscreds=%p hostname=%s."</literal></expr></argument>,

          <argument pos:start="21:11" pos:end="21:18"><expr pos:start="21:11" pos:end="21:18"><name pos:start="21:11" pos:end="21:18">tlscreds</name></expr></argument>, <argument pos:start="21:21" pos:end="21:50"><expr pos:start="21:21" pos:end="21:50"><ternary pos:start="21:21" pos:end="21:50"><condition pos:start="21:21" pos:end="21:30"><expr pos:start="21:21" pos:end="21:28"><name pos:start="21:21" pos:end="21:28">hostname</name></expr> ?</condition><then pos:start="21:32" pos:end="21:39"> <expr pos:start="21:32" pos:end="21:39"><name pos:start="21:32" pos:end="21:39">hostname</name></expr> </then><else pos:start="21:41" pos:end="21:50">: <expr pos:start="21:43" pos:end="21:50"><literal type="string" pos:start="21:43" pos:end="21:50">"&lt;null&gt;"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:6">rc</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <operator pos:start="25:10" pos:end="25:10">-</operator><name pos:start="25:11" pos:end="25:16">EINVAL</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:14">outioc</name></expr>)</condition> <block pos:start="29:17" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:23">

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:15">outioc</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:16">tlscreds</name> <operator pos:start="35:18" pos:end="35:19">&amp;&amp;</operator> <operator pos:start="35:21" pos:end="35:21">!</operator><name pos:start="35:22" pos:end="35:27">outioc</name></expr>)</condition> <block pos:start="35:30" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:64"><expr pos:start="37:9" pos:end="37:63"><call pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:63">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:62"><expr pos:start="37:26" pos:end="37:62"><literal type="string" pos:start="37:26" pos:end="37:62">"Output I/O channel required for TLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:36">(<expr pos:start="45:9" pos:end="45:35"><call pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:17">read_sync</name><argument_list pos:start="45:18" pos:end="45:30">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><name pos:start="45:19" pos:end="45:21">ioc</name></expr></argument>, <argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">buf</name></expr></argument>, <argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">8</literal></expr></argument>)</argument_list></call> <operator pos:start="45:32" pos:end="45:33">!=</operator> <literal type="number" pos:start="45:35" pos:end="45:35">8</literal></expr>)</condition> <block pos:start="45:38" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:18">

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="47:47">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:46"><expr pos:start="47:26" pos:end="47:46"><literal type="string" pos:start="47:26" pos:end="47:46">"Failed to read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:10"><name pos:start="55:5" pos:end="55:7">buf</name><index pos:start="55:8" pos:end="55:10">[<expr pos:start="55:9" pos:end="55:9"><literal type="number" pos:start="55:9" pos:end="55:9">8</literal></expr>]</index></name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="char" pos:start="55:14" pos:end="55:17">'\0'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:25">(<expr pos:start="57:9" pos:end="57:24"><call pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:14">strlen</name><argument_list pos:start="57:15" pos:end="57:19">(<argument pos:start="57:16" pos:end="57:18"><expr pos:start="57:16" pos:end="57:18"><name pos:start="57:16" pos:end="57:18">buf</name></expr></argument>)</argument_list></call> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>)</condition> <block pos:start="57:27" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <expr_stmt pos:start="59:9" pos:end="59:66"><expr pos:start="59:9" pos:end="59:65"><call pos:start="59:9" pos:end="59:65"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:65">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:64"><expr pos:start="59:26" pos:end="59:64"><literal type="string" pos:start="59:26" pos:end="59:64">"Server connection closed unexpectedly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:18">goto <name pos:start="61:14" pos:end="61:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="83:47"><expr pos:start="67:5" pos:end="83:46"><call pos:start="67:5" pos:end="83:46"><name pos:start="67:5" pos:end="67:9">TRACE</name><argument_list pos:start="67:10" pos:end="83:46">(<argument pos:start="67:11" pos:end="67:37"><expr pos:start="67:11" pos:end="67:37"><literal type="string" pos:start="67:11" pos:end="67:37">"Magic is %c%c%c%c%c%c%c%c"</literal></expr></argument>,

          <argument pos:start="69:11" pos:end="69:45"><expr pos:start="69:11" pos:end="69:45"><ternary pos:start="69:11" pos:end="69:45"><condition pos:start="69:11" pos:end="69:32"><expr pos:start="69:11" pos:end="69:30"><call pos:start="69:11" pos:end="69:30"><name pos:start="69:11" pos:end="69:22">qemu_isprint</name><argument_list pos:start="69:23" pos:end="69:30">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:26">buf</name><index pos:start="69:27" pos:end="69:29">[<expr pos:start="69:28" pos:end="69:28"><literal type="number" pos:start="69:28" pos:end="69:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="69:34" pos:end="69:39"> <expr pos:start="69:34" pos:end="69:39"><name pos:start="69:34" pos:end="69:39"><name pos:start="69:34" pos:end="69:36">buf</name><index pos:start="69:37" pos:end="69:39">[<expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">0</literal></expr>]</index></name></expr> </then><else pos:start="69:41" pos:end="69:45">: <expr pos:start="69:43" pos:end="69:45"><literal type="char" pos:start="69:43" pos:end="69:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="71:11" pos:end="71:45"><expr pos:start="71:11" pos:end="71:45"><ternary pos:start="71:11" pos:end="71:45"><condition pos:start="71:11" pos:end="71:32"><expr pos:start="71:11" pos:end="71:30"><call pos:start="71:11" pos:end="71:30"><name pos:start="71:11" pos:end="71:22">qemu_isprint</name><argument_list pos:start="71:23" pos:end="71:30">(<argument pos:start="71:24" pos:end="71:29"><expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:26">buf</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="71:34" pos:end="71:39"> <expr pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:36">buf</name><index pos:start="71:37" pos:end="71:39">[<expr pos:start="71:38" pos:end="71:38"><literal type="number" pos:start="71:38" pos:end="71:38">1</literal></expr>]</index></name></expr> </then><else pos:start="71:41" pos:end="71:45">: <expr pos:start="71:43" pos:end="71:45"><literal type="char" pos:start="71:43" pos:end="71:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="73:11" pos:end="73:45"><expr pos:start="73:11" pos:end="73:45"><ternary pos:start="73:11" pos:end="73:45"><condition pos:start="73:11" pos:end="73:32"><expr pos:start="73:11" pos:end="73:30"><call pos:start="73:11" pos:end="73:30"><name pos:start="73:11" pos:end="73:22">qemu_isprint</name><argument_list pos:start="73:23" pos:end="73:30">(<argument pos:start="73:24" pos:end="73:29"><expr pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:26">buf</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><literal type="number" pos:start="73:28" pos:end="73:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="73:34" pos:end="73:39"> <expr pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:36">buf</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">2</literal></expr>]</index></name></expr> </then><else pos:start="73:41" pos:end="73:45">: <expr pos:start="73:43" pos:end="73:45"><literal type="char" pos:start="73:43" pos:end="73:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="75:11" pos:end="75:45"><expr pos:start="75:11" pos:end="75:45"><ternary pos:start="75:11" pos:end="75:45"><condition pos:start="75:11" pos:end="75:32"><expr pos:start="75:11" pos:end="75:30"><call pos:start="75:11" pos:end="75:30"><name pos:start="75:11" pos:end="75:22">qemu_isprint</name><argument_list pos:start="75:23" pos:end="75:30">(<argument pos:start="75:24" pos:end="75:29"><expr pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:26">buf</name><index pos:start="75:27" pos:end="75:29">[<expr pos:start="75:28" pos:end="75:28"><literal type="number" pos:start="75:28" pos:end="75:28">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="75:34" pos:end="75:39"> <expr pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:36">buf</name><index pos:start="75:37" pos:end="75:39">[<expr pos:start="75:38" pos:end="75:38"><literal type="number" pos:start="75:38" pos:end="75:38">3</literal></expr>]</index></name></expr> </then><else pos:start="75:41" pos:end="75:45">: <expr pos:start="75:43" pos:end="75:45"><literal type="char" pos:start="75:43" pos:end="75:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="77:11" pos:end="77:45"><expr pos:start="77:11" pos:end="77:45"><ternary pos:start="77:11" pos:end="77:45"><condition pos:start="77:11" pos:end="77:32"><expr pos:start="77:11" pos:end="77:30"><call pos:start="77:11" pos:end="77:30"><name pos:start="77:11" pos:end="77:22">qemu_isprint</name><argument_list pos:start="77:23" pos:end="77:30">(<argument pos:start="77:24" pos:end="77:29"><expr pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:29"><name pos:start="77:24" pos:end="77:26">buf</name><index pos:start="77:27" pos:end="77:29">[<expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="77:34" pos:end="77:39"> <expr pos:start="77:34" pos:end="77:39"><name pos:start="77:34" pos:end="77:39"><name pos:start="77:34" pos:end="77:36">buf</name><index pos:start="77:37" pos:end="77:39">[<expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">4</literal></expr>]</index></name></expr> </then><else pos:start="77:41" pos:end="77:45">: <expr pos:start="77:43" pos:end="77:45"><literal type="char" pos:start="77:43" pos:end="77:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="79:11" pos:end="79:45"><expr pos:start="79:11" pos:end="79:45"><ternary pos:start="79:11" pos:end="79:45"><condition pos:start="79:11" pos:end="79:32"><expr pos:start="79:11" pos:end="79:30"><call pos:start="79:11" pos:end="79:30"><name pos:start="79:11" pos:end="79:22">qemu_isprint</name><argument_list pos:start="79:23" pos:end="79:30">(<argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:26">buf</name><index pos:start="79:27" pos:end="79:29">[<expr pos:start="79:28" pos:end="79:28"><literal type="number" pos:start="79:28" pos:end="79:28">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="79:34" pos:end="79:39"> <expr pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:36">buf</name><index pos:start="79:37" pos:end="79:39">[<expr pos:start="79:38" pos:end="79:38"><literal type="number" pos:start="79:38" pos:end="79:38">5</literal></expr>]</index></name></expr> </then><else pos:start="79:41" pos:end="79:45">: <expr pos:start="79:43" pos:end="79:45"><literal type="char" pos:start="79:43" pos:end="79:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="81:11" pos:end="81:45"><expr pos:start="81:11" pos:end="81:45"><ternary pos:start="81:11" pos:end="81:45"><condition pos:start="81:11" pos:end="81:32"><expr pos:start="81:11" pos:end="81:30"><call pos:start="81:11" pos:end="81:30"><name pos:start="81:11" pos:end="81:22">qemu_isprint</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:26">buf</name><index pos:start="81:27" pos:end="81:29">[<expr pos:start="81:28" pos:end="81:28"><literal type="number" pos:start="81:28" pos:end="81:28">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="81:34" pos:end="81:39"> <expr pos:start="81:34" pos:end="81:39"><name pos:start="81:34" pos:end="81:39"><name pos:start="81:34" pos:end="81:36">buf</name><index pos:start="81:37" pos:end="81:39">[<expr pos:start="81:38" pos:end="81:38"><literal type="number" pos:start="81:38" pos:end="81:38">6</literal></expr>]</index></name></expr> </then><else pos:start="81:41" pos:end="81:45">: <expr pos:start="81:43" pos:end="81:45"><literal type="char" pos:start="81:43" pos:end="81:45">'.'</literal></expr></else></ternary></expr></argument>,

          <argument pos:start="83:11" pos:end="83:45"><expr pos:start="83:11" pos:end="83:45"><ternary pos:start="83:11" pos:end="83:45"><condition pos:start="83:11" pos:end="83:32"><expr pos:start="83:11" pos:end="83:30"><call pos:start="83:11" pos:end="83:30"><name pos:start="83:11" pos:end="83:22">qemu_isprint</name><argument_list pos:start="83:23" pos:end="83:30">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:26">buf</name><index pos:start="83:27" pos:end="83:29">[<expr pos:start="83:28" pos:end="83:28"><literal type="number" pos:start="83:28" pos:end="83:28">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="83:34" pos:end="83:39"> <expr pos:start="83:34" pos:end="83:39"><name pos:start="83:34" pos:end="83:39"><name pos:start="83:34" pos:end="83:36">buf</name><index pos:start="83:37" pos:end="83:39">[<expr pos:start="83:38" pos:end="83:38"><literal type="number" pos:start="83:38" pos:end="83:38">7</literal></expr>]</index></name></expr> </then><else pos:start="83:41" pos:end="83:45">: <expr pos:start="83:43" pos:end="83:45"><literal type="char" pos:start="83:43" pos:end="83:45">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:40">(<expr pos:start="87:9" pos:end="87:39"><call pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:14">memcmp</name><argument_list pos:start="87:15" pos:end="87:34">(<argument pos:start="87:16" pos:end="87:18"><expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">buf</name></expr></argument>, <argument pos:start="87:21" pos:end="87:30"><expr pos:start="87:21" pos:end="87:30"><literal type="string" pos:start="87:21" pos:end="87:30">"NBDMAGIC"</literal></expr></argument>, <argument pos:start="87:33" pos:end="87:33"><expr pos:start="87:33" pos:end="87:33"><literal type="number" pos:start="87:33" pos:end="87:33">8</literal></expr></argument>)</argument_list></call> <operator pos:start="87:36" pos:end="87:37">!=</operator> <literal type="number" pos:start="87:39" pos:end="87:39">0</literal></expr>)</condition> <block pos:start="87:42" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:18">

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><call pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:18">error_setg</name><argument_list pos:start="89:19" pos:end="89:50">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">errp</name></expr></argument>, <argument pos:start="89:26" pos:end="89:49"><expr pos:start="89:26" pos:end="89:49"><literal type="string" pos:start="89:26" pos:end="89:49">"Invalid magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:18">goto <name pos:start="91:14" pos:end="91:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:63">(<expr pos:start="97:9" pos:end="97:62"><call pos:start="97:9" pos:end="97:45"><name pos:start="97:9" pos:end="97:17">read_sync</name><argument_list pos:start="97:18" pos:end="97:45">(<argument pos:start="97:19" pos:end="97:21"><expr pos:start="97:19" pos:end="97:21"><name pos:start="97:19" pos:end="97:21">ioc</name></expr></argument>, <argument pos:start="97:24" pos:end="97:29"><expr pos:start="97:24" pos:end="97:29"><operator pos:start="97:24" pos:end="97:24">&amp;</operator><name pos:start="97:25" pos:end="97:29">magic</name></expr></argument>, <argument pos:start="97:32" pos:end="97:44"><expr pos:start="97:32" pos:end="97:44"><sizeof pos:start="97:32" pos:end="97:44">sizeof<argument_list pos:start="97:38" pos:end="97:44">(<argument pos:start="97:39" pos:end="97:43"><expr pos:start="97:39" pos:end="97:43"><name pos:start="97:39" pos:end="97:43">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="97:47" pos:end="97:48">!=</operator> <sizeof pos:start="97:50" pos:end="97:62">sizeof<argument_list pos:start="97:56" pos:end="97:62">(<argument pos:start="97:57" pos:end="97:61"><expr pos:start="97:57" pos:end="97:61"><name pos:start="97:57" pos:end="97:61">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="97:65" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:18">

        <expr_stmt pos:start="99:9" pos:end="99:49"><expr pos:start="99:9" pos:end="99:48"><call pos:start="99:9" pos:end="99:48"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="99:48">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:47"><expr pos:start="99:26" pos:end="99:47"><literal type="string" pos:start="99:26" pos:end="99:47">"Failed to read magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:31"><expr pos:start="105:5" pos:end="105:30"><name pos:start="105:5" pos:end="105:9">magic</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <call pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:23">be64_to_cpu</name><argument_list pos:start="105:24" pos:end="105:30">(<argument pos:start="105:25" pos:end="105:29"><expr pos:start="105:25" pos:end="105:29"><name pos:start="105:25" pos:end="105:29">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:40"><expr pos:start="107:5" pos:end="107:39"><call pos:start="107:5" pos:end="107:39"><name pos:start="107:5" pos:end="107:9">TRACE</name><argument_list pos:start="107:10" pos:end="107:39">(<argument pos:start="107:11" pos:end="107:31"><expr pos:start="107:11" pos:end="107:31"><literal type="string" pos:start="107:11" pos:end="107:24">"Magic is 0x%"</literal> <name pos:start="107:26" pos:end="107:31">PRIx64</name></expr></argument>, <argument pos:start="107:34" pos:end="107:38"><expr pos:start="107:34" pos:end="107:38"><name pos:start="107:34" pos:end="107:38">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="345:5"><if pos:start="111:5" pos:end="295:5">if <condition pos:start="111:8" pos:end="111:32">(<expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:13">magic</name> <operator pos:start="111:15" pos:end="111:16">==</operator> <name pos:start="111:18" pos:end="111:31">NBD_OPTS_MAGIC</name></expr>)</condition> <block pos:start="111:34" pos:end="295:5">{<block_content pos:start="113:9" pos:end="293:56">

        <decl_stmt pos:start="113:9" pos:end="113:33"><decl pos:start="113:9" pos:end="113:32"><type pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:16">uint32_t</name></type> <name pos:start="113:18" pos:end="113:28">clientflags</name> <init pos:start="113:30" pos:end="113:32">= <expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="115:9" pos:end="115:21"><decl pos:start="115:9" pos:end="115:20"><type pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">uint32_t</name></type> <name pos:start="115:18" pos:end="115:20">opt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="117:9" pos:end="117:26"><decl pos:start="117:9" pos:end="117:25"><type pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:16">uint32_t</name></type> <name pos:start="117:18" pos:end="117:25">namesize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="119:9" pos:end="119:29"><decl pos:start="119:9" pos:end="119:28"><type pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:16">uint16_t</name></type> <name pos:start="119:18" pos:end="119:28">globalflags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="121:9" pos:end="121:29"><decl pos:start="121:9" pos:end="121:28"><type pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:16">uint16_t</name></type> <name pos:start="121:18" pos:end="121:28">exportflags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="123:9" pos:end="123:35"><decl pos:start="123:9" pos:end="123:34"><type pos:start="123:9" pos:end="123:12"><name pos:start="123:9" pos:end="123:12">bool</name></type> <name pos:start="123:14" pos:end="123:26">fixedNewStyle</name> <init pos:start="123:28" pos:end="123:34">= <expr pos:start="123:30" pos:end="123:34"><name pos:start="123:30" pos:end="123:34">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="127:9" pos:end="135:9"><if pos:start="127:9" pos:end="135:9">if <condition pos:start="127:12" pos:end="129:32">(<expr pos:start="127:13" pos:end="129:31"><call pos:start="127:13" pos:end="127:61"><name pos:start="127:13" pos:end="127:21">read_sync</name><argument_list pos:start="127:22" pos:end="127:61">(<argument pos:start="127:23" pos:end="127:25"><expr pos:start="127:23" pos:end="127:25"><name pos:start="127:23" pos:end="127:25">ioc</name></expr></argument>, <argument pos:start="127:28" pos:end="127:39"><expr pos:start="127:28" pos:end="127:39"><operator pos:start="127:28" pos:end="127:28">&amp;</operator><name pos:start="127:29" pos:end="127:39">globalflags</name></expr></argument>, <argument pos:start="127:42" pos:end="127:60"><expr pos:start="127:42" pos:end="127:60"><sizeof pos:start="127:42" pos:end="127:60">sizeof<argument_list pos:start="127:48" pos:end="127:60">(<argument pos:start="127:49" pos:end="127:59"><expr pos:start="127:49" pos:end="127:59"><name pos:start="127:49" pos:end="127:59">globalflags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="127:63" pos:end="127:64">!=</operator>

            <sizeof pos:start="129:13" pos:end="129:31">sizeof<argument_list pos:start="129:19" pos:end="129:31">(<argument pos:start="129:20" pos:end="129:30"><expr pos:start="129:20" pos:end="129:30"><name pos:start="129:20" pos:end="129:30">globalflags</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="129:34" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:60"><expr pos:start="131:13" pos:end="131:59"><call pos:start="131:13" pos:end="131:59"><name pos:start="131:13" pos:end="131:22">error_setg</name><argument_list pos:start="131:23" pos:end="131:59">(<argument pos:start="131:24" pos:end="131:27"><expr pos:start="131:24" pos:end="131:27"><name pos:start="131:24" pos:end="131:27">errp</name></expr></argument>, <argument pos:start="131:30" pos:end="131:58"><expr pos:start="131:30" pos:end="131:58"><literal type="string" pos:start="131:30" pos:end="131:58">"Failed to read server flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="133:13" pos:end="133:22">goto <name pos:start="133:18" pos:end="133:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:47"><expr pos:start="137:9" pos:end="137:46"><name pos:start="137:9" pos:end="137:19">globalflags</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <call pos:start="137:23" pos:end="137:46"><name pos:start="137:23" pos:end="137:33">be16_to_cpu</name><argument_list pos:start="137:34" pos:end="137:46">(<argument pos:start="137:35" pos:end="137:45"><expr pos:start="137:35" pos:end="137:45"><name pos:start="137:35" pos:end="137:45">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:35"><expr pos:start="139:9" pos:end="139:34"><operator pos:start="139:9" pos:end="139:9">*</operator><name pos:start="139:10" pos:end="139:14">flags</name> <operator pos:start="139:16" pos:end="139:16">=</operator> <name pos:start="139:18" pos:end="139:28">globalflags</name> <operator pos:start="139:30" pos:end="139:31">&lt;&lt;</operator> <literal type="number" pos:start="139:33" pos:end="139:34">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:56"><expr pos:start="141:9" pos:end="141:55"><call pos:start="141:9" pos:end="141:55"><name pos:start="141:9" pos:end="141:13">TRACE</name><argument_list pos:start="141:14" pos:end="141:55">(<argument pos:start="141:15" pos:end="141:41"><expr pos:start="141:15" pos:end="141:41"><literal type="string" pos:start="141:15" pos:end="141:34">"Global flags are %"</literal> <name pos:start="141:36" pos:end="141:41">PRIx32</name></expr></argument>, <argument pos:start="141:44" pos:end="141:54"><expr pos:start="141:44" pos:end="141:54"><name pos:start="141:44" pos:end="141:54">globalflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="151:9"><if pos:start="143:9" pos:end="151:9">if <condition pos:start="143:12" pos:end="143:50">(<expr pos:start="143:13" pos:end="143:49"><name pos:start="143:13" pos:end="143:23">globalflags</name> <operator pos:start="143:25" pos:end="143:25">&amp;</operator> <name pos:start="143:27" pos:end="143:49">NBD_FLAG_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="143:52" pos:end="151:9">{<block_content pos:start="145:13" pos:end="149:53">

            <expr_stmt pos:start="145:13" pos:end="145:33"><expr pos:start="145:13" pos:end="145:32"><name pos:start="145:13" pos:end="145:25">fixedNewStyle</name> <operator pos:start="145:27" pos:end="145:27">=</operator> <name pos:start="145:29" pos:end="145:32">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:53"><expr pos:start="147:13" pos:end="147:52"><call pos:start="147:13" pos:end="147:52"><name pos:start="147:13" pos:end="147:17">TRACE</name><argument_list pos:start="147:18" pos:end="147:52">(<argument pos:start="147:19" pos:end="147:51"><expr pos:start="147:19" pos:end="147:51"><literal type="string" pos:start="147:19" pos:end="147:51">"Server supports fixed new style"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:53"><expr pos:start="149:13" pos:end="149:52"><name pos:start="149:13" pos:end="149:23">clientflags</name> <operator pos:start="149:25" pos:end="149:26">|=</operator> <name pos:start="149:28" pos:end="149:52">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="153:9" pos:end="153:36">/* client requested flags */</comment>

        <expr_stmt pos:start="155:9" pos:end="155:47"><expr pos:start="155:9" pos:end="155:46"><name pos:start="155:9" pos:end="155:19">clientflags</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <call pos:start="155:23" pos:end="155:46"><name pos:start="155:23" pos:end="155:33">cpu_to_be32</name><argument_list pos:start="155:34" pos:end="155:46">(<argument pos:start="155:35" pos:end="155:45"><expr pos:start="155:35" pos:end="155:45"><name pos:start="155:35" pos:end="155:45">clientflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="159:32">(<expr pos:start="157:13" pos:end="159:31"><call pos:start="157:13" pos:end="157:62"><name pos:start="157:13" pos:end="157:22">write_sync</name><argument_list pos:start="157:23" pos:end="157:62">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:26">ioc</name></expr></argument>, <argument pos:start="157:29" pos:end="157:40"><expr pos:start="157:29" pos:end="157:40"><operator pos:start="157:29" pos:end="157:29">&amp;</operator><name pos:start="157:30" pos:end="157:40">clientflags</name></expr></argument>, <argument pos:start="157:43" pos:end="157:61"><expr pos:start="157:43" pos:end="157:61"><sizeof pos:start="157:43" pos:end="157:61">sizeof<argument_list pos:start="157:49" pos:end="157:61">(<argument pos:start="157:50" pos:end="157:60"><expr pos:start="157:50" pos:end="157:60"><name pos:start="157:50" pos:end="157:60">clientflags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="157:64" pos:end="157:65">!=</operator>

            <sizeof pos:start="159:13" pos:end="159:31">sizeof<argument_list pos:start="159:19" pos:end="159:31">(<argument pos:start="159:20" pos:end="159:30"><expr pos:start="159:20" pos:end="159:30"><name pos:start="159:20" pos:end="159:30">clientflags</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="159:34" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:22">

            <expr_stmt pos:start="161:13" pos:end="161:65"><expr pos:start="161:13" pos:end="161:64"><call pos:start="161:13" pos:end="161:64"><name pos:start="161:13" pos:end="161:22">error_setg</name><argument_list pos:start="161:23" pos:end="161:64">(<argument pos:start="161:24" pos:end="161:27"><expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">errp</name></expr></argument>, <argument pos:start="161:30" pos:end="161:63"><expr pos:start="161:30" pos:end="161:63"><literal type="string" pos:start="161:30" pos:end="161:63">"Failed to send clientflags field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="163:13" pos:end="163:22">goto <name pos:start="163:18" pos:end="163:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="167:9" pos:end="189:9"><if pos:start="167:9" pos:end="189:9">if <condition pos:start="167:12" pos:end="167:21">(<expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:20">tlscreds</name></expr>)</condition> <block pos:start="167:23" pos:end="189:9">{<block_content pos:start="169:13" pos:end="187:13">

            <if_stmt pos:start="169:13" pos:end="187:13"><if pos:start="169:13" pos:end="181:13">if <condition pos:start="169:16" pos:end="169:30">(<expr pos:start="169:17" pos:end="169:29"><name pos:start="169:17" pos:end="169:29">fixedNewStyle</name></expr>)</condition> <block pos:start="169:32" pos:end="181:13">{<block_content pos:start="171:17" pos:end="179:30">

                <expr_stmt pos:start="171:17" pos:end="171:78"><expr pos:start="171:17" pos:end="171:77"><operator pos:start="171:17" pos:end="171:17">*</operator><name pos:start="171:18" pos:end="171:23">outioc</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <call pos:start="171:27" pos:end="171:77"><name pos:start="171:27" pos:end="171:46">nbd_receive_starttls</name><argument_list pos:start="171:47" pos:end="171:77">(<argument pos:start="171:48" pos:end="171:50"><expr pos:start="171:48" pos:end="171:50"><name pos:start="171:48" pos:end="171:50">ioc</name></expr></argument>, <argument pos:start="171:53" pos:end="171:60"><expr pos:start="171:53" pos:end="171:60"><name pos:start="171:53" pos:end="171:60">tlscreds</name></expr></argument>, <argument pos:start="171:63" pos:end="171:70"><expr pos:start="171:63" pos:end="171:70"><name pos:start="171:63" pos:end="171:70">hostname</name></expr></argument>, <argument pos:start="171:73" pos:end="171:76"><expr pos:start="171:73" pos:end="171:76"><name pos:start="171:73" pos:end="171:76">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="173:17" pos:end="177:17"><if pos:start="173:17" pos:end="177:17">if <condition pos:start="173:20" pos:end="173:29">(<expr pos:start="173:21" pos:end="173:28"><operator pos:start="173:21" pos:end="173:21">!</operator><operator pos:start="173:22" pos:end="173:22">*</operator><name pos:start="173:23" pos:end="173:28">outioc</name></expr>)</condition> <block pos:start="173:31" pos:end="177:17">{<block_content pos:start="175:21" pos:end="175:30">

                    <goto pos:start="175:21" pos:end="175:30">goto <name pos:start="175:26" pos:end="175:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:30"><expr pos:start="179:17" pos:end="179:29"><name pos:start="179:17" pos:end="179:19">ioc</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <operator pos:start="179:23" pos:end="179:23">*</operator><name pos:start="179:24" pos:end="179:29">outioc</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="181:15" pos:end="187:13">else <block pos:start="181:20" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:26">

                <expr_stmt pos:start="183:17" pos:end="183:69"><expr pos:start="183:17" pos:end="183:68"><call pos:start="183:17" pos:end="183:68"><name pos:start="183:17" pos:end="183:26">error_setg</name><argument_list pos:start="183:27" pos:end="183:68">(<argument pos:start="183:28" pos:end="183:31"><expr pos:start="183:28" pos:end="183:31"><name pos:start="183:28" pos:end="183:31">errp</name></expr></argument>, <argument pos:start="183:34" pos:end="183:67"><expr pos:start="183:34" pos:end="183:67"><literal type="string" pos:start="183:34" pos:end="183:67">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="185:17" pos:end="185:26">goto <name pos:start="185:22" pos:end="185:25">fail</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="191:9" pos:end="197:9"><if pos:start="191:9" pos:end="197:9">if <condition pos:start="191:12" pos:end="191:18">(<expr pos:start="191:13" pos:end="191:17"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:17">name</name></expr>)</condition> <block pos:start="191:20" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:22">

            <expr_stmt pos:start="193:13" pos:end="193:56"><expr pos:start="193:13" pos:end="193:55"><call pos:start="193:13" pos:end="193:55"><name pos:start="193:13" pos:end="193:17">TRACE</name><argument_list pos:start="193:18" pos:end="193:55">(<argument pos:start="193:19" pos:end="193:54"><expr pos:start="193:19" pos:end="193:54"><literal type="string" pos:start="193:19" pos:end="193:54">"Using default NBD export name \"\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:22"><expr pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:16">name</name> <operator pos:start="195:18" pos:end="195:18">=</operator> <literal type="string" pos:start="195:20" pos:end="195:21">""</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="199:9" pos:end="219:9"><if pos:start="199:9" pos:end="219:9">if <condition pos:start="199:12" pos:end="199:26">(<expr pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:25">fixedNewStyle</name></expr>)</condition> <block pos:start="199:28" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:13">

            <comment type="block" pos:start="201:13" pos:end="211:15">/* Check our desired export is present in the

             * server export list. Since NBD_OPT_EXPORT_NAME

             * cannot return an error message, running this

             * query gives us good error reporting if the

             * server required TLS

             */</comment>

            <if_stmt pos:start="213:13" pos:end="217:13"><if pos:start="213:13" pos:end="217:13">if <condition pos:start="213:16" pos:end="213:63">(<expr pos:start="213:17" pos:end="213:62"><call pos:start="213:17" pos:end="213:58"><name pos:start="213:17" pos:end="213:41">nbd_receive_query_exports</name><argument_list pos:start="213:42" pos:end="213:58">(<argument pos:start="213:43" pos:end="213:45"><expr pos:start="213:43" pos:end="213:45"><name pos:start="213:43" pos:end="213:45">ioc</name></expr></argument>, <argument pos:start="213:48" pos:end="213:51"><expr pos:start="213:48" pos:end="213:51"><name pos:start="213:48" pos:end="213:51">name</name></expr></argument>, <argument pos:start="213:54" pos:end="213:57"><expr pos:start="213:54" pos:end="213:57"><name pos:start="213:54" pos:end="213:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="213:60" pos:end="213:60">&lt;</operator> <literal type="number" pos:start="213:62" pos:end="213:62">0</literal></expr>)</condition> <block pos:start="213:65" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:26">

                <goto pos:start="215:17" pos:end="215:26">goto <name pos:start="215:22" pos:end="215:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="221:9" pos:end="221:35">/* write the export name */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:35"><expr pos:start="223:9" pos:end="223:34"><name pos:start="223:9" pos:end="223:13">magic</name> <operator pos:start="223:15" pos:end="223:15">=</operator> <call pos:start="223:17" pos:end="223:34"><name pos:start="223:17" pos:end="223:27">cpu_to_be64</name><argument_list pos:start="223:28" pos:end="223:34">(<argument pos:start="223:29" pos:end="223:33"><expr pos:start="223:29" pos:end="223:33"><name pos:start="223:29" pos:end="223:33">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="231:9"><if pos:start="225:9" pos:end="231:9">if <condition pos:start="225:12" pos:end="225:68">(<expr pos:start="225:13" pos:end="225:67"><call pos:start="225:13" pos:end="225:50"><name pos:start="225:13" pos:end="225:22">write_sync</name><argument_list pos:start="225:23" pos:end="225:50">(<argument pos:start="225:24" pos:end="225:26"><expr pos:start="225:24" pos:end="225:26"><name pos:start="225:24" pos:end="225:26">ioc</name></expr></argument>, <argument pos:start="225:29" pos:end="225:34"><expr pos:start="225:29" pos:end="225:34"><operator pos:start="225:29" pos:end="225:29">&amp;</operator><name pos:start="225:30" pos:end="225:34">magic</name></expr></argument>, <argument pos:start="225:37" pos:end="225:49"><expr pos:start="225:37" pos:end="225:49"><sizeof pos:start="225:37" pos:end="225:49">sizeof<argument_list pos:start="225:43" pos:end="225:49">(<argument pos:start="225:44" pos:end="225:48"><expr pos:start="225:44" pos:end="225:48"><name pos:start="225:44" pos:end="225:48">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="225:52" pos:end="225:53">!=</operator> <sizeof pos:start="225:55" pos:end="225:67">sizeof<argument_list pos:start="225:61" pos:end="225:67">(<argument pos:start="225:62" pos:end="225:66"><expr pos:start="225:62" pos:end="225:66"><name pos:start="225:62" pos:end="225:66">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="225:70" pos:end="231:9">{<block_content pos:start="227:13" pos:end="229:22">

            <expr_stmt pos:start="227:13" pos:end="227:65"><expr pos:start="227:13" pos:end="227:64"><call pos:start="227:13" pos:end="227:64"><name pos:start="227:13" pos:end="227:22">error_setg</name><argument_list pos:start="227:23" pos:end="227:64">(<argument pos:start="227:24" pos:end="227:27"><expr pos:start="227:24" pos:end="227:27"><name pos:start="227:24" pos:end="227:27">errp</name></expr></argument>, <argument pos:start="227:30" pos:end="227:63"><expr pos:start="227:30" pos:end="227:63"><literal type="string" pos:start="227:30" pos:end="227:63">"Failed to send export name magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="229:13" pos:end="229:22">goto <name pos:start="229:18" pos:end="229:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:47"><expr pos:start="233:9" pos:end="233:46"><name pos:start="233:9" pos:end="233:11">opt</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <call pos:start="233:15" pos:end="233:46"><name pos:start="233:15" pos:end="233:25">cpu_to_be32</name><argument_list pos:start="233:26" pos:end="233:46">(<argument pos:start="233:27" pos:end="233:45"><expr pos:start="233:27" pos:end="233:45"><name pos:start="233:27" pos:end="233:45">NBD_OPT_EXPORT_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="241:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:62">(<expr pos:start="235:13" pos:end="235:61"><call pos:start="235:13" pos:end="235:46"><name pos:start="235:13" pos:end="235:22">write_sync</name><argument_list pos:start="235:23" pos:end="235:46">(<argument pos:start="235:24" pos:end="235:26"><expr pos:start="235:24" pos:end="235:26"><name pos:start="235:24" pos:end="235:26">ioc</name></expr></argument>, <argument pos:start="235:29" pos:end="235:32"><expr pos:start="235:29" pos:end="235:32"><operator pos:start="235:29" pos:end="235:29">&amp;</operator><name pos:start="235:30" pos:end="235:32">opt</name></expr></argument>, <argument pos:start="235:35" pos:end="235:45"><expr pos:start="235:35" pos:end="235:45"><sizeof pos:start="235:35" pos:end="235:45">sizeof<argument_list pos:start="235:41" pos:end="235:45">(<argument pos:start="235:42" pos:end="235:44"><expr pos:start="235:42" pos:end="235:44"><name pos:start="235:42" pos:end="235:44">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="235:48" pos:end="235:49">!=</operator> <sizeof pos:start="235:51" pos:end="235:61">sizeof<argument_list pos:start="235:57" pos:end="235:61">(<argument pos:start="235:58" pos:end="235:60"><expr pos:start="235:58" pos:end="235:60"><name pos:start="235:58" pos:end="235:60">opt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="235:64" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:22">

            <expr_stmt pos:start="237:13" pos:end="237:73"><expr pos:start="237:13" pos:end="237:72"><call pos:start="237:13" pos:end="237:72"><name pos:start="237:13" pos:end="237:22">error_setg</name><argument_list pos:start="237:23" pos:end="237:72">(<argument pos:start="237:24" pos:end="237:27"><expr pos:start="237:24" pos:end="237:27"><name pos:start="237:24" pos:end="237:27">errp</name></expr></argument>, <argument pos:start="237:30" pos:end="237:71"><expr pos:start="237:30" pos:end="237:71"><literal type="string" pos:start="237:30" pos:end="237:71">"Failed to send export name option number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="239:13" pos:end="239:22">goto <name pos:start="239:18" pos:end="239:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:45"><expr pos:start="243:9" pos:end="243:44"><name pos:start="243:9" pos:end="243:16">namesize</name> <operator pos:start="243:18" pos:end="243:18">=</operator> <call pos:start="243:20" pos:end="243:44"><name pos:start="243:20" pos:end="243:30">cpu_to_be32</name><argument_list pos:start="243:31" pos:end="243:44">(<argument pos:start="243:32" pos:end="243:43"><expr pos:start="243:32" pos:end="243:43"><call pos:start="243:32" pos:end="243:43"><name pos:start="243:32" pos:end="243:37">strlen</name><argument_list pos:start="243:38" pos:end="243:43">(<argument pos:start="243:39" pos:end="243:42"><expr pos:start="243:39" pos:end="243:42"><name pos:start="243:39" pos:end="243:42">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="245:9" pos:end="253:9"><if pos:start="245:9" pos:end="253:9">if <condition pos:start="245:12" pos:end="247:29">(<expr pos:start="245:13" pos:end="247:28"><call pos:start="245:13" pos:end="245:56"><name pos:start="245:13" pos:end="245:22">write_sync</name><argument_list pos:start="245:23" pos:end="245:56">(<argument pos:start="245:24" pos:end="245:26"><expr pos:start="245:24" pos:end="245:26"><name pos:start="245:24" pos:end="245:26">ioc</name></expr></argument>, <argument pos:start="245:29" pos:end="245:37"><expr pos:start="245:29" pos:end="245:37"><operator pos:start="245:29" pos:end="245:29">&amp;</operator><name pos:start="245:30" pos:end="245:37">namesize</name></expr></argument>, <argument pos:start="245:40" pos:end="245:55"><expr pos:start="245:40" pos:end="245:55"><sizeof pos:start="245:40" pos:end="245:55">sizeof<argument_list pos:start="245:46" pos:end="245:55">(<argument pos:start="245:47" pos:end="245:54"><expr pos:start="245:47" pos:end="245:54"><name pos:start="245:47" pos:end="245:54">namesize</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="245:58" pos:end="245:59">!=</operator>

            <sizeof pos:start="247:13" pos:end="247:28">sizeof<argument_list pos:start="247:19" pos:end="247:28">(<argument pos:start="247:20" pos:end="247:27"><expr pos:start="247:20" pos:end="247:27"><name pos:start="247:20" pos:end="247:27">namesize</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="247:31" pos:end="253:9">{<block_content pos:start="249:13" pos:end="251:22">

            <expr_stmt pos:start="249:13" pos:end="249:66"><expr pos:start="249:13" pos:end="249:65"><call pos:start="249:13" pos:end="249:65"><name pos:start="249:13" pos:end="249:22">error_setg</name><argument_list pos:start="249:23" pos:end="249:65">(<argument pos:start="249:24" pos:end="249:27"><expr pos:start="249:24" pos:end="249:27"><name pos:start="249:24" pos:end="249:27">errp</name></expr></argument>, <argument pos:start="249:30" pos:end="249:64"><expr pos:start="249:30" pos:end="249:64"><literal type="string" pos:start="249:30" pos:end="249:64">"Failed to send export name length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="251:13" pos:end="251:22">goto <name pos:start="251:18" pos:end="251:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:72">(<expr pos:start="255:13" pos:end="255:71"><call pos:start="255:13" pos:end="255:55"><name pos:start="255:13" pos:end="255:22">write_sync</name><argument_list pos:start="255:23" pos:end="255:55">(<argument pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">ioc</name></expr></argument>, <argument pos:start="255:29" pos:end="255:40"><expr pos:start="255:29" pos:end="255:40"><operator pos:start="255:29" pos:end="255:29">(</operator><name pos:start="255:30" pos:end="255:33">char</name> <operator pos:start="255:35" pos:end="255:35">*</operator><operator pos:start="255:36" pos:end="255:36">)</operator><name pos:start="255:37" pos:end="255:40">name</name></expr></argument>, <argument pos:start="255:43" pos:end="255:54"><expr pos:start="255:43" pos:end="255:54"><call pos:start="255:43" pos:end="255:54"><name pos:start="255:43" pos:end="255:48">strlen</name><argument_list pos:start="255:49" pos:end="255:54">(<argument pos:start="255:50" pos:end="255:53"><expr pos:start="255:50" pos:end="255:53"><name pos:start="255:50" pos:end="255:53">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="255:57" pos:end="255:58">!=</operator> <call pos:start="255:60" pos:end="255:71"><name pos:start="255:60" pos:end="255:65">strlen</name><argument_list pos:start="255:66" pos:end="255:71">(<argument pos:start="255:67" pos:end="255:70"><expr pos:start="255:67" pos:end="255:70"><name pos:start="255:67" pos:end="255:70">name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="255:74" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:22">

            <expr_stmt pos:start="257:13" pos:end="257:59"><expr pos:start="257:13" pos:end="257:58"><call pos:start="257:13" pos:end="257:58"><name pos:start="257:13" pos:end="257:22">error_setg</name><argument_list pos:start="257:23" pos:end="257:58">(<argument pos:start="257:24" pos:end="257:27"><expr pos:start="257:24" pos:end="257:27"><name pos:start="257:24" pos:end="257:27">errp</name></expr></argument>, <argument pos:start="257:30" pos:end="257:57"><expr pos:start="257:30" pos:end="257:57"><literal type="string" pos:start="257:30" pos:end="257:57">"Failed to send export name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="259:13" pos:end="259:22">goto <name pos:start="259:18" pos:end="259:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:55">(<expr pos:start="265:13" pos:end="265:54"><call pos:start="265:13" pos:end="265:41"><name pos:start="265:13" pos:end="265:21">read_sync</name><argument_list pos:start="265:22" pos:end="265:41">(<argument pos:start="265:23" pos:end="265:25"><expr pos:start="265:23" pos:end="265:25"><name pos:start="265:23" pos:end="265:25">ioc</name></expr></argument>, <argument pos:start="265:28" pos:end="265:29"><expr pos:start="265:28" pos:end="265:29"><operator pos:start="265:28" pos:end="265:28">&amp;</operator><name pos:start="265:29" pos:end="265:29">s</name></expr></argument>, <argument pos:start="265:32" pos:end="265:40"><expr pos:start="265:32" pos:end="265:40"><sizeof pos:start="265:32" pos:end="265:40">sizeof<argument_list pos:start="265:38" pos:end="265:40">(<argument pos:start="265:39" pos:end="265:39"><expr pos:start="265:39" pos:end="265:39"><name pos:start="265:39" pos:end="265:39">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="265:43" pos:end="265:44">!=</operator> <sizeof pos:start="265:46" pos:end="265:54">sizeof<argument_list pos:start="265:52" pos:end="265:54">(<argument pos:start="265:53" pos:end="265:53"><expr pos:start="265:53" pos:end="265:53"><name pos:start="265:53" pos:end="265:53">s</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="265:57" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:22">

            <expr_stmt pos:start="267:13" pos:end="267:61"><expr pos:start="267:13" pos:end="267:60"><call pos:start="267:13" pos:end="267:60"><name pos:start="267:13" pos:end="267:22">error_setg</name><argument_list pos:start="267:23" pos:end="267:60">(<argument pos:start="267:24" pos:end="267:27"><expr pos:start="267:24" pos:end="267:27"><name pos:start="267:24" pos:end="267:27">errp</name></expr></argument>, <argument pos:start="267:30" pos:end="267:59"><expr pos:start="267:30" pos:end="267:59"><literal type="string" pos:start="267:30" pos:end="267:59">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="269:13" pos:end="269:22">goto <name pos:start="269:18" pos:end="269:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:31"><expr pos:start="273:9" pos:end="273:30"><operator pos:start="273:9" pos:end="273:9">*</operator><name pos:start="273:10" pos:end="273:13">size</name> <operator pos:start="273:15" pos:end="273:15">=</operator> <call pos:start="273:17" pos:end="273:30"><name pos:start="273:17" pos:end="273:27">be64_to_cpu</name><argument_list pos:start="273:28" pos:end="273:30">(<argument pos:start="273:29" pos:end="273:29"><expr pos:start="273:29" pos:end="273:29"><name pos:start="273:29" pos:end="273:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:41"><expr pos:start="275:9" pos:end="275:40"><call pos:start="275:9" pos:end="275:40"><name pos:start="275:9" pos:end="275:13">TRACE</name><argument_list pos:start="275:14" pos:end="275:40">(<argument pos:start="275:15" pos:end="275:32"><expr pos:start="275:15" pos:end="275:32"><literal type="string" pos:start="275:15" pos:end="275:25">"Size is %"</literal> <name pos:start="275:27" pos:end="275:32">PRIu64</name></expr></argument>, <argument pos:start="275:35" pos:end="275:39"><expr pos:start="275:35" pos:end="275:39"><operator pos:start="275:35" pos:end="275:35">*</operator><name pos:start="275:36" pos:end="275:39">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="279:9" pos:end="287:9"><if pos:start="279:9" pos:end="287:9">if <condition pos:start="279:12" pos:end="281:32">(<expr pos:start="279:13" pos:end="281:31"><call pos:start="279:13" pos:end="279:61"><name pos:start="279:13" pos:end="279:21">read_sync</name><argument_list pos:start="279:22" pos:end="279:61">(<argument pos:start="279:23" pos:end="279:25"><expr pos:start="279:23" pos:end="279:25"><name pos:start="279:23" pos:end="279:25">ioc</name></expr></argument>, <argument pos:start="279:28" pos:end="279:39"><expr pos:start="279:28" pos:end="279:39"><operator pos:start="279:28" pos:end="279:28">&amp;</operator><name pos:start="279:29" pos:end="279:39">exportflags</name></expr></argument>, <argument pos:start="279:42" pos:end="279:60"><expr pos:start="279:42" pos:end="279:60"><sizeof pos:start="279:42" pos:end="279:60">sizeof<argument_list pos:start="279:48" pos:end="279:60">(<argument pos:start="279:49" pos:end="279:59"><expr pos:start="279:49" pos:end="279:59"><name pos:start="279:49" pos:end="279:59">exportflags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="279:63" pos:end="279:64">!=</operator>

            <sizeof pos:start="281:13" pos:end="281:31">sizeof<argument_list pos:start="281:19" pos:end="281:31">(<argument pos:start="281:20" pos:end="281:30"><expr pos:start="281:20" pos:end="281:30"><name pos:start="281:20" pos:end="281:30">exportflags</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="281:34" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:22">

            <expr_stmt pos:start="283:13" pos:end="283:60"><expr pos:start="283:13" pos:end="283:59"><call pos:start="283:13" pos:end="283:59"><name pos:start="283:13" pos:end="283:22">error_setg</name><argument_list pos:start="283:23" pos:end="283:59">(<argument pos:start="283:24" pos:end="283:27"><expr pos:start="283:24" pos:end="283:27"><name pos:start="283:24" pos:end="283:27">errp</name></expr></argument>, <argument pos:start="283:30" pos:end="283:58"><expr pos:start="283:30" pos:end="283:58"><literal type="string" pos:start="283:30" pos:end="283:58">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="285:13" pos:end="285:22">goto <name pos:start="285:18" pos:end="285:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:47"><expr pos:start="289:9" pos:end="289:46"><name pos:start="289:9" pos:end="289:19">exportflags</name> <operator pos:start="289:21" pos:end="289:21">=</operator> <call pos:start="289:23" pos:end="289:46"><name pos:start="289:23" pos:end="289:33">be16_to_cpu</name><argument_list pos:start="289:34" pos:end="289:46">(<argument pos:start="289:35" pos:end="289:45"><expr pos:start="289:35" pos:end="289:45"><name pos:start="289:35" pos:end="289:45">exportflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:30"><expr pos:start="291:9" pos:end="291:29"><operator pos:start="291:9" pos:end="291:9">*</operator><name pos:start="291:10" pos:end="291:14">flags</name> <operator pos:start="291:16" pos:end="291:17">|=</operator> <name pos:start="291:19" pos:end="291:29">exportflags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:56"><expr pos:start="293:9" pos:end="293:55"><call pos:start="293:9" pos:end="293:55"><name pos:start="293:9" pos:end="293:13">TRACE</name><argument_list pos:start="293:14" pos:end="293:55">(<argument pos:start="293:15" pos:end="293:41"><expr pos:start="293:15" pos:end="293:41"><literal type="string" pos:start="293:15" pos:end="293:34">"Export flags are %"</literal> <name pos:start="293:36" pos:end="293:41">PRIx16</name></expr></argument>, <argument pos:start="293:44" pos:end="293:54"><expr pos:start="293:44" pos:end="293:54"><name pos:start="293:44" pos:end="293:54">exportflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="295:7" pos:end="339:5">else if <condition pos:start="295:15" pos:end="295:41">(<expr pos:start="295:16" pos:end="295:40"><name pos:start="295:16" pos:end="295:20">magic</name> <operator pos:start="295:22" pos:end="295:23">==</operator> <name pos:start="295:25" pos:end="295:40">NBD_CLIENT_MAGIC</name></expr>)</condition> <block pos:start="295:43" pos:end="339:5">{<block_content pos:start="297:9" pos:end="337:37">

        <if_stmt pos:start="297:9" pos:end="303:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:17">(<expr pos:start="297:13" pos:end="297:16"><name pos:start="297:13" pos:end="297:16">name</name></expr>)</condition> <block pos:start="297:19" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:22">

            <expr_stmt pos:start="299:13" pos:end="299:69"><expr pos:start="299:13" pos:end="299:68"><call pos:start="299:13" pos:end="299:68"><name pos:start="299:13" pos:end="299:22">error_setg</name><argument_list pos:start="299:23" pos:end="299:68">(<argument pos:start="299:24" pos:end="299:27"><expr pos:start="299:24" pos:end="299:27"><name pos:start="299:24" pos:end="299:27">errp</name></expr></argument>, <argument pos:start="299:30" pos:end="299:67"><expr pos:start="299:30" pos:end="299:67"><literal type="string" pos:start="299:30" pos:end="299:67">"Server does not support export names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="301:13" pos:end="301:22">goto <name pos:start="301:18" pos:end="301:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="305:9" pos:end="311:9"><if pos:start="305:9" pos:end="311:9">if <condition pos:start="305:12" pos:end="305:21">(<expr pos:start="305:13" pos:end="305:20"><name pos:start="305:13" pos:end="305:20">tlscreds</name></expr>)</condition> <block pos:start="305:23" pos:end="311:9">{<block_content pos:start="307:13" pos:end="309:22">

            <expr_stmt pos:start="307:13" pos:end="307:65"><expr pos:start="307:13" pos:end="307:64"><call pos:start="307:13" pos:end="307:64"><name pos:start="307:13" pos:end="307:22">error_setg</name><argument_list pos:start="307:23" pos:end="307:64">(<argument pos:start="307:24" pos:end="307:27"><expr pos:start="307:24" pos:end="307:27"><name pos:start="307:24" pos:end="307:27">errp</name></expr></argument>, <argument pos:start="307:30" pos:end="307:63"><expr pos:start="307:30" pos:end="307:63"><literal type="string" pos:start="307:30" pos:end="307:63">"Server does not support STARTTLS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="309:13" pos:end="309:22">goto <name pos:start="309:18" pos:end="309:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="315:9" pos:end="321:9"><if pos:start="315:9" pos:end="321:9">if <condition pos:start="315:12" pos:end="315:55">(<expr pos:start="315:13" pos:end="315:54"><call pos:start="315:13" pos:end="315:41"><name pos:start="315:13" pos:end="315:21">read_sync</name><argument_list pos:start="315:22" pos:end="315:41">(<argument pos:start="315:23" pos:end="315:25"><expr pos:start="315:23" pos:end="315:25"><name pos:start="315:23" pos:end="315:25">ioc</name></expr></argument>, <argument pos:start="315:28" pos:end="315:29"><expr pos:start="315:28" pos:end="315:29"><operator pos:start="315:28" pos:end="315:28">&amp;</operator><name pos:start="315:29" pos:end="315:29">s</name></expr></argument>, <argument pos:start="315:32" pos:end="315:40"><expr pos:start="315:32" pos:end="315:40"><sizeof pos:start="315:32" pos:end="315:40">sizeof<argument_list pos:start="315:38" pos:end="315:40">(<argument pos:start="315:39" pos:end="315:39"><expr pos:start="315:39" pos:end="315:39"><name pos:start="315:39" pos:end="315:39">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="315:43" pos:end="315:44">!=</operator> <sizeof pos:start="315:46" pos:end="315:54">sizeof<argument_list pos:start="315:52" pos:end="315:54">(<argument pos:start="315:53" pos:end="315:53"><expr pos:start="315:53" pos:end="315:53"><name pos:start="315:53" pos:end="315:53">s</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="315:57" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:22">

            <expr_stmt pos:start="317:13" pos:end="317:61"><expr pos:start="317:13" pos:end="317:60"><call pos:start="317:13" pos:end="317:60"><name pos:start="317:13" pos:end="317:22">error_setg</name><argument_list pos:start="317:23" pos:end="317:60">(<argument pos:start="317:24" pos:end="317:27"><expr pos:start="317:24" pos:end="317:27"><name pos:start="317:24" pos:end="317:27">errp</name></expr></argument>, <argument pos:start="317:30" pos:end="317:59"><expr pos:start="317:30" pos:end="317:59"><literal type="string" pos:start="317:30" pos:end="317:59">"Failed to read export length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="319:13" pos:end="319:22">goto <name pos:start="319:18" pos:end="319:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:31"><expr pos:start="323:9" pos:end="323:30"><operator pos:start="323:9" pos:end="323:9">*</operator><name pos:start="323:10" pos:end="323:13">size</name> <operator pos:start="323:15" pos:end="323:15">=</operator> <call pos:start="323:17" pos:end="323:30"><name pos:start="323:17" pos:end="323:27">be64_to_cpu</name><argument_list pos:start="323:28" pos:end="323:30">(<argument pos:start="323:29" pos:end="323:29"><expr pos:start="323:29" pos:end="323:29"><name pos:start="323:29" pos:end="323:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:41"><expr pos:start="325:9" pos:end="325:40"><call pos:start="325:9" pos:end="325:40"><name pos:start="325:9" pos:end="325:13">TRACE</name><argument_list pos:start="325:14" pos:end="325:40">(<argument pos:start="325:15" pos:end="325:32"><expr pos:start="325:15" pos:end="325:32"><literal type="string" pos:start="325:15" pos:end="325:25">"Size is %"</literal> <name pos:start="325:27" pos:end="325:32">PRIu64</name></expr></argument>, <argument pos:start="325:35" pos:end="325:39"><expr pos:start="325:35" pos:end="325:39"><operator pos:start="325:35" pos:end="325:35">*</operator><name pos:start="325:36" pos:end="325:39">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="329:9" pos:end="335:9"><if pos:start="329:9" pos:end="335:9">if <condition pos:start="329:12" pos:end="329:68">(<expr pos:start="329:13" pos:end="329:67"><call pos:start="329:13" pos:end="329:49"><name pos:start="329:13" pos:end="329:21">read_sync</name><argument_list pos:start="329:22" pos:end="329:49">(<argument pos:start="329:23" pos:end="329:25"><expr pos:start="329:23" pos:end="329:25"><name pos:start="329:23" pos:end="329:25">ioc</name></expr></argument>, <argument pos:start="329:28" pos:end="329:32"><expr pos:start="329:28" pos:end="329:32"><name pos:start="329:28" pos:end="329:32">flags</name></expr></argument>, <argument pos:start="329:35" pos:end="329:48"><expr pos:start="329:35" pos:end="329:48"><sizeof pos:start="329:35" pos:end="329:48">sizeof<argument_list pos:start="329:41" pos:end="329:48">(<argument pos:start="329:42" pos:end="329:47"><expr pos:start="329:42" pos:end="329:47"><operator pos:start="329:42" pos:end="329:42">*</operator><name pos:start="329:43" pos:end="329:47">flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="329:51" pos:end="329:52">!=</operator> <sizeof pos:start="329:54" pos:end="329:67">sizeof<argument_list pos:start="329:60" pos:end="329:67">(<argument pos:start="329:61" pos:end="329:66"><expr pos:start="329:61" pos:end="329:66"><operator pos:start="329:61" pos:end="329:61">*</operator><name pos:start="329:62" pos:end="329:66">flags</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="329:70" pos:end="335:9">{<block_content pos:start="331:13" pos:end="333:22">

            <expr_stmt pos:start="331:13" pos:end="331:60"><expr pos:start="331:13" pos:end="331:59"><call pos:start="331:13" pos:end="331:59"><name pos:start="331:13" pos:end="331:22">error_setg</name><argument_list pos:start="331:23" pos:end="331:59">(<argument pos:start="331:24" pos:end="331:27"><expr pos:start="331:24" pos:end="331:27"><name pos:start="331:24" pos:end="331:27">errp</name></expr></argument>, <argument pos:start="331:30" pos:end="331:58"><expr pos:start="331:30" pos:end="331:58"><literal type="string" pos:start="331:30" pos:end="331:58">"Failed to read export flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="333:13" pos:end="333:22">goto <name pos:start="333:18" pos:end="333:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:37"><expr pos:start="337:9" pos:end="337:36"><operator pos:start="337:9" pos:end="337:9">*</operator><name pos:start="337:10" pos:end="337:14">flags</name> <operator pos:start="337:16" pos:end="337:16">=</operator> <call pos:start="337:18" pos:end="337:36"><name pos:start="337:18" pos:end="337:28">be32_to_cpu</name><argument_list pos:start="337:29" pos:end="337:36">(<argument pos:start="337:30" pos:end="337:35"><expr pos:start="337:30" pos:end="337:35"><operator pos:start="337:30" pos:end="337:30">*</operator><name pos:start="337:31" pos:end="337:35">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="339:7" pos:end="345:5">else <block pos:start="339:12" pos:end="345:5">{<block_content pos:start="341:9" pos:end="343:18">

        <expr_stmt pos:start="341:9" pos:end="341:47"><expr pos:start="341:9" pos:end="341:46"><call pos:start="341:9" pos:end="341:46"><name pos:start="341:9" pos:end="341:18">error_setg</name><argument_list pos:start="341:19" pos:end="341:46">(<argument pos:start="341:20" pos:end="341:23"><expr pos:start="341:20" pos:end="341:23"><name pos:start="341:20" pos:end="341:23">errp</name></expr></argument>, <argument pos:start="341:26" pos:end="341:45"><expr pos:start="341:26" pos:end="341:45"><literal type="string" pos:start="341:26" pos:end="341:45">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="343:9" pos:end="343:18">goto <name pos:start="343:14" pos:end="343:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="349:5" pos:end="355:5"><if pos:start="349:5" pos:end="355:5">if <condition pos:start="349:8" pos:end="349:41">(<expr pos:start="349:9" pos:end="349:40"><call pos:start="349:9" pos:end="349:33"><name pos:start="349:9" pos:end="349:17">read_sync</name><argument_list pos:start="349:18" pos:end="349:33">(<argument pos:start="349:19" pos:end="349:21"><expr pos:start="349:19" pos:end="349:21"><name pos:start="349:19" pos:end="349:21">ioc</name></expr></argument>, <argument pos:start="349:24" pos:end="349:27"><expr pos:start="349:24" pos:end="349:27"><operator pos:start="349:24" pos:end="349:24">&amp;</operator><name pos:start="349:25" pos:end="349:27">buf</name></expr></argument>, <argument pos:start="349:30" pos:end="349:32"><expr pos:start="349:30" pos:end="349:32"><literal type="number" pos:start="349:30" pos:end="349:32">124</literal></expr></argument>)</argument_list></call> <operator pos:start="349:35" pos:end="349:36">!=</operator> <literal type="number" pos:start="349:38" pos:end="349:40">124</literal></expr>)</condition> <block pos:start="349:43" pos:end="355:5">{<block_content pos:start="351:9" pos:end="353:18">

        <expr_stmt pos:start="351:9" pos:end="351:58"><expr pos:start="351:9" pos:end="351:57"><call pos:start="351:9" pos:end="351:57"><name pos:start="351:9" pos:end="351:18">error_setg</name><argument_list pos:start="351:19" pos:end="351:57">(<argument pos:start="351:20" pos:end="351:23"><expr pos:start="351:20" pos:end="351:23"><name pos:start="351:20" pos:end="351:23">errp</name></expr></argument>, <argument pos:start="351:26" pos:end="351:56"><expr pos:start="351:26" pos:end="351:56"><literal type="string" pos:start="351:26" pos:end="351:56">"Failed to read reserved block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="353:9" pos:end="353:18">goto <name pos:start="353:14" pos:end="353:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:11"><expr pos:start="357:5" pos:end="357:10"><name pos:start="357:5" pos:end="357:6">rc</name> <operator pos:start="357:8" pos:end="357:8">=</operator> <literal type="number" pos:start="357:10" pos:end="357:10">0</literal></expr>;</expr_stmt>



<label pos:start="361:1" pos:end="361:5"><name pos:start="361:1" pos:end="361:4">fail</name>:</label>

    <return pos:start="363:5" pos:end="363:14">return <expr pos:start="363:12" pos:end="363:13"><name pos:start="363:12" pos:end="363:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
