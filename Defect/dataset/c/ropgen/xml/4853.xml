<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4853.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">omap_i2c_send</name><parameter_list pos:start="1:26" pos:end="3:59">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:36">I2CAdapter</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">i2c</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">uint8_t</name></type> <name pos:start="1:52" pos:end="1:55">addr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><specifier pos:start="3:27" pos:end="3:31">const</specifier> <name pos:start="3:33" pos:end="3:39">uint8_t</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">buf</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:54">uint16_t</name></type> <name pos:start="3:56" pos:end="3:58">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:45">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">OMAPI2C</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">s</name> <init pos:start="7:16" pos:end="7:31">= <expr pos:start="7:18" pos:end="7:31"><operator pos:start="7:18" pos:end="7:18">(</operator><name pos:start="7:19" pos:end="7:25">OMAPI2C</name> <operator pos:start="7:27" pos:end="7:27">*</operator><operator pos:start="7:28" pos:end="7:28">)</operator><name pos:start="7:29" pos:end="7:31">i2c</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:17">data</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><call pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:27">omap_i2c_set_slave_addr</name><argument_list pos:start="13:28" pos:end="13:36">(<argument pos:start="13:29" pos:end="13:29"><expr pos:start="13:29" pos:end="13:29"><name pos:start="13:29" pos:end="13:29">s</name></expr></argument>, <argument pos:start="13:32" pos:end="13:35"><expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:8">data</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <name pos:start="17:12" pos:end="17:14">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><call pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:12">memwrite</name><argument_list pos:start="19:13" pos:end="19:46">(<argument pos:start="19:14" pos:end="19:35"><expr pos:start="19:14" pos:end="19:35"><name pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:14">s</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:20">addr</name></name> <operator pos:start="19:22" pos:end="19:22">+</operator> <name pos:start="19:24" pos:end="19:35">OMAP_I2C_CNT</name></expr></argument>, <argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><operator pos:start="19:38" pos:end="19:38">&amp;</operator><name pos:start="19:39" pos:end="19:42">data</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="31:28"><expr pos:start="23:5" pos:end="31:27"><name pos:start="23:5" pos:end="23:8">data</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <name pos:start="23:12" pos:end="23:30">OMAP_I2C_CON_I2C_EN</name> <operator pos:start="23:32" pos:end="23:32">|</operator>

           <name pos:start="25:12" pos:end="25:27">OMAP_I2C_CON_TRX</name> <operator pos:start="25:29" pos:end="25:29">|</operator>

           <name pos:start="27:12" pos:end="27:27">OMAP_I2C_CON_MST</name> <operator pos:start="27:29" pos:end="27:29">|</operator>

           <name pos:start="29:12" pos:end="29:27">OMAP_I2C_CON_STT</name> <operator pos:start="29:29" pos:end="29:29">|</operator>

           <name pos:start="31:12" pos:end="31:27">OMAP_I2C_CON_STP</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><call pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:12">memwrite</name><argument_list pos:start="33:13" pos:end="33:46">(<argument pos:start="33:14" pos:end="33:35"><expr pos:start="33:14" pos:end="33:35"><name pos:start="33:14" pos:end="33:20"><name pos:start="33:14" pos:end="33:14">s</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:20">addr</name></name> <operator pos:start="33:22" pos:end="33:22">+</operator> <name pos:start="33:24" pos:end="33:35">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="33:38" pos:end="33:42"><expr pos:start="33:38" pos:end="33:42"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:42">data</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><call pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:11">memread</name><argument_list pos:start="35:12" pos:end="35:45">(<argument pos:start="35:13" pos:end="35:34"><expr pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">addr</name></name> <operator pos:start="35:21" pos:end="35:21">+</operator> <name pos:start="35:23" pos:end="35:34">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="35:37" pos:end="35:41"><expr pos:start="35:37" pos:end="35:41"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:41">data</name></expr></argument>, <argument pos:start="35:44" pos:end="35:44"><expr pos:start="35:44" pos:end="35:44"><literal type="number" pos:start="35:44" pos:end="35:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><call pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:12">g_assert</name><argument_list pos:start="37:13" pos:end="37:44">(<argument pos:start="37:14" pos:end="37:43"><expr pos:start="37:14" pos:end="37:43"><operator pos:start="37:14" pos:end="37:14">(</operator><name pos:start="37:15" pos:end="37:18">data</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <name pos:start="37:22" pos:end="37:37">OMAP_I2C_CON_STP</name><operator pos:start="37:38" pos:end="37:38">)</operator> <operator pos:start="37:40" pos:end="37:41">!=</operator> <literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:47"><expr pos:start="41:5" pos:end="41:46"><call pos:start="41:5" pos:end="41:46"><name pos:start="41:5" pos:end="41:11">memread</name><argument_list pos:start="41:12" pos:end="41:46">(<argument pos:start="41:13" pos:end="41:35"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:19">addr</name></name> <operator pos:start="41:21" pos:end="41:21">+</operator> <name pos:start="41:23" pos:end="41:35">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="41:38" pos:end="41:42"><expr pos:start="41:38" pos:end="41:42"><operator pos:start="41:38" pos:end="41:38">&amp;</operator><name pos:start="41:39" pos:end="41:42">data</name></expr></argument>, <argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><call pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:12">g_assert</name><argument_list pos:start="43:13" pos:end="43:46">(<argument pos:start="43:14" pos:end="43:45"><expr pos:start="43:14" pos:end="43:45"><operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:18">data</name> <operator pos:start="43:20" pos:end="43:20">&amp;</operator> <name pos:start="43:22" pos:end="43:39">OMAP_I2C_STAT_NACK</name><operator pos:start="43:40" pos:end="43:40">)</operator> <operator pos:start="43:42" pos:end="43:43">==</operator> <literal type="number" pos:start="43:45" pos:end="43:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="47:5" pos:end="61:5">while <condition pos:start="47:11" pos:end="47:19">(<expr pos:start="47:12" pos:end="47:18"><name pos:start="47:12" pos:end="47:14">len</name> <operator pos:start="47:16" pos:end="47:16">&gt;</operator> <literal type="number" pos:start="47:18" pos:end="47:18">1</literal></expr>)</condition> <block pos:start="47:21" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:17">

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><call pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:15">memread</name><argument_list pos:start="49:16" pos:end="49:50">(<argument pos:start="49:17" pos:end="49:39"><expr pos:start="49:17" pos:end="49:39"><name pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:23">addr</name></name> <operator pos:start="49:25" pos:end="49:25">+</operator> <name pos:start="49:27" pos:end="49:39">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="49:42" pos:end="49:46"><expr pos:start="49:42" pos:end="49:46"><operator pos:start="49:42" pos:end="49:42">&amp;</operator><name pos:start="49:43" pos:end="49:46">data</name></expr></argument>, <argument pos:start="49:49" pos:end="49:49"><expr pos:start="49:49" pos:end="49:49"><literal type="number" pos:start="49:49" pos:end="49:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><call pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:50">(<argument pos:start="51:18" pos:end="51:49"><expr pos:start="51:18" pos:end="51:49"><operator pos:start="51:18" pos:end="51:18">(</operator><name pos:start="51:19" pos:end="51:22">data</name> <operator pos:start="51:24" pos:end="51:24">&amp;</operator> <name pos:start="51:26" pos:end="51:43">OMAP_I2C_STAT_XRDY</name><operator pos:start="51:44" pos:end="51:44">)</operator> <operator pos:start="51:46" pos:end="51:47">!=</operator> <literal type="number" pos:start="51:49" pos:end="51:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><call pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:16">memwrite</name><argument_list pos:start="55:17" pos:end="55:49">(<argument pos:start="55:18" pos:end="55:40"><expr pos:start="55:18" pos:end="55:40"><name pos:start="55:18" pos:end="55:24"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:24">addr</name></name> <operator pos:start="55:26" pos:end="55:26">+</operator> <name pos:start="55:28" pos:end="55:40">OMAP_I2C_DATA</name></expr></argument>, <argument pos:start="55:43" pos:end="55:45"><expr pos:start="55:43" pos:end="55:45"><name pos:start="55:43" pos:end="55:45">buf</name></expr></argument>, <argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><literal type="number" pos:start="55:48" pos:end="55:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:11">buf</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><name pos:start="57:16" pos:end="57:22">uint8_t</name> <operator pos:start="57:24" pos:end="57:24">*</operator><operator pos:start="57:25" pos:end="57:25">)</operator><name pos:start="57:26" pos:end="57:28">buf</name> <operator pos:start="57:30" pos:end="57:30">+</operator> <literal type="number" pos:start="57:32" pos:end="57:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:17"><expr pos:start="59:9" pos:end="59:16"><name pos:start="59:9" pos:end="59:11">len</name> <operator pos:start="59:13" pos:end="59:14">-=</operator> <literal type="number" pos:start="59:16" pos:end="59:16">2</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">len</name> <operator pos:start="63:13" pos:end="63:14">==</operator> <literal type="number" pos:start="63:16" pos:end="63:16">1</literal></expr>)</condition> <block pos:start="63:19" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:50">

        <expr_stmt pos:start="65:9" pos:end="65:51"><expr pos:start="65:9" pos:end="65:50"><call pos:start="65:9" pos:end="65:50"><name pos:start="65:9" pos:end="65:15">memread</name><argument_list pos:start="65:16" pos:end="65:50">(<argument pos:start="65:17" pos:end="65:39"><expr pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:23">addr</name></name> <operator pos:start="65:25" pos:end="65:25">+</operator> <name pos:start="65:27" pos:end="65:39">OMAP_I2C_STAT</name></expr></argument>, <argument pos:start="65:42" pos:end="65:46"><expr pos:start="65:42" pos:end="65:46"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:46">data</name></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:51"><expr pos:start="67:9" pos:end="67:50"><call pos:start="67:9" pos:end="67:50"><name pos:start="67:9" pos:end="67:16">g_assert</name><argument_list pos:start="67:17" pos:end="67:50">(<argument pos:start="67:18" pos:end="67:49"><expr pos:start="67:18" pos:end="67:49"><operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:22">data</name> <operator pos:start="67:24" pos:end="67:24">&amp;</operator> <name pos:start="67:26" pos:end="67:43">OMAP_I2C_STAT_XRDY</name><operator pos:start="67:44" pos:end="67:44">)</operator> <operator pos:start="67:46" pos:end="67:47">!=</operator> <literal type="number" pos:start="67:49" pos:end="67:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:50"><expr pos:start="71:9" pos:end="71:49"><call pos:start="71:9" pos:end="71:49"><name pos:start="71:9" pos:end="71:16">memwrite</name><argument_list pos:start="71:17" pos:end="71:49">(<argument pos:start="71:18" pos:end="71:40"><expr pos:start="71:18" pos:end="71:40"><name pos:start="71:18" pos:end="71:24"><name pos:start="71:18" pos:end="71:18">s</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:24">addr</name></name> <operator pos:start="71:26" pos:end="71:26">+</operator> <name pos:start="71:28" pos:end="71:40">OMAP_I2C_DATA</name></expr></argument>, <argument pos:start="71:43" pos:end="71:45"><expr pos:start="71:43" pos:end="71:45"><name pos:start="71:43" pos:end="71:45">buf</name></expr></argument>, <argument pos:start="71:48" pos:end="71:48"><expr pos:start="71:48" pos:end="71:48"><literal type="number" pos:start="71:48" pos:end="71:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:46"><expr pos:start="77:5" pos:end="77:45"><call pos:start="77:5" pos:end="77:45"><name pos:start="77:5" pos:end="77:11">memread</name><argument_list pos:start="77:12" pos:end="77:45">(<argument pos:start="77:13" pos:end="77:34"><expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:19">addr</name></name> <operator pos:start="77:21" pos:end="77:21">+</operator> <name pos:start="77:23" pos:end="77:34">OMAP_I2C_CON</name></expr></argument>, <argument pos:start="77:37" pos:end="77:41"><expr pos:start="77:37" pos:end="77:41"><operator pos:start="77:37" pos:end="77:37">&amp;</operator><name pos:start="77:38" pos:end="77:41">data</name></expr></argument>, <argument pos:start="77:44" pos:end="77:44"><expr pos:start="77:44" pos:end="77:44"><literal type="number" pos:start="77:44" pos:end="77:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><call pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:12">g_assert</name><argument_list pos:start="79:13" pos:end="79:44">(<argument pos:start="79:14" pos:end="79:43"><expr pos:start="79:14" pos:end="79:43"><operator pos:start="79:14" pos:end="79:14">(</operator><name pos:start="79:15" pos:end="79:18">data</name> <operator pos:start="79:20" pos:end="79:20">&amp;</operator> <name pos:start="79:22" pos:end="79:37">OMAP_I2C_CON_STP</name><operator pos:start="79:38" pos:end="79:38">)</operator> <operator pos:start="79:40" pos:end="79:41">==</operator> <literal type="number" pos:start="79:43" pos:end="79:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
