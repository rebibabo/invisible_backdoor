<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11209.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">spapr_machine_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:43">MachineState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:52">machine</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="293:1">{<block_content pos:start="3:5" pos:end="292:5">
    <decl_stmt pos:start="3:5" pos:end="3:54"><decl pos:start="3:5" pos:end="3:53"><type pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:21">sPAPRMachineState</name> <modifier pos:start="3:23" pos:end="3:23">*</modifier></type><name pos:start="3:24" pos:end="3:28">spapr</name> <init pos:start="3:30" pos:end="3:53">= <expr pos:start="3:32" pos:end="3:53"><call pos:start="3:32" pos:end="3:53"><name pos:start="3:32" pos:end="3:44">SPAPR_MACHINE</name><argument_list pos:start="3:45" pos:end="3:53">(<argument pos:start="3:46" pos:end="3:52"><expr pos:start="3:46" pos:end="3:52"><name pos:start="3:46" pos:end="3:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:62"><decl pos:start="4:5" pos:end="4:61"><type pos:start="4:5" pos:end="4:23"><name pos:start="4:5" pos:end="4:21">sPAPRMachineClass</name> <modifier pos:start="4:23" pos:end="4:23">*</modifier></type><name pos:start="4:24" pos:end="4:26">smc</name> <init pos:start="4:28" pos:end="4:61">= <expr pos:start="4:30" pos:end="4:61"><call pos:start="4:30" pos:end="4:61"><name pos:start="4:30" pos:end="4:52">SPAPR_MACHINE_GET_CLASS</name><argument_list pos:start="4:53" pos:end="4:61">(<argument pos:start="4:54" pos:end="4:60"><expr pos:start="4:54" pos:end="4:60"><name pos:start="4:54" pos:end="4:60">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:31">kernel_filename</name> <init pos:start="5:33" pos:end="5:58">= <expr pos:start="5:35" pos:end="5:58"><name pos:start="5:35" pos:end="5:58"><name pos:start="5:35" pos:end="5:41">machine</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:59"><decl pos:start="6:5" pos:end="6:58"><type pos:start="6:5" pos:end="6:16"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:31">initrd_filename</name> <init pos:start="6:33" pos:end="6:58">= <expr pos:start="6:35" pos:end="6:58"><name pos:start="6:35" pos:end="6:58"><name pos:start="6:35" pos:end="6:41">machine</name><operator pos:start="6:42" pos:end="6:43">-&gt;</operator><name pos:start="6:44" pos:end="6:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCIHostState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">phb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:10"><decl pos:start="8:5" pos:end="8:9"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:24">sysmem</name> <init pos:start="9:26" pos:end="9:46">= <expr pos:start="9:28" pos:end="9:46"><call pos:start="9:28" pos:end="9:46"><name pos:start="9:28" pos:end="9:44">get_system_memory</name><argument_list pos:start="9:45" pos:end="9:46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:47"><decl pos:start="10:5" pos:end="10:46"><type pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:16">MemoryRegion</name> <modifier pos:start="10:18" pos:end="10:18">*</modifier></type><name pos:start="10:19" pos:end="10:21">ram</name> <init pos:start="10:23" pos:end="10:46">= <expr pos:start="10:25" pos:end="10:46"><call pos:start="10:25" pos:end="10:46"><name pos:start="10:25" pos:end="10:29">g_new</name><argument_list pos:start="10:30" pos:end="10:46">(<argument pos:start="10:31" pos:end="10:42"><expr pos:start="10:31" pos:end="10:42"><name pos:start="10:31" pos:end="10:42">MemoryRegion</name></expr></argument>, <argument pos:start="10:45" pos:end="10:45"><expr pos:start="10:45" pos:end="10:45"><literal type="number" pos:start="10:45" pos:end="10:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:28">rma_region</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:21"><decl pos:start="12:5" pos:end="12:20"><type pos:start="12:5" pos:end="12:10"><name pos:start="12:5" pos:end="12:8">void</name> <modifier pos:start="12:10" pos:end="12:10">*</modifier></type><name pos:start="12:11" pos:end="12:13">rma</name> <init pos:start="12:15" pos:end="12:20">= <expr pos:start="12:17" pos:end="12:20"><name pos:start="12:17" pos:end="12:20">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:25">rma_alloc_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:50"><decl pos:start="14:5" pos:end="14:49"><type pos:start="14:5" pos:end="14:10"><name pos:start="14:5" pos:end="14:10">hwaddr</name></type> <name pos:start="14:12" pos:end="14:21">node0_size</name> <init pos:start="14:23" pos:end="14:49">= <expr pos:start="14:25" pos:end="14:49"><call pos:start="14:25" pos:end="14:49"><name pos:start="14:25" pos:end="14:40">spapr_node0_size</name><argument_list pos:start="14:41" pos:end="14:49">(<argument pos:start="14:42" pos:end="14:48"><expr pos:start="14:42" pos:end="14:48"><name pos:start="14:42" pos:end="14:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">long</name></type> <name pos:start="15:10" pos:end="15:19">load_limit</name></decl>, <decl pos:start="15:22" pos:end="15:28"><type ref="prev" pos:start="15:5" pos:end="15:8"/><name pos:start="15:22" pos:end="15:28">fw_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:19"><decl pos:start="16:5" pos:end="16:18"><type pos:start="16:5" pos:end="16:10"><name pos:start="16:5" pos:end="16:8">char</name> <modifier pos:start="16:10" pos:end="16:10">*</modifier></type><name pos:start="16:11" pos:end="16:18">filename</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">Error</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:25">resize_hpt_err</name> <init pos:start="17:27" pos:end="17:32">= <expr pos:start="17:29" pos:end="17:32"><name pos:start="17:29" pos:end="17:32">NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:25"><expr pos:start="18:5" pos:end="18:24"><name pos:start="18:5" pos:end="18:17">msi_nonbroken</name> <operator pos:start="18:19" pos:end="18:19">=</operator> <name pos:start="18:21" pos:end="18:24">true</name></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><call pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:14">QLIST_INIT</name><argument_list pos:start="19:15" pos:end="19:28">(<argument pos:start="19:16" pos:end="19:27"><expr pos:start="19:16" pos:end="19:27"><operator pos:start="19:16" pos:end="19:16">&amp;</operator><name pos:start="19:17" pos:end="19:27"><name pos:start="19:17" pos:end="19:21">spapr</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:27">phbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:46"><expr pos:start="20:5" pos:end="20:45"><call pos:start="20:5" pos:end="20:45"><name pos:start="20:5" pos:end="20:15">QTAILQ_INIT</name><argument_list pos:start="20:16" pos:end="20:45">(<argument pos:start="20:17" pos:end="20:44"><expr pos:start="20:17" pos:end="20:44"><operator pos:start="20:17" pos:end="20:17">&amp;</operator><name pos:start="20:18" pos:end="20:44"><name pos:start="20:18" pos:end="20:22">spapr</name><operator pos:start="20:23" pos:end="20:24">-&gt;</operator><name pos:start="20:25" pos:end="20:44">pending_dimm_unplugs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="21:5" pos:end="21:41">/* Check HPT resizing availability */</comment>
    <expr_stmt pos:start="22:5" pos:end="22:50"><expr pos:start="22:5" pos:end="22:49"><call pos:start="22:5" pos:end="22:49"><name pos:start="22:5" pos:end="22:32">kvmppc_check_papr_resize_hpt</name><argument_list pos:start="22:33" pos:end="22:49">(<argument pos:start="22:34" pos:end="22:48"><expr pos:start="22:34" pos:end="22:48"><operator pos:start="22:34" pos:end="22:34">&amp;</operator><name pos:start="22:35" pos:end="22:48">resize_hpt_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="23:5" pos:end="37:5"><if pos:start="23:5" pos:end="37:5">if <condition pos:start="23:8" pos:end="23:54">(<expr pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:13">spapr</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">resize_hpt</name></name> <operator pos:start="23:27" pos:end="23:28">==</operator> <name pos:start="23:30" pos:end="23:53">SPAPR_RESIZE_HPT_DEFAULT</name></expr>)</condition> <block pos:start="23:56" pos:end="37:5">{<block_content pos:start="30:9" pos:end="36:9">
        <comment type="block" pos:start="24:9" pos:end="29:11">/*
         * If the user explicitly requested a mode we should either
         * supply it, or fail completely (which we do below).  But if
         * it's not set explicitly, we reset our mode to something
         * that works
         */</comment>
        <if_stmt pos:start="30:9" pos:end="36:9"><if pos:start="30:9" pos:end="34:9">if <condition pos:start="30:12" pos:end="30:27">(<expr pos:start="30:13" pos:end="30:26"><name pos:start="30:13" pos:end="30:26">resize_hpt_err</name></expr>)</condition> <block pos:start="30:29" pos:end="34:9">{<block_content pos:start="31:13" pos:end="33:34">
            <expr_stmt pos:start="31:13" pos:end="31:58"><expr pos:start="31:13" pos:end="31:57"><name pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:17">spapr</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:29">resize_hpt</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <name pos:start="31:33" pos:end="31:57">SPAPR_RESIZE_HPT_DISABLED</name></expr>;</expr_stmt>
            <expr_stmt pos:start="32:13" pos:end="32:39"><expr pos:start="32:13" pos:end="32:38"><call pos:start="32:13" pos:end="32:38"><name pos:start="32:13" pos:end="32:22">error_free</name><argument_list pos:start="32:23" pos:end="32:38">(<argument pos:start="32:24" pos:end="32:37"><expr pos:start="32:24" pos:end="32:37"><name pos:start="32:24" pos:end="32:37">resize_hpt_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="33:13" pos:end="33:34"><expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:26">resize_hpt_err</name> <operator pos:start="33:28" pos:end="33:28">=</operator> <name pos:start="33:30" pos:end="33:33">NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="34:11" pos:end="36:9">else <block pos:start="34:16" pos:end="36:9">{<block_content pos:start="35:13" pos:end="35:56">
            <expr_stmt pos:start="35:13" pos:end="35:56"><expr pos:start="35:13" pos:end="35:55"><name pos:start="35:13" pos:end="35:29"><name pos:start="35:13" pos:end="35:17">spapr</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:29">resize_hpt</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <name pos:start="35:33" pos:end="35:55"><name pos:start="35:33" pos:end="35:35">smc</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:55">resize_hpt_default</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:58"><expr pos:start="38:5" pos:end="38:57"><call pos:start="38:5" pos:end="38:57"><name pos:start="38:5" pos:end="38:10">assert</name><argument_list pos:start="38:11" pos:end="38:57">(<argument pos:start="38:12" pos:end="38:56"><expr pos:start="38:12" pos:end="38:56"><name pos:start="38:12" pos:end="38:28"><name pos:start="38:12" pos:end="38:16">spapr</name><operator pos:start="38:17" pos:end="38:18">-&gt;</operator><name pos:start="38:19" pos:end="38:28">resize_hpt</name></name> <operator pos:start="38:30" pos:end="38:31">!=</operator> <name pos:start="38:33" pos:end="38:56">SPAPR_RESIZE_HPT_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:75">(<expr pos:start="39:9" pos:end="39:74"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:26"><name pos:start="39:10" pos:end="39:14">spapr</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:26">resize_hpt</name></name> <operator pos:start="39:28" pos:end="39:29">!=</operator> <name pos:start="39:31" pos:end="39:55">SPAPR_RESIZE_HPT_DISABLED</name><operator pos:start="39:56" pos:end="39:56">)</operator> <operator pos:start="39:58" pos:end="39:59">&amp;&amp;</operator> <name pos:start="39:61" pos:end="39:74">resize_hpt_err</name></expr>)</condition> <block pos:start="39:77" pos:end="45:5">{<block_content pos:start="43:9" pos:end="44:16">
        <comment type="block" pos:start="40:9" pos:end="42:11">/*
         * User requested HPT resize, but this host can't supply it.  Bail out
         */</comment>
        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><call pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:24">error_report_err</name><argument_list pos:start="43:25" pos:end="43:40">(<argument pos:start="43:26" pos:end="43:39"><expr pos:start="43:26" pos:end="43:39"><name pos:start="43:26" pos:end="43:39">resize_hpt_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:16"><expr pos:start="44:9" pos:end="44:15"><call pos:start="44:9" pos:end="44:15"><name pos:start="44:9" pos:end="44:12">exit</name><argument_list pos:start="44:13" pos:end="44:15">(<argument pos:start="44:14" pos:end="44:14"><expr pos:start="44:14" pos:end="44:14"><literal type="number" pos:start="44:14" pos:end="44:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="46:5" pos:end="46:35">/* Allocate RMA if necessary */</comment>
    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:18">rma_alloc_size</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <call pos:start="47:22" pos:end="47:43"><name pos:start="47:22" pos:end="47:37">kvmppc_alloc_rma</name><argument_list pos:start="47:38" pos:end="47:43">(<argument pos:start="47:39" pos:end="47:42"><expr pos:start="47:39" pos:end="47:42"><operator pos:start="47:39" pos:end="47:39">&amp;</operator><name pos:start="47:40" pos:end="47:42">rma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="48:5" pos:end="51:5"><if pos:start="48:5" pos:end="51:5">if <condition pos:start="48:8" pos:end="48:29">(<expr pos:start="48:9" pos:end="48:28"><name pos:start="48:9" pos:end="48:22">rma_alloc_size</name> <operator pos:start="48:24" pos:end="48:25">==</operator> <operator pos:start="48:27" pos:end="48:27">-</operator><literal type="number" pos:start="48:28" pos:end="48:28">1</literal></expr>)</condition> <block pos:start="48:31" pos:end="51:5">{<block_content pos:start="49:9" pos:end="50:16">
        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><call pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:44">(<argument pos:start="49:22" pos:end="49:43"><expr pos:start="49:22" pos:end="49:43"><literal type="string" pos:start="49:22" pos:end="49:43">"Unable to create RMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:16"><expr pos:start="50:9" pos:end="50:15"><call pos:start="50:9" pos:end="50:15"><name pos:start="50:9" pos:end="50:12">exit</name><argument_list pos:start="50:13" pos:end="50:15">(<argument pos:start="50:14" pos:end="50:14"><expr pos:start="50:14" pos:end="50:14"><literal type="number" pos:start="50:14" pos:end="50:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="52:5" pos:end="75:5"><if pos:start="52:5" pos:end="54:5">if <condition pos:start="52:8" pos:end="52:56">(<expr pos:start="52:9" pos:end="52:55"><name pos:start="52:9" pos:end="52:22">rma_alloc_size</name> <operator pos:start="52:24" pos:end="52:25">&amp;&amp;</operator> <operator pos:start="52:27" pos:end="52:27">(</operator><name pos:start="52:28" pos:end="52:41">rma_alloc_size</name> <operator pos:start="52:43" pos:end="52:43">&lt;</operator> <name pos:start="52:45" pos:end="52:54">node0_size</name><operator pos:start="52:55" pos:end="52:55">)</operator></expr>)</condition> <block pos:start="52:58" pos:end="54:5">{<block_content pos:start="53:9" pos:end="53:41">
        <expr_stmt pos:start="53:9" pos:end="53:41"><expr pos:start="53:9" pos:end="53:40"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:13">spapr</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">rma_size</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:40">rma_alloc_size</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="54:7" pos:end="75:5">else <block pos:start="54:12" pos:end="75:5">{<block_content pos:start="55:9" pos:end="74:63">
        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:13">spapr</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:23">rma_size</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:36">node0_size</name></expr>;</expr_stmt>
        <comment type="block" pos:start="56:9" pos:end="64:11">/* With KVM, we don't actually know whether KVM supports an
         * unbounded RMA (PR KVM) or is limited by the hash table size
         * (HV KVM using VRMA), so we always assume the latter
         *
         * In that case, we also limit the initial allocations for RTAS
         * etc... to 256M since we have no way to know what the VRMA size
         * is going to be as it depends on the size of the hash table
         * isn't determined yet.
         */</comment>
        <if_stmt pos:start="65:9" pos:end="68:9"><if pos:start="65:9" pos:end="68:9">if <condition pos:start="65:12" pos:end="65:26">(<expr pos:start="65:13" pos:end="65:25"><call pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:23">kvm_enabled</name><argument_list pos:start="65:24" pos:end="65:25">()</argument_list></call></expr>)</condition> <block pos:start="65:28" pos:end="68:9">{<block_content pos:start="66:13" pos:end="67:63">
            <expr_stmt pos:start="66:13" pos:end="66:35"><expr pos:start="66:13" pos:end="66:34"><name pos:start="66:13" pos:end="66:30"><name pos:start="66:13" pos:end="66:17">spapr</name><operator pos:start="66:18" pos:end="66:19">-&gt;</operator><name pos:start="66:20" pos:end="66:30">vrma_adjust</name></name> <operator pos:start="66:32" pos:end="66:32">=</operator> <literal type="number" pos:start="66:34" pos:end="66:34">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:63"><expr pos:start="67:13" pos:end="67:62"><name pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:17">spapr</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:27">rma_size</name></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <call pos:start="67:31" pos:end="67:62"><name pos:start="67:31" pos:end="67:33">MIN</name><argument_list pos:start="67:34" pos:end="67:62">(<argument pos:start="67:35" pos:end="67:49"><expr pos:start="67:35" pos:end="67:49"><name pos:start="67:35" pos:end="67:49"><name pos:start="67:35" pos:end="67:39">spapr</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:49">rma_size</name></name></expr></argument>, <argument pos:start="67:52" pos:end="67:61"><expr pos:start="67:52" pos:end="67:61"><literal type="number" pos:start="67:52" pos:end="67:61">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="69:9" pos:end="73:11">/* Actually we don't support unbounded RMA anymore since we
         * added proper emulation of HV mode. The max we can get is
         * 16G which also happens to be what we configure for PAPR
         * mode so make sure we don't do anything bigger than that
         */</comment>
        <expr_stmt pos:start="74:9" pos:end="74:63"><expr pos:start="74:9" pos:end="74:62"><name pos:start="74:9" pos:end="74:23"><name pos:start="74:9" pos:end="74:13">spapr</name><operator pos:start="74:14" pos:end="74:15">-&gt;</operator><name pos:start="74:16" pos:end="74:23">rma_size</name></name> <operator pos:start="74:25" pos:end="74:25">=</operator> <call pos:start="74:27" pos:end="74:62"><name pos:start="74:27" pos:end="74:29">MIN</name><argument_list pos:start="74:30" pos:end="74:62">(<argument pos:start="74:31" pos:end="74:45"><expr pos:start="74:31" pos:end="74:45"><name pos:start="74:31" pos:end="74:45"><name pos:start="74:31" pos:end="74:35">spapr</name><operator pos:start="74:36" pos:end="74:37">-&gt;</operator><name pos:start="74:38" pos:end="74:45">rma_size</name></name></expr></argument>, <argument pos:start="74:48" pos:end="74:61"><expr pos:start="74:48" pos:end="74:61"><literal type="number" pos:start="74:48" pos:end="74:61">0x400000000ull</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="76:5" pos:end="80:5"><if pos:start="76:5" pos:end="80:5">if <condition pos:start="76:8" pos:end="76:37">(<expr pos:start="76:9" pos:end="76:36"><name pos:start="76:9" pos:end="76:23"><name pos:start="76:9" pos:end="76:13">spapr</name><operator pos:start="76:14" pos:end="76:15">-&gt;</operator><name pos:start="76:16" pos:end="76:23">rma_size</name></name> <operator pos:start="76:25" pos:end="76:25">&gt;</operator> <name pos:start="76:27" pos:end="76:36">node0_size</name></expr>)</condition> <block pos:start="76:39" pos:end="80:5">{<block_content pos:start="77:9" pos:end="79:16">
        <expr_stmt pos:start="77:9" pos:end="78:38"><expr pos:start="77:9" pos:end="78:37"><call pos:start="77:9" pos:end="78:37"><name pos:start="77:9" pos:end="77:20">error_report</name><argument_list pos:start="77:21" pos:end="78:37">(<argument pos:start="77:22" pos:end="77:74"><expr pos:start="77:22" pos:end="77:74"><literal type="string" pos:start="77:22" pos:end="77:60">"Numa node 0 has to span the RMA (%#08"</literal><name pos:start="77:61" pos:end="77:71">HWADDR_PRIx</name><literal type="string" pos:start="77:72" pos:end="77:74">")"</literal></expr></argument>,
                     <argument pos:start="78:22" pos:end="78:36"><expr pos:start="78:22" pos:end="78:36"><name pos:start="78:22" pos:end="78:36"><name pos:start="78:22" pos:end="78:26">spapr</name><operator pos:start="78:27" pos:end="78:28">-&gt;</operator><name pos:start="78:29" pos:end="78:36">rma_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="81:5" pos:end="81:74">/* Setup a load limit for the ramdisk leaving room for SLOF and FDT */</comment>
    <expr_stmt pos:start="82:5" pos:end="82:67"><expr pos:start="82:5" pos:end="82:66"><name pos:start="82:5" pos:end="82:14">load_limit</name> <operator pos:start="82:16" pos:end="82:16">=</operator> <call pos:start="82:18" pos:end="82:52"><name pos:start="82:18" pos:end="82:20">MIN</name><argument_list pos:start="82:21" pos:end="82:52">(<argument pos:start="82:22" pos:end="82:36"><expr pos:start="82:22" pos:end="82:36"><name pos:start="82:22" pos:end="82:36"><name pos:start="82:22" pos:end="82:26">spapr</name><operator pos:start="82:27" pos:end="82:28">-&gt;</operator><name pos:start="82:29" pos:end="82:36">rma_size</name></name></expr></argument>, <argument pos:start="82:39" pos:end="82:51"><expr pos:start="82:39" pos:end="82:51"><name pos:start="82:39" pos:end="82:51">RTAS_MAX_ADDR</name></expr></argument>)</argument_list></call> <operator pos:start="82:54" pos:end="82:54">-</operator> <name pos:start="82:56" pos:end="82:66">FW_OVERHEAD</name></expr>;</expr_stmt>
    <comment type="block" pos:start="83:5" pos:end="83:64">/* Set up Interrupt Controller before we create the VCPUs */</comment>
    <expr_stmt pos:start="84:5" pos:end="84:61"><expr pos:start="84:5" pos:end="84:60"><call pos:start="84:5" pos:end="84:60"><name pos:start="84:5" pos:end="84:20">xics_system_init</name><argument_list pos:start="84:21" pos:end="84:60">(<argument pos:start="84:22" pos:end="84:28"><expr pos:start="84:22" pos:end="84:28"><name pos:start="84:22" pos:end="84:28">machine</name></expr></argument>, <argument pos:start="84:31" pos:end="84:45"><expr pos:start="84:31" pos:end="84:45"><name pos:start="84:31" pos:end="84:45">XICS_IRQS_SPAPR</name></expr></argument>, <argument pos:start="84:48" pos:end="84:59"><expr pos:start="84:48" pos:end="84:59"><operator pos:start="84:48" pos:end="84:48">&amp;</operator><name pos:start="84:49" pos:end="84:59">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="85:5" pos:end="86:7">/* Set up containers for ibm,client-architecture-support negotiated options
     */</comment>
    <expr_stmt pos:start="87:5" pos:end="87:34"><expr pos:start="87:5" pos:end="87:33"><name pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:9">spapr</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:14">ov5</name></name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:33"><name pos:start="87:18" pos:end="87:31">spapr_ovec_new</name><argument_list pos:start="87:32" pos:end="87:33">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="88:5" pos:end="88:38"><expr pos:start="88:5" pos:end="88:37"><name pos:start="88:5" pos:end="88:18"><name pos:start="88:5" pos:end="88:9">spapr</name><operator pos:start="88:10" pos:end="88:11">-&gt;</operator><name pos:start="88:12" pos:end="88:18">ov5_cas</name></name> <operator pos:start="88:20" pos:end="88:20">=</operator> <call pos:start="88:22" pos:end="88:37"><name pos:start="88:22" pos:end="88:35">spapr_ovec_new</name><argument_list pos:start="88:36" pos:end="88:37">()</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="89:5" pos:end="92:5"><if pos:start="89:5" pos:end="92:5">if <condition pos:start="89:8" pos:end="89:28">(<expr pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:11">smc</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:27">dr_lmb_enabled</name></name></expr>)</condition> <block pos:start="89:30" pos:end="92:5">{<block_content pos:start="90:9" pos:end="91:58">
        <expr_stmt pos:start="90:9" pos:end="90:54"><expr pos:start="90:9" pos:end="90:53"><call pos:start="90:9" pos:end="90:53"><name pos:start="90:9" pos:end="90:22">spapr_ovec_set</name><argument_list pos:start="90:23" pos:end="90:53">(<argument pos:start="90:24" pos:end="90:33"><expr pos:start="90:24" pos:end="90:33"><name pos:start="90:24" pos:end="90:33"><name pos:start="90:24" pos:end="90:28">spapr</name><operator pos:start="90:29" pos:end="90:30">-&gt;</operator><name pos:start="90:31" pos:end="90:33">ov5</name></name></expr></argument>, <argument pos:start="90:36" pos:end="90:52"><expr pos:start="90:36" pos:end="90:52"><name pos:start="90:36" pos:end="90:52">OV5_DRCONF_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="91:9" pos:end="91:58"><expr pos:start="91:9" pos:end="91:57"><call pos:start="91:9" pos:end="91:57"><name pos:start="91:9" pos:end="91:34">spapr_validate_node_memory</name><argument_list pos:start="91:35" pos:end="91:57">(<argument pos:start="91:36" pos:end="91:42"><expr pos:start="91:36" pos:end="91:42"><name pos:start="91:36" pos:end="91:42">machine</name></expr></argument>, <argument pos:start="91:45" pos:end="91:56"><expr pos:start="91:45" pos:end="91:56"><operator pos:start="91:45" pos:end="91:45">&amp;</operator><name pos:start="91:46" pos:end="91:56">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="93:5" pos:end="93:51"><expr pos:start="93:5" pos:end="93:50"><call pos:start="93:5" pos:end="93:50"><name pos:start="93:5" pos:end="93:18">spapr_ovec_set</name><argument_list pos:start="93:19" pos:end="93:50">(<argument pos:start="93:20" pos:end="93:29"><expr pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:24">spapr</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:29">ov5</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:49"><expr pos:start="93:32" pos:end="93:49"><name pos:start="93:32" pos:end="93:49">OV5_FORM1_AFFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="94:5" pos:end="97:5"><if pos:start="94:5" pos:end="97:5">if <condition pos:start="94:8" pos:end="94:53">(<expr pos:start="94:9" pos:end="94:52"><operator pos:start="94:9" pos:end="94:9">!</operator><call pos:start="94:10" pos:end="94:22"><name pos:start="94:10" pos:end="94:20">kvm_enabled</name><argument_list pos:start="94:21" pos:end="94:22">()</argument_list></call> <operator pos:start="94:24" pos:end="94:25">||</operator> <call pos:start="94:27" pos:end="94:52"><name pos:start="94:27" pos:end="94:50">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="94:51" pos:end="94:52">()</argument_list></call></expr>)</condition> <block pos:start="94:55" pos:end="97:5">{<block_content pos:start="96:9" pos:end="96:55">
        <comment type="block" pos:start="95:9" pos:end="95:57">/* KVM and TCG always allow GTSE with radix... */</comment>
        <expr_stmt pos:start="96:9" pos:end="96:55"><expr pos:start="96:9" pos:end="96:54"><call pos:start="96:9" pos:end="96:54"><name pos:start="96:9" pos:end="96:22">spapr_ovec_set</name><argument_list pos:start="96:23" pos:end="96:54">(<argument pos:start="96:24" pos:end="96:33"><expr pos:start="96:24" pos:end="96:33"><name pos:start="96:24" pos:end="96:33"><name pos:start="96:24" pos:end="96:28">spapr</name><operator pos:start="96:29" pos:end="96:30">-&gt;</operator><name pos:start="96:31" pos:end="96:33">ov5</name></name></expr></argument>, <argument pos:start="96:36" pos:end="96:53"><expr pos:start="96:36" pos:end="96:53"><name pos:start="96:36" pos:end="96:53">OV5_MMU_RADIX_GTSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="98:5" pos:end="98:44">/* ... but not with hash (currently). */</comment>
    <comment type="block" pos:start="99:5" pos:end="99:67">/* advertise support for dedicated HP event source to guests */</comment>
    <if_stmt pos:start="100:5" pos:end="102:5"><if pos:start="100:5" pos:end="102:5">if <condition pos:start="100:8" pos:end="100:40">(<expr pos:start="100:9" pos:end="100:39"><name pos:start="100:9" pos:end="100:39"><name pos:start="100:9" pos:end="100:13">spapr</name><operator pos:start="100:14" pos:end="100:15">-&gt;</operator><name pos:start="100:16" pos:end="100:39">use_hotplug_event_source</name></name></expr>)</condition> <block pos:start="100:42" pos:end="102:5">{<block_content pos:start="101:9" pos:end="101:47">
        <expr_stmt pos:start="101:9" pos:end="101:47"><expr pos:start="101:9" pos:end="101:46"><call pos:start="101:9" pos:end="101:46"><name pos:start="101:9" pos:end="101:22">spapr_ovec_set</name><argument_list pos:start="101:23" pos:end="101:46">(<argument pos:start="101:24" pos:end="101:33"><expr pos:start="101:24" pos:end="101:33"><name pos:start="101:24" pos:end="101:33"><name pos:start="101:24" pos:end="101:28">spapr</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:33">ov5</name></name></expr></argument>, <argument pos:start="101:36" pos:end="101:45"><expr pos:start="101:36" pos:end="101:45"><name pos:start="101:36" pos:end="101:45">OV5_HP_EVT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="103:5" pos:end="103:44">/* advertise support for HPT resizing */</comment>
    <if_stmt pos:start="104:5" pos:end="106:5"><if pos:start="104:5" pos:end="106:5">if <condition pos:start="104:8" pos:end="104:55">(<expr pos:start="104:9" pos:end="104:54"><name pos:start="104:9" pos:end="104:25"><name pos:start="104:9" pos:end="104:13">spapr</name><operator pos:start="104:14" pos:end="104:15">-&gt;</operator><name pos:start="104:16" pos:end="104:25">resize_hpt</name></name> <operator pos:start="104:27" pos:end="104:28">!=</operator> <name pos:start="104:30" pos:end="104:54">SPAPR_RESIZE_HPT_DISABLED</name></expr>)</condition> <block pos:start="104:57" pos:end="106:5">{<block_content pos:start="105:9" pos:end="105:51">
        <expr_stmt pos:start="105:9" pos:end="105:51"><expr pos:start="105:9" pos:end="105:50"><call pos:start="105:9" pos:end="105:50"><name pos:start="105:9" pos:end="105:22">spapr_ovec_set</name><argument_list pos:start="105:23" pos:end="105:50">(<argument pos:start="105:24" pos:end="105:33"><expr pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:28">spapr</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:33">ov5</name></name></expr></argument>, <argument pos:start="105:36" pos:end="105:49"><expr pos:start="105:36" pos:end="105:49"><name pos:start="105:36" pos:end="105:49">OV5_HPT_RESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="107:5" pos:end="107:19">/* init CPUs */</comment>
    <expr_stmt pos:start="108:5" pos:end="108:45"><expr pos:start="108:5" pos:end="108:44"><call pos:start="108:5" pos:end="108:44"><name pos:start="108:5" pos:end="108:23">spapr_set_vsmt_mode</name><argument_list pos:start="108:24" pos:end="108:44">(<argument pos:start="108:25" pos:end="108:29"><expr pos:start="108:25" pos:end="108:29"><name pos:start="108:25" pos:end="108:29">spapr</name></expr></argument>, <argument pos:start="108:32" pos:end="108:43"><expr pos:start="108:32" pos:end="108:43"><operator pos:start="108:32" pos:end="108:32">&amp;</operator><name pos:start="108:33" pos:end="108:43">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="109:5" pos:end="109:27"><expr pos:start="109:5" pos:end="109:26"><call pos:start="109:5" pos:end="109:26"><name pos:start="109:5" pos:end="109:19">spapr_init_cpus</name><argument_list pos:start="109:20" pos:end="109:26">(<argument pos:start="109:21" pos:end="109:25"><expr pos:start="109:21" pos:end="109:25"><name pos:start="109:21" pos:end="109:25">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="110:5" pos:end="116:5"><if pos:start="110:5" pos:end="116:5">if <condition pos:start="110:8" pos:end="110:22">(<expr pos:start="110:9" pos:end="110:21"><call pos:start="110:9" pos:end="110:21"><name pos:start="110:9" pos:end="110:19">kvm_enabled</name><argument_list pos:start="110:20" pos:end="110:21">()</argument_list></call></expr>)</condition> <block pos:start="110:24" pos:end="116:5">{<block_content pos:start="112:9" pos:end="115:45">
        <comment type="block" pos:start="111:9" pos:end="111:73">/* Enable H_LOGICAL_CI_* so SLOF can talk to in-kernel devices */</comment>
        <expr_stmt pos:start="112:9" pos:end="112:42"><expr pos:start="112:9" pos:end="112:41"><call pos:start="112:9" pos:end="112:41"><name pos:start="112:9" pos:end="112:39">kvmppc_enable_logical_ci_hcalls</name><argument_list pos:start="112:40" pos:end="112:41">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="113:9" pos:end="113:39"><expr pos:start="113:9" pos:end="113:38"><call pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:36">kvmppc_enable_set_mode_hcall</name><argument_list pos:start="113:37" pos:end="113:38">()</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="114:9" pos:end="114:72">/* H_CLEAR_MOD/_REF are mandatory in PAPR, but off by default */</comment>
        <expr_stmt pos:start="115:9" pos:end="115:45"><expr pos:start="115:9" pos:end="115:44"><call pos:start="115:9" pos:end="115:44"><name pos:start="115:9" pos:end="115:42">kvmppc_enable_clear_ref_mod_hcalls</name><argument_list pos:start="115:43" pos:end="115:44">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="117:5" pos:end="117:22">/* allocate RAM */</comment>
    <expr_stmt pos:start="118:5" pos:end="119:60"><expr pos:start="118:5" pos:end="119:59"><call pos:start="118:5" pos:end="119:59"><name pos:start="118:5" pos:end="118:40">memory_region_allocate_system_memory</name><argument_list pos:start="118:41" pos:end="119:59">(<argument pos:start="118:42" pos:end="118:44"><expr pos:start="118:42" pos:end="118:44"><name pos:start="118:42" pos:end="118:44">ram</name></expr></argument>, <argument pos:start="118:47" pos:end="118:50"><expr pos:start="118:47" pos:end="118:50"><name pos:start="118:47" pos:end="118:50">NULL</name></expr></argument>, <argument pos:start="118:53" pos:end="118:67"><expr pos:start="118:53" pos:end="118:67"><literal type="string" pos:start="118:53" pos:end="118:67">"ppc_spapr.ram"</literal></expr></argument>,
                                         <argument pos:start="119:42" pos:end="119:58"><expr pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:48">machine</name><operator pos:start="119:49" pos:end="119:50">-&gt;</operator><name pos:start="119:51" pos:end="119:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="120:5" pos:end="120:48"><expr pos:start="120:5" pos:end="120:47"><call pos:start="120:5" pos:end="120:47"><name pos:start="120:5" pos:end="120:31">memory_region_add_subregion</name><argument_list pos:start="120:32" pos:end="120:47">(<argument pos:start="120:33" pos:end="120:38"><expr pos:start="120:33" pos:end="120:38"><name pos:start="120:33" pos:end="120:38">sysmem</name></expr></argument>, <argument pos:start="120:41" pos:end="120:41"><expr pos:start="120:41" pos:end="120:41"><literal type="number" pos:start="120:41" pos:end="120:41">0</literal></expr></argument>, <argument pos:start="120:44" pos:end="120:46"><expr pos:start="120:44" pos:end="120:46"><name pos:start="120:44" pos:end="120:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="121:5" pos:end="127:5"><if pos:start="121:5" pos:end="127:5">if <condition pos:start="121:8" pos:end="121:30">(<expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:22">rma_alloc_size</name> <operator pos:start="121:24" pos:end="121:25">&amp;&amp;</operator> <name pos:start="121:27" pos:end="121:29">rma</name></expr>)</condition> <block pos:start="121:32" pos:end="127:5">{<block_content pos:start="122:9" pos:end="126:59">
        <expr_stmt pos:start="122:9" pos:end="122:44"><expr pos:start="122:9" pos:end="122:43"><name pos:start="122:9" pos:end="122:18">rma_region</name> <operator pos:start="122:20" pos:end="122:20">=</operator> <call pos:start="122:22" pos:end="122:43"><name pos:start="122:22" pos:end="122:26">g_new</name><argument_list pos:start="122:27" pos:end="122:43">(<argument pos:start="122:28" pos:end="122:39"><expr pos:start="122:28" pos:end="122:39"><name pos:start="122:28" pos:end="122:39">MemoryRegion</name></expr></argument>, <argument pos:start="122:42" pos:end="122:42"><expr pos:start="122:42" pos:end="122:42"><literal type="number" pos:start="122:42" pos:end="122:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="123:9" pos:end="124:56"><expr pos:start="123:9" pos:end="124:55"><call pos:start="123:9" pos:end="124:55"><name pos:start="123:9" pos:end="123:34">memory_region_init_ram_ptr</name><argument_list pos:start="123:35" pos:end="124:55">(<argument pos:start="123:36" pos:end="123:45"><expr pos:start="123:36" pos:end="123:45"><name pos:start="123:36" pos:end="123:45">rma_region</name></expr></argument>, <argument pos:start="123:48" pos:end="123:51"><expr pos:start="123:48" pos:end="123:51"><name pos:start="123:48" pos:end="123:51">NULL</name></expr></argument>, <argument pos:start="123:54" pos:end="123:68"><expr pos:start="123:54" pos:end="123:68"><literal type="string" pos:start="123:54" pos:end="123:68">"ppc_spapr.rma"</literal></expr></argument>,
                                   <argument pos:start="124:36" pos:end="124:49"><expr pos:start="124:36" pos:end="124:49"><name pos:start="124:36" pos:end="124:49">rma_alloc_size</name></expr></argument>, <argument pos:start="124:52" pos:end="124:54"><expr pos:start="124:52" pos:end="124:54"><name pos:start="124:52" pos:end="124:54">rma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="125:9" pos:end="125:48"><expr pos:start="125:9" pos:end="125:47"><call pos:start="125:9" pos:end="125:47"><name pos:start="125:9" pos:end="125:35">vmstate_register_ram_global</name><argument_list pos:start="125:36" pos:end="125:47">(<argument pos:start="125:37" pos:end="125:46"><expr pos:start="125:37" pos:end="125:46"><name pos:start="125:37" pos:end="125:46">rma_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="126:9" pos:end="126:59"><expr pos:start="126:9" pos:end="126:58"><call pos:start="126:9" pos:end="126:58"><name pos:start="126:9" pos:end="126:35">memory_region_add_subregion</name><argument_list pos:start="126:36" pos:end="126:58">(<argument pos:start="126:37" pos:end="126:42"><expr pos:start="126:37" pos:end="126:42"><name pos:start="126:37" pos:end="126:42">sysmem</name></expr></argument>, <argument pos:start="126:45" pos:end="126:45"><expr pos:start="126:45" pos:end="126:45"><literal type="number" pos:start="126:45" pos:end="126:45">0</literal></expr></argument>, <argument pos:start="126:48" pos:end="126:57"><expr pos:start="126:48" pos:end="126:57"><name pos:start="126:48" pos:end="126:57">rma_region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="128:5" pos:end="128:49">/* initialize hotplug memory address space */</comment>
    <if_stmt pos:start="129:5" pos:end="153:5"><if pos:start="129:5" pos:end="153:5">if <condition pos:start="129:8" pos:end="129:49">(<expr pos:start="129:9" pos:end="129:48"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:15">machine</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:25">ram_size</name></name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <name pos:start="129:29" pos:end="129:48"><name pos:start="129:29" pos:end="129:35">machine</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:48">maxram_size</name></name></expr>)</condition> <block pos:start="129:51" pos:end="153:5">{<block_content pos:start="130:9" pos:end="152:63">
        <decl_stmt pos:start="130:9" pos:end="130:79"><decl pos:start="130:9" pos:end="130:78"><type pos:start="130:9" pos:end="130:18"><name pos:start="130:9" pos:end="130:18">ram_addr_t</name></type> <name pos:start="130:20" pos:end="130:35">hotplug_mem_size</name> <init pos:start="130:37" pos:end="130:78">= <expr pos:start="130:39" pos:end="130:78"><name pos:start="130:39" pos:end="130:58"><name pos:start="130:39" pos:end="130:45">machine</name><operator pos:start="130:46" pos:end="130:47">-&gt;</operator><name pos:start="130:48" pos:end="130:58">maxram_size</name></name> <operator pos:start="130:60" pos:end="130:60">-</operator> <name pos:start="130:62" pos:end="130:78"><name pos:start="130:62" pos:end="130:68">machine</name><operator pos:start="130:69" pos:end="130:70">-&gt;</operator><name pos:start="130:71" pos:end="130:78">ram_size</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="131:9" pos:end="135:11">/*
         * Limit the number of hotpluggable memory slots to half the number
         * slots that KVM supports, leaving the other half for PCI and other
         * devices. However ensure that number of slots doesn't drop below 32.
         */</comment>
        <decl_stmt pos:start="136:9" pos:end="137:47"><decl pos:start="136:9" pos:end="137:46"><type pos:start="136:9" pos:end="136:11"><name pos:start="136:9" pos:end="136:11">int</name></type> <name pos:start="136:13" pos:end="136:24">max_memslots</name> <init pos:start="136:26" pos:end="137:46">= <expr pos:start="136:28" pos:end="137:46"><ternary pos:start="136:28" pos:end="137:46"><condition pos:start="136:28" pos:end="136:42"><expr pos:start="136:28" pos:end="136:40"><call pos:start="136:28" pos:end="136:40"><name pos:start="136:28" pos:end="136:38">kvm_enabled</name><argument_list pos:start="136:39" pos:end="136:40">()</argument_list></call></expr> ?</condition><then pos:start="136:44" pos:end="136:69"> <expr pos:start="136:44" pos:end="136:69"><call pos:start="136:44" pos:end="136:65"><name pos:start="136:44" pos:end="136:63">kvm_get_max_memslots</name><argument_list pos:start="136:64" pos:end="136:65">()</argument_list></call> <operator pos:start="136:67" pos:end="136:67">/</operator> <literal type="number" pos:start="136:69" pos:end="136:69">2</literal></expr> </then><else pos:start="136:71" pos:end="137:46">:
                           <expr pos:start="137:28" pos:end="137:46"><name pos:start="137:28" pos:end="137:46">SPAPR_MAX_RAM_SLOTS</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="138:9" pos:end="140:9"><if pos:start="138:9" pos:end="140:9">if <condition pos:start="138:12" pos:end="138:47">(<expr pos:start="138:13" pos:end="138:46"><name pos:start="138:13" pos:end="138:24">max_memslots</name> <operator pos:start="138:26" pos:end="138:26">&lt;</operator> <name pos:start="138:28" pos:end="138:46">SPAPR_MAX_RAM_SLOTS</name></expr>)</condition> <block pos:start="138:49" pos:end="140:9">{<block_content pos:start="139:13" pos:end="139:47">
            <expr_stmt pos:start="139:13" pos:end="139:47"><expr pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:24">max_memslots</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <name pos:start="139:28" pos:end="139:46">SPAPR_MAX_RAM_SLOTS</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="141:9" pos:end="146:9"><if pos:start="141:9" pos:end="146:9">if <condition pos:start="141:12" pos:end="141:46">(<expr pos:start="141:13" pos:end="141:45"><name pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:19">machine</name><operator pos:start="141:20" pos:end="141:21">-&gt;</operator><name pos:start="141:22" pos:end="141:30">ram_slots</name></name> <operator pos:start="141:32" pos:end="141:32">&gt;</operator> <name pos:start="141:34" pos:end="141:45">max_memslots</name></expr>)</condition> <block pos:start="141:48" pos:end="146:9">{<block_content pos:start="142:13" pos:end="145:20">
            <expr_stmt pos:start="142:13" pos:end="144:59"><expr pos:start="142:13" pos:end="144:58"><call pos:start="142:13" pos:end="144:58"><name pos:start="142:13" pos:end="142:24">error_report</name><argument_list pos:start="142:25" pos:end="144:58">(<argument pos:start="142:26" pos:end="143:58"><expr pos:start="142:26" pos:end="143:58"><literal type="string" pos:start="142:26" pos:end="142:61">"Specified number of memory slots %"</literal>
                         <name pos:start="143:26" pos:end="143:31">PRIu64</name><literal type="string" pos:start="143:32" pos:end="143:58">" exceeds max supported %d"</literal></expr></argument>,
                         <argument pos:start="144:26" pos:end="144:43"><expr pos:start="144:26" pos:end="144:43"><name pos:start="144:26" pos:end="144:43"><name pos:start="144:26" pos:end="144:32">machine</name><operator pos:start="144:33" pos:end="144:34">-&gt;</operator><name pos:start="144:35" pos:end="144:43">ram_slots</name></name></expr></argument>, <argument pos:start="144:46" pos:end="144:57"><expr pos:start="144:46" pos:end="144:57"><name pos:start="144:46" pos:end="144:57">max_memslots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><call pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">exit</name><argument_list pos:start="145:17" pos:end="145:19">(<argument pos:start="145:18" pos:end="145:18"><expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="147:9" pos:end="148:71"><expr pos:start="147:9" pos:end="148:70"><name pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:13">spapr</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:29">hotplug_memory</name><operator pos:start="147:30" pos:end="147:30">.</operator><name pos:start="147:31" pos:end="147:34">base</name></name> <operator pos:start="147:36" pos:end="147:36">=</operator> <call pos:start="147:38" pos:end="148:70"><name pos:start="147:38" pos:end="147:45">ROUND_UP</name><argument_list pos:start="147:46" pos:end="148:70">(<argument pos:start="147:47" pos:end="147:63"><expr pos:start="147:47" pos:end="147:63"><name pos:start="147:47" pos:end="147:63"><name pos:start="147:47" pos:end="147:53">machine</name><operator pos:start="147:54" pos:end="147:55">-&gt;</operator><name pos:start="147:56" pos:end="147:63">ram_size</name></name></expr></argument>,
                                              <argument pos:start="148:47" pos:end="148:69"><expr pos:start="148:47" pos:end="148:69"><name pos:start="148:47" pos:end="148:69">SPAPR_HOTPLUG_MEM_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="149:9" pos:end="150:63"><expr pos:start="149:9" pos:end="150:62"><call pos:start="149:9" pos:end="150:62"><name pos:start="149:9" pos:end="149:26">memory_region_init</name><argument_list pos:start="149:27" pos:end="150:62">(<argument pos:start="149:28" pos:end="149:52"><expr pos:start="149:28" pos:end="149:52"><operator pos:start="149:28" pos:end="149:28">&amp;</operator><name pos:start="149:29" pos:end="149:52"><name pos:start="149:29" pos:end="149:33">spapr</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:49">hotplug_memory</name><operator pos:start="149:50" pos:end="149:50">.</operator><name pos:start="149:51" pos:end="149:52">mr</name></name></expr></argument>, <argument pos:start="149:55" pos:end="149:67"><expr pos:start="149:55" pos:end="149:67"><call pos:start="149:55" pos:end="149:67"><name pos:start="149:55" pos:end="149:60">OBJECT</name><argument_list pos:start="149:61" pos:end="149:67">(<argument pos:start="149:62" pos:end="149:66"><expr pos:start="149:62" pos:end="149:66"><name pos:start="149:62" pos:end="149:66">spapr</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument pos:start="150:28" pos:end="150:43"><expr pos:start="150:28" pos:end="150:43"><literal type="string" pos:start="150:28" pos:end="150:43">"hotplug-memory"</literal></expr></argument>, <argument pos:start="150:46" pos:end="150:61"><expr pos:start="150:46" pos:end="150:61"><name pos:start="150:46" pos:end="150:61">hotplug_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="151:9" pos:end="152:63"><expr pos:start="151:9" pos:end="152:62"><call pos:start="151:9" pos:end="152:62"><name pos:start="151:9" pos:end="151:35">memory_region_add_subregion</name><argument_list pos:start="151:36" pos:end="152:62">(<argument pos:start="151:37" pos:end="151:42"><expr pos:start="151:37" pos:end="151:42"><name pos:start="151:37" pos:end="151:42">sysmem</name></expr></argument>, <argument pos:start="151:45" pos:end="151:70"><expr pos:start="151:45" pos:end="151:70"><name pos:start="151:45" pos:end="151:70"><name pos:start="151:45" pos:end="151:49">spapr</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:65">hotplug_memory</name><operator pos:start="151:66" pos:end="151:66">.</operator><name pos:start="151:67" pos:end="151:70">base</name></name></expr></argument>,
                                    <argument pos:start="152:37" pos:end="152:61"><expr pos:start="152:37" pos:end="152:61"><operator pos:start="152:37" pos:end="152:37">&amp;</operator><name pos:start="152:38" pos:end="152:61"><name pos:start="152:38" pos:end="152:42">spapr</name><operator pos:start="152:43" pos:end="152:44">-&gt;</operator><name pos:start="152:45" pos:end="152:58">hotplug_memory</name><operator pos:start="152:59" pos:end="152:59">.</operator><name pos:start="152:60" pos:end="152:61">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="154:5" pos:end="156:5"><if pos:start="154:5" pos:end="156:5">if <condition pos:start="154:8" pos:end="154:28">(<expr pos:start="154:9" pos:end="154:27"><name pos:start="154:9" pos:end="154:27"><name pos:start="154:9" pos:end="154:11">smc</name><operator pos:start="154:12" pos:end="154:13">-&gt;</operator><name pos:start="154:14" pos:end="154:27">dr_lmb_enabled</name></name></expr>)</condition> <block pos:start="154:30" pos:end="156:5">{<block_content pos:start="155:9" pos:end="155:46">
        <expr_stmt pos:start="155:9" pos:end="155:46"><expr pos:start="155:9" pos:end="155:45"><call pos:start="155:9" pos:end="155:45"><name pos:start="155:9" pos:end="155:38">spapr_create_lmb_dr_connectors</name><argument_list pos:start="155:39" pos:end="155:45">(<argument pos:start="155:40" pos:end="155:44"><expr pos:start="155:40" pos:end="155:44"><name pos:start="155:40" pos:end="155:44">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="157:5" pos:end="157:69"><expr pos:start="157:5" pos:end="157:68"><name pos:start="157:5" pos:end="157:12">filename</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <call pos:start="157:16" pos:end="157:68"><name pos:start="157:16" pos:end="157:29">qemu_find_file</name><argument_list pos:start="157:30" pos:end="157:68">(<argument pos:start="157:31" pos:end="157:49"><expr pos:start="157:31" pos:end="157:49"><name pos:start="157:31" pos:end="157:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="157:52" pos:end="157:67"><expr pos:start="157:52" pos:end="157:67"><literal type="string" pos:start="157:52" pos:end="157:67">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="158:5" pos:end="161:5"><if pos:start="158:5" pos:end="161:5">if <condition pos:start="158:8" pos:end="158:18">(<expr pos:start="158:9" pos:end="158:17"><operator pos:start="158:9" pos:end="158:9">!</operator><name pos:start="158:10" pos:end="158:17">filename</name></expr>)</condition> <block pos:start="158:20" pos:end="161:5">{<block_content pos:start="159:9" pos:end="160:16">
        <expr_stmt pos:start="159:9" pos:end="159:72"><expr pos:start="159:9" pos:end="159:71"><call pos:start="159:9" pos:end="159:71"><name pos:start="159:9" pos:end="159:20">error_report</name><argument_list pos:start="159:21" pos:end="159:71">(<argument pos:start="159:22" pos:end="159:52"><expr pos:start="159:22" pos:end="159:52"><literal type="string" pos:start="159:22" pos:end="159:52">"Could not find LPAR rtas '%s'"</literal></expr></argument>, <argument pos:start="159:55" pos:end="159:70"><expr pos:start="159:55" pos:end="159:70"><literal type="string" pos:start="159:55" pos:end="159:70">"spapr-rtas.bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="160:9" pos:end="160:16"><expr pos:start="160:9" pos:end="160:15"><call pos:start="160:9" pos:end="160:15"><name pos:start="160:9" pos:end="160:12">exit</name><argument_list pos:start="160:13" pos:end="160:15">(<argument pos:start="160:14" pos:end="160:14"><expr pos:start="160:14" pos:end="160:14"><literal type="number" pos:start="160:14" pos:end="160:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="162:5" pos:end="162:48"><expr pos:start="162:5" pos:end="162:47"><name pos:start="162:5" pos:end="162:20"><name pos:start="162:5" pos:end="162:9">spapr</name><operator pos:start="162:10" pos:end="162:11">-&gt;</operator><name pos:start="162:12" pos:end="162:20">rtas_size</name></name> <operator pos:start="162:22" pos:end="162:22">=</operator> <call pos:start="162:24" pos:end="162:47"><name pos:start="162:24" pos:end="162:37">get_image_size</name><argument_list pos:start="162:38" pos:end="162:47">(<argument pos:start="162:39" pos:end="162:46"><expr pos:start="162:39" pos:end="162:46"><name pos:start="162:39" pos:end="162:46">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="163:5" pos:end="166:5"><if pos:start="163:5" pos:end="166:5">if <condition pos:start="163:8" pos:end="163:29">(<expr pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:24"><name pos:start="163:9" pos:end="163:13">spapr</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:24">rtas_size</name></name> <operator pos:start="163:26" pos:end="163:26">&lt;</operator> <literal type="number" pos:start="163:28" pos:end="163:28">0</literal></expr>)</condition> <block pos:start="163:31" pos:end="166:5">{<block_content pos:start="164:9" pos:end="165:16">
        <expr_stmt pos:start="164:9" pos:end="164:71"><expr pos:start="164:9" pos:end="164:70"><call pos:start="164:9" pos:end="164:70"><name pos:start="164:9" pos:end="164:20">error_report</name><argument_list pos:start="164:21" pos:end="164:70">(<argument pos:start="164:22" pos:end="164:59"><expr pos:start="164:22" pos:end="164:59"><literal type="string" pos:start="164:22" pos:end="164:59">"Could not get size of LPAR rtas '%s'"</literal></expr></argument>, <argument pos:start="164:62" pos:end="164:69"><expr pos:start="164:62" pos:end="164:69"><name pos:start="164:62" pos:end="164:69">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="165:9" pos:end="165:16"><expr pos:start="165:9" pos:end="165:15"><call pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:12">exit</name><argument_list pos:start="165:13" pos:end="165:15">(<argument pos:start="165:14" pos:end="165:14"><expr pos:start="165:14" pos:end="165:14"><literal type="number" pos:start="165:14" pos:end="165:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="167:5" pos:end="167:50"><expr pos:start="167:5" pos:end="167:49"><name pos:start="167:5" pos:end="167:20"><name pos:start="167:5" pos:end="167:9">spapr</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:20">rtas_blob</name></name> <operator pos:start="167:22" pos:end="167:22">=</operator> <call pos:start="167:24" pos:end="167:49"><name pos:start="167:24" pos:end="167:31">g_malloc</name><argument_list pos:start="167:32" pos:end="167:49">(<argument pos:start="167:33" pos:end="167:48"><expr pos:start="167:33" pos:end="167:48"><name pos:start="167:33" pos:end="167:48"><name pos:start="167:33" pos:end="167:37">spapr</name><operator pos:start="167:38" pos:end="167:39">-&gt;</operator><name pos:start="167:40" pos:end="167:48">rtas_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="168:5" pos:end="171:5"><if pos:start="168:5" pos:end="171:5">if <condition pos:start="168:8" pos:end="168:74">(<expr pos:start="168:9" pos:end="168:73"><call pos:start="168:9" pos:end="168:69"><name pos:start="168:9" pos:end="168:23">load_image_size</name><argument_list pos:start="168:24" pos:end="168:69">(<argument pos:start="168:25" pos:end="168:32"><expr pos:start="168:25" pos:end="168:32"><name pos:start="168:25" pos:end="168:32">filename</name></expr></argument>, <argument pos:start="168:35" pos:end="168:50"><expr pos:start="168:35" pos:end="168:50"><name pos:start="168:35" pos:end="168:50"><name pos:start="168:35" pos:end="168:39">spapr</name><operator pos:start="168:40" pos:end="168:41">-&gt;</operator><name pos:start="168:42" pos:end="168:50">rtas_blob</name></name></expr></argument>, <argument pos:start="168:53" pos:end="168:68"><expr pos:start="168:53" pos:end="168:68"><name pos:start="168:53" pos:end="168:68"><name pos:start="168:53" pos:end="168:57">spapr</name><operator pos:start="168:58" pos:end="168:59">-&gt;</operator><name pos:start="168:60" pos:end="168:68">rtas_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="168:71" pos:end="168:71">&lt;</operator> <literal type="number" pos:start="168:73" pos:end="168:73">0</literal></expr>)</condition> <block pos:start="168:76" pos:end="171:5">{<block_content pos:start="169:9" pos:end="170:16">
        <expr_stmt pos:start="169:9" pos:end="169:64"><expr pos:start="169:9" pos:end="169:63"><call pos:start="169:9" pos:end="169:63"><name pos:start="169:9" pos:end="169:20">error_report</name><argument_list pos:start="169:21" pos:end="169:63">(<argument pos:start="169:22" pos:end="169:52"><expr pos:start="169:22" pos:end="169:52"><literal type="string" pos:start="169:22" pos:end="169:52">"Could not load LPAR rtas '%s'"</literal></expr></argument>, <argument pos:start="169:55" pos:end="169:62"><expr pos:start="169:55" pos:end="169:62"><name pos:start="169:55" pos:end="169:62">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="170:9" pos:end="170:16"><expr pos:start="170:9" pos:end="170:15"><call pos:start="170:9" pos:end="170:15"><name pos:start="170:9" pos:end="170:12">exit</name><argument_list pos:start="170:13" pos:end="170:15">(<argument pos:start="170:14" pos:end="170:14"><expr pos:start="170:14" pos:end="170:14"><literal type="number" pos:start="170:14" pos:end="170:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="172:5" pos:end="176:5"><if pos:start="172:5" pos:end="176:5">if <condition pos:start="172:8" pos:end="172:41">(<expr pos:start="172:9" pos:end="172:40"><name pos:start="172:9" pos:end="172:24"><name pos:start="172:9" pos:end="172:13">spapr</name><operator pos:start="172:14" pos:end="172:15">-&gt;</operator><name pos:start="172:16" pos:end="172:24">rtas_size</name></name> <operator pos:start="172:26" pos:end="172:26">&gt;</operator> <name pos:start="172:28" pos:end="172:40">RTAS_MAX_SIZE</name></expr>)</condition> <block pos:start="172:43" pos:end="176:5">{<block_content pos:start="173:9" pos:end="175:16">
        <expr_stmt pos:start="173:9" pos:end="174:62"><expr pos:start="173:9" pos:end="174:61"><call pos:start="173:9" pos:end="174:61"><name pos:start="173:9" pos:end="173:20">error_report</name><argument_list pos:start="173:21" pos:end="174:61">(<argument pos:start="173:22" pos:end="173:63"><expr pos:start="173:22" pos:end="173:63"><literal type="string" pos:start="173:22" pos:end="173:63">"RTAS too big ! 0x%zx bytes (max is 0x%x)"</literal></expr></argument>,
                     <argument pos:start="174:22" pos:end="174:45"><expr pos:start="174:22" pos:end="174:45"><operator pos:start="174:22" pos:end="174:22">(</operator><name pos:start="174:23" pos:end="174:28">size_t</name><operator pos:start="174:29" pos:end="174:29">)</operator><name pos:start="174:30" pos:end="174:45"><name pos:start="174:30" pos:end="174:34">spapr</name><operator pos:start="174:35" pos:end="174:36">-&gt;</operator><name pos:start="174:37" pos:end="174:45">rtas_size</name></name></expr></argument>, <argument pos:start="174:48" pos:end="174:60"><expr pos:start="174:48" pos:end="174:60"><name pos:start="174:48" pos:end="174:60">RTAS_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="175:9" pos:end="175:16"><expr pos:start="175:9" pos:end="175:15"><call pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:12">exit</name><argument_list pos:start="175:13" pos:end="175:15">(<argument pos:start="175:14" pos:end="175:14"><expr pos:start="175:14" pos:end="175:14"><literal type="number" pos:start="175:14" pos:end="175:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="177:5" pos:end="177:21"><expr pos:start="177:5" pos:end="177:20"><call pos:start="177:5" pos:end="177:20"><name pos:start="177:5" pos:end="177:10">g_free</name><argument_list pos:start="177:11" pos:end="177:20">(<argument pos:start="177:12" pos:end="177:19"><expr pos:start="177:12" pos:end="177:19"><name pos:start="177:12" pos:end="177:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="178:5" pos:end="178:42">/* Set up RTAS event infrastructure */</comment>
    <expr_stmt pos:start="179:5" pos:end="179:29"><expr pos:start="179:5" pos:end="179:28"><call pos:start="179:5" pos:end="179:28"><name pos:start="179:5" pos:end="179:21">spapr_events_init</name><argument_list pos:start="179:22" pos:end="179:28">(<argument pos:start="179:23" pos:end="179:27"><expr pos:start="179:23" pos:end="179:27"><name pos:start="179:23" pos:end="179:27">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="180:5" pos:end="180:40">/* Set up the RTC RTAS interfaces */</comment>
    <expr_stmt pos:start="181:5" pos:end="181:28"><expr pos:start="181:5" pos:end="181:27"><call pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:20">spapr_rtc_create</name><argument_list pos:start="181:21" pos:end="181:27">(<argument pos:start="181:22" pos:end="181:26"><expr pos:start="181:22" pos:end="181:26"><name pos:start="181:22" pos:end="181:26">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="182:5" pos:end="182:24">/* Set up VIO bus */</comment>
    <expr_stmt pos:start="183:5" pos:end="183:42"><expr pos:start="183:5" pos:end="183:41"><name pos:start="183:5" pos:end="183:18"><name pos:start="183:5" pos:end="183:9">spapr</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:18">vio_bus</name></name> <operator pos:start="183:20" pos:end="183:20">=</operator> <call pos:start="183:22" pos:end="183:41"><name pos:start="183:22" pos:end="183:39">spapr_vio_bus_init</name><argument_list pos:start="183:40" pos:end="183:41">()</argument_list></call></expr>;</expr_stmt>
    <for pos:start="184:5" pos:end="188:5">for <control pos:start="184:9" pos:end="184:42">(<init pos:start="184:10" pos:end="184:15"><expr pos:start="184:10" pos:end="184:14"><name pos:start="184:10" pos:end="184:10">i</name> <operator pos:start="184:12" pos:end="184:12">=</operator> <literal type="number" pos:start="184:14" pos:end="184:14">0</literal></expr>;</init> <condition pos:start="184:17" pos:end="184:37"><expr pos:start="184:17" pos:end="184:36"><name pos:start="184:17" pos:end="184:17">i</name> <operator pos:start="184:19" pos:end="184:19">&lt;</operator> <name pos:start="184:21" pos:end="184:36">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="184:39" pos:end="184:41"><expr pos:start="184:39" pos:end="184:41"><name pos:start="184:39" pos:end="184:39">i</name><operator pos:start="184:40" pos:end="184:41">++</operator></expr></incr>)</control> <block pos:start="184:44" pos:end="188:5">{<block_content pos:start="185:9" pos:end="187:9">
        <if_stmt pos:start="185:9" pos:end="187:9"><if pos:start="185:9" pos:end="187:9">if <condition pos:start="185:12" pos:end="185:26">(<expr pos:start="185:13" pos:end="185:25"><name pos:start="185:13" pos:end="185:25"><name pos:start="185:13" pos:end="185:22">serial_hds</name><index pos:start="185:23" pos:end="185:25">[<expr pos:start="185:24" pos:end="185:24"><name pos:start="185:24" pos:end="185:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="185:28" pos:end="187:9">{<block_content pos:start="186:13" pos:end="186:60">
            <expr_stmt pos:start="186:13" pos:end="186:60"><expr pos:start="186:13" pos:end="186:59"><call pos:start="186:13" pos:end="186:59"><name pos:start="186:13" pos:end="186:28">spapr_vty_create</name><argument_list pos:start="186:29" pos:end="186:59">(<argument pos:start="186:30" pos:end="186:43"><expr pos:start="186:30" pos:end="186:43"><name pos:start="186:30" pos:end="186:43"><name pos:start="186:30" pos:end="186:34">spapr</name><operator pos:start="186:35" pos:end="186:36">-&gt;</operator><name pos:start="186:37" pos:end="186:43">vio_bus</name></name></expr></argument>, <argument pos:start="186:46" pos:end="186:58"><expr pos:start="186:46" pos:end="186:58"><name pos:start="186:46" pos:end="186:58"><name pos:start="186:46" pos:end="186:55">serial_hds</name><index pos:start="186:56" pos:end="186:58">[<expr pos:start="186:57" pos:end="186:57"><name pos:start="186:57" pos:end="186:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="189:5" pos:end="189:57">/* We always have at least the nvram device on VIO */</comment>
    <expr_stmt pos:start="190:5" pos:end="190:30"><expr pos:start="190:5" pos:end="190:29"><call pos:start="190:5" pos:end="190:29"><name pos:start="190:5" pos:end="190:22">spapr_create_nvram</name><argument_list pos:start="190:23" pos:end="190:29">(<argument pos:start="190:24" pos:end="190:28"><expr pos:start="190:24" pos:end="190:28"><name pos:start="190:24" pos:end="190:28">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="191:5" pos:end="191:20">/* Set up PCI */</comment>
    <expr_stmt pos:start="192:5" pos:end="192:26"><expr pos:start="192:5" pos:end="192:25"><call pos:start="192:5" pos:end="192:25"><name pos:start="192:5" pos:end="192:23">spapr_pci_rtas_init</name><argument_list pos:start="192:24" pos:end="192:25">()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="193:5" pos:end="193:37"><expr pos:start="193:5" pos:end="193:36"><name pos:start="193:5" pos:end="193:7">phb</name> <operator pos:start="193:9" pos:end="193:9">=</operator> <call pos:start="193:11" pos:end="193:36"><name pos:start="193:11" pos:end="193:26">spapr_create_phb</name><argument_list pos:start="193:27" pos:end="193:36">(<argument pos:start="193:28" pos:end="193:32"><expr pos:start="193:28" pos:end="193:32"><name pos:start="193:28" pos:end="193:32">spapr</name></expr></argument>, <argument pos:start="193:35" pos:end="193:35"><expr pos:start="193:35" pos:end="193:35"><literal type="number" pos:start="193:35" pos:end="193:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for pos:start="194:5" pos:end="204:5">for <control pos:start="194:9" pos:end="194:33">(<init pos:start="194:10" pos:end="194:15"><expr pos:start="194:10" pos:end="194:14"><name pos:start="194:10" pos:end="194:10">i</name> <operator pos:start="194:12" pos:end="194:12">=</operator> <literal type="number" pos:start="194:14" pos:end="194:14">0</literal></expr>;</init> <condition pos:start="194:17" pos:end="194:28"><expr pos:start="194:17" pos:end="194:27"><name pos:start="194:17" pos:end="194:17">i</name> <operator pos:start="194:19" pos:end="194:19">&lt;</operator> <name pos:start="194:21" pos:end="194:27">nb_nics</name></expr>;</condition> <incr pos:start="194:30" pos:end="194:32"><expr pos:start="194:30" pos:end="194:32"><name pos:start="194:30" pos:end="194:30">i</name><operator pos:start="194:31" pos:end="194:32">++</operator></expr></incr>)</control> <block pos:start="194:35" pos:end="204:5">{<block_content pos:start="195:9" pos:end="203:9">
        <decl_stmt pos:start="195:9" pos:end="195:35"><decl pos:start="195:9" pos:end="195:34"><type pos:start="195:9" pos:end="195:17"><name pos:start="195:9" pos:end="195:15">NICInfo</name> <modifier pos:start="195:17" pos:end="195:17">*</modifier></type><name pos:start="195:18" pos:end="195:19">nd</name> <init pos:start="195:21" pos:end="195:34">= <expr pos:start="195:23" pos:end="195:34"><operator pos:start="195:23" pos:end="195:23">&amp;</operator><name pos:start="195:24" pos:end="195:34"><name pos:start="195:24" pos:end="195:31">nd_table</name><index pos:start="195:32" pos:end="195:34">[<expr pos:start="195:33" pos:end="195:33"><name pos:start="195:33" pos:end="195:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="196:9" pos:end="198:9"><if pos:start="196:9" pos:end="198:9">if <condition pos:start="196:12" pos:end="196:23">(<expr pos:start="196:13" pos:end="196:22"><operator pos:start="196:13" pos:end="196:13">!</operator><name pos:start="196:14" pos:end="196:22"><name pos:start="196:14" pos:end="196:15">nd</name><operator pos:start="196:16" pos:end="196:17">-&gt;</operator><name pos:start="196:18" pos:end="196:22">model</name></name></expr>)</condition> <block pos:start="196:25" pos:end="198:9">{<block_content pos:start="197:13" pos:end="197:44">
            <expr_stmt pos:start="197:13" pos:end="197:44"><expr pos:start="197:13" pos:end="197:43"><name pos:start="197:13" pos:end="197:21"><name pos:start="197:13" pos:end="197:14">nd</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:21">model</name></name> <operator pos:start="197:23" pos:end="197:23">=</operator> <call pos:start="197:25" pos:end="197:43"><name pos:start="197:25" pos:end="197:32">g_strdup</name><argument_list pos:start="197:33" pos:end="197:43">(<argument pos:start="197:34" pos:end="197:42"><expr pos:start="197:34" pos:end="197:42"><literal type="string" pos:start="197:34" pos:end="197:42">"ibmveth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="201:9">if <condition pos:start="199:12" pos:end="199:46">(<expr pos:start="199:13" pos:end="199:45"><call pos:start="199:13" pos:end="199:40"><name pos:start="199:13" pos:end="199:18">strcmp</name><argument_list pos:start="199:19" pos:end="199:40">(<argument pos:start="199:20" pos:end="199:28"><expr pos:start="199:20" pos:end="199:28"><name pos:start="199:20" pos:end="199:28"><name pos:start="199:20" pos:end="199:21">nd</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:28">model</name></name></expr></argument>, <argument pos:start="199:31" pos:end="199:39"><expr pos:start="199:31" pos:end="199:39"><literal type="string" pos:start="199:31" pos:end="199:39">"ibmveth"</literal></expr></argument>)</argument_list></call> <operator pos:start="199:42" pos:end="199:43">==</operator> <literal type="number" pos:start="199:45" pos:end="199:45">0</literal></expr>)</condition> <block pos:start="199:48" pos:end="201:9">{<block_content pos:start="200:13" pos:end="200:50">
            <expr_stmt pos:start="200:13" pos:end="200:50"><expr pos:start="200:13" pos:end="200:49"><call pos:start="200:13" pos:end="200:49"><name pos:start="200:13" pos:end="200:29">spapr_vlan_create</name><argument_list pos:start="200:30" pos:end="200:49">(<argument pos:start="200:31" pos:end="200:44"><expr pos:start="200:31" pos:end="200:44"><name pos:start="200:31" pos:end="200:44"><name pos:start="200:31" pos:end="200:35">spapr</name><operator pos:start="200:36" pos:end="200:37">-&gt;</operator><name pos:start="200:38" pos:end="200:44">vio_bus</name></name></expr></argument>, <argument pos:start="200:47" pos:end="200:48"><expr pos:start="200:47" pos:end="200:48"><name pos:start="200:47" pos:end="200:48">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="201:11" pos:end="203:9">else <block pos:start="201:16" pos:end="203:9">{<block_content pos:start="202:13" pos:end="202:73">
            <expr_stmt pos:start="202:13" pos:end="202:73"><expr pos:start="202:13" pos:end="202:72"><call pos:start="202:13" pos:end="202:72"><name pos:start="202:13" pos:end="202:31">pci_nic_init_nofail</name><argument_list pos:start="202:32" pos:end="202:72">(<argument pos:start="202:33" pos:end="202:44"><expr pos:start="202:33" pos:end="202:44"><operator pos:start="202:33" pos:end="202:33">&amp;</operator><name pos:start="202:34" pos:end="202:44"><name pos:start="202:34" pos:end="202:41">nd_table</name><index pos:start="202:42" pos:end="202:44">[<expr pos:start="202:43" pos:end="202:43"><name pos:start="202:43" pos:end="202:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="202:47" pos:end="202:54"><expr pos:start="202:47" pos:end="202:54"><name pos:start="202:47" pos:end="202:54"><name pos:start="202:47" pos:end="202:49">phb</name><operator pos:start="202:50" pos:end="202:51">-&gt;</operator><name pos:start="202:52" pos:end="202:54">bus</name></name></expr></argument>, <argument pos:start="202:57" pos:end="202:65"><expr pos:start="202:57" pos:end="202:65"><name pos:start="202:57" pos:end="202:65"><name pos:start="202:57" pos:end="202:58">nd</name><operator pos:start="202:59" pos:end="202:60">-&gt;</operator><name pos:start="202:61" pos:end="202:65">model</name></name></expr></argument>, <argument pos:start="202:68" pos:end="202:71"><expr pos:start="202:68" pos:end="202:71"><name pos:start="202:68" pos:end="202:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <for pos:start="205:5" pos:end="207:5">for <control pos:start="205:9" pos:end="205:53">(<init pos:start="205:10" pos:end="205:15"><expr pos:start="205:10" pos:end="205:14"><name pos:start="205:10" pos:end="205:10">i</name> <operator pos:start="205:12" pos:end="205:12">=</operator> <literal type="number" pos:start="205:14" pos:end="205:14">0</literal></expr>;</init> <condition pos:start="205:17" pos:end="205:48"><expr pos:start="205:17" pos:end="205:47"><name pos:start="205:17" pos:end="205:17">i</name> <operator pos:start="205:19" pos:end="205:20">&lt;=</operator> <call pos:start="205:22" pos:end="205:47"><name pos:start="205:22" pos:end="205:38">drive_get_max_bus</name><argument_list pos:start="205:39" pos:end="205:47">(<argument pos:start="205:40" pos:end="205:46"><expr pos:start="205:40" pos:end="205:46"><name pos:start="205:40" pos:end="205:46">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="205:50" pos:end="205:52"><expr pos:start="205:50" pos:end="205:52"><name pos:start="205:50" pos:end="205:50">i</name><operator pos:start="205:51" pos:end="205:52">++</operator></expr></incr>)</control> <block pos:start="205:55" pos:end="207:5">{<block_content pos:start="206:9" pos:end="206:43">
        <expr_stmt pos:start="206:9" pos:end="206:43"><expr pos:start="206:9" pos:end="206:42"><call pos:start="206:9" pos:end="206:42"><name pos:start="206:9" pos:end="206:26">spapr_vscsi_create</name><argument_list pos:start="206:27" pos:end="206:42">(<argument pos:start="206:28" pos:end="206:41"><expr pos:start="206:28" pos:end="206:41"><name pos:start="206:28" pos:end="206:41"><name pos:start="206:28" pos:end="206:32">spapr</name><operator pos:start="206:33" pos:end="206:34">-&gt;</operator><name pos:start="206:35" pos:end="206:41">vio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="208:5" pos:end="208:18">/* Graphics */</comment>
    <if_stmt pos:start="209:5" pos:end="212:5"><if pos:start="209:5" pos:end="212:5">if <condition pos:start="209:8" pos:end="209:47">(<expr pos:start="209:9" pos:end="209:46"><call pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:22">spapr_vga_init</name><argument_list pos:start="209:23" pos:end="209:46">(<argument pos:start="209:24" pos:end="209:31"><expr pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:26">phb</name><operator pos:start="209:27" pos:end="209:28">-&gt;</operator><name pos:start="209:29" pos:end="209:31">bus</name></name></expr></argument>, <argument pos:start="209:34" pos:end="209:45"><expr pos:start="209:34" pos:end="209:45"><operator pos:start="209:34" pos:end="209:34">&amp;</operator><name pos:start="209:35" pos:end="209:45">error_fatal</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:49" pos:end="212:5">{<block_content pos:start="210:9" pos:end="211:69">
        <expr_stmt pos:start="210:9" pos:end="210:35"><expr pos:start="210:9" pos:end="210:34"><name pos:start="210:9" pos:end="210:27"><name pos:start="210:9" pos:end="210:13">spapr</name><operator pos:start="210:14" pos:end="210:15">-&gt;</operator><name pos:start="210:16" pos:end="210:27">has_graphics</name></name> <operator pos:start="210:29" pos:end="210:29">=</operator> <name pos:start="210:31" pos:end="210:34">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="211:9" pos:end="211:69"><expr pos:start="211:9" pos:end="211:68"><name pos:start="211:9" pos:end="211:20"><name pos:start="211:9" pos:end="211:15">machine</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:20">usb</name></name> <operator pos:start="211:22" pos:end="211:23">|=</operator> <call pos:start="211:25" pos:end="211:42"><name pos:start="211:25" pos:end="211:40">defaults_enabled</name><argument_list pos:start="211:41" pos:end="211:42">()</argument_list></call> <operator pos:start="211:44" pos:end="211:45">&amp;&amp;</operator> <operator pos:start="211:47" pos:end="211:47">!</operator><name pos:start="211:48" pos:end="211:68"><name pos:start="211:48" pos:end="211:54">machine</name><operator pos:start="211:55" pos:end="211:56">-&gt;</operator><name pos:start="211:57" pos:end="211:68">usb_disabled</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="213:5" pos:end="224:5"><if pos:start="213:5" pos:end="224:5">if <condition pos:start="213:8" pos:end="213:21">(<expr pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:15">machine</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:20">usb</name></name></expr>)</condition> <block pos:start="213:23" pos:end="224:5">{<block_content pos:start="214:9" pos:end="223:9">
        <if_stmt pos:start="214:9" pos:end="218:9"><if pos:start="214:9" pos:end="216:9">if <condition pos:start="214:12" pos:end="214:37">(<expr pos:start="214:13" pos:end="214:36"><name pos:start="214:13" pos:end="214:36"><name pos:start="214:13" pos:end="214:15">smc</name><operator pos:start="214:16" pos:end="214:17">-&gt;</operator><name pos:start="214:18" pos:end="214:36">use_ohci_by_default</name></name></expr>)</condition> <block pos:start="214:39" pos:end="216:9">{<block_content pos:start="215:13" pos:end="215:56">
            <expr_stmt pos:start="215:13" pos:end="215:56"><expr pos:start="215:13" pos:end="215:55"><call pos:start="215:13" pos:end="215:55"><name pos:start="215:13" pos:end="215:29">pci_create_simple</name><argument_list pos:start="215:30" pos:end="215:55">(<argument pos:start="215:31" pos:end="215:38"><expr pos:start="215:31" pos:end="215:38"><name pos:start="215:31" pos:end="215:38"><name pos:start="215:31" pos:end="215:33">phb</name><operator pos:start="215:34" pos:end="215:35">-&gt;</operator><name pos:start="215:36" pos:end="215:38">bus</name></name></expr></argument>, <argument pos:start="215:41" pos:end="215:42"><expr pos:start="215:41" pos:end="215:42"><operator pos:start="215:41" pos:end="215:41">-</operator><literal type="number" pos:start="215:42" pos:end="215:42">1</literal></expr></argument>, <argument pos:start="215:45" pos:end="215:54"><expr pos:start="215:45" pos:end="215:54"><literal type="string" pos:start="215:45" pos:end="215:54">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="216:11" pos:end="218:9">else <block pos:start="216:16" pos:end="218:9">{<block_content pos:start="217:13" pos:end="217:60">
            <expr_stmt pos:start="217:13" pos:end="217:60"><expr pos:start="217:13" pos:end="217:59"><call pos:start="217:13" pos:end="217:59"><name pos:start="217:13" pos:end="217:29">pci_create_simple</name><argument_list pos:start="217:30" pos:end="217:59">(<argument pos:start="217:31" pos:end="217:38"><expr pos:start="217:31" pos:end="217:38"><name pos:start="217:31" pos:end="217:38"><name pos:start="217:31" pos:end="217:33">phb</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:38">bus</name></name></expr></argument>, <argument pos:start="217:41" pos:end="217:42"><expr pos:start="217:41" pos:end="217:42"><operator pos:start="217:41" pos:end="217:41">-</operator><literal type="number" pos:start="217:42" pos:end="217:42">1</literal></expr></argument>, <argument pos:start="217:45" pos:end="217:58"><expr pos:start="217:45" pos:end="217:58"><literal type="string" pos:start="217:45" pos:end="217:58">"nec-usb-xhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="219:9" pos:end="223:9"><if pos:start="219:9" pos:end="223:9">if <condition pos:start="219:12" pos:end="219:32">(<expr pos:start="219:13" pos:end="219:31"><name pos:start="219:13" pos:end="219:31"><name pos:start="219:13" pos:end="219:17">spapr</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:31">has_graphics</name></name></expr>)</condition> <block pos:start="219:34" pos:end="223:9">{<block_content pos:start="220:13" pos:end="222:52">
            <decl_stmt pos:start="220:13" pos:end="220:47"><decl pos:start="220:13" pos:end="220:46"><type pos:start="220:13" pos:end="220:20"><name pos:start="220:13" pos:end="220:18">USBBus</name> <modifier pos:start="220:20" pos:end="220:20">*</modifier></type><name pos:start="220:21" pos:end="220:27">usb_bus</name> <init pos:start="220:29" pos:end="220:46">= <expr pos:start="220:31" pos:end="220:46"><call pos:start="220:31" pos:end="220:46"><name pos:start="220:31" pos:end="220:42">usb_bus_find</name><argument_list pos:start="220:43" pos:end="220:46">(<argument pos:start="220:44" pos:end="220:45"><expr pos:start="220:44" pos:end="220:45"><operator pos:start="220:44" pos:end="220:44">-</operator><literal type="number" pos:start="220:45" pos:end="220:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="221:13" pos:end="221:50"><expr pos:start="221:13" pos:end="221:49"><call pos:start="221:13" pos:end="221:49"><name pos:start="221:13" pos:end="221:29">usb_create_simple</name><argument_list pos:start="221:30" pos:end="221:49">(<argument pos:start="221:31" pos:end="221:37"><expr pos:start="221:31" pos:end="221:37"><name pos:start="221:31" pos:end="221:37">usb_bus</name></expr></argument>, <argument pos:start="221:40" pos:end="221:48"><expr pos:start="221:40" pos:end="221:48"><literal type="string" pos:start="221:40" pos:end="221:48">"usb-kbd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="222:13" pos:end="222:52"><expr pos:start="222:13" pos:end="222:51"><call pos:start="222:13" pos:end="222:51"><name pos:start="222:13" pos:end="222:29">usb_create_simple</name><argument_list pos:start="222:30" pos:end="222:51">(<argument pos:start="222:31" pos:end="222:37"><expr pos:start="222:31" pos:end="222:37"><name pos:start="222:31" pos:end="222:37">usb_bus</name></expr></argument>, <argument pos:start="222:40" pos:end="222:50"><expr pos:start="222:40" pos:end="222:50"><literal type="string" pos:start="222:40" pos:end="222:50">"usb-mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="225:5" pos:end="230:5"><if pos:start="225:5" pos:end="230:5">if <condition pos:start="225:8" pos:end="225:47">(<expr pos:start="225:9" pos:end="225:46"><name pos:start="225:9" pos:end="225:23"><name pos:start="225:9" pos:end="225:13">spapr</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:23">rma_size</name></name> <operator pos:start="225:25" pos:end="225:25">&lt;</operator> <operator pos:start="225:27" pos:end="225:27">(</operator><name pos:start="225:28" pos:end="225:39">MIN_RMA_SLOF</name> <operator pos:start="225:41" pos:end="225:42">&lt;&lt;</operator> <literal type="number" pos:start="225:44" pos:end="225:45">20</literal><operator pos:start="225:46" pos:end="225:46">)</operator></expr>)</condition> <block pos:start="225:49" pos:end="230:5">{<block_content pos:start="226:9" pos:end="229:16">
        <expr_stmt pos:start="226:9" pos:end="228:26"><expr pos:start="226:9" pos:end="228:25"><call pos:start="226:9" pos:end="228:25"><name pos:start="226:9" pos:end="226:20">error_report</name><argument_list pos:start="226:21" pos:end="228:25">(
            <argument pos:start="227:13" pos:end="227:86"><expr pos:start="227:13" pos:end="227:86"><literal type="string" pos:start="227:13" pos:end="227:86">"pSeries SLOF firmware requires &gt;= %ldM guest RMA (Real Mode Area memory)"</literal></expr></argument>,
            <argument pos:start="228:13" pos:end="228:24"><expr pos:start="228:13" pos:end="228:24"><name pos:start="228:13" pos:end="228:24">MIN_RMA_SLOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="229:9" pos:end="229:16"><expr pos:start="229:9" pos:end="229:15"><call pos:start="229:9" pos:end="229:15"><name pos:start="229:9" pos:end="229:12">exit</name><argument_list pos:start="229:13" pos:end="229:15">(<argument pos:start="229:14" pos:end="229:14"><expr pos:start="229:14" pos:end="229:14"><literal type="number" pos:start="229:14" pos:end="229:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="231:5" pos:end="265:5"><if pos:start="231:5" pos:end="265:5">if <condition pos:start="231:8" pos:end="231:24">(<expr pos:start="231:9" pos:end="231:23"><name pos:start="231:9" pos:end="231:23">kernel_filename</name></expr>)</condition> <block pos:start="231:26" pos:end="265:5">{<block_content pos:start="232:9" pos:end="264:9">
        <decl_stmt pos:start="232:9" pos:end="232:29"><decl pos:start="232:9" pos:end="232:28"><type pos:start="232:9" pos:end="232:16"><name pos:start="232:9" pos:end="232:16">uint64_t</name></type> <name pos:start="232:18" pos:end="232:24">lowaddr</name> <init pos:start="232:26" pos:end="232:28">= <expr pos:start="232:28" pos:end="232:28"><literal type="number" pos:start="232:28" pos:end="232:28">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="233:9" pos:end="235:61"><expr pos:start="233:9" pos:end="235:60"><name pos:start="233:9" pos:end="233:26"><name pos:start="233:9" pos:end="233:13">spapr</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:26">kernel_size</name></name> <operator pos:start="233:28" pos:end="233:28">=</operator> <call pos:start="233:30" pos:end="235:60"><name pos:start="233:30" pos:end="233:37">load_elf</name><argument_list pos:start="233:38" pos:end="235:60">(<argument pos:start="233:39" pos:end="233:53"><expr pos:start="233:39" pos:end="233:53"><name pos:start="233:39" pos:end="233:53">kernel_filename</name></expr></argument>, <argument pos:start="233:56" pos:end="233:79"><expr pos:start="233:56" pos:end="233:79"><name pos:start="233:56" pos:end="233:79">translate_kernel_address</name></expr></argument>,
                                      <argument pos:start="234:39" pos:end="234:42"><expr pos:start="234:39" pos:end="234:42"><name pos:start="234:39" pos:end="234:42">NULL</name></expr></argument>, <argument pos:start="234:45" pos:end="234:48"><expr pos:start="234:45" pos:end="234:48"><name pos:start="234:45" pos:end="234:48">NULL</name></expr></argument>, <argument pos:start="234:51" pos:end="234:58"><expr pos:start="234:51" pos:end="234:58"><operator pos:start="234:51" pos:end="234:51">&amp;</operator><name pos:start="234:52" pos:end="234:58">lowaddr</name></expr></argument>, <argument pos:start="234:61" pos:end="234:64"><expr pos:start="234:61" pos:end="234:64"><name pos:start="234:61" pos:end="234:64">NULL</name></expr></argument>, <argument pos:start="234:67" pos:end="234:67"><expr pos:start="234:67" pos:end="234:67"><literal type="number" pos:start="234:67" pos:end="234:67">1</literal></expr></argument>,
                                      <argument pos:start="235:39" pos:end="235:53"><expr pos:start="235:39" pos:end="235:53"><name pos:start="235:39" pos:end="235:53">PPC_ELF_MACHINE</name></expr></argument>, <argument pos:start="235:56" pos:end="235:56"><expr pos:start="235:56" pos:end="235:56"><literal type="number" pos:start="235:56" pos:end="235:56">0</literal></expr></argument>, <argument pos:start="235:59" pos:end="235:59"><expr pos:start="235:59" pos:end="235:59"><literal type="number" pos:start="235:59" pos:end="235:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="236:9" pos:end="242:9"><if pos:start="236:9" pos:end="242:9">if <condition pos:start="236:12" pos:end="236:56">(<expr pos:start="236:13" pos:end="236:55"><name pos:start="236:13" pos:end="236:30"><name pos:start="236:13" pos:end="236:17">spapr</name><operator pos:start="236:18" pos:end="236:19">-&gt;</operator><name pos:start="236:20" pos:end="236:30">kernel_size</name></name> <operator pos:start="236:32" pos:end="236:33">==</operator> <name pos:start="236:35" pos:end="236:55">ELF_LOAD_WRONG_ENDIAN</name></expr>)</condition> <block pos:start="236:58" pos:end="242:9">{<block_content pos:start="237:13" pos:end="241:54">
            <expr_stmt pos:start="237:13" pos:end="240:48"><expr pos:start="237:13" pos:end="240:47"><name pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:17">spapr</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:30">kernel_size</name></name> <operator pos:start="237:32" pos:end="237:32">=</operator> <call pos:start="237:34" pos:end="240:47"><name pos:start="237:34" pos:end="237:41">load_elf</name><argument_list pos:start="237:42" pos:end="240:47">(<argument pos:start="237:43" pos:end="237:57"><expr pos:start="237:43" pos:end="237:57"><name pos:start="237:43" pos:end="237:57">kernel_filename</name></expr></argument>,
                                          <argument pos:start="238:43" pos:end="238:66"><expr pos:start="238:43" pos:end="238:66"><name pos:start="238:43" pos:end="238:66">translate_kernel_address</name></expr></argument>, <argument pos:start="238:69" pos:end="238:72"><expr pos:start="238:69" pos:end="238:72"><name pos:start="238:69" pos:end="238:72">NULL</name></expr></argument>, <argument pos:start="238:75" pos:end="238:78"><expr pos:start="238:75" pos:end="238:78"><name pos:start="238:75" pos:end="238:78">NULL</name></expr></argument>,
                                          <argument pos:start="239:43" pos:end="239:50"><expr pos:start="239:43" pos:end="239:50"><operator pos:start="239:43" pos:end="239:43">&amp;</operator><name pos:start="239:44" pos:end="239:50">lowaddr</name></expr></argument>, <argument pos:start="239:53" pos:end="239:56"><expr pos:start="239:53" pos:end="239:56"><name pos:start="239:53" pos:end="239:56">NULL</name></expr></argument>, <argument pos:start="239:59" pos:end="239:59"><expr pos:start="239:59" pos:end="239:59"><literal type="number" pos:start="239:59" pos:end="239:59">0</literal></expr></argument>, <argument pos:start="239:62" pos:end="239:76"><expr pos:start="239:62" pos:end="239:76"><name pos:start="239:62" pos:end="239:76">PPC_ELF_MACHINE</name></expr></argument>,
                                          <argument pos:start="240:43" pos:end="240:43"><expr pos:start="240:43" pos:end="240:43"><literal type="number" pos:start="240:43" pos:end="240:43">0</literal></expr></argument>, <argument pos:start="240:46" pos:end="240:46"><expr pos:start="240:46" pos:end="240:46"><literal type="number" pos:start="240:46" pos:end="240:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="241:13" pos:end="241:54"><expr pos:start="241:13" pos:end="241:53"><name pos:start="241:13" pos:end="241:28"><name pos:start="241:13" pos:end="241:17">spapr</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:28">kernel_le</name></name> <operator pos:start="241:30" pos:end="241:30">=</operator> <name pos:start="241:32" pos:end="241:49"><name pos:start="241:32" pos:end="241:36">spapr</name><operator pos:start="241:37" pos:end="241:38">-&gt;</operator><name pos:start="241:39" pos:end="241:49">kernel_size</name></name> <operator pos:start="241:51" pos:end="241:51">&gt;</operator> <literal type="number" pos:start="241:53" pos:end="241:53">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="243:9" pos:end="247:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:35">(<expr pos:start="243:13" pos:end="243:34"><name pos:start="243:13" pos:end="243:30"><name pos:start="243:13" pos:end="243:17">spapr</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:30">kernel_size</name></name> <operator pos:start="243:32" pos:end="243:32">&lt;</operator> <literal type="number" pos:start="243:34" pos:end="243:34">0</literal></expr>)</condition> <block pos:start="243:37" pos:end="247:9">{<block_content pos:start="244:13" pos:end="246:20">
            <expr_stmt pos:start="244:13" pos:end="245:64"><expr pos:start="244:13" pos:end="245:63"><call pos:start="244:13" pos:end="245:63"><name pos:start="244:13" pos:end="244:24">error_report</name><argument_list pos:start="244:25" pos:end="245:63">(<argument pos:start="244:26" pos:end="244:47"><expr pos:start="244:26" pos:end="244:47"><literal type="string" pos:start="244:26" pos:end="244:47">"error loading %s: %s"</literal></expr></argument>, <argument pos:start="244:50" pos:end="244:64"><expr pos:start="244:50" pos:end="244:64"><name pos:start="244:50" pos:end="244:64">kernel_filename</name></expr></argument>,
                         <argument pos:start="245:26" pos:end="245:62"><expr pos:start="245:26" pos:end="245:62"><call pos:start="245:26" pos:end="245:62"><name pos:start="245:26" pos:end="245:42">load_elf_strerror</name><argument_list pos:start="245:43" pos:end="245:62">(<argument pos:start="245:44" pos:end="245:61"><expr pos:start="245:44" pos:end="245:61"><name pos:start="245:44" pos:end="245:61"><name pos:start="245:44" pos:end="245:48">spapr</name><operator pos:start="245:49" pos:end="245:50">-&gt;</operator><name pos:start="245:51" pos:end="245:61">kernel_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="246:13" pos:end="246:20"><expr pos:start="246:13" pos:end="246:19"><call pos:start="246:13" pos:end="246:19"><name pos:start="246:13" pos:end="246:16">exit</name><argument_list pos:start="246:17" pos:end="246:19">(<argument pos:start="246:18" pos:end="246:18"><expr pos:start="246:18" pos:end="246:18"><literal type="number" pos:start="246:18" pos:end="246:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="248:9" pos:end="248:25">/* load initrd */</comment>
        <if_stmt pos:start="249:9" pos:end="264:9"><if pos:start="249:9" pos:end="264:9">if <condition pos:start="249:12" pos:end="249:28">(<expr pos:start="249:13" pos:end="249:27"><name pos:start="249:13" pos:end="249:27">initrd_filename</name></expr>)</condition> <block pos:start="249:30" pos:end="264:9">{<block_content pos:start="253:13" pos:end="263:13">
            <comment type="block" pos:start="250:13" pos:end="252:15">/* Try to locate the initrd in the gap between the kernel
             * and the firmware. Add a bit of space just in case
             */</comment>
            <expr_stmt pos:start="253:13" pos:end="254:55"><expr pos:start="253:13" pos:end="254:54"><name pos:start="253:13" pos:end="253:30"><name pos:start="253:13" pos:end="253:17">spapr</name><operator pos:start="253:18" pos:end="253:19">-&gt;</operator><name pos:start="253:20" pos:end="253:30">initrd_base</name></name> <operator pos:start="253:32" pos:end="253:32">=</operator> <operator pos:start="253:34" pos:end="253:34">(</operator><name pos:start="253:35" pos:end="253:50">KERNEL_LOAD_ADDR</name> <operator pos:start="253:52" pos:end="253:52">+</operator> <name pos:start="253:54" pos:end="253:71"><name pos:start="253:54" pos:end="253:58">spapr</name><operator pos:start="253:59" pos:end="253:60">-&gt;</operator><name pos:start="253:61" pos:end="253:71">kernel_size</name></name>
                                  <operator pos:start="254:35" pos:end="254:35">+</operator> <literal type="number" pos:start="254:37" pos:end="254:43">0x1ffff</literal><operator pos:start="254:44" pos:end="254:44">)</operator> <operator pos:start="254:46" pos:end="254:46">&amp;</operator> <operator pos:start="254:48" pos:end="254:48">~</operator><literal type="number" pos:start="254:49" pos:end="254:54">0xffff</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="255:13" pos:end="258:75"><expr pos:start="255:13" pos:end="258:74"><name pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:17">spapr</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:30">initrd_size</name></name> <operator pos:start="255:32" pos:end="255:32">=</operator> <call pos:start="255:34" pos:end="258:74"><name pos:start="255:34" pos:end="255:52">load_image_targphys</name><argument_list pos:start="255:53" pos:end="258:74">(<argument pos:start="255:54" pos:end="255:68"><expr pos:start="255:54" pos:end="255:68"><name pos:start="255:54" pos:end="255:68">initrd_filename</name></expr></argument>,
                                                     <argument pos:start="256:54" pos:end="256:71"><expr pos:start="256:54" pos:end="256:71"><name pos:start="256:54" pos:end="256:71"><name pos:start="256:54" pos:end="256:58">spapr</name><operator pos:start="256:59" pos:end="256:60">-&gt;</operator><name pos:start="256:61" pos:end="256:71">initrd_base</name></name></expr></argument>,
                                                     <argument pos:start="257:54" pos:end="258:73"><expr pos:start="257:54" pos:end="258:73"><name pos:start="257:54" pos:end="257:63">load_limit</name>
                                                     <operator pos:start="258:54" pos:end="258:54">-</operator> <name pos:start="258:56" pos:end="258:73"><name pos:start="258:56" pos:end="258:60">spapr</name><operator pos:start="258:61" pos:end="258:62">-&gt;</operator><name pos:start="258:63" pos:end="258:73">initrd_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="259:13" pos:end="263:13"><if pos:start="259:13" pos:end="263:13">if <condition pos:start="259:16" pos:end="259:39">(<expr pos:start="259:17" pos:end="259:38"><name pos:start="259:17" pos:end="259:34"><name pos:start="259:17" pos:end="259:21">spapr</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:34">initrd_size</name></name> <operator pos:start="259:36" pos:end="259:36">&lt;</operator> <literal type="number" pos:start="259:38" pos:end="259:38">0</literal></expr>)</condition> <block pos:start="259:41" pos:end="263:13">{<block_content pos:start="260:17" pos:end="262:24">
                <expr_stmt pos:start="260:17" pos:end="261:46"><expr pos:start="260:17" pos:end="261:45"><call pos:start="260:17" pos:end="261:45"><name pos:start="260:17" pos:end="260:28">error_report</name><argument_list pos:start="260:29" pos:end="261:45">(<argument pos:start="260:30" pos:end="260:67"><expr pos:start="260:30" pos:end="260:67"><literal type="string" pos:start="260:30" pos:end="260:67">"could not load initial ram disk '%s'"</literal></expr></argument>,
                             <argument pos:start="261:30" pos:end="261:44"><expr pos:start="261:30" pos:end="261:44"><name pos:start="261:30" pos:end="261:44">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="262:17" pos:end="262:24"><expr pos:start="262:17" pos:end="262:23"><call pos:start="262:17" pos:end="262:23"><name pos:start="262:17" pos:end="262:20">exit</name><argument_list pos:start="262:21" pos:end="262:23">(<argument pos:start="262:22" pos:end="262:22"><expr pos:start="262:22" pos:end="262:22"><literal type="number" pos:start="262:22" pos:end="262:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="266:5" pos:end="268:5"><if pos:start="266:5" pos:end="268:5">if <condition pos:start="266:8" pos:end="266:26">(<expr pos:start="266:9" pos:end="266:25"><name pos:start="266:9" pos:end="266:17">bios_name</name> <operator pos:start="266:19" pos:end="266:20">==</operator> <name pos:start="266:22" pos:end="266:25">NULL</name></expr>)</condition> <block pos:start="266:28" pos:end="268:5">{<block_content pos:start="267:9" pos:end="267:33">
        <expr_stmt pos:start="267:9" pos:end="267:33"><expr pos:start="267:9" pos:end="267:32"><name pos:start="267:9" pos:end="267:17">bios_name</name> <operator pos:start="267:19" pos:end="267:19">=</operator> <name pos:start="267:21" pos:end="267:32">FW_FILE_NAME</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="269:5" pos:end="269:62"><expr pos:start="269:5" pos:end="269:61"><name pos:start="269:5" pos:end="269:12">filename</name> <operator pos:start="269:14" pos:end="269:14">=</operator> <call pos:start="269:16" pos:end="269:61"><name pos:start="269:16" pos:end="269:29">qemu_find_file</name><argument_list pos:start="269:30" pos:end="269:61">(<argument pos:start="269:31" pos:end="269:49"><expr pos:start="269:31" pos:end="269:49"><name pos:start="269:31" pos:end="269:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="269:52" pos:end="269:60"><expr pos:start="269:52" pos:end="269:60"><name pos:start="269:52" pos:end="269:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="270:5" pos:end="273:5"><if pos:start="270:5" pos:end="273:5">if <condition pos:start="270:8" pos:end="270:18">(<expr pos:start="270:9" pos:end="270:17"><operator pos:start="270:9" pos:end="270:9">!</operator><name pos:start="270:10" pos:end="270:17">filename</name></expr>)</condition> <block pos:start="270:20" pos:end="273:5">{<block_content pos:start="271:9" pos:end="272:16">
        <expr_stmt pos:start="271:9" pos:end="271:69"><expr pos:start="271:9" pos:end="271:68"><call pos:start="271:9" pos:end="271:68"><name pos:start="271:9" pos:end="271:20">error_report</name><argument_list pos:start="271:21" pos:end="271:68">(<argument pos:start="271:22" pos:end="271:56"><expr pos:start="271:22" pos:end="271:56"><literal type="string" pos:start="271:22" pos:end="271:56">"Could not find LPAR firmware '%s'"</literal></expr></argument>, <argument pos:start="271:59" pos:end="271:67"><expr pos:start="271:59" pos:end="271:67"><name pos:start="271:59" pos:end="271:67">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="272:9" pos:end="272:16"><expr pos:start="272:9" pos:end="272:15"><call pos:start="272:9" pos:end="272:15"><name pos:start="272:9" pos:end="272:12">exit</name><argument_list pos:start="272:13" pos:end="272:15">(<argument pos:start="272:14" pos:end="272:14"><expr pos:start="272:14" pos:end="272:14"><literal type="number" pos:start="272:14" pos:end="272:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="274:5" pos:end="274:60"><expr pos:start="274:5" pos:end="274:59"><name pos:start="274:5" pos:end="274:11">fw_size</name> <operator pos:start="274:13" pos:end="274:13">=</operator> <call pos:start="274:15" pos:end="274:59"><name pos:start="274:15" pos:end="274:33">load_image_targphys</name><argument_list pos:start="274:34" pos:end="274:59">(<argument pos:start="274:35" pos:end="274:42"><expr pos:start="274:35" pos:end="274:42"><name pos:start="274:35" pos:end="274:42">filename</name></expr></argument>, <argument pos:start="274:45" pos:end="274:45"><expr pos:start="274:45" pos:end="274:45"><literal type="number" pos:start="274:45" pos:end="274:45">0</literal></expr></argument>, <argument pos:start="274:48" pos:end="274:58"><expr pos:start="274:48" pos:end="274:58"><name pos:start="274:48" pos:end="274:58">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="275:5" pos:end="278:5"><if pos:start="275:5" pos:end="278:5">if <condition pos:start="275:8" pos:end="275:21">(<expr pos:start="275:9" pos:end="275:20"><name pos:start="275:9" pos:end="275:15">fw_size</name> <operator pos:start="275:17" pos:end="275:18">&lt;=</operator> <literal type="number" pos:start="275:20" pos:end="275:20">0</literal></expr>)</condition> <block pos:start="275:23" pos:end="278:5">{<block_content pos:start="276:9" pos:end="277:16">
        <expr_stmt pos:start="276:9" pos:end="276:68"><expr pos:start="276:9" pos:end="276:67"><call pos:start="276:9" pos:end="276:67"><name pos:start="276:9" pos:end="276:20">error_report</name><argument_list pos:start="276:21" pos:end="276:67">(<argument pos:start="276:22" pos:end="276:56"><expr pos:start="276:22" pos:end="276:56"><literal type="string" pos:start="276:22" pos:end="276:56">"Could not load LPAR firmware '%s'"</literal></expr></argument>, <argument pos:start="276:59" pos:end="276:66"><expr pos:start="276:59" pos:end="276:66"><name pos:start="276:59" pos:end="276:66">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="277:9" pos:end="277:16"><expr pos:start="277:9" pos:end="277:15"><call pos:start="277:9" pos:end="277:15"><name pos:start="277:9" pos:end="277:12">exit</name><argument_list pos:start="277:13" pos:end="277:15">(<argument pos:start="277:14" pos:end="277:14"><expr pos:start="277:14" pos:end="277:14"><literal type="number" pos:start="277:14" pos:end="277:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="279:5" pos:end="279:21"><expr pos:start="279:5" pos:end="279:20"><call pos:start="279:5" pos:end="279:20"><name pos:start="279:5" pos:end="279:10">g_free</name><argument_list pos:start="279:11" pos:end="279:20">(<argument pos:start="279:12" pos:end="279:19"><expr pos:start="279:12" pos:end="279:19"><name pos:start="279:12" pos:end="279:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="280:5" pos:end="282:64">/* FIXME: Should register things through the MachineState's qdev
     * interface, this is a legacy from the sPAPREnvironment structure
     * which predated MachineState but had a similar function */</comment>
    <expr_stmt pos:start="283:5" pos:end="283:53"><expr pos:start="283:5" pos:end="283:52"><call pos:start="283:5" pos:end="283:52"><name pos:start="283:5" pos:end="283:20">vmstate_register</name><argument_list pos:start="283:21" pos:end="283:52">(<argument pos:start="283:22" pos:end="283:25"><expr pos:start="283:22" pos:end="283:25"><name pos:start="283:22" pos:end="283:25">NULL</name></expr></argument>, <argument pos:start="283:28" pos:end="283:28"><expr pos:start="283:28" pos:end="283:28"><literal type="number" pos:start="283:28" pos:end="283:28">0</literal></expr></argument>, <argument pos:start="283:31" pos:end="283:44"><expr pos:start="283:31" pos:end="283:44"><operator pos:start="283:31" pos:end="283:31">&amp;</operator><name pos:start="283:32" pos:end="283:44">vmstate_spapr</name></expr></argument>, <argument pos:start="283:47" pos:end="283:51"><expr pos:start="283:47" pos:end="283:51"><name pos:start="283:47" pos:end="283:51">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="284:5" pos:end="285:55"><expr pos:start="284:5" pos:end="285:54"><call pos:start="284:5" pos:end="285:54"><name pos:start="284:5" pos:end="284:24">register_savevm_live</name><argument_list pos:start="284:25" pos:end="285:54">(<argument pos:start="284:26" pos:end="284:29"><expr pos:start="284:26" pos:end="284:29"><name pos:start="284:26" pos:end="284:29">NULL</name></expr></argument>, <argument pos:start="284:32" pos:end="284:43"><expr pos:start="284:32" pos:end="284:43"><literal type="string" pos:start="284:32" pos:end="284:43">"spapr/htab"</literal></expr></argument>, <argument pos:start="284:46" pos:end="284:47"><expr pos:start="284:46" pos:end="284:47"><operator pos:start="284:46" pos:end="284:46">-</operator><literal type="number" pos:start="284:47" pos:end="284:47">1</literal></expr></argument>, <argument pos:start="284:50" pos:end="284:50"><expr pos:start="284:50" pos:end="284:50"><literal type="number" pos:start="284:50" pos:end="284:50">1</literal></expr></argument>,
                         <argument pos:start="285:26" pos:end="285:46"><expr pos:start="285:26" pos:end="285:46"><operator pos:start="285:26" pos:end="285:26">&amp;</operator><name pos:start="285:27" pos:end="285:46">savevm_htab_handlers</name></expr></argument>, <argument pos:start="285:49" pos:end="285:53"><expr pos:start="285:49" pos:end="285:53"><name pos:start="285:49" pos:end="285:53">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="286:5" pos:end="286:50"><expr pos:start="286:5" pos:end="286:49"><call pos:start="286:5" pos:end="286:49"><name pos:start="286:5" pos:end="286:26">qemu_register_boot_set</name><argument_list pos:start="286:27" pos:end="286:49">(<argument pos:start="286:28" pos:end="286:41"><expr pos:start="286:28" pos:end="286:41"><name pos:start="286:28" pos:end="286:41">spapr_boot_set</name></expr></argument>, <argument pos:start="286:44" pos:end="286:48"><expr pos:start="286:44" pos:end="286:48"><name pos:start="286:44" pos:end="286:48">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="287:5" pos:end="292:5"><if pos:start="287:5" pos:end="292:5">if <condition pos:start="287:8" pos:end="287:22">(<expr pos:start="287:9" pos:end="287:21"><call pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:19">kvm_enabled</name><argument_list pos:start="287:20" pos:end="287:21">()</argument_list></call></expr>)</condition> <block pos:start="287:24" pos:end="292:5">{<block_content pos:start="289:9" pos:end="291:48">
        <comment type="block" pos:start="288:9" pos:end="288:39">/* to stop and start vmclock */</comment>
        <expr_stmt pos:start="289:9" pos:end="290:53"><expr pos:start="289:9" pos:end="290:52"><call pos:start="289:9" pos:end="290:52"><name pos:start="289:9" pos:end="289:40">qemu_add_vm_change_state_handler</name><argument_list pos:start="289:41" pos:end="290:52">(<argument pos:start="289:42" pos:end="289:70"><expr pos:start="289:42" pos:end="289:70"><name pos:start="289:42" pos:end="289:70">cpu_ppc_clock_vm_state_change</name></expr></argument>,
                                         <argument pos:start="290:42" pos:end="290:51"><expr pos:start="290:42" pos:end="290:51"><operator pos:start="290:42" pos:end="290:42">&amp;</operator><name pos:start="290:43" pos:end="290:51"><name pos:start="290:43" pos:end="290:47">spapr</name><operator pos:start="290:48" pos:end="290:49">-&gt;</operator><name pos:start="290:50" pos:end="290:51">tb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="291:9" pos:end="291:48"><expr pos:start="291:9" pos:end="291:47"><call pos:start="291:9" pos:end="291:47"><name pos:start="291:9" pos:end="291:45">kvmppc_spapr_enable_inkernel_multitce</name><argument_list pos:start="291:46" pos:end="291:47">()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
