<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24174.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">vmdk_open_vmfs_sparse</name><parameter_list pos:start="1:33" pos:end="5:57">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:55"><decl pos:start="3:34" pos:end="3:55"><type pos:start="3:34" pos:end="3:55"><name pos:start="3:34" pos:end="3:49">BlockDriverState</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">file</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:42"><decl pos:start="5:34" pos:end="5:42"><type pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:36">int</name></type> <name pos:start="5:38" pos:end="5:42">flags</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:49">Error</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="69:1">{<block_content pos:start="9:5" pos:end="67:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">VMDK3Header</name></type> <name pos:start="13:17" pos:end="13:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">VmdkExtent</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">extent</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:67"><expr pos:start="19:5" pos:end="19:66"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:66"><name pos:start="19:11" pos:end="19:20">bdrv_pread</name><argument_list pos:start="19:21" pos:end="19:66">(<argument pos:start="19:22" pos:end="19:25"><expr pos:start="19:22" pos:end="19:25"><name pos:start="19:22" pos:end="19:25">file</name></expr></argument>, <argument pos:start="19:28" pos:end="19:40"><expr pos:start="19:28" pos:end="19:40"><sizeof pos:start="19:28" pos:end="19:40">sizeof<argument_list pos:start="19:34" pos:end="19:40">(<argument pos:start="19:35" pos:end="19:39"><expr pos:start="19:35" pos:end="19:39"><name pos:start="19:35" pos:end="19:39">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:43" pos:end="19:49"><expr pos:start="19:43" pos:end="19:49"><operator pos:start="19:43" pos:end="19:43">&amp;</operator><name pos:start="19:44" pos:end="19:49">header</name></expr></argument>, <argument pos:start="19:52" pos:end="19:65"><expr pos:start="19:52" pos:end="19:65"><sizeof pos:start="19:52" pos:end="19:65">sizeof<argument_list pos:start="19:58" pos:end="19:65">(<argument pos:start="19:59" pos:end="19:64"><expr pos:start="19:59" pos:end="19:64"><name pos:start="19:59" pos:end="19:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:19">

        <expr_stmt pos:start="23:9" pos:end="27:41"><expr pos:start="23:9" pos:end="27:40"><call pos:start="23:9" pos:end="27:40"><name pos:start="23:9" pos:end="23:24">error_setg_errno</name><argument_list pos:start="23:25" pos:end="27:40">(<argument pos:start="23:26" pos:end="23:29"><expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">errp</name></expr></argument>, <argument pos:start="23:32" pos:end="23:35"><expr pos:start="23:32" pos:end="23:35"><operator pos:start="23:32" pos:end="23:32">-</operator><name pos:start="23:33" pos:end="23:35">ret</name></expr></argument>,

                         <argument pos:start="25:26" pos:end="25:63"><expr pos:start="25:26" pos:end="25:63"><literal type="string" pos:start="25:26" pos:end="25:63">"Could not read header from file '%s'"</literal></expr></argument>,

                         <argument pos:start="27:26" pos:end="27:39"><expr pos:start="27:26" pos:end="27:39"><name pos:start="27:26" pos:end="27:39"><name pos:start="27:26" pos:end="27:29">file</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:39">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="49:32"><expr pos:start="33:5" pos:end="49:31"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="49:31"><name pos:start="33:11" pos:end="33:25">vmdk_add_extent</name><argument_list pos:start="33:26" pos:end="49:31">(<argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">bs</name></expr></argument>, <argument pos:start="33:31" pos:end="33:34"><expr pos:start="33:31" pos:end="33:34"><name pos:start="33:31" pos:end="33:34">file</name></expr></argument>, <argument pos:start="33:37" pos:end="33:41"><expr pos:start="33:37" pos:end="33:41"><name pos:start="33:37" pos:end="33:41">false</name></expr></argument>,

                          <argument pos:start="35:27" pos:end="35:58"><expr pos:start="35:27" pos:end="35:58"><call pos:start="35:27" pos:end="35:58"><name pos:start="35:27" pos:end="35:37">le32_to_cpu</name><argument_list pos:start="35:38" pos:end="35:58">(<argument pos:start="35:39" pos:end="35:57"><expr pos:start="35:39" pos:end="35:57"><name pos:start="35:39" pos:end="35:57"><name pos:start="35:39" pos:end="35:44">header</name><operator pos:start="35:45" pos:end="35:45">.</operator><name pos:start="35:46" pos:end="35:57">disk_sectors</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="37:27" pos:end="37:63"><expr pos:start="37:27" pos:end="37:63"><call pos:start="37:27" pos:end="37:58"><name pos:start="37:27" pos:end="37:37">le32_to_cpu</name><argument_list pos:start="37:38" pos:end="37:58">(<argument pos:start="37:39" pos:end="37:57"><expr pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:44">header</name><operator pos:start="37:45" pos:end="37:45">.</operator><name pos:start="37:46" pos:end="37:57">l1dir_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:60" pos:end="37:61">&lt;&lt;</operator> <literal type="number" pos:start="37:63" pos:end="37:63">9</literal></expr></argument>,

                          <argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr></argument>,

                          <argument pos:start="41:27" pos:end="41:56"><expr pos:start="41:27" pos:end="41:56"><call pos:start="41:27" pos:end="41:56"><name pos:start="41:27" pos:end="41:37">le32_to_cpu</name><argument_list pos:start="41:38" pos:end="41:56">(<argument pos:start="41:39" pos:end="41:55"><expr pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:44">header</name><operator pos:start="41:45" pos:end="41:45">.</operator><name pos:start="41:46" pos:end="41:55">l1dir_size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><literal type="number" pos:start="43:27" pos:end="43:30">4096</literal></expr></argument>,

                          <argument pos:start="45:27" pos:end="45:57"><expr pos:start="45:27" pos:end="45:57"><call pos:start="45:27" pos:end="45:57"><name pos:start="45:27" pos:end="45:37">le32_to_cpu</name><argument_list pos:start="45:38" pos:end="45:57">(<argument pos:start="45:39" pos:end="45:56"><expr pos:start="45:39" pos:end="45:56"><name pos:start="45:39" pos:end="45:56"><name pos:start="45:39" pos:end="45:44">header</name><operator pos:start="45:45" pos:end="45:45">.</operator><name pos:start="45:46" pos:end="45:56">granularity</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="47:27" pos:end="47:33"><expr pos:start="47:27" pos:end="47:33"><operator pos:start="47:27" pos:end="47:27">&amp;</operator><name pos:start="47:28" pos:end="47:33">extent</name></expr></argument>,

                          <argument pos:start="49:27" pos:end="49:30"><expr pos:start="49:27" pos:end="49:30"><name pos:start="49:27" pos:end="49:30">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:16">(<expr pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">&lt;</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>)</condition> <block pos:start="51:18" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:19">

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:7">ret</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:44"><name pos:start="57:11" pos:end="57:26">vmdk_init_tables</name><argument_list pos:start="57:27" pos:end="57:44">(<argument pos:start="57:28" pos:end="57:29"><expr pos:start="57:28" pos:end="57:29"><name pos:start="57:28" pos:end="57:29">bs</name></expr></argument>, <argument pos:start="57:32" pos:end="57:37"><expr pos:start="57:32" pos:end="57:37"><name pos:start="57:32" pos:end="57:37">extent</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="65:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:12">(<expr pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">ret</name></expr>)</condition> <block pos:start="59:14" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:34">

        <comment type="block" pos:start="61:9" pos:end="61:54">/* free extent allocated by vmdk_add_extent */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><call pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:29">vmdk_free_last_extent</name><argument_list pos:start="63:30" pos:end="63:33">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="67:5" pos:end="67:15">return <expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
