<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19305.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">vfio_setup_pcie_cap</name><parameter_list pos:start="1:31" pos:end="3:44">(<parameter pos:start="1:32" pos:end="1:50"><decl pos:start="1:32" pos:end="1:50"><type pos:start="1:32" pos:end="1:50"><name pos:start="1:32" pos:end="1:44">VFIOPCIDevice</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">vdev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">pos</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:68">uint8_t</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:36">Error</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier><modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="263:1">{<block_content pos:start="7:5" pos:end="261:15">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint16_t</name></type> <name pos:start="7:14" pos:end="7:18">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:16">type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:66"><expr pos:start="13:5" pos:end="13:65"><name pos:start="13:5" pos:end="13:9">flags</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:65"><name pos:start="13:13" pos:end="13:24">pci_get_word</name><argument_list pos:start="13:25" pos:end="13:65">(<argument pos:start="13:26" pos:end="13:64"><expr pos:start="13:26" pos:end="13:64"><name pos:start="13:26" pos:end="13:42"><name pos:start="13:26" pos:end="13:29">vdev</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">pdev</name><operator pos:start="13:36" pos:end="13:36">.</operator><name pos:start="13:37" pos:end="13:42">config</name></name> <operator pos:start="13:44" pos:end="13:44">+</operator> <name pos:start="13:46" pos:end="13:48">pos</name> <operator pos:start="13:50" pos:end="13:50">+</operator> <name pos:start="13:52" pos:end="13:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:45"><expr pos:start="15:5" pos:end="15:44"><name pos:start="15:5" pos:end="15:8">type</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:17">flags</name> <operator pos:start="15:19" pos:end="15:19">&amp;</operator> <name pos:start="15:21" pos:end="15:38">PCI_EXP_FLAGS_TYPE</name><operator pos:start="15:39" pos:end="15:39">)</operator> <operator pos:start="15:41" pos:end="15:42">&gt;&gt;</operator> <literal type="number" pos:start="15:44" pos:end="15:44">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="23:36">(<expr pos:start="19:9" pos:end="23:35"><name pos:start="19:9" pos:end="19:12">type</name> <operator pos:start="19:14" pos:end="19:15">!=</operator> <name pos:start="19:17" pos:end="19:37">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="19:39" pos:end="19:40">&amp;&amp;</operator>

        <name pos:start="21:9" pos:end="21:12">type</name> <operator pos:start="21:14" pos:end="21:15">!=</operator> <name pos:start="21:17" pos:end="21:36">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="21:38" pos:end="21:39">&amp;&amp;</operator>

        <name pos:start="23:9" pos:end="23:12">type</name> <operator pos:start="23:14" pos:end="23:15">!=</operator> <name pos:start="23:17" pos:end="23:35">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="23:38" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:23">



        <expr_stmt pos:start="27:9" pos:end="29:63"><expr pos:start="27:9" pos:end="29:62"><call pos:start="27:9" pos:end="29:62"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="29:62">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">errp</name></expr></argument>, <argument pos:start="27:26" pos:end="29:55"><expr pos:start="27:26" pos:end="29:55"><literal type="string" pos:start="27:26" pos:end="27:56">"assignment of PCIe type 0x%x "</literal>

                   <literal type="string" pos:start="29:20" pos:end="29:55">"devices is not currently supported"</literal></expr></argument>, <argument pos:start="29:58" pos:end="29:61"><expr pos:start="29:58" pos:end="29:61"><name pos:start="29:58" pos:end="29:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:23">return <expr pos:start="31:16" pos:end="31:22"><operator pos:start="31:16" pos:end="31:16">-</operator><name pos:start="31:17" pos:end="31:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="217:5"><if pos:start="37:5" pos:end="103:5">if <condition pos:start="37:8" pos:end="37:44">(<expr pos:start="37:9" pos:end="37:43"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:43"><name pos:start="37:10" pos:end="37:27">pci_bus_is_express</name><argument_list pos:start="37:28" pos:end="37:43">(<argument pos:start="37:29" pos:end="37:42"><expr pos:start="37:29" pos:end="37:42"><name pos:start="37:29" pos:end="37:42"><name pos:start="37:29" pos:end="37:32">vdev</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:38">pdev</name><operator pos:start="37:39" pos:end="37:39">.</operator><name pos:start="37:40" pos:end="37:42">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:46" pos:end="103:5">{<block_content pos:start="39:9" pos:end="99:9">

        <decl_stmt pos:start="39:9" pos:end="39:37"><decl pos:start="39:9" pos:end="39:36"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:14">PCIBus</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:19">bus</name> <init pos:start="39:21" pos:end="39:36">= <expr pos:start="39:23" pos:end="39:36"><name pos:start="39:23" pos:end="39:36"><name pos:start="39:23" pos:end="39:26">vdev</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:32">pdev</name><operator pos:start="39:33" pos:end="39:33">.</operator><name pos:start="39:34" pos:end="39:36">bus</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:17">PCIDevice</name> <modifier pos:start="41:19" pos:end="41:19">*</modifier></type><name pos:start="41:20" pos:end="41:25">bridge</name></decl>;</decl_stmt>



        <comment type="block" pos:start="45:9" pos:end="83:11">/*

         * Traditionally PCI device assignment exposes the PCIe capability

         * as-is on non-express buses.  The reason being that some drivers

         * simply assume that it's there, for example tg3.  However when

         * we're running on a native PCIe machine type, like Q35, we need

         * to hide the PCIe capability.  The reason for this is twofold;

         * first Windows guests get a Code 10 error when the PCIe capability

         * is exposed in this configuration.  Therefore express devices won't

         * work at all unless they're attached to express buses in the VM.

         * Second, a native PCIe machine introduces the possibility of fine

         * granularity IOMMUs supporting both translation and isolation.

         * Guest code to discover the IOMMU visibility of a device, such as

         * IOMMU grouping code on Linux, is very aware of device types and

         * valid transitions between bus types.  An express device on a non-

         * express bus is not a valid combination on bare metal systems.

         *

         * Drivers that require a PCIe capability to make the device

         * functional are simply going to need to have their devices placed

         * on a PCIe bus in the VM.

         */</comment>

        <while pos:start="85:9" pos:end="91:9">while <condition pos:start="85:15" pos:end="85:37">(<expr pos:start="85:16" pos:end="85:36"><operator pos:start="85:16" pos:end="85:16">!</operator><call pos:start="85:17" pos:end="85:36"><name pos:start="85:17" pos:end="85:31">pci_bus_is_root</name><argument_list pos:start="85:32" pos:end="85:36">(<argument pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><name pos:start="85:33" pos:end="85:35">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:39" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:30">

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:18">bridge</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <call pos:start="87:22" pos:end="87:47"><name pos:start="87:22" pos:end="87:42">pci_bridge_get_device</name><argument_list pos:start="87:43" pos:end="87:47">(<argument pos:start="87:44" pos:end="87:46"><expr pos:start="87:44" pos:end="87:46"><name pos:start="87:44" pos:end="87:46">bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:15">bus</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:29"><name pos:start="89:19" pos:end="89:24">bridge</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:29">bus</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:36">(<expr pos:start="95:13" pos:end="95:35"><call pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:30">pci_bus_is_express</name><argument_list pos:start="95:31" pos:end="95:35">(<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:34">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:38" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:21">

            <return pos:start="97:13" pos:end="97:21">return <expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="179:5">else if <condition pos:start="103:15" pos:end="103:47">(<expr pos:start="103:16" pos:end="103:46"><call pos:start="103:16" pos:end="103:46"><name pos:start="103:16" pos:end="103:30">pci_bus_is_root</name><argument_list pos:start="103:31" pos:end="103:46">(<argument pos:start="103:32" pos:end="103:45"><expr pos:start="103:32" pos:end="103:45"><name pos:start="103:32" pos:end="103:45"><name pos:start="103:32" pos:end="103:35">vdev</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:41">pdev</name><operator pos:start="103:42" pos:end="103:42">.</operator><name pos:start="103:43" pos:end="103:45">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:49" pos:end="179:5">{<block_content pos:start="113:9" pos:end="175:9">

        <comment type="block" pos:start="105:9" pos:end="111:11">/*

         * On a Root Complex bus Endpoints become Root Complex Integrated

         * Endpoints, which changes the type and clears the LNK &amp; LNK2 fields.

         */</comment>

        <if_stmt pos:start="113:9" pos:end="175:9"><if pos:start="113:9" pos:end="163:9">if <condition pos:start="113:12" pos:end="113:42">(<expr pos:start="113:13" pos:end="113:41"><name pos:start="113:13" pos:end="113:16">type</name> <operator pos:start="113:18" pos:end="113:19">==</operator> <name pos:start="113:21" pos:end="113:41">PCI_EXP_TYPE_ENDPOINT</name></expr>)</condition> <block pos:start="113:44" pos:end="163:9">{<block_content pos:start="115:13" pos:end="159:13">

            <expr_stmt pos:start="115:13" pos:end="119:55"><expr pos:start="115:13" pos:end="119:54"><call pos:start="115:13" pos:end="119:54"><name pos:start="115:13" pos:end="115:34">vfio_add_emulated_word</name><argument_list pos:start="115:35" pos:end="119:54">(<argument pos:start="115:36" pos:end="115:39"><expr pos:start="115:36" pos:end="115:39"><name pos:start="115:36" pos:end="115:39">vdev</name></expr></argument>, <argument pos:start="115:42" pos:end="115:60"><expr pos:start="115:42" pos:end="115:60"><name pos:start="115:42" pos:end="115:44">pos</name> <operator pos:start="115:46" pos:end="115:46">+</operator> <name pos:start="115:48" pos:end="115:60">PCI_CAP_FLAGS</name></expr></argument>,

                                   <argument pos:start="117:36" pos:end="117:59"><expr pos:start="117:36" pos:end="117:59"><name pos:start="117:36" pos:end="117:54">PCI_EXP_TYPE_RC_END</name> <operator pos:start="117:56" pos:end="117:57">&lt;&lt;</operator> <literal type="number" pos:start="117:59" pos:end="117:59">4</literal></expr></argument>,

                                   <argument pos:start="119:36" pos:end="119:53"><expr pos:start="119:36" pos:end="119:53"><name pos:start="119:36" pos:end="119:53">PCI_EXP_FLAGS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="123:13" pos:end="123:66">/* Link Capabilities, Status, and Control goes away */</comment>

            <if_stmt pos:start="125:13" pos:end="159:13"><if pos:start="125:13" pos:end="159:13">if <condition pos:start="125:16" pos:end="125:38">(<expr pos:start="125:17" pos:end="125:37"><name pos:start="125:17" pos:end="125:20">size</name> <operator pos:start="125:22" pos:end="125:22">&gt;</operator> <name pos:start="125:24" pos:end="125:37">PCI_EXP_LNKCTL</name></expr>)</condition> <block pos:start="125:40" pos:end="159:13">{<block_content pos:start="127:17" pos:end="157:17">

                <expr_stmt pos:start="127:17" pos:end="127:74"><expr pos:start="127:17" pos:end="127:73"><call pos:start="127:17" pos:end="127:73"><name pos:start="127:17" pos:end="127:38">vfio_add_emulated_long</name><argument_list pos:start="127:39" pos:end="127:73">(<argument pos:start="127:40" pos:end="127:43"><expr pos:start="127:40" pos:end="127:43"><name pos:start="127:40" pos:end="127:43">vdev</name></expr></argument>, <argument pos:start="127:46" pos:end="127:65"><expr pos:start="127:46" pos:end="127:65"><name pos:start="127:46" pos:end="127:48">pos</name> <operator pos:start="127:50" pos:end="127:50">+</operator> <name pos:start="127:52" pos:end="127:65">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="127:68" pos:end="127:68"><expr pos:start="127:68" pos:end="127:68"><literal type="number" pos:start="127:68" pos:end="127:68">0</literal></expr></argument>, <argument pos:start="127:71" pos:end="127:72"><expr pos:start="127:71" pos:end="127:72"><operator pos:start="127:71" pos:end="127:71">~</operator><literal type="number" pos:start="127:72" pos:end="127:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:74"><expr pos:start="129:17" pos:end="129:73"><call pos:start="129:17" pos:end="129:73"><name pos:start="129:17" pos:end="129:38">vfio_add_emulated_word</name><argument_list pos:start="129:39" pos:end="129:73">(<argument pos:start="129:40" pos:end="129:43"><expr pos:start="129:40" pos:end="129:43"><name pos:start="129:40" pos:end="129:43">vdev</name></expr></argument>, <argument pos:start="129:46" pos:end="129:65"><expr pos:start="129:46" pos:end="129:65"><name pos:start="129:46" pos:end="129:48">pos</name> <operator pos:start="129:50" pos:end="129:50">+</operator> <name pos:start="129:52" pos:end="129:65">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="129:68" pos:end="129:68"><expr pos:start="129:68" pos:end="129:68"><literal type="number" pos:start="129:68" pos:end="129:68">0</literal></expr></argument>, <argument pos:start="129:71" pos:end="129:72"><expr pos:start="129:71" pos:end="129:72"><operator pos:start="129:71" pos:end="129:71">~</operator><literal type="number" pos:start="129:72" pos:end="129:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="146:0"><expr pos:start="131:17" pos:end="131:73"><call pos:start="131:17" pos:end="131:73"><name pos:start="131:17" pos:end="131:38">vfio_add_emulated_word</name><argument_list pos:start="131:39" pos:end="131:73">(<argument pos:start="131:40" pos:end="131:43"><expr pos:start="131:40" pos:end="131:43"><name pos:start="131:40" pos:end="131:43">vdev</name></expr></argument>, <argument pos:start="131:46" pos:end="131:65"><expr pos:start="131:46" pos:end="131:65"><name pos:start="131:46" pos:end="131:48">pos</name> <operator pos:start="131:50" pos:end="131:50">+</operator> <name pos:start="131:52" pos:end="131:65">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="131:68" pos:end="131:68"><expr pos:start="131:68" pos:end="131:68"><literal type="number" pos:start="131:68" pos:end="131:68">0</literal></expr></argument>, <argument pos:start="131:71" pos:end="131:72"><expr pos:start="131:71" pos:end="131:72"><operator pos:start="131:71" pos:end="131:71">~</operator><literal type="number" pos:start="131:72" pos:end="131:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="135:1" pos:end="135:23">#<cpp:directive pos:start="135:2" pos:end="135:7">ifndef</cpp:directive> <name pos:start="135:9" pos:end="135:23">PCI_EXP_LNKCAP2</name></cpp:ifndef>

<cpp:define pos:start="137:1" pos:end="137:26">#<cpp:directive pos:start="137:2" pos:end="137:7">define</cpp:directive> <cpp:macro pos:start="137:9" pos:end="137:23"><name pos:start="137:9" pos:end="137:23">PCI_EXP_LNKCAP2</name></cpp:macro> <cpp:value pos:start="137:25" pos:end="137:26">44</cpp:value></cpp:define>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="141:1" pos:end="141:23">#<cpp:directive pos:start="141:2" pos:end="141:7">ifndef</cpp:directive> <name pos:start="141:9" pos:end="141:23">PCI_EXP_LNKSTA2</name></cpp:ifndef>

<cpp:define pos:start="143:1" pos:end="143:26">#<cpp:directive pos:start="143:2" pos:end="143:7">define</cpp:directive> <cpp:macro pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:23">PCI_EXP_LNKSTA2</name></cpp:macro> <cpp:value pos:start="143:25" pos:end="143:26">50</cpp:value></cpp:define>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="147:17" pos:end="147:72">/* Link 2 Capabilities, Status, and Control goes away */</comment>

                <if_stmt pos:start="149:17" pos:end="157:17"><if pos:start="149:17" pos:end="157:17">if <condition pos:start="149:20" pos:end="149:43">(<expr pos:start="149:21" pos:end="149:42"><name pos:start="149:21" pos:end="149:24">size</name> <operator pos:start="149:26" pos:end="149:26">&gt;</operator> <name pos:start="149:28" pos:end="149:42">PCI_EXP_LNKCAP2</name></expr>)</condition> <block pos:start="149:45" pos:end="157:17">{<block_content pos:start="151:21" pos:end="155:79">

                    <expr_stmt pos:start="151:21" pos:end="151:79"><expr pos:start="151:21" pos:end="151:78"><call pos:start="151:21" pos:end="151:78"><name pos:start="151:21" pos:end="151:42">vfio_add_emulated_long</name><argument_list pos:start="151:43" pos:end="151:78">(<argument pos:start="151:44" pos:end="151:47"><expr pos:start="151:44" pos:end="151:47"><name pos:start="151:44" pos:end="151:47">vdev</name></expr></argument>, <argument pos:start="151:50" pos:end="151:70"><expr pos:start="151:50" pos:end="151:70"><name pos:start="151:50" pos:end="151:52">pos</name> <operator pos:start="151:54" pos:end="151:54">+</operator> <name pos:start="151:56" pos:end="151:70">PCI_EXP_LNKCAP2</name></expr></argument>, <argument pos:start="151:73" pos:end="151:73"><expr pos:start="151:73" pos:end="151:73"><literal type="number" pos:start="151:73" pos:end="151:73">0</literal></expr></argument>, <argument pos:start="151:76" pos:end="151:77"><expr pos:start="151:76" pos:end="151:77"><operator pos:start="151:76" pos:end="151:76">~</operator><literal type="number" pos:start="151:77" pos:end="151:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:79"><expr pos:start="153:21" pos:end="153:78"><call pos:start="153:21" pos:end="153:78"><name pos:start="153:21" pos:end="153:42">vfio_add_emulated_word</name><argument_list pos:start="153:43" pos:end="153:78">(<argument pos:start="153:44" pos:end="153:47"><expr pos:start="153:44" pos:end="153:47"><name pos:start="153:44" pos:end="153:47">vdev</name></expr></argument>, <argument pos:start="153:50" pos:end="153:70"><expr pos:start="153:50" pos:end="153:70"><name pos:start="153:50" pos:end="153:52">pos</name> <operator pos:start="153:54" pos:end="153:54">+</operator> <name pos:start="153:56" pos:end="153:70">PCI_EXP_LNKCTL2</name></expr></argument>, <argument pos:start="153:73" pos:end="153:73"><expr pos:start="153:73" pos:end="153:73"><literal type="number" pos:start="153:73" pos:end="153:73">0</literal></expr></argument>, <argument pos:start="153:76" pos:end="153:77"><expr pos:start="153:76" pos:end="153:77"><operator pos:start="153:76" pos:end="153:76">~</operator><literal type="number" pos:start="153:77" pos:end="153:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:79"><expr pos:start="155:21" pos:end="155:78"><call pos:start="155:21" pos:end="155:78"><name pos:start="155:21" pos:end="155:42">vfio_add_emulated_word</name><argument_list pos:start="155:43" pos:end="155:78">(<argument pos:start="155:44" pos:end="155:47"><expr pos:start="155:44" pos:end="155:47"><name pos:start="155:44" pos:end="155:47">vdev</name></expr></argument>, <argument pos:start="155:50" pos:end="155:70"><expr pos:start="155:50" pos:end="155:70"><name pos:start="155:50" pos:end="155:52">pos</name> <operator pos:start="155:54" pos:end="155:54">+</operator> <name pos:start="155:56" pos:end="155:70">PCI_EXP_LNKSTA2</name></expr></argument>, <argument pos:start="155:73" pos:end="155:73"><expr pos:start="155:73" pos:end="155:73"><literal type="number" pos:start="155:73" pos:end="155:73">0</literal></expr></argument>, <argument pos:start="155:76" pos:end="155:77"><expr pos:start="155:76" pos:end="155:77"><operator pos:start="155:76" pos:end="155:76">~</operator><literal type="number" pos:start="155:77" pos:end="155:77">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="163:11" pos:end="175:9">else if <condition pos:start="163:19" pos:end="163:48">(<expr pos:start="163:20" pos:end="163:47"><name pos:start="163:20" pos:end="163:23">type</name> <operator pos:start="163:25" pos:end="163:26">==</operator> <name pos:start="163:28" pos:end="163:47">PCI_EXP_TYPE_LEG_END</name></expr>)</condition> <block pos:start="163:50" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:21">

            <comment type="block" pos:start="165:13" pos:end="171:15">/*

             * Legacy endpoints don't belong on the root complex.  Windows

             * seems to be happier with devices if we skip the capability.

             */</comment>

            <return pos:start="173:13" pos:end="173:21">return <expr pos:start="173:20" pos:end="173:20"><literal type="number" pos:start="173:20" pos:end="173:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if> <else pos:start="179:7" pos:end="217:5">else <block pos:start="179:12" pos:end="217:5">{<block_content pos:start="189:9" pos:end="215:72">

        <comment type="block" pos:start="181:9" pos:end="187:11">/*

         * Convert Root Complex Integrated Endpoints to regular endpoints.

         * These devices don't support LNK/LNK2 capabilities, so make them up.

         */</comment>

        <if_stmt pos:start="189:9" pos:end="203:9"><if pos:start="189:9" pos:end="203:9">if <condition pos:start="189:12" pos:end="189:40">(<expr pos:start="189:13" pos:end="189:39"><name pos:start="189:13" pos:end="189:16">type</name> <operator pos:start="189:18" pos:end="189:19">==</operator> <name pos:start="189:21" pos:end="189:39">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="189:42" pos:end="203:9">{<block_content pos:start="191:13" pos:end="201:70">

            <expr_stmt pos:start="191:13" pos:end="195:55"><expr pos:start="191:13" pos:end="195:54"><call pos:start="191:13" pos:end="195:54"><name pos:start="191:13" pos:end="191:34">vfio_add_emulated_word</name><argument_list pos:start="191:35" pos:end="195:54">(<argument pos:start="191:36" pos:end="191:39"><expr pos:start="191:36" pos:end="191:39"><name pos:start="191:36" pos:end="191:39">vdev</name></expr></argument>, <argument pos:start="191:42" pos:end="191:60"><expr pos:start="191:42" pos:end="191:60"><name pos:start="191:42" pos:end="191:44">pos</name> <operator pos:start="191:46" pos:end="191:46">+</operator> <name pos:start="191:48" pos:end="191:60">PCI_CAP_FLAGS</name></expr></argument>,

                                   <argument pos:start="193:36" pos:end="193:61"><expr pos:start="193:36" pos:end="193:61"><name pos:start="193:36" pos:end="193:56">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="193:58" pos:end="193:59">&lt;&lt;</operator> <literal type="number" pos:start="193:61" pos:end="193:61">4</literal></expr></argument>,

                                   <argument pos:start="195:36" pos:end="195:53"><expr pos:start="195:36" pos:end="195:53"><name pos:start="195:36" pos:end="195:53">PCI_EXP_FLAGS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="199:78"><expr pos:start="197:13" pos:end="199:77"><call pos:start="197:13" pos:end="199:77"><name pos:start="197:13" pos:end="197:34">vfio_add_emulated_long</name><argument_list pos:start="197:35" pos:end="199:77">(<argument pos:start="197:36" pos:end="197:39"><expr pos:start="197:36" pos:end="197:39"><name pos:start="197:36" pos:end="197:39">vdev</name></expr></argument>, <argument pos:start="197:42" pos:end="197:61"><expr pos:start="197:42" pos:end="197:61"><name pos:start="197:42" pos:end="197:44">pos</name> <operator pos:start="197:46" pos:end="197:46">+</operator> <name pos:start="197:48" pos:end="197:61">PCI_EXP_LNKCAP</name></expr></argument>,

                                   <argument pos:start="199:36" pos:end="199:72"><expr pos:start="199:36" pos:end="199:72"><name pos:start="199:36" pos:end="199:52">PCI_EXP_LNK_MLW_1</name> <operator pos:start="199:54" pos:end="199:54">|</operator> <name pos:start="199:56" pos:end="199:72">PCI_EXP_LNK_LS_25</name></expr></argument>, <argument pos:start="199:75" pos:end="199:76"><expr pos:start="199:75" pos:end="199:76"><operator pos:start="199:75" pos:end="199:75">~</operator><literal type="number" pos:start="199:76" pos:end="199:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:70"><expr pos:start="201:13" pos:end="201:69"><call pos:start="201:13" pos:end="201:69"><name pos:start="201:13" pos:end="201:34">vfio_add_emulated_word</name><argument_list pos:start="201:35" pos:end="201:69">(<argument pos:start="201:36" pos:end="201:39"><expr pos:start="201:36" pos:end="201:39"><name pos:start="201:36" pos:end="201:39">vdev</name></expr></argument>, <argument pos:start="201:42" pos:end="201:61"><expr pos:start="201:42" pos:end="201:61"><name pos:start="201:42" pos:end="201:44">pos</name> <operator pos:start="201:46" pos:end="201:46">+</operator> <name pos:start="201:48" pos:end="201:61">PCI_EXP_LNKCTL</name></expr></argument>, <argument pos:start="201:64" pos:end="201:64"><expr pos:start="201:64" pos:end="201:64"><literal type="number" pos:start="201:64" pos:end="201:64">0</literal></expr></argument>, <argument pos:start="201:67" pos:end="201:68"><expr pos:start="201:67" pos:end="201:68"><operator pos:start="201:67" pos:end="201:67">~</operator><literal type="number" pos:start="201:68" pos:end="201:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="207:9" pos:end="207:80">/* Mark the Link Status bits as emulated to allow virtual negotiation */</comment>

        <expr_stmt pos:start="209:9" pos:end="215:72"><expr pos:start="209:9" pos:end="215:71"><call pos:start="209:9" pos:end="215:71"><name pos:start="209:9" pos:end="209:30">vfio_add_emulated_word</name><argument_list pos:start="209:31" pos:end="215:71">(<argument pos:start="209:32" pos:end="209:35"><expr pos:start="209:32" pos:end="209:35"><name pos:start="209:32" pos:end="209:35">vdev</name></expr></argument>, <argument pos:start="209:38" pos:end="209:57"><expr pos:start="209:38" pos:end="209:57"><name pos:start="209:38" pos:end="209:40">pos</name> <operator pos:start="209:42" pos:end="209:42">+</operator> <name pos:start="209:44" pos:end="209:57">PCI_EXP_LNKSTA</name></expr></argument>,

                               <argument pos:start="211:32" pos:end="213:59"><expr pos:start="211:32" pos:end="213:59"><call pos:start="211:32" pos:end="213:59"><name pos:start="211:32" pos:end="211:43">pci_get_word</name><argument_list pos:start="211:44" pos:end="213:59">(<argument pos:start="211:45" pos:end="213:58"><expr pos:start="211:45" pos:end="213:58"><name pos:start="211:45" pos:end="211:61"><name pos:start="211:45" pos:end="211:48">vdev</name><operator pos:start="211:49" pos:end="211:50">-&gt;</operator><name pos:start="211:51" pos:end="211:54">pdev</name><operator pos:start="211:55" pos:end="211:55">.</operator><name pos:start="211:56" pos:end="211:61">config</name></name> <operator pos:start="211:63" pos:end="211:63">+</operator> <name pos:start="211:65" pos:end="211:67">pos</name> <operator pos:start="211:69" pos:end="211:69">+</operator>

                                            <name pos:start="213:45" pos:end="213:58">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="215:32" pos:end="215:70"><expr pos:start="215:32" pos:end="215:70"><name pos:start="215:32" pos:end="215:49">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="215:51" pos:end="215:51">|</operator> <name pos:start="215:53" pos:end="215:70">PCI_EXP_LNKCAP_SLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="233:7">/*

     * Intel 82599 SR-IOV VFs report an invalid PCIe capability version 0

     * (Niantic errate #35) causing Windows to error with a Code 10 for the

     * device on Q35.  Fixup any such devices to report version 1.  If we

     * were to remove the capability entirely the guest would lose extended

     * config space.

     */</comment>

    <if_stmt pos:start="235:5" pos:end="241:5"><if pos:start="235:5" pos:end="241:5">if <condition pos:start="235:8" pos:end="235:42">(<expr pos:start="235:9" pos:end="235:41"><operator pos:start="235:9" pos:end="235:9">(</operator><name pos:start="235:10" pos:end="235:14">flags</name> <operator pos:start="235:16" pos:end="235:16">&amp;</operator> <name pos:start="235:18" pos:end="235:35">PCI_EXP_FLAGS_VERS</name><operator pos:start="235:36" pos:end="235:36">)</operator> <operator pos:start="235:38" pos:end="235:39">==</operator> <literal type="number" pos:start="235:41" pos:end="235:41">0</literal></expr>)</condition> <block pos:start="235:44" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:54">

        <expr_stmt pos:start="237:9" pos:end="239:54"><expr pos:start="237:9" pos:end="239:53"><call pos:start="237:9" pos:end="239:53"><name pos:start="237:9" pos:end="237:30">vfio_add_emulated_word</name><argument_list pos:start="237:31" pos:end="239:53">(<argument pos:start="237:32" pos:end="237:35"><expr pos:start="237:32" pos:end="237:35"><name pos:start="237:32" pos:end="237:35">vdev</name></expr></argument>, <argument pos:start="237:38" pos:end="237:56"><expr pos:start="237:38" pos:end="237:56"><name pos:start="237:38" pos:end="237:40">pos</name> <operator pos:start="237:42" pos:end="237:42">+</operator> <name pos:start="237:44" pos:end="237:56">PCI_CAP_FLAGS</name></expr></argument>,

                               <argument pos:start="239:32" pos:end="239:32"><expr pos:start="239:32" pos:end="239:32"><literal type="number" pos:start="239:32" pos:end="239:32">1</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:52"><expr pos:start="239:35" pos:end="239:52"><name pos:start="239:35" pos:end="239:52">PCI_EXP_FLAGS_VERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="247:35"><expr pos:start="245:5" pos:end="247:34"><name pos:start="245:5" pos:end="245:7">pos</name> <operator pos:start="245:9" pos:end="245:9">=</operator> <call pos:start="245:11" pos:end="247:34"><name pos:start="245:11" pos:end="245:28">pci_add_capability</name><argument_list pos:start="245:29" pos:end="247:34">(<argument pos:start="245:30" pos:end="245:40"><expr pos:start="245:30" pos:end="245:40"><operator pos:start="245:30" pos:end="245:30">&amp;</operator><name pos:start="245:31" pos:end="245:40"><name pos:start="245:31" pos:end="245:34">vdev</name><operator pos:start="245:35" pos:end="245:36">-&gt;</operator><name pos:start="245:37" pos:end="245:40">pdev</name></name></expr></argument>, <argument pos:start="245:43" pos:end="245:56"><expr pos:start="245:43" pos:end="245:56"><name pos:start="245:43" pos:end="245:56">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="245:59" pos:end="245:61"><expr pos:start="245:59" pos:end="245:61"><name pos:start="245:59" pos:end="245:61">pos</name></expr></argument>, <argument pos:start="245:64" pos:end="245:67"><expr pos:start="245:64" pos:end="245:67"><name pos:start="245:64" pos:end="245:67">size</name></expr></argument>,

                             <argument pos:start="247:30" pos:end="247:33"><expr pos:start="247:30" pos:end="247:33"><name pos:start="247:30" pos:end="247:33">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="249:5" pos:end="253:5"><if pos:start="249:5" pos:end="253:5">if <condition pos:start="249:8" pos:end="249:16">(<expr pos:start="249:9" pos:end="249:15"><name pos:start="249:9" pos:end="249:11">pos</name> <operator pos:start="249:13" pos:end="249:13">&lt;</operator> <literal type="number" pos:start="249:15" pos:end="249:15">0</literal></expr>)</condition> <block pos:start="249:18" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:19">

        <return pos:start="251:9" pos:end="251:19">return <expr pos:start="251:16" pos:end="251:18"><name pos:start="251:16" pos:end="251:18">pos</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:33"><expr pos:start="257:5" pos:end="257:32"><name pos:start="257:5" pos:end="257:26"><name pos:start="257:5" pos:end="257:8">vdev</name><operator pos:start="257:9" pos:end="257:10">-&gt;</operator><name pos:start="257:11" pos:end="257:14">pdev</name><operator pos:start="257:15" pos:end="257:15">.</operator><name pos:start="257:16" pos:end="257:18">exp</name><operator pos:start="257:19" pos:end="257:19">.</operator><name pos:start="257:20" pos:end="257:26">exp_cap</name></name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:32">pos</name></expr>;</expr_stmt>



    <return pos:start="261:5" pos:end="261:15">return <expr pos:start="261:12" pos:end="261:14"><name pos:start="261:12" pos:end="261:14">pos</name></expr>;</return>

</block_content>}</block></function>
</unit>
