<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5991.c" pos:tabs="8"><function pos:start="1:1" pos:end="469:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">qtest_process_command</name><parameter_list pos:start="1:34" pos:end="1:70">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:49">CharDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">chr</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:69"><decl pos:start="1:57" pos:end="1:69"><type pos:start="1:57" pos:end="1:69"><name pos:start="1:57" pos:end="1:61">gchar</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">words</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="469:1">{<block_content pos:start="5:5" pos:end="467:5">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:17"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:15">gchar</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:24">command</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><call pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12">g_assert</name><argument_list pos:start="9:13" pos:end="9:19">(<argument pos:start="9:14" pos:end="9:18"><expr pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:18">words</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:11">command</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:22"><name pos:start="13:15" pos:end="13:19">words</name><index pos:start="13:20" pos:end="13:22">[<expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="39:5"><if pos:start="17:5" pos:end="39:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:20">qtest_log_fp</name></expr>)</condition> <block pos:start="17:23" pos:end="39:5">{<block_content pos:start="19:9" pos:end="37:36">

        <decl_stmt pos:start="19:9" pos:end="19:24"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:20">qemu_timeval</name></type> <name pos:start="19:22" pos:end="19:23">tv</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:14"><decl pos:start="21:9" pos:end="21:13"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><call pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:22">qtest_get_time</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><operator pos:start="25:24" pos:end="25:24">&amp;</operator><name pos:start="25:25" pos:end="25:26">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="29:53"><expr pos:start="27:9" pos:end="29:52"><call pos:start="27:9" pos:end="29:52"><name pos:start="27:9" pos:end="27:15">fprintf</name><argument_list pos:start="27:16" pos:end="29:52">(<argument pos:start="27:17" pos:end="27:28"><expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:28">qtest_log_fp</name></expr></argument>, <argument pos:start="27:31" pos:end="27:52"><expr pos:start="27:31" pos:end="27:52"><literal type="string" pos:start="27:31" pos:end="27:36">"[R +"</literal> <name pos:start="27:38" pos:end="27:48">FMT_timeval</name> <literal type="string" pos:start="27:50" pos:end="27:52">"]"</literal></expr></argument>,

                <argument pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:32"><operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:21">long</name><operator pos:start="29:22" pos:end="29:22">)</operator> <name pos:start="29:24" pos:end="29:32"><name pos:start="29:24" pos:end="29:25">tv</name><operator pos:start="29:26" pos:end="29:26">.</operator><name pos:start="29:27" pos:end="29:32">tv_sec</name></name></expr></argument>, <argument pos:start="29:35" pos:end="29:51"><expr pos:start="29:35" pos:end="29:51"><operator pos:start="29:35" pos:end="29:35">(</operator><name pos:start="29:36" pos:end="29:39">long</name><operator pos:start="29:40" pos:end="29:40">)</operator> <name pos:start="29:42" pos:end="29:51"><name pos:start="29:42" pos:end="29:43">tv</name><operator pos:start="29:44" pos:end="29:44">.</operator><name pos:start="29:45" pos:end="29:51">tv_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="31:9" pos:end="35:9">for <control pos:start="31:13" pos:end="31:34">(<init pos:start="31:14" pos:end="31:19"><expr pos:start="31:14" pos:end="31:18"><name pos:start="31:14" pos:end="31:14">i</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <literal type="number" pos:start="31:18" pos:end="31:18">0</literal></expr>;</init> <condition pos:start="31:21" pos:end="31:29"><expr pos:start="31:21" pos:end="31:28"><name pos:start="31:21" pos:end="31:28"><name pos:start="31:21" pos:end="31:25">words</name><index pos:start="31:26" pos:end="31:28">[<expr pos:start="31:27" pos:end="31:27"><name pos:start="31:27" pos:end="31:27">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="31:31" pos:end="31:33"><expr pos:start="31:31" pos:end="31:33"><name pos:start="31:31" pos:end="31:31">i</name><operator pos:start="31:32" pos:end="31:33">++</operator></expr></incr>)</control> <block pos:start="31:36" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:51">

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><call pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:50">(<argument pos:start="33:21" pos:end="33:32"><expr pos:start="33:21" pos:end="33:32"><name pos:start="33:21" pos:end="33:32">qtest_log_fp</name></expr></argument>, <argument pos:start="33:35" pos:end="33:39"><expr pos:start="33:35" pos:end="33:39"><literal type="string" pos:start="33:35" pos:end="33:39">" %s"</literal></expr></argument>, <argument pos:start="33:42" pos:end="33:49"><expr pos:start="33:42" pos:end="33:49"><name pos:start="33:42" pos:end="33:49"><name pos:start="33:42" pos:end="33:46">words</name><index pos:start="33:47" pos:end="33:49">[<expr pos:start="33:48" pos:end="33:48"><name pos:start="33:48" pos:end="33:48">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><call pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:35">(<argument pos:start="37:17" pos:end="37:28"><expr pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:28">qtest_log_fp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><literal type="string" pos:start="37:31" pos:end="37:34">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><call pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:12">g_assert</name><argument_list pos:start="43:13" pos:end="43:21">(<argument pos:start="43:14" pos:end="43:20"><expr pos:start="43:14" pos:end="43:20"><name pos:start="43:14" pos:end="43:20">command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="467:5"><if pos:start="45:5" pos:end="139:5">if <condition pos:start="45:8" pos:end="47:53">(<expr pos:start="45:9" pos:end="47:52"><call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:14">strcmp</name><argument_list pos:start="45:15" pos:end="45:45">(<argument pos:start="45:16" pos:end="45:23"><expr pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:23"><name pos:start="45:16" pos:end="45:20">words</name><index pos:start="45:21" pos:end="45:23">[<expr pos:start="45:22" pos:end="45:22"><literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:26" pos:end="45:44"><expr pos:start="45:26" pos:end="45:44"><literal type="string" pos:start="45:26" pos:end="45:44">"irq_intercept_out"</literal></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:48">==</operator> <literal type="number" pos:start="45:50" pos:end="45:50">0</literal>

        <operator pos:start="47:9" pos:end="47:10">||</operator> <call pos:start="47:12" pos:end="47:47"><name pos:start="47:12" pos:end="47:17">strcmp</name><argument_list pos:start="47:18" pos:end="47:47">(<argument pos:start="47:19" pos:end="47:26"><expr pos:start="47:19" pos:end="47:26"><name pos:start="47:19" pos:end="47:26"><name pos:start="47:19" pos:end="47:23">words</name><index pos:start="47:24" pos:end="47:26">[<expr pos:start="47:25" pos:end="47:25"><literal type="number" pos:start="47:25" pos:end="47:25">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="47:29" pos:end="47:46"><expr pos:start="47:29" pos:end="47:46"><literal type="string" pos:start="47:29" pos:end="47:46">"irq_intercept_in"</literal></expr></argument>)</argument_list></call> <operator pos:start="47:49" pos:end="47:50">==</operator> <literal type="number" pos:start="47:52" pos:end="47:52">0</literal></expr>)</condition> <block pos:start="47:55" pos:end="139:5">{<block_content pos:start="49:9" pos:end="135:32">

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:19">DeviceState</name> <modifier pos:start="49:21" pos:end="49:21">*</modifier></type><name pos:start="49:22" pos:end="49:24">dev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:27"><decl pos:start="51:9" pos:end="51:26"><type pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:21">NamedGPIOList</name> <modifier pos:start="51:23" pos:end="51:23">*</modifier></type><name pos:start="51:24" pos:end="51:26">ngl</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><call pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:16">g_assert</name><argument_list pos:start="55:17" pos:end="55:26">(<argument pos:start="55:18" pos:end="55:25"><expr pos:start="55:18" pos:end="55:25"><name pos:start="55:18" pos:end="55:25"><name pos:start="55:18" pos:end="55:22">words</name><index pos:start="55:23" pos:end="55:25">[<expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:58"><expr pos:start="57:9" pos:end="57:57"><name pos:start="57:9" pos:end="57:11">dev</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:57"><name pos:start="57:15" pos:end="57:20">DEVICE</name><argument_list pos:start="57:21" pos:end="57:57">(<argument pos:start="57:22" pos:end="57:56"><expr pos:start="57:22" pos:end="57:56"><call pos:start="57:22" pos:end="57:56"><name pos:start="57:22" pos:end="57:40">object_resolve_path</name><argument_list pos:start="57:41" pos:end="57:56">(<argument pos:start="57:42" pos:end="57:49"><expr pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:49"><name pos:start="57:42" pos:end="57:46">words</name><index pos:start="57:47" pos:end="57:49">[<expr pos:start="57:48" pos:end="57:48"><literal type="number" pos:start="57:48" pos:end="57:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="57:52" pos:end="57:55"><expr pos:start="57:52" pos:end="57:55"><name pos:start="57:52" pos:end="57:55">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">dev</name></expr>)</condition> <block pos:start="59:19" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:19">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><call pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:29">qtest_send_prefix</name><argument_list pos:start="61:30" pos:end="61:34">(<argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:53"><expr pos:start="63:13" pos:end="63:52"><call pos:start="63:13" pos:end="63:52"><name pos:start="63:13" pos:end="63:22">qtest_send</name><argument_list pos:start="63:23" pos:end="63:52">(<argument pos:start="63:24" pos:end="63:26"><expr pos:start="63:24" pos:end="63:26"><name pos:start="63:24" pos:end="63:26">chr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:51"><expr pos:start="63:29" pos:end="63:51"><literal type="string" pos:start="63:29" pos:end="63:51">"FAIL Unknown device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="71:9" pos:end="87:9"><if pos:start="71:9" pos:end="87:9">if <condition pos:start="71:12" pos:end="71:30">(<expr pos:start="71:13" pos:end="71:29"><name pos:start="71:13" pos:end="71:29">irq_intercept_dev</name></expr>)</condition> <block pos:start="71:32" pos:end="87:9">{<block_content pos:start="73:13" pos:end="85:19">

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><call pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:29">qtest_send_prefix</name><argument_list pos:start="73:30" pos:end="73:34">(<argument pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:33">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="79:13">if <condition pos:start="75:16" pos:end="75:41">(<expr pos:start="75:17" pos:end="75:40"><name pos:start="75:17" pos:end="75:33">irq_intercept_dev</name> <operator pos:start="75:35" pos:end="75:36">!=</operator> <name pos:start="75:38" pos:end="75:40">dev</name></expr>)</condition> <block pos:start="75:43" pos:end="79:13">{<block_content pos:start="77:17" pos:end="77:72">

                <expr_stmt pos:start="77:17" pos:end="77:72"><expr pos:start="77:17" pos:end="77:71"><call pos:start="77:17" pos:end="77:71"><name pos:start="77:17" pos:end="77:26">qtest_send</name><argument_list pos:start="77:27" pos:end="77:71">(<argument pos:start="77:28" pos:end="77:30"><expr pos:start="77:28" pos:end="77:30"><name pos:start="77:28" pos:end="77:30">chr</name></expr></argument>, <argument pos:start="77:33" pos:end="77:70"><expr pos:start="77:33" pos:end="77:70"><literal type="string" pos:start="77:33" pos:end="77:70">"FAIL IRQ intercept already enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="79:15" pos:end="83:13">else <block pos:start="79:20" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:40">

                <expr_stmt pos:start="81:17" pos:end="81:40"><expr pos:start="81:17" pos:end="81:39"><call pos:start="81:17" pos:end="81:39"><name pos:start="81:17" pos:end="81:26">qtest_send</name><argument_list pos:start="81:27" pos:end="81:39">(<argument pos:start="81:28" pos:end="81:30"><expr pos:start="81:28" pos:end="81:30"><name pos:start="81:28" pos:end="81:30">chr</name></expr></argument>, <argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><literal type="string" pos:start="81:33" pos:end="81:38">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

	    <return pos:start="85:13" pos:end="85:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:21">QLIST_FOREACH</name><argument_list pos:start="91:22" pos:end="91:45">(<argument pos:start="91:23" pos:end="91:25">ngl</argument>, <argument pos:start="91:28" pos:end="91:38">&amp;dev-&gt;gpios</argument>, <argument pos:start="91:41" pos:end="91:44">node</argument>)</argument_list></macro> <block pos:start="91:47" pos:end="129:9">{<block_content pos:start="95:13" pos:end="127:13">

            <comment type="block" pos:start="93:13" pos:end="93:63">/* We don't support intercept of named GPIOs yet */</comment>

            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:26">(<expr pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:19">ngl</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:25">name</name></name></expr>)</condition> <block pos:start="95:28" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:25">

                <continue pos:start="97:17" pos:end="97:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="101:13" pos:end="127:13"><if pos:start="101:13" pos:end="121:13">if <condition pos:start="101:16" pos:end="101:36">(<expr pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:28"><name pos:start="101:17" pos:end="101:21">words</name><index pos:start="101:22" pos:end="101:24">[<expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>]</index><index pos:start="101:25" pos:end="101:28">[<expr pos:start="101:26" pos:end="101:27"><literal type="number" pos:start="101:26" pos:end="101:27">14</literal></expr>]</index></name> <operator pos:start="101:30" pos:end="101:31">==</operator> <literal type="char" pos:start="101:33" pos:end="101:35">'o'</literal></expr>)</condition> <block pos:start="101:38" pos:end="121:13">{<block_content pos:start="103:17" pos:end="119:17">

                <decl_stmt pos:start="103:17" pos:end="103:22"><decl pos:start="103:17" pos:end="103:21"><type pos:start="103:17" pos:end="103:19"><name pos:start="103:17" pos:end="103:19">int</name></type> <name pos:start="103:21" pos:end="103:21">i</name></decl>;</decl_stmt>

                <for pos:start="105:17" pos:end="119:17">for <control pos:start="105:21" pos:end="105:50">(<init pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:26"><name pos:start="105:22" pos:end="105:22">i</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr>;</init> <condition pos:start="105:29" pos:end="105:45"><expr pos:start="105:29" pos:end="105:44"><name pos:start="105:29" pos:end="105:29">i</name> <operator pos:start="105:31" pos:end="105:31">&lt;</operator> <name pos:start="105:33" pos:end="105:44"><name pos:start="105:33" pos:end="105:35">ngl</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:44">num_out</name></name></expr>;</condition> <incr pos:start="105:47" pos:end="105:49"><expr pos:start="105:47" pos:end="105:49"><operator pos:start="105:47" pos:end="105:48">++</operator><name pos:start="105:49" pos:end="105:49">i</name></expr></incr>)</control> <block pos:start="105:52" pos:end="119:17">{<block_content pos:start="107:21" pos:end="117:74">

                    <decl_stmt pos:start="107:21" pos:end="107:65"><decl pos:start="107:21" pos:end="107:64"><type pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:28">qemu_irq</name> <modifier pos:start="107:30" pos:end="107:30">*</modifier></type><name pos:start="107:31" pos:end="107:42">disconnected</name> <init pos:start="107:44" pos:end="107:64">= <expr pos:start="107:46" pos:end="107:64"><call pos:start="107:46" pos:end="107:64"><name pos:start="107:46" pos:end="107:51">g_new0</name><argument_list pos:start="107:52" pos:end="107:64">(<argument pos:start="107:53" pos:end="107:60"><expr pos:start="107:53" pos:end="107:60"><name pos:start="107:53" pos:end="107:60">qemu_irq</name></expr></argument>, <argument pos:start="107:63" pos:end="107:63"><expr pos:start="107:63" pos:end="107:63"><literal type="number" pos:start="107:63" pos:end="107:63">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="109:21" pos:end="111:71"><decl pos:start="109:21" pos:end="111:70"><type pos:start="109:21" pos:end="109:28"><name pos:start="109:21" pos:end="109:28">qemu_irq</name></type> <name pos:start="109:30" pos:end="109:33">icpt</name> <init pos:start="109:35" pos:end="111:70">= <expr pos:start="109:37" pos:end="111:70"><call pos:start="109:37" pos:end="111:70"><name pos:start="109:37" pos:end="109:53">qemu_allocate_irq</name><argument_list pos:start="109:54" pos:end="111:70">(<argument pos:start="109:55" pos:end="109:71"><expr pos:start="109:55" pos:end="109:71"><name pos:start="109:55" pos:end="109:71">qtest_irq_handler</name></expr></argument>,

                                                      <argument pos:start="111:55" pos:end="111:66"><expr pos:start="111:55" pos:end="111:66"><name pos:start="111:55" pos:end="111:66">disconnected</name></expr></argument>, <argument pos:start="111:69" pos:end="111:69"><expr pos:start="111:69" pos:end="111:69"><name pos:start="111:69" pos:end="111:69">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="115:21" pos:end="117:74"><expr pos:start="115:21" pos:end="117:73"><operator pos:start="115:21" pos:end="115:21">*</operator><name pos:start="115:22" pos:end="115:33">disconnected</name> <operator pos:start="115:35" pos:end="115:35">=</operator> <call pos:start="115:37" pos:end="117:73"><name pos:start="115:37" pos:end="115:59">qdev_intercept_gpio_out</name><argument_list pos:start="115:60" pos:end="117:73">(<argument pos:start="115:61" pos:end="115:63"><expr pos:start="115:61" pos:end="115:63"><name pos:start="115:61" pos:end="115:63">dev</name></expr></argument>, <argument pos:start="115:66" pos:end="115:69"><expr pos:start="115:66" pos:end="115:69"><name pos:start="115:66" pos:end="115:69">icpt</name></expr></argument>,

                                                            <argument pos:start="117:61" pos:end="117:69"><expr pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:63">ngl</name><operator pos:start="117:64" pos:end="117:65">-&gt;</operator><name pos:start="117:66" pos:end="117:69">name</name></name></expr></argument>, <argument pos:start="117:72" pos:end="117:72"><expr pos:start="117:72" pos:end="117:72"><name pos:start="117:72" pos:end="117:72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="121:15" pos:end="127:13">else <block pos:start="121:20" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:51">

                <expr_stmt pos:start="123:17" pos:end="125:51"><expr pos:start="123:17" pos:end="125:50"><call pos:start="123:17" pos:end="125:50"><name pos:start="123:17" pos:end="123:37">qemu_irq_intercept_in</name><argument_list pos:start="123:38" pos:end="125:50">(<argument pos:start="123:39" pos:end="123:45"><expr pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:45"><name pos:start="123:39" pos:end="123:41">ngl</name><operator pos:start="123:42" pos:end="123:43">-&gt;</operator><name pos:start="123:44" pos:end="123:45">in</name></name></expr></argument>, <argument pos:start="123:48" pos:end="123:64"><expr pos:start="123:48" pos:end="123:64"><name pos:start="123:48" pos:end="123:64">qtest_irq_handler</name></expr></argument>,

                                      <argument pos:start="125:39" pos:end="125:49"><expr pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:41">ngl</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:49">num_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="131:9" pos:end="131:32"><expr pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:25">irq_intercept_dev</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:31">dev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:31"><expr pos:start="133:9" pos:end="133:30"><call pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:25">qtest_send_prefix</name><argument_list pos:start="133:26" pos:end="133:30">(<argument pos:start="133:27" pos:end="133:29"><expr pos:start="133:27" pos:end="133:29"><name pos:start="133:27" pos:end="133:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><call pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:18">qtest_send</name><argument_list pos:start="135:19" pos:end="135:31">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">chr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:30"><expr pos:start="135:25" pos:end="135:30"><literal type="string" pos:start="135:25" pos:end="135:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="177:5">else if <condition pos:start="139:15" pos:end="143:45">(<expr pos:start="139:16" pos:end="143:44"><call pos:start="139:16" pos:end="139:39"><name pos:start="139:16" pos:end="139:21">strcmp</name><argument_list pos:start="139:22" pos:end="139:39">(<argument pos:start="139:23" pos:end="139:30"><expr pos:start="139:23" pos:end="139:30"><name pos:start="139:23" pos:end="139:30"><name pos:start="139:23" pos:end="139:27">words</name><index pos:start="139:28" pos:end="139:30">[<expr pos:start="139:29" pos:end="139:29"><literal type="number" pos:start="139:29" pos:end="139:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:33" pos:end="139:38"><expr pos:start="139:33" pos:end="139:38"><literal type="string" pos:start="139:33" pos:end="139:38">"outb"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:41" pos:end="139:42">==</operator> <literal type="number" pos:start="139:44" pos:end="139:44">0</literal> <operator pos:start="139:46" pos:end="139:47">||</operator>

               <call pos:start="141:16" pos:end="141:39"><name pos:start="141:16" pos:end="141:21">strcmp</name><argument_list pos:start="141:22" pos:end="141:39">(<argument pos:start="141:23" pos:end="141:30"><expr pos:start="141:23" pos:end="141:30"><name pos:start="141:23" pos:end="141:30"><name pos:start="141:23" pos:end="141:27">words</name><index pos:start="141:28" pos:end="141:30">[<expr pos:start="141:29" pos:end="141:29"><literal type="number" pos:start="141:29" pos:end="141:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:33" pos:end="141:38"><expr pos:start="141:33" pos:end="141:38"><literal type="string" pos:start="141:33" pos:end="141:38">"outw"</literal></expr></argument>)</argument_list></call> <operator pos:start="141:41" pos:end="141:42">==</operator> <literal type="number" pos:start="141:44" pos:end="141:44">0</literal> <operator pos:start="141:46" pos:end="141:47">||</operator>

               <call pos:start="143:16" pos:end="143:39"><name pos:start="143:16" pos:end="143:21">strcmp</name><argument_list pos:start="143:22" pos:end="143:39">(<argument pos:start="143:23" pos:end="143:30"><expr pos:start="143:23" pos:end="143:30"><name pos:start="143:23" pos:end="143:30"><name pos:start="143:23" pos:end="143:27">words</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:33" pos:end="143:38"><expr pos:start="143:33" pos:end="143:38"><literal type="string" pos:start="143:33" pos:end="143:38">"outl"</literal></expr></argument>)</argument_list></call> <operator pos:start="143:41" pos:end="143:42">==</operator> <literal type="number" pos:start="143:44" pos:end="143:44">0</literal></expr>)</condition> <block pos:start="143:47" pos:end="177:5">{<block_content pos:start="145:9" pos:end="175:32">

        <decl_stmt pos:start="145:9" pos:end="145:22"><decl pos:start="145:9" pos:end="145:21"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint16_t</name></type> <name pos:start="145:18" pos:end="145:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:23"><decl pos:start="147:9" pos:end="147:22"><type pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">uint32_t</name></type> <name pos:start="147:18" pos:end="147:22">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:39"><expr pos:start="151:9" pos:end="151:38"><call pos:start="151:9" pos:end="151:38"><name pos:start="151:9" pos:end="151:16">g_assert</name><argument_list pos:start="151:17" pos:end="151:38">(<argument pos:start="151:18" pos:end="151:37"><expr pos:start="151:18" pos:end="151:37"><name pos:start="151:18" pos:end="151:25"><name pos:start="151:18" pos:end="151:22">words</name><index pos:start="151:23" pos:end="151:25">[<expr pos:start="151:24" pos:end="151:24"><literal type="number" pos:start="151:24" pos:end="151:24">1</literal></expr>]</index></name> <operator pos:start="151:27" pos:end="151:28">&amp;&amp;</operator> <name pos:start="151:30" pos:end="151:37"><name pos:start="151:30" pos:end="151:34">words</name><index pos:start="151:35" pos:end="151:37">[<expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:42"><expr pos:start="153:9" pos:end="153:41"><name pos:start="153:9" pos:end="153:12">addr</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:41"><name pos:start="153:16" pos:end="153:22">strtoul</name><argument_list pos:start="153:23" pos:end="153:41">(<argument pos:start="153:24" pos:end="153:31"><expr pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:31"><name pos:start="153:24" pos:end="153:28">words</name><index pos:start="153:29" pos:end="153:31">[<expr pos:start="153:30" pos:end="153:30"><literal type="number" pos:start="153:30" pos:end="153:30">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:34" pos:end="153:37"><expr pos:start="153:34" pos:end="153:37"><name pos:start="153:34" pos:end="153:37">NULL</name></expr></argument>, <argument pos:start="153:40" pos:end="153:40"><expr pos:start="153:40" pos:end="153:40"><literal type="number" pos:start="153:40" pos:end="153:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:43"><expr pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:13">value</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <call pos:start="155:17" pos:end="155:42"><name pos:start="155:17" pos:end="155:23">strtoul</name><argument_list pos:start="155:24" pos:end="155:42">(<argument pos:start="155:25" pos:end="155:32"><expr pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:29">words</name><index pos:start="155:30" pos:end="155:32">[<expr pos:start="155:31" pos:end="155:31"><literal type="number" pos:start="155:31" pos:end="155:31">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:35" pos:end="155:38"><expr pos:start="155:35" pos:end="155:38"><name pos:start="155:35" pos:end="155:38">NULL</name></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="159:9" pos:end="171:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:31">(<expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:17">words</name><index pos:start="159:18" pos:end="159:20">[<expr pos:start="159:19" pos:end="159:19"><literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>]</index><index pos:start="159:21" pos:end="159:23">[<expr pos:start="159:22" pos:end="159:22"><literal type="number" pos:start="159:22" pos:end="159:22">3</literal></expr>]</index></name> <operator pos:start="159:25" pos:end="159:26">==</operator> <literal type="char" pos:start="159:28" pos:end="159:30">'b'</literal></expr>)</condition> <block pos:start="159:33" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:34">

            <expr_stmt pos:start="161:13" pos:end="161:34"><expr pos:start="161:13" pos:end="161:33"><call pos:start="161:13" pos:end="161:33"><name pos:start="161:13" pos:end="161:20">cpu_outb</name><argument_list pos:start="161:21" pos:end="161:33">(<argument pos:start="161:22" pos:end="161:25"><expr pos:start="161:22" pos:end="161:25"><name pos:start="161:22" pos:end="161:25">addr</name></expr></argument>, <argument pos:start="161:28" pos:end="161:32"><expr pos:start="161:28" pos:end="161:32"><name pos:start="161:28" pos:end="161:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="163:11" pos:end="167:9">else if <condition pos:start="163:19" pos:end="163:38">(<expr pos:start="163:20" pos:end="163:37"><name pos:start="163:20" pos:end="163:30"><name pos:start="163:20" pos:end="163:24">words</name><index pos:start="163:25" pos:end="163:27">[<expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr>]</index><index pos:start="163:28" pos:end="163:30">[<expr pos:start="163:29" pos:end="163:29"><literal type="number" pos:start="163:29" pos:end="163:29">3</literal></expr>]</index></name> <operator pos:start="163:32" pos:end="163:33">==</operator> <literal type="char" pos:start="163:35" pos:end="163:37">'w'</literal></expr>)</condition> <block pos:start="163:40" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:34">

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><call pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:20">cpu_outw</name><argument_list pos:start="165:21" pos:end="165:33">(<argument pos:start="165:22" pos:end="165:25"><expr pos:start="165:22" pos:end="165:25"><name pos:start="165:22" pos:end="165:25">addr</name></expr></argument>, <argument pos:start="165:28" pos:end="165:32"><expr pos:start="165:28" pos:end="165:32"><name pos:start="165:28" pos:end="165:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="171:9">else if <condition pos:start="167:19" pos:end="167:38">(<expr pos:start="167:20" pos:end="167:37"><name pos:start="167:20" pos:end="167:30"><name pos:start="167:20" pos:end="167:24">words</name><index pos:start="167:25" pos:end="167:27">[<expr pos:start="167:26" pos:end="167:26"><literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>]</index><index pos:start="167:28" pos:end="167:30">[<expr pos:start="167:29" pos:end="167:29"><literal type="number" pos:start="167:29" pos:end="167:29">3</literal></expr>]</index></name> <operator pos:start="167:32" pos:end="167:33">==</operator> <literal type="char" pos:start="167:35" pos:end="167:37">'l'</literal></expr>)</condition> <block pos:start="167:40" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:34">

            <expr_stmt pos:start="169:13" pos:end="169:34"><expr pos:start="169:13" pos:end="169:33"><call pos:start="169:13" pos:end="169:33"><name pos:start="169:13" pos:end="169:20">cpu_outl</name><argument_list pos:start="169:21" pos:end="169:33">(<argument pos:start="169:22" pos:end="169:25"><expr pos:start="169:22" pos:end="169:25"><name pos:start="169:22" pos:end="169:25">addr</name></expr></argument>, <argument pos:start="169:28" pos:end="169:32"><expr pos:start="169:28" pos:end="169:32"><name pos:start="169:28" pos:end="169:32">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:31"><expr pos:start="173:9" pos:end="173:30"><call pos:start="173:9" pos:end="173:30"><name pos:start="173:9" pos:end="173:25">qtest_send_prefix</name><argument_list pos:start="173:26" pos:end="173:30">(<argument pos:start="173:27" pos:end="173:29"><expr pos:start="173:27" pos:end="173:29"><name pos:start="173:27" pos:end="173:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:32"><expr pos:start="175:9" pos:end="175:31"><call pos:start="175:9" pos:end="175:31"><name pos:start="175:9" pos:end="175:18">qtest_send</name><argument_list pos:start="175:19" pos:end="175:31">(<argument pos:start="175:20" pos:end="175:22"><expr pos:start="175:20" pos:end="175:22"><name pos:start="175:20" pos:end="175:22">chr</name></expr></argument>, <argument pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:30"><literal type="string" pos:start="175:25" pos:end="175:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="177:7" pos:end="213:5">else if <condition pos:start="177:15" pos:end="181:37">(<expr pos:start="177:16" pos:end="181:36"><call pos:start="177:16" pos:end="177:38"><name pos:start="177:16" pos:end="177:21">strcmp</name><argument_list pos:start="177:22" pos:end="177:38">(<argument pos:start="177:23" pos:end="177:30"><expr pos:start="177:23" pos:end="177:30"><name pos:start="177:23" pos:end="177:30"><name pos:start="177:23" pos:end="177:27">words</name><index pos:start="177:28" pos:end="177:30">[<expr pos:start="177:29" pos:end="177:29"><literal type="number" pos:start="177:29" pos:end="177:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="177:33" pos:end="177:37"><expr pos:start="177:33" pos:end="177:37"><literal type="string" pos:start="177:33" pos:end="177:37">"inb"</literal></expr></argument>)</argument_list></call> <operator pos:start="177:40" pos:end="177:41">==</operator> <literal type="number" pos:start="177:43" pos:end="177:43">0</literal> <operator pos:start="177:45" pos:end="177:46">||</operator>

        <call pos:start="179:9" pos:end="179:31"><name pos:start="179:9" pos:end="179:14">strcmp</name><argument_list pos:start="179:15" pos:end="179:31">(<argument pos:start="179:16" pos:end="179:23"><expr pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:20">words</name><index pos:start="179:21" pos:end="179:23">[<expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="179:26" pos:end="179:30"><expr pos:start="179:26" pos:end="179:30"><literal type="string" pos:start="179:26" pos:end="179:30">"inw"</literal></expr></argument>)</argument_list></call> <operator pos:start="179:33" pos:end="179:34">==</operator> <literal type="number" pos:start="179:36" pos:end="179:36">0</literal> <operator pos:start="179:38" pos:end="179:39">||</operator>

        <call pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:14">strcmp</name><argument_list pos:start="181:15" pos:end="181:31">(<argument pos:start="181:16" pos:end="181:23"><expr pos:start="181:16" pos:end="181:23"><name pos:start="181:16" pos:end="181:23"><name pos:start="181:16" pos:end="181:20">words</name><index pos:start="181:21" pos:end="181:23">[<expr pos:start="181:22" pos:end="181:22"><literal type="number" pos:start="181:22" pos:end="181:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:26" pos:end="181:30"><expr pos:start="181:26" pos:end="181:30"><literal type="string" pos:start="181:26" pos:end="181:30">"inl"</literal></expr></argument>)</argument_list></call> <operator pos:start="181:33" pos:end="181:34">==</operator> <literal type="number" pos:start="181:36" pos:end="181:36">0</literal></expr>)</condition> <block pos:start="181:39" pos:end="213:5">{<block_content pos:start="183:9" pos:end="211:46">

        <decl_stmt pos:start="183:9" pos:end="183:22"><decl pos:start="183:9" pos:end="183:21"><type pos:start="183:9" pos:end="183:16"><name pos:start="183:9" pos:end="183:16">uint16_t</name></type> <name pos:start="183:18" pos:end="183:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:29"><decl pos:start="185:9" pos:end="185:28"><type pos:start="185:9" pos:end="185:16"><name pos:start="185:9" pos:end="185:16">uint32_t</name></type> <name pos:start="185:18" pos:end="185:22">value</name> <init pos:start="185:24" pos:end="185:28">= <expr pos:start="185:26" pos:end="185:28"><operator pos:start="185:26" pos:end="185:26">-</operator><literal type="number" pos:start="185:27" pos:end="185:28">1U</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:27"><expr pos:start="189:9" pos:end="189:26"><call pos:start="189:9" pos:end="189:26"><name pos:start="189:9" pos:end="189:16">g_assert</name><argument_list pos:start="189:17" pos:end="189:26">(<argument pos:start="189:18" pos:end="189:25"><expr pos:start="189:18" pos:end="189:25"><name pos:start="189:18" pos:end="189:25"><name pos:start="189:18" pos:end="189:22">words</name><index pos:start="189:23" pos:end="189:25">[<expr pos:start="189:24" pos:end="189:24"><literal type="number" pos:start="189:24" pos:end="189:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:42"><expr pos:start="191:9" pos:end="191:41"><name pos:start="191:9" pos:end="191:12">addr</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:41"><name pos:start="191:16" pos:end="191:22">strtoul</name><argument_list pos:start="191:23" pos:end="191:41">(<argument pos:start="191:24" pos:end="191:31"><expr pos:start="191:24" pos:end="191:31"><name pos:start="191:24" pos:end="191:31"><name pos:start="191:24" pos:end="191:28">words</name><index pos:start="191:29" pos:end="191:31">[<expr pos:start="191:30" pos:end="191:30"><literal type="number" pos:start="191:30" pos:end="191:30">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="191:34" pos:end="191:37"><expr pos:start="191:34" pos:end="191:37"><name pos:start="191:34" pos:end="191:37">NULL</name></expr></argument>, <argument pos:start="191:40" pos:end="191:40"><expr pos:start="191:40" pos:end="191:40"><literal type="number" pos:start="191:40" pos:end="191:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="195:9" pos:end="207:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:31">(<expr pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:17">words</name><index pos:start="195:18" pos:end="195:20">[<expr pos:start="195:19" pos:end="195:19"><literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>]</index><index pos:start="195:21" pos:end="195:23">[<expr pos:start="195:22" pos:end="195:22"><literal type="number" pos:start="195:22" pos:end="195:22">2</literal></expr>]</index></name> <operator pos:start="195:25" pos:end="195:26">==</operator> <literal type="char" pos:start="195:28" pos:end="195:30">'b'</literal></expr>)</condition> <block pos:start="195:33" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:34">

            <expr_stmt pos:start="197:13" pos:end="197:34"><expr pos:start="197:13" pos:end="197:33"><name pos:start="197:13" pos:end="197:17">value</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <call pos:start="197:21" pos:end="197:33"><name pos:start="197:21" pos:end="197:27">cpu_inb</name><argument_list pos:start="197:28" pos:end="197:33">(<argument pos:start="197:29" pos:end="197:32"><expr pos:start="197:29" pos:end="197:32"><name pos:start="197:29" pos:end="197:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="203:9">else if <condition pos:start="199:19" pos:end="199:38">(<expr pos:start="199:20" pos:end="199:37"><name pos:start="199:20" pos:end="199:30"><name pos:start="199:20" pos:end="199:24">words</name><index pos:start="199:25" pos:end="199:27">[<expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">0</literal></expr>]</index><index pos:start="199:28" pos:end="199:30">[<expr pos:start="199:29" pos:end="199:29"><literal type="number" pos:start="199:29" pos:end="199:29">2</literal></expr>]</index></name> <operator pos:start="199:32" pos:end="199:33">==</operator> <literal type="char" pos:start="199:35" pos:end="199:37">'w'</literal></expr>)</condition> <block pos:start="199:40" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:34">

            <expr_stmt pos:start="201:13" pos:end="201:34"><expr pos:start="201:13" pos:end="201:33"><name pos:start="201:13" pos:end="201:17">value</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <call pos:start="201:21" pos:end="201:33"><name pos:start="201:21" pos:end="201:27">cpu_inw</name><argument_list pos:start="201:28" pos:end="201:33">(<argument pos:start="201:29" pos:end="201:32"><expr pos:start="201:29" pos:end="201:32"><name pos:start="201:29" pos:end="201:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="203:11" pos:end="207:9">else if <condition pos:start="203:19" pos:end="203:38">(<expr pos:start="203:20" pos:end="203:37"><name pos:start="203:20" pos:end="203:30"><name pos:start="203:20" pos:end="203:24">words</name><index pos:start="203:25" pos:end="203:27">[<expr pos:start="203:26" pos:end="203:26"><literal type="number" pos:start="203:26" pos:end="203:26">0</literal></expr>]</index><index pos:start="203:28" pos:end="203:30">[<expr pos:start="203:29" pos:end="203:29"><literal type="number" pos:start="203:29" pos:end="203:29">2</literal></expr>]</index></name> <operator pos:start="203:32" pos:end="203:33">==</operator> <literal type="char" pos:start="203:35" pos:end="203:37">'l'</literal></expr>)</condition> <block pos:start="203:40" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:34">

            <expr_stmt pos:start="205:13" pos:end="205:34"><expr pos:start="205:13" pos:end="205:33"><name pos:start="205:13" pos:end="205:17">value</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <call pos:start="205:21" pos:end="205:33"><name pos:start="205:21" pos:end="205:27">cpu_inl</name><argument_list pos:start="205:28" pos:end="205:33">(<argument pos:start="205:29" pos:end="205:32"><expr pos:start="205:29" pos:end="205:32"><name pos:start="205:29" pos:end="205:32">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:31"><expr pos:start="209:9" pos:end="209:30"><call pos:start="209:9" pos:end="209:30"><name pos:start="209:9" pos:end="209:25">qtest_send_prefix</name><argument_list pos:start="209:26" pos:end="209:30">(<argument pos:start="209:27" pos:end="209:29"><expr pos:start="209:27" pos:end="209:29"><name pos:start="209:27" pos:end="209:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:46"><expr pos:start="211:9" pos:end="211:45"><call pos:start="211:9" pos:end="211:45"><name pos:start="211:9" pos:end="211:18">qtest_send</name><argument_list pos:start="211:19" pos:end="211:45">(<argument pos:start="211:20" pos:end="211:22"><expr pos:start="211:20" pos:end="211:22"><name pos:start="211:20" pos:end="211:22">chr</name></expr></argument>, <argument pos:start="211:25" pos:end="211:37"><expr pos:start="211:25" pos:end="211:37"><literal type="string" pos:start="211:25" pos:end="211:37">"OK 0x%04x\n"</literal></expr></argument>, <argument pos:start="211:40" pos:end="211:44"><expr pos:start="211:40" pos:end="211:44"><name pos:start="211:40" pos:end="211:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="213:7" pos:end="271:5">else if <condition pos:start="213:15" pos:end="219:47">(<expr pos:start="213:16" pos:end="219:46"><call pos:start="213:16" pos:end="213:41"><name pos:start="213:16" pos:end="213:21">strcmp</name><argument_list pos:start="213:22" pos:end="213:41">(<argument pos:start="213:23" pos:end="213:30"><expr pos:start="213:23" pos:end="213:30"><name pos:start="213:23" pos:end="213:30"><name pos:start="213:23" pos:end="213:27">words</name><index pos:start="213:28" pos:end="213:30">[<expr pos:start="213:29" pos:end="213:29"><literal type="number" pos:start="213:29" pos:end="213:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="213:33" pos:end="213:40"><expr pos:start="213:33" pos:end="213:40"><literal type="string" pos:start="213:33" pos:end="213:40">"writeb"</literal></expr></argument>)</argument_list></call> <operator pos:start="213:43" pos:end="213:44">==</operator> <literal type="number" pos:start="213:46" pos:end="213:46">0</literal> <operator pos:start="213:48" pos:end="213:49">||</operator>

               <call pos:start="215:16" pos:end="215:41"><name pos:start="215:16" pos:end="215:21">strcmp</name><argument_list pos:start="215:22" pos:end="215:41">(<argument pos:start="215:23" pos:end="215:30"><expr pos:start="215:23" pos:end="215:30"><name pos:start="215:23" pos:end="215:30"><name pos:start="215:23" pos:end="215:27">words</name><index pos:start="215:28" pos:end="215:30">[<expr pos:start="215:29" pos:end="215:29"><literal type="number" pos:start="215:29" pos:end="215:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="215:33" pos:end="215:40"><expr pos:start="215:33" pos:end="215:40"><literal type="string" pos:start="215:33" pos:end="215:40">"writew"</literal></expr></argument>)</argument_list></call> <operator pos:start="215:43" pos:end="215:44">==</operator> <literal type="number" pos:start="215:46" pos:end="215:46">0</literal> <operator pos:start="215:48" pos:end="215:49">||</operator>

               <call pos:start="217:16" pos:end="217:41"><name pos:start="217:16" pos:end="217:21">strcmp</name><argument_list pos:start="217:22" pos:end="217:41">(<argument pos:start="217:23" pos:end="217:30"><expr pos:start="217:23" pos:end="217:30"><name pos:start="217:23" pos:end="217:30"><name pos:start="217:23" pos:end="217:27">words</name><index pos:start="217:28" pos:end="217:30">[<expr pos:start="217:29" pos:end="217:29"><literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="217:33" pos:end="217:40"><expr pos:start="217:33" pos:end="217:40"><literal type="string" pos:start="217:33" pos:end="217:40">"writel"</literal></expr></argument>)</argument_list></call> <operator pos:start="217:43" pos:end="217:44">==</operator> <literal type="number" pos:start="217:46" pos:end="217:46">0</literal> <operator pos:start="217:48" pos:end="217:49">||</operator>

               <call pos:start="219:16" pos:end="219:41"><name pos:start="219:16" pos:end="219:21">strcmp</name><argument_list pos:start="219:22" pos:end="219:41">(<argument pos:start="219:23" pos:end="219:30"><expr pos:start="219:23" pos:end="219:30"><name pos:start="219:23" pos:end="219:30"><name pos:start="219:23" pos:end="219:27">words</name><index pos:start="219:28" pos:end="219:30">[<expr pos:start="219:29" pos:end="219:29"><literal type="number" pos:start="219:29" pos:end="219:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="219:33" pos:end="219:40"><expr pos:start="219:33" pos:end="219:40"><literal type="string" pos:start="219:33" pos:end="219:40">"writeq"</literal></expr></argument>)</argument_list></call> <operator pos:start="219:43" pos:end="219:44">==</operator> <literal type="number" pos:start="219:46" pos:end="219:46">0</literal></expr>)</condition> <block pos:start="219:49" pos:end="271:5">{<block_content pos:start="221:9" pos:end="269:32">

        <decl_stmt pos:start="221:9" pos:end="221:22"><decl pos:start="221:9" pos:end="221:21"><type pos:start="221:9" pos:end="221:16"><name pos:start="221:9" pos:end="221:16">uint64_t</name></type> <name pos:start="221:18" pos:end="221:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:23"><decl pos:start="223:9" pos:end="223:22"><type pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16">uint64_t</name></type> <name pos:start="223:18" pos:end="223:22">value</name></decl>;</decl_stmt>



        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><call pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:16">g_assert</name><argument_list pos:start="227:17" pos:end="227:38">(<argument pos:start="227:18" pos:end="227:37"><expr pos:start="227:18" pos:end="227:37"><name pos:start="227:18" pos:end="227:25"><name pos:start="227:18" pos:end="227:22">words</name><index pos:start="227:23" pos:end="227:25">[<expr pos:start="227:24" pos:end="227:24"><literal type="number" pos:start="227:24" pos:end="227:24">1</literal></expr>]</index></name> <operator pos:start="227:27" pos:end="227:28">&amp;&amp;</operator> <name pos:start="227:30" pos:end="227:37"><name pos:start="227:30" pos:end="227:34">words</name><index pos:start="227:35" pos:end="227:37">[<expr pos:start="227:36" pos:end="227:36"><literal type="number" pos:start="227:36" pos:end="227:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:43"><expr pos:start="229:9" pos:end="229:42"><name pos:start="229:9" pos:end="229:12">addr</name> <operator pos:start="229:14" pos:end="229:14">=</operator> <call pos:start="229:16" pos:end="229:42"><name pos:start="229:16" pos:end="229:23">strtoull</name><argument_list pos:start="229:24" pos:end="229:42">(<argument pos:start="229:25" pos:end="229:32"><expr pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:29">words</name><index pos:start="229:30" pos:end="229:32">[<expr pos:start="229:31" pos:end="229:31"><literal type="number" pos:start="229:31" pos:end="229:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="229:35" pos:end="229:38"><expr pos:start="229:35" pos:end="229:38"><name pos:start="229:35" pos:end="229:38">NULL</name></expr></argument>, <argument pos:start="229:41" pos:end="229:41"><expr pos:start="229:41" pos:end="229:41"><literal type="number" pos:start="229:41" pos:end="229:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:44"><expr pos:start="231:9" pos:end="231:43"><name pos:start="231:9" pos:end="231:13">value</name> <operator pos:start="231:15" pos:end="231:15">=</operator> <call pos:start="231:17" pos:end="231:43"><name pos:start="231:17" pos:end="231:24">strtoull</name><argument_list pos:start="231:25" pos:end="231:43">(<argument pos:start="231:26" pos:end="231:33"><expr pos:start="231:26" pos:end="231:33"><name pos:start="231:26" pos:end="231:33"><name pos:start="231:26" pos:end="231:30">words</name><index pos:start="231:31" pos:end="231:33">[<expr pos:start="231:32" pos:end="231:32"><literal type="number" pos:start="231:32" pos:end="231:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="231:36" pos:end="231:39"><expr pos:start="231:36" pos:end="231:39"><name pos:start="231:36" pos:end="231:39">NULL</name></expr></argument>, <argument pos:start="231:42" pos:end="231:42"><expr pos:start="231:42" pos:end="231:42"><literal type="number" pos:start="231:42" pos:end="231:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="235:9" pos:end="265:9"><if pos:start="235:9" pos:end="241:9">if <condition pos:start="235:12" pos:end="235:31">(<expr pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:23"><name pos:start="235:13" pos:end="235:17">words</name><index pos:start="235:18" pos:end="235:20">[<expr pos:start="235:19" pos:end="235:19"><literal type="number" pos:start="235:19" pos:end="235:19">0</literal></expr>]</index><index pos:start="235:21" pos:end="235:23">[<expr pos:start="235:22" pos:end="235:22"><literal type="number" pos:start="235:22" pos:end="235:22">5</literal></expr>]</index></name> <operator pos:start="235:25" pos:end="235:26">==</operator> <literal type="char" pos:start="235:28" pos:end="235:30">'b'</literal></expr>)</condition> <block pos:start="235:33" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:54">

            <decl_stmt pos:start="237:13" pos:end="237:33"><decl pos:start="237:13" pos:end="237:32"><type pos:start="237:13" pos:end="237:19"><name pos:start="237:13" pos:end="237:19">uint8_t</name></type> <name pos:start="237:21" pos:end="237:24">data</name> <init pos:start="237:26" pos:end="237:32">= <expr pos:start="237:28" pos:end="237:32"><name pos:start="237:28" pos:end="237:32">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:54"><expr pos:start="239:13" pos:end="239:53"><call pos:start="239:13" pos:end="239:53"><name pos:start="239:13" pos:end="239:37">cpu_physical_memory_write</name><argument_list pos:start="239:38" pos:end="239:53">(<argument pos:start="239:39" pos:end="239:42"><expr pos:start="239:39" pos:end="239:42"><name pos:start="239:39" pos:end="239:42">addr</name></expr></argument>, <argument pos:start="239:45" pos:end="239:49"><expr pos:start="239:45" pos:end="239:49"><operator pos:start="239:45" pos:end="239:45">&amp;</operator><name pos:start="239:46" pos:end="239:49">data</name></expr></argument>, <argument pos:start="239:52" pos:end="239:52"><expr pos:start="239:52" pos:end="239:52"><literal type="number" pos:start="239:52" pos:end="239:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="241:11" pos:end="249:9">else if <condition pos:start="241:19" pos:end="241:38">(<expr pos:start="241:20" pos:end="241:37"><name pos:start="241:20" pos:end="241:30"><name pos:start="241:20" pos:end="241:24">words</name><index pos:start="241:25" pos:end="241:27">[<expr pos:start="241:26" pos:end="241:26"><literal type="number" pos:start="241:26" pos:end="241:26">0</literal></expr>]</index><index pos:start="241:28" pos:end="241:30">[<expr pos:start="241:29" pos:end="241:29"><literal type="number" pos:start="241:29" pos:end="241:29">5</literal></expr>]</index></name> <operator pos:start="241:32" pos:end="241:33">==</operator> <literal type="char" pos:start="241:35" pos:end="241:37">'w'</literal></expr>)</condition> <block pos:start="241:40" pos:end="249:9">{<block_content pos:start="243:13" pos:end="247:54">

            <decl_stmt pos:start="243:13" pos:end="243:34"><decl pos:start="243:13" pos:end="243:33"><type pos:start="243:13" pos:end="243:20"><name pos:start="243:13" pos:end="243:20">uint16_t</name></type> <name pos:start="243:22" pos:end="243:25">data</name> <init pos:start="243:27" pos:end="243:33">= <expr pos:start="243:29" pos:end="243:33"><name pos:start="243:29" pos:end="243:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:28"><expr pos:start="245:13" pos:end="245:27"><call pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:20">tswap16s</name><argument_list pos:start="245:21" pos:end="245:27">(<argument pos:start="245:22" pos:end="245:26"><expr pos:start="245:22" pos:end="245:26"><operator pos:start="245:22" pos:end="245:22">&amp;</operator><name pos:start="245:23" pos:end="245:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:54"><expr pos:start="247:13" pos:end="247:53"><call pos:start="247:13" pos:end="247:53"><name pos:start="247:13" pos:end="247:37">cpu_physical_memory_write</name><argument_list pos:start="247:38" pos:end="247:53">(<argument pos:start="247:39" pos:end="247:42"><expr pos:start="247:39" pos:end="247:42"><name pos:start="247:39" pos:end="247:42">addr</name></expr></argument>, <argument pos:start="247:45" pos:end="247:49"><expr pos:start="247:45" pos:end="247:49"><operator pos:start="247:45" pos:end="247:45">&amp;</operator><name pos:start="247:46" pos:end="247:49">data</name></expr></argument>, <argument pos:start="247:52" pos:end="247:52"><expr pos:start="247:52" pos:end="247:52"><literal type="number" pos:start="247:52" pos:end="247:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="257:9">else if <condition pos:start="249:19" pos:end="249:38">(<expr pos:start="249:20" pos:end="249:37"><name pos:start="249:20" pos:end="249:30"><name pos:start="249:20" pos:end="249:24">words</name><index pos:start="249:25" pos:end="249:27">[<expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">0</literal></expr>]</index><index pos:start="249:28" pos:end="249:30">[<expr pos:start="249:29" pos:end="249:29"><literal type="number" pos:start="249:29" pos:end="249:29">5</literal></expr>]</index></name> <operator pos:start="249:32" pos:end="249:33">==</operator> <literal type="char" pos:start="249:35" pos:end="249:37">'l'</literal></expr>)</condition> <block pos:start="249:40" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:54">

            <decl_stmt pos:start="251:13" pos:end="251:34"><decl pos:start="251:13" pos:end="251:33"><type pos:start="251:13" pos:end="251:20"><name pos:start="251:13" pos:end="251:20">uint32_t</name></type> <name pos:start="251:22" pos:end="251:25">data</name> <init pos:start="251:27" pos:end="251:33">= <expr pos:start="251:29" pos:end="251:33"><name pos:start="251:29" pos:end="251:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:28"><expr pos:start="253:13" pos:end="253:27"><call pos:start="253:13" pos:end="253:27"><name pos:start="253:13" pos:end="253:20">tswap32s</name><argument_list pos:start="253:21" pos:end="253:27">(<argument pos:start="253:22" pos:end="253:26"><expr pos:start="253:22" pos:end="253:26"><operator pos:start="253:22" pos:end="253:22">&amp;</operator><name pos:start="253:23" pos:end="253:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:54"><expr pos:start="255:13" pos:end="255:53"><call pos:start="255:13" pos:end="255:53"><name pos:start="255:13" pos:end="255:37">cpu_physical_memory_write</name><argument_list pos:start="255:38" pos:end="255:53">(<argument pos:start="255:39" pos:end="255:42"><expr pos:start="255:39" pos:end="255:42"><name pos:start="255:39" pos:end="255:42">addr</name></expr></argument>, <argument pos:start="255:45" pos:end="255:49"><expr pos:start="255:45" pos:end="255:49"><operator pos:start="255:45" pos:end="255:45">&amp;</operator><name pos:start="255:46" pos:end="255:49">data</name></expr></argument>, <argument pos:start="255:52" pos:end="255:52"><expr pos:start="255:52" pos:end="255:52"><literal type="number" pos:start="255:52" pos:end="255:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="257:11" pos:end="265:9">else if <condition pos:start="257:19" pos:end="257:38">(<expr pos:start="257:20" pos:end="257:37"><name pos:start="257:20" pos:end="257:30"><name pos:start="257:20" pos:end="257:24">words</name><index pos:start="257:25" pos:end="257:27">[<expr pos:start="257:26" pos:end="257:26"><literal type="number" pos:start="257:26" pos:end="257:26">0</literal></expr>]</index><index pos:start="257:28" pos:end="257:30">[<expr pos:start="257:29" pos:end="257:29"><literal type="number" pos:start="257:29" pos:end="257:29">5</literal></expr>]</index></name> <operator pos:start="257:32" pos:end="257:33">==</operator> <literal type="char" pos:start="257:35" pos:end="257:37">'q'</literal></expr>)</condition> <block pos:start="257:40" pos:end="265:9">{<block_content pos:start="259:13" pos:end="263:54">

            <decl_stmt pos:start="259:13" pos:end="259:34"><decl pos:start="259:13" pos:end="259:33"><type pos:start="259:13" pos:end="259:20"><name pos:start="259:13" pos:end="259:20">uint64_t</name></type> <name pos:start="259:22" pos:end="259:25">data</name> <init pos:start="259:27" pos:end="259:33">= <expr pos:start="259:29" pos:end="259:33"><name pos:start="259:29" pos:end="259:33">value</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:28"><expr pos:start="261:13" pos:end="261:27"><call pos:start="261:13" pos:end="261:27"><name pos:start="261:13" pos:end="261:20">tswap64s</name><argument_list pos:start="261:21" pos:end="261:27">(<argument pos:start="261:22" pos:end="261:26"><expr pos:start="261:22" pos:end="261:26"><operator pos:start="261:22" pos:end="261:22">&amp;</operator><name pos:start="261:23" pos:end="261:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:54"><expr pos:start="263:13" pos:end="263:53"><call pos:start="263:13" pos:end="263:53"><name pos:start="263:13" pos:end="263:37">cpu_physical_memory_write</name><argument_list pos:start="263:38" pos:end="263:53">(<argument pos:start="263:39" pos:end="263:42"><expr pos:start="263:39" pos:end="263:42"><name pos:start="263:39" pos:end="263:42">addr</name></expr></argument>, <argument pos:start="263:45" pos:end="263:49"><expr pos:start="263:45" pos:end="263:49"><operator pos:start="263:45" pos:end="263:45">&amp;</operator><name pos:start="263:46" pos:end="263:49">data</name></expr></argument>, <argument pos:start="263:52" pos:end="263:52"><expr pos:start="263:52" pos:end="263:52"><literal type="number" pos:start="263:52" pos:end="263:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:31"><expr pos:start="267:9" pos:end="267:30"><call pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:25">qtest_send_prefix</name><argument_list pos:start="267:26" pos:end="267:30">(<argument pos:start="267:27" pos:end="267:29"><expr pos:start="267:27" pos:end="267:29"><name pos:start="267:27" pos:end="267:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:32"><expr pos:start="269:9" pos:end="269:31"><call pos:start="269:9" pos:end="269:31"><name pos:start="269:9" pos:end="269:18">qtest_send</name><argument_list pos:start="269:19" pos:end="269:31">(<argument pos:start="269:20" pos:end="269:22"><expr pos:start="269:20" pos:end="269:22"><name pos:start="269:20" pos:end="269:22">chr</name></expr></argument>, <argument pos:start="269:25" pos:end="269:30"><expr pos:start="269:25" pos:end="269:30"><literal type="string" pos:start="269:25" pos:end="269:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="271:7" pos:end="327:5">else if <condition pos:start="271:15" pos:end="277:46">(<expr pos:start="271:16" pos:end="277:45"><call pos:start="271:16" pos:end="271:40"><name pos:start="271:16" pos:end="271:21">strcmp</name><argument_list pos:start="271:22" pos:end="271:40">(<argument pos:start="271:23" pos:end="271:30"><expr pos:start="271:23" pos:end="271:30"><name pos:start="271:23" pos:end="271:30"><name pos:start="271:23" pos:end="271:27">words</name><index pos:start="271:28" pos:end="271:30">[<expr pos:start="271:29" pos:end="271:29"><literal type="number" pos:start="271:29" pos:end="271:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:33" pos:end="271:39"><expr pos:start="271:33" pos:end="271:39"><literal type="string" pos:start="271:33" pos:end="271:39">"readb"</literal></expr></argument>)</argument_list></call> <operator pos:start="271:42" pos:end="271:43">==</operator> <literal type="number" pos:start="271:45" pos:end="271:45">0</literal> <operator pos:start="271:47" pos:end="271:48">||</operator>

               <call pos:start="273:16" pos:end="273:40"><name pos:start="273:16" pos:end="273:21">strcmp</name><argument_list pos:start="273:22" pos:end="273:40">(<argument pos:start="273:23" pos:end="273:30"><expr pos:start="273:23" pos:end="273:30"><name pos:start="273:23" pos:end="273:30"><name pos:start="273:23" pos:end="273:27">words</name><index pos:start="273:28" pos:end="273:30">[<expr pos:start="273:29" pos:end="273:29"><literal type="number" pos:start="273:29" pos:end="273:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="273:33" pos:end="273:39"><expr pos:start="273:33" pos:end="273:39"><literal type="string" pos:start="273:33" pos:end="273:39">"readw"</literal></expr></argument>)</argument_list></call> <operator pos:start="273:42" pos:end="273:43">==</operator> <literal type="number" pos:start="273:45" pos:end="273:45">0</literal> <operator pos:start="273:47" pos:end="273:48">||</operator>

               <call pos:start="275:16" pos:end="275:40"><name pos:start="275:16" pos:end="275:21">strcmp</name><argument_list pos:start="275:22" pos:end="275:40">(<argument pos:start="275:23" pos:end="275:30"><expr pos:start="275:23" pos:end="275:30"><name pos:start="275:23" pos:end="275:30"><name pos:start="275:23" pos:end="275:27">words</name><index pos:start="275:28" pos:end="275:30">[<expr pos:start="275:29" pos:end="275:29"><literal type="number" pos:start="275:29" pos:end="275:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="275:33" pos:end="275:39"><expr pos:start="275:33" pos:end="275:39"><literal type="string" pos:start="275:33" pos:end="275:39">"readl"</literal></expr></argument>)</argument_list></call> <operator pos:start="275:42" pos:end="275:43">==</operator> <literal type="number" pos:start="275:45" pos:end="275:45">0</literal> <operator pos:start="275:47" pos:end="275:48">||</operator>

               <call pos:start="277:16" pos:end="277:40"><name pos:start="277:16" pos:end="277:21">strcmp</name><argument_list pos:start="277:22" pos:end="277:40">(<argument pos:start="277:23" pos:end="277:30"><expr pos:start="277:23" pos:end="277:30"><name pos:start="277:23" pos:end="277:30"><name pos:start="277:23" pos:end="277:27">words</name><index pos:start="277:28" pos:end="277:30">[<expr pos:start="277:29" pos:end="277:29"><literal type="number" pos:start="277:29" pos:end="277:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="277:33" pos:end="277:39"><expr pos:start="277:33" pos:end="277:39"><literal type="string" pos:start="277:33" pos:end="277:39">"readq"</literal></expr></argument>)</argument_list></call> <operator pos:start="277:42" pos:end="277:43">==</operator> <literal type="number" pos:start="277:45" pos:end="277:45">0</literal></expr>)</condition> <block pos:start="277:48" pos:end="327:5">{<block_content pos:start="279:9" pos:end="325:56">

        <decl_stmt pos:start="279:9" pos:end="279:22"><decl pos:start="279:9" pos:end="279:21"><type pos:start="279:9" pos:end="279:16"><name pos:start="279:9" pos:end="279:16">uint64_t</name></type> <name pos:start="279:18" pos:end="279:21">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="281:9" pos:end="281:38"><decl pos:start="281:9" pos:end="281:37"><type pos:start="281:9" pos:end="281:16"><name pos:start="281:9" pos:end="281:16">uint64_t</name></type> <name pos:start="281:18" pos:end="281:22">value</name> <init pos:start="281:24" pos:end="281:37">= <expr pos:start="281:26" pos:end="281:37"><call pos:start="281:26" pos:end="281:37"><name pos:start="281:26" pos:end="281:33">UINT64_C</name><argument_list pos:start="281:34" pos:end="281:37">(<argument pos:start="281:35" pos:end="281:36"><expr pos:start="281:35" pos:end="281:36"><operator pos:start="281:35" pos:end="281:35">-</operator><literal type="number" pos:start="281:36" pos:end="281:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="285:9" pos:end="285:27"><expr pos:start="285:9" pos:end="285:26"><call pos:start="285:9" pos:end="285:26"><name pos:start="285:9" pos:end="285:16">g_assert</name><argument_list pos:start="285:17" pos:end="285:26">(<argument pos:start="285:18" pos:end="285:25"><expr pos:start="285:18" pos:end="285:25"><name pos:start="285:18" pos:end="285:25"><name pos:start="285:18" pos:end="285:22">words</name><index pos:start="285:23" pos:end="285:25">[<expr pos:start="285:24" pos:end="285:24"><literal type="number" pos:start="285:24" pos:end="285:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:43"><expr pos:start="287:9" pos:end="287:42"><name pos:start="287:9" pos:end="287:12">addr</name> <operator pos:start="287:14" pos:end="287:14">=</operator> <call pos:start="287:16" pos:end="287:42"><name pos:start="287:16" pos:end="287:23">strtoull</name><argument_list pos:start="287:24" pos:end="287:42">(<argument pos:start="287:25" pos:end="287:32"><expr pos:start="287:25" pos:end="287:32"><name pos:start="287:25" pos:end="287:32"><name pos:start="287:25" pos:end="287:29">words</name><index pos:start="287:30" pos:end="287:32">[<expr pos:start="287:31" pos:end="287:31"><literal type="number" pos:start="287:31" pos:end="287:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="287:35" pos:end="287:38"><expr pos:start="287:35" pos:end="287:38"><name pos:start="287:35" pos:end="287:38">NULL</name></expr></argument>, <argument pos:start="287:41" pos:end="287:41"><expr pos:start="287:41" pos:end="287:41"><literal type="number" pos:start="287:41" pos:end="287:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="291:9" pos:end="321:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:31">(<expr pos:start="291:13" pos:end="291:30"><name pos:start="291:13" pos:end="291:23"><name pos:start="291:13" pos:end="291:17">words</name><index pos:start="291:18" pos:end="291:20">[<expr pos:start="291:19" pos:end="291:19"><literal type="number" pos:start="291:19" pos:end="291:19">0</literal></expr>]</index><index pos:start="291:21" pos:end="291:23">[<expr pos:start="291:22" pos:end="291:22"><literal type="number" pos:start="291:22" pos:end="291:22">4</literal></expr>]</index></name> <operator pos:start="291:25" pos:end="291:26">==</operator> <literal type="char" pos:start="291:28" pos:end="291:30">'b'</literal></expr>)</condition> <block pos:start="291:33" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:25">

            <decl_stmt pos:start="293:13" pos:end="293:25"><decl pos:start="293:13" pos:end="293:24"><type pos:start="293:13" pos:end="293:19"><name pos:start="293:13" pos:end="293:19">uint8_t</name></type> <name pos:start="293:21" pos:end="293:24">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:53"><expr pos:start="295:13" pos:end="295:52"><call pos:start="295:13" pos:end="295:52"><name pos:start="295:13" pos:end="295:36">cpu_physical_memory_read</name><argument_list pos:start="295:37" pos:end="295:52">(<argument pos:start="295:38" pos:end="295:41"><expr pos:start="295:38" pos:end="295:41"><name pos:start="295:38" pos:end="295:41">addr</name></expr></argument>, <argument pos:start="295:44" pos:end="295:48"><expr pos:start="295:44" pos:end="295:48"><operator pos:start="295:44" pos:end="295:44">&amp;</operator><name pos:start="295:45" pos:end="295:48">data</name></expr></argument>, <argument pos:start="295:51" pos:end="295:51"><expr pos:start="295:51" pos:end="295:51"><literal type="number" pos:start="295:51" pos:end="295:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:25"><expr pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:17">value</name> <operator pos:start="297:19" pos:end="297:19">=</operator> <name pos:start="297:21" pos:end="297:24">data</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="299:11" pos:end="307:9">else if <condition pos:start="299:19" pos:end="299:38">(<expr pos:start="299:20" pos:end="299:37"><name pos:start="299:20" pos:end="299:30"><name pos:start="299:20" pos:end="299:24">words</name><index pos:start="299:25" pos:end="299:27">[<expr pos:start="299:26" pos:end="299:26"><literal type="number" pos:start="299:26" pos:end="299:26">0</literal></expr>]</index><index pos:start="299:28" pos:end="299:30">[<expr pos:start="299:29" pos:end="299:29"><literal type="number" pos:start="299:29" pos:end="299:29">4</literal></expr>]</index></name> <operator pos:start="299:32" pos:end="299:33">==</operator> <literal type="char" pos:start="299:35" pos:end="299:37">'w'</literal></expr>)</condition> <block pos:start="299:40" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:34">

            <decl_stmt pos:start="301:13" pos:end="301:26"><decl pos:start="301:13" pos:end="301:25"><type pos:start="301:13" pos:end="301:20"><name pos:start="301:13" pos:end="301:20">uint16_t</name></type> <name pos:start="301:22" pos:end="301:25">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:53"><expr pos:start="303:13" pos:end="303:52"><call pos:start="303:13" pos:end="303:52"><name pos:start="303:13" pos:end="303:36">cpu_physical_memory_read</name><argument_list pos:start="303:37" pos:end="303:52">(<argument pos:start="303:38" pos:end="303:41"><expr pos:start="303:38" pos:end="303:41"><name pos:start="303:38" pos:end="303:41">addr</name></expr></argument>, <argument pos:start="303:44" pos:end="303:48"><expr pos:start="303:44" pos:end="303:48"><operator pos:start="303:44" pos:end="303:44">&amp;</operator><name pos:start="303:45" pos:end="303:48">data</name></expr></argument>, <argument pos:start="303:51" pos:end="303:51"><expr pos:start="303:51" pos:end="303:51"><literal type="number" pos:start="303:51" pos:end="303:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:34"><expr pos:start="305:13" pos:end="305:33"><name pos:start="305:13" pos:end="305:17">value</name> <operator pos:start="305:19" pos:end="305:19">=</operator> <call pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:27">tswap16</name><argument_list pos:start="305:28" pos:end="305:33">(<argument pos:start="305:29" pos:end="305:32"><expr pos:start="305:29" pos:end="305:32"><name pos:start="305:29" pos:end="305:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="307:11" pos:end="315:9">else if <condition pos:start="307:19" pos:end="307:38">(<expr pos:start="307:20" pos:end="307:37"><name pos:start="307:20" pos:end="307:30"><name pos:start="307:20" pos:end="307:24">words</name><index pos:start="307:25" pos:end="307:27">[<expr pos:start="307:26" pos:end="307:26"><literal type="number" pos:start="307:26" pos:end="307:26">0</literal></expr>]</index><index pos:start="307:28" pos:end="307:30">[<expr pos:start="307:29" pos:end="307:29"><literal type="number" pos:start="307:29" pos:end="307:29">4</literal></expr>]</index></name> <operator pos:start="307:32" pos:end="307:33">==</operator> <literal type="char" pos:start="307:35" pos:end="307:37">'l'</literal></expr>)</condition> <block pos:start="307:40" pos:end="315:9">{<block_content pos:start="309:13" pos:end="313:34">

            <decl_stmt pos:start="309:13" pos:end="309:26"><decl pos:start="309:13" pos:end="309:25"><type pos:start="309:13" pos:end="309:20"><name pos:start="309:13" pos:end="309:20">uint32_t</name></type> <name pos:start="309:22" pos:end="309:25">data</name></decl>;</decl_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:53"><expr pos:start="311:13" pos:end="311:52"><call pos:start="311:13" pos:end="311:52"><name pos:start="311:13" pos:end="311:36">cpu_physical_memory_read</name><argument_list pos:start="311:37" pos:end="311:52">(<argument pos:start="311:38" pos:end="311:41"><expr pos:start="311:38" pos:end="311:41"><name pos:start="311:38" pos:end="311:41">addr</name></expr></argument>, <argument pos:start="311:44" pos:end="311:48"><expr pos:start="311:44" pos:end="311:48"><operator pos:start="311:44" pos:end="311:44">&amp;</operator><name pos:start="311:45" pos:end="311:48">data</name></expr></argument>, <argument pos:start="311:51" pos:end="311:51"><expr pos:start="311:51" pos:end="311:51"><literal type="number" pos:start="311:51" pos:end="311:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:34"><expr pos:start="313:13" pos:end="313:33"><name pos:start="313:13" pos:end="313:17">value</name> <operator pos:start="313:19" pos:end="313:19">=</operator> <call pos:start="313:21" pos:end="313:33"><name pos:start="313:21" pos:end="313:27">tswap32</name><argument_list pos:start="313:28" pos:end="313:33">(<argument pos:start="313:29" pos:end="313:32"><expr pos:start="313:29" pos:end="313:32"><name pos:start="313:29" pos:end="313:32">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="315:11" pos:end="321:9">else if <condition pos:start="315:19" pos:end="315:38">(<expr pos:start="315:20" pos:end="315:37"><name pos:start="315:20" pos:end="315:30"><name pos:start="315:20" pos:end="315:24">words</name><index pos:start="315:25" pos:end="315:27">[<expr pos:start="315:26" pos:end="315:26"><literal type="number" pos:start="315:26" pos:end="315:26">0</literal></expr>]</index><index pos:start="315:28" pos:end="315:30">[<expr pos:start="315:29" pos:end="315:29"><literal type="number" pos:start="315:29" pos:end="315:29">4</literal></expr>]</index></name> <operator pos:start="315:32" pos:end="315:33">==</operator> <literal type="char" pos:start="315:35" pos:end="315:37">'q'</literal></expr>)</condition> <block pos:start="315:40" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:29">

            <expr_stmt pos:start="317:13" pos:end="317:54"><expr pos:start="317:13" pos:end="317:53"><call pos:start="317:13" pos:end="317:53"><name pos:start="317:13" pos:end="317:36">cpu_physical_memory_read</name><argument_list pos:start="317:37" pos:end="317:53">(<argument pos:start="317:38" pos:end="317:41"><expr pos:start="317:38" pos:end="317:41"><name pos:start="317:38" pos:end="317:41">addr</name></expr></argument>, <argument pos:start="317:44" pos:end="317:49"><expr pos:start="317:44" pos:end="317:49"><operator pos:start="317:44" pos:end="317:44">&amp;</operator><name pos:start="317:45" pos:end="317:49">value</name></expr></argument>, <argument pos:start="317:52" pos:end="317:52"><expr pos:start="317:52" pos:end="317:52"><literal type="number" pos:start="317:52" pos:end="317:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:29"><expr pos:start="319:13" pos:end="319:28"><call pos:start="319:13" pos:end="319:28"><name pos:start="319:13" pos:end="319:20">tswap64s</name><argument_list pos:start="319:21" pos:end="319:28">(<argument pos:start="319:22" pos:end="319:27"><expr pos:start="319:22" pos:end="319:27"><operator pos:start="319:22" pos:end="319:22">&amp;</operator><name pos:start="319:23" pos:end="319:27">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:31"><expr pos:start="323:9" pos:end="323:30"><call pos:start="323:9" pos:end="323:30"><name pos:start="323:9" pos:end="323:25">qtest_send_prefix</name><argument_list pos:start="323:26" pos:end="323:30">(<argument pos:start="323:27" pos:end="323:29"><expr pos:start="323:27" pos:end="323:29"><name pos:start="323:27" pos:end="323:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:56"><expr pos:start="325:9" pos:end="325:55"><call pos:start="325:9" pos:end="325:55"><name pos:start="325:9" pos:end="325:18">qtest_send</name><argument_list pos:start="325:19" pos:end="325:55">(<argument pos:start="325:20" pos:end="325:22"><expr pos:start="325:20" pos:end="325:22"><name pos:start="325:20" pos:end="325:22">chr</name></expr></argument>, <argument pos:start="325:25" pos:end="325:47"><expr pos:start="325:25" pos:end="325:47"><literal type="string" pos:start="325:25" pos:end="325:35">"OK 0x%016"</literal> <name pos:start="325:37" pos:end="325:42">PRIx64</name> <literal type="string" pos:start="325:44" pos:end="325:47">"\n"</literal></expr></argument>, <argument pos:start="325:50" pos:end="325:54"><expr pos:start="325:50" pos:end="325:54"><name pos:start="325:50" pos:end="325:54">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="327:7" pos:end="365:5">else if <condition pos:start="327:15" pos:end="327:45">(<expr pos:start="327:16" pos:end="327:44"><call pos:start="327:16" pos:end="327:39"><name pos:start="327:16" pos:end="327:21">strcmp</name><argument_list pos:start="327:22" pos:end="327:39">(<argument pos:start="327:23" pos:end="327:30"><expr pos:start="327:23" pos:end="327:30"><name pos:start="327:23" pos:end="327:30"><name pos:start="327:23" pos:end="327:27">words</name><index pos:start="327:28" pos:end="327:30">[<expr pos:start="327:29" pos:end="327:29"><literal type="number" pos:start="327:29" pos:end="327:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="327:33" pos:end="327:38"><expr pos:start="327:33" pos:end="327:38"><literal type="string" pos:start="327:33" pos:end="327:38">"read"</literal></expr></argument>)</argument_list></call> <operator pos:start="327:41" pos:end="327:42">==</operator> <literal type="number" pos:start="327:44" pos:end="327:44">0</literal></expr>)</condition> <block pos:start="327:47" pos:end="365:5">{<block_content pos:start="329:9" pos:end="363:21">

        <decl_stmt pos:start="329:9" pos:end="329:30"><decl pos:start="329:9" pos:end="329:21"><type pos:start="329:9" pos:end="329:16"><name pos:start="329:9" pos:end="329:16">uint64_t</name></type> <name pos:start="329:18" pos:end="329:21">addr</name></decl>, <decl pos:start="329:24" pos:end="329:26"><type ref="prev" pos:start="329:9" pos:end="329:16"/><name pos:start="329:24" pos:end="329:26">len</name></decl>, <decl pos:start="329:29" pos:end="329:29"><type ref="prev" pos:start="329:9" pos:end="329:16"/><name pos:start="329:29" pos:end="329:29">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="331:9" pos:end="331:22"><decl pos:start="331:9" pos:end="331:21"><type pos:start="331:9" pos:end="331:17"><name pos:start="331:9" pos:end="331:15">uint8_t</name> <modifier pos:start="331:17" pos:end="331:17">*</modifier></type><name pos:start="331:18" pos:end="331:21">data</name></decl>;</decl_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:39"><expr pos:start="335:9" pos:end="335:38"><call pos:start="335:9" pos:end="335:38"><name pos:start="335:9" pos:end="335:16">g_assert</name><argument_list pos:start="335:17" pos:end="335:38">(<argument pos:start="335:18" pos:end="335:37"><expr pos:start="335:18" pos:end="335:37"><name pos:start="335:18" pos:end="335:25"><name pos:start="335:18" pos:end="335:22">words</name><index pos:start="335:23" pos:end="335:25">[<expr pos:start="335:24" pos:end="335:24"><literal type="number" pos:start="335:24" pos:end="335:24">1</literal></expr>]</index></name> <operator pos:start="335:27" pos:end="335:28">&amp;&amp;</operator> <name pos:start="335:30" pos:end="335:37"><name pos:start="335:30" pos:end="335:34">words</name><index pos:start="335:35" pos:end="335:37">[<expr pos:start="335:36" pos:end="335:36"><literal type="number" pos:start="335:36" pos:end="335:36">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:43"><expr pos:start="337:9" pos:end="337:42"><name pos:start="337:9" pos:end="337:12">addr</name> <operator pos:start="337:14" pos:end="337:14">=</operator> <call pos:start="337:16" pos:end="337:42"><name pos:start="337:16" pos:end="337:23">strtoull</name><argument_list pos:start="337:24" pos:end="337:42">(<argument pos:start="337:25" pos:end="337:32"><expr pos:start="337:25" pos:end="337:32"><name pos:start="337:25" pos:end="337:32"><name pos:start="337:25" pos:end="337:29">words</name><index pos:start="337:30" pos:end="337:32">[<expr pos:start="337:31" pos:end="337:31"><literal type="number" pos:start="337:31" pos:end="337:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="337:35" pos:end="337:38"><expr pos:start="337:35" pos:end="337:38"><name pos:start="337:35" pos:end="337:38">NULL</name></expr></argument>, <argument pos:start="337:41" pos:end="337:41"><expr pos:start="337:41" pos:end="337:41"><literal type="number" pos:start="337:41" pos:end="337:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:42"><expr pos:start="339:9" pos:end="339:41"><name pos:start="339:9" pos:end="339:11">len</name> <operator pos:start="339:13" pos:end="339:13">=</operator> <call pos:start="339:15" pos:end="339:41"><name pos:start="339:15" pos:end="339:22">strtoull</name><argument_list pos:start="339:23" pos:end="339:41">(<argument pos:start="339:24" pos:end="339:31"><expr pos:start="339:24" pos:end="339:31"><name pos:start="339:24" pos:end="339:31"><name pos:start="339:24" pos:end="339:28">words</name><index pos:start="339:29" pos:end="339:31">[<expr pos:start="339:30" pos:end="339:30"><literal type="number" pos:start="339:30" pos:end="339:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:34" pos:end="339:37"><expr pos:start="339:34" pos:end="339:37"><name pos:start="339:34" pos:end="339:37">NULL</name></expr></argument>, <argument pos:start="339:40" pos:end="339:40"><expr pos:start="339:40" pos:end="339:40"><literal type="number" pos:start="339:40" pos:end="339:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="343:9" pos:end="343:29"><expr pos:start="343:9" pos:end="343:28"><name pos:start="343:9" pos:end="343:12">data</name> <operator pos:start="343:14" pos:end="343:14">=</operator> <call pos:start="343:16" pos:end="343:28"><name pos:start="343:16" pos:end="343:23">g_malloc</name><argument_list pos:start="343:24" pos:end="343:28">(<argument pos:start="343:25" pos:end="343:27"><expr pos:start="343:25" pos:end="343:27"><name pos:start="343:25" pos:end="343:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:50"><expr pos:start="345:9" pos:end="345:49"><call pos:start="345:9" pos:end="345:49"><name pos:start="345:9" pos:end="345:32">cpu_physical_memory_read</name><argument_list pos:start="345:33" pos:end="345:49">(<argument pos:start="345:34" pos:end="345:37"><expr pos:start="345:34" pos:end="345:37"><name pos:start="345:34" pos:end="345:37">addr</name></expr></argument>, <argument pos:start="345:40" pos:end="345:43"><expr pos:start="345:40" pos:end="345:43"><name pos:start="345:40" pos:end="345:43">data</name></expr></argument>, <argument pos:start="345:46" pos:end="345:48"><expr pos:start="345:46" pos:end="345:48"><name pos:start="345:46" pos:end="345:48">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="349:9" pos:end="349:31"><expr pos:start="349:9" pos:end="349:30"><call pos:start="349:9" pos:end="349:30"><name pos:start="349:9" pos:end="349:25">qtest_send_prefix</name><argument_list pos:start="349:26" pos:end="349:30">(<argument pos:start="349:27" pos:end="349:29"><expr pos:start="349:27" pos:end="349:29"><name pos:start="349:27" pos:end="349:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:33"><expr pos:start="351:9" pos:end="351:32"><call pos:start="351:9" pos:end="351:32"><name pos:start="351:9" pos:end="351:18">qtest_send</name><argument_list pos:start="351:19" pos:end="351:32">(<argument pos:start="351:20" pos:end="351:22"><expr pos:start="351:20" pos:end="351:22"><name pos:start="351:20" pos:end="351:22">chr</name></expr></argument>, <argument pos:start="351:25" pos:end="351:31"><expr pos:start="351:25" pos:end="351:31"><literal type="string" pos:start="351:25" pos:end="351:31">"OK 0x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="353:9" pos:end="357:9">for <control pos:start="353:13" pos:end="353:33">(<init pos:start="353:14" pos:end="353:19"><expr pos:start="353:14" pos:end="353:18"><name pos:start="353:14" pos:end="353:14">i</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <literal type="number" pos:start="353:18" pos:end="353:18">0</literal></expr>;</init> <condition pos:start="353:21" pos:end="353:28"><expr pos:start="353:21" pos:end="353:27"><name pos:start="353:21" pos:end="353:21">i</name> <operator pos:start="353:23" pos:end="353:23">&lt;</operator> <name pos:start="353:25" pos:end="353:27">len</name></expr>;</condition> <incr pos:start="353:30" pos:end="353:32"><expr pos:start="353:30" pos:end="353:32"><name pos:start="353:30" pos:end="353:30">i</name><operator pos:start="353:31" pos:end="353:32">++</operator></expr></incr>)</control> <block pos:start="353:35" pos:end="357:9">{<block_content pos:start="355:13" pos:end="355:45">

            <expr_stmt pos:start="355:13" pos:end="355:45"><expr pos:start="355:13" pos:end="355:44"><call pos:start="355:13" pos:end="355:44"><name pos:start="355:13" pos:end="355:22">qtest_send</name><argument_list pos:start="355:23" pos:end="355:44">(<argument pos:start="355:24" pos:end="355:26"><expr pos:start="355:24" pos:end="355:26"><name pos:start="355:24" pos:end="355:26">chr</name></expr></argument>, <argument pos:start="355:29" pos:end="355:34"><expr pos:start="355:29" pos:end="355:34"><literal type="string" pos:start="355:29" pos:end="355:34">"%02x"</literal></expr></argument>, <argument pos:start="355:37" pos:end="355:43"><expr pos:start="355:37" pos:end="355:43"><name pos:start="355:37" pos:end="355:43"><name pos:start="355:37" pos:end="355:40">data</name><index pos:start="355:41" pos:end="355:43">[<expr pos:start="355:42" pos:end="355:42"><name pos:start="355:42" pos:end="355:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="359:9" pos:end="359:30"><expr pos:start="359:9" pos:end="359:29"><call pos:start="359:9" pos:end="359:29"><name pos:start="359:9" pos:end="359:18">qtest_send</name><argument_list pos:start="359:19" pos:end="359:29">(<argument pos:start="359:20" pos:end="359:22"><expr pos:start="359:20" pos:end="359:22"><name pos:start="359:20" pos:end="359:22">chr</name></expr></argument>, <argument pos:start="359:25" pos:end="359:28"><expr pos:start="359:25" pos:end="359:28"><literal type="string" pos:start="359:25" pos:end="359:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="363:9" pos:end="363:21"><expr pos:start="363:9" pos:end="363:20"><call pos:start="363:9" pos:end="363:20"><name pos:start="363:9" pos:end="363:14">g_free</name><argument_list pos:start="363:15" pos:end="363:20">(<argument pos:start="363:16" pos:end="363:19"><expr pos:start="363:16" pos:end="363:19"><name pos:start="363:16" pos:end="363:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="365:7" pos:end="423:5">else if <condition pos:start="365:15" pos:end="365:46">(<expr pos:start="365:16" pos:end="365:45"><call pos:start="365:16" pos:end="365:40"><name pos:start="365:16" pos:end="365:21">strcmp</name><argument_list pos:start="365:22" pos:end="365:40">(<argument pos:start="365:23" pos:end="365:30"><expr pos:start="365:23" pos:end="365:30"><name pos:start="365:23" pos:end="365:30"><name pos:start="365:23" pos:end="365:27">words</name><index pos:start="365:28" pos:end="365:30">[<expr pos:start="365:29" pos:end="365:29"><literal type="number" pos:start="365:29" pos:end="365:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="365:33" pos:end="365:39"><expr pos:start="365:33" pos:end="365:39"><literal type="string" pos:start="365:33" pos:end="365:39">"write"</literal></expr></argument>)</argument_list></call> <operator pos:start="365:42" pos:end="365:43">==</operator> <literal type="number" pos:start="365:45" pos:end="365:45">0</literal></expr>)</condition> <block pos:start="365:48" pos:end="423:5">{<block_content pos:start="367:9" pos:end="421:32">

        <decl_stmt pos:start="367:9" pos:end="367:30"><decl pos:start="367:9" pos:end="367:21"><type pos:start="367:9" pos:end="367:16"><name pos:start="367:9" pos:end="367:16">uint64_t</name></type> <name pos:start="367:18" pos:end="367:21">addr</name></decl>, <decl pos:start="367:24" pos:end="367:26"><type ref="prev" pos:start="367:9" pos:end="367:16"/><name pos:start="367:24" pos:end="367:26">len</name></decl>, <decl pos:start="367:29" pos:end="367:29"><type ref="prev" pos:start="367:9" pos:end="367:16"/><name pos:start="367:29" pos:end="367:29">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="369:9" pos:end="369:22"><decl pos:start="369:9" pos:end="369:21"><type pos:start="369:9" pos:end="369:17"><name pos:start="369:9" pos:end="369:15">uint8_t</name> <modifier pos:start="369:17" pos:end="369:17">*</modifier></type><name pos:start="369:18" pos:end="369:21">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="371:9" pos:end="371:24"><decl pos:start="371:9" pos:end="371:23"><type pos:start="371:9" pos:end="371:14"><name pos:start="371:9" pos:end="371:14">size_t</name></type> <name pos:start="371:16" pos:end="371:23">data_len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="375:9" pos:end="375:51"><expr pos:start="375:9" pos:end="375:50"><call pos:start="375:9" pos:end="375:50"><name pos:start="375:9" pos:end="375:16">g_assert</name><argument_list pos:start="375:17" pos:end="375:50">(<argument pos:start="375:18" pos:end="375:49"><expr pos:start="375:18" pos:end="375:49"><name pos:start="375:18" pos:end="375:25"><name pos:start="375:18" pos:end="375:22">words</name><index pos:start="375:23" pos:end="375:25">[<expr pos:start="375:24" pos:end="375:24"><literal type="number" pos:start="375:24" pos:end="375:24">1</literal></expr>]</index></name> <operator pos:start="375:27" pos:end="375:28">&amp;&amp;</operator> <name pos:start="375:30" pos:end="375:37"><name pos:start="375:30" pos:end="375:34">words</name><index pos:start="375:35" pos:end="375:37">[<expr pos:start="375:36" pos:end="375:36"><literal type="number" pos:start="375:36" pos:end="375:36">2</literal></expr>]</index></name> <operator pos:start="375:39" pos:end="375:40">&amp;&amp;</operator> <name pos:start="375:42" pos:end="375:49"><name pos:start="375:42" pos:end="375:46">words</name><index pos:start="375:47" pos:end="375:49">[<expr pos:start="375:48" pos:end="375:48"><literal type="number" pos:start="375:48" pos:end="375:48">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:43"><expr pos:start="377:9" pos:end="377:42"><name pos:start="377:9" pos:end="377:12">addr</name> <operator pos:start="377:14" pos:end="377:14">=</operator> <call pos:start="377:16" pos:end="377:42"><name pos:start="377:16" pos:end="377:23">strtoull</name><argument_list pos:start="377:24" pos:end="377:42">(<argument pos:start="377:25" pos:end="377:32"><expr pos:start="377:25" pos:end="377:32"><name pos:start="377:25" pos:end="377:32"><name pos:start="377:25" pos:end="377:29">words</name><index pos:start="377:30" pos:end="377:32">[<expr pos:start="377:31" pos:end="377:31"><literal type="number" pos:start="377:31" pos:end="377:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="377:35" pos:end="377:38"><expr pos:start="377:35" pos:end="377:38"><name pos:start="377:35" pos:end="377:38">NULL</name></expr></argument>, <argument pos:start="377:41" pos:end="377:41"><expr pos:start="377:41" pos:end="377:41"><literal type="number" pos:start="377:41" pos:end="377:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:42"><expr pos:start="379:9" pos:end="379:41"><name pos:start="379:9" pos:end="379:11">len</name> <operator pos:start="379:13" pos:end="379:13">=</operator> <call pos:start="379:15" pos:end="379:41"><name pos:start="379:15" pos:end="379:22">strtoull</name><argument_list pos:start="379:23" pos:end="379:41">(<argument pos:start="379:24" pos:end="379:31"><expr pos:start="379:24" pos:end="379:31"><name pos:start="379:24" pos:end="379:31"><name pos:start="379:24" pos:end="379:28">words</name><index pos:start="379:29" pos:end="379:31">[<expr pos:start="379:30" pos:end="379:30"><literal type="number" pos:start="379:30" pos:end="379:30">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="379:34" pos:end="379:37"><expr pos:start="379:34" pos:end="379:37"><name pos:start="379:34" pos:end="379:37">NULL</name></expr></argument>, <argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><literal type="number" pos:start="379:40" pos:end="379:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="383:9" pos:end="383:36"><expr pos:start="383:9" pos:end="383:35"><name pos:start="383:9" pos:end="383:16">data_len</name> <operator pos:start="383:18" pos:end="383:18">=</operator> <call pos:start="383:20" pos:end="383:35"><name pos:start="383:20" pos:end="383:25">strlen</name><argument_list pos:start="383:26" pos:end="383:35">(<argument pos:start="383:27" pos:end="383:34"><expr pos:start="383:27" pos:end="383:34"><name pos:start="383:27" pos:end="383:34"><name pos:start="383:27" pos:end="383:31">words</name><index pos:start="383:32" pos:end="383:34">[<expr pos:start="383:33" pos:end="383:33"><literal type="number" pos:start="383:33" pos:end="383:33">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="385:9" pos:end="391:9"><if pos:start="385:9" pos:end="391:9">if <condition pos:start="385:12" pos:end="385:25">(<expr pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:20">data_len</name> <operator pos:start="385:22" pos:end="385:22">&lt;</operator> <literal type="number" pos:start="385:24" pos:end="385:24">3</literal></expr>)</condition> <block pos:start="385:27" pos:end="391:9">{<block_content pos:start="387:13" pos:end="389:19">

            <expr_stmt pos:start="387:13" pos:end="387:59"><expr pos:start="387:13" pos:end="387:58"><call pos:start="387:13" pos:end="387:58"><name pos:start="387:13" pos:end="387:22">qtest_send</name><argument_list pos:start="387:23" pos:end="387:58">(<argument pos:start="387:24" pos:end="387:26"><expr pos:start="387:24" pos:end="387:26"><name pos:start="387:24" pos:end="387:26">chr</name></expr></argument>, <argument pos:start="387:29" pos:end="387:57"><expr pos:start="387:29" pos:end="387:57"><literal type="string" pos:start="387:29" pos:end="387:57">"ERR invalid argument size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="389:13" pos:end="389:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="395:9" pos:end="395:29"><expr pos:start="395:9" pos:end="395:28"><name pos:start="395:9" pos:end="395:12">data</name> <operator pos:start="395:14" pos:end="395:14">=</operator> <call pos:start="395:16" pos:end="395:28"><name pos:start="395:16" pos:end="395:23">g_malloc</name><argument_list pos:start="395:24" pos:end="395:28">(<argument pos:start="395:25" pos:end="395:27"><expr pos:start="395:25" pos:end="395:27"><name pos:start="395:25" pos:end="395:27">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="397:9" pos:end="411:9">for <control pos:start="397:13" pos:end="397:33">(<init pos:start="397:14" pos:end="397:19"><expr pos:start="397:14" pos:end="397:18"><name pos:start="397:14" pos:end="397:14">i</name> <operator pos:start="397:16" pos:end="397:16">=</operator> <literal type="number" pos:start="397:18" pos:end="397:18">0</literal></expr>;</init> <condition pos:start="397:21" pos:end="397:28"><expr pos:start="397:21" pos:end="397:27"><name pos:start="397:21" pos:end="397:21">i</name> <operator pos:start="397:23" pos:end="397:23">&lt;</operator> <name pos:start="397:25" pos:end="397:27">len</name></expr>;</condition> <incr pos:start="397:30" pos:end="397:32"><expr pos:start="397:30" pos:end="397:32"><name pos:start="397:30" pos:end="397:30">i</name><operator pos:start="397:31" pos:end="397:32">++</operator></expr></incr>)</control> <block pos:start="397:35" pos:end="411:9">{<block_content pos:start="399:13" pos:end="409:13">

            <if_stmt pos:start="399:13" pos:end="409:13"><if pos:start="399:13" pos:end="405:13">if <condition pos:start="399:16" pos:end="399:40">(<expr pos:start="399:17" pos:end="399:39"><operator pos:start="399:17" pos:end="399:17">(</operator><name pos:start="399:18" pos:end="399:18">i</name> <operator pos:start="399:20" pos:end="399:20">*</operator> <literal type="number" pos:start="399:22" pos:end="399:24">2</literal> <operator pos:start="399:24" pos:end="399:24">+</operator> <literal type="number" pos:start="399:26" pos:end="399:26">4</literal><operator pos:start="399:27" pos:end="399:27">)</operator> <operator pos:start="399:29" pos:end="399:30">&lt;=</operator> <name pos:start="399:32" pos:end="399:39">data_len</name></expr>)</condition> <block pos:start="399:42" pos:end="405:13">{<block_content pos:start="401:17" pos:end="403:56">

                <expr_stmt pos:start="401:17" pos:end="401:60"><expr pos:start="401:17" pos:end="401:59"><name pos:start="401:17" pos:end="401:23"><name pos:start="401:17" pos:end="401:20">data</name><index pos:start="401:21" pos:end="401:23">[<expr pos:start="401:22" pos:end="401:22"><name pos:start="401:22" pos:end="401:22">i</name></expr>]</index></name> <operator pos:start="401:25" pos:end="401:25">=</operator> <call pos:start="401:27" pos:end="401:54"><name pos:start="401:27" pos:end="401:33">hex2nib</name><argument_list pos:start="401:34" pos:end="401:54">(<argument pos:start="401:35" pos:end="401:53"><expr pos:start="401:35" pos:end="401:53"><name pos:start="401:35" pos:end="401:53"><name pos:start="401:35" pos:end="401:39">words</name><index pos:start="401:40" pos:end="401:42">[<expr pos:start="401:41" pos:end="401:41"><literal type="number" pos:start="401:41" pos:end="401:41">3</literal></expr>]</index><index pos:start="401:43" pos:end="401:53">[<expr pos:start="401:44" pos:end="401:52"><name pos:start="401:44" pos:end="401:44">i</name> <operator pos:start="401:46" pos:end="401:46">*</operator> <literal type="number" pos:start="401:48" pos:end="401:50">2</literal> <operator pos:start="401:50" pos:end="401:50">+</operator> <literal type="number" pos:start="401:52" pos:end="401:52">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="401:56" pos:end="401:57">&lt;&lt;</operator> <literal type="number" pos:start="401:59" pos:end="401:59">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="403:17" pos:end="403:56"><expr pos:start="403:17" pos:end="403:55"><name pos:start="403:17" pos:end="403:23"><name pos:start="403:17" pos:end="403:20">data</name><index pos:start="403:21" pos:end="403:23">[<expr pos:start="403:22" pos:end="403:22"><name pos:start="403:22" pos:end="403:22">i</name></expr>]</index></name> <operator pos:start="403:25" pos:end="403:26">|=</operator> <call pos:start="403:28" pos:end="403:55"><name pos:start="403:28" pos:end="403:34">hex2nib</name><argument_list pos:start="403:35" pos:end="403:55">(<argument pos:start="403:36" pos:end="403:54"><expr pos:start="403:36" pos:end="403:54"><name pos:start="403:36" pos:end="403:54"><name pos:start="403:36" pos:end="403:40">words</name><index pos:start="403:41" pos:end="403:43">[<expr pos:start="403:42" pos:end="403:42"><literal type="number" pos:start="403:42" pos:end="403:42">3</literal></expr>]</index><index pos:start="403:44" pos:end="403:54">[<expr pos:start="403:45" pos:end="403:53"><name pos:start="403:45" pos:end="403:45">i</name> <operator pos:start="403:47" pos:end="403:47">*</operator> <literal type="number" pos:start="403:49" pos:end="403:51">2</literal> <operator pos:start="403:51" pos:end="403:51">+</operator> <literal type="number" pos:start="403:53" pos:end="403:53">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="405:15" pos:end="409:13">else <block pos:start="405:20" pos:end="409:13">{<block_content pos:start="407:17" pos:end="407:28">

                <expr_stmt pos:start="407:17" pos:end="407:28"><expr pos:start="407:17" pos:end="407:27"><name pos:start="407:17" pos:end="407:23"><name pos:start="407:17" pos:end="407:20">data</name><index pos:start="407:21" pos:end="407:23">[<expr pos:start="407:22" pos:end="407:22"><name pos:start="407:22" pos:end="407:22">i</name></expr>]</index></name> <operator pos:start="407:25" pos:end="407:25">=</operator> <literal type="number" pos:start="407:27" pos:end="407:27">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="413:9" pos:end="413:51"><expr pos:start="413:9" pos:end="413:50"><call pos:start="413:9" pos:end="413:50"><name pos:start="413:9" pos:end="413:33">cpu_physical_memory_write</name><argument_list pos:start="413:34" pos:end="413:50">(<argument pos:start="413:35" pos:end="413:38"><expr pos:start="413:35" pos:end="413:38"><name pos:start="413:35" pos:end="413:38">addr</name></expr></argument>, <argument pos:start="413:41" pos:end="413:44"><expr pos:start="413:41" pos:end="413:44"><name pos:start="413:41" pos:end="413:44">data</name></expr></argument>, <argument pos:start="413:47" pos:end="413:49"><expr pos:start="413:47" pos:end="413:49"><name pos:start="413:47" pos:end="413:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="415:9" pos:end="415:21"><expr pos:start="415:9" pos:end="415:20"><call pos:start="415:9" pos:end="415:20"><name pos:start="415:9" pos:end="415:14">g_free</name><argument_list pos:start="415:15" pos:end="415:20">(<argument pos:start="415:16" pos:end="415:19"><expr pos:start="415:16" pos:end="415:19"><name pos:start="415:16" pos:end="415:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="419:9" pos:end="419:31"><expr pos:start="419:9" pos:end="419:30"><call pos:start="419:9" pos:end="419:30"><name pos:start="419:9" pos:end="419:25">qtest_send_prefix</name><argument_list pos:start="419:26" pos:end="419:30">(<argument pos:start="419:27" pos:end="419:29"><expr pos:start="419:27" pos:end="419:29"><name pos:start="419:27" pos:end="419:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="421:32"><expr pos:start="421:9" pos:end="421:31"><call pos:start="421:9" pos:end="421:31"><name pos:start="421:9" pos:end="421:18">qtest_send</name><argument_list pos:start="421:19" pos:end="421:31">(<argument pos:start="421:20" pos:end="421:22"><expr pos:start="421:20" pos:end="421:22"><name pos:start="421:20" pos:end="421:22">chr</name></expr></argument>, <argument pos:start="421:25" pos:end="421:30"><expr pos:start="421:25" pos:end="421:30"><literal type="string" pos:start="421:25" pos:end="421:30">"OK\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="423:7" pos:end="445:5">else if <condition pos:start="423:15" pos:end="423:70">(<expr pos:start="423:16" pos:end="423:69"><call pos:start="423:16" pos:end="423:30"><name pos:start="423:16" pos:end="423:28">qtest_enabled</name><argument_list pos:start="423:29" pos:end="423:30">()</argument_list></call> <operator pos:start="423:32" pos:end="423:33">&amp;&amp;</operator> <call pos:start="423:35" pos:end="423:64"><name pos:start="423:35" pos:end="423:40">strcmp</name><argument_list pos:start="423:41" pos:end="423:64">(<argument pos:start="423:42" pos:end="423:49"><expr pos:start="423:42" pos:end="423:49"><name pos:start="423:42" pos:end="423:49"><name pos:start="423:42" pos:end="423:46">words</name><index pos:start="423:47" pos:end="423:49">[<expr pos:start="423:48" pos:end="423:48"><literal type="number" pos:start="423:48" pos:end="423:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="423:52" pos:end="423:63"><expr pos:start="423:52" pos:end="423:63"><literal type="string" pos:start="423:52" pos:end="423:63">"clock_step"</literal></expr></argument>)</argument_list></call> <operator pos:start="423:66" pos:end="423:67">==</operator> <literal type="number" pos:start="423:69" pos:end="423:69">0</literal></expr>)</condition> <block pos:start="423:72" pos:end="445:5">{<block_content pos:start="425:9" pos:end="443:90">

        <decl_stmt pos:start="425:9" pos:end="425:19"><decl pos:start="425:9" pos:end="425:18"><type pos:start="425:9" pos:end="425:15"><name pos:start="425:9" pos:end="425:15">int64_t</name></type> <name pos:start="425:17" pos:end="425:18">ns</name></decl>;</decl_stmt>



        <if_stmt pos:start="429:9" pos:end="437:9"><if pos:start="429:9" pos:end="433:9">if <condition pos:start="429:12" pos:end="429:21">(<expr pos:start="429:13" pos:end="429:20"><name pos:start="429:13" pos:end="429:20"><name pos:start="429:13" pos:end="429:17">words</name><index pos:start="429:18" pos:end="429:20">[<expr pos:start="429:19" pos:end="429:19"><literal type="number" pos:start="429:19" pos:end="429:19">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="429:23" pos:end="433:9">{<block_content pos:start="431:13" pos:end="431:44">

            <expr_stmt pos:start="431:13" pos:end="431:44"><expr pos:start="431:13" pos:end="431:43"><name pos:start="431:13" pos:end="431:14">ns</name> <operator pos:start="431:16" pos:end="431:16">=</operator> <call pos:start="431:18" pos:end="431:43"><name pos:start="431:18" pos:end="431:24">strtoll</name><argument_list pos:start="431:25" pos:end="431:43">(<argument pos:start="431:26" pos:end="431:33"><expr pos:start="431:26" pos:end="431:33"><name pos:start="431:26" pos:end="431:33"><name pos:start="431:26" pos:end="431:30">words</name><index pos:start="431:31" pos:end="431:33">[<expr pos:start="431:32" pos:end="431:32"><literal type="number" pos:start="431:32" pos:end="431:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="431:36" pos:end="431:39"><expr pos:start="431:36" pos:end="431:39"><name pos:start="431:36" pos:end="431:39">NULL</name></expr></argument>, <argument pos:start="431:42" pos:end="431:42"><expr pos:start="431:42" pos:end="431:42"><literal type="number" pos:start="431:42" pos:end="431:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="433:11" pos:end="437:9">else <block pos:start="433:16" pos:end="437:9">{<block_content pos:start="435:13" pos:end="435:64">

            <expr_stmt pos:start="435:13" pos:end="435:64"><expr pos:start="435:13" pos:end="435:63"><name pos:start="435:13" pos:end="435:14">ns</name> <operator pos:start="435:16" pos:end="435:16">=</operator> <call pos:start="435:18" pos:end="435:63"><name pos:start="435:18" pos:end="435:43">qemu_clock_deadline_ns_all</name><argument_list pos:start="435:44" pos:end="435:63">(<argument pos:start="435:45" pos:end="435:62"><expr pos:start="435:45" pos:end="435:62"><name pos:start="435:45" pos:end="435:62">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:69"><expr pos:start="439:9" pos:end="439:68"><call pos:start="439:9" pos:end="439:68"><name pos:start="439:9" pos:end="439:24">qtest_clock_warp</name><argument_list pos:start="439:25" pos:end="439:68">(<argument pos:start="439:26" pos:end="439:67"><expr pos:start="439:26" pos:end="439:67"><call pos:start="439:26" pos:end="439:62"><name pos:start="439:26" pos:end="439:42">qemu_clock_get_ns</name><argument_list pos:start="439:43" pos:end="439:62">(<argument pos:start="439:44" pos:end="439:61"><expr pos:start="439:44" pos:end="439:61"><name pos:start="439:44" pos:end="439:61">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="439:64" pos:end="439:64">+</operator> <name pos:start="439:66" pos:end="439:67">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:31"><expr pos:start="441:9" pos:end="441:30"><call pos:start="441:9" pos:end="441:30"><name pos:start="441:9" pos:end="441:25">qtest_send_prefix</name><argument_list pos:start="441:26" pos:end="441:30">(<argument pos:start="441:27" pos:end="441:29"><expr pos:start="441:27" pos:end="441:29"><name pos:start="441:27" pos:end="441:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="443:9" pos:end="443:90"><expr pos:start="443:9" pos:end="443:89"><call pos:start="443:9" pos:end="443:89"><name pos:start="443:9" pos:end="443:18">qtest_send</name><argument_list pos:start="443:19" pos:end="443:89">(<argument pos:start="443:20" pos:end="443:22"><expr pos:start="443:20" pos:end="443:22"><name pos:start="443:20" pos:end="443:22">chr</name></expr></argument>, <argument pos:start="443:25" pos:end="443:40"><expr pos:start="443:25" pos:end="443:40"><literal type="string" pos:start="443:25" pos:end="443:30">"OK %"</literal><name pos:start="443:31" pos:end="443:36">PRIi64</name><literal type="string" pos:start="443:37" pos:end="443:40">"\n"</literal></expr></argument>, <argument pos:start="443:43" pos:end="443:88"><expr pos:start="443:43" pos:end="443:88"><operator pos:start="443:43" pos:end="443:43">(</operator><name pos:start="443:44" pos:end="443:50">int64_t</name><operator pos:start="443:51" pos:end="443:51">)</operator><call pos:start="443:52" pos:end="443:88"><name pos:start="443:52" pos:end="443:68">qemu_clock_get_ns</name><argument_list pos:start="443:69" pos:end="443:88">(<argument pos:start="443:70" pos:end="443:87"><expr pos:start="443:70" pos:end="443:87"><name pos:start="443:70" pos:end="443:87">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="445:7" pos:end="461:5">else if <condition pos:start="445:15" pos:end="445:69">(<expr pos:start="445:16" pos:end="445:68"><call pos:start="445:16" pos:end="445:30"><name pos:start="445:16" pos:end="445:28">qtest_enabled</name><argument_list pos:start="445:29" pos:end="445:30">()</argument_list></call> <operator pos:start="445:32" pos:end="445:33">&amp;&amp;</operator> <call pos:start="445:35" pos:end="445:63"><name pos:start="445:35" pos:end="445:40">strcmp</name><argument_list pos:start="445:41" pos:end="445:63">(<argument pos:start="445:42" pos:end="445:49"><expr pos:start="445:42" pos:end="445:49"><name pos:start="445:42" pos:end="445:49"><name pos:start="445:42" pos:end="445:46">words</name><index pos:start="445:47" pos:end="445:49">[<expr pos:start="445:48" pos:end="445:48"><literal type="number" pos:start="445:48" pos:end="445:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="445:52" pos:end="445:62"><expr pos:start="445:52" pos:end="445:62"><literal type="string" pos:start="445:52" pos:end="445:62">"clock_set"</literal></expr></argument>)</argument_list></call> <operator pos:start="445:65" pos:end="445:66">==</operator> <literal type="number" pos:start="445:68" pos:end="445:68">0</literal></expr>)</condition> <block pos:start="445:71" pos:end="461:5">{<block_content pos:start="447:9" pos:end="459:90">

        <decl_stmt pos:start="447:9" pos:end="447:19"><decl pos:start="447:9" pos:end="447:18"><type pos:start="447:9" pos:end="447:15"><name pos:start="447:9" pos:end="447:15">int64_t</name></type> <name pos:start="447:17" pos:end="447:18">ns</name></decl>;</decl_stmt>



        <expr_stmt pos:start="451:9" pos:end="451:27"><expr pos:start="451:9" pos:end="451:26"><call pos:start="451:9" pos:end="451:26"><name pos:start="451:9" pos:end="451:16">g_assert</name><argument_list pos:start="451:17" pos:end="451:26">(<argument pos:start="451:18" pos:end="451:25"><expr pos:start="451:18" pos:end="451:25"><name pos:start="451:18" pos:end="451:25"><name pos:start="451:18" pos:end="451:22">words</name><index pos:start="451:23" pos:end="451:25">[<expr pos:start="451:24" pos:end="451:24"><literal type="number" pos:start="451:24" pos:end="451:24">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:40"><expr pos:start="453:9" pos:end="453:39"><name pos:start="453:9" pos:end="453:10">ns</name> <operator pos:start="453:12" pos:end="453:12">=</operator> <call pos:start="453:14" pos:end="453:39"><name pos:start="453:14" pos:end="453:20">strtoll</name><argument_list pos:start="453:21" pos:end="453:39">(<argument pos:start="453:22" pos:end="453:29"><expr pos:start="453:22" pos:end="453:29"><name pos:start="453:22" pos:end="453:29"><name pos:start="453:22" pos:end="453:26">words</name><index pos:start="453:27" pos:end="453:29">[<expr pos:start="453:28" pos:end="453:28"><literal type="number" pos:start="453:28" pos:end="453:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="453:32" pos:end="453:35"><expr pos:start="453:32" pos:end="453:35"><name pos:start="453:32" pos:end="453:35">NULL</name></expr></argument>, <argument pos:start="453:38" pos:end="453:38"><expr pos:start="453:38" pos:end="453:38"><literal type="number" pos:start="453:38" pos:end="453:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:29"><expr pos:start="455:9" pos:end="455:28"><call pos:start="455:9" pos:end="455:28"><name pos:start="455:9" pos:end="455:24">qtest_clock_warp</name><argument_list pos:start="455:25" pos:end="455:28">(<argument pos:start="455:26" pos:end="455:27"><expr pos:start="455:26" pos:end="455:27"><name pos:start="455:26" pos:end="455:27">ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:31"><expr pos:start="457:9" pos:end="457:30"><call pos:start="457:9" pos:end="457:30"><name pos:start="457:9" pos:end="457:25">qtest_send_prefix</name><argument_list pos:start="457:26" pos:end="457:30">(<argument pos:start="457:27" pos:end="457:29"><expr pos:start="457:27" pos:end="457:29"><name pos:start="457:27" pos:end="457:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:90"><expr pos:start="459:9" pos:end="459:89"><call pos:start="459:9" pos:end="459:89"><name pos:start="459:9" pos:end="459:18">qtest_send</name><argument_list pos:start="459:19" pos:end="459:89">(<argument pos:start="459:20" pos:end="459:22"><expr pos:start="459:20" pos:end="459:22"><name pos:start="459:20" pos:end="459:22">chr</name></expr></argument>, <argument pos:start="459:25" pos:end="459:40"><expr pos:start="459:25" pos:end="459:40"><literal type="string" pos:start="459:25" pos:end="459:30">"OK %"</literal><name pos:start="459:31" pos:end="459:36">PRIi64</name><literal type="string" pos:start="459:37" pos:end="459:40">"\n"</literal></expr></argument>, <argument pos:start="459:43" pos:end="459:88"><expr pos:start="459:43" pos:end="459:88"><operator pos:start="459:43" pos:end="459:43">(</operator><name pos:start="459:44" pos:end="459:50">int64_t</name><operator pos:start="459:51" pos:end="459:51">)</operator><call pos:start="459:52" pos:end="459:88"><name pos:start="459:52" pos:end="459:68">qemu_clock_get_ns</name><argument_list pos:start="459:69" pos:end="459:88">(<argument pos:start="459:70" pos:end="459:87"><expr pos:start="459:70" pos:end="459:87"><name pos:start="459:70" pos:end="459:87">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="461:7" pos:end="467:5">else <block pos:start="461:12" pos:end="467:5">{<block_content pos:start="463:9" pos:end="465:65">

        <expr_stmt pos:start="463:9" pos:end="463:31"><expr pos:start="463:9" pos:end="463:30"><call pos:start="463:9" pos:end="463:30"><name pos:start="463:9" pos:end="463:25">qtest_send_prefix</name><argument_list pos:start="463:26" pos:end="463:30">(<argument pos:start="463:27" pos:end="463:29"><expr pos:start="463:27" pos:end="463:29"><name pos:start="463:27" pos:end="463:29">chr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:65"><expr pos:start="465:9" pos:end="465:64"><call pos:start="465:9" pos:end="465:64"><name pos:start="465:9" pos:end="465:18">qtest_send</name><argument_list pos:start="465:19" pos:end="465:64">(<argument pos:start="465:20" pos:end="465:22"><expr pos:start="465:20" pos:end="465:22"><name pos:start="465:20" pos:end="465:22">chr</name></expr></argument>, <argument pos:start="465:25" pos:end="465:53"><expr pos:start="465:25" pos:end="465:53"><literal type="string" pos:start="465:25" pos:end="465:53">"FAIL Unknown command `%s'\n"</literal></expr></argument>, <argument pos:start="465:56" pos:end="465:63"><expr pos:start="465:56" pos:end="465:63"><name pos:start="465:56" pos:end="465:63"><name pos:start="465:56" pos:end="465:60">words</name><index pos:start="465:61" pos:end="465:63">[<expr pos:start="465:62" pos:end="465:62"><literal type="number" pos:start="465:62" pos:end="465:62">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
