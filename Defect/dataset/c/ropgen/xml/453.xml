<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/453.c" pos:tabs="8"><function pos:start="1:1" pos:end="257:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_get_cpu_flags_x86</name><parameter_list pos:start="1:25" pos:end="1:30">(<parameter pos:start="1:26" pos:end="1:29"><decl pos:start="1:26" pos:end="1:29"><type pos:start="1:26" pos:end="1:29"><name pos:start="1:26" pos:end="1:29">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="257:1">{<block_content pos:start="5:5" pos:end="255:16">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">rval</name> <init pos:start="5:14" pos:end="5:16">= <expr pos:start="5:16" pos:end="5:16"><literal type="number" pos:start="5:16" pos:end="5:16">0</literal></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="9:1" pos:end="9:12">#<cpp:directive pos:start="9:2" pos:end="9:6">ifdef</cpp:directive> <name pos:start="9:8" pos:end="9:12">cpuid</name></cpp:ifdef>



    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">eax</name></decl>, <decl pos:start="13:14" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:16">ebx</name></decl>, <decl pos:start="13:19" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:21">ecx</name></decl>, <decl pos:start="13:24" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:26">edx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:65"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:21">max_std_level</name></decl>, <decl pos:start="15:24" pos:end="15:36"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:24" pos:end="15:36">max_ext_level</name></decl>, <decl pos:start="15:39" pos:end="15:50"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:39" pos:end="15:46">std_caps</name> <init pos:start="15:48" pos:end="15:50">= <expr pos:start="15:50" pos:end="15:50"><literal type="number" pos:start="15:50" pos:end="15:50">0</literal></expr></init></decl>, <decl pos:start="15:53" pos:end="15:64"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:53" pos:end="15:60">ext_caps</name> <init pos:start="15:62" pos:end="15:64">= <expr pos:start="15:64" pos:end="15:64"><literal type="number" pos:start="15:64" pos:end="15:64">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">family</name> <init pos:start="17:16" pos:end="17:18">= <expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr></init></decl>, <decl pos:start="17:21" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:25">model</name> <init pos:start="17:27" pos:end="17:29">= <expr pos:start="17:29" pos:end="17:29"><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr></init></decl>;</decl_stmt>

    <union pos:start="19:5" pos:end="19:43">union <block pos:start="19:11" pos:end="19:35">{ <decl_stmt pos:start="19:13" pos:end="19:21"><decl pos:start="19:13" pos:end="19:20"><type pos:start="19:13" pos:end="19:15"><name pos:start="19:13" pos:end="19:15">int</name></type> <name pos:start="19:17" pos:end="19:20"><name pos:start="19:17" pos:end="19:17">i</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">3</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt pos:start="19:23" pos:end="19:33"><decl pos:start="19:23" pos:end="19:32"><type pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">char</name></type> <name pos:start="19:28" pos:end="19:32"><name pos:start="19:28" pos:end="19:28">c</name><index pos:start="19:29" pos:end="19:32">[<expr pos:start="19:30" pos:end="19:31"><literal type="number" pos:start="19:30" pos:end="19:31">12</literal></expr>]</index></name></decl>;</decl_stmt> }</block> <decl pos:start="19:37" pos:end="19:42"><name pos:start="19:37" pos:end="19:42">vendor</name></decl>;</union>



    <if_stmt pos:start="23:5" pos:end="25:17"><if pos:start="23:5" pos:end="25:17">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:21"><name pos:start="23:10" pos:end="23:19">cpuid_test</name><argument_list pos:start="23:20" pos:end="23:21">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:17"><block_content pos:start="25:9" pos:end="25:17">

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="25:19" pos:end="25:43">/* CPUID not supported */</comment>



    <expr_stmt pos:start="29:5" pos:end="29:67"><expr pos:start="29:5" pos:end="29:66"><call pos:start="29:5" pos:end="29:66"><name pos:start="29:5" pos:end="29:9">cpuid</name><argument_list pos:start="29:10" pos:end="29:66">(<argument pos:start="29:11" pos:end="29:11"><expr pos:start="29:11" pos:end="29:11"><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr></argument>, <argument pos:start="29:14" pos:end="29:26"><expr pos:start="29:14" pos:end="29:26"><name pos:start="29:14" pos:end="29:26">max_std_level</name></expr></argument>, <argument pos:start="29:29" pos:end="29:39"><expr pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:34">vendor</name><operator pos:start="29:35" pos:end="29:35">.</operator><name pos:start="29:36" pos:end="29:36">i</name><index pos:start="29:37" pos:end="29:39">[<expr pos:start="29:38" pos:end="29:38"><literal type="number" pos:start="29:38" pos:end="29:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:42" pos:end="29:52"><expr pos:start="29:42" pos:end="29:52"><name pos:start="29:42" pos:end="29:52"><name pos:start="29:42" pos:end="29:47">vendor</name><operator pos:start="29:48" pos:end="29:48">.</operator><name pos:start="29:49" pos:end="29:49">i</name><index pos:start="29:50" pos:end="29:52">[<expr pos:start="29:51" pos:end="29:51"><literal type="number" pos:start="29:51" pos:end="29:51">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:55" pos:end="29:65"><expr pos:start="29:55" pos:end="29:65"><name pos:start="29:55" pos:end="29:65"><name pos:start="29:55" pos:end="29:60">vendor</name><operator pos:start="29:61" pos:end="29:61">.</operator><name pos:start="29:62" pos:end="29:62">i</name><index pos:start="29:63" pos:end="29:65">[<expr pos:start="29:64" pos:end="29:64"><literal type="number" pos:start="29:64" pos:end="29:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="105:5"><if pos:start="33:5" pos:end="105:5">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:21">max_std_level</name> <operator pos:start="33:23" pos:end="33:24">&gt;=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">1</literal></expr>)</condition> <block pos:start="33:29" pos:end="105:5">{<block_content pos:start="35:9" pos:end="104:0">

        <expr_stmt pos:start="35:9" pos:end="35:42"><expr pos:start="35:9" pos:end="35:41"><call pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:13">cpuid</name><argument_list pos:start="35:14" pos:end="35:41">(<argument pos:start="35:15" pos:end="35:15"><expr pos:start="35:15" pos:end="35:15"><literal type="number" pos:start="35:15" pos:end="35:15">1</literal></expr></argument>, <argument pos:start="35:18" pos:end="35:20"><expr pos:start="35:18" pos:end="35:20"><name pos:start="35:18" pos:end="35:20">eax</name></expr></argument>, <argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">ebx</name></expr></argument>, <argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">ecx</name></expr></argument>, <argument pos:start="35:33" pos:end="35:40"><expr pos:start="35:33" pos:end="35:40"><name pos:start="35:33" pos:end="35:40">std_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:59"><expr pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:14">family</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <operator pos:start="37:18" pos:end="37:18">(</operator><operator pos:start="37:19" pos:end="37:19">(</operator><name pos:start="37:20" pos:end="37:22">eax</name> <operator pos:start="37:24" pos:end="37:25">&gt;&gt;</operator> <literal type="number" pos:start="37:27" pos:end="37:27">8</literal><operator pos:start="37:28" pos:end="37:28">)</operator> <operator pos:start="37:30" pos:end="37:30">&amp;</operator> <literal type="number" pos:start="37:32" pos:end="37:34">0xf</literal><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:37">+</operator> <operator pos:start="37:39" pos:end="37:39">(</operator><operator pos:start="37:40" pos:end="37:40">(</operator><name pos:start="37:41" pos:end="37:43">eax</name> <operator pos:start="37:45" pos:end="37:46">&gt;&gt;</operator> <literal type="number" pos:start="37:48" pos:end="37:49">20</literal><operator pos:start="37:50" pos:end="37:50">)</operator> <operator pos:start="37:52" pos:end="37:52">&amp;</operator> <literal type="number" pos:start="37:54" pos:end="37:57">0xff</literal><operator pos:start="37:58" pos:end="37:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:13">model</name>  <operator pos:start="39:16" pos:end="39:16">=</operator> <operator pos:start="39:18" pos:end="39:18">(</operator><operator pos:start="39:19" pos:end="39:19">(</operator><name pos:start="39:20" pos:end="39:22">eax</name> <operator pos:start="39:24" pos:end="39:25">&gt;&gt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">4</literal><operator pos:start="39:28" pos:end="39:28">)</operator> <operator pos:start="39:30" pos:end="39:30">&amp;</operator> <literal type="number" pos:start="39:32" pos:end="39:34">0xf</literal><operator pos:start="39:35" pos:end="39:35">)</operator> <operator pos:start="39:37" pos:end="39:37">+</operator> <operator pos:start="39:39" pos:end="39:39">(</operator><operator pos:start="39:40" pos:end="39:40">(</operator><name pos:start="39:41" pos:end="39:43">eax</name> <operator pos:start="39:45" pos:end="39:46">&gt;&gt;</operator> <literal type="number" pos:start="39:48" pos:end="39:49">12</literal><operator pos:start="39:50" pos:end="39:50">)</operator> <operator pos:start="39:52" pos:end="39:52">&amp;</operator> <literal type="number" pos:start="39:54" pos:end="39:57">0xf0</literal><operator pos:start="39:58" pos:end="39:58">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="43:37"><if pos:start="41:9" pos:end="43:37">if <condition pos:start="41:12" pos:end="41:33">(<expr pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:20">std_caps</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <operator pos:start="41:24" pos:end="41:24">(</operator><literal type="number" pos:start="41:25" pos:end="41:25">1</literal> <operator pos:start="41:27" pos:end="41:28">&lt;&lt;</operator> <literal type="number" pos:start="41:30" pos:end="41:31">15</literal><operator pos:start="41:32" pos:end="41:32">)</operator></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:37"><block_content pos:start="43:13" pos:end="43:37">

            <expr_stmt pos:start="43:13" pos:end="43:37"><expr pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:16">rval</name> <operator pos:start="43:18" pos:end="43:19">|=</operator> <name pos:start="43:21" pos:end="43:36">AV_CPU_FLAG_CMOV</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="47:36"><if pos:start="45:9" pos:end="47:36">if <condition pos:start="45:12" pos:end="45:33">(<expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:20">std_caps</name> <operator pos:start="45:22" pos:end="45:22">&amp;</operator> <operator pos:start="45:24" pos:end="45:24">(</operator><literal type="number" pos:start="45:25" pos:end="45:25">1</literal> <operator pos:start="45:27" pos:end="45:28">&lt;&lt;</operator> <literal type="number" pos:start="45:30" pos:end="45:31">23</literal><operator pos:start="45:32" pos:end="45:32">)</operator></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:36"><block_content pos:start="47:13" pos:end="47:36">

            <expr_stmt pos:start="47:13" pos:end="47:36"><expr pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:16">rval</name> <operator pos:start="47:18" pos:end="47:19">|=</operator> <name pos:start="47:21" pos:end="47:35">AV_CPU_FLAG_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="54:0"><if pos:start="49:9" pos:end="54:0">if <condition pos:start="49:12" pos:end="49:33">(<expr pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:20">std_caps</name> <operator pos:start="49:22" pos:end="49:22">&amp;</operator> <operator pos:start="49:24" pos:end="49:24">(</operator><literal type="number" pos:start="49:25" pos:end="49:25">1</literal> <operator pos:start="49:27" pos:end="49:28">&lt;&lt;</operator> <literal type="number" pos:start="49:30" pos:end="49:31">25</literal><operator pos:start="49:32" pos:end="49:32">)</operator></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="54:0"><block_content pos:start="51:13" pos:end="54:0">

            <expr_stmt pos:start="51:13" pos:end="54:0"><expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:16">rval</name> <operator pos:start="51:18" pos:end="51:19">|=</operator> <name pos:start="51:21" pos:end="51:38">AV_CPU_FLAG_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="53:1" pos:end="53:12">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:12">HAVE_SSE</name></expr></cpp:if>

        <if_stmt pos:start="55:9" pos:end="57:36"><if pos:start="55:9" pos:end="57:36">if <condition pos:start="55:12" pos:end="55:33">(<expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:20">std_caps</name> <operator pos:start="55:22" pos:end="55:22">&amp;</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><literal type="number" pos:start="55:25" pos:end="55:25">1</literal> <operator pos:start="55:27" pos:end="55:28">&lt;&lt;</operator> <literal type="number" pos:start="55:30" pos:end="55:31">25</literal><operator pos:start="55:32" pos:end="55:32">)</operator></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:36"><block_content pos:start="57:13" pos:end="57:36">

            <expr_stmt pos:start="57:13" pos:end="57:36"><expr pos:start="57:13" pos:end="57:35"><name pos:start="57:13" pos:end="57:16">rval</name> <operator pos:start="57:18" pos:end="57:19">|=</operator> <name pos:start="57:21" pos:end="57:35">AV_CPU_FLAG_SSE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="61:37"><if pos:start="59:9" pos:end="61:37">if <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:20">std_caps</name> <operator pos:start="59:22" pos:end="59:22">&amp;</operator> <operator pos:start="59:24" pos:end="59:24">(</operator><literal type="number" pos:start="59:25" pos:end="59:25">1</literal> <operator pos:start="59:27" pos:end="59:28">&lt;&lt;</operator> <literal type="number" pos:start="59:30" pos:end="59:31">26</literal><operator pos:start="59:32" pos:end="59:32">)</operator></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:37"><block_content pos:start="61:13" pos:end="61:37">

            <expr_stmt pos:start="61:13" pos:end="61:37"><expr pos:start="61:13" pos:end="61:36"><name pos:start="61:13" pos:end="61:16">rval</name> <operator pos:start="61:18" pos:end="61:19">|=</operator> <name pos:start="61:21" pos:end="61:36">AV_CPU_FLAG_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="65:37"><if pos:start="63:9" pos:end="65:37">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:15">ecx</name> <operator pos:start="63:17" pos:end="63:17">&amp;</operator> <literal type="number" pos:start="63:19" pos:end="63:19">1</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:37"><block_content pos:start="65:13" pos:end="65:37">

            <expr_stmt pos:start="65:13" pos:end="65:37"><expr pos:start="65:13" pos:end="65:36"><name pos:start="65:13" pos:end="65:16">rval</name> <operator pos:start="65:18" pos:end="65:19">|=</operator> <name pos:start="65:21" pos:end="65:36">AV_CPU_FLAG_SSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:38"><if pos:start="67:9" pos:end="69:38">if <condition pos:start="67:12" pos:end="67:30">(<expr pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:15">ecx</name> <operator pos:start="67:17" pos:end="67:17">&amp;</operator> <literal type="number" pos:start="67:19" pos:end="67:28">0x00000200</literal></expr> )</condition><block type="pseudo" pos:start="69:13" pos:end="69:38"><block_content pos:start="69:13" pos:end="69:38">

            <expr_stmt pos:start="69:13" pos:end="69:38"><expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:16">rval</name> <operator pos:start="69:18" pos:end="69:19">|=</operator> <name pos:start="69:21" pos:end="69:37">AV_CPU_FLAG_SSSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="73:37"><if pos:start="71:9" pos:end="73:37">if <condition pos:start="71:12" pos:end="71:30">(<expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:15">ecx</name> <operator pos:start="71:17" pos:end="71:17">&amp;</operator> <literal type="number" pos:start="71:19" pos:end="71:28">0x00080000</literal></expr> )</condition><block type="pseudo" pos:start="73:13" pos:end="73:37"><block_content pos:start="73:13" pos:end="73:37">

            <expr_stmt pos:start="73:13" pos:end="73:37"><expr pos:start="73:13" pos:end="73:36"><name pos:start="73:13" pos:end="73:16">rval</name> <operator pos:start="73:18" pos:end="73:19">|=</operator> <name pos:start="73:21" pos:end="73:36">AV_CPU_FLAG_SSE4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="80:0"><if pos:start="75:9" pos:end="80:0">if <condition pos:start="75:12" pos:end="75:30">(<expr pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:15">ecx</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <literal type="number" pos:start="75:19" pos:end="75:28">0x00100000</literal></expr> )</condition><block type="pseudo" pos:start="77:13" pos:end="80:0"><block_content pos:start="77:13" pos:end="80:0">

            <expr_stmt pos:start="77:13" pos:end="80:0"><expr pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:16">rval</name> <operator pos:start="77:18" pos:end="77:19">|=</operator> <name pos:start="77:21" pos:end="77:37">AV_CPU_FLAG_SSE42</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="79:1" pos:end="79:12">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:12"><name pos:start="79:5" pos:end="79:12">HAVE_AVX</name></expr></cpp:if>

        <comment type="block" pos:start="81:9" pos:end="81:39">/* Check OXSAVE and AVX bits */</comment>

        <if_stmt pos:start="83:9" pos:end="104:0"><if pos:start="83:9" pos:end="104:0">if <condition pos:start="83:12" pos:end="83:45">(<expr pos:start="83:13" pos:end="83:44"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">ecx</name> <operator pos:start="83:18" pos:end="83:18">&amp;</operator> <literal type="number" pos:start="83:20" pos:end="83:29">0x18000000</literal><operator pos:start="83:30" pos:end="83:30">)</operator> <operator pos:start="83:32" pos:end="83:33">==</operator> <literal type="number" pos:start="83:35" pos:end="83:44">0x18000000</literal></expr>)</condition> <block pos:start="83:47" pos:end="104:0">{<block_content pos:start="87:13" pos:end="97:13">

            <comment type="block" pos:start="85:13" pos:end="85:38">/* Check for OS support */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:32"><expr pos:start="87:13" pos:end="87:31"><call pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:18">xgetbv</name><argument_list pos:start="87:19" pos:end="87:31">(<argument pos:start="87:20" pos:end="87:20"><expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr></argument>, <argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:25">eax</name></expr></argument>, <argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="97:13"><if pos:start="89:13" pos:end="97:13">if <condition pos:start="89:16" pos:end="89:35">(<expr pos:start="89:17" pos:end="89:34"><operator pos:start="89:17" pos:end="89:17">(</operator><name pos:start="89:18" pos:end="89:20">eax</name> <operator pos:start="89:22" pos:end="89:22">&amp;</operator> <literal type="number" pos:start="89:24" pos:end="89:26">0x6</literal><operator pos:start="89:27" pos:end="89:27">)</operator> <operator pos:start="89:29" pos:end="89:30">==</operator> <literal type="number" pos:start="89:32" pos:end="89:34">0x6</literal></expr>)</condition> <block pos:start="89:37" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:45">

                <expr_stmt pos:start="91:17" pos:end="91:40"><expr pos:start="91:17" pos:end="91:39"><name pos:start="91:17" pos:end="91:20">rval</name> <operator pos:start="91:22" pos:end="91:23">|=</operator> <name pos:start="91:25" pos:end="91:39">AV_CPU_FLAG_AVX</name></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="95:45"><if pos:start="93:17" pos:end="95:45">if <condition pos:start="93:20" pos:end="93:37">(<expr pos:start="93:21" pos:end="93:36"><name pos:start="93:21" pos:end="93:23">ecx</name> <operator pos:start="93:25" pos:end="93:25">&amp;</operator> <literal type="number" pos:start="93:27" pos:end="93:36">0x00001000</literal></expr>)</condition><block type="pseudo" pos:start="95:21" pos:end="95:45"><block_content pos:start="95:21" pos:end="95:45">

                    <expr_stmt pos:start="95:21" pos:end="95:45"><expr pos:start="95:21" pos:end="95:44"><name pos:start="95:21" pos:end="95:24">rval</name> <operator pos:start="95:26" pos:end="95:27">|=</operator> <name pos:start="95:29" pos:end="95:44">AV_CPU_FLAG_FMA3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="101:8" pos:end="101:21">/* HAVE_AVX */</comment>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="103:8" pos:end="103:21">/* HAVE_SSE */</comment>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="107:5" pos:end="131:5"><if pos:start="107:5" pos:end="131:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:21">max_std_level</name> <operator pos:start="107:23" pos:end="107:24">&gt;=</operator> <literal type="number" pos:start="107:26" pos:end="107:26">7</literal></expr>)</condition> <block pos:start="107:29" pos:end="131:5">{<block_content pos:start="109:9" pos:end="129:9">

        <expr_stmt pos:start="109:9" pos:end="112:0"><expr pos:start="109:9" pos:end="109:36"><call pos:start="109:9" pos:end="109:36"><name pos:start="109:9" pos:end="109:13">cpuid</name><argument_list pos:start="109:14" pos:end="109:36">(<argument pos:start="109:15" pos:end="109:15"><expr pos:start="109:15" pos:end="109:15"><literal type="number" pos:start="109:15" pos:end="109:15">7</literal></expr></argument>, <argument pos:start="109:18" pos:end="109:20"><expr pos:start="109:18" pos:end="109:20"><name pos:start="109:18" pos:end="109:20">eax</name></expr></argument>, <argument pos:start="109:23" pos:end="109:25"><expr pos:start="109:23" pos:end="109:25"><name pos:start="109:23" pos:end="109:25">ebx</name></expr></argument>, <argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">ecx</name></expr></argument>, <argument pos:start="109:33" pos:end="109:35"><expr pos:start="109:33" pos:end="109:35"><name pos:start="109:33" pos:end="109:35">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="111:1" pos:end="111:13">#<cpp:directive pos:start="111:2" pos:end="111:3">if</cpp:directive> <expr pos:start="111:5" pos:end="111:13"><name pos:start="111:5" pos:end="111:13">HAVE_AVX2</name></expr></cpp:if>

        <if_stmt pos:start="113:9" pos:end="118:0"><if pos:start="113:9" pos:end="118:0">if <condition pos:start="113:12" pos:end="113:29">(<expr pos:start="113:13" pos:end="113:28"><name pos:start="113:13" pos:end="113:15">ebx</name> <operator pos:start="113:17" pos:end="113:17">&amp;</operator> <literal type="number" pos:start="113:19" pos:end="113:28">0x00000020</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="118:0"><block_content pos:start="115:13" pos:end="118:0">

            <expr_stmt pos:start="115:13" pos:end="118:0"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:16">rval</name> <operator pos:start="115:18" pos:end="115:19">|=</operator> <name pos:start="115:21" pos:end="115:36">AV_CPU_FLAG_AVX2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="117:8" pos:end="117:22">/* HAVE_AVX2 */</comment>

        <comment type="block" pos:start="119:9" pos:end="119:42">/* BMI1/2 don't need OS support */</comment>

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:29">(<expr pos:start="121:13" pos:end="121:28"><name pos:start="121:13" pos:end="121:15">ebx</name> <operator pos:start="121:17" pos:end="121:17">&amp;</operator> <literal type="number" pos:start="121:19" pos:end="121:28">0x00000008</literal></expr>)</condition> <block pos:start="121:31" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:41">

            <expr_stmt pos:start="123:13" pos:end="123:37"><expr pos:start="123:13" pos:end="123:36"><name pos:start="123:13" pos:end="123:16">rval</name> <operator pos:start="123:18" pos:end="123:19">|=</operator> <name pos:start="123:21" pos:end="123:36">AV_CPU_FLAG_BMI1</name></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="127:41"><if pos:start="125:13" pos:end="127:41">if <condition pos:start="125:16" pos:end="125:33">(<expr pos:start="125:17" pos:end="125:32"><name pos:start="125:17" pos:end="125:19">ebx</name> <operator pos:start="125:21" pos:end="125:21">&amp;</operator> <literal type="number" pos:start="125:23" pos:end="125:32">0x00000100</literal></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:41"><block_content pos:start="127:17" pos:end="127:41">

                <expr_stmt pos:start="127:17" pos:end="127:41"><expr pos:start="127:17" pos:end="127:40"><name pos:start="127:17" pos:end="127:20">rval</name> <operator pos:start="127:22" pos:end="127:23">|=</operator> <name pos:start="127:25" pos:end="127:40">AV_CPU_FLAG_BMI2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:52"><expr pos:start="135:5" pos:end="135:51"><call pos:start="135:5" pos:end="135:51"><name pos:start="135:5" pos:end="135:9">cpuid</name><argument_list pos:start="135:10" pos:end="135:51">(<argument pos:start="135:11" pos:end="135:20"><expr pos:start="135:11" pos:end="135:20"><literal type="number" pos:start="135:11" pos:end="135:20">0x80000000</literal></expr></argument>, <argument pos:start="135:23" pos:end="135:35"><expr pos:start="135:23" pos:end="135:35"><name pos:start="135:23" pos:end="135:35">max_ext_level</name></expr></argument>, <argument pos:start="135:38" pos:end="135:40"><expr pos:start="135:38" pos:end="135:40"><name pos:start="135:38" pos:end="135:40">ebx</name></expr></argument>, <argument pos:start="135:43" pos:end="135:45"><expr pos:start="135:43" pos:end="135:45"><name pos:start="135:43" pos:end="135:45">ecx</name></expr></argument>, <argument pos:start="135:48" pos:end="135:50"><expr pos:start="135:48" pos:end="135:50"><name pos:start="135:48" pos:end="135:50">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="201:5"><if pos:start="139:5" pos:end="201:5">if <condition pos:start="139:8" pos:end="139:36">(<expr pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:21">max_ext_level</name> <operator pos:start="139:23" pos:end="139:24">&gt;=</operator> <literal type="number" pos:start="139:26" pos:end="139:35">0x80000001</literal></expr>)</condition> <block pos:start="139:38" pos:end="201:5">{<block_content pos:start="141:9" pos:end="199:9">

        <expr_stmt pos:start="141:9" pos:end="141:51"><expr pos:start="141:9" pos:end="141:50"><call pos:start="141:9" pos:end="141:50"><name pos:start="141:9" pos:end="141:13">cpuid</name><argument_list pos:start="141:14" pos:end="141:50">(<argument pos:start="141:15" pos:end="141:24"><expr pos:start="141:15" pos:end="141:24"><literal type="number" pos:start="141:15" pos:end="141:24">0x80000001</literal></expr></argument>, <argument pos:start="141:27" pos:end="141:29"><expr pos:start="141:27" pos:end="141:29"><name pos:start="141:27" pos:end="141:29">eax</name></expr></argument>, <argument pos:start="141:32" pos:end="141:34"><expr pos:start="141:32" pos:end="141:34"><name pos:start="141:32" pos:end="141:34">ebx</name></expr></argument>, <argument pos:start="141:37" pos:end="141:39"><expr pos:start="141:37" pos:end="141:39"><name pos:start="141:37" pos:end="141:39">ecx</name></expr></argument>, <argument pos:start="141:42" pos:end="141:49"><expr pos:start="141:42" pos:end="141:49"><name pos:start="141:42" pos:end="141:49">ext_caps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="145:38"><if pos:start="143:9" pos:end="145:38">if <condition pos:start="143:12" pos:end="143:34">(<expr pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:20">ext_caps</name> <operator pos:start="143:22" pos:end="143:22">&amp;</operator> <operator pos:start="143:24" pos:end="143:24">(</operator><literal type="number" pos:start="143:25" pos:end="143:26">1U</literal> <operator pos:start="143:28" pos:end="143:29">&lt;&lt;</operator> <literal type="number" pos:start="143:31" pos:end="143:32">31</literal><operator pos:start="143:33" pos:end="143:33">)</operator></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:38"><block_content pos:start="145:13" pos:end="145:38">

            <expr_stmt pos:start="145:13" pos:end="145:38"><expr pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:16">rval</name> <operator pos:start="145:18" pos:end="145:19">|=</operator> <name pos:start="145:21" pos:end="145:37">AV_CPU_FLAG_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="147:9" pos:end="149:41"><if pos:start="147:9" pos:end="149:41">if <condition pos:start="147:12" pos:end="147:33">(<expr pos:start="147:13" pos:end="147:32"><name pos:start="147:13" pos:end="147:20">ext_caps</name> <operator pos:start="147:22" pos:end="147:22">&amp;</operator> <operator pos:start="147:24" pos:end="147:24">(</operator><literal type="number" pos:start="147:25" pos:end="147:25">1</literal> <operator pos:start="147:27" pos:end="147:28">&lt;&lt;</operator> <literal type="number" pos:start="147:30" pos:end="147:31">30</literal><operator pos:start="147:32" pos:end="147:32">)</operator></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:41"><block_content pos:start="149:13" pos:end="149:41">

            <expr_stmt pos:start="149:13" pos:end="149:41"><expr pos:start="149:13" pos:end="149:40"><name pos:start="149:13" pos:end="149:16">rval</name> <operator pos:start="149:18" pos:end="149:19">|=</operator> <name pos:start="149:21" pos:end="149:40">AV_CPU_FLAG_3DNOWEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="153:36"><if pos:start="151:9" pos:end="153:36">if <condition pos:start="151:12" pos:end="151:33">(<expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:20">ext_caps</name> <operator pos:start="151:22" pos:end="151:22">&amp;</operator> <operator pos:start="151:24" pos:end="151:24">(</operator><literal type="number" pos:start="151:25" pos:end="151:25">1</literal> <operator pos:start="151:27" pos:end="151:28">&lt;&lt;</operator> <literal type="number" pos:start="151:30" pos:end="151:31">23</literal><operator pos:start="151:32" pos:end="151:32">)</operator></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:36"><block_content pos:start="153:13" pos:end="153:36">

            <expr_stmt pos:start="153:13" pos:end="153:36"><expr pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:16">rval</name> <operator pos:start="153:18" pos:end="153:19">|=</operator> <name pos:start="153:21" pos:end="153:35">AV_CPU_FLAG_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="155:9" pos:end="157:39"><if pos:start="155:9" pos:end="157:39">if <condition pos:start="155:12" pos:end="155:33">(<expr pos:start="155:13" pos:end="155:32"><name pos:start="155:13" pos:end="155:20">ext_caps</name> <operator pos:start="155:22" pos:end="155:22">&amp;</operator> <operator pos:start="155:24" pos:end="155:24">(</operator><literal type="number" pos:start="155:25" pos:end="155:25">1</literal> <operator pos:start="155:27" pos:end="155:28">&lt;&lt;</operator> <literal type="number" pos:start="155:30" pos:end="155:31">22</literal><operator pos:start="155:32" pos:end="155:32">)</operator></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:39"><block_content pos:start="157:13" pos:end="157:39">

            <expr_stmt pos:start="157:13" pos:end="157:39"><expr pos:start="157:13" pos:end="157:38"><name pos:start="157:13" pos:end="157:16">rval</name> <operator pos:start="157:18" pos:end="157:19">|=</operator> <name pos:start="157:21" pos:end="157:38">AV_CPU_FLAG_MMXEXT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="161:9" pos:end="173:35">/* Allow for selectively disabling SSE2 functions on AMD processors

           with SSE2 support but not SSE4a. This includes Athlon64, some

           Opteron, and some Sempron processors. MMX, SSE, or 3DNow! are faster

           than SSE2 often enough to utilize this special-case flag.

           AV_CPU_FLAG_SSE2 and AV_CPU_FLAG_SSE2SLOW are both set in this case

           so that SSE2 is used unless explicitly disabled by checking

           AV_CPU_FLAG_SSE2SLOW. */</comment>

        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="177:59">(<expr pos:start="175:13" pos:end="177:58"><operator pos:start="175:13" pos:end="175:13">!</operator><call pos:start="175:14" pos:end="175:50"><name pos:start="175:14" pos:end="175:20">strncmp</name><argument_list pos:start="175:21" pos:end="175:50">(<argument pos:start="175:22" pos:end="175:29"><expr pos:start="175:22" pos:end="175:29"><name pos:start="175:22" pos:end="175:29"><name pos:start="175:22" pos:end="175:27">vendor</name><operator pos:start="175:28" pos:end="175:28">.</operator><name pos:start="175:29" pos:end="175:29">c</name></name></expr></argument>, <argument pos:start="175:32" pos:end="175:45"><expr pos:start="175:32" pos:end="175:45"><literal type="string" pos:start="175:32" pos:end="175:45">"AuthenticAMD"</literal></expr></argument>, <argument pos:start="175:48" pos:end="175:49"><expr pos:start="175:48" pos:end="175:49"><literal type="number" pos:start="175:48" pos:end="175:49">12</literal></expr></argument>)</argument_list></call> <operator pos:start="175:52" pos:end="175:53">&amp;&amp;</operator>

            <name pos:start="177:13" pos:end="177:16">rval</name> <operator pos:start="177:18" pos:end="177:18">&amp;</operator> <name pos:start="177:20" pos:end="177:35">AV_CPU_FLAG_SSE2</name> <operator pos:start="177:37" pos:end="177:38">&amp;&amp;</operator> <operator pos:start="177:40" pos:end="177:40">!</operator><operator pos:start="177:41" pos:end="177:41">(</operator><name pos:start="177:42" pos:end="177:44">ecx</name> <operator pos:start="177:46" pos:end="177:46">&amp;</operator> <literal type="number" pos:start="177:48" pos:end="177:57">0x00000040</literal><operator pos:start="177:58" pos:end="177:58">)</operator></expr>)</condition> <block pos:start="177:61" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:41">

            <expr_stmt pos:start="179:13" pos:end="179:41"><expr pos:start="179:13" pos:end="179:40"><name pos:start="179:13" pos:end="179:16">rval</name> <operator pos:start="179:18" pos:end="179:19">|=</operator> <name pos:start="179:21" pos:end="179:40">AV_CPU_FLAG_SSE2SLOW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="185:9" pos:end="187:49">/* XOP and FMA4 use the AVX instruction coding scheme, so they can't be

         * used unless the OS has AVX support. */</comment>

        <if_stmt pos:start="189:9" pos:end="199:9"><if pos:start="189:9" pos:end="199:9">if <condition pos:start="189:12" pos:end="189:35">(<expr pos:start="189:13" pos:end="189:34"><name pos:start="189:13" pos:end="189:16">rval</name> <operator pos:start="189:18" pos:end="189:18">&amp;</operator> <name pos:start="189:20" pos:end="189:34">AV_CPU_FLAG_AVX</name></expr>)</condition> <block pos:start="189:37" pos:end="199:9">{<block_content pos:start="191:13" pos:end="197:41">

            <if_stmt pos:start="191:13" pos:end="193:40"><if pos:start="191:13" pos:end="193:40">if <condition pos:start="191:16" pos:end="191:33">(<expr pos:start="191:17" pos:end="191:32"><name pos:start="191:17" pos:end="191:19">ecx</name> <operator pos:start="191:21" pos:end="191:21">&amp;</operator> <literal type="number" pos:start="191:23" pos:end="191:32">0x00000800</literal></expr>)</condition><block type="pseudo" pos:start="193:17" pos:end="193:40"><block_content pos:start="193:17" pos:end="193:40">

                <expr_stmt pos:start="193:17" pos:end="193:40"><expr pos:start="193:17" pos:end="193:39"><name pos:start="193:17" pos:end="193:20">rval</name> <operator pos:start="193:22" pos:end="193:23">|=</operator> <name pos:start="193:25" pos:end="193:39">AV_CPU_FLAG_XOP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="195:13" pos:end="197:41"><if pos:start="195:13" pos:end="197:41">if <condition pos:start="195:16" pos:end="195:33">(<expr pos:start="195:17" pos:end="195:32"><name pos:start="195:17" pos:end="195:19">ecx</name> <operator pos:start="195:21" pos:end="195:21">&amp;</operator> <literal type="number" pos:start="195:23" pos:end="195:32">0x00010000</literal></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:41"><block_content pos:start="197:17" pos:end="197:41">

                <expr_stmt pos:start="197:17" pos:end="197:41"><expr pos:start="197:17" pos:end="197:40"><name pos:start="197:17" pos:end="197:20">rval</name> <operator pos:start="197:22" pos:end="197:23">|=</operator> <name pos:start="197:25" pos:end="197:40">AV_CPU_FLAG_FMA4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="252:0"><if pos:start="205:5" pos:end="252:0">if <condition pos:start="205:8" pos:end="205:47">(<expr pos:start="205:9" pos:end="205:46"><operator pos:start="205:9" pos:end="205:9">!</operator><call pos:start="205:10" pos:end="205:46"><name pos:start="205:10" pos:end="205:16">strncmp</name><argument_list pos:start="205:17" pos:end="205:46">(<argument pos:start="205:18" pos:end="205:25"><expr pos:start="205:18" pos:end="205:25"><name pos:start="205:18" pos:end="205:25"><name pos:start="205:18" pos:end="205:23">vendor</name><operator pos:start="205:24" pos:end="205:24">.</operator><name pos:start="205:25" pos:end="205:25">c</name></name></expr></argument>, <argument pos:start="205:28" pos:end="205:41"><expr pos:start="205:28" pos:end="205:41"><literal type="string" pos:start="205:28" pos:end="205:41">"GenuineIntel"</literal></expr></argument>, <argument pos:start="205:44" pos:end="205:45"><expr pos:start="205:44" pos:end="205:45"><literal type="number" pos:start="205:44" pos:end="205:45">12</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:49" pos:end="252:0">{<block_content pos:start="207:9" pos:end="245:37">

        <if_stmt pos:start="207:9" pos:end="231:9"><if pos:start="207:9" pos:end="231:9">if <condition pos:start="207:12" pos:end="207:70">(<expr pos:start="207:13" pos:end="207:69"><name pos:start="207:13" pos:end="207:18">family</name> <operator pos:start="207:20" pos:end="207:21">==</operator> <literal type="number" pos:start="207:23" pos:end="207:23">6</literal> <operator pos:start="207:25" pos:end="207:26">&amp;&amp;</operator> <operator pos:start="207:28" pos:end="207:28">(</operator><name pos:start="207:29" pos:end="207:33">model</name> <operator pos:start="207:35" pos:end="207:36">==</operator> <literal type="number" pos:start="207:38" pos:end="207:38">9</literal> <operator pos:start="207:40" pos:end="207:41">||</operator> <name pos:start="207:43" pos:end="207:47">model</name> <operator pos:start="207:49" pos:end="207:50">==</operator> <literal type="number" pos:start="207:52" pos:end="207:53">13</literal> <operator pos:start="207:55" pos:end="207:56">||</operator> <name pos:start="207:58" pos:end="207:62">model</name> <operator pos:start="207:64" pos:end="207:65">==</operator> <literal type="number" pos:start="207:67" pos:end="207:68">14</literal><operator pos:start="207:69" pos:end="207:69">)</operator></expr>)</condition> <block pos:start="207:72" pos:end="231:9">{<block_content pos:start="223:13" pos:end="229:64">

            <comment type="block" pos:start="209:13" pos:end="221:72">/* 6/9 (pentium-m "banias"), 6/13 (pentium-m "dothan"), and

             * 6/14 (core1 "yonah") theoretically support sse2, but it's

             * usually slower than mmx, so let's just pretend they don't.

             * AV_CPU_FLAG_SSE2 is disabled and AV_CPU_FLAG_SSE2SLOW is

             * enabled so that SSE2 is not used unless explicitly enabled

             * by checking AV_CPU_FLAG_SSE2SLOW. The same situation

             * applies for AV_CPU_FLAG_SSE3 and AV_CPU_FLAG_SSE3SLOW. */</comment>

            <if_stmt pos:start="223:13" pos:end="225:64"><if pos:start="223:13" pos:end="225:64">if <condition pos:start="223:16" pos:end="223:40">(<expr pos:start="223:17" pos:end="223:39"><name pos:start="223:17" pos:end="223:20">rval</name> <operator pos:start="223:22" pos:end="223:22">&amp;</operator> <name pos:start="223:24" pos:end="223:39">AV_CPU_FLAG_SSE2</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:64"><block_content pos:start="225:17" pos:end="225:64">

                <expr_stmt pos:start="225:17" pos:end="225:64"><expr pos:start="225:17" pos:end="225:63"><name pos:start="225:17" pos:end="225:20">rval</name> <operator pos:start="225:22" pos:end="225:23">^=</operator> <name pos:start="225:25" pos:end="225:44">AV_CPU_FLAG_SSE2SLOW</name> <operator pos:start="225:46" pos:end="225:46">|</operator> <name pos:start="225:48" pos:end="225:63">AV_CPU_FLAG_SSE2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="227:13" pos:end="229:64"><if pos:start="227:13" pos:end="229:64">if <condition pos:start="227:16" pos:end="227:40">(<expr pos:start="227:17" pos:end="227:39"><name pos:start="227:17" pos:end="227:20">rval</name> <operator pos:start="227:22" pos:end="227:22">&amp;</operator> <name pos:start="227:24" pos:end="227:39">AV_CPU_FLAG_SSE3</name></expr>)</condition><block type="pseudo" pos:start="229:17" pos:end="229:64"><block_content pos:start="229:17" pos:end="229:64">

                <expr_stmt pos:start="229:17" pos:end="229:64"><expr pos:start="229:17" pos:end="229:63"><name pos:start="229:17" pos:end="229:20">rval</name> <operator pos:start="229:22" pos:end="229:23">^=</operator> <name pos:start="229:25" pos:end="229:44">AV_CPU_FLAG_SSE3SLOW</name> <operator pos:start="229:46" pos:end="229:46">|</operator> <name pos:start="229:48" pos:end="229:63">AV_CPU_FLAG_SSE3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="233:9" pos:end="241:36">/* The Atom processor has SSSE3 support, which is useful in many cases,

         * but sometimes the SSSE3 version is slower than the SSE2 equivalent

         * on the Atom, but is generally faster on other processors supporting

         * SSSE3. This flag allows for selectively disabling certain SSSE3

         * functions on the Atom. */</comment>

        <if_stmt pos:start="243:9" pos:end="245:37"><if pos:start="243:9" pos:end="245:37">if <condition pos:start="243:12" pos:end="243:39">(<expr pos:start="243:13" pos:end="243:38"><name pos:start="243:13" pos:end="243:18">family</name> <operator pos:start="243:20" pos:end="243:21">==</operator> <literal type="number" pos:start="243:23" pos:end="243:23">6</literal> <operator pos:start="243:25" pos:end="243:26">&amp;&amp;</operator> <name pos:start="243:28" pos:end="243:32">model</name> <operator pos:start="243:34" pos:end="243:35">==</operator> <literal type="number" pos:start="243:37" pos:end="243:38">28</literal></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:37"><block_content pos:start="245:13" pos:end="245:37">

            <expr_stmt pos:start="245:13" pos:end="245:37"><expr pos:start="245:13" pos:end="245:36"><name pos:start="245:13" pos:end="245:16">rval</name> <operator pos:start="245:18" pos:end="245:19">|=</operator> <name pos:start="245:21" pos:end="245:36">AV_CPU_FLAG_ATOM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:endif pos:start="251:1" pos:end="251:6">#<cpp:directive pos:start="251:2" pos:end="251:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="251:8" pos:end="251:18">/* cpuid */</comment>



    <return pos:start="255:5" pos:end="255:16">return <expr pos:start="255:12" pos:end="255:15"><name pos:start="255:12" pos:end="255:15">rval</name></expr>;</return>

</block_content>}</block></function>
</unit>
