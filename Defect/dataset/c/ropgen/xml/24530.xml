<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24530.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">ehci_advance_async_state</name><parameter_list pos:start="1:37" pos:end="1:53">(<parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:46">EHCIState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">ehci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:5">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:19">async</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">1</literal></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="105:5">switch<condition pos:start="9:11" pos:end="9:39">(<expr pos:start="9:12" pos:end="9:38"><call pos:start="9:12" pos:end="9:38"><name pos:start="9:12" pos:end="9:25">ehci_get_state</name><argument_list pos:start="9:26" pos:end="9:38">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">ehci</name></expr></argument>, <argument pos:start="9:33" pos:end="9:37"><expr pos:start="9:33" pos:end="9:37"><name pos:start="9:33" pos:end="9:37">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:41" pos:end="105:5">{<block_content pos:start="11:5" pos:end="103:18">

    <case pos:start="11:5" pos:end="11:22">case <expr pos:start="11:10" pos:end="11:21"><name pos:start="11:10" pos:end="11:21">EST_INACTIVE</name></expr>:</case>

        <if_stmt pos:start="13:9" pos:end="17:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:41">(<expr pos:start="13:13" pos:end="13:40"><operator pos:start="13:13" pos:end="13:13">!</operator><operator pos:start="13:14" pos:end="13:14">(</operator><name pos:start="13:15" pos:end="13:26"><name pos:start="13:15" pos:end="13:18">ehci</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:26">usbcmd</name></name> <operator pos:start="13:28" pos:end="13:28">&amp;</operator> <name pos:start="13:30" pos:end="13:39">USBCMD_ASE</name><operator pos:start="13:40" pos:end="13:40">)</operator></expr>)</condition> <block pos:start="13:43" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:18">

            <break pos:start="15:13" pos:end="15:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:42"><expr pos:start="19:9" pos:end="19:41"><call pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:23">ehci_set_usbsts</name><argument_list pos:start="19:24" pos:end="19:41">(<argument pos:start="19:25" pos:end="19:28"><expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">ehci</name></expr></argument>, <argument pos:start="19:31" pos:end="19:40"><expr pos:start="19:31" pos:end="19:40"><name pos:start="19:31" pos:end="19:40">USBSTS_ASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:48"><expr pos:start="21:9" pos:end="21:47"><call pos:start="21:9" pos:end="21:47"><name pos:start="21:9" pos:end="21:22">ehci_set_state</name><argument_list pos:start="21:23" pos:end="21:47">(<argument pos:start="21:24" pos:end="21:27"><expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">ehci</name></expr></argument>, <argument pos:start="21:30" pos:end="21:34"><expr pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:34">async</name></expr></argument>, <argument pos:start="21:37" pos:end="21:46"><expr pos:start="21:37" pos:end="21:46"><name pos:start="21:37" pos:end="21:46">EST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="23:9" pos:end="23:43">// No break, fall through to ACTIVE</comment>



    <case pos:start="27:5" pos:end="27:20">case <expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:19">EST_ACTIVE</name></expr>:</case>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:42">( <expr pos:start="29:14" pos:end="29:41"><operator pos:start="29:14" pos:end="29:14">!</operator><operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:27"><name pos:start="29:16" pos:end="29:19">ehci</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:27">usbcmd</name></name> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <name pos:start="29:31" pos:end="29:40">USBCMD_ASE</name><operator pos:start="29:41" pos:end="29:41">)</operator></expr>)</condition> <block pos:start="29:44" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:18">

            <expr_stmt pos:start="31:13" pos:end="31:48"><expr pos:start="31:13" pos:end="31:47"><call pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:29">ehci_clear_usbsts</name><argument_list pos:start="31:30" pos:end="31:47">(<argument pos:start="31:31" pos:end="31:34"><expr pos:start="31:31" pos:end="31:34"><name pos:start="31:31" pos:end="31:34">ehci</name></expr></argument>, <argument pos:start="31:37" pos:end="31:46"><expr pos:start="31:37" pos:end="31:46"><name pos:start="31:37" pos:end="31:46">USBSTS_ASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:54"><expr pos:start="33:13" pos:end="33:53"><call pos:start="33:13" pos:end="33:53"><name pos:start="33:13" pos:end="33:26">ehci_set_state</name><argument_list pos:start="33:27" pos:end="33:53">(<argument pos:start="33:28" pos:end="33:31"><expr pos:start="33:28" pos:end="33:31"><name pos:start="33:28" pos:end="33:31">ehci</name></expr></argument>, <argument pos:start="33:34" pos:end="33:38"><expr pos:start="33:34" pos:end="33:38"><name pos:start="33:34" pos:end="33:38">async</name></expr></argument>, <argument pos:start="33:41" pos:end="33:52"><expr pos:start="33:41" pos:end="33:52"><name pos:start="33:41" pos:end="33:52">EST_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="41:9" pos:end="47:11">/* If the doorbell is set, the guest wants to make a change to the

         * schedule. The host controller needs to release cached data.

         * (section 4.8.2)

         */</comment>

        <if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:39">(<expr pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:16">ehci</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:24">usbcmd</name></name> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <name pos:start="49:28" pos:end="49:38">USBCMD_IAAD</name></expr>)</condition> <block pos:start="49:41" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:18">

            <expr_stmt pos:start="51:13" pos:end="51:62"><expr pos:start="51:13" pos:end="51:61"><call pos:start="51:13" pos:end="51:61"><name pos:start="51:13" pos:end="51:19">DPRINTF</name><argument_list pos:start="51:20" pos:end="51:61">(<argument pos:start="51:21" pos:end="51:60"><expr pos:start="51:21" pos:end="51:60"><literal type="string" pos:start="51:21" pos:end="51:60">"ASYNC: doorbell request acknowledged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:41"><expr pos:start="53:13" pos:end="53:40"><name pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:16">ehci</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:24">usbcmd</name></name> <operator pos:start="53:26" pos:end="53:27">&amp;=</operator> <operator pos:start="53:29" pos:end="53:29">~</operator><name pos:start="53:30" pos:end="53:40">USBCMD_IAAD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:49"><expr pos:start="55:13" pos:end="55:48"><call pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:30">ehci_set_interrupt</name><argument_list pos:start="55:31" pos:end="55:48">(<argument pos:start="55:32" pos:end="55:35"><expr pos:start="55:32" pos:end="55:35"><name pos:start="55:32" pos:end="55:35">ehci</name></expr></argument>, <argument pos:start="55:38" pos:end="55:47"><expr pos:start="55:38" pos:end="55:47"><name pos:start="55:38" pos:end="55:47">USBSTS_IAA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="63:9" pos:end="63:46">/* make sure guest has acknowledged */</comment>

        <comment type="block" pos:start="65:9" pos:end="65:43">/* TO-DO: is this really needed? */</comment>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:38">(<expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:16">ehci</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:24">usbsts</name></name> <operator pos:start="67:26" pos:end="67:26">&amp;</operator> <name pos:start="67:28" pos:end="67:37">USBSTS_IAA</name></expr>)</condition> <block pos:start="67:40" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:18">

            <expr_stmt pos:start="69:13" pos:end="69:51"><expr pos:start="69:13" pos:end="69:50"><call pos:start="69:13" pos:end="69:50"><name pos:start="69:13" pos:end="69:19">DPRINTF</name><argument_list pos:start="69:20" pos:end="69:50">(<argument pos:start="69:21" pos:end="69:49"><expr pos:start="69:21" pos:end="69:49"><literal type="string" pos:start="69:21" pos:end="69:49">"IAA status bit still set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:54">/* check that address register has been set */</comment>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:37">(<expr pos:start="79:13" pos:end="79:36"><name pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:16">ehci</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:31">asynclistaddr</name></name> <operator pos:start="79:33" pos:end="79:34">==</operator> <literal type="number" pos:start="79:36" pos:end="79:36">0</literal></expr>)</condition> <block pos:start="79:39" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:18">

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:54"><expr pos:start="87:9" pos:end="87:53"><call pos:start="87:9" pos:end="87:53"><name pos:start="87:9" pos:end="87:22">ehci_set_state</name><argument_list pos:start="87:23" pos:end="87:53">(<argument pos:start="87:24" pos:end="87:27"><expr pos:start="87:24" pos:end="87:27"><name pos:start="87:24" pos:end="87:27">ehci</name></expr></argument>, <argument pos:start="87:30" pos:end="87:34"><expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">async</name></expr></argument>, <argument pos:start="87:37" pos:end="87:52"><expr pos:start="87:37" pos:end="87:52"><name pos:start="87:37" pos:end="87:52">EST_WAITLISTHEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><call pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:26">ehci_advance_state</name><argument_list pos:start="89:27" pos:end="89:39">(<argument pos:start="89:28" pos:end="89:31"><expr pos:start="89:28" pos:end="89:31"><name pos:start="89:28" pos:end="89:31">ehci</name></expr></argument>, <argument pos:start="89:34" pos:end="89:38"><expr pos:start="89:34" pos:end="89:38"><name pos:start="89:34" pos:end="89:38">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <default pos:start="95:5" pos:end="95:12">default:</default>

        <comment type="block" pos:start="97:9" pos:end="97:60">/* this should only be due to a developer mistake */</comment>

        <expr_stmt pos:start="99:9" pos:end="101:55"><expr pos:start="99:9" pos:end="101:54"><call pos:start="99:9" pos:end="101:54"><name pos:start="99:9" pos:end="99:15">fprintf</name><argument_list pos:start="99:16" pos:end="101:54">(<argument pos:start="99:17" pos:end="99:22"><expr pos:start="99:17" pos:end="99:22"><name pos:start="99:17" pos:end="99:22">stderr</name></expr></argument>, <argument pos:start="99:25" pos:end="101:39"><expr pos:start="99:25" pos:end="101:39"><literal type="string" pos:start="99:25" pos:end="99:59">"ehci: Bad asynchronous state %d. "</literal>

                <literal type="string" pos:start="101:17" pos:end="101:39">"Resetting to active\n"</literal></expr></argument>, <argument pos:start="101:42" pos:end="101:53"><expr pos:start="101:42" pos:end="101:53"><name pos:start="101:42" pos:end="101:53"><name pos:start="101:42" pos:end="101:45">ehci</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:53">astate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:18"><expr pos:start="103:9" pos:end="103:17"><call pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:14">assert</name><argument_list pos:start="103:15" pos:end="103:17">(<argument pos:start="103:16" pos:end="103:16"><expr pos:start="103:16" pos:end="103:16"><literal type="number" pos:start="103:16" pos:end="103:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
