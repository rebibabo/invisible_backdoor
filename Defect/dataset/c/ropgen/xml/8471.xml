<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8471.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:27">sdp_attr_get</name><parameter_list pos:start="1:28" pos:end="3:62">(<parameter pos:start="1:29" pos:end="1:60"><decl pos:start="1:29" pos:end="1:60"><type pos:start="1:29" pos:end="1:60"><name pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:34">struct</name> <name pos:start="1:36" pos:end="1:55">bt_l2cap_sdp_state_s</name></name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">sdp</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:28"><decl pos:start="3:17" pos:end="3:28"><type pos:start="3:17" pos:end="3:28"><name pos:start="3:17" pos:end="3:23">uint8_t</name> <modifier pos:start="3:25" pos:end="3:25">*</modifier></type><name pos:start="3:26" pos:end="3:28">rsp</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:43">uint8_t</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:48">req</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:61"><decl pos:start="3:51" pos:end="3:61"><type pos:start="3:51" pos:end="3:61"><name pos:start="3:51" pos:end="3:57">ssize_t</name></type> <name pos:start="3:59" pos:end="3:61">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:19">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">ssize_t</name></type> <name pos:start="7:13" pos:end="7:18">seqlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:16">start</name></decl>, <decl pos:start="9:19" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:21">end</name></decl>, <decl pos:start="9:24" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:26">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:18">handle</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:33"><name pos:start="13:5" pos:end="13:31"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:31">sdp_service_record_s</name></name> <modifier pos:start="13:33" pos:end="13:33">*</modifier></type><name pos:start="13:34" pos:end="13:39">record</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">lst</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:28">/* Perform the search */</comment>

    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">len</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">7</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><call pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:10">memcpy</name><argument_list pos:start="25:11" pos:end="25:27">(<argument pos:start="25:12" pos:end="25:18"><expr pos:start="25:12" pos:end="25:18"><operator pos:start="25:12" pos:end="25:12">&amp;</operator><name pos:start="25:13" pos:end="25:18">handle</name></expr></argument>, <argument pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">req</name></expr></argument>, <argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><literal type="number" pos:start="25:26" pos:end="25:26">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:13"><expr pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">req</name> <operator pos:start="27:9" pos:end="27:10">+=</operator> <literal type="number" pos:start="27:12" pos:end="27:12">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:13"><expr pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:7">len</name> <operator pos:start="29:9" pos:end="29:10">-=</operator> <literal type="number" pos:start="29:12" pos:end="29:12">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="35:42"><if pos:start="33:5" pos:end="35:42">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:14">handle</name> <argument_list type="generic" pos:start="33:16" pos:end="33:30">&lt; <argument pos:start="33:18" pos:end="33:28"><expr pos:start="33:18" pos:end="33:28"><literal type="number" pos:start="33:18" pos:end="33:18">0</literal> <operator pos:start="33:20" pos:end="33:21">||</operator> <name pos:start="33:23" pos:end="33:28">handle</name></expr></argument> &gt;</argument_list></name> <name pos:start="33:32" pos:end="33:44"><name pos:start="33:32" pos:end="33:34">sdp</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:44">services</name></name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:42"><block_content pos:start="35:9" pos:end="35:42">

        <return pos:start="35:9" pos:end="35:42">return <expr pos:start="35:16" pos:end="35:41"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:41">SDP_INVALID_RECORD_HANDLE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:10">record</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <operator pos:start="37:14" pos:end="37:14">&amp;</operator><name pos:start="37:15" pos:end="37:39"><name pos:start="37:15" pos:end="37:17">sdp</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:31">service_list</name><index pos:start="37:32" pos:end="37:39">[<expr pos:start="37:33" pos:end="37:38"><name pos:start="37:33" pos:end="37:38">handle</name></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="41:5" pos:end="43:44">for <control pos:start="41:9" pos:end="41:45">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:39"><expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:38"><name pos:start="41:21" pos:end="41:26">record</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:38">attributes</name></name></expr>;</condition> <incr pos:start="41:41" pos:end="41:44"><expr pos:start="41:41" pos:end="41:44"><name pos:start="41:41" pos:end="41:41">i</name> <operator pos:start="41:43" pos:end="41:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:9" pos:end="43:44"><block_content pos:start="43:9" pos:end="43:44">

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:14">record</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:30">attribute_list</name><index pos:start="43:31" pos:end="43:33">[<expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">i</name></expr>]</index></name><operator pos:start="43:34" pos:end="43:34">.</operator><name pos:start="43:35" pos:end="43:39">match</name> <operator pos:start="43:41" pos:end="43:41">=</operator> <literal type="number" pos:start="43:43" pos:end="43:43">0</literal></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:7">max</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <operator pos:start="47:11" pos:end="47:11">(</operator><name pos:start="47:12" pos:end="47:17"><name pos:start="47:12" pos:end="47:14">req</name><index pos:start="47:15" pos:end="47:17">[<expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>]</index></name> <operator pos:start="47:19" pos:end="47:20">&lt;&lt;</operator> <literal type="number" pos:start="47:22" pos:end="47:22">8</literal><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:25">|</operator> <name pos:start="47:27" pos:end="47:32"><name pos:start="47:27" pos:end="47:29">req</name><index pos:start="47:30" pos:end="47:32">[<expr pos:start="47:31" pos:end="47:31"><literal type="number" pos:start="47:31" pos:end="47:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:13"><expr pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:7">req</name> <operator pos:start="49:9" pos:end="49:10">+=</operator> <literal type="number" pos:start="49:12" pos:end="49:12">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:13"><expr pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">len</name> <operator pos:start="51:9" pos:end="51:10">-=</operator> <literal type="number" pos:start="51:12" pos:end="51:12">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="55:35"><if pos:start="53:5" pos:end="55:35">if <condition pos:start="53:8" pos:end="53:21">(<expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:11">max</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:20">0x0007</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:35"><block_content pos:start="55:9" pos:end="55:35">

        <return pos:start="55:9" pos:end="55:35">return <expr pos:start="55:16" pos:end="55:34"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="79:35"><if pos:start="59:5" pos:end="77:5">if <condition pos:start="59:8" pos:end="59:50">(<expr pos:start="59:9" pos:end="59:49"><operator pos:start="59:9" pos:end="59:9">(</operator><operator pos:start="59:10" pos:end="59:10">*</operator><name pos:start="59:11" pos:end="59:13">req</name> <operator pos:start="59:15" pos:end="59:15">&amp;</operator> <operator pos:start="59:17" pos:end="59:17">~</operator><name pos:start="59:18" pos:end="59:31">SDP_DSIZE_MASK</name><operator pos:start="59:32" pos:end="59:32">)</operator> <operator pos:start="59:34" pos:end="59:35">==</operator> <name pos:start="59:37" pos:end="59:49">SDP_DTYPE_SEQ</name></expr>)</condition> <block pos:start="59:52" pos:end="77:5">{<block_content pos:start="61:9" pos:end="75:43">

        <expr_stmt pos:start="61:9" pos:end="61:41"><expr pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:14">seqlen</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:40"><name pos:start="61:18" pos:end="61:28">sdp_datalen</name><argument_list pos:start="61:29" pos:end="61:40">(<argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><operator pos:start="61:30" pos:end="61:30">&amp;</operator><name pos:start="61:31" pos:end="61:33">req</name></expr></argument>, <argument pos:start="61:36" pos:end="61:39"><expr pos:start="61:36" pos:end="61:39"><operator pos:start="61:36" pos:end="61:36">&amp;</operator><name pos:start="61:37" pos:end="61:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:39"><if pos:start="63:9" pos:end="65:39">if <condition pos:start="63:12" pos:end="63:39">(<expr pos:start="63:13" pos:end="63:38"><name pos:start="63:13" pos:end="63:18">seqlen</name> <operator pos:start="63:20" pos:end="63:20">&lt;</operator> <literal type="number" pos:start="63:22" pos:end="63:22">3</literal> <operator pos:start="63:24" pos:end="63:25">||</operator> <name pos:start="63:27" pos:end="63:29">len</name> <operator pos:start="63:31" pos:end="63:31">&lt;</operator> <name pos:start="63:33" pos:end="63:38">seqlen</name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:39"><block_content pos:start="65:13" pos:end="65:39">

            <return pos:start="65:13" pos:end="65:39">return <expr pos:start="65:20" pos:end="65:38"><operator pos:start="65:20" pos:end="65:20">-</operator><name pos:start="65:21" pos:end="65:38">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:22"><expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:11">len</name> <operator pos:start="67:13" pos:end="67:14">-=</operator> <name pos:start="67:16" pos:end="67:21">seqlen</name></expr>;</expr_stmt>



        <while pos:start="71:9" pos:end="75:43">while <condition pos:start="71:15" pos:end="71:22">(<expr pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:21">seqlen</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="75:43"><block_content pos:start="73:13" pos:end="75:43">

            <if_stmt pos:start="73:13" pos:end="75:43"><if pos:start="73:13" pos:end="75:43">if <condition pos:start="73:16" pos:end="73:54">(<expr pos:start="73:17" pos:end="73:53"><call pos:start="73:17" pos:end="73:53"><name pos:start="73:17" pos:end="73:30">sdp_attr_match</name><argument_list pos:start="73:31" pos:end="73:53">(<argument pos:start="73:32" pos:end="73:37"><expr pos:start="73:32" pos:end="73:37"><name pos:start="73:32" pos:end="73:37">record</name></expr></argument>, <argument pos:start="73:40" pos:end="73:43"><expr pos:start="73:40" pos:end="73:43"><operator pos:start="73:40" pos:end="73:40">&amp;</operator><name pos:start="73:41" pos:end="73:43">req</name></expr></argument>, <argument pos:start="73:46" pos:end="73:52"><expr pos:start="73:46" pos:end="73:52"><operator pos:start="73:46" pos:end="73:46">&amp;</operator><name pos:start="73:47" pos:end="73:52">seqlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:43"><block_content pos:start="75:17" pos:end="75:43">

                <return pos:start="75:17" pos:end="75:43">return <expr pos:start="75:24" pos:end="75:42"><operator pos:start="75:24" pos:end="75:24">-</operator><name pos:start="75:25" pos:end="75:42">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

    </block_content>}</block></if> <if type="elseif" pos:start="77:7" pos:end="79:35">else if <condition pos:start="77:15" pos:end="77:53">(<expr pos:start="77:16" pos:end="77:52"><call pos:start="77:16" pos:end="77:52"><name pos:start="77:16" pos:end="77:29">sdp_attr_match</name><argument_list pos:start="77:30" pos:end="77:52">(<argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><name pos:start="77:31" pos:end="77:36">record</name></expr></argument>, <argument pos:start="77:39" pos:end="77:42"><expr pos:start="77:39" pos:end="77:42"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:42">req</name></expr></argument>, <argument pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><operator pos:start="77:45" pos:end="77:45">&amp;</operator><name pos:start="77:46" pos:end="77:51">seqlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:35"><block_content pos:start="79:9" pos:end="79:35">

        <return pos:start="79:9" pos:end="79:35">return <expr pos:start="79:16" pos:end="79:34"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="85:35"><if pos:start="83:5" pos:end="85:35">if <condition pos:start="83:8" pos:end="83:16">(<expr pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:11">len</name> <operator pos:start="83:13" pos:end="83:13">&lt;</operator> <literal type="number" pos:start="83:15" pos:end="83:15">1</literal></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:35"><block_content pos:start="85:9" pos:end="85:35">

        <return pos:start="85:9" pos:end="85:35">return <expr pos:start="85:16" pos:end="85:34"><operator pos:start="85:16" pos:end="85:16">-</operator><name pos:start="85:17" pos:end="85:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="101:18"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:13">(<expr pos:start="89:9" pos:end="89:12"><operator pos:start="89:9" pos:end="89:9">*</operator><name pos:start="89:10" pos:end="89:12">req</name></expr>)</condition> <block pos:start="89:15" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:45">

        <if_stmt pos:start="91:9" pos:end="93:39"><if pos:start="91:9" pos:end="93:39">if <condition pos:start="91:12" pos:end="91:31">(<expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:15">len</name> <operator pos:start="91:17" pos:end="91:18">&lt;=</operator> <sizeof pos:start="91:20" pos:end="91:30">sizeof<argument_list pos:start="91:26" pos:end="91:30">(<argument pos:start="91:27" pos:end="91:29"><expr pos:start="91:27" pos:end="91:29"><name pos:start="91:27" pos:end="91:29">int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:39"><block_content pos:start="93:13" pos:end="93:39">

            <return pos:start="93:13" pos:end="93:39">return <expr pos:start="93:20" pos:end="93:38"><operator pos:start="93:20" pos:end="93:20">-</operator><name pos:start="93:21" pos:end="93:38">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:27"><expr pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:11">len</name> <operator pos:start="95:13" pos:end="95:14">-=</operator> <sizeof pos:start="95:16" pos:end="95:26">sizeof<argument_list pos:start="95:22" pos:end="95:26">(<argument pos:start="95:23" pos:end="95:25"><expr pos:start="95:23" pos:end="95:25"><name pos:start="95:23" pos:end="95:25">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:45"><expr pos:start="97:9" pos:end="97:44"><call pos:start="97:9" pos:end="97:44"><name pos:start="97:9" pos:end="97:14">memcpy</name><argument_list pos:start="97:15" pos:end="97:44">(<argument pos:start="97:16" pos:end="97:21"><expr pos:start="97:16" pos:end="97:21"><operator pos:start="97:16" pos:end="97:16">&amp;</operator><name pos:start="97:17" pos:end="97:21">start</name></expr></argument>, <argument pos:start="97:24" pos:end="97:30"><expr pos:start="97:24" pos:end="97:30"><name pos:start="97:24" pos:end="97:26">req</name> <operator pos:start="97:28" pos:end="97:28">+</operator> <literal type="number" pos:start="97:30" pos:end="97:30">1</literal></expr></argument>, <argument pos:start="97:33" pos:end="97:43"><expr pos:start="97:33" pos:end="97:43"><sizeof pos:start="97:33" pos:end="97:43">sizeof<argument_list pos:start="97:39" pos:end="97:43">(<argument pos:start="97:40" pos:end="97:42"><expr pos:start="97:40" pos:end="97:42"><name pos:start="97:40" pos:end="97:42">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="101:18">else<block type="pseudo" pos:start="101:9" pos:end="101:18"><block_content pos:start="101:9" pos:end="101:18">

        <expr_stmt pos:start="101:9" pos:end="101:18"><expr pos:start="101:9" pos:end="101:17"><name pos:start="101:9" pos:end="101:13">start</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <literal type="number" pos:start="101:17" pos:end="101:17">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="105:5" pos:end="107:35"><if pos:start="105:5" pos:end="107:35">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">len</name> <operator pos:start="105:13" pos:end="105:13">&gt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">1</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:35"><block_content pos:start="107:9" pos:end="107:35">

        <return pos:start="107:9" pos:end="107:35">return <expr pos:start="107:16" pos:end="107:34"><operator pos:start="107:16" pos:end="107:16">-</operator><name pos:start="107:17" pos:end="107:34">SDP_INVALID_SYNTAX</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:28">/* Output the results */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:18"><expr pos:start="113:5" pos:end="113:17"><name pos:start="113:5" pos:end="113:7">lst</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <name pos:start="113:11" pos:end="113:13">rsp</name> <operator pos:start="113:15" pos:end="113:15">+</operator> <literal type="number" pos:start="113:17" pos:end="113:17">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:39"><expr pos:start="115:5" pos:end="115:38"><name pos:start="115:5" pos:end="115:7">max</name> <operator pos:start="115:9" pos:end="115:9">=</operator> <call pos:start="115:11" pos:end="115:38"><name pos:start="115:11" pos:end="115:13">MIN</name><argument_list pos:start="115:14" pos:end="115:38">(<argument pos:start="115:15" pos:end="115:17"><expr pos:start="115:15" pos:end="115:17"><name pos:start="115:15" pos:end="115:17">max</name></expr></argument>, <argument pos:start="115:20" pos:end="115:37"><expr pos:start="115:20" pos:end="115:37"><name pos:start="115:20" pos:end="115:37">MAX_RSP_PARAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:20"><expr pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:7">len</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <literal type="number" pos:start="117:11" pos:end="117:13">3</literal> <operator pos:start="117:13" pos:end="117:13">-</operator> <name pos:start="117:15" pos:end="117:19">start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:12"><expr pos:start="119:5" pos:end="119:11"><name pos:start="119:5" pos:end="119:7">end</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <literal type="number" pos:start="119:11" pos:end="119:11">0</literal></expr>;</expr_stmt>

    <for pos:start="121:5" pos:end="137:9">for <control pos:start="121:9" pos:end="121:45">(<init pos:start="121:10" pos:end="121:15"><expr pos:start="121:10" pos:end="121:14"><name pos:start="121:10" pos:end="121:10">i</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <literal type="number" pos:start="121:14" pos:end="121:14">0</literal></expr>;</init> <condition pos:start="121:17" pos:end="121:39"><expr pos:start="121:17" pos:end="121:38"><name pos:start="121:17" pos:end="121:17">i</name> <operator pos:start="121:19" pos:end="121:19">&lt;</operator> <name pos:start="121:21" pos:end="121:38"><name pos:start="121:21" pos:end="121:26">record</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:38">attributes</name></name></expr>;</condition> <incr pos:start="121:41" pos:end="121:44"><expr pos:start="121:41" pos:end="121:44"><name pos:start="121:41" pos:end="121:41">i</name> <operator pos:start="121:43" pos:end="121:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="123:9" pos:end="137:9"><block_content pos:start="123:9" pos:end="137:9">

        <if_stmt pos:start="123:9" pos:end="137:9"><if pos:start="123:9" pos:end="137:9">if <condition pos:start="123:12" pos:end="123:44">(<expr pos:start="123:13" pos:end="123:43"><name pos:start="123:13" pos:end="123:37"><name pos:start="123:13" pos:end="123:18">record</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:34">attribute_list</name><index pos:start="123:35" pos:end="123:37">[<expr pos:start="123:36" pos:end="123:36"><name pos:start="123:36" pos:end="123:36">i</name></expr>]</index></name><operator pos:start="123:38" pos:end="123:38">.</operator><name pos:start="123:39" pos:end="123:43">match</name></expr>)</condition> <block pos:start="123:46" pos:end="137:9">{<block_content pos:start="125:13" pos:end="135:49">

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="133:13">if <condition pos:start="125:16" pos:end="125:70">(<expr pos:start="125:17" pos:end="125:69"><name pos:start="125:17" pos:end="125:19">len</name> <operator pos:start="125:21" pos:end="125:22">&gt;=</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal> <operator pos:start="125:26" pos:end="125:27">&amp;&amp;</operator> <name pos:start="125:29" pos:end="125:31">len</name> <operator pos:start="125:33" pos:end="125:33">+</operator> <name pos:start="125:35" pos:end="125:59"><name pos:start="125:35" pos:end="125:40">record</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:56">attribute_list</name><index pos:start="125:57" pos:end="125:59">[<expr pos:start="125:58" pos:end="125:58"><name pos:start="125:58" pos:end="125:58">i</name></expr>]</index></name><operator pos:start="125:60" pos:end="125:60">.</operator><name pos:start="125:61" pos:end="125:63">len</name> <operator pos:start="125:65" pos:end="125:65">&lt;</operator> <name pos:start="125:67" pos:end="125:69">max</name></expr>)</condition> <block pos:start="125:72" pos:end="133:13">{<block_content pos:start="127:17" pos:end="131:58">

                <expr_stmt pos:start="127:17" pos:end="129:63"><expr pos:start="127:17" pos:end="129:62"><call pos:start="127:17" pos:end="129:62"><name pos:start="127:17" pos:end="127:22">memcpy</name><argument_list pos:start="127:23" pos:end="129:62">(<argument pos:start="127:24" pos:end="127:32"><expr pos:start="127:24" pos:end="127:32"><name pos:start="127:24" pos:end="127:26">lst</name> <operator pos:start="127:28" pos:end="127:28">+</operator> <name pos:start="127:30" pos:end="127:32">len</name></expr></argument>, <argument pos:start="127:35" pos:end="127:64"><expr pos:start="127:35" pos:end="127:64"><name pos:start="127:35" pos:end="127:59"><name pos:start="127:35" pos:end="127:40">record</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:56">attribute_list</name><index pos:start="127:57" pos:end="127:59">[<expr pos:start="127:58" pos:end="127:58"><name pos:start="127:58" pos:end="127:58">i</name></expr>]</index></name><operator pos:start="127:60" pos:end="127:60">.</operator><name pos:start="127:61" pos:end="127:64">pair</name></expr></argument>,

                                <argument pos:start="129:33" pos:end="129:61"><expr pos:start="129:33" pos:end="129:61"><name pos:start="129:33" pos:end="129:57"><name pos:start="129:33" pos:end="129:38">record</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:54">attribute_list</name><index pos:start="129:55" pos:end="129:57">[<expr pos:start="129:56" pos:end="129:56"><name pos:start="129:56" pos:end="129:56">i</name></expr>]</index></name><operator pos:start="129:58" pos:end="129:58">.</operator><name pos:start="129:59" pos:end="129:61">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:58"><expr pos:start="131:17" pos:end="131:57"><name pos:start="131:17" pos:end="131:19">end</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:25">len</name> <operator pos:start="131:27" pos:end="131:27">+</operator> <name pos:start="131:29" pos:end="131:53"><name pos:start="131:29" pos:end="131:34">record</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:50">attribute_list</name><index pos:start="131:51" pos:end="131:53">[<expr pos:start="131:52" pos:end="131:52"><name pos:start="131:52" pos:end="131:52">i</name></expr>]</index></name><operator pos:start="131:54" pos:end="131:54">.</operator><name pos:start="131:55" pos:end="131:57">len</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:49"><expr pos:start="135:13" pos:end="135:48"><name pos:start="135:13" pos:end="135:15">len</name> <operator pos:start="135:17" pos:end="135:18">+=</operator> <name pos:start="135:20" pos:end="135:44"><name pos:start="135:20" pos:end="135:25">record</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:41">attribute_list</name><index pos:start="135:42" pos:end="135:44">[<expr pos:start="135:43" pos:end="135:43"><name pos:start="135:43" pos:end="135:43">i</name></expr>]</index></name><operator pos:start="135:45" pos:end="135:45">.</operator><name pos:start="135:46" pos:end="135:48">len</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:19">(<expr pos:start="139:9" pos:end="139:18"><literal type="number" pos:start="139:9" pos:end="139:9">0</literal> <operator pos:start="139:11" pos:end="139:12">&gt;=</operator> <name pos:start="139:14" pos:end="139:18">start</name></expr>)</condition> <block pos:start="139:21" pos:end="147:5">{<block_content pos:start="141:8" pos:end="145:41">

       <expr_stmt pos:start="141:8" pos:end="141:48"><expr pos:start="141:8" pos:end="141:47"><name pos:start="141:8" pos:end="141:13"><name pos:start="141:8" pos:end="141:10">lst</name><index pos:start="141:11" pos:end="141:13">[<expr pos:start="141:12" pos:end="141:12"><literal type="number" pos:start="141:12" pos:end="141:12">0</literal></expr>]</index></name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:29">SDP_DTYPE_SEQ</name> <operator pos:start="141:31" pos:end="141:31">|</operator> <name pos:start="141:33" pos:end="141:47">SDP_DSIZE_NEXT2</name></expr>;</expr_stmt>

       <expr_stmt pos:start="143:8" pos:end="143:39"><expr pos:start="143:8" pos:end="143:38"><name pos:start="143:8" pos:end="143:13"><name pos:start="143:8" pos:end="143:10">lst</name><index pos:start="143:11" pos:end="143:13">[<expr pos:start="143:12" pos:end="143:12"><literal type="number" pos:start="143:12" pos:end="143:12">1</literal></expr>]</index></name> <operator pos:start="143:15" pos:end="143:15">=</operator> <operator pos:start="143:17" pos:end="143:17">(</operator><name pos:start="143:18" pos:end="143:20">len</name> <operator pos:start="143:22" pos:end="143:22">+</operator> <name pos:start="143:24" pos:end="143:28">start</name> <operator pos:start="143:30" pos:end="143:30">-</operator> <literal type="number" pos:start="143:32" pos:end="143:32">3</literal><operator pos:start="143:33" pos:end="143:33">)</operator> <operator pos:start="143:35" pos:end="143:36">&gt;&gt;</operator> <literal type="number" pos:start="143:38" pos:end="143:38">8</literal></expr>;</expr_stmt>

       <expr_stmt pos:start="145:8" pos:end="145:41"><expr pos:start="145:8" pos:end="145:40"><name pos:start="145:8" pos:end="145:13"><name pos:start="145:8" pos:end="145:10">lst</name><index pos:start="145:11" pos:end="145:13">[<expr pos:start="145:12" pos:end="145:12"><literal type="number" pos:start="145:12" pos:end="145:12">2</literal></expr>]</index></name> <operator pos:start="145:15" pos:end="145:15">=</operator> <operator pos:start="145:17" pos:end="145:17">(</operator><name pos:start="145:18" pos:end="145:20">len</name> <operator pos:start="145:22" pos:end="145:22">+</operator> <name pos:start="145:24" pos:end="145:28">start</name> <operator pos:start="145:30" pos:end="145:30">-</operator> <literal type="number" pos:start="145:32" pos:end="145:32">3</literal><operator pos:start="145:33" pos:end="145:33">)</operator> <operator pos:start="145:35" pos:end="145:35">&amp;</operator> <literal type="number" pos:start="145:37" pos:end="145:40">0xff</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:22"><expr pos:start="151:5" pos:end="151:21"><name pos:start="151:5" pos:end="151:10"><name pos:start="151:5" pos:end="151:7">rsp</name><index pos:start="151:8" pos:end="151:10">[<expr pos:start="151:9" pos:end="151:9"><literal type="number" pos:start="151:9" pos:end="151:9">0</literal></expr>]</index></name> <operator pos:start="151:12" pos:end="151:12">=</operator> <name pos:start="151:14" pos:end="151:16">end</name> <operator pos:start="151:18" pos:end="151:19">&gt;&gt;</operator> <literal type="number" pos:start="151:21" pos:end="151:21">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:24"><expr pos:start="153:5" pos:end="153:23"><name pos:start="153:5" pos:end="153:10"><name pos:start="153:5" pos:end="153:7">rsp</name><index pos:start="153:8" pos:end="153:10">[<expr pos:start="153:9" pos:end="153:9"><literal type="number" pos:start="153:9" pos:end="153:9">1</literal></expr>]</index></name> <operator pos:start="153:12" pos:end="153:12">=</operator> <name pos:start="153:14" pos:end="153:16">end</name> <operator pos:start="153:18" pos:end="153:18">&amp;</operator> <literal type="number" pos:start="153:20" pos:end="153:23">0xff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="169:24"><if pos:start="157:5" pos:end="167:5">if <condition pos:start="157:8" pos:end="157:18">(<expr pos:start="157:9" pos:end="157:17"><name pos:start="157:9" pos:end="157:11">end</name> <operator pos:start="157:13" pos:end="157:13">&lt;</operator> <name pos:start="157:15" pos:end="157:17">len</name></expr>)</condition> <block pos:start="157:20" pos:end="167:5">{<block_content pos:start="159:9" pos:end="165:27">

        <expr_stmt pos:start="159:9" pos:end="159:26"><expr pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:11">len</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <name pos:start="159:15" pos:end="159:17">end</name> <operator pos:start="159:19" pos:end="159:19">+</operator> <name pos:start="159:21" pos:end="159:25">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:34"><expr pos:start="161:9" pos:end="161:33"><name pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:11">lst</name><index pos:start="161:12" pos:end="161:19">[<expr pos:start="161:13" pos:end="161:18"><name pos:start="161:13" pos:end="161:15">end</name> <operator pos:start="161:17" pos:end="161:18">++</operator></expr>]</index></name> <operator pos:start="161:21" pos:end="161:21">=</operator> <sizeof pos:start="161:23" pos:end="161:33">sizeof<argument_list pos:start="161:29" pos:end="161:33">(<argument pos:start="161:30" pos:end="161:32"><expr pos:start="161:30" pos:end="161:32"><name pos:start="161:30" pos:end="161:32">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><call pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:14">memcpy</name><argument_list pos:start="163:15" pos:end="163:44">(<argument pos:start="163:16" pos:end="163:24"><expr pos:start="163:16" pos:end="163:24"><name pos:start="163:16" pos:end="163:18">lst</name> <operator pos:start="163:20" pos:end="163:20">+</operator> <name pos:start="163:22" pos:end="163:24">end</name></expr></argument>, <argument pos:start="163:27" pos:end="163:30"><expr pos:start="163:27" pos:end="163:30"><operator pos:start="163:27" pos:end="163:27">&amp;</operator><name pos:start="163:28" pos:end="163:30">len</name></expr></argument>, <argument pos:start="163:33" pos:end="163:43"><expr pos:start="163:33" pos:end="163:43"><sizeof pos:start="163:33" pos:end="163:43">sizeof<argument_list pos:start="163:39" pos:end="163:43">(<argument pos:start="163:40" pos:end="163:42"><expr pos:start="163:40" pos:end="163:42"><name pos:start="163:40" pos:end="163:42">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:11">end</name> <operator pos:start="165:13" pos:end="165:14">+=</operator> <sizeof pos:start="165:16" pos:end="165:26">sizeof<argument_list pos:start="165:22" pos:end="165:26">(<argument pos:start="165:23" pos:end="165:25"><expr pos:start="165:23" pos:end="165:25"><name pos:start="165:23" pos:end="165:25">int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="169:24">else<block type="pseudo" pos:start="169:9" pos:end="169:24"><block_content pos:start="169:9" pos:end="169:24">

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:11">lst</name><index pos:start="169:12" pos:end="169:19">[<expr pos:start="169:13" pos:end="169:18"><name pos:start="169:13" pos:end="169:15">end</name> <operator pos:start="169:17" pos:end="169:18">++</operator></expr>]</index></name> <operator pos:start="169:21" pos:end="169:21">=</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <return pos:start="173:5" pos:end="173:19">return <expr pos:start="173:12" pos:end="173:18"><name pos:start="173:12" pos:end="173:14">end</name> <operator pos:start="173:16" pos:end="173:16">+</operator> <literal type="number" pos:start="173:18" pos:end="173:18">2</literal></expr>;</return>

</block_content>}</block></function>
</unit>
