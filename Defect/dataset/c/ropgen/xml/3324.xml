<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3324.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:39">ape_decode_value_3900</name><parameter_list pos:start="1:40" pos:end="1:71">(<parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:50">APEContext</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">ctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:64">APERice</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">rice</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:25">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">x</name></decl>, <decl pos:start="5:21" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:21" pos:end="5:28">overflow</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">tmpk</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:68"><expr pos:start="11:5" pos:end="11:67"><name pos:start="11:5" pos:end="11:12">overflow</name> <operator pos:start="11:14" pos:end="11:14">=</operator> <call pos:start="11:16" pos:end="11:67"><name pos:start="11:16" pos:end="11:31">range_get_symbol</name><argument_list pos:start="11:32" pos:end="11:67">(<argument pos:start="11:33" pos:end="11:35"><expr pos:start="11:33" pos:end="11:35"><name pos:start="11:33" pos:end="11:35">ctx</name></expr></argument>, <argument pos:start="11:38" pos:end="11:48"><expr pos:start="11:38" pos:end="11:48"><name pos:start="11:38" pos:end="11:48">counts_3970</name></expr></argument>, <argument pos:start="11:51" pos:end="11:66"><expr pos:start="11:51" pos:end="11:66"><name pos:start="11:51" pos:end="11:66">counts_diff_3970</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="23:47"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:16">overflow</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:35">MODEL_ELEMENTS</name> <operator pos:start="15:37" pos:end="15:37">-</operator> <literal type="number" pos:start="15:39" pos:end="15:39">1</literal><operator pos:start="15:40" pos:end="15:40">)</operator></expr>)</condition> <block pos:start="15:43" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:21">

        <expr_stmt pos:start="17:9" pos:end="17:41"><expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:12">tmpk</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:40"><name pos:start="17:16" pos:end="17:32">range_decode_bits</name><argument_list pos:start="17:33" pos:end="17:40">(<argument pos:start="17:34" pos:end="17:36"><expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:36">ctx</name></expr></argument>, <argument pos:start="17:39" pos:end="17:39"><expr pos:start="17:39" pos:end="17:39"><literal type="number" pos:start="17:39" pos:end="17:39">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:21"><expr pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:16">overflow</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="23:47">else<block type="pseudo" pos:start="23:9" pos:end="23:47"><block_content pos:start="23:9" pos:end="23:47">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:12">tmpk</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <ternary pos:start="23:16" pos:end="23:46"><condition pos:start="23:16" pos:end="23:30"><expr pos:start="23:16" pos:end="23:28"><operator pos:start="23:16" pos:end="23:16">(</operator><name pos:start="23:17" pos:end="23:23"><name pos:start="23:17" pos:end="23:20">rice</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:23">k</name></name> <operator pos:start="23:25" pos:end="23:25">&lt;</operator> <literal type="number" pos:start="23:27" pos:end="23:27">1</literal><operator pos:start="23:28" pos:end="23:28">)</operator></expr> ?</condition><then pos:start="23:32" pos:end="23:32"> <expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr> </then><else pos:start="23:34" pos:end="23:46">: <expr pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:42"><name pos:start="23:36" pos:end="23:39">rice</name><operator pos:start="23:40" pos:end="23:41">-&gt;</operator><name pos:start="23:42" pos:end="23:42">k</name></name> <operator pos:start="23:44" pos:end="23:44">-</operator> <literal type="number" pos:start="23:46" pos:end="23:46">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="27:5" pos:end="51:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:46">(<expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:12">tmpk</name> <operator pos:start="27:14" pos:end="27:15">&lt;=</operator> <literal type="number" pos:start="27:17" pos:end="27:18">16</literal> <operator pos:start="27:20" pos:end="27:21">||</operator> <name pos:start="27:23" pos:end="27:38"><name pos:start="27:23" pos:end="27:25">ctx</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:38">fileversion</name></name> <operator pos:start="27:40" pos:end="27:40">&lt;</operator> <literal type="number" pos:start="27:42" pos:end="27:45">3910</literal></expr>)</condition> <block pos:start="27:48" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:41">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:22">(<expr pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:16">tmpk</name> <operator pos:start="29:18" pos:end="29:18">&gt;</operator> <literal type="number" pos:start="29:20" pos:end="29:21">23</literal></expr>)</condition> <block pos:start="29:24" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:39">

            <expr_stmt pos:start="31:13" pos:end="31:74"><expr pos:start="31:13" pos:end="31:73"><call pos:start="31:13" pos:end="31:73"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:73">(<argument pos:start="31:20" pos:end="31:29"><expr pos:start="31:20" pos:end="31:29"><name pos:start="31:20" pos:end="31:29"><name pos:start="31:20" pos:end="31:22">ctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:29">avctx</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:43"><expr pos:start="31:32" pos:end="31:43"><name pos:start="31:32" pos:end="31:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:46" pos:end="31:66"><expr pos:start="31:46" pos:end="31:66"><literal type="string" pos:start="31:46" pos:end="31:66">"Too many bits: %d\n"</literal></expr></argument>, <argument pos:start="31:69" pos:end="31:72"><expr pos:start="31:69" pos:end="31:72"><name pos:start="31:69" pos:end="31:72">tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:9">x</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <call pos:start="37:13" pos:end="37:40"><name pos:start="37:13" pos:end="37:29">range_decode_bits</name><argument_list pos:start="37:30" pos:end="37:40">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">ctx</name></expr></argument>, <argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><name pos:start="37:36" pos:end="37:39">tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="39:7" pos:end="45:5">else if <condition pos:start="39:15" pos:end="39:26">(<expr pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:19">tmpk</name> <operator pos:start="39:21" pos:end="39:22">&lt;=</operator> <literal type="number" pos:start="39:24" pos:end="39:25">32</literal></expr>)</condition> <block pos:start="39:28" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:55">

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:9">x</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:29">range_decode_bits</name><argument_list pos:start="41:30" pos:end="41:38">(<argument pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:33">ctx</name></expr></argument>, <argument pos:start="41:36" pos:end="41:37"><expr pos:start="41:36" pos:end="41:37"><literal type="number" pos:start="41:36" pos:end="41:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:9">x</name> <operator pos:start="43:11" pos:end="43:12">|=</operator> <operator pos:start="43:14" pos:end="43:14">(</operator><call pos:start="43:15" pos:end="43:47"><name pos:start="43:15" pos:end="43:31">range_decode_bits</name><argument_list pos:start="43:32" pos:end="43:47">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">ctx</name></expr></argument>, <argument pos:start="43:38" pos:end="43:46"><expr pos:start="43:38" pos:end="43:46"><name pos:start="43:38" pos:end="43:41">tmpk</name> <operator pos:start="43:43" pos:end="43:43">-</operator> <literal type="number" pos:start="43:45" pos:end="43:46">16</literal></expr></argument>)</argument_list></call> <operator pos:start="43:49" pos:end="43:50">&lt;&lt;</operator> <literal type="number" pos:start="43:52" pos:end="43:53">16</literal><operator pos:start="43:54" pos:end="43:54">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="51:5">else <block pos:start="45:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:35">

        <expr_stmt pos:start="47:9" pos:end="47:70"><expr pos:start="47:9" pos:end="47:69"><call pos:start="47:9" pos:end="47:69"><name pos:start="47:9" pos:end="47:14">av_log</name><argument_list pos:start="47:15" pos:end="47:69">(<argument pos:start="47:16" pos:end="47:25"><expr pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:25"><name pos:start="47:16" pos:end="47:18">ctx</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:25">avctx</name></name></expr></argument>, <argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><name pos:start="47:28" pos:end="47:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:42" pos:end="47:62"><expr pos:start="47:42" pos:end="47:62"><literal type="string" pos:start="47:42" pos:end="47:62">"Too many bits: %d\n"</literal></expr></argument>, <argument pos:start="47:65" pos:end="47:68"><expr pos:start="47:65" pos:end="47:68"><name pos:start="47:65" pos:end="47:68">tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:26"><expr pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:5">x</name> <operator pos:start="53:7" pos:end="53:8">+=</operator> <name pos:start="53:10" pos:end="53:17">overflow</name> <operator pos:start="53:19" pos:end="53:20">&lt;&lt;</operator> <name pos:start="53:22" pos:end="53:25">tmpk</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:25"><expr pos:start="57:5" pos:end="57:24"><call pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:15">update_rice</name><argument_list pos:start="57:16" pos:end="57:24">(<argument pos:start="57:17" pos:end="57:20"><expr pos:start="57:17" pos:end="57:20"><name pos:start="57:17" pos:end="57:20">rice</name></expr></argument>, <argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><name pos:start="57:23" pos:end="57:23">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:27">/* Convert to signed */</comment>

    <if_stmt pos:start="63:5" pos:end="69:25"><if pos:start="63:5" pos:end="65:28">if <condition pos:start="63:8" pos:end="63:14">(<expr pos:start="63:9" pos:end="63:13"><name pos:start="63:9" pos:end="63:9">x</name> <operator pos:start="63:11" pos:end="63:11">&amp;</operator> <literal type="number" pos:start="63:13" pos:end="63:13">1</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:28"><block_content pos:start="65:9" pos:end="65:28">

        <return pos:start="65:9" pos:end="65:28">return <expr pos:start="65:16" pos:end="65:27"><operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:17">x</name> <operator pos:start="65:19" pos:end="65:20">&gt;&gt;</operator> <literal type="number" pos:start="65:22" pos:end="65:22">1</literal><operator pos:start="65:23" pos:end="65:23">)</operator> <operator pos:start="65:25" pos:end="65:25">+</operator> <literal type="number" pos:start="65:27" pos:end="65:27">1</literal></expr>;</return></block_content></block></if>

    <else pos:start="67:5" pos:end="69:25">else<block type="pseudo" pos:start="69:9" pos:end="69:25"><block_content pos:start="69:9" pos:end="69:25">

        <return pos:start="69:9" pos:end="69:25">return <expr pos:start="69:16" pos:end="69:24"><operator pos:start="69:16" pos:end="69:16">-</operator><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:18">x</name> <operator pos:start="69:20" pos:end="69:21">&gt;&gt;</operator> <literal type="number" pos:start="69:23" pos:end="69:23">1</literal><operator pos:start="69:24" pos:end="69:24">)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
