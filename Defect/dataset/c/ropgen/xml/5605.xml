<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5605.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:21"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">IsoBcSection</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier></type><name pos:start="1:22" pos:end="1:38">find_iso_bc_entry</name><parameter_list pos:start="1:39" pos:end="1:44">(<parameter pos:start="1:40" pos:end="1:43"><decl pos:start="1:40" pos:end="1:43"><type pos:start="1:40" pos:end="1:43"><name pos:start="1:40" pos:end="1:43">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:16">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">IsoBcEntry</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">e</name> <init pos:start="5:19" pos:end="5:37">= <expr pos:start="5:21" pos:end="5:37"><operator pos:start="5:21" pos:end="5:21">(</operator><name pos:start="5:22" pos:end="5:31">IsoBcEntry</name> <operator pos:start="5:33" pos:end="5:33">*</operator><operator pos:start="5:34" pos:end="5:34">)</operator><name pos:start="5:35" pos:end="5:37">sec</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name> <init pos:start="7:21" pos:end="7:35">= <expr pos:start="7:23" pos:end="7:35"><call pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:33">find_iso_bc</name><argument_list pos:start="7:34" pos:end="7:35">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:15">offset</name></expr>)</condition> <block pos:start="13:18" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:20">

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:74"><expr pos:start="21:5" pos:end="21:73"><call pos:start="21:5" pos:end="21:73"><name pos:start="21:5" pos:end="21:19">read_iso_sector</name><argument_list pos:start="21:20" pos:end="21:73">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">offset</name></expr></argument>, <argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">sec</name></expr></argument>, <argument pos:start="21:34" pos:end="21:72"><expr pos:start="21:34" pos:end="21:72"><literal type="string" pos:start="21:34" pos:end="21:72">"Failed to read El Torito boot catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:24">is_iso_bc_valid</name><argument_list pos:start="25:25" pos:end="25:27">(<argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><name pos:start="25:26" pos:end="25:26">e</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:30" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:20">

        <comment type="block" pos:start="27:9" pos:end="27:47">/* The validation entry is mandatory */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:55"><expr pos:start="29:9" pos:end="29:54"><call pos:start="29:9" pos:end="29:54"><name pos:start="29:9" pos:end="29:20">virtio_panic</name><argument_list pos:start="29:21" pos:end="29:54">(<argument pos:start="29:22" pos:end="29:53"><expr pos:start="29:22" pos:end="29:53"><literal type="string" pos:start="29:22" pos:end="29:53">"No valid boot catalog found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:20">return <expr pos:start="31:16" pos:end="31:19"><name pos:start="31:16" pos:end="31:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="43:7">/*

     * Each entry has 32 bytes size, so one sector cannot contain &gt; 64 entries.

     * We consider only boot catalogs with no more than 64 entries.

     */</comment>

    <for pos:start="45:5" pos:end="57:5">for <control pos:start="45:9" pos:end="45:49">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">1</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:43"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:43">ISO_BC_ENTRY_PER_SECTOR</name></expr>;</condition> <incr pos:start="45:46" pos:end="45:48"><expr pos:start="45:46" pos:end="45:48"><name pos:start="45:46" pos:end="45:46">i</name><operator pos:start="45:47" pos:end="45:48">++</operator></expr></incr>)</control> <block pos:start="45:51" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:9">

        <if_stmt pos:start="47:9" pos:end="55:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:47">(<expr pos:start="47:13" pos:end="47:46"><name pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:13">e</name><index pos:start="47:14" pos:end="47:16">[<expr pos:start="47:15" pos:end="47:15"><name pos:start="47:15" pos:end="47:15">i</name></expr>]</index></name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:19">id</name> <operator pos:start="47:21" pos:end="47:22">==</operator> <name pos:start="47:24" pos:end="47:46">ISO_BC_BOOTABLE_SECTION</name></expr>)</condition> <block pos:start="47:49" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:13">

            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:60">(<expr pos:start="49:17" pos:end="49:59"><call pos:start="49:17" pos:end="49:59"><name pos:start="49:17" pos:end="49:42">is_iso_bc_entry_compatible</name><argument_list pos:start="49:43" pos:end="49:59">(<argument pos:start="49:44" pos:end="49:58"><expr pos:start="49:44" pos:end="49:58"><operator pos:start="49:44" pos:end="49:44">&amp;</operator><name pos:start="49:45" pos:end="49:48"><name pos:start="49:45" pos:end="49:45">e</name><index pos:start="49:46" pos:end="49:48">[<expr pos:start="49:47" pos:end="49:47"><name pos:start="49:47" pos:end="49:47">i</name></expr>]</index></name><operator pos:start="49:49" pos:end="49:49">.</operator><name pos:start="49:50" pos:end="49:58"><name pos:start="49:50" pos:end="49:53">body</name><operator pos:start="49:54" pos:end="49:54">.</operator><name pos:start="49:55" pos:end="49:58">sect</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:62" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:39">

                <return pos:start="51:17" pos:end="51:39">return <expr pos:start="51:24" pos:end="51:38"><operator pos:start="51:24" pos:end="51:24">&amp;</operator><name pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:25">e</name><index pos:start="51:26" pos:end="51:28">[<expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">i</name></expr>]</index></name><operator pos:start="51:29" pos:end="51:29">.</operator><name pos:start="51:30" pos:end="51:38"><name pos:start="51:30" pos:end="51:33">body</name><operator pos:start="51:34" pos:end="51:34">.</operator><name pos:start="51:35" pos:end="51:38">sect</name></name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="61:5" pos:end="61:70"><expr pos:start="61:5" pos:end="61:69"><call pos:start="61:5" pos:end="61:69"><name pos:start="61:5" pos:end="61:16">virtio_panic</name><argument_list pos:start="61:17" pos:end="61:69">(<argument pos:start="61:18" pos:end="61:68"><expr pos:start="61:18" pos:end="61:68"><literal type="string" pos:start="61:18" pos:end="61:68">"No suitable boot entry found on ISO-9660 media!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="65:5" pos:end="65:16">return <expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
