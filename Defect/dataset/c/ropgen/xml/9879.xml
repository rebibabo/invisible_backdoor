<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9879.c" pos:tabs="8"><function pos:start="1:1" pos:end="46:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">bdrv_driver_pwritev</name><parameter_list pos:start="1:44" pos:end="3:74">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:64"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>,
                                            <parameter pos:start="2:45" pos:end="2:59"><decl pos:start="2:45" pos:end="2:59"><type pos:start="2:45" pos:end="2:59"><name pos:start="2:45" pos:end="2:52">uint64_t</name></type> <name pos:start="2:54" pos:end="2:59">offset</name></decl></parameter>, <parameter pos:start="2:62" pos:end="2:75"><decl pos:start="2:62" pos:end="2:75"><type pos:start="2:62" pos:end="2:75"><name pos:start="2:62" pos:end="2:69">uint64_t</name></type> <name pos:start="2:71" pos:end="2:75">bytes</name></decl></parameter>,
                                            <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><name pos:start="3:45" pos:end="3:56">QEMUIOVector</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">qiov</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:73"><decl pos:start="3:65" pos:end="3:73"><type pos:start="3:65" pos:end="3:73"><name pos:start="3:65" pos:end="3:67">int</name></type> <name pos:start="3:69" pos:end="3:73">flags</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="46:1">{<block_content pos:start="5:5" pos:end="45:15">
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">BlockDriver</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">drv</name> <init pos:start="5:22" pos:end="5:30">= <expr pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:30"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:30">drv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:23"><decl pos:start="6:5" pos:end="6:22"><type pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:11">int64_t</name></type> <name pos:start="6:13" pos:end="6:22">sector_num</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:27">nb_sectors</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:12"><decl pos:start="8:5" pos:end="8:11"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:11">ret</name></decl>;</decl_stmt>
    <if_stmt pos:start="9:5" pos:end="14:5"><if pos:start="9:5" pos:end="14:5">if <condition pos:start="9:8" pos:end="9:29">(<expr pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:28"><name pos:start="9:9" pos:end="9:11">drv</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:28">bdrv_co_pwritev</name></name></expr>)</condition> <block pos:start="9:31" pos:end="14:5">{<block_content pos:start="10:9" pos:end="13:27">
        <expr_stmt pos:start="10:9" pos:end="11:70"><expr pos:start="10:9" pos:end="11:69"><name pos:start="10:9" pos:end="10:11">ret</name> <operator pos:start="10:13" pos:end="10:13">=</operator> <call pos:start="10:15" pos:end="11:69"><name pos:start="10:15" pos:end="10:34"><name pos:start="10:15" pos:end="10:17">drv</name><operator pos:start="10:18" pos:end="10:19">-&gt;</operator><name pos:start="10:20" pos:end="10:34">bdrv_co_pwritev</name></name><argument_list pos:start="10:35" pos:end="11:69">(<argument pos:start="10:36" pos:end="10:37"><expr pos:start="10:36" pos:end="10:37"><name pos:start="10:36" pos:end="10:37">bs</name></expr></argument>, <argument pos:start="10:40" pos:end="10:45"><expr pos:start="10:40" pos:end="10:45"><name pos:start="10:40" pos:end="10:45">offset</name></expr></argument>, <argument pos:start="10:48" pos:end="10:52"><expr pos:start="10:48" pos:end="10:52"><name pos:start="10:48" pos:end="10:52">bytes</name></expr></argument>, <argument pos:start="10:55" pos:end="10:58"><expr pos:start="10:55" pos:end="10:58"><name pos:start="10:55" pos:end="10:58">qiov</name></expr></argument>,
                                   <argument pos:start="11:36" pos:end="11:68"><expr pos:start="11:36" pos:end="11:68"><name pos:start="11:36" pos:end="11:40">flags</name> <operator pos:start="11:42" pos:end="11:42">&amp;</operator> <name pos:start="11:44" pos:end="11:68"><name pos:start="11:44" pos:end="11:45">bs</name><operator pos:start="11:46" pos:end="11:47">-&gt;</operator><name pos:start="11:48" pos:end="11:68">supported_write_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:44"><expr pos:start="12:9" pos:end="12:43"><name pos:start="12:9" pos:end="12:13">flags</name> <operator pos:start="12:15" pos:end="12:16">&amp;=</operator> <operator pos:start="12:18" pos:end="12:18">~</operator><name pos:start="12:19" pos:end="12:43"><name pos:start="12:19" pos:end="12:20">bs</name><operator pos:start="12:21" pos:end="12:22">-&gt;</operator><name pos:start="12:23" pos:end="12:43">supported_write_flags</name></name></expr>;</expr_stmt>
        <goto pos:start="13:9" pos:end="13:27">goto <name pos:start="13:14" pos:end="13:26">emulate_flags</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:14">sector_num</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <name pos:start="15:18" pos:end="15:23">offset</name> <operator pos:start="15:25" pos:end="15:26">&gt;&gt;</operator> <name pos:start="15:28" pos:end="15:43">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:43"><expr pos:start="16:5" pos:end="16:42"><name pos:start="16:5" pos:end="16:14">nb_sectors</name> <operator pos:start="16:16" pos:end="16:16">=</operator> <name pos:start="16:18" pos:end="16:22">bytes</name> <operator pos:start="16:24" pos:end="16:25">&gt;&gt;</operator> <name pos:start="16:27" pos:end="16:42">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:51"><expr pos:start="17:5" pos:end="17:50"><call pos:start="17:5" pos:end="17:50"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:50">(<argument pos:start="17:12" pos:end="17:49"><expr pos:start="17:12" pos:end="17:49"><operator pos:start="17:12" pos:end="17:12">(</operator><name pos:start="17:13" pos:end="17:18">offset</name> <operator pos:start="17:20" pos:end="17:20">&amp;</operator> <operator pos:start="17:22" pos:end="17:22">(</operator><name pos:start="17:23" pos:end="17:38">BDRV_SECTOR_SIZE</name> <operator pos:start="17:40" pos:end="17:40">-</operator> <literal type="number" pos:start="17:42" pos:end="17:42">1</literal><operator pos:start="17:43" pos:end="17:43">)</operator><operator pos:start="17:44" pos:end="17:44">)</operator> <operator pos:start="17:46" pos:end="17:47">==</operator> <literal type="number" pos:start="17:49" pos:end="17:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:50"><expr pos:start="18:5" pos:end="18:49"><call pos:start="18:5" pos:end="18:49"><name pos:start="18:5" pos:end="18:10">assert</name><argument_list pos:start="18:11" pos:end="18:49">(<argument pos:start="18:12" pos:end="18:48"><expr pos:start="18:12" pos:end="18:48"><operator pos:start="18:12" pos:end="18:12">(</operator><name pos:start="18:13" pos:end="18:17">bytes</name> <operator pos:start="18:19" pos:end="18:19">&amp;</operator> <operator pos:start="18:21" pos:end="18:21">(</operator><name pos:start="18:22" pos:end="18:37">BDRV_SECTOR_SIZE</name> <operator pos:start="18:39" pos:end="18:39">-</operator> <literal type="number" pos:start="18:41" pos:end="18:41">1</literal><operator pos:start="18:42" pos:end="18:42">)</operator><operator pos:start="18:43" pos:end="18:43">)</operator> <operator pos:start="18:45" pos:end="18:46">==</operator> <literal type="number" pos:start="18:48" pos:end="18:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:68"><expr pos:start="19:5" pos:end="19:67"><call pos:start="19:5" pos:end="19:67"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:67">(<argument pos:start="19:12" pos:end="19:66"><expr pos:start="19:12" pos:end="19:66"><operator pos:start="19:12" pos:end="19:12">(</operator><name pos:start="19:13" pos:end="19:17">bytes</name> <operator pos:start="19:19" pos:end="19:20">&gt;&gt;</operator> <name pos:start="19:22" pos:end="19:37">BDRV_SECTOR_BITS</name><operator pos:start="19:38" pos:end="19:38">)</operator> <operator pos:start="19:40" pos:end="19:41">&lt;=</operator> <name pos:start="19:43" pos:end="19:66">BDRV_REQUEST_MAX_SECTORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="20:5" pos:end="40:5"><if pos:start="20:5" pos:end="24:5">if <condition pos:start="20:8" pos:end="20:34">(<expr pos:start="20:9" pos:end="20:33"><name pos:start="20:9" pos:end="20:33"><name pos:start="20:9" pos:end="20:11">drv</name><operator pos:start="20:12" pos:end="20:13">-&gt;</operator><name pos:start="20:14" pos:end="20:33">bdrv_co_writev_flags</name></name></expr>)</condition> <block pos:start="20:36" pos:end="24:5">{<block_content pos:start="21:9" pos:end="23:44">
        <expr_stmt pos:start="21:9" pos:end="22:75"><expr pos:start="21:9" pos:end="22:74"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="22:74"><name pos:start="21:15" pos:end="21:39"><name pos:start="21:15" pos:end="21:17">drv</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:39">bdrv_co_writev_flags</name></name><argument_list pos:start="21:40" pos:end="22:74">(<argument pos:start="21:41" pos:end="21:42"><expr pos:start="21:41" pos:end="21:42"><name pos:start="21:41" pos:end="21:42">bs</name></expr></argument>, <argument pos:start="21:45" pos:end="21:54"><expr pos:start="21:45" pos:end="21:54"><name pos:start="21:45" pos:end="21:54">sector_num</name></expr></argument>, <argument pos:start="21:57" pos:end="21:66"><expr pos:start="21:57" pos:end="21:66"><name pos:start="21:57" pos:end="21:66">nb_sectors</name></expr></argument>, <argument pos:start="21:69" pos:end="21:72"><expr pos:start="21:69" pos:end="21:72"><name pos:start="21:69" pos:end="21:72">qiov</name></expr></argument>,
                                        <argument pos:start="22:41" pos:end="22:73"><expr pos:start="22:41" pos:end="22:73"><name pos:start="22:41" pos:end="22:45">flags</name> <operator pos:start="22:47" pos:end="22:47">&amp;</operator> <name pos:start="22:49" pos:end="22:73"><name pos:start="22:49" pos:end="22:50">bs</name><operator pos:start="22:51" pos:end="22:52">-&gt;</operator><name pos:start="22:53" pos:end="22:73">supported_write_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:44"><expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:13">flags</name> <operator pos:start="23:15" pos:end="23:16">&amp;=</operator> <operator pos:start="23:18" pos:end="23:18">~</operator><name pos:start="23:19" pos:end="23:43"><name pos:start="23:19" pos:end="23:20">bs</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:43">supported_write_flags</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="24:7" pos:end="27:5">else if <condition pos:start="24:15" pos:end="24:35">(<expr pos:start="24:16" pos:end="24:34"><name pos:start="24:16" pos:end="24:34"><name pos:start="24:16" pos:end="24:18">drv</name><operator pos:start="24:19" pos:end="24:20">-&gt;</operator><name pos:start="24:21" pos:end="24:34">bdrv_co_writev</name></name></expr>)</condition> <block pos:start="24:37" pos:end="27:5">{<block_content pos:start="25:9" pos:end="26:68">
        <expr_stmt pos:start="25:9" pos:end="25:43"><expr pos:start="25:9" pos:end="25:42"><call pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:14">assert</name><argument_list pos:start="25:15" pos:end="25:42">(<argument pos:start="25:16" pos:end="25:41"><expr pos:start="25:16" pos:end="25:41"><operator pos:start="25:16" pos:end="25:16">!</operator><name pos:start="25:17" pos:end="25:41"><name pos:start="25:17" pos:end="25:18">bs</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:41">supported_write_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:68"><expr pos:start="26:9" pos:end="26:67"><name pos:start="26:9" pos:end="26:11">ret</name> <operator pos:start="26:13" pos:end="26:13">=</operator> <call pos:start="26:15" pos:end="26:67"><name pos:start="26:15" pos:end="26:33"><name pos:start="26:15" pos:end="26:17">drv</name><operator pos:start="26:18" pos:end="26:19">-&gt;</operator><name pos:start="26:20" pos:end="26:33">bdrv_co_writev</name></name><argument_list pos:start="26:34" pos:end="26:67">(<argument pos:start="26:35" pos:end="26:36"><expr pos:start="26:35" pos:end="26:36"><name pos:start="26:35" pos:end="26:36">bs</name></expr></argument>, <argument pos:start="26:39" pos:end="26:48"><expr pos:start="26:39" pos:end="26:48"><name pos:start="26:39" pos:end="26:48">sector_num</name></expr></argument>, <argument pos:start="26:51" pos:end="26:60"><expr pos:start="26:51" pos:end="26:60"><name pos:start="26:51" pos:end="26:60">nb_sectors</name></expr></argument>, <argument pos:start="26:63" pos:end="26:66"><expr pos:start="26:63" pos:end="26:66"><name pos:start="26:63" pos:end="26:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="27:7" pos:end="40:5">else <block pos:start="27:12" pos:end="40:5">{<block_content pos:start="28:9" pos:end="39:9">
        <decl_stmt pos:start="28:9" pos:end="28:24"><decl pos:start="28:9" pos:end="28:23"><type pos:start="28:9" pos:end="28:20"><name pos:start="28:9" pos:end="28:18">BlockAIOCB</name> <modifier pos:start="28:20" pos:end="28:20">*</modifier></type><name pos:start="28:21" pos:end="28:23">acb</name></decl>;</decl_stmt>
        <decl_stmt pos:start="29:9" pos:end="31:10"><decl pos:start="29:9" pos:end="31:9"><type pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:29">CoroutineIOCompletion</name></type> <name pos:start="29:31" pos:end="29:32">co</name> <init pos:start="29:34" pos:end="31:9">= <expr pos:start="29:36" pos:end="31:9"><block pos:start="29:36" pos:end="31:9">{
            <expr pos:start="30:13" pos:end="30:46"><operator pos:start="30:13" pos:end="30:13">.</operator><name pos:start="30:14" pos:end="30:22">coroutine</name> <operator pos:start="30:24" pos:end="30:24">=</operator> <call pos:start="30:26" pos:end="30:46"><name pos:start="30:26" pos:end="30:44">qemu_coroutine_self</name><argument_list pos:start="30:45" pos:end="30:46">()</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="32:9" pos:end="33:68"><expr pos:start="32:9" pos:end="33:67"><name pos:start="32:9" pos:end="32:11">acb</name> <operator pos:start="32:13" pos:end="32:13">=</operator> <call pos:start="32:15" pos:end="33:67"><name pos:start="32:15" pos:end="32:38"><name pos:start="32:15" pos:end="32:16">bs</name><operator pos:start="32:17" pos:end="32:18">-&gt;</operator><name pos:start="32:19" pos:end="32:21">drv</name><operator pos:start="32:22" pos:end="32:23">-&gt;</operator><name pos:start="32:24" pos:end="32:38">bdrv_aio_writev</name></name><argument_list pos:start="32:39" pos:end="33:67">(<argument pos:start="32:40" pos:end="32:41"><expr pos:start="32:40" pos:end="32:41"><name pos:start="32:40" pos:end="32:41">bs</name></expr></argument>, <argument pos:start="32:44" pos:end="32:53"><expr pos:start="32:44" pos:end="32:53"><name pos:start="32:44" pos:end="32:53">sector_num</name></expr></argument>, <argument pos:start="32:56" pos:end="32:59"><expr pos:start="32:56" pos:end="32:59"><name pos:start="32:56" pos:end="32:59">qiov</name></expr></argument>, <argument pos:start="32:62" pos:end="32:71"><expr pos:start="32:62" pos:end="32:71"><name pos:start="32:62" pos:end="32:71">nb_sectors</name></expr></argument>,
                                       <argument pos:start="33:40" pos:end="33:61"><expr pos:start="33:40" pos:end="33:61"><name pos:start="33:40" pos:end="33:61">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="33:64" pos:end="33:66"><expr pos:start="33:64" pos:end="33:66"><operator pos:start="33:64" pos:end="33:64">&amp;</operator><name pos:start="33:65" pos:end="33:66">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="34:9" pos:end="39:9"><if pos:start="34:9" pos:end="36:9">if <condition pos:start="34:12" pos:end="34:24">(<expr pos:start="34:13" pos:end="34:23"><name pos:start="34:13" pos:end="34:15">acb</name> <operator pos:start="34:17" pos:end="34:18">==</operator> <name pos:start="34:20" pos:end="34:23">NULL</name></expr>)</condition> <block pos:start="34:26" pos:end="36:9">{<block_content pos:start="35:13" pos:end="35:23">
            <expr_stmt pos:start="35:13" pos:end="35:23"><expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <operator pos:start="35:19" pos:end="35:19">-</operator><name pos:start="35:20" pos:end="35:22">EIO</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="36:11" pos:end="39:9">else <block pos:start="36:16" pos:end="39:9">{<block_content pos:start="37:13" pos:end="38:25">
            <expr_stmt pos:start="37:13" pos:end="37:35"><expr pos:start="37:13" pos:end="37:34"><call pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:32">qemu_coroutine_yield</name><argument_list pos:start="37:33" pos:end="37:34">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="38:13" pos:end="38:25"><expr pos:start="38:13" pos:end="38:24"><name pos:start="38:13" pos:end="38:15">ret</name> <operator pos:start="38:17" pos:end="38:17">=</operator> <name pos:start="38:19" pos:end="38:24"><name pos:start="38:19" pos:end="38:20">co</name><operator pos:start="38:21" pos:end="38:21">.</operator><name pos:start="38:22" pos:end="38:24">ret</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
<label pos:start="41:1" pos:end="41:14"><name pos:start="41:1" pos:end="41:13">emulate_flags</name>:</label>
    <if_stmt pos:start="42:5" pos:end="44:5"><if pos:start="42:5" pos:end="44:5">if <condition pos:start="42:8" pos:end="42:43">(<expr pos:start="42:9" pos:end="42:42"><name pos:start="42:9" pos:end="42:11">ret</name> <operator pos:start="42:13" pos:end="42:14">==</operator> <literal type="number" pos:start="42:16" pos:end="42:16">0</literal> <operator pos:start="42:18" pos:end="42:19">&amp;&amp;</operator> <operator pos:start="42:21" pos:end="42:21">(</operator><name pos:start="42:22" pos:end="42:26">flags</name> <operator pos:start="42:28" pos:end="42:28">&amp;</operator> <name pos:start="42:30" pos:end="42:41">BDRV_REQ_FUA</name><operator pos:start="42:42" pos:end="42:42">)</operator></expr>)</condition> <block pos:start="42:45" pos:end="44:5">{<block_content pos:start="43:9" pos:end="43:32">
        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:31"><name pos:start="43:15" pos:end="43:27">bdrv_co_flush</name><argument_list pos:start="43:28" pos:end="43:31">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="45:5" pos:end="45:15">return <expr pos:start="45:12" pos:end="45:14"><name pos:start="45:12" pos:end="45:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
