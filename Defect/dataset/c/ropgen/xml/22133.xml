<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22133.c" pos:tabs="8"><function pos:start="1:1" pos:end="239:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">dvbsub_read_4bit_string</name><parameter_list pos:start="1:35" pos:end="5:67">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:51"><name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">destbuf</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:65"><decl pos:start="1:54" pos:end="1:65"><type pos:start="1:54" pos:end="1:65"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:65">dbuf_len</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:57"><decl pos:start="3:36" pos:end="3:57"><type pos:start="3:36" pos:end="3:57"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:48">uint8_t</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">srcbuf</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:71">buf_size</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:46"><decl pos:start="5:36" pos:end="5:46"><type pos:start="5:36" pos:end="5:46"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:46">non_mod</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:66"><decl pos:start="5:49" pos:end="5:66"><type pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:55">uint8_t</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:66">map_table</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="239:1">{<block_content pos:start="9:5" pos:end="237:23">

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">GetBitContext</name></type> <name pos:start="9:19" pos:end="9:20">gb</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">run_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">pixels_read</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:46">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:21">gb</name></expr></argument>, <argument pos:start="21:24" pos:end="21:30"><expr pos:start="21:24" pos:end="21:30"><operator pos:start="21:24" pos:end="21:24">*</operator><name pos:start="21:25" pos:end="21:30">srcbuf</name></expr></argument>, <argument pos:start="21:33" pos:end="21:45"><expr pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:40">buf_size</name> <operator pos:start="21:42" pos:end="21:43">&lt;&lt;</operator> <literal type="number" pos:start="21:45" pos:end="21:45">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="223:5">while <condition pos:start="25:11" pos:end="25:73">(<expr pos:start="25:12" pos:end="25:72"><call pos:start="25:12" pos:end="25:30"><name pos:start="25:12" pos:end="25:25">get_bits_count</name><argument_list pos:start="25:26" pos:end="25:30">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:29">gb</name></expr></argument>)</argument_list></call> <operator pos:start="25:32" pos:end="25:32">&lt;</operator> <name pos:start="25:34" pos:end="25:41">buf_size</name> <operator pos:start="25:43" pos:end="25:44">&lt;&lt;</operator> <literal type="number" pos:start="25:46" pos:end="25:46">3</literal> <operator pos:start="25:48" pos:end="25:49">&amp;&amp;</operator> <name pos:start="25:51" pos:end="25:61">pixels_read</name> <operator pos:start="25:63" pos:end="25:63">&lt;</operator> <name pos:start="25:65" pos:end="25:72">dbuf_len</name></expr>)</condition> <block pos:start="25:75" pos:end="223:5">{<block_content pos:start="27:9" pos:end="221:9">

        <expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:12">bits</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:31"><name pos:start="27:16" pos:end="27:23">get_bits</name><argument_list pos:start="27:24" pos:end="27:31">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:27">gb</name></expr></argument>, <argument pos:start="27:30" pos:end="27:30"><expr pos:start="27:30" pos:end="27:30"><literal type="number" pos:start="27:30" pos:end="27:30">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="221:9"><if pos:start="31:9" pos:end="47:9">if <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">bits</name></expr>)</condition> <block pos:start="31:19" pos:end="47:9">{<block_content pos:start="33:13" pos:end="45:26">

            <if_stmt pos:start="33:13" pos:end="43:13"><if pos:start="33:13" pos:end="43:13">if <condition pos:start="33:16" pos:end="33:42">(<expr pos:start="33:17" pos:end="33:41"><name pos:start="33:17" pos:end="33:23">non_mod</name> <operator pos:start="33:25" pos:end="33:26">!=</operator> <literal type="number" pos:start="33:28" pos:end="33:28">1</literal> <operator pos:start="33:30" pos:end="33:31">||</operator> <name pos:start="33:33" pos:end="33:36">bits</name> <operator pos:start="33:38" pos:end="33:39">!=</operator> <literal type="number" pos:start="33:41" pos:end="33:41">1</literal></expr>)</condition> <block pos:start="33:44" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:38">

                <if_stmt pos:start="35:17" pos:end="41:38"><if pos:start="35:17" pos:end="37:49">if <condition pos:start="35:20" pos:end="35:30">(<expr pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:29">map_table</name></expr>)</condition><block type="pseudo" pos:start="37:21" pos:end="37:49"><block_content pos:start="37:21" pos:end="37:49">

                    <expr_stmt pos:start="37:21" pos:end="37:49"><expr pos:start="37:21" pos:end="37:48"><operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:28">destbuf</name><operator pos:start="37:29" pos:end="37:30">++</operator> <operator pos:start="37:32" pos:end="37:32">=</operator> <name pos:start="37:34" pos:end="37:48"><name pos:start="37:34" pos:end="37:42">map_table</name><index pos:start="37:43" pos:end="37:48">[<expr pos:start="37:44" pos:end="37:47"><name pos:start="37:44" pos:end="37:47">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="39:17" pos:end="41:38">else<block type="pseudo" pos:start="41:21" pos:end="41:38"><block_content pos:start="41:21" pos:end="41:38">

                    <expr_stmt pos:start="41:21" pos:end="41:38"><expr pos:start="41:21" pos:end="41:37"><operator pos:start="41:21" pos:end="41:21">*</operator><name pos:start="41:22" pos:end="41:28">destbuf</name><operator pos:start="41:29" pos:end="41:30">++</operator> <operator pos:start="41:32" pos:end="41:32">=</operator> <name pos:start="41:34" pos:end="41:37">bits</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:26"><expr pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:23">pixels_read</name><operator pos:start="45:24" pos:end="45:25">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="221:9">else <block pos:start="47:16" pos:end="221:9">{<block_content pos:start="49:13" pos:end="219:13">

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:16">bits</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:28">get_bits1</name><argument_list pos:start="49:29" pos:end="49:33">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="219:13"><if pos:start="51:13" pos:end="89:13">if <condition pos:start="51:16" pos:end="51:26">(<expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:20">bits</name> <operator pos:start="51:22" pos:end="51:23">==</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal></expr>)</condition> <block pos:start="51:28" pos:end="89:13">{<block_content pos:start="53:17" pos:end="87:17">

                <expr_stmt pos:start="53:17" pos:end="53:46"><expr pos:start="53:17" pos:end="53:45"><name pos:start="53:17" pos:end="53:26">run_length</name> <operator pos:start="53:28" pos:end="53:28">=</operator> <call pos:start="53:30" pos:end="53:45"><name pos:start="53:30" pos:end="53:37">get_bits</name><argument_list pos:start="53:38" pos:end="53:45">(<argument pos:start="53:39" pos:end="53:41"><expr pos:start="53:39" pos:end="53:41"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:41">gb</name></expr></argument>, <argument pos:start="53:44" pos:end="53:44"><expr pos:start="53:44" pos:end="53:44"><literal type="number" pos:start="53:44" pos:end="53:44">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:36">(<expr pos:start="57:21" pos:end="57:35"><name pos:start="57:21" pos:end="57:30">run_length</name> <operator pos:start="57:32" pos:end="57:33">==</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>)</condition> <block pos:start="57:38" pos:end="63:17">{<block_content pos:start="59:21" pos:end="61:39">

                    <expr_stmt pos:start="59:21" pos:end="59:64"><expr pos:start="59:21" pos:end="59:63"><operator pos:start="59:21" pos:end="59:21">(</operator><operator pos:start="59:22" pos:end="59:22">*</operator><name pos:start="59:23" pos:end="59:28">srcbuf</name><operator pos:start="59:29" pos:end="59:29">)</operator> <operator pos:start="59:31" pos:end="59:32">+=</operator> <operator pos:start="59:34" pos:end="59:34">(</operator><call pos:start="59:35" pos:end="59:53"><name pos:start="59:35" pos:end="59:48">get_bits_count</name><argument_list pos:start="59:49" pos:end="59:53">(<argument pos:start="59:50" pos:end="59:52"><expr pos:start="59:50" pos:end="59:52"><operator pos:start="59:50" pos:end="59:50">&amp;</operator><name pos:start="59:51" pos:end="59:52">gb</name></expr></argument>)</argument_list></call> <operator pos:start="59:55" pos:end="59:55">+</operator> <literal type="number" pos:start="59:57" pos:end="59:57">7</literal><operator pos:start="59:58" pos:end="59:58">)</operator> <operator pos:start="59:60" pos:end="59:61">&gt;&gt;</operator> <literal type="number" pos:start="59:63" pos:end="59:63">3</literal></expr>;</expr_stmt>

                    <return pos:start="61:21" pos:end="61:39">return <expr pos:start="61:28" pos:end="61:38"><name pos:start="61:28" pos:end="61:38">pixels_read</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:26">run_length</name> <operator pos:start="67:28" pos:end="67:29">+=</operator> <literal type="number" pos:start="67:31" pos:end="67:31">2</literal></expr>;</expr_stmt>



                <if_stmt pos:start="71:17" pos:end="77:29"><if pos:start="71:17" pos:end="73:40">if <condition pos:start="71:20" pos:end="71:30">(<expr pos:start="71:21" pos:end="71:29"><name pos:start="71:21" pos:end="71:29">map_table</name></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:40"><block_content pos:start="73:21" pos:end="73:40">

                    <expr_stmt pos:start="73:21" pos:end="73:40"><expr pos:start="73:21" pos:end="73:39"><name pos:start="73:21" pos:end="73:24">bits</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <name pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:36">map_table</name><index pos:start="73:37" pos:end="73:39">[<expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="75:17" pos:end="77:29">else<block type="pseudo" pos:start="77:21" pos:end="77:29"><block_content pos:start="77:21" pos:end="77:29">

                    <expr_stmt pos:start="77:21" pos:end="77:29"><expr pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:24">bits</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <while pos:start="81:17" pos:end="87:17">while <condition pos:start="81:23" pos:end="81:66">(<expr pos:start="81:24" pos:end="81:65"><name pos:start="81:24" pos:end="81:33">run_length</name><operator pos:start="81:34" pos:end="81:35">--</operator> <operator pos:start="81:37" pos:end="81:37">&gt;</operator> <literal type="number" pos:start="81:39" pos:end="81:39">0</literal> <operator pos:start="81:41" pos:end="81:42">&amp;&amp;</operator> <name pos:start="81:44" pos:end="81:54">pixels_read</name> <operator pos:start="81:56" pos:end="81:56">&lt;</operator> <name pos:start="81:58" pos:end="81:65">dbuf_len</name></expr>)</condition> <block pos:start="81:68" pos:end="87:17">{<block_content pos:start="83:21" pos:end="85:34">

                    <expr_stmt pos:start="83:21" pos:end="83:38"><expr pos:start="83:21" pos:end="83:37"><operator pos:start="83:21" pos:end="83:21">*</operator><name pos:start="83:22" pos:end="83:28">destbuf</name><operator pos:start="83:29" pos:end="83:30">++</operator> <operator pos:start="83:32" pos:end="83:32">=</operator> <name pos:start="83:34" pos:end="83:37">bits</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:34"><expr pos:start="85:21" pos:end="85:33"><name pos:start="85:21" pos:end="85:31">pixels_read</name><operator pos:start="85:32" pos:end="85:33">++</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="219:13">else <block pos:start="89:20" pos:end="219:13">{<block_content pos:start="91:17" pos:end="217:17">

                <expr_stmt pos:start="91:17" pos:end="91:38"><expr pos:start="91:17" pos:end="91:37"><name pos:start="91:17" pos:end="91:20">bits</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <call pos:start="91:24" pos:end="91:37"><name pos:start="91:24" pos:end="91:32">get_bits1</name><argument_list pos:start="91:33" pos:end="91:37">(<argument pos:start="91:34" pos:end="91:36"><expr pos:start="91:34" pos:end="91:36"><operator pos:start="91:34" pos:end="91:34">&amp;</operator><name pos:start="91:35" pos:end="91:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="217:17"><if pos:start="93:17" pos:end="121:17">if <condition pos:start="93:20" pos:end="93:30">(<expr pos:start="93:21" pos:end="93:29"><name pos:start="93:21" pos:end="93:24">bits</name> <operator pos:start="93:26" pos:end="93:27">==</operator> <literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr>)</condition> <block pos:start="93:32" pos:end="121:17">{<block_content pos:start="95:21" pos:end="119:21">

                    <expr_stmt pos:start="95:21" pos:end="95:54"><expr pos:start="95:21" pos:end="95:53"><name pos:start="95:21" pos:end="95:30">run_length</name> <operator pos:start="95:32" pos:end="95:32">=</operator> <call pos:start="95:34" pos:end="95:49"><name pos:start="95:34" pos:end="95:41">get_bits</name><argument_list pos:start="95:42" pos:end="95:49">(<argument pos:start="95:43" pos:end="95:45"><expr pos:start="95:43" pos:end="95:45"><operator pos:start="95:43" pos:end="95:43">&amp;</operator><name pos:start="95:44" pos:end="95:45">gb</name></expr></argument>, <argument pos:start="95:48" pos:end="95:48"><expr pos:start="95:48" pos:end="95:48"><literal type="number" pos:start="95:48" pos:end="95:48">2</literal></expr></argument>)</argument_list></call> <operator pos:start="95:51" pos:end="95:51">+</operator> <literal type="number" pos:start="95:53" pos:end="95:53">4</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:44"><expr pos:start="97:21" pos:end="97:43"><name pos:start="97:21" pos:end="97:24">bits</name> <operator pos:start="97:26" pos:end="97:26">=</operator> <call pos:start="97:28" pos:end="97:43"><name pos:start="97:28" pos:end="97:35">get_bits</name><argument_list pos:start="97:36" pos:end="97:43">(<argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><operator pos:start="97:37" pos:end="97:37">&amp;</operator><name pos:start="97:38" pos:end="97:39">gb</name></expr></argument>, <argument pos:start="97:42" pos:end="97:42"><expr pos:start="97:42" pos:end="97:42"><literal type="number" pos:start="97:42" pos:end="97:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="101:21" pos:end="119:21"><if pos:start="101:21" pos:end="103:50">if <condition pos:start="101:24" pos:end="101:50">(<expr pos:start="101:25" pos:end="101:49"><name pos:start="101:25" pos:end="101:31">non_mod</name> <operator pos:start="101:33" pos:end="101:34">==</operator> <literal type="number" pos:start="101:36" pos:end="101:36">1</literal> <operator pos:start="101:38" pos:end="101:39">&amp;&amp;</operator> <name pos:start="101:41" pos:end="101:44">bits</name> <operator pos:start="101:46" pos:end="101:47">==</operator> <literal type="number" pos:start="101:49" pos:end="101:49">1</literal></expr>)</condition><block type="pseudo" pos:start="103:25" pos:end="103:50"><block_content pos:start="103:25" pos:end="103:50">

                        <expr_stmt pos:start="103:25" pos:end="103:50"><expr pos:start="103:25" pos:end="103:49"><name pos:start="103:25" pos:end="103:35">pixels_read</name> <operator pos:start="103:37" pos:end="103:38">+=</operator> <name pos:start="103:40" pos:end="103:49">run_length</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="105:21" pos:end="119:21">else <block pos:start="105:26" pos:end="119:21">{<block_content pos:start="107:25" pos:end="117:25">

                        <if_stmt pos:start="107:25" pos:end="109:51"><if pos:start="107:25" pos:end="109:51">if <condition pos:start="107:28" pos:end="107:38">(<expr pos:start="107:29" pos:end="107:37"><name pos:start="107:29" pos:end="107:37">map_table</name></expr>)</condition><block type="pseudo" pos:start="109:29" pos:end="109:51"><block_content pos:start="109:29" pos:end="109:51">

                            <expr_stmt pos:start="109:29" pos:end="109:51"><expr pos:start="109:29" pos:end="109:50"><name pos:start="109:29" pos:end="109:32">bits</name> <operator pos:start="109:34" pos:end="109:34">=</operator> <name pos:start="109:36" pos:end="109:50"><name pos:start="109:36" pos:end="109:44">map_table</name><index pos:start="109:45" pos:end="109:50">[<expr pos:start="109:46" pos:end="109:49"><name pos:start="109:46" pos:end="109:49">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <while pos:start="111:25" pos:end="117:25">while <condition pos:start="111:31" pos:end="111:74">(<expr pos:start="111:32" pos:end="111:73"><name pos:start="111:32" pos:end="111:41">run_length</name><operator pos:start="111:42" pos:end="111:43">--</operator> <operator pos:start="111:45" pos:end="111:45">&gt;</operator> <literal type="number" pos:start="111:47" pos:end="111:47">0</literal> <operator pos:start="111:49" pos:end="111:50">&amp;&amp;</operator> <name pos:start="111:52" pos:end="111:62">pixels_read</name> <operator pos:start="111:64" pos:end="111:64">&lt;</operator> <name pos:start="111:66" pos:end="111:73">dbuf_len</name></expr>)</condition> <block pos:start="111:76" pos:end="117:25">{<block_content pos:start="113:29" pos:end="115:42">

                            <expr_stmt pos:start="113:29" pos:end="113:46"><expr pos:start="113:29" pos:end="113:45"><operator pos:start="113:29" pos:end="113:29">*</operator><name pos:start="113:30" pos:end="113:36">destbuf</name><operator pos:start="113:37" pos:end="113:38">++</operator> <operator pos:start="113:40" pos:end="113:40">=</operator> <name pos:start="113:42" pos:end="113:45">bits</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="115:29" pos:end="115:42"><expr pos:start="115:29" pos:end="115:41"><name pos:start="115:29" pos:end="115:39">pixels_read</name><operator pos:start="115:40" pos:end="115:41">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="121:19" pos:end="217:17">else <block pos:start="121:24" pos:end="217:17">{<block_content pos:start="123:21" pos:end="215:21">

                    <expr_stmt pos:start="123:21" pos:end="123:44"><expr pos:start="123:21" pos:end="123:43"><name pos:start="123:21" pos:end="123:24">bits</name> <operator pos:start="123:26" pos:end="123:26">=</operator> <call pos:start="123:28" pos:end="123:43"><name pos:start="123:28" pos:end="123:35">get_bits</name><argument_list pos:start="123:36" pos:end="123:43">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><operator pos:start="123:37" pos:end="123:37">&amp;</operator><name pos:start="123:38" pos:end="123:39">gb</name></expr></argument>, <argument pos:start="123:42" pos:end="123:42"><expr pos:start="123:42" pos:end="123:42"><literal type="number" pos:start="123:42" pos:end="123:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="125:21" pos:end="215:21"><if pos:start="125:21" pos:end="153:21">if <condition pos:start="125:24" pos:end="125:34">(<expr pos:start="125:25" pos:end="125:33"><name pos:start="125:25" pos:end="125:28">bits</name> <operator pos:start="125:30" pos:end="125:31">==</operator> <literal type="number" pos:start="125:33" pos:end="125:33">2</literal></expr>)</condition> <block pos:start="125:36" pos:end="153:21">{<block_content pos:start="127:25" pos:end="151:25">

                        <expr_stmt pos:start="127:25" pos:end="127:58"><expr pos:start="127:25" pos:end="127:57"><name pos:start="127:25" pos:end="127:34">run_length</name> <operator pos:start="127:36" pos:end="127:36">=</operator> <call pos:start="127:38" pos:end="127:53"><name pos:start="127:38" pos:end="127:45">get_bits</name><argument_list pos:start="127:46" pos:end="127:53">(<argument pos:start="127:47" pos:end="127:49"><expr pos:start="127:47" pos:end="127:49"><operator pos:start="127:47" pos:end="127:47">&amp;</operator><name pos:start="127:48" pos:end="127:49">gb</name></expr></argument>, <argument pos:start="127:52" pos:end="127:52"><expr pos:start="127:52" pos:end="127:52"><literal type="number" pos:start="127:52" pos:end="127:52">4</literal></expr></argument>)</argument_list></call> <operator pos:start="127:55" pos:end="127:55">+</operator> <literal type="number" pos:start="127:57" pos:end="127:57">9</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="129:25" pos:end="129:48"><expr pos:start="129:25" pos:end="129:47"><name pos:start="129:25" pos:end="129:28">bits</name> <operator pos:start="129:30" pos:end="129:30">=</operator> <call pos:start="129:32" pos:end="129:47"><name pos:start="129:32" pos:end="129:39">get_bits</name><argument_list pos:start="129:40" pos:end="129:47">(<argument pos:start="129:41" pos:end="129:43"><expr pos:start="129:41" pos:end="129:43"><operator pos:start="129:41" pos:end="129:41">&amp;</operator><name pos:start="129:42" pos:end="129:43">gb</name></expr></argument>, <argument pos:start="129:46" pos:end="129:46"><expr pos:start="129:46" pos:end="129:46"><literal type="number" pos:start="129:46" pos:end="129:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="133:25" pos:end="151:25"><if pos:start="133:25" pos:end="135:54">if <condition pos:start="133:28" pos:end="133:54">(<expr pos:start="133:29" pos:end="133:53"><name pos:start="133:29" pos:end="133:35">non_mod</name> <operator pos:start="133:37" pos:end="133:38">==</operator> <literal type="number" pos:start="133:40" pos:end="133:40">1</literal> <operator pos:start="133:42" pos:end="133:43">&amp;&amp;</operator> <name pos:start="133:45" pos:end="133:48">bits</name> <operator pos:start="133:50" pos:end="133:51">==</operator> <literal type="number" pos:start="133:53" pos:end="133:53">1</literal></expr>)</condition><block type="pseudo" pos:start="135:29" pos:end="135:54"><block_content pos:start="135:29" pos:end="135:54">

                            <expr_stmt pos:start="135:29" pos:end="135:54"><expr pos:start="135:29" pos:end="135:53"><name pos:start="135:29" pos:end="135:39">pixels_read</name> <operator pos:start="135:41" pos:end="135:42">+=</operator> <name pos:start="135:44" pos:end="135:53">run_length</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="137:25" pos:end="151:25">else <block pos:start="137:30" pos:end="151:25">{<block_content pos:start="139:29" pos:end="149:29">

                            <if_stmt pos:start="139:29" pos:end="141:55"><if pos:start="139:29" pos:end="141:55">if <condition pos:start="139:32" pos:end="139:42">(<expr pos:start="139:33" pos:end="139:41"><name pos:start="139:33" pos:end="139:41">map_table</name></expr>)</condition><block type="pseudo" pos:start="141:33" pos:end="141:55"><block_content pos:start="141:33" pos:end="141:55">

                                <expr_stmt pos:start="141:33" pos:end="141:55"><expr pos:start="141:33" pos:end="141:54"><name pos:start="141:33" pos:end="141:36">bits</name> <operator pos:start="141:38" pos:end="141:38">=</operator> <name pos:start="141:40" pos:end="141:54"><name pos:start="141:40" pos:end="141:48">map_table</name><index pos:start="141:49" pos:end="141:54">[<expr pos:start="141:50" pos:end="141:53"><name pos:start="141:50" pos:end="141:53">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <while pos:start="143:29" pos:end="149:29">while <condition pos:start="143:35" pos:end="143:78">(<expr pos:start="143:36" pos:end="143:77"><name pos:start="143:36" pos:end="143:45">run_length</name><operator pos:start="143:46" pos:end="143:47">--</operator> <operator pos:start="143:49" pos:end="143:49">&gt;</operator> <literal type="number" pos:start="143:51" pos:end="143:51">0</literal> <operator pos:start="143:53" pos:end="143:54">&amp;&amp;</operator> <name pos:start="143:56" pos:end="143:66">pixels_read</name> <operator pos:start="143:68" pos:end="143:68">&lt;</operator> <name pos:start="143:70" pos:end="143:77">dbuf_len</name></expr>)</condition> <block pos:start="143:80" pos:end="149:29">{<block_content pos:start="145:33" pos:end="147:46">

                                <expr_stmt pos:start="145:33" pos:end="145:50"><expr pos:start="145:33" pos:end="145:49"><operator pos:start="145:33" pos:end="145:33">*</operator><name pos:start="145:34" pos:end="145:40">destbuf</name><operator pos:start="145:41" pos:end="145:42">++</operator> <operator pos:start="145:44" pos:end="145:44">=</operator> <name pos:start="145:46" pos:end="145:49">bits</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="147:33" pos:end="147:46"><expr pos:start="147:33" pos:end="147:45"><name pos:start="147:33" pos:end="147:43">pixels_read</name><operator pos:start="147:44" pos:end="147:45">++</operator></expr>;</expr_stmt>

                            </block_content>}</block></while>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="153:23" pos:end="181:21">else if <condition pos:start="153:31" pos:end="153:41">(<expr pos:start="153:32" pos:end="153:40"><name pos:start="153:32" pos:end="153:35">bits</name> <operator pos:start="153:37" pos:end="153:38">==</operator> <literal type="number" pos:start="153:40" pos:end="153:40">3</literal></expr>)</condition> <block pos:start="153:43" pos:end="181:21">{<block_content pos:start="155:25" pos:end="179:25">

                        <expr_stmt pos:start="155:25" pos:end="155:59"><expr pos:start="155:25" pos:end="155:58"><name pos:start="155:25" pos:end="155:34">run_length</name> <operator pos:start="155:36" pos:end="155:36">=</operator> <call pos:start="155:38" pos:end="155:53"><name pos:start="155:38" pos:end="155:45">get_bits</name><argument_list pos:start="155:46" pos:end="155:53">(<argument pos:start="155:47" pos:end="155:49"><expr pos:start="155:47" pos:end="155:49"><operator pos:start="155:47" pos:end="155:47">&amp;</operator><name pos:start="155:48" pos:end="155:49">gb</name></expr></argument>, <argument pos:start="155:52" pos:end="155:52"><expr pos:start="155:52" pos:end="155:52"><literal type="number" pos:start="155:52" pos:end="155:52">8</literal></expr></argument>)</argument_list></call> <operator pos:start="155:55" pos:end="155:55">+</operator> <literal type="number" pos:start="155:57" pos:end="155:58">25</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="157:25" pos:end="157:48"><expr pos:start="157:25" pos:end="157:47"><name pos:start="157:25" pos:end="157:28">bits</name> <operator pos:start="157:30" pos:end="157:30">=</operator> <call pos:start="157:32" pos:end="157:47"><name pos:start="157:32" pos:end="157:39">get_bits</name><argument_list pos:start="157:40" pos:end="157:47">(<argument pos:start="157:41" pos:end="157:43"><expr pos:start="157:41" pos:end="157:43"><operator pos:start="157:41" pos:end="157:41">&amp;</operator><name pos:start="157:42" pos:end="157:43">gb</name></expr></argument>, <argument pos:start="157:46" pos:end="157:46"><expr pos:start="157:46" pos:end="157:46"><literal type="number" pos:start="157:46" pos:end="157:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="161:25" pos:end="179:25"><if pos:start="161:25" pos:end="163:54">if <condition pos:start="161:28" pos:end="161:54">(<expr pos:start="161:29" pos:end="161:53"><name pos:start="161:29" pos:end="161:35">non_mod</name> <operator pos:start="161:37" pos:end="161:38">==</operator> <literal type="number" pos:start="161:40" pos:end="161:40">1</literal> <operator pos:start="161:42" pos:end="161:43">&amp;&amp;</operator> <name pos:start="161:45" pos:end="161:48">bits</name> <operator pos:start="161:50" pos:end="161:51">==</operator> <literal type="number" pos:start="161:53" pos:end="161:53">1</literal></expr>)</condition><block type="pseudo" pos:start="163:29" pos:end="163:54"><block_content pos:start="163:29" pos:end="163:54">

                            <expr_stmt pos:start="163:29" pos:end="163:54"><expr pos:start="163:29" pos:end="163:53"><name pos:start="163:29" pos:end="163:39">pixels_read</name> <operator pos:start="163:41" pos:end="163:42">+=</operator> <name pos:start="163:44" pos:end="163:53">run_length</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="165:25" pos:end="179:25">else <block pos:start="165:30" pos:end="179:25">{<block_content pos:start="167:29" pos:end="177:29">

                            <if_stmt pos:start="167:29" pos:end="169:55"><if pos:start="167:29" pos:end="169:55">if <condition pos:start="167:32" pos:end="167:42">(<expr pos:start="167:33" pos:end="167:41"><name pos:start="167:33" pos:end="167:41">map_table</name></expr>)</condition><block type="pseudo" pos:start="169:33" pos:end="169:55"><block_content pos:start="169:33" pos:end="169:55">

                                <expr_stmt pos:start="169:33" pos:end="169:55"><expr pos:start="169:33" pos:end="169:54"><name pos:start="169:33" pos:end="169:36">bits</name> <operator pos:start="169:38" pos:end="169:38">=</operator> <name pos:start="169:40" pos:end="169:54"><name pos:start="169:40" pos:end="169:48">map_table</name><index pos:start="169:49" pos:end="169:54">[<expr pos:start="169:50" pos:end="169:53"><name pos:start="169:50" pos:end="169:53">bits</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <while pos:start="171:29" pos:end="177:29">while <condition pos:start="171:35" pos:end="171:78">(<expr pos:start="171:36" pos:end="171:77"><name pos:start="171:36" pos:end="171:45">run_length</name><operator pos:start="171:46" pos:end="171:47">--</operator> <operator pos:start="171:49" pos:end="171:49">&gt;</operator> <literal type="number" pos:start="171:51" pos:end="171:51">0</literal> <operator pos:start="171:53" pos:end="171:54">&amp;&amp;</operator> <name pos:start="171:56" pos:end="171:66">pixels_read</name> <operator pos:start="171:68" pos:end="171:68">&lt;</operator> <name pos:start="171:70" pos:end="171:77">dbuf_len</name></expr>)</condition> <block pos:start="171:80" pos:end="177:29">{<block_content pos:start="173:33" pos:end="175:46">

                                <expr_stmt pos:start="173:33" pos:end="173:50"><expr pos:start="173:33" pos:end="173:49"><operator pos:start="173:33" pos:end="173:33">*</operator><name pos:start="173:34" pos:end="173:40">destbuf</name><operator pos:start="173:41" pos:end="173:42">++</operator> <operator pos:start="173:44" pos:end="173:44">=</operator> <name pos:start="173:46" pos:end="173:49">bits</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="175:33" pos:end="175:46"><expr pos:start="175:33" pos:end="175:45"><name pos:start="175:33" pos:end="175:43">pixels_read</name><operator pos:start="175:44" pos:end="175:45">++</operator></expr>;</expr_stmt>

                            </block_content>}</block></while>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="181:23" pos:end="201:21">else if <condition pos:start="181:31" pos:end="181:41">(<expr pos:start="181:32" pos:end="181:40"><name pos:start="181:32" pos:end="181:35">bits</name> <operator pos:start="181:37" pos:end="181:38">==</operator> <literal type="number" pos:start="181:40" pos:end="181:40">1</literal></expr>)</condition> <block pos:start="181:43" pos:end="201:21">{<block_content pos:start="183:25" pos:end="199:25">

                        <expr_stmt pos:start="183:25" pos:end="183:41"><expr pos:start="183:25" pos:end="183:40"><name pos:start="183:25" pos:end="183:35">pixels_read</name> <operator pos:start="183:37" pos:end="183:38">+=</operator> <literal type="number" pos:start="183:40" pos:end="183:40">2</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="185:25" pos:end="191:37"><if pos:start="185:25" pos:end="187:48">if <condition pos:start="185:28" pos:end="185:38">(<expr pos:start="185:29" pos:end="185:37"><name pos:start="185:29" pos:end="185:37">map_table</name></expr>)</condition><block type="pseudo" pos:start="187:29" pos:end="187:48"><block_content pos:start="187:29" pos:end="187:48">

                            <expr_stmt pos:start="187:29" pos:end="187:48"><expr pos:start="187:29" pos:end="187:47"><name pos:start="187:29" pos:end="187:32">bits</name> <operator pos:start="187:34" pos:end="187:34">=</operator> <name pos:start="187:36" pos:end="187:47"><name pos:start="187:36" pos:end="187:44">map_table</name><index pos:start="187:45" pos:end="187:47">[<expr pos:start="187:46" pos:end="187:46"><literal type="number" pos:start="187:46" pos:end="187:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="189:25" pos:end="191:37">else<block type="pseudo" pos:start="191:29" pos:end="191:37"><block_content pos:start="191:29" pos:end="191:37">

                            <expr_stmt pos:start="191:29" pos:end="191:37"><expr pos:start="191:29" pos:end="191:36"><name pos:start="191:29" pos:end="191:32">bits</name> <operator pos:start="191:34" pos:end="191:34">=</operator> <literal type="number" pos:start="191:36" pos:end="191:36">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <if_stmt pos:start="193:25" pos:end="199:25"><if pos:start="193:25" pos:end="199:25">if <condition pos:start="193:28" pos:end="193:52">(<expr pos:start="193:29" pos:end="193:51"><name pos:start="193:29" pos:end="193:39">pixels_read</name> <operator pos:start="193:41" pos:end="193:42">&lt;=</operator> <name pos:start="193:44" pos:end="193:51">dbuf_len</name></expr>)</condition> <block pos:start="193:54" pos:end="199:25">{<block_content pos:start="195:29" pos:end="197:46">

                            <expr_stmt pos:start="195:29" pos:end="195:46"><expr pos:start="195:29" pos:end="195:45"><operator pos:start="195:29" pos:end="195:29">*</operator><name pos:start="195:30" pos:end="195:36">destbuf</name><operator pos:start="195:37" pos:end="195:38">++</operator> <operator pos:start="195:40" pos:end="195:40">=</operator> <name pos:start="195:42" pos:end="195:45">bits</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="197:29" pos:end="197:46"><expr pos:start="197:29" pos:end="197:45"><operator pos:start="197:29" pos:end="197:29">*</operator><name pos:start="197:30" pos:end="197:36">destbuf</name><operator pos:start="197:37" pos:end="197:38">++</operator> <operator pos:start="197:40" pos:end="197:40">=</operator> <name pos:start="197:42" pos:end="197:45">bits</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="201:23" pos:end="215:21">else <block pos:start="201:28" pos:end="215:21">{<block_content pos:start="203:25" pos:end="213:39">

                        <if_stmt pos:start="203:25" pos:end="209:37"><if pos:start="203:25" pos:end="205:48">if <condition pos:start="203:28" pos:end="203:38">(<expr pos:start="203:29" pos:end="203:37"><name pos:start="203:29" pos:end="203:37">map_table</name></expr>)</condition><block type="pseudo" pos:start="205:29" pos:end="205:48"><block_content pos:start="205:29" pos:end="205:48">

                            <expr_stmt pos:start="205:29" pos:end="205:48"><expr pos:start="205:29" pos:end="205:47"><name pos:start="205:29" pos:end="205:32">bits</name> <operator pos:start="205:34" pos:end="205:34">=</operator> <name pos:start="205:36" pos:end="205:47"><name pos:start="205:36" pos:end="205:44">map_table</name><index pos:start="205:45" pos:end="205:47">[<expr pos:start="205:46" pos:end="205:46"><literal type="number" pos:start="205:46" pos:end="205:46">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="207:25" pos:end="209:37">else<block type="pseudo" pos:start="209:29" pos:end="209:37"><block_content pos:start="209:29" pos:end="209:37">

                            <expr_stmt pos:start="209:29" pos:end="209:37"><expr pos:start="209:29" pos:end="209:36"><name pos:start="209:29" pos:end="209:32">bits</name> <operator pos:start="209:34" pos:end="209:34">=</operator> <literal type="number" pos:start="209:36" pos:end="209:36">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        <expr_stmt pos:start="211:25" pos:end="211:42"><expr pos:start="211:25" pos:end="211:41"><operator pos:start="211:25" pos:end="211:25">*</operator><name pos:start="211:26" pos:end="211:32">destbuf</name><operator pos:start="211:33" pos:end="211:34">++</operator> <operator pos:start="211:36" pos:end="211:36">=</operator> <name pos:start="211:38" pos:end="211:41">bits</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="213:25" pos:end="213:39"><expr pos:start="213:25" pos:end="213:38"><name pos:start="213:25" pos:end="213:35">pixels_read</name> <operator pos:start="213:37" pos:end="213:38">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="227:5" pos:end="229:65"><if pos:start="227:5" pos:end="229:65">if <condition pos:start="227:8" pos:end="227:25">(<expr pos:start="227:9" pos:end="227:24"><call pos:start="227:9" pos:end="227:24"><name pos:start="227:9" pos:end="227:16">get_bits</name><argument_list pos:start="227:17" pos:end="227:24">(<argument pos:start="227:18" pos:end="227:20"><expr pos:start="227:18" pos:end="227:20"><operator pos:start="227:18" pos:end="227:18">&amp;</operator><name pos:start="227:19" pos:end="227:20">gb</name></expr></argument>, <argument pos:start="227:23" pos:end="227:23"><expr pos:start="227:23" pos:end="227:23"><literal type="number" pos:start="227:23" pos:end="227:23">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="229:9" pos:end="229:65"><block_content pos:start="229:9" pos:end="229:65">

        <expr_stmt pos:start="229:9" pos:end="229:65"><expr pos:start="229:9" pos:end="229:64"><call pos:start="229:9" pos:end="229:64"><name pos:start="229:9" pos:end="229:14">av_log</name><argument_list pos:start="229:15" pos:end="229:64">(<argument pos:start="229:16" pos:end="229:16"><expr pos:start="229:16" pos:end="229:16"><literal type="number" pos:start="229:16" pos:end="229:16">0</literal></expr></argument>, <argument pos:start="229:19" pos:end="229:30"><expr pos:start="229:19" pos:end="229:30"><name pos:start="229:19" pos:end="229:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="229:33" pos:end="229:63"><expr pos:start="229:33" pos:end="229:63"><literal type="string" pos:start="229:33" pos:end="229:63">"DVBSub error: line overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:48"><expr pos:start="233:5" pos:end="233:47"><operator pos:start="233:5" pos:end="233:5">(</operator><operator pos:start="233:6" pos:end="233:6">*</operator><name pos:start="233:7" pos:end="233:12">srcbuf</name><operator pos:start="233:13" pos:end="233:13">)</operator> <operator pos:start="233:15" pos:end="233:16">+=</operator> <operator pos:start="233:18" pos:end="233:18">(</operator><call pos:start="233:19" pos:end="233:37"><name pos:start="233:19" pos:end="233:32">get_bits_count</name><argument_list pos:start="233:33" pos:end="233:37">(<argument pos:start="233:34" pos:end="233:36"><expr pos:start="233:34" pos:end="233:36"><operator pos:start="233:34" pos:end="233:34">&amp;</operator><name pos:start="233:35" pos:end="233:36">gb</name></expr></argument>)</argument_list></call> <operator pos:start="233:39" pos:end="233:39">+</operator> <literal type="number" pos:start="233:41" pos:end="233:41">7</literal><operator pos:start="233:42" pos:end="233:42">)</operator> <operator pos:start="233:44" pos:end="233:45">&gt;&gt;</operator> <literal type="number" pos:start="233:47" pos:end="233:47">3</literal></expr>;</expr_stmt>



    <return pos:start="237:5" pos:end="237:23">return <expr pos:start="237:12" pos:end="237:22"><name pos:start="237:12" pos:end="237:22">pixels_read</name></expr>;</return>

</block_content>}</block></function>
</unit>
