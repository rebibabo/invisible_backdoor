<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23743.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:18">stby_e</name>)<parameter_list pos:start="1:20" pos:end="1:75">(<parameter pos:start="1:21" pos:end="1:37"><decl pos:start="1:21" pos:end="1:37"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:32">CPUHPPAState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">env</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:51">target_ulong</name></type> <name pos:start="1:53" pos:end="1:56">addr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:74"><decl pos:start="1:59" pos:end="1:74"><type pos:start="1:59" pos:end="1:74"><name pos:start="1:59" pos:end="1:70">target_ulong</name></type> <name pos:start="1:72" pos:end="1:74">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">uintptr_t</name></type> <name pos:start="5:15" pos:end="5:16">ra</name> <init pos:start="5:18" pos:end="5:26">= <expr pos:start="5:20" pos:end="5:26"><call pos:start="5:20" pos:end="5:26"><name pos:start="5:20" pos:end="5:24">GETPC</name><argument_list pos:start="5:25" pos:end="5:26">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <switch pos:start="9:5" pos:end="55:5">switch <condition pos:start="9:12" pos:end="9:21">(<expr pos:start="9:13" pos:end="9:20"><name pos:start="9:13" pos:end="9:16">addr</name> <operator pos:start="9:18" pos:end="9:18">&amp;</operator> <literal type="number" pos:start="9:20" pos:end="9:20">3</literal></expr>)</condition> <block pos:start="9:23" pos:end="55:5">{<block_content pos:start="11:5" pos:end="53:14">

    <case pos:start="11:5" pos:end="11:11">case <expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">3</literal></expr>:</case>

        <comment type="block" pos:start="13:9" pos:end="13:51">/* The 3 byte store must appear atomic.  */</comment>

        <if_stmt pos:start="15:9" pos:end="25:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:26">(<expr pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:25">parallel_cpus</name></expr>)</condition> <block pos:start="15:28" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:64">

            <expr_stmt pos:start="17:13" pos:end="17:64"><expr pos:start="17:13" pos:end="17:63"><call pos:start="17:13" pos:end="17:63"><name pos:start="17:13" pos:end="17:26">atomic_store_3</name><argument_list pos:start="17:27" pos:end="17:63">(<argument pos:start="17:28" pos:end="17:30"><expr pos:start="17:28" pos:end="17:30"><name pos:start="17:28" pos:end="17:30">env</name></expr></argument>, <argument pos:start="17:33" pos:end="17:40"><expr pos:start="17:33" pos:end="17:40"><name pos:start="17:33" pos:end="17:36">addr</name> <operator pos:start="17:38" pos:end="17:38">-</operator> <literal type="number" pos:start="17:40" pos:end="17:40">3</literal></expr></argument>, <argument pos:start="17:43" pos:end="17:45"><expr pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">val</name></expr></argument>, <argument pos:start="17:48" pos:end="17:58"><expr pos:start="17:48" pos:end="17:58"><literal type="number" pos:start="17:48" pos:end="17:58">0xffffff00u</literal></expr></argument>, <argument pos:start="17:61" pos:end="17:62"><expr pos:start="17:61" pos:end="17:62"><name pos:start="17:61" pos:end="17:62">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="19:11" pos:end="25:9">else <block pos:start="19:16" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:57">

            <expr_stmt pos:start="21:13" pos:end="21:58"><expr pos:start="21:13" pos:end="21:57"><call pos:start="21:13" pos:end="21:57"><name pos:start="21:13" pos:end="21:27">cpu_stw_data_ra</name><argument_list pos:start="21:28" pos:end="21:57">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">env</name></expr></argument>, <argument pos:start="21:34" pos:end="21:41"><expr pos:start="21:34" pos:end="21:41"><name pos:start="21:34" pos:end="21:37">addr</name> <operator pos:start="21:39" pos:end="21:39">-</operator> <literal type="number" pos:start="21:41" pos:end="21:41">3</literal></expr></argument>, <argument pos:start="21:44" pos:end="21:52"><expr pos:start="21:44" pos:end="21:52"><name pos:start="21:44" pos:end="21:46">val</name> <operator pos:start="21:48" pos:end="21:49">&gt;&gt;</operator> <literal type="number" pos:start="21:51" pos:end="21:52">16</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:56"><expr pos:start="21:55" pos:end="21:56"><name pos:start="21:55" pos:end="21:56">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:57"><expr pos:start="23:13" pos:end="23:56"><call pos:start="23:13" pos:end="23:56"><name pos:start="23:13" pos:end="23:27">cpu_stb_data_ra</name><argument_list pos:start="23:28" pos:end="23:56">(<argument pos:start="23:29" pos:end="23:31"><expr pos:start="23:29" pos:end="23:31"><name pos:start="23:29" pos:end="23:31">env</name></expr></argument>, <argument pos:start="23:34" pos:end="23:41"><expr pos:start="23:34" pos:end="23:41"><name pos:start="23:34" pos:end="23:37">addr</name> <operator pos:start="23:39" pos:end="23:39">-</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal></expr></argument>, <argument pos:start="23:44" pos:end="23:51"><expr pos:start="23:44" pos:end="23:51"><name pos:start="23:44" pos:end="23:46">val</name> <operator pos:start="23:48" pos:end="23:49">&gt;&gt;</operator> <literal type="number" pos:start="23:51" pos:end="23:51">8</literal></expr></argument>, <argument pos:start="23:54" pos:end="23:55"><expr pos:start="23:54" pos:end="23:55"><name pos:start="23:54" pos:end="23:55">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">2</literal></expr>:</case>

        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><call pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:23">cpu_stw_data_ra</name><argument_list pos:start="31:24" pos:end="31:53">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">env</name></expr></argument>, <argument pos:start="31:30" pos:end="31:37"><expr pos:start="31:30" pos:end="31:37"><name pos:start="31:30" pos:end="31:33">addr</name> <operator pos:start="31:35" pos:end="31:35">-</operator> <literal type="number" pos:start="31:37" pos:end="31:37">2</literal></expr></argument>, <argument pos:start="31:40" pos:end="31:48"><expr pos:start="31:40" pos:end="31:48"><name pos:start="31:40" pos:end="31:42">val</name> <operator pos:start="31:44" pos:end="31:45">&gt;&gt;</operator> <literal type="number" pos:start="31:47" pos:end="31:48">16</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:52"><expr pos:start="31:51" pos:end="31:52"><name pos:start="31:51" pos:end="31:52">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:11">case <expr pos:start="35:10" pos:end="35:10"><literal type="number" pos:start="35:10" pos:end="35:10">1</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:54"><expr pos:start="37:9" pos:end="37:53"><call pos:start="37:9" pos:end="37:53"><name pos:start="37:9" pos:end="37:23">cpu_stb_data_ra</name><argument_list pos:start="37:24" pos:end="37:53">(<argument pos:start="37:25" pos:end="37:27"><expr pos:start="37:25" pos:end="37:27"><name pos:start="37:25" pos:end="37:27">env</name></expr></argument>, <argument pos:start="37:30" pos:end="37:37"><expr pos:start="37:30" pos:end="37:37"><name pos:start="37:30" pos:end="37:33">addr</name> <operator pos:start="37:35" pos:end="37:35">-</operator> <literal type="number" pos:start="37:37" pos:end="37:37">1</literal></expr></argument>, <argument pos:start="37:40" pos:end="37:48"><expr pos:start="37:40" pos:end="37:48"><name pos:start="37:40" pos:end="37:42">val</name> <operator pos:start="37:44" pos:end="37:45">&gt;&gt;</operator> <literal type="number" pos:start="37:47" pos:end="37:48">24</literal></expr></argument>, <argument pos:start="37:51" pos:end="37:52"><expr pos:start="37:51" pos:end="37:52"><name pos:start="37:51" pos:end="37:52">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <default pos:start="41:5" pos:end="48:0">default:</default>

        <comment type="block" pos:start="43:9" pos:end="45:41">/* Nothing is stored, but protection is checked and the

           cacheline is marked dirty.  */</comment>

<cpp:ifndef pos:start="47:1" pos:end="47:24">#<cpp:directive pos:start="47:2" pos:end="47:7">ifndef</cpp:directive> <name pos:start="47:9" pos:end="47:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        <expr_stmt pos:start="49:9" pos:end="52:0"><expr pos:start="49:9" pos:end="49:57"><call pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:19">probe_write</name><argument_list pos:start="49:20" pos:end="49:57">(<argument pos:start="49:21" pos:end="49:23"><expr pos:start="49:21" pos:end="49:23"><name pos:start="49:21" pos:end="49:23">env</name></expr></argument>, <argument pos:start="49:26" pos:end="49:29"><expr pos:start="49:26" pos:end="49:29"><name pos:start="49:26" pos:end="49:29">addr</name></expr></argument>, <argument pos:start="49:32" pos:end="49:52"><expr pos:start="49:32" pos:end="49:52"><call pos:start="49:32" pos:end="49:52"><name pos:start="49:32" pos:end="49:44">cpu_mmu_index</name><argument_list pos:start="49:45" pos:end="49:52">(<argument pos:start="49:46" pos:end="49:48"><expr pos:start="49:46" pos:end="49:48"><name pos:start="49:46" pos:end="49:48">env</name></expr></argument>, <argument pos:start="49:51" pos:end="49:51"><expr pos:start="49:51" pos:end="49:51"><literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:55" pos:end="49:56"><expr pos:start="49:55" pos:end="49:56"><name pos:start="49:55" pos:end="49:56">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
