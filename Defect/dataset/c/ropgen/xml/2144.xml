<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2144.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ircam_read_header</name><parameter_list pos:start="1:29" pos:end="1:48">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:13">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">magic</name></decl>, <decl pos:start="5:21" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:21" pos:end="5:31">sample_rate</name></decl>, <decl pos:start="5:34" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:34" pos:end="5:41">channels</name></decl>, <decl pos:start="5:44" pos:end="5:46"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:44" pos:end="5:46">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:20">AVCodecTag</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">tags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">le</name> <init pos:start="9:12" pos:end="9:15">= <expr pos:start="9:14" pos:end="9:15"><operator pos:start="9:14" pos:end="9:14">-</operator><literal type="number" pos:start="9:15" pos:end="9:15">1</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:29"><expr pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:9">magic</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:21">avio_rl32</name><argument_list pos:start="15:22" pos:end="15:28">(<argument pos:start="15:23" pos:end="15:27"><expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:27">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="27:5">for <control pos:start="17:9" pos:end="17:27">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">7</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:24">i</name><operator pos:start="17:25" pos:end="17:26">++</operator></expr></incr>)</control> <block pos:start="17:29" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:9">

        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:36">(<expr pos:start="19:13" pos:end="19:35"><name pos:start="19:13" pos:end="19:17">magic</name> <operator pos:start="19:19" pos:end="19:20">==</operator> <name pos:start="19:22" pos:end="19:29"><name pos:start="19:22" pos:end="19:26">table</name><index pos:start="19:27" pos:end="19:29">[<expr pos:start="19:28" pos:end="19:28"><name pos:start="19:28" pos:end="19:28">i</name></expr>]</index></name><operator pos:start="19:30" pos:end="19:30">.</operator><name pos:start="19:31" pos:end="19:35">magic</name></expr>)</condition> <block pos:start="19:38" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:18">

            <expr_stmt pos:start="21:13" pos:end="21:32"><expr pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:14">le</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:25"><name pos:start="21:18" pos:end="21:22">table</name><index pos:start="21:23" pos:end="21:25">[<expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">i</name></expr>]</index></name><operator pos:start="21:26" pos:end="21:26">.</operator><name pos:start="21:27" pos:end="21:31">is_le</name></expr>;</expr_stmt>

            <break pos:start="23:13" pos:end="23:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="31:5" pos:end="55:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:10">le</name> <operator pos:start="31:12" pos:end="31:13">==</operator> <literal type="number" pos:start="31:15" pos:end="31:15">1</literal></expr>)</condition> <block pos:start="31:18" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:45">

        <expr_stmt pos:start="33:9" pos:end="33:53"><expr pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:19">sample_rate</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:52"><name pos:start="33:23" pos:end="33:34">av_int2float</name><argument_list pos:start="33:35" pos:end="33:52">(<argument pos:start="33:36" pos:end="33:51"><expr pos:start="33:36" pos:end="33:51"><call pos:start="33:36" pos:end="33:51"><name pos:start="33:36" pos:end="33:44">avio_rl32</name><argument_list pos:start="33:45" pos:end="33:51">(<argument pos:start="33:46" pos:end="33:50"><expr pos:start="33:46" pos:end="33:50"><name pos:start="33:46" pos:end="33:50"><name pos:start="33:46" pos:end="33:46">s</name><operator pos:start="33:47" pos:end="33:48">-&gt;</operator><name pos:start="33:49" pos:end="33:50">pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:16">channels</name>    <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:38"><name pos:start="35:23" pos:end="35:31">avio_rl32</name><argument_list pos:start="35:32" pos:end="35:38">(<argument pos:start="35:33" pos:end="35:37"><expr pos:start="35:33" pos:end="35:37"><name pos:start="35:33" pos:end="35:37"><name pos:start="35:33" pos:end="35:33">s</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:39"><expr pos:start="37:9" pos:end="37:38"><name pos:start="37:9" pos:end="37:11">tag</name>         <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:38"><name pos:start="37:23" pos:end="37:31">avio_rl32</name><argument_list pos:start="37:32" pos:end="37:38">(<argument pos:start="37:33" pos:end="37:37"><expr pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:37"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:45"><expr pos:start="39:9" pos:end="39:44"><name pos:start="39:9" pos:end="39:12">tags</name>        <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:44">ff_codec_ircam_le_tags</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="51:5">else if <condition pos:start="41:15" pos:end="41:23">(<expr pos:start="41:16" pos:end="41:22"><name pos:start="41:16" pos:end="41:17">le</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>)</condition> <block pos:start="41:25" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:45">

        <expr_stmt pos:start="43:9" pos:end="43:53"><expr pos:start="43:9" pos:end="43:52"><name pos:start="43:9" pos:end="43:19">sample_rate</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:52"><name pos:start="43:23" pos:end="43:34">av_int2float</name><argument_list pos:start="43:35" pos:end="43:52">(<argument pos:start="43:36" pos:end="43:51"><expr pos:start="43:36" pos:end="43:51"><call pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:44">avio_rb32</name><argument_list pos:start="43:45" pos:end="43:51">(<argument pos:start="43:46" pos:end="43:50"><expr pos:start="43:46" pos:end="43:50"><name pos:start="43:46" pos:end="43:50"><name pos:start="43:46" pos:end="43:46">s</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:50">pb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:16">channels</name>    <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:38"><name pos:start="45:23" pos:end="45:31">avio_rb32</name><argument_list pos:start="45:32" pos:end="45:38">(<argument pos:start="45:33" pos:end="45:37"><expr pos:start="45:33" pos:end="45:37"><name pos:start="45:33" pos:end="45:37"><name pos:start="45:33" pos:end="45:33">s</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:11">tag</name>         <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:38"><name pos:start="47:23" pos:end="47:31">avio_rb32</name><argument_list pos:start="47:32" pos:end="47:38">(<argument pos:start="47:33" pos:end="47:37"><expr pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:37"><name pos:start="47:33" pos:end="47:33">s</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:12">tags</name>        <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:44">ff_codec_ircam_be_tags</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:35">

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="61:35"><if pos:start="59:5" pos:end="61:35">if <condition pos:start="59:8" pos:end="59:34">(<expr pos:start="59:9" pos:end="59:33"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:17">channels</name> <operator pos:start="59:19" pos:end="59:20">||</operator> <operator pos:start="59:22" pos:end="59:22">!</operator><name pos:start="59:23" pos:end="59:33">sample_rate</name></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:35"><block_content pos:start="61:9" pos:end="61:35">

        <return pos:start="61:9" pos:end="61:35">return <expr pos:start="61:16" pos:end="61:34"><name pos:start="61:16" pos:end="61:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:38"><expr pos:start="65:5" pos:end="65:37"><name pos:start="65:5" pos:end="65:6">st</name> <operator pos:start="65:8" pos:end="65:8">=</operator> <call pos:start="65:10" pos:end="65:37"><name pos:start="65:10" pos:end="65:28">avformat_new_stream</name><argument_list pos:start="65:29" pos:end="65:37">(<argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><name pos:start="65:30" pos:end="65:30">s</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="69:31"><if pos:start="67:5" pos:end="69:31">if <condition pos:start="67:8" pos:end="67:12">(<expr pos:start="67:9" pos:end="67:11"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:11">st</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:31"><block_content pos:start="69:9" pos:end="69:31">

        <return pos:start="69:9" pos:end="69:31">return <expr pos:start="69:16" pos:end="69:30"><call pos:start="69:16" pos:end="69:30"><name pos:start="69:16" pos:end="69:22">AVERROR</name><argument_list pos:start="69:23" pos:end="69:30">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:51"><expr pos:start="73:5" pos:end="73:50"><name pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:6">st</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:16">codecpar</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:28">codec_type</name></name>  <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:50">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:6">st</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:16">codecpar</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:26">channels</name></name>    <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:40">channels</name></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:6">st</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:16">codecpar</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:29">sample_rate</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <name pos:start="79:33" pos:end="79:43">sample_rate</name></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:56"><expr pos:start="83:5" pos:end="83:55"><name pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:6">st</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:16">codecpar</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:26">codec_id</name></name> <operator pos:start="83:28" pos:end="83:28">=</operator> <call pos:start="83:30" pos:end="83:55"><name pos:start="83:30" pos:end="83:44">ff_codec_get_id</name><argument_list pos:start="83:45" pos:end="83:55">(<argument pos:start="83:46" pos:end="83:49"><expr pos:start="83:46" pos:end="83:49"><name pos:start="83:46" pos:end="83:49">tags</name></expr></argument>, <argument pos:start="83:52" pos:end="83:54"><expr pos:start="83:52" pos:end="83:54"><name pos:start="83:52" pos:end="83:54">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:51">(<expr pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:10">st</name><operator pos:start="85:11" pos:end="85:12">-&gt;</operator><name pos:start="85:13" pos:end="85:20">codecpar</name><operator pos:start="85:21" pos:end="85:22">-&gt;</operator><name pos:start="85:23" pos:end="85:30">codec_id</name></name> <operator pos:start="85:32" pos:end="85:33">==</operator> <name pos:start="85:35" pos:end="85:50">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="85:53" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:35">

        <expr_stmt pos:start="87:9" pos:end="87:57"><expr pos:start="87:9" pos:end="87:56"><call pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:56">(<argument pos:start="87:16" pos:end="87:16"><expr pos:start="87:16" pos:end="87:16"><name pos:start="87:16" pos:end="87:16">s</name></expr></argument>, <argument pos:start="87:19" pos:end="87:30"><expr pos:start="87:19" pos:end="87:30"><name pos:start="87:19" pos:end="87:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:33" pos:end="87:50"><expr pos:start="87:33" pos:end="87:50"><literal type="string" pos:start="87:33" pos:end="87:50">"unknown tag %X\n"</literal></expr></argument>, <argument pos:start="87:53" pos:end="87:55"><expr pos:start="87:53" pos:end="87:55"><name pos:start="87:53" pos:end="87:55">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:89"><expr pos:start="95:5" pos:end="95:88"><name pos:start="95:5" pos:end="95:39"><name pos:start="95:5" pos:end="95:6">st</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:16">codecpar</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:39">bits_per_coded_sample</name></name> <operator pos:start="95:41" pos:end="95:41">=</operator> <call pos:start="95:43" pos:end="95:88"><name pos:start="95:43" pos:end="95:64">av_get_bits_per_sample</name><argument_list pos:start="95:65" pos:end="95:88">(<argument pos:start="95:66" pos:end="95:87"><expr pos:start="95:66" pos:end="95:87"><name pos:start="95:66" pos:end="95:87"><name pos:start="95:66" pos:end="95:67">st</name><operator pos:start="95:68" pos:end="95:69">-&gt;</operator><name pos:start="95:70" pos:end="95:77">codecpar</name><operator pos:start="95:78" pos:end="95:79">-&gt;</operator><name pos:start="95:80" pos:end="95:87">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:97"><expr pos:start="97:5" pos:end="97:96"><name pos:start="97:5" pos:end="97:29"><name pos:start="97:5" pos:end="97:6">st</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:16">codecpar</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:29">block_align</name></name> <operator pos:start="97:31" pos:end="97:31">=</operator> <name pos:start="97:33" pos:end="97:67"><name pos:start="97:33" pos:end="97:34">st</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:44">codecpar</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:67">bits_per_coded_sample</name></name> <operator pos:start="97:69" pos:end="97:69">*</operator> <name pos:start="97:71" pos:end="97:92"><name pos:start="97:71" pos:end="97:72">st</name><operator pos:start="97:73" pos:end="97:74">-&gt;</operator><name pos:start="97:75" pos:end="97:82">codecpar</name><operator pos:start="97:83" pos:end="97:84">-&gt;</operator><name pos:start="97:85" pos:end="97:92">channels</name></name> <operator pos:start="97:94" pos:end="97:94">/</operator> <literal type="number" pos:start="97:96" pos:end="97:96">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:62"><expr pos:start="99:5" pos:end="99:61"><call pos:start="99:5" pos:end="99:61"><name pos:start="99:5" pos:end="99:23">avpriv_set_pts_info</name><argument_list pos:start="99:24" pos:end="99:61">(<argument pos:start="99:25" pos:end="99:26"><expr pos:start="99:25" pos:end="99:26"><name pos:start="99:25" pos:end="99:26">st</name></expr></argument>, <argument pos:start="99:29" pos:end="99:30"><expr pos:start="99:29" pos:end="99:30"><literal type="number" pos:start="99:29" pos:end="99:30">64</literal></expr></argument>, <argument pos:start="99:33" pos:end="99:33"><expr pos:start="99:33" pos:end="99:33"><literal type="number" pos:start="99:33" pos:end="99:33">1</literal></expr></argument>, <argument pos:start="99:36" pos:end="99:60"><expr pos:start="99:36" pos:end="99:60"><name pos:start="99:36" pos:end="99:60"><name pos:start="99:36" pos:end="99:37">st</name><operator pos:start="99:38" pos:end="99:39">-&gt;</operator><name pos:start="99:40" pos:end="99:47">codecpar</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:60">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><call pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:13">avio_skip</name><argument_list pos:start="101:14" pos:end="101:26">(<argument pos:start="101:15" pos:end="101:19"><expr pos:start="101:15" pos:end="101:19"><name pos:start="101:15" pos:end="101:19"><name pos:start="101:15" pos:end="101:15">s</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:19">pb</name></name></expr></argument>, <argument pos:start="101:22" pos:end="101:25"><expr pos:start="101:22" pos:end="101:25"><literal type="number" pos:start="101:22" pos:end="101:25">1008</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
