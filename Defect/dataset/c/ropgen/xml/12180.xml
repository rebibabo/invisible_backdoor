<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12180.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:47">bdrv_co_do_write_zeroes</name><parameter_list pos:start="1:48" pos:end="3:63">(<parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:22"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:22">sector_num</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:38">nb_sectors</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:62"><decl pos:start="3:41" pos:end="3:62"><type pos:start="3:41" pos:end="3:62"><name pos:start="3:41" pos:end="3:56">BdrvRequestFlags</name></type> <name pos:start="3:58" pos:end="3:62">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">QEMUIOVector</name></type> <name pos:start="9:18" pos:end="9:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:16">iovec</name></name></type> <name pos:start="11:18" pos:end="11:20">iov</name> <init pos:start="11:22" pos:end="11:26">= <expr pos:start="11:24" pos:end="11:26"><block pos:start="11:24" pos:end="11:26">{<expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="19:78"><decl pos:start="17:5" pos:end="19:77"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:24">max_write_zeroes</name> <init pos:start="17:26" pos:end="19:77">= <expr pos:start="17:28" pos:end="19:77"><ternary pos:start="17:28" pos:end="19:77"><condition pos:start="17:28" pos:end="17:52"><expr pos:start="17:28" pos:end="17:50"><name pos:start="17:28" pos:end="17:50"><name pos:start="17:28" pos:end="17:29">bs</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:33">bl</name><operator pos:start="17:34" pos:end="17:34">.</operator><name pos:start="17:35" pos:end="17:50">max_write_zeroes</name></name></expr> ?</condition><then pos:start="19:28" pos:end="19:50">

                           <expr pos:start="19:28" pos:end="19:50"><name pos:start="19:28" pos:end="19:50"><name pos:start="19:28" pos:end="19:29">bs</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:33">bl</name><operator pos:start="19:34" pos:end="19:34">.</operator><name pos:start="19:35" pos:end="19:50">max_write_zeroes</name></name></expr> </then><else pos:start="19:52" pos:end="19:77">: <expr pos:start="19:54" pos:end="19:77"><name pos:start="19:54" pos:end="19:77">MAX_WRITE_ZEROES_DEFAULT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <while pos:start="23:5" pos:end="129:5">while <condition pos:start="23:11" pos:end="23:34">(<expr pos:start="23:12" pos:end="23:33"><name pos:start="23:12" pos:end="23:21">nb_sectors</name> <operator pos:start="23:23" pos:end="23:23">&gt;</operator> <literal type="number" pos:start="23:25" pos:end="23:25">0</literal> <operator pos:start="23:27" pos:end="23:28">&amp;&amp;</operator> <operator pos:start="23:30" pos:end="23:30">!</operator><name pos:start="23:31" pos:end="23:33">ret</name></expr>)</condition> <block pos:start="23:36" pos:end="129:5">{<block_content pos:start="25:9" pos:end="127:26">

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:28"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:15">num</name> <init pos:start="25:17" pos:end="25:28">= <expr pos:start="25:19" pos:end="25:28"><name pos:start="25:19" pos:end="25:28">nb_sectors</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="29:9" pos:end="33:11">/* Align request.  Block drivers can expect the "bulk" of the request

         * to be aligned.

         */</comment>

        <if_stmt pos:start="35:9" pos:end="59:9"><if pos:start="35:9" pos:end="59:9">if <condition pos:start="35:12" pos:end="37:51">(<expr pos:start="35:13" pos:end="37:50"><name pos:start="35:13" pos:end="35:41"><name pos:start="35:13" pos:end="35:14">bs</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:18">bl</name><operator pos:start="35:19" pos:end="35:19">.</operator><name pos:start="35:20" pos:end="35:41">write_zeroes_alignment</name></name>

            <operator pos:start="37:13" pos:end="37:14">&amp;&amp;</operator> <name pos:start="37:16" pos:end="37:18">num</name> <operator pos:start="37:20" pos:end="37:20">&gt;</operator> <name pos:start="37:22" pos:end="37:50"><name pos:start="37:22" pos:end="37:23">bs</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:27">bl</name><operator pos:start="37:28" pos:end="37:28">.</operator><name pos:start="37:29" pos:end="37:50">write_zeroes_alignment</name></name></expr>)</condition> <block pos:start="37:53" pos:end="59:9">{<block_content pos:start="39:13" pos:end="57:13">

            <if_stmt pos:start="39:13" pos:end="57:13"><if pos:start="39:13" pos:end="47:13">if <condition pos:start="39:16" pos:end="39:64">(<expr pos:start="39:17" pos:end="39:63"><name pos:start="39:17" pos:end="39:26">sector_num</name> <operator pos:start="39:28" pos:end="39:28">%</operator> <name pos:start="39:30" pos:end="39:58"><name pos:start="39:30" pos:end="39:31">bs</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:35">bl</name><operator pos:start="39:36" pos:end="39:36">.</operator><name pos:start="39:37" pos:end="39:58">write_zeroes_alignment</name></name> <operator pos:start="39:60" pos:end="39:61">!=</operator> <literal type="number" pos:start="39:63" pos:end="39:63">0</literal></expr>)</condition> <block pos:start="39:66" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:66">

                <comment type="block" pos:start="41:17" pos:end="41:75">/* Make a small request up to the first aligned sector.  */</comment>

                <expr_stmt pos:start="43:17" pos:end="43:52"><expr pos:start="43:17" pos:end="43:51"><name pos:start="43:17" pos:end="43:19">num</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <name pos:start="43:23" pos:end="43:51"><name pos:start="43:23" pos:end="43:24">bs</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">bl</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:51">write_zeroes_alignment</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:66"><expr pos:start="45:17" pos:end="45:65"><name pos:start="45:17" pos:end="45:19">num</name> <operator pos:start="45:21" pos:end="45:22">-=</operator> <name pos:start="45:24" pos:end="45:33">sector_num</name> <operator pos:start="45:35" pos:end="45:35">%</operator> <name pos:start="45:37" pos:end="45:65"><name pos:start="45:37" pos:end="45:38">bs</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:42">bl</name><operator pos:start="45:43" pos:end="45:43">.</operator><name pos:start="45:44" pos:end="45:65">write_zeroes_alignment</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="47:15" pos:end="57:13">else if <condition pos:start="47:23" pos:end="47:79">(<expr pos:start="47:24" pos:end="47:78"><operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:34">sector_num</name> <operator pos:start="47:36" pos:end="47:36">+</operator> <name pos:start="47:38" pos:end="47:40">num</name><operator pos:start="47:41" pos:end="47:41">)</operator> <operator pos:start="47:43" pos:end="47:43">%</operator> <name pos:start="47:45" pos:end="47:73"><name pos:start="47:45" pos:end="47:46">bs</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:50">bl</name><operator pos:start="47:51" pos:end="47:51">.</operator><name pos:start="47:52" pos:end="47:73">write_zeroes_alignment</name></name> <operator pos:start="47:75" pos:end="47:76">!=</operator> <literal type="number" pos:start="47:78" pos:end="47:78">0</literal></expr>)</condition> <block pos:start="47:81" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:74">

                <comment type="block" pos:start="49:17" pos:end="53:19">/* Shorten the request to the last aligned sector.  num cannot

                 * underflow because num &gt; bs-&gt;bl.write_zeroes_alignment.

                 */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:74"><expr pos:start="55:17" pos:end="55:73"><name pos:start="55:17" pos:end="55:19">num</name> <operator pos:start="55:21" pos:end="55:22">-=</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:34">sector_num</name> <operator pos:start="55:36" pos:end="55:36">+</operator> <name pos:start="55:38" pos:end="55:40">num</name><operator pos:start="55:41" pos:end="55:41">)</operator> <operator pos:start="55:43" pos:end="55:43">%</operator> <name pos:start="55:45" pos:end="55:73"><name pos:start="55:45" pos:end="55:46">bs</name><operator pos:start="55:47" pos:end="55:48">-&gt;</operator><name pos:start="55:49" pos:end="55:50">bl</name><operator pos:start="55:51" pos:end="55:51">.</operator><name pos:start="55:52" pos:end="55:73">write_zeroes_alignment</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="63:9" pos:end="63:32">/* limit request size */</comment>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:35">(<expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:15">num</name> <operator pos:start="65:17" pos:end="65:17">&gt;</operator> <name pos:start="65:19" pos:end="65:34">max_write_zeroes</name></expr>)</condition> <block pos:start="65:37" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:35">

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:15">num</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:34">max_write_zeroes</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:22">ENOTSUP</name></expr>;</expr_stmt>

        <comment type="block" pos:start="75:9" pos:end="75:60">/* First try the efficient write zeroes operation */</comment>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:38">(<expr pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:37"><name pos:start="77:13" pos:end="77:15">drv</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:37">bdrv_co_write_zeroes</name></name></expr>)</condition> <block pos:start="77:40" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:72">

            <expr_stmt pos:start="79:13" pos:end="79:72"><expr pos:start="79:13" pos:end="79:71"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:71"><name pos:start="79:19" pos:end="79:43"><name pos:start="79:19" pos:end="79:21">drv</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:43">bdrv_co_write_zeroes</name></name><argument_list pos:start="79:44" pos:end="79:71">(<argument pos:start="79:45" pos:end="79:46"><expr pos:start="79:45" pos:end="79:46"><name pos:start="79:45" pos:end="79:46">bs</name></expr></argument>, <argument pos:start="79:49" pos:end="79:58"><expr pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:58">sector_num</name></expr></argument>, <argument pos:start="79:61" pos:end="79:63"><expr pos:start="79:61" pos:end="79:63"><name pos:start="79:61" pos:end="79:63">num</name></expr></argument>, <argument pos:start="79:66" pos:end="79:70"><expr pos:start="79:66" pos:end="79:70"><name pos:start="79:66" pos:end="79:70">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="85:9" pos:end="121:9"><if pos:start="85:9" pos:end="121:9">if <condition pos:start="85:12" pos:end="85:28">(<expr pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:18">==</operator> <operator pos:start="85:20" pos:end="85:20">-</operator><name pos:start="85:21" pos:end="85:27">ENOTSUP</name></expr>)</condition> <block pos:start="85:30" pos:end="121:9">{<block_content pos:start="89:13" pos:end="119:13">

            <comment type="block" pos:start="87:13" pos:end="87:75">/* Fall back to bounce buffer if write zeroes is unsupported */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:15">iov</name><operator pos:start="89:16" pos:end="89:16">.</operator><name pos:start="89:17" pos:end="89:23">iov_len</name></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <name pos:start="89:27" pos:end="89:29">num</name> <operator pos:start="89:31" pos:end="89:31">*</operator> <name pos:start="89:33" pos:end="89:48">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:37">(<expr pos:start="91:17" pos:end="91:36"><name pos:start="91:17" pos:end="91:28"><name pos:start="91:17" pos:end="91:19">iov</name><operator pos:start="91:20" pos:end="91:20">.</operator><name pos:start="91:21" pos:end="91:28">iov_base</name></name> <operator pos:start="91:30" pos:end="91:31">==</operator> <name pos:start="91:33" pos:end="91:36">NULL</name></expr>)</condition> <block pos:start="91:39" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:64">

                <expr_stmt pos:start="93:17" pos:end="93:75"><expr pos:start="93:17" pos:end="93:74"><name pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:19">iov</name><operator pos:start="93:20" pos:end="93:20">.</operator><name pos:start="93:21" pos:end="93:28">iov_base</name></name> <operator pos:start="93:30" pos:end="93:30">=</operator> <call pos:start="93:32" pos:end="93:74"><name pos:start="93:32" pos:end="93:46">qemu_blockalign</name><argument_list pos:start="93:47" pos:end="93:74">(<argument pos:start="93:48" pos:end="93:49"><expr pos:start="93:48" pos:end="93:49"><name pos:start="93:48" pos:end="93:49">bs</name></expr></argument>, <argument pos:start="93:52" pos:end="93:73"><expr pos:start="93:52" pos:end="93:73"><name pos:start="93:52" pos:end="93:54">num</name> <operator pos:start="93:56" pos:end="93:56">*</operator> <name pos:start="93:58" pos:end="93:73">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:64"><expr pos:start="95:17" pos:end="95:63"><call pos:start="95:17" pos:end="95:63"><name pos:start="95:17" pos:end="95:22">memset</name><argument_list pos:start="95:23" pos:end="95:63">(<argument pos:start="95:24" pos:end="95:35"><expr pos:start="95:24" pos:end="95:35"><name pos:start="95:24" pos:end="95:35"><name pos:start="95:24" pos:end="95:26">iov</name><operator pos:start="95:27" pos:end="95:27">.</operator><name pos:start="95:28" pos:end="95:35">iov_base</name></name></expr></argument>, <argument pos:start="95:38" pos:end="95:38"><expr pos:start="95:38" pos:end="95:38"><literal type="number" pos:start="95:38" pos:end="95:38">0</literal></expr></argument>, <argument pos:start="95:41" pos:end="95:62"><expr pos:start="95:41" pos:end="95:62"><name pos:start="95:41" pos:end="95:43">num</name> <operator pos:start="95:45" pos:end="95:45">*</operator> <name pos:start="95:47" pos:end="95:62">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:53"><expr pos:start="99:13" pos:end="99:52"><call pos:start="99:13" pos:end="99:52"><name pos:start="99:13" pos:end="99:36">qemu_iovec_init_external</name><argument_list pos:start="99:37" pos:end="99:52">(<argument pos:start="99:38" pos:end="99:42"><expr pos:start="99:38" pos:end="99:42"><operator pos:start="99:38" pos:end="99:38">&amp;</operator><name pos:start="99:39" pos:end="99:42">qiov</name></expr></argument>, <argument pos:start="99:45" pos:end="99:48"><expr pos:start="99:45" pos:end="99:48"><operator pos:start="99:45" pos:end="99:45">&amp;</operator><name pos:start="99:46" pos:end="99:48">iov</name></expr></argument>, <argument pos:start="99:51" pos:end="99:51"><expr pos:start="99:51" pos:end="99:51"><literal type="number" pos:start="99:51" pos:end="99:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="103:13" pos:end="103:66"><expr pos:start="103:13" pos:end="103:65"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:65"><name pos:start="103:19" pos:end="103:37"><name pos:start="103:19" pos:end="103:21">drv</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:37">bdrv_co_writev</name></name><argument_list pos:start="103:38" pos:end="103:65">(<argument pos:start="103:39" pos:end="103:40"><expr pos:start="103:39" pos:end="103:40"><name pos:start="103:39" pos:end="103:40">bs</name></expr></argument>, <argument pos:start="103:43" pos:end="103:52"><expr pos:start="103:43" pos:end="103:52"><name pos:start="103:43" pos:end="103:52">sector_num</name></expr></argument>, <argument pos:start="103:55" pos:end="103:57"><expr pos:start="103:55" pos:end="103:57"><name pos:start="103:55" pos:end="103:57">num</name></expr></argument>, <argument pos:start="103:60" pos:end="103:64"><expr pos:start="103:60" pos:end="103:64"><operator pos:start="103:60" pos:end="103:60">&amp;</operator><name pos:start="103:61" pos:end="103:64">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="107:13" pos:end="111:15">/* Keep bounce buffer around if it is big enough for all

             * all future requests.

             */</comment>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:39">(<expr pos:start="113:17" pos:end="113:38"><name pos:start="113:17" pos:end="113:19">num</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <name pos:start="113:23" pos:end="113:38">max_write_zeroes</name></expr>)</condition> <block pos:start="113:41" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:36">

                <expr_stmt pos:start="115:17" pos:end="115:41"><expr pos:start="115:17" pos:end="115:40"><call pos:start="115:17" pos:end="115:40"><name pos:start="115:17" pos:end="115:26">qemu_vfree</name><argument_list pos:start="115:27" pos:end="115:40">(<argument pos:start="115:28" pos:end="115:39"><expr pos:start="115:28" pos:end="115:39"><name pos:start="115:28" pos:end="115:39"><name pos:start="115:28" pos:end="115:30">iov</name><operator pos:start="115:31" pos:end="115:31">.</operator><name pos:start="115:32" pos:end="115:39">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:36"><expr pos:start="117:17" pos:end="117:35"><name pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:19">iov</name><operator pos:start="117:20" pos:end="117:20">.</operator><name pos:start="117:21" pos:end="117:28">iov_base</name></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <name pos:start="117:32" pos:end="117:35">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:26"><expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:18">sector_num</name> <operator pos:start="125:20" pos:end="125:21">+=</operator> <name pos:start="125:23" pos:end="125:25">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:18">nb_sectors</name> <operator pos:start="127:20" pos:end="127:21">-=</operator> <name pos:start="127:23" pos:end="127:25">num</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="133:5" pos:end="133:29"><expr pos:start="133:5" pos:end="133:28"><call pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:14">qemu_vfree</name><argument_list pos:start="133:15" pos:end="133:28">(<argument pos:start="133:16" pos:end="133:27"><expr pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:18">iov</name><operator pos:start="133:19" pos:end="133:19">.</operator><name pos:start="133:20" pos:end="133:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:15">return <expr pos:start="135:12" pos:end="135:14"><name pos:start="135:12" pos:end="135:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
