<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6204.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">tcg_out_movi_int</name><parameter_list pos:start="1:29" pos:end="3:67">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:39">TCGContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:51">TCGType</name></type> <name pos:start="1:53" pos:end="1:56">type</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:68"><decl pos:start="1:59" pos:end="1:68"><type pos:start="1:59" pos:end="1:68"><name pos:start="1:59" pos:end="1:64">TCGReg</name></type> <name pos:start="1:66" pos:end="1:68">ret</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:48"><decl pos:start="3:30" pos:end="3:48"><type pos:start="3:30" pos:end="3:48"><name pos:start="3:30" pos:end="3:44">tcg_target_long</name></type> <name pos:start="3:46" pos:end="3:48">arg</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:66"><decl pos:start="3:51" pos:end="3:66"><type pos:start="3:51" pos:end="3:66"><name pos:start="3:51" pos:end="3:54">bool</name></type> <name pos:start="3:56" pos:end="3:66">in_prologue</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:5">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">intptr_t</name></type> <name pos:start="7:14" pos:end="7:20">tb_diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">tcg_target_long</name></type> <name pos:start="9:21" pos:end="9:23">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">shift</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:72"><expr pos:start="15:5" pos:end="15:71"><call pos:start="15:5" pos:end="15:71"><name pos:start="15:5" pos:end="15:20">tcg_debug_assert</name><argument_list pos:start="15:21" pos:end="15:71">(<argument pos:start="15:22" pos:end="15:70"><expr pos:start="15:22" pos:end="15:70"><name pos:start="15:22" pos:end="15:40">TCG_TARGET_REG_BITS</name> <operator pos:start="15:42" pos:end="15:43">==</operator> <literal type="number" pos:start="15:45" pos:end="15:46">64</literal> <operator pos:start="15:48" pos:end="15:49">||</operator> <name pos:start="15:51" pos:end="15:54">type</name> <operator pos:start="15:56" pos:end="15:57">==</operator> <name pos:start="15:59" pos:end="15:70">TCG_TYPE_I32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:58">(<expr pos:start="19:9" pos:end="19:57"><name pos:start="19:9" pos:end="19:27">TCG_TARGET_REG_BITS</name> <operator pos:start="19:29" pos:end="19:30">==</operator> <literal type="number" pos:start="19:32" pos:end="19:33">64</literal> <operator pos:start="19:35" pos:end="19:36">&amp;&amp;</operator> <name pos:start="19:38" pos:end="19:41">type</name> <operator pos:start="19:43" pos:end="19:44">==</operator> <name pos:start="19:46" pos:end="19:57">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="19:60" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:27">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:11">arg</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:22">int32_t</name><operator pos:start="21:23" pos:end="21:23">)</operator><name pos:start="21:24" pos:end="21:26">arg</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:48">/* Load 16-bit immediates with one insn.  */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:38">(<expr pos:start="29:9" pos:end="29:37"><call pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:24">tcg_out_movi_one</name><argument_list pos:start="29:25" pos:end="29:37">(<argument pos:start="29:26" pos:end="29:26"><expr pos:start="29:26" pos:end="29:26"><name pos:start="29:26" pos:end="29:26">s</name></expr></argument>, <argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">ret</name></expr></argument>, <argument pos:start="29:34" pos:end="29:36"><expr pos:start="29:34" pos:end="29:36"><name pos:start="29:34" pos:end="29:36">arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:40" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:54">/* Load addresses within the TB with one insn.  */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:11">tb_diff</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:17">arg</name> <operator pos:start="39:19" pos:end="39:19">-</operator> <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:29">intptr_t</name><operator pos:start="39:30" pos:end="39:30">)</operator><name pos:start="39:31" pos:end="39:45"><name pos:start="39:31" pos:end="39:31">s</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:45">code_gen_ptr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:66">(<expr pos:start="41:9" pos:end="41:65"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:20">in_prologue</name> <operator pos:start="41:22" pos:end="41:23">&amp;&amp;</operator> <name pos:start="41:25" pos:end="41:34">USE_REG_TB</name> <operator pos:start="41:36" pos:end="41:37">&amp;&amp;</operator> <name pos:start="41:39" pos:end="41:45">tb_diff</name> <operator pos:start="41:47" pos:end="41:48">==</operator> <operator pos:start="41:50" pos:end="41:50">(</operator><name pos:start="41:51" pos:end="41:57">int16_t</name><operator pos:start="41:58" pos:end="41:58">)</operator><name pos:start="41:59" pos:end="41:65">tb_diff</name></expr>)</condition> <block pos:start="41:68" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <expr_stmt pos:start="43:9" pos:end="43:59"><expr pos:start="43:9" pos:end="43:58"><call pos:start="43:9" pos:end="43:58"><name pos:start="43:9" pos:end="43:17">tcg_out32</name><argument_list pos:start="43:18" pos:end="43:58">(<argument pos:start="43:19" pos:end="43:19"><expr pos:start="43:19" pos:end="43:19"><name pos:start="43:19" pos:end="43:19">s</name></expr></argument>, <argument pos:start="43:22" pos:end="43:57"><expr pos:start="43:22" pos:end="43:57"><name pos:start="43:22" pos:end="43:25">ADDI</name> <operator pos:start="43:27" pos:end="43:27">|</operator> <call pos:start="43:29" pos:end="43:57"><name pos:start="43:29" pos:end="43:31">TAI</name><argument_list pos:start="43:32" pos:end="43:57">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">ret</name></expr></argument>, <argument pos:start="43:38" pos:end="43:47"><expr pos:start="43:38" pos:end="43:47"><name pos:start="43:38" pos:end="43:47">TCG_REG_TB</name></expr></argument>, <argument pos:start="43:50" pos:end="43:56"><expr pos:start="43:50" pos:end="43:56"><name pos:start="43:50" pos:end="43:56">tb_diff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="53:69">/* Load 32-bit immediates with two insns.  Note that we've already

       eliminated bare ADDIS, so we know both insns are required.  */</comment>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:57">(<expr pos:start="55:9" pos:end="55:56"><name pos:start="55:9" pos:end="55:27">TCG_TARGET_REG_BITS</name> <operator pos:start="55:29" pos:end="55:30">==</operator> <literal type="number" pos:start="55:32" pos:end="55:33">32</literal> <operator pos:start="55:35" pos:end="55:36">||</operator> <name pos:start="55:38" pos:end="55:40">arg</name> <operator pos:start="55:42" pos:end="55:43">==</operator> <operator pos:start="55:45" pos:end="55:45">(</operator><name pos:start="55:46" pos:end="55:52">int32_t</name><operator pos:start="55:53" pos:end="55:53">)</operator><name pos:start="55:54" pos:end="55:56">arg</name></expr>)</condition> <block pos:start="55:59" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:15">

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><call pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:17">tcg_out32</name><argument_list pos:start="57:18" pos:end="57:52">(<argument pos:start="57:19" pos:end="57:19"><expr pos:start="57:19" pos:end="57:19"><name pos:start="57:19" pos:end="57:19">s</name></expr></argument>, <argument pos:start="57:22" pos:end="57:51"><expr pos:start="57:22" pos:end="57:51"><name pos:start="57:22" pos:end="57:26">ADDIS</name> <operator pos:start="57:28" pos:end="57:28">|</operator> <call pos:start="57:30" pos:end="57:51"><name pos:start="57:30" pos:end="57:32">TAI</name><argument_list pos:start="57:33" pos:end="57:51">(<argument pos:start="57:34" pos:end="57:36"><expr pos:start="57:34" pos:end="57:36"><name pos:start="57:34" pos:end="57:36">ret</name></expr></argument>, <argument pos:start="57:39" pos:end="57:39"><expr pos:start="57:39" pos:end="57:39"><literal type="number" pos:start="57:39" pos:end="57:39">0</literal></expr></argument>, <argument pos:start="57:42" pos:end="57:50"><expr pos:start="57:42" pos:end="57:50"><name pos:start="57:42" pos:end="57:44">arg</name> <operator pos:start="57:46" pos:end="57:47">&gt;&gt;</operator> <literal type="number" pos:start="57:49" pos:end="57:50">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:47"><expr pos:start="59:9" pos:end="59:46"><call pos:start="59:9" pos:end="59:46"><name pos:start="59:9" pos:end="59:17">tcg_out32</name><argument_list pos:start="59:18" pos:end="59:46">(<argument pos:start="59:19" pos:end="59:19"><expr pos:start="59:19" pos:end="59:19"><name pos:start="59:19" pos:end="59:19">s</name></expr></argument>, <argument pos:start="59:22" pos:end="59:45"><expr pos:start="59:22" pos:end="59:45"><name pos:start="59:22" pos:end="59:24">ORI</name> <operator pos:start="59:26" pos:end="59:26">|</operator> <call pos:start="59:28" pos:end="59:45"><name pos:start="59:28" pos:end="59:30">SAI</name><argument_list pos:start="59:31" pos:end="59:45">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">ret</name></expr></argument>, <argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:39">ret</name></expr></argument>, <argument pos:start="59:42" pos:end="59:44"><expr pos:start="59:42" pos:end="59:44"><name pos:start="59:42" pos:end="59:44">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:48">(<expr pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:11">arg</name> <operator pos:start="65:13" pos:end="65:14">==</operator> <operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:24">uint32_t</name><operator pos:start="65:25" pos:end="65:25">)</operator><name pos:start="65:26" pos:end="65:28">arg</name> <operator pos:start="65:30" pos:end="65:31">&amp;&amp;</operator> <operator pos:start="65:33" pos:end="65:33">!</operator><operator pos:start="65:34" pos:end="65:34">(</operator><name pos:start="65:35" pos:end="65:37">arg</name> <operator pos:start="65:39" pos:end="65:39">&amp;</operator> <literal type="number" pos:start="65:41" pos:end="65:46">0x8000</literal><operator pos:start="65:47" pos:end="65:47">)</operator></expr>)</condition> <block pos:start="65:50" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:15">

        <expr_stmt pos:start="67:9" pos:end="67:46"><expr pos:start="67:9" pos:end="67:45"><call pos:start="67:9" pos:end="67:45"><name pos:start="67:9" pos:end="67:17">tcg_out32</name><argument_list pos:start="67:18" pos:end="67:45">(<argument pos:start="67:19" pos:end="67:19"><expr pos:start="67:19" pos:end="67:19"><name pos:start="67:19" pos:end="67:19">s</name></expr></argument>, <argument pos:start="67:22" pos:end="67:44"><expr pos:start="67:22" pos:end="67:44"><name pos:start="67:22" pos:end="67:25">ADDI</name> <operator pos:start="67:27" pos:end="67:27">|</operator> <call pos:start="67:29" pos:end="67:44"><name pos:start="67:29" pos:end="67:31">TAI</name><argument_list pos:start="67:32" pos:end="67:44">(<argument pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">ret</name></expr></argument>, <argument pos:start="67:38" pos:end="67:38"><expr pos:start="67:38" pos:end="67:38"><literal type="number" pos:start="67:38" pos:end="67:38">0</literal></expr></argument>, <argument pos:start="67:41" pos:end="67:43"><expr pos:start="67:41" pos:end="67:43"><name pos:start="67:41" pos:end="67:43">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:54"><expr pos:start="69:9" pos:end="69:53"><call pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:17">tcg_out32</name><argument_list pos:start="69:18" pos:end="69:53">(<argument pos:start="69:19" pos:end="69:19"><expr pos:start="69:19" pos:end="69:19"><name pos:start="69:19" pos:end="69:19">s</name></expr></argument>, <argument pos:start="69:22" pos:end="69:52"><expr pos:start="69:22" pos:end="69:52"><name pos:start="69:22" pos:end="69:25">ORIS</name> <operator pos:start="69:27" pos:end="69:27">|</operator> <call pos:start="69:29" pos:end="69:52"><name pos:start="69:29" pos:end="69:31">SAI</name><argument_list pos:start="69:32" pos:end="69:52">(<argument pos:start="69:33" pos:end="69:35"><expr pos:start="69:33" pos:end="69:35"><name pos:start="69:33" pos:end="69:35">ret</name></expr></argument>, <argument pos:start="69:38" pos:end="69:40"><expr pos:start="69:38" pos:end="69:40"><name pos:start="69:38" pos:end="69:40">ret</name></expr></argument>, <argument pos:start="69:43" pos:end="69:51"><expr pos:start="69:43" pos:end="69:51"><name pos:start="69:43" pos:end="69:45">arg</name> <operator pos:start="69:47" pos:end="69:48">&gt;&gt;</operator> <literal type="number" pos:start="69:50" pos:end="69:51">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:36">/* Load masked 16-bit value.  */</comment>

    <if_stmt pos:start="79:5" pos:end="95:5"><if pos:start="79:5" pos:end="95:5">if <condition pos:start="79:8" pos:end="79:34">(<expr pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:11">arg</name> <operator pos:start="79:13" pos:end="79:13">&gt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal> <operator pos:start="79:17" pos:end="79:18">&amp;&amp;</operator> <operator pos:start="79:20" pos:end="79:20">(</operator><name pos:start="79:21" pos:end="79:23">arg</name> <operator pos:start="79:25" pos:end="79:25">&amp;</operator> <literal type="number" pos:start="79:27" pos:end="79:32">0x8000</literal><operator pos:start="79:33" pos:end="79:33">)</operator></expr>)</condition> <block pos:start="79:36" pos:end="95:5">{<block_content pos:start="81:9" pos:end="93:9">

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:11">tmp</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:17">arg</name> <operator pos:start="81:19" pos:end="81:19">|</operator> <literal type="number" pos:start="81:21" pos:end="81:26">0x7fff</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="93:9"><if pos:start="83:9" pos:end="93:9">if <condition pos:start="83:12" pos:end="83:35">(<expr pos:start="83:13" pos:end="83:34"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">tmp</name> <operator pos:start="83:18" pos:end="83:18">&amp;</operator> <operator pos:start="83:20" pos:end="83:20">(</operator><name pos:start="83:21" pos:end="83:23">tmp</name> <operator pos:start="83:25" pos:end="83:25">+</operator> <literal type="number" pos:start="83:27" pos:end="83:27">1</literal><operator pos:start="83:28" pos:end="83:28">)</operator><operator pos:start="83:29" pos:end="83:29">)</operator> <operator pos:start="83:31" pos:end="83:32">==</operator> <literal type="number" pos:start="83:34" pos:end="83:34">0</literal></expr>)</condition> <block pos:start="83:37" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:19">

            <decl_stmt pos:start="85:13" pos:end="85:40"><decl pos:start="85:13" pos:end="85:39"><type pos:start="85:13" pos:end="85:15"><name pos:start="85:13" pos:end="85:15">int</name></type> <name pos:start="85:17" pos:end="85:18">mb</name> <init pos:start="85:20" pos:end="85:39">= <expr pos:start="85:22" pos:end="85:39"><call pos:start="85:22" pos:end="85:35"><name pos:start="85:22" pos:end="85:26">clz64</name><argument_list pos:start="85:27" pos:end="85:35">(<argument pos:start="85:28" pos:end="85:34"><expr pos:start="85:28" pos:end="85:34"><name pos:start="85:28" pos:end="85:30">tmp</name> <operator pos:start="85:32" pos:end="85:32">+</operator> <literal type="number" pos:start="85:34" pos:end="85:34">1</literal></expr></argument>)</argument_list></call> <operator pos:start="85:37" pos:end="85:37">+</operator> <literal type="number" pos:start="85:39" pos:end="85:39">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:50"><expr pos:start="87:13" pos:end="87:49"><call pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:21">tcg_out32</name><argument_list pos:start="87:22" pos:end="87:49">(<argument pos:start="87:23" pos:end="87:23"><expr pos:start="87:23" pos:end="87:23"><name pos:start="87:23" pos:end="87:23">s</name></expr></argument>, <argument pos:start="87:26" pos:end="87:48"><expr pos:start="87:26" pos:end="87:48"><name pos:start="87:26" pos:end="87:29">ADDI</name> <operator pos:start="87:31" pos:end="87:31">|</operator> <call pos:start="87:33" pos:end="87:48"><name pos:start="87:33" pos:end="87:35">TAI</name><argument_list pos:start="87:36" pos:end="87:48">(<argument pos:start="87:37" pos:end="87:39"><expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">ret</name></expr></argument>, <argument pos:start="87:42" pos:end="87:42"><expr pos:start="87:42" pos:end="87:42"><literal type="number" pos:start="87:42" pos:end="87:42">0</literal></expr></argument>, <argument pos:start="87:45" pos:end="87:47"><expr pos:start="87:45" pos:end="87:47"><name pos:start="87:45" pos:end="87:47">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:52"><expr pos:start="89:13" pos:end="89:51"><call pos:start="89:13" pos:end="89:51"><name pos:start="89:13" pos:end="89:23">tcg_out_rld</name><argument_list pos:start="89:24" pos:end="89:51">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">s</name></expr></argument>, <argument pos:start="89:28" pos:end="89:33"><expr pos:start="89:28" pos:end="89:33"><name pos:start="89:28" pos:end="89:33">RLDICL</name></expr></argument>, <argument pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:38">ret</name></expr></argument>, <argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">ret</name></expr></argument>, <argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><literal type="number" pos:start="89:46" pos:end="89:46">0</literal></expr></argument>, <argument pos:start="89:49" pos:end="89:50"><expr pos:start="89:49" pos:end="89:50"><name pos:start="89:49" pos:end="89:50">mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:42">/* Load common masks with 2 insns.  */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:23"><expr pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:9">shift</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <call pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:17">ctz64</name><argument_list pos:start="101:18" pos:end="101:22">(<argument pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:21">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:23"><expr pos:start="103:5" pos:end="103:22"><name pos:start="103:5" pos:end="103:7">tmp</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <name pos:start="103:11" pos:end="103:13">arg</name> <operator pos:start="103:15" pos:end="103:16">&gt;&gt;</operator> <name pos:start="103:18" pos:end="103:22">shift</name></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:28">(<expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:11">tmp</name> <operator pos:start="105:13" pos:end="105:14">==</operator> <operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:23">int16_t</name><operator pos:start="105:24" pos:end="105:24">)</operator><name pos:start="105:25" pos:end="105:27">tmp</name></expr>)</condition> <block pos:start="105:30" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:15">

        <expr_stmt pos:start="107:9" pos:end="107:46"><expr pos:start="107:9" pos:end="107:45"><call pos:start="107:9" pos:end="107:45"><name pos:start="107:9" pos:end="107:17">tcg_out32</name><argument_list pos:start="107:18" pos:end="107:45">(<argument pos:start="107:19" pos:end="107:19"><expr pos:start="107:19" pos:end="107:19"><name pos:start="107:19" pos:end="107:19">s</name></expr></argument>, <argument pos:start="107:22" pos:end="107:44"><expr pos:start="107:22" pos:end="107:44"><name pos:start="107:22" pos:end="107:25">ADDI</name> <operator pos:start="107:27" pos:end="107:27">|</operator> <call pos:start="107:29" pos:end="107:44"><name pos:start="107:29" pos:end="107:31">TAI</name><argument_list pos:start="107:32" pos:end="107:44">(<argument pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><name pos:start="107:33" pos:end="107:35">ret</name></expr></argument>, <argument pos:start="107:38" pos:end="107:38"><expr pos:start="107:38" pos:end="107:38"><literal type="number" pos:start="107:38" pos:end="107:38">0</literal></expr></argument>, <argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">tmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:43"><expr pos:start="109:9" pos:end="109:42"><call pos:start="109:9" pos:end="109:42"><name pos:start="109:9" pos:end="109:22">tcg_out_shli64</name><argument_list pos:start="109:23" pos:end="109:42">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>, <argument pos:start="109:27" pos:end="109:29"><expr pos:start="109:27" pos:end="109:29"><name pos:start="109:27" pos:end="109:29">ret</name></expr></argument>, <argument pos:start="109:32" pos:end="109:34"><expr pos:start="109:32" pos:end="109:34"><name pos:start="109:32" pos:end="109:34">ret</name></expr></argument>, <argument pos:start="109:37" pos:end="109:41"><expr pos:start="109:37" pos:end="109:41"><name pos:start="109:37" pos:end="109:41">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:23"><expr pos:start="115:5" pos:end="115:22"><name pos:start="115:5" pos:end="115:9">shift</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <call pos:start="115:13" pos:end="115:22"><name pos:start="115:13" pos:end="115:17">clz64</name><argument_list pos:start="115:18" pos:end="115:22">(<argument pos:start="115:19" pos:end="115:21"><expr pos:start="115:19" pos:end="115:21"><name pos:start="115:19" pos:end="115:21">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:47">(<expr pos:start="117:9" pos:end="117:46"><call pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:24">tcg_out_movi_one</name><argument_list pos:start="117:25" pos:end="117:46">(<argument pos:start="117:26" pos:end="117:26"><expr pos:start="117:26" pos:end="117:26"><name pos:start="117:26" pos:end="117:26">s</name></expr></argument>, <argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">ret</name></expr></argument>, <argument pos:start="117:34" pos:end="117:45"><expr pos:start="117:34" pos:end="117:45"><name pos:start="117:34" pos:end="117:36">arg</name> <operator pos:start="117:38" pos:end="117:39">&lt;&lt;</operator> <name pos:start="117:41" pos:end="117:45">shift</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:49" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:15">

        <expr_stmt pos:start="119:9" pos:end="119:43"><expr pos:start="119:9" pos:end="119:42"><call pos:start="119:9" pos:end="119:42"><name pos:start="119:9" pos:end="119:22">tcg_out_shri64</name><argument_list pos:start="119:23" pos:end="119:42">(<argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><name pos:start="119:24" pos:end="119:24">s</name></expr></argument>, <argument pos:start="119:27" pos:end="119:29"><expr pos:start="119:27" pos:end="119:29"><name pos:start="119:27" pos:end="119:29">ret</name></expr></argument>, <argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><name pos:start="119:32" pos:end="119:34">ret</name></expr></argument>, <argument pos:start="119:37" pos:end="119:41"><expr pos:start="119:37" pos:end="119:41"><name pos:start="119:37" pos:end="119:41">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:70">/* Load addresses within 2GB of TB with 2 (or rarely 3) insns.  */</comment>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if <condition pos:start="129:8" pos:end="129:66">(<expr pos:start="129:9" pos:end="129:65"><operator pos:start="129:9" pos:end="129:9">!</operator><name pos:start="129:10" pos:end="129:20">in_prologue</name> <operator pos:start="129:22" pos:end="129:23">&amp;&amp;</operator> <name pos:start="129:25" pos:end="129:34">USE_REG_TB</name> <operator pos:start="129:36" pos:end="129:37">&amp;&amp;</operator> <name pos:start="129:39" pos:end="129:45">tb_diff</name> <operator pos:start="129:47" pos:end="129:48">==</operator> <operator pos:start="129:50" pos:end="129:50">(</operator><name pos:start="129:51" pos:end="129:57">int32_t</name><operator pos:start="129:58" pos:end="129:58">)</operator><name pos:start="129:59" pos:end="129:65">tb_diff</name></expr>)</condition> <block pos:start="129:68" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:15">

        <expr_stmt pos:start="131:9" pos:end="131:65"><expr pos:start="131:9" pos:end="131:64"><call pos:start="131:9" pos:end="131:64"><name pos:start="131:9" pos:end="131:24">tcg_out_mem_long</name><argument_list pos:start="131:25" pos:end="131:64">(<argument pos:start="131:26" pos:end="131:26"><expr pos:start="131:26" pos:end="131:26"><name pos:start="131:26" pos:end="131:26">s</name></expr></argument>, <argument pos:start="131:29" pos:end="131:32"><expr pos:start="131:29" pos:end="131:32"><name pos:start="131:29" pos:end="131:32">ADDI</name></expr></argument>, <argument pos:start="131:35" pos:end="131:37"><expr pos:start="131:35" pos:end="131:37"><name pos:start="131:35" pos:end="131:37">ADD</name></expr></argument>, <argument pos:start="131:40" pos:end="131:42"><expr pos:start="131:40" pos:end="131:42"><name pos:start="131:40" pos:end="131:42">ret</name></expr></argument>, <argument pos:start="131:45" pos:end="131:54"><expr pos:start="131:45" pos:end="131:54"><name pos:start="131:45" pos:end="131:54">TCG_REG_TB</name></expr></argument>, <argument pos:start="131:57" pos:end="131:63"><expr pos:start="131:57" pos:end="131:63"><name pos:start="131:57" pos:end="131:63">tb_diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:46">/* Use the constant pool, if possible.  */</comment>

    <if_stmt pos:start="141:5" pos:end="151:5"><if pos:start="141:5" pos:end="151:5">if <condition pos:start="141:8" pos:end="141:35">(<expr pos:start="141:9" pos:end="141:34"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:20">in_prologue</name> <operator pos:start="141:22" pos:end="141:23">&amp;&amp;</operator> <name pos:start="141:25" pos:end="141:34">USE_REG_TB</name></expr>)</condition> <block pos:start="141:37" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:15">

        <expr_stmt pos:start="143:9" pos:end="145:51"><expr pos:start="143:9" pos:end="145:50"><call pos:start="143:9" pos:end="145:50"><name pos:start="143:9" pos:end="143:22">new_pool_label</name><argument_list pos:start="143:23" pos:end="145:50">(<argument pos:start="143:24" pos:end="143:24"><expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">s</name></expr></argument>, <argument pos:start="143:27" pos:end="143:29"><expr pos:start="143:27" pos:end="143:29"><name pos:start="143:27" pos:end="143:29">arg</name></expr></argument>, <argument pos:start="143:32" pos:end="143:43"><expr pos:start="143:32" pos:end="143:43"><name pos:start="143:32" pos:end="143:43">R_PPC_ADDR16</name></expr></argument>, <argument pos:start="143:46" pos:end="143:56"><expr pos:start="143:46" pos:end="143:56"><name pos:start="143:46" pos:end="143:56"><name pos:start="143:46" pos:end="143:46">s</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:56">code_ptr</name></name></expr></argument>,

                       <argument pos:start="145:24" pos:end="145:49"><expr pos:start="145:24" pos:end="145:49"><operator pos:start="145:24" pos:end="145:24">-</operator><operator pos:start="145:25" pos:end="145:25">(</operator><name pos:start="145:26" pos:end="145:33">intptr_t</name><operator pos:start="145:34" pos:end="145:34">)</operator><name pos:start="145:35" pos:end="145:49"><name pos:start="145:35" pos:end="145:35">s</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:49">code_gen_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:51"><expr pos:start="147:9" pos:end="147:50"><call pos:start="147:9" pos:end="147:50"><name pos:start="147:9" pos:end="147:17">tcg_out32</name><argument_list pos:start="147:18" pos:end="147:50">(<argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><name pos:start="147:19" pos:end="147:19">s</name></expr></argument>, <argument pos:start="147:22" pos:end="147:49"><expr pos:start="147:22" pos:end="147:49"><name pos:start="147:22" pos:end="147:23">LD</name> <operator pos:start="147:25" pos:end="147:25">|</operator> <call pos:start="147:27" pos:end="147:49"><name pos:start="147:27" pos:end="147:29">TAI</name><argument_list pos:start="147:30" pos:end="147:49">(<argument pos:start="147:31" pos:end="147:33"><expr pos:start="147:31" pos:end="147:33"><name pos:start="147:31" pos:end="147:33">ret</name></expr></argument>, <argument pos:start="147:36" pos:end="147:45"><expr pos:start="147:36" pos:end="147:45"><name pos:start="147:36" pos:end="147:45">TCG_REG_TB</name></expr></argument>, <argument pos:start="147:48" pos:end="147:48"><expr pos:start="147:48" pos:end="147:48"><literal type="number" pos:start="147:48" pos:end="147:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="149:9" pos:end="149:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:25"><expr pos:start="155:5" pos:end="155:24"><name pos:start="155:5" pos:end="155:7">tmp</name> <operator pos:start="155:9" pos:end="155:9">=</operator> <name pos:start="155:11" pos:end="155:13">arg</name> <operator pos:start="155:15" pos:end="155:16">&gt;&gt;</operator> <literal type="number" pos:start="155:18" pos:end="155:19">31</literal> <operator pos:start="155:21" pos:end="155:22">&gt;&gt;</operator> <literal type="number" pos:start="155:24" pos:end="155:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:44"><expr pos:start="157:5" pos:end="157:43"><call pos:start="157:5" pos:end="157:43"><name pos:start="157:5" pos:end="157:16">tcg_out_movi</name><argument_list pos:start="157:17" pos:end="157:43">(<argument pos:start="157:18" pos:end="157:18"><expr pos:start="157:18" pos:end="157:18"><name pos:start="157:18" pos:end="157:18">s</name></expr></argument>, <argument pos:start="157:21" pos:end="157:32"><expr pos:start="157:21" pos:end="157:32"><name pos:start="157:21" pos:end="157:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="157:35" pos:end="157:37"><expr pos:start="157:35" pos:end="157:37"><name pos:start="157:35" pos:end="157:37">ret</name></expr></argument>, <argument pos:start="157:40" pos:end="157:42"><expr pos:start="157:40" pos:end="157:42"><name pos:start="157:40" pos:end="157:42">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:12">(<expr pos:start="159:9" pos:end="159:11"><name pos:start="159:9" pos:end="159:11">tmp</name></expr>)</condition> <block pos:start="159:14" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:40">

        <expr_stmt pos:start="161:9" pos:end="161:40"><expr pos:start="161:9" pos:end="161:39"><call pos:start="161:9" pos:end="161:39"><name pos:start="161:9" pos:end="161:22">tcg_out_shli64</name><argument_list pos:start="161:23" pos:end="161:39">(<argument pos:start="161:24" pos:end="161:24"><expr pos:start="161:24" pos:end="161:24"><name pos:start="161:24" pos:end="161:24">s</name></expr></argument>, <argument pos:start="161:27" pos:end="161:29"><expr pos:start="161:27" pos:end="161:29"><name pos:start="161:27" pos:end="161:29">ret</name></expr></argument>, <argument pos:start="161:32" pos:end="161:34"><expr pos:start="161:32" pos:end="161:34"><name pos:start="161:32" pos:end="161:34">ret</name></expr></argument>, <argument pos:start="161:37" pos:end="161:38"><expr pos:start="161:37" pos:end="161:38"><literal type="number" pos:start="161:37" pos:end="161:38">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="165:5" pos:end="169:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:25">(<expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:11">arg</name> <operator pos:start="165:13" pos:end="165:13">&amp;</operator> <literal type="number" pos:start="165:15" pos:end="165:24">0xffff0000</literal></expr>)</condition> <block pos:start="165:27" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:54">

        <expr_stmt pos:start="167:9" pos:end="167:54"><expr pos:start="167:9" pos:end="167:53"><call pos:start="167:9" pos:end="167:53"><name pos:start="167:9" pos:end="167:17">tcg_out32</name><argument_list pos:start="167:18" pos:end="167:53">(<argument pos:start="167:19" pos:end="167:19"><expr pos:start="167:19" pos:end="167:19"><name pos:start="167:19" pos:end="167:19">s</name></expr></argument>, <argument pos:start="167:22" pos:end="167:52"><expr pos:start="167:22" pos:end="167:52"><name pos:start="167:22" pos:end="167:25">ORIS</name> <operator pos:start="167:27" pos:end="167:27">|</operator> <call pos:start="167:29" pos:end="167:52"><name pos:start="167:29" pos:end="167:31">SAI</name><argument_list pos:start="167:32" pos:end="167:52">(<argument pos:start="167:33" pos:end="167:35"><expr pos:start="167:33" pos:end="167:35"><name pos:start="167:33" pos:end="167:35">ret</name></expr></argument>, <argument pos:start="167:38" pos:end="167:40"><expr pos:start="167:38" pos:end="167:40"><name pos:start="167:38" pos:end="167:40">ret</name></expr></argument>, <argument pos:start="167:43" pos:end="167:51"><expr pos:start="167:43" pos:end="167:51"><name pos:start="167:43" pos:end="167:45">arg</name> <operator pos:start="167:47" pos:end="167:48">&gt;&gt;</operator> <literal type="number" pos:start="167:50" pos:end="167:51">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="171:5" pos:end="175:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:21">(<expr pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:11">arg</name> <operator pos:start="171:13" pos:end="171:13">&amp;</operator> <literal type="number" pos:start="171:15" pos:end="171:20">0xffff</literal></expr>)</condition> <block pos:start="171:23" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:47">

        <expr_stmt pos:start="173:9" pos:end="173:47"><expr pos:start="173:9" pos:end="173:46"><call pos:start="173:9" pos:end="173:46"><name pos:start="173:9" pos:end="173:17">tcg_out32</name><argument_list pos:start="173:18" pos:end="173:46">(<argument pos:start="173:19" pos:end="173:19"><expr pos:start="173:19" pos:end="173:19"><name pos:start="173:19" pos:end="173:19">s</name></expr></argument>, <argument pos:start="173:22" pos:end="173:45"><expr pos:start="173:22" pos:end="173:45"><name pos:start="173:22" pos:end="173:24">ORI</name> <operator pos:start="173:26" pos:end="173:26">|</operator> <call pos:start="173:28" pos:end="173:45"><name pos:start="173:28" pos:end="173:30">SAI</name><argument_list pos:start="173:31" pos:end="173:45">(<argument pos:start="173:32" pos:end="173:34"><expr pos:start="173:32" pos:end="173:34"><name pos:start="173:32" pos:end="173:34">ret</name></expr></argument>, <argument pos:start="173:37" pos:end="173:39"><expr pos:start="173:37" pos:end="173:39"><name pos:start="173:37" pos:end="173:39">ret</name></expr></argument>, <argument pos:start="173:42" pos:end="173:44"><expr pos:start="173:42" pos:end="173:44"><name pos:start="173:42" pos:end="173:44">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
