<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3772.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:34">nbd_receive_request</name><parameter_list pos:start="1:35" pos:end="1:80">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:45">QIOChannel</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ioc</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:79"><decl pos:start="1:53" pos:end="1:79"><type pos:start="1:53" pos:end="1:79"><name pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:58">struct</name> <name pos:start="1:60" pos:end="1:70">nbd_request</name></name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:79">request</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:33"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:33">[<expr pos:start="5:17" pos:end="5:32"><name pos:start="5:17" pos:end="5:32">NBD_REQUEST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">ssize_t</name></type> <name pos:start="9:13" pos:end="9:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:43"><expr pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:42"><name pos:start="13:11" pos:end="13:19">read_sync</name><argument_list pos:start="13:20" pos:end="13:42">(<argument pos:start="13:21" pos:end="13:23"><expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">ioc</name></expr></argument>, <argument pos:start="13:26" pos:end="13:28"><expr pos:start="13:26" pos:end="13:28"><name pos:start="13:26" pos:end="13:28">buf</name></expr></argument>, <argument pos:start="13:31" pos:end="13:41"><expr pos:start="13:31" pos:end="13:41"><sizeof pos:start="13:31" pos:end="13:41">sizeof<argument_list pos:start="13:37" pos:end="13:41">(<argument pos:start="13:38" pos:end="13:40"><expr pos:start="13:38" pos:end="13:40"><name pos:start="13:38" pos:end="13:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition> <block pos:start="15:18" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:14">!=</operator> <sizeof pos:start="23:16" pos:end="23:26">sizeof<argument_list pos:start="23:22" pos:end="23:26">(<argument pos:start="23:23" pos:end="23:25"><expr pos:start="23:23" pos:end="23:25"><name pos:start="23:23" pos:end="23:25">buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="23:29" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:23">

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><call pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:11">LOG</name><argument_list pos:start="25:12" pos:end="25:26">(<argument pos:start="25:13" pos:end="25:25"><expr pos:start="25:13" pos:end="25:25"><literal type="string" pos:start="25:13" pos:end="25:25">"read failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="45:7">/* Request

       [ 0 ..  3]   magic   (NBD_REQUEST_MAGIC)

       [ 4 ..  7]   type    (0 == READ, 1 == WRITE)

       [ 8 .. 15]   handle

       [16 .. 23]   from

       [24 .. 27]   len

     */</comment>



    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:9">magic</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:20">ldl_be_p</name><argument_list pos:start="49:21" pos:end="49:25">(<argument pos:start="49:22" pos:end="49:24"><expr pos:start="49:22" pos:end="49:24"><name pos:start="49:22" pos:end="49:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:11">request</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:17">type</name></name>   <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:39"><name pos:start="51:23" pos:end="51:30">ldl_be_p</name><argument_list pos:start="51:31" pos:end="51:39">(<argument pos:start="51:32" pos:end="51:38"><expr pos:start="51:32" pos:end="51:38"><name pos:start="51:32" pos:end="51:34">buf</name> <operator pos:start="51:36" pos:end="51:36">+</operator> <literal type="number" pos:start="51:38" pos:end="51:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:11">request</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:19">handle</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:39"><name pos:start="53:23" pos:end="53:30">ldq_be_p</name><argument_list pos:start="53:31" pos:end="53:39">(<argument pos:start="53:32" pos:end="53:38"><expr pos:start="53:32" pos:end="53:38"><name pos:start="53:32" pos:end="53:34">buf</name> <operator pos:start="53:36" pos:end="53:36">+</operator> <literal type="number" pos:start="53:38" pos:end="53:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:11">request</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">from</name></name>   <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:40"><name pos:start="55:23" pos:end="55:30">ldq_be_p</name><argument_list pos:start="55:31" pos:end="55:40">(<argument pos:start="55:32" pos:end="55:39"><expr pos:start="55:32" pos:end="55:39"><name pos:start="55:32" pos:end="55:34">buf</name> <operator pos:start="55:36" pos:end="55:36">+</operator> <literal type="number" pos:start="55:38" pos:end="55:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:41"><expr pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:11">request</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:16">len</name></name>    <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:40"><name pos:start="57:23" pos:end="57:30">ldl_be_p</name><argument_list pos:start="57:31" pos:end="57:40">(<argument pos:start="57:32" pos:end="57:39"><expr pos:start="57:32" pos:end="57:39"><name pos:start="57:32" pos:end="57:34">buf</name> <operator pos:start="57:36" pos:end="57:36">+</operator> <literal type="number" pos:start="57:38" pos:end="57:39">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="65:61"><expr pos:start="61:5" pos:end="65:60"><call pos:start="61:5" pos:end="65:60"><name pos:start="61:5" pos:end="61:9">TRACE</name><argument_list pos:start="61:10" pos:end="65:60">(<argument pos:start="61:11" pos:end="63:54"><expr pos:start="61:11" pos:end="63:54"><literal type="string" pos:start="61:11" pos:end="61:38">"Got request: { magic = 0x%"</literal> <name pos:start="61:40" pos:end="61:45">PRIx32</name> <literal type="string" pos:start="61:47" pos:end="61:59">", .type = %"</literal> <name pos:start="61:61" pos:end="61:66">PRIx32</name>

          <literal type="string" pos:start="63:11" pos:end="63:22">", from = %"</literal> <name pos:start="63:24" pos:end="63:29">PRIu64</name> <literal type="string" pos:start="63:31" pos:end="63:42">" , len = %"</literal> <name pos:start="63:44" pos:end="63:49">PRIu32</name> <literal type="string" pos:start="63:51" pos:end="63:54">" }"</literal></expr></argument>,

          <argument pos:start="65:11" pos:end="65:15"><expr pos:start="65:11" pos:end="65:15"><name pos:start="65:11" pos:end="65:15">magic</name></expr></argument>, <argument pos:start="65:18" pos:end="65:30"><expr pos:start="65:18" pos:end="65:30"><name pos:start="65:18" pos:end="65:30"><name pos:start="65:18" pos:end="65:24">request</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:30">type</name></name></expr></argument>, <argument pos:start="65:33" pos:end="65:45"><expr pos:start="65:33" pos:end="65:45"><name pos:start="65:33" pos:end="65:45"><name pos:start="65:33" pos:end="65:39">request</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:45">from</name></name></expr></argument>, <argument pos:start="65:48" pos:end="65:59"><expr pos:start="65:48" pos:end="65:59"><name pos:start="65:48" pos:end="65:59"><name pos:start="65:48" pos:end="65:54">request</name><operator pos:start="65:55" pos:end="65:56">-&gt;</operator><name pos:start="65:57" pos:end="65:59">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:35">(<expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:13">magic</name> <operator pos:start="69:15" pos:end="69:16">!=</operator> <name pos:start="69:18" pos:end="69:34">NBD_REQUEST_MAGIC</name></expr>)</condition> <block pos:start="69:37" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:23">

        <expr_stmt pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:55"><call pos:start="71:9" pos:end="71:55"><name pos:start="71:9" pos:end="71:11">LOG</name><argument_list pos:start="71:12" pos:end="71:55">(<argument pos:start="71:13" pos:end="71:47"><expr pos:start="71:13" pos:end="71:47"><literal type="string" pos:start="71:13" pos:end="71:36">"invalid magic (got 0x%"</literal> <name pos:start="71:38" pos:end="71:43">PRIx32</name> <literal type="string" pos:start="71:45" pos:end="71:47">")"</literal></expr></argument>, <argument pos:start="71:50" pos:end="71:54"><expr pos:start="71:50" pos:end="71:54"><name pos:start="71:50" pos:end="71:54">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:23">return <expr pos:start="73:16" pos:end="73:22"><operator pos:start="73:16" pos:end="73:16">-</operator><name pos:start="73:17" pos:end="73:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
