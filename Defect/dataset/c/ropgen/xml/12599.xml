<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12599.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ptx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:46" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:40">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:26">buf_end</name> <init pos:start="7:28" pos:end="7:54">= <expr pos:start="7:30" pos:end="7:54"><name pos:start="7:30" pos:end="7:40"><name pos:start="7:30" pos:end="7:34">avpkt</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:40">data</name></name> <operator pos:start="7:42" pos:end="7:42">+</operator> <name pos:start="7:44" pos:end="7:54"><name pos:start="7:44" pos:end="7:48">avpkt</name><operator pos:start="7:49" pos:end="7:50">-&gt;</operator><name pos:start="7:51" pos:end="7:54">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:14">PTXContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier> <specifier pos:start="9:18" pos:end="9:22">const</specifier></type> <name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:32">avctx</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:43">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">picture</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier> <specifier pos:start="13:15" pos:end="13:19">const</specifier></type> <name pos:start="13:21" pos:end="13:21">p</name> <init pos:start="13:23" pos:end="13:35">= <expr pos:start="13:25" pos:end="13:35"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:35">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:58"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:23">offset</name></decl>, <decl pos:start="15:26" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:26" pos:end="15:26">w</name></decl>, <decl pos:start="15:29" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:29" pos:end="15:29">h</name></decl>, <decl pos:start="15:32" pos:end="15:32"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:32" pos:end="15:32">y</name></decl>, <decl pos:start="15:35" pos:end="15:40"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:35" pos:end="15:40">stride</name></decl>, <decl pos:start="15:43" pos:end="15:57"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:43" pos:end="15:57">bytes_per_pixel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:16">ptr</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:27">(<expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:15">buf_end</name> <operator pos:start="21:17" pos:end="21:17">-</operator> <name pos:start="21:19" pos:end="21:21">buf</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <literal type="number" pos:start="21:25" pos:end="21:26">14</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:35"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:10">offset</name>          <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:29">AV_RL16</name><argument_list pos:start="25:30" pos:end="25:34">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:37"><expr pos:start="27:5" pos:end="27:36"><name pos:start="27:5" pos:end="27:5">w</name>               <operator pos:start="27:21" pos:end="27:21">=</operator> <call pos:start="27:23" pos:end="27:36"><name pos:start="27:23" pos:end="27:29">AV_RL16</name><argument_list pos:start="27:30" pos:end="27:36">(<argument pos:start="27:31" pos:end="27:35"><expr pos:start="27:31" pos:end="27:35"><name pos:start="27:31" pos:end="27:33">buf</name><operator pos:start="27:34" pos:end="27:34">+</operator><literal type="number" pos:start="27:35" pos:end="27:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:5">h</name>               <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:37"><name pos:start="29:23" pos:end="29:29">AV_RL16</name><argument_list pos:start="29:30" pos:end="29:37">(<argument pos:start="29:31" pos:end="29:36"><expr pos:start="29:31" pos:end="29:36"><name pos:start="29:31" pos:end="29:33">buf</name><operator pos:start="29:34" pos:end="29:34">+</operator><literal type="number" pos:start="29:35" pos:end="29:36">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:19">bytes_per_pixel</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:37"><name pos:start="31:23" pos:end="31:29">AV_RL16</name><argument_list pos:start="31:30" pos:end="31:37">(<argument pos:start="31:31" pos:end="31:36"><expr pos:start="31:31" pos:end="31:36"><name pos:start="31:31" pos:end="31:33">buf</name><operator pos:start="31:34" pos:end="31:34">+</operator><literal type="number" pos:start="31:35" pos:end="31:36">12</literal></expr></argument>)</argument_list></call> <operator pos:start="31:39" pos:end="31:40">&gt;&gt;</operator> <literal type="number" pos:start="31:42" pos:end="31:42">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:29">(<expr pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:23">bytes_per_pixel</name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <literal type="number" pos:start="35:28" pos:end="35:28">2</literal></expr>)</condition> <block pos:start="35:31" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:29">av_log_ask_for_sample</name><argument_list pos:start="37:30" pos:end="37:68">(<argument pos:start="37:31" pos:end="37:35"><expr pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:35">avctx</name></expr></argument>, <argument pos:start="37:38" pos:end="37:67"><expr pos:start="37:38" pos:end="37:67"><literal type="string" pos:start="37:38" pos:end="37:67">"Image format is not RGB15.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:9">avctx</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">pix_fmt</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:35">PIX_FMT_RGB555</name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="51:35"><if pos:start="49:5" pos:end="51:35">if <condition pos:start="49:8" pos:end="49:31">(<expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:15">buf_end</name> <operator pos:start="49:17" pos:end="49:17">-</operator> <name pos:start="49:19" pos:end="49:21">buf</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:30">offset</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:35"><block_content pos:start="51:9" pos:end="51:35">

        <return pos:start="51:9" pos:end="51:35">return <expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="55:57"><if pos:start="53:5" pos:end="55:57">if <condition pos:start="53:8" pos:end="53:23">(<expr pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:14">offset</name> <operator pos:start="53:16" pos:end="53:17">!=</operator> <literal type="number" pos:start="53:19" pos:end="53:22">0x2c</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:57"><block_content pos:start="55:9" pos:end="55:57">

        <expr_stmt pos:start="55:9" pos:end="55:57"><expr pos:start="55:9" pos:end="55:56"><call pos:start="55:9" pos:end="55:56"><name pos:start="55:9" pos:end="55:29">av_log_ask_for_sample</name><argument_list pos:start="55:30" pos:end="55:56">(<argument pos:start="55:31" pos:end="55:35"><expr pos:start="55:31" pos:end="55:35"><name pos:start="55:31" pos:end="55:35">avctx</name></expr></argument>, <argument pos:start="55:38" pos:end="55:55"><expr pos:start="55:38" pos:end="55:55"><literal type="string" pos:start="55:38" pos:end="55:55">"offset != 0x2c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:18"><expr pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:7">buf</name> <operator pos:start="59:9" pos:end="59:10">+=</operator> <name pos:start="59:12" pos:end="59:17">offset</name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="65:40"><if pos:start="63:5" pos:end="65:40">if <condition pos:start="63:8" pos:end="63:19">(<expr pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:9">p</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:15">data</name><index pos:start="63:16" pos:end="63:18">[<expr pos:start="63:17" pos:end="63:17"><literal type="number" pos:start="63:17" pos:end="63:17">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:40"><block_content pos:start="65:9" pos:end="65:40">

        <expr_stmt pos:start="65:9" pos:end="65:40"><expr pos:start="65:9" pos:end="65:39"><call pos:start="65:9" pos:end="65:39"><name pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:29">release_buffer</name></name><argument_list pos:start="65:30" pos:end="65:39">(<argument pos:start="65:31" pos:end="65:35"><expr pos:start="65:31" pos:end="65:35"><name pos:start="65:31" pos:end="65:35">avctx</name></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><name pos:start="65:38" pos:end="65:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="71:18"><if pos:start="69:5" pos:end="71:18">if <condition pos:start="69:8" pos:end="69:44">(<expr pos:start="69:9" pos:end="69:43"><call pos:start="69:9" pos:end="69:43"><name pos:start="69:9" pos:end="69:27">av_image_check_size</name><argument_list pos:start="69:28" pos:end="69:43">(<argument pos:start="69:29" pos:end="69:29"><expr pos:start="69:29" pos:end="69:29"><name pos:start="69:29" pos:end="69:29">w</name></expr></argument>, <argument pos:start="69:32" pos:end="69:32"><expr pos:start="69:32" pos:end="69:32"><name pos:start="69:32" pos:end="69:32">h</name></expr></argument>, <argument pos:start="69:35" pos:end="69:35"><expr pos:start="69:35" pos:end="69:35"><literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:42"><expr pos:start="69:38" pos:end="69:42"><name pos:start="69:38" pos:end="69:42">avctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:18"><block_content pos:start="71:9" pos:end="71:18">

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="75:44"><if pos:start="73:5" pos:end="75:44">if <condition pos:start="73:8" pos:end="73:48">(<expr pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:9">w</name> <operator pos:start="73:11" pos:end="73:12">!=</operator> <name pos:start="73:14" pos:end="73:25"><name pos:start="73:14" pos:end="73:18">avctx</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:25">width</name></name> <operator pos:start="73:27" pos:end="73:28">||</operator> <name pos:start="73:30" pos:end="73:30">h</name> <operator pos:start="73:32" pos:end="73:33">!=</operator> <name pos:start="73:35" pos:end="73:47"><name pos:start="73:35" pos:end="73:39">avctx</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:47">height</name></name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:44"><block_content pos:start="75:9" pos:end="75:44">

        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><call pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:30">avcodec_set_dimensions</name><argument_list pos:start="75:31" pos:end="75:43">(<argument pos:start="75:32" pos:end="75:36"><expr pos:start="75:32" pos:end="75:36"><name pos:start="75:32" pos:end="75:36">avctx</name></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">w</name></expr></argument>, <argument pos:start="75:42" pos:end="75:42"><expr pos:start="75:42" pos:end="75:42"><name pos:start="75:42" pos:end="75:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:40">(<expr pos:start="77:9" pos:end="77:39"><call pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:25">get_buffer</name></name><argument_list pos:start="77:26" pos:end="77:35">(<argument pos:start="77:27" pos:end="77:31"><expr pos:start="77:27" pos:end="77:31"><name pos:start="77:27" pos:end="77:31">avctx</name></expr></argument>, <argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">p</name></expr></argument>)</argument_list></call> <operator pos:start="77:37" pos:end="77:37">&lt;</operator> <literal type="number" pos:start="77:39" pos:end="77:39">0</literal></expr>)</condition> <block pos:start="77:42" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <expr_stmt pos:start="79:9" pos:end="79:61"><expr pos:start="79:9" pos:end="79:60"><call pos:start="79:9" pos:end="79:60"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:60">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:59"><expr pos:start="79:37" pos:end="79:59"><literal type="string" pos:start="79:37" pos:end="79:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><operator pos:start="81:16" pos:end="81:16">-</operator><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:5">p</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:16">pict_type</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:36">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:7">ptr</name>    <operator pos:start="91:12" pos:end="91:12">=</operator> <name pos:start="91:14" pos:end="91:23"><name pos:start="91:14" pos:end="91:14">p</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:20">data</name><index pos:start="91:21" pos:end="91:23">[<expr pos:start="91:22" pos:end="91:22"><literal type="number" pos:start="91:22" pos:end="91:22">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:10">stride</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <name pos:start="93:14" pos:end="93:27"><name pos:start="93:14" pos:end="93:14">p</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:24">linesize</name><index pos:start="93:25" pos:end="93:27">[<expr pos:start="93:26" pos:end="93:26"><literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="97:5" pos:end="121:5">for <control pos:start="97:9" pos:end="97:23">(<init pos:start="97:10" pos:end="97:13"><expr pos:start="97:10" pos:end="97:12"><name pos:start="97:10" pos:end="97:10">y</name><operator pos:start="97:11" pos:end="97:11">=</operator><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</init> <condition pos:start="97:15" pos:end="97:18"><expr pos:start="97:15" pos:end="97:17"><name pos:start="97:15" pos:end="97:15">y</name><operator pos:start="97:16" pos:end="97:16">&lt;</operator><name pos:start="97:17" pos:end="97:17">h</name></expr>;</condition> <incr pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:20">y</name><operator pos:start="97:21" pos:end="97:22">++</operator></expr></incr>)</control> <block pos:start="97:25" pos:end="121:5">{<block_content pos:start="99:9" pos:end="119:33">

        <if_stmt pos:start="99:9" pos:end="104:0"><if pos:start="99:9" pos:end="104:0">if <condition pos:start="99:12" pos:end="99:48">(<expr pos:start="99:13" pos:end="99:47"><name pos:start="99:13" pos:end="99:19">buf_end</name> <operator pos:start="99:21" pos:end="99:21">-</operator> <name pos:start="99:23" pos:end="99:25">buf</name> <operator pos:start="99:27" pos:end="99:27">&lt;</operator> <name pos:start="99:29" pos:end="99:29">w</name> <operator pos:start="99:31" pos:end="99:31">*</operator> <name pos:start="99:33" pos:end="99:47">bytes_per_pixel</name></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="104:0"><block_content pos:start="101:13" pos:end="104:0">

            <break pos:start="101:13" pos:end="104:0">break;</break></block_content></block></if></if_stmt>

<cpp:if pos:start="103:1" pos:end="103:18">#<cpp:directive pos:start="103:2" pos:end="103:3">if</cpp:directive> <expr pos:start="103:5" pos:end="103:18"><name pos:start="103:5" pos:end="103:18">HAVE_BIGENDIAN</name></expr></cpp:if>

        <decl_stmt pos:start="105:9" pos:end="105:23"><decl pos:start="105:9" pos:end="105:22"><type pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:16">unsigned</name> <name pos:start="105:18" pos:end="105:20">int</name></type> <name pos:start="105:22" pos:end="105:22">x</name></decl>;</decl_stmt>

        <for pos:start="107:9" pos:end="112:0">for <control pos:start="107:13" pos:end="107:58">(<init pos:start="107:14" pos:end="107:17"><expr pos:start="107:14" pos:end="107:16"><name pos:start="107:14" pos:end="107:14">x</name><operator pos:start="107:15" pos:end="107:15">=</operator><literal type="number" pos:start="107:16" pos:end="107:16">0</literal></expr>;</init> <condition pos:start="107:19" pos:end="107:38"><expr pos:start="107:19" pos:end="107:37"><name pos:start="107:19" pos:end="107:19">x</name><operator pos:start="107:20" pos:end="107:20">&lt;</operator><name pos:start="107:21" pos:end="107:21">w</name><operator pos:start="107:22" pos:end="107:22">*</operator><name pos:start="107:23" pos:end="107:37">bytes_per_pixel</name></expr>;</condition> <incr pos:start="107:40" pos:end="107:57"><expr pos:start="107:40" pos:end="107:57"><name pos:start="107:40" pos:end="107:40">x</name><operator pos:start="107:41" pos:end="107:42">+=</operator><name pos:start="107:43" pos:end="107:57">bytes_per_pixel</name></expr></incr>)</control><block type="pseudo" pos:start="109:13" pos:end="112:0"><block_content pos:start="109:13" pos:end="112:0">

            <expr_stmt pos:start="109:13" pos:end="112:0"><expr pos:start="109:13" pos:end="109:42"><call pos:start="109:13" pos:end="109:42"><name pos:start="109:13" pos:end="109:19">AV_WN16</name><argument_list pos:start="109:20" pos:end="109:42">(<argument pos:start="109:21" pos:end="109:25"><expr pos:start="109:21" pos:end="109:25"><name pos:start="109:21" pos:end="109:23">ptr</name><operator pos:start="109:24" pos:end="109:24">+</operator><name pos:start="109:25" pos:end="109:25">x</name></expr></argument>, <argument pos:start="109:28" pos:end="109:41"><expr pos:start="109:28" pos:end="109:41"><call pos:start="109:28" pos:end="109:41"><name pos:start="109:28" pos:end="109:34">AV_RL16</name><argument_list pos:start="109:35" pos:end="109:41">(<argument pos:start="109:36" pos:end="109:40"><expr pos:start="109:36" pos:end="109:40"><name pos:start="109:36" pos:end="109:38">buf</name><operator pos:start="109:39" pos:end="109:39">+</operator><name pos:start="109:40" pos:end="109:40">x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:else pos:start="111:1" pos:end="111:5">#<cpp:directive pos:start="111:2" pos:end="111:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="113:9" pos:end="116:0"><expr pos:start="113:9" pos:end="113:43"><call pos:start="113:9" pos:end="113:43"><name pos:start="113:9" pos:end="113:14">memcpy</name><argument_list pos:start="113:15" pos:end="113:43">(<argument pos:start="113:16" pos:end="113:18"><expr pos:start="113:16" pos:end="113:18"><name pos:start="113:16" pos:end="113:18">ptr</name></expr></argument>, <argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">buf</name></expr></argument>, <argument pos:start="113:26" pos:end="113:42"><expr pos:start="113:26" pos:end="113:42"><name pos:start="113:26" pos:end="113:26">w</name><operator pos:start="113:27" pos:end="113:27">*</operator><name pos:start="113:28" pos:end="113:42">bytes_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:11">ptr</name> <operator pos:start="117:13" pos:end="117:14">+=</operator> <name pos:start="117:16" pos:end="117:21">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:33"><expr pos:start="119:9" pos:end="119:32"><name pos:start="119:9" pos:end="119:11">buf</name> <operator pos:start="119:13" pos:end="119:14">+=</operator> <name pos:start="119:16" pos:end="119:16">w</name><operator pos:start="119:17" pos:end="119:17">*</operator><name pos:start="119:18" pos:end="119:32">bytes_per_pixel</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><operator pos:start="125:5" pos:end="125:5">*</operator><name pos:start="125:6" pos:end="125:12">picture</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <name pos:start="125:16" pos:end="125:25"><name pos:start="125:16" pos:end="125:16">s</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:35"><expr pos:start="127:5" pos:end="127:34"><operator pos:start="127:5" pos:end="127:5">*</operator><name pos:start="127:6" pos:end="127:14">data_size</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <sizeof pos:start="127:18" pos:end="127:34">sizeof<argument_list pos:start="127:24" pos:end="127:34">(<argument pos:start="127:25" pos:end="127:33"><expr pos:start="127:25" pos:end="127:33"><name pos:start="127:25" pos:end="127:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="131:5" pos:end="131:40">return <expr pos:start="131:12" pos:end="131:39"><name pos:start="131:12" pos:end="131:17">offset</name> <operator pos:start="131:19" pos:end="131:19">+</operator> <name pos:start="131:21" pos:end="131:21">w</name><operator pos:start="131:22" pos:end="131:22">*</operator><name pos:start="131:23" pos:end="131:23">h</name><operator pos:start="131:24" pos:end="131:24">*</operator><name pos:start="131:25" pos:end="131:39">bytes_per_pixel</name></expr>;</return>

</block_content>}</block></function>
</unit>
