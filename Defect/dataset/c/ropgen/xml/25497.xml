<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25497.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:31"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_access_unit</name><parameter_list pos:start="1:28" pos:end="2:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name><modifier pos:start="1:56" pos:end="1:56">*</modifier></type> <name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:46"><decl pos:start="2:29" pos:end="2:46"><type pos:start="2:29" pos:end="2:46"><name pos:start="2:29" pos:end="2:31">int</name> <modifier pos:start="2:33" pos:end="2:33">*</modifier></type><name pos:start="2:34" pos:end="2:46">got_frame_ptr</name></decl></parameter>, <parameter pos:start="2:49" pos:end="2:63"><decl pos:start="2:49" pos:end="2:63"><type pos:start="2:49" pos:end="2:63"><name pos:start="2:49" pos:end="2:56">AVPacket</name> <modifier pos:start="2:58" pos:end="2:58">*</modifier></type><name pos:start="2:59" pos:end="2:63">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="129:31">{<block_content pos:start="4:5" pos:end="129:31">
    <decl_stmt pos:start="4:5" pos:end="4:37"><decl pos:start="4:5" pos:end="4:36"><type pos:start="4:5" pos:end="4:19"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:17">uint8_t</name> <modifier pos:start="4:19" pos:end="4:19">*</modifier></type><name pos:start="4:20" pos:end="4:22">buf</name> <init pos:start="4:24" pos:end="4:36">= <expr pos:start="4:26" pos:end="4:36"><name pos:start="4:26" pos:end="4:36"><name pos:start="4:26" pos:end="4:30">avpkt</name><operator pos:start="4:31" pos:end="4:32">-&gt;</operator><name pos:start="4:33" pos:end="4:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">buf_size</name> <init pos:start="5:18" pos:end="5:30">= <expr pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:24">avpkt</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:43"><decl pos:start="6:5" pos:end="6:42"><type pos:start="6:5" pos:end="6:22"><name pos:start="6:5" pos:end="6:20">MLPDecodeContext</name> <modifier pos:start="6:22" pos:end="6:22">*</modifier></type><name pos:start="6:23" pos:end="6:23">m</name> <init pos:start="6:25" pos:end="6:42">= <expr pos:start="6:27" pos:end="6:42"><name pos:start="6:27" pos:end="6:42"><name pos:start="6:27" pos:end="6:31">avctx</name><operator pos:start="6:32" pos:end="6:33">-&gt;</operator><name pos:start="6:34" pos:end="6:42">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:32"><decl pos:start="8:5" pos:end="8:23"><type pos:start="8:5" pos:end="8:16"><name pos:start="8:5" pos:end="8:12">unsigned</name> <name pos:start="8:14" pos:end="8:16">int</name></type> <name pos:start="8:18" pos:end="8:23">length</name></decl>, <decl pos:start="8:26" pos:end="8:31"><type ref="prev" pos:start="8:5" pos:end="8:16"/><name pos:start="8:26" pos:end="8:31">substr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:32">substream_start</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:33"><decl pos:start="10:5" pos:end="10:32"><type pos:start="10:5" pos:end="10:16"><name pos:start="10:5" pos:end="10:12">unsigned</name> <name pos:start="10:14" pos:end="10:16">int</name></type> <name pos:start="10:18" pos:end="10:28">header_size</name> <init pos:start="10:30" pos:end="10:32">= <expr pos:start="10:32" pos:end="10:32"><literal type="number" pos:start="10:32" pos:end="10:32">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:35">substr_header_size</name> <init pos:start="11:37" pos:end="11:39">= <expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:53"><decl pos:start="12:5" pos:end="12:52"><type pos:start="12:5" pos:end="12:11"><name pos:start="12:5" pos:end="12:11">uint8_t</name></type> <name pos:start="12:13" pos:end="12:52"><name pos:start="12:13" pos:end="12:36">substream_parity_present</name><index pos:start="12:37" pos:end="12:52">[<expr pos:start="12:38" pos:end="12:51"><name pos:start="12:38" pos:end="12:51">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:47"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:47"><name pos:start="13:14" pos:end="13:31">substream_data_len</name><index pos:start="13:32" pos:end="13:47">[<expr pos:start="13:33" pos:end="13:46"><name pos:start="13:33" pos:end="13:46">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:24"><decl pos:start="14:5" pos:end="14:23"><type pos:start="14:5" pos:end="14:11"><name pos:start="14:5" pos:end="14:11">uint8_t</name></type> <name pos:start="14:13" pos:end="14:23">parity_bits</name></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>
    <if_stmt pos:start="16:5" pos:end="17:35"><if pos:start="16:5" pos:end="17:35">if <condition pos:start="16:8" pos:end="16:21">(<expr pos:start="16:9" pos:end="16:20"><name pos:start="16:9" pos:end="16:16">buf_size</name> <operator pos:start="16:18" pos:end="16:18">&lt;</operator> <literal type="number" pos:start="16:20" pos:end="16:20">4</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">
        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:40"><expr pos:start="18:5" pos:end="18:39"><name pos:start="18:5" pos:end="18:10">length</name> <operator pos:start="18:12" pos:end="18:12">=</operator> <operator pos:start="18:14" pos:end="18:14">(</operator><call pos:start="18:15" pos:end="18:26"><name pos:start="18:15" pos:end="18:21">AV_RB16</name><argument_list pos:start="18:22" pos:end="18:26">(<argument pos:start="18:23" pos:end="18:25"><expr pos:start="18:23" pos:end="18:25"><name pos:start="18:23" pos:end="18:25">buf</name></expr></argument>)</argument_list></call> <operator pos:start="18:28" pos:end="18:28">&amp;</operator> <literal type="number" pos:start="18:30" pos:end="18:34">0xfff</literal><operator pos:start="18:35" pos:end="18:35">)</operator> <operator pos:start="18:37" pos:end="18:37">*</operator> <literal type="number" pos:start="18:39" pos:end="18:39">2</literal></expr>;</expr_stmt>
    <if_stmt pos:start="19:5" pos:end="20:35"><if pos:start="19:5" pos:end="20:35">if <condition pos:start="19:8" pos:end="19:40">(<expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:30"><name pos:start="19:9" pos:end="19:14">length</name> <argument_list type="generic" pos:start="19:16" pos:end="19:30">&lt; <argument pos:start="19:18" pos:end="19:28"><expr pos:start="19:18" pos:end="19:28"><literal type="number" pos:start="19:18" pos:end="19:18">4</literal> <operator pos:start="19:20" pos:end="19:21">||</operator> <name pos:start="19:23" pos:end="19:28">length</name></expr></argument> &gt;</argument_list></name> <name pos:start="19:32" pos:end="19:39">buf_size</name></expr>)</condition><block type="pseudo" pos:start="20:9" pos:end="20:35"><block_content pos:start="20:9" pos:end="20:35">
        <return pos:start="20:9" pos:end="20:35">return <expr pos:start="20:16" pos:end="20:34"><name pos:start="20:16" pos:end="20:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><call pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:17">init_get_bits</name><argument_list pos:start="21:18" pos:end="21:51">(<argument pos:start="21:19" pos:end="21:21"><expr pos:start="21:19" pos:end="21:21"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:21">gb</name></expr></argument>, <argument pos:start="21:24" pos:end="21:32"><expr pos:start="21:24" pos:end="21:32"><operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:27">buf</name> <operator pos:start="21:29" pos:end="21:29">+</operator> <literal type="number" pos:start="21:31" pos:end="21:31">4</literal><operator pos:start="21:32" pos:end="21:32">)</operator></expr></argument>, <argument pos:start="21:35" pos:end="21:50"><expr pos:start="21:35" pos:end="21:50"><operator pos:start="21:35" pos:end="21:35">(</operator><name pos:start="21:36" pos:end="21:41">length</name> <operator pos:start="21:43" pos:end="21:43">-</operator> <literal type="number" pos:start="21:45" pos:end="21:45">4</literal><operator pos:start="21:46" pos:end="21:46">)</operator> <operator pos:start="21:48" pos:end="21:48">*</operator> <literal type="number" pos:start="21:50" pos:end="21:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:30"><expr pos:start="22:5" pos:end="22:29"><name pos:start="22:5" pos:end="22:25"><name pos:start="22:5" pos:end="22:5">m</name><operator pos:start="22:6" pos:end="22:7">-&gt;</operator><name pos:start="22:8" pos:end="22:25">is_major_sync_unit</name></name> <operator pos:start="22:27" pos:end="22:27">=</operator> <literal type="number" pos:start="22:29" pos:end="22:29">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="23:5" pos:end="129:31"><if pos:start="23:5" pos:end="129:31">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:31"><name pos:start="23:9" pos:end="23:22">show_bits_long</name><argument_list pos:start="23:23" pos:end="23:31">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><operator pos:start="23:24" pos:end="23:24">&amp;</operator><name pos:start="23:25" pos:end="23:26">gb</name></expr></argument>, <argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><literal type="number" pos:start="23:29" pos:end="23:30">31</literal></expr></argument>)</argument_list></call> <operator pos:start="23:33" pos:end="23:34">==</operator> <operator pos:start="23:36" pos:end="23:36">(</operator><literal type="number" pos:start="23:37" pos:end="23:46">0xf8726fba</literal> <operator pos:start="23:48" pos:end="23:49">&gt;&gt;</operator> <literal type="number" pos:start="23:51" pos:end="23:51">1</literal><operator pos:start="23:52" pos:end="23:52">)</operator></expr>)</condition> <block pos:start="23:55" pos:end="129:31">{<block_content pos:start="24:9" pos:end="129:31">
        <if_stmt pos:start="24:9" pos:end="25:34"><if pos:start="24:9" pos:end="25:34">if <condition pos:start="24:12" pos:end="24:40">(<expr pos:start="24:13" pos:end="24:39"><call pos:start="24:13" pos:end="24:35"><name pos:start="24:13" pos:end="24:27">read_major_sync</name><argument_list pos:start="24:28" pos:end="24:35">(<argument pos:start="24:29" pos:end="24:29"><expr pos:start="24:29" pos:end="24:29"><name pos:start="24:29" pos:end="24:29">m</name></expr></argument>, <argument pos:start="24:32" pos:end="24:34"><expr pos:start="24:32" pos:end="24:34"><operator pos:start="24:32" pos:end="24:32">&amp;</operator><name pos:start="24:33" pos:end="24:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="24:37" pos:end="24:37">&lt;</operator> <literal type="number" pos:start="24:39" pos:end="24:39">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:34"><block_content pos:start="25:9" pos:end="25:34">
        <expr_stmt pos:start="25:9" pos:end="25:34"><expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:9">m</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:29">is_major_sync_unit</name></name> <operator pos:start="25:31" pos:end="25:31">=</operator> <literal type="number" pos:start="25:33" pos:end="25:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:49"><expr pos:start="26:9" pos:end="26:48"><name pos:start="26:9" pos:end="26:19">header_size</name> <operator pos:start="26:21" pos:end="26:22">+=</operator> <name pos:start="26:24" pos:end="26:48"><name pos:start="26:24" pos:end="26:24">m</name><operator pos:start="26:25" pos:end="26:26">-&gt;</operator><name pos:start="26:27" pos:end="26:48">major_sync_header_size</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="129:31"><if pos:start="27:5" pos:end="129:31">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:24"><name pos:start="27:10" pos:end="27:10">m</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:24">params_valid</name></name></expr>)</condition> <block pos:start="27:27" pos:end="129:31">{<block_content pos:start="28:9" pos:end="129:31">
        <expr_stmt pos:start="28:9" pos:end="29:64"><expr pos:start="28:9" pos:end="29:63"><call pos:start="28:9" pos:end="29:63"><name pos:start="28:9" pos:end="28:14">av_log</name><argument_list pos:start="28:15" pos:end="29:63">(<argument pos:start="28:16" pos:end="28:23"><expr pos:start="28:16" pos:end="28:23"><name pos:start="28:16" pos:end="28:23"><name pos:start="28:16" pos:end="28:16">m</name><operator pos:start="28:17" pos:end="28:18">-&gt;</operator><name pos:start="28:19" pos:end="28:23">avctx</name></name></expr></argument>, <argument pos:start="28:26" pos:end="28:39"><expr pos:start="28:26" pos:end="28:39"><name pos:start="28:26" pos:end="28:39">AV_LOG_WARNING</name></expr></argument>,
               <argument pos:start="29:16" pos:end="29:62"><expr pos:start="29:16" pos:end="29:62"><literal type="string" pos:start="29:16" pos:end="29:62">"Stream parameters not seen; skipping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:27"><expr pos:start="30:9" pos:end="30:26"><operator pos:start="30:9" pos:end="30:9">*</operator><name pos:start="30:10" pos:end="30:22">got_frame_ptr</name> <operator pos:start="30:24" pos:end="30:24">=</operator> <literal type="number" pos:start="30:26" pos:end="30:26">0</literal></expr>;</expr_stmt>
        <return pos:start="31:9" pos:end="31:22">return <expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:21">length</name></expr>;</return>
    <expr_stmt pos:start="32:5" pos:end="32:24"><expr pos:start="32:5" pos:end="32:23"><name pos:start="32:5" pos:end="32:19">substream_start</name> <operator pos:start="32:21" pos:end="32:21">=</operator> <literal type="number" pos:start="32:23" pos:end="32:23">0</literal></expr>;</expr_stmt>
    <for pos:start="33:5" pos:end="129:31">for <control pos:start="33:9" pos:end="33:58">(<init pos:start="33:10" pos:end="33:20"><expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:15">substr</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>;</init> <condition pos:start="33:22" pos:end="33:48"><expr pos:start="33:22" pos:end="33:47"><name pos:start="33:22" pos:end="33:27">substr</name> <operator pos:start="33:29" pos:end="33:29">&lt;</operator> <name pos:start="33:31" pos:end="33:47"><name pos:start="33:31" pos:end="33:31">m</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:47">num_substreams</name></name></expr>;</condition> <incr pos:start="33:50" pos:end="33:57"><expr pos:start="33:50" pos:end="33:57"><name pos:start="33:50" pos:end="33:55">substr</name><operator pos:start="33:56" pos:end="33:57">++</operator></expr></incr>)</control> <block pos:start="33:60" pos:end="129:31">{<block_content pos:start="34:9" pos:end="129:31">
        <decl_stmt pos:start="34:9" pos:end="34:73"><decl pos:start="34:9" pos:end="34:29"><type pos:start="34:9" pos:end="34:11"><name pos:start="34:9" pos:end="34:11">int</name></type> <name pos:start="34:13" pos:end="34:29">extraword_present</name></decl>, <decl pos:start="34:32" pos:end="34:48"><type ref="prev" pos:start="34:9" pos:end="34:11"/><name pos:start="34:32" pos:end="34:48">checkdata_present</name></decl>, <decl pos:start="34:51" pos:end="34:53"><type ref="prev" pos:start="34:9" pos:end="34:11"/><name pos:start="34:51" pos:end="34:53">end</name></decl>, <decl pos:start="34:56" pos:end="34:72"><type ref="prev" pos:start="34:9" pos:end="34:11"/><name pos:start="34:56" pos:end="34:72">nonrestart_substr</name></decl>;</decl_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:43"><expr pos:start="35:9" pos:end="35:42"><name pos:start="35:9" pos:end="35:25">extraword_present</name> <operator pos:start="35:27" pos:end="35:27">=</operator> <call pos:start="35:29" pos:end="35:42"><name pos:start="35:29" pos:end="35:37">get_bits1</name><argument_list pos:start="35:38" pos:end="35:42">(<argument pos:start="35:39" pos:end="35:41"><expr pos:start="35:39" pos:end="35:41"><operator pos:start="35:39" pos:end="35:39">&amp;</operator><name pos:start="35:40" pos:end="35:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:43"><expr pos:start="36:9" pos:end="36:42"><name pos:start="36:9" pos:end="36:25">nonrestart_substr</name> <operator pos:start="36:27" pos:end="36:27">=</operator> <call pos:start="36:29" pos:end="36:42"><name pos:start="36:29" pos:end="36:37">get_bits1</name><argument_list pos:start="36:38" pos:end="36:42">(<argument pos:start="36:39" pos:end="36:41"><expr pos:start="36:39" pos:end="36:41"><operator pos:start="36:39" pos:end="36:39">&amp;</operator><name pos:start="36:40" pos:end="36:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:43"><expr pos:start="37:9" pos:end="37:42"><name pos:start="37:9" pos:end="37:25">checkdata_present</name> <operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:42"><name pos:start="37:29" pos:end="37:37">get_bits1</name><argument_list pos:start="37:38" pos:end="37:42">(<argument pos:start="37:39" pos:end="37:41"><expr pos:start="37:39" pos:end="37:41"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:24"><expr pos:start="38:9" pos:end="38:23"><call pos:start="38:9" pos:end="38:23"><name pos:start="38:9" pos:end="38:18">skip_bits1</name><argument_list pos:start="38:19" pos:end="38:23">(<argument pos:start="38:20" pos:end="38:22"><expr pos:start="38:20" pos:end="38:22"><operator pos:start="38:20" pos:end="38:20">&amp;</operator><name pos:start="38:21" pos:end="38:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:11">end</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:31"><name pos:start="39:15" pos:end="39:22">get_bits</name><argument_list pos:start="39:23" pos:end="39:31">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><operator pos:start="39:24" pos:end="39:24">&amp;</operator><name pos:start="39:25" pos:end="39:26">gb</name></expr></argument>, <argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><literal type="number" pos:start="39:29" pos:end="39:30">12</literal></expr></argument>)</argument_list></call> <operator pos:start="39:33" pos:end="39:33">*</operator> <literal type="number" pos:start="39:35" pos:end="39:35">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="40:9" pos:end="40:32"><expr pos:start="40:9" pos:end="40:31"><name pos:start="40:9" pos:end="40:26">substr_header_size</name> <operator pos:start="40:28" pos:end="40:29">+=</operator> <literal type="number" pos:start="40:31" pos:end="40:31">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="41:9" pos:end="129:31"><if pos:start="41:9" pos:end="129:31">if <condition pos:start="41:12" pos:end="41:30">(<expr pos:start="41:13" pos:end="41:29"><name pos:start="41:13" pos:end="41:29">extraword_present</name></expr>)</condition> <block pos:start="41:32" pos:end="129:31">{<block_content pos:start="42:13" pos:end="129:31">
            <if_stmt pos:start="42:13" pos:end="129:31"><if pos:start="42:13" pos:end="129:31">if <condition pos:start="42:16" pos:end="42:54">(<expr pos:start="42:17" pos:end="42:53"><name pos:start="42:17" pos:end="42:34"><name pos:start="42:17" pos:end="42:17">m</name><operator pos:start="42:18" pos:end="42:19">-&gt;</operator><name pos:start="42:20" pos:end="42:24">avctx</name><operator pos:start="42:25" pos:end="42:26">-&gt;</operator><name pos:start="42:27" pos:end="42:34">codec_id</name></name> <operator pos:start="42:36" pos:end="42:37">==</operator> <name pos:start="42:39" pos:end="42:53">AV_CODEC_ID_MLP</name></expr>)</condition> <block pos:start="42:56" pos:end="129:31">{<block_content pos:start="43:17" pos:end="129:31">
                <expr_stmt pos:start="43:17" pos:end="43:88"><expr pos:start="43:17" pos:end="43:87"><call pos:start="43:17" pos:end="43:87"><name pos:start="43:17" pos:end="43:22">av_log</name><argument_list pos:start="43:23" pos:end="43:87">(<argument pos:start="43:24" pos:end="43:31"><expr pos:start="43:24" pos:end="43:31"><name pos:start="43:24" pos:end="43:31"><name pos:start="43:24" pos:end="43:24">m</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:31">avctx</name></name></expr></argument>, <argument pos:start="43:34" pos:end="43:45"><expr pos:start="43:34" pos:end="43:45"><name pos:start="43:34" pos:end="43:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:48" pos:end="43:86"><expr pos:start="43:48" pos:end="43:86"><literal type="string" pos:start="43:48" pos:end="43:86">"There must be no extraword for MLP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:31"><expr pos:start="44:13" pos:end="44:30"><call pos:start="44:13" pos:end="44:30"><name pos:start="44:13" pos:end="44:21">skip_bits</name><argument_list pos:start="44:22" pos:end="44:30">(<argument pos:start="44:23" pos:end="44:25"><expr pos:start="44:23" pos:end="44:25"><operator pos:start="44:23" pos:end="44:23">&amp;</operator><name pos:start="44:24" pos:end="44:25">gb</name></expr></argument>, <argument pos:start="44:28" pos:end="44:29"><expr pos:start="44:28" pos:end="44:29"><literal type="number" pos:start="44:28" pos:end="44:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:30">substr_header_size</name> <operator pos:start="45:32" pos:end="45:33">+=</operator> <literal type="number" pos:start="45:35" pos:end="45:35">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="129:31"><if pos:start="46:9" pos:end="129:31">if <condition pos:start="46:12" pos:end="46:57">(<expr pos:start="46:13" pos:end="46:56"><operator pos:start="46:13" pos:end="46:13">!</operator><operator pos:start="46:14" pos:end="46:14">(</operator><name pos:start="46:15" pos:end="46:31">nonrestart_substr</name> <operator pos:start="46:33" pos:end="46:33">^</operator> <name pos:start="46:35" pos:end="46:55"><name pos:start="46:35" pos:end="46:35">m</name><operator pos:start="46:36" pos:end="46:37">-&gt;</operator><name pos:start="46:38" pos:end="46:55">is_major_sync_unit</name></name><operator pos:start="46:56" pos:end="46:56">)</operator></expr>)</condition> <block pos:start="46:59" pos:end="129:31">{<block_content pos:start="47:13" pos:end="129:31">
            <expr_stmt pos:start="47:13" pos:end="47:75"><expr pos:start="47:13" pos:end="47:74"><call pos:start="47:13" pos:end="47:74"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:74">(<argument pos:start="47:20" pos:end="47:27"><expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:20">m</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:27">avctx</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:41"><expr pos:start="47:30" pos:end="47:41"><name pos:start="47:30" pos:end="47:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:44" pos:end="47:73"><expr pos:start="47:44" pos:end="47:73"><literal type="string" pos:start="47:44" pos:end="47:73">"Invalid nonrestart_substr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="48:9" pos:end="129:31"><if pos:start="48:9" pos:end="129:31">if <condition pos:start="48:12" pos:end="48:60">(<expr pos:start="48:13" pos:end="48:59"><name pos:start="48:13" pos:end="48:15">end</name> <operator pos:start="48:17" pos:end="48:17">+</operator> <name pos:start="48:19" pos:end="48:29">header_size</name> <operator pos:start="48:31" pos:end="48:31">+</operator> <name pos:start="48:33" pos:end="48:50">substr_header_size</name> <operator pos:start="48:52" pos:end="48:52">&gt;</operator> <name pos:start="48:54" pos:end="48:59">length</name></expr>)</condition> <block pos:start="48:62" pos:end="129:31">{<block_content pos:start="49:13" pos:end="129:31">
            <expr_stmt pos:start="49:13" pos:end="51:40"><expr pos:start="49:13" pos:end="51:39"><call pos:start="49:13" pos:end="51:39"><name pos:start="49:13" pos:end="49:18">av_log</name><argument_list pos:start="49:19" pos:end="51:39">(<argument pos:start="49:20" pos:end="49:27"><expr pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:27"><name pos:start="49:20" pos:end="49:20">m</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:27">avctx</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:41"><expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:41">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="50:20" pos:end="51:30"><expr pos:start="50:20" pos:end="51:30"><literal type="string" pos:start="50:20" pos:end="50:75">"Indicated length of substream %d data goes off end of "</literal>
                   <literal type="string" pos:start="51:20" pos:end="51:30">"packet.\n"</literal></expr></argument>, <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="52:13" pos:end="52:60"><expr pos:start="52:13" pos:end="52:59"><name pos:start="52:13" pos:end="52:15">end</name> <operator pos:start="52:17" pos:end="52:17">=</operator> <name pos:start="52:19" pos:end="52:24">length</name> <operator pos:start="52:26" pos:end="52:26">-</operator> <name pos:start="52:28" pos:end="52:38">header_size</name> <operator pos:start="52:40" pos:end="52:40">-</operator> <name pos:start="52:42" pos:end="52:59">substr_header_size</name></expr>;</expr_stmt>
        <if_stmt pos:start="53:9" pos:end="129:31"><if pos:start="53:9" pos:end="129:31">if <condition pos:start="53:12" pos:end="53:34">(<expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:15">end</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <name pos:start="53:19" pos:end="53:33">substream_start</name></expr>)</condition> <block pos:start="53:36" pos:end="129:31">{<block_content pos:start="54:13" pos:end="129:31">
            <expr_stmt pos:start="54:13" pos:end="57:27"><expr pos:start="54:13" pos:end="57:26"><call pos:start="54:13" pos:end="57:26"><name pos:start="54:13" pos:end="54:18">av_log</name><argument_list pos:start="54:19" pos:end="57:26">(<argument pos:start="54:20" pos:end="54:24"><expr pos:start="54:20" pos:end="54:24"><name pos:start="54:20" pos:end="54:24">avctx</name></expr></argument>, <argument pos:start="54:27" pos:end="54:38"><expr pos:start="54:27" pos:end="54:38"><name pos:start="54:27" pos:end="54:38">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="55:20" pos:end="56:63"><expr pos:start="55:20" pos:end="56:63"><literal type="string" pos:start="55:20" pos:end="55:63">"Indicated end offset of substream %d data "</literal>
                   <literal type="string" pos:start="56:20" pos:end="56:63">"is smaller than calculated start offset.\n"</literal></expr></argument>,
                   <argument pos:start="57:20" pos:end="57:25"><expr pos:start="57:20" pos:end="57:25"><name pos:start="57:20" pos:end="57:25">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="58:9" pos:end="59:21"><if pos:start="58:9" pos:end="59:21">if <condition pos:start="58:12" pos:end="58:46">(<expr pos:start="58:13" pos:end="58:45"><name pos:start="58:13" pos:end="58:18">substr</name> <operator pos:start="58:20" pos:end="58:20">&gt;</operator> <name pos:start="58:22" pos:end="58:45"><name pos:start="58:22" pos:end="58:22">m</name><operator pos:start="58:23" pos:end="58:24">-&gt;</operator><name pos:start="58:25" pos:end="58:45">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">
            <continue pos:start="59:13" pos:end="59:21">continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:61"><expr pos:start="60:9" pos:end="60:60"><name pos:start="60:9" pos:end="60:40"><name pos:start="60:9" pos:end="60:32">substream_parity_present</name><index pos:start="60:33" pos:end="60:40">[<expr pos:start="60:34" pos:end="60:39"><name pos:start="60:34" pos:end="60:39">substr</name></expr>]</index></name> <operator pos:start="60:42" pos:end="60:42">=</operator> <name pos:start="60:44" pos:end="60:60">checkdata_present</name></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:59"><expr pos:start="61:9" pos:end="61:58"><name pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:26">substream_data_len</name><index pos:start="61:27" pos:end="61:34">[<expr pos:start="61:28" pos:end="61:33"><name pos:start="61:28" pos:end="61:33">substr</name></expr>]</index></name> <operator pos:start="61:36" pos:end="61:36">=</operator> <name pos:start="61:38" pos:end="61:40">end</name> <operator pos:start="61:42" pos:end="61:42">-</operator> <name pos:start="61:44" pos:end="61:58">substream_start</name></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="62:30"><expr pos:start="62:9" pos:end="62:29"><name pos:start="62:9" pos:end="62:23">substream_start</name> <operator pos:start="62:25" pos:end="62:25">=</operator> <name pos:start="62:27" pos:end="62:29">end</name></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:51"><expr pos:start="63:5" pos:end="63:50"><name pos:start="63:5" pos:end="63:15">parity_bits</name>  <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:50"><name pos:start="63:20" pos:end="63:42">ff_mlp_calculate_parity</name><argument_list pos:start="63:43" pos:end="63:50">(<argument pos:start="63:44" pos:end="63:46"><expr pos:start="63:44" pos:end="63:46"><name pos:start="63:44" pos:end="63:46">buf</name></expr></argument>, <argument pos:start="63:49" pos:end="63:49"><expr pos:start="63:49" pos:end="63:49"><literal type="number" pos:start="63:49" pos:end="63:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:82"><expr pos:start="64:5" pos:end="64:81"><name pos:start="64:5" pos:end="64:15">parity_bits</name> <operator pos:start="64:17" pos:end="64:18">^=</operator> <call pos:start="64:20" pos:end="64:81"><name pos:start="64:20" pos:end="64:42">ff_mlp_calculate_parity</name><argument_list pos:start="64:43" pos:end="64:81">(<argument pos:start="64:44" pos:end="64:60"><expr pos:start="64:44" pos:end="64:60"><name pos:start="64:44" pos:end="64:46">buf</name> <operator pos:start="64:48" pos:end="64:48">+</operator> <name pos:start="64:50" pos:end="64:60">header_size</name></expr></argument>, <argument pos:start="64:63" pos:end="64:80"><expr pos:start="64:63" pos:end="64:80"><name pos:start="64:63" pos:end="64:80">substr_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="65:5" pos:end="129:31"><if pos:start="65:5" pos:end="129:31">if <condition pos:start="65:8" pos:end="65:58">(<expr pos:start="65:9" pos:end="65:57"><operator pos:start="65:9" pos:end="65:9">(</operator><operator pos:start="65:10" pos:end="65:10">(</operator><operator pos:start="65:11" pos:end="65:11">(</operator><name pos:start="65:12" pos:end="65:22">parity_bits</name> <operator pos:start="65:24" pos:end="65:25">&gt;&gt;</operator> <literal type="number" pos:start="65:27" pos:end="65:27">4</literal><operator pos:start="65:28" pos:end="65:28">)</operator> <operator pos:start="65:30" pos:end="65:30">^</operator> <name pos:start="65:32" pos:end="65:42">parity_bits</name><operator pos:start="65:43" pos:end="65:43">)</operator> <operator pos:start="65:45" pos:end="65:45">&amp;</operator> <literal type="number" pos:start="65:47" pos:end="65:49">0xF</literal><operator pos:start="65:50" pos:end="65:50">)</operator> <operator pos:start="65:52" pos:end="65:53">!=</operator> <literal type="number" pos:start="65:55" pos:end="65:57">0xF</literal></expr>)</condition> <block pos:start="65:60" pos:end="129:31">{<block_content pos:start="66:9" pos:end="129:31">
        <expr_stmt pos:start="66:9" pos:end="66:62"><expr pos:start="66:9" pos:end="66:61"><call pos:start="66:9" pos:end="66:61"><name pos:start="66:9" pos:end="66:14">av_log</name><argument_list pos:start="66:15" pos:end="66:61">(<argument pos:start="66:16" pos:end="66:20"><expr pos:start="66:16" pos:end="66:20"><name pos:start="66:16" pos:end="66:20">avctx</name></expr></argument>, <argument pos:start="66:23" pos:end="66:34"><expr pos:start="66:23" pos:end="66:34"><name pos:start="66:23" pos:end="66:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="66:37" pos:end="66:60"><expr pos:start="66:37" pos:end="66:60"><literal type="string" pos:start="66:37" pos:end="66:60">"Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:7">buf</name> <operator pos:start="67:9" pos:end="67:10">+=</operator> <name pos:start="67:12" pos:end="67:22">header_size</name> <operator pos:start="67:24" pos:end="67:24">+</operator> <name pos:start="67:26" pos:end="67:43">substr_header_size</name></expr>;</expr_stmt>
    <for pos:start="68:5" pos:end="129:31">for <control pos:start="68:9" pos:end="68:66">(<init pos:start="68:10" pos:end="68:20"><expr pos:start="68:10" pos:end="68:19"><name pos:start="68:10" pos:end="68:15">substr</name> <operator pos:start="68:17" pos:end="68:17">=</operator> <literal type="number" pos:start="68:19" pos:end="68:19">0</literal></expr>;</init> <condition pos:start="68:22" pos:end="68:56"><expr pos:start="68:22" pos:end="68:55"><name pos:start="68:22" pos:end="68:27">substr</name> <operator pos:start="68:29" pos:end="68:30">&lt;=</operator> <name pos:start="68:32" pos:end="68:55"><name pos:start="68:32" pos:end="68:32">m</name><operator pos:start="68:33" pos:end="68:34">-&gt;</operator><name pos:start="68:35" pos:end="68:55">max_decoded_substream</name></name></expr>;</condition> <incr pos:start="68:58" pos:end="68:65"><expr pos:start="68:58" pos:end="68:65"><name pos:start="68:58" pos:end="68:63">substr</name><operator pos:start="68:64" pos:end="68:65">++</operator></expr></incr>)</control> <block pos:start="68:68" pos:end="129:31">{<block_content pos:start="69:9" pos:end="129:31">
        <decl_stmt pos:start="69:9" pos:end="69:45"><decl pos:start="69:9" pos:end="69:44"><type pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:17">SubStream</name> <modifier pos:start="69:19" pos:end="69:19">*</modifier></type><name pos:start="69:20" pos:end="69:20">s</name> <init pos:start="69:22" pos:end="69:44">= <expr pos:start="69:24" pos:end="69:44"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:44"><name pos:start="69:25" pos:end="69:25">m</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:36">substream</name><index pos:start="69:37" pos:end="69:44">[<expr pos:start="69:38" pos:end="69:43"><name pos:start="69:38" pos:end="69:43">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:64"><expr pos:start="70:9" pos:end="70:63"><call pos:start="70:9" pos:end="70:63"><name pos:start="70:9" pos:end="70:21">init_get_bits</name><argument_list pos:start="70:22" pos:end="70:63">(<argument pos:start="70:23" pos:end="70:25"><expr pos:start="70:23" pos:end="70:25"><operator pos:start="70:23" pos:end="70:23">&amp;</operator><name pos:start="70:24" pos:end="70:25">gb</name></expr></argument>, <argument pos:start="70:28" pos:end="70:30"><expr pos:start="70:28" pos:end="70:30"><name pos:start="70:28" pos:end="70:30">buf</name></expr></argument>, <argument pos:start="70:33" pos:end="70:62"><expr pos:start="70:33" pos:end="70:62"><name pos:start="70:33" pos:end="70:58"><name pos:start="70:33" pos:end="70:50">substream_data_len</name><index pos:start="70:51" pos:end="70:58">[<expr pos:start="70:52" pos:end="70:57"><name pos:start="70:52" pos:end="70:57">substr</name></expr>]</index></name> <operator pos:start="70:60" pos:end="70:60">*</operator> <literal type="number" pos:start="70:62" pos:end="70:62">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:9">m</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:25">matrix_changed</name></name> <operator pos:start="71:27" pos:end="71:27">=</operator> <literal type="number" pos:start="71:29" pos:end="71:29">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="72:9" pos:end="72:64"><expr pos:start="72:9" pos:end="72:63"><call pos:start="72:9" pos:end="72:63"><name pos:start="72:9" pos:end="72:14">memset</name><argument_list pos:start="72:15" pos:end="72:63">(<argument pos:start="72:16" pos:end="72:32"><expr pos:start="72:16" pos:end="72:32"><name pos:start="72:16" pos:end="72:32"><name pos:start="72:16" pos:end="72:16">m</name><operator pos:start="72:17" pos:end="72:18">-&gt;</operator><name pos:start="72:19" pos:end="72:32">filter_changed</name></name></expr></argument>, <argument pos:start="72:35" pos:end="72:35"><expr pos:start="72:35" pos:end="72:35"><literal type="number" pos:start="72:35" pos:end="72:35">0</literal></expr></argument>, <argument pos:start="72:38" pos:end="72:62"><expr pos:start="72:38" pos:end="72:62"><sizeof pos:start="72:38" pos:end="72:62">sizeof<argument_list pos:start="72:44" pos:end="72:62">(<argument pos:start="72:45" pos:end="72:61"><expr pos:start="72:45" pos:end="72:61"><name pos:start="72:45" pos:end="72:61"><name pos:start="72:45" pos:end="72:45">m</name><operator pos:start="72:46" pos:end="72:47">-&gt;</operator><name pos:start="72:48" pos:end="72:61">filter_changed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:19">blockpos</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>;</expr_stmt>
        <do pos:start="74:9" pos:end="129:31">do <block pos:start="74:12" pos:end="129:31">{<block_content pos:start="75:13" pos:end="129:31">
            <if_stmt pos:start="75:13" pos:end="129:31"><if pos:start="75:13" pos:end="129:31">if <condition pos:start="75:16" pos:end="75:31">(<expr pos:start="75:17" pos:end="75:30"><call pos:start="75:17" pos:end="75:30"><name pos:start="75:17" pos:end="75:25">get_bits1</name><argument_list pos:start="75:26" pos:end="75:30">(<argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><operator pos:start="75:27" pos:end="75:27">&amp;</operator><name pos:start="75:28" pos:end="75:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:33" pos:end="129:31">{<block_content pos:start="76:17" pos:end="129:31">
                <if_stmt pos:start="76:17" pos:end="91:9"><if pos:start="76:17" pos:end="91:9">if <condition pos:start="76:20" pos:end="76:35">(<expr pos:start="76:21" pos:end="76:34"><call pos:start="76:21" pos:end="76:34"><name pos:start="76:21" pos:end="76:29">get_bits1</name><argument_list pos:start="76:30" pos:end="76:34">(<argument pos:start="76:31" pos:end="76:33"><expr pos:start="76:31" pos:end="76:33"><operator pos:start="76:31" pos:end="76:31">&amp;</operator><name pos:start="76:32" pos:end="76:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="76:37" pos:end="91:9">{<block_content pos:start="78:21" pos:end="90:47">
                    <comment type="block" pos:start="77:21" pos:end="77:61">/* A restart header should be present. */</comment>
                    <if_stmt pos:start="78:21" pos:end="79:41"><if pos:start="78:21" pos:end="79:41">if <condition pos:start="78:24" pos:end="78:69">(<expr pos:start="78:25" pos:end="78:68"><call pos:start="78:25" pos:end="78:64"><name pos:start="78:25" pos:end="78:43">read_restart_header</name><argument_list pos:start="78:44" pos:end="78:64">(<argument pos:start="78:45" pos:end="78:45"><expr pos:start="78:45" pos:end="78:45"><name pos:start="78:45" pos:end="78:45">m</name></expr></argument>, <argument pos:start="78:48" pos:end="78:50"><expr pos:start="78:48" pos:end="78:50"><operator pos:start="78:48" pos:end="78:48">&amp;</operator><name pos:start="78:49" pos:end="78:50">gb</name></expr></argument>, <argument pos:start="78:53" pos:end="78:55"><expr pos:start="78:53" pos:end="78:55"><name pos:start="78:53" pos:end="78:55">buf</name></expr></argument>, <argument pos:start="78:58" pos:end="78:63"><expr pos:start="78:58" pos:end="78:63"><name pos:start="78:58" pos:end="78:63">substr</name></expr></argument>)</argument_list></call> <operator pos:start="78:66" pos:end="78:66">&lt;</operator> <literal type="number" pos:start="78:68" pos:end="78:68">0</literal></expr>)</condition><block type="pseudo" pos:start="79:25" pos:end="79:41"><block_content pos:start="79:25" pos:end="79:41">
                        <goto pos:start="79:25" pos:end="79:41">goto <name pos:start="79:30" pos:end="79:40">next_substr</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="80:21" pos:end="80:40"><expr pos:start="80:21" pos:end="80:39"><name pos:start="80:21" pos:end="80:35"><name pos:start="80:21" pos:end="80:21">s</name><operator pos:start="80:22" pos:end="80:23">-&gt;</operator><name pos:start="80:24" pos:end="80:35">restart_seen</name></name> <operator pos:start="80:37" pos:end="80:37">=</operator> <literal type="number" pos:start="80:39" pos:end="80:39">1</literal></expr>;</expr_stmt>
                <if_stmt pos:start="81:17" pos:end="82:37"><if pos:start="81:17" pos:end="82:37">if <condition pos:start="81:20" pos:end="81:37">(<expr pos:start="81:21" pos:end="81:36"><operator pos:start="81:21" pos:end="81:21">!</operator><name pos:start="81:22" pos:end="81:36"><name pos:start="81:22" pos:end="81:22">s</name><operator pos:start="81:23" pos:end="81:24">-&gt;</operator><name pos:start="81:25" pos:end="81:36">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="82:21" pos:end="82:37"><block_content pos:start="82:21" pos:end="82:37">
                    <goto pos:start="82:21" pos:end="82:37">goto <name pos:start="82:26" pos:end="82:36">next_substr</name>;</goto></block_content></block></if></if_stmt>
                <if_stmt pos:start="83:17" pos:end="84:37"><if pos:start="83:17" pos:end="84:37">if <condition pos:start="83:20" pos:end="83:61">(<expr pos:start="83:21" pos:end="83:60"><call pos:start="83:21" pos:end="83:56"><name pos:start="83:21" pos:end="83:40">read_decoding_params</name><argument_list pos:start="83:41" pos:end="83:56">(<argument pos:start="83:42" pos:end="83:42"><expr pos:start="83:42" pos:end="83:42"><name pos:start="83:42" pos:end="83:42">m</name></expr></argument>, <argument pos:start="83:45" pos:end="83:47"><expr pos:start="83:45" pos:end="83:47"><operator pos:start="83:45" pos:end="83:45">&amp;</operator><name pos:start="83:46" pos:end="83:47">gb</name></expr></argument>, <argument pos:start="83:50" pos:end="83:55"><expr pos:start="83:50" pos:end="83:55"><name pos:start="83:50" pos:end="83:55">substr</name></expr></argument>)</argument_list></call> <operator pos:start="83:58" pos:end="83:58">&lt;</operator> <literal type="number" pos:start="83:60" pos:end="83:60">0</literal></expr>)</condition><block type="pseudo" pos:start="84:21" pos:end="84:37"><block_content pos:start="84:21" pos:end="84:37">
                    <goto pos:start="84:21" pos:end="84:37">goto <name pos:start="84:26" pos:end="84:36">next_substr</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt pos:start="85:13" pos:end="86:33"><if pos:start="85:13" pos:end="86:33">if <condition pos:start="85:16" pos:end="85:33">(<expr pos:start="85:17" pos:end="85:32"><operator pos:start="85:17" pos:end="85:17">!</operator><name pos:start="85:18" pos:end="85:32"><name pos:start="85:18" pos:end="85:18">s</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:32">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="86:17" pos:end="86:33"><block_content pos:start="86:17" pos:end="86:33">
                <goto pos:start="86:17" pos:end="86:33">goto <name pos:start="86:22" pos:end="86:32">next_substr</name>;</goto></block_content></block></if></if_stmt>
            <if_stmt pos:start="87:13" pos:end="88:27"><if pos:start="87:13" pos:end="88:27">if <condition pos:start="87:16" pos:end="87:60">(<expr pos:start="87:17" pos:end="87:59"><operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:20">ret</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:54"><name pos:start="87:24" pos:end="87:38">read_block_data</name><argument_list pos:start="87:39" pos:end="87:54">(<argument pos:start="87:40" pos:end="87:40"><expr pos:start="87:40" pos:end="87:40"><name pos:start="87:40" pos:end="87:40">m</name></expr></argument>, <argument pos:start="87:43" pos:end="87:45"><expr pos:start="87:43" pos:end="87:45"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:45">gb</name></expr></argument>, <argument pos:start="87:48" pos:end="87:53"><expr pos:start="87:48" pos:end="87:53"><name pos:start="87:48" pos:end="87:53">substr</name></expr></argument>)</argument_list></call><operator pos:start="87:55" pos:end="87:55">)</operator> <operator pos:start="87:57" pos:end="87:57">&lt;</operator> <literal type="number" pos:start="87:59" pos:end="87:59">0</literal></expr>)</condition><block type="pseudo" pos:start="88:17" pos:end="88:27"><block_content pos:start="88:17" pos:end="88:27">
                <return pos:start="88:17" pos:end="88:27">return <expr pos:start="88:24" pos:end="88:26"><name pos:start="88:24" pos:end="88:26">ret</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt pos:start="89:13" pos:end="90:47"><if pos:start="89:13" pos:end="90:47">if <condition pos:start="89:16" pos:end="89:70">(<expr pos:start="89:17" pos:end="89:69"><call pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:30">get_bits_count</name><argument_list pos:start="89:31" pos:end="89:35">(<argument pos:start="89:32" pos:end="89:34"><expr pos:start="89:32" pos:end="89:34"><operator pos:start="89:32" pos:end="89:32">&amp;</operator><name pos:start="89:33" pos:end="89:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="89:37" pos:end="89:38">&gt;=</operator> <name pos:start="89:40" pos:end="89:65"><name pos:start="89:40" pos:end="89:57">substream_data_len</name><index pos:start="89:58" pos:end="89:65">[<expr pos:start="89:59" pos:end="89:64"><name pos:start="89:59" pos:end="89:64">substr</name></expr>]</index></name> <operator pos:start="89:67" pos:end="89:67">*</operator> <literal type="number" pos:start="89:69" pos:end="89:69">8</literal></expr>)</condition><block type="pseudo" pos:start="90:17" pos:end="90:47"><block_content pos:start="90:17" pos:end="90:47">
                <goto pos:start="90:17" pos:end="90:47">goto <name pos:start="90:22" pos:end="90:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt> <while pos:start="91:11" pos:end="91:34">while <condition pos:start="91:17" pos:end="91:33">(<expr pos:start="91:18" pos:end="91:32"><operator pos:start="91:18" pos:end="91:18">!</operator><call pos:start="91:19" pos:end="91:32"><name pos:start="91:19" pos:end="91:27">get_bits1</name><argument_list pos:start="91:28" pos:end="91:32">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><operator pos:start="91:29" pos:end="91:29">&amp;</operator><name pos:start="91:30" pos:end="91:31">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:34" pos:end="91:34"><block_content pos:start="91:34" pos:end="91:34"><empty_stmt pos:start="91:34" pos:end="91:34">;</empty_stmt></block_content></block></while>
        <expr_stmt pos:start="92:9" pos:end="92:52"><expr pos:start="92:9" pos:end="92:51"><call pos:start="92:9" pos:end="92:51"><name pos:start="92:9" pos:end="92:17">skip_bits</name><argument_list pos:start="92:18" pos:end="92:51">(<argument pos:start="92:19" pos:end="92:21"><expr pos:start="92:19" pos:end="92:21"><operator pos:start="92:19" pos:end="92:19">&amp;</operator><name pos:start="92:20" pos:end="92:21">gb</name></expr></argument>, <argument pos:start="92:24" pos:end="92:50"><expr pos:start="92:24" pos:end="92:50"><operator pos:start="92:24" pos:end="92:24">(</operator><operator pos:start="92:25" pos:end="92:25">-</operator><call pos:start="92:26" pos:end="92:44"><name pos:start="92:26" pos:end="92:39">get_bits_count</name><argument_list pos:start="92:40" pos:end="92:44">(<argument pos:start="92:41" pos:end="92:43"><expr pos:start="92:41" pos:end="92:43"><operator pos:start="92:41" pos:end="92:41">&amp;</operator><name pos:start="92:42" pos:end="92:43">gb</name></expr></argument>)</argument_list></call><operator pos:start="92:45" pos:end="92:45">)</operator> <operator pos:start="92:47" pos:end="92:47">&amp;</operator> <literal type="number" pos:start="92:49" pos:end="92:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="93:9" pos:end="129:31"><if pos:start="93:9" pos:end="129:31">if <condition pos:start="93:12" pos:end="93:71">(<expr pos:start="93:13" pos:end="93:70"><name pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:30">substream_data_len</name><index pos:start="93:31" pos:end="93:38">[<expr pos:start="93:32" pos:end="93:37"><name pos:start="93:32" pos:end="93:37">substr</name></expr>]</index></name> <operator pos:start="93:40" pos:end="93:40">*</operator> <literal type="number" pos:start="93:42" pos:end="93:44">8</literal> <operator pos:start="93:44" pos:end="93:44">-</operator> <call pos:start="93:46" pos:end="93:64"><name pos:start="93:46" pos:end="93:59">get_bits_count</name><argument_list pos:start="93:60" pos:end="93:64">(<argument pos:start="93:61" pos:end="93:63"><expr pos:start="93:61" pos:end="93:63"><operator pos:start="93:61" pos:end="93:61">&amp;</operator><name pos:start="93:62" pos:end="93:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="93:66" pos:end="93:67">&gt;=</operator> <literal type="number" pos:start="93:69" pos:end="93:70">32</literal></expr>)</condition> <block pos:start="93:73" pos:end="129:31">{<block_content pos:start="94:13" pos:end="129:31">
            <decl_stmt pos:start="94:13" pos:end="94:27"><decl pos:start="94:13" pos:end="94:26"><type pos:start="94:13" pos:end="94:15"><name pos:start="94:13" pos:end="94:15">int</name></type> <name pos:start="94:17" pos:end="94:26">shorten_by</name></decl>;</decl_stmt>
            <if_stmt pos:start="95:13" pos:end="96:43"><if pos:start="95:13" pos:end="96:43">if <condition pos:start="95:16" pos:end="95:44">(<expr pos:start="95:17" pos:end="95:43"><call pos:start="95:17" pos:end="95:33"><name pos:start="95:17" pos:end="95:24">get_bits</name><argument_list pos:start="95:25" pos:end="95:33">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:28">gb</name></expr></argument>, <argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><literal type="number" pos:start="95:31" pos:end="95:32">16</literal></expr></argument>)</argument_list></call> <operator pos:start="95:35" pos:end="95:36">!=</operator> <literal type="number" pos:start="95:38" pos:end="95:43">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="96:17" pos:end="96:43"><block_content pos:start="96:17" pos:end="96:43">
                <return pos:start="96:17" pos:end="96:43">return <expr pos:start="96:24" pos:end="96:42"><name pos:start="96:24" pos:end="96:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="97:13" pos:end="97:43"><expr pos:start="97:13" pos:end="97:42"><name pos:start="97:13" pos:end="97:22">shorten_by</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:42"><name pos:start="97:26" pos:end="97:33">get_bits</name><argument_list pos:start="97:34" pos:end="97:42">(<argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><operator pos:start="97:35" pos:end="97:35">&amp;</operator><name pos:start="97:36" pos:end="97:37">gb</name></expr></argument>, <argument pos:start="97:40" pos:end="97:41"><expr pos:start="97:40" pos:end="97:41"><literal type="number" pos:start="97:40" pos:end="97:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="98:13" pos:end="101:43"><if pos:start="98:13" pos:end="99:71">if      <condition pos:start="98:21" pos:end="98:86">(<expr pos:start="98:22" pos:end="98:85"><name pos:start="98:22" pos:end="98:39"><name pos:start="98:22" pos:end="98:22">m</name><operator pos:start="98:23" pos:end="98:24">-&gt;</operator><name pos:start="98:25" pos:end="98:29">avctx</name><operator pos:start="98:30" pos:end="98:31">-&gt;</operator><name pos:start="98:32" pos:end="98:39">codec_id</name></name> <operator pos:start="98:41" pos:end="98:42">==</operator> <name pos:start="98:44" pos:end="98:61">AV_CODEC_ID_TRUEHD</name> <operator pos:start="98:63" pos:end="98:64">&amp;&amp;</operator> <name pos:start="98:66" pos:end="98:75">shorten_by</name>  <operator pos:start="98:78" pos:end="98:78">&amp;</operator> <literal type="number" pos:start="98:80" pos:end="98:85">0x2000</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:71"><block_content pos:start="99:17" pos:end="99:71">
                <expr_stmt pos:start="99:17" pos:end="99:71"><expr pos:start="99:17" pos:end="99:70"><name pos:start="99:17" pos:end="99:27"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:27">blockpos</name></name> <operator pos:start="99:29" pos:end="99:30">-=</operator> <call pos:start="99:32" pos:end="99:70"><name pos:start="99:32" pos:end="99:36">FFMIN</name><argument_list pos:start="99:37" pos:end="99:70">(<argument pos:start="99:38" pos:end="99:56"><expr pos:start="99:38" pos:end="99:56"><name pos:start="99:38" pos:end="99:47">shorten_by</name> <operator pos:start="99:49" pos:end="99:49">&amp;</operator> <literal type="number" pos:start="99:51" pos:end="99:56">0x1FFF</literal></expr></argument>, <argument pos:start="99:59" pos:end="99:69"><expr pos:start="99:59" pos:end="99:69"><name pos:start="99:59" pos:end="99:69"><name pos:start="99:59" pos:end="99:59">s</name><operator pos:start="99:60" pos:end="99:61">-&gt;</operator><name pos:start="99:62" pos:end="99:69">blockpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="100:13" pos:end="101:43">else if <condition pos:start="100:21" pos:end="100:86">(<expr pos:start="100:22" pos:end="100:85"><name pos:start="100:22" pos:end="100:39"><name pos:start="100:22" pos:end="100:22">m</name><operator pos:start="100:23" pos:end="100:24">-&gt;</operator><name pos:start="100:25" pos:end="100:29">avctx</name><operator pos:start="100:30" pos:end="100:31">-&gt;</operator><name pos:start="100:32" pos:end="100:39">codec_id</name></name> <operator pos:start="100:41" pos:end="100:42">==</operator> <name pos:start="100:44" pos:end="100:58">AV_CODEC_ID_MLP</name>    <operator pos:start="100:63" pos:end="100:64">&amp;&amp;</operator> <name pos:start="100:66" pos:end="100:75">shorten_by</name> <operator pos:start="100:77" pos:end="100:78">!=</operator> <literal type="number" pos:start="100:80" pos:end="100:85">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:43"><block_content pos:start="101:17" pos:end="101:43">
                <return pos:start="101:17" pos:end="101:43">return <expr pos:start="101:24" pos:end="101:42"><name pos:start="101:24" pos:end="101:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt pos:start="102:13" pos:end="103:76"><if pos:start="102:13" pos:end="103:76">if <condition pos:start="102:16" pos:end="102:51">(<expr pos:start="102:17" pos:end="102:50"><name pos:start="102:17" pos:end="102:22">substr</name> <operator pos:start="102:24" pos:end="102:25">==</operator> <name pos:start="102:27" pos:end="102:50"><name pos:start="102:27" pos:end="102:27">m</name><operator pos:start="102:28" pos:end="102:29">-&gt;</operator><name pos:start="102:30" pos:end="102:50">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:76"><block_content pos:start="103:17" pos:end="103:76">
                <expr_stmt pos:start="103:17" pos:end="103:76"><expr pos:start="103:17" pos:end="103:75"><call pos:start="103:17" pos:end="103:75"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:75">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:24">m</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:31">avctx</name></name></expr></argument>, <argument pos:start="103:34" pos:end="103:44"><expr pos:start="103:34" pos:end="103:44"><name pos:start="103:34" pos:end="103:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="103:47" pos:end="103:74"><expr pos:start="103:47" pos:end="103:74"><literal type="string" pos:start="103:47" pos:end="103:74">"End of stream indicated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="104:9" pos:end="129:31"><if pos:start="104:9" pos:end="129:31">if <condition pos:start="104:12" pos:end="104:45">(<expr pos:start="104:13" pos:end="104:44"><name pos:start="104:13" pos:end="104:44"><name pos:start="104:13" pos:end="104:36">substream_parity_present</name><index pos:start="104:37" pos:end="104:44">[<expr pos:start="104:38" pos:end="104:43"><name pos:start="104:38" pos:end="104:43">substr</name></expr>]</index></name></expr>)</condition> <block pos:start="104:47" pos:end="129:31">{<block_content pos:start="105:13" pos:end="129:31">
            <decl_stmt pos:start="105:13" pos:end="105:37"><decl pos:start="105:13" pos:end="105:26"><type pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:19">uint8_t</name></type> <name pos:start="105:21" pos:end="105:26">parity</name></decl>, <decl pos:start="105:29" pos:end="105:36"><type ref="prev" pos:start="105:13" pos:end="105:19"/><name pos:start="105:29" pos:end="105:36">checksum</name></decl>;</decl_stmt>
            <if_stmt pos:start="106:13" pos:end="107:47"><if pos:start="106:13" pos:end="107:47">if <condition pos:start="106:16" pos:end="106:75">(<expr pos:start="106:17" pos:end="106:74"><name pos:start="106:17" pos:end="106:42"><name pos:start="106:17" pos:end="106:34">substream_data_len</name><index pos:start="106:35" pos:end="106:42">[<expr pos:start="106:36" pos:end="106:41"><name pos:start="106:36" pos:end="106:41">substr</name></expr>]</index></name> <operator pos:start="106:44" pos:end="106:44">*</operator> <literal type="number" pos:start="106:46" pos:end="106:48">8</literal> <operator pos:start="106:48" pos:end="106:48">-</operator> <call pos:start="106:50" pos:end="106:68"><name pos:start="106:50" pos:end="106:63">get_bits_count</name><argument_list pos:start="106:64" pos:end="106:68">(<argument pos:start="106:65" pos:end="106:67"><expr pos:start="106:65" pos:end="106:67"><operator pos:start="106:65" pos:end="106:65">&amp;</operator><name pos:start="106:66" pos:end="106:67">gb</name></expr></argument>)</argument_list></call> <operator pos:start="106:70" pos:end="106:71">!=</operator> <literal type="number" pos:start="106:73" pos:end="106:74">16</literal></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:47"><block_content pos:start="107:17" pos:end="107:47">
                <goto pos:start="107:17" pos:end="107:47">goto <name pos:start="107:22" pos:end="107:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>
            <expr_stmt pos:start="108:13" pos:end="108:84"><expr pos:start="108:13" pos:end="108:83"><name pos:start="108:13" pos:end="108:18">parity</name>   <operator pos:start="108:22" pos:end="108:22">=</operator> <call pos:start="108:24" pos:end="108:83"><name pos:start="108:24" pos:end="108:46">ff_mlp_calculate_parity</name><argument_list pos:start="108:47" pos:end="108:83">(<argument pos:start="108:48" pos:end="108:50"><expr pos:start="108:48" pos:end="108:50"><name pos:start="108:48" pos:end="108:50">buf</name></expr></argument>, <argument pos:start="108:53" pos:end="108:82"><expr pos:start="108:53" pos:end="108:82"><name pos:start="108:53" pos:end="108:78"><name pos:start="108:53" pos:end="108:70">substream_data_len</name><index pos:start="108:71" pos:end="108:78">[<expr pos:start="108:72" pos:end="108:77"><name pos:start="108:72" pos:end="108:77">substr</name></expr>]</index></name> <operator pos:start="108:80" pos:end="108:80">-</operator> <literal type="number" pos:start="108:82" pos:end="108:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="109:13" pos:end="109:84"><expr pos:start="109:13" pos:end="109:83"><name pos:start="109:13" pos:end="109:20">checksum</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="109:83"><name pos:start="109:24" pos:end="109:39">ff_mlp_checksum8</name>       <argument_list pos:start="109:47" pos:end="109:83">(<argument pos:start="109:48" pos:end="109:50"><expr pos:start="109:48" pos:end="109:50"><name pos:start="109:48" pos:end="109:50">buf</name></expr></argument>, <argument pos:start="109:53" pos:end="109:82"><expr pos:start="109:53" pos:end="109:82"><name pos:start="109:53" pos:end="109:78"><name pos:start="109:53" pos:end="109:70">substream_data_len</name><index pos:start="109:71" pos:end="109:78">[<expr pos:start="109:72" pos:end="109:77"><name pos:start="109:72" pos:end="109:77">substr</name></expr>]</index></name> <operator pos:start="109:80" pos:end="109:80">-</operator> <literal type="number" pos:start="109:82" pos:end="109:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="110:13" pos:end="111:94"><if pos:start="110:13" pos:end="111:94">if <condition pos:start="110:16" pos:end="110:56">(<expr pos:start="110:17" pos:end="110:51"><operator pos:start="110:17" pos:end="110:17">(</operator><call pos:start="110:18" pos:end="110:33"><name pos:start="110:18" pos:end="110:25">get_bits</name><argument_list pos:start="110:26" pos:end="110:33">(<argument pos:start="110:27" pos:end="110:29"><expr pos:start="110:27" pos:end="110:29"><operator pos:start="110:27" pos:end="110:27">&amp;</operator><name pos:start="110:28" pos:end="110:29">gb</name></expr></argument>, <argument pos:start="110:32" pos:end="110:32"><expr pos:start="110:32" pos:end="110:32"><literal type="number" pos:start="110:32" pos:end="110:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="110:35" pos:end="110:35">^</operator> <name pos:start="110:37" pos:end="110:42">parity</name><operator pos:start="110:43" pos:end="110:43">)</operator> <operator pos:start="110:45" pos:end="110:46">!=</operator> <literal type="number" pos:start="110:48" pos:end="110:51">0xa9</literal></expr>    )</condition><block type="pseudo" pos:start="111:17" pos:end="111:94"><block_content pos:start="111:17" pos:end="111:94">
                <expr_stmt pos:start="111:17" pos:end="111:94"><expr pos:start="111:17" pos:end="111:93"><call pos:start="111:17" pos:end="111:93"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:93">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:31"><name pos:start="111:24" pos:end="111:24">m</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:31">avctx</name></name></expr></argument>, <argument pos:start="111:34" pos:end="111:45"><expr pos:start="111:34" pos:end="111:45"><name pos:start="111:34" pos:end="111:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:48" pos:end="111:84"><expr pos:start="111:48" pos:end="111:84"><literal type="string" pos:start="111:48" pos:end="111:84">"Substream %d parity check failed.\n"</literal></expr></argument>, <argument pos:start="111:87" pos:end="111:92"><expr pos:start="111:87" pos:end="111:92"><name pos:start="111:87" pos:end="111:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="112:13" pos:end="113:94"><if pos:start="112:13" pos:end="113:94">if <condition pos:start="112:16" pos:end="112:56">( <expr pos:start="112:18" pos:end="112:55"><call pos:start="112:18" pos:end="112:33"><name pos:start="112:18" pos:end="112:25">get_bits</name><argument_list pos:start="112:26" pos:end="112:33">(<argument pos:start="112:27" pos:end="112:29"><expr pos:start="112:27" pos:end="112:29"><operator pos:start="112:27" pos:end="112:27">&amp;</operator><name pos:start="112:28" pos:end="112:29">gb</name></expr></argument>, <argument pos:start="112:32" pos:end="112:32"><expr pos:start="112:32" pos:end="112:32"><literal type="number" pos:start="112:32" pos:end="112:32">8</literal></expr></argument>)</argument_list></call>           <operator pos:start="112:45" pos:end="112:46">!=</operator> <name pos:start="112:48" pos:end="112:55">checksum</name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:94"><block_content pos:start="113:17" pos:end="113:94">
                <expr_stmt pos:start="113:17" pos:end="113:94"><expr pos:start="113:17" pos:end="113:93"><call pos:start="113:17" pos:end="113:93"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="113:93">(<argument pos:start="113:24" pos:end="113:31"><expr pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:24">m</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:31">avctx</name></name></expr></argument>, <argument pos:start="113:34" pos:end="113:45"><expr pos:start="113:34" pos:end="113:45"><name pos:start="113:34" pos:end="113:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:48" pos:end="113:80"><expr pos:start="113:48" pos:end="113:80"><literal type="string" pos:start="113:48" pos:end="113:80">"Substream %d checksum failed.\n"</literal></expr></argument>    , <argument pos:start="113:87" pos:end="113:92"><expr pos:start="113:87" pos:end="113:92"><name pos:start="113:87" pos:end="113:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="114:9" pos:end="115:43"><if pos:start="114:9" pos:end="115:43">if <condition pos:start="114:12" pos:end="114:66">(<expr pos:start="114:13" pos:end="114:65"><name pos:start="114:13" pos:end="114:38"><name pos:start="114:13" pos:end="114:30">substream_data_len</name><index pos:start="114:31" pos:end="114:38">[<expr pos:start="114:32" pos:end="114:37"><name pos:start="114:32" pos:end="114:37">substr</name></expr>]</index></name> <operator pos:start="114:40" pos:end="114:40">*</operator> <literal type="number" pos:start="114:42" pos:end="114:42">8</literal> <operator pos:start="114:44" pos:end="114:45">!=</operator> <call pos:start="114:47" pos:end="114:65"><name pos:start="114:47" pos:end="114:60">get_bits_count</name><argument_list pos:start="114:61" pos:end="114:65">(<argument pos:start="114:62" pos:end="114:64"><expr pos:start="114:62" pos:end="114:64"><operator pos:start="114:62" pos:end="114:62">&amp;</operator><name pos:start="114:63" pos:end="114:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:43"><block_content pos:start="115:13" pos:end="115:43">
            <goto pos:start="115:13" pos:end="115:43">goto <name pos:start="115:18" pos:end="115:42">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>
<label pos:start="116:1" pos:end="116:12"><name pos:start="116:1" pos:end="116:11">next_substr</name>:</label>
        <if_stmt pos:start="117:9" pos:end="119:75"><if pos:start="117:9" pos:end="119:75">if <condition pos:start="117:12" pos:end="117:29">(<expr pos:start="117:13" pos:end="117:28"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:28"><name pos:start="117:14" pos:end="117:14">s</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:28">restart_seen</name></name></expr>)</condition><block type="pseudo" pos:start="118:13" pos:end="119:75"><block_content pos:start="118:13" pos:end="119:75">
            <expr_stmt pos:start="118:13" pos:end="119:75"><expr pos:start="118:13" pos:end="119:74"><call pos:start="118:13" pos:end="119:74"><name pos:start="118:13" pos:end="118:18">av_log</name><argument_list pos:start="118:19" pos:end="119:74">(<argument pos:start="118:20" pos:end="118:27"><expr pos:start="118:20" pos:end="118:27"><name pos:start="118:20" pos:end="118:27"><name pos:start="118:20" pos:end="118:20">m</name><operator pos:start="118:21" pos:end="118:22">-&gt;</operator><name pos:start="118:23" pos:end="118:27">avctx</name></name></expr></argument>, <argument pos:start="118:30" pos:end="118:41"><expr pos:start="118:30" pos:end="118:41"><name pos:start="118:30" pos:end="118:41">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="119:20" pos:end="119:65"><expr pos:start="119:20" pos:end="119:65"><literal type="string" pos:start="119:20" pos:end="119:65">"No restart header present in substream %d.\n"</literal></expr></argument>, <argument pos:start="119:68" pos:end="119:73"><expr pos:start="119:68" pos:end="119:73"><name pos:start="119:68" pos:end="119:73">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="120:9" pos:end="120:42"><expr pos:start="120:9" pos:end="120:41"><name pos:start="120:9" pos:end="120:11">buf</name> <operator pos:start="120:13" pos:end="120:14">+=</operator> <name pos:start="120:16" pos:end="120:41"><name pos:start="120:16" pos:end="120:33">substream_data_len</name><index pos:start="120:34" pos:end="120:41">[<expr pos:start="120:35" pos:end="120:40"><name pos:start="120:35" pos:end="120:40">substr</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="121:5" pos:end="122:19"><if pos:start="121:5" pos:end="122:19">if <condition pos:start="121:8" pos:end="121:82">(<expr pos:start="121:9" pos:end="121:81"><operator pos:start="121:9" pos:end="121:9">(</operator><name pos:start="121:10" pos:end="121:12">ret</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <call pos:start="121:16" pos:end="121:76"><name pos:start="121:16" pos:end="121:26">output_data</name><argument_list pos:start="121:27" pos:end="121:76">(<argument pos:start="121:28" pos:end="121:28"><expr pos:start="121:28" pos:end="121:28"><name pos:start="121:28" pos:end="121:28">m</name></expr></argument>, <argument pos:start="121:31" pos:end="121:54"><expr pos:start="121:31" pos:end="121:54"><name pos:start="121:31" pos:end="121:54"><name pos:start="121:31" pos:end="121:31">m</name><operator pos:start="121:32" pos:end="121:33">-&gt;</operator><name pos:start="121:34" pos:end="121:54">max_decoded_substream</name></name></expr></argument>, <argument pos:start="121:57" pos:end="121:60"><expr pos:start="121:57" pos:end="121:60"><name pos:start="121:57" pos:end="121:60">data</name></expr></argument>, <argument pos:start="121:63" pos:end="121:75"><expr pos:start="121:63" pos:end="121:75"><name pos:start="121:63" pos:end="121:75">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="121:77" pos:end="121:77">)</operator> <operator pos:start="121:79" pos:end="121:79">&lt;</operator> <literal type="number" pos:start="121:81" pos:end="121:81">0</literal></expr>)</condition><block type="pseudo" pos:start="122:9" pos:end="122:19"><block_content pos:start="122:9" pos:end="122:19">
        <return pos:start="122:9" pos:end="122:19">return <expr pos:start="122:16" pos:end="122:18"><name pos:start="122:16" pos:end="122:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <return pos:start="123:5" pos:end="123:18">return <expr pos:start="123:12" pos:end="123:17"><name pos:start="123:12" pos:end="123:17">length</name></expr>;</return>
<label pos:start="124:1" pos:end="124:26"><name pos:start="124:1" pos:end="124:25">substream_length_mismatch</name>:</label>
    <expr_stmt pos:start="125:5" pos:end="125:77"><expr pos:start="125:5" pos:end="125:76"><call pos:start="125:5" pos:end="125:76"><name pos:start="125:5" pos:end="125:10">av_log</name><argument_list pos:start="125:11" pos:end="125:76">(<argument pos:start="125:12" pos:end="125:19"><expr pos:start="125:12" pos:end="125:19"><name pos:start="125:12" pos:end="125:19"><name pos:start="125:12" pos:end="125:12">m</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:19">avctx</name></name></expr></argument>, <argument pos:start="125:22" pos:end="125:33"><expr pos:start="125:22" pos:end="125:33"><name pos:start="125:22" pos:end="125:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:36" pos:end="125:67"><expr pos:start="125:36" pos:end="125:67"><literal type="string" pos:start="125:36" pos:end="125:67">"substream %d length mismatch\n"</literal></expr></argument>, <argument pos:start="125:70" pos:end="125:75"><expr pos:start="125:70" pos:end="125:75"><name pos:start="125:70" pos:end="125:75">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="126:5" pos:end="126:31">return <expr pos:start="126:12" pos:end="126:30"><name pos:start="126:12" pos:end="126:30">AVERROR_INVALIDDATA</name></expr>;</return>
<label pos:start="127:1" pos:end="127:6"><name pos:start="127:1" pos:end="127:5">error</name>:</label>
    <expr_stmt pos:start="128:5" pos:end="128:24"><expr pos:start="128:5" pos:end="128:23"><name pos:start="128:5" pos:end="128:19"><name pos:start="128:5" pos:end="128:5">m</name><operator pos:start="128:6" pos:end="128:7">-&gt;</operator><name pos:start="128:8" pos:end="128:19">params_valid</name></name> <operator pos:start="128:21" pos:end="128:21">=</operator> <literal type="number" pos:start="128:23" pos:end="128:23">0</literal></expr>;</expr_stmt>
    <return pos:start="129:5" pos:end="129:31">return <expr pos:start="129:12" pos:end="129:30"><name pos:start="129:12" pos:end="129:30">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></do></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
