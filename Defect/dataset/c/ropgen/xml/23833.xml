<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23833.c" pos:tabs="8"><function pos:start="1:1" pos:end="491:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">ff_rtsp_connect</name><parameter_list pos:start="1:20" pos:end="1:39">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:37"><name pos:start="1:21" pos:end="1:35">AVFormatContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="491:1">{<block_content pos:start="5:5" pos:end="489:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">RTSPState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">rt</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:69"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19"><name pos:start="7:10" pos:end="7:13">host</name><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:22" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:22" pos:end="7:31"><name pos:start="7:22" pos:end="7:25">path</name><index pos:start="7:26" pos:end="7:31">[<expr pos:start="7:27" pos:end="7:30"><literal type="number" pos:start="7:27" pos:end="7:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:34" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:40">tcpname</name><index pos:start="7:41" pos:end="7:46">[<expr pos:start="7:42" pos:end="7:45"><literal type="number" pos:start="7:42" pos:end="7:45">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:49" pos:end="7:57"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:49" pos:end="7:57"><name pos:start="7:49" pos:end="7:51">cmd</name><index pos:start="7:52" pos:end="7:57">[<expr pos:start="7:53" pos:end="7:56"><literal type="number" pos:start="7:53" pos:end="7:56">2048</literal></expr>]</index></name></decl>, <decl pos:start="7:60" pos:end="7:68"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:60" pos:end="7:68"><name pos:start="7:60" pos:end="7:63">auth</name><index pos:start="7:64" pos:end="7:68">[<expr pos:start="7:65" pos:end="7:67"><literal type="number" pos:start="7:65" pos:end="7:67">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:21">option_list</name></decl>, <decl pos:start="9:24" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:30">option</name></decl>, <decl pos:start="9:33" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:10"><modifier pos:start="9:33" pos:end="9:33">*</modifier></type><name pos:start="9:34" pos:end="9:41">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">port</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">err</name></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:25">tcp_fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:21">RTSPMessageHeader</name></type> <name pos:start="13:23" pos:end="13:28">reply1</name> <init pos:start="13:30" pos:end="13:33">= <expr pos:start="13:32" pos:end="13:33"><block pos:start="13:32" pos:end="13:33">{}</block></expr></init></decl>, <decl pos:start="13:36" pos:end="13:51"><type ref="prev" pos:start="13:5" pos:end="13:21"><modifier pos:start="13:36" pos:end="13:36">*</modifier></type><name pos:start="13:37" pos:end="13:41">reply</name> <init pos:start="13:43" pos:end="13:51">= <expr pos:start="13:45" pos:end="13:51"><operator pos:start="13:45" pos:end="13:45">&amp;</operator><name pos:start="13:46" pos:end="13:51">reply1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:28">lower_transport_mask</name> <init pos:start="15:30" pos:end="15:32">= <expr pos:start="15:32" pos:end="15:32"><literal type="number" pos:start="15:32" pos:end="15:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:27"><name pos:start="17:10" pos:end="17:23">real_challenge</name><index pos:start="17:24" pos:end="17:27">[<expr pos:start="17:25" pos:end="17:26"><literal type="number" pos:start="17:25" pos:end="17:26">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:27">sockaddr_storage</name></name></type> <name pos:start="19:29" pos:end="19:32">peer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:37"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">socklen_t</name></type> <name pos:start="21:15" pos:end="21:22">peer_len</name> <init pos:start="21:24" pos:end="21:37">= <expr pos:start="21:26" pos:end="21:37"><sizeof pos:start="21:26" pos:end="21:37">sizeof<argument_list pos:start="21:32" pos:end="21:37">(<argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">peer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:28"><if pos:start="25:5" pos:end="27:28">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:26"><name pos:start="25:10" pos:end="25:24">ff_network_init</name><argument_list pos:start="25:25" pos:end="25:26">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:28"><block_content pos:start="27:9" pos:end="27:28">

        <return pos:start="27:9" pos:end="27:28">return <expr pos:start="27:16" pos:end="27:27"><call pos:start="27:16" pos:end="27:27"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:27">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<label pos:start="29:1" pos:end="29:9"><name pos:start="29:1" pos:end="29:8">redirect</name>:</label>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:6">rt</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:25">control_transport</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:43">RTSP_MODE_PLAIN</name></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:35">/* extract hostname and port */</comment>

    <expr_stmt pos:start="35:5" pos:end="37:77"><expr pos:start="35:5" pos:end="37:76"><call pos:start="35:5" pos:end="37:76"><name pos:start="35:5" pos:end="35:16">av_url_split</name><argument_list pos:start="35:17" pos:end="37:76">(<argument pos:start="35:18" pos:end="35:21"><expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">NULL</name></expr></argument>, <argument pos:start="35:24" pos:end="35:24"><expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr></argument>, <argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">auth</name></expr></argument>, <argument pos:start="35:33" pos:end="35:44"><expr pos:start="35:33" pos:end="35:44"><sizeof pos:start="35:33" pos:end="35:44">sizeof<argument_list pos:start="35:39" pos:end="35:44">(<argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">auth</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="37:18" pos:end="37:21"><expr pos:start="37:18" pos:end="37:21"><name pos:start="37:18" pos:end="37:21">host</name></expr></argument>, <argument pos:start="37:24" pos:end="37:35"><expr pos:start="37:24" pos:end="37:35"><sizeof pos:start="37:24" pos:end="37:35">sizeof<argument_list pos:start="37:30" pos:end="37:35">(<argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><name pos:start="37:31" pos:end="37:34">host</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:38" pos:end="37:42"><expr pos:start="37:38" pos:end="37:42"><operator pos:start="37:38" pos:end="37:38">&amp;</operator><name pos:start="37:39" pos:end="37:42">port</name></expr></argument>, <argument pos:start="37:45" pos:end="37:48"><expr pos:start="37:45" pos:end="37:48"><name pos:start="37:45" pos:end="37:48">path</name></expr></argument>, <argument pos:start="37:51" pos:end="37:62"><expr pos:start="37:51" pos:end="37:62"><sizeof pos:start="37:51" pos:end="37:62">sizeof<argument_list pos:start="37:57" pos:end="37:62">(<argument pos:start="37:58" pos:end="37:61"><expr pos:start="37:58" pos:end="37:61"><name pos:start="37:58" pos:end="37:61">path</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:65" pos:end="37:75"><expr pos:start="37:65" pos:end="37:75"><name pos:start="37:65" pos:end="37:75"><name pos:start="37:65" pos:end="37:65">s</name><operator pos:start="37:66" pos:end="37:67">-&gt;</operator><name pos:start="37:68" pos:end="37:75">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:14">(<expr pos:start="39:9" pos:end="39:13"><operator pos:start="39:9" pos:end="39:9">*</operator><name pos:start="39:10" pos:end="39:13">auth</name></expr>)</condition> <block pos:start="39:16" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:53">

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><call pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:18">av_strlcpy</name><argument_list pos:start="41:19" pos:end="41:52">(<argument pos:start="41:20" pos:end="41:27"><expr pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:21">rt</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:27">auth</name></name></expr></argument>, <argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">auth</name></expr></argument>, <argument pos:start="41:36" pos:end="41:51"><expr pos:start="41:36" pos:end="41:51"><sizeof pos:start="41:36" pos:end="41:51">sizeof<argument_list pos:start="41:42" pos:end="41:51">(<argument pos:start="41:43" pos:end="41:50"><expr pos:start="41:43" pos:end="41:50"><name pos:start="41:43" pos:end="41:50"><name pos:start="41:43" pos:end="41:44">rt</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:50">auth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="47:33"><if pos:start="45:5" pos:end="47:33">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:12">port</name> <operator pos:start="45:14" pos:end="45:14">&lt;</operator> <literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:33"><block_content pos:start="47:9" pos:end="47:33">

        <expr_stmt pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:12">port</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:32">RTSP_DEFAULT_PORT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:28">/* search for options */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:15">option_list</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:36"><name pos:start="53:19" pos:end="53:25">strrchr</name><argument_list pos:start="53:26" pos:end="53:36">(<argument pos:start="53:27" pos:end="53:30"><expr pos:start="53:27" pos:end="53:30"><name pos:start="53:27" pos:end="53:30">path</name></expr></argument>, <argument pos:start="53:33" pos:end="53:35"><expr pos:start="53:33" pos:end="53:35"><literal type="char" pos:start="53:33" pos:end="53:35">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="117:5"><if pos:start="55:5" pos:end="117:5">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:19">option_list</name></expr>)</condition> <block pos:start="55:22" pos:end="117:5">{<block_content pos:start="61:9" pos:end="115:22">

        <comment type="block" pos:start="57:9" pos:end="59:52">/* Strip out the RTSP specific options, write out the rest of

         * the options back into the same string. */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:31"><expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:16">filename</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:30">option_list</name></expr>;</expr_stmt>

        <while pos:start="63:9" pos:end="113:9">while <condition pos:start="63:15" pos:end="63:27">(<expr pos:start="63:16" pos:end="63:26"><name pos:start="63:16" pos:end="63:26">option_list</name></expr>)</condition> <block pos:start="63:29" pos:end="113:9">{<block_content pos:start="67:13" pos:end="111:13">

            <comment type="block" pos:start="65:13" pos:end="65:41">/* move the option pointer */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:18">option</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <operator pos:start="67:22" pos:end="67:23">++</operator><name pos:start="67:24" pos:end="67:34">option_list</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:51"><expr pos:start="69:13" pos:end="69:50"><name pos:start="69:13" pos:end="69:23">option_list</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:50"><name pos:start="69:27" pos:end="69:32">strchr</name><argument_list pos:start="69:33" pos:end="69:50">(<argument pos:start="69:34" pos:end="69:44"><expr pos:start="69:34" pos:end="69:44"><name pos:start="69:34" pos:end="69:44">option_list</name></expr></argument>, <argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><literal type="char" pos:start="69:47" pos:end="69:49">'&amp;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="73:33"><if pos:start="71:13" pos:end="73:33">if <condition pos:start="71:16" pos:end="71:28">(<expr pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:27">option_list</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:33"><block_content pos:start="73:17" pos:end="73:33">

                <expr_stmt pos:start="73:17" pos:end="73:33"><expr pos:start="73:17" pos:end="73:32"><operator pos:start="73:17" pos:end="73:17">*</operator><name pos:start="73:18" pos:end="73:28">option_list</name> <operator pos:start="73:30" pos:end="73:30">=</operator> <literal type="number" pos:start="73:32" pos:end="73:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="block" pos:start="77:13" pos:end="77:36">/* handle the options */</comment>

            <if_stmt pos:start="79:13" pos:end="111:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:39">(<expr pos:start="79:17" pos:end="79:38"><operator pos:start="79:17" pos:end="79:17">!</operator><call pos:start="79:18" pos:end="79:38"><name pos:start="79:18" pos:end="79:23">strcmp</name><argument_list pos:start="79:24" pos:end="79:38">(<argument pos:start="79:25" pos:end="79:30"><expr pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:30">option</name></expr></argument>, <argument pos:start="79:33" pos:end="79:37"><expr pos:start="79:33" pos:end="79:37"><literal type="string" pos:start="79:33" pos:end="79:37">"udp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:41" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:71">

                <expr_stmt pos:start="81:17" pos:end="81:71"><expr pos:start="81:17" pos:end="81:70"><name pos:start="81:17" pos:end="81:36">lower_transport_mask</name> <operator pos:start="81:38" pos:end="81:39">|=</operator> <operator pos:start="81:41" pos:end="81:41">(</operator><literal type="number" pos:start="81:42" pos:end="81:42">1</literal><operator pos:start="81:43" pos:end="81:44">&lt;&lt;</operator> <name pos:start="81:46" pos:end="81:69">RTSP_LOWER_TRANSPORT_UDP</name><operator pos:start="81:70" pos:end="81:70">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="83:15" pos:end="87:13">else if <condition pos:start="83:23" pos:end="83:52">(<expr pos:start="83:24" pos:end="83:51"><operator pos:start="83:24" pos:end="83:24">!</operator><call pos:start="83:25" pos:end="83:51"><name pos:start="83:25" pos:end="83:30">strcmp</name><argument_list pos:start="83:31" pos:end="83:51">(<argument pos:start="83:32" pos:end="83:37"><expr pos:start="83:32" pos:end="83:37"><name pos:start="83:32" pos:end="83:37">option</name></expr></argument>, <argument pos:start="83:40" pos:end="83:50"><expr pos:start="83:40" pos:end="83:50"><literal type="string" pos:start="83:40" pos:end="83:50">"multicast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:54" pos:end="87:13">{<block_content pos:start="85:17" pos:end="85:81">

                <expr_stmt pos:start="85:17" pos:end="85:81"><expr pos:start="85:17" pos:end="85:80"><name pos:start="85:17" pos:end="85:36">lower_transport_mask</name> <operator pos:start="85:38" pos:end="85:39">|=</operator> <operator pos:start="85:41" pos:end="85:41">(</operator><literal type="number" pos:start="85:42" pos:end="85:42">1</literal><operator pos:start="85:43" pos:end="85:44">&lt;&lt;</operator> <name pos:start="85:46" pos:end="85:79">RTSP_LOWER_TRANSPORT_UDP_MULTICAST</name><operator pos:start="85:80" pos:end="85:80">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="87:15" pos:end="91:13">else if <condition pos:start="87:23" pos:end="87:46">(<expr pos:start="87:24" pos:end="87:45"><operator pos:start="87:24" pos:end="87:24">!</operator><call pos:start="87:25" pos:end="87:45"><name pos:start="87:25" pos:end="87:30">strcmp</name><argument_list pos:start="87:31" pos:end="87:45">(<argument pos:start="87:32" pos:end="87:37"><expr pos:start="87:32" pos:end="87:37"><name pos:start="87:32" pos:end="87:37">option</name></expr></argument>, <argument pos:start="87:40" pos:end="87:44"><expr pos:start="87:40" pos:end="87:44"><literal type="string" pos:start="87:40" pos:end="87:44">"tcp"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:48" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:71">

                <expr_stmt pos:start="89:17" pos:end="89:71"><expr pos:start="89:17" pos:end="89:70"><name pos:start="89:17" pos:end="89:36">lower_transport_mask</name> <operator pos:start="89:38" pos:end="89:39">|=</operator> <operator pos:start="89:41" pos:end="89:41">(</operator><literal type="number" pos:start="89:42" pos:end="89:42">1</literal><operator pos:start="89:43" pos:end="89:44">&lt;&lt;</operator> <name pos:start="89:46" pos:end="89:69">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="89:70" pos:end="89:70">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="91:15" pos:end="97:13">else if<condition pos:start="91:22" pos:end="91:46">(<expr pos:start="91:23" pos:end="91:45"><operator pos:start="91:23" pos:end="91:23">!</operator><call pos:start="91:24" pos:end="91:45"><name pos:start="91:24" pos:end="91:29">strcmp</name><argument_list pos:start="91:30" pos:end="91:45">(<argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">option</name></expr></argument>, <argument pos:start="91:39" pos:end="91:44"><expr pos:start="91:39" pos:end="91:44"><literal type="string" pos:start="91:39" pos:end="91:44">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:48" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:57">

                <expr_stmt pos:start="93:17" pos:end="93:71"><expr pos:start="93:17" pos:end="93:70"><name pos:start="93:17" pos:end="93:36">lower_transport_mask</name> <operator pos:start="93:38" pos:end="93:39">|=</operator> <operator pos:start="93:41" pos:end="93:41">(</operator><literal type="number" pos:start="93:42" pos:end="93:42">1</literal><operator pos:start="93:43" pos:end="93:44">&lt;&lt;</operator> <name pos:start="93:46" pos:end="93:69">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="93:70" pos:end="93:70">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:57"><expr pos:start="95:17" pos:end="95:56"><name pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:18">rt</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:37">control_transport</name></name> <operator pos:start="95:39" pos:end="95:39">=</operator> <name pos:start="95:41" pos:end="95:56">RTSP_MODE_TUNNEL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="97:15" pos:end="111:13">else <block pos:start="97:20" pos:end="111:13">{<block_content pos:start="103:17" pos:end="109:49">

                <comment type="block" pos:start="99:17" pos:end="101:62">/* Write options back into the buffer, using memmove instead

                 * of strcpy since the strings may overlap. */</comment>

                <decl_stmt pos:start="103:17" pos:end="103:41"><decl pos:start="103:17" pos:end="103:40"><type pos:start="103:17" pos:end="103:19"><name pos:start="103:17" pos:end="103:19">int</name></type> <name pos:start="103:21" pos:end="103:23">len</name> <init pos:start="103:25" pos:end="103:40">= <expr pos:start="103:27" pos:end="103:40"><call pos:start="103:27" pos:end="103:40"><name pos:start="103:27" pos:end="103:32">strlen</name><argument_list pos:start="103:33" pos:end="103:40">(<argument pos:start="103:34" pos:end="103:39"><expr pos:start="103:34" pos:end="103:39"><name pos:start="103:34" pos:end="103:39">option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:49"><expr pos:start="105:17" pos:end="105:48"><call pos:start="105:17" pos:end="105:48"><name pos:start="105:17" pos:end="105:23">memmove</name><argument_list pos:start="105:24" pos:end="105:48">(<argument pos:start="105:25" pos:end="105:34"><expr pos:start="105:25" pos:end="105:34"><operator pos:start="105:25" pos:end="105:26">++</operator><name pos:start="105:27" pos:end="105:34">filename</name></expr></argument>, <argument pos:start="105:37" pos:end="105:42"><expr pos:start="105:37" pos:end="105:42"><name pos:start="105:37" pos:end="105:42">option</name></expr></argument>, <argument pos:start="105:45" pos:end="105:47"><expr pos:start="105:45" pos:end="105:47"><name pos:start="105:45" pos:end="105:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:32"><expr pos:start="107:17" pos:end="107:31"><name pos:start="107:17" pos:end="107:24">filename</name> <operator pos:start="107:26" pos:end="107:27">+=</operator> <name pos:start="107:29" pos:end="107:31">len</name></expr>;</expr_stmt>

                <if_stmt pos:start="109:17" pos:end="109:49"><if pos:start="109:17" pos:end="109:49">if <condition pos:start="109:20" pos:end="109:32">(<expr pos:start="109:21" pos:end="109:31"><name pos:start="109:21" pos:end="109:31">option_list</name></expr>)</condition><block type="pseudo" pos:start="109:34" pos:end="109:49"><block_content pos:start="109:34" pos:end="109:49"> <expr_stmt pos:start="109:34" pos:end="109:49"><expr pos:start="109:34" pos:end="109:48"><operator pos:start="109:34" pos:end="109:34">*</operator><name pos:start="109:35" pos:end="109:42">filename</name> <operator pos:start="109:44" pos:end="109:44">=</operator> <literal type="char" pos:start="109:46" pos:end="109:48">'&amp;'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="115:9" pos:end="115:22"><expr pos:start="115:9" pos:end="115:21"><operator pos:start="115:9" pos:end="115:9">*</operator><name pos:start="115:10" pos:end="115:17">filename</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <literal type="number" pos:start="115:21" pos:end="115:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="121:5" pos:end="123:66"><if pos:start="121:5" pos:end="123:66">if <condition pos:start="121:8" pos:end="121:30">(<expr pos:start="121:9" pos:end="121:29"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:29">lower_transport_mask</name></expr>)</condition><block type="pseudo" pos:start="123:9" pos:end="123:66"><block_content pos:start="123:9" pos:end="123:66">

        <expr_stmt pos:start="123:9" pos:end="123:66"><expr pos:start="123:9" pos:end="123:65"><name pos:start="123:9" pos:end="123:28">lower_transport_mask</name> <operator pos:start="123:30" pos:end="123:30">=</operator> <operator pos:start="123:32" pos:end="123:32">(</operator><literal type="number" pos:start="123:33" pos:end="123:33">1</literal> <operator pos:start="123:35" pos:end="123:36">&lt;&lt;</operator> <name pos:start="123:38" pos:end="123:60">RTSP_LOWER_TRANSPORT_NB</name><operator pos:start="123:61" pos:end="123:61">)</operator> <operator pos:start="123:63" pos:end="123:63">-</operator> <literal type="number" pos:start="123:65" pos:end="123:65">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="147:5"><if pos:start="127:5" pos:end="147:5">if <condition pos:start="127:8" pos:end="127:19">(<expr pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:18">oformat</name></name></expr>)</condition> <block pos:start="127:21" pos:end="147:5">{<block_content pos:start="131:9" pos:end="145:9">

        <comment type="block" pos:start="129:9" pos:end="129:62">/* Only UDP or TCP - UDP multicast isn't supported. */</comment>

        <expr_stmt pos:start="131:9" pos:end="133:64"><expr pos:start="131:9" pos:end="133:63"><name pos:start="131:9" pos:end="131:28">lower_transport_mask</name> <operator pos:start="131:30" pos:end="131:31">&amp;=</operator> <operator pos:start="131:33" pos:end="131:33">(</operator><literal type="number" pos:start="131:34" pos:end="131:34">1</literal> <operator pos:start="131:36" pos:end="131:37">&lt;&lt;</operator> <name pos:start="131:39" pos:end="131:62">RTSP_LOWER_TRANSPORT_UDP</name><operator pos:start="131:63" pos:end="131:63">)</operator> <operator pos:start="131:65" pos:end="131:65">|</operator>

                                <operator pos:start="133:33" pos:end="133:33">(</operator><literal type="number" pos:start="133:34" pos:end="133:34">1</literal> <operator pos:start="133:36" pos:end="133:37">&lt;&lt;</operator> <name pos:start="133:39" pos:end="133:62">RTSP_LOWER_TRANSPORT_TCP</name><operator pos:start="133:63" pos:end="133:63">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="145:9"><if pos:start="135:9" pos:end="145:9">if <condition pos:start="135:12" pos:end="135:79">(<expr pos:start="135:13" pos:end="135:78"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:33">lower_transport_mask</name> <operator pos:start="135:35" pos:end="135:36">||</operator> <name pos:start="135:38" pos:end="135:58"><name pos:start="135:38" pos:end="135:39">rt</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:58">control_transport</name></name> <operator pos:start="135:60" pos:end="135:61">==</operator> <name pos:start="135:63" pos:end="135:78">RTSP_MODE_TUNNEL</name></expr>)</condition> <block pos:start="135:81" pos:end="145:9">{<block_content pos:start="137:13" pos:end="143:22">

            <expr_stmt pos:start="137:13" pos:end="139:84"><expr pos:start="137:13" pos:end="139:83"><call pos:start="137:13" pos:end="139:83"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="139:83">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:34"><expr pos:start="137:23" pos:end="137:34"><name pos:start="137:23" pos:end="137:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:37" pos:end="139:82"><expr pos:start="137:37" pos:end="139:82"><literal type="string" pos:start="137:37" pos:end="137:74">"Unsupported lower transport method, "</literal>

                                    <literal type="string" pos:start="139:37" pos:end="139:82">"only UDP and TCP are supported for output.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:34"><expr pos:start="141:13" pos:end="141:33"><name pos:start="141:13" pos:end="141:15">err</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:33"><name pos:start="141:19" pos:end="141:25">AVERROR</name><argument_list pos:start="141:26" pos:end="141:33">(<argument pos:start="141:27" pos:end="141:32"><expr pos:start="141:27" pos:end="141:32"><name pos:start="141:27" pos:end="141:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="143:13" pos:end="143:22">goto <name pos:start="143:18" pos:end="143:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="155:23">/* Construct the URI used in request; this is similar to s-&gt;filename,

     * but with authentication credentials removed and RTSP specific options

     * stripped out. */</comment>

    <expr_stmt pos:start="157:5" pos:end="159:40"><expr pos:start="157:5" pos:end="159:39"><call pos:start="157:5" pos:end="159:39"><name pos:start="157:5" pos:end="157:15">ff_url_join</name><argument_list pos:start="157:16" pos:end="159:39">(<argument pos:start="157:17" pos:end="157:31"><expr pos:start="157:17" pos:end="157:31"><name pos:start="157:17" pos:end="157:31"><name pos:start="157:17" pos:end="157:18">rt</name><operator pos:start="157:19" pos:end="157:20">-&gt;</operator><name pos:start="157:21" pos:end="157:31">control_uri</name></name></expr></argument>, <argument pos:start="157:34" pos:end="157:56"><expr pos:start="157:34" pos:end="157:56"><sizeof pos:start="157:34" pos:end="157:56">sizeof<argument_list pos:start="157:40" pos:end="157:56">(<argument pos:start="157:41" pos:end="157:55"><expr pos:start="157:41" pos:end="157:55"><name pos:start="157:41" pos:end="157:55"><name pos:start="157:41" pos:end="157:42">rt</name><operator pos:start="157:43" pos:end="157:44">-&gt;</operator><name pos:start="157:45" pos:end="157:55">control_uri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="157:59" pos:end="157:64"><expr pos:start="157:59" pos:end="157:64"><literal type="string" pos:start="157:59" pos:end="157:64">"rtsp"</literal></expr></argument>, <argument pos:start="157:67" pos:end="157:70"><expr pos:start="157:67" pos:end="157:70"><name pos:start="157:67" pos:end="157:70">NULL</name></expr></argument>,

                <argument pos:start="159:17" pos:end="159:20"><expr pos:start="159:17" pos:end="159:20"><name pos:start="159:17" pos:end="159:20">host</name></expr></argument>, <argument pos:start="159:23" pos:end="159:26"><expr pos:start="159:23" pos:end="159:26"><name pos:start="159:23" pos:end="159:26">port</name></expr></argument>, <argument pos:start="159:29" pos:end="159:32"><expr pos:start="159:29" pos:end="159:32"><literal type="string" pos:start="159:29" pos:end="159:32">"%s"</literal></expr></argument>, <argument pos:start="159:35" pos:end="159:38"><expr pos:start="159:35" pos:end="159:38"><name pos:start="159:35" pos:end="159:38">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="163:5" pos:end="323:5"><if pos:start="163:5" pos:end="307:5">if <condition pos:start="163:8" pos:end="163:50">(<expr pos:start="163:9" pos:end="163:49"><name pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:10">rt</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:29">control_transport</name></name> <operator pos:start="163:31" pos:end="163:32">==</operator> <name pos:start="163:34" pos:end="163:49">RTSP_MODE_TUNNEL</name></expr>)</condition> <block pos:start="163:52" pos:end="307:5">{<block_content pos:start="167:9" pos:end="305:9">

        <comment type="block" pos:start="165:9" pos:end="165:52">/* set up initial handshake for tunneling */</comment>

        <decl_stmt pos:start="167:9" pos:end="167:28"><decl pos:start="167:9" pos:end="167:27"><type pos:start="167:9" pos:end="167:12"><name pos:start="167:9" pos:end="167:12">char</name></type> <name pos:start="167:14" pos:end="167:27"><name pos:start="167:14" pos:end="167:21">httpname</name><index pos:start="167:22" pos:end="167:27">[<expr pos:start="167:23" pos:end="167:26"><literal type="number" pos:start="167:23" pos:end="167:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="169:9" pos:end="169:31"><decl pos:start="169:9" pos:end="169:30"><type pos:start="169:9" pos:end="169:12"><name pos:start="169:9" pos:end="169:12">char</name></type> <name pos:start="169:14" pos:end="169:30"><name pos:start="169:14" pos:end="169:26">sessioncookie</name><index pos:start="169:27" pos:end="169:30">[<expr pos:start="169:28" pos:end="169:29"><literal type="number" pos:start="169:28" pos:end="169:29">17</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="171:9" pos:end="171:27"><decl pos:start="171:9" pos:end="171:26"><type pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:12">char</name></type> <name pos:start="171:14" pos:end="171:26"><name pos:start="171:14" pos:end="171:20">headers</name><index pos:start="171:21" pos:end="171:26">[<expr pos:start="171:22" pos:end="171:25"><literal type="number" pos:start="171:22" pos:end="171:25">1024</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:86"><expr pos:start="175:9" pos:end="175:85"><call pos:start="175:9" pos:end="175:85"><name pos:start="175:9" pos:end="175:19">ff_url_join</name><argument_list pos:start="175:20" pos:end="175:85">(<argument pos:start="175:21" pos:end="175:28"><expr pos:start="175:21" pos:end="175:28"><name pos:start="175:21" pos:end="175:28">httpname</name></expr></argument>, <argument pos:start="175:31" pos:end="175:46"><expr pos:start="175:31" pos:end="175:46"><sizeof pos:start="175:31" pos:end="175:46">sizeof<argument_list pos:start="175:37" pos:end="175:46">(<argument pos:start="175:38" pos:end="175:45"><expr pos:start="175:38" pos:end="175:45"><name pos:start="175:38" pos:end="175:45">httpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:49" pos:end="175:54"><expr pos:start="175:49" pos:end="175:54"><literal type="string" pos:start="175:49" pos:end="175:54">"http"</literal></expr></argument>, <argument pos:start="175:57" pos:end="175:60"><expr pos:start="175:57" pos:end="175:60"><name pos:start="175:57" pos:end="175:60">auth</name></expr></argument>, <argument pos:start="175:63" pos:end="175:66"><expr pos:start="175:63" pos:end="175:66"><name pos:start="175:63" pos:end="175:66">host</name></expr></argument>, <argument pos:start="175:69" pos:end="175:72"><expr pos:start="175:69" pos:end="175:72"><name pos:start="175:69" pos:end="175:72">port</name></expr></argument>, <argument pos:start="175:75" pos:end="175:78"><expr pos:start="175:75" pos:end="175:78"><literal type="string" pos:start="175:75" pos:end="175:78">"%s"</literal></expr></argument>, <argument pos:start="175:81" pos:end="175:84"><expr pos:start="175:81" pos:end="175:84"><name pos:start="175:81" pos:end="175:84">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="179:61"><expr pos:start="177:9" pos:end="179:60"><call pos:start="177:9" pos:end="179:60"><name pos:start="177:9" pos:end="177:16">snprintf</name><argument_list pos:start="177:17" pos:end="179:60">(<argument pos:start="177:18" pos:end="177:30"><expr pos:start="177:18" pos:end="177:30"><name pos:start="177:18" pos:end="177:30">sessioncookie</name></expr></argument>, <argument pos:start="177:33" pos:end="177:53"><expr pos:start="177:33" pos:end="177:53"><sizeof pos:start="177:33" pos:end="177:53">sizeof<argument_list pos:start="177:39" pos:end="177:53">(<argument pos:start="177:40" pos:end="177:52"><expr pos:start="177:40" pos:end="177:52"><name pos:start="177:40" pos:end="177:52">sessioncookie</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="177:56" pos:end="177:65"><expr pos:start="177:56" pos:end="177:65"><literal type="string" pos:start="177:56" pos:end="177:65">"%08x%08x"</literal></expr></argument>,

                 <argument pos:start="179:18" pos:end="179:37"><expr pos:start="179:18" pos:end="179:37"><call pos:start="179:18" pos:end="179:37"><name pos:start="179:18" pos:end="179:35">av_get_random_seed</name><argument_list pos:start="179:36" pos:end="179:37">()</argument_list></call></expr></argument>, <argument pos:start="179:40" pos:end="179:59"><expr pos:start="179:40" pos:end="179:59"><call pos:start="179:40" pos:end="179:59"><name pos:start="179:40" pos:end="179:57">av_get_random_seed</name><argument_list pos:start="179:58" pos:end="179:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="183:9" pos:end="183:26">/* GET requests */</comment>

        <if_stmt pos:start="185:9" pos:end="191:9"><if pos:start="185:9" pos:end="191:9">if <condition pos:start="185:12" pos:end="185:62">(<expr pos:start="185:13" pos:end="185:61"><call pos:start="185:13" pos:end="185:57"><name pos:start="185:13" pos:end="185:21">url_alloc</name><argument_list pos:start="185:22" pos:end="185:57">(<argument pos:start="185:23" pos:end="185:34"><expr pos:start="185:23" pos:end="185:34"><operator pos:start="185:23" pos:end="185:23">&amp;</operator><name pos:start="185:24" pos:end="185:34"><name pos:start="185:24" pos:end="185:25">rt</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:34">rtsp_hd</name></name></expr></argument>, <argument pos:start="185:37" pos:end="185:44"><expr pos:start="185:37" pos:end="185:44"><name pos:start="185:37" pos:end="185:44">httpname</name></expr></argument>, <argument pos:start="185:47" pos:end="185:56"><expr pos:start="185:47" pos:end="185:56"><name pos:start="185:47" pos:end="185:56">URL_RDONLY</name></expr></argument>)</argument_list></call> <operator pos:start="185:59" pos:end="185:59">&lt;</operator> <literal type="number" pos:start="185:61" pos:end="185:61">0</literal></expr>)</condition> <block pos:start="185:64" pos:end="191:9">{<block_content pos:start="187:13" pos:end="189:22">

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:15">err</name> <operator pos:start="187:17" pos:end="187:17">=</operator> <call pos:start="187:19" pos:end="187:30"><name pos:start="187:19" pos:end="187:25">AVERROR</name><argument_list pos:start="187:26" pos:end="187:30">(<argument pos:start="187:27" pos:end="187:29"><expr pos:start="187:27" pos:end="187:29"><name pos:start="187:27" pos:end="187:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="195:9" pos:end="195:34">/* generate GET headers */</comment>

        <expr_stmt pos:start="197:9" pos:end="207:32"><expr pos:start="197:9" pos:end="207:31"><call pos:start="197:9" pos:end="207:31"><name pos:start="197:9" pos:end="197:16">snprintf</name><argument_list pos:start="197:17" pos:end="207:31">(<argument pos:start="197:18" pos:end="197:24"><expr pos:start="197:18" pos:end="197:24"><name pos:start="197:18" pos:end="197:24">headers</name></expr></argument>, <argument pos:start="197:27" pos:end="197:41"><expr pos:start="197:27" pos:end="197:41"><sizeof pos:start="197:27" pos:end="197:41">sizeof<argument_list pos:start="197:33" pos:end="197:41">(<argument pos:start="197:34" pos:end="197:40"><expr pos:start="197:34" pos:end="197:40"><name pos:start="197:34" pos:end="197:40">headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="199:18" pos:end="205:46"><expr pos:start="199:18" pos:end="205:46"><literal type="string" pos:start="199:18" pos:end="199:42">"x-sessioncookie: %s\r\n"</literal>

                 <literal type="string" pos:start="201:18" pos:end="201:59">"Accept: application/x-rtsp-tunnelled\r\n"</literal>

                 <literal type="string" pos:start="203:18" pos:end="203:39">"Pragma: no-cache\r\n"</literal>

                 <literal type="string" pos:start="205:18" pos:end="205:46">"Cache-Control: no-cache\r\n"</literal></expr></argument>,

                 <argument pos:start="207:18" pos:end="207:30"><expr pos:start="207:18" pos:end="207:30"><name pos:start="207:18" pos:end="207:30">sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:50"><expr pos:start="209:9" pos:end="209:49"><call pos:start="209:9" pos:end="209:49"><name pos:start="209:9" pos:end="209:27">ff_http_set_headers</name><argument_list pos:start="209:28" pos:end="209:49">(<argument pos:start="209:29" pos:end="209:39"><expr pos:start="209:29" pos:end="209:39"><name pos:start="209:29" pos:end="209:39"><name pos:start="209:29" pos:end="209:30">rt</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:39">rtsp_hd</name></name></expr></argument>, <argument pos:start="209:42" pos:end="209:48"><expr pos:start="209:42" pos:end="209:48"><name pos:start="209:42" pos:end="209:48">headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="213:9" pos:end="213:37">/* complete the connection */</comment>

        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:37">(<expr pos:start="215:13" pos:end="215:36"><call pos:start="215:13" pos:end="215:36"><name pos:start="215:13" pos:end="215:23">url_connect</name><argument_list pos:start="215:24" pos:end="215:36">(<argument pos:start="215:25" pos:end="215:35"><expr pos:start="215:25" pos:end="215:35"><name pos:start="215:25" pos:end="215:35"><name pos:start="215:25" pos:end="215:26">rt</name><operator pos:start="215:27" pos:end="215:28">-&gt;</operator><name pos:start="215:29" pos:end="215:35">rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="215:39" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:22">

            <expr_stmt pos:start="217:13" pos:end="217:31"><expr pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:15">err</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:30"><name pos:start="217:19" pos:end="217:25">AVERROR</name><argument_list pos:start="217:26" pos:end="217:30">(<argument pos:start="217:27" pos:end="217:29"><expr pos:start="217:27" pos:end="217:29"><name pos:start="217:27" pos:end="217:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="219:13" pos:end="219:22">goto <name pos:start="219:18" pos:end="219:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="225:9" pos:end="225:27">/* POST requests */</comment>

        <if_stmt pos:start="227:9" pos:end="233:9"><if pos:start="227:9" pos:end="233:9">if <condition pos:start="227:12" pos:end="227:67">(<expr pos:start="227:13" pos:end="227:65"><call pos:start="227:13" pos:end="227:61"><name pos:start="227:13" pos:end="227:21">url_alloc</name><argument_list pos:start="227:22" pos:end="227:61">(<argument pos:start="227:23" pos:end="227:38"><expr pos:start="227:23" pos:end="227:38"><operator pos:start="227:23" pos:end="227:23">&amp;</operator><name pos:start="227:24" pos:end="227:38"><name pos:start="227:24" pos:end="227:25">rt</name><operator pos:start="227:26" pos:end="227:27">-&gt;</operator><name pos:start="227:28" pos:end="227:38">rtsp_hd_out</name></name></expr></argument>, <argument pos:start="227:41" pos:end="227:48"><expr pos:start="227:41" pos:end="227:48"><name pos:start="227:41" pos:end="227:48">httpname</name></expr></argument>, <argument pos:start="227:51" pos:end="227:60"><expr pos:start="227:51" pos:end="227:60"><name pos:start="227:51" pos:end="227:60">URL_WRONLY</name></expr></argument>)</argument_list></call> <operator pos:start="227:63" pos:end="227:63">&lt;</operator> <literal type="number" pos:start="227:65" pos:end="227:65">0</literal></expr> )</condition> <block pos:start="227:69" pos:end="233:9">{<block_content pos:start="229:13" pos:end="231:22">

            <expr_stmt pos:start="229:13" pos:end="229:31"><expr pos:start="229:13" pos:end="229:30"><name pos:start="229:13" pos:end="229:15">err</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:30"><name pos:start="229:19" pos:end="229:25">AVERROR</name><argument_list pos:start="229:26" pos:end="229:30">(<argument pos:start="229:27" pos:end="229:29"><expr pos:start="229:27" pos:end="229:29"><name pos:start="229:27" pos:end="229:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="231:13" pos:end="231:22">goto <name pos:start="231:18" pos:end="231:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:35">/* generate POST headers */</comment>

        <expr_stmt pos:start="239:9" pos:end="253:32"><expr pos:start="239:9" pos:end="253:31"><call pos:start="239:9" pos:end="253:31"><name pos:start="239:9" pos:end="239:16">snprintf</name><argument_list pos:start="239:17" pos:end="253:31">(<argument pos:start="239:18" pos:end="239:24"><expr pos:start="239:18" pos:end="239:24"><name pos:start="239:18" pos:end="239:24">headers</name></expr></argument>, <argument pos:start="239:27" pos:end="239:41"><expr pos:start="239:27" pos:end="239:41"><sizeof pos:start="239:27" pos:end="239:41">sizeof<argument_list pos:start="239:33" pos:end="239:41">(<argument pos:start="239:34" pos:end="239:40"><expr pos:start="239:34" pos:end="239:40"><name pos:start="239:34" pos:end="239:40">headers</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="241:18" pos:end="251:60"><expr pos:start="241:18" pos:end="251:60"><literal type="string" pos:start="241:18" pos:end="241:42">"x-sessioncookie: %s\r\n"</literal>

                 <literal type="string" pos:start="243:18" pos:end="243:65">"Content-Type: application/x-rtsp-tunnelled\r\n"</literal>

                 <literal type="string" pos:start="245:18" pos:end="245:39">"Pragma: no-cache\r\n"</literal>

                 <literal type="string" pos:start="247:18" pos:end="247:46">"Cache-Control: no-cache\r\n"</literal>

                 <literal type="string" pos:start="249:18" pos:end="249:44">"Content-Length: 32767\r\n"</literal>

                 <literal type="string" pos:start="251:18" pos:end="251:60">"Expires: Sun, 9 Jan 1972 00:00:00 GMT\r\n"</literal></expr></argument>,

                 <argument pos:start="253:18" pos:end="253:30"><expr pos:start="253:18" pos:end="253:30"><name pos:start="253:18" pos:end="253:30">sessioncookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:54"><expr pos:start="255:9" pos:end="255:53"><call pos:start="255:9" pos:end="255:53"><name pos:start="255:9" pos:end="255:27">ff_http_set_headers</name><argument_list pos:start="255:28" pos:end="255:53">(<argument pos:start="255:29" pos:end="255:43"><expr pos:start="255:29" pos:end="255:43"><name pos:start="255:29" pos:end="255:43"><name pos:start="255:29" pos:end="255:30">rt</name><operator pos:start="255:31" pos:end="255:32">-&gt;</operator><name pos:start="255:33" pos:end="255:43">rtsp_hd_out</name></name></expr></argument>, <argument pos:start="255:46" pos:end="255:52"><expr pos:start="255:46" pos:end="255:52"><name pos:start="255:46" pos:end="255:52">headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:66"><expr pos:start="257:9" pos:end="257:65"><call pos:start="257:9" pos:end="257:65"><name pos:start="257:9" pos:end="257:45">ff_http_set_chunked_transfer_encoding</name><argument_list pos:start="257:46" pos:end="257:65">(<argument pos:start="257:47" pos:end="257:61"><expr pos:start="257:47" pos:end="257:61"><name pos:start="257:47" pos:end="257:61"><name pos:start="257:47" pos:end="257:48">rt</name><operator pos:start="257:49" pos:end="257:50">-&gt;</operator><name pos:start="257:51" pos:end="257:61">rtsp_hd_out</name></name></expr></argument>, <argument pos:start="257:64" pos:end="257:64"><expr pos:start="257:64" pos:end="257:64"><literal type="number" pos:start="257:64" pos:end="257:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="261:9" pos:end="291:11">/* Initialize the authentication state for the POST session. The HTTP

         * protocol implementation doesn't properly handle multi-pass

         * authentication for POST requests, since it would require one of

         * the following:

         * - implementing Expect: 100-continue, which many HTTP servers

         *   don't support anyway, even less the RTSP servers that do HTTP

         *   tunneling

         * - sending the whole POST data until getting a 401 reply specifying

         *   what authentication method to use, then resending all that data

         * - waiting for potential 401 replies directly after sending the

         *   POST header (waiting for some unspecified time)

         * Therefore, we copy the full auth state, which works for both basic

         * and digest. (For digest, we would have to synchronize the nonce

         * count variable between the two sessions, if we'd do more requests

         * with the original session, though.)

         */</comment>

        <expr_stmt pos:start="293:9" pos:end="293:62"><expr pos:start="293:9" pos:end="293:61"><call pos:start="293:9" pos:end="293:61"><name pos:start="293:9" pos:end="293:31">ff_http_init_auth_state</name><argument_list pos:start="293:32" pos:end="293:61">(<argument pos:start="293:33" pos:end="293:47"><expr pos:start="293:33" pos:end="293:47"><name pos:start="293:33" pos:end="293:47"><name pos:start="293:33" pos:end="293:34">rt</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:47">rtsp_hd_out</name></name></expr></argument>, <argument pos:start="293:50" pos:end="293:60"><expr pos:start="293:50" pos:end="293:60"><name pos:start="293:50" pos:end="293:60"><name pos:start="293:50" pos:end="293:51">rt</name><operator pos:start="293:52" pos:end="293:53">-&gt;</operator><name pos:start="293:54" pos:end="293:60">rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="297:9" pos:end="297:37">/* complete the connection */</comment>

        <if_stmt pos:start="299:9" pos:end="305:9"><if pos:start="299:9" pos:end="305:9">if <condition pos:start="299:12" pos:end="299:41">(<expr pos:start="299:13" pos:end="299:40"><call pos:start="299:13" pos:end="299:40"><name pos:start="299:13" pos:end="299:23">url_connect</name><argument_list pos:start="299:24" pos:end="299:40">(<argument pos:start="299:25" pos:end="299:39"><expr pos:start="299:25" pos:end="299:39"><name pos:start="299:25" pos:end="299:39"><name pos:start="299:25" pos:end="299:26">rt</name><operator pos:start="299:27" pos:end="299:28">-&gt;</operator><name pos:start="299:29" pos:end="299:39">rtsp_hd_out</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="299:43" pos:end="305:9">{<block_content pos:start="301:13" pos:end="303:22">

            <expr_stmt pos:start="301:13" pos:end="301:31"><expr pos:start="301:13" pos:end="301:30"><name pos:start="301:13" pos:end="301:15">err</name> <operator pos:start="301:17" pos:end="301:17">=</operator> <call pos:start="301:19" pos:end="301:30"><name pos:start="301:19" pos:end="301:25">AVERROR</name><argument_list pos:start="301:26" pos:end="301:30">(<argument pos:start="301:27" pos:end="301:29"><expr pos:start="301:27" pos:end="301:29"><name pos:start="301:27" pos:end="301:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="303:13" pos:end="303:22">goto <name pos:start="303:18" pos:end="303:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="307:7" pos:end="323:5">else <block pos:start="307:12" pos:end="323:5">{<block_content pos:start="311:9" pos:end="321:38">

        <comment type="block" pos:start="309:9" pos:end="309:37">/* open the tcp connection */</comment>

        <expr_stmt pos:start="311:9" pos:end="311:77"><expr pos:start="311:9" pos:end="311:76"><call pos:start="311:9" pos:end="311:76"><name pos:start="311:9" pos:end="311:19">ff_url_join</name><argument_list pos:start="311:20" pos:end="311:76">(<argument pos:start="311:21" pos:end="311:27"><expr pos:start="311:21" pos:end="311:27"><name pos:start="311:21" pos:end="311:27">tcpname</name></expr></argument>, <argument pos:start="311:30" pos:end="311:44"><expr pos:start="311:30" pos:end="311:44"><sizeof pos:start="311:30" pos:end="311:44">sizeof<argument_list pos:start="311:36" pos:end="311:44">(<argument pos:start="311:37" pos:end="311:43"><expr pos:start="311:37" pos:end="311:43"><name pos:start="311:37" pos:end="311:43">tcpname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="311:47" pos:end="311:51"><expr pos:start="311:47" pos:end="311:51"><literal type="string" pos:start="311:47" pos:end="311:51">"tcp"</literal></expr></argument>, <argument pos:start="311:54" pos:end="311:57"><expr pos:start="311:54" pos:end="311:57"><name pos:start="311:54" pos:end="311:57">NULL</name></expr></argument>, <argument pos:start="311:60" pos:end="311:63"><expr pos:start="311:60" pos:end="311:63"><name pos:start="311:60" pos:end="311:63">host</name></expr></argument>, <argument pos:start="311:66" pos:end="311:69"><expr pos:start="311:66" pos:end="311:69"><name pos:start="311:66" pos:end="311:69">port</name></expr></argument>, <argument pos:start="311:72" pos:end="311:75"><expr pos:start="311:72" pos:end="311:75"><name pos:start="311:72" pos:end="311:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:58">(<expr pos:start="313:13" pos:end="313:57"><call pos:start="313:13" pos:end="313:53"><name pos:start="313:13" pos:end="313:20">url_open</name><argument_list pos:start="313:21" pos:end="313:53">(<argument pos:start="313:22" pos:end="313:33"><expr pos:start="313:22" pos:end="313:33"><operator pos:start="313:22" pos:end="313:22">&amp;</operator><name pos:start="313:23" pos:end="313:33"><name pos:start="313:23" pos:end="313:24">rt</name><operator pos:start="313:25" pos:end="313:26">-&gt;</operator><name pos:start="313:27" pos:end="313:33">rtsp_hd</name></name></expr></argument>, <argument pos:start="313:36" pos:end="313:42"><expr pos:start="313:36" pos:end="313:42"><name pos:start="313:36" pos:end="313:42">tcpname</name></expr></argument>, <argument pos:start="313:45" pos:end="313:52"><expr pos:start="313:45" pos:end="313:52"><name pos:start="313:45" pos:end="313:52">URL_RDWR</name></expr></argument>)</argument_list></call> <operator pos:start="313:55" pos:end="313:55">&lt;</operator> <literal type="number" pos:start="313:57" pos:end="313:57">0</literal></expr>)</condition> <block pos:start="313:60" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:22">

            <expr_stmt pos:start="315:13" pos:end="315:31"><expr pos:start="315:13" pos:end="315:30"><name pos:start="315:13" pos:end="315:15">err</name> <operator pos:start="315:17" pos:end="315:17">=</operator> <call pos:start="315:19" pos:end="315:30"><name pos:start="315:19" pos:end="315:25">AVERROR</name><argument_list pos:start="315:26" pos:end="315:30">(<argument pos:start="315:27" pos:end="315:29"><expr pos:start="315:27" pos:end="315:29"><name pos:start="315:27" pos:end="315:29">EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="317:13" pos:end="317:22">goto <name pos:start="317:18" pos:end="317:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:38"><expr pos:start="321:9" pos:end="321:37"><name pos:start="321:9" pos:end="321:23"><name pos:start="321:9" pos:end="321:10">rt</name><operator pos:start="321:11" pos:end="321:12">-&gt;</operator><name pos:start="321:13" pos:end="321:23">rtsp_hd_out</name></name> <operator pos:start="321:25" pos:end="321:25">=</operator> <name pos:start="321:27" pos:end="321:37"><name pos:start="321:27" pos:end="321:28">rt</name><operator pos:start="321:29" pos:end="321:30">-&gt;</operator><name pos:start="321:31" pos:end="321:37">rtsp_hd</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:16"><expr pos:start="325:5" pos:end="325:15"><name pos:start="325:5" pos:end="325:11"><name pos:start="325:5" pos:end="325:6">rt</name><operator pos:start="325:7" pos:end="325:8">-&gt;</operator><name pos:start="325:9" pos:end="325:11">seq</name></name> <operator pos:start="325:13" pos:end="325:13">=</operator> <literal type="number" pos:start="325:15" pos:end="325:15">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:46"><expr pos:start="329:5" pos:end="329:45"><name pos:start="329:5" pos:end="329:10">tcp_fd</name> <operator pos:start="329:12" pos:end="329:12">=</operator> <call pos:start="329:14" pos:end="329:45"><name pos:start="329:14" pos:end="329:32">url_get_file_handle</name><argument_list pos:start="329:33" pos:end="329:45">(<argument pos:start="329:34" pos:end="329:44"><expr pos:start="329:34" pos:end="329:44"><name pos:start="329:34" pos:end="329:44"><name pos:start="329:34" pos:end="329:35">rt</name><operator pos:start="329:36" pos:end="329:37">-&gt;</operator><name pos:start="329:38" pos:end="329:44">rtsp_hd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="337:5"><if pos:start="331:5" pos:end="337:5">if <condition pos:start="331:8" pos:end="331:66">(<expr pos:start="331:9" pos:end="331:65"><operator pos:start="331:9" pos:end="331:9">!</operator><call pos:start="331:10" pos:end="331:65"><name pos:start="331:10" pos:end="331:20">getpeername</name><argument_list pos:start="331:21" pos:end="331:65">(<argument pos:start="331:22" pos:end="331:27"><expr pos:start="331:22" pos:end="331:27"><name pos:start="331:22" pos:end="331:27">tcp_fd</name></expr></argument>, <argument pos:start="331:30" pos:end="331:53"><expr pos:start="331:30" pos:end="331:53"><operator pos:start="331:30" pos:end="331:30">(</operator>struct <name pos:start="331:38" pos:end="331:45">sockaddr</name><operator pos:start="331:46" pos:end="331:46">*</operator><operator pos:start="331:47" pos:end="331:47">)</operator> <operator pos:start="331:49" pos:end="331:49">&amp;</operator><name pos:start="331:50" pos:end="331:53">peer</name></expr></argument>, <argument pos:start="331:56" pos:end="331:64"><expr pos:start="331:56" pos:end="331:64"><operator pos:start="331:56" pos:end="331:56">&amp;</operator><name pos:start="331:57" pos:end="331:64">peer_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="331:68" pos:end="337:5">{<block_content pos:start="333:9" pos:end="335:45">

        <expr_stmt pos:start="333:9" pos:end="335:45"><expr pos:start="333:9" pos:end="335:44"><call pos:start="333:9" pos:end="335:44"><name pos:start="333:9" pos:end="333:19">getnameinfo</name><argument_list pos:start="333:20" pos:end="335:44">(<argument pos:start="333:21" pos:end="333:44"><expr pos:start="333:21" pos:end="333:44"><operator pos:start="333:21" pos:end="333:21">(</operator>struct <name pos:start="333:29" pos:end="333:36">sockaddr</name><operator pos:start="333:37" pos:end="333:37">*</operator><operator pos:start="333:38" pos:end="333:38">)</operator> <operator pos:start="333:40" pos:end="333:40">&amp;</operator><name pos:start="333:41" pos:end="333:44">peer</name></expr></argument>, <argument pos:start="333:47" pos:end="333:54"><expr pos:start="333:47" pos:end="333:54"><name pos:start="333:47" pos:end="333:54">peer_len</name></expr></argument>, <argument pos:start="333:57" pos:end="333:60"><expr pos:start="333:57" pos:end="333:60"><name pos:start="333:57" pos:end="333:60">host</name></expr></argument>, <argument pos:start="333:63" pos:end="333:74"><expr pos:start="333:63" pos:end="333:74"><sizeof pos:start="333:63" pos:end="333:74">sizeof<argument_list pos:start="333:69" pos:end="333:74">(<argument pos:start="333:70" pos:end="333:73"><expr pos:start="333:70" pos:end="333:73"><name pos:start="333:70" pos:end="333:73">host</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="335:21" pos:end="335:24"><expr pos:start="335:21" pos:end="335:24"><name pos:start="335:21" pos:end="335:24">NULL</name></expr></argument>, <argument pos:start="335:27" pos:end="335:27"><expr pos:start="335:27" pos:end="335:27"><literal type="number" pos:start="335:27" pos:end="335:27">0</literal></expr></argument>, <argument pos:start="335:30" pos:end="335:43"><expr pos:start="335:30" pos:end="335:43"><name pos:start="335:30" pos:end="335:43">NI_NUMERICHOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="341:5" pos:end="343:14">/* request options supported by the server; this also detects server

     * type */</comment>

    <for pos:start="345:5" pos:end="411:5">for <control pos:start="345:9" pos:end="345:45">(<init pos:start="345:10" pos:end="345:43"><expr pos:start="345:10" pos:end="345:42"><name pos:start="345:10" pos:end="345:24"><name pos:start="345:10" pos:end="345:11">rt</name><operator pos:start="345:12" pos:end="345:13">-&gt;</operator><name pos:start="345:14" pos:end="345:24">server_type</name></name> <operator pos:start="345:26" pos:end="345:26">=</operator> <name pos:start="345:28" pos:end="345:42">RTSP_SERVER_RTP</name></expr>;</init><condition pos:start="345:44" pos:end="345:44">;</condition><incr/>)</control> <block pos:start="345:47" pos:end="411:5">{<block_content pos:start="347:9" pos:end="409:14">

        <expr_stmt pos:start="347:9" pos:end="347:19"><expr pos:start="347:9" pos:end="347:18"><name pos:start="347:9" pos:end="347:14"><name pos:start="347:9" pos:end="347:11">cmd</name><index pos:start="347:12" pos:end="347:14">[<expr pos:start="347:13" pos:end="347:13"><literal type="number" pos:start="347:13" pos:end="347:13">0</literal></expr>]</index></name> <operator pos:start="347:16" pos:end="347:16">=</operator> <literal type="number" pos:start="347:18" pos:end="347:18">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="349:9" pos:end="379:36"><if pos:start="349:9" pos:end="379:36">if <condition pos:start="349:12" pos:end="349:48">(<expr pos:start="349:13" pos:end="349:47"><name pos:start="349:13" pos:end="349:27"><name pos:start="349:13" pos:end="349:14">rt</name><operator pos:start="349:15" pos:end="349:16">-&gt;</operator><name pos:start="349:17" pos:end="349:27">server_type</name></name> <operator pos:start="349:29" pos:end="349:30">==</operator> <name pos:start="349:32" pos:end="349:47">RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo" pos:start="351:13" pos:end="379:36"><block_content pos:start="351:13" pos:end="379:36">

            <expr_stmt pos:start="351:13" pos:end="379:36"><expr pos:start="351:13" pos:end="379:35"><call pos:start="351:13" pos:end="379:35"><name pos:start="351:13" pos:end="351:22">av_strlcat</name><argument_list pos:start="351:23" pos:end="379:35">(<argument pos:start="351:24" pos:end="351:26"><expr pos:start="351:24" pos:end="351:26"><name pos:start="351:24" pos:end="351:26">cmd</name></expr></argument>,

                       <comment type="block" format="doxygen" pos:start="353:24" pos:end="369:26">/**

                        * The following entries are required for proper

                        * streaming from a Realmedia server. They are

                        * interdependent in some way although we currently

                        * don't quite understand how. Values were copied

                        * from mplayer SVN r23589.

                        * @param CompanyID is a 16-byte ID in base64

                        * @param ClientChallenge is a 16-byte ID in hex

                        */</comment>

                       <argument pos:start="371:24" pos:end="377:71"><expr pos:start="371:24" pos:end="377:71"><literal type="string" pos:start="371:24" pos:end="371:78">"ClientChallenge: 9e26d33f2984236010ef6253fb1887f7\r\n"</literal>

                       <literal type="string" pos:start="373:24" pos:end="373:73">"PlayerStarttime: [28/03/2003:22:50:23 00:00]\r\n"</literal>

                       <literal type="string" pos:start="375:24" pos:end="375:64">"CompanyID: KnKV4M4I/B2FjJ1TToLycw==\r\n"</literal>

                       <literal type="string" pos:start="377:24" pos:end="377:71">"GUID: 00000000-0000-0000-0000-000000000000\r\n"</literal></expr></argument>,

                       <argument pos:start="379:24" pos:end="379:34"><expr pos:start="379:24" pos:end="379:34"><sizeof pos:start="379:24" pos:end="379:34">sizeof<argument_list pos:start="379:30" pos:end="379:34">(<argument pos:start="379:31" pos:end="379:33"><expr pos:start="379:31" pos:end="379:33"><name pos:start="379:31" pos:end="379:33">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:74"><expr pos:start="381:9" pos:end="381:73"><call pos:start="381:9" pos:end="381:73"><name pos:start="381:9" pos:end="381:24">ff_rtsp_send_cmd</name><argument_list pos:start="381:25" pos:end="381:73">(<argument pos:start="381:26" pos:end="381:26"><expr pos:start="381:26" pos:end="381:26"><name pos:start="381:26" pos:end="381:26">s</name></expr></argument>, <argument pos:start="381:29" pos:end="381:37"><expr pos:start="381:29" pos:end="381:37"><literal type="string" pos:start="381:29" pos:end="381:37">"OPTIONS"</literal></expr></argument>, <argument pos:start="381:40" pos:end="381:54"><expr pos:start="381:40" pos:end="381:54"><name pos:start="381:40" pos:end="381:54"><name pos:start="381:40" pos:end="381:41">rt</name><operator pos:start="381:42" pos:end="381:43">-&gt;</operator><name pos:start="381:44" pos:end="381:54">control_uri</name></name></expr></argument>, <argument pos:start="381:57" pos:end="381:59"><expr pos:start="381:57" pos:end="381:59"><name pos:start="381:57" pos:end="381:59">cmd</name></expr></argument>, <argument pos:start="381:62" pos:end="381:66"><expr pos:start="381:62" pos:end="381:66"><name pos:start="381:62" pos:end="381:66">reply</name></expr></argument>, <argument pos:start="381:69" pos:end="381:72"><expr pos:start="381:69" pos:end="381:72"><name pos:start="381:69" pos:end="381:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="383:9" pos:end="389:9"><if pos:start="383:9" pos:end="389:9">if <condition pos:start="383:12" pos:end="383:49">(<expr pos:start="383:13" pos:end="383:48"><name pos:start="383:13" pos:end="383:30"><name pos:start="383:13" pos:end="383:17">reply</name><operator pos:start="383:18" pos:end="383:19">-&gt;</operator><name pos:start="383:20" pos:end="383:30">status_code</name></name> <operator pos:start="383:32" pos:end="383:33">!=</operator> <name pos:start="383:35" pos:end="383:48">RTSP_STATUS_OK</name></expr>)</condition> <block pos:start="383:51" pos:end="389:9">{<block_content pos:start="385:13" pos:end="387:22">

            <expr_stmt pos:start="385:13" pos:end="385:38"><expr pos:start="385:13" pos:end="385:37"><name pos:start="385:13" pos:end="385:15">err</name> <operator pos:start="385:17" pos:end="385:17">=</operator> <name pos:start="385:19" pos:end="385:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="387:13" pos:end="387:22">goto <name pos:start="387:18" pos:end="387:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="393:9" pos:end="393:62">/* detect server type if not standard-compliant RTP */</comment>

        <if_stmt pos:start="395:9" pos:end="407:58"><if pos:start="395:9" pos:end="401:9">if <condition pos:start="395:12" pos:end="395:76">(<expr pos:start="395:13" pos:end="395:75"><name pos:start="395:13" pos:end="395:27"><name pos:start="395:13" pos:end="395:14">rt</name><operator pos:start="395:15" pos:end="395:16">-&gt;</operator><name pos:start="395:17" pos:end="395:27">server_type</name></name> <operator pos:start="395:29" pos:end="395:30">!=</operator> <name pos:start="395:32" pos:end="395:47">RTSP_SERVER_REAL</name> <operator pos:start="395:49" pos:end="395:50">&amp;&amp;</operator> <name pos:start="395:52" pos:end="395:75"><name pos:start="395:52" pos:end="395:56">reply</name><operator pos:start="395:57" pos:end="395:58">-&gt;</operator><name pos:start="395:59" pos:end="395:72">real_challenge</name><index pos:start="395:73" pos:end="395:75">[<expr pos:start="395:74" pos:end="395:74"><literal type="number" pos:start="395:74" pos:end="395:74">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="395:78" pos:end="401:9">{<block_content pos:start="397:13" pos:end="399:21">

            <expr_stmt pos:start="397:13" pos:end="397:47"><expr pos:start="397:13" pos:end="397:46"><name pos:start="397:13" pos:end="397:27"><name pos:start="397:13" pos:end="397:14">rt</name><operator pos:start="397:15" pos:end="397:16">-&gt;</operator><name pos:start="397:17" pos:end="397:27">server_type</name></name> <operator pos:start="397:29" pos:end="397:29">=</operator> <name pos:start="397:31" pos:end="397:46">RTSP_SERVER_REAL</name></expr>;</expr_stmt>

            <continue pos:start="399:13" pos:end="399:21">continue;</continue>

        </block_content>}</block></if> <if type="elseif" pos:start="401:11" pos:end="405:9">else if <condition pos:start="401:19" pos:end="401:63">(<expr pos:start="401:20" pos:end="401:62"><operator pos:start="401:20" pos:end="401:20">!</operator><call pos:start="401:21" pos:end="401:62"><name pos:start="401:21" pos:end="401:31">strncasecmp</name><argument_list pos:start="401:32" pos:end="401:62">(<argument pos:start="401:33" pos:end="401:45"><expr pos:start="401:33" pos:end="401:45"><name pos:start="401:33" pos:end="401:45"><name pos:start="401:33" pos:end="401:37">reply</name><operator pos:start="401:38" pos:end="401:39">-&gt;</operator><name pos:start="401:40" pos:end="401:45">server</name></name></expr></argument>, <argument pos:start="401:48" pos:end="401:58"><expr pos:start="401:48" pos:end="401:58"><literal type="string" pos:start="401:48" pos:end="401:58">"WMServer/"</literal></expr></argument>, <argument pos:start="401:61" pos:end="401:61"><expr pos:start="401:61" pos:end="401:61"><literal type="number" pos:start="401:61" pos:end="401:61">9</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="401:65" pos:end="405:9">{<block_content pos:start="403:13" pos:end="403:46">

            <expr_stmt pos:start="403:13" pos:end="403:46"><expr pos:start="403:13" pos:end="403:45"><name pos:start="403:13" pos:end="403:27"><name pos:start="403:13" pos:end="403:14">rt</name><operator pos:start="403:15" pos:end="403:16">-&gt;</operator><name pos:start="403:17" pos:end="403:27">server_type</name></name> <operator pos:start="403:29" pos:end="403:29">=</operator> <name pos:start="403:31" pos:end="403:45">RTSP_SERVER_WMS</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="405:11" pos:end="407:58">else if <condition pos:start="405:19" pos:end="405:55">(<expr pos:start="405:20" pos:end="405:54"><name pos:start="405:20" pos:end="405:34"><name pos:start="405:20" pos:end="405:21">rt</name><operator pos:start="405:22" pos:end="405:23">-&gt;</operator><name pos:start="405:24" pos:end="405:34">server_type</name></name> <operator pos:start="405:36" pos:end="405:37">==</operator> <name pos:start="405:39" pos:end="405:54">RTSP_SERVER_REAL</name></expr>)</condition><block type="pseudo" pos:start="407:13" pos:end="407:58"><block_content pos:start="407:13" pos:end="407:58">

            <expr_stmt pos:start="407:13" pos:end="407:58"><expr pos:start="407:13" pos:end="407:57"><call pos:start="407:13" pos:end="407:57"><name pos:start="407:13" pos:end="407:18">strcpy</name><argument_list pos:start="407:19" pos:end="407:57">(<argument pos:start="407:20" pos:end="407:33"><expr pos:start="407:20" pos:end="407:33"><name pos:start="407:20" pos:end="407:33">real_challenge</name></expr></argument>, <argument pos:start="407:36" pos:end="407:56"><expr pos:start="407:36" pos:end="407:56"><name pos:start="407:36" pos:end="407:56"><name pos:start="407:36" pos:end="407:40">reply</name><operator pos:start="407:41" pos:end="407:42">-&gt;</operator><name pos:start="407:43" pos:end="407:56">real_challenge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="409:9" pos:end="409:14">break;</break>

    </block_content>}</block></for>



    <if_stmt pos:start="415:5" pos:end="421:49"><if pos:start="415:5" pos:end="417:49">if <condition pos:start="415:8" pos:end="415:19">(<expr pos:start="415:9" pos:end="415:18"><name pos:start="415:9" pos:end="415:18"><name pos:start="415:9" pos:end="415:9">s</name><operator pos:start="415:10" pos:end="415:11">-&gt;</operator><name pos:start="415:12" pos:end="415:18">iformat</name></name></expr>)</condition><block type="pseudo" pos:start="417:9" pos:end="417:49"><block_content pos:start="417:9" pos:end="417:49">

        <expr_stmt pos:start="417:9" pos:end="417:49"><expr pos:start="417:9" pos:end="417:48"><name pos:start="417:9" pos:end="417:11">err</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <call pos:start="417:15" pos:end="417:48"><name pos:start="417:15" pos:end="417:38">rtsp_setup_input_streams</name><argument_list pos:start="417:39" pos:end="417:48">(<argument pos:start="417:40" pos:end="417:40"><expr pos:start="417:40" pos:end="417:40"><name pos:start="417:40" pos:end="417:40">s</name></expr></argument>, <argument pos:start="417:43" pos:end="417:47"><expr pos:start="417:43" pos:end="417:47"><name pos:start="417:43" pos:end="417:47">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="419:5" pos:end="421:49">else<block type="pseudo" pos:start="421:9" pos:end="421:49"><block_content pos:start="421:9" pos:end="421:49">

        <expr_stmt pos:start="421:9" pos:end="421:49"><expr pos:start="421:9" pos:end="421:48"><name pos:start="421:9" pos:end="421:11">err</name> <operator pos:start="421:13" pos:end="421:13">=</operator> <call pos:start="421:15" pos:end="421:48"><name pos:start="421:15" pos:end="421:39">rtsp_setup_output_streams</name><argument_list pos:start="421:40" pos:end="421:48">(<argument pos:start="421:41" pos:end="421:41"><expr pos:start="421:41" pos:end="421:41"><name pos:start="421:41" pos:end="421:41">s</name></expr></argument>, <argument pos:start="421:44" pos:end="421:47"><expr pos:start="421:44" pos:end="421:47"><name pos:start="421:44" pos:end="421:47">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="423:5" pos:end="425:18"><if pos:start="423:5" pos:end="425:18">if <condition pos:start="423:8" pos:end="423:12">(<expr pos:start="423:9" pos:end="423:11"><name pos:start="423:9" pos:end="423:11">err</name></expr>)</condition><block type="pseudo" pos:start="425:9" pos:end="425:18"><block_content pos:start="425:9" pos:end="425:18">

        <goto pos:start="425:9" pos:end="425:18">goto <name pos:start="425:14" pos:end="425:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <do pos:start="429:5" pos:end="457:18">do <block pos:start="429:8" pos:end="457:5">{<block_content pos:start="431:9" pos:end="455:9">

        <decl_stmt pos:start="431:9" pos:end="433:63"><decl pos:start="431:9" pos:end="433:62"><type pos:start="431:9" pos:end="431:11"><name pos:start="431:9" pos:end="431:11">int</name></type> <name pos:start="431:13" pos:end="431:27">lower_transport</name> <init pos:start="431:29" pos:end="433:62">= <expr pos:start="431:31" pos:end="433:62"><name pos:start="431:31" pos:end="433:62"><name pos:start="431:31" pos:end="431:41">ff_log2_tab</name><index pos:start="431:42" pos:end="433:62">[<expr pos:start="431:43" pos:end="433:61"><name pos:start="431:43" pos:end="431:62">lower_transport_mask</name> <operator pos:start="431:64" pos:end="431:64">&amp;</operator>

                                  <operator pos:start="433:35" pos:end="433:35">~</operator><operator pos:start="433:36" pos:end="433:36">(</operator><name pos:start="433:37" pos:end="433:56">lower_transport_mask</name> <operator pos:start="433:58" pos:end="433:58">-</operator> <literal type="number" pos:start="433:60" pos:end="433:60">1</literal><operator pos:start="433:61" pos:end="433:61">)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="437:9" pos:end="441:60"><expr pos:start="437:9" pos:end="441:59"><name pos:start="437:9" pos:end="437:11">err</name> <operator pos:start="437:13" pos:end="437:13">=</operator> <call pos:start="437:15" pos:end="441:59"><name pos:start="437:15" pos:end="437:32">make_setup_request</name><argument_list pos:start="437:33" pos:end="441:59">(<argument pos:start="437:34" pos:end="437:34"><expr pos:start="437:34" pos:end="437:34"><name pos:start="437:34" pos:end="437:34">s</name></expr></argument>, <argument pos:start="437:37" pos:end="437:40"><expr pos:start="437:37" pos:end="437:40"><name pos:start="437:37" pos:end="437:40">host</name></expr></argument>, <argument pos:start="437:43" pos:end="437:46"><expr pos:start="437:43" pos:end="437:46"><name pos:start="437:43" pos:end="437:46">port</name></expr></argument>, <argument pos:start="437:49" pos:end="437:63"><expr pos:start="437:49" pos:end="437:63"><name pos:start="437:49" pos:end="437:63">lower_transport</name></expr></argument>,

                                 <argument pos:start="439:34" pos:end="441:58"><expr pos:start="439:34" pos:end="441:58"><ternary pos:start="439:34" pos:end="441:58"><condition pos:start="439:34" pos:end="439:70"><expr pos:start="439:34" pos:end="439:68"><name pos:start="439:34" pos:end="439:48"><name pos:start="439:34" pos:end="439:35">rt</name><operator pos:start="439:36" pos:end="439:37">-&gt;</operator><name pos:start="439:38" pos:end="439:48">server_type</name></name> <operator pos:start="439:50" pos:end="439:51">==</operator> <name pos:start="439:53" pos:end="439:68">RTSP_SERVER_REAL</name></expr> ?</condition><then pos:start="441:38" pos:end="441:51">

                                     <expr pos:start="441:38" pos:end="441:51"><name pos:start="441:38" pos:end="441:51">real_challenge</name></expr> </then><else pos:start="441:53" pos:end="441:58">: <expr pos:start="441:55" pos:end="441:58"><name pos:start="441:55" pos:end="441:58">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="443:9" pos:end="445:22"><if pos:start="443:9" pos:end="445:22">if <condition pos:start="443:12" pos:end="443:20">(<expr pos:start="443:13" pos:end="443:19"><name pos:start="443:13" pos:end="443:15">err</name> <operator pos:start="443:17" pos:end="443:17">&lt;</operator> <literal type="number" pos:start="443:19" pos:end="443:19">0</literal></expr>)</condition><block type="pseudo" pos:start="445:13" pos:end="445:22"><block_content pos:start="445:13" pos:end="445:22">

            <goto pos:start="445:13" pos:end="445:22">goto <name pos:start="445:18" pos:end="445:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="447:9" pos:end="447:56"><expr pos:start="447:9" pos:end="447:55"><name pos:start="447:9" pos:end="447:28">lower_transport_mask</name> <operator pos:start="447:30" pos:end="447:31">&amp;=</operator> <operator pos:start="447:33" pos:end="447:33">~</operator><operator pos:start="447:34" pos:end="447:34">(</operator><literal type="number" pos:start="447:35" pos:end="447:35">1</literal> <operator pos:start="447:37" pos:end="447:38">&lt;&lt;</operator> <name pos:start="447:40" pos:end="447:54">lower_transport</name><operator pos:start="447:55" pos:end="447:55">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="449:9" pos:end="455:9"><if pos:start="449:9" pos:end="455:9">if <condition pos:start="449:12" pos:end="449:50">(<expr pos:start="449:13" pos:end="449:49"><name pos:start="449:13" pos:end="449:32">lower_transport_mask</name> <operator pos:start="449:34" pos:end="449:35">==</operator> <literal type="number" pos:start="449:37" pos:end="449:37">0</literal> <operator pos:start="449:39" pos:end="449:40">&amp;&amp;</operator> <name pos:start="449:42" pos:end="449:44">err</name> <operator pos:start="449:46" pos:end="449:47">==</operator> <literal type="number" pos:start="449:49" pos:end="449:49">1</literal></expr>)</condition> <block pos:start="449:52" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:22">

            <expr_stmt pos:start="451:13" pos:end="451:47"><expr pos:start="451:13" pos:end="451:46"><name pos:start="451:13" pos:end="451:15">err</name> <operator pos:start="451:17" pos:end="451:17">=</operator> <call pos:start="451:19" pos:end="451:46"><name pos:start="451:19" pos:end="451:29">FF_NETERROR</name><argument_list pos:start="451:30" pos:end="451:46">(<argument pos:start="451:31" pos:end="451:45"><expr pos:start="451:31" pos:end="451:45"><name pos:start="451:31" pos:end="451:45">EPROTONOSUPPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="453:13" pos:end="453:22">goto <name pos:start="453:18" pos:end="453:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="457:13" pos:end="457:17">(<expr pos:start="457:14" pos:end="457:16"><name pos:start="457:14" pos:end="457:16">err</name></expr>)</condition>;</do>



    <expr_stmt pos:start="461:5" pos:end="461:32"><expr pos:start="461:5" pos:end="461:31"><name pos:start="461:5" pos:end="461:13"><name pos:start="461:5" pos:end="461:6">rt</name><operator pos:start="461:7" pos:end="461:8">-&gt;</operator><name pos:start="461:9" pos:end="461:13">state</name></name> <operator pos:start="461:15" pos:end="461:15">=</operator> <name pos:start="461:17" pos:end="461:31">RTSP_STATE_IDLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:27"><expr pos:start="463:5" pos:end="463:26"><name pos:start="463:5" pos:end="463:22"><name pos:start="463:5" pos:end="463:6">rt</name><operator pos:start="463:7" pos:end="463:8">-&gt;</operator><name pos:start="463:9" pos:end="463:22">seek_timestamp</name></name> <operator pos:start="463:24" pos:end="463:24">=</operator> <literal type="number" pos:start="463:26" pos:end="463:26">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="463:29" pos:end="463:77">/* default is to start stream at position zero */</comment>

    <return pos:start="465:5" pos:end="465:13">return <expr pos:start="465:12" pos:end="465:12"><literal type="number" pos:start="465:12" pos:end="465:12">0</literal></expr>;</return>

 <label pos:start="467:2" pos:end="467:6"><name pos:start="467:2" pos:end="467:5">fail</name>:</label>

    <expr_stmt pos:start="469:5" pos:end="469:29"><expr pos:start="469:5" pos:end="469:28"><call pos:start="469:5" pos:end="469:28"><name pos:start="469:5" pos:end="469:25">ff_rtsp_close_streams</name><argument_list pos:start="469:26" pos:end="469:28">(<argument pos:start="469:27" pos:end="469:27"><expr pos:start="469:27" pos:end="469:27"><name pos:start="469:27" pos:end="469:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:33"><expr pos:start="471:5" pos:end="471:32"><call pos:start="471:5" pos:end="471:32"><name pos:start="471:5" pos:end="471:29">ff_rtsp_close_connections</name><argument_list pos:start="471:30" pos:end="471:32">(<argument pos:start="471:31" pos:end="471:31"><expr pos:start="471:31" pos:end="471:31"><name pos:start="471:31" pos:end="471:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="473:5" pos:end="485:5"><if pos:start="473:5" pos:end="485:5">if <condition pos:start="473:8" pos:end="473:75">(<expr pos:start="473:9" pos:end="473:74"><name pos:start="473:9" pos:end="473:26"><name pos:start="473:9" pos:end="473:13">reply</name><operator pos:start="473:14" pos:end="473:15">-&gt;</operator><name pos:start="473:16" pos:end="473:26">status_code</name></name> <operator pos:start="473:28" pos:end="473:29">&gt;=</operator><literal type="number" pos:start="473:30" pos:end="473:32">300</literal> <operator pos:start="473:34" pos:end="473:35">&amp;&amp;</operator> <name pos:start="473:37" pos:end="473:54"><name pos:start="473:37" pos:end="473:41">reply</name><operator pos:start="473:42" pos:end="473:43">-&gt;</operator><name pos:start="473:44" pos:end="473:54">status_code</name></name> <operator pos:start="473:56" pos:end="473:56">&lt;</operator> <literal type="number" pos:start="473:58" pos:end="473:60">400</literal> <operator pos:start="473:62" pos:end="473:63">&amp;&amp;</operator> <name pos:start="473:65" pos:end="473:74"><name pos:start="473:65" pos:end="473:65">s</name><operator pos:start="473:66" pos:end="473:67">-&gt;</operator><name pos:start="473:68" pos:end="473:74">iformat</name></name></expr>)</condition> <block pos:start="473:77" pos:end="485:5">{<block_content pos:start="475:9" pos:end="483:22">

        <expr_stmt pos:start="475:9" pos:end="475:70"><expr pos:start="475:9" pos:end="475:69"><call pos:start="475:9" pos:end="475:69"><name pos:start="475:9" pos:end="475:18">av_strlcpy</name><argument_list pos:start="475:19" pos:end="475:69">(<argument pos:start="475:20" pos:end="475:30"><expr pos:start="475:20" pos:end="475:30"><name pos:start="475:20" pos:end="475:30"><name pos:start="475:20" pos:end="475:20">s</name><operator pos:start="475:21" pos:end="475:22">-&gt;</operator><name pos:start="475:23" pos:end="475:30">filename</name></name></expr></argument>, <argument pos:start="475:33" pos:end="475:47"><expr pos:start="475:33" pos:end="475:47"><name pos:start="475:33" pos:end="475:47"><name pos:start="475:33" pos:end="475:37">reply</name><operator pos:start="475:38" pos:end="475:39">-&gt;</operator><name pos:start="475:40" pos:end="475:47">location</name></name></expr></argument>, <argument pos:start="475:50" pos:end="475:68"><expr pos:start="475:50" pos:end="475:68"><sizeof pos:start="475:50" pos:end="475:68">sizeof<argument_list pos:start="475:56" pos:end="475:68">(<argument pos:start="475:57" pos:end="475:67"><expr pos:start="475:57" pos:end="475:67"><name pos:start="475:57" pos:end="475:67"><name pos:start="475:57" pos:end="475:57">s</name><operator pos:start="475:58" pos:end="475:59">-&gt;</operator><name pos:start="475:60" pos:end="475:67">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="477:9" pos:end="481:28"><expr pos:start="477:9" pos:end="481:27"><call pos:start="477:9" pos:end="481:27"><name pos:start="477:9" pos:end="477:14">av_log</name><argument_list pos:start="477:15" pos:end="481:27">(<argument pos:start="477:16" pos:end="477:16"><expr pos:start="477:16" pos:end="477:16"><name pos:start="477:16" pos:end="477:16">s</name></expr></argument>, <argument pos:start="477:19" pos:end="477:29"><expr pos:start="477:19" pos:end="477:29"><name pos:start="477:19" pos:end="477:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="477:32" pos:end="477:63"><expr pos:start="477:32" pos:end="477:63"><literal type="string" pos:start="477:32" pos:end="477:63">"Status %d: Redirecting to %s\n"</literal></expr></argument>,

               <argument pos:start="479:16" pos:end="479:33"><expr pos:start="479:16" pos:end="479:33"><name pos:start="479:16" pos:end="479:33"><name pos:start="479:16" pos:end="479:20">reply</name><operator pos:start="479:21" pos:end="479:22">-&gt;</operator><name pos:start="479:23" pos:end="479:33">status_code</name></name></expr></argument>,

               <argument pos:start="481:16" pos:end="481:26"><expr pos:start="481:16" pos:end="481:26"><name pos:start="481:16" pos:end="481:26"><name pos:start="481:16" pos:end="481:16">s</name><operator pos:start="481:17" pos:end="481:18">-&gt;</operator><name pos:start="481:19" pos:end="481:26">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="483:9" pos:end="483:22">goto <name pos:start="483:14" pos:end="483:21">redirect</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:23"><expr pos:start="487:5" pos:end="487:22"><call pos:start="487:5" pos:end="487:22"><name pos:start="487:5" pos:end="487:20">ff_network_close</name><argument_list pos:start="487:21" pos:end="487:22">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="489:5" pos:end="489:15">return <expr pos:start="489:12" pos:end="489:14"><name pos:start="489:12" pos:end="489:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
