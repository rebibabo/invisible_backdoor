<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6964.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">decode_p_picture_primary_header</name><parameter_list pos:start="1:43" pos:end="1:57">(<parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:53">VC9Context</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:13">

    <comment type="block" pos:start="5:5" pos:end="5:54">/* INTERFRM, FRMCNT, RANGEREDFRM read in caller */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GetBitContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">gb</name> <init pos:start="7:23" pos:end="7:32">= <expr pos:start="7:25" pos:end="7:32"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:32"><name pos:start="7:26" pos:end="7:26">v</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:29">s</name><operator pos:start="7:30" pos:end="7:30">.</operator><name pos:start="7:31" pos:end="7:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">lowquant</name></decl>, <decl pos:start="9:19" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:25">pqindex</name></decl>, <decl pos:start="9:28" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:33">status</name> <init pos:start="9:35" pos:end="9:37">= <expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:11">pqindex</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:29"><name pos:start="13:15" pos:end="13:22">get_bits</name><argument_list pos:start="13:23" pos:end="13:29">(<argument pos:start="13:24" pos:end="13:25"><expr pos:start="13:24" pos:end="13:25"><name pos:start="13:24" pos:end="13:25">gb</name></expr></argument>, <argument pos:start="13:28" pos:end="13:28"><expr pos:start="13:28" pos:end="13:28"><literal type="number" pos:start="13:28" pos:end="13:28">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="17:41">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:9">v</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:25">quantizer_mode</name></name> <operator pos:start="15:27" pos:end="15:28">==</operator> <name pos:start="15:30" pos:end="15:49">QUANT_FRAME_IMPLICIT</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:41"><block_content pos:start="17:9" pos:end="17:41">

        <expr_stmt pos:start="17:9" pos:end="17:41"><expr pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">v</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:13">pq</name></name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:40"><name pos:start="17:17" pos:end="17:28">pquant_table</name><index pos:start="17:29" pos:end="17:31">[<expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr>]</index><index pos:start="17:32" pos:end="17:40">[<expr pos:start="17:33" pos:end="17:39"><name pos:start="17:33" pos:end="17:39">pqindex</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="19:5" pos:end="25:5">else

    <block pos:start="21:5" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:59">

        <expr_stmt pos:start="23:9" pos:end="23:59"><expr pos:start="23:9" pos:end="23:58"><name pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:9">v</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:13">pq</name></name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:58"><name pos:start="23:17" pos:end="23:28">pquant_table</name><index pos:start="23:29" pos:end="23:49">[<expr pos:start="23:30" pos:end="23:48"><name pos:start="23:30" pos:end="23:46"><name pos:start="23:30" pos:end="23:30">v</name><operator pos:start="23:31" pos:end="23:32">-&gt;</operator><name pos:start="23:33" pos:end="23:46">quantizer_mode</name></name><operator pos:start="23:47" pos:end="23:47">-</operator><literal type="number" pos:start="23:48" pos:end="23:48">1</literal></expr>]</index><index pos:start="23:50" pos:end="23:58">[<expr pos:start="23:51" pos:end="23:57"><name pos:start="23:51" pos:end="23:57">pqindex</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="27:5" pos:end="27:49"><if pos:start="27:5" pos:end="27:49">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:15">pqindex</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">9</literal></expr>)</condition><block type="pseudo" pos:start="27:22" pos:end="27:49"><block_content pos:start="27:22" pos:end="27:49"> <expr_stmt pos:start="27:22" pos:end="27:49"><expr pos:start="27:22" pos:end="27:48"><name pos:start="27:22" pos:end="27:30"><name pos:start="27:22" pos:end="27:22">v</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:30">halfpq</name></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <call pos:start="27:34" pos:end="27:48"><name pos:start="27:34" pos:end="27:41">get_bits</name><argument_list pos:start="27:42" pos:end="27:48">(<argument pos:start="27:43" pos:end="27:44"><expr pos:start="27:43" pos:end="27:44"><name pos:start="27:43" pos:end="27:44">gb</name></expr></argument>, <argument pos:start="27:47" pos:end="27:47"><expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="29:5" pos:end="31:40"><if pos:start="29:5" pos:end="31:40">if <condition pos:start="29:8" pos:end="29:50">(<expr pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:9">v</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:25">quantizer_mode</name></name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:49">QUANT_FRAME_EXPLICIT</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:40"><block_content pos:start="31:9" pos:end="31:40">

        <expr_stmt pos:start="31:9" pos:end="31:40"><expr pos:start="31:9" pos:end="31:39"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:9">v</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:21">pquantizer</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <call pos:start="31:25" pos:end="31:39"><name pos:start="31:25" pos:end="31:32">get_bits</name><argument_list pos:start="31:33" pos:end="31:39">(<argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><name pos:start="31:34" pos:end="31:35">gb</name></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:29"><expr pos:start="33:5" pos:end="35:28"><call pos:start="33:5" pos:end="35:28"><name pos:start="33:5" pos:end="33:10">av_log</name><argument_list pos:start="33:11" pos:end="35:28">(<argument pos:start="33:12" pos:end="33:21"><expr pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:12">v</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:15">s</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:21">avctx</name></name></expr></argument>, <argument pos:start="33:24" pos:end="33:35"><expr pos:start="33:24" pos:end="33:35"><name pos:start="33:24" pos:end="33:35">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="33:38" pos:end="33:63"><expr pos:start="33:38" pos:end="33:63"><literal type="string" pos:start="33:38" pos:end="33:63">"P Frame: QP=%i (+%i/2)\n"</literal></expr></argument>,

           <argument pos:start="35:12" pos:end="35:16"><expr pos:start="35:12" pos:end="35:16"><name pos:start="35:12" pos:end="35:16"><name pos:start="35:12" pos:end="35:12">v</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:16">pq</name></name></expr></argument>, <argument pos:start="35:19" pos:end="35:27"><expr pos:start="35:19" pos:end="35:27"><name pos:start="35:19" pos:end="35:27"><name pos:start="35:19" pos:end="35:19">v</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:27">halfpq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="40:0"><if pos:start="37:5" pos:end="40:0">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:9">v</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:22">extended_mv</name></name> <operator pos:start="37:24" pos:end="37:25">==</operator> <literal type="number" pos:start="37:27" pos:end="37:27">1</literal></expr>)</condition><block type="pseudo" pos:start="37:30" pos:end="40:0"><block_content pos:start="37:30" pos:end="40:0"> <expr_stmt pos:start="37:30" pos:end="40:0"><expr pos:start="37:30" pos:end="37:62"><name pos:start="37:30" pos:end="37:39"><name pos:start="37:30" pos:end="37:30">v</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:39">mvrange</name></name> <operator pos:start="37:41" pos:end="37:41">=</operator> <call pos:start="37:43" pos:end="37:62"><name pos:start="37:43" pos:end="37:52">get_prefix</name><argument_list pos:start="37:53" pos:end="37:62">(<argument pos:start="37:54" pos:end="37:55"><expr pos:start="37:54" pos:end="37:55"><name pos:start="37:54" pos:end="37:55">gb</name></expr></argument>, <argument pos:start="37:58" pos:end="37:58"><expr pos:start="37:58" pos:end="37:58"><literal type="number" pos:start="37:58" pos:end="37:58">0</literal></expr></argument>, <argument pos:start="37:61" pos:end="37:61"><expr pos:start="37:61" pos:end="37:61"><literal type="number" pos:start="37:61" pos:end="37:61">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="39:1" pos:end="39:24">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:24">HAS_ADVANCED_PROFILE</name></expr></cpp:if>

    <if_stmt pos:start="41:5" pos:end="53:53"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:9">v</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:18">profile</name></name> <operator pos:start="41:20" pos:end="41:20">&gt;</operator> <name pos:start="41:22" pos:end="41:33">PROFILE_MAIN</name></expr>)</condition>

    <block pos:start="43:5" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:59">

        <if_stmt pos:start="45:9" pos:end="45:59"><if pos:start="45:9" pos:end="45:59">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:13">v</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:27">postprocflag</name></name></expr>)</condition><block type="pseudo" pos:start="45:30" pos:end="45:59"><block_content pos:start="45:30" pos:end="45:59"> <expr_stmt pos:start="45:30" pos:end="45:59"><expr pos:start="45:30" pos:end="45:58"><name pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:30">v</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:40">postproc</name></name> <operator pos:start="45:42" pos:end="45:42">=</operator> <call pos:start="45:44" pos:end="45:58"><name pos:start="45:44" pos:end="45:51">get_bits</name><argument_list pos:start="45:52" pos:end="45:58">(<argument pos:start="45:53" pos:end="45:54"><expr pos:start="45:53" pos:end="45:54"><name pos:start="45:53" pos:end="45:54">gb</name></expr></argument>, <argument pos:start="45:57" pos:end="45:57"><expr pos:start="45:57" pos:end="45:57"><literal type="number" pos:start="45:57" pos:end="45:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="49:5" pos:end="53:53">else

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

        if <condition pos:start="53:12" pos:end="53:24">(<expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:13">v</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">multires</name></name></expr>)</condition><block type="pseudo" pos:start="53:26" pos:end="53:53"><block_content pos:start="53:26" pos:end="53:53"> <expr_stmt pos:start="53:26" pos:end="53:53"><expr pos:start="53:26" pos:end="53:52"><name pos:start="53:26" pos:end="53:34"><name pos:start="53:26" pos:end="53:26">v</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:34">respic</name></name> <operator pos:start="53:36" pos:end="53:36">=</operator> <call pos:start="53:38" pos:end="53:52"><name pos:start="53:38" pos:end="53:45">get_bits</name><argument_list pos:start="53:46" pos:end="53:52">(<argument pos:start="53:47" pos:end="53:48"><expr pos:start="53:47" pos:end="53:48"><name pos:start="53:47" pos:end="53:48">gb</name></expr></argument>, <argument pos:start="53:51" pos:end="53:51"><expr pos:start="53:51" pos:end="53:51"><literal type="number" pos:start="53:51" pos:end="53:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:42"><expr pos:start="55:5" pos:end="55:41"><name pos:start="55:5" pos:end="55:12">lowquant</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <ternary pos:start="55:16" pos:end="55:41"><condition pos:start="55:16" pos:end="55:35"><expr pos:start="55:16" pos:end="55:33"><operator pos:start="55:16" pos:end="55:16">(</operator><name pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:17">v</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:29">pquantizer</name></name><operator pos:start="55:30" pos:end="55:30">&gt;</operator><literal type="number" pos:start="55:31" pos:end="55:32">12</literal><operator pos:start="55:33" pos:end="55:33">)</operator></expr> ?</condition><then pos:start="55:37" pos:end="55:37"> <expr pos:start="55:37" pos:end="55:37"><literal type="number" pos:start="55:37" pos:end="55:37">0</literal></expr> </then><else pos:start="55:39" pos:end="55:41">: <expr pos:start="55:41" pos:end="55:41"><literal type="number" pos:start="55:41" pos:end="55:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:64"><expr pos:start="57:5" pos:end="57:63"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:5">v</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:14">mv_mode</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:63"><name pos:start="57:18" pos:end="57:31">mv_pmode_table</name><index pos:start="57:32" pos:end="57:41">[<expr pos:start="57:33" pos:end="57:40"><name pos:start="57:33" pos:end="57:40">lowquant</name></expr>]</index><index pos:start="57:42" pos:end="57:63">[<expr pos:start="57:43" pos:end="57:62"><call pos:start="57:43" pos:end="57:62"><name pos:start="57:43" pos:end="57:52">get_prefix</name><argument_list pos:start="57:53" pos:end="57:62">(<argument pos:start="57:54" pos:end="57:55"><expr pos:start="57:54" pos:end="57:55"><name pos:start="57:54" pos:end="57:55">gb</name></expr></argument>, <argument pos:start="57:58" pos:end="57:58"><expr pos:start="57:58" pos:end="57:58"><literal type="number" pos:start="57:58" pos:end="57:58">1</literal></expr></argument>, <argument pos:start="57:61" pos:end="57:61"><expr pos:start="57:61" pos:end="57:61"><literal type="number" pos:start="57:61" pos:end="57:61">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="69:5"><if pos:start="59:5" pos:end="69:5">if <condition pos:start="59:8" pos:end="59:46">(<expr pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:9">v</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:18">mv_mode</name></name> <operator pos:start="59:20" pos:end="59:21">==</operator> <name pos:start="59:23" pos:end="59:45">MV_PMODE_INTENSITY_COMP</name></expr>)</condition>

    <block pos:start="61:5" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:38">

        <expr_stmt pos:start="63:9" pos:end="63:69"><expr pos:start="63:9" pos:end="63:68"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:9">v</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:19">mv_mode2</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:68"><name pos:start="63:23" pos:end="63:36">mv_pmode_table</name><index pos:start="63:37" pos:end="63:46">[<expr pos:start="63:38" pos:end="63:45"><name pos:start="63:38" pos:end="63:45">lowquant</name></expr>]</index><index pos:start="63:47" pos:end="63:68">[<expr pos:start="63:48" pos:end="63:67"><call pos:start="63:48" pos:end="63:67"><name pos:start="63:48" pos:end="63:57">get_prefix</name><argument_list pos:start="63:58" pos:end="63:67">(<argument pos:start="63:59" pos:end="63:60"><expr pos:start="63:59" pos:end="63:60"><name pos:start="63:59" pos:end="63:60">gb</name></expr></argument>, <argument pos:start="63:63" pos:end="63:63"><expr pos:start="63:63" pos:end="63:63"><literal type="number" pos:start="63:63" pos:end="63:63">1</literal></expr></argument>, <argument pos:start="63:66" pos:end="63:66"><expr pos:start="63:66" pos:end="63:66"><literal type="number" pos:start="63:66" pos:end="63:66">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:38"><expr pos:start="65:9" pos:end="65:37"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:9">v</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:19">lumscale</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:37"><name pos:start="65:23" pos:end="65:30">get_bits</name><argument_list pos:start="65:31" pos:end="65:37">(<argument pos:start="65:32" pos:end="65:33"><expr pos:start="65:32" pos:end="65:33"><name pos:start="65:32" pos:end="65:33">gb</name></expr></argument>, <argument pos:start="65:36" pos:end="65:36"><expr pos:start="65:36" pos:end="65:36"><literal type="number" pos:start="65:36" pos:end="65:36">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">v</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:19">lumshift</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:37"><name pos:start="67:23" pos:end="67:30">get_bits</name><argument_list pos:start="67:31" pos:end="67:37">(<argument pos:start="67:32" pos:end="67:33"><expr pos:start="67:32" pos:end="67:33"><name pos:start="67:32" pos:end="67:33">gb</name></expr></argument>, <argument pos:start="67:36" pos:end="67:36"><expr pos:start="67:36" pos:end="67:36"><literal type="number" pos:start="67:36" pos:end="67:36">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
