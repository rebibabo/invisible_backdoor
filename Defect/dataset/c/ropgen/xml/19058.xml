<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19058.c" pos:tabs="8"><function pos:start="1:1" pos:end="429:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">iscsi_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="429:1">{<block_content pos:start="7:5" pos:end="427:15">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IscsiLun</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">iscsilun</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:27">bs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:24">iscsi_context</name></name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:31">iscsi</name> <init pos:start="9:33" pos:end="9:38">= <expr pos:start="9:35" pos:end="9:38"><name pos:start="9:35" pos:end="9:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">iscsi_url</name></name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:31">iscsi_url</name> <init pos:start="11:33" pos:end="11:38">= <expr pos:start="11:35" pos:end="11:38"><name pos:start="11:35" pos:end="11:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:20">scsi_task</name></name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:26">task</name> <init pos:start="13:28" pos:end="13:33">= <expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:45"><decl pos:start="15:5" pos:end="15:44"><type pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:32">scsi_inquiry_standard</name></name> <modifier pos:start="15:34" pos:end="15:34">*</modifier></type><name pos:start="15:35" pos:end="15:37">inq</name> <init pos:start="15:39" pos:end="15:44">= <expr pos:start="15:41" pos:end="15:44"><name pos:start="15:41" pos:end="15:44">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:49"><decl pos:start="17:5" pos:end="17:48"><type pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:39">scsi_inquiry_supported_pages</name></name> <modifier pos:start="17:41" pos:end="17:41">*</modifier></type><name pos:start="17:42" pos:end="17:48">inq_vpd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:24">initiator_name</name> <init pos:start="19:26" pos:end="19:31">= <expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">QemuOpts</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:15"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>, <decl pos:start="27:12" pos:end="27:14"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:12" pos:end="27:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:38">(<expr pos:start="31:9" pos:end="31:37"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:25">BDRV_SECTOR_SIZE</name> <operator pos:start="31:27" pos:end="31:27">%</operator> <literal type="number" pos:start="31:29" pos:end="31:31">512</literal><operator pos:start="31:32" pos:end="31:32">)</operator> <operator pos:start="31:34" pos:end="31:35">!=</operator> <literal type="number" pos:start="31:37" pos:end="31:37">0</literal></expr>)</condition> <block pos:start="31:40" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:23">

        <expr_stmt pos:start="33:9" pos:end="37:47"><expr pos:start="33:9" pos:end="37:46"><call pos:start="33:9" pos:end="37:46"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="37:46">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="37:27"><expr pos:start="33:26" pos:end="37:27"><literal type="string" pos:start="33:26" pos:end="33:60">"iSCSI: Invalid BDRV_SECTOR_SIZE. "</literal>

                   <literal type="string" pos:start="35:20" pos:end="35:62">"BDRV_SECTOR_SIZE(%lld) is not a multiple "</literal>

                   <literal type="string" pos:start="37:20" pos:end="37:27">"of 512"</literal></expr></argument>, <argument pos:start="37:30" pos:end="37:45"><expr pos:start="37:30" pos:end="37:45"><name pos:start="37:30" pos:end="37:45">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:66"><expr pos:start="45:5" pos:end="45:65"><name pos:start="45:5" pos:end="45:8">opts</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:65"><name pos:start="45:12" pos:end="45:27">qemu_opts_create</name><argument_list pos:start="45:28" pos:end="45:65">(<argument pos:start="45:29" pos:end="45:41"><expr pos:start="45:29" pos:end="45:41"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:41">runtime_opts</name></expr></argument>, <argument pos:start="45:44" pos:end="45:47"><expr pos:start="45:44" pos:end="45:47"><name pos:start="45:44" pos:end="45:47">NULL</name></expr></argument>, <argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">0</literal></expr></argument>, <argument pos:start="45:53" pos:end="45:64"><expr pos:start="45:53" pos:end="45:64"><operator pos:start="45:53" pos:end="45:53">&amp;</operator><name pos:start="45:54" pos:end="45:64">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><call pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:26">qemu_opts_absorb_qdict</name><argument_list pos:start="47:27" pos:end="47:53">(<argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><name pos:start="47:28" pos:end="47:31">opts</name></expr></argument>, <argument pos:start="47:34" pos:end="47:40"><expr pos:start="47:34" pos:end="47:40"><name pos:start="47:34" pos:end="47:40">options</name></expr></argument>, <argument pos:start="47:43" pos:end="47:52"><expr pos:start="47:43" pos:end="47:52"><operator pos:start="47:43" pos:end="47:43">&amp;</operator><name pos:start="47:44" pos:end="47:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:17">local_err</name></expr>)</condition> <block pos:start="49:20" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:17">

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><call pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:23">error_propagate</name><argument_list pos:start="51:24" pos:end="51:40">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">errp</name></expr></argument>, <argument pos:start="51:31" pos:end="51:39"><expr pos:start="51:31" pos:end="51:39"><name pos:start="51:31" pos:end="51:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:46"><expr pos:start="61:5" pos:end="61:45"><name pos:start="61:5" pos:end="61:12">filename</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <call pos:start="61:16" pos:end="61:45"><name pos:start="61:16" pos:end="61:27">qemu_opt_get</name><argument_list pos:start="61:28" pos:end="61:45">(<argument pos:start="61:29" pos:end="61:32"><expr pos:start="61:29" pos:end="61:32"><name pos:start="61:29" pos:end="61:32">opts</name></expr></argument>, <argument pos:start="61:35" pos:end="61:44"><expr pos:start="61:35" pos:end="61:44"><literal type="string" pos:start="61:35" pos:end="61:44">"filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:54"><expr pos:start="65:5" pos:end="65:53"><name pos:start="65:5" pos:end="65:13">iscsi_url</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <call pos:start="65:17" pos:end="65:53"><name pos:start="65:17" pos:end="65:36">iscsi_parse_full_url</name><argument_list pos:start="65:37" pos:end="65:53">(<argument pos:start="65:38" pos:end="65:42"><expr pos:start="65:38" pos:end="65:42"><name pos:start="65:38" pos:end="65:42">iscsi</name></expr></argument>, <argument pos:start="65:45" pos:end="65:52"><expr pos:start="65:45" pos:end="65:52"><name pos:start="65:45" pos:end="65:52">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:26">(<expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:17">iscsi_url</name> <operator pos:start="67:19" pos:end="67:20">==</operator> <name pos:start="67:22" pos:end="67:25">NULL</name></expr>)</condition> <block pos:start="67:28" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:63"><expr pos:start="69:9" pos:end="69:62"><call pos:start="69:9" pos:end="69:62"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:62">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:51"><expr pos:start="69:26" pos:end="69:51"><literal type="string" pos:start="69:26" pos:end="69:51">"Failed to parse URL : %s"</literal></expr></argument>, <argument pos:start="69:54" pos:end="69:61"><expr pos:start="69:54" pos:end="69:61"><name pos:start="69:54" pos:end="69:61">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><call pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:10">memset</name><argument_list pos:start="79:11" pos:end="79:41">(<argument pos:start="79:12" pos:end="79:19"><expr pos:start="79:12" pos:end="79:19"><name pos:start="79:12" pos:end="79:19">iscsilun</name></expr></argument>, <argument pos:start="79:22" pos:end="79:22"><expr pos:start="79:22" pos:end="79:22"><literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr></argument>, <argument pos:start="79:25" pos:end="79:40"><expr pos:start="79:25" pos:end="79:40"><sizeof pos:start="79:25" pos:end="79:40">sizeof<argument_list pos:start="79:31" pos:end="79:40">(<argument pos:start="79:32" pos:end="79:39"><expr pos:start="79:32" pos:end="79:39"><name pos:start="79:32" pos:end="79:39">IscsiLun</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:61"><expr pos:start="83:5" pos:end="83:60"><name pos:start="83:5" pos:end="83:18">initiator_name</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <call pos:start="83:22" pos:end="83:60"><name pos:start="83:22" pos:end="83:41">parse_initiator_name</name><argument_list pos:start="83:42" pos:end="83:60">(<argument pos:start="83:43" pos:end="83:59"><expr pos:start="83:43" pos:end="83:59"><name pos:start="83:43" pos:end="83:59"><name pos:start="83:43" pos:end="83:51">iscsi_url</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:59">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:9">iscsi</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:32">iscsi_create_context</name><argument_list pos:start="87:33" pos:end="87:48">(<argument pos:start="87:34" pos:end="87:47"><expr pos:start="87:34" pos:end="87:47"><name pos:start="87:34" pos:end="87:47">initiator_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:22">(<expr pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:13">iscsi</name> <operator pos:start="89:15" pos:end="89:16">==</operator> <name pos:start="89:18" pos:end="89:21">NULL</name></expr>)</condition> <block pos:start="89:24" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:17">

        <expr_stmt pos:start="91:9" pos:end="91:67"><expr pos:start="91:9" pos:end="91:66"><call pos:start="91:9" pos:end="91:66"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="91:66">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:65"><expr pos:start="91:26" pos:end="91:65"><literal type="string" pos:start="91:26" pos:end="91:65">"iSCSI: Failed to create iSCSI context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <operator pos:start="93:15" pos:end="93:15">-</operator><name pos:start="93:16" pos:end="93:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:55">(<expr pos:start="101:9" pos:end="101:54"><call pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:28">iscsi_set_targetname</name><argument_list pos:start="101:29" pos:end="101:54">(<argument pos:start="101:30" pos:end="101:34"><expr pos:start="101:30" pos:end="101:34"><name pos:start="101:30" pos:end="101:34">iscsi</name></expr></argument>, <argument pos:start="101:37" pos:end="101:53"><expr pos:start="101:37" pos:end="101:53"><name pos:start="101:37" pos:end="101:53"><name pos:start="101:37" pos:end="101:45">iscsi_url</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:53">target</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:57" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:17">

        <expr_stmt pos:start="103:9" pos:end="103:62"><expr pos:start="103:9" pos:end="103:61"><call pos:start="103:9" pos:end="103:61"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="103:61">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">errp</name></expr></argument>, <argument pos:start="103:26" pos:end="103:60"><expr pos:start="103:26" pos:end="103:60"><literal type="string" pos:start="103:26" pos:end="103:60">"iSCSI: Failed to set target name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:22"><expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">-</operator><name pos:start="105:16" pos:end="105:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:17">goto <name pos:start="107:14" pos:end="107:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="129:5"><if pos:start="113:5" pos:end="129:5">if <condition pos:start="113:8" pos:end="113:32">(<expr pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:17">iscsi_url</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:23">user</name></name> <operator pos:start="113:25" pos:end="113:26">!=</operator> <name pos:start="113:28" pos:end="113:31">NULL</name></expr>)</condition> <block pos:start="113:34" pos:end="129:5">{<block_content pos:start="115:9" pos:end="127:9">

        <expr_stmt pos:start="115:9" pos:end="117:65"><expr pos:start="115:9" pos:end="117:64"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="117:64"><name pos:start="115:15" pos:end="115:46">iscsi_set_initiator_username_pwd</name><argument_list pos:start="115:47" pos:end="117:64">(<argument pos:start="115:48" pos:end="115:52"><expr pos:start="115:48" pos:end="115:52"><name pos:start="115:48" pos:end="115:52">iscsi</name></expr></argument>, <argument pos:start="115:55" pos:end="115:69"><expr pos:start="115:55" pos:end="115:69"><name pos:start="115:55" pos:end="115:69"><name pos:start="115:55" pos:end="115:63">iscsi_url</name><operator pos:start="115:64" pos:end="115:65">-&gt;</operator><name pos:start="115:66" pos:end="115:69">user</name></name></expr></argument>,

                                              <argument pos:start="117:47" pos:end="117:63"><expr pos:start="117:47" pos:end="117:63"><name pos:start="117:47" pos:end="117:63"><name pos:start="117:47" pos:end="117:55">iscsi_url</name><operator pos:start="117:56" pos:end="117:57">-&gt;</operator><name pos:start="117:58" pos:end="117:63">passwd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="127:9">if <condition pos:start="119:12" pos:end="119:21">(<expr pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:18">!=</operator> <literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>)</condition> <block pos:start="119:23" pos:end="127:9">{<block_content pos:start="121:13" pos:end="125:21">

            <expr_stmt pos:start="121:13" pos:end="121:78"><expr pos:start="121:13" pos:end="121:77"><call pos:start="121:13" pos:end="121:77"><name pos:start="121:13" pos:end="121:22">error_setg</name><argument_list pos:start="121:23" pos:end="121:77">(<argument pos:start="121:24" pos:end="121:27"><expr pos:start="121:24" pos:end="121:27"><name pos:start="121:24" pos:end="121:27">errp</name></expr></argument>, <argument pos:start="121:30" pos:end="121:76"><expr pos:start="121:30" pos:end="121:76"><literal type="string" pos:start="121:30" pos:end="121:76">"Failed to set initiator username and password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <operator pos:start="123:19" pos:end="123:19">-</operator><name pos:start="123:20" pos:end="123:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:21">goto <name pos:start="125:18" pos:end="125:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:64">/* check if we got CHAP username/password via the options */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:53"><expr pos:start="135:5" pos:end="135:52"><call pos:start="135:5" pos:end="135:52"><name pos:start="135:5" pos:end="135:14">parse_chap</name><argument_list pos:start="135:15" pos:end="135:52">(<argument pos:start="135:16" pos:end="135:20"><expr pos:start="135:16" pos:end="135:20"><name pos:start="135:16" pos:end="135:20">iscsi</name></expr></argument>, <argument pos:start="135:23" pos:end="135:39"><expr pos:start="135:23" pos:end="135:39"><name pos:start="135:23" pos:end="135:39"><name pos:start="135:23" pos:end="135:31">iscsi_url</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:39">target</name></name></expr></argument>, <argument pos:start="135:42" pos:end="135:51"><expr pos:start="135:42" pos:end="135:51"><operator pos:start="135:42" pos:end="135:42">&amp;</operator><name pos:start="135:43" pos:end="135:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="137:26">(<expr pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:17">local_err</name> <operator pos:start="137:19" pos:end="137:20">!=</operator> <name pos:start="137:22" pos:end="137:25">NULL</name></expr>)</condition> <block pos:start="137:28" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:17">

        <expr_stmt pos:start="139:9" pos:end="139:41"><expr pos:start="139:9" pos:end="139:40"><call pos:start="139:9" pos:end="139:40"><name pos:start="139:9" pos:end="139:23">error_propagate</name><argument_list pos:start="139:24" pos:end="139:40">(<argument pos:start="139:25" pos:end="139:28"><expr pos:start="139:25" pos:end="139:28"><name pos:start="139:25" pos:end="139:28">errp</name></expr></argument>, <argument pos:start="139:31" pos:end="139:39"><expr pos:start="139:31" pos:end="139:39"><name pos:start="139:31" pos:end="139:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:22"><expr pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <operator pos:start="141:15" pos:end="141:15">-</operator><name pos:start="141:16" pos:end="141:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:17">goto <name pos:start="143:14" pos:end="143:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="149:65">(<expr pos:start="149:9" pos:end="149:64"><call pos:start="149:9" pos:end="149:59"><name pos:start="149:9" pos:end="149:30">iscsi_set_session_type</name><argument_list pos:start="149:31" pos:end="149:59">(<argument pos:start="149:32" pos:end="149:36"><expr pos:start="149:32" pos:end="149:36"><name pos:start="149:32" pos:end="149:36">iscsi</name></expr></argument>, <argument pos:start="149:39" pos:end="149:58"><expr pos:start="149:39" pos:end="149:58"><name pos:start="149:39" pos:end="149:58">ISCSI_SESSION_NORMAL</name></expr></argument>)</argument_list></call> <operator pos:start="149:61" pos:end="149:62">!=</operator> <literal type="number" pos:start="149:64" pos:end="149:64">0</literal></expr>)</condition> <block pos:start="149:67" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:17">

        <expr_stmt pos:start="151:9" pos:end="151:73"><expr pos:start="151:9" pos:end="151:72"><call pos:start="151:9" pos:end="151:72"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="151:72">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>, <argument pos:start="151:26" pos:end="151:71"><expr pos:start="151:26" pos:end="151:71"><literal type="string" pos:start="151:26" pos:end="151:71">"iSCSI: Failed to set session type to normal."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:22"><expr pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:11">ret</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <operator pos:start="153:15" pos:end="153:15">-</operator><name pos:start="153:16" pos:end="153:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="155:9" pos:end="155:17">goto <name pos:start="155:14" pos:end="155:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:68"><expr pos:start="161:5" pos:end="161:67"><call pos:start="161:5" pos:end="161:67"><name pos:start="161:5" pos:end="161:27">iscsi_set_header_digest</name><argument_list pos:start="161:28" pos:end="161:67">(<argument pos:start="161:29" pos:end="161:33"><expr pos:start="161:29" pos:end="161:33"><name pos:start="161:29" pos:end="161:33">iscsi</name></expr></argument>, <argument pos:start="161:36" pos:end="161:66"><expr pos:start="161:36" pos:end="161:66"><name pos:start="161:36" pos:end="161:66">ISCSI_HEADER_DIGEST_NONE_CRC32C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:55">/* check if we got HEADER_DIGEST via the options */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:62"><expr pos:start="167:5" pos:end="167:61"><call pos:start="167:5" pos:end="167:61"><name pos:start="167:5" pos:end="167:23">parse_header_digest</name><argument_list pos:start="167:24" pos:end="167:61">(<argument pos:start="167:25" pos:end="167:29"><expr pos:start="167:25" pos:end="167:29"><name pos:start="167:25" pos:end="167:29">iscsi</name></expr></argument>, <argument pos:start="167:32" pos:end="167:48"><expr pos:start="167:32" pos:end="167:48"><name pos:start="167:32" pos:end="167:48"><name pos:start="167:32" pos:end="167:40">iscsi_url</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:48">target</name></name></expr></argument>, <argument pos:start="167:51" pos:end="167:60"><expr pos:start="167:51" pos:end="167:60"><operator pos:start="167:51" pos:end="167:51">&amp;</operator><name pos:start="167:52" pos:end="167:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="177:5"><if pos:start="169:5" pos:end="177:5">if <condition pos:start="169:8" pos:end="169:26">(<expr pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:17">local_err</name> <operator pos:start="169:19" pos:end="169:20">!=</operator> <name pos:start="169:22" pos:end="169:25">NULL</name></expr>)</condition> <block pos:start="169:28" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:17">

        <expr_stmt pos:start="171:9" pos:end="171:41"><expr pos:start="171:9" pos:end="171:40"><call pos:start="171:9" pos:end="171:40"><name pos:start="171:9" pos:end="171:23">error_propagate</name><argument_list pos:start="171:24" pos:end="171:40">(<argument pos:start="171:25" pos:end="171:28"><expr pos:start="171:25" pos:end="171:28"><name pos:start="171:25" pos:end="171:28">errp</name></expr></argument>, <argument pos:start="171:31" pos:end="171:39"><expr pos:start="171:31" pos:end="171:39"><name pos:start="171:31" pos:end="171:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:22"><expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <operator pos:start="173:15" pos:end="173:15">-</operator><name pos:start="173:16" pos:end="173:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:17">goto <name pos:start="175:14" pos:end="175:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="181:5" pos:end="191:5"><if pos:start="181:5" pos:end="191:5">if <condition pos:start="181:8" pos:end="181:79">(<expr pos:start="181:9" pos:end="181:78"><call pos:start="181:9" pos:end="181:73"><name pos:start="181:9" pos:end="181:31">iscsi_full_connect_sync</name><argument_list pos:start="181:32" pos:end="181:73">(<argument pos:start="181:33" pos:end="181:37"><expr pos:start="181:33" pos:end="181:37"><name pos:start="181:33" pos:end="181:37">iscsi</name></expr></argument>, <argument pos:start="181:40" pos:end="181:56"><expr pos:start="181:40" pos:end="181:56"><name pos:start="181:40" pos:end="181:56"><name pos:start="181:40" pos:end="181:48">iscsi_url</name><operator pos:start="181:49" pos:end="181:50">-&gt;</operator><name pos:start="181:51" pos:end="181:56">portal</name></name></expr></argument>, <argument pos:start="181:59" pos:end="181:72"><expr pos:start="181:59" pos:end="181:72"><name pos:start="181:59" pos:end="181:72"><name pos:start="181:59" pos:end="181:67">iscsi_url</name><operator pos:start="181:68" pos:end="181:69">-&gt;</operator><name pos:start="181:70" pos:end="181:72">lun</name></name></expr></argument>)</argument_list></call> <operator pos:start="181:75" pos:end="181:76">!=</operator> <literal type="number" pos:start="181:78" pos:end="181:78">0</literal></expr>)</condition> <block pos:start="181:81" pos:end="191:5">{<block_content pos:start="183:9" pos:end="189:17">

        <expr_stmt pos:start="183:9" pos:end="185:36"><expr pos:start="183:9" pos:end="185:35"><call pos:start="183:9" pos:end="185:35"><name pos:start="183:9" pos:end="183:18">error_setg</name><argument_list pos:start="183:19" pos:end="185:35">(<argument pos:start="183:20" pos:end="183:23"><expr pos:start="183:20" pos:end="183:23"><name pos:start="183:20" pos:end="183:23">errp</name></expr></argument>, <argument pos:start="183:26" pos:end="183:63"><expr pos:start="183:26" pos:end="183:63"><literal type="string" pos:start="183:26" pos:end="183:63">"iSCSI: Failed to connect to LUN : %s"</literal></expr></argument>,

            <argument pos:start="185:13" pos:end="185:34"><expr pos:start="185:13" pos:end="185:34"><call pos:start="185:13" pos:end="185:34"><name pos:start="185:13" pos:end="185:27">iscsi_get_error</name><argument_list pos:start="185:28" pos:end="185:34">(<argument pos:start="185:29" pos:end="185:33"><expr pos:start="185:29" pos:end="185:33"><name pos:start="185:29" pos:end="185:33">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:22"><expr pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <operator pos:start="187:15" pos:end="187:15">-</operator><name pos:start="187:16" pos:end="187:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:17">goto <name pos:start="189:14" pos:end="189:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:28"><expr pos:start="195:5" pos:end="195:27"><name pos:start="195:5" pos:end="195:19"><name pos:start="195:5" pos:end="195:12">iscsilun</name><operator pos:start="195:13" pos:end="195:14">-&gt;</operator><name pos:start="195:15" pos:end="195:19">iscsi</name></name> <operator pos:start="195:21" pos:end="195:21">=</operator> <name pos:start="195:23" pos:end="195:27">iscsi</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:53"><expr pos:start="197:5" pos:end="197:52"><name pos:start="197:5" pos:end="197:25"><name pos:start="197:5" pos:end="197:12">iscsilun</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:25">aio_context</name></name> <operator pos:start="197:27" pos:end="197:27">=</operator> <call pos:start="197:29" pos:end="197:52"><name pos:start="197:29" pos:end="197:48">bdrv_get_aio_context</name><argument_list pos:start="197:49" pos:end="197:52">(<argument pos:start="197:50" pos:end="197:51"><expr pos:start="197:50" pos:end="197:51"><name pos:start="197:50" pos:end="197:51">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:37"><expr pos:start="199:5" pos:end="199:36"><name pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:12">iscsilun</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:17">lun</name></name>   <operator pos:start="199:21" pos:end="199:21">=</operator> <name pos:start="199:23" pos:end="199:36"><name pos:start="199:23" pos:end="199:31">iscsi_url</name><operator pos:start="199:32" pos:end="199:33">-&gt;</operator><name pos:start="199:34" pos:end="199:36">lun</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:36"><expr pos:start="201:5" pos:end="201:35"><name pos:start="201:5" pos:end="201:28"><name pos:start="201:5" pos:end="201:12">iscsilun</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:28">has_write_same</name></name> <operator pos:start="201:30" pos:end="201:30">=</operator> <name pos:start="201:32" pos:end="201:35">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="207:50"><expr pos:start="205:5" pos:end="207:49"><name pos:start="205:5" pos:end="205:8">task</name> <operator pos:start="205:10" pos:end="205:10">=</operator> <call pos:start="205:12" pos:end="207:49"><name pos:start="205:12" pos:end="205:27">iscsi_do_inquiry</name><argument_list pos:start="205:28" pos:end="207:49">(<argument pos:start="205:29" pos:end="205:43"><expr pos:start="205:29" pos:end="205:43"><name pos:start="205:29" pos:end="205:43"><name pos:start="205:29" pos:end="205:36">iscsilun</name><operator pos:start="205:37" pos:end="205:38">-&gt;</operator><name pos:start="205:39" pos:end="205:43">iscsi</name></name></expr></argument>, <argument pos:start="205:46" pos:end="205:58"><expr pos:start="205:46" pos:end="205:58"><name pos:start="205:46" pos:end="205:58"><name pos:start="205:46" pos:end="205:53">iscsilun</name><operator pos:start="205:54" pos:end="205:55">-&gt;</operator><name pos:start="205:56" pos:end="205:58">lun</name></name></expr></argument>, <argument pos:start="205:61" pos:end="205:61"><expr pos:start="205:61" pos:end="205:61"><literal type="number" pos:start="205:61" pos:end="205:61">0</literal></expr></argument>, <argument pos:start="205:64" pos:end="205:64"><expr pos:start="205:64" pos:end="205:64"><literal type="number" pos:start="205:64" pos:end="205:64">0</literal></expr></argument>,

                            <argument pos:start="207:29" pos:end="207:42"><expr pos:start="207:29" pos:end="207:42"><operator pos:start="207:29" pos:end="207:29">(</operator><name pos:start="207:30" pos:end="207:33">void</name> <operator pos:start="207:35" pos:end="207:35">*</operator><operator pos:start="207:36" pos:end="207:36">*</operator><operator pos:start="207:37" pos:end="207:37">)</operator> <operator pos:start="207:39" pos:end="207:39">&amp;</operator><name pos:start="207:40" pos:end="207:42">inq</name></expr></argument>, <argument pos:start="207:45" pos:end="207:48"><expr pos:start="207:45" pos:end="207:48"><name pos:start="207:45" pos:end="207:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="209:5" pos:end="215:5"><if pos:start="209:5" pos:end="215:5">if <condition pos:start="209:8" pos:end="209:21">(<expr pos:start="209:9" pos:end="209:20"><name pos:start="209:9" pos:end="209:12">task</name> <operator pos:start="209:14" pos:end="209:15">==</operator> <name pos:start="209:17" pos:end="209:20">NULL</name></expr>)</condition> <block pos:start="209:23" pos:end="215:5">{<block_content pos:start="211:9" pos:end="213:17">

        <expr_stmt pos:start="211:9" pos:end="211:22"><expr pos:start="211:9" pos:end="211:21"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <operator pos:start="211:15" pos:end="211:15">-</operator><name pos:start="211:16" pos:end="211:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="213:9" pos:end="213:17">goto <name pos:start="213:14" pos:end="213:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:48"><expr pos:start="217:5" pos:end="217:47"><name pos:start="217:5" pos:end="217:18"><name pos:start="217:5" pos:end="217:12">iscsilun</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:18">type</name></name> <operator pos:start="217:20" pos:end="217:20">=</operator> <name pos:start="217:22" pos:end="217:47"><name pos:start="217:22" pos:end="217:24">inq</name><operator pos:start="217:25" pos:end="217:26">-&gt;</operator><name pos:start="217:27" pos:end="217:47">periperal_device_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:30"><expr pos:start="219:5" pos:end="219:29"><call pos:start="219:5" pos:end="219:29"><name pos:start="219:5" pos:end="219:23">scsi_free_scsi_task</name><argument_list pos:start="219:24" pos:end="219:29">(<argument pos:start="219:25" pos:end="219:28"><expr pos:start="219:25" pos:end="219:28"><name pos:start="219:25" pos:end="219:28">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:16"><expr pos:start="221:5" pos:end="221:15"><name pos:start="221:5" pos:end="221:8">task</name> <operator pos:start="221:10" pos:end="221:10">=</operator> <name pos:start="221:12" pos:end="221:15">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:69">/* Check the write protect flag of the LUN if we want to write */</comment>

    <if_stmt pos:start="227:5" pos:end="237:5"><if pos:start="227:5" pos:end="237:5">if <condition pos:start="227:8" pos:end="229:43">(<expr pos:start="227:9" pos:end="229:42"><name pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:16">iscsilun</name><operator pos:start="227:17" pos:end="227:18">-&gt;</operator><name pos:start="227:19" pos:end="227:22">type</name></name> <operator pos:start="227:24" pos:end="227:25">==</operator> <name pos:start="227:27" pos:end="227:35">TYPE_DISK</name> <operator pos:start="227:37" pos:end="227:38">&amp;&amp;</operator> <operator pos:start="227:40" pos:end="227:40">(</operator><name pos:start="227:41" pos:end="227:45">flags</name> <operator pos:start="227:47" pos:end="227:47">&amp;</operator> <name pos:start="227:49" pos:end="227:59">BDRV_O_RDWR</name><operator pos:start="227:60" pos:end="227:60">)</operator> <operator pos:start="227:62" pos:end="227:63">&amp;&amp;</operator>

        <call pos:start="229:9" pos:end="229:42"><name pos:start="229:9" pos:end="229:32">iscsi_is_write_protected</name><argument_list pos:start="229:33" pos:end="229:42">(<argument pos:start="229:34" pos:end="229:41"><expr pos:start="229:34" pos:end="229:41"><name pos:start="229:34" pos:end="229:41">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:45" pos:end="237:5">{<block_content pos:start="231:9" pos:end="235:17">

        <expr_stmt pos:start="231:9" pos:end="231:76"><expr pos:start="231:9" pos:end="231:75"><call pos:start="231:9" pos:end="231:75"><name pos:start="231:9" pos:end="231:18">error_setg</name><argument_list pos:start="231:19" pos:end="231:75">(<argument pos:start="231:20" pos:end="231:23"><expr pos:start="231:20" pos:end="231:23"><name pos:start="231:20" pos:end="231:23">errp</name></expr></argument>, <argument pos:start="231:26" pos:end="231:74"><expr pos:start="231:26" pos:end="231:74"><literal type="string" pos:start="231:26" pos:end="231:74">"Cannot open a write protected LUN as read-write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:22"><expr pos:start="233:9" pos:end="233:21"><name pos:start="233:9" pos:end="233:11">ret</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <operator pos:start="233:15" pos:end="233:15">-</operator><name pos:start="233:16" pos:end="233:21">EACCES</name></expr>;</expr_stmt>

        <goto pos:start="235:9" pos:end="235:17">goto <name pos:start="235:14" pos:end="235:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="241:5" pos:end="241:50"><expr pos:start="241:5" pos:end="241:49"><call pos:start="241:5" pos:end="241:49"><name pos:start="241:5" pos:end="241:27">iscsi_readcapacity_sync</name><argument_list pos:start="241:28" pos:end="241:49">(<argument pos:start="241:29" pos:end="241:36"><expr pos:start="241:29" pos:end="241:36"><name pos:start="241:29" pos:end="241:36">iscsilun</name></expr></argument>, <argument pos:start="241:39" pos:end="241:48"><expr pos:start="241:39" pos:end="241:48"><operator pos:start="241:39" pos:end="241:39">&amp;</operator><name pos:start="241:40" pos:end="241:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="251:5"><if pos:start="243:5" pos:end="251:5">if <condition pos:start="243:8" pos:end="243:26">(<expr pos:start="243:9" pos:end="243:25"><name pos:start="243:9" pos:end="243:17">local_err</name> <operator pos:start="243:19" pos:end="243:20">!=</operator> <name pos:start="243:22" pos:end="243:25">NULL</name></expr>)</condition> <block pos:start="243:28" pos:end="251:5">{<block_content pos:start="245:9" pos:end="249:17">

        <expr_stmt pos:start="245:9" pos:end="245:41"><expr pos:start="245:9" pos:end="245:40"><call pos:start="245:9" pos:end="245:40"><name pos:start="245:9" pos:end="245:23">error_propagate</name><argument_list pos:start="245:24" pos:end="245:40">(<argument pos:start="245:25" pos:end="245:28"><expr pos:start="245:25" pos:end="245:28"><name pos:start="245:25" pos:end="245:28">errp</name></expr></argument>, <argument pos:start="245:31" pos:end="245:39"><expr pos:start="245:31" pos:end="245:39"><name pos:start="245:31" pos:end="245:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:22"><expr pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <operator pos:start="247:15" pos:end="247:15">-</operator><name pos:start="247:16" pos:end="247:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="249:9" pos:end="249:17">goto <name pos:start="249:14" pos:end="249:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:72"><expr pos:start="253:5" pos:end="253:71"><name pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:6">bs</name><operator pos:start="253:7" pos:end="253:8">-&gt;</operator><name pos:start="253:9" pos:end="253:21">total_sectors</name></name> <operator pos:start="253:23" pos:end="253:23">=</operator> <call pos:start="253:25" pos:end="253:71"><name pos:start="253:25" pos:end="253:39">sector_lun2qemu</name><argument_list pos:start="253:40" pos:end="253:71">(<argument pos:start="253:41" pos:end="253:60"><expr pos:start="253:41" pos:end="253:60"><name pos:start="253:41" pos:end="253:60"><name pos:start="253:41" pos:end="253:48">iscsilun</name><operator pos:start="253:49" pos:end="253:50">-&gt;</operator><name pos:start="253:51" pos:end="253:60">num_blocks</name></name></expr></argument>, <argument pos:start="253:63" pos:end="253:70"><expr pos:start="253:63" pos:end="253:70"><name pos:start="253:63" pos:end="253:70">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:49"><expr pos:start="255:5" pos:end="255:48"><name pos:start="255:5" pos:end="255:25"><name pos:start="255:5" pos:end="255:6">bs</name><operator pos:start="255:7" pos:end="255:8">-&gt;</operator><name pos:start="255:9" pos:end="255:25">request_alignment</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <name pos:start="255:29" pos:end="255:48"><name pos:start="255:29" pos:end="255:36">iscsilun</name><operator pos:start="255:37" pos:end="255:38">-&gt;</operator><name pos:start="255:39" pos:end="255:48">block_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="259:5" pos:end="265:7">/* We don't have any emulation for devices other than disks and CD-ROMs, so

     * this must be sg ioctl compatible. We force it to be sg, otherwise qemu

     * will try to read from the device to guess the image format.

     */</comment>

    <if_stmt pos:start="267:5" pos:end="271:5"><if pos:start="267:5" pos:end="271:5">if <condition pos:start="267:8" pos:end="267:66">(<expr pos:start="267:9" pos:end="267:65"><name pos:start="267:9" pos:end="267:22"><name pos:start="267:9" pos:end="267:16">iscsilun</name><operator pos:start="267:17" pos:end="267:18">-&gt;</operator><name pos:start="267:19" pos:end="267:22">type</name></name> <operator pos:start="267:24" pos:end="267:25">!=</operator> <name pos:start="267:27" pos:end="267:35">TYPE_DISK</name> <operator pos:start="267:37" pos:end="267:38">&amp;&amp;</operator> <name pos:start="267:40" pos:end="267:53"><name pos:start="267:40" pos:end="267:47">iscsilun</name><operator pos:start="267:48" pos:end="267:49">-&gt;</operator><name pos:start="267:50" pos:end="267:53">type</name></name> <operator pos:start="267:55" pos:end="267:56">!=</operator> <name pos:start="267:58" pos:end="267:65">TYPE_ROM</name></expr>)</condition> <block pos:start="267:68" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:19">

        <expr_stmt pos:start="269:9" pos:end="269:19"><expr pos:start="269:9" pos:end="269:18"><name pos:start="269:9" pos:end="269:14"><name pos:start="269:9" pos:end="269:10">bs</name><operator pos:start="269:11" pos:end="269:12">-&gt;</operator><name pos:start="269:13" pos:end="269:14">sg</name></name> <operator pos:start="269:16" pos:end="269:16">=</operator> <literal type="number" pos:start="269:18" pos:end="269:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="275:5" pos:end="279:54"><expr pos:start="275:5" pos:end="279:53"><name pos:start="275:5" pos:end="275:8">task</name> <operator pos:start="275:10" pos:end="275:10">=</operator> <call pos:start="275:12" pos:end="279:53"><name pos:start="275:12" pos:end="275:27">iscsi_do_inquiry</name><argument_list pos:start="275:28" pos:end="279:53">(<argument pos:start="275:29" pos:end="275:43"><expr pos:start="275:29" pos:end="275:43"><name pos:start="275:29" pos:end="275:43"><name pos:start="275:29" pos:end="275:36">iscsilun</name><operator pos:start="275:37" pos:end="275:38">-&gt;</operator><name pos:start="275:39" pos:end="275:43">iscsi</name></name></expr></argument>, <argument pos:start="275:46" pos:end="275:58"><expr pos:start="275:46" pos:end="275:58"><name pos:start="275:46" pos:end="275:58"><name pos:start="275:46" pos:end="275:53">iscsilun</name><operator pos:start="275:54" pos:end="275:55">-&gt;</operator><name pos:start="275:56" pos:end="275:58">lun</name></name></expr></argument>, <argument pos:start="275:61" pos:end="275:61"><expr pos:start="275:61" pos:end="275:61"><literal type="number" pos:start="275:61" pos:end="275:61">1</literal></expr></argument>,

                            <argument pos:start="277:29" pos:end="277:69"><expr pos:start="277:29" pos:end="277:69"><name pos:start="277:29" pos:end="277:69">SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES</name></expr></argument>,

                            <argument pos:start="279:29" pos:end="279:46"><expr pos:start="279:29" pos:end="279:46"><operator pos:start="279:29" pos:end="279:29">(</operator><name pos:start="279:30" pos:end="279:33">void</name> <operator pos:start="279:35" pos:end="279:35">*</operator><operator pos:start="279:36" pos:end="279:36">*</operator><operator pos:start="279:37" pos:end="279:37">)</operator> <operator pos:start="279:39" pos:end="279:39">&amp;</operator><name pos:start="279:40" pos:end="279:46">inq_vpd</name></expr></argument>, <argument pos:start="279:49" pos:end="279:52"><expr pos:start="279:49" pos:end="279:52"><name pos:start="279:49" pos:end="279:52">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="287:5"><if pos:start="281:5" pos:end="287:5">if <condition pos:start="281:8" pos:end="281:21">(<expr pos:start="281:9" pos:end="281:20"><name pos:start="281:9" pos:end="281:12">task</name> <operator pos:start="281:14" pos:end="281:15">==</operator> <name pos:start="281:17" pos:end="281:20">NULL</name></expr>)</condition> <block pos:start="281:23" pos:end="287:5">{<block_content pos:start="283:9" pos:end="285:17">

        <expr_stmt pos:start="283:9" pos:end="283:22"><expr pos:start="283:9" pos:end="283:21"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">=</operator> <operator pos:start="283:15" pos:end="283:15">-</operator><name pos:start="283:16" pos:end="283:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="285:9" pos:end="285:17">goto <name pos:start="285:14" pos:end="285:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <for pos:start="289:5" pos:end="353:5">for <control pos:start="289:9" pos:end="289:44">(<init pos:start="289:10" pos:end="289:15"><expr pos:start="289:10" pos:end="289:14"><name pos:start="289:10" pos:end="289:10">i</name> <operator pos:start="289:12" pos:end="289:12">=</operator> <literal type="number" pos:start="289:14" pos:end="289:14">0</literal></expr>;</init> <condition pos:start="289:17" pos:end="289:39"><expr pos:start="289:17" pos:end="289:38"><name pos:start="289:17" pos:end="289:17">i</name> <operator pos:start="289:19" pos:end="289:19">&lt;</operator> <name pos:start="289:21" pos:end="289:38"><name pos:start="289:21" pos:end="289:27">inq_vpd</name><operator pos:start="289:28" pos:end="289:29">-&gt;</operator><name pos:start="289:30" pos:end="289:38">num_pages</name></name></expr>;</condition> <incr pos:start="289:41" pos:end="289:43"><expr pos:start="289:41" pos:end="289:43"><name pos:start="289:41" pos:end="289:41">i</name><operator pos:start="289:42" pos:end="289:43">++</operator></expr></incr>)</control> <block pos:start="289:46" pos:end="353:5">{<block_content pos:start="291:9" pos:end="351:9">

        <decl_stmt pos:start="291:9" pos:end="291:35"><decl pos:start="291:9" pos:end="291:34"><type pos:start="291:9" pos:end="291:26"><name pos:start="291:9" pos:end="291:24"><name pos:start="291:9" pos:end="291:14">struct</name> <name pos:start="291:16" pos:end="291:24">scsi_task</name></name> <modifier pos:start="291:26" pos:end="291:26">*</modifier></type><name pos:start="291:27" pos:end="291:34">inq_task</name></decl>;</decl_stmt>

        <decl_stmt pos:start="293:9" pos:end="293:64"><decl pos:start="293:9" pos:end="293:63"><type pos:start="293:9" pos:end="293:56"><name pos:start="293:9" pos:end="293:54"><name pos:start="293:9" pos:end="293:14">struct</name> <name pos:start="293:16" pos:end="293:54">scsi_inquiry_logical_block_provisioning</name></name> <modifier pos:start="293:56" pos:end="293:56">*</modifier></type><name pos:start="293:57" pos:end="293:63">inq_lbp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="295:9" pos:end="295:49"><decl pos:start="295:9" pos:end="295:48"><type pos:start="295:9" pos:end="295:42"><name pos:start="295:9" pos:end="295:40"><name pos:start="295:9" pos:end="295:14">struct</name> <name pos:start="295:16" pos:end="295:40">scsi_inquiry_block_limits</name></name> <modifier pos:start="295:42" pos:end="295:42">*</modifier></type><name pos:start="295:43" pos:end="295:48">inq_bl</name></decl>;</decl_stmt>

        <switch pos:start="297:9" pos:end="351:9">switch <condition pos:start="297:16" pos:end="297:34">(<expr pos:start="297:17" pos:end="297:33"><name pos:start="297:17" pos:end="297:33"><name pos:start="297:17" pos:end="297:23">inq_vpd</name><operator pos:start="297:24" pos:end="297:25">-&gt;</operator><name pos:start="297:26" pos:end="297:30">pages</name><index pos:start="297:31" pos:end="297:33">[<expr pos:start="297:32" pos:end="297:32"><name pos:start="297:32" pos:end="297:32">i</name></expr>]</index></name></expr>)</condition> <block pos:start="297:36" pos:end="351:9">{<block_content pos:start="299:9" pos:end="349:18">

        <case pos:start="299:9" pos:end="299:62">case <expr pos:start="299:14" pos:end="299:61"><name pos:start="299:14" pos:end="299:61">SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING</name></expr>:</case>

            <expr_stmt pos:start="301:13" pos:end="305:66"><expr pos:start="301:13" pos:end="305:65"><name pos:start="301:13" pos:end="301:20">inq_task</name> <operator pos:start="301:22" pos:end="301:22">=</operator> <call pos:start="301:24" pos:end="305:65"><name pos:start="301:24" pos:end="301:39">iscsi_do_inquiry</name><argument_list pos:start="301:40" pos:end="305:65">(<argument pos:start="301:41" pos:end="301:55"><expr pos:start="301:41" pos:end="301:55"><name pos:start="301:41" pos:end="301:55"><name pos:start="301:41" pos:end="301:48">iscsilun</name><operator pos:start="301:49" pos:end="301:50">-&gt;</operator><name pos:start="301:51" pos:end="301:55">iscsi</name></name></expr></argument>, <argument pos:start="301:58" pos:end="301:70"><expr pos:start="301:58" pos:end="301:70"><name pos:start="301:58" pos:end="301:70"><name pos:start="301:58" pos:end="301:65">iscsilun</name><operator pos:start="301:66" pos:end="301:67">-&gt;</operator><name pos:start="301:68" pos:end="301:70">lun</name></name></expr></argument>, <argument pos:start="301:73" pos:end="301:73"><expr pos:start="301:73" pos:end="301:73"><literal type="number" pos:start="301:73" pos:end="301:73">1</literal></expr></argument>,

                                        <argument pos:start="303:41" pos:end="303:88"><expr pos:start="303:41" pos:end="303:88"><name pos:start="303:41" pos:end="303:88">SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING</name></expr></argument>,

                                        <argument pos:start="305:41" pos:end="305:58"><expr pos:start="305:41" pos:end="305:58"><operator pos:start="305:41" pos:end="305:41">(</operator><name pos:start="305:42" pos:end="305:45">void</name> <operator pos:start="305:47" pos:end="305:47">*</operator><operator pos:start="305:48" pos:end="305:48">*</operator><operator pos:start="305:49" pos:end="305:49">)</operator> <operator pos:start="305:51" pos:end="305:51">&amp;</operator><name pos:start="305:52" pos:end="305:58">inq_lbp</name></expr></argument>, <argument pos:start="305:61" pos:end="305:64"><expr pos:start="305:61" pos:end="305:64"><name pos:start="305:61" pos:end="305:64">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="307:13" pos:end="313:13"><if pos:start="307:13" pos:end="313:13">if <condition pos:start="307:16" pos:end="307:33">(<expr pos:start="307:17" pos:end="307:32"><name pos:start="307:17" pos:end="307:24">inq_task</name> <operator pos:start="307:26" pos:end="307:27">==</operator> <name pos:start="307:29" pos:end="307:32">NULL</name></expr>)</condition> <block pos:start="307:35" pos:end="313:13">{<block_content pos:start="309:17" pos:end="311:25">

                <expr_stmt pos:start="309:17" pos:end="309:30"><expr pos:start="309:17" pos:end="309:29"><name pos:start="309:17" pos:end="309:19">ret</name> <operator pos:start="309:21" pos:end="309:21">=</operator> <operator pos:start="309:23" pos:end="309:23">-</operator><name pos:start="309:24" pos:end="309:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="311:17" pos:end="311:25">goto <name pos:start="311:22" pos:end="311:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="315:13" pos:end="317:75"><expr pos:start="315:13" pos:end="317:74"><call pos:start="315:13" pos:end="317:74"><name pos:start="315:13" pos:end="315:18">memcpy</name><argument_list pos:start="315:19" pos:end="317:74">(<argument pos:start="315:20" pos:end="315:33"><expr pos:start="315:20" pos:end="315:33"><operator pos:start="315:20" pos:end="315:20">&amp;</operator><name pos:start="315:21" pos:end="315:33"><name pos:start="315:21" pos:end="315:28">iscsilun</name><operator pos:start="315:29" pos:end="315:30">-&gt;</operator><name pos:start="315:31" pos:end="315:33">lbp</name></name></expr></argument>, <argument pos:start="315:36" pos:end="315:42"><expr pos:start="315:36" pos:end="315:42"><name pos:start="315:36" pos:end="315:42">inq_lbp</name></expr></argument>,

                   <argument pos:start="317:20" pos:end="317:73"><expr pos:start="317:20" pos:end="317:73"><sizeof pos:start="317:20" pos:end="317:73">sizeof<argument_list pos:start="317:26" pos:end="317:73">(<argument pos:start="317:27" pos:end="317:72"><expr pos:start="317:27" pos:end="317:72">struct <name pos:start="317:34" pos:end="317:72">scsi_inquiry_logical_block_provisioning</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:42"><expr pos:start="319:13" pos:end="319:41"><call pos:start="319:13" pos:end="319:41"><name pos:start="319:13" pos:end="319:31">scsi_free_scsi_task</name><argument_list pos:start="319:32" pos:end="319:41">(<argument pos:start="319:33" pos:end="319:40"><expr pos:start="319:33" pos:end="319:40"><name pos:start="319:33" pos:end="319:40">inq_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="321:13" pos:end="321:18">break;</break>

        <case pos:start="323:9" pos:end="323:48">case <expr pos:start="323:14" pos:end="323:47"><name pos:start="323:14" pos:end="323:47">SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS</name></expr>:</case>

            <expr_stmt pos:start="325:13" pos:end="329:61"><expr pos:start="325:13" pos:end="329:60"><name pos:start="325:13" pos:end="325:20">inq_task</name> <operator pos:start="325:22" pos:end="325:22">=</operator> <call pos:start="325:24" pos:end="329:60"><name pos:start="325:24" pos:end="325:39">iscsi_do_inquiry</name><argument_list pos:start="325:40" pos:end="329:60">(<argument pos:start="325:41" pos:end="325:55"><expr pos:start="325:41" pos:end="325:55"><name pos:start="325:41" pos:end="325:55"><name pos:start="325:41" pos:end="325:48">iscsilun</name><operator pos:start="325:49" pos:end="325:50">-&gt;</operator><name pos:start="325:51" pos:end="325:55">iscsi</name></name></expr></argument>, <argument pos:start="325:58" pos:end="325:70"><expr pos:start="325:58" pos:end="325:70"><name pos:start="325:58" pos:end="325:70"><name pos:start="325:58" pos:end="325:65">iscsilun</name><operator pos:start="325:66" pos:end="325:67">-&gt;</operator><name pos:start="325:68" pos:end="325:70">lun</name></name></expr></argument>, <argument pos:start="325:73" pos:end="325:73"><expr pos:start="325:73" pos:end="325:73"><literal type="number" pos:start="325:73" pos:end="325:73">1</literal></expr></argument>,

                                    <argument pos:start="327:37" pos:end="327:70"><expr pos:start="327:37" pos:end="327:70"><name pos:start="327:37" pos:end="327:70">SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS</name></expr></argument>,

                                    <argument pos:start="329:37" pos:end="329:53"><expr pos:start="329:37" pos:end="329:53"><operator pos:start="329:37" pos:end="329:37">(</operator><name pos:start="329:38" pos:end="329:41">void</name> <operator pos:start="329:43" pos:end="329:43">*</operator><operator pos:start="329:44" pos:end="329:44">*</operator><operator pos:start="329:45" pos:end="329:45">)</operator> <operator pos:start="329:47" pos:end="329:47">&amp;</operator><name pos:start="329:48" pos:end="329:53">inq_bl</name></expr></argument>, <argument pos:start="329:56" pos:end="329:59"><expr pos:start="329:56" pos:end="329:59"><name pos:start="329:56" pos:end="329:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="331:13" pos:end="337:13"><if pos:start="331:13" pos:end="337:13">if <condition pos:start="331:16" pos:end="331:33">(<expr pos:start="331:17" pos:end="331:32"><name pos:start="331:17" pos:end="331:24">inq_task</name> <operator pos:start="331:26" pos:end="331:27">==</operator> <name pos:start="331:29" pos:end="331:32">NULL</name></expr>)</condition> <block pos:start="331:35" pos:end="337:13">{<block_content pos:start="333:17" pos:end="335:25">

                <expr_stmt pos:start="333:17" pos:end="333:30"><expr pos:start="333:17" pos:end="333:29"><name pos:start="333:17" pos:end="333:19">ret</name> <operator pos:start="333:21" pos:end="333:21">=</operator> <operator pos:start="333:23" pos:end="333:23">-</operator><name pos:start="333:24" pos:end="333:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="335:17" pos:end="335:25">goto <name pos:start="335:22" pos:end="335:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="339:13" pos:end="341:61"><expr pos:start="339:13" pos:end="341:60"><call pos:start="339:13" pos:end="341:60"><name pos:start="339:13" pos:end="339:18">memcpy</name><argument_list pos:start="339:19" pos:end="341:60">(<argument pos:start="339:20" pos:end="339:32"><expr pos:start="339:20" pos:end="339:32"><operator pos:start="339:20" pos:end="339:20">&amp;</operator><name pos:start="339:21" pos:end="339:32"><name pos:start="339:21" pos:end="339:28">iscsilun</name><operator pos:start="339:29" pos:end="339:30">-&gt;</operator><name pos:start="339:31" pos:end="339:32">bl</name></name></expr></argument>, <argument pos:start="339:35" pos:end="339:40"><expr pos:start="339:35" pos:end="339:40"><name pos:start="339:35" pos:end="339:40">inq_bl</name></expr></argument>,

                   <argument pos:start="341:20" pos:end="341:59"><expr pos:start="341:20" pos:end="341:59"><sizeof pos:start="341:20" pos:end="341:59">sizeof<argument_list pos:start="341:26" pos:end="341:59">(<argument pos:start="341:27" pos:end="341:58"><expr pos:start="341:27" pos:end="341:58">struct <name pos:start="341:34" pos:end="341:58">scsi_inquiry_block_limits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:42"><expr pos:start="343:13" pos:end="343:41"><call pos:start="343:13" pos:end="343:41"><name pos:start="343:13" pos:end="343:31">scsi_free_scsi_task</name><argument_list pos:start="343:32" pos:end="343:41">(<argument pos:start="343:33" pos:end="343:40"><expr pos:start="343:33" pos:end="343:40"><name pos:start="343:33" pos:end="343:40">inq_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="345:13" pos:end="345:18">break;</break>

        <default pos:start="347:9" pos:end="347:16">default:</default>

            <break pos:start="349:13" pos:end="349:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="355:5" pos:end="355:30"><expr pos:start="355:5" pos:end="355:29"><call pos:start="355:5" pos:end="355:29"><name pos:start="355:5" pos:end="355:23">scsi_free_scsi_task</name><argument_list pos:start="355:24" pos:end="355:29">(<argument pos:start="355:25" pos:end="355:28"><expr pos:start="355:25" pos:end="355:28"><name pos:start="355:25" pos:end="355:28">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:16"><expr pos:start="357:5" pos:end="357:15"><name pos:start="357:5" pos:end="357:8">task</name> <operator pos:start="357:10" pos:end="357:10">=</operator> <name pos:start="357:12" pos:end="357:15">NULL</name></expr>;</expr_stmt>



    <expr_stmt pos:start="361:5" pos:end="361:56"><expr pos:start="361:5" pos:end="361:55"><call pos:start="361:5" pos:end="361:55"><name pos:start="361:5" pos:end="361:28">iscsi_attach_aio_context</name><argument_list pos:start="361:29" pos:end="361:55">(<argument pos:start="361:30" pos:end="361:31"><expr pos:start="361:30" pos:end="361:31"><name pos:start="361:30" pos:end="361:31">bs</name></expr></argument>, <argument pos:start="361:34" pos:end="361:54"><expr pos:start="361:34" pos:end="361:54"><name pos:start="361:34" pos:end="361:54"><name pos:start="361:34" pos:end="361:41">iscsilun</name><operator pos:start="361:42" pos:end="361:43">-&gt;</operator><name pos:start="361:44" pos:end="361:54">aio_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="369:25">/* Guess the internal cluster (page) size of the iscsi target by the means

     * of opt_unmap_gran. Transfer the unmap granularity only if it has a

     * reasonable size */</comment>

    <if_stmt pos:start="371:5" pos:end="391:5"><if pos:start="371:5" pos:end="391:5">if <condition pos:start="371:8" pos:end="373:79">(<expr pos:start="371:9" pos:end="373:78"><name pos:start="371:9" pos:end="371:35"><name pos:start="371:9" pos:end="371:16">iscsilun</name><operator pos:start="371:17" pos:end="371:18">-&gt;</operator><name pos:start="371:19" pos:end="371:20">bl</name><operator pos:start="371:21" pos:end="371:21">.</operator><name pos:start="371:22" pos:end="371:35">opt_unmap_gran</name></name> <operator pos:start="371:37" pos:end="371:37">*</operator> <name pos:start="371:39" pos:end="371:58"><name pos:start="371:39" pos:end="371:46">iscsilun</name><operator pos:start="371:47" pos:end="371:48">-&gt;</operator><name pos:start="371:49" pos:end="371:58">block_size</name></name> <operator pos:start="371:60" pos:end="371:61">&gt;=</operator> <literal type="number" pos:start="371:63" pos:end="371:63">4</literal> <operator pos:start="371:65" pos:end="371:65">*</operator> <literal type="number" pos:start="371:67" pos:end="371:70">1024</literal> <operator pos:start="371:72" pos:end="371:73">&amp;&amp;</operator>

        <name pos:start="373:9" pos:end="373:35"><name pos:start="373:9" pos:end="373:16">iscsilun</name><operator pos:start="373:17" pos:end="373:18">-&gt;</operator><name pos:start="373:19" pos:end="373:20">bl</name><operator pos:start="373:21" pos:end="373:21">.</operator><name pos:start="373:22" pos:end="373:35">opt_unmap_gran</name></name> <operator pos:start="373:37" pos:end="373:37">*</operator> <name pos:start="373:39" pos:end="373:58"><name pos:start="373:39" pos:end="373:46">iscsilun</name><operator pos:start="373:47" pos:end="373:48">-&gt;</operator><name pos:start="373:49" pos:end="373:58">block_size</name></name> <operator pos:start="373:60" pos:end="373:61">&lt;=</operator> <literal type="number" pos:start="373:63" pos:end="373:64">16</literal> <operator pos:start="373:66" pos:end="373:66">*</operator> <literal type="number" pos:start="373:68" pos:end="373:71">1024</literal> <operator pos:start="373:73" pos:end="373:73">*</operator> <literal type="number" pos:start="373:75" pos:end="373:78">1024</literal></expr>)</condition> <block pos:start="373:81" pos:end="391:5">{<block_content pos:start="375:9" pos:end="389:9">

        <expr_stmt pos:start="375:9" pos:end="377:79"><expr pos:start="375:9" pos:end="377:78"><name pos:start="375:9" pos:end="375:33"><name pos:start="375:9" pos:end="375:16">iscsilun</name><operator pos:start="375:17" pos:end="375:18">-&gt;</operator><name pos:start="375:19" pos:end="375:33">cluster_sectors</name></name> <operator pos:start="375:35" pos:end="375:35">=</operator> <operator pos:start="375:37" pos:end="375:37">(</operator><name pos:start="375:38" pos:end="375:64"><name pos:start="375:38" pos:end="375:45">iscsilun</name><operator pos:start="375:46" pos:end="375:47">-&gt;</operator><name pos:start="375:48" pos:end="375:49">bl</name><operator pos:start="375:50" pos:end="375:50">.</operator><name pos:start="375:51" pos:end="375:64">opt_unmap_gran</name></name> <operator pos:start="375:66" pos:end="375:66">*</operator>

                                     <name pos:start="377:38" pos:end="377:57"><name pos:start="377:38" pos:end="377:45">iscsilun</name><operator pos:start="377:46" pos:end="377:47">-&gt;</operator><name pos:start="377:48" pos:end="377:57">block_size</name></name><operator pos:start="377:58" pos:end="377:58">)</operator> <operator pos:start="377:60" pos:end="377:61">&gt;&gt;</operator> <name pos:start="377:63" pos:end="377:78">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

        <if_stmt pos:start="379:9" pos:end="389:9"><if pos:start="379:9" pos:end="389:9">if <condition pos:start="379:12" pos:end="379:66">(<expr pos:start="379:13" pos:end="379:65"><name pos:start="379:13" pos:end="379:27"><name pos:start="379:13" pos:end="379:20">iscsilun</name><operator pos:start="379:21" pos:end="379:22">-&gt;</operator><name pos:start="379:23" pos:end="379:27">lbprz</name></name> <operator pos:start="379:29" pos:end="379:30">&amp;&amp;</operator> <operator pos:start="379:32" pos:end="379:32">!</operator><operator pos:start="379:33" pos:end="379:33">(</operator><name pos:start="379:34" pos:end="379:47"><name pos:start="379:34" pos:end="379:35">bs</name><operator pos:start="379:36" pos:end="379:37">-&gt;</operator><name pos:start="379:38" pos:end="379:47">open_flags</name></name> <operator pos:start="379:49" pos:end="379:49">&amp;</operator> <name pos:start="379:51" pos:end="379:64">BDRV_O_NOCACHE</name><operator pos:start="379:65" pos:end="379:65">)</operator></expr>)</condition> <block pos:start="379:68" pos:end="389:9">{<block_content pos:start="381:13" pos:end="387:13">

            <expr_stmt pos:start="381:13" pos:end="381:73"><expr pos:start="381:13" pos:end="381:72"><name pos:start="381:13" pos:end="381:35"><name pos:start="381:13" pos:end="381:20">iscsilun</name><operator pos:start="381:21" pos:end="381:22">-&gt;</operator><name pos:start="381:23" pos:end="381:35">allocationmap</name></name> <operator pos:start="381:37" pos:end="381:37">=</operator> <call pos:start="381:39" pos:end="381:72"><name pos:start="381:39" pos:end="381:62">iscsi_allocationmap_init</name><argument_list pos:start="381:63" pos:end="381:72">(<argument pos:start="381:64" pos:end="381:71"><expr pos:start="381:64" pos:end="381:71"><name pos:start="381:64" pos:end="381:71">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="383:13" pos:end="387:13"><if pos:start="383:13" pos:end="387:13">if <condition pos:start="383:16" pos:end="383:48">(<expr pos:start="383:17" pos:end="383:47"><name pos:start="383:17" pos:end="383:39"><name pos:start="383:17" pos:end="383:24">iscsilun</name><operator pos:start="383:25" pos:end="383:26">-&gt;</operator><name pos:start="383:27" pos:end="383:39">allocationmap</name></name> <operator pos:start="383:41" pos:end="383:42">==</operator> <name pos:start="383:44" pos:end="383:47">NULL</name></expr>)</condition> <block pos:start="383:50" pos:end="387:13">{<block_content pos:start="385:17" pos:end="385:30">

                <expr_stmt pos:start="385:17" pos:end="385:30"><expr pos:start="385:17" pos:end="385:29"><name pos:start="385:17" pos:end="385:19">ret</name> <operator pos:start="385:21" pos:end="385:21">=</operator> <operator pos:start="385:23" pos:end="385:23">-</operator><name pos:start="385:24" pos:end="385:29">ENOMEM</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="395:1" pos:end="395:4"><name pos:start="395:1" pos:end="395:3">out</name>:</label>

    <expr_stmt pos:start="397:5" pos:end="397:24"><expr pos:start="397:5" pos:end="397:23"><call pos:start="397:5" pos:end="397:23"><name pos:start="397:5" pos:end="397:17">qemu_opts_del</name><argument_list pos:start="397:18" pos:end="397:23">(<argument pos:start="397:19" pos:end="397:22"><expr pos:start="397:19" pos:end="397:22"><name pos:start="397:19" pos:end="397:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:27"><expr pos:start="399:5" pos:end="399:26"><call pos:start="399:5" pos:end="399:26"><name pos:start="399:5" pos:end="399:10">g_free</name><argument_list pos:start="399:11" pos:end="399:26">(<argument pos:start="399:12" pos:end="399:25"><expr pos:start="399:12" pos:end="399:25"><name pos:start="399:12" pos:end="399:25">initiator_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="401:5" pos:end="405:5"><if pos:start="401:5" pos:end="405:5">if <condition pos:start="401:8" pos:end="401:26">(<expr pos:start="401:9" pos:end="401:25"><name pos:start="401:9" pos:end="401:17">iscsi_url</name> <operator pos:start="401:19" pos:end="401:20">!=</operator> <name pos:start="401:22" pos:end="401:25">NULL</name></expr>)</condition> <block pos:start="401:28" pos:end="405:5">{<block_content pos:start="403:9" pos:end="403:37">

        <expr_stmt pos:start="403:9" pos:end="403:37"><expr pos:start="403:9" pos:end="403:36"><call pos:start="403:9" pos:end="403:36"><name pos:start="403:9" pos:end="403:25">iscsi_destroy_url</name><argument_list pos:start="403:26" pos:end="403:36">(<argument pos:start="403:27" pos:end="403:35"><expr pos:start="403:27" pos:end="403:35"><name pos:start="403:27" pos:end="403:35">iscsi_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="407:5" pos:end="411:5"><if pos:start="407:5" pos:end="411:5">if <condition pos:start="407:8" pos:end="407:21">(<expr pos:start="407:9" pos:end="407:20"><name pos:start="407:9" pos:end="407:12">task</name> <operator pos:start="407:14" pos:end="407:15">!=</operator> <name pos:start="407:17" pos:end="407:20">NULL</name></expr>)</condition> <block pos:start="407:23" pos:end="411:5">{<block_content pos:start="409:9" pos:end="409:34">

        <expr_stmt pos:start="409:9" pos:end="409:34"><expr pos:start="409:9" pos:end="409:33"><call pos:start="409:9" pos:end="409:33"><name pos:start="409:9" pos:end="409:27">scsi_free_scsi_task</name><argument_list pos:start="409:28" pos:end="409:33">(<argument pos:start="409:29" pos:end="409:32"><expr pos:start="409:29" pos:end="409:32"><name pos:start="409:29" pos:end="409:32">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="415:5" pos:end="425:5"><if pos:start="415:5" pos:end="425:5">if <condition pos:start="415:8" pos:end="415:12">(<expr pos:start="415:9" pos:end="415:11"><name pos:start="415:9" pos:end="415:11">ret</name></expr>)</condition> <block pos:start="415:14" pos:end="425:5">{<block_content pos:start="417:9" pos:end="423:46">

        <if_stmt pos:start="417:9" pos:end="421:9"><if pos:start="417:9" pos:end="421:9">if <condition pos:start="417:12" pos:end="417:26">(<expr pos:start="417:13" pos:end="417:25"><name pos:start="417:13" pos:end="417:17">iscsi</name> <operator pos:start="417:19" pos:end="417:20">!=</operator> <name pos:start="417:22" pos:end="417:25">NULL</name></expr>)</condition> <block pos:start="417:28" pos:end="421:9">{<block_content pos:start="419:13" pos:end="419:41">

            <expr_stmt pos:start="419:13" pos:end="419:41"><expr pos:start="419:13" pos:end="419:40"><call pos:start="419:13" pos:end="419:40"><name pos:start="419:13" pos:end="419:33">iscsi_destroy_context</name><argument_list pos:start="419:34" pos:end="419:40">(<argument pos:start="419:35" pos:end="419:39"><expr pos:start="419:35" pos:end="419:39"><name pos:start="419:35" pos:end="419:39">iscsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:46"><expr pos:start="423:9" pos:end="423:45"><call pos:start="423:9" pos:end="423:45"><name pos:start="423:9" pos:end="423:14">memset</name><argument_list pos:start="423:15" pos:end="423:45">(<argument pos:start="423:16" pos:end="423:23"><expr pos:start="423:16" pos:end="423:23"><name pos:start="423:16" pos:end="423:23">iscsilun</name></expr></argument>, <argument pos:start="423:26" pos:end="423:26"><expr pos:start="423:26" pos:end="423:26"><literal type="number" pos:start="423:26" pos:end="423:26">0</literal></expr></argument>, <argument pos:start="423:29" pos:end="423:44"><expr pos:start="423:29" pos:end="423:44"><sizeof pos:start="423:29" pos:end="423:44">sizeof<argument_list pos:start="423:35" pos:end="423:44">(<argument pos:start="423:36" pos:end="423:43"><expr pos:start="423:36" pos:end="423:43"><name pos:start="423:36" pos:end="423:43">IscsiLun</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="427:5" pos:end="427:15">return <expr pos:start="427:12" pos:end="427:14"><name pos:start="427:12" pos:end="427:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
