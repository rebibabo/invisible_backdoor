<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13860.c" pos:tabs="8"><function pos:start="1:1" pos:end="749:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dct_quantize_refine</name><parameter_list pos:start="1:31" pos:end="5:42">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:45">MpegEncContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <comment type="line" pos:start="1:51" pos:end="1:73">//FIXME breaks denoise?</comment>

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:31">DCTELEM</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:38">block</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:55"><decl pos:start="3:41" pos:end="3:55"><type pos:start="3:41" pos:end="3:55"><name pos:start="3:41" pos:end="3:47">int16_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:55">weight</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:70"><decl pos:start="3:58" pos:end="3:70"><type pos:start="3:58" pos:end="3:70"><name pos:start="3:58" pos:end="3:64">DCTELEM</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">orig</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:29"><decl pos:start="5:25" pos:end="5:29"><type pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:29">n</name></decl></parameter>, <parameter pos:start="5:32" pos:end="5:41"><decl pos:start="5:32" pos:end="5:41"><type pos:start="5:32" pos:end="5:41"><name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:41">qscale</name></decl></parameter>)</parameter_list><block pos:start="5:43" pos:end="749:1">{<block_content pos:start="7:5" pos:end="747:25">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int16_t</name></type> <name pos:start="7:13" pos:end="7:19"><name pos:start="7:13" pos:end="7:15">rem</name><index pos:start="7:16" pos:end="7:19">[<expr pos:start="7:17" pos:end="7:18"><literal type="number" pos:start="7:17" pos:end="7:18">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">DCTELEM</name></type> <name pos:start="9:13" pos:end="9:18"><name pos:start="9:13" pos:end="9:14">d1</name><index pos:start="9:15" pos:end="9:18">[<expr pos:start="9:16" pos:end="9:17"><literal type="number" pos:start="9:16" pos:end="9:17">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:15"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:13">int</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:19">qmat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:28">scantable</name><init pos:start="13:29" pos:end="13:58">= <expr pos:start="13:31" pos:end="13:58"><name pos:start="13:31" pos:end="13:58"><name pos:start="13:31" pos:end="13:31">s</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:48">intra_scantable</name><operator pos:start="13:49" pos:end="13:49">.</operator><name pos:start="13:50" pos:end="13:58">scantable</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:65"><decl pos:start="15:5" pos:end="15:64"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:33">perm_scantable</name><init pos:start="15:34" pos:end="15:64">= <expr pos:start="15:36" pos:end="15:64"><name pos:start="15:36" pos:end="15:64"><name pos:start="15:36" pos:end="15:36">s</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:53">intra_scantable</name><operator pos:start="15:54" pos:end="15:54">.</operator><name pos:start="15:55" pos:end="15:64">permutated</name></name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="17:1" pos:end="17:42">//    unsigned int threshold1, threshold2;</comment>

<comment type="line" pos:start="19:1" pos:end="19:17">//    int bias=0;</comment>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:15">run_tab</name><index pos:start="21:16" pos:end="21:19">[<expr pos:start="21:17" pos:end="21:18"><literal type="number" pos:start="21:17" pos:end="21:18">65</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:16">prev_run</name><init pos:start="23:17" pos:end="23:18">=<expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">prev_level</name><init pos:start="25:19" pos:end="25:20">=<expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:50"><decl pos:start="27:5" pos:end="27:12"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:12">qmul</name></decl>, <decl pos:start="27:15" pos:end="27:18"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:15" pos:end="27:18">qadd</name></decl>, <decl pos:start="27:21" pos:end="27:27"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:27">start_i</name></decl>, <decl pos:start="27:30" pos:end="27:42"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:30" pos:end="27:42">last_non_zero</name></decl>, <decl pos:start="27:45" pos:end="27:45"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:45" pos:end="27:45">i</name></decl>, <decl pos:start="27:48" pos:end="27:49"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:48" pos:end="27:49">dc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">uint8_t</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type> <name pos:start="29:15" pos:end="29:20">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:26"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">uint8_t</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type> <name pos:start="31:15" pos:end="31:25">last_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:15"><decl pos:start="33:5" pos:end="33:14"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">lambda</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="38:0"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:17">rle_index</name></decl>, <decl pos:start="35:20" pos:end="35:22"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:20" pos:end="35:22">run</name></decl>, <decl pos:start="35:25" pos:end="35:25"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:25" pos:end="35:25">q</name></decl>, <decl pos:start="35:28" pos:end="35:30"><type ref="prev" pos:start="35:5" pos:end="35:7"/><name pos:start="35:28" pos:end="35:30">sum</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:19">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:19">REFINE_STATS</name></cpp:ifdef>

<decl_stmt pos:start="39:1" pos:end="39:19"><decl pos:start="39:1" pos:end="39:18"><type pos:start="39:1" pos:end="39:10"><specifier pos:start="39:1" pos:end="39:6">static</specifier> <name pos:start="39:8" pos:end="39:10">int</name></type> <name pos:start="39:12" pos:end="39:16">count</name><init pos:start="39:17" pos:end="39:18">=<expr pos:start="39:18" pos:end="39:18"><literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="41:1" pos:end="41:24"><decl pos:start="41:1" pos:end="41:23"><type pos:start="41:1" pos:end="41:10"><specifier pos:start="41:1" pos:end="41:6">static</specifier> <name pos:start="41:8" pos:end="41:10">int</name></type> <name pos:start="41:12" pos:end="41:21">after_last</name><init pos:start="41:22" pos:end="41:23">=<expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="43:1" pos:end="43:21"><decl pos:start="43:1" pos:end="43:20"><type pos:start="43:1" pos:end="43:10"><specifier pos:start="43:1" pos:end="43:6">static</specifier> <name pos:start="43:8" pos:end="43:10">int</name></type> <name pos:start="43:12" pos:end="43:18">to_zero</name><init pos:start="43:19" pos:end="43:20">=<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="45:1" pos:end="45:23"><decl pos:start="45:1" pos:end="45:22"><type pos:start="45:1" pos:end="45:10"><specifier pos:start="45:1" pos:end="45:6">static</specifier> <name pos:start="45:8" pos:end="45:10">int</name></type> <name pos:start="45:12" pos:end="45:20">from_zero</name><init pos:start="45:21" pos:end="45:22">=<expr pos:start="45:22" pos:end="45:22"><literal type="number" pos:start="45:22" pos:end="45:22">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="47:1" pos:end="47:19"><decl pos:start="47:1" pos:end="47:18"><type pos:start="47:1" pos:end="47:10"><specifier pos:start="47:1" pos:end="47:6">static</specifier> <name pos:start="47:8" pos:end="47:10">int</name></type> <name pos:start="47:12" pos:end="47:16">raise</name><init pos:start="47:17" pos:end="47:18">=<expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="49:1" pos:end="49:19"><decl pos:start="49:1" pos:end="49:18"><type pos:start="49:1" pos:end="49:10"><specifier pos:start="49:1" pos:end="49:6">static</specifier> <name pos:start="49:8" pos:end="49:10">int</name></type> <name pos:start="49:12" pos:end="49:16">lower</name><init pos:start="49:17" pos:end="49:18">=<expr pos:start="49:18" pos:end="49:18"><literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt pos:start="51:1" pos:end="54:0"><decl pos:start="51:1" pos:end="51:24"><type pos:start="51:1" pos:end="51:10"><specifier pos:start="51:1" pos:end="51:6">static</specifier> <name pos:start="51:8" pos:end="51:10">int</name></type> <name pos:start="51:12" pos:end="51:22">messed_sign</name><init pos:start="51:23" pos:end="51:24">=<expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="57:5" pos:end="59:45"><if pos:start="57:5" pos:end="59:45">if<condition pos:start="57:7" pos:end="57:24">(<expr pos:start="57:8" pos:end="57:23"><name pos:start="57:8" pos:end="57:18"><name pos:start="57:8" pos:end="57:12">basis</name><index pos:start="57:13" pos:end="57:15">[<expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>]</index><index pos:start="57:16" pos:end="57:18">[<expr pos:start="57:17" pos:end="57:17"><literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>]</index></name> <operator pos:start="57:20" pos:end="57:21">==</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:45"><block_content pos:start="59:9" pos:end="59:45">

        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><call pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:19">build_basis</name><argument_list pos:start="59:20" pos:end="59:44">(<argument pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:43"><name pos:start="59:21" pos:end="59:43"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:26">dsp</name><operator pos:start="59:27" pos:end="59:27">.</operator><name pos:start="59:28" pos:end="59:43">idct_permutation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

    <expr_stmt pos:start="63:5" pos:end="63:19"><expr pos:start="63:5" pos:end="63:18"><name pos:start="63:5" pos:end="63:8">qmul</name><operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:16">qscale</name><operator pos:start="63:17" pos:end="63:17">*</operator><literal type="number" pos:start="63:18" pos:end="63:18">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:8">qadd</name><operator pos:start="65:9" pos:end="65:9">=</operator> <operator pos:start="65:11" pos:end="65:11">(</operator><name pos:start="65:12" pos:end="65:17">qscale</name><operator pos:start="65:18" pos:end="65:18">-</operator><literal type="number" pos:start="65:19" pos:end="65:19">1</literal><operator pos:start="65:20" pos:end="65:20">)</operator><operator pos:start="65:21" pos:end="65:21">|</operator><literal type="number" pos:start="65:22" pos:end="65:22">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="121:5"><if pos:start="67:5" pos:end="109:5">if <condition pos:start="67:8" pos:end="67:20">(<expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:19">mb_intra</name></name></expr>)</condition> <block pos:start="67:22" pos:end="109:5">{<block_content pos:start="69:9" pos:end="107:49">

        <if_stmt pos:start="69:9" pos:end="87:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:24"><name pos:start="69:14" pos:end="69:14">s</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:24">h263_aic</name></name></expr>)</condition> <block pos:start="69:27" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:34">

            <if_stmt pos:start="71:13" pos:end="77:34"><if pos:start="71:13" pos:end="73:34">if <condition pos:start="71:16" pos:end="71:22">(<expr pos:start="71:17" pos:end="71:21"><name pos:start="71:17" pos:end="71:17">n</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <literal type="number" pos:start="71:21" pos:end="71:21">4</literal></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:34"><block_content pos:start="73:17" pos:end="73:34">

                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:17">q</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:33"><name pos:start="73:21" pos:end="73:21">s</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:33">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="75:13" pos:end="77:34">else<block type="pseudo" pos:start="77:17" pos:end="77:34"><block_content pos:start="77:17" pos:end="77:34">

                <expr_stmt pos:start="77:17" pos:end="77:34"><expr pos:start="77:17" pos:end="77:33"><name pos:start="77:17" pos:end="77:17">q</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:33"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:33">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="87:9">else<block pos:start="79:15" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:19">

            <comment type="block" pos:start="81:13" pos:end="81:58">/* For AIC we skip quant/dequant of INTRADC */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:18"><expr pos:start="83:13" pos:end="83:17"><name pos:start="83:13" pos:end="83:13">q</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:19"><expr pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:16">qadd</name><operator pos:start="85:17" pos:end="85:17">=</operator><literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:28"><expr pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:9">q</name> <operator pos:start="89:11" pos:end="89:13">&lt;&lt;=</operator> <name pos:start="89:15" pos:end="89:25">RECON_SHIFT</name><operator pos:start="89:26" pos:end="89:26">-</operator><literal type="number" pos:start="89:27" pos:end="89:27">3</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="91:9" pos:end="91:54">/* note: block[0] is assumed to be positive */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:23"><expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:10">dc</name><operator pos:start="93:11" pos:end="93:11">=</operator> <name pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:17">block</name><index pos:start="93:18" pos:end="93:20">[<expr pos:start="93:19" pos:end="93:19"><literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr>]</index></name><operator pos:start="93:21" pos:end="93:21">*</operator><name pos:start="93:22" pos:end="93:22">q</name></expr>;</expr_stmt>

<comment type="line" pos:start="95:1" pos:end="95:47">//        block[0] = (block[0] + (q &gt;&gt; 1)) / q;</comment>

        <expr_stmt pos:start="97:9" pos:end="97:20"><expr pos:start="97:9" pos:end="97:19"><name pos:start="97:9" pos:end="97:15">start_i</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <literal type="number" pos:start="97:19" pos:end="97:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:12">qmat</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <name pos:start="99:16" pos:end="99:40"><name pos:start="99:16" pos:end="99:16">s</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:32">q_intra_matrix</name><index pos:start="99:33" pos:end="99:40">[<expr pos:start="99:34" pos:end="99:39"><name pos:start="99:34" pos:end="99:39">qscale</name></expr>]</index></name></expr>;</expr_stmt>

<comment type="line" pos:start="101:1" pos:end="101:57">//        if(s-&gt;mpeg_quant || s-&gt;out_format == FMT_MPEG1)</comment>

<comment type="line" pos:start="103:1" pos:end="103:38">//            bias= 1&lt;&lt;(QMAT_SHIFT-1);</comment>

        <expr_stmt pos:start="105:9" pos:end="105:44"><expr pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:14">length</name>     <operator pos:start="105:20" pos:end="105:20">=</operator> <name pos:start="105:22" pos:end="105:43"><name pos:start="105:22" pos:end="105:22">s</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:43">intra_ac_vlc_length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:49"><expr pos:start="107:9" pos:end="107:48"><name pos:start="107:9" pos:end="107:19">last_length</name><operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:48"><name pos:start="107:22" pos:end="107:22">s</name><operator pos:start="107:23" pos:end="107:24">-&gt;</operator><name pos:start="107:25" pos:end="107:48">intra_ac_vlc_last_length</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="121:5">else <block pos:start="109:12" pos:end="121:5">{<block_content pos:start="111:9" pos:end="119:49">

        <expr_stmt pos:start="111:9" pos:end="111:14"><expr pos:start="111:9" pos:end="111:13"><name pos:start="111:9" pos:end="111:10">dc</name><operator pos:start="111:11" pos:end="111:11">=</operator> <literal type="number" pos:start="111:13" pos:end="111:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:20"><expr pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:15">start_i</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <literal type="number" pos:start="113:19" pos:end="113:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:12">qmat</name> <operator pos:start="115:14" pos:end="115:14">=</operator> <name pos:start="115:16" pos:end="115:40"><name pos:start="115:16" pos:end="115:16">s</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:32">q_inter_matrix</name><index pos:start="115:33" pos:end="115:40">[<expr pos:start="115:34" pos:end="115:39"><name pos:start="115:34" pos:end="115:39">qscale</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:14">length</name>     <operator pos:start="117:20" pos:end="117:20">=</operator> <name pos:start="117:22" pos:end="117:43"><name pos:start="117:22" pos:end="117:22">s</name><operator pos:start="117:23" pos:end="117:24">-&gt;</operator><name pos:start="117:25" pos:end="117:43">inter_ac_vlc_length</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:49"><expr pos:start="119:9" pos:end="119:48"><name pos:start="119:9" pos:end="119:19">last_length</name><operator pos:start="119:20" pos:end="119:20">=</operator> <name pos:start="119:22" pos:end="119:48"><name pos:start="119:22" pos:end="119:22">s</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:48">inter_ac_vlc_last_length</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="128:0"><expr pos:start="123:5" pos:end="123:42"><name pos:start="123:5" pos:end="123:17">last_non_zero</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:42"><name pos:start="123:21" pos:end="123:21">s</name><operator pos:start="123:22" pos:end="123:23">-&gt;</operator><name pos:start="123:24" pos:end="123:39">block_last_index</name><index pos:start="123:40" pos:end="123:42">[<expr pos:start="123:41" pos:end="123:41"><name pos:start="123:41" pos:end="123:41">n</name></expr>]</index></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="127:1" pos:end="127:19">#<cpp:directive pos:start="127:2" pos:end="127:6">ifdef</cpp:directive> <name pos:start="127:8" pos:end="127:19">REFINE_STATS</name></cpp:ifdef>

<block pos:start="129:1" pos:end="146:0">{<block_content pos:start="129:2" pos:end="143:26"><expr_stmt pos:start="129:2" pos:end="133:31"><expr pos:start="129:2" pos:end="133:30"><name pos:start="129:2" pos:end="132:0">START_TIMER</name>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif>

    <name pos:start="133:5" pos:end="133:6">dc</name> <operator pos:start="133:8" pos:end="133:9">+=</operator> <operator pos:start="133:11" pos:end="133:11">(</operator><literal type="number" pos:start="133:12" pos:end="133:12">1</literal><operator pos:start="133:13" pos:end="133:14">&lt;&lt;</operator><operator pos:start="133:15" pos:end="133:15">(</operator><name pos:start="133:16" pos:end="133:26">RECON_SHIFT</name><operator pos:start="133:27" pos:end="133:27">-</operator><literal type="number" pos:start="133:28" pos:end="133:28">1</literal><operator pos:start="133:29" pos:end="133:29">)</operator><operator pos:start="133:30" pos:end="133:30">)</operator></expr>;</expr_stmt>

    <for pos:start="135:5" pos:end="142:0">for<control pos:start="135:8" pos:end="135:23">(<init pos:start="135:9" pos:end="135:12"><expr pos:start="135:9" pos:end="135:11"><name pos:start="135:9" pos:end="135:9">i</name><operator pos:start="135:10" pos:end="135:10">=</operator><literal type="number" pos:start="135:11" pos:end="135:11">0</literal></expr>;</init> <condition pos:start="135:14" pos:end="135:18"><expr pos:start="135:14" pos:end="135:17"><name pos:start="135:14" pos:end="135:14">i</name><operator pos:start="135:15" pos:end="135:15">&lt;</operator><literal type="number" pos:start="135:16" pos:end="135:17">64</literal></expr>;</condition> <incr pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:20">i</name><operator pos:start="135:21" pos:end="135:22">++</operator></expr></incr>)</control><block pos:start="135:24" pos:end="142:0">{<block_content pos:start="137:9" pos:end="137:44">

        <expr_stmt pos:start="137:9" pos:end="137:44"><expr pos:start="137:9" pos:end="137:43"><name pos:start="137:9" pos:end="137:14"><name pos:start="137:9" pos:end="137:11">rem</name><index pos:start="137:12" pos:end="137:14">[<expr pos:start="137:13" pos:end="137:13"><name pos:start="137:13" pos:end="137:13">i</name></expr>]</index></name><operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:18">dc</name> <operator pos:start="137:20" pos:end="137:20">-</operator> <operator pos:start="137:22" pos:end="137:22">(</operator><name pos:start="137:23" pos:end="137:29"><name pos:start="137:23" pos:end="137:26">orig</name><index pos:start="137:27" pos:end="137:29">[<expr pos:start="137:28" pos:end="137:28"><name pos:start="137:28" pos:end="137:28">i</name></expr>]</index></name><operator pos:start="137:30" pos:end="137:31">&lt;&lt;</operator><name pos:start="137:32" pos:end="137:42">RECON_SHIFT</name><operator pos:start="137:43" pos:end="137:43">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="137:46" pos:end="137:99">//FIXME  use orig dirrectly insteadof copying to rem[]</comment>

    </block_content>}</block></for>

<cpp:ifdef pos:start="141:1" pos:end="141:19">#<cpp:directive pos:start="141:2" pos:end="141:6">ifdef</cpp:directive> <name pos:start="141:8" pos:end="141:19">REFINE_STATS</name></cpp:ifdef>

<macro pos:start="143:1" pos:end="143:26"><name pos:start="143:1" pos:end="143:10">STOP_TIMER</name><argument_list pos:start="143:11" pos:end="143:26">(<argument pos:start="143:12" pos:end="143:25"><literal type="string" pos:start="143:12" pos:end="143:25">"memset rem[]"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="147:5" pos:end="147:10"><expr pos:start="147:5" pos:end="147:9"><name pos:start="147:5" pos:end="147:7">sum</name><operator pos:start="147:8" pos:end="147:8">=</operator><literal type="number" pos:start="147:9" pos:end="147:9">0</literal></expr>;</expr_stmt>

    <for pos:start="149:5" pos:end="177:5">for<control pos:start="149:8" pos:end="149:23">(<init pos:start="149:9" pos:end="149:12"><expr pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:9">i</name><operator pos:start="149:10" pos:end="149:10">=</operator><literal type="number" pos:start="149:11" pos:end="149:11">0</literal></expr>;</init> <condition pos:start="149:14" pos:end="149:18"><expr pos:start="149:14" pos:end="149:17"><name pos:start="149:14" pos:end="149:14">i</name><operator pos:start="149:15" pos:end="149:15">&lt;</operator><literal type="number" pos:start="149:16" pos:end="149:17">64</literal></expr>;</condition> <incr pos:start="149:20" pos:end="149:22"><expr pos:start="149:20" pos:end="149:22"><name pos:start="149:20" pos:end="149:20">i</name><operator pos:start="149:21" pos:end="149:22">++</operator></expr></incr>)</control><block pos:start="149:24" pos:end="177:5">{<block_content pos:start="151:9" pos:end="175:19">

        <decl_stmt pos:start="151:9" pos:end="151:20"><decl pos:start="151:9" pos:end="151:19"><type pos:start="151:9" pos:end="151:11"><name pos:start="151:9" pos:end="151:11">int</name></type> <name pos:start="151:13" pos:end="151:15">one</name><init pos:start="151:16" pos:end="151:19">= <expr pos:start="151:18" pos:end="151:19"><literal type="number" pos:start="151:18" pos:end="151:19">36</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="153:9" pos:end="153:18"><decl pos:start="153:9" pos:end="153:17"><type pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">int</name></type> <name pos:start="153:13" pos:end="153:15">qns</name><init pos:start="153:16" pos:end="153:17">=<expr pos:start="153:17" pos:end="153:17"><literal type="number" pos:start="153:17" pos:end="153:17">4</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="155:9" pos:end="155:14"><decl pos:start="155:9" pos:end="155:13"><type pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">int</name></type> <name pos:start="155:13" pos:end="155:13">w</name></decl>;</decl_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:36"><expr pos:start="159:9" pos:end="159:35"><name pos:start="159:9" pos:end="159:9">w</name><operator pos:start="159:10" pos:end="159:10">=</operator> <call pos:start="159:12" pos:end="159:25"><name pos:start="159:12" pos:end="159:14">ABS</name><argument_list pos:start="159:15" pos:end="159:25">(<argument pos:start="159:16" pos:end="159:24"><expr pos:start="159:16" pos:end="159:24"><name pos:start="159:16" pos:end="159:24"><name pos:start="159:16" pos:end="159:21">weight</name><index pos:start="159:22" pos:end="159:24">[<expr pos:start="159:23" pos:end="159:23"><name pos:start="159:23" pos:end="159:23">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="159:27" pos:end="159:27">+</operator> <name pos:start="159:29" pos:end="159:31">qns</name><operator pos:start="159:32" pos:end="159:32">*</operator><name pos:start="159:33" pos:end="159:35">one</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:37"><expr pos:start="161:9" pos:end="161:36"><name pos:start="161:9" pos:end="161:9">w</name><operator pos:start="161:10" pos:end="161:10">=</operator> <literal type="number" pos:start="161:12" pos:end="161:15">15</literal> <operator pos:start="161:15" pos:end="161:15">+</operator> <operator pos:start="161:17" pos:end="161:17">(</operator><literal type="number" pos:start="161:18" pos:end="161:19">48</literal><operator pos:start="161:20" pos:end="161:20">*</operator><name pos:start="161:21" pos:end="161:23">qns</name><operator pos:start="161:24" pos:end="161:24">*</operator><name pos:start="161:25" pos:end="161:27">one</name> <operator pos:start="161:29" pos:end="161:29">+</operator> <name pos:start="161:31" pos:end="161:31">w</name><operator pos:start="161:32" pos:end="161:32">/</operator><literal type="number" pos:start="161:33" pos:end="161:33">2</literal><operator pos:start="161:34" pos:end="161:34">)</operator><operator pos:start="161:35" pos:end="161:35">/</operator><name pos:start="161:36" pos:end="161:36">w</name></expr>;</expr_stmt> <comment type="line" pos:start="161:39" pos:end="161:49">// 16 .. 63</comment>



        <expr_stmt pos:start="165:9" pos:end="165:22"><expr pos:start="165:9" pos:end="165:21"><name pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:14">weight</name><index pos:start="165:15" pos:end="165:17">[<expr pos:start="165:16" pos:end="165:16"><name pos:start="165:16" pos:end="165:16">i</name></expr>]</index></name> <operator pos:start="165:19" pos:end="165:19">=</operator> <name pos:start="165:21" pos:end="165:21">w</name></expr>;</expr_stmt>

<comment type="line" pos:start="167:1" pos:end="167:45">//        w=weight[i] = (63*qns + (w/2)) / w;</comment>

         

        <expr_stmt pos:start="171:9" pos:end="171:20"><expr pos:start="171:9" pos:end="171:19"><call pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:14">assert</name><argument_list pos:start="171:15" pos:end="171:19">(<argument pos:start="171:16" pos:end="171:18"><expr pos:start="171:16" pos:end="171:18"><name pos:start="171:16" pos:end="171:16">w</name><operator pos:start="171:17" pos:end="171:17">&gt;</operator><literal type="number" pos:start="171:18" pos:end="171:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:25"><expr pos:start="173:9" pos:end="173:24"><call pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:14">assert</name><argument_list pos:start="173:15" pos:end="173:24">(<argument pos:start="173:16" pos:end="173:23"><expr pos:start="173:16" pos:end="173:23"><name pos:start="173:16" pos:end="173:16">w</name><operator pos:start="173:17" pos:end="173:17">&lt;</operator><operator pos:start="173:18" pos:end="173:18">(</operator><literal type="number" pos:start="173:19" pos:end="173:19">1</literal><operator pos:start="173:20" pos:end="173:21">&lt;&lt;</operator><literal type="number" pos:start="173:22" pos:end="173:22">6</literal><operator pos:start="173:23" pos:end="173:23">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:19"><expr pos:start="175:9" pos:end="175:18"><name pos:start="175:9" pos:end="175:11">sum</name> <operator pos:start="175:13" pos:end="175:14">+=</operator> <name pos:start="175:16" pos:end="175:16">w</name><operator pos:start="175:17" pos:end="175:17">*</operator><name pos:start="175:18" pos:end="175:18">w</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="179:5" pos:end="182:0"><expr pos:start="179:5" pos:end="179:73"><name pos:start="179:5" pos:end="179:10">lambda</name><operator pos:start="179:11" pos:end="179:11">=</operator> <name pos:start="179:13" pos:end="179:15">sum</name><operator pos:start="179:16" pos:end="179:16">*</operator><operator pos:start="179:17" pos:end="179:17">(</operator><name pos:start="179:18" pos:end="179:25">uint64_t</name><operator pos:start="179:26" pos:end="179:26">)</operator><name pos:start="179:27" pos:end="179:36"><name pos:start="179:27" pos:end="179:27">s</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:36">lambda2</name></name> <operator pos:start="179:38" pos:end="179:39">&gt;&gt;</operator> <operator pos:start="179:41" pos:end="179:41">(</operator><name pos:start="179:42" pos:end="179:56">FF_LAMBDA_SHIFT</name> <operator pos:start="179:58" pos:end="179:58">-</operator> <literal type="number" pos:start="179:60" pos:end="179:62">6</literal> <operator pos:start="179:62" pos:end="179:62">+</operator> <literal type="number" pos:start="179:64" pos:end="179:66">6</literal> <operator pos:start="179:66" pos:end="179:66">+</operator> <literal type="number" pos:start="179:68" pos:end="179:70">6</literal> <operator pos:start="179:70" pos:end="179:70">+</operator> <literal type="number" pos:start="179:72" pos:end="179:72">6</literal><operator pos:start="179:73" pos:end="179:73">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="181:1" pos:end="181:19">#<cpp:directive pos:start="181:2" pos:end="181:6">ifdef</cpp:directive> <name pos:start="181:8" pos:end="181:19">REFINE_STATS</name></cpp:ifdef>

<block pos:start="183:1" pos:end="231:1">{<block_content pos:start="183:2" pos:end="229:1"><decl_stmt pos:start="183:2" pos:end="187:10"><decl pos:start="183:2" pos:end="187:9"><type pos:start="183:2" pos:end="186:0"><name pos:start="183:2" pos:end="186:0">START_TIMER</name></type>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>

    <name pos:start="187:5" pos:end="187:7">run</name><init pos:start="187:8" pos:end="187:9">=<expr pos:start="187:9" pos:end="187:9"><literal type="number" pos:start="187:9" pos:end="187:9">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:16"><expr pos:start="189:5" pos:end="189:15"><name pos:start="189:5" pos:end="189:13">rle_index</name><operator pos:start="189:14" pos:end="189:14">=</operator><literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>;</expr_stmt>

    <for pos:start="191:5" pos:end="224:0">for<control pos:start="191:8" pos:end="191:41">(<init pos:start="191:9" pos:end="191:18"><expr pos:start="191:9" pos:end="191:17"><name pos:start="191:9" pos:end="191:9">i</name><operator pos:start="191:10" pos:end="191:10">=</operator><name pos:start="191:11" pos:end="191:17">start_i</name></expr>;</init> <condition pos:start="191:20" pos:end="191:36"><expr pos:start="191:20" pos:end="191:35"><name pos:start="191:20" pos:end="191:20">i</name><operator pos:start="191:21" pos:end="191:22">&lt;=</operator><name pos:start="191:23" pos:end="191:35">last_non_zero</name></expr>;</condition> <incr pos:start="191:38" pos:end="191:40"><expr pos:start="191:38" pos:end="191:40"><name pos:start="191:38" pos:end="191:38">i</name><operator pos:start="191:39" pos:end="191:40">++</operator></expr></incr>)</control><block pos:start="191:42" pos:end="224:0">{<block_content pos:start="193:9" pos:end="219:9">

        <decl_stmt pos:start="193:9" pos:end="193:33"><decl pos:start="193:9" pos:end="193:32"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:13">j</name><init pos:start="193:14" pos:end="193:32">= <expr pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:29">perm_scantable</name><index pos:start="193:30" pos:end="193:32">[<expr pos:start="193:31" pos:end="193:31"><name pos:start="193:31" pos:end="193:31">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:34"><decl pos:start="195:9" pos:end="195:33"><type pos:start="195:9" pos:end="195:17"><specifier pos:start="195:9" pos:end="195:13">const</specifier> <name pos:start="195:15" pos:end="195:17">int</name></type> <name pos:start="195:19" pos:end="195:23">level</name><init pos:start="195:24" pos:end="195:33">= <expr pos:start="195:26" pos:end="195:33"><name pos:start="195:26" pos:end="195:33"><name pos:start="195:26" pos:end="195:30">block</name><index pos:start="195:31" pos:end="195:33">[<expr pos:start="195:32" pos:end="195:32"><name pos:start="195:32" pos:end="195:32">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="197:9" pos:end="197:18"><decl pos:start="197:9" pos:end="197:17"><type pos:start="197:9" pos:end="197:11"><name pos:start="197:9" pos:end="197:11">int</name></type> <name pos:start="197:13" pos:end="197:17">coeff</name></decl>;</decl_stmt>

        

        <if_stmt pos:start="201:9" pos:end="219:9"><if pos:start="201:9" pos:end="215:9">if<condition pos:start="201:11" pos:end="201:17">(<expr pos:start="201:12" pos:end="201:16"><name pos:start="201:12" pos:end="201:16">level</name></expr>)</condition><block pos:start="201:18" pos:end="215:9">{<block_content pos:start="203:13" pos:end="213:54">

            <if_stmt pos:start="203:13" pos:end="205:49"><if pos:start="203:13" pos:end="203:49">if<condition pos:start="203:15" pos:end="203:23">(<expr pos:start="203:16" pos:end="203:22"><name pos:start="203:16" pos:end="203:20">level</name><operator pos:start="203:21" pos:end="203:21">&lt;</operator><literal type="number" pos:start="203:22" pos:end="203:22">0</literal></expr>)</condition><block type="pseudo" pos:start="203:25" pos:end="203:49"><block_content pos:start="203:25" pos:end="203:49"> <expr_stmt pos:start="203:25" pos:end="203:49"><expr pos:start="203:25" pos:end="203:48"><name pos:start="203:25" pos:end="203:29">coeff</name><operator pos:start="203:30" pos:end="203:30">=</operator> <name pos:start="203:32" pos:end="203:35">qmul</name><operator pos:start="203:36" pos:end="203:36">*</operator><name pos:start="203:37" pos:end="203:41">level</name> <operator pos:start="203:43" pos:end="203:43">-</operator> <name pos:start="203:45" pos:end="203:48">qadd</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="205:13" pos:end="205:49">else<block type="pseudo" pos:start="205:25" pos:end="205:49"><block_content pos:start="205:25" pos:end="205:49">        <expr_stmt pos:start="205:25" pos:end="205:49"><expr pos:start="205:25" pos:end="205:48"><name pos:start="205:25" pos:end="205:29">coeff</name><operator pos:start="205:30" pos:end="205:30">=</operator> <name pos:start="205:32" pos:end="205:35">qmul</name><operator pos:start="205:36" pos:end="205:36">*</operator><name pos:start="205:37" pos:end="205:41">level</name> <operator pos:start="205:43" pos:end="205:43">+</operator> <name pos:start="205:45" pos:end="205:48">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:37"><expr pos:start="207:13" pos:end="207:36"><name pos:start="207:13" pos:end="207:32"><name pos:start="207:13" pos:end="207:19">run_tab</name><index pos:start="207:20" pos:end="207:32">[<expr pos:start="207:21" pos:end="207:31"><name pos:start="207:21" pos:end="207:29">rle_index</name><operator pos:start="207:30" pos:end="207:31">++</operator></expr>]</index></name><operator pos:start="207:33" pos:end="207:33">=</operator><name pos:start="207:34" pos:end="207:36">run</name></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:18"><expr pos:start="209:13" pos:end="209:17"><name pos:start="209:13" pos:end="209:15">run</name><operator pos:start="209:16" pos:end="209:16">=</operator><literal type="number" pos:start="209:17" pos:end="209:17">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="213:13" pos:end="213:54"><expr pos:start="213:13" pos:end="213:53"><call pos:start="213:13" pos:end="213:53"><name pos:start="213:13" pos:end="213:31"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:18">dsp</name><operator pos:start="213:19" pos:end="213:19">.</operator><name pos:start="213:20" pos:end="213:31">add_8x8basis</name></name><argument_list pos:start="213:32" pos:end="213:53">(<argument pos:start="213:33" pos:end="213:35"><expr pos:start="213:33" pos:end="213:35"><name pos:start="213:33" pos:end="213:35">rem</name></expr></argument>, <argument pos:start="213:38" pos:end="213:45"><expr pos:start="213:38" pos:end="213:45"><name pos:start="213:38" pos:end="213:45"><name pos:start="213:38" pos:end="213:42">basis</name><index pos:start="213:43" pos:end="213:45">[<expr pos:start="213:44" pos:end="213:44"><name pos:start="213:44" pos:end="213:44">j</name></expr>]</index></name></expr></argument>, <argument pos:start="213:48" pos:end="213:52"><expr pos:start="213:48" pos:end="213:52"><name pos:start="213:48" pos:end="213:52">coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="215:10" pos:end="219:9">else<block pos:start="215:14" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:18">

            <expr_stmt pos:start="217:13" pos:end="217:18"><expr pos:start="217:13" pos:end="217:17"><name pos:start="217:13" pos:end="217:15">run</name><operator pos:start="217:16" pos:end="217:17">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

<cpp:ifdef pos:start="223:1" pos:end="223:19">#<cpp:directive pos:start="223:2" pos:end="223:6">ifdef</cpp:directive> <name pos:start="223:8" pos:end="223:19">REFINE_STATS</name></cpp:ifdef>

<if_stmt pos:start="225:1" pos:end="229:1"><if pos:start="225:1" pos:end="229:1">if<condition pos:start="225:3" pos:end="225:19">(<expr pos:start="225:4" pos:end="225:18"><name pos:start="225:4" pos:end="225:16">last_non_zero</name><operator pos:start="225:17" pos:end="225:17">&gt;</operator><literal type="number" pos:start="225:18" pos:end="225:18">0</literal></expr>)</condition><block pos:start="225:20" pos:end="229:1">{<block_content pos:start="227:1" pos:end="227:24">

<macro pos:start="227:1" pos:end="227:24"><name pos:start="227:1" pos:end="227:10">STOP_TIMER</name><argument_list pos:start="227:11" pos:end="227:24">(<argument pos:start="227:12" pos:end="227:23"><literal type="string" pos:start="227:12" pos:end="227:23">"init rem[]"</literal></argument>)</argument_list></macro>

</block_content>}</block></if></if_stmt>

</block_content>}</block>



<block pos:start="235:1" pos:end="744:0">{<block_content pos:start="235:2" pos:end="739:1"><macro pos:start="235:2" pos:end="238:0"><name pos:start="235:2" pos:end="238:0">START_TIMER</name></macro>

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

    <for pos:start="239:5" pos:end="734:0">for<control pos:start="239:8" pos:end="239:11">(<init pos:start="239:9" pos:end="239:9">;</init><condition pos:start="239:10" pos:end="239:10">;</condition><incr/>)</control><block pos:start="239:12" pos:end="734:0">{<block_content pos:start="241:9" pos:end="729:9">

        <decl_stmt pos:start="241:9" pos:end="241:69"><decl pos:start="241:9" pos:end="241:68"><type pos:start="241:9" pos:end="241:11"><name pos:start="241:9" pos:end="241:11">int</name></type> <name pos:start="241:13" pos:end="241:22">best_score</name><init pos:start="241:23" pos:end="241:68">=<expr pos:start="241:24" pos:end="241:68"><call pos:start="241:24" pos:end="241:68"><name pos:start="241:24" pos:end="241:42"><name pos:start="241:24" pos:end="241:24">s</name><operator pos:start="241:25" pos:end="241:26">-&gt;</operator><name pos:start="241:27" pos:end="241:29">dsp</name><operator pos:start="241:30" pos:end="241:30">.</operator><name pos:start="241:31" pos:end="241:42">try_8x8basis</name></name><argument_list pos:start="241:43" pos:end="241:68">(<argument pos:start="241:44" pos:end="241:46"><expr pos:start="241:44" pos:end="241:46"><name pos:start="241:44" pos:end="241:46">rem</name></expr></argument>, <argument pos:start="241:49" pos:end="241:54"><expr pos:start="241:49" pos:end="241:54"><name pos:start="241:49" pos:end="241:54">weight</name></expr></argument>, <argument pos:start="241:57" pos:end="241:64"><expr pos:start="241:57" pos:end="241:64"><name pos:start="241:57" pos:end="241:64"><name pos:start="241:57" pos:end="241:61">basis</name><index pos:start="241:62" pos:end="241:64">[<expr pos:start="241:63" pos:end="241:63"><literal type="number" pos:start="241:63" pos:end="241:63">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="241:67" pos:end="241:67"><expr pos:start="241:67" pos:end="241:67"><literal type="number" pos:start="241:67" pos:end="241:67">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="243:9" pos:end="243:25"><decl pos:start="243:9" pos:end="243:24"><type pos:start="243:9" pos:end="243:11"><name pos:start="243:9" pos:end="243:11">int</name></type> <name pos:start="243:13" pos:end="243:22">best_coeff</name><init pos:start="243:23" pos:end="243:24">=<expr pos:start="243:24" pos:end="243:24"><literal type="number" pos:start="243:24" pos:end="243:24">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="245:9" pos:end="245:26"><decl pos:start="245:9" pos:end="245:25"><type pos:start="245:9" pos:end="245:11"><name pos:start="245:9" pos:end="245:11">int</name></type> <name pos:start="245:13" pos:end="245:23">best_change</name><init pos:start="245:24" pos:end="245:25">=<expr pos:start="245:25" pos:end="245:25"><literal type="number" pos:start="245:25" pos:end="245:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="247:9" pos:end="250:0"><decl pos:start="247:9" pos:end="247:16"><type pos:start="247:9" pos:end="247:11"><name pos:start="247:9" pos:end="247:11">int</name></type> <name pos:start="247:13" pos:end="247:16">run2</name></decl>, <decl pos:start="247:19" pos:end="247:39"><type ref="prev" pos:start="247:9" pos:end="247:11"/><name pos:start="247:19" pos:end="247:37">best_unquant_change</name><init pos:start="247:38" pos:end="247:39">=<expr pos:start="247:39" pos:end="247:39"><literal type="number" pos:start="247:39" pos:end="247:39">0</literal></expr></init></decl>, <decl pos:start="247:42" pos:end="247:57"><type ref="prev" pos:start="247:9" pos:end="247:11"/><name pos:start="247:42" pos:end="247:57">analyze_gradient</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="249:1" pos:end="249:19">#<cpp:directive pos:start="249:2" pos:end="249:6">ifdef</cpp:directive> <name pos:start="249:8" pos:end="249:19">REFINE_STATS</name></cpp:ifdef>

<block pos:start="251:1" pos:end="616:0">{<block_content pos:start="251:2" pos:end="613:28"><decl_stmt pos:start="251:2" pos:end="255:87"><decl pos:start="251:2" pos:end="255:86"><type pos:start="251:2" pos:end="254:0"><name pos:start="251:2" pos:end="254:0">START_TIMER</name></type>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

        <name pos:start="255:9" pos:end="255:24">analyze_gradient</name> <init pos:start="255:26" pos:end="255:86">= <expr pos:start="255:28" pos:end="255:86"><name pos:start="255:28" pos:end="255:40">last_non_zero</name> <operator pos:start="255:42" pos:end="255:42">&gt;</operator> <literal type="number" pos:start="255:44" pos:end="255:44">2</literal> <operator pos:start="255:46" pos:end="255:47">||</operator> <name pos:start="255:49" pos:end="255:81"><name pos:start="255:49" pos:end="255:49">s</name><operator pos:start="255:50" pos:end="255:51">-&gt;</operator><name pos:start="255:52" pos:end="255:56">avctx</name><operator pos:start="255:57" pos:end="255:58">-&gt;</operator><name pos:start="255:59" pos:end="255:81">quantizer_noise_shaping</name></name> <operator pos:start="255:83" pos:end="255:84">&gt;=</operator> <literal type="number" pos:start="255:86" pos:end="255:86">3</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="259:9" pos:end="293:9"><if pos:start="259:9" pos:end="293:9">if<condition pos:start="259:11" pos:end="259:28">(<expr pos:start="259:12" pos:end="259:27"><name pos:start="259:12" pos:end="259:27">analyze_gradient</name></expr>)</condition><block pos:start="259:29" pos:end="293:9">{<block_content pos:start="263:1" pos:end="292:0">

<cpp:ifdef pos:start="261:1" pos:end="261:19">#<cpp:directive pos:start="261:2" pos:end="261:6">ifdef</cpp:directive> <name pos:start="261:8" pos:end="261:19">REFINE_STATS</name></cpp:ifdef>

<block pos:start="263:1" pos:end="279:22">{<block_content pos:start="263:2" pos:end="279:21"><macro pos:start="263:2" pos:end="266:0"><name pos:start="263:2" pos:end="266:0">START_TIMER</name></macro>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>

            <for pos:start="267:13" pos:end="278:0">for<control pos:start="267:16" pos:end="267:31">(<init pos:start="267:17" pos:end="267:20"><expr pos:start="267:17" pos:end="267:19"><name pos:start="267:17" pos:end="267:17">i</name><operator pos:start="267:18" pos:end="267:18">=</operator><literal type="number" pos:start="267:19" pos:end="267:19">0</literal></expr>;</init> <condition pos:start="267:22" pos:end="267:26"><expr pos:start="267:22" pos:end="267:25"><name pos:start="267:22" pos:end="267:22">i</name><operator pos:start="267:23" pos:end="267:23">&lt;</operator><literal type="number" pos:start="267:24" pos:end="267:25">64</literal></expr>;</condition> <incr pos:start="267:28" pos:end="267:30"><expr pos:start="267:28" pos:end="267:30"><name pos:start="267:28" pos:end="267:28">i</name><operator pos:start="267:29" pos:end="267:30">++</operator></expr></incr>)</control><block pos:start="267:32" pos:end="278:0">{<block_content pos:start="269:17" pos:end="273:81">

                <decl_stmt pos:start="269:17" pos:end="269:33"><decl pos:start="269:17" pos:end="269:32"><type pos:start="269:17" pos:end="269:19"><name pos:start="269:17" pos:end="269:19">int</name></type> <name pos:start="269:21" pos:end="269:21">w</name><init pos:start="269:22" pos:end="269:32">= <expr pos:start="269:24" pos:end="269:32"><name pos:start="269:24" pos:end="269:32"><name pos:start="269:24" pos:end="269:29">weight</name><index pos:start="269:30" pos:end="269:32">[<expr pos:start="269:31" pos:end="269:31"><name pos:start="269:31" pos:end="269:31">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            

                <expr_stmt pos:start="273:17" pos:end="273:81"><expr pos:start="273:17" pos:end="273:80"><name pos:start="273:17" pos:end="273:21"><name pos:start="273:17" pos:end="273:18">d1</name><index pos:start="273:19" pos:end="273:21">[<expr pos:start="273:20" pos:end="273:20"><name pos:start="273:20" pos:end="273:20">i</name></expr>]</index></name> <operator pos:start="273:23" pos:end="273:23">=</operator> <operator pos:start="273:25" pos:end="273:25">(</operator><name pos:start="273:26" pos:end="273:31"><name pos:start="273:26" pos:end="273:28">rem</name><index pos:start="273:29" pos:end="273:31">[<expr pos:start="273:30" pos:end="273:30"><name pos:start="273:30" pos:end="273:30">i</name></expr>]</index></name><operator pos:start="273:32" pos:end="273:32">*</operator><name pos:start="273:33" pos:end="273:33">w</name><operator pos:start="273:34" pos:end="273:34">*</operator><name pos:start="273:35" pos:end="273:35">w</name> <operator pos:start="273:37" pos:end="273:37">+</operator> <operator pos:start="273:39" pos:end="273:39">(</operator><literal type="number" pos:start="273:40" pos:end="273:40">1</literal><operator pos:start="273:41" pos:end="273:42">&lt;&lt;</operator><operator pos:start="273:43" pos:end="273:43">(</operator><name pos:start="273:44" pos:end="273:54">RECON_SHIFT</name><operator pos:start="273:55" pos:end="273:55">+</operator><literal type="number" pos:start="273:56" pos:end="273:58">12</literal><operator pos:start="273:58" pos:end="273:58">-</operator><literal type="number" pos:start="273:59" pos:end="273:59">1</literal><operator pos:start="273:60" pos:end="273:60">)</operator><operator pos:start="273:61" pos:end="273:61">)</operator><operator pos:start="273:62" pos:end="273:62">)</operator><operator pos:start="273:63" pos:end="273:64">&gt;&gt;</operator><operator pos:start="273:65" pos:end="273:65">(</operator><name pos:start="273:66" pos:end="273:76">RECON_SHIFT</name><operator pos:start="273:77" pos:end="273:77">+</operator><literal type="number" pos:start="273:78" pos:end="273:79">12</literal><operator pos:start="273:80" pos:end="273:80">)</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

<cpp:ifdef pos:start="277:1" pos:end="277:19">#<cpp:directive pos:start="277:2" pos:end="277:6">ifdef</cpp:directive> <name pos:start="277:8" pos:end="277:19">REFINE_STATS</name></cpp:ifdef>

<macro pos:start="279:1" pos:end="279:21"><name pos:start="279:1" pos:end="279:10">STOP_TIMER</name><argument_list pos:start="279:11" pos:end="279:21">(<argument pos:start="279:12" pos:end="279:20"><literal type="string" pos:start="279:12" pos:end="279:20">"rem*w*w"</literal></argument>)</argument_list></macro></block_content>}</block>

<block pos:start="281:1" pos:end="292:0">{<block_content pos:start="281:2" pos:end="289:17"><decl_stmt pos:start="281:2" pos:end="288:0"><decl pos:start="281:2" pos:end="285:27"><type pos:start="281:2" pos:end="284:0"><name pos:start="281:2" pos:end="284:0">START_TIMER</name></type>

<cpp:endif pos:start="283:1" pos:end="283:6">#<cpp:directive pos:start="283:2" pos:end="283:6">endif</cpp:directive></cpp:endif>

            <name pos:start="285:13" pos:end="285:23"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:18">dsp</name><operator pos:start="285:19" pos:end="285:19">.</operator><name pos:start="285:20" pos:end="285:23">fdct</name></name><argument_list pos:start="285:24" pos:end="285:27">(<argument pos:start="285:25" pos:end="285:26"><expr pos:start="285:25" pos:end="285:26"><name pos:start="285:25" pos:end="285:26">d1</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:ifdef pos:start="287:1" pos:end="287:19">#<cpp:directive pos:start="287:2" pos:end="287:6">ifdef</cpp:directive> <name pos:start="287:8" pos:end="287:19">REFINE_STATS</name></cpp:ifdef>

<macro pos:start="289:1" pos:end="289:17"><name pos:start="289:1" pos:end="289:10">STOP_TIMER</name><argument_list pos:start="289:11" pos:end="289:17">(<argument pos:start="289:12" pos:end="289:16"><literal type="string" pos:start="289:12" pos:end="289:16">"dct"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:endif pos:start="291:1" pos:end="291:6">#<cpp:directive pos:start="291:2" pos:end="291:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="297:9" pos:end="345:9"><if pos:start="297:9" pos:end="345:9">if<condition pos:start="297:11" pos:end="297:19">(<expr pos:start="297:12" pos:end="297:18"><name pos:start="297:12" pos:end="297:18">start_i</name></expr>)</condition><block pos:start="297:20" pos:end="345:9">{<block_content pos:start="299:13" pos:end="343:13">

            <decl_stmt pos:start="299:13" pos:end="299:38"><decl pos:start="299:13" pos:end="299:37"><type pos:start="299:13" pos:end="299:21"><specifier pos:start="299:13" pos:end="299:17">const</specifier> <name pos:start="299:19" pos:end="299:21">int</name></type> <name pos:start="299:23" pos:end="299:27">level</name><init pos:start="299:28" pos:end="299:37">= <expr pos:start="299:30" pos:end="299:37"><name pos:start="299:30" pos:end="299:37"><name pos:start="299:30" pos:end="299:34">block</name><index pos:start="299:35" pos:end="299:37">[<expr pos:start="299:36" pos:end="299:36"><literal type="number" pos:start="299:36" pos:end="299:36">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="301:13" pos:end="301:34"><decl pos:start="301:13" pos:end="301:22"><type pos:start="301:13" pos:end="301:15"><name pos:start="301:13" pos:end="301:15">int</name></type> <name pos:start="301:17" pos:end="301:22">change</name></decl>, <decl pos:start="301:25" pos:end="301:33"><type ref="prev" pos:start="301:13" pos:end="301:15"/><name pos:start="301:25" pos:end="301:33">old_coeff</name></decl>;</decl_stmt>



            <expr_stmt pos:start="305:13" pos:end="305:32"><expr pos:start="305:13" pos:end="305:31"><call pos:start="305:13" pos:end="305:31"><name pos:start="305:13" pos:end="305:18">assert</name><argument_list pos:start="305:19" pos:end="305:31">(<argument pos:start="305:20" pos:end="305:30"><expr pos:start="305:20" pos:end="305:30"><name pos:start="305:20" pos:end="305:30"><name pos:start="305:20" pos:end="305:20">s</name><operator pos:start="305:21" pos:end="305:22">-&gt;</operator><name pos:start="305:23" pos:end="305:30">mb_intra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <expr_stmt pos:start="309:13" pos:end="309:31"><expr pos:start="309:13" pos:end="309:30"><name pos:start="309:13" pos:end="309:21">old_coeff</name><operator pos:start="309:22" pos:end="309:22">=</operator> <name pos:start="309:24" pos:end="309:24">q</name><operator pos:start="309:25" pos:end="309:25">*</operator><name pos:start="309:26" pos:end="309:30">level</name></expr>;</expr_stmt>

            

            <for pos:start="313:13" pos:end="343:13">for<control pos:start="313:16" pos:end="313:48">(<init pos:start="313:17" pos:end="313:26"><expr pos:start="313:17" pos:end="313:25"><name pos:start="313:17" pos:end="313:22">change</name><operator pos:start="313:23" pos:end="313:23">=</operator><operator pos:start="313:24" pos:end="313:24">-</operator><literal type="number" pos:start="313:25" pos:end="313:25">1</literal></expr>;</init> <condition pos:start="313:28" pos:end="313:37"><expr pos:start="313:28" pos:end="313:36"><name pos:start="313:28" pos:end="313:33">change</name><operator pos:start="313:34" pos:end="313:35">&lt;=</operator><literal type="number" pos:start="313:36" pos:end="313:36">1</literal></expr>;</condition> <incr pos:start="313:39" pos:end="313:47"><expr pos:start="313:39" pos:end="313:47"><name pos:start="313:39" pos:end="313:44">change</name><operator pos:start="313:45" pos:end="313:46">+=</operator><literal type="number" pos:start="313:47" pos:end="313:47">2</literal></expr></incr>)</control><block pos:start="313:49" pos:end="343:13">{<block_content pos:start="315:17" pos:end="341:17">

                <decl_stmt pos:start="315:17" pos:end="315:46"><decl pos:start="315:17" pos:end="315:45"><type pos:start="315:17" pos:end="315:19"><name pos:start="315:17" pos:end="315:19">int</name></type> <name pos:start="315:21" pos:end="315:29">new_level</name><init pos:start="315:30" pos:end="315:45">= <expr pos:start="315:32" pos:end="315:45"><name pos:start="315:32" pos:end="315:36">level</name> <operator pos:start="315:38" pos:end="315:38">+</operator> <name pos:start="315:40" pos:end="315:45">change</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="317:17" pos:end="317:37"><decl pos:start="317:17" pos:end="317:25"><type pos:start="317:17" pos:end="317:19"><name pos:start="317:17" pos:end="317:19">int</name></type> <name pos:start="317:21" pos:end="317:25">score</name></decl>, <decl pos:start="317:28" pos:end="317:36"><type ref="prev" pos:start="317:17" pos:end="317:19"/><name pos:start="317:28" pos:end="317:36">new_coeff</name></decl>;</decl_stmt>

                

                <expr_stmt pos:start="321:17" pos:end="321:39"><expr pos:start="321:17" pos:end="321:38"><name pos:start="321:17" pos:end="321:25">new_coeff</name><operator pos:start="321:26" pos:end="321:26">=</operator> <name pos:start="321:28" pos:end="321:28">q</name><operator pos:start="321:29" pos:end="321:29">*</operator><name pos:start="321:30" pos:end="321:38">new_level</name></expr>;</expr_stmt>

                <if_stmt pos:start="323:17" pos:end="325:29"><if pos:start="323:17" pos:end="325:29">if<condition pos:start="323:19" pos:end="323:54">(<expr pos:start="323:20" pos:end="323:53"><name pos:start="323:20" pos:end="323:28">new_coeff</name> <operator pos:start="323:30" pos:end="323:31">&gt;=</operator> <literal type="number" pos:start="323:33" pos:end="323:36">2048</literal> <operator pos:start="323:38" pos:end="323:39">||</operator> <name pos:start="323:41" pos:end="323:49">new_coeff</name> <operator pos:start="323:51" pos:end="323:51">&lt;</operator> <literal type="number" pos:start="323:53" pos:end="323:53">0</literal></expr>)</condition><block type="pseudo" pos:start="325:21" pos:end="325:29"><block_content pos:start="325:21" pos:end="325:29">

                    <continue pos:start="325:21" pos:end="325:29">continue;</continue></block_content></block></if></if_stmt>



                <expr_stmt pos:start="329:17" pos:end="329:89"><expr pos:start="329:17" pos:end="329:88"><name pos:start="329:17" pos:end="329:21">score</name><operator pos:start="329:22" pos:end="329:22">=</operator> <call pos:start="329:24" pos:end="329:88"><name pos:start="329:24" pos:end="329:42"><name pos:start="329:24" pos:end="329:24">s</name><operator pos:start="329:25" pos:end="329:26">-&gt;</operator><name pos:start="329:27" pos:end="329:29">dsp</name><operator pos:start="329:30" pos:end="329:30">.</operator><name pos:start="329:31" pos:end="329:42">try_8x8basis</name></name><argument_list pos:start="329:43" pos:end="329:88">(<argument pos:start="329:44" pos:end="329:46"><expr pos:start="329:44" pos:end="329:46"><name pos:start="329:44" pos:end="329:46">rem</name></expr></argument>, <argument pos:start="329:49" pos:end="329:54"><expr pos:start="329:49" pos:end="329:54"><name pos:start="329:49" pos:end="329:54">weight</name></expr></argument>, <argument pos:start="329:57" pos:end="329:64"><expr pos:start="329:57" pos:end="329:64"><name pos:start="329:57" pos:end="329:64"><name pos:start="329:57" pos:end="329:61">basis</name><index pos:start="329:62" pos:end="329:64">[<expr pos:start="329:63" pos:end="329:63"><literal type="number" pos:start="329:63" pos:end="329:63">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="329:67" pos:end="329:87"><expr pos:start="329:67" pos:end="329:87"><name pos:start="329:67" pos:end="329:75">new_coeff</name> <operator pos:start="329:77" pos:end="329:77">-</operator> <name pos:start="329:79" pos:end="329:87">old_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="331:17" pos:end="341:17"><if pos:start="331:17" pos:end="341:17">if<condition pos:start="331:19" pos:end="331:36">(<expr pos:start="331:20" pos:end="331:35"><name pos:start="331:20" pos:end="331:24">score</name><operator pos:start="331:25" pos:end="331:25">&lt;</operator><name pos:start="331:26" pos:end="331:35">best_score</name></expr>)</condition><block pos:start="331:37" pos:end="341:17">{<block_content pos:start="333:21" pos:end="339:63">

                    <expr_stmt pos:start="333:21" pos:end="333:38"><expr pos:start="333:21" pos:end="333:37"><name pos:start="333:21" pos:end="333:30">best_score</name><operator pos:start="333:31" pos:end="333:31">=</operator> <name pos:start="333:33" pos:end="333:37">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="335:21" pos:end="335:34"><expr pos:start="335:21" pos:end="335:33"><name pos:start="335:21" pos:end="335:30">best_coeff</name><operator pos:start="335:31" pos:end="335:31">=</operator> <literal type="number" pos:start="335:33" pos:end="335:33">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="337:21" pos:end="337:40"><expr pos:start="337:21" pos:end="337:39"><name pos:start="337:21" pos:end="337:31">best_change</name><operator pos:start="337:32" pos:end="337:32">=</operator> <name pos:start="337:34" pos:end="337:39">change</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="339:21" pos:end="339:63"><expr pos:start="339:21" pos:end="339:62"><name pos:start="339:21" pos:end="339:39">best_unquant_change</name><operator pos:start="339:40" pos:end="339:40">=</operator> <name pos:start="339:42" pos:end="339:50">new_coeff</name> <operator pos:start="339:52" pos:end="339:52">-</operator> <name pos:start="339:54" pos:end="339:62">old_coeff</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        

        <expr_stmt pos:start="349:9" pos:end="349:14"><expr pos:start="349:9" pos:end="349:13"><name pos:start="349:9" pos:end="349:11">run</name><operator pos:start="349:12" pos:end="349:12">=</operator><literal type="number" pos:start="349:13" pos:end="349:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:20"><expr pos:start="351:9" pos:end="351:19"><name pos:start="351:9" pos:end="351:17">rle_index</name><operator pos:start="351:18" pos:end="351:18">=</operator><literal type="number" pos:start="351:19" pos:end="351:19">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:35"><expr pos:start="353:9" pos:end="353:34"><name pos:start="353:9" pos:end="353:12">run2</name><operator pos:start="353:13" pos:end="353:13">=</operator> <name pos:start="353:15" pos:end="353:34"><name pos:start="353:15" pos:end="353:21">run_tab</name><index pos:start="353:22" pos:end="353:34">[<expr pos:start="353:23" pos:end="353:33"><name pos:start="353:23" pos:end="353:31">rle_index</name><operator pos:start="353:32" pos:end="353:33">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:21"><expr pos:start="355:9" pos:end="355:20"><name pos:start="355:9" pos:end="355:18">prev_level</name><operator pos:start="355:19" pos:end="355:19">=</operator><literal type="number" pos:start="355:20" pos:end="355:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:19"><expr pos:start="357:9" pos:end="357:18"><name pos:start="357:9" pos:end="357:16">prev_run</name><operator pos:start="357:17" pos:end="357:17">=</operator><literal type="number" pos:start="357:18" pos:end="357:18">0</literal></expr>;</expr_stmt>



        <for pos:start="361:9" pos:end="612:0">for<control pos:start="361:12" pos:end="361:33">(<init pos:start="361:13" pos:end="361:22"><expr pos:start="361:13" pos:end="361:21"><name pos:start="361:13" pos:end="361:13">i</name><operator pos:start="361:14" pos:end="361:14">=</operator><name pos:start="361:15" pos:end="361:21">start_i</name></expr>;</init> <condition pos:start="361:24" pos:end="361:28"><expr pos:start="361:24" pos:end="361:27"><name pos:start="361:24" pos:end="361:24">i</name><operator pos:start="361:25" pos:end="361:25">&lt;</operator><literal type="number" pos:start="361:26" pos:end="361:27">64</literal></expr>;</condition> <incr pos:start="361:30" pos:end="361:32"><expr pos:start="361:30" pos:end="361:32"><name pos:start="361:30" pos:end="361:30">i</name><operator pos:start="361:31" pos:end="361:32">++</operator></expr></incr>)</control><block pos:start="361:34" pos:end="612:0">{<block_content pos:start="363:13" pos:end="607:13">

            <decl_stmt pos:start="363:13" pos:end="363:37"><decl pos:start="363:13" pos:end="363:36"><type pos:start="363:13" pos:end="363:15"><name pos:start="363:13" pos:end="363:15">int</name></type> <name pos:start="363:17" pos:end="363:17">j</name><init pos:start="363:18" pos:end="363:36">= <expr pos:start="363:20" pos:end="363:36"><name pos:start="363:20" pos:end="363:36"><name pos:start="363:20" pos:end="363:33">perm_scantable</name><index pos:start="363:34" pos:end="363:36">[<expr pos:start="363:35" pos:end="363:35"><name pos:start="363:35" pos:end="363:35">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="365:13" pos:end="365:38"><decl pos:start="365:13" pos:end="365:37"><type pos:start="365:13" pos:end="365:21"><specifier pos:start="365:13" pos:end="365:17">const</specifier> <name pos:start="365:19" pos:end="365:21">int</name></type> <name pos:start="365:23" pos:end="365:27">level</name><init pos:start="365:28" pos:end="365:37">= <expr pos:start="365:30" pos:end="365:37"><name pos:start="365:30" pos:end="365:37"><name pos:start="365:30" pos:end="365:34">block</name><index pos:start="365:35" pos:end="365:37">[<expr pos:start="365:36" pos:end="365:36"><name pos:start="365:36" pos:end="365:36">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="367:13" pos:end="367:34"><decl pos:start="367:13" pos:end="367:22"><type pos:start="367:13" pos:end="367:15"><name pos:start="367:13" pos:end="367:15">int</name></type> <name pos:start="367:17" pos:end="367:22">change</name></decl>, <decl pos:start="367:25" pos:end="367:33"><type ref="prev" pos:start="367:13" pos:end="367:15"/><name pos:start="367:25" pos:end="367:33">old_coeff</name></decl>;</decl_stmt>



            <if_stmt pos:start="371:13" pos:end="373:22"><if pos:start="371:13" pos:end="373:22">if<condition pos:start="371:15" pos:end="371:78">(<expr pos:start="371:16" pos:end="371:77"><name pos:start="371:16" pos:end="371:48"><name pos:start="371:16" pos:end="371:16">s</name><operator pos:start="371:17" pos:end="371:18">-&gt;</operator><name pos:start="371:19" pos:end="371:23">avctx</name><operator pos:start="371:24" pos:end="371:25">-&gt;</operator><name pos:start="371:26" pos:end="371:48">quantizer_noise_shaping</name></name> <operator pos:start="371:50" pos:end="371:50">&lt;</operator> <literal type="number" pos:start="371:52" pos:end="371:52">3</literal> <operator pos:start="371:54" pos:end="371:55">&amp;&amp;</operator> <name pos:start="371:57" pos:end="371:57">i</name> <operator pos:start="371:59" pos:end="371:59">&gt;</operator> <name pos:start="371:61" pos:end="371:73">last_non_zero</name> <operator pos:start="371:75" pos:end="371:75">+</operator> <literal type="number" pos:start="371:77" pos:end="371:77">1</literal></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="373:22"><block_content pos:start="373:17" pos:end="373:22">

                <break pos:start="373:17" pos:end="373:22">break;</break></block_content></block></if></if_stmt>



            <if_stmt pos:start="377:13" pos:end="393:13"><if pos:start="377:13" pos:end="385:13">if<condition pos:start="377:15" pos:end="377:21">(<expr pos:start="377:16" pos:end="377:20"><name pos:start="377:16" pos:end="377:20">level</name></expr>)</condition><block pos:start="377:22" pos:end="385:13">{<block_content pos:start="379:17" pos:end="383:43">

                <if_stmt pos:start="379:17" pos:end="381:57"><if pos:start="379:17" pos:end="379:57">if<condition pos:start="379:19" pos:end="379:27">(<expr pos:start="379:20" pos:end="379:26"><name pos:start="379:20" pos:end="379:24">level</name><operator pos:start="379:25" pos:end="379:25">&lt;</operator><literal type="number" pos:start="379:26" pos:end="379:26">0</literal></expr>)</condition><block type="pseudo" pos:start="379:29" pos:end="379:57"><block_content pos:start="379:29" pos:end="379:57"> <expr_stmt pos:start="379:29" pos:end="379:57"><expr pos:start="379:29" pos:end="379:56"><name pos:start="379:29" pos:end="379:37">old_coeff</name><operator pos:start="379:38" pos:end="379:38">=</operator> <name pos:start="379:40" pos:end="379:43">qmul</name><operator pos:start="379:44" pos:end="379:44">*</operator><name pos:start="379:45" pos:end="379:49">level</name> <operator pos:start="379:51" pos:end="379:51">-</operator> <name pos:start="379:53" pos:end="379:56">qadd</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="381:17" pos:end="381:57">else<block type="pseudo" pos:start="381:29" pos:end="381:57"><block_content pos:start="381:29" pos:end="381:57">        <expr_stmt pos:start="381:29" pos:end="381:57"><expr pos:start="381:29" pos:end="381:56"><name pos:start="381:29" pos:end="381:37">old_coeff</name><operator pos:start="381:38" pos:end="381:38">=</operator> <name pos:start="381:40" pos:end="381:43">qmul</name><operator pos:start="381:44" pos:end="381:44">*</operator><name pos:start="381:45" pos:end="381:49">level</name> <operator pos:start="381:51" pos:end="381:51">+</operator> <name pos:start="381:53" pos:end="381:56">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:43"><expr pos:start="383:17" pos:end="383:42"><name pos:start="383:17" pos:end="383:20">run2</name><operator pos:start="383:21" pos:end="383:21">=</operator> <name pos:start="383:23" pos:end="383:42"><name pos:start="383:23" pos:end="383:29">run_tab</name><index pos:start="383:30" pos:end="383:42">[<expr pos:start="383:31" pos:end="383:41"><name pos:start="383:31" pos:end="383:39">rle_index</name><operator pos:start="383:40" pos:end="383:41">++</operator></expr>]</index></name></expr>;</expr_stmt> <comment type="line" pos:start="383:45" pos:end="383:70">//FIXME ! maybe after last</comment>

            </block_content>}</block></if><else pos:start="385:14" pos:end="393:13">else<block pos:start="385:18" pos:end="393:13">{<block_content pos:start="387:17" pos:end="391:55">

                <expr_stmt pos:start="387:17" pos:end="387:28"><expr pos:start="387:17" pos:end="387:27"><name pos:start="387:17" pos:end="387:25">old_coeff</name><operator pos:start="387:26" pos:end="387:26">=</operator><literal type="number" pos:start="387:27" pos:end="387:27">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:23"><expr pos:start="389:17" pos:end="389:22"><name pos:start="389:17" pos:end="389:20">run2</name><operator pos:start="389:21" pos:end="389:22">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="391:17" pos:end="391:55"><expr pos:start="391:17" pos:end="391:54"><call pos:start="391:17" pos:end="391:54"><name pos:start="391:17" pos:end="391:22">assert</name><argument_list pos:start="391:23" pos:end="391:54">(<argument pos:start="391:24" pos:end="391:52"><expr pos:start="391:24" pos:end="391:52"><name pos:start="391:24" pos:end="391:27">run2</name><operator pos:start="391:28" pos:end="391:29">&gt;=</operator><literal type="number" pos:start="391:30" pos:end="391:30">0</literal> <operator pos:start="391:32" pos:end="391:33">||</operator> <name pos:start="391:35" pos:end="391:35">i</name> <operator pos:start="391:37" pos:end="391:38">&gt;=</operator> <name pos:start="391:40" pos:end="391:52">last_non_zero</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            

            <for pos:start="397:13" pos:end="589:13">for<control pos:start="397:16" pos:end="397:48">(<init pos:start="397:17" pos:end="397:26"><expr pos:start="397:17" pos:end="397:25"><name pos:start="397:17" pos:end="397:22">change</name><operator pos:start="397:23" pos:end="397:23">=</operator><operator pos:start="397:24" pos:end="397:24">-</operator><literal type="number" pos:start="397:25" pos:end="397:25">1</literal></expr>;</init> <condition pos:start="397:28" pos:end="397:37"><expr pos:start="397:28" pos:end="397:36"><name pos:start="397:28" pos:end="397:33">change</name><operator pos:start="397:34" pos:end="397:35">&lt;=</operator><literal type="number" pos:start="397:36" pos:end="397:36">1</literal></expr>;</condition> <incr pos:start="397:39" pos:end="397:47"><expr pos:start="397:39" pos:end="397:47"><name pos:start="397:39" pos:end="397:44">change</name><operator pos:start="397:45" pos:end="397:46">+=</operator><literal type="number" pos:start="397:47" pos:end="397:47">2</literal></expr></incr>)</control><block pos:start="397:49" pos:end="589:13">{<block_content pos:start="399:17" pos:end="587:17">

                <decl_stmt pos:start="399:17" pos:end="399:46"><decl pos:start="399:17" pos:end="399:45"><type pos:start="399:17" pos:end="399:19"><name pos:start="399:17" pos:end="399:19">int</name></type> <name pos:start="399:21" pos:end="399:29">new_level</name><init pos:start="399:30" pos:end="399:45">= <expr pos:start="399:32" pos:end="399:45"><name pos:start="399:32" pos:end="399:36">level</name> <operator pos:start="399:38" pos:end="399:38">+</operator> <name pos:start="399:40" pos:end="399:45">change</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="401:17" pos:end="401:53"><decl pos:start="401:17" pos:end="401:25"><type pos:start="401:17" pos:end="401:19"><name pos:start="401:17" pos:end="401:19">int</name></type> <name pos:start="401:21" pos:end="401:25">score</name></decl>, <decl pos:start="401:28" pos:end="401:36"><type ref="prev" pos:start="401:17" pos:end="401:19"/><name pos:start="401:28" pos:end="401:36">new_coeff</name></decl>, <decl pos:start="401:39" pos:end="401:52"><type ref="prev" pos:start="401:17" pos:end="401:19"/><name pos:start="401:39" pos:end="401:52">unquant_change</name></decl>;</decl_stmt>

                

                <expr_stmt pos:start="405:17" pos:end="405:24"><expr pos:start="405:17" pos:end="405:23"><name pos:start="405:17" pos:end="405:21">score</name><operator pos:start="405:22" pos:end="405:22">=</operator><literal type="number" pos:start="405:23" pos:end="405:23">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="407:17" pos:end="409:28"><if pos:start="407:17" pos:end="409:28">if<condition pos:start="407:19" pos:end="407:88">(<expr pos:start="407:20" pos:end="407:87"><name pos:start="407:20" pos:end="407:52"><name pos:start="407:20" pos:end="407:20">s</name><operator pos:start="407:21" pos:end="407:22">-&gt;</operator><name pos:start="407:23" pos:end="407:27">avctx</name><operator pos:start="407:28" pos:end="407:29">-&gt;</operator><name pos:start="407:30" pos:end="407:52">quantizer_noise_shaping</name></name> <operator pos:start="407:54" pos:end="407:54">&lt;</operator> <literal type="number" pos:start="407:56" pos:end="407:56">2</literal> <operator pos:start="407:58" pos:end="407:59">&amp;&amp;</operator> <call pos:start="407:61" pos:end="407:74"><name pos:start="407:61" pos:end="407:63">ABS</name><argument_list pos:start="407:64" pos:end="407:74">(<argument pos:start="407:65" pos:end="407:73"><expr pos:start="407:65" pos:end="407:73"><name pos:start="407:65" pos:end="407:73">new_level</name></expr></argument>)</argument_list></call> <operator pos:start="407:76" pos:end="407:76">&gt;</operator> <call pos:start="407:78" pos:end="407:87"><name pos:start="407:78" pos:end="407:80">ABS</name><argument_list pos:start="407:81" pos:end="407:87">(<argument pos:start="407:82" pos:end="407:86"><expr pos:start="407:82" pos:end="407:86"><name pos:start="407:82" pos:end="407:86">level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="409:20" pos:end="409:28"><block_content pos:start="409:20" pos:end="409:28">

                   <continue pos:start="409:20" pos:end="409:28">continue;</continue></block_content></block></if></if_stmt>



                <if_stmt pos:start="413:17" pos:end="561:17"><if pos:start="413:17" pos:end="509:17">if<condition pos:start="413:19" pos:end="413:29">(<expr pos:start="413:20" pos:end="413:28"><name pos:start="413:20" pos:end="413:28">new_level</name></expr>)</condition><block pos:start="413:30" pos:end="509:17">{<block_content pos:start="415:21" pos:end="507:21">

                    <if_stmt pos:start="415:21" pos:end="417:69"><if pos:start="415:21" pos:end="415:69">if<condition pos:start="415:23" pos:end="415:35">(<expr pos:start="415:24" pos:end="415:34"><name pos:start="415:24" pos:end="415:32">new_level</name><operator pos:start="415:33" pos:end="415:33">&lt;</operator><literal type="number" pos:start="415:34" pos:end="415:34">0</literal></expr>)</condition><block type="pseudo" pos:start="415:37" pos:end="415:69"><block_content pos:start="415:37" pos:end="415:69"> <expr_stmt pos:start="415:37" pos:end="415:69"><expr pos:start="415:37" pos:end="415:68"><name pos:start="415:37" pos:end="415:45">new_coeff</name><operator pos:start="415:46" pos:end="415:46">=</operator> <name pos:start="415:48" pos:end="415:51">qmul</name><operator pos:start="415:52" pos:end="415:52">*</operator><name pos:start="415:53" pos:end="415:61">new_level</name> <operator pos:start="415:63" pos:end="415:63">-</operator> <name pos:start="415:65" pos:end="415:68">qadd</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="417:21" pos:end="417:69">else<block type="pseudo" pos:start="417:37" pos:end="417:69"><block_content pos:start="417:37" pos:end="417:69">            <expr_stmt pos:start="417:37" pos:end="417:69"><expr pos:start="417:37" pos:end="417:68"><name pos:start="417:37" pos:end="417:45">new_coeff</name><operator pos:start="417:46" pos:end="417:46">=</operator> <name pos:start="417:48" pos:end="417:51">qmul</name><operator pos:start="417:52" pos:end="417:52">*</operator><name pos:start="417:53" pos:end="417:61">new_level</name> <operator pos:start="417:63" pos:end="417:63">+</operator> <name pos:start="417:65" pos:end="417:68">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="419:21" pos:end="421:33"><if pos:start="419:21" pos:end="421:33">if<condition pos:start="419:23" pos:end="419:63">(<expr pos:start="419:24" pos:end="419:62"><name pos:start="419:24" pos:end="419:32">new_coeff</name> <operator pos:start="419:34" pos:end="419:35">&gt;=</operator> <literal type="number" pos:start="419:37" pos:end="419:40">2048</literal> <operator pos:start="419:42" pos:end="419:43">||</operator> <name pos:start="419:45" pos:end="419:53">new_coeff</name> <operator pos:start="419:55" pos:end="419:56">&lt;=</operator> <operator pos:start="419:58" pos:end="419:58">-</operator><literal type="number" pos:start="419:59" pos:end="419:62">2048</literal></expr>)</condition><block type="pseudo" pos:start="421:25" pos:end="421:33"><block_content pos:start="421:25" pos:end="421:33">

                        <continue pos:start="421:25" pos:end="421:33">continue;</continue></block_content></block></if></if_stmt>

                    <comment type="line" pos:start="423:21" pos:end="423:46">//FIXME check for overflow</comment>

                    

                    <if_stmt pos:start="427:21" pos:end="507:21"><if pos:start="427:21" pos:end="445:21">if<condition pos:start="427:23" pos:end="427:29">(<expr pos:start="427:24" pos:end="427:28"><name pos:start="427:24" pos:end="427:28">level</name></expr>)</condition><block pos:start="427:30" pos:end="445:21">{<block_content pos:start="429:25" pos:end="443:25">

                        <if_stmt pos:start="429:25" pos:end="443:25"><if pos:start="429:25" pos:end="443:25">if<condition pos:start="429:27" pos:end="429:53">(<expr pos:start="429:28" pos:end="429:52"><name pos:start="429:28" pos:end="429:48"><name pos:start="429:28" pos:end="429:32">level</name> <argument_list type="generic" pos:start="429:34" pos:end="429:48">&lt; <argument pos:start="429:36" pos:end="429:46"><expr pos:start="429:36" pos:end="429:46"><literal type="number" pos:start="429:36" pos:end="429:37">63</literal> <operator pos:start="429:39" pos:end="429:40">&amp;&amp;</operator> <name pos:start="429:42" pos:end="429:46">level</name></expr></argument> &gt;</argument_list></name> <operator pos:start="429:50" pos:end="429:50">-</operator><literal type="number" pos:start="429:51" pos:end="429:52">63</literal></expr>)</condition><block pos:start="429:54" pos:end="443:25">{<block_content pos:start="431:29" pos:end="441:88">

                            <if_stmt pos:start="431:29" pos:end="441:88"><if pos:start="431:29" pos:end="435:83">if<condition pos:start="431:31" pos:end="431:49">(<expr pos:start="431:32" pos:end="431:48"><name pos:start="431:32" pos:end="431:32">i</name> <operator pos:start="431:34" pos:end="431:34">&lt;</operator> <name pos:start="431:36" pos:end="431:48">last_non_zero</name></expr>)</condition><block type="pseudo" pos:start="433:33" pos:end="435:83"><block_content pos:start="433:33" pos:end="435:83">

                                <expr_stmt pos:start="433:33" pos:end="435:83"><expr pos:start="433:33" pos:end="435:82"><name pos:start="433:33" pos:end="433:37">score</name> <operator pos:start="433:39" pos:end="433:40">+=</operator>   <name pos:start="433:44" pos:end="433:86"><name pos:start="433:44" pos:end="433:49">length</name><index pos:start="433:50" pos:end="433:86">[<expr pos:start="433:51" pos:end="433:85"><call pos:start="433:51" pos:end="433:85"><name pos:start="433:51" pos:end="433:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="433:67" pos:end="433:85">(<argument pos:start="433:68" pos:end="433:70"><expr pos:start="433:68" pos:end="433:70"><name pos:start="433:68" pos:end="433:70">run</name></expr></argument>, <argument pos:start="433:73" pos:end="433:84"><expr pos:start="433:73" pos:end="433:84"><name pos:start="433:73" pos:end="433:81">new_level</name><operator pos:start="433:82" pos:end="433:82">+</operator><literal type="number" pos:start="433:83" pos:end="433:84">64</literal></expr></argument>)</argument_list></call></expr>]</index></name>

                                         <operator pos:start="435:42" pos:end="435:42">-</operator> <name pos:start="435:44" pos:end="435:82"><name pos:start="435:44" pos:end="435:49">length</name><index pos:start="435:50" pos:end="435:82">[<expr pos:start="435:51" pos:end="435:81"><call pos:start="435:51" pos:end="435:81"><name pos:start="435:51" pos:end="435:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="435:67" pos:end="435:81">(<argument pos:start="435:68" pos:end="435:70"><expr pos:start="435:68" pos:end="435:70"><name pos:start="435:68" pos:end="435:70">run</name></expr></argument>, <argument pos:start="435:73" pos:end="435:80"><expr pos:start="435:73" pos:end="435:80"><name pos:start="435:73" pos:end="435:77">level</name><operator pos:start="435:78" pos:end="435:78">+</operator><literal type="number" pos:start="435:79" pos:end="435:80">64</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="437:29" pos:end="441:88">else<block type="pseudo" pos:start="439:33" pos:end="441:88"><block_content pos:start="439:33" pos:end="441:88">

                                <expr_stmt pos:start="439:33" pos:end="441:88"><expr pos:start="439:33" pos:end="441:87"><name pos:start="439:33" pos:end="439:37">score</name> <operator pos:start="439:39" pos:end="439:40">+=</operator>   <name pos:start="439:44" pos:end="439:91"><name pos:start="439:44" pos:end="439:54">last_length</name><index pos:start="439:55" pos:end="439:91">[<expr pos:start="439:56" pos:end="439:90"><call pos:start="439:56" pos:end="439:90"><name pos:start="439:56" pos:end="439:71">UNI_AC_ENC_INDEX</name><argument_list pos:start="439:72" pos:end="439:90">(<argument pos:start="439:73" pos:end="439:75"><expr pos:start="439:73" pos:end="439:75"><name pos:start="439:73" pos:end="439:75">run</name></expr></argument>, <argument pos:start="439:78" pos:end="439:89"><expr pos:start="439:78" pos:end="439:89"><name pos:start="439:78" pos:end="439:86">new_level</name><operator pos:start="439:87" pos:end="439:87">+</operator><literal type="number" pos:start="439:88" pos:end="439:89">64</literal></expr></argument>)</argument_list></call></expr>]</index></name>

                                         <operator pos:start="441:42" pos:end="441:42">-</operator> <name pos:start="441:44" pos:end="441:87"><name pos:start="441:44" pos:end="441:54">last_length</name><index pos:start="441:55" pos:end="441:87">[<expr pos:start="441:56" pos:end="441:86"><call pos:start="441:56" pos:end="441:86"><name pos:start="441:56" pos:end="441:71">UNI_AC_ENC_INDEX</name><argument_list pos:start="441:72" pos:end="441:86">(<argument pos:start="441:73" pos:end="441:75"><expr pos:start="441:73" pos:end="441:75"><name pos:start="441:73" pos:end="441:75">run</name></expr></argument>, <argument pos:start="441:78" pos:end="441:85"><expr pos:start="441:78" pos:end="441:85"><name pos:start="441:78" pos:end="441:82">level</name><operator pos:start="441:83" pos:end="441:83">+</operator><literal type="number" pos:start="441:84" pos:end="441:85">64</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if><else pos:start="445:22" pos:end="507:21">else<block pos:start="445:26" pos:end="507:21">{<block_content pos:start="447:25" pos:end="505:25">

                        <expr_stmt pos:start="447:25" pos:end="447:50"><expr pos:start="447:25" pos:end="447:49"><call pos:start="447:25" pos:end="447:49"><name pos:start="447:25" pos:end="447:30">assert</name><argument_list pos:start="447:31" pos:end="447:49">(<argument pos:start="447:32" pos:end="447:48"><expr pos:start="447:32" pos:end="447:48"><call pos:start="447:32" pos:end="447:45"><name pos:start="447:32" pos:end="447:34">ABS</name><argument_list pos:start="447:35" pos:end="447:45">(<argument pos:start="447:36" pos:end="447:44"><expr pos:start="447:36" pos:end="447:44"><name pos:start="447:36" pos:end="447:44">new_level</name></expr></argument>)</argument_list></call><operator pos:start="447:46" pos:end="447:47">==</operator><literal type="number" pos:start="447:48" pos:end="447:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        

                        <if_stmt pos:start="451:25" pos:end="459:25"><if pos:start="451:25" pos:end="459:25">if<condition pos:start="451:27" pos:end="451:44">(<expr pos:start="451:28" pos:end="451:43"><name pos:start="451:28" pos:end="451:43">analyze_gradient</name></expr>)</condition><block pos:start="451:45" pos:end="459:25">{<block_content pos:start="453:29" pos:end="457:41">

                            <decl_stmt pos:start="453:29" pos:end="453:54"><decl pos:start="453:29" pos:end="453:53"><type pos:start="453:29" pos:end="453:31"><name pos:start="453:29" pos:end="453:31">int</name></type> <name pos:start="453:33" pos:end="453:33">g</name><init pos:start="453:34" pos:end="453:53">= <expr pos:start="453:36" pos:end="453:53"><name pos:start="453:36" pos:end="453:53"><name pos:start="453:36" pos:end="453:37">d1</name><index pos:start="453:38" pos:end="453:53">[ <expr pos:start="453:40" pos:end="453:51"><name pos:start="453:40" pos:end="453:51"><name pos:start="453:40" pos:end="453:48">scantable</name><index pos:start="453:49" pos:end="453:51">[<expr pos:start="453:50" pos:end="453:50"><name pos:start="453:50" pos:end="453:50">i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="455:29" pos:end="457:41"><if pos:start="455:29" pos:end="457:41">if<condition pos:start="455:31" pos:end="455:55">(<expr pos:start="455:32" pos:end="455:54"><name pos:start="455:32" pos:end="455:32">g</name> <operator pos:start="455:34" pos:end="455:35">&amp;&amp;</operator> <operator pos:start="455:37" pos:end="455:37">(</operator><name pos:start="455:38" pos:end="455:38">g</name><operator pos:start="455:39" pos:end="455:39">^</operator><name pos:start="455:40" pos:end="455:48">new_level</name><operator pos:start="455:49" pos:end="455:49">)</operator> <operator pos:start="455:51" pos:end="455:52">&gt;=</operator> <literal type="number" pos:start="455:54" pos:end="455:54">0</literal></expr>)</condition><block type="pseudo" pos:start="457:33" pos:end="457:41"><block_content pos:start="457:33" pos:end="457:41">

                                <continue pos:start="457:33" pos:end="457:41">continue;</continue></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>



                        <if_stmt pos:start="463:25" pos:end="505:25"><if pos:start="463:25" pos:end="493:25">if<condition pos:start="463:27" pos:end="463:45">(<expr pos:start="463:28" pos:end="463:44"><name pos:start="463:28" pos:end="463:28">i</name> <operator pos:start="463:30" pos:end="463:30">&lt;</operator> <name pos:start="463:32" pos:end="463:44">last_non_zero</name></expr>)</condition><block pos:start="463:46" pos:end="493:25">{<block_content pos:start="465:29" pos:end="491:100">

                            <decl_stmt pos:start="465:29" pos:end="465:53"><decl pos:start="465:29" pos:end="465:52"><type pos:start="465:29" pos:end="465:31"><name pos:start="465:29" pos:end="465:31">int</name></type> <name pos:start="465:33" pos:end="465:38">next_i</name><init pos:start="465:39" pos:end="465:52">= <expr pos:start="465:41" pos:end="465:52"><name pos:start="465:41" pos:end="465:41">i</name> <operator pos:start="465:43" pos:end="465:43">+</operator> <name pos:start="465:45" pos:end="465:48">run2</name> <operator pos:start="465:50" pos:end="465:50">+</operator> <literal type="number" pos:start="465:52" pos:end="465:52">1</literal></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="467:29" pos:end="467:81"><decl pos:start="467:29" pos:end="467:80"><type pos:start="467:29" pos:end="467:31"><name pos:start="467:29" pos:end="467:31">int</name></type> <name pos:start="467:33" pos:end="467:42">next_level</name><init pos:start="467:43" pos:end="467:80">= <expr pos:start="467:45" pos:end="467:80"><name pos:start="467:45" pos:end="467:75"><name pos:start="467:45" pos:end="467:49">block</name><index pos:start="467:50" pos:end="467:75">[ <expr pos:start="467:52" pos:end="467:73"><name pos:start="467:52" pos:end="467:73"><name pos:start="467:52" pos:end="467:65">perm_scantable</name><index pos:start="467:66" pos:end="467:73">[<expr pos:start="467:67" pos:end="467:72"><name pos:start="467:67" pos:end="467:72">next_i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="467:77" pos:end="467:77">+</operator> <literal type="number" pos:start="467:79" pos:end="467:80">64</literal></expr></init></decl>;</decl_stmt>

                            

                            <if_stmt pos:start="471:29" pos:end="473:46"><if pos:start="471:29" pos:end="473:46">if<condition pos:start="471:31" pos:end="471:49">(<expr pos:start="471:32" pos:end="471:48"><name pos:start="471:32" pos:end="471:41">next_level</name><operator pos:start="471:42" pos:end="471:42">&amp;</operator><operator pos:start="471:43" pos:end="471:43">(</operator><operator pos:start="471:44" pos:end="471:44">~</operator><literal type="number" pos:start="471:45" pos:end="471:47">127</literal><operator pos:start="471:48" pos:end="471:48">)</operator></expr>)</condition><block type="pseudo" pos:start="473:33" pos:end="473:46"><block_content pos:start="473:33" pos:end="473:46">

                                <expr_stmt pos:start="473:33" pos:end="473:46"><expr pos:start="473:33" pos:end="473:45"><name pos:start="473:33" pos:end="473:42">next_level</name><operator pos:start="473:43" pos:end="473:43">=</operator> <literal type="number" pos:start="473:45" pos:end="473:45">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                            <if_stmt pos:start="477:29" pos:end="491:100"><if pos:start="477:29" pos:end="483:96">if<condition pos:start="477:31" pos:end="477:54">(<expr pos:start="477:32" pos:end="477:53"><name pos:start="477:32" pos:end="477:37">next_i</name> <operator pos:start="477:39" pos:end="477:39">&lt;</operator> <name pos:start="477:41" pos:end="477:53">last_non_zero</name></expr>)</condition><block type="pseudo" pos:start="479:33" pos:end="483:96"><block_content pos:start="479:33" pos:end="483:96">

                                <expr_stmt pos:start="479:33" pos:end="483:96"><expr pos:start="479:33" pos:end="483:95"><name pos:start="479:33" pos:end="479:37">score</name> <operator pos:start="479:39" pos:end="479:40">+=</operator>   <name pos:start="479:44" pos:end="479:76"><name pos:start="479:44" pos:end="479:49">length</name><index pos:start="479:50" pos:end="479:76">[<expr pos:start="479:51" pos:end="479:75"><call pos:start="479:51" pos:end="479:75"><name pos:start="479:51" pos:end="479:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="479:67" pos:end="479:75">(<argument pos:start="479:68" pos:end="479:70"><expr pos:start="479:68" pos:end="479:70"><name pos:start="479:68" pos:end="479:70">run</name></expr></argument>, <argument pos:start="479:73" pos:end="479:74"><expr pos:start="479:73" pos:end="479:74"><literal type="number" pos:start="479:73" pos:end="479:74">65</literal></expr></argument>)</argument_list></call></expr>]</index></name>

                                         <operator pos:start="481:42" pos:end="481:42">+</operator> <name pos:start="481:44" pos:end="481:85"><name pos:start="481:44" pos:end="481:49">length</name><index pos:start="481:50" pos:end="481:85">[<expr pos:start="481:51" pos:end="481:84"><call pos:start="481:51" pos:end="481:84"><name pos:start="481:51" pos:end="481:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="481:67" pos:end="481:84">(<argument pos:start="481:68" pos:end="481:71"><expr pos:start="481:68" pos:end="481:71"><name pos:start="481:68" pos:end="481:71">run2</name></expr></argument>, <argument pos:start="481:74" pos:end="481:83"><expr pos:start="481:74" pos:end="481:83"><name pos:start="481:74" pos:end="481:83">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                         <operator pos:start="483:42" pos:end="483:42">-</operator> <name pos:start="483:44" pos:end="483:95"><name pos:start="483:44" pos:end="483:49">length</name><index pos:start="483:50" pos:end="483:95">[<expr pos:start="483:51" pos:end="483:94"><call pos:start="483:51" pos:end="483:94"><name pos:start="483:51" pos:end="483:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="483:67" pos:end="483:94">(<argument pos:start="483:68" pos:end="483:81"><expr pos:start="483:68" pos:end="483:81"><name pos:start="483:68" pos:end="483:70">run</name> <operator pos:start="483:72" pos:end="483:72">+</operator> <name pos:start="483:74" pos:end="483:77">run2</name> <operator pos:start="483:79" pos:end="483:79">+</operator> <literal type="number" pos:start="483:81" pos:end="483:81">1</literal></expr></argument>, <argument pos:start="483:84" pos:end="483:93"><expr pos:start="483:84" pos:end="483:93"><name pos:start="483:84" pos:end="483:93">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="485:29" pos:end="491:100">else<block type="pseudo" pos:start="487:33" pos:end="491:100"><block_content pos:start="487:33" pos:end="491:100">

                                <expr_stmt pos:start="487:33" pos:end="491:100"><expr pos:start="487:33" pos:end="491:99"><name pos:start="487:33" pos:end="487:37">score</name> <operator pos:start="487:39" pos:end="487:40">+=</operator>  <name pos:start="487:43" pos:end="487:75"><name pos:start="487:43" pos:end="487:48">length</name><index pos:start="487:49" pos:end="487:75">[<expr pos:start="487:50" pos:end="487:74"><call pos:start="487:50" pos:end="487:74"><name pos:start="487:50" pos:end="487:65">UNI_AC_ENC_INDEX</name><argument_list pos:start="487:66" pos:end="487:74">(<argument pos:start="487:67" pos:end="487:69"><expr pos:start="487:67" pos:end="487:69"><name pos:start="487:67" pos:end="487:69">run</name></expr></argument>, <argument pos:start="487:72" pos:end="487:73"><expr pos:start="487:72" pos:end="487:73"><literal type="number" pos:start="487:72" pos:end="487:73">65</literal></expr></argument>)</argument_list></call></expr>]</index></name>

                                        <operator pos:start="489:41" pos:end="489:41">+</operator> <name pos:start="489:43" pos:end="489:89"><name pos:start="489:43" pos:end="489:53">last_length</name><index pos:start="489:54" pos:end="489:89">[<expr pos:start="489:55" pos:end="489:88"><call pos:start="489:55" pos:end="489:88"><name pos:start="489:55" pos:end="489:70">UNI_AC_ENC_INDEX</name><argument_list pos:start="489:71" pos:end="489:88">(<argument pos:start="489:72" pos:end="489:75"><expr pos:start="489:72" pos:end="489:75"><name pos:start="489:72" pos:end="489:75">run2</name></expr></argument>, <argument pos:start="489:78" pos:end="489:87"><expr pos:start="489:78" pos:end="489:87"><name pos:start="489:78" pos:end="489:87">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                        <operator pos:start="491:41" pos:end="491:41">-</operator> <name pos:start="491:43" pos:end="491:99"><name pos:start="491:43" pos:end="491:53">last_length</name><index pos:start="491:54" pos:end="491:99">[<expr pos:start="491:55" pos:end="491:98"><call pos:start="491:55" pos:end="491:98"><name pos:start="491:55" pos:end="491:70">UNI_AC_ENC_INDEX</name><argument_list pos:start="491:71" pos:end="491:98">(<argument pos:start="491:72" pos:end="491:85"><expr pos:start="491:72" pos:end="491:85"><name pos:start="491:72" pos:end="491:74">run</name> <operator pos:start="491:76" pos:end="491:76">+</operator> <name pos:start="491:78" pos:end="491:81">run2</name> <operator pos:start="491:83" pos:end="491:83">+</operator> <literal type="number" pos:start="491:85" pos:end="491:85">1</literal></expr></argument>, <argument pos:start="491:88" pos:end="491:97"><expr pos:start="491:88" pos:end="491:97"><name pos:start="491:88" pos:end="491:97">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if><else pos:start="493:26" pos:end="505:25">else<block pos:start="493:30" pos:end="505:25">{<block_content pos:start="495:29" pos:end="503:29">

                            <expr_stmt pos:start="495:29" pos:end="495:76"><expr pos:start="495:29" pos:end="495:75"><name pos:start="495:29" pos:end="495:33">score</name> <operator pos:start="495:35" pos:end="495:36">+=</operator> <name pos:start="495:38" pos:end="495:75"><name pos:start="495:38" pos:end="495:48">last_length</name><index pos:start="495:49" pos:end="495:75">[<expr pos:start="495:50" pos:end="495:74"><call pos:start="495:50" pos:end="495:74"><name pos:start="495:50" pos:end="495:65">UNI_AC_ENC_INDEX</name><argument_list pos:start="495:66" pos:end="495:74">(<argument pos:start="495:67" pos:end="495:69"><expr pos:start="495:67" pos:end="495:69"><name pos:start="495:67" pos:end="495:69">run</name></expr></argument>, <argument pos:start="495:72" pos:end="495:73"><expr pos:start="495:72" pos:end="495:73"><literal type="number" pos:start="495:72" pos:end="495:73">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                            <if_stmt pos:start="497:29" pos:end="503:29"><if pos:start="497:29" pos:end="503:29">if<condition pos:start="497:31" pos:end="497:42">(<expr pos:start="497:32" pos:end="497:41"><name pos:start="497:32" pos:end="497:41">prev_level</name></expr>)</condition><block pos:start="497:43" pos:end="503:29">{<block_content pos:start="499:33" pos:end="501:94">

                                <expr_stmt pos:start="499:33" pos:end="501:94"><expr pos:start="499:33" pos:end="501:93"><name pos:start="499:33" pos:end="499:37">score</name> <operator pos:start="499:39" pos:end="499:40">+=</operator>  <name pos:start="499:43" pos:end="499:88"><name pos:start="499:43" pos:end="499:48">length</name><index pos:start="499:49" pos:end="499:88">[<expr pos:start="499:50" pos:end="499:87"><call pos:start="499:50" pos:end="499:87"><name pos:start="499:50" pos:end="499:65">UNI_AC_ENC_INDEX</name><argument_list pos:start="499:66" pos:end="499:87">(<argument pos:start="499:67" pos:end="499:74"><expr pos:start="499:67" pos:end="499:74"><name pos:start="499:67" pos:end="499:74">prev_run</name></expr></argument>, <argument pos:start="499:77" pos:end="499:86"><expr pos:start="499:77" pos:end="499:86"><name pos:start="499:77" pos:end="499:86">prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                        <operator pos:start="501:41" pos:end="501:41">-</operator> <name pos:start="501:43" pos:end="501:93"><name pos:start="501:43" pos:end="501:53">last_length</name><index pos:start="501:54" pos:end="501:93">[<expr pos:start="501:55" pos:end="501:92"><call pos:start="501:55" pos:end="501:92"><name pos:start="501:55" pos:end="501:70">UNI_AC_ENC_INDEX</name><argument_list pos:start="501:71" pos:end="501:92">(<argument pos:start="501:72" pos:end="501:79"><expr pos:start="501:72" pos:end="501:79"><name pos:start="501:72" pos:end="501:79">prev_run</name></expr></argument>, <argument pos:start="501:82" pos:end="501:91"><expr pos:start="501:82" pos:end="501:91"><name pos:start="501:82" pos:end="501:91">prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if><else pos:start="509:18" pos:end="561:17">else<block pos:start="509:22" pos:end="561:17">{<block_content pos:start="511:21" pos:end="559:21">

                    <expr_stmt pos:start="511:21" pos:end="511:32"><expr pos:start="511:21" pos:end="511:31"><name pos:start="511:21" pos:end="511:29">new_coeff</name><operator pos:start="511:30" pos:end="511:30">=</operator><literal type="number" pos:start="511:31" pos:end="511:31">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="513:21" pos:end="513:42"><expr pos:start="513:21" pos:end="513:41"><call pos:start="513:21" pos:end="513:41"><name pos:start="513:21" pos:end="513:26">assert</name><argument_list pos:start="513:27" pos:end="513:41">(<argument pos:start="513:28" pos:end="513:40"><expr pos:start="513:28" pos:end="513:40"><call pos:start="513:28" pos:end="513:37"><name pos:start="513:28" pos:end="513:30">ABS</name><argument_list pos:start="513:31" pos:end="513:37">(<argument pos:start="513:32" pos:end="513:36"><expr pos:start="513:32" pos:end="513:36"><name pos:start="513:32" pos:end="513:36">level</name></expr></argument>)</argument_list></call><operator pos:start="513:38" pos:end="513:39">==</operator><literal type="number" pos:start="513:40" pos:end="513:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="517:21" pos:end="559:21"><if pos:start="517:21" pos:end="547:21">if<condition pos:start="517:23" pos:end="517:41">(<expr pos:start="517:24" pos:end="517:40"><name pos:start="517:24" pos:end="517:24">i</name> <operator pos:start="517:26" pos:end="517:26">&lt;</operator> <name pos:start="517:28" pos:end="517:40">last_non_zero</name></expr>)</condition><block pos:start="517:42" pos:end="547:21">{<block_content pos:start="519:25" pos:end="545:73">

                        <decl_stmt pos:start="519:25" pos:end="519:49"><decl pos:start="519:25" pos:end="519:48"><type pos:start="519:25" pos:end="519:27"><name pos:start="519:25" pos:end="519:27">int</name></type> <name pos:start="519:29" pos:end="519:34">next_i</name><init pos:start="519:35" pos:end="519:48">= <expr pos:start="519:37" pos:end="519:48"><name pos:start="519:37" pos:end="519:37">i</name> <operator pos:start="519:39" pos:end="519:39">+</operator> <name pos:start="519:41" pos:end="519:44">run2</name> <operator pos:start="519:46" pos:end="519:46">+</operator> <literal type="number" pos:start="519:48" pos:end="519:48">1</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="521:25" pos:end="521:77"><decl pos:start="521:25" pos:end="521:76"><type pos:start="521:25" pos:end="521:27"><name pos:start="521:25" pos:end="521:27">int</name></type> <name pos:start="521:29" pos:end="521:38">next_level</name><init pos:start="521:39" pos:end="521:76">= <expr pos:start="521:41" pos:end="521:76"><name pos:start="521:41" pos:end="521:71"><name pos:start="521:41" pos:end="521:45">block</name><index pos:start="521:46" pos:end="521:71">[ <expr pos:start="521:48" pos:end="521:69"><name pos:start="521:48" pos:end="521:69"><name pos:start="521:48" pos:end="521:61">perm_scantable</name><index pos:start="521:62" pos:end="521:69">[<expr pos:start="521:63" pos:end="521:68"><name pos:start="521:63" pos:end="521:68">next_i</name></expr>]</index></name></expr> ]</index></name> <operator pos:start="521:73" pos:end="521:73">+</operator> <literal type="number" pos:start="521:75" pos:end="521:76">64</literal></expr></init></decl>;</decl_stmt>

                            

                        <if_stmt pos:start="525:25" pos:end="527:42"><if pos:start="525:25" pos:end="527:42">if<condition pos:start="525:27" pos:end="525:45">(<expr pos:start="525:28" pos:end="525:44"><name pos:start="525:28" pos:end="525:37">next_level</name><operator pos:start="525:38" pos:end="525:38">&amp;</operator><operator pos:start="525:39" pos:end="525:39">(</operator><operator pos:start="525:40" pos:end="525:40">~</operator><literal type="number" pos:start="525:41" pos:end="525:43">127</literal><operator pos:start="525:44" pos:end="525:44">)</operator></expr>)</condition><block type="pseudo" pos:start="527:29" pos:end="527:42"><block_content pos:start="527:29" pos:end="527:42">

                            <expr_stmt pos:start="527:29" pos:end="527:42"><expr pos:start="527:29" pos:end="527:41"><name pos:start="527:29" pos:end="527:38">next_level</name><operator pos:start="527:39" pos:end="527:39">=</operator> <literal type="number" pos:start="527:41" pos:end="527:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                        <if_stmt pos:start="531:25" pos:end="545:73"><if pos:start="531:25" pos:end="537:73">if<condition pos:start="531:27" pos:end="531:50">(<expr pos:start="531:28" pos:end="531:49"><name pos:start="531:28" pos:end="531:33">next_i</name> <operator pos:start="531:35" pos:end="531:35">&lt;</operator> <name pos:start="531:37" pos:end="531:49">last_non_zero</name></expr>)</condition><block type="pseudo" pos:start="533:29" pos:end="537:73"><block_content pos:start="533:29" pos:end="537:73">

                            <expr_stmt pos:start="533:29" pos:end="537:73"><expr pos:start="533:29" pos:end="537:72"><name pos:start="533:29" pos:end="533:33">score</name> <operator pos:start="533:35" pos:end="533:36">+=</operator>   <name pos:start="533:40" pos:end="533:91"><name pos:start="533:40" pos:end="533:45">length</name><index pos:start="533:46" pos:end="533:91">[<expr pos:start="533:47" pos:end="533:90"><call pos:start="533:47" pos:end="533:90"><name pos:start="533:47" pos:end="533:62">UNI_AC_ENC_INDEX</name><argument_list pos:start="533:63" pos:end="533:90">(<argument pos:start="533:64" pos:end="533:77"><expr pos:start="533:64" pos:end="533:77"><name pos:start="533:64" pos:end="533:66">run</name> <operator pos:start="533:68" pos:end="533:68">+</operator> <name pos:start="533:70" pos:end="533:73">run2</name> <operator pos:start="533:75" pos:end="533:75">+</operator> <literal type="number" pos:start="533:77" pos:end="533:77">1</literal></expr></argument>, <argument pos:start="533:80" pos:end="533:89"><expr pos:start="533:80" pos:end="533:89"><name pos:start="533:80" pos:end="533:89">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                     <operator pos:start="535:38" pos:end="535:38">-</operator> <name pos:start="535:40" pos:end="535:81"><name pos:start="535:40" pos:end="535:45">length</name><index pos:start="535:46" pos:end="535:81">[<expr pos:start="535:47" pos:end="535:80"><call pos:start="535:47" pos:end="535:80"><name pos:start="535:47" pos:end="535:62">UNI_AC_ENC_INDEX</name><argument_list pos:start="535:63" pos:end="535:80">(<argument pos:start="535:64" pos:end="535:67"><expr pos:start="535:64" pos:end="535:67"><name pos:start="535:64" pos:end="535:67">run2</name></expr></argument>, <argument pos:start="535:70" pos:end="535:79"><expr pos:start="535:70" pos:end="535:79"><name pos:start="535:70" pos:end="535:79">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                     <operator pos:start="537:38" pos:end="537:38">-</operator> <name pos:start="537:40" pos:end="537:72"><name pos:start="537:40" pos:end="537:45">length</name><index pos:start="537:46" pos:end="537:72">[<expr pos:start="537:47" pos:end="537:71"><call pos:start="537:47" pos:end="537:71"><name pos:start="537:47" pos:end="537:62">UNI_AC_ENC_INDEX</name><argument_list pos:start="537:63" pos:end="537:71">(<argument pos:start="537:64" pos:end="537:66"><expr pos:start="537:64" pos:end="537:66"><name pos:start="537:64" pos:end="537:66">run</name></expr></argument>, <argument pos:start="537:69" pos:end="537:70"><expr pos:start="537:69" pos:end="537:70"><literal type="number" pos:start="537:69" pos:end="537:70">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="539:25" pos:end="545:73">else<block type="pseudo" pos:start="541:29" pos:end="545:73"><block_content pos:start="541:29" pos:end="545:73">

                            <expr_stmt pos:start="541:29" pos:end="545:73"><expr pos:start="541:29" pos:end="545:72"><name pos:start="541:29" pos:end="541:33">score</name> <operator pos:start="541:35" pos:end="541:36">+=</operator>   <name pos:start="541:40" pos:end="541:96"><name pos:start="541:40" pos:end="541:50">last_length</name><index pos:start="541:51" pos:end="541:96">[<expr pos:start="541:52" pos:end="541:95"><call pos:start="541:52" pos:end="541:95"><name pos:start="541:52" pos:end="541:67">UNI_AC_ENC_INDEX</name><argument_list pos:start="541:68" pos:end="541:95">(<argument pos:start="541:69" pos:end="541:82"><expr pos:start="541:69" pos:end="541:82"><name pos:start="541:69" pos:end="541:71">run</name> <operator pos:start="541:73" pos:end="541:73">+</operator> <name pos:start="541:75" pos:end="541:78">run2</name> <operator pos:start="541:80" pos:end="541:80">+</operator> <literal type="number" pos:start="541:82" pos:end="541:82">1</literal></expr></argument>, <argument pos:start="541:85" pos:end="541:94"><expr pos:start="541:85" pos:end="541:94"><name pos:start="541:85" pos:end="541:94">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                     <operator pos:start="543:38" pos:end="543:38">-</operator> <name pos:start="543:40" pos:end="543:86"><name pos:start="543:40" pos:end="543:50">last_length</name><index pos:start="543:51" pos:end="543:86">[<expr pos:start="543:52" pos:end="543:85"><call pos:start="543:52" pos:end="543:85"><name pos:start="543:52" pos:end="543:67">UNI_AC_ENC_INDEX</name><argument_list pos:start="543:68" pos:end="543:85">(<argument pos:start="543:69" pos:end="543:72"><expr pos:start="543:69" pos:end="543:72"><name pos:start="543:69" pos:end="543:72">run2</name></expr></argument>, <argument pos:start="543:75" pos:end="543:84"><expr pos:start="543:75" pos:end="543:84"><name pos:start="543:75" pos:end="543:84">next_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                     <operator pos:start="545:38" pos:end="545:38">-</operator> <name pos:start="545:40" pos:end="545:72"><name pos:start="545:40" pos:end="545:45">length</name><index pos:start="545:46" pos:end="545:72">[<expr pos:start="545:47" pos:end="545:71"><call pos:start="545:47" pos:end="545:71"><name pos:start="545:47" pos:end="545:62">UNI_AC_ENC_INDEX</name><argument_list pos:start="545:63" pos:end="545:71">(<argument pos:start="545:64" pos:end="545:66"><expr pos:start="545:64" pos:end="545:66"><name pos:start="545:64" pos:end="545:66">run</name></expr></argument>, <argument pos:start="545:69" pos:end="545:70"><expr pos:start="545:69" pos:end="545:70"><literal type="number" pos:start="545:69" pos:end="545:70">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if><else pos:start="547:22" pos:end="559:21">else<block pos:start="547:26" pos:end="559:21">{<block_content pos:start="549:25" pos:end="557:25">

                        <expr_stmt pos:start="549:25" pos:end="549:73"><expr pos:start="549:25" pos:end="549:72"><name pos:start="549:25" pos:end="549:29">score</name> <operator pos:start="549:31" pos:end="549:32">+=</operator> <operator pos:start="549:34" pos:end="549:34">-</operator><name pos:start="549:35" pos:end="549:72"><name pos:start="549:35" pos:end="549:45">last_length</name><index pos:start="549:46" pos:end="549:72">[<expr pos:start="549:47" pos:end="549:71"><call pos:start="549:47" pos:end="549:71"><name pos:start="549:47" pos:end="549:62">UNI_AC_ENC_INDEX</name><argument_list pos:start="549:63" pos:end="549:71">(<argument pos:start="549:64" pos:end="549:66"><expr pos:start="549:64" pos:end="549:66"><name pos:start="549:64" pos:end="549:66">run</name></expr></argument>, <argument pos:start="549:69" pos:end="549:70"><expr pos:start="549:69" pos:end="549:70"><literal type="number" pos:start="549:69" pos:end="549:70">65</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="551:25" pos:end="557:25"><if pos:start="551:25" pos:end="557:25">if<condition pos:start="551:27" pos:end="551:38">(<expr pos:start="551:28" pos:end="551:37"><name pos:start="551:28" pos:end="551:37">prev_level</name></expr>)</condition><block pos:start="551:39" pos:end="557:25">{<block_content pos:start="553:29" pos:end="555:85">

                            <expr_stmt pos:start="553:29" pos:end="555:85"><expr pos:start="553:29" pos:end="555:84"><name pos:start="553:29" pos:end="553:33">score</name> <operator pos:start="553:35" pos:end="553:36">+=</operator>  <name pos:start="553:39" pos:end="553:89"><name pos:start="553:39" pos:end="553:49">last_length</name><index pos:start="553:50" pos:end="553:89">[<expr pos:start="553:51" pos:end="553:88"><call pos:start="553:51" pos:end="553:88"><name pos:start="553:51" pos:end="553:66">UNI_AC_ENC_INDEX</name><argument_list pos:start="553:67" pos:end="553:88">(<argument pos:start="553:68" pos:end="553:75"><expr pos:start="553:68" pos:end="553:75"><name pos:start="553:68" pos:end="553:75">prev_run</name></expr></argument>, <argument pos:start="553:78" pos:end="553:87"><expr pos:start="553:78" pos:end="553:87"><name pos:start="553:78" pos:end="553:87">prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name>

                                    <operator pos:start="555:37" pos:end="555:37">-</operator> <name pos:start="555:39" pos:end="555:84"><name pos:start="555:39" pos:end="555:44">length</name><index pos:start="555:45" pos:end="555:84">[<expr pos:start="555:46" pos:end="555:83"><call pos:start="555:46" pos:end="555:83"><name pos:start="555:46" pos:end="555:61">UNI_AC_ENC_INDEX</name><argument_list pos:start="555:62" pos:end="555:83">(<argument pos:start="555:63" pos:end="555:70"><expr pos:start="555:63" pos:end="555:70"><name pos:start="555:63" pos:end="555:70">prev_run</name></expr></argument>, <argument pos:start="555:73" pos:end="555:82"><expr pos:start="555:73" pos:end="555:82"><name pos:start="555:73" pos:end="555:82">prev_level</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                

                <expr_stmt pos:start="565:17" pos:end="565:32"><expr pos:start="565:17" pos:end="565:31"><name pos:start="565:17" pos:end="565:21">score</name> <operator pos:start="565:23" pos:end="565:24">*=</operator> <name pos:start="565:26" pos:end="565:31">lambda</name></expr>;</expr_stmt>



                <expr_stmt pos:start="569:17" pos:end="569:54"><expr pos:start="569:17" pos:end="569:53"><name pos:start="569:17" pos:end="569:30">unquant_change</name><operator pos:start="569:31" pos:end="569:31">=</operator> <name pos:start="569:33" pos:end="569:41">new_coeff</name> <operator pos:start="569:43" pos:end="569:43">-</operator> <name pos:start="569:45" pos:end="569:53">old_coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="571:17" pos:end="571:81"><expr pos:start="571:17" pos:end="571:80"><call pos:start="571:17" pos:end="571:80"><name pos:start="571:17" pos:end="571:22">assert</name><argument_list pos:start="571:23" pos:end="571:80">(<argument pos:start="571:24" pos:end="571:79"><expr pos:start="571:24" pos:end="571:79"><operator pos:start="571:24" pos:end="571:24">(</operator><name pos:start="571:25" pos:end="571:53"><name pos:start="571:25" pos:end="571:29">score</name> <argument_list type="generic" pos:start="571:31" pos:end="571:53">&lt; <argument pos:start="571:33" pos:end="571:51"><expr pos:start="571:33" pos:end="571:51"><literal type="number" pos:start="571:33" pos:end="571:35">100</literal><operator pos:start="571:36" pos:end="571:36">*</operator><name pos:start="571:37" pos:end="571:42">lambda</name> <operator pos:start="571:44" pos:end="571:45">&amp;&amp;</operator> <name pos:start="571:47" pos:end="571:51">score</name></expr></argument> &gt;</argument_list></name> <operator pos:start="571:55" pos:end="571:55">-</operator><literal type="number" pos:start="571:56" pos:end="571:58">100</literal><operator pos:start="571:59" pos:end="571:59">*</operator><name pos:start="571:60" pos:end="571:65">lambda</name><operator pos:start="571:66" pos:end="571:66">)</operator> <operator pos:start="571:68" pos:end="571:69">||</operator> <name pos:start="571:71" pos:end="571:76">lambda</name><operator pos:start="571:77" pos:end="571:78">==</operator><literal type="number" pos:start="571:79" pos:end="571:79">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                

                <expr_stmt pos:start="575:17" pos:end="575:83"><expr pos:start="575:17" pos:end="575:82"><name pos:start="575:17" pos:end="575:21">score</name><operator pos:start="575:22" pos:end="575:23">+=</operator> <call pos:start="575:25" pos:end="575:82"><name pos:start="575:25" pos:end="575:43"><name pos:start="575:25" pos:end="575:25">s</name><operator pos:start="575:26" pos:end="575:27">-&gt;</operator><name pos:start="575:28" pos:end="575:30">dsp</name><operator pos:start="575:31" pos:end="575:31">.</operator><name pos:start="575:32" pos:end="575:43">try_8x8basis</name></name><argument_list pos:start="575:44" pos:end="575:82">(<argument pos:start="575:45" pos:end="575:47"><expr pos:start="575:45" pos:end="575:47"><name pos:start="575:45" pos:end="575:47">rem</name></expr></argument>, <argument pos:start="575:50" pos:end="575:55"><expr pos:start="575:50" pos:end="575:55"><name pos:start="575:50" pos:end="575:55">weight</name></expr></argument>, <argument pos:start="575:58" pos:end="575:65"><expr pos:start="575:58" pos:end="575:65"><name pos:start="575:58" pos:end="575:65"><name pos:start="575:58" pos:end="575:62">basis</name><index pos:start="575:63" pos:end="575:65">[<expr pos:start="575:64" pos:end="575:64"><name pos:start="575:64" pos:end="575:64">j</name></expr>]</index></name></expr></argument>, <argument pos:start="575:68" pos:end="575:81"><expr pos:start="575:68" pos:end="575:81"><name pos:start="575:68" pos:end="575:81">unquant_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="577:17" pos:end="587:17"><if pos:start="577:17" pos:end="587:17">if<condition pos:start="577:19" pos:end="577:36">(<expr pos:start="577:20" pos:end="577:35"><name pos:start="577:20" pos:end="577:24">score</name><operator pos:start="577:25" pos:end="577:25">&lt;</operator><name pos:start="577:26" pos:end="577:35">best_score</name></expr>)</condition><block pos:start="577:37" pos:end="587:17">{<block_content pos:start="579:21" pos:end="585:56">

                    <expr_stmt pos:start="579:21" pos:end="579:38"><expr pos:start="579:21" pos:end="579:37"><name pos:start="579:21" pos:end="579:30">best_score</name><operator pos:start="579:31" pos:end="579:31">=</operator> <name pos:start="579:33" pos:end="579:37">score</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="581:21" pos:end="581:34"><expr pos:start="581:21" pos:end="581:33"><name pos:start="581:21" pos:end="581:30">best_coeff</name><operator pos:start="581:31" pos:end="581:31">=</operator> <name pos:start="581:33" pos:end="581:33">i</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="583:21" pos:end="583:40"><expr pos:start="583:21" pos:end="583:39"><name pos:start="583:21" pos:end="583:31">best_change</name><operator pos:start="583:32" pos:end="583:32">=</operator> <name pos:start="583:34" pos:end="583:39">change</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:56"><expr pos:start="585:21" pos:end="585:55"><name pos:start="585:21" pos:end="585:39">best_unquant_change</name><operator pos:start="585:40" pos:end="585:40">=</operator> <name pos:start="585:42" pos:end="585:55">unquant_change</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="591:13" pos:end="607:13"><if pos:start="591:13" pos:end="603:13">if<condition pos:start="591:15" pos:end="591:21">(<expr pos:start="591:16" pos:end="591:20"><name pos:start="591:16" pos:end="591:20">level</name></expr>)</condition><block pos:start="591:22" pos:end="603:13">{<block_content pos:start="593:17" pos:end="601:22">

                <expr_stmt pos:start="593:17" pos:end="593:39"><expr pos:start="593:17" pos:end="593:38"><name pos:start="593:17" pos:end="593:26">prev_level</name><operator pos:start="593:27" pos:end="593:27">=</operator> <name pos:start="593:29" pos:end="593:33">level</name> <operator pos:start="593:35" pos:end="593:35">+</operator> <literal type="number" pos:start="593:37" pos:end="593:38">64</literal></expr>;</expr_stmt>

                <if_stmt pos:start="595:17" pos:end="597:34"><if pos:start="595:17" pos:end="597:34">if<condition pos:start="595:19" pos:end="595:37">(<expr pos:start="595:20" pos:end="595:36"><name pos:start="595:20" pos:end="595:29">prev_level</name><operator pos:start="595:30" pos:end="595:30">&amp;</operator><operator pos:start="595:31" pos:end="595:31">(</operator><operator pos:start="595:32" pos:end="595:32">~</operator><literal type="number" pos:start="595:33" pos:end="595:35">127</literal><operator pos:start="595:36" pos:end="595:36">)</operator></expr>)</condition><block type="pseudo" pos:start="597:21" pos:end="597:34"><block_content pos:start="597:21" pos:end="597:34">

                    <expr_stmt pos:start="597:21" pos:end="597:34"><expr pos:start="597:21" pos:end="597:33"><name pos:start="597:21" pos:end="597:30">prev_level</name><operator pos:start="597:31" pos:end="597:31">=</operator> <literal type="number" pos:start="597:33" pos:end="597:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="599:17" pos:end="599:30"><expr pos:start="599:17" pos:end="599:29"><name pos:start="599:17" pos:end="599:24">prev_run</name><operator pos:start="599:25" pos:end="599:25">=</operator> <name pos:start="599:27" pos:end="599:29">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="601:17" pos:end="601:22"><expr pos:start="601:17" pos:end="601:21"><name pos:start="601:17" pos:end="601:19">run</name><operator pos:start="601:20" pos:end="601:20">=</operator><literal type="number" pos:start="601:21" pos:end="601:21">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="603:14" pos:end="607:13">else<block pos:start="603:18" pos:end="607:13">{<block_content pos:start="605:17" pos:end="605:22">

                <expr_stmt pos:start="605:17" pos:end="605:22"><expr pos:start="605:17" pos:end="605:21"><name pos:start="605:17" pos:end="605:19">run</name><operator pos:start="605:20" pos:end="605:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

<cpp:ifdef pos:start="611:1" pos:end="611:19">#<cpp:directive pos:start="611:2" pos:end="611:6">ifdef</cpp:directive> <name pos:start="611:8" pos:end="611:19">REFINE_STATS</name></cpp:ifdef>

<macro pos:start="613:1" pos:end="613:28"><name pos:start="613:1" pos:end="613:10">STOP_TIMER</name><argument_list pos:start="613:11" pos:end="613:28">(<argument pos:start="613:12" pos:end="613:27"><literal type="string" pos:start="613:12" pos:end="613:27">"iterative step"</literal></argument>)</argument_list></macro></block_content>}</block>

<cpp:endif pos:start="615:1" pos:end="615:6">#<cpp:directive pos:start="615:2" pos:end="615:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="619:9" pos:end="729:9"><if pos:start="619:9" pos:end="725:9">if<condition pos:start="619:11" pos:end="619:23">(<expr pos:start="619:12" pos:end="619:22"><name pos:start="619:12" pos:end="619:22">best_change</name></expr>)</condition><block pos:start="619:24" pos:end="725:9">{<block_content pos:start="621:13" pos:end="723:68">

            <decl_stmt pos:start="621:13" pos:end="621:48"><decl pos:start="621:13" pos:end="621:47"><type pos:start="621:13" pos:end="621:15"><name pos:start="621:13" pos:end="621:15">int</name></type> <name pos:start="621:17" pos:end="621:17">j</name><init pos:start="621:18" pos:end="621:47">= <expr pos:start="621:20" pos:end="621:47"><name pos:start="621:20" pos:end="621:47"><name pos:start="621:20" pos:end="621:33">perm_scantable</name><index pos:start="621:34" pos:end="621:47">[ <expr pos:start="621:36" pos:end="621:45"><name pos:start="621:36" pos:end="621:45">best_coeff</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

            

            <expr_stmt pos:start="625:13" pos:end="625:36"><expr pos:start="625:13" pos:end="625:35"><name pos:start="625:13" pos:end="625:20"><name pos:start="625:13" pos:end="625:17">block</name><index pos:start="625:18" pos:end="625:20">[<expr pos:start="625:19" pos:end="625:19"><name pos:start="625:19" pos:end="625:19">j</name></expr>]</index></name> <operator pos:start="625:22" pos:end="625:23">+=</operator> <name pos:start="625:25" pos:end="625:35">best_change</name></expr>;</expr_stmt>

            

            <if_stmt pos:start="629:13" pos:end="684:0"><if pos:start="629:13" pos:end="641:13">if<condition pos:start="629:15" pos:end="629:42">(<expr pos:start="629:16" pos:end="629:41"><name pos:start="629:16" pos:end="629:25">best_coeff</name> <operator pos:start="629:27" pos:end="629:27">&gt;</operator> <name pos:start="629:29" pos:end="629:41">last_non_zero</name></expr>)</condition><block pos:start="629:43" pos:end="641:13">{<block_content pos:start="631:17" pos:end="640:0">

                <expr_stmt pos:start="631:17" pos:end="631:42"><expr pos:start="631:17" pos:end="631:41"><name pos:start="631:17" pos:end="631:29">last_non_zero</name><operator pos:start="631:30" pos:end="631:30">=</operator> <name pos:start="631:32" pos:end="631:41">best_coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="633:17" pos:end="636:0"><expr pos:start="633:17" pos:end="633:32"><call pos:start="633:17" pos:end="633:32"><name pos:start="633:17" pos:end="633:22">assert</name><argument_list pos:start="633:23" pos:end="633:32">(<argument pos:start="633:24" pos:end="633:31"><expr pos:start="633:24" pos:end="633:31"><name pos:start="633:24" pos:end="633:31"><name pos:start="633:24" pos:end="633:28">block</name><index pos:start="633:29" pos:end="633:31">[<expr pos:start="633:30" pos:end="633:30"><name pos:start="633:30" pos:end="633:30">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="635:1" pos:end="635:19">#<cpp:directive pos:start="635:2" pos:end="635:6">ifdef</cpp:directive> <name pos:start="635:8" pos:end="635:19">REFINE_STATS</name></cpp:ifdef>

<expr_stmt pos:start="637:1" pos:end="640:0"><expr pos:start="637:1" pos:end="637:12"><name pos:start="637:1" pos:end="637:10">after_last</name><operator pos:start="637:11" pos:end="637:12">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="639:1" pos:end="639:6">#<cpp:directive pos:start="639:2" pos:end="639:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if><else pos:start="641:14" pos:end="684:0">else<block pos:start="641:18" pos:end="684:0">{<block_content pos:start="645:1" pos:end="679:17">

<cpp:ifdef pos:start="643:1" pos:end="643:19">#<cpp:directive pos:start="643:2" pos:end="643:6">ifdef</cpp:directive> <name pos:start="643:8" pos:end="643:19">REFINE_STATS</name></cpp:ifdef>

<if_stmt pos:start="645:1" pos:end="672:0"><if pos:start="645:1" pos:end="665:1">if<condition pos:start="645:3" pos:end="645:12">(<expr pos:start="645:4" pos:end="645:11"><name pos:start="645:4" pos:end="645:11"><name pos:start="645:4" pos:end="645:8">block</name><index pos:start="645:9" pos:end="645:11">[<expr pos:start="645:10" pos:end="645:10"><name pos:start="645:10" pos:end="645:10">j</name></expr>]</index></name></expr>)</condition><block pos:start="645:13" pos:end="665:1">{<block_content pos:start="647:5" pos:end="663:5">

    <if_stmt pos:start="647:5" pos:end="663:5"><if pos:start="647:5" pos:end="659:5">if<condition pos:start="647:7" pos:end="647:30">(<expr pos:start="647:8" pos:end="647:29"><name pos:start="647:8" pos:end="647:15"><name pos:start="647:8" pos:end="647:12">block</name><index pos:start="647:13" pos:end="647:15">[<expr pos:start="647:14" pos:end="647:14"><name pos:start="647:14" pos:end="647:14">j</name></expr>]</index></name> <operator pos:start="647:17" pos:end="647:17">-</operator> <name pos:start="647:19" pos:end="647:29">best_change</name></expr>)</condition><block pos:start="647:31" pos:end="659:5">{<block_content pos:start="649:9" pos:end="657:9">

        <if_stmt pos:start="649:9" pos:end="657:9"><if pos:start="649:9" pos:end="653:9">if<condition pos:start="649:11" pos:end="649:55">(<expr pos:start="649:12" pos:end="649:54"><call pos:start="649:12" pos:end="649:24"><name pos:start="649:12" pos:end="649:14">ABS</name><argument_list pos:start="649:15" pos:end="649:24">(<argument pos:start="649:16" pos:end="649:23"><expr pos:start="649:16" pos:end="649:23"><name pos:start="649:16" pos:end="649:23"><name pos:start="649:16" pos:end="649:20">block</name><index pos:start="649:21" pos:end="649:23">[<expr pos:start="649:22" pos:end="649:22"><name pos:start="649:22" pos:end="649:22">j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="649:26" pos:end="649:26">&gt;</operator> <call pos:start="649:28" pos:end="649:54"><name pos:start="649:28" pos:end="649:30">ABS</name><argument_list pos:start="649:31" pos:end="649:54">(<argument pos:start="649:32" pos:end="649:53"><expr pos:start="649:32" pos:end="649:53"><name pos:start="649:32" pos:end="649:39"><name pos:start="649:32" pos:end="649:36">block</name><index pos:start="649:37" pos:end="649:39">[<expr pos:start="649:38" pos:end="649:38"><name pos:start="649:38" pos:end="649:38">j</name></expr>]</index></name> <operator pos:start="649:41" pos:end="649:41">-</operator> <name pos:start="649:43" pos:end="649:53">best_change</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="649:56" pos:end="653:9">{<block_content pos:start="651:13" pos:end="651:20">

            <expr_stmt pos:start="651:13" pos:end="651:20"><expr pos:start="651:13" pos:end="651:19"><name pos:start="651:13" pos:end="651:17">raise</name><operator pos:start="651:18" pos:end="651:19">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="653:10" pos:end="657:9">else<block pos:start="653:14" pos:end="657:9">{<block_content pos:start="655:13" pos:end="655:20">

            <expr_stmt pos:start="655:13" pos:end="655:20"><expr pos:start="655:13" pos:end="655:19"><name pos:start="655:13" pos:end="655:17">lower</name><operator pos:start="655:18" pos:end="655:19">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="659:6" pos:end="663:5">else<block pos:start="659:10" pos:end="663:5">{<block_content pos:start="661:9" pos:end="661:20">

        <expr_stmt pos:start="661:9" pos:end="661:20"><expr pos:start="661:9" pos:end="661:19"><name pos:start="661:9" pos:end="661:17">from_zero</name><operator pos:start="661:18" pos:end="661:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></if><else pos:start="665:2" pos:end="672:0">else<block pos:start="665:6" pos:end="672:0">{<block_content pos:start="667:5" pos:end="667:14">

    <expr_stmt pos:start="667:5" pos:end="667:14"><expr pos:start="667:5" pos:end="667:13"><name pos:start="667:5" pos:end="667:11">to_zero</name><operator pos:start="667:12" pos:end="667:13">++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif pos:start="671:1" pos:end="671:6">#<cpp:directive pos:start="671:2" pos:end="671:6">endif</cpp:directive></cpp:endif>

                <for pos:start="673:17" pos:end="679:17">for<control pos:start="673:20" pos:end="673:62">(<init pos:start="673:21" pos:end="673:21">;</init> <condition pos:start="673:23" pos:end="673:45"><expr pos:start="673:23" pos:end="673:44"><name pos:start="673:23" pos:end="673:35">last_non_zero</name><operator pos:start="673:36" pos:end="673:37">&gt;=</operator><name pos:start="673:38" pos:end="673:44">start_i</name></expr>;</condition> <incr pos:start="673:47" pos:end="673:61"><expr pos:start="673:47" pos:end="673:61"><name pos:start="673:47" pos:end="673:59">last_non_zero</name><operator pos:start="673:60" pos:end="673:61">--</operator></expr></incr>)</control><block pos:start="673:63" pos:end="679:17">{<block_content pos:start="675:21" pos:end="677:30">

                    <if_stmt pos:start="675:21" pos:end="677:30"><if pos:start="675:21" pos:end="677:30">if<condition pos:start="675:23" pos:end="675:60">(<expr pos:start="675:24" pos:end="675:59"><name pos:start="675:24" pos:end="675:59"><name pos:start="675:24" pos:end="675:28">block</name><index pos:start="675:29" pos:end="675:59">[<expr pos:start="675:30" pos:end="675:58"><name pos:start="675:30" pos:end="675:58"><name pos:start="675:30" pos:end="675:43">perm_scantable</name><index pos:start="675:44" pos:end="675:58">[<expr pos:start="675:45" pos:end="675:57"><name pos:start="675:45" pos:end="675:57">last_non_zero</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="677:25" pos:end="677:30"><block_content pos:start="677:25" pos:end="677:30">

                        <break pos:start="677:25" pos:end="677:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="683:1" pos:end="683:19">#<cpp:directive pos:start="683:2" pos:end="683:6">ifdef</cpp:directive> <name pos:start="683:8" pos:end="683:19">REFINE_STATS</name></cpp:ifdef>

<expr_stmt pos:start="685:1" pos:end="685:8"><expr pos:start="685:1" pos:end="685:7"><name pos:start="685:1" pos:end="685:5">count</name><operator pos:start="685:6" pos:end="685:7">++</operator></expr>;</expr_stmt>

<if_stmt pos:start="687:1" pos:end="694:0"><if pos:start="687:1" pos:end="694:0">if<condition pos:start="687:3" pos:end="687:31">(<expr pos:start="687:4" pos:end="687:30"><literal type="number" pos:start="687:4" pos:end="687:6">256</literal><operator pos:start="687:7" pos:end="687:7">*</operator><literal type="number" pos:start="687:8" pos:end="687:10">256</literal><operator pos:start="687:11" pos:end="687:11">*</operator><literal type="number" pos:start="687:12" pos:end="687:14">256</literal><operator pos:start="687:15" pos:end="687:15">*</operator><literal type="number" pos:start="687:16" pos:end="687:17">64</literal> <operator pos:start="687:19" pos:end="687:19">%</operator> <name pos:start="687:21" pos:end="687:25">count</name> <operator pos:start="687:27" pos:end="687:28">==</operator> <literal type="number" pos:start="687:30" pos:end="687:30">0</literal></expr>)</condition><block pos:start="687:32" pos:end="694:0">{<block_content pos:start="689:5" pos:end="689:189">

    <expr_stmt pos:start="689:5" pos:end="689:189"><expr pos:start="689:5" pos:end="689:188"><call pos:start="689:5" pos:end="689:188"><name pos:start="689:5" pos:end="689:10">printf</name><argument_list pos:start="689:11" pos:end="689:188">(<argument pos:start="689:12" pos:end="689:91"><expr pos:start="689:12" pos:end="689:91"><literal type="string" pos:start="689:12" pos:end="689:91">"after_last:%d to_zero:%d from_zero:%d raise:%d lower:%d sign:%d xyp:%d/%d/%d\n"</literal></expr></argument>, <argument pos:start="689:94" pos:end="689:103"><expr pos:start="689:94" pos:end="689:103"><name pos:start="689:94" pos:end="689:103">after_last</name></expr></argument>, <argument pos:start="689:106" pos:end="689:112"><expr pos:start="689:106" pos:end="689:112"><name pos:start="689:106" pos:end="689:112">to_zero</name></expr></argument>, <argument pos:start="689:115" pos:end="689:123"><expr pos:start="689:115" pos:end="689:123"><name pos:start="689:115" pos:end="689:123">from_zero</name></expr></argument>, <argument pos:start="689:126" pos:end="689:130"><expr pos:start="689:126" pos:end="689:130"><name pos:start="689:126" pos:end="689:130">raise</name></expr></argument>, <argument pos:start="689:133" pos:end="689:137"><expr pos:start="689:133" pos:end="689:137"><name pos:start="689:133" pos:end="689:137">lower</name></expr></argument>, <argument pos:start="689:140" pos:end="689:150"><expr pos:start="689:140" pos:end="689:150"><name pos:start="689:140" pos:end="689:150">messed_sign</name></expr></argument>, <argument pos:start="689:153" pos:end="689:159"><expr pos:start="689:153" pos:end="689:159"><name pos:start="689:153" pos:end="689:159"><name pos:start="689:153" pos:end="689:153">s</name><operator pos:start="689:154" pos:end="689:155">-&gt;</operator><name pos:start="689:156" pos:end="689:159">mb_x</name></name></expr></argument>, <argument pos:start="689:162" pos:end="689:168"><expr pos:start="689:162" pos:end="689:168"><name pos:start="689:162" pos:end="689:168"><name pos:start="689:162" pos:end="689:162">s</name><operator pos:start="689:163" pos:end="689:164">-&gt;</operator><name pos:start="689:165" pos:end="689:168">mb_y</name></name></expr></argument>, <argument pos:start="689:171" pos:end="689:187"><expr pos:start="689:171" pos:end="689:187"><name pos:start="689:171" pos:end="689:187"><name pos:start="689:171" pos:end="689:171">s</name><operator pos:start="689:172" pos:end="689:173">-&gt;</operator><name pos:start="689:174" pos:end="689:187">picture_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif pos:start="693:1" pos:end="693:6">#<cpp:directive pos:start="693:2" pos:end="693:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="695:13" pos:end="695:18"><expr pos:start="695:13" pos:end="695:17"><name pos:start="695:13" pos:end="695:15">run</name><operator pos:start="695:16" pos:end="695:16">=</operator><literal type="number" pos:start="695:17" pos:end="695:17">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="697:13" pos:end="697:24"><expr pos:start="697:13" pos:end="697:23"><name pos:start="697:13" pos:end="697:21">rle_index</name><operator pos:start="697:22" pos:end="697:22">=</operator><literal type="number" pos:start="697:23" pos:end="697:23">0</literal></expr>;</expr_stmt>

            <for pos:start="699:13" pos:end="719:13">for<control pos:start="699:16" pos:end="699:49">(<init pos:start="699:17" pos:end="699:26"><expr pos:start="699:17" pos:end="699:25"><name pos:start="699:17" pos:end="699:17">i</name><operator pos:start="699:18" pos:end="699:18">=</operator><name pos:start="699:19" pos:end="699:25">start_i</name></expr>;</init> <condition pos:start="699:28" pos:end="699:44"><expr pos:start="699:28" pos:end="699:43"><name pos:start="699:28" pos:end="699:28">i</name><operator pos:start="699:29" pos:end="699:30">&lt;=</operator><name pos:start="699:31" pos:end="699:43">last_non_zero</name></expr>;</condition> <incr pos:start="699:46" pos:end="699:48"><expr pos:start="699:46" pos:end="699:48"><name pos:start="699:46" pos:end="699:46">i</name><operator pos:start="699:47" pos:end="699:48">++</operator></expr></incr>)</control><block pos:start="699:50" pos:end="719:13">{<block_content pos:start="701:17" pos:end="717:18">

                <decl_stmt pos:start="701:17" pos:end="701:41"><decl pos:start="701:17" pos:end="701:40"><type pos:start="701:17" pos:end="701:19"><name pos:start="701:17" pos:end="701:19">int</name></type> <name pos:start="701:21" pos:end="701:21">j</name><init pos:start="701:22" pos:end="701:40">= <expr pos:start="701:24" pos:end="701:40"><name pos:start="701:24" pos:end="701:40"><name pos:start="701:24" pos:end="701:37">perm_scantable</name><index pos:start="701:38" pos:end="701:40">[<expr pos:start="701:39" pos:end="701:39"><name pos:start="701:39" pos:end="701:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="703:17" pos:end="703:42"><decl pos:start="703:17" pos:end="703:41"><type pos:start="703:17" pos:end="703:25"><specifier pos:start="703:17" pos:end="703:21">const</specifier> <name pos:start="703:23" pos:end="703:25">int</name></type> <name pos:start="703:27" pos:end="703:31">level</name><init pos:start="703:32" pos:end="703:41">= <expr pos:start="703:34" pos:end="703:41"><name pos:start="703:34" pos:end="703:41"><name pos:start="703:34" pos:end="703:38">block</name><index pos:start="703:39" pos:end="703:41">[<expr pos:start="703:40" pos:end="703:40"><name pos:start="703:40" pos:end="703:40">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        

                 <if_stmt pos:start="707:18" pos:end="717:18"><if pos:start="707:18" pos:end="713:18">if<condition pos:start="707:20" pos:end="707:26">(<expr pos:start="707:21" pos:end="707:25"><name pos:start="707:21" pos:end="707:25">level</name></expr>)</condition><block pos:start="707:27" pos:end="713:18">{<block_content pos:start="709:22" pos:end="711:27">

                     <expr_stmt pos:start="709:22" pos:end="709:46"><expr pos:start="709:22" pos:end="709:45"><name pos:start="709:22" pos:end="709:41"><name pos:start="709:22" pos:end="709:28">run_tab</name><index pos:start="709:29" pos:end="709:41">[<expr pos:start="709:30" pos:end="709:40"><name pos:start="709:30" pos:end="709:38">rle_index</name><operator pos:start="709:39" pos:end="709:40">++</operator></expr>]</index></name><operator pos:start="709:42" pos:end="709:42">=</operator><name pos:start="709:43" pos:end="709:45">run</name></expr>;</expr_stmt>

                     <expr_stmt pos:start="711:22" pos:end="711:27"><expr pos:start="711:22" pos:end="711:26"><name pos:start="711:22" pos:end="711:24">run</name><operator pos:start="711:25" pos:end="711:25">=</operator><literal type="number" pos:start="711:26" pos:end="711:26">0</literal></expr>;</expr_stmt>

                 </block_content>}</block></if><else pos:start="713:19" pos:end="717:18">else<block pos:start="713:23" pos:end="717:18">{<block_content pos:start="715:22" pos:end="715:27">

                     <expr_stmt pos:start="715:22" pos:end="715:27"><expr pos:start="715:22" pos:end="715:26"><name pos:start="715:22" pos:end="715:24">run</name><operator pos:start="715:25" pos:end="715:26">++</operator></expr>;</expr_stmt>

                 </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            

            <expr_stmt pos:start="723:13" pos:end="723:68"><expr pos:start="723:13" pos:end="723:67"><call pos:start="723:13" pos:end="723:67"><name pos:start="723:13" pos:end="723:31"><name pos:start="723:13" pos:end="723:13">s</name><operator pos:start="723:14" pos:end="723:15">-&gt;</operator><name pos:start="723:16" pos:end="723:18">dsp</name><operator pos:start="723:19" pos:end="723:19">.</operator><name pos:start="723:20" pos:end="723:31">add_8x8basis</name></name><argument_list pos:start="723:32" pos:end="723:67">(<argument pos:start="723:33" pos:end="723:35"><expr pos:start="723:33" pos:end="723:35"><name pos:start="723:33" pos:end="723:35">rem</name></expr></argument>, <argument pos:start="723:38" pos:end="723:45"><expr pos:start="723:38" pos:end="723:45"><name pos:start="723:38" pos:end="723:45"><name pos:start="723:38" pos:end="723:42">basis</name><index pos:start="723:43" pos:end="723:45">[<expr pos:start="723:44" pos:end="723:44"><name pos:start="723:44" pos:end="723:44">j</name></expr>]</index></name></expr></argument>, <argument pos:start="723:48" pos:end="723:66"><expr pos:start="723:48" pos:end="723:66"><name pos:start="723:48" pos:end="723:66">best_unquant_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="725:10" pos:end="729:9">else<block pos:start="725:14" pos:end="729:9">{<block_content pos:start="727:13" pos:end="727:18">

            <break pos:start="727:13" pos:end="727:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

<cpp:ifdef pos:start="733:1" pos:end="733:19">#<cpp:directive pos:start="733:2" pos:end="733:6">ifdef</cpp:directive> <name pos:start="733:8" pos:end="733:19">REFINE_STATS</name></cpp:ifdef>

<if_stmt pos:start="735:1" pos:end="739:1"><if pos:start="735:1" pos:end="739:1">if<condition pos:start="735:3" pos:end="735:19">(<expr pos:start="735:4" pos:end="735:18"><name pos:start="735:4" pos:end="735:16">last_non_zero</name><operator pos:start="735:17" pos:end="735:17">&gt;</operator><literal type="number" pos:start="735:18" pos:end="735:18">0</literal></expr>)</condition><block pos:start="735:20" pos:end="739:1">{<block_content pos:start="737:1" pos:end="737:30">

<macro pos:start="737:1" pos:end="737:30"><name pos:start="737:1" pos:end="737:10">STOP_TIMER</name><argument_list pos:start="737:11" pos:end="737:30">(<argument pos:start="737:12" pos:end="737:29"><literal type="string" pos:start="737:12" pos:end="737:29">"iterative search"</literal></argument>)</argument_list></macro>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif pos:start="743:1" pos:end="743:6">#<cpp:directive pos:start="743:2" pos:end="743:6">endif</cpp:directive></cpp:endif>



    <return pos:start="747:5" pos:end="747:25">return <expr pos:start="747:12" pos:end="747:24"><name pos:start="747:12" pos:end="747:24">last_non_zero</name></expr>;</return>

</block_content>}</block></function>
</unit>
