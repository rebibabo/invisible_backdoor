<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20154.c" pos:tabs="8"><function pos:start="1:1" pos:end="263:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">handle_alloc</name><parameter_list pos:start="1:24" pos:end="3:59">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:67">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:25"><decl pos:start="3:5" pos:end="3:25"><type pos:start="3:5" pos:end="3:25"><name pos:start="3:5" pos:end="3:12">uint64_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:25">host_offset</name></decl></parameter>, <parameter pos:start="3:28" pos:end="3:42"><decl pos:start="3:28" pos:end="3:42"><type pos:start="3:28" pos:end="3:42"><name pos:start="3:28" pos:end="3:35">uint64_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:42">bytes</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:54">QCowL2Meta</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:58">m</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="263:1">{<block_content pos:start="7:5" pos:end="261:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:28">nb_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:33">alloc_cluster_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:37"><expr pos:start="25:5" pos:end="27:36"><call pos:start="25:5" pos:end="27:36"><name pos:start="25:5" pos:end="25:28">trace_qcow2_handle_alloc</name><argument_list pos:start="25:29" pos:end="27:36">(<argument pos:start="25:30" pos:end="25:50"><expr pos:start="25:30" pos:end="25:50"><call pos:start="25:30" pos:end="25:50"><name pos:start="25:30" pos:end="25:48">qemu_coroutine_self</name><argument_list pos:start="25:49" pos:end="25:50">()</argument_list></call></expr></argument>, <argument pos:start="25:53" pos:end="25:64"><expr pos:start="25:53" pos:end="25:64"><name pos:start="25:53" pos:end="25:64">guest_offset</name></expr></argument>, <argument pos:start="25:67" pos:end="25:78"><expr pos:start="25:67" pos:end="25:78"><operator pos:start="25:67" pos:end="25:67">*</operator><name pos:start="25:68" pos:end="25:78">host_offset</name></expr></argument>,

                             <argument pos:start="27:30" pos:end="27:35"><expr pos:start="27:30" pos:end="27:35"><operator pos:start="27:30" pos:end="27:30">*</operator><name pos:start="27:31" pos:end="27:35">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:22">(<argument pos:start="29:12" pos:end="29:21"><expr pos:start="29:12" pos:end="29:21"><operator pos:start="29:12" pos:end="29:12">*</operator><name pos:start="29:13" pos:end="29:17">bytes</name> <operator pos:start="29:19" pos:end="29:19">&gt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="39:7">/*

     * Calculate the number of clusters to look for. We stop at L2 table

     * boundaries to keep things simple.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="43:75"><expr pos:start="41:5" pos:end="43:74"><name pos:start="41:5" pos:end="41:15">nb_clusters</name> <operator pos:start="41:17" pos:end="41:17">=</operator>

        <call pos:start="43:9" pos:end="43:74"><name pos:start="43:9" pos:end="43:24">size_to_clusters</name><argument_list pos:start="43:25" pos:end="43:74">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><name pos:start="43:26" pos:end="43:26">s</name></expr></argument>, <argument pos:start="43:29" pos:end="43:73"><expr pos:start="43:29" pos:end="43:73"><call pos:start="43:29" pos:end="43:64"><name pos:start="43:29" pos:end="43:47">offset_into_cluster</name><argument_list pos:start="43:48" pos:end="43:64">(<argument pos:start="43:49" pos:end="43:49"><expr pos:start="43:49" pos:end="43:49"><name pos:start="43:49" pos:end="43:49">s</name></expr></argument>, <argument pos:start="43:52" pos:end="43:63"><expr pos:start="43:52" pos:end="43:63"><name pos:start="43:52" pos:end="43:63">guest_offset</name></expr></argument>)</argument_list></call> <operator pos:start="43:66" pos:end="43:66">+</operator> <operator pos:start="43:68" pos:end="43:68">*</operator><name pos:start="43:69" pos:end="43:73">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:12">l2_index</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:50"><name pos:start="47:16" pos:end="47:33">offset_to_l2_index</name><argument_list pos:start="47:34" pos:end="47:50">(<argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">s</name></expr></argument>, <argument pos:start="47:38" pos:end="47:49"><expr pos:start="47:38" pos:end="47:49"><name pos:start="47:38" pos:end="47:49">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:58"><expr pos:start="49:5" pos:end="49:57"><name pos:start="49:5" pos:end="49:15">nb_clusters</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:57"><name pos:start="49:19" pos:end="49:21">MIN</name><argument_list pos:start="49:22" pos:end="49:57">(<argument pos:start="49:23" pos:end="49:33"><expr pos:start="49:23" pos:end="49:33"><name pos:start="49:23" pos:end="49:33">nb_clusters</name></expr></argument>, <argument pos:start="49:36" pos:end="49:56"><expr pos:start="49:36" pos:end="49:56"><name pos:start="49:36" pos:end="49:45"><name pos:start="49:36" pos:end="49:36">s</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:45">l2_size</name></name> <operator pos:start="49:47" pos:end="49:47">-</operator> <name pos:start="49:49" pos:end="49:56">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:54">/* Find L2 entry for the first involved cluster */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:68"><expr pos:start="55:5" pos:end="55:67"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:67"><name pos:start="55:11" pos:end="55:27">get_cluster_table</name><argument_list pos:start="55:28" pos:end="55:67">(<argument pos:start="55:29" pos:end="55:30"><expr pos:start="55:29" pos:end="55:30"><name pos:start="55:29" pos:end="55:30">bs</name></expr></argument>, <argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">guest_offset</name></expr></argument>, <argument pos:start="55:47" pos:end="55:55"><expr pos:start="55:47" pos:end="55:55"><operator pos:start="55:47" pos:end="55:47">&amp;</operator><name pos:start="55:48" pos:end="55:55">l2_table</name></expr></argument>, <argument pos:start="55:58" pos:end="55:66"><expr pos:start="55:58" pos:end="55:66"><operator pos:start="55:58" pos:end="55:58">&amp;</operator><name pos:start="55:59" pos:end="55:66">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:16">(<expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">&lt;</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>)</condition> <block pos:start="57:18" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:19">

        <return pos:start="59:9" pos:end="59:19">return <expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:44"><expr pos:start="65:5" pos:end="65:43"><name pos:start="65:5" pos:end="65:9">entry</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:43"><name pos:start="65:13" pos:end="65:23">be64_to_cpu</name><argument_list pos:start="65:24" pos:end="65:43">(<argument pos:start="65:25" pos:end="65:42"><expr pos:start="65:25" pos:end="65:42"><name pos:start="65:25" pos:end="65:42"><name pos:start="65:25" pos:end="65:32">l2_table</name><index pos:start="65:33" pos:end="65:42">[<expr pos:start="65:34" pos:end="65:41"><name pos:start="65:34" pos:end="65:41">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:66">/* For the moment, overwrite compressed clusters one by one */</comment>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:38">(<expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:13">entry</name> <operator pos:start="71:15" pos:end="71:15">&amp;</operator> <name pos:start="71:17" pos:end="71:37">QCOW_OFLAG_COMPRESSED</name></expr>)</condition> <block pos:start="71:40" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:24">

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19">nb_clusters</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:77">

        <expr_stmt pos:start="77:9" pos:end="77:77"><expr pos:start="77:9" pos:end="77:76"><name pos:start="77:9" pos:end="77:19">nb_clusters</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:76"><name pos:start="77:23" pos:end="77:40">count_cow_clusters</name><argument_list pos:start="77:41" pos:end="77:76">(<argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><name pos:start="77:42" pos:end="77:42">s</name></expr></argument>, <argument pos:start="77:45" pos:end="77:55"><expr pos:start="77:45" pos:end="77:55"><name pos:start="77:45" pos:end="77:55">nb_clusters</name></expr></argument>, <argument pos:start="77:58" pos:end="77:65"><expr pos:start="77:58" pos:end="77:65"><name pos:start="77:58" pos:end="77:65">l2_table</name></expr></argument>, <argument pos:start="77:68" pos:end="77:75"><expr pos:start="77:68" pos:end="77:75"><name pos:start="77:68" pos:end="77:75">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="87:30">/* This function is only called when there were no non-COW clusters, so if

     * we can't find any unallocated or COW clusters either, something is

     * wrong with our code. */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:28"><expr pos:start="89:5" pos:end="89:27"><call pos:start="89:5" pos:end="89:27"><name pos:start="89:5" pos:end="89:10">assert</name><argument_list pos:start="89:11" pos:end="89:27">(<argument pos:start="89:12" pos:end="89:26"><expr pos:start="89:12" pos:end="89:26"><name pos:start="89:12" pos:end="89:22">nb_clusters</name> <operator pos:start="89:24" pos:end="89:24">&gt;</operator> <literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:64"><expr pos:start="93:5" pos:end="93:63"><call pos:start="93:5" pos:end="93:63"><name pos:start="93:5" pos:end="93:19">qcow2_cache_put</name><argument_list pos:start="93:20" pos:end="93:63">(<argument pos:start="93:21" pos:end="93:22"><expr pos:start="93:21" pos:end="93:22"><name pos:start="93:21" pos:end="93:22">bs</name></expr></argument>, <argument pos:start="93:25" pos:end="93:41"><expr pos:start="93:25" pos:end="93:41"><name pos:start="93:25" pos:end="93:41"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:41">l2_table_cache</name></name></expr></argument>, <argument pos:start="93:44" pos:end="93:62"><expr pos:start="93:44" pos:end="93:62"><operator pos:start="93:44" pos:end="93:44">(</operator><name pos:start="93:45" pos:end="93:48">void</name> <operator pos:start="93:50" pos:end="93:50">*</operator><operator pos:start="93:51" pos:end="93:51">*</operator><operator pos:start="93:52" pos:end="93:52">)</operator> <operator pos:start="93:54" pos:end="93:54">&amp;</operator><name pos:start="93:55" pos:end="93:62">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:68">/* Allocate, if necessary at a given offset in the image file */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:24">alloc_cluster_offset</name> <operator pos:start="99:26" pos:end="99:26">=</operator> <call pos:start="99:28" pos:end="99:60"><name pos:start="99:28" pos:end="99:43">start_of_cluster</name><argument_list pos:start="99:44" pos:end="99:60">(<argument pos:start="99:45" pos:end="99:45"><expr pos:start="99:45" pos:end="99:45"><name pos:start="99:45" pos:end="99:45">s</name></expr></argument>, <argument pos:start="99:48" pos:end="99:59"><expr pos:start="99:48" pos:end="99:59"><operator pos:start="99:48" pos:end="99:48">*</operator><name pos:start="99:49" pos:end="99:59">host_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="103:48"><expr pos:start="101:5" pos:end="103:47"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="103:47"><name pos:start="101:11" pos:end="101:33">do_alloc_cluster_offset</name><argument_list pos:start="101:34" pos:end="103:47">(<argument pos:start="101:35" pos:end="101:36"><expr pos:start="101:35" pos:end="101:36"><name pos:start="101:35" pos:end="101:36">bs</name></expr></argument>, <argument pos:start="101:39" pos:end="101:50"><expr pos:start="101:39" pos:end="101:50"><name pos:start="101:39" pos:end="101:50">guest_offset</name></expr></argument>, <argument pos:start="101:53" pos:end="101:73"><expr pos:start="101:53" pos:end="101:73"><operator pos:start="101:53" pos:end="101:53">&amp;</operator><name pos:start="101:54" pos:end="101:73">alloc_cluster_offset</name></expr></argument>,

                                  <argument pos:start="103:35" pos:end="103:46"><expr pos:start="103:35" pos:end="103:46"><operator pos:start="103:35" pos:end="103:35">&amp;</operator><name pos:start="103:36" pos:end="103:46">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:18">

        <goto pos:start="107:9" pos:end="107:18">goto <name pos:start="107:14" pos:end="107:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:44">/* Can't extend contiguous allocation */</comment>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:25">(<expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:19">nb_clusters</name> <operator pos:start="115:21" pos:end="115:22">==</operator> <literal type="number" pos:start="115:24" pos:end="115:24">0</literal></expr>)</condition> <block pos:start="115:27" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:17">

        <expr_stmt pos:start="117:9" pos:end="117:19"><expr pos:start="117:9" pos:end="117:18"><operator pos:start="117:9" pos:end="117:9">*</operator><name pos:start="117:10" pos:end="117:14">bytes</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:17">return <expr pos:start="119:16" pos:end="119:16"><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="131:23">/* !*host_offset would overwrite the image header and is reserved for "no

     * host offset preferred". If 0 was a valid host offset, it'd trigger the

     * following overlap check; do that now to avoid having an invalid value in

     * *host_offset. */</comment>

    <if_stmt pos:start="133:5" pos:end="143:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="133:30">(<expr pos:start="133:9" pos:end="133:29"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:29">alloc_cluster_offset</name></expr>)</condition> <block pos:start="133:32" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:18">

        <expr_stmt pos:start="135:9" pos:end="137:75"><expr pos:start="135:9" pos:end="137:74"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="137:74"><name pos:start="135:15" pos:end="135:43">qcow2_pre_write_overlap_check</name><argument_list pos:start="135:44" pos:end="137:74">(<argument pos:start="135:45" pos:end="135:46"><expr pos:start="135:45" pos:end="135:46"><name pos:start="135:45" pos:end="135:46">bs</name></expr></argument>, <argument pos:start="135:49" pos:end="135:49"><expr pos:start="135:49" pos:end="135:49"><literal type="number" pos:start="135:49" pos:end="135:49">0</literal></expr></argument>, <argument pos:start="135:52" pos:end="135:71"><expr pos:start="135:52" pos:end="135:71"><name pos:start="135:52" pos:end="135:71">alloc_cluster_offset</name></expr></argument>,

                                            <argument pos:start="137:45" pos:end="137:73"><expr pos:start="137:45" pos:end="137:73"><name pos:start="137:45" pos:end="137:55">nb_clusters</name> <operator pos:start="137:57" pos:end="137:57">*</operator> <name pos:start="137:59" pos:end="137:73"><name pos:start="137:59" pos:end="137:59">s</name><operator pos:start="137:60" pos:end="137:61">-&gt;</operator><name pos:start="137:62" pos:end="137:73">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:24"><expr pos:start="139:9" pos:end="139:23"><call pos:start="139:9" pos:end="139:23"><name pos:start="139:9" pos:end="139:14">assert</name><argument_list pos:start="139:15" pos:end="139:23">(<argument pos:start="139:16" pos:end="139:22"><expr pos:start="139:16" pos:end="139:22"><name pos:start="139:16" pos:end="139:18">ret</name> <operator pos:start="139:20" pos:end="139:20">&lt;</operator> <literal type="number" pos:start="139:22" pos:end="139:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:18">goto <name pos:start="141:14" pos:end="141:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="173:7">/*

     * Save info needed for meta data update.

     *

     * requested_sectors: Number of sectors from the start of the first

     * newly allocated cluster to the end of the (possibly shortened

     * before) write request.

     *

     * avail_sectors: Number of sectors from the start of the first

     * newly allocated to the end of the last newly allocated cluster.

     *

     * nb_sectors: The number of sectors from the start of the first

     * newly allocated cluster to the end of the area that the write

     * request actually writes to (excluding COW at the end)

     */</comment>

    <decl_stmt pos:start="175:5" pos:end="179:28"><decl pos:start="175:5" pos:end="179:27"><type pos:start="175:5" pos:end="175:7"><name pos:start="175:5" pos:end="175:7">int</name></type> <name pos:start="175:9" pos:end="175:25">requested_sectors</name> <init pos:start="175:27" pos:end="179:27">=

        <expr pos:start="177:9" pos:end="179:27"><operator pos:start="177:9" pos:end="177:9">(</operator><operator pos:start="177:10" pos:end="177:10">*</operator><name pos:start="177:11" pos:end="177:15">bytes</name> <operator pos:start="177:17" pos:end="177:17">+</operator> <call pos:start="177:19" pos:end="177:54"><name pos:start="177:19" pos:end="177:37">offset_into_cluster</name><argument_list pos:start="177:38" pos:end="177:54">(<argument pos:start="177:39" pos:end="177:39"><expr pos:start="177:39" pos:end="177:39"><name pos:start="177:39" pos:end="177:39">s</name></expr></argument>, <argument pos:start="177:42" pos:end="177:53"><expr pos:start="177:42" pos:end="177:53"><name pos:start="177:42" pos:end="177:53">guest_offset</name></expr></argument>)</argument_list></call><operator pos:start="177:55" pos:end="177:55">)</operator>

        <operator pos:start="179:9" pos:end="179:10">&gt;&gt;</operator> <name pos:start="179:12" pos:end="179:27">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="181:5" pos:end="183:64"><decl pos:start="181:5" pos:end="183:63"><type pos:start="181:5" pos:end="181:7"><name pos:start="181:5" pos:end="181:7">int</name></type> <name pos:start="181:9" pos:end="181:21">avail_sectors</name> <init pos:start="181:23" pos:end="183:63">= <expr pos:start="181:25" pos:end="183:63"><name pos:start="181:25" pos:end="181:35">nb_clusters</name>

                        <operator pos:start="183:25" pos:end="183:26">&lt;&lt;</operator> <operator pos:start="183:28" pos:end="183:28">(</operator><name pos:start="183:29" pos:end="183:43"><name pos:start="183:29" pos:end="183:29">s</name><operator pos:start="183:30" pos:end="183:31">-&gt;</operator><name pos:start="183:32" pos:end="183:43">cluster_bits</name></name> <operator pos:start="183:45" pos:end="183:45">-</operator> <name pos:start="183:47" pos:end="183:62">BDRV_SECTOR_BITS</name><operator pos:start="183:63" pos:end="183:63">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="185:5" pos:end="187:44"><decl pos:start="185:5" pos:end="187:43"><type pos:start="185:5" pos:end="185:7"><name pos:start="185:5" pos:end="185:7">int</name></type> <name pos:start="185:9" pos:end="185:21">alloc_n_start</name> <init pos:start="185:23" pos:end="187:43">= <expr pos:start="185:25" pos:end="187:43"><call pos:start="185:25" pos:end="185:60"><name pos:start="185:25" pos:end="185:43">offset_into_cluster</name><argument_list pos:start="185:44" pos:end="185:60">(<argument pos:start="185:45" pos:end="185:45"><expr pos:start="185:45" pos:end="185:45"><name pos:start="185:45" pos:end="185:45">s</name></expr></argument>, <argument pos:start="185:48" pos:end="185:59"><expr pos:start="185:48" pos:end="185:59"><name pos:start="185:48" pos:end="185:59">guest_offset</name></expr></argument>)</argument_list></call>

                        <operator pos:start="187:25" pos:end="187:26">&gt;&gt;</operator> <name pos:start="187:28" pos:end="187:43">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="189:5" pos:end="189:59"><decl pos:start="189:5" pos:end="189:58"><type pos:start="189:5" pos:end="189:7"><name pos:start="189:5" pos:end="189:7">int</name></type> <name pos:start="189:9" pos:end="189:18">nb_sectors</name> <init pos:start="189:20" pos:end="189:58">= <expr pos:start="189:22" pos:end="189:58"><call pos:start="189:22" pos:end="189:58"><name pos:start="189:22" pos:end="189:24">MIN</name><argument_list pos:start="189:25" pos:end="189:58">(<argument pos:start="189:26" pos:end="189:42"><expr pos:start="189:26" pos:end="189:42"><name pos:start="189:26" pos:end="189:42">requested_sectors</name></expr></argument>, <argument pos:start="189:45" pos:end="189:57"><expr pos:start="189:45" pos:end="189:57"><name pos:start="189:45" pos:end="189:57">avail_sectors</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="191:5" pos:end="191:27"><decl pos:start="191:5" pos:end="191:26"><type pos:start="191:5" pos:end="191:16"><name pos:start="191:5" pos:end="191:14">QCowL2Meta</name> <modifier pos:start="191:16" pos:end="191:16">*</modifier></type><name pos:start="191:17" pos:end="191:21">old_m</name> <init pos:start="191:23" pos:end="191:26">= <expr pos:start="191:25" pos:end="191:26"><operator pos:start="191:25" pos:end="191:25">*</operator><name pos:start="191:26" pos:end="191:26">m</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:32"><expr pos:start="195:5" pos:end="195:31"><operator pos:start="195:5" pos:end="195:5">*</operator><name pos:start="195:6" pos:end="195:6">m</name> <operator pos:start="195:8" pos:end="195:8">=</operator> <call pos:start="195:10" pos:end="195:31"><name pos:start="195:10" pos:end="195:18">g_malloc0</name><argument_list pos:start="195:19" pos:end="195:31">(<argument pos:start="195:20" pos:end="195:30"><expr pos:start="195:20" pos:end="195:30"><sizeof pos:start="195:20" pos:end="195:30">sizeof<argument_list pos:start="195:26" pos:end="195:30">(<argument pos:start="195:27" pos:end="195:29"><expr pos:start="195:27" pos:end="195:29"><operator pos:start="195:27" pos:end="195:27">*</operator><operator pos:start="195:28" pos:end="195:28">*</operator><name pos:start="195:29" pos:end="195:29">m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="199:5" pos:end="231:6"><expr pos:start="199:5" pos:end="231:5"><operator pos:start="199:5" pos:end="199:5">*</operator><operator pos:start="199:6" pos:end="199:6">*</operator><name pos:start="199:7" pos:end="199:7">m</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <operator pos:start="199:11" pos:end="199:11">(</operator><name pos:start="199:12" pos:end="199:21">QCowL2Meta</name><operator pos:start="199:22" pos:end="199:22">)</operator> <block pos:start="199:24" pos:end="231:5">{

        <expr pos:start="201:9" pos:end="201:31"><operator pos:start="201:9" pos:end="201:9">.</operator><name pos:start="201:10" pos:end="201:13">next</name>           <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:31">old_m</name></expr>,



        <expr pos:start="205:9" pos:end="205:46"><operator pos:start="205:9" pos:end="205:9">.</operator><name pos:start="205:10" pos:end="205:21">alloc_offset</name>   <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:46">alloc_cluster_offset</name></expr>,

        <expr pos:start="207:9" pos:end="207:59"><operator pos:start="207:9" pos:end="207:9">.</operator><name pos:start="207:10" pos:end="207:15">offset</name>         <operator pos:start="207:25" pos:end="207:25">=</operator> <call pos:start="207:27" pos:end="207:59"><name pos:start="207:27" pos:end="207:42">start_of_cluster</name><argument_list pos:start="207:43" pos:end="207:59">(<argument pos:start="207:44" pos:end="207:44"><expr pos:start="207:44" pos:end="207:44"><name pos:start="207:44" pos:end="207:44">s</name></expr></argument>, <argument pos:start="207:47" pos:end="207:58"><expr pos:start="207:47" pos:end="207:58"><name pos:start="207:47" pos:end="207:58">guest_offset</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="209:9" pos:end="209:37"><operator pos:start="209:9" pos:end="209:9">.</operator><name pos:start="209:10" pos:end="209:20">nb_clusters</name>    <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:37">nb_clusters</name></expr>,

        <expr pos:start="211:9" pos:end="211:36"><operator pos:start="211:9" pos:end="211:9">.</operator><name pos:start="211:10" pos:end="211:21">nb_available</name>   <operator pos:start="211:25" pos:end="211:25">=</operator> <name pos:start="211:27" pos:end="211:36">nb_sectors</name></expr>,



        <expr pos:start="215:9" pos:end="221:9"><operator pos:start="215:9" pos:end="215:9">.</operator><name pos:start="215:10" pos:end="215:18">cow_start</name> <operator pos:start="215:20" pos:end="215:20">=</operator> <block pos:start="215:22" pos:end="221:9">{

            <expr pos:start="217:13" pos:end="217:27"><operator pos:start="217:13" pos:end="217:13">.</operator><name pos:start="217:14" pos:end="217:19">offset</name>     <operator pos:start="217:25" pos:end="217:25">=</operator> <literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr>,

            <expr pos:start="219:13" pos:end="219:39"><operator pos:start="219:13" pos:end="219:13">.</operator><name pos:start="219:14" pos:end="219:23">nb_sectors</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <name pos:start="219:27" pos:end="219:39">alloc_n_start</name></expr>,

        }</block></expr>,

        <expr pos:start="223:9" pos:end="229:9"><operator pos:start="223:9" pos:end="223:9">.</operator><name pos:start="223:10" pos:end="223:16">cow_end</name> <operator pos:start="223:18" pos:end="223:18">=</operator> <block pos:start="223:20" pos:end="229:9">{

            <expr pos:start="225:13" pos:end="225:55"><operator pos:start="225:13" pos:end="225:13">.</operator><name pos:start="225:14" pos:end="225:19">offset</name>     <operator pos:start="225:25" pos:end="225:25">=</operator> <name pos:start="225:27" pos:end="225:36">nb_sectors</name> <operator pos:start="225:38" pos:end="225:38">*</operator> <name pos:start="225:40" pos:end="225:55">BDRV_SECTOR_SIZE</name></expr>,

            <expr pos:start="227:13" pos:end="227:52"><operator pos:start="227:13" pos:end="227:13">.</operator><name pos:start="227:14" pos:end="227:23">nb_sectors</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <name pos:start="227:27" pos:end="227:39">avail_sectors</name> <operator pos:start="227:41" pos:end="227:41">-</operator> <name pos:start="227:43" pos:end="227:52">nb_sectors</name></expr>,

        }</block></expr>,

    }</block></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:50"><expr pos:start="233:5" pos:end="233:49"><call pos:start="233:5" pos:end="233:49"><name pos:start="233:5" pos:end="233:22">qemu_co_queue_init</name><argument_list pos:start="233:23" pos:end="233:49">(<argument pos:start="233:24" pos:end="233:48"><expr pos:start="233:24" pos:end="233:48"><operator pos:start="233:24" pos:end="233:24">&amp;</operator><name pos:start="233:25" pos:end="233:48"><operator pos:start="233:25" pos:end="233:25">(</operator><operator pos:start="233:26" pos:end="233:26">*</operator><name pos:start="233:27" pos:end="233:27">m</name><operator pos:start="233:28" pos:end="233:28">)</operator><operator pos:start="233:29" pos:end="233:30">-&gt;</operator><name pos:start="233:31" pos:end="233:48">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:62"><expr pos:start="235:5" pos:end="235:61"><call pos:start="235:5" pos:end="235:61"><name pos:start="235:5" pos:end="235:21">QLIST_INSERT_HEAD</name><argument_list pos:start="235:22" pos:end="235:61">(<argument pos:start="235:23" pos:end="235:40"><expr pos:start="235:23" pos:end="235:40"><operator pos:start="235:23" pos:end="235:23">&amp;</operator><name pos:start="235:24" pos:end="235:40"><name pos:start="235:24" pos:end="235:24">s</name><operator pos:start="235:25" pos:end="235:26">-&gt;</operator><name pos:start="235:27" pos:end="235:40">cluster_allocs</name></name></expr></argument>, <argument pos:start="235:43" pos:end="235:44"><expr pos:start="235:43" pos:end="235:44"><operator pos:start="235:43" pos:end="235:43">*</operator><name pos:start="235:44" pos:end="235:44">m</name></expr></argument>, <argument pos:start="235:47" pos:end="235:60"><expr pos:start="235:47" pos:end="235:60"><name pos:start="235:47" pos:end="235:60">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:79"><expr pos:start="239:5" pos:end="239:78"><operator pos:start="239:5" pos:end="239:5">*</operator><name pos:start="239:6" pos:end="239:16">host_offset</name> <operator pos:start="239:18" pos:end="239:18">=</operator> <name pos:start="239:20" pos:end="239:39">alloc_cluster_offset</name> <operator pos:start="239:41" pos:end="239:41">+</operator> <call pos:start="239:43" pos:end="239:78"><name pos:start="239:43" pos:end="239:61">offset_into_cluster</name><argument_list pos:start="239:62" pos:end="239:78">(<argument pos:start="239:63" pos:end="239:63"><expr pos:start="239:63" pos:end="239:63"><name pos:start="239:63" pos:end="239:63">s</name></expr></argument>, <argument pos:start="239:66" pos:end="239:77"><expr pos:start="239:66" pos:end="239:77"><name pos:start="239:66" pos:end="239:77">guest_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="243:65"><expr pos:start="241:5" pos:end="243:64"><operator pos:start="241:5" pos:end="241:5">*</operator><name pos:start="241:6" pos:end="241:10">bytes</name> <operator pos:start="241:12" pos:end="241:12">=</operator> <call pos:start="241:14" pos:end="243:64"><name pos:start="241:14" pos:end="241:16">MIN</name><argument_list pos:start="241:17" pos:end="243:64">(<argument pos:start="241:18" pos:end="241:23"><expr pos:start="241:18" pos:end="241:23"><operator pos:start="241:18" pos:end="241:18">*</operator><name pos:start="241:19" pos:end="241:23">bytes</name></expr></argument>, <argument pos:start="241:26" pos:end="243:63"><expr pos:start="241:26" pos:end="243:63"><operator pos:start="241:26" pos:end="241:26">(</operator><name pos:start="241:27" pos:end="241:36">nb_sectors</name> <operator pos:start="241:38" pos:end="241:38">*</operator> <name pos:start="241:40" pos:end="241:55">BDRV_SECTOR_SIZE</name><operator pos:start="241:56" pos:end="241:56">)</operator>

                         <operator pos:start="243:26" pos:end="243:26">-</operator> <call pos:start="243:28" pos:end="243:63"><name pos:start="243:28" pos:end="243:46">offset_into_cluster</name><argument_list pos:start="243:47" pos:end="243:63">(<argument pos:start="243:48" pos:end="243:48"><expr pos:start="243:48" pos:end="243:48"><name pos:start="243:48" pos:end="243:48">s</name></expr></argument>, <argument pos:start="243:51" pos:end="243:62"><expr pos:start="243:51" pos:end="243:62"><name pos:start="243:51" pos:end="243:62">guest_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:24"><expr pos:start="245:5" pos:end="245:23"><call pos:start="245:5" pos:end="245:23"><name pos:start="245:5" pos:end="245:10">assert</name><argument_list pos:start="245:11" pos:end="245:23">(<argument pos:start="245:12" pos:end="245:22"><expr pos:start="245:12" pos:end="245:22"><operator pos:start="245:12" pos:end="245:12">*</operator><name pos:start="245:13" pos:end="245:17">bytes</name> <operator pos:start="245:19" pos:end="245:20">!=</operator> <literal type="number" pos:start="245:22" pos:end="245:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="249:5" pos:end="249:13">return <expr pos:start="249:12" pos:end="249:12"><literal type="number" pos:start="249:12" pos:end="249:12">1</literal></expr>;</return>



<label pos:start="253:1" pos:end="253:5"><name pos:start="253:1" pos:end="253:4">fail</name>:</label>

    <if_stmt pos:start="255:5" pos:end="259:5"><if pos:start="255:5" pos:end="259:5">if <condition pos:start="255:8" pos:end="255:36">(<expr pos:start="255:9" pos:end="255:35"><operator pos:start="255:9" pos:end="255:9">*</operator><name pos:start="255:10" pos:end="255:10">m</name> <operator pos:start="255:12" pos:end="255:13">&amp;&amp;</operator> <name pos:start="255:15" pos:end="255:31"><operator pos:start="255:15" pos:end="255:15">(</operator><operator pos:start="255:16" pos:end="255:16">*</operator><name pos:start="255:17" pos:end="255:17">m</name><operator pos:start="255:18" pos:end="255:18">)</operator><operator pos:start="255:19" pos:end="255:20">-&gt;</operator><name pos:start="255:21" pos:end="255:31">nb_clusters</name></name> <operator pos:start="255:33" pos:end="255:33">&gt;</operator> <literal type="number" pos:start="255:35" pos:end="255:35">0</literal></expr>)</condition> <block pos:start="255:38" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:41">

        <expr_stmt pos:start="257:9" pos:end="257:41"><expr pos:start="257:9" pos:end="257:40"><call pos:start="257:9" pos:end="257:40"><name pos:start="257:9" pos:end="257:20">QLIST_REMOVE</name><argument_list pos:start="257:21" pos:end="257:40">(<argument pos:start="257:22" pos:end="257:23"><expr pos:start="257:22" pos:end="257:23"><operator pos:start="257:22" pos:end="257:22">*</operator><name pos:start="257:23" pos:end="257:23">m</name></expr></argument>, <argument pos:start="257:26" pos:end="257:39"><expr pos:start="257:26" pos:end="257:39"><name pos:start="257:26" pos:end="257:39">next_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="261:5" pos:end="261:15">return <expr pos:start="261:12" pos:end="261:14"><name pos:start="261:12" pos:end="261:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
