<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18608.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vhdx_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="227:1">{<block_content pos:start="7:5" pos:end="225:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVVHDXState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">signature</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:28">data_blocks_cnt</name></decl>, <decl pos:start="15:31" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:31" pos:end="15:47">bitmap_blocks_cnt</name></decl>;</decl_stmt>





    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:10">bat</name></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:26">first_visible_write</name></name> <operator pos:start="23:28" pos:end="23:28">=</operator> <name pos:start="23:30" pos:end="23:33">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:22">qemu_co_mutex_init</name><argument_list pos:start="27:23" pos:end="27:32">(<argument pos:start="27:24" pos:end="27:31"><expr pos:start="27:24" pos:end="27:31"><operator pos:start="27:24" pos:end="27:24">&amp;</operator><name pos:start="27:25" pos:end="27:31"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:37">/* validate the file signature */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:64"><expr pos:start="33:5" pos:end="33:63"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:63"><name pos:start="33:11" pos:end="33:20">bdrv_pread</name><argument_list pos:start="33:21" pos:end="33:63">(<argument pos:start="33:22" pos:end="33:29"><expr pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:23">bs</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">file</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:44"><expr pos:start="33:35" pos:end="33:44"><operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:44">signature</name></expr></argument>, <argument pos:start="33:47" pos:end="33:62"><expr pos:start="33:47" pos:end="33:62"><sizeof pos:start="33:47" pos:end="33:62">sizeof<argument_list pos:start="33:53" pos:end="33:62">(<argument pos:start="33:54" pos:end="33:61"><expr pos:start="33:54" pos:end="33:61"><name pos:start="33:54" pos:end="33:61">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:18">

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:42">(<expr pos:start="41:9" pos:end="41:41"><call pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:14">memcmp</name><argument_list pos:start="41:15" pos:end="41:41">(<argument pos:start="41:16" pos:end="41:25"><expr pos:start="41:16" pos:end="41:25"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:25">signature</name></expr></argument>, <argument pos:start="41:28" pos:end="41:37"><expr pos:start="41:28" pos:end="41:37"><literal type="string" pos:start="41:28" pos:end="41:37">"vhdxfile"</literal></expr></argument>, <argument pos:start="41:40" pos:end="41:40"><expr pos:start="41:40" pos:end="41:40"><literal type="number" pos:start="41:40" pos:end="41:40">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:44" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">-</operator><name pos:start="43:16" pos:end="43:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="55:23">/* This is used for any header updates, for the file_write_guid.

     * The spec dictates that a new value should be used for the first

     * header update */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:41"><expr pos:start="57:5" pos:end="57:40"><call pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:22">vhdx_guid_generate</name><argument_list pos:start="57:23" pos:end="57:40">(<argument pos:start="57:24" pos:end="57:39"><expr pos:start="57:24" pos:end="57:39"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:39"><name pos:start="57:25" pos:end="57:25">s</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:39">session_guid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:34"><name pos:start="61:11" pos:end="61:27">vhdx_parse_header</name><argument_list pos:start="61:28" pos:end="61:34">(<argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">bs</name></expr></argument>, <argument pos:start="61:33" pos:end="61:33"><expr pos:start="61:33" pos:end="61:33"><name pos:start="61:33" pos:end="61:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">ret</name></expr>)</condition> <block pos:start="63:14" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:18">

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:32"><expr pos:start="71:5" pos:end="71:31"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:31"><name pos:start="71:11" pos:end="71:24">vhdx_parse_log</name><argument_list pos:start="71:25" pos:end="71:31">(<argument pos:start="71:26" pos:end="71:27"><expr pos:start="71:26" pos:end="71:27"><name pos:start="71:26" pos:end="71:27">bs</name></expr></argument>, <argument pos:start="71:30" pos:end="71:30"><expr pos:start="71:30" pos:end="71:30"><name pos:start="71:30" pos:end="71:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">ret</name></expr>)</condition> <block pos:start="73:14" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:18">

        <goto pos:start="75:9" pos:end="75:18">goto <name pos:start="75:14" pos:end="75:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:7">ret</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:40"><name pos:start="81:11" pos:end="81:33">vhdx_open_region_tables</name><argument_list pos:start="81:34" pos:end="81:40">(<argument pos:start="81:35" pos:end="81:36"><expr pos:start="81:35" pos:end="81:36"><name pos:start="81:35" pos:end="81:36">bs</name></expr></argument>, <argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><name pos:start="81:39" pos:end="81:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:12">(<expr pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">ret</name></expr>)</condition> <block pos:start="83:14" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:18">

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:37"><expr pos:start="91:5" pos:end="91:36"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:36"><name pos:start="91:11" pos:end="91:29">vhdx_parse_metadata</name><argument_list pos:start="91:30" pos:end="91:36">(<argument pos:start="91:31" pos:end="91:32"><expr pos:start="91:31" pos:end="91:32"><name pos:start="91:31" pos:end="91:32">bs</name></expr></argument>, <argument pos:start="91:35" pos:end="91:35"><expr pos:start="91:35" pos:end="91:35"><name pos:start="91:35" pos:end="91:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="97:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:12">(<expr pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">ret</name></expr>)</condition> <block pos:start="93:14" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:18">

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:17">block_size</name></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:40"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:29">params</name><operator pos:start="99:30" pos:end="99:30">.</operator><name pos:start="99:31" pos:end="99:40">block_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="105:29">/* the VHDX spec dictates that virtual_disk_size is always a multiple of

     * logical_sector_size */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:76"><expr pos:start="107:5" pos:end="107:75"><name pos:start="107:5" pos:end="107:21"><name pos:start="107:5" pos:end="107:6">bs</name><operator pos:start="107:7" pos:end="107:8">-&gt;</operator><name pos:start="107:9" pos:end="107:21">total_sectors</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:44"><name pos:start="107:25" pos:end="107:25">s</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:44">virtual_disk_size</name></name> <operator pos:start="107:46" pos:end="107:47">&gt;&gt;</operator> <name pos:start="107:49" pos:end="107:75"><name pos:start="107:49" pos:end="107:49">s</name><operator pos:start="107:50" pos:end="107:51">-&gt;</operator><name pos:start="107:52" pos:end="107:75">logical_sector_size_bits</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:65"><expr pos:start="111:5" pos:end="111:64"><name pos:start="111:5" pos:end="111:19">data_blocks_cnt</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:42"><name pos:start="111:23" pos:end="111:23">s</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:42">virtual_disk_size</name></name> <operator pos:start="111:44" pos:end="111:45">&gt;&gt;</operator> <name pos:start="111:47" pos:end="111:64"><name pos:start="111:47" pos:end="111:47">s</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:64">block_size_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="117:5"><if pos:start="113:5" pos:end="117:5">if <condition pos:start="113:8" pos:end="113:71">(<expr pos:start="113:9" pos:end="113:70"><name pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:28">virtual_disk_size</name></name> <operator pos:start="113:30" pos:end="113:30">-</operator> <operator pos:start="113:32" pos:end="113:32">(</operator><name pos:start="113:33" pos:end="113:47">data_blocks_cnt</name> <operator pos:start="113:49" pos:end="113:50">&lt;&lt;</operator> <name pos:start="113:52" pos:end="113:69"><name pos:start="113:52" pos:end="113:52">s</name><operator pos:start="113:53" pos:end="113:54">-&gt;</operator><name pos:start="113:55" pos:end="113:69">block_size_bits</name></name><operator pos:start="113:70" pos:end="113:70">)</operator></expr>)</condition> <block pos:start="113:73" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:26">

        <expr_stmt pos:start="115:9" pos:end="115:26"><expr pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:23">data_blocks_cnt</name><operator pos:start="115:24" pos:end="115:25">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:63"><expr pos:start="119:5" pos:end="119:62"><name pos:start="119:5" pos:end="119:21">bitmap_blocks_cnt</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:39">data_blocks_cnt</name> <operator pos:start="119:41" pos:end="119:42">&gt;&gt;</operator> <name pos:start="119:44" pos:end="119:62"><name pos:start="119:44" pos:end="119:44">s</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:62">chunk_ratio_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:69">(<expr pos:start="121:9" pos:end="121:68"><name pos:start="121:9" pos:end="121:23">data_blocks_cnt</name> <operator pos:start="121:25" pos:end="121:25">-</operator> <operator pos:start="121:27" pos:end="121:27">(</operator><name pos:start="121:28" pos:end="121:44">bitmap_blocks_cnt</name> <operator pos:start="121:46" pos:end="121:47">&lt;&lt;</operator> <name pos:start="121:49" pos:end="121:67"><name pos:start="121:49" pos:end="121:49">s</name><operator pos:start="121:50" pos:end="121:51">-&gt;</operator><name pos:start="121:52" pos:end="121:67">chunk_ratio_bits</name></name><operator pos:start="121:68" pos:end="121:68">)</operator></expr>)</condition> <block pos:start="121:71" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:28">

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:25">bitmap_blocks_cnt</name><operator pos:start="123:26" pos:end="123:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="129:5" pos:end="139:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:26">(<expr pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:25">parent_entries</name></name></expr>)</condition> <block pos:start="129:28" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:66">

        <expr_stmt pos:start="131:9" pos:end="131:66"><expr pos:start="131:9" pos:end="131:65"><name pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:22">bat_entries</name></name> <operator pos:start="131:24" pos:end="131:24">=</operator> <name pos:start="131:26" pos:end="131:42">bitmap_blocks_cnt</name> <operator pos:start="131:44" pos:end="131:44">*</operator> <operator pos:start="131:46" pos:end="131:46">(</operator><name pos:start="131:47" pos:end="131:60"><name pos:start="131:47" pos:end="131:47">s</name><operator pos:start="131:48" pos:end="131:49">-&gt;</operator><name pos:start="131:50" pos:end="131:60">chunk_ratio</name></name> <operator pos:start="131:62" pos:end="131:62">+</operator> <literal type="number" pos:start="131:64" pos:end="131:64">1</literal><operator pos:start="131:65" pos:end="131:65">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="139:5">else <block pos:start="133:12" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:72">

        <expr_stmt pos:start="135:9" pos:end="137:72"><expr pos:start="135:9" pos:end="137:71"><name pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:22">bat_entries</name></name> <operator pos:start="135:24" pos:end="135:24">=</operator> <name pos:start="135:26" pos:end="135:40">data_blocks_cnt</name> <operator pos:start="135:42" pos:end="135:42">+</operator>

                         <operator pos:start="137:26" pos:end="137:26">(</operator><operator pos:start="137:27" pos:end="137:27">(</operator><name pos:start="137:28" pos:end="137:42">data_blocks_cnt</name> <operator pos:start="137:44" pos:end="137:44">-</operator> <literal type="number" pos:start="137:46" pos:end="137:46">1</literal><operator pos:start="137:47" pos:end="137:47">)</operator> <operator pos:start="137:49" pos:end="137:50">&gt;&gt;</operator> <name pos:start="137:52" pos:end="137:70"><name pos:start="137:52" pos:end="137:52">s</name><operator pos:start="137:53" pos:end="137:54">-&gt;</operator><name pos:start="137:55" pos:end="137:70">chunk_ratio_bits</name></name><operator pos:start="137:71" pos:end="137:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:42"><expr pos:start="143:5" pos:end="143:41"><name pos:start="143:5" pos:end="143:17"><name pos:start="143:5" pos:end="143:5">s</name><operator pos:start="143:6" pos:end="143:7">-&gt;</operator><name pos:start="143:8" pos:end="143:17">bat_offset</name></name> <operator pos:start="143:19" pos:end="143:19">=</operator> <name pos:start="143:21" pos:end="143:41"><name pos:start="143:21" pos:end="143:21">s</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:29">bat_rt</name><operator pos:start="143:30" pos:end="143:30">.</operator><name pos:start="143:31" pos:end="143:41">file_offset</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="155:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:65">(<expr pos:start="147:9" pos:end="147:64"><name pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:22">bat_entries</name></name> <operator pos:start="147:24" pos:end="147:24">&gt;</operator> <name pos:start="147:26" pos:end="147:41"><name pos:start="147:26" pos:end="147:26">s</name><operator pos:start="147:27" pos:end="147:28">-&gt;</operator><name pos:start="147:29" pos:end="147:34">bat_rt</name><operator pos:start="147:35" pos:end="147:35">.</operator><name pos:start="147:36" pos:end="147:41">length</name></name> <operator pos:start="147:43" pos:end="147:43">/</operator> <sizeof pos:start="147:45" pos:end="147:64">sizeof<argument_list pos:start="147:51" pos:end="147:64">(<argument pos:start="147:52" pos:end="147:63"><expr pos:start="147:52" pos:end="147:63"><name pos:start="147:52" pos:end="147:63">VHDXBatEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="147:67" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:18">

        <comment type="block" pos:start="149:9" pos:end="149:64">/* BAT allocation is not large enough for all entries */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:22"><expr pos:start="151:9" pos:end="151:21"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <operator pos:start="151:15" pos:end="151:15">-</operator><name pos:start="151:16" pos:end="151:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:41">/* s-&gt;bat is freed in vhdx_close() */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:51"><expr pos:start="161:5" pos:end="161:50"><name pos:start="161:5" pos:end="161:10"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:10">bat</name></name> <operator pos:start="161:12" pos:end="161:12">=</operator> <call pos:start="161:14" pos:end="161:50"><name pos:start="161:14" pos:end="161:28">qemu_blockalign</name><argument_list pos:start="161:29" pos:end="161:50">(<argument pos:start="161:30" pos:end="161:31"><expr pos:start="161:30" pos:end="161:31"><name pos:start="161:30" pos:end="161:31">bs</name></expr></argument>, <argument pos:start="161:34" pos:end="161:49"><expr pos:start="161:34" pos:end="161:49"><name pos:start="161:34" pos:end="161:49"><name pos:start="161:34" pos:end="161:34">s</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:42">bat_rt</name><operator pos:start="161:43" pos:end="161:43">.</operator><name pos:start="161:44" pos:end="161:49">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:72"><expr pos:start="165:5" pos:end="165:71"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:71"><name pos:start="165:11" pos:end="165:20">bdrv_pread</name><argument_list pos:start="165:21" pos:end="165:71">(<argument pos:start="165:22" pos:end="165:29"><expr pos:start="165:22" pos:end="165:29"><name pos:start="165:22" pos:end="165:29"><name pos:start="165:22" pos:end="165:23">bs</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:29">file</name></name></expr></argument>, <argument pos:start="165:32" pos:end="165:44"><expr pos:start="165:32" pos:end="165:44"><name pos:start="165:32" pos:end="165:44"><name pos:start="165:32" pos:end="165:32">s</name><operator pos:start="165:33" pos:end="165:34">-&gt;</operator><name pos:start="165:35" pos:end="165:44">bat_offset</name></name></expr></argument>, <argument pos:start="165:47" pos:end="165:52"><expr pos:start="165:47" pos:end="165:52"><name pos:start="165:47" pos:end="165:52"><name pos:start="165:47" pos:end="165:47">s</name><operator pos:start="165:48" pos:end="165:49">-&gt;</operator><name pos:start="165:50" pos:end="165:52">bat</name></name></expr></argument>, <argument pos:start="165:55" pos:end="165:70"><expr pos:start="165:55" pos:end="165:70"><name pos:start="165:55" pos:end="165:70"><name pos:start="165:55" pos:end="165:55">s</name><operator pos:start="165:56" pos:end="165:57">-&gt;</operator><name pos:start="165:58" pos:end="165:63">bat_rt</name><operator pos:start="165:64" pos:end="165:64">.</operator><name pos:start="165:65" pos:end="165:70">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&lt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:18">

        <goto pos:start="169:9" pos:end="169:18">goto <name pos:start="169:14" pos:end="169:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="175:5" pos:end="179:5">for <control pos:start="175:9" pos:end="175:40">(<init pos:start="175:10" pos:end="175:15"><expr pos:start="175:10" pos:end="175:14"><name pos:start="175:10" pos:end="175:10">i</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <literal type="number" pos:start="175:14" pos:end="175:14">0</literal></expr>;</init> <condition pos:start="175:17" pos:end="175:35"><expr pos:start="175:17" pos:end="175:34"><name pos:start="175:17" pos:end="175:17">i</name> <operator pos:start="175:19" pos:end="175:19">&lt;</operator> <name pos:start="175:21" pos:end="175:34"><name pos:start="175:21" pos:end="175:21">s</name><operator pos:start="175:22" pos:end="175:23">-&gt;</operator><name pos:start="175:24" pos:end="175:34">bat_entries</name></name></expr>;</condition> <incr pos:start="175:37" pos:end="175:39"><expr pos:start="175:37" pos:end="175:39"><name pos:start="175:37" pos:end="175:37">i</name><operator pos:start="175:38" pos:end="175:39">++</operator></expr></incr>)</control> <block pos:start="175:42" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:33">

        <expr_stmt pos:start="177:9" pos:end="177:33"><expr pos:start="177:9" pos:end="177:32"><call pos:start="177:9" pos:end="177:32"><name pos:start="177:9" pos:end="177:20">le64_to_cpus</name><argument_list pos:start="177:21" pos:end="177:32">(<argument pos:start="177:22" pos:end="177:31"><expr pos:start="177:22" pos:end="177:31"><operator pos:start="177:22" pos:end="177:22">&amp;</operator><name pos:start="177:23" pos:end="177:31"><name pos:start="177:23" pos:end="177:23">s</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:28">bat</name><index pos:start="177:29" pos:end="177:31">[<expr pos:start="177:30" pos:end="177:30"><name pos:start="177:30" pos:end="177:30">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="183:5" pos:end="193:5"><if pos:start="183:5" pos:end="193:5">if <condition pos:start="183:8" pos:end="183:28">(<expr pos:start="183:9" pos:end="183:27"><name pos:start="183:9" pos:end="183:13">flags</name> <operator pos:start="183:15" pos:end="183:15">&amp;</operator> <name pos:start="183:17" pos:end="183:27">BDRV_O_RDWR</name></expr>)</condition> <block pos:start="183:30" pos:end="193:5">{<block_content pos:start="185:9" pos:end="191:9">

        <expr_stmt pos:start="185:9" pos:end="185:54"><expr pos:start="185:9" pos:end="185:53"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:53"><name pos:start="185:15" pos:end="185:33">vhdx_update_headers</name><argument_list pos:start="185:34" pos:end="185:53">(<argument pos:start="185:35" pos:end="185:36"><expr pos:start="185:35" pos:end="185:36"><name pos:start="185:35" pos:end="185:36">bs</name></expr></argument>, <argument pos:start="185:39" pos:end="185:39"><expr pos:start="185:39" pos:end="185:39"><name pos:start="185:39" pos:end="185:39">s</name></expr></argument>, <argument pos:start="185:42" pos:end="185:46"><expr pos:start="185:42" pos:end="185:46"><name pos:start="185:42" pos:end="185:46">false</name></expr></argument>, <argument pos:start="185:49" pos:end="185:52"><expr pos:start="185:49" pos:end="185:52"><name pos:start="185:49" pos:end="185:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:20">(<expr pos:start="187:13" pos:end="187:19"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">&lt;</operator> <literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr>)</condition> <block pos:start="187:22" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:22">

            <goto pos:start="189:13" pos:end="189:22">goto <name pos:start="189:18" pos:end="189:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:41">/* TODO: differencing files, write */</comment>



    <comment type="block" pos:start="201:5" pos:end="201:53">/* Disable migration when VHDX images are used */</comment>

    <expr_stmt pos:start="203:5" pos:end="207:55"><expr pos:start="203:5" pos:end="207:54"><call pos:start="203:5" pos:end="207:54"><name pos:start="203:5" pos:end="203:13">error_set</name><argument_list pos:start="203:14" pos:end="207:54">(<argument pos:start="203:15" pos:end="203:35"><expr pos:start="203:15" pos:end="203:35"><operator pos:start="203:15" pos:end="203:15">&amp;</operator><name pos:start="203:16" pos:end="203:35"><name pos:start="203:16" pos:end="203:16">s</name><operator pos:start="203:17" pos:end="203:18">-&gt;</operator><name pos:start="203:19" pos:end="203:35">migration_blocker</name></name></expr></argument>,

            <argument pos:start="205:13" pos:end="205:51"><expr pos:start="205:13" pos:end="205:51"><name pos:start="205:13" pos:end="205:51">QERR_BLOCK_FORMAT_FEATURE_NOT_SUPPORTED</name></expr></argument>,

            <argument pos:start="207:13" pos:end="207:18"><expr pos:start="207:13" pos:end="207:18"><literal type="string" pos:start="207:13" pos:end="207:18">"vhdx"</literal></expr></argument>, <argument pos:start="207:21" pos:end="207:35"><expr pos:start="207:21" pos:end="207:35"><name pos:start="207:21" pos:end="207:35"><name pos:start="207:21" pos:end="207:22">bs</name><operator pos:start="207:23" pos:end="207:24">-&gt;</operator><name pos:start="207:25" pos:end="207:35">device_name</name></name></expr></argument>, <argument pos:start="207:38" pos:end="207:53"><expr pos:start="207:38" pos:end="207:53"><literal type="string" pos:start="207:38" pos:end="207:53">"live migration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:46"><expr pos:start="209:5" pos:end="209:45"><call pos:start="209:5" pos:end="209:45"><name pos:start="209:5" pos:end="209:23">migrate_add_blocker</name><argument_list pos:start="209:24" pos:end="209:45">(<argument pos:start="209:25" pos:end="209:44"><expr pos:start="209:25" pos:end="209:44"><name pos:start="209:25" pos:end="209:44"><name pos:start="209:25" pos:end="209:25">s</name><operator pos:start="209:26" pos:end="209:27">-&gt;</operator><name pos:start="209:28" pos:end="209:44">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="213:5" pos:end="213:13">return <expr pos:start="213:12" pos:end="213:12"><literal type="number" pos:start="213:12" pos:end="213:12">0</literal></expr>;</return>

<label pos:start="215:1" pos:end="215:5"><name pos:start="215:1" pos:end="215:4">fail</name>:</label>

    <expr_stmt pos:start="217:5" pos:end="217:30"><expr pos:start="217:5" pos:end="217:29"><call pos:start="217:5" pos:end="217:29"><name pos:start="217:5" pos:end="217:14">qemu_vfree</name><argument_list pos:start="217:15" pos:end="217:29">(<argument pos:start="217:16" pos:end="217:28"><expr pos:start="217:16" pos:end="217:28"><name pos:start="217:16" pos:end="217:28"><name pos:start="217:16" pos:end="217:16">s</name><operator pos:start="217:17" pos:end="217:18">-&gt;</operator><name pos:start="217:19" pos:end="217:25">headers</name><index pos:start="217:26" pos:end="217:28">[<expr pos:start="217:27" pos:end="217:27"><literal type="number" pos:start="217:27" pos:end="217:27">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:30"><expr pos:start="219:5" pos:end="219:29"><call pos:start="219:5" pos:end="219:29"><name pos:start="219:5" pos:end="219:14">qemu_vfree</name><argument_list pos:start="219:15" pos:end="219:29">(<argument pos:start="219:16" pos:end="219:28"><expr pos:start="219:16" pos:end="219:28"><name pos:start="219:16" pos:end="219:28"><name pos:start="219:16" pos:end="219:16">s</name><operator pos:start="219:17" pos:end="219:18">-&gt;</operator><name pos:start="219:19" pos:end="219:25">headers</name><index pos:start="219:26" pos:end="219:28">[<expr pos:start="219:27" pos:end="219:27"><literal type="number" pos:start="219:27" pos:end="219:27">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:23"><expr pos:start="221:5" pos:end="221:22"><call pos:start="221:5" pos:end="221:22"><name pos:start="221:5" pos:end="221:14">qemu_vfree</name><argument_list pos:start="221:15" pos:end="221:22">(<argument pos:start="221:16" pos:end="221:21"><expr pos:start="221:16" pos:end="221:21"><name pos:start="221:16" pos:end="221:21"><name pos:start="221:16" pos:end="221:16">s</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:21">bat</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:34"><expr pos:start="223:5" pos:end="223:33"><call pos:start="223:5" pos:end="223:33"><name pos:start="223:5" pos:end="223:14">qemu_vfree</name><argument_list pos:start="223:15" pos:end="223:33">(<argument pos:start="223:16" pos:end="223:32"><expr pos:start="223:16" pos:end="223:32"><name pos:start="223:16" pos:end="223:32"><name pos:start="223:16" pos:end="223:16">s</name><operator pos:start="223:17" pos:end="223:18">-&gt;</operator><name pos:start="223:19" pos:end="223:32">parent_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="225:5" pos:end="225:15">return <expr pos:start="225:12" pos:end="225:14"><name pos:start="225:12" pos:end="225:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
