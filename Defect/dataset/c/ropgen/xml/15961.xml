<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15961.c" pos:tabs="8"><function pos:start="1:1" pos:end="255:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">abi_ulong</name></type> <name pos:start="1:18" pos:end="1:32">load_elf_interp</name><parameter_list pos:start="1:33" pos:end="7:62">(<parameter pos:start="1:34" pos:end="1:62"><decl pos:start="1:34" pos:end="1:62"><type pos:start="1:34" pos:end="1:62"><name pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:46">elfhdr</name></name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:62">interp_elf_ex</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:51">interpreter_fd</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:60"><decl pos:start="5:34" pos:end="5:60"><type pos:start="5:34" pos:end="5:60"><name pos:start="5:34" pos:end="5:42">abi_ulong</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:60">interp_load_addr</name></decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:61"><decl pos:start="7:34" pos:end="7:61"><type pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:37">char</name></type> <name pos:start="7:39" pos:end="7:61"><name pos:start="7:39" pos:end="7:46">bprm_buf</name><index pos:start="7:47" pos:end="7:61">[<expr pos:start="7:48" pos:end="7:60"><name pos:start="7:48" pos:end="7:60">BPRM_BUF_SIZE</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="255:1">{<block_content pos:start="11:5" pos:end="253:60">

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">elf_phdr</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:31">elf_phdata</name>  <init pos:start="11:34" pos:end="11:40">=  <expr pos:start="11:37" pos:end="11:40"><name pos:start="11:37" pos:end="11:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:23">load_addr</name></decl>, <decl pos:start="13:26" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:26" pos:end="13:34">load_bias</name></decl>, <decl pos:start="13:37" pos:end="13:42"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:37" pos:end="13:42">loaddr</name></decl>, <decl pos:start="13:45" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:13"/><name pos:start="13:45" pos:end="13:50">hiaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">retval</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">abi_ulong</name></type> <name pos:start="17:15" pos:end="17:19">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:14">bswap_ehdr</name><argument_list pos:start="23:15" pos:end="23:29">(<argument pos:start="23:16" pos:end="23:28"><expr pos:start="23:16" pos:end="23:28"><name pos:start="23:16" pos:end="23:28">interp_elf_ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:54">/* First of all, some simple consistency checks */</comment>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="31:50">(<expr pos:start="27:9" pos:end="31:49"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:22">interp_elf_ex</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:30">e_type</name></name> <operator pos:start="27:32" pos:end="27:33">!=</operator> <name pos:start="27:35" pos:end="27:41">ET_EXEC</name> <operator pos:start="27:43" pos:end="27:44">&amp;&amp;</operator>

         <name pos:start="29:10" pos:end="29:30"><name pos:start="29:10" pos:end="29:22">interp_elf_ex</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:30">e_type</name></name> <operator pos:start="29:32" pos:end="29:33">!=</operator> <name pos:start="29:35" pos:end="29:40">ET_DYN</name><operator pos:start="29:41" pos:end="29:41">)</operator> <operator pos:start="29:43" pos:end="29:44">||</operator>

        <operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:49"><name pos:start="31:10" pos:end="31:23">elf_check_arch</name><argument_list pos:start="31:24" pos:end="31:49">(<argument pos:start="31:25" pos:end="31:48"><expr pos:start="31:25" pos:end="31:48"><name pos:start="31:25" pos:end="31:48"><name pos:start="31:25" pos:end="31:37">interp_elf_ex</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:48">e_machine</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:52" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:33">

        <return pos:start="33:9" pos:end="33:33">return <expr pos:start="33:16" pos:end="33:32"><operator pos:start="33:16" pos:end="33:16">~</operator><operator pos:start="33:17" pos:end="33:17">(</operator><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:27">abi_ulong</name><operator pos:start="33:28" pos:end="33:28">)</operator><literal type="number" pos:start="33:29" pos:end="33:31">0UL</literal><operator pos:start="33:32" pos:end="33:32">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:51">/* Now read in all of the header information */</comment>



    <if_stmt pos:start="43:5" pos:end="45:31"><if pos:start="43:5" pos:end="45:31">if <condition pos:start="43:8" pos:end="43:76">(<expr pos:start="43:9" pos:end="43:75"><sizeof pos:start="43:9" pos:end="43:31">sizeof<argument_list pos:start="43:15" pos:end="43:31">(<argument pos:start="43:16" pos:end="43:30"><expr pos:start="43:16" pos:end="43:30">struct <name pos:start="43:23" pos:end="43:30">elf_phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="43:33" pos:end="43:33">*</operator> <name pos:start="43:35" pos:end="43:56"><name pos:start="43:35" pos:end="43:47">interp_elf_ex</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:56">e_phnum</name></name> <operator pos:start="43:58" pos:end="43:58">&gt;</operator> <name pos:start="43:60" pos:end="43:75">TARGET_PAGE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:31"><block_content pos:start="45:9" pos:end="45:31">

        <return pos:start="45:9" pos:end="45:31">return <expr pos:start="45:16" pos:end="45:30"><operator pos:start="45:16" pos:end="45:16">~</operator><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:26">abi_ulong</name><operator pos:start="45:27" pos:end="45:27">)</operator><literal type="number" pos:start="45:28" pos:end="45:30">0UL</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:65"><expr pos:start="49:5" pos:end="51:64"><name pos:start="49:5" pos:end="49:14">elf_phdata</name> <operator pos:start="49:16" pos:end="49:16">=</operator>  <operator pos:start="49:19" pos:end="49:19">(</operator>struct <name pos:start="49:27" pos:end="49:34">elf_phdr</name> <operator pos:start="49:36" pos:end="49:36">*</operator><operator pos:start="49:37" pos:end="49:37">)</operator>

        <call pos:start="51:9" pos:end="51:64"><name pos:start="51:9" pos:end="51:14">malloc</name><argument_list pos:start="51:15" pos:end="51:64">(<argument pos:start="51:16" pos:end="51:63"><expr pos:start="51:16" pos:end="51:63"><sizeof pos:start="51:16" pos:end="51:38">sizeof<argument_list pos:start="51:22" pos:end="51:38">(<argument pos:start="51:23" pos:end="51:37"><expr pos:start="51:23" pos:end="51:37">struct <name pos:start="51:30" pos:end="51:37">elf_phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="51:40" pos:end="51:40">*</operator> <name pos:start="51:42" pos:end="51:63"><name pos:start="51:42" pos:end="51:54">interp_elf_ex</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:63">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="57:33"><if pos:start="55:5" pos:end="57:33">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:19">elf_phdata</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:33"><block_content pos:start="57:9" pos:end="57:33">

        <return pos:start="57:9" pos:end="57:33">return <expr pos:start="57:16" pos:end="57:32"><operator pos:start="57:16" pos:end="57:16">~</operator><operator pos:start="57:17" pos:end="57:17">(</operator><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:27">abi_ulong</name><operator pos:start="57:28" pos:end="57:28">)</operator><literal type="number" pos:start="57:29" pos:end="57:31">0UL</literal><operator pos:start="57:32" pos:end="57:32">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="67:7">/*

     * If the size of this structure has changed, then punt, since

     * we will be doing the wrong thing.

     */</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:62">(<expr pos:start="69:9" pos:end="69:61"><name pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:21">interp_elf_ex</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:34">e_phentsize</name></name> <operator pos:start="69:36" pos:end="69:37">!=</operator> <sizeof pos:start="69:39" pos:end="69:61">sizeof<argument_list pos:start="69:45" pos:end="69:61">(<argument pos:start="69:46" pos:end="69:60"><expr pos:start="69:46" pos:end="69:60">struct <name pos:start="69:53" pos:end="69:60">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="69:64" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:33">

        <expr_stmt pos:start="71:9" pos:end="71:25"><expr pos:start="71:9" pos:end="71:24"><call pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:12">free</name><argument_list pos:start="71:13" pos:end="71:24">(<argument pos:start="71:14" pos:end="71:23"><expr pos:start="71:14" pos:end="71:23"><name pos:start="71:14" pos:end="71:23">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:33">return <expr pos:start="73:16" pos:end="73:32"><operator pos:start="73:16" pos:end="73:16">~</operator><operator pos:start="73:17" pos:end="73:17">(</operator><operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:27">abi_ulong</name><operator pos:start="73:28" pos:end="73:28">)</operator><literal type="number" pos:start="73:29" pos:end="73:31">0UL</literal><operator pos:start="73:32" pos:end="73:32">)</operator></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:57"><expr pos:start="79:5" pos:end="79:56"><name pos:start="79:5" pos:end="79:5">i</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <name pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:21">interp_elf_ex</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:30">e_phnum</name></name> <operator pos:start="79:32" pos:end="79:32">*</operator> <sizeof pos:start="79:34" pos:end="79:56">sizeof<argument_list pos:start="79:40" pos:end="79:56">(<argument pos:start="79:41" pos:end="79:55"><expr pos:start="79:41" pos:end="79:55">struct <name pos:start="79:48" pos:end="79:55">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="97:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:52">(<expr pos:start="81:9" pos:end="81:51"><name pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:21">interp_elf_ex</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:30">e_phoff</name></name> <operator pos:start="81:32" pos:end="81:32">+</operator> <name pos:start="81:34" pos:end="81:34">i</name> <operator pos:start="81:36" pos:end="81:37">&lt;=</operator> <name pos:start="81:39" pos:end="81:51">BPRM_BUF_SIZE</name></expr>)</condition> <block pos:start="81:54" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:65">

        <expr_stmt pos:start="83:9" pos:end="83:65"><expr pos:start="83:9" pos:end="83:64"><call pos:start="83:9" pos:end="83:64"><name pos:start="83:9" pos:end="83:14">memcpy</name><argument_list pos:start="83:15" pos:end="83:64">(<argument pos:start="83:16" pos:end="83:25"><expr pos:start="83:16" pos:end="83:25"><name pos:start="83:16" pos:end="83:25">elf_phdata</name></expr></argument>, <argument pos:start="83:28" pos:end="83:60"><expr pos:start="83:28" pos:end="83:60"><name pos:start="83:28" pos:end="83:35">bprm_buf</name> <operator pos:start="83:37" pos:end="83:37">+</operator> <name pos:start="83:39" pos:end="83:60"><name pos:start="83:39" pos:end="83:51">interp_elf_ex</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:60">e_phoff</name></name></expr></argument>, <argument pos:start="83:63" pos:end="83:63"><expr pos:start="83:63" pos:end="83:63"><name pos:start="83:63" pos:end="83:63">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="85:7" pos:end="97:5">else <block pos:start="85:12" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:9">

        <expr_stmt pos:start="87:9" pos:end="87:78"><expr pos:start="87:9" pos:end="87:77"><name pos:start="87:9" pos:end="87:14">retval</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:77"><name pos:start="87:18" pos:end="87:22">pread</name><argument_list pos:start="87:23" pos:end="87:77">(<argument pos:start="87:24" pos:end="87:37"><expr pos:start="87:24" pos:end="87:37"><name pos:start="87:24" pos:end="87:37">interpreter_fd</name></expr></argument>, <argument pos:start="87:40" pos:end="87:49"><expr pos:start="87:40" pos:end="87:49"><name pos:start="87:40" pos:end="87:49">elf_phdata</name></expr></argument>, <argument pos:start="87:52" pos:end="87:52"><expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">i</name></expr></argument>, <argument pos:start="87:55" pos:end="87:76"><expr pos:start="87:55" pos:end="87:76"><name pos:start="87:55" pos:end="87:76"><name pos:start="87:55" pos:end="87:67">interp_elf_ex</name><operator pos:start="87:68" pos:end="87:69">-&gt;</operator><name pos:start="87:70" pos:end="87:76">e_phoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:24">(<expr pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:18">retval</name> <operator pos:start="89:20" pos:end="89:21">!=</operator> <name pos:start="89:23" pos:end="89:23">i</name></expr>)</condition> <block pos:start="89:26" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:21">

            <expr_stmt pos:start="91:13" pos:end="91:38"><expr pos:start="91:13" pos:end="91:37"><call pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:18">perror</name><argument_list pos:start="91:19" pos:end="91:37">(<argument pos:start="91:20" pos:end="91:36"><expr pos:start="91:20" pos:end="91:36"><literal type="string" pos:start="91:20" pos:end="91:36">"load_elf_interp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:21"><expr pos:start="93:13" pos:end="93:20"><call pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:16">exit</name><argument_list pos:start="93:17" pos:end="93:20">(<argument pos:start="93:18" pos:end="93:19"><expr pos:start="93:18" pos:end="93:19"><operator pos:start="93:18" pos:end="93:18">-</operator><literal type="number" pos:start="93:19" pos:end="93:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:51"><expr pos:start="99:5" pos:end="99:50"><call pos:start="99:5" pos:end="99:50"><name pos:start="99:5" pos:end="99:14">bswap_phdr</name><argument_list pos:start="99:15" pos:end="99:50">(<argument pos:start="99:16" pos:end="99:25"><expr pos:start="99:16" pos:end="99:25"><name pos:start="99:16" pos:end="99:25">elf_phdata</name></expr></argument>, <argument pos:start="99:28" pos:end="99:49"><expr pos:start="99:28" pos:end="99:49"><name pos:start="99:28" pos:end="99:49"><name pos:start="99:28" pos:end="99:40">interp_elf_ex</name><operator pos:start="99:41" pos:end="99:42">-&gt;</operator><name pos:start="99:43" pos:end="99:49">e_phnum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="105:43">/* Find the maximum size of the image and allocate an appropriate

       amount of memory to handle that.  */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:28"><expr pos:start="107:5" pos:end="107:15"><name pos:start="107:5" pos:end="107:10">loaddr</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <operator pos:start="107:14" pos:end="107:14">-</operator><literal type="number" pos:start="107:15" pos:end="107:15">1</literal></expr><operator pos:start="107:16" pos:end="107:16">,</operator> <expr pos:start="107:18" pos:end="107:27"><name pos:start="107:18" pos:end="107:23">hiaddr</name> <operator pos:start="107:25" pos:end="107:25">=</operator> <literal type="number" pos:start="107:27" pos:end="107:27">0</literal></expr>;</expr_stmt>

    <for pos:start="109:5" pos:end="131:5">for <control pos:start="109:9" pos:end="109:48">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:42"><name pos:start="109:21" pos:end="109:33">interp_elf_ex</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:42">e_phnum</name></name></expr>;</condition> <incr pos:start="109:45" pos:end="109:47"><expr pos:start="109:45" pos:end="109:47"><operator pos:start="109:45" pos:end="109:46">++</operator><name pos:start="109:47" pos:end="109:47">i</name></expr></incr>)</control> <block pos:start="109:50" pos:end="131:5">{<block_content pos:start="111:9" pos:end="129:9">

        <if_stmt pos:start="111:9" pos:end="129:9"><if pos:start="111:9" pos:end="129:9">if <condition pos:start="111:12" pos:end="111:44">(<expr pos:start="111:13" pos:end="111:43"><name pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:22">elf_phdata</name><index pos:start="111:23" pos:end="111:25">[<expr pos:start="111:24" pos:end="111:24"><name pos:start="111:24" pos:end="111:24">i</name></expr>]</index></name><operator pos:start="111:26" pos:end="111:26">.</operator><name pos:start="111:27" pos:end="111:32">p_type</name> <operator pos:start="111:34" pos:end="111:35">==</operator> <name pos:start="111:37" pos:end="111:43">PT_LOAD</name></expr>)</condition> <block pos:start="111:46" pos:end="129:9">{<block_content pos:start="113:13" pos:end="127:13">

            <decl_stmt pos:start="113:13" pos:end="113:48"><decl pos:start="113:13" pos:end="113:47"><type pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:21">abi_ulong</name></type> <name pos:start="113:23" pos:end="113:23">a</name> <init pos:start="113:25" pos:end="113:47">= <expr pos:start="113:27" pos:end="113:47"><name pos:start="113:27" pos:end="113:39"><name pos:start="113:27" pos:end="113:36">elf_phdata</name><index pos:start="113:37" pos:end="113:39">[<expr pos:start="113:38" pos:end="113:38"><name pos:start="113:38" pos:end="113:38">i</name></expr>]</index></name><operator pos:start="113:40" pos:end="113:40">.</operator><name pos:start="113:41" pos:end="113:47">p_vaddr</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="115:13" pos:end="119:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:27">(<expr pos:start="115:17" pos:end="115:26"><name pos:start="115:17" pos:end="115:17">a</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:26">loaddr</name></expr>)</condition> <block pos:start="115:29" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:27">

                <expr_stmt pos:start="117:17" pos:end="117:27"><expr pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:22">loaddr</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:26">a</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:39"><expr pos:start="121:13" pos:end="121:38"><name pos:start="121:13" pos:end="121:13">a</name> <operator pos:start="121:15" pos:end="121:16">+=</operator> <name pos:start="121:18" pos:end="121:30"><name pos:start="121:18" pos:end="121:27">elf_phdata</name><index pos:start="121:28" pos:end="121:30">[<expr pos:start="121:29" pos:end="121:29"><name pos:start="121:29" pos:end="121:29">i</name></expr>]</index></name><operator pos:start="121:31" pos:end="121:31">.</operator><name pos:start="121:32" pos:end="121:38">p_memsz</name></expr>;</expr_stmt>

            <if_stmt pos:start="123:13" pos:end="127:13"><if pos:start="123:13" pos:end="127:13">if <condition pos:start="123:16" pos:end="123:27">(<expr pos:start="123:17" pos:end="123:26"><name pos:start="123:17" pos:end="123:17">a</name> <operator pos:start="123:19" pos:end="123:19">&gt;</operator> <name pos:start="123:21" pos:end="123:26">hiaddr</name></expr>)</condition> <block pos:start="123:29" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:27">

                <expr_stmt pos:start="125:17" pos:end="125:27"><expr pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:22">hiaddr</name> <operator pos:start="125:24" pos:end="125:24">=</operator> <name pos:start="125:26" pos:end="125:26">a</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="135:5" pos:end="135:23"><expr pos:start="135:5" pos:end="135:22"><name pos:start="135:5" pos:end="135:13">load_addr</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:22">loaddr</name></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="163:5"><if pos:start="137:5" pos:end="163:5">if <condition pos:start="137:8" pos:end="137:40">(<expr pos:start="137:9" pos:end="137:39"><name pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:21">interp_elf_ex</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:29">e_type</name></name> <operator pos:start="137:31" pos:end="137:32">==</operator> <name pos:start="137:34" pos:end="137:39">ET_DYN</name></expr>)</condition> <block pos:start="137:42" pos:end="163:5">{<block_content pos:start="149:9" pos:end="161:9">

        <comment type="block" pos:start="139:9" pos:end="147:44">/* The image indicates that it can be loaded anywhere.  Find a

           location that can hold the memory space required.  If the

           image is pre-linked, LOADDR will be non-zero.  Since we do

           not supply MAP_FIXED here we'll use that address if and

           only if it remains available.  */</comment>

        <expr_stmt pos:start="149:9" pos:end="153:39"><expr pos:start="149:9" pos:end="153:38"><name pos:start="149:9" pos:end="149:17">load_addr</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <call pos:start="149:21" pos:end="153:38"><name pos:start="149:21" pos:end="149:31">target_mmap</name><argument_list pos:start="149:32" pos:end="153:38">(<argument pos:start="149:33" pos:end="149:38"><expr pos:start="149:33" pos:end="149:38"><name pos:start="149:33" pos:end="149:38">loaddr</name></expr></argument>, <argument pos:start="149:41" pos:end="149:55"><expr pos:start="149:41" pos:end="149:55"><name pos:start="149:41" pos:end="149:46">hiaddr</name> <operator pos:start="149:48" pos:end="149:48">-</operator> <name pos:start="149:50" pos:end="149:55">loaddr</name></expr></argument>, <argument pos:start="149:58" pos:end="149:66"><expr pos:start="149:58" pos:end="149:66"><name pos:start="149:58" pos:end="149:66">PROT_NONE</name></expr></argument>,

                                <argument pos:start="151:33" pos:end="151:70"><expr pos:start="151:33" pos:end="151:70"><name pos:start="151:33" pos:end="151:43">MAP_PRIVATE</name> <operator pos:start="151:45" pos:end="151:45">|</operator> <name pos:start="151:47" pos:end="151:54">MAP_ANON</name> <operator pos:start="151:56" pos:end="151:56">|</operator> <name pos:start="151:58" pos:end="151:70">MAP_NORESERVE</name></expr></argument>,

                                <argument pos:start="153:33" pos:end="153:34"><expr pos:start="153:33" pos:end="153:34"><operator pos:start="153:33" pos:end="153:33">-</operator><literal type="number" pos:start="153:34" pos:end="153:34">1</literal></expr></argument>, <argument pos:start="153:37" pos:end="153:37"><expr pos:start="153:37" pos:end="153:37"><literal type="number" pos:start="153:37" pos:end="153:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:28">(<expr pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:21">load_addr</name> <operator pos:start="155:23" pos:end="155:24">==</operator> <operator pos:start="155:26" pos:end="155:26">-</operator><literal type="number" pos:start="155:27" pos:end="155:27">1</literal></expr>)</condition> <block pos:start="155:30" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:21">

            <expr_stmt pos:start="157:13" pos:end="157:27"><expr pos:start="157:13" pos:end="157:26"><call pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:18">perror</name><argument_list pos:start="157:19" pos:end="157:26">(<argument pos:start="157:20" pos:end="157:25"><expr pos:start="157:20" pos:end="157:25"><literal type="string" pos:start="157:20" pos:end="157:25">"mmap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:21"><expr pos:start="159:13" pos:end="159:20"><call pos:start="159:13" pos:end="159:20"><name pos:start="159:13" pos:end="159:16">exit</name><argument_list pos:start="159:17" pos:end="159:20">(<argument pos:start="159:18" pos:end="159:19"><expr pos:start="159:18" pos:end="159:19"><operator pos:start="159:18" pos:end="159:18">-</operator><literal type="number" pos:start="159:19" pos:end="159:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:35"><expr pos:start="165:5" pos:end="165:34"><name pos:start="165:5" pos:end="165:13">load_bias</name> <operator pos:start="165:15" pos:end="165:15">=</operator> <name pos:start="165:17" pos:end="165:25">load_addr</name> <operator pos:start="165:27" pos:end="165:27">-</operator> <name pos:start="165:29" pos:end="165:34">loaddr</name></expr>;</expr_stmt>



    <for pos:start="169:5" pos:end="233:5">for <control pos:start="169:9" pos:end="169:48">(<init pos:start="169:10" pos:end="169:15"><expr pos:start="169:10" pos:end="169:14"><name pos:start="169:10" pos:end="169:10">i</name> <operator pos:start="169:12" pos:end="169:12">=</operator> <literal type="number" pos:start="169:14" pos:end="169:14">0</literal></expr>;</init> <condition pos:start="169:17" pos:end="169:43"><expr pos:start="169:17" pos:end="169:42"><name pos:start="169:17" pos:end="169:17">i</name> <operator pos:start="169:19" pos:end="169:19">&lt;</operator> <name pos:start="169:21" pos:end="169:42"><name pos:start="169:21" pos:end="169:33">interp_elf_ex</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:42">e_phnum</name></name></expr>;</condition> <incr pos:start="169:45" pos:end="169:47"><expr pos:start="169:45" pos:end="169:47"><name pos:start="169:45" pos:end="169:45">i</name><operator pos:start="169:46" pos:end="169:47">++</operator></expr></incr>)</control> <block pos:start="169:50" pos:end="233:5">{<block_content pos:start="171:9" pos:end="231:9">

        <decl_stmt pos:start="171:9" pos:end="171:48"><decl pos:start="171:9" pos:end="171:47"><type pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:14">struct</name> <name pos:start="171:16" pos:end="171:23">elf_phdr</name></name> <modifier pos:start="171:25" pos:end="171:25">*</modifier></type><name pos:start="171:26" pos:end="171:30">eppnt</name> <init pos:start="171:32" pos:end="171:47">= <expr pos:start="171:34" pos:end="171:47"><name pos:start="171:34" pos:end="171:43">elf_phdata</name> <operator pos:start="171:45" pos:end="171:45">+</operator> <name pos:start="171:47" pos:end="171:47">i</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="173:9" pos:end="231:9"><if pos:start="173:9" pos:end="231:9">if <condition pos:start="173:12" pos:end="173:37">(<expr pos:start="173:13" pos:end="173:36"><name pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:17">eppnt</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:25">p_type</name></name> <operator pos:start="173:27" pos:end="173:28">==</operator> <name pos:start="173:30" pos:end="173:36">PT_LOAD</name></expr>)</condition> <block pos:start="173:39" pos:end="231:9">{<block_content pos:start="175:13" pos:end="229:13">

            <decl_stmt pos:start="175:13" pos:end="175:68"><decl pos:start="175:13" pos:end="175:27"><type pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:21">abi_ulong</name></type> <name pos:start="175:23" pos:end="175:27">vaddr</name></decl>, <decl pos:start="175:30" pos:end="175:37"><type ref="prev" pos:start="175:13" pos:end="175:21"/><name pos:start="175:30" pos:end="175:37">vaddr_po</name></decl>, <decl pos:start="175:40" pos:end="175:47"><type ref="prev" pos:start="175:13" pos:end="175:21"/><name pos:start="175:40" pos:end="175:47">vaddr_ps</name></decl>, <decl pos:start="175:50" pos:end="175:57"><type ref="prev" pos:start="175:13" pos:end="175:21"/><name pos:start="175:50" pos:end="175:57">vaddr_ef</name></decl>, <decl pos:start="175:60" pos:end="175:67"><type ref="prev" pos:start="175:13" pos:end="175:21"/><name pos:start="175:60" pos:end="175:67">vaddr_em</name></decl>;</decl_stmt>

            <decl_stmt pos:start="177:13" pos:end="177:29"><decl pos:start="177:13" pos:end="177:28"><type pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:15">int</name></type> <name pos:start="177:17" pos:end="177:24">elf_prot</name> <init pos:start="177:26" pos:end="177:28">= <expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="181:13" pos:end="181:61"><if pos:start="181:13" pos:end="181:61">if <condition pos:start="181:16" pos:end="181:38">(<expr pos:start="181:17" pos:end="181:37"><name pos:start="181:17" pos:end="181:30"><name pos:start="181:17" pos:end="181:21">eppnt</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:30">p_flags</name></name> <operator pos:start="181:32" pos:end="181:32">&amp;</operator> <name pos:start="181:34" pos:end="181:37">PF_R</name></expr>)</condition><block type="pseudo" pos:start="181:40" pos:end="181:61"><block_content pos:start="181:40" pos:end="181:61"> <expr_stmt pos:start="181:40" pos:end="181:61"><expr pos:start="181:40" pos:end="181:60"><name pos:start="181:40" pos:end="181:47">elf_prot</name> <operator pos:start="181:49" pos:end="181:49">=</operator>  <name pos:start="181:52" pos:end="181:60">PROT_READ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="183:13" pos:end="183:62"><if pos:start="183:13" pos:end="183:62">if <condition pos:start="183:16" pos:end="183:38">(<expr pos:start="183:17" pos:end="183:37"><name pos:start="183:17" pos:end="183:30"><name pos:start="183:17" pos:end="183:21">eppnt</name><operator pos:start="183:22" pos:end="183:23">-&gt;</operator><name pos:start="183:24" pos:end="183:30">p_flags</name></name> <operator pos:start="183:32" pos:end="183:32">&amp;</operator> <name pos:start="183:34" pos:end="183:37">PF_W</name></expr>)</condition><block type="pseudo" pos:start="183:40" pos:end="183:62"><block_content pos:start="183:40" pos:end="183:62"> <expr_stmt pos:start="183:40" pos:end="183:62"><expr pos:start="183:40" pos:end="183:61"><name pos:start="183:40" pos:end="183:47">elf_prot</name> <operator pos:start="183:49" pos:end="183:50">|=</operator> <name pos:start="183:52" pos:end="183:61">PROT_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="185:13" pos:end="185:61"><if pos:start="185:13" pos:end="185:61">if <condition pos:start="185:16" pos:end="185:38">(<expr pos:start="185:17" pos:end="185:37"><name pos:start="185:17" pos:end="185:30"><name pos:start="185:17" pos:end="185:21">eppnt</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:30">p_flags</name></name> <operator pos:start="185:32" pos:end="185:32">&amp;</operator> <name pos:start="185:34" pos:end="185:37">PF_X</name></expr>)</condition><block type="pseudo" pos:start="185:40" pos:end="185:61"><block_content pos:start="185:40" pos:end="185:61"> <expr_stmt pos:start="185:40" pos:end="185:61"><expr pos:start="185:40" pos:end="185:60"><name pos:start="185:40" pos:end="185:47">elf_prot</name> <operator pos:start="185:49" pos:end="185:50">|=</operator> <name pos:start="185:52" pos:end="185:60">PROT_EXEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="189:13" pos:end="189:47"><expr pos:start="189:13" pos:end="189:46"><name pos:start="189:13" pos:end="189:17">vaddr</name> <operator pos:start="189:19" pos:end="189:19">=</operator> <name pos:start="189:21" pos:end="189:29">load_bias</name> <operator pos:start="189:31" pos:end="189:31">+</operator> <name pos:start="189:33" pos:end="189:46"><name pos:start="189:33" pos:end="189:37">eppnt</name><operator pos:start="189:38" pos:end="189:39">-&gt;</operator><name pos:start="189:40" pos:end="189:46">p_vaddr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:52"><expr pos:start="191:13" pos:end="191:51"><name pos:start="191:13" pos:end="191:20">vaddr_po</name> <operator pos:start="191:22" pos:end="191:22">=</operator> <call pos:start="191:24" pos:end="191:51"><name pos:start="191:24" pos:end="191:44">TARGET_ELF_PAGEOFFSET</name><argument_list pos:start="191:45" pos:end="191:51">(<argument pos:start="191:46" pos:end="191:50"><expr pos:start="191:46" pos:end="191:50"><name pos:start="191:46" pos:end="191:50">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:51"><expr pos:start="193:13" pos:end="193:50"><name pos:start="193:13" pos:end="193:20">vaddr_ps</name> <operator pos:start="193:22" pos:end="193:22">=</operator> <call pos:start="193:24" pos:end="193:50"><name pos:start="193:24" pos:end="193:43">TARGET_ELF_PAGESTART</name><argument_list pos:start="193:44" pos:end="193:50">(<argument pos:start="193:45" pos:end="193:49"><expr pos:start="193:45" pos:end="193:49"><name pos:start="193:45" pos:end="193:49">vaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="197:13" pos:end="201:76"><expr pos:start="197:13" pos:end="201:75"><name pos:start="197:13" pos:end="197:17">error</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <call pos:start="197:21" pos:end="201:75"><name pos:start="197:21" pos:end="197:31">target_mmap</name><argument_list pos:start="197:32" pos:end="201:75">(<argument pos:start="197:33" pos:end="197:40"><expr pos:start="197:33" pos:end="197:40"><name pos:start="197:33" pos:end="197:40">vaddr_ps</name></expr></argument>, <argument pos:start="197:43" pos:end="197:68"><expr pos:start="197:43" pos:end="197:68"><name pos:start="197:43" pos:end="197:57"><name pos:start="197:43" pos:end="197:47">eppnt</name><operator pos:start="197:48" pos:end="197:49">-&gt;</operator><name pos:start="197:50" pos:end="197:57">p_filesz</name></name> <operator pos:start="197:59" pos:end="197:59">+</operator> <name pos:start="197:61" pos:end="197:68">vaddr_po</name></expr></argument>,

                                <argument pos:start="199:33" pos:end="199:40"><expr pos:start="199:33" pos:end="199:40"><name pos:start="199:33" pos:end="199:40">elf_prot</name></expr></argument>, <argument pos:start="199:43" pos:end="199:65"><expr pos:start="199:43" pos:end="199:65"><name pos:start="199:43" pos:end="199:53">MAP_PRIVATE</name> <operator pos:start="199:55" pos:end="199:55">|</operator> <name pos:start="199:57" pos:end="199:65">MAP_FIXED</name></expr></argument>,

                                <argument pos:start="201:33" pos:end="201:46"><expr pos:start="201:33" pos:end="201:46"><name pos:start="201:33" pos:end="201:46">interpreter_fd</name></expr></argument>, <argument pos:start="201:49" pos:end="201:74"><expr pos:start="201:49" pos:end="201:74"><name pos:start="201:49" pos:end="201:63"><name pos:start="201:49" pos:end="201:53">eppnt</name><operator pos:start="201:54" pos:end="201:55">-&gt;</operator><name pos:start="201:56" pos:end="201:63">p_offset</name></name> <operator pos:start="201:65" pos:end="201:65">-</operator> <name pos:start="201:67" pos:end="201:74">vaddr_po</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="213:13"><if pos:start="203:13" pos:end="213:13">if <condition pos:start="203:16" pos:end="203:28">(<expr pos:start="203:17" pos:end="203:27"><name pos:start="203:17" pos:end="203:21">error</name> <operator pos:start="203:23" pos:end="203:24">==</operator> <operator pos:start="203:26" pos:end="203:26">-</operator><literal type="number" pos:start="203:27" pos:end="203:27">1</literal></expr>)</condition> <block pos:start="203:30" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:41">

                <comment type="block" pos:start="205:17" pos:end="205:32">/* Real error */</comment>

                <expr_stmt pos:start="207:17" pos:end="207:38"><expr pos:start="207:17" pos:end="207:37"><call pos:start="207:17" pos:end="207:37"><name pos:start="207:17" pos:end="207:21">close</name><argument_list pos:start="207:22" pos:end="207:37">(<argument pos:start="207:23" pos:end="207:36"><expr pos:start="207:23" pos:end="207:36"><name pos:start="207:23" pos:end="207:36">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:33"><expr pos:start="209:17" pos:end="209:32"><call pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:20">free</name><argument_list pos:start="209:21" pos:end="209:32">(<argument pos:start="209:22" pos:end="209:31"><expr pos:start="209:22" pos:end="209:31"><name pos:start="209:22" pos:end="209:31">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="211:17" pos:end="211:41">return <expr pos:start="211:24" pos:end="211:40"><operator pos:start="211:24" pos:end="211:24">~</operator><operator pos:start="211:25" pos:end="211:25">(</operator><operator pos:start="211:26" pos:end="211:26">(</operator><name pos:start="211:27" pos:end="211:35">abi_ulong</name><operator pos:start="211:36" pos:end="211:36">)</operator><literal type="number" pos:start="211:37" pos:end="211:39">0UL</literal><operator pos:start="211:40" pos:end="211:40">)</operator></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:47"><expr pos:start="217:13" pos:end="217:46"><name pos:start="217:13" pos:end="217:20">vaddr_ef</name> <operator pos:start="217:22" pos:end="217:22">=</operator> <name pos:start="217:24" pos:end="217:28">vaddr</name> <operator pos:start="217:30" pos:end="217:30">+</operator> <name pos:start="217:32" pos:end="217:46"><name pos:start="217:32" pos:end="217:36">eppnt</name><operator pos:start="217:37" pos:end="217:38">-&gt;</operator><name pos:start="217:39" pos:end="217:46">p_filesz</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:46"><expr pos:start="219:13" pos:end="219:45"><name pos:start="219:13" pos:end="219:20">vaddr_em</name> <operator pos:start="219:22" pos:end="219:22">=</operator> <name pos:start="219:24" pos:end="219:28">vaddr</name> <operator pos:start="219:30" pos:end="219:30">+</operator> <name pos:start="219:32" pos:end="219:45"><name pos:start="219:32" pos:end="219:36">eppnt</name><operator pos:start="219:37" pos:end="219:38">-&gt;</operator><name pos:start="219:39" pos:end="219:45">p_memsz</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="223:13" pos:end="223:79">/* If the load segment requests extra zeros (e.g. bss), map it.  */</comment>

            <if_stmt pos:start="225:13" pos:end="229:13"><if pos:start="225:13" pos:end="229:13">if <condition pos:start="225:16" pos:end="225:36">(<expr pos:start="225:17" pos:end="225:35"><name pos:start="225:17" pos:end="225:24">vaddr_ef</name> <operator pos:start="225:26" pos:end="225:26">&lt;</operator> <name pos:start="225:28" pos:end="225:35">vaddr_em</name></expr>)</condition> <block pos:start="225:38" pos:end="229:13">{<block_content pos:start="227:17" pos:end="227:55">

                <expr_stmt pos:start="227:17" pos:end="227:55"><expr pos:start="227:17" pos:end="227:54"><call pos:start="227:17" pos:end="227:54"><name pos:start="227:17" pos:end="227:24">zero_bss</name><argument_list pos:start="227:25" pos:end="227:54">(<argument pos:start="227:26" pos:end="227:33"><expr pos:start="227:26" pos:end="227:33"><name pos:start="227:26" pos:end="227:33">vaddr_ef</name></expr></argument>, <argument pos:start="227:36" pos:end="227:43"><expr pos:start="227:36" pos:end="227:43"><name pos:start="227:36" pos:end="227:43">vaddr_em</name></expr></argument>, <argument pos:start="227:46" pos:end="227:53"><expr pos:start="227:46" pos:end="227:53"><name pos:start="227:46" pos:end="227:53">elf_prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="237:5" pos:end="241:5"><if pos:start="237:5" pos:end="241:5">if <condition pos:start="237:8" pos:end="237:27">(<expr pos:start="237:9" pos:end="237:26"><call pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:24">qemu_log_enabled</name><argument_list pos:start="237:25" pos:end="237:26">()</argument_list></call></expr>)</condition> <block pos:start="237:29" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:63">

        <expr_stmt pos:start="239:9" pos:end="239:63"><expr pos:start="239:9" pos:end="239:62"><call pos:start="239:9" pos:end="239:62"><name pos:start="239:9" pos:end="239:20">load_symbols</name><argument_list pos:start="239:21" pos:end="239:62">(<argument pos:start="239:22" pos:end="239:34"><expr pos:start="239:22" pos:end="239:34"><name pos:start="239:22" pos:end="239:34">interp_elf_ex</name></expr></argument>, <argument pos:start="239:37" pos:end="239:50"><expr pos:start="239:37" pos:end="239:50"><name pos:start="239:37" pos:end="239:50">interpreter_fd</name></expr></argument>, <argument pos:start="239:53" pos:end="239:61"><expr pos:start="239:53" pos:end="239:61"><name pos:start="239:53" pos:end="239:61">load_bias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:26"><expr pos:start="245:5" pos:end="245:25"><call pos:start="245:5" pos:end="245:25"><name pos:start="245:5" pos:end="245:9">close</name><argument_list pos:start="245:10" pos:end="245:25">(<argument pos:start="245:11" pos:end="245:24"><expr pos:start="245:11" pos:end="245:24"><name pos:start="245:11" pos:end="245:24">interpreter_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:21"><expr pos:start="247:5" pos:end="247:20"><call pos:start="247:5" pos:end="247:20"><name pos:start="247:5" pos:end="247:8">free</name><argument_list pos:start="247:9" pos:end="247:20">(<argument pos:start="247:10" pos:end="247:19"><expr pos:start="247:10" pos:end="247:19"><name pos:start="247:10" pos:end="247:19">elf_phdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:34"><expr pos:start="251:5" pos:end="251:33"><operator pos:start="251:5" pos:end="251:5">*</operator><name pos:start="251:6" pos:end="251:21">interp_load_addr</name> <operator pos:start="251:23" pos:end="251:23">=</operator> <name pos:start="251:25" pos:end="251:33">load_addr</name></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:60">return <expr pos:start="253:12" pos:end="253:59"><operator pos:start="253:12" pos:end="253:12">(</operator><operator pos:start="253:13" pos:end="253:13">(</operator><name pos:start="253:14" pos:end="253:22">abi_ulong</name><operator pos:start="253:23" pos:end="253:23">)</operator> <name pos:start="253:25" pos:end="253:46"><name pos:start="253:25" pos:end="253:37">interp_elf_ex</name><operator pos:start="253:38" pos:end="253:39">-&gt;</operator><name pos:start="253:40" pos:end="253:46">e_entry</name></name><operator pos:start="253:47" pos:end="253:47">)</operator> <operator pos:start="253:49" pos:end="253:49">+</operator> <name pos:start="253:51" pos:end="253:59">load_bias</name></expr>;</return>

</block_content>}</block></function>
</unit>
