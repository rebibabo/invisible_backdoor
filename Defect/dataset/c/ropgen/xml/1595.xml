<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1595.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">rtas_ibm_change_msi</name><parameter_list pos:start="1:32" pos:end="7:50">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:42">PowerPCCPU</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">cpu</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:73"><decl pos:start="1:50" pos:end="1:73"><type pos:start="1:50" pos:end="1:73"><name pos:start="1:50" pos:end="1:66">sPAPRMachineState</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:73">spapr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:40">uint32_t</name></type> <name pos:start="3:42" pos:end="3:46">token</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:62">nargs</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:49"><decl pos:start="5:33" pos:end="5:49"><type pos:start="5:33" pos:end="5:49"><name pos:start="5:33" pos:end="5:44">target_ulong</name></type> <name pos:start="5:46" pos:end="5:49">args</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:59">uint32_t</name></type> <name pos:start="5:61" pos:end="5:64">nret</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:49"><decl pos:start="7:33" pos:end="7:49"><type pos:start="7:33" pos:end="7:49"><name pos:start="7:33" pos:end="7:44">target_ulong</name></type> <name pos:start="7:46" pos:end="7:49">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="235:1">{<block_content pos:start="11:5" pos:end="233:73">

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">config_addr</name> <init pos:start="11:26" pos:end="11:43">= <expr pos:start="11:28" pos:end="11:43"><call pos:start="11:28" pos:end="11:43"><name pos:start="11:28" pos:end="11:34">rtas_ld</name><argument_list pos:start="11:35" pos:end="11:43">(<argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">args</name></expr></argument>, <argument pos:start="11:42" pos:end="11:42"><expr pos:start="11:42" pos:end="11:42"><literal type="number" pos:start="11:42" pos:end="11:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">buid</name> <init pos:start="13:19" pos:end="13:37">= <expr pos:start="13:21" pos:end="13:37"><call pos:start="13:21" pos:end="13:37"><name pos:start="13:21" pos:end="13:28">rtas_ldq</name><argument_list pos:start="13:29" pos:end="13:37">(<argument pos:start="13:30" pos:end="13:33"><expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">args</name></expr></argument>, <argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">func</name> <init pos:start="15:23" pos:end="15:40">= <expr pos:start="15:25" pos:end="15:40"><call pos:start="15:25" pos:end="15:40"><name pos:start="15:25" pos:end="15:31">rtas_ld</name><argument_list pos:start="15:32" pos:end="15:40">(<argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">args</name></expr></argument>, <argument pos:start="15:39" pos:end="15:39"><expr pos:start="15:39" pos:end="15:39"><literal type="number" pos:start="15:39" pos:end="15:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:24">req_num</name> <init pos:start="17:26" pos:end="17:43">= <expr pos:start="17:28" pos:end="17:43"><call pos:start="17:28" pos:end="17:43"><name pos:start="17:28" pos:end="17:34">rtas_ld</name><argument_list pos:start="17:35" pos:end="17:43">(<argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">args</name></expr></argument>, <argument pos:start="17:42" pos:end="17:42"><expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:46" pos:end="17:66">/* 0 == remove all */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">seq_num</name> <init pos:start="19:26" pos:end="19:43">= <expr pos:start="19:28" pos:end="19:43"><call pos:start="19:28" pos:end="19:43"><name pos:start="19:28" pos:end="19:34">rtas_ld</name><argument_list pos:start="19:35" pos:end="19:43">(<argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">args</name></expr></argument>, <argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><literal type="number" pos:start="19:42" pos:end="19:42">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:30">ret_intr_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:20">irq</name></decl>, <decl pos:start="23:23" pos:end="23:34"><type ref="prev" pos:start="23:5" pos:end="23:16"/><name pos:start="23:23" pos:end="23:30">max_irqs</name> <init pos:start="23:32" pos:end="23:34">= <expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">sPAPRPHBState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">phb</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">PCIDevice</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:19">pdev</name> <init pos:start="27:21" pos:end="27:26">= <expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:17">spapr_pci_msi</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:22">msi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:7">int</name> <modifier pos:start="31:9" pos:end="31:9">*</modifier></type><name pos:start="31:10" pos:end="31:24">config_addr_key</name></decl>;</decl_stmt>



    <switch pos:start="35:5" pos:end="59:5">switch <condition pos:start="35:12" pos:end="35:17">(<expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">func</name></expr>)</condition> <block pos:start="35:19" pos:end="59:5">{<block_content pos:start="37:5" pos:end="57:15">

    <case pos:start="37:5" pos:end="37:28">case <expr pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:27">RTAS_CHANGE_MSI_FN</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:24">case <expr pos:start="39:10" pos:end="39:23"><name pos:start="39:10" pos:end="39:23">RTAS_CHANGE_FN</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:21">ret_intr_type</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:37">RTAS_TYPE_MSI</name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:29">case <expr pos:start="45:10" pos:end="45:28"><name pos:start="45:10" pos:end="45:28">RTAS_CHANGE_MSIX_FN</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:21">ret_intr_type</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <name pos:start="47:25" pos:end="47:38">RTAS_TYPE_MSIX</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="53:73"><expr pos:start="53:9" pos:end="53:72"><call pos:start="53:9" pos:end="53:72"><name pos:start="53:9" pos:end="53:20">error_report</name><argument_list pos:start="53:21" pos:end="53:72">(<argument pos:start="53:22" pos:end="53:65"><expr pos:start="53:22" pos:end="53:65"><literal type="string" pos:start="53:22" pos:end="53:65">"rtas_ibm_change_msi(%u) is not implemented"</literal></expr></argument>, <argument pos:start="53:68" pos:end="53:71"><expr pos:start="53:68" pos:end="53:71"><name pos:start="53:68" pos:end="53:71">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><call pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:15">rtas_st</name><argument_list pos:start="55:16" pos:end="55:46">(<argument pos:start="55:17" pos:end="55:20"><expr pos:start="55:17" pos:end="55:20"><name pos:start="55:17" pos:end="55:20">rets</name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:45"><expr pos:start="55:26" pos:end="55:45"><name pos:start="55:26" pos:end="55:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="63:5" pos:end="63:28">/* Fins sPAPRPHBState */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:42"><expr pos:start="65:5" pos:end="65:41"><name pos:start="65:5" pos:end="65:7">phb</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:41"><name pos:start="65:11" pos:end="65:28">spapr_pci_find_phb</name><argument_list pos:start="65:29" pos:end="65:41">(<argument pos:start="65:30" pos:end="65:34"><expr pos:start="65:30" pos:end="65:34"><name pos:start="65:30" pos:end="65:34">spapr</name></expr></argument>, <argument pos:start="65:37" pos:end="65:40"><expr pos:start="65:37" pos:end="65:40"><name pos:start="65:37" pos:end="65:40">buid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:12">(<expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">phb</name></expr>)</condition> <block pos:start="67:14" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:60">

        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:12">pdev</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <call pos:start="69:16" pos:end="69:59"><name pos:start="69:16" pos:end="69:33">spapr_pci_find_dev</name><argument_list pos:start="69:34" pos:end="69:59">(<argument pos:start="69:35" pos:end="69:39"><expr pos:start="69:35" pos:end="69:39"><name pos:start="69:35" pos:end="69:39">spapr</name></expr></argument>, <argument pos:start="69:42" pos:end="69:45"><expr pos:start="69:42" pos:end="69:45"><name pos:start="69:42" pos:end="69:45">buid</name></expr></argument>, <argument pos:start="69:48" pos:end="69:58"><expr pos:start="69:48" pos:end="69:58"><name pos:start="69:48" pos:end="69:58">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="79:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">phb</name> <operator pos:start="73:14" pos:end="73:15">||</operator> <operator pos:start="73:17" pos:end="73:17">!</operator><name pos:start="73:18" pos:end="73:21">pdev</name></expr>)</condition> <block pos:start="73:24" pos:end="79:5">{<block_content pos:start="75:9" pos:end="77:15">

        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><call pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:15">rtas_st</name><argument_list pos:start="75:16" pos:end="75:46">(<argument pos:start="75:17" pos:end="75:20"><expr pos:start="75:17" pos:end="75:20"><name pos:start="75:17" pos:end="75:20">rets</name></expr></argument>, <argument pos:start="75:23" pos:end="75:23"><expr pos:start="75:23" pos:end="75:23"><literal type="number" pos:start="75:23" pos:end="75:23">0</literal></expr></argument>, <argument pos:start="75:26" pos:end="75:45"><expr pos:start="75:26" pos:end="75:45"><name pos:start="75:26" pos:end="75:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:24">/* Releasing MSIs */</comment>

    <if_stmt pos:start="85:5" pos:end="127:5"><if pos:start="85:5" pos:end="127:5">if <condition pos:start="85:8" pos:end="85:17">(<expr pos:start="85:9" pos:end="85:16"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:16">req_num</name></expr>)</condition> <block pos:start="85:19" pos:end="127:5">{<block_content pos:start="87:9" pos:end="125:15">

        <expr_stmt pos:start="87:9" pos:end="87:76"><expr pos:start="87:9" pos:end="87:75"><name pos:start="87:9" pos:end="87:11">msi</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <operator pos:start="87:15" pos:end="87:15">(</operator><name pos:start="87:16" pos:end="87:28">spapr_pci_msi</name> <operator pos:start="87:30" pos:end="87:30">*</operator><operator pos:start="87:31" pos:end="87:31">)</operator> <call pos:start="87:33" pos:end="87:75"><name pos:start="87:33" pos:end="87:51">g_hash_table_lookup</name><argument_list pos:start="87:52" pos:end="87:75">(<argument pos:start="87:53" pos:end="87:60"><expr pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:60"><name pos:start="87:53" pos:end="87:55">phb</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:60">msi</name></name></expr></argument>, <argument pos:start="87:63" pos:end="87:74"><expr pos:start="87:63" pos:end="87:74"><operator pos:start="87:63" pos:end="87:63">&amp;</operator><name pos:start="87:64" pos:end="87:74">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="97:9">if <condition pos:start="89:12" pos:end="89:17">(<expr pos:start="89:13" pos:end="89:16"><operator pos:start="89:13" pos:end="89:13">!</operator><name pos:start="89:14" pos:end="89:16">msi</name></expr>)</condition> <block pos:start="89:19" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:19">

            <expr_stmt pos:start="91:13" pos:end="91:71"><expr pos:start="91:13" pos:end="91:70"><call pos:start="91:13" pos:end="91:70"><name pos:start="91:13" pos:end="91:31">trace_spapr_pci_msi</name><argument_list pos:start="91:32" pos:end="91:70">(<argument pos:start="91:33" pos:end="91:56"><expr pos:start="91:33" pos:end="91:56"><literal type="string" pos:start="91:33" pos:end="91:56">"Releasing wrong config"</literal></expr></argument>, <argument pos:start="91:59" pos:end="91:69"><expr pos:start="91:59" pos:end="91:69"><name pos:start="91:59" pos:end="91:69">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:48"><expr pos:start="93:13" pos:end="93:47"><call pos:start="93:13" pos:end="93:47"><name pos:start="93:13" pos:end="93:19">rtas_st</name><argument_list pos:start="93:20" pos:end="93:47">(<argument pos:start="93:21" pos:end="93:24"><expr pos:start="93:21" pos:end="93:24"><name pos:start="93:21" pos:end="93:24">rets</name></expr></argument>, <argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><literal type="number" pos:start="93:27" pos:end="93:27">0</literal></expr></argument>, <argument pos:start="93:30" pos:end="93:46"><expr pos:start="93:30" pos:end="93:46"><name pos:start="93:30" pos:end="93:46">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:56"><expr pos:start="101:9" pos:end="101:55"><call pos:start="101:9" pos:end="101:55"><name pos:start="101:9" pos:end="101:17">xics_free</name><argument_list pos:start="101:18" pos:end="101:55">(<argument pos:start="101:19" pos:end="101:28"><expr pos:start="101:19" pos:end="101:28"><name pos:start="101:19" pos:end="101:28"><name pos:start="101:19" pos:end="101:23">spapr</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:28">icp</name></name></expr></argument>, <argument pos:start="101:31" pos:end="101:44"><expr pos:start="101:31" pos:end="101:44"><name pos:start="101:31" pos:end="101:44"><name pos:start="101:31" pos:end="101:33">msi</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:44">first_irq</name></name></expr></argument>, <argument pos:start="101:47" pos:end="101:54"><expr pos:start="101:47" pos:end="101:54"><name pos:start="101:47" pos:end="101:54"><name pos:start="101:47" pos:end="101:49">msi</name><operator pos:start="101:50" pos:end="101:51">-&gt;</operator><name pos:start="101:52" pos:end="101:54">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:30">(<expr pos:start="103:13" pos:end="103:29"><call pos:start="103:13" pos:end="103:29"><name pos:start="103:13" pos:end="103:23">msi_present</name><argument_list pos:start="103:24" pos:end="103:29">(<argument pos:start="103:25" pos:end="103:28"><expr pos:start="103:25" pos:end="103:28"><name pos:start="103:25" pos:end="103:28">pdev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:32" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:51">

            <expr_stmt pos:start="105:13" pos:end="105:51"><expr pos:start="105:13" pos:end="105:50"><call pos:start="105:13" pos:end="105:50"><name pos:start="105:13" pos:end="105:28">spapr_msi_setmsg</name><argument_list pos:start="105:29" pos:end="105:50">(<argument pos:start="105:30" pos:end="105:33"><expr pos:start="105:30" pos:end="105:33"><name pos:start="105:30" pos:end="105:33">pdev</name></expr></argument>, <argument pos:start="105:36" pos:end="105:36"><expr pos:start="105:36" pos:end="105:36"><literal type="number" pos:start="105:36" pos:end="105:36">0</literal></expr></argument>, <argument pos:start="105:39" pos:end="105:43"><expr pos:start="105:39" pos:end="105:43"><name pos:start="105:39" pos:end="105:43">false</name></expr></argument>, <argument pos:start="105:46" pos:end="105:46"><expr pos:start="105:46" pos:end="105:46"><literal type="number" pos:start="105:46" pos:end="105:46">0</literal></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:31">(<expr pos:start="109:13" pos:end="109:30"><call pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:24">msix_present</name><argument_list pos:start="109:25" pos:end="109:30">(<argument pos:start="109:26" pos:end="109:29"><expr pos:start="109:26" pos:end="109:29"><name pos:start="109:26" pos:end="109:29">pdev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:33" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:50">

            <expr_stmt pos:start="111:13" pos:end="111:50"><expr pos:start="111:13" pos:end="111:49"><call pos:start="111:13" pos:end="111:49"><name pos:start="111:13" pos:end="111:28">spapr_msi_setmsg</name><argument_list pos:start="111:29" pos:end="111:49">(<argument pos:start="111:30" pos:end="111:33"><expr pos:start="111:30" pos:end="111:33"><name pos:start="111:30" pos:end="111:33">pdev</name></expr></argument>, <argument pos:start="111:36" pos:end="111:36"><expr pos:start="111:36" pos:end="111:36"><literal type="number" pos:start="111:36" pos:end="111:36">0</literal></expr></argument>, <argument pos:start="111:39" pos:end="111:42"><expr pos:start="111:39" pos:end="111:42"><name pos:start="111:39" pos:end="111:42">true</name></expr></argument>, <argument pos:start="111:45" pos:end="111:45"><expr pos:start="111:45" pos:end="111:45"><literal type="number" pos:start="111:45" pos:end="111:45">0</literal></expr></argument>, <argument pos:start="111:48" pos:end="111:48"><expr pos:start="111:48" pos:end="111:48"><literal type="number" pos:start="111:48" pos:end="111:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:52"><expr pos:start="115:9" pos:end="115:51"><call pos:start="115:9" pos:end="115:51"><name pos:start="115:9" pos:end="115:27">g_hash_table_remove</name><argument_list pos:start="115:28" pos:end="115:51">(<argument pos:start="115:29" pos:end="115:36"><expr pos:start="115:29" pos:end="115:36"><name pos:start="115:29" pos:end="115:36"><name pos:start="115:29" pos:end="115:31">phb</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:36">msi</name></name></expr></argument>, <argument pos:start="115:39" pos:end="115:50"><expr pos:start="115:39" pos:end="115:50"><operator pos:start="115:39" pos:end="115:39">&amp;</operator><name pos:start="115:40" pos:end="115:50">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:58"><expr pos:start="119:9" pos:end="119:57"><call pos:start="119:9" pos:end="119:57"><name pos:start="119:9" pos:end="119:27">trace_spapr_pci_msi</name><argument_list pos:start="119:28" pos:end="119:57">(<argument pos:start="119:29" pos:end="119:43"><expr pos:start="119:29" pos:end="119:43"><literal type="string" pos:start="119:29" pos:end="119:43">"Released MSIs"</literal></expr></argument>, <argument pos:start="119:46" pos:end="119:56"><expr pos:start="119:46" pos:end="119:56"><name pos:start="119:46" pos:end="119:56">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:43"><expr pos:start="121:9" pos:end="121:42"><call pos:start="121:9" pos:end="121:42"><name pos:start="121:9" pos:end="121:15">rtas_st</name><argument_list pos:start="121:16" pos:end="121:42">(<argument pos:start="121:17" pos:end="121:20"><expr pos:start="121:17" pos:end="121:20"><name pos:start="121:17" pos:end="121:20">rets</name></expr></argument>, <argument pos:start="121:23" pos:end="121:23"><expr pos:start="121:23" pos:end="121:23"><literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr></argument>, <argument pos:start="121:26" pos:end="121:41"><expr pos:start="121:26" pos:end="121:41"><name pos:start="121:26" pos:end="121:41">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><call pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:15">rtas_st</name><argument_list pos:start="123:16" pos:end="123:27">(<argument pos:start="123:17" pos:end="123:20"><expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:20">rets</name></expr></argument>, <argument pos:start="123:23" pos:end="123:23"><expr pos:start="123:23" pos:end="123:23"><literal type="number" pos:start="123:23" pos:end="123:23">1</literal></expr></argument>, <argument pos:start="123:26" pos:end="123:26"><expr pos:start="123:26" pos:end="123:26"><literal type="number" pos:start="123:26" pos:end="123:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="125:9" pos:end="125:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:22">/* Enabling MSI */</comment>



    <comment type="block" pos:start="135:5" pos:end="135:64">/* Check if the device supports as many IRQs as requested */</comment>

    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:39">(<expr pos:start="137:9" pos:end="137:38"><name pos:start="137:9" pos:end="137:21">ret_intr_type</name> <operator pos:start="137:23" pos:end="137:24">==</operator> <name pos:start="137:26" pos:end="137:38">RTAS_TYPE_MSI</name></expr>)</condition> <block pos:start="137:41" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:50">

        <expr_stmt pos:start="139:9" pos:end="139:50"><expr pos:start="139:9" pos:end="139:49"><name pos:start="139:9" pos:end="139:16">max_irqs</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <call pos:start="139:20" pos:end="139:49"><name pos:start="139:20" pos:end="139:43">msi_nr_vectors_allocated</name><argument_list pos:start="139:44" pos:end="139:49">(<argument pos:start="139:45" pos:end="139:48"><expr pos:start="139:45" pos:end="139:48"><name pos:start="139:45" pos:end="139:48">pdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="145:5">else if <condition pos:start="141:15" pos:end="141:47">(<expr pos:start="141:16" pos:end="141:46"><name pos:start="141:16" pos:end="141:28">ret_intr_type</name> <operator pos:start="141:30" pos:end="141:31">==</operator> <name pos:start="141:33" pos:end="141:46">RTAS_TYPE_MSIX</name></expr>)</condition> <block pos:start="141:49" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:41">

        <expr_stmt pos:start="143:9" pos:end="143:41"><expr pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:16">max_irqs</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:40"><name pos:start="143:20" pos:end="143:23">pdev</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:40">msix_entries_nr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="147:5" pos:end="157:5"><if pos:start="147:5" pos:end="157:5">if <condition pos:start="147:8" pos:end="147:18">(<expr pos:start="147:9" pos:end="147:17"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:17">max_irqs</name></expr>)</condition> <block pos:start="147:20" pos:end="157:5">{<block_content pos:start="149:9" pos:end="155:15">

        <expr_stmt pos:start="149:9" pos:end="151:49"><expr pos:start="149:9" pos:end="151:48"><call pos:start="149:9" pos:end="151:48"><name pos:start="149:9" pos:end="149:20">error_report</name><argument_list pos:start="149:21" pos:end="151:48">(<argument pos:start="149:22" pos:end="149:79"><expr pos:start="149:22" pos:end="149:79"><literal type="string" pos:start="149:22" pos:end="149:79">"Requested interrupt type %d is not enabled for device %x"</literal></expr></argument>,

                     <argument pos:start="151:22" pos:end="151:34"><expr pos:start="151:22" pos:end="151:34"><name pos:start="151:22" pos:end="151:34">ret_intr_type</name></expr></argument>, <argument pos:start="151:37" pos:end="151:47"><expr pos:start="151:37" pos:end="151:47"><name pos:start="151:37" pos:end="151:47">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:29"><expr pos:start="153:9" pos:end="153:28"><call pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:15">rtas_st</name><argument_list pos:start="153:16" pos:end="153:28">(<argument pos:start="153:17" pos:end="153:20"><expr pos:start="153:17" pos:end="153:20"><name pos:start="153:17" pos:end="153:20">rets</name></expr></argument>, <argument pos:start="153:23" pos:end="153:23"><expr pos:start="153:23" pos:end="153:23"><literal type="number" pos:start="153:23" pos:end="153:23">0</literal></expr></argument>, <argument pos:start="153:26" pos:end="153:27"><expr pos:start="153:26" pos:end="153:27"><operator pos:start="153:26" pos:end="153:26">-</operator><literal type="number" pos:start="153:27" pos:end="153:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="153:31" pos:end="153:50">/* Hardware error */</comment>

        <return pos:start="155:9" pos:end="155:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="159:5" pos:end="159:60">/* Correct the number if the guest asked for too many */</comment>

    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="161:27">(<expr pos:start="161:9" pos:end="161:26"><name pos:start="161:9" pos:end="161:15">req_num</name> <operator pos:start="161:17" pos:end="161:17">&gt;</operator> <name pos:start="161:19" pos:end="161:26">max_irqs</name></expr>)</condition> <block pos:start="161:29" pos:end="171:5">{<block_content pos:start="163:9" pos:end="169:17">

        <expr_stmt pos:start="163:9" pos:end="163:66"><expr pos:start="163:9" pos:end="163:65"><call pos:start="163:9" pos:end="163:65"><name pos:start="163:9" pos:end="163:33">trace_spapr_pci_msi_retry</name><argument_list pos:start="163:34" pos:end="163:65">(<argument pos:start="163:35" pos:end="163:45"><expr pos:start="163:35" pos:end="163:45"><name pos:start="163:35" pos:end="163:45">config_addr</name></expr></argument>, <argument pos:start="163:48" pos:end="163:54"><expr pos:start="163:48" pos:end="163:54"><name pos:start="163:48" pos:end="163:54">req_num</name></expr></argument>, <argument pos:start="163:57" pos:end="163:64"><expr pos:start="163:57" pos:end="163:64"><name pos:start="163:57" pos:end="163:64">max_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:27"><expr pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:15">req_num</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <name pos:start="165:19" pos:end="165:26">max_irqs</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:16"><expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">irq</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="167:18" pos:end="167:48">/* to avoid misleading trace */</comment>

        <goto pos:start="169:9" pos:end="169:17">goto <name pos:start="169:14" pos:end="169:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:23">/* Allocate MSIs */</comment>

    <expr_stmt pos:start="177:5" pos:end="179:59"><expr pos:start="177:5" pos:end="179:58"><name pos:start="177:5" pos:end="177:7">irq</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="179:58"><name pos:start="177:11" pos:end="177:26">xics_alloc_block</name><argument_list pos:start="177:27" pos:end="179:58">(<argument pos:start="177:28" pos:end="177:37"><expr pos:start="177:28" pos:end="177:37"><name pos:start="177:28" pos:end="177:37"><name pos:start="177:28" pos:end="177:32">spapr</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:37">icp</name></name></expr></argument>, <argument pos:start="177:40" pos:end="177:40"><expr pos:start="177:40" pos:end="177:40"><literal type="number" pos:start="177:40" pos:end="177:40">0</literal></expr></argument>, <argument pos:start="177:43" pos:end="177:49"><expr pos:start="177:43" pos:end="177:49"><name pos:start="177:43" pos:end="177:49">req_num</name></expr></argument>, <argument pos:start="177:52" pos:end="177:56"><expr pos:start="177:52" pos:end="177:56"><name pos:start="177:52" pos:end="177:56">false</name></expr></argument>,

                           <argument pos:start="179:28" pos:end="179:57"><expr pos:start="179:28" pos:end="179:57"><name pos:start="179:28" pos:end="179:40">ret_intr_type</name> <operator pos:start="179:42" pos:end="179:43">==</operator> <name pos:start="179:45" pos:end="179:57">RTAS_TYPE_MSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="189:5">if <condition pos:start="181:8" pos:end="181:13">(<expr pos:start="181:9" pos:end="181:12"><operator pos:start="181:9" pos:end="181:9">!</operator><name pos:start="181:10" pos:end="181:12">irq</name></expr>)</condition> <block pos:start="181:15" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:15">

        <expr_stmt pos:start="183:9" pos:end="183:72"><expr pos:start="183:9" pos:end="183:71"><call pos:start="183:9" pos:end="183:71"><name pos:start="183:9" pos:end="183:20">error_report</name><argument_list pos:start="183:21" pos:end="183:71">(<argument pos:start="183:22" pos:end="183:57"><expr pos:start="183:22" pos:end="183:57"><literal type="string" pos:start="183:22" pos:end="183:57">"Cannot allocate MSIs for device %x"</literal></expr></argument>, <argument pos:start="183:60" pos:end="183:70"><expr pos:start="183:60" pos:end="183:70"><name pos:start="183:60" pos:end="183:70">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:44"><expr pos:start="185:9" pos:end="185:43"><call pos:start="185:9" pos:end="185:43"><name pos:start="185:9" pos:end="185:15">rtas_st</name><argument_list pos:start="185:16" pos:end="185:43">(<argument pos:start="185:17" pos:end="185:20"><expr pos:start="185:17" pos:end="185:20"><name pos:start="185:17" pos:end="185:20">rets</name></expr></argument>, <argument pos:start="185:23" pos:end="185:23"><expr pos:start="185:23" pos:end="185:23"><literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr></argument>, <argument pos:start="185:26" pos:end="185:42"><expr pos:start="185:26" pos:end="185:42"><name pos:start="185:26" pos:end="185:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="187:9" pos:end="187:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:73">/* Setup MSI/MSIX vectors in the device (via cfgspace or MSIX BAR) */</comment>

    <expr_stmt pos:start="195:5" pos:end="197:35"><expr pos:start="195:5" pos:end="197:34"><call pos:start="195:5" pos:end="197:34"><name pos:start="195:5" pos:end="195:20">spapr_msi_setmsg</name><argument_list pos:start="195:21" pos:end="197:34">(<argument pos:start="195:22" pos:end="195:25"><expr pos:start="195:22" pos:end="195:25"><name pos:start="195:22" pos:end="195:25">pdev</name></expr></argument>, <argument pos:start="195:28" pos:end="195:47"><expr pos:start="195:28" pos:end="195:47"><name pos:start="195:28" pos:end="195:47">SPAPR_PCI_MSI_WINDOW</name></expr></argument>, <argument pos:start="195:50" pos:end="195:80"><expr pos:start="195:50" pos:end="195:80"><name pos:start="195:50" pos:end="195:62">ret_intr_type</name> <operator pos:start="195:64" pos:end="195:65">==</operator> <name pos:start="195:67" pos:end="195:80">RTAS_TYPE_MSIX</name></expr></argument>,

                     <argument pos:start="197:22" pos:end="197:24"><expr pos:start="197:22" pos:end="197:24"><name pos:start="197:22" pos:end="197:24">irq</name></expr></argument>, <argument pos:start="197:27" pos:end="197:33"><expr pos:start="197:27" pos:end="197:33"><name pos:start="197:27" pos:end="197:33">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="201:5" pos:end="201:33">/* Add MSI device to cache */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:34"><expr pos:start="203:5" pos:end="203:33"><name pos:start="203:5" pos:end="203:7">msi</name> <operator pos:start="203:9" pos:end="203:9">=</operator> <call pos:start="203:11" pos:end="203:33"><name pos:start="203:11" pos:end="203:15">g_new</name><argument_list pos:start="203:16" pos:end="203:33">(<argument pos:start="203:17" pos:end="203:29"><expr pos:start="203:17" pos:end="203:29"><name pos:start="203:17" pos:end="203:29">spapr_pci_msi</name></expr></argument>, <argument pos:start="203:32" pos:end="203:32"><expr pos:start="203:32" pos:end="203:32"><literal type="number" pos:start="203:32" pos:end="203:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:25"><expr pos:start="205:5" pos:end="205:24"><name pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:7">msi</name><operator pos:start="205:8" pos:end="205:9">-&gt;</operator><name pos:start="205:10" pos:end="205:18">first_irq</name></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:24">irq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:23"><expr pos:start="207:5" pos:end="207:22"><name pos:start="207:5" pos:end="207:12"><name pos:start="207:5" pos:end="207:7">msi</name><operator pos:start="207:8" pos:end="207:9">-&gt;</operator><name pos:start="207:10" pos:end="207:12">num</name></name> <operator pos:start="207:14" pos:end="207:14">=</operator> <name pos:start="207:16" pos:end="207:22">req_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:36"><expr pos:start="209:5" pos:end="209:35"><name pos:start="209:5" pos:end="209:19">config_addr_key</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <call pos:start="209:23" pos:end="209:35"><name pos:start="209:23" pos:end="209:27">g_new</name><argument_list pos:start="209:28" pos:end="209:35">(<argument pos:start="209:29" pos:end="209:31"><expr pos:start="209:29" pos:end="209:31"><name pos:start="209:29" pos:end="209:31">int</name></expr></argument>, <argument pos:start="209:34" pos:end="209:34"><expr pos:start="209:34" pos:end="209:34"><literal type="number" pos:start="209:34" pos:end="209:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:35"><expr pos:start="211:5" pos:end="211:34"><operator pos:start="211:5" pos:end="211:5">*</operator><name pos:start="211:6" pos:end="211:20">config_addr_key</name> <operator pos:start="211:22" pos:end="211:22">=</operator> <name pos:start="211:24" pos:end="211:34">config_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:56"><expr pos:start="213:5" pos:end="213:55"><call pos:start="213:5" pos:end="213:55"><name pos:start="213:5" pos:end="213:23">g_hash_table_insert</name><argument_list pos:start="213:24" pos:end="213:55">(<argument pos:start="213:25" pos:end="213:32"><expr pos:start="213:25" pos:end="213:32"><name pos:start="213:25" pos:end="213:32"><name pos:start="213:25" pos:end="213:27">phb</name><operator pos:start="213:28" pos:end="213:29">-&gt;</operator><name pos:start="213:30" pos:end="213:32">msi</name></name></expr></argument>, <argument pos:start="213:35" pos:end="213:49"><expr pos:start="213:35" pos:end="213:49"><name pos:start="213:35" pos:end="213:49">config_addr_key</name></expr></argument>, <argument pos:start="213:52" pos:end="213:54"><expr pos:start="213:52" pos:end="213:54"><name pos:start="213:52" pos:end="213:54">msi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="217:1" pos:end="217:4"><name pos:start="217:1" pos:end="217:3">out</name>:</label>

    <expr_stmt pos:start="219:5" pos:end="219:39"><expr pos:start="219:5" pos:end="219:38"><call pos:start="219:5" pos:end="219:38"><name pos:start="219:5" pos:end="219:11">rtas_st</name><argument_list pos:start="219:12" pos:end="219:38">(<argument pos:start="219:13" pos:end="219:16"><expr pos:start="219:13" pos:end="219:16"><name pos:start="219:13" pos:end="219:16">rets</name></expr></argument>, <argument pos:start="219:19" pos:end="219:19"><expr pos:start="219:19" pos:end="219:19"><literal type="number" pos:start="219:19" pos:end="219:19">0</literal></expr></argument>, <argument pos:start="219:22" pos:end="219:37"><expr pos:start="219:22" pos:end="219:37"><name pos:start="219:22" pos:end="219:37">RTAS_OUT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:30"><expr pos:start="221:5" pos:end="221:29"><call pos:start="221:5" pos:end="221:29"><name pos:start="221:5" pos:end="221:11">rtas_st</name><argument_list pos:start="221:12" pos:end="221:29">(<argument pos:start="221:13" pos:end="221:16"><expr pos:start="221:13" pos:end="221:16"><name pos:start="221:13" pos:end="221:16">rets</name></expr></argument>, <argument pos:start="221:19" pos:end="221:19"><expr pos:start="221:19" pos:end="221:19"><literal type="number" pos:start="221:19" pos:end="221:19">1</literal></expr></argument>, <argument pos:start="221:22" pos:end="221:28"><expr pos:start="221:22" pos:end="221:28"><name pos:start="221:22" pos:end="221:28">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:32"><expr pos:start="223:5" pos:end="223:31"><call pos:start="223:5" pos:end="223:31"><name pos:start="223:5" pos:end="223:11">rtas_st</name><argument_list pos:start="223:12" pos:end="223:31">(<argument pos:start="223:13" pos:end="223:16"><expr pos:start="223:13" pos:end="223:16"><name pos:start="223:13" pos:end="223:16">rets</name></expr></argument>, <argument pos:start="223:19" pos:end="223:19"><expr pos:start="223:19" pos:end="223:19"><literal type="number" pos:start="223:19" pos:end="223:19">2</literal></expr></argument>, <argument pos:start="223:22" pos:end="223:30"><expr pos:start="223:22" pos:end="223:30"><operator pos:start="223:22" pos:end="223:23">++</operator><name pos:start="223:24" pos:end="223:30">seq_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:17">(<expr pos:start="225:9" pos:end="225:16"><name pos:start="225:9" pos:end="225:12">nret</name> <operator pos:start="225:14" pos:end="225:14">&gt;</operator> <literal type="number" pos:start="225:16" pos:end="225:16">3</literal></expr>)</condition> <block pos:start="225:19" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:40">

        <expr_stmt pos:start="227:9" pos:end="227:40"><expr pos:start="227:9" pos:end="227:39"><call pos:start="227:9" pos:end="227:39"><name pos:start="227:9" pos:end="227:15">rtas_st</name><argument_list pos:start="227:16" pos:end="227:39">(<argument pos:start="227:17" pos:end="227:20"><expr pos:start="227:17" pos:end="227:20"><name pos:start="227:17" pos:end="227:20">rets</name></expr></argument>, <argument pos:start="227:23" pos:end="227:23"><expr pos:start="227:23" pos:end="227:23"><literal type="number" pos:start="227:23" pos:end="227:23">3</literal></expr></argument>, <argument pos:start="227:26" pos:end="227:38"><expr pos:start="227:26" pos:end="227:38"><name pos:start="227:26" pos:end="227:38">ret_intr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:73"><expr pos:start="233:5" pos:end="233:72"><call pos:start="233:5" pos:end="233:72"><name pos:start="233:5" pos:end="233:39">trace_spapr_pci_rtas_ibm_change_msi</name><argument_list pos:start="233:40" pos:end="233:72">(<argument pos:start="233:41" pos:end="233:51"><expr pos:start="233:41" pos:end="233:51"><name pos:start="233:41" pos:end="233:51">config_addr</name></expr></argument>, <argument pos:start="233:54" pos:end="233:57"><expr pos:start="233:54" pos:end="233:57"><name pos:start="233:54" pos:end="233:57">func</name></expr></argument>, <argument pos:start="233:60" pos:end="233:66"><expr pos:start="233:60" pos:end="233:66"><name pos:start="233:60" pos:end="233:66">req_num</name></expr></argument>, <argument pos:start="233:69" pos:end="233:71"><expr pos:start="233:69" pos:end="233:71"><name pos:start="233:69" pos:end="233:71">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
