<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26281.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb15to16</name>)<parameter_list pos:start="1:37" pos:end="1:85">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:84"><decl pos:start="1:72" pos:end="1:84"><type pos:start="1:72" pos:end="1:84"><name pos:start="1:72" pos:end="1:75">long</name></type> <name pos:start="1:77" pos:end="1:84">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:27"><specifier pos:start="5:5" pos:end="5:12">register</specifier> <specifier pos:start="5:14" pos:end="5:18">const</specifier> <name pos:start="5:20" pos:end="5:26">uint8_t</name><modifier pos:start="5:27" pos:end="5:27">*</modifier></type> <name pos:start="5:29" pos:end="5:29">s</name><init pos:start="5:30" pos:end="5:33">=<expr pos:start="5:31" pos:end="5:33"><name pos:start="5:31" pos:end="5:33">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:12">register</specifier> <name pos:start="7:14" pos:end="7:20">uint8_t</name><modifier pos:start="7:21" pos:end="7:21">*</modifier></type> <name pos:start="7:23" pos:end="7:23">d</name><init pos:start="7:24" pos:end="7:27">=<expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">dst</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:28"><specifier pos:start="9:5" pos:end="9:12">register</specifier> <specifier pos:start="9:14" pos:end="9:18">const</specifier> <name pos:start="9:20" pos:end="9:26">uint8_t</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:31">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:25">mm_end</name></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:7">end</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:11">s</name> <operator pos:start="13:13" pos:end="13:13">+</operator> <name pos:start="13:15" pos:end="13:22">src_size</name></expr>;</expr_stmt>

<cpp:if pos:start="15:1" pos:end="15:24">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="17:5" pos:end="17:48">__asm__ <specifier pos:start="17:13" pos:end="17:20">volatile</specifier>(PREFETCH"    %0"::"m"(*s));</asm>

    <asm pos:start="19:5" pos:end="19:60">__asm__ <specifier pos:start="19:13" pos:end="19:20">volatile</specifier>("movq        %0, %%mm4"::"m"(mask15s));</asm>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:10">mm_end</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:16">end</name> <operator pos:start="21:18" pos:end="21:18">-</operator> <literal type="number" pos:start="21:20" pos:end="21:21">15</literal></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="59:5">while <condition pos:start="23:11" pos:end="23:20">(<expr pos:start="23:12" pos:end="23:19"><name pos:start="23:12" pos:end="23:12">s</name><operator pos:start="23:13" pos:end="23:13">&lt;</operator><name pos:start="23:14" pos:end="23:19">mm_end</name></expr>)</condition> <block pos:start="23:22" pos:end="59:5">{<block_content pos:start="25:9" pos:end="57:14">

        <asm pos:start="25:9" pos:end="53:10">__asm__ <specifier pos:start="25:17" pos:end="25:24">volatile</specifier>(

            PREFETCH"  32%1         \n\t"

            "movq        %1, %%mm0  \n\t"

            "movq       8%1, %%mm2  \n\t"

            "movq     %%mm0, %%mm1  \n\t"

            "movq     %%mm2, %%mm3  \n\t"

            "pand     %%mm4, %%mm0  \n\t"

            "pand     %%mm4, %%mm2  \n\t"

            "paddw    %%mm1, %%mm0  \n\t"

            "paddw    %%mm3, %%mm2  \n\t"

            MOVNTQ"   %%mm0,  %0    \n\t"

            MOVNTQ"   %%mm2, 8%0"

            :"=m"(*d)

            :"m"(*s)

        );</asm>

        <expr_stmt pos:start="55:9" pos:end="55:14"><expr pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:9">d</name><operator pos:start="55:10" pos:end="55:11">+=</operator><literal type="number" pos:start="55:12" pos:end="55:13">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">+=</operator><literal type="number" pos:start="57:12" pos:end="57:13">16</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="61:5" pos:end="61:40">__asm__ <specifier pos:start="61:13" pos:end="61:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="63:5" pos:end="66:0">__asm__ <specifier pos:start="63:13" pos:end="63:20">volatile</specifier>(EMMS:::"memory");</asm>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="67:5" pos:end="67:21"><expr pos:start="67:5" pos:end="67:20"><name pos:start="67:5" pos:end="67:10">mm_end</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:16">end</name> <operator pos:start="67:18" pos:end="67:18">-</operator> <literal type="number" pos:start="67:20" pos:end="67:20">3</literal></expr>;</expr_stmt>

    <while pos:start="69:5" pos:end="79:5">while <condition pos:start="69:11" pos:end="69:22">(<expr pos:start="69:12" pos:end="69:21"><name pos:start="69:12" pos:end="69:12">s</name> <operator pos:start="69:14" pos:end="69:14">&lt;</operator> <name pos:start="69:16" pos:end="69:21">mm_end</name></expr>)</condition> <block pos:start="69:24" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:13">

        <decl_stmt pos:start="71:9" pos:end="71:52"><decl pos:start="71:9" pos:end="71:51"><type pos:start="71:9" pos:end="71:25"><specifier pos:start="71:9" pos:end="71:16">register</specifier> <name pos:start="71:18" pos:end="71:25">unsigned</name></type> <name pos:start="71:27" pos:end="71:27">x</name><init pos:start="71:28" pos:end="71:51">= <expr pos:start="71:30" pos:end="71:51"><operator pos:start="71:30" pos:end="71:30">*</operator><operator pos:start="71:31" pos:end="71:31">(</operator><operator pos:start="71:32" pos:end="71:32">(</operator><specifier pos:start="71:33" pos:end="71:37">const</specifier> <name pos:start="71:39" pos:end="71:46">uint32_t</name> <operator pos:start="71:48" pos:end="71:48">*</operator><operator pos:start="71:49" pos:end="71:49">)</operator><name pos:start="71:50" pos:end="71:50">s</name><operator pos:start="71:51" pos:end="71:51">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:59"><expr pos:start="73:9" pos:end="73:58"><operator pos:start="73:9" pos:end="73:9">*</operator><operator pos:start="73:10" pos:end="73:10">(</operator><operator pos:start="73:11" pos:end="73:11">(</operator><name pos:start="73:12" pos:end="73:19">uint32_t</name> <operator pos:start="73:21" pos:end="73:21">*</operator><operator pos:start="73:22" pos:end="73:22">)</operator><name pos:start="73:23" pos:end="73:23">d</name><operator pos:start="73:24" pos:end="73:24">)</operator> <operator pos:start="73:26" pos:end="73:26">=</operator> <operator pos:start="73:28" pos:end="73:28">(</operator><name pos:start="73:29" pos:end="73:29">x</name><operator pos:start="73:30" pos:end="73:30">&amp;</operator><literal type="number" pos:start="73:31" pos:end="73:40">0x7FFF7FFF</literal><operator pos:start="73:41" pos:end="73:41">)</operator> <operator pos:start="73:43" pos:end="73:43">+</operator> <operator pos:start="73:45" pos:end="73:45">(</operator><name pos:start="73:46" pos:end="73:46">x</name><operator pos:start="73:47" pos:end="73:47">&amp;</operator><literal type="number" pos:start="73:48" pos:end="73:57">0x7FE07FE0</literal><operator pos:start="73:58" pos:end="73:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:13"><expr pos:start="75:9" pos:end="75:12"><name pos:start="75:9" pos:end="75:9">d</name><operator pos:start="75:10" pos:end="75:11">+=</operator><literal type="number" pos:start="75:12" pos:end="75:12">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:13"><expr pos:start="77:9" pos:end="77:12"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">+=</operator><literal type="number" pos:start="77:12" pos:end="77:12">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:16">(<expr pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:9">s</name> <operator pos:start="81:11" pos:end="81:11">&lt;</operator> <name pos:start="81:13" pos:end="81:15">end</name></expr>)</condition> <block pos:start="81:18" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:51">

        <decl_stmt pos:start="83:9" pos:end="83:58"><decl pos:start="83:9" pos:end="83:57"><type pos:start="83:9" pos:end="83:31"><specifier pos:start="83:9" pos:end="83:16">register</specifier> <name pos:start="83:18" pos:end="83:25">unsigned</name> <name pos:start="83:27" pos:end="83:31">short</name></type> <name pos:start="83:33" pos:end="83:33">x</name><init pos:start="83:34" pos:end="83:57">= <expr pos:start="83:36" pos:end="83:57"><operator pos:start="83:36" pos:end="83:36">*</operator><operator pos:start="83:37" pos:end="83:37">(</operator><operator pos:start="83:38" pos:end="83:38">(</operator><specifier pos:start="83:39" pos:end="83:43">const</specifier> <name pos:start="83:45" pos:end="83:52">uint16_t</name> <operator pos:start="83:54" pos:end="83:54">*</operator><operator pos:start="83:55" pos:end="83:55">)</operator><name pos:start="83:56" pos:end="83:56">s</name><operator pos:start="83:57" pos:end="83:57">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><operator pos:start="85:9" pos:end="85:9">*</operator><operator pos:start="85:10" pos:end="85:10">(</operator><operator pos:start="85:11" pos:end="85:11">(</operator><name pos:start="85:12" pos:end="85:19">uint16_t</name> <operator pos:start="85:21" pos:end="85:21">*</operator><operator pos:start="85:22" pos:end="85:22">)</operator><name pos:start="85:23" pos:end="85:23">d</name><operator pos:start="85:24" pos:end="85:24">)</operator> <operator pos:start="85:26" pos:end="85:26">=</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:29">x</name><operator pos:start="85:30" pos:end="85:30">&amp;</operator><literal type="number" pos:start="85:31" pos:end="85:36">0x7FFF</literal><operator pos:start="85:37" pos:end="85:37">)</operator> <operator pos:start="85:39" pos:end="85:39">+</operator> <operator pos:start="85:41" pos:end="85:41">(</operator><name pos:start="85:42" pos:end="85:42">x</name><operator pos:start="85:43" pos:end="85:43">&amp;</operator><literal type="number" pos:start="85:44" pos:end="85:49">0x7FE0</literal><operator pos:start="85:50" pos:end="85:50">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
