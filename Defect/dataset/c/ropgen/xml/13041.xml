<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13041.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">parse_h264_sdp_line</name><parameter_list pos:start="1:31" pos:end="3:75">(<parameter pos:start="1:32" pos:end="1:49"><decl pos:start="1:32" pos:end="1:49"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:46">AVFormatContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:63">st_index</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:56"><decl pos:start="3:32" pos:end="3:56"><type pos:start="3:32" pos:end="3:56"><name pos:start="3:32" pos:end="3:45">PayloadContext</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">h264_data</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:74"><decl pos:start="3:59" pos:end="3:74"><type pos:start="3:59" pos:end="3:74"><specifier pos:start="3:59" pos:end="3:63">const</specifier> <name pos:start="3:65" pos:end="3:68">char</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:74">line</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="77:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:20">stream</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:17">p</name> <init pos:start="11:19" pos:end="11:24">= <expr pos:start="11:21" pos:end="11:24"><name pos:start="11:21" pos:end="11:24">line</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:21">(<expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:16">st_index</name> <operator pos:start="15:18" pos:end="15:18">&lt;</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:34"><expr pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:10">stream</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:33"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:23">streams</name><index pos:start="21:24" pos:end="21:33">[<expr pos:start="21:25" pos:end="21:32"><name pos:start="21:25" pos:end="21:32">st_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:26"><expr pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:9">codec</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:18">stream</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:25">codec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><call pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:45">(<argument pos:start="25:12" pos:end="25:44"><expr pos:start="25:12" pos:end="25:44"><name pos:start="25:12" pos:end="25:28"><name pos:start="25:12" pos:end="25:20">h264_data</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:28">cookie</name></name> <operator pos:start="25:30" pos:end="25:31">==</operator> <name pos:start="25:33" pos:end="25:44">MAGIC_COOKIE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="73:5"><if pos:start="29:5" pos:end="65:5">if <condition pos:start="29:8" pos:end="29:41">(<expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:19">av_strstart</name><argument_list pos:start="29:20" pos:end="29:40">(<argument pos:start="29:21" pos:end="29:21"><expr pos:start="29:21" pos:end="29:21"><name pos:start="29:21" pos:end="29:21">p</name></expr></argument>, <argument pos:start="29:24" pos:end="29:35"><expr pos:start="29:24" pos:end="29:35"><literal type="string" pos:start="29:24" pos:end="29:35">"framesize:"</literal></expr></argument>, <argument pos:start="29:38" pos:end="29:39"><expr pos:start="29:38" pos:end="29:39"><operator pos:start="29:38" pos:end="29:38">&amp;</operator><name pos:start="29:39" pos:end="29:39">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:43" pos:end="65:5">{<block_content pos:start="31:9" pos:end="63:41">

        <decl_stmt pos:start="31:9" pos:end="31:22"><decl pos:start="31:9" pos:end="31:21"><type pos:start="31:9" pos:end="31:12"><name pos:start="31:9" pos:end="31:12">char</name></type> <name pos:start="31:14" pos:end="31:21"><name pos:start="31:14" pos:end="31:17">buf1</name><index pos:start="31:18" pos:end="31:21">[<expr pos:start="31:19" pos:end="31:20"><literal type="number" pos:start="31:19" pos:end="31:20">50</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:25"><decl pos:start="33:9" pos:end="33:24"><type pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:12">char</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:17">dst</name> <init pos:start="33:19" pos:end="33:24">= <expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">buf1</name></expr></init></decl>;</decl_stmt>



        <comment type="line" pos:start="37:9" pos:end="37:43">// remove the protocol identifier..</comment>

        <while pos:start="39:9" pos:end="39:36">while <condition pos:start="39:15" pos:end="39:31">(<expr pos:start="39:16" pos:end="39:30"><operator pos:start="39:16" pos:end="39:16">*</operator><name pos:start="39:17" pos:end="39:17">p</name> <operator pos:start="39:19" pos:end="39:20">&amp;&amp;</operator> <operator pos:start="39:22" pos:end="39:22">*</operator><name pos:start="39:23" pos:end="39:23">p</name> <operator pos:start="39:25" pos:end="39:26">==</operator> <literal type="char" pos:start="39:28" pos:end="39:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="39:33" pos:end="39:36"><block_content pos:start="39:33" pos:end="39:36"> <expr_stmt pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:33">p</name><operator pos:start="39:34" pos:end="39:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="39:38" pos:end="39:53">// strip spaces.</comment>

        <while pos:start="41:9" pos:end="41:36">while <condition pos:start="41:15" pos:end="41:31">(<expr pos:start="41:16" pos:end="41:30"><operator pos:start="41:16" pos:end="41:16">*</operator><name pos:start="41:17" pos:end="41:17">p</name> <operator pos:start="41:19" pos:end="41:20">&amp;&amp;</operator> <operator pos:start="41:22" pos:end="41:22">*</operator><name pos:start="41:23" pos:end="41:23">p</name> <operator pos:start="41:25" pos:end="41:26">!=</operator> <literal type="char" pos:start="41:28" pos:end="41:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="41:33" pos:end="41:36"><block_content pos:start="41:33" pos:end="41:36"> <expr_stmt pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:33">p</name><operator pos:start="41:34" pos:end="41:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="41:38" pos:end="41:63">// eat protocol identifier</comment>

        <while pos:start="43:9" pos:end="43:36">while <condition pos:start="43:15" pos:end="43:31">(<expr pos:start="43:16" pos:end="43:30"><operator pos:start="43:16" pos:end="43:16">*</operator><name pos:start="43:17" pos:end="43:17">p</name> <operator pos:start="43:19" pos:end="43:20">&amp;&amp;</operator> <operator pos:start="43:22" pos:end="43:22">*</operator><name pos:start="43:23" pos:end="43:23">p</name> <operator pos:start="43:25" pos:end="43:26">==</operator> <literal type="char" pos:start="43:28" pos:end="43:30">' '</literal></expr>)</condition><block type="pseudo" pos:start="43:33" pos:end="43:36"><block_content pos:start="43:33" pos:end="43:36"> <expr_stmt pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:33">p</name><operator pos:start="43:34" pos:end="43:35">++</operator></expr>;</expr_stmt></block_content></block></while> <comment type="line" pos:start="43:38" pos:end="43:62">// strip trailing spaces.</comment>

        <while pos:start="45:9" pos:end="49:9">while <condition pos:start="45:15" pos:end="45:66">(<expr pos:start="45:16" pos:end="45:65"><operator pos:start="45:16" pos:end="45:16">*</operator><name pos:start="45:17" pos:end="45:17">p</name> <operator pos:start="45:19" pos:end="45:20">&amp;&amp;</operator> <operator pos:start="45:22" pos:end="45:22">*</operator><name pos:start="45:23" pos:end="45:23">p</name> <operator pos:start="45:25" pos:end="45:26">!=</operator> <literal type="char" pos:start="45:28" pos:end="45:30">'-'</literal> <operator pos:start="45:32" pos:end="45:33">&amp;&amp;</operator> <operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:38">dst</name> <operator pos:start="45:40" pos:end="45:40">-</operator> <name pos:start="45:42" pos:end="45:45">buf1</name><operator pos:start="45:46" pos:end="45:46">)</operator> <operator pos:start="45:48" pos:end="45:48">&lt;</operator> <sizeof pos:start="45:50" pos:end="45:61">sizeof<argument_list pos:start="45:56" pos:end="45:61">(<argument pos:start="45:57" pos:end="45:60"><expr pos:start="45:57" pos:end="45:60"><name pos:start="45:57" pos:end="45:60">buf1</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:63" pos:end="45:63">-</operator> <literal type="number" pos:start="45:65" pos:end="45:65">1</literal></expr>)</condition> <block pos:start="45:68" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:26">

            <expr_stmt pos:start="47:13" pos:end="47:26"><expr pos:start="47:13" pos:end="47:25"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:16">dst</name><operator pos:start="47:17" pos:end="47:18">++</operator> <operator pos:start="47:20" pos:end="47:20">=</operator> <operator pos:start="47:22" pos:end="47:22">*</operator><name pos:start="47:23" pos:end="47:23">p</name><operator pos:start="47:24" pos:end="47:25">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="51:9" pos:end="51:20"><expr pos:start="51:9" pos:end="51:19"><operator pos:start="51:9" pos:end="51:9">*</operator><name pos:start="51:10" pos:end="51:12">dst</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <literal type="char" pos:start="51:16" pos:end="51:19">'\0'</literal></expr>;</expr_stmt>



        <comment type="line" pos:start="55:9" pos:end="55:35">// a='framesize:96 320-240'</comment>

        <comment type="line" pos:start="57:9" pos:end="57:31">// set our parameters..</comment>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:13">codec</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">width</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:33"><name pos:start="59:24" pos:end="59:27">atoi</name><argument_list pos:start="59:28" pos:end="59:33">(<argument pos:start="59:29" pos:end="59:32"><expr pos:start="59:29" pos:end="59:32"><name pos:start="59:29" pos:end="59:32">buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:36"><expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:13">codec</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:21">height</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <call pos:start="61:25" pos:end="61:35"><name pos:start="61:25" pos:end="61:28">atoi</name><argument_list pos:start="61:29" pos:end="61:35">(<argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:30">p</name> <operator pos:start="61:32" pos:end="61:32">+</operator> <literal type="number" pos:start="61:34" pos:end="61:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="61:38" pos:end="61:50">// skip the -</comment>

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:13">codec</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:22">pix_fmt</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:40">PIX_FMT_YUV420P</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="69:5">else if <condition pos:start="65:15" pos:end="65:43">(<expr pos:start="65:16" pos:end="65:42"><call pos:start="65:16" pos:end="65:42"><name pos:start="65:16" pos:end="65:26">av_strstart</name><argument_list pos:start="65:27" pos:end="65:42">(<argument pos:start="65:28" pos:end="65:28"><expr pos:start="65:28" pos:end="65:28"><name pos:start="65:28" pos:end="65:28">p</name></expr></argument>, <argument pos:start="65:31" pos:end="65:37"><expr pos:start="65:31" pos:end="65:37"><literal type="string" pos:start="65:31" pos:end="65:37">"fmtp:"</literal></expr></argument>, <argument pos:start="65:40" pos:end="65:41"><expr pos:start="65:40" pos:end="65:41"><operator pos:start="65:40" pos:end="65:40">&amp;</operator><name pos:start="65:41" pos:end="65:41">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:45" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:79">

        <return pos:start="67:9" pos:end="67:79">return <expr pos:start="67:16" pos:end="67:78"><call pos:start="67:16" pos:end="67:78"><name pos:start="67:16" pos:end="67:28">ff_parse_fmtp</name><argument_list pos:start="67:29" pos:end="67:78">(<argument pos:start="67:30" pos:end="67:35"><expr pos:start="67:30" pos:end="67:35"><name pos:start="67:30" pos:end="67:35">stream</name></expr></argument>, <argument pos:start="67:38" pos:end="67:46"><expr pos:start="67:38" pos:end="67:46"><name pos:start="67:38" pos:end="67:46">h264_data</name></expr></argument>, <argument pos:start="67:49" pos:end="67:49"><expr pos:start="67:49" pos:end="67:49"><name pos:start="67:49" pos:end="67:49">p</name></expr></argument>, <argument pos:start="67:52" pos:end="67:77"><expr pos:start="67:52" pos:end="67:77"><name pos:start="67:52" pos:end="67:77">sdp_parse_fmtp_config_h264</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="73:5">else if <condition pos:start="69:15" pos:end="69:47">(<expr pos:start="69:16" pos:end="69:46"><call pos:start="69:16" pos:end="69:46"><name pos:start="69:16" pos:end="69:26">av_strstart</name><argument_list pos:start="69:27" pos:end="69:46">(<argument pos:start="69:28" pos:end="69:28"><expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">p</name></expr></argument>, <argument pos:start="69:31" pos:end="69:41"><expr pos:start="69:31" pos:end="69:41"><literal type="string" pos:start="69:31" pos:end="69:41">"cliprect:"</literal></expr></argument>, <argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><operator pos:start="69:44" pos:end="69:44">&amp;</operator><name pos:start="69:45" pos:end="69:45">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:49" pos:end="73:5">{<block_content>

        <comment type="line" pos:start="71:9" pos:end="71:39">// could use this if we wanted.</comment>

    </block_content>}</block></if></if_stmt>



    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>                   <comment type="line" pos:start="77:33" pos:end="77:71">// keep processing it the normal way...</comment>

</block_content>}</block></function>
</unit>
