<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7340.c" pos:tabs="8"><function pos:start="1:1" pos:end="347:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">expand_zero_clusters_in_l1</name><parameter_list pos:start="1:38" pos:end="5:60">(<parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:78"><decl pos:start="1:61" pos:end="1:78"><type pos:start="1:61" pos:end="1:78"><name pos:start="1:61" pos:end="1:68">uint64_t</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:78">l1_table</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:49">l1_size</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:78"><decl pos:start="3:52" pos:end="3:78"><type pos:start="3:52" pos:end="3:78"><name pos:start="3:52" pos:end="3:58">uint8_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier><modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:78">expanded_clusters</name></decl></parameter>,

                                      <parameter pos:start="5:39" pos:end="5:59"><decl pos:start="5:39" pos:end="5:59"><type pos:start="5:39" pos:end="5:59"><name pos:start="5:39" pos:end="5:46">uint64_t</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:59">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="347:1">{<block_content pos:start="9:5" pos:end="345:15">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:21">is_active_l1</name> <init pos:start="11:23" pos:end="11:49">= <expr pos:start="11:25" pos:end="11:49"><operator pos:start="11:25" pos:end="11:25">(</operator><name pos:start="11:26" pos:end="11:33">l1_table</name> <operator pos:start="11:35" pos:end="11:36">==</operator> <name pos:start="11:38" pos:end="11:48"><name pos:start="11:38" pos:end="11:38">s</name><operator pos:start="11:39" pos:end="11:40">-&gt;</operator><name pos:start="11:41" pos:end="11:48">l1_table</name></name><operator pos:start="11:49" pos:end="11:49">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint64_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:22">l2_table</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21">is_active_l1</name></expr>)</condition> <block pos:start="21:24" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:56">

        <comment type="block" pos:start="23:9" pos:end="25:28">/* inactive L2 tables require a buffer to be stored in when loading

         * them from disk */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:56"><expr pos:start="27:9" pos:end="27:55"><name pos:start="27:9" pos:end="27:16">l2_table</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:55"><name pos:start="27:20" pos:end="27:34">qemu_blockalign</name><argument_list pos:start="27:35" pos:end="27:55">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">bs</name></expr></argument>, <argument pos:start="27:40" pos:end="27:54"><expr pos:start="27:40" pos:end="27:54"><name pos:start="27:40" pos:end="27:54"><name pos:start="27:40" pos:end="27:40">s</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:54">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="33:5" pos:end="311:5">for <control pos:start="33:9" pos:end="33:33">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:28"><expr pos:start="33:17" pos:end="33:27"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:27">l1_size</name></expr>;</condition> <incr pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><name pos:start="33:30" pos:end="33:30">i</name><operator pos:start="33:31" pos:end="33:32">++</operator></expr></incr>)</control> <block pos:start="33:35" pos:end="311:5">{<block_content pos:start="35:9" pos:end="309:9">

        <decl_stmt pos:start="35:9" pos:end="35:59"><decl pos:start="35:9" pos:end="35:58"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">uint64_t</name></type> <name pos:start="35:18" pos:end="35:26">l2_offset</name> <init pos:start="35:28" pos:end="35:58">= <expr pos:start="35:30" pos:end="35:58"><name pos:start="35:30" pos:end="35:40"><name pos:start="35:30" pos:end="35:37">l1_table</name><index pos:start="35:38" pos:end="35:40">[<expr pos:start="35:39" pos:end="35:39"><name pos:start="35:39" pos:end="35:39">i</name></expr>]</index></name> <operator pos:start="35:42" pos:end="35:42">&amp;</operator> <name pos:start="35:44" pos:end="35:58">L1E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:30"><decl pos:start="37:9" pos:end="37:29"><type pos:start="37:9" pos:end="37:12"><name pos:start="37:9" pos:end="37:12">bool</name></type> <name pos:start="37:14" pos:end="37:21">l2_dirty</name> <init pos:start="37:23" pos:end="37:29">= <expr pos:start="37:25" pos:end="37:29"><name pos:start="37:25" pos:end="37:29">false</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:22">l2_offset</name></expr>)</condition> <block pos:start="41:25" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:21">

            <comment type="block" pos:start="43:13" pos:end="43:29">/* unallocated */</comment>

            <continue pos:start="45:13" pos:end="45:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="67:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:25">(<expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:24">is_active_l1</name></expr>)</condition> <block pos:start="51:27" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:40">

            <comment type="block" pos:start="53:13" pos:end="53:49">/* get active L2 tables from cache */</comment>

            <expr_stmt pos:start="55:13" pos:end="57:40"><expr pos:start="55:13" pos:end="57:39"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <call pos:start="55:19" pos:end="57:39"><name pos:start="55:19" pos:end="55:33">qcow2_cache_get</name><argument_list pos:start="55:34" pos:end="57:39">(<argument pos:start="55:35" pos:end="55:36"><expr pos:start="55:35" pos:end="55:36"><name pos:start="55:35" pos:end="55:36">bs</name></expr></argument>, <argument pos:start="55:39" pos:end="55:55"><expr pos:start="55:39" pos:end="55:55"><name pos:start="55:39" pos:end="55:55"><name pos:start="55:39" pos:end="55:39">s</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:55">l2_table_cache</name></name></expr></argument>, <argument pos:start="55:58" pos:end="55:66"><expr pos:start="55:58" pos:end="55:66"><name pos:start="55:58" pos:end="55:66">l2_offset</name></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:38"><expr pos:start="57:21" pos:end="57:38"><operator pos:start="57:21" pos:end="57:21">(</operator><name pos:start="57:22" pos:end="57:25">void</name> <operator pos:start="57:27" pos:end="57:27">*</operator><operator pos:start="57:28" pos:end="57:28">*</operator><operator pos:start="57:29" pos:end="57:29">)</operator><operator pos:start="57:30" pos:end="57:30">&amp;</operator><name pos:start="57:31" pos:end="57:38">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="67:9">else <block pos:start="59:16" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:58">

            <comment type="block" pos:start="61:13" pos:end="61:51">/* load inactive L2 tables from disk */</comment>

            <expr_stmt pos:start="63:13" pos:end="65:58"><expr pos:start="63:13" pos:end="65:57"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="65:57"><name pos:start="63:19" pos:end="63:27">bdrv_read</name><argument_list pos:start="63:28" pos:end="65:57">(<argument pos:start="63:29" pos:end="63:36"><expr pos:start="63:29" pos:end="63:36"><name pos:start="63:29" pos:end="63:36"><name pos:start="63:29" pos:end="63:30">bs</name><operator pos:start="63:31" pos:end="63:32">-&gt;</operator><name pos:start="63:33" pos:end="63:36">file</name></name></expr></argument>, <argument pos:start="63:39" pos:end="63:66"><expr pos:start="63:39" pos:end="63:66"><name pos:start="63:39" pos:end="63:47">l2_offset</name> <operator pos:start="63:49" pos:end="63:49">/</operator> <name pos:start="63:51" pos:end="63:66">BDRV_SECTOR_SIZE</name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:36"><expr pos:start="65:21" pos:end="65:36"><operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:25">void</name> <operator pos:start="65:27" pos:end="65:27">*</operator><operator pos:start="65:28" pos:end="65:28">)</operator><name pos:start="65:29" pos:end="65:36">l2_table</name></expr></argument>, <argument pos:start="65:39" pos:end="65:56"><expr pos:start="65:39" pos:end="65:56"><name pos:start="65:39" pos:end="65:56"><name pos:start="65:39" pos:end="65:39">s</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:56">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>)</condition> <block pos:start="69:22" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:22">

            <goto pos:start="71:13" pos:end="71:22">goto <name pos:start="71:18" pos:end="71:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="77:9" pos:end="255:9">for <control pos:start="77:13" pos:end="77:40">(<init pos:start="77:14" pos:end="77:19"><expr pos:start="77:14" pos:end="77:18"><name pos:start="77:14" pos:end="77:14">j</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</init> <condition pos:start="77:21" pos:end="77:35"><expr pos:start="77:21" pos:end="77:34"><name pos:start="77:21" pos:end="77:21">j</name> <operator pos:start="77:23" pos:end="77:23">&lt;</operator> <name pos:start="77:25" pos:end="77:34"><name pos:start="77:25" pos:end="77:25">s</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:34">l2_size</name></name></expr>;</condition> <incr pos:start="77:37" pos:end="77:39"><expr pos:start="77:37" pos:end="77:39"><name pos:start="77:37" pos:end="77:37">j</name><operator pos:start="77:38" pos:end="77:39">++</operator></expr></incr>)</control> <block pos:start="77:42" pos:end="255:9">{<block_content pos:start="79:13" pos:end="253:80">

            <decl_stmt pos:start="79:13" pos:end="79:57"><decl pos:start="79:13" pos:end="79:56"><type pos:start="79:13" pos:end="79:20"><name pos:start="79:13" pos:end="79:20">uint64_t</name></type> <name pos:start="79:22" pos:end="79:29">l2_entry</name> <init pos:start="79:31" pos:end="79:56">= <expr pos:start="79:33" pos:end="79:56"><call pos:start="79:33" pos:end="79:56"><name pos:start="79:33" pos:end="79:43">be64_to_cpu</name><argument_list pos:start="79:44" pos:end="79:56">(<argument pos:start="79:45" pos:end="79:55"><expr pos:start="79:45" pos:end="79:55"><name pos:start="79:45" pos:end="79:55"><name pos:start="79:45" pos:end="79:52">l2_table</name><index pos:start="79:53" pos:end="79:55">[<expr pos:start="79:54" pos:end="79:54"><name pos:start="79:54" pos:end="79:54">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:71"><decl pos:start="81:13" pos:end="81:55"><type pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:19">int64_t</name></type> <name pos:start="81:21" pos:end="81:26">offset</name> <init pos:start="81:28" pos:end="81:55">= <expr pos:start="81:30" pos:end="81:55"><name pos:start="81:30" pos:end="81:37">l2_entry</name> <operator pos:start="81:39" pos:end="81:39">&amp;</operator> <name pos:start="81:41" pos:end="81:55">L2E_OFFSET_MASK</name></expr></init></decl>, <decl pos:start="81:58" pos:end="81:70"><type ref="prev" pos:start="81:13" pos:end="81:19"/><name pos:start="81:58" pos:end="81:70">cluster_index</name></decl>;</decl_stmt>

            <decl_stmt pos:start="83:13" pos:end="83:64"><decl pos:start="83:13" pos:end="83:63"><type pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">int</name></type> <name pos:start="83:17" pos:end="83:28">cluster_type</name> <init pos:start="83:30" pos:end="83:63">= <expr pos:start="83:32" pos:end="83:63"><call pos:start="83:32" pos:end="83:63"><name pos:start="83:32" pos:end="83:53">qcow2_get_cluster_type</name><argument_list pos:start="83:54" pos:end="83:63">(<argument pos:start="83:55" pos:end="83:62"><expr pos:start="83:55" pos:end="83:62"><name pos:start="83:55" pos:end="83:62">l2_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:44"><decl pos:start="85:13" pos:end="85:43"><type pos:start="85:13" pos:end="85:16"><name pos:start="85:13" pos:end="85:16">bool</name></type> <name pos:start="85:18" pos:end="85:29">preallocated</name> <init pos:start="85:31" pos:end="85:43">= <expr pos:start="85:33" pos:end="85:43"><name pos:start="85:33" pos:end="85:38">offset</name> <operator pos:start="85:40" pos:end="85:41">!=</operator> <literal type="number" pos:start="85:43" pos:end="85:43">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="89:13" pos:end="133:13"><if pos:start="89:13" pos:end="127:13">if <condition pos:start="89:16" pos:end="89:53">(<expr pos:start="89:17" pos:end="89:52"><name pos:start="89:17" pos:end="89:28">cluster_type</name> <operator pos:start="89:30" pos:end="89:31">==</operator> <name pos:start="89:33" pos:end="89:52">QCOW2_CLUSTER_NORMAL</name></expr>)</condition> <block pos:start="89:55" pos:end="127:13">{<block_content pos:start="91:17" pos:end="125:25">

                <expr_stmt pos:start="91:17" pos:end="91:58"><expr pos:start="91:17" pos:end="91:57"><name pos:start="91:17" pos:end="91:29">cluster_index</name> <operator pos:start="91:31" pos:end="91:31">=</operator> <name pos:start="91:33" pos:end="91:38">offset</name> <operator pos:start="91:40" pos:end="91:41">&gt;&gt;</operator> <name pos:start="91:43" pos:end="91:57"><name pos:start="91:43" pos:end="91:43">s</name><operator pos:start="91:44" pos:end="91:45">-&gt;</operator><name pos:start="91:46" pos:end="91:57">cluster_bits</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:79"><expr pos:start="93:17" pos:end="93:78"><call pos:start="93:17" pos:end="93:78"><name pos:start="93:17" pos:end="93:22">assert</name><argument_list pos:start="93:23" pos:end="93:78">(<argument pos:start="93:24" pos:end="93:77"><expr pos:start="93:24" pos:end="93:77"><operator pos:start="93:24" pos:end="93:24">(</operator><name pos:start="93:25" pos:end="93:37">cluster_index</name> <operator pos:start="93:39" pos:end="93:40">&gt;=</operator> <literal type="number" pos:start="93:42" pos:end="93:42">0</literal><operator pos:start="93:43" pos:end="93:43">)</operator> <operator pos:start="93:45" pos:end="93:46">&amp;&amp;</operator> <operator pos:start="93:48" pos:end="93:48">(</operator><name pos:start="93:49" pos:end="93:61">cluster_index</name> <operator pos:start="93:63" pos:end="93:63">&lt;</operator> <operator pos:start="93:65" pos:end="93:65">*</operator><name pos:start="93:66" pos:end="93:76">nb_clusters</name><operator pos:start="93:77" pos:end="93:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="95:17" pos:end="123:17"><if pos:start="95:17" pos:end="123:17">if <condition pos:start="95:20" pos:end="97:47">(<expr pos:start="95:21" pos:end="97:46"><operator pos:start="95:21" pos:end="95:21">(</operator><operator pos:start="95:22" pos:end="95:22">*</operator><name pos:start="95:23" pos:end="95:39">expanded_clusters</name><operator pos:start="95:40" pos:end="95:40">)</operator><index pos:start="95:41" pos:end="95:59">[<expr pos:start="95:42" pos:end="95:58"><name pos:start="95:42" pos:end="95:54">cluster_index</name> <operator pos:start="95:56" pos:end="95:56">/</operator> <literal type="number" pos:start="95:58" pos:end="95:58">8</literal></expr>]</index> <operator pos:start="95:61" pos:end="95:61">&amp;</operator>

                    <operator pos:start="97:21" pos:end="97:21">(</operator><literal type="number" pos:start="97:22" pos:end="97:22">1</literal> <operator pos:start="97:24" pos:end="97:25">&lt;&lt;</operator> <operator pos:start="97:27" pos:end="97:27">(</operator><name pos:start="97:28" pos:end="97:40">cluster_index</name> <operator pos:start="97:42" pos:end="97:42">%</operator> <literal type="number" pos:start="97:44" pos:end="97:44">8</literal><operator pos:start="97:45" pos:end="97:45">)</operator><operator pos:start="97:46" pos:end="97:46">)</operator></expr>)</condition> <block pos:start="97:49" pos:end="123:17">{<block_content pos:start="105:21" pos:end="121:36">

                    <comment type="block" pos:start="99:21" pos:end="103:67">/* Probably a shared L2 table; this cluster was a zero

                     * cluster which has been expanded, its refcount

                     * therefore most likely requires an update. */</comment>

                    <expr_stmt pos:start="105:21" pos:end="107:77"><expr pos:start="105:21" pos:end="107:76"><name pos:start="105:21" pos:end="105:23">ret</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="107:76"><name pos:start="105:27" pos:end="105:55">qcow2_update_cluster_refcount</name><argument_list pos:start="105:56" pos:end="107:76">(<argument pos:start="105:57" pos:end="105:58"><expr pos:start="105:57" pos:end="105:58"><name pos:start="105:57" pos:end="105:58">bs</name></expr></argument>, <argument pos:start="105:61" pos:end="105:73"><expr pos:start="105:61" pos:end="105:73"><name pos:start="105:61" pos:end="105:73">cluster_index</name></expr></argument>, <argument pos:start="105:76" pos:end="105:76"><expr pos:start="105:76" pos:end="105:76"><literal type="number" pos:start="105:76" pos:end="105:76">1</literal></expr></argument>,

                                                        <argument pos:start="107:57" pos:end="107:75"><expr pos:start="107:57" pos:end="107:75"><name pos:start="107:57" pos:end="107:75">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="109:21" pos:end="113:21"><if pos:start="109:21" pos:end="113:21">if <condition pos:start="109:24" pos:end="109:32">(<expr pos:start="109:25" pos:end="109:31"><name pos:start="109:25" pos:end="109:27">ret</name> <operator pos:start="109:29" pos:end="109:29">&lt;</operator> <literal type="number" pos:start="109:31" pos:end="109:31">0</literal></expr>)</condition> <block pos:start="109:34" pos:end="113:21">{<block_content pos:start="111:25" pos:end="111:34">

                        <goto pos:start="111:25" pos:end="111:34">goto <name pos:start="111:30" pos:end="111:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="115:21" pos:end="117:43">/* Since we just increased the refcount, the COPIED flag may

                     * no longer be set. */</comment>

                    <expr_stmt pos:start="119:21" pos:end="119:77"><expr pos:start="119:21" pos:end="119:76"><name pos:start="119:21" pos:end="119:31"><name pos:start="119:21" pos:end="119:28">l2_table</name><index pos:start="119:29" pos:end="119:31">[<expr pos:start="119:30" pos:end="119:30"><name pos:start="119:30" pos:end="119:30">j</name></expr>]</index></name> <operator pos:start="119:33" pos:end="119:33">=</operator> <call pos:start="119:35" pos:end="119:76"><name pos:start="119:35" pos:end="119:45">cpu_to_be64</name><argument_list pos:start="119:46" pos:end="119:76">(<argument pos:start="119:47" pos:end="119:75"><expr pos:start="119:47" pos:end="119:75"><name pos:start="119:47" pos:end="119:54">l2_entry</name> <operator pos:start="119:56" pos:end="119:56">&amp;</operator> <operator pos:start="119:58" pos:end="119:58">~</operator><name pos:start="119:59" pos:end="119:75">QCOW_OFLAG_COPIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:36"><expr pos:start="121:21" pos:end="121:35"><name pos:start="121:21" pos:end="121:28">l2_dirty</name> <operator pos:start="121:30" pos:end="121:30">=</operator> <name pos:start="121:32" pos:end="121:35">true</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <continue pos:start="125:17" pos:end="125:25">continue;</continue>

            </block_content>}</block></if>

            <if type="elseif" pos:start="129:13" pos:end="133:13">else if <condition pos:start="129:21" pos:end="129:76">(<expr pos:start="129:22" pos:end="129:75"><call pos:start="129:22" pos:end="129:53"><name pos:start="129:22" pos:end="129:43">qcow2_get_cluster_type</name><argument_list pos:start="129:44" pos:end="129:53">(<argument pos:start="129:45" pos:end="129:52"><expr pos:start="129:45" pos:end="129:52"><name pos:start="129:45" pos:end="129:52">l2_entry</name></expr></argument>)</argument_list></call> <operator pos:start="129:55" pos:end="129:56">!=</operator> <name pos:start="129:58" pos:end="129:75">QCOW2_CLUSTER_ZERO</name></expr>)</condition> <block pos:start="129:78" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:25">

                <continue pos:start="131:17" pos:end="131:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="137:13" pos:end="165:13"><if pos:start="137:13" pos:end="165:13">if <condition pos:start="137:16" pos:end="137:30">(<expr pos:start="137:17" pos:end="137:29"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:29">preallocated</name></expr>)</condition> <block pos:start="137:32" pos:end="165:13">{<block_content pos:start="139:17" pos:end="163:17">

                <if_stmt pos:start="139:17" pos:end="151:17"><if pos:start="139:17" pos:end="151:17">if <condition pos:start="139:20" pos:end="139:36">(<expr pos:start="139:21" pos:end="139:35"><operator pos:start="139:21" pos:end="139:21">!</operator><name pos:start="139:22" pos:end="139:35"><name pos:start="139:22" pos:end="139:23">bs</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:35">backing_hd</name></name></expr>)</condition> <block pos:start="139:38" pos:end="151:17">{<block_content pos:start="145:21" pos:end="149:29">

                    <comment type="block" pos:start="141:21" pos:end="143:33">/* not backed; therefore we can simply deallocate the

                     * cluster */</comment>

                    <expr_stmt pos:start="145:21" pos:end="145:36"><expr pos:start="145:21" pos:end="145:35"><name pos:start="145:21" pos:end="145:31"><name pos:start="145:21" pos:end="145:28">l2_table</name><index pos:start="145:29" pos:end="145:31">[<expr pos:start="145:30" pos:end="145:30"><name pos:start="145:30" pos:end="145:30">j</name></expr>]</index></name> <operator pos:start="145:33" pos:end="145:33">=</operator> <literal type="number" pos:start="145:35" pos:end="145:35">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:36"><expr pos:start="147:21" pos:end="147:35"><name pos:start="147:21" pos:end="147:28">l2_dirty</name> <operator pos:start="147:30" pos:end="147:30">=</operator> <name pos:start="147:32" pos:end="147:35">true</name></expr>;</expr_stmt>

                    <continue pos:start="149:21" pos:end="149:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="155:17" pos:end="155:67"><expr pos:start="155:17" pos:end="155:66"><name pos:start="155:17" pos:end="155:22">offset</name> <operator pos:start="155:24" pos:end="155:24">=</operator> <call pos:start="155:26" pos:end="155:66"><name pos:start="155:26" pos:end="155:45">qcow2_alloc_clusters</name><argument_list pos:start="155:46" pos:end="155:66">(<argument pos:start="155:47" pos:end="155:48"><expr pos:start="155:47" pos:end="155:48"><name pos:start="155:47" pos:end="155:48">bs</name></expr></argument>, <argument pos:start="155:51" pos:end="155:65"><expr pos:start="155:51" pos:end="155:65"><name pos:start="155:51" pos:end="155:65"><name pos:start="155:51" pos:end="155:51">s</name><operator pos:start="155:52" pos:end="155:53">-&gt;</operator><name pos:start="155:54" pos:end="155:65">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="163:17"><if pos:start="157:17" pos:end="163:17">if <condition pos:start="157:20" pos:end="157:31">(<expr pos:start="157:21" pos:end="157:30"><name pos:start="157:21" pos:end="157:26">offset</name> <operator pos:start="157:28" pos:end="157:28">&lt;</operator> <literal type="number" pos:start="157:30" pos:end="157:30">0</literal></expr>)</condition> <block pos:start="157:33" pos:end="163:17">{<block_content pos:start="159:21" pos:end="161:30">

                    <expr_stmt pos:start="159:21" pos:end="159:33"><expr pos:start="159:21" pos:end="159:32"><name pos:start="159:21" pos:end="159:23">ret</name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:32">offset</name></expr>;</expr_stmt>

                    <goto pos:start="161:21" pos:end="161:30">goto <name pos:start="161:26" pos:end="161:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="169:13" pos:end="171:73"><expr pos:start="169:13" pos:end="171:72"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="171:72"><name pos:start="169:19" pos:end="169:47">qcow2_pre_write_overlap_check</name><argument_list pos:start="169:48" pos:end="171:72">(<argument pos:start="169:49" pos:end="169:50"><expr pos:start="169:49" pos:end="169:50"><name pos:start="169:49" pos:end="169:50">bs</name></expr></argument>, <argument pos:start="169:53" pos:end="169:68"><expr pos:start="169:53" pos:end="169:68"><name pos:start="169:53" pos:end="169:68">QCOW2_OL_DEFAULT</name></expr></argument>,

                                                <argument pos:start="171:49" pos:end="171:54"><expr pos:start="171:49" pos:end="171:54"><name pos:start="171:49" pos:end="171:54">offset</name></expr></argument>, <argument pos:start="171:57" pos:end="171:71"><expr pos:start="171:57" pos:end="171:71"><name pos:start="171:57" pos:end="171:71"><name pos:start="171:57" pos:end="171:57">s</name><operator pos:start="171:58" pos:end="171:59">-&gt;</operator><name pos:start="171:60" pos:end="171:71">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="185:13"><if pos:start="173:13" pos:end="185:13">if <condition pos:start="173:16" pos:end="173:24">(<expr pos:start="173:17" pos:end="173:23"><name pos:start="173:17" pos:end="173:19">ret</name> <operator pos:start="173:21" pos:end="173:21">&lt;</operator> <literal type="number" pos:start="173:23" pos:end="173:23">0</literal></expr>)</condition> <block pos:start="173:26" pos:end="185:13">{<block_content pos:start="175:17" pos:end="183:26">

                <if_stmt pos:start="175:17" pos:end="181:17"><if pos:start="175:17" pos:end="181:17">if <condition pos:start="175:20" pos:end="175:34">(<expr pos:start="175:21" pos:end="175:33"><operator pos:start="175:21" pos:end="175:21">!</operator><name pos:start="175:22" pos:end="175:33">preallocated</name></expr>)</condition> <block pos:start="175:36" pos:end="181:17">{<block_content pos:start="177:21" pos:end="179:62">

                    <expr_stmt pos:start="177:21" pos:end="179:62"><expr pos:start="177:21" pos:end="179:61"><call pos:start="177:21" pos:end="179:61"><name pos:start="177:21" pos:end="177:39">qcow2_free_clusters</name><argument_list pos:start="177:40" pos:end="179:61">(<argument pos:start="177:41" pos:end="177:42"><expr pos:start="177:41" pos:end="177:42"><name pos:start="177:41" pos:end="177:42">bs</name></expr></argument>, <argument pos:start="177:45" pos:end="177:50"><expr pos:start="177:45" pos:end="177:50"><name pos:start="177:45" pos:end="177:50">offset</name></expr></argument>, <argument pos:start="177:53" pos:end="177:67"><expr pos:start="177:53" pos:end="177:67"><name pos:start="177:53" pos:end="177:67"><name pos:start="177:53" pos:end="177:53">s</name><operator pos:start="177:54" pos:end="177:55">-&gt;</operator><name pos:start="177:56" pos:end="177:67">cluster_size</name></name></expr></argument>,

                                        <argument pos:start="179:41" pos:end="179:60"><expr pos:start="179:41" pos:end="179:60"><name pos:start="179:41" pos:end="179:60">QCOW2_DISCARD_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <goto pos:start="183:17" pos:end="183:26">goto <name pos:start="183:22" pos:end="183:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="189:13" pos:end="191:56"><expr pos:start="189:13" pos:end="191:55"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="191:55"><name pos:start="189:19" pos:end="189:35">bdrv_write_zeroes</name><argument_list pos:start="189:36" pos:end="191:55">(<argument pos:start="189:37" pos:end="189:44"><expr pos:start="189:37" pos:end="189:44"><name pos:start="189:37" pos:end="189:44"><name pos:start="189:37" pos:end="189:38">bs</name><operator pos:start="189:39" pos:end="189:40">-&gt;</operator><name pos:start="189:41" pos:end="189:44">file</name></name></expr></argument>, <argument pos:start="189:47" pos:end="189:71"><expr pos:start="189:47" pos:end="189:71"><name pos:start="189:47" pos:end="189:52">offset</name> <operator pos:start="189:54" pos:end="189:54">/</operator> <name pos:start="189:56" pos:end="189:71">BDRV_SECTOR_SIZE</name></expr></argument>,

                                    <argument pos:start="191:37" pos:end="191:54"><expr pos:start="191:37" pos:end="191:54"><name pos:start="191:37" pos:end="191:54"><name pos:start="191:37" pos:end="191:37">s</name><operator pos:start="191:38" pos:end="191:39">-&gt;</operator><name pos:start="191:40" pos:end="191:54">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="205:13"><if pos:start="193:13" pos:end="205:13">if <condition pos:start="193:16" pos:end="193:24">(<expr pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:19">ret</name> <operator pos:start="193:21" pos:end="193:21">&lt;</operator> <literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>)</condition> <block pos:start="193:26" pos:end="205:13">{<block_content pos:start="195:17" pos:end="203:26">

                <if_stmt pos:start="195:17" pos:end="201:17"><if pos:start="195:17" pos:end="201:17">if <condition pos:start="195:20" pos:end="195:34">(<expr pos:start="195:21" pos:end="195:33"><operator pos:start="195:21" pos:end="195:21">!</operator><name pos:start="195:22" pos:end="195:33">preallocated</name></expr>)</condition> <block pos:start="195:36" pos:end="201:17">{<block_content pos:start="197:21" pos:end="199:62">

                    <expr_stmt pos:start="197:21" pos:end="199:62"><expr pos:start="197:21" pos:end="199:61"><call pos:start="197:21" pos:end="199:61"><name pos:start="197:21" pos:end="197:39">qcow2_free_clusters</name><argument_list pos:start="197:40" pos:end="199:61">(<argument pos:start="197:41" pos:end="197:42"><expr pos:start="197:41" pos:end="197:42"><name pos:start="197:41" pos:end="197:42">bs</name></expr></argument>, <argument pos:start="197:45" pos:end="197:50"><expr pos:start="197:45" pos:end="197:50"><name pos:start="197:45" pos:end="197:50">offset</name></expr></argument>, <argument pos:start="197:53" pos:end="197:67"><expr pos:start="197:53" pos:end="197:67"><name pos:start="197:53" pos:end="197:67"><name pos:start="197:53" pos:end="197:53">s</name><operator pos:start="197:54" pos:end="197:55">-&gt;</operator><name pos:start="197:56" pos:end="197:67">cluster_size</name></name></expr></argument>,

                                        <argument pos:start="199:41" pos:end="199:60"><expr pos:start="199:41" pos:end="199:60"><name pos:start="199:41" pos:end="199:60">QCOW2_DISCARD_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <goto pos:start="203:17" pos:end="203:26">goto <name pos:start="203:22" pos:end="203:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="209:13" pos:end="209:66"><expr pos:start="209:13" pos:end="209:65"><name pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:20">l2_table</name><index pos:start="209:21" pos:end="209:23">[<expr pos:start="209:22" pos:end="209:22"><name pos:start="209:22" pos:end="209:22">j</name></expr>]</index></name> <operator pos:start="209:25" pos:end="209:25">=</operator> <call pos:start="209:27" pos:end="209:65"><name pos:start="209:27" pos:end="209:37">cpu_to_be64</name><argument_list pos:start="209:38" pos:end="209:65">(<argument pos:start="209:39" pos:end="209:64"><expr pos:start="209:39" pos:end="209:64"><name pos:start="209:39" pos:end="209:44">offset</name> <operator pos:start="209:46" pos:end="209:46">|</operator> <name pos:start="209:48" pos:end="209:64">QCOW_OFLAG_COPIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:28"><expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:20">l2_dirty</name> <operator pos:start="211:22" pos:end="211:22">=</operator> <name pos:start="211:24" pos:end="211:27">true</name></expr>;</expr_stmt>



            <expr_stmt pos:start="215:13" pos:end="215:54"><expr pos:start="215:13" pos:end="215:53"><name pos:start="215:13" pos:end="215:25">cluster_index</name> <operator pos:start="215:27" pos:end="215:27">=</operator> <name pos:start="215:29" pos:end="215:34">offset</name> <operator pos:start="215:36" pos:end="215:37">&gt;&gt;</operator> <name pos:start="215:39" pos:end="215:53"><name pos:start="215:39" pos:end="215:39">s</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:53">cluster_bits</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="219:13" pos:end="247:13"><if pos:start="219:13" pos:end="247:13">if <condition pos:start="219:16" pos:end="219:46">(<expr pos:start="219:17" pos:end="219:45"><name pos:start="219:17" pos:end="219:29">cluster_index</name> <operator pos:start="219:31" pos:end="219:32">&gt;=</operator> <operator pos:start="219:34" pos:end="219:34">*</operator><name pos:start="219:35" pos:end="219:45">nb_clusters</name></expr>)</condition> <block pos:start="219:48" pos:end="247:13">{<block_content pos:start="221:17" pos:end="245:58">

                <decl_stmt pos:start="221:17" pos:end="221:66"><decl pos:start="221:17" pos:end="221:65"><type pos:start="221:17" pos:end="221:24"><name pos:start="221:17" pos:end="221:24">uint64_t</name></type> <name pos:start="221:26" pos:end="221:40">old_bitmap_size</name> <init pos:start="221:42" pos:end="221:65">= <expr pos:start="221:44" pos:end="221:65"><operator pos:start="221:44" pos:end="221:44">(</operator><operator pos:start="221:45" pos:end="221:45">*</operator><name pos:start="221:46" pos:end="221:56">nb_clusters</name> <operator pos:start="221:58" pos:end="221:58">+</operator> <literal type="number" pos:start="221:60" pos:end="221:60">7</literal><operator pos:start="221:61" pos:end="221:61">)</operator> <operator pos:start="221:63" pos:end="221:63">/</operator> <literal type="number" pos:start="221:65" pos:end="221:65">8</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="223:17" pos:end="223:41"><decl pos:start="223:17" pos:end="223:40"><type pos:start="223:17" pos:end="223:24"><name pos:start="223:17" pos:end="223:24">uint64_t</name></type> <name pos:start="223:26" pos:end="223:40">new_bitmap_size</name></decl>;</decl_stmt>

                <comment type="block" pos:start="225:17" pos:end="227:50">/* The offset may lie beyond the old end of the underlying image

                 * file for growable files only */</comment>

                <expr_stmt pos:start="229:17" pos:end="229:43"><expr pos:start="229:17" pos:end="229:42"><call pos:start="229:17" pos:end="229:42"><name pos:start="229:17" pos:end="229:22">assert</name><argument_list pos:start="229:23" pos:end="229:42">(<argument pos:start="229:24" pos:end="229:41"><expr pos:start="229:24" pos:end="229:41"><name pos:start="229:24" pos:end="229:41"><name pos:start="229:24" pos:end="229:25">bs</name><operator pos:start="229:26" pos:end="229:27">-&gt;</operator><name pos:start="229:28" pos:end="229:31">file</name><operator pos:start="229:32" pos:end="229:33">-&gt;</operator><name pos:start="229:34" pos:end="229:41">growable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="233:66"><expr pos:start="231:17" pos:end="233:65"><operator pos:start="231:17" pos:end="231:17">*</operator><name pos:start="231:18" pos:end="231:28">nb_clusters</name> <operator pos:start="231:30" pos:end="231:30">=</operator> <call pos:start="231:32" pos:end="233:65"><name pos:start="231:32" pos:end="231:47">size_to_clusters</name><argument_list pos:start="231:48" pos:end="233:65">(<argument pos:start="231:49" pos:end="231:49"><expr pos:start="231:49" pos:end="231:49"><name pos:start="231:49" pos:end="231:49">s</name></expr></argument>, <argument pos:start="231:52" pos:end="233:64"><expr pos:start="231:52" pos:end="233:64"><name pos:start="231:52" pos:end="231:74"><name pos:start="231:52" pos:end="231:53">bs</name><operator pos:start="231:54" pos:end="231:55">-&gt;</operator><name pos:start="231:56" pos:end="231:59">file</name><operator pos:start="231:60" pos:end="231:61">-&gt;</operator><name pos:start="231:62" pos:end="231:74">total_sectors</name></name> <operator pos:start="231:76" pos:end="231:76">*</operator>

                                                <name pos:start="233:49" pos:end="233:64">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:57"><expr pos:start="235:17" pos:end="235:56"><name pos:start="235:17" pos:end="235:31">new_bitmap_size</name> <operator pos:start="235:33" pos:end="235:33">=</operator> <operator pos:start="235:35" pos:end="235:35">(</operator><operator pos:start="235:36" pos:end="235:36">*</operator><name pos:start="235:37" pos:end="235:47">nb_clusters</name> <operator pos:start="235:49" pos:end="235:49">+</operator> <literal type="number" pos:start="235:51" pos:end="235:51">7</literal><operator pos:start="235:52" pos:end="235:52">)</operator> <operator pos:start="235:54" pos:end="235:54">/</operator> <literal type="number" pos:start="235:56" pos:end="235:56">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="239:64"><expr pos:start="237:17" pos:end="239:63"><operator pos:start="237:17" pos:end="237:17">*</operator><name pos:start="237:18" pos:end="237:34">expanded_clusters</name> <operator pos:start="237:36" pos:end="237:36">=</operator> <call pos:start="237:38" pos:end="239:63"><name pos:start="237:38" pos:end="237:46">g_realloc</name><argument_list pos:start="237:47" pos:end="239:63">(<argument pos:start="237:48" pos:end="237:65"><expr pos:start="237:48" pos:end="237:65"><operator pos:start="237:48" pos:end="237:48">*</operator><name pos:start="237:49" pos:end="237:65">expanded_clusters</name></expr></argument>,

                                               <argument pos:start="239:48" pos:end="239:62"><expr pos:start="239:48" pos:end="239:62"><name pos:start="239:48" pos:end="239:62">new_bitmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="241:17" pos:end="241:53">/* clear the newly allocated space */</comment>

                <expr_stmt pos:start="243:17" pos:end="245:58"><expr pos:start="243:17" pos:end="245:57"><call pos:start="243:17" pos:end="245:57"><name pos:start="243:17" pos:end="243:22">memset</name><argument_list pos:start="243:23" pos:end="245:57">(<argument pos:start="243:24" pos:end="243:61"><expr pos:start="243:24" pos:end="243:61"><operator pos:start="243:24" pos:end="243:24">&amp;</operator><operator pos:start="243:25" pos:end="243:25">(</operator><operator pos:start="243:26" pos:end="243:26">*</operator><name pos:start="243:27" pos:end="243:43">expanded_clusters</name><operator pos:start="243:44" pos:end="243:44">)</operator><index pos:start="243:45" pos:end="243:61">[<expr pos:start="243:46" pos:end="243:60"><name pos:start="243:46" pos:end="243:60">old_bitmap_size</name></expr>]</index></expr></argument>, <argument pos:start="243:64" pos:end="243:64"><expr pos:start="243:64" pos:end="243:64"><literal type="number" pos:start="243:64" pos:end="243:64">0</literal></expr></argument>,

                       <argument pos:start="245:24" pos:end="245:56"><expr pos:start="245:24" pos:end="245:56"><name pos:start="245:24" pos:end="245:38">new_bitmap_size</name> <operator pos:start="245:40" pos:end="245:40">-</operator> <name pos:start="245:42" pos:end="245:56">old_bitmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="251:13" pos:end="251:75"><expr pos:start="251:13" pos:end="251:74"><call pos:start="251:13" pos:end="251:74"><name pos:start="251:13" pos:end="251:18">assert</name><argument_list pos:start="251:19" pos:end="251:74">(<argument pos:start="251:20" pos:end="251:73"><expr pos:start="251:20" pos:end="251:73"><operator pos:start="251:20" pos:end="251:20">(</operator><name pos:start="251:21" pos:end="251:33">cluster_index</name> <operator pos:start="251:35" pos:end="251:36">&gt;=</operator> <literal type="number" pos:start="251:38" pos:end="251:38">0</literal><operator pos:start="251:39" pos:end="251:39">)</operator> <operator pos:start="251:41" pos:end="251:42">&amp;&amp;</operator> <operator pos:start="251:44" pos:end="251:44">(</operator><name pos:start="251:45" pos:end="251:57">cluster_index</name> <operator pos:start="251:59" pos:end="251:59">&lt;</operator> <operator pos:start="251:61" pos:end="251:61">*</operator><name pos:start="251:62" pos:end="251:72">nb_clusters</name><operator pos:start="251:73" pos:end="251:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:80"><expr pos:start="253:13" pos:end="253:79"><operator pos:start="253:13" pos:end="253:13">(</operator><operator pos:start="253:14" pos:end="253:14">*</operator><name pos:start="253:15" pos:end="253:31">expanded_clusters</name><operator pos:start="253:32" pos:end="253:32">)</operator><index pos:start="253:33" pos:end="253:51">[<expr pos:start="253:34" pos:end="253:50"><name pos:start="253:34" pos:end="253:46">cluster_index</name> <operator pos:start="253:48" pos:end="253:48">/</operator> <literal type="number" pos:start="253:50" pos:end="253:50">8</literal></expr>]</index> <operator pos:start="253:53" pos:end="253:54">|=</operator> <literal type="number" pos:start="253:56" pos:end="253:56">1</literal> <operator pos:start="253:58" pos:end="253:59">&lt;&lt;</operator> <operator pos:start="253:61" pos:end="253:61">(</operator><name pos:start="253:62" pos:end="253:74">cluster_index</name> <operator pos:start="253:76" pos:end="253:76">%</operator> <literal type="number" pos:start="253:78" pos:end="253:78">8</literal><operator pos:start="253:79" pos:end="253:79">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="259:9" pos:end="309:9"><if pos:start="259:9" pos:end="279:9">if <condition pos:start="259:12" pos:end="259:25">(<expr pos:start="259:13" pos:end="259:24"><name pos:start="259:13" pos:end="259:24">is_active_l1</name></expr>)</condition> <block pos:start="259:27" pos:end="279:9">{<block_content pos:start="261:13" pos:end="277:13">

            <if_stmt pos:start="261:13" pos:end="267:13"><if pos:start="261:13" pos:end="267:13">if <condition pos:start="261:16" pos:end="261:25">(<expr pos:start="261:17" pos:end="261:24"><name pos:start="261:17" pos:end="261:24">l2_dirty</name></expr>)</condition> <block pos:start="261:27" pos:end="267:13">{<block_content pos:start="263:17" pos:end="265:64">

                <expr_stmt pos:start="263:17" pos:end="263:74"><expr pos:start="263:17" pos:end="263:73"><call pos:start="263:17" pos:end="263:73"><name pos:start="263:17" pos:end="263:44">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="263:45" pos:end="263:73">(<argument pos:start="263:46" pos:end="263:62"><expr pos:start="263:46" pos:end="263:62"><name pos:start="263:46" pos:end="263:62"><name pos:start="263:46" pos:end="263:46">s</name><operator pos:start="263:47" pos:end="263:48">-&gt;</operator><name pos:start="263:49" pos:end="263:62">l2_table_cache</name></name></expr></argument>, <argument pos:start="263:65" pos:end="263:72"><expr pos:start="263:65" pos:end="263:72"><name pos:start="263:65" pos:end="263:72">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:64"><expr pos:start="265:17" pos:end="265:63"><call pos:start="265:17" pos:end="265:63"><name pos:start="265:17" pos:end="265:44">qcow2_cache_depends_on_flush</name><argument_list pos:start="265:45" pos:end="265:63">(<argument pos:start="265:46" pos:end="265:62"><expr pos:start="265:46" pos:end="265:62"><name pos:start="265:46" pos:end="265:62"><name pos:start="265:46" pos:end="265:46">s</name><operator pos:start="265:47" pos:end="265:48">-&gt;</operator><name pos:start="265:49" pos:end="265:62">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:77"><expr pos:start="269:13" pos:end="269:76"><name pos:start="269:13" pos:end="269:15">ret</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <call pos:start="269:19" pos:end="269:76"><name pos:start="269:19" pos:end="269:33">qcow2_cache_put</name><argument_list pos:start="269:34" pos:end="269:76">(<argument pos:start="269:35" pos:end="269:36"><expr pos:start="269:35" pos:end="269:36"><name pos:start="269:35" pos:end="269:36">bs</name></expr></argument>, <argument pos:start="269:39" pos:end="269:55"><expr pos:start="269:39" pos:end="269:55"><name pos:start="269:39" pos:end="269:55"><name pos:start="269:39" pos:end="269:39">s</name><operator pos:start="269:40" pos:end="269:41">-&gt;</operator><name pos:start="269:42" pos:end="269:55">l2_table_cache</name></name></expr></argument>, <argument pos:start="269:58" pos:end="269:75"><expr pos:start="269:58" pos:end="269:75"><operator pos:start="269:58" pos:end="269:58">(</operator><name pos:start="269:59" pos:end="269:62">void</name> <operator pos:start="269:64" pos:end="269:64">*</operator><operator pos:start="269:65" pos:end="269:65">*</operator><operator pos:start="269:66" pos:end="269:66">)</operator><operator pos:start="269:67" pos:end="269:67">&amp;</operator><name pos:start="269:68" pos:end="269:75">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="271:13" pos:end="277:13"><if pos:start="271:13" pos:end="277:13">if <condition pos:start="271:16" pos:end="271:24">(<expr pos:start="271:17" pos:end="271:23"><name pos:start="271:17" pos:end="271:19">ret</name> <operator pos:start="271:21" pos:end="271:21">&lt;</operator> <literal type="number" pos:start="271:23" pos:end="271:23">0</literal></expr>)</condition> <block pos:start="271:26" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:26">

                <expr_stmt pos:start="273:17" pos:end="273:32"><expr pos:start="273:17" pos:end="273:31"><name pos:start="273:17" pos:end="273:24">l2_table</name> <operator pos:start="273:26" pos:end="273:26">=</operator> <name pos:start="273:28" pos:end="273:31">NULL</name></expr>;</expr_stmt>

                <goto pos:start="275:17" pos:end="275:26">goto <name pos:start="275:22" pos:end="275:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="279:11" pos:end="309:9">else <block pos:start="279:16" pos:end="309:9">{<block_content pos:start="281:13" pos:end="307:13">

            <if_stmt pos:start="281:13" pos:end="307:13"><if pos:start="281:13" pos:end="307:13">if <condition pos:start="281:16" pos:end="281:25">(<expr pos:start="281:17" pos:end="281:24"><name pos:start="281:17" pos:end="281:24">l2_dirty</name></expr>)</condition> <block pos:start="281:27" pos:end="307:13">{<block_content pos:start="283:17" pos:end="305:17">

                <expr_stmt pos:start="283:17" pos:end="287:41"><expr pos:start="283:17" pos:end="287:40"><name pos:start="283:17" pos:end="283:19">ret</name> <operator pos:start="283:21" pos:end="283:21">=</operator> <call pos:start="283:23" pos:end="287:40"><name pos:start="283:23" pos:end="283:51">qcow2_pre_write_overlap_check</name><argument_list pos:start="283:52" pos:end="287:40">(<argument pos:start="283:53" pos:end="283:54"><expr pos:start="283:53" pos:end="283:54"><name pos:start="283:53" pos:end="283:54">bs</name></expr></argument>, <argument pos:start="283:57" pos:end="285:68"><expr pos:start="283:57" pos:end="285:68"><name pos:start="283:57" pos:end="283:72">QCOW2_OL_DEFAULT</name> <operator pos:start="283:74" pos:end="283:74">&amp;</operator>

                        <operator pos:start="285:25" pos:end="285:25">~</operator><operator pos:start="285:26" pos:end="285:26">(</operator><name pos:start="285:27" pos:end="285:46">QCOW2_OL_INACTIVE_L2</name> <operator pos:start="285:48" pos:end="285:48">|</operator> <name pos:start="285:50" pos:end="285:67">QCOW2_OL_ACTIVE_L2</name><operator pos:start="285:68" pos:end="285:68">)</operator></expr></argument>, <argument pos:start="285:71" pos:end="285:79"><expr pos:start="285:71" pos:end="285:79"><name pos:start="285:71" pos:end="285:79">l2_offset</name></expr></argument>,

                        <argument pos:start="287:25" pos:end="287:39"><expr pos:start="287:25" pos:end="287:39"><name pos:start="287:25" pos:end="287:39"><name pos:start="287:25" pos:end="287:25">s</name><operator pos:start="287:26" pos:end="287:27">-&gt;</operator><name pos:start="287:28" pos:end="287:39">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="289:17" pos:end="293:17"><if pos:start="289:17" pos:end="293:17">if <condition pos:start="289:20" pos:end="289:28">(<expr pos:start="289:21" pos:end="289:27"><name pos:start="289:21" pos:end="289:23">ret</name> <operator pos:start="289:25" pos:end="289:25">&lt;</operator> <literal type="number" pos:start="289:27" pos:end="289:27">0</literal></expr>)</condition> <block pos:start="289:30" pos:end="293:17">{<block_content pos:start="291:21" pos:end="291:30">

                    <goto pos:start="291:21" pos:end="291:30">goto <name pos:start="291:26" pos:end="291:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="297:17" pos:end="299:62"><expr pos:start="297:17" pos:end="299:61"><name pos:start="297:17" pos:end="297:19">ret</name> <operator pos:start="297:21" pos:end="297:21">=</operator> <call pos:start="297:23" pos:end="299:61"><name pos:start="297:23" pos:end="297:32">bdrv_write</name><argument_list pos:start="297:33" pos:end="299:61">(<argument pos:start="297:34" pos:end="297:41"><expr pos:start="297:34" pos:end="297:41"><name pos:start="297:34" pos:end="297:41"><name pos:start="297:34" pos:end="297:35">bs</name><operator pos:start="297:36" pos:end="297:37">-&gt;</operator><name pos:start="297:38" pos:end="297:41">file</name></name></expr></argument>, <argument pos:start="297:44" pos:end="297:71"><expr pos:start="297:44" pos:end="297:71"><name pos:start="297:44" pos:end="297:52">l2_offset</name> <operator pos:start="297:54" pos:end="297:54">/</operator> <name pos:start="297:56" pos:end="297:71">BDRV_SECTOR_SIZE</name></expr></argument>,

                        <argument pos:start="299:25" pos:end="299:40"><expr pos:start="299:25" pos:end="299:40"><operator pos:start="299:25" pos:end="299:25">(</operator><name pos:start="299:26" pos:end="299:29">void</name> <operator pos:start="299:31" pos:end="299:31">*</operator><operator pos:start="299:32" pos:end="299:32">)</operator><name pos:start="299:33" pos:end="299:40">l2_table</name></expr></argument>, <argument pos:start="299:43" pos:end="299:60"><expr pos:start="299:43" pos:end="299:60"><name pos:start="299:43" pos:end="299:60"><name pos:start="299:43" pos:end="299:43">s</name><operator pos:start="299:44" pos:end="299:45">-&gt;</operator><name pos:start="299:46" pos:end="299:60">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="301:17" pos:end="305:17"><if pos:start="301:17" pos:end="305:17">if <condition pos:start="301:20" pos:end="301:28">(<expr pos:start="301:21" pos:end="301:27"><name pos:start="301:21" pos:end="301:23">ret</name> <operator pos:start="301:25" pos:end="301:25">&lt;</operator> <literal type="number" pos:start="301:27" pos:end="301:27">0</literal></expr>)</condition> <block pos:start="301:30" pos:end="305:17">{<block_content pos:start="303:21" pos:end="303:30">

                    <goto pos:start="303:21" pos:end="303:30">goto <name pos:start="303:26" pos:end="303:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="315:5" pos:end="315:12"><expr pos:start="315:5" pos:end="315:11"><name pos:start="315:5" pos:end="315:7">ret</name> <operator pos:start="315:9" pos:end="315:9">=</operator> <literal type="number" pos:start="315:11" pos:end="315:11">0</literal></expr>;</expr_stmt>



<label pos:start="319:1" pos:end="319:5"><name pos:start="319:1" pos:end="319:4">fail</name>:</label>

    <if_stmt pos:start="321:5" pos:end="343:5"><if pos:start="321:5" pos:end="343:5">if <condition pos:start="321:8" pos:end="321:17">(<expr pos:start="321:9" pos:end="321:16"><name pos:start="321:9" pos:end="321:16">l2_table</name></expr>)</condition> <block pos:start="321:19" pos:end="343:5">{<block_content pos:start="323:9" pos:end="341:9">

        <if_stmt pos:start="323:9" pos:end="341:9"><if pos:start="323:9" pos:end="327:9">if <condition pos:start="323:12" pos:end="323:26">(<expr pos:start="323:13" pos:end="323:25"><operator pos:start="323:13" pos:end="323:13">!</operator><name pos:start="323:14" pos:end="323:25">is_active_l1</name></expr>)</condition> <block pos:start="323:28" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:33">

            <expr_stmt pos:start="325:13" pos:end="325:33"><expr pos:start="325:13" pos:end="325:32"><call pos:start="325:13" pos:end="325:32"><name pos:start="325:13" pos:end="325:22">qemu_vfree</name><argument_list pos:start="325:23" pos:end="325:32">(<argument pos:start="325:24" pos:end="325:31"><expr pos:start="325:24" pos:end="325:31"><name pos:start="325:24" pos:end="325:31">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="327:11" pos:end="341:9">else <block pos:start="327:16" pos:end="341:9">{<block_content pos:start="329:13" pos:end="339:13">

            <if_stmt pos:start="329:13" pos:end="339:13"><if pos:start="329:13" pos:end="333:13">if <condition pos:start="329:16" pos:end="329:24">(<expr pos:start="329:17" pos:end="329:23"><name pos:start="329:17" pos:end="329:19">ret</name> <operator pos:start="329:21" pos:end="329:21">&lt;</operator> <literal type="number" pos:start="329:23" pos:end="329:23">0</literal></expr>)</condition> <block pos:start="329:26" pos:end="333:13">{<block_content pos:start="331:17" pos:end="331:75">

                <expr_stmt pos:start="331:17" pos:end="331:75"><expr pos:start="331:17" pos:end="331:74"><call pos:start="331:17" pos:end="331:74"><name pos:start="331:17" pos:end="331:31">qcow2_cache_put</name><argument_list pos:start="331:32" pos:end="331:74">(<argument pos:start="331:33" pos:end="331:34"><expr pos:start="331:33" pos:end="331:34"><name pos:start="331:33" pos:end="331:34">bs</name></expr></argument>, <argument pos:start="331:37" pos:end="331:53"><expr pos:start="331:37" pos:end="331:53"><name pos:start="331:37" pos:end="331:53"><name pos:start="331:37" pos:end="331:37">s</name><operator pos:start="331:38" pos:end="331:39">-&gt;</operator><name pos:start="331:40" pos:end="331:53">l2_table_cache</name></name></expr></argument>, <argument pos:start="331:56" pos:end="331:73"><expr pos:start="331:56" pos:end="331:73"><operator pos:start="331:56" pos:end="331:56">(</operator><name pos:start="331:57" pos:end="331:60">void</name> <operator pos:start="331:62" pos:end="331:62">*</operator><operator pos:start="331:63" pos:end="331:63">*</operator><operator pos:start="331:64" pos:end="331:64">)</operator><operator pos:start="331:65" pos:end="331:65">&amp;</operator><name pos:start="331:66" pos:end="331:73">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="333:15" pos:end="339:13">else <block pos:start="333:20" pos:end="339:13">{<block_content pos:start="335:17" pos:end="337:44">

                <expr_stmt pos:start="335:17" pos:end="337:44"><expr pos:start="335:17" pos:end="337:43"><name pos:start="335:17" pos:end="335:19">ret</name> <operator pos:start="335:21" pos:end="335:21">=</operator> <call pos:start="335:23" pos:end="337:43"><name pos:start="335:23" pos:end="335:37">qcow2_cache_put</name><argument_list pos:start="335:38" pos:end="337:43">(<argument pos:start="335:39" pos:end="335:40"><expr pos:start="335:39" pos:end="335:40"><name pos:start="335:39" pos:end="335:40">bs</name></expr></argument>, <argument pos:start="335:43" pos:end="335:59"><expr pos:start="335:43" pos:end="335:59"><name pos:start="335:43" pos:end="335:59"><name pos:start="335:43" pos:end="335:43">s</name><operator pos:start="335:44" pos:end="335:45">-&gt;</operator><name pos:start="335:46" pos:end="335:59">l2_table_cache</name></name></expr></argument>,

                        <argument pos:start="337:25" pos:end="337:42"><expr pos:start="337:25" pos:end="337:42"><operator pos:start="337:25" pos:end="337:25">(</operator><name pos:start="337:26" pos:end="337:29">void</name> <operator pos:start="337:31" pos:end="337:31">*</operator><operator pos:start="337:32" pos:end="337:32">*</operator><operator pos:start="337:33" pos:end="337:33">)</operator><operator pos:start="337:34" pos:end="337:34">&amp;</operator><name pos:start="337:35" pos:end="337:42">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="345:5" pos:end="345:15">return <expr pos:start="345:12" pos:end="345:14"><name pos:start="345:12" pos:end="345:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
