<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14676.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:18"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">send_dma_request</name><parameter_list pos:start="1:28" pos:end="2:62">(<parameter pos:start="1:29" pos:end="1:35"><decl pos:start="1:29" pos:end="1:35"><type pos:start="1:29" pos:end="1:35"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:35">cmd</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:45">uint64_t</name></type> <name pos:start="1:47" pos:end="1:52">sector</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:68">nb_sectors</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:43"><decl pos:start="2:29" pos:end="2:43"><type pos:start="2:29" pos:end="2:43"><name pos:start="2:29" pos:end="2:37">PrdtEntry</name> <modifier pos:start="2:39" pos:end="2:39">*</modifier></type><name pos:start="2:40" pos:end="2:43">prdt</name></decl></parameter>, <parameter pos:start="2:46" pos:end="2:61"><decl pos:start="2:46" pos:end="2:61"><type pos:start="2:46" pos:end="2:61"><name pos:start="2:46" pos:end="2:48">int</name></type> <name pos:start="2:50" pos:end="2:61">prdt_entries</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="57:18">{<block_content pos:start="4:5" pos:end="57:18">
    <decl_stmt pos:start="4:5" pos:end="4:20"><decl pos:start="4:5" pos:end="4:19"><type pos:start="4:5" pos:end="4:16"><name pos:start="4:5" pos:end="4:14">QPCIDevice</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:19">dev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:23">bmdma_base</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:25"><decl pos:start="6:5" pos:end="6:24"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:13">uintptr_t</name></type> <name pos:start="6:15" pos:end="6:24">guest_prdt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:14">len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:18"><decl pos:start="8:5" pos:end="8:17"><type pos:start="8:5" pos:end="8:8"><name pos:start="8:5" pos:end="8:8">bool</name></type> <name pos:start="8:10" pos:end="8:17">from_dev</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:18">status</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:14"><decl pos:start="10:5" pos:end="10:13"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:13">flags</name></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:38"><expr pos:start="11:5" pos:end="11:37"><name pos:start="11:5" pos:end="11:7">dev</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:37"><name pos:start="11:11" pos:end="11:24">get_pci_device</name><argument_list pos:start="11:25" pos:end="11:37">(<argument pos:start="11:26" pos:end="11:36"><expr pos:start="11:26" pos:end="11:36"><operator pos:start="11:26" pos:end="11:26">&amp;</operator><name pos:start="11:27" pos:end="11:36">bmdma_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:24"><expr pos:start="12:5" pos:end="12:23"><name pos:start="12:5" pos:end="12:9">flags</name> <operator pos:start="12:11" pos:end="12:11">=</operator> <name pos:start="12:13" pos:end="12:15">cmd</name> <operator pos:start="12:17" pos:end="12:17">&amp;</operator> <operator pos:start="12:19" pos:end="12:19">~</operator><literal type="number" pos:start="12:20" pos:end="12:23">0xff</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:16"><expr pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:7">cmd</name> <operator pos:start="13:9" pos:end="13:10">&amp;=</operator> <literal type="number" pos:start="13:12" pos:end="13:15">0xff</literal></expr>;</expr_stmt>
    <switch pos:start="14:5" pos:end="57:18">switch <condition pos:start="14:12" pos:end="14:16">(<expr pos:start="14:13" pos:end="14:15"><name pos:start="14:13" pos:end="14:15">cmd</name></expr>)</condition> <block pos:start="14:18" pos:end="57:18">{<block_content pos:start="15:5" pos:end="57:18">
    <case pos:start="15:5" pos:end="15:22">case <expr pos:start="15:10" pos:end="15:21"><name pos:start="15:10" pos:end="15:21">CMD_READ_DMA</name></expr>:</case>
        <expr_stmt pos:start="16:9" pos:end="16:24"><expr pos:start="16:9" pos:end="16:23"><name pos:start="16:9" pos:end="16:16">from_dev</name> <operator pos:start="16:18" pos:end="16:18">=</operator> <name pos:start="16:20" pos:end="16:23">true</name></expr>;</expr_stmt>
        <break pos:start="17:9" pos:end="17:14">break;</break>
    <case pos:start="18:5" pos:end="18:23">case <expr pos:start="18:10" pos:end="18:22"><name pos:start="18:10" pos:end="18:22">CMD_WRITE_DMA</name></expr>:</case>
        <expr_stmt pos:start="19:9" pos:end="19:25"><expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:16">from_dev</name> <operator pos:start="19:18" pos:end="19:18">=</operator> <name pos:start="19:20" pos:end="19:24">false</name></expr>;</expr_stmt>
        <break pos:start="20:9" pos:end="20:14">break;</break>
    <default pos:start="21:5" pos:end="21:12">default:</default>
        <expr_stmt pos:start="22:9" pos:end="22:31"><expr pos:start="22:9" pos:end="22:30"><call pos:start="22:9" pos:end="22:30"><name pos:start="22:9" pos:end="22:28">g_assert_not_reached</name><argument_list pos:start="22:29" pos:end="22:30">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:25">/* Select device 0 */</comment>
    <expr_stmt pos:start="24:5" pos:end="24:41"><expr pos:start="24:5" pos:end="24:40"><call pos:start="24:5" pos:end="24:40"><name pos:start="24:5" pos:end="24:8">outb</name><argument_list pos:start="24:9" pos:end="24:40">(<argument pos:start="24:10" pos:end="24:30"><expr pos:start="24:10" pos:end="24:30"><name pos:start="24:10" pos:end="24:17">IDE_BASE</name> <operator pos:start="24:19" pos:end="24:19">+</operator> <name pos:start="24:21" pos:end="24:30">reg_device</name></expr></argument>, <argument pos:start="24:33" pos:end="24:39"><expr pos:start="24:33" pos:end="24:39"><literal type="number" pos:start="24:33" pos:end="24:33">0</literal> <operator pos:start="24:35" pos:end="24:35">|</operator> <name pos:start="24:37" pos:end="24:39">LBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="25:5" pos:end="25:64">/* Stop any running transfer, clear any pending interrupt */</comment>
    <expr_stmt pos:start="26:5" pos:end="26:36"><expr pos:start="26:5" pos:end="26:35"><call pos:start="26:5" pos:end="26:35"><name pos:start="26:5" pos:end="26:8">outb</name><argument_list pos:start="26:9" pos:end="26:35">(<argument pos:start="26:10" pos:end="26:31"><expr pos:start="26:10" pos:end="26:31"><name pos:start="26:10" pos:end="26:19">bmdma_base</name> <operator pos:start="26:21" pos:end="26:21">+</operator> <name pos:start="26:23" pos:end="26:31">bmreg_cmd</name></expr></argument>, <argument pos:start="26:34" pos:end="26:34"><expr pos:start="26:34" pos:end="26:34"><literal type="number" pos:start="26:34" pos:end="26:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><call pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:8">outb</name><argument_list pos:start="27:9" pos:end="27:48">(<argument pos:start="27:10" pos:end="27:34"><expr pos:start="27:10" pos:end="27:34"><name pos:start="27:10" pos:end="27:19">bmdma_base</name> <operator pos:start="27:21" pos:end="27:21">+</operator> <name pos:start="27:23" pos:end="27:34">bmreg_status</name></expr></argument>, <argument pos:start="27:37" pos:end="27:47"><expr pos:start="27:37" pos:end="27:47"><name pos:start="27:37" pos:end="27:47">BM_STS_INTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="28:5" pos:end="28:20">/* Setup PRDT */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:7">len</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <sizeof pos:start="29:11" pos:end="29:23">sizeof<argument_list pos:start="29:17" pos:end="29:23">(<argument pos:start="29:18" pos:end="29:22"><expr pos:start="29:18" pos:end="29:22"><operator pos:start="29:18" pos:end="29:18">*</operator><name pos:start="29:19" pos:end="29:22">prdt</name></expr></argument>)</argument_list></sizeof> <operator pos:start="29:25" pos:end="29:25">*</operator> <name pos:start="29:27" pos:end="29:38">prdt_entries</name></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:48"><expr pos:start="30:5" pos:end="30:47"><name pos:start="30:5" pos:end="30:14">guest_prdt</name> <operator pos:start="30:16" pos:end="30:16">=</operator> <call pos:start="30:18" pos:end="30:47"><name pos:start="30:18" pos:end="30:28">guest_alloc</name><argument_list pos:start="30:29" pos:end="30:47">(<argument pos:start="30:30" pos:end="30:41"><expr pos:start="30:30" pos:end="30:41"><name pos:start="30:30" pos:end="30:41">guest_malloc</name></expr></argument>, <argument pos:start="30:44" pos:end="30:46"><expr pos:start="30:44" pos:end="30:46"><name pos:start="30:44" pos:end="30:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><call pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:12">memwrite</name><argument_list pos:start="31:13" pos:end="31:35">(<argument pos:start="31:14" pos:end="31:23"><expr pos:start="31:14" pos:end="31:23"><name pos:start="31:14" pos:end="31:23">guest_prdt</name></expr></argument>, <argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">prdt</name></expr></argument>, <argument pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><name pos:start="31:32" pos:end="31:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:46"><expr pos:start="32:5" pos:end="32:45"><call pos:start="32:5" pos:end="32:45"><name pos:start="32:5" pos:end="32:8">outl</name><argument_list pos:start="32:9" pos:end="32:45">(<argument pos:start="32:10" pos:end="32:32"><expr pos:start="32:10" pos:end="32:32"><name pos:start="32:10" pos:end="32:19">bmdma_base</name> <operator pos:start="32:21" pos:end="32:21">+</operator> <name pos:start="32:23" pos:end="32:32">bmreg_prdt</name></expr></argument>, <argument pos:start="32:35" pos:end="32:44"><expr pos:start="32:35" pos:end="32:44"><name pos:start="32:35" pos:end="32:44">guest_prdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:25">/* ATA DMA command */</comment>
    <expr_stmt pos:start="34:5" pos:end="34:46"><expr pos:start="34:5" pos:end="34:45"><call pos:start="34:5" pos:end="34:45"><name pos:start="34:5" pos:end="34:8">outb</name><argument_list pos:start="34:9" pos:end="34:45">(<argument pos:start="34:10" pos:end="34:32"><expr pos:start="34:10" pos:end="34:32"><name pos:start="34:10" pos:end="34:17">IDE_BASE</name> <operator pos:start="34:19" pos:end="34:19">+</operator> <name pos:start="34:21" pos:end="34:32">reg_nsectors</name></expr></argument>, <argument pos:start="34:35" pos:end="34:44"><expr pos:start="34:35" pos:end="34:44"><name pos:start="34:35" pos:end="34:44">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><call pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:8">outb</name><argument_list pos:start="35:9" pos:end="35:50">(<argument pos:start="35:10" pos:end="35:31"><expr pos:start="35:10" pos:end="35:31"><name pos:start="35:10" pos:end="35:17">IDE_BASE</name> <operator pos:start="35:19" pos:end="35:19">+</operator> <name pos:start="35:21" pos:end="35:31">reg_lba_low</name></expr></argument>,    <argument pos:start="35:37" pos:end="35:49"><expr pos:start="35:37" pos:end="35:49"><name pos:start="35:37" pos:end="35:42">sector</name> <operator pos:start="35:44" pos:end="35:44">&amp;</operator> <literal type="number" pos:start="35:46" pos:end="35:49">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:58"><expr pos:start="36:5" pos:end="36:57"><call pos:start="36:5" pos:end="36:57"><name pos:start="36:5" pos:end="36:8">outb</name><argument_list pos:start="36:9" pos:end="36:57">(<argument pos:start="36:10" pos:end="36:34"><expr pos:start="36:10" pos:end="36:34"><name pos:start="36:10" pos:end="36:17">IDE_BASE</name> <operator pos:start="36:19" pos:end="36:19">+</operator> <name pos:start="36:21" pos:end="36:34">reg_lba_middle</name></expr></argument>, <argument pos:start="36:37" pos:end="36:56"><expr pos:start="36:37" pos:end="36:56"><operator pos:start="36:37" pos:end="36:37">(</operator><name pos:start="36:38" pos:end="36:43">sector</name> <operator pos:start="36:45" pos:end="36:46">&gt;&gt;</operator> <literal type="number" pos:start="36:48" pos:end="36:48">8</literal><operator pos:start="36:49" pos:end="36:49">)</operator> <operator pos:start="36:51" pos:end="36:51">&amp;</operator> <literal type="number" pos:start="36:53" pos:end="36:56">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><call pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:8">outb</name><argument_list pos:start="37:9" pos:end="37:58">(<argument pos:start="37:10" pos:end="37:32"><expr pos:start="37:10" pos:end="37:32"><name pos:start="37:10" pos:end="37:17">IDE_BASE</name> <operator pos:start="37:19" pos:end="37:19">+</operator> <name pos:start="37:21" pos:end="37:32">reg_lba_high</name></expr></argument>,   <argument pos:start="37:37" pos:end="37:57"><expr pos:start="37:37" pos:end="37:57"><operator pos:start="37:37" pos:end="37:37">(</operator><name pos:start="37:38" pos:end="37:43">sector</name> <operator pos:start="37:45" pos:end="37:46">&gt;&gt;</operator> <literal type="number" pos:start="37:48" pos:end="37:49">16</literal><operator pos:start="37:50" pos:end="37:50">)</operator> <operator pos:start="37:52" pos:end="37:52">&amp;</operator> <literal type="number" pos:start="37:54" pos:end="37:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:38"><expr pos:start="38:5" pos:end="38:37"><call pos:start="38:5" pos:end="38:37"><name pos:start="38:5" pos:end="38:8">outb</name><argument_list pos:start="38:9" pos:end="38:37">(<argument pos:start="38:10" pos:end="38:31"><expr pos:start="38:10" pos:end="38:31"><name pos:start="38:10" pos:end="38:17">IDE_BASE</name> <operator pos:start="38:19" pos:end="38:19">+</operator> <name pos:start="38:21" pos:end="38:31">reg_command</name></expr></argument>, <argument pos:start="38:34" pos:end="38:36"><expr pos:start="38:34" pos:end="38:36"><name pos:start="38:34" pos:end="38:36">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="39:5" pos:end="39:28">/* Start DMA transfer */</comment>
    <expr_stmt pos:start="40:5" pos:end="40:79"><expr pos:start="40:5" pos:end="40:78"><call pos:start="40:5" pos:end="40:78"><name pos:start="40:5" pos:end="40:8">outb</name><argument_list pos:start="40:9" pos:end="40:78">(<argument pos:start="40:10" pos:end="40:31"><expr pos:start="40:10" pos:end="40:31"><name pos:start="40:10" pos:end="40:19">bmdma_base</name> <operator pos:start="40:21" pos:end="40:21">+</operator> <name pos:start="40:23" pos:end="40:31">bmreg_cmd</name></expr></argument>, <argument pos:start="40:34" pos:end="40:77"><expr pos:start="40:34" pos:end="40:77"><name pos:start="40:34" pos:end="40:45">BM_CMD_START</name> <operator pos:start="40:47" pos:end="40:47">|</operator> <operator pos:start="40:49" pos:end="40:49">(</operator><ternary pos:start="40:50" pos:end="40:76"><condition pos:start="40:50" pos:end="40:59"><expr pos:start="40:50" pos:end="40:57"><name pos:start="40:50" pos:end="40:57">from_dev</name></expr> ?</condition><then pos:start="40:61" pos:end="40:72"> <expr pos:start="40:61" pos:end="40:72"><name pos:start="40:61" pos:end="40:72">BM_CMD_WRITE</name></expr> </then><else pos:start="40:74" pos:end="40:76">: <expr pos:start="40:76" pos:end="40:76"><literal type="number" pos:start="40:76" pos:end="40:76">0</literal></expr></else></ternary><operator pos:start="40:77" pos:end="40:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="57:18"><if pos:start="41:5" pos:end="57:18">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:13">flags</name> <operator pos:start="41:15" pos:end="41:15">&amp;</operator> <name pos:start="41:17" pos:end="41:26">CMDF_ABORT</name></expr>)</condition> <block pos:start="41:29" pos:end="57:18">{<block_content pos:start="42:9" pos:end="57:18">
        <expr_stmt pos:start="42:9" pos:end="42:40"><expr pos:start="42:9" pos:end="42:39"><call pos:start="42:9" pos:end="42:39"><name pos:start="42:9" pos:end="42:12">outb</name><argument_list pos:start="42:13" pos:end="42:39">(<argument pos:start="42:14" pos:end="42:35"><expr pos:start="42:14" pos:end="42:35"><name pos:start="42:14" pos:end="42:23">bmdma_base</name> <operator pos:start="42:25" pos:end="42:25">+</operator> <name pos:start="42:27" pos:end="42:35">bmreg_cmd</name></expr></argument>, <argument pos:start="42:38" pos:end="42:38"><expr pos:start="42:38" pos:end="42:38"><literal type="number" pos:start="42:38" pos:end="42:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="43:5" pos:end="43:47">/* Wait for the DMA transfer to complete */</comment>
    <do pos:start="44:5" pos:end="46:72">do <block pos:start="44:8" pos:end="46:5">{<block_content pos:start="45:9" pos:end="45:48">
        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:14">status</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:47"><name pos:start="45:18" pos:end="45:20">inb</name><argument_list pos:start="45:21" pos:end="45:47">(<argument pos:start="45:22" pos:end="45:46"><expr pos:start="45:22" pos:end="45:46"><name pos:start="45:22" pos:end="45:31">bmdma_base</name> <operator pos:start="45:33" pos:end="45:33">+</operator> <name pos:start="45:35" pos:end="45:46">bmreg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition pos:start="46:13" pos:end="46:71">(<expr pos:start="46:14" pos:end="46:70"><operator pos:start="46:14" pos:end="46:14">(</operator><name pos:start="46:15" pos:end="46:20">status</name> <operator pos:start="46:22" pos:end="46:22">&amp;</operator> <operator pos:start="46:24" pos:end="46:24">(</operator><name pos:start="46:25" pos:end="46:37">BM_STS_ACTIVE</name> <operator pos:start="46:39" pos:end="46:39">|</operator> <name pos:start="46:41" pos:end="46:51">BM_STS_INTR</name><operator pos:start="46:52" pos:end="46:52">)</operator><operator pos:start="46:53" pos:end="46:53">)</operator> <operator pos:start="46:55" pos:end="46:56">==</operator> <name pos:start="46:58" pos:end="46:70">BM_STS_ACTIVE</name></expr>)</condition>;</do>
    <expr_stmt pos:start="47:5" pos:end="47:76"><expr pos:start="47:5" pos:end="47:75"><call pos:start="47:5" pos:end="47:75"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:75">(<argument pos:start="47:21" pos:end="47:44"><expr pos:start="47:21" pos:end="47:44"><call pos:start="47:21" pos:end="47:44"><name pos:start="47:21" pos:end="47:27">get_irq</name><argument_list pos:start="47:28" pos:end="47:44">(<argument pos:start="47:29" pos:end="47:43"><expr pos:start="47:29" pos:end="47:43"><name pos:start="47:29" pos:end="47:43">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:47" pos:end="47:48"><expr pos:start="47:47" pos:end="47:48"><operator pos:start="47:47" pos:end="47:48">==</operator></expr></argument>, <argument pos:start="47:51" pos:end="47:74"><expr pos:start="47:51" pos:end="47:74"><operator pos:start="47:51" pos:end="47:51">!</operator><operator pos:start="47:52" pos:end="47:52">!</operator><operator pos:start="47:53" pos:end="47:53">(</operator><name pos:start="47:54" pos:end="47:59">status</name> <operator pos:start="47:61" pos:end="47:61">&amp;</operator> <name pos:start="47:63" pos:end="47:73">BM_STS_INTR</name><operator pos:start="47:74" pos:end="47:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="48:5" pos:end="48:31">/* Check IDE status code */</comment>
    <expr_stmt pos:start="49:5" pos:end="49:53"><expr pos:start="49:5" pos:end="49:52"><call pos:start="49:5" pos:end="49:52"><name pos:start="49:5" pos:end="49:18">assert_bit_set</name><argument_list pos:start="49:19" pos:end="49:52">(<argument pos:start="49:20" pos:end="49:45"><expr pos:start="49:20" pos:end="49:45"><call pos:start="49:20" pos:end="49:45"><name pos:start="49:20" pos:end="49:22">inb</name><argument_list pos:start="49:23" pos:end="49:45">(<argument pos:start="49:24" pos:end="49:44"><expr pos:start="49:24" pos:end="49:44"><name pos:start="49:24" pos:end="49:31">IDE_BASE</name> <operator pos:start="49:33" pos:end="49:33">+</operator> <name pos:start="49:35" pos:end="49:44">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:48" pos:end="49:51"><expr pos:start="49:48" pos:end="49:51"><name pos:start="49:48" pos:end="49:51">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="50:5" pos:end="50:60"><expr pos:start="50:5" pos:end="50:59"><call pos:start="50:5" pos:end="50:59"><name pos:start="50:5" pos:end="50:20">assert_bit_clear</name><argument_list pos:start="50:21" pos:end="50:59">(<argument pos:start="50:22" pos:end="50:47"><expr pos:start="50:22" pos:end="50:47"><call pos:start="50:22" pos:end="50:47"><name pos:start="50:22" pos:end="50:24">inb</name><argument_list pos:start="50:25" pos:end="50:47">(<argument pos:start="50:26" pos:end="50:46"><expr pos:start="50:26" pos:end="50:46"><name pos:start="50:26" pos:end="50:33">IDE_BASE</name> <operator pos:start="50:35" pos:end="50:35">+</operator> <name pos:start="50:37" pos:end="50:46">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="50:50" pos:end="50:58"><expr pos:start="50:50" pos:end="50:58"><name pos:start="50:50" pos:end="50:52">BSY</name> <operator pos:start="50:54" pos:end="50:54">|</operator> <name pos:start="50:56" pos:end="50:58">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="51:5" pos:end="51:52">/* Reading the status register clears the IRQ */</comment>
    <expr_stmt pos:start="52:5" pos:end="52:40"><expr pos:start="52:5" pos:end="52:39"><call pos:start="52:5" pos:end="52:39"><name pos:start="52:5" pos:end="52:12">g_assert</name><argument_list pos:start="52:13" pos:end="52:39">(<argument pos:start="52:14" pos:end="52:38"><expr pos:start="52:14" pos:end="52:38"><operator pos:start="52:14" pos:end="52:14">!</operator><call pos:start="52:15" pos:end="52:38"><name pos:start="52:15" pos:end="52:21">get_irq</name><argument_list pos:start="52:22" pos:end="52:38">(<argument pos:start="52:23" pos:end="52:37"><expr pos:start="52:23" pos:end="52:37"><name pos:start="52:23" pos:end="52:37">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="53:5" pos:end="53:43">/* Stop DMA transfer if still active */</comment>
    <if_stmt pos:start="54:5" pos:end="57:18"><if pos:start="54:5" pos:end="57:18">if <condition pos:start="54:8" pos:end="54:31">(<expr pos:start="54:9" pos:end="54:30"><name pos:start="54:9" pos:end="54:14">status</name> <operator pos:start="54:16" pos:end="54:16">&amp;</operator> <name pos:start="54:18" pos:end="54:30">BM_STS_ACTIVE</name></expr>)</condition> <block pos:start="54:33" pos:end="57:18">{<block_content pos:start="55:9" pos:end="57:18">
        <expr_stmt pos:start="55:9" pos:end="55:40"><expr pos:start="55:9" pos:end="55:39"><call pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:12">outb</name><argument_list pos:start="55:13" pos:end="55:39">(<argument pos:start="55:14" pos:end="55:35"><expr pos:start="55:14" pos:end="55:35"><name pos:start="55:14" pos:end="55:23">bmdma_base</name> <operator pos:start="55:25" pos:end="55:25">+</operator> <name pos:start="55:27" pos:end="55:35">bmreg_cmd</name></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><literal type="number" pos:start="55:38" pos:end="55:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="56:5" pos:end="56:25"><expr pos:start="56:5" pos:end="56:24"><call pos:start="56:5" pos:end="56:24"><name pos:start="56:5" pos:end="56:19">free_pci_device</name><argument_list pos:start="56:20" pos:end="56:24">(<argument pos:start="56:21" pos:end="56:23"><expr pos:start="56:21" pos:end="56:23"><name pos:start="56:21" pos:end="56:23">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="57:5" pos:end="57:18">return <expr pos:start="57:12" pos:end="57:17"><name pos:start="57:12" pos:end="57:17">status</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></function></unit>
