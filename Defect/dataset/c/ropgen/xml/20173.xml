<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20173.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">XICSState</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:34">xics_system_init</name><parameter_list pos:start="1:35" pos:end="1:63">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:49">nr_servers</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">nr_irqs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">XICSState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:18">icp</name> <init pos:start="5:20" pos:end="5:25">= <expr pos:start="5:22" pos:end="5:25"><name pos:start="5:22" pos:end="5:25">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="39:5"><if pos:start="9:5" pos:end="39:5">if <condition pos:start="9:8" pos:end="9:22">(<expr pos:start="9:9" pos:end="9:21"><call pos:start="9:9" pos:end="9:21"><name pos:start="9:9" pos:end="9:19">kvm_enabled</name><argument_list pos:start="9:20" pos:end="9:21">()</argument_list></call></expr>)</condition> <block pos:start="9:24" pos:end="39:5">{<block_content pos:start="11:9" pos:end="37:9">

        <decl_stmt pos:start="11:9" pos:end="11:57"><decl pos:start="11:9" pos:end="11:56"><type pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:16">QemuOpts</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:30">machine_opts</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><call pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:54">qemu_get_machine_opts</name><argument_list pos:start="11:55" pos:end="11:56">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="15:72"><decl pos:start="13:9" pos:end="15:71"><type pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">bool</name></type> <name pos:start="13:14" pos:end="13:28">irqchip_allowed</name> <init pos:start="13:30" pos:end="15:71">= <expr pos:start="13:32" pos:end="15:71"><call pos:start="13:32" pos:end="15:71"><name pos:start="13:32" pos:end="13:48">qemu_opt_get_bool</name><argument_list pos:start="13:49" pos:end="15:71">(<argument pos:start="13:50" pos:end="13:61"><expr pos:start="13:50" pos:end="13:61"><name pos:start="13:50" pos:end="13:61">machine_opts</name></expr></argument>,

                                                <argument pos:start="15:49" pos:end="15:64"><expr pos:start="15:49" pos:end="15:64"><literal type="string" pos:start="15:49" pos:end="15:64">"kernel_irqchip"</literal></expr></argument>, <argument pos:start="15:67" pos:end="15:70"><expr pos:start="15:67" pos:end="15:70"><name pos:start="15:67" pos:end="15:70">true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="19:75"><decl pos:start="17:9" pos:end="19:74"><type pos:start="17:9" pos:end="17:12"><name pos:start="17:9" pos:end="17:12">bool</name></type> <name pos:start="17:14" pos:end="17:29">irqchip_required</name> <init pos:start="17:31" pos:end="19:74">= <expr pos:start="17:33" pos:end="19:74"><call pos:start="17:33" pos:end="19:74"><name pos:start="17:33" pos:end="17:49">qemu_opt_get_bool</name><argument_list pos:start="17:50" pos:end="19:74">(<argument pos:start="17:51" pos:end="17:62"><expr pos:start="17:51" pos:end="17:62"><name pos:start="17:51" pos:end="17:62">machine_opts</name></expr></argument>,

                                                  <argument pos:start="19:51" pos:end="19:66"><expr pos:start="19:51" pos:end="19:66"><literal type="string" pos:start="19:51" pos:end="19:66">"kernel_irqchip"</literal></expr></argument>, <argument pos:start="19:69" pos:end="19:73"><expr pos:start="19:69" pos:end="19:73"><name pos:start="19:69" pos:end="19:73">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:26"><decl pos:start="21:9" pos:end="21:25"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:13">Error</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:18">err</name> <init pos:start="21:20" pos:end="21:25">= <expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:27">irqchip_allowed</name></expr>)</condition> <block pos:start="25:30" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:76">

            <expr_stmt pos:start="27:13" pos:end="27:76"><expr pos:start="27:13" pos:end="27:75"><name pos:start="27:13" pos:end="27:15">icp</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:75"><name pos:start="27:19" pos:end="27:33">try_create_xics</name><argument_list pos:start="27:34" pos:end="27:75">(<argument pos:start="27:35" pos:end="27:47"><expr pos:start="27:35" pos:end="27:47"><name pos:start="27:35" pos:end="27:47">TYPE_KVM_XICS</name></expr></argument>, <argument pos:start="27:50" pos:end="27:59"><expr pos:start="27:50" pos:end="27:59"><name pos:start="27:50" pos:end="27:59">nr_servers</name></expr></argument>, <argument pos:start="27:62" pos:end="27:68"><expr pos:start="27:62" pos:end="27:68"><name pos:start="27:62" pos:end="27:68">nr_irqs</name></expr></argument>, <argument pos:start="27:71" pos:end="27:74"><expr pos:start="27:71" pos:end="27:74"><operator pos:start="27:71" pos:end="27:71">&amp;</operator><name pos:start="27:72" pos:end="27:74">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:37">(<expr pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:28">irqchip_required</name> <operator pos:start="31:30" pos:end="31:31">&amp;&amp;</operator> <operator pos:start="31:33" pos:end="31:33">!</operator><name pos:start="31:34" pos:end="31:36">icp</name></expr>)</condition> <block pos:start="31:39" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:48">

            <expr_stmt pos:start="33:13" pos:end="35:48"><expr pos:start="33:13" pos:end="35:47"><call pos:start="33:13" pos:end="35:47"><name pos:start="33:13" pos:end="33:24">error_report</name><argument_list pos:start="33:25" pos:end="35:47">(<argument pos:start="33:26" pos:end="33:71"><expr pos:start="33:26" pos:end="33:71"><literal type="string" pos:start="33:26" pos:end="33:71">"kernel_irqchip requested but unavailable: %s"</literal></expr></argument>,

                         <argument pos:start="35:26" pos:end="35:46"><expr pos:start="35:26" pos:end="35:46"><call pos:start="35:26" pos:end="35:46"><name pos:start="35:26" pos:end="35:41">error_get_pretty</name><argument_list pos:start="35:42" pos:end="35:46">(<argument pos:start="35:43" pos:end="35:45"><expr pos:start="35:43" pos:end="35:45"><name pos:start="35:43" pos:end="35:45">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:13">(<expr pos:start="43:9" pos:end="43:12"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:12">icp</name></expr>)</condition> <block pos:start="43:15" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:76">

        <expr_stmt pos:start="45:9" pos:end="45:76"><expr pos:start="45:9" pos:end="45:75"><name pos:start="45:9" pos:end="45:11">icp</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:75"><name pos:start="45:15" pos:end="45:29">try_create_xics</name><argument_list pos:start="45:30" pos:end="45:75">(<argument pos:start="45:31" pos:end="45:39"><expr pos:start="45:31" pos:end="45:39"><name pos:start="45:31" pos:end="45:39">TYPE_XICS</name></expr></argument>, <argument pos:start="45:42" pos:end="45:51"><expr pos:start="45:42" pos:end="45:51"><name pos:start="45:42" pos:end="45:51">nr_servers</name></expr></argument>, <argument pos:start="45:54" pos:end="45:60"><expr pos:start="45:54" pos:end="45:60"><name pos:start="45:54" pos:end="45:60">nr_irqs</name></expr></argument>, <argument pos:start="45:63" pos:end="45:74"><expr pos:start="45:63" pos:end="45:74"><operator pos:start="45:63" pos:end="45:63">&amp;</operator><name pos:start="45:64" pos:end="45:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">icp</name></expr>;</return>

</block_content>}</block></function>
</unit>
