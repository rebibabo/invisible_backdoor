<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3390.c" pos:tabs="8"><function pos:start="1:1" pos:end="144:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">av_open_input_stream</name><parameter_list pos:start="1:25" pos:end="5:68">(<parameter pos:start="1:26" pos:end="1:49"><decl pos:start="1:26" pos:end="1:49"><type pos:start="1:26" pos:end="1:49"><name pos:start="1:26" pos:end="1:40">AVFormatContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier><modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">ic_ptr</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:38">ByteIOContext</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:42">pb</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:64"><decl pos:start="3:45" pos:end="3:64"><type pos:start="3:45" pos:end="3:64"><specifier pos:start="3:45" pos:end="3:49">const</specifier> <name pos:start="3:51" pos:end="3:54">char</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:64">filename</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:43"><decl pos:start="5:26" pos:end="5:43"><type pos:start="5:26" pos:end="5:43"><name pos:start="5:26" pos:end="5:38">AVInputFormat</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:43">fmt</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:67"><decl pos:start="5:46" pos:end="5:67"><type pos:start="5:46" pos:end="5:67"><name pos:start="5:46" pos:end="5:63">AVFormatParameters</name> <modifier pos:start="5:65" pos:end="5:65">*</modifier></type><name pos:start="5:66" pos:end="5:67">ap</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="144:1">{<block_content pos:start="9:5" pos:end="142:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">AVFormatContext</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:23">ic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:22">AVFormatParameters</name></type> <name pos:start="13:24" pos:end="13:33">default_ap</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if<condition pos:start="17:7" pos:end="17:11">(<expr pos:start="17:8" pos:end="17:10"><operator pos:start="17:8" pos:end="17:8">!</operator><name pos:start="17:9" pos:end="17:10">ap</name></expr>)</condition><block pos:start="17:12" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:42">

        <expr_stmt pos:start="19:9" pos:end="19:23"><expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:10">ap</name><operator pos:start="19:11" pos:end="19:11">=</operator><operator pos:start="19:12" pos:end="19:12">&amp;</operator><name pos:start="19:13" pos:end="19:22">default_ap</name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><call pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:14">memset</name><argument_list pos:start="21:15" pos:end="21:41">(<argument pos:start="21:16" pos:end="21:17"><expr pos:start="21:16" pos:end="21:17"><name pos:start="21:16" pos:end="21:17">ap</name></expr></argument>, <argument pos:start="21:20" pos:end="21:20"><expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></argument>, <argument pos:start="21:23" pos:end="21:40"><expr pos:start="21:23" pos:end="21:40"><sizeof pos:start="21:23" pos:end="21:40">sizeof<argument_list pos:start="21:29" pos:end="21:40">(<argument pos:start="21:30" pos:end="21:39"><expr pos:start="21:30" pos:end="21:39"><name pos:start="21:30" pos:end="21:39">default_ap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:21"><if pos:start="27:5" pos:end="29:38">if<condition pos:start="27:7" pos:end="27:31">(<expr pos:start="27:8" pos:end="27:30"><operator pos:start="27:8" pos:end="27:8">!</operator><name pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:10">ap</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:30">prealloced_context</name></name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:38"><block_content pos:start="29:9" pos:end="29:38">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:10">ic</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="29:37"><name pos:start="29:14" pos:end="29:35">avformat_alloc_context</name><argument_list pos:start="29:36" pos:end="29:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="31:5" pos:end="33:21">else<block type="pseudo" pos:start="33:9" pos:end="33:21"><block_content pos:start="33:9" pos:end="33:21">

        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:10">ic</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">*</operator><name pos:start="33:15" pos:end="33:20">ic_ptr</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">ic</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:11">err</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:29"><name pos:start="37:15" pos:end="37:21">AVERROR</name><argument_list pos:start="37:22" pos:end="37:29">(<argument pos:start="37:23" pos:end="37:28"><expr pos:start="37:23" pos:end="37:28"><name pos:start="37:23" pos:end="37:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:6">ic</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:15">iformat</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:21">fmt</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:16"><expr pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:6">ic</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:10">pb</name></name> <operator pos:start="45:12" pos:end="45:12">=</operator> <name pos:start="45:14" pos:end="45:15">pb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:6">ic</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:16">duration</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:33">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:6">ic</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:18">start_time</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <name pos:start="49:22" pos:end="49:35">AV_NOPTS_VALUE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:61"><expr pos:start="51:5" pos:end="51:60"><call pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:14">av_strlcpy</name><argument_list pos:start="51:15" pos:end="51:60">(<argument pos:start="51:16" pos:end="51:27"><expr pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:27"><name pos:start="51:16" pos:end="51:17">ic</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:27">filename</name></name></expr></argument>, <argument pos:start="51:30" pos:end="51:37"><expr pos:start="51:30" pos:end="51:37"><name pos:start="51:30" pos:end="51:37">filename</name></expr></argument>, <argument pos:start="51:40" pos:end="51:59"><expr pos:start="51:40" pos:end="51:59"><sizeof pos:start="51:40" pos:end="51:59">sizeof<argument_list pos:start="51:46" pos:end="51:59">(<argument pos:start="51:47" pos:end="51:58"><expr pos:start="51:47" pos:end="51:58"><name pos:start="51:47" pos:end="51:58"><name pos:start="51:47" pos:end="51:48">ic</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:58">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:31">/* allocate private data */</comment>

    <if_stmt pos:start="57:5" pos:end="73:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:32">(<expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:11">fmt</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:27">priv_data_size</name></name> <operator pos:start="57:29" pos:end="57:29">&gt;</operator> <literal type="number" pos:start="57:31" pos:end="57:31">0</literal></expr>)</condition> <block pos:start="57:34" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:9">

        <expr_stmt pos:start="59:9" pos:end="59:56"><expr pos:start="59:9" pos:end="59:55"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:10">ic</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:21">priv_data</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <call pos:start="59:25" pos:end="59:55"><name pos:start="59:25" pos:end="59:34">av_mallocz</name><argument_list pos:start="59:35" pos:end="59:55">(<argument pos:start="59:36" pos:end="59:54"><expr pos:start="59:36" pos:end="59:54"><name pos:start="59:36" pos:end="59:54"><name pos:start="59:36" pos:end="59:38">fmt</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:54">priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:27">(<expr pos:start="61:13" pos:end="61:26"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:26"><name pos:start="61:14" pos:end="61:15">ic</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:26">priv_data</name></name></expr>)</condition> <block pos:start="61:29" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:22">

            <expr_stmt pos:start="63:13" pos:end="63:34"><expr pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:15">err</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:33"><name pos:start="63:19" pos:end="63:25">AVERROR</name><argument_list pos:start="63:26" pos:end="63:33">(<argument pos:start="63:27" pos:end="63:32"><expr pos:start="63:27" pos:end="63:32"><name pos:start="63:27" pos:end="63:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:22">goto <name pos:start="65:18" pos:end="65:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="73:5">else <block pos:start="69:12" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:29">

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:10">ic</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:21">priv_data</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:28">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:33">(<expr pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:10">ic</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:19">iformat</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:32">read_header</name></name></expr>)</condition> <block pos:start="77:35" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:22">

        <expr_stmt pos:start="79:9" pos:end="79:47"><expr pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:11">err</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:46"><name pos:start="79:15" pos:end="79:38"><name pos:start="79:15" pos:end="79:16">ic</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:25">iformat</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:38">read_header</name></name><argument_list pos:start="79:39" pos:end="79:46">(<argument pos:start="79:40" pos:end="79:41"><expr pos:start="79:40" pos:end="79:41"><name pos:start="79:40" pos:end="79:41">ic</name></expr></argument>, <argument pos:start="79:44" pos:end="79:45"><expr pos:start="79:44" pos:end="79:45"><name pos:start="79:44" pos:end="79:45">ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="83:22"><if pos:start="81:9" pos:end="83:22">if <condition pos:start="81:12" pos:end="81:20">(<expr pos:start="81:13" pos:end="81:19"><name pos:start="81:13" pos:end="81:15">err</name> <operator pos:start="81:17" pos:end="81:17">&lt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:22"><block_content pos:start="83:13" pos:end="83:22">

            <goto pos:start="83:13" pos:end="83:22">goto <name pos:start="83:18" pos:end="83:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="96:0"><if pos:start="89:5" pos:end="96:0">if <condition pos:start="89:8" pos:end="89:31">(<expr pos:start="89:9" pos:end="89:30"><name pos:start="89:9" pos:end="89:10">pb</name> <operator pos:start="89:12" pos:end="89:13">&amp;&amp;</operator> <operator pos:start="89:15" pos:end="89:15">!</operator><name pos:start="89:16" pos:end="89:30"><name pos:start="89:16" pos:end="89:17">ic</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:30">data_offset</name></name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="96:0"><block_content pos:start="91:9" pos:end="96:0">

        <expr_stmt pos:start="91:9" pos:end="96:0"><expr pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:10">ic</name><operator pos:start="91:11" pos:end="91:12">-&gt;</operator><name pos:start="91:13" pos:end="91:23">data_offset</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <call pos:start="91:27" pos:end="91:43"><name pos:start="91:27" pos:end="91:35">url_ftell</name><argument_list pos:start="91:36" pos:end="91:43">(<argument pos:start="91:37" pos:end="91:42"><expr pos:start="91:37" pos:end="91:42"><name pos:start="91:37" pos:end="91:42"><name pos:start="91:37" pos:end="91:38">ic</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:42">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if pos:start="95:1" pos:end="95:34">#<cpp:directive pos:start="95:2" pos:end="95:3">if</cpp:directive> <expr pos:start="95:5" pos:end="95:34"><name pos:start="95:5" pos:end="95:29">LIBAVFORMAT_VERSION_MAJOR</name> <operator pos:start="95:31" pos:end="95:31">&lt;</operator> <literal type="number" pos:start="95:33" pos:end="95:34">53</literal></expr></cpp:if>

    <expr_stmt pos:start="97:5" pos:end="100:0"><expr pos:start="97:5" pos:end="97:32"><call pos:start="97:5" pos:end="97:32"><name pos:start="97:5" pos:end="97:28">ff_metadata_demux_compat</name><argument_list pos:start="97:29" pos:end="97:32">(<argument pos:start="97:30" pos:end="97:31"><expr pos:start="97:30" pos:end="97:31"><name pos:start="97:30" pos:end="97:31">ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="103:5" pos:end="103:66"><expr pos:start="103:5" pos:end="103:65"><name pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:6">ic</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:40">raw_packet_buffer_remaining_size</name></name> <operator pos:start="103:42" pos:end="103:42">=</operator> <name pos:start="103:44" pos:end="103:65">RAW_PACKET_BUFFER_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:17"><expr pos:start="107:5" pos:end="107:16"><operator pos:start="107:5" pos:end="107:5">*</operator><name pos:start="107:6" pos:end="107:11">ic_ptr</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <name pos:start="107:15" pos:end="107:16">ic</name></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

 <label pos:start="111:2" pos:end="111:6"><name pos:start="111:2" pos:end="111:5">fail</name>:</label>

    <if_stmt pos:start="113:5" pos:end="136:5"><if pos:start="113:5" pos:end="136:5">if <condition pos:start="113:8" pos:end="113:11">(<expr pos:start="113:9" pos:end="113:10"><name pos:start="113:9" pos:end="113:10">ic</name></expr>)</condition> <block pos:start="113:13" pos:end="136:5">{<block_content pos:start="115:9" pos:end="134:9">

        <decl_stmt pos:start="115:9" pos:end="115:14"><decl pos:start="115:9" pos:end="115:13"><type pos:start="115:9" pos:end="115:11"><name pos:start="115:9" pos:end="115:11">int</name></type> <name pos:start="115:13" pos:end="115:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:33"><expr pos:start="117:9" pos:end="117:32"><call pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:16">av_freep</name><argument_list pos:start="117:17" pos:end="117:32">(<argument pos:start="117:18" pos:end="117:31"><expr pos:start="117:18" pos:end="117:31"><operator pos:start="117:18" pos:end="117:18">&amp;</operator><name pos:start="117:19" pos:end="117:31"><name pos:start="117:19" pos:end="117:20">ic</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:31">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="119:9" pos:end="134:9">for<control pos:start="119:12" pos:end="119:37">(<init pos:start="119:13" pos:end="119:16"><expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:13">i</name><operator pos:start="119:14" pos:end="119:14">=</operator><literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>;</init><condition pos:start="119:17" pos:end="119:33"><expr pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:17">i</name><operator pos:start="119:18" pos:end="119:18">&lt;</operator><name pos:start="119:19" pos:end="119:32"><name pos:start="119:19" pos:end="119:20">ic</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:32">nb_streams</name></name></expr>;</condition><incr pos:start="119:34" pos:end="119:36"><expr pos:start="119:34" pos:end="119:36"><name pos:start="119:34" pos:end="119:34">i</name><operator pos:start="119:35" pos:end="119:36">++</operator></expr></incr>)</control> <block pos:start="119:39" pos:end="134:9">{<block_content pos:start="121:13" pos:end="132:24">

            <decl_stmt pos:start="121:13" pos:end="121:42"><decl pos:start="121:13" pos:end="121:41"><type pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:20">AVStream</name> <modifier pos:start="121:22" pos:end="121:22">*</modifier></type><name pos:start="121:23" pos:end="121:24">st</name> <init pos:start="121:26" pos:end="121:41">= <expr pos:start="121:28" pos:end="121:41"><name pos:start="121:28" pos:end="121:41"><name pos:start="121:28" pos:end="121:29">ic</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:38">streams</name><index pos:start="121:39" pos:end="121:41">[<expr pos:start="121:40" pos:end="121:40"><name pos:start="121:40" pos:end="121:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="123:13" pos:end="130:13"><if pos:start="123:13" pos:end="130:13">if <condition pos:start="123:16" pos:end="123:19">(<expr pos:start="123:17" pos:end="123:18"><name pos:start="123:17" pos:end="123:18">st</name></expr>)</condition> <block pos:start="123:21" pos:end="130:13">{<block_content pos:start="125:17" pos:end="127:46">

                <expr_stmt pos:start="125:17" pos:end="125:39"><expr pos:start="125:17" pos:end="125:38"><call pos:start="125:17" pos:end="125:38"><name pos:start="125:17" pos:end="125:23">av_free</name><argument_list pos:start="125:24" pos:end="125:38">(<argument pos:start="125:25" pos:end="125:37"><expr pos:start="125:25" pos:end="125:37"><name pos:start="125:25" pos:end="125:37"><name pos:start="125:25" pos:end="125:26">st</name><operator pos:start="125:27" pos:end="125:28">-&gt;</operator><name pos:start="125:29" pos:end="125:37">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:46"><expr pos:start="127:17" pos:end="127:45"><call pos:start="127:17" pos:end="127:45"><name pos:start="127:17" pos:end="127:23">av_free</name><argument_list pos:start="127:24" pos:end="127:45">(<argument pos:start="127:25" pos:end="127:44"><expr pos:start="127:25" pos:end="127:44"><name pos:start="127:25" pos:end="127:44"><name pos:start="127:25" pos:end="127:26">st</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:33">codec</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:44">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="132:13" pos:end="132:24"><expr pos:start="132:13" pos:end="132:23"><call pos:start="132:13" pos:end="132:23"><name pos:start="132:13" pos:end="132:19">av_free</name><argument_list pos:start="132:20" pos:end="132:23">(<argument pos:start="132:21" pos:end="132:22"><expr pos:start="132:21" pos:end="132:22"><name pos:start="132:21" pos:end="132:22">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="138:5" pos:end="138:16"><expr pos:start="138:5" pos:end="138:15"><call pos:start="138:5" pos:end="138:15"><name pos:start="138:5" pos:end="138:11">av_free</name><argument_list pos:start="138:12" pos:end="138:15">(<argument pos:start="138:13" pos:end="138:14"><expr pos:start="138:13" pos:end="138:14"><name pos:start="138:13" pos:end="138:14">ic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="140:5" pos:end="140:19"><expr pos:start="140:5" pos:end="140:18"><operator pos:start="140:5" pos:end="140:5">*</operator><name pos:start="140:6" pos:end="140:11">ic_ptr</name> <operator pos:start="140:13" pos:end="140:13">=</operator> <name pos:start="140:15" pos:end="140:18">NULL</name></expr>;</expr_stmt>

    <return pos:start="142:5" pos:end="142:15">return <expr pos:start="142:12" pos:end="142:14"><name pos:start="142:12" pos:end="142:14">err</name></expr>;</return>

</block_content>}</block></function></unit>
