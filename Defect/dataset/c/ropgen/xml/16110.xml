<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16110.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">long</name></type> <name pos:start="1:13" pos:end="1:30">do_rt_sigreturn_v1</name><parameter_list pos:start="1:31" pos:end="1:48">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:42">CPUARMState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">abi_ulong</name></type> <name pos:start="5:15" pos:end="5:24">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:25">rt_sigframe_v1</name></name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:32">frame</name> <init pos:start="7:34" pos:end="7:39">= <expr pos:start="7:36" pos:end="7:39"><name pos:start="7:36" pos:end="7:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:21">host_set</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="21:7">/*

     * Since we stacked the signal on a 64-bit boundary,

     * then 'sp' should be word aligned here.  If it's

     * not, then the user is trying to mess with us.

     */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:14">frame_addr</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:30"><name pos:start="23:18" pos:end="23:20">env</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:26">regs</name><index pos:start="23:27" pos:end="23:30">[<expr pos:start="23:28" pos:end="23:29"><literal type="number" pos:start="23:28" pos:end="23:29">13</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><call pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:30">trace_user_do_rt_sigreturn</name><argument_list pos:start="25:31" pos:end="25:47">(<argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><name pos:start="25:32" pos:end="25:34">env</name></expr></argument>, <argument pos:start="25:37" pos:end="25:46"><expr pos:start="25:37" pos:end="25:46"><name pos:start="25:37" pos:end="25:46">frame_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:23">(<expr pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:18">frame_addr</name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <literal type="number" pos:start="27:22" pos:end="27:22">7</literal></expr>)</condition> <block pos:start="27:25" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:22">

        <goto pos:start="29:9" pos:end="29:22">goto <name pos:start="29:14" pos:end="29:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:61">(<expr pos:start="35:9" pos:end="35:60"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:60"><name pos:start="35:10" pos:end="35:25">lock_user_struct</name><argument_list pos:start="35:26" pos:end="35:60">(<argument pos:start="35:27" pos:end="35:37"><expr pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:37">VERIFY_READ</name></expr></argument>, <argument pos:start="35:40" pos:end="35:44"><expr pos:start="35:40" pos:end="35:44"><name pos:start="35:40" pos:end="35:44">frame</name></expr></argument>, <argument pos:start="35:47" pos:end="35:56"><expr pos:start="35:47" pos:end="35:56"><name pos:start="35:47" pos:end="35:56">frame_addr</name></expr></argument>, <argument pos:start="35:59" pos:end="35:59"><expr pos:start="35:59" pos:end="35:59"><literal type="number" pos:start="35:59" pos:end="35:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:63" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:22">

        <goto pos:start="37:9" pos:end="37:22">goto <name pos:start="37:14" pos:end="37:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:61"><expr pos:start="43:5" pos:end="43:60"><call pos:start="43:5" pos:end="43:60"><name pos:start="43:5" pos:end="43:25">target_to_host_sigset</name><argument_list pos:start="43:26" pos:end="43:60">(<argument pos:start="43:27" pos:end="43:35"><expr pos:start="43:27" pos:end="43:35"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:35">host_set</name></expr></argument>, <argument pos:start="43:38" pos:end="43:59"><expr pos:start="43:38" pos:end="43:59"><operator pos:start="43:38" pos:end="43:38">&amp;</operator><name pos:start="43:39" pos:end="43:59"><name pos:start="43:39" pos:end="43:43">frame</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:47">uc</name><operator pos:start="43:48" pos:end="43:48">.</operator><name pos:start="43:49" pos:end="43:59">tuc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:27"><expr pos:start="45:5" pos:end="45:26"><call pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:15">set_sigmask</name><argument_list pos:start="45:16" pos:end="45:26">(<argument pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:25"><operator pos:start="45:17" pos:end="45:17">&amp;</operator><name pos:start="45:18" pos:end="45:25">host_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:57">(<expr pos:start="49:9" pos:end="49:56"><call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:26">restore_sigcontext</name><argument_list pos:start="49:27" pos:end="49:56">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">env</name></expr></argument>, <argument pos:start="49:33" pos:end="49:55"><expr pos:start="49:33" pos:end="49:55"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:55"><name pos:start="49:34" pos:end="49:38">frame</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:42">uc</name><operator pos:start="49:43" pos:end="49:43">.</operator><name pos:start="49:44" pos:end="49:55">tuc_mcontext</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:59" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:22">

        <goto pos:start="51:9" pos:end="51:22">goto <name pos:start="51:14" pos:end="51:21">badframe</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="72:0"><if pos:start="57:5" pos:end="72:0">if <condition pos:start="57:8" pos:end="57:124">(<expr pos:start="57:9" pos:end="57:123"><call pos:start="57:9" pos:end="57:112"><name pos:start="57:9" pos:end="57:22">do_sigaltstack</name><argument_list pos:start="57:23" pos:end="57:112">(<argument pos:start="57:24" pos:end="57:81"><expr pos:start="57:24" pos:end="57:81"><name pos:start="57:24" pos:end="57:33">frame_addr</name> <operator pos:start="57:35" pos:end="57:35">+</operator> <call pos:start="57:37" pos:end="57:81"><name pos:start="57:37" pos:end="57:44">offsetof</name><argument_list pos:start="57:45" pos:end="57:81">(<argument pos:start="57:46" pos:end="57:66"><expr pos:start="57:46" pos:end="57:66">struct <name pos:start="57:53" pos:end="57:66">rt_sigframe_v1</name></expr></argument>, <argument pos:start="57:69" pos:end="57:80"><expr pos:start="57:69" pos:end="57:80"><name pos:start="57:69" pos:end="57:80"><name pos:start="57:69" pos:end="57:70">uc</name><operator pos:start="57:71" pos:end="57:71">.</operator><name pos:start="57:72" pos:end="57:80">tuc_stack</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:84" pos:end="57:84"><expr pos:start="57:84" pos:end="57:84"><literal type="number" pos:start="57:84" pos:end="57:84">0</literal></expr></argument>, <argument pos:start="57:87" pos:end="57:111"><expr pos:start="57:87" pos:end="57:111"><call pos:start="57:87" pos:end="57:111"><name pos:start="57:87" pos:end="57:106">get_sp_from_cpustate</name><argument_list pos:start="57:107" pos:end="57:111">(<argument pos:start="57:108" pos:end="57:110"><expr pos:start="57:108" pos:end="57:110"><name pos:start="57:108" pos:end="57:110">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="57:114" pos:end="57:115">==</operator> <operator pos:start="57:117" pos:end="57:117">-</operator><name pos:start="57:118" pos:end="57:123">EFAULT</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="72:0"><block_content pos:start="59:9" pos:end="72:0">

        <goto pos:start="59:9" pos:end="72:0">goto <name pos:start="59:14" pos:end="59:21">badframe</name>;</goto></block_content></block></if></if_stmt>



<cpp:if pos:start="63:1" pos:end="63:5">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:5"><literal type="number" pos:start="63:5" pos:end="63:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="65:5" pos:end="65:47">/* Send SIGTRAP if we're single-stepping */</comment>

    if (ptrace_cancel_bpt(current))

        send_sig(SIGTRAP, current, 1);

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="73:5" pos:end="73:45"><expr pos:start="73:5" pos:end="73:44"><call pos:start="73:5" pos:end="73:44"><name pos:start="73:5" pos:end="73:22">unlock_user_struct</name><argument_list pos:start="73:23" pos:end="73:44">(<argument pos:start="73:24" pos:end="73:28"><expr pos:start="73:24" pos:end="73:28"><name pos:start="73:24" pos:end="73:28">frame</name></expr></argument>, <argument pos:start="73:31" pos:end="73:40"><expr pos:start="73:31" pos:end="73:40"><name pos:start="73:31" pos:end="73:40">frame_addr</name></expr></argument>, <argument pos:start="73:43" pos:end="73:43"><expr pos:start="73:43" pos:end="73:43"><literal type="number" pos:start="73:43" pos:end="73:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:35">return <expr pos:start="75:12" pos:end="75:34"><operator pos:start="75:12" pos:end="75:12">-</operator><name pos:start="75:13" pos:end="75:34">TARGET_QEMU_ESIGRETURN</name></expr>;</return>



<label pos:start="79:1" pos:end="79:9"><name pos:start="79:1" pos:end="79:8">badframe</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:45"><expr pos:start="81:5" pos:end="81:44"><call pos:start="81:5" pos:end="81:44"><name pos:start="81:5" pos:end="81:22">unlock_user_struct</name><argument_list pos:start="81:23" pos:end="81:44">(<argument pos:start="81:24" pos:end="81:28"><expr pos:start="81:24" pos:end="81:28"><name pos:start="81:24" pos:end="81:28">frame</name></expr></argument>, <argument pos:start="81:31" pos:end="81:40"><expr pos:start="81:31" pos:end="81:40"><name pos:start="81:31" pos:end="81:40">frame_addr</name></expr></argument>, <argument pos:start="81:43" pos:end="81:43"><expr pos:start="81:43" pos:end="81:43"><literal type="number" pos:start="81:43" pos:end="81:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:46"><expr pos:start="83:5" pos:end="83:45"><call pos:start="83:5" pos:end="83:45"><name pos:start="83:5" pos:end="83:13">force_sig</name><argument_list pos:start="83:14" pos:end="83:45">(<argument pos:start="83:15" pos:end="83:28"><expr pos:start="83:15" pos:end="83:28"><name pos:start="83:15" pos:end="83:28">TARGET_SIGSEGV</name></expr></argument> <comment type="block" pos:start="83:30" pos:end="83:44">/* , current */</comment>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:13">return <expr pos:start="85:12" pos:end="85:12"><literal type="number" pos:start="85:12" pos:end="85:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
