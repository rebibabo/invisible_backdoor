<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17138.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">rtas_ibm_change_msi</name><parameter_list pos:start="1:32" pos:end="7:50">(<parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:48">sPAPREnvironment</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">spapr</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:46"><decl pos:start="3:33" pos:end="3:46"><type pos:start="3:33" pos:end="3:46"><name pos:start="3:33" pos:end="3:40">uint32_t</name></type> <name pos:start="3:42" pos:end="3:46">token</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:62">nargs</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:49"><decl pos:start="5:33" pos:end="5:49"><type pos:start="5:33" pos:end="5:49"><name pos:start="5:33" pos:end="5:44">target_ulong</name></type> <name pos:start="5:46" pos:end="5:49">args</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:59">uint32_t</name></type> <name pos:start="5:61" pos:end="5:64">nret</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:49"><decl pos:start="7:33" pos:end="7:49"><type pos:start="7:33" pos:end="7:49"><name pos:start="7:33" pos:end="7:44">target_ulong</name></type> <name pos:start="7:46" pos:end="7:49">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="191:1">{<block_content pos:start="11:5" pos:end="189:55">

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">config_addr</name> <init pos:start="11:26" pos:end="11:43">= <expr pos:start="11:28" pos:end="11:43"><call pos:start="11:28" pos:end="11:43"><name pos:start="11:28" pos:end="11:34">rtas_ld</name><argument_list pos:start="11:35" pos:end="11:43">(<argument pos:start="11:36" pos:end="11:39"><expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">args</name></expr></argument>, <argument pos:start="11:42" pos:end="11:42"><expr pos:start="11:42" pos:end="11:42"><literal type="number" pos:start="11:42" pos:end="11:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:74"><decl pos:start="13:5" pos:end="13:73"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:17">buid</name> <init pos:start="13:19" pos:end="13:73">= <expr pos:start="13:21" pos:end="13:73"><operator pos:start="13:21" pos:end="13:21">(</operator><operator pos:start="13:22" pos:end="13:22">(</operator><name pos:start="13:23" pos:end="13:30">uint64_t</name><operator pos:start="13:31" pos:end="13:31">)</operator><call pos:start="13:32" pos:end="13:47"><name pos:start="13:32" pos:end="13:38">rtas_ld</name><argument_list pos:start="13:39" pos:end="13:47">(<argument pos:start="13:40" pos:end="13:43"><expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">args</name></expr></argument>, <argument pos:start="13:46" pos:end="13:46"><expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="13:49" pos:end="13:50">&lt;&lt;</operator> <literal type="number" pos:start="13:52" pos:end="13:53">32</literal><operator pos:start="13:54" pos:end="13:54">)</operator> <operator pos:start="13:56" pos:end="13:56">|</operator> <call pos:start="13:58" pos:end="13:73"><name pos:start="13:58" pos:end="13:64">rtas_ld</name><argument_list pos:start="13:65" pos:end="13:73">(<argument pos:start="13:66" pos:end="13:69"><expr pos:start="13:66" pos:end="13:69"><name pos:start="13:66" pos:end="13:69">args</name></expr></argument>, <argument pos:start="13:72" pos:end="13:72"><expr pos:start="13:72" pos:end="13:72"><literal type="number" pos:start="13:72" pos:end="13:72">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">func</name> <init pos:start="15:23" pos:end="15:40">= <expr pos:start="15:25" pos:end="15:40"><call pos:start="15:25" pos:end="15:40"><name pos:start="15:25" pos:end="15:31">rtas_ld</name><argument_list pos:start="15:32" pos:end="15:40">(<argument pos:start="15:33" pos:end="15:36"><expr pos:start="15:33" pos:end="15:36"><name pos:start="15:33" pos:end="15:36">args</name></expr></argument>, <argument pos:start="15:39" pos:end="15:39"><expr pos:start="15:39" pos:end="15:39"><literal type="number" pos:start="15:39" pos:end="15:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:43"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:24">req_num</name> <init pos:start="17:26" pos:end="17:43">= <expr pos:start="17:28" pos:end="17:43"><call pos:start="17:28" pos:end="17:43"><name pos:start="17:28" pos:end="17:34">rtas_ld</name><argument_list pos:start="17:35" pos:end="17:43">(<argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">args</name></expr></argument>, <argument pos:start="17:42" pos:end="17:42"><expr pos:start="17:42" pos:end="17:42"><literal type="number" pos:start="17:42" pos:end="17:42">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:46" pos:end="17:66">/* 0 == remove all */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">seq_num</name> <init pos:start="19:26" pos:end="19:43">= <expr pos:start="19:28" pos:end="19:43"><call pos:start="19:28" pos:end="19:43"><name pos:start="19:28" pos:end="19:34">rtas_ld</name><argument_list pos:start="19:35" pos:end="19:43">(<argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">args</name></expr></argument>, <argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><literal type="number" pos:start="19:42" pos:end="19:42">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:30">ret_intr_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">ndev</name></decl>, <decl pos:start="23:15" pos:end="23:17"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:15" pos:end="23:17">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">sPAPRPHBState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:22">phb</name> <init pos:start="25:24" pos:end="25:29">= <expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">PCIDevice</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:19">pdev</name> <init pos:start="27:21" pos:end="27:26">= <expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">NULL</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="31:5" pos:end="55:5">switch <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><name pos:start="31:13" pos:end="31:16">func</name></expr>)</condition> <block pos:start="31:19" pos:end="55:5">{<block_content pos:start="33:5" pos:end="53:15">

    <case pos:start="33:5" pos:end="33:28">case <expr pos:start="33:10" pos:end="33:27"><name pos:start="33:10" pos:end="33:27">RTAS_CHANGE_MSI_FN</name></expr>:</case>

    <case pos:start="35:5" pos:end="35:24">case <expr pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:23">RTAS_CHANGE_FN</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:21">ret_intr_type</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:37">RTAS_TYPE_MSI</name></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:29">case <expr pos:start="41:10" pos:end="41:28"><name pos:start="41:10" pos:end="41:28">RTAS_CHANGE_MSIX_FN</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:21">ret_intr_type</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:38">RTAS_TYPE_MSIX</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <default pos:start="47:5" pos:end="47:12">default:</default>

        <expr_stmt pos:start="49:9" pos:end="49:78"><expr pos:start="49:9" pos:end="49:77"><call pos:start="49:9" pos:end="49:77"><name pos:start="49:9" pos:end="49:15">fprintf</name><argument_list pos:start="49:16" pos:end="49:77">(<argument pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:22">stderr</name></expr></argument>, <argument pos:start="49:25" pos:end="49:70"><expr pos:start="49:25" pos:end="49:70"><literal type="string" pos:start="49:25" pos:end="49:70">"rtas_ibm_change_msi(%u) is not implemented\n"</literal></expr></argument>, <argument pos:start="49:73" pos:end="49:76"><expr pos:start="49:73" pos:end="49:76"><name pos:start="49:73" pos:end="49:76">func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:15">rtas_st</name><argument_list pos:start="51:16" pos:end="51:28">(<argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">rets</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">0</literal></expr></argument>, <argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><operator pos:start="51:26" pos:end="51:26">-</operator><literal type="number" pos:start="51:27" pos:end="51:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="51:31" pos:end="51:51">/* Parameter error */</comment>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="59:5" pos:end="59:28">/* Fins sPAPRPHBState */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:7">phb</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:31"><name pos:start="61:11" pos:end="61:18">find_phb</name><argument_list pos:start="61:19" pos:end="61:31">(<argument pos:start="61:20" pos:end="61:24"><expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">spapr</name></expr></argument>, <argument pos:start="61:27" pos:end="61:30"><expr pos:start="61:27" pos:end="61:30"><name pos:start="61:27" pos:end="61:30">buid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">phb</name></expr>)</condition> <block pos:start="63:14" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:50">

        <expr_stmt pos:start="65:9" pos:end="65:50"><expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:12">pdev</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:49"><name pos:start="65:16" pos:end="65:23">find_dev</name><argument_list pos:start="65:24" pos:end="65:49">(<argument pos:start="65:25" pos:end="65:29"><expr pos:start="65:25" pos:end="65:29"><name pos:start="65:25" pos:end="65:29">spapr</name></expr></argument>, <argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">buid</name></expr></argument>, <argument pos:start="65:38" pos:end="65:48"><expr pos:start="65:38" pos:end="65:48"><name pos:start="65:38" pos:end="65:48">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:12">phb</name> <operator pos:start="69:14" pos:end="69:15">||</operator> <operator pos:start="69:17" pos:end="69:17">!</operator><name pos:start="69:18" pos:end="69:21">pdev</name></expr>)</condition> <block pos:start="69:24" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:15">

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><call pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:15">rtas_st</name><argument_list pos:start="71:16" pos:end="71:28">(<argument pos:start="71:17" pos:end="71:20"><expr pos:start="71:17" pos:end="71:20"><name pos:start="71:17" pos:end="71:20">rets</name></expr></argument>, <argument pos:start="71:23" pos:end="71:23"><expr pos:start="71:23" pos:end="71:23"><literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr></argument>, <argument pos:start="71:26" pos:end="71:27"><expr pos:start="71:26" pos:end="71:27"><operator pos:start="71:26" pos:end="71:26">-</operator><literal type="number" pos:start="71:27" pos:end="71:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="71:31" pos:end="71:51">/* Parameter error */</comment>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:24">/* Releasing MSIs */</comment>

    <if_stmt pos:start="81:5" pos:end="103:5"><if pos:start="81:5" pos:end="103:5">if <condition pos:start="81:8" pos:end="81:17">(<expr pos:start="81:9" pos:end="81:16"><operator pos:start="81:9" pos:end="81:9">!</operator><name pos:start="81:10" pos:end="81:16">req_num</name></expr>)</condition> <block pos:start="81:19" pos:end="103:5">{<block_content pos:start="83:9" pos:end="101:15">

        <expr_stmt pos:start="83:9" pos:end="83:58"><expr pos:start="83:9" pos:end="83:57"><name pos:start="83:9" pos:end="83:12">ndev</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:57"><name pos:start="83:16" pos:end="83:32">spapr_msicfg_find</name><argument_list pos:start="83:33" pos:end="83:57">(<argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">phb</name></expr></argument>, <argument pos:start="83:39" pos:end="83:49"><expr pos:start="83:39" pos:end="83:49"><name pos:start="83:39" pos:end="83:49">config_addr</name></expr></argument>, <argument pos:start="83:52" pos:end="83:56"><expr pos:start="83:52" pos:end="83:56"><name pos:start="83:52" pos:end="83:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:21">(<expr pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:16">ndev</name> <operator pos:start="85:18" pos:end="85:18">&lt;</operator> <literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>)</condition> <block pos:start="85:23" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:19">

            <expr_stmt pos:start="87:13" pos:end="87:77"><expr pos:start="87:13" pos:end="87:76"><call pos:start="87:13" pos:end="87:76"><name pos:start="87:13" pos:end="87:31">trace_spapr_pci_msi</name><argument_list pos:start="87:32" pos:end="87:76">(<argument pos:start="87:33" pos:end="87:58"><expr pos:start="87:33" pos:end="87:58"><literal type="string" pos:start="87:33" pos:end="87:58">"MSI has not been enabled"</literal></expr></argument>, <argument pos:start="87:61" pos:end="87:62"><expr pos:start="87:61" pos:end="87:62"><operator pos:start="87:61" pos:end="87:61">-</operator><literal type="number" pos:start="87:62" pos:end="87:62">1</literal></expr></argument>, <argument pos:start="87:65" pos:end="87:75"><expr pos:start="87:65" pos:end="87:75"><name pos:start="87:65" pos:end="87:75">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:33"><expr pos:start="89:13" pos:end="89:32"><call pos:start="89:13" pos:end="89:32"><name pos:start="89:13" pos:end="89:19">rtas_st</name><argument_list pos:start="89:20" pos:end="89:32">(<argument pos:start="89:21" pos:end="89:24"><expr pos:start="89:21" pos:end="89:24"><name pos:start="89:21" pos:end="89:24">rets</name></expr></argument>, <argument pos:start="89:27" pos:end="89:27"><expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">0</literal></expr></argument>, <argument pos:start="89:30" pos:end="89:31"><expr pos:start="89:30" pos:end="89:31"><operator pos:start="89:30" pos:end="89:30">-</operator><literal type="number" pos:start="89:31" pos:end="89:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="89:35" pos:end="89:54">/* Hardware error */</comment>

            <return pos:start="91:13" pos:end="91:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:64"><expr pos:start="95:9" pos:end="95:63"><call pos:start="95:9" pos:end="95:63"><name pos:start="95:9" pos:end="95:27">trace_spapr_pci_msi</name><argument_list pos:start="95:28" pos:end="95:63">(<argument pos:start="95:29" pos:end="95:43"><expr pos:start="95:29" pos:end="95:43"><literal type="string" pos:start="95:29" pos:end="95:43">"Released MSIs"</literal></expr></argument>, <argument pos:start="95:46" pos:end="95:49"><expr pos:start="95:46" pos:end="95:49"><name pos:start="95:46" pos:end="95:49">ndev</name></expr></argument>, <argument pos:start="95:52" pos:end="95:62"><expr pos:start="95:52" pos:end="95:62"><name pos:start="95:52" pos:end="95:62">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><call pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:15">rtas_st</name><argument_list pos:start="97:16" pos:end="97:27">(<argument pos:start="97:17" pos:end="97:20"><expr pos:start="97:17" pos:end="97:20"><name pos:start="97:17" pos:end="97:20">rets</name></expr></argument>, <argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><literal type="number" pos:start="97:23" pos:end="97:23">0</literal></expr></argument>, <argument pos:start="97:26" pos:end="97:26"><expr pos:start="97:26" pos:end="97:26"><literal type="number" pos:start="97:26" pos:end="97:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:28"><expr pos:start="99:9" pos:end="99:27"><call pos:start="99:9" pos:end="99:27"><name pos:start="99:9" pos:end="99:15">rtas_st</name><argument_list pos:start="99:16" pos:end="99:27">(<argument pos:start="99:17" pos:end="99:20"><expr pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">rets</name></expr></argument>, <argument pos:start="99:23" pos:end="99:23"><expr pos:start="99:23" pos:end="99:23"><literal type="number" pos:start="99:23" pos:end="99:23">1</literal></expr></argument>, <argument pos:start="99:26" pos:end="99:26"><expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:22">/* Enabling MSI */</comment>



    <comment type="block" pos:start="111:5" pos:end="111:74">/* Find a device number in the map to add or reuse the existing one */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:53"><expr pos:start="113:5" pos:end="113:52"><name pos:start="113:5" pos:end="113:8">ndev</name> <operator pos:start="113:10" pos:end="113:10">=</operator> <call pos:start="113:12" pos:end="113:52"><name pos:start="113:12" pos:end="113:28">spapr_msicfg_find</name><argument_list pos:start="113:29" pos:end="113:52">(<argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">phb</name></expr></argument>, <argument pos:start="113:35" pos:end="113:45"><expr pos:start="113:35" pos:end="113:45"><name pos:start="113:35" pos:end="113:45">config_addr</name></expr></argument>, <argument pos:start="113:48" pos:end="113:51"><expr pos:start="113:48" pos:end="113:51"><name pos:start="113:48" pos:end="113:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:48">(<expr pos:start="115:9" pos:end="115:47"><name pos:start="115:9" pos:end="115:12">ndev</name> <operator pos:start="115:14" pos:end="115:15">&gt;=</operator> <name pos:start="115:17" pos:end="115:35">SPAPR_MSIX_MAX_DEVS</name> <operator pos:start="115:37" pos:end="115:38">||</operator> <name pos:start="115:40" pos:end="115:43">ndev</name> <operator pos:start="115:45" pos:end="115:45">&lt;</operator> <literal type="number" pos:start="115:47" pos:end="115:47">0</literal></expr>)</condition> <block pos:start="115:50" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:15">

        <expr_stmt pos:start="117:9" pos:end="117:64"><expr pos:start="117:9" pos:end="117:63"><call pos:start="117:9" pos:end="117:63"><name pos:start="117:9" pos:end="117:15">fprintf</name><argument_list pos:start="117:16" pos:end="117:63">(<argument pos:start="117:17" pos:end="117:22"><expr pos:start="117:17" pos:end="117:22"><name pos:start="117:17" pos:end="117:22">stderr</name></expr></argument>, <argument pos:start="117:25" pos:end="117:62"><expr pos:start="117:25" pos:end="117:62"><literal type="string" pos:start="117:25" pos:end="117:62">"No free entry for a new MSI device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><call pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:15">rtas_st</name><argument_list pos:start="119:16" pos:end="119:28">(<argument pos:start="119:17" pos:end="119:20"><expr pos:start="119:17" pos:end="119:20"><name pos:start="119:17" pos:end="119:20">rets</name></expr></argument>, <argument pos:start="119:23" pos:end="119:23"><expr pos:start="119:23" pos:end="119:23"><literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr></argument>, <argument pos:start="119:26" pos:end="119:27"><expr pos:start="119:26" pos:end="119:27"><operator pos:start="119:26" pos:end="119:26">-</operator><literal type="number" pos:start="119:27" pos:end="119:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="119:31" pos:end="119:50">/* Hardware error */</comment>

        <return pos:start="121:9" pos:end="121:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:62"><expr pos:start="125:5" pos:end="125:61"><call pos:start="125:5" pos:end="125:61"><name pos:start="125:5" pos:end="125:23">trace_spapr_pci_msi</name><argument_list pos:start="125:24" pos:end="125:61">(<argument pos:start="125:25" pos:end="125:41"><expr pos:start="125:25" pos:end="125:41"><literal type="string" pos:start="125:25" pos:end="125:41">"Configuring MSI"</literal></expr></argument>, <argument pos:start="125:44" pos:end="125:47"><expr pos:start="125:44" pos:end="125:47"><name pos:start="125:44" pos:end="125:47">ndev</name></expr></argument>, <argument pos:start="125:50" pos:end="125:60"><expr pos:start="125:50" pos:end="125:60"><name pos:start="125:50" pos:end="125:60">config_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:72">/* Check if there is an old config and MSI number has not changed */</comment>

    <if_stmt pos:start="131:5" pos:end="141:5"><if pos:start="131:5" pos:end="141:5">if <condition pos:start="131:8" pos:end="131:76">(<expr pos:start="131:9" pos:end="131:75"><name pos:start="131:9" pos:end="131:28"><name pos:start="131:9" pos:end="131:11">phb</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:22">msi_table</name><index pos:start="131:23" pos:end="131:28">[<expr pos:start="131:24" pos:end="131:27"><name pos:start="131:24" pos:end="131:27">ndev</name></expr>]</index></name><operator pos:start="131:29" pos:end="131:29">.</operator><name pos:start="131:30" pos:end="131:33">nvec</name> <operator pos:start="131:35" pos:end="131:36">&amp;&amp;</operator> <operator pos:start="131:38" pos:end="131:38">(</operator><name pos:start="131:39" pos:end="131:45">req_num</name> <operator pos:start="131:47" pos:end="131:48">!=</operator> <name pos:start="131:50" pos:end="131:69"><name pos:start="131:50" pos:end="131:52">phb</name><operator pos:start="131:53" pos:end="131:54">-&gt;</operator><name pos:start="131:55" pos:end="131:63">msi_table</name><index pos:start="131:64" pos:end="131:69">[<expr pos:start="131:65" pos:end="131:68"><name pos:start="131:65" pos:end="131:68">ndev</name></expr>]</index></name><operator pos:start="131:70" pos:end="131:70">.</operator><name pos:start="131:71" pos:end="131:74">nvec</name><operator pos:start="131:75" pos:end="131:75">)</operator></expr>)</condition> <block pos:start="131:78" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:15">

        <comment type="block" pos:start="133:9" pos:end="133:34">/* Unexpected behaviour */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><call pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:15">fprintf</name><argument_list pos:start="135:16" pos:end="135:70">(<argument pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:22">stderr</name></expr></argument>, <argument pos:start="135:25" pos:end="135:63"><expr pos:start="135:25" pos:end="135:63"><literal type="string" pos:start="135:25" pos:end="135:63">"Cannot reuse MSI config for device#%d"</literal></expr></argument>, <argument pos:start="135:66" pos:end="135:69"><expr pos:start="135:66" pos:end="135:69"><name pos:start="135:66" pos:end="135:69">ndev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:29"><expr pos:start="137:9" pos:end="137:28"><call pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:15">rtas_st</name><argument_list pos:start="137:16" pos:end="137:28">(<argument pos:start="137:17" pos:end="137:20"><expr pos:start="137:17" pos:end="137:20"><name pos:start="137:17" pos:end="137:20">rets</name></expr></argument>, <argument pos:start="137:23" pos:end="137:23"><expr pos:start="137:23" pos:end="137:23"><literal type="number" pos:start="137:23" pos:end="137:23">0</literal></expr></argument>, <argument pos:start="137:26" pos:end="137:27"><expr pos:start="137:26" pos:end="137:27"><operator pos:start="137:26" pos:end="137:26">-</operator><literal type="number" pos:start="137:27" pos:end="137:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="137:31" pos:end="137:50">/* Hardware error */</comment>

        <return pos:start="139:9" pos:end="139:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:50">/* There is no cached config, allocate MSIs */</comment>

    <if_stmt pos:start="147:5" pos:end="167:5"><if pos:start="147:5" pos:end="167:5">if <condition pos:start="147:8" pos:end="147:35">(<expr pos:start="147:9" pos:end="147:34"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:29"><name pos:start="147:10" pos:end="147:12">phb</name><operator pos:start="147:13" pos:end="147:14">-&gt;</operator><name pos:start="147:15" pos:end="147:23">msi_table</name><index pos:start="147:24" pos:end="147:29">[<expr pos:start="147:25" pos:end="147:28"><name pos:start="147:25" pos:end="147:28">ndev</name></expr>]</index></name><operator pos:start="147:30" pos:end="147:30">.</operator><name pos:start="147:31" pos:end="147:34">nvec</name></expr>)</condition> <block pos:start="147:37" pos:end="167:5">{<block_content pos:start="149:9" pos:end="165:55">

        <expr_stmt pos:start="149:9" pos:end="149:55"><expr pos:start="149:9" pos:end="149:54"><name pos:start="149:9" pos:end="149:11">irq</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:54"><name pos:start="149:15" pos:end="149:38">spapr_allocate_irq_block</name><argument_list pos:start="149:39" pos:end="149:54">(<argument pos:start="149:40" pos:end="149:46"><expr pos:start="149:40" pos:end="149:46"><name pos:start="149:40" pos:end="149:46">req_num</name></expr></argument>, <argument pos:start="149:49" pos:end="149:53"><expr pos:start="149:49" pos:end="149:53"><name pos:start="149:49" pos:end="149:53">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:20">(<expr pos:start="151:13" pos:end="151:19"><name pos:start="151:13" pos:end="151:15">irq</name> <operator pos:start="151:17" pos:end="151:17">&lt;</operator> <literal type="number" pos:start="151:19" pos:end="151:19">0</literal></expr>)</condition> <block pos:start="151:22" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:19">

            <expr_stmt pos:start="153:13" pos:end="153:72"><expr pos:start="153:13" pos:end="153:71"><call pos:start="153:13" pos:end="153:71"><name pos:start="153:13" pos:end="153:19">fprintf</name><argument_list pos:start="153:20" pos:end="153:71">(<argument pos:start="153:21" pos:end="153:26"><expr pos:start="153:21" pos:end="153:26"><name pos:start="153:21" pos:end="153:26">stderr</name></expr></argument>, <argument pos:start="153:29" pos:end="153:64"><expr pos:start="153:29" pos:end="153:64"><literal type="string" pos:start="153:29" pos:end="153:64">"Cannot allocate MSIs for device#%d"</literal></expr></argument>, <argument pos:start="153:67" pos:end="153:70"><expr pos:start="153:67" pos:end="153:70"><name pos:start="153:67" pos:end="153:70">ndev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:33"><expr pos:start="155:13" pos:end="155:32"><call pos:start="155:13" pos:end="155:32"><name pos:start="155:13" pos:end="155:19">rtas_st</name><argument_list pos:start="155:20" pos:end="155:32">(<argument pos:start="155:21" pos:end="155:24"><expr pos:start="155:21" pos:end="155:24"><name pos:start="155:21" pos:end="155:24">rets</name></expr></argument>, <argument pos:start="155:27" pos:end="155:27"><expr pos:start="155:27" pos:end="155:27"><literal type="number" pos:start="155:27" pos:end="155:27">0</literal></expr></argument>, <argument pos:start="155:30" pos:end="155:31"><expr pos:start="155:30" pos:end="155:31"><operator pos:start="155:30" pos:end="155:30">-</operator><literal type="number" pos:start="155:31" pos:end="155:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="155:35" pos:end="155:54">/* Hardware error */</comment>

            <return pos:start="157:13" pos:end="157:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:39"><expr pos:start="161:9" pos:end="161:38"><name pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:11">phb</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:22">msi_table</name><index pos:start="161:23" pos:end="161:28">[<expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">ndev</name></expr>]</index></name><operator pos:start="161:29" pos:end="161:29">.</operator><name pos:start="161:30" pos:end="161:32">irq</name> <operator pos:start="161:34" pos:end="161:34">=</operator> <name pos:start="161:36" pos:end="161:38">irq</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:44"><expr pos:start="163:9" pos:end="163:43"><name pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:11">phb</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:22">msi_table</name><index pos:start="163:23" pos:end="163:28">[<expr pos:start="163:24" pos:end="163:27"><name pos:start="163:24" pos:end="163:27">ndev</name></expr>]</index></name><operator pos:start="163:29" pos:end="163:29">.</operator><name pos:start="163:30" pos:end="163:33">nvec</name> <operator pos:start="163:35" pos:end="163:35">=</operator> <name pos:start="163:37" pos:end="163:43">req_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:55"><expr pos:start="165:9" pos:end="165:54"><name pos:start="165:9" pos:end="165:28"><name pos:start="165:9" pos:end="165:11">phb</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:22">msi_table</name><index pos:start="165:23" pos:end="165:28">[<expr pos:start="165:24" pos:end="165:27"><name pos:start="165:24" pos:end="165:27">ndev</name></expr>]</index></name><operator pos:start="165:29" pos:end="165:29">.</operator><name pos:start="165:30" pos:end="165:40">config_addr</name> <operator pos:start="165:42" pos:end="165:42">=</operator> <name pos:start="165:44" pos:end="165:54">config_addr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:73">/* Setup MSI/MSIX vectors in the device (via cfgspace or MSIX BAR) */</comment>

    <expr_stmt pos:start="173:5" pos:end="175:63"><expr pos:start="173:5" pos:end="175:62"><call pos:start="173:5" pos:end="175:62"><name pos:start="173:5" pos:end="173:20">spapr_msi_setmsg</name><argument_list pos:start="173:21" pos:end="175:62">(<argument pos:start="173:22" pos:end="173:25"><expr pos:start="173:22" pos:end="173:25"><name pos:start="173:22" pos:end="173:25">pdev</name></expr></argument>, <argument pos:start="173:28" pos:end="173:59"><expr pos:start="173:28" pos:end="173:59"><name pos:start="173:28" pos:end="173:44"><name pos:start="173:28" pos:end="173:30">phb</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:44">msi_win_addr</name></name> <operator pos:start="173:46" pos:end="173:46">|</operator> <operator pos:start="173:48" pos:end="173:48">(</operator><name pos:start="173:49" pos:end="173:52">ndev</name> <operator pos:start="173:54" pos:end="173:55">&lt;&lt;</operator> <literal type="number" pos:start="173:57" pos:end="173:58">16</literal><operator pos:start="173:59" pos:end="173:59">)</operator></expr></argument>,

                     <argument pos:start="175:22" pos:end="175:52"><expr pos:start="175:22" pos:end="175:52"><name pos:start="175:22" pos:end="175:34">ret_intr_type</name> <operator pos:start="175:36" pos:end="175:37">==</operator> <name pos:start="175:39" pos:end="175:52">RTAS_TYPE_MSIX</name></expr></argument>, <argument pos:start="175:55" pos:end="175:61"><expr pos:start="175:55" pos:end="175:61"><name pos:start="175:55" pos:end="175:61">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:24"><expr pos:start="179:5" pos:end="179:23"><call pos:start="179:5" pos:end="179:23"><name pos:start="179:5" pos:end="179:11">rtas_st</name><argument_list pos:start="179:12" pos:end="179:23">(<argument pos:start="179:13" pos:end="179:16"><expr pos:start="179:13" pos:end="179:16"><name pos:start="179:13" pos:end="179:16">rets</name></expr></argument>, <argument pos:start="179:19" pos:end="179:19"><expr pos:start="179:19" pos:end="179:19"><literal type="number" pos:start="179:19" pos:end="179:19">0</literal></expr></argument>, <argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:30"><expr pos:start="181:5" pos:end="181:29"><call pos:start="181:5" pos:end="181:29"><name pos:start="181:5" pos:end="181:11">rtas_st</name><argument_list pos:start="181:12" pos:end="181:29">(<argument pos:start="181:13" pos:end="181:16"><expr pos:start="181:13" pos:end="181:16"><name pos:start="181:13" pos:end="181:16">rets</name></expr></argument>, <argument pos:start="181:19" pos:end="181:19"><expr pos:start="181:19" pos:end="181:19"><literal type="number" pos:start="181:19" pos:end="181:19">1</literal></expr></argument>, <argument pos:start="181:22" pos:end="181:28"><expr pos:start="181:22" pos:end="181:28"><name pos:start="181:22" pos:end="181:28">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:32"><expr pos:start="183:5" pos:end="183:31"><call pos:start="183:5" pos:end="183:31"><name pos:start="183:5" pos:end="183:11">rtas_st</name><argument_list pos:start="183:12" pos:end="183:31">(<argument pos:start="183:13" pos:end="183:16"><expr pos:start="183:13" pos:end="183:16"><name pos:start="183:13" pos:end="183:16">rets</name></expr></argument>, <argument pos:start="183:19" pos:end="183:19"><expr pos:start="183:19" pos:end="183:19"><literal type="number" pos:start="183:19" pos:end="183:19">2</literal></expr></argument>, <argument pos:start="183:22" pos:end="183:30"><expr pos:start="183:22" pos:end="183:30"><operator pos:start="183:22" pos:end="183:23">++</operator><name pos:start="183:24" pos:end="183:30">seq_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:36"><expr pos:start="185:5" pos:end="185:35"><call pos:start="185:5" pos:end="185:35"><name pos:start="185:5" pos:end="185:11">rtas_st</name><argument_list pos:start="185:12" pos:end="185:35">(<argument pos:start="185:13" pos:end="185:16"><expr pos:start="185:13" pos:end="185:16"><name pos:start="185:13" pos:end="185:16">rets</name></expr></argument>, <argument pos:start="185:19" pos:end="185:19"><expr pos:start="185:19" pos:end="185:19"><literal type="number" pos:start="185:19" pos:end="185:19">3</literal></expr></argument>, <argument pos:start="185:22" pos:end="185:34"><expr pos:start="185:22" pos:end="185:34"><name pos:start="185:22" pos:end="185:34">ret_intr_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:55"><expr pos:start="189:5" pos:end="189:54"><call pos:start="189:5" pos:end="189:54"><name pos:start="189:5" pos:end="189:39">trace_spapr_pci_rtas_ibm_change_msi</name><argument_list pos:start="189:40" pos:end="189:54">(<argument pos:start="189:41" pos:end="189:44"><expr pos:start="189:41" pos:end="189:44"><name pos:start="189:41" pos:end="189:44">func</name></expr></argument>, <argument pos:start="189:47" pos:end="189:53"><expr pos:start="189:47" pos:end="189:53"><name pos:start="189:47" pos:end="189:53">req_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
