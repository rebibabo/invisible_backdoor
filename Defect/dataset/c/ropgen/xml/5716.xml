<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5716.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:33">read_sbr_data</name><parameter_list pos:start="1:34" pos:end="3:64">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:44">AACContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">ac</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:78"><decl pos:start="1:51" pos:end="1:78"><type pos:start="1:51" pos:end="1:78"><name pos:start="1:51" pos:end="1:73">SpectralBandReplication</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:78">sbr</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:51"><decl pos:start="3:35" pos:end="3:51"><type pos:start="3:35" pos:end="3:51"><name pos:start="3:35" pos:end="3:47">GetBitContext</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:51">gb</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:63"><decl pos:start="3:54" pos:end="3:63"><type pos:start="3:54" pos:end="3:63"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:63">id_aac</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:36">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:20">cnt</name> <init pos:start="7:22" pos:end="7:41">= <expr pos:start="7:24" pos:end="7:41"><call pos:start="7:24" pos:end="7:41"><name pos:start="7:24" pos:end="7:37">get_bits_count</name><argument_list pos:start="7:38" pos:end="7:41">(<argument pos:start="7:39" pos:end="7:40"><expr pos:start="7:39" pos:end="7:40"><name pos:start="7:39" pos:end="7:40">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="29:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:49">(<expr pos:start="11:9" pos:end="11:48"><name pos:start="11:9" pos:end="11:14">id_aac</name> <operator pos:start="11:16" pos:end="11:17">==</operator> <name pos:start="11:19" pos:end="11:26">TYPE_SCE</name> <operator pos:start="11:28" pos:end="11:29">||</operator> <name pos:start="11:31" pos:end="11:36">id_aac</name> <operator pos:start="11:38" pos:end="11:39">==</operator> <name pos:start="11:41" pos:end="11:48">TYPE_CCE</name></expr>)</condition> <block pos:start="11:51" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:53">

        <expr_stmt pos:start="13:9" pos:end="13:53"><expr pos:start="13:9" pos:end="13:52"><call pos:start="13:9" pos:end="13:52"><name pos:start="13:9" pos:end="13:39">read_sbr_single_channel_element</name><argument_list pos:start="13:40" pos:end="13:52">(<argument pos:start="13:41" pos:end="13:42"><expr pos:start="13:41" pos:end="13:42"><name pos:start="13:41" pos:end="13:42">ac</name></expr></argument>, <argument pos:start="13:45" pos:end="13:47"><expr pos:start="13:45" pos:end="13:47"><name pos:start="13:45" pos:end="13:47">sbr</name></expr></argument>, <argument pos:start="13:50" pos:end="13:51"><expr pos:start="13:50" pos:end="13:51"><name pos:start="13:50" pos:end="13:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="19:5">else if <condition pos:start="15:15" pos:end="15:34">(<expr pos:start="15:16" pos:end="15:33"><name pos:start="15:16" pos:end="15:21">id_aac</name> <operator pos:start="15:23" pos:end="15:24">==</operator> <name pos:start="15:26" pos:end="15:33">TYPE_CPE</name></expr>)</condition> <block pos:start="15:36" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:51">

        <expr_stmt pos:start="17:9" pos:end="17:51"><expr pos:start="17:9" pos:end="17:50"><call pos:start="17:9" pos:end="17:50"><name pos:start="17:9" pos:end="17:37">read_sbr_channel_pair_element</name><argument_list pos:start="17:38" pos:end="17:50">(<argument pos:start="17:39" pos:end="17:40"><expr pos:start="17:39" pos:end="17:40"><name pos:start="17:39" pos:end="17:40">ac</name></expr></argument>, <argument pos:start="17:43" pos:end="17:45"><expr pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">sbr</name></expr></argument>, <argument pos:start="17:48" pos:end="17:49"><expr pos:start="17:48" pos:end="17:49"><name pos:start="17:48" pos:end="17:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="29:5">else <block pos:start="19:12" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:40">

        <expr_stmt pos:start="21:9" pos:end="23:81"><expr pos:start="21:9" pos:end="23:80"><call pos:start="21:9" pos:end="23:80"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="23:80">(<argument pos:start="21:16" pos:end="21:29"><expr pos:start="21:16" pos:end="21:29"><name pos:start="21:16" pos:end="21:29"><name pos:start="21:16" pos:end="21:17">ac</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:29">avccontext</name></name></expr></argument>, <argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">AV_LOG_ERROR</name></expr></argument>,

            <argument pos:start="23:13" pos:end="23:71"><expr pos:start="23:13" pos:end="23:71"><literal type="string" pos:start="23:13" pos:end="23:71">"Invalid bitstream - cannot apply SBR to element type %d\n"</literal></expr></argument>, <argument pos:start="23:74" pos:end="23:79"><expr pos:start="23:74" pos:end="23:79"><name pos:start="23:74" pos:end="23:79">id_aac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:23"><expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:11">sbr</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:18">start</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:40">return <expr pos:start="27:16" pos:end="27:39"><call pos:start="27:16" pos:end="27:33"><name pos:start="27:16" pos:end="27:29">get_bits_count</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:35" pos:end="27:35">-</operator> <name pos:start="27:37" pos:end="27:39">cnt</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="31:5" pos:end="51:5"><if pos:start="31:5" pos:end="51:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><call pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:17">get_bits1</name><argument_list pos:start="31:18" pos:end="31:21">(<argument pos:start="31:19" pos:end="31:20"><expr pos:start="31:19" pos:end="31:20"><name pos:start="31:19" pos:end="31:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:24" pos:end="51:5">{<block_content pos:start="33:9" pos:end="49:9"> <comment type="line" pos:start="31:26" pos:end="31:44">// bs_extended_data</comment>

        <decl_stmt pos:start="33:9" pos:end="33:44"><decl pos:start="33:9" pos:end="33:43"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:25">num_bits_left</name> <init pos:start="33:27" pos:end="33:43">= <expr pos:start="33:29" pos:end="33:43"><call pos:start="33:29" pos:end="33:43"><name pos:start="33:29" pos:end="33:36">get_bits</name><argument_list pos:start="33:37" pos:end="33:43">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">gb</name></expr></argument>, <argument pos:start="33:42" pos:end="33:42"><expr pos:start="33:42" pos:end="33:42"><literal type="number" pos:start="33:42" pos:end="33:42">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="33:46" pos:end="33:65">// bs_extension_size</comment>

        <if_stmt pos:start="35:9" pos:end="37:45"><if pos:start="35:9" pos:end="37:45">if <condition pos:start="35:12" pos:end="35:32">(<expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:25">num_bits_left</name> <operator pos:start="35:27" pos:end="35:28">==</operator> <literal type="number" pos:start="35:30" pos:end="35:31">15</literal></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:45"><block_content pos:start="37:13" pos:end="37:45">

            <expr_stmt pos:start="37:13" pos:end="37:45"><expr pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:25">num_bits_left</name> <operator pos:start="37:27" pos:end="37:28">+=</operator> <call pos:start="37:30" pos:end="37:44"><name pos:start="37:30" pos:end="37:37">get_bits</name><argument_list pos:start="37:38" pos:end="37:44">(<argument pos:start="37:39" pos:end="37:40"><expr pos:start="37:39" pos:end="37:40"><name pos:start="37:39" pos:end="37:40">gb</name></expr></argument>, <argument pos:start="37:43" pos:end="37:43"><expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="37:47" pos:end="37:61">// bs_esc_count</comment>



        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:21">num_bits_left</name> <operator pos:start="41:23" pos:end="41:25">&lt;&lt;=</operator> <literal type="number" pos:start="41:27" pos:end="41:27">3</literal></expr>;</expr_stmt>

        <while pos:start="43:9" pos:end="49:9">while <condition pos:start="43:15" pos:end="43:33">(<expr pos:start="43:16" pos:end="43:32"><name pos:start="43:16" pos:end="43:28">num_bits_left</name> <operator pos:start="43:30" pos:end="43:30">&gt;</operator> <literal type="number" pos:start="43:32" pos:end="43:32">7</literal></expr>)</condition> <block pos:start="43:35" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:77">

            <expr_stmt pos:start="45:13" pos:end="45:31"><expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:25">num_bits_left</name> <operator pos:start="45:27" pos:end="45:28">-=</operator> <literal type="number" pos:start="45:30" pos:end="45:30">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:77"><expr pos:start="47:13" pos:end="47:76"><call pos:start="47:13" pos:end="47:76"><name pos:start="47:13" pos:end="47:30">read_sbr_extension</name><argument_list pos:start="47:31" pos:end="47:76">(<argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><name pos:start="47:32" pos:end="47:33">ac</name></expr></argument>, <argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">sbr</name></expr></argument>, <argument pos:start="47:41" pos:end="47:42"><expr pos:start="47:41" pos:end="47:42"><name pos:start="47:41" pos:end="47:42">gb</name></expr></argument>, <argument pos:start="47:45" pos:end="47:59"><expr pos:start="47:45" pos:end="47:59"><call pos:start="47:45" pos:end="47:59"><name pos:start="47:45" pos:end="47:52">get_bits</name><argument_list pos:start="47:53" pos:end="47:59">(<argument pos:start="47:54" pos:end="47:55"><expr pos:start="47:54" pos:end="47:55"><name pos:start="47:54" pos:end="47:55">gb</name></expr></argument>, <argument pos:start="47:58" pos:end="47:58"><expr pos:start="47:58" pos:end="47:58"><literal type="number" pos:start="47:58" pos:end="47:58">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:62" pos:end="47:75"><expr pos:start="47:62" pos:end="47:75"><operator pos:start="47:62" pos:end="47:62">&amp;</operator><name pos:start="47:63" pos:end="47:75">num_bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="47:79" pos:end="47:96">// bs_extension_id</comment>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:36">return <expr pos:start="55:12" pos:end="55:35"><call pos:start="55:12" pos:end="55:29"><name pos:start="55:12" pos:end="55:25">get_bits_count</name><argument_list pos:start="55:26" pos:end="55:29">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="55:31" pos:end="55:31">-</operator> <name pos:start="55:33" pos:end="55:35">cnt</name></expr>;</return>

</block_content>}</block></function>
</unit>
