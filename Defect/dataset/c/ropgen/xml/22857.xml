<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22857.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">load_bitmap_data</name><parameter_list pos:start="1:28" pos:end="7:52">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:56"><decl pos:start="3:29" pos:end="3:56"><type pos:start="3:29" pos:end="3:56"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:42">uint64_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:56">bitmap_table</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:54"><decl pos:start="5:29" pos:end="5:54"><type pos:start="5:29" pos:end="5:54"><name pos:start="5:29" pos:end="5:36">uint32_t</name></type> <name pos:start="5:38" pos:end="5:54">bitmap_table_size</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:51"><decl pos:start="7:29" pos:end="7:51"><type pos:start="7:29" pos:end="7:51"><name pos:start="7:29" pos:end="7:43">BdrvDirtyBitmap</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:51">bitmap</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:15">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">BDRVQcow2State</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:34">= <expr pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:26">bs</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:19">sector</name></decl>, <decl pos:start="15:22" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:22" pos:end="15:24">sbc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:54"><decl pos:start="17:5" pos:end="17:53"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">bm_size</name> <init pos:start="17:22" pos:end="17:53">= <expr pos:start="17:24" pos:end="17:53"><call pos:start="17:24" pos:end="17:53"><name pos:start="17:24" pos:end="17:45">bdrv_dirty_bitmap_size</name><argument_list pos:start="17:46" pos:end="17:53">(<argument pos:start="17:47" pos:end="17:52"><expr pos:start="17:47" pos:end="17:52"><name pos:start="17:47" pos:end="17:52">bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:66"><decl pos:start="19:5" pos:end="19:65"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:23">bm_sectors</name> <init pos:start="19:25" pos:end="19:65">= <expr pos:start="19:27" pos:end="19:65"><call pos:start="19:27" pos:end="19:65"><name pos:start="19:27" pos:end="19:38">DIV_ROUND_UP</name><argument_list pos:start="19:39" pos:end="19:65">(<argument pos:start="19:40" pos:end="19:46"><expr pos:start="19:40" pos:end="19:46"><name pos:start="19:40" pos:end="19:46">bm_size</name></expr></argument>, <argument pos:start="19:49" pos:end="19:64"><expr pos:start="19:49" pos:end="19:64"><name pos:start="19:49" pos:end="19:64">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:16">buf</name> <init pos:start="21:18" pos:end="21:23">= <expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="27:77"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint64_t</name></type> <name pos:start="23:14" pos:end="23:14">i</name></decl>, <decl pos:start="23:17" pos:end="27:76"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:17" pos:end="23:24">tab_size</name> <init pos:start="23:26" pos:end="27:76">=

            <expr pos:start="25:13" pos:end="27:76"><call pos:start="25:13" pos:end="27:76"><name pos:start="25:13" pos:end="25:28">size_to_clusters</name><argument_list pos:start="25:29" pos:end="27:76">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">s</name></expr></argument>,

                <argument pos:start="27:17" pos:end="27:75"><expr pos:start="27:17" pos:end="27:75"><call pos:start="27:17" pos:end="27:75"><name pos:start="27:17" pos:end="27:52">bdrv_dirty_bitmap_serialization_size</name><argument_list pos:start="27:53" pos:end="27:75">(<argument pos:start="27:54" pos:end="27:59"><expr pos:start="27:54" pos:end="27:59"><name pos:start="27:54" pos:end="27:59">bitmap</name></expr></argument>, <argument pos:start="27:62" pos:end="27:62"><expr pos:start="27:62" pos:end="27:62"><literal type="number" pos:start="27:62" pos:end="27:62">0</literal></expr></argument>, <argument pos:start="27:65" pos:end="27:74"><expr pos:start="27:65" pos:end="27:74"><name pos:start="27:65" pos:end="27:74">bm_sectors</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:71">(<expr pos:start="31:9" pos:end="31:70"><name pos:start="31:9" pos:end="31:16">tab_size</name> <operator pos:start="31:18" pos:end="31:19">!=</operator> <name pos:start="31:21" pos:end="31:37">bitmap_table_size</name> <operator pos:start="31:39" pos:end="31:40">||</operator> <name pos:start="31:42" pos:end="31:49">tab_size</name> <operator pos:start="31:51" pos:end="31:51">&gt;</operator> <name pos:start="31:53" pos:end="31:70">BME_MAX_TABLE_SIZE</name></expr>)</condition> <block pos:start="31:73" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:23">

        <return pos:start="33:9" pos:end="33:23">return <expr pos:start="33:16" pos:end="33:22"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:36"><expr pos:start="39:5" pos:end="39:35"><name pos:start="39:5" pos:end="39:7">buf</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:35"><name pos:start="39:11" pos:end="39:18">g_malloc</name><argument_list pos:start="39:19" pos:end="39:35">(<argument pos:start="39:20" pos:end="39:34"><expr pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:34">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:7">sbc</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:54"><name pos:start="41:11" pos:end="41:43">sectors_covered_by_bitmap_cluster</name><argument_list pos:start="41:44" pos:end="41:54">(<argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><name pos:start="41:45" pos:end="41:45">s</name></expr></argument>, <argument pos:start="41:48" pos:end="41:53"><expr pos:start="41:48" pos:end="41:53"><name pos:start="41:48" pos:end="41:53">bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="89:5">for <control pos:start="43:9" pos:end="43:61">(<init pos:start="43:10" pos:end="43:27"><expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:10">i</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr><operator pos:start="43:15" pos:end="43:15">,</operator> <expr pos:start="43:17" pos:end="43:26"><name pos:start="43:17" pos:end="43:22">sector</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr>;</init> <condition pos:start="43:29" pos:end="43:41"><expr pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:29">i</name> <operator pos:start="43:31" pos:end="43:31">&lt;</operator> <name pos:start="43:33" pos:end="43:40">tab_size</name></expr>;</condition> <incr pos:start="43:43" pos:end="43:60"><expr pos:start="43:43" pos:end="43:45"><operator pos:start="43:43" pos:end="43:44">++</operator><name pos:start="43:45" pos:end="43:45">i</name></expr><operator pos:start="43:46" pos:end="43:46">,</operator> <expr pos:start="43:48" pos:end="43:60"><name pos:start="43:48" pos:end="43:53">sector</name> <operator pos:start="43:55" pos:end="43:56">+=</operator> <name pos:start="43:58" pos:end="43:60">sbc</name></expr></incr>)</control> <block pos:start="43:63" pos:end="89:5">{<block_content pos:start="45:9" pos:end="87:9">

        <decl_stmt pos:start="45:9" pos:end="45:55"><decl pos:start="45:9" pos:end="45:54"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint64_t</name></type> <name pos:start="45:18" pos:end="45:22">count</name> <init pos:start="45:24" pos:end="45:54">= <expr pos:start="45:26" pos:end="45:54"><call pos:start="45:26" pos:end="45:54"><name pos:start="45:26" pos:end="45:28">MIN</name><argument_list pos:start="45:29" pos:end="45:54">(<argument pos:start="45:30" pos:end="45:48"><expr pos:start="45:30" pos:end="45:48"><name pos:start="45:30" pos:end="45:39">bm_sectors</name> <operator pos:start="45:41" pos:end="45:41">-</operator> <name pos:start="45:43" pos:end="45:48">sector</name></expr></argument>, <argument pos:start="45:51" pos:end="45:53"><expr pos:start="45:51" pos:end="45:53"><name pos:start="45:51" pos:end="45:53">sbc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:41"><decl pos:start="47:9" pos:end="47:40"><type pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:16">uint64_t</name></type> <name pos:start="47:18" pos:end="47:22">entry</name> <init pos:start="47:24" pos:end="47:40">= <expr pos:start="47:26" pos:end="47:40"><name pos:start="47:26" pos:end="47:40"><name pos:start="47:26" pos:end="47:37">bitmap_table</name><index pos:start="47:38" pos:end="47:40">[<expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:62"><decl pos:start="49:9" pos:end="49:61"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint64_t</name></type> <name pos:start="49:18" pos:end="49:23">offset</name> <init pos:start="49:25" pos:end="49:61">= <expr pos:start="49:27" pos:end="49:61"><name pos:start="49:27" pos:end="49:31">entry</name> <operator pos:start="49:33" pos:end="49:33">&amp;</operator> <name pos:start="49:35" pos:end="49:61">BME_TABLE_ENTRY_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:63"><expr pos:start="53:9" pos:end="53:62"><call pos:start="53:9" pos:end="53:62"><name pos:start="53:9" pos:end="53:14">assert</name><argument_list pos:start="53:15" pos:end="53:62">(<argument pos:start="53:16" pos:end="53:61"><expr pos:start="53:16" pos:end="53:61"><call pos:start="53:16" pos:end="53:56"><name pos:start="53:16" pos:end="53:32">check_table_entry</name><argument_list pos:start="53:33" pos:end="53:56">(<argument pos:start="53:34" pos:end="53:38"><expr pos:start="53:34" pos:end="53:38"><name pos:start="53:34" pos:end="53:38">entry</name></expr></argument>, <argument pos:start="53:41" pos:end="53:55"><expr pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:55"><name pos:start="53:41" pos:end="53:41">s</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:55">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="53:58" pos:end="53:59">==</operator> <literal type="number" pos:start="53:61" pos:end="53:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="87:9"><if pos:start="57:9" pos:end="73:9">if <condition pos:start="57:12" pos:end="57:24">(<expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:18">offset</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>)</condition> <block pos:start="57:26" pos:end="73:9">{<block_content pos:start="59:13" pos:end="71:13">

            <if_stmt pos:start="59:13" pos:end="71:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:54">(<expr pos:start="59:17" pos:end="59:53"><name pos:start="59:17" pos:end="59:21">entry</name> <operator pos:start="59:23" pos:end="59:23">&amp;</operator> <name pos:start="59:25" pos:end="59:53">BME_TABLE_ENTRY_FLAG_ALL_ONES</name></expr>)</condition> <block pos:start="59:56" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:58">

                <expr_stmt pos:start="61:17" pos:end="63:58"><expr pos:start="61:17" pos:end="63:57"><call pos:start="61:17" pos:end="63:57"><name pos:start="61:17" pos:end="61:50">bdrv_dirty_bitmap_deserialize_ones</name><argument_list pos:start="61:51" pos:end="63:57">(<argument pos:start="61:52" pos:end="61:57"><expr pos:start="61:52" pos:end="61:57"><name pos:start="61:52" pos:end="61:57">bitmap</name></expr></argument>, <argument pos:start="61:60" pos:end="61:65"><expr pos:start="61:60" pos:end="61:65"><name pos:start="61:60" pos:end="61:65">sector</name></expr></argument>, <argument pos:start="61:68" pos:end="61:72"><expr pos:start="61:68" pos:end="61:72"><name pos:start="61:68" pos:end="61:72">count</name></expr></argument>,

                                                   <argument pos:start="63:52" pos:end="63:56"><expr pos:start="63:52" pos:end="63:56"><name pos:start="63:52" pos:end="63:56">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="71:13">else <block pos:start="65:20" pos:end="71:13">{<block_content>

                <comment type="block" pos:start="67:17" pos:end="69:37">/* No need to deserialize zeros because the dirty bitmap is

                 * already cleared */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="87:9">else <block pos:start="73:16" pos:end="87:9">{<block_content pos:start="75:13" pos:end="85:54">

            <expr_stmt pos:start="75:13" pos:end="75:69"><expr pos:start="75:13" pos:end="75:68"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:68"><name pos:start="75:19" pos:end="75:28">bdrv_pread</name><argument_list pos:start="75:29" pos:end="75:68">(<argument pos:start="75:30" pos:end="75:37"><expr pos:start="75:30" pos:end="75:37"><name pos:start="75:30" pos:end="75:37"><name pos:start="75:30" pos:end="75:31">bs</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:37">file</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:45"><expr pos:start="75:40" pos:end="75:45"><name pos:start="75:40" pos:end="75:45">offset</name></expr></argument>, <argument pos:start="75:48" pos:end="75:50"><expr pos:start="75:48" pos:end="75:50"><name pos:start="75:48" pos:end="75:50">buf</name></expr></argument>, <argument pos:start="75:53" pos:end="75:67"><expr pos:start="75:53" pos:end="75:67"><name pos:start="75:53" pos:end="75:67"><name pos:start="75:53" pos:end="75:53">s</name><operator pos:start="75:54" pos:end="75:55">-&gt;</operator><name pos:start="75:56" pos:end="75:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="81:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:24">(<expr pos:start="77:17" pos:end="77:23"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">&lt;</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>)</condition> <block pos:start="77:26" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:28">

                <goto pos:start="79:17" pos:end="79:28">goto <name pos:start="79:22" pos:end="79:27">finish</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="85:54"><expr pos:start="83:13" pos:end="85:53"><call pos:start="83:13" pos:end="85:53"><name pos:start="83:13" pos:end="83:46">bdrv_dirty_bitmap_deserialize_part</name><argument_list pos:start="83:47" pos:end="85:53">(<argument pos:start="83:48" pos:end="83:53"><expr pos:start="83:48" pos:end="83:53"><name pos:start="83:48" pos:end="83:53">bitmap</name></expr></argument>, <argument pos:start="83:56" pos:end="83:58"><expr pos:start="83:56" pos:end="83:58"><name pos:start="83:56" pos:end="83:58">buf</name></expr></argument>, <argument pos:start="83:61" pos:end="83:66"><expr pos:start="83:61" pos:end="83:66"><name pos:start="83:61" pos:end="83:66">sector</name></expr></argument>, <argument pos:start="83:69" pos:end="83:73"><expr pos:start="83:69" pos:end="83:73"><name pos:start="83:69" pos:end="83:73">count</name></expr></argument>,

                                               <argument pos:start="85:48" pos:end="85:52"><expr pos:start="85:48" pos:end="85:52"><name pos:start="85:48" pos:end="85:52">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="91:5" pos:end="91:12"><expr pos:start="91:5" pos:end="91:11"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <literal type="number" pos:start="91:11" pos:end="91:11">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:49"><expr pos:start="95:5" pos:end="95:48"><call pos:start="95:5" pos:end="95:48"><name pos:start="95:5" pos:end="95:40">bdrv_dirty_bitmap_deserialize_finish</name><argument_list pos:start="95:41" pos:end="95:48">(<argument pos:start="95:42" pos:end="95:47"><expr pos:start="95:42" pos:end="95:47"><name pos:start="95:42" pos:end="95:47">bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="99:1" pos:end="99:7"><name pos:start="99:1" pos:end="99:6">finish</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:16"><expr pos:start="101:5" pos:end="101:15"><call pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:10">g_free</name><argument_list pos:start="101:11" pos:end="101:15">(<argument pos:start="101:12" pos:end="101:14"><expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:15">return <expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
