<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19588.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">scsi_write_data</name><parameter_list pos:start="1:28" pos:end="1:45">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">SCSIRequest</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:5">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:53">= <expr pos:start="5:22" pos:end="5:53"><call pos:start="5:22" pos:end="5:53"><name pos:start="5:22" pos:end="5:30">DO_UPCAST</name><argument_list pos:start="5:31" pos:end="5:53">(<argument pos:start="5:32" pos:end="5:42"><expr pos:start="5:32" pos:end="5:42"><name pos:start="5:32" pos:end="5:42">SCSIDiskReq</name></expr></argument>, <argument pos:start="5:45" pos:end="5:47"><expr pos:start="5:45" pos:end="5:47"><name pos:start="5:45" pos:end="5:47">req</name></expr></argument>, <argument pos:start="5:50" pos:end="5:52"><expr pos:start="5:50" pos:end="5:52"><name pos:start="5:50" pos:end="5:52">req</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:71"><decl pos:start="9:5" pos:end="9:70"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">SCSIDiskClass</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">sdc</name> <init pos:start="9:24" pos:end="9:70">= <expr pos:start="9:26" pos:end="9:70"><operator pos:start="9:26" pos:end="9:26">(</operator><name pos:start="9:27" pos:end="9:39">SCSIDiskClass</name> <operator pos:start="9:41" pos:end="9:41">*</operator><operator pos:start="9:42" pos:end="9:42">)</operator> <call pos:start="9:44" pos:end="9:70"><name pos:start="9:44" pos:end="9:59">object_get_class</name><argument_list pos:start="9:60" pos:end="9:70">(<argument pos:start="9:61" pos:end="9:69"><expr pos:start="9:61" pos:end="9:69"><call pos:start="9:61" pos:end="9:69"><name pos:start="9:61" pos:end="9:66">OBJECT</name><argument_list pos:start="9:67" pos:end="9:69">(<argument pos:start="9:68" pos:end="9:68"><expr pos:start="9:68" pos:end="9:68"><name pos:start="9:68" pos:end="9:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:53">/* No data transfer may already be in progress */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><call pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:32">(<argument pos:start="15:12" pos:end="15:31"><expr pos:start="15:12" pos:end="15:31"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:12">r</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:17">req</name><operator pos:start="15:18" pos:end="15:18">.</operator><name pos:start="15:19" pos:end="15:23">aiocb</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <name pos:start="15:28" pos:end="15:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:69">/* The request is used as the AIO opaque value, so add a ref.  */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:16">scsi_req_ref</name><argument_list pos:start="21:17" pos:end="21:25">(<argument pos:start="21:18" pos:end="21:24"><expr pos:start="21:18" pos:end="21:24"><operator pos:start="21:18" pos:end="21:18">&amp;</operator><name pos:start="21:19" pos:end="21:24"><name pos:start="21:19" pos:end="21:19">r</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:24">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="31:5"><if pos:start="23:5" pos:end="31:5">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:9">r</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:14">req</name><operator pos:start="23:15" pos:end="23:15">.</operator><name pos:start="23:16" pos:end="23:18">cmd</name><operator pos:start="23:19" pos:end="23:19">.</operator><name pos:start="23:20" pos:end="23:23">mode</name></name> <operator pos:start="23:25" pos:end="23:26">!=</operator> <name pos:start="23:28" pos:end="23:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="23:46" pos:end="31:5">{<block_content pos:start="25:9" pos:end="29:15">

        <expr_stmt pos:start="25:9" pos:end="25:53"><expr pos:start="25:9" pos:end="25:52"><call pos:start="25:9" pos:end="25:52"><name pos:start="25:9" pos:end="25:15">DPRINTF</name><argument_list pos:start="25:16" pos:end="25:52">(<argument pos:start="25:17" pos:end="25:51"><expr pos:start="25:17" pos:end="25:51"><literal type="string" pos:start="25:17" pos:end="25:51">"Data transfer direction invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><call pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:32">scsi_write_complete_noio</name><argument_list pos:start="27:33" pos:end="27:44">(<argument pos:start="27:34" pos:end="27:34"><expr pos:start="27:34" pos:end="27:34"><name pos:start="27:34" pos:end="27:34">r</name></expr></argument>, <argument pos:start="27:37" pos:end="27:43"><expr pos:start="27:37" pos:end="27:43"><operator pos:start="27:37" pos:end="27:37">-</operator><name pos:start="27:38" pos:end="27:43">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:36">(<expr pos:start="35:9" pos:end="35:35"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18"><name pos:start="35:10" pos:end="35:10">r</name><operator pos:start="35:11" pos:end="35:12">-&gt;</operator><name pos:start="35:13" pos:end="35:15">req</name><operator pos:start="35:16" pos:end="35:16">.</operator><name pos:start="35:17" pos:end="35:18">sg</name></name> <operator pos:start="35:20" pos:end="35:21">&amp;&amp;</operator> <operator pos:start="35:23" pos:end="35:23">!</operator><name pos:start="35:24" pos:end="35:35"><name pos:start="35:24" pos:end="35:24">r</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:30">qiov</name><operator pos:start="35:31" pos:end="35:31">.</operator><name pos:start="35:32" pos:end="35:35">size</name></name></expr>)</condition> <block pos:start="35:38" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <comment type="block" pos:start="37:9" pos:end="37:79">/* Called for the first time.  Ask the driver to send us more data.  */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">r</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">started</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:25">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><call pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:32">scsi_write_complete_noio</name><argument_list pos:start="41:33" pos:end="41:38">(<argument pos:start="41:34" pos:end="41:34"><expr pos:start="41:34" pos:end="41:34"><name pos:start="41:34" pos:end="41:34">r</name></expr></argument>, <argument pos:start="41:37" pos:end="41:37"><expr pos:start="41:37" pos:end="41:37"><literal type="number" pos:start="41:37" pos:end="41:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:20">tray_open</name></name></expr>)</condition> <block pos:start="47:23" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:15">

        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:32">scsi_write_complete_noio</name><argument_list pos:start="49:33" pos:end="49:47">(<argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><name pos:start="49:34" pos:end="49:34">r</name></expr></argument>, <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><operator pos:start="49:37" pos:end="49:37">-</operator><name pos:start="49:38" pos:end="49:46">ENOMEDIUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="73:5"><if pos:start="57:5" pos:end="73:5">if <condition pos:start="57:8" pos:end="59:39">(<expr pos:start="57:9" pos:end="59:38"><name pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:9">r</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:14">req</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:18">cmd</name><operator pos:start="57:19" pos:end="57:19">.</operator><name pos:start="57:20" pos:end="57:22">buf</name><index pos:start="57:23" pos:end="57:25">[<expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>]</index></name> <operator pos:start="57:27" pos:end="57:28">==</operator> <name pos:start="57:30" pos:end="57:38">VERIFY_10</name> <operator pos:start="57:40" pos:end="57:41">||</operator> <name pos:start="57:43" pos:end="57:59"><name pos:start="57:43" pos:end="57:43">r</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:48">req</name><operator pos:start="57:49" pos:end="57:49">.</operator><name pos:start="57:50" pos:end="57:52">cmd</name><operator pos:start="57:53" pos:end="57:53">.</operator><name pos:start="57:54" pos:end="57:56">buf</name><index pos:start="57:57" pos:end="57:59">[<expr pos:start="57:58" pos:end="57:58"><literal type="number" pos:start="57:58" pos:end="57:58">0</literal></expr>]</index></name> <operator pos:start="57:61" pos:end="57:62">==</operator> <name pos:start="57:64" pos:end="57:72">VERIFY_12</name> <operator pos:start="57:74" pos:end="57:75">||</operator>

        <name pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:9">r</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:14">req</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:18">cmd</name><operator pos:start="59:19" pos:end="59:19">.</operator><name pos:start="59:20" pos:end="59:22">buf</name><index pos:start="59:23" pos:end="59:25">[<expr pos:start="59:24" pos:end="59:24"><literal type="number" pos:start="59:24" pos:end="59:24">0</literal></expr>]</index></name> <operator pos:start="59:27" pos:end="59:28">==</operator> <name pos:start="59:30" pos:end="59:38">VERIFY_16</name></expr>)</condition> <block pos:start="59:41" pos:end="73:5">{<block_content pos:start="61:9" pos:end="71:15">

        <if_stmt pos:start="61:9" pos:end="69:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:13">r</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:18">req</name><operator pos:start="61:19" pos:end="61:19">.</operator><name pos:start="61:20" pos:end="61:21">sg</name></name></expr>)</condition> <block pos:start="61:24" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:41">

            <expr_stmt pos:start="63:13" pos:end="63:41"><expr pos:start="63:13" pos:end="63:40"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:34">scsi_dma_complete_noio</name><argument_list pos:start="63:35" pos:end="63:40">(<argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><name pos:start="63:36" pos:end="63:36">r</name></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:43">

            <expr_stmt pos:start="67:13" pos:end="67:43"><expr pos:start="67:13" pos:end="67:42"><call pos:start="67:13" pos:end="67:42"><name pos:start="67:13" pos:end="67:36">scsi_write_complete_noio</name><argument_list pos:start="67:37" pos:end="67:42">(<argument pos:start="67:38" pos:end="67:38"><expr pos:start="67:38" pos:end="67:38"><name pos:start="67:38" pos:end="67:38">r</name></expr></argument>, <argument pos:start="67:41" pos:end="67:41"><expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="101:5"><if pos:start="77:5" pos:end="91:5">if <condition pos:start="77:8" pos:end="77:18">(<expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:9">r</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">req</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:17">sg</name></name></expr>)</condition> <block pos:start="77:20" pos:end="91:5">{<block_content pos:start="79:9" pos:end="89:59">

        <expr_stmt pos:start="79:9" pos:end="79:80"><expr pos:start="79:9" pos:end="79:79"><call pos:start="79:9" pos:end="79:79"><name pos:start="79:9" pos:end="79:22">dma_acct_start</name><argument_list pos:start="79:23" pos:end="79:79">(<argument pos:start="79:24" pos:end="79:39"><expr pos:start="79:24" pos:end="79:39"><name pos:start="79:24" pos:end="79:39"><name pos:start="79:24" pos:end="79:24">s</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:30">qdev</name><operator pos:start="79:31" pos:end="79:31">.</operator><name pos:start="79:32" pos:end="79:35">conf</name><operator pos:start="79:36" pos:end="79:36">.</operator><name pos:start="79:37" pos:end="79:39">blk</name></name></expr></argument>, <argument pos:start="79:42" pos:end="79:49"><expr pos:start="79:42" pos:end="79:49"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:49"><name pos:start="79:43" pos:end="79:43">r</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:49">acct</name></name></expr></argument>, <argument pos:start="79:52" pos:end="79:60"><expr pos:start="79:52" pos:end="79:60"><name pos:start="79:52" pos:end="79:60"><name pos:start="79:52" pos:end="79:52">r</name><operator pos:start="79:53" pos:end="79:54">-&gt;</operator><name pos:start="79:55" pos:end="79:57">req</name><operator pos:start="79:58" pos:end="79:58">.</operator><name pos:start="79:59" pos:end="79:60">sg</name></name></expr></argument>, <argument pos:start="79:63" pos:end="79:78"><expr pos:start="79:63" pos:end="79:78"><name pos:start="79:63" pos:end="79:78">BLOCK_ACCT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:9">r</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:14">req</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:20">resid</name></name> <operator pos:start="81:22" pos:end="81:23">-=</operator> <name pos:start="81:25" pos:end="81:39"><name pos:start="81:25" pos:end="81:25">r</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:30">req</name><operator pos:start="81:31" pos:end="81:31">.</operator><name pos:start="81:32" pos:end="81:33">sg</name><operator pos:start="81:34" pos:end="81:35">-&gt;</operator><name pos:start="81:36" pos:end="81:39">size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="89:59"><expr pos:start="83:9" pos:end="89:58"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:9">r</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:14">req</name><operator pos:start="83:15" pos:end="83:15">.</operator><name pos:start="83:16" pos:end="83:20">aiocb</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="89:58"><name pos:start="83:24" pos:end="83:33">dma_blk_io</name><argument_list pos:start="83:34" pos:end="89:58">(<argument pos:start="83:35" pos:end="83:71"><expr pos:start="83:35" pos:end="83:71"><call pos:start="83:35" pos:end="83:71"><name pos:start="83:35" pos:end="83:53">blk_get_aio_context</name><argument_list pos:start="83:54" pos:end="83:71">(<argument pos:start="83:55" pos:end="83:70"><expr pos:start="83:55" pos:end="83:70"><name pos:start="83:55" pos:end="83:70"><name pos:start="83:55" pos:end="83:55">s</name><operator pos:start="83:56" pos:end="83:57">-&gt;</operator><name pos:start="83:58" pos:end="83:61">qdev</name><operator pos:start="83:62" pos:end="83:62">.</operator><name pos:start="83:63" pos:end="83:66">conf</name><operator pos:start="83:67" pos:end="83:67">.</operator><name pos:start="83:68" pos:end="83:70">blk</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="85:35" pos:end="85:43"><expr pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:35">r</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:40">req</name><operator pos:start="85:41" pos:end="85:41">.</operator><name pos:start="85:42" pos:end="85:43">sg</name></name></expr></argument>, <argument pos:start="85:46" pos:end="85:74"><expr pos:start="85:46" pos:end="85:74"><name pos:start="85:46" pos:end="85:54"><name pos:start="85:46" pos:end="85:46">r</name><operator pos:start="85:47" pos:end="85:48">-&gt;</operator><name pos:start="85:49" pos:end="85:54">sector</name></name> <operator pos:start="85:56" pos:end="85:57">&lt;&lt;</operator> <name pos:start="85:59" pos:end="85:74">BDRV_SECTOR_BITS</name></expr></argument>,

                                  <argument pos:start="87:35" pos:end="87:49"><expr pos:start="87:35" pos:end="87:49"><name pos:start="87:35" pos:end="87:49"><name pos:start="87:35" pos:end="87:37">sdc</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:49">dma_writev</name></name></expr></argument>, <argument pos:start="87:52" pos:end="87:52"><expr pos:start="87:52" pos:end="87:52"><name pos:start="87:52" pos:end="87:52">r</name></expr></argument>, <argument pos:start="87:55" pos:end="87:71"><expr pos:start="87:55" pos:end="87:71"><name pos:start="87:55" pos:end="87:71">scsi_dma_complete</name></expr></argument>, <argument pos:start="87:74" pos:end="87:74"><expr pos:start="87:74" pos:end="87:74"><name pos:start="87:74" pos:end="87:74">r</name></expr></argument>,

                                  <argument pos:start="89:35" pos:end="89:57"><expr pos:start="89:35" pos:end="89:57"><name pos:start="89:35" pos:end="89:57">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="101:5">else <block pos:start="91:12" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:66">

        <expr_stmt pos:start="93:9" pos:end="95:57"><expr pos:start="93:9" pos:end="95:56"><call pos:start="93:9" pos:end="95:56"><name pos:start="93:9" pos:end="93:24">block_acct_start</name><argument_list pos:start="93:25" pos:end="95:56">(<argument pos:start="93:26" pos:end="93:56"><expr pos:start="93:26" pos:end="93:56"><call pos:start="93:26" pos:end="93:56"><name pos:start="93:26" pos:end="93:38">blk_get_stats</name><argument_list pos:start="93:39" pos:end="93:56">(<argument pos:start="93:40" pos:end="93:55"><expr pos:start="93:40" pos:end="93:55"><name pos:start="93:40" pos:end="93:55"><name pos:start="93:40" pos:end="93:40">s</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:46">qdev</name><operator pos:start="93:47" pos:end="93:47">.</operator><name pos:start="93:48" pos:end="93:51">conf</name><operator pos:start="93:52" pos:end="93:52">.</operator><name pos:start="93:53" pos:end="93:55">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:59" pos:end="93:66"><expr pos:start="93:59" pos:end="93:66"><operator pos:start="93:59" pos:end="93:59">&amp;</operator><name pos:start="93:60" pos:end="93:66"><name pos:start="93:60" pos:end="93:60">r</name><operator pos:start="93:61" pos:end="93:62">-&gt;</operator><name pos:start="93:63" pos:end="93:66">acct</name></name></expr></argument>,

                         <argument pos:start="95:26" pos:end="95:37"><expr pos:start="95:26" pos:end="95:37"><name pos:start="95:26" pos:end="95:37"><name pos:start="95:26" pos:end="95:26">r</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:32">qiov</name><operator pos:start="95:33" pos:end="95:33">.</operator><name pos:start="95:34" pos:end="95:37">size</name></name></expr></argument>, <argument pos:start="95:40" pos:end="95:55"><expr pos:start="95:40" pos:end="95:55"><name pos:start="95:40" pos:end="95:55">BLOCK_ACCT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="99:66"><expr pos:start="97:9" pos:end="99:65"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:9">r</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:14">req</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:20">aiocb</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="99:65"><name pos:start="97:24" pos:end="97:38"><name pos:start="97:24" pos:end="97:26">sdc</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:38">dma_writev</name></name><argument_list pos:start="97:39" pos:end="99:65">(<argument pos:start="97:40" pos:end="97:68"><expr pos:start="97:40" pos:end="97:68"><name pos:start="97:40" pos:end="97:48"><name pos:start="97:40" pos:end="97:40">r</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:48">sector</name></name> <operator pos:start="97:50" pos:end="97:51">&lt;&lt;</operator> <name pos:start="97:53" pos:end="97:68">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="97:71" pos:end="97:78"><expr pos:start="97:71" pos:end="97:78"><operator pos:start="97:71" pos:end="97:71">&amp;</operator><name pos:start="97:72" pos:end="97:78"><name pos:start="97:72" pos:end="97:72">r</name><operator pos:start="97:73" pos:end="97:74">-&gt;</operator><name pos:start="97:75" pos:end="97:78">qiov</name></name></expr></argument>,

                                       <argument pos:start="99:40" pos:end="99:58"><expr pos:start="99:40" pos:end="99:58"><name pos:start="99:40" pos:end="99:58">scsi_write_complete</name></expr></argument>, <argument pos:start="99:61" pos:end="99:61"><expr pos:start="99:61" pos:end="99:61"><name pos:start="99:61" pos:end="99:61">r</name></expr></argument>, <argument pos:start="99:64" pos:end="99:64"><expr pos:start="99:64" pos:end="99:64"><name pos:start="99:64" pos:end="99:64">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
