<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11827.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ff_listen_connect</name><parameter_list pos:start="1:22" pos:end="5:40">(<parameter pos:start="1:23" pos:end="1:28"><decl pos:start="1:23" pos:end="1:28"><type pos:start="1:23" pos:end="1:28"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:28">fd</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:57"><decl pos:start="1:31" pos:end="1:57"><type pos:start="1:31" pos:end="1:57"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:42">struct</name> <name pos:start="1:44" pos:end="1:51">sockaddr</name></name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">addr</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:39"><decl pos:start="3:23" pos:end="3:39"><type pos:start="3:23" pos:end="3:39"><name pos:start="3:23" pos:end="3:31">socklen_t</name></type> <name pos:start="3:33" pos:end="3:39">addrlen</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:52"><decl pos:start="3:42" pos:end="3:52"><type pos:start="3:42" pos:end="3:52"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:52">timeout</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:67"><decl pos:start="3:55" pos:end="3:67"><type pos:start="3:55" pos:end="3:67"><name pos:start="3:55" pos:end="3:64">URLContext</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:67">h</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:39"><decl pos:start="5:23" pos:end="5:39"><type pos:start="5:23" pos:end="5:39"><name pos:start="5:23" pos:end="5:25">int</name></type> <name pos:start="5:27" pos:end="5:39">will_try_next</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="85:1">{<block_content pos:start="9:5" pos:end="83:15">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:17">pollfd</name></name></type> <name pos:start="9:19" pos:end="9:19">p</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><block pos:start="9:23" pos:end="9:38">{<expr pos:start="9:24" pos:end="9:25"><name pos:start="9:24" pos:end="9:25">fd</name></expr>, <expr pos:start="9:28" pos:end="9:34"><name pos:start="9:28" pos:end="9:34">POLLOUT</name></expr>, <expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">socklen_t</name></type> <name pos:start="13:15" pos:end="13:20">optlen</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><call pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:22">ff_socket_nonblock</name><argument_list pos:start="17:23" pos:end="17:29">(<argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><name pos:start="17:24" pos:end="17:25">fd</name></expr></argument>, <argument pos:start="17:28" pos:end="17:28"><expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="81:5">while <condition pos:start="21:11" pos:end="21:46">(<expr pos:start="21:12" pos:end="21:45"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:44"><name pos:start="21:19" pos:end="21:25">connect</name><argument_list pos:start="21:26" pos:end="21:44">(<argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><name pos:start="21:27" pos:end="21:28">fd</name></expr></argument>, <argument pos:start="21:31" pos:end="21:34"><expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">addr</name></expr></argument>, <argument pos:start="21:37" pos:end="21:43"><expr pos:start="21:37" pos:end="21:43"><name pos:start="21:37" pos:end="21:43">addrlen</name></expr></argument>)</argument_list></call><operator pos:start="21:45" pos:end="21:45">)</operator></expr>)</condition> <block pos:start="21:48" pos:end="81:5">{<block_content pos:start="23:9" pos:end="79:9">

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:25">ff_neterrno</name><argument_list pos:start="23:26" pos:end="23:27">()</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="25:9" pos:end="79:9">switch <condition pos:start="25:16" pos:end="25:20">(<expr pos:start="25:17" pos:end="25:19"><name pos:start="25:17" pos:end="25:19">ret</name></expr>)</condition> <block pos:start="25:22" pos:end="79:9">{<block_content pos:start="27:9" pos:end="77:23">

        <case pos:start="27:9" pos:end="27:28">case <expr pos:start="27:14" pos:end="27:27"><call pos:start="27:14" pos:end="27:27"><name pos:start="27:14" pos:end="27:20">AVERROR</name><argument_list pos:start="27:21" pos:end="27:27">(<argument pos:start="27:22" pos:end="27:26"><expr pos:start="27:22" pos:end="27:26"><name pos:start="27:22" pos:end="27:26">EINTR</name></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="29:13" pos:end="31:36"><if pos:start="29:13" pos:end="31:36">if <condition pos:start="29:16" pos:end="29:59">(<expr pos:start="29:17" pos:end="29:58"><call pos:start="29:17" pos:end="29:58"><name pos:start="29:17" pos:end="29:34">ff_check_interrupt</name><argument_list pos:start="29:35" pos:end="29:58">(<argument pos:start="29:36" pos:end="29:57"><expr pos:start="29:36" pos:end="29:57"><operator pos:start="29:36" pos:end="29:36">&amp;</operator><name pos:start="29:37" pos:end="29:57"><name pos:start="29:37" pos:end="29:37">h</name><operator pos:start="29:38" pos:end="29:39">-&gt;</operator><name pos:start="29:40" pos:end="29:57">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:36"><block_content pos:start="31:17" pos:end="31:36">

                <return pos:start="31:17" pos:end="31:36">return <expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:35">AVERROR_EXIT</name></expr>;</return></block_content></block></if></if_stmt>

            <continue pos:start="33:13" pos:end="33:21">continue;</continue>

        <case pos:start="35:9" pos:end="35:34">case <expr pos:start="35:14" pos:end="35:33"><call pos:start="35:14" pos:end="35:33"><name pos:start="35:14" pos:end="35:20">AVERROR</name><argument_list pos:start="35:21" pos:end="35:33">(<argument pos:start="35:22" pos:end="35:32"><expr pos:start="35:22" pos:end="35:32"><name pos:start="35:22" pos:end="35:32">EINPROGRESS</name></expr></argument>)</argument_list></call></expr>:</case>

        <case pos:start="37:9" pos:end="37:29">case <expr pos:start="37:14" pos:end="37:28"><call pos:start="37:14" pos:end="37:28"><name pos:start="37:14" pos:end="37:20">AVERROR</name><argument_list pos:start="37:21" pos:end="37:28">(<argument pos:start="37:22" pos:end="37:27"><expr pos:start="37:22" pos:end="37:27"><name pos:start="37:22" pos:end="37:27">EAGAIN</name></expr></argument>)</argument_list></call></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:76"><expr pos:start="39:13" pos:end="39:75"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:75"><name pos:start="39:19" pos:end="39:35">ff_poll_interrupt</name><argument_list pos:start="39:36" pos:end="39:75">(<argument pos:start="39:37" pos:end="39:38"><expr pos:start="39:37" pos:end="39:38"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:38">p</name></expr></argument>, <argument pos:start="39:41" pos:end="39:41"><expr pos:start="39:41" pos:end="39:41"><literal type="number" pos:start="39:41" pos:end="39:41">1</literal></expr></argument>, <argument pos:start="39:44" pos:end="39:50"><expr pos:start="39:44" pos:end="39:50"><name pos:start="39:44" pos:end="39:50">timeout</name></expr></argument>, <argument pos:start="39:53" pos:end="39:74"><expr pos:start="39:53" pos:end="39:74"><operator pos:start="39:53" pos:end="39:53">&amp;</operator><name pos:start="39:54" pos:end="39:74"><name pos:start="39:54" pos:end="39:54">h</name><operator pos:start="39:55" pos:end="39:56">-&gt;</operator><name pos:start="39:57" pos:end="39:74">interrupt_callback</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="43:27"><if pos:start="41:13" pos:end="43:27">if <condition pos:start="41:16" pos:end="41:24">(<expr pos:start="41:17" pos:end="41:23"><name pos:start="41:17" pos:end="41:19">ret</name> <operator pos:start="41:21" pos:end="41:21">&lt;</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:27"><block_content pos:start="43:17" pos:end="43:27">

                <return pos:start="43:17" pos:end="43:27">return <expr pos:start="43:24" pos:end="43:26"><name pos:start="43:24" pos:end="43:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:18">optlen</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <sizeof pos:start="45:22" pos:end="45:32">sizeof<argument_list pos:start="45:28" pos:end="45:32">(<argument pos:start="45:29" pos:end="45:31"><expr pos:start="45:29" pos:end="45:31"><name pos:start="45:29" pos:end="45:31">ret</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="49:47"><if pos:start="47:13" pos:end="49:47">if <condition pos:start="47:16" pos:end="47:69">(<expr pos:start="47:17" pos:end="47:68"><call pos:start="47:17" pos:end="47:68"><name pos:start="47:17" pos:end="47:26">getsockopt</name> <argument_list pos:start="47:28" pos:end="47:68">(<argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><name pos:start="47:29" pos:end="47:30">fd</name></expr></argument>, <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">SOL_SOCKET</name></expr></argument>, <argument pos:start="47:45" pos:end="47:52"><expr pos:start="47:45" pos:end="47:52"><name pos:start="47:45" pos:end="47:52">SO_ERROR</name></expr></argument>, <argument pos:start="47:55" pos:end="47:58"><expr pos:start="47:55" pos:end="47:58"><operator pos:start="47:55" pos:end="47:55">&amp;</operator><name pos:start="47:56" pos:end="47:58">ret</name></expr></argument>, <argument pos:start="47:61" pos:end="47:67"><expr pos:start="47:61" pos:end="47:67"><operator pos:start="47:61" pos:end="47:61">&amp;</operator><name pos:start="47:62" pos:end="47:67">optlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:47"><block_content pos:start="49:17" pos:end="49:47">

                <expr_stmt pos:start="49:17" pos:end="49:47"><expr pos:start="49:17" pos:end="49:46"><name pos:start="49:17" pos:end="49:19">ret</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <call pos:start="49:23" pos:end="49:46"><name pos:start="49:23" pos:end="49:31">AVUNERROR</name><argument_list pos:start="49:32" pos:end="49:46">(<argument pos:start="49:33" pos:end="49:45"><expr pos:start="49:33" pos:end="49:45"><call pos:start="49:33" pos:end="49:45"><name pos:start="49:33" pos:end="49:43">ff_neterrno</name><argument_list pos:start="49:44" pos:end="49:45">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="51:13" pos:end="73:13"><if pos:start="51:13" pos:end="73:13">if <condition pos:start="51:16" pos:end="51:25">(<expr pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:22">!=</operator> <literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>)</condition> <block pos:start="51:27" pos:end="73:13">{<block_content pos:start="53:17" pos:end="71:48">

                <decl_stmt pos:start="53:17" pos:end="53:33"><decl pos:start="53:17" pos:end="53:32"><type pos:start="53:17" pos:end="53:20"><name pos:start="53:17" pos:end="53:20">char</name></type> <name pos:start="53:22" pos:end="53:32"><name pos:start="53:22" pos:end="53:27">errbuf</name><index pos:start="53:28" pos:end="53:32">[<expr pos:start="53:29" pos:end="53:31"><literal type="number" pos:start="53:29" pos:end="53:31">100</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:29">AVERROR</name><argument_list pos:start="55:30" pos:end="55:34">(<argument pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:33">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:57"><expr pos:start="57:17" pos:end="57:56"><call pos:start="57:17" pos:end="57:56"><name pos:start="57:17" pos:end="57:27">av_strerror</name><argument_list pos:start="57:28" pos:end="57:56">(<argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">ret</name></expr></argument>, <argument pos:start="57:34" pos:end="57:39"><expr pos:start="57:34" pos:end="57:39"><name pos:start="57:34" pos:end="57:39">errbuf</name></expr></argument>, <argument pos:start="57:42" pos:end="57:55"><expr pos:start="57:42" pos:end="57:55"><sizeof pos:start="57:42" pos:end="57:55">sizeof<argument_list pos:start="57:48" pos:end="57:55">(<argument pos:start="57:49" pos:end="57:54"><expr pos:start="57:49" pos:end="57:54"><name pos:start="57:49" pos:end="57:54">errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="59:17" pos:end="71:48"><if pos:start="59:17" pos:end="65:48">if <condition pos:start="59:20" pos:end="59:34">(<expr pos:start="59:21" pos:end="59:33"><name pos:start="59:21" pos:end="59:33">will_try_next</name></expr>)</condition><block type="pseudo" pos:start="61:21" pos:end="65:48"><block_content pos:start="61:21" pos:end="65:48">

                    <expr_stmt pos:start="61:21" pos:end="65:48"><expr pos:start="61:21" pos:end="65:47"><call pos:start="61:21" pos:end="65:47"><name pos:start="61:21" pos:end="61:26">av_log</name><argument_list pos:start="61:27" pos:end="65:47">(<argument pos:start="61:28" pos:end="61:28"><expr pos:start="61:28" pos:end="61:28"><name pos:start="61:28" pos:end="61:28">h</name></expr></argument>, <argument pos:start="61:31" pos:end="61:44"><expr pos:start="61:31" pos:end="61:44"><name pos:start="61:31" pos:end="61:44">AV_LOG_WARNING</name></expr></argument>,

                           <argument pos:start="63:28" pos:end="63:80"><expr pos:start="63:28" pos:end="63:80"><literal type="string" pos:start="63:28" pos:end="63:80">"Connection to %s failed (%s), trying next address\n"</literal></expr></argument>,

                           <argument pos:start="65:28" pos:end="65:38"><expr pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:38"><name pos:start="65:28" pos:end="65:28">h</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:38">filename</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:46"><expr pos:start="65:41" pos:end="65:46"><name pos:start="65:41" pos:end="65:46">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="67:17" pos:end="71:48">else<block type="pseudo" pos:start="69:21" pos:end="71:48"><block_content pos:start="69:21" pos:end="71:48">

                    <expr_stmt pos:start="69:21" pos:end="71:48"><expr pos:start="69:21" pos:end="71:47"><call pos:start="69:21" pos:end="71:47"><name pos:start="69:21" pos:end="69:26">av_log</name><argument_list pos:start="69:27" pos:end="71:47">(<argument pos:start="69:28" pos:end="69:28"><expr pos:start="69:28" pos:end="69:28"><name pos:start="69:28" pos:end="69:28">h</name></expr></argument>, <argument pos:start="69:31" pos:end="69:42"><expr pos:start="69:31" pos:end="69:42"><name pos:start="69:31" pos:end="69:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:45" pos:end="69:75"><expr pos:start="69:45" pos:end="69:75"><literal type="string" pos:start="69:45" pos:end="69:75">"Connection to %s failed: %s\n"</literal></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:38"><expr pos:start="71:28" pos:end="71:38"><name pos:start="71:28" pos:end="71:38"><name pos:start="71:28" pos:end="71:28">h</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:38">filename</name></name></expr></argument>, <argument pos:start="71:41" pos:end="71:46"><expr pos:start="71:41" pos:end="71:46"><name pos:start="71:41" pos:end="71:46">errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        <default pos:start="75:9" pos:end="75:16">default:</default>

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>

    <return pos:start="83:5" pos:end="83:15">return <expr pos:start="83:12" pos:end="83:14"><name pos:start="83:12" pos:end="83:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
