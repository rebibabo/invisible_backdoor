<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21527.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:25">decode</name><parameter_list pos:start="1:26" pos:end="1:43">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">DisasContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">dc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:62">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">ir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="15:5"><if pos:start="11:5" pos:end="15:5">if <condition pos:start="11:8" pos:end="11:52">(<expr pos:start="11:9" pos:end="11:51"><call pos:start="11:9" pos:end="11:51"><name pos:start="11:9" pos:end="11:16">unlikely</name><argument_list pos:start="11:17" pos:end="11:51">(<argument pos:start="11:18" pos:end="11:50"><expr pos:start="11:18" pos:end="11:50"><call pos:start="11:18" pos:end="11:50"><name pos:start="11:18" pos:end="11:35">qemu_loglevel_mask</name><argument_list pos:start="11:36" pos:end="11:50">(<argument pos:start="11:37" pos:end="11:49"><expr pos:start="11:37" pos:end="11:49"><name pos:start="11:37" pos:end="11:49">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:54" pos:end="15:5">{<block_content pos:start="13:9" pos:end="13:41">

        <expr_stmt pos:start="13:9" pos:end="13:41"><expr pos:start="13:9" pos:end="13:40"><call pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:32">tcg_gen_debug_insn_start</name><argument_list pos:start="13:33" pos:end="13:40">(<argument pos:start="13:34" pos:end="13:39"><expr pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:39"><name pos:start="13:34" pos:end="13:35">dc</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:35"><expr pos:start="19:5" pos:end="19:34"><name pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:6">dc</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:10">ir</name></name> <operator pos:start="19:12" pos:end="19:12">=</operator> <name pos:start="19:14" pos:end="19:15">ir</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:34"><name pos:start="19:19" pos:end="19:26">ldl_code</name><argument_list pos:start="19:27" pos:end="19:34">(<argument pos:start="19:28" pos:end="19:33"><expr pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:33"><name pos:start="19:28" pos:end="19:29">dc</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:33">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><call pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:11">LOG_DIS</name><argument_list pos:start="21:12" pos:end="21:30">(<argument pos:start="21:13" pos:end="21:21"><expr pos:start="21:13" pos:end="21:21"><literal type="string" pos:start="21:13" pos:end="21:21">"%8.8x\t"</literal></expr></argument>, <argument pos:start="21:24" pos:end="21:29"><expr pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:29"><name pos:start="21:24" pos:end="21:25">dc</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:29">ir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:51">/* try guessing 'empty' instruction memory, although it may be a valid

     * instruction sequence (eg. srui r0, r0, 0) */</comment>

    <if_stmt pos:start="29:5" pos:end="45:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:15">(<expr pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:14"><name pos:start="29:9" pos:end="29:10">dc</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:14">ir</name></name></expr>)</condition> <block pos:start="29:17" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:24">

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:10">dc</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:19">nr_nops</name></name> <operator pos:start="31:21" pos:end="31:21">=</operator> <literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="45:5">else <block pos:start="33:12" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:15">LOG_DIS</name><argument_list pos:start="35:16" pos:end="35:44">(<argument pos:start="35:17" pos:end="35:30"><expr pos:start="35:17" pos:end="35:30"><literal type="string" pos:start="35:17" pos:end="35:30">"nr_nops=%d\t"</literal></expr></argument>, <argument pos:start="35:33" pos:end="35:43"><expr pos:start="35:33" pos:end="35:43"><name pos:start="35:33" pos:end="35:43"><name pos:start="35:33" pos:end="35:34">dc</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:43">nr_nops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:10">dc</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:19">nr_nops</name></name><operator pos:start="37:20" pos:end="37:21">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:28">(<expr pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:14">dc</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:23">nr_nops</name></name> <operator pos:start="39:25" pos:end="39:25">&gt;</operator> <literal type="number" pos:start="39:27" pos:end="39:27">4</literal></expr>)</condition> <block pos:start="39:30" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:58">

            <expr_stmt pos:start="41:13" pos:end="41:58"><expr pos:start="41:13" pos:end="41:57"><call pos:start="41:13" pos:end="41:57"><name pos:start="41:13" pos:end="41:21">cpu_abort</name><argument_list pos:start="41:22" pos:end="41:57">(<argument pos:start="41:23" pos:end="41:29"><expr pos:start="41:23" pos:end="41:29"><name pos:start="41:23" pos:end="41:29"><name pos:start="41:23" pos:end="41:24">dc</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:29">env</name></name></expr></argument>, <argument pos:start="41:32" pos:end="41:56"><expr pos:start="41:32" pos:end="41:56"><literal type="string" pos:start="41:32" pos:end="41:56">"fetching nop sequence\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:43"><expr pos:start="49:5" pos:end="49:42"><name pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:14">opcode</name></name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:42"><name pos:start="49:18" pos:end="49:30">EXTRACT_FIELD</name><argument_list pos:start="49:31" pos:end="49:42">(<argument pos:start="49:32" pos:end="49:33"><expr pos:start="49:32" pos:end="49:33"><name pos:start="49:32" pos:end="49:33">ir</name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><literal type="number" pos:start="49:36" pos:end="49:37">26</literal></expr></argument>, <argument pos:start="49:40" pos:end="49:41"><expr pos:start="49:40" pos:end="49:41"><literal type="number" pos:start="49:40" pos:end="49:41">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:39"><expr pos:start="53:5" pos:end="53:38"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:12">imm5</name></name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:38"><name pos:start="53:16" pos:end="53:28">EXTRACT_FIELD</name><argument_list pos:start="53:29" pos:end="53:38">(<argument pos:start="53:30" pos:end="53:31"><expr pos:start="53:30" pos:end="53:31"><name pos:start="53:30" pos:end="53:31">ir</name></expr></argument>, <argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:37"><expr pos:start="53:37" pos:end="53:37"><literal type="number" pos:start="53:37" pos:end="53:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:13">imm16</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:29">EXTRACT_FIELD</name><argument_list pos:start="55:30" pos:end="55:40">(<argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><name pos:start="55:31" pos:end="55:32">ir</name></expr></argument>, <argument pos:start="55:35" pos:end="55:35"><expr pos:start="55:35" pos:end="55:35"><literal type="number" pos:start="55:35" pos:end="55:35">0</literal></expr></argument>, <argument pos:start="55:38" pos:end="55:39"><expr pos:start="55:38" pos:end="55:39"><literal type="number" pos:start="55:38" pos:end="55:39">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:41"><expr pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:13">imm26</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:29">EXTRACT_FIELD</name><argument_list pos:start="57:30" pos:end="57:40">(<argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">ir</name></expr></argument>, <argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr></argument>, <argument pos:start="57:38" pos:end="57:39"><expr pos:start="57:38" pos:end="57:39"><literal type="number" pos:start="57:38" pos:end="57:39">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:40"><expr pos:start="61:5" pos:end="61:39"><name pos:start="61:5" pos:end="61:11"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:11">csr</name></name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:39"><name pos:start="61:15" pos:end="61:27">EXTRACT_FIELD</name><argument_list pos:start="61:28" pos:end="61:39">(<argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">ir</name></expr></argument>, <argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><literal type="number" pos:start="61:33" pos:end="61:34">21</literal></expr></argument>, <argument pos:start="61:37" pos:end="61:38"><expr pos:start="61:37" pos:end="61:38"><literal type="number" pos:start="61:37" pos:end="61:38">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:39"><expr pos:start="63:5" pos:end="63:38"><name pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:10">r0</name></name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:38"><name pos:start="63:14" pos:end="63:26">EXTRACT_FIELD</name><argument_list pos:start="63:27" pos:end="63:38">(<argument pos:start="63:28" pos:end="63:29"><expr pos:start="63:28" pos:end="63:29"><name pos:start="63:28" pos:end="63:29">ir</name></expr></argument>, <argument pos:start="63:32" pos:end="63:33"><expr pos:start="63:32" pos:end="63:33"><literal type="number" pos:start="63:32" pos:end="63:33">21</literal></expr></argument>, <argument pos:start="63:36" pos:end="63:37"><expr pos:start="63:36" pos:end="63:37"><literal type="number" pos:start="63:36" pos:end="63:37">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:10">r1</name></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:38"><name pos:start="65:14" pos:end="65:26">EXTRACT_FIELD</name><argument_list pos:start="65:27" pos:end="65:38">(<argument pos:start="65:28" pos:end="65:29"><expr pos:start="65:28" pos:end="65:29"><name pos:start="65:28" pos:end="65:29">ir</name></expr></argument>, <argument pos:start="65:32" pos:end="65:33"><expr pos:start="65:32" pos:end="65:33"><literal type="number" pos:start="65:32" pos:end="65:33">16</literal></expr></argument>, <argument pos:start="65:36" pos:end="65:37"><expr pos:start="65:36" pos:end="65:37"><literal type="number" pos:start="65:36" pos:end="65:37">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:10">r2</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:38"><name pos:start="67:14" pos:end="67:26">EXTRACT_FIELD</name><argument_list pos:start="67:27" pos:end="67:38">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">ir</name></expr></argument>, <argument pos:start="67:32" pos:end="67:33"><expr pos:start="67:32" pos:end="67:33"><literal type="number" pos:start="67:32" pos:end="67:33">11</literal></expr></argument>, <argument pos:start="67:36" pos:end="67:37"><expr pos:start="67:36" pos:end="67:37"><literal type="number" pos:start="67:36" pos:end="67:37">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:46">/* bit 31 seems to indicate insn type.  */</comment>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:10">ir</name> <operator pos:start="73:12" pos:end="73:12">&amp;</operator> <operator pos:start="73:14" pos:end="73:14">(</operator><literal type="number" pos:start="73:15" pos:end="73:15">1</literal> <operator pos:start="73:17" pos:end="73:18">&lt;&lt;</operator> <literal type="number" pos:start="73:20" pos:end="73:21">31</literal><operator pos:start="73:22" pos:end="73:22">)</operator></expr>)</condition> <block pos:start="73:25" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:31">

        <expr_stmt pos:start="75:9" pos:end="75:31"><expr pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:10">dc</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:18">format</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:30">OP_FMT_RR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="81:5">else <block pos:start="77:12" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:31">

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:10">dc</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:18">format</name></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:30">OP_FMT_RI</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:38">/* Large switch for all insns.  */</comment>

    <for pos:start="87:5" pos:end="97:5">for <control pos:start="87:9" pos:end="87:45">(<init pos:start="87:10" pos:end="87:15"><expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:10">i</name> <operator pos:start="87:12" pos:end="87:12">=</operator> <literal type="number" pos:start="87:14" pos:end="87:14">0</literal></expr>;</init> <condition pos:start="87:17" pos:end="87:40"><expr pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:17">i</name> <operator pos:start="87:19" pos:end="87:19">&lt;</operator> <call pos:start="87:21" pos:end="87:39"><name pos:start="87:21" pos:end="87:30">ARRAY_SIZE</name><argument_list pos:start="87:31" pos:end="87:39">(<argument pos:start="87:32" pos:end="87:38"><expr pos:start="87:32" pos:end="87:38"><name pos:start="87:32" pos:end="87:38">decinfo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="87:42" pos:end="87:44"><expr pos:start="87:42" pos:end="87:44"><name pos:start="87:42" pos:end="87:42">i</name><operator pos:start="87:43" pos:end="87:44">++</operator></expr></incr>)</control> <block pos:start="87:47" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:9">

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:62">(<expr pos:start="89:13" pos:end="89:61"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:23"><name pos:start="89:14" pos:end="89:15">dc</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:23">opcode</name></name> <operator pos:start="89:25" pos:end="89:25">&amp;</operator> <name pos:start="89:27" pos:end="89:36"><name pos:start="89:27" pos:end="89:33">decinfo</name><index pos:start="89:34" pos:end="89:36">[<expr pos:start="89:35" pos:end="89:35"><name pos:start="89:35" pos:end="89:35">i</name></expr>]</index></name><operator pos:start="89:37" pos:end="89:37">.</operator><name pos:start="89:38" pos:end="89:41">mask</name><operator pos:start="89:42" pos:end="89:42">)</operator> <operator pos:start="89:44" pos:end="89:45">==</operator> <name pos:start="89:47" pos:end="89:56"><name pos:start="89:47" pos:end="89:53">decinfo</name><index pos:start="89:54" pos:end="89:56">[<expr pos:start="89:55" pos:end="89:55"><name pos:start="89:55" pos:end="89:55">i</name></expr>]</index></name><operator pos:start="89:57" pos:end="89:57">.</operator><name pos:start="89:58" pos:end="89:61">bits</name></expr>)</condition> <block pos:start="89:64" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:19">

            <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:19">decinfo</name><index pos:start="91:20" pos:end="91:22">[<expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">i</name></expr>]</index></name><operator pos:start="91:23" pos:end="91:23">.</operator><call pos:start="91:24" pos:end="91:30"><name pos:start="91:24" pos:end="91:26">dec</name><argument_list pos:start="91:27" pos:end="91:30">(<argument pos:start="91:28" pos:end="91:29"><expr pos:start="91:28" pos:end="91:29"><name pos:start="91:28" pos:end="91:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="101:5" pos:end="101:62"><expr pos:start="101:5" pos:end="101:61"><call pos:start="101:5" pos:end="101:61"><name pos:start="101:5" pos:end="101:13">cpu_abort</name><argument_list pos:start="101:14" pos:end="101:61">(<argument pos:start="101:15" pos:end="101:21"><expr pos:start="101:15" pos:end="101:21"><name pos:start="101:15" pos:end="101:21"><name pos:start="101:15" pos:end="101:16">dc</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:21">env</name></name></expr></argument>, <argument pos:start="101:24" pos:end="101:48"><expr pos:start="101:24" pos:end="101:48"><literal type="string" pos:start="101:24" pos:end="101:48">"unknown opcode 0x%02x\n"</literal></expr></argument>, <argument pos:start="101:51" pos:end="101:60"><expr pos:start="101:51" pos:end="101:60"><name pos:start="101:51" pos:end="101:60"><name pos:start="101:51" pos:end="101:52">dc</name><operator pos:start="101:53" pos:end="101:54">-&gt;</operator><name pos:start="101:55" pos:end="101:60">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
