<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8892.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:29"><name pos:start="1:1" pos:end="1:6">read_f</name><argument_list pos:start="1:7" pos:end="1:29">(<argument pos:start="1:8" pos:end="1:15">int argc</argument>, <argument pos:start="1:18" pos:end="1:28">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="265:1">{<block_content pos:start="5:9" pos:end="263:17">

	<decl_stmt pos:start="5:9" pos:end="5:30"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:22"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:22">timeval</name></name></type> <name pos:start="5:24" pos:end="5:25">t1</name></decl>, <decl pos:start="5:28" pos:end="5:29"><type ref="prev" pos:start="5:9" pos:end="5:22"/><name pos:start="5:28" pos:end="5:29">t2</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:55"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:17">Cflag</name> <init pos:start="7:19" pos:end="7:21">= <expr pos:start="7:21" pos:end="7:21"><literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></init></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:24" pos:end="7:28">pflag</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>, <decl pos:start="7:35" pos:end="7:43"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:35" pos:end="7:39">qflag</name> <init pos:start="7:41" pos:end="7:43">= <expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">0</literal></expr></init></decl>, <decl pos:start="7:46" pos:end="7:54"><type ref="prev" pos:start="7:9" pos:end="7:11"/><name pos:start="7:46" pos:end="7:50">vflag</name> <init pos:start="7:52" pos:end="7:54">= <expr pos:start="7:54" pos:end="7:54"><literal type="number" pos:start="7:54" pos:end="7:54">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:44"><decl pos:start="9:9" pos:end="9:21"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:17">Pflag</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>, <decl pos:start="9:24" pos:end="9:32"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:24" pos:end="9:28">sflag</name> <init pos:start="9:30" pos:end="9:32">= <expr pos:start="9:32" pos:end="9:32"><literal type="number" pos:start="9:32" pos:end="9:32">0</literal></expr></init></decl>, <decl pos:start="9:35" pos:end="9:43"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:35" pos:end="9:39">lflag</name> <init pos:start="9:41" pos:end="9:43">= <expr pos:start="9:43" pos:end="9:43"><literal type="number" pos:start="9:43" pos:end="9:43">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:19"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">c</name></decl>, <decl pos:start="11:16" pos:end="11:18"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:16" pos:end="11:18">cnt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:18"><decl pos:start="13:9" pos:end="13:17"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:12">char</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">buf</name></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="15:23"><decl pos:start="15:9" pos:end="15:22"><type pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15">int64_t</name></type> <name pos:start="15:17" pos:end="15:22">offset</name></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:18"><decl pos:start="17:9" pos:end="17:17"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:17">count</name></decl>;</decl_stmt>

        <comment type="block" pos:start="19:9" pos:end="19:79">/* Some compilers get confused and warn if this is not initialized.  */</comment>

        <decl_stmt pos:start="21:9" pos:end="21:22"><decl pos:start="21:9" pos:end="21:21"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:17">total</name> <init pos:start="21:19" pos:end="21:21">= <expr pos:start="21:21" pos:end="21:21"><literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="23:9" pos:end="23:63"><decl pos:start="23:9" pos:end="23:23"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:19">pattern</name> <init pos:start="23:21" pos:end="23:23">= <expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></init></decl>, <decl pos:start="23:26" pos:end="23:43"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:26" pos:end="23:39">pattern_offset</name> <init pos:start="23:41" pos:end="23:43">= <expr pos:start="23:43" pos:end="23:43"><literal type="number" pos:start="23:43" pos:end="23:43">0</literal></expr></init></decl>, <decl pos:start="23:46" pos:end="23:62"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:46" pos:end="23:58">pattern_count</name> <init pos:start="23:60" pos:end="23:62">= <expr pos:start="23:62" pos:end="23:62"><literal type="number" pos:start="23:62" pos:end="23:62">0</literal></expr></init></decl>;</decl_stmt>



	<while pos:start="27:9" pos:end="101:9">while <condition pos:start="27:15" pos:end="27:61">(<expr pos:start="27:16" pos:end="27:60"><operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:17">c</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <call pos:start="27:21" pos:end="27:52"><name pos:start="27:21" pos:end="27:26">getopt</name><argument_list pos:start="27:27" pos:end="27:52">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">argc</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">argv</name></expr></argument>, <argument pos:start="27:40" pos:end="27:51"><expr pos:start="27:40" pos:end="27:51"><literal type="string" pos:start="27:40" pos:end="27:51">"Cl:pP:qs:v"</literal></expr></argument>)</argument_list></call><operator pos:start="27:53" pos:end="27:53">)</operator> <operator pos:start="27:55" pos:end="27:56">!=</operator> <name pos:start="27:58" pos:end="27:60">EOF</name></expr>)</condition> <block pos:start="27:63" pos:end="101:9">{<block_content pos:start="29:17" pos:end="99:17">

		<switch pos:start="29:17" pos:end="99:17">switch <condition pos:start="29:24" pos:end="29:26">(<expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">c</name></expr>)</condition> <block pos:start="29:28" pos:end="99:17">{<block_content pos:start="31:17" pos:end="97:56">

		<case pos:start="31:17" pos:end="31:25">case <expr pos:start="31:22" pos:end="31:24"><literal type="char" pos:start="31:22" pos:end="31:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="33:25" pos:end="33:34"><expr pos:start="33:25" pos:end="33:33"><name pos:start="33:25" pos:end="33:29">Cflag</name> <operator pos:start="33:31" pos:end="33:31">=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">1</literal></expr>;</expr_stmt>

			<break pos:start="35:25" pos:end="35:30">break;</break>

		<case pos:start="37:17" pos:end="37:25">case <expr pos:start="37:22" pos:end="37:24"><literal type="char" pos:start="37:22" pos:end="37:24">'l'</literal></expr>:</case>

			<expr_stmt pos:start="39:25" pos:end="39:34"><expr pos:start="39:25" pos:end="39:33"><name pos:start="39:25" pos:end="39:29">lflag</name> <operator pos:start="39:31" pos:end="39:31">=</operator> <literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="41:25" pos:end="41:55"><expr pos:start="41:25" pos:end="41:54"><name pos:start="41:25" pos:end="41:37">pattern_count</name> <operator pos:start="41:39" pos:end="41:39">=</operator> <call pos:start="41:41" pos:end="41:54"><name pos:start="41:41" pos:end="41:46">cvtnum</name><argument_list pos:start="41:47" pos:end="41:54">(<argument pos:start="41:48" pos:end="41:53"><expr pos:start="41:48" pos:end="41:53"><name pos:start="41:48" pos:end="41:53">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="43:25" pos:end="49:25"><if pos:start="43:25" pos:end="49:25">if <condition pos:start="43:28" pos:end="43:46">(<expr pos:start="43:29" pos:end="43:45"><name pos:start="43:29" pos:end="43:41">pattern_count</name> <operator pos:start="43:43" pos:end="43:43">&lt;</operator> <literal type="number" pos:start="43:45" pos:end="43:45">0</literal></expr>)</condition> <block pos:start="43:48" pos:end="49:25">{<block_content pos:start="45:33" pos:end="47:41">

				<expr_stmt pos:start="45:33" pos:end="45:86"><expr pos:start="45:33" pos:end="45:85"><call pos:start="45:33" pos:end="45:85"><name pos:start="45:33" pos:end="45:38">printf</name><argument_list pos:start="45:39" pos:end="45:85">(<argument pos:start="45:40" pos:end="45:76"><expr pos:start="45:40" pos:end="45:76"><literal type="string" pos:start="45:40" pos:end="45:76">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="45:79" pos:end="45:84"><expr pos:start="45:79" pos:end="45:84"><name pos:start="45:79" pos:end="45:84">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return pos:start="47:33" pos:end="47:41">return <expr pos:start="47:40" pos:end="47:40"><literal type="number" pos:start="47:40" pos:end="47:40">0</literal></expr>;</return>

			</block_content>}</block></if></if_stmt>

			<break pos:start="51:25" pos:end="51:30">break;</break>

		<case pos:start="53:17" pos:end="53:25">case <expr pos:start="53:22" pos:end="53:24"><literal type="char" pos:start="53:22" pos:end="53:24">'p'</literal></expr>:</case>

			<expr_stmt pos:start="55:25" pos:end="55:34"><expr pos:start="55:25" pos:end="55:33"><name pos:start="55:25" pos:end="55:29">pflag</name> <operator pos:start="55:31" pos:end="55:31">=</operator> <literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr>;</expr_stmt>

			<break pos:start="57:25" pos:end="57:30">break;</break>

		<case pos:start="59:17" pos:end="59:25">case <expr pos:start="59:22" pos:end="59:24"><literal type="char" pos:start="59:22" pos:end="59:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="61:25" pos:end="61:34"><expr pos:start="61:25" pos:end="61:33"><name pos:start="61:25" pos:end="61:29">Pflag</name> <operator pos:start="61:31" pos:end="61:31">=</operator> <literal type="number" pos:start="61:33" pos:end="61:33">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="63:25" pos:end="63:47"><expr pos:start="63:25" pos:end="63:46"><name pos:start="63:25" pos:end="63:31">pattern</name> <operator pos:start="63:33" pos:end="63:33">=</operator> <call pos:start="63:35" pos:end="63:46"><name pos:start="63:35" pos:end="63:38">atoi</name><argument_list pos:start="63:39" pos:end="63:46">(<argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:45">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="65:25" pos:end="65:30">break;</break>

		<case pos:start="67:17" pos:end="67:25">case <expr pos:start="67:22" pos:end="67:24"><literal type="char" pos:start="67:22" pos:end="67:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="69:25" pos:end="69:34"><expr pos:start="69:25" pos:end="69:33"><name pos:start="69:25" pos:end="69:29">qflag</name> <operator pos:start="69:31" pos:end="69:31">=</operator> <literal type="number" pos:start="69:33" pos:end="69:33">1</literal></expr>;</expr_stmt>

			<break pos:start="71:25" pos:end="71:30">break;</break>

		<case pos:start="73:17" pos:end="73:25">case <expr pos:start="73:22" pos:end="73:24"><literal type="char" pos:start="73:22" pos:end="73:24">'s'</literal></expr>:</case>

			<expr_stmt pos:start="75:25" pos:end="75:34"><expr pos:start="75:25" pos:end="75:33"><name pos:start="75:25" pos:end="75:29">sflag</name> <operator pos:start="75:31" pos:end="75:31">=</operator> <literal type="number" pos:start="75:33" pos:end="75:33">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="77:25" pos:end="77:56"><expr pos:start="77:25" pos:end="77:55"><name pos:start="77:25" pos:end="77:38">pattern_offset</name> <operator pos:start="77:40" pos:end="77:40">=</operator> <call pos:start="77:42" pos:end="77:55"><name pos:start="77:42" pos:end="77:47">cvtnum</name><argument_list pos:start="77:48" pos:end="77:55">(<argument pos:start="77:49" pos:end="77:54"><expr pos:start="77:49" pos:end="77:54"><name pos:start="77:49" pos:end="77:54">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="79:25" pos:end="85:25"><if pos:start="79:25" pos:end="85:25">if <condition pos:start="79:28" pos:end="79:47">(<expr pos:start="79:29" pos:end="79:46"><name pos:start="79:29" pos:end="79:42">pattern_offset</name> <operator pos:start="79:44" pos:end="79:44">&lt;</operator> <literal type="number" pos:start="79:46" pos:end="79:46">0</literal></expr>)</condition> <block pos:start="79:49" pos:end="85:25">{<block_content pos:start="81:33" pos:end="83:41">

				<expr_stmt pos:start="81:33" pos:end="81:86"><expr pos:start="81:33" pos:end="81:85"><call pos:start="81:33" pos:end="81:85"><name pos:start="81:33" pos:end="81:38">printf</name><argument_list pos:start="81:39" pos:end="81:85">(<argument pos:start="81:40" pos:end="81:76"><expr pos:start="81:40" pos:end="81:76"><literal type="string" pos:start="81:40" pos:end="81:76">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="81:79" pos:end="81:84"><expr pos:start="81:79" pos:end="81:84"><name pos:start="81:79" pos:end="81:84">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<return pos:start="83:33" pos:end="83:41">return <expr pos:start="83:40" pos:end="83:40"><literal type="number" pos:start="83:40" pos:end="83:40">0</literal></expr>;</return>

			</block_content>}</block></if></if_stmt>

			<break pos:start="87:25" pos:end="87:30">break;</break>

		<case pos:start="89:17" pos:end="89:25">case <expr pos:start="89:22" pos:end="89:24"><literal type="char" pos:start="89:22" pos:end="89:24">'v'</literal></expr>:</case>

			<expr_stmt pos:start="91:25" pos:end="91:34"><expr pos:start="91:25" pos:end="91:33"><name pos:start="91:25" pos:end="91:29">vflag</name> <operator pos:start="91:31" pos:end="91:31">=</operator> <literal type="number" pos:start="91:33" pos:end="91:33">1</literal></expr>;</expr_stmt>

			<break pos:start="93:25" pos:end="93:30">break;</break>

		<default pos:start="95:17" pos:end="95:24">default:</default>

			<return pos:start="97:25" pos:end="97:56">return <expr pos:start="97:32" pos:end="97:55"><call pos:start="97:32" pos:end="97:55"><name pos:start="97:32" pos:end="97:44">command_usage</name><argument_list pos:start="97:45" pos:end="97:55">(<argument pos:start="97:46" pos:end="97:54"><expr pos:start="97:46" pos:end="97:54"><operator pos:start="97:46" pos:end="97:46">&amp;</operator><name pos:start="97:47" pos:end="97:54">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="105:9" pos:end="107:48"><if pos:start="105:9" pos:end="107:48">if <condition pos:start="105:12" pos:end="105:31">(<expr pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:18">optind</name> <operator pos:start="105:20" pos:end="105:21">!=</operator> <name pos:start="105:23" pos:end="105:26">argc</name> <operator pos:start="105:28" pos:end="105:28">-</operator> <literal type="number" pos:start="105:30" pos:end="105:30">2</literal></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:48"><block_content pos:start="107:17" pos:end="107:48">

		<return pos:start="107:17" pos:end="107:48">return <expr pos:start="107:24" pos:end="107:47"><call pos:start="107:24" pos:end="107:47"><name pos:start="107:24" pos:end="107:36">command_usage</name><argument_list pos:start="107:37" pos:end="107:47">(<argument pos:start="107:38" pos:end="107:46"><expr pos:start="107:38" pos:end="107:46"><operator pos:start="107:38" pos:end="107:38">&amp;</operator><name pos:start="107:39" pos:end="107:46">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



	<expr_stmt pos:start="111:9" pos:end="111:38"><expr pos:start="111:9" pos:end="111:37"><name pos:start="111:9" pos:end="111:14">offset</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:37"><name pos:start="111:18" pos:end="111:23">cvtnum</name><argument_list pos:start="111:24" pos:end="111:37">(<argument pos:start="111:25" pos:end="111:36"><expr pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:36"><name pos:start="111:25" pos:end="111:28">argv</name><index pos:start="111:29" pos:end="111:36">[<expr pos:start="111:30" pos:end="111:35"><name pos:start="111:30" pos:end="111:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:23">(<expr pos:start="113:13" pos:end="113:22"><name pos:start="113:13" pos:end="113:18">offset</name> <operator pos:start="113:20" pos:end="113:20">&lt;</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>)</condition> <block pos:start="113:25" pos:end="119:9">{<block_content pos:start="115:17" pos:end="117:25">

		<expr_stmt pos:start="115:17" pos:end="115:76"><expr pos:start="115:17" pos:end="115:75"><call pos:start="115:17" pos:end="115:75"><name pos:start="115:17" pos:end="115:22">printf</name><argument_list pos:start="115:23" pos:end="115:75">(<argument pos:start="115:24" pos:end="115:60"><expr pos:start="115:24" pos:end="115:60"><literal type="string" pos:start="115:24" pos:end="115:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="115:63" pos:end="115:74"><expr pos:start="115:63" pos:end="115:74"><name pos:start="115:63" pos:end="115:74"><name pos:start="115:63" pos:end="115:66">argv</name><index pos:start="115:67" pos:end="115:74">[<expr pos:start="115:68" pos:end="115:73"><name pos:start="115:68" pos:end="115:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="117:17" pos:end="117:25">return <expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="123:9" pos:end="123:17"><expr pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:14">optind</name><operator pos:start="123:15" pos:end="123:16">++</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="125:9" pos:end="125:37"><expr pos:start="125:9" pos:end="125:36"><name pos:start="125:9" pos:end="125:13">count</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <call pos:start="125:17" pos:end="125:36"><name pos:start="125:17" pos:end="125:22">cvtnum</name><argument_list pos:start="125:23" pos:end="125:36">(<argument pos:start="125:24" pos:end="125:35"><expr pos:start="125:24" pos:end="125:35"><name pos:start="125:24" pos:end="125:35"><name pos:start="125:24" pos:end="125:27">argv</name><index pos:start="125:28" pos:end="125:35">[<expr pos:start="125:29" pos:end="125:34"><name pos:start="125:29" pos:end="125:34">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:22">(<expr pos:start="127:13" pos:end="127:21"><name pos:start="127:13" pos:end="127:17">count</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <literal type="number" pos:start="127:21" pos:end="127:21">0</literal></expr>)</condition> <block pos:start="127:24" pos:end="133:9">{<block_content pos:start="129:17" pos:end="131:25">

		<expr_stmt pos:start="129:17" pos:end="129:76"><expr pos:start="129:17" pos:end="129:75"><call pos:start="129:17" pos:end="129:75"><name pos:start="129:17" pos:end="129:22">printf</name><argument_list pos:start="129:23" pos:end="129:75">(<argument pos:start="129:24" pos:end="129:60"><expr pos:start="129:24" pos:end="129:60"><literal type="string" pos:start="129:24" pos:end="129:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="129:63" pos:end="129:74"><expr pos:start="129:63" pos:end="129:74"><name pos:start="129:63" pos:end="129:74"><name pos:start="129:63" pos:end="129:66">argv</name><index pos:start="129:67" pos:end="129:74">[<expr pos:start="129:68" pos:end="129:73"><name pos:start="129:68" pos:end="129:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="131:17" pos:end="131:25">return <expr pos:start="131:24" pos:end="131:24"><literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:35">(<expr pos:start="137:9" pos:end="137:34"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:14">Pflag</name> <operator pos:start="137:16" pos:end="137:17">&amp;&amp;</operator> <operator pos:start="137:19" pos:end="137:19">(</operator><name pos:start="137:20" pos:end="137:24">lflag</name> <operator pos:start="137:26" pos:end="137:27">||</operator> <name pos:start="137:29" pos:end="137:33">sflag</name><operator pos:start="137:34" pos:end="137:34">)</operator></expr>)</condition> <block pos:start="137:37" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:40">

        <return pos:start="139:9" pos:end="139:40">return <expr pos:start="139:16" pos:end="139:39"><call pos:start="139:16" pos:end="139:39"><name pos:start="139:16" pos:end="139:28">command_usage</name><argument_list pos:start="139:29" pos:end="139:39">(<argument pos:start="139:30" pos:end="139:38"><expr pos:start="139:30" pos:end="139:38"><operator pos:start="139:30" pos:end="139:30">&amp;</operator><name pos:start="139:31" pos:end="139:38">read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:15">(<expr pos:start="145:9" pos:end="145:14"><operator pos:start="145:9" pos:end="145:9">!</operator><name pos:start="145:10" pos:end="145:14">lflag</name></expr>)</condition> <block pos:start="145:17" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:47">

        <expr_stmt pos:start="147:9" pos:end="147:47"><expr pos:start="147:9" pos:end="147:46"><name pos:start="147:9" pos:end="147:21">pattern_count</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:29">count</name> <operator pos:start="147:31" pos:end="147:31">-</operator> <name pos:start="147:33" pos:end="147:46">pattern_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:72">(<expr pos:start="153:9" pos:end="153:71"><operator pos:start="153:9" pos:end="153:9">(</operator><name pos:start="153:10" pos:end="153:22">pattern_count</name> <operator pos:start="153:24" pos:end="153:24">&lt;</operator> <literal type="number" pos:start="153:26" pos:end="153:26">0</literal><operator pos:start="153:27" pos:end="153:27">)</operator> <operator pos:start="153:29" pos:end="153:30">||</operator> <operator pos:start="153:32" pos:end="153:32">(</operator><name pos:start="153:33" pos:end="153:45">pattern_count</name> <operator pos:start="153:47" pos:end="153:47">+</operator> <name pos:start="153:49" pos:end="153:62">pattern_offset</name> <operator pos:start="153:64" pos:end="153:64">&gt;</operator> <name pos:start="153:66" pos:end="153:70">count</name><operator pos:start="153:71" pos:end="153:71">)</operator></expr>)</condition>  <block pos:start="153:75" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:17">

        <expr_stmt pos:start="155:9" pos:end="155:71"><expr pos:start="155:9" pos:end="155:70"><call pos:start="155:9" pos:end="155:70"><name pos:start="155:9" pos:end="155:14">printf</name><argument_list pos:start="155:15" pos:end="155:70">(<argument pos:start="155:16" pos:end="155:69"><expr pos:start="155:16" pos:end="155:69"><literal type="string" pos:start="155:16" pos:end="155:69">"pattern verfication range exceeds end of read data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:17">return <expr pos:start="157:16" pos:end="157:16"><literal type="number" pos:start="157:16" pos:end="157:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



	<if_stmt pos:start="163:9" pos:end="185:9"><if pos:start="163:9" pos:end="185:9">if <condition pos:start="163:12" pos:end="163:19">(<expr pos:start="163:13" pos:end="163:18"><operator pos:start="163:13" pos:end="163:13">!</operator><name pos:start="163:14" pos:end="163:18">pflag</name></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="185:9"><block_content pos:start="165:17" pos:end="185:9">

		<if_stmt pos:start="165:17" pos:end="185:9"><if pos:start="165:17" pos:end="185:9">if <condition pos:start="165:20" pos:end="165:35">(<expr pos:start="165:21" pos:end="165:34"><name pos:start="165:21" pos:end="165:26">offset</name> <operator pos:start="165:28" pos:end="165:28">&amp;</operator> <literal type="number" pos:start="165:30" pos:end="165:34">0x1ff</literal></expr>)</condition> <block pos:start="165:37" pos:end="185:9">{<block_content pos:start="167:25" pos:end="183:17">

			<expr_stmt pos:start="167:25" pos:end="169:51"><expr pos:start="167:25" pos:end="169:50"><call pos:start="167:25" pos:end="169:50"><name pos:start="167:25" pos:end="167:30">printf</name><argument_list pos:start="167:31" pos:end="169:50">(<argument pos:start="167:32" pos:end="167:68"><expr pos:start="167:32" pos:end="167:68"><literal type="string" pos:start="167:32" pos:end="167:68">"offset %lld is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="169:33" pos:end="169:49"><expr pos:start="169:33" pos:end="169:49"><operator pos:start="169:33" pos:end="169:33">(</operator><name pos:start="169:34" pos:end="169:37">long</name> <name pos:start="169:39" pos:end="169:42">long</name><operator pos:start="169:43" pos:end="169:43">)</operator><name pos:start="169:44" pos:end="169:49">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="171:25" pos:end="171:33">return <expr pos:start="171:32" pos:end="171:32"><literal type="number" pos:start="171:32" pos:end="171:32">0</literal></expr>;</return>



		<if_stmt pos:start="175:17" pos:end="183:17"><if pos:start="175:17" pos:end="183:17">if <condition pos:start="175:20" pos:end="175:34">(<expr pos:start="175:21" pos:end="175:33"><name pos:start="175:21" pos:end="175:25">count</name> <operator pos:start="175:27" pos:end="175:27">&amp;</operator> <literal type="number" pos:start="175:29" pos:end="175:33">0x1ff</literal></expr>)</condition> <block pos:start="175:36" pos:end="183:17">{<block_content pos:start="177:25" pos:end="181:33">

			<expr_stmt pos:start="177:25" pos:end="179:39"><expr pos:start="177:25" pos:end="179:38"><call pos:start="177:25" pos:end="179:38"><name pos:start="177:25" pos:end="177:30">printf</name><argument_list pos:start="177:31" pos:end="179:38">(<argument pos:start="177:32" pos:end="177:65"><expr pos:start="177:32" pos:end="177:65"><literal type="string" pos:start="177:32" pos:end="177:65">"count %d is not sector aligned\n"</literal></expr></argument>,

				<argument pos:start="179:33" pos:end="179:37"><expr pos:start="179:33" pos:end="179:37"><name pos:start="179:33" pos:end="179:37">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="181:25" pos:end="181:33">return <expr pos:start="181:32" pos:end="181:32"><literal type="number" pos:start="181:32" pos:end="181:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="189:9" pos:end="189:41"><expr pos:start="189:9" pos:end="189:40"><name pos:start="189:9" pos:end="189:11">buf</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:40"><name pos:start="189:15" pos:end="189:27">qemu_io_alloc</name><argument_list pos:start="189:28" pos:end="189:40">(<argument pos:start="189:29" pos:end="189:33"><expr pos:start="189:29" pos:end="189:33"><name pos:start="189:29" pos:end="189:33">count</name></expr></argument>, <argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><literal type="number" pos:start="189:36" pos:end="189:39">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="193:9" pos:end="193:32"><expr pos:start="193:9" pos:end="193:31"><call pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:20">gettimeofday</name><argument_list pos:start="193:21" pos:end="193:31">(<argument pos:start="193:22" pos:end="193:24"><expr pos:start="193:22" pos:end="193:24"><operator pos:start="193:22" pos:end="193:22">&amp;</operator><name pos:start="193:23" pos:end="193:24">t1</name></expr></argument>, <argument pos:start="193:27" pos:end="193:30"><expr pos:start="193:27" pos:end="193:30"><name pos:start="193:27" pos:end="193:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="195:9" pos:end="201:58"><if pos:start="195:9" pos:end="197:59">if <condition pos:start="195:12" pos:end="195:18">(<expr pos:start="195:13" pos:end="195:17"><name pos:start="195:13" pos:end="195:17">pflag</name></expr>)</condition><block type="pseudo" pos:start="197:17" pos:end="197:59"><block_content pos:start="197:17" pos:end="197:59">

		<expr_stmt pos:start="197:17" pos:end="197:59"><expr pos:start="197:17" pos:end="197:58"><name pos:start="197:17" pos:end="197:19">cnt</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <call pos:start="197:23" pos:end="197:58"><name pos:start="197:23" pos:end="197:30">do_pread</name><argument_list pos:start="197:31" pos:end="197:58">(<argument pos:start="197:32" pos:end="197:34"><expr pos:start="197:32" pos:end="197:34"><name pos:start="197:32" pos:end="197:34">buf</name></expr></argument>, <argument pos:start="197:37" pos:end="197:42"><expr pos:start="197:37" pos:end="197:42"><name pos:start="197:37" pos:end="197:42">offset</name></expr></argument>, <argument pos:start="197:45" pos:end="197:49"><expr pos:start="197:45" pos:end="197:49"><name pos:start="197:45" pos:end="197:49">count</name></expr></argument>, <argument pos:start="197:52" pos:end="197:57"><expr pos:start="197:52" pos:end="197:57"><operator pos:start="197:52" pos:end="197:52">&amp;</operator><name pos:start="197:53" pos:end="197:57">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="199:9" pos:end="201:58">else<block type="pseudo" pos:start="201:17" pos:end="201:58"><block_content pos:start="201:17" pos:end="201:58">

		<expr_stmt pos:start="201:17" pos:end="201:58"><expr pos:start="201:17" pos:end="201:57"><name pos:start="201:17" pos:end="201:19">cnt</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <call pos:start="201:23" pos:end="201:57"><name pos:start="201:23" pos:end="201:29">do_read</name><argument_list pos:start="201:30" pos:end="201:57">(<argument pos:start="201:31" pos:end="201:33"><expr pos:start="201:31" pos:end="201:33"><name pos:start="201:31" pos:end="201:33">buf</name></expr></argument>, <argument pos:start="201:36" pos:end="201:41"><expr pos:start="201:36" pos:end="201:41"><name pos:start="201:36" pos:end="201:41">offset</name></expr></argument>, <argument pos:start="201:44" pos:end="201:48"><expr pos:start="201:44" pos:end="201:48"><name pos:start="201:44" pos:end="201:48">count</name></expr></argument>, <argument pos:start="201:51" pos:end="201:56"><expr pos:start="201:51" pos:end="201:56"><operator pos:start="201:51" pos:end="201:51">&amp;</operator><name pos:start="201:52" pos:end="201:56">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt pos:start="203:9" pos:end="203:32"><expr pos:start="203:9" pos:end="203:31"><call pos:start="203:9" pos:end="203:31"><name pos:start="203:9" pos:end="203:20">gettimeofday</name><argument_list pos:start="203:21" pos:end="203:31">(<argument pos:start="203:22" pos:end="203:24"><expr pos:start="203:22" pos:end="203:24"><operator pos:start="203:22" pos:end="203:22">&amp;</operator><name pos:start="203:23" pos:end="203:24">t2</name></expr></argument>, <argument pos:start="203:27" pos:end="203:30"><expr pos:start="203:27" pos:end="203:30"><name pos:start="203:27" pos:end="203:30">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:20">(<expr pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:15">cnt</name> <operator pos:start="207:17" pos:end="207:17">&lt;</operator> <literal type="number" pos:start="207:19" pos:end="207:19">0</literal></expr>)</condition> <block pos:start="207:22" pos:end="213:9">{<block_content pos:start="209:17" pos:end="211:25">

		<expr_stmt pos:start="209:17" pos:end="209:60"><expr pos:start="209:17" pos:end="209:59"><call pos:start="209:17" pos:end="209:59"><name pos:start="209:17" pos:end="209:22">printf</name><argument_list pos:start="209:23" pos:end="209:59">(<argument pos:start="209:24" pos:end="209:42"><expr pos:start="209:24" pos:end="209:42"><literal type="string" pos:start="209:24" pos:end="209:42">"read failed: %s\n"</literal></expr></argument>, <argument pos:start="209:45" pos:end="209:58"><expr pos:start="209:45" pos:end="209:58"><call pos:start="209:45" pos:end="209:58"><name pos:start="209:45" pos:end="209:52">strerror</name><argument_list pos:start="209:53" pos:end="209:58">(<argument pos:start="209:54" pos:end="209:57"><expr pos:start="209:54" pos:end="209:57"><operator pos:start="209:54" pos:end="209:54">-</operator><name pos:start="209:55" pos:end="209:57">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="211:17" pos:end="211:25">return <expr pos:start="211:24" pos:end="211:24"><literal type="number" pos:start="211:24" pos:end="211:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="217:9" pos:end="235:9"><if pos:start="217:9" pos:end="235:9">if <condition pos:start="217:12" pos:end="217:18">(<expr pos:start="217:13" pos:end="217:17"><name pos:start="217:13" pos:end="217:17">Pflag</name></expr>)</condition> <block pos:start="217:20" pos:end="235:9">{<block_content pos:start="219:17" pos:end="233:30">

		<decl_stmt pos:start="219:17" pos:end="219:54"><decl pos:start="219:17" pos:end="219:53"><type pos:start="219:17" pos:end="219:21"><name pos:start="219:17" pos:end="219:20">void</name><modifier pos:start="219:21" pos:end="219:21">*</modifier></type> <name pos:start="219:23" pos:end="219:29">cmp_buf</name> <init pos:start="219:31" pos:end="219:53">= <expr pos:start="219:33" pos:end="219:53"><call pos:start="219:33" pos:end="219:53"><name pos:start="219:33" pos:end="219:38">malloc</name><argument_list pos:start="219:39" pos:end="219:53">(<argument pos:start="219:40" pos:end="219:52"><expr pos:start="219:40" pos:end="219:52"><name pos:start="219:40" pos:end="219:52">pattern_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="221:17" pos:end="221:56"><expr pos:start="221:17" pos:end="221:55"><call pos:start="221:17" pos:end="221:55"><name pos:start="221:17" pos:end="221:22">memset</name><argument_list pos:start="221:23" pos:end="221:55">(<argument pos:start="221:24" pos:end="221:30"><expr pos:start="221:24" pos:end="221:30"><name pos:start="221:24" pos:end="221:30">cmp_buf</name></expr></argument>, <argument pos:start="221:33" pos:end="221:39"><expr pos:start="221:33" pos:end="221:39"><name pos:start="221:33" pos:end="221:39">pattern</name></expr></argument>, <argument pos:start="221:42" pos:end="221:54"><expr pos:start="221:42" pos:end="221:54"><name pos:start="221:42" pos:end="221:54">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="223:17" pos:end="231:17"><if pos:start="223:17" pos:end="231:17">if <condition pos:start="223:20" pos:end="223:73">(<expr pos:start="223:21" pos:end="223:72"><call pos:start="223:21" pos:end="223:72"><name pos:start="223:21" pos:end="223:26">memcmp</name><argument_list pos:start="223:27" pos:end="223:72">(<argument pos:start="223:28" pos:end="223:47"><expr pos:start="223:28" pos:end="223:47"><name pos:start="223:28" pos:end="223:30">buf</name> <operator pos:start="223:32" pos:end="223:32">+</operator> <name pos:start="223:34" pos:end="223:47">pattern_offset</name></expr></argument>, <argument pos:start="223:50" pos:end="223:56"><expr pos:start="223:50" pos:end="223:56"><name pos:start="223:50" pos:end="223:56">cmp_buf</name></expr></argument>, <argument pos:start="223:59" pos:end="223:71"><expr pos:start="223:59" pos:end="223:71"><name pos:start="223:59" pos:end="223:71">pattern_count</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:75" pos:end="231:17">{<block_content pos:start="225:25" pos:end="229:84">

			<expr_stmt pos:start="225:25" pos:end="229:84"><expr pos:start="225:25" pos:end="229:83"><call pos:start="225:25" pos:end="229:83"><name pos:start="225:25" pos:end="225:30">printf</name><argument_list pos:start="225:31" pos:end="229:83">(<argument pos:start="225:32" pos:end="227:44"><expr pos:start="225:32" pos:end="227:44"><literal type="string" pos:start="225:32" pos:end="225:77">"Pattern verification failed at offset %lld, "</literal>

				<literal type="string" pos:start="227:33" pos:end="227:44">"%d bytes\n"</literal></expr></argument>,

				<argument pos:start="229:33" pos:end="229:67"><expr pos:start="229:33" pos:end="229:67"><operator pos:start="229:33" pos:end="229:33">(</operator><name pos:start="229:34" pos:end="229:37">long</name> <name pos:start="229:39" pos:end="229:42">long</name><operator pos:start="229:43" pos:end="229:43">)</operator> <name pos:start="229:45" pos:end="229:50">offset</name> <operator pos:start="229:52" pos:end="229:52">+</operator> <name pos:start="229:54" pos:end="229:67">pattern_offset</name></expr></argument>, <argument pos:start="229:70" pos:end="229:82"><expr pos:start="229:70" pos:end="229:82"><name pos:start="229:70" pos:end="229:82">pattern_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="233:17" pos:end="233:30"><expr pos:start="233:17" pos:end="233:29"><call pos:start="233:17" pos:end="233:29"><name pos:start="233:17" pos:end="233:20">free</name><argument_list pos:start="233:21" pos:end="233:29">(<argument pos:start="233:22" pos:end="233:28"><expr pos:start="233:22" pos:end="233:28"><name pos:start="233:22" pos:end="233:28">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="239:9" pos:end="241:25"><if pos:start="239:9" pos:end="241:25">if <condition pos:start="239:12" pos:end="239:18">(<expr pos:start="239:13" pos:end="239:17"><name pos:start="239:13" pos:end="239:17">qflag</name></expr>)</condition><block type="pseudo" pos:start="241:17" pos:end="241:25"><block_content pos:start="241:17" pos:end="241:25">

		<return pos:start="241:17" pos:end="241:25">return <expr pos:start="241:24" pos:end="241:24"><literal type="number" pos:start="241:24" pos:end="241:24">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="245:9" pos:end="247:48"><if pos:start="245:9" pos:end="247:48">if <condition pos:start="245:12" pos:end="245:18">(<expr pos:start="245:13" pos:end="245:17"><name pos:start="245:13" pos:end="245:17">vflag</name></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:48"><block_content pos:start="247:17" pos:end="247:48">

		<expr_stmt pos:start="247:17" pos:end="247:48"><expr pos:start="247:17" pos:end="247:47"><call pos:start="247:17" pos:end="247:47"><name pos:start="247:17" pos:end="247:27">dump_buffer</name><argument_list pos:start="247:28" pos:end="247:47">(<argument pos:start="247:29" pos:end="247:31"><expr pos:start="247:29" pos:end="247:31"><name pos:start="247:29" pos:end="247:31">buf</name></expr></argument>, <argument pos:start="247:34" pos:end="247:39"><expr pos:start="247:34" pos:end="247:39"><name pos:start="247:34" pos:end="247:39">offset</name></expr></argument>, <argument pos:start="247:42" pos:end="247:46"><expr pos:start="247:42" pos:end="247:46"><name pos:start="247:42" pos:end="247:46">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="251:9" pos:end="251:64">/* Finally, report back -- -C gives a parsable format */</comment>

	<expr_stmt pos:start="253:9" pos:end="253:26"><expr pos:start="253:9" pos:end="253:25"><name pos:start="253:9" pos:end="253:10">t2</name> <operator pos:start="253:12" pos:end="253:12">=</operator> <call pos:start="253:14" pos:end="253:25"><name pos:start="253:14" pos:end="253:17">tsub</name><argument_list pos:start="253:18" pos:end="253:25">(<argument pos:start="253:19" pos:end="253:20"><expr pos:start="253:19" pos:end="253:20"><name pos:start="253:19" pos:end="253:20">t2</name></expr></argument>, <argument pos:start="253:23" pos:end="253:24"><expr pos:start="253:23" pos:end="253:24"><name pos:start="253:23" pos:end="253:24">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="255:9" pos:end="255:68"><expr pos:start="255:9" pos:end="255:67"><call pos:start="255:9" pos:end="255:67"><name pos:start="255:9" pos:end="255:20">print_report</name><argument_list pos:start="255:21" pos:end="255:67">(<argument pos:start="255:22" pos:end="255:27"><expr pos:start="255:22" pos:end="255:27"><literal type="string" pos:start="255:22" pos:end="255:27">"read"</literal></expr></argument>, <argument pos:start="255:30" pos:end="255:32"><expr pos:start="255:30" pos:end="255:32"><operator pos:start="255:30" pos:end="255:30">&amp;</operator><name pos:start="255:31" pos:end="255:32">t2</name></expr></argument>, <argument pos:start="255:35" pos:end="255:40"><expr pos:start="255:35" pos:end="255:40"><name pos:start="255:35" pos:end="255:40">offset</name></expr></argument>, <argument pos:start="255:43" pos:end="255:47"><expr pos:start="255:43" pos:end="255:47"><name pos:start="255:43" pos:end="255:47">count</name></expr></argument>, <argument pos:start="255:50" pos:end="255:54"><expr pos:start="255:50" pos:end="255:54"><name pos:start="255:50" pos:end="255:54">total</name></expr></argument>, <argument pos:start="255:57" pos:end="255:59"><expr pos:start="255:57" pos:end="255:59"><name pos:start="255:57" pos:end="255:59">cnt</name></expr></argument>, <argument pos:start="255:62" pos:end="255:66"><expr pos:start="255:62" pos:end="255:66"><name pos:start="255:62" pos:end="255:66">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="259:9" pos:end="259:26"><expr pos:start="259:9" pos:end="259:25"><call pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:20">qemu_io_free</name><argument_list pos:start="259:21" pos:end="259:25">(<argument pos:start="259:22" pos:end="259:24"><expr pos:start="259:22" pos:end="259:24"><name pos:start="259:22" pos:end="259:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<return pos:start="263:9" pos:end="263:17">return <expr pos:start="263:16" pos:end="263:16"><literal type="number" pos:start="263:16" pos:end="263:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
