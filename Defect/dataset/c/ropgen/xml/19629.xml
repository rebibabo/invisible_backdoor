<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19629.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int32_t</name></type> <name pos:start="1:16" pos:end="1:25">parse_gain</name><parameter_list pos:start="1:26" pos:end="1:43">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">gain</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:41">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:18">fraction</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type>  <name pos:start="7:10" pos:end="7:14">scale</name> <init pos:start="7:16" pos:end="7:22">= <expr pos:start="7:18" pos:end="7:22"><literal type="number" pos:start="7:18" pos:end="7:22">10000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int32_t</name></type> <name pos:start="9:13" pos:end="9:14">mb</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">db</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:25"><if pos:start="15:5" pos:end="17:25">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">gain</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:25"><block_content pos:start="17:9" pos:end="17:25">

        <return pos:start="17:9" pos:end="17:25">return <expr pos:start="17:16" pos:end="17:24"><name pos:start="17:16" pos:end="17:24">INT32_MIN</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:32"><expr pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:8">gain</name> <operator pos:start="21:10" pos:end="21:11">+=</operator> <call pos:start="21:13" pos:end="21:31"><name pos:start="21:13" pos:end="21:18">strspn</name><argument_list pos:start="21:19" pos:end="21:31">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">gain</name></expr></argument>, <argument pos:start="21:26" pos:end="21:30"><expr pos:start="21:26" pos:end="21:30"><literal type="string" pos:start="21:26" pos:end="21:30">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:6">db</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:35"><name pos:start="25:10" pos:end="25:15">strtol</name><argument_list pos:start="25:16" pos:end="25:35">(<argument pos:start="25:17" pos:end="25:20"><expr pos:start="25:17" pos:end="25:20"><name pos:start="25:17" pos:end="25:20">gain</name></expr></argument>, <argument pos:start="25:23" pos:end="25:31"><expr pos:start="25:23" pos:end="25:31"><operator pos:start="25:23" pos:end="25:23">&amp;</operator><name pos:start="25:24" pos:end="25:31">fraction</name></expr></argument>, <argument pos:start="25:34" pos:end="25:34"><expr pos:start="25:34" pos:end="25:34"><literal type="number" pos:start="25:34" pos:end="25:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="39:5">if <condition pos:start="27:8" pos:end="27:27">(<expr pos:start="27:9" pos:end="27:26"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:17">fraction</name><operator pos:start="27:18" pos:end="27:19">++</operator> <operator pos:start="27:21" pos:end="27:22">==</operator> <literal type="char" pos:start="27:24" pos:end="27:26">'.'</literal></expr>)</condition> <block pos:start="27:29" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:9">

        <while pos:start="29:9" pos:end="37:9">while <condition pos:start="29:15" pos:end="29:46">(<expr pos:start="29:16" pos:end="29:45"><call pos:start="29:16" pos:end="29:36"><name pos:start="29:16" pos:end="29:25">av_isdigit</name><argument_list pos:start="29:26" pos:end="29:36">(<argument pos:start="29:27" pos:end="29:35"><expr pos:start="29:27" pos:end="29:35"><operator pos:start="29:27" pos:end="29:27">*</operator><name pos:start="29:28" pos:end="29:35">fraction</name></expr></argument>)</argument_list></call> <operator pos:start="29:38" pos:end="29:39">&amp;&amp;</operator> <name pos:start="29:41" pos:end="29:45">scale</name></expr>)</condition> <block pos:start="29:48" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:23">

            <expr_stmt pos:start="31:13" pos:end="31:44"><expr pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:14">mb</name> <operator pos:start="31:16" pos:end="31:17">+=</operator> <name pos:start="31:19" pos:end="31:23">scale</name> <operator pos:start="31:25" pos:end="31:25">*</operator> <operator pos:start="31:27" pos:end="31:27">(</operator><operator pos:start="31:28" pos:end="31:28">*</operator><name pos:start="31:29" pos:end="31:36">fraction</name> <operator pos:start="31:38" pos:end="31:38">-</operator> <literal type="char" pos:start="31:40" pos:end="31:42">'0'</literal><operator pos:start="31:43" pos:end="31:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:24"><expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:17">scale</name> <operator pos:start="33:19" pos:end="33:20">/=</operator> <literal type="number" pos:start="33:22" pos:end="33:23">10</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:23"><expr pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:20">fraction</name><operator pos:start="35:21" pos:end="35:22">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="45:25"><if pos:start="43:5" pos:end="45:25">if <condition pos:start="43:8" pos:end="43:44">(<expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">abs</name><argument_list pos:start="43:12" pos:end="43:15">(<argument pos:start="43:13" pos:end="43:14"><expr pos:start="43:13" pos:end="43:14"><name pos:start="43:13" pos:end="43:14">db</name></expr></argument>)</argument_list></call> <operator pos:start="43:17" pos:end="43:17">&gt;</operator> <operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:28">INT32_MAX</name> <operator pos:start="43:30" pos:end="43:30">-</operator> <name pos:start="43:32" pos:end="43:33">mb</name><operator pos:start="43:34" pos:end="43:34">)</operator> <operator pos:start="43:36" pos:end="43:36">/</operator> <literal type="number" pos:start="43:38" pos:end="43:43">100000</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:25"><block_content pos:start="45:9" pos:end="45:25">

        <return pos:start="45:9" pos:end="45:25">return <expr pos:start="45:16" pos:end="45:24"><name pos:start="45:16" pos:end="45:24">INT32_MIN</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="49:5" pos:end="49:41">return <expr pos:start="49:12" pos:end="49:40"><name pos:start="49:12" pos:end="49:13">db</name> <operator pos:start="49:15" pos:end="49:15">*</operator> <literal type="number" pos:start="49:17" pos:end="49:24">100000</literal> <operator pos:start="49:24" pos:end="49:24">+</operator> <call pos:start="49:26" pos:end="49:35"><name pos:start="49:26" pos:end="49:31">FFSIGN</name><argument_list pos:start="49:32" pos:end="49:35">(<argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">db</name></expr></argument>)</argument_list></call> <operator pos:start="49:37" pos:end="49:37">*</operator> <name pos:start="49:39" pos:end="49:40">mb</name></expr>;</return>

</block_content>}</block></function>
</unit>
