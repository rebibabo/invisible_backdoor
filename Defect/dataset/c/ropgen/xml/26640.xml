<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26640.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">tricore_testboard_init</name><parameter_list pos:start="1:35" pos:end="1:71">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:47">MachineState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">machine</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:70">board_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">TriCoreCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">CPUTriCoreState</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">env</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">sysmem</name> <init pos:start="11:26" pos:end="11:46">= <expr pos:start="11:28" pos:end="11:46"><call pos:start="11:28" pos:end="11:46"><name pos:start="11:28" pos:end="11:44">get_system_memory</name><argument_list pos:start="11:45" pos:end="11:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:52"><decl pos:start="13:5" pos:end="13:51"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:26">ext_cram</name> <init pos:start="13:28" pos:end="13:51">= <expr pos:start="13:30" pos:end="13:51"><call pos:start="13:30" pos:end="13:51"><name pos:start="13:30" pos:end="13:34">g_new</name><argument_list pos:start="13:35" pos:end="13:51">(<argument pos:start="13:36" pos:end="13:47"><expr pos:start="13:36" pos:end="13:47"><name pos:start="13:36" pos:end="13:47">MemoryRegion</name></expr></argument>, <argument pos:start="13:50" pos:end="13:50"><expr pos:start="13:50" pos:end="13:50"><literal type="number" pos:start="13:50" pos:end="13:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:26">ext_dram</name> <init pos:start="15:28" pos:end="15:51">= <expr pos:start="15:30" pos:end="15:51"><call pos:start="15:30" pos:end="15:51"><name pos:start="15:30" pos:end="15:34">g_new</name><argument_list pos:start="15:35" pos:end="15:51">(<argument pos:start="15:36" pos:end="15:47"><expr pos:start="15:36" pos:end="15:47"><name pos:start="15:36" pos:end="15:47">MemoryRegion</name></expr></argument>, <argument pos:start="15:50" pos:end="15:50"><expr pos:start="15:50" pos:end="15:50"><literal type="number" pos:start="15:50" pos:end="15:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:51"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:26">int_cram</name> <init pos:start="17:28" pos:end="17:51">= <expr pos:start="17:30" pos:end="17:51"><call pos:start="17:30" pos:end="17:51"><name pos:start="17:30" pos:end="17:34">g_new</name><argument_list pos:start="17:35" pos:end="17:51">(<argument pos:start="17:36" pos:end="17:47"><expr pos:start="17:36" pos:end="17:47"><name pos:start="17:36" pos:end="17:47">MemoryRegion</name></expr></argument>, <argument pos:start="17:50" pos:end="17:50"><expr pos:start="17:50" pos:end="17:50"><literal type="number" pos:start="17:50" pos:end="17:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:26">int_dram</name> <init pos:start="19:28" pos:end="19:51">= <expr pos:start="19:30" pos:end="19:51"><call pos:start="19:30" pos:end="19:51"><name pos:start="19:30" pos:end="19:34">g_new</name><argument_list pos:start="19:35" pos:end="19:51">(<argument pos:start="19:36" pos:end="19:47"><expr pos:start="19:36" pos:end="19:47"><name pos:start="19:36" pos:end="19:47">MemoryRegion</name></expr></argument>, <argument pos:start="19:50" pos:end="19:50"><expr pos:start="19:50" pos:end="19:50"><literal type="number" pos:start="19:50" pos:end="19:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:26">pcp_data</name> <init pos:start="21:28" pos:end="21:51">= <expr pos:start="21:30" pos:end="21:51"><call pos:start="21:30" pos:end="21:51"><name pos:start="21:30" pos:end="21:34">g_new</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:47">MemoryRegion</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:52"><decl pos:start="23:5" pos:end="23:51"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:26">pcp_text</name> <init pos:start="23:28" pos:end="23:51">= <expr pos:start="23:30" pos:end="23:51"><call pos:start="23:30" pos:end="23:51"><name pos:start="23:30" pos:end="23:34">g_new</name><argument_list pos:start="23:35" pos:end="23:51">(<argument pos:start="23:36" pos:end="23:47"><expr pos:start="23:36" pos:end="23:47"><name pos:start="23:36" pos:end="23:47">MemoryRegion</name></expr></argument>, <argument pos:start="23:50" pos:end="23:50"><expr pos:start="23:50" pos:end="23:50"><literal type="number" pos:start="23:50" pos:end="23:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:27"><name pos:start="27:10" pos:end="27:16">machine</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:27">cpu_model</name></name></expr>)</condition> <block pos:start="27:30" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:38">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:15">machine</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:26">cpu_model</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <literal type="string" pos:start="29:30" pos:end="29:37">"tc1796"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:7">cpu</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:46"><name pos:start="33:11" pos:end="33:26">cpu_tricore_init</name><argument_list pos:start="33:27" pos:end="33:46">(<argument pos:start="33:28" pos:end="33:45"><expr pos:start="33:28" pos:end="33:45"><name pos:start="33:28" pos:end="33:45"><name pos:start="33:28" pos:end="33:34">machine</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:45">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:13">(<expr pos:start="35:9" pos:end="35:12"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">cpu</name></expr>)</condition> <block pos:start="35:15" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:16">

        <expr_stmt pos:start="37:9" pos:end="37:54"><expr pos:start="37:9" pos:end="37:53"><call pos:start="37:9" pos:end="37:53"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:53">(<argument pos:start="37:22" pos:end="37:52"><expr pos:start="37:22" pos:end="37:52"><literal type="string" pos:start="37:22" pos:end="37:52">"Unable to find CPU definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><call pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">exit</name><argument_list pos:start="39:13" pos:end="39:15">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:20"><expr pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:7">env</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <operator pos:start="43:11" pos:end="43:11">&amp;</operator><name pos:start="43:12" pos:end="43:19"><name pos:start="43:12" pos:end="43:14">cpu</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:93"><expr pos:start="45:5" pos:end="45:92"><call pos:start="45:5" pos:end="45:92"><name pos:start="45:5" pos:end="45:26">memory_region_init_ram</name><argument_list pos:start="45:27" pos:end="45:92">(<argument pos:start="45:28" pos:end="45:35"><expr pos:start="45:28" pos:end="45:35"><name pos:start="45:28" pos:end="45:35">ext_cram</name></expr></argument>, <argument pos:start="45:38" pos:end="45:41"><expr pos:start="45:38" pos:end="45:41"><name pos:start="45:38" pos:end="45:41">NULL</name></expr></argument>, <argument pos:start="45:44" pos:end="45:64"><expr pos:start="45:44" pos:end="45:64"><literal type="string" pos:start="45:44" pos:end="45:64">"powerlink_ext_c.ram"</literal></expr></argument>, <argument pos:start="45:67" pos:end="45:77"><expr pos:start="45:67" pos:end="45:77"><literal type="number" pos:start="45:67" pos:end="45:67">2</literal><operator pos:start="45:68" pos:end="45:68">*</operator><literal type="number" pos:start="45:69" pos:end="45:72">1024</literal><operator pos:start="45:73" pos:end="45:73">*</operator><literal type="number" pos:start="45:74" pos:end="45:77">1024</literal></expr></argument>, <argument pos:start="45:80" pos:end="45:91"><expr pos:start="45:80" pos:end="45:91"><operator pos:start="45:80" pos:end="45:80">&amp;</operator><name pos:start="45:81" pos:end="45:91">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><call pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:31">vmstate_register_ram_global</name><argument_list pos:start="47:32" pos:end="47:41">(<argument pos:start="47:33" pos:end="47:40"><expr pos:start="47:33" pos:end="47:40"><name pos:start="47:33" pos:end="47:40">ext_cram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:93"><expr pos:start="49:5" pos:end="49:92"><call pos:start="49:5" pos:end="49:92"><name pos:start="49:5" pos:end="49:26">memory_region_init_ram</name><argument_list pos:start="49:27" pos:end="49:92">(<argument pos:start="49:28" pos:end="49:35"><expr pos:start="49:28" pos:end="49:35"><name pos:start="49:28" pos:end="49:35">ext_dram</name></expr></argument>, <argument pos:start="49:38" pos:end="49:41"><expr pos:start="49:38" pos:end="49:41"><name pos:start="49:38" pos:end="49:41">NULL</name></expr></argument>, <argument pos:start="49:44" pos:end="49:64"><expr pos:start="49:44" pos:end="49:64"><literal type="string" pos:start="49:44" pos:end="49:64">"powerlink_ext_d.ram"</literal></expr></argument>, <argument pos:start="49:67" pos:end="49:77"><expr pos:start="49:67" pos:end="49:77"><literal type="number" pos:start="49:67" pos:end="49:67">4</literal><operator pos:start="49:68" pos:end="49:68">*</operator><literal type="number" pos:start="49:69" pos:end="49:72">1024</literal><operator pos:start="49:73" pos:end="49:73">*</operator><literal type="number" pos:start="49:74" pos:end="49:77">1024</literal></expr></argument>, <argument pos:start="49:80" pos:end="49:91"><expr pos:start="49:80" pos:end="49:91"><operator pos:start="49:80" pos:end="49:80">&amp;</operator><name pos:start="49:81" pos:end="49:91">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><call pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:31">vmstate_register_ram_global</name><argument_list pos:start="51:32" pos:end="51:41">(<argument pos:start="51:33" pos:end="51:40"><expr pos:start="51:33" pos:end="51:40"><name pos:start="51:33" pos:end="51:40">ext_dram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:89"><expr pos:start="53:5" pos:end="53:88"><call pos:start="53:5" pos:end="53:88"><name pos:start="53:5" pos:end="53:26">memory_region_init_ram</name><argument_list pos:start="53:27" pos:end="53:88">(<argument pos:start="53:28" pos:end="53:35"><expr pos:start="53:28" pos:end="53:35"><name pos:start="53:28" pos:end="53:35">int_cram</name></expr></argument>, <argument pos:start="53:38" pos:end="53:41"><expr pos:start="53:38" pos:end="53:41"><name pos:start="53:38" pos:end="53:41">NULL</name></expr></argument>, <argument pos:start="53:44" pos:end="53:64"><expr pos:start="53:44" pos:end="53:64"><literal type="string" pos:start="53:44" pos:end="53:64">"powerlink_int_c.ram"</literal></expr></argument>, <argument pos:start="53:67" pos:end="53:73"><expr pos:start="53:67" pos:end="53:73"><literal type="number" pos:start="53:67" pos:end="53:68">48</literal><operator pos:start="53:69" pos:end="53:69">*</operator><literal type="number" pos:start="53:70" pos:end="53:73">1024</literal></expr></argument>, <argument pos:start="53:76" pos:end="53:87"><expr pos:start="53:76" pos:end="53:87"><operator pos:start="53:76" pos:end="53:76">&amp;</operator><name pos:start="53:77" pos:end="53:87">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:42"><expr pos:start="55:5" pos:end="55:41"><call pos:start="55:5" pos:end="55:41"><name pos:start="55:5" pos:end="55:31">vmstate_register_ram_global</name><argument_list pos:start="55:32" pos:end="55:41">(<argument pos:start="55:33" pos:end="55:40"><expr pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:40">int_cram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:89"><expr pos:start="57:5" pos:end="57:88"><call pos:start="57:5" pos:end="57:88"><name pos:start="57:5" pos:end="57:26">memory_region_init_ram</name><argument_list pos:start="57:27" pos:end="57:88">(<argument pos:start="57:28" pos:end="57:35"><expr pos:start="57:28" pos:end="57:35"><name pos:start="57:28" pos:end="57:35">int_dram</name></expr></argument>, <argument pos:start="57:38" pos:end="57:41"><expr pos:start="57:38" pos:end="57:41"><name pos:start="57:38" pos:end="57:41">NULL</name></expr></argument>, <argument pos:start="57:44" pos:end="57:64"><expr pos:start="57:44" pos:end="57:64"><literal type="string" pos:start="57:44" pos:end="57:64">"powerlink_int_d.ram"</literal></expr></argument>, <argument pos:start="57:67" pos:end="57:73"><expr pos:start="57:67" pos:end="57:73"><literal type="number" pos:start="57:67" pos:end="57:68">48</literal><operator pos:start="57:69" pos:end="57:69">*</operator><literal type="number" pos:start="57:70" pos:end="57:73">1024</literal></expr></argument>, <argument pos:start="57:76" pos:end="57:87"><expr pos:start="57:76" pos:end="57:87"><operator pos:start="57:76" pos:end="57:76">&amp;</operator><name pos:start="57:77" pos:end="57:87">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><call pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:31">vmstate_register_ram_global</name><argument_list pos:start="59:32" pos:end="59:41">(<argument pos:start="59:33" pos:end="59:40"><expr pos:start="59:33" pos:end="59:40"><name pos:start="59:33" pos:end="59:40">int_dram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:92"><expr pos:start="61:5" pos:end="61:91"><call pos:start="61:5" pos:end="61:91"><name pos:start="61:5" pos:end="61:26">memory_region_init_ram</name><argument_list pos:start="61:27" pos:end="61:91">(<argument pos:start="61:28" pos:end="61:35"><expr pos:start="61:28" pos:end="61:35"><name pos:start="61:28" pos:end="61:35">pcp_data</name></expr></argument>, <argument pos:start="61:38" pos:end="61:41"><expr pos:start="61:38" pos:end="61:41"><name pos:start="61:38" pos:end="61:41">NULL</name></expr></argument>, <argument pos:start="61:44" pos:end="61:67"><expr pos:start="61:44" pos:end="61:67"><literal type="string" pos:start="61:44" pos:end="61:67">"powerlink_pcp_data.ram"</literal></expr></argument>, <argument pos:start="61:70" pos:end="61:76"><expr pos:start="61:70" pos:end="61:76"><literal type="number" pos:start="61:70" pos:end="61:71">16</literal><operator pos:start="61:72" pos:end="61:72">*</operator><literal type="number" pos:start="61:73" pos:end="61:76">1024</literal></expr></argument>, <argument pos:start="61:79" pos:end="61:90"><expr pos:start="61:79" pos:end="61:90"><operator pos:start="61:79" pos:end="61:79">&amp;</operator><name pos:start="61:80" pos:end="61:90">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><call pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:31">vmstate_register_ram_global</name><argument_list pos:start="63:32" pos:end="63:41">(<argument pos:start="63:33" pos:end="63:40"><expr pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:40">pcp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:92"><expr pos:start="65:5" pos:end="65:91"><call pos:start="65:5" pos:end="65:91"><name pos:start="65:5" pos:end="65:26">memory_region_init_ram</name><argument_list pos:start="65:27" pos:end="65:91">(<argument pos:start="65:28" pos:end="65:35"><expr pos:start="65:28" pos:end="65:35"><name pos:start="65:28" pos:end="65:35">pcp_text</name></expr></argument>, <argument pos:start="65:38" pos:end="65:41"><expr pos:start="65:38" pos:end="65:41"><name pos:start="65:38" pos:end="65:41">NULL</name></expr></argument>, <argument pos:start="65:44" pos:end="65:67"><expr pos:start="65:44" pos:end="65:67"><literal type="string" pos:start="65:44" pos:end="65:67">"powerlink_pcp_text.ram"</literal></expr></argument>, <argument pos:start="65:70" pos:end="65:76"><expr pos:start="65:70" pos:end="65:76"><literal type="number" pos:start="65:70" pos:end="65:71">32</literal><operator pos:start="65:72" pos:end="65:72">*</operator><literal type="number" pos:start="65:73" pos:end="65:76">1024</literal></expr></argument>, <argument pos:start="65:79" pos:end="65:90"><expr pos:start="65:79" pos:end="65:90"><operator pos:start="65:79" pos:end="65:79">&amp;</operator><name pos:start="65:80" pos:end="65:90">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><call pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:31">vmstate_register_ram_global</name><argument_list pos:start="67:32" pos:end="67:41">(<argument pos:start="67:33" pos:end="67:40"><expr pos:start="67:33" pos:end="67:40"><name pos:start="67:33" pos:end="67:40">pcp_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:62"><expr pos:start="71:5" pos:end="71:61"><call pos:start="71:5" pos:end="71:61"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="71:61">(<argument pos:start="71:33" pos:end="71:38"><expr pos:start="71:33" pos:end="71:38"><name pos:start="71:33" pos:end="71:38">sysmem</name></expr></argument>, <argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><literal type="number" pos:start="71:41" pos:end="71:50">0x80000000</literal></expr></argument>, <argument pos:start="71:53" pos:end="71:60"><expr pos:start="71:53" pos:end="71:60"><name pos:start="71:53" pos:end="71:60">ext_cram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:62"><expr pos:start="73:5" pos:end="73:61"><call pos:start="73:5" pos:end="73:61"><name pos:start="73:5" pos:end="73:31">memory_region_add_subregion</name><argument_list pos:start="73:32" pos:end="73:61">(<argument pos:start="73:33" pos:end="73:38"><expr pos:start="73:33" pos:end="73:38"><name pos:start="73:33" pos:end="73:38">sysmem</name></expr></argument>, <argument pos:start="73:41" pos:end="73:50"><expr pos:start="73:41" pos:end="73:50"><literal type="number" pos:start="73:41" pos:end="73:50">0xa1000000</literal></expr></argument>, <argument pos:start="73:53" pos:end="73:60"><expr pos:start="73:53" pos:end="73:60"><name pos:start="73:53" pos:end="73:60">ext_dram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:62"><expr pos:start="75:5" pos:end="75:61"><call pos:start="75:5" pos:end="75:61"><name pos:start="75:5" pos:end="75:31">memory_region_add_subregion</name><argument_list pos:start="75:32" pos:end="75:61">(<argument pos:start="75:33" pos:end="75:38"><expr pos:start="75:33" pos:end="75:38"><name pos:start="75:33" pos:end="75:38">sysmem</name></expr></argument>, <argument pos:start="75:41" pos:end="75:50"><expr pos:start="75:41" pos:end="75:50"><literal type="number" pos:start="75:41" pos:end="75:50">0xd4000000</literal></expr></argument>, <argument pos:start="75:53" pos:end="75:60"><expr pos:start="75:53" pos:end="75:60"><name pos:start="75:53" pos:end="75:60">int_cram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:62"><expr pos:start="77:5" pos:end="77:61"><call pos:start="77:5" pos:end="77:61"><name pos:start="77:5" pos:end="77:31">memory_region_add_subregion</name><argument_list pos:start="77:32" pos:end="77:61">(<argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><name pos:start="77:33" pos:end="77:38">sysmem</name></expr></argument>, <argument pos:start="77:41" pos:end="77:50"><expr pos:start="77:41" pos:end="77:50"><literal type="number" pos:start="77:41" pos:end="77:50">0xd0000000</literal></expr></argument>, <argument pos:start="77:53" pos:end="77:60"><expr pos:start="77:53" pos:end="77:60"><name pos:start="77:53" pos:end="77:60">int_dram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:62"><expr pos:start="79:5" pos:end="79:61"><call pos:start="79:5" pos:end="79:61"><name pos:start="79:5" pos:end="79:31">memory_region_add_subregion</name><argument_list pos:start="79:32" pos:end="79:61">(<argument pos:start="79:33" pos:end="79:38"><expr pos:start="79:33" pos:end="79:38"><name pos:start="79:33" pos:end="79:38">sysmem</name></expr></argument>, <argument pos:start="79:41" pos:end="79:50"><expr pos:start="79:41" pos:end="79:50"><literal type="number" pos:start="79:41" pos:end="79:50">0xf0050000</literal></expr></argument>, <argument pos:start="79:53" pos:end="79:60"><expr pos:start="79:53" pos:end="79:60"><name pos:start="79:53" pos:end="79:60">pcp_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:62"><expr pos:start="81:5" pos:end="81:61"><call pos:start="81:5" pos:end="81:61"><name pos:start="81:5" pos:end="81:31">memory_region_add_subregion</name><argument_list pos:start="81:32" pos:end="81:61">(<argument pos:start="81:33" pos:end="81:38"><expr pos:start="81:33" pos:end="81:38"><name pos:start="81:33" pos:end="81:38">sysmem</name></expr></argument>, <argument pos:start="81:41" pos:end="81:50"><expr pos:start="81:41" pos:end="81:50"><literal type="number" pos:start="81:41" pos:end="81:50">0xf0060000</literal></expr></argument>, <argument pos:start="81:53" pos:end="81:60"><expr pos:start="81:53" pos:end="81:60"><name pos:start="81:53" pos:end="81:60">pcp_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:28"><name pos:start="85:5" pos:end="85:19">tricoretb_binfo</name><operator pos:start="85:20" pos:end="85:20">.</operator><name pos:start="85:21" pos:end="85:28">ram_size</name></name> <operator pos:start="85:30" pos:end="85:30">=</operator> <name pos:start="85:32" pos:end="85:48"><name pos:start="85:32" pos:end="85:38">machine</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:48">ram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:63"><expr pos:start="87:5" pos:end="87:62"><name pos:start="87:5" pos:end="87:35"><name pos:start="87:5" pos:end="87:19">tricoretb_binfo</name><operator pos:start="87:20" pos:end="87:20">.</operator><name pos:start="87:21" pos:end="87:35">kernel_filename</name></name> <operator pos:start="87:37" pos:end="87:37">=</operator> <name pos:start="87:39" pos:end="87:62"><name pos:start="87:39" pos:end="87:45">machine</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:62">kernel_filename</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if <condition pos:start="91:8" pos:end="91:33">(<expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:15">machine</name><operator pos:start="91:16" pos:end="91:17">-&gt;</operator><name pos:start="91:18" pos:end="91:32">kernel_filename</name></name></expr>)</condition> <block pos:start="91:35" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:33">

        <expr_stmt pos:start="93:9" pos:end="93:33"><expr pos:start="93:9" pos:end="93:32"><call pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:27">tricore_load_kernel</name><argument_list pos:start="93:28" pos:end="93:32">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
