<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2288.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">qcow2_alloc_clusters_at</name><parameter_list pos:start="1:28" pos:end="3:20">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:58">uint64_t</name></type> <name pos:start="1:60" pos:end="1:65">offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:19"><decl pos:start="3:5" pos:end="3:19"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:19">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVQcow2State</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:26">cluster_index</name></decl>, <decl pos:start="9:29" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:29" pos:end="9:36">refcount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><call pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:28">(<argument pos:start="17:12" pos:end="17:27"><expr pos:start="17:12" pos:end="17:27"><name pos:start="17:12" pos:end="17:22">nb_clusters</name> <operator pos:start="17:24" pos:end="17:25">&gt;=</operator> <literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:25">(<expr pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:19">nb_clusters</name> <operator pos:start="19:21" pos:end="19:22">==</operator> <literal type="number" pos:start="19:24" pos:end="19:24">0</literal></expr>)</condition> <block pos:start="19:27" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="27:5" pos:end="57:29">do <block pos:start="27:8" pos:end="57:5">{<block_content pos:start="31:9" pos:end="55:51">

        <comment type="block" pos:start="29:9" pos:end="29:52">/* Check how many clusters there are free */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:21">cluster_index</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:30">offset</name> <operator pos:start="31:32" pos:end="31:33">&gt;&gt;</operator> <name pos:start="31:35" pos:end="31:49"><name pos:start="31:35" pos:end="31:35">s</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:49">cluster_bits</name></name></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="47:9">for<control pos:start="33:12" pos:end="33:40">(<init pos:start="33:13" pos:end="33:18"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</init> <condition pos:start="33:20" pos:end="33:35"><expr pos:start="33:20" pos:end="33:34"><name pos:start="33:20" pos:end="33:20">i</name> <operator pos:start="33:22" pos:end="33:22">&lt;</operator> <name pos:start="33:24" pos:end="33:34">nb_clusters</name></expr>;</condition> <incr pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:37">i</name><operator pos:start="33:38" pos:end="33:39">++</operator></expr></incr>)</control> <block pos:start="33:42" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:13">

            <expr_stmt pos:start="35:13" pos:end="35:69"><expr pos:start="35:13" pos:end="35:68"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:68"><name pos:start="35:19" pos:end="35:36">qcow2_get_refcount</name><argument_list pos:start="35:37" pos:end="35:68">(<argument pos:start="35:38" pos:end="35:39"><expr pos:start="35:38" pos:end="35:39"><name pos:start="35:38" pos:end="35:39">bs</name></expr></argument>, <argument pos:start="35:42" pos:end="35:56"><expr pos:start="35:42" pos:end="35:56"><name pos:start="35:42" pos:end="35:54">cluster_index</name><operator pos:start="35:55" pos:end="35:56">++</operator></expr></argument>, <argument pos:start="35:59" pos:end="35:67"><expr pos:start="35:59" pos:end="35:67"><operator pos:start="35:59" pos:end="35:59">&amp;</operator><name pos:start="35:60" pos:end="35:67">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="41:13">if <condition pos:start="37:16" pos:end="37:24">(<expr pos:start="37:17" pos:end="37:23"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">&lt;</operator> <literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr>)</condition> <block pos:start="37:26" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:27">

                <return pos:start="39:17" pos:end="39:27">return <expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">ret</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="41:15" pos:end="45:13">else if <condition pos:start="41:23" pos:end="41:37">(<expr pos:start="41:24" pos:end="41:36"><name pos:start="41:24" pos:end="41:31">refcount</name> <operator pos:start="41:33" pos:end="41:34">!=</operator> <literal type="number" pos:start="41:36" pos:end="41:36">0</literal></expr>)</condition> <block pos:start="41:39" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="51:9" pos:end="51:36">/* And then allocate them */</comment>

        <expr_stmt pos:start="53:9" pos:end="55:51"><expr pos:start="53:9" pos:end="55:50"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="55:50"><name pos:start="53:15" pos:end="53:29">update_refcount</name><argument_list pos:start="53:30" pos:end="55:50">(<argument pos:start="53:31" pos:end="53:32"><expr pos:start="53:31" pos:end="53:32"><name pos:start="53:31" pos:end="53:32">bs</name></expr></argument>, <argument pos:start="53:35" pos:end="53:40"><expr pos:start="53:35" pos:end="53:40"><name pos:start="53:35" pos:end="53:40">offset</name></expr></argument>, <argument pos:start="53:43" pos:end="53:62"><expr pos:start="53:43" pos:end="53:62"><name pos:start="53:43" pos:end="53:43">i</name> <operator pos:start="53:45" pos:end="53:46">&lt;&lt;</operator> <name pos:start="53:48" pos:end="53:62"><name pos:start="53:48" pos:end="53:48">s</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:62">cluster_bits</name></name></expr></argument>, <argument pos:start="53:65" pos:end="53:65"><expr pos:start="53:65" pos:end="53:65"><literal type="number" pos:start="53:65" pos:end="53:65">1</literal></expr></argument>, <argument pos:start="53:68" pos:end="53:72"><expr pos:start="53:68" pos:end="53:72"><name pos:start="53:68" pos:end="53:72">false</name></expr></argument>,

                              <argument pos:start="55:31" pos:end="55:49"><expr pos:start="55:31" pos:end="55:49"><name pos:start="55:31" pos:end="55:49">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="57:13" pos:end="57:28">(<expr pos:start="57:14" pos:end="57:27"><name pos:start="57:14" pos:end="57:16">ret</name> <operator pos:start="57:18" pos:end="57:19">==</operator> <operator pos:start="57:21" pos:end="57:21">-</operator><name pos:start="57:22" pos:end="57:27">EAGAIN</name></expr>)</condition>;</do>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>)</condition> <block pos:start="61:18" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:19">

        <return pos:start="63:9" pos:end="63:19">return <expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><name pos:start="69:12" pos:end="69:12">i</name></expr>;</return>

</block_content>}</block></function>
</unit>
