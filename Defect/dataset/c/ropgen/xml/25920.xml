<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25920.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">aio_set_fd_handler</name><parameter_list pos:start="1:24" pos:end="11:37">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:34">AioContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:30"><decl pos:start="3:25" pos:end="3:30"><type pos:start="3:25" pos:end="3:30"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:30">fd</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:42"><decl pos:start="5:25" pos:end="5:42"><type pos:start="5:25" pos:end="5:42"><name pos:start="5:25" pos:end="5:33">IOHandler</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:42">io_read</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:43"><decl pos:start="7:25" pos:end="7:43"><type pos:start="7:25" pos:end="7:43"><name pos:start="7:25" pos:end="7:33">IOHandler</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:43">io_write</name></decl></parameter>,

                        <parameter pos:start="9:25" pos:end="9:49"><decl pos:start="9:25" pos:end="9:49"><type pos:start="9:25" pos:end="9:49"><name pos:start="9:25" pos:end="9:39">AioFlushHandler</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:49">io_flush</name></decl></parameter>,

                        <parameter pos:start="11:25" pos:end="11:36"><decl pos:start="11:25" pos:end="11:36"><type pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:28">void</name> <modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="79:1">{<block_content pos:start="15:5" pos:end="77:5">

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">AioHandler</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">node</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:8">node</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:36"><name pos:start="19:12" pos:end="19:27">find_aio_handler</name><argument_list pos:start="19:28" pos:end="19:36">(<argument pos:start="19:29" pos:end="19:31"><expr pos:start="19:29" pos:end="19:31"><name pos:start="19:29" pos:end="19:31">ctx</name></expr></argument>, <argument pos:start="19:34" pos:end="19:35"><expr pos:start="19:34" pos:end="19:35"><name pos:start="19:34" pos:end="19:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:41">/* Are we deleting the fd handler? */</comment>

    <if_stmt pos:start="25:5" pos:end="77:5"><if pos:start="25:5" pos:end="53:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:16">io_read</name> <operator pos:start="25:18" pos:end="25:19">&amp;&amp;</operator> <operator pos:start="25:21" pos:end="25:21">!</operator><name pos:start="25:22" pos:end="25:29">io_write</name></expr>)</condition> <block pos:start="25:32" pos:end="53:5">{<block_content pos:start="27:9" pos:end="51:9">

        <if_stmt pos:start="27:9" pos:end="51:9"><if pos:start="27:9" pos:end="51:9">if <condition pos:start="27:12" pos:end="27:17">(<expr pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">node</name></expr>)</condition> <block pos:start="27:19" pos:end="51:9">{<block_content pos:start="31:13" pos:end="49:13">

            <comment type="block" pos:start="29:13" pos:end="29:68">/* If the lock is held, just mark the node as deleted */</comment>

            <if_stmt pos:start="31:13" pos:end="49:13"><if pos:start="31:13" pos:end="33:34">if <condition pos:start="31:16" pos:end="31:38">(<expr pos:start="31:17" pos:end="31:37"><name pos:start="31:17" pos:end="31:37"><name pos:start="31:17" pos:end="31:19">ctx</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:37">walking_handlers</name></name></expr>)</condition><block type="pseudo" pos:start="33:17" pos:end="33:34"><block_content pos:start="33:17" pos:end="33:34">

                <expr_stmt pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:33"><name pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:20">node</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:29">deleted</name></name> <operator pos:start="33:31" pos:end="33:31">=</operator> <literal type="number" pos:start="33:33" pos:end="33:33">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="35:13" pos:end="49:13">else <block pos:start="35:18" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:29">

                <comment type="block" pos:start="37:17" pos:end="43:19">/* Otherwise, delete it for real.  We can't just mark it as

                 * deleted because deleted nodes are only cleaned up after

                 * releasing the walking_handlers lock.

                 */</comment>

                <expr_stmt pos:start="45:17" pos:end="45:41"><expr pos:start="45:17" pos:end="45:40"><call pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:28">QLIST_REMOVE</name><argument_list pos:start="45:29" pos:end="45:40">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">node</name></expr></argument>, <argument pos:start="45:36" pos:end="45:39"><expr pos:start="45:36" pos:end="45:39"><name pos:start="45:36" pos:end="45:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:29"><expr pos:start="47:17" pos:end="47:28"><call pos:start="47:17" pos:end="47:28"><name pos:start="47:17" pos:end="47:22">g_free</name><argument_list pos:start="47:23" pos:end="47:28">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="77:5">else <block pos:start="53:12" pos:end="77:5">{<block_content pos:start="55:9" pos:end="75:30">

        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="65:9">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:16">node</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <name pos:start="55:21" pos:end="55:24">NULL</name></expr>)</condition> <block pos:start="55:27" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:62">

            <comment type="block" pos:start="57:13" pos:end="57:60">/* Alloc and insert if it's not already there */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:49"><expr pos:start="59:13" pos:end="59:48"><name pos:start="59:13" pos:end="59:16">node</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:48"><name pos:start="59:20" pos:end="59:28">g_malloc0</name><argument_list pos:start="59:29" pos:end="59:48">(<argument pos:start="59:30" pos:end="59:47"><expr pos:start="59:30" pos:end="59:47"><sizeof pos:start="59:30" pos:end="59:47">sizeof<argument_list pos:start="59:36" pos:end="59:47">(<argument pos:start="59:37" pos:end="59:46"><expr pos:start="59:37" pos:end="59:46"><name pos:start="59:37" pos:end="59:46">AioHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:26"><expr pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:16">node</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:20">fd</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:25">fd</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:62"><expr pos:start="63:13" pos:end="63:61"><call pos:start="63:13" pos:end="63:61"><name pos:start="63:13" pos:end="63:29">QLIST_INSERT_HEAD</name><argument_list pos:start="63:30" pos:end="63:61">(<argument pos:start="63:31" pos:end="63:48"><expr pos:start="63:31" pos:end="63:48"><operator pos:start="63:31" pos:end="63:31">&amp;</operator><name pos:start="63:32" pos:end="63:48"><name pos:start="63:32" pos:end="63:34">ctx</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:48">aio_handlers</name></name></expr></argument>, <argument pos:start="63:51" pos:end="63:54"><expr pos:start="63:51" pos:end="63:54"><name pos:start="63:51" pos:end="63:54">node</name></expr></argument>, <argument pos:start="63:57" pos:end="63:60"><expr pos:start="63:57" pos:end="63:60"><name pos:start="63:57" pos:end="63:60">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="67:9" pos:end="67:52">/* Update handler with latest information */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:12">node</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:21">io_read</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <name pos:start="69:25" pos:end="69:31">io_read</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:12">node</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:22">io_write</name></name> <operator pos:start="71:24" pos:end="71:24">=</operator> <name pos:start="71:26" pos:end="71:33">io_write</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:12">node</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:22">io_flush</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:33">io_flush</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:12">node</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:20">opaque</name></name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:29">opaque</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
