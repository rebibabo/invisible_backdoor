<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2287.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:12">event_thread</name><argument_list pos:start="1:13" pos:end="1:23">(<argument pos:start="1:14" pos:end="1:22">void *arg</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:16">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name></type> <name pos:start="5:19" pos:end="5:34"><name pos:start="5:19" pos:end="5:21">atr</name><index pos:start="5:22" pos:end="5:34">[<expr pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:33">MAX_ATR_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">atr_len</name> <init pos:start="7:17" pos:end="7:29">= <expr pos:start="7:19" pos:end="7:29"><name pos:start="7:19" pos:end="7:29">MAX_ATR_LEN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">VEvent</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:17">event</name> <init pos:start="9:19" pos:end="9:24">= <expr pos:start="9:21" pos:end="9:24"><name pos:start="9:21" pos:end="9:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:26">reader_id</name></decl>;</decl_stmt>





    <while pos:start="17:5" pos:end="189:5">while <condition pos:start="17:11" pos:end="17:13">(<expr pos:start="17:12" pos:end="17:12"><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>)</condition> <block pos:start="17:15" pos:end="189:5">{<block_content pos:start="19:9" pos:end="187:29">

        <decl_stmt pos:start="19:9" pos:end="19:32"><decl pos:start="19:9" pos:end="19:31"><type pos:start="19:9" pos:end="19:20"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:18">char</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:31">reader_name</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:42"><expr pos:start="23:9" pos:end="23:41"><name pos:start="23:9" pos:end="23:13">event</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:41"><name pos:start="23:17" pos:end="23:39">vevent_wait_next_vevent</name><argument_list pos:start="23:40" pos:end="23:41">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:26">(<expr pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:17">event</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <name pos:start="25:22" pos:end="25:25">NULL</name></expr>)</condition> <block pos:start="25:28" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:17">reader_id</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:49"><name pos:start="31:21" pos:end="31:34">vreader_get_id</name><argument_list pos:start="31:35" pos:end="31:49">(<argument pos:start="31:36" pos:end="31:48"><expr pos:start="31:36" pos:end="31:48"><name pos:start="31:36" pos:end="31:48"><name pos:start="31:36" pos:end="31:40">event</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:48">reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="87:9"><if pos:start="33:9" pos:end="87:9">if <condition pos:start="33:12" pos:end="35:48">(<expr pos:start="33:13" pos:end="35:47"><name pos:start="33:13" pos:end="33:21">reader_id</name> <operator pos:start="33:23" pos:end="33:24">==</operator> <name pos:start="33:26" pos:end="33:51">VSCARD_UNDEFINED_READER_ID</name> <operator pos:start="33:53" pos:end="33:54">&amp;&amp;</operator>

            <name pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:17">event</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">type</name></name> <operator pos:start="35:25" pos:end="35:26">!=</operator> <name pos:start="35:28" pos:end="35:47">VEVENT_READER_INSERT</name></expr>)</condition> <block pos:start="35:50" pos:end="87:9">{<block_content pos:start="43:13" pos:end="83:13">

            <comment type="block" pos:start="37:13" pos:end="37:62">/* ignore events from readers qemu has rejected */</comment>

            <comment type="block" pos:start="39:13" pos:end="41:36">/* if qemu is still deciding on this reader, wait to see if need to

             * forward this event */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:50"><expr pos:start="43:13" pos:end="43:49"><call pos:start="43:13" pos:end="43:49"><name pos:start="43:13" pos:end="43:27">qemu_mutex_lock</name><argument_list pos:start="43:28" pos:end="43:49">(<argument pos:start="43:29" pos:end="43:48"><expr pos:start="43:29" pos:end="43:48"><operator pos:start="43:29" pos:end="43:29">&amp;</operator><name pos:start="43:30" pos:end="43:48">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="57:13"><if pos:start="45:13" pos:end="57:13">if <condition pos:start="45:16" pos:end="45:69">(<expr pos:start="45:17" pos:end="45:68"><operator pos:start="45:17" pos:end="45:17">!</operator><name pos:start="45:18" pos:end="45:31">pending_reader</name> <operator pos:start="45:33" pos:end="45:34">||</operator> <operator pos:start="45:36" pos:end="45:36">(</operator><name pos:start="45:37" pos:end="45:50">pending_reader</name> <operator pos:start="45:52" pos:end="45:53">!=</operator> <name pos:start="45:55" pos:end="45:67"><name pos:start="45:55" pos:end="45:59">event</name><operator pos:start="45:60" pos:end="45:61">-&gt;</operator><name pos:start="45:62" pos:end="45:67">reader</name></name><operator pos:start="45:68" pos:end="45:68">)</operator></expr>)</condition> <block pos:start="45:71" pos:end="57:13">{<block_content pos:start="51:17" pos:end="55:25">

                <comment type="block" pos:start="47:17" pos:end="49:38">/* wasn't for a pending reader, this reader has already been

                 * rejected by qemu */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:56"><expr pos:start="51:17" pos:end="51:55"><call pos:start="51:17" pos:end="51:55"><name pos:start="51:17" pos:end="51:33">qemu_mutex_unlock</name><argument_list pos:start="51:34" pos:end="51:55">(<argument pos:start="51:35" pos:end="51:54"><expr pos:start="51:35" pos:end="51:54"><operator pos:start="51:35" pos:end="51:35">&amp;</operator><name pos:start="51:36" pos:end="51:54">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:37"><expr pos:start="53:17" pos:end="53:36"><call pos:start="53:17" pos:end="53:36"><name pos:start="53:17" pos:end="53:29">vevent_delete</name><argument_list pos:start="53:30" pos:end="53:36">(<argument pos:start="53:31" pos:end="53:35"><expr pos:start="53:31" pos:end="53:35"><name pos:start="53:31" pos:end="53:35">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="55:17" pos:end="55:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="59:13" pos:end="61:29">/* this reader hasn't been told its status from qemu yet, wait for

             * that status */</comment>

            <while pos:start="63:13" pos:end="67:13">while <condition pos:start="63:19" pos:end="63:42">(<expr pos:start="63:20" pos:end="63:41"><name pos:start="63:20" pos:end="63:33">pending_reader</name> <operator pos:start="63:35" pos:end="63:36">!=</operator> <name pos:start="63:38" pos:end="63:41">NULL</name></expr>)</condition> <block pos:start="63:44" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:80">

                <expr_stmt pos:start="65:17" pos:end="65:80"><expr pos:start="65:17" pos:end="65:79"><call pos:start="65:17" pos:end="65:79"><name pos:start="65:17" pos:end="65:30">qemu_cond_wait</name><argument_list pos:start="65:31" pos:end="65:79">(<argument pos:start="65:32" pos:end="65:56"><expr pos:start="65:32" pos:end="65:56"><operator pos:start="65:32" pos:end="65:32">&amp;</operator><name pos:start="65:33" pos:end="65:56">pending_reader_condition</name></expr></argument>, <argument pos:start="65:59" pos:end="65:78"><expr pos:start="65:59" pos:end="65:78"><operator pos:start="65:59" pos:end="65:59">&amp;</operator><name pos:start="65:60" pos:end="65:78">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="69:13" pos:end="69:52"><expr pos:start="69:13" pos:end="69:51"><call pos:start="69:13" pos:end="69:51"><name pos:start="69:13" pos:end="69:29">qemu_mutex_unlock</name><argument_list pos:start="69:30" pos:end="69:51">(<argument pos:start="69:31" pos:end="69:50"><expr pos:start="69:31" pos:end="69:50"><operator pos:start="69:31" pos:end="69:31">&amp;</operator><name pos:start="69:32" pos:end="69:50">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="71:13" pos:end="71:36">/* now recheck the id */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:54"><expr pos:start="73:13" pos:end="73:53"><name pos:start="73:13" pos:end="73:21">reader_id</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <call pos:start="73:25" pos:end="73:53"><name pos:start="73:25" pos:end="73:38">vreader_get_id</name><argument_list pos:start="73:39" pos:end="73:53">(<argument pos:start="73:40" pos:end="73:52"><expr pos:start="73:40" pos:end="73:52"><name pos:start="73:40" pos:end="73:52"><name pos:start="73:40" pos:end="73:44">event</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:52">reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="83:13">if <condition pos:start="75:16" pos:end="75:56">(<expr pos:start="75:17" pos:end="75:55"><name pos:start="75:17" pos:end="75:25">reader_id</name> <operator pos:start="75:27" pos:end="75:28">==</operator> <name pos:start="75:30" pos:end="75:55">VSCARD_UNDEFINED_READER_ID</name></expr>)</condition> <block pos:start="75:58" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:25">

                <comment type="block" pos:start="77:17" pos:end="77:46">/* this reader was rejected */</comment>

                <expr_stmt pos:start="79:17" pos:end="79:37"><expr pos:start="79:17" pos:end="79:36"><call pos:start="79:17" pos:end="79:36"><name pos:start="79:17" pos:end="79:29">vevent_delete</name><argument_list pos:start="79:30" pos:end="79:36">(<argument pos:start="79:31" pos:end="79:35"><expr pos:start="79:31" pos:end="79:35"><name pos:start="79:31" pos:end="79:35">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="81:17" pos:end="81:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="85:13" pos:end="85:60">/* reader was accepted, now forward the event */</comment>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="89:9" pos:end="185:9">switch <condition pos:start="89:16" pos:end="89:28">(<expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:21">event</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:27">type</name></name></expr>)</condition> <block pos:start="89:30" pos:end="185:9">{<block_content pos:start="91:9" pos:end="183:18">

        <case pos:start="91:9" pos:end="91:34">case <expr pos:start="91:14" pos:end="91:33"><name pos:start="91:14" pos:end="91:33">VEVENT_READER_INSERT</name></expr>:</case>

            <comment type="block" pos:start="93:13" pos:end="93:55">/* tell qemu to insert a new CCID reader */</comment>

            <comment type="block" pos:start="95:13" pos:end="99:17">/* wait until qemu has responded to our first reader insert

             * before we send a second. That way we won't confuse the responses

             * */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:50"><expr pos:start="101:13" pos:end="101:49"><call pos:start="101:13" pos:end="101:49"><name pos:start="101:13" pos:end="101:27">qemu_mutex_lock</name><argument_list pos:start="101:28" pos:end="101:49">(<argument pos:start="101:29" pos:end="101:48"><expr pos:start="101:29" pos:end="101:48"><operator pos:start="101:29" pos:end="101:29">&amp;</operator><name pos:start="101:30" pos:end="101:48">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="103:13" pos:end="107:13">while <condition pos:start="103:19" pos:end="103:42">(<expr pos:start="103:20" pos:end="103:41"><name pos:start="103:20" pos:end="103:33">pending_reader</name> <operator pos:start="103:35" pos:end="103:36">!=</operator> <name pos:start="103:38" pos:end="103:41">NULL</name></expr>)</condition> <block pos:start="103:44" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:80">

                <expr_stmt pos:start="105:17" pos:end="105:80"><expr pos:start="105:17" pos:end="105:79"><call pos:start="105:17" pos:end="105:79"><name pos:start="105:17" pos:end="105:30">qemu_cond_wait</name><argument_list pos:start="105:31" pos:end="105:79">(<argument pos:start="105:32" pos:end="105:56"><expr pos:start="105:32" pos:end="105:56"><operator pos:start="105:32" pos:end="105:32">&amp;</operator><name pos:start="105:33" pos:end="105:56">pending_reader_condition</name></expr></argument>, <argument pos:start="105:59" pos:end="105:78"><expr pos:start="105:59" pos:end="105:78"><operator pos:start="105:59" pos:end="105:59">&amp;</operator><name pos:start="105:60" pos:end="105:78">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="109:13" pos:end="109:62"><expr pos:start="109:13" pos:end="109:61"><name pos:start="109:13" pos:end="109:26">pending_reader</name> <operator pos:start="109:28" pos:end="109:28">=</operator> <call pos:start="109:30" pos:end="109:61"><name pos:start="109:30" pos:end="109:46">vreader_reference</name><argument_list pos:start="109:47" pos:end="109:61">(<argument pos:start="109:48" pos:end="109:60"><expr pos:start="109:48" pos:end="109:60"><name pos:start="109:48" pos:end="109:60"><name pos:start="109:48" pos:end="109:52">event</name><operator pos:start="109:53" pos:end="109:54">-&gt;</operator><name pos:start="109:55" pos:end="109:60">reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:52"><expr pos:start="111:13" pos:end="111:51"><call pos:start="111:13" pos:end="111:51"><name pos:start="111:13" pos:end="111:29">qemu_mutex_unlock</name><argument_list pos:start="111:30" pos:end="111:51">(<argument pos:start="111:31" pos:end="111:50"><expr pos:start="111:31" pos:end="111:50"><operator pos:start="111:31" pos:end="111:31">&amp;</operator><name pos:start="111:32" pos:end="111:50">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:58"><expr pos:start="113:13" pos:end="113:57"><name pos:start="113:13" pos:end="113:23">reader_name</name> <operator pos:start="113:25" pos:end="113:25">=</operator> <call pos:start="113:27" pos:end="113:57"><name pos:start="113:27" pos:end="113:42">vreader_get_name</name><argument_list pos:start="113:43" pos:end="113:57">(<argument pos:start="113:44" pos:end="113:56"><expr pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:48">event</name><operator pos:start="113:49" pos:end="113:50">-&gt;</operator><name pos:start="113:51" pos:end="113:56">reader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="119:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:29">(<expr pos:start="115:17" pos:end="115:28"><name pos:start="115:17" pos:end="115:23">verbose</name> <operator pos:start="115:25" pos:end="115:25">&gt;</operator> <literal type="number" pos:start="115:27" pos:end="115:28">10</literal></expr>)</condition> <block pos:start="115:31" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:60">

                <expr_stmt pos:start="117:17" pos:end="117:60"><expr pos:start="117:17" pos:end="117:59"><call pos:start="117:17" pos:end="117:59"><name pos:start="117:17" pos:end="117:22">printf</name><argument_list pos:start="117:23" pos:end="117:59">(<argument pos:start="117:24" pos:end="117:45"><expr pos:start="117:24" pos:end="117:45"><literal type="string" pos:start="117:24" pos:end="117:45">" READER INSERT: %s\n"</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:58"><expr pos:start="117:48" pos:end="117:58"><name pos:start="117:48" pos:end="117:58">reader_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="125:69"><expr pos:start="121:13" pos:end="125:68"><call pos:start="121:13" pos:end="125:68"><name pos:start="121:13" pos:end="121:20">send_msg</name><argument_list pos:start="121:21" pos:end="125:68">(<argument pos:start="121:22" pos:end="121:34"><expr pos:start="121:22" pos:end="121:34"><name pos:start="121:22" pos:end="121:34">VSC_ReaderAdd</name></expr></argument>,

                <argument pos:start="123:17" pos:end="123:25"><expr pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:25">reader_id</name></expr></argument>, <comment type="block" pos:start="123:28" pos:end="123:70">/* currerntly VSCARD_UNDEFINED_READER_ID */</comment>

                <argument pos:start="125:17" pos:end="125:20"><expr pos:start="125:17" pos:end="125:20"><name pos:start="125:17" pos:end="125:20">NULL</name></expr></argument>, <argument pos:start="125:23" pos:end="125:23"><expr pos:start="125:23" pos:end="125:23"><literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr></argument> <comment type="block" pos:start="125:25" pos:end="125:67">/* TODO reader_name, strlen(reader_name) */</comment>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <case pos:start="129:9" pos:end="129:34">case <expr pos:start="129:14" pos:end="129:33"><name pos:start="129:14" pos:end="129:33">VEVENT_READER_REMOVE</name></expr>:</case>

            <comment type="block" pos:start="131:13" pos:end="131:76">/* future, tell qemu that an old CCID reader has been removed */</comment>

            <if_stmt pos:start="133:13" pos:end="137:13"><if pos:start="133:13" pos:end="137:13">if <condition pos:start="133:16" pos:end="133:29">(<expr pos:start="133:17" pos:end="133:28"><name pos:start="133:17" pos:end="133:23">verbose</name> <operator pos:start="133:25" pos:end="133:25">&gt;</operator> <literal type="number" pos:start="133:27" pos:end="133:28">10</literal></expr>)</condition> <block pos:start="133:31" pos:end="137:13">{<block_content pos:start="135:17" pos:end="135:58">

                <expr_stmt pos:start="135:17" pos:end="135:58"><expr pos:start="135:17" pos:end="135:57"><call pos:start="135:17" pos:end="135:57"><name pos:start="135:17" pos:end="135:22">printf</name><argument_list pos:start="135:23" pos:end="135:57">(<argument pos:start="135:24" pos:end="135:45"><expr pos:start="135:24" pos:end="135:45"><literal type="string" pos:start="135:24" pos:end="135:45">" READER REMOVE: %u\n"</literal></expr></argument>, <argument pos:start="135:48" pos:end="135:56"><expr pos:start="135:48" pos:end="135:56"><name pos:start="135:48" pos:end="135:56">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:59"><expr pos:start="139:13" pos:end="139:58"><call pos:start="139:13" pos:end="139:58"><name pos:start="139:13" pos:end="139:20">send_msg</name><argument_list pos:start="139:21" pos:end="139:58">(<argument pos:start="139:22" pos:end="139:37"><expr pos:start="139:22" pos:end="139:37"><name pos:start="139:22" pos:end="139:37">VSC_ReaderRemove</name></expr></argument>, <argument pos:start="139:40" pos:end="139:48"><expr pos:start="139:40" pos:end="139:48"><name pos:start="139:40" pos:end="139:48">reader_id</name></expr></argument>, <argument pos:start="139:51" pos:end="139:54"><expr pos:start="139:51" pos:end="139:54"><name pos:start="139:51" pos:end="139:54">NULL</name></expr></argument>, <argument pos:start="139:57" pos:end="139:57"><expr pos:start="139:57" pos:end="139:57"><literal type="number" pos:start="139:57" pos:end="139:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        <case pos:start="143:9" pos:end="143:32">case <expr pos:start="143:14" pos:end="143:31"><name pos:start="143:14" pos:end="143:31">VEVENT_CARD_INSERT</name></expr>:</case>

            <comment type="block" pos:start="145:13" pos:end="147:24">/* get the ATR (intended as a response to a power on from the

             * reader */</comment>

            <expr_stmt pos:start="149:13" pos:end="149:34"><expr pos:start="149:13" pos:end="149:33"><name pos:start="149:13" pos:end="149:19">atr_len</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:33">MAX_ATR_LEN</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:59"><expr pos:start="151:13" pos:end="151:58"><call pos:start="151:13" pos:end="151:58"><name pos:start="151:13" pos:end="151:28">vreader_power_on</name><argument_list pos:start="151:29" pos:end="151:58">(<argument pos:start="151:30" pos:end="151:42"><expr pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:34">event</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:42">reader</name></name></expr></argument>, <argument pos:start="151:45" pos:end="151:47"><expr pos:start="151:45" pos:end="151:47"><name pos:start="151:45" pos:end="151:47">atr</name></expr></argument>, <argument pos:start="151:50" pos:end="151:57"><expr pos:start="151:50" pos:end="151:57"><operator pos:start="151:50" pos:end="151:50">&amp;</operator><name pos:start="151:51" pos:end="151:57">atr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="153:13" pos:end="153:59">/* ATR call functions as a Card Insert event */</comment>

            <if_stmt pos:start="155:13" pos:end="161:13"><if pos:start="155:13" pos:end="161:13">if <condition pos:start="155:16" pos:end="155:29">(<expr pos:start="155:17" pos:end="155:28"><name pos:start="155:17" pos:end="155:23">verbose</name> <operator pos:start="155:25" pos:end="155:25">&gt;</operator> <literal type="number" pos:start="155:27" pos:end="155:28">10</literal></expr>)</condition> <block pos:start="155:31" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:47">

                <expr_stmt pos:start="157:17" pos:end="157:55"><expr pos:start="157:17" pos:end="157:54"><call pos:start="157:17" pos:end="157:54"><name pos:start="157:17" pos:end="157:22">printf</name><argument_list pos:start="157:23" pos:end="157:54">(<argument pos:start="157:24" pos:end="157:42"><expr pos:start="157:24" pos:end="157:42"><literal type="string" pos:start="157:24" pos:end="157:42">" CARD INSERT %u: "</literal></expr></argument>, <argument pos:start="157:45" pos:end="157:53"><expr pos:start="157:45" pos:end="157:53"><name pos:start="157:45" pos:end="157:53">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:47"><expr pos:start="159:17" pos:end="159:46"><call pos:start="159:17" pos:end="159:46"><name pos:start="159:17" pos:end="159:32">print_byte_array</name><argument_list pos:start="159:33" pos:end="159:46">(<argument pos:start="159:34" pos:end="159:36"><expr pos:start="159:34" pos:end="159:36"><name pos:start="159:34" pos:end="159:36">atr</name></expr></argument>, <argument pos:start="159:39" pos:end="159:45"><expr pos:start="159:39" pos:end="159:45"><name pos:start="159:39" pos:end="159:45">atr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:55"><expr pos:start="163:13" pos:end="163:54"><call pos:start="163:13" pos:end="163:54"><name pos:start="163:13" pos:end="163:20">send_msg</name><argument_list pos:start="163:21" pos:end="163:54">(<argument pos:start="163:22" pos:end="163:28"><expr pos:start="163:22" pos:end="163:28"><name pos:start="163:22" pos:end="163:28">VSC_ATR</name></expr></argument>, <argument pos:start="163:31" pos:end="163:39"><expr pos:start="163:31" pos:end="163:39"><name pos:start="163:31" pos:end="163:39">reader_id</name></expr></argument>, <argument pos:start="163:42" pos:end="163:44"><expr pos:start="163:42" pos:end="163:44"><name pos:start="163:42" pos:end="163:44">atr</name></expr></argument>, <argument pos:start="163:47" pos:end="163:53"><expr pos:start="163:47" pos:end="163:53"><name pos:start="163:47" pos:end="163:53">atr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:32">case <expr pos:start="167:14" pos:end="167:31"><name pos:start="167:14" pos:end="167:31">VEVENT_CARD_REMOVE</name></expr>:</case>

            <comment type="block" pos:start="169:13" pos:end="169:30">/* Card removed */</comment>

            <if_stmt pos:start="171:13" pos:end="175:13"><if pos:start="171:13" pos:end="175:13">if <condition pos:start="171:16" pos:end="171:29">(<expr pos:start="171:17" pos:end="171:28"><name pos:start="171:17" pos:end="171:23">verbose</name> <operator pos:start="171:25" pos:end="171:25">&gt;</operator> <literal type="number" pos:start="171:27" pos:end="171:28">10</literal></expr>)</condition> <block pos:start="171:31" pos:end="175:13">{<block_content pos:start="173:17" pos:end="173:56">

                <expr_stmt pos:start="173:17" pos:end="173:56"><expr pos:start="173:17" pos:end="173:55"><call pos:start="173:17" pos:end="173:55"><name pos:start="173:17" pos:end="173:22">printf</name><argument_list pos:start="173:23" pos:end="173:55">(<argument pos:start="173:24" pos:end="173:43"><expr pos:start="173:24" pos:end="173:43"><literal type="string" pos:start="173:24" pos:end="173:43">" CARD REMOVE %u:\n"</literal></expr></argument>, <argument pos:start="173:46" pos:end="173:54"><expr pos:start="173:46" pos:end="173:54"><name pos:start="173:46" pos:end="173:54">reader_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:57"><expr pos:start="177:13" pos:end="177:56"><call pos:start="177:13" pos:end="177:56"><name pos:start="177:13" pos:end="177:20">send_msg</name><argument_list pos:start="177:21" pos:end="177:56">(<argument pos:start="177:22" pos:end="177:35"><expr pos:start="177:22" pos:end="177:35"><name pos:start="177:22" pos:end="177:35">VSC_CardRemove</name></expr></argument>, <argument pos:start="177:38" pos:end="177:46"><expr pos:start="177:38" pos:end="177:46"><name pos:start="177:38" pos:end="177:46">reader_id</name></expr></argument>, <argument pos:start="177:49" pos:end="177:52"><expr pos:start="177:49" pos:end="177:52"><name pos:start="177:49" pos:end="177:52">NULL</name></expr></argument>, <argument pos:start="177:55" pos:end="177:55"><expr pos:start="177:55" pos:end="177:55"><literal type="number" pos:start="177:55" pos:end="177:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <default pos:start="181:9" pos:end="181:16">default:</default>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="187:9" pos:end="187:29"><expr pos:start="187:9" pos:end="187:28"><call pos:start="187:9" pos:end="187:28"><name pos:start="187:9" pos:end="187:21">vevent_delete</name><argument_list pos:start="187:22" pos:end="187:28">(<argument pos:start="187:23" pos:end="187:27"><expr pos:start="187:23" pos:end="187:27"><name pos:start="187:23" pos:end="187:27">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="191:5" pos:end="191:16">return <expr pos:start="191:12" pos:end="191:15"><name pos:start="191:12" pos:end="191:15">NULL</name></expr>;</return>

</block_content>}</block>
</unit>
