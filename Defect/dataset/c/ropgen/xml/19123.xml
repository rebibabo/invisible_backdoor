<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19123.c" pos:tabs="8"><function pos:start="1:1" pos:end="345:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="23:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">target</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:37">has_format</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">format</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:40"><decl pos:start="5:23" pos:end="5:40"><type pos:start="5:23" pos:end="5:40"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:40">has_node_name</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:63"><decl pos:start="5:43" pos:end="5:63"><type pos:start="5:43" pos:end="5:63"><specifier pos:start="5:43" pos:end="5:47">const</specifier> <name pos:start="5:49" pos:end="5:52">char</name> <modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:63">node_name</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:39"><decl pos:start="7:23" pos:end="7:39"><type pos:start="7:23" pos:end="7:39"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:39">has_replaces</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:61"><decl pos:start="7:42" pos:end="7:61"><type pos:start="7:42" pos:end="7:61"><specifier pos:start="7:42" pos:end="7:46">const</specifier> <name pos:start="7:48" pos:end="7:51">char</name> <modifier pos:start="7:53" pos:end="7:53">*</modifier></type><name pos:start="7:54" pos:end="7:61">replaces</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:46"><decl pos:start="9:23" pos:end="9:46"><type pos:start="9:23" pos:end="9:46"><name pos:start="9:23" pos:end="9:41"><name pos:start="9:23" pos:end="9:26">enum</name> <name pos:start="9:28" pos:end="9:41">MirrorSyncMode</name></name></type> <name pos:start="9:43" pos:end="9:46">sync</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:35"><decl pos:start="11:23" pos:end="11:35"><type pos:start="11:23" pos:end="11:35"><name pos:start="11:23" pos:end="11:26">bool</name></type> <name pos:start="11:28" pos:end="11:35">has_mode</name></decl></parameter>, <parameter pos:start="11:38" pos:end="11:59"><decl pos:start="11:38" pos:end="11:59"><type pos:start="11:38" pos:end="11:59"><name pos:start="11:38" pos:end="11:54"><name pos:start="11:38" pos:end="11:41">enum</name> <name pos:start="11:43" pos:end="11:54">NewImageMode</name></name></type> <name pos:start="11:56" pos:end="11:59">mode</name></decl></parameter>,

                      <parameter pos:start="13:23" pos:end="13:36"><decl pos:start="13:23" pos:end="13:36"><type pos:start="13:23" pos:end="13:36"><name pos:start="13:23" pos:end="13:26">bool</name></type> <name pos:start="13:28" pos:end="13:36">has_speed</name></decl></parameter>, <parameter pos:start="13:39" pos:end="13:51"><decl pos:start="13:39" pos:end="13:51"><type pos:start="13:39" pos:end="13:51"><name pos:start="13:39" pos:end="13:45">int64_t</name></type> <name pos:start="13:47" pos:end="13:51">speed</name></decl></parameter>,

                      <parameter pos:start="15:23" pos:end="15:42"><decl pos:start="15:23" pos:end="15:42"><type pos:start="15:23" pos:end="15:42"><name pos:start="15:23" pos:end="15:26">bool</name></type> <name pos:start="15:28" pos:end="15:42">has_granularity</name></decl></parameter>, <parameter pos:start="15:45" pos:end="15:64"><decl pos:start="15:45" pos:end="15:64"><type pos:start="15:45" pos:end="15:64"><name pos:start="15:45" pos:end="15:52">uint32_t</name></type> <name pos:start="15:54" pos:end="15:64">granularity</name></decl></parameter>,

                      <parameter pos:start="17:23" pos:end="17:39"><decl pos:start="17:23" pos:end="17:39"><type pos:start="17:23" pos:end="17:39"><name pos:start="17:23" pos:end="17:26">bool</name></type> <name pos:start="17:28" pos:end="17:39">has_buf_size</name></decl></parameter>, <parameter pos:start="17:42" pos:end="17:57"><decl pos:start="17:42" pos:end="17:57"><type pos:start="17:42" pos:end="17:57"><name pos:start="17:42" pos:end="17:48">int64_t</name></type> <name pos:start="17:50" pos:end="17:57">buf_size</name></decl></parameter>,

                      <parameter pos:start="19:23" pos:end="19:46"><decl pos:start="19:23" pos:end="19:46"><type pos:start="19:23" pos:end="19:46"><name pos:start="19:23" pos:end="19:26">bool</name></type> <name pos:start="19:28" pos:end="19:46">has_on_source_error</name></decl></parameter>, <parameter pos:start="19:49" pos:end="19:79"><decl pos:start="19:49" pos:end="19:79"><type pos:start="19:49" pos:end="19:79"><name pos:start="19:49" pos:end="19:63">BlockdevOnError</name></type> <name pos:start="19:65" pos:end="19:79">on_source_error</name></decl></parameter>,

                      <parameter pos:start="21:23" pos:end="21:46"><decl pos:start="21:23" pos:end="21:46"><type pos:start="21:23" pos:end="21:46"><name pos:start="21:23" pos:end="21:26">bool</name></type> <name pos:start="21:28" pos:end="21:46">has_on_target_error</name></decl></parameter>, <parameter pos:start="21:49" pos:end="21:79"><decl pos:start="21:49" pos:end="21:79"><type pos:start="21:49" pos:end="21:79"><name pos:start="21:49" pos:end="21:63">BlockdevOnError</name></type> <name pos:start="21:65" pos:end="21:79">on_target_error</name></decl></parameter>,

                      <parameter pos:start="23:23" pos:end="23:34"><decl pos:start="23:23" pos:end="23:34"><type pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:27">Error</name> <modifier pos:start="23:29" pos:end="23:29">*</modifier><modifier pos:start="23:30" pos:end="23:30">*</modifier></type><name pos:start="23:31" pos:end="23:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="25:1" pos:end="345:1">{<block_content pos:start="27:5" pos:end="343:5">

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">BlockDriverState</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:41"><decl pos:start="29:5" pos:end="29:28"><type pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:20">BlockDriverState</name> <modifier pos:start="29:22" pos:end="29:22">*</modifier></type><name pos:start="29:23" pos:end="29:28">source</name></decl>, <decl pos:start="29:31" pos:end="29:40"><type ref="prev" pos:start="29:5" pos:end="29:22"><modifier pos:start="29:31" pos:end="29:31">*</modifier></type><name pos:start="29:32" pos:end="29:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:15">BlockDriver</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:20">drv</name> <init pos:start="31:22" pos:end="31:27">= <expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:28"><decl pos:start="33:5" pos:end="33:27"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:9">Error</name> <modifier pos:start="33:11" pos:end="33:11">*</modifier></type><name pos:start="33:12" pos:end="33:20">local_err</name> <init pos:start="33:22" pos:end="33:27">= <expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:26"><decl pos:start="35:5" pos:end="35:25"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9">QDict</name> <modifier pos:start="35:11" pos:end="35:11">*</modifier></type><name pos:start="35:12" pos:end="35:18">options</name> <init pos:start="35:20" pos:end="35:25">= <expr pos:start="35:22" pos:end="35:25"><name pos:start="35:22" pos:end="35:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:14"><decl pos:start="37:5" pos:end="37:13"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:17"><decl pos:start="39:5" pos:end="39:16"><type pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:11">int64_t</name></type> <name pos:start="39:13" pos:end="39:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:12"><decl pos:start="41:5" pos:end="41:11"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">has_speed</name></expr>)</condition> <block pos:start="45:21" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:18">

        <expr_stmt pos:start="47:9" pos:end="47:18"><expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:13">speed</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:28">has_on_source_error</name></expr>)</condition> <block pos:start="51:31" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:51">

        <expr_stmt pos:start="53:9" pos:end="53:51"><expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:23">on_source_error</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:29">(<expr pos:start="57:9" pos:end="57:28"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:28">has_on_target_error</name></expr>)</condition> <block pos:start="57:31" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:51">

        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:23">on_target_error</name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:18">(<expr pos:start="63:9" pos:end="63:17"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:17">has_mode</name></expr>)</condition> <block pos:start="63:20" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:45">

        <expr_stmt pos:start="65:9" pos:end="65:45"><expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:12">mode</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:44">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:24">has_granularity</name></expr>)</condition> <block pos:start="69:27" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:24">

        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:19">granularity</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:22">(<expr pos:start="75:9" pos:end="75:21"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:21">has_buf_size</name></expr>)</condition> <block pos:start="75:24" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:43">

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:16">buf_size</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <name pos:start="77:20" pos:end="77:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:78">(<expr pos:start="83:9" pos:end="83:77"><name pos:start="83:9" pos:end="83:19">granularity</name> <operator pos:start="83:21" pos:end="83:22">!=</operator> <literal type="number" pos:start="83:24" pos:end="83:24">0</literal> <operator pos:start="83:26" pos:end="83:27">&amp;&amp;</operator> <operator pos:start="83:29" pos:end="83:29">(</operator><name pos:start="83:30" pos:end="83:63"><name pos:start="83:30" pos:end="83:40">granularity</name> <argument_list type="generic" pos:start="83:42" pos:end="83:63">&lt; <argument pos:start="83:44" pos:end="83:61"><expr pos:start="83:44" pos:end="83:61"><literal type="number" pos:start="83:44" pos:end="83:46">512</literal> <operator pos:start="83:48" pos:end="83:49">||</operator> <name pos:start="83:51" pos:end="83:61">granularity</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="83:65" pos:end="83:71">1048576</literal> <operator pos:start="83:73" pos:end="83:73">*</operator> <literal type="number" pos:start="83:75" pos:end="83:76">64</literal><operator pos:start="83:77" pos:end="83:77">)</operator></expr>)</condition> <block pos:start="83:80" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:15">

        <expr_stmt pos:start="85:9" pos:end="87:51"><expr pos:start="85:9" pos:end="87:50"><call pos:start="85:9" pos:end="87:50"><name pos:start="85:9" pos:end="85:17">error_set</name><argument_list pos:start="85:18" pos:end="87:50">(<argument pos:start="85:19" pos:end="85:22"><expr pos:start="85:19" pos:end="85:22"><name pos:start="85:19" pos:end="85:22">errp</name></expr></argument>, <argument pos:start="85:25" pos:end="85:52"><expr pos:start="85:25" pos:end="85:52"><name pos:start="85:25" pos:end="85:52">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="85:55" pos:end="85:67"><expr pos:start="85:55" pos:end="85:67"><literal type="string" pos:start="85:55" pos:end="85:67">"granularity"</literal></expr></argument>,

                  <argument pos:start="87:19" pos:end="87:49"><expr pos:start="87:19" pos:end="87:49"><literal type="string" pos:start="87:19" pos:end="87:49">"a value in range [512B, 64MB]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:40">(<expr pos:start="93:9" pos:end="93:39"><name pos:start="93:9" pos:end="93:19">granularity</name> <operator pos:start="93:21" pos:end="93:21">&amp;</operator> <operator pos:start="93:23" pos:end="93:23">(</operator><name pos:start="93:24" pos:end="93:34">granularity</name> <operator pos:start="93:36" pos:end="93:36">-</operator> <literal type="number" pos:start="93:38" pos:end="93:38">1</literal><operator pos:start="93:39" pos:end="93:39">)</operator></expr>)</condition> <block pos:start="93:42" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:15">

        <expr_stmt pos:start="95:9" pos:end="95:83"><expr pos:start="95:9" pos:end="95:82"><call pos:start="95:9" pos:end="95:82"><name pos:start="95:9" pos:end="95:17">error_set</name><argument_list pos:start="95:18" pos:end="95:82">(<argument pos:start="95:19" pos:end="95:22"><expr pos:start="95:19" pos:end="95:22"><name pos:start="95:19" pos:end="95:22">errp</name></expr></argument>, <argument pos:start="95:25" pos:end="95:52"><expr pos:start="95:25" pos:end="95:52"><name pos:start="95:25" pos:end="95:52">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="95:55" pos:end="95:67"><expr pos:start="95:55" pos:end="95:67"><literal type="string" pos:start="95:55" pos:end="95:67">"granularity"</literal></expr></argument>, <argument pos:start="95:70" pos:end="95:81"><expr pos:start="95:70" pos:end="95:81"><literal type="string" pos:start="95:70" pos:end="95:81">"power of 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:27"><expr pos:start="103:5" pos:end="103:26"><name pos:start="103:5" pos:end="103:6">bs</name> <operator pos:start="103:8" pos:end="103:8">=</operator> <call pos:start="103:10" pos:end="103:26"><name pos:start="103:10" pos:end="103:18">bdrv_find</name><argument_list pos:start="103:19" pos:end="103:26">(<argument pos:start="103:20" pos:end="103:25"><expr pos:start="103:20" pos:end="103:25"><name pos:start="103:20" pos:end="103:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:12">(<expr pos:start="105:9" pos:end="105:11"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:11">bs</name></expr>)</condition> <block pos:start="105:14" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:15">

        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><call pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:17">error_set</name><argument_list pos:start="107:18" pos:end="107:54">(<argument pos:start="107:19" pos:end="107:22"><expr pos:start="107:19" pos:end="107:22"><name pos:start="107:19" pos:end="107:22">errp</name></expr></argument>, <argument pos:start="107:25" pos:end="107:45"><expr pos:start="107:25" pos:end="107:45"><name pos:start="107:25" pos:end="107:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="107:48" pos:end="107:53"><expr pos:start="107:48" pos:end="107:53"><name pos:start="107:48" pos:end="107:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:30">(<expr pos:start="115:9" pos:end="115:29"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:29"><name pos:start="115:10" pos:end="115:25">bdrv_is_inserted</name><argument_list pos:start="115:26" pos:end="115:29">(<argument pos:start="115:27" pos:end="115:28"><expr pos:start="115:27" pos:end="115:28"><name pos:start="115:27" pos:end="115:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:32" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:15">

        <expr_stmt pos:start="117:9" pos:end="117:59"><expr pos:start="117:9" pos:end="117:58"><call pos:start="117:9" pos:end="117:58"><name pos:start="117:9" pos:end="117:17">error_set</name><argument_list pos:start="117:18" pos:end="117:58">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><name pos:start="117:19" pos:end="117:22">errp</name></expr></argument>, <argument pos:start="117:25" pos:end="117:49"><expr pos:start="117:25" pos:end="117:49"><name pos:start="117:25" pos:end="117:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="117:52" pos:end="117:57"><expr pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:20">(<expr pos:start="125:9" pos:end="125:19"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:19">has_format</name></expr>)</condition> <block pos:start="125:22" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:79">

        <expr_stmt pos:start="127:9" pos:end="127:79"><expr pos:start="127:9" pos:end="127:78"><name pos:start="127:9" pos:end="127:14">format</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <ternary pos:start="127:18" pos:end="127:78"><condition pos:start="127:18" pos:end="127:50"><expr pos:start="127:18" pos:end="127:48"><name pos:start="127:18" pos:end="127:21">mode</name> <operator pos:start="127:23" pos:end="127:24">==</operator> <name pos:start="127:26" pos:end="127:48">NEW_IMAGE_MODE_EXISTING</name></expr> ?</condition><then pos:start="127:52" pos:end="127:55"> <expr pos:start="127:52" pos:end="127:55"><name pos:start="127:52" pos:end="127:55">NULL</name></expr> </then><else pos:start="127:57" pos:end="127:78">: <expr pos:start="127:59" pos:end="127:78"><name pos:start="127:59" pos:end="127:78"><name pos:start="127:59" pos:end="127:60">bs</name><operator pos:start="127:61" pos:end="127:62">-&gt;</operator><name pos:start="127:63" pos:end="127:65">drv</name><operator pos:start="127:66" pos:end="127:67">-&gt;</operator><name pos:start="127:68" pos:end="127:78">format_name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="143:5"><if pos:start="131:5" pos:end="143:5">if <condition pos:start="131:8" pos:end="131:15">(<expr pos:start="131:9" pos:end="131:14"><name pos:start="131:9" pos:end="131:14">format</name></expr>)</condition> <block pos:start="131:17" pos:end="143:5">{<block_content pos:start="133:9" pos:end="141:9">

        <expr_stmt pos:start="133:9" pos:end="133:39"><expr pos:start="133:9" pos:end="133:38"><name pos:start="133:9" pos:end="133:11">drv</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <call pos:start="133:15" pos:end="133:38"><name pos:start="133:15" pos:end="133:30">bdrv_find_format</name><argument_list pos:start="133:31" pos:end="133:38">(<argument pos:start="133:32" pos:end="133:37"><expr pos:start="133:32" pos:end="133:37"><name pos:start="133:32" pos:end="133:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:17">(<expr pos:start="135:13" pos:end="135:16"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:16">drv</name></expr>)</condition> <block pos:start="135:19" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:19">

            <expr_stmt pos:start="137:13" pos:end="137:63"><expr pos:start="137:13" pos:end="137:62"><call pos:start="137:13" pos:end="137:62"><name pos:start="137:13" pos:end="137:21">error_set</name><argument_list pos:start="137:22" pos:end="137:62">(<argument pos:start="137:23" pos:end="137:26"><expr pos:start="137:23" pos:end="137:26"><name pos:start="137:23" pos:end="137:26">errp</name></expr></argument>, <argument pos:start="137:29" pos:end="137:53"><expr pos:start="137:29" pos:end="137:53"><name pos:start="137:29" pos:end="137:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="137:56" pos:end="137:61"><expr pos:start="137:56" pos:end="137:61"><name pos:start="137:56" pos:end="137:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:59">(<expr pos:start="147:9" pos:end="147:58"><call pos:start="147:9" pos:end="147:58"><name pos:start="147:9" pos:end="147:26">bdrv_op_is_blocked</name><argument_list pos:start="147:27" pos:end="147:58">(<argument pos:start="147:28" pos:end="147:29"><expr pos:start="147:28" pos:end="147:29"><name pos:start="147:28" pos:end="147:29">bs</name></expr></argument>, <argument pos:start="147:32" pos:end="147:51"><expr pos:start="147:32" pos:end="147:51"><name pos:start="147:32" pos:end="147:51">BLOCK_OP_TYPE_MIRROR</name></expr></argument>, <argument pos:start="147:54" pos:end="147:57"><expr pos:start="147:54" pos:end="147:57"><name pos:start="147:54" pos:end="147:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:61" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:15">

        <return pos:start="149:9" pos:end="149:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:9">flags</name> <operator pos:start="155:11" pos:end="155:11">=</operator> <name pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:14">bs</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:26">open_flags</name></name> <operator pos:start="155:28" pos:end="155:28">|</operator> <name pos:start="155:30" pos:end="155:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:28"><expr pos:start="157:5" pos:end="157:27"><name pos:start="157:5" pos:end="157:10">source</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <name pos:start="157:14" pos:end="157:27"><name pos:start="157:14" pos:end="157:15">bs</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:27">backing_hd</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:48">(<expr pos:start="159:9" pos:end="159:47"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:15">source</name> <operator pos:start="159:17" pos:end="159:18">&amp;&amp;</operator> <name pos:start="159:20" pos:end="159:23">sync</name> <operator pos:start="159:25" pos:end="159:26">==</operator> <name pos:start="159:28" pos:end="159:47">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="159:50" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:37">

        <expr_stmt pos:start="161:9" pos:end="161:37"><expr pos:start="161:9" pos:end="161:36"><name pos:start="161:9" pos:end="161:12">sync</name> <operator pos:start="161:14" pos:end="161:14">=</operator> <name pos:start="161:16" pos:end="161:36">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="165:5" pos:end="169:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:38">(<expr pos:start="165:9" pos:end="165:37"><name pos:start="165:9" pos:end="165:12">sync</name> <operator pos:start="165:14" pos:end="165:15">==</operator> <name pos:start="165:17" pos:end="165:37">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="165:40" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:20">

        <expr_stmt pos:start="167:9" pos:end="167:20"><expr pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:14">source</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <name pos:start="167:18" pos:end="167:19">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:30"><expr pos:start="173:5" pos:end="173:29"><name pos:start="173:5" pos:end="173:8">size</name> <operator pos:start="173:10" pos:end="173:10">=</operator> <call pos:start="173:12" pos:end="173:29"><name pos:start="173:12" pos:end="173:25">bdrv_getlength</name><argument_list pos:start="173:26" pos:end="173:29">(<argument pos:start="173:27" pos:end="173:28"><expr pos:start="173:27" pos:end="173:28"><name pos:start="173:27" pos:end="173:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if <condition pos:start="175:8" pos:end="175:17">(<expr pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:12">size</name> <operator pos:start="175:14" pos:end="175:14">&lt;</operator> <literal type="number" pos:start="175:16" pos:end="175:16">0</literal></expr>)</condition> <block pos:start="175:19" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:15">

        <expr_stmt pos:start="177:9" pos:end="177:63"><expr pos:start="177:9" pos:end="177:62"><call pos:start="177:9" pos:end="177:62"><name pos:start="177:9" pos:end="177:24">error_setg_errno</name><argument_list pos:start="177:25" pos:end="177:62">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><name pos:start="177:26" pos:end="177:29">errp</name></expr></argument>, <argument pos:start="177:32" pos:end="177:36"><expr pos:start="177:32" pos:end="177:36"><operator pos:start="177:32" pos:end="177:32">-</operator><name pos:start="177:33" pos:end="177:36">size</name></expr></argument>, <argument pos:start="177:39" pos:end="177:61"><expr pos:start="177:39" pos:end="177:61"><literal type="string" pos:start="177:39" pos:end="177:61">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="227:5"><if pos:start="185:5" pos:end="227:5">if <condition pos:start="185:8" pos:end="185:21">(<expr pos:start="185:9" pos:end="185:20"><name pos:start="185:9" pos:end="185:20">has_replaces</name></expr>)</condition> <block pos:start="185:23" pos:end="227:5">{<block_content pos:start="187:9" pos:end="225:9">

        <decl_stmt pos:start="187:9" pos:end="187:40"><decl pos:start="187:9" pos:end="187:39"><type pos:start="187:9" pos:end="187:26"><name pos:start="187:9" pos:end="187:24">BlockDriverState</name> <modifier pos:start="187:26" pos:end="187:26">*</modifier></type><name pos:start="187:27" pos:end="187:39">to_replace_bs</name></decl>;</decl_stmt>



        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:27">(<expr pos:start="191:13" pos:end="191:26"><operator pos:start="191:13" pos:end="191:13">!</operator><name pos:start="191:14" pos:end="191:26">has_node_name</name></expr>)</condition> <block pos:start="191:29" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:19">

            <expr_stmt pos:start="193:13" pos:end="195:57"><expr pos:start="193:13" pos:end="195:56"><call pos:start="193:13" pos:end="195:56"><name pos:start="193:13" pos:end="193:22">error_setg</name><argument_list pos:start="193:23" pos:end="195:56">(<argument pos:start="193:24" pos:end="193:27"><expr pos:start="193:24" pos:end="193:27"><name pos:start="193:24" pos:end="193:27">errp</name></expr></argument>, <argument pos:start="193:30" pos:end="195:55"><expr pos:start="193:30" pos:end="195:55"><literal type="string" pos:start="193:30" pos:end="193:76">"a node-name must be provided when replacing a"</literal>

                             <literal type="string" pos:start="195:30" pos:end="195:55">" named node of the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="197:13" pos:end="197:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="203:9" pos:end="203:68"><expr pos:start="203:9" pos:end="203:67"><name pos:start="203:9" pos:end="203:21">to_replace_bs</name> <operator pos:start="203:23" pos:end="203:23">=</operator> <call pos:start="203:25" pos:end="203:67"><name pos:start="203:25" pos:end="203:45">check_to_replace_node</name><argument_list pos:start="203:46" pos:end="203:67">(<argument pos:start="203:47" pos:end="203:54"><expr pos:start="203:47" pos:end="203:54"><name pos:start="203:47" pos:end="203:54">replaces</name></expr></argument>, <argument pos:start="203:57" pos:end="203:66"><expr pos:start="203:57" pos:end="203:66"><operator pos:start="203:57" pos:end="203:57">&amp;</operator><name pos:start="203:58" pos:end="203:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:27">(<expr pos:start="207:13" pos:end="207:26"><operator pos:start="207:13" pos:end="207:13">!</operator><name pos:start="207:14" pos:end="207:26">to_replace_bs</name></expr>)</condition> <block pos:start="207:29" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:19">

            <expr_stmt pos:start="209:13" pos:end="209:45"><expr pos:start="209:13" pos:end="209:44"><call pos:start="209:13" pos:end="209:44"><name pos:start="209:13" pos:end="209:27">error_propagate</name><argument_list pos:start="209:28" pos:end="209:44">(<argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">errp</name></expr></argument>, <argument pos:start="209:35" pos:end="209:43"><expr pos:start="209:35" pos:end="209:43"><name pos:start="209:35" pos:end="209:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="211:13" pos:end="211:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="217:9" pos:end="225:9"><if pos:start="217:9" pos:end="225:9">if <condition pos:start="217:12" pos:end="217:50">(<expr pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:16">size</name> <operator pos:start="217:18" pos:end="217:19">!=</operator> <call pos:start="217:21" pos:end="217:49"><name pos:start="217:21" pos:end="217:34">bdrv_getlength</name><argument_list pos:start="217:35" pos:end="217:49">(<argument pos:start="217:36" pos:end="217:48"><expr pos:start="217:36" pos:end="217:48"><name pos:start="217:36" pos:end="217:48">to_replace_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:52" pos:end="225:9">{<block_content pos:start="219:13" pos:end="223:19">

            <expr_stmt pos:start="219:13" pos:end="221:47"><expr pos:start="219:13" pos:end="221:46"><call pos:start="219:13" pos:end="221:46"><name pos:start="219:13" pos:end="219:22">error_setg</name><argument_list pos:start="219:23" pos:end="221:46">(<argument pos:start="219:24" pos:end="219:27"><expr pos:start="219:24" pos:end="219:27"><name pos:start="219:24" pos:end="219:27">errp</name></expr></argument>, <argument pos:start="219:30" pos:end="221:45"><expr pos:start="219:30" pos:end="221:45"><literal type="string" pos:start="219:30" pos:end="219:75">"cannot replace image with a mirror image of "</literal>

                             <literal type="string" pos:start="221:30" pos:end="221:45">"different size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="223:13" pos:end="223:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="231:5" pos:end="273:5"><if pos:start="231:5" pos:end="245:5">if <condition pos:start="231:8" pos:end="233:43">(<expr pos:start="231:9" pos:end="233:42"><operator pos:start="231:9" pos:end="231:9">(</operator><name pos:start="231:10" pos:end="231:13">sync</name> <operator pos:start="231:15" pos:end="231:16">==</operator> <name pos:start="231:18" pos:end="231:38">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="231:40" pos:end="231:41">||</operator> <operator pos:start="231:43" pos:end="231:43">!</operator><name pos:start="231:44" pos:end="231:49">source</name><operator pos:start="231:50" pos:end="231:50">)</operator>

        <operator pos:start="233:9" pos:end="233:10">&amp;&amp;</operator> <name pos:start="233:12" pos:end="233:15">mode</name> <operator pos:start="233:17" pos:end="233:18">!=</operator> <name pos:start="233:20" pos:end="233:42">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition>

    <block pos:start="235:5" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:74">

        <comment type="block" pos:start="237:9" pos:end="237:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:30"><expr pos:start="239:9" pos:end="239:29"><call pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:14">assert</name><argument_list pos:start="239:15" pos:end="239:29">(<argument pos:start="239:16" pos:end="239:28"><expr pos:start="239:16" pos:end="239:28"><name pos:start="239:16" pos:end="239:21">format</name> <operator pos:start="239:23" pos:end="239:24">&amp;&amp;</operator> <name pos:start="239:26" pos:end="239:28">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="243:74"><expr pos:start="241:9" pos:end="243:73"><call pos:start="241:9" pos:end="243:73"><name pos:start="241:9" pos:end="241:23">bdrv_img_create</name><argument_list pos:start="241:24" pos:end="243:73">(<argument pos:start="241:25" pos:end="241:30"><expr pos:start="241:25" pos:end="241:30"><name pos:start="241:25" pos:end="241:30">target</name></expr></argument>, <argument pos:start="241:33" pos:end="241:38"><expr pos:start="241:33" pos:end="241:38"><name pos:start="241:33" pos:end="241:38">format</name></expr></argument>,

                        <argument pos:start="243:25" pos:end="243:28"><expr pos:start="243:25" pos:end="243:28"><name pos:start="243:25" pos:end="243:28">NULL</name></expr></argument>, <argument pos:start="243:31" pos:end="243:34"><expr pos:start="243:31" pos:end="243:34"><name pos:start="243:31" pos:end="243:34">NULL</name></expr></argument>, <argument pos:start="243:37" pos:end="243:40"><expr pos:start="243:37" pos:end="243:40"><name pos:start="243:37" pos:end="243:40">NULL</name></expr></argument>, <argument pos:start="243:43" pos:end="243:46"><expr pos:start="243:43" pos:end="243:46"><name pos:start="243:43" pos:end="243:46">size</name></expr></argument>, <argument pos:start="243:49" pos:end="243:53"><expr pos:start="243:49" pos:end="243:53"><name pos:start="243:49" pos:end="243:53">flags</name></expr></argument>, <argument pos:start="243:56" pos:end="243:65"><expr pos:start="243:56" pos:end="243:65"><operator pos:start="243:56" pos:end="243:56">&amp;</operator><name pos:start="243:57" pos:end="243:65">local_err</name></expr></argument>, <argument pos:start="243:68" pos:end="243:72"><expr pos:start="243:68" pos:end="243:72"><name pos:start="243:68" pos:end="243:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="273:5">else <block pos:start="245:12" pos:end="273:5">{<block_content pos:start="247:9" pos:end="271:9">

        <switch pos:start="247:9" pos:end="271:9">switch <condition pos:start="247:16" pos:end="247:21">(<expr pos:start="247:17" pos:end="247:20"><name pos:start="247:17" pos:end="247:20">mode</name></expr>)</condition> <block pos:start="247:23" pos:end="271:9">{<block_content pos:start="249:9" pos:end="269:20">

        <case pos:start="249:9" pos:end="249:37">case <expr pos:start="249:14" pos:end="249:36"><name pos:start="249:14" pos:end="249:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:43">case <expr pos:start="253:14" pos:end="253:42"><name pos:start="253:14" pos:end="253:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="255:13" pos:end="255:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="257:13" pos:end="263:66"><expr pos:start="257:13" pos:end="263:65"><call pos:start="257:13" pos:end="263:65"><name pos:start="257:13" pos:end="257:27">bdrv_img_create</name><argument_list pos:start="257:28" pos:end="263:65">(<argument pos:start="257:29" pos:end="257:34"><expr pos:start="257:29" pos:end="257:34"><name pos:start="257:29" pos:end="257:34">target</name></expr></argument>, <argument pos:start="257:37" pos:end="257:42"><expr pos:start="257:37" pos:end="257:42"><name pos:start="257:37" pos:end="257:42">format</name></expr></argument>,

                            <argument pos:start="259:29" pos:end="259:44"><expr pos:start="259:29" pos:end="259:44"><name pos:start="259:29" pos:end="259:44"><name pos:start="259:29" pos:end="259:34">source</name><operator pos:start="259:35" pos:end="259:36">-&gt;</operator><name pos:start="259:37" pos:end="259:44">filename</name></name></expr></argument>,

                            <argument pos:start="261:29" pos:end="261:52"><expr pos:start="261:29" pos:end="261:52"><name pos:start="261:29" pos:end="261:52"><name pos:start="261:29" pos:end="261:34">source</name><operator pos:start="261:35" pos:end="261:36">-&gt;</operator><name pos:start="261:37" pos:end="261:39">drv</name><operator pos:start="261:40" pos:end="261:41">-&gt;</operator><name pos:start="261:42" pos:end="261:52">format_name</name></name></expr></argument>,

                            <argument pos:start="263:29" pos:end="263:32"><expr pos:start="263:29" pos:end="263:32"><name pos:start="263:29" pos:end="263:32">NULL</name></expr></argument>, <argument pos:start="263:35" pos:end="263:38"><expr pos:start="263:35" pos:end="263:38"><name pos:start="263:35" pos:end="263:38">size</name></expr></argument>, <argument pos:start="263:41" pos:end="263:45"><expr pos:start="263:41" pos:end="263:45"><name pos:start="263:41" pos:end="263:45">flags</name></expr></argument>, <argument pos:start="263:48" pos:end="263:57"><expr pos:start="263:48" pos:end="263:57"><operator pos:start="263:48" pos:end="263:48">&amp;</operator><name pos:start="263:49" pos:end="263:57">local_err</name></expr></argument>, <argument pos:start="263:60" pos:end="263:64"><expr pos:start="263:60" pos:end="263:64"><name pos:start="263:60" pos:end="263:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <default pos:start="267:9" pos:end="267:16">default:</default>

            <expr_stmt pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:19"><call pos:start="269:13" pos:end="269:19"><name pos:start="269:13" pos:end="269:17">abort</name><argument_list pos:start="269:18" pos:end="269:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if <condition pos:start="277:8" pos:end="277:18">(<expr pos:start="277:9" pos:end="277:17"><name pos:start="277:9" pos:end="277:17">local_err</name></expr>)</condition> <block pos:start="277:20" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:15">

        <expr_stmt pos:start="279:9" pos:end="279:41"><expr pos:start="279:9" pos:end="279:40"><call pos:start="279:9" pos:end="279:40"><name pos:start="279:9" pos:end="279:23">error_propagate</name><argument_list pos:start="279:24" pos:end="279:40">(<argument pos:start="279:25" pos:end="279:28"><expr pos:start="279:25" pos:end="279:28"><name pos:start="279:25" pos:end="279:28">errp</name></expr></argument>, <argument pos:start="279:31" pos:end="279:39"><expr pos:start="279:31" pos:end="279:39"><name pos:start="279:31" pos:end="279:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="281:9" pos:end="281:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="287:5" pos:end="293:5"><if pos:start="287:5" pos:end="293:5">if <condition pos:start="287:8" pos:end="287:22">(<expr pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:21">has_node_name</name></expr>)</condition> <block pos:start="287:24" pos:end="293:5">{<block_content pos:start="289:9" pos:end="291:69">

        <expr_stmt pos:start="289:9" pos:end="289:30"><expr pos:start="289:9" pos:end="289:29"><name pos:start="289:9" pos:end="289:15">options</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <call pos:start="289:19" pos:end="289:29"><name pos:start="289:19" pos:end="289:27">qdict_new</name><argument_list pos:start="289:28" pos:end="289:29">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:69"><expr pos:start="291:9" pos:end="291:68"><call pos:start="291:9" pos:end="291:68"><name pos:start="291:9" pos:end="291:17">qdict_put</name><argument_list pos:start="291:18" pos:end="291:68">(<argument pos:start="291:19" pos:end="291:25"><expr pos:start="291:19" pos:end="291:25"><name pos:start="291:19" pos:end="291:25">options</name></expr></argument>, <argument pos:start="291:28" pos:end="291:38"><expr pos:start="291:28" pos:end="291:38"><literal type="string" pos:start="291:28" pos:end="291:38">"node-name"</literal></expr></argument>, <argument pos:start="291:41" pos:end="291:67"><expr pos:start="291:41" pos:end="291:67"><call pos:start="291:41" pos:end="291:67"><name pos:start="291:41" pos:end="291:56">qstring_from_str</name><argument_list pos:start="291:57" pos:end="291:67">(<argument pos:start="291:58" pos:end="291:66"><expr pos:start="291:58" pos:end="291:66"><name pos:start="291:58" pos:end="291:66">node_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="297:5" pos:end="301:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="303:5" pos:end="303:21"><expr pos:start="303:5" pos:end="303:20"><name pos:start="303:5" pos:end="303:13">target_bs</name> <operator pos:start="303:15" pos:end="303:15">=</operator> <name pos:start="303:17" pos:end="303:20">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="307:64"><expr pos:start="305:5" pos:end="307:63"><name pos:start="305:5" pos:end="305:7">ret</name> <operator pos:start="305:9" pos:end="305:9">=</operator> <call pos:start="305:11" pos:end="307:63"><name pos:start="305:11" pos:end="305:19">bdrv_open</name><argument_list pos:start="305:20" pos:end="307:63">(<argument pos:start="305:21" pos:end="305:30"><expr pos:start="305:21" pos:end="305:30"><operator pos:start="305:21" pos:end="305:21">&amp;</operator><name pos:start="305:22" pos:end="305:30">target_bs</name></expr></argument>, <argument pos:start="305:33" pos:end="305:38"><expr pos:start="305:33" pos:end="305:38"><name pos:start="305:33" pos:end="305:38">target</name></expr></argument>, <argument pos:start="305:41" pos:end="305:44"><expr pos:start="305:41" pos:end="305:44"><name pos:start="305:41" pos:end="305:44">NULL</name></expr></argument>, <argument pos:start="305:47" pos:end="305:53"><expr pos:start="305:47" pos:end="305:53"><name pos:start="305:47" pos:end="305:53">options</name></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:45"><expr pos:start="307:21" pos:end="307:45"><name pos:start="307:21" pos:end="307:25">flags</name> <operator pos:start="307:27" pos:end="307:27">|</operator> <name pos:start="307:29" pos:end="307:45">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="307:48" pos:end="307:50"><expr pos:start="307:48" pos:end="307:50"><name pos:start="307:48" pos:end="307:50">drv</name></expr></argument>, <argument pos:start="307:53" pos:end="307:62"><expr pos:start="307:53" pos:end="307:62"><operator pos:start="307:53" pos:end="307:53">&amp;</operator><name pos:start="307:54" pos:end="307:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="309:5" pos:end="315:5"><if pos:start="309:5" pos:end="315:5">if <condition pos:start="309:8" pos:end="309:16">(<expr pos:start="309:9" pos:end="309:15"><name pos:start="309:9" pos:end="309:11">ret</name> <operator pos:start="309:13" pos:end="309:13">&lt;</operator> <literal type="number" pos:start="309:15" pos:end="309:15">0</literal></expr>)</condition> <block pos:start="309:18" pos:end="315:5">{<block_content pos:start="311:9" pos:end="313:15">

        <expr_stmt pos:start="311:9" pos:end="311:41"><expr pos:start="311:9" pos:end="311:40"><call pos:start="311:9" pos:end="311:40"><name pos:start="311:9" pos:end="311:23">error_propagate</name><argument_list pos:start="311:24" pos:end="311:40">(<argument pos:start="311:25" pos:end="311:28"><expr pos:start="311:25" pos:end="311:28"><name pos:start="311:25" pos:end="311:28">errp</name></expr></argument>, <argument pos:start="311:31" pos:end="311:39"><expr pos:start="311:31" pos:end="311:39"><name pos:start="311:31" pos:end="311:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="313:9" pos:end="313:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="319:5" pos:end="323:7">/* pass the node name to replace to mirror start since it's loose coupling

     * and will allow to check whether the node still exist at mirror completion

     */</comment>

    <expr_stmt pos:start="325:5" pos:end="333:47"><expr pos:start="325:5" pos:end="333:46"><call pos:start="325:5" pos:end="333:46"><name pos:start="325:5" pos:end="325:16">mirror_start</name><argument_list pos:start="325:17" pos:end="333:46">(<argument pos:start="325:18" pos:end="325:19"><expr pos:start="325:18" pos:end="325:19"><name pos:start="325:18" pos:end="325:19">bs</name></expr></argument>, <argument pos:start="325:22" pos:end="325:30"><expr pos:start="325:22" pos:end="325:30"><name pos:start="325:22" pos:end="325:30">target_bs</name></expr></argument>,

                 <argument pos:start="327:18" pos:end="327:47"><expr pos:start="327:18" pos:end="327:47"><ternary pos:start="327:18" pos:end="327:47"><condition pos:start="327:18" pos:end="327:31"><expr pos:start="327:18" pos:end="327:29"><name pos:start="327:18" pos:end="327:29">has_replaces</name></expr> ?</condition><then pos:start="327:33" pos:end="327:40"> <expr pos:start="327:33" pos:end="327:40"><name pos:start="327:33" pos:end="327:40">replaces</name></expr> </then><else pos:start="327:42" pos:end="327:47">: <expr pos:start="327:44" pos:end="327:47"><name pos:start="327:44" pos:end="327:47">NULL</name></expr></else></ternary></expr></argument>,

                 <argument pos:start="329:18" pos:end="329:22"><expr pos:start="329:18" pos:end="329:22"><name pos:start="329:18" pos:end="329:22">speed</name></expr></argument>, <argument pos:start="329:25" pos:end="329:35"><expr pos:start="329:25" pos:end="329:35"><name pos:start="329:25" pos:end="329:35">granularity</name></expr></argument>, <argument pos:start="329:38" pos:end="329:45"><expr pos:start="329:38" pos:end="329:45"><name pos:start="329:38" pos:end="329:45">buf_size</name></expr></argument>, <argument pos:start="329:48" pos:end="329:51"><expr pos:start="329:48" pos:end="329:51"><name pos:start="329:48" pos:end="329:51">sync</name></expr></argument>,

                 <argument pos:start="331:18" pos:end="331:32"><expr pos:start="331:18" pos:end="331:32"><name pos:start="331:18" pos:end="331:32">on_source_error</name></expr></argument>, <argument pos:start="331:35" pos:end="331:49"><expr pos:start="331:35" pos:end="331:49"><name pos:start="331:35" pos:end="331:49">on_target_error</name></expr></argument>,

                 <argument pos:start="333:18" pos:end="333:29"><expr pos:start="333:18" pos:end="333:29"><name pos:start="333:18" pos:end="333:29">block_job_cb</name></expr></argument>, <argument pos:start="333:32" pos:end="333:33"><expr pos:start="333:32" pos:end="333:33"><name pos:start="333:32" pos:end="333:33">bs</name></expr></argument>, <argument pos:start="333:36" pos:end="333:45"><expr pos:start="333:36" pos:end="333:45"><operator pos:start="333:36" pos:end="333:36">&amp;</operator><name pos:start="333:37" pos:end="333:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="335:5" pos:end="343:5"><if pos:start="335:5" pos:end="343:5">if <condition pos:start="335:8" pos:end="335:26">(<expr pos:start="335:9" pos:end="335:25"><name pos:start="335:9" pos:end="335:17">local_err</name> <operator pos:start="335:19" pos:end="335:20">!=</operator> <name pos:start="335:22" pos:end="335:25">NULL</name></expr>)</condition> <block pos:start="335:28" pos:end="343:5">{<block_content pos:start="337:9" pos:end="341:15">

        <expr_stmt pos:start="337:9" pos:end="337:30"><expr pos:start="337:9" pos:end="337:29"><call pos:start="337:9" pos:end="337:29"><name pos:start="337:9" pos:end="337:18">bdrv_unref</name><argument_list pos:start="337:19" pos:end="337:29">(<argument pos:start="337:20" pos:end="337:28"><expr pos:start="337:20" pos:end="337:28"><name pos:start="337:20" pos:end="337:28">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:41"><expr pos:start="339:9" pos:end="339:40"><call pos:start="339:9" pos:end="339:40"><name pos:start="339:9" pos:end="339:23">error_propagate</name><argument_list pos:start="339:24" pos:end="339:40">(<argument pos:start="339:25" pos:end="339:28"><expr pos:start="339:25" pos:end="339:28"><name pos:start="339:25" pos:end="339:28">errp</name></expr></argument>, <argument pos:start="339:31" pos:end="339:39"><expr pos:start="339:31" pos:end="339:39"><name pos:start="339:31" pos:end="339:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="341:9" pos:end="341:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
