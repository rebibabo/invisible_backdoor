<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21783.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">uint_fast8_t</name></type> <name pos:start="1:21" pos:end="1:40">vorbis_floor0_decode</name><parameter_list pos:start="1:41" pos:end="3:76">(<parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:59"><name pos:start="1:42" pos:end="1:55">vorbis_context</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">vc</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:63"><decl pos:start="3:42" pos:end="3:63"><type pos:start="3:42" pos:end="3:63"><name pos:start="3:42" pos:end="3:58">vorbis_floor_data</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">vfu</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:75"><decl pos:start="3:66" pos:end="3:75"><type pos:start="3:66" pos:end="3:75"><name pos:start="3:66" pos:end="3:70">float</name> <modifier pos:start="3:72" pos:end="3:72">*</modifier></type><name pos:start="3:73" pos:end="3:75">vec</name></decl></parameter>)</parameter_list> <block pos:start="3:78" pos:end="229:1">{<block_content pos:start="5:5" pos:end="227:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">vorbis_floor0</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type> <name pos:start="5:21" pos:end="5:22">vf</name><init pos:start="5:23" pos:end="5:31">=<expr pos:start="5:24" pos:end="5:31"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:31"><name pos:start="5:25" pos:end="5:27">vfu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:31">t0</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">float</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type> <name pos:start="7:13" pos:end="7:15">lsp</name><init pos:start="7:16" pos:end="7:23">=<expr pos:start="7:17" pos:end="7:23"><name pos:start="7:17" pos:end="7:23"><name pos:start="7:17" pos:end="7:18">vf</name><operator pos:start="7:19" pos:end="7:20">-&gt;</operator><name pos:start="7:21" pos:end="7:23">lsp</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">uint_fast32_t</name></type> <name pos:start="9:19" pos:end="9:27">amplitude</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">uint_fast32_t</name></type> <name pos:start="11:19" pos:end="11:26">book_idx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:52"><expr pos:start="15:5" pos:end="15:51"><name pos:start="15:5" pos:end="15:13">amplitude</name><operator pos:start="15:14" pos:end="15:14">=</operator><call pos:start="15:15" pos:end="15:51"><name pos:start="15:15" pos:end="15:22">get_bits</name><argument_list pos:start="15:23" pos:end="15:51">(<argument pos:start="15:24" pos:end="15:30"><expr pos:start="15:24" pos:end="15:30"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:30"><name pos:start="15:25" pos:end="15:26">vc</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:30">gb</name></name></expr></argument>, <argument pos:start="15:33" pos:end="15:50"><expr pos:start="15:33" pos:end="15:50"><name pos:start="15:33" pos:end="15:50"><name pos:start="15:33" pos:end="15:34">vf</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:50">amplitude_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="219:5"><if pos:start="17:5" pos:end="211:5">if <condition pos:start="17:8" pos:end="17:20">(<expr pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:17">amplitude</name><operator pos:start="17:18" pos:end="17:18">&gt;</operator><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition> <block pos:start="17:22" pos:end="211:5">{<block_content pos:start="19:9" pos:end="209:9">

        <decl_stmt pos:start="19:9" pos:end="19:23"><decl pos:start="19:9" pos:end="19:22"><type pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:13">float</name></type> <name pos:start="19:15" pos:end="19:18">last</name> <init pos:start="19:20" pos:end="19:22">= <expr pos:start="19:22" pos:end="19:22"><literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:34"><decl pos:start="21:9" pos:end="21:33"><type pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:21">uint_fast16_t</name></type> <name pos:start="21:23" pos:end="21:29">lsp_len</name> <init pos:start="21:31" pos:end="21:33">= <expr pos:start="21:33" pos:end="21:33"><literal type="number" pos:start="21:33" pos:end="21:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:26"><decl pos:start="23:9" pos:end="23:25"><type pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21">uint_fast16_t</name></type> <name pos:start="23:23" pos:end="23:25">idx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:33"><decl pos:start="25:9" pos:end="25:32"><type pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:23">vorbis_codebook</name></type> <name pos:start="25:25" pos:end="25:32">codebook</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:56"><expr pos:start="29:9" pos:end="29:55"><name pos:start="29:9" pos:end="29:16">book_idx</name><operator pos:start="29:17" pos:end="29:17">=</operator><call pos:start="29:18" pos:end="29:55"><name pos:start="29:18" pos:end="29:25">get_bits</name><argument_list pos:start="29:26" pos:end="29:55">(<argument pos:start="29:27" pos:end="29:33"><expr pos:start="29:27" pos:end="29:33"><operator pos:start="29:27" pos:end="29:27">&amp;</operator><name pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:29">vc</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:33">gb</name></name></expr></argument>, <argument pos:start="29:36" pos:end="29:54"><expr pos:start="29:36" pos:end="29:54"><call pos:start="29:36" pos:end="29:54"><name pos:start="29:36" pos:end="29:39">ilog</name><argument_list pos:start="29:40" pos:end="29:54">(<argument pos:start="29:41" pos:end="29:53"><expr pos:start="29:41" pos:end="29:53"><name pos:start="29:41" pos:end="29:53"><name pos:start="29:41" pos:end="29:42">vf</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:53">num_books</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:40">( <expr pos:start="31:14" pos:end="31:38"><name pos:start="31:14" pos:end="31:21">book_idx</name> <operator pos:start="31:23" pos:end="31:24">&gt;=</operator> <name pos:start="31:26" pos:end="31:38"><name pos:start="31:26" pos:end="31:27">vf</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:38">num_books</name></name></expr> )</condition> <block pos:start="31:42" pos:end="39:9">{<block_content pos:start="33:13" pos:end="35:59">

            <expr_stmt pos:start="33:13" pos:end="35:59"><expr pos:start="33:13" pos:end="35:58"><call pos:start="33:13" pos:end="35:58"><name pos:start="33:13" pos:end="33:18">av_log</name><argument_list pos:start="33:19" pos:end="35:58">( <argument pos:start="33:21" pos:end="33:34"><expr pos:start="33:21" pos:end="33:34"><name pos:start="33:21" pos:end="33:34"><name pos:start="33:21" pos:end="33:22">vc</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:34">avccontext</name></name></expr></argument>, <argument pos:start="33:37" pos:end="33:48"><expr pos:start="33:37" pos:end="33:48"><name pos:start="33:37" pos:end="33:48">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:56"><expr pos:start="35:21" pos:end="35:56"><literal type="string" pos:start="35:21" pos:end="35:56">"floor0 dec: booknumber too high!\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="37:13" pos:end="37:31">//FIXME: look above</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><call pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:16">AV_DEBUG</name><argument_list pos:start="41:17" pos:end="41:60">( <argument pos:start="41:19" pos:end="41:48"><expr pos:start="41:19" pos:end="41:48"><literal type="string" pos:start="41:19" pos:end="41:48">"floor0 dec: booknumber: %u\n"</literal></expr></argument>, <argument pos:start="41:51" pos:end="41:58"><expr pos:start="41:51" pos:end="41:58"><name pos:start="41:51" pos:end="41:58">book_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:16">codebook</name><operator pos:start="43:17" pos:end="43:17">=</operator><name pos:start="43:18" pos:end="43:55"><name pos:start="43:18" pos:end="43:19">vc</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:30">codebooks</name><index pos:start="43:31" pos:end="43:55">[<expr pos:start="43:32" pos:end="43:54"><name pos:start="43:32" pos:end="43:54"><name pos:start="43:32" pos:end="43:33">vf</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:44">book_list</name><index pos:start="43:45" pos:end="43:54">[<expr pos:start="43:46" pos:end="43:53"><name pos:start="43:46" pos:end="43:53">book_idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>



        <while pos:start="47:9" pos:end="88:0">while <condition pos:start="47:15" pos:end="47:33">(<expr pos:start="47:16" pos:end="47:32"><name pos:start="47:16" pos:end="47:22">lsp_len</name><operator pos:start="47:23" pos:end="47:23">&lt;</operator><name pos:start="47:24" pos:end="47:32"><name pos:start="47:24" pos:end="47:25">vf</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:32">order</name></name></expr>)</condition> <block pos:start="47:35" pos:end="88:0">{<block_content pos:start="49:13" pos:end="83:43">

            <decl_stmt pos:start="49:13" pos:end="49:24"><decl pos:start="49:13" pos:end="49:23"><type pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">int</name></type> <name pos:start="49:17" pos:end="49:23">vec_off</name></decl>;</decl_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:80"><expr pos:start="53:13" pos:end="53:79"><call pos:start="53:13" pos:end="53:79"><name pos:start="53:13" pos:end="53:20">AV_DEBUG</name><argument_list pos:start="53:21" pos:end="53:79">( <argument pos:start="53:23" pos:end="53:56"><expr pos:start="53:23" pos:end="53:56"><literal type="string" pos:start="53:23" pos:end="53:56">"floor0 dec: book dimension: %d\n"</literal></expr></argument>, <argument pos:start="53:59" pos:end="53:77"><expr pos:start="53:59" pos:end="53:77"><name pos:start="53:59" pos:end="53:77"><name pos:start="53:59" pos:end="53:66">codebook</name><operator pos:start="53:67" pos:end="53:67">.</operator><name pos:start="53:68" pos:end="53:77">dimensions</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:77"><expr pos:start="55:13" pos:end="55:76"><call pos:start="55:13" pos:end="55:76"><name pos:start="55:13" pos:end="55:20">AV_DEBUG</name><argument_list pos:start="55:21" pos:end="55:76">( <argument pos:start="55:23" pos:end="55:55"><expr pos:start="55:23" pos:end="55:55"><literal type="string" pos:start="55:23" pos:end="55:55">"floor0 dec: maximum depth: %d\n"</literal></expr></argument>, <argument pos:start="55:58" pos:end="55:74"><expr pos:start="55:58" pos:end="55:74"><name pos:start="55:58" pos:end="55:74"><name pos:start="55:58" pos:end="55:65">codebook</name><operator pos:start="55:66" pos:end="55:66">.</operator><name pos:start="55:67" pos:end="55:74">maxdepth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="57:13" pos:end="57:34">/* read temp vector */</comment>

            <expr_stmt pos:start="59:13" pos:end="67:49"><expr pos:start="59:13" pos:end="67:48"><name pos:start="59:13" pos:end="59:19">vec_off</name><operator pos:start="59:20" pos:end="59:20">=</operator><call pos:start="59:21" pos:end="65:48"><name pos:start="59:21" pos:end="59:28">get_vlc2</name><argument_list pos:start="59:29" pos:end="65:48">(<argument pos:start="59:30" pos:end="59:36"><expr pos:start="59:30" pos:end="59:36"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:32">vc</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:36">gb</name></name></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:47"><expr pos:start="61:30" pos:end="61:47"><name pos:start="61:30" pos:end="61:47"><name pos:start="61:30" pos:end="61:37">codebook</name><operator pos:start="61:38" pos:end="61:38">.</operator><name pos:start="61:39" pos:end="61:41">vlc</name><operator pos:start="61:42" pos:end="61:42">.</operator><name pos:start="61:43" pos:end="61:47">table</name></name></expr></argument>,

                             <argument pos:start="63:30" pos:end="63:45"><expr pos:start="63:30" pos:end="63:45"><name pos:start="63:30" pos:end="63:45"><name pos:start="63:30" pos:end="63:37">codebook</name><operator pos:start="63:38" pos:end="63:38">.</operator><name pos:start="63:39" pos:end="63:45">nb_bits</name></name></expr></argument>,

                             <argument pos:start="65:30" pos:end="65:46"><expr pos:start="65:30" pos:end="65:46"><name pos:start="65:30" pos:end="65:46"><name pos:start="65:30" pos:end="65:37">codebook</name><operator pos:start="65:38" pos:end="65:38">.</operator><name pos:start="65:39" pos:end="65:46">maxdepth</name></name></expr></argument> )</argument_list></call> <operator pos:start="65:50" pos:end="65:50">*</operator>

                             <name pos:start="67:30" pos:end="67:48"><name pos:start="67:30" pos:end="67:37">codebook</name><operator pos:start="67:38" pos:end="67:38">.</operator><name pos:start="67:39" pos:end="67:48">dimensions</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:67"><expr pos:start="69:13" pos:end="69:66"><call pos:start="69:13" pos:end="69:66"><name pos:start="69:13" pos:end="69:20">AV_DEBUG</name><argument_list pos:start="69:21" pos:end="69:66">( <argument pos:start="69:23" pos:end="69:55"><expr pos:start="69:23" pos:end="69:55"><literal type="string" pos:start="69:23" pos:end="69:55">"floor0 dec: vector offset: %d\n"</literal></expr></argument>, <argument pos:start="69:58" pos:end="69:64"><expr pos:start="69:58" pos:end="69:64"><name pos:start="69:58" pos:end="69:64">vec_off</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="71:13" pos:end="71:63">/* copy each vector component and add last to it */</comment>

            <for pos:start="73:13" pos:end="77:13">for <control pos:start="73:17" pos:end="73:55">(<init pos:start="73:18" pos:end="73:23"><expr pos:start="73:18" pos:end="73:22"><name pos:start="73:18" pos:end="73:20">idx</name><operator pos:start="73:21" pos:end="73:21">=</operator><literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</init> <condition pos:start="73:25" pos:end="73:48"><expr pos:start="73:25" pos:end="73:47"><name pos:start="73:25" pos:end="73:27">idx</name><operator pos:start="73:28" pos:end="73:28">&lt;</operator><name pos:start="73:29" pos:end="73:47"><name pos:start="73:29" pos:end="73:36">codebook</name><operator pos:start="73:37" pos:end="73:37">.</operator><name pos:start="73:38" pos:end="73:47">dimensions</name></name></expr>;</condition> <incr pos:start="73:50" pos:end="73:54"><expr pos:start="73:50" pos:end="73:54"><operator pos:start="73:50" pos:end="73:51">++</operator><name pos:start="73:52" pos:end="73:54">idx</name></expr></incr>)</control> <block pos:start="73:57" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:72">

                <expr_stmt pos:start="75:17" pos:end="75:72"><expr pos:start="75:17" pos:end="75:71"><name pos:start="75:17" pos:end="75:32"><name pos:start="75:17" pos:end="75:19">lsp</name><index pos:start="75:20" pos:end="75:32">[<expr pos:start="75:21" pos:end="75:31"><name pos:start="75:21" pos:end="75:27">lsp_len</name><operator pos:start="75:28" pos:end="75:28">+</operator><name pos:start="75:29" pos:end="75:31">idx</name></expr>]</index></name><operator pos:start="75:33" pos:end="75:33">=</operator><name pos:start="75:34" pos:end="75:66"><name pos:start="75:34" pos:end="75:41">codebook</name><operator pos:start="75:42" pos:end="75:42">.</operator><name pos:start="75:43" pos:end="75:53">codevectors</name><index pos:start="75:54" pos:end="75:66">[<expr pos:start="75:55" pos:end="75:65"><name pos:start="75:55" pos:end="75:61">vec_off</name><operator pos:start="75:62" pos:end="75:62">+</operator><name pos:start="75:63" pos:end="75:65">idx</name></expr>]</index></name><operator pos:start="75:67" pos:end="75:67">+</operator><name pos:start="75:68" pos:end="75:71">last</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="79:13" pos:end="79:36"><expr pos:start="79:13" pos:end="79:35"><name pos:start="79:13" pos:end="79:16">last</name><operator pos:start="79:17" pos:end="79:17">=</operator><name pos:start="79:18" pos:end="79:35"><name pos:start="79:18" pos:end="79:20">lsp</name><index pos:start="79:21" pos:end="79:35">[<expr pos:start="79:22" pos:end="79:34"><name pos:start="79:22" pos:end="79:28">lsp_len</name><operator pos:start="79:29" pos:end="79:29">+</operator><name pos:start="79:30" pos:end="79:32">idx</name><operator pos:start="79:33" pos:end="79:33">-</operator><literal type="number" pos:start="79:34" pos:end="79:34">1</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="block" pos:start="79:38" pos:end="79:76">/* set last to last vector component */</comment>



            <expr_stmt pos:start="83:13" pos:end="83:43"><expr pos:start="83:13" pos:end="83:42"><name pos:start="83:13" pos:end="83:19">lsp_len</name> <operator pos:start="83:21" pos:end="83:22">+=</operator> <name pos:start="83:24" pos:end="83:42"><name pos:start="83:24" pos:end="83:31">codebook</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:42">dimensions</name></name></expr>;</expr_stmt>

        </block_content>}</block></while>

<cpp:ifdef pos:start="87:1" pos:end="87:14">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:14">V_DEBUG</name></cpp:ifdef>

        <comment type="block" pos:start="89:9" pos:end="89:38">/* DEBUG: output lsp coeffs */</comment>

        <block pos:start="91:9" pos:end="102:0">{<block_content pos:start="93:13" pos:end="97:76">

            <decl_stmt pos:start="93:13" pos:end="93:20"><decl pos:start="93:13" pos:end="93:19"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:19">idx</name></decl>;</decl_stmt>

            <for pos:start="95:13" pos:end="97:76">for <control pos:start="95:17" pos:end="95:49">( <init pos:start="95:19" pos:end="95:26"><expr pos:start="95:19" pos:end="95:25"><name pos:start="95:19" pos:end="95:21">idx</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <literal type="number" pos:start="95:25" pos:end="95:25">0</literal></expr>;</init> <condition pos:start="95:28" pos:end="95:41"><expr pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:30">idx</name> <operator pos:start="95:32" pos:end="95:32">&lt;</operator> <name pos:start="95:34" pos:end="95:40">lsp_len</name></expr>;</condition> <incr pos:start="95:43" pos:end="95:47"><expr pos:start="95:43" pos:end="95:47"><operator pos:start="95:43" pos:end="95:44">++</operator><name pos:start="95:45" pos:end="95:47">idx</name></expr></incr> )</control><block type="pseudo" pos:start="97:17" pos:end="97:76"><block_content pos:start="97:17" pos:end="97:76">

                <expr_stmt pos:start="97:17" pos:end="97:76"><expr pos:start="97:17" pos:end="97:75"><call pos:start="97:17" pos:end="97:75"><name pos:start="97:17" pos:end="97:24">AV_DEBUG</name><argument_list pos:start="97:25" pos:end="97:75">(<argument pos:start="97:26" pos:end="97:58"><expr pos:start="97:26" pos:end="97:58"><literal type="string" pos:start="97:26" pos:end="97:58">"floor0 dec: coeff at %d is %f\n"</literal></expr></argument>, <argument pos:start="97:61" pos:end="97:63"><expr pos:start="97:61" pos:end="97:63"><name pos:start="97:61" pos:end="97:63">idx</name></expr></argument>, <argument pos:start="97:66" pos:end="97:73"><expr pos:start="97:66" pos:end="97:73"><name pos:start="97:66" pos:end="97:73"><name pos:start="97:66" pos:end="97:68">lsp</name><index pos:start="97:69" pos:end="97:73">[<expr pos:start="97:70" pos:end="97:72"><name pos:start="97:70" pos:end="97:72">idx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="105:9" pos:end="105:44">/* synthesize floor output vector */</comment>

        <block pos:start="107:9" pos:end="209:9">{<block_content pos:start="109:13" pos:end="207:13">

            <decl_stmt pos:start="109:13" pos:end="109:18"><decl pos:start="109:13" pos:end="109:17"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:17">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="111:13" pos:end="111:32"><decl pos:start="111:13" pos:end="111:31"><type pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:15">int</name></type> <name pos:start="111:17" pos:end="111:21">order</name><init pos:start="111:22" pos:end="111:31">=<expr pos:start="111:23" pos:end="111:31"><name pos:start="111:23" pos:end="111:31"><name pos:start="111:23" pos:end="111:24">vf</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:31">order</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="113:13" pos:end="113:47"><decl pos:start="113:13" pos:end="113:46"><type pos:start="113:13" pos:end="113:17"><name pos:start="113:13" pos:end="113:17">float</name></type> <name pos:start="113:19" pos:end="113:23">wstep</name><init pos:start="113:24" pos:end="113:46">=<expr pos:start="113:25" pos:end="113:46"><name pos:start="113:25" pos:end="113:28">M_PI</name><operator pos:start="113:29" pos:end="113:29">/</operator><name pos:start="113:30" pos:end="113:46"><name pos:start="113:30" pos:end="113:31">vf</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:46">bark_map_size</name></name></expr></init></decl>;</decl_stmt>



            <for pos:start="117:13" pos:end="117:61">for<control pos:start="117:16" pos:end="117:32">(<init pos:start="117:17" pos:end="117:20"><expr pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:17">i</name><operator pos:start="117:18" pos:end="117:18">=</operator><literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>;</init><condition pos:start="117:21" pos:end="117:28"><expr pos:start="117:21" pos:end="117:27"><name pos:start="117:21" pos:end="117:21">i</name><operator pos:start="117:22" pos:end="117:22">&lt;</operator><name pos:start="117:23" pos:end="117:27">order</name></expr>;</condition><incr pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:29">i</name><operator pos:start="117:30" pos:end="117:31">++</operator></expr></incr>)</control> <block pos:start="117:34" pos:end="117:61">{<block_content pos:start="117:36" pos:end="117:59"> <expr_stmt pos:start="117:36" pos:end="117:59"><expr pos:start="117:36" pos:end="117:58"><name pos:start="117:36" pos:end="117:41"><name pos:start="117:36" pos:end="117:38">lsp</name><index pos:start="117:39" pos:end="117:41">[<expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">i</name></expr>]</index></name><operator pos:start="117:42" pos:end="117:42">=</operator><literal type="number" pos:start="117:43" pos:end="117:46">2.0f</literal><operator pos:start="117:47" pos:end="117:47">*</operator><call pos:start="117:48" pos:end="117:58"><name pos:start="117:48" pos:end="117:50">cos</name><argument_list pos:start="117:51" pos:end="117:58">(<argument pos:start="117:52" pos:end="117:57"><expr pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:57"><name pos:start="117:52" pos:end="117:54">lsp</name><index pos:start="117:55" pos:end="117:57">[<expr pos:start="117:56" pos:end="117:56"><name pos:start="117:56" pos:end="117:56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>



            <expr_stmt pos:start="121:13" pos:end="123:49"><expr pos:start="121:13" pos:end="123:48"><call pos:start="121:13" pos:end="123:48"><name pos:start="121:13" pos:end="121:20">AV_DEBUG</name><argument_list pos:start="121:21" pos:end="123:48">(<argument pos:start="121:22" pos:end="121:66"><expr pos:start="121:22" pos:end="121:66"><literal type="string" pos:start="121:22" pos:end="121:66">"floor0 synth: map_size=%d; m=%d; wstep=%f\n"</literal></expr></argument>,

                     <argument pos:start="123:22" pos:end="123:33"><expr pos:start="123:22" pos:end="123:33"><name pos:start="123:22" pos:end="123:33"><name pos:start="123:22" pos:end="123:23">vf</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:33">map_size</name></name></expr></argument>, <argument pos:start="123:36" pos:end="123:40"><expr pos:start="123:36" pos:end="123:40"><name pos:start="123:36" pos:end="123:40">order</name></expr></argument>, <argument pos:start="123:43" pos:end="123:47"><expr pos:start="123:43" pos:end="123:47"><name pos:start="123:43" pos:end="123:47">wstep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:16"><expr pos:start="127:13" pos:end="127:15"><name pos:start="127:13" pos:end="127:13">i</name><operator pos:start="127:14" pos:end="127:14">=</operator><literal type="number" pos:start="127:15" pos:end="127:15">0</literal></expr>;</expr_stmt>

            <while pos:start="129:13" pos:end="207:13">while<condition pos:start="129:18" pos:end="129:33">(<expr pos:start="129:19" pos:end="129:32"><name pos:start="129:19" pos:end="129:19">i</name><operator pos:start="129:20" pos:end="129:20">&lt;</operator><name pos:start="129:21" pos:end="129:32"><name pos:start="129:21" pos:end="129:22">vf</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:32">map_size</name></name></expr>)</condition> <block pos:start="129:35" pos:end="207:13">{<block_content pos:start="131:17" pos:end="205:66">

                <decl_stmt pos:start="131:17" pos:end="131:44"><decl pos:start="131:17" pos:end="131:21"><type pos:start="131:17" pos:end="131:19"><name pos:start="131:17" pos:end="131:19">int</name></type> <name pos:start="131:21" pos:end="131:21">j</name></decl>, <decl pos:start="131:24" pos:end="131:43"><type ref="prev" pos:start="131:17" pos:end="131:19"/><name pos:start="131:24" pos:end="131:32">iter_cond</name><init pos:start="131:33" pos:end="131:43">=<expr pos:start="131:34" pos:end="131:43"><name pos:start="131:34" pos:end="131:43"><name pos:start="131:34" pos:end="131:35">vf</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:40">map</name><index pos:start="131:41" pos:end="131:43">[<expr pos:start="131:42" pos:end="131:42"><name pos:start="131:42" pos:end="131:42">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="133:17" pos:end="133:29"><decl pos:start="133:17" pos:end="133:28"><type pos:start="133:17" pos:end="133:21"><name pos:start="133:17" pos:end="133:21">float</name></type> <name pos:start="133:23" pos:end="133:23">p</name><init pos:start="133:24" pos:end="133:28">=<expr pos:start="133:25" pos:end="133:28"><literal type="number" pos:start="133:25" pos:end="133:28">0.5f</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="135:17" pos:end="135:29"><decl pos:start="135:17" pos:end="135:28"><type pos:start="135:17" pos:end="135:21"><name pos:start="135:17" pos:end="135:21">float</name></type> <name pos:start="135:23" pos:end="135:23">q</name><init pos:start="135:24" pos:end="135:28">=<expr pos:start="135:25" pos:end="135:28"><literal type="number" pos:start="135:25" pos:end="135:28">0.5f</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="137:17" pos:end="137:58"><decl pos:start="137:17" pos:end="137:57"><type pos:start="137:17" pos:end="137:21"><name pos:start="137:17" pos:end="137:21">float</name></type> <name pos:start="137:23" pos:end="137:31">two_cos_w</name><init pos:start="137:32" pos:end="137:57">=<expr pos:start="137:33" pos:end="137:57"><literal type="number" pos:start="137:33" pos:end="137:36">2.0f</literal><operator pos:start="137:37" pos:end="137:37">*</operator><call pos:start="137:38" pos:end="137:57"><name pos:start="137:38" pos:end="137:40">cos</name><argument_list pos:start="137:41" pos:end="137:57">(<argument pos:start="137:42" pos:end="137:56"><expr pos:start="137:42" pos:end="137:56"><name pos:start="137:42" pos:end="137:46">wstep</name><operator pos:start="137:47" pos:end="137:47">*</operator><name pos:start="137:48" pos:end="137:56">iter_cond</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="137:60" pos:end="137:78">// needed all times</comment>



                <comment type="block" pos:start="141:17" pos:end="141:59">/* similar part for the q and p products */</comment>

                <for pos:start="143:17" pos:end="149:17">for<control pos:start="143:20" pos:end="143:37">(<init pos:start="143:21" pos:end="143:24"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:21">j</name><operator pos:start="143:22" pos:end="143:22">=</operator><literal type="number" pos:start="143:23" pos:end="143:23">0</literal></expr>;</init><condition pos:start="143:25" pos:end="143:32"><expr pos:start="143:25" pos:end="143:31"><name pos:start="143:25" pos:end="143:25">j</name><operator pos:start="143:26" pos:end="143:26">&lt;</operator><name pos:start="143:27" pos:end="143:31">order</name></expr>;</condition><incr pos:start="143:33" pos:end="143:36"><expr pos:start="143:33" pos:end="143:36"><name pos:start="143:33" pos:end="143:33">j</name><operator pos:start="143:34" pos:end="143:35">+=</operator><literal type="number" pos:start="143:36" pos:end="143:36">2</literal></expr></incr>)</control> <block pos:start="143:39" pos:end="149:17">{<block_content pos:start="145:21" pos:end="147:44">

                    <expr_stmt pos:start="145:21" pos:end="145:44"><expr pos:start="145:21" pos:end="145:43"><name pos:start="145:21" pos:end="145:21">q</name> <operator pos:start="145:23" pos:end="145:24">*=</operator> <name pos:start="145:26" pos:end="145:31"><name pos:start="145:26" pos:end="145:28">lsp</name><index pos:start="145:29" pos:end="145:31">[<expr pos:start="145:30" pos:end="145:30"><name pos:start="145:30" pos:end="145:30">j</name></expr>]</index></name>  <operator pos:start="145:34" pos:end="145:34">-</operator><name pos:start="145:35" pos:end="145:43">two_cos_w</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:44"><expr pos:start="147:21" pos:end="147:43"><name pos:start="147:21" pos:end="147:21">p</name> <operator pos:start="147:23" pos:end="147:24">*=</operator> <name pos:start="147:26" pos:end="147:33"><name pos:start="147:26" pos:end="147:28">lsp</name><index pos:start="147:29" pos:end="147:33">[<expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">j</name><operator pos:start="147:31" pos:end="147:31">+</operator><literal type="number" pos:start="147:32" pos:end="147:32">1</literal></expr>]</index></name><operator pos:start="147:34" pos:end="147:34">-</operator><name pos:start="147:35" pos:end="147:43">two_cos_w</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="151:17" pos:end="171:17"><if pos:start="151:17" pos:end="157:17">if<condition pos:start="151:19" pos:end="151:28">(<expr pos:start="151:20" pos:end="151:27"><name pos:start="151:20" pos:end="151:20">j</name><operator pos:start="151:21" pos:end="151:22">==</operator><name pos:start="151:23" pos:end="151:27">order</name></expr>)</condition> <block pos:start="151:30" pos:end="157:17">{<block_content pos:start="153:21" pos:end="155:44"> <comment type="line" pos:start="151:32" pos:end="151:44">// even order</comment>

                    <expr_stmt pos:start="153:21" pos:end="153:44"><expr pos:start="153:21" pos:end="153:43"><name pos:start="153:21" pos:end="153:21">p</name> <operator pos:start="153:23" pos:end="153:24">*=</operator> <name pos:start="153:26" pos:end="153:26">p</name><operator pos:start="153:27" pos:end="153:27">*</operator><operator pos:start="153:28" pos:end="153:28">(</operator><literal type="number" pos:start="153:29" pos:end="153:33">2.0f</literal><operator pos:start="153:33" pos:end="153:33">-</operator><name pos:start="153:34" pos:end="153:42">two_cos_w</name><operator pos:start="153:43" pos:end="153:43">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="155:21" pos:end="155:44"><expr pos:start="155:21" pos:end="155:43"><name pos:start="155:21" pos:end="155:21">q</name> <operator pos:start="155:23" pos:end="155:24">*=</operator> <name pos:start="155:26" pos:end="155:26">q</name><operator pos:start="155:27" pos:end="155:27">*</operator><operator pos:start="155:28" pos:end="155:28">(</operator><literal type="number" pos:start="155:29" pos:end="155:33">2.0f</literal><operator pos:start="155:33" pos:end="155:33">+</operator><name pos:start="155:34" pos:end="155:42">two_cos_w</name><operator pos:start="155:43" pos:end="155:43">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if>

                <else pos:start="159:17" pos:end="171:17">else <block pos:start="159:22" pos:end="171:17">{<block_content pos:start="161:21" pos:end="169:27"> <comment type="line" pos:start="159:24" pos:end="159:35">// odd order</comment>

                    <expr_stmt pos:start="161:21" pos:end="161:42"><expr pos:start="161:21" pos:end="161:41"><name pos:start="161:21" pos:end="161:21">q</name> <operator pos:start="161:23" pos:end="161:24">*=</operator> <name pos:start="161:26" pos:end="161:34">two_cos_w</name><operator pos:start="161:35" pos:end="161:35">-</operator><name pos:start="161:36" pos:end="161:41"><name pos:start="161:36" pos:end="161:38">lsp</name><index pos:start="161:39" pos:end="161:41">[<expr pos:start="161:40" pos:end="161:40"><name pos:start="161:40" pos:end="161:40">j</name></expr>]</index></name></expr>;</expr_stmt> <comment type="line" pos:start="161:44" pos:end="161:65">// one more time for q</comment>



                    <comment type="block" pos:start="165:21" pos:end="165:47">/* final step and square */</comment>

                    <expr_stmt pos:start="167:21" pos:end="167:53"><expr pos:start="167:21" pos:end="167:52"><name pos:start="167:21" pos:end="167:21">p</name> <operator pos:start="167:23" pos:end="167:24">*=</operator> <name pos:start="167:26" pos:end="167:26">p</name><operator pos:start="167:27" pos:end="167:27">*</operator><operator pos:start="167:28" pos:end="167:28">(</operator><literal type="number" pos:start="167:29" pos:end="167:32">4.f</literal><operator pos:start="167:32" pos:end="167:32">-</operator><name pos:start="167:33" pos:end="167:41">two_cos_w</name><operator pos:start="167:42" pos:end="167:42">*</operator><name pos:start="167:43" pos:end="167:51">two_cos_w</name><operator pos:start="167:52" pos:end="167:52">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:27"><expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:21">q</name> <operator pos:start="169:23" pos:end="169:24">*=</operator> <name pos:start="169:26" pos:end="169:26">q</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <comment type="block" pos:start="175:17" pos:end="175:50">/* calculate linear floor value */</comment>

                <block pos:start="177:17" pos:end="199:17">{<block_content pos:start="179:21" pos:end="197:27">

                    <decl_stmt pos:start="179:21" pos:end="179:75"><decl pos:start="179:21" pos:end="179:45"><type pos:start="179:21" pos:end="179:32"><name pos:start="179:21" pos:end="179:32">int_fast32_t</name></type> <name pos:start="179:34" pos:end="179:43">pow_of_two</name><init pos:start="179:44" pos:end="179:45">=<expr pos:start="179:45" pos:end="179:45"><literal type="number" pos:start="179:45" pos:end="179:45">2</literal></expr></init></decl>, <decl pos:start="179:48" pos:end="179:74"><type ref="prev" pos:start="179:21" pos:end="179:32"/><name pos:start="179:48" pos:end="179:55">exponent</name><init pos:start="179:56" pos:end="179:74">=<expr pos:start="179:57" pos:end="179:74"><name pos:start="179:57" pos:end="179:74"><name pos:start="179:57" pos:end="179:58">vf</name><operator pos:start="179:59" pos:end="179:60">-&gt;</operator><name pos:start="179:61" pos:end="179:74">amplitude_bits</name></name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="181:21" pos:end="187:42"><if pos:start="181:21" pos:end="185:21">if <condition pos:start="181:24" pos:end="181:45">( <expr pos:start="181:26" pos:end="181:43"><name pos:start="181:26" pos:end="181:43"><name pos:start="181:26" pos:end="181:27">vf</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:43">amplitude_bits</name></name></expr> )</condition> <block pos:start="181:47" pos:end="185:21">{<block_content pos:start="183:25" pos:end="183:66">

                        <while pos:start="183:25" pos:end="183:66">while <condition pos:start="183:31" pos:end="183:44">( <expr pos:start="183:33" pos:end="183:42"><operator pos:start="183:33" pos:end="183:34">--</operator><name pos:start="183:35" pos:end="183:42">exponent</name></expr> )</condition> <block pos:start="183:46" pos:end="183:66">{<block_content pos:start="183:48" pos:end="183:64"> <expr_stmt pos:start="183:48" pos:end="183:64"><expr pos:start="183:48" pos:end="183:63"><name pos:start="183:48" pos:end="183:57">pow_of_two</name> <operator pos:start="183:59" pos:end="183:61">&lt;&lt;=</operator> <literal type="number" pos:start="183:63" pos:end="183:63">1</literal></expr>;</expr_stmt> </block_content>}</block></while>

                    </block_content>}</block></if>

                    <else pos:start="187:21" pos:end="187:42">else <block pos:start="187:26" pos:end="187:42">{<block_content pos:start="187:28" pos:end="187:40"> <expr_stmt pos:start="187:28" pos:end="187:40"><expr pos:start="187:28" pos:end="187:39"><name pos:start="187:28" pos:end="187:37">pow_of_two</name><operator pos:start="187:38" pos:end="187:38">=</operator><literal type="number" pos:start="187:39" pos:end="187:39">1</literal></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="189:21" pos:end="197:27"><expr pos:start="189:21" pos:end="197:26"><name pos:start="189:21" pos:end="189:21">q</name><operator pos:start="189:22" pos:end="189:22">=</operator><call pos:start="189:23" pos:end="197:26"><name pos:start="189:23" pos:end="189:25">exp</name><argument_list pos:start="189:26" pos:end="197:26">( <argument pos:start="189:28" pos:end="195:66"><expr pos:start="189:28" pos:end="195:66"><operator pos:start="189:28" pos:end="189:28">(</operator>

                             <operator pos:start="191:30" pos:end="191:30">(</operator> <operator pos:start="191:32" pos:end="191:32">(</operator><name pos:start="191:33" pos:end="191:41">amplitude</name><operator pos:start="191:42" pos:end="191:42">*</operator><name pos:start="191:43" pos:end="191:62"><name pos:start="191:43" pos:end="191:44">vf</name><operator pos:start="191:45" pos:end="191:46">-&gt;</operator><name pos:start="191:47" pos:end="191:62">amplitude_offset</name></name><operator pos:start="191:63" pos:end="191:63">)</operator><operator pos:start="191:64" pos:end="191:64">/</operator>

                               <operator pos:start="193:32" pos:end="193:32">(</operator><operator pos:start="193:33" pos:end="193:33">(</operator><name pos:start="193:34" pos:end="193:43">pow_of_two</name><operator pos:start="193:44" pos:end="193:44">-</operator><literal type="number" pos:start="193:45" pos:end="193:45">1</literal><operator pos:start="193:46" pos:end="193:46">)</operator> <operator pos:start="193:48" pos:end="193:48">*</operator> <call pos:start="193:50" pos:end="193:58"><name pos:start="193:50" pos:end="193:53">sqrt</name><argument_list pos:start="193:54" pos:end="193:58">(<argument pos:start="193:55" pos:end="193:57"><expr pos:start="193:55" pos:end="193:57"><name pos:start="193:55" pos:end="193:55">p</name><operator pos:start="193:56" pos:end="193:56">+</operator><name pos:start="193:57" pos:end="193:57">q</name></expr></argument>)</argument_list></call><operator pos:start="193:59" pos:end="193:59">)</operator> <operator pos:start="193:61" pos:end="193:61">)</operator>

                             <operator pos:start="195:30" pos:end="195:30">-</operator> <name pos:start="195:32" pos:end="195:51"><name pos:start="195:32" pos:end="195:33">vf</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:51">amplitude_offset</name></name> <operator pos:start="195:53" pos:end="195:53">)</operator> <operator pos:start="195:55" pos:end="195:55">*</operator> <literal type="number" pos:start="195:57" pos:end="195:66">.11512925f</literal></expr></argument>

                         )</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block>



                <comment type="block" pos:start="203:17" pos:end="203:33">/* fill vector */</comment>

                <do pos:start="205:17" pos:end="205:66">do <block pos:start="205:20" pos:end="205:37">{<block_content pos:start="205:22" pos:end="205:35"> <expr_stmt pos:start="205:22" pos:end="205:30"><expr pos:start="205:22" pos:end="205:29"><name pos:start="205:22" pos:end="205:27"><name pos:start="205:22" pos:end="205:24">vec</name><index pos:start="205:25" pos:end="205:27">[<expr pos:start="205:26" pos:end="205:26"><name pos:start="205:26" pos:end="205:26">i</name></expr>]</index></name><operator pos:start="205:28" pos:end="205:28">=</operator><name pos:start="205:29" pos:end="205:29">q</name></expr>;</expr_stmt> <expr_stmt pos:start="205:32" pos:end="205:35"><expr pos:start="205:32" pos:end="205:34"><operator pos:start="205:32" pos:end="205:33">++</operator><name pos:start="205:34" pos:end="205:34">i</name></expr>;</expr_stmt> </block_content>}</block>while<condition pos:start="205:43" pos:end="205:65">(<expr pos:start="205:44" pos:end="205:64"><name pos:start="205:44" pos:end="205:53"><name pos:start="205:44" pos:end="205:45">vf</name><operator pos:start="205:46" pos:end="205:47">-&gt;</operator><name pos:start="205:48" pos:end="205:50">map</name><index pos:start="205:51" pos:end="205:53">[<expr pos:start="205:52" pos:end="205:52"><name pos:start="205:52" pos:end="205:52">i</name></expr>]</index></name><operator pos:start="205:54" pos:end="205:55">==</operator><name pos:start="205:56" pos:end="205:64">iter_cond</name></expr>)</condition>;</do>

            </block_content>}</block></while>

        </block_content>}</block>

    </block_content>}</block></if>

    <else pos:start="213:5" pos:end="219:5">else <block pos:start="213:10" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:17">

        <comment type="block" pos:start="215:9" pos:end="215:36">/* this channel is unused */</comment>

        <return pos:start="217:9" pos:end="217:17">return <expr pos:start="217:16" pos:end="217:16"><literal type="number" pos:start="217:16" pos:end="217:16">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:34"><expr pos:start="223:5" pos:end="223:33"><call pos:start="223:5" pos:end="223:33"><name pos:start="223:5" pos:end="223:12">AV_DEBUG</name><argument_list pos:start="223:13" pos:end="223:33">(<argument pos:start="223:14" pos:end="223:32"><expr pos:start="223:14" pos:end="223:32"><literal type="string" pos:start="223:14" pos:end="223:32">" Floor0 decoded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="227:5" pos:end="227:13">return <expr pos:start="227:12" pos:end="227:12"><literal type="number" pos:start="227:12" pos:end="227:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
