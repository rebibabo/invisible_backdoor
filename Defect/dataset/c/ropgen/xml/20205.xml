<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20205.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">ide_handle_rw_error</name><parameter_list pos:start="1:31" pos:end="1:62">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:39">IDEState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:53"><decl pos:start="1:45" pos:end="1:53"><type pos:start="1:45" pos:end="1:53"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:53">error</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:61"><decl pos:start="1:56" pos:end="1:61"><type pos:start="1:56" pos:end="1:61"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:61">op</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:47">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:45"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:16">is_read</name> <init pos:start="5:18" pos:end="5:45">= <expr pos:start="5:20" pos:end="5:45"><operator pos:start="5:20" pos:end="5:20">(</operator><name pos:start="5:21" pos:end="5:22">op</name> <operator pos:start="5:24" pos:end="5:24">&amp;</operator> <name pos:start="5:26" pos:end="5:39">IDE_RETRY_READ</name><operator pos:start="5:40" pos:end="5:40">)</operator> <operator pos:start="5:42" pos:end="5:43">!=</operator> <literal type="number" pos:start="5:45" pos:end="5:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:75"><decl pos:start="7:5" pos:end="7:74"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">BlockErrorAction</name></type> <name pos:start="7:22" pos:end="7:27">action</name> <init pos:start="7:29" pos:end="7:74">= <expr pos:start="7:31" pos:end="7:74"><call pos:start="7:31" pos:end="7:74"><name pos:start="7:31" pos:end="7:51">bdrv_get_error_action</name><argument_list pos:start="7:52" pos:end="7:74">(<argument pos:start="7:53" pos:end="7:57"><expr pos:start="7:53" pos:end="7:57"><name pos:start="7:53" pos:end="7:57"><name pos:start="7:53" pos:end="7:53">s</name><operator pos:start="7:54" pos:end="7:55">-&gt;</operator><name pos:start="7:56" pos:end="7:57">bs</name></name></expr></argument>, <argument pos:start="7:60" pos:end="7:66"><expr pos:start="7:60" pos:end="7:66"><name pos:start="7:60" pos:end="7:66">is_read</name></expr></argument>, <argument pos:start="7:69" pos:end="7:73"><expr pos:start="7:69" pos:end="7:73"><name pos:start="7:69" pos:end="7:73">error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="31:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:42">(<expr pos:start="11:9" pos:end="11:41"><name pos:start="11:9" pos:end="11:14">action</name> <operator pos:start="11:16" pos:end="11:17">==</operator> <name pos:start="11:19" pos:end="11:41">BLOCK_ERROR_ACTION_STOP</name></expr>)</condition> <block pos:start="11:44" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:34">

        <expr_stmt pos:start="13:9" pos:end="13:57"><expr pos:start="13:9" pos:end="13:56"><call pos:start="13:9" pos:end="13:56"><name pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">bus</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:19">dma</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:24">ops</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:34">set_unit</name></name><argument_list pos:start="13:35" pos:end="13:56">(<argument pos:start="13:36" pos:end="13:46"><expr pos:start="13:36" pos:end="13:46"><name pos:start="13:36" pos:end="13:46"><name pos:start="13:36" pos:end="13:36">s</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:41">bus</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:46">dma</name></name></expr></argument>, <argument pos:start="13:49" pos:end="13:55"><expr pos:start="13:49" pos:end="13:55"><name pos:start="13:49" pos:end="13:55"><name pos:start="13:49" pos:end="13:49">s</name><operator pos:start="13:50" pos:end="13:51">-&gt;</operator><name pos:start="13:52" pos:end="13:55">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:34"><expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:14">bus</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:28">error_status</name></name> <operator pos:start="15:30" pos:end="15:30">=</operator> <name pos:start="15:32" pos:end="15:33">op</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="17:7" pos:end="31:5">else if <condition pos:start="17:15" pos:end="17:51">(<expr pos:start="17:16" pos:end="17:50"><name pos:start="17:16" pos:end="17:21">action</name> <operator pos:start="17:23" pos:end="17:24">==</operator> <name pos:start="17:26" pos:end="17:50">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="17:53" pos:end="31:5">{<block_content pos:start="19:9" pos:end="29:9">

        <if_stmt pos:start="19:9" pos:end="29:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:31">(<expr pos:start="19:13" pos:end="19:30"><name pos:start="19:13" pos:end="19:14">op</name> <operator pos:start="19:16" pos:end="19:16">&amp;</operator> <name pos:start="19:18" pos:end="19:30">IDE_RETRY_DMA</name></expr>)</condition> <block pos:start="19:33" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:29">

            <expr_stmt pos:start="21:13" pos:end="21:30"><expr pos:start="21:13" pos:end="21:29"><call pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:26">dma_buf_commit</name><argument_list pos:start="21:27" pos:end="21:29">(<argument pos:start="21:28" pos:end="21:28"><expr pos:start="21:28" pos:end="21:28"><name pos:start="21:28" pos:end="21:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:29"><expr pos:start="23:13" pos:end="23:28"><call pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:25">ide_dma_error</name><argument_list pos:start="23:26" pos:end="23:28">(<argument pos:start="23:27" pos:end="23:27"><expr pos:start="23:27" pos:end="23:27"><name pos:start="23:27" pos:end="23:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="25:11" pos:end="29:9">else <block pos:start="25:16" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:28">

            <expr_stmt pos:start="27:13" pos:end="27:28"><expr pos:start="27:13" pos:end="27:27"><call pos:start="27:13" pos:end="27:27"><name pos:start="27:13" pos:end="27:24">ide_rw_error</name><argument_list pos:start="27:25" pos:end="27:27">(<argument pos:start="27:26" pos:end="27:26"><expr pos:start="27:26" pos:end="27:26"><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><call pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:21">bdrv_error_action</name><argument_list pos:start="33:22" pos:end="33:52">(<argument pos:start="33:23" pos:end="33:27"><expr pos:start="33:23" pos:end="33:27"><name pos:start="33:23" pos:end="33:27"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:27">bs</name></name></expr></argument>, <argument pos:start="33:30" pos:end="33:35"><expr pos:start="33:30" pos:end="33:35"><name pos:start="33:30" pos:end="33:35">action</name></expr></argument>, <argument pos:start="33:38" pos:end="33:44"><expr pos:start="33:38" pos:end="33:44"><name pos:start="33:38" pos:end="33:44">is_read</name></expr></argument>, <argument pos:start="33:47" pos:end="33:51"><expr pos:start="33:47" pos:end="33:51"><name pos:start="33:47" pos:end="33:51">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="35:5" pos:end="35:47">return <expr pos:start="35:12" pos:end="35:46"><name pos:start="35:12" pos:end="35:17">action</name> <operator pos:start="35:19" pos:end="35:20">!=</operator> <name pos:start="35:22" pos:end="35:46">BLOCK_ERROR_ACTION_IGNORE</name></expr>;</return>

</block_content>}</block></function>
</unit>
