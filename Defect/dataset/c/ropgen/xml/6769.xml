<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6769.c" pos:tabs="8"><function pos:start="1:1" pos:end="90:38"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">alloc_f</name><parameter_list pos:start="1:19" pos:end="1:63">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:49"><decl pos:start="1:42" pos:end="1:49"><type pos:start="1:42" pos:end="1:49"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:49">argc</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="90:38">{<block_content pos:start="5:5" pos:end="90:38">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>, <decl pos:start="5:21" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:21" pos:end="5:30">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">nb_sectors</name></decl>, <decl pos:start="7:21" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:29">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:15"><name pos:start="9:10" pos:end="9:11">s1</name><index pos:start="9:12" pos:end="9:15">[<expr pos:start="9:13" pos:end="9:14"><literal type="number" pos:start="9:13" pos:end="9:14">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">num</name></decl>, <decl pos:start="11:14" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:22">sum_alloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:10">offset</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:28"><name pos:start="17:14" pos:end="17:19">cvtnum</name><argument_list pos:start="17:20" pos:end="17:28">(<argument pos:start="17:21" pos:end="17:27"><expr pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:27"><name pos:start="17:21" pos:end="17:24">argv</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="90:38"><if pos:start="19:5" pos:end="24:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:14">offset</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>)</condition> <block pos:start="19:21" pos:end="24:5">{<block_content pos:start="21:9" pos:end="21:63">

        <expr_stmt pos:start="21:9" pos:end="21:63"><expr pos:start="21:9" pos:end="21:62"><call pos:start="21:9" pos:end="21:62"><name pos:start="21:9" pos:end="21:14">printf</name><argument_list pos:start="21:15" pos:end="21:62">(<argument pos:start="21:16" pos:end="21:52"><expr pos:start="21:16" pos:end="21:52"><literal type="string" pos:start="21:16" pos:end="21:52">"non-numeric offset argument -- %s\n"</literal></expr></argument>, <argument pos:start="21:55" pos:end="21:61"><expr pos:start="21:55" pos:end="21:61"><name pos:start="21:55" pos:end="21:61"><name pos:start="21:55" pos:end="21:58">argv</name><index pos:start="21:59" pos:end="21:61">[<expr pos:start="21:60" pos:end="21:60"><literal type="number" pos:start="21:60" pos:end="21:60">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if> <if type="elseif" pos:start="24:7" pos:end="90:38">else if <condition pos:start="24:15" pos:end="24:30">(<expr pos:start="24:16" pos:end="24:29"><name pos:start="24:16" pos:end="24:21">offset</name> <operator pos:start="24:23" pos:end="24:23">&amp;</operator> <literal type="number" pos:start="24:25" pos:end="24:29">0x1ff</literal></expr>)</condition> <block pos:start="24:32" pos:end="90:38">{<block_content pos:start="26:9" pos:end="90:38">

        <expr_stmt pos:start="26:9" pos:end="28:23"><expr pos:start="26:9" pos:end="28:22"><call pos:start="26:9" pos:end="28:22"><name pos:start="26:9" pos:end="26:14">printf</name><argument_list pos:start="26:15" pos:end="28:22">(<argument pos:start="26:16" pos:end="26:59"><expr pos:start="26:16" pos:end="26:59"><literal type="string" pos:start="26:16" pos:end="26:25">"offset %"</literal> <name pos:start="26:27" pos:end="26:32">PRId64</name> <literal type="string" pos:start="26:34" pos:end="26:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="28:16" pos:end="28:21"><expr pos:start="28:16" pos:end="28:21"><name pos:start="28:16" pos:end="28:21">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <if_stmt pos:start="34:5" pos:end="90:38"><if pos:start="34:5" pos:end="90:38">if <condition pos:start="34:8" pos:end="34:18">(<expr pos:start="34:9" pos:end="34:17"><name pos:start="34:9" pos:end="34:12">argc</name> <operator pos:start="34:14" pos:end="34:15">==</operator> <literal type="number" pos:start="34:17" pos:end="34:17">3</literal></expr>)</condition> <block pos:start="34:20" pos:end="90:38">{<block_content pos:start="36:9" pos:end="90:38">

        <expr_stmt pos:start="36:9" pos:end="36:37"><expr pos:start="36:9" pos:end="36:36"><name pos:start="36:9" pos:end="36:18">nb_sectors</name> <operator pos:start="36:20" pos:end="36:20">=</operator> <call pos:start="36:22" pos:end="36:36"><name pos:start="36:22" pos:end="36:27">cvtnum</name><argument_list pos:start="36:28" pos:end="36:36">(<argument pos:start="36:29" pos:end="36:35"><expr pos:start="36:29" pos:end="36:35"><name pos:start="36:29" pos:end="36:35"><name pos:start="36:29" pos:end="36:32">argv</name><index pos:start="36:33" pos:end="36:35">[<expr pos:start="36:34" pos:end="36:34"><literal type="number" pos:start="36:34" pos:end="36:34">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="38:9" pos:end="90:38"><if pos:start="38:9" pos:end="44:5">if <condition pos:start="38:12" pos:end="38:27">(<expr pos:start="38:13" pos:end="38:26"><name pos:start="38:13" pos:end="38:22">nb_sectors</name> <operator pos:start="38:24" pos:end="38:24">&lt;</operator> <literal type="number" pos:start="38:26" pos:end="38:26">0</literal></expr>)</condition> <block pos:start="38:29" pos:end="44:5">{<block_content pos:start="40:13" pos:end="40:67">

            <expr_stmt pos:start="40:13" pos:end="40:67"><expr pos:start="40:13" pos:end="40:66"><call pos:start="40:13" pos:end="40:66"><name pos:start="40:13" pos:end="40:18">printf</name><argument_list pos:start="40:19" pos:end="40:66">(<argument pos:start="40:20" pos:end="40:56"><expr pos:start="40:20" pos:end="40:56"><literal type="string" pos:start="40:20" pos:end="40:56">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="40:59" pos:end="40:65"><expr pos:start="40:59" pos:end="40:65"><name pos:start="40:59" pos:end="40:65"><name pos:start="40:59" pos:end="40:62">argv</name><index pos:start="40:63" pos:end="40:65">[<expr pos:start="40:64" pos:end="40:64"><literal type="number" pos:start="40:64" pos:end="40:64">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="44:7" pos:end="90:38">else <block pos:start="44:12" pos:end="90:38">{<block_content pos:start="46:9" pos:end="90:38">

        <expr_stmt pos:start="46:9" pos:end="46:23"><expr pos:start="46:9" pos:end="46:22"><name pos:start="46:9" pos:end="46:18">nb_sectors</name> <operator pos:start="46:20" pos:end="46:20">=</operator> <literal type="number" pos:start="46:22" pos:end="46:22">1</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:13">remaining</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <name pos:start="51:17" pos:end="51:26">nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:18"><expr pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:13">sum_alloc</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:29"><expr pos:start="55:5" pos:end="55:28"><name pos:start="55:5" pos:end="55:14">sector_num</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:23">offset</name> <operator pos:start="55:25" pos:end="55:26">&gt;&gt;</operator> <literal type="number" pos:start="55:28" pos:end="55:28">9</literal></expr>;</expr_stmt>

    <while pos:start="57:5" pos:end="90:38">while <condition pos:start="57:11" pos:end="57:21">(<expr pos:start="57:12" pos:end="57:20"><name pos:start="57:12" pos:end="57:20">remaining</name></expr>)</condition> <block pos:start="57:23" pos:end="90:38">{<block_content pos:start="59:9" pos:end="90:38">

        <expr_stmt pos:start="59:9" pos:end="59:65"><expr pos:start="59:9" pos:end="59:64"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:64"><name pos:start="59:15" pos:end="59:31">bdrv_is_allocated</name><argument_list pos:start="59:32" pos:end="59:64">(<argument pos:start="59:33" pos:end="59:34"><expr pos:start="59:33" pos:end="59:34"><name pos:start="59:33" pos:end="59:34">bs</name></expr></argument>, <argument pos:start="59:37" pos:end="59:46"><expr pos:start="59:37" pos:end="59:46"><name pos:start="59:37" pos:end="59:46">sector_num</name></expr></argument>, <argument pos:start="59:49" pos:end="59:57"><expr pos:start="59:49" pos:end="59:57"><name pos:start="59:49" pos:end="59:57">remaining</name></expr></argument>, <argument pos:start="59:60" pos:end="59:63"><expr pos:start="59:60" pos:end="59:63"><operator pos:start="59:60" pos:end="59:60">&amp;</operator><name pos:start="59:61" pos:end="59:63">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18">sector_num</name> <operator pos:start="65:20" pos:end="65:21">+=</operator> <name pos:start="65:23" pos:end="65:25">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:25"><expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:17">remaining</name> <operator pos:start="67:19" pos:end="67:20">-=</operator> <name pos:start="67:22" pos:end="67:24">num</name></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="90:38"><if pos:start="69:9" pos:end="90:38">if <condition pos:start="69:12" pos:end="69:16">(<expr pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">ret</name></expr>)</condition> <block pos:start="69:18" pos:end="90:38">{<block_content pos:start="71:13" pos:end="90:38">

            <expr_stmt pos:start="71:13" pos:end="71:29"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:21">sum_alloc</name> <operator pos:start="71:23" pos:end="71:24">+=</operator> <name pos:start="71:26" pos:end="71:28">num</name></expr>;</expr_stmt>


        <if_stmt pos:start="74:9" pos:end="90:38"><if pos:start="74:9" pos:end="90:38">if <condition pos:start="74:12" pos:end="74:21">(<expr pos:start="74:13" pos:end="74:20"><name pos:start="74:13" pos:end="74:15">num</name> <operator pos:start="74:17" pos:end="74:18">==</operator> <literal type="number" pos:start="74:20" pos:end="74:20">0</literal></expr>)</condition> <block pos:start="74:23" pos:end="90:38">{<block_content pos:start="76:13" pos:end="90:38">

            <expr_stmt pos:start="76:13" pos:end="76:36"><expr pos:start="76:13" pos:end="76:35"><name pos:start="76:13" pos:end="76:22">nb_sectors</name> <operator pos:start="76:24" pos:end="76:25">-=</operator> <name pos:start="76:27" pos:end="76:35">remaining</name></expr>;</expr_stmt>

            <expr_stmt pos:start="78:13" pos:end="78:26"><expr pos:start="78:13" pos:end="78:25"><name pos:start="78:13" pos:end="78:21">remaining</name> <operator pos:start="78:23" pos:end="78:23">=</operator> <literal type="number" pos:start="78:25" pos:end="78:25">0</literal></expr>;</expr_stmt>





    <expr_stmt pos:start="84:5" pos:end="84:35"><expr pos:start="84:5" pos:end="84:34"><call pos:start="84:5" pos:end="84:34"><name pos:start="84:5" pos:end="84:10">cvtstr</name><argument_list pos:start="84:11" pos:end="84:34">(<argument pos:start="84:12" pos:end="84:17"><expr pos:start="84:12" pos:end="84:17"><name pos:start="84:12" pos:end="84:17">offset</name></expr></argument>, <argument pos:start="84:20" pos:end="84:21"><expr pos:start="84:20" pos:end="84:21"><name pos:start="84:20" pos:end="84:21">s1</name></expr></argument>, <argument pos:start="84:24" pos:end="84:33"><expr pos:start="84:24" pos:end="84:33"><sizeof pos:start="84:24" pos:end="84:33">sizeof<argument_list pos:start="84:30" pos:end="84:33">(<argument pos:start="84:31" pos:end="84:32"><expr pos:start="84:31" pos:end="84:32"><name pos:start="84:31" pos:end="84:32">s1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="88:5" pos:end="90:38"><expr pos:start="88:5" pos:end="90:37"><call pos:start="88:5" pos:end="90:37"><name pos:start="88:5" pos:end="88:10">printf</name><argument_list pos:start="88:11" pos:end="90:37">(<argument pos:start="88:12" pos:end="88:51"><expr pos:start="88:12" pos:end="88:51"><literal type="string" pos:start="88:12" pos:end="88:51">"%d/%d sectors allocated at offset %s\n"</literal></expr></argument>,

           <argument pos:start="90:12" pos:end="90:20"><expr pos:start="90:12" pos:end="90:20"><name pos:start="90:12" pos:end="90:20">sum_alloc</name></expr></argument>, <argument pos:start="90:23" pos:end="90:32"><expr pos:start="90:23" pos:end="90:32"><name pos:start="90:23" pos:end="90:32">nb_sectors</name></expr></argument>, <argument pos:start="90:35" pos:end="90:36"><expr pos:start="90:35" pos:end="90:36"><name pos:start="90:35" pos:end="90:36">s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>

</unit>
