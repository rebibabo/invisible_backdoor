<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21263.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">img_check</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:29"><decl pos:start="1:22" pos:end="1:29"><type pos:start="1:22" pos:end="1:29"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:29">argc</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:35">char</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier><modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:5">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">filename</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:16"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">fmt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">BdrvCheckResult</name></type> <name pos:start="11:21" pos:end="11:26">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">fix</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">flags</name> <init pos:start="15:15" pos:end="15:28">= <expr pos:start="15:17" pos:end="15:28"><name pos:start="15:17" pos:end="15:28">BDRV_O_FLAGS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:7">fmt</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <name pos:start="19:11" pos:end="19:14">NULL</name></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="71:5">for<control pos:start="21:8" pos:end="21:11">(<init pos:start="21:9" pos:end="21:9">;</init><condition pos:start="21:10" pos:end="21:10">;</condition><incr/>)</control> <block pos:start="21:13" pos:end="71:5">{<block_content pos:start="23:9" pos:end="69:9">

        <expr_stmt pos:start="23:9" pos:end="23:40"><expr pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:9">c</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:39"><name pos:start="23:13" pos:end="23:18">getopt</name><argument_list pos:start="23:19" pos:end="23:39">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">argc</name></expr></argument>, <argument pos:start="23:26" pos:end="23:29"><expr pos:start="23:26" pos:end="23:29"><name pos:start="23:26" pos:end="23:29">argv</name></expr></argument>, <argument pos:start="23:32" pos:end="23:38"><expr pos:start="23:32" pos:end="23:38"><literal type="string" pos:start="23:32" pos:end="23:38">"f:hr:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:13">c</name> <operator pos:start="25:15" pos:end="25:16">==</operator> <operator pos:start="25:18" pos:end="25:18">-</operator><literal type="number" pos:start="25:19" pos:end="25:19">1</literal></expr>)</condition> <block pos:start="25:22" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="31:9" pos:end="69:9">switch<condition pos:start="31:15" pos:end="31:17">(<expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">c</name></expr>)</condition> <block pos:start="31:19" pos:end="69:9">{<block_content pos:start="33:9" pos:end="67:18">

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">'?'</literal></expr>:</case>

        <case pos:start="35:9" pos:end="35:17">case <expr pos:start="35:14" pos:end="35:16"><literal type="char" pos:start="35:14" pos:end="35:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:19"><expr pos:start="37:13" pos:end="37:18"><call pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:16">help</name><argument_list pos:start="37:17" pos:end="37:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        <case pos:start="41:9" pos:end="41:17">case <expr pos:start="41:14" pos:end="41:16"><literal type="char" pos:start="41:14" pos:end="41:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="43:13" pos:end="43:25"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">fmt</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        <case pos:start="47:9" pos:end="47:17">case <expr pos:start="47:14" pos:end="47:16"><literal type="char" pos:start="47:14" pos:end="47:16">'r'</literal></expr>:</case>

            <expr_stmt pos:start="49:13" pos:end="49:33"><expr pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:17">flags</name> <operator pos:start="49:19" pos:end="49:20">|=</operator> <name pos:start="49:22" pos:end="49:32">BDRV_O_RDWR</name></expr>;</expr_stmt>



            <if_stmt pos:start="53:13" pos:end="65:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:41">(<expr pos:start="53:17" pos:end="53:40"><operator pos:start="53:17" pos:end="53:17">!</operator><call pos:start="53:18" pos:end="53:40"><name pos:start="53:18" pos:end="53:23">strcmp</name><argument_list pos:start="53:24" pos:end="53:40">(<argument pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:30">optarg</name></expr></argument>, <argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><literal type="string" pos:start="53:33" pos:end="53:39">"leaks"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:43" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:37">

                <expr_stmt pos:start="55:17" pos:end="55:37"><expr pos:start="55:17" pos:end="55:36"><name pos:start="55:17" pos:end="55:19">fix</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:36">BDRV_FIX_LEAKS</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="61:13">else if <condition pos:start="57:23" pos:end="57:46">(<expr pos:start="57:24" pos:end="57:45"><operator pos:start="57:24" pos:end="57:24">!</operator><call pos:start="57:25" pos:end="57:45"><name pos:start="57:25" pos:end="57:30">strcmp</name><argument_list pos:start="57:31" pos:end="57:45">(<argument pos:start="57:32" pos:end="57:37"><expr pos:start="57:32" pos:end="57:37"><name pos:start="57:32" pos:end="57:37">optarg</name></expr></argument>, <argument pos:start="57:40" pos:end="57:44"><expr pos:start="57:40" pos:end="57:44"><literal type="string" pos:start="57:40" pos:end="57:44">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:48" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:55">

                <expr_stmt pos:start="59:17" pos:end="59:55"><expr pos:start="59:17" pos:end="59:54"><name pos:start="59:17" pos:end="59:19">fix</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:36">BDRV_FIX_LEAKS</name> <operator pos:start="59:38" pos:end="59:38">|</operator> <name pos:start="59:40" pos:end="59:54">BDRV_FIX_ERRORS</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="61:15" pos:end="65:13">else <block pos:start="61:20" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:23">

                <expr_stmt pos:start="63:17" pos:end="63:23"><expr pos:start="63:17" pos:end="63:22"><call pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:20">help</name><argument_list pos:start="63:21" pos:end="63:22">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:23">(<expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:14">optind</name> <operator pos:start="73:16" pos:end="73:17">&gt;=</operator> <name pos:start="73:19" pos:end="73:22">argc</name></expr>)</condition> <block pos:start="73:25" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:15">

        <expr_stmt pos:start="75:9" pos:end="75:15"><expr pos:start="75:9" pos:end="75:14"><call pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:12">help</name><argument_list pos:start="75:13" pos:end="75:14">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:12">filename</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <name pos:start="79:16" pos:end="79:29"><name pos:start="79:16" pos:end="79:19">argv</name><index pos:start="79:20" pos:end="79:29">[<expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:26">optind</name><operator pos:start="79:27" pos:end="79:28">++</operator></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:45"><expr pos:start="83:5" pos:end="83:44"><name pos:start="83:5" pos:end="83:6">bs</name> <operator pos:start="83:8" pos:end="83:8">=</operator> <call pos:start="83:10" pos:end="83:44"><name pos:start="83:10" pos:end="83:22">bdrv_new_open</name><argument_list pos:start="83:23" pos:end="83:44">(<argument pos:start="83:24" pos:end="83:31"><expr pos:start="83:24" pos:end="83:31"><name pos:start="83:24" pos:end="83:31">filename</name></expr></argument>, <argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">fmt</name></expr></argument>, <argument pos:start="83:39" pos:end="83:43"><expr pos:start="83:39" pos:end="83:43"><name pos:start="83:39" pos:end="83:43">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:11">bs</name></expr>)</condition> <block pos:start="85:14" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:17">

        <return pos:start="87:9" pos:end="87:17">return <expr pos:start="87:16" pos:end="87:16"><literal type="number" pos:start="87:16" pos:end="87:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:38"><name pos:start="91:11" pos:end="91:20">bdrv_check</name><argument_list pos:start="91:21" pos:end="91:38">(<argument pos:start="91:22" pos:end="91:23"><expr pos:start="91:22" pos:end="91:23"><name pos:start="91:22" pos:end="91:23">bs</name></expr></argument>, <argument pos:start="91:26" pos:end="91:32"><expr pos:start="91:26" pos:end="91:32"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:32">result</name></expr></argument>, <argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">fix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:24">(<expr pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:14">==</operator> <operator pos:start="95:16" pos:end="95:16">-</operator><name pos:start="95:17" pos:end="95:23">ENOTSUP</name></expr>)</condition> <block pos:start="95:26" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:17">

        <expr_stmt pos:start="97:9" pos:end="97:66"><expr pos:start="97:9" pos:end="97:65"><call pos:start="97:9" pos:end="97:65"><name pos:start="97:9" pos:end="97:20">error_report</name><argument_list pos:start="97:21" pos:end="97:65">(<argument pos:start="97:22" pos:end="97:64"><expr pos:start="97:22" pos:end="97:64"><literal type="string" pos:start="97:22" pos:end="97:64">"This image format does not support checks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:24"><expr pos:start="99:9" pos:end="99:23"><call pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:19">bdrv_delete</name><argument_list pos:start="99:20" pos:end="99:23">(<argument pos:start="99:21" pos:end="99:22"><expr pos:start="99:21" pos:end="99:22"><name pos:start="99:21" pos:end="99:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:17">return <expr pos:start="101:16" pos:end="101:16"><literal type="number" pos:start="101:16" pos:end="101:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="123:5"><if pos:start="107:5" pos:end="123:5">if <condition pos:start="107:8" pos:end="107:55">(<expr pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:14">result</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:32">corruptions_fixed</name></name> <operator pos:start="107:34" pos:end="107:35">||</operator> <name pos:start="107:37" pos:end="107:54"><name pos:start="107:37" pos:end="107:42">result</name><operator pos:start="107:43" pos:end="107:43">.</operator><name pos:start="107:44" pos:end="107:54">leaks_fixed</name></name></expr>)</condition> <block pos:start="107:57" pos:end="123:5">{<block_content pos:start="109:9" pos:end="121:41">

        <expr_stmt pos:start="109:9" pos:end="119:41"><expr pos:start="109:9" pos:end="119:40"><call pos:start="109:9" pos:end="119:40"><name pos:start="109:9" pos:end="109:14">printf</name><argument_list pos:start="109:15" pos:end="119:40">(<argument pos:start="109:16" pos:end="115:57"><expr pos:start="109:16" pos:end="115:57"><literal type="string" pos:start="109:16" pos:end="109:75">"The following inconsistencies were found and repaired:\n\n"</literal>

               <literal type="string" pos:start="111:16" pos:end="111:41">"    %d leaked clusters\n"</literal>

               <literal type="string" pos:start="113:16" pos:end="113:39">"    %d corruptions\n\n"</literal>

               <literal type="string" pos:start="115:16" pos:end="115:57">"Double checking the fixed image now...\n"</literal></expr></argument>,

               <argument pos:start="117:16" pos:end="117:33"><expr pos:start="117:16" pos:end="117:33"><name pos:start="117:16" pos:end="117:33"><name pos:start="117:16" pos:end="117:21">result</name><operator pos:start="117:22" pos:end="117:22">.</operator><name pos:start="117:23" pos:end="117:33">leaks_fixed</name></name></expr></argument>,

               <argument pos:start="119:16" pos:end="119:39"><expr pos:start="119:16" pos:end="119:39"><name pos:start="119:16" pos:end="119:39"><name pos:start="119:16" pos:end="119:21">result</name><operator pos:start="119:22" pos:end="119:22">.</operator><name pos:start="119:23" pos:end="119:39">corruptions_fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="121:40"><name pos:start="121:15" pos:end="121:24">bdrv_check</name><argument_list pos:start="121:25" pos:end="121:40">(<argument pos:start="121:26" pos:end="121:27"><expr pos:start="121:26" pos:end="121:27"><name pos:start="121:26" pos:end="121:27">bs</name></expr></argument>, <argument pos:start="121:30" pos:end="121:36"><expr pos:start="121:30" pos:end="121:36"><operator pos:start="121:30" pos:end="121:30">&amp;</operator><name pos:start="121:31" pos:end="121:36">result</name></expr></argument>, <argument pos:start="121:39" pos:end="121:39"><expr pos:start="121:39" pos:end="121:39"><literal type="number" pos:start="121:39" pos:end="121:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="127:5" pos:end="167:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:69">(<expr pos:start="127:9" pos:end="127:68"><operator pos:start="127:9" pos:end="127:9">!</operator><operator pos:start="127:10" pos:end="127:10">(</operator><name pos:start="127:11" pos:end="127:28"><name pos:start="127:11" pos:end="127:16">result</name><operator pos:start="127:17" pos:end="127:17">.</operator><name pos:start="127:18" pos:end="127:28">corruptions</name></name> <operator pos:start="127:30" pos:end="127:31">||</operator> <name pos:start="127:33" pos:end="127:44"><name pos:start="127:33" pos:end="127:38">result</name><operator pos:start="127:39" pos:end="127:39">.</operator><name pos:start="127:40" pos:end="127:44">leaks</name></name> <operator pos:start="127:46" pos:end="127:47">||</operator> <name pos:start="127:49" pos:end="127:67"><name pos:start="127:49" pos:end="127:54">result</name><operator pos:start="127:55" pos:end="127:55">.</operator><name pos:start="127:56" pos:end="127:67">check_errors</name></name><operator pos:start="127:68" pos:end="127:68">)</operator></expr>)</condition> <block pos:start="127:71" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:55">

        <expr_stmt pos:start="129:9" pos:end="129:55"><expr pos:start="129:9" pos:end="129:54"><call pos:start="129:9" pos:end="129:54"><name pos:start="129:9" pos:end="129:14">printf</name><argument_list pos:start="129:15" pos:end="129:54">(<argument pos:start="129:16" pos:end="129:53"><expr pos:start="129:16" pos:end="129:53"><literal type="string" pos:start="129:16" pos:end="129:53">"No errors were found on the image.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="167:5">else <block pos:start="131:12" pos:end="167:5">{<block_content pos:start="133:9" pos:end="165:9">

        <if_stmt pos:start="133:9" pos:end="143:9"><if pos:start="133:9" pos:end="143:9">if <condition pos:start="133:12" pos:end="133:31">(<expr pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:18">result</name><operator pos:start="133:19" pos:end="133:19">.</operator><name pos:start="133:20" pos:end="133:30">corruptions</name></name></expr>)</condition> <block pos:start="133:33" pos:end="143:9">{<block_content pos:start="135:13" pos:end="141:36">

            <expr_stmt pos:start="135:13" pos:end="141:36"><expr pos:start="135:13" pos:end="141:35"><call pos:start="135:13" pos:end="141:35"><name pos:start="135:13" pos:end="135:18">printf</name><argument_list pos:start="135:19" pos:end="141:35">(<argument pos:start="135:20" pos:end="139:35"><expr pos:start="135:20" pos:end="139:35"><literal type="string" pos:start="135:20" pos:end="135:59">"\n%d errors were found on the image.\n"</literal>

                <literal type="string" pos:start="137:17" pos:end="137:72">"Data may be corrupted, or further writes to the image "</literal>

                <literal type="string" pos:start="139:17" pos:end="139:35">"may corrupt it.\n"</literal></expr></argument>,

                <argument pos:start="141:17" pos:end="141:34"><expr pos:start="141:17" pos:end="141:34"><name pos:start="141:17" pos:end="141:34"><name pos:start="141:17" pos:end="141:22">result</name><operator pos:start="141:23" pos:end="141:23">.</operator><name pos:start="141:24" pos:end="141:34">corruptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="147:9" pos:end="155:9"><if pos:start="147:9" pos:end="155:9">if <condition pos:start="147:12" pos:end="147:25">(<expr pos:start="147:13" pos:end="147:24"><name pos:start="147:13" pos:end="147:24"><name pos:start="147:13" pos:end="147:18">result</name><operator pos:start="147:19" pos:end="147:19">.</operator><name pos:start="147:20" pos:end="147:24">leaks</name></name></expr>)</condition> <block pos:start="147:27" pos:end="155:9">{<block_content pos:start="149:13" pos:end="153:30">

            <expr_stmt pos:start="149:13" pos:end="153:30"><expr pos:start="149:13" pos:end="153:29"><call pos:start="149:13" pos:end="153:29"><name pos:start="149:13" pos:end="149:18">printf</name><argument_list pos:start="149:19" pos:end="153:29">(<argument pos:start="149:20" pos:end="151:72"><expr pos:start="149:20" pos:end="151:72"><literal type="string" pos:start="149:20" pos:end="149:68">"\n%d leaked clusters were found on the image.\n"</literal>

                <literal type="string" pos:start="151:17" pos:end="151:72">"This means waste of disk space, but no harm to data.\n"</literal></expr></argument>,

                <argument pos:start="153:17" pos:end="153:28"><expr pos:start="153:17" pos:end="153:28"><name pos:start="153:17" pos:end="153:28"><name pos:start="153:17" pos:end="153:22">result</name><operator pos:start="153:23" pos:end="153:23">.</operator><name pos:start="153:24" pos:end="153:28">leaks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="159:9" pos:end="165:9"><if pos:start="159:9" pos:end="165:9">if <condition pos:start="159:12" pos:end="159:32">(<expr pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:31"><name pos:start="159:13" pos:end="159:18">result</name><operator pos:start="159:19" pos:end="159:19">.</operator><name pos:start="159:20" pos:end="159:31">check_errors</name></name></expr>)</condition> <block pos:start="159:34" pos:end="165:9">{<block_content pos:start="161:13" pos:end="163:37">

            <expr_stmt pos:start="161:13" pos:end="163:37"><expr pos:start="161:13" pos:end="163:36"><call pos:start="161:13" pos:end="163:36"><name pos:start="161:13" pos:end="161:18">printf</name><argument_list pos:start="161:19" pos:end="163:36">(<argument pos:start="161:20" pos:end="161:75"><expr pos:start="161:20" pos:end="161:75"><literal type="string" pos:start="161:20" pos:end="161:75">"\n%d internal errors have occurred during the check.\n"</literal></expr></argument>,

                <argument pos:start="163:17" pos:end="163:35"><expr pos:start="163:17" pos:end="163:35"><name pos:start="163:17" pos:end="163:35"><name pos:start="163:17" pos:end="163:22">result</name><operator pos:start="163:23" pos:end="163:23">.</operator><name pos:start="163:24" pos:end="163:35">check_errors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="181:5">if <condition pos:start="171:8" pos:end="171:77">(<expr pos:start="171:9" pos:end="171:76"><name pos:start="171:9" pos:end="171:33"><name pos:start="171:9" pos:end="171:14">result</name><operator pos:start="171:15" pos:end="171:15">.</operator><name pos:start="171:16" pos:end="171:18">bfi</name><operator pos:start="171:19" pos:end="171:19">.</operator><name pos:start="171:20" pos:end="171:33">total_clusters</name></name> <operator pos:start="171:35" pos:end="171:36">!=</operator> <literal type="number" pos:start="171:38" pos:end="171:38">0</literal> <operator pos:start="171:40" pos:end="171:41">&amp;&amp;</operator> <name pos:start="171:43" pos:end="171:71"><name pos:start="171:43" pos:end="171:48">result</name><operator pos:start="171:49" pos:end="171:49">.</operator><name pos:start="171:50" pos:end="171:52">bfi</name><operator pos:start="171:53" pos:end="171:53">.</operator><name pos:start="171:54" pos:end="171:71">allocated_clusters</name></name> <operator pos:start="171:73" pos:end="171:74">!=</operator> <literal type="number" pos:start="171:76" pos:end="171:76">0</literal></expr>)</condition> <block pos:start="171:79" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:80">

        <expr_stmt pos:start="173:9" pos:end="179:80"><expr pos:start="173:9" pos:end="179:79"><call pos:start="173:9" pos:end="179:79"><name pos:start="173:9" pos:end="173:14">printf</name><argument_list pos:start="173:15" pos:end="179:79">(<argument pos:start="173:16" pos:end="173:81"><expr pos:start="173:16" pos:end="173:81"><literal type="string" pos:start="173:16" pos:end="173:18">"%"</literal> <name pos:start="173:20" pos:end="173:25">PRId64</name> <literal type="string" pos:start="173:27" pos:end="173:30">"/%"</literal> <name pos:start="173:32" pos:end="173:37">PRId64</name> <literal type="string" pos:start="173:39" pos:end="173:81">"= %0.2f%% allocated, %0.2f%% fragmented\n"</literal></expr></argument>,

        <argument pos:start="175:9" pos:end="175:37"><expr pos:start="175:9" pos:end="175:37"><name pos:start="175:9" pos:end="175:37"><name pos:start="175:9" pos:end="175:14">result</name><operator pos:start="175:15" pos:end="175:15">.</operator><name pos:start="175:16" pos:end="175:18">bfi</name><operator pos:start="175:19" pos:end="175:19">.</operator><name pos:start="175:20" pos:end="175:37">allocated_clusters</name></name></expr></argument>, <argument pos:start="175:40" pos:end="175:64"><expr pos:start="175:40" pos:end="175:64"><name pos:start="175:40" pos:end="175:64"><name pos:start="175:40" pos:end="175:45">result</name><operator pos:start="175:46" pos:end="175:46">.</operator><name pos:start="175:47" pos:end="175:49">bfi</name><operator pos:start="175:50" pos:end="175:50">.</operator><name pos:start="175:51" pos:end="175:64">total_clusters</name></name></expr></argument>,

        <argument pos:start="177:9" pos:end="177:73"><expr pos:start="177:9" pos:end="177:73"><name pos:start="177:9" pos:end="177:37"><name pos:start="177:9" pos:end="177:14">result</name><operator pos:start="177:15" pos:end="177:15">.</operator><name pos:start="177:16" pos:end="177:18">bfi</name><operator pos:start="177:19" pos:end="177:19">.</operator><name pos:start="177:20" pos:end="177:37">allocated_clusters</name></name> <operator pos:start="177:39" pos:end="177:39">*</operator> <literal type="number" pos:start="177:41" pos:end="177:45">100.0</literal> <operator pos:start="177:47" pos:end="177:47">/</operator> <name pos:start="177:49" pos:end="177:73"><name pos:start="177:49" pos:end="177:54">result</name><operator pos:start="177:55" pos:end="177:55">.</operator><name pos:start="177:56" pos:end="177:58">bfi</name><operator pos:start="177:59" pos:end="177:59">.</operator><name pos:start="177:60" pos:end="177:73">total_clusters</name></name></expr></argument>,

        <argument pos:start="179:9" pos:end="179:78"><expr pos:start="179:9" pos:end="179:78"><name pos:start="179:9" pos:end="179:38"><name pos:start="179:9" pos:end="179:14">result</name><operator pos:start="179:15" pos:end="179:15">.</operator><name pos:start="179:16" pos:end="179:18">bfi</name><operator pos:start="179:19" pos:end="179:19">.</operator><name pos:start="179:20" pos:end="179:38">fragmented_clusters</name></name> <operator pos:start="179:40" pos:end="179:40">*</operator> <literal type="number" pos:start="179:42" pos:end="179:46">100.0</literal> <operator pos:start="179:48" pos:end="179:48">/</operator> <name pos:start="179:50" pos:end="179:78"><name pos:start="179:50" pos:end="179:55">result</name><operator pos:start="179:56" pos:end="179:56">.</operator><name pos:start="179:57" pos:end="179:59">bfi</name><operator pos:start="179:60" pos:end="179:60">.</operator><name pos:start="179:61" pos:end="179:78">allocated_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:20"><expr pos:start="185:5" pos:end="185:19"><call pos:start="185:5" pos:end="185:19"><name pos:start="185:5" pos:end="185:15">bdrv_delete</name><argument_list pos:start="185:16" pos:end="185:19">(<argument pos:start="185:17" pos:end="185:18"><expr pos:start="185:17" pos:end="185:18"><name pos:start="185:17" pos:end="185:18">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="189:5" pos:end="199:5"><if pos:start="189:5" pos:end="199:5">if <condition pos:start="189:8" pos:end="189:39">(<expr pos:start="189:9" pos:end="189:38"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">&lt;</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal> <operator pos:start="189:17" pos:end="189:18">||</operator> <name pos:start="189:20" pos:end="189:38"><name pos:start="189:20" pos:end="189:25">result</name><operator pos:start="189:26" pos:end="189:26">.</operator><name pos:start="189:27" pos:end="189:38">check_errors</name></name></expr>)</condition> <block pos:start="189:41" pos:end="199:5">{<block_content pos:start="191:9" pos:end="197:17">

        <expr_stmt pos:start="191:9" pos:end="195:28"><expr pos:start="191:9" pos:end="195:27"><call pos:start="191:9" pos:end="195:27"><name pos:start="191:9" pos:end="191:14">printf</name><argument_list pos:start="191:15" pos:end="195:27">(<argument pos:start="191:16" pos:end="193:68"><expr pos:start="191:16" pos:end="193:68"><literal type="string" pos:start="191:16" pos:end="191:63">"\nAn error has occurred during the check: %s\n"</literal>

            <literal type="string" pos:start="193:13" pos:end="193:68">"The check is not complete and may have missed error.\n"</literal></expr></argument>,

            <argument pos:start="195:13" pos:end="195:26"><expr pos:start="195:13" pos:end="195:26"><call pos:start="195:13" pos:end="195:26"><name pos:start="195:13" pos:end="195:20">strerror</name><argument_list pos:start="195:21" pos:end="195:26">(<argument pos:start="195:22" pos:end="195:25"><expr pos:start="195:22" pos:end="195:25"><operator pos:start="195:22" pos:end="195:22">-</operator><name pos:start="195:23" pos:end="195:25">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="197:9" pos:end="197:17">return <expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="215:5"><if pos:start="203:5" pos:end="207:5">if <condition pos:start="203:8" pos:end="203:27">(<expr pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:14">result</name><operator pos:start="203:15" pos:end="203:15">.</operator><name pos:start="203:16" pos:end="203:26">corruptions</name></name></expr>)</condition> <block pos:start="203:29" pos:end="207:5">{<block_content pos:start="205:9" pos:end="205:17">

        <return pos:start="205:9" pos:end="205:17">return <expr pos:start="205:16" pos:end="205:16"><literal type="number" pos:start="205:16" pos:end="205:16">2</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="207:7" pos:end="211:5">else if <condition pos:start="207:15" pos:end="207:28">(<expr pos:start="207:16" pos:end="207:27"><name pos:start="207:16" pos:end="207:27"><name pos:start="207:16" pos:end="207:21">result</name><operator pos:start="207:22" pos:end="207:22">.</operator><name pos:start="207:23" pos:end="207:27">leaks</name></name></expr>)</condition> <block pos:start="207:30" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:17">

        <return pos:start="209:9" pos:end="209:17">return <expr pos:start="209:16" pos:end="209:16"><literal type="number" pos:start="209:16" pos:end="209:16">3</literal></expr>;</return>

    </block_content>}</block></if> <else pos:start="211:7" pos:end="215:5">else <block pos:start="211:12" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:17">

        <return pos:start="213:9" pos:end="213:17">return <expr pos:start="213:16" pos:end="213:16"><literal type="number" pos:start="213:16" pos:end="213:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
