<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/32.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">huffman_decode</name><parameter_list pos:start="1:26" pos:end="3:59">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:42">MPADecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:57">GranuleDef</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">g</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:44"><decl pos:start="3:27" pos:end="3:44"><type pos:start="3:27" pos:end="3:44"><name pos:start="3:27" pos:end="3:33">int16_t</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:44">exponents</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:58">end_pos2</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="293:1">{<block_content pos:start="7:5" pos:end="291:13">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">s_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">last_pos</name></decl>, <decl pos:start="11:19" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:19" pos:end="11:27">bits_left</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">VLC</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:12">vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">end_pos</name> <init pos:start="15:17" pos:end="15:53">= <expr pos:start="15:19" pos:end="15:53"><call pos:start="15:19" pos:end="15:53"><name pos:start="15:19" pos:end="15:23">FFMIN</name><argument_list pos:start="15:24" pos:end="15:53">(<argument pos:start="15:25" pos:end="15:32"><expr pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:32">end_pos2</name></expr></argument>, <argument pos:start="15:35" pos:end="15:52"><expr pos:start="15:35" pos:end="15:52"><name pos:start="15:35" pos:end="15:52"><name pos:start="15:35" pos:end="15:35">s</name><operator pos:start="15:36" pos:end="15:37">-&gt;</operator><name pos:start="15:38" pos:end="15:39">gb</name><operator pos:start="15:40" pos:end="15:40">.</operator><name pos:start="15:41" pos:end="15:52">size_in_bits</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:45">/* low frequencies (called big values) */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">s_index</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <for pos:start="23:5" pos:end="181:5">for <control pos:start="23:9" pos:end="23:27">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:21"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <literal type="number" pos:start="23:21" pos:end="23:21">3</literal></expr>;</condition> <incr pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:24">i</name><operator pos:start="23:25" pos:end="23:26">++</operator></expr></incr>)</control> <block pos:start="23:29" pos:end="181:5">{<block_content pos:start="25:9" pos:end="179:9">

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:13"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:13">j</name></decl>, <decl pos:start="25:16" pos:end="25:16"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:16" pos:end="25:16">k</name></decl>, <decl pos:start="25:19" pos:end="25:19"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:19" pos:end="25:19">l</name></decl>, <decl pos:start="25:22" pos:end="25:28"><type ref="prev" pos:start="25:9" pos:end="25:11"/><name pos:start="25:22" pos:end="25:28">linbits</name></decl>;</decl_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:9">j</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:29"><name pos:start="27:13" pos:end="27:13">g</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:26">region_size</name><index pos:start="27:27" pos:end="27:29">[<expr pos:start="27:28" pos:end="27:28"><name pos:start="27:28" pos:end="27:28">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:13">j</name> <operator pos:start="29:15" pos:end="29:16">==</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt>

        <comment type="block" pos:start="33:9" pos:end="33:30">/* select vlc table */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:37"><expr pos:start="35:9" pos:end="35:36"><name pos:start="35:9" pos:end="35:9">k</name>       <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:36"><name pos:start="35:19" pos:end="35:19">g</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:33">table_select</name><index pos:start="35:34" pos:end="35:36">[<expr pos:start="35:35" pos:end="35:35"><name pos:start="35:35" pos:end="35:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:9">l</name>       <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:37"><name pos:start="37:19" pos:end="37:31">mpa_huff_data</name><index pos:start="37:32" pos:end="37:34">[<expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">k</name></expr>]</index><index pos:start="37:35" pos:end="37:37">[<expr pos:start="37:36" pos:end="37:36"><literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:15">linbits</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:37"><name pos:start="39:19" pos:end="39:31">mpa_huff_data</name><index pos:start="39:32" pos:end="39:34">[<expr pos:start="39:33" pos:end="39:33"><name pos:start="39:33" pos:end="39:33">k</name></expr>]</index><index pos:start="39:35" pos:end="39:37">[<expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:11">vlc</name>     <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:27">huff_vlc</name><index pos:start="41:28" pos:end="41:30">[<expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">l</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:15">(<expr pos:start="45:13" pos:end="45:14"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:14">l</name></expr>)</condition> <block pos:start="45:17" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:21">

            <expr_stmt pos:start="47:13" pos:end="47:77"><expr pos:start="47:13" pos:end="47:76"><call pos:start="47:13" pos:end="47:76"><name pos:start="47:13" pos:end="47:18">memset</name><argument_list pos:start="47:19" pos:end="47:76">(<argument pos:start="47:20" pos:end="47:41"><expr pos:start="47:20" pos:end="47:41"><operator pos:start="47:20" pos:end="47:20">&amp;</operator><name pos:start="47:21" pos:end="47:41"><name pos:start="47:21" pos:end="47:21">g</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:32">sb_hybrid</name><index pos:start="47:33" pos:end="47:41">[<expr pos:start="47:34" pos:end="47:40"><name pos:start="47:34" pos:end="47:40">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="47:44" pos:end="47:44"><expr pos:start="47:44" pos:end="47:44"><literal type="number" pos:start="47:44" pos:end="47:44">0</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:75"><expr pos:start="47:47" pos:end="47:75"><sizeof pos:start="47:47" pos:end="47:67">sizeof<argument_list pos:start="47:53" pos:end="47:67">(<argument pos:start="47:54" pos:end="47:66"><expr pos:start="47:54" pos:end="47:66"><operator pos:start="47:54" pos:end="47:54">*</operator><name pos:start="47:55" pos:end="47:66"><name pos:start="47:55" pos:end="47:55">g</name><operator pos:start="47:56" pos:end="47:57">-&gt;</operator><name pos:start="47:58" pos:end="47:66">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="47:69" pos:end="47:69">*</operator> <literal type="number" pos:start="47:71" pos:end="47:71">2</literal> <operator pos:start="47:73" pos:end="47:73">*</operator> <name pos:start="47:75" pos:end="47:75">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:19">s_index</name> <operator pos:start="49:21" pos:end="49:22">+=</operator> <literal type="number" pos:start="49:24" pos:end="49:24">2</literal> <operator pos:start="49:26" pos:end="49:26">*</operator> <name pos:start="49:28" pos:end="49:28">j</name></expr>;</expr_stmt>

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="57:51">/* read huffcode and compute each couple */</comment>

        <for pos:start="59:9" pos:end="179:9">for <control pos:start="59:13" pos:end="59:26">(<init pos:start="59:14" pos:end="59:14">;</init> <condition pos:start="59:16" pos:end="59:21"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:16">j</name> <operator pos:start="59:18" pos:end="59:18">&gt;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>;</condition> <incr pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:23">j</name><operator pos:start="59:24" pos:end="59:25">--</operator></expr></incr>)</control> <block pos:start="59:28" pos:end="179:9">{<block_content pos:start="61:13" pos:end="177:25">

            <decl_stmt pos:start="61:13" pos:end="61:31"><decl pos:start="61:13" pos:end="61:24"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:24">exponent</name></decl>, <decl pos:start="61:27" pos:end="61:27"><type ref="prev" pos:start="61:13" pos:end="61:15"/><name pos:start="61:27" pos:end="61:27">x</name></decl>, <decl pos:start="61:30" pos:end="61:30"><type ref="prev" pos:start="61:13" pos:end="61:15"/><name pos:start="61:30" pos:end="61:30">y</name></decl>;</decl_stmt>

            <decl_stmt pos:start="63:13" pos:end="63:18"><decl pos:start="63:13" pos:end="63:17"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:17">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="65:13" pos:end="65:45"><decl pos:start="65:13" pos:end="65:44"><type pos:start="65:13" pos:end="65:15"><name pos:start="65:13" pos:end="65:15">int</name></type> <name pos:start="65:17" pos:end="65:19">pos</name> <init pos:start="65:21" pos:end="65:44">= <expr pos:start="65:23" pos:end="65:44"><call pos:start="65:23" pos:end="65:44"><name pos:start="65:23" pos:end="65:36">get_bits_count</name><argument_list pos:start="65:37" pos:end="65:44">(<argument pos:start="65:38" pos:end="65:43"><expr pos:start="65:38" pos:end="65:43"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:39">s</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:43">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="69:13" pos:end="77:13"><if pos:start="69:13" pos:end="77:13">if <condition pos:start="69:16" pos:end="69:31">(<expr pos:start="69:17" pos:end="69:30"><name pos:start="69:17" pos:end="69:19">pos</name> <operator pos:start="69:21" pos:end="69:22">&gt;=</operator> <name pos:start="69:24" pos:end="69:30">end_pos</name></expr>)</condition><block pos:start="69:32" pos:end="77:13">{<block_content pos:start="71:17" pos:end="75:26">

                <expr_stmt pos:start="71:17" pos:end="71:60"><expr pos:start="71:17" pos:end="71:59"><call pos:start="71:17" pos:end="71:59"><name pos:start="71:17" pos:end="71:29">switch_buffer</name><argument_list pos:start="71:30" pos:end="71:59">(<argument pos:start="71:31" pos:end="71:31"><expr pos:start="71:31" pos:end="71:31"><name pos:start="71:31" pos:end="71:31">s</name></expr></argument>, <argument pos:start="71:34" pos:end="71:37"><expr pos:start="71:34" pos:end="71:37"><operator pos:start="71:34" pos:end="71:34">&amp;</operator><name pos:start="71:35" pos:end="71:37">pos</name></expr></argument>, <argument pos:start="71:40" pos:end="71:47"><expr pos:start="71:40" pos:end="71:47"><operator pos:start="71:40" pos:end="71:40">&amp;</operator><name pos:start="71:41" pos:end="71:47">end_pos</name></expr></argument>, <argument pos:start="71:50" pos:end="71:58"><expr pos:start="71:50" pos:end="71:58"><operator pos:start="71:50" pos:end="71:50">&amp;</operator><name pos:start="71:51" pos:end="71:58">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="73:17" pos:end="75:26"><if pos:start="73:17" pos:end="75:26">if <condition pos:start="73:20" pos:end="73:35">(<expr pos:start="73:21" pos:end="73:34"><name pos:start="73:21" pos:end="73:23">pos</name> <operator pos:start="73:25" pos:end="73:26">&gt;=</operator> <name pos:start="73:28" pos:end="73:34">end_pos</name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:26"><block_content pos:start="75:21" pos:end="75:26">

                    <break pos:start="75:21" pos:end="75:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:51"><expr pos:start="79:13" pos:end="79:50"><name pos:start="79:13" pos:end="79:13">y</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:50"><name pos:start="79:17" pos:end="79:24">get_vlc2</name><argument_list pos:start="79:25" pos:end="79:50">(<argument pos:start="79:26" pos:end="79:31"><expr pos:start="79:26" pos:end="79:31"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:31"><name pos:start="79:27" pos:end="79:27">s</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:31">gb</name></name></expr></argument>, <argument pos:start="79:34" pos:end="79:43"><expr pos:start="79:34" pos:end="79:43"><name pos:start="79:34" pos:end="79:43"><name pos:start="79:34" pos:end="79:36">vlc</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:43">table</name></name></expr></argument>, <argument pos:start="79:46" pos:end="79:46"><expr pos:start="79:46" pos:end="79:46"><literal type="number" pos:start="79:46" pos:end="79:46">7</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:49"><expr pos:start="79:49" pos:end="79:49"><literal type="number" pos:start="79:49" pos:end="79:49">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="83:13" pos:end="93:13"><if pos:start="83:13" pos:end="93:13">if <condition pos:start="83:16" pos:end="83:19">(<expr pos:start="83:17" pos:end="83:18"><operator pos:start="83:17" pos:end="83:17">!</operator><name pos:start="83:18" pos:end="83:18">y</name></expr>)</condition> <block pos:start="83:21" pos:end="93:13">{<block_content pos:start="85:17" pos:end="91:25">

                <expr_stmt pos:start="85:17" pos:end="87:44"><expr pos:start="85:17" pos:end="87:43"><name pos:start="85:17" pos:end="85:39"><name pos:start="85:17" pos:end="85:17">g</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:28">sb_hybrid</name><index pos:start="85:29" pos:end="85:39">[<expr pos:start="85:30" pos:end="85:36"><name pos:start="85:30" pos:end="85:36">s_index</name></expr>  ]</index></name> <operator pos:start="85:41" pos:end="85:41">=</operator>

                <name pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:17">g</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:28">sb_hybrid</name><index pos:start="87:29" pos:end="87:39">[<expr pos:start="87:30" pos:end="87:38"><name pos:start="87:30" pos:end="87:36">s_index</name><operator pos:start="87:37" pos:end="87:37">+</operator><literal type="number" pos:start="87:38" pos:end="87:38">1</literal></expr>]</index></name> <operator pos:start="87:41" pos:end="87:41">=</operator> <literal type="number" pos:start="87:43" pos:end="87:43">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:23">s_index</name> <operator pos:start="89:25" pos:end="89:26">+=</operator> <literal type="number" pos:start="89:28" pos:end="89:28">2</literal></expr>;</expr_stmt>

                <continue pos:start="91:17" pos:end="91:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="97:13" pos:end="97:41"><expr pos:start="97:13" pos:end="97:40"><name pos:start="97:13" pos:end="97:20">exponent</name><operator pos:start="97:21" pos:end="97:21">=</operator> <name pos:start="97:23" pos:end="97:40"><name pos:start="97:23" pos:end="97:31">exponents</name><index pos:start="97:32" pos:end="97:40">[<expr pos:start="97:33" pos:end="97:39"><name pos:start="97:33" pos:end="97:39">s_index</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="103:62"><expr pos:start="101:13" pos:end="103:61"><call pos:start="101:13" pos:end="103:61"><name pos:start="101:13" pos:end="101:19">ff_dlog</name><argument_list pos:start="101:20" pos:end="103:61">(<argument pos:start="101:21" pos:end="101:28"><expr pos:start="101:21" pos:end="101:28"><name pos:start="101:21" pos:end="101:28"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:28">avctx</name></name></expr></argument>, <argument pos:start="101:31" pos:end="101:65"><expr pos:start="101:31" pos:end="101:65"><literal type="string" pos:start="101:31" pos:end="101:65">"region=%d n=%d x=%d y=%d exp=%d\n"</literal></expr></argument>,

                    <argument pos:start="103:21" pos:end="103:21"><expr pos:start="103:21" pos:end="103:21"><name pos:start="103:21" pos:end="103:21">i</name></expr></argument>, <argument pos:start="103:24" pos:end="103:44"><expr pos:start="103:24" pos:end="103:44"><name pos:start="103:24" pos:end="103:40"><name pos:start="103:24" pos:end="103:24">g</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:37">region_size</name><index pos:start="103:38" pos:end="103:40">[<expr pos:start="103:39" pos:end="103:39"><name pos:start="103:39" pos:end="103:39">i</name></expr>]</index></name> <operator pos:start="103:42" pos:end="103:42">-</operator> <name pos:start="103:44" pos:end="103:44">j</name></expr></argument>, <argument pos:start="103:47" pos:end="103:47"><expr pos:start="103:47" pos:end="103:47"><name pos:start="103:47" pos:end="103:47">x</name></expr></argument>, <argument pos:start="103:50" pos:end="103:50"><expr pos:start="103:50" pos:end="103:50"><name pos:start="103:50" pos:end="103:50">y</name></expr></argument>, <argument pos:start="103:53" pos:end="103:60"><expr pos:start="103:53" pos:end="103:60"><name pos:start="103:53" pos:end="103:60">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="175:13"><if pos:start="105:13" pos:end="147:13">if <condition pos:start="105:16" pos:end="105:23">(<expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:17">y</name> <operator pos:start="105:19" pos:end="105:19">&amp;</operator> <literal type="number" pos:start="105:21" pos:end="105:22">16</literal></expr>)</condition> <block pos:start="105:25" pos:end="147:13">{<block_content pos:start="107:17" pos:end="145:17">

                <expr_stmt pos:start="107:17" pos:end="107:27"><expr pos:start="107:17" pos:end="107:26"><name pos:start="107:17" pos:end="107:17">x</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <name pos:start="107:21" pos:end="107:21">y</name> <operator pos:start="107:23" pos:end="107:24">&gt;&gt;</operator> <literal type="number" pos:start="107:26" pos:end="107:26">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:29"><expr pos:start="109:17" pos:end="109:28"><name pos:start="109:17" pos:end="109:17">y</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:21">y</name> <operator pos:start="109:23" pos:end="109:23">&amp;</operator> <literal type="number" pos:start="109:25" pos:end="109:28">0x0f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="111:17" pos:end="127:17"><if pos:start="111:17" pos:end="115:17">if <condition pos:start="111:20" pos:end="111:27">(<expr pos:start="111:21" pos:end="111:26"><name pos:start="111:21" pos:end="111:21">x</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <literal type="number" pos:start="111:25" pos:end="111:26">15</literal></expr>)</condition> <block pos:start="111:29" pos:end="115:17">{<block_content pos:start="113:21" pos:end="113:94">

                    <macro pos:start="113:21" pos:end="113:94"><name pos:start="113:21" pos:end="113:34">READ_FLIP_SIGN</name><argument_list pos:start="113:35" pos:end="113:94">(<argument pos:start="113:36" pos:end="113:57">g-&gt;sb_hybrid + s_index</argument>, <argument pos:start="113:60" pos:end="113:93">RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="115:19" pos:end="127:17">else <block pos:start="115:24" pos:end="127:17">{<block_content pos:start="117:21" pos:end="125:46">

                    <expr_stmt pos:start="117:21" pos:end="117:52"><expr pos:start="117:21" pos:end="117:51"><name pos:start="117:21" pos:end="117:21">x</name> <operator pos:start="117:23" pos:end="117:24">+=</operator> <call pos:start="117:26" pos:end="117:51"><name pos:start="117:26" pos:end="117:34">get_bitsz</name><argument_list pos:start="117:35" pos:end="117:51">(<argument pos:start="117:36" pos:end="117:41"><expr pos:start="117:36" pos:end="117:41"><operator pos:start="117:36" pos:end="117:36">&amp;</operator><name pos:start="117:37" pos:end="117:41"><name pos:start="117:37" pos:end="117:37">s</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:41">gb</name></name></expr></argument>, <argument pos:start="117:44" pos:end="117:50"><expr pos:start="117:44" pos:end="117:50"><name pos:start="117:44" pos:end="117:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:49"><expr pos:start="119:21" pos:end="119:48"><name pos:start="119:21" pos:end="119:21">v</name>  <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="119:48"><name pos:start="119:26" pos:end="119:35">l3_unscale</name><argument_list pos:start="119:36" pos:end="119:48">(<argument pos:start="119:37" pos:end="119:37"><expr pos:start="119:37" pos:end="119:37"><name pos:start="119:37" pos:end="119:37">x</name></expr></argument>, <argument pos:start="119:40" pos:end="119:47"><expr pos:start="119:40" pos:end="119:47"><name pos:start="119:40" pos:end="119:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="121:21" pos:end="123:31"><if pos:start="121:21" pos:end="123:31">if <condition pos:start="121:24" pos:end="121:42">(<expr pos:start="121:25" pos:end="121:41"><call pos:start="121:25" pos:end="121:41"><name pos:start="121:25" pos:end="121:33">get_bits1</name><argument_list pos:start="121:34" pos:end="121:41">(<argument pos:start="121:35" pos:end="121:40"><expr pos:start="121:35" pos:end="121:40"><operator pos:start="121:35" pos:end="121:35">&amp;</operator><name pos:start="121:36" pos:end="121:40"><name pos:start="121:36" pos:end="121:36">s</name><operator pos:start="121:37" pos:end="121:38">-&gt;</operator><name pos:start="121:39" pos:end="121:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="123:25" pos:end="123:31"><block_content pos:start="123:25" pos:end="123:31">

                        <expr_stmt pos:start="123:25" pos:end="123:31"><expr pos:start="123:25" pos:end="123:30"><name pos:start="123:25" pos:end="123:25">v</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <operator pos:start="123:29" pos:end="123:29">-</operator><name pos:start="123:30" pos:end="123:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:46"><expr pos:start="125:21" pos:end="125:45"><name pos:start="125:21" pos:end="125:41"><name pos:start="125:21" pos:end="125:21">g</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:32">sb_hybrid</name><index pos:start="125:33" pos:end="125:41">[<expr pos:start="125:34" pos:end="125:40"><name pos:start="125:34" pos:end="125:40">s_index</name></expr>]</index></name> <operator pos:start="125:43" pos:end="125:43">=</operator> <name pos:start="125:45" pos:end="125:45">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="129:17" pos:end="145:17"><if pos:start="129:17" pos:end="133:17">if <condition pos:start="129:20" pos:end="129:27">(<expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:21">y</name> <operator pos:start="129:23" pos:end="129:23">&lt;</operator> <literal type="number" pos:start="129:25" pos:end="129:26">15</literal></expr>)</condition> <block pos:start="129:29" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:98">

                    <macro pos:start="131:21" pos:end="131:98"><name pos:start="131:21" pos:end="131:34">READ_FLIP_SIGN</name><argument_list pos:start="131:35" pos:end="131:98">(<argument pos:start="131:36" pos:end="131:61">g-&gt;sb_hybrid + s_index + <literal type="number" pos:start="131:61" pos:end="131:61">1</literal></argument>, <argument pos:start="131:64" pos:end="131:97">RENAME(expval_table)[exponent] + y</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="133:19" pos:end="145:17">else <block pos:start="133:24" pos:end="145:17">{<block_content pos:start="135:21" pos:end="143:48">

                    <expr_stmt pos:start="135:21" pos:end="135:52"><expr pos:start="135:21" pos:end="135:51"><name pos:start="135:21" pos:end="135:21">y</name> <operator pos:start="135:23" pos:end="135:24">+=</operator> <call pos:start="135:26" pos:end="135:51"><name pos:start="135:26" pos:end="135:34">get_bitsz</name><argument_list pos:start="135:35" pos:end="135:51">(<argument pos:start="135:36" pos:end="135:41"><expr pos:start="135:36" pos:end="135:41"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:41"><name pos:start="135:37" pos:end="135:37">s</name><operator pos:start="135:38" pos:end="135:39">-&gt;</operator><name pos:start="135:40" pos:end="135:41">gb</name></name></expr></argument>, <argument pos:start="135:44" pos:end="135:50"><expr pos:start="135:44" pos:end="135:50"><name pos:start="135:44" pos:end="135:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:49"><expr pos:start="137:21" pos:end="137:48"><name pos:start="137:21" pos:end="137:21">v</name>  <operator pos:start="137:24" pos:end="137:24">=</operator> <call pos:start="137:26" pos:end="137:48"><name pos:start="137:26" pos:end="137:35">l3_unscale</name><argument_list pos:start="137:36" pos:end="137:48">(<argument pos:start="137:37" pos:end="137:37"><expr pos:start="137:37" pos:end="137:37"><name pos:start="137:37" pos:end="137:37">y</name></expr></argument>, <argument pos:start="137:40" pos:end="137:47"><expr pos:start="137:40" pos:end="137:47"><name pos:start="137:40" pos:end="137:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="139:21" pos:end="141:31"><if pos:start="139:21" pos:end="141:31">if <condition pos:start="139:24" pos:end="139:42">(<expr pos:start="139:25" pos:end="139:41"><call pos:start="139:25" pos:end="139:41"><name pos:start="139:25" pos:end="139:33">get_bits1</name><argument_list pos:start="139:34" pos:end="139:41">(<argument pos:start="139:35" pos:end="139:40"><expr pos:start="139:35" pos:end="139:40"><operator pos:start="139:35" pos:end="139:35">&amp;</operator><name pos:start="139:36" pos:end="139:40"><name pos:start="139:36" pos:end="139:36">s</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="141:25" pos:end="141:31"><block_content pos:start="141:25" pos:end="141:31">

                        <expr_stmt pos:start="141:25" pos:end="141:31"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:25">v</name> <operator pos:start="141:27" pos:end="141:27">=</operator> <operator pos:start="141:29" pos:end="141:29">-</operator><name pos:start="141:30" pos:end="141:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:48"><expr pos:start="143:21" pos:end="143:47"><name pos:start="143:21" pos:end="143:43"><name pos:start="143:21" pos:end="143:21">g</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:32">sb_hybrid</name><index pos:start="143:33" pos:end="143:43">[<expr pos:start="143:34" pos:end="143:42"><name pos:start="143:34" pos:end="143:40">s_index</name><operator pos:start="143:41" pos:end="143:41">+</operator><literal type="number" pos:start="143:42" pos:end="143:42">1</literal></expr>]</index></name> <operator pos:start="143:45" pos:end="143:45">=</operator> <name pos:start="143:47" pos:end="143:47">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="147:15" pos:end="175:13">else <block pos:start="147:20" pos:end="175:13">{<block_content pos:start="149:17" pos:end="173:47">

                <expr_stmt pos:start="149:17" pos:end="149:27"><expr pos:start="149:17" pos:end="149:26"><name pos:start="149:17" pos:end="149:17">x</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <name pos:start="149:21" pos:end="149:21">y</name> <operator pos:start="149:23" pos:end="149:24">&gt;&gt;</operator> <literal type="number" pos:start="149:26" pos:end="149:26">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:29"><expr pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:17">y</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <name pos:start="151:21" pos:end="151:21">y</name> <operator pos:start="151:23" pos:end="151:23">&amp;</operator> <literal type="number" pos:start="151:25" pos:end="151:28">0x0f</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:23"><expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:17">x</name> <operator pos:start="153:19" pos:end="153:20">+=</operator> <name pos:start="153:22" pos:end="153:22">y</name></expr>;</expr_stmt>

                <if_stmt pos:start="155:17" pos:end="171:17"><if pos:start="155:17" pos:end="159:17">if <condition pos:start="155:20" pos:end="155:27">(<expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:21">x</name> <operator pos:start="155:23" pos:end="155:23">&lt;</operator> <literal type="number" pos:start="155:25" pos:end="155:26">15</literal></expr>)</condition> <block pos:start="155:29" pos:end="159:17">{<block_content pos:start="157:21" pos:end="157:100">

                    <macro pos:start="157:21" pos:end="157:100"><name pos:start="157:21" pos:end="157:34">READ_FLIP_SIGN</name><argument_list pos:start="157:35" pos:end="157:100">(<argument pos:start="157:36" pos:end="157:63">g-&gt;sb_hybrid + s_index + !!y</argument>, <argument pos:start="157:66" pos:end="157:99">RENAME(expval_table)[exponent] + x</argument>)</argument_list></macro>

                </block_content>}</block></if> <else pos:start="159:19" pos:end="171:17">else <block pos:start="159:24" pos:end="171:17">{<block_content pos:start="161:21" pos:end="169:50">

                    <expr_stmt pos:start="161:21" pos:end="161:52"><expr pos:start="161:21" pos:end="161:51"><name pos:start="161:21" pos:end="161:21">x</name> <operator pos:start="161:23" pos:end="161:24">+=</operator> <call pos:start="161:26" pos:end="161:51"><name pos:start="161:26" pos:end="161:34">get_bitsz</name><argument_list pos:start="161:35" pos:end="161:51">(<argument pos:start="161:36" pos:end="161:41"><expr pos:start="161:36" pos:end="161:41"><operator pos:start="161:36" pos:end="161:36">&amp;</operator><name pos:start="161:37" pos:end="161:41"><name pos:start="161:37" pos:end="161:37">s</name><operator pos:start="161:38" pos:end="161:39">-&gt;</operator><name pos:start="161:40" pos:end="161:41">gb</name></name></expr></argument>, <argument pos:start="161:44" pos:end="161:50"><expr pos:start="161:44" pos:end="161:50"><name pos:start="161:44" pos:end="161:50">linbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="163:21" pos:end="163:49"><expr pos:start="163:21" pos:end="163:48"><name pos:start="163:21" pos:end="163:21">v</name>  <operator pos:start="163:24" pos:end="163:24">=</operator> <call pos:start="163:26" pos:end="163:48"><name pos:start="163:26" pos:end="163:35">l3_unscale</name><argument_list pos:start="163:36" pos:end="163:48">(<argument pos:start="163:37" pos:end="163:37"><expr pos:start="163:37" pos:end="163:37"><name pos:start="163:37" pos:end="163:37">x</name></expr></argument>, <argument pos:start="163:40" pos:end="163:47"><expr pos:start="163:40" pos:end="163:47"><name pos:start="163:40" pos:end="163:47">exponent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="165:21" pos:end="167:31"><if pos:start="165:21" pos:end="167:31">if <condition pos:start="165:24" pos:end="165:42">(<expr pos:start="165:25" pos:end="165:41"><call pos:start="165:25" pos:end="165:41"><name pos:start="165:25" pos:end="165:33">get_bits1</name><argument_list pos:start="165:34" pos:end="165:41">(<argument pos:start="165:35" pos:end="165:40"><expr pos:start="165:35" pos:end="165:40"><operator pos:start="165:35" pos:end="165:35">&amp;</operator><name pos:start="165:36" pos:end="165:40"><name pos:start="165:36" pos:end="165:36">s</name><operator pos:start="165:37" pos:end="165:38">-&gt;</operator><name pos:start="165:39" pos:end="165:40">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="167:25" pos:end="167:31"><block_content pos:start="167:25" pos:end="167:31">

                        <expr_stmt pos:start="167:25" pos:end="167:31"><expr pos:start="167:25" pos:end="167:30"><name pos:start="167:25" pos:end="167:25">v</name> <operator pos:start="167:27" pos:end="167:27">=</operator> <operator pos:start="167:29" pos:end="167:29">-</operator><name pos:start="167:30" pos:end="167:30">v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:50"><expr pos:start="169:21" pos:end="169:49"><name pos:start="169:21" pos:end="169:45"><name pos:start="169:21" pos:end="169:21">g</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:32">sb_hybrid</name><index pos:start="169:33" pos:end="169:45">[<expr pos:start="169:34" pos:end="169:44"><name pos:start="169:34" pos:end="169:40">s_index</name><operator pos:start="169:41" pos:end="169:41">+</operator><operator pos:start="169:42" pos:end="169:42">!</operator><operator pos:start="169:43" pos:end="169:43">!</operator><name pos:start="169:44" pos:end="169:44">y</name></expr>]</index></name> <operator pos:start="169:47" pos:end="169:47">=</operator> <name pos:start="169:49" pos:end="169:49">v</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:47"><expr pos:start="173:17" pos:end="173:46"><name pos:start="173:17" pos:end="173:42"><name pos:start="173:17" pos:end="173:17">g</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:28">sb_hybrid</name><index pos:start="173:29" pos:end="173:42">[<expr pos:start="173:30" pos:end="173:41"><name pos:start="173:30" pos:end="173:36">s_index</name> <operator pos:start="173:38" pos:end="173:38">+</operator> <operator pos:start="173:40" pos:end="173:40">!</operator><name pos:start="173:41" pos:end="173:41">y</name></expr>]</index></name> <operator pos:start="173:44" pos:end="173:44">=</operator> <literal type="number" pos:start="173:46" pos:end="173:46">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:25"><expr pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:19">s_index</name> <operator pos:start="177:21" pos:end="177:22">+=</operator> <literal type="number" pos:start="177:24" pos:end="177:24">2</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="185:5" pos:end="185:26">/* high frequencies */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:48"><expr pos:start="187:5" pos:end="187:47"><name pos:start="187:5" pos:end="187:7">vlc</name> <operator pos:start="187:9" pos:end="187:9">=</operator> <operator pos:start="187:11" pos:end="187:11">&amp;</operator><name pos:start="187:12" pos:end="187:47"><name pos:start="187:12" pos:end="187:24">huff_quad_vlc</name><index pos:start="187:25" pos:end="187:47">[<expr pos:start="187:26" pos:end="187:46"><name pos:start="187:26" pos:end="187:46"><name pos:start="187:26" pos:end="187:26">g</name><operator pos:start="187:27" pos:end="187:28">-&gt;</operator><name pos:start="187:29" pos:end="187:46">count1table_select</name></name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:17"><expr pos:start="189:5" pos:end="189:16"><name pos:start="189:5" pos:end="189:12">last_pos</name> <operator pos:start="189:14" pos:end="189:14">=</operator> <literal type="number" pos:start="189:16" pos:end="189:16">0</literal></expr>;</expr_stmt>

    <while pos:start="191:5" pos:end="259:5">while <condition pos:start="191:11" pos:end="191:26">(<expr pos:start="191:12" pos:end="191:25"><name pos:start="191:12" pos:end="191:18">s_index</name> <operator pos:start="191:20" pos:end="191:21">&lt;=</operator> <literal type="number" pos:start="191:23" pos:end="191:25">572</literal></expr>)</condition> <block pos:start="191:28" pos:end="259:5">{<block_content pos:start="193:9" pos:end="257:21">

        <decl_stmt pos:start="193:9" pos:end="193:22"><decl pos:start="193:9" pos:end="193:15"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:15">pos</name></decl>, <decl pos:start="193:18" pos:end="193:21"><type ref="prev" pos:start="193:9" pos:end="193:11"/><name pos:start="193:18" pos:end="193:21">code</name></decl>;</decl_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:37"><expr pos:start="195:9" pos:end="195:36"><name pos:start="195:9" pos:end="195:11">pos</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:36"><name pos:start="195:15" pos:end="195:28">get_bits_count</name><argument_list pos:start="195:29" pos:end="195:36">(<argument pos:start="195:30" pos:end="195:35"><expr pos:start="195:30" pos:end="195:35"><operator pos:start="195:30" pos:end="195:30">&amp;</operator><name pos:start="195:31" pos:end="195:35"><name pos:start="195:31" pos:end="195:31">s</name><operator pos:start="195:32" pos:end="195:33">-&gt;</operator><name pos:start="195:34" pos:end="195:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="225:9"><if pos:start="197:9" pos:end="225:9">if <condition pos:start="197:12" pos:end="197:27">(<expr pos:start="197:13" pos:end="197:26"><name pos:start="197:13" pos:end="197:15">pos</name> <operator pos:start="197:17" pos:end="197:18">&gt;=</operator> <name pos:start="197:20" pos:end="197:26">end_pos</name></expr>)</condition> <block pos:start="197:29" pos:end="225:9">{<block_content pos:start="199:13" pos:end="223:22">

            <if_stmt pos:start="199:13" pos:end="217:13"><if pos:start="199:13" pos:end="217:13">if <condition pos:start="199:16" pos:end="199:43">(<expr pos:start="199:17" pos:end="199:42"><name pos:start="199:17" pos:end="199:19">pos</name> <operator pos:start="199:21" pos:end="199:21">&gt;</operator> <name pos:start="199:23" pos:end="199:30">end_pos2</name> <operator pos:start="199:32" pos:end="199:33">&amp;&amp;</operator> <name pos:start="199:35" pos:end="199:42">last_pos</name></expr>)</condition> <block pos:start="199:45" pos:end="217:13">{<block_content pos:start="205:17" pos:end="215:22">

                <comment type="block" pos:start="201:17" pos:end="203:57">/* some encoders generate an incorrect size for this

                   part. We must go back into the data */</comment>

                <expr_stmt pos:start="205:17" pos:end="205:29"><expr pos:start="205:17" pos:end="205:28"><name pos:start="205:17" pos:end="205:23">s_index</name> <operator pos:start="205:25" pos:end="205:26">-=</operator> <literal type="number" pos:start="205:28" pos:end="205:28">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:55"><expr pos:start="207:17" pos:end="207:54"><call pos:start="207:17" pos:end="207:54"><name pos:start="207:17" pos:end="207:30">skip_bits_long</name><argument_list pos:start="207:31" pos:end="207:54">(<argument pos:start="207:32" pos:end="207:37"><expr pos:start="207:32" pos:end="207:37"><operator pos:start="207:32" pos:end="207:32">&amp;</operator><name pos:start="207:33" pos:end="207:37"><name pos:start="207:33" pos:end="207:33">s</name><operator pos:start="207:34" pos:end="207:35">-&gt;</operator><name pos:start="207:36" pos:end="207:37">gb</name></name></expr></argument>, <argument pos:start="207:40" pos:end="207:53"><expr pos:start="207:40" pos:end="207:53"><name pos:start="207:40" pos:end="207:47">last_pos</name> <operator pos:start="207:49" pos:end="207:49">-</operator> <name pos:start="207:51" pos:end="207:53">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:128"><expr pos:start="209:17" pos:end="209:127"><call pos:start="209:17" pos:end="209:127"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:127">(<argument pos:start="209:24" pos:end="209:31"><expr pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:24">s</name><operator pos:start="209:25" pos:end="209:26">-&gt;</operator><name pos:start="209:27" pos:end="209:31">avctx</name></name></expr></argument>, <argument pos:start="209:34" pos:end="209:44"><expr pos:start="209:34" pos:end="209:44"><name pos:start="209:34" pos:end="209:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="209:47" pos:end="209:83"><expr pos:start="209:47" pos:end="209:83"><literal type="string" pos:start="209:47" pos:end="209:83">"overread, skip %d enddists: %d %d\n"</literal></expr></argument>, <argument pos:start="209:86" pos:end="209:99"><expr pos:start="209:86" pos:end="209:99"><name pos:start="209:86" pos:end="209:93">last_pos</name> <operator pos:start="209:95" pos:end="209:95">-</operator> <name pos:start="209:97" pos:end="209:99">pos</name></expr></argument>, <argument pos:start="209:102" pos:end="209:112"><expr pos:start="209:102" pos:end="209:112"><name pos:start="209:102" pos:end="209:108">end_pos</name><operator pos:start="209:109" pos:end="209:109">-</operator><name pos:start="209:110" pos:end="209:112">pos</name></expr></argument>, <argument pos:start="209:115" pos:end="209:126"><expr pos:start="209:115" pos:end="209:126"><name pos:start="209:115" pos:end="209:122">end_pos2</name><operator pos:start="209:123" pos:end="209:123">-</operator><name pos:start="209:124" pos:end="209:126">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="211:17" pos:end="213:30"><if pos:start="211:17" pos:end="213:30">if<condition pos:start="211:19" pos:end="211:56">(<expr pos:start="211:20" pos:end="211:55"><name pos:start="211:20" pos:end="211:37"><name pos:start="211:20" pos:end="211:20">s</name><operator pos:start="211:21" pos:end="211:22">-&gt;</operator><name pos:start="211:23" pos:end="211:37">err_recognition</name></name> <operator pos:start="211:39" pos:end="211:39">&amp;</operator> <name pos:start="211:41" pos:end="211:55">AV_EF_BITSTREAM</name></expr>)</condition><block type="pseudo" pos:start="213:21" pos:end="213:30"><block_content pos:start="213:21" pos:end="213:30">

                    <expr_stmt pos:start="213:21" pos:end="213:30"><expr pos:start="213:21" pos:end="213:29"><name pos:start="213:21" pos:end="213:27">s_index</name><operator pos:start="213:28" pos:end="213:28">=</operator><literal type="number" pos:start="213:29" pos:end="213:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="215:17" pos:end="215:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:56"><expr pos:start="219:13" pos:end="219:55"><call pos:start="219:13" pos:end="219:55"><name pos:start="219:13" pos:end="219:25">switch_buffer</name><argument_list pos:start="219:26" pos:end="219:55">(<argument pos:start="219:27" pos:end="219:27"><expr pos:start="219:27" pos:end="219:27"><name pos:start="219:27" pos:end="219:27">s</name></expr></argument>, <argument pos:start="219:30" pos:end="219:33"><expr pos:start="219:30" pos:end="219:33"><operator pos:start="219:30" pos:end="219:30">&amp;</operator><name pos:start="219:31" pos:end="219:33">pos</name></expr></argument>, <argument pos:start="219:36" pos:end="219:43"><expr pos:start="219:36" pos:end="219:43"><operator pos:start="219:36" pos:end="219:36">&amp;</operator><name pos:start="219:37" pos:end="219:43">end_pos</name></expr></argument>, <argument pos:start="219:46" pos:end="219:54"><expr pos:start="219:46" pos:end="219:54"><operator pos:start="219:46" pos:end="219:46">&amp;</operator><name pos:start="219:47" pos:end="219:54">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="223:22"><if pos:start="221:13" pos:end="223:22">if <condition pos:start="221:16" pos:end="221:31">(<expr pos:start="221:17" pos:end="221:30"><name pos:start="221:17" pos:end="221:19">pos</name> <operator pos:start="221:21" pos:end="221:22">&gt;=</operator> <name pos:start="221:24" pos:end="221:30">end_pos</name></expr>)</condition><block type="pseudo" pos:start="223:17" pos:end="223:22"><block_content pos:start="223:17" pos:end="223:22">

                <break pos:start="223:17" pos:end="223:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:23"><expr pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:16">last_pos</name> <operator pos:start="227:18" pos:end="227:18">=</operator> <name pos:start="227:20" pos:end="227:22">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:58"><expr pos:start="231:9" pos:end="231:57"><name pos:start="231:9" pos:end="231:12">code</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <call pos:start="231:16" pos:end="231:57"><name pos:start="231:16" pos:end="231:23">get_vlc2</name><argument_list pos:start="231:24" pos:end="231:57">(<argument pos:start="231:25" pos:end="231:30"><expr pos:start="231:25" pos:end="231:30"><operator pos:start="231:25" pos:end="231:25">&amp;</operator><name pos:start="231:26" pos:end="231:30"><name pos:start="231:26" pos:end="231:26">s</name><operator pos:start="231:27" pos:end="231:28">-&gt;</operator><name pos:start="231:29" pos:end="231:30">gb</name></name></expr></argument>, <argument pos:start="231:33" pos:end="231:42"><expr pos:start="231:33" pos:end="231:42"><name pos:start="231:33" pos:end="231:42"><name pos:start="231:33" pos:end="231:35">vlc</name><operator pos:start="231:36" pos:end="231:37">-&gt;</operator><name pos:start="231:38" pos:end="231:42">table</name></name></expr></argument>, <argument pos:start="231:45" pos:end="231:53"><expr pos:start="231:45" pos:end="231:53"><name pos:start="231:45" pos:end="231:53"><name pos:start="231:45" pos:end="231:47">vlc</name><operator pos:start="231:48" pos:end="231:49">-&gt;</operator><name pos:start="231:50" pos:end="231:53">bits</name></name></expr></argument>, <argument pos:start="231:56" pos:end="231:56"><expr pos:start="231:56" pos:end="231:56"><literal type="number" pos:start="231:56" pos:end="231:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:73"><expr pos:start="233:9" pos:end="233:72"><call pos:start="233:9" pos:end="233:72"><name pos:start="233:9" pos:end="233:15">ff_dlog</name><argument_list pos:start="233:16" pos:end="233:72">(<argument pos:start="233:17" pos:end="233:24"><expr pos:start="233:17" pos:end="233:24"><name pos:start="233:17" pos:end="233:24"><name pos:start="233:17" pos:end="233:17">s</name><operator pos:start="233:18" pos:end="233:19">-&gt;</operator><name pos:start="233:20" pos:end="233:24">avctx</name></name></expr></argument>, <argument pos:start="233:27" pos:end="233:42"><expr pos:start="233:27" pos:end="233:42"><literal type="string" pos:start="233:27" pos:end="233:42">"t=%d code=%d\n"</literal></expr></argument>, <argument pos:start="233:45" pos:end="233:65"><expr pos:start="233:45" pos:end="233:65"><name pos:start="233:45" pos:end="233:65"><name pos:start="233:45" pos:end="233:45">g</name><operator pos:start="233:46" pos:end="233:47">-&gt;</operator><name pos:start="233:48" pos:end="233:65">count1table_select</name></name></expr></argument>, <argument pos:start="233:68" pos:end="233:71"><expr pos:start="233:68" pos:end="233:71"><name pos:start="233:68" pos:end="233:71">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="241:36"><expr pos:start="235:9" pos:end="241:35"><name pos:start="235:9" pos:end="235:31"><name pos:start="235:9" pos:end="235:9">g</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:20">sb_hybrid</name><index pos:start="235:21" pos:end="235:31">[<expr pos:start="235:22" pos:end="235:30"><name pos:start="235:22" pos:end="235:28">s_index</name><operator pos:start="235:29" pos:end="235:29">+</operator><literal type="number" pos:start="235:30" pos:end="235:30">0</literal></expr>]</index></name> <operator pos:start="235:33" pos:end="235:33">=</operator>

        <name pos:start="237:9" pos:end="237:31"><name pos:start="237:9" pos:end="237:9">g</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:20">sb_hybrid</name><index pos:start="237:21" pos:end="237:31">[<expr pos:start="237:22" pos:end="237:30"><name pos:start="237:22" pos:end="237:28">s_index</name><operator pos:start="237:29" pos:end="237:29">+</operator><literal type="number" pos:start="237:30" pos:end="237:30">1</literal></expr>]</index></name> <operator pos:start="237:33" pos:end="237:33">=</operator>

        <name pos:start="239:9" pos:end="239:31"><name pos:start="239:9" pos:end="239:9">g</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:20">sb_hybrid</name><index pos:start="239:21" pos:end="239:31">[<expr pos:start="239:22" pos:end="239:30"><name pos:start="239:22" pos:end="239:28">s_index</name><operator pos:start="239:29" pos:end="239:29">+</operator><literal type="number" pos:start="239:30" pos:end="239:30">2</literal></expr>]</index></name> <operator pos:start="239:33" pos:end="239:33">=</operator>

        <name pos:start="241:9" pos:end="241:31"><name pos:start="241:9" pos:end="241:9">g</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:20">sb_hybrid</name><index pos:start="241:21" pos:end="241:31">[<expr pos:start="241:22" pos:end="241:30"><name pos:start="241:22" pos:end="241:28">s_index</name><operator pos:start="241:29" pos:end="241:29">+</operator><literal type="number" pos:start="241:30" pos:end="241:30">3</literal></expr>]</index></name> <operator pos:start="241:33" pos:end="241:33">=</operator> <literal type="number" pos:start="241:35" pos:end="241:35">0</literal></expr>;</expr_stmt>

        <while pos:start="243:9" pos:end="255:9">while <condition pos:start="243:15" pos:end="243:20">(<expr pos:start="243:16" pos:end="243:19"><name pos:start="243:16" pos:end="243:19">code</name></expr>)</condition> <block pos:start="243:22" pos:end="255:9">{<block_content pos:start="245:13" pos:end="253:80">

            <decl_stmt pos:start="245:13" pos:end="245:78"><decl pos:start="245:13" pos:end="245:77"><type pos:start="245:13" pos:end="245:28"><specifier pos:start="245:13" pos:end="245:18">static</specifier> <specifier pos:start="245:20" pos:end="245:24">const</specifier> <name pos:start="245:26" pos:end="245:28">int</name></type> <name pos:start="245:30" pos:end="245:39"><name pos:start="245:30" pos:end="245:35">idxtab</name><index pos:start="245:36" pos:end="245:39">[<expr pos:start="245:37" pos:end="245:38"><literal type="number" pos:start="245:37" pos:end="245:38">16</literal></expr>]</index></name> <init pos:start="245:41" pos:end="245:77">= <expr pos:start="245:43" pos:end="245:77"><block pos:start="245:43" pos:end="245:77">{ <expr pos:start="245:45" pos:end="245:45"><literal type="number" pos:start="245:45" pos:end="245:45">3</literal></expr>,<expr pos:start="245:47" pos:end="245:47"><literal type="number" pos:start="245:47" pos:end="245:47">3</literal></expr>,<expr pos:start="245:49" pos:end="245:49"><literal type="number" pos:start="245:49" pos:end="245:49">2</literal></expr>,<expr pos:start="245:51" pos:end="245:51"><literal type="number" pos:start="245:51" pos:end="245:51">2</literal></expr>,<expr pos:start="245:53" pos:end="245:53"><literal type="number" pos:start="245:53" pos:end="245:53">1</literal></expr>,<expr pos:start="245:55" pos:end="245:55"><literal type="number" pos:start="245:55" pos:end="245:55">1</literal></expr>,<expr pos:start="245:57" pos:end="245:57"><literal type="number" pos:start="245:57" pos:end="245:57">1</literal></expr>,<expr pos:start="245:59" pos:end="245:59"><literal type="number" pos:start="245:59" pos:end="245:59">1</literal></expr>,<expr pos:start="245:61" pos:end="245:61"><literal type="number" pos:start="245:61" pos:end="245:61">0</literal></expr>,<expr pos:start="245:63" pos:end="245:63"><literal type="number" pos:start="245:63" pos:end="245:63">0</literal></expr>,<expr pos:start="245:65" pos:end="245:65"><literal type="number" pos:start="245:65" pos:end="245:65">0</literal></expr>,<expr pos:start="245:67" pos:end="245:67"><literal type="number" pos:start="245:67" pos:end="245:67">0</literal></expr>,<expr pos:start="245:69" pos:end="245:69"><literal type="number" pos:start="245:69" pos:end="245:69">0</literal></expr>,<expr pos:start="245:71" pos:end="245:71"><literal type="number" pos:start="245:71" pos:end="245:71">0</literal></expr>,<expr pos:start="245:73" pos:end="245:73"><literal type="number" pos:start="245:73" pos:end="245:73">0</literal></expr>,<expr pos:start="245:75" pos:end="245:75"><literal type="number" pos:start="245:75" pos:end="245:75">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="247:13" pos:end="247:18"><decl pos:start="247:13" pos:end="247:17"><type pos:start="247:13" pos:end="247:15"><name pos:start="247:13" pos:end="247:15">int</name></type> <name pos:start="247:17" pos:end="247:17">v</name></decl>;</decl_stmt>

            <decl_stmt pos:start="249:13" pos:end="249:45"><decl pos:start="249:13" pos:end="249:44"><type pos:start="249:13" pos:end="249:15"><name pos:start="249:13" pos:end="249:15">int</name></type> <name pos:start="249:17" pos:end="249:19">pos</name> <init pos:start="249:21" pos:end="249:44">= <expr pos:start="249:23" pos:end="249:44"><name pos:start="249:23" pos:end="249:29">s_index</name> <operator pos:start="249:31" pos:end="249:31">+</operator> <name pos:start="249:33" pos:end="249:44"><name pos:start="249:33" pos:end="249:38">idxtab</name><index pos:start="249:39" pos:end="249:44">[<expr pos:start="249:40" pos:end="249:43"><name pos:start="249:40" pos:end="249:43">code</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:40"><expr pos:start="251:13" pos:end="251:39"><name pos:start="251:13" pos:end="251:16">code</name>   <operator pos:start="251:20" pos:end="251:21">^=</operator> <literal type="number" pos:start="251:23" pos:end="251:23">8</literal> <operator pos:start="251:25" pos:end="251:26">&gt;&gt;</operator> <name pos:start="251:28" pos:end="251:39"><name pos:start="251:28" pos:end="251:33">idxtab</name><index pos:start="251:34" pos:end="251:39">[<expr pos:start="251:35" pos:end="251:38"><name pos:start="251:35" pos:end="251:38">code</name></expr>]</index></name></expr>;</expr_stmt>

            <macro pos:start="253:13" pos:end="253:80"><name pos:start="253:13" pos:end="253:26">READ_FLIP_SIGN</name><argument_list pos:start="253:27" pos:end="253:80">(<argument pos:start="253:28" pos:end="253:45">g-&gt;sb_hybrid + pos</argument>, <argument pos:start="253:48" pos:end="253:79">RENAME(exp_table)+exponents[pos]</argument>)</argument_list></macro>

        </block_content>}</block></while>

        <expr_stmt pos:start="257:9" pos:end="257:21"><expr pos:start="257:9" pos:end="257:20"><name pos:start="257:9" pos:end="257:15">s_index</name> <operator pos:start="257:17" pos:end="257:18">+=</operator> <literal type="number" pos:start="257:20" pos:end="257:20">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="261:5" pos:end="261:29">/* skip extension bits */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:50"><expr pos:start="263:5" pos:end="263:49"><name pos:start="263:5" pos:end="263:13">bits_left</name> <operator pos:start="263:15" pos:end="263:15">=</operator> <name pos:start="263:17" pos:end="263:24">end_pos2</name> <operator pos:start="263:26" pos:end="263:26">-</operator> <call pos:start="263:28" pos:end="263:49"><name pos:start="263:28" pos:end="263:41">get_bits_count</name><argument_list pos:start="263:42" pos:end="263:49">(<argument pos:start="263:43" pos:end="263:48"><expr pos:start="263:43" pos:end="263:48"><operator pos:start="263:43" pos:end="263:43">&amp;</operator><name pos:start="263:44" pos:end="263:48"><name pos:start="263:44" pos:end="263:44">s</name><operator pos:start="263:45" pos:end="263:46">-&gt;</operator><name pos:start="263:47" pos:end="263:48">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="265:5" pos:end="277:5"><if pos:start="265:5" pos:end="271:5">if <condition pos:start="265:8" pos:end="265:61">(<expr pos:start="265:9" pos:end="265:60"><name pos:start="265:9" pos:end="265:17">bits_left</name> <operator pos:start="265:19" pos:end="265:19">&lt;</operator> <literal type="number" pos:start="265:21" pos:end="265:21">0</literal> <operator pos:start="265:23" pos:end="265:24">&amp;&amp;</operator> <operator pos:start="265:26" pos:end="265:26">(</operator><name pos:start="265:27" pos:end="265:44"><name pos:start="265:27" pos:end="265:27">s</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:44">err_recognition</name></name> <operator pos:start="265:46" pos:end="265:46">&amp;</operator> <name pos:start="265:48" pos:end="265:59">AV_EF_BUFFER</name><operator pos:start="265:60" pos:end="265:60">)</operator></expr>)</condition> <block pos:start="265:63" pos:end="271:5">{<block_content pos:start="267:9" pos:end="269:18">

        <expr_stmt pos:start="267:9" pos:end="267:68"><expr pos:start="267:9" pos:end="267:67"><call pos:start="267:9" pos:end="267:67"><name pos:start="267:9" pos:end="267:14">av_log</name><argument_list pos:start="267:15" pos:end="267:67">(<argument pos:start="267:16" pos:end="267:23"><expr pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:23"><name pos:start="267:16" pos:end="267:16">s</name><operator pos:start="267:17" pos:end="267:18">-&gt;</operator><name pos:start="267:19" pos:end="267:23">avctx</name></name></expr></argument>, <argument pos:start="267:26" pos:end="267:37"><expr pos:start="267:26" pos:end="267:37"><name pos:start="267:26" pos:end="267:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="267:40" pos:end="267:55"><expr pos:start="267:40" pos:end="267:55"><literal type="string" pos:start="267:40" pos:end="267:55">"bits_left=%d\n"</literal></expr></argument>, <argument pos:start="267:58" pos:end="267:66"><expr pos:start="267:58" pos:end="267:66"><name pos:start="267:58" pos:end="267:66">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:18"><expr pos:start="269:9" pos:end="269:17"><name pos:start="269:9" pos:end="269:15">s_index</name><operator pos:start="269:16" pos:end="269:16">=</operator><literal type="number" pos:start="269:17" pos:end="269:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="271:7" pos:end="277:5">else if <condition pos:start="271:15" pos:end="271:68">(<expr pos:start="271:16" pos:end="271:67"><name pos:start="271:16" pos:end="271:24">bits_left</name> <operator pos:start="271:26" pos:end="271:26">&gt;</operator> <literal type="number" pos:start="271:28" pos:end="271:28">0</literal> <operator pos:start="271:30" pos:end="271:31">&amp;&amp;</operator> <operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:51"><name pos:start="271:34" pos:end="271:34">s</name><operator pos:start="271:35" pos:end="271:36">-&gt;</operator><name pos:start="271:37" pos:end="271:51">err_recognition</name></name> <operator pos:start="271:53" pos:end="271:53">&amp;</operator> <name pos:start="271:55" pos:end="271:66">AV_EF_BUFFER</name><operator pos:start="271:67" pos:end="271:67">)</operator></expr>)</condition> <block pos:start="271:70" pos:end="277:5">{<block_content pos:start="273:9" pos:end="275:20">

        <expr_stmt pos:start="273:9" pos:end="273:68"><expr pos:start="273:9" pos:end="273:67"><call pos:start="273:9" pos:end="273:67"><name pos:start="273:9" pos:end="273:14">av_log</name><argument_list pos:start="273:15" pos:end="273:67">(<argument pos:start="273:16" pos:end="273:23"><expr pos:start="273:16" pos:end="273:23"><name pos:start="273:16" pos:end="273:23"><name pos:start="273:16" pos:end="273:16">s</name><operator pos:start="273:17" pos:end="273:18">-&gt;</operator><name pos:start="273:19" pos:end="273:23">avctx</name></name></expr></argument>, <argument pos:start="273:26" pos:end="273:37"><expr pos:start="273:26" pos:end="273:37"><name pos:start="273:26" pos:end="273:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:40" pos:end="273:55"><expr pos:start="273:40" pos:end="273:55"><literal type="string" pos:start="273:40" pos:end="273:55">"bits_left=%d\n"</literal></expr></argument>, <argument pos:start="273:58" pos:end="273:66"><expr pos:start="273:58" pos:end="273:66"><name pos:start="273:58" pos:end="273:66">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:20"><expr pos:start="275:9" pos:end="275:19"><name pos:start="275:9" pos:end="275:15">s_index</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <literal type="number" pos:start="275:19" pos:end="275:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:79"><expr pos:start="279:5" pos:end="279:78"><call pos:start="279:5" pos:end="279:78"><name pos:start="279:5" pos:end="279:10">memset</name><argument_list pos:start="279:11" pos:end="279:78">(<argument pos:start="279:12" pos:end="279:33"><expr pos:start="279:12" pos:end="279:33"><operator pos:start="279:12" pos:end="279:12">&amp;</operator><name pos:start="279:13" pos:end="279:33"><name pos:start="279:13" pos:end="279:13">g</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:24">sb_hybrid</name><index pos:start="279:25" pos:end="279:33">[<expr pos:start="279:26" pos:end="279:32"><name pos:start="279:26" pos:end="279:32">s_index</name></expr>]</index></name></expr></argument>, <argument pos:start="279:36" pos:end="279:36"><expr pos:start="279:36" pos:end="279:36"><literal type="number" pos:start="279:36" pos:end="279:36">0</literal></expr></argument>, <argument pos:start="279:39" pos:end="279:77"><expr pos:start="279:39" pos:end="279:77"><sizeof pos:start="279:39" pos:end="279:59">sizeof<argument_list pos:start="279:45" pos:end="279:59">(<argument pos:start="279:46" pos:end="279:58"><expr pos:start="279:46" pos:end="279:58"><operator pos:start="279:46" pos:end="279:46">*</operator><name pos:start="279:47" pos:end="279:58"><name pos:start="279:47" pos:end="279:47">g</name><operator pos:start="279:48" pos:end="279:49">-&gt;</operator><name pos:start="279:50" pos:end="279:58">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="279:61" pos:end="279:61">*</operator> <operator pos:start="279:63" pos:end="279:63">(</operator><literal type="number" pos:start="279:64" pos:end="279:68">576</literal> <operator pos:start="279:68" pos:end="279:68">-</operator> <name pos:start="279:70" pos:end="279:76">s_index</name><operator pos:start="279:77" pos:end="279:77">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:38"><expr pos:start="281:5" pos:end="281:37"><call pos:start="281:5" pos:end="281:37"><name pos:start="281:5" pos:end="281:18">skip_bits_long</name><argument_list pos:start="281:19" pos:end="281:37">(<argument pos:start="281:20" pos:end="281:25"><expr pos:start="281:20" pos:end="281:25"><operator pos:start="281:20" pos:end="281:20">&amp;</operator><name pos:start="281:21" pos:end="281:25"><name pos:start="281:21" pos:end="281:21">s</name><operator pos:start="281:22" pos:end="281:23">-&gt;</operator><name pos:start="281:24" pos:end="281:25">gb</name></name></expr></argument>, <argument pos:start="281:28" pos:end="281:36"><expr pos:start="281:28" pos:end="281:36"><name pos:start="281:28" pos:end="281:36">bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:31"><expr pos:start="285:5" pos:end="285:30"><name pos:start="285:5" pos:end="285:5">i</name> <operator pos:start="285:7" pos:end="285:7">=</operator> <call pos:start="285:9" pos:end="285:30"><name pos:start="285:9" pos:end="285:22">get_bits_count</name><argument_list pos:start="285:23" pos:end="285:30">(<argument pos:start="285:24" pos:end="285:29"><expr pos:start="285:24" pos:end="285:29"><operator pos:start="285:24" pos:end="285:24">&amp;</operator><name pos:start="285:25" pos:end="285:29"><name pos:start="285:25" pos:end="285:25">s</name><operator pos:start="285:26" pos:end="285:27">-&gt;</operator><name pos:start="285:28" pos:end="285:29">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:46"><expr pos:start="287:5" pos:end="287:45"><call pos:start="287:5" pos:end="287:45"><name pos:start="287:5" pos:end="287:17">switch_buffer</name><argument_list pos:start="287:18" pos:end="287:45">(<argument pos:start="287:19" pos:end="287:19"><expr pos:start="287:19" pos:end="287:19"><name pos:start="287:19" pos:end="287:19">s</name></expr></argument>, <argument pos:start="287:22" pos:end="287:23"><expr pos:start="287:22" pos:end="287:23"><operator pos:start="287:22" pos:end="287:22">&amp;</operator><name pos:start="287:23" pos:end="287:23">i</name></expr></argument>, <argument pos:start="287:26" pos:end="287:33"><expr pos:start="287:26" pos:end="287:33"><operator pos:start="287:26" pos:end="287:26">&amp;</operator><name pos:start="287:27" pos:end="287:33">end_pos</name></expr></argument>, <argument pos:start="287:36" pos:end="287:44"><expr pos:start="287:36" pos:end="287:44"><operator pos:start="287:36" pos:end="287:36">&amp;</operator><name pos:start="287:37" pos:end="287:44">end_pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="291:5" pos:end="291:13">return <expr pos:start="291:12" pos:end="291:12"><literal type="number" pos:start="291:12" pos:end="291:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
