<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1117.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:36">stl_phys_internal</name><parameter_list pos:start="1:37" pos:end="3:63">(<parameter pos:start="1:38" pos:end="1:60"><decl pos:start="1:38" pos:end="1:60"><type pos:start="1:38" pos:end="1:60"><name pos:start="1:38" pos:end="1:55">target_phys_addr_t</name></type> <name pos:start="1:57" pos:end="1:60">addr</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:70">uint32_t</name></type> <name pos:start="1:72" pos:end="1:74">val</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:62"><decl pos:start="3:38" pos:end="3:62"><type pos:start="3:38" pos:end="3:62"><name pos:start="3:38" pos:end="3:55"><name pos:start="3:38" pos:end="3:41">enum</name> <name pos:start="3:43" pos:end="3:55">device_endian</name></name></type> <name pos:start="3:57" pos:end="3:62">endian</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:5">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">MemoryRegionSection</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:32">section</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:11">section</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:54"><name pos:start="13:15" pos:end="13:28">phys_page_find</name><argument_list pos:start="13:29" pos:end="13:54">(<argument pos:start="13:30" pos:end="13:53"><expr pos:start="13:30" pos:end="13:53"><name pos:start="13:30" pos:end="13:33">addr</name> <operator pos:start="13:35" pos:end="13:36">&gt;&gt;</operator> <name pos:start="13:38" pos:end="13:53">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="83:5"><if pos:start="17:5" pos:end="47:5">if <condition pos:start="17:8" pos:end="17:64">(<expr pos:start="17:9" pos:end="17:63"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:42"><name pos:start="17:10" pos:end="17:29">memory_region_is_ram</name><argument_list pos:start="17:30" pos:end="17:42">(<argument pos:start="17:31" pos:end="17:41"><expr pos:start="17:31" pos:end="17:41"><name pos:start="17:31" pos:end="17:41"><name pos:start="17:31" pos:end="17:37">section</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:41">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:44" pos:end="17:45">||</operator> <name pos:start="17:47" pos:end="17:63"><name pos:start="17:47" pos:end="17:53">section</name><operator pos:start="17:54" pos:end="17:55">-&gt;</operator><name pos:start="17:56" pos:end="17:63">readonly</name></name></expr>)</condition> <block pos:start="17:66" pos:end="47:5">{<block_content pos:start="19:9" pos:end="45:48">

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:12">addr</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="19:56"><name pos:start="19:16" pos:end="19:41">memory_region_section_addr</name><argument_list pos:start="19:42" pos:end="19:56">(<argument pos:start="19:43" pos:end="19:49"><expr pos:start="19:43" pos:end="19:49"><name pos:start="19:43" pos:end="19:49">section</name></expr></argument>, <argument pos:start="19:52" pos:end="19:55"><expr pos:start="19:52" pos:end="19:55"><name pos:start="19:52" pos:end="19:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="28:0"><if pos:start="21:9" pos:end="28:0">if <condition pos:start="21:12" pos:end="21:46">(<expr pos:start="21:13" pos:end="21:45"><call pos:start="21:13" pos:end="21:45"><name pos:start="21:13" pos:end="21:32">memory_region_is_ram</name><argument_list pos:start="21:33" pos:end="21:45">(<argument pos:start="21:34" pos:end="21:44"><expr pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:44"><name pos:start="21:34" pos:end="21:40">section</name><operator pos:start="21:41" pos:end="21:42">-&gt;</operator><name pos:start="21:43" pos:end="21:44">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:48" pos:end="28:0">{<block_content pos:start="23:13" pos:end="23:55">

            <expr_stmt pos:start="23:13" pos:end="23:55"><expr pos:start="23:13" pos:end="23:54"><name pos:start="23:13" pos:end="23:19">section</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:54"><name pos:start="23:24" pos:end="23:36">phys_sections</name><index pos:start="23:37" pos:end="23:54">[<expr pos:start="23:38" pos:end="23:53"><name pos:start="23:38" pos:end="23:53">phys_section_rom</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="27:1" pos:end="27:35">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:35"><call pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:11">defined</name><argument_list pos:start="27:12" pos:end="27:35">(<argument pos:start="27:13" pos:end="27:34"><expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:34">TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="29:9" pos:end="36:0"><if pos:start="29:9" pos:end="36:0">if <condition pos:start="29:12" pos:end="29:43">(<expr pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:18">endian</name> <operator pos:start="29:20" pos:end="29:21">==</operator> <name pos:start="29:23" pos:end="29:42">DEVICE_LITTLE_ENDIAN</name></expr>)</condition> <block pos:start="29:45" pos:end="36:0">{<block_content pos:start="31:13" pos:end="31:31">

            <expr_stmt pos:start="31:13" pos:end="31:31"><expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:15">val</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:25">bswap32</name><argument_list pos:start="31:26" pos:end="31:30">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="37:9" pos:end="44:0"><if pos:start="37:9" pos:end="44:0">if <condition pos:start="37:12" pos:end="37:40">(<expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:18">endian</name> <operator pos:start="37:20" pos:end="37:21">==</operator> <name pos:start="37:23" pos:end="37:39">DEVICE_BIG_ENDIAN</name></expr>)</condition> <block pos:start="37:42" pos:end="44:0">{<block_content pos:start="39:13" pos:end="39:31">

            <expr_stmt pos:start="39:13" pos:end="39:31"><expr pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:15">val</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:30"><name pos:start="39:19" pos:end="39:25">bswap32</name><argument_list pos:start="39:26" pos:end="39:30">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="45:9" pos:end="45:48"><expr pos:start="45:9" pos:end="45:47"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:20">io_mem_write</name><argument_list pos:start="45:21" pos:end="45:47">(<argument pos:start="45:22" pos:end="45:32"><expr pos:start="45:22" pos:end="45:32"><name pos:start="45:22" pos:end="45:32"><name pos:start="45:22" pos:end="45:28">section</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:32">mr</name></name></expr></argument>, <argument pos:start="45:35" pos:end="45:38"><expr pos:start="45:35" pos:end="45:38"><name pos:start="45:35" pos:end="45:38">addr</name></expr></argument>, <argument pos:start="45:41" pos:end="45:43"><expr pos:start="45:41" pos:end="45:43"><name pos:start="45:41" pos:end="45:43">val</name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="83:5">else <block pos:start="47:12" pos:end="83:5">{<block_content pos:start="49:9" pos:end="81:43">

        <decl_stmt pos:start="49:9" pos:end="49:28"><decl pos:start="49:9" pos:end="49:27"><type pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:16">unsigned</name> <name pos:start="49:18" pos:end="49:21">long</name></type> <name pos:start="49:23" pos:end="49:27">addr1</name></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:56"><expr pos:start="51:9" pos:end="53:55"><name pos:start="51:9" pos:end="51:13">addr1</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <operator pos:start="51:17" pos:end="51:17">(</operator><call pos:start="51:18" pos:end="51:56"><name pos:start="51:18" pos:end="51:43">memory_region_get_ram_addr</name><argument_list pos:start="51:44" pos:end="51:56">(<argument pos:start="51:45" pos:end="51:55"><expr pos:start="51:45" pos:end="51:55"><name pos:start="51:45" pos:end="51:55"><name pos:start="51:45" pos:end="51:51">section</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:55">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:58" pos:end="51:58">&amp;</operator> <name pos:start="51:60" pos:end="51:75">TARGET_PAGE_MASK</name><operator pos:start="51:76" pos:end="51:76">)</operator>

            <operator pos:start="53:13" pos:end="53:13">+</operator> <call pos:start="53:15" pos:end="53:55"><name pos:start="53:15" pos:end="53:40">memory_region_section_addr</name><argument_list pos:start="53:41" pos:end="53:55">(<argument pos:start="53:42" pos:end="53:48"><expr pos:start="53:42" pos:end="53:48"><name pos:start="53:42" pos:end="53:48">section</name></expr></argument>, <argument pos:start="53:51" pos:end="53:54"><expr pos:start="53:51" pos:end="53:54"><name pos:start="53:51" pos:end="53:54">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="55:9" pos:end="55:22">/* RAM case */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:11">ptr</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:37"><name pos:start="57:15" pos:end="57:30">qemu_get_ram_ptr</name><argument_list pos:start="57:31" pos:end="57:37">(<argument pos:start="57:32" pos:end="57:36"><expr pos:start="57:32" pos:end="57:36"><name pos:start="57:32" pos:end="57:36">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="59:9" pos:end="79:9">switch <condition pos:start="59:16" pos:end="59:23">(<expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">endian</name></expr>)</condition> <block pos:start="59:25" pos:end="79:9">{<block_content pos:start="61:9" pos:end="77:18">

        <case pos:start="61:9" pos:end="61:34">case <expr pos:start="61:14" pos:end="61:33"><name pos:start="61:14" pos:end="61:33">DEVICE_LITTLE_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="63:13" pos:end="63:31"><expr pos:start="63:13" pos:end="63:30"><call pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:20">stl_le_p</name><argument_list pos:start="63:21" pos:end="63:30">(<argument pos:start="63:22" pos:end="63:24"><expr pos:start="63:22" pos:end="63:24"><name pos:start="63:22" pos:end="63:24">ptr</name></expr></argument>, <argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:31">case <expr pos:start="67:14" pos:end="67:30"><name pos:start="67:14" pos:end="67:30">DEVICE_BIG_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:31"><expr pos:start="69:13" pos:end="69:30"><call pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:20">stl_be_p</name><argument_list pos:start="69:21" pos:end="69:30">(<argument pos:start="69:22" pos:end="69:24"><expr pos:start="69:22" pos:end="69:24"><name pos:start="69:22" pos:end="69:24">ptr</name></expr></argument>, <argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <default pos:start="73:9" pos:end="73:16">default:</default>

            <expr_stmt pos:start="75:13" pos:end="75:28"><expr pos:start="75:13" pos:end="75:27"><call pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:17">stl_p</name><argument_list pos:start="75:18" pos:end="75:27">(<argument pos:start="75:19" pos:end="75:21"><expr pos:start="75:19" pos:end="75:21"><name pos:start="75:19" pos:end="75:21">ptr</name></expr></argument>, <argument pos:start="75:24" pos:end="75:26"><expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="81:9" pos:end="81:43"><expr pos:start="81:9" pos:end="81:42"><call pos:start="81:9" pos:end="81:42"><name pos:start="81:9" pos:end="81:32">invalidate_and_set_dirty</name><argument_list pos:start="81:33" pos:end="81:42">(<argument pos:start="81:34" pos:end="81:38"><expr pos:start="81:34" pos:end="81:38"><name pos:start="81:34" pos:end="81:38">addr1</name></expr></argument>, <argument pos:start="81:41" pos:end="81:41"><expr pos:start="81:41" pos:end="81:41"><literal type="number" pos:start="81:41" pos:end="81:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
