<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12975.c" pos:tabs="8"><function pos:start="1:1" pos:end="18:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">AcpiCpuHotplug_add</name><parameter_list pos:start="1:24" pos:end="1:71">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">ACPIGPE</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">gpe</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:55"><decl pos:start="1:39" pos:end="1:55"><type pos:start="1:39" pos:end="1:55"><name pos:start="1:39" pos:end="1:52">AcpiCpuHotplug</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">g</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:70"><decl pos:start="1:58" pos:end="1:70"><type pos:start="1:58" pos:end="1:70"><name pos:start="1:58" pos:end="1:65">CPUState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="18:1">{<block_content pos:start="5:5" pos:end="16:46">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">k</name> <init pos:start="5:17" pos:end="5:36">= <expr pos:start="5:19" pos:end="5:36"><call pos:start="5:19" pos:end="5:36"><name pos:start="5:19" pos:end="5:31">CPU_GET_CLASS</name><argument_list pos:start="5:32" pos:end="5:36">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:18">cpu_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:52"><expr pos:start="11:5" pos:end="11:51"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:13"><name pos:start="11:6" pos:end="11:8">gpe</name><operator pos:start="11:9" pos:end="11:10">-&gt;</operator><name pos:start="11:11" pos:end="11:13">sts</name></name> <operator pos:start="11:15" pos:end="11:15">=</operator> <operator pos:start="11:17" pos:end="11:17">*</operator><name pos:start="11:18" pos:end="11:25"><name pos:start="11:18" pos:end="11:20">gpe</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:25">sts</name></name> <operator pos:start="11:27" pos:end="11:27">|</operator> <name pos:start="11:29" pos:end="11:51">ACPI_CPU_HOTPLUG_STATUS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:10">cpu_id</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <call pos:start="13:14" pos:end="13:37"><name pos:start="13:14" pos:end="13:27"><name pos:start="13:14" pos:end="13:14">k</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:27">get_arch_id</name></name><argument_list pos:start="13:28" pos:end="13:37">(<argument pos:start="13:29" pos:end="13:36"><expr pos:start="13:29" pos:end="13:36"><call pos:start="13:29" pos:end="13:36"><name pos:start="13:29" pos:end="13:31">CPU</name><argument_list pos:start="13:32" pos:end="13:36">(<argument pos:start="13:33" pos:end="13:35"><expr pos:start="13:33" pos:end="13:35"><name pos:start="13:33" pos:end="13:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="16:5" pos:end="16:46"><expr pos:start="16:5" pos:end="16:45"><name pos:start="16:5" pos:end="16:22"><name pos:start="16:5" pos:end="16:5">g</name><operator pos:start="16:6" pos:end="16:7">-&gt;</operator><name pos:start="16:8" pos:end="16:10">sts</name><index pos:start="16:11" pos:end="16:22">[<expr pos:start="16:12" pos:end="16:21"><name pos:start="16:12" pos:end="16:17">cpu_id</name> <operator pos:start="16:19" pos:end="16:19">/</operator> <literal type="number" pos:start="16:21" pos:end="16:21">8</literal></expr>]</index></name> <operator pos:start="16:24" pos:end="16:25">|=</operator> <operator pos:start="16:27" pos:end="16:27">(</operator><literal type="number" pos:start="16:28" pos:end="16:28">1</literal> <operator pos:start="16:30" pos:end="16:31">&lt;&lt;</operator> <operator pos:start="16:33" pos:end="16:33">(</operator><name pos:start="16:34" pos:end="16:39">cpu_id</name> <operator pos:start="16:41" pos:end="16:41">%</operator> <literal type="number" pos:start="16:43" pos:end="16:43">8</literal><operator pos:start="16:44" pos:end="16:44">)</operator><operator pos:start="16:45" pos:end="16:45">)</operator></expr>;</expr_stmt>

</block_content>}</block></function></unit>
