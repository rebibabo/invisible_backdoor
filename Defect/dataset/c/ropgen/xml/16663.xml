<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16663.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:22"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:14">GuestFileWrite</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:36">qmp_guest_file_write</name><parameter_list pos:start="1:37" pos:end="3:50">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:44">int64_t</name></type> <name pos:start="1:46" pos:end="1:51">handle</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:63">char</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">buf_b64</name></decl></parameter>,
                                     <parameter pos:start="2:38" pos:end="2:51"><decl pos:start="2:38" pos:end="2:51"><type pos:start="2:38" pos:end="2:51"><name pos:start="2:38" pos:end="2:41">bool</name></type> <name pos:start="2:43" pos:end="2:51">has_count</name></decl></parameter>, <parameter pos:start="2:54" pos:end="2:66"><decl pos:start="2:54" pos:end="2:66"><type pos:start="2:54" pos:end="2:66"><name pos:start="2:54" pos:end="2:60">int64_t</name></type> <name pos:start="2:62" pos:end="2:66">count</name></decl></parameter>,
                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:42">Error</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier><modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">errp</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="31:22">{<block_content pos:start="5:5" pos:end="31:22">
    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">GuestFileWrite</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:30">write_data</name> <init pos:start="5:32" pos:end="5:37">= <expr pos:start="5:34" pos:end="5:37"><name pos:start="5:34" pos:end="5:37">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:16"><decl pos:start="6:5" pos:end="6:15"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:10">guchar</name> <modifier pos:start="6:12" pos:end="6:12">*</modifier></type><name pos:start="6:13" pos:end="6:15">buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">gsize</name></type> <name pos:start="7:11" pos:end="7:17">buf_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:19">write_count</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:64"><decl pos:start="9:5" pos:end="9:63"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">GuestFileHandle</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">gfh</name> <init pos:start="9:26" pos:end="9:63">= <expr pos:start="9:28" pos:end="9:63"><call pos:start="9:28" pos:end="9:63"><name pos:start="9:28" pos:end="9:49">guest_file_handle_find</name><argument_list pos:start="9:50" pos:end="9:63">(<argument pos:start="9:51" pos:end="9:56"><expr pos:start="9:51" pos:end="9:56"><name pos:start="9:51" pos:end="9:56">handle</name></expr></argument>, <argument pos:start="9:59" pos:end="9:62"><expr pos:start="9:59" pos:end="9:62"><name pos:start="9:59" pos:end="9:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:13"><decl pos:start="10:5" pos:end="10:12"><type pos:start="10:5" pos:end="10:10"><name pos:start="10:5" pos:end="10:8">FILE</name> <modifier pos:start="10:10" pos:end="10:10">*</modifier></type><name pos:start="10:11" pos:end="10:12">fh</name></decl>;</decl_stmt>
    <if_stmt pos:start="11:5" pos:end="31:22"><if pos:start="11:5" pos:end="31:22">if <condition pos:start="11:8" pos:end="11:13">(<expr pos:start="11:9" pos:end="11:12"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:12">gfh</name></expr>)</condition> <block pos:start="11:15" pos:end="31:22">{<block_content pos:start="12:5" pos:end="31:22">
    <expr_stmt pos:start="12:5" pos:end="12:17"><expr pos:start="12:5" pos:end="12:16"><name pos:start="12:5" pos:end="12:6">fh</name> <operator pos:start="12:8" pos:end="12:8">=</operator> <name pos:start="12:10" pos:end="12:16"><name pos:start="12:10" pos:end="12:12">gfh</name><operator pos:start="12:13" pos:end="12:14">-&gt;</operator><name pos:start="12:15" pos:end="12:16">fh</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:7">buf</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:44"><name pos:start="13:11" pos:end="13:25">g_base64_decode</name><argument_list pos:start="13:26" pos:end="13:44">(<argument pos:start="13:27" pos:end="13:33"><expr pos:start="13:27" pos:end="13:33"><name pos:start="13:27" pos:end="13:33">buf_b64</name></expr></argument>, <argument pos:start="13:36" pos:end="13:43"><expr pos:start="13:36" pos:end="13:43"><operator pos:start="13:36" pos:end="13:36">&amp;</operator><name pos:start="13:37" pos:end="13:43">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="31:22"><if pos:start="14:5" pos:end="16:5">if <condition pos:start="14:8" pos:end="14:19">(<expr pos:start="14:9" pos:end="14:18"><operator pos:start="14:9" pos:end="14:9">!</operator><name pos:start="14:10" pos:end="14:18">has_count</name></expr>)</condition> <block pos:start="14:21" pos:end="16:5">{<block_content pos:start="15:9" pos:end="15:24">
        <expr_stmt pos:start="15:9" pos:end="15:24"><expr pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:13">count</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:23">buf_len</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="16:7" pos:end="31:22">else if <condition pos:start="16:15" pos:end="16:44">(<expr pos:start="16:16" pos:end="16:43"><name pos:start="16:16" pos:end="16:35"><name pos:start="16:16" pos:end="16:20">count</name> <argument_list type="generic" pos:start="16:22" pos:end="16:35">&lt; <argument pos:start="16:24" pos:end="16:33"><expr pos:start="16:24" pos:end="16:33"><literal type="number" pos:start="16:24" pos:end="16:24">0</literal> <operator pos:start="16:26" pos:end="16:27">||</operator> <name pos:start="16:29" pos:end="16:33">count</name></expr></argument> &gt;</argument_list></name> <name pos:start="16:37" pos:end="16:43">buf_len</name></expr>)</condition> <block pos:start="16:46" pos:end="31:22">{<block_content pos:start="17:9" pos:end="31:22">
        <expr_stmt pos:start="17:9" pos:end="18:26"><expr pos:start="17:9" pos:end="18:25"><call pos:start="17:9" pos:end="18:25"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="18:25">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:76"><expr pos:start="17:26" pos:end="17:76"><literal type="string" pos:start="17:26" pos:end="17:35">"value '%"</literal> <name pos:start="17:37" pos:end="17:42">PRId64</name> <literal type="string" pos:start="17:44" pos:end="17:76">"' is invalid for argument count"</literal></expr></argument>,
                   <argument pos:start="18:20" pos:end="18:24"><expr pos:start="18:20" pos:end="18:24"><name pos:start="18:20" pos:end="18:24">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="19:20"><expr pos:start="19:9" pos:end="19:19"><call pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:14">g_free</name><argument_list pos:start="19:15" pos:end="19:19">(<argument pos:start="19:16" pos:end="19:18"><expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:44"><expr pos:start="20:5" pos:end="20:43"><name pos:start="20:5" pos:end="20:15">write_count</name> <operator pos:start="20:17" pos:end="20:17">=</operator> <call pos:start="20:19" pos:end="20:43"><name pos:start="20:19" pos:end="20:24">fwrite</name><argument_list pos:start="20:25" pos:end="20:43">(<argument pos:start="20:26" pos:end="20:28"><expr pos:start="20:26" pos:end="20:28"><name pos:start="20:26" pos:end="20:28">buf</name></expr></argument>, <argument pos:start="20:31" pos:end="20:31"><expr pos:start="20:31" pos:end="20:31"><literal type="number" pos:start="20:31" pos:end="20:31">1</literal></expr></argument>, <argument pos:start="20:34" pos:end="20:38"><expr pos:start="20:34" pos:end="20:38"><name pos:start="20:34" pos:end="20:38">count</name></expr></argument>, <argument pos:start="20:41" pos:end="20:42"><expr pos:start="20:41" pos:end="20:42"><name pos:start="20:41" pos:end="20:42">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="21:5" pos:end="31:22"><if pos:start="21:5" pos:end="24:5">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><call pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:14">ferror</name><argument_list pos:start="21:15" pos:end="21:18">(<argument pos:start="21:16" pos:end="21:17"><expr pos:start="21:16" pos:end="21:17"><name pos:start="21:16" pos:end="21:17">fh</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:21" pos:end="24:5">{<block_content pos:start="22:9" pos:end="23:66">
        <expr_stmt pos:start="22:9" pos:end="22:65"><expr pos:start="22:9" pos:end="22:64"><call pos:start="22:9" pos:end="22:64"><name pos:start="22:9" pos:end="22:24">error_setg_errno</name><argument_list pos:start="22:25" pos:end="22:64">(<argument pos:start="22:26" pos:end="22:29"><expr pos:start="22:26" pos:end="22:29"><name pos:start="22:26" pos:end="22:29">errp</name></expr></argument>, <argument pos:start="22:32" pos:end="22:36"><expr pos:start="22:32" pos:end="22:36"><name pos:start="22:32" pos:end="22:36">errno</name></expr></argument>, <argument pos:start="22:39" pos:end="22:63"><expr pos:start="22:39" pos:end="22:63"><literal type="string" pos:start="22:39" pos:end="22:63">"failed to write to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:66"><expr pos:start="23:9" pos:end="23:65"><call pos:start="23:9" pos:end="23:65"><name pos:start="23:9" pos:end="23:12">slog</name><argument_list pos:start="23:13" pos:end="23:65">(<argument pos:start="23:14" pos:end="23:56"><expr pos:start="23:14" pos:end="23:56"><literal type="string" pos:start="23:14" pos:end="23:49">"guest-file-write failed, handle: %"</literal> <name pos:start="23:51" pos:end="23:56">PRId64</name></expr></argument>, <argument pos:start="23:59" pos:end="23:64"><expr pos:start="23:59" pos:end="23:64"><name pos:start="23:59" pos:end="23:64">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="24:7" pos:end="31:22">else <block pos:start="24:12" pos:end="31:22">{<block_content pos:start="25:9" pos:end="31:22">
        <expr_stmt pos:start="25:9" pos:end="25:47"><expr pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:18">write_data</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:46"><name pos:start="25:22" pos:end="25:27">g_new0</name><argument_list pos:start="25:28" pos:end="25:46">(<argument pos:start="25:29" pos:end="25:42"><expr pos:start="25:29" pos:end="25:42"><name pos:start="25:29" pos:end="25:42">GuestFileWrite</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:40"><expr pos:start="26:9" pos:end="26:39"><name pos:start="26:9" pos:end="26:25"><name pos:start="26:9" pos:end="26:18">write_data</name><operator pos:start="26:19" pos:end="26:20">-&gt;</operator><name pos:start="26:21" pos:end="26:25">count</name></name> <operator pos:start="26:27" pos:end="26:27">=</operator> <name pos:start="26:29" pos:end="26:39">write_count</name></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:18">write_data</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:23">eof</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:34"><name pos:start="27:27" pos:end="27:30">feof</name><argument_list pos:start="27:31" pos:end="27:34">(<argument pos:start="27:32" pos:end="27:33"><expr pos:start="27:32" pos:end="27:33"><name pos:start="27:32" pos:end="27:33">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:38"><expr pos:start="28:9" pos:end="28:37"><name pos:start="28:9" pos:end="28:18"><name pos:start="28:9" pos:end="28:11">gfh</name><operator pos:start="28:12" pos:end="28:13">-&gt;</operator><name pos:start="28:14" pos:end="28:18">state</name></name> <operator pos:start="28:20" pos:end="28:20">=</operator> <name pos:start="28:22" pos:end="28:37">RW_STATE_WRITING</name></expr>;</expr_stmt>
    <expr_stmt pos:start="29:5" pos:end="29:16"><expr pos:start="29:5" pos:end="29:15"><call pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:10">g_free</name><argument_list pos:start="29:11" pos:end="29:15">(<argument pos:start="29:12" pos:end="29:14"><expr pos:start="29:12" pos:end="29:14"><name pos:start="29:12" pos:end="29:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:17"><expr pos:start="30:5" pos:end="30:16"><call pos:start="30:5" pos:end="30:16"><name pos:start="30:5" pos:end="30:12">clearerr</name><argument_list pos:start="30:13" pos:end="30:16">(<argument pos:start="30:14" pos:end="30:15"><expr pos:start="30:14" pos:end="30:15"><name pos:start="30:14" pos:end="30:15">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="31:5" pos:end="31:22">return <expr pos:start="31:12" pos:end="31:21"><name pos:start="31:12" pos:end="31:21">write_data</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
