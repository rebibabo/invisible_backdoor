<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5588.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">latm_write_packet</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">AVPacket</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:31">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">LATMContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">ctx</name> <init pos:start="5:22" pos:end="5:35">= <expr pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:35"><name pos:start="5:24" pos:end="5:24">s</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:35">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">PutBitContext</name></type> <name pos:start="9:19" pos:end="9:20">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:25"><name pos:start="13:13" pos:end="13:23">loas_header</name><index pos:start="13:24" pos:end="13:25">[]</index></name> <init pos:start="13:27" pos:end="13:42">= <expr pos:start="13:29" pos:end="13:42"><literal type="string" pos:start="13:29" pos:end="13:42">"\x56\xe0\x00"</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:43"><if pos:start="17:5" pos:end="19:43">if <condition pos:start="17:8" pos:end="17:66">(<expr pos:start="17:9" pos:end="17:65"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:18">streams</name><index pos:start="17:19" pos:end="17:21">[<expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>]</index></name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:41"><name pos:start="17:24" pos:end="17:31">codecpar</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:41">codec_id</name></name> <operator pos:start="17:43" pos:end="17:44">==</operator> <name pos:start="17:46" pos:end="17:65">AV_CODEC_ID_AAC_LATM</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:43"><block_content pos:start="19:9" pos:end="19:43">

        <return pos:start="19:9" pos:end="19:43">return <expr pos:start="19:16" pos:end="19:42"><call pos:start="19:16" pos:end="19:42"><name pos:start="19:16" pos:end="19:34">ff_raw_write_packet</name><argument_list pos:start="19:35" pos:end="19:42">(<argument pos:start="19:36" pos:end="19:36"><expr pos:start="19:36" pos:end="19:36"><name pos:start="19:36" pos:end="19:36">s</name></expr></argument>, <argument pos:start="19:39" pos:end="19:41"><expr pos:start="19:39" pos:end="19:41"><name pos:start="19:39" pos:end="19:41">pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:44">(<expr pos:start="23:9" pos:end="23:43"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:10">s</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:19">streams</name><index pos:start="23:20" pos:end="23:22">[<expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">0</literal></expr>]</index></name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:43"><name pos:start="23:25" pos:end="23:32">codecpar</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:43">extradata</name></name></expr>)</condition> <block pos:start="23:46" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:39">

        <if_stmt pos:start="25:9" pos:end="33:39"><if pos:start="25:9" pos:end="29:47">if<condition pos:start="25:11" pos:end="27:63">(<expr pos:start="25:12" pos:end="27:62"><name pos:start="25:12" pos:end="25:20"><name pos:start="25:12" pos:end="25:14">pkt</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:20">size</name></name> <operator pos:start="25:22" pos:end="25:22">&gt;</operator> <literal type="number" pos:start="25:24" pos:end="25:24">2</literal> <operator pos:start="25:26" pos:end="25:27">&amp;&amp;</operator> <name pos:start="25:29" pos:end="25:40"><name pos:start="25:29" pos:end="25:31">pkt</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:37">data</name><index pos:start="25:38" pos:end="25:40">[<expr pos:start="25:39" pos:end="25:39"><literal type="number" pos:start="25:39" pos:end="25:39">0</literal></expr>]</index></name> <operator pos:start="25:42" pos:end="25:43">==</operator> <literal type="number" pos:start="25:45" pos:end="25:48">0x56</literal> <operator pos:start="25:50" pos:end="25:51">&amp;&amp;</operator> <operator pos:start="25:53" pos:end="25:53">(</operator><name pos:start="25:54" pos:end="25:65"><name pos:start="25:54" pos:end="25:56">pkt</name><operator pos:start="25:57" pos:end="25:58">-&gt;</operator><name pos:start="25:59" pos:end="25:62">data</name><index pos:start="25:63" pos:end="25:65">[<expr pos:start="25:64" pos:end="25:64"><literal type="number" pos:start="25:64" pos:end="25:64">1</literal></expr>]</index></name> <operator pos:start="25:67" pos:end="25:68">&gt;&gt;</operator> <literal type="number" pos:start="25:70" pos:end="25:70">4</literal><operator pos:start="25:71" pos:end="25:71">)</operator> <operator pos:start="25:73" pos:end="25:74">==</operator> <literal type="number" pos:start="25:76" pos:end="25:78">0xe</literal> <operator pos:start="25:80" pos:end="25:81">&amp;&amp;</operator>

            <operator pos:start="27:13" pos:end="27:13">(</operator><call pos:start="27:14" pos:end="27:35"><name pos:start="27:14" pos:end="27:20">AV_RB16</name><argument_list pos:start="27:21" pos:end="27:35">(<argument pos:start="27:22" pos:end="27:34"><expr pos:start="27:22" pos:end="27:34"><name pos:start="27:22" pos:end="27:30"><name pos:start="27:22" pos:end="27:24">pkt</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:30">data</name></name> <operator pos:start="27:32" pos:end="27:32">+</operator> <literal type="number" pos:start="27:34" pos:end="27:34">1</literal></expr></argument>)</argument_list></call> <operator pos:start="27:37" pos:end="27:37">&amp;</operator> <literal type="number" pos:start="27:39" pos:end="27:44">0x1FFF</literal><operator pos:start="27:45" pos:end="27:45">)</operator> <operator pos:start="27:47" pos:end="27:47">+</operator> <literal type="number" pos:start="27:49" pos:end="27:49">3</literal> <operator pos:start="27:51" pos:end="27:52">==</operator> <name pos:start="27:54" pos:end="27:62"><name pos:start="27:54" pos:end="27:56">pkt</name><operator pos:start="27:57" pos:end="27:58">-&gt;</operator><name pos:start="27:59" pos:end="27:62">size</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:47"><block_content pos:start="29:13" pos:end="29:47">

            <return pos:start="29:13" pos:end="29:47">return <expr pos:start="29:20" pos:end="29:46"><call pos:start="29:20" pos:end="29:46"><name pos:start="29:20" pos:end="29:38">ff_raw_write_packet</name><argument_list pos:start="29:39" pos:end="29:46">(<argument pos:start="29:40" pos:end="29:40"><expr pos:start="29:40" pos:end="29:40"><name pos:start="29:40" pos:end="29:40">s</name></expr></argument>, <argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">pkt</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="31:9" pos:end="33:39">else<block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="41:23"><if pos:start="39:5" pos:end="41:23">if <condition pos:start="39:8" pos:end="39:27">(<expr pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:11">pkt</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:17">size</name></name> <operator pos:start="39:19" pos:end="39:19">&gt;</operator> <literal type="number" pos:start="39:21" pos:end="39:26">0x1fff</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:23"><block_content pos:start="41:9" pos:end="41:23">

        <goto pos:start="41:9" pos:end="41:23">goto <name pos:start="41:14" pos:end="41:22">too_large</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:71"><expr pos:start="45:5" pos:end="45:70"><call pos:start="45:5" pos:end="45:70"><name pos:start="45:5" pos:end="45:17">init_put_bits</name><argument_list pos:start="45:18" pos:end="45:70">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:21">bs</name></expr></argument>, <argument pos:start="45:24" pos:end="45:34"><expr pos:start="45:24" pos:end="45:34"><name pos:start="45:24" pos:end="45:34"><name pos:start="45:24" pos:end="45:26">ctx</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:34">buffer</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:69"><expr pos:start="45:37" pos:end="45:69"><name pos:start="45:37" pos:end="45:45"><name pos:start="45:37" pos:end="45:39">pkt</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:45">size</name></name><operator pos:start="45:46" pos:end="45:46">+</operator><literal type="number" pos:start="45:47" pos:end="45:51">1024</literal><operator pos:start="45:51" pos:end="45:51">+</operator><name pos:start="45:52" pos:end="45:69">MAX_EXTRADATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><call pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:27">latm_write_frame_header</name><argument_list pos:start="49:28" pos:end="49:35">(<argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><name pos:start="49:29" pos:end="49:29">s</name></expr></argument>, <argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:34">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:29">/* PayloadLengthInfo() */</comment>

    <for pos:start="55:5" pos:end="57:30">for <control pos:start="55:9" pos:end="55:43">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:20">&lt;=</operator> <name pos:start="55:22" pos:end="55:30"><name pos:start="55:22" pos:end="55:24">pkt</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:30">size</name></name><operator pos:start="55:31" pos:end="55:31">-</operator><literal type="number" pos:start="55:32" pos:end="55:34">255</literal></expr>;</condition> <incr pos:start="55:37" pos:end="55:42"><expr pos:start="55:37" pos:end="55:42"><name pos:start="55:37" pos:end="55:37">i</name><operator pos:start="55:38" pos:end="55:39">+=</operator><literal type="number" pos:start="55:40" pos:end="55:42">255</literal></expr></incr>)</control><block type="pseudo" pos:start="57:9" pos:end="57:30"><block_content pos:start="57:9" pos:end="57:30">

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><call pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:16">put_bits</name><argument_list pos:start="57:17" pos:end="57:29">(<argument pos:start="57:18" pos:end="57:20"><expr pos:start="57:18" pos:end="57:20"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:20">bs</name></expr></argument>, <argument pos:start="57:23" pos:end="57:23"><expr pos:start="57:23" pos:end="57:23"><literal type="number" pos:start="57:23" pos:end="57:23">8</literal></expr></argument>, <argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><literal type="number" pos:start="57:26" pos:end="57:28">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="61:5" pos:end="61:34"><expr pos:start="61:5" pos:end="61:33"><call pos:start="61:5" pos:end="61:33"><name pos:start="61:5" pos:end="61:12">put_bits</name><argument_list pos:start="61:13" pos:end="61:33">(<argument pos:start="61:14" pos:end="61:16"><expr pos:start="61:14" pos:end="61:16"><operator pos:start="61:14" pos:end="61:14">&amp;</operator><name pos:start="61:15" pos:end="61:16">bs</name></expr></argument>, <argument pos:start="61:19" pos:end="61:19"><expr pos:start="61:19" pos:end="61:19"><literal type="number" pos:start="61:19" pos:end="61:19">8</literal></expr></argument>, <argument pos:start="61:22" pos:end="61:32"><expr pos:start="61:22" pos:end="61:32"><name pos:start="61:22" pos:end="61:30"><name pos:start="61:22" pos:end="61:24">pkt</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:30">size</name></name><operator pos:start="61:31" pos:end="61:31">-</operator><name pos:start="61:32" pos:end="61:32">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:47">/* The LATM payload is written unaligned */</comment>



    <comment type="block" pos:start="69:5" pos:end="69:22">/* PayloadMux() */</comment>

    <if_stmt pos:start="71:5" pos:end="95:54"><if pos:start="71:5" pos:end="93:5">if <condition pos:start="71:8" pos:end="71:51">(<expr pos:start="71:9" pos:end="71:50"><name pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:11">pkt</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:17">size</name></name> <operator pos:start="71:19" pos:end="71:20">&amp;&amp;</operator> <operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:25">pkt</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:31">data</name><index pos:start="71:32" pos:end="71:34">[<expr pos:start="71:33" pos:end="71:33"><literal type="number" pos:start="71:33" pos:end="71:33">0</literal></expr>]</index></name> <operator pos:start="71:36" pos:end="71:36">&amp;</operator> <literal type="number" pos:start="71:38" pos:end="71:41">0xe1</literal><operator pos:start="71:42" pos:end="71:42">)</operator> <operator pos:start="71:44" pos:end="71:45">==</operator> <literal type="number" pos:start="71:47" pos:end="71:50">0x81</literal></expr>)</condition> <block pos:start="71:53" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:62">

        <comment type="line" pos:start="73:9" pos:end="73:51">// Convert byte-aligned DSE to non-aligned.</comment>

        <comment type="line" pos:start="75:9" pos:end="75:56">// Due to the input format encoding we know that</comment>

        <comment type="line" pos:start="77:9" pos:end="77:60">// it is naturally byte-aligned in the input stream,</comment>

        <comment type="line" pos:start="79:9" pos:end="79:55">// so there are no padding bits to account for.</comment>

        <comment type="line" pos:start="81:9" pos:end="81:60">// To avoid having to add padding bits and rearrange</comment>

        <comment type="line" pos:start="83:9" pos:end="83:63">// the whole stream we just remove the byte-align flag.</comment>

        <comment type="line" pos:start="85:9" pos:end="85:65">// This allows us to remux our FATE AAC samples into latm</comment>

        <comment type="line" pos:start="87:9" pos:end="87:61">// files that are still playable with minimal effort.</comment>

        <expr_stmt pos:start="89:9" pos:end="89:46"><expr pos:start="89:9" pos:end="89:45"><call pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:16">put_bits</name><argument_list pos:start="89:17" pos:end="89:45">(<argument pos:start="89:18" pos:end="89:20"><expr pos:start="89:18" pos:end="89:20"><operator pos:start="89:18" pos:end="89:18">&amp;</operator><name pos:start="89:19" pos:end="89:20">bs</name></expr></argument>, <argument pos:start="89:23" pos:end="89:23"><expr pos:start="89:23" pos:end="89:23"><literal type="number" pos:start="89:23" pos:end="89:23">8</literal></expr></argument>, <argument pos:start="89:26" pos:end="89:44"><expr pos:start="89:26" pos:end="89:44"><name pos:start="89:26" pos:end="89:37"><name pos:start="89:26" pos:end="89:28">pkt</name><operator pos:start="89:29" pos:end="89:30">-&gt;</operator><name pos:start="89:31" pos:end="89:34">data</name><index pos:start="89:35" pos:end="89:37">[<expr pos:start="89:36" pos:end="89:36"><literal type="number" pos:start="89:36" pos:end="89:36">0</literal></expr>]</index></name> <operator pos:start="89:39" pos:end="89:39">&amp;</operator> <literal type="number" pos:start="89:41" pos:end="89:44">0xfe</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:62"><expr pos:start="91:9" pos:end="91:61"><call pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:24">avpriv_copy_bits</name><argument_list pos:start="91:25" pos:end="91:61">(<argument pos:start="91:26" pos:end="91:28"><expr pos:start="91:26" pos:end="91:28"><operator pos:start="91:26" pos:end="91:26">&amp;</operator><name pos:start="91:27" pos:end="91:28">bs</name></expr></argument>, <argument pos:start="91:31" pos:end="91:43"><expr pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:39"><name pos:start="91:31" pos:end="91:33">pkt</name><operator pos:start="91:34" pos:end="91:35">-&gt;</operator><name pos:start="91:36" pos:end="91:39">data</name></name> <operator pos:start="91:41" pos:end="91:41">+</operator> <literal type="number" pos:start="91:43" pos:end="91:43">1</literal></expr></argument>, <argument pos:start="91:46" pos:end="91:60"><expr pos:start="91:46" pos:end="91:60"><literal type="number" pos:start="91:46" pos:end="91:46">8</literal><operator pos:start="91:47" pos:end="91:47">*</operator><name pos:start="91:48" pos:end="91:56"><name pos:start="91:48" pos:end="91:50">pkt</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:56">size</name></name> <operator pos:start="91:58" pos:end="91:58">-</operator> <literal type="number" pos:start="91:60" pos:end="91:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="95:54">else<block type="pseudo" pos:start="95:9" pos:end="95:54"><block_content pos:start="95:9" pos:end="95:54">

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><call pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:24">avpriv_copy_bits</name><argument_list pos:start="95:25" pos:end="95:53">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><operator pos:start="95:26" pos:end="95:26">&amp;</operator><name pos:start="95:27" pos:end="95:28">bs</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:33">pkt</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:39">data</name></name></expr></argument>, <argument pos:start="95:42" pos:end="95:52"><expr pos:start="95:42" pos:end="95:52"><literal type="number" pos:start="95:42" pos:end="95:42">8</literal><operator pos:start="95:43" pos:end="95:43">*</operator><name pos:start="95:44" pos:end="95:52"><name pos:start="95:44" pos:end="95:46">pkt</name><operator pos:start="95:47" pos:end="95:48">-&gt;</operator><name pos:start="95:49" pos:end="95:52">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:31"><expr pos:start="99:5" pos:end="99:30"><call pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:25">avpriv_align_put_bits</name><argument_list pos:start="99:26" pos:end="99:30">(<argument pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><operator pos:start="99:27" pos:end="99:27">&amp;</operator><name pos:start="99:28" pos:end="99:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:24"><expr pos:start="101:5" pos:end="101:23"><call pos:start="101:5" pos:end="101:23"><name pos:start="101:5" pos:end="101:18">flush_put_bits</name><argument_list pos:start="101:19" pos:end="101:23">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><operator pos:start="101:20" pos:end="101:20">&amp;</operator><name pos:start="101:21" pos:end="101:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:35"><expr pos:start="105:5" pos:end="105:34"><name pos:start="105:5" pos:end="105:7">len</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:29"><name pos:start="105:11" pos:end="105:24">put_bits_count</name><argument_list pos:start="105:25" pos:end="105:29">(<argument pos:start="105:26" pos:end="105:28"><expr pos:start="105:26" pos:end="105:28"><operator pos:start="105:26" pos:end="105:26">&amp;</operator><name pos:start="105:27" pos:end="105:28">bs</name></expr></argument>)</argument_list></call> <operator pos:start="105:31" pos:end="105:32">&gt;&gt;</operator> <literal type="number" pos:start="105:34" pos:end="105:34">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="111:23"><if pos:start="109:5" pos:end="111:23">if <condition pos:start="109:8" pos:end="109:21">(<expr pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:11">len</name> <operator pos:start="109:13" pos:end="109:13">&gt;</operator> <literal type="number" pos:start="109:15" pos:end="109:20">0x1fff</literal></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:23"><block_content pos:start="111:9" pos:end="111:23">

        <goto pos:start="111:9" pos:end="111:23">goto <name pos:start="111:14" pos:end="111:22">too_large</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:40"><expr pos:start="115:5" pos:end="115:39"><name pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:15">loas_header</name><index pos:start="115:16" pos:end="115:18">[<expr pos:start="115:17" pos:end="115:17"><literal type="number" pos:start="115:17" pos:end="115:17">1</literal></expr>]</index></name> <operator pos:start="115:20" pos:end="115:21">|=</operator> <operator pos:start="115:23" pos:end="115:23">(</operator><name pos:start="115:24" pos:end="115:26">len</name> <operator pos:start="115:28" pos:end="115:29">&gt;&gt;</operator> <literal type="number" pos:start="115:31" pos:end="115:31">8</literal><operator pos:start="115:32" pos:end="115:32">)</operator> <operator pos:start="115:34" pos:end="115:34">&amp;</operator> <literal type="number" pos:start="115:36" pos:end="115:39">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:33"><expr pos:start="117:5" pos:end="117:32"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:15">loas_header</name><index pos:start="117:16" pos:end="117:18">[<expr pos:start="117:17" pos:end="117:17"><literal type="number" pos:start="117:17" pos:end="117:17">2</literal></expr>]</index></name> <operator pos:start="117:20" pos:end="117:21">|=</operator> <name pos:start="117:23" pos:end="117:25">len</name> <operator pos:start="117:27" pos:end="117:27">&amp;</operator> <literal type="number" pos:start="117:29" pos:end="117:32">0xff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:35"><expr pos:start="121:5" pos:end="121:34"><call pos:start="121:5" pos:end="121:34"><name pos:start="121:5" pos:end="121:14">avio_write</name><argument_list pos:start="121:15" pos:end="121:34">(<argument pos:start="121:16" pos:end="121:17"><expr pos:start="121:16" pos:end="121:17"><name pos:start="121:16" pos:end="121:17">pb</name></expr></argument>, <argument pos:start="121:20" pos:end="121:30"><expr pos:start="121:20" pos:end="121:30"><name pos:start="121:20" pos:end="121:30">loas_header</name></expr></argument>, <argument pos:start="121:33" pos:end="121:33"><expr pos:start="121:33" pos:end="121:33"><literal type="number" pos:start="121:33" pos:end="121:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:37"><expr pos:start="123:5" pos:end="123:36"><call pos:start="123:5" pos:end="123:36"><name pos:start="123:5" pos:end="123:14">avio_write</name><argument_list pos:start="123:15" pos:end="123:36">(<argument pos:start="123:16" pos:end="123:17"><expr pos:start="123:16" pos:end="123:17"><name pos:start="123:16" pos:end="123:17">pb</name></expr></argument>, <argument pos:start="123:20" pos:end="123:30"><expr pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:30"><name pos:start="123:20" pos:end="123:22">ctx</name><operator pos:start="123:23" pos:end="123:24">-&gt;</operator><name pos:start="123:25" pos:end="123:30">buffer</name></name></expr></argument>, <argument pos:start="123:33" pos:end="123:35"><expr pos:start="123:33" pos:end="123:35"><name pos:start="123:33" pos:end="123:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>



<label pos:start="131:1" pos:end="131:10"><name pos:start="131:1" pos:end="131:9">too_large</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:82"><expr pos:start="133:5" pos:end="133:81"><call pos:start="133:5" pos:end="133:81"><name pos:start="133:5" pos:end="133:10">av_log</name><argument_list pos:start="133:11" pos:end="133:81">(<argument pos:start="133:12" pos:end="133:12"><expr pos:start="133:12" pos:end="133:12"><name pos:start="133:12" pos:end="133:12">s</name></expr></argument>, <argument pos:start="133:15" pos:end="133:26"><expr pos:start="133:15" pos:end="133:26"><name pos:start="133:15" pos:end="133:26">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:29" pos:end="133:80"><expr pos:start="133:29" pos:end="133:80"><literal type="string" pos:start="133:29" pos:end="133:80">"LATM packet size larger than maximum size 0x1fff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:31">return <expr pos:start="135:12" pos:end="135:30"><name pos:start="135:12" pos:end="135:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
