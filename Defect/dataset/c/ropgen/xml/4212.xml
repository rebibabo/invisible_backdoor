<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4212.c" pos:tabs="8"><function pos:start="1:1" pos:end="433:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">id3v2_parse</name><parameter_list pos:start="1:24" pos:end="5:67">(<parameter pos:start="1:25" pos:end="1:39"><decl pos:start="1:25" pos:end="1:39"><type pos:start="1:25" pos:end="1:39"><name pos:start="1:25" pos:end="1:35">AVIOContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">pb</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:53">AVDictionary</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:64">metadata</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:39">AVFormatContext</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:42">s</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:51"><decl pos:start="3:45" pos:end="3:51"><type pos:start="3:45" pos:end="3:51"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:51">len</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:68"><decl pos:start="3:54" pos:end="3:68"><type pos:start="3:54" pos:end="3:68"><name pos:start="3:54" pos:end="3:60">uint8_t</name></type> <name pos:start="3:62" pos:end="3:68">version</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:37"><decl pos:start="5:25" pos:end="5:37"><type pos:start="5:25" pos:end="5:37"><name pos:start="5:25" pos:end="5:31">uint8_t</name></type> <name pos:start="5:33" pos:end="5:37">flags</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:66"><decl pos:start="5:40" pos:end="5:66"><type pos:start="5:40" pos:end="5:66"><name pos:start="5:40" pos:end="5:53">ID3v2ExtraMeta</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier><modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:66">extra_meta</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="433:1">{<block_content pos:start="9:5" pos:end="431:11">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">isv34</name></decl>, <decl pos:start="9:16" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:21">unsync</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:17">tlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:15"><name pos:start="13:10" pos:end="13:12">tag</name><index pos:start="13:13" pos:end="13:15">[<expr pos:start="13:14" pos:end="13:14"><literal type="number" pos:start="13:14" pos:end="13:14">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:16">next</name></decl>, <decl pos:start="15:19" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:11"/><name pos:start="15:19" pos:end="15:21">end</name> <init pos:start="15:23" pos:end="15:43">= <expr pos:start="15:25" pos:end="15:43"><call pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:33">avio_tell</name><argument_list pos:start="15:34" pos:end="15:37">(<argument pos:start="15:35" pos:end="15:36"><expr pos:start="15:35" pos:end="15:36"><name pos:start="15:35" pos:end="15:36">pb</name></expr></argument>)</argument_list></call> <operator pos:start="15:39" pos:end="15:39">+</operator> <name pos:start="15:41" pos:end="15:43">len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">taghdrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:22">reason</name> <init pos:start="19:24" pos:end="19:29">= <expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:15">AVIOContext</name></type> <name pos:start="21:17" pos:end="21:24">pb_local</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">AVIOContext</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:20">pbx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:33"><decl pos:start="25:5" pos:end="25:32"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:12">unsigned</name> <name pos:start="25:14" pos:end="25:17">char</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:25">buffer</name> <init pos:start="25:27" pos:end="25:32">= <expr pos:start="25:29" pos:end="25:32"><name pos:start="25:29" pos:end="25:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:30"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:19">buffer_size</name>       <init pos:start="27:27" pos:end="27:29">= <expr pos:start="27:29" pos:end="27:29"><literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:41"><decl pos:start="29:5" pos:end="29:40"><type pos:start="29:5" pos:end="29:23"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:21">ID3v2EMFunc</name> <modifier pos:start="29:23" pos:end="29:23">*</modifier></type><name pos:start="29:24" pos:end="29:33">extra_func</name> <init pos:start="29:35" pos:end="29:40">= <expr pos:start="29:37" pos:end="29:40"><name pos:start="29:37" pos:end="29:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:46"><decl pos:start="31:5" pos:end="31:45"><type pos:start="31:5" pos:end="31:19"><name pos:start="31:5" pos:end="31:12">unsigned</name> <name pos:start="31:14" pos:end="31:17">char</name> <modifier pos:start="31:19" pos:end="31:19">*</modifier></type><name pos:start="31:20" pos:end="31:38">uncompressed_buffer</name> <init pos:start="31:40" pos:end="31:45">= <expr pos:start="31:42" pos:end="31:45"><name pos:start="31:42" pos:end="31:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:47"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:13">av_unused</name> <name pos:start="33:15" pos:end="33:17">int</name></type> <name pos:start="33:19" pos:end="33:42">uncompressed_buffer_size</name> <init pos:start="33:44" pos:end="33:46">= <expr pos:start="33:46" pos:end="33:46"><literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:85"><expr pos:start="37:5" pos:end="37:84"><call pos:start="37:5" pos:end="37:84"><name pos:start="37:5" pos:end="37:10">av_log</name><argument_list pos:start="37:11" pos:end="37:84">(<argument pos:start="37:12" pos:end="37:12"><expr pos:start="37:12" pos:end="37:12"><name pos:start="37:12" pos:end="37:12">s</name></expr></argument>, <argument pos:start="37:15" pos:end="37:26"><expr pos:start="37:15" pos:end="37:26"><name pos:start="37:15" pos:end="37:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="37:29" pos:end="37:62"><expr pos:start="37:29" pos:end="37:62"><literal type="string" pos:start="37:29" pos:end="37:62">"id3v2 ver:%d flags:%02X len:%d\n"</literal></expr></argument>, <argument pos:start="37:65" pos:end="37:71"><expr pos:start="37:65" pos:end="37:71"><name pos:start="37:65" pos:end="37:71">version</name></expr></argument>, <argument pos:start="37:74" pos:end="37:78"><expr pos:start="37:74" pos:end="37:78"><name pos:start="37:74" pos:end="37:78">flags</name></expr></argument>, <argument pos:start="37:81" pos:end="37:83"><expr pos:start="37:81" pos:end="37:83"><name pos:start="37:81" pos:end="37:83">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="41:5" pos:end="79:5">switch <condition pos:start="41:12" pos:end="41:20">(<expr pos:start="41:13" pos:end="41:19"><name pos:start="41:13" pos:end="41:19">version</name></expr>)</condition> <block pos:start="41:22" pos:end="79:5">{<block_content pos:start="43:5" pos:end="77:19">

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">2</literal></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:25">(<expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:17">flags</name> <operator pos:start="45:19" pos:end="45:19">&amp;</operator> <literal type="number" pos:start="45:21" pos:end="45:24">0x40</literal></expr>)</condition> <block pos:start="45:27" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:23">

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:18">reason</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="string" pos:start="47:22" pos:end="47:34">"compression"</literal></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:23">goto <name pos:start="49:18" pos:end="49:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:13">isv34</name>     <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:17">taghdrlen</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">6</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <case pos:start="61:5" pos:end="61:11">case <expr pos:start="61:10" pos:end="61:10"><literal type="number" pos:start="61:10" pos:end="61:10">3</literal></expr>:</case>

    <case pos:start="63:5" pos:end="63:11">case <expr pos:start="63:10" pos:end="63:10"><literal type="number" pos:start="63:10" pos:end="63:10">4</literal></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">isv34</name>     <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:23"><expr pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:17">taghdrlen</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:22">10</literal></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <default pos:start="73:5" pos:end="73:12">default:</default>

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:14">reason</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="string" pos:start="75:18" pos:end="75:26">"version"</literal></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:19">goto <name pos:start="77:14" pos:end="77:18">error</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:10">unsync</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:18">flags</name> <operator pos:start="83:20" pos:end="83:20">&amp;</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x80</literal></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="119:5"><if pos:start="87:5" pos:end="119:5">if <condition pos:start="87:8" pos:end="87:30">(<expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:13">isv34</name> <operator pos:start="87:15" pos:end="87:16">&amp;&amp;</operator> <name pos:start="87:18" pos:end="87:22">flags</name> <operator pos:start="87:24" pos:end="87:24">&amp;</operator> <literal type="number" pos:start="87:26" pos:end="87:29">0x40</literal></expr>)</condition> <block pos:start="87:32" pos:end="119:5">{<block_content pos:start="89:9" pos:end="117:9"> <comment type="block" pos:start="87:34" pos:end="87:81">/* Extended header present, just skip over it */</comment>

        <decl_stmt pos:start="89:9" pos:end="89:37"><decl pos:start="89:9" pos:end="89:36"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:18">extlen</name> <init pos:start="89:20" pos:end="89:36">= <expr pos:start="89:22" pos:end="89:36"><call pos:start="89:22" pos:end="89:36"><name pos:start="89:22" pos:end="89:29">get_size</name><argument_list pos:start="89:30" pos:end="89:36">(<argument pos:start="89:31" pos:end="89:32"><expr pos:start="89:31" pos:end="89:32"><name pos:start="89:31" pos:end="89:32">pb</name></expr></argument>, <argument pos:start="89:35" pos:end="89:35"><expr pos:start="89:35" pos:end="89:35"><literal type="number" pos:start="89:35" pos:end="89:35">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="91:9" pos:end="95:24"><if pos:start="91:9" pos:end="95:24">if <condition pos:start="91:12" pos:end="91:25">(<expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:19">version</name> <operator pos:start="91:21" pos:end="91:22">==</operator> <literal type="number" pos:start="91:24" pos:end="91:24">4</literal></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:24"><block_content pos:start="95:13" pos:end="95:24">

            <comment type="block" pos:start="93:13" pos:end="93:76">/* In v2.4 the length includes the length field we just read. */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:24"><expr pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:18">extlen</name> <operator pos:start="95:20" pos:end="95:21">-=</operator> <literal type="number" pos:start="95:23" pos:end="95:23">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:23">(<expr pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:18">extlen</name> <operator pos:start="99:20" pos:end="99:20">&lt;</operator> <literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>)</condition> <block pos:start="99:25" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:23">

            <expr_stmt pos:start="101:13" pos:end="101:54"><expr pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:18">reason</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="string" pos:start="101:22" pos:end="101:53">"invalid extended header length"</literal></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:23">goto <name pos:start="103:18" pos:end="103:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><call pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:17">avio_skip</name><argument_list pos:start="107:18" pos:end="107:29">(<argument pos:start="107:19" pos:end="107:20"><expr pos:start="107:19" pos:end="107:20"><name pos:start="107:19" pos:end="107:20">pb</name></expr></argument>, <argument pos:start="107:23" pos:end="107:28"><expr pos:start="107:23" pos:end="107:28"><name pos:start="107:23" pos:end="107:28">extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:11">len</name> <operator pos:start="109:13" pos:end="109:14">-=</operator> <name pos:start="109:16" pos:end="109:21">extlen</name> <operator pos:start="109:23" pos:end="109:23">+</operator> <literal type="number" pos:start="109:25" pos:end="109:25">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">len</name> <operator pos:start="111:17" pos:end="111:17">&lt;</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:23">

            <expr_stmt pos:start="113:13" pos:end="113:49"><expr pos:start="113:13" pos:end="113:48"><name pos:start="113:13" pos:end="113:18">reason</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="string" pos:start="113:22" pos:end="113:48">"extended header too long."</literal></expr>;</expr_stmt>

            <goto pos:start="115:13" pos:end="115:23">goto <name pos:start="115:18" pos:end="115:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="123:5" pos:end="405:5">while <condition pos:start="123:11" pos:end="123:28">(<expr pos:start="123:12" pos:end="123:27"><name pos:start="123:12" pos:end="123:14">len</name> <operator pos:start="123:16" pos:end="123:17">&gt;=</operator> <name pos:start="123:19" pos:end="123:27">taghdrlen</name></expr>)</condition> <block pos:start="123:30" pos:end="405:5">{<block_content pos:start="125:9" pos:end="403:38">

        <decl_stmt pos:start="125:9" pos:end="125:32"><decl pos:start="125:9" pos:end="125:31"><type pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:16">unsigned</name> <name pos:start="125:18" pos:end="125:20">int</name></type> <name pos:start="125:22" pos:end="125:27">tflags</name> <init pos:start="125:29" pos:end="125:31">= <expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:32"><decl pos:start="127:9" pos:end="127:31"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:19">tunsync</name>         <init pos:start="127:29" pos:end="127:31">= <expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:32"><decl pos:start="129:9" pos:end="129:31"><type pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:11">int</name></type> <name pos:start="129:13" pos:end="129:17">tcomp</name>           <init pos:start="129:29" pos:end="129:31">= <expr pos:start="129:31" pos:end="129:31"><literal type="number" pos:start="129:31" pos:end="129:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:32"><decl pos:start="131:9" pos:end="131:31"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:17">tencr</name>           <init pos:start="131:29" pos:end="131:31">= <expr pos:start="131:31" pos:end="131:31"><literal type="number" pos:start="131:31" pos:end="131:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:37"><decl pos:start="133:9" pos:end="133:36"><type pos:start="133:9" pos:end="133:31"><name pos:start="133:9" pos:end="133:16">unsigned</name> <name pos:start="133:18" pos:end="133:21">long</name> <name pos:start="133:23" pos:end="133:31">av_unused</name></type> <name pos:start="133:33" pos:end="133:36">dlen</name></decl>;</decl_stmt>



        <if_stmt pos:start="137:9" pos:end="167:9"><if pos:start="137:9" pos:end="157:9">if <condition pos:start="137:12" pos:end="137:18">(<expr pos:start="137:13" pos:end="137:17"><name pos:start="137:13" pos:end="137:17">isv34</name></expr>)</condition> <block pos:start="137:20" pos:end="157:9">{<block_content pos:start="139:13" pos:end="155:50">

            <if_stmt pos:start="139:13" pos:end="141:22"><if pos:start="139:13" pos:end="141:22">if <condition pos:start="139:16" pos:end="139:42">(<expr pos:start="139:17" pos:end="139:41"><call pos:start="139:17" pos:end="139:37"><name pos:start="139:17" pos:end="139:25">avio_read</name><argument_list pos:start="139:26" pos:end="139:37">(<argument pos:start="139:27" pos:end="139:28"><expr pos:start="139:27" pos:end="139:28"><name pos:start="139:27" pos:end="139:28">pb</name></expr></argument>, <argument pos:start="139:31" pos:end="139:33"><expr pos:start="139:31" pos:end="139:33"><name pos:start="139:31" pos:end="139:33">tag</name></expr></argument>, <argument pos:start="139:36" pos:end="139:36"><expr pos:start="139:36" pos:end="139:36"><literal type="number" pos:start="139:36" pos:end="139:36">4</literal></expr></argument>)</argument_list></call> <operator pos:start="139:39" pos:end="139:39">&lt;</operator> <literal type="number" pos:start="139:41" pos:end="139:41">4</literal></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:22"><block_content pos:start="141:17" pos:end="141:22">

                <break pos:start="141:17" pos:end="141:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:23"><expr pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:18"><name pos:start="143:13" pos:end="143:15">tag</name><index pos:start="143:16" pos:end="143:18">[<expr pos:start="143:17" pos:end="143:17"><literal type="number" pos:start="143:17" pos:end="143:17">4</literal></expr>]</index></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="151:39"><if pos:start="145:13" pos:end="149:13">if <condition pos:start="145:16" pos:end="145:29">(<expr pos:start="145:17" pos:end="145:28"><name pos:start="145:17" pos:end="145:23">version</name> <operator pos:start="145:25" pos:end="145:26">==</operator> <literal type="number" pos:start="145:28" pos:end="145:28">3</literal></expr>)</condition> <block pos:start="145:31" pos:end="149:13">{<block_content pos:start="147:17" pos:end="147:37">

                <expr_stmt pos:start="147:17" pos:end="147:37"><expr pos:start="147:17" pos:end="147:36"><name pos:start="147:17" pos:end="147:20">tlen</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <call pos:start="147:24" pos:end="147:36"><name pos:start="147:24" pos:end="147:32">avio_rb32</name><argument_list pos:start="147:33" pos:end="147:36">(<argument pos:start="147:34" pos:end="147:35"><expr pos:start="147:34" pos:end="147:35"><name pos:start="147:34" pos:end="147:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="149:15" pos:end="151:39">else<block type="pseudo" pos:start="151:17" pos:end="151:39"><block_content pos:start="151:17" pos:end="151:39">

                <expr_stmt pos:start="151:17" pos:end="151:39"><expr pos:start="151:17" pos:end="151:38"><name pos:start="151:17" pos:end="151:20">tlen</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="151:38"><name pos:start="151:24" pos:end="151:31">get_size</name><argument_list pos:start="151:32" pos:end="151:38">(<argument pos:start="151:33" pos:end="151:34"><expr pos:start="151:33" pos:end="151:34"><name pos:start="151:33" pos:end="151:34">pb</name></expr></argument>, <argument pos:start="151:37" pos:end="151:37"><expr pos:start="151:37" pos:end="151:37"><literal type="number" pos:start="151:37" pos:end="151:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:36"><expr pos:start="153:13" pos:end="153:35"><name pos:start="153:13" pos:end="153:18">tflags</name>  <operator pos:start="153:21" pos:end="153:21">=</operator> <call pos:start="153:23" pos:end="153:35"><name pos:start="153:23" pos:end="153:31">avio_rb16</name><argument_list pos:start="153:32" pos:end="153:35">(<argument pos:start="153:33" pos:end="153:34"><expr pos:start="153:33" pos:end="153:34"><name pos:start="153:33" pos:end="153:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:50"><expr pos:start="155:13" pos:end="155:49"><name pos:start="155:13" pos:end="155:19">tunsync</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:28">tflags</name> <operator pos:start="155:30" pos:end="155:30">&amp;</operator> <name pos:start="155:32" pos:end="155:49">ID3v2_FLAG_UNSYNCH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="157:11" pos:end="167:9">else <block pos:start="157:16" pos:end="167:9">{<block_content pos:start="159:13" pos:end="165:35">

            <if_stmt pos:start="159:13" pos:end="161:22"><if pos:start="159:13" pos:end="161:22">if <condition pos:start="159:16" pos:end="159:42">(<expr pos:start="159:17" pos:end="159:41"><call pos:start="159:17" pos:end="159:37"><name pos:start="159:17" pos:end="159:25">avio_read</name><argument_list pos:start="159:26" pos:end="159:37">(<argument pos:start="159:27" pos:end="159:28"><expr pos:start="159:27" pos:end="159:28"><name pos:start="159:27" pos:end="159:28">pb</name></expr></argument>, <argument pos:start="159:31" pos:end="159:33"><expr pos:start="159:31" pos:end="159:33"><name pos:start="159:31" pos:end="159:33">tag</name></expr></argument>, <argument pos:start="159:36" pos:end="159:36"><expr pos:start="159:36" pos:end="159:36"><literal type="number" pos:start="159:36" pos:end="159:36">3</literal></expr></argument>)</argument_list></call> <operator pos:start="159:39" pos:end="159:39">&lt;</operator> <literal type="number" pos:start="159:41" pos:end="159:41">3</literal></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:22"><block_content pos:start="161:17" pos:end="161:22">

                <break pos:start="161:17" pos:end="161:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:23"><expr pos:start="163:13" pos:end="163:22"><name pos:start="163:13" pos:end="163:18"><name pos:start="163:13" pos:end="163:15">tag</name><index pos:start="163:16" pos:end="163:18">[<expr pos:start="163:17" pos:end="163:17"><literal type="number" pos:start="163:17" pos:end="163:17">3</literal></expr>]</index></name> <operator pos:start="163:20" pos:end="163:20">=</operator> <literal type="number" pos:start="163:22" pos:end="163:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:35"><expr pos:start="165:13" pos:end="165:34"><name pos:start="165:13" pos:end="165:16">tlen</name>   <operator pos:start="165:20" pos:end="165:20">=</operator> <call pos:start="165:22" pos:end="165:34"><name pos:start="165:22" pos:end="165:30">avio_rb24</name><argument_list pos:start="165:31" pos:end="165:34">(<argument pos:start="165:32" pos:end="165:33"><expr pos:start="165:32" pos:end="165:33"><name pos:start="165:32" pos:end="165:33">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="169:9" pos:end="171:18"><if pos:start="169:9" pos:end="171:18">if <condition pos:start="169:12" pos:end="169:27">(<expr pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:16">tlen</name> <operator pos:start="169:18" pos:end="169:18">&gt;</operator> <operator pos:start="169:20" pos:end="169:20">(</operator><literal type="number" pos:start="169:21" pos:end="169:21">1</literal><operator pos:start="169:22" pos:end="169:23">&lt;&lt;</operator><literal type="number" pos:start="169:24" pos:end="169:25">28</literal><operator pos:start="169:26" pos:end="169:26">)</operator></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:18"><block_content pos:start="171:13" pos:end="171:18">

            <break pos:start="171:13" pos:end="171:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:32"><expr pos:start="173:9" pos:end="173:31"><name pos:start="173:9" pos:end="173:11">len</name> <operator pos:start="173:13" pos:end="173:14">-=</operator> <name pos:start="173:16" pos:end="173:24">taghdrlen</name> <operator pos:start="173:26" pos:end="173:26">+</operator> <name pos:start="173:28" pos:end="173:31">tlen</name></expr>;</expr_stmt>



        <if_stmt pos:start="177:9" pos:end="179:18"><if pos:start="177:9" pos:end="179:18">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">len</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:18"><block_content pos:start="179:13" pos:end="179:18">

            <break pos:start="179:13" pos:end="179:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:36"><expr pos:start="183:9" pos:end="183:35"><name pos:start="183:9" pos:end="183:12">next</name> <operator pos:start="183:14" pos:end="183:14">=</operator> <call pos:start="183:16" pos:end="183:28"><name pos:start="183:16" pos:end="183:24">avio_tell</name><argument_list pos:start="183:25" pos:end="183:28">(<argument pos:start="183:26" pos:end="183:27"><expr pos:start="183:26" pos:end="183:27"><name pos:start="183:26" pos:end="183:27">pb</name></expr></argument>)</argument_list></call> <operator pos:start="183:30" pos:end="183:30">+</operator> <name pos:start="183:32" pos:end="183:35">tlen</name></expr>;</expr_stmt>



        <if_stmt pos:start="187:9" pos:end="197:9"><if pos:start="187:9" pos:end="197:9">if <condition pos:start="187:12" pos:end="187:18">(<expr pos:start="187:13" pos:end="187:17"><operator pos:start="187:13" pos:end="187:13">!</operator><name pos:start="187:14" pos:end="187:17">tlen</name></expr>)</condition> <block pos:start="187:20" pos:end="197:9">{<block_content pos:start="189:13" pos:end="195:21">

            <if_stmt pos:start="189:13" pos:end="193:28"><if pos:start="189:13" pos:end="193:28">if <condition pos:start="189:16" pos:end="189:23">(<expr pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:19">tag</name><index pos:start="189:20" pos:end="189:22">[<expr pos:start="189:21" pos:end="189:21"><literal type="number" pos:start="189:21" pos:end="189:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="193:28"><block_content pos:start="191:17" pos:end="193:28">

                <expr_stmt pos:start="191:17" pos:end="193:28"><expr pos:start="191:17" pos:end="193:27"><call pos:start="191:17" pos:end="193:27"><name pos:start="191:17" pos:end="191:22">av_log</name><argument_list pos:start="191:23" pos:end="193:27">(<argument pos:start="191:24" pos:end="191:24"><expr pos:start="191:24" pos:end="191:24"><name pos:start="191:24" pos:end="191:24">s</name></expr></argument>, <argument pos:start="191:27" pos:end="191:38"><expr pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="191:41" pos:end="191:77"><expr pos:start="191:41" pos:end="191:77"><literal type="string" pos:start="191:41" pos:end="191:77">"Invalid empty frame %s, skipping.\n"</literal></expr></argument>,

                       <argument pos:start="193:24" pos:end="193:26"><expr pos:start="193:24" pos:end="193:26"><name pos:start="193:24" pos:end="193:26">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <continue pos:start="195:13" pos:end="195:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="201:9" pos:end="213:24"><if pos:start="201:9" pos:end="211:9">if <condition pos:start="201:12" pos:end="201:40">(<expr pos:start="201:13" pos:end="201:39"><name pos:start="201:13" pos:end="201:18">tflags</name> <operator pos:start="201:20" pos:end="201:20">&amp;</operator> <name pos:start="201:22" pos:end="201:39">ID3v2_FLAG_DATALEN</name></expr>)</condition> <block pos:start="201:42" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:22">

            <if_stmt pos:start="203:13" pos:end="205:22"><if pos:start="203:13" pos:end="205:22">if <condition pos:start="203:16" pos:end="203:25">(<expr pos:start="203:17" pos:end="203:24"><name pos:start="203:17" pos:end="203:20">tlen</name> <operator pos:start="203:22" pos:end="203:22">&lt;</operator> <literal type="number" pos:start="203:24" pos:end="203:24">4</literal></expr>)</condition><block type="pseudo" pos:start="205:17" pos:end="205:22"><block_content pos:start="205:17" pos:end="205:22">

                <break pos:start="205:17" pos:end="205:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:33"><expr pos:start="207:13" pos:end="207:32"><name pos:start="207:13" pos:end="207:16">dlen</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <call pos:start="207:20" pos:end="207:32"><name pos:start="207:20" pos:end="207:28">avio_rb32</name><argument_list pos:start="207:29" pos:end="207:32">(<argument pos:start="207:30" pos:end="207:31"><expr pos:start="207:30" pos:end="207:31"><name pos:start="207:30" pos:end="207:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:22"><expr pos:start="209:13" pos:end="209:21"><name pos:start="209:13" pos:end="209:16">tlen</name> <operator pos:start="209:18" pos:end="209:19">-=</operator> <literal type="number" pos:start="209:21" pos:end="209:21">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="211:11" pos:end="213:24">else<block type="pseudo" pos:start="213:13" pos:end="213:24"><block_content pos:start="213:13" pos:end="213:24">

            <expr_stmt pos:start="213:13" pos:end="213:24"><expr pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:16">dlen</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <name pos:start="213:20" pos:end="213:23">tlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:48"><expr pos:start="217:9" pos:end="217:47"><name pos:start="217:9" pos:end="217:13">tcomp</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <name pos:start="217:17" pos:end="217:22">tflags</name> <operator pos:start="217:24" pos:end="217:24">&amp;</operator> <name pos:start="217:26" pos:end="217:47">ID3v2_FLAG_COMPRESSION</name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:47"><expr pos:start="219:9" pos:end="219:46"><name pos:start="219:9" pos:end="219:13">tencr</name> <operator pos:start="219:15" pos:end="219:15">=</operator> <name pos:start="219:17" pos:end="219:22">tflags</name> <operator pos:start="219:24" pos:end="219:24">&amp;</operator> <name pos:start="219:26" pos:end="219:46">ID3v2_FLAG_ENCRYPTION</name></expr>;</expr_stmt>



        <comment type="block" pos:start="223:9" pos:end="223:66">/* skip encrypted tags and, if no zlib, compressed tags */</comment>

        <if_stmt pos:start="225:9" pos:end="397:9"><if pos:start="225:9" pos:end="249:9">if <condition pos:start="225:12" pos:end="225:45">(<expr pos:start="225:13" pos:end="225:44"><name pos:start="225:13" pos:end="225:17">tencr</name> <operator pos:start="225:19" pos:end="225:20">||</operator> <operator pos:start="225:22" pos:end="225:22">(</operator><operator pos:start="225:23" pos:end="225:23">!</operator><name pos:start="225:24" pos:end="225:34">CONFIG_ZLIB</name> <operator pos:start="225:36" pos:end="225:37">&amp;&amp;</operator> <name pos:start="225:39" pos:end="225:43">tcomp</name><operator pos:start="225:44" pos:end="225:44">)</operator></expr>)</condition> <block pos:start="225:47" pos:end="249:9">{<block_content pos:start="227:13" pos:end="245:32">

            <decl_stmt pos:start="227:13" pos:end="227:29"><decl pos:start="227:13" pos:end="227:28"><type pos:start="227:13" pos:end="227:24"><specifier pos:start="227:13" pos:end="227:17">const</specifier> <name pos:start="227:19" pos:end="227:22">char</name> <modifier pos:start="227:24" pos:end="227:24">*</modifier></type><name pos:start="227:25" pos:end="227:28">type</name></decl>;</decl_stmt>

            <if_stmt pos:start="229:13" pos:end="239:50"><if pos:start="229:13" pos:end="231:35">if <condition pos:start="229:16" pos:end="229:23">(<expr pos:start="229:17" pos:end="229:22"><operator pos:start="229:17" pos:end="229:17">!</operator><name pos:start="229:18" pos:end="229:22">tcomp</name></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:35"><block_content pos:start="231:17" pos:end="231:35">

                <expr_stmt pos:start="231:17" pos:end="231:35"><expr pos:start="231:17" pos:end="231:34"><name pos:start="231:17" pos:end="231:20">type</name> <operator pos:start="231:22" pos:end="231:22">=</operator> <literal type="string" pos:start="231:24" pos:end="231:34">"encrypted"</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="233:13" pos:end="235:36">else if <condition pos:start="233:21" pos:end="233:28">(<expr pos:start="233:22" pos:end="233:27"><operator pos:start="233:22" pos:end="233:22">!</operator><name pos:start="233:23" pos:end="233:27">tencr</name></expr>)</condition><block type="pseudo" pos:start="235:17" pos:end="235:36"><block_content pos:start="235:17" pos:end="235:36">

                <expr_stmt pos:start="235:17" pos:end="235:36"><expr pos:start="235:17" pos:end="235:35"><name pos:start="235:17" pos:end="235:20">type</name> <operator pos:start="235:22" pos:end="235:22">=</operator> <literal type="string" pos:start="235:24" pos:end="235:35">"compressed"</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="237:13" pos:end="239:50">else<block type="pseudo" pos:start="239:17" pos:end="239:50"><block_content pos:start="239:17" pos:end="239:50">

                <expr_stmt pos:start="239:17" pos:end="239:50"><expr pos:start="239:17" pos:end="239:49"><name pos:start="239:17" pos:end="239:20">type</name> <operator pos:start="239:22" pos:end="239:22">=</operator> <literal type="string" pos:start="239:24" pos:end="239:49">"encrypted and compressed"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="243:13" pos:end="243:82"><expr pos:start="243:13" pos:end="243:81"><call pos:start="243:13" pos:end="243:81"><name pos:start="243:13" pos:end="243:18">av_log</name><argument_list pos:start="243:19" pos:end="243:81">(<argument pos:start="243:20" pos:end="243:20"><expr pos:start="243:20" pos:end="243:20"><name pos:start="243:20" pos:end="243:20">s</name></expr></argument>, <argument pos:start="243:23" pos:end="243:36"><expr pos:start="243:23" pos:end="243:36"><name pos:start="243:23" pos:end="243:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="243:39" pos:end="243:69"><expr pos:start="243:39" pos:end="243:69"><literal type="string" pos:start="243:39" pos:end="243:69">"Skipping %s ID3v2 frame %s.\n"</literal></expr></argument>, <argument pos:start="243:72" pos:end="243:75"><expr pos:start="243:72" pos:end="243:75"><name pos:start="243:72" pos:end="243:75">type</name></expr></argument>, <argument pos:start="243:78" pos:end="243:80"><expr pos:start="243:78" pos:end="243:80"><name pos:start="243:78" pos:end="243:80">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:32"><expr pos:start="245:13" pos:end="245:31"><call pos:start="245:13" pos:end="245:31"><name pos:start="245:13" pos:end="245:21">avio_skip</name><argument_list pos:start="245:22" pos:end="245:31">(<argument pos:start="245:23" pos:end="245:24"><expr pos:start="245:23" pos:end="245:24"><name pos:start="245:23" pos:end="245:24">pb</name></expr></argument>, <argument pos:start="245:27" pos:end="245:30"><expr pos:start="245:27" pos:end="245:30"><name pos:start="245:27" pos:end="245:30">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="247:9" pos:end="247:62">/* check for text tag or supported special meta tag */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="387:9">else if <condition pos:start="249:19" pos:end="253:68">(<expr pos:start="249:20" pos:end="253:67"><name pos:start="249:20" pos:end="249:25"><name pos:start="249:20" pos:end="249:22">tag</name><index pos:start="249:23" pos:end="249:25">[<expr pos:start="249:24" pos:end="249:24"><literal type="number" pos:start="249:24" pos:end="249:24">0</literal></expr>]</index></name> <operator pos:start="249:27" pos:end="249:28">==</operator> <literal type="char" pos:start="249:30" pos:end="249:32">'T'</literal> <operator pos:start="249:34" pos:end="249:35">||</operator>

                   <operator pos:start="251:20" pos:end="251:20">(</operator><name pos:start="251:21" pos:end="251:30">extra_meta</name> <operator pos:start="251:32" pos:end="251:33">&amp;&amp;</operator>

                    <operator pos:start="253:21" pos:end="253:21">(</operator><name pos:start="253:22" pos:end="253:31">extra_func</name> <operator pos:start="253:33" pos:end="253:33">=</operator> <call pos:start="253:35" pos:end="253:65"><name pos:start="253:35" pos:end="253:53">get_extra_meta_func</name><argument_list pos:start="253:54" pos:end="253:65">(<argument pos:start="253:55" pos:end="253:57"><expr pos:start="253:55" pos:end="253:57"><name pos:start="253:55" pos:end="253:57">tag</name></expr></argument>, <argument pos:start="253:60" pos:end="253:64"><expr pos:start="253:60" pos:end="253:64"><name pos:start="253:60" pos:end="253:64">isv34</name></expr></argument>)</argument_list></call><operator pos:start="253:66" pos:end="253:66">)</operator><operator pos:start="253:67" pos:end="253:67">)</operator></expr>)</condition> <block pos:start="253:70" pos:end="387:9">{<block_content pos:start="255:13" pos:end="385:71">

            <expr_stmt pos:start="255:13" pos:end="255:21"><expr pos:start="255:13" pos:end="255:20"><name pos:start="255:13" pos:end="255:15">pbx</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <name pos:start="255:19" pos:end="255:20">pb</name></expr>;</expr_stmt>



            <if_stmt pos:start="259:13" pos:end="271:13"><if pos:start="259:13" pos:end="271:13">if <condition pos:start="259:16" pos:end="259:43">(<expr pos:start="259:17" pos:end="259:42"><name pos:start="259:17" pos:end="259:22">unsync</name> <operator pos:start="259:24" pos:end="259:25">||</operator> <name pos:start="259:27" pos:end="259:33">tunsync</name> <operator pos:start="259:35" pos:end="259:36">||</operator> <name pos:start="259:38" pos:end="259:42">tcomp</name></expr>)</condition> <block pos:start="259:45" pos:end="271:13">{<block_content pos:start="261:17" pos:end="269:17">

                <expr_stmt pos:start="261:17" pos:end="261:60"><expr pos:start="261:17" pos:end="261:59"><call pos:start="261:17" pos:end="261:59"><name pos:start="261:17" pos:end="261:30">av_fast_malloc</name><argument_list pos:start="261:31" pos:end="261:59">(<argument pos:start="261:32" pos:end="261:38"><expr pos:start="261:32" pos:end="261:38"><operator pos:start="261:32" pos:end="261:32">&amp;</operator><name pos:start="261:33" pos:end="261:38">buffer</name></expr></argument>, <argument pos:start="261:41" pos:end="261:52"><expr pos:start="261:41" pos:end="261:52"><operator pos:start="261:41" pos:end="261:41">&amp;</operator><name pos:start="261:42" pos:end="261:52">buffer_size</name></expr></argument>, <argument pos:start="261:55" pos:end="261:58"><expr pos:start="261:55" pos:end="261:58"><name pos:start="261:55" pos:end="261:58">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="263:17" pos:end="269:17"><if pos:start="263:17" pos:end="269:17">if <condition pos:start="263:20" pos:end="263:28">(<expr pos:start="263:21" pos:end="263:27"><operator pos:start="263:21" pos:end="263:21">!</operator><name pos:start="263:22" pos:end="263:27">buffer</name></expr>)</condition> <block pos:start="263:30" pos:end="269:17">{<block_content pos:start="265:21" pos:end="267:30">

                    <expr_stmt pos:start="265:21" pos:end="265:80"><expr pos:start="265:21" pos:end="265:79"><call pos:start="265:21" pos:end="265:79"><name pos:start="265:21" pos:end="265:26">av_log</name><argument_list pos:start="265:27" pos:end="265:79">(<argument pos:start="265:28" pos:end="265:28"><expr pos:start="265:28" pos:end="265:28"><name pos:start="265:28" pos:end="265:28">s</name></expr></argument>, <argument pos:start="265:31" pos:end="265:42"><expr pos:start="265:31" pos:end="265:42"><name pos:start="265:31" pos:end="265:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="265:45" pos:end="265:72"><expr pos:start="265:45" pos:end="265:72"><literal type="string" pos:start="265:45" pos:end="265:72">"Failed to alloc %d bytes\n"</literal></expr></argument>, <argument pos:start="265:75" pos:end="265:78"><expr pos:start="265:75" pos:end="265:78"><name pos:start="265:75" pos:end="265:78">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="267:21" pos:end="267:30">goto <name pos:start="267:26" pos:end="267:29">seek</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="273:13" pos:end="314:0"><if pos:start="273:13" pos:end="314:0">if <condition pos:start="273:16" pos:end="273:34">(<expr pos:start="273:17" pos:end="273:33"><name pos:start="273:17" pos:end="273:22">unsync</name> <operator pos:start="273:24" pos:end="273:25">||</operator> <name pos:start="273:27" pos:end="273:33">tunsync</name></expr>)</condition> <block pos:start="273:36" pos:end="314:0">{<block_content pos:start="275:17" pos:end="307:33">

                <decl_stmt pos:start="275:17" pos:end="275:51"><decl pos:start="275:17" pos:end="275:50"><type pos:start="275:17" pos:end="275:23"><name pos:start="275:17" pos:end="275:23">int64_t</name></type> <name pos:start="275:25" pos:end="275:27">end</name> <init pos:start="275:29" pos:end="275:50">= <expr pos:start="275:31" pos:end="275:50"><call pos:start="275:31" pos:end="275:43"><name pos:start="275:31" pos:end="275:39">avio_tell</name><argument_list pos:start="275:40" pos:end="275:43">(<argument pos:start="275:41" pos:end="275:42"><expr pos:start="275:41" pos:end="275:42"><name pos:start="275:41" pos:end="275:42">pb</name></expr></argument>)</argument_list></call> <operator pos:start="275:45" pos:end="275:45">+</operator> <name pos:start="275:47" pos:end="275:50">tlen</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="277:17" pos:end="277:27"><decl pos:start="277:17" pos:end="277:26"><type pos:start="277:17" pos:end="277:25"><name pos:start="277:17" pos:end="277:23">uint8_t</name> <modifier pos:start="277:25" pos:end="277:25">*</modifier></type><name pos:start="277:26" pos:end="277:26">b</name></decl>;</decl_stmt>



                <expr_stmt pos:start="281:17" pos:end="281:27"><expr pos:start="281:17" pos:end="281:26"><name pos:start="281:17" pos:end="281:17">b</name> <operator pos:start="281:19" pos:end="281:19">=</operator> <name pos:start="281:21" pos:end="281:26">buffer</name></expr>;</expr_stmt>

                <while pos:start="283:17" pos:end="299:17">while <condition pos:start="283:23" pos:end="283:84">(<expr pos:start="283:24" pos:end="283:83"><call pos:start="283:24" pos:end="283:36"><name pos:start="283:24" pos:end="283:32">avio_tell</name><argument_list pos:start="283:33" pos:end="283:36">(<argument pos:start="283:34" pos:end="283:35"><expr pos:start="283:34" pos:end="283:35"><name pos:start="283:34" pos:end="283:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="283:38" pos:end="283:38">&lt;</operator> <name pos:start="283:40" pos:end="283:42">end</name> <operator pos:start="283:44" pos:end="283:45">&amp;&amp;</operator> <name pos:start="283:47" pos:end="283:47">b</name> <operator pos:start="283:49" pos:end="283:49">-</operator> <name pos:start="283:51" pos:end="283:56">buffer</name> <operator pos:start="283:58" pos:end="283:58">&lt;</operator> <name pos:start="283:60" pos:end="283:63">tlen</name> <operator pos:start="283:65" pos:end="283:66">&amp;&amp;</operator> <operator pos:start="283:68" pos:end="283:68">!</operator><name pos:start="283:69" pos:end="283:83"><name pos:start="283:69" pos:end="283:70">pb</name><operator pos:start="283:71" pos:end="283:72">-&gt;</operator><name pos:start="283:73" pos:end="283:83">eof_reached</name></name></expr>)</condition> <block pos:start="283:86" pos:end="299:17">{<block_content pos:start="285:21" pos:end="297:21">

                    <expr_stmt pos:start="285:21" pos:end="285:39"><expr pos:start="285:21" pos:end="285:38"><operator pos:start="285:21" pos:end="285:21">*</operator><name pos:start="285:22" pos:end="285:22">b</name><operator pos:start="285:23" pos:end="285:24">++</operator> <operator pos:start="285:26" pos:end="285:26">=</operator> <call pos:start="285:28" pos:end="285:38"><name pos:start="285:28" pos:end="285:34">avio_r8</name><argument_list pos:start="285:35" pos:end="285:38">(<argument pos:start="285:36" pos:end="285:37"><expr pos:start="285:36" pos:end="285:37"><name pos:start="285:36" pos:end="285:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="287:21" pos:end="297:21"><if pos:start="287:21" pos:end="297:21">if <condition pos:start="287:24" pos:end="291:42">(<expr pos:start="287:25" pos:end="291:40"><operator pos:start="287:25" pos:end="287:25">*</operator><operator pos:start="287:26" pos:end="287:26">(</operator><name pos:start="287:27" pos:end="287:27">b</name> <operator pos:start="287:29" pos:end="287:29">-</operator> <literal type="number" pos:start="287:31" pos:end="287:31">1</literal><operator pos:start="287:32" pos:end="287:32">)</operator> <operator pos:start="287:34" pos:end="287:35">==</operator> <literal type="number" pos:start="287:37" pos:end="287:40">0xff</literal> <operator pos:start="287:42" pos:end="287:43">&amp;&amp;</operator> <call pos:start="287:45" pos:end="287:57"><name pos:start="287:45" pos:end="287:53">avio_tell</name><argument_list pos:start="287:54" pos:end="287:57">(<argument pos:start="287:55" pos:end="287:56"><expr pos:start="287:55" pos:end="287:56"><name pos:start="287:55" pos:end="287:56">pb</name></expr></argument>)</argument_list></call> <operator pos:start="287:59" pos:end="287:59">&lt;</operator> <name pos:start="287:61" pos:end="287:63">end</name> <operator pos:start="287:65" pos:end="287:65">-</operator> <literal type="number" pos:start="287:67" pos:end="287:67">1</literal> <operator pos:start="287:69" pos:end="287:70">&amp;&amp;</operator>

                        <name pos:start="289:25" pos:end="289:25">b</name> <operator pos:start="289:27" pos:end="289:27">-</operator> <name pos:start="289:29" pos:end="289:34">buffer</name> <operator pos:start="289:36" pos:end="289:36">&lt;</operator> <name pos:start="289:38" pos:end="289:41">tlen</name> <operator pos:start="289:43" pos:end="289:44">&amp;&amp;</operator>

                        <operator pos:start="291:25" pos:end="291:25">!</operator><name pos:start="291:26" pos:end="291:40"><name pos:start="291:26" pos:end="291:27">pb</name><operator pos:start="291:28" pos:end="291:29">-&gt;</operator><name pos:start="291:30" pos:end="291:40">eof_reached</name></name></expr> )</condition> <block pos:start="291:44" pos:end="297:21">{<block_content pos:start="293:25" pos:end="295:55">

                        <decl_stmt pos:start="293:25" pos:end="293:50"><decl pos:start="293:25" pos:end="293:49"><type pos:start="293:25" pos:end="293:31"><name pos:start="293:25" pos:end="293:31">uint8_t</name></type> <name pos:start="293:33" pos:end="293:35">val</name> <init pos:start="293:37" pos:end="293:49">= <expr pos:start="293:39" pos:end="293:49"><call pos:start="293:39" pos:end="293:49"><name pos:start="293:39" pos:end="293:45">avio_r8</name><argument_list pos:start="293:46" pos:end="293:49">(<argument pos:start="293:47" pos:end="293:48"><expr pos:start="293:47" pos:end="293:48"><name pos:start="293:47" pos:end="293:48">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="295:25" pos:end="295:55"><expr pos:start="295:25" pos:end="295:54"><operator pos:start="295:25" pos:end="295:25">*</operator><name pos:start="295:26" pos:end="295:26">b</name><operator pos:start="295:27" pos:end="295:28">++</operator> <operator pos:start="295:30" pos:end="295:30">=</operator> <ternary pos:start="295:32" pos:end="295:54"><condition pos:start="295:32" pos:end="295:36"><expr pos:start="295:32" pos:end="295:34"><name pos:start="295:32" pos:end="295:34">val</name></expr> ?</condition><then pos:start="295:38" pos:end="295:40"> <expr pos:start="295:38" pos:end="295:40"><name pos:start="295:38" pos:end="295:40">val</name></expr> </then><else pos:start="295:42" pos:end="295:54">: <expr pos:start="295:44" pos:end="295:54"><call pos:start="295:44" pos:end="295:54"><name pos:start="295:44" pos:end="295:50">avio_r8</name><argument_list pos:start="295:51" pos:end="295:54">(<argument pos:start="295:52" pos:end="295:53"><expr pos:start="295:52" pos:end="295:53"><name pos:start="295:52" pos:end="295:53">pb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="301:17" pos:end="303:40"><expr pos:start="301:17" pos:end="303:39"><call pos:start="301:17" pos:end="303:39"><name pos:start="301:17" pos:end="301:33">ffio_init_context</name><argument_list pos:start="301:34" pos:end="303:39">(<argument pos:start="301:35" pos:end="301:43"><expr pos:start="301:35" pos:end="301:43"><operator pos:start="301:35" pos:end="301:35">&amp;</operator><name pos:start="301:36" pos:end="301:43">pb_local</name></expr></argument>, <argument pos:start="301:46" pos:end="301:51"><expr pos:start="301:46" pos:end="301:51"><name pos:start="301:46" pos:end="301:51">buffer</name></expr></argument>, <argument pos:start="301:54" pos:end="301:63"><expr pos:start="301:54" pos:end="301:63"><name pos:start="301:54" pos:end="301:54">b</name> <operator pos:start="301:56" pos:end="301:56">-</operator> <name pos:start="301:58" pos:end="301:63">buffer</name></expr></argument>, <argument pos:start="301:66" pos:end="301:66"><expr pos:start="301:66" pos:end="301:66"><literal type="number" pos:start="301:66" pos:end="301:66">0</literal></expr></argument>, <argument pos:start="301:69" pos:end="301:72"><expr pos:start="301:69" pos:end="301:72"><name pos:start="301:69" pos:end="301:72">NULL</name></expr></argument>, <argument pos:start="301:75" pos:end="301:78"><expr pos:start="301:75" pos:end="301:78"><name pos:start="301:75" pos:end="301:78">NULL</name></expr></argument>, <argument pos:start="301:81" pos:end="301:84"><expr pos:start="301:81" pos:end="301:84"><name pos:start="301:81" pos:end="301:84">NULL</name></expr></argument>,

                                  <argument pos:start="303:35" pos:end="303:38"><expr pos:start="303:35" pos:end="303:38"><name pos:start="303:35" pos:end="303:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="305:34"><expr pos:start="305:17" pos:end="305:33"><name pos:start="305:17" pos:end="305:20">tlen</name> <operator pos:start="305:22" pos:end="305:22">=</operator> <name pos:start="305:24" pos:end="305:24">b</name> <operator pos:start="305:26" pos:end="305:26">-</operator> <name pos:start="305:28" pos:end="305:33">buffer</name></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:33"><expr pos:start="307:17" pos:end="307:32"><name pos:start="307:17" pos:end="307:19">pbx</name>  <operator pos:start="307:22" pos:end="307:22">=</operator> <operator pos:start="307:24" pos:end="307:24">&amp;</operator><name pos:start="307:25" pos:end="307:32">pb_local</name></expr>;</expr_stmt> <comment type="line" pos:start="307:35" pos:end="307:58">// read from sync buffer</comment>

            </block_content>}</block></if></if_stmt>



<cpp:if pos:start="313:1" pos:end="313:15">#<cpp:directive pos:start="313:2" pos:end="313:3">if</cpp:directive> <expr pos:start="313:5" pos:end="313:15"><name pos:start="313:5" pos:end="313:15">CONFIG_ZLIB</name></expr></cpp:if>

                <if_stmt pos:start="315:17" pos:end="374:0"><if pos:start="315:17" pos:end="374:0">if <condition pos:start="315:20" pos:end="315:26">(<expr pos:start="315:21" pos:end="315:25"><name pos:start="315:21" pos:end="315:25">tcomp</name></expr>)</condition> <block pos:start="315:28" pos:end="374:0">{<block_content pos:start="317:21" pos:end="369:36">

                    <decl_stmt pos:start="317:21" pos:end="317:28"><decl pos:start="317:21" pos:end="317:27"><type pos:start="317:21" pos:end="317:23"><name pos:start="317:21" pos:end="317:23">int</name></type> <name pos:start="317:25" pos:end="317:27">err</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="321:21" pos:end="321:104"><expr pos:start="321:21" pos:end="321:103"><call pos:start="321:21" pos:end="321:103"><name pos:start="321:21" pos:end="321:26">av_log</name><argument_list pos:start="321:27" pos:end="321:103">(<argument pos:start="321:28" pos:end="321:28"><expr pos:start="321:28" pos:end="321:28"><name pos:start="321:28" pos:end="321:28">s</name></expr></argument>, <argument pos:start="321:31" pos:end="321:42"><expr pos:start="321:31" pos:end="321:42"><name pos:start="321:31" pos:end="321:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="321:45" pos:end="321:85"><expr pos:start="321:45" pos:end="321:85"><literal type="string" pos:start="321:45" pos:end="321:85">"Compresssed frame %s tlen=%d dlen=%ld\n"</literal></expr></argument>, <argument pos:start="321:88" pos:end="321:90"><expr pos:start="321:88" pos:end="321:90"><name pos:start="321:88" pos:end="321:90">tag</name></expr></argument>, <argument pos:start="321:93" pos:end="321:96"><expr pos:start="321:93" pos:end="321:96"><name pos:start="321:93" pos:end="321:96">tlen</name></expr></argument>, <argument pos:start="321:99" pos:end="321:102"><expr pos:start="321:99" pos:end="321:102"><name pos:start="321:99" pos:end="321:102">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="325:21" pos:end="325:90"><expr pos:start="325:21" pos:end="325:89"><call pos:start="325:21" pos:end="325:89"><name pos:start="325:21" pos:end="325:34">av_fast_malloc</name><argument_list pos:start="325:35" pos:end="325:89">(<argument pos:start="325:36" pos:end="325:55"><expr pos:start="325:36" pos:end="325:55"><operator pos:start="325:36" pos:end="325:36">&amp;</operator><name pos:start="325:37" pos:end="325:55">uncompressed_buffer</name></expr></argument>, <argument pos:start="325:58" pos:end="325:82"><expr pos:start="325:58" pos:end="325:82"><operator pos:start="325:58" pos:end="325:58">&amp;</operator><name pos:start="325:59" pos:end="325:82">uncompressed_buffer_size</name></expr></argument>, <argument pos:start="325:85" pos:end="325:88"><expr pos:start="325:85" pos:end="325:88"><name pos:start="325:85" pos:end="325:88">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="327:21" pos:end="333:21"><if pos:start="327:21" pos:end="333:21">if <condition pos:start="327:24" pos:end="327:45">(<expr pos:start="327:25" pos:end="327:44"><operator pos:start="327:25" pos:end="327:25">!</operator><name pos:start="327:26" pos:end="327:44">uncompressed_buffer</name></expr>)</condition> <block pos:start="327:47" pos:end="333:21">{<block_content pos:start="329:25" pos:end="331:34">

                        <expr_stmt pos:start="329:25" pos:end="329:85"><expr pos:start="329:25" pos:end="329:84"><call pos:start="329:25" pos:end="329:84"><name pos:start="329:25" pos:end="329:30">av_log</name><argument_list pos:start="329:31" pos:end="329:84">(<argument pos:start="329:32" pos:end="329:32"><expr pos:start="329:32" pos:end="329:32"><name pos:start="329:32" pos:end="329:32">s</name></expr></argument>, <argument pos:start="329:35" pos:end="329:46"><expr pos:start="329:35" pos:end="329:46"><name pos:start="329:35" pos:end="329:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="329:49" pos:end="329:77"><expr pos:start="329:49" pos:end="329:77"><literal type="string" pos:start="329:49" pos:end="329:77">"Failed to alloc %ld bytes\n"</literal></expr></argument>, <argument pos:start="329:80" pos:end="329:83"><expr pos:start="329:80" pos:end="329:83"><name pos:start="329:80" pos:end="329:83">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="331:25" pos:end="331:34">goto <name pos:start="331:30" pos:end="331:33">seek</name>;</goto>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="337:21" pos:end="351:21"><if pos:start="337:21" pos:end="351:21">if <condition pos:start="337:24" pos:end="337:45">(<expr pos:start="337:25" pos:end="337:44"><operator pos:start="337:25" pos:end="337:25">!</operator><operator pos:start="337:26" pos:end="337:26">(</operator><name pos:start="337:27" pos:end="337:32">unsync</name> <operator pos:start="337:34" pos:end="337:35">||</operator> <name pos:start="337:37" pos:end="337:43">tunsync</name><operator pos:start="337:44" pos:end="337:44">)</operator></expr>)</condition> <block pos:start="337:47" pos:end="351:21">{<block_content pos:start="339:25" pos:end="349:35">

                        <expr_stmt pos:start="339:25" pos:end="339:58"><expr pos:start="339:25" pos:end="339:57"><name pos:start="339:25" pos:end="339:27">err</name> <operator pos:start="339:29" pos:end="339:29">=</operator> <call pos:start="339:31" pos:end="339:57"><name pos:start="339:31" pos:end="339:39">avio_read</name><argument_list pos:start="339:40" pos:end="339:57">(<argument pos:start="339:41" pos:end="339:42"><expr pos:start="339:41" pos:end="339:42"><name pos:start="339:41" pos:end="339:42">pb</name></expr></argument>, <argument pos:start="339:45" pos:end="339:50"><expr pos:start="339:45" pos:end="339:50"><name pos:start="339:45" pos:end="339:50">buffer</name></expr></argument>, <argument pos:start="339:53" pos:end="339:56"><expr pos:start="339:53" pos:end="339:56"><name pos:start="339:53" pos:end="339:56">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="341:25" pos:end="347:25"><if pos:start="341:25" pos:end="347:25">if <condition pos:start="341:28" pos:end="341:36">(<expr pos:start="341:29" pos:end="341:35"><name pos:start="341:29" pos:end="341:31">err</name> <operator pos:start="341:33" pos:end="341:33">&lt;</operator> <literal type="number" pos:start="341:35" pos:end="341:35">0</literal></expr>)</condition> <block pos:start="341:38" pos:end="347:25">{<block_content pos:start="343:29" pos:end="345:38">

                            <expr_stmt pos:start="343:29" pos:end="343:87"><expr pos:start="343:29" pos:end="343:86"><call pos:start="343:29" pos:end="343:86"><name pos:start="343:29" pos:end="343:34">av_log</name><argument_list pos:start="343:35" pos:end="343:86">(<argument pos:start="343:36" pos:end="343:36"><expr pos:start="343:36" pos:end="343:36"><name pos:start="343:36" pos:end="343:36">s</name></expr></argument>, <argument pos:start="343:39" pos:end="343:50"><expr pos:start="343:39" pos:end="343:50"><name pos:start="343:39" pos:end="343:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="343:53" pos:end="343:85"><expr pos:start="343:53" pos:end="343:85"><literal type="string" pos:start="343:53" pos:end="343:85">"Failed to read compressed tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="345:29" pos:end="345:38">goto <name pos:start="345:34" pos:end="345:37">seek</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="349:25" pos:end="349:35"><expr pos:start="349:25" pos:end="349:34"><name pos:start="349:25" pos:end="349:28">tlen</name> <operator pos:start="349:30" pos:end="349:30">=</operator> <name pos:start="349:32" pos:end="349:34">err</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="355:21" pos:end="355:79"><expr pos:start="355:21" pos:end="355:78"><name pos:start="355:21" pos:end="355:23">err</name> <operator pos:start="355:25" pos:end="355:25">=</operator> <call pos:start="355:27" pos:end="355:78"><name pos:start="355:27" pos:end="355:36">uncompress</name><argument_list pos:start="355:37" pos:end="355:78">(<argument pos:start="355:38" pos:end="355:56"><expr pos:start="355:38" pos:end="355:56"><name pos:start="355:38" pos:end="355:56">uncompressed_buffer</name></expr></argument>, <argument pos:start="355:59" pos:end="355:63"><expr pos:start="355:59" pos:end="355:63"><operator pos:start="355:59" pos:end="355:59">&amp;</operator><name pos:start="355:60" pos:end="355:63">dlen</name></expr></argument>, <argument pos:start="355:66" pos:end="355:71"><expr pos:start="355:66" pos:end="355:71"><name pos:start="355:66" pos:end="355:71">buffer</name></expr></argument>, <argument pos:start="355:74" pos:end="355:77"><expr pos:start="355:74" pos:end="355:77"><name pos:start="355:74" pos:end="355:77">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="357:21" pos:end="363:21"><if pos:start="357:21" pos:end="363:21">if <condition pos:start="357:24" pos:end="357:36">(<expr pos:start="357:25" pos:end="357:35"><name pos:start="357:25" pos:end="357:27">err</name> <operator pos:start="357:29" pos:end="357:30">!=</operator> <name pos:start="357:32" pos:end="357:35">Z_OK</name></expr>)</condition> <block pos:start="357:38" pos:end="363:21">{<block_content pos:start="359:25" pos:end="361:34">

                        <expr_stmt pos:start="359:25" pos:end="359:87"><expr pos:start="359:25" pos:end="359:86"><call pos:start="359:25" pos:end="359:86"><name pos:start="359:25" pos:end="359:30">av_log</name><argument_list pos:start="359:31" pos:end="359:86">(<argument pos:start="359:32" pos:end="359:32"><expr pos:start="359:32" pos:end="359:32"><name pos:start="359:32" pos:end="359:32">s</name></expr></argument>, <argument pos:start="359:35" pos:end="359:46"><expr pos:start="359:35" pos:end="359:46"><name pos:start="359:35" pos:end="359:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:49" pos:end="359:80"><expr pos:start="359:49" pos:end="359:80"><literal type="string" pos:start="359:49" pos:end="359:80">"Failed to uncompress tag: %d\n"</literal></expr></argument>, <argument pos:start="359:83" pos:end="359:85"><expr pos:start="359:83" pos:end="359:85"><name pos:start="359:83" pos:end="359:85">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="361:25" pos:end="361:34">goto <name pos:start="361:30" pos:end="361:33">seek</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="365:21" pos:end="365:103"><expr pos:start="365:21" pos:end="365:102"><call pos:start="365:21" pos:end="365:102"><name pos:start="365:21" pos:end="365:37">ffio_init_context</name><argument_list pos:start="365:38" pos:end="365:102">(<argument pos:start="365:39" pos:end="365:47"><expr pos:start="365:39" pos:end="365:47"><operator pos:start="365:39" pos:end="365:39">&amp;</operator><name pos:start="365:40" pos:end="365:47">pb_local</name></expr></argument>, <argument pos:start="365:50" pos:end="365:68"><expr pos:start="365:50" pos:end="365:68"><name pos:start="365:50" pos:end="365:68">uncompressed_buffer</name></expr></argument>, <argument pos:start="365:71" pos:end="365:74"><expr pos:start="365:71" pos:end="365:74"><name pos:start="365:71" pos:end="365:74">dlen</name></expr></argument>, <argument pos:start="365:77" pos:end="365:77"><expr pos:start="365:77" pos:end="365:77"><literal type="number" pos:start="365:77" pos:end="365:77">0</literal></expr></argument>, <argument pos:start="365:80" pos:end="365:83"><expr pos:start="365:80" pos:end="365:83"><name pos:start="365:80" pos:end="365:83">NULL</name></expr></argument>, <argument pos:start="365:86" pos:end="365:89"><expr pos:start="365:86" pos:end="365:89"><name pos:start="365:86" pos:end="365:89">NULL</name></expr></argument>, <argument pos:start="365:92" pos:end="365:95"><expr pos:start="365:92" pos:end="365:95"><name pos:start="365:92" pos:end="365:95">NULL</name></expr></argument>, <argument pos:start="365:98" pos:end="365:101"><expr pos:start="365:98" pos:end="365:101"><name pos:start="365:98" pos:end="365:101">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="367:21" pos:end="367:32"><expr pos:start="367:21" pos:end="367:31"><name pos:start="367:21" pos:end="367:24">tlen</name> <operator pos:start="367:26" pos:end="367:26">=</operator> <name pos:start="367:28" pos:end="367:31">dlen</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="369:36"><expr pos:start="369:21" pos:end="369:35"><name pos:start="369:21" pos:end="369:23">pbx</name> <operator pos:start="369:25" pos:end="369:25">=</operator> <operator pos:start="369:27" pos:end="369:27">&amp;</operator><name pos:start="369:28" pos:end="369:35">pb_local</name></expr>;</expr_stmt> <comment type="line" pos:start="369:38" pos:end="369:61">// read from sync buffer</comment>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="375:13" pos:end="385:71"><if pos:start="375:13" pos:end="379:55">if <condition pos:start="375:16" pos:end="375:30">(<expr pos:start="375:17" pos:end="375:29"><name pos:start="375:17" pos:end="375:22"><name pos:start="375:17" pos:end="375:19">tag</name><index pos:start="375:20" pos:end="375:22">[<expr pos:start="375:21" pos:end="375:21"><literal type="number" pos:start="375:21" pos:end="375:21">0</literal></expr>]</index></name> <operator pos:start="375:24" pos:end="375:25">==</operator> <literal type="char" pos:start="375:27" pos:end="375:29">'T'</literal></expr>)</condition><block type="pseudo" pos:start="379:17" pos:end="379:55"><block_content pos:start="379:17" pos:end="379:55">

                <comment type="block" pos:start="377:17" pos:end="377:36">/* parse text tag */</comment>

                <expr_stmt pos:start="379:17" pos:end="379:55"><expr pos:start="379:17" pos:end="379:54"><call pos:start="379:17" pos:end="379:54"><name pos:start="379:17" pos:end="379:25">read_ttag</name><argument_list pos:start="379:26" pos:end="379:54">(<argument pos:start="379:27" pos:end="379:27"><expr pos:start="379:27" pos:end="379:27"><name pos:start="379:27" pos:end="379:27">s</name></expr></argument>, <argument pos:start="379:30" pos:end="379:32"><expr pos:start="379:30" pos:end="379:32"><name pos:start="379:30" pos:end="379:32">pbx</name></expr></argument>, <argument pos:start="379:35" pos:end="379:38"><expr pos:start="379:35" pos:end="379:38"><name pos:start="379:35" pos:end="379:38">tlen</name></expr></argument>, <argument pos:start="379:41" pos:end="379:48"><expr pos:start="379:41" pos:end="379:48"><name pos:start="379:41" pos:end="379:48">metadata</name></expr></argument>, <argument pos:start="379:51" pos:end="379:53"><expr pos:start="379:51" pos:end="379:53"><name pos:start="379:51" pos:end="379:53">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="381:13" pos:end="385:71">else<block type="pseudo" pos:start="385:17" pos:end="385:71"><block_content pos:start="385:17" pos:end="385:71">

                <comment type="block" pos:start="383:17" pos:end="383:44">/* parse special meta tag */</comment>

                <expr_stmt pos:start="385:17" pos:end="385:71"><expr pos:start="385:17" pos:end="385:70"><call pos:start="385:17" pos:end="385:70"><name pos:start="385:17" pos:end="385:32"><name pos:start="385:17" pos:end="385:26">extra_func</name><operator pos:start="385:27" pos:end="385:28">-&gt;</operator><name pos:start="385:29" pos:end="385:32">read</name></name><argument_list pos:start="385:33" pos:end="385:70">(<argument pos:start="385:34" pos:end="385:34"><expr pos:start="385:34" pos:end="385:34"><name pos:start="385:34" pos:end="385:34">s</name></expr></argument>, <argument pos:start="385:37" pos:end="385:39"><expr pos:start="385:37" pos:end="385:39"><name pos:start="385:37" pos:end="385:39">pbx</name></expr></argument>, <argument pos:start="385:42" pos:end="385:45"><expr pos:start="385:42" pos:end="385:45"><name pos:start="385:42" pos:end="385:45">tlen</name></expr></argument>, <argument pos:start="385:48" pos:end="385:50"><expr pos:start="385:48" pos:end="385:50"><name pos:start="385:48" pos:end="385:50">tag</name></expr></argument>, <argument pos:start="385:53" pos:end="385:62"><expr pos:start="385:53" pos:end="385:62"><name pos:start="385:53" pos:end="385:62">extra_meta</name></expr></argument>, <argument pos:start="385:65" pos:end="385:69"><expr pos:start="385:65" pos:end="385:69"><name pos:start="385:65" pos:end="385:69">isv34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="387:11" pos:end="397:9">else if <condition pos:start="387:19" pos:end="387:27">(<expr pos:start="387:20" pos:end="387:26"><operator pos:start="387:20" pos:end="387:20">!</operator><name pos:start="387:21" pos:end="387:26"><name pos:start="387:21" pos:end="387:23">tag</name><index pos:start="387:24" pos:end="387:26">[<expr pos:start="387:25" pos:end="387:25"><literal type="number" pos:start="387:25" pos:end="387:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="387:29" pos:end="397:9">{<block_content pos:start="389:13" pos:end="395:18">

            <if_stmt pos:start="389:13" pos:end="391:82"><if pos:start="389:13" pos:end="391:82">if <condition pos:start="389:16" pos:end="389:23">(<expr pos:start="389:17" pos:end="389:22"><name pos:start="389:17" pos:end="389:22"><name pos:start="389:17" pos:end="389:19">tag</name><index pos:start="389:20" pos:end="389:22">[<expr pos:start="389:21" pos:end="389:21"><literal type="number" pos:start="389:21" pos:end="389:21">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="391:17" pos:end="391:82"><block_content pos:start="391:17" pos:end="391:82">

                <expr_stmt pos:start="391:17" pos:end="391:82"><expr pos:start="391:17" pos:end="391:81"><call pos:start="391:17" pos:end="391:81"><name pos:start="391:17" pos:end="391:22">av_log</name><argument_list pos:start="391:23" pos:end="391:81">(<argument pos:start="391:24" pos:end="391:24"><expr pos:start="391:24" pos:end="391:24"><name pos:start="391:24" pos:end="391:24">s</name></expr></argument>, <argument pos:start="391:27" pos:end="391:40"><expr pos:start="391:27" pos:end="391:40"><name pos:start="391:27" pos:end="391:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="391:43" pos:end="391:80"><expr pos:start="391:43" pos:end="391:80"><literal type="string" pos:start="391:43" pos:end="391:80">"invalid frame id, assuming padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:32"><expr pos:start="393:13" pos:end="393:31"><call pos:start="393:13" pos:end="393:31"><name pos:start="393:13" pos:end="393:21">avio_skip</name><argument_list pos:start="393:22" pos:end="393:31">(<argument pos:start="393:23" pos:end="393:24"><expr pos:start="393:23" pos:end="393:24"><name pos:start="393:23" pos:end="393:24">pb</name></expr></argument>, <argument pos:start="393:27" pos:end="393:30"><expr pos:start="393:27" pos:end="393:30"><name pos:start="393:27" pos:end="393:30">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="395:13" pos:end="395:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="399:9" pos:end="399:32">/* Skip to end of tag */</comment>

<label pos:start="401:1" pos:end="401:5"><name pos:start="401:1" pos:end="401:4">seek</name>:</label>

        <expr_stmt pos:start="403:9" pos:end="403:38"><expr pos:start="403:9" pos:end="403:37"><call pos:start="403:9" pos:end="403:37"><name pos:start="403:9" pos:end="403:17">avio_seek</name><argument_list pos:start="403:18" pos:end="403:37">(<argument pos:start="403:19" pos:end="403:20"><expr pos:start="403:19" pos:end="403:20"><name pos:start="403:19" pos:end="403:20">pb</name></expr></argument>, <argument pos:start="403:23" pos:end="403:26"><expr pos:start="403:23" pos:end="403:26"><name pos:start="403:23" pos:end="403:26">next</name></expr></argument>, <argument pos:start="403:29" pos:end="403:36"><expr pos:start="403:29" pos:end="403:36"><name pos:start="403:29" pos:end="403:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="409:5" pos:end="409:54">/* Footer preset, always 10 bytes, skip over it */</comment>

    <if_stmt pos:start="411:5" pos:end="413:18"><if pos:start="411:5" pos:end="413:18">if <condition pos:start="411:8" pos:end="411:37">(<expr pos:start="411:9" pos:end="411:36"><name pos:start="411:9" pos:end="411:15">version</name> <operator pos:start="411:17" pos:end="411:18">==</operator> <literal type="number" pos:start="411:20" pos:end="411:20">4</literal> <operator pos:start="411:22" pos:end="411:23">&amp;&amp;</operator> <name pos:start="411:25" pos:end="411:29">flags</name> <operator pos:start="411:31" pos:end="411:31">&amp;</operator> <literal type="number" pos:start="411:33" pos:end="411:36">0x10</literal></expr>)</condition><block type="pseudo" pos:start="413:9" pos:end="413:18"><block_content pos:start="413:9" pos:end="413:18">

        <expr_stmt pos:start="413:9" pos:end="413:18"><expr pos:start="413:9" pos:end="413:17"><name pos:start="413:9" pos:end="413:11">end</name> <operator pos:start="413:13" pos:end="413:14">+=</operator> <literal type="number" pos:start="413:16" pos:end="413:17">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="417:1" pos:end="417:6"><name pos:start="417:1" pos:end="417:5">error</name>:</label>

    <if_stmt pos:start="419:5" pos:end="423:32"><if pos:start="419:5" pos:end="423:32">if <condition pos:start="419:8" pos:end="419:15">(<expr pos:start="419:9" pos:end="419:14"><name pos:start="419:9" pos:end="419:14">reason</name></expr>)</condition><block type="pseudo" pos:start="421:9" pos:end="423:32"><block_content pos:start="421:9" pos:end="423:32">

        <expr_stmt pos:start="421:9" pos:end="423:32"><expr pos:start="421:9" pos:end="423:31"><call pos:start="421:9" pos:end="423:31"><name pos:start="421:9" pos:end="421:14">av_log</name><argument_list pos:start="421:15" pos:end="423:31">(<argument pos:start="421:16" pos:end="421:16"><expr pos:start="421:16" pos:end="421:16"><name pos:start="421:16" pos:end="421:16">s</name></expr></argument>, <argument pos:start="421:19" pos:end="421:29"><expr pos:start="421:19" pos:end="421:29"><name pos:start="421:19" pos:end="421:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="421:32" pos:end="421:73"><expr pos:start="421:32" pos:end="421:73"><literal type="string" pos:start="421:32" pos:end="421:73">"ID3v2.%d tag skipped, cannot handle %s\n"</literal></expr></argument>,

               <argument pos:start="423:16" pos:end="423:22"><expr pos:start="423:16" pos:end="423:22"><name pos:start="423:16" pos:end="423:22">version</name></expr></argument>, <argument pos:start="423:25" pos:end="423:30"><expr pos:start="423:25" pos:end="423:30"><name pos:start="423:25" pos:end="423:30">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:33"><expr pos:start="425:5" pos:end="425:32"><call pos:start="425:5" pos:end="425:32"><name pos:start="425:5" pos:end="425:13">avio_seek</name><argument_list pos:start="425:14" pos:end="425:32">(<argument pos:start="425:15" pos:end="425:16"><expr pos:start="425:15" pos:end="425:16"><name pos:start="425:15" pos:end="425:16">pb</name></expr></argument>, <argument pos:start="425:19" pos:end="425:21"><expr pos:start="425:19" pos:end="425:21"><name pos:start="425:19" pos:end="425:21">end</name></expr></argument>, <argument pos:start="425:24" pos:end="425:31"><expr pos:start="425:24" pos:end="425:31"><name pos:start="425:24" pos:end="425:31">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:20"><expr pos:start="427:5" pos:end="427:19"><call pos:start="427:5" pos:end="427:19"><name pos:start="427:5" pos:end="427:11">av_free</name><argument_list pos:start="427:12" pos:end="427:19">(<argument pos:start="427:13" pos:end="427:18"><expr pos:start="427:13" pos:end="427:18"><name pos:start="427:13" pos:end="427:18">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:33"><expr pos:start="429:5" pos:end="429:32"><call pos:start="429:5" pos:end="429:32"><name pos:start="429:5" pos:end="429:11">av_free</name><argument_list pos:start="429:12" pos:end="429:32">(<argument pos:start="429:13" pos:end="429:31"><expr pos:start="429:13" pos:end="429:31"><name pos:start="429:13" pos:end="429:31">uncompressed_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="431:5" pos:end="431:11">return;</return>

</block_content>}</block></function>
</unit>
