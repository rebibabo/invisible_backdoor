<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20930.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">abi_long</name></type> <name pos:start="1:24" pos:end="1:46">target_to_host_sockaddr</name><parameter_list pos:start="1:47" pos:end="5:61">(<parameter pos:start="1:48" pos:end="1:53"><decl pos:start="1:48" pos:end="1:53"><type pos:start="1:48" pos:end="1:53"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:53">fd</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:76"><decl pos:start="1:56" pos:end="1:76"><type pos:start="1:56" pos:end="1:76"><name pos:start="1:56" pos:end="1:70"><name pos:start="1:56" pos:end="1:61">struct</name> <name pos:start="1:63" pos:end="1:70">sockaddr</name></name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">addr</name></decl></parameter>,

                                               <parameter pos:start="3:48" pos:end="3:68"><decl pos:start="3:48" pos:end="3:68"><type pos:start="3:48" pos:end="3:68"><name pos:start="3:48" pos:end="3:56">abi_ulong</name></type> <name pos:start="3:58" pos:end="3:68">target_addr</name></decl></parameter>,

                                               <parameter pos:start="5:48" pos:end="5:60"><decl pos:start="5:48" pos:end="5:60"><type pos:start="5:48" pos:end="5:60"><name pos:start="5:48" pos:end="5:56">socklen_t</name></type> <name pos:start="5:58" pos:end="5:60">len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="99:1">{<block_content pos:start="9:5" pos:end="97:13">

    <decl_stmt pos:start="9:5" pos:end="9:62"><decl pos:start="9:5" pos:end="9:61"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:19">socklen_t</name></type> <name pos:start="9:21" pos:end="9:31">unix_maxlen</name> <init pos:start="9:33" pos:end="9:61">= <expr pos:start="9:35" pos:end="9:61"><sizeof pos:start="9:35" pos:end="9:61">sizeof <argument_list pos:start="9:42" pos:end="9:61">(<argument pos:start="9:43" pos:end="9:60"><expr pos:start="9:43" pos:end="9:60">struct <name pos:start="9:50" pos:end="9:60">sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">sa_family_t</name></type> <name pos:start="11:17" pos:end="11:25">sa_family</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:26">target_sockaddr</name></name> <modifier pos:start="13:28" pos:end="13:28">*</modifier></type><name pos:start="13:29" pos:end="13:40">target_saddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:41">(<expr pos:start="17:9" pos:end="17:40"><call pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:36">fd_trans_target_to_host_addr</name><argument_list pos:start="17:37" pos:end="17:40">(<argument pos:start="17:38" pos:end="17:39"><expr pos:start="17:38" pos:end="17:39"><name pos:start="17:38" pos:end="17:39">fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:43" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:72">

        <return pos:start="19:9" pos:end="19:72">return <expr pos:start="19:16" pos:end="19:71"><call pos:start="19:16" pos:end="19:71"><call pos:start="19:16" pos:end="19:47"><name pos:start="19:16" pos:end="19:43">fd_trans_target_to_host_addr</name><argument_list pos:start="19:44" pos:end="19:47">(<argument pos:start="19:45" pos:end="19:46"><expr pos:start="19:45" pos:end="19:46"><name pos:start="19:45" pos:end="19:46">fd</name></expr></argument>)</argument_list></call><argument_list pos:start="19:48" pos:end="19:71">(<argument pos:start="19:49" pos:end="19:52"><expr pos:start="19:49" pos:end="19:52"><name pos:start="19:49" pos:end="19:52">addr</name></expr></argument>, <argument pos:start="19:55" pos:end="19:65"><expr pos:start="19:55" pos:end="19:65"><name pos:start="19:55" pos:end="19:65">target_addr</name></expr></argument>, <argument pos:start="19:68" pos:end="19:70"><expr pos:start="19:68" pos:end="19:70"><name pos:start="19:68" pos:end="19:70">len</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:63"><expr pos:start="25:5" pos:end="25:62"><name pos:start="25:5" pos:end="25:16">target_saddr</name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:62"><name pos:start="25:20" pos:end="25:28">lock_user</name><argument_list pos:start="25:29" pos:end="25:62">(<argument pos:start="25:30" pos:end="25:40"><expr pos:start="25:30" pos:end="25:40"><name pos:start="25:30" pos:end="25:40">VERIFY_READ</name></expr></argument>, <argument pos:start="25:43" pos:end="25:53"><expr pos:start="25:43" pos:end="25:53"><name pos:start="25:43" pos:end="25:53">target_addr</name></expr></argument>, <argument pos:start="25:56" pos:end="25:58"><expr pos:start="25:56" pos:end="25:58"><name pos:start="25:56" pos:end="25:58">len</name></expr></argument>, <argument pos:start="25:61" pos:end="25:61"><expr pos:start="25:61" pos:end="25:61"><literal type="number" pos:start="25:61" pos:end="25:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:30"><if pos:start="27:5" pos:end="29:30">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:21">target_saddr</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:30"><block_content pos:start="29:9" pos:end="29:30">

        <return pos:start="29:9" pos:end="29:30">return <expr pos:start="29:16" pos:end="29:29"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:29">TARGET_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:49"><expr pos:start="33:5" pos:end="33:48"><name pos:start="33:5" pos:end="33:13">sa_family</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:48"><name pos:start="33:17" pos:end="33:23">tswap16</name><argument_list pos:start="33:24" pos:end="33:48">(<argument pos:start="33:25" pos:end="33:47"><expr pos:start="33:25" pos:end="33:47"><name pos:start="33:25" pos:end="33:47"><name pos:start="33:25" pos:end="33:36">target_saddr</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:47">sa_family</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="49:7">/* Oops. The caller might send a incomplete sun_path; sun_path

     * must be terminated by \0 (see the manual page), but

     * unfortunately it is quite common to specify sockaddr_un

     * length as "strlen(x-&gt;sun_path)" while it should be

     * "strlen(...) + 1". We'll fix that here if needed.

     * Linux kernel has a similar feature.

     */</comment>



    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="71:5">if <condition pos:start="53:8" pos:end="53:29">(<expr pos:start="53:9" pos:end="53:28"><name pos:start="53:9" pos:end="53:17">sa_family</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:28">AF_UNIX</name></expr>)</condition> <block pos:start="53:31" pos:end="71:5">{<block_content pos:start="55:9" pos:end="69:30">

        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="65:9">if <condition pos:start="55:12" pos:end="55:41">(<expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:15">len</name> <argument_list type="generic" pos:start="55:17" pos:end="55:38">&lt; <argument pos:start="55:19" pos:end="55:36"><expr pos:start="55:19" pos:end="55:36"><name pos:start="55:19" pos:end="55:29">unix_maxlen</name> <operator pos:start="55:31" pos:end="55:32">&amp;&amp;</operator> <name pos:start="55:34" pos:end="55:36">len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="55:40" pos:end="55:40">0</literal></expr>)</condition> <block pos:start="55:43" pos:end="65:9">{<block_content pos:start="57:13" pos:end="63:22">

            <decl_stmt pos:start="57:13" pos:end="57:43"><decl pos:start="57:13" pos:end="57:42"><type pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:16">char</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:20">cp</name> <init pos:start="57:22" pos:end="57:42">= <expr pos:start="57:24" pos:end="57:42"><operator pos:start="57:24" pos:end="57:24">(</operator><name pos:start="57:25" pos:end="57:28">char</name><operator pos:start="57:29" pos:end="57:29">*</operator><operator pos:start="57:30" pos:end="57:30">)</operator><name pos:start="57:31" pos:end="57:42">target_saddr</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="61:13" pos:end="63:22"><if pos:start="61:13" pos:end="63:22">if <condition pos:start="61:16" pos:end="61:40">( <expr pos:start="61:18" pos:end="61:38"><name pos:start="61:18" pos:end="61:26"><name pos:start="61:18" pos:end="61:19">cp</name><index pos:start="61:20" pos:end="61:26">[<expr pos:start="61:21" pos:end="61:25"><name pos:start="61:21" pos:end="61:23">len</name><operator pos:start="61:24" pos:end="61:24">-</operator><literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr>]</index></name> <operator pos:start="61:28" pos:end="61:29">&amp;&amp;</operator> <operator pos:start="61:31" pos:end="61:31">!</operator><name pos:start="61:32" pos:end="61:38"><name pos:start="61:32" pos:end="61:33">cp</name><index pos:start="61:34" pos:end="61:38">[<expr pos:start="61:35" pos:end="61:37"><name pos:start="61:35" pos:end="61:37">len</name></expr>]</index></name></expr> )</condition><block type="pseudo" pos:start="63:17" pos:end="63:22"><block_content pos:start="63:17" pos:end="63:22">

                <expr_stmt pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:21"><name pos:start="63:17" pos:end="63:19">len</name><operator pos:start="63:20" pos:end="63:21">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:30"><if pos:start="67:9" pos:end="69:30">if <condition pos:start="67:12" pos:end="67:30">(<expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:15">len</name> <operator pos:start="67:17" pos:end="67:17">&gt;</operator> <name pos:start="67:19" pos:end="67:29">unix_maxlen</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:30"><block_content pos:start="69:13" pos:end="69:30">

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:15">len</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:29">unix_maxlen</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:36"><expr pos:start="75:5" pos:end="75:35"><call pos:start="75:5" pos:end="75:35"><name pos:start="75:5" pos:end="75:10">memcpy</name><argument_list pos:start="75:11" pos:end="75:35">(<argument pos:start="75:12" pos:end="75:15"><expr pos:start="75:12" pos:end="75:15"><name pos:start="75:12" pos:end="75:15">addr</name></expr></argument>, <argument pos:start="75:18" pos:end="75:29"><expr pos:start="75:18" pos:end="75:29"><name pos:start="75:18" pos:end="75:29">target_saddr</name></expr></argument>, <argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:32"><expr pos:start="77:5" pos:end="77:31"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:8">addr</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:19">sa_family</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:31">sa_family</name></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="91:5"><if pos:start="79:5" pos:end="91:5">if <condition pos:start="79:8" pos:end="79:31">(<expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:17">sa_family</name> <operator pos:start="79:19" pos:end="79:20">==</operator> <name pos:start="79:22" pos:end="79:30">AF_PACKET</name></expr>)</condition> <block pos:start="79:33" pos:end="91:5">{<block_content pos:start="81:9" pos:end="89:57">

	<decl_stmt pos:start="81:9" pos:end="81:42"><decl pos:start="81:9" pos:end="81:41"><type pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:14">struct</name> <name pos:start="81:16" pos:end="81:33">target_sockaddr_ll</name></name> <modifier pos:start="81:35" pos:end="81:35">*</modifier></type><name pos:start="81:36" pos:end="81:41">lladdr</name></decl>;</decl_stmt>



	<expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:14">lladdr</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <operator pos:start="85:18" pos:end="85:18">(</operator>struct <name pos:start="85:26" pos:end="85:43">target_sockaddr_ll</name> <operator pos:start="85:45" pos:end="85:45">*</operator><operator pos:start="85:46" pos:end="85:46">)</operator><name pos:start="85:47" pos:end="85:50">addr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:59"><expr pos:start="87:9" pos:end="87:58"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:14">lladdr</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:27">sll_ifindex</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <call pos:start="87:31" pos:end="87:58"><name pos:start="87:31" pos:end="87:37">tswap32</name><argument_list pos:start="87:38" pos:end="87:58">(<argument pos:start="87:39" pos:end="87:57"><expr pos:start="87:39" pos:end="87:57"><name pos:start="87:39" pos:end="87:57"><name pos:start="87:39" pos:end="87:44">lladdr</name><operator pos:start="87:45" pos:end="87:46">-&gt;</operator><name pos:start="87:47" pos:end="87:57">sll_ifindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="89:9" pos:end="89:57"><expr pos:start="89:9" pos:end="89:56"><name pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:14">lladdr</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:26">sll_hatype</name></name> <operator pos:start="89:28" pos:end="89:28">=</operator> <call pos:start="89:30" pos:end="89:56"><name pos:start="89:30" pos:end="89:36">tswap16</name><argument_list pos:start="89:37" pos:end="89:56">(<argument pos:start="89:38" pos:end="89:55"><expr pos:start="89:38" pos:end="89:55"><name pos:start="89:38" pos:end="89:55"><name pos:start="89:38" pos:end="89:43">lladdr</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:55">sll_hatype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><call pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:15">unlock_user</name><argument_list pos:start="93:16" pos:end="93:45">(<argument pos:start="93:17" pos:end="93:28"><expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:28">target_saddr</name></expr></argument>, <argument pos:start="93:31" pos:end="93:41"><expr pos:start="93:31" pos:end="93:41"><name pos:start="93:31" pos:end="93:41">target_addr</name></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
