<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23342.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:33">ls_decode_line</name><parameter_list pos:start="1:34" pos:end="3:65">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:42">JLSState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">state</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><name pos:start="1:52" pos:end="1:69">MJpegDecodeContext</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:72">s</name></decl></parameter>,
                                  <parameter pos:start="2:35" pos:end="2:44"><decl pos:start="2:35" pos:end="2:44"><type pos:start="2:35" pos:end="2:44"><name pos:start="2:35" pos:end="2:38">void</name> <modifier pos:start="2:40" pos:end="2:40">*</modifier></type><name pos:start="2:41" pos:end="2:44">last</name></decl></parameter>, <parameter pos:start="2:47" pos:end="2:55"><decl pos:start="2:47" pos:end="2:55"><type pos:start="2:47" pos:end="2:55"><name pos:start="2:47" pos:end="2:50">void</name> <modifier pos:start="2:52" pos:end="2:52">*</modifier></type><name pos:start="2:53" pos:end="2:55">dst</name></decl></parameter>, <parameter pos:start="2:58" pos:end="2:66"><decl pos:start="2:58" pos:end="2:66"><type pos:start="2:58" pos:end="2:66"><name pos:start="2:58" pos:end="2:60">int</name></type> <name pos:start="2:62" pos:end="2:66">last2</name></decl></parameter>, <parameter pos:start="2:69" pos:end="2:73"><decl pos:start="2:69" pos:end="2:73"><type pos:start="2:69" pos:end="2:73"><name pos:start="2:69" pos:end="2:71">int</name></type> <name pos:start="2:73" pos:end="2:73">w</name></decl></parameter>,
                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:44">stride</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:54"><decl pos:start="3:47" pos:end="3:54"><type pos:start="3:47" pos:end="3:54"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:54">comp</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:64"><decl pos:start="3:57" pos:end="3:64"><type pos:start="3:57" pos:end="3:64"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:64">bits</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="102:5">
    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">x</name> <init pos:start="5:14" pos:end="5:16">= <expr pos:start="5:16" pos:end="5:16"><literal type="number" pos:start="5:16" pos:end="5:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:23"><decl pos:start="6:5" pos:end="6:10"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:10">Ra</name></decl>, <decl pos:start="6:13" pos:end="6:14"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:13" pos:end="6:14">Rb</name></decl>, <decl pos:start="6:17" pos:end="6:18"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:17" pos:end="6:18">Rc</name></decl>, <decl pos:start="6:21" pos:end="6:22"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:21" pos:end="6:22">Rd</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">D0</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">D1</name></decl>, <decl pos:start="7:17" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:18">D2</name></decl>;</decl_stmt>
    <while pos:start="8:5" pos:end="102:5">while <condition pos:start="8:11" pos:end="8:17">(<expr pos:start="8:12" pos:end="8:16"><name pos:start="8:12" pos:end="8:12">x</name> <operator pos:start="8:14" pos:end="8:14">&lt;</operator> <name pos:start="8:16" pos:end="8:16">w</name></expr>)</condition> <block pos:start="8:19" pos:end="102:5">{<block_content pos:start="9:9" pos:end="101:20">
        <decl_stmt pos:start="9:9" pos:end="9:22"><decl pos:start="9:9" pos:end="9:15"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:15">err</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:18" pos:end="9:21">pred</name></decl>;</decl_stmt>
        <comment type="block" pos:start="10:9" pos:end="10:31">/* compute gradients */</comment>
        <expr_stmt pos:start="11:9" pos:end="11:49"><expr pos:start="11:9" pos:end="11:48"><name pos:start="11:9" pos:end="11:10">Ra</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <ternary pos:start="11:14" pos:end="11:48"><condition pos:start="11:14" pos:end="11:16"><expr pos:start="11:14" pos:end="11:14"><name pos:start="11:14" pos:end="11:14">x</name></expr> ?</condition><then pos:start="11:18" pos:end="11:35"> <expr pos:start="11:18" pos:end="11:35"><call pos:start="11:18" pos:end="11:35"><name pos:start="11:18" pos:end="11:18">R</name><argument_list pos:start="11:19" pos:end="11:35">(<argument pos:start="11:20" pos:end="11:22"><expr pos:start="11:20" pos:end="11:22"><name pos:start="11:20" pos:end="11:22">dst</name></expr></argument>, <argument pos:start="11:25" pos:end="11:34"><expr pos:start="11:25" pos:end="11:34"><name pos:start="11:25" pos:end="11:25">x</name> <operator pos:start="11:27" pos:end="11:27">-</operator> <name pos:start="11:29" pos:end="11:34">stride</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="11:37" pos:end="11:48">: <expr pos:start="11:39" pos:end="11:48"><call pos:start="11:39" pos:end="11:48"><name pos:start="11:39" pos:end="11:39">R</name><argument_list pos:start="11:40" pos:end="11:48">(<argument pos:start="11:41" pos:end="11:44"><expr pos:start="11:41" pos:end="11:44"><name pos:start="11:41" pos:end="11:44">last</name></expr></argument>, <argument pos:start="11:47" pos:end="11:47"><expr pos:start="11:47" pos:end="11:47"><name pos:start="11:47" pos:end="11:47">x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="12:9" pos:end="12:24"><expr pos:start="12:9" pos:end="12:23"><name pos:start="12:9" pos:end="12:10">Rb</name> <operator pos:start="12:12" pos:end="12:12">=</operator> <call pos:start="12:14" pos:end="12:23"><name pos:start="12:14" pos:end="12:14">R</name><argument_list pos:start="12:15" pos:end="12:23">(<argument pos:start="12:16" pos:end="12:19"><expr pos:start="12:16" pos:end="12:19"><name pos:start="12:16" pos:end="12:19">last</name></expr></argument>, <argument pos:start="12:22" pos:end="12:22"><expr pos:start="12:22" pos:end="12:22"><name pos:start="12:22" pos:end="12:22">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:45"><expr pos:start="13:9" pos:end="13:44"><name pos:start="13:9" pos:end="13:10">Rc</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <ternary pos:start="13:14" pos:end="13:44"><condition pos:start="13:14" pos:end="13:16"><expr pos:start="13:14" pos:end="13:14"><name pos:start="13:14" pos:end="13:14">x</name></expr> ?</condition><then pos:start="13:18" pos:end="13:36"> <expr pos:start="13:18" pos:end="13:36"><call pos:start="13:18" pos:end="13:36"><name pos:start="13:18" pos:end="13:18">R</name><argument_list pos:start="13:19" pos:end="13:36">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">last</name></expr></argument>, <argument pos:start="13:26" pos:end="13:35"><expr pos:start="13:26" pos:end="13:35"><name pos:start="13:26" pos:end="13:26">x</name> <operator pos:start="13:28" pos:end="13:28">-</operator> <name pos:start="13:30" pos:end="13:35">stride</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="13:38" pos:end="13:44">: <expr pos:start="13:40" pos:end="13:44"><name pos:start="13:40" pos:end="13:44">last2</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:66"><expr pos:start="14:9" pos:end="14:65"><name pos:start="14:9" pos:end="14:10">Rd</name> <operator pos:start="14:12" pos:end="14:12">=</operator> <ternary pos:start="14:14" pos:end="14:65"><condition pos:start="14:14" pos:end="14:32"><expr pos:start="14:14" pos:end="14:30"><operator pos:start="14:14" pos:end="14:14">(</operator><name pos:start="14:15" pos:end="14:15">x</name> <operator pos:start="14:17" pos:end="14:18">&gt;=</operator> <name pos:start="14:20" pos:end="14:20">w</name> <operator pos:start="14:22" pos:end="14:22">-</operator> <name pos:start="14:24" pos:end="14:29">stride</name><operator pos:start="14:30" pos:end="14:30">)</operator></expr> ?</condition><then pos:start="14:34" pos:end="14:43"> <expr pos:start="14:34" pos:end="14:43"><call pos:start="14:34" pos:end="14:43"><name pos:start="14:34" pos:end="14:34">R</name><argument_list pos:start="14:35" pos:end="14:43">(<argument pos:start="14:36" pos:end="14:39"><expr pos:start="14:36" pos:end="14:39"><name pos:start="14:36" pos:end="14:39">last</name></expr></argument>, <argument pos:start="14:42" pos:end="14:42"><expr pos:start="14:42" pos:end="14:42"><name pos:start="14:42" pos:end="14:42">x</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="14:45" pos:end="14:65">: <expr pos:start="14:47" pos:end="14:65"><call pos:start="14:47" pos:end="14:65"><name pos:start="14:47" pos:end="14:47">R</name><argument_list pos:start="14:48" pos:end="14:65">(<argument pos:start="14:49" pos:end="14:52"><expr pos:start="14:49" pos:end="14:52"><name pos:start="14:49" pos:end="14:52">last</name></expr></argument>, <argument pos:start="14:55" pos:end="14:64"><expr pos:start="14:55" pos:end="14:64"><name pos:start="14:55" pos:end="14:55">x</name> <operator pos:start="14:57" pos:end="14:57">+</operator> <name pos:start="14:59" pos:end="14:64">stride</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:21"><expr pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:10">D0</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:15">Rd</name> <operator pos:start="15:17" pos:end="15:17">-</operator> <name pos:start="15:19" pos:end="15:20">Rb</name></expr>;</expr_stmt>
        <expr_stmt pos:start="16:9" pos:end="16:21"><expr pos:start="16:9" pos:end="16:20"><name pos:start="16:9" pos:end="16:10">D1</name> <operator pos:start="16:12" pos:end="16:12">=</operator> <name pos:start="16:14" pos:end="16:15">Rb</name> <operator pos:start="16:17" pos:end="16:17">-</operator> <name pos:start="16:19" pos:end="16:20">Rc</name></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="17:21"><expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:10">D2</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:15">Rc</name> <operator pos:start="17:17" pos:end="17:17">-</operator> <name pos:start="17:19" pos:end="17:20">Ra</name></expr>;</expr_stmt>
        <comment type="block" pos:start="18:9" pos:end="18:22">/* run mode */</comment>
        <if_stmt pos:start="19:9" pos:end="91:9"><if pos:start="19:9" pos:end="70:9">if <condition pos:start="19:12" pos:end="21:39">(<expr pos:start="19:13" pos:end="21:38"><operator pos:start="19:13" pos:end="19:13">(</operator><call pos:start="19:14" pos:end="19:22"><name pos:start="19:14" pos:end="19:18">FFABS</name><argument_list pos:start="19:19" pos:end="19:22">(<argument pos:start="19:20" pos:end="19:21"><expr pos:start="19:20" pos:end="19:21"><name pos:start="19:20" pos:end="19:21">D0</name></expr></argument>)</argument_list></call> <operator pos:start="19:24" pos:end="19:25">&lt;=</operator> <name pos:start="19:27" pos:end="19:37"><name pos:start="19:27" pos:end="19:31">state</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:37">near</name></name><operator pos:start="19:38" pos:end="19:38">)</operator> <operator pos:start="19:40" pos:end="19:41">&amp;&amp;</operator>
            <operator pos:start="20:13" pos:end="20:13">(</operator><call pos:start="20:14" pos:end="20:22"><name pos:start="20:14" pos:end="20:18">FFABS</name><argument_list pos:start="20:19" pos:end="20:22">(<argument pos:start="20:20" pos:end="20:21"><expr pos:start="20:20" pos:end="20:21"><name pos:start="20:20" pos:end="20:21">D1</name></expr></argument>)</argument_list></call> <operator pos:start="20:24" pos:end="20:25">&lt;=</operator> <name pos:start="20:27" pos:end="20:37"><name pos:start="20:27" pos:end="20:31">state</name><operator pos:start="20:32" pos:end="20:33">-&gt;</operator><name pos:start="20:34" pos:end="20:37">near</name></name><operator pos:start="20:38" pos:end="20:38">)</operator> <operator pos:start="20:40" pos:end="20:41">&amp;&amp;</operator>
            <operator pos:start="21:13" pos:end="21:13">(</operator><call pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:18">FFABS</name><argument_list pos:start="21:19" pos:end="21:22">(<argument pos:start="21:20" pos:end="21:21"><expr pos:start="21:20" pos:end="21:21"><name pos:start="21:20" pos:end="21:21">D2</name></expr></argument>)</argument_list></call> <operator pos:start="21:24" pos:end="21:25">&lt;=</operator> <name pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:31">state</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:37">near</name></name><operator pos:start="21:38" pos:end="21:38">)</operator></expr>)</condition> <block pos:start="21:41" pos:end="70:9">{<block_content pos:start="22:13" pos:end="69:13">
            <decl_stmt pos:start="22:13" pos:end="22:18"><decl pos:start="22:13" pos:end="22:17"><type pos:start="22:13" pos:end="22:15"><name pos:start="22:13" pos:end="22:15">int</name></type> <name pos:start="22:17" pos:end="22:17">r</name></decl>;</decl_stmt>
            <decl_stmt pos:start="23:13" pos:end="23:23"><decl pos:start="23:13" pos:end="23:22"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:22">RItype</name></decl>;</decl_stmt>
            <comment type="block" pos:start="24:13" pos:end="24:50">/* decode full runs while available */</comment>
            <while pos:start="25:13" pos:end="39:13">while <condition pos:start="25:19" pos:end="25:37">(<expr pos:start="25:20" pos:end="25:36"><call pos:start="25:20" pos:end="25:36"><name pos:start="25:20" pos:end="25:28">get_bits1</name><argument_list pos:start="25:29" pos:end="25:36">(<argument pos:start="25:30" pos:end="25:35"><expr pos:start="25:30" pos:end="25:35"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:35">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:39" pos:end="39:13">{<block_content pos:start="26:17" pos:end="38:35">
                <decl_stmt pos:start="26:17" pos:end="26:22"><decl pos:start="26:17" pos:end="26:21"><type pos:start="26:17" pos:end="26:19"><name pos:start="26:17" pos:end="26:19">int</name></type> <name pos:start="26:21" pos:end="26:21">r</name></decl>;</decl_stmt>
                <expr_stmt pos:start="27:17" pos:end="27:61"><expr pos:start="27:17" pos:end="27:60"><name pos:start="27:17" pos:end="27:17">r</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="number" pos:start="27:21" pos:end="27:21">1</literal> <operator pos:start="27:23" pos:end="27:24">&lt;&lt;</operator> <name pos:start="27:26" pos:end="27:60"><name pos:start="27:26" pos:end="27:36">ff_log2_run</name><index pos:start="27:37" pos:end="27:60">[<expr pos:start="27:38" pos:end="27:59"><name pos:start="27:38" pos:end="27:59"><name pos:start="27:38" pos:end="27:42">state</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:53">run_index</name><index pos:start="27:54" pos:end="27:59">[<expr pos:start="27:55" pos:end="27:58"><name pos:start="27:55" pos:end="27:58">comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <if_stmt pos:start="28:17" pos:end="29:41"><if pos:start="28:17" pos:end="29:41">if <condition pos:start="28:20" pos:end="28:39">(<expr pos:start="28:21" pos:end="28:38"><name pos:start="28:21" pos:end="28:21">x</name> <operator pos:start="28:23" pos:end="28:23">+</operator> <name pos:start="28:25" pos:end="28:25">r</name> <operator pos:start="28:27" pos:end="28:27">*</operator> <name pos:start="28:29" pos:end="28:34">stride</name> <operator pos:start="28:36" pos:end="28:36">&gt;</operator> <name pos:start="28:38" pos:end="28:38">w</name></expr>)</condition><block type="pseudo" pos:start="29:21" pos:end="29:41"><block_content pos:start="29:21" pos:end="29:41">
                    <expr_stmt pos:start="29:21" pos:end="29:41"><expr pos:start="29:21" pos:end="29:40"><name pos:start="29:21" pos:end="29:21">r</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <operator pos:start="29:25" pos:end="29:25">(</operator><name pos:start="29:26" pos:end="29:26">w</name> <operator pos:start="29:28" pos:end="29:28">-</operator> <name pos:start="29:30" pos:end="29:30">x</name><operator pos:start="29:31" pos:end="29:31">)</operator> <operator pos:start="29:33" pos:end="29:33">/</operator> <name pos:start="29:35" pos:end="29:40">stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <for pos:start="30:17" pos:end="33:17">for <control pos:start="30:21" pos:end="30:39">(<init pos:start="30:22" pos:end="30:27"><expr pos:start="30:22" pos:end="30:26"><name pos:start="30:22" pos:end="30:22">i</name> <operator pos:start="30:24" pos:end="30:24">=</operator> <literal type="number" pos:start="30:26" pos:end="30:26">0</literal></expr>;</init> <condition pos:start="30:29" pos:end="30:34"><expr pos:start="30:29" pos:end="30:33"><name pos:start="30:29" pos:end="30:29">i</name> <operator pos:start="30:31" pos:end="30:31">&lt;</operator> <name pos:start="30:33" pos:end="30:33">r</name></expr>;</condition> <incr pos:start="30:36" pos:end="30:38"><expr pos:start="30:36" pos:end="30:38"><name pos:start="30:36" pos:end="30:36">i</name><operator pos:start="30:37" pos:end="30:38">++</operator></expr></incr>)</control> <block pos:start="30:41" pos:end="33:17">{<block_content pos:start="31:21" pos:end="32:32">
                    <expr_stmt pos:start="31:21" pos:end="31:34"><expr pos:start="31:21" pos:end="31:33"><call pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:21">W</name><argument_list pos:start="31:22" pos:end="31:33">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">dst</name></expr></argument>, <argument pos:start="31:28" pos:end="31:28"><expr pos:start="31:28" pos:end="31:28"><name pos:start="31:28" pos:end="31:28">x</name></expr></argument>, <argument pos:start="31:31" pos:end="31:32"><expr pos:start="31:31" pos:end="31:32"><name pos:start="31:31" pos:end="31:32">Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="32:21" pos:end="32:32"><expr pos:start="32:21" pos:end="32:31"><name pos:start="32:21" pos:end="32:21">x</name> <operator pos:start="32:23" pos:end="32:24">+=</operator> <name pos:start="32:26" pos:end="32:31">stride</name></expr>;</expr_stmt>
                </block_content>}</block></for>
                <comment type="block" pos:start="34:17" pos:end="34:54">/* if EOL reached, we stop decoding */</comment>
                <if_stmt pos:start="35:17" pos:end="37:45"><if pos:start="35:17" pos:end="37:45">if <condition pos:start="35:20" pos:end="35:66">(<expr pos:start="35:21" pos:end="35:65"><name pos:start="35:21" pos:end="35:21">r</name> <operator pos:start="35:23" pos:end="35:24">!=</operator> <literal type="number" pos:start="35:26" pos:end="35:26">1</literal> <operator pos:start="35:28" pos:end="35:29">&lt;&lt;</operator> <name pos:start="35:31" pos:end="35:65"><name pos:start="35:31" pos:end="35:41">ff_log2_run</name><index pos:start="35:42" pos:end="35:65">[<expr pos:start="35:43" pos:end="35:64"><name pos:start="35:43" pos:end="35:64"><name pos:start="35:43" pos:end="35:47">state</name><operator pos:start="35:48" pos:end="35:49">-&gt;</operator><name pos:start="35:50" pos:end="35:58">run_index</name><index pos:start="35:59" pos:end="35:64">[<expr pos:start="35:60" pos:end="35:63"><name pos:start="35:60" pos:end="35:63">comp</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="36:17" pos:end="37:45"><block_content pos:start="36:17" pos:end="37:45">
                <if_stmt pos:start="36:17" pos:end="37:45"><if pos:start="36:17" pos:end="37:45">if <condition pos:start="36:20" pos:end="36:48">(<expr pos:start="36:21" pos:end="36:47"><name pos:start="36:21" pos:end="36:42"><name pos:start="36:21" pos:end="36:25">state</name><operator pos:start="36:26" pos:end="36:27">-&gt;</operator><name pos:start="36:28" pos:end="36:36">run_index</name><index pos:start="36:37" pos:end="36:42">[<expr pos:start="36:38" pos:end="36:41"><name pos:start="36:38" pos:end="36:41">comp</name></expr>]</index></name> <operator pos:start="36:44" pos:end="36:44">&lt;</operator> <literal type="number" pos:start="36:46" pos:end="36:47">31</literal></expr>)</condition><block type="pseudo" pos:start="37:21" pos:end="37:45"><block_content pos:start="37:21" pos:end="37:45">
                    <expr_stmt pos:start="37:21" pos:end="37:45"><expr pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:42"><name pos:start="37:21" pos:end="37:25">state</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:36">run_index</name><index pos:start="37:37" pos:end="37:42">[<expr pos:start="37:38" pos:end="37:41"><name pos:start="37:38" pos:end="37:41">comp</name></expr>]</index></name><operator pos:start="37:43" pos:end="37:44">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="38:17" pos:end="38:35"><if pos:start="38:17" pos:end="38:35">if <condition pos:start="38:20" pos:end="38:35">(<expr pos:start="38:21" pos:end="38:34"><name pos:start="38:21" pos:end="38:21">x</name> <operator pos:start="38:23" pos:end="38:23">+</operator> <name pos:start="38:25" pos:end="38:30">stride</name> <operator pos:start="38:32" pos:end="38:32">&gt;</operator> <name pos:start="38:34" pos:end="38:34">w</name></expr>)</condition><block type="pseudo"><block_content/></block></if></if_stmt>
            </block_content>}</block></while>
            <comment type="block" pos:start="40:13" pos:end="40:36">/* decode aborted run */</comment>
            <expr_stmt pos:start="41:13" pos:end="41:52"><expr pos:start="41:13" pos:end="41:51"><name pos:start="41:13" pos:end="41:13">r</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:51"><name pos:start="41:17" pos:end="41:27">ff_log2_run</name><index pos:start="41:28" pos:end="41:51">[<expr pos:start="41:29" pos:end="41:50"><name pos:start="41:29" pos:end="41:50"><name pos:start="41:29" pos:end="41:33">state</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:44">run_index</name><index pos:start="41:45" pos:end="41:50">[<expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="42:13" pos:end="43:45"><if pos:start="42:13" pos:end="43:45">if <condition pos:start="42:16" pos:end="42:18">(<expr pos:start="42:17" pos:end="42:17"><name pos:start="42:17" pos:end="42:17">r</name></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:45"><block_content pos:start="43:17" pos:end="43:45">
                <expr_stmt pos:start="43:17" pos:end="43:45"><expr pos:start="43:17" pos:end="43:44"><name pos:start="43:17" pos:end="43:17">r</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <call pos:start="43:21" pos:end="43:44"><name pos:start="43:21" pos:end="43:33">get_bits_long</name><argument_list pos:start="43:34" pos:end="43:44">(<argument pos:start="43:35" pos:end="43:40"><expr pos:start="43:35" pos:end="43:40"><operator pos:start="43:35" pos:end="43:35">&amp;</operator><name pos:start="43:36" pos:end="43:40"><name pos:start="43:36" pos:end="43:36">s</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:40">gb</name></name></expr></argument>, <argument pos:start="43:43" pos:end="43:43"><expr pos:start="43:43" pos:end="43:43"><name pos:start="43:43" pos:end="43:43">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="44:13" pos:end="46:13"><if pos:start="44:13" pos:end="46:13">if <condition pos:start="44:16" pos:end="44:35">(<expr pos:start="44:17" pos:end="44:34"><name pos:start="44:17" pos:end="44:17">x</name> <operator pos:start="44:19" pos:end="44:19">+</operator> <name pos:start="44:21" pos:end="44:21">r</name> <operator pos:start="44:23" pos:end="44:23">*</operator> <name pos:start="44:25" pos:end="44:30">stride</name> <operator pos:start="44:32" pos:end="44:32">&gt;</operator> <name pos:start="44:34" pos:end="44:34">w</name></expr>)</condition> <block pos:start="44:37" pos:end="46:13">{<block_content pos:start="45:17" pos:end="45:37">
                <expr_stmt pos:start="45:17" pos:end="45:37"><expr pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:17">r</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:22">w</name> <operator pos:start="45:24" pos:end="45:24">-</operator> <name pos:start="45:26" pos:end="45:26">x</name><operator pos:start="45:27" pos:end="45:27">)</operator> <operator pos:start="45:29" pos:end="45:29">/</operator> <name pos:start="45:31" pos:end="45:36">stride</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <for pos:start="47:13" pos:end="50:13">for <control pos:start="47:17" pos:end="47:35">(<init pos:start="47:18" pos:end="47:23"><expr pos:start="47:18" pos:end="47:22"><name pos:start="47:18" pos:end="47:18">i</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <literal type="number" pos:start="47:22" pos:end="47:22">0</literal></expr>;</init> <condition pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:29"><name pos:start="47:25" pos:end="47:25">i</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:29">r</name></expr>;</condition> <incr pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:32">i</name><operator pos:start="47:33" pos:end="47:34">++</operator></expr></incr>)</control> <block pos:start="47:37" pos:end="50:13">{<block_content pos:start="48:17" pos:end="49:28">
                <expr_stmt pos:start="48:17" pos:end="48:30"><expr pos:start="48:17" pos:end="48:29"><call pos:start="48:17" pos:end="48:29"><name pos:start="48:17" pos:end="48:17">W</name><argument_list pos:start="48:18" pos:end="48:29">(<argument pos:start="48:19" pos:end="48:21"><expr pos:start="48:19" pos:end="48:21"><name pos:start="48:19" pos:end="48:21">dst</name></expr></argument>, <argument pos:start="48:24" pos:end="48:24"><expr pos:start="48:24" pos:end="48:24"><name pos:start="48:24" pos:end="48:24">x</name></expr></argument>, <argument pos:start="48:27" pos:end="48:28"><expr pos:start="48:27" pos:end="48:28"><name pos:start="48:27" pos:end="48:28">Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="49:17" pos:end="49:28"><expr pos:start="49:17" pos:end="49:27"><name pos:start="49:17" pos:end="49:17">x</name> <operator pos:start="49:19" pos:end="49:20">+=</operator> <name pos:start="49:22" pos:end="49:27">stride</name></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt pos:start="51:13" pos:end="54:13"><if pos:start="51:13" pos:end="54:13">if <condition pos:start="51:16" pos:end="51:23">(<expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:17">x</name> <operator pos:start="51:19" pos:end="51:20">&gt;=</operator> <name pos:start="51:22" pos:end="51:22">w</name></expr>)</condition> <block pos:start="51:25" pos:end="54:13">{<block_content pos:start="52:17" pos:end="53:35">
                <expr_stmt pos:start="52:17" pos:end="52:61"><expr pos:start="52:17" pos:end="52:60"><call pos:start="52:17" pos:end="52:60"><name pos:start="52:17" pos:end="52:22">av_log</name><argument_list pos:start="52:23" pos:end="52:60">(<argument pos:start="52:24" pos:end="52:27"><expr pos:start="52:24" pos:end="52:27"><name pos:start="52:24" pos:end="52:27">NULL</name></expr></argument>, <argument pos:start="52:30" pos:end="52:41"><expr pos:start="52:30" pos:end="52:41"><name pos:start="52:30" pos:end="52:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="52:44" pos:end="52:59"><expr pos:start="52:44" pos:end="52:59"><literal type="string" pos:start="52:44" pos:end="52:59">"run overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="53:17" pos:end="53:35"><expr pos:start="53:17" pos:end="53:34"><call pos:start="53:17" pos:end="53:34"><name pos:start="53:17" pos:end="53:26">av_assert0</name><argument_list pos:start="53:27" pos:end="53:34">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:28">x</name> <operator pos:start="53:30" pos:end="53:31">&lt;=</operator> <name pos:start="53:33" pos:end="53:33">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="block" pos:start="55:13" pos:end="55:46">/* decode run termination value */</comment>
            <expr_stmt pos:start="56:13" pos:end="56:32"><expr pos:start="56:13" pos:end="56:31"><name pos:start="56:13" pos:end="56:14">Rb</name>     <operator pos:start="56:20" pos:end="56:20">=</operator> <call pos:start="56:22" pos:end="56:31"><name pos:start="56:22" pos:end="56:22">R</name><argument_list pos:start="56:23" pos:end="56:31">(<argument pos:start="56:24" pos:end="56:27"><expr pos:start="56:24" pos:end="56:27"><name pos:start="56:24" pos:end="56:27">last</name></expr></argument>, <argument pos:start="56:30" pos:end="56:30"><expr pos:start="56:30" pos:end="56:30"><name pos:start="56:30" pos:end="56:30">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:61"><expr pos:start="57:13" pos:end="57:60"><name pos:start="57:13" pos:end="57:18">RItype</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <ternary pos:start="57:22" pos:end="57:60"><condition pos:start="57:22" pos:end="57:54"><expr pos:start="57:22" pos:end="57:52"><operator pos:start="57:22" pos:end="57:22">(</operator><call pos:start="57:23" pos:end="57:36"><name pos:start="57:23" pos:end="57:27">FFABS</name><argument_list pos:start="57:28" pos:end="57:36">(<argument pos:start="57:29" pos:end="57:35"><expr pos:start="57:29" pos:end="57:35"><name pos:start="57:29" pos:end="57:30">Ra</name> <operator pos:start="57:32" pos:end="57:32">-</operator> <name pos:start="57:34" pos:end="57:35">Rb</name></expr></argument>)</argument_list></call> <operator pos:start="57:38" pos:end="57:39">&lt;=</operator> <name pos:start="57:41" pos:end="57:51"><name pos:start="57:41" pos:end="57:45">state</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:51">near</name></name><operator pos:start="57:52" pos:end="57:52">)</operator></expr> ?</condition><then pos:start="57:56" pos:end="57:56"> <expr pos:start="57:56" pos:end="57:56"><literal type="number" pos:start="57:56" pos:end="57:56">1</literal></expr> </then><else pos:start="57:58" pos:end="57:60">: <expr pos:start="57:60" pos:end="57:60"><literal type="number" pos:start="57:60" pos:end="57:60">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="59:78"><expr pos:start="58:13" pos:end="59:77"><name pos:start="58:13" pos:end="58:15">err</name>    <operator pos:start="58:20" pos:end="58:20">=</operator> <call pos:start="58:22" pos:end="59:77"><name pos:start="58:22" pos:end="58:40">ls_get_code_runterm</name><argument_list pos:start="58:41" pos:end="59:77">(<argument pos:start="58:42" pos:end="58:47"><expr pos:start="58:42" pos:end="58:47"><operator pos:start="58:42" pos:end="58:42">&amp;</operator><name pos:start="58:43" pos:end="58:47"><name pos:start="58:43" pos:end="58:43">s</name><operator pos:start="58:44" pos:end="58:45">-&gt;</operator><name pos:start="58:46" pos:end="58:47">gb</name></name></expr></argument>, <argument pos:start="58:50" pos:end="58:54"><expr pos:start="58:50" pos:end="58:54"><name pos:start="58:50" pos:end="58:54">state</name></expr></argument>, <argument pos:start="58:57" pos:end="58:62"><expr pos:start="58:57" pos:end="58:62"><name pos:start="58:57" pos:end="58:62">RItype</name></expr></argument>,
                                         <argument pos:start="59:42" pos:end="59:76"><expr pos:start="59:42" pos:end="59:76"><name pos:start="59:42" pos:end="59:76"><name pos:start="59:42" pos:end="59:52">ff_log2_run</name><index pos:start="59:53" pos:end="59:76">[<expr pos:start="59:54" pos:end="59:75"><name pos:start="59:54" pos:end="59:75"><name pos:start="59:54" pos:end="59:58">state</name><operator pos:start="59:59" pos:end="59:60">-&gt;</operator><name pos:start="59:61" pos:end="59:69">run_index</name><index pos:start="59:70" pos:end="59:75">[<expr pos:start="59:71" pos:end="59:74"><name pos:start="59:71" pos:end="59:74">comp</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="60:13" pos:end="61:41"><if pos:start="60:13" pos:end="61:41">if <condition pos:start="60:16" pos:end="60:39">(<expr pos:start="60:17" pos:end="60:38"><name pos:start="60:17" pos:end="60:38"><name pos:start="60:17" pos:end="60:21">state</name><operator pos:start="60:22" pos:end="60:23">-&gt;</operator><name pos:start="60:24" pos:end="60:32">run_index</name><index pos:start="60:33" pos:end="60:38">[<expr pos:start="60:34" pos:end="60:37"><name pos:start="60:34" pos:end="60:37">comp</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:41"><block_content pos:start="61:17" pos:end="61:41">
                <expr_stmt pos:start="61:17" pos:end="61:41"><expr pos:start="61:17" pos:end="61:40"><name pos:start="61:17" pos:end="61:38"><name pos:start="61:17" pos:end="61:21">state</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:32">run_index</name><index pos:start="61:33" pos:end="61:38">[<expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">comp</name></expr>]</index></name><operator pos:start="61:39" pos:end="61:40">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="62:13" pos:end="69:13"><if pos:start="62:13" pos:end="64:13">if <condition pos:start="62:16" pos:end="62:38">(<expr pos:start="62:17" pos:end="62:37"><name pos:start="62:17" pos:end="62:27"><name pos:start="62:17" pos:end="62:21">state</name><operator pos:start="62:22" pos:end="62:23">-&gt;</operator><name pos:start="62:24" pos:end="62:27">near</name></name> <operator pos:start="62:29" pos:end="62:30">&amp;&amp;</operator> <name pos:start="62:32" pos:end="62:37">RItype</name></expr>)</condition> <block pos:start="62:40" pos:end="64:13">{<block_content pos:start="63:17" pos:end="63:32">
                <expr_stmt pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:20">pred</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:25">Ra</name> <operator pos:start="63:27" pos:end="63:27">+</operator> <name pos:start="63:29" pos:end="63:31">err</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="64:15" pos:end="69:13">else <block pos:start="64:20" pos:end="69:13">{<block_content pos:start="65:17" pos:end="68:36">
                <if_stmt pos:start="65:17" pos:end="68:36"><if pos:start="65:17" pos:end="66:36">if <condition pos:start="65:20" pos:end="65:28">(<expr pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:22">Rb</name> <operator pos:start="65:24" pos:end="65:24">&lt;</operator> <name pos:start="65:26" pos:end="65:27">Ra</name></expr>)</condition><block type="pseudo" pos:start="66:21" pos:end="66:36"><block_content pos:start="66:21" pos:end="66:36">
                    <expr_stmt pos:start="66:21" pos:end="66:36"><expr pos:start="66:21" pos:end="66:35"><name pos:start="66:21" pos:end="66:24">pred</name> <operator pos:start="66:26" pos:end="66:26">=</operator> <name pos:start="66:28" pos:end="66:29">Rb</name> <operator pos:start="66:31" pos:end="66:31">-</operator> <name pos:start="66:33" pos:end="66:35">err</name></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="67:17" pos:end="68:36">else<block type="pseudo" pos:start="68:21" pos:end="68:36"><block_content pos:start="68:21" pos:end="68:36">
                    <expr_stmt pos:start="68:21" pos:end="68:36"><expr pos:start="68:21" pos:end="68:35"><name pos:start="68:21" pos:end="68:24">pred</name> <operator pos:start="68:26" pos:end="68:26">=</operator> <name pos:start="68:28" pos:end="68:29">Rb</name> <operator pos:start="68:31" pos:end="68:31">+</operator> <name pos:start="68:33" pos:end="68:35">err</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="70:11" pos:end="91:9">else <block pos:start="70:16" pos:end="91:9">{<block_content pos:start="71:13" pos:end="90:24"> <comment type="block" pos:start="70:18" pos:end="70:35">/* regular mode */</comment>
            <decl_stmt pos:start="71:13" pos:end="71:30"><decl pos:start="71:13" pos:end="71:23"><type pos:start="71:13" pos:end="71:15"><name pos:start="71:13" pos:end="71:15">int</name></type> <name pos:start="71:17" pos:end="71:23">context</name></decl>, <decl pos:start="71:26" pos:end="71:29"><type ref="prev" pos:start="71:13" pos:end="71:15"/><name pos:start="71:26" pos:end="71:29">sign</name></decl>;</decl_stmt>
            <expr_stmt pos:start="72:13" pos:end="74:52"><expr pos:start="72:13" pos:end="74:51"><name pos:start="72:13" pos:end="72:19">context</name> <operator pos:start="72:21" pos:end="72:21">=</operator> <call pos:start="72:23" pos:end="72:51"><name pos:start="72:23" pos:end="72:40">ff_jpegls_quantize</name><argument_list pos:start="72:41" pos:end="72:51">(<argument pos:start="72:42" pos:end="72:46"><expr pos:start="72:42" pos:end="72:46"><name pos:start="72:42" pos:end="72:46">state</name></expr></argument>, <argument pos:start="72:49" pos:end="72:50"><expr pos:start="72:49" pos:end="72:50"><name pos:start="72:49" pos:end="72:50">D0</name></expr></argument>)</argument_list></call> <operator pos:start="72:53" pos:end="72:53">*</operator> <literal type="number" pos:start="72:55" pos:end="72:58">81</literal> <operator pos:start="72:58" pos:end="72:58">+</operator>
                      <call pos:start="73:23" pos:end="73:51"><name pos:start="73:23" pos:end="73:40">ff_jpegls_quantize</name><argument_list pos:start="73:41" pos:end="73:51">(<argument pos:start="73:42" pos:end="73:46"><expr pos:start="73:42" pos:end="73:46"><name pos:start="73:42" pos:end="73:46">state</name></expr></argument>, <argument pos:start="73:49" pos:end="73:50"><expr pos:start="73:49" pos:end="73:50"><name pos:start="73:49" pos:end="73:50">D1</name></expr></argument>)</argument_list></call> <operator pos:start="73:53" pos:end="73:53">*</operator>  <literal type="number" pos:start="73:56" pos:end="73:58">9</literal> <operator pos:start="73:58" pos:end="73:58">+</operator>
                      <call pos:start="74:23" pos:end="74:51"><name pos:start="74:23" pos:end="74:40">ff_jpegls_quantize</name><argument_list pos:start="74:41" pos:end="74:51">(<argument pos:start="74:42" pos:end="74:46"><expr pos:start="74:42" pos:end="74:46"><name pos:start="74:42" pos:end="74:46">state</name></expr></argument>, <argument pos:start="74:49" pos:end="74:50"><expr pos:start="74:49" pos:end="74:50"><name pos:start="74:49" pos:end="74:50">D2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="75:13" pos:end="75:53"><expr pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:16">pred</name>    <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:52"><name pos:start="75:23" pos:end="75:30">mid_pred</name><argument_list pos:start="75:31" pos:end="75:52">(<argument pos:start="75:32" pos:end="75:33"><expr pos:start="75:32" pos:end="75:33"><name pos:start="75:32" pos:end="75:33">Ra</name></expr></argument>, <argument pos:start="75:36" pos:end="75:47"><expr pos:start="75:36" pos:end="75:47"><name pos:start="75:36" pos:end="75:37">Ra</name> <operator pos:start="75:39" pos:end="75:39">+</operator> <name pos:start="75:41" pos:end="75:42">Rb</name> <operator pos:start="75:44" pos:end="75:44">-</operator> <name pos:start="75:46" pos:end="75:47">Rc</name></expr></argument>, <argument pos:start="75:50" pos:end="75:51"><expr pos:start="75:50" pos:end="75:51"><name pos:start="75:50" pos:end="75:51">Rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="76:13" pos:end="81:13"><if pos:start="76:13" pos:end="79:13">if <condition pos:start="76:16" pos:end="76:28">(<expr pos:start="76:17" pos:end="76:27"><name pos:start="76:17" pos:end="76:23">context</name> <operator pos:start="76:25" pos:end="76:25">&lt;</operator> <literal type="number" pos:start="76:27" pos:end="76:27">0</literal></expr>)</condition> <block pos:start="76:30" pos:end="79:13">{<block_content pos:start="77:17" pos:end="78:28">
                <expr_stmt pos:start="77:17" pos:end="77:35"><expr pos:start="77:17" pos:end="77:34"><name pos:start="77:17" pos:end="77:23">context</name> <operator pos:start="77:25" pos:end="77:25">=</operator> <operator pos:start="77:27" pos:end="77:27">-</operator><name pos:start="77:28" pos:end="77:34">context</name></expr>;</expr_stmt>
                <expr_stmt pos:start="78:17" pos:end="78:28"><expr pos:start="78:17" pos:end="78:27"><name pos:start="78:17" pos:end="78:20">sign</name>    <operator pos:start="78:25" pos:end="78:25">=</operator> <literal type="number" pos:start="78:27" pos:end="78:27">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="79:15" pos:end="81:13">else <block pos:start="79:20" pos:end="81:13">{<block_content pos:start="80:17" pos:end="80:25">
                <expr_stmt pos:start="80:17" pos:end="80:25"><expr pos:start="80:17" pos:end="80:24"><name pos:start="80:17" pos:end="80:20">sign</name> <operator pos:start="80:22" pos:end="80:22">=</operator> <literal type="number" pos:start="80:24" pos:end="80:24">0</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt pos:start="82:13" pos:end="88:13"><if pos:start="82:13" pos:end="85:13">if <condition pos:start="82:16" pos:end="82:21">(<expr pos:start="82:17" pos:end="82:20"><name pos:start="82:17" pos:end="82:20">sign</name></expr>)</condition> <block pos:start="82:23" pos:end="85:13">{<block_content pos:start="83:17" pos:end="84:68">
                <expr_stmt pos:start="83:17" pos:end="83:75"><expr pos:start="83:17" pos:end="83:74"><name pos:start="83:17" pos:end="83:20">pred</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <call pos:start="83:24" pos:end="83:74"><name pos:start="83:24" pos:end="83:30">av_clip</name><argument_list pos:start="83:31" pos:end="83:74">(<argument pos:start="83:32" pos:end="83:55"><expr pos:start="83:32" pos:end="83:55"><name pos:start="83:32" pos:end="83:35">pred</name> <operator pos:start="83:37" pos:end="83:37">-</operator> <name pos:start="83:39" pos:end="83:55"><name pos:start="83:39" pos:end="83:43">state</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:46">C</name><index pos:start="83:47" pos:end="83:55">[<expr pos:start="83:48" pos:end="83:54"><name pos:start="83:48" pos:end="83:54">context</name></expr>]</index></name></expr></argument>, <argument pos:start="83:58" pos:end="83:58"><expr pos:start="83:58" pos:end="83:58"><literal type="number" pos:start="83:58" pos:end="83:58">0</literal></expr></argument>, <argument pos:start="83:61" pos:end="83:73"><expr pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:65">state</name><operator pos:start="83:66" pos:end="83:67">-&gt;</operator><name pos:start="83:68" pos:end="83:73">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="84:17" pos:end="84:68"><expr pos:start="84:17" pos:end="84:67"><name pos:start="84:17" pos:end="84:19">err</name>  <operator pos:start="84:22" pos:end="84:22">=</operator> <operator pos:start="84:24" pos:end="84:24">-</operator><call pos:start="84:25" pos:end="84:67"><name pos:start="84:25" pos:end="84:43">ls_get_code_regular</name><argument_list pos:start="84:44" pos:end="84:67">(<argument pos:start="84:45" pos:end="84:50"><expr pos:start="84:45" pos:end="84:50"><operator pos:start="84:45" pos:end="84:45">&amp;</operator><name pos:start="84:46" pos:end="84:50"><name pos:start="84:46" pos:end="84:46">s</name><operator pos:start="84:47" pos:end="84:48">-&gt;</operator><name pos:start="84:49" pos:end="84:50">gb</name></name></expr></argument>, <argument pos:start="84:53" pos:end="84:57"><expr pos:start="84:53" pos:end="84:57"><name pos:start="84:53" pos:end="84:57">state</name></expr></argument>, <argument pos:start="84:60" pos:end="84:66"><expr pos:start="84:60" pos:end="84:66"><name pos:start="84:60" pos:end="84:66">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="85:15" pos:end="88:13">else <block pos:start="85:20" pos:end="88:13">{<block_content pos:start="86:17" pos:end="87:67">
                <expr_stmt pos:start="86:17" pos:end="86:75"><expr pos:start="86:17" pos:end="86:74"><name pos:start="86:17" pos:end="86:20">pred</name> <operator pos:start="86:22" pos:end="86:22">=</operator> <call pos:start="86:24" pos:end="86:74"><name pos:start="86:24" pos:end="86:30">av_clip</name><argument_list pos:start="86:31" pos:end="86:74">(<argument pos:start="86:32" pos:end="86:55"><expr pos:start="86:32" pos:end="86:55"><name pos:start="86:32" pos:end="86:35">pred</name> <operator pos:start="86:37" pos:end="86:37">+</operator> <name pos:start="86:39" pos:end="86:55"><name pos:start="86:39" pos:end="86:43">state</name><operator pos:start="86:44" pos:end="86:45">-&gt;</operator><name pos:start="86:46" pos:end="86:46">C</name><index pos:start="86:47" pos:end="86:55">[<expr pos:start="86:48" pos:end="86:54"><name pos:start="86:48" pos:end="86:54">context</name></expr>]</index></name></expr></argument>, <argument pos:start="86:58" pos:end="86:58"><expr pos:start="86:58" pos:end="86:58"><literal type="number" pos:start="86:58" pos:end="86:58">0</literal></expr></argument>, <argument pos:start="86:61" pos:end="86:73"><expr pos:start="86:61" pos:end="86:73"><name pos:start="86:61" pos:end="86:73"><name pos:start="86:61" pos:end="86:65">state</name><operator pos:start="86:66" pos:end="86:67">-&gt;</operator><name pos:start="86:68" pos:end="86:73">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="87:17" pos:end="87:67"><expr pos:start="87:17" pos:end="87:66"><name pos:start="87:17" pos:end="87:19">err</name>  <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:66"><name pos:start="87:24" pos:end="87:42">ls_get_code_regular</name><argument_list pos:start="87:43" pos:end="87:66">(<argument pos:start="87:44" pos:end="87:49"><expr pos:start="87:44" pos:end="87:49"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:49"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:49">gb</name></name></expr></argument>, <argument pos:start="87:52" pos:end="87:56"><expr pos:start="87:52" pos:end="87:56"><name pos:start="87:52" pos:end="87:56">state</name></expr></argument>, <argument pos:start="87:59" pos:end="87:65"><expr pos:start="87:59" pos:end="87:65"><name pos:start="87:59" pos:end="87:65">context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block" pos:start="89:13" pos:end="89:71">/* we have to do something more for near-lossless coding */</comment>
            <expr_stmt pos:start="90:13" pos:end="90:24"><expr pos:start="90:13" pos:end="90:23"><name pos:start="90:13" pos:end="90:16">pred</name> <operator pos:start="90:18" pos:end="90:19">+=</operator> <name pos:start="90:21" pos:end="90:23">err</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt pos:start="92:9" pos:end="98:9"><if pos:start="92:9" pos:end="98:9">if <condition pos:start="92:12" pos:end="92:24">(<expr pos:start="92:13" pos:end="92:23"><name pos:start="92:13" pos:end="92:23"><name pos:start="92:13" pos:end="92:17">state</name><operator pos:start="92:18" pos:end="92:19">-&gt;</operator><name pos:start="92:20" pos:end="92:23">near</name></name></expr>)</condition> <block pos:start="92:26" pos:end="98:9">{<block_content pos:start="93:13" pos:end="97:51">
            <if_stmt pos:start="93:13" pos:end="96:54"><if pos:start="93:13" pos:end="94:54">if <condition pos:start="93:16" pos:end="93:36">(<expr pos:start="93:17" pos:end="93:35"><name pos:start="93:17" pos:end="93:20">pred</name> <operator pos:start="93:22" pos:end="93:22">&lt;</operator> <operator pos:start="93:24" pos:end="93:24">-</operator><name pos:start="93:25" pos:end="93:35"><name pos:start="93:25" pos:end="93:29">state</name><operator pos:start="93:30" pos:end="93:31">-&gt;</operator><name pos:start="93:32" pos:end="93:35">near</name></name></expr>)</condition><block type="pseudo" pos:start="94:17" pos:end="94:54"><block_content pos:start="94:17" pos:end="94:54">
                <expr_stmt pos:start="94:17" pos:end="94:54"><expr pos:start="94:17" pos:end="94:53"><name pos:start="94:17" pos:end="94:20">pred</name> <operator pos:start="94:22" pos:end="94:23">+=</operator> <name pos:start="94:25" pos:end="94:36"><name pos:start="94:25" pos:end="94:29">state</name><operator pos:start="94:30" pos:end="94:31">-&gt;</operator><name pos:start="94:32" pos:end="94:36">range</name></name> <operator pos:start="94:38" pos:end="94:38">*</operator> <name pos:start="94:40" pos:end="94:53"><name pos:start="94:40" pos:end="94:44">state</name><operator pos:start="94:45" pos:end="94:46">-&gt;</operator><name pos:start="94:47" pos:end="94:53">twonear</name></name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif" pos:start="95:13" pos:end="96:54">else if <condition pos:start="95:21" pos:end="95:56">(<expr pos:start="95:22" pos:end="95:55"><name pos:start="95:22" pos:end="95:25">pred</name> <operator pos:start="95:27" pos:end="95:27">&gt;</operator> <name pos:start="95:29" pos:end="95:41"><name pos:start="95:29" pos:end="95:33">state</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:41">maxval</name></name> <operator pos:start="95:43" pos:end="95:43">+</operator> <name pos:start="95:45" pos:end="95:55"><name pos:start="95:45" pos:end="95:49">state</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:55">near</name></name></expr>)</condition><block type="pseudo" pos:start="96:17" pos:end="96:54"><block_content pos:start="96:17" pos:end="96:54">
                <expr_stmt pos:start="96:17" pos:end="96:54"><expr pos:start="96:17" pos:end="96:53"><name pos:start="96:17" pos:end="96:20">pred</name> <operator pos:start="96:22" pos:end="96:23">-=</operator> <name pos:start="96:25" pos:end="96:36"><name pos:start="96:25" pos:end="96:29">state</name><operator pos:start="96:30" pos:end="96:31">-&gt;</operator><name pos:start="96:32" pos:end="96:36">range</name></name> <operator pos:start="96:38" pos:end="96:38">*</operator> <name pos:start="96:40" pos:end="96:53"><name pos:start="96:40" pos:end="96:44">state</name><operator pos:start="96:45" pos:end="96:46">-&gt;</operator><name pos:start="96:47" pos:end="96:53">twonear</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="97:13" pos:end="97:51"><expr pos:start="97:13" pos:end="97:50"><name pos:start="97:13" pos:end="97:16">pred</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:50"><name pos:start="97:20" pos:end="97:26">av_clip</name><argument_list pos:start="97:27" pos:end="97:50">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">pred</name></expr></argument>, <argument pos:start="97:34" pos:end="97:34"><expr pos:start="97:34" pos:end="97:34"><literal type="number" pos:start="97:34" pos:end="97:34">0</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:49"><expr pos:start="97:37" pos:end="97:49"><name pos:start="97:37" pos:end="97:49"><name pos:start="97:37" pos:end="97:41">state</name><operator pos:start="97:42" pos:end="97:43">-&gt;</operator><name pos:start="97:44" pos:end="97:49">maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:12">pred</name> <operator pos:start="99:14" pos:end="99:15">&amp;=</operator> <name pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:21">state</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:29">maxval</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="100:9" pos:end="100:24"><expr pos:start="100:9" pos:end="100:23"><call pos:start="100:9" pos:end="100:23"><name pos:start="100:9" pos:end="100:9">W</name><argument_list pos:start="100:10" pos:end="100:23">(<argument pos:start="100:11" pos:end="100:13"><expr pos:start="100:11" pos:end="100:13"><name pos:start="100:11" pos:end="100:13">dst</name></expr></argument>, <argument pos:start="100:16" pos:end="100:16"><expr pos:start="100:16" pos:end="100:16"><name pos:start="100:16" pos:end="100:16">x</name></expr></argument>, <argument pos:start="100:19" pos:end="100:22"><expr pos:start="100:19" pos:end="100:22"><name pos:start="100:19" pos:end="100:22">pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="101:9" pos:end="101:20"><expr pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:9">x</name> <operator pos:start="101:11" pos:end="101:12">+=</operator> <name pos:start="101:14" pos:end="101:19">stride</name></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function></unit>
