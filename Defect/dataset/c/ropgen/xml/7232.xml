<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7232.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:35">qcrypto_pbkdf2_count_iters</name><parameter_list pos:start="1:36" pos:end="7:49">(<parameter pos:start="1:37" pos:end="1:61"><decl pos:start="1:37" pos:end="1:61"><type pos:start="1:37" pos:end="1:61"><name pos:start="1:37" pos:end="1:56">QCryptoHashAlgorithm</name></type> <name pos:start="1:58" pos:end="1:61">hash</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><specifier pos:start="3:37" pos:end="3:41">const</specifier> <name pos:start="3:43" pos:end="3:49">uint8_t</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:54">key</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:67"><decl pos:start="3:57" pos:end="3:67"><type pos:start="3:57" pos:end="3:67"><name pos:start="3:57" pos:end="3:62">size_t</name></type> <name pos:start="3:64" pos:end="3:67">nkey</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:55"><decl pos:start="5:37" pos:end="5:55"><type pos:start="5:37" pos:end="5:55"><specifier pos:start="5:37" pos:end="5:41">const</specifier> <name pos:start="5:43" pos:end="5:49">uint8_t</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier></type><name pos:start="5:52" pos:end="5:55">salt</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:69"><decl pos:start="5:58" pos:end="5:69"><type pos:start="5:58" pos:end="5:69"><name pos:start="5:58" pos:end="5:63">size_t</name></type> <name pos:start="5:65" pos:end="5:69">nsalt</name></decl></parameter>,

                                    <parameter pos:start="7:37" pos:end="7:48"><decl pos:start="7:37" pos:end="7:48"><type pos:start="7:37" pos:end="7:48"><name pos:start="7:37" pos:end="7:41">Error</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier><modifier pos:start="7:44" pos:end="7:44">*</modifier></type><name pos:start="7:45" pos:end="7:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="79:1">{<block_content pos:start="11:5" pos:end="77:22">

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:19"><name pos:start="11:13" pos:end="11:15">out</name><index pos:start="11:16" pos:end="11:19">[<expr pos:start="11:17" pos:end="11:18"><literal type="number" pos:start="11:17" pos:end="11:18">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:23">iterations</name> <init pos:start="13:25" pos:end="13:35">= <expr pos:start="13:27" pos:end="13:35"><operator pos:start="13:27" pos:end="13:27">(</operator><literal type="number" pos:start="13:28" pos:end="13:28">1</literal> <operator pos:start="13:30" pos:end="13:31">&lt;&lt;</operator> <literal type="number" pos:start="13:33" pos:end="13:34">15</literal><operator pos:start="13:35" pos:end="13:35">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:17">long</name> <name pos:start="15:19" pos:end="15:22">long</name></type> <name pos:start="15:24" pos:end="15:31">delta_ms</name></decl>, <decl pos:start="15:34" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:22"/><name pos:start="15:34" pos:end="15:41">start_ms</name></decl>, <decl pos:start="15:44" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:22"/><name pos:start="15:44" pos:end="15:49">end_ms</name></decl>;</decl_stmt>



    <while pos:start="19:5" pos:end="69:5">while <condition pos:start="19:11" pos:end="19:13">(<expr pos:start="19:12" pos:end="19:12"><literal type="number" pos:start="19:12" pos:end="19:12">1</literal></expr>)</condition> <block pos:start="19:15" pos:end="69:5">{<block_content pos:start="21:9" pos:end="67:9">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:63">(<expr pos:start="21:13" pos:end="21:62"><call pos:start="21:13" pos:end="21:58"><name pos:start="21:13" pos:end="21:41">qcrypto_pbkdf2_get_thread_cpu</name><argument_list pos:start="21:42" pos:end="21:58">(<argument pos:start="21:43" pos:end="21:51"><expr pos:start="21:43" pos:end="21:51"><operator pos:start="21:43" pos:end="21:43">&amp;</operator><name pos:start="21:44" pos:end="21:51">start_ms</name></expr></argument>, <argument pos:start="21:54" pos:end="21:57"><expr pos:start="21:54" pos:end="21:57"><name pos:start="21:54" pos:end="21:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="21:60" pos:end="21:60">&lt;</operator> <literal type="number" pos:start="21:62" pos:end="21:62">0</literal></expr>)</condition> <block pos:start="21:65" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:22">

            <return pos:start="23:13" pos:end="23:22">return <expr pos:start="23:20" pos:end="23:21"><operator pos:start="23:20" pos:end="23:20">-</operator><literal type="number" pos:start="23:21" pos:end="23:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="41:9"><if pos:start="27:9" pos:end="41:9">if <condition pos:start="27:12" pos:end="37:37">(<expr pos:start="27:13" pos:end="37:36"><call pos:start="27:13" pos:end="37:32"><name pos:start="27:13" pos:end="27:26">qcrypto_pbkdf2</name><argument_list pos:start="27:27" pos:end="37:32">(<argument pos:start="27:28" pos:end="27:31"><expr pos:start="27:28" pos:end="27:31"><name pos:start="27:28" pos:end="27:31">hash</name></expr></argument>,

                           <argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">key</name></expr></argument>, <argument pos:start="29:33" pos:end="29:36"><expr pos:start="29:33" pos:end="29:36"><name pos:start="29:33" pos:end="29:36">nkey</name></expr></argument>,

                           <argument pos:start="31:28" pos:end="31:31"><expr pos:start="31:28" pos:end="31:31"><name pos:start="31:28" pos:end="31:31">salt</name></expr></argument>, <argument pos:start="31:34" pos:end="31:38"><expr pos:start="31:34" pos:end="31:38"><name pos:start="31:34" pos:end="31:38">nsalt</name></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><name pos:start="33:28" pos:end="33:37">iterations</name></expr></argument>,

                           <argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">out</name></expr></argument>, <argument pos:start="35:33" pos:end="35:43"><expr pos:start="35:33" pos:end="35:43"><sizeof pos:start="35:33" pos:end="35:43">sizeof<argument_list pos:start="35:39" pos:end="35:43">(<argument pos:start="35:40" pos:end="35:42"><expr pos:start="35:40" pos:end="35:42"><name pos:start="35:40" pos:end="35:42">out</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:31"><expr pos:start="37:28" pos:end="37:31"><name pos:start="37:28" pos:end="37:31">errp</name></expr></argument>)</argument_list></call> <operator pos:start="37:34" pos:end="37:34">&lt;</operator> <literal type="number" pos:start="37:36" pos:end="37:36">0</literal></expr>)</condition> <block pos:start="37:39" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:22">

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:61">(<expr pos:start="43:13" pos:end="43:60"><call pos:start="43:13" pos:end="43:56"><name pos:start="43:13" pos:end="43:41">qcrypto_pbkdf2_get_thread_cpu</name><argument_list pos:start="43:42" pos:end="43:56">(<argument pos:start="43:43" pos:end="43:49"><expr pos:start="43:43" pos:end="43:49"><operator pos:start="43:43" pos:end="43:43">&amp;</operator><name pos:start="43:44" pos:end="43:49">end_ms</name></expr></argument>, <argument pos:start="43:52" pos:end="43:55"><expr pos:start="43:52" pos:end="43:55"><name pos:start="43:52" pos:end="43:55">errp</name></expr></argument>)</argument_list></call> <operator pos:start="43:58" pos:end="43:58">&lt;</operator> <literal type="number" pos:start="43:60" pos:end="43:60">0</literal></expr>)</condition> <block pos:start="43:63" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:22">

            <return pos:start="45:13" pos:end="45:22">return <expr pos:start="45:20" pos:end="45:21"><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:37"><expr pos:start="51:9" pos:end="51:36"><name pos:start="51:9" pos:end="51:16">delta_ms</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:25">end_ms</name> <operator pos:start="51:27" pos:end="51:27">-</operator> <name pos:start="51:29" pos:end="51:36">start_ms</name></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:27">(<expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:20">delta_ms</name> <operator pos:start="55:22" pos:end="55:22">&gt;</operator> <literal type="number" pos:start="55:24" pos:end="55:26">500</literal></expr>)</condition> <block pos:start="55:29" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:18">

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="63:9">else if <condition pos:start="59:19" pos:end="59:34">(<expr pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:27">delta_ms</name> <operator pos:start="59:29" pos:end="59:29">&lt;</operator> <literal type="number" pos:start="59:31" pos:end="59:33">100</literal></expr>)</condition> <block pos:start="59:36" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:41">

            <expr_stmt pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:22">iterations</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:35">iterations</name> <operator pos:start="61:37" pos:end="61:37">*</operator> <literal type="number" pos:start="61:39" pos:end="61:40">10</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:56">

            <expr_stmt pos:start="65:13" pos:end="65:56"><expr pos:start="65:13" pos:end="65:55"><name pos:start="65:13" pos:end="65:22">iterations</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <operator pos:start="65:26" pos:end="65:26">(</operator><name pos:start="65:27" pos:end="65:36">iterations</name> <operator pos:start="65:38" pos:end="65:38">*</operator> <literal type="number" pos:start="65:40" pos:end="65:43">1000</literal> <operator pos:start="65:45" pos:end="65:45">/</operator> <name pos:start="65:47" pos:end="65:54">delta_ms</name><operator pos:start="65:55" pos:end="65:55">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="73:5" pos:end="73:46"><expr pos:start="73:5" pos:end="73:45"><name pos:start="73:5" pos:end="73:14">iterations</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <name pos:start="73:18" pos:end="73:27">iterations</name> <operator pos:start="73:29" pos:end="73:29">*</operator> <literal type="number" pos:start="73:31" pos:end="73:34">1000</literal> <operator pos:start="73:36" pos:end="73:36">/</operator> <name pos:start="73:38" pos:end="73:45">delta_ms</name></expr>;</expr_stmt>



    <return pos:start="77:5" pos:end="77:22">return <expr pos:start="77:12" pos:end="77:21"><name pos:start="77:12" pos:end="77:21">iterations</name></expr>;</return>

</block_content>}</block></function>
</unit>
