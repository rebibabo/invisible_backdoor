<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4988.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="1:53">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:33">DriveMirror</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">arg</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:45">Error</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:37">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:28">source</name></decl>, <decl pos:start="7:31" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:22"><modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AioContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:26">BlockMirrorBackingMode</name></type> <name pos:start="11:28" pos:end="11:39">backing_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">QDict</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:18">options</name> <init pos:start="15:20" pos:end="15:25">= <expr pos:start="15:22" pos:end="15:25"><name pos:start="15:22" pos:end="15:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:37"><decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:22">format</name> <init pos:start="21:24" pos:end="21:36">= <expr pos:start="21:26" pos:end="21:36"><name pos:start="21:26" pos:end="21:36"><name pos:start="21:26" pos:end="21:28">arg</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:36">format</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:6">bs</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:43"><name pos:start="25:10" pos:end="25:24">qmp_get_root_bs</name><argument_list pos:start="25:25" pos:end="25:43">(<argument pos:start="25:26" pos:end="25:36"><expr pos:start="25:26" pos:end="25:36"><name pos:start="25:26" pos:end="25:36"><name pos:start="25:26" pos:end="25:28">arg</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:36">device</name></name></expr></argument>, <argument pos:start="25:39" pos:end="25:42"><expr pos:start="25:39" pos:end="25:42"><name pos:start="25:39" pos:end="25:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:12">(<expr pos:start="27:9" pos:end="27:11"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:11">bs</name></expr>)</condition> <block pos:start="27:14" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:43"><expr pos:start="35:5" pos:end="35:42"><name pos:start="35:5" pos:end="35:15">aio_context</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:38">bdrv_get_aio_context</name><argument_list pos:start="35:39" pos:end="35:42">(<argument pos:start="35:40" pos:end="35:41"><expr pos:start="35:40" pos:end="35:41"><name pos:start="35:40" pos:end="35:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><call pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:23">aio_context_acquire</name><argument_list pos:start="37:24" pos:end="37:36">(<argument pos:start="37:25" pos:end="37:35"><expr pos:start="37:25" pos:end="37:35"><name pos:start="37:25" pos:end="37:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:22"><name pos:start="41:10" pos:end="41:12">arg</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">has_mode</name></name></expr>)</condition> <block pos:start="41:25" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:50">

        <expr_stmt pos:start="43:9" pos:end="43:50"><expr pos:start="43:9" pos:end="43:49"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:11">arg</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:17">mode</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:49">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:25">(<expr pos:start="49:9" pos:end="49:24"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:24"><name pos:start="49:10" pos:end="49:12">arg</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:24">has_format</name></name></expr>)</condition> <block pos:start="49:27" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:49">

        <expr_stmt pos:start="51:9" pos:end="53:49"><expr pos:start="51:9" pos:end="53:48"><name pos:start="51:9" pos:end="51:14">format</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <operator pos:start="51:18" pos:end="51:18">(</operator><ternary pos:start="51:19" pos:end="53:47"><condition pos:start="51:19" pos:end="53:19"><expr pos:start="51:19" pos:end="51:54"><name pos:start="51:19" pos:end="51:27"><name pos:start="51:19" pos:end="51:21">arg</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:27">mode</name></name> <operator pos:start="51:29" pos:end="51:30">==</operator> <name pos:start="51:32" pos:end="51:54">NEW_IMAGE_MODE_EXISTING</name></expr>

                  ?</condition><then pos:start="53:21" pos:end="53:24"> <expr pos:start="53:21" pos:end="53:24"><name pos:start="53:21" pos:end="53:24">NULL</name></expr> </then><else pos:start="53:26" pos:end="53:47">: <expr pos:start="53:28" pos:end="53:47"><name pos:start="53:28" pos:end="53:47"><name pos:start="53:28" pos:end="53:29">bs</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:34">drv</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:47">format_name</name></name></expr></else></ternary><operator pos:start="53:48" pos:end="53:48">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:9">flags</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:14">bs</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:26">open_flags</name></name> <operator pos:start="59:28" pos:end="59:28">|</operator> <name pos:start="59:30" pos:end="59:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:28"><expr pos:start="61:5" pos:end="61:27"><name pos:start="61:5" pos:end="61:10">source</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:27"><name pos:start="61:14" pos:end="61:23">backing_bs</name><argument_list pos:start="61:24" pos:end="61:27">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><name pos:start="61:25" pos:end="61:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:53">(<expr pos:start="63:9" pos:end="63:52"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:15">source</name> <operator pos:start="63:17" pos:end="63:18">&amp;&amp;</operator> <name pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:22">arg</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:28">sync</name></name> <operator pos:start="63:30" pos:end="63:31">==</operator> <name pos:start="63:33" pos:end="63:52">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="63:55" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:42">

        <expr_stmt pos:start="65:9" pos:end="65:42"><expr pos:start="65:9" pos:end="65:41"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:11">arg</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:17">sync</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator> <name pos:start="65:21" pos:end="65:41">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:43">(<expr pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:11">arg</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:17">sync</name></name> <operator pos:start="69:19" pos:end="69:20">==</operator> <name pos:start="69:22" pos:end="69:42">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="69:45" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:20">

        <expr_stmt pos:start="71:9" pos:end="71:20"><expr pos:start="71:9" pos:end="71:19"><name pos:start="71:9" pos:end="71:14">source</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <name pos:start="71:18" pos:end="71:19">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:8">size</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <call pos:start="77:12" pos:end="77:29"><name pos:start="77:12" pos:end="77:25">bdrv_getlength</name><argument_list pos:start="77:26" pos:end="77:29">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:17">(<expr pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:12">size</name> <operator pos:start="79:14" pos:end="79:14">&lt;</operator> <literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>)</condition> <block pos:start="79:19" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:17">

        <expr_stmt pos:start="81:9" pos:end="81:63"><expr pos:start="81:9" pos:end="81:62"><call pos:start="81:9" pos:end="81:62"><name pos:start="81:9" pos:end="81:24">error_setg_errno</name><argument_list pos:start="81:25" pos:end="81:62">(<argument pos:start="81:26" pos:end="81:29"><expr pos:start="81:26" pos:end="81:29"><name pos:start="81:26" pos:end="81:29">errp</name></expr></argument>, <argument pos:start="81:32" pos:end="81:36"><expr pos:start="81:32" pos:end="81:36"><operator pos:start="81:32" pos:end="81:32">-</operator><name pos:start="81:33" pos:end="81:36">size</name></expr></argument>, <argument pos:start="81:39" pos:end="81:61"><expr pos:start="81:39" pos:end="81:61"><literal type="string" pos:start="81:39" pos:end="81:61">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="145:5"><if pos:start="89:5" pos:end="145:5">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:11">arg</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:25">has_replaces</name></name></expr>)</condition> <block pos:start="89:28" pos:end="145:5">{<block_content pos:start="91:9" pos:end="143:9">

        <decl_stmt pos:start="91:9" pos:end="91:40"><decl pos:start="91:9" pos:end="91:39"><type pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:24">BlockDriverState</name> <modifier pos:start="91:26" pos:end="91:26">*</modifier></type><name pos:start="91:27" pos:end="91:39">to_replace_bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:40"><decl pos:start="93:9" pos:end="93:39"><type pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:18">AioContext</name> <modifier pos:start="93:20" pos:end="93:20">*</modifier></type><name pos:start="93:21" pos:end="93:39">replace_aio_context</name></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:29"><decl pos:start="95:9" pos:end="95:28"><type pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:15">int64_t</name></type> <name pos:start="95:17" pos:end="95:28">replace_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:32">(<expr pos:start="99:13" pos:end="99:31"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:31"><name pos:start="99:14" pos:end="99:16">arg</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:31">has_node_name</name></name></expr>)</condition> <block pos:start="99:34" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:21">

            <expr_stmt pos:start="101:13" pos:end="103:57"><expr pos:start="101:13" pos:end="103:56"><call pos:start="101:13" pos:end="103:56"><name pos:start="101:13" pos:end="101:22">error_setg</name><argument_list pos:start="101:23" pos:end="103:56">(<argument pos:start="101:24" pos:end="101:27"><expr pos:start="101:24" pos:end="101:27"><name pos:start="101:24" pos:end="101:27">errp</name></expr></argument>, <argument pos:start="101:30" pos:end="103:55"><expr pos:start="101:30" pos:end="103:55"><literal type="string" pos:start="101:30" pos:end="101:76">"a node-name must be provided when replacing a"</literal>

                             <literal type="string" pos:start="103:30" pos:end="103:55">" named node of the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="105:13" pos:end="105:21">goto <name pos:start="105:18" pos:end="105:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:77"><expr pos:start="111:9" pos:end="111:76"><name pos:start="111:9" pos:end="111:21">to_replace_bs</name> <operator pos:start="111:23" pos:end="111:23">=</operator> <call pos:start="111:25" pos:end="111:76"><name pos:start="111:25" pos:end="111:45">check_to_replace_node</name><argument_list pos:start="111:46" pos:end="111:76">(<argument pos:start="111:47" pos:end="111:48"><expr pos:start="111:47" pos:end="111:48"><name pos:start="111:47" pos:end="111:48">bs</name></expr></argument>, <argument pos:start="111:51" pos:end="111:63"><expr pos:start="111:51" pos:end="111:63"><name pos:start="111:51" pos:end="111:63"><name pos:start="111:51" pos:end="111:53">arg</name><operator pos:start="111:54" pos:end="111:55">-&gt;</operator><name pos:start="111:56" pos:end="111:63">replaces</name></name></expr></argument>, <argument pos:start="111:66" pos:end="111:75"><expr pos:start="111:66" pos:end="111:75"><operator pos:start="111:66" pos:end="111:66">&amp;</operator><name pos:start="111:67" pos:end="111:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:27">(<expr pos:start="115:13" pos:end="115:26"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:26">to_replace_bs</name></expr>)</condition> <block pos:start="115:29" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:21">

            <expr_stmt pos:start="117:13" pos:end="117:45"><expr pos:start="117:13" pos:end="117:44"><call pos:start="117:13" pos:end="117:44"><name pos:start="117:13" pos:end="117:27">error_propagate</name><argument_list pos:start="117:28" pos:end="117:44">(<argument pos:start="117:29" pos:end="117:32"><expr pos:start="117:29" pos:end="117:32"><name pos:start="117:29" pos:end="117:32">errp</name></expr></argument>, <argument pos:start="117:35" pos:end="117:43"><expr pos:start="117:35" pos:end="117:43"><name pos:start="117:35" pos:end="117:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:21">goto <name pos:start="119:18" pos:end="119:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:66"><expr pos:start="125:9" pos:end="125:65"><name pos:start="125:9" pos:end="125:27">replace_aio_context</name> <operator pos:start="125:29" pos:end="125:29">=</operator> <call pos:start="125:31" pos:end="125:65"><name pos:start="125:31" pos:end="125:50">bdrv_get_aio_context</name><argument_list pos:start="125:51" pos:end="125:65">(<argument pos:start="125:52" pos:end="125:64"><expr pos:start="125:52" pos:end="125:64"><name pos:start="125:52" pos:end="125:64">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:49"><expr pos:start="127:9" pos:end="127:48"><call pos:start="127:9" pos:end="127:48"><name pos:start="127:9" pos:end="127:27">aio_context_acquire</name><argument_list pos:start="127:28" pos:end="127:48">(<argument pos:start="127:29" pos:end="127:47"><expr pos:start="127:29" pos:end="127:47"><name pos:start="127:29" pos:end="127:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:53"><expr pos:start="129:9" pos:end="129:52"><name pos:start="129:9" pos:end="129:20">replace_size</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:52"><name pos:start="129:24" pos:end="129:37">bdrv_getlength</name><argument_list pos:start="129:38" pos:end="129:52">(<argument pos:start="129:39" pos:end="129:51"><expr pos:start="129:39" pos:end="129:51"><name pos:start="129:39" pos:end="129:51">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:49"><expr pos:start="131:9" pos:end="131:48"><call pos:start="131:9" pos:end="131:48"><name pos:start="131:9" pos:end="131:27">aio_context_release</name><argument_list pos:start="131:28" pos:end="131:48">(<argument pos:start="131:29" pos:end="131:47"><expr pos:start="131:29" pos:end="131:47"><name pos:start="131:29" pos:end="131:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="135:9" pos:end="143:9"><if pos:start="135:9" pos:end="143:9">if <condition pos:start="135:12" pos:end="135:33">(<expr pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:16">size</name> <operator pos:start="135:18" pos:end="135:19">!=</operator> <name pos:start="135:21" pos:end="135:32">replace_size</name></expr>)</condition> <block pos:start="135:35" pos:end="143:9">{<block_content pos:start="137:13" pos:end="141:21">

            <expr_stmt pos:start="137:13" pos:end="139:47"><expr pos:start="137:13" pos:end="139:46"><call pos:start="137:13" pos:end="139:46"><name pos:start="137:13" pos:end="137:22">error_setg</name><argument_list pos:start="137:23" pos:end="139:46">(<argument pos:start="137:24" pos:end="137:27"><expr pos:start="137:24" pos:end="137:27"><name pos:start="137:24" pos:end="137:27">errp</name></expr></argument>, <argument pos:start="137:30" pos:end="139:45"><expr pos:start="137:30" pos:end="139:45"><literal type="string" pos:start="137:30" pos:end="137:75">"cannot replace image with a mirror image of "</literal>

                             <literal type="string" pos:start="139:30" pos:end="139:45">"different size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="141:13" pos:end="141:21">goto <name pos:start="141:18" pos:end="141:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:51">(<expr pos:start="149:9" pos:end="149:50"><name pos:start="149:9" pos:end="149:17"><name pos:start="149:9" pos:end="149:11">arg</name><operator pos:start="149:12" pos:end="149:13">-&gt;</operator><name pos:start="149:14" pos:end="149:17">mode</name></name> <operator pos:start="149:19" pos:end="149:20">==</operator> <name pos:start="149:22" pos:end="149:50">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>)</condition> <block pos:start="149:53" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:51">

        <expr_stmt pos:start="151:9" pos:end="151:51"><expr pos:start="151:9" pos:end="151:50"><name pos:start="151:9" pos:end="151:20">backing_mode</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <name pos:start="151:24" pos:end="151:50">MIRROR_SOURCE_BACKING_CHAIN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="157:5">else <block pos:start="153:12" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:49">

        <expr_stmt pos:start="155:9" pos:end="155:49"><expr pos:start="155:9" pos:end="155:48"><name pos:start="155:9" pos:end="155:20">backing_mode</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:48">MIRROR_OPEN_BACKING_CHAIN</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="161:5" pos:end="203:5"><if pos:start="161:5" pos:end="175:5">if <condition pos:start="161:8" pos:end="163:48">(<expr pos:start="161:9" pos:end="163:47"><operator pos:start="161:9" pos:end="161:9">(</operator><name pos:start="161:10" pos:end="161:18"><name pos:start="161:10" pos:end="161:12">arg</name><operator pos:start="161:13" pos:end="161:14">-&gt;</operator><name pos:start="161:15" pos:end="161:18">sync</name></name> <operator pos:start="161:20" pos:end="161:21">==</operator> <name pos:start="161:23" pos:end="161:43">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="161:45" pos:end="161:46">||</operator> <operator pos:start="161:48" pos:end="161:48">!</operator><name pos:start="161:49" pos:end="161:54">source</name><operator pos:start="161:55" pos:end="161:55">)</operator>

        <operator pos:start="163:9" pos:end="163:10">&amp;&amp;</operator> <name pos:start="163:12" pos:end="163:20"><name pos:start="163:12" pos:end="163:14">arg</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:20">mode</name></name> <operator pos:start="163:22" pos:end="163:23">!=</operator> <name pos:start="163:25" pos:end="163:47">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition>

    <block pos:start="165:5" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:74">

        <comment type="block" pos:start="167:9" pos:end="167:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><call pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:14">assert</name><argument_list pos:start="169:15" pos:end="169:22">(<argument pos:start="169:16" pos:end="169:21"><expr pos:start="169:16" pos:end="169:21"><name pos:start="169:16" pos:end="169:21">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:74"><expr pos:start="171:9" pos:end="173:73"><call pos:start="171:9" pos:end="173:73"><name pos:start="171:9" pos:end="171:23">bdrv_img_create</name><argument_list pos:start="171:24" pos:end="173:73">(<argument pos:start="171:25" pos:end="171:35"><expr pos:start="171:25" pos:end="171:35"><name pos:start="171:25" pos:end="171:35"><name pos:start="171:25" pos:end="171:27">arg</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:35">target</name></name></expr></argument>, <argument pos:start="171:38" pos:end="171:43"><expr pos:start="171:38" pos:end="171:43"><name pos:start="171:38" pos:end="171:43">format</name></expr></argument>,

                        <argument pos:start="173:25" pos:end="173:28"><expr pos:start="173:25" pos:end="173:28"><name pos:start="173:25" pos:end="173:28">NULL</name></expr></argument>, <argument pos:start="173:31" pos:end="173:34"><expr pos:start="173:31" pos:end="173:34"><name pos:start="173:31" pos:end="173:34">NULL</name></expr></argument>, <argument pos:start="173:37" pos:end="173:40"><expr pos:start="173:37" pos:end="173:40"><name pos:start="173:37" pos:end="173:40">NULL</name></expr></argument>, <argument pos:start="173:43" pos:end="173:46"><expr pos:start="173:43" pos:end="173:46"><name pos:start="173:43" pos:end="173:46">size</name></expr></argument>, <argument pos:start="173:49" pos:end="173:53"><expr pos:start="173:49" pos:end="173:53"><name pos:start="173:49" pos:end="173:53">flags</name></expr></argument>, <argument pos:start="173:56" pos:end="173:60"><expr pos:start="173:56" pos:end="173:60"><name pos:start="173:56" pos:end="173:60">false</name></expr></argument>, <argument pos:start="173:63" pos:end="173:72"><expr pos:start="173:63" pos:end="173:72"><operator pos:start="173:63" pos:end="173:63">&amp;</operator><name pos:start="173:64" pos:end="173:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="203:5">else <block pos:start="175:12" pos:end="203:5">{<block_content pos:start="177:9" pos:end="201:9">

        <switch pos:start="177:9" pos:end="201:9">switch <condition pos:start="177:16" pos:end="177:26">(<expr pos:start="177:17" pos:end="177:25"><name pos:start="177:17" pos:end="177:25"><name pos:start="177:17" pos:end="177:19">arg</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:25">mode</name></name></expr>)</condition> <block pos:start="177:28" pos:end="201:9">{<block_content pos:start="179:9" pos:end="199:20">

        <case pos:start="179:9" pos:end="179:37">case <expr pos:start="179:14" pos:end="179:36"><name pos:start="179:14" pos:end="179:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <break pos:start="181:13" pos:end="181:18">break;</break>

        <case pos:start="183:9" pos:end="183:43">case <expr pos:start="183:14" pos:end="183:42"><name pos:start="183:14" pos:end="183:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="185:13" pos:end="185:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="187:13" pos:end="193:66"><expr pos:start="187:13" pos:end="193:65"><call pos:start="187:13" pos:end="193:65"><name pos:start="187:13" pos:end="187:27">bdrv_img_create</name><argument_list pos:start="187:28" pos:end="193:65">(<argument pos:start="187:29" pos:end="187:39"><expr pos:start="187:29" pos:end="187:39"><name pos:start="187:29" pos:end="187:39"><name pos:start="187:29" pos:end="187:31">arg</name><operator pos:start="187:32" pos:end="187:33">-&gt;</operator><name pos:start="187:34" pos:end="187:39">target</name></name></expr></argument>, <argument pos:start="187:42" pos:end="187:47"><expr pos:start="187:42" pos:end="187:47"><name pos:start="187:42" pos:end="187:47">format</name></expr></argument>,

                            <argument pos:start="189:29" pos:end="189:44"><expr pos:start="189:29" pos:end="189:44"><name pos:start="189:29" pos:end="189:44"><name pos:start="189:29" pos:end="189:34">source</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:44">filename</name></name></expr></argument>,

                            <argument pos:start="191:29" pos:end="191:52"><expr pos:start="191:29" pos:end="191:52"><name pos:start="191:29" pos:end="191:52"><name pos:start="191:29" pos:end="191:34">source</name><operator pos:start="191:35" pos:end="191:36">-&gt;</operator><name pos:start="191:37" pos:end="191:39">drv</name><operator pos:start="191:40" pos:end="191:41">-&gt;</operator><name pos:start="191:42" pos:end="191:52">format_name</name></name></expr></argument>,

                            <argument pos:start="193:29" pos:end="193:32"><expr pos:start="193:29" pos:end="193:32"><name pos:start="193:29" pos:end="193:32">NULL</name></expr></argument>, <argument pos:start="193:35" pos:end="193:38"><expr pos:start="193:35" pos:end="193:38"><name pos:start="193:35" pos:end="193:38">size</name></expr></argument>, <argument pos:start="193:41" pos:end="193:45"><expr pos:start="193:41" pos:end="193:45"><name pos:start="193:41" pos:end="193:45">flags</name></expr></argument>, <argument pos:start="193:48" pos:end="193:52"><expr pos:start="193:48" pos:end="193:52"><name pos:start="193:48" pos:end="193:52">false</name></expr></argument>, <argument pos:start="193:55" pos:end="193:64"><expr pos:start="193:55" pos:end="193:64"><operator pos:start="193:55" pos:end="193:55">&amp;</operator><name pos:start="193:56" pos:end="193:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        <default pos:start="197:9" pos:end="197:16">default:</default>

            <expr_stmt pos:start="199:13" pos:end="199:20"><expr pos:start="199:13" pos:end="199:19"><call pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:17">abort</name><argument_list pos:start="199:18" pos:end="199:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="207:5" pos:end="213:5"><if pos:start="207:5" pos:end="213:5">if <condition pos:start="207:8" pos:end="207:18">(<expr pos:start="207:9" pos:end="207:17"><name pos:start="207:9" pos:end="207:17">local_err</name></expr>)</condition> <block pos:start="207:20" pos:end="213:5">{<block_content pos:start="209:9" pos:end="211:17">

        <expr_stmt pos:start="209:9" pos:end="209:41"><expr pos:start="209:9" pos:end="209:40"><call pos:start="209:9" pos:end="209:40"><name pos:start="209:9" pos:end="209:23">error_propagate</name><argument_list pos:start="209:24" pos:end="209:40">(<argument pos:start="209:25" pos:end="209:28"><expr pos:start="209:25" pos:end="209:28"><name pos:start="209:25" pos:end="209:28">errp</name></expr></argument>, <argument pos:start="209:31" pos:end="209:39"><expr pos:start="209:31" pos:end="209:39"><name pos:start="209:31" pos:end="209:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="211:9" pos:end="211:17">goto <name pos:start="211:14" pos:end="211:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:26"><expr pos:start="217:5" pos:end="217:25"><name pos:start="217:5" pos:end="217:11">options</name> <operator pos:start="217:13" pos:end="217:13">=</operator> <call pos:start="217:15" pos:end="217:25"><name pos:start="217:15" pos:end="217:23">qdict_new</name><argument_list pos:start="217:24" pos:end="217:25">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="223:5"><if pos:start="219:5" pos:end="223:5">if <condition pos:start="219:8" pos:end="219:27">(<expr pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:26"><name pos:start="219:9" pos:end="219:11">arg</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:26">has_node_name</name></name></expr>)</condition> <block pos:start="219:29" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:60">

        <expr_stmt pos:start="221:9" pos:end="221:60"><expr pos:start="221:9" pos:end="221:59"><call pos:start="221:9" pos:end="221:59"><name pos:start="221:9" pos:end="221:21">qdict_put_str</name><argument_list pos:start="221:22" pos:end="221:59">(<argument pos:start="221:23" pos:end="221:29"><expr pos:start="221:23" pos:end="221:29"><name pos:start="221:23" pos:end="221:29">options</name></expr></argument>, <argument pos:start="221:32" pos:end="221:42"><expr pos:start="221:32" pos:end="221:42"><literal type="string" pos:start="221:32" pos:end="221:42">"node-name"</literal></expr></argument>, <argument pos:start="221:45" pos:end="221:58"><expr pos:start="221:45" pos:end="221:58"><name pos:start="221:45" pos:end="221:58"><name pos:start="221:45" pos:end="221:47">arg</name><operator pos:start="221:48" pos:end="221:49">-&gt;</operator><name pos:start="221:50" pos:end="221:58">node_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="229:5"><if pos:start="225:5" pos:end="229:5">if <condition pos:start="225:8" pos:end="225:15">(<expr pos:start="225:9" pos:end="225:14"><name pos:start="225:9" pos:end="225:14">format</name></expr>)</condition> <block pos:start="225:17" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:49">

        <expr_stmt pos:start="227:9" pos:end="227:49"><expr pos:start="227:9" pos:end="227:48"><call pos:start="227:9" pos:end="227:48"><name pos:start="227:9" pos:end="227:21">qdict_put_str</name><argument_list pos:start="227:22" pos:end="227:48">(<argument pos:start="227:23" pos:end="227:29"><expr pos:start="227:23" pos:end="227:29"><name pos:start="227:23" pos:end="227:29">options</name></expr></argument>, <argument pos:start="227:32" pos:end="227:39"><expr pos:start="227:32" pos:end="227:39"><literal type="string" pos:start="227:32" pos:end="227:39">"driver"</literal></expr></argument>, <argument pos:start="227:42" pos:end="227:47"><expr pos:start="227:42" pos:end="227:47"><name pos:start="227:42" pos:end="227:47">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="233:5" pos:end="237:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="239:5" pos:end="241:59"><expr pos:start="239:5" pos:end="241:58"><name pos:start="239:5" pos:end="239:13">target_bs</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <call pos:start="239:17" pos:end="241:58"><name pos:start="239:17" pos:end="239:25">bdrv_open</name><argument_list pos:start="239:26" pos:end="241:58">(<argument pos:start="239:27" pos:end="239:37"><expr pos:start="239:27" pos:end="239:37"><name pos:start="239:27" pos:end="239:37"><name pos:start="239:27" pos:end="239:29">arg</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:37">target</name></name></expr></argument>, <argument pos:start="239:40" pos:end="239:43"><expr pos:start="239:40" pos:end="239:43"><name pos:start="239:40" pos:end="239:43">NULL</name></expr></argument>, <argument pos:start="239:46" pos:end="239:52"><expr pos:start="239:46" pos:end="239:52"><name pos:start="239:46" pos:end="239:52">options</name></expr></argument>,

                          <argument pos:start="241:27" pos:end="241:51"><expr pos:start="241:27" pos:end="241:51"><name pos:start="241:27" pos:end="241:31">flags</name> <operator pos:start="241:33" pos:end="241:33">|</operator> <name pos:start="241:35" pos:end="241:51">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="241:54" pos:end="241:57"><expr pos:start="241:54" pos:end="241:57"><name pos:start="241:54" pos:end="241:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:19">(<expr pos:start="243:9" pos:end="243:18"><operator pos:start="243:9" pos:end="243:9">!</operator><name pos:start="243:10" pos:end="243:18">target_bs</name></expr>)</condition> <block pos:start="243:21" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:17">

        <goto pos:start="245:9" pos:end="245:17">goto <name pos:start="245:14" pos:end="245:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:49"><expr pos:start="251:5" pos:end="251:48"><call pos:start="251:5" pos:end="251:48"><name pos:start="251:5" pos:end="251:24">bdrv_set_aio_context</name><argument_list pos:start="251:25" pos:end="251:48">(<argument pos:start="251:26" pos:end="251:34"><expr pos:start="251:26" pos:end="251:34"><name pos:start="251:26" pos:end="251:34">target_bs</name></expr></argument>, <argument pos:start="251:37" pos:end="251:47"><expr pos:start="251:37" pos:end="251:47"><name pos:start="251:37" pos:end="251:47">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="255:5" pos:end="273:39"><expr pos:start="255:5" pos:end="273:38"><call pos:start="255:5" pos:end="273:38"><name pos:start="255:5" pos:end="255:26">blockdev_mirror_common</name><argument_list pos:start="255:27" pos:end="273:38">(<argument pos:start="255:28" pos:end="255:63"><expr pos:start="255:28" pos:end="255:63"><ternary pos:start="255:28" pos:end="255:63"><condition pos:start="255:28" pos:end="255:44"><expr pos:start="255:28" pos:end="255:42"><name pos:start="255:28" pos:end="255:42"><name pos:start="255:28" pos:end="255:30">arg</name><operator pos:start="255:31" pos:end="255:32">-&gt;</operator><name pos:start="255:33" pos:end="255:42">has_job_id</name></name></expr> ?</condition><then pos:start="255:46" pos:end="255:56"> <expr pos:start="255:46" pos:end="255:56"><name pos:start="255:46" pos:end="255:56"><name pos:start="255:46" pos:end="255:48">arg</name><operator pos:start="255:49" pos:end="255:50">-&gt;</operator><name pos:start="255:51" pos:end="255:56">job_id</name></name></expr> </then><else pos:start="255:58" pos:end="255:63">: <expr pos:start="255:60" pos:end="255:63"><name pos:start="255:60" pos:end="255:63">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="255:66" pos:end="255:67"><expr pos:start="255:66" pos:end="255:67"><name pos:start="255:66" pos:end="255:67">bs</name></expr></argument>, <argument pos:start="255:70" pos:end="255:78"><expr pos:start="255:70" pos:end="255:78"><name pos:start="255:70" pos:end="255:78">target_bs</name></expr></argument>,

                           <argument pos:start="257:28" pos:end="257:44"><expr pos:start="257:28" pos:end="257:44"><name pos:start="257:28" pos:end="257:44"><name pos:start="257:28" pos:end="257:30">arg</name><operator pos:start="257:31" pos:end="257:32">-&gt;</operator><name pos:start="257:33" pos:end="257:44">has_replaces</name></name></expr></argument>, <argument pos:start="257:47" pos:end="257:59"><expr pos:start="257:47" pos:end="257:59"><name pos:start="257:47" pos:end="257:59"><name pos:start="257:47" pos:end="257:49">arg</name><operator pos:start="257:50" pos:end="257:51">-&gt;</operator><name pos:start="257:52" pos:end="257:59">replaces</name></name></expr></argument>, <argument pos:start="257:62" pos:end="257:70"><expr pos:start="257:62" pos:end="257:70"><name pos:start="257:62" pos:end="257:70"><name pos:start="257:62" pos:end="257:64">arg</name><operator pos:start="257:65" pos:end="257:66">-&gt;</operator><name pos:start="257:67" pos:end="257:70">sync</name></name></expr></argument>,

                           <argument pos:start="259:28" pos:end="259:39"><expr pos:start="259:28" pos:end="259:39"><name pos:start="259:28" pos:end="259:39">backing_mode</name></expr></argument>, <argument pos:start="259:42" pos:end="259:55"><expr pos:start="259:42" pos:end="259:55"><name pos:start="259:42" pos:end="259:55"><name pos:start="259:42" pos:end="259:44">arg</name><operator pos:start="259:45" pos:end="259:46">-&gt;</operator><name pos:start="259:47" pos:end="259:55">has_speed</name></name></expr></argument>, <argument pos:start="259:58" pos:end="259:67"><expr pos:start="259:58" pos:end="259:67"><name pos:start="259:58" pos:end="259:67"><name pos:start="259:58" pos:end="259:60">arg</name><operator pos:start="259:61" pos:end="259:62">-&gt;</operator><name pos:start="259:63" pos:end="259:67">speed</name></name></expr></argument>,

                           <argument pos:start="261:28" pos:end="261:47"><expr pos:start="261:28" pos:end="261:47"><name pos:start="261:28" pos:end="261:47"><name pos:start="261:28" pos:end="261:30">arg</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:47">has_granularity</name></name></expr></argument>, <argument pos:start="261:50" pos:end="261:65"><expr pos:start="261:50" pos:end="261:65"><name pos:start="261:50" pos:end="261:65"><name pos:start="261:50" pos:end="261:52">arg</name><operator pos:start="261:53" pos:end="261:54">-&gt;</operator><name pos:start="261:55" pos:end="261:65">granularity</name></name></expr></argument>,

                           <argument pos:start="263:28" pos:end="263:44"><expr pos:start="263:28" pos:end="263:44"><name pos:start="263:28" pos:end="263:44"><name pos:start="263:28" pos:end="263:30">arg</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:44">has_buf_size</name></name></expr></argument>, <argument pos:start="263:47" pos:end="263:59"><expr pos:start="263:47" pos:end="263:59"><name pos:start="263:47" pos:end="263:59"><name pos:start="263:47" pos:end="263:49">arg</name><operator pos:start="263:50" pos:end="263:51">-&gt;</operator><name pos:start="263:52" pos:end="263:59">buf_size</name></name></expr></argument>,

                           <argument pos:start="265:28" pos:end="265:51"><expr pos:start="265:28" pos:end="265:51"><name pos:start="265:28" pos:end="265:51"><name pos:start="265:28" pos:end="265:30">arg</name><operator pos:start="265:31" pos:end="265:32">-&gt;</operator><name pos:start="265:33" pos:end="265:51">has_on_source_error</name></name></expr></argument>, <argument pos:start="265:54" pos:end="265:73"><expr pos:start="265:54" pos:end="265:73"><name pos:start="265:54" pos:end="265:73"><name pos:start="265:54" pos:end="265:56">arg</name><operator pos:start="265:57" pos:end="265:58">-&gt;</operator><name pos:start="265:59" pos:end="265:73">on_source_error</name></name></expr></argument>,

                           <argument pos:start="267:28" pos:end="267:51"><expr pos:start="267:28" pos:end="267:51"><name pos:start="267:28" pos:end="267:51"><name pos:start="267:28" pos:end="267:30">arg</name><operator pos:start="267:31" pos:end="267:32">-&gt;</operator><name pos:start="267:33" pos:end="267:51">has_on_target_error</name></name></expr></argument>, <argument pos:start="267:54" pos:end="267:73"><expr pos:start="267:54" pos:end="267:73"><name pos:start="267:54" pos:end="267:73"><name pos:start="267:54" pos:end="267:56">arg</name><operator pos:start="267:57" pos:end="267:58">-&gt;</operator><name pos:start="267:59" pos:end="267:73">on_target_error</name></name></expr></argument>,

                           <argument pos:start="269:28" pos:end="269:41"><expr pos:start="269:28" pos:end="269:41"><name pos:start="269:28" pos:end="269:41"><name pos:start="269:28" pos:end="269:30">arg</name><operator pos:start="269:31" pos:end="269:32">-&gt;</operator><name pos:start="269:33" pos:end="269:41">has_unmap</name></name></expr></argument>, <argument pos:start="269:44" pos:end="269:53"><expr pos:start="269:44" pos:end="269:53"><name pos:start="269:44" pos:end="269:53"><name pos:start="269:44" pos:end="269:46">arg</name><operator pos:start="269:47" pos:end="269:48">-&gt;</operator><name pos:start="269:49" pos:end="269:53">unmap</name></name></expr></argument>,

                           <argument pos:start="271:28" pos:end="271:32"><expr pos:start="271:28" pos:end="271:32"><name pos:start="271:28" pos:end="271:32">false</name></expr></argument>, <argument pos:start="271:35" pos:end="271:38"><expr pos:start="271:35" pos:end="271:38"><name pos:start="271:35" pos:end="271:38">NULL</name></expr></argument>,

                           <argument pos:start="273:28" pos:end="273:37"><expr pos:start="273:28" pos:end="273:37"><operator pos:start="273:28" pos:end="273:28">&amp;</operator><name pos:start="273:29" pos:end="273:37">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:26"><expr pos:start="275:5" pos:end="275:25"><call pos:start="275:5" pos:end="275:25"><name pos:start="275:5" pos:end="275:14">bdrv_unref</name><argument_list pos:start="275:15" pos:end="275:25">(<argument pos:start="275:16" pos:end="275:24"><expr pos:start="275:16" pos:end="275:24"><name pos:start="275:16" pos:end="275:24">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:37"><expr pos:start="277:5" pos:end="277:36"><call pos:start="277:5" pos:end="277:36"><name pos:start="277:5" pos:end="277:19">error_propagate</name><argument_list pos:start="277:20" pos:end="277:36">(<argument pos:start="277:21" pos:end="277:24"><expr pos:start="277:21" pos:end="277:24"><name pos:start="277:21" pos:end="277:24">errp</name></expr></argument>, <argument pos:start="277:27" pos:end="277:35"><expr pos:start="277:27" pos:end="277:35"><name pos:start="277:27" pos:end="277:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="279:1" pos:end="279:4"><name pos:start="279:1" pos:end="279:3">out</name>:</label>

    <expr_stmt pos:start="281:5" pos:end="281:37"><expr pos:start="281:5" pos:end="281:36"><call pos:start="281:5" pos:end="281:36"><name pos:start="281:5" pos:end="281:23">aio_context_release</name><argument_list pos:start="281:24" pos:end="281:36">(<argument pos:start="281:25" pos:end="281:35"><expr pos:start="281:25" pos:end="281:35"><name pos:start="281:25" pos:end="281:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
