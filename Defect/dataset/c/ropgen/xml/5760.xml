<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5760.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avfilter_parse_graph</name><parameter_list pos:start="1:25" pos:end="5:71">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:38">AVFilterGraph</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">graph</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:66">filters</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:51"><decl pos:start="3:26" pos:end="3:51"><type pos:start="3:26" pos:end="3:51"><name pos:start="3:26" pos:end="3:38">AVFilterInOut</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:51">open_inputs</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:52"><decl pos:start="5:26" pos:end="5:52"><type pos:start="5:26" pos:end="5:52"><name pos:start="5:26" pos:end="5:38">AVFilterInOut</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:52">open_outputs</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:70"><decl pos:start="5:55" pos:end="5:70"><type pos:start="5:55" pos:end="5:70"><name pos:start="5:55" pos:end="5:61">AVClass</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:70">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="141:1">{<block_content pos:start="9:5" pos:end="139:14">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">index</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:12">chr</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">AVFilterInOut</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:30">curr_inputs</name> <init pos:start="15:32" pos:end="15:37">= <expr pos:start="15:34" pos:end="15:37"><name pos:start="15:34" pos:end="15:37">NULL</name></expr></init></decl>;</decl_stmt>



    <do pos:start="19:5" pos:end="91:38">do <block pos:start="19:8" pos:end="91:5">{<block_content pos:start="21:9" pos:end="89:16">

        <decl_stmt pos:start="21:9" pos:end="21:32"><decl pos:start="21:9" pos:end="21:31"><type pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:23">AVFilterContext</name> <modifier pos:start="21:25" pos:end="21:25">*</modifier></type><name pos:start="21:26" pos:end="21:31">filter</name></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:15">filters</name> <operator pos:start="23:17" pos:end="23:18">+=</operator> <call pos:start="23:20" pos:end="23:46"><name pos:start="23:20" pos:end="23:37">consume_whitespace</name><argument_list pos:start="23:38" pos:end="23:46">(<argument pos:start="23:39" pos:end="23:45"><expr pos:start="23:39" pos:end="23:45"><name pos:start="23:39" pos:end="23:45">filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="27:9" pos:end="29:22"><if pos:start="27:9" pos:end="29:22">if<condition pos:start="27:11" pos:end="27:76">(<expr pos:start="27:12" pos:end="27:75"><call pos:start="27:12" pos:end="27:71"><name pos:start="27:12" pos:end="27:23">parse_inputs</name><argument_list pos:start="27:24" pos:end="27:71">(<argument pos:start="27:25" pos:end="27:32"><expr pos:start="27:25" pos:end="27:32"><operator pos:start="27:25" pos:end="27:25">&amp;</operator><name pos:start="27:26" pos:end="27:32">filters</name></expr></argument>, <argument pos:start="27:35" pos:end="27:46"><expr pos:start="27:35" pos:end="27:46"><operator pos:start="27:35" pos:end="27:35">&amp;</operator><name pos:start="27:36" pos:end="27:46">curr_inputs</name></expr></argument>, <argument pos:start="27:49" pos:end="27:61"><expr pos:start="27:49" pos:end="27:61"><operator pos:start="27:49" pos:end="27:49">&amp;</operator><name pos:start="27:50" pos:end="27:61">open_outputs</name></expr></argument>, <argument pos:start="27:64" pos:end="27:70"><expr pos:start="27:64" pos:end="27:70"><name pos:start="27:64" pos:end="27:70">log_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="27:73" pos:end="27:73">&lt;</operator> <literal type="number" pos:start="27:75" pos:end="27:75">0</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:22"><block_content pos:start="29:13" pos:end="29:22">

            <goto pos:start="29:13" pos:end="29:22">goto <name pos:start="29:18" pos:end="29:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:14">filter</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:62"><name pos:start="33:18" pos:end="33:29">parse_filter</name><argument_list pos:start="33:30" pos:end="33:62">(<argument pos:start="33:31" pos:end="33:38"><expr pos:start="33:31" pos:end="33:38"><operator pos:start="33:31" pos:end="33:31">&amp;</operator><name pos:start="33:32" pos:end="33:38">filters</name></expr></argument>, <argument pos:start="33:41" pos:end="33:45"><expr pos:start="33:41" pos:end="33:45"><name pos:start="33:41" pos:end="33:45">graph</name></expr></argument>, <argument pos:start="33:48" pos:end="33:52"><expr pos:start="33:48" pos:end="33:52"><name pos:start="33:48" pos:end="33:52">index</name></expr></argument>, <argument pos:start="33:55" pos:end="33:61"><expr pos:start="33:55" pos:end="33:61"><name pos:start="33:55" pos:end="33:61">log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="39:22"><if pos:start="37:9" pos:end="39:22">if<condition pos:start="37:11" pos:end="37:19">(<expr pos:start="37:12" pos:end="37:18"><operator pos:start="37:12" pos:end="37:12">!</operator><name pos:start="37:13" pos:end="37:18">filter</name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:22"><block_content pos:start="39:13" pos:end="39:22">

            <goto pos:start="39:13" pos:end="39:22">goto <name pos:start="39:18" pos:end="39:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if<condition pos:start="43:11" pos:end="43:62">(<expr pos:start="43:12" pos:end="43:61"><name pos:start="43:12" pos:end="43:30"><name pos:start="43:12" pos:end="43:17">filter</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:30">input_count</name></name> <operator pos:start="43:32" pos:end="43:33">==</operator> <literal type="number" pos:start="43:35" pos:end="43:35">1</literal> <operator pos:start="43:37" pos:end="43:38">&amp;&amp;</operator> <operator pos:start="43:40" pos:end="43:40">!</operator><name pos:start="43:41" pos:end="43:51">curr_inputs</name> <operator pos:start="43:53" pos:end="43:54">&amp;&amp;</operator> <operator pos:start="43:56" pos:end="43:56">!</operator><name pos:start="43:57" pos:end="43:61">index</name></expr>)</condition> <block pos:start="43:64" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:26">

            <comment type="block" pos:start="45:13" pos:end="45:60">/* First input can be omitted if it is "[in]" */</comment>

            <decl_stmt pos:start="47:13" pos:end="47:37"><decl pos:start="47:13" pos:end="47:36"><type pos:start="47:13" pos:end="47:24"><specifier pos:start="47:13" pos:end="47:17">const</specifier> <name pos:start="47:19" pos:end="47:22">char</name> <modifier pos:start="47:24" pos:end="47:24">*</modifier></type><name pos:start="47:25" pos:end="47:27">tmp</name> <init pos:start="47:29" pos:end="47:36">= <expr pos:start="47:31" pos:end="47:36"><literal type="string" pos:start="47:31" pos:end="47:36">"[in]"</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="49:13" pos:end="51:26"><if pos:start="49:13" pos:end="51:26">if<condition pos:start="49:15" pos:end="49:76">(<expr pos:start="49:16" pos:end="49:75"><call pos:start="49:16" pos:end="49:71"><name pos:start="49:16" pos:end="49:27">parse_inputs</name><argument_list pos:start="49:28" pos:end="49:71">(<argument pos:start="49:29" pos:end="49:32"><expr pos:start="49:29" pos:end="49:32"><operator pos:start="49:29" pos:end="49:29">&amp;</operator><name pos:start="49:30" pos:end="49:32">tmp</name></expr></argument>, <argument pos:start="49:35" pos:end="49:46"><expr pos:start="49:35" pos:end="49:46"><operator pos:start="49:35" pos:end="49:35">&amp;</operator><name pos:start="49:36" pos:end="49:46">curr_inputs</name></expr></argument>, <argument pos:start="49:49" pos:end="49:61"><expr pos:start="49:49" pos:end="49:61"><operator pos:start="49:49" pos:end="49:49">&amp;</operator><name pos:start="49:50" pos:end="49:61">open_outputs</name></expr></argument>, <argument pos:start="49:64" pos:end="49:70"><expr pos:start="49:64" pos:end="49:70"><name pos:start="49:64" pos:end="49:70">log_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="49:73" pos:end="49:73">&lt;</operator> <literal type="number" pos:start="49:75" pos:end="49:75">0</literal></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:26"><block_content pos:start="51:17" pos:end="51:26">

                <goto pos:start="51:17" pos:end="51:26">goto <name pos:start="51:22" pos:end="51:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="57:9" pos:end="59:22"><if pos:start="57:9" pos:end="59:22">if<condition pos:start="57:11" pos:end="57:79">(<expr pos:start="57:12" pos:end="57:78"><call pos:start="57:12" pos:end="57:74"><name pos:start="57:12" pos:end="57:29">link_filter_inouts</name><argument_list pos:start="57:30" pos:end="57:74">(<argument pos:start="57:31" pos:end="57:36"><expr pos:start="57:31" pos:end="57:36"><name pos:start="57:31" pos:end="57:36">filter</name></expr></argument>, <argument pos:start="57:39" pos:end="57:50"><expr pos:start="57:39" pos:end="57:50"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:50">curr_inputs</name></expr></argument>, <argument pos:start="57:53" pos:end="57:64"><expr pos:start="57:53" pos:end="57:64"><operator pos:start="57:53" pos:end="57:53">&amp;</operator><name pos:start="57:54" pos:end="57:64">open_inputs</name></expr></argument>, <argument pos:start="57:67" pos:end="57:73"><expr pos:start="57:67" pos:end="57:73"><name pos:start="57:67" pos:end="57:73">log_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="57:76" pos:end="57:76">&lt;</operator> <literal type="number" pos:start="57:78" pos:end="57:78">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:22"><block_content pos:start="59:13" pos:end="59:22">

            <goto pos:start="59:13" pos:end="59:22">goto <name pos:start="59:18" pos:end="59:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="67:22"><if pos:start="63:9" pos:end="67:22">if<condition pos:start="63:11" pos:end="65:38">(<expr pos:start="63:12" pos:end="65:37"><call pos:start="63:12" pos:end="65:33"><name pos:start="63:12" pos:end="63:24">parse_outputs</name><argument_list pos:start="63:25" pos:end="65:33">(<argument pos:start="63:26" pos:end="63:33"><expr pos:start="63:26" pos:end="63:33"><operator pos:start="63:26" pos:end="63:26">&amp;</operator><name pos:start="63:27" pos:end="63:33">filters</name></expr></argument>, <argument pos:start="63:36" pos:end="63:47"><expr pos:start="63:36" pos:end="63:47"><operator pos:start="63:36" pos:end="63:36">&amp;</operator><name pos:start="63:37" pos:end="63:47">curr_inputs</name></expr></argument>, <argument pos:start="63:50" pos:end="63:61"><expr pos:start="63:50" pos:end="63:61"><operator pos:start="63:50" pos:end="63:50">&amp;</operator><name pos:start="63:51" pos:end="63:61">open_inputs</name></expr></argument>, <argument pos:start="63:64" pos:end="63:76"><expr pos:start="63:64" pos:end="63:76"><operator pos:start="63:64" pos:end="63:64">&amp;</operator><name pos:start="63:65" pos:end="63:76">open_outputs</name></expr></argument>,

                         <argument pos:start="65:26" pos:end="65:32"><expr pos:start="65:26" pos:end="65:32"><name pos:start="65:26" pos:end="65:32">log_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="65:35" pos:end="65:35">&lt;</operator> <literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:22"><block_content pos:start="67:13" pos:end="67:22">

            <goto pos:start="67:13" pos:end="67:22">goto <name pos:start="67:18" pos:end="67:21">fail</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:15">filters</name> <operator pos:start="71:17" pos:end="71:18">+=</operator> <call pos:start="71:20" pos:end="71:46"><name pos:start="71:20" pos:end="71:37">consume_whitespace</name><argument_list pos:start="71:38" pos:end="71:46">(<argument pos:start="71:39" pos:end="71:45"><expr pos:start="71:39" pos:end="71:45"><name pos:start="71:39" pos:end="71:45">filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:25"><expr pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:11">chr</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">*</operator><name pos:start="73:16" pos:end="73:22">filters</name><operator pos:start="73:23" pos:end="73:24">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if<condition pos:start="77:11" pos:end="77:37">(<expr pos:start="77:12" pos:end="77:36"><name pos:start="77:12" pos:end="77:14">chr</name> <operator pos:start="77:16" pos:end="77:17">==</operator> <literal type="char" pos:start="77:19" pos:end="77:21">';'</literal> <operator pos:start="77:23" pos:end="77:24">&amp;&amp;</operator> <name pos:start="77:26" pos:end="77:36">curr_inputs</name></expr>)</condition> <block pos:start="77:39" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:22">

            <expr_stmt pos:start="79:13" pos:end="83:32"><expr pos:start="79:13" pos:end="83:31"><call pos:start="79:13" pos:end="83:31"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="83:31">(<argument pos:start="79:20" pos:end="79:26"><expr pos:start="79:20" pos:end="79:26"><name pos:start="79:20" pos:end="79:26">log_ctx</name></expr></argument>, <argument pos:start="79:29" pos:end="79:40"><expr pos:start="79:29" pos:end="79:40"><name pos:start="79:29" pos:end="79:40">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="81:20" pos:end="81:74"><expr pos:start="81:20" pos:end="81:74"><literal type="string" pos:start="81:20" pos:end="81:74">"Could not find a output to link when parsing \"%s\"\n"</literal></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:30"><expr pos:start="83:20" pos:end="83:30"><name pos:start="83:20" pos:end="83:26">filters</name> <operator pos:start="83:28" pos:end="83:28">-</operator> <literal type="number" pos:start="83:30" pos:end="83:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:22">goto <name pos:start="85:18" pos:end="85:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:13">index</name><operator pos:start="89:14" pos:end="89:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="91:12" pos:end="91:37">(<expr pos:start="91:13" pos:end="91:36"><name pos:start="91:13" pos:end="91:15">chr</name> <operator pos:start="91:17" pos:end="91:18">==</operator> <literal type="char" pos:start="91:20" pos:end="91:22">','</literal> <operator pos:start="91:24" pos:end="91:25">||</operator> <name pos:start="91:27" pos:end="91:29">chr</name> <operator pos:start="91:31" pos:end="91:32">==</operator> <literal type="char" pos:start="91:34" pos:end="91:36">';'</literal></expr>)</condition>;</do>



    <if_stmt pos:start="95:5" pos:end="105:5"><if pos:start="95:5" pos:end="105:5">if <condition pos:start="95:8" pos:end="95:17">(<expr pos:start="95:9" pos:end="95:16"><operator pos:start="95:9" pos:end="95:9">*</operator><name pos:start="95:10" pos:end="95:16">filters</name></expr>)</condition> <block pos:start="95:19" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:18">

        <expr_stmt pos:start="97:9" pos:end="101:28"><expr pos:start="97:9" pos:end="101:27"><call pos:start="97:9" pos:end="101:27"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="101:27">(<argument pos:start="97:16" pos:end="97:22"><expr pos:start="97:16" pos:end="97:22"><name pos:start="97:16" pos:end="97:22">log_ctx</name></expr></argument>, <argument pos:start="97:25" pos:end="97:36"><expr pos:start="97:25" pos:end="97:36"><name pos:start="97:25" pos:end="97:36">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="99:16" pos:end="99:70"><expr pos:start="99:16" pos:end="99:70"><literal type="string" pos:start="99:16" pos:end="99:70">"Unable to parse graph description substring: \"%s\"\n"</literal></expr></argument>,

               <argument pos:start="101:16" pos:end="101:26"><expr pos:start="101:16" pos:end="101:26"><name pos:start="101:16" pos:end="101:22">filters</name> <operator pos:start="101:24" pos:end="101:24">-</operator> <literal type="number" pos:start="101:26" pos:end="101:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:18">goto <name pos:start="103:14" pos:end="103:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="121:5"><if pos:start="109:5" pos:end="121:5">if<condition pos:start="109:7" pos:end="109:71">(<expr pos:start="109:8" pos:end="109:70"><name pos:start="109:8" pos:end="109:18">open_inputs</name> <operator pos:start="109:20" pos:end="109:21">&amp;&amp;</operator> <operator pos:start="109:23" pos:end="109:23">!</operator><call pos:start="109:24" pos:end="109:55"><name pos:start="109:24" pos:end="109:29">strcmp</name><argument_list pos:start="109:30" pos:end="109:55">(<argument pos:start="109:31" pos:end="109:47"><expr pos:start="109:31" pos:end="109:47"><name pos:start="109:31" pos:end="109:47"><name pos:start="109:31" pos:end="109:41">open_inputs</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:47">name</name></name></expr></argument>, <argument pos:start="109:50" pos:end="109:54"><expr pos:start="109:50" pos:end="109:54"><literal type="string" pos:start="109:50" pos:end="109:54">"out"</literal></expr></argument>)</argument_list></call> <operator pos:start="109:57" pos:end="109:58">&amp;&amp;</operator> <name pos:start="109:60" pos:end="109:70">curr_inputs</name></expr>)</condition> <block pos:start="109:73" pos:end="121:5">{<block_content pos:start="113:9" pos:end="119:22">

        <comment type="block" pos:start="111:9" pos:end="111:57">/* Last output can be omitted if it is "[out]" */</comment>

        <decl_stmt pos:start="113:9" pos:end="113:34"><decl pos:start="113:9" pos:end="113:33"><type pos:start="113:9" pos:end="113:20"><specifier pos:start="113:9" pos:end="113:13">const</specifier> <name pos:start="113:15" pos:end="113:18">char</name> <modifier pos:start="113:20" pos:end="113:20">*</modifier></type><name pos:start="113:21" pos:end="113:23">tmp</name> <init pos:start="113:25" pos:end="113:33">= <expr pos:start="113:27" pos:end="113:33"><literal type="string" pos:start="113:27" pos:end="113:33">"[out]"</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="115:9" pos:end="119:22"><if pos:start="115:9" pos:end="119:22">if<condition pos:start="115:11" pos:end="117:53">(<expr pos:start="115:12" pos:end="117:52"><call pos:start="115:12" pos:end="117:48"><name pos:start="115:12" pos:end="115:24">parse_outputs</name><argument_list pos:start="115:25" pos:end="117:48">(<argument pos:start="115:26" pos:end="115:29"><expr pos:start="115:26" pos:end="115:29"><operator pos:start="115:26" pos:end="115:26">&amp;</operator><name pos:start="115:27" pos:end="115:29">tmp</name></expr></argument>, <argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><operator pos:start="115:32" pos:end="115:32">&amp;</operator><name pos:start="115:33" pos:end="115:43">curr_inputs</name></expr></argument>, <argument pos:start="115:46" pos:end="115:57"><expr pos:start="115:46" pos:end="115:57"><operator pos:start="115:46" pos:end="115:46">&amp;</operator><name pos:start="115:47" pos:end="115:57">open_inputs</name></expr></argument>,

                         <argument pos:start="117:26" pos:end="117:38"><expr pos:start="117:26" pos:end="117:38"><operator pos:start="117:26" pos:end="117:26">&amp;</operator><name pos:start="117:27" pos:end="117:38">open_outputs</name></expr></argument>, <argument pos:start="117:41" pos:end="117:47"><expr pos:start="117:41" pos:end="117:47"><name pos:start="117:41" pos:end="117:47">log_ctx</name></expr></argument>)</argument_list></call> <operator pos:start="117:50" pos:end="117:50">&lt;</operator> <literal type="number" pos:start="117:52" pos:end="117:52">0</literal></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:22"><block_content pos:start="119:13" pos:end="119:22">

            <goto pos:start="119:13" pos:end="119:22">goto <name pos:start="119:18" pos:end="119:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>



 <label pos:start="129:2" pos:end="129:6"><name pos:start="129:2" pos:end="129:5">fail</name>:</label>

    <expr_stmt pos:start="131:5" pos:end="131:34"><expr pos:start="131:5" pos:end="131:33"><call pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:26">avfilter_destroy_graph</name><argument_list pos:start="131:27" pos:end="131:33">(<argument pos:start="131:28" pos:end="131:32"><expr pos:start="131:28" pos:end="131:32"><name pos:start="131:28" pos:end="131:32">graph</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><call pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:14">free_inout</name><argument_list pos:start="133:15" pos:end="133:27">(<argument pos:start="133:16" pos:end="133:26"><expr pos:start="133:16" pos:end="133:26"><name pos:start="133:16" pos:end="133:26">open_inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:29"><expr pos:start="135:5" pos:end="135:28"><call pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:14">free_inout</name><argument_list pos:start="135:15" pos:end="135:28">(<argument pos:start="135:16" pos:end="135:27"><expr pos:start="135:16" pos:end="135:27"><name pos:start="135:16" pos:end="135:27">open_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:28"><expr pos:start="137:5" pos:end="137:27"><call pos:start="137:5" pos:end="137:27"><name pos:start="137:5" pos:end="137:14">free_inout</name><argument_list pos:start="137:15" pos:end="137:27">(<argument pos:start="137:16" pos:end="137:26"><expr pos:start="137:16" pos:end="137:26"><name pos:start="137:16" pos:end="137:26">curr_inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="139:5" pos:end="139:14">return <expr pos:start="139:12" pos:end="139:13"><operator pos:start="139:12" pos:end="139:12">-</operator><literal type="number" pos:start="139:13" pos:end="139:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
