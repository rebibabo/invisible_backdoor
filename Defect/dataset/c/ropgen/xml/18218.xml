<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18218.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">handle_9p_output</name><parameter_list pos:start="1:29" pos:end="1:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:41">VirtIODevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">vdev</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:58">VirtQueue</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:62">vq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:5">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">V9fsVirtioState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">v</name> <init pos:start="5:24" pos:end="5:48">= <expr pos:start="5:26" pos:end="5:48"><operator pos:start="5:26" pos:end="5:26">(</operator><name pos:start="5:27" pos:end="5:41">V9fsVirtioState</name> <operator pos:start="5:43" pos:end="5:43">*</operator><operator pos:start="5:44" pos:end="5:44">)</operator><name pos:start="5:45" pos:end="5:48">vdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">V9fsState</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:16">s</name> <init pos:start="7:18" pos:end="7:28">= <expr pos:start="7:20" pos:end="7:28"><operator pos:start="7:20" pos:end="7:20">&amp;</operator><name pos:start="7:21" pos:end="7:28"><name pos:start="7:21" pos:end="7:21">v</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:28">state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">V9fsPDU</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">pdu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">ssize_t</name></type> <name pos:start="11:13" pos:end="11:15">len</name></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="73:5">while <condition pos:start="15:11" pos:end="15:32">(<expr pos:start="15:12" pos:end="15:31"><operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:15">pdu</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:30"><name pos:start="15:19" pos:end="15:27">pdu_alloc</name><argument_list pos:start="15:28" pos:end="15:30">(<argument pos:start="15:29" pos:end="15:29"><expr pos:start="15:29" pos:end="15:29"><name pos:start="15:29" pos:end="15:29">s</name></expr></argument>)</argument_list></call><operator pos:start="15:31" pos:end="15:31">)</operator></expr>)</condition> <block pos:start="15:34" pos:end="73:5">{<block_content pos:start="17:9" pos:end="71:24">

        <struct pos:start="17:9" pos:end="25:26">struct <block pos:start="17:16" pos:end="25:9">{

            <decl_stmt pos:start="19:13" pos:end="19:29"><decl pos:start="19:13" pos:end="19:28"><type pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20">uint32_t</name></type> <name pos:start="19:22" pos:end="19:28">size_le</name></decl>;</decl_stmt>

            <decl_stmt pos:start="21:13" pos:end="21:23"><decl pos:start="21:13" pos:end="21:22"><type pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:19">uint8_t</name></type> <name pos:start="21:21" pos:end="21:22">id</name></decl>;</decl_stmt>

            <decl_stmt pos:start="23:13" pos:end="23:28"><decl pos:start="23:13" pos:end="23:27"><type pos:start="23:13" pos:end="23:20"><name pos:start="23:13" pos:end="23:20">uint16_t</name></type> <name pos:start="23:22" pos:end="23:27">tag_le</name></decl>;</decl_stmt>

        }</block> <decl pos:start="25:11" pos:end="25:25"><name pos:start="25:11" pos:end="25:21">QEMU_PACKED</name> <name pos:start="25:23" pos:end="25:25">out</name></decl>;</struct>

        <decl_stmt pos:start="27:9" pos:end="27:31"><decl pos:start="27:9" pos:end="27:30"><type pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:24">VirtQueueElement</name> <modifier pos:start="27:26" pos:end="27:26">*</modifier></type><name pos:start="27:27" pos:end="27:30">elem</name></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:59"><expr pos:start="31:9" pos:end="31:58"><name pos:start="31:9" pos:end="31:12">elem</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <call pos:start="31:16" pos:end="31:58"><name pos:start="31:16" pos:end="31:28">virtqueue_pop</name><argument_list pos:start="31:29" pos:end="31:58">(<argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">vq</name></expr></argument>, <argument pos:start="31:34" pos:end="31:57"><expr pos:start="31:34" pos:end="31:57"><sizeof pos:start="31:34" pos:end="31:57">sizeof<argument_list pos:start="31:40" pos:end="31:57">(<argument pos:start="31:41" pos:end="31:56"><expr pos:start="31:41" pos:end="31:56"><name pos:start="31:41" pos:end="31:56">VirtQueueElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:18">(<expr pos:start="33:13" pos:end="33:17"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:17">elem</name></expr>)</condition> <block pos:start="33:20" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:18">

            <expr_stmt pos:start="35:13" pos:end="35:26"><expr pos:start="35:13" pos:end="35:25"><call pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:20">pdu_free</name><argument_list pos:start="35:21" pos:end="35:25">(<argument pos:start="35:22" pos:end="35:24"><expr pos:start="35:22" pos:end="35:24"><name pos:start="35:22" pos:end="35:24">pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:56"><expr pos:start="43:9" pos:end="43:55"><call pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:14">BUG_ON</name><argument_list pos:start="43:15" pos:end="43:55">(<argument pos:start="43:16" pos:end="43:54"><expr pos:start="43:16" pos:end="43:54"><name pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:19">elem</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:28">out_num</name></name> <operator pos:start="43:30" pos:end="43:31">==</operator> <literal type="number" pos:start="43:33" pos:end="43:33">0</literal> <operator pos:start="43:35" pos:end="43:36">||</operator> <name pos:start="43:38" pos:end="43:49"><name pos:start="43:38" pos:end="43:41">elem</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:49">in_num</name></name> <operator pos:start="43:51" pos:end="43:52">==</operator> <literal type="number" pos:start="43:54" pos:end="43:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:44"><expr pos:start="45:9" pos:end="45:43"><call pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:25">QEMU_BUILD_BUG_ON</name><argument_list pos:start="45:26" pos:end="45:43">(<argument pos:start="45:27" pos:end="45:42"><expr pos:start="45:27" pos:end="45:42"><sizeof pos:start="45:27" pos:end="45:37">sizeof<argument_list pos:start="45:33" pos:end="45:37">(<argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:36">out</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:39" pos:end="45:40">!=</operator> <literal type="number" pos:start="45:42" pos:end="45:42">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:9">v</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:16">elems</name><index pos:start="49:17" pos:end="49:26">[<expr pos:start="49:18" pos:end="49:25"><name pos:start="49:18" pos:end="49:25"><name pos:start="49:18" pos:end="49:20">pdu</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:25">idx</name></name></expr>]</index></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:33">elem</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:44"><expr pos:start="51:9" pos:end="53:43"><name pos:start="51:9" pos:end="51:11">len</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:43"><name pos:start="51:15" pos:end="51:24">iov_to_buf</name><argument_list pos:start="51:25" pos:end="53:43">(<argument pos:start="51:26" pos:end="51:37"><expr pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:29">elem</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:37">out_sg</name></name></expr></argument>, <argument pos:start="51:40" pos:end="51:52"><expr pos:start="51:40" pos:end="51:52"><name pos:start="51:40" pos:end="51:52"><name pos:start="51:40" pos:end="51:43">elem</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:52">out_num</name></name></expr></argument>, <argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">0</literal></expr></argument>,

                         <argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:29">out</name></expr></argument>, <argument pos:start="53:32" pos:end="53:42"><expr pos:start="53:32" pos:end="53:42"><sizeof pos:start="53:32" pos:end="53:42">sizeof<argument_list pos:start="53:38" pos:end="53:42">(<argument pos:start="53:39" pos:end="53:41"><expr pos:start="53:39" pos:end="53:41"><name pos:start="53:39" pos:end="53:41">out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:14">BUG_ON</name><argument_list pos:start="55:15" pos:end="55:34">(<argument pos:start="55:16" pos:end="55:33"><expr pos:start="55:16" pos:end="55:33"><name pos:start="55:16" pos:end="55:18">len</name> <operator pos:start="55:20" pos:end="55:21">!=</operator> <sizeof pos:start="55:23" pos:end="55:33">sizeof<argument_list pos:start="55:29" pos:end="55:33">(<argument pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:32">out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">pdu</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:17">size</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:44"><name pos:start="59:21" pos:end="59:31">le32_to_cpu</name><argument_list pos:start="59:32" pos:end="59:44">(<argument pos:start="59:33" pos:end="59:43"><expr pos:start="59:33" pos:end="59:43"><name pos:start="59:33" pos:end="59:43"><name pos:start="59:33" pos:end="59:35">out</name><operator pos:start="59:36" pos:end="59:36">.</operator><name pos:start="59:37" pos:end="59:43">size_le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">pdu</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:15">id</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:24"><name pos:start="63:19" pos:end="63:21">out</name><operator pos:start="63:22" pos:end="63:22">.</operator><name pos:start="63:23" pos:end="63:24">id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:43"><expr pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">pdu</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:16">tag</name></name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:42"><name pos:start="65:20" pos:end="65:30">le16_to_cpu</name><argument_list pos:start="65:31" pos:end="65:42">(<argument pos:start="65:32" pos:end="65:41"><expr pos:start="65:32" pos:end="65:41"><name pos:start="65:32" pos:end="65:41"><name pos:start="65:32" pos:end="65:34">out</name><operator pos:start="65:35" pos:end="65:35">.</operator><name pos:start="65:36" pos:end="65:41">tag_le</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:43"><expr pos:start="69:9" pos:end="69:42"><call pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:26">qemu_co_queue_init</name><argument_list pos:start="69:27" pos:end="69:42">(<argument pos:start="69:28" pos:end="69:41"><expr pos:start="69:28" pos:end="69:41"><operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:41"><name pos:start="69:29" pos:end="69:31">pdu</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:41">complete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:24"><expr pos:start="71:9" pos:end="71:23"><call pos:start="71:9" pos:end="71:23"><name pos:start="71:9" pos:end="71:18">pdu_submit</name><argument_list pos:start="71:19" pos:end="71:23">(<argument pos:start="71:20" pos:end="71:22"><expr pos:start="71:20" pos:end="71:22"><name pos:start="71:20" pos:end="71:22">pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
