<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5787.c" pos:tabs="8"><function pos:start="1:1" pos:end="23:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">ehci_port_test</name><parameter_list pos:start="1:27" pos:end="1:69">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:41"><name pos:start="1:28" pos:end="1:37"><name pos:start="1:28" pos:end="1:33">struct</name> <name pos:start="1:35" pos:end="1:37">qhc</name></name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">hc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:51"><decl pos:start="1:44" pos:end="1:51"><type pos:start="1:44" pos:end="1:51"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:51">port</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:68">expect</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="23:1">{<block_content pos:start="5:5" pos:end="21:48">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">void</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:14">addr</name> <init pos:start="5:16" pos:end="5:43">= <expr pos:start="5:18" pos:end="5:43"><name pos:start="5:18" pos:end="5:25"><name pos:start="5:18" pos:end="5:19">hc</name><operator pos:start="5:20" pos:end="5:21">-&gt;</operator><name pos:start="5:22" pos:end="5:25">base</name></name> <operator pos:start="5:27" pos:end="5:27">+</operator> <literal type="number" pos:start="5:29" pos:end="5:34">0x64</literal> <operator pos:start="5:34" pos:end="5:34">+</operator> <literal type="number" pos:start="5:36" pos:end="5:36">4</literal> <operator pos:start="5:38" pos:end="5:38">*</operator> <name pos:start="5:40" pos:end="5:43">port</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:18">value</name> <init pos:start="7:20" pos:end="7:49">= <expr pos:start="7:22" pos:end="7:49"><call pos:start="7:22" pos:end="7:49"><name pos:start="7:22" pos:end="7:34">qpci_io_readl</name><argument_list pos:start="7:35" pos:end="7:49">(<argument pos:start="7:36" pos:end="7:42"><expr pos:start="7:36" pos:end="7:42"><name pos:start="7:36" pos:end="7:42"><name pos:start="7:36" pos:end="7:37">hc</name><operator pos:start="7:38" pos:end="7:39">-&gt;</operator><name pos:start="7:40" pos:end="7:42">dev</name></name></expr></argument>, <argument pos:start="7:45" pos:end="7:48"><expr pos:start="7:45" pos:end="7:48"><name pos:start="7:45" pos:end="7:48">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="20:0"><decl pos:start="9:5" pos:end="9:60"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:17">mask</name> <init pos:start="9:19" pos:end="9:60">= <expr pos:start="9:21" pos:end="9:60"><operator pos:start="9:21" pos:end="9:21">~</operator><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:32">PORTSC_CSC</name> <operator pos:start="9:34" pos:end="9:34">|</operator> <name pos:start="9:36" pos:end="9:46">PORTSC_PEDC</name> <operator pos:start="9:48" pos:end="9:48">|</operator> <name pos:start="9:50" pos:end="9:59">PORTSC_OCC</name><operator pos:start="9:60" pos:end="9:60">)</operator></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:5"><literal type="number" pos:start="13:5" pos:end="13:5">0</literal></expr></cpp:if>

    fprintf(stderr, "%s: %d, have 0x%08x, want 0x%08x\n",

            __func__, port, value &amp; mask, expect &amp; mask);

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><call pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:12">g_assert</name><argument_list pos:start="21:13" pos:end="21:47">(<argument pos:start="21:14" pos:end="21:46"><expr pos:start="21:14" pos:end="21:46"><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:19">value</name> <operator pos:start="21:21" pos:end="21:21">&amp;</operator> <name pos:start="21:23" pos:end="21:26">mask</name><operator pos:start="21:27" pos:end="21:27">)</operator> <operator pos:start="21:29" pos:end="21:30">==</operator> <operator pos:start="21:32" pos:end="21:32">(</operator><name pos:start="21:33" pos:end="21:38">expect</name> <operator pos:start="21:40" pos:end="21:40">&amp;</operator> <name pos:start="21:42" pos:end="21:45">mask</name><operator pos:start="21:46" pos:end="21:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
