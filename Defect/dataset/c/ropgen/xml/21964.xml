<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21964.c" pos:tabs="8"><function pos:start="1:1" pos:end="359:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">tcg_gen_code</name><parameter_list pos:start="1:17" pos:end="1:53">(<parameter pos:start="1:18" pos:end="1:30"><decl pos:start="1:18" pos:end="1:30"><type pos:start="1:18" pos:end="1:30"><name pos:start="1:18" pos:end="1:27">TCGContext</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:30">s</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">TranslationBlock</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">tb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="359:1">{<block_content pos:start="7:5" pos:end="357:36">

<cpp:ifdef pos:start="5:1" pos:end="5:22">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:22">CONFIG_PROFILER</name></cpp:ifdef>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TCGProfile</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">prof</name> <init pos:start="7:22" pos:end="7:31">= <expr pos:start="7:24" pos:end="7:31"><operator pos:start="7:24" pos:end="7:24">&amp;</operator><name pos:start="7:25" pos:end="7:31"><name pos:start="7:25" pos:end="7:25">s</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:31">prof</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="9:1" pos:end="9:6">#<cpp:directive pos:start="9:2" pos:end="9:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:13"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:13">oi</name></decl>, <decl pos:start="11:16" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:22">oi_next</name></decl>, <decl pos:start="11:25" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:25" pos:end="11:33">num_insns</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:22">CONFIG_PROFILER</name></cpp:ifdef>

    <block pos:start="17:5" pos:end="52:0">{<block_content pos:start="19:9" pos:end="43:9">

        <decl_stmt pos:start="19:9" pos:end="19:14"><decl pos:start="19:9" pos:end="19:13"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:13">n</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:38"><expr pos:start="23:9" pos:end="23:37"><name pos:start="23:9" pos:end="23:9">n</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <name pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:25">gen_op_buf</name><index pos:start="23:26" pos:end="23:28">[<expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>]</index></name><operator pos:start="23:29" pos:end="23:29">.</operator><name pos:start="23:30" pos:end="23:33">prev</name> <operator pos:start="23:35" pos:end="23:35">+</operator> <literal type="number" pos:start="23:37" pos:end="23:37">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:56"><expr pos:start="25:9" pos:end="25:55"><call pos:start="25:9" pos:end="25:55"><name pos:start="25:9" pos:end="25:18">atomic_set</name><argument_list pos:start="25:19" pos:end="25:55">(<argument pos:start="25:20" pos:end="25:34"><expr pos:start="25:20" pos:end="25:34"><operator pos:start="25:20" pos:end="25:20">&amp;</operator><name pos:start="25:21" pos:end="25:34"><name pos:start="25:21" pos:end="25:24">prof</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:34">op_count</name></name></expr></argument>, <argument pos:start="25:37" pos:end="25:54"><expr pos:start="25:37" pos:end="25:54"><name pos:start="25:37" pos:end="25:50"><name pos:start="25:37" pos:end="25:40">prof</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:50">op_count</name></name> <operator pos:start="25:52" pos:end="25:52">+</operator> <name pos:start="25:54" pos:end="25:54">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:35">(<expr pos:start="27:13" pos:end="27:34"><name pos:start="27:13" pos:end="27:13">n</name> <operator pos:start="27:15" pos:end="27:15">&gt;</operator> <name pos:start="27:17" pos:end="27:34"><name pos:start="27:17" pos:end="27:20">prof</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:34">op_count_max</name></name></expr>)</condition> <block pos:start="27:37" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:47">

            <expr_stmt pos:start="29:13" pos:end="29:47"><expr pos:start="29:13" pos:end="29:46"><call pos:start="29:13" pos:end="29:46"><name pos:start="29:13" pos:end="29:22">atomic_set</name><argument_list pos:start="29:23" pos:end="29:46">(<argument pos:start="29:24" pos:end="29:42"><expr pos:start="29:24" pos:end="29:42"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:42"><name pos:start="29:25" pos:end="29:28">prof</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:42">op_count_max</name></name></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><name pos:start="29:45" pos:end="29:45">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:24"><expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:9">n</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <name pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">nb_temps</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:60"><expr pos:start="37:9" pos:end="37:59"><call pos:start="37:9" pos:end="37:59"><name pos:start="37:9" pos:end="37:18">atomic_set</name><argument_list pos:start="37:19" pos:end="37:59">(<argument pos:start="37:20" pos:end="37:36"><expr pos:start="37:20" pos:end="37:36"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:36"><name pos:start="37:21" pos:end="37:24">prof</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:36">temp_count</name></name></expr></argument>, <argument pos:start="37:39" pos:end="37:58"><expr pos:start="37:39" pos:end="37:58"><name pos:start="37:39" pos:end="37:54"><name pos:start="37:39" pos:end="37:42">prof</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:54">temp_count</name></name> <operator pos:start="37:56" pos:end="37:56">+</operator> <name pos:start="37:58" pos:end="37:58">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:37">(<expr pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:13">n</name> <operator pos:start="39:15" pos:end="39:15">&gt;</operator> <name pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:20">prof</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:36">temp_count_max</name></name></expr>)</condition> <block pos:start="39:39" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:49">

            <expr_stmt pos:start="41:13" pos:end="41:49"><expr pos:start="41:13" pos:end="41:48"><call pos:start="41:13" pos:end="41:48"><name pos:start="41:13" pos:end="41:22">atomic_set</name><argument_list pos:start="41:23" pos:end="41:48">(<argument pos:start="41:24" pos:end="41:44"><expr pos:start="41:24" pos:end="41:44"><operator pos:start="41:24" pos:end="41:24">&amp;</operator><name pos:start="41:25" pos:end="41:44"><name pos:start="41:25" pos:end="41:28">prof</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:44">temp_count_max</name></name></expr></argument>, <argument pos:start="41:47" pos:end="41:47"><expr pos:start="41:47" pos:end="41:47"><name pos:start="41:47" pos:end="41:47">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="51:1" pos:end="51:18">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="53:5" pos:end="74:0"><if pos:start="53:5" pos:end="74:0">if <condition pos:start="53:8" pos:end="55:52">(<expr pos:start="53:9" pos:end="55:51"><call pos:start="53:9" pos:end="55:51"><name pos:start="53:9" pos:end="53:16">unlikely</name><argument_list pos:start="53:17" pos:end="55:51">(<argument pos:start="53:18" pos:end="55:50"><expr pos:start="53:18" pos:end="55:50"><call pos:start="53:18" pos:end="53:50"><name pos:start="53:18" pos:end="53:35">qemu_loglevel_mask</name><argument_list pos:start="53:36" pos:end="53:50">(<argument pos:start="53:37" pos:end="53:49"><expr pos:start="53:37" pos:end="53:49"><name pos:start="53:37" pos:end="53:49">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call>

                 <operator pos:start="55:18" pos:end="55:19">&amp;&amp;</operator> <call pos:start="55:21" pos:end="55:50"><name pos:start="55:21" pos:end="55:42">qemu_log_in_addr_range</name><argument_list pos:start="55:43" pos:end="55:50">(<argument pos:start="55:44" pos:end="55:49"><expr pos:start="55:44" pos:end="55:49"><name pos:start="55:44" pos:end="55:49"><name pos:start="55:44" pos:end="55:45">tb</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:49">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:54" pos:end="74:0">{<block_content pos:start="57:9" pos:end="65:26">

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:21">qemu_log_lock</name><argument_list pos:start="57:22" pos:end="57:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:26"><expr pos:start="59:9" pos:end="59:25"><call pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:16">qemu_log</name><argument_list pos:start="59:17" pos:end="59:25">(<argument pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:24"><literal type="string" pos:start="59:18" pos:end="59:24">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><call pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:20">tcg_dump_ops</name><argument_list pos:start="61:21" pos:end="61:23">(<argument pos:start="61:22" pos:end="61:22"><expr pos:start="61:22" pos:end="61:22"><name pos:start="61:22" pos:end="61:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:23"><expr pos:start="63:9" pos:end="63:22"><call pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:16">qemu_log</name><argument_list pos:start="63:17" pos:end="63:22">(<argument pos:start="63:18" pos:end="63:21"><expr pos:start="63:18" pos:end="63:21"><literal type="string" pos:start="63:18" pos:end="63:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><call pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:23">qemu_log_unlock</name><argument_list pos:start="65:24" pos:end="65:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="73:1" pos:end="73:22">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="75:5" pos:end="82:0"><expr pos:start="75:5" pos:end="75:68"><call pos:start="75:5" pos:end="75:68"><name pos:start="75:5" pos:end="75:14">atomic_set</name><argument_list pos:start="75:15" pos:end="75:68">(<argument pos:start="75:16" pos:end="75:30"><expr pos:start="75:16" pos:end="75:30"><operator pos:start="75:16" pos:end="75:16">&amp;</operator><name pos:start="75:17" pos:end="75:30"><name pos:start="75:17" pos:end="75:20">prof</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:30">opt_time</name></name></expr></argument>, <argument pos:start="75:33" pos:end="75:67"><expr pos:start="75:33" pos:end="75:67"><name pos:start="75:33" pos:end="75:46"><name pos:start="75:33" pos:end="75:36">prof</name><operator pos:start="75:37" pos:end="75:38">-&gt;</operator><name pos:start="75:39" pos:end="75:46">opt_time</name></name> <operator pos:start="75:48" pos:end="75:48">-</operator> <call pos:start="75:50" pos:end="75:67"><name pos:start="75:50" pos:end="75:65">profile_getclock</name><argument_list pos:start="75:66" pos:end="75:67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="81:1" pos:end="81:28">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:28">USE_TCG_OPTIMIZATIONS</name></cpp:ifdef>

    <expr_stmt pos:start="83:5" pos:end="90:0"><expr pos:start="83:5" pos:end="83:19"><call pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:16">tcg_optimize</name><argument_list pos:start="83:17" pos:end="83:19">(<argument pos:start="83:18" pos:end="83:18"><expr pos:start="83:18" pos:end="83:18"><name pos:start="83:18" pos:end="83:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="89:1" pos:end="89:22">#<cpp:directive pos:start="89:2" pos:end="89:6">ifdef</cpp:directive> <name pos:start="89:8" pos:end="89:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="91:5" pos:end="91:69"><expr pos:start="91:5" pos:end="91:68"><call pos:start="91:5" pos:end="91:68"><name pos:start="91:5" pos:end="91:14">atomic_set</name><argument_list pos:start="91:15" pos:end="91:68">(<argument pos:start="91:16" pos:end="91:30"><expr pos:start="91:16" pos:end="91:30"><operator pos:start="91:16" pos:end="91:16">&amp;</operator><name pos:start="91:17" pos:end="91:30"><name pos:start="91:17" pos:end="91:20">prof</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:30">opt_time</name></name></expr></argument>, <argument pos:start="91:33" pos:end="91:67"><expr pos:start="91:33" pos:end="91:67"><name pos:start="91:33" pos:end="91:46"><name pos:start="91:33" pos:end="91:36">prof</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:46">opt_time</name></name> <operator pos:start="91:48" pos:end="91:48">+</operator> <call pos:start="91:50" pos:end="91:67"><name pos:start="91:50" pos:end="91:65">profile_getclock</name><argument_list pos:start="91:66" pos:end="91:67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:66"><call pos:start="93:5" pos:end="93:66"><name pos:start="93:5" pos:end="93:14">atomic_set</name><argument_list pos:start="93:15" pos:end="93:66">(<argument pos:start="93:16" pos:end="93:29"><expr pos:start="93:16" pos:end="93:29"><operator pos:start="93:16" pos:end="93:16">&amp;</operator><name pos:start="93:17" pos:end="93:29"><name pos:start="93:17" pos:end="93:20">prof</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:29">la_time</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:65"><expr pos:start="93:32" pos:end="93:65"><name pos:start="93:32" pos:end="93:44"><name pos:start="93:32" pos:end="93:35">prof</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:44">la_time</name></name> <operator pos:start="93:46" pos:end="93:46">-</operator> <call pos:start="93:48" pos:end="93:65"><name pos:start="93:48" pos:end="93:63">profile_getclock</name><argument_list pos:start="93:64" pos:end="93:65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="99:5" pos:end="99:23"><expr pos:start="99:5" pos:end="99:22"><call pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:19">liveness_pass_1</name><argument_list pos:start="99:20" pos:end="99:22">(<argument pos:start="99:21" pos:end="99:21"><expr pos:start="99:21" pos:end="99:21"><name pos:start="99:21" pos:end="99:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="103:5" pos:end="140:0"><if pos:start="103:5" pos:end="140:0">if <condition pos:start="103:8" pos:end="103:28">(<expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:23">nb_indirects</name></name> <operator pos:start="103:25" pos:end="103:25">&gt;</operator> <literal type="number" pos:start="103:27" pos:end="103:27">0</literal></expr>)</condition> <block pos:start="103:30" pos:end="140:0">{<block_content pos:start="107:9" pos:end="133:9">

<cpp:ifdef pos:start="105:1" pos:end="105:18">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:18">DEBUG_DISAS</name></cpp:ifdef>

        <if_stmt pos:start="107:9" pos:end="124:0"><if pos:start="107:9" pos:end="124:0">if <condition pos:start="107:12" pos:end="109:56">(<expr pos:start="107:13" pos:end="109:55"><call pos:start="107:13" pos:end="109:55"><name pos:start="107:13" pos:end="107:20">unlikely</name><argument_list pos:start="107:21" pos:end="109:55">(<argument pos:start="107:22" pos:end="109:54"><expr pos:start="107:22" pos:end="109:54"><call pos:start="107:22" pos:end="107:58"><name pos:start="107:22" pos:end="107:39">qemu_loglevel_mask</name><argument_list pos:start="107:40" pos:end="107:58">(<argument pos:start="107:41" pos:end="107:57"><expr pos:start="107:41" pos:end="107:57"><name pos:start="107:41" pos:end="107:57">CPU_LOG_TB_OP_IND</name></expr></argument>)</argument_list></call>

                     <operator pos:start="109:22" pos:end="109:23">&amp;&amp;</operator> <call pos:start="109:25" pos:end="109:54"><name pos:start="109:25" pos:end="109:46">qemu_log_in_addr_range</name><argument_list pos:start="109:47" pos:end="109:54">(<argument pos:start="109:48" pos:end="109:53"><expr pos:start="109:48" pos:end="109:53"><name pos:start="109:48" pos:end="109:53"><name pos:start="109:48" pos:end="109:49">tb</name><operator pos:start="109:50" pos:end="109:51">-&gt;</operator><name pos:start="109:52" pos:end="109:53">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:58" pos:end="124:0">{<block_content pos:start="111:13" pos:end="119:30">

            <expr_stmt pos:start="111:13" pos:end="111:28"><expr pos:start="111:13" pos:end="111:27"><call pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:25">qemu_log_lock</name><argument_list pos:start="111:26" pos:end="111:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:55"><expr pos:start="113:13" pos:end="113:54"><call pos:start="113:13" pos:end="113:54"><name pos:start="113:13" pos:end="113:20">qemu_log</name><argument_list pos:start="113:21" pos:end="113:54">(<argument pos:start="113:22" pos:end="113:53"><expr pos:start="113:22" pos:end="113:53"><literal type="string" pos:start="113:22" pos:end="113:53">"OP before indirect lowering:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:28"><expr pos:start="115:13" pos:end="115:27"><call pos:start="115:13" pos:end="115:27"><name pos:start="115:13" pos:end="115:24">tcg_dump_ops</name><argument_list pos:start="115:25" pos:end="115:27">(<argument pos:start="115:26" pos:end="115:26"><expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><call pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:20">qemu_log</name><argument_list pos:start="117:21" pos:end="117:26">(<argument pos:start="117:22" pos:end="117:25"><expr pos:start="117:22" pos:end="117:25"><literal type="string" pos:start="117:22" pos:end="117:25">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><call pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:27">qemu_log_unlock</name><argument_list pos:start="119:28" pos:end="119:29">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="125:9" pos:end="125:56">/* Replace indirect temps with direct temps.  */</comment>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:31">(<expr pos:start="127:13" pos:end="127:30"><call pos:start="127:13" pos:end="127:30"><name pos:start="127:13" pos:end="127:27">liveness_pass_2</name><argument_list pos:start="127:28" pos:end="127:30">(<argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><name pos:start="127:29" pos:end="127:29">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:33" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:31">

            <comment type="block" pos:start="129:13" pos:end="129:57">/* If changes were made, re-run liveness.  */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:31"><expr pos:start="131:13" pos:end="131:30"><call pos:start="131:13" pos:end="131:30"><name pos:start="131:13" pos:end="131:27">liveness_pass_1</name><argument_list pos:start="131:28" pos:end="131:30">(<argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="139:1" pos:end="139:22">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="141:5" pos:end="148:0"><expr pos:start="141:5" pos:end="141:66"><call pos:start="141:5" pos:end="141:66"><name pos:start="141:5" pos:end="141:14">atomic_set</name><argument_list pos:start="141:15" pos:end="141:66">(<argument pos:start="141:16" pos:end="141:29"><expr pos:start="141:16" pos:end="141:29"><operator pos:start="141:16" pos:end="141:16">&amp;</operator><name pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:20">prof</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:29">la_time</name></name></expr></argument>, <argument pos:start="141:32" pos:end="141:65"><expr pos:start="141:32" pos:end="141:65"><name pos:start="141:32" pos:end="141:44"><name pos:start="141:32" pos:end="141:35">prof</name><operator pos:start="141:36" pos:end="141:37">-&gt;</operator><name pos:start="141:38" pos:end="141:44">la_time</name></name> <operator pos:start="141:46" pos:end="141:46">+</operator> <call pos:start="141:48" pos:end="141:65"><name pos:start="141:48" pos:end="141:63">profile_getclock</name><argument_list pos:start="141:64" pos:end="141:65">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="147:1" pos:end="147:18">#<cpp:directive pos:start="147:2" pos:end="147:6">ifdef</cpp:directive> <name pos:start="147:8" pos:end="147:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="149:5" pos:end="166:0"><if pos:start="149:5" pos:end="166:0">if <condition pos:start="149:8" pos:end="151:52">(<expr pos:start="149:9" pos:end="151:51"><call pos:start="149:9" pos:end="151:51"><name pos:start="149:9" pos:end="149:16">unlikely</name><argument_list pos:start="149:17" pos:end="151:51">(<argument pos:start="149:18" pos:end="151:50"><expr pos:start="149:18" pos:end="151:50"><call pos:start="149:18" pos:end="149:54"><name pos:start="149:18" pos:end="149:35">qemu_loglevel_mask</name><argument_list pos:start="149:36" pos:end="149:54">(<argument pos:start="149:37" pos:end="149:53"><expr pos:start="149:37" pos:end="149:53"><name pos:start="149:37" pos:end="149:53">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call>

                 <operator pos:start="151:18" pos:end="151:19">&amp;&amp;</operator> <call pos:start="151:21" pos:end="151:50"><name pos:start="151:21" pos:end="151:42">qemu_log_in_addr_range</name><argument_list pos:start="151:43" pos:end="151:50">(<argument pos:start="151:44" pos:end="151:49"><expr pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:45">tb</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:49">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:54" pos:end="166:0">{<block_content pos:start="153:9" pos:end="161:26">

        <expr_stmt pos:start="153:9" pos:end="153:24"><expr pos:start="153:9" pos:end="153:23"><call pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:21">qemu_log_lock</name><argument_list pos:start="153:22" pos:end="153:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:67"><expr pos:start="155:9" pos:end="155:66"><call pos:start="155:9" pos:end="155:66"><name pos:start="155:9" pos:end="155:16">qemu_log</name><argument_list pos:start="155:17" pos:end="155:66">(<argument pos:start="155:18" pos:end="155:65"><expr pos:start="155:18" pos:end="155:65"><literal type="string" pos:start="155:18" pos:end="155:65">"OP after optimization and liveness analysis:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:24"><expr pos:start="157:9" pos:end="157:23"><call pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:20">tcg_dump_ops</name><argument_list pos:start="157:21" pos:end="157:23">(<argument pos:start="157:22" pos:end="157:22"><expr pos:start="157:22" pos:end="157:22"><name pos:start="157:22" pos:end="157:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><call pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:16">qemu_log</name><argument_list pos:start="159:17" pos:end="159:22">(<argument pos:start="159:18" pos:end="159:21"><expr pos:start="159:18" pos:end="159:21"><literal type="string" pos:start="159:18" pos:end="159:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:26"><expr pos:start="161:9" pos:end="161:25"><call pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:23">qemu_log_unlock</name><argument_list pos:start="161:24" pos:end="161:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="169:5" pos:end="169:27"><expr pos:start="169:5" pos:end="169:26"><call pos:start="169:5" pos:end="169:26"><name pos:start="169:5" pos:end="169:23">tcg_reg_alloc_start</name><argument_list pos:start="169:24" pos:end="169:26">(<argument pos:start="169:25" pos:end="169:25"><expr pos:start="169:25" pos:end="169:25"><name pos:start="169:25" pos:end="169:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:29"><expr pos:start="173:5" pos:end="173:28"><name pos:start="173:5" pos:end="173:15"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:15">code_buf</name></name> <operator pos:start="173:17" pos:end="173:17">=</operator> <name pos:start="173:19" pos:end="173:28"><name pos:start="173:19" pos:end="173:20">tb</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:24">tc</name><operator pos:start="173:25" pos:end="173:25">.</operator><name pos:start="173:26" pos:end="173:28">ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="180:0"><expr pos:start="175:5" pos:end="175:28"><name pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:15">code_ptr</name></name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:28"><name pos:start="175:19" pos:end="175:20">tb</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:24">tc</name><operator pos:start="175:25" pos:end="175:25">.</operator><name pos:start="175:26" pos:end="175:28">ptr</name></name></expr>;</expr_stmt>



<cpp:ifdef pos:start="179:1" pos:end="179:34">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:34">TCG_TARGET_NEED_LDST_LABELS</name></cpp:ifdef>

    <expr_stmt pos:start="181:5" pos:end="186:0"><expr pos:start="181:5" pos:end="181:25"><name pos:start="181:5" pos:end="181:18"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:18">ldst_labels</name></name> <operator pos:start="181:20" pos:end="181:20">=</operator> <name pos:start="181:22" pos:end="181:25">NULL</name></expr>;</expr_stmt>

<cpp:endif pos:start="183:1" pos:end="183:6">#<cpp:directive pos:start="183:2" pos:end="183:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="185:1" pos:end="185:34">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:34">TCG_TARGET_NEED_POOL_LABELS</name></cpp:ifdef>

    <expr_stmt pos:start="187:5" pos:end="190:0"><expr pos:start="187:5" pos:end="187:25"><name pos:start="187:5" pos:end="187:18"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:18">pool_labels</name></name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:25">NULL</name></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="193:5" pos:end="193:19"><expr pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:13">num_insns</name> <operator pos:start="193:15" pos:end="193:15">=</operator> <operator pos:start="193:17" pos:end="193:17">-</operator><literal type="number" pos:start="193:18" pos:end="193:18">1</literal></expr>;</expr_stmt>

    <for pos:start="195:5" pos:end="319:5">for <control pos:start="195:9" pos:end="195:59">(<init pos:start="195:10" pos:end="195:36"><expr pos:start="195:10" pos:end="195:35"><name pos:start="195:10" pos:end="195:11">oi</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <name pos:start="195:15" pos:end="195:30"><name pos:start="195:15" pos:end="195:15">s</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:27">gen_op_buf</name><index pos:start="195:28" pos:end="195:30">[<expr pos:start="195:29" pos:end="195:29"><literal type="number" pos:start="195:29" pos:end="195:29">0</literal></expr>]</index></name><operator pos:start="195:31" pos:end="195:31">.</operator><name pos:start="195:32" pos:end="195:35">next</name></expr>;</init> <condition pos:start="195:38" pos:end="195:45"><expr pos:start="195:38" pos:end="195:44"><name pos:start="195:38" pos:end="195:39">oi</name> <operator pos:start="195:41" pos:end="195:42">!=</operator> <literal type="number" pos:start="195:44" pos:end="195:44">0</literal></expr>;</condition> <incr pos:start="195:47" pos:end="195:58"><expr pos:start="195:47" pos:end="195:58"><name pos:start="195:47" pos:end="195:48">oi</name> <operator pos:start="195:50" pos:end="195:50">=</operator> <name pos:start="195:52" pos:end="195:58">oi_next</name></expr></incr>)</control> <block pos:start="195:61" pos:end="319:5">{<block_content pos:start="197:9" pos:end="317:9">

        <decl_stmt pos:start="197:9" pos:end="197:46"><decl pos:start="197:9" pos:end="197:45"><type pos:start="197:9" pos:end="197:21"><name pos:start="197:9" pos:end="197:13">TCGOp</name> <modifier pos:start="197:15" pos:end="197:15">*</modifier> <specifier pos:start="197:17" pos:end="197:21">const</specifier></type> <name pos:start="197:23" pos:end="197:24">op</name> <init pos:start="197:26" pos:end="197:45">= <expr pos:start="197:28" pos:end="197:45"><operator pos:start="197:28" pos:end="197:28">&amp;</operator><name pos:start="197:29" pos:end="197:45"><name pos:start="197:29" pos:end="197:29">s</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:41">gen_op_buf</name><index pos:start="197:42" pos:end="197:45">[<expr pos:start="197:43" pos:end="197:44"><name pos:start="197:43" pos:end="197:44">oi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="199:9" pos:end="199:32"><decl pos:start="199:9" pos:end="199:31"><type pos:start="199:9" pos:end="199:17"><name pos:start="199:9" pos:end="199:17">TCGOpcode</name></type> <name pos:start="199:19" pos:end="199:21">opc</name> <init pos:start="199:23" pos:end="199:31">= <expr pos:start="199:25" pos:end="199:31"><name pos:start="199:25" pos:end="199:31"><name pos:start="199:25" pos:end="199:26">op</name><operator pos:start="199:27" pos:end="199:28">-&gt;</operator><name pos:start="199:29" pos:end="199:31">opc</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="203:9" pos:end="206:0"><expr pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:15">oi_next</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <name pos:start="203:19" pos:end="203:26"><name pos:start="203:19" pos:end="203:20">op</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:26">next</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="205:1" pos:end="205:22">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:22">CONFIG_PROFILER</name></cpp:ifdef>

        <expr_stmt pos:start="207:9" pos:end="210:0"><expr pos:start="207:9" pos:end="207:77"><call pos:start="207:9" pos:end="207:77"><name pos:start="207:9" pos:end="207:18">atomic_set</name><argument_list pos:start="207:19" pos:end="207:77">(<argument pos:start="207:20" pos:end="207:45"><expr pos:start="207:20" pos:end="207:45"><operator pos:start="207:20" pos:end="207:20">&amp;</operator><name pos:start="207:21" pos:end="207:45"><name pos:start="207:21" pos:end="207:24">prof</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:40">table_op_count</name><index pos:start="207:41" pos:end="207:45">[<expr pos:start="207:42" pos:end="207:44"><name pos:start="207:42" pos:end="207:44">opc</name></expr>]</index></name></expr></argument>, <argument pos:start="207:48" pos:end="207:76"><expr pos:start="207:48" pos:end="207:76"><name pos:start="207:48" pos:end="207:72"><name pos:start="207:48" pos:end="207:51">prof</name><operator pos:start="207:52" pos:end="207:53">-&gt;</operator><name pos:start="207:54" pos:end="207:67">table_op_count</name><index pos:start="207:68" pos:end="207:72">[<expr pos:start="207:69" pos:end="207:71"><name pos:start="207:69" pos:end="207:71">opc</name></expr>]</index></name> <operator pos:start="207:74" pos:end="207:74">+</operator> <literal type="number" pos:start="207:76" pos:end="207:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>



        <switch pos:start="213:9" pos:end="300:0">switch <condition pos:start="213:16" pos:end="213:20">(<expr pos:start="213:17" pos:end="213:19"><name pos:start="213:17" pos:end="213:19">opc</name></expr>)</condition> <block pos:start="213:22" pos:end="300:0">{<block_content pos:start="215:9" pos:end="295:18">

        <case pos:start="215:9" pos:end="215:30">case <expr pos:start="215:14" pos:end="215:29"><name pos:start="215:14" pos:end="215:29">INDEX_op_mov_i32</name></expr>:</case>

        <case pos:start="217:9" pos:end="217:30">case <expr pos:start="217:14" pos:end="217:29"><name pos:start="217:14" pos:end="217:29">INDEX_op_mov_i64</name></expr>:</case>

            <expr_stmt pos:start="219:13" pos:end="219:37"><expr pos:start="219:13" pos:end="219:36"><call pos:start="219:13" pos:end="219:36"><name pos:start="219:13" pos:end="219:29">tcg_reg_alloc_mov</name><argument_list pos:start="219:30" pos:end="219:36">(<argument pos:start="219:31" pos:end="219:31"><expr pos:start="219:31" pos:end="219:31"><name pos:start="219:31" pos:end="219:31">s</name></expr></argument>, <argument pos:start="219:34" pos:end="219:35"><expr pos:start="219:34" pos:end="219:35"><name pos:start="219:34" pos:end="219:35">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="221:13" pos:end="221:18">break;</break>

        <case pos:start="223:9" pos:end="223:31">case <expr pos:start="223:14" pos:end="223:30"><name pos:start="223:14" pos:end="223:30">INDEX_op_movi_i32</name></expr>:</case>

        <case pos:start="225:9" pos:end="225:31">case <expr pos:start="225:14" pos:end="225:30"><name pos:start="225:14" pos:end="225:30">INDEX_op_movi_i64</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:38"><expr pos:start="227:13" pos:end="227:37"><call pos:start="227:13" pos:end="227:37"><name pos:start="227:13" pos:end="227:30">tcg_reg_alloc_movi</name><argument_list pos:start="227:31" pos:end="227:37">(<argument pos:start="227:32" pos:end="227:32"><expr pos:start="227:32" pos:end="227:32"><name pos:start="227:32" pos:end="227:32">s</name></expr></argument>, <argument pos:start="227:35" pos:end="227:36"><expr pos:start="227:35" pos:end="227:36"><name pos:start="227:35" pos:end="227:36">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="229:13" pos:end="229:18">break;</break>

        <case pos:start="231:9" pos:end="231:33">case <expr pos:start="231:14" pos:end="231:32"><name pos:start="231:14" pos:end="231:32">INDEX_op_insn_start</name></expr>:</case>

            <if_stmt pos:start="233:13" pos:end="237:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:31">(<expr pos:start="233:17" pos:end="233:30"><name pos:start="233:17" pos:end="233:25">num_insns</name> <operator pos:start="233:27" pos:end="233:28">&gt;=</operator> <literal type="number" pos:start="233:30" pos:end="233:30">0</literal></expr>)</condition> <block pos:start="233:33" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:74">

                <expr_stmt pos:start="235:17" pos:end="235:74"><expr pos:start="235:17" pos:end="235:73"><name pos:start="235:17" pos:end="235:46"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:35">gen_insn_end_off</name><index pos:start="235:36" pos:end="235:46">[<expr pos:start="235:37" pos:end="235:45"><name pos:start="235:37" pos:end="235:45">num_insns</name></expr>]</index></name> <operator pos:start="235:48" pos:end="235:48">=</operator> <call pos:start="235:50" pos:end="235:73"><name pos:start="235:50" pos:end="235:70">tcg_current_code_size</name><argument_list pos:start="235:71" pos:end="235:73">(<argument pos:start="235:72" pos:end="235:72"><expr pos:start="235:72" pos:end="235:72"><name pos:start="235:72" pos:end="235:72">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:24"><expr pos:start="239:13" pos:end="239:23"><name pos:start="239:13" pos:end="239:21">num_insns</name><operator pos:start="239:22" pos:end="239:23">++</operator></expr>;</expr_stmt>

            <for pos:start="241:13" pos:end="257:13">for <control pos:start="241:17" pos:end="241:57">(<init pos:start="241:18" pos:end="241:23"><expr pos:start="241:18" pos:end="241:22"><name pos:start="241:18" pos:end="241:18">i</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">0</literal></expr>;</init> <condition pos:start="241:25" pos:end="241:52"><expr pos:start="241:25" pos:end="241:51"><name pos:start="241:25" pos:end="241:25">i</name> <operator pos:start="241:27" pos:end="241:27">&lt;</operator> <name pos:start="241:29" pos:end="241:51">TARGET_INSN_START_WORDS</name></expr>;</condition> <incr pos:start="241:54" pos:end="241:56"><expr pos:start="241:54" pos:end="241:56"><operator pos:start="241:54" pos:end="241:55">++</operator><name pos:start="241:56" pos:end="241:56">i</name></expr></incr>)</control> <block pos:start="241:59" pos:end="257:13">{<block_content pos:start="243:17" pos:end="255:51">

                <decl_stmt pos:start="243:17" pos:end="246:0"><decl pos:start="243:17" pos:end="243:30"><type pos:start="243:17" pos:end="243:28"><name pos:start="243:17" pos:end="243:28">target_ulong</name></type> <name pos:start="243:30" pos:end="243:30">a</name></decl>;</decl_stmt>

<cpp:if pos:start="245:1" pos:end="245:42">#<cpp:directive pos:start="245:2" pos:end="245:3">if</cpp:directive> <expr pos:start="245:5" pos:end="245:42"><name pos:start="245:5" pos:end="245:20">TARGET_LONG_BITS</name> <operator pos:start="245:22" pos:end="245:22">&gt;</operator> <name pos:start="245:24" pos:end="245:42">TCG_TARGET_REG_BITS</name></expr></cpp:if>

                <expr_stmt pos:start="247:17" pos:end="250:0"><expr pos:start="247:17" pos:end="247:75"><name pos:start="247:17" pos:end="247:17">a</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <call pos:start="247:21" pos:end="247:75"><name pos:start="247:21" pos:end="247:29">deposit64</name><argument_list pos:start="247:30" pos:end="247:75">(<argument pos:start="247:31" pos:end="247:45"><expr pos:start="247:31" pos:end="247:45"><name pos:start="247:31" pos:end="247:45"><name pos:start="247:31" pos:end="247:32">op</name><operator pos:start="247:33" pos:end="247:34">-&gt;</operator><name pos:start="247:35" pos:end="247:38">args</name><index pos:start="247:39" pos:end="247:45">[<expr pos:start="247:40" pos:end="247:44"><name pos:start="247:40" pos:end="247:40">i</name> <operator pos:start="247:42" pos:end="247:42">*</operator> <literal type="number" pos:start="247:44" pos:end="247:44">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:48" pos:end="247:49"><expr pos:start="247:48" pos:end="247:49"><literal type="number" pos:start="247:48" pos:end="247:49">32</literal></expr></argument>, <argument pos:start="247:52" pos:end="247:53"><expr pos:start="247:52" pos:end="247:53"><literal type="number" pos:start="247:52" pos:end="247:53">32</literal></expr></argument>, <argument pos:start="247:56" pos:end="247:74"><expr pos:start="247:56" pos:end="247:74"><name pos:start="247:56" pos:end="247:74"><name pos:start="247:56" pos:end="247:57">op</name><operator pos:start="247:58" pos:end="247:59">-&gt;</operator><name pos:start="247:60" pos:end="247:63">args</name><index pos:start="247:64" pos:end="247:74">[<expr pos:start="247:65" pos:end="247:73"><name pos:start="247:65" pos:end="247:65">i</name> <operator pos:start="247:67" pos:end="247:67">*</operator> <literal type="number" pos:start="247:69" pos:end="247:71">2</literal> <operator pos:start="247:71" pos:end="247:71">+</operator> <literal type="number" pos:start="247:73" pos:end="247:73">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="251:17" pos:end="254:0"><expr pos:start="251:17" pos:end="251:31"><name pos:start="251:17" pos:end="251:17">a</name> <operator pos:start="251:19" pos:end="251:19">=</operator> <name pos:start="251:21" pos:end="251:31"><name pos:start="251:21" pos:end="251:22">op</name><operator pos:start="251:23" pos:end="251:24">-&gt;</operator><name pos:start="251:25" pos:end="251:28">args</name><index pos:start="251:29" pos:end="251:31">[<expr pos:start="251:30" pos:end="251:30"><name pos:start="251:30" pos:end="251:30">i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="253:1" pos:end="253:6">#<cpp:directive pos:start="253:2" pos:end="253:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="255:17" pos:end="255:51"><expr pos:start="255:17" pos:end="255:50"><name pos:start="255:17" pos:end="255:46"><name pos:start="255:17" pos:end="255:17">s</name><operator pos:start="255:18" pos:end="255:19">-&gt;</operator><name pos:start="255:20" pos:end="255:32">gen_insn_data</name><index pos:start="255:33" pos:end="255:43">[<expr pos:start="255:34" pos:end="255:42"><name pos:start="255:34" pos:end="255:42">num_insns</name></expr>]</index><index pos:start="255:44" pos:end="255:46">[<expr pos:start="255:45" pos:end="255:45"><name pos:start="255:45" pos:end="255:45">i</name></expr>]</index></name> <operator pos:start="255:48" pos:end="255:48">=</operator> <name pos:start="255:50" pos:end="255:50">a</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="261:30">case <expr pos:start="261:14" pos:end="261:29"><name pos:start="261:14" pos:end="261:29">INDEX_op_discard</name></expr>:</case>

            <expr_stmt pos:start="263:13" pos:end="263:48"><expr pos:start="263:13" pos:end="263:47"><call pos:start="263:13" pos:end="263:47"><name pos:start="263:13" pos:end="263:21">temp_dead</name><argument_list pos:start="263:22" pos:end="263:47">(<argument pos:start="263:23" pos:end="263:23"><expr pos:start="263:23" pos:end="263:23"><name pos:start="263:23" pos:end="263:23">s</name></expr></argument>, <argument pos:start="263:26" pos:end="263:46"><expr pos:start="263:26" pos:end="263:46"><call pos:start="263:26" pos:end="263:46"><name pos:start="263:26" pos:end="263:33">arg_temp</name><argument_list pos:start="263:34" pos:end="263:46">(<argument pos:start="263:35" pos:end="263:45"><expr pos:start="263:35" pos:end="263:45"><name pos:start="263:35" pos:end="263:45"><name pos:start="263:35" pos:end="263:36">op</name><operator pos:start="263:37" pos:end="263:38">-&gt;</operator><name pos:start="263:39" pos:end="263:42">args</name><index pos:start="263:43" pos:end="263:45">[<expr pos:start="263:44" pos:end="263:44"><literal type="number" pos:start="263:44" pos:end="263:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <case pos:start="267:9" pos:end="267:32">case <expr pos:start="267:14" pos:end="267:31"><name pos:start="267:14" pos:end="267:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="269:13" pos:end="269:54"><expr pos:start="269:13" pos:end="269:53"><call pos:start="269:13" pos:end="269:53"><name pos:start="269:13" pos:end="269:32">tcg_reg_alloc_bb_end</name><argument_list pos:start="269:33" pos:end="269:53">(<argument pos:start="269:34" pos:end="269:34"><expr pos:start="269:34" pos:end="269:34"><name pos:start="269:34" pos:end="269:34">s</name></expr></argument>, <argument pos:start="269:37" pos:end="269:52"><expr pos:start="269:37" pos:end="269:52"><name pos:start="269:37" pos:end="269:52"><name pos:start="269:37" pos:end="269:37">s</name><operator pos:start="269:38" pos:end="269:39">-&gt;</operator><name pos:start="269:40" pos:end="269:52">reserved_regs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:66"><expr pos:start="271:13" pos:end="271:65"><call pos:start="271:13" pos:end="271:65"><name pos:start="271:13" pos:end="271:25">tcg_out_label</name><argument_list pos:start="271:26" pos:end="271:65">(<argument pos:start="271:27" pos:end="271:27"><expr pos:start="271:27" pos:end="271:27"><name pos:start="271:27" pos:end="271:27">s</name></expr></argument>, <argument pos:start="271:30" pos:end="271:51"><expr pos:start="271:30" pos:end="271:51"><call pos:start="271:30" pos:end="271:51"><name pos:start="271:30" pos:end="271:38">arg_label</name><argument_list pos:start="271:39" pos:end="271:51">(<argument pos:start="271:40" pos:end="271:50"><expr pos:start="271:40" pos:end="271:50"><name pos:start="271:40" pos:end="271:50"><name pos:start="271:40" pos:end="271:41">op</name><operator pos:start="271:42" pos:end="271:43">-&gt;</operator><name pos:start="271:44" pos:end="271:47">args</name><index pos:start="271:48" pos:end="271:50">[<expr pos:start="271:49" pos:end="271:49"><literal type="number" pos:start="271:49" pos:end="271:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="271:54" pos:end="271:64"><expr pos:start="271:54" pos:end="271:64"><name pos:start="271:54" pos:end="271:64"><name pos:start="271:54" pos:end="271:54">s</name><operator pos:start="271:55" pos:end="271:56">-&gt;</operator><name pos:start="271:57" pos:end="271:64">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="273:13" pos:end="273:18">break;</break>

        <case pos:start="275:9" pos:end="275:27">case <expr pos:start="275:14" pos:end="275:26"><name pos:start="275:14" pos:end="275:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="277:13" pos:end="277:38"><expr pos:start="277:13" pos:end="277:37"><call pos:start="277:13" pos:end="277:37"><name pos:start="277:13" pos:end="277:30">tcg_reg_alloc_call</name><argument_list pos:start="277:31" pos:end="277:37">(<argument pos:start="277:32" pos:end="277:32"><expr pos:start="277:32" pos:end="277:32"><name pos:start="277:32" pos:end="277:32">s</name></expr></argument>, <argument pos:start="277:35" pos:end="277:36"><expr pos:start="277:35" pos:end="277:36"><name pos:start="277:35" pos:end="277:36">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="279:13" pos:end="279:18">break;</break>

        <default pos:start="281:9" pos:end="281:16">default:</default>

            <comment type="block" pos:start="283:13" pos:end="283:79">/* Sanity check that we've not introduced any unhandled opcodes. */</comment>

            <expr_stmt pos:start="285:13" pos:end="285:52"><expr pos:start="285:13" pos:end="285:51"><call pos:start="285:13" pos:end="285:51"><name pos:start="285:13" pos:end="285:28">tcg_debug_assert</name><argument_list pos:start="285:29" pos:end="285:51">(<argument pos:start="285:30" pos:end="285:50"><expr pos:start="285:30" pos:end="285:50"><call pos:start="285:30" pos:end="285:50"><name pos:start="285:30" pos:end="285:45">tcg_op_supported</name><argument_list pos:start="285:46" pos:end="285:50">(<argument pos:start="285:47" pos:end="285:49"><expr pos:start="285:47" pos:end="285:49"><name pos:start="285:47" pos:end="285:49">opc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="287:13" pos:end="291:47">/* Note: in order to speed up the code, it would be much

               faster to have specialized register allocator functions for

               some common argument patterns */</comment>

            <expr_stmt pos:start="293:13" pos:end="293:36"><expr pos:start="293:13" pos:end="293:35"><call pos:start="293:13" pos:end="293:35"><name pos:start="293:13" pos:end="293:28">tcg_reg_alloc_op</name><argument_list pos:start="293:29" pos:end="293:35">(<argument pos:start="293:30" pos:end="293:30"><expr pos:start="293:30" pos:end="293:30"><name pos:start="293:30" pos:end="293:30">s</name></expr></argument>, <argument pos:start="293:33" pos:end="293:34"><expr pos:start="293:33" pos:end="293:34"><name pos:start="293:33" pos:end="293:34">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        </block_content>}</block></switch>

<cpp:ifdef pos:start="299:1" pos:end="299:23">#<cpp:directive pos:start="299:2" pos:end="299:6">ifdef</cpp:directive> <name pos:start="299:8" pos:end="299:23">CONFIG_DEBUG_TCG</name></cpp:ifdef>

        <expr_stmt pos:start="301:9" pos:end="304:0"><expr pos:start="301:9" pos:end="301:21"><call pos:start="301:9" pos:end="301:21"><name pos:start="301:9" pos:end="301:18">check_regs</name><argument_list pos:start="301:19" pos:end="301:21">(<argument pos:start="301:20" pos:end="301:20"><expr pos:start="301:20" pos:end="301:20"><name pos:start="301:20" pos:end="301:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="303:1" pos:end="303:6">#<cpp:directive pos:start="303:2" pos:end="303:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="305:9" pos:end="311:73">/* Test for (pending) buffer overflow.  The assumption is that any

           one operation beginning below the high water mark cannot overrun

           the buffer completely.  Thus we can test for overflow after

           generating code without having to check during generation.  */</comment>

        <if_stmt pos:start="313:9" pos:end="317:9"><if pos:start="313:9" pos:end="317:9">if <condition pos:start="313:12" pos:end="313:66">(<expr pos:start="313:13" pos:end="313:65"><call pos:start="313:13" pos:end="313:65"><name pos:start="313:13" pos:end="313:20">unlikely</name><argument_list pos:start="313:21" pos:end="313:65">(<argument pos:start="313:22" pos:end="313:64"><expr pos:start="313:22" pos:end="313:64"><operator pos:start="313:22" pos:end="313:22">(</operator><name pos:start="313:23" pos:end="313:26">void</name> <operator pos:start="313:28" pos:end="313:28">*</operator><operator pos:start="313:29" pos:end="313:29">)</operator><name pos:start="313:30" pos:end="313:40"><name pos:start="313:30" pos:end="313:30">s</name><operator pos:start="313:31" pos:end="313:32">-&gt;</operator><name pos:start="313:33" pos:end="313:40">code_ptr</name></name> <operator pos:start="313:42" pos:end="313:42">&gt;</operator> <name pos:start="313:44" pos:end="313:64"><name pos:start="313:44" pos:end="313:44">s</name><operator pos:start="313:45" pos:end="313:46">-&gt;</operator><name pos:start="313:47" pos:end="313:64">code_gen_highwater</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:68" pos:end="317:9">{<block_content pos:start="315:13" pos:end="315:22">

            <return pos:start="315:13" pos:end="315:22">return <expr pos:start="315:20" pos:end="315:21"><operator pos:start="315:20" pos:end="315:20">-</operator><literal type="number" pos:start="315:21" pos:end="315:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="321:5" pos:end="321:37"><expr pos:start="321:5" pos:end="321:36"><call pos:start="321:5" pos:end="321:36"><name pos:start="321:5" pos:end="321:20">tcg_debug_assert</name><argument_list pos:start="321:21" pos:end="321:36">(<argument pos:start="321:22" pos:end="321:35"><expr pos:start="321:22" pos:end="321:35"><name pos:start="321:22" pos:end="321:30">num_insns</name> <operator pos:start="321:32" pos:end="321:33">&gt;=</operator> <literal type="number" pos:start="321:35" pos:end="321:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="330:0"><expr pos:start="323:5" pos:end="323:61"><name pos:start="323:5" pos:end="323:34"><name pos:start="323:5" pos:end="323:5">s</name><operator pos:start="323:6" pos:end="323:7">-&gt;</operator><name pos:start="323:8" pos:end="323:23">gen_insn_end_off</name><index pos:start="323:24" pos:end="323:34">[<expr pos:start="323:25" pos:end="323:33"><name pos:start="323:25" pos:end="323:33">num_insns</name></expr>]</index></name> <operator pos:start="323:36" pos:end="323:36">=</operator> <call pos:start="323:38" pos:end="323:61"><name pos:start="323:38" pos:end="323:58">tcg_current_code_size</name><argument_list pos:start="323:59" pos:end="323:61">(<argument pos:start="323:60" pos:end="323:60"><expr pos:start="323:60" pos:end="323:60"><name pos:start="323:60" pos:end="323:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="327:5" pos:end="327:54">/* Generate TB finalization at the end of block */</comment>

<cpp:ifdef pos:start="329:1" pos:end="329:34">#<cpp:directive pos:start="329:2" pos:end="329:6">ifdef</cpp:directive> <name pos:start="329:8" pos:end="329:34">TCG_TARGET_NEED_LDST_LABELS</name></cpp:ifdef>

    <if_stmt pos:start="331:5" pos:end="340:0"><if pos:start="331:5" pos:end="340:0">if <condition pos:start="331:8" pos:end="331:34">(<expr pos:start="331:9" pos:end="331:33"><operator pos:start="331:9" pos:end="331:9">!</operator><call pos:start="331:10" pos:end="331:33"><name pos:start="331:10" pos:end="331:30">tcg_out_ldst_finalize</name><argument_list pos:start="331:31" pos:end="331:33">(<argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><name pos:start="331:32" pos:end="331:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="331:36" pos:end="340:0">{<block_content pos:start="333:9" pos:end="333:18">

        <return pos:start="333:9" pos:end="333:18">return <expr pos:start="333:16" pos:end="333:17"><operator pos:start="333:16" pos:end="333:16">-</operator><literal type="number" pos:start="333:17" pos:end="333:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="337:1" pos:end="337:6">#<cpp:directive pos:start="337:2" pos:end="337:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="339:1" pos:end="339:34">#<cpp:directive pos:start="339:2" pos:end="339:6">ifdef</cpp:directive> <name pos:start="339:8" pos:end="339:34">TCG_TARGET_NEED_POOL_LABELS</name></cpp:ifdef>

    <if_stmt pos:start="341:5" pos:end="348:0"><if pos:start="341:5" pos:end="348:0">if <condition pos:start="341:8" pos:end="341:34">(<expr pos:start="341:9" pos:end="341:33"><operator pos:start="341:9" pos:end="341:9">!</operator><call pos:start="341:10" pos:end="341:33"><name pos:start="341:10" pos:end="341:30">tcg_out_pool_finalize</name><argument_list pos:start="341:31" pos:end="341:33">(<argument pos:start="341:32" pos:end="341:32"><expr pos:start="341:32" pos:end="341:32"><name pos:start="341:32" pos:end="341:32">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="341:36" pos:end="348:0">{<block_content pos:start="343:9" pos:end="343:18">

        <return pos:start="343:9" pos:end="343:18">return <expr pos:start="343:16" pos:end="343:17"><operator pos:start="343:16" pos:end="343:16">-</operator><literal type="number" pos:start="343:17" pos:end="343:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="351:5" pos:end="351:33">/* flush instruction cache */</comment>

    <expr_stmt pos:start="353:5" pos:end="353:71"><expr pos:start="353:5" pos:end="353:70"><call pos:start="353:5" pos:end="353:70"><name pos:start="353:5" pos:end="353:22">flush_icache_range</name><argument_list pos:start="353:23" pos:end="353:70">(<argument pos:start="353:24" pos:end="353:45"><expr pos:start="353:24" pos:end="353:45"><operator pos:start="353:24" pos:end="353:24">(</operator><name pos:start="353:25" pos:end="353:33">uintptr_t</name><operator pos:start="353:34" pos:end="353:34">)</operator><name pos:start="353:35" pos:end="353:45"><name pos:start="353:35" pos:end="353:35">s</name><operator pos:start="353:36" pos:end="353:37">-&gt;</operator><name pos:start="353:38" pos:end="353:45">code_buf</name></name></expr></argument>, <argument pos:start="353:48" pos:end="353:69"><expr pos:start="353:48" pos:end="353:69"><operator pos:start="353:48" pos:end="353:48">(</operator><name pos:start="353:49" pos:end="353:57">uintptr_t</name><operator pos:start="353:58" pos:end="353:58">)</operator><name pos:start="353:59" pos:end="353:69"><name pos:start="353:59" pos:end="353:59">s</name><operator pos:start="353:60" pos:end="353:61">-&gt;</operator><name pos:start="353:62" pos:end="353:69">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="357:5" pos:end="357:36">return <expr pos:start="357:12" pos:end="357:35"><call pos:start="357:12" pos:end="357:35"><name pos:start="357:12" pos:end="357:32">tcg_current_code_size</name><argument_list pos:start="357:33" pos:end="357:35">(<argument pos:start="357:34" pos:end="357:34"><expr pos:start="357:34" pos:end="357:34"><name pos:start="357:34" pos:end="357:34">s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
