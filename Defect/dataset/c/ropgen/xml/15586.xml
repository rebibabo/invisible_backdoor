<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15586.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:41">mirror_dirty_init</name><parameter_list pos:start="1:42" pos:end="1:60">(<parameter pos:start="1:43" pos:end="1:59"><decl pos:start="1:43" pos:end="1:59"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:56">MirrorBlockJob</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:22">sector_num</name></decl>, <decl pos:start="5:25" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:25" pos:end="5:27">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">base</name> <init pos:start="7:28" pos:end="7:36">= <expr pos:start="7:30" pos:end="7:36"><name pos:start="7:30" pos:end="7:36"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:36">= <expr pos:start="9:28" pos:end="9:36"><name pos:start="9:28" pos:end="9:36"><name pos:start="9:28" pos:end="9:28">s</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:36">source</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:31">target_bs</name> <init pos:start="11:33" pos:end="11:51">= <expr pos:start="11:35" pos:end="11:51"><call pos:start="11:35" pos:end="11:51"><name pos:start="11:35" pos:end="11:40">blk_bs</name><argument_list pos:start="11:41" pos:end="11:51">(<argument pos:start="11:42" pos:end="11:50"><expr pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:42">s</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:50">target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:44"><expr pos:start="17:5" pos:end="17:43"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:24"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:24">bdev_length</name></name> <operator pos:start="17:26" pos:end="17:26">/</operator> <name pos:start="17:28" pos:end="17:43">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="81:5"><if pos:start="21:5" pos:end="81:5">if <condition pos:start="21:8" pos:end="21:55">(<expr pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:12">base</name> <operator pos:start="21:14" pos:end="21:15">==</operator> <name pos:start="21:17" pos:end="21:20">NULL</name> <operator pos:start="21:22" pos:end="21:23">&amp;&amp;</operator> <operator pos:start="21:25" pos:end="21:25">!</operator><call pos:start="21:26" pos:end="21:54"><name pos:start="21:26" pos:end="21:43">bdrv_has_zero_init</name><argument_list pos:start="21:44" pos:end="21:54">(<argument pos:start="21:45" pos:end="21:53"><expr pos:start="21:45" pos:end="21:53"><name pos:start="21:45" pos:end="21:53">target_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:57" pos:end="81:5">{<block_content pos:start="23:9" pos:end="79:43">

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:57">(<expr pos:start="23:13" pos:end="23:56"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:56"><name pos:start="23:14" pos:end="23:45">bdrv_can_write_zeroes_with_unmap</name><argument_list pos:start="23:46" pos:end="23:56">(<argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:55">target_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:59" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:59"><expr pos:start="25:13" pos:end="25:58"><call pos:start="25:13" pos:end="25:58"><name pos:start="25:13" pos:end="25:33">bdrv_set_dirty_bitmap</name><argument_list pos:start="25:34" pos:end="25:58">(<argument pos:start="25:35" pos:end="25:49"><expr pos:start="25:35" pos:end="25:49"><name pos:start="25:35" pos:end="25:49"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:49">dirty_bitmap</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:52"><expr pos:start="25:52" pos:end="25:52"><literal type="number" pos:start="25:52" pos:end="25:52">0</literal></expr></argument>, <argument pos:start="25:55" pos:end="25:57"><expr pos:start="25:55" pos:end="25:57"><name pos:start="25:55" pos:end="25:57">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:34">initial_zeroing_ongoing</name></name> <operator pos:start="33:36" pos:end="33:36">=</operator> <name pos:start="33:38" pos:end="33:41">true</name></expr>;</expr_stmt>

        <for pos:start="35:9" pos:end="73:9">for <control pos:start="35:13" pos:end="35:48">(<init pos:start="35:14" pos:end="35:28"><expr pos:start="35:14" pos:end="35:27"><name pos:start="35:14" pos:end="35:23">sector_num</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <literal type="number" pos:start="35:27" pos:end="35:27">0</literal></expr>;</init> <condition pos:start="35:30" pos:end="35:46"><expr pos:start="35:30" pos:end="35:45"><name pos:start="35:30" pos:end="35:39">sector_num</name> <operator pos:start="35:41" pos:end="35:41">&lt;</operator> <name pos:start="35:43" pos:end="35:45">end</name></expr>;</condition> <incr/>)</control> <block pos:start="35:50" pos:end="73:9">{<block_content pos:start="37:13" pos:end="71:37">

            <decl_stmt pos:start="37:13" pos:end="39:78"><decl pos:start="37:13" pos:end="39:77"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:26">nb_sectors</name> <init pos:start="37:28" pos:end="39:77">= <expr pos:start="37:30" pos:end="39:77"><call pos:start="37:30" pos:end="39:77"><name pos:start="37:30" pos:end="37:32">MIN</name><argument_list pos:start="37:33" pos:end="39:77">(<argument pos:start="37:34" pos:end="37:49"><expr pos:start="37:34" pos:end="37:49"><name pos:start="37:34" pos:end="37:36">end</name> <operator pos:start="37:38" pos:end="37:38">-</operator> <name pos:start="37:40" pos:end="37:49">sector_num</name></expr></argument>,

                <argument pos:start="39:17" pos:end="39:76"><expr pos:start="39:17" pos:end="39:76"><call pos:start="39:17" pos:end="39:56"><name pos:start="39:17" pos:end="39:31">QEMU_ALIGN_DOWN</name><argument_list pos:start="39:32" pos:end="39:56">(<argument pos:start="39:33" pos:end="39:39"><expr pos:start="39:33" pos:end="39:39"><name pos:start="39:33" pos:end="39:39">INT_MAX</name></expr></argument>, <argument pos:start="39:42" pos:end="39:55"><expr pos:start="39:42" pos:end="39:55"><name pos:start="39:42" pos:end="39:55"><name pos:start="39:42" pos:end="39:42">s</name><operator pos:start="39:43" pos:end="39:44">-&gt;</operator><name pos:start="39:45" pos:end="39:55">granularity</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:58" pos:end="39:59">&gt;&gt;</operator> <name pos:start="39:61" pos:end="39:76">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><call pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:27">mirror_throttle</name><argument_list pos:start="43:28" pos:end="43:30">(<argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><name pos:start="43:29" pos:end="43:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:51">(<expr pos:start="47:17" pos:end="47:50"><call pos:start="47:17" pos:end="47:50"><name pos:start="47:17" pos:end="47:38">block_job_is_cancelled</name><argument_list pos:start="47:39" pos:end="47:50">(<argument pos:start="47:40" pos:end="47:49"><expr pos:start="47:40" pos:end="47:49"><operator pos:start="47:40" pos:end="47:40">&amp;</operator><name pos:start="47:41" pos:end="47:49"><name pos:start="47:41" pos:end="47:41">s</name><operator pos:start="47:42" pos:end="47:43">-&gt;</operator><name pos:start="47:44" pos:end="47:49">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:53" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:25">

                <expr_stmt pos:start="49:17" pos:end="49:51"><expr pos:start="49:17" pos:end="49:50"><name pos:start="49:17" pos:end="49:42"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:42">initial_zeroing_ongoing</name></name> <operator pos:start="49:44" pos:end="49:44">=</operator> <name pos:start="49:46" pos:end="49:50">false</name></expr>;</expr_stmt>

                <return pos:start="51:17" pos:end="51:25">return <expr pos:start="51:24" pos:end="51:24"><literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="57:13" pos:end="65:13"><if pos:start="57:13" pos:end="65:13">if <condition pos:start="57:16" pos:end="57:46">(<expr pos:start="57:17" pos:end="57:45"><name pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:28">in_flight</name></name> <operator pos:start="57:30" pos:end="57:31">&gt;=</operator> <name pos:start="57:33" pos:end="57:45">MAX_IN_FLIGHT</name></expr>)</condition> <block pos:start="57:48" pos:end="65:13">{<block_content pos:start="59:17" pos:end="63:25">

                <expr_stmt pos:start="59:17" pos:end="59:75"><expr pos:start="59:17" pos:end="59:74"><call pos:start="59:17" pos:end="59:74"><name pos:start="59:17" pos:end="59:34">trace_mirror_yield</name><argument_list pos:start="59:35" pos:end="59:74">(<argument pos:start="59:36" pos:end="59:36"><expr pos:start="59:36" pos:end="59:36"><name pos:start="59:36" pos:end="59:36">s</name></expr></argument>, <argument pos:start="59:39" pos:end="59:50"><expr pos:start="59:39" pos:end="59:50"><name pos:start="59:39" pos:end="59:50"><name pos:start="59:39" pos:end="59:39">s</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:50">in_flight</name></name></expr></argument>, <argument pos:start="59:53" pos:end="59:69"><expr pos:start="59:53" pos:end="59:69"><name pos:start="59:53" pos:end="59:69"><name pos:start="59:53" pos:end="59:53">s</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:69">buf_free_count</name></name></expr></argument>, <argument pos:start="59:72" pos:end="59:73"><expr pos:start="59:72" pos:end="59:73"><operator pos:start="59:72" pos:end="59:72">-</operator><literal type="number" pos:start="59:73" pos:end="59:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:38"><expr pos:start="61:17" pos:end="61:37"><call pos:start="61:17" pos:end="61:37"><name pos:start="61:17" pos:end="61:34">mirror_wait_for_io</name><argument_list pos:start="61:35" pos:end="61:37">(<argument pos:start="61:36" pos:end="61:36"><expr pos:start="61:36" pos:end="61:36"><name pos:start="61:36" pos:end="61:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="63:17" pos:end="63:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:72"><expr pos:start="69:13" pos:end="69:71"><call pos:start="69:13" pos:end="69:71"><name pos:start="69:13" pos:end="69:37">mirror_do_zero_or_discard</name><argument_list pos:start="69:38" pos:end="69:71">(<argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">s</name></expr></argument>, <argument pos:start="69:42" pos:end="69:51"><expr pos:start="69:42" pos:end="69:51"><name pos:start="69:42" pos:end="69:51">sector_num</name></expr></argument>, <argument pos:start="69:54" pos:end="69:63"><expr pos:start="69:54" pos:end="69:63"><name pos:start="69:54" pos:end="69:63">nb_sectors</name></expr></argument>, <argument pos:start="69:66" pos:end="69:70"><expr pos:start="69:66" pos:end="69:70"><name pos:start="69:66" pos:end="69:70">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:37"><expr pos:start="71:13" pos:end="71:36"><name pos:start="71:13" pos:end="71:22">sector_num</name> <operator pos:start="71:24" pos:end="71:25">+=</operator> <name pos:start="71:27" pos:end="71:36">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="77:9" pos:end="77:34"><expr pos:start="77:9" pos:end="77:33"><call pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:30">mirror_wait_for_all_io</name><argument_list pos:start="77:31" pos:end="77:33">(<argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><name pos:start="77:32" pos:end="77:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:43"><expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:34">initial_zeroing_ongoing</name></name> <operator pos:start="79:36" pos:end="79:36">=</operator> <name pos:start="79:38" pos:end="79:42">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:75">/* First part, loop on the sectors and initialize the dirty bitmap.  */</comment>

    <for pos:start="87:5" pos:end="129:5">for <control pos:start="87:9" pos:end="87:44">(<init pos:start="87:10" pos:end="87:24"><expr pos:start="87:10" pos:end="87:23"><name pos:start="87:10" pos:end="87:19">sector_num</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>;</init> <condition pos:start="87:26" pos:end="87:42"><expr pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:35">sector_num</name> <operator pos:start="87:37" pos:end="87:37">&lt;</operator> <name pos:start="87:39" pos:end="87:41">end</name></expr>;</condition> <incr/>)</control> <block pos:start="87:46" pos:end="129:5">{<block_content pos:start="91:9" pos:end="127:24">

        <comment type="block" pos:start="89:9" pos:end="89:63">/* Just to make sure we are not exceeding int limit. */</comment>

        <decl_stmt pos:start="91:9" pos:end="93:47"><decl pos:start="91:9" pos:end="93:46"><type pos:start="91:9" pos:end="91:11"><name pos:start="91:9" pos:end="91:11">int</name></type> <name pos:start="91:13" pos:end="91:22">nb_sectors</name> <init pos:start="91:24" pos:end="93:46">= <expr pos:start="91:26" pos:end="93:46"><call pos:start="91:26" pos:end="93:46"><name pos:start="91:26" pos:end="91:28">MIN</name><argument_list pos:start="91:29" pos:end="93:46">(<argument pos:start="91:30" pos:end="91:56"><expr pos:start="91:30" pos:end="91:56"><name pos:start="91:30" pos:end="91:36">INT_MAX</name> <operator pos:start="91:38" pos:end="91:39">&gt;&gt;</operator> <name pos:start="91:41" pos:end="91:56">BDRV_SECTOR_BITS</name></expr></argument>,

                             <argument pos:start="93:30" pos:end="93:45"><expr pos:start="93:30" pos:end="93:45"><name pos:start="93:30" pos:end="93:32">end</name> <operator pos:start="93:34" pos:end="93:34">-</operator> <name pos:start="93:36" pos:end="93:45">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:27"><expr pos:start="97:9" pos:end="97:26"><call pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:23">mirror_throttle</name><argument_list pos:start="97:24" pos:end="97:26">(<argument pos:start="97:25" pos:end="97:25"><expr pos:start="97:25" pos:end="97:25"><name pos:start="97:25" pos:end="97:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:47">(<expr pos:start="101:13" pos:end="101:46"><call pos:start="101:13" pos:end="101:46"><name pos:start="101:13" pos:end="101:34">block_job_is_cancelled</name><argument_list pos:start="101:35" pos:end="101:46">(<argument pos:start="101:36" pos:end="101:45"><expr pos:start="101:36" pos:end="101:45"><operator pos:start="101:36" pos:end="101:36">&amp;</operator><name pos:start="101:37" pos:end="101:45"><name pos:start="101:37" pos:end="101:37">s</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:49" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:21">

            <return pos:start="103:13" pos:end="103:21">return <expr pos:start="103:20" pos:end="103:20"><literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:76"><expr pos:start="109:9" pos:end="109:75"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:75"><name pos:start="109:15" pos:end="109:37">bdrv_is_allocated_above</name><argument_list pos:start="109:38" pos:end="109:75">(<argument pos:start="109:39" pos:end="109:40"><expr pos:start="109:39" pos:end="109:40"><name pos:start="109:39" pos:end="109:40">bs</name></expr></argument>, <argument pos:start="109:43" pos:end="109:46"><expr pos:start="109:43" pos:end="109:46"><name pos:start="109:43" pos:end="109:46">base</name></expr></argument>, <argument pos:start="109:49" pos:end="109:58"><expr pos:start="109:49" pos:end="109:58"><name pos:start="109:49" pos:end="109:58">sector_num</name></expr></argument>, <argument pos:start="109:61" pos:end="109:70"><expr pos:start="109:61" pos:end="109:70"><name pos:start="109:61" pos:end="109:70">nb_sectors</name></expr></argument>, <argument pos:start="109:73" pos:end="109:74"><expr pos:start="109:73" pos:end="109:74"><operator pos:start="109:73" pos:end="109:73">&amp;</operator><name pos:start="109:74" pos:end="109:74">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">&lt;</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><call pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:14">assert</name><argument_list pos:start="119:15" pos:end="119:21">(<argument pos:start="119:16" pos:end="119:20"><expr pos:start="119:16" pos:end="119:20"><name pos:start="119:16" pos:end="119:16">n</name> <operator pos:start="119:18" pos:end="119:18">&gt;</operator> <literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:21">(<expr pos:start="121:13" pos:end="121:20"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:18">==</operator> <literal type="number" pos:start="121:20" pos:end="121:20">1</literal></expr>)</condition> <block pos:start="121:23" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:66">

            <expr_stmt pos:start="123:13" pos:end="123:66"><expr pos:start="123:13" pos:end="123:65"><call pos:start="123:13" pos:end="123:65"><name pos:start="123:13" pos:end="123:33">bdrv_set_dirty_bitmap</name><argument_list pos:start="123:34" pos:end="123:65">(<argument pos:start="123:35" pos:end="123:49"><expr pos:start="123:35" pos:end="123:49"><name pos:start="123:35" pos:end="123:49"><name pos:start="123:35" pos:end="123:35">s</name><operator pos:start="123:36" pos:end="123:37">-&gt;</operator><name pos:start="123:38" pos:end="123:49">dirty_bitmap</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:61"><expr pos:start="123:52" pos:end="123:61"><name pos:start="123:52" pos:end="123:61">sector_num</name></expr></argument>, <argument pos:start="123:64" pos:end="123:64"><expr pos:start="123:64" pos:end="123:64"><name pos:start="123:64" pos:end="123:64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:24"><expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:18">sector_num</name> <operator pos:start="127:20" pos:end="127:21">+=</operator> <name pos:start="127:23" pos:end="127:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
