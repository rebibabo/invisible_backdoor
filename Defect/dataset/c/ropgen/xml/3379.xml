<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3379.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:35">_pte_check</name> <parameter_list pos:start="1:37" pos:end="5:61">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:46">mmu_ctx_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">ctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:63">is_64b</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:54"><decl pos:start="3:38" pos:end="3:54"><type pos:start="3:38" pos:end="3:54"><name pos:start="3:38" pos:end="3:49">target_ulong</name></type> <name pos:start="3:51" pos:end="3:54">pte0</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:73"><decl pos:start="3:57" pos:end="3:73"><type pos:start="3:57" pos:end="3:73"><name pos:start="3:57" pos:end="3:68">target_ulong</name></type> <name pos:start="3:70" pos:end="3:73">pte1</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:42"><decl pos:start="5:38" pos:end="5:42"><type pos:start="5:38" pos:end="5:42"><name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:42">h</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:50"><decl pos:start="5:45" pos:end="5:50"><type pos:start="5:45" pos:end="5:50"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:50">rw</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:60"><decl pos:start="5:53" pos:end="5:60"><type pos:start="5:53" pos:end="5:60"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:60">type</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="137:1">{<block_content pos:start="9:5" pos:end="135:15">

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:21">ptem</name></decl>, <decl pos:start="9:24" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:24" pos:end="9:28">mmask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">access</name></decl>, <decl pos:start="11:17" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:19">ret</name></decl>, <decl pos:start="11:22" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:25">pteh</name></decl>, <decl pos:start="11:28" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:31">ptev</name></decl>, <decl pos:start="11:34" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:34" pos:end="11:35">pp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:10">access</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="22:0"><expr pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <operator pos:start="17:11" pos:end="17:11">-</operator><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:40">/* Check validity and table match */</comment>

<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">is_64b</name></expr>)</condition> <block pos:start="23:17" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:31">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:12">ptev</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:35"><name pos:start="25:16" pos:end="25:29">pte64_is_valid</name><argument_list pos:start="25:30" pos:end="25:35">(<argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">pte0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:12">pteh</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:20">pte0</name> <operator pos:start="27:22" pos:end="27:23">&gt;&gt;</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal><operator pos:start="27:26" pos:end="27:26">)</operator> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="39:5">else

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <block pos:start="33:5" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:31">

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:12">ptev</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:33"><name pos:start="35:16" pos:end="35:27">pte_is_valid</name><argument_list pos:start="35:28" pos:end="35:33">(<argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">pte0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:12">pteh</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:20">pte0</name> <operator pos:start="37:22" pos:end="37:23">&gt;&gt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">6</literal><operator pos:start="37:26" pos:end="37:26">)</operator> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <literal type="number" pos:start="37:30" pos:end="37:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="41:5" pos:end="131:5"><if pos:start="41:5" pos:end="131:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:12">ptev</name> <operator pos:start="41:14" pos:end="41:15">&amp;&amp;</operator> <name pos:start="41:17" pos:end="41:17">h</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">pteh</name></expr>)</condition> <block pos:start="41:28" pos:end="131:5">{<block_content pos:start="47:9" pos:end="129:9">

        <comment type="block" pos:start="43:9" pos:end="43:30">/* Check vsid &amp; api */</comment>

<cpp:if pos:start="45:1" pos:end="45:25">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:11">defined</name><argument_list pos:start="45:12" pos:end="45:25">(<argument pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="47:9" pos:end="71:9"><if pos:start="47:9" pos:end="59:9">if <condition pos:start="47:12" pos:end="47:19">(<expr pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:18">is_64b</name></expr>)</condition> <block pos:start="47:21" pos:end="59:9">{<block_content pos:start="49:13" pos:end="57:39">

            <expr_stmt pos:start="49:13" pos:end="49:42"><expr pos:start="49:13" pos:end="49:41"><name pos:start="49:13" pos:end="49:16">ptem</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:23">pte0</name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <name pos:start="49:27" pos:end="49:41">PTE64_PTEM_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:37"><expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:17">mmask</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:36">PTE64_CHECK_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:67"><expr pos:start="53:13" pos:end="53:66"><name pos:start="53:13" pos:end="53:14">pp</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:22">pte1</name> <operator pos:start="53:24" pos:end="53:24">&amp;</operator> <literal type="number" pos:start="53:26" pos:end="53:35">0x00000003</literal><operator pos:start="53:36" pos:end="53:36">)</operator> <operator pos:start="53:38" pos:end="53:38">|</operator> <operator pos:start="53:40" pos:end="53:40">(</operator><operator pos:start="53:41" pos:end="53:41">(</operator><name pos:start="53:42" pos:end="53:45">pte1</name> <operator pos:start="53:47" pos:end="53:48">&gt;&gt;</operator> <literal type="number" pos:start="53:50" pos:end="53:51">61</literal><operator pos:start="53:52" pos:end="53:52">)</operator> <operator pos:start="53:54" pos:end="53:54">&amp;</operator> <literal type="number" pos:start="53:56" pos:end="53:65">0x00000004</literal><operator pos:start="53:66" pos:end="53:66">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:19">nx</name></name> <operator pos:start="55:21" pos:end="55:22">|=</operator> <operator pos:start="55:24" pos:end="55:24">(</operator><name pos:start="55:25" pos:end="55:28">pte1</name> <operator pos:start="55:30" pos:end="55:31">&gt;&gt;</operator> <literal type="number" pos:start="55:33" pos:end="55:33">2</literal><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:36">&amp;</operator> <literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="55:41" pos:end="55:60">/* No execute bit */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">ctx</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:19">nx</name></name> <operator pos:start="57:21" pos:end="57:22">|=</operator> <operator pos:start="57:24" pos:end="57:24">(</operator><name pos:start="57:25" pos:end="57:28">pte1</name> <operator pos:start="57:30" pos:end="57:31">&gt;&gt;</operator> <literal type="number" pos:start="57:33" pos:end="57:33">3</literal><operator pos:start="57:34" pos:end="57:34">)</operator> <operator pos:start="57:36" pos:end="57:36">&amp;</operator> <literal type="number" pos:start="57:38" pos:end="57:38">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:41" pos:end="57:60">/* Guarded bit    */</comment>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="71:9">else

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

        <block pos:start="63:9" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:35">

            <expr_stmt pos:start="65:13" pos:end="65:40"><expr pos:start="65:13" pos:end="65:39"><name pos:start="65:13" pos:end="65:16">ptem</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:23">pte0</name> <operator pos:start="65:25" pos:end="65:25">&amp;</operator> <name pos:start="65:27" pos:end="65:39">PTE_PTEM_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:35"><expr pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:17">mmask</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:34">PTE_CHECK_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:35"><expr pos:start="69:13" pos:end="69:34"><name pos:start="69:13" pos:end="69:14">pp</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:21">pte1</name> <operator pos:start="69:23" pos:end="69:23">&amp;</operator> <literal type="number" pos:start="69:25" pos:end="69:34">0x00000003</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="73:9" pos:end="129:9"><if pos:start="73:9" pos:end="129:9">if <condition pos:start="73:12" pos:end="73:30">(<expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:16">ptem</name> <operator pos:start="73:18" pos:end="73:19">==</operator> <name pos:start="73:21" pos:end="73:29"><name pos:start="73:21" pos:end="73:23">ctx</name><operator pos:start="73:24" pos:end="73:25">-&gt;</operator><name pos:start="73:26" pos:end="73:29">ptem</name></name></expr>)</condition> <block pos:start="73:32" pos:end="129:9">{<block_content pos:start="75:13" pos:end="127:13">

            <if_stmt pos:start="75:13" pos:end="89:13"><if pos:start="75:13" pos:end="89:13">if <condition pos:start="75:16" pos:end="75:47">(<expr pos:start="75:17" pos:end="75:46"><name pos:start="75:17" pos:end="75:26"><name pos:start="75:17" pos:end="75:19">ctx</name><operator pos:start="75:20" pos:end="75:21">-&gt;</operator><name pos:start="75:22" pos:end="75:26">raddr</name></name> <operator pos:start="75:28" pos:end="75:29">!=</operator> <operator pos:start="75:31" pos:end="75:31">(</operator><name pos:start="75:32" pos:end="75:43">target_ulong</name><operator pos:start="75:44" pos:end="75:44">)</operator><operator pos:start="75:45" pos:end="75:45">-</operator><literal type="number" pos:start="75:46" pos:end="75:46">1</literal></expr>)</condition> <block pos:start="75:49" pos:end="89:13">{<block_content pos:start="79:17" pos:end="87:17">

                <comment type="block" pos:start="77:17" pos:end="77:66">/* all matches should have equal RPN, WIMG &amp; PP */</comment>

                <if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if <condition pos:start="79:20" pos:end="79:59">(<expr pos:start="79:21" pos:end="79:58"><operator pos:start="79:21" pos:end="79:21">(</operator><name pos:start="79:22" pos:end="79:31"><name pos:start="79:22" pos:end="79:24">ctx</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:31">raddr</name></name> <operator pos:start="79:33" pos:end="79:33">&amp;</operator> <name pos:start="79:35" pos:end="79:39">mmask</name><operator pos:start="79:40" pos:end="79:40">)</operator> <operator pos:start="79:42" pos:end="79:43">!=</operator> <operator pos:start="79:45" pos:end="79:45">(</operator><name pos:start="79:46" pos:end="79:49">pte1</name> <operator pos:start="79:51" pos:end="79:51">&amp;</operator> <name pos:start="79:53" pos:end="79:57">mmask</name><operator pos:start="79:58" pos:end="79:58">)</operator></expr>)</condition> <block pos:start="79:61" pos:end="87:17">{<block_content pos:start="81:21" pos:end="85:30">

                    <if_stmt pos:start="81:21" pos:end="83:62"><if pos:start="81:21" pos:end="83:62">if <condition pos:start="81:24" pos:end="81:38">(<expr pos:start="81:25" pos:end="81:37"><name pos:start="81:25" pos:end="81:32">loglevel</name> <operator pos:start="81:34" pos:end="81:35">!=</operator> <literal type="number" pos:start="81:37" pos:end="81:37">0</literal></expr>)</condition><block type="pseudo" pos:start="83:25" pos:end="83:62"><block_content pos:start="83:25" pos:end="83:62">

                        <expr_stmt pos:start="83:25" pos:end="83:62"><expr pos:start="83:25" pos:end="83:61"><call pos:start="83:25" pos:end="83:61"><name pos:start="83:25" pos:end="83:31">fprintf</name><argument_list pos:start="83:32" pos:end="83:61">(<argument pos:start="83:33" pos:end="83:39"><expr pos:start="83:33" pos:end="83:39"><name pos:start="83:33" pos:end="83:39">logfile</name></expr></argument>, <argument pos:start="83:42" pos:end="83:60"><expr pos:start="83:42" pos:end="83:60"><literal type="string" pos:start="83:42" pos:end="83:60">"Bad RPN/WIMG/PP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return pos:start="85:21" pos:end="85:30">return <expr pos:start="85:28" pos:end="85:29"><operator pos:start="85:28" pos:end="85:28">-</operator><literal type="number" pos:start="85:29" pos:end="85:29">3</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="91:13" pos:end="91:39">/* Compute access rights */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:53"><expr pos:start="93:13" pos:end="93:52"><name pos:start="93:13" pos:end="93:18">access</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:52"><name pos:start="93:22" pos:end="93:29">pp_check</name><argument_list pos:start="93:30" pos:end="93:52">(<argument pos:start="93:31" pos:end="93:38"><expr pos:start="93:31" pos:end="93:38"><name pos:start="93:31" pos:end="93:38"><name pos:start="93:31" pos:end="93:33">ctx</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:38">key</name></name></expr></argument>, <argument pos:start="93:41" pos:end="93:42"><expr pos:start="93:41" pos:end="93:42"><name pos:start="93:41" pos:end="93:42">pp</name></expr></argument>, <argument pos:start="93:45" pos:end="93:51"><expr pos:start="93:45" pos:end="93:51"><name pos:start="93:45" pos:end="93:51"><name pos:start="93:45" pos:end="93:47">ctx</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:51">nx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="95:13" pos:end="95:52">/* Keep the matching PTE informations */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:15">ctx</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:22">raddr</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:29">pte1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:31"><expr pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:15">ctx</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:21">prot</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:30">access</name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:50"><expr pos:start="101:13" pos:end="101:49"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:49"><name pos:start="101:19" pos:end="101:28">check_prot</name><argument_list pos:start="101:29" pos:end="101:49">(<argument pos:start="101:30" pos:end="101:38"><expr pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:38"><name pos:start="101:30" pos:end="101:32">ctx</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:38">prot</name></name></expr></argument>, <argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">rw</name></expr></argument>, <argument pos:start="101:45" pos:end="101:48"><expr pos:start="101:45" pos:end="101:48"><name pos:start="101:45" pos:end="101:48">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="127:13"><if pos:start="103:13" pos:end="115:13">if <condition pos:start="103:16" pos:end="103:25">(<expr pos:start="103:17" pos:end="103:24"><name pos:start="103:17" pos:end="103:19">ret</name> <operator pos:start="103:21" pos:end="103:22">==</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>)</condition> <block pos:start="103:27" pos:end="115:13">{<block_content pos:start="109:17" pos:end="114:0">

                <comment type="block" pos:start="105:17" pos:end="105:36">/* Access granted */</comment>

<cpp:if pos:start="107:1" pos:end="107:23">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:23"><call pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:11">defined</name> <argument_list pos:start="107:13" pos:end="107:23">(<argument pos:start="107:14" pos:end="107:22"><expr pos:start="107:14" pos:end="107:22"><name pos:start="107:14" pos:end="107:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="109:17" pos:end="114:0"><if pos:start="109:17" pos:end="114:0">if <condition pos:start="109:20" pos:end="109:34">(<expr pos:start="109:21" pos:end="109:33"><name pos:start="109:21" pos:end="109:28">loglevel</name> <operator pos:start="109:30" pos:end="109:31">!=</operator> <literal type="number" pos:start="109:33" pos:end="109:33">0</literal></expr>)</condition><block type="pseudo" pos:start="111:21" pos:end="114:0"><block_content pos:start="111:21" pos:end="114:0">

                    <expr_stmt pos:start="111:21" pos:end="114:0"><expr pos:start="111:21" pos:end="111:62"><call pos:start="111:21" pos:end="111:62"><name pos:start="111:21" pos:end="111:27">fprintf</name><argument_list pos:start="111:28" pos:end="111:62">(<argument pos:start="111:29" pos:end="111:35"><expr pos:start="111:29" pos:end="111:35"><name pos:start="111:29" pos:end="111:35">logfile</name></expr></argument>, <argument pos:start="111:38" pos:end="111:61"><expr pos:start="111:38" pos:end="111:61"><literal type="string" pos:start="111:38" pos:end="111:61">"PTE access granted !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="127:13">else <block pos:start="115:20" pos:end="127:13">{<block_content pos:start="121:17" pos:end="126:0">

                <comment type="block" pos:start="117:17" pos:end="117:44">/* Access right violation */</comment>

<cpp:if pos:start="119:1" pos:end="119:23">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:23"><call pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:11">defined</name> <argument_list pos:start="119:13" pos:end="119:23">(<argument pos:start="119:14" pos:end="119:22"><expr pos:start="119:14" pos:end="119:22"><name pos:start="119:14" pos:end="119:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="121:17" pos:end="126:0"><if pos:start="121:17" pos:end="126:0">if <condition pos:start="121:20" pos:end="121:34">(<expr pos:start="121:21" pos:end="121:33"><name pos:start="121:21" pos:end="121:28">loglevel</name> <operator pos:start="121:30" pos:end="121:31">!=</operator> <literal type="number" pos:start="121:33" pos:end="121:33">0</literal></expr>)</condition><block type="pseudo" pos:start="123:21" pos:end="126:0"><block_content pos:start="123:21" pos:end="126:0">

                    <expr_stmt pos:start="123:21" pos:end="126:0"><expr pos:start="123:21" pos:end="123:61"><call pos:start="123:21" pos:end="123:61"><name pos:start="123:21" pos:end="123:27">fprintf</name><argument_list pos:start="123:28" pos:end="123:61">(<argument pos:start="123:29" pos:end="123:35"><expr pos:start="123:29" pos:end="123:35"><name pos:start="123:29" pos:end="123:35">logfile</name></expr></argument>, <argument pos:start="123:38" pos:end="123:60"><expr pos:start="123:38" pos:end="123:60"><literal type="string" pos:start="123:38" pos:end="123:60">"PTE access rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="125:1" pos:end="125:6">#<cpp:directive pos:start="125:2" pos:end="125:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="135:5" pos:end="135:15">return <expr pos:start="135:12" pos:end="135:14"><name pos:start="135:12" pos:end="135:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
