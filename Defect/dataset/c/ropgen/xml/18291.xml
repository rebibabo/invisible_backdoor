<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18291.c" pos:tabs="8"><function pos:start="1:1" pos:end="335:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">escape124_decode_frame</name><parameter_list pos:start="1:34" pos:end="5:50">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:44"><decl pos:start="3:35" pos:end="3:44"><type pos:start="3:35" pos:end="3:44"><name pos:start="3:35" pos:end="3:38">void</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:44">data</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:49">int</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:60">got_frame</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:49"><decl pos:start="5:35" pos:end="5:49"><type pos:start="5:35" pos:end="5:49"><name pos:start="5:35" pos:end="5:42">AVPacket</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:49">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="335:1">{<block_content pos:start="9:5" pos:end="333:22">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">Escape124Context</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:18">frame</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">data</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:24">frame_flags</name></decl>, <decl pos:start="19:27" pos:end="19:36"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:27" pos:end="19:36">frame_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:14"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:14">i</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="29:63"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">unsigned</name></type> <name pos:start="25:14" pos:end="25:29">superblock_index</name></decl>, <decl pos:start="25:32" pos:end="25:43"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:32" pos:end="25:39">cb_index</name> <init pos:start="25:41" pos:end="25:43">= <expr pos:start="25:43" pos:end="25:43"><literal type="number" pos:start="25:43" pos:end="25:43">1</literal></expr></init></decl>,

             <decl pos:start="27:14" pos:end="27:37"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="27:14" pos:end="27:33">superblock_col_index</name> <init pos:start="27:35" pos:end="27:37">= <expr pos:start="27:37" pos:end="27:37"><literal type="number" pos:start="27:37" pos:end="27:37">0</literal></expr></init></decl>,

             <decl pos:start="29:14" pos:end="29:51"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="29:14" pos:end="29:32">superblocks_per_row</name> <init pos:start="29:34" pos:end="29:51">= <expr pos:start="29:36" pos:end="29:51"><name pos:start="29:36" pos:end="29:47"><name pos:start="29:36" pos:end="29:40">avctx</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:47">width</name></name> <operator pos:start="29:49" pos:end="29:49">/</operator> <literal type="number" pos:start="29:51" pos:end="29:51">8</literal></expr></init></decl>, <decl pos:start="29:54" pos:end="29:62"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="29:54" pos:end="29:57">skip</name> <init pos:start="29:59" pos:end="29:62">= <expr pos:start="29:61" pos:end="29:62"><operator pos:start="29:61" pos:end="29:61">-</operator><literal type="number" pos:start="29:62" pos:end="29:62">1</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="33:5" pos:end="33:46"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:12">uint16_t</name><modifier pos:start="33:13" pos:end="33:13">*</modifier></type> <name pos:start="33:15" pos:end="33:28">old_frame_data</name></decl>, <decl pos:start="33:31" pos:end="33:45"><type ref="prev" pos:start="33:5" pos:end="33:13"><modifier pos:start="33:31" pos:end="33:31">*</modifier></type><name pos:start="33:32" pos:end="33:45">new_frame_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:36"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">unsigned</name></type> <name pos:start="35:14" pos:end="35:23">old_stride</name></decl>, <decl pos:start="35:26" pos:end="35:35"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:26" pos:end="35:35">new_stride</name></decl>;</decl_stmt>



    <decl_stmt pos:start="39:5" pos:end="39:12"><decl pos:start="39:5" pos:end="39:11"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="43:5" pos:end="45:19"><if pos:start="43:5" pos:end="45:19">if <condition pos:start="43:8" pos:end="43:66">(<expr pos:start="43:9" pos:end="43:65"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:12">ret</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:60"><name pos:start="43:16" pos:end="43:29">init_get_bits8</name><argument_list pos:start="43:30" pos:end="43:60">(<argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><operator pos:start="43:31" pos:end="43:31">&amp;</operator><name pos:start="43:32" pos:end="43:33">gb</name></expr></argument>, <argument pos:start="43:36" pos:end="43:46"><expr pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:46"><name pos:start="43:36" pos:end="43:40">avpkt</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:46">data</name></name></expr></argument>, <argument pos:start="43:49" pos:end="43:59"><expr pos:start="43:49" pos:end="43:59"><name pos:start="43:49" pos:end="43:59"><name pos:start="43:49" pos:end="43:53">avpkt</name><operator pos:start="43:54" pos:end="43:55">-&gt;</operator><name pos:start="43:56" pos:end="43:59">size</name></name></expr></argument>)</argument_list></call><operator pos:start="43:61" pos:end="43:61">)</operator> <operator pos:start="43:63" pos:end="43:63">&lt;</operator> <literal type="number" pos:start="43:65" pos:end="43:65">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:19"><block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="49:5" pos:end="49:62">// This call also guards the potential depth reads for the</comment>

    <comment type="line" pos:start="51:5" pos:end="51:26">// codebook unpacking.</comment>

    <if_stmt pos:start="53:5" pos:end="55:18"><if pos:start="53:5" pos:end="55:18">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:33"><name pos:start="53:10" pos:end="53:24">can_safely_read</name><argument_list pos:start="53:25" pos:end="53:33">(<argument pos:start="53:26" pos:end="53:28"><expr pos:start="53:26" pos:end="53:28"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:28">gb</name></expr></argument>, <argument pos:start="53:31" pos:end="53:32"><expr pos:start="53:31" pos:end="53:32"><literal type="number" pos:start="53:31" pos:end="53:32">64</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:18"><block_content pos:start="55:9" pos:end="55:18">

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:15">frame_flags</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:40"><name pos:start="59:19" pos:end="59:31">get_bits_long</name><argument_list pos:start="59:32" pos:end="59:40">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:35">gb</name></expr></argument>, <argument pos:start="59:38" pos:end="59:39"><expr pos:start="59:38" pos:end="59:39"><literal type="number" pos:start="59:38" pos:end="59:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:14">frame_size</name>  <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:40"><name pos:start="61:19" pos:end="61:31">get_bits_long</name><argument_list pos:start="61:32" pos:end="61:40">(<argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><operator pos:start="61:33" pos:end="61:33">&amp;</operator><name pos:start="61:34" pos:end="61:35">gb</name></expr></argument>, <argument pos:start="61:38" pos:end="61:39"><expr pos:start="61:38" pos:end="61:39"><literal type="number" pos:start="61:38" pos:end="61:39">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="65:5" pos:end="65:33">// Leave last frame unchanged</comment>

    <comment type="line" pos:start="67:5" pos:end="67:71">// FIXME: Is this necessary?  I haven't seen it in any real samples</comment>

    <if_stmt pos:start="69:5" pos:end="91:5"><if pos:start="69:5" pos:end="91:5">if <condition pos:start="69:8" pos:end="69:61">(<expr pos:start="69:9" pos:end="69:60"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">(</operator><name pos:start="69:11" pos:end="69:21">frame_flags</name> <operator pos:start="69:23" pos:end="69:23">&amp;</operator> <literal type="number" pos:start="69:25" pos:end="69:29">0x114</literal><operator pos:start="69:30" pos:end="69:30">)</operator> <operator pos:start="69:32" pos:end="69:33">||</operator> <operator pos:start="69:35" pos:end="69:35">!</operator><operator pos:start="69:36" pos:end="69:36">(</operator><name pos:start="69:37" pos:end="69:47">frame_flags</name> <operator pos:start="69:49" pos:end="69:49">&amp;</operator> <literal type="number" pos:start="69:51" pos:end="69:59">0x7800000</literal><operator pos:start="69:60" pos:end="69:60">)</operator></expr>)</condition> <block pos:start="69:63" pos:end="91:5">{<block_content pos:start="71:9" pos:end="89:26">

        <if_stmt pos:start="71:9" pos:end="73:39"><if pos:start="71:9" pos:end="73:39">if <condition pos:start="71:12" pos:end="71:30">(<expr pos:start="71:13" pos:end="71:29"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:29"><name pos:start="71:14" pos:end="71:14">s</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">frame</name><operator pos:start="71:22" pos:end="71:22">.</operator><name pos:start="71:23" pos:end="71:26">data</name><index pos:start="71:27" pos:end="71:29">[<expr pos:start="71:28" pos:end="71:28"><literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:39"><block_content pos:start="73:13" pos:end="73:39">

            <return pos:start="73:13" pos:end="73:39">return <expr pos:start="73:20" pos:end="73:38"><name pos:start="73:20" pos:end="73:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:56"><expr pos:start="77:9" pos:end="77:55"><call pos:start="77:9" pos:end="77:55"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:55">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="77:37" pos:end="77:54"><expr pos:start="77:37" pos:end="77:54"><literal type="string" pos:start="77:37" pos:end="77:54">"Skipping frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><operator pos:start="81:9" pos:end="81:9">*</operator><name pos:start="81:10" pos:end="81:18">got_frame</name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:22">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="85:23"><if pos:start="83:9" pos:end="85:23">if <condition pos:start="83:12" pos:end="83:55">(<expr pos:start="83:13" pos:end="83:54"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">ret</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="83:49"><name pos:start="83:20" pos:end="83:31">av_frame_ref</name><argument_list pos:start="83:32" pos:end="83:49">(<argument pos:start="83:33" pos:end="83:37"><expr pos:start="83:33" pos:end="83:37"><name pos:start="83:33" pos:end="83:37">frame</name></expr></argument>, <argument pos:start="83:40" pos:end="83:48"><expr pos:start="83:40" pos:end="83:48"><operator pos:start="83:40" pos:end="83:40">&amp;</operator><name pos:start="83:41" pos:end="83:48"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:48">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="83:50" pos:end="83:50">)</operator> <operator pos:start="83:52" pos:end="83:52">&lt;</operator> <literal type="number" pos:start="83:54" pos:end="83:54">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:23"><block_content pos:start="85:13" pos:end="85:23">

            <return pos:start="85:13" pos:end="85:23">return <expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <return pos:start="89:9" pos:end="89:26">return <expr pos:start="89:16" pos:end="89:25"><name pos:start="89:16" pos:end="89:25">frame_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="95:5" pos:end="147:5">for <control pos:start="95:9" pos:end="95:27">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:21"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:19">&lt;</operator> <literal type="number" pos:start="95:21" pos:end="95:21">3</literal></expr>;</condition> <incr pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:24">i</name><operator pos:start="95:25" pos:end="95:26">++</operator></expr></incr>)</control> <block pos:start="95:29" pos:end="147:5">{<block_content pos:start="97:9" pos:end="145:9">

        <if_stmt pos:start="97:9" pos:end="145:9"><if pos:start="97:9" pos:end="145:9">if <condition pos:start="97:12" pos:end="97:42">(<expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:23">frame_flags</name> <operator pos:start="97:25" pos:end="97:25">&amp;</operator> <operator pos:start="97:27" pos:end="97:27">(</operator><literal type="number" pos:start="97:28" pos:end="97:28">1</literal> <operator pos:start="97:30" pos:end="97:31">&lt;&lt;</operator> <operator pos:start="97:33" pos:end="97:33">(</operator><literal type="number" pos:start="97:34" pos:end="97:37">17</literal> <operator pos:start="97:37" pos:end="97:37">+</operator> <name pos:start="97:39" pos:end="97:39">i</name><operator pos:start="97:40" pos:end="97:40">)</operator><operator pos:start="97:41" pos:end="97:41">)</operator></expr>)</condition> <block pos:start="97:44" pos:end="145:9">{<block_content pos:start="99:13" pos:end="143:26">

            <decl_stmt pos:start="99:13" pos:end="99:39"><decl pos:start="99:13" pos:end="99:29"><type pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:20">unsigned</name></type> <name pos:start="99:22" pos:end="99:29">cb_depth</name></decl>, <decl pos:start="99:32" pos:end="99:38"><type ref="prev" pos:start="99:13" pos:end="99:20"/><name pos:start="99:32" pos:end="99:38">cb_size</name></decl>;</decl_stmt>

            <if_stmt pos:start="101:13" pos:end="135:13"><if pos:start="101:13" pos:end="111:13">if <condition pos:start="101:16" pos:end="101:23">(<expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:17">i</name> <operator pos:start="101:19" pos:end="101:20">==</operator> <literal type="number" pos:start="101:22" pos:end="101:22">2</literal></expr>)</condition> <block pos:start="101:25" pos:end="111:13">{<block_content pos:start="107:17" pos:end="109:52">

                <comment type="line" pos:start="103:17" pos:end="103:68">// This codebook can be cut off at places other than</comment>

                <comment type="line" pos:start="105:17" pos:end="105:70">// powers of 2, leaving some of the entries undefined.</comment>

                <expr_stmt pos:start="107:17" pos:end="107:49"><expr pos:start="107:17" pos:end="107:48"><name pos:start="107:17" pos:end="107:23">cb_size</name> <operator pos:start="107:25" pos:end="107:25">=</operator> <call pos:start="107:27" pos:end="107:48"><name pos:start="107:27" pos:end="107:39">get_bits_long</name><argument_list pos:start="107:40" pos:end="107:48">(<argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><operator pos:start="107:41" pos:end="107:41">&amp;</operator><name pos:start="107:42" pos:end="107:43">gb</name></expr></argument>, <argument pos:start="107:46" pos:end="107:47"><expr pos:start="107:46" pos:end="107:47"><literal type="number" pos:start="107:46" pos:end="107:47">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:52"><expr pos:start="109:17" pos:end="109:51"><name pos:start="109:17" pos:end="109:24">cb_depth</name> <operator pos:start="109:26" pos:end="109:26">=</operator> <call pos:start="109:28" pos:end="109:47"><name pos:start="109:28" pos:end="109:34">av_log2</name><argument_list pos:start="109:35" pos:end="109:47">(<argument pos:start="109:36" pos:end="109:46"><expr pos:start="109:36" pos:end="109:46"><name pos:start="109:36" pos:end="109:42">cb_size</name> <operator pos:start="109:44" pos:end="109:44">-</operator> <literal type="number" pos:start="109:46" pos:end="109:46">1</literal></expr></argument>)</argument_list></call> <operator pos:start="109:49" pos:end="109:49">+</operator> <literal type="number" pos:start="109:51" pos:end="109:51">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="111:15" pos:end="135:13">else <block pos:start="111:20" pos:end="135:13">{<block_content pos:start="113:17" pos:end="133:17">

                <expr_stmt pos:start="113:17" pos:end="113:44"><expr pos:start="113:17" pos:end="113:43"><name pos:start="113:17" pos:end="113:24">cb_depth</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <call pos:start="113:28" pos:end="113:43"><name pos:start="113:28" pos:end="113:35">get_bits</name><argument_list pos:start="113:36" pos:end="113:43">(<argument pos:start="113:37" pos:end="113:39"><expr pos:start="113:37" pos:end="113:39"><operator pos:start="113:37" pos:end="113:37">&amp;</operator><name pos:start="113:38" pos:end="113:39">gb</name></expr></argument>, <argument pos:start="113:42" pos:end="113:42"><expr pos:start="113:42" pos:end="113:42"><literal type="number" pos:start="113:42" pos:end="113:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="133:17"><if pos:start="115:17" pos:end="123:17">if <condition pos:start="115:20" pos:end="115:27">(<expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:21">i</name> <operator pos:start="115:23" pos:end="115:24">==</operator> <literal type="number" pos:start="115:26" pos:end="115:26">0</literal></expr>)</condition> <block pos:start="115:29" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:44">

                    <comment type="line" pos:start="117:21" pos:end="117:76">// This is the most basic codebook: pow(2,depth) entries</comment>

                    <comment type="line" pos:start="119:21" pos:end="119:45">// for a depth-length key</comment>

                    <expr_stmt pos:start="121:21" pos:end="121:44"><expr pos:start="121:21" pos:end="121:43"><name pos:start="121:21" pos:end="121:27">cb_size</name> <operator pos:start="121:29" pos:end="121:29">=</operator> <literal type="number" pos:start="121:31" pos:end="121:31">1</literal> <operator pos:start="121:33" pos:end="121:34">&lt;&lt;</operator> <name pos:start="121:36" pos:end="121:43">cb_depth</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="123:19" pos:end="133:17">else <block pos:start="123:24" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:61">

                    <comment type="line" pos:start="125:21" pos:end="125:58">// This codebook varies per superblock</comment>

                    <comment type="line" pos:start="127:21" pos:end="127:73">// FIXME: I don't think this handles integer overflow</comment>

                    <comment type="line" pos:start="129:21" pos:end="129:31">// properly</comment>

                    <expr_stmt pos:start="131:21" pos:end="131:61"><expr pos:start="131:21" pos:end="131:60"><name pos:start="131:21" pos:end="131:27">cb_size</name> <operator pos:start="131:29" pos:end="131:29">=</operator> <name pos:start="131:31" pos:end="131:48"><name pos:start="131:31" pos:end="131:31">s</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:48">num_superblocks</name></name> <operator pos:start="131:50" pos:end="131:51">&lt;&lt;</operator> <name pos:start="131:53" pos:end="131:60">cb_depth</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:44"><expr pos:start="137:13" pos:end="137:43"><call pos:start="137:13" pos:end="137:43"><name pos:start="137:13" pos:end="137:19">av_free</name><argument_list pos:start="137:20" pos:end="137:43">(<argument pos:start="137:21" pos:end="137:42"><expr pos:start="137:21" pos:end="137:42"><name pos:start="137:21" pos:end="137:35"><name pos:start="137:21" pos:end="137:21">s</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:32">codebooks</name><index pos:start="137:33" pos:end="137:35">[<expr pos:start="137:34" pos:end="137:34"><name pos:start="137:34" pos:end="137:34">i</name></expr>]</index></name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:42">blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:70"><expr pos:start="139:13" pos:end="139:69"><name pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:24">codebooks</name><index pos:start="139:25" pos:end="139:27">[<expr pos:start="139:26" pos:end="139:26"><name pos:start="139:26" pos:end="139:26">i</name></expr>]</index></name> <operator pos:start="139:29" pos:end="139:29">=</operator> <call pos:start="139:31" pos:end="139:69"><name pos:start="139:31" pos:end="139:45">unpack_codebook</name><argument_list pos:start="139:46" pos:end="139:69">(<argument pos:start="139:47" pos:end="139:49"><expr pos:start="139:47" pos:end="139:49"><operator pos:start="139:47" pos:end="139:47">&amp;</operator><name pos:start="139:48" pos:end="139:49">gb</name></expr></argument>, <argument pos:start="139:52" pos:end="139:59"><expr pos:start="139:52" pos:end="139:59"><name pos:start="139:52" pos:end="139:59">cb_depth</name></expr></argument>, <argument pos:start="139:62" pos:end="139:68"><expr pos:start="139:62" pos:end="139:68"><name pos:start="139:62" pos:end="139:68">cb_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="143:26"><if pos:start="141:13" pos:end="143:26">if <condition pos:start="141:16" pos:end="141:40">(<expr pos:start="141:17" pos:end="141:39"><operator pos:start="141:17" pos:end="141:17">!</operator><name pos:start="141:18" pos:end="141:32"><name pos:start="141:18" pos:end="141:18">s</name><operator pos:start="141:19" pos:end="141:20">-&gt;</operator><name pos:start="141:21" pos:end="141:29">codebooks</name><index pos:start="141:30" pos:end="141:32">[<expr pos:start="141:31" pos:end="141:31"><name pos:start="141:31" pos:end="141:31">i</name></expr>]</index></name><operator pos:start="141:33" pos:end="141:33">.</operator><name pos:start="141:34" pos:end="141:39">blocks</name></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:26"><block_content pos:start="143:17" pos:end="143:26">

                <return pos:start="143:17" pos:end="143:26">return <expr pos:start="143:24" pos:end="143:25"><operator pos:start="143:24" pos:end="143:24">-</operator><literal type="number" pos:start="143:25" pos:end="143:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="151:5" pos:end="153:19"><if pos:start="151:5" pos:end="153:19">if <condition pos:start="151:8" pos:end="151:72">(<expr pos:start="151:9" pos:end="151:71"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:12">ret</name> <operator pos:start="151:14" pos:end="151:14">=</operator> <call pos:start="151:16" pos:end="151:66"><name pos:start="151:16" pos:end="151:28">ff_get_buffer</name><argument_list pos:start="151:29" pos:end="151:66">(<argument pos:start="151:30" pos:end="151:34"><expr pos:start="151:30" pos:end="151:34"><name pos:start="151:30" pos:end="151:34">avctx</name></expr></argument>, <argument pos:start="151:37" pos:end="151:41"><expr pos:start="151:37" pos:end="151:41"><name pos:start="151:37" pos:end="151:41">frame</name></expr></argument>, <argument pos:start="151:44" pos:end="151:65"><expr pos:start="151:44" pos:end="151:65"><name pos:start="151:44" pos:end="151:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="151:67" pos:end="151:67">)</operator> <operator pos:start="151:69" pos:end="151:69">&lt;</operator> <literal type="number" pos:start="151:71" pos:end="151:71">0</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:19"><block_content pos:start="153:9" pos:end="153:19">

        <return pos:start="153:9" pos:end="153:19">return <expr pos:start="153:16" pos:end="153:18"><name pos:start="153:16" pos:end="153:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:47"><expr pos:start="157:5" pos:end="157:46"><name pos:start="157:5" pos:end="157:18">new_frame_data</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <operator pos:start="157:22" pos:end="157:22">(</operator><name pos:start="157:23" pos:end="157:30">uint16_t</name><operator pos:start="157:31" pos:end="157:31">*</operator><operator pos:start="157:32" pos:end="157:32">)</operator><name pos:start="157:33" pos:end="157:46"><name pos:start="157:33" pos:end="157:37">frame</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:43">data</name><index pos:start="157:44" pos:end="157:46">[<expr pos:start="157:45" pos:end="157:45"><literal type="number" pos:start="157:45" pos:end="157:45">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:40"><expr pos:start="159:5" pos:end="159:39"><name pos:start="159:5" pos:end="159:14">new_stride</name> <operator pos:start="159:16" pos:end="159:16">=</operator> <name pos:start="159:18" pos:end="159:35"><name pos:start="159:18" pos:end="159:22">frame</name><operator pos:start="159:23" pos:end="159:24">-&gt;</operator><name pos:start="159:25" pos:end="159:32">linesize</name><index pos:start="159:33" pos:end="159:35">[<expr pos:start="159:34" pos:end="159:34"><literal type="number" pos:start="159:34" pos:end="159:34">0</literal></expr>]</index></name> <operator pos:start="159:37" pos:end="159:37">/</operator> <literal type="number" pos:start="159:39" pos:end="159:39">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:49"><expr pos:start="161:5" pos:end="161:48"><name pos:start="161:5" pos:end="161:18">old_frame_data</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <operator pos:start="161:22" pos:end="161:22">(</operator><name pos:start="161:23" pos:end="161:30">uint16_t</name><operator pos:start="161:31" pos:end="161:31">*</operator><operator pos:start="161:32" pos:end="161:32">)</operator><name pos:start="161:33" pos:end="161:48"><name pos:start="161:33" pos:end="161:33">s</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:40">frame</name><operator pos:start="161:41" pos:end="161:41">.</operator><name pos:start="161:42" pos:end="161:45">data</name><index pos:start="161:46" pos:end="161:48">[<expr pos:start="161:47" pos:end="161:47"><literal type="number" pos:start="161:47" pos:end="161:47">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:42"><expr pos:start="163:5" pos:end="163:41"><name pos:start="163:5" pos:end="163:14">old_stride</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <name pos:start="163:18" pos:end="163:37"><name pos:start="163:18" pos:end="163:18">s</name><operator pos:start="163:19" pos:end="163:20">-&gt;</operator><name pos:start="163:21" pos:end="163:25">frame</name><operator pos:start="163:26" pos:end="163:26">.</operator><name pos:start="163:27" pos:end="163:34">linesize</name><index pos:start="163:35" pos:end="163:37">[<expr pos:start="163:36" pos:end="163:36"><literal type="number" pos:start="163:36" pos:end="163:36">0</literal></expr>]</index></name> <operator pos:start="163:39" pos:end="163:39">/</operator> <literal type="number" pos:start="163:41" pos:end="163:41">2</literal></expr>;</expr_stmt>



    <for pos:start="167:5" pos:end="309:5">for <control pos:start="167:9" pos:end="169:28">(<init pos:start="167:10" pos:end="167:30"><expr pos:start="167:10" pos:end="167:29"><name pos:start="167:10" pos:end="167:25">superblock_index</name> <operator pos:start="167:27" pos:end="167:27">=</operator> <literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr>;</init> <condition pos:start="167:32" pos:end="167:69"><expr pos:start="167:32" pos:end="167:68"><name pos:start="167:32" pos:end="167:47">superblock_index</name> <operator pos:start="167:49" pos:end="167:49">&lt;</operator> <name pos:start="167:51" pos:end="167:68"><name pos:start="167:51" pos:end="167:51">s</name><operator pos:start="167:52" pos:end="167:53">-&gt;</operator><name pos:start="167:54" pos:end="167:68">num_superblocks</name></name></expr>;</condition>

         <incr pos:start="169:10" pos:end="169:27"><expr pos:start="169:10" pos:end="169:27"><name pos:start="169:10" pos:end="169:25">superblock_index</name><operator pos:start="169:26" pos:end="169:27">++</operator></expr></incr>)</control> <block pos:start="169:30" pos:end="309:5">{<block_content pos:start="171:9" pos:end="307:15">

        <decl_stmt pos:start="171:9" pos:end="171:22"><decl pos:start="171:9" pos:end="171:21"><type pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:18">MacroBlock</name></type> <name pos:start="171:20" pos:end="171:21">mb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:22"><decl pos:start="173:9" pos:end="173:21"><type pos:start="173:9" pos:end="173:18"><name pos:start="173:9" pos:end="173:18">SuperBlock</name></type> <name pos:start="173:20" pos:end="173:21">sb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="175:32"><decl pos:start="175:9" pos:end="175:31"><type pos:start="175:9" pos:end="175:16"><name pos:start="175:9" pos:end="175:16">unsigned</name></type> <name pos:start="175:18" pos:end="175:27">multi_mask</name> <init pos:start="175:29" pos:end="175:31">= <expr pos:start="175:31" pos:end="175:31"><literal type="number" pos:start="175:31" pos:end="175:31">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="179:9" pos:end="187:9"><if pos:start="179:9" pos:end="187:9">if <condition pos:start="179:12" pos:end="179:23">(<expr pos:start="179:13" pos:end="179:22"><name pos:start="179:13" pos:end="179:16">skip</name> <operator pos:start="179:18" pos:end="179:19">==</operator> <operator pos:start="179:21" pos:end="179:21">-</operator><literal type="number" pos:start="179:22" pos:end="179:22">1</literal></expr>)</condition> <block pos:start="179:25" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:42">

            <comment type="line" pos:start="181:13" pos:end="181:75">// Note that this call will make us skip the rest of the blocks</comment>

            <comment type="line" pos:start="183:13" pos:end="183:44">// if the frame prematurely ends</comment>

            <expr_stmt pos:start="185:13" pos:end="185:42"><expr pos:start="185:13" pos:end="185:41"><name pos:start="185:13" pos:end="185:16">skip</name> <operator pos:start="185:18" pos:end="185:18">=</operator> <call pos:start="185:20" pos:end="185:41"><name pos:start="185:20" pos:end="185:36">decode_skip_count</name><argument_list pos:start="185:37" pos:end="185:41">(<argument pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><operator pos:start="185:38" pos:end="185:38">&amp;</operator><name pos:start="185:39" pos:end="185:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="191:9" pos:end="283:9"><if pos:start="191:9" pos:end="197:9">if <condition pos:start="191:12" pos:end="191:17">(<expr pos:start="191:13" pos:end="191:16"><name pos:start="191:13" pos:end="191:16">skip</name></expr>)</condition> <block pos:start="191:19" pos:end="197:9">{<block_content pos:start="193:13" pos:end="195:56">

            <expr_stmt pos:start="193:13" pos:end="195:56"><expr pos:start="193:13" pos:end="195:55"><call pos:start="193:13" pos:end="195:55"><name pos:start="193:13" pos:end="193:27">copy_superblock</name><argument_list pos:start="193:28" pos:end="195:55">(<argument pos:start="193:29" pos:end="193:42"><expr pos:start="193:29" pos:end="193:42"><name pos:start="193:29" pos:end="193:42">new_frame_data</name></expr></argument>, <argument pos:start="193:45" pos:end="193:54"><expr pos:start="193:45" pos:end="193:54"><name pos:start="193:45" pos:end="193:54">new_stride</name></expr></argument>,

                            <argument pos:start="195:29" pos:end="195:42"><expr pos:start="195:29" pos:end="195:42"><name pos:start="195:29" pos:end="195:42">old_frame_data</name></expr></argument>, <argument pos:start="195:45" pos:end="195:54"><expr pos:start="195:45" pos:end="195:54"><name pos:start="195:45" pos:end="195:54">old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="197:11" pos:end="283:9">else <block pos:start="197:16" pos:end="283:9">{<block_content pos:start="199:13" pos:end="281:70">

            <expr_stmt pos:start="199:13" pos:end="201:56"><expr pos:start="199:13" pos:end="201:55"><call pos:start="199:13" pos:end="201:55"><name pos:start="199:13" pos:end="199:27">copy_superblock</name><argument_list pos:start="199:28" pos:end="201:55">(<argument pos:start="199:29" pos:end="199:37"><expr pos:start="199:29" pos:end="199:37"><name pos:start="199:29" pos:end="199:37"><name pos:start="199:29" pos:end="199:30">sb</name><operator pos:start="199:31" pos:end="199:31">.</operator><name pos:start="199:32" pos:end="199:37">pixels</name></name></expr></argument>, <argument pos:start="199:40" pos:end="199:40"><expr pos:start="199:40" pos:end="199:40"><literal type="number" pos:start="199:40" pos:end="199:40">8</literal></expr></argument>,

                            <argument pos:start="201:29" pos:end="201:42"><expr pos:start="201:29" pos:end="201:42"><name pos:start="201:29" pos:end="201:42">old_frame_data</name></expr></argument>, <argument pos:start="201:45" pos:end="201:54"><expr pos:start="201:45" pos:end="201:54"><name pos:start="201:45" pos:end="201:54">old_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="205:13" pos:end="225:13">while <condition pos:start="205:19" pos:end="205:62">(<expr pos:start="205:20" pos:end="205:61"><call pos:start="205:20" pos:end="205:42"><name pos:start="205:20" pos:end="205:34">can_safely_read</name><argument_list pos:start="205:35" pos:end="205:42">(<argument pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><operator pos:start="205:36" pos:end="205:36">&amp;</operator><name pos:start="205:37" pos:end="205:38">gb</name></expr></argument>, <argument pos:start="205:41" pos:end="205:41"><expr pos:start="205:41" pos:end="205:41"><literal type="number" pos:start="205:41" pos:end="205:41">1</literal></expr></argument>)</argument_list></call> <operator pos:start="205:44" pos:end="205:45">&amp;&amp;</operator> <operator pos:start="205:47" pos:end="205:47">!</operator><call pos:start="205:48" pos:end="205:61"><name pos:start="205:48" pos:end="205:56">get_bits1</name><argument_list pos:start="205:57" pos:end="205:61">(<argument pos:start="205:58" pos:end="205:60"><expr pos:start="205:58" pos:end="205:60"><operator pos:start="205:58" pos:end="205:58">&amp;</operator><name pos:start="205:59" pos:end="205:60">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:64" pos:end="225:13">{<block_content pos:start="207:17" pos:end="223:17">

                <decl_stmt pos:start="207:17" pos:end="207:30"><decl pos:start="207:17" pos:end="207:29"><type pos:start="207:17" pos:end="207:24"><name pos:start="207:17" pos:end="207:24">unsigned</name></type> <name pos:start="207:26" pos:end="207:29">mask</name></decl>;</decl_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:76"><expr pos:start="209:17" pos:end="209:75"><name pos:start="209:17" pos:end="209:18">mb</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <call pos:start="209:22" pos:end="209:75"><name pos:start="209:22" pos:end="209:38">decode_macroblock</name><argument_list pos:start="209:39" pos:end="209:75">(<argument pos:start="209:40" pos:end="209:40"><expr pos:start="209:40" pos:end="209:40"><name pos:start="209:40" pos:end="209:40">s</name></expr></argument>, <argument pos:start="209:43" pos:end="209:45"><expr pos:start="209:43" pos:end="209:45"><operator pos:start="209:43" pos:end="209:43">&amp;</operator><name pos:start="209:44" pos:end="209:45">gb</name></expr></argument>, <argument pos:start="209:48" pos:end="209:56"><expr pos:start="209:48" pos:end="209:56"><operator pos:start="209:48" pos:end="209:48">&amp;</operator><name pos:start="209:49" pos:end="209:56">cb_index</name></expr></argument>, <argument pos:start="209:59" pos:end="209:74"><expr pos:start="209:59" pos:end="209:74"><name pos:start="209:59" pos:end="209:74">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:41"><expr pos:start="211:17" pos:end="211:40"><name pos:start="211:17" pos:end="211:20">mask</name> <operator pos:start="211:22" pos:end="211:22">=</operator> <call pos:start="211:24" pos:end="211:40"><name pos:start="211:24" pos:end="211:31">get_bits</name><argument_list pos:start="211:32" pos:end="211:40">(<argument pos:start="211:33" pos:end="211:35"><expr pos:start="211:33" pos:end="211:35"><operator pos:start="211:33" pos:end="211:33">&amp;</operator><name pos:start="211:34" pos:end="211:35">gb</name></expr></argument>, <argument pos:start="211:38" pos:end="211:39"><expr pos:start="211:38" pos:end="211:39"><literal type="number" pos:start="211:38" pos:end="211:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:35"><expr pos:start="213:17" pos:end="213:34"><name pos:start="213:17" pos:end="213:26">multi_mask</name> <operator pos:start="213:28" pos:end="213:29">|=</operator> <name pos:start="213:31" pos:end="213:34">mask</name></expr>;</expr_stmt>

                <for pos:start="215:17" pos:end="223:17">for <control pos:start="215:21" pos:end="215:40">(<init pos:start="215:22" pos:end="215:27"><expr pos:start="215:22" pos:end="215:26"><name pos:start="215:22" pos:end="215:22">i</name> <operator pos:start="215:24" pos:end="215:24">=</operator> <literal type="number" pos:start="215:26" pos:end="215:26">0</literal></expr>;</init> <condition pos:start="215:29" pos:end="215:35"><expr pos:start="215:29" pos:end="215:34"><name pos:start="215:29" pos:end="215:29">i</name> <operator pos:start="215:31" pos:end="215:31">&lt;</operator> <literal type="number" pos:start="215:33" pos:end="215:34">16</literal></expr>;</condition> <incr pos:start="215:37" pos:end="215:39"><expr pos:start="215:37" pos:end="215:39"><name pos:start="215:37" pos:end="215:37">i</name><operator pos:start="215:38" pos:end="215:39">++</operator></expr></incr>)</control> <block pos:start="215:42" pos:end="223:17">{<block_content pos:start="217:21" pos:end="221:21">

                    <if_stmt pos:start="217:21" pos:end="221:21"><if pos:start="217:21" pos:end="221:21">if <condition pos:start="217:24" pos:end="217:46">(<expr pos:start="217:25" pos:end="217:45"><name pos:start="217:25" pos:end="217:28">mask</name> <operator pos:start="217:30" pos:end="217:30">&amp;</operator> <name pos:start="217:32" pos:end="217:45"><name pos:start="217:32" pos:end="217:42">mask_matrix</name><index pos:start="217:43" pos:end="217:45">[<expr pos:start="217:44" pos:end="217:44"><name pos:start="217:44" pos:end="217:44">i</name></expr>]</index></name></expr>)</condition> <block pos:start="217:48" pos:end="221:21">{<block_content pos:start="219:25" pos:end="219:54">

                        <expr_stmt pos:start="219:25" pos:end="219:54"><expr pos:start="219:25" pos:end="219:53"><call pos:start="219:25" pos:end="219:53"><name pos:start="219:25" pos:end="219:41">insert_mb_into_sb</name><argument_list pos:start="219:42" pos:end="219:53">(<argument pos:start="219:43" pos:end="219:45"><expr pos:start="219:43" pos:end="219:45"><operator pos:start="219:43" pos:end="219:43">&amp;</operator><name pos:start="219:44" pos:end="219:45">sb</name></expr></argument>, <argument pos:start="219:48" pos:end="219:49"><expr pos:start="219:48" pos:end="219:49"><name pos:start="219:48" pos:end="219:49">mb</name></expr></argument>, <argument pos:start="219:52" pos:end="219:52"><expr pos:start="219:52" pos:end="219:52"><name pos:start="219:52" pos:end="219:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></while>



            <if_stmt pos:start="229:13" pos:end="277:13"><if pos:start="229:13" pos:end="267:13">if <condition pos:start="229:16" pos:end="229:59">(<expr pos:start="229:17" pos:end="229:58"><call pos:start="229:17" pos:end="229:39"><name pos:start="229:17" pos:end="229:31">can_safely_read</name><argument_list pos:start="229:32" pos:end="229:39">(<argument pos:start="229:33" pos:end="229:35"><expr pos:start="229:33" pos:end="229:35"><operator pos:start="229:33" pos:end="229:33">&amp;</operator><name pos:start="229:34" pos:end="229:35">gb</name></expr></argument>, <argument pos:start="229:38" pos:end="229:38"><expr pos:start="229:38" pos:end="229:38"><literal type="number" pos:start="229:38" pos:end="229:38">1</literal></expr></argument>)</argument_list></call> <operator pos:start="229:41" pos:end="229:42">&amp;&amp;</operator> <operator pos:start="229:44" pos:end="229:44">!</operator><call pos:start="229:45" pos:end="229:58"><name pos:start="229:45" pos:end="229:53">get_bits1</name><argument_list pos:start="229:54" pos:end="229:58">(<argument pos:start="229:55" pos:end="229:57"><expr pos:start="229:55" pos:end="229:57"><operator pos:start="229:55" pos:end="229:55">&amp;</operator><name pos:start="229:56" pos:end="229:57">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="229:61" pos:end="267:13">{<block_content pos:start="231:17" pos:end="265:17">

                <decl_stmt pos:start="231:17" pos:end="231:53"><decl pos:start="231:17" pos:end="231:52"><type pos:start="231:17" pos:end="231:24"><name pos:start="231:17" pos:end="231:24">unsigned</name></type> <name pos:start="231:26" pos:end="231:33">inv_mask</name> <init pos:start="231:35" pos:end="231:52">= <expr pos:start="231:37" pos:end="231:52"><call pos:start="231:37" pos:end="231:52"><name pos:start="231:37" pos:end="231:44">get_bits</name><argument_list pos:start="231:45" pos:end="231:52">(<argument pos:start="231:46" pos:end="231:48"><expr pos:start="231:46" pos:end="231:48"><operator pos:start="231:46" pos:end="231:46">&amp;</operator><name pos:start="231:47" pos:end="231:48">gb</name></expr></argument>, <argument pos:start="231:51" pos:end="231:51"><expr pos:start="231:51" pos:end="231:51"><literal type="number" pos:start="231:51" pos:end="231:51">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for pos:start="233:17" pos:end="245:17">for <control pos:start="233:21" pos:end="233:39">(<init pos:start="233:22" pos:end="233:27"><expr pos:start="233:22" pos:end="233:26"><name pos:start="233:22" pos:end="233:22">i</name> <operator pos:start="233:24" pos:end="233:24">=</operator> <literal type="number" pos:start="233:26" pos:end="233:26">0</literal></expr>;</init> <condition pos:start="233:29" pos:end="233:34"><expr pos:start="233:29" pos:end="233:33"><name pos:start="233:29" pos:end="233:29">i</name> <operator pos:start="233:31" pos:end="233:31">&lt;</operator> <literal type="number" pos:start="233:33" pos:end="233:33">4</literal></expr>;</condition> <incr pos:start="233:36" pos:end="233:38"><expr pos:start="233:36" pos:end="233:38"><name pos:start="233:36" pos:end="233:36">i</name><operator pos:start="233:37" pos:end="233:38">++</operator></expr></incr>)</control> <block pos:start="233:41" pos:end="245:17">{<block_content pos:start="235:21" pos:end="243:21">

                    <if_stmt pos:start="235:21" pos:end="243:21"><if pos:start="235:21" pos:end="239:21">if <condition pos:start="235:24" pos:end="235:44">(<expr pos:start="235:25" pos:end="235:43"><name pos:start="235:25" pos:end="235:32">inv_mask</name> <operator pos:start="235:34" pos:end="235:34">&amp;</operator> <operator pos:start="235:36" pos:end="235:36">(</operator><literal type="number" pos:start="235:37" pos:end="235:37">1</literal> <operator pos:start="235:39" pos:end="235:40">&lt;&lt;</operator> <name pos:start="235:42" pos:end="235:42">i</name><operator pos:start="235:43" pos:end="235:43">)</operator></expr>)</condition> <block pos:start="235:46" pos:end="239:21">{<block_content pos:start="237:25" pos:end="237:49">

                        <expr_stmt pos:start="237:25" pos:end="237:49"><expr pos:start="237:25" pos:end="237:48"><name pos:start="237:25" pos:end="237:34">multi_mask</name> <operator pos:start="237:36" pos:end="237:37">^=</operator> <literal type="number" pos:start="237:39" pos:end="237:41">0xF</literal> <operator pos:start="237:43" pos:end="237:44">&lt;&lt;</operator> <name pos:start="237:46" pos:end="237:46">i</name><operator pos:start="237:47" pos:end="237:47">*</operator><literal type="number" pos:start="237:48" pos:end="237:48">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="239:23" pos:end="243:21">else <block pos:start="239:28" pos:end="243:21">{<block_content pos:start="241:25" pos:end="241:62">

                        <expr_stmt pos:start="241:25" pos:end="241:62"><expr pos:start="241:25" pos:end="241:61"><name pos:start="241:25" pos:end="241:34">multi_mask</name> <operator pos:start="241:36" pos:end="241:37">^=</operator> <call pos:start="241:39" pos:end="241:54"><name pos:start="241:39" pos:end="241:46">get_bits</name><argument_list pos:start="241:47" pos:end="241:54">(<argument pos:start="241:48" pos:end="241:50"><expr pos:start="241:48" pos:end="241:50"><operator pos:start="241:48" pos:end="241:48">&amp;</operator><name pos:start="241:49" pos:end="241:50">gb</name></expr></argument>, <argument pos:start="241:53" pos:end="241:53"><expr pos:start="241:53" pos:end="241:53"><literal type="number" pos:start="241:53" pos:end="241:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="241:56" pos:end="241:57">&lt;&lt;</operator> <name pos:start="241:59" pos:end="241:59">i</name><operator pos:start="241:60" pos:end="241:60">*</operator><literal type="number" pos:start="241:61" pos:end="241:61">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>



                <for pos:start="249:17" pos:end="265:17">for <control pos:start="249:21" pos:end="249:40">(<init pos:start="249:22" pos:end="249:27"><expr pos:start="249:22" pos:end="249:26"><name pos:start="249:22" pos:end="249:22">i</name> <operator pos:start="249:24" pos:end="249:24">=</operator> <literal type="number" pos:start="249:26" pos:end="249:26">0</literal></expr>;</init> <condition pos:start="249:29" pos:end="249:35"><expr pos:start="249:29" pos:end="249:34"><name pos:start="249:29" pos:end="249:29">i</name> <operator pos:start="249:31" pos:end="249:31">&lt;</operator> <literal type="number" pos:start="249:33" pos:end="249:34">16</literal></expr>;</condition> <incr pos:start="249:37" pos:end="249:39"><expr pos:start="249:37" pos:end="249:39"><name pos:start="249:37" pos:end="249:37">i</name><operator pos:start="249:38" pos:end="249:39">++</operator></expr></incr>)</control> <block pos:start="249:42" pos:end="265:17">{<block_content pos:start="251:21" pos:end="263:21">

                    <if_stmt pos:start="251:21" pos:end="263:21"><if pos:start="251:21" pos:end="263:21">if <condition pos:start="251:24" pos:end="251:52">(<expr pos:start="251:25" pos:end="251:51"><name pos:start="251:25" pos:end="251:34">multi_mask</name> <operator pos:start="251:36" pos:end="251:36">&amp;</operator> <name pos:start="251:38" pos:end="251:51"><name pos:start="251:38" pos:end="251:48">mask_matrix</name><index pos:start="251:49" pos:end="251:51">[<expr pos:start="251:50" pos:end="251:50"><name pos:start="251:50" pos:end="251:50">i</name></expr>]</index></name></expr>)</condition> <block pos:start="251:54" pos:end="263:21">{<block_content pos:start="253:25" pos:end="261:54">

                        <if_stmt pos:start="253:25" pos:end="255:34"><if pos:start="253:25" pos:end="255:34">if <condition pos:start="253:28" pos:end="253:53">(<expr pos:start="253:29" pos:end="253:52"><operator pos:start="253:29" pos:end="253:29">!</operator><call pos:start="253:30" pos:end="253:52"><name pos:start="253:30" pos:end="253:44">can_safely_read</name><argument_list pos:start="253:45" pos:end="253:52">(<argument pos:start="253:46" pos:end="253:48"><expr pos:start="253:46" pos:end="253:48"><operator pos:start="253:46" pos:end="253:46">&amp;</operator><name pos:start="253:47" pos:end="253:48">gb</name></expr></argument>, <argument pos:start="253:51" pos:end="253:51"><expr pos:start="253:51" pos:end="253:51"><literal type="number" pos:start="253:51" pos:end="253:51">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="255:29" pos:end="255:34"><block_content pos:start="255:29" pos:end="255:34">

                            <break pos:start="255:29" pos:end="255:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="257:25" pos:end="259:65"><expr pos:start="257:25" pos:end="259:64"><name pos:start="257:25" pos:end="257:26">mb</name> <operator pos:start="257:28" pos:end="257:28">=</operator> <call pos:start="257:30" pos:end="259:64"><name pos:start="257:30" pos:end="257:46">decode_macroblock</name><argument_list pos:start="257:47" pos:end="259:64">(<argument pos:start="257:48" pos:end="257:48"><expr pos:start="257:48" pos:end="257:48"><name pos:start="257:48" pos:end="257:48">s</name></expr></argument>, <argument pos:start="257:51" pos:end="257:53"><expr pos:start="257:51" pos:end="257:53"><operator pos:start="257:51" pos:end="257:51">&amp;</operator><name pos:start="257:52" pos:end="257:53">gb</name></expr></argument>, <argument pos:start="257:56" pos:end="257:64"><expr pos:start="257:56" pos:end="257:64"><operator pos:start="257:56" pos:end="257:56">&amp;</operator><name pos:start="257:57" pos:end="257:64">cb_index</name></expr></argument>,

                                               <argument pos:start="259:48" pos:end="259:63"><expr pos:start="259:48" pos:end="259:63"><name pos:start="259:48" pos:end="259:63">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="261:25" pos:end="261:54"><expr pos:start="261:25" pos:end="261:53"><call pos:start="261:25" pos:end="261:53"><name pos:start="261:25" pos:end="261:41">insert_mb_into_sb</name><argument_list pos:start="261:42" pos:end="261:53">(<argument pos:start="261:43" pos:end="261:45"><expr pos:start="261:43" pos:end="261:45"><operator pos:start="261:43" pos:end="261:43">&amp;</operator><name pos:start="261:44" pos:end="261:45">sb</name></expr></argument>, <argument pos:start="261:48" pos:end="261:49"><expr pos:start="261:48" pos:end="261:49"><name pos:start="261:48" pos:end="261:49">mb</name></expr></argument>, <argument pos:start="261:52" pos:end="261:52"><expr pos:start="261:52" pos:end="261:52"><name pos:start="261:52" pos:end="261:52">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="267:15" pos:end="277:13">else if <condition pos:start="267:23" pos:end="267:47">(<expr pos:start="267:24" pos:end="267:46"><name pos:start="267:24" pos:end="267:34">frame_flags</name> <operator pos:start="267:36" pos:end="267:36">&amp;</operator> <operator pos:start="267:38" pos:end="267:38">(</operator><literal type="number" pos:start="267:39" pos:end="267:39">1</literal> <operator pos:start="267:41" pos:end="267:42">&lt;&lt;</operator> <literal type="number" pos:start="267:44" pos:end="267:45">16</literal><operator pos:start="267:46" pos:end="267:46">)</operator></expr>)</condition> <block pos:start="267:49" pos:end="277:13">{<block_content pos:start="269:17" pos:end="275:17">

                <while pos:start="269:17" pos:end="275:17">while <condition pos:start="269:23" pos:end="269:66">(<expr pos:start="269:24" pos:end="269:65"><call pos:start="269:24" pos:end="269:46"><name pos:start="269:24" pos:end="269:38">can_safely_read</name><argument_list pos:start="269:39" pos:end="269:46">(<argument pos:start="269:40" pos:end="269:42"><expr pos:start="269:40" pos:end="269:42"><operator pos:start="269:40" pos:end="269:40">&amp;</operator><name pos:start="269:41" pos:end="269:42">gb</name></expr></argument>, <argument pos:start="269:45" pos:end="269:45"><expr pos:start="269:45" pos:end="269:45"><literal type="number" pos:start="269:45" pos:end="269:45">1</literal></expr></argument>)</argument_list></call> <operator pos:start="269:48" pos:end="269:49">&amp;&amp;</operator> <operator pos:start="269:51" pos:end="269:51">!</operator><call pos:start="269:52" pos:end="269:65"><name pos:start="269:52" pos:end="269:60">get_bits1</name><argument_list pos:start="269:61" pos:end="269:65">(<argument pos:start="269:62" pos:end="269:64"><expr pos:start="269:62" pos:end="269:64"><operator pos:start="269:62" pos:end="269:62">&amp;</operator><name pos:start="269:63" pos:end="269:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:68" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:65">

                    <expr_stmt pos:start="271:21" pos:end="271:80"><expr pos:start="271:21" pos:end="271:79"><name pos:start="271:21" pos:end="271:22">mb</name> <operator pos:start="271:24" pos:end="271:24">=</operator> <call pos:start="271:26" pos:end="271:79"><name pos:start="271:26" pos:end="271:42">decode_macroblock</name><argument_list pos:start="271:43" pos:end="271:79">(<argument pos:start="271:44" pos:end="271:44"><expr pos:start="271:44" pos:end="271:44"><name pos:start="271:44" pos:end="271:44">s</name></expr></argument>, <argument pos:start="271:47" pos:end="271:49"><expr pos:start="271:47" pos:end="271:49"><operator pos:start="271:47" pos:end="271:47">&amp;</operator><name pos:start="271:48" pos:end="271:49">gb</name></expr></argument>, <argument pos:start="271:52" pos:end="271:60"><expr pos:start="271:52" pos:end="271:60"><operator pos:start="271:52" pos:end="271:52">&amp;</operator><name pos:start="271:53" pos:end="271:60">cb_index</name></expr></argument>, <argument pos:start="271:63" pos:end="271:78"><expr pos:start="271:63" pos:end="271:78"><name pos:start="271:63" pos:end="271:78">superblock_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:65"><expr pos:start="273:21" pos:end="273:64"><call pos:start="273:21" pos:end="273:64"><name pos:start="273:21" pos:end="273:37">insert_mb_into_sb</name><argument_list pos:start="273:38" pos:end="273:64">(<argument pos:start="273:39" pos:end="273:41"><expr pos:start="273:39" pos:end="273:41"><operator pos:start="273:39" pos:end="273:39">&amp;</operator><name pos:start="273:40" pos:end="273:41">sb</name></expr></argument>, <argument pos:start="273:44" pos:end="273:45"><expr pos:start="273:44" pos:end="273:45"><name pos:start="273:44" pos:end="273:45">mb</name></expr></argument>, <argument pos:start="273:48" pos:end="273:63"><expr pos:start="273:48" pos:end="273:63"><call pos:start="273:48" pos:end="273:63"><name pos:start="273:48" pos:end="273:55">get_bits</name><argument_list pos:start="273:56" pos:end="273:63">(<argument pos:start="273:57" pos:end="273:59"><expr pos:start="273:57" pos:end="273:59"><operator pos:start="273:57" pos:end="273:57">&amp;</operator><name pos:start="273:58" pos:end="273:59">gb</name></expr></argument>, <argument pos:start="273:62" pos:end="273:62"><expr pos:start="273:62" pos:end="273:62"><literal type="number" pos:start="273:62" pos:end="273:62">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="281:13" pos:end="281:70"><expr pos:start="281:13" pos:end="281:69"><call pos:start="281:13" pos:end="281:69"><name pos:start="281:13" pos:end="281:27">copy_superblock</name><argument_list pos:start="281:28" pos:end="281:69">(<argument pos:start="281:29" pos:end="281:42"><expr pos:start="281:29" pos:end="281:42"><name pos:start="281:29" pos:end="281:42">new_frame_data</name></expr></argument>, <argument pos:start="281:45" pos:end="281:54"><expr pos:start="281:45" pos:end="281:54"><name pos:start="281:45" pos:end="281:54">new_stride</name></expr></argument>, <argument pos:start="281:57" pos:end="281:65"><expr pos:start="281:57" pos:end="281:65"><name pos:start="281:57" pos:end="281:65"><name pos:start="281:57" pos:end="281:58">sb</name><operator pos:start="281:59" pos:end="281:59">.</operator><name pos:start="281:60" pos:end="281:65">pixels</name></name></expr></argument>, <argument pos:start="281:68" pos:end="281:68"><expr pos:start="281:68" pos:end="281:68"><literal type="number" pos:start="281:68" pos:end="281:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="287:9" pos:end="287:31"><expr pos:start="287:9" pos:end="287:30"><name pos:start="287:9" pos:end="287:28">superblock_col_index</name><operator pos:start="287:29" pos:end="287:30">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:28"><expr pos:start="289:9" pos:end="289:27"><name pos:start="289:9" pos:end="289:22">new_frame_data</name> <operator pos:start="289:24" pos:end="289:25">+=</operator> <literal type="number" pos:start="289:27" pos:end="289:27">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="293:32"><if pos:start="291:9" pos:end="293:32">if <condition pos:start="291:12" pos:end="291:27">(<expr pos:start="291:13" pos:end="291:26"><name pos:start="291:13" pos:end="291:26">old_frame_data</name></expr>)</condition><block type="pseudo" pos:start="293:13" pos:end="293:32"><block_content pos:start="293:13" pos:end="293:32">

            <expr_stmt pos:start="293:13" pos:end="293:32"><expr pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:26">old_frame_data</name> <operator pos:start="293:28" pos:end="293:29">+=</operator> <literal type="number" pos:start="293:31" pos:end="293:31">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="295:9" pos:end="305:9"><if pos:start="295:9" pos:end="305:9">if <condition pos:start="295:12" pos:end="295:56">(<expr pos:start="295:13" pos:end="295:55"><name pos:start="295:13" pos:end="295:32">superblock_col_index</name> <operator pos:start="295:34" pos:end="295:35">==</operator> <name pos:start="295:37" pos:end="295:55">superblocks_per_row</name></expr>)</condition> <block pos:start="295:58" pos:end="305:9">{<block_content pos:start="297:13" pos:end="303:37">

            <expr_stmt pos:start="297:13" pos:end="297:71"><expr pos:start="297:13" pos:end="297:70"><name pos:start="297:13" pos:end="297:26">new_frame_data</name> <operator pos:start="297:28" pos:end="297:29">+=</operator> <name pos:start="297:31" pos:end="297:40">new_stride</name> <operator pos:start="297:42" pos:end="297:42">*</operator> <literal type="number" pos:start="297:44" pos:end="297:46">8</literal> <operator pos:start="297:46" pos:end="297:46">-</operator> <name pos:start="297:48" pos:end="297:66">superblocks_per_row</name> <operator pos:start="297:68" pos:end="297:68">*</operator> <literal type="number" pos:start="297:70" pos:end="297:70">8</literal></expr>;</expr_stmt>

            <if_stmt pos:start="299:13" pos:end="301:75"><if pos:start="299:13" pos:end="301:75">if <condition pos:start="299:16" pos:end="299:31">(<expr pos:start="299:17" pos:end="299:30"><name pos:start="299:17" pos:end="299:30">old_frame_data</name></expr>)</condition><block type="pseudo" pos:start="301:17" pos:end="301:75"><block_content pos:start="301:17" pos:end="301:75">

                <expr_stmt pos:start="301:17" pos:end="301:75"><expr pos:start="301:17" pos:end="301:74"><name pos:start="301:17" pos:end="301:30">old_frame_data</name> <operator pos:start="301:32" pos:end="301:33">+=</operator> <name pos:start="301:35" pos:end="301:44">old_stride</name> <operator pos:start="301:46" pos:end="301:46">*</operator> <literal type="number" pos:start="301:48" pos:end="301:50">8</literal> <operator pos:start="301:50" pos:end="301:50">-</operator> <name pos:start="301:52" pos:end="301:70">superblocks_per_row</name> <operator pos:start="301:72" pos:end="301:72">*</operator> <literal type="number" pos:start="301:74" pos:end="301:74">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:37"><expr pos:start="303:13" pos:end="303:36"><name pos:start="303:13" pos:end="303:32">superblock_col_index</name> <operator pos:start="303:34" pos:end="303:34">=</operator> <literal type="number" pos:start="303:36" pos:end="303:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:15"><expr pos:start="307:9" pos:end="307:14"><name pos:start="307:9" pos:end="307:12">skip</name><operator pos:start="307:13" pos:end="307:14">--</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="313:5" pos:end="317:58"><expr pos:start="313:5" pos:end="317:57"><call pos:start="313:5" pos:end="317:57"><name pos:start="313:5" pos:end="313:10">av_log</name><argument_list pos:start="313:11" pos:end="317:57">(<argument pos:start="313:12" pos:end="313:16"><expr pos:start="313:12" pos:end="313:16"><name pos:start="313:12" pos:end="313:16">avctx</name></expr></argument>, <argument pos:start="313:19" pos:end="313:30"><expr pos:start="313:19" pos:end="313:30"><name pos:start="313:19" pos:end="313:30">AV_LOG_DEBUG</name></expr></argument>,

           <argument pos:start="315:12" pos:end="315:39"><expr pos:start="315:12" pos:end="315:39"><literal type="string" pos:start="315:12" pos:end="315:39">"Escape sizes: %i, %i, %i\n"</literal></expr></argument>,

           <argument pos:start="317:12" pos:end="317:21"><expr pos:start="317:12" pos:end="317:21"><name pos:start="317:12" pos:end="317:21">frame_size</name></expr></argument>, <argument pos:start="317:24" pos:end="317:31"><expr pos:start="317:24" pos:end="317:31"><name pos:start="317:24" pos:end="317:31">buf_size</name></expr></argument>, <argument pos:start="317:34" pos:end="317:56"><expr pos:start="317:34" pos:end="317:56"><call pos:start="317:34" pos:end="317:52"><name pos:start="317:34" pos:end="317:47">get_bits_count</name><argument_list pos:start="317:48" pos:end="317:52">(<argument pos:start="317:49" pos:end="317:51"><expr pos:start="317:49" pos:end="317:51"><operator pos:start="317:49" pos:end="317:49">&amp;</operator><name pos:start="317:50" pos:end="317:51">gb</name></expr></argument>)</argument_list></call> <operator pos:start="317:54" pos:end="317:54">/</operator> <literal type="number" pos:start="317:56" pos:end="317:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:30"><expr pos:start="321:5" pos:end="321:29"><call pos:start="321:5" pos:end="321:29"><name pos:start="321:5" pos:end="321:18">av_frame_unref</name><argument_list pos:start="321:19" pos:end="321:29">(<argument pos:start="321:20" pos:end="321:28"><expr pos:start="321:20" pos:end="321:28"><operator pos:start="321:20" pos:end="321:20">&amp;</operator><name pos:start="321:21" pos:end="321:28"><name pos:start="321:21" pos:end="321:21">s</name><operator pos:start="321:22" pos:end="321:23">-&gt;</operator><name pos:start="321:24" pos:end="321:28">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="323:5" pos:end="325:19"><if pos:start="323:5" pos:end="325:19">if <condition pos:start="323:8" pos:end="323:51">(<expr pos:start="323:9" pos:end="323:50"><operator pos:start="323:9" pos:end="323:9">(</operator><name pos:start="323:10" pos:end="323:12">ret</name> <operator pos:start="323:14" pos:end="323:14">=</operator> <call pos:start="323:16" pos:end="323:45"><name pos:start="323:16" pos:end="323:27">av_frame_ref</name><argument_list pos:start="323:28" pos:end="323:45">(<argument pos:start="323:29" pos:end="323:37"><expr pos:start="323:29" pos:end="323:37"><operator pos:start="323:29" pos:end="323:29">&amp;</operator><name pos:start="323:30" pos:end="323:37"><name pos:start="323:30" pos:end="323:30">s</name><operator pos:start="323:31" pos:end="323:32">-&gt;</operator><name pos:start="323:33" pos:end="323:37">frame</name></name></expr></argument>, <argument pos:start="323:40" pos:end="323:44"><expr pos:start="323:40" pos:end="323:44"><name pos:start="323:40" pos:end="323:44">frame</name></expr></argument>)</argument_list></call><operator pos:start="323:46" pos:end="323:46">)</operator> <operator pos:start="323:48" pos:end="323:48">&lt;</operator> <literal type="number" pos:start="323:50" pos:end="323:50">0</literal></expr>)</condition><block type="pseudo" pos:start="325:9" pos:end="325:19"><block_content pos:start="325:9" pos:end="325:19">

        <return pos:start="325:9" pos:end="325:19">return <expr pos:start="325:16" pos:end="325:18"><name pos:start="325:16" pos:end="325:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:19"><expr pos:start="329:5" pos:end="329:18"><operator pos:start="329:5" pos:end="329:5">*</operator><name pos:start="329:6" pos:end="329:14">got_frame</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <literal type="number" pos:start="329:18" pos:end="329:18">1</literal></expr>;</expr_stmt>



    <return pos:start="333:5" pos:end="333:22">return <expr pos:start="333:12" pos:end="333:21"><name pos:start="333:12" pos:end="333:21">frame_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
