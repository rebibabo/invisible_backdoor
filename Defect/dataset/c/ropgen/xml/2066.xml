<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2066.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">arm_tr_translate_insn</name><parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:58"><decl pos:start="1:35" pos:end="1:58"><type pos:start="1:35" pos:end="1:58"><name pos:start="1:35" pos:end="1:50">DisasContextBase</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:58">dcbase</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:73"><decl pos:start="1:61" pos:end="1:73"><type pos:start="1:61" pos:end="1:73"><name pos:start="1:61" pos:end="1:68">CPUState</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:73">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:42">

    <decl_stmt pos:start="5:5" pos:end="5:64"><decl pos:start="5:5" pos:end="5:63"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">DisasContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">dc</name> <init pos:start="5:22" pos:end="5:63">= <expr pos:start="5:24" pos:end="5:63"><call pos:start="5:24" pos:end="5:63"><name pos:start="5:24" pos:end="5:35">container_of</name><argument_list pos:start="5:36" pos:end="5:63">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><name pos:start="5:37" pos:end="5:42">dcbase</name></expr></argument>, <argument pos:start="5:45" pos:end="5:56"><expr pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:56">DisasContext</name></expr></argument>, <argument pos:start="5:59" pos:end="5:62"><expr pos:start="5:59" pos:end="5:62"><name pos:start="5:59" pos:end="5:62">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUARMState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:35">= <expr pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:35"><name pos:start="7:24" pos:end="7:26">cpu</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:35">env_ptr</name></name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:23">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <comment type="block" pos:start="13:5" pos:end="13:51">/* Intercept jump to the magic kernel page.  */</comment>

    <if_stmt pos:start="15:5" pos:end="30:0"><if pos:start="15:5" pos:end="30:0">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:10">dc</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:14">pc</name></name> <operator pos:start="15:16" pos:end="15:17">&gt;=</operator> <literal type="number" pos:start="15:19" pos:end="15:28">0xffff0000</literal></expr>)</condition> <block pos:start="15:31" pos:end="30:0">{<block_content pos:start="21:9" pos:end="25:15">

        <comment type="block" pos:start="17:9" pos:end="19:43">/* We always get here via a jump, so know we are not in a

           conditional execution block.  */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><call pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:30">gen_exception_internal</name><argument_list pos:start="21:31" pos:end="21:48">(<argument pos:start="21:32" pos:end="21:47"><expr pos:start="21:32" pos:end="21:47"><name pos:start="21:32" pos:end="21:47">EXCP_KERNEL_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:41"><expr pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:10">dc</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:16">base</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:23">is_jmp</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <name pos:start="23:27" pos:end="23:40">DISAS_NORETURN</name></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="33:5" pos:end="65:5"><if pos:start="33:5" pos:end="65:5">if <condition pos:start="33:8" pos:end="33:40">(<expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:10">dc</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:21">ss_active</name></name> <operator pos:start="33:23" pos:end="33:24">&amp;&amp;</operator> <operator pos:start="33:26" pos:end="33:26">!</operator><name pos:start="33:27" pos:end="33:39"><name pos:start="33:27" pos:end="33:28">dc</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:39">pstate_ss</name></name></expr>)</condition> <block pos:start="33:42" pos:end="65:5">{<block_content pos:start="55:9" pos:end="63:15">

        <comment type="block" pos:start="35:9" pos:end="53:11">/* Singlestep state is Active-pending.

         * If we're in this state at the start of a TB then either

         *  a) we just took an exception to an EL which is being debugged

         *     and this is the first insn in the exception handler

         *  b) debug exceptions were masked and we just unmasked them

         *     without changing EL (eg by clearing PSTATE.D)

         * In either case we're going to take a swstep exception in the

         * "did not step an insn" case, and so the syndrome ISV and EX

         * bits should be zero.

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:40"><expr pos:start="55:9" pos:end="55:39"><call pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:39">(<argument pos:start="55:16" pos:end="55:38"><expr pos:start="55:16" pos:end="55:38"><name pos:start="55:16" pos:end="55:33"><name pos:start="55:16" pos:end="55:17">dc</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:23">base</name><operator pos:start="55:24" pos:end="55:24">.</operator><name pos:start="55:25" pos:end="55:33">num_insns</name></name> <operator pos:start="55:35" pos:end="55:36">==</operator> <literal type="number" pos:start="55:38" pos:end="55:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:48"><expr pos:start="57:9" pos:end="59:47"><call pos:start="57:9" pos:end="59:47"><name pos:start="57:9" pos:end="57:21">gen_exception</name><argument_list pos:start="57:22" pos:end="59:47">(<argument pos:start="57:23" pos:end="57:31"><expr pos:start="57:23" pos:end="57:31"><name pos:start="57:23" pos:end="57:31">EXCP_UDEF</name></expr></argument>, <argument pos:start="57:34" pos:end="57:65"><expr pos:start="57:34" pos:end="57:65"><call pos:start="57:34" pos:end="57:65"><name pos:start="57:34" pos:end="57:43">syn_swstep</name><argument_list pos:start="57:44" pos:end="57:65">(<argument pos:start="57:45" pos:end="57:58"><expr pos:start="57:45" pos:end="57:58"><name pos:start="57:45" pos:end="57:58"><name pos:start="57:45" pos:end="57:46">dc</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:58">ss_same_el</name></name></expr></argument>, <argument pos:start="57:61" pos:end="57:61"><expr pos:start="57:61" pos:end="57:61"><literal type="number" pos:start="57:61" pos:end="57:61">0</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:64"><expr pos:start="57:64" pos:end="57:64"><literal type="number" pos:start="57:64" pos:end="57:64">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="59:23" pos:end="59:46"><expr pos:start="59:23" pos:end="59:46"><call pos:start="59:23" pos:end="59:46"><name pos:start="59:23" pos:end="59:42">default_exception_el</name><argument_list pos:start="59:43" pos:end="59:46">(<argument pos:start="59:44" pos:end="59:45"><expr pos:start="59:44" pos:end="59:45"><name pos:start="59:44" pos:end="59:45">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:41"><expr pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:10">dc</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:16">base</name><operator pos:start="61:17" pos:end="61:17">.</operator><name pos:start="61:18" pos:end="61:23">is_jmp</name></name> <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:40">DISAS_NORETURN</name></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="97:5"><if pos:start="69:5" pos:end="89:5">if <condition pos:start="69:8" pos:end="69:18">(<expr pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:10">dc</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:17">thumb</name></name></expr>)</condition> <block pos:start="69:20" pos:end="89:5">{<block_content pos:start="71:9" pos:end="87:9">

        <expr_stmt pos:start="71:9" pos:end="71:34"><expr pos:start="71:9" pos:end="71:33"><call pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:24">disas_thumb_insn</name><argument_list pos:start="71:25" pos:end="71:33">(<argument pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><name pos:start="71:26" pos:end="71:28">env</name></expr></argument>, <argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="87:9"><if pos:start="73:9" pos:end="87:9">if <condition pos:start="73:12" pos:end="73:30">(<expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:14">dc</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:29">condexec_mask</name></name></expr>)</condition> <block pos:start="73:32" pos:end="87:9">{<block_content pos:start="75:13" pos:end="85:13">

            <expr_stmt pos:start="75:13" pos:end="77:49"><expr pos:start="75:13" pos:end="77:48"><name pos:start="75:13" pos:end="75:29"><name pos:start="75:13" pos:end="75:14">dc</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:29">condexec_cond</name></name> <operator pos:start="75:31" pos:end="75:31">=</operator> <operator pos:start="75:33" pos:end="75:33">(</operator><name pos:start="75:34" pos:end="75:50"><name pos:start="75:34" pos:end="75:35">dc</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:50">condexec_cond</name></name> <operator pos:start="75:52" pos:end="75:52">&amp;</operator> <literal type="number" pos:start="75:54" pos:end="75:56">0xe</literal><operator pos:start="75:57" pos:end="75:57">)</operator>

                <operator pos:start="77:17" pos:end="77:17">|</operator> <operator pos:start="77:19" pos:end="77:19">(</operator><operator pos:start="77:20" pos:end="77:20">(</operator><name pos:start="77:21" pos:end="77:37"><name pos:start="77:21" pos:end="77:22">dc</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:37">condexec_mask</name></name> <operator pos:start="77:39" pos:end="77:40">&gt;&gt;</operator> <literal type="number" pos:start="77:42" pos:end="77:42">4</literal><operator pos:start="77:43" pos:end="77:43">)</operator> <operator pos:start="77:45" pos:end="77:45">&amp;</operator> <literal type="number" pos:start="77:47" pos:end="77:47">1</literal><operator pos:start="77:48" pos:end="77:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:64"><expr pos:start="79:13" pos:end="79:63"><name pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:14">dc</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:29">condexec_mask</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <operator pos:start="79:33" pos:end="79:33">(</operator><name pos:start="79:34" pos:end="79:50"><name pos:start="79:34" pos:end="79:35">dc</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:50">condexec_mask</name></name> <operator pos:start="79:52" pos:end="79:53">&lt;&lt;</operator> <literal type="number" pos:start="79:55" pos:end="79:55">1</literal><operator pos:start="79:56" pos:end="79:56">)</operator> <operator pos:start="79:58" pos:end="79:58">&amp;</operator> <literal type="number" pos:start="79:60" pos:end="79:63">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="85:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:39">(<expr pos:start="81:17" pos:end="81:38"><name pos:start="81:17" pos:end="81:33"><name pos:start="81:17" pos:end="81:18">dc</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:33">condexec_mask</name></name> <operator pos:start="81:35" pos:end="81:36">==</operator> <literal type="number" pos:start="81:38" pos:end="81:38">0</literal></expr>)</condition> <block pos:start="81:41" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:38">

                <expr_stmt pos:start="83:17" pos:end="83:38"><expr pos:start="83:17" pos:end="83:37"><name pos:start="83:17" pos:end="83:33"><name pos:start="83:17" pos:end="83:18">dc</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:33">condexec_cond</name></name> <operator pos:start="83:35" pos:end="83:35">=</operator> <literal type="number" pos:start="83:37" pos:end="83:37">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="97:5">else <block pos:start="89:12" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:33">

        <decl_stmt pos:start="91:9" pos:end="91:67"><decl pos:start="91:9" pos:end="91:66"><type pos:start="91:9" pos:end="91:20"><name pos:start="91:9" pos:end="91:16">unsigned</name> <name pos:start="91:18" pos:end="91:20">int</name></type> <name pos:start="91:22" pos:end="91:25">insn</name> <init pos:start="91:27" pos:end="91:66">= <expr pos:start="91:29" pos:end="91:66"><call pos:start="91:29" pos:end="91:66"><name pos:start="91:29" pos:end="91:40">arm_ldl_code</name><argument_list pos:start="91:41" pos:end="91:66">(<argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><name pos:start="91:42" pos:end="91:44">env</name></expr></argument>, <argument pos:start="91:47" pos:end="91:52"><expr pos:start="91:47" pos:end="91:52"><name pos:start="91:47" pos:end="91:52"><name pos:start="91:47" pos:end="91:48">dc</name><operator pos:start="91:49" pos:end="91:50">-&gt;</operator><name pos:start="91:51" pos:end="91:52">pc</name></name></expr></argument>, <argument pos:start="91:55" pos:end="91:65"><expr pos:start="91:55" pos:end="91:65"><name pos:start="91:55" pos:end="91:65"><name pos:start="91:55" pos:end="91:56">dc</name><operator pos:start="91:57" pos:end="91:58">-&gt;</operator><name pos:start="91:59" pos:end="91:65">sctlr_b</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:20"><expr pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:10">dc</name><operator pos:start="93:11" pos:end="93:12">-&gt;</operator><name pos:start="93:13" pos:end="93:14">pc</name></name> <operator pos:start="93:16" pos:end="93:17">+=</operator> <literal type="number" pos:start="93:19" pos:end="93:19">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:22">disas_arm_insn</name><argument_list pos:start="95:23" pos:end="95:32">(<argument pos:start="95:24" pos:end="95:25"><expr pos:start="95:24" pos:end="95:25"><name pos:start="95:24" pos:end="95:25">dc</name></expr></argument>, <argument pos:start="95:28" pos:end="95:31"><expr pos:start="95:28" pos:end="95:31"><name pos:start="95:28" pos:end="95:31">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:40">(<expr pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:10">dc</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:19">condjmp</name></name> <operator pos:start="101:21" pos:end="101:22">&amp;&amp;</operator> <operator pos:start="101:24" pos:end="101:24">!</operator><name pos:start="101:25" pos:end="101:39"><name pos:start="101:25" pos:end="101:26">dc</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:32">base</name><operator pos:start="101:33" pos:end="101:33">.</operator><name pos:start="101:34" pos:end="101:39">is_jmp</name></name></expr>)</condition> <block pos:start="101:42" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:24">

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><call pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:21">gen_set_label</name><argument_list pos:start="103:22" pos:end="103:36">(<argument pos:start="103:23" pos:end="103:35"><expr pos:start="103:23" pos:end="103:35"><name pos:start="103:23" pos:end="103:35"><name pos:start="103:23" pos:end="103:24">dc</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:35">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:24"><expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:10">dc</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:19">condjmp</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="151:5"><if pos:start="111:5" pos:end="151:5">if <condition pos:start="111:8" pos:end="111:38">(<expr pos:start="111:9" pos:end="111:37"><name pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:10">dc</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:16">base</name><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:23">is_jmp</name></name> <operator pos:start="111:25" pos:end="111:26">==</operator> <name pos:start="111:28" pos:end="111:37">DISAS_NEXT</name></expr>)</condition> <block pos:start="111:40" pos:end="151:5">{<block_content pos:start="123:9" pos:end="149:9">

        <comment type="block" pos:start="113:9" pos:end="119:64">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.  */</comment>



        <if_stmt pos:start="123:9" pos:end="149:9"><if pos:start="123:9" pos:end="149:9">if <condition pos:start="123:12" pos:end="127:41">(<expr pos:start="123:13" pos:end="127:40"><name pos:start="123:13" pos:end="123:18"><name pos:start="123:13" pos:end="123:14">dc</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:18">pc</name></name> <operator pos:start="123:20" pos:end="123:21">&gt;=</operator> <name pos:start="123:23" pos:end="123:41"><name pos:start="123:23" pos:end="123:24">dc</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:41">next_page_start</name></name> <operator pos:start="123:43" pos:end="123:44">||</operator>

            <operator pos:start="125:13" pos:end="125:13">(</operator><name pos:start="125:14" pos:end="125:19"><name pos:start="125:14" pos:end="125:15">dc</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:19">pc</name></name> <operator pos:start="125:21" pos:end="125:22">&gt;=</operator> <name pos:start="125:24" pos:end="125:42"><name pos:start="125:24" pos:end="125:25">dc</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:42">next_page_start</name></name> <operator pos:start="125:44" pos:end="125:44">-</operator> <literal type="number" pos:start="125:46" pos:end="125:46">3</literal> <operator pos:start="125:48" pos:end="125:49">&amp;&amp;</operator>

             <call pos:start="127:14" pos:end="127:39"><name pos:start="127:14" pos:end="127:30">insn_crosses_page</name><argument_list pos:start="127:31" pos:end="127:39">(<argument pos:start="127:32" pos:end="127:34"><expr pos:start="127:32" pos:end="127:34"><name pos:start="127:32" pos:end="127:34">env</name></expr></argument>, <argument pos:start="127:37" pos:end="127:38"><expr pos:start="127:37" pos:end="127:38"><name pos:start="127:37" pos:end="127:38">dc</name></expr></argument>)</argument_list></call><operator pos:start="127:40" pos:end="127:40">)</operator></expr>)</condition> <block pos:start="127:43" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:45">

            <comment type="block" pos:start="129:13" pos:end="145:15">/* We want to stop the TB if the next insn starts in a new page,

             * or if it spans between this page and the next. This means that

             * if we're looking at the last halfword in the page we need to

             * see if it's a 16-bit Thumb insn (which will fit in this TB)

             * or a 32-bit Thumb insn (which won't).

             * This is to avoid generating a silly TB with a single 16-bit insn

             * in it at the end of this page (which would execute correctly

             * but isn't very efficient).

             */</comment>

            <expr_stmt pos:start="147:13" pos:end="147:45"><expr pos:start="147:13" pos:end="147:44"><name pos:start="147:13" pos:end="147:27"><name pos:start="147:13" pos:end="147:14">dc</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:20">base</name><operator pos:start="147:21" pos:end="147:21">.</operator><name pos:start="147:22" pos:end="147:27">is_jmp</name></name> <operator pos:start="147:29" pos:end="147:29">=</operator> <name pos:start="147:31" pos:end="147:44">DISAS_TOO_MANY</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:30"><expr pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:6">dc</name><operator pos:start="155:7" pos:end="155:8">-&gt;</operator><name pos:start="155:9" pos:end="155:12">base</name><operator pos:start="155:13" pos:end="155:13">.</operator><name pos:start="155:14" pos:end="155:20">pc_next</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:29"><name pos:start="155:24" pos:end="155:25">dc</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:29">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:42"><expr pos:start="157:5" pos:end="157:41"><call pos:start="157:5" pos:end="157:41"><name pos:start="157:5" pos:end="157:30">translator_loop_temp_check</name><argument_list pos:start="157:31" pos:end="157:41">(<argument pos:start="157:32" pos:end="157:40"><expr pos:start="157:32" pos:end="157:40"><operator pos:start="157:32" pos:end="157:32">&amp;</operator><name pos:start="157:33" pos:end="157:40"><name pos:start="157:33" pos:end="157:34">dc</name><operator pos:start="157:35" pos:end="157:36">-&gt;</operator><name pos:start="157:37" pos:end="157:40">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
