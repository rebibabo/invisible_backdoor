<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6772.c" pos:tabs="8"><function pos:start="1:1" pos:end="449:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="5:42">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:36"><decl pos:start="3:22" pos:end="3:36"><type pos:start="3:22" pos:end="3:36"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:36">pci_enabled</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:41"><decl pos:start="5:22" pos:end="5:41"><type pos:start="5:22" pos:end="5:41"><name pos:start="5:22" pos:end="5:24">int</name></type> <name pos:start="5:26" pos:end="5:41">kvmclock_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="449:1">{<block_content pos:start="9:5" pos:end="447:5">

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:30">pc_machine</name> <init pos:start="9:32" pos:end="9:52">= <expr pos:start="9:34" pos:end="9:52"><call pos:start="9:34" pos:end="9:52"><name pos:start="9:34" pos:end="9:43">PC_MACHINE</name><argument_list pos:start="9:44" pos:end="9:52">(<argument pos:start="9:45" pos:end="9:51"><expr pos:start="9:45" pos:end="9:51"><name pos:start="9:45" pos:end="9:51">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:31">system_memory</name> <init pos:start="11:33" pos:end="11:53">= <expr pos:start="11:35" pos:end="11:53"><call pos:start="11:35" pos:end="11:53"><name pos:start="11:35" pos:end="11:51">get_system_memory</name><argument_list pos:start="11:52" pos:end="11:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:27">system_io</name> <init pos:start="13:29" pos:end="13:45">= <expr pos:start="13:31" pos:end="13:45"><call pos:start="13:31" pos:end="13:45"><name pos:start="13:31" pos:end="13:43">get_system_io</name><argument_list pos:start="13:44" pos:end="13:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:32">below_4g_mem_size</name></decl>, <decl pos:start="17:35" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:35" pos:end="17:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">PCIBus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">ISABus</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:18">PCII440FXState</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">piix3_devfn</name> <init pos:start="25:21" pos:end="25:24">= <expr pos:start="25:23" pos:end="25:24"><operator pos:start="25:23" pos:end="25:23">-</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:21">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">GSIState</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:45"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:45"><name pos:start="37:16" pos:end="37:17">hd</name><index pos:start="37:18" pos:end="37:45">[<expr pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:29">MAX_IDE_BUS</name> <operator pos:start="37:31" pos:end="37:31">*</operator> <name pos:start="37:33" pos:end="37:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:34"><decl pos:start="39:5" pos:end="39:33"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">BusState</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:20">idebus</name><index pos:start="39:21" pos:end="39:33">[<expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:25"><decl pos:start="41:5" pos:end="41:24"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">ISADevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">ISADevice</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:29"><decl pos:start="47:5" pos:end="47:28"><type pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">MemoryRegion</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:29"><decl pos:start="49:5" pos:end="49:28"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:28"><decl pos:start="51:5" pos:end="51:27"><type pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:15">DeviceState</name> <modifier pos:start="51:17" pos:end="51:17">*</modifier></type><name pos:start="51:18" pos:end="51:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:30"><decl pos:start="53:5" pos:end="53:29"><type pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:14">FWCfgState</name> <modifier pos:start="53:16" pos:end="53:16">*</modifier></type><name pos:start="53:17" pos:end="53:22">fw_cfg</name> <init pos:start="53:24" pos:end="53:29">= <expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:28"><decl pos:start="55:5" pos:end="55:27"><type pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:15">PcGuestInfo</name> <modifier pos:start="55:17" pos:end="55:17">*</modifier></type><name pos:start="55:18" pos:end="55:27">guest_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:22"><decl pos:start="57:5" pos:end="57:21"><type pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:14">ram_addr_t</name></type> <name pos:start="57:16" pos:end="57:21">lowmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="61:5" pos:end="73:7">/* Check whether RAM fits below 4G (leaving 1/2 GByte for IO memory).

     * If it doesn't, we need to split it in chunks below and above 4G.

     * In any case, try to make sure that guest addresses aligned at

     * 1G boundaries get mapped to host addresses aligned at 1G boundaries.

     * For old machine types, use whatever split we used historically to avoid

     * breaking migration.

     */</comment>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:40">(<expr pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:15">machine</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:25">ram_size</name></name> <operator pos:start="75:27" pos:end="75:28">&gt;=</operator> <literal type="number" pos:start="75:30" pos:end="75:39">0xe0000000</literal></expr>)</condition> <block pos:start="75:42" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:58">

        <expr_stmt pos:start="77:9" pos:end="77:58"><expr pos:start="77:9" pos:end="77:57"><name pos:start="77:9" pos:end="77:14">lowmem</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <ternary pos:start="77:18" pos:end="77:57"><condition pos:start="77:18" pos:end="77:33"><expr pos:start="77:18" pos:end="77:31"><name pos:start="77:18" pos:end="77:31">gigabyte_align</name></expr> ?</condition><then pos:start="77:35" pos:end="77:44"> <expr pos:start="77:35" pos:end="77:44"><literal type="number" pos:start="77:35" pos:end="77:44">0xc0000000</literal></expr> </then><else pos:start="77:46" pos:end="77:57">: <expr pos:start="77:48" pos:end="77:57"><literal type="number" pos:start="77:48" pos:end="77:57">0xe0000000</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="83:5">else <block pos:start="79:12" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:28">

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:14">lowmem</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:27">0xe0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="91:7">/* Handle the machine opt max-ram-below-4g.  It is basically doing

     * min(qemu limit, user limit).

     */</comment>

    <if_stmt pos:start="93:5" pos:end="109:5"><if pos:start="93:5" pos:end="109:5">if <condition pos:start="93:8" pos:end="93:46">(<expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:14">lowmem</name> <operator pos:start="93:16" pos:end="93:16">&gt;</operator> <name pos:start="93:18" pos:end="93:45"><name pos:start="93:18" pos:end="93:27">pc_machine</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:45">max_ram_below_4g</name></name></expr>)</condition> <block pos:start="93:48" pos:end="109:5">{<block_content pos:start="95:9" pos:end="107:9">

        <expr_stmt pos:start="95:9" pos:end="95:46"><expr pos:start="95:9" pos:end="95:45"><name pos:start="95:9" pos:end="95:14">lowmem</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:45"><name pos:start="95:18" pos:end="95:27">pc_machine</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:45">max_ram_below_4g</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="107:9"><if pos:start="97:9" pos:end="107:9">if <condition pos:start="97:12" pos:end="99:40">(<expr pos:start="97:13" pos:end="99:39"><name pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:19">machine</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:29">ram_size</name></name> <operator pos:start="97:31" pos:end="97:31">-</operator> <name pos:start="97:33" pos:end="97:38">lowmem</name> <operator pos:start="97:40" pos:end="97:40">&gt;</operator> <name pos:start="97:42" pos:end="97:47">lowmem</name> <operator pos:start="97:49" pos:end="97:50">&amp;&amp;</operator>

            <name pos:start="99:13" pos:end="99:18">lowmem</name> <operator pos:start="99:20" pos:end="99:20">&amp;</operator> <operator pos:start="99:22" pos:end="99:22">(</operator><operator pos:start="99:23" pos:end="99:23">(</operator><literal type="number" pos:start="99:24" pos:end="99:27">1ULL</literal> <operator pos:start="99:29" pos:end="99:30">&lt;&lt;</operator> <literal type="number" pos:start="99:32" pos:end="99:33">30</literal><operator pos:start="99:34" pos:end="99:34">)</operator> <operator pos:start="99:36" pos:end="99:36">-</operator> <literal type="number" pos:start="99:38" pos:end="99:38">1</literal><operator pos:start="99:39" pos:end="99:39">)</operator></expr>)</condition> <block pos:start="99:42" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:55">

            <expr_stmt pos:start="101:13" pos:end="105:55"><expr pos:start="101:13" pos:end="105:54"><call pos:start="101:13" pos:end="105:54"><name pos:start="101:13" pos:end="101:24">error_report</name><argument_list pos:start="101:25" pos:end="105:54">(<argument pos:start="101:26" pos:end="103:76"><expr pos:start="101:26" pos:end="103:76"><literal type="string" pos:start="101:26" pos:end="101:72">"Warning: Large machine and max_ram_below_4g(%"</literal><name pos:start="101:73" pos:end="101:78">PRIu64</name>

                         <literal type="string" pos:start="103:26" pos:end="103:76">") not a multiple of 1G; possible bad performance."</literal></expr></argument>,

                         <argument pos:start="105:26" pos:end="105:53"><expr pos:start="105:26" pos:end="105:53"><name pos:start="105:26" pos:end="105:53"><name pos:start="105:26" pos:end="105:35">pc_machine</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:53">max_ram_below_4g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="125:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:36">(<expr pos:start="113:9" pos:end="113:35"><name pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:15">machine</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:25">ram_size</name></name> <operator pos:start="113:27" pos:end="113:28">&gt;=</operator> <name pos:start="113:30" pos:end="113:35">lowmem</name></expr>)</condition> <block pos:start="113:38" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:35">

        <expr_stmt pos:start="115:9" pos:end="115:55"><expr pos:start="115:9" pos:end="115:54"><name pos:start="115:9" pos:end="115:25">above_4g_mem_size</name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:45"><name pos:start="115:29" pos:end="115:35">machine</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:45">ram_size</name></name> <operator pos:start="115:47" pos:end="115:47">-</operator> <name pos:start="115:49" pos:end="115:54">lowmem</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:25">below_4g_mem_size</name> <operator pos:start="117:27" pos:end="117:27">=</operator> <name pos:start="117:29" pos:end="117:34">lowmem</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="125:5">else <block pos:start="119:12" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:46">

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:25">above_4g_mem_size</name> <operator pos:start="121:27" pos:end="121:27">=</operator> <literal type="number" pos:start="121:29" pos:end="121:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:46"><expr pos:start="123:9" pos:end="123:45"><name pos:start="123:9" pos:end="123:25">below_4g_mem_size</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <name pos:start="123:29" pos:end="123:45"><name pos:start="123:29" pos:end="123:35">machine</name><operator pos:start="123:36" pos:end="123:37">-&gt;</operator><name pos:start="123:38" pos:end="123:45">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="129:5" pos:end="137:5"><if pos:start="129:5" pos:end="137:5">if <condition pos:start="129:8" pos:end="131:56">(<expr pos:start="129:9" pos:end="131:55"><call pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:19">xen_enabled</name><argument_list pos:start="129:20" pos:end="129:21">()</argument_list></call> <operator pos:start="129:23" pos:end="129:24">&amp;&amp;</operator> <call pos:start="129:26" pos:end="131:50"><name pos:start="129:26" pos:end="129:37">xen_hvm_init</name><argument_list pos:start="129:38" pos:end="131:50">(<argument pos:start="129:39" pos:end="129:56"><expr pos:start="129:39" pos:end="129:56"><operator pos:start="129:39" pos:end="129:39">&amp;</operator><name pos:start="129:40" pos:end="129:56">below_4g_mem_size</name></expr></argument>, <argument pos:start="129:59" pos:end="129:76"><expr pos:start="129:59" pos:end="129:76"><operator pos:start="129:59" pos:end="129:59">&amp;</operator><name pos:start="129:60" pos:end="129:76">above_4g_mem_size</name></expr></argument>,

                                      <argument pos:start="131:39" pos:end="131:49"><expr pos:start="131:39" pos:end="131:49"><operator pos:start="131:39" pos:end="131:39">&amp;</operator><name pos:start="131:40" pos:end="131:49">ram_memory</name></expr></argument>)</argument_list></call> <operator pos:start="131:52" pos:end="131:53">!=</operator> <literal type="number" pos:start="131:55" pos:end="131:55">0</literal></expr>)</condition> <block pos:start="131:58" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:16">

        <expr_stmt pos:start="133:9" pos:end="133:80"><expr pos:start="133:9" pos:end="133:79"><call pos:start="133:9" pos:end="133:79"><name pos:start="133:9" pos:end="133:15">fprintf</name><argument_list pos:start="133:16" pos:end="133:79">(<argument pos:start="133:17" pos:end="133:22"><expr pos:start="133:17" pos:end="133:22"><name pos:start="133:17" pos:end="133:22">stderr</name></expr></argument>, <argument pos:start="133:25" pos:end="133:78"><expr pos:start="133:25" pos:end="133:78"><literal type="string" pos:start="133:25" pos:end="133:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:16"><expr pos:start="135:9" pos:end="135:15"><call pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:12">exit</name><argument_list pos:start="135:13" pos:end="135:15">(<argument pos:start="135:14" pos:end="135:14"><expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:52"><expr pos:start="141:5" pos:end="141:51"><name pos:start="141:5" pos:end="141:14">icc_bridge</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:51"><name pos:start="141:18" pos:end="141:28">qdev_create</name><argument_list pos:start="141:29" pos:end="141:51">(<argument pos:start="141:30" pos:end="141:33"><expr pos:start="141:30" pos:end="141:33"><name pos:start="141:30" pos:end="141:33">NULL</name></expr></argument>, <argument pos:start="141:36" pos:end="141:50"><expr pos:start="141:36" pos:end="141:50"><name pos:start="141:36" pos:end="141:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="145:56"><expr pos:start="143:5" pos:end="145:55"><call pos:start="143:5" pos:end="145:55"><name pos:start="143:5" pos:end="143:29">object_property_add_child</name><argument_list pos:start="143:30" pos:end="145:55">(<argument pos:start="143:31" pos:end="143:48"><expr pos:start="143:31" pos:end="143:48"><call pos:start="143:31" pos:end="143:48"><name pos:start="143:31" pos:end="143:46">qdev_get_machine</name><argument_list pos:start="143:47" pos:end="143:48">()</argument_list></call></expr></argument>, <argument pos:start="143:51" pos:end="143:62"><expr pos:start="143:51" pos:end="143:62"><literal type="string" pos:start="143:51" pos:end="143:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="145:31" pos:end="145:48"><expr pos:start="145:31" pos:end="145:48"><call pos:start="145:31" pos:end="145:48"><name pos:start="145:31" pos:end="145:36">OBJECT</name><argument_list pos:start="145:37" pos:end="145:48">(<argument pos:start="145:38" pos:end="145:47"><expr pos:start="145:38" pos:end="145:47"><name pos:start="145:38" pos:end="145:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:51" pos:end="145:54"><expr pos:start="145:51" pos:end="145:54"><name pos:start="145:51" pos:end="145:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:49"><expr pos:start="149:5" pos:end="149:48"><call pos:start="149:5" pos:end="149:48"><name pos:start="149:5" pos:end="149:16">pc_cpus_init</name><argument_list pos:start="149:17" pos:end="149:48">(<argument pos:start="149:18" pos:end="149:35"><expr pos:start="149:18" pos:end="149:35"><name pos:start="149:18" pos:end="149:35"><name pos:start="149:18" pos:end="149:24">machine</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:35">cpu_model</name></name></expr></argument>, <argument pos:start="149:38" pos:end="149:47"><expr pos:start="149:38" pos:end="149:47"><name pos:start="149:38" pos:end="149:47">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="157:5"><if pos:start="153:5" pos:end="157:5">if <condition pos:start="153:8" pos:end="153:42">(<expr pos:start="153:9" pos:end="153:41"><call pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:19">kvm_enabled</name><argument_list pos:start="153:20" pos:end="153:21">()</argument_list></call> <operator pos:start="153:23" pos:end="153:24">&amp;&amp;</operator> <name pos:start="153:26" pos:end="153:41">kvmclock_enabled</name></expr>)</condition> <block pos:start="153:44" pos:end="157:5">{<block_content pos:start="155:9" pos:end="155:26">

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><call pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:23">kvmclock_create</name><argument_list pos:start="155:24" pos:end="155:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="175:5"><if pos:start="161:5" pos:end="169:5">if <condition pos:start="161:8" pos:end="161:20">(<expr pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:19">pci_enabled</name></expr>)</condition> <block pos:start="161:22" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:32">

        <expr_stmt pos:start="163:9" pos:end="163:44"><expr pos:start="163:9" pos:end="163:43"><name pos:start="163:9" pos:end="163:18">pci_memory</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <call pos:start="163:22" pos:end="163:43"><name pos:start="163:22" pos:end="163:26">g_new</name><argument_list pos:start="163:27" pos:end="163:43">(<argument pos:start="163:28" pos:end="163:39"><expr pos:start="163:28" pos:end="163:39"><name pos:start="163:28" pos:end="163:39">MemoryRegion</name></expr></argument>, <argument pos:start="163:42" pos:end="163:42"><expr pos:start="163:42" pos:end="163:42"><literal type="number" pos:start="163:42" pos:end="163:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:64"><expr pos:start="165:9" pos:end="165:63"><call pos:start="165:9" pos:end="165:63"><name pos:start="165:9" pos:end="165:26">memory_region_init</name><argument_list pos:start="165:27" pos:end="165:63">(<argument pos:start="165:28" pos:end="165:37"><expr pos:start="165:28" pos:end="165:37"><name pos:start="165:28" pos:end="165:37">pci_memory</name></expr></argument>, <argument pos:start="165:40" pos:end="165:43"><expr pos:start="165:40" pos:end="165:43"><name pos:start="165:40" pos:end="165:43">NULL</name></expr></argument>, <argument pos:start="165:46" pos:end="165:50"><expr pos:start="165:46" pos:end="165:50"><literal type="string" pos:start="165:46" pos:end="165:50">"pci"</literal></expr></argument>, <argument pos:start="165:53" pos:end="165:62"><expr pos:start="165:53" pos:end="165:62"><name pos:start="165:53" pos:end="165:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:32"><expr pos:start="167:9" pos:end="167:31"><name pos:start="167:9" pos:end="167:18">rom_memory</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <name pos:start="167:22" pos:end="167:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="175:5">else <block pos:start="169:12" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:35">

        <expr_stmt pos:start="171:9" pos:end="171:26"><expr pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:18">pci_memory</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <name pos:start="171:22" pos:end="171:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:35"><expr pos:start="173:9" pos:end="173:34"><name pos:start="173:9" pos:end="173:18">rom_memory</name> <operator pos:start="173:20" pos:end="173:20">=</operator> <name pos:start="173:22" pos:end="173:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:74"><expr pos:start="179:5" pos:end="179:73"><name pos:start="179:5" pos:end="179:14">guest_info</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <call pos:start="179:18" pos:end="179:73"><name pos:start="179:18" pos:end="179:35">pc_guest_info_init</name><argument_list pos:start="179:36" pos:end="179:73">(<argument pos:start="179:37" pos:end="179:53"><expr pos:start="179:37" pos:end="179:53"><name pos:start="179:37" pos:end="179:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="179:56" pos:end="179:72"><expr pos:start="179:56" pos:end="179:72"><name pos:start="179:56" pos:end="179:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:48"><expr pos:start="183:5" pos:end="183:47"><name pos:start="183:5" pos:end="183:30"><name pos:start="183:5" pos:end="183:14">guest_info</name><operator pos:start="183:15" pos:end="183:16">-&gt;</operator><name pos:start="183:17" pos:end="183:30">has_acpi_build</name></name> <operator pos:start="183:32" pos:end="183:32">=</operator> <name pos:start="183:34" pos:end="183:47">has_acpi_build</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:64"><expr pos:start="185:5" pos:end="185:63"><name pos:start="185:5" pos:end="185:38"><name pos:start="185:5" pos:end="185:14">guest_info</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:38">legacy_acpi_table_size</name></name> <operator pos:start="185:40" pos:end="185:40">=</operator> <name pos:start="185:42" pos:end="185:63">legacy_acpi_table_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:44"><expr pos:start="189:5" pos:end="189:43"><name pos:start="189:5" pos:end="189:28"><name pos:start="189:5" pos:end="189:14">guest_info</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:28">isapc_ram_fw</name></name> <operator pos:start="189:30" pos:end="189:30">=</operator> <operator pos:start="189:32" pos:end="189:32">!</operator><name pos:start="189:33" pos:end="189:43">pci_enabled</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:58"><expr pos:start="191:5" pos:end="191:57"><name pos:start="191:5" pos:end="191:35"><name pos:start="191:5" pos:end="191:14">guest_info</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:35">has_reserved_memory</name></name> <operator pos:start="191:37" pos:end="191:37">=</operator> <name pos:start="191:39" pos:end="191:57">has_reserved_memory</name></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="205:5"><if pos:start="195:5" pos:end="205:5">if <condition pos:start="195:8" pos:end="195:24">(<expr pos:start="195:9" pos:end="195:23"><name pos:start="195:9" pos:end="195:23">smbios_defaults</name></expr>)</condition> <block pos:start="195:26" pos:end="205:5">{<block_content pos:start="197:9" pos:end="203:58">

        <decl_stmt pos:start="197:9" pos:end="197:54"><decl pos:start="197:9" pos:end="197:53"><type pos:start="197:9" pos:end="197:22"><name pos:start="197:9" pos:end="197:20">MachineClass</name> <modifier pos:start="197:22" pos:end="197:22">*</modifier></type><name pos:start="197:23" pos:end="197:24">mc</name> <init pos:start="197:26" pos:end="197:53">= <expr pos:start="197:28" pos:end="197:53"><call pos:start="197:28" pos:end="197:53"><name pos:start="197:28" pos:end="197:44">MACHINE_GET_CLASS</name><argument_list pos:start="197:45" pos:end="197:53">(<argument pos:start="197:46" pos:end="197:52"><expr pos:start="197:46" pos:end="197:52"><name pos:start="197:46" pos:end="197:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="199:9" pos:end="199:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="201:9" pos:end="203:58"><expr pos:start="201:9" pos:end="203:57"><call pos:start="201:9" pos:end="203:57"><name pos:start="201:9" pos:end="201:27">smbios_set_defaults</name><argument_list pos:start="201:28" pos:end="203:57">(<argument pos:start="201:29" pos:end="201:34"><expr pos:start="201:29" pos:end="201:34"><literal type="string" pos:start="201:29" pos:end="201:34">"QEMU"</literal></expr></argument>, <argument pos:start="201:37" pos:end="201:71"><expr pos:start="201:37" pos:end="201:71"><literal type="string" pos:start="201:37" pos:end="201:71">"Standard PC (i440FX + PIIX, 1996)"</literal></expr></argument>,

                            <argument pos:start="203:29" pos:end="203:36"><expr pos:start="203:29" pos:end="203:36"><name pos:start="203:29" pos:end="203:36"><name pos:start="203:29" pos:end="203:30">mc</name><operator pos:start="203:31" pos:end="203:32">-&gt;</operator><name pos:start="203:33" pos:end="203:36">name</name></name></expr></argument>, <argument pos:start="203:39" pos:end="203:56"><expr pos:start="203:39" pos:end="203:56"><name pos:start="203:39" pos:end="203:56">smbios_legacy_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="211:5" pos:end="233:5"><if pos:start="211:5" pos:end="219:5">if <condition pos:start="211:8" pos:end="211:23">(<expr pos:start="211:9" pos:end="211:22"><operator pos:start="211:9" pos:end="211:9">!</operator><call pos:start="211:10" pos:end="211:22"><name pos:start="211:10" pos:end="211:20">xen_enabled</name><argument_list pos:start="211:21" pos:end="211:22">()</argument_list></call></expr>)</condition> <block pos:start="211:25" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:69">

        <expr_stmt pos:start="213:9" pos:end="217:69"><expr pos:start="213:9" pos:end="217:68"><name pos:start="213:9" pos:end="213:14">fw_cfg</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <call pos:start="213:18" pos:end="217:68"><name pos:start="213:18" pos:end="213:31">pc_memory_init</name><argument_list pos:start="213:32" pos:end="217:68">(<argument pos:start="213:33" pos:end="213:39"><expr pos:start="213:33" pos:end="213:39"><name pos:start="213:33" pos:end="213:39">machine</name></expr></argument>, <argument pos:start="213:42" pos:end="213:54"><expr pos:start="213:42" pos:end="213:54"><name pos:start="213:42" pos:end="213:54">system_memory</name></expr></argument>,

                                <argument pos:start="215:33" pos:end="215:49"><expr pos:start="215:33" pos:end="215:49"><name pos:start="215:33" pos:end="215:49">below_4g_mem_size</name></expr></argument>, <argument pos:start="215:52" pos:end="215:68"><expr pos:start="215:52" pos:end="215:68"><name pos:start="215:52" pos:end="215:68">above_4g_mem_size</name></expr></argument>,

                                <argument pos:start="217:33" pos:end="217:42"><expr pos:start="217:33" pos:end="217:42"><name pos:start="217:33" pos:end="217:42">rom_memory</name></expr></argument>, <argument pos:start="217:45" pos:end="217:55"><expr pos:start="217:45" pos:end="217:55"><operator pos:start="217:45" pos:end="217:45">&amp;</operator><name pos:start="217:46" pos:end="217:55">ram_memory</name></expr></argument>, <argument pos:start="217:58" pos:end="217:67"><expr pos:start="217:58" pos:end="217:67"><name pos:start="217:58" pos:end="217:67">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="219:7" pos:end="233:5">else if <condition pos:start="219:15" pos:end="219:48">(<expr pos:start="219:16" pos:end="219:47"><name pos:start="219:16" pos:end="219:39"><name pos:start="219:16" pos:end="219:22">machine</name><operator pos:start="219:23" pos:end="219:24">-&gt;</operator><name pos:start="219:25" pos:end="219:39">kernel_filename</name></name> <operator pos:start="219:41" pos:end="219:42">!=</operator> <name pos:start="219:44" pos:end="219:47">NULL</name></expr>)</condition> <block pos:start="219:50" pos:end="233:5">{<block_content pos:start="223:9" pos:end="231:44">

        <comment type="block" pos:start="221:9" pos:end="221:61">/* For xen HVM direct kernel boot, load linux here */</comment>

        <expr_stmt pos:start="223:9" pos:end="231:44"><expr pos:start="223:9" pos:end="231:43"><name pos:start="223:9" pos:end="223:14">fw_cfg</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <call pos:start="223:18" pos:end="231:43"><name pos:start="223:18" pos:end="223:31">xen_load_linux</name><argument_list pos:start="223:32" pos:end="231:43">(<argument pos:start="223:33" pos:end="223:56"><expr pos:start="223:33" pos:end="223:56"><name pos:start="223:33" pos:end="223:56"><name pos:start="223:33" pos:end="223:39">machine</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:56">kernel_filename</name></name></expr></argument>,

                                <argument pos:start="225:33" pos:end="225:55"><expr pos:start="225:33" pos:end="225:55"><name pos:start="225:33" pos:end="225:55"><name pos:start="225:33" pos:end="225:39">machine</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:55">kernel_cmdline</name></name></expr></argument>,

                                <argument pos:start="227:33" pos:end="227:56"><expr pos:start="227:33" pos:end="227:56"><name pos:start="227:33" pos:end="227:56"><name pos:start="227:33" pos:end="227:39">machine</name><operator pos:start="227:40" pos:end="227:41">-&gt;</operator><name pos:start="227:42" pos:end="227:56">initrd_filename</name></name></expr></argument>,

                                <argument pos:start="229:33" pos:end="229:49"><expr pos:start="229:33" pos:end="229:49"><name pos:start="229:33" pos:end="229:49">below_4g_mem_size</name></expr></argument>,

                                <argument pos:start="231:33" pos:end="231:42"><expr pos:start="231:33" pos:end="231:42"><name pos:start="231:33" pos:end="231:42">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:46"><expr pos:start="237:5" pos:end="237:45"><name pos:start="237:5" pos:end="237:13">gsi_state</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <call pos:start="237:17" pos:end="237:45"><name pos:start="237:17" pos:end="237:25">g_malloc0</name><argument_list pos:start="237:26" pos:end="237:45">(<argument pos:start="237:27" pos:end="237:44"><expr pos:start="237:27" pos:end="237:44"><sizeof pos:start="237:27" pos:end="237:44">sizeof<argument_list pos:start="237:33" pos:end="237:44">(<argument pos:start="237:34" pos:end="237:43"><expr pos:start="237:34" pos:end="237:43"><operator pos:start="237:34" pos:end="237:34">*</operator><name pos:start="237:35" pos:end="237:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="239:5" pos:end="251:5"><if pos:start="239:5" pos:end="247:5">if <condition pos:start="239:8" pos:end="239:32">(<expr pos:start="239:9" pos:end="239:31"><call pos:start="239:9" pos:end="239:31"><name pos:start="239:9" pos:end="239:29">kvm_irqchip_in_kernel</name><argument_list pos:start="239:30" pos:end="239:31">()</argument_list></call></expr>)</condition> <block pos:start="239:34" pos:end="247:5">{<block_content pos:start="241:9" pos:end="245:47">

        <expr_stmt pos:start="241:9" pos:end="241:46"><expr pos:start="241:9" pos:end="241:45"><call pos:start="241:9" pos:end="241:45"><name pos:start="241:9" pos:end="241:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="241:33" pos:end="241:45">(<argument pos:start="241:34" pos:end="241:44"><expr pos:start="241:34" pos:end="241:44"><name pos:start="241:34" pos:end="241:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="245:47"><expr pos:start="243:9" pos:end="245:46"><name pos:start="243:9" pos:end="243:11">gsi</name> <operator pos:start="243:13" pos:end="243:13">=</operator> <call pos:start="243:15" pos:end="245:46"><name pos:start="243:15" pos:end="243:32">qemu_allocate_irqs</name><argument_list pos:start="243:33" pos:end="245:46">(<argument pos:start="243:34" pos:end="243:51"><expr pos:start="243:34" pos:end="243:51"><name pos:start="243:34" pos:end="243:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="243:54" pos:end="243:62"><expr pos:start="243:54" pos:end="243:62"><name pos:start="243:54" pos:end="243:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="245:34" pos:end="245:45"><expr pos:start="245:34" pos:end="245:45"><name pos:start="245:34" pos:end="245:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="247:7" pos:end="251:5">else <block pos:start="247:12" pos:end="251:5">{<block_content pos:start="249:9" pos:end="249:71">

        <expr_stmt pos:start="249:9" pos:end="249:71"><expr pos:start="249:9" pos:end="249:70"><name pos:start="249:9" pos:end="249:11">gsi</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <call pos:start="249:15" pos:end="249:70"><name pos:start="249:15" pos:end="249:32">qemu_allocate_irqs</name><argument_list pos:start="249:33" pos:end="249:70">(<argument pos:start="249:34" pos:end="249:44"><expr pos:start="249:34" pos:end="249:44"><name pos:start="249:34" pos:end="249:44">gsi_handler</name></expr></argument>, <argument pos:start="249:47" pos:end="249:55"><expr pos:start="249:47" pos:end="249:55"><name pos:start="249:47" pos:end="249:55">gsi_state</name></expr></argument>, <argument pos:start="249:58" pos:end="249:69"><expr pos:start="249:58" pos:end="249:69"><name pos:start="249:58" pos:end="249:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="255:5" pos:end="277:5"><if pos:start="255:5" pos:end="267:5">if <condition pos:start="255:8" pos:end="255:20">(<expr pos:start="255:9" pos:end="255:19"><name pos:start="255:9" pos:end="255:19">pci_enabled</name></expr>)</condition> <block pos:start="255:22" pos:end="267:5">{<block_content pos:start="257:9" pos:end="265:54">

        <expr_stmt pos:start="257:9" pos:end="265:54"><expr pos:start="257:9" pos:end="265:53"><name pos:start="257:9" pos:end="257:15">pci_bus</name> <operator pos:start="257:17" pos:end="257:17">=</operator> <call pos:start="257:19" pos:end="265:53"><name pos:start="257:19" pos:end="257:29">i440fx_init</name><argument_list pos:start="257:30" pos:end="265:53">(<argument pos:start="257:31" pos:end="257:43"><expr pos:start="257:31" pos:end="257:43"><operator pos:start="257:31" pos:end="257:31">&amp;</operator><name pos:start="257:32" pos:end="257:43">i440fx_state</name></expr></argument>, <argument pos:start="257:46" pos:end="257:57"><expr pos:start="257:46" pos:end="257:57"><operator pos:start="257:46" pos:end="257:46">&amp;</operator><name pos:start="257:47" pos:end="257:57">piix3_devfn</name></expr></argument>, <argument pos:start="257:60" pos:end="257:67"><expr pos:start="257:60" pos:end="257:67"><operator pos:start="257:60" pos:end="257:60">&amp;</operator><name pos:start="257:61" pos:end="257:67">isa_bus</name></expr></argument>, <argument pos:start="257:70" pos:end="257:72"><expr pos:start="257:70" pos:end="257:72"><name pos:start="257:70" pos:end="257:72">gsi</name></expr></argument>,

                              <argument pos:start="259:31" pos:end="259:43"><expr pos:start="259:31" pos:end="259:43"><name pos:start="259:31" pos:end="259:43">system_memory</name></expr></argument>, <argument pos:start="259:46" pos:end="259:54"><expr pos:start="259:46" pos:end="259:54"><name pos:start="259:46" pos:end="259:54">system_io</name></expr></argument>, <argument pos:start="259:57" pos:end="259:73"><expr pos:start="259:57" pos:end="259:73"><name pos:start="259:57" pos:end="259:73"><name pos:start="259:57" pos:end="259:63">machine</name><operator pos:start="259:64" pos:end="259:65">-&gt;</operator><name pos:start="259:66" pos:end="259:73">ram_size</name></name></expr></argument>,

                              <argument pos:start="261:31" pos:end="261:47"><expr pos:start="261:31" pos:end="261:47"><name pos:start="261:31" pos:end="261:47">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="263:31" pos:end="263:47"><expr pos:start="263:31" pos:end="263:47"><name pos:start="263:31" pos:end="263:47">above_4g_mem_size</name></expr></argument>,

                              <argument pos:start="265:31" pos:end="265:40"><expr pos:start="265:31" pos:end="265:40"><name pos:start="265:31" pos:end="265:40">pci_memory</name></expr></argument>, <argument pos:start="265:43" pos:end="265:52"><expr pos:start="265:43" pos:end="265:52"><name pos:start="265:43" pos:end="265:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="267:7" pos:end="277:5">else <block pos:start="267:12" pos:end="277:5">{<block_content pos:start="269:9" pos:end="275:20">

        <expr_stmt pos:start="269:9" pos:end="269:23"><expr pos:start="269:9" pos:end="269:22"><name pos:start="269:9" pos:end="269:15">pci_bus</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <name pos:start="269:19" pos:end="269:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:28"><expr pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:20">i440fx_state</name> <operator pos:start="271:22" pos:end="271:22">=</operator> <name pos:start="271:24" pos:end="271:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:47"><expr pos:start="273:9" pos:end="273:46"><name pos:start="273:9" pos:end="273:15">isa_bus</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <call pos:start="273:19" pos:end="273:46"><name pos:start="273:19" pos:end="273:29">isa_bus_new</name><argument_list pos:start="273:30" pos:end="273:46">(<argument pos:start="273:31" pos:end="273:34"><expr pos:start="273:31" pos:end="273:34"><name pos:start="273:31" pos:end="273:34">NULL</name></expr></argument>, <argument pos:start="273:37" pos:end="273:45"><expr pos:start="273:37" pos:end="273:45"><name pos:start="273:37" pos:end="273:45">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:20"><expr pos:start="275:9" pos:end="275:19"><name pos:start="275:9" pos:end="275:15">no_hpet</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <literal type="number" pos:start="275:19" pos:end="275:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:31"><expr pos:start="279:5" pos:end="279:30"><call pos:start="279:5" pos:end="279:30"><name pos:start="279:5" pos:end="279:16">isa_bus_irqs</name><argument_list pos:start="279:17" pos:end="279:30">(<argument pos:start="279:18" pos:end="279:24"><expr pos:start="279:18" pos:end="279:24"><name pos:start="279:18" pos:end="279:24">isa_bus</name></expr></argument>, <argument pos:start="279:27" pos:end="279:29"><expr pos:start="279:27" pos:end="279:29"><name pos:start="279:27" pos:end="279:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="283:5" pos:end="297:5"><if pos:start="283:5" pos:end="287:5">if <condition pos:start="283:8" pos:end="283:32">(<expr pos:start="283:9" pos:end="283:31"><call pos:start="283:9" pos:end="283:31"><name pos:start="283:9" pos:end="283:29">kvm_irqchip_in_kernel</name><argument_list pos:start="283:30" pos:end="283:31">()</argument_list></call></expr>)</condition> <block pos:start="283:34" pos:end="287:5">{<block_content pos:start="285:9" pos:end="285:40">

        <expr_stmt pos:start="285:9" pos:end="285:40"><expr pos:start="285:9" pos:end="285:39"><name pos:start="285:9" pos:end="285:13">i8259</name> <operator pos:start="285:15" pos:end="285:15">=</operator> <call pos:start="285:17" pos:end="285:39"><name pos:start="285:17" pos:end="285:30">kvm_i8259_init</name><argument_list pos:start="285:31" pos:end="285:39">(<argument pos:start="285:32" pos:end="285:38"><expr pos:start="285:32" pos:end="285:38"><name pos:start="285:32" pos:end="285:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="287:7" pos:end="291:5">else if <condition pos:start="287:15" pos:end="287:29">(<expr pos:start="287:16" pos:end="287:28"><call pos:start="287:16" pos:end="287:28"><name pos:start="287:16" pos:end="287:26">xen_enabled</name><argument_list pos:start="287:27" pos:end="287:28">()</argument_list></call></expr>)</condition> <block pos:start="287:31" pos:end="291:5">{<block_content pos:start="289:9" pos:end="289:48">

        <expr_stmt pos:start="289:9" pos:end="289:48"><expr pos:start="289:9" pos:end="289:47"><name pos:start="289:9" pos:end="289:13">i8259</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <call pos:start="289:17" pos:end="289:47"><name pos:start="289:17" pos:end="289:45">xen_interrupt_controller_init</name><argument_list pos:start="289:46" pos:end="289:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="291:7" pos:end="297:5">else <block pos:start="291:12" pos:end="297:5">{<block_content pos:start="293:9" pos:end="295:48">

        <expr_stmt pos:start="293:9" pos:end="293:40"><expr pos:start="293:9" pos:end="293:39"><name pos:start="293:9" pos:end="293:15">cpu_irq</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <call pos:start="293:19" pos:end="293:39"><name pos:start="293:19" pos:end="293:37">pc_allocate_cpu_irq</name><argument_list pos:start="293:38" pos:end="293:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:48"><expr pos:start="295:9" pos:end="295:47"><name pos:start="295:9" pos:end="295:13">i8259</name> <operator pos:start="295:15" pos:end="295:15">=</operator> <call pos:start="295:17" pos:end="295:47"><name pos:start="295:17" pos:end="295:26">i8259_init</name><argument_list pos:start="295:27" pos:end="295:47">(<argument pos:start="295:28" pos:end="295:34"><expr pos:start="295:28" pos:end="295:34"><name pos:start="295:28" pos:end="295:34">isa_bus</name></expr></argument>, <argument pos:start="295:37" pos:end="295:46"><expr pos:start="295:37" pos:end="295:46"><name pos:start="295:37" pos:end="295:46"><name pos:start="295:37" pos:end="295:43">cpu_irq</name><index pos:start="295:44" pos:end="295:46">[<expr pos:start="295:45" pos:end="295:45"><literal type="number" pos:start="295:45" pos:end="295:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="301:5" pos:end="305:5">for <control pos:start="301:9" pos:end="301:38">(<init pos:start="301:10" pos:end="301:15"><expr pos:start="301:10" pos:end="301:14"><name pos:start="301:10" pos:end="301:10">i</name> <operator pos:start="301:12" pos:end="301:12">=</operator> <literal type="number" pos:start="301:14" pos:end="301:14">0</literal></expr>;</init> <condition pos:start="301:17" pos:end="301:33"><expr pos:start="301:17" pos:end="301:32"><name pos:start="301:17" pos:end="301:17">i</name> <operator pos:start="301:19" pos:end="301:19">&lt;</operator> <name pos:start="301:21" pos:end="301:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="301:35" pos:end="301:37"><expr pos:start="301:35" pos:end="301:37"><name pos:start="301:35" pos:end="301:35">i</name><operator pos:start="301:36" pos:end="301:37">++</operator></expr></incr>)</control> <block pos:start="301:40" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:43">

        <expr_stmt pos:start="303:9" pos:end="303:43"><expr pos:start="303:9" pos:end="303:42"><name pos:start="303:9" pos:end="303:31"><name pos:start="303:9" pos:end="303:17">gsi_state</name><operator pos:start="303:18" pos:end="303:19">-&gt;</operator><name pos:start="303:20" pos:end="303:28">i8259_irq</name><index pos:start="303:29" pos:end="303:31">[<expr pos:start="303:30" pos:end="303:30"><name pos:start="303:30" pos:end="303:30">i</name></expr>]</index></name> <operator pos:start="303:33" pos:end="303:33">=</operator> <name pos:start="303:35" pos:end="303:42"><name pos:start="303:35" pos:end="303:39">i8259</name><index pos:start="303:40" pos:end="303:42">[<expr pos:start="303:41" pos:end="303:41"><name pos:start="303:41" pos:end="303:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="307:5" pos:end="311:5"><if pos:start="307:5" pos:end="311:5">if <condition pos:start="307:8" pos:end="307:20">(<expr pos:start="307:9" pos:end="307:19"><name pos:start="307:9" pos:end="307:19">pci_enabled</name></expr>)</condition> <block pos:start="307:22" pos:end="311:5">{<block_content pos:start="309:9" pos:end="309:45">

        <expr_stmt pos:start="309:9" pos:end="309:45"><expr pos:start="309:9" pos:end="309:44"><call pos:start="309:9" pos:end="309:44"><name pos:start="309:9" pos:end="309:23">ioapic_init_gsi</name><argument_list pos:start="309:24" pos:end="309:44">(<argument pos:start="309:25" pos:end="309:33"><expr pos:start="309:25" pos:end="309:33"><name pos:start="309:25" pos:end="309:33">gsi_state</name></expr></argument>, <argument pos:start="309:36" pos:end="309:43"><expr pos:start="309:36" pos:end="309:43"><literal type="string" pos:start="309:36" pos:end="309:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:33"><expr pos:start="313:5" pos:end="313:32"><call pos:start="313:5" pos:end="313:32"><name pos:start="313:5" pos:end="313:20">qdev_init_nofail</name><argument_list pos:start="313:21" pos:end="313:32">(<argument pos:start="313:22" pos:end="313:31"><expr pos:start="313:22" pos:end="313:31"><name pos:start="313:22" pos:end="313:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="317:5" pos:end="317:34"><expr pos:start="317:5" pos:end="317:33"><call pos:start="317:5" pos:end="317:33"><name pos:start="317:5" pos:end="317:24">pc_register_ferr_irq</name><argument_list pos:start="317:25" pos:end="317:33">(<argument pos:start="317:26" pos:end="317:32"><expr pos:start="317:26" pos:end="317:32"><name pos:start="317:26" pos:end="317:32"><name pos:start="317:26" pos:end="317:28">gsi</name><index pos:start="317:29" pos:end="317:32">[<expr pos:start="317:30" pos:end="317:31"><literal type="number" pos:start="317:30" pos:end="317:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="321:5" pos:end="321:55"><expr pos:start="321:5" pos:end="321:54"><call pos:start="321:5" pos:end="321:54"><name pos:start="321:5" pos:end="321:15">pc_vga_init</name><argument_list pos:start="321:16" pos:end="321:54">(<argument pos:start="321:17" pos:end="321:23"><expr pos:start="321:17" pos:end="321:23"><name pos:start="321:17" pos:end="321:23">isa_bus</name></expr></argument>, <argument pos:start="321:26" pos:end="321:53"><expr pos:start="321:26" pos:end="321:53"><ternary pos:start="321:26" pos:end="321:53"><condition pos:start="321:26" pos:end="321:38"><expr pos:start="321:26" pos:end="321:36"><name pos:start="321:26" pos:end="321:36">pci_enabled</name></expr> ?</condition><then pos:start="321:40" pos:end="321:46"> <expr pos:start="321:40" pos:end="321:46"><name pos:start="321:40" pos:end="321:46">pci_bus</name></expr> </then><else pos:start="321:48" pos:end="321:53">: <expr pos:start="321:50" pos:end="321:53"><name pos:start="321:50" pos:end="321:53">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="327:5" pos:end="329:13"><expr pos:start="327:5" pos:end="329:12"><call pos:start="327:5" pos:end="329:12"><name pos:start="327:5" pos:end="327:24">pc_basic_device_init</name><argument_list pos:start="327:25" pos:end="329:12">(<argument pos:start="327:26" pos:end="327:32"><expr pos:start="327:26" pos:end="327:32"><name pos:start="327:26" pos:end="327:32">isa_bus</name></expr></argument>, <argument pos:start="327:35" pos:end="327:37"><expr pos:start="327:35" pos:end="327:37"><name pos:start="327:35" pos:end="327:37">gsi</name></expr></argument>, <argument pos:start="327:40" pos:end="327:49"><expr pos:start="327:40" pos:end="327:49"><operator pos:start="327:40" pos:end="327:40">&amp;</operator><name pos:start="327:41" pos:end="327:49">rtc_state</name></expr></argument>, <argument pos:start="327:52" pos:end="327:58"><expr pos:start="327:52" pos:end="327:58"><operator pos:start="327:52" pos:end="327:52">&amp;</operator><name pos:start="327:53" pos:end="327:58">floppy</name></expr></argument>, <argument pos:start="327:61" pos:end="327:73"><expr pos:start="327:61" pos:end="327:73"><call pos:start="327:61" pos:end="327:73"><name pos:start="327:61" pos:end="327:71">xen_enabled</name><argument_list pos:start="327:72" pos:end="327:73">()</argument_list></call></expr></argument>,

        <argument pos:start="329:9" pos:end="329:11"><expr pos:start="329:9" pos:end="329:11"><literal type="number" pos:start="329:9" pos:end="329:11">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="333:5" pos:end="333:34"><expr pos:start="333:5" pos:end="333:33"><call pos:start="333:5" pos:end="333:33"><name pos:start="333:5" pos:end="333:15">pc_nic_init</name><argument_list pos:start="333:16" pos:end="333:33">(<argument pos:start="333:17" pos:end="333:23"><expr pos:start="333:17" pos:end="333:23"><name pos:start="333:17" pos:end="333:23">isa_bus</name></expr></argument>, <argument pos:start="333:26" pos:end="333:32"><expr pos:start="333:26" pos:end="333:32"><name pos:start="333:26" pos:end="333:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="337:5" pos:end="337:35"><expr pos:start="337:5" pos:end="337:34"><call pos:start="337:5" pos:end="337:34"><name pos:start="337:5" pos:end="337:17">ide_drive_get</name><argument_list pos:start="337:18" pos:end="337:34">(<argument pos:start="337:19" pos:end="337:20"><expr pos:start="337:19" pos:end="337:20"><name pos:start="337:19" pos:end="337:20">hd</name></expr></argument>, <argument pos:start="337:23" pos:end="337:33"><expr pos:start="337:23" pos:end="337:33"><name pos:start="337:23" pos:end="337:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="339:5" pos:end="385:5"><if pos:start="339:5" pos:end="357:5">if <condition pos:start="339:8" pos:end="339:20">(<expr pos:start="339:9" pos:end="339:19"><name pos:start="339:9" pos:end="339:19">pci_enabled</name></expr>)</condition> <block pos:start="339:22" pos:end="357:5">{<block_content pos:start="341:9" pos:end="355:60">

        <decl_stmt pos:start="341:9" pos:end="341:23"><decl pos:start="341:9" pos:end="341:22"><type pos:start="341:9" pos:end="341:19"><name pos:start="341:9" pos:end="341:17">PCIDevice</name> <modifier pos:start="341:19" pos:end="341:19">*</modifier></type><name pos:start="341:20" pos:end="341:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="343:9" pos:end="351:9"><if pos:start="343:9" pos:end="347:9">if <condition pos:start="343:12" pos:end="343:26">(<expr pos:start="343:13" pos:end="343:25"><call pos:start="343:13" pos:end="343:25"><name pos:start="343:13" pos:end="343:23">xen_enabled</name><argument_list pos:start="343:24" pos:end="343:25">()</argument_list></call></expr>)</condition> <block pos:start="343:28" pos:end="347:9">{<block_content pos:start="345:13" pos:end="345:71">

            <expr_stmt pos:start="345:13" pos:end="345:71"><expr pos:start="345:13" pos:end="345:70"><name pos:start="345:13" pos:end="345:15">dev</name> <operator pos:start="345:17" pos:end="345:17">=</operator> <call pos:start="345:19" pos:end="345:70"><name pos:start="345:19" pos:end="345:40">pci_piix3_xen_ide_init</name><argument_list pos:start="345:41" pos:end="345:70">(<argument pos:start="345:42" pos:end="345:48"><expr pos:start="345:42" pos:end="345:48"><name pos:start="345:42" pos:end="345:48">pci_bus</name></expr></argument>, <argument pos:start="345:51" pos:end="345:52"><expr pos:start="345:51" pos:end="345:52"><name pos:start="345:51" pos:end="345:52">hd</name></expr></argument>, <argument pos:start="345:55" pos:end="345:69"><expr pos:start="345:55" pos:end="345:69"><name pos:start="345:55" pos:end="345:65">piix3_devfn</name> <operator pos:start="345:67" pos:end="345:67">+</operator> <literal type="number" pos:start="345:69" pos:end="345:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="347:11" pos:end="351:9">else <block pos:start="347:16" pos:end="351:9">{<block_content pos:start="349:13" pos:end="349:67">

            <expr_stmt pos:start="349:13" pos:end="349:67"><expr pos:start="349:13" pos:end="349:66"><name pos:start="349:13" pos:end="349:15">dev</name> <operator pos:start="349:17" pos:end="349:17">=</operator> <call pos:start="349:19" pos:end="349:66"><name pos:start="349:19" pos:end="349:36">pci_piix3_ide_init</name><argument_list pos:start="349:37" pos:end="349:66">(<argument pos:start="349:38" pos:end="349:44"><expr pos:start="349:38" pos:end="349:44"><name pos:start="349:38" pos:end="349:44">pci_bus</name></expr></argument>, <argument pos:start="349:47" pos:end="349:48"><expr pos:start="349:47" pos:end="349:48"><name pos:start="349:47" pos:end="349:48">hd</name></expr></argument>, <argument pos:start="349:51" pos:end="349:65"><expr pos:start="349:51" pos:end="349:65"><name pos:start="349:51" pos:end="349:61">piix3_devfn</name> <operator pos:start="349:63" pos:end="349:63">+</operator> <literal type="number" pos:start="349:65" pos:end="349:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:60"><expr pos:start="353:9" pos:end="353:59"><name pos:start="353:9" pos:end="353:17"><name pos:start="353:9" pos:end="353:14">idebus</name><index pos:start="353:15" pos:end="353:17">[<expr pos:start="353:16" pos:end="353:16"><literal type="number" pos:start="353:16" pos:end="353:16">0</literal></expr>]</index></name> <operator pos:start="353:19" pos:end="353:19">=</operator> <call pos:start="353:21" pos:end="353:59"><name pos:start="353:21" pos:end="353:38">qdev_get_child_bus</name><argument_list pos:start="353:39" pos:end="353:59">(<argument pos:start="353:40" pos:end="353:49"><expr pos:start="353:40" pos:end="353:49"><operator pos:start="353:40" pos:end="353:40">&amp;</operator><name pos:start="353:41" pos:end="353:49"><name pos:start="353:41" pos:end="353:43">dev</name><operator pos:start="353:44" pos:end="353:45">-&gt;</operator><name pos:start="353:46" pos:end="353:49">qdev</name></name></expr></argument>, <argument pos:start="353:52" pos:end="353:58"><expr pos:start="353:52" pos:end="353:58"><literal type="string" pos:start="353:52" pos:end="353:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:60"><expr pos:start="355:9" pos:end="355:59"><name pos:start="355:9" pos:end="355:17"><name pos:start="355:9" pos:end="355:14">idebus</name><index pos:start="355:15" pos:end="355:17">[<expr pos:start="355:16" pos:end="355:16"><literal type="number" pos:start="355:16" pos:end="355:16">1</literal></expr>]</index></name> <operator pos:start="355:19" pos:end="355:19">=</operator> <call pos:start="355:21" pos:end="355:59"><name pos:start="355:21" pos:end="355:38">qdev_get_child_bus</name><argument_list pos:start="355:39" pos:end="355:59">(<argument pos:start="355:40" pos:end="355:49"><expr pos:start="355:40" pos:end="355:49"><operator pos:start="355:40" pos:end="355:40">&amp;</operator><name pos:start="355:41" pos:end="355:49"><name pos:start="355:41" pos:end="355:43">dev</name><operator pos:start="355:44" pos:end="355:45">-&gt;</operator><name pos:start="355:46" pos:end="355:49">qdev</name></name></expr></argument>, <argument pos:start="355:52" pos:end="355:58"><expr pos:start="355:52" pos:end="355:58"><literal type="string" pos:start="355:52" pos:end="355:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="357:7" pos:end="385:5">else <block pos:start="357:12" pos:end="385:5">{<block_content pos:start="359:9" pos:end="383:9">

        <for pos:start="359:9" pos:end="383:9">for<control pos:start="359:12" pos:end="359:40">(<init pos:start="359:13" pos:end="359:18"><expr pos:start="359:13" pos:end="359:17"><name pos:start="359:13" pos:end="359:13">i</name> <operator pos:start="359:15" pos:end="359:15">=</operator> <literal type="number" pos:start="359:17" pos:end="359:17">0</literal></expr>;</init> <condition pos:start="359:20" pos:end="359:35"><expr pos:start="359:20" pos:end="359:34"><name pos:start="359:20" pos:end="359:20">i</name> <operator pos:start="359:22" pos:end="359:22">&lt;</operator> <name pos:start="359:24" pos:end="359:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="359:37" pos:end="359:39"><expr pos:start="359:37" pos:end="359:39"><name pos:start="359:37" pos:end="359:37">i</name><operator pos:start="359:38" pos:end="359:39">++</operator></expr></incr>)</control> <block pos:start="359:42" pos:end="383:9">{<block_content pos:start="361:13" pos:end="381:65">

            <decl_stmt pos:start="361:13" pos:end="361:27"><decl pos:start="361:13" pos:end="361:26"><type pos:start="361:13" pos:end="361:23"><name pos:start="361:13" pos:end="361:21">ISADevice</name> <modifier pos:start="361:23" pos:end="361:23">*</modifier></type><name pos:start="361:24" pos:end="361:26">dev</name></decl>;</decl_stmt>

            <decl_stmt pos:start="363:13" pos:end="363:37"><decl pos:start="363:13" pos:end="363:36"><type pos:start="363:13" pos:end="363:16"><name pos:start="363:13" pos:end="363:16">char</name></type> <name pos:start="363:18" pos:end="363:26"><name pos:start="363:18" pos:end="363:24">busname</name><index pos:start="363:25" pos:end="363:26">[]</index></name> <init pos:start="363:28" pos:end="363:36">= <expr pos:start="363:30" pos:end="363:36"><literal type="string" pos:start="363:30" pos:end="363:36">"ide.0"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="365:13" pos:end="369:79"><expr pos:start="365:13" pos:end="369:78"><name pos:start="365:13" pos:end="365:15">dev</name> <operator pos:start="365:17" pos:end="365:17">=</operator> <call pos:start="365:19" pos:end="369:78"><name pos:start="365:19" pos:end="365:30">isa_ide_init</name><argument_list pos:start="365:31" pos:end="369:78">(<argument pos:start="365:32" pos:end="365:38"><expr pos:start="365:32" pos:end="365:38"><name pos:start="365:32" pos:end="365:38">isa_bus</name></expr></argument>, <argument pos:start="365:41" pos:end="365:53"><expr pos:start="365:41" pos:end="365:53"><name pos:start="365:41" pos:end="365:53"><name pos:start="365:41" pos:end="365:50">ide_iobase</name><index pos:start="365:51" pos:end="365:53">[<expr pos:start="365:52" pos:end="365:52"><name pos:start="365:52" pos:end="365:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="365:56" pos:end="365:69"><expr pos:start="365:56" pos:end="365:69"><name pos:start="365:56" pos:end="365:69"><name pos:start="365:56" pos:end="365:66">ide_iobase2</name><index pos:start="365:67" pos:end="365:69">[<expr pos:start="365:68" pos:end="365:68"><name pos:start="365:68" pos:end="365:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="367:32" pos:end="367:41"><expr pos:start="367:32" pos:end="367:41"><name pos:start="367:32" pos:end="367:41"><name pos:start="367:32" pos:end="367:38">ide_irq</name><index pos:start="367:39" pos:end="367:41">[<expr pos:start="367:40" pos:end="367:40"><name pos:start="367:40" pos:end="367:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="369:32" pos:end="369:51"><expr pos:start="369:32" pos:end="369:51"><name pos:start="369:32" pos:end="369:51"><name pos:start="369:32" pos:end="369:33">hd</name><index pos:start="369:34" pos:end="369:51">[<expr pos:start="369:35" pos:end="369:50"><name pos:start="369:35" pos:end="369:46">MAX_IDE_DEVS</name> <operator pos:start="369:48" pos:end="369:48">*</operator> <name pos:start="369:50" pos:end="369:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="369:54" pos:end="369:77"><expr pos:start="369:54" pos:end="369:77"><name pos:start="369:54" pos:end="369:77"><name pos:start="369:54" pos:end="369:55">hd</name><index pos:start="369:56" pos:end="369:77">[<expr pos:start="369:57" pos:end="369:76"><name pos:start="369:57" pos:end="369:68">MAX_IDE_DEVS</name> <operator pos:start="369:70" pos:end="369:70">*</operator> <name pos:start="369:72" pos:end="369:72">i</name> <operator pos:start="369:74" pos:end="369:74">+</operator> <literal type="number" pos:start="369:76" pos:end="369:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="371:13" pos:end="377:15">/*

             * The ide bus name is ide.0 for the first bus and ide.1 for the

             * second one.

             */</comment>

            <expr_stmt pos:start="379:13" pos:end="379:33"><expr pos:start="379:13" pos:end="379:32"><name pos:start="379:13" pos:end="379:22"><name pos:start="379:13" pos:end="379:19">busname</name><index pos:start="379:20" pos:end="379:22">[<expr pos:start="379:21" pos:end="379:21"><literal type="number" pos:start="379:21" pos:end="379:21">4</literal></expr>]</index></name> <operator pos:start="379:24" pos:end="379:24">=</operator> <literal type="char" pos:start="379:26" pos:end="379:28">'0'</literal> <operator pos:start="379:30" pos:end="379:30">+</operator> <name pos:start="379:32" pos:end="379:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:65"><expr pos:start="381:13" pos:end="381:64"><name pos:start="381:13" pos:end="381:21"><name pos:start="381:13" pos:end="381:18">idebus</name><index pos:start="381:19" pos:end="381:21">[<expr pos:start="381:20" pos:end="381:20"><name pos:start="381:20" pos:end="381:20">i</name></expr>]</index></name> <operator pos:start="381:23" pos:end="381:23">=</operator> <call pos:start="381:25" pos:end="381:64"><name pos:start="381:25" pos:end="381:42">qdev_get_child_bus</name><argument_list pos:start="381:43" pos:end="381:64">(<argument pos:start="381:44" pos:end="381:54"><expr pos:start="381:44" pos:end="381:54"><call pos:start="381:44" pos:end="381:54"><name pos:start="381:44" pos:end="381:49">DEVICE</name><argument_list pos:start="381:50" pos:end="381:54">(<argument pos:start="381:51" pos:end="381:53"><expr pos:start="381:51" pos:end="381:53"><name pos:start="381:51" pos:end="381:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="381:57" pos:end="381:63"><expr pos:start="381:57" pos:end="381:63"><name pos:start="381:57" pos:end="381:63">busname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="389:5" pos:end="391:58"><expr pos:start="389:5" pos:end="391:57"><call pos:start="389:5" pos:end="391:57"><name pos:start="389:5" pos:end="389:16">pc_cmos_init</name><argument_list pos:start="389:17" pos:end="391:57">(<argument pos:start="389:18" pos:end="389:34"><expr pos:start="389:18" pos:end="389:34"><name pos:start="389:18" pos:end="389:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="389:37" pos:end="389:53"><expr pos:start="389:37" pos:end="389:53"><name pos:start="389:37" pos:end="389:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="389:56" pos:end="389:74"><expr pos:start="389:56" pos:end="389:74"><name pos:start="389:56" pos:end="389:74"><name pos:start="389:56" pos:end="389:62">machine</name><operator pos:start="389:63" pos:end="389:64">-&gt;</operator><name pos:start="389:65" pos:end="389:74">boot_order</name></name></expr></argument>,

                 <argument pos:start="391:18" pos:end="391:23"><expr pos:start="391:18" pos:end="391:23"><name pos:start="391:18" pos:end="391:23">floppy</name></expr></argument>, <argument pos:start="391:26" pos:end="391:34"><expr pos:start="391:26" pos:end="391:34"><name pos:start="391:26" pos:end="391:34"><name pos:start="391:26" pos:end="391:31">idebus</name><index pos:start="391:32" pos:end="391:34">[<expr pos:start="391:33" pos:end="391:33"><literal type="number" pos:start="391:33" pos:end="391:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="391:37" pos:end="391:45"><expr pos:start="391:37" pos:end="391:45"><name pos:start="391:37" pos:end="391:45"><name pos:start="391:37" pos:end="391:42">idebus</name><index pos:start="391:43" pos:end="391:45">[<expr pos:start="391:44" pos:end="391:44"><literal type="number" pos:start="391:44" pos:end="391:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="391:48" pos:end="391:56"><expr pos:start="391:48" pos:end="391:56"><name pos:start="391:48" pos:end="391:56">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="395:5" pos:end="399:5"><if pos:start="395:5" pos:end="399:5">if <condition pos:start="395:8" pos:end="395:42">(<expr pos:start="395:9" pos:end="395:41"><name pos:start="395:9" pos:end="395:19">pci_enabled</name> <operator pos:start="395:21" pos:end="395:22">&amp;&amp;</operator> <call pos:start="395:24" pos:end="395:41"><name pos:start="395:24" pos:end="395:34">usb_enabled</name><argument_list pos:start="395:35" pos:end="395:41">(<argument pos:start="395:36" pos:end="395:40"><expr pos:start="395:36" pos:end="395:40"><name pos:start="395:36" pos:end="395:40">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="395:44" pos:end="399:5">{<block_content pos:start="397:9" pos:end="397:70">

        <expr_stmt pos:start="397:9" pos:end="397:70"><expr pos:start="397:9" pos:end="397:69"><call pos:start="397:9" pos:end="397:69"><name pos:start="397:9" pos:end="397:25">pci_create_simple</name><argument_list pos:start="397:26" pos:end="397:69">(<argument pos:start="397:27" pos:end="397:33"><expr pos:start="397:27" pos:end="397:33"><name pos:start="397:27" pos:end="397:33">pci_bus</name></expr></argument>, <argument pos:start="397:36" pos:end="397:50"><expr pos:start="397:36" pos:end="397:50"><name pos:start="397:36" pos:end="397:46">piix3_devfn</name> <operator pos:start="397:48" pos:end="397:48">+</operator> <literal type="number" pos:start="397:50" pos:end="397:50">2</literal></expr></argument>, <argument pos:start="397:53" pos:end="397:68"><expr pos:start="397:53" pos:end="397:68"><literal type="string" pos:start="397:53" pos:end="397:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="403:5" pos:end="439:5"><if pos:start="403:5" pos:end="439:5">if <condition pos:start="403:8" pos:end="403:36">(<expr pos:start="403:9" pos:end="403:35"><name pos:start="403:9" pos:end="403:19">pci_enabled</name> <operator pos:start="403:21" pos:end="403:22">&amp;&amp;</operator> <name pos:start="403:24" pos:end="403:35">acpi_enabled</name></expr>)</condition> <block pos:start="403:38" pos:end="439:5">{<block_content pos:start="405:9" pos:end="437:76">

        <decl_stmt pos:start="405:9" pos:end="405:30"><decl pos:start="405:9" pos:end="405:29"><type pos:start="405:9" pos:end="405:21"><name pos:start="405:9" pos:end="405:19">DeviceState</name> <modifier pos:start="405:21" pos:end="405:21">*</modifier></type><name pos:start="405:22" pos:end="405:29">piix4_pm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="407:9" pos:end="407:22"><decl pos:start="407:9" pos:end="407:21"><type pos:start="407:9" pos:end="407:16"><name pos:start="407:9" pos:end="407:14">I2CBus</name> <modifier pos:start="407:16" pos:end="407:16">*</modifier></type><name pos:start="407:17" pos:end="407:21">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="411:9" pos:end="411:74"><expr pos:start="411:9" pos:end="411:73"><name pos:start="411:9" pos:end="411:15">smi_irq</name> <operator pos:start="411:17" pos:end="411:17">=</operator> <call pos:start="411:19" pos:end="411:73"><name pos:start="411:19" pos:end="411:36">qemu_allocate_irqs</name><argument_list pos:start="411:37" pos:end="411:73">(<argument pos:start="411:38" pos:end="411:58"><expr pos:start="411:38" pos:end="411:58"><name pos:start="411:38" pos:end="411:58">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="411:61" pos:end="411:69"><expr pos:start="411:61" pos:end="411:69"><name pos:start="411:61" pos:end="411:69">first_cpu</name></expr></argument>, <argument pos:start="411:72" pos:end="411:72"><expr pos:start="411:72" pos:end="411:72"><literal type="number" pos:start="411:72" pos:end="411:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="413:9" pos:end="413:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="415:9" pos:end="419:64"><expr pos:start="415:9" pos:end="419:63"><name pos:start="415:9" pos:end="415:13">smbus</name> <operator pos:start="415:15" pos:end="415:15">=</operator> <call pos:start="415:17" pos:end="419:63"><name pos:start="415:17" pos:end="415:29">piix4_pm_init</name><argument_list pos:start="415:30" pos:end="419:63">(<argument pos:start="415:31" pos:end="415:37"><expr pos:start="415:31" pos:end="415:37"><name pos:start="415:31" pos:end="415:37">pci_bus</name></expr></argument>, <argument pos:start="415:40" pos:end="415:54"><expr pos:start="415:40" pos:end="415:54"><name pos:start="415:40" pos:end="415:50">piix3_devfn</name> <operator pos:start="415:52" pos:end="415:52">+</operator> <literal type="number" pos:start="415:54" pos:end="415:54">3</literal></expr></argument>, <argument pos:start="415:57" pos:end="415:62"><expr pos:start="415:57" pos:end="415:62"><literal type="number" pos:start="415:57" pos:end="415:62">0xb100</literal></expr></argument>,

                              <argument pos:start="417:31" pos:end="417:36"><expr pos:start="417:31" pos:end="417:36"><name pos:start="417:31" pos:end="417:36"><name pos:start="417:31" pos:end="417:33">gsi</name><index pos:start="417:34" pos:end="417:36">[<expr pos:start="417:35" pos:end="417:35"><literal type="number" pos:start="417:35" pos:end="417:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="417:39" pos:end="417:46"><expr pos:start="417:39" pos:end="417:46"><operator pos:start="417:39" pos:end="417:39">*</operator><name pos:start="417:40" pos:end="417:46">smi_irq</name></expr></argument>,

                              <argument pos:start="419:31" pos:end="419:43"><expr pos:start="419:31" pos:end="419:43"><call pos:start="419:31" pos:end="419:43"><name pos:start="419:31" pos:end="419:41">kvm_enabled</name><argument_list pos:start="419:42" pos:end="419:43">()</argument_list></call></expr></argument>, <argument pos:start="419:46" pos:end="419:51"><expr pos:start="419:46" pos:end="419:51"><name pos:start="419:46" pos:end="419:51">fw_cfg</name></expr></argument>, <argument pos:start="419:54" pos:end="419:62"><expr pos:start="419:54" pos:end="419:62"><operator pos:start="419:54" pos:end="419:54">&amp;</operator><name pos:start="419:55" pos:end="419:62">piix4_pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="421:45"><expr pos:start="421:9" pos:end="421:44"><call pos:start="421:9" pos:end="421:44"><name pos:start="421:9" pos:end="421:25">smbus_eeprom_init</name><argument_list pos:start="421:26" pos:end="421:44">(<argument pos:start="421:27" pos:end="421:31"><expr pos:start="421:27" pos:end="421:31"><name pos:start="421:27" pos:end="421:31">smbus</name></expr></argument>, <argument pos:start="421:34" pos:end="421:34"><expr pos:start="421:34" pos:end="421:34"><literal type="number" pos:start="421:34" pos:end="421:34">8</literal></expr></argument>, <argument pos:start="421:37" pos:end="421:40"><expr pos:start="421:37" pos:end="421:40"><name pos:start="421:37" pos:end="421:40">NULL</name></expr></argument>, <argument pos:start="421:43" pos:end="421:43"><expr pos:start="421:43" pos:end="421:43"><literal type="number" pos:start="421:43" pos:end="421:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="425:9" pos:end="433:79"><expr pos:start="425:9" pos:end="433:78"><call pos:start="425:9" pos:end="433:78"><name pos:start="425:9" pos:end="425:32">object_property_add_link</name><argument_list pos:start="425:33" pos:end="433:78">(<argument pos:start="425:34" pos:end="425:48"><expr pos:start="425:34" pos:end="425:48"><call pos:start="425:34" pos:end="425:48"><name pos:start="425:34" pos:end="425:39">OBJECT</name><argument_list pos:start="425:40" pos:end="425:48">(<argument pos:start="425:41" pos:end="425:47"><expr pos:start="425:41" pos:end="425:47"><name pos:start="425:41" pos:end="425:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="425:51" pos:end="425:77"><expr pos:start="425:51" pos:end="425:77"><name pos:start="425:51" pos:end="425:77">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                                 <argument pos:start="427:34" pos:end="427:53"><expr pos:start="427:34" pos:end="427:53"><name pos:start="427:34" pos:end="427:53">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                                 <argument pos:start="429:34" pos:end="429:65"><expr pos:start="429:34" pos:end="429:65"><operator pos:start="429:34" pos:end="429:34">(</operator><name pos:start="429:35" pos:end="429:40">Object</name> <operator pos:start="429:42" pos:end="429:42">*</operator><operator pos:start="429:43" pos:end="429:43">*</operator><operator pos:start="429:44" pos:end="429:44">)</operator><operator pos:start="429:45" pos:end="429:45">&amp;</operator><name pos:start="429:46" pos:end="429:65"><name pos:start="429:46" pos:end="429:55">pc_machine</name><operator pos:start="429:56" pos:end="429:57">-&gt;</operator><name pos:start="429:58" pos:end="429:65">acpi_dev</name></name></expr></argument>,

                                 <argument pos:start="431:34" pos:end="431:63"><expr pos:start="431:34" pos:end="431:63"><name pos:start="431:34" pos:end="431:63">object_property_allow_set_link</name></expr></argument>,

                                 <argument pos:start="433:34" pos:end="433:63"><expr pos:start="433:34" pos:end="433:63"><name pos:start="433:34" pos:end="433:63">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="433:66" pos:end="433:77"><expr pos:start="433:66" pos:end="433:77"><operator pos:start="433:66" pos:end="433:66">&amp;</operator><name pos:start="433:67" pos:end="433:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="435:9" pos:end="437:76"><expr pos:start="435:9" pos:end="437:75"><call pos:start="435:9" pos:end="437:75"><name pos:start="435:9" pos:end="435:32">object_property_set_link</name><argument_list pos:start="435:33" pos:end="437:75">(<argument pos:start="435:34" pos:end="435:48"><expr pos:start="435:34" pos:end="435:48"><call pos:start="435:34" pos:end="435:48"><name pos:start="435:34" pos:end="435:39">OBJECT</name><argument_list pos:start="435:40" pos:end="435:48">(<argument pos:start="435:41" pos:end="435:47"><expr pos:start="435:41" pos:end="435:47"><name pos:start="435:41" pos:end="435:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="435:51" pos:end="435:66"><expr pos:start="435:51" pos:end="435:66"><call pos:start="435:51" pos:end="435:66"><name pos:start="435:51" pos:end="435:56">OBJECT</name><argument_list pos:start="435:57" pos:end="435:66">(<argument pos:start="435:58" pos:end="435:65"><expr pos:start="435:58" pos:end="435:65"><name pos:start="435:58" pos:end="435:65">piix4_pm</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="437:34" pos:end="437:60"><expr pos:start="437:34" pos:end="437:60"><name pos:start="437:34" pos:end="437:60">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="437:63" pos:end="437:74"><expr pos:start="437:63" pos:end="437:74"><operator pos:start="437:63" pos:end="437:63">&amp;</operator><name pos:start="437:64" pos:end="437:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="443:5" pos:end="447:5"><if pos:start="443:5" pos:end="447:5">if <condition pos:start="443:8" pos:end="443:20">(<expr pos:start="443:9" pos:end="443:19"><name pos:start="443:9" pos:end="443:19">pci_enabled</name></expr>)</condition> <block pos:start="443:22" pos:end="447:5">{<block_content pos:start="445:9" pos:end="445:36">

        <expr_stmt pos:start="445:9" pos:end="445:36"><expr pos:start="445:9" pos:end="445:35"><call pos:start="445:9" pos:end="445:35"><name pos:start="445:9" pos:end="445:26">pc_pci_device_init</name><argument_list pos:start="445:27" pos:end="445:35">(<argument pos:start="445:28" pos:end="445:34"><expr pos:start="445:28" pos:end="445:34"><name pos:start="445:28" pos:end="445:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
