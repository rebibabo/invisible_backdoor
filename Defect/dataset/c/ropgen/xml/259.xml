<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/259.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">send_dma_request</name><parameter_list pos:start="1:28" pos:end="7:78">(<parameter pos:start="1:29" pos:end="1:35"><decl pos:start="1:29" pos:end="1:35"><type pos:start="1:29" pos:end="1:35"><name pos:start="1:29" pos:end="1:31">int</name></type> <name pos:start="1:33" pos:end="1:35">cmd</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:45">uint64_t</name></type> <name pos:start="1:47" pos:end="1:52">sector</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:68">nb_sectors</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:37">PrdtEntry</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">prdt</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:61"><decl pos:start="3:46" pos:end="3:61"><type pos:start="3:46" pos:end="3:61"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:61">prdt_entries</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="7:77"><function_decl pos:start="5:29" pos:end="7:77"><type pos:start="5:29" pos:end="5:32"><name pos:start="5:29" pos:end="5:32">void</name></type>(<modifier pos:start="5:34" pos:end="5:34">*</modifier><name pos:start="5:35" pos:end="5:43">post_exec</name>)<parameter_list pos:start="5:45" pos:end="7:77">(<parameter pos:start="5:46" pos:end="5:60"><decl pos:start="5:46" pos:end="5:60"><type pos:start="5:46" pos:end="5:60"><name pos:start="5:46" pos:end="5:55">QPCIDevice</name> <modifier pos:start="5:57" pos:end="5:57">*</modifier></type><name pos:start="5:58" pos:end="5:60">dev</name></decl></parameter>, <parameter pos:start="5:63" pos:end="5:76"><decl pos:start="5:63" pos:end="5:76"><type pos:start="5:63" pos:end="5:76"><name pos:start="5:63" pos:end="5:66">void</name> <modifier pos:start="5:68" pos:end="5:68">*</modifier></type><name pos:start="5:69" pos:end="5:76">ide_base</name></decl></parameter>,

                                             <parameter pos:start="7:46" pos:end="7:60"><decl pos:start="7:46" pos:end="7:60"><type pos:start="7:46" pos:end="7:60"><name pos:start="7:46" pos:end="7:53">uint64_t</name></type> <name pos:start="7:55" pos:end="7:60">sector</name></decl></parameter>, <parameter pos:start="7:63" pos:end="7:76"><decl pos:start="7:63" pos:end="7:76"><type pos:start="7:63" pos:end="7:76"><name pos:start="7:63" pos:end="7:65">int</name></type> <name pos:start="7:67" pos:end="7:76">nb_sectors</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="197:1">{<block_content pos:start="11:5" pos:end="195:18">

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">QPCIDevice</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:20">bmdma_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">ide_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">uintptr_t</name></type> <name pos:start="17:15" pos:end="17:24">guest_prdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:17">from_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:18">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:49"><expr pos:start="29:5" pos:end="29:48"><name pos:start="29:5" pos:end="29:7">dev</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:48"><name pos:start="29:11" pos:end="29:24">get_pci_device</name><argument_list pos:start="29:25" pos:end="29:48">(<argument pos:start="29:26" pos:end="29:36"><expr pos:start="29:26" pos:end="29:36"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:36">bmdma_base</name></expr></argument>, <argument pos:start="29:39" pos:end="29:47"><expr pos:start="29:39" pos:end="29:47"><operator pos:start="29:39" pos:end="29:39">&amp;</operator><name pos:start="29:40" pos:end="29:47">ide_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:9">flags</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <name pos:start="33:13" pos:end="33:15">cmd</name> <operator pos:start="33:17" pos:end="33:17">&amp;</operator> <operator pos:start="33:19" pos:end="33:19">~</operator><literal type="number" pos:start="33:20" pos:end="33:23">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:7">cmd</name> <operator pos:start="35:9" pos:end="35:10">&amp;=</operator> <literal type="number" pos:start="35:12" pos:end="35:15">0xff</literal></expr>;</expr_stmt>



    <switch pos:start="39:5" pos:end="63:5">switch <condition pos:start="39:12" pos:end="39:16">(<expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">cmd</name></expr>)</condition> <block pos:start="39:18" pos:end="63:5">{<block_content pos:start="41:5" pos:end="61:31">

    <case pos:start="41:5" pos:end="41:22">case <expr pos:start="41:10" pos:end="41:21"><name pos:start="41:10" pos:end="41:21">CMD_READ_DMA</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:20">case <expr pos:start="43:10" pos:end="43:19"><name pos:start="43:10" pos:end="43:19">CMD_PACKET</name></expr>:</case>

        <comment type="block" pos:start="45:9" pos:end="47:61">/* Assuming we only test data reads w/ ATAPI, otherwise we need to know

         * the SCSI command being sent in the packet, too. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:16">from_dev</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:23">true</name></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:23">case <expr pos:start="53:10" pos:end="53:22"><name pos:start="53:10" pos:end="53:22">CMD_WRITE_DMA</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:16">from_dev</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:24">false</name></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="61:31"><expr pos:start="61:9" pos:end="61:30"><call pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:28">g_assert_not_reached</name><argument_list pos:start="61:29" pos:end="61:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:27">(<expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:13">flags</name> <operator pos:start="67:15" pos:end="67:15">&amp;</operator> <name pos:start="67:17" pos:end="67:26">CMDF_NO_BM</name></expr>)</condition> <block pos:start="67:29" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:64">

        <expr_stmt pos:start="69:9" pos:end="71:64"><expr pos:start="69:9" pos:end="71:63"><call pos:start="69:9" pos:end="71:63"><name pos:start="69:9" pos:end="69:26">qpci_config_writew</name><argument_list pos:start="69:27" pos:end="71:63">(<argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">dev</name></expr></argument>, <argument pos:start="69:33" pos:end="69:43"><expr pos:start="69:33" pos:end="69:43"><name pos:start="69:33" pos:end="69:43">PCI_COMMAND</name></expr></argument>,

                           <argument pos:start="71:28" pos:end="71:62"><expr pos:start="71:28" pos:end="71:62"><name pos:start="71:28" pos:end="71:41">PCI_COMMAND_IO</name> <operator pos:start="71:43" pos:end="71:43">|</operator> <name pos:start="71:45" pos:end="71:62">PCI_COMMAND_MEMORY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:25">/* Select device 0 */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:56"><expr pos:start="79:5" pos:end="79:55"><call pos:start="79:5" pos:end="79:55"><name pos:start="79:5" pos:end="79:18">qpci_io_writeb</name><argument_list pos:start="79:19" pos:end="79:55">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">dev</name></expr></argument>, <argument pos:start="79:25" pos:end="79:45"><expr pos:start="79:25" pos:end="79:45"><name pos:start="79:25" pos:end="79:32">ide_base</name> <operator pos:start="79:34" pos:end="79:34">+</operator> <name pos:start="79:36" pos:end="79:45">reg_device</name></expr></argument>, <argument pos:start="79:48" pos:end="79:54"><expr pos:start="79:48" pos:end="79:54"><literal type="number" pos:start="79:48" pos:end="79:48">0</literal> <operator pos:start="79:50" pos:end="79:50">|</operator> <name pos:start="79:52" pos:end="79:54">LBA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:64">/* Stop any running transfer, clear any pending interrupt */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:51"><expr pos:start="85:5" pos:end="85:50"><call pos:start="85:5" pos:end="85:50"><name pos:start="85:5" pos:end="85:18">qpci_io_writeb</name><argument_list pos:start="85:19" pos:end="85:50">(<argument pos:start="85:20" pos:end="85:22"><expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">dev</name></expr></argument>, <argument pos:start="85:25" pos:end="85:46"><expr pos:start="85:25" pos:end="85:46"><name pos:start="85:25" pos:end="85:34">bmdma_base</name> <operator pos:start="85:36" pos:end="85:36">+</operator> <name pos:start="85:38" pos:end="85:46">bmreg_cmd</name></expr></argument>, <argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><literal type="number" pos:start="85:49" pos:end="85:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:64"><expr pos:start="87:5" pos:end="87:63"><call pos:start="87:5" pos:end="87:63"><name pos:start="87:5" pos:end="87:18">qpci_io_writeb</name><argument_list pos:start="87:19" pos:end="87:63">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">dev</name></expr></argument>, <argument pos:start="87:25" pos:end="87:49"><expr pos:start="87:25" pos:end="87:49"><name pos:start="87:25" pos:end="87:34">bmdma_base</name> <operator pos:start="87:36" pos:end="87:36">+</operator> <name pos:start="87:38" pos:end="87:49">bmreg_status</name></expr></argument>, <argument pos:start="87:52" pos:end="87:62"><expr pos:start="87:52" pos:end="87:62"><name pos:start="87:52" pos:end="87:62">BM_STS_INTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:20">/* Setup PRDT */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:7">len</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <sizeof pos:start="93:11" pos:end="93:23">sizeof<argument_list pos:start="93:17" pos:end="93:23">(<argument pos:start="93:18" pos:end="93:22"><expr pos:start="93:18" pos:end="93:22"><operator pos:start="93:18" pos:end="93:18">*</operator><name pos:start="93:19" pos:end="93:22">prdt</name></expr></argument>)</argument_list></sizeof> <operator pos:start="93:25" pos:end="93:25">*</operator> <name pos:start="93:27" pos:end="93:38">prdt_entries</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:48"><expr pos:start="95:5" pos:end="95:47"><name pos:start="95:5" pos:end="95:14">guest_prdt</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:47"><name pos:start="95:18" pos:end="95:28">guest_alloc</name><argument_list pos:start="95:29" pos:end="95:47">(<argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><name pos:start="95:30" pos:end="95:41">guest_malloc</name></expr></argument>, <argument pos:start="95:44" pos:end="95:46"><expr pos:start="95:44" pos:end="95:46"><name pos:start="95:44" pos:end="95:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><call pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:12">memwrite</name><argument_list pos:start="97:13" pos:end="97:35">(<argument pos:start="97:14" pos:end="97:23"><expr pos:start="97:14" pos:end="97:23"><name pos:start="97:14" pos:end="97:23">guest_prdt</name></expr></argument>, <argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">prdt</name></expr></argument>, <argument pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><call pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:18">qpci_io_writel</name><argument_list pos:start="99:19" pos:end="99:60">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">dev</name></expr></argument>, <argument pos:start="99:25" pos:end="99:47"><expr pos:start="99:25" pos:end="99:47"><name pos:start="99:25" pos:end="99:34">bmdma_base</name> <operator pos:start="99:36" pos:end="99:36">+</operator> <name pos:start="99:38" pos:end="99:47">bmreg_prdt</name></expr></argument>, <argument pos:start="99:50" pos:end="99:59"><expr pos:start="99:50" pos:end="99:59"><name pos:start="99:50" pos:end="99:59">guest_prdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:25">/* ATA DMA command */</comment>

    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:11">cmd</name> <operator pos:start="105:13" pos:end="105:14">==</operator> <name pos:start="105:16" pos:end="105:25">CMD_PACKET</name></expr>)</condition> <block pos:start="105:28" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:58">

        <comment type="block" pos:start="107:9" pos:end="107:59">/* Enables ATAPI DMA; otherwise PIO is attempted */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:58"><expr pos:start="109:9" pos:end="109:57"><call pos:start="109:9" pos:end="109:57"><name pos:start="109:9" pos:end="109:22">qpci_io_writeb</name><argument_list pos:start="109:23" pos:end="109:57">(<argument pos:start="109:24" pos:end="109:26"><expr pos:start="109:24" pos:end="109:26"><name pos:start="109:24" pos:end="109:26">dev</name></expr></argument>, <argument pos:start="109:29" pos:end="109:50"><expr pos:start="109:29" pos:end="109:50"><name pos:start="109:29" pos:end="109:36">ide_base</name> <operator pos:start="109:38" pos:end="109:38">+</operator> <name pos:start="109:40" pos:end="109:50">reg_feature</name></expr></argument>, <argument pos:start="109:53" pos:end="109:56"><expr pos:start="109:53" pos:end="109:56"><literal type="number" pos:start="109:53" pos:end="109:56">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="111:7" pos:end="121:5">else <block pos:start="111:12" pos:end="121:5">{<block_content pos:start="113:9" pos:end="119:78">

        <expr_stmt pos:start="113:9" pos:end="113:65"><expr pos:start="113:9" pos:end="113:64"><call pos:start="113:9" pos:end="113:64"><name pos:start="113:9" pos:end="113:22">qpci_io_writeb</name><argument_list pos:start="113:23" pos:end="113:64">(<argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">dev</name></expr></argument>, <argument pos:start="113:29" pos:end="113:51"><expr pos:start="113:29" pos:end="113:51"><name pos:start="113:29" pos:end="113:36">ide_base</name> <operator pos:start="113:38" pos:end="113:38">+</operator> <name pos:start="113:40" pos:end="113:51">reg_nsectors</name></expr></argument>, <argument pos:start="113:54" pos:end="113:63"><expr pos:start="113:54" pos:end="113:63"><name pos:start="113:54" pos:end="113:63">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:70"><expr pos:start="115:9" pos:end="115:69"><call pos:start="115:9" pos:end="115:69"><name pos:start="115:9" pos:end="115:22">qpci_io_writeb</name><argument_list pos:start="115:23" pos:end="115:69">(<argument pos:start="115:24" pos:end="115:26"><expr pos:start="115:24" pos:end="115:26"><name pos:start="115:24" pos:end="115:26">dev</name></expr></argument>, <argument pos:start="115:29" pos:end="115:50"><expr pos:start="115:29" pos:end="115:50"><name pos:start="115:29" pos:end="115:36">ide_base</name> <operator pos:start="115:38" pos:end="115:38">+</operator> <name pos:start="115:40" pos:end="115:50">reg_lba_low</name></expr></argument>,    <argument pos:start="115:56" pos:end="115:68"><expr pos:start="115:56" pos:end="115:68"><name pos:start="115:56" pos:end="115:61">sector</name> <operator pos:start="115:63" pos:end="115:63">&amp;</operator> <literal type="number" pos:start="115:65" pos:end="115:68">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:77"><expr pos:start="117:9" pos:end="117:76"><call pos:start="117:9" pos:end="117:76"><name pos:start="117:9" pos:end="117:22">qpci_io_writeb</name><argument_list pos:start="117:23" pos:end="117:76">(<argument pos:start="117:24" pos:end="117:26"><expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">dev</name></expr></argument>, <argument pos:start="117:29" pos:end="117:53"><expr pos:start="117:29" pos:end="117:53"><name pos:start="117:29" pos:end="117:36">ide_base</name> <operator pos:start="117:38" pos:end="117:38">+</operator> <name pos:start="117:40" pos:end="117:53">reg_lba_middle</name></expr></argument>, <argument pos:start="117:56" pos:end="117:75"><expr pos:start="117:56" pos:end="117:75"><operator pos:start="117:56" pos:end="117:56">(</operator><name pos:start="117:57" pos:end="117:62">sector</name> <operator pos:start="117:64" pos:end="117:65">&gt;&gt;</operator> <literal type="number" pos:start="117:67" pos:end="117:67">8</literal><operator pos:start="117:68" pos:end="117:68">)</operator> <operator pos:start="117:70" pos:end="117:70">&amp;</operator> <literal type="number" pos:start="117:72" pos:end="117:75">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:78"><expr pos:start="119:9" pos:end="119:77"><call pos:start="119:9" pos:end="119:77"><name pos:start="119:9" pos:end="119:22">qpci_io_writeb</name><argument_list pos:start="119:23" pos:end="119:77">(<argument pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">dev</name></expr></argument>, <argument pos:start="119:29" pos:end="119:51"><expr pos:start="119:29" pos:end="119:51"><name pos:start="119:29" pos:end="119:36">ide_base</name> <operator pos:start="119:38" pos:end="119:38">+</operator> <name pos:start="119:40" pos:end="119:51">reg_lba_high</name></expr></argument>,   <argument pos:start="119:56" pos:end="119:76"><expr pos:start="119:56" pos:end="119:76"><operator pos:start="119:56" pos:end="119:56">(</operator><name pos:start="119:57" pos:end="119:62">sector</name> <operator pos:start="119:64" pos:end="119:65">&gt;&gt;</operator> <literal type="number" pos:start="119:67" pos:end="119:68">16</literal><operator pos:start="119:69" pos:end="119:69">)</operator> <operator pos:start="119:71" pos:end="119:71">&amp;</operator> <literal type="number" pos:start="119:73" pos:end="119:76">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:53"><expr pos:start="125:5" pos:end="125:52"><call pos:start="125:5" pos:end="125:52"><name pos:start="125:5" pos:end="125:18">qpci_io_writeb</name><argument_list pos:start="125:19" pos:end="125:52">(<argument pos:start="125:20" pos:end="125:22"><expr pos:start="125:20" pos:end="125:22"><name pos:start="125:20" pos:end="125:22">dev</name></expr></argument>, <argument pos:start="125:25" pos:end="125:46"><expr pos:start="125:25" pos:end="125:46"><name pos:start="125:25" pos:end="125:32">ide_base</name> <operator pos:start="125:34" pos:end="125:34">+</operator> <name pos:start="125:36" pos:end="125:46">reg_command</name></expr></argument>, <argument pos:start="125:49" pos:end="125:51"><expr pos:start="125:49" pos:end="125:51"><name pos:start="125:49" pos:end="125:51">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:18">(<expr pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:17">post_exec</name></expr>)</condition> <block pos:start="129:20" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:53">

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><call pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:17">post_exec</name><argument_list pos:start="131:18" pos:end="131:52">(<argument pos:start="131:19" pos:end="131:21"><expr pos:start="131:19" pos:end="131:21"><name pos:start="131:19" pos:end="131:21">dev</name></expr></argument>, <argument pos:start="131:24" pos:end="131:31"><expr pos:start="131:24" pos:end="131:31"><name pos:start="131:24" pos:end="131:31">ide_base</name></expr></argument>, <argument pos:start="131:34" pos:end="131:39"><expr pos:start="131:34" pos:end="131:39"><name pos:start="131:34" pos:end="131:39">sector</name></expr></argument>, <argument pos:start="131:42" pos:end="131:51"><expr pos:start="131:42" pos:end="131:51"><name pos:start="131:42" pos:end="131:51">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:28">/* Start DMA transfer */</comment>

    <expr_stmt pos:start="139:5" pos:end="141:65"><expr pos:start="139:5" pos:end="141:64"><call pos:start="139:5" pos:end="141:64"><name pos:start="139:5" pos:end="139:18">qpci_io_writeb</name><argument_list pos:start="139:19" pos:end="141:64">(<argument pos:start="139:20" pos:end="139:22"><expr pos:start="139:20" pos:end="139:22"><name pos:start="139:20" pos:end="139:22">dev</name></expr></argument>, <argument pos:start="139:25" pos:end="139:46"><expr pos:start="139:25" pos:end="139:46"><name pos:start="139:25" pos:end="139:34">bmdma_base</name> <operator pos:start="139:36" pos:end="139:36">+</operator> <name pos:start="139:38" pos:end="139:46">bmreg_cmd</name></expr></argument>,

                   <argument pos:start="141:20" pos:end="141:63"><expr pos:start="141:20" pos:end="141:63"><name pos:start="141:20" pos:end="141:31">BM_CMD_START</name> <operator pos:start="141:33" pos:end="141:33">|</operator> <operator pos:start="141:35" pos:end="141:35">(</operator><ternary pos:start="141:36" pos:end="141:62"><condition pos:start="141:36" pos:end="141:45"><expr pos:start="141:36" pos:end="141:43"><name pos:start="141:36" pos:end="141:43">from_dev</name></expr> ?</condition><then pos:start="141:47" pos:end="141:58"> <expr pos:start="141:47" pos:end="141:58"><name pos:start="141:47" pos:end="141:58">BM_CMD_WRITE</name></expr> </then><else pos:start="141:60" pos:end="141:62">: <expr pos:start="141:62" pos:end="141:62"><literal type="number" pos:start="141:62" pos:end="141:62">0</literal></expr></else></ternary><operator pos:start="141:63" pos:end="141:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:27">(<expr pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:13">flags</name> <operator pos:start="145:15" pos:end="145:15">&amp;</operator> <name pos:start="145:17" pos:end="145:26">CMDF_ABORT</name></expr>)</condition> <block pos:start="145:29" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:55">

        <expr_stmt pos:start="147:9" pos:end="147:55"><expr pos:start="147:9" pos:end="147:54"><call pos:start="147:9" pos:end="147:54"><name pos:start="147:9" pos:end="147:22">qpci_io_writeb</name><argument_list pos:start="147:23" pos:end="147:54">(<argument pos:start="147:24" pos:end="147:26"><expr pos:start="147:24" pos:end="147:26"><name pos:start="147:24" pos:end="147:26">dev</name></expr></argument>, <argument pos:start="147:29" pos:end="147:50"><expr pos:start="147:29" pos:end="147:50"><name pos:start="147:29" pos:end="147:38">bmdma_base</name> <operator pos:start="147:40" pos:end="147:40">+</operator> <name pos:start="147:42" pos:end="147:50">bmreg_cmd</name></expr></argument>, <argument pos:start="147:53" pos:end="147:53"><expr pos:start="147:53" pos:end="147:53"><literal type="number" pos:start="147:53" pos:end="147:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:47">/* Wait for the DMA transfer to complete */</comment>

    <do pos:start="155:5" pos:end="159:72">do <block pos:start="155:8" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:63">

        <expr_stmt pos:start="157:9" pos:end="157:63"><expr pos:start="157:9" pos:end="157:62"><name pos:start="157:9" pos:end="157:14">status</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <call pos:start="157:18" pos:end="157:62"><name pos:start="157:18" pos:end="157:30">qpci_io_readb</name><argument_list pos:start="157:31" pos:end="157:62">(<argument pos:start="157:32" pos:end="157:34"><expr pos:start="157:32" pos:end="157:34"><name pos:start="157:32" pos:end="157:34">dev</name></expr></argument>, <argument pos:start="157:37" pos:end="157:61"><expr pos:start="157:37" pos:end="157:61"><name pos:start="157:37" pos:end="157:46">bmdma_base</name> <operator pos:start="157:48" pos:end="157:48">+</operator> <name pos:start="157:50" pos:end="157:61">bmreg_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="159:13" pos:end="159:71">(<expr pos:start="159:14" pos:end="159:70"><operator pos:start="159:14" pos:end="159:14">(</operator><name pos:start="159:15" pos:end="159:20">status</name> <operator pos:start="159:22" pos:end="159:22">&amp;</operator> <operator pos:start="159:24" pos:end="159:24">(</operator><name pos:start="159:25" pos:end="159:37">BM_STS_ACTIVE</name> <operator pos:start="159:39" pos:end="159:39">|</operator> <name pos:start="159:41" pos:end="159:51">BM_STS_INTR</name><operator pos:start="159:52" pos:end="159:52">)</operator><operator pos:start="159:53" pos:end="159:53">)</operator> <operator pos:start="159:55" pos:end="159:56">==</operator> <name pos:start="159:58" pos:end="159:70">BM_STS_ACTIVE</name></expr>)</condition>;</do>



    <expr_stmt pos:start="163:5" pos:end="163:76"><expr pos:start="163:5" pos:end="163:75"><call pos:start="163:5" pos:end="163:75"><name pos:start="163:5" pos:end="163:19">g_assert_cmpint</name><argument_list pos:start="163:20" pos:end="163:75">(<argument pos:start="163:21" pos:end="163:44"><expr pos:start="163:21" pos:end="163:44"><call pos:start="163:21" pos:end="163:44"><name pos:start="163:21" pos:end="163:27">get_irq</name><argument_list pos:start="163:28" pos:end="163:44">(<argument pos:start="163:29" pos:end="163:43"><expr pos:start="163:29" pos:end="163:43"><name pos:start="163:29" pos:end="163:43">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="163:47" pos:end="163:48"><expr pos:start="163:47" pos:end="163:48"><operator pos:start="163:47" pos:end="163:48">==</operator></expr></argument>, <argument pos:start="163:51" pos:end="163:74"><expr pos:start="163:51" pos:end="163:74"><operator pos:start="163:51" pos:end="163:51">!</operator><operator pos:start="163:52" pos:end="163:52">!</operator><operator pos:start="163:53" pos:end="163:53">(</operator><name pos:start="163:54" pos:end="163:59">status</name> <operator pos:start="163:61" pos:end="163:61">&amp;</operator> <name pos:start="163:63" pos:end="163:73">BM_STS_INTR</name><operator pos:start="163:74" pos:end="163:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:31">/* Check IDE status code */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:68"><expr pos:start="169:5" pos:end="169:67"><call pos:start="169:5" pos:end="169:67"><name pos:start="169:5" pos:end="169:18">assert_bit_set</name><argument_list pos:start="169:19" pos:end="169:67">(<argument pos:start="169:20" pos:end="169:60"><expr pos:start="169:20" pos:end="169:60"><call pos:start="169:20" pos:end="169:60"><name pos:start="169:20" pos:end="169:32">qpci_io_readb</name><argument_list pos:start="169:33" pos:end="169:60">(<argument pos:start="169:34" pos:end="169:36"><expr pos:start="169:34" pos:end="169:36"><name pos:start="169:34" pos:end="169:36">dev</name></expr></argument>, <argument pos:start="169:39" pos:end="169:59"><expr pos:start="169:39" pos:end="169:59"><name pos:start="169:39" pos:end="169:46">ide_base</name> <operator pos:start="169:48" pos:end="169:48">+</operator> <name pos:start="169:50" pos:end="169:59">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="169:63" pos:end="169:66"><expr pos:start="169:63" pos:end="169:66"><name pos:start="169:63" pos:end="169:66">DRDY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:75"><expr pos:start="171:5" pos:end="171:74"><call pos:start="171:5" pos:end="171:74"><name pos:start="171:5" pos:end="171:20">assert_bit_clear</name><argument_list pos:start="171:21" pos:end="171:74">(<argument pos:start="171:22" pos:end="171:62"><expr pos:start="171:22" pos:end="171:62"><call pos:start="171:22" pos:end="171:62"><name pos:start="171:22" pos:end="171:34">qpci_io_readb</name><argument_list pos:start="171:35" pos:end="171:62">(<argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">dev</name></expr></argument>, <argument pos:start="171:41" pos:end="171:61"><expr pos:start="171:41" pos:end="171:61"><name pos:start="171:41" pos:end="171:48">ide_base</name> <operator pos:start="171:50" pos:end="171:50">+</operator> <name pos:start="171:52" pos:end="171:61">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:65" pos:end="171:73"><expr pos:start="171:65" pos:end="171:73"><name pos:start="171:65" pos:end="171:67">BSY</name> <operator pos:start="171:69" pos:end="171:69">|</operator> <name pos:start="171:71" pos:end="171:73">DRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:52">/* Reading the status register clears the IRQ */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:40"><expr pos:start="177:5" pos:end="177:39"><call pos:start="177:5" pos:end="177:39"><name pos:start="177:5" pos:end="177:12">g_assert</name><argument_list pos:start="177:13" pos:end="177:39">(<argument pos:start="177:14" pos:end="177:38"><expr pos:start="177:14" pos:end="177:38"><operator pos:start="177:14" pos:end="177:14">!</operator><call pos:start="177:15" pos:end="177:38"><name pos:start="177:15" pos:end="177:21">get_irq</name><argument_list pos:start="177:22" pos:end="177:38">(<argument pos:start="177:23" pos:end="177:37"><expr pos:start="177:23" pos:end="177:37"><name pos:start="177:23" pos:end="177:37">IDE_PRIMARY_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:43">/* Stop DMA transfer if still active */</comment>

    <if_stmt pos:start="183:5" pos:end="187:5"><if pos:start="183:5" pos:end="187:5">if <condition pos:start="183:8" pos:end="183:31">(<expr pos:start="183:9" pos:end="183:30"><name pos:start="183:9" pos:end="183:14">status</name> <operator pos:start="183:16" pos:end="183:16">&amp;</operator> <name pos:start="183:18" pos:end="183:30">BM_STS_ACTIVE</name></expr>)</condition> <block pos:start="183:33" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:55">

        <expr_stmt pos:start="185:9" pos:end="185:55"><expr pos:start="185:9" pos:end="185:54"><call pos:start="185:9" pos:end="185:54"><name pos:start="185:9" pos:end="185:22">qpci_io_writeb</name><argument_list pos:start="185:23" pos:end="185:54">(<argument pos:start="185:24" pos:end="185:26"><expr pos:start="185:24" pos:end="185:26"><name pos:start="185:24" pos:end="185:26">dev</name></expr></argument>, <argument pos:start="185:29" pos:end="185:50"><expr pos:start="185:29" pos:end="185:50"><name pos:start="185:29" pos:end="185:38">bmdma_base</name> <operator pos:start="185:40" pos:end="185:40">+</operator> <name pos:start="185:42" pos:end="185:50">bmreg_cmd</name></expr></argument>, <argument pos:start="185:53" pos:end="185:53"><expr pos:start="185:53" pos:end="185:53"><literal type="number" pos:start="185:53" pos:end="185:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:25"><expr pos:start="191:5" pos:end="191:24"><call pos:start="191:5" pos:end="191:24"><name pos:start="191:5" pos:end="191:19">free_pci_device</name><argument_list pos:start="191:20" pos:end="191:24">(<argument pos:start="191:21" pos:end="191:23"><expr pos:start="191:21" pos:end="191:23"><name pos:start="191:21" pos:end="191:23">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="195:5" pos:end="195:18">return <expr pos:start="195:12" pos:end="195:17"><name pos:start="195:12" pos:end="195:17">status</name></expr>;</return>

</block_content>}</block></function>
</unit>
