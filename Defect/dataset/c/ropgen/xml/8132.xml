<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8132.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name></type> <name pos:start="1:17" pos:end="1:33">decode_skip_count</name><parameter_list pos:start="1:34" pos:end="1:52">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:47">GetBitContext</name><modifier pos:start="1:48" pos:end="1:48">*</modifier></type> <name pos:start="1:50" pos:end="1:51">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:36">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">unsigned</name></type> <name pos:start="5:14" pos:end="5:18">value</name></decl>;</decl_stmt>

    <comment type="line" pos:start="7:5" pos:end="7:48">// This function reads a maximum of 23 bits,</comment>

    <comment type="line" pos:start="9:5" pos:end="9:40">// which is within the padding space</comment>

    <if_stmt pos:start="11:5" pos:end="13:18"><if pos:start="11:5" pos:end="13:18">if <condition pos:start="11:8" pos:end="11:32">(<expr pos:start="11:9" pos:end="11:31"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:31"><name pos:start="11:10" pos:end="11:24">can_safely_read</name><argument_list pos:start="11:25" pos:end="11:31">(<argument pos:start="11:26" pos:end="11:27"><expr pos:start="11:26" pos:end="11:27"><name pos:start="11:26" pos:end="11:27">gb</name></expr></argument>, <argument pos:start="11:30" pos:end="11:30"><expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:18"><block_content pos:start="13:9" pos:end="13:18">

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:9">value</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:25"><name pos:start="15:13" pos:end="15:21">get_bits1</name><argument_list pos:start="15:22" pos:end="15:25">(<argument pos:start="15:23" pos:end="15:24"><expr pos:start="15:23" pos:end="15:24"><name pos:start="15:23" pos:end="15:24">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:21"><if pos:start="17:5" pos:end="19:21">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:14">value</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:21"><block_content pos:start="19:9" pos:end="19:21">

        <return pos:start="19:9" pos:end="19:21">return <expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">value</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:9">value</name> <operator pos:start="23:11" pos:end="23:12">+=</operator> <call pos:start="23:14" pos:end="23:28"><name pos:start="23:14" pos:end="23:21">get_bits</name><argument_list pos:start="23:22" pos:end="23:28">(<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><name pos:start="23:23" pos:end="23:24">gb</name></expr></argument>, <argument pos:start="23:27" pos:end="23:27"><expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:21"><if pos:start="25:5" pos:end="27:21">if <condition pos:start="25:8" pos:end="25:38">(<expr pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:13">value</name> <operator pos:start="25:15" pos:end="25:16">!=</operator> <operator pos:start="25:18" pos:end="25:18">(</operator><literal type="number" pos:start="25:19" pos:end="25:21">1</literal> <operator pos:start="25:21" pos:end="25:21">+</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><operator pos:start="25:24" pos:end="25:24">(</operator><literal type="number" pos:start="25:25" pos:end="25:25">1</literal> <operator pos:start="25:27" pos:end="25:28">&lt;&lt;</operator> <literal type="number" pos:start="25:30" pos:end="25:30">3</literal><operator pos:start="25:31" pos:end="25:31">)</operator> <operator pos:start="25:33" pos:end="25:33">-</operator> <literal type="number" pos:start="25:35" pos:end="25:35">1</literal><operator pos:start="25:36" pos:end="25:36">)</operator><operator pos:start="25:37" pos:end="25:37">)</operator></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:21"><block_content pos:start="27:9" pos:end="27:21">

        <return pos:start="27:9" pos:end="27:21">return <expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">value</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:9">value</name> <operator pos:start="31:11" pos:end="31:12">+=</operator> <call pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:21">get_bits</name><argument_list pos:start="31:22" pos:end="31:28">(<argument pos:start="31:23" pos:end="31:24"><expr pos:start="31:23" pos:end="31:24"><name pos:start="31:23" pos:end="31:24">gb</name></expr></argument>, <argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:21"><if pos:start="33:5" pos:end="35:21">if <condition pos:start="33:8" pos:end="33:55">(<expr pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:13">value</name> <operator pos:start="33:15" pos:end="33:16">!=</operator> <operator pos:start="33:18" pos:end="33:18">(</operator><literal type="number" pos:start="33:19" pos:end="33:21">1</literal> <operator pos:start="33:21" pos:end="33:21">+</operator> <operator pos:start="33:23" pos:end="33:23">(</operator><operator pos:start="33:24" pos:end="33:24">(</operator><literal type="number" pos:start="33:25" pos:end="33:25">1</literal> <operator pos:start="33:27" pos:end="33:28">&lt;&lt;</operator> <literal type="number" pos:start="33:30" pos:end="33:30">3</literal><operator pos:start="33:31" pos:end="33:31">)</operator> <operator pos:start="33:33" pos:end="33:33">-</operator> <literal type="number" pos:start="33:35" pos:end="33:35">1</literal><operator pos:start="33:36" pos:end="33:36">)</operator><operator pos:start="33:37" pos:end="33:37">)</operator> <operator pos:start="33:39" pos:end="33:39">+</operator> <operator pos:start="33:41" pos:end="33:41">(</operator><operator pos:start="33:42" pos:end="33:42">(</operator><literal type="number" pos:start="33:43" pos:end="33:43">1</literal> <operator pos:start="33:45" pos:end="33:46">&lt;&lt;</operator> <literal type="number" pos:start="33:48" pos:end="33:48">7</literal><operator pos:start="33:49" pos:end="33:49">)</operator> <operator pos:start="33:51" pos:end="33:51">-</operator> <literal type="number" pos:start="33:53" pos:end="33:53">1</literal><operator pos:start="33:54" pos:end="33:54">)</operator></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:21"><block_content pos:start="35:9" pos:end="35:21">

        <return pos:start="35:9" pos:end="35:21">return <expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">value</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="39:5" pos:end="39:36">return <expr pos:start="39:12" pos:end="39:35"><name pos:start="39:12" pos:end="39:16">value</name> <operator pos:start="39:18" pos:end="39:18">+</operator> <call pos:start="39:20" pos:end="39:35"><name pos:start="39:20" pos:end="39:27">get_bits</name><argument_list pos:start="39:28" pos:end="39:35">(<argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><name pos:start="39:29" pos:end="39:30">gb</name></expr></argument>, <argument pos:start="39:33" pos:end="39:34"><expr pos:start="39:33" pos:end="39:34"><literal type="number" pos:start="39:33" pos:end="39:34">12</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
