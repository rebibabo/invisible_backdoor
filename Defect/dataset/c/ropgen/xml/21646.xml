<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21646.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:19">kqemu_vmalloc</name><parameter_list pos:start="1:20" pos:end="1:32">(<parameter pos:start="1:21" pos:end="1:31"><decl pos:start="1:21" pos:end="1:31"><type pos:start="1:21" pos:end="1:26"><name pos:start="1:21" pos:end="1:26">size_t</name></type> <name pos:start="1:28" pos:end="1:31">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:15">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:26">phys_ram_fd</name> <init pos:start="5:28" pos:end="5:31">= <expr pos:start="5:30" pos:end="5:31"><operator pos:start="5:30" pos:end="5:30">-</operator><literal type="number" pos:start="5:31" pos:end="5:31">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:28">phys_ram_size</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">tmpdir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:28"><name pos:start="11:10" pos:end="11:22">phys_ram_file</name><index pos:start="11:23" pos:end="11:28">[<expr pos:start="11:24" pos:end="11:27"><literal type="number" pos:start="11:24" pos:end="11:27">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:17">statfs</name></name></type> <name pos:start="15:19" pos:end="15:22">stfs</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="125:5"><if pos:start="19:5" pos:end="125:5">if <condition pos:start="19:8" pos:end="19:24">(<expr pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:19">phys_ram_fd</name> <operator pos:start="19:21" pos:end="19:21">&lt;</operator> <literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr>)</condition> <block pos:start="19:26" pos:end="125:5">{<block_content pos:start="21:9" pos:end="123:30">

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:14">tmpdir</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:38"><name pos:start="21:18" pos:end="21:23">getenv</name><argument_list pos:start="21:24" pos:end="21:38">(<argument pos:start="21:25" pos:end="21:37"><expr pos:start="21:25" pos:end="21:37"><literal type="string" pos:start="21:25" pos:end="21:37">"QEMU_TMPDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:32"><if pos:start="23:9" pos:end="25:32">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:19">tmpdir</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:32"><block_content pos:start="25:13" pos:end="25:32">

            <expr_stmt pos:start="25:13" pos:end="25:32"><expr pos:start="25:13" pos:end="25:31"><name pos:start="25:13" pos:end="25:18">tmpdir</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="string" pos:start="25:22" pos:end="25:31">"/dev/shm"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="27:9" pos:end="77:9"><if pos:start="27:9" pos:end="77:9">if <condition pos:start="27:12" pos:end="27:39">(<expr pos:start="27:13" pos:end="27:38"><call pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:18">statfs</name><argument_list pos:start="27:19" pos:end="27:33">(<argument pos:start="27:20" pos:end="27:25"><expr pos:start="27:20" pos:end="27:25"><name pos:start="27:20" pos:end="27:25">tmpdir</name></expr></argument>, <argument pos:start="27:28" pos:end="27:32"><expr pos:start="27:28" pos:end="27:32"><operator pos:start="27:28" pos:end="27:28">&amp;</operator><name pos:start="27:29" pos:end="27:32">stfs</name></expr></argument>)</argument_list></call> <operator pos:start="27:35" pos:end="27:36">==</operator> <literal type="number" pos:start="27:38" pos:end="27:38">0</literal></expr>)</condition> <block pos:start="27:41" pos:end="77:9">{<block_content pos:start="29:13" pos:end="75:13">

            <decl_stmt pos:start="29:13" pos:end="29:31"><decl pos:start="29:13" pos:end="29:30"><type pos:start="29:13" pos:end="29:19"><name pos:start="29:13" pos:end="29:19">int64_t</name></type> <name pos:start="29:21" pos:end="29:30">free_space</name></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:23"><decl pos:start="31:13" pos:end="31:22"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:22">ram_mb</name></decl>;</decl_stmt>



            <decl_stmt pos:start="35:13" pos:end="35:32"><decl pos:start="35:13" pos:end="35:31"><type pos:start="35:13" pos:end="35:22"><specifier pos:start="35:13" pos:end="35:18">extern</specifier> <name pos:start="35:20" pos:end="35:22">int</name></type> <name pos:start="35:24" pos:end="35:31">ram_size</name></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:63"><expr pos:start="37:13" pos:end="37:62"><name pos:start="37:13" pos:end="37:22">free_space</name> <operator pos:start="37:24" pos:end="37:24">=</operator> <operator pos:start="37:26" pos:end="37:26">(</operator><name pos:start="37:27" pos:end="37:33">int64_t</name><operator pos:start="37:34" pos:end="37:34">)</operator><name pos:start="37:35" pos:end="37:47"><name pos:start="37:35" pos:end="37:38">stfs</name><operator pos:start="37:39" pos:end="37:39">.</operator><name pos:start="37:40" pos:end="37:47">f_bavail</name></name> <operator pos:start="37:49" pos:end="37:49">*</operator> <name pos:start="37:51" pos:end="37:62"><name pos:start="37:51" pos:end="37:54">stfs</name><operator pos:start="37:55" pos:end="37:55">.</operator><name pos:start="37:56" pos:end="37:62">f_bsize</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="75:13"><if pos:start="39:13" pos:end="75:13">if <condition pos:start="39:16" pos:end="39:55">(<expr pos:start="39:17" pos:end="39:54"><operator pos:start="39:17" pos:end="39:17">(</operator><name pos:start="39:18" pos:end="39:25">ram_size</name> <operator pos:start="39:27" pos:end="39:27">+</operator> <literal type="number" pos:start="39:29" pos:end="39:32">8192</literal> <operator pos:start="39:34" pos:end="39:34">*</operator> <literal type="number" pos:start="39:36" pos:end="39:39">1024</literal><operator pos:start="39:40" pos:end="39:40">)</operator> <operator pos:start="39:42" pos:end="39:43">&gt;=</operator> <name pos:start="39:45" pos:end="39:54">free_space</name></expr>)</condition> <block pos:start="39:57" pos:end="75:13">{<block_content pos:start="41:17" pos:end="73:24">

                <expr_stmt pos:start="41:17" pos:end="41:52"><expr pos:start="41:17" pos:end="41:51"><name pos:start="41:17" pos:end="41:22">ram_mb</name> <operator pos:start="41:24" pos:end="41:24">=</operator> <operator pos:start="41:26" pos:end="41:26">(</operator><name pos:start="41:27" pos:end="41:34">ram_size</name> <operator pos:start="41:36" pos:end="41:36">/</operator> <operator pos:start="41:38" pos:end="41:38">(</operator><literal type="number" pos:start="41:39" pos:end="41:42">1024</literal> <operator pos:start="41:44" pos:end="41:44">*</operator> <literal type="number" pos:start="41:46" pos:end="41:49">1024</literal><operator pos:start="41:50" pos:end="41:50">)</operator><operator pos:start="41:51" pos:end="41:51">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="47:40"><expr pos:start="43:17" pos:end="47:39"><call pos:start="43:17" pos:end="47:39"><name pos:start="43:17" pos:end="43:23">fprintf</name><argument_list pos:start="43:24" pos:end="47:39">(<argument pos:start="43:25" pos:end="43:30"><expr pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:30">stderr</name></expr></argument>, 

                        <argument pos:start="45:25" pos:end="45:99"><expr pos:start="45:25" pos:end="45:99"><literal type="string" pos:start="45:25" pos:end="45:99">"You do not have enough space in '%s' for the %d MB of QEMU virtual RAM.\n"</literal></expr></argument>,

                        <argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:30">tmpdir</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">ram_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="49:17" pos:end="69:17"><if pos:start="49:17" pos:end="59:17">if <condition pos:start="49:20" pos:end="49:52">(<expr pos:start="49:21" pos:end="49:51"><call pos:start="49:21" pos:end="49:46"><name pos:start="49:21" pos:end="49:26">strcmp</name><argument_list pos:start="49:27" pos:end="49:46">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:33">tmpdir</name></expr></argument>, <argument pos:start="49:36" pos:end="49:45"><expr pos:start="49:36" pos:end="49:45"><literal type="string" pos:start="49:36" pos:end="49:45">"/dev/shm"</literal></expr></argument>)</argument_list></call> <operator pos:start="49:48" pos:end="49:49">==</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>)</condition> <block pos:start="49:54" pos:end="59:17">{<block_content pos:start="51:21" pos:end="57:41">

                    <expr_stmt pos:start="51:21" pos:end="57:41"><expr pos:start="51:21" pos:end="57:40"><call pos:start="51:21" pos:end="57:40"><name pos:start="51:21" pos:end="51:27">fprintf</name><argument_list pos:start="51:28" pos:end="57:40">(<argument pos:start="51:29" pos:end="51:34"><expr pos:start="51:29" pos:end="51:34"><name pos:start="51:29" pos:end="51:34">stderr</name></expr></argument>, <argument pos:start="51:37" pos:end="55:72"><expr pos:start="51:37" pos:end="55:72"><literal type="string" pos:start="51:37" pos:end="51:119">"To have more space available provided you have enough RAM and swap, do as root:\n"</literal>

                            <literal type="string" pos:start="53:29" pos:end="53:47">"umount /dev/shm\n"</literal>

                            <literal type="string" pos:start="55:29" pos:end="55:72">"mount -t tmpfs -o size=%dm none /dev/shm\n"</literal></expr></argument>,

                            <argument pos:start="57:29" pos:end="57:39"><expr pos:start="57:29" pos:end="57:39"><name pos:start="57:29" pos:end="57:34">ram_mb</name> <operator pos:start="57:36" pos:end="57:36">+</operator> <literal type="number" pos:start="57:38" pos:end="57:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="59:19" pos:end="69:17">else <block pos:start="59:24" pos:end="69:17">{<block_content pos:start="61:21" pos:end="67:68">

                    <expr_stmt pos:start="61:21" pos:end="67:68"><expr pos:start="61:21" pos:end="67:67"><call pos:start="61:21" pos:end="67:67"><name pos:start="61:21" pos:end="61:27">fprintf</name><argument_list pos:start="61:28" pos:end="67:67">(<argument pos:start="61:29" pos:end="61:34"><expr pos:start="61:29" pos:end="61:34"><name pos:start="61:29" pos:end="61:34">stderr</name></expr></argument>, 

                            <argument pos:start="63:29" pos:end="67:66"><expr pos:start="63:29" pos:end="67:66"><literal type="string" pos:start="63:29" pos:end="63:108">"Use the '-m' option of QEMU to diminish the amount of virtual RAM or use the\n"</literal>

                            <literal type="string" pos:start="65:29" pos:end="65:104">"QEMU_TMPDIR environment variable to set another directory where the QEMU\n"</literal>

                            <literal type="string" pos:start="67:29" pos:end="67:66">"temporary RAM file will be opened.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:86"><expr pos:start="71:17" pos:end="71:85"><call pos:start="71:17" pos:end="71:85"><name pos:start="71:17" pos:end="71:23">fprintf</name><argument_list pos:start="71:24" pos:end="71:85">(<argument pos:start="71:25" pos:end="71:30"><expr pos:start="71:25" pos:end="71:30"><name pos:start="71:25" pos:end="71:30">stderr</name></expr></argument>, <argument pos:start="71:33" pos:end="71:84"><expr pos:start="71:33" pos:end="71:84"><literal type="string" pos:start="71:33" pos:end="71:84">"Or disable the accelerator module with -no-kqemu\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:24"><expr pos:start="73:17" pos:end="73:23"><call pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:20">exit</name><argument_list pos:start="73:21" pos:end="73:23">(<argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="81:25"><expr pos:start="79:9" pos:end="81:24"><call pos:start="79:9" pos:end="81:24"><name pos:start="79:9" pos:end="79:16">snprintf</name><argument_list pos:start="79:17" pos:end="81:24">(<argument pos:start="79:18" pos:end="79:30"><expr pos:start="79:18" pos:end="79:30"><name pos:start="79:18" pos:end="79:30">phys_ram_file</name></expr></argument>, <argument pos:start="79:33" pos:end="79:53"><expr pos:start="79:33" pos:end="79:53"><sizeof pos:start="79:33" pos:end="79:53">sizeof<argument_list pos:start="79:39" pos:end="79:53">(<argument pos:start="79:40" pos:end="79:52"><expr pos:start="79:40" pos:end="79:52"><name pos:start="79:40" pos:end="79:52">phys_ram_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:56" pos:end="79:70"><expr pos:start="79:56" pos:end="79:70"><literal type="string" pos:start="79:56" pos:end="79:70">"%s/qemuXXXXXX"</literal></expr></argument>, 

                 <argument pos:start="81:18" pos:end="81:23"><expr pos:start="81:18" pos:end="81:23"><name pos:start="81:18" pos:end="81:23">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="109:9"><if pos:start="83:9" pos:end="109:9">if <condition pos:start="83:12" pos:end="83:39">(<expr pos:start="83:13" pos:end="83:38"><call pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:19">mkstemp</name><argument_list pos:start="83:20" pos:end="83:34">(<argument pos:start="83:21" pos:end="83:33"><expr pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:33">phys_ram_file</name></expr></argument>)</argument_list></call> <operator pos:start="83:36" pos:end="83:36">&lt;</operator> <literal type="number" pos:start="83:38" pos:end="83:38">0</literal></expr>)</condition> <block pos:start="83:41" pos:end="109:9">{<block_content pos:start="85:13" pos:end="107:13">

            <expr_stmt pos:start="85:13" pos:end="93:28"><expr pos:start="85:13" pos:end="93:27"><call pos:start="85:13" pos:end="93:27"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="93:27">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, 

                    <argument pos:start="87:21" pos:end="91:49"><expr pos:start="87:21" pos:end="91:49"><literal type="string" pos:start="87:21" pos:end="87:73">"warning: could not create temporary file in '%s'.\n"</literal>

                    <literal type="string" pos:start="89:21" pos:end="89:84">"Use QEMU_TMPDIR to select a directory in a tmpfs filesystem.\n"</literal>

                    <literal type="string" pos:start="91:21" pos:end="91:49">"Using '/tmp' as fallback.\n"</literal></expr></argument>,

                    <argument pos:start="93:21" pos:end="93:26"><expr pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:26">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:29"><expr pos:start="95:13" pos:end="97:28"><call pos:start="95:13" pos:end="97:28"><name pos:start="95:13" pos:end="95:20">snprintf</name><argument_list pos:start="95:21" pos:end="97:28">(<argument pos:start="95:22" pos:end="95:34"><expr pos:start="95:22" pos:end="95:34"><name pos:start="95:22" pos:end="95:34">phys_ram_file</name></expr></argument>, <argument pos:start="95:37" pos:end="95:57"><expr pos:start="95:37" pos:end="95:57"><sizeof pos:start="95:37" pos:end="95:57">sizeof<argument_list pos:start="95:43" pos:end="95:57">(<argument pos:start="95:44" pos:end="95:56"><expr pos:start="95:44" pos:end="95:56"><name pos:start="95:44" pos:end="95:56">phys_ram_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:60" pos:end="95:74"><expr pos:start="95:60" pos:end="95:74"><literal type="string" pos:start="95:60" pos:end="95:74">"%s/qemuXXXXXX"</literal></expr></argument>, 

                     <argument pos:start="97:22" pos:end="97:27"><expr pos:start="97:22" pos:end="97:27"><literal type="string" pos:start="97:22" pos:end="97:27">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="107:13"><if pos:start="99:13" pos:end="107:13">if <condition pos:start="99:16" pos:end="99:43">(<expr pos:start="99:17" pos:end="99:42"><call pos:start="99:17" pos:end="99:38"><name pos:start="99:17" pos:end="99:23">mkstemp</name><argument_list pos:start="99:24" pos:end="99:38">(<argument pos:start="99:25" pos:end="99:37"><expr pos:start="99:25" pos:end="99:37"><name pos:start="99:25" pos:end="99:37">phys_ram_file</name></expr></argument>)</argument_list></call> <operator pos:start="99:40" pos:end="99:40">&lt;</operator> <literal type="number" pos:start="99:42" pos:end="99:42">0</literal></expr>)</condition> <block pos:start="99:45" pos:end="107:13">{<block_content pos:start="101:17" pos:end="105:24">

                <expr_stmt pos:start="101:17" pos:end="103:39"><expr pos:start="101:17" pos:end="103:38"><call pos:start="101:17" pos:end="103:38"><name pos:start="101:17" pos:end="101:23">fprintf</name><argument_list pos:start="101:24" pos:end="103:38">(<argument pos:start="101:25" pos:end="101:30"><expr pos:start="101:25" pos:end="101:30"><name pos:start="101:25" pos:end="101:30">stderr</name></expr></argument>, <argument pos:start="101:33" pos:end="101:79"><expr pos:start="101:33" pos:end="101:79"><literal type="string" pos:start="101:33" pos:end="101:79">"Could not create temporary memory file '%s'\n"</literal></expr></argument>, 

                        <argument pos:start="103:25" pos:end="103:37"><expr pos:start="103:25" pos:end="103:37"><name pos:start="103:25" pos:end="103:37">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:24"><expr pos:start="105:17" pos:end="105:23"><call pos:start="105:17" pos:end="105:23"><name pos:start="105:17" pos:end="105:20">exit</name><argument_list pos:start="105:21" pos:end="105:23">(<argument pos:start="105:22" pos:end="105:22"><expr pos:start="105:22" pos:end="105:22"><literal type="number" pos:start="105:22" pos:end="105:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:76"><expr pos:start="111:9" pos:end="111:75"><name pos:start="111:9" pos:end="111:19">phys_ram_fd</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <call pos:start="111:23" pos:end="111:75"><name pos:start="111:23" pos:end="111:26">open</name><argument_list pos:start="111:27" pos:end="111:75">(<argument pos:start="111:28" pos:end="111:40"><expr pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:40">phys_ram_file</name></expr></argument>, <argument pos:start="111:43" pos:end="111:68"><expr pos:start="111:43" pos:end="111:68"><name pos:start="111:43" pos:end="111:49">O_CREAT</name> <operator pos:start="111:51" pos:end="111:51">|</operator> <name pos:start="111:53" pos:end="111:59">O_TRUNC</name> <operator pos:start="111:61" pos:end="111:61">|</operator> <name pos:start="111:63" pos:end="111:68">O_RDWR</name></expr></argument>, <argument pos:start="111:71" pos:end="111:74"><expr pos:start="111:71" pos:end="111:74"><literal type="number" pos:start="111:71" pos:end="111:74">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:28">(<expr pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:23">phys_ram_fd</name> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr>)</condition> <block pos:start="113:30" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:20">

            <expr_stmt pos:start="115:13" pos:end="117:35"><expr pos:start="115:13" pos:end="117:34"><call pos:start="115:13" pos:end="117:34"><name pos:start="115:13" pos:end="115:19">fprintf</name><argument_list pos:start="115:20" pos:end="117:34">(<argument pos:start="115:21" pos:end="115:26"><expr pos:start="115:21" pos:end="115:26"><name pos:start="115:21" pos:end="115:26">stderr</name></expr></argument>, <argument pos:start="115:29" pos:end="115:73"><expr pos:start="115:29" pos:end="115:73"><literal type="string" pos:start="115:29" pos:end="115:73">"Could not open temporary memory file '%s'\n"</literal></expr></argument>, 

                    <argument pos:start="117:21" pos:end="117:33"><expr pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:33">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><call pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:16">exit</name><argument_list pos:start="119:17" pos:end="119:19">(<argument pos:start="119:18" pos:end="119:18"><expr pos:start="119:18" pos:end="119:18"><literal type="number" pos:start="119:18" pos:end="119:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:30"><expr pos:start="123:9" pos:end="123:29"><call pos:start="123:9" pos:end="123:29"><name pos:start="123:9" pos:end="123:14">unlink</name><argument_list pos:start="123:15" pos:end="123:29">(<argument pos:start="123:16" pos:end="123:28"><expr pos:start="123:16" pos:end="123:28"><name pos:start="123:16" pos:end="123:28">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:33"><expr pos:start="127:5" pos:end="127:32"><name pos:start="127:5" pos:end="127:8">size</name> <operator pos:start="127:10" pos:end="127:10">=</operator> <operator pos:start="127:12" pos:end="127:12">(</operator><name pos:start="127:13" pos:end="127:16">size</name> <operator pos:start="127:18" pos:end="127:18">+</operator> <literal type="number" pos:start="127:20" pos:end="127:23">4095</literal><operator pos:start="127:24" pos:end="127:24">)</operator> <operator pos:start="127:26" pos:end="127:26">&amp;</operator> <operator pos:start="127:28" pos:end="127:28">~</operator><literal type="number" pos:start="127:29" pos:end="127:32">4095</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:49"><expr pos:start="129:5" pos:end="129:48"><call pos:start="129:5" pos:end="129:48"><name pos:start="129:5" pos:end="129:13">ftruncate</name><argument_list pos:start="129:14" pos:end="129:48">(<argument pos:start="129:15" pos:end="129:25"><expr pos:start="129:15" pos:end="129:25"><name pos:start="129:15" pos:end="129:25">phys_ram_fd</name></expr></argument>, <argument pos:start="129:28" pos:end="129:47"><expr pos:start="129:28" pos:end="129:47"><name pos:start="129:28" pos:end="129:40">phys_ram_size</name> <operator pos:start="129:42" pos:end="129:42">+</operator> <name pos:start="129:44" pos:end="129:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="137:43"><expr pos:start="131:5" pos:end="137:42"><name pos:start="131:5" pos:end="131:7">ptr</name> <operator pos:start="131:9" pos:end="131:9">=</operator> <call pos:start="131:11" pos:end="137:42"><name pos:start="131:11" pos:end="131:14">mmap</name><argument_list pos:start="131:15" pos:end="137:42">(<argument pos:start="131:16" pos:end="131:19"><expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">NULL</name></expr></argument>, 

               <argument pos:start="133:16" pos:end="133:19"><expr pos:start="133:16" pos:end="133:19"><name pos:start="133:16" pos:end="133:19">size</name></expr></argument>, 

               <argument pos:start="135:16" pos:end="135:37"><expr pos:start="135:16" pos:end="135:37"><name pos:start="135:16" pos:end="135:25">PROT_WRITE</name> <operator pos:start="135:27" pos:end="135:27">|</operator> <name pos:start="135:29" pos:end="135:37">PROT_READ</name></expr></argument>, <argument pos:start="135:40" pos:end="135:49"><expr pos:start="135:40" pos:end="135:49"><name pos:start="135:40" pos:end="135:49">MAP_SHARED</name></expr></argument>, 

               <argument pos:start="137:16" pos:end="137:26"><expr pos:start="137:16" pos:end="137:26"><name pos:start="137:16" pos:end="137:26">phys_ram_fd</name></expr></argument>, <argument pos:start="137:29" pos:end="137:41"><expr pos:start="137:29" pos:end="137:41"><name pos:start="137:29" pos:end="137:41">phys_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:26">(<expr pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:11">ptr</name> <operator pos:start="139:13" pos:end="139:14">==</operator> <name pos:start="139:16" pos:end="139:25">MAP_FAILED</name></expr>)</condition> <block pos:start="139:28" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:16">

        <expr_stmt pos:start="141:9" pos:end="141:59"><expr pos:start="141:9" pos:end="141:58"><call pos:start="141:9" pos:end="141:58"><name pos:start="141:9" pos:end="141:15">fprintf</name><argument_list pos:start="141:16" pos:end="141:58">(<argument pos:start="141:17" pos:end="141:22"><expr pos:start="141:17" pos:end="141:22"><name pos:start="141:17" pos:end="141:22">stderr</name></expr></argument>, <argument pos:start="141:25" pos:end="141:57"><expr pos:start="141:25" pos:end="141:57"><literal type="string" pos:start="141:25" pos:end="141:57">"Could not map physical memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:16"><expr pos:start="143:9" pos:end="143:15"><call pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:12">exit</name><argument_list pos:start="143:13" pos:end="143:15">(<argument pos:start="143:14" pos:end="143:14"><expr pos:start="143:14" pos:end="143:14"><literal type="number" pos:start="143:14" pos:end="143:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:26"><expr pos:start="147:5" pos:end="147:25"><name pos:start="147:5" pos:end="147:17">phys_ram_size</name> <operator pos:start="147:19" pos:end="147:20">+=</operator> <name pos:start="147:22" pos:end="147:25">size</name></expr>;</expr_stmt>

    <return pos:start="149:5" pos:end="149:15">return <expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
