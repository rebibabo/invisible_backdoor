<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18552.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">ehci_advance_state</name><parameter_list pos:start="1:31" pos:end="1:58">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:40">EHCIState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">ehci</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:57"><decl pos:start="1:49" pos:end="1:57"><type pos:start="1:49" pos:end="1:57"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:57">async</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:18">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">EHCIQueue</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">q</name> <init pos:start="5:18" pos:end="5:23">= <expr pos:start="5:20" pos:end="5:23"><name pos:start="5:20" pos:end="5:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">again</name></decl>;</decl_stmt>



    <do pos:start="11:5" pos:end="171:18">do <block pos:start="11:8" pos:end="169:5">{<block_content pos:start="13:9" pos:end="167:9">

        <switch pos:start="13:9" pos:end="155:9">switch<condition pos:start="13:15" pos:end="13:43">(<expr pos:start="13:16" pos:end="13:42"><call pos:start="13:16" pos:end="13:42"><name pos:start="13:16" pos:end="13:29">ehci_get_state</name><argument_list pos:start="13:30" pos:end="13:42">(<argument pos:start="13:31" pos:end="13:34"><expr pos:start="13:31" pos:end="13:34"><name pos:start="13:31" pos:end="13:34">ehci</name></expr></argument>, <argument pos:start="13:37" pos:end="13:41"><expr pos:start="13:37" pos:end="13:41"><name pos:start="13:37" pos:end="13:41">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:45" pos:end="155:9">{<block_content pos:start="15:9" pos:end="153:18">

        <case pos:start="15:9" pos:end="15:30">case <expr pos:start="15:14" pos:end="15:29"><name pos:start="15:14" pos:end="15:29">EST_WAITLISTHEAD</name></expr>:</case>

            <expr_stmt pos:start="17:13" pos:end="17:57"><expr pos:start="17:13" pos:end="17:56"><name pos:start="17:13" pos:end="17:17">again</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <call pos:start="17:21" pos:end="17:56"><name pos:start="17:21" pos:end="17:43">ehci_state_waitlisthead</name><argument_list pos:start="17:44" pos:end="17:56">(<argument pos:start="17:45" pos:end="17:48"><expr pos:start="17:45" pos:end="17:48"><name pos:start="17:45" pos:end="17:48">ehci</name></expr></argument>, <argument pos:start="17:51" pos:end="17:55"><expr pos:start="17:51" pos:end="17:55"><name pos:start="17:51" pos:end="17:55">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="19:13" pos:end="19:18">break;</break>



        <case pos:start="23:9" pos:end="23:28">case <expr pos:start="23:14" pos:end="23:27"><name pos:start="23:14" pos:end="23:27">EST_FETCHENTRY</name></expr>:</case>

            <expr_stmt pos:start="25:13" pos:end="25:55"><expr pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:17">again</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="25:54"><name pos:start="25:21" pos:end="25:41">ehci_state_fetchentry</name><argument_list pos:start="25:42" pos:end="25:54">(<argument pos:start="25:43" pos:end="25:46"><expr pos:start="25:43" pos:end="25:46"><name pos:start="25:43" pos:end="25:46">ehci</name></expr></argument>, <argument pos:start="25:49" pos:end="25:53"><expr pos:start="25:49" pos:end="25:53"><name pos:start="25:49" pos:end="25:53">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="27:13" pos:end="27:18">break;</break>



        <case pos:start="31:9" pos:end="31:25">case <expr pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:24">EST_FETCHQH</name></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:48"><expr pos:start="33:13" pos:end="33:47"><name pos:start="33:13" pos:end="33:13">q</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:47"><name pos:start="33:17" pos:end="33:34">ehci_state_fetchqh</name><argument_list pos:start="33:35" pos:end="33:47">(<argument pos:start="33:36" pos:end="33:39"><expr pos:start="33:36" pos:end="33:39"><name pos:start="33:36" pos:end="33:39">ehci</name></expr></argument>, <argument pos:start="33:42" pos:end="33:46"><expr pos:start="33:42" pos:end="33:46"><name pos:start="33:42" pos:end="33:46">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:26">(<expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:17">q</name> <operator pos:start="35:19" pos:end="35:20">!=</operator> <name pos:start="35:22" pos:end="35:25">NULL</name></expr>)</condition> <block pos:start="35:28" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:26">

                <expr_stmt pos:start="37:17" pos:end="37:42"><expr pos:start="37:17" pos:end="37:41"><call pos:start="37:17" pos:end="37:41"><name pos:start="37:17" pos:end="37:22">assert</name><argument_list pos:start="37:23" pos:end="37:41">(<argument pos:start="37:24" pos:end="37:40"><expr pos:start="37:24" pos:end="37:40"><name pos:start="37:24" pos:end="37:31"><name pos:start="37:24" pos:end="37:24">q</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:31">async</name></name> <operator pos:start="37:33" pos:end="37:34">==</operator> <name pos:start="37:36" pos:end="37:40">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:26"><expr pos:start="39:17" pos:end="39:25"><name pos:start="39:17" pos:end="39:21">again</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <literal type="number" pos:start="39:25" pos:end="39:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="41:15" pos:end="45:13">else <block pos:start="41:20" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:26">

                <expr_stmt pos:start="43:17" pos:end="43:26"><expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:21">again</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>



        <case pos:start="51:9" pos:end="51:26">case <expr pos:start="51:14" pos:end="51:25"><name pos:start="51:14" pos:end="51:25">EST_FETCHITD</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:53"><expr pos:start="53:13" pos:end="53:52"><name pos:start="53:13" pos:end="53:17">again</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:52"><name pos:start="53:21" pos:end="53:39">ehci_state_fetchitd</name><argument_list pos:start="53:40" pos:end="53:52">(<argument pos:start="53:41" pos:end="53:44"><expr pos:start="53:41" pos:end="53:44"><name pos:start="53:41" pos:end="53:44">ehci</name></expr></argument>, <argument pos:start="53:47" pos:end="53:51"><expr pos:start="53:47" pos:end="53:51"><name pos:start="53:47" pos:end="53:51">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>



        <case pos:start="59:9" pos:end="59:27">case <expr pos:start="59:14" pos:end="59:26"><name pos:start="59:14" pos:end="59:26">EST_FETCHSITD</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:54"><expr pos:start="61:13" pos:end="61:53"><name pos:start="61:13" pos:end="61:17">again</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:53"><name pos:start="61:21" pos:end="61:40">ehci_state_fetchsitd</name><argument_list pos:start="61:41" pos:end="61:53">(<argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">ehci</name></expr></argument>, <argument pos:start="61:48" pos:end="61:52"><expr pos:start="61:48" pos:end="61:52"><name pos:start="61:48" pos:end="61:52">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>



        <case pos:start="67:9" pos:end="67:30">case <expr pos:start="67:14" pos:end="67:29"><name pos:start="67:14" pos:end="67:29">EST_ADVANCEQUEUE</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><call pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:18">assert</name><argument_list pos:start="69:19" pos:end="69:29">(<argument pos:start="69:20" pos:end="69:28"><expr pos:start="69:20" pos:end="69:28"><name pos:start="69:20" pos:end="69:20">q</name> <operator pos:start="69:22" pos:end="69:23">!=</operator> <name pos:start="69:25" pos:end="69:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:43"><expr pos:start="71:13" pos:end="71:42"><name pos:start="71:13" pos:end="71:17">again</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <call pos:start="71:21" pos:end="71:42"><name pos:start="71:21" pos:end="71:39">ehci_state_advqueue</name><argument_list pos:start="71:40" pos:end="71:42">(<argument pos:start="71:41" pos:end="71:41"><expr pos:start="71:41" pos:end="71:41"><name pos:start="71:41" pos:end="71:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>



        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">EST_FETCHQTD</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><call pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:18">assert</name><argument_list pos:start="79:19" pos:end="79:29">(<argument pos:start="79:20" pos:end="79:28"><expr pos:start="79:20" pos:end="79:28"><name pos:start="79:20" pos:end="79:20">q</name> <operator pos:start="79:22" pos:end="79:23">!=</operator> <name pos:start="79:25" pos:end="79:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:17">again</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:42"><name pos:start="81:21" pos:end="81:39">ehci_state_fetchqtd</name><argument_list pos:start="81:40" pos:end="81:42">(<argument pos:start="81:41" pos:end="81:41"><expr pos:start="81:41" pos:end="81:41"><name pos:start="81:41" pos:end="81:41">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>



        <case pos:start="87:9" pos:end="87:30">case <expr pos:start="87:14" pos:end="87:29"><name pos:start="87:14" pos:end="87:29">EST_HORIZONTALQH</name></expr>:</case>

            <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><call pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:18">assert</name><argument_list pos:start="89:19" pos:end="89:29">(<argument pos:start="89:20" pos:end="89:28"><expr pos:start="89:20" pos:end="89:28"><name pos:start="89:20" pos:end="89:20">q</name> <operator pos:start="89:22" pos:end="89:23">!=</operator> <name pos:start="89:25" pos:end="89:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:42"><expr pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:17">again</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <call pos:start="91:21" pos:end="91:41"><name pos:start="91:21" pos:end="91:38">ehci_state_horizqh</name><argument_list pos:start="91:39" pos:end="91:41">(<argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><name pos:start="91:40" pos:end="91:40">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>



        <case pos:start="97:9" pos:end="97:25">case <expr pos:start="97:14" pos:end="97:24"><name pos:start="97:14" pos:end="97:24">EST_EXECUTE</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><call pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:18">assert</name><argument_list pos:start="99:19" pos:end="99:29">(<argument pos:start="99:20" pos:end="99:28"><expr pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:20">q</name> <operator pos:start="99:22" pos:end="99:23">!=</operator> <name pos:start="99:25" pos:end="99:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:17">again</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <call pos:start="101:21" pos:end="101:41"><name pos:start="101:21" pos:end="101:38">ehci_state_execute</name><argument_list pos:start="101:39" pos:end="101:41">(<argument pos:start="101:40" pos:end="101:40"><expr pos:start="101:40" pos:end="101:40"><name pos:start="101:40" pos:end="101:40">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:22">(<expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:21">async</name></expr>)</condition> <block pos:start="103:24" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:41">

                <expr_stmt pos:start="105:17" pos:end="105:41"><expr pos:start="105:17" pos:end="105:40"><name pos:start="105:17" pos:end="105:36"><name pos:start="105:17" pos:end="105:20">ehci</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:36">async_stepdown</name></name> <operator pos:start="105:38" pos:end="105:38">=</operator> <literal type="number" pos:start="105:40" pos:end="105:40">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>



        <case pos:start="113:9" pos:end="113:27">case <expr pos:start="113:14" pos:end="113:26"><name pos:start="113:14" pos:end="113:26">EST_EXECUTING</name></expr>:</case>

            <expr_stmt pos:start="115:13" pos:end="115:30"><expr pos:start="115:13" pos:end="115:29"><call pos:start="115:13" pos:end="115:29"><name pos:start="115:13" pos:end="115:18">assert</name><argument_list pos:start="115:19" pos:end="115:29">(<argument pos:start="115:20" pos:end="115:28"><expr pos:start="115:20" pos:end="115:28"><name pos:start="115:20" pos:end="115:20">q</name> <operator pos:start="115:22" pos:end="115:23">!=</operator> <name pos:start="115:25" pos:end="115:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="121:13"><if pos:start="117:13" pos:end="121:13">if <condition pos:start="117:16" pos:end="117:22">(<expr pos:start="117:17" pos:end="117:21"><name pos:start="117:17" pos:end="117:21">async</name></expr>)</condition> <block pos:start="117:24" pos:end="121:13">{<block_content pos:start="119:17" pos:end="119:41">

                <expr_stmt pos:start="119:17" pos:end="119:41"><expr pos:start="119:17" pos:end="119:40"><name pos:start="119:17" pos:end="119:36"><name pos:start="119:17" pos:end="119:20">ehci</name><operator pos:start="119:21" pos:end="119:22">-&gt;</operator><name pos:start="119:23" pos:end="119:36">async_stepdown</name></name> <operator pos:start="119:38" pos:end="119:38">=</operator> <literal type="number" pos:start="119:40" pos:end="119:40">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:44"><expr pos:start="123:13" pos:end="123:43"><name pos:start="123:13" pos:end="123:17">again</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:43"><name pos:start="123:21" pos:end="123:40">ehci_state_executing</name><argument_list pos:start="123:41" pos:end="123:43">(<argument pos:start="123:42" pos:end="123:42"><expr pos:start="123:42" pos:end="123:42"><name pos:start="123:42" pos:end="123:42">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>



        <case pos:start="129:9" pos:end="129:27">case <expr pos:start="129:14" pos:end="129:26"><name pos:start="129:14" pos:end="129:26">EST_WRITEBACK</name></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:30"><expr pos:start="131:13" pos:end="131:29"><call pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:18">assert</name><argument_list pos:start="131:19" pos:end="131:29">(<argument pos:start="131:20" pos:end="131:28"><expr pos:start="131:20" pos:end="131:28"><name pos:start="131:20" pos:end="131:20">q</name> <operator pos:start="131:22" pos:end="131:23">!=</operator> <name pos:start="131:25" pos:end="131:28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:44"><expr pos:start="133:13" pos:end="133:43"><name pos:start="133:13" pos:end="133:17">again</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <call pos:start="133:21" pos:end="133:43"><name pos:start="133:21" pos:end="133:40">ehci_state_writeback</name><argument_list pos:start="133:41" pos:end="133:43">(<argument pos:start="133:42" pos:end="133:42"><expr pos:start="133:42" pos:end="133:42"><name pos:start="133:42" pos:end="133:42">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="135:13" pos:end="139:13"><if pos:start="135:13" pos:end="139:13">if <condition pos:start="135:16" pos:end="135:23">(<expr pos:start="135:17" pos:end="135:22"><operator pos:start="135:17" pos:end="135:17">!</operator><name pos:start="135:18" pos:end="135:22">async</name></expr>)</condition> <block pos:start="135:25" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:62">

                <expr_stmt pos:start="137:17" pos:end="137:62"><expr pos:start="137:17" pos:end="137:61"><name pos:start="137:17" pos:end="137:43"><name pos:start="137:17" pos:end="137:20">ehci</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:43">periodic_sched_active</name></name> <operator pos:start="137:45" pos:end="137:45">=</operator> <name pos:start="137:47" pos:end="137:61">PERIODIC_ACTIVE</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="141:13" pos:end="141:18">break;</break>



        <default pos:start="145:9" pos:end="145:16">default:</default>

            <expr_stmt pos:start="147:13" pos:end="147:44"><expr pos:start="147:13" pos:end="147:43"><call pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:19">fprintf</name><argument_list pos:start="147:20" pos:end="147:43">(<argument pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:26"><name pos:start="147:21" pos:end="147:26">stderr</name></expr></argument>, <argument pos:start="147:29" pos:end="147:42"><expr pos:start="147:29" pos:end="147:42"><literal type="string" pos:start="147:29" pos:end="147:42">"Bad state!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:23"><expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:17">again</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <operator pos:start="149:21" pos:end="149:21">-</operator><literal type="number" pos:start="149:22" pos:end="149:22">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:35"><expr pos:start="151:13" pos:end="151:34"><call pos:start="151:13" pos:end="151:34"><name pos:start="151:13" pos:end="151:32">g_assert_not_reached</name><argument_list pos:start="151:33" pos:end="151:34">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="159:9" pos:end="167:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:22">(<expr pos:start="159:13" pos:end="159:21"><name pos:start="159:13" pos:end="159:17">again</name> <operator pos:start="159:19" pos:end="159:19">&lt;</operator> <literal type="number" pos:start="159:21" pos:end="159:21">0</literal></expr>)</condition> <block pos:start="159:24" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:22">

            <expr_stmt pos:start="161:13" pos:end="161:70"><expr pos:start="161:13" pos:end="161:69"><call pos:start="161:13" pos:end="161:69"><name pos:start="161:13" pos:end="161:19">fprintf</name><argument_list pos:start="161:20" pos:end="161:69">(<argument pos:start="161:21" pos:end="161:26"><expr pos:start="161:21" pos:end="161:26"><name pos:start="161:21" pos:end="161:26">stderr</name></expr></argument>, <argument pos:start="161:29" pos:end="161:68"><expr pos:start="161:29" pos:end="161:68"><literal type="string" pos:start="161:29" pos:end="161:68">"processing error - resetting ehci HC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:29"><expr pos:start="163:13" pos:end="163:28"><call pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:22">ehci_reset</name><argument_list pos:start="163:23" pos:end="163:28">(<argument pos:start="163:24" pos:end="163:27"><expr pos:start="163:24" pos:end="163:27"><name pos:start="163:24" pos:end="163:27">ehci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:22"><expr pos:start="165:13" pos:end="165:21"><name pos:start="165:13" pos:end="165:17">again</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <literal type="number" pos:start="165:21" pos:end="165:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    while <condition pos:start="171:11" pos:end="171:17">(<expr pos:start="171:12" pos:end="171:16"><name pos:start="171:12" pos:end="171:16">again</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
