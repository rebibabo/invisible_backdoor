<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25823.c" pos:tabs="8"><function pos:start="1:1" pos:end="84:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:30">avcodec_default_get_buffer</name><parameter_list pos:start="1:31" pos:end="1:63">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:57">AVFrame</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">pic</name></decl></parameter>)</parameter_list><block pos:start="1:64" pos:end="84:1">{<block_content pos:start="2:5" pos:end="83:13">
    <decl_stmt pos:start="2:5" pos:end="2:10"><decl pos:start="2:5" pos:end="2:9"><type pos:start="2:5" pos:end="2:7"><name pos:start="2:5" pos:end="2:7">int</name></type> <name pos:start="2:9" pos:end="2:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="3:5" pos:end="3:20"><decl pos:start="3:5" pos:end="3:19"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">w</name><init pos:start="3:10" pos:end="3:19">= <expr pos:start="3:12" pos:end="3:19"><name pos:start="3:12" pos:end="3:19"><name pos:start="3:12" pos:end="3:12">s</name><operator pos:start="3:13" pos:end="3:14">-&gt;</operator><name pos:start="3:15" pos:end="3:19">width</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:21"><decl pos:start="4:5" pos:end="4:20"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:9">h</name><init pos:start="4:10" pos:end="4:20">= <expr pos:start="4:12" pos:end="4:20"><name pos:start="4:12" pos:end="4:20"><name pos:start="4:12" pos:end="4:12">s</name><operator pos:start="4:13" pos:end="4:14">-&gt;</operator><name pos:start="4:15" pos:end="4:20">height</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">InternalBuffer</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:23"><type pos:start="6:5" pos:end="6:9"><name pos:start="6:5" pos:end="6:7">int</name> <modifier pos:start="6:9" pos:end="6:9">*</modifier></type><name pos:start="6:10" pos:end="6:23">picture_number</name></decl>;</decl_stmt>
    <if_stmt pos:start="7:5" pos:end="10:5"><if pos:start="7:5" pos:end="10:5">if<condition pos:start="7:7" pos:end="7:26">(<expr pos:start="7:8" pos:end="7:25"><name pos:start="7:8" pos:end="7:19"><name pos:start="7:8" pos:end="7:10">pic</name><operator pos:start="7:11" pos:end="7:12">-&gt;</operator><name pos:start="7:13" pos:end="7:16">data</name><index pos:start="7:17" pos:end="7:19">[<expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr>]</index></name><operator pos:start="7:20" pos:end="7:21">!=</operator><name pos:start="7:22" pos:end="7:25">NULL</name></expr>)</condition> <block pos:start="7:28" pos:end="10:5">{<block_content pos:start="8:9" pos:end="9:18">
        <expr_stmt pos:start="8:9" pos:end="8:86"><expr pos:start="8:9" pos:end="8:85"><call pos:start="8:9" pos:end="8:85"><name pos:start="8:9" pos:end="8:14">av_log</name><argument_list pos:start="8:15" pos:end="8:85">(<argument pos:start="8:16" pos:end="8:16"><expr pos:start="8:16" pos:end="8:16"><name pos:start="8:16" pos:end="8:16">s</name></expr></argument>, <argument pos:start="8:19" pos:end="8:30"><expr pos:start="8:19" pos:end="8:30"><name pos:start="8:19" pos:end="8:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="8:33" pos:end="8:84"><expr pos:start="8:33" pos:end="8:84"><literal type="string" pos:start="8:33" pos:end="8:84">"pic-&gt;data[0]!=NULL in avcodec_default_get_buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="9:9" pos:end="9:18">return <expr pos:start="9:16" pos:end="9:17"><operator pos:start="9:16" pos:end="9:16">-</operator><literal type="number" pos:start="9:17" pos:end="9:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="11:5" pos:end="14:5"><if pos:start="11:5" pos:end="14:5">if<condition pos:start="11:7" pos:end="11:56">(<expr pos:start="11:8" pos:end="11:55"><name pos:start="11:8" pos:end="11:31"><name pos:start="11:8" pos:end="11:8">s</name><operator pos:start="11:9" pos:end="11:10">-&gt;</operator><name pos:start="11:11" pos:end="11:31">internal_buffer_count</name></name> <operator pos:start="11:33" pos:end="11:34">&gt;=</operator> <name pos:start="11:36" pos:end="11:55">INTERNAL_BUFFER_SIZE</name></expr>)</condition> <block pos:start="11:58" pos:end="14:5">{<block_content pos:start="12:9" pos:end="13:18">
        <expr_stmt pos:start="12:9" pos:end="12:94"><expr pos:start="12:9" pos:end="12:93"><call pos:start="12:9" pos:end="12:93"><name pos:start="12:9" pos:end="12:14">av_log</name><argument_list pos:start="12:15" pos:end="12:93">(<argument pos:start="12:16" pos:end="12:16"><expr pos:start="12:16" pos:end="12:16"><name pos:start="12:16" pos:end="12:16">s</name></expr></argument>, <argument pos:start="12:19" pos:end="12:30"><expr pos:start="12:19" pos:end="12:30"><name pos:start="12:19" pos:end="12:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="12:33" pos:end="12:92"><expr pos:start="12:33" pos:end="12:92"><literal type="string" pos:start="12:33" pos:end="12:92">"internal_buffer_count overflow (missing release_buffer?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="15:5" pos:end="16:18"><if pos:start="15:5" pos:end="16:18">if<condition pos:start="15:7" pos:end="15:39">(<expr pos:start="15:8" pos:end="15:38"><call pos:start="15:8" pos:end="15:38"><name pos:start="15:8" pos:end="15:31">avcodec_check_dimensions</name><argument_list pos:start="15:32" pos:end="15:38">(<argument pos:start="15:33" pos:end="15:33"><expr pos:start="15:33" pos:end="15:33"><name pos:start="15:33" pos:end="15:33">s</name></expr></argument>,<argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><name pos:start="15:35" pos:end="15:35">w</name></expr></argument>,<argument pos:start="15:37" pos:end="15:37"><expr pos:start="15:37" pos:end="15:37"><name pos:start="15:37" pos:end="15:37">h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="16:9" pos:end="16:18"><block_content pos:start="16:9" pos:end="16:18">
        <return pos:start="16:9" pos:end="16:18">return <expr pos:start="16:16" pos:end="16:17"><operator pos:start="16:16" pos:end="16:16">-</operator><literal type="number" pos:start="16:17" pos:end="16:17">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="17:5" pos:end="27:0"><if pos:start="17:5" pos:end="27:0">if<condition pos:start="17:7" pos:end="17:32">(<expr pos:start="17:8" pos:end="17:31"><name pos:start="17:8" pos:end="17:25"><name pos:start="17:8" pos:end="17:8">s</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:25">internal_buffer</name></name><operator pos:start="17:26" pos:end="17:27">==</operator><name pos:start="17:28" pos:end="17:31">NULL</name></expr>)</condition><block pos:start="17:33" pos:end="27:0">{<block_content pos:start="18:9" pos:end="18:84">
        <expr_stmt pos:start="18:9" pos:end="18:84"><expr pos:start="18:9" pos:end="18:83"><name pos:start="18:9" pos:end="18:26"><name pos:start="18:9" pos:end="18:9">s</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:26">internal_buffer</name></name><operator pos:start="18:27" pos:end="18:27">=</operator> <call pos:start="18:29" pos:end="18:83"><name pos:start="18:29" pos:end="18:38">av_mallocz</name><argument_list pos:start="18:39" pos:end="18:83">(<argument pos:start="18:40" pos:end="18:82"><expr pos:start="18:40" pos:end="18:82"><name pos:start="18:40" pos:end="18:59">INTERNAL_BUFFER_SIZE</name><operator pos:start="18:60" pos:end="18:60">*</operator><sizeof pos:start="18:61" pos:end="18:82">sizeof<argument_list pos:start="18:67" pos:end="18:82">(<argument pos:start="18:68" pos:end="18:81"><expr pos:start="18:68" pos:end="18:81"><name pos:start="18:68" pos:end="18:81">InternalBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:if pos:start="20:1" pos:end="20:5">#<cpp:directive pos:start="20:2" pos:end="20:3">if</cpp:directive> <expr pos:start="20:5" pos:end="20:5"><literal type="number" pos:start="20:5" pos:end="20:5">0</literal></expr></cpp:if>
    s-&gt;internal_buffer= av_fast_realloc(
        s-&gt;internal_buffer,
        &amp;s-&gt;internal_buffer_size,
        sizeof(InternalBuffer)*FFMAX(99,  s-&gt;internal_buffer_count+1)<comment type="block" pos:start="24:70" pos:end="24:78">/*FIXME*/</comment>
        );
<cpp:endif pos:start="26:1" pos:end="26:6">#<cpp:directive pos:start="26:2" pos:end="26:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="27:5" pos:end="27:74"><expr pos:start="27:5" pos:end="27:73"><name pos:start="27:5" pos:end="27:7">buf</name><operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">&amp;</operator><operator pos:start="27:11" pos:end="27:11">(</operator><operator pos:start="27:12" pos:end="27:12">(</operator><name pos:start="27:13" pos:end="27:26">InternalBuffer</name><operator pos:start="27:27" pos:end="27:27">*</operator><operator pos:start="27:28" pos:end="27:28">)</operator><name pos:start="27:29" pos:end="27:46"><name pos:start="27:29" pos:end="27:29">s</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:46">internal_buffer</name></name><operator pos:start="27:47" pos:end="27:47">)</operator><index pos:start="27:48" pos:end="27:73">[<expr pos:start="27:49" pos:end="27:72"><name pos:start="27:49" pos:end="27:72"><name pos:start="27:49" pos:end="27:49">s</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:72">internal_buffer_count</name></name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:98"><expr pos:start="28:5" pos:end="28:97"><name pos:start="28:5" pos:end="28:18">picture_number</name><operator pos:start="28:19" pos:end="28:19">=</operator> <operator pos:start="28:21" pos:end="28:21">&amp;</operator><operator pos:start="28:22" pos:end="28:22">(</operator><operator pos:start="28:23" pos:end="28:23">(</operator><operator pos:start="28:24" pos:end="28:24">(</operator><name pos:start="28:25" pos:end="28:38">InternalBuffer</name><operator pos:start="28:39" pos:end="28:39">*</operator><operator pos:start="28:40" pos:end="28:40">)</operator><name pos:start="28:41" pos:end="28:58"><name pos:start="28:41" pos:end="28:41">s</name><operator pos:start="28:42" pos:end="28:43">-&gt;</operator><name pos:start="28:44" pos:end="28:58">internal_buffer</name></name><operator pos:start="28:59" pos:end="28:59">)</operator><index pos:start="28:60" pos:end="28:83">[<expr pos:start="28:61" pos:end="28:82"><name pos:start="28:61" pos:end="28:80">INTERNAL_BUFFER_SIZE</name><operator pos:start="28:81" pos:end="28:81">-</operator><literal type="number" pos:start="28:82" pos:end="28:82">1</literal></expr>]</index><operator pos:start="28:84" pos:end="28:84">)</operator><operator pos:start="28:85" pos:end="28:85">.</operator><name pos:start="28:86" pos:end="28:97">last_pic_num</name></expr>;</expr_stmt> <comment type="line" pos:start="28:100" pos:end="28:116">//FIXME ugly hack</comment>
    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><operator pos:start="29:5" pos:end="29:5">(</operator><operator pos:start="29:6" pos:end="29:6">*</operator><name pos:start="29:7" pos:end="29:20">picture_number</name><operator pos:start="29:21" pos:end="29:21">)</operator><operator pos:start="29:22" pos:end="29:23">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="75:5"><if pos:start="30:5" pos:end="33:5">if<condition pos:start="30:7" pos:end="30:20">(<expr pos:start="30:8" pos:end="30:19"><name pos:start="30:8" pos:end="30:19"><name pos:start="30:8" pos:end="30:10">buf</name><operator pos:start="30:11" pos:end="30:12">-&gt;</operator><name pos:start="30:13" pos:end="30:16">base</name><index pos:start="30:17" pos:end="30:19">[<expr pos:start="30:18" pos:end="30:18"><literal type="number" pos:start="30:18" pos:end="30:18">0</literal></expr>]</index></name></expr>)</condition><block pos:start="30:21" pos:end="33:5">{<block_content pos:start="31:9" pos:end="32:43">
        <expr_stmt pos:start="31:9" pos:end="31:54"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">pic</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:16">age</name></name><operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">*</operator><name pos:start="31:20" pos:end="31:33">picture_number</name> <operator pos:start="31:35" pos:end="31:35">-</operator> <name pos:start="31:37" pos:end="31:53"><name pos:start="31:37" pos:end="31:39">buf</name><operator pos:start="31:40" pos:end="31:41">-&gt;</operator><name pos:start="31:42" pos:end="31:53">last_pic_num</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:43"><expr pos:start="32:9" pos:end="32:42"><name pos:start="32:9" pos:end="32:25"><name pos:start="32:9" pos:end="32:11">buf</name><operator pos:start="32:12" pos:end="32:13">-&gt;</operator><name pos:start="32:14" pos:end="32:25">last_pic_num</name></name><operator pos:start="32:26" pos:end="32:26">=</operator> <operator pos:start="32:28" pos:end="32:28">*</operator><name pos:start="32:29" pos:end="32:42">picture_number</name></expr>;</expr_stmt>
    </block_content>}</block></if><else pos:start="33:6" pos:end="75:5">else<block pos:start="33:10" pos:end="75:5">{<block_content pos:start="34:9" pos:end="74:33">
        <decl_stmt pos:start="34:9" pos:end="34:43"><decl pos:start="34:9" pos:end="34:26"><type pos:start="34:9" pos:end="34:11"><name pos:start="34:9" pos:end="34:11">int</name></type> <name pos:start="34:13" pos:end="34:26">h_chroma_shift</name></decl>, <decl pos:start="34:29" pos:end="34:42"><type ref="prev" pos:start="34:9" pos:end="34:11"/><name pos:start="34:29" pos:end="34:42">v_chroma_shift</name></decl>;</decl_stmt>
        <decl_stmt pos:start="35:9" pos:end="35:32"><decl pos:start="35:9" pos:end="35:22"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:22">pixel_size</name></decl>, <decl pos:start="35:25" pos:end="35:31"><type ref="prev" pos:start="35:9" pos:end="35:11"/><name pos:start="35:25" pos:end="35:31"><name pos:start="35:25" pos:end="35:28">size</name><index pos:start="35:29" pos:end="35:31">[<expr pos:start="35:30" pos:end="35:30"><literal type="number" pos:start="35:30" pos:end="35:30">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="36:9" pos:end="36:26"><decl pos:start="36:9" pos:end="36:25"><type pos:start="36:9" pos:end="36:17"><name pos:start="36:9" pos:end="36:17">AVPicture</name></type> <name pos:start="36:19" pos:end="36:25">picture</name></decl>;</decl_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:84"><expr pos:start="37:9" pos:end="37:83"><call pos:start="37:9" pos:end="37:83"><name pos:start="37:9" pos:end="37:37">avcodec_get_chroma_sub_sample</name><argument_list pos:start="37:38" pos:end="37:83">(<argument pos:start="37:39" pos:end="37:48"><expr pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:48"><name pos:start="37:39" pos:end="37:39">s</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:48">pix_fmt</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:65"><expr pos:start="37:51" pos:end="37:65"><operator pos:start="37:51" pos:end="37:51">&amp;</operator><name pos:start="37:52" pos:end="37:65">h_chroma_shift</name></expr></argument>, <argument pos:start="37:68" pos:end="37:82"><expr pos:start="37:68" pos:end="37:82"><operator pos:start="37:68" pos:end="37:68">&amp;</operator><name pos:start="37:69" pos:end="37:82">v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="41:9"><if pos:start="38:9" pos:end="41:9">if<condition pos:start="38:11" pos:end="38:43">(<expr pos:start="38:12" pos:end="38:42"><operator pos:start="38:12" pos:end="38:12">!</operator><operator pos:start="38:13" pos:end="38:13">(</operator><name pos:start="38:14" pos:end="38:21"><name pos:start="38:14" pos:end="38:14">s</name><operator pos:start="38:15" pos:end="38:16">-&gt;</operator><name pos:start="38:17" pos:end="38:21">flags</name></name><operator pos:start="38:22" pos:end="38:22">&amp;</operator><name pos:start="38:23" pos:end="38:41">CODEC_FLAG_EMU_EDGE</name><operator pos:start="38:42" pos:end="38:42">)</operator></expr>)</condition><block pos:start="38:44" pos:end="41:9">{<block_content pos:start="39:13" pos:end="40:29">
            <expr_stmt pos:start="39:13" pos:end="39:29"><expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:13">w</name><operator pos:start="39:14" pos:end="39:15">+=</operator> <name pos:start="39:17" pos:end="39:26">EDGE_WIDTH</name><operator pos:start="39:27" pos:end="39:27">*</operator><literal type="number" pos:start="39:28" pos:end="39:28">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:29"><expr pos:start="40:13" pos:end="40:28"><name pos:start="40:13" pos:end="40:13">h</name><operator pos:start="40:14" pos:end="40:15">+=</operator> <name pos:start="40:17" pos:end="40:26">EDGE_WIDTH</name><operator pos:start="40:27" pos:end="40:27">*</operator><literal type="number" pos:start="40:28" pos:end="40:28">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:57"><expr pos:start="42:9" pos:end="42:56"><call pos:start="42:9" pos:end="42:56"><name pos:start="42:9" pos:end="42:22">avpicture_fill</name><argument_list pos:start="42:23" pos:end="42:56">(<argument pos:start="42:24" pos:end="42:31"><expr pos:start="42:24" pos:end="42:31"><operator pos:start="42:24" pos:end="42:24">&amp;</operator><name pos:start="42:25" pos:end="42:31">picture</name></expr></argument>, <argument pos:start="42:34" pos:end="42:37"><expr pos:start="42:34" pos:end="42:37"><name pos:start="42:34" pos:end="42:37">NULL</name></expr></argument>, <argument pos:start="42:40" pos:end="42:49"><expr pos:start="42:40" pos:end="42:49"><name pos:start="42:40" pos:end="42:49"><name pos:start="42:40" pos:end="42:40">s</name><operator pos:start="42:41" pos:end="42:42">-&gt;</operator><name pos:start="42:43" pos:end="42:49">pix_fmt</name></name></expr></argument>, <argument pos:start="42:52" pos:end="42:52"><expr pos:start="42:52" pos:end="42:52"><name pos:start="42:52" pos:end="42:52">w</name></expr></argument>, <argument pos:start="42:55" pos:end="42:55"><expr pos:start="42:55" pos:end="42:55"><name pos:start="42:55" pos:end="42:55">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:18">pixel_size</name><operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:39"><name pos:start="43:21" pos:end="43:27">picture</name><operator pos:start="43:28" pos:end="43:28">.</operator><name pos:start="43:29" pos:end="43:36">linesize</name><index pos:start="43:37" pos:end="43:39">[<expr pos:start="43:38" pos:end="43:38"><literal type="number" pos:start="43:38" pos:end="43:38">0</literal></expr>]</index></name><operator pos:start="43:40" pos:end="43:40">*</operator><literal type="number" pos:start="43:41" pos:end="43:41">8</literal> <operator pos:start="43:43" pos:end="43:43">/</operator> <name pos:start="43:45" pos:end="43:45">w</name></expr>;</expr_stmt>
<comment type="line" pos:start="44:1" pos:end="44:86">//av_log(NULL, AV_LOG_ERROR, "%d %d %d %d\n", (int)picture.data[1], w, h, s-&gt;pix_fmt);</comment>
        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:14">assert</name><argument_list pos:start="45:15" pos:end="45:29">(<argument pos:start="45:16" pos:end="45:28"><expr pos:start="45:16" pos:end="45:28"><name pos:start="45:16" pos:end="45:25">pixel_size</name><operator pos:start="45:26" pos:end="45:27">&gt;=</operator><literal type="number" pos:start="45:28" pos:end="45:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:start="46:13" pos:end="46:108">//FIXME next ensures that linesize= 2^x uvlinesize, thats needed because some MC code assumes it</comment>
        <if_stmt pos:start="47:9" pos:end="50:82"><if pos:start="47:9" pos:end="48:54">if<condition pos:start="47:11" pos:end="47:29">(<expr pos:start="47:12" pos:end="47:28"><name pos:start="47:12" pos:end="47:21">pixel_size</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="number" pos:start="47:26" pos:end="47:26">3</literal><operator pos:start="47:27" pos:end="47:27">*</operator><literal type="number" pos:start="47:28" pos:end="47:28">8</literal></expr>)</condition><block type="pseudo" pos:start="48:13" pos:end="48:54"><block_content pos:start="48:13" pos:end="48:54">
            <expr_stmt pos:start="48:13" pos:end="48:54"><expr pos:start="48:13" pos:end="48:53"><name pos:start="48:13" pos:end="48:13">w</name><operator pos:start="48:14" pos:end="48:14">=</operator> <call pos:start="48:16" pos:end="48:53"><name pos:start="48:16" pos:end="48:20">ALIGN</name><argument_list pos:start="48:21" pos:end="48:53">(<argument pos:start="48:22" pos:end="48:22"><expr pos:start="48:22" pos:end="48:22"><name pos:start="48:22" pos:end="48:22">w</name></expr></argument>, <argument pos:start="48:25" pos:end="48:52"><expr pos:start="48:25" pos:end="48:52"><name pos:start="48:25" pos:end="48:36">STRIDE_ALIGN</name><operator pos:start="48:37" pos:end="48:38">&lt;&lt;</operator><name pos:start="48:39" pos:end="48:52">h_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="49:9" pos:end="50:82">else<block type="pseudo" pos:start="50:13" pos:end="50:82"><block_content pos:start="50:13" pos:end="50:82">
            <expr_stmt pos:start="50:13" pos:end="50:82"><expr pos:start="50:13" pos:end="50:81"><name pos:start="50:13" pos:end="50:13">w</name><operator pos:start="50:14" pos:end="50:14">=</operator> <call pos:start="50:16" pos:end="50:68"><name pos:start="50:16" pos:end="50:20">ALIGN</name><argument_list pos:start="50:21" pos:end="50:68">(<argument pos:start="50:22" pos:end="50:33"><expr pos:start="50:22" pos:end="50:33"><name pos:start="50:22" pos:end="50:31">pixel_size</name><operator pos:start="50:32" pos:end="50:32">*</operator><name pos:start="50:33" pos:end="50:33">w</name></expr></argument>, <argument pos:start="50:36" pos:end="50:67"><expr pos:start="50:36" pos:end="50:67"><name pos:start="50:36" pos:end="50:47">STRIDE_ALIGN</name><operator pos:start="50:48" pos:end="50:49">&lt;&lt;</operator><operator pos:start="50:50" pos:end="50:50">(</operator><name pos:start="50:51" pos:end="50:64">h_chroma_shift</name><operator pos:start="50:65" pos:end="50:65">+</operator><literal type="number" pos:start="50:66" pos:end="50:66">3</literal><operator pos:start="50:67" pos:end="50:67">)</operator></expr></argument>)</argument_list></call> <operator pos:start="50:70" pos:end="50:70">/</operator> <name pos:start="50:72" pos:end="50:81">pixel_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:67"><expr pos:start="51:9" pos:end="51:66"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:12">size</name><index pos:start="51:13" pos:end="51:15">[<expr pos:start="51:14" pos:end="51:14"><literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr>]</index></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:66"><name pos:start="51:19" pos:end="51:32">avpicture_fill</name><argument_list pos:start="51:33" pos:end="51:66">(<argument pos:start="51:34" pos:end="51:41"><expr pos:start="51:34" pos:end="51:41"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:41">picture</name></expr></argument>, <argument pos:start="51:44" pos:end="51:47"><expr pos:start="51:44" pos:end="51:47"><name pos:start="51:44" pos:end="51:47">NULL</name></expr></argument>, <argument pos:start="51:50" pos:end="51:59"><expr pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:59"><name pos:start="51:50" pos:end="51:50">s</name><operator pos:start="51:51" pos:end="51:52">-&gt;</operator><name pos:start="51:53" pos:end="51:59">pix_fmt</name></name></expr></argument>, <argument pos:start="51:62" pos:end="51:62"><expr pos:start="51:62" pos:end="51:62"><name pos:start="51:62" pos:end="51:62">w</name></expr></argument>, <argument pos:start="51:65" pos:end="51:65"><expr pos:start="51:65" pos:end="51:65"><name pos:start="51:65" pos:end="51:65">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="52:9" pos:end="52:42"><expr pos:start="52:9" pos:end="52:41"><name pos:start="52:9" pos:end="52:15"><name pos:start="52:9" pos:end="52:12">size</name><index pos:start="52:13" pos:end="52:15">[<expr pos:start="52:14" pos:end="52:14"><literal type="number" pos:start="52:14" pos:end="52:14">0</literal></expr>]</index></name> <operator pos:start="52:17" pos:end="52:17">=</operator> <name pos:start="52:19" pos:end="52:37"><name pos:start="52:19" pos:end="52:25">picture</name><operator pos:start="52:26" pos:end="52:26">.</operator><name pos:start="52:27" pos:end="52:34">linesize</name><index pos:start="52:35" pos:end="52:37">[<expr pos:start="52:36" pos:end="52:36"><literal type="number" pos:start="52:36" pos:end="52:36">0</literal></expr>]</index></name> <operator pos:start="52:39" pos:end="52:39">*</operator> <name pos:start="52:41" pos:end="52:41">h</name></expr>;</expr_stmt>
        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">size</name><index pos:start="53:13" pos:end="53:15">[<expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>]</index></name> <operator pos:start="53:17" pos:end="53:18">-=</operator> <name pos:start="53:20" pos:end="53:26"><name pos:start="53:20" pos:end="53:23">size</name><index pos:start="53:24" pos:end="53:26">[<expr pos:start="53:25" pos:end="53:25"><literal type="number" pos:start="53:25" pos:end="53:25">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt pos:start="54:9" pos:end="57:23"><if pos:start="54:9" pos:end="55:40">if<condition pos:start="54:11" pos:end="54:27">(<expr pos:start="54:12" pos:end="54:26"><name pos:start="54:12" pos:end="54:26"><name pos:start="54:12" pos:end="54:18">picture</name><operator pos:start="54:19" pos:end="54:19">.</operator><name pos:start="54:20" pos:end="54:23">data</name><index pos:start="54:24" pos:end="54:26">[<expr pos:start="54:25" pos:end="54:25"><literal type="number" pos:start="54:25" pos:end="54:25">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:40"><block_content pos:start="55:13" pos:end="55:40">
            <expr_stmt pos:start="55:13" pos:end="55:40"><expr pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">size</name><index pos:start="55:17" pos:end="55:19">[<expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr>]</index></name><operator pos:start="55:20" pos:end="55:20">=</operator> <name pos:start="55:22" pos:end="55:28"><name pos:start="55:22" pos:end="55:25">size</name><index pos:start="55:26" pos:end="55:28">[<expr pos:start="55:27" pos:end="55:27"><literal type="number" pos:start="55:27" pos:end="55:27">2</literal></expr>]</index></name><operator pos:start="55:29" pos:end="55:29">=</operator> <name pos:start="55:31" pos:end="55:37"><name pos:start="55:31" pos:end="55:34">size</name><index pos:start="55:35" pos:end="55:37">[<expr pos:start="55:36" pos:end="55:36"><literal type="number" pos:start="55:36" pos:end="55:36">1</literal></expr>]</index></name><operator pos:start="55:38" pos:end="55:38">/</operator><literal type="number" pos:start="55:39" pos:end="55:39">2</literal></expr>;</expr_stmt></block_content></block></if>
        <else pos:start="56:9" pos:end="57:23">else<block type="pseudo" pos:start="57:13" pos:end="57:23"><block_content pos:start="57:13" pos:end="57:23">
            <expr_stmt pos:start="57:13" pos:end="57:23"><expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">size</name><index pos:start="57:17" pos:end="57:19">[<expr pos:start="57:18" pos:end="57:18"><literal type="number" pos:start="57:18" pos:end="57:18">2</literal></expr>]</index></name><operator pos:start="57:20" pos:end="57:20">=</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt pos:start="58:9" pos:end="58:43"><expr pos:start="58:9" pos:end="58:42"><name pos:start="58:9" pos:end="58:25"><name pos:start="58:9" pos:end="58:11">buf</name><operator pos:start="58:12" pos:end="58:13">-&gt;</operator><name pos:start="58:14" pos:end="58:25">last_pic_num</name></name><operator pos:start="58:26" pos:end="58:26">=</operator> <operator pos:start="58:28" pos:end="58:28">-</operator><literal type="number" pos:start="58:29" pos:end="58:31">256</literal><operator pos:start="58:32" pos:end="58:32">*</operator><literal type="number" pos:start="58:33" pos:end="58:35">256</literal><operator pos:start="58:36" pos:end="58:36">*</operator><literal type="number" pos:start="58:37" pos:end="58:39">256</literal><operator pos:start="58:40" pos:end="58:40">*</operator><literal type="number" pos:start="58:41" pos:end="58:42">64</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:14">memset</name><argument_list pos:start="59:15" pos:end="59:47">(<argument pos:start="59:16" pos:end="59:24"><expr pos:start="59:16" pos:end="59:24"><name pos:start="59:16" pos:end="59:24"><name pos:start="59:16" pos:end="59:18">buf</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:24">base</name></name></expr></argument>, <argument pos:start="59:27" pos:end="59:27"><expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></argument>, <argument pos:start="59:30" pos:end="59:46"><expr pos:start="59:30" pos:end="59:46"><sizeof pos:start="59:30" pos:end="59:46">sizeof<argument_list pos:start="59:36" pos:end="59:46">(<argument pos:start="59:37" pos:end="59:45"><expr pos:start="59:37" pos:end="59:45"><name pos:start="59:37" pos:end="59:45"><name pos:start="59:37" pos:end="59:39">buf</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:45">base</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:48"><expr pos:start="60:9" pos:end="60:47"><call pos:start="60:9" pos:end="60:47"><name pos:start="60:9" pos:end="60:14">memset</name><argument_list pos:start="60:15" pos:end="60:47">(<argument pos:start="60:16" pos:end="60:24"><expr pos:start="60:16" pos:end="60:24"><name pos:start="60:16" pos:end="60:24"><name pos:start="60:16" pos:end="60:18">buf</name><operator pos:start="60:19" pos:end="60:20">-&gt;</operator><name pos:start="60:21" pos:end="60:24">data</name></name></expr></argument>, <argument pos:start="60:27" pos:end="60:27"><expr pos:start="60:27" pos:end="60:27"><literal type="number" pos:start="60:27" pos:end="60:27">0</literal></expr></argument>, <argument pos:start="60:30" pos:end="60:46"><expr pos:start="60:30" pos:end="60:46"><sizeof pos:start="60:30" pos:end="60:46">sizeof<argument_list pos:start="60:36" pos:end="60:46">(<argument pos:start="60:37" pos:end="60:45"><expr pos:start="60:37" pos:end="60:45"><name pos:start="60:37" pos:end="60:45"><name pos:start="60:37" pos:end="60:39">buf</name><operator pos:start="60:40" pos:end="60:41">-&gt;</operator><name pos:start="60:42" pos:end="60:45">data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:start="61:9" pos:end="73:9">for<control pos:start="61:12" pos:end="61:37">(<init pos:start="61:13" pos:end="61:16"><expr pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:13">i</name><operator pos:start="61:14" pos:end="61:14">=</operator><literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>;</init> <condition pos:start="61:18" pos:end="61:32"><expr pos:start="61:18" pos:end="61:31"><name pos:start="61:18" pos:end="61:18">i</name><operator pos:start="61:19" pos:end="61:19">&lt;</operator><literal type="number" pos:start="61:20" pos:end="61:20">3</literal> <operator pos:start="61:22" pos:end="61:23">&amp;&amp;</operator> <name pos:start="61:25" pos:end="61:31"><name pos:start="61:25" pos:end="61:28">size</name><index pos:start="61:29" pos:end="61:31">[<expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:34">i</name><operator pos:start="61:35" pos:end="61:36">++</operator></expr></incr>)</control><block pos:start="61:38" pos:end="73:9">{<block_content pos:start="62:13" pos:end="72:130">
            <decl_stmt pos:start="62:13" pos:end="62:57"><decl pos:start="62:13" pos:end="62:56"><type pos:start="62:13" pos:end="62:21"><specifier pos:start="62:13" pos:end="62:17">const</specifier> <name pos:start="62:19" pos:end="62:21">int</name></type> <name pos:start="62:23" pos:end="62:29">h_shift</name><init pos:start="62:30" pos:end="62:56">= <expr pos:start="62:32" pos:end="62:56"><ternary pos:start="62:32" pos:end="62:56"><condition pos:start="62:32" pos:end="62:37"><expr pos:start="62:32" pos:end="62:35"><name pos:start="62:32" pos:end="62:32">i</name><operator pos:start="62:33" pos:end="62:34">==</operator><literal type="number" pos:start="62:35" pos:end="62:35">0</literal></expr> ?</condition><then pos:start="62:39" pos:end="62:39"> <expr pos:start="62:39" pos:end="62:39"><literal type="number" pos:start="62:39" pos:end="62:39">0</literal></expr> </then><else pos:start="62:41" pos:end="62:56">: <expr pos:start="62:43" pos:end="62:56"><name pos:start="62:43" pos:end="62:56">h_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="63:13" pos:end="63:57"><decl pos:start="63:13" pos:end="63:56"><type pos:start="63:13" pos:end="63:21"><specifier pos:start="63:13" pos:end="63:17">const</specifier> <name pos:start="63:19" pos:end="63:21">int</name></type> <name pos:start="63:23" pos:end="63:29">v_shift</name><init pos:start="63:30" pos:end="63:56">= <expr pos:start="63:32" pos:end="63:56"><ternary pos:start="63:32" pos:end="63:56"><condition pos:start="63:32" pos:end="63:37"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:32">i</name><operator pos:start="63:33" pos:end="63:34">==</operator><literal type="number" pos:start="63:35" pos:end="63:35">0</literal></expr> ?</condition><then pos:start="63:39" pos:end="63:39"> <expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr> </then><else pos:start="63:41" pos:end="63:56">: <expr pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:56">v_chroma_shift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt pos:start="64:13" pos:end="64:50"><expr pos:start="64:13" pos:end="64:49"><name pos:start="64:13" pos:end="64:28"><name pos:start="64:13" pos:end="64:15">buf</name><operator pos:start="64:16" pos:end="64:17">-&gt;</operator><name pos:start="64:18" pos:end="64:25">linesize</name><index pos:start="64:26" pos:end="64:28">[<expr pos:start="64:27" pos:end="64:27"><name pos:start="64:27" pos:end="64:27">i</name></expr>]</index></name><operator pos:start="64:29" pos:end="64:29">=</operator> <name pos:start="64:31" pos:end="64:49"><name pos:start="64:31" pos:end="64:37">picture</name><operator pos:start="64:38" pos:end="64:38">.</operator><name pos:start="64:39" pos:end="64:46">linesize</name><index pos:start="64:47" pos:end="64:49">[<expr pos:start="64:48" pos:end="64:48"><name pos:start="64:48" pos:end="64:48">i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="65:13" pos:end="65:48"><expr pos:start="65:13" pos:end="65:47"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:15">buf</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:21">base</name><index pos:start="65:22" pos:end="65:24">[<expr pos:start="65:23" pos:end="65:23"><name pos:start="65:23" pos:end="65:23">i</name></expr>]</index></name><operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:47"><name pos:start="65:27" pos:end="65:35">av_malloc</name><argument_list pos:start="65:36" pos:end="65:47">(<argument pos:start="65:37" pos:end="65:46"><expr pos:start="65:37" pos:end="65:46"><name pos:start="65:37" pos:end="65:43"><name pos:start="65:37" pos:end="65:40">size</name><index pos:start="65:41" pos:end="65:43">[<expr pos:start="65:42" pos:end="65:42"><name pos:start="65:42" pos:end="65:42">i</name></expr>]</index></name><operator pos:start="65:44" pos:end="65:44">+</operator><literal type="number" pos:start="65:45" pos:end="65:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="65:50" pos:end="65:59">//FIXME 16</comment>
            <if_stmt pos:start="66:13" pos:end="66:45"><if pos:start="66:13" pos:end="66:45">if<condition pos:start="66:15" pos:end="66:34">(<expr pos:start="66:16" pos:end="66:33"><name pos:start="66:16" pos:end="66:27"><name pos:start="66:16" pos:end="66:18">buf</name><operator pos:start="66:19" pos:end="66:20">-&gt;</operator><name pos:start="66:21" pos:end="66:24">base</name><index pos:start="66:25" pos:end="66:27">[<expr pos:start="66:26" pos:end="66:26"><name pos:start="66:26" pos:end="66:26">i</name></expr>]</index></name><operator pos:start="66:28" pos:end="66:29">==</operator><name pos:start="66:30" pos:end="66:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="66:36" pos:end="66:45"><block_content pos:start="66:36" pos:end="66:45"> <return pos:start="66:36" pos:end="66:45">return <expr pos:start="66:43" pos:end="66:44"><operator pos:start="66:43" pos:end="66:43">-</operator><literal type="number" pos:start="66:44" pos:end="66:44">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:47"><expr pos:start="67:13" pos:end="67:46"><call pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:18">memset</name><argument_list pos:start="67:19" pos:end="67:46">(<argument pos:start="67:20" pos:end="67:31"><expr pos:start="67:20" pos:end="67:31"><name pos:start="67:20" pos:end="67:31"><name pos:start="67:20" pos:end="67:22">buf</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:28">base</name><index pos:start="67:29" pos:end="67:31">[<expr pos:start="67:30" pos:end="67:30"><name pos:start="67:30" pos:end="67:30">i</name></expr>]</index></name></expr></argument>, <argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><literal type="number" pos:start="67:34" pos:end="67:36">128</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:45"><expr pos:start="67:39" pos:end="67:45"><name pos:start="67:39" pos:end="67:45"><name pos:start="67:39" pos:end="67:42">size</name><index pos:start="67:43" pos:end="67:45">[<expr pos:start="67:44" pos:end="67:44"><name pos:start="67:44" pos:end="67:44">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line" pos:start="68:13" pos:end="68:135">// no edge if EDEG EMU or not planar YUV, we check for PAL8 redundantly to protect against a exploitable bug regression ...</comment>
            <if_stmt pos:start="69:13" pos:end="72:130"><if pos:start="69:13" pos:end="70:44">if<condition pos:start="69:15" pos:end="69:90">(<expr pos:start="69:16" pos:end="69:89"><operator pos:start="69:16" pos:end="69:16">(</operator><name pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:24">flags</name></name><operator pos:start="69:25" pos:end="69:25">&amp;</operator><name pos:start="69:26" pos:end="69:44">CODEC_FLAG_EMU_EDGE</name><operator pos:start="69:45" pos:end="69:45">)</operator> <operator pos:start="69:47" pos:end="69:48">||</operator> <operator pos:start="69:50" pos:end="69:50">(</operator><name pos:start="69:51" pos:end="69:60"><name pos:start="69:51" pos:end="69:51">s</name><operator pos:start="69:52" pos:end="69:53">-&gt;</operator><name pos:start="69:54" pos:end="69:60">pix_fmt</name></name> <operator pos:start="69:62" pos:end="69:63">==</operator> <name pos:start="69:65" pos:end="69:76">PIX_FMT_PAL8</name><operator pos:start="69:77" pos:end="69:77">)</operator> <operator pos:start="69:79" pos:end="69:80">||</operator> <operator pos:start="69:82" pos:end="69:82">!</operator><name pos:start="69:83" pos:end="69:89"><name pos:start="69:83" pos:end="69:86">size</name><index pos:start="69:87" pos:end="69:89">[<expr pos:start="69:88" pos:end="69:88"><literal type="number" pos:start="69:88" pos:end="69:88">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="70:17" pos:end="70:44"><block_content pos:start="70:17" pos:end="70:44">
                <expr_stmt pos:start="70:17" pos:end="70:44"><expr pos:start="70:17" pos:end="70:43"><name pos:start="70:17" pos:end="70:28"><name pos:start="70:17" pos:end="70:19">buf</name><operator pos:start="70:20" pos:end="70:21">-&gt;</operator><name pos:start="70:22" pos:end="70:25">data</name><index pos:start="70:26" pos:end="70:28">[<expr pos:start="70:27" pos:end="70:27"><name pos:start="70:27" pos:end="70:27">i</name></expr>]</index></name> <operator pos:start="70:30" pos:end="70:30">=</operator> <name pos:start="70:32" pos:end="70:43"><name pos:start="70:32" pos:end="70:34">buf</name><operator pos:start="70:35" pos:end="70:36">-&gt;</operator><name pos:start="70:37" pos:end="70:40">base</name><index pos:start="70:41" pos:end="70:43">[<expr pos:start="70:42" pos:end="70:42"><name pos:start="70:42" pos:end="70:42">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="71:13" pos:end="72:130">else<block type="pseudo" pos:start="72:17" pos:end="72:130"><block_content pos:start="72:17" pos:end="72:130">
                <expr_stmt pos:start="72:17" pos:end="72:130"><expr pos:start="72:17" pos:end="72:129"><name pos:start="72:17" pos:end="72:28"><name pos:start="72:17" pos:end="72:19">buf</name><operator pos:start="72:20" pos:end="72:21">-&gt;</operator><name pos:start="72:22" pos:end="72:25">data</name><index pos:start="72:26" pos:end="72:28">[<expr pos:start="72:27" pos:end="72:27"><name pos:start="72:27" pos:end="72:27">i</name></expr>]</index></name> <operator pos:start="72:30" pos:end="72:30">=</operator> <name pos:start="72:32" pos:end="72:43"><name pos:start="72:32" pos:end="72:34">buf</name><operator pos:start="72:35" pos:end="72:36">-&gt;</operator><name pos:start="72:37" pos:end="72:40">base</name><index pos:start="72:41" pos:end="72:43">[<expr pos:start="72:42" pos:end="72:42"><name pos:start="72:42" pos:end="72:42">i</name></expr>]</index></name> <operator pos:start="72:45" pos:end="72:45">+</operator> <call pos:start="72:47" pos:end="72:129"><name pos:start="72:47" pos:end="72:51">ALIGN</name><argument_list pos:start="72:52" pos:end="72:129">(<argument pos:start="72:53" pos:end="72:114"><expr pos:start="72:53" pos:end="72:114"><operator pos:start="72:53" pos:end="72:53">(</operator><name pos:start="72:54" pos:end="72:69"><name pos:start="72:54" pos:end="72:56">buf</name><operator pos:start="72:57" pos:end="72:58">-&gt;</operator><name pos:start="72:59" pos:end="72:66">linesize</name><index pos:start="72:67" pos:end="72:69">[<expr pos:start="72:68" pos:end="72:68"><name pos:start="72:68" pos:end="72:68">i</name></expr>]</index></name><operator pos:start="72:70" pos:end="72:70">*</operator><name pos:start="72:71" pos:end="72:80">EDGE_WIDTH</name><operator pos:start="72:81" pos:end="72:82">&gt;&gt;</operator><name pos:start="72:83" pos:end="72:89">v_shift</name><operator pos:start="72:90" pos:end="72:90">)</operator> <operator pos:start="72:92" pos:end="72:92">+</operator> <operator pos:start="72:94" pos:end="72:94">(</operator><name pos:start="72:95" pos:end="72:104">EDGE_WIDTH</name><operator pos:start="72:105" pos:end="72:106">&gt;&gt;</operator><name pos:start="72:107" pos:end="72:113">h_shift</name><operator pos:start="72:114" pos:end="72:114">)</operator></expr></argument>, <argument pos:start="72:117" pos:end="72:128"><expr pos:start="72:117" pos:end="72:128"><name pos:start="72:117" pos:end="72:128">STRIDE_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
        <expr_stmt pos:start="74:9" pos:end="74:33"><expr pos:start="74:9" pos:end="74:32"><name pos:start="74:9" pos:end="74:16"><name pos:start="74:9" pos:end="74:11">pic</name><operator pos:start="74:12" pos:end="74:13">-&gt;</operator><name pos:start="74:14" pos:end="74:16">age</name></name><operator pos:start="74:17" pos:end="74:17">=</operator> <literal type="number" pos:start="74:19" pos:end="74:21">256</literal><operator pos:start="74:22" pos:end="74:22">*</operator><literal type="number" pos:start="74:23" pos:end="74:25">256</literal><operator pos:start="74:26" pos:end="74:26">*</operator><literal type="number" pos:start="74:27" pos:end="74:29">256</literal><operator pos:start="74:30" pos:end="74:30">*</operator><literal type="number" pos:start="74:31" pos:end="74:32">64</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:39"><expr pos:start="76:5" pos:end="76:38"><name pos:start="76:5" pos:end="76:13"><name pos:start="76:5" pos:end="76:7">pic</name><operator pos:start="76:8" pos:end="76:9">-&gt;</operator><name pos:start="76:10" pos:end="76:13">type</name></name><operator pos:start="76:14" pos:end="76:14">=</operator> <name pos:start="76:16" pos:end="76:38">FF_BUFFER_TYPE_INTERNAL</name></expr>;</expr_stmt>
    <for pos:start="77:5" pos:end="81:5">for<control pos:start="77:8" pos:end="77:22">(<init pos:start="77:9" pos:end="77:12"><expr pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:9">i</name><operator pos:start="77:10" pos:end="77:10">=</operator><literal type="number" pos:start="77:11" pos:end="77:11">0</literal></expr>;</init> <condition pos:start="77:14" pos:end="77:17"><expr pos:start="77:14" pos:end="77:16"><name pos:start="77:14" pos:end="77:14">i</name><operator pos:start="77:15" pos:end="77:15">&lt;</operator><literal type="number" pos:start="77:16" pos:end="77:16">4</literal></expr>;</condition> <incr pos:start="77:19" pos:end="77:21"><expr pos:start="77:19" pos:end="77:21"><name pos:start="77:19" pos:end="77:19">i</name><operator pos:start="77:20" pos:end="77:21">++</operator></expr></incr>)</control><block pos:start="77:23" pos:end="81:5">{<block_content pos:start="78:9" pos:end="80:43">
        <expr_stmt pos:start="78:9" pos:end="78:35"><expr pos:start="78:9" pos:end="78:34"><name pos:start="78:9" pos:end="78:20"><name pos:start="78:9" pos:end="78:11">pic</name><operator pos:start="78:12" pos:end="78:13">-&gt;</operator><name pos:start="78:14" pos:end="78:17">base</name><index pos:start="78:18" pos:end="78:20">[<expr pos:start="78:19" pos:end="78:19"><name pos:start="78:19" pos:end="78:19">i</name></expr>]</index></name><operator pos:start="78:21" pos:end="78:21">=</operator> <name pos:start="78:23" pos:end="78:34"><name pos:start="78:23" pos:end="78:25">buf</name><operator pos:start="78:26" pos:end="78:27">-&gt;</operator><name pos:start="78:28" pos:end="78:31">base</name><index pos:start="78:32" pos:end="78:34">[<expr pos:start="78:33" pos:end="78:33"><name pos:start="78:33" pos:end="78:33">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:11">pic</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:17">data</name><index pos:start="79:18" pos:end="79:20">[<expr pos:start="79:19" pos:end="79:19"><name pos:start="79:19" pos:end="79:19">i</name></expr>]</index></name><operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:25">buf</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:31">data</name><index pos:start="79:32" pos:end="79:34">[<expr pos:start="79:33" pos:end="79:33"><name pos:start="79:33" pos:end="79:33">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="80:9" pos:end="80:43"><expr pos:start="80:9" pos:end="80:42"><name pos:start="80:9" pos:end="80:24"><name pos:start="80:9" pos:end="80:11">pic</name><operator pos:start="80:12" pos:end="80:13">-&gt;</operator><name pos:start="80:14" pos:end="80:21">linesize</name><index pos:start="80:22" pos:end="80:24">[<expr pos:start="80:23" pos:end="80:23"><name pos:start="80:23" pos:end="80:23">i</name></expr>]</index></name><operator pos:start="80:25" pos:end="80:25">=</operator> <name pos:start="80:27" pos:end="80:42"><name pos:start="80:27" pos:end="80:29">buf</name><operator pos:start="80:30" pos:end="80:31">-&gt;</operator><name pos:start="80:32" pos:end="80:39">linesize</name><index pos:start="80:40" pos:end="80:42">[<expr pos:start="80:41" pos:end="80:41"><name pos:start="80:41" pos:end="80:41">i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="82:5" pos:end="82:31"><expr pos:start="82:5" pos:end="82:30"><name pos:start="82:5" pos:end="82:28"><name pos:start="82:5" pos:end="82:5">s</name><operator pos:start="82:6" pos:end="82:7">-&gt;</operator><name pos:start="82:8" pos:end="82:28">internal_buffer_count</name></name><operator pos:start="82:29" pos:end="82:30">++</operator></expr>;</expr_stmt>
    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>
</block_content>}</block></function></unit>
