<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/286.c" pos:tabs="8"><function pos:start="1:1" pos:end="313:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">cchip_write</name><parameter_list pos:start="1:24" pos:end="3:52">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:44">hwaddr</name></type> <name pos:start="1:46" pos:end="1:49">addr</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:36">v32</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:51"><decl pos:start="3:39" pos:end="3:51"><type pos:start="3:39" pos:end="3:51"><name pos:start="3:39" pos:end="3:46">unsigned</name></type> <name pos:start="3:48" pos:end="3:51">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="313:1">{<block_content pos:start="7:5" pos:end="311:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">TyphoonState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>, <decl pos:start="9:19" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:19" pos:end="9:24">oldval</name></decl>, <decl pos:start="9:27" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:27" pos:end="9:32">newval</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">addr</name> <operator pos:start="13:14" pos:end="13:14">&amp;</operator> <literal type="number" pos:start="13:16" pos:end="13:16">4</literal></expr>)</condition> <block pos:start="13:19" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:39"><expr pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:17">v32</name> <operator pos:start="15:19" pos:end="15:20">&lt;&lt;</operator> <literal type="number" pos:start="15:22" pos:end="15:23">32</literal> <operator pos:start="15:25" pos:end="15:25">|</operator> <name pos:start="15:27" pos:end="15:38"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:38">latch_tmp</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:18"><expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:12">addr</name> <operator pos:start="17:14" pos:end="17:15">^=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="25:5">else <block pos:start="19:12" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">latch_tmp</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <name pos:start="21:24" pos:end="21:26">v32</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="29:5" pos:end="311:5">switch <condition pos:start="29:12" pos:end="29:17">(<expr pos:start="29:13" pos:end="29:16"><name pos:start="29:13" pos:end="29:16">addr</name></expr>)</condition> <block pos:start="29:19" pos:end="311:5">{<block_content pos:start="31:5" pos:end="309:15">

    <case pos:start="31:5" pos:end="31:16">case <expr pos:start="31:10" pos:end="31:15"><literal type="number" pos:start="31:10" pos:end="31:15">0x0000</literal></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:56">/* CSC: Cchip System Configuration Register.  */</comment>

        <comment type="block" pos:start="35:9" pos:end="35:59">/* All sorts of data here; nothing relevant RW.  */</comment>

        <break pos:start="37:9" pos:end="37:14">break;</break>



    <case pos:start="41:5" pos:end="41:16">case <expr pos:start="41:10" pos:end="41:15"><literal type="number" pos:start="41:10" pos:end="41:15">0x0040</literal></expr>:</case>

        <comment type="block" pos:start="43:9" pos:end="43:43">/* MTR: Memory Timing Register.  */</comment>

        <comment type="block" pos:start="45:9" pos:end="45:55">/* All sorts of stuff related to real DRAM.  */</comment>

        <break pos:start="47:9" pos:end="47:14">break;</break>



    <case pos:start="51:5" pos:end="51:16">case <expr pos:start="51:10" pos:end="51:15"><literal type="number" pos:start="51:10" pos:end="51:15">0x0080</literal></expr>:</case>

        <comment type="block" pos:start="53:9" pos:end="53:44">/* MISC: Miscellaneous Register.  */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:40"><expr pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:14">newval</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:23">oldval</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:39"><name pos:start="55:27" pos:end="55:27">s</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:34">cchip</name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:39">misc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:14">newval</name> <operator pos:start="57:16" pos:end="57:17">&amp;=</operator> <operator pos:start="57:19" pos:end="57:19">~</operator><operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:23">val</name> <operator pos:start="57:25" pos:end="57:25">&amp;</operator> <literal type="number" pos:start="57:27" pos:end="57:36">0x10000ff0</literal><operator pos:start="57:37" pos:end="57:37">)</operator></expr>;</expr_stmt>     <comment type="block" pos:start="57:44" pos:end="57:59">/* W1C fields */</comment>

        <if_stmt pos:start="59:9" pos:end="73:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:27">(<expr pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:15">val</name> <operator pos:start="59:17" pos:end="59:17">&amp;</operator> <literal type="number" pos:start="59:19" pos:end="59:26">0x100000</literal></expr>)</condition> <block pos:start="59:29" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:35">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:18">newval</name> <operator pos:start="61:20" pos:end="61:21">&amp;=</operator> <operator pos:start="61:23" pos:end="61:23">~</operator><literal type="number" pos:start="61:24" pos:end="61:34">0xff0000ull</literal></expr>;</expr_stmt>        <comment type="block" pos:start="61:44" pos:end="61:71">/* ACL clears ABT and ABW */</comment>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="73:9">else <block pos:start="63:16" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:13">

            <expr_stmt pos:start="65:13" pos:end="65:39"><expr pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:18">newval</name> <operator pos:start="65:20" pos:end="65:21">|=</operator> <name pos:start="65:23" pos:end="65:25">val</name> <operator pos:start="65:27" pos:end="65:27">&amp;</operator> <literal type="number" pos:start="65:29" pos:end="65:38">0x00f00000</literal></expr>;</expr_stmt>    <comment type="block" pos:start="65:44" pos:end="65:65">/* ABT field is W1S */</comment>

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:40">(<expr pos:start="67:17" pos:end="67:39"><operator pos:start="67:17" pos:end="67:17">(</operator><name pos:start="67:18" pos:end="67:23">newval</name> <operator pos:start="67:25" pos:end="67:25">&amp;</operator> <literal type="number" pos:start="67:27" pos:end="67:33">0xf0000</literal><operator pos:start="67:34" pos:end="67:34">)</operator> <operator pos:start="67:36" pos:end="67:37">==</operator> <literal type="number" pos:start="67:39" pos:end="67:39">0</literal></expr>)</condition> <block pos:start="67:42" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:40">

                <expr_stmt pos:start="69:17" pos:end="69:40"><expr pos:start="69:17" pos:end="69:39"><name pos:start="69:17" pos:end="69:22">newval</name> <operator pos:start="69:24" pos:end="69:25">|=</operator> <name pos:start="69:27" pos:end="69:29">val</name> <operator pos:start="69:31" pos:end="69:31">&amp;</operator> <literal type="number" pos:start="69:33" pos:end="69:39">0xf0000</literal></expr>;</expr_stmt>   <comment type="block" pos:start="69:44" pos:end="69:74">/* ABW field is W1S iff zero */</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:14">newval</name> <operator pos:start="75:16" pos:end="75:17">|=</operator> <operator pos:start="75:19" pos:end="75:19">(</operator><name pos:start="75:20" pos:end="75:22">val</name> <operator pos:start="75:24" pos:end="75:24">&amp;</operator> <literal type="number" pos:start="75:26" pos:end="75:31">0xf000</literal><operator pos:start="75:32" pos:end="75:32">)</operator> <operator pos:start="75:34" pos:end="75:35">&gt;&gt;</operator> <literal type="number" pos:start="75:37" pos:end="75:37">4</literal></expr>;</expr_stmt>     <comment type="block" pos:start="75:44" pos:end="75:74">/* IPREQ field sets IPINTR.  */</comment>



        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:14">newval</name> <operator pos:start="79:16" pos:end="79:17">&amp;=</operator> <operator pos:start="79:19" pos:end="79:19">~</operator><literal type="number" pos:start="79:20" pos:end="79:35">0xf0000000000ull</literal></expr>;</expr_stmt>       <comment type="block" pos:start="79:44" pos:end="79:65">/* WO and RW fields */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:41"><expr pos:start="81:9" pos:end="81:40"><name pos:start="81:9" pos:end="81:14">newval</name> <operator pos:start="81:16" pos:end="81:17">|=</operator> <name pos:start="81:19" pos:end="81:21">val</name> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <literal type="number" pos:start="81:25" pos:end="81:40">0xf0000000000ull</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:16">cchip</name><operator pos:start="83:17" pos:end="83:17">.</operator><name pos:start="83:18" pos:end="83:21">misc</name></name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:30">newval</name></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:52">/* Pass on changes to IPI and ITI state.  */</comment>

        <if_stmt pos:start="89:9" pos:end="127:9"><if pos:start="89:9" pos:end="127:9">if <condition pos:start="89:12" pos:end="89:38">(<expr pos:start="89:13" pos:end="89:37"><operator pos:start="89:13" pos:end="89:13">(</operator><name pos:start="89:14" pos:end="89:19">newval</name> <operator pos:start="89:21" pos:end="89:21">^</operator> <name pos:start="89:23" pos:end="89:28">oldval</name><operator pos:start="89:29" pos:end="89:29">)</operator> <operator pos:start="89:31" pos:end="89:31">&amp;</operator> <literal type="number" pos:start="89:33" pos:end="89:37">0xff0</literal></expr>)</condition> <block pos:start="89:40" pos:end="127:9">{<block_content pos:start="91:13" pos:end="125:13">

            <decl_stmt pos:start="91:13" pos:end="91:18"><decl pos:start="91:13" pos:end="91:17"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:17">i</name></decl>;</decl_stmt>

            <for pos:start="93:13" pos:end="125:13">for <control pos:start="93:17" pos:end="93:35">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">i</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:29"><name pos:start="93:25" pos:end="93:25">i</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <literal type="number" pos:start="93:29" pos:end="93:29">4</literal></expr>;</condition> <incr pos:start="93:32" pos:end="93:34"><expr pos:start="93:32" pos:end="93:34"><operator pos:start="93:32" pos:end="93:33">++</operator><name pos:start="93:34" pos:end="93:34">i</name></expr></incr>)</control> <block pos:start="93:37" pos:end="125:13">{<block_content pos:start="95:17" pos:end="123:17">

                <decl_stmt pos:start="95:17" pos:end="95:48"><decl pos:start="95:17" pos:end="95:47"><type pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:24">AlphaCPU</name> <modifier pos:start="95:26" pos:end="95:26">*</modifier></type><name pos:start="95:27" pos:end="95:29">cpu</name> <init pos:start="95:31" pos:end="95:47">= <expr pos:start="95:33" pos:end="95:47"><name pos:start="95:33" pos:end="95:47"><name pos:start="95:33" pos:end="95:33">s</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:40">cchip</name><operator pos:start="95:41" pos:end="95:41">.</operator><name pos:start="95:42" pos:end="95:44">cpu</name><index pos:start="95:45" pos:end="95:47">[<expr pos:start="95:46" pos:end="95:46"><name pos:start="95:46" pos:end="95:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="97:17" pos:end="123:17"><if pos:start="97:17" pos:end="123:17">if <condition pos:start="97:20" pos:end="97:32">(<expr pos:start="97:21" pos:end="97:31"><name pos:start="97:21" pos:end="97:23">cpu</name> <operator pos:start="97:25" pos:end="97:26">!=</operator> <name pos:start="97:28" pos:end="97:31">NULL</name></expr>)</condition> <block pos:start="97:34" pos:end="123:17">{<block_content pos:start="99:21" pos:end="121:21">

                    <decl_stmt pos:start="99:21" pos:end="99:44"><decl pos:start="99:21" pos:end="99:43"><type pos:start="99:21" pos:end="99:30"><name pos:start="99:21" pos:end="99:28">CPUState</name> <modifier pos:start="99:30" pos:end="99:30">*</modifier></type><name pos:start="99:31" pos:end="99:32">cs</name> <init pos:start="99:34" pos:end="99:43">= <expr pos:start="99:36" pos:end="99:43"><call pos:start="99:36" pos:end="99:43"><name pos:start="99:36" pos:end="99:38">CPU</name><argument_list pos:start="99:39" pos:end="99:43">(<argument pos:start="99:40" pos:end="99:42"><expr pos:start="99:40" pos:end="99:42"><name pos:start="99:40" pos:end="99:42">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="block" pos:start="101:21" pos:end="101:73">/* IPI can be either cleared or set by the write.  */</comment>

                    <if_stmt pos:start="103:21" pos:end="111:21"><if pos:start="103:21" pos:end="107:21">if <condition pos:start="103:24" pos:end="103:48">(<expr pos:start="103:25" pos:end="103:47"><name pos:start="103:25" pos:end="103:30">newval</name> <operator pos:start="103:32" pos:end="103:32">&amp;</operator> <operator pos:start="103:34" pos:end="103:34">(</operator><literal type="number" pos:start="103:35" pos:end="103:35">1</literal> <operator pos:start="103:37" pos:end="103:38">&lt;&lt;</operator> <operator pos:start="103:40" pos:end="103:40">(</operator><name pos:start="103:41" pos:end="103:41">i</name> <operator pos:start="103:43" pos:end="103:43">+</operator> <literal type="number" pos:start="103:45" pos:end="103:45">8</literal><operator pos:start="103:46" pos:end="103:46">)</operator><operator pos:start="103:47" pos:end="103:47">)</operator></expr>)</condition> <block pos:start="103:50" pos:end="107:21">{<block_content pos:start="105:25" pos:end="105:61">

                        <expr_stmt pos:start="105:25" pos:end="105:61"><expr pos:start="105:25" pos:end="105:60"><call pos:start="105:25" pos:end="105:60"><name pos:start="105:25" pos:end="105:37">cpu_interrupt</name><argument_list pos:start="105:38" pos:end="105:60">(<argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><name pos:start="105:39" pos:end="105:40">cs</name></expr></argument>, <argument pos:start="105:43" pos:end="105:59"><expr pos:start="105:43" pos:end="105:59"><name pos:start="105:43" pos:end="105:59">CPU_INTERRUPT_SMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="107:23" pos:end="111:21">else <block pos:start="107:28" pos:end="111:21">{<block_content pos:start="109:25" pos:end="109:67">

                        <expr_stmt pos:start="109:25" pos:end="109:67"><expr pos:start="109:25" pos:end="109:66"><call pos:start="109:25" pos:end="109:66"><name pos:start="109:25" pos:end="109:43">cpu_reset_interrupt</name><argument_list pos:start="109:44" pos:end="109:66">(<argument pos:start="109:45" pos:end="109:46"><expr pos:start="109:45" pos:end="109:46"><name pos:start="109:45" pos:end="109:46">cs</name></expr></argument>, <argument pos:start="109:49" pos:end="109:65"><expr pos:start="109:49" pos:end="109:65"><name pos:start="109:49" pos:end="109:65">CPU_INTERRUPT_SMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <comment type="block" pos:start="115:21" pos:end="115:64">/* ITI can only be cleared by the write.  */</comment>

                    <if_stmt pos:start="117:21" pos:end="121:21"><if pos:start="117:21" pos:end="121:21">if <condition pos:start="117:24" pos:end="117:55">(<expr pos:start="117:25" pos:end="117:54"><operator pos:start="117:25" pos:end="117:25">(</operator><name pos:start="117:26" pos:end="117:31">newval</name> <operator pos:start="117:33" pos:end="117:33">&amp;</operator> <operator pos:start="117:35" pos:end="117:35">(</operator><literal type="number" pos:start="117:36" pos:end="117:36">1</literal> <operator pos:start="117:38" pos:end="117:39">&lt;&lt;</operator> <operator pos:start="117:41" pos:end="117:41">(</operator><name pos:start="117:42" pos:end="117:42">i</name> <operator pos:start="117:44" pos:end="117:44">+</operator> <literal type="number" pos:start="117:46" pos:end="117:46">4</literal><operator pos:start="117:47" pos:end="117:47">)</operator><operator pos:start="117:48" pos:end="117:48">)</operator><operator pos:start="117:49" pos:end="117:49">)</operator> <operator pos:start="117:51" pos:end="117:52">==</operator> <literal type="number" pos:start="117:54" pos:end="117:54">0</literal></expr>)</condition> <block pos:start="117:57" pos:end="121:21">{<block_content pos:start="119:25" pos:end="119:69">

                        <expr_stmt pos:start="119:25" pos:end="119:69"><expr pos:start="119:25" pos:end="119:68"><call pos:start="119:25" pos:end="119:68"><name pos:start="119:25" pos:end="119:43">cpu_reset_interrupt</name><argument_list pos:start="119:44" pos:end="119:68">(<argument pos:start="119:45" pos:end="119:46"><expr pos:start="119:45" pos:end="119:46"><name pos:start="119:45" pos:end="119:46">cs</name></expr></argument>, <argument pos:start="119:49" pos:end="119:67"><expr pos:start="119:49" pos:end="119:67"><name pos:start="119:49" pos:end="119:67">CPU_INTERRUPT_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>



    <case pos:start="133:5" pos:end="133:16">case <expr pos:start="133:10" pos:end="133:15"><literal type="number" pos:start="133:10" pos:end="133:15">0x00c0</literal></expr>:</case>

        <comment type="block" pos:start="135:9" pos:end="135:52">/* MPD: Memory Presence Detect Register.  */</comment>

        <break pos:start="137:9" pos:end="137:14">break;</break>



    <case pos:start="141:5" pos:end="141:16">case <expr pos:start="141:10" pos:end="141:15"><literal type="number" pos:start="141:10" pos:end="141:15">0x0100</literal></expr>:</case> <comment type="block" pos:start="141:18" pos:end="141:27">/* AAR0 */</comment>

    <case pos:start="143:5" pos:end="143:16">case <expr pos:start="143:10" pos:end="143:15"><literal type="number" pos:start="143:10" pos:end="143:15">0x0140</literal></expr>:</case> <comment type="block" pos:start="143:18" pos:end="143:27">/* AAR1 */</comment>

    <case pos:start="145:5" pos:end="145:16">case <expr pos:start="145:10" pos:end="145:15"><literal type="number" pos:start="145:10" pos:end="145:15">0x0180</literal></expr>:</case> <comment type="block" pos:start="145:18" pos:end="145:27">/* AAR2 */</comment>

    <case pos:start="147:5" pos:end="147:16">case <expr pos:start="147:10" pos:end="147:15"><literal type="number" pos:start="147:10" pos:end="147:15">0x01c0</literal></expr>:</case> <comment type="block" pos:start="147:18" pos:end="147:27">/* AAR3 */</comment>

        <comment type="block" pos:start="149:9" pos:end="149:43">/* AAR: Array Address Register.  */</comment>

        <comment type="block" pos:start="151:9" pos:end="151:51">/* All sorts of information about DRAM.  */</comment>

        <break pos:start="153:9" pos:end="153:14">break;</break>



    <case pos:start="157:5" pos:end="157:16">case <expr pos:start="157:10" pos:end="157:15"><literal type="number" pos:start="157:10" pos:end="157:15">0x0200</literal></expr>:</case> <comment type="block" pos:start="157:18" pos:end="157:27">/* DIM0 */</comment>

        <comment type="block" pos:start="159:9" pos:end="159:57">/* DIM: Device Interrupt Mask Register, CPU0.  */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:23"><name pos:start="161:9" pos:end="161:9">s</name><operator pos:start="161:10" pos:end="161:11">-&gt;</operator><name pos:start="161:12" pos:end="161:16">cchip</name><operator pos:start="161:17" pos:end="161:17">.</operator><name pos:start="161:18" pos:end="161:20">dim</name><index pos:start="161:21" pos:end="161:23">[<expr pos:start="161:22" pos:end="161:22"><literal type="number" pos:start="161:22" pos:end="161:22">0</literal></expr>]</index></name> <operator pos:start="161:25" pos:end="161:25">=</operator> <name pos:start="161:27" pos:end="161:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:61"><expr pos:start="163:9" pos:end="163:60"><call pos:start="163:9" pos:end="163:60"><name pos:start="163:9" pos:end="163:22">cpu_irq_change</name><argument_list pos:start="163:23" pos:end="163:60">(<argument pos:start="163:24" pos:end="163:38"><expr pos:start="163:24" pos:end="163:38"><name pos:start="163:24" pos:end="163:38"><name pos:start="163:24" pos:end="163:24">s</name><operator pos:start="163:25" pos:end="163:26">-&gt;</operator><name pos:start="163:27" pos:end="163:31">cchip</name><operator pos:start="163:32" pos:end="163:32">.</operator><name pos:start="163:33" pos:end="163:35">cpu</name><index pos:start="163:36" pos:end="163:38">[<expr pos:start="163:37" pos:end="163:37"><literal type="number" pos:start="163:37" pos:end="163:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:41" pos:end="163:59"><expr pos:start="163:41" pos:end="163:59"><name pos:start="163:41" pos:end="163:43">val</name> <operator pos:start="163:45" pos:end="163:45">&amp;</operator> <name pos:start="163:47" pos:end="163:59"><name pos:start="163:47" pos:end="163:47">s</name><operator pos:start="163:48" pos:end="163:49">-&gt;</operator><name pos:start="163:50" pos:end="163:54">cchip</name><operator pos:start="163:55" pos:end="163:55">.</operator><name pos:start="163:56" pos:end="163:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:16">case <expr pos:start="167:10" pos:end="167:15"><literal type="number" pos:start="167:10" pos:end="167:15">0x0240</literal></expr>:</case> <comment type="block" pos:start="167:18" pos:end="167:27">/* DIM1 */</comment>

        <comment type="block" pos:start="169:9" pos:end="169:57">/* DIM: Device Interrupt Mask Register, CPU1.  */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:30"><expr pos:start="171:9" pos:end="171:29"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:16">cchip</name><operator pos:start="171:17" pos:end="171:17">.</operator><name pos:start="171:18" pos:end="171:20">dim</name><index pos:start="171:21" pos:end="171:23">[<expr pos:start="171:22" pos:end="171:22"><literal type="number" pos:start="171:22" pos:end="171:22">0</literal></expr>]</index></name> <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:61"><expr pos:start="173:9" pos:end="173:60"><call pos:start="173:9" pos:end="173:60"><name pos:start="173:9" pos:end="173:22">cpu_irq_change</name><argument_list pos:start="173:23" pos:end="173:60">(<argument pos:start="173:24" pos:end="173:38"><expr pos:start="173:24" pos:end="173:38"><name pos:start="173:24" pos:end="173:38"><name pos:start="173:24" pos:end="173:24">s</name><operator pos:start="173:25" pos:end="173:26">-&gt;</operator><name pos:start="173:27" pos:end="173:31">cchip</name><operator pos:start="173:32" pos:end="173:32">.</operator><name pos:start="173:33" pos:end="173:35">cpu</name><index pos:start="173:36" pos:end="173:38">[<expr pos:start="173:37" pos:end="173:37"><literal type="number" pos:start="173:37" pos:end="173:37">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="173:41" pos:end="173:59"><expr pos:start="173:41" pos:end="173:59"><name pos:start="173:41" pos:end="173:43">val</name> <operator pos:start="173:45" pos:end="173:45">&amp;</operator> <name pos:start="173:47" pos:end="173:59"><name pos:start="173:47" pos:end="173:47">s</name><operator pos:start="173:48" pos:end="173:49">-&gt;</operator><name pos:start="173:50" pos:end="173:54">cchip</name><operator pos:start="173:55" pos:end="173:55">.</operator><name pos:start="173:56" pos:end="173:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>



    <case pos:start="179:5" pos:end="179:16">case <expr pos:start="179:10" pos:end="179:15"><literal type="number" pos:start="179:10" pos:end="179:15">0x0280</literal></expr>:</case> <comment type="block" pos:start="179:18" pos:end="179:32">/* DIR0 (RO) */</comment>

    <case pos:start="181:5" pos:end="181:16">case <expr pos:start="181:10" pos:end="181:15"><literal type="number" pos:start="181:10" pos:end="181:15">0x02c0</literal></expr>:</case> <comment type="block" pos:start="181:18" pos:end="181:32">/* DIR1 (RO) */</comment>

    <case pos:start="183:5" pos:end="183:16">case <expr pos:start="183:10" pos:end="183:15"><literal type="number" pos:start="183:10" pos:end="183:15">0x0300</literal></expr>:</case> <comment type="block" pos:start="183:18" pos:end="183:32">/* DRIR (RO) */</comment>

        <break pos:start="185:9" pos:end="185:14">break;</break>



    <case pos:start="189:5" pos:end="189:16">case <expr pos:start="189:10" pos:end="189:15"><literal type="number" pos:start="189:10" pos:end="189:15">0x0340</literal></expr>:</case>

        <comment type="block" pos:start="191:9" pos:end="191:44">/* PRBEN: Probe Enable Register.  */</comment>

        <break pos:start="193:9" pos:end="193:14">break;</break>



    <case pos:start="197:5" pos:end="197:16">case <expr pos:start="197:10" pos:end="197:15"><literal type="number" pos:start="197:10" pos:end="197:15">0x0380</literal></expr>:</case> <comment type="block" pos:start="197:18" pos:end="197:27">/* IIC0 */</comment>

        <expr_stmt pos:start="199:9" pos:end="199:41"><expr pos:start="199:9" pos:end="199:40"><name pos:start="199:9" pos:end="199:23"><name pos:start="199:9" pos:end="199:9">s</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:16">cchip</name><operator pos:start="199:17" pos:end="199:17">.</operator><name pos:start="199:18" pos:end="199:20">iic</name><index pos:start="199:21" pos:end="199:23">[<expr pos:start="199:22" pos:end="199:22"><literal type="number" pos:start="199:22" pos:end="199:22">0</literal></expr>]</index></name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:29">val</name> <operator pos:start="199:31" pos:end="199:31">&amp;</operator> <literal type="number" pos:start="199:33" pos:end="199:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="201:9" pos:end="201:14">break;</break>

    <case pos:start="203:5" pos:end="203:16">case <expr pos:start="203:10" pos:end="203:15"><literal type="number" pos:start="203:10" pos:end="203:15">0x03c0</literal></expr>:</case> <comment type="block" pos:start="203:18" pos:end="203:27">/* IIC1 */</comment>

        <expr_stmt pos:start="205:9" pos:end="205:41"><expr pos:start="205:9" pos:end="205:40"><name pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:16">cchip</name><operator pos:start="205:17" pos:end="205:17">.</operator><name pos:start="205:18" pos:end="205:20">iic</name><index pos:start="205:21" pos:end="205:23">[<expr pos:start="205:22" pos:end="205:22"><literal type="number" pos:start="205:22" pos:end="205:22">1</literal></expr>]</index></name> <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:29">val</name> <operator pos:start="205:31" pos:end="205:31">&amp;</operator> <literal type="number" pos:start="205:33" pos:end="205:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>



    <case pos:start="211:5" pos:end="211:16">case <expr pos:start="211:10" pos:end="211:15"><literal type="number" pos:start="211:10" pos:end="211:15">0x0400</literal></expr>:</case> <comment type="block" pos:start="211:18" pos:end="211:27">/* MPR0 */</comment>

    <case pos:start="213:5" pos:end="213:16">case <expr pos:start="213:10" pos:end="213:15"><literal type="number" pos:start="213:10" pos:end="213:15">0x0440</literal></expr>:</case> <comment type="block" pos:start="213:18" pos:end="213:27">/* MPR1 */</comment>

    <case pos:start="215:5" pos:end="215:16">case <expr pos:start="215:10" pos:end="215:15"><literal type="number" pos:start="215:10" pos:end="215:15">0x0480</literal></expr>:</case> <comment type="block" pos:start="215:18" pos:end="215:27">/* MPR2 */</comment>

    <case pos:start="217:5" pos:end="217:16">case <expr pos:start="217:10" pos:end="217:15"><literal type="number" pos:start="217:10" pos:end="217:15">0x04c0</literal></expr>:</case> <comment type="block" pos:start="217:18" pos:end="217:27">/* MPR3 */</comment>

        <comment type="block" pos:start="219:9" pos:end="219:48">/* MPR: Memory Programming Register.  */</comment>

        <break pos:start="221:9" pos:end="221:14">break;</break>



    <case pos:start="225:5" pos:end="225:16">case <expr pos:start="225:10" pos:end="225:15"><literal type="number" pos:start="225:10" pos:end="225:15">0x0580</literal></expr>:</case>

        <comment type="block" pos:start="227:9" pos:end="227:43">/* TTR: TIGbus Timing Register.  */</comment>

        <comment type="block" pos:start="229:9" pos:end="229:72">/* All sorts of stuff related to interrupt delivery timings.  */</comment>

        <break pos:start="231:9" pos:end="231:14">break;</break>

    <case pos:start="233:5" pos:end="233:16">case <expr pos:start="233:10" pos:end="233:15"><literal type="number" pos:start="233:10" pos:end="233:15">0x05c0</literal></expr>:</case>

        <comment type="block" pos:start="235:9" pos:end="235:50">/* TDR: TIGbug Device Timing Register.  */</comment>

        <break pos:start="237:9" pos:end="237:14">break;</break>



    <case pos:start="241:5" pos:end="241:16">case <expr pos:start="241:10" pos:end="241:15"><literal type="number" pos:start="241:10" pos:end="241:15">0x0600</literal></expr>:</case>

        <comment type="block" pos:start="243:9" pos:end="243:58">/* DIM2: Device Interrupt Mask Register, CPU2.  */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:30"><expr pos:start="245:9" pos:end="245:29"><name pos:start="245:9" pos:end="245:23"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:16">cchip</name><operator pos:start="245:17" pos:end="245:17">.</operator><name pos:start="245:18" pos:end="245:20">dim</name><index pos:start="245:21" pos:end="245:23">[<expr pos:start="245:22" pos:end="245:22"><literal type="number" pos:start="245:22" pos:end="245:22">2</literal></expr>]</index></name> <operator pos:start="245:25" pos:end="245:25">=</operator> <name pos:start="245:27" pos:end="245:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:61"><expr pos:start="247:9" pos:end="247:60"><call pos:start="247:9" pos:end="247:60"><name pos:start="247:9" pos:end="247:22">cpu_irq_change</name><argument_list pos:start="247:23" pos:end="247:60">(<argument pos:start="247:24" pos:end="247:38"><expr pos:start="247:24" pos:end="247:38"><name pos:start="247:24" pos:end="247:38"><name pos:start="247:24" pos:end="247:24">s</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:31">cchip</name><operator pos:start="247:32" pos:end="247:32">.</operator><name pos:start="247:33" pos:end="247:35">cpu</name><index pos:start="247:36" pos:end="247:38">[<expr pos:start="247:37" pos:end="247:37"><literal type="number" pos:start="247:37" pos:end="247:37">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="247:41" pos:end="247:59"><expr pos:start="247:41" pos:end="247:59"><name pos:start="247:41" pos:end="247:43">val</name> <operator pos:start="247:45" pos:end="247:45">&amp;</operator> <name pos:start="247:47" pos:end="247:59"><name pos:start="247:47" pos:end="247:47">s</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:54">cchip</name><operator pos:start="247:55" pos:end="247:55">.</operator><name pos:start="247:56" pos:end="247:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="249:9" pos:end="249:14">break;</break>

    <case pos:start="251:5" pos:end="251:16">case <expr pos:start="251:10" pos:end="251:15"><literal type="number" pos:start="251:10" pos:end="251:15">0x0640</literal></expr>:</case>

        <comment type="block" pos:start="253:9" pos:end="253:58">/* DIM3: Device Interrupt Mask Register, CPU3.  */</comment>

        <expr_stmt pos:start="255:9" pos:end="255:30"><expr pos:start="255:9" pos:end="255:29"><name pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:9">s</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:16">cchip</name><operator pos:start="255:17" pos:end="255:17">.</operator><name pos:start="255:18" pos:end="255:20">dim</name><index pos:start="255:21" pos:end="255:23">[<expr pos:start="255:22" pos:end="255:22"><literal type="number" pos:start="255:22" pos:end="255:22">3</literal></expr>]</index></name> <operator pos:start="255:25" pos:end="255:25">=</operator> <name pos:start="255:27" pos:end="255:29">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:61"><expr pos:start="257:9" pos:end="257:60"><call pos:start="257:9" pos:end="257:60"><name pos:start="257:9" pos:end="257:22">cpu_irq_change</name><argument_list pos:start="257:23" pos:end="257:60">(<argument pos:start="257:24" pos:end="257:38"><expr pos:start="257:24" pos:end="257:38"><name pos:start="257:24" pos:end="257:38"><name pos:start="257:24" pos:end="257:24">s</name><operator pos:start="257:25" pos:end="257:26">-&gt;</operator><name pos:start="257:27" pos:end="257:31">cchip</name><operator pos:start="257:32" pos:end="257:32">.</operator><name pos:start="257:33" pos:end="257:35">cpu</name><index pos:start="257:36" pos:end="257:38">[<expr pos:start="257:37" pos:end="257:37"><literal type="number" pos:start="257:37" pos:end="257:37">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="257:41" pos:end="257:59"><expr pos:start="257:41" pos:end="257:59"><name pos:start="257:41" pos:end="257:43">val</name> <operator pos:start="257:45" pos:end="257:45">&amp;</operator> <name pos:start="257:47" pos:end="257:59"><name pos:start="257:47" pos:end="257:47">s</name><operator pos:start="257:48" pos:end="257:49">-&gt;</operator><name pos:start="257:50" pos:end="257:54">cchip</name><operator pos:start="257:55" pos:end="257:55">.</operator><name pos:start="257:56" pos:end="257:59">drir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>



    <case pos:start="263:5" pos:end="263:16">case <expr pos:start="263:10" pos:end="263:15"><literal type="number" pos:start="263:10" pos:end="263:15">0x0680</literal></expr>:</case> <comment type="block" pos:start="263:18" pos:end="263:32">/* DIR2 (RO) */</comment>

    <case pos:start="265:5" pos:end="265:16">case <expr pos:start="265:10" pos:end="265:15"><literal type="number" pos:start="265:10" pos:end="265:15">0x06c0</literal></expr>:</case> <comment type="block" pos:start="265:18" pos:end="265:32">/* DIR3 (RO) */</comment>

        <break pos:start="267:9" pos:end="267:14">break;</break>



    <case pos:start="271:5" pos:end="271:16">case <expr pos:start="271:10" pos:end="271:15"><literal type="number" pos:start="271:10" pos:end="271:15">0x0700</literal></expr>:</case> <comment type="block" pos:start="271:18" pos:end="271:27">/* IIC2 */</comment>

        <expr_stmt pos:start="273:9" pos:end="273:41"><expr pos:start="273:9" pos:end="273:40"><name pos:start="273:9" pos:end="273:23"><name pos:start="273:9" pos:end="273:9">s</name><operator pos:start="273:10" pos:end="273:11">-&gt;</operator><name pos:start="273:12" pos:end="273:16">cchip</name><operator pos:start="273:17" pos:end="273:17">.</operator><name pos:start="273:18" pos:end="273:20">iic</name><index pos:start="273:21" pos:end="273:23">[<expr pos:start="273:22" pos:end="273:22"><literal type="number" pos:start="273:22" pos:end="273:22">2</literal></expr>]</index></name> <operator pos:start="273:25" pos:end="273:25">=</operator> <name pos:start="273:27" pos:end="273:29">val</name> <operator pos:start="273:31" pos:end="273:31">&amp;</operator> <literal type="number" pos:start="273:33" pos:end="273:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <case pos:start="277:5" pos:end="277:16">case <expr pos:start="277:10" pos:end="277:15"><literal type="number" pos:start="277:10" pos:end="277:15">0x0740</literal></expr>:</case> <comment type="block" pos:start="277:18" pos:end="277:27">/* IIC3 */</comment>

        <expr_stmt pos:start="279:9" pos:end="279:41"><expr pos:start="279:9" pos:end="279:40"><name pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:9">s</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:16">cchip</name><operator pos:start="279:17" pos:end="279:17">.</operator><name pos:start="279:18" pos:end="279:20">iic</name><index pos:start="279:21" pos:end="279:23">[<expr pos:start="279:22" pos:end="279:22"><literal type="number" pos:start="279:22" pos:end="279:22">3</literal></expr>]</index></name> <operator pos:start="279:25" pos:end="279:25">=</operator> <name pos:start="279:27" pos:end="279:29">val</name> <operator pos:start="279:31" pos:end="279:31">&amp;</operator> <literal type="number" pos:start="279:33" pos:end="279:40">0xffffff</literal></expr>;</expr_stmt>

        <break pos:start="281:9" pos:end="281:14">break;</break>



    <case pos:start="285:5" pos:end="285:16">case <expr pos:start="285:10" pos:end="285:15"><literal type="number" pos:start="285:10" pos:end="285:15">0x0780</literal></expr>:</case>

        <comment type="block" pos:start="287:9" pos:end="287:46">/* PWR: Power Management Control.   */</comment>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    

    <case pos:start="293:5" pos:end="293:16">case <expr pos:start="293:10" pos:end="293:15"><literal type="number" pos:start="293:10" pos:end="293:15">0x0c00</literal></expr>:</case> <comment type="block" pos:start="293:18" pos:end="293:31">/* CMONCTLA */</comment>

    <case pos:start="295:5" pos:end="295:16">case <expr pos:start="295:10" pos:end="295:15"><literal type="number" pos:start="295:10" pos:end="295:15">0x0c40</literal></expr>:</case> <comment type="block" pos:start="295:18" pos:end="295:31">/* CMONCTLB */</comment>

    <case pos:start="297:5" pos:end="297:16">case <expr pos:start="297:10" pos:end="297:15"><literal type="number" pos:start="297:10" pos:end="297:15">0x0c80</literal></expr>:</case> <comment type="block" pos:start="297:18" pos:end="297:32">/* CMONCNT01 */</comment>

    <case pos:start="299:5" pos:end="299:16">case <expr pos:start="299:10" pos:end="299:15"><literal type="number" pos:start="299:10" pos:end="299:15">0x0cc0</literal></expr>:</case> <comment type="block" pos:start="299:18" pos:end="299:32">/* CMONCNT23 */</comment>

        <break pos:start="301:9" pos:end="301:14">break;</break>



    <default pos:start="305:5" pos:end="305:12">default:</default>

        <expr_stmt pos:start="307:9" pos:end="307:71"><expr pos:start="307:9" pos:end="307:70"><call pos:start="307:9" pos:end="307:70"><name pos:start="307:9" pos:end="307:29">cpu_unassigned_access</name><argument_list pos:start="307:30" pos:end="307:70">(<argument pos:start="307:31" pos:end="307:41"><expr pos:start="307:31" pos:end="307:41"><name pos:start="307:31" pos:end="307:41">current_cpu</name></expr></argument>, <argument pos:start="307:44" pos:end="307:47"><expr pos:start="307:44" pos:end="307:47"><name pos:start="307:44" pos:end="307:47">addr</name></expr></argument>, <argument pos:start="307:50" pos:end="307:53"><expr pos:start="307:50" pos:end="307:53"><name pos:start="307:50" pos:end="307:53">true</name></expr></argument>, <argument pos:start="307:56" pos:end="307:60"><expr pos:start="307:56" pos:end="307:60"><name pos:start="307:56" pos:end="307:60">false</name></expr></argument>, <argument pos:start="307:63" pos:end="307:63"><expr pos:start="307:63" pos:end="307:63"><literal type="number" pos:start="307:63" pos:end="307:63">0</literal></expr></argument>, <argument pos:start="307:66" pos:end="307:69"><expr pos:start="307:66" pos:end="307:69"><name pos:start="307:66" pos:end="307:69">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="309:9" pos:end="309:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
