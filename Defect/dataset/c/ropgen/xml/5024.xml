<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5024.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">smka_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:65">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:47">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:64"><decl pos:start="3:50" pos:end="3:64"><type pos:start="3:50" pos:end="3:64"><name pos:start="3:50" pos:end="3:57">AVPacket</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:64">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="351:1">{<block_content pos:start="7:5" pos:end="349:20">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">SmackerAudioContext</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name> <init pos:start="7:28" pos:end="7:45">= <expr pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:34">avctx</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">HuffContext</name></type> <name pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:17">h</name><index pos:start="15:18" pos:end="15:20">[<expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">4</literal></expr>]</index></name> <init pos:start="15:22" pos:end="15:32">= <expr pos:start="15:24" pos:end="15:32"><block pos:start="15:24" pos:end="15:32">{ <expr pos:start="15:26" pos:end="15:30"><block pos:start="15:26" pos:end="15:30">{ <expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">VLC</name></type> <name pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:11">vlc</name><index pos:start="17:12" pos:end="17:14">[<expr pos:start="17:13" pos:end="17:13"><literal type="number" pos:start="17:13" pos:end="17:13">4</literal></expr>]</index></name>       <init pos:start="17:22" pos:end="17:32">= <expr pos:start="17:24" pos:end="17:32"><block pos:start="17:24" pos:end="17:32">{ <expr pos:start="17:26" pos:end="17:30"><block pos:start="17:26" pos:end="17:30">{ <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:21">samples8</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:12"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:14"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:14">res</name></decl>, <decl pos:start="25:17" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:17" pos:end="25:19">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">unp_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:12"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:12">bits</name></decl>, <decl pos:start="29:15" pos:end="29:20"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:15" pos:end="29:20">stereo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">pred</name><index pos:start="31:13" pos:end="31:15">[<expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">2</literal></expr>]</index></name> <init pos:start="31:17" pos:end="31:24">= <expr pos:start="31:19" pos:end="31:24"><block pos:start="31:19" pos:end="31:24">{<expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>, <expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:16">buf_size</name> <operator pos:start="35:18" pos:end="35:19">&lt;=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">4</literal></expr>)</condition> <block pos:start="35:24" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:31">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:12">unp_size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:27"><name pos:start="45:16" pos:end="45:22">AV_RL32</name><argument_list pos:start="45:23" pos:end="45:27">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:28">(<expr pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:16">unp_size</name> <operator pos:start="49:18" pos:end="49:18">&gt;</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><literal type="number" pos:start="49:21" pos:end="49:22">1U</literal><operator pos:start="49:23" pos:end="49:24">&lt;&lt;</operator><literal type="number" pos:start="49:25" pos:end="49:26">24</literal><operator pos:start="49:27" pos:end="49:27">)</operator></expr>)</condition> <block pos:start="49:30" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:35">

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:58">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:57"><expr pos:start="51:37" pos:end="51:57"><literal type="string" pos:start="51:37" pos:end="51:57">"packet is too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:52"><expr pos:start="59:5" pos:end="59:51"><call pos:start="59:5" pos:end="59:51"><name pos:start="59:5" pos:end="59:17">init_get_bits</name><argument_list pos:start="59:18" pos:end="59:51">(<argument pos:start="59:19" pos:end="59:21"><expr pos:start="59:19" pos:end="59:21"><operator pos:start="59:19" pos:end="59:19">&amp;</operator><name pos:start="59:20" pos:end="59:21">gb</name></expr></argument>, <argument pos:start="59:24" pos:end="59:30"><expr pos:start="59:24" pos:end="59:30"><name pos:start="59:24" pos:end="59:26">buf</name> <operator pos:start="59:28" pos:end="59:28">+</operator> <literal type="number" pos:start="59:30" pos:end="59:30">4</literal></expr></argument>, <argument pos:start="59:33" pos:end="59:50"><expr pos:start="59:33" pos:end="59:50"><operator pos:start="59:33" pos:end="59:33">(</operator><name pos:start="59:34" pos:end="59:41">buf_size</name> <operator pos:start="59:43" pos:end="59:43">-</operator> <literal type="number" pos:start="59:45" pos:end="59:45">4</literal><operator pos:start="59:46" pos:end="59:46">)</operator> <operator pos:start="59:48" pos:end="59:48">*</operator> <literal type="number" pos:start="59:50" pos:end="59:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if<condition pos:start="63:7" pos:end="63:23">(<expr pos:start="63:8" pos:end="63:22"><operator pos:start="63:8" pos:end="63:8">!</operator><call pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:17">get_bits1</name><argument_list pos:start="63:18" pos:end="63:22">(<argument pos:start="63:19" pos:end="63:21"><expr pos:start="63:19" pos:end="63:21"><operator pos:start="63:19" pos:end="63:19">&amp;</operator><name pos:start="63:20" pos:end="63:21">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="63:24" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:17">

        <expr_stmt pos:start="65:9" pos:end="65:55"><expr pos:start="65:9" pos:end="65:54"><call pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:54">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:33"><expr pos:start="65:23" pos:end="65:33"><name pos:start="65:23" pos:end="65:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="65:36" pos:end="65:53"><expr pos:start="65:36" pos:end="65:53"><literal type="string" pos:start="65:36" pos:end="65:53">"Sound: no data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:22">got_frame_ptr</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <literal type="number" pos:start="67:26" pos:end="67:26">0</literal></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:28"><expr pos:start="73:5" pos:end="73:27"><name pos:start="73:5" pos:end="73:10">stereo</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:27"><name pos:start="73:14" pos:end="73:22">get_bits1</name><argument_list pos:start="73:23" pos:end="73:27">(<argument pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><operator pos:start="73:24" pos:end="73:24">&amp;</operator><name pos:start="73:25" pos:end="73:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:26"><expr pos:start="75:5" pos:end="75:25"><name pos:start="75:5" pos:end="75:8">bits</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <call pos:start="75:12" pos:end="75:25"><name pos:start="75:12" pos:end="75:20">get_bits1</name><argument_list pos:start="75:21" pos:end="75:25">(<argument pos:start="75:22" pos:end="75:24"><expr pos:start="75:22" pos:end="75:24"><operator pos:start="75:22" pos:end="75:22">&amp;</operator><name pos:start="75:23" pos:end="75:24">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:40">(<expr pos:start="77:9" pos:end="77:39"><name pos:start="77:9" pos:end="77:14">stereo</name> <operator pos:start="77:16" pos:end="77:16">^</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:33"><name pos:start="77:19" pos:end="77:23">avctx</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:33">channels</name></name> <operator pos:start="77:35" pos:end="77:36">!=</operator> <literal type="number" pos:start="77:38" pos:end="77:38">1</literal><operator pos:start="77:39" pos:end="77:39">)</operator></expr>)</condition> <block pos:start="77:42" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:31">

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><call pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:58">(<argument pos:start="79:16" pos:end="79:20"><expr pos:start="79:16" pos:end="79:20"><name pos:start="79:16" pos:end="79:20">avctx</name></expr></argument>, <argument pos:start="79:23" pos:end="79:34"><expr pos:start="79:23" pos:end="79:34"><name pos:start="79:23" pos:end="79:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:37" pos:end="79:57"><expr pos:start="79:37" pos:end="79:57"><literal type="string" pos:start="79:37" pos:end="79:57">"channels mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:31">return <expr pos:start="81:16" pos:end="81:30"><call pos:start="81:16" pos:end="81:30"><name pos:start="81:16" pos:end="81:22">AVERROR</name><argument_list pos:start="81:23" pos:end="81:30">(<argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:54">(<expr pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:12">bits</name> <operator pos:start="85:14" pos:end="85:15">&amp;&amp;</operator> <name pos:start="85:17" pos:end="85:33"><name pos:start="85:17" pos:end="85:21">avctx</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:33">sample_fmt</name></name> <operator pos:start="85:35" pos:end="85:36">==</operator> <name pos:start="85:38" pos:end="85:53">AV_SAMPLE_FMT_U8</name></expr>)</condition> <block pos:start="85:56" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:31">

        <expr_stmt pos:start="87:9" pos:end="87:64"><expr pos:start="87:9" pos:end="87:63"><call pos:start="87:9" pos:end="87:63"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:63">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:37" pos:end="87:62"><expr pos:start="87:37" pos:end="87:62"><literal type="string" pos:start="87:37" pos:end="87:62">"sample format mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:31">return <expr pos:start="89:16" pos:end="89:30"><call pos:start="89:16" pos:end="89:30"><name pos:start="89:16" pos:end="89:22">AVERROR</name><argument_list pos:start="89:23" pos:end="89:30">(<argument pos:start="89:24" pos:end="89:29"><expr pos:start="89:24" pos:end="89:29"><name pos:start="89:24" pos:end="89:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:27">/* get output buffer */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:68"><expr pos:start="97:5" pos:end="97:67"><name pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:12">frame</name><operator pos:start="97:13" pos:end="97:13">.</operator><name pos:start="97:14" pos:end="97:23">nb_samples</name></name> <operator pos:start="97:25" pos:end="97:25">=</operator> <name pos:start="97:27" pos:end="97:34">unp_size</name> <operator pos:start="97:36" pos:end="97:36">/</operator> <operator pos:start="97:38" pos:end="97:38">(</operator><name pos:start="97:39" pos:end="97:53"><name pos:start="97:39" pos:end="97:43">avctx</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:53">channels</name></name> <operator pos:start="97:55" pos:end="97:55">*</operator> <operator pos:start="97:57" pos:end="97:57">(</operator><name pos:start="97:58" pos:end="97:61">bits</name> <operator pos:start="97:63" pos:end="97:63">+</operator> <literal type="number" pos:start="97:65" pos:end="97:65">1</literal><operator pos:start="97:66" pos:end="97:66">)</operator><operator pos:start="97:67" pos:end="97:67">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:56">(<expr pos:start="99:9" pos:end="99:55"><operator pos:start="99:9" pos:end="99:9">(</operator><name pos:start="99:10" pos:end="99:12">ret</name> <operator pos:start="99:14" pos:end="99:14">=</operator> <call pos:start="99:16" pos:end="99:50"><name pos:start="99:16" pos:end="99:32"><name pos:start="99:16" pos:end="99:20">avctx</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:32">get_buffer</name></name><argument_list pos:start="99:33" pos:end="99:50">(<argument pos:start="99:34" pos:end="99:38"><expr pos:start="99:34" pos:end="99:38"><name pos:start="99:34" pos:end="99:38">avctx</name></expr></argument>, <argument pos:start="99:41" pos:end="99:49"><expr pos:start="99:41" pos:end="99:49"><operator pos:start="99:41" pos:end="99:41">&amp;</operator><name pos:start="99:42" pos:end="99:49"><name pos:start="99:42" pos:end="99:42">s</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="99:51" pos:end="99:51">)</operator> <operator pos:start="99:53" pos:end="99:53">&lt;</operator> <literal type="number" pos:start="99:55" pos:end="99:55">0</literal></expr>)</condition> <block pos:start="99:58" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:19">

        <expr_stmt pos:start="101:9" pos:end="101:61"><expr pos:start="101:9" pos:end="101:60"><call pos:start="101:9" pos:end="101:60"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:60">(<argument pos:start="101:16" pos:end="101:20"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:20">avctx</name></expr></argument>, <argument pos:start="101:23" pos:end="101:34"><expr pos:start="101:23" pos:end="101:34"><name pos:start="101:23" pos:end="101:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:37" pos:end="101:59"><expr pos:start="101:37" pos:end="101:59"><literal type="string" pos:start="101:37" pos:end="101:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:19">return <expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:43"><expr pos:start="107:5" pos:end="107:42"><name pos:start="107:5" pos:end="107:11">samples</name>  <operator pos:start="107:14" pos:end="107:14">=</operator> <operator pos:start="107:16" pos:end="107:16">(</operator><name pos:start="107:17" pos:end="107:23">int16_t</name> <operator pos:start="107:25" pos:end="107:25">*</operator><operator pos:start="107:26" pos:end="107:26">)</operator><name pos:start="107:27" pos:end="107:42"><name pos:start="107:27" pos:end="107:27">s</name><operator pos:start="107:28" pos:end="107:29">-&gt;</operator><name pos:start="107:30" pos:end="107:34">frame</name><operator pos:start="107:35" pos:end="107:35">.</operator><name pos:start="107:36" pos:end="107:39">data</name><index pos:start="107:40" pos:end="107:42">[<expr pos:start="107:41" pos:end="107:41"><literal type="number" pos:start="107:41" pos:end="107:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:43"><expr pos:start="109:5" pos:end="109:42"><name pos:start="109:5" pos:end="109:12">samples8</name> <operator pos:start="109:14" pos:end="109:14">=</operator>            <name pos:start="109:27" pos:end="109:42"><name pos:start="109:27" pos:end="109:27">s</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:34">frame</name><operator pos:start="109:35" pos:end="109:35">.</operator><name pos:start="109:36" pos:end="109:39">data</name><index pos:start="109:40" pos:end="109:42">[<expr pos:start="109:41" pos:end="109:41"><literal type="number" pos:start="109:41" pos:end="109:41">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="line" pos:start="113:5" pos:end="113:17">// Initialize</comment>

    <for pos:start="115:5" pos:end="153:5">for<control pos:start="115:8" pos:end="115:47">(<init pos:start="115:9" pos:end="115:14"><expr pos:start="115:9" pos:end="115:13"><name pos:start="115:9" pos:end="115:9">i</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <literal type="number" pos:start="115:13" pos:end="115:13">0</literal></expr>;</init> <condition pos:start="115:16" pos:end="115:42"><expr pos:start="115:16" pos:end="115:41"><name pos:start="115:16" pos:end="115:16">i</name> <operator pos:start="115:18" pos:end="115:18">&lt;</operator> <operator pos:start="115:20" pos:end="115:20">(</operator><literal type="number" pos:start="115:21" pos:end="115:21">1</literal> <operator pos:start="115:23" pos:end="115:24">&lt;&lt;</operator> <operator pos:start="115:26" pos:end="115:26">(</operator><name pos:start="115:27" pos:end="115:30">bits</name> <operator pos:start="115:32" pos:end="115:32">+</operator> <name pos:start="115:34" pos:end="115:39">stereo</name><operator pos:start="115:40" pos:end="115:40">)</operator><operator pos:start="115:41" pos:end="115:41">)</operator></expr>;</condition> <incr pos:start="115:44" pos:end="115:46"><expr pos:start="115:44" pos:end="115:46"><name pos:start="115:44" pos:end="115:44">i</name><operator pos:start="115:45" pos:end="115:46">++</operator></expr></incr>)</control> <block pos:start="115:49" pos:end="153:5">{<block_content pos:start="117:9" pos:end="151:9">

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:12"><name pos:start="117:9" pos:end="117:9">h</name><index pos:start="117:10" pos:end="117:12">[<expr pos:start="117:11" pos:end="117:11"><name pos:start="117:11" pos:end="117:11">i</name></expr>]</index></name><operator pos:start="117:13" pos:end="117:13">.</operator><name pos:start="117:14" pos:end="117:19">length</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <literal type="number" pos:start="117:23" pos:end="117:25">256</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:27"><expr pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:12"><name pos:start="119:9" pos:end="119:9">h</name><index pos:start="119:10" pos:end="119:12">[<expr pos:start="119:11" pos:end="119:11"><name pos:start="119:11" pos:end="119:11">i</name></expr>]</index></name><operator pos:start="119:13" pos:end="119:13">.</operator><name pos:start="119:14" pos:end="119:22">maxlength</name> <operator pos:start="119:24" pos:end="119:24">=</operator> <literal type="number" pos:start="119:26" pos:end="119:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:25"><expr pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:12"><name pos:start="121:9" pos:end="121:9">h</name><index pos:start="121:10" pos:end="121:12">[<expr pos:start="121:11" pos:end="121:11"><name pos:start="121:11" pos:end="121:11">i</name></expr>]</index></name><operator pos:start="121:13" pos:end="121:13">.</operator><name pos:start="121:14" pos:end="121:20">current</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:40"><expr pos:start="123:9" pos:end="123:39"><name pos:start="123:9" pos:end="123:12"><name pos:start="123:9" pos:end="123:9">h</name><index pos:start="123:10" pos:end="123:12">[<expr pos:start="123:11" pos:end="123:11"><name pos:start="123:11" pos:end="123:11">i</name></expr>]</index></name><operator pos:start="123:13" pos:end="123:13">.</operator><name pos:start="123:14" pos:end="123:17">bits</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:39"><name pos:start="123:21" pos:end="123:30">av_mallocz</name><argument_list pos:start="123:31" pos:end="123:39">(<argument pos:start="123:32" pos:end="123:38"><expr pos:start="123:32" pos:end="123:38"><literal type="number" pos:start="123:32" pos:end="123:34">256</literal> <operator pos:start="123:36" pos:end="123:36">*</operator> <literal type="number" pos:start="123:38" pos:end="123:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:53"><expr pos:start="125:9" pos:end="125:52"><name pos:start="125:9" pos:end="125:12"><name pos:start="125:9" pos:end="125:9">h</name><index pos:start="125:10" pos:end="125:12">[<expr pos:start="125:11" pos:end="125:11"><name pos:start="125:11" pos:end="125:11">i</name></expr>]</index></name><operator pos:start="125:13" pos:end="125:13">.</operator><name pos:start="125:14" pos:end="125:20">lengths</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <call pos:start="125:24" pos:end="125:52"><name pos:start="125:24" pos:end="125:33">av_mallocz</name><argument_list pos:start="125:34" pos:end="125:52">(<argument pos:start="125:35" pos:end="125:51"><expr pos:start="125:35" pos:end="125:51"><literal type="number" pos:start="125:35" pos:end="125:37">256</literal> <operator pos:start="125:39" pos:end="125:39">*</operator> <sizeof pos:start="125:41" pos:end="125:51">sizeof<argument_list pos:start="125:47" pos:end="125:51">(<argument pos:start="125:48" pos:end="125:50"><expr pos:start="125:48" pos:end="125:50"><name pos:start="125:48" pos:end="125:50">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:52"><expr pos:start="127:9" pos:end="127:51"><name pos:start="127:9" pos:end="127:12"><name pos:start="127:9" pos:end="127:9">h</name><index pos:start="127:10" pos:end="127:12">[<expr pos:start="127:11" pos:end="127:11"><name pos:start="127:11" pos:end="127:11">i</name></expr>]</index></name><operator pos:start="127:13" pos:end="127:13">.</operator><name pos:start="127:14" pos:end="127:19">values</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <call pos:start="127:23" pos:end="127:51"><name pos:start="127:23" pos:end="127:32">av_mallocz</name><argument_list pos:start="127:33" pos:end="127:51">(<argument pos:start="127:34" pos:end="127:50"><expr pos:start="127:34" pos:end="127:50"><literal type="number" pos:start="127:34" pos:end="127:36">256</literal> <operator pos:start="127:38" pos:end="127:38">*</operator> <sizeof pos:start="127:40" pos:end="127:50">sizeof<argument_list pos:start="127:46" pos:end="127:50">(<argument pos:start="127:47" pos:end="127:49"><expr pos:start="127:47" pos:end="127:49"><name pos:start="127:47" pos:end="127:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:24"><expr pos:start="129:9" pos:end="129:23"><call pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:18">skip_bits1</name><argument_list pos:start="129:19" pos:end="129:23">(<argument pos:start="129:20" pos:end="129:22"><expr pos:start="129:20" pos:end="129:22"><operator pos:start="129:20" pos:end="129:20">&amp;</operator><name pos:start="129:21" pos:end="129:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:46"><expr pos:start="131:9" pos:end="131:45"><call pos:start="131:9" pos:end="131:45"><name pos:start="131:9" pos:end="131:27">smacker_decode_tree</name><argument_list pos:start="131:28" pos:end="131:45">(<argument pos:start="131:29" pos:end="131:31"><expr pos:start="131:29" pos:end="131:31"><operator pos:start="131:29" pos:end="131:29">&amp;</operator><name pos:start="131:30" pos:end="131:31">gb</name></expr></argument>, <argument pos:start="131:34" pos:end="131:38"><expr pos:start="131:34" pos:end="131:38"><operator pos:start="131:34" pos:end="131:34">&amp;</operator><name pos:start="131:35" pos:end="131:38"><name pos:start="131:35" pos:end="131:35">h</name><index pos:start="131:36" pos:end="131:38">[<expr pos:start="131:37" pos:end="131:37"><name pos:start="131:37" pos:end="131:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="131:41" pos:end="131:41"><expr pos:start="131:41" pos:end="131:41"><literal type="number" pos:start="131:41" pos:end="131:41">0</literal></expr></argument>, <argument pos:start="131:44" pos:end="131:44"><expr pos:start="131:44" pos:end="131:44"><literal type="number" pos:start="131:44" pos:end="131:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:24"><expr pos:start="133:9" pos:end="133:23"><call pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:18">skip_bits1</name><argument_list pos:start="133:19" pos:end="133:23">(<argument pos:start="133:20" pos:end="133:22"><expr pos:start="133:20" pos:end="133:22"><operator pos:start="133:20" pos:end="133:20">&amp;</operator><name pos:start="133:21" pos:end="133:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="151:9"><if pos:start="135:9" pos:end="151:9">if<condition pos:start="135:11" pos:end="135:28">(<expr pos:start="135:12" pos:end="135:27"><name pos:start="135:12" pos:end="135:15"><name pos:start="135:12" pos:end="135:12">h</name><index pos:start="135:13" pos:end="135:15">[<expr pos:start="135:14" pos:end="135:14"><name pos:start="135:14" pos:end="135:14">i</name></expr>]</index></name><operator pos:start="135:16" pos:end="135:16">.</operator><name pos:start="135:17" pos:end="135:23">current</name> <operator pos:start="135:25" pos:end="135:25">&gt;</operator> <literal type="number" pos:start="135:27" pos:end="135:27">1</literal></expr>)</condition> <block pos:start="135:30" pos:end="151:9">{<block_content pos:start="137:13" pos:end="149:13">

            <expr_stmt pos:start="137:13" pos:end="141:80"><expr pos:start="137:13" pos:end="141:79"><name pos:start="137:13" pos:end="137:15">res</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <call pos:start="137:19" pos:end="141:79"><name pos:start="137:19" pos:end="137:26">init_vlc</name><argument_list pos:start="137:27" pos:end="141:79">(<argument pos:start="137:28" pos:end="137:34"><expr pos:start="137:28" pos:end="137:34"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:34"><name pos:start="137:29" pos:end="137:31">vlc</name><index pos:start="137:32" pos:end="137:34">[<expr pos:start="137:33" pos:end="137:33"><name pos:start="137:33" pos:end="137:33">i</name></expr>]</index></name></expr></argument>, <argument pos:start="137:37" pos:end="137:48"><expr pos:start="137:37" pos:end="137:48"><name pos:start="137:37" pos:end="137:48">SMKTREE_BITS</name></expr></argument>, <argument pos:start="137:51" pos:end="137:61"><expr pos:start="137:51" pos:end="137:61"><name pos:start="137:51" pos:end="137:54"><name pos:start="137:51" pos:end="137:51">h</name><index pos:start="137:52" pos:end="137:54">[<expr pos:start="137:53" pos:end="137:53"><name pos:start="137:53" pos:end="137:53">i</name></expr>]</index></name><operator pos:start="137:55" pos:end="137:55">.</operator><name pos:start="137:56" pos:end="137:61">length</name></expr></argument>,

                    <argument pos:start="139:21" pos:end="139:32"><expr pos:start="139:21" pos:end="139:32"><name pos:start="139:21" pos:end="139:24"><name pos:start="139:21" pos:end="139:21">h</name><index pos:start="139:22" pos:end="139:24">[<expr pos:start="139:23" pos:end="139:23"><name pos:start="139:23" pos:end="139:23">i</name></expr>]</index></name><operator pos:start="139:25" pos:end="139:25">.</operator><name pos:start="139:26" pos:end="139:32">lengths</name></expr></argument>, <argument pos:start="139:35" pos:end="139:45"><expr pos:start="139:35" pos:end="139:45"><sizeof pos:start="139:35" pos:end="139:45">sizeof<argument_list pos:start="139:41" pos:end="139:45">(<argument pos:start="139:42" pos:end="139:44"><expr pos:start="139:42" pos:end="139:44"><name pos:start="139:42" pos:end="139:44">int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="139:48" pos:end="139:58"><expr pos:start="139:48" pos:end="139:58"><sizeof pos:start="139:48" pos:end="139:58">sizeof<argument_list pos:start="139:54" pos:end="139:58">(<argument pos:start="139:55" pos:end="139:57"><expr pos:start="139:55" pos:end="139:57"><name pos:start="139:55" pos:end="139:57">int</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="141:21" pos:end="141:29"><expr pos:start="141:21" pos:end="141:29"><name pos:start="141:21" pos:end="141:24"><name pos:start="141:21" pos:end="141:21">h</name><index pos:start="141:22" pos:end="141:24">[<expr pos:start="141:23" pos:end="141:23"><name pos:start="141:23" pos:end="141:23">i</name></expr>]</index></name><operator pos:start="141:25" pos:end="141:25">.</operator><name pos:start="141:26" pos:end="141:29">bits</name></expr></argument>, <argument pos:start="141:32" pos:end="141:47"><expr pos:start="141:32" pos:end="141:47"><sizeof pos:start="141:32" pos:end="141:47">sizeof<argument_list pos:start="141:38" pos:end="141:47">(<argument pos:start="141:39" pos:end="141:46"><expr pos:start="141:39" pos:end="141:46"><name pos:start="141:39" pos:end="141:46">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:50" pos:end="141:65"><expr pos:start="141:50" pos:end="141:65"><sizeof pos:start="141:50" pos:end="141:65">sizeof<argument_list pos:start="141:56" pos:end="141:65">(<argument pos:start="141:57" pos:end="141:64"><expr pos:start="141:57" pos:end="141:64"><name pos:start="141:57" pos:end="141:64">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:68" pos:end="141:78"><expr pos:start="141:68" pos:end="141:78"><name pos:start="141:68" pos:end="141:78">INIT_VLC_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="149:13"><if pos:start="143:13" pos:end="149:13">if<condition pos:start="143:15" pos:end="143:23">(<expr pos:start="143:16" pos:end="143:22"><name pos:start="143:16" pos:end="143:18">res</name> <operator pos:start="143:20" pos:end="143:20">&lt;</operator> <literal type="number" pos:start="143:22" pos:end="143:22">0</literal></expr>)</condition> <block pos:start="143:25" pos:end="149:13">{<block_content pos:start="145:17" pos:end="147:43">

                <expr_stmt pos:start="145:17" pos:end="145:72"><expr pos:start="145:17" pos:end="145:71"><call pos:start="145:17" pos:end="145:71"><name pos:start="145:17" pos:end="145:22">av_log</name><argument_list pos:start="145:23" pos:end="145:71">(<argument pos:start="145:24" pos:end="145:28"><expr pos:start="145:24" pos:end="145:28"><name pos:start="145:24" pos:end="145:28">avctx</name></expr></argument>, <argument pos:start="145:31" pos:end="145:42"><expr pos:start="145:31" pos:end="145:42"><name pos:start="145:31" pos:end="145:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:45" pos:end="145:70"><expr pos:start="145:45" pos:end="145:70"><literal type="string" pos:start="145:45" pos:end="145:70">"Cannot build VLC table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="147:17" pos:end="147:43">return <expr pos:start="147:24" pos:end="147:42"><name pos:start="147:24" pos:end="147:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="155:5" pos:end="323:5"><if pos:start="155:5" pos:end="259:5">if<condition pos:start="155:7" pos:end="155:12">(<expr pos:start="155:8" pos:end="155:11"><name pos:start="155:8" pos:end="155:11">bits</name></expr>)</condition> <block pos:start="155:14" pos:end="259:5">{<block_content pos:start="157:9" pos:end="257:9"> <comment type="line" pos:start="155:16" pos:end="155:35">//decode 16-bit data</comment>

        <for pos:start="157:9" pos:end="159:69">for<control pos:start="157:12" pos:end="157:36">(<init pos:start="157:13" pos:end="157:23"><expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:13">i</name> <operator pos:start="157:15" pos:end="157:15">=</operator> <name pos:start="157:17" pos:end="157:22">stereo</name></expr>;</init> <condition pos:start="157:25" pos:end="157:31"><expr pos:start="157:25" pos:end="157:30"><name pos:start="157:25" pos:end="157:25">i</name> <operator pos:start="157:27" pos:end="157:28">&gt;=</operator> <literal type="number" pos:start="157:30" pos:end="157:30">0</literal></expr>;</condition> <incr pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><name pos:start="157:33" pos:end="157:33">i</name><operator pos:start="157:34" pos:end="157:35">--</operator></expr></incr>)</control><block type="pseudo" pos:start="159:13" pos:end="159:69"><block_content pos:start="159:13" pos:end="159:69">

            <expr_stmt pos:start="159:13" pos:end="159:69"><expr pos:start="159:13" pos:end="159:68"><name pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:16">pred</name><index pos:start="159:17" pos:end="159:19">[<expr pos:start="159:18" pos:end="159:18"><name pos:start="159:18" pos:end="159:18">i</name></expr>]</index></name> <operator pos:start="159:21" pos:end="159:21">=</operator> <call pos:start="159:23" pos:end="159:68"><name pos:start="159:23" pos:end="159:33">sign_extend</name><argument_list pos:start="159:34" pos:end="159:68">(<argument pos:start="159:35" pos:end="159:63"><expr pos:start="159:35" pos:end="159:63"><call pos:start="159:35" pos:end="159:63"><name pos:start="159:35" pos:end="159:44">av_bswap16</name><argument_list pos:start="159:45" pos:end="159:63">(<argument pos:start="159:46" pos:end="159:62"><expr pos:start="159:46" pos:end="159:62"><call pos:start="159:46" pos:end="159:62"><name pos:start="159:46" pos:end="159:53">get_bits</name><argument_list pos:start="159:54" pos:end="159:62">(<argument pos:start="159:55" pos:end="159:57"><expr pos:start="159:55" pos:end="159:57"><operator pos:start="159:55" pos:end="159:55">&amp;</operator><name pos:start="159:56" pos:end="159:57">gb</name></expr></argument>, <argument pos:start="159:60" pos:end="159:61"><expr pos:start="159:60" pos:end="159:61"><literal type="number" pos:start="159:60" pos:end="159:61">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="159:66" pos:end="159:67"><expr pos:start="159:66" pos:end="159:67"><literal type="number" pos:start="159:66" pos:end="159:67">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="161:9" pos:end="163:33">for<control pos:start="161:12" pos:end="161:36">(<init pos:start="161:13" pos:end="161:18"><expr pos:start="161:13" pos:end="161:17"><name pos:start="161:13" pos:end="161:13">i</name> <operator pos:start="161:15" pos:end="161:15">=</operator> <literal type="number" pos:start="161:17" pos:end="161:17">0</literal></expr>;</init> <condition pos:start="161:20" pos:end="161:31"><expr pos:start="161:20" pos:end="161:30"><name pos:start="161:20" pos:end="161:20">i</name> <operator pos:start="161:22" pos:end="161:23">&lt;=</operator> <name pos:start="161:25" pos:end="161:30">stereo</name></expr>;</condition> <incr pos:start="161:33" pos:end="161:35"><expr pos:start="161:33" pos:end="161:35"><name pos:start="161:33" pos:end="161:33">i</name><operator pos:start="161:34" pos:end="161:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="163:13" pos:end="163:33"><block_content pos:start="163:13" pos:end="163:33">

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><operator pos:start="163:13" pos:end="163:13">*</operator><name pos:start="163:14" pos:end="163:20">samples</name><operator pos:start="163:21" pos:end="163:22">++</operator> <operator pos:start="163:24" pos:end="163:24">=</operator> <name pos:start="163:26" pos:end="163:32"><name pos:start="163:26" pos:end="163:29">pred</name><index pos:start="163:30" pos:end="163:32">[<expr pos:start="163:31" pos:end="163:31"><name pos:start="163:31" pos:end="163:31">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="165:9" pos:end="257:9">for<control pos:start="165:12" pos:end="165:36">(<init pos:start="165:13" pos:end="165:13">;</init> <condition pos:start="165:15" pos:end="165:31"><expr pos:start="165:15" pos:end="165:30"><name pos:start="165:15" pos:end="165:15">i</name> <operator pos:start="165:17" pos:end="165:17">&lt;</operator> <name pos:start="165:19" pos:end="165:26">unp_size</name> <operator pos:start="165:28" pos:end="165:28">/</operator> <literal type="number" pos:start="165:30" pos:end="165:30">2</literal></expr>;</condition> <incr pos:start="165:33" pos:end="165:35"><expr pos:start="165:33" pos:end="165:35"><name pos:start="165:33" pos:end="165:33">i</name><operator pos:start="165:34" pos:end="165:35">++</operator></expr></incr>)</control> <block pos:start="165:38" pos:end="257:9">{<block_content pos:start="167:13" pos:end="255:13">

            <if_stmt pos:start="167:13" pos:end="169:43"><if pos:start="167:13" pos:end="169:43">if<condition pos:start="167:15" pos:end="167:36">(<expr pos:start="167:16" pos:end="167:35"><call pos:start="167:16" pos:end="167:33"><name pos:start="167:16" pos:end="167:28">get_bits_left</name><argument_list pos:start="167:29" pos:end="167:33">(<argument pos:start="167:30" pos:end="167:32"><expr pos:start="167:30" pos:end="167:32"><operator pos:start="167:30" pos:end="167:30">&amp;</operator><name pos:start="167:31" pos:end="167:32">gb</name></expr></argument>)</argument_list></call><operator pos:start="167:34" pos:end="167:34">&lt;</operator><literal type="number" pos:start="167:35" pos:end="167:35">0</literal></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:43"><block_content pos:start="169:17" pos:end="169:43">

                <return pos:start="169:17" pos:end="169:43">return <expr pos:start="169:24" pos:end="169:42"><name pos:start="169:24" pos:end="169:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="171:13" pos:end="255:13"><if pos:start="171:13" pos:end="213:13">if<condition pos:start="171:15" pos:end="171:26">(<expr pos:start="171:16" pos:end="171:25"><name pos:start="171:16" pos:end="171:16">i</name> <operator pos:start="171:18" pos:end="171:18">&amp;</operator> <name pos:start="171:20" pos:end="171:25">stereo</name></expr>)</condition> <block pos:start="171:28" pos:end="213:13">{<block_content pos:start="173:17" pos:end="211:52">

                <if_stmt pos:start="173:17" pos:end="179:28"><if pos:start="173:17" pos:end="175:71">if<condition pos:start="173:19" pos:end="173:32">(<expr pos:start="173:20" pos:end="173:31"><name pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:22">vlc</name><index pos:start="173:23" pos:end="173:25">[<expr pos:start="173:24" pos:end="173:24"><literal type="number" pos:start="173:24" pos:end="173:24">2</literal></expr>]</index></name><operator pos:start="173:26" pos:end="173:26">.</operator><name pos:start="173:27" pos:end="173:31">table</name></expr>)</condition><block type="pseudo" pos:start="175:21" pos:end="175:71"><block_content pos:start="175:21" pos:end="175:71">

                    <expr_stmt pos:start="175:21" pos:end="175:71"><expr pos:start="175:21" pos:end="175:70"><name pos:start="175:21" pos:end="175:23">res</name> <operator pos:start="175:25" pos:end="175:25">=</operator> <call pos:start="175:27" pos:end="175:70"><name pos:start="175:27" pos:end="175:34">get_vlc2</name><argument_list pos:start="175:35" pos:end="175:70">(<argument pos:start="175:36" pos:end="175:38"><expr pos:start="175:36" pos:end="175:38"><operator pos:start="175:36" pos:end="175:36">&amp;</operator><name pos:start="175:37" pos:end="175:38">gb</name></expr></argument>, <argument pos:start="175:41" pos:end="175:52"><expr pos:start="175:41" pos:end="175:52"><name pos:start="175:41" pos:end="175:46"><name pos:start="175:41" pos:end="175:43">vlc</name><index pos:start="175:44" pos:end="175:46">[<expr pos:start="175:45" pos:end="175:45"><literal type="number" pos:start="175:45" pos:end="175:45">2</literal></expr>]</index></name><operator pos:start="175:47" pos:end="175:47">.</operator><name pos:start="175:48" pos:end="175:52">table</name></expr></argument>, <argument pos:start="175:55" pos:end="175:66"><expr pos:start="175:55" pos:end="175:66"><name pos:start="175:55" pos:end="175:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="175:69" pos:end="175:69"><expr pos:start="175:69" pos:end="175:69"><literal type="number" pos:start="175:69" pos:end="175:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="177:17" pos:end="179:28">else<block type="pseudo" pos:start="179:21" pos:end="179:28"><block_content pos:start="179:21" pos:end="179:28">

                    <expr_stmt pos:start="179:21" pos:end="179:28"><expr pos:start="179:21" pos:end="179:27"><name pos:start="179:21" pos:end="179:23">res</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <literal type="number" pos:start="179:27" pos:end="179:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="181:17" pos:end="187:17"><if pos:start="181:17" pos:end="187:17">if <condition pos:start="181:20" pos:end="181:28">(<expr pos:start="181:21" pos:end="181:27"><name pos:start="181:21" pos:end="181:23">res</name> <operator pos:start="181:25" pos:end="181:25">&lt;</operator> <literal type="number" pos:start="181:27" pos:end="181:27">0</literal></expr>)</condition> <block pos:start="181:30" pos:end="187:17">{<block_content pos:start="183:21" pos:end="185:47">

                    <expr_stmt pos:start="183:21" pos:end="183:65"><expr pos:start="183:21" pos:end="183:64"><call pos:start="183:21" pos:end="183:64"><name pos:start="183:21" pos:end="183:26">av_log</name><argument_list pos:start="183:27" pos:end="183:64">(<argument pos:start="183:28" pos:end="183:32"><expr pos:start="183:28" pos:end="183:32"><name pos:start="183:28" pos:end="183:32">avctx</name></expr></argument>, <argument pos:start="183:35" pos:end="183:46"><expr pos:start="183:35" pos:end="183:46"><name pos:start="183:35" pos:end="183:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="183:49" pos:end="183:63"><expr pos:start="183:49" pos:end="183:63"><literal type="string" pos:start="183:49" pos:end="183:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="185:21" pos:end="185:47">return <expr pos:start="185:28" pos:end="185:46"><name pos:start="185:28" pos:end="185:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:40"><expr pos:start="189:17" pos:end="189:39"><name pos:start="189:17" pos:end="189:19">val</name>  <operator pos:start="189:22" pos:end="189:22">=</operator> <name pos:start="189:24" pos:end="189:27"><name pos:start="189:24" pos:end="189:24">h</name><index pos:start="189:25" pos:end="189:27">[<expr pos:start="189:26" pos:end="189:26"><literal type="number" pos:start="189:26" pos:end="189:26">2</literal></expr>]</index></name><operator pos:start="189:28" pos:end="189:28">.</operator><name pos:start="189:29" pos:end="189:39"><name pos:start="189:29" pos:end="189:34">values</name><index pos:start="189:35" pos:end="189:39">[<expr pos:start="189:36" pos:end="189:38"><name pos:start="189:36" pos:end="189:38">res</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="191:17" pos:end="197:28"><if pos:start="191:17" pos:end="193:71">if<condition pos:start="191:19" pos:end="191:32">(<expr pos:start="191:20" pos:end="191:31"><name pos:start="191:20" pos:end="191:25"><name pos:start="191:20" pos:end="191:22">vlc</name><index pos:start="191:23" pos:end="191:25">[<expr pos:start="191:24" pos:end="191:24"><literal type="number" pos:start="191:24" pos:end="191:24">3</literal></expr>]</index></name><operator pos:start="191:26" pos:end="191:26">.</operator><name pos:start="191:27" pos:end="191:31">table</name></expr>)</condition><block type="pseudo" pos:start="193:21" pos:end="193:71"><block_content pos:start="193:21" pos:end="193:71">

                    <expr_stmt pos:start="193:21" pos:end="193:71"><expr pos:start="193:21" pos:end="193:70"><name pos:start="193:21" pos:end="193:23">res</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="193:70"><name pos:start="193:27" pos:end="193:34">get_vlc2</name><argument_list pos:start="193:35" pos:end="193:70">(<argument pos:start="193:36" pos:end="193:38"><expr pos:start="193:36" pos:end="193:38"><operator pos:start="193:36" pos:end="193:36">&amp;</operator><name pos:start="193:37" pos:end="193:38">gb</name></expr></argument>, <argument pos:start="193:41" pos:end="193:52"><expr pos:start="193:41" pos:end="193:52"><name pos:start="193:41" pos:end="193:46"><name pos:start="193:41" pos:end="193:43">vlc</name><index pos:start="193:44" pos:end="193:46">[<expr pos:start="193:45" pos:end="193:45"><literal type="number" pos:start="193:45" pos:end="193:45">3</literal></expr>]</index></name><operator pos:start="193:47" pos:end="193:47">.</operator><name pos:start="193:48" pos:end="193:52">table</name></expr></argument>, <argument pos:start="193:55" pos:end="193:66"><expr pos:start="193:55" pos:end="193:66"><name pos:start="193:55" pos:end="193:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="193:69" pos:end="193:69"><expr pos:start="193:69" pos:end="193:69"><literal type="number" pos:start="193:69" pos:end="193:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="195:17" pos:end="197:28">else<block type="pseudo" pos:start="197:21" pos:end="197:28"><block_content pos:start="197:21" pos:end="197:28">

                    <expr_stmt pos:start="197:21" pos:end="197:28"><expr pos:start="197:21" pos:end="197:27"><name pos:start="197:21" pos:end="197:23">res</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <literal type="number" pos:start="197:27" pos:end="197:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="199:17" pos:end="205:17"><if pos:start="199:17" pos:end="205:17">if <condition pos:start="199:20" pos:end="199:28">(<expr pos:start="199:21" pos:end="199:27"><name pos:start="199:21" pos:end="199:23">res</name> <operator pos:start="199:25" pos:end="199:25">&lt;</operator> <literal type="number" pos:start="199:27" pos:end="199:27">0</literal></expr>)</condition> <block pos:start="199:30" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:47">

                    <expr_stmt pos:start="201:21" pos:end="201:65"><expr pos:start="201:21" pos:end="201:64"><call pos:start="201:21" pos:end="201:64"><name pos:start="201:21" pos:end="201:26">av_log</name><argument_list pos:start="201:27" pos:end="201:64">(<argument pos:start="201:28" pos:end="201:32"><expr pos:start="201:28" pos:end="201:32"><name pos:start="201:28" pos:end="201:32">avctx</name></expr></argument>, <argument pos:start="201:35" pos:end="201:46"><expr pos:start="201:35" pos:end="201:46"><name pos:start="201:35" pos:end="201:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:49" pos:end="201:63"><expr pos:start="201:49" pos:end="201:63"><literal type="string" pos:start="201:49" pos:end="201:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="203:21" pos:end="203:47">return <expr pos:start="203:28" pos:end="203:46"><name pos:start="203:28" pos:end="203:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:45"><expr pos:start="207:17" pos:end="207:44"><name pos:start="207:17" pos:end="207:19">val</name> <operator pos:start="207:21" pos:end="207:22">|=</operator> <name pos:start="207:24" pos:end="207:27"><name pos:start="207:24" pos:end="207:24">h</name><index pos:start="207:25" pos:end="207:27">[<expr pos:start="207:26" pos:end="207:26"><literal type="number" pos:start="207:26" pos:end="207:26">3</literal></expr>]</index></name><operator pos:start="207:28" pos:end="207:28">.</operator><name pos:start="207:29" pos:end="207:39"><name pos:start="207:29" pos:end="207:34">values</name><index pos:start="207:35" pos:end="207:39">[<expr pos:start="207:36" pos:end="207:38"><name pos:start="207:36" pos:end="207:38">res</name></expr>]</index></name> <operator pos:start="207:41" pos:end="207:42">&lt;&lt;</operator> <literal type="number" pos:start="207:44" pos:end="207:44">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:48"><expr pos:start="209:17" pos:end="209:47"><name pos:start="209:17" pos:end="209:23"><name pos:start="209:17" pos:end="209:20">pred</name><index pos:start="209:21" pos:end="209:23">[<expr pos:start="209:22" pos:end="209:22"><literal type="number" pos:start="209:22" pos:end="209:22">1</literal></expr>]</index></name> <operator pos:start="209:25" pos:end="209:26">+=</operator> <call pos:start="209:28" pos:end="209:47"><name pos:start="209:28" pos:end="209:38">sign_extend</name><argument_list pos:start="209:39" pos:end="209:47">(<argument pos:start="209:40" pos:end="209:42"><expr pos:start="209:40" pos:end="209:42"><name pos:start="209:40" pos:end="209:42">val</name></expr></argument>, <argument pos:start="209:45" pos:end="209:46"><expr pos:start="209:45" pos:end="209:46"><literal type="number" pos:start="209:45" pos:end="209:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:52"><expr pos:start="211:17" pos:end="211:51"><operator pos:start="211:17" pos:end="211:17">*</operator><name pos:start="211:18" pos:end="211:24">samples</name><operator pos:start="211:25" pos:end="211:26">++</operator> <operator pos:start="211:28" pos:end="211:28">=</operator> <call pos:start="211:30" pos:end="211:51"><name pos:start="211:30" pos:end="211:42">av_clip_int16</name><argument_list pos:start="211:43" pos:end="211:51">(<argument pos:start="211:44" pos:end="211:50"><expr pos:start="211:44" pos:end="211:50"><name pos:start="211:44" pos:end="211:50"><name pos:start="211:44" pos:end="211:47">pred</name><index pos:start="211:48" pos:end="211:50">[<expr pos:start="211:49" pos:end="211:49"><literal type="number" pos:start="211:49" pos:end="211:49">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="213:15" pos:end="255:13">else <block pos:start="213:20" pos:end="255:13">{<block_content pos:start="215:17" pos:end="253:52">

                <if_stmt pos:start="215:17" pos:end="221:28"><if pos:start="215:17" pos:end="217:71">if<condition pos:start="215:19" pos:end="215:32">(<expr pos:start="215:20" pos:end="215:31"><name pos:start="215:20" pos:end="215:25"><name pos:start="215:20" pos:end="215:22">vlc</name><index pos:start="215:23" pos:end="215:25">[<expr pos:start="215:24" pos:end="215:24"><literal type="number" pos:start="215:24" pos:end="215:24">0</literal></expr>]</index></name><operator pos:start="215:26" pos:end="215:26">.</operator><name pos:start="215:27" pos:end="215:31">table</name></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:71"><block_content pos:start="217:21" pos:end="217:71">

                    <expr_stmt pos:start="217:21" pos:end="217:71"><expr pos:start="217:21" pos:end="217:70"><name pos:start="217:21" pos:end="217:23">res</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <call pos:start="217:27" pos:end="217:70"><name pos:start="217:27" pos:end="217:34">get_vlc2</name><argument_list pos:start="217:35" pos:end="217:70">(<argument pos:start="217:36" pos:end="217:38"><expr pos:start="217:36" pos:end="217:38"><operator pos:start="217:36" pos:end="217:36">&amp;</operator><name pos:start="217:37" pos:end="217:38">gb</name></expr></argument>, <argument pos:start="217:41" pos:end="217:52"><expr pos:start="217:41" pos:end="217:52"><name pos:start="217:41" pos:end="217:46"><name pos:start="217:41" pos:end="217:43">vlc</name><index pos:start="217:44" pos:end="217:46">[<expr pos:start="217:45" pos:end="217:45"><literal type="number" pos:start="217:45" pos:end="217:45">0</literal></expr>]</index></name><operator pos:start="217:47" pos:end="217:47">.</operator><name pos:start="217:48" pos:end="217:52">table</name></expr></argument>, <argument pos:start="217:55" pos:end="217:66"><expr pos:start="217:55" pos:end="217:66"><name pos:start="217:55" pos:end="217:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="217:69" pos:end="217:69"><expr pos:start="217:69" pos:end="217:69"><literal type="number" pos:start="217:69" pos:end="217:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="219:17" pos:end="221:28">else<block type="pseudo" pos:start="221:21" pos:end="221:28"><block_content pos:start="221:21" pos:end="221:28">

                    <expr_stmt pos:start="221:21" pos:end="221:28"><expr pos:start="221:21" pos:end="221:27"><name pos:start="221:21" pos:end="221:23">res</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <literal type="number" pos:start="221:27" pos:end="221:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="223:17" pos:end="229:17"><if pos:start="223:17" pos:end="229:17">if <condition pos:start="223:20" pos:end="223:28">(<expr pos:start="223:21" pos:end="223:27"><name pos:start="223:21" pos:end="223:23">res</name> <operator pos:start="223:25" pos:end="223:25">&lt;</operator> <literal type="number" pos:start="223:27" pos:end="223:27">0</literal></expr>)</condition> <block pos:start="223:30" pos:end="229:17">{<block_content pos:start="225:21" pos:end="227:47">

                    <expr_stmt pos:start="225:21" pos:end="225:65"><expr pos:start="225:21" pos:end="225:64"><call pos:start="225:21" pos:end="225:64"><name pos:start="225:21" pos:end="225:26">av_log</name><argument_list pos:start="225:27" pos:end="225:64">(<argument pos:start="225:28" pos:end="225:32"><expr pos:start="225:28" pos:end="225:32"><name pos:start="225:28" pos:end="225:32">avctx</name></expr></argument>, <argument pos:start="225:35" pos:end="225:46"><expr pos:start="225:35" pos:end="225:46"><name pos:start="225:35" pos:end="225:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="225:49" pos:end="225:63"><expr pos:start="225:49" pos:end="225:63"><literal type="string" pos:start="225:49" pos:end="225:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="227:21" pos:end="227:47">return <expr pos:start="227:28" pos:end="227:46"><name pos:start="227:28" pos:end="227:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:40"><expr pos:start="231:17" pos:end="231:39"><name pos:start="231:17" pos:end="231:19">val</name>  <operator pos:start="231:22" pos:end="231:22">=</operator> <name pos:start="231:24" pos:end="231:27"><name pos:start="231:24" pos:end="231:24">h</name><index pos:start="231:25" pos:end="231:27">[<expr pos:start="231:26" pos:end="231:26"><literal type="number" pos:start="231:26" pos:end="231:26">0</literal></expr>]</index></name><operator pos:start="231:28" pos:end="231:28">.</operator><name pos:start="231:29" pos:end="231:39"><name pos:start="231:29" pos:end="231:34">values</name><index pos:start="231:35" pos:end="231:39">[<expr pos:start="231:36" pos:end="231:38"><name pos:start="231:36" pos:end="231:38">res</name></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="233:17" pos:end="239:28"><if pos:start="233:17" pos:end="235:71">if<condition pos:start="233:19" pos:end="233:32">(<expr pos:start="233:20" pos:end="233:31"><name pos:start="233:20" pos:end="233:25"><name pos:start="233:20" pos:end="233:22">vlc</name><index pos:start="233:23" pos:end="233:25">[<expr pos:start="233:24" pos:end="233:24"><literal type="number" pos:start="233:24" pos:end="233:24">1</literal></expr>]</index></name><operator pos:start="233:26" pos:end="233:26">.</operator><name pos:start="233:27" pos:end="233:31">table</name></expr>)</condition><block type="pseudo" pos:start="235:21" pos:end="235:71"><block_content pos:start="235:21" pos:end="235:71">

                    <expr_stmt pos:start="235:21" pos:end="235:71"><expr pos:start="235:21" pos:end="235:70"><name pos:start="235:21" pos:end="235:23">res</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <call pos:start="235:27" pos:end="235:70"><name pos:start="235:27" pos:end="235:34">get_vlc2</name><argument_list pos:start="235:35" pos:end="235:70">(<argument pos:start="235:36" pos:end="235:38"><expr pos:start="235:36" pos:end="235:38"><operator pos:start="235:36" pos:end="235:36">&amp;</operator><name pos:start="235:37" pos:end="235:38">gb</name></expr></argument>, <argument pos:start="235:41" pos:end="235:52"><expr pos:start="235:41" pos:end="235:52"><name pos:start="235:41" pos:end="235:46"><name pos:start="235:41" pos:end="235:43">vlc</name><index pos:start="235:44" pos:end="235:46">[<expr pos:start="235:45" pos:end="235:45"><literal type="number" pos:start="235:45" pos:end="235:45">1</literal></expr>]</index></name><operator pos:start="235:47" pos:end="235:47">.</operator><name pos:start="235:48" pos:end="235:52">table</name></expr></argument>, <argument pos:start="235:55" pos:end="235:66"><expr pos:start="235:55" pos:end="235:66"><name pos:start="235:55" pos:end="235:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="235:69" pos:end="235:69"><expr pos:start="235:69" pos:end="235:69"><literal type="number" pos:start="235:69" pos:end="235:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="237:17" pos:end="239:28">else<block type="pseudo" pos:start="239:21" pos:end="239:28"><block_content pos:start="239:21" pos:end="239:28">

                    <expr_stmt pos:start="239:21" pos:end="239:28"><expr pos:start="239:21" pos:end="239:27"><name pos:start="239:21" pos:end="239:23">res</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="241:17" pos:end="247:17"><if pos:start="241:17" pos:end="247:17">if <condition pos:start="241:20" pos:end="241:28">(<expr pos:start="241:21" pos:end="241:27"><name pos:start="241:21" pos:end="241:23">res</name> <operator pos:start="241:25" pos:end="241:25">&lt;</operator> <literal type="number" pos:start="241:27" pos:end="241:27">0</literal></expr>)</condition> <block pos:start="241:30" pos:end="247:17">{<block_content pos:start="243:21" pos:end="245:47">

                    <expr_stmt pos:start="243:21" pos:end="243:65"><expr pos:start="243:21" pos:end="243:64"><call pos:start="243:21" pos:end="243:64"><name pos:start="243:21" pos:end="243:26">av_log</name><argument_list pos:start="243:27" pos:end="243:64">(<argument pos:start="243:28" pos:end="243:32"><expr pos:start="243:28" pos:end="243:32"><name pos:start="243:28" pos:end="243:32">avctx</name></expr></argument>, <argument pos:start="243:35" pos:end="243:46"><expr pos:start="243:35" pos:end="243:46"><name pos:start="243:35" pos:end="243:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:49" pos:end="243:63"><expr pos:start="243:49" pos:end="243:63"><literal type="string" pos:start="243:49" pos:end="243:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="245:21" pos:end="245:47">return <expr pos:start="245:28" pos:end="245:46"><name pos:start="245:28" pos:end="245:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:45"><expr pos:start="249:17" pos:end="249:44"><name pos:start="249:17" pos:end="249:19">val</name> <operator pos:start="249:21" pos:end="249:22">|=</operator> <name pos:start="249:24" pos:end="249:27"><name pos:start="249:24" pos:end="249:24">h</name><index pos:start="249:25" pos:end="249:27">[<expr pos:start="249:26" pos:end="249:26"><literal type="number" pos:start="249:26" pos:end="249:26">1</literal></expr>]</index></name><operator pos:start="249:28" pos:end="249:28">.</operator><name pos:start="249:29" pos:end="249:39"><name pos:start="249:29" pos:end="249:34">values</name><index pos:start="249:35" pos:end="249:39">[<expr pos:start="249:36" pos:end="249:38"><name pos:start="249:36" pos:end="249:38">res</name></expr>]</index></name> <operator pos:start="249:41" pos:end="249:42">&lt;&lt;</operator> <literal type="number" pos:start="249:44" pos:end="249:44">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:48"><expr pos:start="251:17" pos:end="251:47"><name pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:20">pred</name><index pos:start="251:21" pos:end="251:23">[<expr pos:start="251:22" pos:end="251:22"><literal type="number" pos:start="251:22" pos:end="251:22">0</literal></expr>]</index></name> <operator pos:start="251:25" pos:end="251:26">+=</operator> <call pos:start="251:28" pos:end="251:47"><name pos:start="251:28" pos:end="251:38">sign_extend</name><argument_list pos:start="251:39" pos:end="251:47">(<argument pos:start="251:40" pos:end="251:42"><expr pos:start="251:40" pos:end="251:42"><name pos:start="251:40" pos:end="251:42">val</name></expr></argument>, <argument pos:start="251:45" pos:end="251:46"><expr pos:start="251:45" pos:end="251:46"><literal type="number" pos:start="251:45" pos:end="251:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:52"><expr pos:start="253:17" pos:end="253:51"><operator pos:start="253:17" pos:end="253:17">*</operator><name pos:start="253:18" pos:end="253:24">samples</name><operator pos:start="253:25" pos:end="253:26">++</operator> <operator pos:start="253:28" pos:end="253:28">=</operator> <call pos:start="253:30" pos:end="253:51"><name pos:start="253:30" pos:end="253:42">av_clip_int16</name><argument_list pos:start="253:43" pos:end="253:51">(<argument pos:start="253:44" pos:end="253:50"><expr pos:start="253:44" pos:end="253:50"><name pos:start="253:44" pos:end="253:50"><name pos:start="253:44" pos:end="253:47">pred</name><index pos:start="253:48" pos:end="253:50">[<expr pos:start="253:49" pos:end="253:49"><literal type="number" pos:start="253:49" pos:end="253:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="259:7" pos:end="323:5">else <block pos:start="259:12" pos:end="323:5">{<block_content pos:start="261:9" pos:end="321:9"> <comment type="line" pos:start="259:14" pos:end="259:25">//8-bit data</comment>

        <for pos:start="261:9" pos:end="263:39">for<control pos:start="261:12" pos:end="261:36">(<init pos:start="261:13" pos:end="261:23"><expr pos:start="261:13" pos:end="261:22"><name pos:start="261:13" pos:end="261:13">i</name> <operator pos:start="261:15" pos:end="261:15">=</operator> <name pos:start="261:17" pos:end="261:22">stereo</name></expr>;</init> <condition pos:start="261:25" pos:end="261:31"><expr pos:start="261:25" pos:end="261:30"><name pos:start="261:25" pos:end="261:25">i</name> <operator pos:start="261:27" pos:end="261:28">&gt;=</operator> <literal type="number" pos:start="261:30" pos:end="261:30">0</literal></expr>;</condition> <incr pos:start="261:33" pos:end="261:35"><expr pos:start="261:33" pos:end="261:35"><name pos:start="261:33" pos:end="261:33">i</name><operator pos:start="261:34" pos:end="261:35">--</operator></expr></incr>)</control><block type="pseudo" pos:start="263:13" pos:end="263:39"><block_content pos:start="263:13" pos:end="263:39">

            <expr_stmt pos:start="263:13" pos:end="263:39"><expr pos:start="263:13" pos:end="263:38"><name pos:start="263:13" pos:end="263:19"><name pos:start="263:13" pos:end="263:16">pred</name><index pos:start="263:17" pos:end="263:19">[<expr pos:start="263:18" pos:end="263:18"><name pos:start="263:18" pos:end="263:18">i</name></expr>]</index></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <call pos:start="263:23" pos:end="263:38"><name pos:start="263:23" pos:end="263:30">get_bits</name><argument_list pos:start="263:31" pos:end="263:38">(<argument pos:start="263:32" pos:end="263:34"><expr pos:start="263:32" pos:end="263:34"><operator pos:start="263:32" pos:end="263:32">&amp;</operator><name pos:start="263:33" pos:end="263:34">gb</name></expr></argument>, <argument pos:start="263:37" pos:end="263:37"><expr pos:start="263:37" pos:end="263:37"><literal type="number" pos:start="263:37" pos:end="263:37">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="265:9" pos:end="267:34">for<control pos:start="265:12" pos:end="265:36">(<init pos:start="265:13" pos:end="265:18"><expr pos:start="265:13" pos:end="265:17"><name pos:start="265:13" pos:end="265:13">i</name> <operator pos:start="265:15" pos:end="265:15">=</operator> <literal type="number" pos:start="265:17" pos:end="265:17">0</literal></expr>;</init> <condition pos:start="265:20" pos:end="265:31"><expr pos:start="265:20" pos:end="265:30"><name pos:start="265:20" pos:end="265:20">i</name> <operator pos:start="265:22" pos:end="265:23">&lt;=</operator> <name pos:start="265:25" pos:end="265:30">stereo</name></expr>;</condition> <incr pos:start="265:33" pos:end="265:35"><expr pos:start="265:33" pos:end="265:35"><name pos:start="265:33" pos:end="265:33">i</name><operator pos:start="265:34" pos:end="265:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="267:13" pos:end="267:34"><block_content pos:start="267:13" pos:end="267:34">

            <expr_stmt pos:start="267:13" pos:end="267:34"><expr pos:start="267:13" pos:end="267:33"><operator pos:start="267:13" pos:end="267:13">*</operator><name pos:start="267:14" pos:end="267:21">samples8</name><operator pos:start="267:22" pos:end="267:23">++</operator> <operator pos:start="267:25" pos:end="267:25">=</operator> <name pos:start="267:27" pos:end="267:33"><name pos:start="267:27" pos:end="267:30">pred</name><index pos:start="267:31" pos:end="267:33">[<expr pos:start="267:32" pos:end="267:32"><name pos:start="267:32" pos:end="267:32">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="269:9" pos:end="321:9">for<control pos:start="269:12" pos:end="269:32">(<init pos:start="269:13" pos:end="269:13">;</init> <condition pos:start="269:15" pos:end="269:27"><expr pos:start="269:15" pos:end="269:26"><name pos:start="269:15" pos:end="269:15">i</name> <operator pos:start="269:17" pos:end="269:17">&lt;</operator> <name pos:start="269:19" pos:end="269:26">unp_size</name></expr>;</condition> <incr pos:start="269:29" pos:end="269:31"><expr pos:start="269:29" pos:end="269:31"><name pos:start="269:29" pos:end="269:29">i</name><operator pos:start="269:30" pos:end="269:31">++</operator></expr></incr>)</control> <block pos:start="269:34" pos:end="321:9">{<block_content pos:start="271:13" pos:end="319:13">

            <if_stmt pos:start="271:13" pos:end="273:43"><if pos:start="271:13" pos:end="273:43">if<condition pos:start="271:15" pos:end="271:36">(<expr pos:start="271:16" pos:end="271:35"><call pos:start="271:16" pos:end="271:33"><name pos:start="271:16" pos:end="271:28">get_bits_left</name><argument_list pos:start="271:29" pos:end="271:33">(<argument pos:start="271:30" pos:end="271:32"><expr pos:start="271:30" pos:end="271:32"><operator pos:start="271:30" pos:end="271:30">&amp;</operator><name pos:start="271:31" pos:end="271:32">gb</name></expr></argument>)</argument_list></call><operator pos:start="271:34" pos:end="271:34">&lt;</operator><literal type="number" pos:start="271:35" pos:end="271:35">0</literal></expr>)</condition><block type="pseudo" pos:start="273:17" pos:end="273:43"><block_content pos:start="273:17" pos:end="273:43">

                <return pos:start="273:17" pos:end="273:43">return <expr pos:start="273:24" pos:end="273:42"><name pos:start="273:24" pos:end="273:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="275:13" pos:end="319:13"><if pos:start="275:13" pos:end="297:13">if<condition pos:start="275:15" pos:end="275:26">(<expr pos:start="275:16" pos:end="275:25"><name pos:start="275:16" pos:end="275:16">i</name> <operator pos:start="275:18" pos:end="275:18">&amp;</operator> <name pos:start="275:20" pos:end="275:25">stereo</name></expr>)</condition><block pos:start="275:27" pos:end="297:13">{<block_content pos:start="277:17" pos:end="295:53">

                <if_stmt pos:start="277:17" pos:end="283:28"><if pos:start="277:17" pos:end="279:71">if<condition pos:start="277:19" pos:end="277:32">(<expr pos:start="277:20" pos:end="277:31"><name pos:start="277:20" pos:end="277:25"><name pos:start="277:20" pos:end="277:22">vlc</name><index pos:start="277:23" pos:end="277:25">[<expr pos:start="277:24" pos:end="277:24"><literal type="number" pos:start="277:24" pos:end="277:24">1</literal></expr>]</index></name><operator pos:start="277:26" pos:end="277:26">.</operator><name pos:start="277:27" pos:end="277:31">table</name></expr>)</condition><block type="pseudo" pos:start="279:21" pos:end="279:71"><block_content pos:start="279:21" pos:end="279:71">

                    <expr_stmt pos:start="279:21" pos:end="279:71"><expr pos:start="279:21" pos:end="279:70"><name pos:start="279:21" pos:end="279:23">res</name> <operator pos:start="279:25" pos:end="279:25">=</operator> <call pos:start="279:27" pos:end="279:70"><name pos:start="279:27" pos:end="279:34">get_vlc2</name><argument_list pos:start="279:35" pos:end="279:70">(<argument pos:start="279:36" pos:end="279:38"><expr pos:start="279:36" pos:end="279:38"><operator pos:start="279:36" pos:end="279:36">&amp;</operator><name pos:start="279:37" pos:end="279:38">gb</name></expr></argument>, <argument pos:start="279:41" pos:end="279:52"><expr pos:start="279:41" pos:end="279:52"><name pos:start="279:41" pos:end="279:46"><name pos:start="279:41" pos:end="279:43">vlc</name><index pos:start="279:44" pos:end="279:46">[<expr pos:start="279:45" pos:end="279:45"><literal type="number" pos:start="279:45" pos:end="279:45">1</literal></expr>]</index></name><operator pos:start="279:47" pos:end="279:47">.</operator><name pos:start="279:48" pos:end="279:52">table</name></expr></argument>, <argument pos:start="279:55" pos:end="279:66"><expr pos:start="279:55" pos:end="279:66"><name pos:start="279:55" pos:end="279:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="279:69" pos:end="279:69"><expr pos:start="279:69" pos:end="279:69"><literal type="number" pos:start="279:69" pos:end="279:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="281:17" pos:end="283:28">else<block type="pseudo" pos:start="283:21" pos:end="283:28"><block_content pos:start="283:21" pos:end="283:28">

                    <expr_stmt pos:start="283:21" pos:end="283:28"><expr pos:start="283:21" pos:end="283:27"><name pos:start="283:21" pos:end="283:23">res</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <literal type="number" pos:start="283:27" pos:end="283:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="285:17" pos:end="291:17"><if pos:start="285:17" pos:end="291:17">if <condition pos:start="285:20" pos:end="285:28">(<expr pos:start="285:21" pos:end="285:27"><name pos:start="285:21" pos:end="285:23">res</name> <operator pos:start="285:25" pos:end="285:25">&lt;</operator> <literal type="number" pos:start="285:27" pos:end="285:27">0</literal></expr>)</condition> <block pos:start="285:30" pos:end="291:17">{<block_content pos:start="287:21" pos:end="289:47">

                    <expr_stmt pos:start="287:21" pos:end="287:65"><expr pos:start="287:21" pos:end="287:64"><call pos:start="287:21" pos:end="287:64"><name pos:start="287:21" pos:end="287:26">av_log</name><argument_list pos:start="287:27" pos:end="287:64">(<argument pos:start="287:28" pos:end="287:32"><expr pos:start="287:28" pos:end="287:32"><name pos:start="287:28" pos:end="287:32">avctx</name></expr></argument>, <argument pos:start="287:35" pos:end="287:46"><expr pos:start="287:35" pos:end="287:46"><name pos:start="287:35" pos:end="287:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:49" pos:end="287:63"><expr pos:start="287:49" pos:end="287:63"><literal type="string" pos:start="287:49" pos:end="287:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="289:21" pos:end="289:47">return <expr pos:start="289:28" pos:end="289:46"><name pos:start="289:28" pos:end="289:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:60"><expr pos:start="293:17" pos:end="293:59"><name pos:start="293:17" pos:end="293:23"><name pos:start="293:17" pos:end="293:20">pred</name><index pos:start="293:21" pos:end="293:23">[<expr pos:start="293:22" pos:end="293:22"><literal type="number" pos:start="293:22" pos:end="293:22">1</literal></expr>]</index></name> <operator pos:start="293:25" pos:end="293:26">+=</operator> <call pos:start="293:28" pos:end="293:59"><name pos:start="293:28" pos:end="293:38">sign_extend</name><argument_list pos:start="293:39" pos:end="293:59">(<argument pos:start="293:40" pos:end="293:55"><expr pos:start="293:40" pos:end="293:55"><name pos:start="293:40" pos:end="293:43"><name pos:start="293:40" pos:end="293:40">h</name><index pos:start="293:41" pos:end="293:43">[<expr pos:start="293:42" pos:end="293:42"><literal type="number" pos:start="293:42" pos:end="293:42">1</literal></expr>]</index></name><operator pos:start="293:44" pos:end="293:44">.</operator><name pos:start="293:45" pos:end="293:55"><name pos:start="293:45" pos:end="293:50">values</name><index pos:start="293:51" pos:end="293:55">[<expr pos:start="293:52" pos:end="293:54"><name pos:start="293:52" pos:end="293:54">res</name></expr>]</index></name></expr></argument>, <argument pos:start="293:58" pos:end="293:58"><expr pos:start="293:58" pos:end="293:58"><literal type="number" pos:start="293:58" pos:end="293:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:53"><expr pos:start="295:17" pos:end="295:52"><operator pos:start="295:17" pos:end="295:17">*</operator><name pos:start="295:18" pos:end="295:25">samples8</name><operator pos:start="295:26" pos:end="295:27">++</operator> <operator pos:start="295:29" pos:end="295:29">=</operator> <call pos:start="295:31" pos:end="295:52"><name pos:start="295:31" pos:end="295:43">av_clip_uint8</name><argument_list pos:start="295:44" pos:end="295:52">(<argument pos:start="295:45" pos:end="295:51"><expr pos:start="295:45" pos:end="295:51"><name pos:start="295:45" pos:end="295:51"><name pos:start="295:45" pos:end="295:48">pred</name><index pos:start="295:49" pos:end="295:51">[<expr pos:start="295:50" pos:end="295:50"><literal type="number" pos:start="295:50" pos:end="295:50">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="297:15" pos:end="319:13">else <block pos:start="297:20" pos:end="319:13">{<block_content pos:start="299:17" pos:end="317:53">

                <if_stmt pos:start="299:17" pos:end="305:28"><if pos:start="299:17" pos:end="301:71">if<condition pos:start="299:19" pos:end="299:32">(<expr pos:start="299:20" pos:end="299:31"><name pos:start="299:20" pos:end="299:25"><name pos:start="299:20" pos:end="299:22">vlc</name><index pos:start="299:23" pos:end="299:25">[<expr pos:start="299:24" pos:end="299:24"><literal type="number" pos:start="299:24" pos:end="299:24">0</literal></expr>]</index></name><operator pos:start="299:26" pos:end="299:26">.</operator><name pos:start="299:27" pos:end="299:31">table</name></expr>)</condition><block type="pseudo" pos:start="301:21" pos:end="301:71"><block_content pos:start="301:21" pos:end="301:71">

                    <expr_stmt pos:start="301:21" pos:end="301:71"><expr pos:start="301:21" pos:end="301:70"><name pos:start="301:21" pos:end="301:23">res</name> <operator pos:start="301:25" pos:end="301:25">=</operator> <call pos:start="301:27" pos:end="301:70"><name pos:start="301:27" pos:end="301:34">get_vlc2</name><argument_list pos:start="301:35" pos:end="301:70">(<argument pos:start="301:36" pos:end="301:38"><expr pos:start="301:36" pos:end="301:38"><operator pos:start="301:36" pos:end="301:36">&amp;</operator><name pos:start="301:37" pos:end="301:38">gb</name></expr></argument>, <argument pos:start="301:41" pos:end="301:52"><expr pos:start="301:41" pos:end="301:52"><name pos:start="301:41" pos:end="301:46"><name pos:start="301:41" pos:end="301:43">vlc</name><index pos:start="301:44" pos:end="301:46">[<expr pos:start="301:45" pos:end="301:45"><literal type="number" pos:start="301:45" pos:end="301:45">0</literal></expr>]</index></name><operator pos:start="301:47" pos:end="301:47">.</operator><name pos:start="301:48" pos:end="301:52">table</name></expr></argument>, <argument pos:start="301:55" pos:end="301:66"><expr pos:start="301:55" pos:end="301:66"><name pos:start="301:55" pos:end="301:66">SMKTREE_BITS</name></expr></argument>, <argument pos:start="301:69" pos:end="301:69"><expr pos:start="301:69" pos:end="301:69"><literal type="number" pos:start="301:69" pos:end="301:69">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="303:17" pos:end="305:28">else<block type="pseudo" pos:start="305:21" pos:end="305:28"><block_content pos:start="305:21" pos:end="305:28">

                    <expr_stmt pos:start="305:21" pos:end="305:28"><expr pos:start="305:21" pos:end="305:27"><name pos:start="305:21" pos:end="305:23">res</name> <operator pos:start="305:25" pos:end="305:25">=</operator> <literal type="number" pos:start="305:27" pos:end="305:27">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="307:17" pos:end="313:17"><if pos:start="307:17" pos:end="313:17">if <condition pos:start="307:20" pos:end="307:28">(<expr pos:start="307:21" pos:end="307:27"><name pos:start="307:21" pos:end="307:23">res</name> <operator pos:start="307:25" pos:end="307:25">&lt;</operator> <literal type="number" pos:start="307:27" pos:end="307:27">0</literal></expr>)</condition> <block pos:start="307:30" pos:end="313:17">{<block_content pos:start="309:21" pos:end="311:47">

                    <expr_stmt pos:start="309:21" pos:end="309:65"><expr pos:start="309:21" pos:end="309:64"><call pos:start="309:21" pos:end="309:64"><name pos:start="309:21" pos:end="309:26">av_log</name><argument_list pos:start="309:27" pos:end="309:64">(<argument pos:start="309:28" pos:end="309:32"><expr pos:start="309:28" pos:end="309:32"><name pos:start="309:28" pos:end="309:32">avctx</name></expr></argument>, <argument pos:start="309:35" pos:end="309:46"><expr pos:start="309:35" pos:end="309:46"><name pos:start="309:35" pos:end="309:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="309:49" pos:end="309:63"><expr pos:start="309:49" pos:end="309:63"><literal type="string" pos:start="309:49" pos:end="309:63">"invalid vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="311:21" pos:end="311:47">return <expr pos:start="311:28" pos:end="311:46"><name pos:start="311:28" pos:end="311:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:60"><expr pos:start="315:17" pos:end="315:59"><name pos:start="315:17" pos:end="315:23"><name pos:start="315:17" pos:end="315:20">pred</name><index pos:start="315:21" pos:end="315:23">[<expr pos:start="315:22" pos:end="315:22"><literal type="number" pos:start="315:22" pos:end="315:22">0</literal></expr>]</index></name> <operator pos:start="315:25" pos:end="315:26">+=</operator> <call pos:start="315:28" pos:end="315:59"><name pos:start="315:28" pos:end="315:38">sign_extend</name><argument_list pos:start="315:39" pos:end="315:59">(<argument pos:start="315:40" pos:end="315:55"><expr pos:start="315:40" pos:end="315:55"><name pos:start="315:40" pos:end="315:43"><name pos:start="315:40" pos:end="315:40">h</name><index pos:start="315:41" pos:end="315:43">[<expr pos:start="315:42" pos:end="315:42"><literal type="number" pos:start="315:42" pos:end="315:42">0</literal></expr>]</index></name><operator pos:start="315:44" pos:end="315:44">.</operator><name pos:start="315:45" pos:end="315:55"><name pos:start="315:45" pos:end="315:50">values</name><index pos:start="315:51" pos:end="315:55">[<expr pos:start="315:52" pos:end="315:54"><name pos:start="315:52" pos:end="315:54">res</name></expr>]</index></name></expr></argument>, <argument pos:start="315:58" pos:end="315:58"><expr pos:start="315:58" pos:end="315:58"><literal type="number" pos:start="315:58" pos:end="315:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="317:17" pos:end="317:53"><expr pos:start="317:17" pos:end="317:52"><operator pos:start="317:17" pos:end="317:17">*</operator><name pos:start="317:18" pos:end="317:25">samples8</name><operator pos:start="317:26" pos:end="317:27">++</operator> <operator pos:start="317:29" pos:end="317:29">=</operator> <call pos:start="317:31" pos:end="317:52"><name pos:start="317:31" pos:end="317:43">av_clip_uint8</name><argument_list pos:start="317:44" pos:end="317:52">(<argument pos:start="317:45" pos:end="317:51"><expr pos:start="317:45" pos:end="317:51"><name pos:start="317:45" pos:end="317:51"><name pos:start="317:45" pos:end="317:48">pred</name><index pos:start="317:49" pos:end="317:51">[<expr pos:start="317:50" pos:end="317:50"><literal type="number" pos:start="317:50" pos:end="317:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <for pos:start="327:5" pos:end="339:5">for<control pos:start="327:8" pos:end="327:26">(<init pos:start="327:9" pos:end="327:14"><expr pos:start="327:9" pos:end="327:13"><name pos:start="327:9" pos:end="327:9">i</name> <operator pos:start="327:11" pos:end="327:11">=</operator> <literal type="number" pos:start="327:13" pos:end="327:13">0</literal></expr>;</init> <condition pos:start="327:16" pos:end="327:21"><expr pos:start="327:16" pos:end="327:20"><name pos:start="327:16" pos:end="327:16">i</name> <operator pos:start="327:18" pos:end="327:18">&lt;</operator> <literal type="number" pos:start="327:20" pos:end="327:20">4</literal></expr>;</condition> <incr pos:start="327:23" pos:end="327:25"><expr pos:start="327:23" pos:end="327:25"><name pos:start="327:23" pos:end="327:23">i</name><operator pos:start="327:24" pos:end="327:25">++</operator></expr></incr>)</control> <block pos:start="327:28" pos:end="339:5">{<block_content pos:start="329:9" pos:end="337:29">

        <if_stmt pos:start="329:9" pos:end="331:33"><if pos:start="329:9" pos:end="331:33">if<condition pos:start="329:11" pos:end="329:24">(<expr pos:start="329:12" pos:end="329:23"><name pos:start="329:12" pos:end="329:17"><name pos:start="329:12" pos:end="329:14">vlc</name><index pos:start="329:15" pos:end="329:17">[<expr pos:start="329:16" pos:end="329:16"><name pos:start="329:16" pos:end="329:16">i</name></expr>]</index></name><operator pos:start="329:18" pos:end="329:18">.</operator><name pos:start="329:19" pos:end="329:23">table</name></expr>)</condition><block type="pseudo" pos:start="331:13" pos:end="331:33"><block_content pos:start="331:13" pos:end="331:33">

            <expr_stmt pos:start="331:13" pos:end="331:33"><expr pos:start="331:13" pos:end="331:32"><call pos:start="331:13" pos:end="331:32"><name pos:start="331:13" pos:end="331:23">ff_free_vlc</name><argument_list pos:start="331:24" pos:end="331:32">(<argument pos:start="331:25" pos:end="331:31"><expr pos:start="331:25" pos:end="331:31"><operator pos:start="331:25" pos:end="331:25">&amp;</operator><name pos:start="331:26" pos:end="331:31"><name pos:start="331:26" pos:end="331:28">vlc</name><index pos:start="331:29" pos:end="331:31">[<expr pos:start="331:30" pos:end="331:30"><name pos:start="331:30" pos:end="331:30">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:27"><expr pos:start="333:9" pos:end="333:26"><call pos:start="333:9" pos:end="333:26"><name pos:start="333:9" pos:end="333:15">av_free</name><argument_list pos:start="333:16" pos:end="333:26">(<argument pos:start="333:17" pos:end="333:25"><expr pos:start="333:17" pos:end="333:25"><name pos:start="333:17" pos:end="333:20"><name pos:start="333:17" pos:end="333:17">h</name><index pos:start="333:18" pos:end="333:20">[<expr pos:start="333:19" pos:end="333:19"><name pos:start="333:19" pos:end="333:19">i</name></expr>]</index></name><operator pos:start="333:21" pos:end="333:21">.</operator><name pos:start="333:22" pos:end="333:25">bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:30"><expr pos:start="335:9" pos:end="335:29"><call pos:start="335:9" pos:end="335:29"><name pos:start="335:9" pos:end="335:15">av_free</name><argument_list pos:start="335:16" pos:end="335:29">(<argument pos:start="335:17" pos:end="335:28"><expr pos:start="335:17" pos:end="335:28"><name pos:start="335:17" pos:end="335:20"><name pos:start="335:17" pos:end="335:17">h</name><index pos:start="335:18" pos:end="335:20">[<expr pos:start="335:19" pos:end="335:19"><name pos:start="335:19" pos:end="335:19">i</name></expr>]</index></name><operator pos:start="335:21" pos:end="335:21">.</operator><name pos:start="335:22" pos:end="335:28">lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:29"><expr pos:start="337:9" pos:end="337:28"><call pos:start="337:9" pos:end="337:28"><name pos:start="337:9" pos:end="337:15">av_free</name><argument_list pos:start="337:16" pos:end="337:28">(<argument pos:start="337:17" pos:end="337:27"><expr pos:start="337:17" pos:end="337:27"><name pos:start="337:17" pos:end="337:20"><name pos:start="337:17" pos:end="337:17">h</name><index pos:start="337:18" pos:end="337:20">[<expr pos:start="337:19" pos:end="337:19"><name pos:start="337:19" pos:end="337:19">i</name></expr>]</index></name><operator pos:start="337:21" pos:end="337:21">.</operator><name pos:start="337:22" pos:end="337:27">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="343:5" pos:end="343:25"><expr pos:start="343:5" pos:end="343:24"><operator pos:start="343:5" pos:end="343:5">*</operator><name pos:start="343:6" pos:end="343:18">got_frame_ptr</name>   <operator pos:start="343:22" pos:end="343:22">=</operator> <literal type="number" pos:start="343:24" pos:end="343:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:32"><expr pos:start="345:5" pos:end="345:31"><operator pos:start="345:5" pos:end="345:5">*</operator><operator pos:start="345:6" pos:end="345:6">(</operator><name pos:start="345:7" pos:end="345:13">AVFrame</name> <operator pos:start="345:15" pos:end="345:15">*</operator><operator pos:start="345:16" pos:end="345:16">)</operator><name pos:start="345:17" pos:end="345:20">data</name> <operator pos:start="345:22" pos:end="345:22">=</operator> <name pos:start="345:24" pos:end="345:31"><name pos:start="345:24" pos:end="345:24">s</name><operator pos:start="345:25" pos:end="345:26">-&gt;</operator><name pos:start="345:27" pos:end="345:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="349:5" pos:end="349:20">return <expr pos:start="349:12" pos:end="349:19"><name pos:start="349:12" pos:end="349:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
