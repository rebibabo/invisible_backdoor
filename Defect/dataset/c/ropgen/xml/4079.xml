<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4079.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:33">main_loop_should_exit</name><parameter_list pos:start="1:34" pos:end="1:39">(<parameter pos:start="1:35" pos:end="1:38"><decl pos:start="1:35" pos:end="1:38"><type pos:start="1:35" pos:end="1:38"><name pos:start="1:35" pos:end="1:38">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:17">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">RunState</name></type> <name pos:start="5:14" pos:end="5:14">r</name></decl>;</decl_stmt>

    <if_stmt pos:start="7:5" pos:end="11:5"><if pos:start="7:5" pos:end="11:5">if <condition pos:start="7:8" pos:end="7:31">(<expr pos:start="7:9" pos:end="7:30"><call pos:start="7:9" pos:end="7:30"><name pos:start="7:9" pos:end="7:28">qemu_debug_requested</name><argument_list pos:start="7:29" pos:end="7:30">()</argument_list></call></expr>)</condition> <block pos:start="7:33" pos:end="11:5">{<block_content pos:start="9:9" pos:end="9:33">

        <expr_stmt pos:start="9:9" pos:end="9:33"><expr pos:start="9:9" pos:end="9:32"><call pos:start="9:9" pos:end="9:32"><name pos:start="9:9" pos:end="9:15">vm_stop</name><argument_list pos:start="9:16" pos:end="9:32">(<argument pos:start="9:17" pos:end="9:31"><expr pos:start="9:17" pos:end="9:31"><name pos:start="9:17" pos:end="9:31">RUN_STATE_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:33">(<expr pos:start="13:9" pos:end="13:32"><call pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:30">qemu_suspend_requested</name><argument_list pos:start="13:31" pos:end="13:32">()</argument_list></call></expr>)</condition> <block pos:start="13:35" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:30">

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><call pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:27">qemu_system_suspend</name><argument_list pos:start="15:28" pos:end="15:29">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="35:5"><if pos:start="19:5" pos:end="35:5">if <condition pos:start="19:8" pos:end="19:34">(<expr pos:start="19:9" pos:end="19:33"><call pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:31">qemu_shutdown_requested</name><argument_list pos:start="19:32" pos:end="19:33">()</argument_list></call></expr>)</condition> <block pos:start="19:36" pos:end="35:5">{<block_content pos:start="21:9" pos:end="33:9">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><call pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:24">qemu_kill_report</name><argument_list pos:start="21:25" pos:end="21:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:54"><expr pos:start="23:9" pos:end="23:53"><call pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:30">monitor_protocol_event</name><argument_list pos:start="23:31" pos:end="23:53">(<argument pos:start="23:32" pos:end="23:46"><expr pos:start="23:32" pos:end="23:46"><name pos:start="23:32" pos:end="23:46">QEVENT_SHUTDOWN</name></expr></argument>, <argument pos:start="23:49" pos:end="23:52"><expr pos:start="23:49" pos:end="23:52"><name pos:start="23:49" pos:end="23:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="33:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:24">(<expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:23">no_shutdown</name></expr>)</condition> <block pos:start="25:26" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:40">

            <expr_stmt pos:start="27:13" pos:end="27:40"><expr pos:start="27:13" pos:end="27:39"><call pos:start="27:13" pos:end="27:39"><name pos:start="27:13" pos:end="27:19">vm_stop</name><argument_list pos:start="27:20" pos:end="27:39">(<argument pos:start="27:21" pos:end="27:38"><expr pos:start="27:21" pos:end="27:38"><name pos:start="27:21" pos:end="27:38">RUN_STATE_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="33:9">else <block pos:start="29:16" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:24">

            <return pos:start="31:13" pos:end="31:24">return <expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">true</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="55:5"><if pos:start="37:5" pos:end="55:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:28">qemu_reset_requested</name><argument_list pos:start="37:29" pos:end="37:30">()</argument_list></call></expr>)</condition> <block pos:start="37:33" pos:end="55:5">{<block_content pos:start="39:9" pos:end="53:9">

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><call pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:23">pause_all_vcpus</name><argument_list pos:start="39:24" pos:end="39:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:37"><expr pos:start="41:9" pos:end="41:36"><call pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:34">cpu_synchronize_all_states</name><argument_list pos:start="41:35" pos:end="41:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:42"><expr pos:start="43:9" pos:end="43:41"><call pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:25">qemu_system_reset</name><argument_list pos:start="43:26" pos:end="43:41">(<argument pos:start="43:27" pos:end="43:40"><expr pos:start="43:27" pos:end="43:40"><name pos:start="43:27" pos:end="43:40">VMRESET_REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><call pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:24">resume_all_vcpus</name><argument_list pos:start="45:25" pos:end="45:26">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="49:47">(<expr pos:start="47:13" pos:end="49:46"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:26">runstate_check</name><argument_list pos:start="47:27" pos:end="47:52">(<argument pos:start="47:28" pos:end="47:51"><expr pos:start="47:28" pos:end="47:51"><name pos:start="47:28" pos:end="47:51">RUN_STATE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call> <operator pos:start="47:54" pos:end="47:55">||</operator>

            <call pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:26">runstate_check</name><argument_list pos:start="49:27" pos:end="49:46">(<argument pos:start="49:28" pos:end="49:45"><expr pos:start="49:28" pos:end="49:45"><name pos:start="49:28" pos:end="49:45">RUN_STATE_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:49" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:43">

            <expr_stmt pos:start="51:13" pos:end="51:43"><expr pos:start="51:13" pos:end="51:42"><call pos:start="51:13" pos:end="51:42"><name pos:start="51:13" pos:end="51:24">runstate_set</name><argument_list pos:start="51:25" pos:end="51:42">(<argument pos:start="51:26" pos:end="51:41"><expr pos:start="51:26" pos:end="51:41"><name pos:start="51:26" pos:end="51:41">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:32">(<expr pos:start="57:9" pos:end="57:31"><call pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:29">qemu_wakeup_requested</name><argument_list pos:start="57:30" pos:end="57:31">()</argument_list></call></expr>)</condition> <block pos:start="57:34" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:52">

        <expr_stmt pos:start="59:9" pos:end="59:26"><expr pos:start="59:9" pos:end="59:25"><call pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:23">pause_all_vcpus</name><argument_list pos:start="59:24" pos:end="59:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><call pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:34">cpu_synchronize_all_states</name><argument_list pos:start="61:35" pos:end="61:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><call pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:25">qemu_system_reset</name><argument_list pos:start="63:26" pos:end="63:41">(<argument pos:start="63:27" pos:end="63:40"><expr pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:40">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><call pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:24">resume_all_vcpus</name><argument_list pos:start="65:25" pos:end="65:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:52"><expr pos:start="67:9" pos:end="67:51"><call pos:start="67:9" pos:end="67:51"><name pos:start="67:9" pos:end="67:30">monitor_protocol_event</name><argument_list pos:start="67:31" pos:end="67:51">(<argument pos:start="67:32" pos:end="67:44"><expr pos:start="67:32" pos:end="67:44"><name pos:start="67:32" pos:end="67:44">QEVENT_WAKEUP</name></expr></argument>, <argument pos:start="67:47" pos:end="67:50"><expr pos:start="67:47" pos:end="67:50"><name pos:start="67:47" pos:end="67:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:32">qemu_powerdown_requested</name><argument_list pos:start="71:33" pos:end="71:34">()</argument_list></call></expr>)</condition> <block pos:start="71:37" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:32">

        <expr_stmt pos:start="73:9" pos:end="73:32"><expr pos:start="73:9" pos:end="73:31"><call pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:29">qemu_system_powerdown</name><argument_list pos:start="73:30" pos:end="73:31">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:34">(<expr pos:start="77:9" pos:end="77:33"><call pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:29">qemu_vmstop_requested</name><argument_list pos:start="77:30" pos:end="77:33">(<argument pos:start="77:31" pos:end="77:32"><expr pos:start="77:31" pos:end="77:32"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:32">r</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:36" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:19">

        <expr_stmt pos:start="79:9" pos:end="79:19"><expr pos:start="79:9" pos:end="79:18"><call pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">vm_stop</name><argument_list pos:start="79:16" pos:end="79:18">(<argument pos:start="79:17" pos:end="79:17"><expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="83:5" pos:end="83:17">return <expr pos:start="83:12" pos:end="83:16"><name pos:start="83:12" pos:end="83:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
