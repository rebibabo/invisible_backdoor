<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13021.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,
                        <parameter pos:start="2:25" pos:end="2:34"><decl pos:start="2:25" pos:end="2:34"><type pos:start="2:25" pos:end="2:34"><name pos:start="2:25" pos:end="2:28">void</name> <modifier pos:start="2:30" pos:end="2:30">*</modifier></type><name pos:start="2:31" pos:end="2:34">data</name></decl></parameter>, <parameter pos:start="2:37" pos:end="2:50"><decl pos:start="2:37" pos:end="2:50"><type pos:start="2:37" pos:end="2:50"><name pos:start="2:37" pos:end="2:39">int</name> <modifier pos:start="2:41" pos:end="2:41">*</modifier></type><name pos:start="2:42" pos:end="2:50">data_size</name></decl></parameter>,
                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">AVPacket</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:39">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="92:20">
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:55"><decl pos:start="6:5" pos:end="6:54"><type pos:start="6:5" pos:end="6:19"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:26">buf_end</name> <init pos:start="6:28" pos:end="6:54">= <expr pos:start="6:30" pos:end="6:54"><name pos:start="6:30" pos:end="6:40"><name pos:start="6:30" pos:end="6:34">avpkt</name><operator pos:start="6:35" pos:end="6:36">-&gt;</operator><name pos:start="6:37" pos:end="6:40">data</name></name> <operator pos:start="6:42" pos:end="6:42">+</operator> <name pos:start="6:44" pos:end="6:54"><name pos:start="6:44" pos:end="6:48">avpkt</name><operator pos:start="6:49" pos:end="6:50">-&gt;</operator><name pos:start="6:51" pos:end="6:54">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:46"><decl pos:start="8:5" pos:end="8:45"><type pos:start="8:5" pos:end="8:24"><name pos:start="8:5" pos:end="8:16">QdrawContext</name> <modifier pos:start="8:18" pos:end="8:18">*</modifier> <specifier pos:start="8:20" pos:end="8:24">const</specifier></type> <name pos:start="8:26" pos:end="8:26">a</name> <init pos:start="8:28" pos:end="8:45">= <expr pos:start="8:30" pos:end="8:45"><name pos:start="8:30" pos:end="8:45"><name pos:start="8:30" pos:end="8:34">avctx</name><operator pos:start="8:35" pos:end="8:36">-&gt;</operator><name pos:start="8:37" pos:end="8:45">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier> <specifier pos:start="9:15" pos:end="9:19">const</specifier></type> <name pos:start="9:21" pos:end="9:21">p</name><init pos:start="9:22" pos:end="9:40">= <expr pos:start="9:24" pos:end="9:40"><operator pos:start="9:24" pos:end="9:24">(</operator><name pos:start="9:25" pos:end="9:31">AVFrame</name><operator pos:start="9:32" pos:end="9:32">*</operator><operator pos:start="9:33" pos:end="9:33">)</operator><operator pos:start="9:34" pos:end="9:34">&amp;</operator><name pos:start="9:35" pos:end="9:40"><name pos:start="9:35" pos:end="9:35">a</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:40">pic</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:21"><decl pos:start="10:5" pos:end="10:20"><type pos:start="10:5" pos:end="10:12"><name pos:start="10:5" pos:end="10:11">uint8_t</name><modifier pos:start="10:12" pos:end="10:12">*</modifier></type> <name pos:start="10:14" pos:end="10:20">outdata</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">colors</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:10"><decl pos:start="12:5" pos:end="12:9"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint32_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">pal</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:16"><decl pos:start="14:5" pos:end="14:9"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:9">r</name></decl>, <decl pos:start="14:12" pos:end="14:12"><type ref="prev" pos:start="14:5" pos:end="14:7"/><name pos:start="14:12" pos:end="14:12">g</name></decl>, <decl pos:start="14:15" pos:end="14:15"><type ref="prev" pos:start="14:5" pos:end="14:7"/><name pos:start="14:15" pos:end="14:15">b</name></decl>;</decl_stmt>
    <if_stmt pos:start="15:5" pos:end="16:40"><if pos:start="15:5" pos:end="16:40">if<condition pos:start="15:7" pos:end="15:18">(<expr pos:start="15:8" pos:end="15:17"><name pos:start="15:8" pos:end="15:17"><name pos:start="15:8" pos:end="15:8">p</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:14">data</name><index pos:start="15:15" pos:end="15:17">[<expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="16:9" pos:end="16:40"><block_content pos:start="16:9" pos:end="16:40">
        <expr_stmt pos:start="16:9" pos:end="16:40"><expr pos:start="16:9" pos:end="16:39"><call pos:start="16:9" pos:end="16:39"><name pos:start="16:9" pos:end="16:29"><name pos:start="16:9" pos:end="16:13">avctx</name><operator pos:start="16:14" pos:end="16:15">-&gt;</operator><name pos:start="16:16" pos:end="16:29">release_buffer</name></name><argument_list pos:start="16:30" pos:end="16:39">(<argument pos:start="16:31" pos:end="16:35"><expr pos:start="16:31" pos:end="16:35"><name pos:start="16:31" pos:end="16:35">avctx</name></expr></argument>, <argument pos:start="16:38" pos:end="16:38"><expr pos:start="16:38" pos:end="16:38"><name pos:start="16:38" pos:end="16:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:5">p</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:16">reference</name></name><operator pos:start="17:17" pos:end="17:17">=</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="21:5"><if pos:start="18:5" pos:end="21:5">if<condition pos:start="18:7" pos:end="18:39">(<expr pos:start="18:8" pos:end="18:38"><call pos:start="18:8" pos:end="18:34"><name pos:start="18:8" pos:end="18:24"><name pos:start="18:8" pos:end="18:12">avctx</name><operator pos:start="18:13" pos:end="18:14">-&gt;</operator><name pos:start="18:15" pos:end="18:24">get_buffer</name></name><argument_list pos:start="18:25" pos:end="18:34">(<argument pos:start="18:26" pos:end="18:30"><expr pos:start="18:26" pos:end="18:30"><name pos:start="18:26" pos:end="18:30">avctx</name></expr></argument>, <argument pos:start="18:33" pos:end="18:33"><expr pos:start="18:33" pos:end="18:33"><name pos:start="18:33" pos:end="18:33">p</name></expr></argument>)</argument_list></call> <operator pos:start="18:36" pos:end="18:36">&lt;</operator> <literal type="number" pos:start="18:38" pos:end="18:38">0</literal></expr>)</condition><block pos:start="18:40" pos:end="21:5">{<block_content pos:start="19:9" pos:end="20:18">
        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:60">(<argument pos:start="19:16" pos:end="19:20"><expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">avctx</name></expr></argument>, <argument pos:start="19:23" pos:end="19:34"><expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:37" pos:end="19:59"><expr pos:start="19:37" pos:end="19:59"><literal type="string" pos:start="19:37" pos:end="19:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="20:9" pos:end="20:18">return <expr pos:start="20:16" pos:end="20:17"><operator pos:start="20:16" pos:end="20:16">-</operator><literal type="number" pos:start="20:17" pos:end="20:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:36"><expr pos:start="22:5" pos:end="22:35"><name pos:start="22:5" pos:end="22:16"><name pos:start="22:5" pos:end="22:5">p</name><operator pos:start="22:6" pos:end="22:7">-&gt;</operator><name pos:start="22:8" pos:end="22:16">pict_type</name></name><operator pos:start="22:17" pos:end="22:17">=</operator> <name pos:start="22:19" pos:end="22:35">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:5">p</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:16">key_frame</name></name><operator pos:start="23:17" pos:end="23:17">=</operator> <literal type="number" pos:start="23:19" pos:end="23:19">1</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="24:5" pos:end="24:29"><expr pos:start="24:5" pos:end="24:28"><name pos:start="24:5" pos:end="24:11">outdata</name> <operator pos:start="24:13" pos:end="24:13">=</operator> <name pos:start="24:15" pos:end="24:28"><name pos:start="24:15" pos:end="24:15">a</name><operator pos:start="24:16" pos:end="24:17">-&gt;</operator><name pos:start="24:18" pos:end="24:20">pic</name><operator pos:start="24:21" pos:end="24:21">.</operator><name pos:start="24:22" pos:end="24:25">data</name><index pos:start="24:26" pos:end="24:28">[<expr pos:start="24:27" pos:end="24:27"><literal type="number" pos:start="24:27" pos:end="24:27">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt pos:start="25:5" pos:end="26:16"><if pos:start="25:5" pos:end="26:16">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:15">buf_end</name> <operator pos:start="25:17" pos:end="25:17">-</operator> <name pos:start="25:19" pos:end="25:21">buf</name> <operator pos:start="25:23" pos:end="25:23">&lt;</operator> <literal type="number" pos:start="25:25" pos:end="25:30">0x68</literal> <operator pos:start="25:30" pos:end="25:30">+</operator> <literal type="number" pos:start="25:32" pos:end="25:32">4</literal></expr>)</condition><block type="pseudo" pos:start="26:5" pos:end="26:16"><block_content pos:start="26:5" pos:end="26:16">
    <expr_stmt pos:start="26:5" pos:end="26:16"><expr pos:start="26:5" pos:end="26:15"><name pos:start="26:5" pos:end="26:7">buf</name> <operator pos:start="26:9" pos:end="26:10">+=</operator> <literal type="number" pos:start="26:12" pos:end="26:15">0x68</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="26:18" pos:end="26:38">/* jump to palette */</comment>
    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:10">colors</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:25"><name pos:start="27:14" pos:end="27:20">AV_RB32</name><argument_list pos:start="27:21" pos:end="27:25">(<argument pos:start="27:22" pos:end="27:24"><expr pos:start="27:22" pos:end="27:24"><name pos:start="27:22" pos:end="27:24">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="28:5" pos:end="28:13"><expr pos:start="28:5" pos:end="28:12"><name pos:start="28:5" pos:end="28:7">buf</name> <operator pos:start="28:9" pos:end="28:10">+=</operator> <literal type="number" pos:start="28:12" pos:end="28:12">4</literal></expr>;</expr_stmt>
    <if_stmt pos:start="29:5" pos:end="32:5"><if pos:start="29:5" pos:end="32:5">if<condition pos:start="29:7" pos:end="29:34">(<expr pos:start="29:8" pos:end="29:33"><name pos:start="29:8" pos:end="29:29"><name pos:start="29:8" pos:end="29:13">colors</name> <argument_list type="generic" pos:start="29:15" pos:end="29:29">&lt; <argument pos:start="29:17" pos:end="29:27"><expr pos:start="29:17" pos:end="29:27"><literal type="number" pos:start="29:17" pos:end="29:17">0</literal> <operator pos:start="29:19" pos:end="29:20">||</operator> <name pos:start="29:22" pos:end="29:27">colors</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="29:31" pos:end="29:33">256</literal></expr>)</condition> <block pos:start="29:36" pos:end="32:5">{<block_content pos:start="30:9" pos:end="31:18">
        <expr_stmt pos:start="30:9" pos:end="30:86"><expr pos:start="30:9" pos:end="30:85"><call pos:start="30:9" pos:end="30:85"><name pos:start="30:9" pos:end="30:14">av_log</name><argument_list pos:start="30:15" pos:end="30:85">(<argument pos:start="30:16" pos:end="30:20"><expr pos:start="30:16" pos:end="30:20"><name pos:start="30:16" pos:end="30:20">avctx</name></expr></argument>, <argument pos:start="30:23" pos:end="30:34"><expr pos:start="30:23" pos:end="30:34"><name pos:start="30:23" pos:end="30:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="30:37" pos:end="30:68"><expr pos:start="30:37" pos:end="30:68"><literal type="string" pos:start="30:37" pos:end="30:68">"Error color count - %i(0x%X)\n"</literal></expr></argument>, <argument pos:start="30:71" pos:end="30:76"><expr pos:start="30:71" pos:end="30:76"><name pos:start="30:71" pos:end="30:76">colors</name></expr></argument>, <argument pos:start="30:79" pos:end="30:84"><expr pos:start="30:79" pos:end="30:84"><name pos:start="30:79" pos:end="30:84">colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="33:5" pos:end="34:32"><if pos:start="33:5" pos:end="34:32">if <condition pos:start="33:8" pos:end="33:41">(<expr pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:15">buf_end</name> <operator pos:start="33:17" pos:end="33:17">-</operator> <name pos:start="33:19" pos:end="33:21">buf</name> <operator pos:start="33:23" pos:end="33:23">&lt;</operator> <operator pos:start="33:25" pos:end="33:25">(</operator><name pos:start="33:26" pos:end="33:31">colors</name> <operator pos:start="33:33" pos:end="33:33">+</operator> <literal type="number" pos:start="33:35" pos:end="33:35">1</literal><operator pos:start="33:36" pos:end="33:36">)</operator> <operator pos:start="33:38" pos:end="33:38">*</operator> <literal type="number" pos:start="33:40" pos:end="33:40">8</literal></expr>)</condition><block type="pseudo" pos:start="34:5" pos:end="34:32"><block_content pos:start="34:5" pos:end="34:32">
    <expr_stmt pos:start="34:5" pos:end="34:32"><expr pos:start="34:5" pos:end="34:31"><name pos:start="34:5" pos:end="34:7">pal</name> <operator pos:start="34:9" pos:end="34:9">=</operator> <operator pos:start="34:11" pos:end="34:11">(</operator><name pos:start="34:12" pos:end="34:19">uint32_t</name><operator pos:start="34:20" pos:end="34:20">*</operator><operator pos:start="34:21" pos:end="34:21">)</operator><name pos:start="34:22" pos:end="34:31"><name pos:start="34:22" pos:end="34:22">p</name><operator pos:start="34:23" pos:end="34:24">-&gt;</operator><name pos:start="34:25" pos:end="34:28">data</name><index pos:start="34:29" pos:end="34:31">[<expr pos:start="34:30" pos:end="34:30"><literal type="number" pos:start="34:30" pos:end="34:30">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="35:5" pos:end="51:5">for <control pos:start="35:9" pos:end="35:33">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:28"><expr pos:start="35:17" pos:end="35:27"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:20">&lt;=</operator> <name pos:start="35:22" pos:end="35:27">colors</name></expr>;</condition> <incr pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:30">i</name><operator pos:start="35:31" pos:end="35:32">++</operator></expr></incr>)</control> <block pos:start="35:35" pos:end="51:5">{<block_content pos:start="36:9" pos:end="50:44">
        <decl_stmt pos:start="36:9" pos:end="36:25"><decl pos:start="36:9" pos:end="36:24"><type pos:start="36:9" pos:end="36:20"><name pos:start="36:9" pos:end="36:16">unsigned</name> <name pos:start="36:18" pos:end="36:20">int</name></type> <name pos:start="36:22" pos:end="36:24">idx</name></decl>;</decl_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:11">idx</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:26"><name pos:start="37:15" pos:end="37:21">AV_RB16</name><argument_list pos:start="37:22" pos:end="37:26">(<argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="37:29" pos:end="37:45">/* color index */</comment>
        <expr_stmt pos:start="38:9" pos:end="38:17"><expr pos:start="38:9" pos:end="38:16"><name pos:start="38:9" pos:end="38:11">buf</name> <operator pos:start="38:13" pos:end="38:14">+=</operator> <literal type="number" pos:start="38:16" pos:end="38:16">2</literal></expr>;</expr_stmt>
        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:15">idx</name> <operator pos:start="39:17" pos:end="39:17">&gt;</operator> <literal type="number" pos:start="39:19" pos:end="39:21">255</literal></expr>)</condition> <block pos:start="39:24" pos:end="43:9">{<block_content pos:start="40:13" pos:end="42:21">
            <expr_stmt pos:start="40:13" pos:end="40:81"><expr pos:start="40:13" pos:end="40:80"><call pos:start="40:13" pos:end="40:80"><name pos:start="40:13" pos:end="40:18">av_log</name><argument_list pos:start="40:19" pos:end="40:80">(<argument pos:start="40:20" pos:end="40:24"><expr pos:start="40:20" pos:end="40:24"><name pos:start="40:20" pos:end="40:24">avctx</name></expr></argument>, <argument pos:start="40:27" pos:end="40:38"><expr pos:start="40:27" pos:end="40:38"><name pos:start="40:27" pos:end="40:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="40:41" pos:end="40:74"><expr pos:start="40:41" pos:end="40:74"><literal type="string" pos:start="40:41" pos:end="40:74">"Palette index out of range: %u\n"</literal></expr></argument>, <argument pos:start="40:77" pos:end="40:79"><expr pos:start="40:77" pos:end="40:79"><name pos:start="40:77" pos:end="40:79">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">buf</name> <operator pos:start="41:17" pos:end="41:18">+=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">6</literal></expr>;</expr_stmt>
            <continue pos:start="42:13" pos:end="42:21">continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:19"><expr pos:start="44:9" pos:end="44:18"><name pos:start="44:9" pos:end="44:9">r</name> <operator pos:start="44:11" pos:end="44:11">=</operator> <operator pos:start="44:13" pos:end="44:13">*</operator><name pos:start="44:14" pos:end="44:16">buf</name><operator pos:start="44:17" pos:end="44:18">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:14"><expr pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:11">buf</name><operator pos:start="45:12" pos:end="45:13">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="46:9" pos:end="46:19"><expr pos:start="46:9" pos:end="46:18"><name pos:start="46:9" pos:end="46:9">g</name> <operator pos:start="46:11" pos:end="46:11">=</operator> <operator pos:start="46:13" pos:end="46:13">*</operator><name pos:start="46:14" pos:end="46:16">buf</name><operator pos:start="46:17" pos:end="46:18">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:14"><expr pos:start="47:9" pos:end="47:13"><name pos:start="47:9" pos:end="47:11">buf</name><operator pos:start="47:12" pos:end="47:13">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:19"><expr pos:start="48:9" pos:end="48:18"><name pos:start="48:9" pos:end="48:9">b</name> <operator pos:start="48:11" pos:end="48:11">=</operator> <operator pos:start="48:13" pos:end="48:13">*</operator><name pos:start="48:14" pos:end="48:16">buf</name><operator pos:start="48:17" pos:end="48:18">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:14"><expr pos:start="49:9" pos:end="49:13"><name pos:start="49:9" pos:end="49:11">buf</name><operator pos:start="49:12" pos:end="49:13">++</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="50:9" pos:end="50:44"><expr pos:start="50:9" pos:end="50:43"><name pos:start="50:9" pos:end="50:16"><name pos:start="50:9" pos:end="50:11">pal</name><index pos:start="50:12" pos:end="50:16">[<expr pos:start="50:13" pos:end="50:15"><name pos:start="50:13" pos:end="50:15">idx</name></expr>]</index></name> <operator pos:start="50:18" pos:end="50:18">=</operator> <operator pos:start="50:20" pos:end="50:20">(</operator><name pos:start="50:21" pos:end="50:21">r</name> <operator pos:start="50:23" pos:end="50:24">&lt;&lt;</operator> <literal type="number" pos:start="50:26" pos:end="50:27">16</literal><operator pos:start="50:28" pos:end="50:28">)</operator> <operator pos:start="50:30" pos:end="50:30">|</operator> <operator pos:start="50:32" pos:end="50:32">(</operator><name pos:start="50:33" pos:end="50:33">g</name> <operator pos:start="50:35" pos:end="50:36">&lt;&lt;</operator> <literal type="number" pos:start="50:38" pos:end="50:38">8</literal><operator pos:start="50:39" pos:end="50:39">)</operator> <operator pos:start="50:41" pos:end="50:41">|</operator> <name pos:start="50:43" pos:end="50:43">b</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="52:5" pos:end="52:31"><expr pos:start="52:5" pos:end="52:30"><name pos:start="52:5" pos:end="52:26"><name pos:start="52:5" pos:end="52:5">p</name><operator pos:start="52:6" pos:end="52:7">-&gt;</operator><name pos:start="52:8" pos:end="52:26">palette_has_changed</name></name> <operator pos:start="52:28" pos:end="52:28">=</operator> <literal type="number" pos:start="52:30" pos:end="52:30">1</literal></expr>;</expr_stmt>
    <if_stmt pos:start="53:5" pos:end="54:14"><if pos:start="53:5" pos:end="54:14">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:15">buf_end</name> <operator pos:start="53:17" pos:end="53:17">-</operator> <name pos:start="53:19" pos:end="53:21">buf</name> <operator pos:start="53:23" pos:end="53:23">&lt;</operator> <literal type="number" pos:start="53:25" pos:end="53:26">18</literal></expr>)</condition><block type="pseudo" pos:start="54:5" pos:end="54:14"><block_content pos:start="54:5" pos:end="54:14">
    <expr_stmt pos:start="54:5" pos:end="54:14"><expr pos:start="54:5" pos:end="54:13"><name pos:start="54:5" pos:end="54:7">buf</name> <operator pos:start="54:9" pos:end="54:10">+=</operator> <literal type="number" pos:start="54:12" pos:end="54:13">18</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="54:16" pos:end="54:39">/* skip unneeded data */</comment>
    <for pos:start="55:5" pos:end="89:5">for <control pos:start="55:9" pos:end="55:39">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:34"><expr pos:start="55:17" pos:end="55:33"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:33"><name pos:start="55:21" pos:end="55:25">avctx</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:33">height</name></name></expr>;</condition> <incr pos:start="55:36" pos:end="55:38"><expr pos:start="55:36" pos:end="55:38"><name pos:start="55:36" pos:end="55:36">i</name><operator pos:start="55:37" pos:end="55:38">++</operator></expr></incr>)</control> <block pos:start="55:41" pos:end="89:5">{<block_content pos:start="56:9" pos:end="88:38">
        <decl_stmt pos:start="56:9" pos:end="56:34"><decl pos:start="56:9" pos:end="56:16"><type pos:start="56:9" pos:end="56:11"><name pos:start="56:9" pos:end="56:11">int</name></type> <name pos:start="56:13" pos:end="56:16">size</name></decl>, <decl pos:start="56:19" pos:end="56:22"><type ref="prev" pos:start="56:9" pos:end="56:11"/><name pos:start="56:19" pos:end="56:22">left</name></decl>, <decl pos:start="56:25" pos:end="56:28"><type ref="prev" pos:start="56:9" pos:end="56:11"/><name pos:start="56:25" pos:end="56:28">code</name></decl>, <decl pos:start="56:31" pos:end="56:33"><type ref="prev" pos:start="56:9" pos:end="56:11"/><name pos:start="56:31" pos:end="56:33">pix</name></decl>;</decl_stmt>
        <decl_stmt pos:start="57:9" pos:end="57:28"><decl pos:start="57:9" pos:end="57:27"><type pos:start="57:9" pos:end="57:23"><specifier pos:start="57:9" pos:end="57:13">const</specifier> <name pos:start="57:15" pos:end="57:21">uint8_t</name> <modifier pos:start="57:23" pos:end="57:23">*</modifier></type><name pos:start="57:24" pos:end="57:27">next</name></decl>;</decl_stmt>
        <decl_stmt pos:start="58:9" pos:end="58:21"><decl pos:start="58:9" pos:end="58:20"><type pos:start="58:9" pos:end="58:17"><name pos:start="58:9" pos:end="58:15">uint8_t</name> <modifier pos:start="58:17" pos:end="58:17">*</modifier></type><name pos:start="58:18" pos:end="58:20">out</name></decl>;</decl_stmt>
        <decl_stmt pos:start="59:9" pos:end="59:22"><decl pos:start="59:9" pos:end="59:21"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:17">tsize</name> <init pos:start="59:19" pos:end="59:21">= <expr pos:start="59:21" pos:end="59:21"><literal type="number" pos:start="59:21" pos:end="59:21">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="60:9" pos:end="60:25">/* decode line */</comment>
        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:11">out</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:21">outdata</name></expr>;</expr_stmt>
        <expr_stmt pos:start="62:9" pos:end="62:28"><expr pos:start="62:9" pos:end="62:27"><name pos:start="62:9" pos:end="62:12">size</name> <operator pos:start="62:14" pos:end="62:14">=</operator> <call pos:start="62:16" pos:end="62:27"><name pos:start="62:16" pos:end="62:22">AV_RB16</name><argument_list pos:start="62:23" pos:end="62:27">(<argument pos:start="62:24" pos:end="62:26"><expr pos:start="62:24" pos:end="62:26"><name pos:start="62:24" pos:end="62:26">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="62:30" pos:end="62:54">/* size of packed line */</comment>
        <expr_stmt pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:11">buf</name> <operator pos:start="63:13" pos:end="63:14">+=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">2</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="64:9" pos:end="64:20"><expr pos:start="64:9" pos:end="64:19"><name pos:start="64:9" pos:end="64:12">left</name> <operator pos:start="64:14" pos:end="64:14">=</operator> <name pos:start="64:16" pos:end="64:19">size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:12">next</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <name pos:start="65:16" pos:end="65:18">buf</name> <operator pos:start="65:20" pos:end="65:20">+</operator> <name pos:start="65:22" pos:end="65:25">size</name></expr>;</expr_stmt>
        <while pos:start="66:9" pos:end="86:9">while <condition pos:start="66:15" pos:end="66:24">(<expr pos:start="66:16" pos:end="66:23"><name pos:start="66:16" pos:end="66:19">left</name> <operator pos:start="66:21" pos:end="66:21">&gt;</operator> <literal type="number" pos:start="66:23" pos:end="66:23">0</literal></expr>)</condition> <block pos:start="66:26" pos:end="86:9">{<block_content pos:start="67:13" pos:end="85:13">
            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:16">code</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <operator pos:start="67:20" pos:end="67:20">*</operator><name pos:start="67:21" pos:end="67:23">buf</name><operator pos:start="67:24" pos:end="67:25">++</operator></expr>;</expr_stmt>
            <if_stmt pos:start="68:13" pos:end="85:13"><if pos:start="68:13" pos:end="76:13">if <condition pos:start="68:16" pos:end="68:29">(<expr pos:start="68:17" pos:end="68:27"><name pos:start="68:17" pos:end="68:20">code</name> <operator pos:start="68:22" pos:end="68:22">&amp;</operator> <literal type="number" pos:start="68:24" pos:end="68:27">0x80</literal></expr> )</condition> <block pos:start="68:31" pos:end="76:13">{<block_content pos:start="69:17" pos:end="75:26"> <comment type="block" pos:start="68:33" pos:end="68:41">/* run */</comment>
                <expr_stmt pos:start="69:17" pos:end="69:29"><expr pos:start="69:17" pos:end="69:28"><name pos:start="69:17" pos:end="69:19">pix</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <operator pos:start="69:23" pos:end="69:23">*</operator><name pos:start="69:24" pos:end="69:26">buf</name><operator pos:start="69:27" pos:end="69:28">++</operator></expr>;</expr_stmt>
                <if_stmt pos:start="70:17" pos:end="71:26"><if pos:start="70:17" pos:end="71:26">if <condition pos:start="70:20" pos:end="70:75">(<expr pos:start="70:21" pos:end="70:74"><operator pos:start="70:21" pos:end="70:21">(</operator><name pos:start="70:22" pos:end="70:24">out</name> <operator pos:start="70:26" pos:end="70:26">+</operator> <operator pos:start="70:28" pos:end="70:28">(</operator><literal type="number" pos:start="70:29" pos:end="70:33">257</literal> <operator pos:start="70:33" pos:end="70:33">-</operator> <name pos:start="70:35" pos:end="70:38">code</name><operator pos:start="70:39" pos:end="70:39">)</operator><operator pos:start="70:40" pos:end="70:40">)</operator> <operator pos:start="70:42" pos:end="70:42">&gt;</operator> <operator pos:start="70:44" pos:end="70:44">(</operator><name pos:start="70:45" pos:end="70:51">outdata</name> <operator pos:start="70:53" pos:end="70:53">+</operator>  <name pos:start="70:56" pos:end="70:73"><name pos:start="70:56" pos:end="70:56">a</name><operator pos:start="70:57" pos:end="70:58">-&gt;</operator><name pos:start="70:59" pos:end="70:61">pic</name><operator pos:start="70:62" pos:end="70:62">.</operator><name pos:start="70:63" pos:end="70:70">linesize</name><index pos:start="70:71" pos:end="70:73">[<expr pos:start="70:72" pos:end="70:72"><literal type="number" pos:start="70:72" pos:end="70:72">0</literal></expr>]</index></name><operator pos:start="70:74" pos:end="70:74">)</operator></expr>)</condition><block type="pseudo" pos:start="71:21" pos:end="71:26"><block_content pos:start="71:21" pos:end="71:26">
                    <break pos:start="71:21" pos:end="71:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="72:17" pos:end="72:45"><expr pos:start="72:17" pos:end="72:44"><call pos:start="72:17" pos:end="72:44"><name pos:start="72:17" pos:end="72:22">memset</name><argument_list pos:start="72:23" pos:end="72:44">(<argument pos:start="72:24" pos:end="72:26"><expr pos:start="72:24" pos:end="72:26"><name pos:start="72:24" pos:end="72:26">out</name></expr></argument>, <argument pos:start="72:29" pos:end="72:31"><expr pos:start="72:29" pos:end="72:31"><name pos:start="72:29" pos:end="72:31">pix</name></expr></argument>, <argument pos:start="72:34" pos:end="72:43"><expr pos:start="72:34" pos:end="72:43"><literal type="number" pos:start="72:34" pos:end="72:38">257</literal> <operator pos:start="72:38" pos:end="72:38">-</operator> <name pos:start="72:40" pos:end="72:43">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="73:17" pos:end="73:34"><expr pos:start="73:17" pos:end="73:33"><name pos:start="73:17" pos:end="73:19">out</name> <operator pos:start="73:21" pos:end="73:22">+=</operator> <literal type="number" pos:start="73:24" pos:end="73:28">257</literal> <operator pos:start="73:28" pos:end="73:28">-</operator> <name pos:start="73:30" pos:end="73:33">code</name></expr>;</expr_stmt>
                <expr_stmt pos:start="74:17" pos:end="74:36"><expr pos:start="74:17" pos:end="74:35"><name pos:start="74:17" pos:end="74:21">tsize</name> <operator pos:start="74:23" pos:end="74:24">+=</operator> <literal type="number" pos:start="74:26" pos:end="74:30">257</literal> <operator pos:start="74:30" pos:end="74:30">-</operator> <name pos:start="74:32" pos:end="74:35">code</name></expr>;</expr_stmt>
                <expr_stmt pos:start="75:17" pos:end="75:26"><expr pos:start="75:17" pos:end="75:25"><name pos:start="75:17" pos:end="75:20">left</name> <operator pos:start="75:22" pos:end="75:23">-=</operator> <literal type="number" pos:start="75:25" pos:end="75:25">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="76:15" pos:end="85:13">else <block pos:start="76:20" pos:end="85:13">{<block_content pos:start="77:17" pos:end="84:34"> <comment type="block" pos:start="76:22" pos:end="76:31">/* copy */</comment>
                <if_stmt pos:start="77:17" pos:end="78:26"><if pos:start="77:17" pos:end="78:26">if <condition pos:start="77:20" pos:end="77:67">(<expr pos:start="77:21" pos:end="77:66"><operator pos:start="77:21" pos:end="77:21">(</operator><name pos:start="77:22" pos:end="77:24">out</name> <operator pos:start="77:26" pos:end="77:26">+</operator> <name pos:start="77:28" pos:end="77:31">code</name><operator pos:start="77:32" pos:end="77:32">)</operator> <operator pos:start="77:34" pos:end="77:34">&gt;</operator> <operator pos:start="77:36" pos:end="77:36">(</operator><name pos:start="77:37" pos:end="77:43">outdata</name> <operator pos:start="77:45" pos:end="77:45">+</operator>  <name pos:start="77:48" pos:end="77:65"><name pos:start="77:48" pos:end="77:48">a</name><operator pos:start="77:49" pos:end="77:50">-&gt;</operator><name pos:start="77:51" pos:end="77:53">pic</name><operator pos:start="77:54" pos:end="77:54">.</operator><name pos:start="77:55" pos:end="77:62">linesize</name><index pos:start="77:63" pos:end="77:65">[<expr pos:start="77:64" pos:end="77:64"><literal type="number" pos:start="77:64" pos:end="77:64">0</literal></expr>]</index></name><operator pos:start="77:66" pos:end="77:66">)</operator></expr>)</condition><block type="pseudo" pos:start="78:21" pos:end="78:26"><block_content pos:start="78:21" pos:end="78:26">
                    <break pos:start="78:21" pos:end="78:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="79:17" pos:end="80:43"><if pos:start="79:17" pos:end="80:43">if <condition pos:start="79:20" pos:end="79:45">(<expr pos:start="79:21" pos:end="79:44"><name pos:start="79:21" pos:end="79:27">buf_end</name> <operator pos:start="79:29" pos:end="79:29">-</operator> <name pos:start="79:31" pos:end="79:33">buf</name> <operator pos:start="79:35" pos:end="79:35">&lt;</operator> <name pos:start="79:37" pos:end="79:40">code</name> <operator pos:start="79:42" pos:end="79:42">+</operator> <literal type="number" pos:start="79:44" pos:end="79:44">1</literal></expr>)</condition><block type="pseudo" pos:start="80:17" pos:end="80:43"><block_content pos:start="80:17" pos:end="80:43">
                <expr_stmt pos:start="80:17" pos:end="80:43"><expr pos:start="80:17" pos:end="80:42"><call pos:start="80:17" pos:end="80:42"><name pos:start="80:17" pos:end="80:22">memcpy</name><argument_list pos:start="80:23" pos:end="80:42">(<argument pos:start="80:24" pos:end="80:26"><expr pos:start="80:24" pos:end="80:26"><name pos:start="80:24" pos:end="80:26">out</name></expr></argument>, <argument pos:start="80:29" pos:end="80:31"><expr pos:start="80:29" pos:end="80:31"><name pos:start="80:29" pos:end="80:31">buf</name></expr></argument>, <argument pos:start="80:34" pos:end="80:41"><expr pos:start="80:34" pos:end="80:41"><name pos:start="80:34" pos:end="80:37">code</name> <operator pos:start="80:39" pos:end="80:39">+</operator> <literal type="number" pos:start="80:41" pos:end="80:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="81:17" pos:end="81:32"><expr pos:start="81:17" pos:end="81:31"><name pos:start="81:17" pos:end="81:19">out</name> <operator pos:start="81:21" pos:end="81:22">+=</operator> <name pos:start="81:24" pos:end="81:27">code</name> <operator pos:start="81:29" pos:end="81:29">+</operator> <literal type="number" pos:start="81:31" pos:end="81:31">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="82:17" pos:end="82:32"><expr pos:start="82:17" pos:end="82:31"><name pos:start="82:17" pos:end="82:19">buf</name> <operator pos:start="82:21" pos:end="82:22">+=</operator> <name pos:start="82:24" pos:end="82:27">code</name> <operator pos:start="82:29" pos:end="82:29">+</operator> <literal type="number" pos:start="82:31" pos:end="82:31">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="83:17" pos:end="83:33"><expr pos:start="83:17" pos:end="83:32"><name pos:start="83:17" pos:end="83:20">left</name> <operator pos:start="83:22" pos:end="83:23">-=</operator> <literal type="number" pos:start="83:25" pos:end="83:27">2</literal> <operator pos:start="83:27" pos:end="83:27">+</operator> <name pos:start="83:29" pos:end="83:32">code</name></expr>;</expr_stmt>
                <expr_stmt pos:start="84:17" pos:end="84:34"><expr pos:start="84:17" pos:end="84:33"><name pos:start="84:17" pos:end="84:21">tsize</name> <operator pos:start="84:23" pos:end="84:24">+=</operator> <name pos:start="84:26" pos:end="84:29">code</name> <operator pos:start="84:31" pos:end="84:31">+</operator> <literal type="number" pos:start="84:33" pos:end="84:33">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="87:9" pos:end="87:19"><expr pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:11">buf</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:18">next</name></expr>;</expr_stmt>
        <expr_stmt pos:start="88:9" pos:end="88:38"><expr pos:start="88:9" pos:end="88:37"><name pos:start="88:9" pos:end="88:15">outdata</name> <operator pos:start="88:17" pos:end="88:18">+=</operator> <name pos:start="88:20" pos:end="88:37"><name pos:start="88:20" pos:end="88:20">a</name><operator pos:start="88:21" pos:end="88:22">-&gt;</operator><name pos:start="88:23" pos:end="88:25">pic</name><operator pos:start="88:26" pos:end="88:26">.</operator><name pos:start="88:27" pos:end="88:34">linesize</name><index pos:start="88:35" pos:end="88:37">[<expr pos:start="88:36" pos:end="88:36"><literal type="number" pos:start="88:36" pos:end="88:36">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="90:5" pos:end="90:33"><expr pos:start="90:5" pos:end="90:32"><operator pos:start="90:5" pos:end="90:5">*</operator><name pos:start="90:6" pos:end="90:14">data_size</name> <operator pos:start="90:16" pos:end="90:16">=</operator> <sizeof pos:start="90:18" pos:end="90:32">sizeof<argument_list pos:start="90:24" pos:end="90:32">(<argument pos:start="90:25" pos:end="90:31"><expr pos:start="90:25" pos:end="90:31"><name pos:start="90:25" pos:end="90:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt pos:start="91:5" pos:end="91:29"><expr pos:start="91:5" pos:end="91:28"><operator pos:start="91:5" pos:end="91:5">*</operator><operator pos:start="91:6" pos:end="91:6">(</operator><name pos:start="91:7" pos:end="91:13">AVFrame</name><operator pos:start="91:14" pos:end="91:14">*</operator><operator pos:start="91:15" pos:end="91:15">)</operator><name pos:start="91:16" pos:end="91:19">data</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:28"><name pos:start="91:23" pos:end="91:23">a</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:28">pic</name></name></expr>;</expr_stmt>
    <return pos:start="92:5" pos:end="92:20">return <expr pos:start="92:12" pos:end="92:19"><name pos:start="92:12" pos:end="92:19">buf_size</name></expr>;</return>
</block_content>}</block></function></unit>
