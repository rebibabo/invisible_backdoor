<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15662.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">net_socket_listen_init</name><parameter_list pos:start="1:34" pos:end="7:55">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:48">NetClientState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">peer</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:51"><decl pos:start="3:35" pos:end="3:51"><type pos:start="3:35" pos:end="3:51"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:51">model</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:50"><decl pos:start="5:35" pos:end="5:50"><type pos:start="5:35" pos:end="5:50"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:44">char</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:50">name</name></decl></parameter>,

                                  <parameter pos:start="7:35" pos:end="7:54"><decl pos:start="7:35" pos:end="7:54"><type pos:start="7:35" pos:end="7:54"><specifier pos:start="7:35" pos:end="7:39">const</specifier> <name pos:start="7:41" pos:end="7:44">char</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:54">host_str</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="95:1">{<block_content pos:start="11:5" pos:end="93:13">

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">NetClientState</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:22">nc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">NetSocketState</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:22">sockaddr_in</name></name></type> <name pos:start="15:24" pos:end="15:28">saddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">fd</name></decl>, <decl pos:start="17:13" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:14">err</name> <init pos:start="19:16" pos:end="19:21">= <expr pos:start="19:18" pos:end="19:21"><name pos:start="19:18" pos:end="19:21">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:52">(<expr pos:start="23:9" pos:end="23:51"><call pos:start="23:9" pos:end="23:47"><name pos:start="23:9" pos:end="23:23">parse_host_port</name><argument_list pos:start="23:24" pos:end="23:47">(<argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:30">saddr</name></expr></argument>, <argument pos:start="23:33" pos:end="23:40"><expr pos:start="23:33" pos:end="23:40"><name pos:start="23:33" pos:end="23:40">host_str</name></expr></argument>, <argument pos:start="23:43" pos:end="23:46"><expr pos:start="23:43" pos:end="23:46"><operator pos:start="23:43" pos:end="23:43">&amp;</operator><name pos:start="23:44" pos:end="23:46">err</name></expr></argument>)</argument_list></call> <operator pos:start="23:49" pos:end="23:49">&lt;</operator> <literal type="number" pos:start="23:51" pos:end="23:51">0</literal></expr>)</condition> <block pos:start="23:54" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:24">error_report_err</name><argument_list pos:start="25:25" pos:end="25:29">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:6">fd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:45"><name pos:start="33:10" pos:end="33:20">qemu_socket</name><argument_list pos:start="33:21" pos:end="33:45">(<argument pos:start="33:22" pos:end="33:28"><expr pos:start="33:22" pos:end="33:28"><name pos:start="33:22" pos:end="33:28">PF_INET</name></expr></argument>, <argument pos:start="33:31" pos:end="33:41"><expr pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="33:44" pos:end="33:44"><expr pos:start="33:44" pos:end="33:44"><literal type="number" pos:start="33:44" pos:end="33:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition> <block pos:start="35:17" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><call pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:14">perror</name><argument_list pos:start="37:15" pos:end="37:24">(<argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><literal type="string" pos:start="37:16" pos:end="37:23">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><call pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:21">qemu_set_nonblock</name><argument_list pos:start="43:22" pos:end="43:25">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:30"><expr pos:start="47:5" pos:end="47:29"><call pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:25">socket_set_fast_reuse</name><argument_list pos:start="47:26" pos:end="47:29">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:61"><expr pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:60"><name pos:start="51:11" pos:end="51:14">bind</name><argument_list pos:start="51:15" pos:end="51:60">(<argument pos:start="51:16" pos:end="51:17"><expr pos:start="51:16" pos:end="51:17"><name pos:start="51:16" pos:end="51:17">fd</name></expr></argument>, <argument pos:start="51:20" pos:end="51:44"><expr pos:start="51:20" pos:end="51:44"><operator pos:start="51:20" pos:end="51:20">(</operator>struct <name pos:start="51:28" pos:end="51:35">sockaddr</name> <operator pos:start="51:37" pos:end="51:37">*</operator><operator pos:start="51:38" pos:end="51:38">)</operator><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:44">saddr</name></expr></argument>, <argument pos:start="51:47" pos:end="51:59"><expr pos:start="51:47" pos:end="51:59"><sizeof pos:start="51:47" pos:end="51:59">sizeof<argument_list pos:start="51:53" pos:end="51:59">(<argument pos:start="51:54" pos:end="51:58"><expr pos:start="51:54" pos:end="51:58"><name pos:start="51:54" pos:end="51:58">saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:18">

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><call pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:14">perror</name><argument_list pos:start="55:15" pos:end="55:22">(<argument pos:start="55:16" pos:end="55:21"><expr pos:start="55:16" pos:end="55:21"><literal type="string" pos:start="55:16" pos:end="55:21">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:19">closesocket</name><argument_list pos:start="57:20" pos:end="57:23">(<argument pos:start="57:21" pos:end="57:22"><expr pos:start="57:21" pos:end="57:22"><name pos:start="57:21" pos:end="57:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:23"><name pos:start="63:11" pos:end="63:16">listen</name><argument_list pos:start="63:17" pos:end="63:23">(<argument pos:start="63:18" pos:end="63:19"><expr pos:start="63:18" pos:end="63:19"><name pos:start="63:18" pos:end="63:19">fd</name></expr></argument>, <argument pos:start="63:22" pos:end="63:22"><expr pos:start="63:22" pos:end="63:22"><literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition> <block pos:start="65:18" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:18">

        <expr_stmt pos:start="67:9" pos:end="67:25"><expr pos:start="67:9" pos:end="67:24"><call pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:14">perror</name><argument_list pos:start="67:15" pos:end="67:24">(<argument pos:start="67:16" pos:end="67:23"><expr pos:start="67:16" pos:end="67:23"><literal type="string" pos:start="67:16" pos:end="67:23">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:24"><expr pos:start="69:9" pos:end="69:23"><call pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:19">closesocket</name><argument_list pos:start="69:20" pos:end="69:23">(<argument pos:start="69:21" pos:end="69:22"><expr pos:start="69:21" pos:end="69:22"><name pos:start="69:21" pos:end="69:22">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:66"><expr pos:start="77:5" pos:end="77:65"><name pos:start="77:5" pos:end="77:6">nc</name> <operator pos:start="77:8" pos:end="77:8">=</operator> <call pos:start="77:10" pos:end="77:65"><name pos:start="77:10" pos:end="77:28">qemu_new_net_client</name><argument_list pos:start="77:29" pos:end="77:65">(<argument pos:start="77:30" pos:end="77:45"><expr pos:start="77:30" pos:end="77:45"><operator pos:start="77:30" pos:end="77:30">&amp;</operator><name pos:start="77:31" pos:end="77:45">net_socket_info</name></expr></argument>, <argument pos:start="77:48" pos:end="77:51"><expr pos:start="77:48" pos:end="77:51"><name pos:start="77:48" pos:end="77:51">peer</name></expr></argument>, <argument pos:start="77:54" pos:end="77:58"><expr pos:start="77:54" pos:end="77:58"><name pos:start="77:54" pos:end="77:58">model</name></expr></argument>, <argument pos:start="77:61" pos:end="77:64"><expr pos:start="77:61" pos:end="77:64"><name pos:start="77:61" pos:end="77:64">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:5">s</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <call pos:start="79:9" pos:end="79:41"><name pos:start="79:9" pos:end="79:17">DO_UPCAST</name><argument_list pos:start="79:18" pos:end="79:41">(<argument pos:start="79:19" pos:end="79:32"><expr pos:start="79:19" pos:end="79:32"><name pos:start="79:19" pos:end="79:32">NetSocketState</name></expr></argument>, <argument pos:start="79:35" pos:end="79:36"><expr pos:start="79:35" pos:end="79:36"><name pos:start="79:35" pos:end="79:36">nc</name></expr></argument>, <argument pos:start="79:39" pos:end="79:40"><expr pos:start="79:39" pos:end="79:40"><name pos:start="79:39" pos:end="79:40">nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:15"><expr pos:start="81:5" pos:end="81:14"><name pos:start="81:5" pos:end="81:9"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:9">fd</name></name> <operator pos:start="81:11" pos:end="81:11">=</operator> <operator pos:start="81:13" pos:end="81:13">-</operator><literal type="number" pos:start="81:14" pos:end="81:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:22"><expr pos:start="83:5" pos:end="83:21"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:16">listen_fd</name></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:21">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:9">nc</name><operator pos:start="85:10" pos:end="85:10">.</operator><name pos:start="85:11" pos:end="85:19">link_down</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:26">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:62"><expr pos:start="87:5" pos:end="87:61"><call pos:start="87:5" pos:end="87:61"><name pos:start="87:5" pos:end="87:22">net_socket_rs_init</name><argument_list pos:start="87:23" pos:end="87:61">(<argument pos:start="87:24" pos:end="87:29"><expr pos:start="87:24" pos:end="87:29"><operator pos:start="87:24" pos:end="87:24">&amp;</operator><name pos:start="87:25" pos:end="87:29"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:29">rs</name></name></expr></argument>, <argument pos:start="87:32" pos:end="87:53"><expr pos:start="87:32" pos:end="87:53"><name pos:start="87:32" pos:end="87:53">net_socket_rs_finalize</name></expr></argument>, <argument pos:start="87:56" pos:end="87:60"><expr pos:start="87:56" pos:end="87:60"><name pos:start="87:56" pos:end="87:60">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:66"><expr pos:start="91:5" pos:end="91:65"><call pos:start="91:5" pos:end="91:65"><name pos:start="91:5" pos:end="91:23">qemu_set_fd_handler</name><argument_list pos:start="91:24" pos:end="91:65">(<argument pos:start="91:25" pos:end="91:36"><expr pos:start="91:25" pos:end="91:36"><name pos:start="91:25" pos:end="91:36"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:36">listen_fd</name></name></expr></argument>, <argument pos:start="91:39" pos:end="91:55"><expr pos:start="91:39" pos:end="91:55"><name pos:start="91:39" pos:end="91:55">net_socket_accept</name></expr></argument>, <argument pos:start="91:58" pos:end="91:61"><expr pos:start="91:58" pos:end="91:61"><name pos:start="91:58" pos:end="91:61">NULL</name></expr></argument>, <argument pos:start="91:64" pos:end="91:64"><expr pos:start="91:64" pos:end="91:64"><name pos:start="91:64" pos:end="91:64">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
