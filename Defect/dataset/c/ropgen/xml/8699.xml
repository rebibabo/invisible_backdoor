<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8699.c" pos:tabs="8"><function pos:start="1:1" pos:end="369:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_residual</name><parameter_list pos:start="1:27" pos:end="7:41">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:44">H264Context</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">h</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">H264SliceContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">sl</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:40">GetBitContext</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:44">gb</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:60"><decl pos:start="3:47" pos:end="3:60"><type pos:start="3:47" pos:end="3:60"><name pos:start="3:47" pos:end="3:53">int16_t</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:60">block</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:67"><decl pos:start="3:63" pos:end="3:67"><type pos:start="3:63" pos:end="3:67"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:67">n</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:51"><decl pos:start="5:28" pos:end="5:51"><type pos:start="5:28" pos:end="5:51"><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:40">uint8_t</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:51">scantable</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:73"><decl pos:start="5:54" pos:end="5:73"><type pos:start="5:54" pos:end="5:73"><specifier pos:start="5:54" pos:end="5:58">const</specifier> <name pos:start="5:60" pos:end="5:67">uint32_t</name> <modifier pos:start="5:69" pos:end="5:69">*</modifier></type><name pos:start="5:70" pos:end="5:73">qmul</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:40"><decl pos:start="7:28" pos:end="7:40"><type pos:start="7:28" pos:end="7:40"><name pos:start="7:28" pos:end="7:30">int</name></type> <name pos:start="7:32" pos:end="7:40">max_coeff</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="369:1">{<block_content pos:start="11:5" pos:end="367:13">

    <decl_stmt pos:start="11:5" pos:end="11:102"><decl pos:start="11:5" pos:end="11:101"><type pos:start="11:5" pos:end="11:20"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:20">int</name></type> <name pos:start="11:22" pos:end="11:48"><name pos:start="11:22" pos:end="11:44">coeff_token_table_index</name><index pos:start="11:45" pos:end="11:48">[<expr pos:start="11:46" pos:end="11:47"><literal type="number" pos:start="11:46" pos:end="11:47">17</literal></expr>]</index></name><init pos:start="11:49" pos:end="11:101">= <expr pos:start="11:51" pos:end="11:101"><block pos:start="11:51" pos:end="11:101">{<expr pos:start="11:52" pos:end="11:52"><literal type="number" pos:start="11:52" pos:end="11:52">0</literal></expr>, <expr pos:start="11:55" pos:end="11:55"><literal type="number" pos:start="11:55" pos:end="11:55">0</literal></expr>, <expr pos:start="11:58" pos:end="11:58"><literal type="number" pos:start="11:58" pos:end="11:58">1</literal></expr>, <expr pos:start="11:61" pos:end="11:61"><literal type="number" pos:start="11:61" pos:end="11:61">1</literal></expr>, <expr pos:start="11:64" pos:end="11:64"><literal type="number" pos:start="11:64" pos:end="11:64">2</literal></expr>, <expr pos:start="11:67" pos:end="11:67"><literal type="number" pos:start="11:67" pos:end="11:67">2</literal></expr>, <expr pos:start="11:70" pos:end="11:70"><literal type="number" pos:start="11:70" pos:end="11:70">2</literal></expr>, <expr pos:start="11:73" pos:end="11:73"><literal type="number" pos:start="11:73" pos:end="11:73">2</literal></expr>, <expr pos:start="11:76" pos:end="11:76"><literal type="number" pos:start="11:76" pos:end="11:76">3</literal></expr>, <expr pos:start="11:79" pos:end="11:79"><literal type="number" pos:start="11:79" pos:end="11:79">3</literal></expr>, <expr pos:start="11:82" pos:end="11:82"><literal type="number" pos:start="11:82" pos:end="11:82">3</literal></expr>, <expr pos:start="11:85" pos:end="11:85"><literal type="number" pos:start="11:85" pos:end="11:85">3</literal></expr>, <expr pos:start="11:88" pos:end="11:88"><literal type="number" pos:start="11:88" pos:end="11:88">3</literal></expr>, <expr pos:start="11:91" pos:end="11:91"><literal type="number" pos:start="11:91" pos:end="11:91">3</literal></expr>, <expr pos:start="11:94" pos:end="11:94"><literal type="number" pos:start="11:94" pos:end="11:94">3</literal></expr>, <expr pos:start="11:97" pos:end="11:97"><literal type="number" pos:start="11:97" pos:end="11:97">3</literal></expr>, <expr pos:start="11:100" pos:end="11:100"><literal type="number" pos:start="11:100" pos:end="11:100">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:13">level</name><index pos:start="13:14" pos:end="13:17">[<expr pos:start="13:15" pos:end="13:16"><literal type="number" pos:start="13:15" pos:end="13:16">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:75"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">zeros_left</name></decl>, <decl pos:start="15:21" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:31">coeff_token</name></decl>, <decl pos:start="15:34" pos:end="15:44"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:34" pos:end="15:44">total_coeff</name></decl>, <decl pos:start="15:47" pos:end="15:47"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:47" pos:end="15:47">i</name></decl>, <decl pos:start="15:50" pos:end="15:62"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:50" pos:end="15:62">trailing_ones</name></decl>, <decl pos:start="15:65" pos:end="15:74"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:65" pos:end="15:74">run_before</name></decl>;</decl_stmt>



    <comment type="line" pos:start="19:5" pos:end="19:46">//FIXME put trailing_onex into the context</comment>



    <if_stmt pos:start="23:5" pos:end="55:5"><if pos:start="23:5" pos:end="35:5">if<condition pos:start="23:7" pos:end="23:22">(<expr pos:start="23:8" pos:end="23:21"><name pos:start="23:8" pos:end="23:16">max_coeff</name> <operator pos:start="23:18" pos:end="23:19">&lt;=</operator> <literal type="number" pos:start="23:21" pos:end="23:21">8</literal></expr>)</condition><block pos:start="23:23" pos:end="35:5">{<block_content pos:start="25:9" pos:end="33:36">

        <if_stmt pos:start="25:9" pos:end="31:113"><if pos:start="25:9" pos:end="27:107">if <condition pos:start="25:12" pos:end="25:27">(<expr pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:21">max_coeff</name> <operator pos:start="25:23" pos:end="25:24">==</operator> <literal type="number" pos:start="25:26" pos:end="25:26">4</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:107"><block_content pos:start="27:13" pos:end="27:107">

            <expr_stmt pos:start="27:13" pos:end="27:107"><expr pos:start="27:13" pos:end="27:106"><name pos:start="27:13" pos:end="27:23">coeff_token</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:106"><name pos:start="27:27" pos:end="27:34">get_vlc2</name><argument_list pos:start="27:35" pos:end="27:106">(<argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><name pos:start="27:36" pos:end="27:37">gb</name></expr></argument>, <argument pos:start="27:40" pos:end="27:70"><expr pos:start="27:40" pos:end="27:70"><name pos:start="27:40" pos:end="27:70"><name pos:start="27:40" pos:end="27:64">chroma_dc_coeff_token_vlc</name><operator pos:start="27:65" pos:end="27:65">.</operator><name pos:start="27:66" pos:end="27:70">table</name></name></expr></argument>, <argument pos:start="27:73" pos:end="27:102"><expr pos:start="27:73" pos:end="27:102"><name pos:start="27:73" pos:end="27:102">CHROMA_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="27:105" pos:end="27:105"><expr pos:start="27:105" pos:end="27:105"><literal type="number" pos:start="27:105" pos:end="27:105">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="29:9" pos:end="31:113">else<block type="pseudo" pos:start="31:13" pos:end="31:113"><block_content pos:start="31:13" pos:end="31:113">

            <expr_stmt pos:start="31:13" pos:end="31:113"><expr pos:start="31:13" pos:end="31:112"><name pos:start="31:13" pos:end="31:23">coeff_token</name> <operator pos:start="31:25" pos:end="31:25">=</operator> <call pos:start="31:27" pos:end="31:112"><name pos:start="31:27" pos:end="31:34">get_vlc2</name><argument_list pos:start="31:35" pos:end="31:112">(<argument pos:start="31:36" pos:end="31:37"><expr pos:start="31:36" pos:end="31:37"><name pos:start="31:36" pos:end="31:37">gb</name></expr></argument>, <argument pos:start="31:40" pos:end="31:73"><expr pos:start="31:40" pos:end="31:73"><name pos:start="31:40" pos:end="31:73"><name pos:start="31:40" pos:end="31:67">chroma422_dc_coeff_token_vlc</name><operator pos:start="31:68" pos:end="31:68">.</operator><name pos:start="31:69" pos:end="31:73">table</name></name></expr></argument>, <argument pos:start="31:76" pos:end="31:108"><expr pos:start="31:76" pos:end="31:108"><name pos:start="31:76" pos:end="31:108">CHROMA422_DC_COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="31:111" pos:end="31:111"><expr pos:start="31:111" pos:end="31:111"><literal type="number" pos:start="31:111" pos:end="31:111">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:19">total_coeff</name><operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:32">coeff_token</name><operator pos:start="33:33" pos:end="33:34">&gt;&gt;</operator><literal type="number" pos:start="33:35" pos:end="33:35">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="35:6" pos:end="55:5">else<block pos:start="35:10" pos:end="55:5">{<block_content pos:start="37:9" pos:end="53:9">

        <if_stmt pos:start="37:9" pos:end="53:9"><if pos:start="37:9" pos:end="45:9">if<condition pos:start="37:11" pos:end="37:36">(<expr pos:start="37:12" pos:end="37:35"><name pos:start="37:12" pos:end="37:12">n</name> <operator pos:start="37:14" pos:end="37:15">&gt;=</operator> <name pos:start="37:17" pos:end="37:35">LUMA_DC_BLOCK_INDEX</name></expr>)</condition><block pos:start="37:37" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:40">

            <expr_stmt pos:start="39:13" pos:end="39:82"><expr pos:start="39:13" pos:end="39:81"><name pos:start="39:13" pos:end="39:23">total_coeff</name><operator pos:start="39:24" pos:end="39:24">=</operator> <call pos:start="39:26" pos:end="39:81"><name pos:start="39:26" pos:end="39:44">pred_non_zero_count</name><argument_list pos:start="39:45" pos:end="39:81">(<argument pos:start="39:46" pos:end="39:46"><expr pos:start="39:46" pos:end="39:46"><name pos:start="39:46" pos:end="39:46">h</name></expr></argument>, <argument pos:start="39:49" pos:end="39:50"><expr pos:start="39:49" pos:end="39:50"><name pos:start="39:49" pos:end="39:50">sl</name></expr></argument>, <argument pos:start="39:53" pos:end="39:80"><expr pos:start="39:53" pos:end="39:80"><operator pos:start="39:53" pos:end="39:53">(</operator><name pos:start="39:54" pos:end="39:54">n</name> <operator pos:start="39:56" pos:end="39:56">-</operator> <name pos:start="39:58" pos:end="39:76">LUMA_DC_BLOCK_INDEX</name><operator pos:start="39:77" pos:end="39:77">)</operator><operator pos:start="39:78" pos:end="39:78">*</operator><literal type="number" pos:start="39:79" pos:end="39:80">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:126"><expr pos:start="41:13" pos:end="41:125"><name pos:start="41:13" pos:end="41:23">coeff_token</name><operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:125"><name pos:start="41:26" pos:end="41:33">get_vlc2</name><argument_list pos:start="41:34" pos:end="41:125">(<argument pos:start="41:35" pos:end="41:36"><expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">gb</name></expr></argument>, <argument pos:start="41:39" pos:end="41:99"><expr pos:start="41:39" pos:end="41:99"><name pos:start="41:39" pos:end="41:93"><name pos:start="41:39" pos:end="41:53">coeff_token_vlc</name><index pos:start="41:54" pos:end="41:93">[ <expr pos:start="41:56" pos:end="41:91"><name pos:start="41:56" pos:end="41:91"><name pos:start="41:56" pos:end="41:78">coeff_token_table_index</name><index pos:start="41:79" pos:end="41:91">[<expr pos:start="41:80" pos:end="41:90"><name pos:start="41:80" pos:end="41:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="41:94" pos:end="41:94">.</operator><name pos:start="41:95" pos:end="41:99">table</name></expr></argument>, <argument pos:start="41:102" pos:end="41:121"><expr pos:start="41:102" pos:end="41:121"><name pos:start="41:102" pos:end="41:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="41:124" pos:end="41:124"><expr pos:start="41:124" pos:end="41:124"><literal type="number" pos:start="41:124" pos:end="41:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:40"><expr pos:start="43:13" pos:end="43:39"><name pos:start="43:13" pos:end="43:23">total_coeff</name><operator pos:start="43:24" pos:end="43:24">=</operator> <name pos:start="43:26" pos:end="43:36">coeff_token</name><operator pos:start="43:37" pos:end="43:38">&gt;&gt;</operator><literal type="number" pos:start="43:39" pos:end="43:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="45:10" pos:end="53:9">else<block pos:start="45:14" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:40">

            <expr_stmt pos:start="47:13" pos:end="47:55"><expr pos:start="47:13" pos:end="47:54"><name pos:start="47:13" pos:end="47:23">total_coeff</name><operator pos:start="47:24" pos:end="47:24">=</operator> <call pos:start="47:26" pos:end="47:54"><name pos:start="47:26" pos:end="47:44">pred_non_zero_count</name><argument_list pos:start="47:45" pos:end="47:54">(<argument pos:start="47:46" pos:end="47:46"><expr pos:start="47:46" pos:end="47:46"><name pos:start="47:46" pos:end="47:46">h</name></expr></argument>, <argument pos:start="47:49" pos:end="47:50"><expr pos:start="47:49" pos:end="47:50"><name pos:start="47:49" pos:end="47:50">sl</name></expr></argument>, <argument pos:start="47:53" pos:end="47:53"><expr pos:start="47:53" pos:end="47:53"><name pos:start="47:53" pos:end="47:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:126"><expr pos:start="49:13" pos:end="49:125"><name pos:start="49:13" pos:end="49:23">coeff_token</name><operator pos:start="49:24" pos:end="49:24">=</operator> <call pos:start="49:26" pos:end="49:125"><name pos:start="49:26" pos:end="49:33">get_vlc2</name><argument_list pos:start="49:34" pos:end="49:125">(<argument pos:start="49:35" pos:end="49:36"><expr pos:start="49:35" pos:end="49:36"><name pos:start="49:35" pos:end="49:36">gb</name></expr></argument>, <argument pos:start="49:39" pos:end="49:99"><expr pos:start="49:39" pos:end="49:99"><name pos:start="49:39" pos:end="49:93"><name pos:start="49:39" pos:end="49:53">coeff_token_vlc</name><index pos:start="49:54" pos:end="49:93">[ <expr pos:start="49:56" pos:end="49:91"><name pos:start="49:56" pos:end="49:91"><name pos:start="49:56" pos:end="49:78">coeff_token_table_index</name><index pos:start="49:79" pos:end="49:91">[<expr pos:start="49:80" pos:end="49:90"><name pos:start="49:80" pos:end="49:90">total_coeff</name></expr>]</index></name></expr> ]</index></name><operator pos:start="49:94" pos:end="49:94">.</operator><name pos:start="49:95" pos:end="49:99">table</name></expr></argument>, <argument pos:start="49:102" pos:end="49:121"><expr pos:start="49:102" pos:end="49:121"><name pos:start="49:102" pos:end="49:121">COEFF_TOKEN_VLC_BITS</name></expr></argument>, <argument pos:start="49:124" pos:end="49:124"><expr pos:start="49:124" pos:end="49:124"><literal type="number" pos:start="49:124" pos:end="49:124">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:40"><expr pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:23">total_coeff</name><operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:36">coeff_token</name><operator pos:start="51:37" pos:end="51:38">&gt;&gt;</operator><literal type="number" pos:start="51:39" pos:end="51:39">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:53"><expr pos:start="57:5" pos:end="57:52"><name pos:start="57:5" pos:end="57:38"><name pos:start="57:5" pos:end="57:6">sl</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:28">non_zero_count_cache</name><index pos:start="57:29" pos:end="57:38">[<expr pos:start="57:30" pos:end="57:37"><name pos:start="57:30" pos:end="57:37"><name pos:start="57:30" pos:end="57:34">scan8</name><index pos:start="57:35" pos:end="57:37">[<expr pos:start="57:36" pos:end="57:36"><name pos:start="57:36" pos:end="57:36">n</name></expr>]</index></name></expr>]</index></name> <operator pos:start="57:40" pos:end="57:40">=</operator> <name pos:start="57:42" pos:end="57:52">total_coeff</name></expr>;</expr_stmt>



    <comment type="line" pos:start="61:5" pos:end="61:30">//FIXME set last_non_zero?</comment>



    <if_stmt pos:start="65:5" pos:end="67:17"><if pos:start="65:5" pos:end="67:17">if<condition pos:start="65:7" pos:end="65:22">(<expr pos:start="65:8" pos:end="65:21"><name pos:start="65:8" pos:end="65:18">total_coeff</name><operator pos:start="65:19" pos:end="65:20">==</operator><literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:17"><block_content pos:start="67:9" pos:end="67:17">

        <return pos:start="67:9" pos:end="67:17">return <expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if<condition pos:start="69:7" pos:end="69:41">(<expr pos:start="69:8" pos:end="69:40"><name pos:start="69:8" pos:end="69:18">total_coeff</name> <operator pos:start="69:20" pos:end="69:20">&gt;</operator> <operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:30">unsigned</name><operator pos:start="69:31" pos:end="69:31">)</operator><name pos:start="69:32" pos:end="69:40">max_coeff</name></expr>)</condition> <block pos:start="69:43" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:121"><expr pos:start="71:9" pos:end="71:120"><call pos:start="71:9" pos:end="71:120"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:120">(<argument pos:start="71:16" pos:end="71:23"><expr pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:23"><name pos:start="71:16" pos:end="71:16">h</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:23">avctx</name></name></expr></argument>, <argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:40" pos:end="71:86"><expr pos:start="71:40" pos:end="71:86"><literal type="string" pos:start="71:40" pos:end="71:86">"corrupted macroblock %d %d (total_coeff=%d)\n"</literal></expr></argument>, <argument pos:start="71:89" pos:end="71:96"><expr pos:start="71:89" pos:end="71:96"><name pos:start="71:89" pos:end="71:96"><name pos:start="71:89" pos:end="71:90">sl</name><operator pos:start="71:91" pos:end="71:92">-&gt;</operator><name pos:start="71:93" pos:end="71:96">mb_x</name></name></expr></argument>, <argument pos:start="71:99" pos:end="71:106"><expr pos:start="71:99" pos:end="71:106"><name pos:start="71:99" pos:end="71:106"><name pos:start="71:99" pos:end="71:100">sl</name><operator pos:start="71:101" pos:end="71:102">-&gt;</operator><name pos:start="71:103" pos:end="71:106">mb_y</name></name></expr></argument>, <argument pos:start="71:109" pos:end="71:119"><expr pos:start="71:109" pos:end="71:119"><name pos:start="71:109" pos:end="71:119">total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:17">trailing_ones</name><operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:30">coeff_token</name><operator pos:start="79:31" pos:end="79:31">&amp;</operator><literal type="number" pos:start="79:32" pos:end="79:32">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:77"><expr pos:start="81:5" pos:end="81:76"><call pos:start="81:5" pos:end="81:76"><name pos:start="81:5" pos:end="81:11">ff_tlog</name><argument_list pos:start="81:12" pos:end="81:76">(<argument pos:start="81:13" pos:end="81:20"><expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:13">h</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:20">avctx</name></name></expr></argument>, <argument pos:start="81:23" pos:end="81:47"><expr pos:start="81:23" pos:end="81:47"><literal type="string" pos:start="81:23" pos:end="81:47">"trailing:%d, total:%d\n"</literal></expr></argument>, <argument pos:start="81:50" pos:end="81:62"><expr pos:start="81:50" pos:end="81:62"><name pos:start="81:50" pos:end="81:62">trailing_ones</name></expr></argument>, <argument pos:start="81:65" pos:end="81:75"><expr pos:start="81:65" pos:end="81:75"><name pos:start="81:65" pos:end="81:75">total_coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><call pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:10">assert</name><argument_list pos:start="83:11" pos:end="83:27">(<argument pos:start="83:12" pos:end="83:26"><expr pos:start="83:12" pos:end="83:26"><name pos:start="83:12" pos:end="83:22">total_coeff</name><operator pos:start="83:23" pos:end="83:24">&lt;=</operator><literal type="number" pos:start="83:25" pos:end="83:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:25"><expr pos:start="87:5" pos:end="87:24"><name pos:start="87:5" pos:end="87:5">i</name> <operator pos:start="87:7" pos:end="87:7">=</operator> <call pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:17">show_bits</name><argument_list pos:start="87:18" pos:end="87:24">(<argument pos:start="87:19" pos:end="87:20"><expr pos:start="87:19" pos:end="87:20"><name pos:start="87:19" pos:end="87:20">gb</name></expr></argument>, <argument pos:start="87:23" pos:end="87:23"><expr pos:start="87:23" pos:end="87:23"><literal type="number" pos:start="87:23" pos:end="87:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><call pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:13">skip_bits</name><argument_list pos:start="89:14" pos:end="89:32">(<argument pos:start="89:15" pos:end="89:16"><expr pos:start="89:15" pos:end="89:16"><name pos:start="89:15" pos:end="89:16">gb</name></expr></argument>, <argument pos:start="89:19" pos:end="89:31"><expr pos:start="89:19" pos:end="89:31"><name pos:start="89:19" pos:end="89:31">trailing_ones</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:9">level</name><index pos:start="91:10" pos:end="91:12">[<expr pos:start="91:11" pos:end="91:11"><literal type="number" pos:start="91:11" pos:end="91:11">0</literal></expr>]</index></name> <operator pos:start="91:14" pos:end="91:14">=</operator> <literal type="number" pos:start="91:16" pos:end="91:17">1</literal><operator pos:start="91:17" pos:end="91:17">-</operator><operator pos:start="91:18" pos:end="91:18">(</operator><operator pos:start="91:19" pos:end="91:19">(</operator><name pos:start="91:20" pos:end="91:20">i</name><operator pos:start="91:21" pos:end="91:21">&amp;</operator><literal type="number" pos:start="91:22" pos:end="91:22">4</literal><operator pos:start="91:23" pos:end="91:23">)</operator><operator pos:start="91:24" pos:end="91:25">&gt;&gt;</operator><literal type="number" pos:start="91:26" pos:end="91:26">1</literal><operator pos:start="91:27" pos:end="91:27">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:12"><name pos:start="93:5" pos:end="93:9">level</name><index pos:start="93:10" pos:end="93:12">[<expr pos:start="93:11" pos:end="93:11"><literal type="number" pos:start="93:11" pos:end="93:11">1</literal></expr>]</index></name> <operator pos:start="93:14" pos:end="93:14">=</operator> <literal type="number" pos:start="93:16" pos:end="93:17">1</literal><operator pos:start="93:17" pos:end="93:17">-</operator><operator pos:start="93:18" pos:end="93:18">(</operator><operator pos:start="93:19" pos:end="93:19">(</operator><name pos:start="93:20" pos:end="93:20">i</name><operator pos:start="93:21" pos:end="93:21">&amp;</operator><literal type="number" pos:start="93:22" pos:end="93:22">2</literal><operator pos:start="93:23" pos:end="93:23">)</operator>   <operator pos:start="93:27" pos:end="93:27">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:28"><expr pos:start="95:5" pos:end="95:27"><name pos:start="95:5" pos:end="95:12"><name pos:start="95:5" pos:end="95:9">level</name><index pos:start="95:10" pos:end="95:12">[<expr pos:start="95:11" pos:end="95:11"><literal type="number" pos:start="95:11" pos:end="95:11">2</literal></expr>]</index></name> <operator pos:start="95:14" pos:end="95:14">=</operator> <literal type="number" pos:start="95:16" pos:end="95:17">1</literal><operator pos:start="95:17" pos:end="95:17">-</operator><operator pos:start="95:18" pos:end="95:18">(</operator><operator pos:start="95:19" pos:end="95:19">(</operator><name pos:start="95:20" pos:end="95:20">i</name><operator pos:start="95:21" pos:end="95:21">&amp;</operator><literal type="number" pos:start="95:22" pos:end="95:22">1</literal><operator pos:start="95:23" pos:end="95:23">)</operator><operator pos:start="95:24" pos:end="95:25">&lt;&lt;</operator><literal type="number" pos:start="95:26" pos:end="95:26">1</literal><operator pos:start="95:27" pos:end="95:27">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="241:5"><if pos:start="99:5" pos:end="241:5">if<condition pos:start="99:7" pos:end="99:33">(<expr pos:start="99:8" pos:end="99:32"><name pos:start="99:8" pos:end="99:20">trailing_ones</name><operator pos:start="99:21" pos:end="99:21">&lt;</operator><name pos:start="99:22" pos:end="99:32">total_coeff</name></expr>)</condition> <block pos:start="99:35" pos:end="241:5">{<block_content pos:start="101:9" pos:end="239:9">

        <decl_stmt pos:start="101:9" pos:end="101:25"><decl pos:start="101:9" pos:end="101:16"><type pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">int</name></type> <name pos:start="101:13" pos:end="101:16">mask</name></decl>, <decl pos:start="101:19" pos:end="101:24"><type ref="prev" pos:start="101:9" pos:end="101:11"/><name pos:start="101:19" pos:end="101:24">prefix</name></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:65"><decl pos:start="103:9" pos:end="103:64"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:25">suffix_length</name> <init pos:start="103:27" pos:end="103:64">= <expr pos:start="103:29" pos:end="103:64"><name pos:start="103:29" pos:end="103:39">total_coeff</name> <operator pos:start="103:41" pos:end="103:41">&gt;</operator> <literal type="number" pos:start="103:43" pos:end="103:44">10</literal> <operator pos:start="103:46" pos:end="103:46">&amp;</operator> <name pos:start="103:48" pos:end="103:60">trailing_ones</name> <operator pos:start="103:62" pos:end="103:62">&lt;</operator> <literal type="number" pos:start="103:64" pos:end="103:64">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:49"><decl pos:start="105:9" pos:end="105:48"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:17">bitsi</name><init pos:start="105:18" pos:end="105:48">= <expr pos:start="105:20" pos:end="105:48"><call pos:start="105:20" pos:end="105:48"><name pos:start="105:20" pos:end="105:28">show_bits</name><argument_list pos:start="105:29" pos:end="105:48">(<argument pos:start="105:30" pos:end="105:31"><expr pos:start="105:30" pos:end="105:31"><name pos:start="105:30" pos:end="105:31">gb</name></expr></argument>, <argument pos:start="105:34" pos:end="105:47"><expr pos:start="105:34" pos:end="105:47"><name pos:start="105:34" pos:end="105:47">LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="107:9" pos:end="107:65"><decl pos:start="107:9" pos:end="107:64"><type pos:start="107:9" pos:end="107:11"><name pos:start="107:9" pos:end="107:11">int</name></type> <name pos:start="107:13" pos:end="107:22">level_code</name><init pos:start="107:23" pos:end="107:64">= <expr pos:start="107:25" pos:end="107:64"><name pos:start="107:25" pos:end="107:64"><name pos:start="107:25" pos:end="107:39">cavlc_level_tab</name><index pos:start="107:40" pos:end="107:54">[<expr pos:start="107:41" pos:end="107:53"><name pos:start="107:41" pos:end="107:53">suffix_length</name></expr>]</index><index pos:start="107:55" pos:end="107:61">[<expr pos:start="107:56" pos:end="107:60"><name pos:start="107:56" pos:end="107:60">bitsi</name></expr>]</index><index pos:start="107:62" pos:end="107:64">[<expr pos:start="107:63" pos:end="107:63"><literal type="number" pos:start="107:63" pos:end="107:63">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:64"><expr pos:start="111:9" pos:end="111:63"><call pos:start="111:9" pos:end="111:63"><name pos:start="111:9" pos:end="111:17">skip_bits</name><argument_list pos:start="111:18" pos:end="111:63">(<argument pos:start="111:19" pos:end="111:20"><expr pos:start="111:19" pos:end="111:20"><name pos:start="111:19" pos:end="111:20">gb</name></expr></argument>, <argument pos:start="111:23" pos:end="111:62"><expr pos:start="111:23" pos:end="111:62"><name pos:start="111:23" pos:end="111:62"><name pos:start="111:23" pos:end="111:37">cavlc_level_tab</name><index pos:start="111:38" pos:end="111:52">[<expr pos:start="111:39" pos:end="111:51"><name pos:start="111:39" pos:end="111:51">suffix_length</name></expr>]</index><index pos:start="111:53" pos:end="111:59">[<expr pos:start="111:54" pos:end="111:58"><name pos:start="111:54" pos:end="111:58">bitsi</name></expr>]</index><index pos:start="111:60" pos:end="111:62">[<expr pos:start="111:61" pos:end="111:61"><literal type="number" pos:start="111:61" pos:end="111:61">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="187:9"><if pos:start="113:9" pos:end="177:9">if<condition pos:start="113:11" pos:end="113:29">(<expr pos:start="113:12" pos:end="113:28"><name pos:start="113:12" pos:end="113:21">level_code</name> <operator pos:start="113:23" pos:end="113:24">&gt;=</operator> <literal type="number" pos:start="113:26" pos:end="113:28">100</literal></expr>)</condition><block pos:start="113:30" pos:end="177:9">{<block_content pos:start="115:13" pos:end="175:70">

            <expr_stmt pos:start="115:13" pos:end="115:37"><expr pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:18">prefix</name><operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:30">level_code</name> <operator pos:start="115:32" pos:end="115:32">-</operator> <literal type="number" pos:start="115:34" pos:end="115:36">100</literal></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="119:47"><if pos:start="117:13" pos:end="119:47">if<condition pos:start="117:15" pos:end="117:40">(<expr pos:start="117:16" pos:end="117:39"><name pos:start="117:16" pos:end="117:21">prefix</name> <operator pos:start="117:23" pos:end="117:24">==</operator> <name pos:start="117:26" pos:end="117:39">LEVEL_TAB_BITS</name></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:47"><block_content pos:start="119:17" pos:end="119:47">

                <expr_stmt pos:start="119:17" pos:end="119:47"><expr pos:start="119:17" pos:end="119:46"><name pos:start="119:17" pos:end="119:22">prefix</name> <operator pos:start="119:24" pos:end="119:25">+=</operator> <call pos:start="119:27" pos:end="119:46"><name pos:start="119:27" pos:end="119:42">get_level_prefix</name><argument_list pos:start="119:43" pos:end="119:46">(<argument pos:start="119:44" pos:end="119:45"><expr pos:start="119:44" pos:end="119:45"><name pos:start="119:44" pos:end="119:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <comment type="line" pos:start="123:13" pos:end="123:65">//first coefficient has suffix_length equal to 0 or 1</comment>

            <if_stmt pos:start="125:13" pos:end="163:13"><if pos:start="125:13" pos:end="135:13">if<condition pos:start="125:15" pos:end="125:25">(<expr pos:start="125:16" pos:end="125:24"><name pos:start="125:16" pos:end="125:21">prefix</name><operator pos:start="125:22" pos:end="125:22">&lt;</operator><literal type="number" pos:start="125:23" pos:end="125:24">14</literal></expr>)</condition><block pos:start="125:26" pos:end="135:13">{<block_content pos:start="127:17" pos:end="133:39"> <comment type="line" pos:start="125:28" pos:end="125:86">//FIXME try to build a large unified VLC table for all this</comment>

                <if_stmt pos:start="127:17" pos:end="133:39"><if pos:start="127:17" pos:end="129:60">if<condition pos:start="127:19" pos:end="127:33">(<expr pos:start="127:20" pos:end="127:32"><name pos:start="127:20" pos:end="127:32">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:60"><block_content pos:start="129:21" pos:end="129:60">

                    <expr_stmt pos:start="129:21" pos:end="129:60"><expr pos:start="129:21" pos:end="129:59"><name pos:start="129:21" pos:end="129:30">level_code</name><operator pos:start="129:31" pos:end="129:31">=</operator> <operator pos:start="129:33" pos:end="129:33">(</operator><name pos:start="129:34" pos:end="129:39">prefix</name><operator pos:start="129:40" pos:end="129:41">&lt;&lt;</operator><literal type="number" pos:start="129:42" pos:end="129:42">1</literal><operator pos:start="129:43" pos:end="129:43">)</operator> <operator pos:start="129:45" pos:end="129:45">+</operator> <call pos:start="129:47" pos:end="129:59"><name pos:start="129:47" pos:end="129:55">get_bits1</name><argument_list pos:start="129:56" pos:end="129:59">(<argument pos:start="129:57" pos:end="129:58"><expr pos:start="129:57" pos:end="129:58"><name pos:start="129:57" pos:end="129:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="129:62" pos:end="129:67">//part</comment>

                <else pos:start="131:17" pos:end="133:39">else<block type="pseudo" pos:start="133:21" pos:end="133:39"><block_content pos:start="133:21" pos:end="133:39">

                    <expr_stmt pos:start="133:21" pos:end="133:39"><expr pos:start="133:21" pos:end="133:38"><name pos:start="133:21" pos:end="133:30">level_code</name><operator pos:start="133:31" pos:end="133:31">=</operator> <name pos:start="133:33" pos:end="133:38">prefix</name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="133:41" pos:end="133:46">//part</comment>

            </block_content>}</block></if><if type="elseif" pos:start="135:14" pos:end="145:13">else if<condition pos:start="135:21" pos:end="135:32">(<expr pos:start="135:22" pos:end="135:31"><name pos:start="135:22" pos:end="135:27">prefix</name><operator pos:start="135:28" pos:end="135:29">==</operator><literal type="number" pos:start="135:30" pos:end="135:31">14</literal></expr>)</condition><block pos:start="135:33" pos:end="145:13">{<block_content pos:start="137:17" pos:end="143:57">

                <if_stmt pos:start="137:17" pos:end="143:57"><if pos:start="137:17" pos:end="139:60">if<condition pos:start="137:19" pos:end="137:33">(<expr pos:start="137:20" pos:end="137:32"><name pos:start="137:20" pos:end="137:32">suffix_length</name></expr>)</condition><block type="pseudo" pos:start="139:21" pos:end="139:60"><block_content pos:start="139:21" pos:end="139:60">

                    <expr_stmt pos:start="139:21" pos:end="139:60"><expr pos:start="139:21" pos:end="139:59"><name pos:start="139:21" pos:end="139:30">level_code</name><operator pos:start="139:31" pos:end="139:31">=</operator> <operator pos:start="139:33" pos:end="139:33">(</operator><name pos:start="139:34" pos:end="139:39">prefix</name><operator pos:start="139:40" pos:end="139:41">&lt;&lt;</operator><literal type="number" pos:start="139:42" pos:end="139:42">1</literal><operator pos:start="139:43" pos:end="139:43">)</operator> <operator pos:start="139:45" pos:end="139:45">+</operator> <call pos:start="139:47" pos:end="139:59"><name pos:start="139:47" pos:end="139:55">get_bits1</name><argument_list pos:start="139:56" pos:end="139:59">(<argument pos:start="139:57" pos:end="139:58"><expr pos:start="139:57" pos:end="139:58"><name pos:start="139:57" pos:end="139:58">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="139:62" pos:end="139:67">//part</comment>

                <else pos:start="141:17" pos:end="143:57">else<block type="pseudo" pos:start="143:21" pos:end="143:57"><block_content pos:start="143:21" pos:end="143:57">

                    <expr_stmt pos:start="143:21" pos:end="143:57"><expr pos:start="143:21" pos:end="143:56"><name pos:start="143:21" pos:end="143:30">level_code</name><operator pos:start="143:31" pos:end="143:31">=</operator> <name pos:start="143:33" pos:end="143:38">prefix</name> <operator pos:start="143:40" pos:end="143:40">+</operator> <call pos:start="143:42" pos:end="143:56"><name pos:start="143:42" pos:end="143:49">get_bits</name><argument_list pos:start="143:50" pos:end="143:56">(<argument pos:start="143:51" pos:end="143:52"><expr pos:start="143:51" pos:end="143:52"><name pos:start="143:51" pos:end="143:52">gb</name></expr></argument>, <argument pos:start="143:55" pos:end="143:55"><expr pos:start="143:55" pos:end="143:55"><literal type="number" pos:start="143:55" pos:end="143:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="143:59" pos:end="143:64">//part</comment>

            </block_content>}</block></if><else pos:start="145:14" pos:end="163:13">else<block pos:start="145:18" pos:end="163:13">{<block_content pos:start="147:17" pos:end="161:17">

                <expr_stmt pos:start="147:17" pos:end="147:56"><expr pos:start="147:17" pos:end="147:55"><name pos:start="147:17" pos:end="147:26">level_code</name><operator pos:start="147:27" pos:end="147:27">=</operator> <literal type="number" pos:start="147:29" pos:end="147:32">30</literal> <operator pos:start="147:32" pos:end="147:32">+</operator> <call pos:start="147:34" pos:end="147:55"><name pos:start="147:34" pos:end="147:41">get_bits</name><argument_list pos:start="147:42" pos:end="147:55">(<argument pos:start="147:43" pos:end="147:44"><expr pos:start="147:43" pos:end="147:44"><name pos:start="147:43" pos:end="147:44">gb</name></expr></argument>, <argument pos:start="147:47" pos:end="147:54"><expr pos:start="147:47" pos:end="147:54"><name pos:start="147:47" pos:end="147:52">prefix</name><operator pos:start="147:53" pos:end="147:53">-</operator><literal type="number" pos:start="147:54" pos:end="147:54">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="147:58" pos:end="147:63">//part</comment>

                <if_stmt pos:start="149:17" pos:end="161:17"><if pos:start="149:17" pos:end="161:17">if<condition pos:start="149:19" pos:end="149:30">(<expr pos:start="149:20" pos:end="149:29"><name pos:start="149:20" pos:end="149:25">prefix</name><operator pos:start="149:26" pos:end="149:27">&gt;=</operator><literal type="number" pos:start="149:28" pos:end="149:29">16</literal></expr>)</condition><block pos:start="149:31" pos:end="161:17">{<block_content pos:start="151:21" pos:end="159:55">

                    <if_stmt pos:start="151:21" pos:end="157:21"><if pos:start="151:21" pos:end="157:21">if<condition pos:start="151:23" pos:end="151:37">(<expr pos:start="151:24" pos:end="151:36"><name pos:start="151:24" pos:end="151:29">prefix</name> <operator pos:start="151:31" pos:end="151:31">&gt;</operator> <literal type="number" pos:start="151:33" pos:end="151:35">25</literal><operator pos:start="151:35" pos:end="151:35">+</operator><literal type="number" pos:start="151:36" pos:end="151:36">3</literal></expr>)</condition><block pos:start="151:38" pos:end="157:21">{<block_content pos:start="153:25" pos:end="155:34">

                        <expr_stmt pos:start="153:25" pos:end="153:81"><expr pos:start="153:25" pos:end="153:80"><call pos:start="153:25" pos:end="153:80"><name pos:start="153:25" pos:end="153:30">av_log</name><argument_list pos:start="153:31" pos:end="153:80">(<argument pos:start="153:32" pos:end="153:39"><expr pos:start="153:32" pos:end="153:39"><name pos:start="153:32" pos:end="153:39"><name pos:start="153:32" pos:end="153:32">h</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:39">avctx</name></name></expr></argument>, <argument pos:start="153:42" pos:end="153:53"><expr pos:start="153:42" pos:end="153:53"><name pos:start="153:42" pos:end="153:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:56" pos:end="153:79"><expr pos:start="153:56" pos:end="153:79"><literal type="string" pos:start="153:56" pos:end="153:79">"Invalid level prefix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="155:25" pos:end="155:34">return <expr pos:start="155:32" pos:end="155:33"><operator pos:start="155:32" pos:end="155:32">-</operator><literal type="number" pos:start="155:33" pos:end="155:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:55"><expr pos:start="159:21" pos:end="159:54"><name pos:start="159:21" pos:end="159:30">level_code</name> <operator pos:start="159:32" pos:end="159:33">+=</operator> <operator pos:start="159:35" pos:end="159:35">(</operator><literal type="number" pos:start="159:36" pos:end="159:36">1</literal><operator pos:start="159:37" pos:end="159:38">&lt;&lt;</operator><operator pos:start="159:39" pos:end="159:39">(</operator><name pos:start="159:40" pos:end="159:45">prefix</name><operator pos:start="159:46" pos:end="159:46">-</operator><literal type="number" pos:start="159:47" pos:end="159:47">3</literal><operator pos:start="159:48" pos:end="159:48">)</operator><operator pos:start="159:49" pos:end="159:49">)</operator><operator pos:start="159:50" pos:end="159:50">-</operator><literal type="number" pos:start="159:51" pos:end="159:54">4096</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="167:13" pos:end="167:50"><if pos:start="167:13" pos:end="167:50">if<condition pos:start="167:15" pos:end="167:33">(<expr pos:start="167:16" pos:end="167:32"><name pos:start="167:16" pos:end="167:28">trailing_ones</name> <operator pos:start="167:30" pos:end="167:30">&lt;</operator> <literal type="number" pos:start="167:32" pos:end="167:32">3</literal></expr>)</condition><block type="pseudo" pos:start="167:35" pos:end="167:50"><block_content pos:start="167:35" pos:end="167:50"> <expr_stmt pos:start="167:35" pos:end="167:50"><expr pos:start="167:35" pos:end="167:49"><name pos:start="167:35" pos:end="167:44">level_code</name> <operator pos:start="167:46" pos:end="167:47">+=</operator> <literal type="number" pos:start="167:49" pos:end="167:49">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:30"><expr pos:start="171:13" pos:end="171:29"><name pos:start="171:13" pos:end="171:25">suffix_length</name> <operator pos:start="171:27" pos:end="171:27">=</operator> <literal type="number" pos:start="171:29" pos:end="171:29">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:34"><expr pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:16">mask</name><operator pos:start="173:17" pos:end="173:17">=</operator> <operator pos:start="173:19" pos:end="173:19">-</operator><operator pos:start="173:20" pos:end="173:20">(</operator><name pos:start="173:21" pos:end="173:30">level_code</name><operator pos:start="173:31" pos:end="173:31">&amp;</operator><literal type="number" pos:start="173:32" pos:end="173:32">1</literal><operator pos:start="173:33" pos:end="173:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:70"><expr pos:start="175:13" pos:end="175:69"><name pos:start="175:13" pos:end="175:32"><name pos:start="175:13" pos:end="175:17">level</name><index pos:start="175:18" pos:end="175:32">[<expr pos:start="175:19" pos:end="175:31"><name pos:start="175:19" pos:end="175:31">trailing_ones</name></expr>]</index></name><operator pos:start="175:33" pos:end="175:33">=</operator> <operator pos:start="175:35" pos:end="175:35">(</operator><operator pos:start="175:36" pos:end="175:36">(</operator><operator pos:start="175:37" pos:end="175:37">(</operator><literal type="number" pos:start="175:38" pos:end="175:39">2</literal><operator pos:start="175:39" pos:end="175:39">+</operator><name pos:start="175:40" pos:end="175:49">level_code</name><operator pos:start="175:50" pos:end="175:50">)</operator><operator pos:start="175:51" pos:end="175:52">&gt;&gt;</operator><literal type="number" pos:start="175:53" pos:end="175:53">1</literal><operator pos:start="175:54" pos:end="175:54">)</operator> <operator pos:start="175:56" pos:end="175:56">^</operator> <name pos:start="175:58" pos:end="175:61">mask</name><operator pos:start="175:62" pos:end="175:62">)</operator> <operator pos:start="175:64" pos:end="175:64">-</operator> <name pos:start="175:66" pos:end="175:69">mask</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="177:10" pos:end="187:9">else<block pos:start="177:14" pos:end="187:9">{<block_content pos:start="179:13" pos:end="185:45">

            <expr_stmt pos:start="179:13" pos:end="179:70"><expr pos:start="179:13" pos:end="179:69"><name pos:start="179:13" pos:end="179:22">level_code</name> <operator pos:start="179:24" pos:end="179:25">+=</operator> <operator pos:start="179:27" pos:end="179:27">(</operator><operator pos:start="179:28" pos:end="179:28">(</operator><name pos:start="179:29" pos:end="179:38">level_code</name><operator pos:start="179:39" pos:end="179:40">&gt;&gt;</operator><literal type="number" pos:start="179:41" pos:end="179:42">31</literal><operator pos:start="179:43" pos:end="179:43">)</operator><operator pos:start="179:44" pos:end="179:44">|</operator><literal type="number" pos:start="179:45" pos:end="179:45">1</literal><operator pos:start="179:46" pos:end="179:46">)</operator> <operator pos:start="179:48" pos:end="179:48">&amp;</operator> <operator pos:start="179:50" pos:end="179:50">-</operator><operator pos:start="179:51" pos:end="179:51">(</operator><name pos:start="179:52" pos:end="179:64">trailing_ones</name> <operator pos:start="179:66" pos:end="179:66">&lt;</operator> <literal type="number" pos:start="179:68" pos:end="179:68">3</literal><operator pos:start="179:69" pos:end="179:69">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:55"><expr pos:start="183:13" pos:end="183:54"><name pos:start="183:13" pos:end="183:25">suffix_length</name> <operator pos:start="183:27" pos:end="183:27">=</operator> <literal type="number" pos:start="183:29" pos:end="183:31">1</literal> <operator pos:start="183:31" pos:end="183:31">+</operator> <operator pos:start="183:33" pos:end="183:33">(</operator><name pos:start="183:34" pos:end="183:43">level_code</name> <operator pos:start="183:45" pos:end="183:45">+</operator> <literal type="number" pos:start="183:47" pos:end="183:48">3U</literal> <operator pos:start="183:50" pos:end="183:50">&gt;</operator> <literal type="number" pos:start="183:52" pos:end="183:53">6U</literal><operator pos:start="183:54" pos:end="183:54">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:45"><expr pos:start="185:13" pos:end="185:44"><name pos:start="185:13" pos:end="185:32"><name pos:start="185:13" pos:end="185:17">level</name><index pos:start="185:18" pos:end="185:32">[<expr pos:start="185:19" pos:end="185:31"><name pos:start="185:19" pos:end="185:31">trailing_ones</name></expr>]</index></name><operator pos:start="185:33" pos:end="185:33">=</operator> <name pos:start="185:35" pos:end="185:44">level_code</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="191:9" pos:end="191:55">//remaining coefficients have suffix_length &gt; 0</comment>

        <for pos:start="193:9" pos:end="239:9">for<control pos:start="193:12" pos:end="193:48">(<init pos:start="193:13" pos:end="193:30"><expr pos:start="193:13" pos:end="193:29"><name pos:start="193:13" pos:end="193:13">i</name><operator pos:start="193:14" pos:end="193:14">=</operator><name pos:start="193:15" pos:end="193:27">trailing_ones</name><operator pos:start="193:28" pos:end="193:28">+</operator><literal type="number" pos:start="193:29" pos:end="193:29">1</literal></expr>;</init><condition pos:start="193:31" pos:end="193:44"><expr pos:start="193:31" pos:end="193:43"><name pos:start="193:31" pos:end="193:31">i</name><operator pos:start="193:32" pos:end="193:32">&lt;</operator><name pos:start="193:33" pos:end="193:43">total_coeff</name></expr>;</condition><incr pos:start="193:45" pos:end="193:47"><expr pos:start="193:45" pos:end="193:47"><name pos:start="193:45" pos:end="193:45">i</name><operator pos:start="193:46" pos:end="193:47">++</operator></expr></incr>)</control> <block pos:start="193:50" pos:end="239:9">{<block_content pos:start="195:13" pos:end="237:102">

            <decl_stmt pos:start="195:13" pos:end="195:82"><decl pos:start="195:13" pos:end="195:81"><type pos:start="195:13" pos:end="195:37"><specifier pos:start="195:13" pos:end="195:18">static</specifier> <specifier pos:start="195:20" pos:end="195:24">const</specifier> <name pos:start="195:26" pos:end="195:33">unsigned</name> <name pos:start="195:35" pos:end="195:37">int</name></type> <name pos:start="195:39" pos:end="195:53"><name pos:start="195:39" pos:end="195:50">suffix_limit</name><index pos:start="195:51" pos:end="195:53">[<expr pos:start="195:52" pos:end="195:52"><literal type="number" pos:start="195:52" pos:end="195:52">7</literal></expr>]</index></name> <init pos:start="195:55" pos:end="195:81">= <expr pos:start="195:57" pos:end="195:81"><block pos:start="195:57" pos:end="195:81">{<expr pos:start="195:58" pos:end="195:58"><literal type="number" pos:start="195:58" pos:end="195:58">0</literal></expr>,<expr pos:start="195:60" pos:end="195:60"><literal type="number" pos:start="195:60" pos:end="195:60">3</literal></expr>,<expr pos:start="195:62" pos:end="195:62"><literal type="number" pos:start="195:62" pos:end="195:62">6</literal></expr>,<expr pos:start="195:64" pos:end="195:65"><literal type="number" pos:start="195:64" pos:end="195:65">12</literal></expr>,<expr pos:start="195:67" pos:end="195:68"><literal type="number" pos:start="195:67" pos:end="195:68">24</literal></expr>,<expr pos:start="195:70" pos:end="195:71"><literal type="number" pos:start="195:70" pos:end="195:71">48</literal></expr>,<expr pos:start="195:73" pos:end="195:79"><name pos:start="195:73" pos:end="195:79">INT_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="197:13" pos:end="197:53"><decl pos:start="197:13" pos:end="197:52"><type pos:start="197:13" pos:end="197:15"><name pos:start="197:13" pos:end="197:15">int</name></type> <name pos:start="197:17" pos:end="197:21">bitsi</name><init pos:start="197:22" pos:end="197:52">= <expr pos:start="197:24" pos:end="197:52"><call pos:start="197:24" pos:end="197:52"><name pos:start="197:24" pos:end="197:32">show_bits</name><argument_list pos:start="197:33" pos:end="197:52">(<argument pos:start="197:34" pos:end="197:35"><expr pos:start="197:34" pos:end="197:35"><name pos:start="197:34" pos:end="197:35">gb</name></expr></argument>, <argument pos:start="197:38" pos:end="197:51"><expr pos:start="197:38" pos:end="197:51"><name pos:start="197:38" pos:end="197:51">LEVEL_TAB_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:65"><expr pos:start="199:13" pos:end="199:64"><name pos:start="199:13" pos:end="199:22">level_code</name><operator pos:start="199:23" pos:end="199:23">=</operator> <name pos:start="199:25" pos:end="199:64"><name pos:start="199:25" pos:end="199:39">cavlc_level_tab</name><index pos:start="199:40" pos:end="199:54">[<expr pos:start="199:41" pos:end="199:53"><name pos:start="199:41" pos:end="199:53">suffix_length</name></expr>]</index><index pos:start="199:55" pos:end="199:61">[<expr pos:start="199:56" pos:end="199:60"><name pos:start="199:56" pos:end="199:60">bitsi</name></expr>]</index><index pos:start="199:62" pos:end="199:64">[<expr pos:start="199:63" pos:end="199:63"><literal type="number" pos:start="199:63" pos:end="199:63">0</literal></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="203:13" pos:end="203:68"><expr pos:start="203:13" pos:end="203:67"><call pos:start="203:13" pos:end="203:67"><name pos:start="203:13" pos:end="203:21">skip_bits</name><argument_list pos:start="203:22" pos:end="203:67">(<argument pos:start="203:23" pos:end="203:24"><expr pos:start="203:23" pos:end="203:24"><name pos:start="203:23" pos:end="203:24">gb</name></expr></argument>, <argument pos:start="203:27" pos:end="203:66"><expr pos:start="203:27" pos:end="203:66"><name pos:start="203:27" pos:end="203:66"><name pos:start="203:27" pos:end="203:41">cavlc_level_tab</name><index pos:start="203:42" pos:end="203:56">[<expr pos:start="203:43" pos:end="203:55"><name pos:start="203:43" pos:end="203:55">suffix_length</name></expr>]</index><index pos:start="203:57" pos:end="203:63">[<expr pos:start="203:58" pos:end="203:62"><name pos:start="203:58" pos:end="203:62">bitsi</name></expr>]</index><index pos:start="203:64" pos:end="203:66">[<expr pos:start="203:65" pos:end="203:65"><literal type="number" pos:start="203:65" pos:end="203:65">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="205:13" pos:end="233:13"><if pos:start="205:13" pos:end="233:13">if<condition pos:start="205:15" pos:end="205:33">(<expr pos:start="205:16" pos:end="205:32"><name pos:start="205:16" pos:end="205:25">level_code</name> <operator pos:start="205:27" pos:end="205:28">&gt;=</operator> <literal type="number" pos:start="205:30" pos:end="205:32">100</literal></expr>)</condition><block pos:start="205:34" pos:end="233:13">{<block_content pos:start="207:17" pos:end="231:64">

                <expr_stmt pos:start="207:17" pos:end="207:41"><expr pos:start="207:17" pos:end="207:40"><name pos:start="207:17" pos:end="207:22">prefix</name><operator pos:start="207:23" pos:end="207:23">=</operator> <name pos:start="207:25" pos:end="207:34">level_code</name> <operator pos:start="207:36" pos:end="207:36">-</operator> <literal type="number" pos:start="207:38" pos:end="207:40">100</literal></expr>;</expr_stmt>

                <if_stmt pos:start="209:17" pos:end="213:17"><if pos:start="209:17" pos:end="213:17">if<condition pos:start="209:19" pos:end="209:44">(<expr pos:start="209:20" pos:end="209:43"><name pos:start="209:20" pos:end="209:25">prefix</name> <operator pos:start="209:27" pos:end="209:28">==</operator> <name pos:start="209:30" pos:end="209:43">LEVEL_TAB_BITS</name></expr>)</condition><block pos:start="209:45" pos:end="213:17">{<block_content pos:start="211:21" pos:end="211:51">

                    <expr_stmt pos:start="211:21" pos:end="211:51"><expr pos:start="211:21" pos:end="211:50"><name pos:start="211:21" pos:end="211:26">prefix</name> <operator pos:start="211:28" pos:end="211:29">+=</operator> <call pos:start="211:31" pos:end="211:50"><name pos:start="211:31" pos:end="211:46">get_level_prefix</name><argument_list pos:start="211:47" pos:end="211:50">(<argument pos:start="211:48" pos:end="211:49"><expr pos:start="211:48" pos:end="211:49"><name pos:start="211:48" pos:end="211:49">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="215:17" pos:end="227:17"><if pos:start="215:17" pos:end="219:17">if<condition pos:start="215:19" pos:end="215:29">(<expr pos:start="215:20" pos:end="215:28"><name pos:start="215:20" pos:end="215:25">prefix</name><operator pos:start="215:26" pos:end="215:26">&lt;</operator><literal type="number" pos:start="215:27" pos:end="215:28">15</literal></expr>)</condition><block pos:start="215:30" pos:end="219:17">{<block_content pos:start="217:21" pos:end="217:87">

                    <expr_stmt pos:start="217:21" pos:end="217:87"><expr pos:start="217:21" pos:end="217:86"><name pos:start="217:21" pos:end="217:30">level_code</name> <operator pos:start="217:32" pos:end="217:32">=</operator> <operator pos:start="217:34" pos:end="217:34">(</operator><name pos:start="217:35" pos:end="217:40">prefix</name><operator pos:start="217:41" pos:end="217:42">&lt;&lt;</operator><name pos:start="217:43" pos:end="217:55">suffix_length</name><operator pos:start="217:56" pos:end="217:56">)</operator> <operator pos:start="217:58" pos:end="217:58">+</operator> <call pos:start="217:60" pos:end="217:86"><name pos:start="217:60" pos:end="217:67">get_bits</name><argument_list pos:start="217:68" pos:end="217:86">(<argument pos:start="217:69" pos:end="217:70"><expr pos:start="217:69" pos:end="217:70"><name pos:start="217:69" pos:end="217:70">gb</name></expr></argument>, <argument pos:start="217:73" pos:end="217:85"><expr pos:start="217:73" pos:end="217:85"><name pos:start="217:73" pos:end="217:85">suffix_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="219:18" pos:end="227:17">else<block pos:start="219:22" pos:end="227:17">{<block_content pos:start="221:21" pos:end="225:59">

                    <expr_stmt pos:start="221:21" pos:end="221:78"><expr pos:start="221:21" pos:end="221:77"><name pos:start="221:21" pos:end="221:30">level_code</name> <operator pos:start="221:32" pos:end="221:32">=</operator> <operator pos:start="221:34" pos:end="221:34">(</operator><literal type="number" pos:start="221:35" pos:end="221:36">15</literal><operator pos:start="221:37" pos:end="221:38">&lt;&lt;</operator><name pos:start="221:39" pos:end="221:51">suffix_length</name><operator pos:start="221:52" pos:end="221:52">)</operator> <operator pos:start="221:54" pos:end="221:54">+</operator> <call pos:start="221:56" pos:end="221:77"><name pos:start="221:56" pos:end="221:63">get_bits</name><argument_list pos:start="221:64" pos:end="221:77">(<argument pos:start="221:65" pos:end="221:66"><expr pos:start="221:65" pos:end="221:66"><name pos:start="221:65" pos:end="221:66">gb</name></expr></argument>, <argument pos:start="221:69" pos:end="221:76"><expr pos:start="221:69" pos:end="221:76"><name pos:start="221:69" pos:end="221:74">prefix</name><operator pos:start="221:75" pos:end="221:75">-</operator><literal type="number" pos:start="221:76" pos:end="221:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="223:21" pos:end="225:59"><if pos:start="223:21" pos:end="225:59">if<condition pos:start="223:23" pos:end="223:34">(<expr pos:start="223:24" pos:end="223:33"><name pos:start="223:24" pos:end="223:29">prefix</name><operator pos:start="223:30" pos:end="223:31">&gt;=</operator><literal type="number" pos:start="223:32" pos:end="223:33">16</literal></expr>)</condition><block type="pseudo" pos:start="225:25" pos:end="225:59"><block_content pos:start="225:25" pos:end="225:59">

                        <expr_stmt pos:start="225:25" pos:end="225:59"><expr pos:start="225:25" pos:end="225:58"><name pos:start="225:25" pos:end="225:34">level_code</name> <operator pos:start="225:36" pos:end="225:37">+=</operator> <operator pos:start="225:39" pos:end="225:39">(</operator><literal type="number" pos:start="225:40" pos:end="225:40">1</literal><operator pos:start="225:41" pos:end="225:42">&lt;&lt;</operator><operator pos:start="225:43" pos:end="225:43">(</operator><name pos:start="225:44" pos:end="225:49">prefix</name><operator pos:start="225:50" pos:end="225:50">-</operator><literal type="number" pos:start="225:51" pos:end="225:51">3</literal><operator pos:start="225:52" pos:end="225:52">)</operator><operator pos:start="225:53" pos:end="225:53">)</operator><operator pos:start="225:54" pos:end="225:54">-</operator><literal type="number" pos:start="225:55" pos:end="225:58">4096</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:38"><expr pos:start="229:17" pos:end="229:37"><name pos:start="229:17" pos:end="229:20">mask</name><operator pos:start="229:21" pos:end="229:21">=</operator> <operator pos:start="229:23" pos:end="229:23">-</operator><operator pos:start="229:24" pos:end="229:24">(</operator><name pos:start="229:25" pos:end="229:34">level_code</name><operator pos:start="229:35" pos:end="229:35">&amp;</operator><literal type="number" pos:start="229:36" pos:end="229:36">1</literal><operator pos:start="229:37" pos:end="229:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:64"><expr pos:start="231:17" pos:end="231:63"><name pos:start="231:17" pos:end="231:26">level_code</name><operator pos:start="231:27" pos:end="231:27">=</operator> <operator pos:start="231:29" pos:end="231:29">(</operator><operator pos:start="231:30" pos:end="231:30">(</operator><operator pos:start="231:31" pos:end="231:31">(</operator><literal type="number" pos:start="231:32" pos:end="231:33">2</literal><operator pos:start="231:33" pos:end="231:33">+</operator><name pos:start="231:34" pos:end="231:43">level_code</name><operator pos:start="231:44" pos:end="231:44">)</operator><operator pos:start="231:45" pos:end="231:46">&gt;&gt;</operator><literal type="number" pos:start="231:47" pos:end="231:47">1</literal><operator pos:start="231:48" pos:end="231:48">)</operator> <operator pos:start="231:50" pos:end="231:50">^</operator> <name pos:start="231:52" pos:end="231:55">mask</name><operator pos:start="231:56" pos:end="231:56">)</operator> <operator pos:start="231:58" pos:end="231:58">-</operator> <name pos:start="231:60" pos:end="231:63">mask</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:33"><expr pos:start="235:13" pos:end="235:32"><name pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:17">level</name><index pos:start="235:18" pos:end="235:20">[<expr pos:start="235:19" pos:end="235:19"><name pos:start="235:19" pos:end="235:19">i</name></expr>]</index></name><operator pos:start="235:21" pos:end="235:21">=</operator> <name pos:start="235:23" pos:end="235:32">level_code</name></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:102"><expr pos:start="237:13" pos:end="237:101"><name pos:start="237:13" pos:end="237:25">suffix_length</name><operator pos:start="237:26" pos:end="237:27">+=</operator> <name pos:start="237:29" pos:end="237:55"><name pos:start="237:29" pos:end="237:40">suffix_limit</name><index pos:start="237:41" pos:end="237:55">[<expr pos:start="237:42" pos:end="237:54"><name pos:start="237:42" pos:end="237:54">suffix_length</name></expr>]</index></name> <operator pos:start="237:57" pos:end="237:57">+</operator> <name pos:start="237:59" pos:end="237:68">level_code</name> <operator pos:start="237:70" pos:end="237:70">&gt;</operator> <literal type="number" pos:start="237:72" pos:end="237:73">2U</literal><operator pos:start="237:74" pos:end="237:74">*</operator><name pos:start="237:75" pos:end="237:101"><name pos:start="237:75" pos:end="237:86">suffix_limit</name><index pos:start="237:87" pos:end="237:101">[<expr pos:start="237:88" pos:end="237:100"><name pos:start="237:88" pos:end="237:100">suffix_length</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="340:0"><if pos:start="245:5" pos:end="247:21">if<condition pos:start="245:7" pos:end="245:32">(<expr pos:start="245:8" pos:end="245:31"><name pos:start="245:8" pos:end="245:18">total_coeff</name> <operator pos:start="245:20" pos:end="245:21">==</operator> <name pos:start="245:23" pos:end="245:31">max_coeff</name></expr>)</condition><block type="pseudo" pos:start="247:9" pos:end="247:21"><block_content pos:start="247:9" pos:end="247:21">

        <expr_stmt pos:start="247:9" pos:end="247:21"><expr pos:start="247:9" pos:end="247:20"><name pos:start="247:9" pos:end="247:18">zeros_left</name><operator pos:start="247:19" pos:end="247:19">=</operator><literal type="number" pos:start="247:20" pos:end="247:20">0</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="249:5" pos:end="340:0">else<block pos:start="249:9" pos:end="340:0">{<block_content pos:start="251:9" pos:end="269:9">

        <if_stmt pos:start="251:9" pos:end="269:9"><if pos:start="251:9" pos:end="265:9">if <condition pos:start="251:12" pos:end="251:27">(<expr pos:start="251:13" pos:end="251:26"><name pos:start="251:13" pos:end="251:21">max_coeff</name> <operator pos:start="251:23" pos:end="251:24">&lt;=</operator> <literal type="number" pos:start="251:26" pos:end="251:26">8</literal></expr>)</condition> <block pos:start="251:29" pos:end="265:9">{<block_content pos:start="253:13" pos:end="263:76">

            <if_stmt pos:start="253:13" pos:end="263:76"><if pos:start="253:13" pos:end="257:73">if <condition pos:start="253:16" pos:end="253:31">(<expr pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:25">max_coeff</name> <operator pos:start="253:27" pos:end="253:28">==</operator> <literal type="number" pos:start="253:30" pos:end="253:30">4</literal></expr>)</condition><block type="pseudo" pos:start="255:17" pos:end="257:73"><block_content pos:start="255:17" pos:end="257:73">

                <expr_stmt pos:start="255:17" pos:end="257:73"><expr pos:start="255:17" pos:end="257:72"><name pos:start="255:17" pos:end="255:26">zeros_left</name> <operator pos:start="255:28" pos:end="255:28">=</operator> <call pos:start="255:30" pos:end="257:72"><name pos:start="255:30" pos:end="255:37">get_vlc2</name><argument_list pos:start="255:38" pos:end="257:72">(<argument pos:start="255:39" pos:end="255:40"><expr pos:start="255:39" pos:end="255:40"><name pos:start="255:39" pos:end="255:40">gb</name></expr></argument>, <argument pos:start="255:43" pos:end="255:90"><expr pos:start="255:43" pos:end="255:90"><name pos:start="255:43" pos:end="255:84"><name pos:start="255:43" pos:end="255:67">chroma_dc_total_zeros_vlc</name><index pos:start="255:68" pos:end="255:84">[<expr pos:start="255:69" pos:end="255:83"><name pos:start="255:69" pos:end="255:79">total_coeff</name> <operator pos:start="255:81" pos:end="255:81">-</operator> <literal type="number" pos:start="255:83" pos:end="255:83">1</literal></expr>]</index></name><operator pos:start="255:85" pos:end="255:85">.</operator><name pos:start="255:86" pos:end="255:90">table</name></expr></argument>,

                                      <argument pos:start="257:39" pos:end="257:68"><expr pos:start="257:39" pos:end="257:68"><name pos:start="257:39" pos:end="257:68">CHROMA_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="257:71" pos:end="257:71"><expr pos:start="257:71" pos:end="257:71"><literal type="number" pos:start="257:71" pos:end="257:71">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="259:13" pos:end="263:76">else<block type="pseudo" pos:start="261:17" pos:end="263:76"><block_content pos:start="261:17" pos:end="263:76">

                <expr_stmt pos:start="261:17" pos:end="263:76"><expr pos:start="261:17" pos:end="263:75"><name pos:start="261:17" pos:end="261:26">zeros_left</name> <operator pos:start="261:28" pos:end="261:28">=</operator> <call pos:start="261:30" pos:end="263:75"><name pos:start="261:30" pos:end="261:37">get_vlc2</name><argument_list pos:start="261:38" pos:end="263:75">(<argument pos:start="261:39" pos:end="261:40"><expr pos:start="261:39" pos:end="261:40"><name pos:start="261:39" pos:end="261:40">gb</name></expr></argument>, <argument pos:start="261:43" pos:end="261:93"><expr pos:start="261:43" pos:end="261:93"><name pos:start="261:43" pos:end="261:87"><name pos:start="261:43" pos:end="261:70">chroma422_dc_total_zeros_vlc</name><index pos:start="261:71" pos:end="261:87">[<expr pos:start="261:72" pos:end="261:86"><name pos:start="261:72" pos:end="261:82">total_coeff</name> <operator pos:start="261:84" pos:end="261:84">-</operator> <literal type="number" pos:start="261:86" pos:end="261:86">1</literal></expr>]</index></name><operator pos:start="261:88" pos:end="261:88">.</operator><name pos:start="261:89" pos:end="261:93">table</name></expr></argument>,

                                      <argument pos:start="263:39" pos:end="263:71"><expr pos:start="263:39" pos:end="263:71"><name pos:start="263:39" pos:end="263:71">CHROMA422_DC_TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="263:74" pos:end="263:74"><expr pos:start="263:74" pos:end="263:74"><literal type="number" pos:start="263:74" pos:end="263:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="265:11" pos:end="269:9">else <block pos:start="265:16" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:102">

            <expr_stmt pos:start="267:13" pos:end="267:102"><expr pos:start="267:13" pos:end="267:101"><name pos:start="267:13" pos:end="267:22">zeros_left</name><operator pos:start="267:23" pos:end="267:23">=</operator> <call pos:start="267:25" pos:end="267:101"><name pos:start="267:25" pos:end="267:32">get_vlc2</name><argument_list pos:start="267:33" pos:end="267:101">(<argument pos:start="267:34" pos:end="267:35"><expr pos:start="267:34" pos:end="267:35"><name pos:start="267:34" pos:end="267:35">gb</name></expr></argument>, <argument pos:start="267:38" pos:end="267:75"><expr pos:start="267:38" pos:end="267:75"><name pos:start="267:38" pos:end="267:69"><name pos:start="267:38" pos:end="267:52">total_zeros_vlc</name><index pos:start="267:53" pos:end="267:69">[<expr pos:start="267:54" pos:end="267:68"><name pos:start="267:54" pos:end="267:64">total_coeff</name> <operator pos:start="267:66" pos:end="267:66">-</operator> <literal type="number" pos:start="267:68" pos:end="267:68">1</literal></expr>]</index></name><operator pos:start="267:70" pos:end="267:70">.</operator><name pos:start="267:71" pos:end="267:75">table</name></expr></argument>, <argument pos:start="267:78" pos:end="267:97"><expr pos:start="267:78" pos:end="267:97"><name pos:start="267:78" pos:end="267:97">TOTAL_ZEROS_VLC_BITS</name></expr></argument>, <argument pos:start="267:100" pos:end="267:100"><expr pos:start="267:100" pos:end="267:100"><literal type="number" pos:start="267:100" pos:end="267:100">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:define pos:start="275:1" pos:end="339:5">#<cpp:directive pos:start="275:2" pos:end="275:7">define</cpp:directive> <cpp:macro pos:start="275:9" pos:end="275:25"><name pos:start="275:9" pos:end="275:19">STORE_BLOCK</name><parameter_list pos:start="275:20" pos:end="275:25">(<parameter pos:start="275:21" pos:end="275:24"><type pos:start="275:21" pos:end="275:24"><name pos:start="275:21" pos:end="275:24">type</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="277:5" pos:end="339:5">scantable += zeros_left + total_coeff - 1; \

    if(n &gt;= LUMA_DC_BLOCK_INDEX){ \

        ((type*)block)[*scantable] = level[0]; \

        for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { \

            if(zeros_left &lt; 7) \

                run_before= get_vlc2(gb, run_vlc[zeros_left - 1].table, RUN_VLC_BITS, 1); \

            else \

                run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); \

            zeros_left -= run_before; \

            scantable -= 1 + run_before; \

            ((type*)block)[*scantable]= level[i]; \

        } \

        for(;i&lt;total_coeff;i++) { \

            scantable--; \

            ((type*)block)[*scantable]= level[i]; \

        } \

    }else{ \

        ((type*)block)[*scantable] = ((int)(level[0] * qmul[*scantable] + 32))&gt;&gt;6; \

        for(i=1;i&lt;total_coeff &amp;&amp; zeros_left &gt; 0;i++) { \

            if(zeros_left &lt; 7) \

                run_before= get_vlc2(gb, run_vlc[zeros_left - 1].table, RUN_VLC_BITS, 1); \

            else \

                run_before= get_vlc2(gb, run7_vlc.table, RUN7_VLC_BITS, 2); \

            zeros_left -= run_before; \

            scantable -= 1 + run_before; \

            ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; \

        } \

        for(;i&lt;total_coeff;i++) { \

            scantable--; \

            ((type*)block)[*scantable]= ((int)(level[i] * qmul[*scantable] + 32))&gt;&gt;6; \

        } \

    }</cpp:value></cpp:define>



    <if_stmt pos:start="343:5" pos:end="351:5"><if pos:start="343:5" pos:end="351:5">if <condition pos:start="343:8" pos:end="343:23">(<expr pos:start="343:9" pos:end="343:22"><name pos:start="343:9" pos:end="343:18">zeros_left</name> <operator pos:start="343:20" pos:end="343:20">&lt;</operator> <literal type="number" pos:start="343:22" pos:end="343:22">0</literal></expr>)</condition> <block pos:start="343:25" pos:end="351:5">{<block_content pos:start="345:9" pos:end="349:35">

        <expr_stmt pos:start="345:9" pos:end="347:80"><expr pos:start="345:9" pos:end="347:79"><call pos:start="345:9" pos:end="347:79"><name pos:start="345:9" pos:end="345:14">av_log</name><argument_list pos:start="345:15" pos:end="347:79">(<argument pos:start="345:16" pos:end="345:23"><expr pos:start="345:16" pos:end="345:23"><name pos:start="345:16" pos:end="345:23"><name pos:start="345:16" pos:end="345:16">h</name><operator pos:start="345:17" pos:end="345:18">-&gt;</operator><name pos:start="345:19" pos:end="345:23">avctx</name></name></expr></argument>, <argument pos:start="345:26" pos:end="345:37"><expr pos:start="345:26" pos:end="345:37"><name pos:start="345:26" pos:end="345:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="347:16" pos:end="347:58"><expr pos:start="347:16" pos:end="347:58"><literal type="string" pos:start="347:16" pos:end="347:58">"negative number of zero coeffs at %d %d\n"</literal></expr></argument>, <argument pos:start="347:61" pos:end="347:68"><expr pos:start="347:61" pos:end="347:68"><name pos:start="347:61" pos:end="347:68"><name pos:start="347:61" pos:end="347:62">sl</name><operator pos:start="347:63" pos:end="347:64">-&gt;</operator><name pos:start="347:65" pos:end="347:68">mb_x</name></name></expr></argument>, <argument pos:start="347:71" pos:end="347:78"><expr pos:start="347:71" pos:end="347:78"><name pos:start="347:71" pos:end="347:78"><name pos:start="347:71" pos:end="347:72">sl</name><operator pos:start="347:73" pos:end="347:74">-&gt;</operator><name pos:start="347:75" pos:end="347:78">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="349:9" pos:end="349:35">return <expr pos:start="349:16" pos:end="349:34"><name pos:start="349:16" pos:end="349:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="355:5" pos:end="363:5"><if pos:start="355:5" pos:end="359:5">if <condition pos:start="355:8" pos:end="355:23">(<expr pos:start="355:9" pos:end="355:22"><name pos:start="355:9" pos:end="355:22"><name pos:start="355:9" pos:end="355:9">h</name><operator pos:start="355:10" pos:end="355:11">-&gt;</operator><name pos:start="355:12" pos:end="355:22">pixel_shift</name></name></expr>)</condition> <block pos:start="355:25" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:28">

        <macro pos:start="357:9" pos:end="357:28"><name pos:start="357:9" pos:end="357:19">STORE_BLOCK</name><argument_list pos:start="357:20" pos:end="357:28">(<argument pos:start="357:21" pos:end="357:27">int32_t</argument>)</argument_list></macro>

    </block_content>}</block></if> <else pos:start="359:7" pos:end="363:5">else <block pos:start="359:12" pos:end="363:5">{<block_content pos:start="361:9" pos:end="361:28">

        <macro pos:start="361:9" pos:end="361:28"><name pos:start="361:9" pos:end="361:19">STORE_BLOCK</name><argument_list pos:start="361:20" pos:end="361:28">(<argument pos:start="361:21" pos:end="361:27">int16_t</argument>)</argument_list></macro>

    </block_content>}</block></else></if_stmt>



    <return pos:start="367:5" pos:end="367:13">return <expr pos:start="367:12" pos:end="367:12"><literal type="number" pos:start="367:12" pos:end="367:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
