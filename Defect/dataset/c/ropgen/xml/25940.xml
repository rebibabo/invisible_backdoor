<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25940.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_ldx</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:36"><name pos:start="1:21" pos:end="1:32">DisasContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">dc</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:51">code</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:24">

    <expr_stmt pos:start="5:5" pos:end="5:24"><expr pos:start="5:5" pos:end="5:23"><call pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:10">I_TYPE</name><argument_list pos:start="5:11" pos:end="5:23">(<argument pos:start="5:12" pos:end="5:16"><expr pos:start="5:12" pos:end="5:16"><name pos:start="5:12" pos:end="5:16">instr</name></expr></argument>, <argument pos:start="5:19" pos:end="5:22"><expr pos:start="5:19" pos:end="5:22"><name pos:start="5:19" pos:end="5:22">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:13">addr</name> <init pos:start="9:15" pos:end="9:30">= <expr pos:start="9:17" pos:end="9:30"><call pos:start="9:17" pos:end="9:30"><name pos:start="9:17" pos:end="9:28">tcg_temp_new</name><argument_list pos:start="9:29" pos:end="9:30">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">TCGv</name></type> <name pos:start="11:10" pos:end="11:13">data</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="25:7">/*

     * WARNING: Loads into R_ZERO are ignored, but we must generate the

     *          memory access itself to emulate the CPU precisely. Load

     *          from a protected page to R_ZERO will cause SIGSEGV on

     *          the Nios2 CPU.

     */</comment>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><call pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:14">likely</name><argument_list pos:start="27:15" pos:end="27:33">(<argument pos:start="27:16" pos:end="27:32"><expr pos:start="27:16" pos:end="27:32"><name pos:start="27:16" pos:end="27:22"><name pos:start="27:16" pos:end="27:20">instr</name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:22">b</name></name> <operator pos:start="27:24" pos:end="27:25">!=</operator> <name pos:start="27:27" pos:end="27:32">R_ZERO</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:36" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:34">

        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:12">data</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:33"><name pos:start="29:16" pos:end="29:17">dc</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:24">cpu_R</name><index pos:start="29:25" pos:end="29:33">[<expr pos:start="29:26" pos:end="29:32"><name pos:start="29:26" pos:end="29:32"><name pos:start="29:26" pos:end="29:30">instr</name><operator pos:start="29:31" pos:end="29:31">.</operator><name pos:start="29:32" pos:end="29:32">b</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:30">

        <expr_stmt pos:start="33:9" pos:end="33:30"><expr pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:12">data</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:29"><name pos:start="33:16" pos:end="33:27">tcg_temp_new</name><argument_list pos:start="33:28" pos:end="33:29">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:63"><expr pos:start="39:5" pos:end="39:62"><call pos:start="39:5" pos:end="39:62"><name pos:start="39:5" pos:end="39:19">tcg_gen_addi_tl</name><argument_list pos:start="39:20" pos:end="39:62">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">addr</name></expr></argument>, <argument pos:start="39:27" pos:end="39:47"><expr pos:start="39:27" pos:end="39:47"><call pos:start="39:27" pos:end="39:47"><name pos:start="39:27" pos:end="39:34">load_gpr</name><argument_list pos:start="39:35" pos:end="39:47">(<argument pos:start="39:36" pos:end="39:37"><expr pos:start="39:36" pos:end="39:37"><name pos:start="39:36" pos:end="39:37">dc</name></expr></argument>, <argument pos:start="39:40" pos:end="39:46"><expr pos:start="39:40" pos:end="39:46"><name pos:start="39:40" pos:end="39:46"><name pos:start="39:40" pos:end="39:44">instr</name><operator pos:start="39:45" pos:end="39:45">.</operator><name pos:start="39:46" pos:end="39:46">a</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:50" pos:end="39:61"><expr pos:start="39:50" pos:end="39:61"><name pos:start="39:50" pos:end="39:61"><name pos:start="39:50" pos:end="39:54">instr</name><operator pos:start="39:55" pos:end="39:55">.</operator><name pos:start="39:56" pos:end="39:61">imm16s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><call pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:22">tcg_gen_qemu_ld_tl</name><argument_list pos:start="41:23" pos:end="41:54">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">data</name></expr></argument>, <argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">addr</name></expr></argument>, <argument pos:start="41:36" pos:end="41:46"><expr pos:start="41:36" pos:end="41:46"><name pos:start="41:36" pos:end="41:46"><name pos:start="41:36" pos:end="41:37">dc</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:46">mem_idx</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:53"><expr pos:start="41:49" pos:end="41:53"><name pos:start="41:49" pos:end="41:53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:36">(<expr pos:start="45:9" pos:end="45:35"><call pos:start="45:9" pos:end="45:35"><name pos:start="45:9" pos:end="45:16">unlikely</name><argument_list pos:start="45:17" pos:end="45:35">(<argument pos:start="45:18" pos:end="45:34"><expr pos:start="45:18" pos:end="45:34"><name pos:start="45:18" pos:end="45:24"><name pos:start="45:18" pos:end="45:22">instr</name><operator pos:start="45:23" pos:end="45:23">.</operator><name pos:start="45:24" pos:end="45:24">b</name></name> <operator pos:start="45:26" pos:end="45:27">==</operator> <name pos:start="45:29" pos:end="45:34">R_ZERO</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:38" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:28">

        <expr_stmt pos:start="47:9" pos:end="47:28"><expr pos:start="47:9" pos:end="47:27"><call pos:start="47:9" pos:end="47:27"><name pos:start="47:9" pos:end="47:21">tcg_temp_free</name><argument_list pos:start="47:22" pos:end="47:27">(<argument pos:start="47:23" pos:end="47:26"><expr pos:start="47:23" pos:end="47:26"><name pos:start="47:23" pos:end="47:26">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><call pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:17">tcg_temp_free</name><argument_list pos:start="53:18" pos:end="53:23">(<argument pos:start="53:19" pos:end="53:22"><expr pos:start="53:19" pos:end="53:22"><name pos:start="53:19" pos:end="53:22">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
