<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12515.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">spapr_cpu_reset</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:33">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cpu</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">CPUPPCState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">env</name> <init pos:start="9:22" pos:end="9:32">= <expr pos:start="9:24" pos:end="9:32"><operator pos:start="9:24" pos:end="9:24">&amp;</operator><name pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:32">env</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:18"><expr pos:start="13:5" pos:end="13:17"><call pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:13">cpu_reset</name><argument_list pos:start="13:14" pos:end="13:17">(<argument pos:start="13:15" pos:end="13:16"><expr pos:start="13:15" pos:end="13:16"><name pos:start="13:15" pos:end="13:16">cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="21:28">/* All CPUs start halted.  CPU0 is unhalted from the machine level

     * reset code and the rest are explicitly started up by the guest

     * using an RTAS call */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:6">cs</name><operator pos:start="23:7" pos:end="23:8">-&gt;</operator><name pos:start="23:9" pos:end="23:14">halted</name></name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:7">env</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:12">spr</name><index pos:start="27:13" pos:end="27:22">[<expr pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:21">SPR_HIOR</name></expr>]</index></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:48"><expr pos:start="31:5" pos:end="31:47"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:7">env</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:22">external_htab</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <operator pos:start="31:26" pos:end="31:26">(</operator><name pos:start="31:27" pos:end="31:33">uint8_t</name> <operator pos:start="31:35" pos:end="31:35">*</operator><operator pos:start="31:36" pos:end="31:36">)</operator><name pos:start="31:37" pos:end="31:47"><name pos:start="31:37" pos:end="31:41">spapr</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:47">htab</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><call pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:19">kvm_enabled</name><argument_list pos:start="33:20" pos:end="33:21">()</argument_list></call> <operator pos:start="33:23" pos:end="33:24">&amp;&amp;</operator> <operator pos:start="33:26" pos:end="33:26">!</operator><name pos:start="33:27" pos:end="33:44"><name pos:start="33:27" pos:end="33:29">env</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:44">external_htab</name></name></expr>)</condition> <block pos:start="33:47" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:39">

        <comment type="block" pos:start="35:9" pos:end="41:11">/*

         * HV KVM, set external_htab to 1 so our ppc_hash64_load_hpte*

         * functions do the right thing.

         */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:11">env</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:26">external_htab</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:34">void</name> <operator pos:start="43:36" pos:end="43:36">*</operator><operator pos:start="43:37" pos:end="43:37">)</operator><literal type="number" pos:start="43:38" pos:end="43:38">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:7">env</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:18">htab_base</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <operator pos:start="47:22" pos:end="47:22">-</operator><literal type="number" pos:start="47:23" pos:end="47:23">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:7">env</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:18">htab_mask</name></name> <operator pos:start="49:20" pos:end="49:20">=</operator> <call pos:start="49:22" pos:end="49:37"><name pos:start="49:22" pos:end="49:30">HTAB_SIZE</name><argument_list pos:start="49:31" pos:end="49:37">(<argument pos:start="49:32" pos:end="49:36"><expr pos:start="49:32" pos:end="49:36"><name pos:start="49:32" pos:end="49:36">spapr</name></expr></argument>)</argument_list></call> <operator pos:start="49:39" pos:end="49:39">-</operator> <literal type="number" pos:start="49:41" pos:end="49:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="53:33"><expr pos:start="51:5" pos:end="53:32"><name pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:7">env</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">spr</name><index pos:start="51:13" pos:end="51:22">[<expr pos:start="51:14" pos:end="51:21"><name pos:start="51:14" pos:end="51:21">SPR_SDR1</name></expr>]</index></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <operator pos:start="51:26" pos:end="51:26">(</operator><name pos:start="51:27" pos:end="51:38">target_ulong</name><operator pos:start="51:39" pos:end="51:39">)</operator><operator pos:start="51:40" pos:end="51:40">(</operator><name pos:start="51:41" pos:end="51:49">uintptr_t</name><operator pos:start="51:50" pos:end="51:50">)</operator><name pos:start="51:51" pos:end="51:61"><name pos:start="51:51" pos:end="51:55">spapr</name><operator pos:start="51:56" pos:end="51:57">-&gt;</operator><name pos:start="51:58" pos:end="51:61">htab</name></name> <operator pos:start="51:63" pos:end="51:63">|</operator>

        <operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:26"><name pos:start="53:10" pos:end="53:14">spapr</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:26">htab_shift</name></name> <operator pos:start="53:28" pos:end="53:28">-</operator> <literal type="number" pos:start="53:30" pos:end="53:31">18</literal><operator pos:start="53:32" pos:end="53:32">)</operator></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
