<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25976.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">bdrv_drain_all_begin</name><parameter_list pos:start="1:26" pos:end="1:31">(<parameter pos:start="1:27" pos:end="1:30"><decl pos:start="1:27" pos:end="1:30"><type pos:start="1:27" pos:end="1:30"><name pos:start="1:27" pos:end="1:30">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:27">

    <comment type="block" pos:start="5:5" pos:end="5:70">/* Always run first iteration so any pending completion BHs run */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:15">waited</name> <init pos:start="7:17" pos:end="7:22">= <expr pos:start="7:19" pos:end="7:22"><name pos:start="7:19" pos:end="7:22">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20">BdrvNextIterator</name></type> <name pos:start="11:22" pos:end="11:23">it</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">GSList</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:20">aio_ctxs</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>, <decl pos:start="13:30" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:12"><modifier pos:start="13:30" pos:end="13:30">*</modifier></type><name pos:start="13:31" pos:end="13:33">ctx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:23">block_job_pause_all</name><argument_list pos:start="17:24" pos:end="17:25">()</argument_list></call></expr>;</expr_stmt>



    <for pos:start="21:5" pos:end="43:5">for <control pos:start="21:9" pos:end="21:55">(<init pos:start="21:10" pos:end="21:30"><expr pos:start="21:10" pos:end="21:29"><name pos:start="21:10" pos:end="21:11">bs</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:24">bdrv_first</name><argument_list pos:start="21:25" pos:end="21:29">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><operator pos:start="21:26" pos:end="21:26">&amp;</operator><name pos:start="21:27" pos:end="21:28">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:33"><name pos:start="21:32" pos:end="21:33">bs</name></expr>;</condition> <incr pos:start="21:36" pos:end="21:54"><expr pos:start="21:36" pos:end="21:54"><name pos:start="21:36" pos:end="21:37">bs</name> <operator pos:start="21:39" pos:end="21:39">=</operator> <call pos:start="21:41" pos:end="21:54"><name pos:start="21:41" pos:end="21:49">bdrv_next</name><argument_list pos:start="21:50" pos:end="21:54">(<argument pos:start="21:51" pos:end="21:53"><expr pos:start="21:51" pos:end="21:53"><operator pos:start="21:51" pos:end="21:51">&amp;</operator><name pos:start="21:52" pos:end="21:53">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="21:57" pos:end="43:5">{<block_content pos:start="23:9" pos:end="41:9">

        <decl_stmt pos:start="23:9" pos:end="23:59"><decl pos:start="23:9" pos:end="23:58"><type pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:18">AioContext</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:31">aio_context</name> <init pos:start="23:33" pos:end="23:58">= <expr pos:start="23:35" pos:end="23:58"><call pos:start="23:35" pos:end="23:58"><name pos:start="23:35" pos:end="23:54">bdrv_get_aio_context</name><argument_list pos:start="23:55" pos:end="23:58">(<argument pos:start="23:56" pos:end="23:57"><expr pos:start="23:56" pos:end="23:57"><name pos:start="23:56" pos:end="23:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:41"><expr pos:start="27:9" pos:end="27:40"><call pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:27">aio_context_acquire</name><argument_list pos:start="27:28" pos:end="27:40">(<argument pos:start="27:29" pos:end="27:39"><expr pos:start="27:29" pos:end="27:39"><name pos:start="27:29" pos:end="27:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><call pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:33">bdrv_parent_drained_begin</name><argument_list pos:start="29:34" pos:end="29:37">(<argument pos:start="29:35" pos:end="29:36"><expr pos:start="29:35" pos:end="29:36"><name pos:start="29:35" pos:end="29:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:42"><expr pos:start="31:9" pos:end="31:41"><call pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:28">aio_disable_external</name><argument_list pos:start="31:29" pos:end="31:41">(<argument pos:start="31:30" pos:end="31:40"><expr pos:start="31:30" pos:end="31:40"><name pos:start="31:30" pos:end="31:40">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:27">aio_context_release</name><argument_list pos:start="33:28" pos:end="33:40">(<argument pos:start="33:29" pos:end="33:39"><expr pos:start="33:29" pos:end="33:39"><name pos:start="33:29" pos:end="33:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:49">(<expr pos:start="37:13" pos:end="37:48"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="37:48"><name pos:start="37:14" pos:end="37:25">g_slist_find</name><argument_list pos:start="37:26" pos:end="37:48">(<argument pos:start="37:27" pos:end="37:34"><expr pos:start="37:27" pos:end="37:34"><name pos:start="37:27" pos:end="37:34">aio_ctxs</name></expr></argument>, <argument pos:start="37:37" pos:end="37:47"><expr pos:start="37:37" pos:end="37:47"><name pos:start="37:37" pos:end="37:47">aio_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:51" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:62">

            <expr_stmt pos:start="39:13" pos:end="39:62"><expr pos:start="39:13" pos:end="39:61"><name pos:start="39:13" pos:end="39:20">aio_ctxs</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:61"><name pos:start="39:24" pos:end="39:38">g_slist_prepend</name><argument_list pos:start="39:39" pos:end="39:61">(<argument pos:start="39:40" pos:end="39:47"><expr pos:start="39:40" pos:end="39:47"><name pos:start="39:40" pos:end="39:47">aio_ctxs</name></expr></argument>, <argument pos:start="39:50" pos:end="39:60"><expr pos:start="39:50" pos:end="39:60"><name pos:start="39:50" pos:end="39:60">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="47:5" pos:end="57:7">/* Note that completion of an asynchronous I/O operation can trigger any

     * number of other I/O operations on other devices---for example a

     * coroutine can submit an I/O request to another device in response to

     * request completion.  Therefore we must keep looping until there was no

     * more activity rather than simply draining each device independently.

     */</comment>

    <while pos:start="59:5" pos:end="91:5">while <condition pos:start="59:11" pos:end="59:18">(<expr pos:start="59:12" pos:end="59:17"><name pos:start="59:12" pos:end="59:17">waited</name></expr>)</condition> <block pos:start="59:20" pos:end="91:5">{<block_content pos:start="61:9" pos:end="89:9">

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:14">waited</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:22">false</name></expr>;</expr_stmt>



        <for pos:start="65:9" pos:end="89:9">for <control pos:start="65:13" pos:end="65:58">(<init pos:start="65:14" pos:end="65:28"><expr pos:start="65:14" pos:end="65:27"><name pos:start="65:14" pos:end="65:16">ctx</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:27">aio_ctxs</name></expr>;</init> <condition pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:32">ctx</name> <operator pos:start="65:34" pos:end="65:35">!=</operator> <name pos:start="65:37" pos:end="65:40">NULL</name></expr>;</condition> <incr pos:start="65:43" pos:end="65:57"><expr pos:start="65:43" pos:end="65:57"><name pos:start="65:43" pos:end="65:45">ctx</name> <operator pos:start="65:47" pos:end="65:47">=</operator> <name pos:start="65:49" pos:end="65:57"><name pos:start="65:49" pos:end="65:51">ctx</name><operator pos:start="65:52" pos:end="65:53">-&gt;</operator><name pos:start="65:54" pos:end="65:57">next</name></name></expr></incr>)</control> <block pos:start="65:60" pos:end="89:9">{<block_content pos:start="67:13" pos:end="87:45">

            <decl_stmt pos:start="67:13" pos:end="67:48"><decl pos:start="67:13" pos:end="67:47"><type pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:22">AioContext</name> <modifier pos:start="67:24" pos:end="67:24">*</modifier></type><name pos:start="67:25" pos:end="67:35">aio_context</name> <init pos:start="67:37" pos:end="67:47">= <expr pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:41">ctx</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:47">data</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="71:13" pos:end="71:45"><expr pos:start="71:13" pos:end="71:44"><call pos:start="71:13" pos:end="71:44"><name pos:start="71:13" pos:end="71:31">aio_context_acquire</name><argument_list pos:start="71:32" pos:end="71:44">(<argument pos:start="71:33" pos:end="71:43"><expr pos:start="71:33" pos:end="71:43"><name pos:start="71:33" pos:end="71:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="73:13" pos:end="85:13">for <control pos:start="73:17" pos:end="73:63">(<init pos:start="73:18" pos:end="73:38"><expr pos:start="73:18" pos:end="73:37"><name pos:start="73:18" pos:end="73:19">bs</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:37"><name pos:start="73:23" pos:end="73:32">bdrv_first</name><argument_list pos:start="73:33" pos:end="73:37">(<argument pos:start="73:34" pos:end="73:36"><expr pos:start="73:34" pos:end="73:36"><operator pos:start="73:34" pos:end="73:34">&amp;</operator><name pos:start="73:35" pos:end="73:36">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="73:40" pos:end="73:42"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">bs</name></expr>;</condition> <incr pos:start="73:44" pos:end="73:62"><expr pos:start="73:44" pos:end="73:62"><name pos:start="73:44" pos:end="73:45">bs</name> <operator pos:start="73:47" pos:end="73:47">=</operator> <call pos:start="73:49" pos:end="73:62"><name pos:start="73:49" pos:end="73:57">bdrv_next</name><argument_list pos:start="73:58" pos:end="73:62">(<argument pos:start="73:59" pos:end="73:61"><expr pos:start="73:59" pos:end="73:61"><operator pos:start="73:59" pos:end="73:59">&amp;</operator><name pos:start="73:60" pos:end="73:61">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="73:65" pos:end="85:13">{<block_content pos:start="75:17" pos:end="83:17">

                <if_stmt pos:start="75:17" pos:end="83:17"><if pos:start="75:17" pos:end="83:17">if <condition pos:start="75:20" pos:end="75:60">(<expr pos:start="75:21" pos:end="75:59"><name pos:start="75:21" pos:end="75:31">aio_context</name> <operator pos:start="75:33" pos:end="75:34">==</operator> <call pos:start="75:36" pos:end="75:59"><name pos:start="75:36" pos:end="75:55">bdrv_get_aio_context</name><argument_list pos:start="75:56" pos:end="75:59">(<argument pos:start="75:57" pos:end="75:58"><expr pos:start="75:57" pos:end="75:58"><name pos:start="75:57" pos:end="75:58">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:62" pos:end="83:17">{<block_content pos:start="79:21" pos:end="81:59">

                    <comment type="block" pos:start="77:21" pos:end="77:68">/* FIXME Calling this multiple times is wrong */</comment>

                    <expr_stmt pos:start="79:21" pos:end="79:48"><expr pos:start="79:21" pos:end="79:47"><call pos:start="79:21" pos:end="79:47"><name pos:start="79:21" pos:end="79:37">bdrv_drain_invoke</name><argument_list pos:start="79:38" pos:end="79:47">(<argument pos:start="79:39" pos:end="79:40"><expr pos:start="79:39" pos:end="79:40"><name pos:start="79:39" pos:end="79:40">bs</name></expr></argument>, <argument pos:start="79:43" pos:end="79:46"><expr pos:start="79:43" pos:end="79:46"><name pos:start="79:43" pos:end="79:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:59"><expr pos:start="81:21" pos:end="81:58"><name pos:start="81:21" pos:end="81:26">waited</name> <operator pos:start="81:28" pos:end="81:29">|=</operator> <call pos:start="81:31" pos:end="81:58"><name pos:start="81:31" pos:end="81:48">bdrv_drain_recurse</name><argument_list pos:start="81:49" pos:end="81:58">(<argument pos:start="81:50" pos:end="81:51"><expr pos:start="81:50" pos:end="81:51"><name pos:start="81:50" pos:end="81:51">bs</name></expr></argument>, <argument pos:start="81:54" pos:end="81:57"><expr pos:start="81:54" pos:end="81:57"><name pos:start="81:54" pos:end="81:57">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="87:13" pos:end="87:45"><expr pos:start="87:13" pos:end="87:44"><call pos:start="87:13" pos:end="87:44"><name pos:start="87:13" pos:end="87:31">aio_context_release</name><argument_list pos:start="87:32" pos:end="87:44">(<argument pos:start="87:33" pos:end="87:43"><expr pos:start="87:33" pos:end="87:43"><name pos:start="87:33" pos:end="87:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></while>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><call pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:16">g_slist_free</name><argument_list pos:start="95:17" pos:end="95:26">(<argument pos:start="95:18" pos:end="95:25"><expr pos:start="95:18" pos:end="95:25"><name pos:start="95:18" pos:end="95:25">aio_ctxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
