<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25959.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">arm_load_kernel</name><parameter_list pos:start="1:21" pos:end="1:61">(<parameter pos:start="1:22" pos:end="1:32"><decl pos:start="1:22" pos:end="1:32"><type pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:27">ARMCPU</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">cpu</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:60"><decl pos:start="1:35" pos:end="1:60"><type pos:start="1:35" pos:end="1:60"><name pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:54">arm_boot_info</name></name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="237:1">{<block_content pos:start="5:5" pos:end="235:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUARMState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">is_linux</name> <init pos:start="13:18" pos:end="13:20">= <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">target_phys_addr_t</name></type> <name pos:start="17:24" pos:end="17:28">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:18">big_endian</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:27"><decl pos:start="21:5" pos:end="21:26"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">QemuOpts</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:26">machine_opts</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:27">/* Load the kernel.  */</comment>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:13">info</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:30">kernel_filename</name></name></expr>)</condition> <block pos:start="27:33" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:16">

        <expr_stmt pos:start="29:9" pos:end="29:60"><expr pos:start="29:9" pos:end="29:59"><call pos:start="29:9" pos:end="29:59"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:59">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:58"><expr pos:start="29:25" pos:end="29:58"><literal type="string" pos:start="29:25" pos:end="29:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><call pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">exit</name><argument_list pos:start="31:13" pos:end="31:15">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><literal type="number" pos:start="31:14" pos:end="31:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:64"><expr pos:start="37:5" pos:end="37:63"><name pos:start="37:5" pos:end="37:16">machine_opts</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:63"><name pos:start="37:20" pos:end="37:33">qemu_opts_find</name><argument_list pos:start="37:34" pos:end="37:63">(<argument pos:start="37:35" pos:end="37:59"><expr pos:start="37:35" pos:end="37:59"><call pos:start="37:35" pos:end="37:59"><name pos:start="37:35" pos:end="37:48">qemu_find_opts</name><argument_list pos:start="37:49" pos:end="37:59">(<argument pos:start="37:50" pos:end="37:58"><expr pos:start="37:50" pos:end="37:58"><literal type="string" pos:start="37:50" pos:end="37:58">"machine"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:62" pos:end="37:62"><expr pos:start="37:62" pos:end="37:62"><literal type="number" pos:start="37:62" pos:end="37:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:20">machine_opts</name></expr>)</condition> <block pos:start="39:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:63">

        <expr_stmt pos:start="41:9" pos:end="41:63"><expr pos:start="41:9" pos:end="41:62"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:12">info</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:26">dtb_filename</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <call pos:start="41:30" pos:end="41:62"><name pos:start="41:30" pos:end="41:41">qemu_opt_get</name><argument_list pos:start="41:42" pos:end="41:62">(<argument pos:start="41:43" pos:end="41:54"><expr pos:start="41:43" pos:end="41:54"><name pos:start="41:43" pos:end="41:54">machine_opts</name></expr></argument>, <argument pos:start="41:57" pos:end="41:61"><expr pos:start="41:57" pos:end="41:61"><literal type="string" pos:start="41:57" pos:end="41:61">"dtb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:34">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:12">info</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:26">dtb_filename</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:33">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:40">(<expr pos:start="51:9" pos:end="51:39"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:39"><name pos:start="51:10" pos:end="51:13">info</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:39">secondary_cpu_reset_hook</name></name></expr>)</condition> <block pos:start="51:42" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:65">

        <expr_stmt pos:start="53:9" pos:end="53:65"><expr pos:start="53:9" pos:end="53:64"><name pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:12">info</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:38">secondary_cpu_reset_hook</name></name> <operator pos:start="53:40" pos:end="53:40">=</operator> <name pos:start="53:42" pos:end="53:64">default_reset_secondary</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:36">(<expr pos:start="57:9" pos:end="57:35"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:35"><name pos:start="57:10" pos:end="57:13">info</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:35">write_secondary_boot</name></name></expr>)</condition> <block pos:start="57:38" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:61">

        <expr_stmt pos:start="59:9" pos:end="59:61"><expr pos:start="59:9" pos:end="59:60"><name pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:12">info</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:34">write_secondary_boot</name></name> <operator pos:start="59:36" pos:end="59:36">=</operator> <name pos:start="59:38" pos:end="59:60">default_write_secondary</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="72:0"><if pos:start="65:5" pos:end="72:0">if <condition pos:start="65:8" pos:end="65:27">(<expr pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:12">info</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:21">nb_cpus</name></name> <operator pos:start="65:23" pos:end="65:24">==</operator> <literal type="number" pos:start="65:26" pos:end="65:26">0</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="72:0"><block_content pos:start="67:9" pos:end="72:0">

        <expr_stmt pos:start="67:9" pos:end="72:0"><expr pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:12">info</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:21">nb_cpus</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="71:1" pos:end="71:29">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:14">big_endian</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:14">big_endian</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="83:5" pos:end="83:76">/* Assume that raw images are linux kernels, and ELF images are not.  */</comment>

    <expr_stmt pos:start="85:5" pos:end="87:67"><expr pos:start="85:5" pos:end="87:66"><name pos:start="85:5" pos:end="85:15">kernel_size</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="87:66"><name pos:start="85:19" pos:end="85:26">load_elf</name><argument_list pos:start="85:27" pos:end="87:66">(<argument pos:start="85:28" pos:end="85:48"><expr pos:start="85:28" pos:end="85:48"><name pos:start="85:28" pos:end="85:48"><name pos:start="85:28" pos:end="85:31">info</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:48">kernel_filename</name></name></expr></argument>, <argument pos:start="85:51" pos:end="85:54"><expr pos:start="85:51" pos:end="85:54"><name pos:start="85:51" pos:end="85:54">NULL</name></expr></argument>, <argument pos:start="85:57" pos:end="85:60"><expr pos:start="85:57" pos:end="85:60"><name pos:start="85:57" pos:end="85:60">NULL</name></expr></argument>, <argument pos:start="85:63" pos:end="85:72"><expr pos:start="85:63" pos:end="85:72"><operator pos:start="85:63" pos:end="85:63">&amp;</operator><name pos:start="85:64" pos:end="85:72">elf_entry</name></expr></argument>,

                           <argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">NULL</name></expr></argument>, <argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">NULL</name></expr></argument>, <argument pos:start="87:40" pos:end="87:49"><expr pos:start="87:40" pos:end="87:49"><name pos:start="87:40" pos:end="87:49">big_endian</name></expr></argument>, <argument pos:start="87:52" pos:end="87:62"><expr pos:start="87:52" pos:end="87:62"><name pos:start="87:52" pos:end="87:62">ELF_MACHINE</name></expr></argument>, <argument pos:start="87:65" pos:end="87:65"><expr pos:start="87:65" pos:end="87:65"><literal type="number" pos:start="87:65" pos:end="87:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:22"><expr pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:9">entry</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <name pos:start="89:13" pos:end="89:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:19">kernel_size</name> <operator pos:start="91:21" pos:end="91:21">&lt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition> <block pos:start="91:26" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:45">

        <expr_stmt pos:start="93:9" pos:end="95:45"><expr pos:start="93:9" pos:end="95:44"><name pos:start="93:9" pos:end="93:19">kernel_size</name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="95:44"><name pos:start="93:23" pos:end="93:33">load_uimage</name><argument_list pos:start="93:34" pos:end="95:44">(<argument pos:start="93:35" pos:end="93:55"><expr pos:start="93:35" pos:end="93:55"><name pos:start="93:35" pos:end="93:55"><name pos:start="93:35" pos:end="93:38">info</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:55">kernel_filename</name></name></expr></argument>, <argument pos:start="93:58" pos:end="93:63"><expr pos:start="93:58" pos:end="93:63"><operator pos:start="93:58" pos:end="93:58">&amp;</operator><name pos:start="93:59" pos:end="93:63">entry</name></expr></argument>, <argument pos:start="93:66" pos:end="93:69"><expr pos:start="93:66" pos:end="93:69"><name pos:start="93:66" pos:end="93:69">NULL</name></expr></argument>,

                                  <argument pos:start="95:35" pos:end="95:43"><expr pos:start="95:35" pos:end="95:43"><operator pos:start="95:35" pos:end="95:35">&amp;</operator><name pos:start="95:36" pos:end="95:43">is_linux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:24">(<expr pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:19">kernel_size</name> <operator pos:start="99:21" pos:end="99:21">&lt;</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal></expr>)</condition> <block pos:start="99:26" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:21">

        <expr_stmt pos:start="101:9" pos:end="101:54"><expr pos:start="101:9" pos:end="101:53"><name pos:start="101:9" pos:end="101:13">entry</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <name pos:start="101:17" pos:end="101:34"><name pos:start="101:17" pos:end="101:20">info</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:34">loader_start</name></name> <operator pos:start="101:36" pos:end="101:36">+</operator> <name pos:start="101:38" pos:end="101:53">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="105:77"><expr pos:start="103:9" pos:end="105:76"><name pos:start="103:9" pos:end="103:19">kernel_size</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="105:76"><name pos:start="103:23" pos:end="103:41">load_image_targphys</name><argument_list pos:start="103:42" pos:end="105:76">(<argument pos:start="103:43" pos:end="103:63"><expr pos:start="103:43" pos:end="103:63"><name pos:start="103:43" pos:end="103:63"><name pos:start="103:43" pos:end="103:46">info</name><operator pos:start="103:47" pos:end="103:48">-&gt;</operator><name pos:start="103:49" pos:end="103:63">kernel_filename</name></name></expr></argument>, <argument pos:start="103:66" pos:end="103:70"><expr pos:start="103:66" pos:end="103:70"><name pos:start="103:66" pos:end="103:70">entry</name></expr></argument>,

                                          <argument pos:start="105:43" pos:end="105:75"><expr pos:start="105:43" pos:end="105:75"><name pos:start="105:43" pos:end="105:56"><name pos:start="105:43" pos:end="105:46">info</name><operator pos:start="105:47" pos:end="105:48">-&gt;</operator><name pos:start="105:49" pos:end="105:56">ram_size</name></name> <operator pos:start="105:58" pos:end="105:58">-</operator> <name pos:start="105:60" pos:end="105:75">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:21"><expr pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:16">is_linux</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <literal type="number" pos:start="107:20" pos:end="107:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="119:5"><if pos:start="111:5" pos:end="119:5">if <condition pos:start="111:8" pos:end="111:24">(<expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:19">kernel_size</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal></expr>)</condition> <block pos:start="111:26" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:16">

        <expr_stmt pos:start="113:9" pos:end="115:39"><expr pos:start="113:9" pos:end="115:38"><call pos:start="113:9" pos:end="115:38"><name pos:start="113:9" pos:end="113:15">fprintf</name><argument_list pos:start="113:16" pos:end="115:38">(<argument pos:start="113:17" pos:end="113:22"><expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:22">stderr</name></expr></argument>, <argument pos:start="113:25" pos:end="113:60"><expr pos:start="113:25" pos:end="113:60"><literal type="string" pos:start="113:25" pos:end="113:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                <argument pos:start="115:17" pos:end="115:37"><expr pos:start="115:17" pos:end="115:37"><name pos:start="115:17" pos:end="115:37"><name pos:start="115:17" pos:end="115:20">info</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:37">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:16"><expr pos:start="117:9" pos:end="117:15"><call pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:12">exit</name><argument_list pos:start="117:13" pos:end="117:15">(<argument pos:start="117:14" pos:end="117:14"><expr pos:start="117:14" pos:end="117:14"><literal type="number" pos:start="117:14" pos:end="117:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:24"><expr pos:start="121:5" pos:end="121:23"><name pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:8">info</name><operator pos:start="121:9" pos:end="121:10">-&gt;</operator><name pos:start="121:11" pos:end="121:15">entry</name></name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:23">entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="221:5"><if pos:start="123:5" pos:end="221:5">if <condition pos:start="123:8" pos:end="123:17">(<expr pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:16">is_linux</name></expr>)</condition> <block pos:start="123:19" pos:end="221:5">{<block_content pos:start="125:9" pos:end="219:9">

        <if_stmt pos:start="125:9" pos:end="151:9"><if pos:start="125:9" pos:end="147:9">if <condition pos:start="125:12" pos:end="125:34">(<expr pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:16">info</name><operator pos:start="125:17" pos:end="125:18">-&gt;</operator><name pos:start="125:19" pos:end="125:33">initrd_filename</name></name></expr>)</condition> <block pos:start="125:36" pos:end="147:9">{<block_content pos:start="127:13" pos:end="145:13">

            <expr_stmt pos:start="127:13" pos:end="135:66"><expr pos:start="127:13" pos:end="135:65"><name pos:start="127:13" pos:end="127:23">initrd_size</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <call pos:start="127:27" pos:end="135:65"><name pos:start="127:27" pos:end="127:45">load_image_targphys</name><argument_list pos:start="127:46" pos:end="135:65">(<argument pos:start="127:47" pos:end="127:67"><expr pos:start="127:47" pos:end="127:67"><name pos:start="127:47" pos:end="127:67"><name pos:start="127:47" pos:end="127:50">info</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:67">initrd_filename</name></name></expr></argument>,

                                              <argument pos:start="129:47" pos:end="131:64"><expr pos:start="129:47" pos:end="131:64"><name pos:start="129:47" pos:end="129:64"><name pos:start="129:47" pos:end="129:50">info</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:64">loader_start</name></name>

                                              <operator pos:start="131:47" pos:end="131:47">+</operator> <name pos:start="131:49" pos:end="131:64">INITRD_LOAD_ADDR</name></expr></argument>,

                                              <argument pos:start="133:47" pos:end="135:64"><expr pos:start="133:47" pos:end="135:64"><name pos:start="133:47" pos:end="133:60"><name pos:start="133:47" pos:end="133:50">info</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:60">ram_size</name></name>

                                              <operator pos:start="135:47" pos:end="135:47">-</operator> <name pos:start="135:49" pos:end="135:64">INITRD_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:32">(<expr pos:start="137:17" pos:end="137:31"><name pos:start="137:17" pos:end="137:27">initrd_size</name> <operator pos:start="137:29" pos:end="137:29">&lt;</operator> <literal type="number" pos:start="137:31" pos:end="137:31">0</literal></expr>)</condition> <block pos:start="137:34" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:24">

                <expr_stmt pos:start="139:17" pos:end="141:47"><expr pos:start="139:17" pos:end="141:46"><call pos:start="139:17" pos:end="141:46"><name pos:start="139:17" pos:end="139:23">fprintf</name><argument_list pos:start="139:24" pos:end="141:46">(<argument pos:start="139:25" pos:end="139:30"><expr pos:start="139:25" pos:end="139:30"><name pos:start="139:25" pos:end="139:30">stderr</name></expr></argument>, <argument pos:start="139:33" pos:end="139:68"><expr pos:start="139:33" pos:end="139:68"><literal type="string" pos:start="139:33" pos:end="139:68">"qemu: could not load initrd '%s'\n"</literal></expr></argument>,

                        <argument pos:start="141:25" pos:end="141:45"><expr pos:start="141:25" pos:end="141:45"><name pos:start="141:25" pos:end="141:45"><name pos:start="141:25" pos:end="141:28">info</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:45">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:24"><expr pos:start="143:17" pos:end="143:23"><call pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:20">exit</name><argument_list pos:start="143:21" pos:end="143:23">(<argument pos:start="143:22" pos:end="143:22"><expr pos:start="143:22" pos:end="143:22"><literal type="number" pos:start="143:22" pos:end="143:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="151:9">else <block pos:start="147:16" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:28">

            <expr_stmt pos:start="149:13" pos:end="149:28"><expr pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:23">initrd_size</name> <operator pos:start="149:25" pos:end="149:25">=</operator> <literal type="number" pos:start="149:27" pos:end="149:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:40"><expr pos:start="153:9" pos:end="153:39"><name pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:12">info</name><operator pos:start="153:13" pos:end="153:14">-&gt;</operator><name pos:start="153:15" pos:end="153:25">initrd_size</name></name> <operator pos:start="153:27" pos:end="153:27">=</operator> <name pos:start="153:29" pos:end="153:39">initrd_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:39"><expr pos:start="157:9" pos:end="157:38"><name pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:18">bootloader</name><index pos:start="157:19" pos:end="157:21">[<expr pos:start="157:20" pos:end="157:20"><literal type="number" pos:start="157:20" pos:end="157:20">4</literal></expr>]</index></name> <operator pos:start="157:23" pos:end="157:23">=</operator> <name pos:start="157:25" pos:end="157:38"><name pos:start="157:25" pos:end="157:28">info</name><operator pos:start="157:29" pos:end="157:30">-&gt;</operator><name pos:start="157:31" pos:end="157:38">board_id</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="161:9" pos:end="165:11">/* for device tree boot, we pass the DTB directly in r2. Otherwise

         * we point to the kernel args.

         */</comment>

        <if_stmt pos:start="167:9" pos:end="201:9"><if pos:start="167:9" pos:end="185:9">if <condition pos:start="167:12" pos:end="167:31">(<expr pos:start="167:13" pos:end="167:30"><name pos:start="167:13" pos:end="167:30"><name pos:start="167:13" pos:end="167:16">info</name><operator pos:start="167:17" pos:end="167:18">-&gt;</operator><name pos:start="167:19" pos:end="167:30">dtb_filename</name></name></expr>)</condition> <block pos:start="167:33" pos:end="185:9">{<block_content pos:start="171:13" pos:end="183:38">

            <comment type="block" pos:start="169:13" pos:end="169:58">/* Place the DTB after the initrd in memory */</comment>

            <decl_stmt pos:start="171:13" pos:end="175:76"><decl pos:start="171:13" pos:end="175:75"><type pos:start="171:13" pos:end="171:30"><name pos:start="171:13" pos:end="171:30">target_phys_addr_t</name></type> <name pos:start="171:32" pos:end="171:40">dtb_start</name> <init pos:start="171:42" pos:end="175:75">= <expr pos:start="171:44" pos:end="175:75"><call pos:start="171:44" pos:end="175:75"><name pos:start="171:44" pos:end="171:60">TARGET_PAGE_ALIGN</name><argument_list pos:start="171:61" pos:end="175:75">(<argument pos:start="171:62" pos:end="175:74"><expr pos:start="171:62" pos:end="175:74"><name pos:start="171:62" pos:end="171:79"><name pos:start="171:62" pos:end="171:65">info</name><operator pos:start="171:66" pos:end="171:67">-&gt;</operator><name pos:start="171:68" pos:end="171:79">loader_start</name></name>

                                                             <operator pos:start="173:62" pos:end="173:62">+</operator> <name pos:start="173:64" pos:end="173:79">INITRD_LOAD_ADDR</name>

                                                             <operator pos:start="175:62" pos:end="175:62">+</operator> <name pos:start="175:64" pos:end="175:74">initrd_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="177:13" pos:end="181:13"><if pos:start="177:13" pos:end="181:13">if <condition pos:start="177:16" pos:end="177:42">(<expr pos:start="177:17" pos:end="177:41"><call pos:start="177:17" pos:end="177:41"><name pos:start="177:17" pos:end="177:24">load_dtb</name><argument_list pos:start="177:25" pos:end="177:41">(<argument pos:start="177:26" pos:end="177:34"><expr pos:start="177:26" pos:end="177:34"><name pos:start="177:26" pos:end="177:34">dtb_start</name></expr></argument>, <argument pos:start="177:37" pos:end="177:40"><expr pos:start="177:37" pos:end="177:40"><name pos:start="177:37" pos:end="177:40">info</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:44" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:24">

                <expr_stmt pos:start="179:17" pos:end="179:24"><expr pos:start="179:17" pos:end="179:23"><call pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:20">exit</name><argument_list pos:start="179:21" pos:end="179:23">(<argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:38"><expr pos:start="183:13" pos:end="183:37"><name pos:start="183:13" pos:end="183:25"><name pos:start="183:13" pos:end="183:22">bootloader</name><index pos:start="183:23" pos:end="183:25">[<expr pos:start="183:24" pos:end="183:24"><literal type="number" pos:start="183:24" pos:end="183:24">5</literal></expr>]</index></name> <operator pos:start="183:27" pos:end="183:27">=</operator> <name pos:start="183:29" pos:end="183:37">dtb_start</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="201:9">else <block pos:start="185:16" pos:end="201:9">{<block_content pos:start="187:13" pos:end="199:13">

            <expr_stmt pos:start="187:13" pos:end="187:66"><expr pos:start="187:13" pos:end="187:65"><name pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:22">bootloader</name><index pos:start="187:23" pos:end="187:25">[<expr pos:start="187:24" pos:end="187:24"><literal type="number" pos:start="187:24" pos:end="187:24">5</literal></expr>]</index></name> <operator pos:start="187:27" pos:end="187:27">=</operator> <name pos:start="187:29" pos:end="187:46"><name pos:start="187:29" pos:end="187:32">info</name><operator pos:start="187:33" pos:end="187:34">-&gt;</operator><name pos:start="187:35" pos:end="187:46">loader_start</name></name> <operator pos:start="187:48" pos:end="187:48">+</operator> <name pos:start="187:50" pos:end="187:65">KERNEL_ARGS_ADDR</name></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="199:13"><if pos:start="189:13" pos:end="199:13">if <condition pos:start="189:16" pos:end="189:47">(<expr pos:start="189:17" pos:end="189:46"><name pos:start="189:17" pos:end="189:30"><name pos:start="189:17" pos:end="189:20">info</name><operator pos:start="189:21" pos:end="189:22">-&gt;</operator><name pos:start="189:23" pos:end="189:30">ram_size</name></name> <operator pos:start="189:32" pos:end="189:33">&gt;=</operator> <operator pos:start="189:35" pos:end="189:35">(</operator><literal type="number" pos:start="189:36" pos:end="189:39">1ULL</literal> <operator pos:start="189:41" pos:end="189:42">&lt;&lt;</operator> <literal type="number" pos:start="189:44" pos:end="189:45">32</literal><operator pos:start="189:46" pos:end="189:46">)</operator></expr>)</condition> <block pos:start="189:49" pos:end="199:13">{<block_content pos:start="191:17" pos:end="197:24">

                <expr_stmt pos:start="191:17" pos:end="195:42"><expr pos:start="191:17" pos:end="195:41"><call pos:start="191:17" pos:end="195:41"><name pos:start="191:17" pos:end="191:23">fprintf</name><argument_list pos:start="191:24" pos:end="195:41">(<argument pos:start="191:25" pos:end="191:30"><expr pos:start="191:25" pos:end="191:30"><name pos:start="191:25" pos:end="191:30">stderr</name></expr></argument>, <argument pos:start="191:33" pos:end="195:40"><expr pos:start="191:33" pos:end="195:40"><literal type="string" pos:start="191:33" pos:end="191:78">"qemu: RAM size must be less than 4GB to boot"</literal>

                        <literal type="string" pos:start="193:25" pos:end="193:78">" Linux kernel using ATAGS (try passing a device tree"</literal>

                        <literal type="string" pos:start="195:25" pos:end="195:40">" using -dtb)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:24"><expr pos:start="197:17" pos:end="197:23"><call pos:start="197:17" pos:end="197:23"><name pos:start="197:17" pos:end="197:20">exit</name><argument_list pos:start="197:21" pos:end="197:23">(<argument pos:start="197:22" pos:end="197:22"><expr pos:start="197:22" pos:end="197:22"><literal type="number" pos:start="197:22" pos:end="197:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:30"><expr pos:start="203:9" pos:end="203:29"><name pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:18">bootloader</name><index pos:start="203:19" pos:end="203:21">[<expr pos:start="203:20" pos:end="203:20"><literal type="number" pos:start="203:20" pos:end="203:20">6</literal></expr>]</index></name> <operator pos:start="203:23" pos:end="203:23">=</operator> <name pos:start="203:25" pos:end="203:29">entry</name></expr>;</expr_stmt>

        <for pos:start="205:9" pos:end="209:9">for <control pos:start="205:13" pos:end="205:52">(<init pos:start="205:14" pos:end="205:19"><expr pos:start="205:14" pos:end="205:18"><name pos:start="205:14" pos:end="205:14">n</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</init> <condition pos:start="205:21" pos:end="205:47"><expr pos:start="205:21" pos:end="205:46"><name pos:start="205:21" pos:end="205:21">n</name> <operator pos:start="205:23" pos:end="205:23">&lt;</operator> <sizeof pos:start="205:25" pos:end="205:42">sizeof<argument_list pos:start="205:31" pos:end="205:42">(<argument pos:start="205:32" pos:end="205:41"><expr pos:start="205:32" pos:end="205:41"><name pos:start="205:32" pos:end="205:41">bootloader</name></expr></argument>)</argument_list></sizeof> <operator pos:start="205:44" pos:end="205:44">/</operator> <literal type="number" pos:start="205:46" pos:end="205:46">4</literal></expr>;</condition> <incr pos:start="205:49" pos:end="205:51"><expr pos:start="205:49" pos:end="205:51"><name pos:start="205:49" pos:end="205:49">n</name><operator pos:start="205:50" pos:end="205:51">++</operator></expr></incr>)</control> <block pos:start="205:54" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:51">

            <expr_stmt pos:start="207:13" pos:end="207:51"><expr pos:start="207:13" pos:end="207:50"><name pos:start="207:13" pos:end="207:25"><name pos:start="207:13" pos:end="207:22">bootloader</name><index pos:start="207:23" pos:end="207:25">[<expr pos:start="207:24" pos:end="207:24"><name pos:start="207:24" pos:end="207:24">n</name></expr>]</index></name> <operator pos:start="207:27" pos:end="207:27">=</operator> <call pos:start="207:29" pos:end="207:50"><name pos:start="207:29" pos:end="207:35">tswap32</name><argument_list pos:start="207:36" pos:end="207:50">(<argument pos:start="207:37" pos:end="207:49"><expr pos:start="207:37" pos:end="207:49"><name pos:start="207:37" pos:end="207:49"><name pos:start="207:37" pos:end="207:46">bootloader</name><index pos:start="207:47" pos:end="207:49">[<expr pos:start="207:48" pos:end="207:48"><name pos:start="207:48" pos:end="207:48">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="211:9" pos:end="213:47"><expr pos:start="211:9" pos:end="213:46"><call pos:start="211:9" pos:end="213:46"><name pos:start="211:9" pos:end="211:26">rom_add_blob_fixed</name><argument_list pos:start="211:27" pos:end="213:46">(<argument pos:start="211:28" pos:end="211:39"><expr pos:start="211:28" pos:end="211:39"><literal type="string" pos:start="211:28" pos:end="211:39">"bootloader"</literal></expr></argument>, <argument pos:start="211:42" pos:end="211:51"><expr pos:start="211:42" pos:end="211:51"><name pos:start="211:42" pos:end="211:51">bootloader</name></expr></argument>, <argument pos:start="211:54" pos:end="211:71"><expr pos:start="211:54" pos:end="211:71"><sizeof pos:start="211:54" pos:end="211:71">sizeof<argument_list pos:start="211:60" pos:end="211:71">(<argument pos:start="211:61" pos:end="211:70"><expr pos:start="211:61" pos:end="211:70"><name pos:start="211:61" pos:end="211:70">bootloader</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="213:28" pos:end="213:45"><expr pos:start="213:28" pos:end="213:45"><name pos:start="213:28" pos:end="213:45"><name pos:start="213:28" pos:end="213:31">info</name><operator pos:start="213:32" pos:end="213:33">-&gt;</operator><name pos:start="213:34" pos:end="213:45">loader_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:30">(<expr pos:start="215:13" pos:end="215:29"><name pos:start="215:13" pos:end="215:25"><name pos:start="215:13" pos:end="215:16">info</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:25">nb_cpus</name></name> <operator pos:start="215:27" pos:end="215:27">&gt;</operator> <literal type="number" pos:start="215:29" pos:end="215:29">1</literal></expr>)</condition> <block pos:start="215:32" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:50">

            <expr_stmt pos:start="217:13" pos:end="217:50"><expr pos:start="217:13" pos:end="217:49"><call pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:38"><name pos:start="217:13" pos:end="217:16">info</name><operator pos:start="217:17" pos:end="217:18">-&gt;</operator><name pos:start="217:19" pos:end="217:38">write_secondary_boot</name></name><argument_list pos:start="217:39" pos:end="217:49">(<argument pos:start="217:40" pos:end="217:42"><expr pos:start="217:40" pos:end="217:42"><name pos:start="217:40" pos:end="217:42">cpu</name></expr></argument>, <argument pos:start="217:45" pos:end="217:48"><expr pos:start="217:45" pos:end="217:48"><name pos:start="217:45" pos:end="217:48">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:30"><expr pos:start="223:5" pos:end="223:29"><name pos:start="223:5" pos:end="223:18"><name pos:start="223:5" pos:end="223:8">info</name><operator pos:start="223:9" pos:end="223:10">-&gt;</operator><name pos:start="223:11" pos:end="223:18">is_linux</name></name> <operator pos:start="223:20" pos:end="223:20">=</operator> <name pos:start="223:22" pos:end="223:29">is_linux</name></expr>;</expr_stmt>



    <for pos:start="227:5" pos:end="235:5">for <control pos:start="227:9" pos:end="227:36">(<init pos:start="227:10" pos:end="227:10">;</init> <condition pos:start="227:12" pos:end="227:15"><expr pos:start="227:12" pos:end="227:14"><name pos:start="227:12" pos:end="227:14">env</name></expr>;</condition> <incr pos:start="227:17" pos:end="227:35"><expr pos:start="227:17" pos:end="227:35"><name pos:start="227:17" pos:end="227:19">env</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:35"><name pos:start="227:23" pos:end="227:25">env</name><operator pos:start="227:26" pos:end="227:27">-&gt;</operator><name pos:start="227:28" pos:end="227:35">next_cpu</name></name></expr></incr>)</control> <block pos:start="227:38" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:47">

        <expr_stmt pos:start="229:9" pos:end="229:35"><expr pos:start="229:9" pos:end="229:34"><name pos:start="229:9" pos:end="229:11">cpu</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:34"><name pos:start="229:15" pos:end="229:29">arm_env_get_cpu</name><argument_list pos:start="229:30" pos:end="229:34">(<argument pos:start="229:31" pos:end="229:33"><expr pos:start="229:31" pos:end="229:33"><name pos:start="229:31" pos:end="229:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:30"><expr pos:start="231:9" pos:end="231:29"><name pos:start="231:9" pos:end="231:22"><name pos:start="231:9" pos:end="231:11">env</name><operator pos:start="231:12" pos:end="231:13">-&gt;</operator><name pos:start="231:14" pos:end="231:22">boot_info</name></name> <operator pos:start="231:24" pos:end="231:24">=</operator> <name pos:start="231:26" pos:end="231:29">info</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:47"><expr pos:start="233:9" pos:end="233:46"><call pos:start="233:9" pos:end="233:46"><name pos:start="233:9" pos:end="233:27">qemu_register_reset</name><argument_list pos:start="233:28" pos:end="233:46">(<argument pos:start="233:29" pos:end="233:40"><expr pos:start="233:29" pos:end="233:40"><name pos:start="233:29" pos:end="233:40">do_cpu_reset</name></expr></argument>, <argument pos:start="233:43" pos:end="233:45"><expr pos:start="233:43" pos:end="233:45"><name pos:start="233:43" pos:end="233:45">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
