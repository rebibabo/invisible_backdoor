<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25074.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">vdi_check</name><parameter_list pos:start="1:21" pos:end="3:39">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><name pos:start="1:44" pos:end="1:58">BdrvCheckResult</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">res</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:38"><decl pos:start="3:22" pos:end="3:38"><type pos:start="3:22" pos:end="3:38"><name pos:start="3:22" pos:end="3:34">BdrvCheckMode</name></type> <name pos:start="3:36" pos:end="3:38">fix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="9:5" pos:end="103:13">

    <comment type="block" pos:start="7:5" pos:end="7:43">/* TODO: additional checks possible. */</comment>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BDRVVdiState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:48">= <expr pos:start="9:23" pos:end="9:48"><operator pos:start="9:23" pos:end="9:23">(</operator><name pos:start="9:24" pos:end="9:35">BDRVVdiState</name> <operator pos:start="9:37" pos:end="9:37">*</operator><operator pos:start="9:38" pos:end="9:38">)</operator><name pos:start="9:39" pos:end="9:48"><name pos:start="9:39" pos:end="9:40">bs</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:48">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:29">blocks_allocated</name> <init pos:start="11:31" pos:end="11:33">= <expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">block</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint32_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:18">bmap</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><call pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">logout</name><argument_list pos:start="17:11" pos:end="17:16">(<argument pos:start="17:12" pos:end="17:15"><expr pos:start="17:12" pos:end="17:15"><literal type="string" pos:start="17:12" pos:end="17:15">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">fix</name></expr>)</condition> <block pos:start="21:14" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:24">

        <return pos:start="23:9" pos:end="23:24">return <expr pos:start="23:16" pos:end="23:23"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:70"><expr pos:start="29:5" pos:end="29:69"><name pos:start="29:5" pos:end="29:8">bmap</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:69"><name pos:start="29:12" pos:end="29:23">g_try_malloc</name><argument_list pos:start="29:24" pos:end="29:69">(<argument pos:start="29:25" pos:end="29:68"><expr pos:start="29:25" pos:end="29:68"><name pos:start="29:25" pos:end="29:49"><name pos:start="29:25" pos:end="29:25">s</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:33">header</name><operator pos:start="29:34" pos:end="29:34">.</operator><name pos:start="29:35" pos:end="29:49">blocks_in_image</name></name> <operator pos:start="29:51" pos:end="29:51">*</operator> <sizeof pos:start="29:53" pos:end="29:68">sizeof<argument_list pos:start="29:59" pos:end="29:68">(<argument pos:start="29:60" pos:end="29:67"><expr pos:start="29:60" pos:end="29:67"><name pos:start="29:60" pos:end="29:67">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">header</name><operator pos:start="31:18" pos:end="31:18">.</operator><name pos:start="31:19" pos:end="31:33">blocks_in_image</name></name> <operator pos:start="31:35" pos:end="31:36">&amp;&amp;</operator> <name pos:start="31:38" pos:end="31:41">bmap</name> <operator pos:start="31:43" pos:end="31:44">==</operator> <name pos:start="31:46" pos:end="31:49">NULL</name></expr>)</condition> <block pos:start="31:52" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:23">

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:11">res</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:25">check_errors</name></name><operator pos:start="33:26" pos:end="33:27">++</operator></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:69"><expr pos:start="41:5" pos:end="41:68"><call pos:start="41:5" pos:end="41:68"><name pos:start="41:5" pos:end="41:10">memset</name><argument_list pos:start="41:11" pos:end="41:68">(<argument pos:start="41:12" pos:end="41:15"><expr pos:start="41:12" pos:end="41:15"><name pos:start="41:12" pos:end="41:15">bmap</name></expr></argument>, <argument pos:start="41:18" pos:end="41:21"><expr pos:start="41:18" pos:end="41:21"><literal type="number" pos:start="41:18" pos:end="41:21">0xff</literal></expr></argument>, <argument pos:start="41:24" pos:end="41:67"><expr pos:start="41:24" pos:end="41:67"><name pos:start="41:24" pos:end="41:48"><name pos:start="41:24" pos:end="41:24">s</name><operator pos:start="41:25" pos:end="41:26">-&gt;</operator><name pos:start="41:27" pos:end="41:32">header</name><operator pos:start="41:33" pos:end="41:33">.</operator><name pos:start="41:34" pos:end="41:48">blocks_in_image</name></name> <operator pos:start="41:50" pos:end="41:50">*</operator> <sizeof pos:start="41:52" pos:end="41:67">sizeof<argument_list pos:start="41:58" pos:end="41:67">(<argument pos:start="41:59" pos:end="41:66"><expr pos:start="41:59" pos:end="41:66"><name pos:start="41:59" pos:end="41:66">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:56">/* Check block map and value of blocks_allocated. */</comment>

    <for pos:start="47:5" pos:end="83:5">for <control pos:start="47:9" pos:end="47:63">(<init pos:start="47:10" pos:end="47:19"><expr pos:start="47:10" pos:end="47:18"><name pos:start="47:10" pos:end="47:14">block</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr>;</init> <condition pos:start="47:21" pos:end="47:54"><expr pos:start="47:21" pos:end="47:53"><name pos:start="47:21" pos:end="47:25">block</name> <operator pos:start="47:27" pos:end="47:27">&lt;</operator> <name pos:start="47:29" pos:end="47:53"><name pos:start="47:29" pos:end="47:29">s</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:37">header</name><operator pos:start="47:38" pos:end="47:38">.</operator><name pos:start="47:39" pos:end="47:53">blocks_in_image</name></name></expr>;</condition> <incr pos:start="47:56" pos:end="47:62"><expr pos:start="47:56" pos:end="47:62"><name pos:start="47:56" pos:end="47:60">block</name><operator pos:start="47:61" pos:end="47:62">++</operator></expr></incr>)</control> <block pos:start="47:65" pos:end="83:5">{<block_content pos:start="49:9" pos:end="81:9">

        <decl_stmt pos:start="49:9" pos:end="49:58"><decl pos:start="49:9" pos:end="49:57"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint32_t</name></type> <name pos:start="49:18" pos:end="49:27">bmap_entry</name> <init pos:start="49:29" pos:end="49:57">= <expr pos:start="49:31" pos:end="49:57"><call pos:start="49:31" pos:end="49:57"><name pos:start="49:31" pos:end="49:41">le32_to_cpu</name><argument_list pos:start="49:42" pos:end="49:57">(<argument pos:start="49:43" pos:end="49:56"><expr pos:start="49:43" pos:end="49:56"><name pos:start="49:43" pos:end="49:56"><name pos:start="49:43" pos:end="49:43">s</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:49">bmap</name><index pos:start="49:50" pos:end="49:56">[<expr pos:start="49:51" pos:end="49:55"><name pos:start="49:51" pos:end="49:55">block</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="51:9" pos:end="81:9"><if pos:start="51:9" pos:end="81:9">if <condition pos:start="51:12" pos:end="51:41">(<expr pos:start="51:13" pos:end="51:40"><call pos:start="51:13" pos:end="51:40"><name pos:start="51:13" pos:end="51:28">VDI_IS_ALLOCATED</name><argument_list pos:start="51:29" pos:end="51:40">(<argument pos:start="51:30" pos:end="51:39"><expr pos:start="51:30" pos:end="51:39"><name pos:start="51:30" pos:end="51:39">bmap_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:43" pos:end="81:9">{<block_content pos:start="53:13" pos:end="79:13">

            <if_stmt pos:start="53:13" pos:end="79:13"><if pos:start="53:13" pos:end="71:13">if <condition pos:start="53:16" pos:end="53:55">(<expr pos:start="53:17" pos:end="53:54"><name pos:start="53:17" pos:end="53:26">bmap_entry</name> <operator pos:start="53:28" pos:end="53:28">&lt;</operator> <name pos:start="53:30" pos:end="53:54"><name pos:start="53:30" pos:end="53:30">s</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:38">header</name><operator pos:start="53:39" pos:end="53:39">.</operator><name pos:start="53:40" pos:end="53:54">blocks_in_image</name></name></expr>)</condition> <block pos:start="53:57" pos:end="71:13">{<block_content pos:start="55:17" pos:end="69:17">

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:32">blocks_allocated</name><operator pos:start="55:33" pos:end="55:34">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="57:17" pos:end="69:17"><if pos:start="57:17" pos:end="61:17">if <condition pos:start="57:20" pos:end="57:56">(<expr pos:start="57:21" pos:end="57:55"><operator pos:start="57:21" pos:end="57:21">!</operator><call pos:start="57:22" pos:end="57:55"><name pos:start="57:22" pos:end="57:37">VDI_IS_ALLOCATED</name><argument_list pos:start="57:38" pos:end="57:55">(<argument pos:start="57:39" pos:end="57:54"><expr pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:54"><name pos:start="57:39" pos:end="57:42">bmap</name><index pos:start="57:43" pos:end="57:54">[<expr pos:start="57:44" pos:end="57:53"><name pos:start="57:44" pos:end="57:53">bmap_entry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:58" pos:end="61:17">{<block_content pos:start="59:21" pos:end="59:50">

                    <expr_stmt pos:start="59:21" pos:end="59:50"><expr pos:start="59:21" pos:end="59:49"><name pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:24">bmap</name><index pos:start="59:25" pos:end="59:36">[<expr pos:start="59:26" pos:end="59:35"><name pos:start="59:26" pos:end="59:35">bmap_entry</name></expr>]</index></name> <operator pos:start="59:38" pos:end="59:38">=</operator> <name pos:start="59:40" pos:end="59:49">bmap_entry</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="61:19" pos:end="69:17">else <block pos:start="61:24" pos:end="69:17">{<block_content pos:start="63:21" pos:end="67:39">

                    <expr_stmt pos:start="63:21" pos:end="65:89"><expr pos:start="63:21" pos:end="65:88"><call pos:start="63:21" pos:end="65:88"><name pos:start="63:21" pos:end="63:27">fprintf</name><argument_list pos:start="63:28" pos:end="65:88">(<argument pos:start="63:29" pos:end="63:34"><expr pos:start="63:29" pos:end="63:34"><name pos:start="63:29" pos:end="63:34">stderr</name></expr></argument>, <argument pos:start="63:37" pos:end="65:57"><expr pos:start="63:37" pos:end="65:57"><literal type="string" pos:start="63:37" pos:end="63:58">"ERROR: block index %"</literal> <name pos:start="63:60" pos:end="63:65">PRIu32</name>

                            <literal type="string" pos:start="65:29" pos:end="65:45">" also used by %"</literal> <name pos:start="65:47" pos:end="65:52">PRIu32</name> <literal type="string" pos:start="65:54" pos:end="65:57">"\n"</literal></expr></argument>, <argument pos:start="65:60" pos:end="65:75"><expr pos:start="65:60" pos:end="65:75"><name pos:start="65:60" pos:end="65:75"><name pos:start="65:60" pos:end="65:63">bmap</name><index pos:start="65:64" pos:end="65:75">[<expr pos:start="65:65" pos:end="65:74"><name pos:start="65:65" pos:end="65:74">bmap_entry</name></expr>]</index></name></expr></argument>, <argument pos:start="65:78" pos:end="65:87"><expr pos:start="65:78" pos:end="65:87"><name pos:start="65:78" pos:end="65:87">bmap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:39"><expr pos:start="67:21" pos:end="67:38"><name pos:start="67:21" pos:end="67:36"><name pos:start="67:21" pos:end="67:23">res</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:36">corruptions</name></name><operator pos:start="67:37" pos:end="67:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="79:13">else <block pos:start="71:20" pos:end="79:13">{<block_content pos:start="73:17" pos:end="77:35">

                <expr_stmt pos:start="73:17" pos:end="75:75"><expr pos:start="73:17" pos:end="75:74"><call pos:start="73:17" pos:end="75:74"><name pos:start="73:17" pos:end="73:23">fprintf</name><argument_list pos:start="73:24" pos:end="75:74">(<argument pos:start="73:25" pos:end="73:30"><expr pos:start="73:25" pos:end="73:30"><name pos:start="73:25" pos:end="73:30">stderr</name></expr></argument>, <argument pos:start="73:33" pos:end="75:54"><expr pos:start="73:33" pos:end="75:54"><literal type="string" pos:start="73:33" pos:end="73:54">"ERROR: block index %"</literal> <name pos:start="73:56" pos:end="73:61">PRIu32</name>

                        <literal type="string" pos:start="75:25" pos:end="75:42">" too large, is %"</literal> <name pos:start="75:44" pos:end="75:49">PRIu32</name> <literal type="string" pos:start="75:51" pos:end="75:54">"\n"</literal></expr></argument>, <argument pos:start="75:57" pos:end="75:61"><expr pos:start="75:57" pos:end="75:61"><name pos:start="75:57" pos:end="75:61">block</name></expr></argument>, <argument pos:start="75:64" pos:end="75:73"><expr pos:start="75:64" pos:end="75:73"><name pos:start="75:64" pos:end="75:73">bmap_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:35"><expr pos:start="77:17" pos:end="77:34"><name pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:19">res</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:32">corruptions</name></name><operator pos:start="77:33" pos:end="77:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="85:5" pos:end="95:5"><if pos:start="85:5" pos:end="95:5">if <condition pos:start="85:8" pos:end="85:55">(<expr pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:24">blocks_allocated</name> <operator pos:start="85:26" pos:end="85:27">!=</operator> <name pos:start="85:29" pos:end="85:54"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:37">header</name><operator pos:start="85:38" pos:end="85:38">.</operator><name pos:start="85:39" pos:end="85:54">blocks_allocated</name></name></expr>)</condition> <block pos:start="85:57" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:27">

        <expr_stmt pos:start="87:9" pos:end="91:61"><expr pos:start="87:9" pos:end="91:60"><call pos:start="87:9" pos:end="91:60"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="91:60">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="89:42"><expr pos:start="87:25" pos:end="89:42"><literal type="string" pos:start="87:25" pos:end="87:64">"ERROR: allocated blocks mismatch, is %"</literal> <name pos:start="87:66" pos:end="87:71">PRIu32</name>

               <literal type="string" pos:start="89:16" pos:end="89:30">", should be %"</literal> <name pos:start="89:32" pos:end="89:37">PRIu32</name> <literal type="string" pos:start="89:39" pos:end="89:42">"\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:31"><expr pos:start="91:16" pos:end="91:31"><name pos:start="91:16" pos:end="91:31">blocks_allocated</name></expr></argument>, <argument pos:start="91:34" pos:end="91:59"><expr pos:start="91:34" pos:end="91:59"><name pos:start="91:34" pos:end="91:59"><name pos:start="91:34" pos:end="91:34">s</name><operator pos:start="91:35" pos:end="91:36">-&gt;</operator><name pos:start="91:37" pos:end="91:42">header</name><operator pos:start="91:43" pos:end="91:43">.</operator><name pos:start="91:44" pos:end="91:59">blocks_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:11">res</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:24">corruptions</name></name><operator pos:start="93:25" pos:end="93:26">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:17"><expr pos:start="99:5" pos:end="99:16"><call pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:10">g_free</name><argument_list pos:start="99:11" pos:end="99:16">(<argument pos:start="99:12" pos:end="99:15"><expr pos:start="99:12" pos:end="99:15"><name pos:start="99:12" pos:end="99:15">bmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
