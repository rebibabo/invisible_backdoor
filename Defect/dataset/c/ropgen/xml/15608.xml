<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15608.c" pos:tabs="8"><function pos:start="1:1" pos:end="155:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">vhdx_parse_log</name><parameter_list pos:start="1:19" pos:end="3:32">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:54">BDRVVHDXState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:72"><decl pos:start="1:60" pos:end="1:72"><type pos:start="1:60" pos:end="1:72"><name pos:start="1:60" pos:end="1:63">bool</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:72">flushed</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:31"><decl pos:start="3:20" pos:end="3:31"><type pos:start="3:20" pos:end="3:31"><name pos:start="3:20" pos:end="3:24">Error</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier><modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:31">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="155:1">{<block_content pos:start="7:5" pos:end="153:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">VHDXHeader</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">VHDXLogSequence</name></type> <name pos:start="11:21" pos:end="11:24">logs</name> <init pos:start="11:26" pos:end="11:32">= <expr pos:start="11:28" pos:end="11:32"><block pos:start="11:28" pos:end="11:32">{ <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:7">hdr</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <name pos:start="15:11" pos:end="15:36"><name pos:start="15:11" pos:end="15:11">s</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:20">headers</name><index pos:start="15:21" pos:end="15:36">[<expr pos:start="15:22" pos:end="15:35"><name pos:start="15:22" pos:end="15:35"><name pos:start="15:22" pos:end="15:22">s</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:35">curr_header</name></name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:21"><expr pos:start="19:5" pos:end="19:20"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:12">flushed</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <name pos:start="19:16" pos:end="19:20">false</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:45">/* s-&gt;log.hdr is freed in vhdx_close() */</comment>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">log</name><operator pos:start="25:15" pos:end="25:15">.</operator><name pos:start="25:16" pos:end="25:18">hdr</name></name> <operator pos:start="25:20" pos:end="25:21">==</operator> <name pos:start="25:23" pos:end="25:26">NULL</name></expr>)</condition> <block pos:start="25:29" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:69">

        <expr_stmt pos:start="27:9" pos:end="27:69"><expr pos:start="27:9" pos:end="27:68"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">log</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:18">hdr</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <call pos:start="27:22" pos:end="27:68"><name pos:start="27:22" pos:end="27:36">qemu_blockalign</name><argument_list pos:start="27:37" pos:end="27:68">(<argument pos:start="27:38" pos:end="27:39"><expr pos:start="27:38" pos:end="27:39"><name pos:start="27:38" pos:end="27:39">bs</name></expr></argument>, <argument pos:start="27:42" pos:end="27:67"><expr pos:start="27:42" pos:end="27:67"><sizeof pos:start="27:42" pos:end="27:67">sizeof<argument_list pos:start="27:48" pos:end="27:67">(<argument pos:start="27:49" pos:end="27:66"><expr pos:start="27:49" pos:end="27:66"><name pos:start="27:49" pos:end="27:66">VHDXLogEntryHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:36"><expr pos:start="33:5" pos:end="33:35"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:10">log</name><operator pos:start="33:11" pos:end="33:11">.</operator><name pos:start="33:12" pos:end="33:17">offset</name></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:35"><name pos:start="33:21" pos:end="33:23">hdr</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:35">log_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:10">log</name><operator pos:start="35:11" pos:end="35:11">.</operator><name pos:start="35:12" pos:end="35:17">length</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:35"><name pos:start="35:21" pos:end="35:23">hdr</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:35">log_length</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="41:42">(<expr pos:start="39:9" pos:end="41:41"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:14">log</name><operator pos:start="39:15" pos:end="39:15">.</operator><name pos:start="39:16" pos:end="39:21">offset</name></name> <operator pos:start="39:23" pos:end="39:23">&lt;</operator> <name pos:start="39:25" pos:end="39:41">VHDX_LOG_MIN_SIZE</name> <operator pos:start="39:43" pos:end="39:44">||</operator>

        <name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:14">log</name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:21">offset</name></name> <operator pos:start="41:23" pos:end="41:23">%</operator> <name pos:start="41:25" pos:end="41:41">VHDX_LOG_MIN_SIZE</name></expr>)</condition> <block pos:start="41:44" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:18">

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">-</operator><name pos:start="43:16" pos:end="43:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:54">/* per spec, only log version of 0 is supported */</comment>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:30">(<expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:11">hdr</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:24">log_version</name></name> <operator pos:start="53:26" pos:end="53:27">!=</operator> <literal type="number" pos:start="53:29" pos:end="53:29">0</literal></expr>)</condition> <block pos:start="53:32" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">-</operator><name pos:start="55:16" pos:end="55:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:18">goto <name pos:start="57:14" pos:end="57:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:42">/* If either the log guid, or log length is zero,

     * then a replay log is not present */</comment>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:42">(<expr pos:start="67:9" pos:end="67:41"><call pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:15">guid_eq</name><argument_list pos:start="67:16" pos:end="67:41">(<argument pos:start="67:17" pos:end="67:29"><expr pos:start="67:17" pos:end="67:29"><name pos:start="67:17" pos:end="67:29"><name pos:start="67:17" pos:end="67:19">hdr</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:29">log_guid</name></name></expr></argument>, <argument pos:start="67:32" pos:end="67:40"><expr pos:start="67:32" pos:end="67:40"><name pos:start="67:32" pos:end="67:40">zero_guid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:44" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:18">

        <goto pos:start="69:9" pos:end="69:18">goto <name pos:start="69:14" pos:end="69:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:29">(<expr pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:11">hdr</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:23">log_length</name></name> <operator pos:start="75:25" pos:end="75:26">==</operator> <literal type="number" pos:start="75:28" pos:end="75:28">0</literal></expr>)</condition> <block pos:start="75:31" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:44">(<expr pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:11">hdr</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:23">log_length</name></name> <operator pos:start="83:25" pos:end="83:25">%</operator> <name pos:start="83:27" pos:end="83:43">VHDX_LOG_MIN_SIZE</name></expr>)</condition> <block pos:start="83:46" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="95:5" pos:end="97:56">/* The log is present, we need to find if and where there is an active

     * sequence of valid entries present in the log.  */</comment>



    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="101:39"><name pos:start="101:11" pos:end="101:25">vhdx_log_search</name><argument_list pos:start="101:26" pos:end="101:39">(<argument pos:start="101:27" pos:end="101:28"><expr pos:start="101:27" pos:end="101:28"><name pos:start="101:27" pos:end="101:28">bs</name></expr></argument>, <argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><name pos:start="101:31" pos:end="101:31">s</name></expr></argument>, <argument pos:start="101:34" pos:end="101:38"><expr pos:start="101:34" pos:end="101:38"><operator pos:start="101:34" pos:end="101:34">&amp;</operator><name pos:start="101:35" pos:end="101:38">logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:16">(<expr pos:start="103:9" pos:end="103:15"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">&lt;</operator> <literal type="number" pos:start="103:15" pos:end="103:15">0</literal></expr>)</condition> <block pos:start="103:18" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:18">

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="145:5"><if pos:start="111:5" pos:end="145:5">if <condition pos:start="111:8" pos:end="111:19">(<expr pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:12">logs</name><operator pos:start="111:13" pos:end="111:13">.</operator><name pos:start="111:14" pos:end="111:18">valid</name></name></expr>)</condition> <block pos:start="111:21" pos:end="145:5">{<block_content pos:start="113:9" pos:end="143:24">

        <if_stmt pos:start="113:9" pos:end="131:9"><if pos:start="113:9" pos:end="131:9">if <condition pos:start="113:12" pos:end="113:26">(<expr pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:14">bs</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:25">read_only</name></name></expr>)</condition> <block pos:start="113:28" pos:end="131:9">{<block_content pos:start="115:13" pos:end="129:22">

            <expr_stmt pos:start="115:13" pos:end="115:25"><expr pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <operator pos:start="115:19" pos:end="115:19">-</operator><name pos:start="115:20" pos:end="115:24">EPERM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="127:57"><expr pos:start="117:13" pos:end="127:56"><call pos:start="117:13" pos:end="127:56"><name pos:start="117:13" pos:end="117:28">error_setg_errno</name><argument_list pos:start="117:29" pos:end="127:56">(<argument pos:start="117:30" pos:end="117:33"><expr pos:start="117:30" pos:end="117:33"><name pos:start="117:30" pos:end="117:33">errp</name></expr></argument>, <argument pos:start="117:36" pos:end="117:40"><expr pos:start="117:36" pos:end="117:40"><name pos:start="117:36" pos:end="117:40">EPERM</name></expr></argument>,

                             <argument pos:start="119:30" pos:end="125:39"><expr pos:start="119:30" pos:end="125:39"><literal type="string" pos:start="119:30" pos:end="119:74">"VHDX image file '%s' opened read-only, but "</literal>

                             <literal type="string" pos:start="121:30" pos:end="121:77">"contains a log that needs to be replayed.  To "</literal>

                             <literal type="string" pos:start="123:30" pos:end="123:76">"replay the log, execute:\n qemu-img check -r "</literal>

                             <literal type="string" pos:start="125:30" pos:end="125:39">"all '%s'"</literal></expr></argument>,

                             <argument pos:start="127:30" pos:end="127:41"><expr pos:start="127:30" pos:end="127:41"><name pos:start="127:30" pos:end="127:41"><name pos:start="127:30" pos:end="127:31">bs</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:41">filename</name></name></expr></argument>, <argument pos:start="127:44" pos:end="127:55"><expr pos:start="127:44" pos:end="127:55"><name pos:start="127:44" pos:end="127:55"><name pos:start="127:44" pos:end="127:45">bs</name><operator pos:start="127:46" pos:end="127:47">-&gt;</operator><name pos:start="127:48" pos:end="127:55">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:22">goto <name pos:start="129:18" pos:end="129:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="133:9" pos:end="133:31">/* now flush the log */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:43"><expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:42"><name pos:start="135:15" pos:end="135:28">vhdx_log_flush</name><argument_list pos:start="135:29" pos:end="135:42">(<argument pos:start="135:30" pos:end="135:31"><expr pos:start="135:30" pos:end="135:31"><name pos:start="135:30" pos:end="135:31">bs</name></expr></argument>, <argument pos:start="135:34" pos:end="135:34"><expr pos:start="135:34" pos:end="135:34"><name pos:start="135:34" pos:end="135:34">s</name></expr></argument>, <argument pos:start="135:37" pos:end="135:41"><expr pos:start="135:37" pos:end="135:41"><operator pos:start="135:37" pos:end="135:37">&amp;</operator><name pos:start="135:38" pos:end="135:41">logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if <condition pos:start="137:12" pos:end="137:20">(<expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&lt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition> <block pos:start="137:22" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:22">

            <goto pos:start="139:13" pos:end="139:22">goto <name pos:start="139:18" pos:end="139:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:24"><expr pos:start="143:9" pos:end="143:23"><operator pos:start="143:9" pos:end="143:9">*</operator><name pos:start="143:10" pos:end="143:16">flushed</name> <operator pos:start="143:18" pos:end="143:18">=</operator> <name pos:start="143:20" pos:end="143:23">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>





<label pos:start="151:1" pos:end="151:5"><name pos:start="151:1" pos:end="151:4">exit</name>:</label>

    <return pos:start="153:5" pos:end="153:15">return <expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
