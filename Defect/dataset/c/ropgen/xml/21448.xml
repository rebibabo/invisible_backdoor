<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21448.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">ppc_store_sdr1</name><parameter_list pos:start="1:20" pos:end="1:57">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:36"><name pos:start="1:21" pos:end="1:31">CPUPPCState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:50">target_ulong</name></type> <name pos:start="1:52" pos:end="1:56">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <expr_stmt pos:start="5:5" pos:end="5:75"><expr pos:start="5:5" pos:end="5:74"><call pos:start="5:5" pos:end="5:74"><name pos:start="5:5" pos:end="5:17">qemu_log_mask</name><argument_list pos:start="5:18" pos:end="5:74">(<argument pos:start="5:19" pos:end="5:29"><expr pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:29">CPU_LOG_MMU</name></expr></argument>, <argument pos:start="5:32" pos:end="5:56"><expr pos:start="5:32" pos:end="5:56"><literal type="string" pos:start="5:32" pos:end="5:37">"%s: "</literal> <name pos:start="5:39" pos:end="5:51">TARGET_FMT_lx</name> <literal type="string" pos:start="5:53" pos:end="5:56">"\n"</literal></expr></argument>, <argument pos:start="5:59" pos:end="5:66"><expr pos:start="5:59" pos:end="5:66"><name pos:start="5:59" pos:end="5:66">__func__</name></expr></argument>, <argument pos:start="5:69" pos:end="5:73"><expr pos:start="5:69" pos:end="5:73"><name pos:start="5:69" pos:end="5:73">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:32"><expr pos:start="7:5" pos:end="7:31"><call pos:start="7:5" pos:end="7:31"><name pos:start="7:5" pos:end="7:10">assert</name><argument_list pos:start="7:11" pos:end="7:31">(<argument pos:start="7:12" pos:end="7:30"><expr pos:start="7:12" pos:end="7:30"><operator pos:start="7:12" pos:end="7:12">!</operator><name pos:start="7:13" pos:end="7:30"><name pos:start="7:13" pos:end="7:15">env</name><operator pos:start="7:16" pos:end="7:17">-&gt;</operator><name pos:start="7:18" pos:end="7:30">external_htab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="12:0"><expr pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:7">env</name><operator pos:start="9:8" pos:end="9:9">-&gt;</operator><name pos:start="9:10" pos:end="9:12">spr</name><index pos:start="9:13" pos:end="9:22">[<expr pos:start="9:14" pos:end="9:21"><name pos:start="9:14" pos:end="9:21">SPR_SDR1</name></expr>]</index></name> <operator pos:start="9:24" pos:end="9:24">=</operator> <name pos:start="9:26" pos:end="9:30">value</name></expr>;</expr_stmt>

<cpp:if pos:start="11:1" pos:end="11:25">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:25">(<argument pos:start="11:13" pos:end="11:24"><expr pos:start="11:13" pos:end="11:24"><name pos:start="11:13" pos:end="11:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="13:5" pos:end="43:5"><if pos:start="13:5" pos:end="31:5">if <condition pos:start="13:8" pos:end="13:40">(<expr pos:start="13:9" pos:end="13:39"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:11">env</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:22">mmu_model</name></name> <operator pos:start="13:24" pos:end="13:24">&amp;</operator> <name pos:start="13:26" pos:end="13:39">POWERPC_MMU_64</name></expr>)</condition> <block pos:start="13:42" pos:end="31:5">{<block_content pos:start="15:9" pos:end="29:9">

        <decl_stmt pos:start="15:9" pos:end="15:47"><decl pos:start="15:9" pos:end="15:46"><type pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:18">PowerPCCPU</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:23">cpu</name> <init pos:start="15:25" pos:end="15:46">= <expr pos:start="15:27" pos:end="15:46"><call pos:start="15:27" pos:end="15:46"><name pos:start="15:27" pos:end="15:41">ppc_env_get_cpu</name><argument_list pos:start="15:42" pos:end="15:46">(<argument pos:start="15:43" pos:end="15:45"><expr pos:start="15:43" pos:end="15:45"><name pos:start="15:43" pos:end="15:45">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:32"><decl pos:start="17:9" pos:end="17:31"><type pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:13">Error</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:24">local_err</name> <init pos:start="17:26" pos:end="17:31">= <expr pos:start="17:28" pos:end="17:31"><name pos:start="17:28" pos:end="17:31">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:52"><expr pos:start="21:9" pos:end="21:51"><call pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:27">ppc_hash64_set_sdr1</name><argument_list pos:start="21:28" pos:end="21:51">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">cpu</name></expr></argument>, <argument pos:start="21:34" pos:end="21:38"><expr pos:start="21:34" pos:end="21:38"><name pos:start="21:34" pos:end="21:38">value</name></expr></argument>, <argument pos:start="21:41" pos:end="21:50"><expr pos:start="21:41" pos:end="21:50"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:50">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:22">(<expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:21">local_err</name></expr>)</condition> <block pos:start="23:24" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:34">

            <expr_stmt pos:start="25:13" pos:end="25:40"><expr pos:start="25:13" pos:end="25:39"><call pos:start="25:13" pos:end="25:39"><name pos:start="25:13" pos:end="25:28">error_report_err</name><argument_list pos:start="25:29" pos:end="25:39">(<argument pos:start="25:30" pos:end="25:38"><expr pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:34"><expr pos:start="27:13" pos:end="27:33"><call pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:22">error_free</name><argument_list pos:start="27:23" pos:end="27:33">(<argument pos:start="27:24" pos:end="27:32"><expr pos:start="27:24" pos:end="27:32"><name pos:start="27:24" pos:end="27:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="43:5">else

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="33:8" pos:end="33:34">/* defined(TARGET_PPC64) */</comment>

    <block pos:start="35:5" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:48">

        <comment type="block" pos:start="37:9" pos:end="37:59">/* FIXME: Should check for valid HTABMASK values */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:68"><expr pos:start="39:9" pos:end="39:67"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:11">env</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:22">htab_mask</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <operator pos:start="39:26" pos:end="39:26">(</operator><operator pos:start="39:27" pos:end="39:27">(</operator><name pos:start="39:28" pos:end="39:32">value</name> <operator pos:start="39:34" pos:end="39:34">&amp;</operator> <name pos:start="39:36" pos:end="39:50">SDR_32_HTABMASK</name><operator pos:start="39:51" pos:end="39:51">)</operator> <operator pos:start="39:53" pos:end="39:54">&lt;&lt;</operator> <literal type="number" pos:start="39:56" pos:end="39:57">16</literal><operator pos:start="39:58" pos:end="39:58">)</operator> <operator pos:start="39:60" pos:end="39:60">|</operator> <literal type="number" pos:start="39:62" pos:end="39:67">0xFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:48"><expr pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:11">env</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:22">htab_base</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:30">value</name> <operator pos:start="41:32" pos:end="41:32">&amp;</operator> <name pos:start="41:34" pos:end="41:47">SDR_32_HTABORG</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
