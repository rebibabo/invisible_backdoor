<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1761.c" pos:tabs="8"><function pos:start="1:1" pos:end="299:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">xen_pt_pci_write_config</name><parameter_list pos:start="1:36" pos:end="3:58">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:45">PCIDevice</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">d</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:44">uint32_t</name></type> <name pos:start="3:46" pos:end="3:48">val</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:57"><decl pos:start="3:51" pos:end="3:57"><type pos:start="3:51" pos:end="3:57"><name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:57">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="299:1">{<block_content pos:start="7:5" pos:end="297:5">

    <decl_stmt pos:start="7:5" pos:end="7:74"><decl pos:start="7:5" pos:end="7:73"><type pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:26">XenPCIPassthroughState</name> <modifier pos:start="7:28" pos:end="7:28">*</modifier></type><name pos:start="7:29" pos:end="7:29">s</name> <init pos:start="7:31" pos:end="7:73">= <expr pos:start="7:33" pos:end="7:73"><call pos:start="7:33" pos:end="7:73"><name pos:start="7:33" pos:end="7:41">DO_UPCAST</name><argument_list pos:start="7:42" pos:end="7:73">(<argument pos:start="7:43" pos:end="7:64"><expr pos:start="7:43" pos:end="7:64"><name pos:start="7:43" pos:end="7:64">XenPCIPassthroughState</name></expr></argument>, <argument pos:start="7:67" pos:end="7:69"><expr pos:start="7:67" pos:end="7:69"><name pos:start="7:67" pos:end="7:69">dev</name></expr></argument>, <argument pos:start="7:72" pos:end="7:72"><expr pos:start="7:72" pos:end="7:72"><name pos:start="7:72" pos:end="7:72">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">index</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">XenPTRegGroup</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:32">reg_grp_entry</name> <init pos:start="11:34" pos:end="11:39">= <expr pos:start="11:36" pos:end="11:39"><name pos:start="11:36" pos:end="11:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">rc</name> <init pos:start="13:12" pos:end="13:14">= <expr pos:start="13:14" pos:end="13:14"><literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:21">read_val</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>, <decl pos:start="15:28" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:28" pos:end="15:34">wb_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">emul_len</name> <init pos:start="17:18" pos:end="17:20">= <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">XenPTReg</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">reg_entry</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:22">find_addr</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">addr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">XenPTRegInfo</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">reg</name> <init pos:start="23:23" pos:end="23:28">= <expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:53">(<expr pos:start="27:9" pos:end="27:52"><call pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:38">xen_pt_pci_config_access_check</name><argument_list pos:start="27:39" pos:end="27:52">(<argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">d</name></expr></argument>, <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">addr</name></expr></argument>, <argument pos:start="27:49" pos:end="27:51"><expr pos:start="27:49" pos:end="27:51"><name pos:start="27:49" pos:end="27:51">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:55" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><call pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:21">XEN_PT_LOG_CONFIG</name><argument_list pos:start="35:22" pos:end="35:40">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">d</name></expr></argument>, <argument pos:start="35:26" pos:end="35:29"><expr pos:start="35:26" pos:end="35:29"><name pos:start="35:26" pos:end="35:29">addr</name></expr></argument>, <argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">val</name></expr></argument>, <argument pos:start="35:37" pos:end="35:39"><expr pos:start="35:37" pos:end="35:39"><name pos:start="35:37" pos:end="35:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:35">/* check unused BAR register */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:9">index</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:44"><name pos:start="41:13" pos:end="41:38">xen_pt_bar_offset_to_index</name><argument_list pos:start="41:39" pos:end="41:44">(<argument pos:start="41:40" pos:end="41:43"><expr pos:start="41:40" pos:end="41:43"><name pos:start="41:40" pos:end="41:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="45:61">(<expr pos:start="43:9" pos:end="45:60"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:14">index</name> <operator pos:start="43:16" pos:end="43:17">&gt;=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal><operator pos:start="43:20" pos:end="43:20">)</operator> <operator pos:start="43:22" pos:end="43:23">&amp;&amp;</operator> <operator pos:start="43:25" pos:end="43:25">(</operator><name pos:start="43:26" pos:end="43:28">val</name> <operator pos:start="43:30" pos:end="43:30">&gt;</operator> <literal type="number" pos:start="43:32" pos:end="43:32">0</literal> <operator pos:start="43:34" pos:end="43:35">&amp;&amp;</operator> <name pos:start="43:37" pos:end="43:39">val</name> <operator pos:start="43:41" pos:end="43:41">&lt;</operator> <name pos:start="43:43" pos:end="43:57">XEN_PT_BAR_ALLF</name><operator pos:start="43:58" pos:end="43:58">)</operator> <operator pos:start="43:60" pos:end="43:61">&amp;&amp;</operator>

        <operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:24"><name pos:start="45:10" pos:end="45:10">s</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:17">bases</name><index pos:start="45:18" pos:end="45:24">[<expr pos:start="45:19" pos:end="45:23"><name pos:start="45:19" pos:end="45:23">index</name></expr>]</index></name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:33">bar_flag</name> <operator pos:start="45:35" pos:end="45:36">==</operator> <name pos:start="45:38" pos:end="45:59">XEN_PT_BAR_FLAG_UNUSED</name><operator pos:start="45:60" pos:end="45:60">)</operator></expr>)</condition> <block pos:start="45:63" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:70">

        <expr_stmt pos:start="47:9" pos:end="49:70"><expr pos:start="47:9" pos:end="49:69"><call pos:start="47:9" pos:end="49:69"><name pos:start="47:9" pos:end="47:19">XEN_PT_WARN</name><argument_list pos:start="47:20" pos:end="49:69">(<argument pos:start="47:21" pos:end="47:21"><expr pos:start="47:21" pos:end="47:21"><name pos:start="47:21" pos:end="47:21">d</name></expr></argument>, <argument pos:start="47:24" pos:end="49:57"><expr pos:start="47:24" pos:end="49:57"><literal type="string" pos:start="47:24" pos:end="47:77">"Guest attempt to set address to unused Base Address "</literal>

                    <literal type="string" pos:start="49:21" pos:end="49:57">"Register. (addr: 0x%02x, len: %d)\n"</literal></expr></argument>, <argument pos:start="49:60" pos:end="49:63"><expr pos:start="49:60" pos:end="49:63"><name pos:start="49:60" pos:end="49:63">addr</name></expr></argument>, <argument pos:start="49:66" pos:end="49:68"><expr pos:start="49:66" pos:end="49:68"><name pos:start="49:66" pos:end="49:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:35">/* find register group entry */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:49"><expr pos:start="57:5" pos:end="57:48"><name pos:start="57:5" pos:end="57:17">reg_grp_entry</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <call pos:start="57:21" pos:end="57:48"><name pos:start="57:21" pos:end="57:39">xen_pt_find_reg_grp</name><argument_list pos:start="57:40" pos:end="57:48">(<argument pos:start="57:41" pos:end="57:41"><expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">s</name></expr></argument>, <argument pos:start="57:44" pos:end="57:47"><expr pos:start="57:44" pos:end="57:47"><name pos:start="57:44" pos:end="57:47">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="75:5"><if pos:start="59:5" pos:end="75:5">if <condition pos:start="59:8" pos:end="59:22">(<expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:21">reg_grp_entry</name></expr>)</condition> <block pos:start="59:24" pos:end="75:5">{<block_content pos:start="63:9" pos:end="73:9">

        <comment type="block" pos:start="61:9" pos:end="61:46">/* check 0-Hardwired register group */</comment>

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:74">(<expr pos:start="63:13" pos:end="63:73"><name pos:start="63:13" pos:end="63:44"><name pos:start="63:13" pos:end="63:25">reg_grp_entry</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:34">reg_grp</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:44">grp_type</name></name> <operator pos:start="63:46" pos:end="63:47">==</operator> <name pos:start="63:49" pos:end="63:73">XEN_PT_GRP_TYPE_HARDWIRED</name></expr>)</condition> <block pos:start="63:76" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:19">

            <comment type="block" pos:start="65:13" pos:end="65:33">/* ignore silently */</comment>

            <expr_stmt pos:start="67:13" pos:end="69:64"><expr pos:start="67:13" pos:end="69:63"><call pos:start="67:13" pos:end="69:63"><name pos:start="67:13" pos:end="67:23">XEN_PT_WARN</name><argument_list pos:start="67:24" pos:end="69:63">(<argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><name pos:start="67:25" pos:end="67:25">d</name></expr></argument>, <argument pos:start="67:28" pos:end="69:51"><expr pos:start="67:28" pos:end="69:51"><literal type="string" pos:start="67:28" pos:end="67:61">"Access to 0-Hardwired register. "</literal>

                        <literal type="string" pos:start="69:25" pos:end="69:51">"(addr: 0x%02x, len: %d)\n"</literal></expr></argument>, <argument pos:start="69:54" pos:end="69:57"><expr pos:start="69:54" pos:end="69:57"><name pos:start="69:54" pos:end="69:57">addr</name></expr></argument>, <argument pos:start="69:60" pos:end="69:62"><expr pos:start="69:60" pos:end="69:62"><name pos:start="69:60" pos:end="69:62">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="81:59"><expr pos:start="79:5" pos:end="81:58"><name pos:start="79:5" pos:end="79:6">rc</name> <operator pos:start="79:8" pos:end="79:8">=</operator> <call pos:start="79:10" pos:end="81:58"><name pos:start="79:10" pos:end="79:31">xen_host_pci_get_block</name><argument_list pos:start="79:32" pos:end="81:58">(<argument pos:start="79:33" pos:end="79:47"><expr pos:start="79:33" pos:end="79:47"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:47"><name pos:start="79:34" pos:end="79:34">s</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:47">real_device</name></name></expr></argument>, <argument pos:start="79:50" pos:end="79:53"><expr pos:start="79:50" pos:end="79:53"><name pos:start="79:50" pos:end="79:53">addr</name></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:52"><expr pos:start="81:33" pos:end="81:52"><operator pos:start="81:33" pos:end="81:33">(</operator><name pos:start="81:34" pos:end="81:40">uint8_t</name> <operator pos:start="81:42" pos:end="81:42">*</operator><operator pos:start="81:43" pos:end="81:43">)</operator><operator pos:start="81:44" pos:end="81:44">&amp;</operator><name pos:start="81:45" pos:end="81:52">read_val</name></expr></argument>, <argument pos:start="81:55" pos:end="81:57"><expr pos:start="81:55" pos:end="81:57"><name pos:start="81:55" pos:end="81:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:15">(<expr pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:10">rc</name> <operator pos:start="83:12" pos:end="83:12">&lt;</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>)</condition> <block pos:start="83:17" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:20">

        <expr_stmt pos:start="85:9" pos:end="85:72"><expr pos:start="85:9" pos:end="85:71"><call pos:start="85:9" pos:end="85:71"><name pos:start="85:9" pos:end="85:18">XEN_PT_ERR</name><argument_list pos:start="85:19" pos:end="85:71">(<argument pos:start="85:20" pos:end="85:20"><expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">d</name></expr></argument>, <argument pos:start="85:23" pos:end="85:66"><expr pos:start="85:23" pos:end="85:66"><literal type="string" pos:start="85:23" pos:end="85:66">"pci_read_block failed. return value: %d.\n"</literal></expr></argument>, <argument pos:start="85:69" pos:end="85:70"><expr pos:start="85:69" pos:end="85:70"><name pos:start="85:69" pos:end="85:70">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:37"><expr pos:start="87:9" pos:end="87:36"><call pos:start="87:9" pos:end="87:36"><name pos:start="87:9" pos:end="87:14">memset</name><argument_list pos:start="87:15" pos:end="87:36">(<argument pos:start="87:16" pos:end="87:24"><expr pos:start="87:16" pos:end="87:24"><operator pos:start="87:16" pos:end="87:16">&amp;</operator><name pos:start="87:17" pos:end="87:24">read_val</name></expr></argument>, <argument pos:start="87:27" pos:end="87:30"><expr pos:start="87:27" pos:end="87:30"><literal type="number" pos:start="87:27" pos:end="87:30">0xff</literal></expr></argument>, <argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:20"><expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:15">wb_mask</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="91:7" pos:end="95:5">else <block pos:start="91:12" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:49">

        <expr_stmt pos:start="93:9" pos:end="93:49"><expr pos:start="93:9" pos:end="93:48"><name pos:start="93:9" pos:end="93:15">wb_mask</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <literal type="number" pos:start="93:19" pos:end="93:28">0xFFFFFFFF</literal> <operator pos:start="93:30" pos:end="93:31">&gt;&gt;</operator> <operator pos:start="93:33" pos:end="93:33">(</operator><operator pos:start="93:34" pos:end="93:34">(</operator><literal type="number" pos:start="93:35" pos:end="93:37">4</literal> <operator pos:start="93:37" pos:end="93:37">-</operator> <name pos:start="93:39" pos:end="93:41">len</name><operator pos:start="93:42" pos:end="93:42">)</operator> <operator pos:start="93:44" pos:end="93:45">&lt;&lt;</operator> <literal type="number" pos:start="93:47" pos:end="93:47">3</literal><operator pos:start="93:48" pos:end="93:48">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:78">/* pass directly to the real device for passthrough type register group */</comment>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:30">(<expr pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:21">reg_grp_entry</name> <operator pos:start="101:23" pos:end="101:24">==</operator> <name pos:start="101:26" pos:end="101:29">NULL</name></expr>)</condition> <block pos:start="101:32" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:17">

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:38"><expr pos:start="109:5" pos:end="109:37"><call pos:start="109:5" pos:end="109:37"><name pos:start="109:5" pos:end="109:35">memory_region_transaction_begin</name><argument_list pos:start="109:36" pos:end="109:37">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:48"><expr pos:start="111:5" pos:end="111:47"><call pos:start="111:5" pos:end="111:47"><name pos:start="111:5" pos:end="111:28">pci_default_write_config</name><argument_list pos:start="111:29" pos:end="111:47">(<argument pos:start="111:30" pos:end="111:30"><expr pos:start="111:30" pos:end="111:30"><name pos:start="111:30" pos:end="111:30">d</name></expr></argument>, <argument pos:start="111:33" pos:end="111:36"><expr pos:start="111:33" pos:end="111:36"><name pos:start="111:33" pos:end="111:36">addr</name></expr></argument>, <argument pos:start="111:39" pos:end="111:41"><expr pos:start="111:39" pos:end="111:41"><name pos:start="111:39" pos:end="111:41">val</name></expr></argument>, <argument pos:start="111:44" pos:end="111:46"><expr pos:start="111:44" pos:end="111:46"><name pos:start="111:44" pos:end="111:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:71">/* adjust the read and write value to appropriate CFC-CFF window */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:33"><expr pos:start="117:5" pos:end="117:32"><name pos:start="117:5" pos:end="117:12">read_val</name> <operator pos:start="117:14" pos:end="117:16">&lt;&lt;=</operator> <operator pos:start="117:18" pos:end="117:18">(</operator><name pos:start="117:19" pos:end="117:22">addr</name> <operator pos:start="117:24" pos:end="117:24">&amp;</operator> <literal type="number" pos:start="117:26" pos:end="117:26">3</literal><operator pos:start="117:27" pos:end="117:27">)</operator> <operator pos:start="117:29" pos:end="117:30">&lt;&lt;</operator> <literal type="number" pos:start="117:32" pos:end="117:32">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:28"><expr pos:start="119:5" pos:end="119:27"><name pos:start="119:5" pos:end="119:7">val</name> <operator pos:start="119:9" pos:end="119:11">&lt;&lt;=</operator> <operator pos:start="119:13" pos:end="119:13">(</operator><name pos:start="119:14" pos:end="119:17">addr</name> <operator pos:start="119:19" pos:end="119:19">&amp;</operator> <literal type="number" pos:start="119:21" pos:end="119:21">3</literal><operator pos:start="119:22" pos:end="119:22">)</operator> <operator pos:start="119:24" pos:end="119:25">&lt;&lt;</operator> <literal type="number" pos:start="119:27" pos:end="119:27">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:12">emul_len</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <name pos:start="121:16" pos:end="121:18">len</name></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:46">/* loop around the guest requested size */</comment>

    <while pos:start="127:5" pos:end="247:5">while <condition pos:start="127:11" pos:end="127:24">(<expr pos:start="127:12" pos:end="127:23"><name pos:start="127:12" pos:end="127:19">emul_len</name> <operator pos:start="127:21" pos:end="127:21">&gt;</operator> <literal type="number" pos:start="127:23" pos:end="127:23">0</literal></expr>)</condition> <block pos:start="127:26" pos:end="247:5">{<block_content pos:start="131:9" pos:end="245:9">

        <comment type="block" pos:start="129:9" pos:end="129:48">/* find register entry to be emulated */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:62"><expr pos:start="131:9" pos:end="131:61"><name pos:start="131:9" pos:end="131:17">reg_entry</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:61"><name pos:start="131:21" pos:end="131:35">xen_pt_find_reg</name><argument_list pos:start="131:36" pos:end="131:61">(<argument pos:start="131:37" pos:end="131:49"><expr pos:start="131:37" pos:end="131:49"><name pos:start="131:37" pos:end="131:49">reg_grp_entry</name></expr></argument>, <argument pos:start="131:52" pos:end="131:60"><expr pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:60">find_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="245:9"><if pos:start="133:9" pos:end="235:9">if <condition pos:start="133:12" pos:end="133:22">(<expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:21">reg_entry</name></expr>)</condition> <block pos:start="133:24" pos:end="235:9">{<block_content pos:start="135:13" pos:end="233:13">

            <expr_stmt pos:start="135:13" pos:end="135:33"><expr pos:start="135:13" pos:end="135:32"><name pos:start="135:13" pos:end="135:15">reg</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:32"><name pos:start="135:19" pos:end="135:27">reg_entry</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:32">reg</name></name></expr>;</expr_stmt>

            <decl_stmt pos:start="137:13" pos:end="137:76"><decl pos:start="137:13" pos:end="137:75"><type pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:20">uint32_t</name></type> <name pos:start="137:22" pos:end="137:32">real_offset</name> <init pos:start="137:34" pos:end="137:75">= <expr pos:start="137:36" pos:end="137:75"><name pos:start="137:36" pos:end="137:61"><name pos:start="137:36" pos:end="137:48">reg_grp_entry</name><operator pos:start="137:49" pos:end="137:50">-&gt;</operator><name pos:start="137:51" pos:end="137:61">base_offset</name></name> <operator pos:start="137:63" pos:end="137:63">+</operator> <name pos:start="137:65" pos:end="137:75"><name pos:start="137:65" pos:end="137:67">reg</name><operator pos:start="137:68" pos:end="137:69">-&gt;</operator><name pos:start="137:70" pos:end="137:75">offset</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="139:13" pos:end="139:70"><decl pos:start="139:13" pos:end="139:69"><type pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:20">uint32_t</name></type> <name pos:start="139:22" pos:end="139:31">valid_mask</name> <init pos:start="139:33" pos:end="139:69">= <expr pos:start="139:35" pos:end="139:69"><literal type="number" pos:start="139:35" pos:end="139:44">0xFFFFFFFF</literal> <operator pos:start="139:46" pos:end="139:47">&gt;&gt;</operator> <operator pos:start="139:49" pos:end="139:49">(</operator><operator pos:start="139:50" pos:end="139:50">(</operator><literal type="number" pos:start="139:51" pos:end="139:53">4</literal> <operator pos:start="139:53" pos:end="139:53">-</operator> <name pos:start="139:55" pos:end="139:62">emul_len</name><operator pos:start="139:63" pos:end="139:63">)</operator> <operator pos:start="139:65" pos:end="139:66">&lt;&lt;</operator> <literal type="number" pos:start="139:68" pos:end="139:68">3</literal><operator pos:start="139:69" pos:end="139:69">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="141:13" pos:end="141:36"><decl pos:start="141:13" pos:end="141:35"><type pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:19">uint8_t</name> <modifier pos:start="141:21" pos:end="141:21">*</modifier></type><name pos:start="141:22" pos:end="141:28">ptr_val</name> <init pos:start="141:30" pos:end="141:35">= <expr pos:start="141:32" pos:end="141:35"><name pos:start="141:32" pos:end="141:35">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:58"><expr pos:start="145:13" pos:end="145:57"><name pos:start="145:13" pos:end="145:22">valid_mask</name> <operator pos:start="145:24" pos:end="145:26">&lt;&lt;=</operator> <operator pos:start="145:28" pos:end="145:28">(</operator><name pos:start="145:29" pos:end="145:37">find_addr</name> <operator pos:start="145:39" pos:end="145:39">-</operator> <name pos:start="145:41" pos:end="145:51">real_offset</name><operator pos:start="145:52" pos:end="145:52">)</operator> <operator pos:start="145:54" pos:end="145:55">&lt;&lt;</operator> <literal type="number" pos:start="145:57" pos:end="145:57">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:58"><expr pos:start="147:13" pos:end="147:57"><name pos:start="147:13" pos:end="147:19">ptr_val</name> <operator pos:start="147:21" pos:end="147:21">=</operator> <operator pos:start="147:23" pos:end="147:23">(</operator><name pos:start="147:24" pos:end="147:30">uint8_t</name> <operator pos:start="147:32" pos:end="147:32">*</operator><operator pos:start="147:33" pos:end="147:33">)</operator><operator pos:start="147:34" pos:end="147:34">&amp;</operator><name pos:start="147:35" pos:end="147:37">val</name> <operator pos:start="147:39" pos:end="147:39">+</operator> <operator pos:start="147:41" pos:end="147:41">(</operator><name pos:start="147:42" pos:end="147:52">real_offset</name> <operator pos:start="147:54" pos:end="147:54">&amp;</operator> <literal type="number" pos:start="147:56" pos:end="147:56">3</literal><operator pos:start="147:57" pos:end="147:57">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="157:13"><if pos:start="149:13" pos:end="157:13">if <condition pos:start="149:16" pos:end="149:72">(<expr pos:start="149:17" pos:end="149:71"><name pos:start="149:17" pos:end="149:29"><name pos:start="149:17" pos:end="149:19">reg</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:29">emu_mask</name></name> <operator pos:start="149:31" pos:end="149:32">==</operator> <operator pos:start="149:34" pos:end="149:34">(</operator><literal type="number" pos:start="149:35" pos:end="149:44">0xFFFFFFFF</literal> <operator pos:start="149:46" pos:end="149:47">&gt;&gt;</operator> <operator pos:start="149:49" pos:end="149:49">(</operator><operator pos:start="149:50" pos:end="149:50">(</operator><literal type="number" pos:start="149:51" pos:end="149:53">4</literal> <operator pos:start="149:53" pos:end="149:53">-</operator> <name pos:start="149:55" pos:end="149:63"><name pos:start="149:55" pos:end="149:57">reg</name><operator pos:start="149:58" pos:end="149:59">-&gt;</operator><name pos:start="149:60" pos:end="149:63">size</name></name><operator pos:start="149:64" pos:end="149:64">)</operator> <operator pos:start="149:66" pos:end="149:67">&lt;&lt;</operator> <literal type="number" pos:start="149:69" pos:end="149:69">3</literal><operator pos:start="149:70" pos:end="149:70">)</operator><operator pos:start="149:71" pos:end="149:71">)</operator></expr>)</condition> <block pos:start="149:74" pos:end="157:13">{<block_content pos:start="151:17" pos:end="155:57">

                <expr_stmt pos:start="151:17" pos:end="155:57"><expr pos:start="151:17" pos:end="155:56"><name pos:start="151:17" pos:end="151:23">wb_mask</name> <operator pos:start="151:25" pos:end="151:26">&amp;=</operator> <operator pos:start="151:28" pos:end="151:28">~</operator><operator pos:start="151:29" pos:end="151:29">(</operator><operator pos:start="151:30" pos:end="151:30">(</operator><name pos:start="151:31" pos:end="151:43"><name pos:start="151:31" pos:end="151:33">reg</name><operator pos:start="151:34" pos:end="151:35">-&gt;</operator><name pos:start="151:36" pos:end="151:43">emu_mask</name></name>

                              <operator pos:start="153:31" pos:end="153:32">&gt;&gt;</operator> <operator pos:start="153:34" pos:end="153:34">(</operator><operator pos:start="153:35" pos:end="153:35">(</operator><name pos:start="153:36" pos:end="153:44">find_addr</name> <operator pos:start="153:46" pos:end="153:46">-</operator> <name pos:start="153:48" pos:end="153:58">real_offset</name><operator pos:start="153:59" pos:end="153:59">)</operator> <operator pos:start="153:61" pos:end="153:62">&lt;&lt;</operator> <literal type="number" pos:start="153:64" pos:end="153:64">3</literal><operator pos:start="153:65" pos:end="153:65">)</operator><operator pos:start="153:66" pos:end="153:66">)</operator>

                             <operator pos:start="155:30" pos:end="155:31">&lt;&lt;</operator> <operator pos:start="155:33" pos:end="155:33">(</operator><operator pos:start="155:34" pos:end="155:34">(</operator><name pos:start="155:35" pos:end="155:37">len</name> <operator pos:start="155:39" pos:end="155:39">-</operator> <name pos:start="155:41" pos:end="155:48">emul_len</name><operator pos:start="155:49" pos:end="155:49">)</operator> <operator pos:start="155:51" pos:end="155:52">&lt;&lt;</operator> <literal type="number" pos:start="155:54" pos:end="155:54">3</literal><operator pos:start="155:55" pos:end="155:55">)</operator><operator pos:start="155:56" pos:end="155:56">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="161:13" pos:end="161:53">/* do emulation based on register size */</comment>

            <switch pos:start="163:13" pos:end="207:13">switch <condition pos:start="163:20" pos:end="163:30">(<expr pos:start="163:21" pos:end="163:29"><name pos:start="163:21" pos:end="163:29"><name pos:start="163:21" pos:end="163:23">reg</name><operator pos:start="163:24" pos:end="163:25">-&gt;</operator><name pos:start="163:26" pos:end="163:29">size</name></name></expr>)</condition> <block pos:start="163:32" pos:end="207:13">{<block_content pos:start="165:13" pos:end="205:22">

            <case pos:start="165:13" pos:end="165:19">case <expr pos:start="165:18" pos:end="165:18"><literal type="number" pos:start="165:18" pos:end="165:18">1</literal></expr>:</case>

                <if_stmt pos:start="167:17" pos:end="175:17"><if pos:start="167:17" pos:end="175:17">if <condition pos:start="167:20" pos:end="167:35">(<expr pos:start="167:21" pos:end="167:34"><name pos:start="167:21" pos:end="167:34"><name pos:start="167:21" pos:end="167:23">reg</name><operator pos:start="167:24" pos:end="167:25">-&gt;</operator><name pos:start="167:26" pos:end="167:26">u</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:28">b</name><operator pos:start="167:29" pos:end="167:29">.</operator><name pos:start="167:30" pos:end="167:34">write</name></name></expr>)</condition> <block pos:start="167:37" pos:end="175:17">{<block_content pos:start="169:21" pos:end="173:52">

                    <expr_stmt pos:start="169:21" pos:end="173:52"><expr pos:start="169:21" pos:end="173:51"><name pos:start="169:21" pos:end="169:22">rc</name> <operator pos:start="169:24" pos:end="169:24">=</operator> <call pos:start="169:26" pos:end="173:51"><name pos:start="169:26" pos:end="169:39"><name pos:start="169:26" pos:end="169:28">reg</name><operator pos:start="169:29" pos:end="169:30">-&gt;</operator><name pos:start="169:31" pos:end="169:31">u</name><operator pos:start="169:32" pos:end="169:32">.</operator><name pos:start="169:33" pos:end="169:33">b</name><operator pos:start="169:34" pos:end="169:34">.</operator><name pos:start="169:35" pos:end="169:39">write</name></name><argument_list pos:start="169:40" pos:end="173:51">(<argument pos:start="169:41" pos:end="169:41"><expr pos:start="169:41" pos:end="169:41"><name pos:start="169:41" pos:end="169:41">s</name></expr></argument>, <argument pos:start="169:44" pos:end="169:52"><expr pos:start="169:44" pos:end="169:52"><name pos:start="169:44" pos:end="169:52">reg_entry</name></expr></argument>, <argument pos:start="169:55" pos:end="169:61"><expr pos:start="169:55" pos:end="169:61"><name pos:start="169:55" pos:end="169:61">ptr_val</name></expr></argument>,

                                        <argument pos:start="171:41" pos:end="171:76"><expr pos:start="171:41" pos:end="171:76"><name pos:start="171:41" pos:end="171:48">read_val</name> <operator pos:start="171:50" pos:end="171:51">&gt;&gt;</operator> <operator pos:start="171:53" pos:end="171:53">(</operator><operator pos:start="171:54" pos:end="171:54">(</operator><name pos:start="171:55" pos:end="171:65">real_offset</name> <operator pos:start="171:67" pos:end="171:67">&amp;</operator> <literal type="number" pos:start="171:69" pos:end="171:69">3</literal><operator pos:start="171:70" pos:end="171:70">)</operator> <operator pos:start="171:72" pos:end="171:73">&lt;&lt;</operator> <literal type="number" pos:start="171:75" pos:end="171:75">3</literal><operator pos:start="171:76" pos:end="171:76">)</operator></expr></argument>,

                                        <argument pos:start="173:41" pos:end="173:50"><expr pos:start="173:41" pos:end="173:50"><name pos:start="173:41" pos:end="173:50">valid_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="177:17" pos:end="177:22">break;</break>

            <case pos:start="179:13" pos:end="179:19">case <expr pos:start="179:18" pos:end="179:18"><literal type="number" pos:start="179:18" pos:end="179:18">2</literal></expr>:</case>

                <if_stmt pos:start="181:17" pos:end="189:17"><if pos:start="181:17" pos:end="189:17">if <condition pos:start="181:20" pos:end="181:35">(<expr pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:23">reg</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:26">u</name><operator pos:start="181:27" pos:end="181:27">.</operator><name pos:start="181:28" pos:end="181:28">w</name><operator pos:start="181:29" pos:end="181:29">.</operator><name pos:start="181:30" pos:end="181:34">write</name></name></expr>)</condition> <block pos:start="181:37" pos:end="189:17">{<block_content pos:start="183:21" pos:end="187:52">

                    <expr_stmt pos:start="183:21" pos:end="187:52"><expr pos:start="183:21" pos:end="187:51"><name pos:start="183:21" pos:end="183:22">rc</name> <operator pos:start="183:24" pos:end="183:24">=</operator> <call pos:start="183:26" pos:end="187:51"><name pos:start="183:26" pos:end="183:39"><name pos:start="183:26" pos:end="183:28">reg</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:31">u</name><operator pos:start="183:32" pos:end="183:32">.</operator><name pos:start="183:33" pos:end="183:33">w</name><operator pos:start="183:34" pos:end="183:34">.</operator><name pos:start="183:35" pos:end="183:39">write</name></name><argument_list pos:start="183:40" pos:end="187:51">(<argument pos:start="183:41" pos:end="183:41"><expr pos:start="183:41" pos:end="183:41"><name pos:start="183:41" pos:end="183:41">s</name></expr></argument>, <argument pos:start="183:44" pos:end="183:52"><expr pos:start="183:44" pos:end="183:52"><name pos:start="183:44" pos:end="183:52">reg_entry</name></expr></argument>, <argument pos:start="183:55" pos:end="183:73"><expr pos:start="183:55" pos:end="183:73"><operator pos:start="183:55" pos:end="183:55">(</operator><name pos:start="183:56" pos:end="183:63">uint16_t</name> <operator pos:start="183:65" pos:end="183:65">*</operator><operator pos:start="183:66" pos:end="183:66">)</operator><name pos:start="183:67" pos:end="183:73">ptr_val</name></expr></argument>,

                                        <argument pos:start="185:41" pos:end="185:78"><expr pos:start="185:41" pos:end="185:78"><operator pos:start="185:41" pos:end="185:41">(</operator><name pos:start="185:42" pos:end="185:49">read_val</name> <operator pos:start="185:51" pos:end="185:52">&gt;&gt;</operator> <operator pos:start="185:54" pos:end="185:54">(</operator><operator pos:start="185:55" pos:end="185:55">(</operator><name pos:start="185:56" pos:end="185:66">real_offset</name> <operator pos:start="185:68" pos:end="185:68">&amp;</operator> <literal type="number" pos:start="185:70" pos:end="185:70">3</literal><operator pos:start="185:71" pos:end="185:71">)</operator> <operator pos:start="185:73" pos:end="185:74">&lt;&lt;</operator> <literal type="number" pos:start="185:76" pos:end="185:76">3</literal><operator pos:start="185:77" pos:end="185:77">)</operator><operator pos:start="185:78" pos:end="185:78">)</operator></expr></argument>,

                                        <argument pos:start="187:41" pos:end="187:50"><expr pos:start="187:41" pos:end="187:50"><name pos:start="187:41" pos:end="187:50">valid_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="191:17" pos:end="191:22">break;</break>

            <case pos:start="193:13" pos:end="193:19">case <expr pos:start="193:18" pos:end="193:18"><literal type="number" pos:start="193:18" pos:end="193:18">4</literal></expr>:</case>

                <if_stmt pos:start="195:17" pos:end="203:17"><if pos:start="195:17" pos:end="203:17">if <condition pos:start="195:20" pos:end="195:36">(<expr pos:start="195:21" pos:end="195:35"><name pos:start="195:21" pos:end="195:35"><name pos:start="195:21" pos:end="195:23">reg</name><operator pos:start="195:24" pos:end="195:25">-&gt;</operator><name pos:start="195:26" pos:end="195:26">u</name><operator pos:start="195:27" pos:end="195:27">.</operator><name pos:start="195:28" pos:end="195:29">dw</name><operator pos:start="195:30" pos:end="195:30">.</operator><name pos:start="195:31" pos:end="195:35">write</name></name></expr>)</condition> <block pos:start="195:38" pos:end="203:17">{<block_content pos:start="197:21" pos:end="201:53">

                    <expr_stmt pos:start="197:21" pos:end="201:53"><expr pos:start="197:21" pos:end="201:52"><name pos:start="197:21" pos:end="197:22">rc</name> <operator pos:start="197:24" pos:end="197:24">=</operator> <call pos:start="197:26" pos:end="201:52"><name pos:start="197:26" pos:end="197:40"><name pos:start="197:26" pos:end="197:28">reg</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:31">u</name><operator pos:start="197:32" pos:end="197:32">.</operator><name pos:start="197:33" pos:end="197:34">dw</name><operator pos:start="197:35" pos:end="197:35">.</operator><name pos:start="197:36" pos:end="197:40">write</name></name><argument_list pos:start="197:41" pos:end="201:52">(<argument pos:start="197:42" pos:end="197:42"><expr pos:start="197:42" pos:end="197:42"><name pos:start="197:42" pos:end="197:42">s</name></expr></argument>, <argument pos:start="197:45" pos:end="197:53"><expr pos:start="197:45" pos:end="197:53"><name pos:start="197:45" pos:end="197:53">reg_entry</name></expr></argument>, <argument pos:start="197:56" pos:end="197:74"><expr pos:start="197:56" pos:end="197:74"><operator pos:start="197:56" pos:end="197:56">(</operator><name pos:start="197:57" pos:end="197:64">uint32_t</name> <operator pos:start="197:66" pos:end="197:66">*</operator><operator pos:start="197:67" pos:end="197:67">)</operator><name pos:start="197:68" pos:end="197:74">ptr_val</name></expr></argument>,

                                         <argument pos:start="199:42" pos:end="199:79"><expr pos:start="199:42" pos:end="199:79"><operator pos:start="199:42" pos:end="199:42">(</operator><name pos:start="199:43" pos:end="199:50">read_val</name> <operator pos:start="199:52" pos:end="199:53">&gt;&gt;</operator> <operator pos:start="199:55" pos:end="199:55">(</operator><operator pos:start="199:56" pos:end="199:56">(</operator><name pos:start="199:57" pos:end="199:67">real_offset</name> <operator pos:start="199:69" pos:end="199:69">&amp;</operator> <literal type="number" pos:start="199:71" pos:end="199:71">3</literal><operator pos:start="199:72" pos:end="199:72">)</operator> <operator pos:start="199:74" pos:end="199:75">&lt;&lt;</operator> <literal type="number" pos:start="199:77" pos:end="199:77">3</literal><operator pos:start="199:78" pos:end="199:78">)</operator><operator pos:start="199:79" pos:end="199:79">)</operator></expr></argument>,

                                         <argument pos:start="201:42" pos:end="201:51"><expr pos:start="201:42" pos:end="201:51"><name pos:start="201:42" pos:end="201:51">valid_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="205:17" pos:end="205:22">break;</break>

            </block_content>}</block></switch>



            <if_stmt pos:start="211:13" pos:end="221:13"><if pos:start="211:13" pos:end="221:13">if <condition pos:start="211:16" pos:end="211:23">(<expr pos:start="211:17" pos:end="211:22"><name pos:start="211:17" pos:end="211:18">rc</name> <operator pos:start="211:20" pos:end="211:20">&lt;</operator> <literal type="number" pos:start="211:22" pos:end="211:22">0</literal></expr>)</condition> <block pos:start="211:25" pos:end="221:13">{<block_content pos:start="213:17" pos:end="219:23">

                <expr_stmt pos:start="213:17" pos:end="217:55"><expr pos:start="213:17" pos:end="217:54"><call pos:start="213:17" pos:end="217:54"><name pos:start="213:17" pos:end="213:40">xen_shutdown_fatal_error</name><argument_list pos:start="213:41" pos:end="217:54">(<argument pos:start="213:42" pos:end="215:69"><expr pos:start="213:42" pos:end="215:69"><literal type="string" pos:start="213:42" pos:end="213:72">"Internal error: Invalid write"</literal>

                                         <literal type="string" pos:start="215:42" pos:end="215:69">" emulation. (%s, rc: %d)\n"</literal></expr></argument>,

                                         <argument pos:start="217:42" pos:end="217:49"><expr pos:start="217:42" pos:end="217:49"><name pos:start="217:42" pos:end="217:49">__func__</name></expr></argument>, <argument pos:start="217:52" pos:end="217:53"><expr pos:start="217:52" pos:end="217:53"><name pos:start="217:52" pos:end="217:53">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="219:17" pos:end="219:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="225:13" pos:end="225:48">/* calculate next address to find */</comment>

            <expr_stmt pos:start="227:13" pos:end="227:34"><expr pos:start="227:13" pos:end="227:33"><name pos:start="227:13" pos:end="227:20">emul_len</name> <operator pos:start="227:22" pos:end="227:23">-=</operator> <name pos:start="227:25" pos:end="227:33"><name pos:start="227:25" pos:end="227:27">reg</name><operator pos:start="227:28" pos:end="227:29">-&gt;</operator><name pos:start="227:30" pos:end="227:33">size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="233:13"><if pos:start="229:13" pos:end="233:13">if <condition pos:start="229:16" pos:end="229:29">(<expr pos:start="229:17" pos:end="229:28"><name pos:start="229:17" pos:end="229:24">emul_len</name> <operator pos:start="229:26" pos:end="229:26">&gt;</operator> <literal type="number" pos:start="229:28" pos:end="229:28">0</literal></expr>)</condition> <block pos:start="229:31" pos:end="233:13">{<block_content pos:start="231:17" pos:end="231:52">

                <expr_stmt pos:start="231:17" pos:end="231:52"><expr pos:start="231:17" pos:end="231:51"><name pos:start="231:17" pos:end="231:25">find_addr</name> <operator pos:start="231:27" pos:end="231:27">=</operator> <name pos:start="231:29" pos:end="231:39">real_offset</name> <operator pos:start="231:41" pos:end="231:41">+</operator> <name pos:start="231:43" pos:end="231:51"><name pos:start="231:43" pos:end="231:45">reg</name><operator pos:start="231:46" pos:end="231:47">-&gt;</operator><name pos:start="231:48" pos:end="231:51">size</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="245:9">else <block pos:start="235:16" pos:end="245:9">{<block_content pos:start="241:13" pos:end="243:24">

            <comment type="block" pos:start="237:13" pos:end="239:44">/* nothing to do with passthrough type register,

             * continue to find next byte */</comment>

            <expr_stmt pos:start="241:13" pos:end="241:23"><expr pos:start="241:13" pos:end="241:22"><name pos:start="241:13" pos:end="241:20">emul_len</name><operator pos:start="241:21" pos:end="241:22">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:24"><expr pos:start="243:13" pos:end="243:23"><name pos:start="243:13" pos:end="243:21">find_addr</name><operator pos:start="243:22" pos:end="243:23">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="251:5" pos:end="251:71">/* need to shift back before passing them to xen_host_pci_device */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:28"><expr pos:start="253:5" pos:end="253:27"><name pos:start="253:5" pos:end="253:7">val</name> <operator pos:start="253:9" pos:end="253:11">&gt;&gt;=</operator> <operator pos:start="253:13" pos:end="253:13">(</operator><name pos:start="253:14" pos:end="253:17">addr</name> <operator pos:start="253:19" pos:end="253:19">&amp;</operator> <literal type="number" pos:start="253:21" pos:end="253:21">3</literal><operator pos:start="253:22" pos:end="253:22">)</operator> <operator pos:start="253:24" pos:end="253:25">&lt;&lt;</operator> <literal type="number" pos:start="253:27" pos:end="253:27">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="257:5" pos:end="257:39"><expr pos:start="257:5" pos:end="257:38"><call pos:start="257:5" pos:end="257:38"><name pos:start="257:5" pos:end="257:36">memory_region_transaction_commit</name><argument_list pos:start="257:37" pos:end="257:38">()</argument_list></call></expr>;</expr_stmt>



<label pos:start="261:1" pos:end="261:4"><name pos:start="261:1" pos:end="261:3">out</name>:</label>

    <for pos:start="263:5" pos:end="297:5">for <control pos:start="263:9" pos:end="263:42">(<init pos:start="263:10" pos:end="263:19"><expr pos:start="263:10" pos:end="263:18"><name pos:start="263:10" pos:end="263:14">index</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <literal type="number" pos:start="263:18" pos:end="263:18">0</literal></expr>;</init> <condition pos:start="263:21" pos:end="263:28"><expr pos:start="263:21" pos:end="263:27"><name pos:start="263:21" pos:end="263:27">wb_mask</name></expr>;</condition> <incr pos:start="263:30" pos:end="263:41"><expr pos:start="263:30" pos:end="263:41"><name pos:start="263:30" pos:end="263:34">index</name> <operator pos:start="263:36" pos:end="263:37">+=</operator> <name pos:start="263:39" pos:end="263:41">len</name></expr></incr>)</control> <block pos:start="263:44" pos:end="297:5">{<block_content pos:start="267:9" pos:end="295:9">

        <comment type="block" pos:start="265:9" pos:end="265:45">/* unknown regs are passed through */</comment>

        <while pos:start="267:9" pos:end="273:9">while <condition pos:start="267:15" pos:end="267:33">(<expr pos:start="267:16" pos:end="267:32"><operator pos:start="267:16" pos:end="267:16">!</operator><operator pos:start="267:17" pos:end="267:17">(</operator><name pos:start="267:18" pos:end="267:24">wb_mask</name> <operator pos:start="267:26" pos:end="267:26">&amp;</operator> <literal type="number" pos:start="267:28" pos:end="267:31">0xff</literal><operator pos:start="267:32" pos:end="267:32">)</operator></expr>)</condition> <block pos:start="267:35" pos:end="273:9">{<block_content pos:start="269:13" pos:end="271:26">

            <expr_stmt pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:19"><name pos:start="269:13" pos:end="269:17">index</name><operator pos:start="269:18" pos:end="269:19">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:26"><expr pos:start="271:13" pos:end="271:25"><name pos:start="271:13" pos:end="271:19">wb_mask</name> <operator pos:start="271:21" pos:end="271:23">&gt;&gt;=</operator> <literal type="number" pos:start="271:25" pos:end="271:25">8</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="275:9" pos:end="275:16"><expr pos:start="275:9" pos:end="275:15"><name pos:start="275:9" pos:end="275:11">len</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <literal type="number" pos:start="275:15" pos:end="275:15">0</literal></expr>;</expr_stmt>

        <do pos:start="277:9" pos:end="283:33">do <block pos:start="277:12" pos:end="283:9">{<block_content pos:start="279:13" pos:end="281:26">

            <expr_stmt pos:start="279:13" pos:end="279:18"><expr pos:start="279:13" pos:end="279:17"><name pos:start="279:13" pos:end="279:15">len</name><operator pos:start="279:16" pos:end="279:17">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:26"><expr pos:start="281:13" pos:end="281:25"><name pos:start="281:13" pos:end="281:19">wb_mask</name> <operator pos:start="281:21" pos:end="281:23">&gt;&gt;=</operator> <literal type="number" pos:start="281:25" pos:end="281:25">8</literal></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="283:17" pos:end="283:32">(<expr pos:start="283:18" pos:end="283:31"><name pos:start="283:18" pos:end="283:24">wb_mask</name> <operator pos:start="283:26" pos:end="283:26">&amp;</operator> <literal type="number" pos:start="283:28" pos:end="283:31">0xff</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="285:9" pos:end="287:66"><expr pos:start="285:9" pos:end="287:65"><name pos:start="285:9" pos:end="285:10">rc</name> <operator pos:start="285:12" pos:end="285:12">=</operator> <call pos:start="285:14" pos:end="287:65"><name pos:start="285:14" pos:end="285:35">xen_host_pci_set_block</name><argument_list pos:start="285:36" pos:end="287:65">(<argument pos:start="285:37" pos:end="285:51"><expr pos:start="285:37" pos:end="285:51"><operator pos:start="285:37" pos:end="285:37">&amp;</operator><name pos:start="285:38" pos:end="285:51"><name pos:start="285:38" pos:end="285:38">s</name><operator pos:start="285:39" pos:end="285:40">-&gt;</operator><name pos:start="285:41" pos:end="285:51">real_device</name></name></expr></argument>, <argument pos:start="285:54" pos:end="285:65"><expr pos:start="285:54" pos:end="285:65"><name pos:start="285:54" pos:end="285:57">addr</name> <operator pos:start="285:59" pos:end="285:59">+</operator> <name pos:start="285:61" pos:end="285:65">index</name></expr></argument>,

                                    <argument pos:start="287:37" pos:end="287:59"><expr pos:start="287:37" pos:end="287:59"><operator pos:start="287:37" pos:end="287:37">(</operator><name pos:start="287:38" pos:end="287:44">uint8_t</name> <operator pos:start="287:46" pos:end="287:46">*</operator><operator pos:start="287:47" pos:end="287:47">)</operator><operator pos:start="287:48" pos:end="287:48">&amp;</operator><name pos:start="287:49" pos:end="287:51">val</name> <operator pos:start="287:53" pos:end="287:53">+</operator> <name pos:start="287:55" pos:end="287:59">index</name></expr></argument>, <argument pos:start="287:62" pos:end="287:64"><expr pos:start="287:62" pos:end="287:64"><name pos:start="287:62" pos:end="287:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="291:9" pos:end="295:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:19">(<expr pos:start="291:13" pos:end="291:18"><name pos:start="291:13" pos:end="291:14">rc</name> <operator pos:start="291:16" pos:end="291:16">&lt;</operator> <literal type="number" pos:start="291:18" pos:end="291:18">0</literal></expr>)</condition> <block pos:start="291:21" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:77">

            <expr_stmt pos:start="293:13" pos:end="293:77"><expr pos:start="293:13" pos:end="293:76"><call pos:start="293:13" pos:end="293:76"><name pos:start="293:13" pos:end="293:22">XEN_PT_ERR</name><argument_list pos:start="293:23" pos:end="293:76">(<argument pos:start="293:24" pos:end="293:24"><expr pos:start="293:24" pos:end="293:24"><name pos:start="293:24" pos:end="293:24">d</name></expr></argument>, <argument pos:start="293:27" pos:end="293:71"><expr pos:start="293:27" pos:end="293:71"><literal type="string" pos:start="293:27" pos:end="293:71">"pci_write_block failed. return value: %d.\n"</literal></expr></argument>, <argument pos:start="293:74" pos:end="293:75"><expr pos:start="293:74" pos:end="293:75"><name pos:start="293:74" pos:end="293:75">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
