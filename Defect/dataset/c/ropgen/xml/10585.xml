<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10585.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:16"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ioreq_t</name> <modifier pos:start="1:16" pos:end="1:16">*</modifier></type><name pos:start="1:17" pos:end="1:29">cpu_get_ioreq</name><parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">XenIOState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">state</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">evtchn_port_t</name></type> <name pos:start="7:19" pos:end="7:22">port</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:48"><expr pos:start="11:5" pos:end="11:47"><name pos:start="11:5" pos:end="11:8">port</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <call pos:start="11:12" pos:end="11:47"><name pos:start="11:12" pos:end="11:28">xc_evtchn_pending</name><argument_list pos:start="11:29" pos:end="11:47">(<argument pos:start="11:30" pos:end="11:46"><expr pos:start="11:30" pos:end="11:46"><name pos:start="11:30" pos:end="11:46"><name pos:start="11:30" pos:end="11:34">state</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:46">xce_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:43">(<expr pos:start="13:9" pos:end="13:42"><name pos:start="13:9" pos:end="13:12">port</name> <operator pos:start="13:14" pos:end="13:15">==</operator> <name pos:start="13:17" pos:end="13:42"><name pos:start="13:17" pos:end="13:21">state</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:42">bufioreq_local_port</name></name></expr>)</condition> <block pos:start="13:45" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:20">

        <expr_stmt pos:start="15:9" pos:end="17:78"><expr pos:start="15:9" pos:end="17:77"><call pos:start="15:9" pos:end="17:77"><name pos:start="15:9" pos:end="15:17">timer_mod</name><argument_list pos:start="15:18" pos:end="17:77">(<argument pos:start="15:19" pos:end="15:42"><expr pos:start="15:19" pos:end="15:42"><name pos:start="15:19" pos:end="15:42"><name pos:start="15:19" pos:end="15:23">state</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:42">buffered_io_timer</name></name></expr></argument>,

                <argument pos:start="17:17" pos:end="17:76"><expr pos:start="17:17" pos:end="17:76"><name pos:start="17:17" pos:end="17:35">BUFFER_IO_MAX_DELAY</name> <operator pos:start="17:37" pos:end="17:37">+</operator> <call pos:start="17:39" pos:end="17:76"><name pos:start="17:39" pos:end="17:55">qemu_clock_get_ms</name><argument_list pos:start="17:56" pos:end="17:76">(<argument pos:start="17:57" pos:end="17:75"><expr pos:start="17:57" pos:end="17:75"><name pos:start="17:57" pos:end="17:75">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="59:5"><if pos:start="25:5" pos:end="59:5">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:12">port</name> <operator pos:start="25:14" pos:end="25:15">!=</operator> <operator pos:start="25:17" pos:end="25:17">-</operator><literal type="number" pos:start="25:18" pos:end="25:18">1</literal></expr>)</condition> <block pos:start="25:21" pos:end="59:5">{<block_content pos:start="27:9" pos:end="57:58">

        <for pos:start="27:9" pos:end="35:9">for <control pos:start="27:13" pos:end="27:38">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:33"><expr pos:start="27:21" pos:end="27:32"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:32">max_cpus</name></expr>;</condition> <incr pos:start="27:35" pos:end="27:37"><expr pos:start="27:35" pos:end="27:37"><name pos:start="27:35" pos:end="27:35">i</name><operator pos:start="27:36" pos:end="27:37">++</operator></expr></incr>)</control> <block pos:start="27:40" pos:end="35:9">{<block_content pos:start="29:13" pos:end="33:13">

            <if_stmt pos:start="29:13" pos:end="33:13"><if pos:start="29:13" pos:end="33:13">if <condition pos:start="29:16" pos:end="29:51">(<expr pos:start="29:17" pos:end="29:50"><name pos:start="29:17" pos:end="29:42"><name pos:start="29:17" pos:end="29:21">state</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:39">ioreq_local_port</name><index pos:start="29:40" pos:end="29:42">[<expr pos:start="29:41" pos:end="29:41"><name pos:start="29:41" pos:end="29:41">i</name></expr>]</index></name> <operator pos:start="29:44" pos:end="29:45">==</operator> <name pos:start="29:47" pos:end="29:50">port</name></expr>)</condition> <block pos:start="29:53" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:22">

                <break pos:start="31:17" pos:end="31:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:26">(<expr pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:13">i</name> <operator pos:start="39:15" pos:end="39:16">==</operator> <name pos:start="39:18" pos:end="39:25">max_cpus</name></expr>)</condition> <block pos:start="39:28" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:68">

            <expr_stmt pos:start="41:13" pos:end="41:68"><expr pos:start="41:13" pos:end="41:67"><call pos:start="41:13" pos:end="41:67"><name pos:start="41:13" pos:end="41:20">hw_error</name><argument_list pos:start="41:21" pos:end="41:67">(<argument pos:start="41:22" pos:end="41:66"><expr pos:start="41:22" pos:end="41:66"><literal type="string" pos:start="41:22" pos:end="41:66">"Fatal error while trying to get io event!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="47:9" pos:end="47:42">/* unmask the wanted port again */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><call pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:24">xc_evtchn_unmask</name><argument_list pos:start="49:25" pos:end="49:49">(<argument pos:start="49:26" pos:end="49:42"><expr pos:start="49:26" pos:end="49:42"><name pos:start="49:26" pos:end="49:42"><name pos:start="49:26" pos:end="49:30">state</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:42">xce_handle</name></name></expr></argument>, <argument pos:start="49:45" pos:end="49:48"><expr pos:start="49:45" pos:end="49:48"><name pos:start="49:45" pos:end="49:48">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="53:9" pos:end="53:50">/* get the io packet from shared memory */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:13">state</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:24">send_vcpu</name></name> <operator pos:start="55:26" pos:end="55:26">=</operator> <name pos:start="55:28" pos:end="55:28">i</name></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:58">return <expr pos:start="57:16" pos:end="57:57"><call pos:start="57:16" pos:end="57:57"><name pos:start="57:16" pos:end="57:47">cpu_get_ioreq_from_shared_memory</name><argument_list pos:start="57:48" pos:end="57:57">(<argument pos:start="57:49" pos:end="57:53"><expr pos:start="57:49" pos:end="57:53"><name pos:start="57:49" pos:end="57:53">state</name></expr></argument>, <argument pos:start="57:56" pos:end="57:56"><expr pos:start="57:56" pos:end="57:56"><name pos:start="57:56" pos:end="57:56">i</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:36">/* read error or read nothing */</comment>

    <return pos:start="65:5" pos:end="65:16">return <expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
