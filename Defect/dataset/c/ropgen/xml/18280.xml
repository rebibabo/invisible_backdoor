<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18280.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">tcg_gen_atomic_cmpxchg_i64</name><parameter_list pos:start="1:32" pos:end="3:74">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:40">TCGv_i64</name></type> <name pos:start="1:42" pos:end="1:45">retv</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:56"><decl pos:start="1:48" pos:end="1:56"><type pos:start="1:48" pos:end="1:56"><name pos:start="1:48" pos:end="1:51">TCGv</name></type> <name pos:start="1:53" pos:end="1:56">addr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:66">TCGv_i64</name></type> <name pos:start="1:68" pos:end="1:71">cmpv</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">TCGv_i64</name></type> <name pos:start="3:42" pos:end="3:45">newv</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:57"><decl pos:start="3:48" pos:end="3:57"><type pos:start="3:48" pos:end="3:57"><name pos:start="3:48" pos:end="3:53">TCGArg</name></type> <name pos:start="3:55" pos:end="3:57">idx</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:73"><decl pos:start="3:60" pos:end="3:73"><type pos:start="3:60" pos:end="3:73"><name pos:start="3:60" pos:end="3:67">TCGMemOp</name></type> <name pos:start="3:69" pos:end="3:73">memop</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:5">

    <expr_stmt pos:start="7:5" pos:end="7:48"><expr pos:start="7:5" pos:end="7:47"><name pos:start="7:5" pos:end="7:9">memop</name> <operator pos:start="7:11" pos:end="7:11">=</operator> <call pos:start="7:13" pos:end="7:47"><name pos:start="7:13" pos:end="7:34">tcg_canonicalize_memop</name><argument_list pos:start="7:35" pos:end="7:47">(<argument pos:start="7:36" pos:end="7:40"><expr pos:start="7:36" pos:end="7:40"><name pos:start="7:36" pos:end="7:40">memop</name></expr></argument>, <argument pos:start="7:43" pos:end="7:43"><expr pos:start="7:43" pos:end="7:43"><literal type="number" pos:start="7:43" pos:end="7:43">1</literal></expr></argument>, <argument pos:start="7:46" pos:end="7:46"><expr pos:start="7:46" pos:end="7:46"><literal type="number" pos:start="7:46" pos:end="7:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="123:5"><if pos:start="11:5" pos:end="45:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:22">parallel_cpus</name></expr>)</condition> <block pos:start="11:25" pos:end="45:5">{<block_content pos:start="13:9" pos:end="43:30">

        <decl_stmt pos:start="13:9" pos:end="13:41"><decl pos:start="13:9" pos:end="13:40"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">TCGv_i64</name></type> <name pos:start="13:18" pos:end="13:19">t1</name> <init pos:start="13:21" pos:end="13:40">= <expr pos:start="13:23" pos:end="13:40"><call pos:start="13:23" pos:end="13:40"><name pos:start="13:23" pos:end="13:38">tcg_temp_new_i64</name><argument_list pos:start="13:39" pos:end="13:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:41"><decl pos:start="15:9" pos:end="15:40"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">TCGv_i64</name></type> <name pos:start="15:18" pos:end="15:19">t2</name> <init pos:start="15:21" pos:end="15:40">= <expr pos:start="15:23" pos:end="15:40"><call pos:start="15:23" pos:end="15:40"><name pos:start="15:23" pos:end="15:38">tcg_temp_new_i64</name><argument_list pos:start="15:39" pos:end="15:40">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><call pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:23">tcg_gen_ext_i64</name><argument_list pos:start="19:24" pos:end="19:50">(<argument pos:start="19:25" pos:end="19:26"><expr pos:start="19:25" pos:end="19:26"><name pos:start="19:25" pos:end="19:26">t2</name></expr></argument>, <argument pos:start="19:29" pos:end="19:32"><expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">cmpv</name></expr></argument>, <argument pos:start="19:35" pos:end="19:49"><expr pos:start="19:35" pos:end="19:49"><name pos:start="19:35" pos:end="19:39">memop</name> <operator pos:start="19:41" pos:end="19:41">&amp;</operator> <name pos:start="19:43" pos:end="19:49">MO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:61"><expr pos:start="23:9" pos:end="23:60"><call pos:start="23:9" pos:end="23:60"><name pos:start="23:9" pos:end="23:27">tcg_gen_qemu_ld_i64</name><argument_list pos:start="23:28" pos:end="23:60">(<argument pos:start="23:29" pos:end="23:30"><expr pos:start="23:29" pos:end="23:30"><name pos:start="23:29" pos:end="23:30">t1</name></expr></argument>, <argument pos:start="23:33" pos:end="23:36"><expr pos:start="23:33" pos:end="23:36"><name pos:start="23:33" pos:end="23:36">addr</name></expr></argument>, <argument pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><name pos:start="23:39" pos:end="23:41">idx</name></expr></argument>, <argument pos:start="23:44" pos:end="23:59"><expr pos:start="23:44" pos:end="23:59"><name pos:start="23:44" pos:end="23:48">memop</name> <operator pos:start="23:50" pos:end="23:50">&amp;</operator> <operator pos:start="23:52" pos:end="23:52">~</operator><name pos:start="23:53" pos:end="23:59">MO_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:63"><expr pos:start="25:9" pos:end="25:62"><call pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:27">tcg_gen_movcond_i64</name><argument_list pos:start="25:28" pos:end="25:62">(<argument pos:start="25:29" pos:end="25:39"><expr pos:start="25:29" pos:end="25:39"><name pos:start="25:29" pos:end="25:39">TCG_COND_EQ</name></expr></argument>, <argument pos:start="25:42" pos:end="25:43"><expr pos:start="25:42" pos:end="25:43"><name pos:start="25:42" pos:end="25:43">t2</name></expr></argument>, <argument pos:start="25:46" pos:end="25:47"><expr pos:start="25:46" pos:end="25:47"><name pos:start="25:46" pos:end="25:47">t1</name></expr></argument>, <argument pos:start="25:50" pos:end="25:51"><expr pos:start="25:50" pos:end="25:51"><name pos:start="25:50" pos:end="25:51">t2</name></expr></argument>, <argument pos:start="25:54" pos:end="25:57"><expr pos:start="25:54" pos:end="25:57"><name pos:start="25:54" pos:end="25:57">newv</name></expr></argument>, <argument pos:start="25:60" pos:end="25:61"><expr pos:start="25:60" pos:end="25:61"><name pos:start="25:60" pos:end="25:61">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:27">tcg_gen_qemu_st_i64</name><argument_list pos:start="27:28" pos:end="27:49">(<argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">t2</name></expr></argument>, <argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">addr</name></expr></argument>, <argument pos:start="27:39" pos:end="27:41"><expr pos:start="27:39" pos:end="27:41"><name pos:start="27:39" pos:end="27:41">idx</name></expr></argument>, <argument pos:start="27:44" pos:end="27:48"><expr pos:start="27:44" pos:end="27:48"><name pos:start="27:44" pos:end="27:48">memop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:25">tcg_temp_free_i64</name><argument_list pos:start="29:26" pos:end="29:29">(<argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:28">(<expr pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:17">memop</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <name pos:start="33:21" pos:end="33:27">MO_SIGN</name></expr>)</condition> <block pos:start="33:30" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:45">

            <expr_stmt pos:start="35:13" pos:end="35:45"><expr pos:start="35:13" pos:end="35:44"><call pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:27">tcg_gen_ext_i64</name><argument_list pos:start="35:28" pos:end="35:44">(<argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">retv</name></expr></argument>, <argument pos:start="35:35" pos:end="35:36"><expr pos:start="35:35" pos:end="35:36"><name pos:start="35:35" pos:end="35:36">t1</name></expr></argument>, <argument pos:start="35:39" pos:end="35:43"><expr pos:start="35:39" pos:end="35:43"><name pos:start="35:39" pos:end="35:43">memop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:38">

            <expr_stmt pos:start="39:13" pos:end="39:38"><expr pos:start="39:13" pos:end="39:37"><call pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:27">tcg_gen_mov_i64</name><argument_list pos:start="39:28" pos:end="39:37">(<argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">retv</name></expr></argument>, <argument pos:start="39:35" pos:end="39:36"><expr pos:start="39:35" pos:end="39:36"><name pos:start="39:35" pos:end="39:36">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><call pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:25">tcg_temp_free_i64</name><argument_list pos:start="43:26" pos:end="43:29">(<argument pos:start="43:27" pos:end="43:28"><expr pos:start="43:27" pos:end="43:28"><name pos:start="43:27" pos:end="43:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="89:5">else if <condition pos:start="45:15" pos:end="45:42">(<expr pos:start="45:16" pos:end="45:41"><operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:21">memop</name> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <name pos:start="45:25" pos:end="45:31">MO_SIZE</name><operator pos:start="45:32" pos:end="45:32">)</operator> <operator pos:start="45:34" pos:end="45:35">==</operator> <name pos:start="45:37" pos:end="45:41">MO_64</name></expr>)</condition> <block pos:start="45:44" pos:end="89:5">{<block_content pos:start="49:9" pos:end="88:0">

<cpp:ifdef pos:start="47:1" pos:end="47:22">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:22">CONFIG_ATOMIC64</name></cpp:ifdef>

        <decl_stmt pos:start="49:9" pos:end="49:30"><decl pos:start="49:9" pos:end="49:29"><type pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:25">gen_atomic_cx_i64</name></type> <name pos:start="49:27" pos:end="49:29">gen</name></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:58"><expr pos:start="53:9" pos:end="53:57"><name pos:start="53:9" pos:end="53:11">gen</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <name pos:start="53:15" pos:end="53:57"><name pos:start="53:15" pos:end="53:27">table_cmpxchg</name><index pos:start="53:28" pos:end="53:57">[<expr pos:start="53:29" pos:end="53:56"><name pos:start="53:29" pos:end="53:33">memop</name> <operator pos:start="53:35" pos:end="53:35">&amp;</operator> <operator pos:start="53:37" pos:end="53:37">(</operator><name pos:start="53:38" pos:end="53:44">MO_SIZE</name> <operator pos:start="53:46" pos:end="53:46">|</operator> <name pos:start="53:48" pos:end="53:55">MO_BSWAP</name><operator pos:start="53:56" pos:end="53:56">)</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="60:0"><expr pos:start="55:9" pos:end="55:37"><call pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:24">tcg_debug_assert</name><argument_list pos:start="55:25" pos:end="55:37">(<argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:28">gen</name> <operator pos:start="55:30" pos:end="55:31">!=</operator> <name pos:start="55:33" pos:end="55:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="59:1" pos:end="59:21">#<cpp:directive pos:start="59:2" pos:end="59:6">ifdef</cpp:directive> <name pos:start="59:8" pos:end="59:21">CONFIG_SOFTMMU</name></cpp:ifdef>

        <block pos:start="61:9" pos:end="72:0">{<block_content pos:start="63:13" pos:end="67:34">

            <decl_stmt pos:start="63:13" pos:end="63:68"><decl pos:start="63:13" pos:end="63:67"><type pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:20">TCGv_i32</name></type> <name pos:start="63:22" pos:end="63:23">oi</name> <init pos:start="63:25" pos:end="63:67">= <expr pos:start="63:27" pos:end="63:67"><call pos:start="63:27" pos:end="63:67"><name pos:start="63:27" pos:end="63:39">tcg_const_i32</name><argument_list pos:start="63:40" pos:end="63:67">(<argument pos:start="63:41" pos:end="63:66"><expr pos:start="63:41" pos:end="63:66"><call pos:start="63:41" pos:end="63:66"><name pos:start="63:41" pos:end="63:54">make_memop_idx</name><argument_list pos:start="63:55" pos:end="63:66">(<argument pos:start="63:56" pos:end="63:60"><expr pos:start="63:56" pos:end="63:60"><name pos:start="63:56" pos:end="63:60">memop</name></expr></argument>, <argument pos:start="63:63" pos:end="63:65"><expr pos:start="63:63" pos:end="63:65"><name pos:start="63:63" pos:end="63:65">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:61"><expr pos:start="65:13" pos:end="65:60"><call pos:start="65:13" pos:end="65:60"><name pos:start="65:13" pos:end="65:15">gen</name><argument_list pos:start="65:16" pos:end="65:60">(<argument pos:start="65:17" pos:end="65:20"><expr pos:start="65:17" pos:end="65:20"><name pos:start="65:17" pos:end="65:20">retv</name></expr></argument>, <argument pos:start="65:23" pos:end="65:37"><expr pos:start="65:23" pos:end="65:37"><name pos:start="65:23" pos:end="65:37"><name pos:start="65:23" pos:end="65:29">tcg_ctx</name><operator pos:start="65:30" pos:end="65:30">.</operator><name pos:start="65:31" pos:end="65:37">tcg_env</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:43"><expr pos:start="65:40" pos:end="65:43"><name pos:start="65:40" pos:end="65:43">addr</name></expr></argument>, <argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><name pos:start="65:46" pos:end="65:49">cmpv</name></expr></argument>, <argument pos:start="65:52" pos:end="65:55"><expr pos:start="65:52" pos:end="65:55"><name pos:start="65:52" pos:end="65:55">newv</name></expr></argument>, <argument pos:start="65:58" pos:end="65:59"><expr pos:start="65:58" pos:end="65:59"><name pos:start="65:58" pos:end="65:59">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:34"><expr pos:start="67:13" pos:end="67:33"><call pos:start="67:13" pos:end="67:33"><name pos:start="67:13" pos:end="67:29">tcg_temp_free_i32</name><argument_list pos:start="67:30" pos:end="67:33">(<argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><name pos:start="67:31" pos:end="67:32">oi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="73:9" pos:end="78:0"><expr pos:start="73:9" pos:end="73:52"><call pos:start="73:9" pos:end="73:52"><name pos:start="73:9" pos:end="73:11">gen</name><argument_list pos:start="73:12" pos:end="73:52">(<argument pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:16"><name pos:start="73:13" pos:end="73:16">retv</name></expr></argument>, <argument pos:start="73:19" pos:end="73:33"><expr pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:33"><name pos:start="73:19" pos:end="73:25">tcg_ctx</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:33">tcg_env</name></name></expr></argument>, <argument pos:start="73:36" pos:end="73:39"><expr pos:start="73:36" pos:end="73:39"><name pos:start="73:36" pos:end="73:39">addr</name></expr></argument>, <argument pos:start="73:42" pos:end="73:45"><expr pos:start="73:42" pos:end="73:45"><name pos:start="73:42" pos:end="73:45">cmpv</name></expr></argument>, <argument pos:start="73:48" pos:end="73:51"><expr pos:start="73:48" pos:end="73:51"><name pos:start="73:48" pos:end="73:51">newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:30">gen_helper_exit_atomic</name><argument_list pos:start="79:31" pos:end="79:47">(<argument pos:start="79:32" pos:end="79:46"><expr pos:start="79:32" pos:end="79:46"><name pos:start="79:32" pos:end="79:46"><name pos:start="79:32" pos:end="79:38">tcg_ctx</name><operator pos:start="79:39" pos:end="79:39">.</operator><name pos:start="79:40" pos:end="79:46">tcg_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="81:9" pos:end="83:79">/* Produce a result, so that we have a well-formed opcode stream

           with respect to uses of the result in the (dead) code following.  */</comment>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:33"><call pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:24">tcg_gen_movi_i64</name><argument_list pos:start="85:25" pos:end="85:33">(<argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">retv</name></expr></argument>, <argument pos:start="85:32" pos:end="85:32"><expr pos:start="85:32" pos:end="85:32"><literal type="number" pos:start="85:32" pos:end="85:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="87:8" pos:end="87:28">/* CONFIG_ATOMIC64 */</comment>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="123:5">else <block pos:start="89:12" pos:end="123:5">{<block_content pos:start="91:9" pos:end="121:9">

        <decl_stmt pos:start="91:9" pos:end="91:42"><decl pos:start="91:9" pos:end="91:41"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">TCGv_i32</name></type> <name pos:start="91:18" pos:end="91:20">c32</name> <init pos:start="91:22" pos:end="91:41">= <expr pos:start="91:24" pos:end="91:41"><call pos:start="91:24" pos:end="91:41"><name pos:start="91:24" pos:end="91:39">tcg_temp_new_i32</name><argument_list pos:start="91:40" pos:end="91:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:42"><decl pos:start="93:9" pos:end="93:41"><type pos:start="93:9" pos:end="93:16"><name pos:start="93:9" pos:end="93:16">TCGv_i32</name></type> <name pos:start="93:18" pos:end="93:20">n32</name> <init pos:start="93:22" pos:end="93:41">= <expr pos:start="93:24" pos:end="93:41"><call pos:start="93:24" pos:end="93:41"><name pos:start="93:24" pos:end="93:39">tcg_temp_new_i32</name><argument_list pos:start="93:40" pos:end="93:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:42"><decl pos:start="95:9" pos:end="95:41"><type pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:16">TCGv_i32</name></type> <name pos:start="95:18" pos:end="95:20">r32</name> <init pos:start="95:22" pos:end="95:41">= <expr pos:start="95:24" pos:end="95:41"><call pos:start="95:24" pos:end="95:41"><name pos:start="95:24" pos:end="95:39">tcg_temp_new_i32</name><argument_list pos:start="95:40" pos:end="95:41">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><call pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:29">tcg_gen_extrl_i64_i32</name><argument_list pos:start="99:30" pos:end="99:40">(<argument pos:start="99:31" pos:end="99:33"><expr pos:start="99:31" pos:end="99:33"><name pos:start="99:31" pos:end="99:33">c32</name></expr></argument>, <argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><name pos:start="99:36" pos:end="99:39">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><call pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:29">tcg_gen_extrl_i64_i32</name><argument_list pos:start="101:30" pos:end="101:40">(<argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">n32</name></expr></argument>, <argument pos:start="101:36" pos:end="101:39"><expr pos:start="101:36" pos:end="101:39"><name pos:start="101:36" pos:end="101:39">newv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:79"><expr pos:start="103:9" pos:end="103:78"><call pos:start="103:9" pos:end="103:78"><name pos:start="103:9" pos:end="103:34">tcg_gen_atomic_cmpxchg_i32</name><argument_list pos:start="103:35" pos:end="103:78">(<argument pos:start="103:36" pos:end="103:38"><expr pos:start="103:36" pos:end="103:38"><name pos:start="103:36" pos:end="103:38">r32</name></expr></argument>, <argument pos:start="103:41" pos:end="103:44"><expr pos:start="103:41" pos:end="103:44"><name pos:start="103:41" pos:end="103:44">addr</name></expr></argument>, <argument pos:start="103:47" pos:end="103:49"><expr pos:start="103:47" pos:end="103:49"><name pos:start="103:47" pos:end="103:49">c32</name></expr></argument>, <argument pos:start="103:52" pos:end="103:54"><expr pos:start="103:52" pos:end="103:54"><name pos:start="103:52" pos:end="103:54">n32</name></expr></argument>, <argument pos:start="103:57" pos:end="103:59"><expr pos:start="103:57" pos:end="103:59"><name pos:start="103:57" pos:end="103:59">idx</name></expr></argument>, <argument pos:start="103:62" pos:end="103:77"><expr pos:start="103:62" pos:end="103:77"><name pos:start="103:62" pos:end="103:66">memop</name> <operator pos:start="103:68" pos:end="103:68">&amp;</operator> <operator pos:start="103:70" pos:end="103:70">~</operator><name pos:start="103:71" pos:end="103:77">MO_SIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:31"><expr pos:start="105:9" pos:end="105:30"><call pos:start="105:9" pos:end="105:30"><name pos:start="105:9" pos:end="105:25">tcg_temp_free_i32</name><argument_list pos:start="105:26" pos:end="105:30">(<argument pos:start="105:27" pos:end="105:29"><expr pos:start="105:27" pos:end="105:29"><name pos:start="105:27" pos:end="105:29">c32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:31"><expr pos:start="107:9" pos:end="107:30"><call pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:25">tcg_temp_free_i32</name><argument_list pos:start="107:26" pos:end="107:30">(<argument pos:start="107:27" pos:end="107:29"><expr pos:start="107:27" pos:end="107:29"><name pos:start="107:27" pos:end="107:29">n32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:40"><expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:28">tcg_gen_extu_i32_i64</name><argument_list pos:start="111:29" pos:end="111:39">(<argument pos:start="111:30" pos:end="111:33"><expr pos:start="111:30" pos:end="111:33"><name pos:start="111:30" pos:end="111:33">retv</name></expr></argument>, <argument pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:38">r32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:31"><expr pos:start="113:9" pos:end="113:30"><call pos:start="113:9" pos:end="113:30"><name pos:start="113:9" pos:end="113:25">tcg_temp_free_i32</name><argument_list pos:start="113:26" pos:end="113:30">(<argument pos:start="113:27" pos:end="113:29"><expr pos:start="113:27" pos:end="113:29"><name pos:start="113:27" pos:end="113:29">r32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:28">(<expr pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:17">memop</name> <operator pos:start="117:19" pos:end="117:19">&amp;</operator> <name pos:start="117:21" pos:end="117:27">MO_SIGN</name></expr>)</condition> <block pos:start="117:30" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:47">

            <expr_stmt pos:start="119:13" pos:end="119:47"><expr pos:start="119:13" pos:end="119:46"><call pos:start="119:13" pos:end="119:46"><name pos:start="119:13" pos:end="119:27">tcg_gen_ext_i64</name><argument_list pos:start="119:28" pos:end="119:46">(<argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><name pos:start="119:29" pos:end="119:32">retv</name></expr></argument>, <argument pos:start="119:35" pos:end="119:38"><expr pos:start="119:35" pos:end="119:38"><name pos:start="119:35" pos:end="119:38">retv</name></expr></argument>, <argument pos:start="119:41" pos:end="119:45"><expr pos:start="119:41" pos:end="119:45"><name pos:start="119:41" pos:end="119:45">memop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
