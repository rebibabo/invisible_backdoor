<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26707.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">spapr_add_lmbs</name><parameter_list pos:start="1:27" pos:end="5:40">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">DeviceState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">dev</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:64"><decl pos:start="1:46" pos:end="1:64"><type pos:start="1:46" pos:end="1:64"><name pos:start="1:46" pos:end="1:53">uint64_t</name></type> <name pos:start="1:55" pos:end="1:64">addr_start</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:79"><decl pos:start="1:67" pos:end="1:79"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:74">uint64_t</name></type> <name pos:start="1:76" pos:end="1:79">size</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:40"><decl pos:start="3:28" pos:end="3:40"><type pos:start="3:28" pos:end="3:40"><name pos:start="3:28" pos:end="3:35">uint32_t</name></type> <name pos:start="3:37" pos:end="3:40">node</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:72"><decl pos:start="3:43" pos:end="3:72"><type pos:start="3:43" pos:end="3:72"><name pos:start="3:43" pos:end="3:46">bool</name></type> <name pos:start="3:48" pos:end="3:72">dedicated_hp_event_source</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:39"><decl pos:start="5:28" pos:end="5:39"><type pos:start="5:28" pos:end="5:39"><name pos:start="5:28" pos:end="5:32">Error</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier><modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:39">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="87:1">{<block_content pos:start="9:5" pos:end="85:5">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">sPAPRDRConnector</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">drc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">nr_lmbs</name> <init pos:start="11:22" pos:end="11:51">= <expr pos:start="11:24" pos:end="11:51"><name pos:start="11:24" pos:end="11:27">size</name><operator pos:start="11:28" pos:end="11:28">/</operator><name pos:start="11:29" pos:end="11:51">SPAPR_MEMORY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:21">fdt_offset</name></decl>, <decl pos:start="13:24" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:24" pos:end="13:31">fdt_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">addr</name> <init pos:start="17:19" pos:end="17:30">= <expr pos:start="17:21" pos:end="17:30"><name pos:start="17:21" pos:end="17:30">addr_start</name></expr></init></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="55:5">for <control pos:start="21:9" pos:end="21:33">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:28"><expr pos:start="21:17" pos:end="21:27"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:27">nr_lmbs</name></expr>;</condition> <incr pos:start="21:30" pos:end="21:32"><expr pos:start="21:30" pos:end="21:32"><name pos:start="21:30" pos:end="21:30">i</name><operator pos:start="21:31" pos:end="21:32">++</operator></expr></incr>)</control> <block pos:start="21:35" pos:end="55:5">{<block_content pos:start="23:9" pos:end="53:9">

        <expr_stmt pos:start="23:9" pos:end="25:62"><expr pos:start="23:9" pos:end="25:61"><name pos:start="23:9" pos:end="23:11">drc</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="25:61"><name pos:start="23:15" pos:end="23:29">spapr_drc_by_id</name><argument_list pos:start="23:30" pos:end="25:61">(<argument pos:start="23:31" pos:end="23:48"><expr pos:start="23:31" pos:end="23:48"><name pos:start="23:31" pos:end="23:48">TYPE_SPAPR_DRC_LMB</name></expr></argument>,

                              <argument pos:start="25:31" pos:end="25:60"><expr pos:start="25:31" pos:end="25:60"><name pos:start="25:31" pos:end="25:34">addr</name> <operator pos:start="25:36" pos:end="25:36">/</operator> <name pos:start="25:38" pos:end="25:60">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">g_assert</name><argument_list pos:start="27:17" pos:end="27:21">(<argument pos:start="27:18" pos:end="27:20"><expr pos:start="27:18" pos:end="27:20"><name pos:start="27:18" pos:end="27:20">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:44"><expr pos:start="31:9" pos:end="31:43"><name pos:start="31:9" pos:end="31:11">fdt</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:43"><name pos:start="31:15" pos:end="31:32">create_device_tree</name><argument_list pos:start="31:33" pos:end="31:43">(<argument pos:start="31:34" pos:end="31:42"><expr pos:start="31:34" pos:end="31:42"><operator pos:start="31:34" pos:end="31:34">&amp;</operator><name pos:start="31:35" pos:end="31:42">fdt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="35:73"><expr pos:start="33:9" pos:end="35:72"><name pos:start="33:9" pos:end="33:18">fdt_offset</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <call pos:start="33:22" pos:end="35:72"><name pos:start="33:22" pos:end="33:47">spapr_populate_memory_node</name><argument_list pos:start="33:48" pos:end="35:72">(<argument pos:start="33:49" pos:end="33:51"><expr pos:start="33:49" pos:end="33:51"><name pos:start="33:49" pos:end="33:51">fdt</name></expr></argument>, <argument pos:start="33:54" pos:end="33:57"><expr pos:start="33:54" pos:end="33:57"><name pos:start="33:54" pos:end="33:57">node</name></expr></argument>, <argument pos:start="33:60" pos:end="33:63"><expr pos:start="33:60" pos:end="33:63"><name pos:start="33:60" pos:end="33:63">addr</name></expr></argument>,

                                                <argument pos:start="35:49" pos:end="35:71"><expr pos:start="35:49" pos:end="35:71"><name pos:start="35:49" pos:end="35:71">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:76"><expr pos:start="39:9" pos:end="39:75"><call pos:start="39:9" pos:end="39:75"><name pos:start="39:9" pos:end="39:24">spapr_drc_attach</name><argument_list pos:start="39:25" pos:end="39:75">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">drc</name></expr></argument>, <argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">dev</name></expr></argument>, <argument pos:start="39:36" pos:end="39:38"><expr pos:start="39:36" pos:end="39:38"><name pos:start="39:36" pos:end="39:38">fdt</name></expr></argument>, <argument pos:start="39:41" pos:end="39:50"><expr pos:start="39:41" pos:end="39:50"><name pos:start="39:41" pos:end="39:50">fdt_offset</name></expr></argument>, <argument pos:start="39:53" pos:end="39:68"><expr pos:start="39:53" pos:end="39:68"><operator pos:start="39:53" pos:end="39:53">!</operator><name pos:start="39:54" pos:end="39:68"><name pos:start="39:54" pos:end="39:56">dev</name><operator pos:start="39:57" pos:end="39:58">-&gt;</operator><name pos:start="39:59" pos:end="39:68">hotplugged</name></name></expr></argument>, <argument pos:start="39:71" pos:end="39:74"><expr pos:start="39:71" pos:end="39:74"><name pos:start="39:71" pos:end="39:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:40"><expr pos:start="41:9" pos:end="41:39"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:15">+=</operator> <name pos:start="41:17" pos:end="41:39">SPAPR_MEMORY_BLOCK_SIZE</name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:29">(<expr pos:start="43:13" pos:end="43:28"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:28"><name pos:start="43:14" pos:end="43:16">dev</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:28">hotplugged</name></name></expr>)</condition> <block pos:start="43:31" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:80">

            <decl_stmt pos:start="45:13" pos:end="45:76"><decl pos:start="45:13" pos:end="45:75"><type pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:33">sPAPRDRConnectorClass</name> <modifier pos:start="45:35" pos:end="45:35">*</modifier></type><name pos:start="45:36" pos:end="45:39">drck</name> <init pos:start="45:41" pos:end="45:75">= <expr pos:start="45:43" pos:end="45:75"><call pos:start="45:43" pos:end="45:75"><name pos:start="45:43" pos:end="45:70">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="45:71" pos:end="45:75">(<argument pos:start="45:72" pos:end="45:74"><expr pos:start="45:72" pos:end="45:74"><name pos:start="45:72" pos:end="45:74">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="47:13" pos:end="47:68">/* guests expect coldplugged LMBs to be pre-allocated */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:78"><expr pos:start="49:13" pos:end="49:77"><call pos:start="49:13" pos:end="49:77"><name pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:16">drck</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:38">set_allocation_state</name></name><argument_list pos:start="49:39" pos:end="49:77">(<argument pos:start="49:40" pos:end="49:42"><expr pos:start="49:40" pos:end="49:42"><name pos:start="49:40" pos:end="49:42">drc</name></expr></argument>, <argument pos:start="49:45" pos:end="49:76"><expr pos:start="49:45" pos:end="49:76"><name pos:start="49:45" pos:end="49:76">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:80"><expr pos:start="51:13" pos:end="51:79"><call pos:start="51:13" pos:end="51:79"><name pos:start="51:13" pos:end="51:37"><name pos:start="51:13" pos:end="51:16">drck</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:37">set_isolation_state</name></name><argument_list pos:start="51:38" pos:end="51:79">(<argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><name pos:start="51:39" pos:end="51:41">drc</name></expr></argument>, <argument pos:start="51:44" pos:end="51:78"><expr pos:start="51:44" pos:end="51:78"><name pos:start="51:44" pos:end="51:78">SPAPR_DR_ISOLATION_STATE_UNISOLATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="57:5" pos:end="61:7">/* send hotplug notification to the

     * guest only in case of hotplugged memory

     */</comment>

    <if_stmt pos:start="63:5" pos:end="85:5"><if pos:start="63:5" pos:end="85:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:11">dev</name><operator pos:start="63:12" pos:end="63:13">-&gt;</operator><name pos:start="63:14" pos:end="63:23">hotplugged</name></name></expr>)</condition> <block pos:start="63:26" pos:end="85:5">{<block_content pos:start="65:9" pos:end="83:9">

        <if_stmt pos:start="65:9" pos:end="83:9"><if pos:start="65:9" pos:end="77:9">if <condition pos:start="65:12" pos:end="65:38">(<expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:37">dedicated_hp_event_source</name></expr>)</condition> <block pos:start="65:40" pos:end="77:9">{<block_content pos:start="67:13" pos:end="75:73">

            <expr_stmt pos:start="67:13" pos:end="69:72"><expr pos:start="67:13" pos:end="69:71"><name pos:start="67:13" pos:end="67:15">drc</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="69:71"><name pos:start="67:19" pos:end="67:33">spapr_drc_by_id</name><argument_list pos:start="67:34" pos:end="69:71">(<argument pos:start="67:35" pos:end="67:52"><expr pos:start="67:35" pos:end="67:52"><name pos:start="67:35" pos:end="67:52">TYPE_SPAPR_DRC_LMB</name></expr></argument>,

                                  <argument pos:start="69:35" pos:end="69:70"><expr pos:start="69:35" pos:end="69:70"><name pos:start="69:35" pos:end="69:44">addr_start</name> <operator pos:start="69:46" pos:end="69:46">/</operator> <name pos:start="69:48" pos:end="69:70">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="75:73"><expr pos:start="71:13" pos:end="75:72"><call pos:start="71:13" pos:end="75:72"><name pos:start="71:13" pos:end="71:50">spapr_hotplug_req_add_by_count_indexed</name><argument_list pos:start="71:51" pos:end="75:72">(<argument pos:start="71:52" pos:end="71:78"><expr pos:start="71:52" pos:end="71:78"><name pos:start="71:52" pos:end="71:78">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                                   <argument pos:start="73:52" pos:end="73:58"><expr pos:start="73:52" pos:end="73:58"><name pos:start="73:52" pos:end="73:58">nr_lmbs</name></expr></argument>,

                                                   <argument pos:start="75:52" pos:end="75:71"><expr pos:start="75:52" pos:end="75:71"><call pos:start="75:52" pos:end="75:71"><name pos:start="75:52" pos:end="75:66">spapr_drc_index</name><argument_list pos:start="75:67" pos:end="75:71">(<argument pos:start="75:68" pos:end="75:70"><expr pos:start="75:68" pos:end="75:70"><name pos:start="75:68" pos:end="75:70">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="83:9">else <block pos:start="77:16" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:52">

            <expr_stmt pos:start="79:13" pos:end="81:52"><expr pos:start="79:13" pos:end="81:51"><call pos:start="79:13" pos:end="81:51"><name pos:start="79:13" pos:end="79:42">spapr_hotplug_req_add_by_count</name><argument_list pos:start="79:43" pos:end="81:51">(<argument pos:start="79:44" pos:end="79:70"><expr pos:start="79:44" pos:end="79:70"><name pos:start="79:44" pos:end="79:70">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                           <argument pos:start="81:44" pos:end="81:50"><expr pos:start="81:44" pos:end="81:50"><name pos:start="81:44" pos:end="81:50">nr_lmbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
