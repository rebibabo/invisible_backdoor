<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24022.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">alsa_poll_helper</name> <parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:38">snd_pcm_t</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">handle</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:67"><decl pos:start="1:49" pos:end="1:67"><type pos:start="1:49" pos:end="1:67"><name pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:54">struct</name> <name pos:start="1:56" pos:end="1:62">pollhlp</name></name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">hlp</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:77"><decl pos:start="1:70" pos:end="1:77"><type pos:start="1:70" pos:end="1:77"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:77">mask</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:16"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:16">count</name></decl>, <decl pos:start="5:19" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:21">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">pollfd</name></name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">pfds</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:52"><expr pos:start="11:5" pos:end="11:51"><name pos:start="11:5" pos:end="11:9">count</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:51"><name pos:start="11:13" pos:end="11:42">snd_pcm_poll_descriptors_count</name> <argument_list pos:start="11:44" pos:end="11:51">(<argument pos:start="11:45" pos:end="11:50"><expr pos:start="11:45" pos:end="11:50"><name pos:start="11:45" pos:end="11:50">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="21:5"><if pos:start="13:5" pos:end="21:5">if <condition pos:start="13:8" pos:end="13:19">(<expr pos:start="13:9" pos:end="13:18"><name pos:start="13:9" pos:end="13:13">count</name> <operator pos:start="13:15" pos:end="13:16">&lt;=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr>)</condition> <block pos:start="13:21" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:18">

        <expr_stmt pos:start="15:9" pos:end="17:65"><expr pos:start="15:9" pos:end="17:64"><call pos:start="15:9" pos:end="17:64"><name pos:start="15:9" pos:end="15:13">dolog</name> <argument_list pos:start="15:15" pos:end="17:64">(<argument pos:start="15:16" pos:end="17:56"><expr pos:start="15:16" pos:end="17:56"><literal type="string" pos:start="15:16" pos:end="15:49">"Could not initialize poll mode\n"</literal>

               <literal type="string" pos:start="17:16" pos:end="17:56">"Invalid number of poll descriptors %d\n"</literal></expr></argument>, <argument pos:start="17:59" pos:end="17:63"><expr pos:start="17:59" pos:end="17:63"><name pos:start="17:59" pos:end="17:63">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:68"><expr pos:start="25:5" pos:end="25:67"><name pos:start="25:5" pos:end="25:8">pfds</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:67"><name pos:start="25:12" pos:end="25:23">audio_calloc</name> <argument_list pos:start="25:25" pos:end="25:67">(<argument pos:start="25:26" pos:end="25:43"><expr pos:start="25:26" pos:end="25:43"><literal type="string" pos:start="25:26" pos:end="25:43">"alsa_poll_helper"</literal></expr></argument>, <argument pos:start="25:46" pos:end="25:50"><expr pos:start="25:46" pos:end="25:50"><name pos:start="25:46" pos:end="25:50">count</name></expr></argument>, <argument pos:start="25:53" pos:end="25:66"><expr pos:start="25:53" pos:end="25:66"><sizeof pos:start="25:53" pos:end="25:66">sizeof <argument_list pos:start="25:60" pos:end="25:66">(<argument pos:start="25:61" pos:end="25:65"><expr pos:start="25:61" pos:end="25:65"><operator pos:start="25:61" pos:end="25:61">*</operator><name pos:start="25:62" pos:end="25:65">pfds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:14">(<expr pos:start="27:9" pos:end="27:13"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:13">pfds</name></expr>)</condition> <block pos:start="27:16" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:51"><expr pos:start="29:9" pos:end="29:50"><call pos:start="29:9" pos:end="29:50"><name pos:start="29:9" pos:end="29:13">dolog</name> <argument_list pos:start="29:15" pos:end="29:50">(<argument pos:start="29:16" pos:end="29:49"><expr pos:start="29:16" pos:end="29:49"><literal type="string" pos:start="29:16" pos:end="29:49">"Could not initialize poll mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:57"><expr pos:start="37:5" pos:end="37:56"><name pos:start="37:5" pos:end="37:7">err</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:56"><name pos:start="37:11" pos:end="37:34">snd_pcm_poll_descriptors</name> <argument_list pos:start="37:36" pos:end="37:56">(<argument pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><name pos:start="37:37" pos:end="37:42">handle</name></expr></argument>, <argument pos:start="37:45" pos:end="37:48"><expr pos:start="37:45" pos:end="37:48"><name pos:start="37:45" pos:end="37:48">pfds</name></expr></argument>, <argument pos:start="37:51" pos:end="37:55"><expr pos:start="37:51" pos:end="37:55"><name pos:start="37:51" pos:end="37:55">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">err</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:18">

        <expr_stmt pos:start="41:9" pos:end="43:60"><expr pos:start="41:9" pos:end="43:59"><call pos:start="41:9" pos:end="43:59"><name pos:start="41:9" pos:end="41:19">alsa_logerr</name> <argument_list pos:start="41:21" pos:end="43:59">(<argument pos:start="41:22" pos:end="41:24"><expr pos:start="41:22" pos:end="41:24"><name pos:start="41:22" pos:end="41:24">err</name></expr></argument>, <argument pos:start="41:27" pos:end="43:58"><expr pos:start="41:27" pos:end="43:58"><literal type="string" pos:start="41:27" pos:end="41:60">"Could not initialize poll mode\n"</literal>

                     <literal type="string" pos:start="43:22" pos:end="43:58">"Could not obtain poll descriptors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><call pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:14">g_free</name> <argument_list pos:start="45:16" pos:end="45:21">(<argument pos:start="45:17" pos:end="45:20"><expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">pfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="53:5" pos:end="107:5">for <control pos:start="53:9" pos:end="53:31">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:26"><expr pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:17">i</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:25">count</name></expr>;</condition> <incr pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><operator pos:start="53:28" pos:end="53:29">++</operator><name pos:start="53:30" pos:end="53:30">i</name></expr></incr>)</control> <block pos:start="53:33" pos:end="107:5">{<block_content pos:start="55:9" pos:end="105:9">

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:36">(<expr pos:start="55:13" pos:end="55:35"><name pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">pfds</name><index pos:start="55:17" pos:end="55:19">[<expr pos:start="55:18" pos:end="55:18"><name pos:start="55:18" pos:end="55:18">i</name></expr>]</index></name><operator pos:start="55:20" pos:end="55:20">.</operator><name pos:start="55:21" pos:end="55:26">events</name> <operator pos:start="55:28" pos:end="55:28">&amp;</operator> <name pos:start="55:30" pos:end="55:35">POLLIN</name></expr>)</condition> <block pos:start="55:38" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:50">

            <expr_stmt pos:start="57:13" pos:end="59:50"><expr pos:start="57:13" pos:end="59:49"><name pos:start="57:13" pos:end="57:15">err</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="59:49"><name pos:start="57:19" pos:end="57:37">qemu_set_fd_handler</name> <argument_list pos:start="57:39" pos:end="59:49">(<argument pos:start="57:40" pos:end="57:49"><expr pos:start="57:40" pos:end="57:49"><name pos:start="57:40" pos:end="57:46"><name pos:start="57:40" pos:end="57:43">pfds</name><index pos:start="57:44" pos:end="57:46">[<expr pos:start="57:45" pos:end="57:45"><name pos:start="57:45" pos:end="57:45">i</name></expr>]</index></name><operator pos:start="57:47" pos:end="57:47">.</operator><name pos:start="57:48" pos:end="57:49">fd</name></expr></argument>, <argument pos:start="57:52" pos:end="57:68"><expr pos:start="57:52" pos:end="57:68"><name pos:start="57:52" pos:end="57:68">alsa_poll_handler</name></expr></argument>,

                                       <argument pos:start="59:40" pos:end="59:43"><expr pos:start="59:40" pos:end="59:43"><name pos:start="59:40" pos:end="59:43">NULL</name></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><name pos:start="59:46" pos:end="59:48">hlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="75:9"><if pos:start="63:9" pos:end="75:9">if <condition pos:start="63:12" pos:end="63:37">(<expr pos:start="63:13" pos:end="63:36"><name pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:16">pfds</name><index pos:start="63:17" pos:end="63:19">[<expr pos:start="63:18" pos:end="63:18"><name pos:start="63:18" pos:end="63:18">i</name></expr>]</index></name><operator pos:start="63:20" pos:end="63:20">.</operator><name pos:start="63:21" pos:end="63:26">events</name> <operator pos:start="63:28" pos:end="63:28">&amp;</operator> <name pos:start="63:30" pos:end="63:36">POLLOUT</name></expr>)</condition> <block pos:start="63:39" pos:end="75:9">{<block_content pos:start="65:13" pos:end="73:63">

            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:29">(<expr pos:start="65:17" pos:end="65:28"><name pos:start="65:17" pos:end="65:28"><name pos:start="65:17" pos:end="65:20">conf</name><operator pos:start="65:21" pos:end="65:21">.</operator><name pos:start="65:22" pos:end="65:28">verbose</name></name></expr>)</condition> <block pos:start="65:31" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:57">

                <expr_stmt pos:start="67:17" pos:end="67:57"><expr pos:start="67:17" pos:end="67:56"><call pos:start="67:17" pos:end="67:56"><name pos:start="67:17" pos:end="67:21">dolog</name> <argument_list pos:start="67:23" pos:end="67:56">(<argument pos:start="67:24" pos:end="67:40"><expr pos:start="67:24" pos:end="67:40"><literal type="string" pos:start="67:24" pos:end="67:40">"POLLOUT %d %d\n"</literal></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><name pos:start="67:43" pos:end="67:43">i</name></expr></argument>, <argument pos:start="67:46" pos:end="67:55"><expr pos:start="67:46" pos:end="67:55"><name pos:start="67:46" pos:end="67:52"><name pos:start="67:46" pos:end="67:49">pfds</name><index pos:start="67:50" pos:end="67:52">[<expr pos:start="67:51" pos:end="67:51"><name pos:start="67:51" pos:end="67:51">i</name></expr>]</index></name><operator pos:start="67:53" pos:end="67:53">.</operator><name pos:start="67:54" pos:end="67:55">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="73:63"><expr pos:start="71:13" pos:end="73:62"><name pos:start="71:13" pos:end="71:15">err</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="73:62"><name pos:start="71:19" pos:end="71:37">qemu_set_fd_handler</name> <argument_list pos:start="71:39" pos:end="73:62">(<argument pos:start="71:40" pos:end="71:49"><expr pos:start="71:40" pos:end="71:49"><name pos:start="71:40" pos:end="71:46"><name pos:start="71:40" pos:end="71:43">pfds</name><index pos:start="71:44" pos:end="71:46">[<expr pos:start="71:45" pos:end="71:45"><name pos:start="71:45" pos:end="71:45">i</name></expr>]</index></name><operator pos:start="71:47" pos:end="71:47">.</operator><name pos:start="71:48" pos:end="71:49">fd</name></expr></argument>, <argument pos:start="71:52" pos:end="71:55"><expr pos:start="71:52" pos:end="71:55"><name pos:start="71:52" pos:end="71:55">NULL</name></expr></argument>,

                                       <argument pos:start="73:40" pos:end="73:56"><expr pos:start="73:40" pos:end="73:56"><name pos:start="73:40" pos:end="73:56">alsa_poll_handler</name></expr></argument>, <argument pos:start="73:59" pos:end="73:61"><expr pos:start="73:59" pos:end="73:61"><name pos:start="73:59" pos:end="73:61">hlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:25">(<expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:16">conf</name><operator pos:start="77:17" pos:end="77:17">.</operator><name pos:start="77:18" pos:end="77:24">verbose</name></name></expr>)</condition> <block pos:start="77:27" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:55">

            <expr_stmt pos:start="79:13" pos:end="81:55"><expr pos:start="79:13" pos:end="81:54"><call pos:start="79:13" pos:end="81:54"><name pos:start="79:13" pos:end="79:17">dolog</name> <argument_list pos:start="79:19" pos:end="81:54">(<argument pos:start="79:20" pos:end="79:67"><expr pos:start="79:20" pos:end="79:67"><literal type="string" pos:start="79:20" pos:end="79:67">"Set handler events=%#x index=%d fd=%d err=%d\n"</literal></expr></argument>,

                   <argument pos:start="81:20" pos:end="81:33"><expr pos:start="81:20" pos:end="81:33"><name pos:start="81:20" pos:end="81:26"><name pos:start="81:20" pos:end="81:23">pfds</name><index pos:start="81:24" pos:end="81:26">[<expr pos:start="81:25" pos:end="81:25"><name pos:start="81:25" pos:end="81:25">i</name></expr>]</index></name><operator pos:start="81:27" pos:end="81:27">.</operator><name pos:start="81:28" pos:end="81:33">events</name></expr></argument>, <argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><name pos:start="81:36" pos:end="81:36">i</name></expr></argument>, <argument pos:start="81:39" pos:end="81:48"><expr pos:start="81:39" pos:end="81:48"><name pos:start="81:39" pos:end="81:45"><name pos:start="81:39" pos:end="81:42">pfds</name><index pos:start="81:43" pos:end="81:45">[<expr pos:start="81:44" pos:end="81:44"><name pos:start="81:44" pos:end="81:44">i</name></expr>]</index></name><operator pos:start="81:46" pos:end="81:46">.</operator><name pos:start="81:47" pos:end="81:48">fd</name></expr></argument>, <argument pos:start="81:51" pos:end="81:53"><expr pos:start="81:51" pos:end="81:53"><name pos:start="81:51" pos:end="81:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="87:9" pos:end="105:9"><if pos:start="87:9" pos:end="105:9">if <condition pos:start="87:12" pos:end="87:16">(<expr pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">err</name></expr>)</condition> <block pos:start="87:18" pos:end="105:9">{<block_content pos:start="89:13" pos:end="103:22">

            <expr_stmt pos:start="89:13" pos:end="91:55"><expr pos:start="89:13" pos:end="91:54"><call pos:start="89:13" pos:end="91:54"><name pos:start="89:13" pos:end="89:17">dolog</name> <argument_list pos:start="89:19" pos:end="91:54">(<argument pos:start="89:20" pos:end="89:77"><expr pos:start="89:20" pos:end="89:77"><literal type="string" pos:start="89:20" pos:end="89:77">"Failed to set handler events=%#x index=%d fd=%d err=%d\n"</literal></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:33"><expr pos:start="91:20" pos:end="91:33"><name pos:start="91:20" pos:end="91:26"><name pos:start="91:20" pos:end="91:23">pfds</name><index pos:start="91:24" pos:end="91:26">[<expr pos:start="91:25" pos:end="91:25"><name pos:start="91:25" pos:end="91:25">i</name></expr>]</index></name><operator pos:start="91:27" pos:end="91:27">.</operator><name pos:start="91:28" pos:end="91:33">events</name></expr></argument>, <argument pos:start="91:36" pos:end="91:36"><expr pos:start="91:36" pos:end="91:36"><name pos:start="91:36" pos:end="91:36">i</name></expr></argument>, <argument pos:start="91:39" pos:end="91:48"><expr pos:start="91:39" pos:end="91:48"><name pos:start="91:39" pos:end="91:45"><name pos:start="91:39" pos:end="91:42">pfds</name><index pos:start="91:43" pos:end="91:45">[<expr pos:start="91:44" pos:end="91:44"><name pos:start="91:44" pos:end="91:44">i</name></expr>]</index></name><operator pos:start="91:46" pos:end="91:46">.</operator><name pos:start="91:47" pos:end="91:48">fd</name></expr></argument>, <argument pos:start="91:51" pos:end="91:53"><expr pos:start="91:51" pos:end="91:53"><name pos:start="91:51" pos:end="91:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <while pos:start="95:13" pos:end="99:13">while <condition pos:start="95:19" pos:end="95:23">(<expr pos:start="95:20" pos:end="95:22"><name pos:start="95:20" pos:end="95:20">i</name><operator pos:start="95:21" pos:end="95:22">--</operator></expr>)</condition> <block pos:start="95:25" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:67">

                <expr_stmt pos:start="97:17" pos:end="97:67"><expr pos:start="97:17" pos:end="97:66"><call pos:start="97:17" pos:end="97:66"><name pos:start="97:17" pos:end="97:35">qemu_set_fd_handler</name> <argument_list pos:start="97:37" pos:end="97:66">(<argument pos:start="97:38" pos:end="97:47"><expr pos:start="97:38" pos:end="97:47"><name pos:start="97:38" pos:end="97:44"><name pos:start="97:38" pos:end="97:41">pfds</name><index pos:start="97:42" pos:end="97:44">[<expr pos:start="97:43" pos:end="97:43"><name pos:start="97:43" pos:end="97:43">i</name></expr>]</index></name><operator pos:start="97:45" pos:end="97:45">.</operator><name pos:start="97:46" pos:end="97:47">fd</name></expr></argument>, <argument pos:start="97:50" pos:end="97:53"><expr pos:start="97:50" pos:end="97:53"><name pos:start="97:50" pos:end="97:53">NULL</name></expr></argument>, <argument pos:start="97:56" pos:end="97:59"><expr pos:start="97:56" pos:end="97:59"><name pos:start="97:56" pos:end="97:59">NULL</name></expr></argument>, <argument pos:start="97:62" pos:end="97:65"><expr pos:start="97:62" pos:end="97:65"><name pos:start="97:62" pos:end="97:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="101:13" pos:end="101:26"><expr pos:start="101:13" pos:end="101:25"><call pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:18">g_free</name> <argument_list pos:start="101:20" pos:end="101:25">(<argument pos:start="101:21" pos:end="101:24"><expr pos:start="101:21" pos:end="101:24"><name pos:start="101:21" pos:end="101:24">pfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:13"><name pos:start="109:5" pos:end="109:7">hlp</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:13">pfds</name></name> <operator pos:start="109:15" pos:end="109:15">=</operator> <name pos:start="109:17" pos:end="109:20">pfds</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:23"><expr pos:start="111:5" pos:end="111:22"><name pos:start="111:5" pos:end="111:14"><name pos:start="111:5" pos:end="111:7">hlp</name><operator pos:start="111:8" pos:end="111:9">-&gt;</operator><name pos:start="111:10" pos:end="111:14">count</name></name> <operator pos:start="111:16" pos:end="111:16">=</operator> <name pos:start="111:18" pos:end="111:22">count</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:25"><expr pos:start="113:5" pos:end="113:24"><name pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:7">hlp</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:15">handle</name></name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:24">handle</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:21"><expr pos:start="115:5" pos:end="115:20"><name pos:start="115:5" pos:end="115:13"><name pos:start="115:5" pos:end="115:7">hlp</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:13">mask</name></name> <operator pos:start="115:15" pos:end="115:15">=</operator> <name pos:start="115:17" pos:end="115:20">mask</name></expr>;</expr_stmt>

    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
