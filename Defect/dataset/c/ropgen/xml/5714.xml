<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5714.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">kvm_remove_all_breakpoints</name><parameter_list pos:start="1:32" pos:end="1:46">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:42"><name pos:start="1:33" pos:end="1:40">CPUState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:5">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:30"><name pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:28">kvm_sw_breakpoint</name></name> <modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:32">bp</name></decl>, <decl pos:start="5:35" pos:end="5:39"><type ref="prev" pos:start="5:5" pos:end="5:30"><modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:39">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">KVMState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:32">= <expr pos:start="7:19" pos:end="7:32"><name pos:start="7:19" pos:end="7:32"><name pos:start="7:19" pos:end="7:21">cpu</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">kvm_state</name></name></expr></init></decl>;</decl_stmt>



    <macro pos:start="11:5" pos:end="11:64"><name pos:start="11:5" pos:end="11:23">QTAILQ_FOREACH_SAFE</name><argument_list pos:start="11:24" pos:end="11:64">(<argument pos:start="11:25" pos:end="11:26">bp</argument>, <argument pos:start="11:29" pos:end="11:50">&amp;s-&gt;kvm_sw_breakpoints</argument>, <argument pos:start="11:53" pos:end="11:57">entry</argument>, <argument pos:start="11:60" pos:end="11:63">next</argument>)</argument_list></macro> <block pos:start="11:66" pos:end="33:5">{<block_content pos:start="13:9" pos:end="31:19">

        <if_stmt pos:start="13:9" pos:end="27:9"><if pos:start="13:9" pos:end="27:9">if <condition pos:start="13:12" pos:end="13:56">(<expr pos:start="13:13" pos:end="13:55"><call pos:start="13:13" pos:end="13:50"><name pos:start="13:13" pos:end="13:41">kvm_arch_remove_sw_breakpoint</name><argument_list pos:start="13:42" pos:end="13:50">(<argument pos:start="13:43" pos:end="13:45"><expr pos:start="13:43" pos:end="13:45"><name pos:start="13:43" pos:end="13:45">cpu</name></expr></argument>, <argument pos:start="13:48" pos:end="13:49"><expr pos:start="13:48" pos:end="13:49"><name pos:start="13:48" pos:end="13:49">bp</name></expr></argument>)</argument_list></call> <operator pos:start="13:52" pos:end="13:53">!=</operator> <literal type="number" pos:start="13:55" pos:end="13:55">0</literal></expr>)</condition> <block pos:start="13:58" pos:end="27:9">{<block_content pos:start="17:13" pos:end="25:13">

            <comment type="block" pos:start="15:13" pos:end="15:78">/* Try harder to find a CPU that currently sees the breakpoint. */</comment>

            <macro pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:23">CPU_FOREACH</name><argument_list pos:start="17:24" pos:end="17:28">(<argument pos:start="17:25" pos:end="17:27">cpu</argument>)</argument_list></macro> <block pos:start="17:30" pos:end="25:13">{<block_content pos:start="19:17" pos:end="23:17">

                <if_stmt pos:start="19:17" pos:end="23:17"><if pos:start="19:17" pos:end="23:17">if <condition pos:start="19:20" pos:end="19:64">(<expr pos:start="19:21" pos:end="19:63"><call pos:start="19:21" pos:end="19:58"><name pos:start="19:21" pos:end="19:49">kvm_arch_remove_sw_breakpoint</name><argument_list pos:start="19:50" pos:end="19:58">(<argument pos:start="19:51" pos:end="19:53"><expr pos:start="19:51" pos:end="19:53"><name pos:start="19:51" pos:end="19:53">cpu</name></expr></argument>, <argument pos:start="19:56" pos:end="19:57"><expr pos:start="19:56" pos:end="19:57"><name pos:start="19:56" pos:end="19:57">bp</name></expr></argument>)</argument_list></call> <operator pos:start="19:60" pos:end="19:61">==</operator> <literal type="number" pos:start="19:63" pos:end="19:63">0</literal></expr>)</condition> <block pos:start="19:66" pos:end="23:17">{<block_content pos:start="21:21" pos:end="21:26">

                    <break pos:start="21:21" pos:end="21:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><call pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:21">QTAILQ_REMOVE</name><argument_list pos:start="29:22" pos:end="29:56">(<argument pos:start="29:23" pos:end="29:44"><expr pos:start="29:23" pos:end="29:44"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:44"><name pos:start="29:24" pos:end="29:24">s</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:44">kvm_sw_breakpoints</name></name></expr></argument>, <argument pos:start="29:47" pos:end="29:48"><expr pos:start="29:47" pos:end="29:48"><name pos:start="29:47" pos:end="29:48">bp</name></expr></argument>, <argument pos:start="29:51" pos:end="29:55"><expr pos:start="29:51" pos:end="29:55"><name pos:start="29:51" pos:end="29:55">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:19"><expr pos:start="31:9" pos:end="31:18"><call pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:14">g_free</name><argument_list pos:start="31:15" pos:end="31:18">(<argument pos:start="31:16" pos:end="31:17"><expr pos:start="31:16" pos:end="31:17"><name pos:start="31:16" pos:end="31:17">bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><call pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:38">kvm_arch_remove_all_hw_breakpoints</name><argument_list pos:start="35:39" pos:end="35:40">()</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:15">CPU_FOREACH</name><argument_list pos:start="39:16" pos:end="39:20">(<argument pos:start="39:17" pos:end="39:19">cpu</argument>)</argument_list></macro> <block pos:start="39:22" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:39">

        <expr_stmt pos:start="41:9" pos:end="41:39"><expr pos:start="41:9" pos:end="41:38"><call pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:30">kvm_update_guest_debug</name><argument_list pos:start="41:31" pos:end="41:38">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">cpu</name></expr></argument>, <argument pos:start="41:37" pos:end="41:37"><expr pos:start="41:37" pos:end="41:37"><literal type="number" pos:start="41:37" pos:end="41:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
