<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5530.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_audio</name><parameter_list pos:start="1:24" pos:end="1:73">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><name pos:start="1:25" pos:end="1:35">InputStream</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">ist</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">AVPacket</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">pkt</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><name pos:start="1:58" pos:end="1:60">int</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:72">got_output</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:31">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVFrame</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:26">decoded_frame</name></decl>, <decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:13"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">avctx</name> <init pos:start="7:27" pos:end="7:40">= <expr pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:31">ist</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:40">dec_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name></decl>, <decl pos:start="9:17" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">err</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:31"><if pos:start="13:5" pos:end="15:31">if <condition pos:start="13:8" pos:end="13:72">(<expr pos:start="13:9" pos:end="13:71"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:27"><name pos:start="13:10" pos:end="13:12">ist</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:27">decoded_frame</name></name> <operator pos:start="13:29" pos:end="13:30">&amp;&amp;</operator> <operator pos:start="13:32" pos:end="13:32">!</operator><operator pos:start="13:33" pos:end="13:33">(</operator><name pos:start="13:34" pos:end="13:51"><name pos:start="13:34" pos:end="13:36">ist</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:51">decoded_frame</name></name> <operator pos:start="13:53" pos:end="13:53">=</operator> <call pos:start="13:55" pos:end="13:70"><name pos:start="13:55" pos:end="13:68">av_frame_alloc</name><argument_list pos:start="13:69" pos:end="13:70">()</argument_list></call><operator pos:start="13:71" pos:end="13:71">)</operator></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:31"><block_content pos:start="15:9" pos:end="15:31">

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="17:5" pos:end="19:31"><if pos:start="17:5" pos:end="19:31">if <condition pos:start="17:8" pos:end="17:70">(<expr pos:start="17:9" pos:end="17:69"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:26"><name pos:start="17:10" pos:end="17:12">ist</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:26">filter_frame</name></name> <operator pos:start="17:28" pos:end="17:29">&amp;&amp;</operator> <operator pos:start="17:31" pos:end="17:31">!</operator><operator pos:start="17:32" pos:end="17:32">(</operator><name pos:start="17:33" pos:end="17:49"><name pos:start="17:33" pos:end="17:35">ist</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:49">filter_frame</name></name> <operator pos:start="17:51" pos:end="17:51">=</operator> <call pos:start="17:53" pos:end="17:68"><name pos:start="17:53" pos:end="17:66">av_frame_alloc</name><argument_list pos:start="17:67" pos:end="17:68">()</argument_list></call><operator pos:start="17:69" pos:end="17:69">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:31"><block_content pos:start="19:9" pos:end="19:31">

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:17">decoded_frame</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:38"><name pos:start="21:21" pos:end="21:23">ist</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:38">decoded_frame</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:55"><name pos:start="25:11" pos:end="25:16">decode</name><argument_list pos:start="25:17" pos:end="25:55">(<argument pos:start="25:18" pos:end="25:22"><expr pos:start="25:18" pos:end="25:22"><name pos:start="25:18" pos:end="25:22">avctx</name></expr></argument>, <argument pos:start="25:25" pos:end="25:37"><expr pos:start="25:25" pos:end="25:37"><name pos:start="25:25" pos:end="25:37">decoded_frame</name></expr></argument>, <argument pos:start="25:40" pos:end="25:49"><expr pos:start="25:40" pos:end="25:49"><name pos:start="25:40" pos:end="25:49">got_output</name></expr></argument>, <argument pos:start="25:52" pos:end="25:54"><expr pos:start="25:52" pos:end="25:54"><name pos:start="25:52" pos:end="25:54">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:19"><if pos:start="27:5" pos:end="29:19">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><operator pos:start="27:9" pos:end="27:9">!</operator><operator pos:start="27:10" pos:end="27:10">*</operator><name pos:start="27:11" pos:end="27:20">got_output</name> <operator pos:start="27:22" pos:end="27:23">||</operator> <name pos:start="27:25" pos:end="27:27">ret</name> <operator pos:start="27:29" pos:end="27:29">&lt;</operator> <literal type="number" pos:start="27:31" pos:end="27:31">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:19"><block_content pos:start="29:9" pos:end="29:19">

        <return pos:start="29:9" pos:end="29:19">return <expr pos:start="29:16" pos:end="29:18"><name pos:start="29:16" pos:end="29:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:54"><expr pos:start="33:5" pos:end="33:53"><name pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:7">ist</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:24">samples_decoded</name></name> <operator pos:start="33:26" pos:end="33:27">+=</operator> <name pos:start="33:29" pos:end="33:53"><name pos:start="33:29" pos:end="33:41">decoded_frame</name><operator pos:start="33:42" pos:end="33:43">-&gt;</operator><name pos:start="33:44" pos:end="33:53">nb_samples</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:26"><expr pos:start="35:5" pos:end="35:25"><name pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:7">ist</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:23">frames_decoded</name></name><operator pos:start="35:24" pos:end="35:25">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:67">/* if the decoder provides a pts, use it instead of the last packet pts.

       the decoder could be delaying output by a packet or more. */</comment>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="45:43">if <condition pos:start="43:8" pos:end="43:45">(<expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:21">decoded_frame</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:26">pts</name></name> <operator pos:start="43:28" pos:end="43:29">!=</operator> <name pos:start="43:31" pos:end="43:44">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:43"><block_content pos:start="45:9" pos:end="45:43">

        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:11">ist</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:21">next_dts</name></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:42"><name pos:start="45:25" pos:end="45:37">decoded_frame</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:42">pts</name></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="47:5" pos:end="51:5">else if <condition pos:start="47:13" pos:end="47:47">(<expr pos:start="47:14" pos:end="47:46"><name pos:start="47:14" pos:end="47:16">pkt</name> <operator pos:start="47:18" pos:end="47:19">&amp;&amp;</operator> <name pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:23">pkt</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:28">pts</name></name> <operator pos:start="47:30" pos:end="47:31">!=</operator> <name pos:start="47:33" pos:end="47:46">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="47:49" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:38">

        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:21">decoded_frame</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">pts</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:37"><name pos:start="49:30" pos:end="49:32">pkt</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:37">pts</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="61:79"><if pos:start="55:5" pos:end="61:79">if <condition pos:start="55:8" pos:end="55:45">(<expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:21">decoded_frame</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:26">pts</name></name> <operator pos:start="55:28" pos:end="55:29">!=</operator> <name pos:start="55:31" pos:end="55:44">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="61:79"><block_content pos:start="57:9" pos:end="61:79">

        <expr_stmt pos:start="57:9" pos:end="61:79"><expr pos:start="57:9" pos:end="61:78"><name pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:21">decoded_frame</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:26">pts</name></name> <operator pos:start="57:28" pos:end="57:28">=</operator> <macro pos:start="57:30" pos:end="61:78"><name pos:start="57:30" pos:end="57:41">av_rescale_q</name><argument_list pos:start="57:42" pos:end="61:78">(<argument pos:start="57:43" pos:end="57:60">decoded_frame-&gt;pts</argument>,

                                          <argument pos:start="59:43" pos:end="59:60">ist-&gt;st-&gt;time_base</argument>,

                                          <argument pos:start="61:43" pos:end="61:56">(AVRational){<literal type="number" pos:start="61:56" pos:end="61:56">1</literal></argument>, <argument pos:start="61:59" pos:end="61:77">avctx-&gt;sample_rate}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:48"><expr pos:start="63:5" pos:end="63:47"><name pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:7">ist</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:19">nb_samples</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:47"><name pos:start="63:23" pos:end="63:35">decoded_frame</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:47">nb_samples</name></name></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="89:5">for <control pos:start="65:9" pos:end="65:41">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:36"><expr pos:start="65:17" pos:end="65:35"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:35"><name pos:start="65:21" pos:end="65:23">ist</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:35">nb_filters</name></name></expr>;</condition> <incr pos:start="65:38" pos:end="65:40"><expr pos:start="65:38" pos:end="65:40"><name pos:start="65:38" pos:end="65:38">i</name><operator pos:start="65:39" pos:end="65:40">++</operator></expr></incr>)</control> <block pos:start="65:43" pos:end="89:5">{<block_content pos:start="67:9" pos:end="87:18">

        <if_stmt pos:start="67:9" pos:end="79:30"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:36">(<expr pos:start="67:13" pos:end="67:35"><name pos:start="67:13" pos:end="67:13">i</name> <operator pos:start="67:15" pos:end="67:15">&lt;</operator> <name pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:19">ist</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:31">nb_filters</name></name> <operator pos:start="67:33" pos:end="67:33">-</operator> <literal type="number" pos:start="67:35" pos:end="67:35">1</literal></expr>)</condition> <block pos:start="67:38" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:22">

            <expr_stmt pos:start="69:13" pos:end="69:34"><expr pos:start="69:13" pos:end="69:33"><name pos:start="69:13" pos:end="69:13">f</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:19">ist</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:33">filter_frame</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:49"><expr pos:start="71:13" pos:end="71:48"><name pos:start="71:13" pos:end="71:15">err</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:48"><name pos:start="71:19" pos:end="71:30">av_frame_ref</name><argument_list pos:start="71:31" pos:end="71:48">(<argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><name pos:start="71:32" pos:end="71:32">f</name></expr></argument>, <argument pos:start="71:35" pos:end="71:47"><expr pos:start="71:35" pos:end="71:47"><name pos:start="71:35" pos:end="71:47">decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="75:22"><if pos:start="73:13" pos:end="75:22">if <condition pos:start="73:16" pos:end="73:24">(<expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:19">err</name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:22"><block_content pos:start="75:17" pos:end="75:22">

                <break pos:start="75:17" pos:end="75:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="79:30">else<block type="pseudo" pos:start="79:13" pos:end="79:30"><block_content pos:start="79:13" pos:end="79:30">

            <expr_stmt pos:start="79:13" pos:end="79:30"><expr pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:13">f</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <name pos:start="79:17" pos:end="79:29">decoded_frame</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:53"><expr pos:start="83:9" pos:end="83:52"><name pos:start="83:9" pos:end="83:11">err</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:52"><name pos:start="83:15" pos:end="83:32">ifilter_send_frame</name><argument_list pos:start="83:33" pos:end="83:52">(<argument pos:start="83:34" pos:end="83:48"><expr pos:start="83:34" pos:end="83:48"><name pos:start="83:34" pos:end="83:48"><name pos:start="83:34" pos:end="83:36">ist</name><operator pos:start="83:37" pos:end="83:38">-&gt;</operator><name pos:start="83:39" pos:end="83:45">filters</name><index pos:start="83:46" pos:end="83:48">[<expr pos:start="83:47" pos:end="83:47"><name pos:start="83:47" pos:end="83:47">i</name></expr>]</index></name></expr></argument>, <argument pos:start="83:51" pos:end="83:51"><expr pos:start="83:51" pos:end="83:51"><name pos:start="83:51" pos:end="83:51">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="87:18"><if pos:start="85:9" pos:end="87:18">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">err</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:18"><block_content pos:start="87:13" pos:end="87:18">

            <break pos:start="87:13" pos:end="87:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="93:5" pos:end="93:38"><expr pos:start="93:5" pos:end="93:37"><call pos:start="93:5" pos:end="93:37"><name pos:start="93:5" pos:end="93:18">av_frame_unref</name><argument_list pos:start="93:19" pos:end="93:37">(<argument pos:start="93:20" pos:end="93:36"><expr pos:start="93:20" pos:end="93:36"><name pos:start="93:20" pos:end="93:36"><name pos:start="93:20" pos:end="93:22">ist</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:36">filter_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:34"><expr pos:start="95:5" pos:end="95:33"><call pos:start="95:5" pos:end="95:33"><name pos:start="95:5" pos:end="95:18">av_frame_unref</name><argument_list pos:start="95:19" pos:end="95:33">(<argument pos:start="95:20" pos:end="95:32"><expr pos:start="95:20" pos:end="95:32"><name pos:start="95:20" pos:end="95:32">decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="97:5" pos:end="97:31">return <expr pos:start="97:12" pos:end="97:30"><ternary pos:start="97:12" pos:end="97:30"><condition pos:start="97:12" pos:end="97:20"><expr pos:start="97:12" pos:end="97:18"><name pos:start="97:12" pos:end="97:14">err</name> <operator pos:start="97:16" pos:end="97:16">&lt;</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr> ?</condition><then pos:start="97:22" pos:end="97:24"> <expr pos:start="97:22" pos:end="97:24"><name pos:start="97:22" pos:end="97:24">err</name></expr> </then><else pos:start="97:26" pos:end="97:30">: <expr pos:start="97:28" pos:end="97:30"><name pos:start="97:28" pos:end="97:30">ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
