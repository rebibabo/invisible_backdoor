<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19376.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">test_io</name><parameter_list pos:start="1:20" pos:end="1:25">(<parameter pos:start="1:21" pos:end="1:24"><decl pos:start="1:21" pos:end="1:24"><type pos:start="1:21" pos:end="1:24"><name pos:start="1:21" pos:end="1:24">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="11:5" pos:end="218:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

<comment type="block" pos:start="7:1" pos:end="7:57">/* socketpair(PF_UNIX) which does not exist on windows */</comment>



    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13"><name pos:start="11:9" pos:end="11:10">sv</name><index pos:start="11:11" pos:end="11:13">[<expr pos:start="11:12" pos:end="11:12"><literal type="number" pos:start="11:12" pos:end="11:12">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:14">i</name></decl>, <decl pos:start="15:17" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:17" pos:end="15:17">j</name></decl>, <decl pos:start="15:20" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:20" pos:end="15:20">k</name></decl>, <decl pos:start="15:23" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:23" pos:end="15:23">s</name></decl>, <decl pos:start="15:26" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:26" pos:end="15:26">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">fd_set</name></type> <name pos:start="17:12" pos:end="17:14">fds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:17">niov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:16">iovec</name></name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">iov</name></decl>, <decl pos:start="21:24" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:18"><modifier pos:start="21:24" pos:end="21:24">*</modifier></type><name pos:start="21:25" pos:end="21:28">siov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">char</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:22">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:14"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:13">sz</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:14">iov_random</name><argument_list pos:start="29:15" pos:end="29:27">(<argument pos:start="29:16" pos:end="29:19"><expr pos:start="29:16" pos:end="29:19"><operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:19">iov</name></expr></argument>, <argument pos:start="29:22" pos:end="29:26"><expr pos:start="29:22" pos:end="29:26"><operator pos:start="29:22" pos:end="29:22">&amp;</operator><name pos:start="29:23" pos:end="29:26">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:6">sz</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:28"><name pos:start="31:10" pos:end="31:17">iov_size</name><argument_list pos:start="31:18" pos:end="31:28">(<argument pos:start="31:19" pos:end="31:21"><expr pos:start="31:19" pos:end="31:21"><name pos:start="31:19" pos:end="31:21">iov</name></expr></argument>, <argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:7">buf</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:22"><name pos:start="33:11" pos:end="33:18">g_malloc</name><argument_list pos:start="33:19" pos:end="33:22">(<argument pos:start="33:20" pos:end="33:21"><expr pos:start="33:20" pos:end="33:21"><name pos:start="33:20" pos:end="33:21">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="35:5" pos:end="39:5">for <control pos:start="35:9" pos:end="35:28">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:23"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:17">i</name> <operator pos:start="35:19" pos:end="35:19">&lt;</operator> <name pos:start="35:21" pos:end="35:22">sz</name></expr>;</condition> <incr pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><operator pos:start="35:25" pos:end="35:26">++</operator><name pos:start="35:27" pos:end="35:27">i</name></expr></incr>)</control> <block pos:start="35:30" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:25">

        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:11">buf</name><index pos:start="37:12" pos:end="37:14">[<expr pos:start="37:13" pos:end="37:13"><name pos:start="37:13" pos:end="37:13">i</name></expr>]</index></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:18">i</name> <operator pos:start="37:20" pos:end="37:20">&amp;</operator> <literal type="number" pos:start="37:22" pos:end="37:24">255</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><call pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:16">iov_from_buf</name><argument_list pos:start="41:17" pos:end="41:39">(<argument pos:start="41:18" pos:end="41:20"><expr pos:start="41:18" pos:end="41:20"><name pos:start="41:18" pos:end="41:20">iov</name></expr></argument>, <argument pos:start="41:23" pos:end="41:26"><expr pos:start="41:23" pos:end="41:26"><name pos:start="41:23" pos:end="41:26">niov</name></expr></argument>, <argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr></argument>, <argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">buf</name></expr></argument>, <argument pos:start="41:37" pos:end="41:38"><expr pos:start="41:37" pos:end="41:38"><name pos:start="41:37" pos:end="41:38">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:8">siov</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:45"><name pos:start="45:12" pos:end="45:19">g_memdup</name><argument_list pos:start="45:20" pos:end="45:45">(<argument pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:23">iov</name></expr></argument>, <argument pos:start="45:26" pos:end="45:44"><expr pos:start="45:26" pos:end="45:44"><sizeof pos:start="45:26" pos:end="45:37">sizeof<argument_list pos:start="45:32" pos:end="45:37">(<argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><operator pos:start="45:33" pos:end="45:33">*</operator><name pos:start="45:34" pos:end="45:36">iov</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:39" pos:end="45:39">*</operator> <name pos:start="45:41" pos:end="45:44">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:52">(<expr pos:start="49:9" pos:end="49:51"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:18">socketpair</name><argument_list pos:start="49:19" pos:end="49:47">(<argument pos:start="49:20" pos:end="49:26"><expr pos:start="49:20" pos:end="49:26"><name pos:start="49:20" pos:end="49:26">PF_UNIX</name></expr></argument>, <argument pos:start="49:29" pos:end="49:39"><expr pos:start="49:29" pos:end="49:39"><name pos:start="49:29" pos:end="49:39">SOCK_STREAM</name></expr></argument>, <argument pos:start="49:42" pos:end="49:42"><expr pos:start="49:42" pos:end="49:42"><literal type="number" pos:start="49:42" pos:end="49:42">0</literal></expr></argument>, <argument pos:start="49:45" pos:end="49:46"><expr pos:start="49:45" pos:end="49:46"><name pos:start="49:45" pos:end="49:46">sv</name></expr></argument>)</argument_list></call> <operator pos:start="49:49" pos:end="49:49">&lt;</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>)</condition> <block pos:start="49:54" pos:end="55:5">{<block_content pos:start="51:8" pos:end="53:15">

       <expr_stmt pos:start="51:8" pos:end="51:28"><expr pos:start="51:8" pos:end="51:27"><call pos:start="51:8" pos:end="51:27"><name pos:start="51:8" pos:end="51:13">perror</name><argument_list pos:start="51:14" pos:end="51:27">(<argument pos:start="51:15" pos:end="51:26"><expr pos:start="51:15" pos:end="51:26"><literal type="string" pos:start="51:15" pos:end="51:26">"socketpair"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="53:8" pos:end="53:15"><expr pos:start="53:8" pos:end="53:14"><call pos:start="53:8" pos:end="53:14"><name pos:start="53:8" pos:end="53:11">exit</name><argument_list pos:start="53:12" pos:end="53:14">(<argument pos:start="53:13" pos:end="53:13"><expr pos:start="53:13" pos:end="53:13"><literal type="number" pos:start="53:13" pos:end="53:13">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:18"><expr pos:start="59:5" pos:end="59:17"><call pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:11">FD_ZERO</name><argument_list pos:start="59:12" pos:end="59:17">(<argument pos:start="59:13" pos:end="59:16"><expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">&amp;</operator><name pos:start="59:14" pos:end="59:16">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:10"><expr pos:start="63:5" pos:end="63:9"><name pos:start="63:5" pos:end="63:5">t</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <literal type="number" pos:start="63:9" pos:end="63:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="218:0"><if pos:start="65:5" pos:end="135:5">if <condition pos:start="65:8" pos:end="65:20">(<expr pos:start="65:9" pos:end="65:19"><call pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:12">fork</name><argument_list pos:start="65:13" pos:end="65:14">()</argument_list></call> <operator pos:start="65:16" pos:end="65:17">==</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition> <block pos:start="65:22" pos:end="135:5">{<block_content pos:start="71:8" pos:end="131:15">

       <comment type="block" pos:start="67:8" pos:end="67:19">/* writer */</comment>



       <expr_stmt pos:start="71:8" pos:end="71:20"><expr pos:start="71:8" pos:end="71:19"><call pos:start="71:8" pos:end="71:19"><name pos:start="71:8" pos:end="71:12">close</name><argument_list pos:start="71:13" pos:end="71:19">(<argument pos:start="71:14" pos:end="71:18"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:15">sv</name><index pos:start="71:16" pos:end="71:18">[<expr pos:start="71:17" pos:end="71:17"><literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="73:8" pos:end="73:27"><expr pos:start="73:8" pos:end="73:26"><call pos:start="73:8" pos:end="73:26"><name pos:start="73:8" pos:end="73:13">FD_SET</name><argument_list pos:start="73:14" pos:end="73:26">(<argument pos:start="73:15" pos:end="73:19"><expr pos:start="73:15" pos:end="73:19"><name pos:start="73:15" pos:end="73:19"><name pos:start="73:15" pos:end="73:16">sv</name><index pos:start="73:17" pos:end="73:19">[<expr pos:start="73:18" pos:end="73:18"><literal type="number" pos:start="73:18" pos:end="73:18">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:22" pos:end="73:25"><expr pos:start="73:22" pos:end="73:25"><operator pos:start="73:22" pos:end="73:22">&amp;</operator><name pos:start="73:23" pos:end="73:25">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="75:8" pos:end="75:48"><expr pos:start="75:8" pos:end="75:47"><call pos:start="75:8" pos:end="75:47"><name pos:start="75:8" pos:end="75:12">fcntl</name><argument_list pos:start="75:13" pos:end="75:47">(<argument pos:start="75:14" pos:end="75:18"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:15">sv</name><index pos:start="75:16" pos:end="75:18">[<expr pos:start="75:17" pos:end="75:17"><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="75:21" pos:end="75:27"><expr pos:start="75:21" pos:end="75:27"><name pos:start="75:21" pos:end="75:27">F_SETFL</name></expr></argument>, <argument pos:start="75:30" pos:end="75:46"><expr pos:start="75:30" pos:end="75:46"><name pos:start="75:30" pos:end="75:35">O_RDWR</name><operator pos:start="75:36" pos:end="75:36">|</operator><name pos:start="75:37" pos:end="75:46">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="77:8" pos:end="77:45"><expr pos:start="77:8" pos:end="77:44"><name pos:start="77:8" pos:end="77:8">r</name> <operator pos:start="77:10" pos:end="77:10">=</operator> <call pos:start="77:12" pos:end="77:44"><name pos:start="77:12" pos:end="77:32">g_test_rand_int_range</name><argument_list pos:start="77:33" pos:end="77:44">(<argument pos:start="77:34" pos:end="77:39"><expr pos:start="77:34" pos:end="77:39"><name pos:start="77:34" pos:end="77:35">sz</name> <operator pos:start="77:37" pos:end="77:37">/</operator> <literal type="number" pos:start="77:39" pos:end="77:39">2</literal></expr></argument>, <argument pos:start="77:42" pos:end="77:43"><expr pos:start="77:42" pos:end="77:43"><name pos:start="77:42" pos:end="77:43">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="79:8" pos:end="79:63"><expr pos:start="79:8" pos:end="79:62"><call pos:start="79:8" pos:end="79:62"><name pos:start="79:8" pos:end="79:17">setsockopt</name><argument_list pos:start="79:18" pos:end="79:62">(<argument pos:start="79:19" pos:end="79:23"><expr pos:start="79:19" pos:end="79:23"><name pos:start="79:19" pos:end="79:23"><name pos:start="79:19" pos:end="79:20">sv</name><index pos:start="79:21" pos:end="79:23">[<expr pos:start="79:22" pos:end="79:22"><literal type="number" pos:start="79:22" pos:end="79:22">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:26" pos:end="79:35"><expr pos:start="79:26" pos:end="79:35"><name pos:start="79:26" pos:end="79:35">SOL_SOCKET</name></expr></argument>, <argument pos:start="79:38" pos:end="79:46"><expr pos:start="79:38" pos:end="79:46"><name pos:start="79:38" pos:end="79:46">SO_SNDBUF</name></expr></argument>, <argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><operator pos:start="79:49" pos:end="79:49">&amp;</operator><name pos:start="79:50" pos:end="79:50">r</name></expr></argument>, <argument pos:start="79:53" pos:end="79:61"><expr pos:start="79:53" pos:end="79:61"><sizeof pos:start="79:53" pos:end="79:61">sizeof<argument_list pos:start="79:59" pos:end="79:61">(<argument pos:start="79:60" pos:end="79:60"><expr pos:start="79:60" pos:end="79:60"><name pos:start="79:60" pos:end="79:60">r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



       <for pos:start="83:8" pos:end="123:8">for <control pos:start="83:12" pos:end="83:32">(<init pos:start="83:13" pos:end="83:18"><expr pos:start="83:13" pos:end="83:17"><name pos:start="83:13" pos:end="83:13">i</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="number" pos:start="83:17" pos:end="83:17">0</literal></expr>;</init> <condition pos:start="83:20" pos:end="83:27"><expr pos:start="83:20" pos:end="83:26"><name pos:start="83:20" pos:end="83:20">i</name> <operator pos:start="83:22" pos:end="83:23">&lt;=</operator> <name pos:start="83:25" pos:end="83:26">sz</name></expr>;</condition> <incr pos:start="83:29" pos:end="83:31"><expr pos:start="83:29" pos:end="83:31"><operator pos:start="83:29" pos:end="83:30">++</operator><name pos:start="83:31" pos:end="83:31">i</name></expr></incr>)</control> <block pos:start="83:34" pos:end="123:8">{<block_content pos:start="85:12" pos:end="121:12">

           <for pos:start="85:12" pos:end="121:12">for <control pos:start="85:16" pos:end="85:36">(<init pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:17">j</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:21">i</name></expr>;</init> <condition pos:start="85:24" pos:end="85:31"><expr pos:start="85:24" pos:end="85:30"><name pos:start="85:24" pos:end="85:24">j</name> <operator pos:start="85:26" pos:end="85:27">&lt;=</operator> <name pos:start="85:29" pos:end="85:30">sz</name></expr>;</condition> <incr pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><operator pos:start="85:33" pos:end="85:34">++</operator><name pos:start="85:35" pos:end="85:35">j</name></expr></incr>)</control> <block pos:start="85:38" pos:end="121:12">{<block_content pos:start="87:16" pos:end="119:30">

               <expr_stmt pos:start="87:16" pos:end="87:21"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:16">k</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:20">i</name></expr>;</expr_stmt>

               <do pos:start="89:16" pos:end="119:30">do <block pos:start="89:19" pos:end="119:16">{<block_content pos:start="91:20" pos:end="117:20">

                   <expr_stmt pos:start="91:20" pos:end="91:59"><expr pos:start="91:20" pos:end="91:58"><name pos:start="91:20" pos:end="91:20">s</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <call pos:start="91:24" pos:end="91:58"><name pos:start="91:24" pos:end="91:44">g_test_rand_int_range</name><argument_list pos:start="91:45" pos:end="91:58">(<argument pos:start="91:46" pos:end="91:46"><expr pos:start="91:46" pos:end="91:46"><literal type="number" pos:start="91:46" pos:end="91:46">0</literal></expr></argument>, <argument pos:start="91:49" pos:end="91:57"><expr pos:start="91:49" pos:end="91:57"><name pos:start="91:49" pos:end="91:49">j</name> <operator pos:start="91:51" pos:end="91:51">-</operator> <name pos:start="91:53" pos:end="91:53">k</name> <operator pos:start="91:55" pos:end="91:55">+</operator> <literal type="number" pos:start="91:57" pos:end="91:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="93:20" pos:end="93:56"><expr pos:start="93:20" pos:end="93:55"><name pos:start="93:20" pos:end="93:20">r</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="93:55"><name pos:start="93:24" pos:end="93:31">iov_send</name><argument_list pos:start="93:32" pos:end="93:55">(<argument pos:start="93:33" pos:end="93:37"><expr pos:start="93:33" pos:end="93:37"><name pos:start="93:33" pos:end="93:37"><name pos:start="93:33" pos:end="93:34">sv</name><index pos:start="93:35" pos:end="93:37">[<expr pos:start="93:36" pos:end="93:36"><literal type="number" pos:start="93:36" pos:end="93:36">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:40" pos:end="93:42"><expr pos:start="93:40" pos:end="93:42"><name pos:start="93:40" pos:end="93:42">iov</name></expr></argument>, <argument pos:start="93:45" pos:end="93:48"><expr pos:start="93:45" pos:end="93:48"><name pos:start="93:45" pos:end="93:48">niov</name></expr></argument>, <argument pos:start="93:51" pos:end="93:51"><expr pos:start="93:51" pos:end="93:51"><name pos:start="93:51" pos:end="93:51">k</name></expr></argument>, <argument pos:start="93:54" pos:end="93:54"><expr pos:start="93:54" pos:end="93:54"><name pos:start="93:54" pos:end="93:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="95:20" pos:end="95:71"><expr pos:start="95:20" pos:end="95:70"><call pos:start="95:20" pos:end="95:70"><name pos:start="95:20" pos:end="95:27">g_assert</name><argument_list pos:start="95:28" pos:end="95:70">(<argument pos:start="95:29" pos:end="95:69"><expr pos:start="95:29" pos:end="95:69"><call pos:start="95:29" pos:end="95:64"><name pos:start="95:29" pos:end="95:34">memcmp</name><argument_list pos:start="95:35" pos:end="95:64">(<argument pos:start="95:36" pos:end="95:38"><expr pos:start="95:36" pos:end="95:38"><name pos:start="95:36" pos:end="95:38">iov</name></expr></argument>, <argument pos:start="95:41" pos:end="95:44"><expr pos:start="95:41" pos:end="95:44"><name pos:start="95:41" pos:end="95:44">siov</name></expr></argument>, <argument pos:start="95:47" pos:end="95:63"><expr pos:start="95:47" pos:end="95:63"><sizeof pos:start="95:47" pos:end="95:58">sizeof<argument_list pos:start="95:53" pos:end="95:58">(<argument pos:start="95:54" pos:end="95:57"><expr pos:start="95:54" pos:end="95:57"><operator pos:start="95:54" pos:end="95:54">*</operator><name pos:start="95:55" pos:end="95:57">iov</name></expr></argument>)</argument_list></sizeof><operator pos:start="95:59" pos:end="95:59">*</operator><name pos:start="95:60" pos:end="95:63">niov</name></expr></argument>)</argument_list></call> <operator pos:start="95:66" pos:end="95:67">==</operator> <literal type="number" pos:start="95:69" pos:end="95:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <if_stmt pos:start="97:20" pos:end="117:20"><if pos:start="97:20" pos:end="105:20">if <condition pos:start="97:23" pos:end="97:30">(<expr pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:24">r</name> <operator pos:start="97:26" pos:end="97:27">&gt;=</operator> <literal type="number" pos:start="97:29" pos:end="97:29">0</literal></expr>)</condition> <block pos:start="97:32" pos:end="105:20">{<block_content pos:start="99:24" pos:end="103:60">

                       <expr_stmt pos:start="99:24" pos:end="99:30"><expr pos:start="99:24" pos:end="99:29"><name pos:start="99:24" pos:end="99:24">k</name> <operator pos:start="99:26" pos:end="99:27">+=</operator> <name pos:start="99:29" pos:end="99:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="101:24" pos:end="101:30"><expr pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:24">t</name> <operator pos:start="101:26" pos:end="101:27">+=</operator> <name pos:start="101:29" pos:end="101:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="103:24" pos:end="103:60"><expr pos:start="103:24" pos:end="103:59"><call pos:start="103:24" pos:end="103:59"><name pos:start="103:24" pos:end="103:29">usleep</name><argument_list pos:start="103:30" pos:end="103:59">(<argument pos:start="103:31" pos:end="103:58"><expr pos:start="103:31" pos:end="103:58"><call pos:start="103:31" pos:end="103:58"><name pos:start="103:31" pos:end="103:51">g_test_rand_int_range</name><argument_list pos:start="103:52" pos:end="103:58">(<argument pos:start="103:53" pos:end="103:53"><expr pos:start="103:53" pos:end="103:53"><literal type="number" pos:start="103:53" pos:end="103:53">0</literal></expr></argument>, <argument pos:start="103:56" pos:end="103:57"><expr pos:start="103:56" pos:end="103:57"><literal type="number" pos:start="103:56" pos:end="103:57">30</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="105:22" pos:end="111:20">else if <condition pos:start="105:30" pos:end="105:46">(<expr pos:start="105:31" pos:end="105:45"><name pos:start="105:31" pos:end="105:35">errno</name> <operator pos:start="105:37" pos:end="105:38">==</operator> <name pos:start="105:40" pos:end="105:45">EAGAIN</name></expr>)</condition> <block pos:start="105:48" pos:end="111:20">{<block_content pos:start="107:24" pos:end="109:32">

                       <expr_stmt pos:start="107:24" pos:end="107:63"><expr pos:start="107:24" pos:end="107:62"><call pos:start="107:24" pos:end="107:62"><name pos:start="107:24" pos:end="107:29">select</name><argument_list pos:start="107:30" pos:end="107:62">(<argument pos:start="107:31" pos:end="107:37"><expr pos:start="107:31" pos:end="107:37"><name pos:start="107:31" pos:end="107:35"><name pos:start="107:31" pos:end="107:32">sv</name><index pos:start="107:33" pos:end="107:35">[<expr pos:start="107:34" pos:end="107:34"><literal type="number" pos:start="107:34" pos:end="107:34">1</literal></expr>]</index></name><operator pos:start="107:36" pos:end="107:36">+</operator><literal type="number" pos:start="107:37" pos:end="107:37">1</literal></expr></argument>, <argument pos:start="107:40" pos:end="107:43"><expr pos:start="107:40" pos:end="107:43"><name pos:start="107:40" pos:end="107:43">NULL</name></expr></argument>, <argument pos:start="107:46" pos:end="107:49"><expr pos:start="107:46" pos:end="107:49"><operator pos:start="107:46" pos:end="107:46">&amp;</operator><name pos:start="107:47" pos:end="107:49">fds</name></expr></argument>, <argument pos:start="107:52" pos:end="107:55"><expr pos:start="107:52" pos:end="107:55"><name pos:start="107:52" pos:end="107:55">NULL</name></expr></argument>, <argument pos:start="107:58" pos:end="107:61"><expr pos:start="107:58" pos:end="107:61"><name pos:start="107:58" pos:end="107:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <continue pos:start="109:24" pos:end="109:32">continue;</continue>

                   </block_content>}</block></if> <else pos:start="111:22" pos:end="117:20">else <block pos:start="111:27" pos:end="117:20">{<block_content pos:start="113:24" pos:end="115:31">

                       <expr_stmt pos:start="113:24" pos:end="113:38"><expr pos:start="113:24" pos:end="113:37"><call pos:start="113:24" pos:end="113:37"><name pos:start="113:24" pos:end="113:29">perror</name><argument_list pos:start="113:30" pos:end="113:37">(<argument pos:start="113:31" pos:end="113:36"><expr pos:start="113:31" pos:end="113:36"><literal type="string" pos:start="113:31" pos:end="113:36">"send"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <expr_stmt pos:start="115:24" pos:end="115:31"><expr pos:start="115:24" pos:end="115:30"><call pos:start="115:24" pos:end="115:30"><name pos:start="115:24" pos:end="115:27">exit</name><argument_list pos:start="115:28" pos:end="115:30">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><literal type="number" pos:start="115:29" pos:end="115:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></else></if_stmt>

               </block_content>}</block> while<condition pos:start="119:23" pos:end="119:29">(<expr pos:start="119:24" pos:end="119:28"><name pos:start="119:24" pos:end="119:24">k</name> <operator pos:start="119:26" pos:end="119:26">&lt;</operator> <name pos:start="119:28" pos:end="119:28">j</name></expr>)</condition>;</do>

           </block_content>}</block></for>

       </block_content>}</block></for>

       <expr_stmt pos:start="125:8" pos:end="125:27"><expr pos:start="125:8" pos:end="125:26"><call pos:start="125:8" pos:end="125:26"><name pos:start="125:8" pos:end="125:15">iov_free</name><argument_list pos:start="125:16" pos:end="125:26">(<argument pos:start="125:17" pos:end="125:19"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">iov</name></expr></argument>, <argument pos:start="125:22" pos:end="125:25"><expr pos:start="125:22" pos:end="125:25"><name pos:start="125:22" pos:end="125:25">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="127:8" pos:end="127:19"><expr pos:start="127:8" pos:end="127:18"><call pos:start="127:8" pos:end="127:18"><name pos:start="127:8" pos:end="127:13">g_free</name><argument_list pos:start="127:14" pos:end="127:18">(<argument pos:start="127:15" pos:end="127:17"><expr pos:start="127:15" pos:end="127:17"><name pos:start="127:15" pos:end="127:17">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="129:8" pos:end="129:20"><expr pos:start="129:8" pos:end="129:19"><call pos:start="129:8" pos:end="129:19"><name pos:start="129:8" pos:end="129:13">g_free</name><argument_list pos:start="129:14" pos:end="129:19">(<argument pos:start="129:15" pos:end="129:18"><expr pos:start="129:15" pos:end="129:18"><name pos:start="129:15" pos:end="129:18">siov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="131:8" pos:end="131:15"><expr pos:start="131:8" pos:end="131:14"><call pos:start="131:8" pos:end="131:14"><name pos:start="131:8" pos:end="131:11">exit</name><argument_list pos:start="131:12" pos:end="131:14">(<argument pos:start="131:13" pos:end="131:13"><expr pos:start="131:13" pos:end="131:13"><literal type="number" pos:start="131:13" pos:end="131:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="135:7" pos:end="218:0">else <block pos:start="135:12" pos:end="218:0">{<block_content pos:start="141:8" pos:end="213:20">

       <comment type="block" pos:start="137:8" pos:end="137:30">/* reader &amp; verifier */</comment>



       <expr_stmt pos:start="141:8" pos:end="141:20"><expr pos:start="141:8" pos:end="141:19"><call pos:start="141:8" pos:end="141:19"><name pos:start="141:8" pos:end="141:12">close</name><argument_list pos:start="141:13" pos:end="141:19">(<argument pos:start="141:14" pos:end="141:18"><expr pos:start="141:14" pos:end="141:18"><name pos:start="141:14" pos:end="141:18"><name pos:start="141:14" pos:end="141:15">sv</name><index pos:start="141:16" pos:end="141:18">[<expr pos:start="141:17" pos:end="141:17"><literal type="number" pos:start="141:17" pos:end="141:17">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="143:8" pos:end="143:27"><expr pos:start="143:8" pos:end="143:26"><call pos:start="143:8" pos:end="143:26"><name pos:start="143:8" pos:end="143:13">FD_SET</name><argument_list pos:start="143:14" pos:end="143:26">(<argument pos:start="143:15" pos:end="143:19"><expr pos:start="143:15" pos:end="143:19"><name pos:start="143:15" pos:end="143:19"><name pos:start="143:15" pos:end="143:16">sv</name><index pos:start="143:17" pos:end="143:19">[<expr pos:start="143:18" pos:end="143:18"><literal type="number" pos:start="143:18" pos:end="143:18">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:22" pos:end="143:25"><expr pos:start="143:22" pos:end="143:25"><operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:25">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="145:8" pos:end="145:48"><expr pos:start="145:8" pos:end="145:47"><call pos:start="145:8" pos:end="145:47"><name pos:start="145:8" pos:end="145:12">fcntl</name><argument_list pos:start="145:13" pos:end="145:47">(<argument pos:start="145:14" pos:end="145:18"><expr pos:start="145:14" pos:end="145:18"><name pos:start="145:14" pos:end="145:18"><name pos:start="145:14" pos:end="145:15">sv</name><index pos:start="145:16" pos:end="145:18">[<expr pos:start="145:17" pos:end="145:17"><literal type="number" pos:start="145:17" pos:end="145:17">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="145:21" pos:end="145:27"><expr pos:start="145:21" pos:end="145:27"><name pos:start="145:21" pos:end="145:27">F_SETFL</name></expr></argument>, <argument pos:start="145:30" pos:end="145:46"><expr pos:start="145:30" pos:end="145:46"><name pos:start="145:30" pos:end="145:35">O_RDWR</name><operator pos:start="145:36" pos:end="145:36">|</operator><name pos:start="145:37" pos:end="145:46">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="147:8" pos:end="147:45"><expr pos:start="147:8" pos:end="147:44"><name pos:start="147:8" pos:end="147:8">r</name> <operator pos:start="147:10" pos:end="147:10">=</operator> <call pos:start="147:12" pos:end="147:44"><name pos:start="147:12" pos:end="147:32">g_test_rand_int_range</name><argument_list pos:start="147:33" pos:end="147:44">(<argument pos:start="147:34" pos:end="147:39"><expr pos:start="147:34" pos:end="147:39"><name pos:start="147:34" pos:end="147:35">sz</name> <operator pos:start="147:37" pos:end="147:37">/</operator> <literal type="number" pos:start="147:39" pos:end="147:39">2</literal></expr></argument>, <argument pos:start="147:42" pos:end="147:43"><expr pos:start="147:42" pos:end="147:43"><name pos:start="147:42" pos:end="147:43">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="149:8" pos:end="149:63"><expr pos:start="149:8" pos:end="149:62"><call pos:start="149:8" pos:end="149:62"><name pos:start="149:8" pos:end="149:17">setsockopt</name><argument_list pos:start="149:18" pos:end="149:62">(<argument pos:start="149:19" pos:end="149:23"><expr pos:start="149:19" pos:end="149:23"><name pos:start="149:19" pos:end="149:23"><name pos:start="149:19" pos:end="149:20">sv</name><index pos:start="149:21" pos:end="149:23">[<expr pos:start="149:22" pos:end="149:22"><literal type="number" pos:start="149:22" pos:end="149:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:26" pos:end="149:35"><expr pos:start="149:26" pos:end="149:35"><name pos:start="149:26" pos:end="149:35">SOL_SOCKET</name></expr></argument>, <argument pos:start="149:38" pos:end="149:46"><expr pos:start="149:38" pos:end="149:46"><name pos:start="149:38" pos:end="149:46">SO_RCVBUF</name></expr></argument>, <argument pos:start="149:49" pos:end="149:50"><expr pos:start="149:49" pos:end="149:50"><operator pos:start="149:49" pos:end="149:49">&amp;</operator><name pos:start="149:50" pos:end="149:50">r</name></expr></argument>, <argument pos:start="149:53" pos:end="149:61"><expr pos:start="149:53" pos:end="149:61"><sizeof pos:start="149:53" pos:end="149:61">sizeof<argument_list pos:start="149:59" pos:end="149:61">(<argument pos:start="149:60" pos:end="149:60"><expr pos:start="149:60" pos:end="149:60"><name pos:start="149:60" pos:end="149:60">r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="151:8" pos:end="151:22"><expr pos:start="151:8" pos:end="151:21"><call pos:start="151:8" pos:end="151:21"><name pos:start="151:8" pos:end="151:13">usleep</name><argument_list pos:start="151:14" pos:end="151:21">(<argument pos:start="151:15" pos:end="151:20"><expr pos:start="151:15" pos:end="151:20"><literal type="number" pos:start="151:15" pos:end="151:20">500000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



       <for pos:start="155:8" pos:end="205:9">for <control pos:start="155:12" pos:end="155:32">(<init pos:start="155:13" pos:end="155:18"><expr pos:start="155:13" pos:end="155:17"><name pos:start="155:13" pos:end="155:13">i</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <literal type="number" pos:start="155:17" pos:end="155:17">0</literal></expr>;</init> <condition pos:start="155:20" pos:end="155:27"><expr pos:start="155:20" pos:end="155:26"><name pos:start="155:20" pos:end="155:20">i</name> <operator pos:start="155:22" pos:end="155:23">&lt;=</operator> <name pos:start="155:25" pos:end="155:26">sz</name></expr>;</condition> <incr pos:start="155:29" pos:end="155:31"><expr pos:start="155:29" pos:end="155:31"><operator pos:start="155:29" pos:end="155:30">++</operator><name pos:start="155:31" pos:end="155:31">i</name></expr></incr>)</control> <block pos:start="155:34" pos:end="205:9">{<block_content pos:start="157:12" pos:end="203:12">

           <for pos:start="157:12" pos:end="203:12">for <control pos:start="157:16" pos:end="157:36">(<init pos:start="157:17" pos:end="157:22"><expr pos:start="157:17" pos:end="157:21"><name pos:start="157:17" pos:end="157:17">j</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <name pos:start="157:21" pos:end="157:21">i</name></expr>;</init> <condition pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:30"><name pos:start="157:24" pos:end="157:24">j</name> <operator pos:start="157:26" pos:end="157:27">&lt;=</operator> <name pos:start="157:29" pos:end="157:30">sz</name></expr>;</condition> <incr pos:start="157:33" pos:end="157:35"><expr pos:start="157:33" pos:end="157:35"><operator pos:start="157:33" pos:end="157:34">++</operator><name pos:start="157:35" pos:end="157:35">j</name></expr></incr>)</control> <block pos:start="157:38" pos:end="203:12">{<block_content pos:start="159:16" pos:end="201:51">

               <expr_stmt pos:start="159:16" pos:end="159:21"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:16">k</name> <operator pos:start="159:18" pos:end="159:18">=</operator> <name pos:start="159:20" pos:end="159:20">i</name></expr>;</expr_stmt>

               <expr_stmt pos:start="161:16" pos:end="161:50"><expr pos:start="161:16" pos:end="161:49"><call pos:start="161:16" pos:end="161:49"><name pos:start="161:16" pos:end="161:25">iov_memset</name><argument_list pos:start="161:26" pos:end="161:49">(<argument pos:start="161:27" pos:end="161:29"><expr pos:start="161:27" pos:end="161:29"><name pos:start="161:27" pos:end="161:29">iov</name></expr></argument>, <argument pos:start="161:32" pos:end="161:35"><expr pos:start="161:32" pos:end="161:35"><name pos:start="161:32" pos:end="161:35">niov</name></expr></argument>, <argument pos:start="161:38" pos:end="161:38"><expr pos:start="161:38" pos:end="161:38"><literal type="number" pos:start="161:38" pos:end="161:38">0</literal></expr></argument>, <argument pos:start="161:41" pos:end="161:44"><expr pos:start="161:41" pos:end="161:44"><literal type="number" pos:start="161:41" pos:end="161:44">0xff</literal></expr></argument>, <argument pos:start="161:47" pos:end="161:48"><expr pos:start="161:47" pos:end="161:48"><operator pos:start="161:47" pos:end="161:47">-</operator><literal type="number" pos:start="161:48" pos:end="161:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <do pos:start="163:16" pos:end="199:30">do <block pos:start="163:19" pos:end="199:16">{<block_content pos:start="165:20" pos:end="197:20">

                   <expr_stmt pos:start="165:20" pos:end="165:59"><expr pos:start="165:20" pos:end="165:58"><name pos:start="165:20" pos:end="165:20">s</name> <operator pos:start="165:22" pos:end="165:22">=</operator> <call pos:start="165:24" pos:end="165:58"><name pos:start="165:24" pos:end="165:44">g_test_rand_int_range</name><argument_list pos:start="165:45" pos:end="165:58">(<argument pos:start="165:46" pos:end="165:46"><expr pos:start="165:46" pos:end="165:46"><literal type="number" pos:start="165:46" pos:end="165:46">0</literal></expr></argument>, <argument pos:start="165:49" pos:end="165:57"><expr pos:start="165:49" pos:end="165:57"><name pos:start="165:49" pos:end="165:49">j</name> <operator pos:start="165:51" pos:end="165:51">-</operator> <name pos:start="165:53" pos:end="165:53">k</name> <operator pos:start="165:55" pos:end="165:55">+</operator> <literal type="number" pos:start="165:57" pos:end="165:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="167:20" pos:end="167:56"><expr pos:start="167:20" pos:end="167:55"><name pos:start="167:20" pos:end="167:20">r</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <call pos:start="167:24" pos:end="167:55"><name pos:start="167:24" pos:end="167:31">iov_recv</name><argument_list pos:start="167:32" pos:end="167:55">(<argument pos:start="167:33" pos:end="167:37"><expr pos:start="167:33" pos:end="167:37"><name pos:start="167:33" pos:end="167:37"><name pos:start="167:33" pos:end="167:34">sv</name><index pos:start="167:35" pos:end="167:37">[<expr pos:start="167:36" pos:end="167:36"><literal type="number" pos:start="167:36" pos:end="167:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="167:40" pos:end="167:42"><expr pos:start="167:40" pos:end="167:42"><name pos:start="167:40" pos:end="167:42">iov</name></expr></argument>, <argument pos:start="167:45" pos:end="167:48"><expr pos:start="167:45" pos:end="167:48"><name pos:start="167:45" pos:end="167:48">niov</name></expr></argument>, <argument pos:start="167:51" pos:end="167:51"><expr pos:start="167:51" pos:end="167:51"><name pos:start="167:51" pos:end="167:51">k</name></expr></argument>, <argument pos:start="167:54" pos:end="167:54"><expr pos:start="167:54" pos:end="167:54"><name pos:start="167:54" pos:end="167:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <expr_stmt pos:start="169:20" pos:end="169:71"><expr pos:start="169:20" pos:end="169:70"><call pos:start="169:20" pos:end="169:70"><name pos:start="169:20" pos:end="169:27">g_assert</name><argument_list pos:start="169:28" pos:end="169:70">(<argument pos:start="169:29" pos:end="169:69"><expr pos:start="169:29" pos:end="169:69"><call pos:start="169:29" pos:end="169:64"><name pos:start="169:29" pos:end="169:34">memcmp</name><argument_list pos:start="169:35" pos:end="169:64">(<argument pos:start="169:36" pos:end="169:38"><expr pos:start="169:36" pos:end="169:38"><name pos:start="169:36" pos:end="169:38">iov</name></expr></argument>, <argument pos:start="169:41" pos:end="169:44"><expr pos:start="169:41" pos:end="169:44"><name pos:start="169:41" pos:end="169:44">siov</name></expr></argument>, <argument pos:start="169:47" pos:end="169:63"><expr pos:start="169:47" pos:end="169:63"><sizeof pos:start="169:47" pos:end="169:58">sizeof<argument_list pos:start="169:53" pos:end="169:58">(<argument pos:start="169:54" pos:end="169:57"><expr pos:start="169:54" pos:end="169:57"><operator pos:start="169:54" pos:end="169:54">*</operator><name pos:start="169:55" pos:end="169:57">iov</name></expr></argument>)</argument_list></sizeof><operator pos:start="169:59" pos:end="169:59">*</operator><name pos:start="169:60" pos:end="169:63">niov</name></expr></argument>)</argument_list></call> <operator pos:start="169:66" pos:end="169:67">==</operator> <literal type="number" pos:start="169:69" pos:end="169:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <if_stmt pos:start="171:20" pos:end="197:20"><if pos:start="171:20" pos:end="177:20">if <condition pos:start="171:23" pos:end="171:29">(<expr pos:start="171:24" pos:end="171:28"><name pos:start="171:24" pos:end="171:24">r</name> <operator pos:start="171:26" pos:end="171:26">&gt;</operator> <literal type="number" pos:start="171:28" pos:end="171:28">0</literal></expr>)</condition> <block pos:start="171:31" pos:end="177:20">{<block_content pos:start="173:24" pos:end="175:30">

                       <expr_stmt pos:start="173:24" pos:end="173:30"><expr pos:start="173:24" pos:end="173:29"><name pos:start="173:24" pos:end="173:24">k</name> <operator pos:start="173:26" pos:end="173:27">+=</operator> <name pos:start="173:29" pos:end="173:29">r</name></expr>;</expr_stmt>

                       <expr_stmt pos:start="175:24" pos:end="175:30"><expr pos:start="175:24" pos:end="175:29"><name pos:start="175:24" pos:end="175:24">t</name> <operator pos:start="175:26" pos:end="175:27">+=</operator> <name pos:start="175:29" pos:end="175:29">r</name></expr>;</expr_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="177:22" pos:end="185:20">else if <condition pos:start="177:30" pos:end="177:33">(<expr pos:start="177:31" pos:end="177:32"><operator pos:start="177:31" pos:end="177:31">!</operator><name pos:start="177:32" pos:end="177:32">r</name></expr>)</condition> <block pos:start="177:35" pos:end="185:20">{<block_content pos:start="179:24" pos:end="183:24">

                       <if_stmt pos:start="179:24" pos:end="183:24"><if pos:start="179:24" pos:end="183:24">if <condition pos:start="179:27" pos:end="179:29">(<expr pos:start="179:28" pos:end="179:28"><name pos:start="179:28" pos:end="179:28">s</name></expr>)</condition> <block pos:start="179:31" pos:end="183:24">{<block_content pos:start="181:28" pos:end="181:33">

                           <break pos:start="181:28" pos:end="181:33">break;</break>

                       </block_content>}</block></if></if_stmt>

                   </block_content>}</block></if> <if type="elseif" pos:start="185:22" pos:end="191:20">else if <condition pos:start="185:30" pos:end="185:46">(<expr pos:start="185:31" pos:end="185:45"><name pos:start="185:31" pos:end="185:35">errno</name> <operator pos:start="185:37" pos:end="185:38">==</operator> <name pos:start="185:40" pos:end="185:45">EAGAIN</name></expr>)</condition> <block pos:start="185:48" pos:end="191:20">{<block_content pos:start="187:24" pos:end="189:32">

                       <expr_stmt pos:start="187:24" pos:end="187:63"><expr pos:start="187:24" pos:end="187:62"><call pos:start="187:24" pos:end="187:62"><name pos:start="187:24" pos:end="187:29">select</name><argument_list pos:start="187:30" pos:end="187:62">(<argument pos:start="187:31" pos:end="187:37"><expr pos:start="187:31" pos:end="187:37"><name pos:start="187:31" pos:end="187:35"><name pos:start="187:31" pos:end="187:32">sv</name><index pos:start="187:33" pos:end="187:35">[<expr pos:start="187:34" pos:end="187:34"><literal type="number" pos:start="187:34" pos:end="187:34">0</literal></expr>]</index></name><operator pos:start="187:36" pos:end="187:36">+</operator><literal type="number" pos:start="187:37" pos:end="187:37">1</literal></expr></argument>, <argument pos:start="187:40" pos:end="187:43"><expr pos:start="187:40" pos:end="187:43"><operator pos:start="187:40" pos:end="187:40">&amp;</operator><name pos:start="187:41" pos:end="187:43">fds</name></expr></argument>, <argument pos:start="187:46" pos:end="187:49"><expr pos:start="187:46" pos:end="187:49"><name pos:start="187:46" pos:end="187:49">NULL</name></expr></argument>, <argument pos:start="187:52" pos:end="187:55"><expr pos:start="187:52" pos:end="187:55"><name pos:start="187:52" pos:end="187:55">NULL</name></expr></argument>, <argument pos:start="187:58" pos:end="187:61"><expr pos:start="187:58" pos:end="187:61"><name pos:start="187:58" pos:end="187:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <continue pos:start="189:24" pos:end="189:32">continue;</continue>

                   </block_content>}</block></if> <else pos:start="191:22" pos:end="197:20">else <block pos:start="191:27" pos:end="197:20">{<block_content pos:start="193:24" pos:end="195:31">

                       <expr_stmt pos:start="193:24" pos:end="193:38"><expr pos:start="193:24" pos:end="193:37"><call pos:start="193:24" pos:end="193:37"><name pos:start="193:24" pos:end="193:29">perror</name><argument_list pos:start="193:30" pos:end="193:37">(<argument pos:start="193:31" pos:end="193:36"><expr pos:start="193:31" pos:end="193:36"><literal type="string" pos:start="193:31" pos:end="193:36">"recv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                       <expr_stmt pos:start="195:24" pos:end="195:31"><expr pos:start="195:24" pos:end="195:30"><call pos:start="195:24" pos:end="195:30"><name pos:start="195:24" pos:end="195:27">exit</name><argument_list pos:start="195:28" pos:end="195:30">(<argument pos:start="195:29" pos:end="195:29"><expr pos:start="195:29" pos:end="195:29"><literal type="number" pos:start="195:29" pos:end="195:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   </block_content>}</block></else></if_stmt>

               </block_content>}</block> while<condition pos:start="199:23" pos:end="199:29">(<expr pos:start="199:24" pos:end="199:28"><name pos:start="199:24" pos:end="199:24">k</name> <operator pos:start="199:26" pos:end="199:26">&lt;</operator> <name pos:start="199:28" pos:end="199:28">j</name></expr>)</condition>;</do>

               <expr_stmt pos:start="201:16" pos:end="201:51"><expr pos:start="201:16" pos:end="201:50"><call pos:start="201:16" pos:end="201:50"><name pos:start="201:16" pos:end="201:29">test_iov_bytes</name><argument_list pos:start="201:30" pos:end="201:50">(<argument pos:start="201:31" pos:end="201:33"><expr pos:start="201:31" pos:end="201:33"><name pos:start="201:31" pos:end="201:33">iov</name></expr></argument>, <argument pos:start="201:36" pos:end="201:39"><expr pos:start="201:36" pos:end="201:39"><name pos:start="201:36" pos:end="201:39">niov</name></expr></argument>, <argument pos:start="201:42" pos:end="201:42"><expr pos:start="201:42" pos:end="201:42"><name pos:start="201:42" pos:end="201:42">i</name></expr></argument>, <argument pos:start="201:45" pos:end="201:49"><expr pos:start="201:45" pos:end="201:49"><name pos:start="201:45" pos:end="201:45">j</name> <operator pos:start="201:47" pos:end="201:47">-</operator> <name pos:start="201:49" pos:end="201:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           </block_content>}</block></for>

        </block_content>}</block></for>



       <expr_stmt pos:start="209:8" pos:end="209:27"><expr pos:start="209:8" pos:end="209:26"><call pos:start="209:8" pos:end="209:26"><name pos:start="209:8" pos:end="209:15">iov_free</name><argument_list pos:start="209:16" pos:end="209:26">(<argument pos:start="209:17" pos:end="209:19"><expr pos:start="209:17" pos:end="209:19"><name pos:start="209:17" pos:end="209:19">iov</name></expr></argument>, <argument pos:start="209:22" pos:end="209:25"><expr pos:start="209:22" pos:end="209:25"><name pos:start="209:22" pos:end="209:25">niov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="211:8" pos:end="211:19"><expr pos:start="211:8" pos:end="211:18"><call pos:start="211:8" pos:end="211:18"><name pos:start="211:8" pos:end="211:13">g_free</name><argument_list pos:start="211:14" pos:end="211:18">(<argument pos:start="211:15" pos:end="211:17"><expr pos:start="211:15" pos:end="211:17"><name pos:start="211:15" pos:end="211:17">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt pos:start="213:8" pos:end="213:20"><expr pos:start="213:8" pos:end="213:19"><call pos:start="213:8" pos:end="213:19"><name pos:start="213:8" pos:end="213:13">g_free</name><argument_list pos:start="213:14" pos:end="213:19">(<argument pos:start="213:15" pos:end="213:18"><expr pos:start="213:15" pos:end="213:18"><name pos:start="213:15" pos:end="213:18">siov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="217:1" pos:end="217:6">#<cpp:directive pos:start="217:2" pos:end="217:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
