<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2454.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">load_vmstate</name><parameter_list pos:start="1:17" pos:end="1:34">(<parameter pos:start="1:18" pos:end="1:33"><decl pos:start="1:18" pos:end="1:33"><type pos:start="1:18" pos:end="1:29"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:33">name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="157:1">{<block_content pos:start="5:5" pos:end="155:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:30">bs1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">QEMUSnapshotInfo</name></type> <name pos:start="7:22" pos:end="7:23">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QEMUFile</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:84">/* Verify if there is a device that doesn't support snapshots and is writable */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:14"><expr pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:6">bs</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:13">NULL</name></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="41:5">while <condition pos:start="19:11" pos:end="19:32">(<expr pos:start="19:12" pos:end="19:31"><operator pos:start="19:12" pos:end="19:12">(</operator><name pos:start="19:13" pos:end="19:14">bs</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:30"><name pos:start="19:18" pos:end="19:26">bdrv_next</name><argument_list pos:start="19:27" pos:end="19:30">(<argument pos:start="19:28" pos:end="19:29"><expr pos:start="19:28" pos:end="19:29"><name pos:start="19:28" pos:end="19:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="19:31" pos:end="19:31">)</operator></expr>)</condition> <block pos:start="19:34" pos:end="41:5">{<block_content pos:start="23:9" pos:end="39:9">



        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:59">(<expr pos:start="23:13" pos:end="23:58"><call pos:start="23:13" pos:end="23:33"><name pos:start="23:13" pos:end="23:29">bdrv_is_removable</name><argument_list pos:start="23:30" pos:end="23:33">(<argument pos:start="23:31" pos:end="23:32"><expr pos:start="23:31" pos:end="23:32"><name pos:start="23:31" pos:end="23:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="23:35" pos:end="23:36">||</operator> <call pos:start="23:38" pos:end="23:58"><name pos:start="23:38" pos:end="23:54">bdrv_is_read_only</name><argument_list pos:start="23:55" pos:end="23:58">(<argument pos:start="23:56" pos:end="23:57"><expr pos:start="23:56" pos:end="23:57"><name pos:start="23:56" pos:end="23:57">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:61" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:21">

            <continue pos:start="25:13" pos:end="25:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="39:9">if <condition pos:start="31:12" pos:end="31:35">(<expr pos:start="31:13" pos:end="31:34"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:34"><name pos:start="31:14" pos:end="31:30">bdrv_can_snapshot</name><argument_list pos:start="31:31" pos:end="31:34">(<argument pos:start="31:32" pos:end="31:33"><expr pos:start="31:32" pos:end="31:33"><name pos:start="31:32" pos:end="31:33">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:37" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:28">

            <expr_stmt pos:start="33:13" pos:end="35:57"><expr pos:start="33:13" pos:end="35:56"><call pos:start="33:13" pos:end="35:56"><name pos:start="33:13" pos:end="33:24">error_report</name><argument_list pos:start="33:25" pos:end="35:56">(<argument pos:start="33:26" pos:end="33:82"><expr pos:start="33:26" pos:end="33:82"><literal type="string" pos:start="33:26" pos:end="33:82">"Device '%s' is writable but does not support snapshots."</literal></expr></argument>,

                               <argument pos:start="35:32" pos:end="35:55"><expr pos:start="35:32" pos:end="35:55"><call pos:start="35:32" pos:end="35:55"><name pos:start="35:32" pos:end="35:51">bdrv_get_device_name</name><argument_list pos:start="35:52" pos:end="35:55">(<argument pos:start="35:53" pos:end="35:54"><expr pos:start="35:53" pos:end="35:54"><name pos:start="35:53" pos:end="35:54">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:28">return <expr pos:start="37:20" pos:end="37:27"><operator pos:start="37:20" pos:end="37:20">-</operator><name pos:start="37:21" pos:end="37:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:6">bs</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:25"><name pos:start="45:10" pos:end="45:23">bdrv_snapshots</name><argument_list pos:start="45:24" pos:end="45:25">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:11">bs</name></expr>)</condition> <block pos:start="47:14" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:23">

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:58">(<argument pos:start="49:22" pos:end="49:57"><expr pos:start="49:22" pos:end="49:57"><literal type="string" pos:start="49:22" pos:end="49:57">"No block device supports snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:23">return <expr pos:start="51:16" pos:end="51:22"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:76">/* Flush all IO requests so they don't interfere with the new state.  */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:21"><expr pos:start="59:5" pos:end="59:20"><call pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:18">qemu_aio_flush</name><argument_list pos:start="59:19" pos:end="59:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:15"><expr pos:start="63:5" pos:end="63:14"><name pos:start="63:5" pos:end="63:7">bs1</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:14">NULL</name></expr>;</expr_stmt>

    <while pos:start="65:5" pos:end="117:5">while <condition pos:start="65:11" pos:end="65:34">(<expr pos:start="65:12" pos:end="65:33"><operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:15">bs1</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:32"><name pos:start="65:19" pos:end="65:27">bdrv_next</name><argument_list pos:start="65:28" pos:end="65:32">(<argument pos:start="65:29" pos:end="65:31"><expr pos:start="65:29" pos:end="65:31"><name pos:start="65:29" pos:end="65:31">bs1</name></expr></argument>)</argument_list></call><operator pos:start="65:33" pos:end="65:33">)</operator></expr>)</condition> <block pos:start="65:36" pos:end="117:5">{<block_content pos:start="67:9" pos:end="115:9">

        <if_stmt pos:start="67:9" pos:end="115:9"><if pos:start="67:9" pos:end="115:9">if <condition pos:start="67:12" pos:end="67:35">(<expr pos:start="67:13" pos:end="67:34"><call pos:start="67:13" pos:end="67:34"><name pos:start="67:13" pos:end="67:29">bdrv_can_snapshot</name><argument_list pos:start="67:30" pos:end="67:34">(<argument pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:33">bs1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:37" pos:end="115:9">{<block_content pos:start="69:13" pos:end="113:13">

            <expr_stmt pos:start="69:13" pos:end="69:48"><expr pos:start="69:13" pos:end="69:47"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:47"><name pos:start="69:19" pos:end="69:36">bdrv_snapshot_goto</name><argument_list pos:start="69:37" pos:end="69:47">(<argument pos:start="69:38" pos:end="69:40"><expr pos:start="69:38" pos:end="69:40"><name pos:start="69:38" pos:end="69:40">bs1</name></expr></argument>, <argument pos:start="69:43" pos:end="69:46"><expr pos:start="69:43" pos:end="69:46"><name pos:start="69:43" pos:end="69:46">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="113:13"><if pos:start="71:13" pos:end="113:13">if <condition pos:start="71:16" pos:end="71:24">(<expr pos:start="71:17" pos:end="71:23"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:21">&lt;</operator> <literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr>)</condition> <block pos:start="71:26" pos:end="113:13">{<block_content pos:start="73:17" pos:end="111:29">

                <switch pos:start="73:17" pos:end="105:17">switch<condition pos:start="73:23" pos:end="73:27">(<expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">ret</name></expr>)</condition> <block pos:start="73:29" pos:end="105:17">{<block_content pos:start="75:17" pos:end="103:26">

                <case pos:start="75:17" pos:end="75:30">case <expr pos:start="75:22" pos:end="75:29"><operator pos:start="75:22" pos:end="75:22">-</operator><name pos:start="75:23" pos:end="75:29">ENOTSUP</name></expr>:</case>

                    <expr_stmt pos:start="77:21" pos:end="81:60"><expr pos:start="77:21" pos:end="81:59"><call pos:start="77:21" pos:end="81:59"><name pos:start="77:21" pos:end="77:32">error_report</name><argument_list pos:start="77:33" pos:end="81:59">(<argument pos:start="77:34" pos:end="77:75"><expr pos:start="77:34" pos:end="77:75"><literal type="string" pos:start="77:34" pos:end="77:75">"%sSnapshots not supported on device '%s'"</literal></expr></argument>,

                                 <argument pos:start="79:34" pos:end="79:61"><expr pos:start="79:34" pos:end="79:61"><ternary pos:start="79:34" pos:end="79:61"><condition pos:start="79:34" pos:end="79:44"><expr pos:start="79:34" pos:end="79:42"><name pos:start="79:34" pos:end="79:35">bs</name> <operator pos:start="79:37" pos:end="79:38">!=</operator> <name pos:start="79:40" pos:end="79:42">bs1</name></expr> ?</condition><then pos:start="79:46" pos:end="79:56"> <expr pos:start="79:46" pos:end="79:56"><literal type="string" pos:start="79:46" pos:end="79:56">"Warning: "</literal></expr> </then><else pos:start="79:58" pos:end="79:61">: <expr pos:start="79:60" pos:end="79:61"><literal type="string" pos:start="79:60" pos:end="79:61">""</literal></expr></else></ternary></expr></argument>,

                                 <argument pos:start="81:34" pos:end="81:58"><expr pos:start="81:34" pos:end="81:58"><call pos:start="81:34" pos:end="81:58"><name pos:start="81:34" pos:end="81:53">bdrv_get_device_name</name><argument_list pos:start="81:54" pos:end="81:58">(<argument pos:start="81:55" pos:end="81:57"><expr pos:start="81:55" pos:end="81:57"><name pos:start="81:55" pos:end="81:57">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="83:21" pos:end="83:26">break;</break>

                <case pos:start="85:17" pos:end="85:29">case <expr pos:start="85:22" pos:end="85:28"><operator pos:start="85:22" pos:end="85:22">-</operator><name pos:start="85:23" pos:end="85:28">ENOENT</name></expr>:</case>

                    <expr_stmt pos:start="87:21" pos:end="91:66"><expr pos:start="87:21" pos:end="91:65"><call pos:start="87:21" pos:end="91:65"><name pos:start="87:21" pos:end="87:32">error_report</name><argument_list pos:start="87:33" pos:end="91:65">(<argument pos:start="87:34" pos:end="87:80"><expr pos:start="87:34" pos:end="87:80"><literal type="string" pos:start="87:34" pos:end="87:80">"%sCould not find snapshot '%s' on device '%s'"</literal></expr></argument>,

                                 <argument pos:start="89:34" pos:end="89:61"><expr pos:start="89:34" pos:end="89:61"><ternary pos:start="89:34" pos:end="89:61"><condition pos:start="89:34" pos:end="89:44"><expr pos:start="89:34" pos:end="89:42"><name pos:start="89:34" pos:end="89:35">bs</name> <operator pos:start="89:37" pos:end="89:38">!=</operator> <name pos:start="89:40" pos:end="89:42">bs1</name></expr> ?</condition><then pos:start="89:46" pos:end="89:56"> <expr pos:start="89:46" pos:end="89:56"><literal type="string" pos:start="89:46" pos:end="89:56">"Warning: "</literal></expr> </then><else pos:start="89:58" pos:end="89:61">: <expr pos:start="89:60" pos:end="89:61"><literal type="string" pos:start="89:60" pos:end="89:61">""</literal></expr></else></ternary></expr></argument>,

                                 <argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">name</name></expr></argument>, <argument pos:start="91:40" pos:end="91:64"><expr pos:start="91:40" pos:end="91:64"><call pos:start="91:40" pos:end="91:64"><name pos:start="91:40" pos:end="91:59">bdrv_get_device_name</name><argument_list pos:start="91:60" pos:end="91:64">(<argument pos:start="91:61" pos:end="91:63"><expr pos:start="91:61" pos:end="91:63"><name pos:start="91:61" pos:end="91:63">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="93:21" pos:end="93:26">break;</break>

                <default pos:start="95:17" pos:end="95:24">default:</default>

                    <expr_stmt pos:start="97:21" pos:end="101:65"><expr pos:start="97:21" pos:end="101:64"><call pos:start="97:21" pos:end="101:64"><name pos:start="97:21" pos:end="97:32">error_report</name><argument_list pos:start="97:33" pos:end="101:64">(<argument pos:start="97:34" pos:end="97:79"><expr pos:start="97:34" pos:end="97:79"><literal type="string" pos:start="97:34" pos:end="97:79">"%sError %d while activating snapshot on '%s'"</literal></expr></argument>,

                                 <argument pos:start="99:34" pos:end="99:61"><expr pos:start="99:34" pos:end="99:61"><ternary pos:start="99:34" pos:end="99:61"><condition pos:start="99:34" pos:end="99:44"><expr pos:start="99:34" pos:end="99:42"><name pos:start="99:34" pos:end="99:35">bs</name> <operator pos:start="99:37" pos:end="99:38">!=</operator> <name pos:start="99:40" pos:end="99:42">bs1</name></expr> ?</condition><then pos:start="99:46" pos:end="99:56"> <expr pos:start="99:46" pos:end="99:56"><literal type="string" pos:start="99:46" pos:end="99:56">"Warning: "</literal></expr> </then><else pos:start="99:58" pos:end="99:61">: <expr pos:start="99:60" pos:end="99:61"><literal type="string" pos:start="99:60" pos:end="99:61">""</literal></expr></else></ternary></expr></argument>,

                                 <argument pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:36">ret</name></expr></argument>, <argument pos:start="101:39" pos:end="101:63"><expr pos:start="101:39" pos:end="101:63"><call pos:start="101:39" pos:end="101:63"><name pos:start="101:39" pos:end="101:58">bdrv_get_device_name</name><argument_list pos:start="101:59" pos:end="101:63">(<argument pos:start="101:60" pos:end="101:62"><expr pos:start="101:60" pos:end="101:62"><name pos:start="101:60" pos:end="101:62">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="103:21" pos:end="103:26">break;</break>

                </block_content>}</block></switch>

                <comment type="block" pos:start="107:17" pos:end="107:52">/* fatal on snapshot block device */</comment>

                <if_stmt pos:start="109:17" pos:end="111:29"><if pos:start="109:17" pos:end="111:29">if <condition pos:start="109:20" pos:end="109:30">(<expr pos:start="109:21" pos:end="109:29"><name pos:start="109:21" pos:end="109:22">bs</name> <operator pos:start="109:24" pos:end="109:25">==</operator> <name pos:start="109:27" pos:end="109:29">bs1</name></expr>)</condition><block type="pseudo" pos:start="111:21" pos:end="111:29"><block_content pos:start="111:21" pos:end="111:29">

                    <return pos:start="111:21" pos:end="111:29">return <expr pos:start="111:28" pos:end="111:28"><literal type="number" pos:start="111:28" pos:end="111:28">0</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="121:5" pos:end="121:48">/* Don't even try to load empty VM states */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:44"><expr pos:start="123:5" pos:end="123:43"><name pos:start="123:5" pos:end="123:7">ret</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <call pos:start="123:11" pos:end="123:43"><name pos:start="123:11" pos:end="123:28">bdrv_snapshot_find</name><argument_list pos:start="123:29" pos:end="123:43">(<argument pos:start="123:30" pos:end="123:31"><expr pos:start="123:30" pos:end="123:31"><name pos:start="123:30" pos:end="123:31">bs</name></expr></argument>, <argument pos:start="123:34" pos:end="123:36"><expr pos:start="123:34" pos:end="123:36"><operator pos:start="123:34" pos:end="123:34">&amp;</operator><name pos:start="123:35" pos:end="123:36">sn</name></expr></argument>, <argument pos:start="123:39" pos:end="123:42"><expr pos:start="123:39" pos:end="123:42"><name pos:start="123:39" pos:end="123:42">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="127:23"><if pos:start="125:5" pos:end="127:23">if <condition pos:start="125:8" pos:end="125:46">(<expr pos:start="125:9" pos:end="125:45"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:12">ret</name> <operator pos:start="125:14" pos:end="125:15">&gt;=</operator> <literal type="number" pos:start="125:17" pos:end="125:17">0</literal><operator pos:start="125:18" pos:end="125:18">)</operator> <operator pos:start="125:20" pos:end="125:21">&amp;&amp;</operator> <operator pos:start="125:23" pos:end="125:23">(</operator><name pos:start="125:24" pos:end="125:39"><name pos:start="125:24" pos:end="125:25">sn</name><operator pos:start="125:26" pos:end="125:26">.</operator><name pos:start="125:27" pos:end="125:39">vm_state_size</name></name> <operator pos:start="125:41" pos:end="125:42">==</operator> <literal type="number" pos:start="125:44" pos:end="125:44">0</literal><operator pos:start="125:45" pos:end="125:45">)</operator></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:23"><block_content pos:start="127:9" pos:end="127:23">

        <return pos:start="127:9" pos:end="127:23">return <expr pos:start="127:16" pos:end="127:22"><operator pos:start="127:16" pos:end="127:16">-</operator><name pos:start="127:17" pos:end="127:22">EINVAL</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:30">/* restore the VM state */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:31"><expr pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:5">f</name> <operator pos:start="133:7" pos:end="133:7">=</operator> <call pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:23">qemu_fopen_bdrv</name><argument_list pos:start="133:24" pos:end="133:30">(<argument pos:start="133:25" pos:end="133:26"><expr pos:start="133:25" pos:end="133:26"><name pos:start="133:25" pos:end="133:26">bs</name></expr></argument>, <argument pos:start="133:29" pos:end="133:29"><expr pos:start="133:29" pos:end="133:29"><literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:11">(<expr pos:start="135:9" pos:end="135:10"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:10">f</name></expr>)</condition> <block pos:start="135:13" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:23">

        <expr_stmt pos:start="137:9" pos:end="137:53"><expr pos:start="137:9" pos:end="137:52"><call pos:start="137:9" pos:end="137:52"><name pos:start="137:9" pos:end="137:20">error_report</name><argument_list pos:start="137:21" pos:end="137:52">(<argument pos:start="137:22" pos:end="137:51"><expr pos:start="137:22" pos:end="137:51"><literal type="string" pos:start="137:22" pos:end="137:51">"Could not open VM state file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:23">return <expr pos:start="139:16" pos:end="139:22"><operator pos:start="139:16" pos:end="139:16">-</operator><name pos:start="139:17" pos:end="139:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:31"><expr pos:start="143:5" pos:end="143:30"><name pos:start="143:5" pos:end="143:7">ret</name> <operator pos:start="143:9" pos:end="143:9">=</operator> <call pos:start="143:11" pos:end="143:30"><name pos:start="143:11" pos:end="143:27">qemu_loadvm_state</name><argument_list pos:start="143:28" pos:end="143:30">(<argument pos:start="143:29" pos:end="143:29"><expr pos:start="143:29" pos:end="143:29"><name pos:start="143:29" pos:end="143:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:19"><expr pos:start="145:5" pos:end="145:18"><call pos:start="145:5" pos:end="145:18"><name pos:start="145:5" pos:end="145:15">qemu_fclose</name><argument_list pos:start="145:16" pos:end="145:18">(<argument pos:start="145:17" pos:end="145:17"><expr pos:start="145:17" pos:end="145:17"><name pos:start="145:17" pos:end="145:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="153:5"><if pos:start="147:5" pos:end="153:5">if <condition pos:start="147:8" pos:end="147:16">(<expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">&lt;</operator> <literal type="number" pos:start="147:15" pos:end="147:15">0</literal></expr>)</condition> <block pos:start="147:18" pos:end="153:5">{<block_content pos:start="149:9" pos:end="151:19">

        <expr_stmt pos:start="149:9" pos:end="149:61"><expr pos:start="149:9" pos:end="149:60"><call pos:start="149:9" pos:end="149:60"><name pos:start="149:9" pos:end="149:20">error_report</name><argument_list pos:start="149:21" pos:end="149:60">(<argument pos:start="149:22" pos:end="149:54"><expr pos:start="149:22" pos:end="149:54"><literal type="string" pos:start="149:22" pos:end="149:54">"Error %d while loading VM state"</literal></expr></argument>, <argument pos:start="149:57" pos:end="149:59"><expr pos:start="149:57" pos:end="149:59"><name pos:start="149:57" pos:end="149:59">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="151:9" pos:end="151:19">return <expr pos:start="151:16" pos:end="151:18"><name pos:start="151:16" pos:end="151:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
