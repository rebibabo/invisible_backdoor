<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13355.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">read_storage_element1_info</name><parameter_list pos:start="1:39" pos:end="1:68">(<parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:49">SCLPDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">sclp</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:67"><decl pos:start="1:58" pos:end="1:67"><type pos:start="1:58" pos:end="1:67"><name pos:start="1:58" pos:end="1:61">SCCB</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:73">

    <decl_stmt pos:start="5:5" pos:end="5:75"><decl pos:start="5:5" pos:end="5:74"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26">ReadStorageElementInfo</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:40">storage_info</name> <init pos:start="5:42" pos:end="5:74">= <expr pos:start="5:44" pos:end="5:74"><operator pos:start="5:44" pos:end="5:44">(</operator><name pos:start="5:45" pos:end="5:66">ReadStorageElementInfo</name> <operator pos:start="5:68" pos:end="5:68">*</operator><operator pos:start="5:69" pos:end="5:69">)</operator> <name pos:start="5:71" pos:end="5:74">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24">sclpMemoryHotplugDev</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:29">mhd</name> <init pos:start="7:31" pos:end="7:61">= <expr pos:start="7:33" pos:end="7:61"><call pos:start="7:33" pos:end="7:61"><name pos:start="7:33" pos:end="7:59">get_sclp_memory_hotplug_dev</name><argument_list pos:start="7:60" pos:end="7:61">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:16"><expr pos:start="11:5" pos:end="11:15"><call pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:15">(<argument pos:start="11:12" pos:end="11:14"><expr pos:start="11:12" pos:end="11:14"><name pos:start="11:12" pos:end="11:14">mhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:66">(<expr pos:start="15:9" pos:end="15:65"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:30"><name pos:start="15:10" pos:end="15:12">mhd</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:30">standby_mem_size</name></name> <operator pos:start="15:32" pos:end="15:33">&gt;&gt;</operator> <name pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:37">mhd</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:53">increment_size</name></name><operator pos:start="15:54" pos:end="15:54">)</operator> <operator pos:start="15:56" pos:end="15:57">&gt;=</operator> <literal type="number" pos:start="15:59" pos:end="15:65">0x10000</literal></expr>)</condition> <block pos:start="15:68" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:77"><expr pos:start="17:9" pos:end="17:76"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:12">sccb</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:15">h</name><operator pos:start="17:16" pos:end="17:16">.</operator><name pos:start="17:17" pos:end="17:29">response_code</name></name> <operator pos:start="17:31" pos:end="17:31">=</operator> <call pos:start="17:33" pos:end="17:76"><name pos:start="17:33" pos:end="17:43">cpu_to_be16</name><argument_list pos:start="17:44" pos:end="17:76">(<argument pos:start="17:45" pos:end="17:75"><expr pos:start="17:45" pos:end="17:75"><name pos:start="17:45" pos:end="17:75">SCLP_RC_SCCB_BOUNDARY_VIOLATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:53">/* Return information regarding standby memory */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:70"><expr pos:start="27:5" pos:end="27:69"><name pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:16">storage_info</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:24">max_id</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <call pos:start="27:28" pos:end="27:69"><name pos:start="27:28" pos:end="27:38">cpu_to_be16</name><argument_list pos:start="27:39" pos:end="27:69">(<argument pos:start="27:40" pos:end="27:68"><expr pos:start="27:40" pos:end="27:68"><ternary pos:start="27:40" pos:end="27:68"><condition pos:start="27:40" pos:end="27:62"><expr pos:start="27:40" pos:end="27:60"><name pos:start="27:40" pos:end="27:60"><name pos:start="27:40" pos:end="27:42">mhd</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:60">standby_mem_size</name></name></expr> ?</condition><then pos:start="27:64" pos:end="27:64"> <expr pos:start="27:64" pos:end="27:64"><literal type="number" pos:start="27:64" pos:end="27:64">1</literal></expr> </then><else pos:start="27:66" pos:end="27:68">: <expr pos:start="27:68" pos:end="27:68"><literal type="number" pos:start="27:68" pos:end="27:68">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:62"><expr pos:start="29:5" pos:end="31:61"><name pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:16">storage_info</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:26">assigned</name></name> <operator pos:start="29:28" pos:end="29:28">=</operator> <call pos:start="29:30" pos:end="31:61"><name pos:start="29:30" pos:end="29:40">cpu_to_be16</name><argument_list pos:start="29:41" pos:end="31:61">(<argument pos:start="29:42" pos:end="31:60"><expr pos:start="29:42" pos:end="31:60"><name pos:start="29:42" pos:end="29:62"><name pos:start="29:42" pos:end="29:44">mhd</name><operator pos:start="29:45" pos:end="29:46">-&gt;</operator><name pos:start="29:47" pos:end="29:62">standby_mem_size</name></name> <operator pos:start="29:64" pos:end="29:65">&gt;&gt;</operator>

                                         <name pos:start="31:42" pos:end="31:60"><name pos:start="31:42" pos:end="31:44">mhd</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:60">increment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="35:61"><expr pos:start="33:5" pos:end="35:60"><name pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:16">storage_info</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:25">standby</name></name> <operator pos:start="33:27" pos:end="33:27">=</operator> <call pos:start="33:29" pos:end="35:60"><name pos:start="33:29" pos:end="33:39">cpu_to_be16</name><argument_list pos:start="33:40" pos:end="35:60">(<argument pos:start="33:41" pos:end="35:59"><expr pos:start="33:41" pos:end="35:59"><name pos:start="33:41" pos:end="33:61"><name pos:start="33:41" pos:end="33:43">mhd</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:61">standby_mem_size</name></name> <operator pos:start="33:63" pos:end="33:64">&gt;&gt;</operator>

                                        <name pos:start="35:41" pos:end="35:59"><name pos:start="35:41" pos:end="35:43">mhd</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:59">increment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:8">sccb</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:11">h</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:25">response_code</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:72"><name pos:start="37:29" pos:end="37:39">cpu_to_be16</name><argument_list pos:start="37:40" pos:end="37:72">(<argument pos:start="37:41" pos:end="37:71"><expr pos:start="37:41" pos:end="37:71"><name pos:start="37:41" pos:end="37:71">SCLP_RC_STANDBY_READ_COMPLETION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
