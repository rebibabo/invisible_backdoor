<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6608.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">load_word</name><parameter_list pos:start="1:22" pos:end="3:34">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:39"><name pos:start="1:23" pos:end="1:35">DBDMA_channel</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">ch</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:48"><decl pos:start="1:42" pos:end="1:48"><type pos:start="1:42" pos:end="1:48"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:48">key</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:29">uint16_t</name></type> <name pos:start="3:31" pos:end="3:33">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:31">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">dbdma_cmd</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:22">current</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:37"><name pos:start="7:27" pos:end="7:28">ch</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:37">current</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><call pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:17">DBDMA_DPRINTF</name><argument_list pos:start="13:18" pos:end="13:32">(<argument pos:start="13:19" pos:end="13:31"><expr pos:start="13:19" pos:end="13:31"><literal type="string" pos:start="13:19" pos:end="13:31">"load_word\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:36">/* only implements KEY_SYSTEM */</comment>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:26">(<expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:11">key</name> <operator pos:start="21:13" pos:end="21:14">!=</operator> <name pos:start="21:16" pos:end="21:25">KEY_SYSTEM</name></expr>)</condition> <block pos:start="21:28" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:15">

        <expr_stmt pos:start="23:9" pos:end="23:64"><expr pos:start="23:9" pos:end="23:63"><call pos:start="23:9" pos:end="23:63"><name pos:start="23:9" pos:end="23:14">printf</name><argument_list pos:start="23:15" pos:end="23:63">(<argument pos:start="23:16" pos:end="23:57"><expr pos:start="23:16" pos:end="23:57"><literal type="string" pos:start="23:16" pos:end="23:57">"DBDMA: LOAD_WORD, unimplemented key %x\n"</literal></expr></argument>, <argument pos:start="23:60" pos:end="23:62"><expr pos:start="23:60" pos:end="23:62"><name pos:start="23:60" pos:end="23:62">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:25"><expr pos:start="25:9" pos:end="25:24"><call pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:20">kill_channel</name><argument_list pos:start="25:21" pos:end="25:24">(<argument pos:start="25:22" pos:end="25:23"><expr pos:start="25:22" pos:end="25:23"><name pos:start="25:22" pos:end="25:23">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:56"><expr pos:start="33:5" pos:end="33:55"><call pos:start="33:5" pos:end="33:55"><name pos:start="33:5" pos:end="33:28">cpu_physical_memory_read</name><argument_list pos:start="33:29" pos:end="33:55">(<argument pos:start="33:30" pos:end="33:33"><expr pos:start="33:30" pos:end="33:33"><name pos:start="33:30" pos:end="33:33">addr</name></expr></argument>, <argument pos:start="33:36" pos:end="33:49"><expr pos:start="33:36" pos:end="33:49"><operator pos:start="33:36" pos:end="33:36">(</operator><name pos:start="33:37" pos:end="33:43">uint8_t</name><operator pos:start="33:44" pos:end="33:44">*</operator><operator pos:start="33:45" pos:end="33:45">)</operator><operator pos:start="33:46" pos:end="33:46">&amp;</operator><name pos:start="33:47" pos:end="33:49">val</name></expr></argument>, <argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="43:60"><if pos:start="37:5" pos:end="39:60">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:11">len</name> <operator pos:start="37:13" pos:end="37:14">==</operator> <literal type="number" pos:start="37:16" pos:end="37:16">2</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:60"><block_content pos:start="39:9" pos:end="39:60">

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:11">val</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">(</operator><name pos:start="39:16" pos:end="39:18">val</name> <operator pos:start="39:20" pos:end="39:21">&lt;&lt;</operator> <literal type="number" pos:start="39:23" pos:end="39:24">16</literal><operator pos:start="39:25" pos:end="39:25">)</operator> <operator pos:start="39:27" pos:end="39:27">|</operator> <operator pos:start="39:29" pos:end="39:29">(</operator><name pos:start="39:30" pos:end="39:45"><name pos:start="39:30" pos:end="39:36">current</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:45">cmd_dep</name></name> <operator pos:start="39:47" pos:end="39:47">&amp;</operator> <literal type="number" pos:start="39:49" pos:end="39:58">0x0000ffff</literal><operator pos:start="39:59" pos:end="39:59">)</operator></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="41:5" pos:end="43:60">else if <condition pos:start="41:13" pos:end="41:22">(<expr pos:start="41:14" pos:end="41:21"><name pos:start="41:14" pos:end="41:16">len</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:60"><block_content pos:start="43:9" pos:end="43:60">

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:11">val</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <operator pos:start="43:15" pos:end="43:15">(</operator><name pos:start="43:16" pos:end="43:18">val</name> <operator pos:start="43:20" pos:end="43:21">&lt;&lt;</operator> <literal type="number" pos:start="43:23" pos:end="43:24">24</literal><operator pos:start="43:25" pos:end="43:25">)</operator> <operator pos:start="43:27" pos:end="43:27">|</operator> <operator pos:start="43:29" pos:end="43:29">(</operator><name pos:start="43:30" pos:end="43:45"><name pos:start="43:30" pos:end="43:36">current</name><operator pos:start="43:37" pos:end="43:38">-&gt;</operator><name pos:start="43:39" pos:end="43:45">cmd_dep</name></name> <operator pos:start="43:47" pos:end="43:47">&amp;</operator> <literal type="number" pos:start="43:49" pos:end="43:58">0x00ffffff</literal><operator pos:start="43:59" pos:end="43:59">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:11">current</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:20">cmd_dep</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:26">val</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="53:18"><if pos:start="51:5" pos:end="53:18">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:24">conditional_wait</name><argument_list pos:start="51:25" pos:end="51:28">(<argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><name pos:start="51:26" pos:end="51:27">ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:18"><block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">wait</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:76"><expr pos:start="57:5" pos:end="57:75"><name pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:11">current</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:24">xfer_status</name></name> <operator pos:start="57:26" pos:end="57:26">=</operator> <call pos:start="57:28" pos:end="57:75"><name pos:start="57:28" pos:end="57:38">cpu_to_le16</name><argument_list pos:start="57:39" pos:end="57:75">(<argument pos:start="57:40" pos:end="57:74"><expr pos:start="57:40" pos:end="57:74"><call pos:start="57:40" pos:end="57:74"><name pos:start="57:40" pos:end="57:50">be32_to_cpu</name><argument_list pos:start="57:51" pos:end="57:74">(<argument pos:start="57:52" pos:end="57:73"><expr pos:start="57:52" pos:end="57:73"><name pos:start="57:52" pos:end="57:73"><name pos:start="57:52" pos:end="57:53">ch</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:59">regs</name><index pos:start="57:60" pos:end="57:73">[<expr pos:start="57:61" pos:end="57:72"><name pos:start="57:61" pos:end="57:72">DBDMA_STATUS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:26"><expr pos:start="59:5" pos:end="59:25"><call pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:21">dbdma_cmdptr_save</name><argument_list pos:start="59:22" pos:end="59:25">(<argument pos:start="59:23" pos:end="59:24"><expr pos:start="59:23" pos:end="59:24"><name pos:start="59:23" pos:end="59:24">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:6">ch</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:12">regs</name><index pos:start="61:13" pos:end="61:26">[<expr pos:start="61:14" pos:end="61:25"><name pos:start="61:14" pos:end="61:25">DBDMA_STATUS</name></expr>]</index></name> <operator pos:start="61:28" pos:end="61:29">&amp;=</operator> <call pos:start="61:31" pos:end="61:49"><name pos:start="61:31" pos:end="61:41">cpu_to_be32</name><argument_list pos:start="61:42" pos:end="61:49">(<argument pos:start="61:43" pos:end="61:48"><expr pos:start="61:43" pos:end="61:48"><operator pos:start="61:43" pos:end="61:43">~</operator><name pos:start="61:44" pos:end="61:48">FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><call pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:25">conditional_interrupt</name><argument_list pos:start="65:26" pos:end="65:29">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:13"><expr pos:start="67:5" pos:end="67:12"><call pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:8">next</name><argument_list pos:start="67:9" pos:end="67:12">(<argument pos:start="67:10" pos:end="67:11"><expr pos:start="67:10" pos:end="67:11"><name pos:start="67:10" pos:end="67:11">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="71:1" pos:end="71:5"><name pos:start="71:1" pos:end="71:4">wait</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:31"><expr pos:start="73:5" pos:end="73:30"><call pos:start="73:5" pos:end="73:30"><name pos:start="73:5" pos:end="73:20">qemu_bh_schedule</name><argument_list pos:start="73:21" pos:end="73:30">(<argument pos:start="73:22" pos:end="73:29"><expr pos:start="73:22" pos:end="73:29"><name pos:start="73:22" pos:end="73:29">dbdma_bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
