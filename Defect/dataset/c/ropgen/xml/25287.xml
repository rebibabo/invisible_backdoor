<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25287.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">local_symlink</name><parameter_list pos:start="1:25" pos:end="3:77">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:34">FsContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">fs_ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:63"><decl pos:start="1:45" pos:end="1:63"><type pos:start="1:45" pos:end="1:63"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">oldpath</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><name pos:start="3:26" pos:end="3:33">V9fsPath</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:43">dir_path</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:61"><decl pos:start="3:46" pos:end="3:61"><type pos:start="3:46" pos:end="3:61"><specifier pos:start="3:46" pos:end="3:50">const</specifier> <name pos:start="3:52" pos:end="3:55">char</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:61">name</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:76"><decl pos:start="3:64" pos:end="3:76"><type pos:start="3:64" pos:end="3:76"><name pos:start="3:64" pos:end="3:69">FsCred</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:76">credp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="143:1">{<block_content pos:start="7:5" pos:end="141:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">serrno</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:17">newpath</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">V9fsString</name></type> <name pos:start="13:16" pos:end="13:23">fullname</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:25"><name pos:start="15:10" pos:end="15:15">buffer</name><index pos:start="15:16" pos:end="15:25">[<expr pos:start="15:17" pos:end="15:24"><name pos:start="15:17" pos:end="15:24">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><call pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:20">v9fs_string_init</name><argument_list pos:start="19:21" pos:end="19:31">(<argument pos:start="19:22" pos:end="19:30"><expr pos:start="19:22" pos:end="19:30"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:30">fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><call pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:23">v9fs_string_sprintf</name><argument_list pos:start="21:24" pos:end="21:65">(<argument pos:start="21:25" pos:end="21:33"><expr pos:start="21:25" pos:end="21:33"><operator pos:start="21:25" pos:end="21:25">&amp;</operator><name pos:start="21:26" pos:end="21:33">fullname</name></expr></argument>, <argument pos:start="21:36" pos:end="21:42"><expr pos:start="21:36" pos:end="21:42"><literal type="string" pos:start="21:36" pos:end="21:42">"%s/%s"</literal></expr></argument>, <argument pos:start="21:45" pos:end="21:58"><expr pos:start="21:45" pos:end="21:58"><name pos:start="21:45" pos:end="21:58"><name pos:start="21:45" pos:end="21:52">dir_path</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:58">data</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><name pos:start="21:61" pos:end="21:64">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:11">newpath</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:22">fullname</name><operator pos:start="23:23" pos:end="23:23">.</operator><name pos:start="23:24" pos:end="23:27">data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:38">/* Determine the security model */</comment>

    <if_stmt pos:start="29:5" pos:end="125:5"><if pos:start="29:5" pos:end="87:5">if <condition pos:start="29:8" pos:end="29:35">(<expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:14">fs_ctx</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:21">fs_sm</name></name> <operator pos:start="29:23" pos:end="29:24">==</operator> <name pos:start="29:26" pos:end="29:34">SM_MAPPED</name></expr>)</condition> <block pos:start="29:37" pos:end="87:5">{<block_content pos:start="31:9" pos:end="85:9">

        <decl_stmt pos:start="31:9" pos:end="31:15"><decl pos:start="31:9" pos:end="31:14"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:14">fd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:41"><decl pos:start="33:9" pos:end="33:28"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">ssize_t</name></type> <name pos:start="33:17" pos:end="33:28">oldpath_size</name></decl>, <decl pos:start="33:31" pos:end="33:40"><type ref="prev" pos:start="33:9" pos:end="33:15"/><name pos:start="33:31" pos:end="33:40">write_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="35:9" pos:end="37:36"><expr pos:start="35:9" pos:end="37:35"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="37:35"><name pos:start="35:14" pos:end="35:17">open</name><argument_list pos:start="35:18" pos:end="37:35">(<argument pos:start="35:19" pos:end="35:48"><expr pos:start="35:19" pos:end="35:48"><call pos:start="35:19" pos:end="35:48"><name pos:start="35:19" pos:end="35:23">rpath</name><argument_list pos:start="35:24" pos:end="35:48">(<argument pos:start="35:25" pos:end="35:30"><expr pos:start="35:25" pos:end="35:30"><name pos:start="35:25" pos:end="35:30">fs_ctx</name></expr></argument>, <argument pos:start="35:33" pos:end="35:39"><expr pos:start="35:33" pos:end="35:39"><name pos:start="35:33" pos:end="35:39">newpath</name></expr></argument>, <argument pos:start="35:42" pos:end="35:47"><expr pos:start="35:42" pos:end="35:47"><name pos:start="35:42" pos:end="35:47">buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:51" pos:end="35:71"><expr pos:start="35:51" pos:end="35:71"><name pos:start="35:51" pos:end="35:57">O_CREAT</name><operator pos:start="35:58" pos:end="35:58">|</operator><name pos:start="35:59" pos:end="35:64">O_EXCL</name><operator pos:start="35:65" pos:end="35:65">|</operator><name pos:start="35:66" pos:end="35:71">O_RDWR</name></expr></argument>,

                <argument pos:start="37:17" pos:end="37:34"><expr pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:34">SM_LOCAL_MODE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:21">(<expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:14">fd</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><literal type="number" pos:start="39:20" pos:end="39:20">1</literal></expr>)</condition> <block pos:start="39:23" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:21">

            <expr_stmt pos:start="41:13" pos:end="41:21"><expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">err</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:20">fd</name></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:21">goto <name pos:start="43:18" pos:end="43:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:53">/* Write the oldpath (target) to the file. */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:20">oldpath_size</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <call pos:start="49:24" pos:end="49:38"><name pos:start="49:24" pos:end="49:29">strlen</name><argument_list pos:start="49:30" pos:end="49:38">(<argument pos:start="49:31" pos:end="49:37"><expr pos:start="49:31" pos:end="49:37"><name pos:start="49:31" pos:end="49:37">oldpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="51:9" pos:end="55:53">do <block pos:start="51:12" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:66">

            <expr_stmt pos:start="53:13" pos:end="53:66"><expr pos:start="53:13" pos:end="53:65"><name pos:start="53:13" pos:end="53:22">write_size</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <call pos:start="53:26" pos:end="53:65"><name pos:start="53:26" pos:end="53:30">write</name><argument_list pos:start="53:31" pos:end="53:65">(<argument pos:start="53:32" pos:end="53:33"><expr pos:start="53:32" pos:end="53:33"><name pos:start="53:32" pos:end="53:33">fd</name></expr></argument>, <argument pos:start="53:36" pos:end="53:50"><expr pos:start="53:36" pos:end="53:50"><operator pos:start="53:36" pos:end="53:36">(</operator><name pos:start="53:37" pos:end="53:40">void</name> <operator pos:start="53:42" pos:end="53:42">*</operator><operator pos:start="53:43" pos:end="53:43">)</operator><name pos:start="53:44" pos:end="53:50">oldpath</name></expr></argument>, <argument pos:start="53:53" pos:end="53:64"><expr pos:start="53:53" pos:end="53:64"><name pos:start="53:53" pos:end="53:64">oldpath_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="55:17" pos:end="55:52">(<expr pos:start="55:18" pos:end="55:51"><name pos:start="55:18" pos:end="55:27">write_size</name> <operator pos:start="55:29" pos:end="55:30">==</operator> <operator pos:start="55:32" pos:end="55:32">-</operator><literal type="number" pos:start="55:33" pos:end="55:33">1</literal> <operator pos:start="55:35" pos:end="55:36">&amp;&amp;</operator> <name pos:start="55:38" pos:end="55:42">errno</name> <operator pos:start="55:44" pos:end="55:45">==</operator> <name pos:start="55:47" pos:end="55:51">EINTR</name></expr>)</condition>;</do>



        <if_stmt pos:start="59:9" pos:end="69:9"><if pos:start="59:9" pos:end="69:9">if <condition pos:start="59:12" pos:end="59:39">(<expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:22">write_size</name> <operator pos:start="59:24" pos:end="59:25">!=</operator> <name pos:start="59:27" pos:end="59:38">oldpath_size</name></expr>)</condition> <block pos:start="59:41" pos:end="69:9">{<block_content pos:start="61:13" pos:end="67:25">

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:18">serrno</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:26">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:21"><call pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:17">close</name><argument_list pos:start="63:18" pos:end="63:21">(<argument pos:start="63:19" pos:end="63:20"><expr pos:start="63:19" pos:end="63:20"><name pos:start="63:19" pos:end="63:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:21"><expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:15">err</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <operator pos:start="65:19" pos:end="65:19">-</operator><literal type="number" pos:start="65:20" pos:end="65:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="67:13" pos:end="67:25">goto <name pos:start="67:18" pos:end="67:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:18"><expr pos:start="71:9" pos:end="71:17"><call pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:13">close</name><argument_list pos:start="71:14" pos:end="71:17">(<argument pos:start="71:15" pos:end="71:16"><expr pos:start="71:15" pos:end="71:16"><name pos:start="71:15" pos:end="71:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:55">/* Set cleint credentials in symlink's xattr */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:13">credp</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:22">fc_mode</name></name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:39"><name pos:start="75:26" pos:end="75:30">credp</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:39">fc_mode</name></name><operator pos:start="75:40" pos:end="75:40">|</operator><name pos:start="75:41" pos:end="75:47">S_IFLNK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:69"><expr pos:start="77:9" pos:end="77:68"><name pos:start="77:9" pos:end="77:11">err</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:68"><name pos:start="77:15" pos:end="77:29">local_set_xattr</name><argument_list pos:start="77:30" pos:end="77:68">(<argument pos:start="77:31" pos:end="77:60"><expr pos:start="77:31" pos:end="77:60"><call pos:start="77:31" pos:end="77:60"><name pos:start="77:31" pos:end="77:35">rpath</name><argument_list pos:start="77:36" pos:end="77:60">(<argument pos:start="77:37" pos:end="77:42"><expr pos:start="77:37" pos:end="77:42"><name pos:start="77:37" pos:end="77:42">fs_ctx</name></expr></argument>, <argument pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:51">newpath</name></expr></argument>, <argument pos:start="77:54" pos:end="77:59"><expr pos:start="77:54" pos:end="77:59"><name pos:start="77:54" pos:end="77:59">buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:63" pos:end="77:67"><expr pos:start="77:63" pos:end="77:67"><name pos:start="77:63" pos:end="77:67">credp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:22">(<expr pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:15">err</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>)</condition> <block pos:start="79:24" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:25">

            <expr_stmt pos:start="81:13" pos:end="81:27"><expr pos:start="81:13" pos:end="81:26"><name pos:start="81:13" pos:end="81:18">serrno</name> <operator pos:start="81:20" pos:end="81:20">=</operator> <name pos:start="81:22" pos:end="81:26">errno</name></expr>;</expr_stmt>

            <goto pos:start="83:13" pos:end="83:25">goto <name pos:start="83:18" pos:end="83:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="87:7" pos:end="125:5">else if <condition pos:start="87:15" pos:end="89:42">(<expr pos:start="87:16" pos:end="89:41"><operator pos:start="87:16" pos:end="87:16">(</operator><name pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:22">fs_ctx</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:29">fs_sm</name></name> <operator pos:start="87:31" pos:end="87:32">==</operator> <name pos:start="87:34" pos:end="87:47">SM_PASSTHROUGH</name><operator pos:start="87:48" pos:end="87:48">)</operator> <operator pos:start="87:50" pos:end="87:51">||</operator>

               <operator pos:start="89:16" pos:end="89:16">(</operator><name pos:start="89:17" pos:end="89:29"><name pos:start="89:17" pos:end="89:22">fs_ctx</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:29">fs_sm</name></name> <operator pos:start="89:31" pos:end="89:32">==</operator> <name pos:start="89:34" pos:end="89:40">SM_NONE</name><operator pos:start="89:41" pos:end="89:41">)</operator></expr>)</condition> <block pos:start="89:44" pos:end="125:5">{<block_content pos:start="91:9" pos:end="123:9">

        <expr_stmt pos:start="91:9" pos:end="91:63"><expr pos:start="91:9" pos:end="91:62"><name pos:start="91:9" pos:end="91:11">err</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:62"><name pos:start="91:15" pos:end="91:21">symlink</name><argument_list pos:start="91:22" pos:end="91:62">(<argument pos:start="91:23" pos:end="91:29"><expr pos:start="91:23" pos:end="91:29"><name pos:start="91:23" pos:end="91:29">oldpath</name></expr></argument>, <argument pos:start="91:32" pos:end="91:61"><expr pos:start="91:32" pos:end="91:61"><call pos:start="91:32" pos:end="91:61"><name pos:start="91:32" pos:end="91:36">rpath</name><argument_list pos:start="91:37" pos:end="91:61">(<argument pos:start="91:38" pos:end="91:43"><expr pos:start="91:38" pos:end="91:43"><name pos:start="91:38" pos:end="91:43">fs_ctx</name></expr></argument>, <argument pos:start="91:46" pos:end="91:52"><expr pos:start="91:46" pos:end="91:52"><name pos:start="91:46" pos:end="91:52">newpath</name></expr></argument>, <argument pos:start="91:55" pos:end="91:60"><expr pos:start="91:55" pos:end="91:60"><name pos:start="91:55" pos:end="91:60">buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:16">(<expr pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">err</name></expr>)</condition> <block pos:start="93:18" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:21">

            <goto pos:start="95:13" pos:end="95:21">goto <name pos:start="95:18" pos:end="95:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="101:36"><expr pos:start="99:9" pos:end="101:35"><name pos:start="99:9" pos:end="99:11">err</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="101:35"><name pos:start="99:15" pos:end="99:20">lchown</name><argument_list pos:start="99:21" pos:end="101:35">(<argument pos:start="99:22" pos:end="99:51"><expr pos:start="99:22" pos:end="99:51"><call pos:start="99:22" pos:end="99:51"><name pos:start="99:22" pos:end="99:26">rpath</name><argument_list pos:start="99:27" pos:end="99:51">(<argument pos:start="99:28" pos:end="99:33"><expr pos:start="99:28" pos:end="99:33"><name pos:start="99:28" pos:end="99:33">fs_ctx</name></expr></argument>, <argument pos:start="99:36" pos:end="99:42"><expr pos:start="99:36" pos:end="99:42"><name pos:start="99:36" pos:end="99:42">newpath</name></expr></argument>, <argument pos:start="99:45" pos:end="99:50"><expr pos:start="99:45" pos:end="99:50"><name pos:start="99:45" pos:end="99:50">buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:54" pos:end="99:66"><expr pos:start="99:54" pos:end="99:66"><name pos:start="99:54" pos:end="99:66"><name pos:start="99:54" pos:end="99:58">credp</name><operator pos:start="99:59" pos:end="99:60">-&gt;</operator><name pos:start="99:61" pos:end="99:66">fc_uid</name></name></expr></argument>,

                     <argument pos:start="101:22" pos:end="101:34"><expr pos:start="101:22" pos:end="101:34"><name pos:start="101:22" pos:end="101:34"><name pos:start="101:22" pos:end="101:26">credp</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:34">fc_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="123:9"><if pos:start="103:9" pos:end="123:9">if <condition pos:start="103:12" pos:end="103:22">(<expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:15">err</name> <operator pos:start="103:17" pos:end="103:18">==</operator> <operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>)</condition> <block pos:start="103:24" pos:end="123:9">{<block_content pos:start="113:13" pos:end="121:24">

            <comment type="block" pos:start="105:13" pos:end="111:15">/*

             * If we fail to change ownership and if we are

             * using security model none. Ignore the error

             */</comment>

            <if_stmt pos:start="113:13" pos:end="121:24"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:41">(<expr pos:start="113:17" pos:end="113:40"><name pos:start="113:17" pos:end="113:29"><name pos:start="113:17" pos:end="113:22">fs_ctx</name><operator pos:start="113:23" pos:end="113:24">-&gt;</operator><name pos:start="113:25" pos:end="113:29">fs_sm</name></name> <operator pos:start="113:31" pos:end="113:32">!=</operator> <name pos:start="113:34" pos:end="113:40">SM_NONE</name></expr>)</condition> <block pos:start="113:43" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:29">

                <expr_stmt pos:start="115:17" pos:end="115:31"><expr pos:start="115:17" pos:end="115:30"><name pos:start="115:17" pos:end="115:22">serrno</name> <operator pos:start="115:24" pos:end="115:24">=</operator> <name pos:start="115:26" pos:end="115:30">errno</name></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:29">goto <name pos:start="117:22" pos:end="117:28">err_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="119:15" pos:end="121:24">else<block type="pseudo" pos:start="121:17" pos:end="121:24"><block_content pos:start="121:17" pos:end="121:24">

                <expr_stmt pos:start="121:17" pos:end="121:24"><expr pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:19">err</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <goto pos:start="127:5" pos:end="127:13">goto <name pos:start="127:10" pos:end="127:12">out</name>;</goto>



<label pos:start="131:1" pos:end="131:8"><name pos:start="131:1" pos:end="131:7">err_end</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:43"><expr pos:start="133:5" pos:end="133:42"><call pos:start="133:5" pos:end="133:42"><name pos:start="133:5" pos:end="133:10">remove</name><argument_list pos:start="133:11" pos:end="133:42">(<argument pos:start="133:12" pos:end="133:41"><expr pos:start="133:12" pos:end="133:41"><call pos:start="133:12" pos:end="133:41"><name pos:start="133:12" pos:end="133:16">rpath</name><argument_list pos:start="133:17" pos:end="133:41">(<argument pos:start="133:18" pos:end="133:23"><expr pos:start="133:18" pos:end="133:23"><name pos:start="133:18" pos:end="133:23">fs_ctx</name></expr></argument>, <argument pos:start="133:26" pos:end="133:32"><expr pos:start="133:26" pos:end="133:32"><name pos:start="133:26" pos:end="133:32">newpath</name></expr></argument>, <argument pos:start="133:35" pos:end="133:40"><expr pos:start="133:35" pos:end="133:40"><name pos:start="133:35" pos:end="133:40">buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:19"><expr pos:start="135:5" pos:end="135:18"><name pos:start="135:5" pos:end="135:9">errno</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <name pos:start="135:13" pos:end="135:18">serrno</name></expr>;</expr_stmt>

<label pos:start="137:1" pos:end="137:4"><name pos:start="137:1" pos:end="137:3">out</name>:</label>

    <expr_stmt pos:start="139:5" pos:end="139:32"><expr pos:start="139:5" pos:end="139:31"><call pos:start="139:5" pos:end="139:31"><name pos:start="139:5" pos:end="139:20">v9fs_string_free</name><argument_list pos:start="139:21" pos:end="139:31">(<argument pos:start="139:22" pos:end="139:30"><expr pos:start="139:22" pos:end="139:30"><operator pos:start="139:22" pos:end="139:22">&amp;</operator><name pos:start="139:23" pos:end="139:30">fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="141:5" pos:end="141:15">return <expr pos:start="141:12" pos:end="141:14"><name pos:start="141:12" pos:end="141:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
