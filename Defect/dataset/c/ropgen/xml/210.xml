<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/210.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">msix_init_exclusive_bar</name><parameter_list pos:start="1:28" pos:end="3:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:37">PCIDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:67"><decl pos:start="1:45" pos:end="1:67"><type pos:start="1:45" pos:end="1:67"><name pos:start="1:45" pos:end="1:52">unsigned</name> <name pos:start="1:54" pos:end="1:58">short</name></type> <name pos:start="1:60" pos:end="1:67">nentries</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:35">uint8_t</name></type> <name pos:start="3:37" pos:end="3:42">bar_nr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:14">name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">bar_size</name> <init pos:start="11:23" pos:end="11:28">= <expr pos:start="11:25" pos:end="11:28"><literal type="number" pos:start="11:25" pos:end="11:28">4096</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:27">bar_pba_offset</name> <init pos:start="13:29" pos:end="13:42">= <expr pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:38">bar_size</name> <operator pos:start="13:40" pos:end="13:40">/</operator> <literal type="number" pos:start="13:42" pos:end="13:42">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:51"><decl pos:start="15:5" pos:end="15:50"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:25">bar_pba_size</name> <init pos:start="15:27" pos:end="15:50">= <expr pos:start="15:29" pos:end="15:50"><operator pos:start="15:29" pos:end="15:29">(</operator><name pos:start="15:30" pos:end="15:37">nentries</name> <operator pos:start="15:39" pos:end="15:39">/</operator> <literal type="number" pos:start="15:41" pos:end="15:43">8</literal> <operator pos:start="15:43" pos:end="15:43">+</operator> <literal type="number" pos:start="15:45" pos:end="15:45">1</literal><operator pos:start="15:46" pos:end="15:46">)</operator> <operator pos:start="15:48" pos:end="15:48">*</operator> <literal type="number" pos:start="15:50" pos:end="15:50">8</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="31:7">/*

     * Migration compatibility dictates that this remains a 4k

     * BAR with the vector table in the lower half and PBA in

     * the upper half for nentries which is lower or equal to 128.

     * No need to care about using more than 65 entries for legacy

     * machine types who has at most 64 queues.

     */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:56">(<expr pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:16">nentries</name> <operator pos:start="33:18" pos:end="33:18">*</operator> <name pos:start="33:20" pos:end="33:38">PCI_MSIX_ENTRY_SIZE</name> <operator pos:start="33:40" pos:end="33:40">&gt;</operator> <name pos:start="33:42" pos:end="33:55">bar_pba_offset</name></expr>)</condition> <block pos:start="33:58" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:56">

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:22">bar_pba_offset</name> <operator pos:start="35:24" pos:end="35:24">=</operator> <name pos:start="35:26" pos:end="35:33">nentries</name> <operator pos:start="35:35" pos:end="35:35">*</operator> <name pos:start="35:37" pos:end="35:55">PCI_MSIX_ENTRY_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:45">(<expr pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:22">bar_pba_offset</name> <operator pos:start="41:24" pos:end="41:24">+</operator> <name pos:start="41:26" pos:end="41:37">bar_pba_size</name> <operator pos:start="41:39" pos:end="41:39">&gt;</operator> <literal type="number" pos:start="41:41" pos:end="41:44">4096</literal></expr>)</condition> <block pos:start="41:47" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:49">

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:16">bar_size</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:33">bar_pba_offset</name> <operator pos:start="43:35" pos:end="43:35">+</operator> <name pos:start="43:37" pos:end="43:48">bar_pba_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:16">bar_size</name> <operator pos:start="49:18" pos:end="49:18">&amp;</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><name pos:start="49:21" pos:end="49:28">bar_size</name> <operator pos:start="49:30" pos:end="49:30">-</operator> <literal type="number" pos:start="49:32" pos:end="49:32">1</literal><operator pos:start="49:33" pos:end="49:33">)</operator></expr>)</condition> <block pos:start="49:36" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:43">

        <expr_stmt pos:start="51:9" pos:end="51:43"><expr pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:16">bar_size</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <literal type="number" pos:start="51:20" pos:end="51:20">1</literal> <operator pos:start="51:22" pos:end="51:23">&lt;&lt;</operator> <call pos:start="51:25" pos:end="51:42"><name pos:start="51:25" pos:end="51:32">qemu_fls</name><argument_list pos:start="51:33" pos:end="51:42">(<argument pos:start="51:34" pos:end="51:41"><expr pos:start="51:34" pos:end="51:41"><name pos:start="51:34" pos:end="51:41">bar_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:49"><expr pos:start="57:5" pos:end="57:48"><name pos:start="57:5" pos:end="57:8">name</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="57:48"><name pos:start="57:12" pos:end="57:26">g_strdup_printf</name><argument_list pos:start="57:27" pos:end="57:48">(<argument pos:start="57:28" pos:end="57:36"><expr pos:start="57:28" pos:end="57:36"><literal type="string" pos:start="57:28" pos:end="57:36">"%s-msix"</literal></expr></argument>, <argument pos:start="57:39" pos:end="57:47"><expr pos:start="57:39" pos:end="57:47"><name pos:start="57:39" pos:end="57:47"><name pos:start="57:39" pos:end="57:41">dev</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:47">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:78"><expr pos:start="59:5" pos:end="59:77"><call pos:start="59:5" pos:end="59:77"><name pos:start="59:5" pos:end="59:22">memory_region_init</name><argument_list pos:start="59:23" pos:end="59:77">(<argument pos:start="59:24" pos:end="59:47"><expr pos:start="59:24" pos:end="59:47"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:47"><name pos:start="59:25" pos:end="59:27">dev</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:47">msix_exclusive_bar</name></name></expr></argument>, <argument pos:start="59:50" pos:end="59:60"><expr pos:start="59:50" pos:end="59:60"><call pos:start="59:50" pos:end="59:60"><name pos:start="59:50" pos:end="59:55">OBJECT</name><argument_list pos:start="59:56" pos:end="59:60">(<argument pos:start="59:57" pos:end="59:59"><expr pos:start="59:57" pos:end="59:59"><name pos:start="59:57" pos:end="59:59">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:63" pos:end="59:66"><expr pos:start="59:63" pos:end="59:66"><name pos:start="59:63" pos:end="59:66">name</name></expr></argument>, <argument pos:start="59:69" pos:end="59:76"><expr pos:start="59:69" pos:end="59:76"><name pos:start="59:69" pos:end="59:76">bar_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:17"><expr pos:start="61:5" pos:end="61:16"><call pos:start="61:5" pos:end="61:16"><name pos:start="61:5" pos:end="61:10">g_free</name><argument_list pos:start="61:11" pos:end="61:16">(<argument pos:start="61:12" pos:end="61:15"><expr pos:start="61:12" pos:end="61:15"><name pos:start="61:12" pos:end="61:15">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="71:23"><expr pos:start="65:5" pos:end="71:22"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="71:22"><name pos:start="65:11" pos:end="65:19">msix_init</name><argument_list pos:start="65:20" pos:end="71:22">(<argument pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:23">dev</name></expr></argument>, <argument pos:start="65:26" pos:end="65:33"><expr pos:start="65:26" pos:end="65:33"><name pos:start="65:26" pos:end="65:33">nentries</name></expr></argument>, <argument pos:start="65:36" pos:end="65:59"><expr pos:start="65:36" pos:end="65:59"><operator pos:start="65:36" pos:end="65:36">&amp;</operator><name pos:start="65:37" pos:end="65:59"><name pos:start="65:37" pos:end="65:39">dev</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:59">msix_exclusive_bar</name></name></expr></argument>, <argument pos:start="65:62" pos:end="65:67"><expr pos:start="65:62" pos:end="65:67"><name pos:start="65:62" pos:end="65:67">bar_nr</name></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:21"><expr pos:start="67:21" pos:end="67:21"><literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr></argument>, <argument pos:start="67:24" pos:end="67:47"><expr pos:start="67:24" pos:end="67:47"><operator pos:start="67:24" pos:end="67:24">&amp;</operator><name pos:start="67:25" pos:end="67:47"><name pos:start="67:25" pos:end="67:27">dev</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:47">msix_exclusive_bar</name></name></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">bar_nr</name></expr></argument>, <argument pos:start="69:29" pos:end="69:42"><expr pos:start="69:29" pos:end="69:42"><name pos:start="69:29" pos:end="69:42">bar_pba_offset</name></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">ret</name></expr>)</condition> <block pos:start="73:14" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:19">

        <return pos:start="75:9" pos:end="75:19">return <expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="83:47"><expr pos:start="81:5" pos:end="83:46"><call pos:start="81:5" pos:end="83:46"><name pos:start="81:5" pos:end="81:20">pci_register_bar</name><argument_list pos:start="81:21" pos:end="83:46">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><name pos:start="81:22" pos:end="81:24">dev</name></expr></argument>, <argument pos:start="81:27" pos:end="81:32"><expr pos:start="81:27" pos:end="81:32"><name pos:start="81:27" pos:end="81:32">bar_nr</name></expr></argument>, <argument pos:start="81:35" pos:end="81:63"><expr pos:start="81:35" pos:end="81:63"><name pos:start="81:35" pos:end="81:63">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>,

                     <argument pos:start="83:22" pos:end="83:45"><expr pos:start="83:22" pos:end="83:45"><operator pos:start="83:22" pos:end="83:22">&amp;</operator><name pos:start="83:23" pos:end="83:45"><name pos:start="83:23" pos:end="83:25">dev</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:45">msix_exclusive_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
