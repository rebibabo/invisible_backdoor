<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16467.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">qemu_rdma_unregister_waiting</name><parameter_list pos:start="1:40" pos:end="1:58">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:51">RDMAContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">rdma</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:13">

    <while pos:start="5:5" pos:end="131:5">while <condition pos:start="5:11" pos:end="5:59">(<expr pos:start="5:12" pos:end="5:58"><name pos:start="5:12" pos:end="5:58"><name pos:start="5:12" pos:end="5:15">rdma</name><operator pos:start="5:16" pos:end="5:17">-&gt;</operator><name pos:start="5:18" pos:end="5:32">unregistrations</name><index pos:start="5:33" pos:end="5:58">[<expr pos:start="5:34" pos:end="5:57"><name pos:start="5:34" pos:end="5:57"><name pos:start="5:34" pos:end="5:37">rdma</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:57">unregister_current</name></name></expr>]</index></name></expr>)</condition> <block pos:start="5:61" pos:end="131:5">{<block_content pos:start="7:9" pos:end="129:73">

        <decl_stmt pos:start="7:9" pos:end="7:16"><decl pos:start="7:9" pos:end="7:15"><type pos:start="7:9" pos:end="7:11"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:15">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:73"><decl pos:start="9:9" pos:end="9:72"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">uint64_t</name></type> <name pos:start="9:18" pos:end="9:22">wr_id</name> <init pos:start="9:24" pos:end="9:72">= <expr pos:start="9:26" pos:end="9:72"><name pos:start="9:26" pos:end="9:72"><name pos:start="9:26" pos:end="9:29">rdma</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:46">unregistrations</name><index pos:start="9:47" pos:end="9:72">[<expr pos:start="9:48" pos:end="9:71"><name pos:start="9:48" pos:end="9:71"><name pos:start="9:48" pos:end="9:51">rdma</name><operator pos:start="9:52" pos:end="9:53">-&gt;</operator><name pos:start="9:54" pos:end="9:71">unregister_current</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="13:68"><decl pos:start="11:9" pos:end="13:67"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">uint64_t</name></type> <name pos:start="11:18" pos:end="11:22">chunk</name> <init pos:start="11:24" pos:end="13:67">=

            <expr pos:start="13:13" pos:end="13:67"><operator pos:start="13:13" pos:end="13:13">(</operator><name pos:start="13:14" pos:end="13:18">wr_id</name> <operator pos:start="13:20" pos:end="13:20">&amp;</operator> <name pos:start="13:22" pos:end="13:41">RDMA_WRID_CHUNK_MASK</name><operator pos:start="13:42" pos:end="13:42">)</operator> <operator pos:start="13:44" pos:end="13:45">&gt;&gt;</operator> <name pos:start="13:47" pos:end="13:67">RDMA_WRID_CHUNK_SHIFT</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="17:68"><decl pos:start="15:9" pos:end="17:67"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint64_t</name></type> <name pos:start="15:18" pos:end="15:22">index</name> <init pos:start="15:24" pos:end="17:67">=

            <expr pos:start="17:13" pos:end="17:67"><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:18">wr_id</name> <operator pos:start="17:20" pos:end="17:20">&amp;</operator> <name pos:start="17:22" pos:end="17:41">RDMA_WRID_BLOCK_MASK</name><operator pos:start="17:42" pos:end="17:42">)</operator> <operator pos:start="17:44" pos:end="17:45">&gt;&gt;</operator> <name pos:start="17:47" pos:end="17:67">RDMA_WRID_BLOCK_SHIFT</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="21:51"><decl pos:start="19:9" pos:end="21:50"><type pos:start="19:9" pos:end="19:24"><name pos:start="19:9" pos:end="19:22">RDMALocalBlock</name> <modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:29">block</name> <init pos:start="19:31" pos:end="21:50">=

            <expr pos:start="21:13" pos:end="21:50"><operator pos:start="21:13" pos:end="21:13">&amp;</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:49"><name pos:start="21:15" pos:end="21:18">rdma</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:36">local_ram_blocks</name><operator pos:start="21:37" pos:end="21:37">.</operator><name pos:start="21:38" pos:end="21:42">block</name><index pos:start="21:43" pos:end="21:49">[<expr pos:start="21:44" pos:end="21:48"><name pos:start="21:44" pos:end="21:48">index</name></expr>]</index></name><operator pos:start="21:50" pos:end="21:50">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:54"><decl pos:start="23:9" pos:end="23:53"><type pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:20">RDMARegister</name></type> <name pos:start="23:22" pos:end="23:24">reg</name> <init pos:start="23:26" pos:end="23:53">= <expr pos:start="23:28" pos:end="23:53"><block pos:start="23:28" pos:end="23:53">{ <expr pos:start="23:30" pos:end="23:51"><operator pos:start="23:30" pos:end="23:30">.</operator><name pos:start="23:31" pos:end="23:43">current_index</name> <operator pos:start="23:45" pos:end="23:45">=</operator> <name pos:start="23:47" pos:end="23:51">index</name></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="27:35"><decl pos:start="25:9" pos:end="27:34"><type pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:25">RDMAControlHeader</name></type> <name pos:start="25:27" pos:end="25:30">resp</name> <init pos:start="25:32" pos:end="27:34">= <expr pos:start="25:34" pos:end="27:34"><block pos:start="25:34" pos:end="27:34">{ <expr pos:start="25:36" pos:end="25:75"><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:40">type</name> <operator pos:start="25:42" pos:end="25:42">=</operator> <name pos:start="25:44" pos:end="25:75">RDMA_CONTROL_UNREGISTER_FINISHED</name></expr>,

                                 }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="35:35"><decl pos:start="29:9" pos:end="35:34"><type pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:25">RDMAControlHeader</name></type> <name pos:start="29:27" pos:end="29:30">head</name> <init pos:start="29:32" pos:end="35:34">= <expr pos:start="29:34" pos:end="35:34"><block pos:start="29:34" pos:end="35:34">{ <expr pos:start="29:36" pos:end="29:62"><operator pos:start="29:36" pos:end="29:36">.</operator><name pos:start="29:37" pos:end="29:39">len</name> <operator pos:start="29:41" pos:end="29:41">=</operator> <sizeof pos:start="29:43" pos:end="29:62">sizeof<argument_list pos:start="29:49" pos:end="29:62">(<argument pos:start="29:50" pos:end="29:61"><expr pos:start="29:50" pos:end="29:61"><name pos:start="29:50" pos:end="29:61">RDMARegister</name></expr></argument>)</argument_list></sizeof></expr>,

                                   <expr pos:start="31:36" pos:end="31:74"><operator pos:start="31:36" pos:end="31:36">.</operator><name pos:start="31:37" pos:end="31:40">type</name> <operator pos:start="31:42" pos:end="31:42">=</operator> <name pos:start="31:44" pos:end="31:74">RDMA_CONTROL_UNREGISTER_REQUEST</name></expr>,

                                   <expr pos:start="33:36" pos:end="33:46"><operator pos:start="33:36" pos:end="33:36">.</operator><name pos:start="33:37" pos:end="33:42">repeat</name> <operator pos:start="33:44" pos:end="33:44">=</operator> <literal type="number" pos:start="33:46" pos:end="33:46">1</literal></expr>,

                                 }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="39:9" pos:end="41:71"><expr pos:start="39:9" pos:end="41:70"><call pos:start="39:9" pos:end="41:70"><name pos:start="39:9" pos:end="39:16">DDPRINTF</name><argument_list pos:start="39:17" pos:end="41:70">(<argument pos:start="39:18" pos:end="41:36"><expr pos:start="39:18" pos:end="41:36"><literal type="string" pos:start="39:18" pos:end="39:53">"Processing unregister for chunk: %"</literal> <name pos:start="39:55" pos:end="39:60">PRIu64</name>

                 <literal type="string" pos:start="41:18" pos:end="41:36">" at position %d\n"</literal></expr></argument>, <argument pos:start="41:39" pos:end="41:43"><expr pos:start="41:39" pos:end="41:43"><name pos:start="41:39" pos:end="41:43">chunk</name></expr></argument>, <argument pos:start="41:46" pos:end="41:69"><expr pos:start="41:46" pos:end="41:69"><name pos:start="41:46" pos:end="41:69"><name pos:start="41:46" pos:end="41:49">rdma</name><operator pos:start="41:50" pos:end="41:51">-&gt;</operator><name pos:start="41:52" pos:end="41:69">unregister_current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:60"><expr pos:start="45:9" pos:end="45:59"><name pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:12">rdma</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:29">unregistrations</name><index pos:start="45:30" pos:end="45:55">[<expr pos:start="45:31" pos:end="45:54"><name pos:start="45:31" pos:end="45:54"><name pos:start="45:31" pos:end="45:34">rdma</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:54">unregister_current</name></name></expr>]</index></name> <operator pos:start="45:57" pos:end="45:57">=</operator> <literal type="number" pos:start="45:59" pos:end="45:59">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:12">rdma</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:32">unregister_current</name></name><operator pos:start="47:33" pos:end="47:34">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:63">(<expr pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:16">rdma</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:36">unregister_current</name></name> <operator pos:start="51:38" pos:end="51:39">==</operator> <name pos:start="51:41" pos:end="51:62">RDMA_SIGNALED_SEND_MAX</name></expr>)</condition> <block pos:start="51:65" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:41">

            <expr_stmt pos:start="53:13" pos:end="53:41"><expr pos:start="53:13" pos:end="53:40"><name pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:16">rdma</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:36">unregister_current</name></name> <operator pos:start="53:38" pos:end="53:38">=</operator> <literal type="number" pos:start="53:40" pos:end="53:40">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>





        <comment type="block" pos:start="61:9" pos:end="73:11">/*

         * Unregistration is speculative (because migration is single-threaded

         * and we cannot break the protocol's inifinband message ordering).

         * Thus, if the memory is currently being used for transmission,

         * then abort the attempt to unregister and try again

         * later the next time a completion is received for this memory.

         */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><call pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:17">clear_bit</name><argument_list pos:start="75:18" pos:end="75:50">(<argument pos:start="75:19" pos:end="75:23"><expr pos:start="75:19" pos:end="75:23"><name pos:start="75:19" pos:end="75:23">chunk</name></expr></argument>, <argument pos:start="75:26" pos:end="75:49"><expr pos:start="75:26" pos:end="75:49"><name pos:start="75:26" pos:end="75:49"><name pos:start="75:26" pos:end="75:30">block</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:49">unregister_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:51">(<expr pos:start="79:13" pos:end="79:50"><call pos:start="79:13" pos:end="79:50"><name pos:start="79:13" pos:end="79:20">test_bit</name><argument_list pos:start="79:21" pos:end="79:50">(<argument pos:start="79:22" pos:end="79:26"><expr pos:start="79:22" pos:end="79:26"><name pos:start="79:22" pos:end="79:26">chunk</name></expr></argument>, <argument pos:start="79:29" pos:end="79:49"><expr pos:start="79:29" pos:end="79:49"><name pos:start="79:29" pos:end="79:49"><name pos:start="79:29" pos:end="79:33">block</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:49">transit_bitmap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:53" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:21">

            <expr_stmt pos:start="81:13" pos:end="81:79"><expr pos:start="81:13" pos:end="81:78"><call pos:start="81:13" pos:end="81:78"><name pos:start="81:13" pos:end="81:20">DDPRINTF</name><argument_list pos:start="81:21" pos:end="81:78">(<argument pos:start="81:22" pos:end="81:70"><expr pos:start="81:22" pos:end="81:70"><literal type="string" pos:start="81:22" pos:end="81:58">"Cannot unregister inflight chunk: %"</literal> <name pos:start="81:60" pos:end="81:65">PRIu64</name> <literal type="string" pos:start="81:67" pos:end="81:70">"\n"</literal></expr></argument>, <argument pos:start="81:73" pos:end="81:77"><expr pos:start="81:73" pos:end="81:77"><name pos:start="81:73" pos:end="81:77">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="83:13" pos:end="83:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:71"><expr pos:start="89:9" pos:end="89:70"><call pos:start="89:9" pos:end="89:70"><name pos:start="89:9" pos:end="89:16">DDPRINTF</name><argument_list pos:start="89:17" pos:end="89:70">(<argument pos:start="89:18" pos:end="89:62"><expr pos:start="89:18" pos:end="89:62"><literal type="string" pos:start="89:18" pos:end="89:50">"Sending unregister for chunk: %"</literal> <name pos:start="89:52" pos:end="89:57">PRIu64</name> <literal type="string" pos:start="89:59" pos:end="89:62">"\n"</literal></expr></argument>, <argument pos:start="89:65" pos:end="89:69"><expr pos:start="89:65" pos:end="89:69"><name pos:start="89:65" pos:end="89:69">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:45"><name pos:start="93:15" pos:end="93:26">ibv_dereg_mr</name><argument_list pos:start="93:27" pos:end="93:45">(<argument pos:start="93:28" pos:end="93:44"><expr pos:start="93:28" pos:end="93:44"><name pos:start="93:28" pos:end="93:44"><name pos:start="93:28" pos:end="93:32">block</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:37">pmr</name><index pos:start="93:38" pos:end="93:44">[<expr pos:start="93:39" pos:end="93:43"><name pos:start="93:39" pos:end="93:43">chunk</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:13">block</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">pmr</name><index pos:start="95:19" pos:end="95:25">[<expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">chunk</name></expr>]</index></name> <operator pos:start="95:27" pos:end="95:27">=</operator> <name pos:start="95:29" pos:end="95:32">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:38"><expr pos:start="97:9" pos:end="97:37"><name pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:13">block</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:26">remote_keys</name><index pos:start="97:27" pos:end="97:33">[<expr pos:start="97:28" pos:end="97:32"><name pos:start="97:28" pos:end="97:32">chunk</name></expr>]</index></name> <operator pos:start="97:35" pos:end="97:35">=</operator> <literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:21">(<expr pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:18">!=</operator> <literal type="number" pos:start="101:20" pos:end="101:20">0</literal></expr>)</condition> <block pos:start="101:23" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:24">

            <expr_stmt pos:start="103:13" pos:end="103:50"><expr pos:start="103:13" pos:end="103:49"><call pos:start="103:13" pos:end="103:49"><name pos:start="103:13" pos:end="103:18">perror</name><argument_list pos:start="103:19" pos:end="103:49">(<argument pos:start="103:20" pos:end="103:48"><expr pos:start="103:20" pos:end="103:48"><literal type="string" pos:start="103:20" pos:end="103:48">"unregistration chunk failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="105:13" pos:end="105:24">return <expr pos:start="105:20" pos:end="105:23"><operator pos:start="105:20" pos:end="105:20">-</operator><name pos:start="105:21" pos:end="105:23">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:36"><expr pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:33"><name pos:start="109:9" pos:end="109:12">rdma</name><operator pos:start="109:13" pos:end="109:14">-&gt;</operator><name pos:start="109:15" pos:end="109:33">total_registrations</name></name><operator pos:start="109:34" pos:end="109:35">--</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:30"><expr pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:11">reg</name><operator pos:start="113:12" pos:end="113:12">.</operator><name pos:start="113:13" pos:end="113:15">key</name><operator pos:start="113:16" pos:end="113:16">.</operator><name pos:start="113:17" pos:end="113:21">chunk</name></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:29">chunk</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:34"><expr pos:start="115:9" pos:end="115:33"><call pos:start="115:9" pos:end="115:33"><name pos:start="115:9" pos:end="115:27">register_to_network</name><argument_list pos:start="115:28" pos:end="115:33">(<argument pos:start="115:29" pos:end="115:32"><expr pos:start="115:29" pos:end="115:32"><operator pos:start="115:29" pos:end="115:29">&amp;</operator><name pos:start="115:30" pos:end="115:32">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="119:51"><expr pos:start="117:9" pos:end="119:50"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="119:50"><name pos:start="117:15" pos:end="117:37">qemu_rdma_exchange_send</name><argument_list pos:start="117:38" pos:end="119:50">(<argument pos:start="117:39" pos:end="117:42"><expr pos:start="117:39" pos:end="117:42"><name pos:start="117:39" pos:end="117:42">rdma</name></expr></argument>, <argument pos:start="117:45" pos:end="117:49"><expr pos:start="117:45" pos:end="117:49"><operator pos:start="117:45" pos:end="117:45">&amp;</operator><name pos:start="117:46" pos:end="117:49">head</name></expr></argument>, <argument pos:start="117:52" pos:end="117:67"><expr pos:start="117:52" pos:end="117:67"><operator pos:start="117:52" pos:end="117:52">(</operator><name pos:start="117:53" pos:end="117:59">uint8_t</name> <operator pos:start="117:61" pos:end="117:61">*</operator><operator pos:start="117:62" pos:end="117:62">)</operator> <operator pos:start="117:64" pos:end="117:64">&amp;</operator><name pos:start="117:65" pos:end="117:67">reg</name></expr></argument>,

                                <argument pos:start="119:33" pos:end="119:37"><expr pos:start="119:33" pos:end="119:37"><operator pos:start="119:33" pos:end="119:33">&amp;</operator><name pos:start="119:34" pos:end="119:37">resp</name></expr></argument>, <argument pos:start="119:40" pos:end="119:43"><expr pos:start="119:40" pos:end="119:43"><name pos:start="119:40" pos:end="119:43">NULL</name></expr></argument>, <argument pos:start="119:46" pos:end="119:49"><expr pos:start="119:46" pos:end="119:49"><name pos:start="119:46" pos:end="119:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:20">(<expr pos:start="121:13" pos:end="121:19"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">&lt;</operator> <literal type="number" pos:start="121:19" pos:end="121:19">0</literal></expr>)</condition> <block pos:start="121:22" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:23">

            <return pos:start="123:13" pos:end="123:23">return <expr pos:start="123:20" pos:end="123:22"><name pos:start="123:20" pos:end="123:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:73"><expr pos:start="129:9" pos:end="129:72"><call pos:start="129:9" pos:end="129:72"><name pos:start="129:9" pos:end="129:16">DDPRINTF</name><argument_list pos:start="129:17" pos:end="129:72">(<argument pos:start="129:18" pos:end="129:64"><expr pos:start="129:18" pos:end="129:64"><literal type="string" pos:start="129:18" pos:end="129:42">"Unregister for chunk: %"</literal> <name pos:start="129:44" pos:end="129:49">PRIu64</name> <literal type="string" pos:start="129:51" pos:end="129:64">" complete.\n"</literal></expr></argument>, <argument pos:start="129:67" pos:end="129:71"><expr pos:start="129:67" pos:end="129:71"><name pos:start="129:67" pos:end="129:71">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
