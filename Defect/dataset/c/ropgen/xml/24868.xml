<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24868.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_blockdev_add</name><parameter_list pos:start="1:22" pos:end="1:61">(<parameter pos:start="1:23" pos:end="1:46"><decl pos:start="1:23" pos:end="1:46"><type pos:start="1:23" pos:end="1:46"><name pos:start="1:23" pos:end="1:37">BlockdevOptions</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">options</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:60"><decl pos:start="1:49" pos:end="1:60"><type pos:start="1:49" pos:end="1:60"><name pos:start="1:49" pos:end="1:53">Error</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier><modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:18">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">QObject</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">obj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">Visitor</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">v</name> <init pos:start="9:16" pos:end="9:45">= <expr pos:start="9:18" pos:end="9:45"><call pos:start="9:18" pos:end="9:45"><name pos:start="9:18" pos:end="9:39">qmp_output_visitor_new</name><argument_list pos:start="9:40" pos:end="9:45">(<argument pos:start="9:41" pos:end="9:44"><expr pos:start="9:41" pos:end="9:44"><operator pos:start="9:41" pos:end="9:41">&amp;</operator><name pos:start="9:42" pos:end="9:44">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">QDict</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:16">qdict</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:62"><expr pos:start="17:5" pos:end="17:61"><call pos:start="17:5" pos:end="17:61"><name pos:start="17:5" pos:end="17:30">visit_type_BlockdevOptions</name><argument_list pos:start="17:31" pos:end="17:61">(<argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><name pos:start="17:32" pos:end="17:32">v</name></expr></argument>, <argument pos:start="17:35" pos:end="17:38"><expr pos:start="17:35" pos:end="17:38"><name pos:start="17:35" pos:end="17:38">NULL</name></expr></argument>, <argument pos:start="17:41" pos:end="17:48"><expr pos:start="17:41" pos:end="17:48"><operator pos:start="17:41" pos:end="17:41">&amp;</operator><name pos:start="17:42" pos:end="17:48">options</name></expr></argument>, <argument pos:start="17:51" pos:end="17:60"><expr pos:start="17:51" pos:end="17:60"><operator pos:start="17:51" pos:end="17:51">&amp;</operator><name pos:start="17:52" pos:end="17:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:17">local_err</name></expr>)</condition> <block pos:start="19:20" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><call pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:23">error_propagate</name><argument_list pos:start="21:24" pos:end="21:40">(<argument pos:start="21:25" pos:end="21:28"><expr pos:start="21:25" pos:end="21:28"><name pos:start="21:25" pos:end="21:28">errp</name></expr></argument>, <argument pos:start="21:31" pos:end="21:39"><expr pos:start="21:31" pos:end="21:39"><name pos:start="21:31" pos:end="21:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="23:9" pos:end="23:18">goto <name pos:start="23:14" pos:end="23:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><call pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:18">visit_complete</name><argument_list pos:start="29:19" pos:end="29:27">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><name pos:start="29:20" pos:end="29:20">v</name></expr></argument>, <argument pos:start="29:23" pos:end="29:26"><expr pos:start="29:23" pos:end="29:26"><operator pos:start="29:23" pos:end="29:23">&amp;</operator><name pos:start="29:24" pos:end="29:26">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:9">qdict</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:33"><name pos:start="31:13" pos:end="31:28">qobject_to_qdict</name><argument_list pos:start="31:29" pos:end="31:33">(<argument pos:start="31:30" pos:end="31:32"><expr pos:start="31:30" pos:end="31:32"><name pos:start="31:30" pos:end="31:32">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><call pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:17">qdict_flatten</name><argument_list pos:start="35:18" pos:end="35:24">(<argument pos:start="35:19" pos:end="35:23"><expr pos:start="35:19" pos:end="35:23"><name pos:start="35:19" pos:end="35:23">qdict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:47">(<expr pos:start="39:9" pos:end="39:46"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:46"><name pos:start="39:10" pos:end="39:26">qdict_get_try_str</name><argument_list pos:start="39:27" pos:end="39:46">(<argument pos:start="39:28" pos:end="39:32"><expr pos:start="39:28" pos:end="39:32"><name pos:start="39:28" pos:end="39:32">qdict</name></expr></argument>, <argument pos:start="39:35" pos:end="39:45"><expr pos:start="39:35" pos:end="39:45"><literal type="string" pos:start="39:35" pos:end="39:45">"node-name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:49" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:76"><expr pos:start="41:9" pos:end="41:75"><call pos:start="41:9" pos:end="41:75"><name pos:start="41:9" pos:end="41:18">error_setg</name><argument_list pos:start="41:19" pos:end="41:75">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">errp</name></expr></argument>, <argument pos:start="41:26" pos:end="41:74"><expr pos:start="41:26" pos:end="41:74"><literal type="string" pos:start="41:26" pos:end="41:74">"'node-name' must be specified for the root node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:6">bs</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:35"><name pos:start="49:10" pos:end="49:22">bds_tree_init</name><argument_list pos:start="49:23" pos:end="49:35">(<argument pos:start="49:24" pos:end="49:28"><expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">qdict</name></expr></argument>, <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:12">(<expr pos:start="51:9" pos:end="51:11"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:11">bs</name></expr>)</condition> <block pos:start="51:14" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:63"><expr pos:start="59:5" pos:end="59:62"><call pos:start="59:5" pos:end="59:62"><name pos:start="59:5" pos:end="59:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="59:23" pos:end="59:62">(<argument pos:start="59:24" pos:end="59:43"><expr pos:start="59:24" pos:end="59:43"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:43">monitor_bdrv_states</name></expr></argument>, <argument pos:start="59:46" pos:end="59:47"><expr pos:start="59:46" pos:end="59:47"><name pos:start="59:46" pos:end="59:47">bs</name></expr></argument>, <argument pos:start="59:50" pos:end="59:61"><expr pos:start="59:50" pos:end="59:61"><name pos:start="59:50" pos:end="59:61">monitor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:36">(<expr pos:start="63:9" pos:end="63:35"><name pos:start="63:9" pos:end="63:10">bs</name> <operator pos:start="63:12" pos:end="63:13">&amp;&amp;</operator> <call pos:start="63:15" pos:end="63:35"><name pos:start="63:15" pos:end="63:31">bdrv_key_required</name><argument_list pos:start="63:32" pos:end="63:35">(<argument pos:start="63:33" pos:end="63:34"><expr pos:start="63:33" pos:end="63:34"><name pos:start="63:33" pos:end="63:34">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:38" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:18">

        <expr_stmt pos:start="65:9" pos:end="65:62"><expr pos:start="65:9" pos:end="65:61"><call pos:start="65:9" pos:end="65:61"><name pos:start="65:9" pos:end="65:21">QTAILQ_REMOVE</name><argument_list pos:start="65:22" pos:end="65:61">(<argument pos:start="65:23" pos:end="65:42"><expr pos:start="65:23" pos:end="65:42"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:42">monitor_bdrv_states</name></expr></argument>, <argument pos:start="65:45" pos:end="65:46"><expr pos:start="65:45" pos:end="65:46"><name pos:start="65:45" pos:end="65:46">bs</name></expr></argument>, <argument pos:start="65:49" pos:end="65:60"><expr pos:start="65:49" pos:end="65:60"><name pos:start="65:49" pos:end="65:60">monitor_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:23"><expr pos:start="67:9" pos:end="67:22"><call pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:18">bdrv_unref</name><argument_list pos:start="67:19" pos:end="67:22">(<argument pos:start="67:20" pos:end="67:21"><expr pos:start="67:20" pos:end="67:21"><name pos:start="67:20" pos:end="67:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:75"><expr pos:start="69:9" pos:end="69:74"><call pos:start="69:9" pos:end="69:74"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:74">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:73"><expr pos:start="69:26" pos:end="69:73"><literal type="string" pos:start="69:26" pos:end="69:73">"blockdev-add doesn't support encrypted devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="77:1" pos:end="77:5"><name pos:start="77:1" pos:end="77:4">fail</name>:</label>

    <expr_stmt pos:start="79:5" pos:end="79:18"><expr pos:start="79:5" pos:end="79:17"><call pos:start="79:5" pos:end="79:17"><name pos:start="79:5" pos:end="79:14">visit_free</name><argument_list pos:start="79:15" pos:end="79:17">(<argument pos:start="79:16" pos:end="79:16"><expr pos:start="79:16" pos:end="79:16"><name pos:start="79:16" pos:end="79:16">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
