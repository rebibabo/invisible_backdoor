<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16424.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:22"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_mlz_decompression</name><parameter_list pos:start="1:25" pos:end="1:84">(<parameter pos:start="1:26" pos:end="1:33"><decl pos:start="1:26" pos:end="1:33"><type pos:start="1:26" pos:end="1:33"><name pos:start="1:26" pos:end="1:28">MLZ</name><modifier pos:start="1:29" pos:end="1:29">*</modifier></type> <name pos:start="1:31" pos:end="1:33">mlz</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:48">GetBitContext</name><modifier pos:start="1:49" pos:end="1:49">*</modifier></type> <name pos:start="1:51" pos:end="1:52">gb</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:62"><decl pos:start="1:55" pos:end="1:62"><type pos:start="1:55" pos:end="1:62"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:62">size</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:83"><decl pos:start="1:65" pos:end="1:83"><type pos:start="1:65" pos:end="1:83"><name pos:start="1:65" pos:end="1:72">unsigned</name> <name pos:start="1:74" pos:end="1:77">char</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:83">buff</name></decl></parameter>)</parameter_list> <block pos:start="1:86" pos:end="127:22">{<block_content pos:start="3:5" pos:end="127:22">

    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:13"><name pos:start="3:5" pos:end="3:11">MLZDict</name> <modifier pos:start="3:13" pos:end="3:13">*</modifier></type><name pos:start="3:14" pos:end="3:17">dict</name> <init pos:start="3:19" pos:end="3:29">= <expr pos:start="3:21" pos:end="3:29"><name pos:start="3:21" pos:end="3:29"><name pos:start="3:21" pos:end="3:23">mlz</name><operator pos:start="3:24" pos:end="3:25">-&gt;</operator><name pos:start="3:26" pos:end="3:29">dict</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">long</name></type> <name pos:start="5:19" pos:end="5:30">output_chars</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">string_code</name></decl>, <decl pos:start="7:22" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:37">last_string_code</name></decl>, <decl pos:start="7:40" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:48">char_code</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:20"><expr pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:15">string_code</name> <operator pos:start="11:17" pos:end="11:17">=</operator> <literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:13">char_code</name>   <operator pos:start="13:17" pos:end="13:17">=</operator> <operator pos:start="13:19" pos:end="13:19">-</operator><literal type="number" pos:start="13:20" pos:end="13:20">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:20">last_string_code</name> <operator pos:start="15:22" pos:end="15:22">=</operator> <operator pos:start="15:24" pos:end="15:24">-</operator><literal type="number" pos:start="15:25" pos:end="15:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:16">output_chars</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="127:22">while <condition pos:start="21:11" pos:end="21:31">(<expr pos:start="21:12" pos:end="21:30"><name pos:start="21:12" pos:end="21:23">output_chars</name> <operator pos:start="21:25" pos:end="21:25">&lt;</operator> <name pos:start="21:27" pos:end="21:30">size</name></expr>)</condition> <block pos:start="21:33" pos:end="127:22">{<block_content pos:start="23:9" pos:end="127:22">

        <expr_stmt pos:start="23:9" pos:end="23:56"><expr pos:start="23:9" pos:end="23:55"><name pos:start="23:9" pos:end="23:19">string_code</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:55"><name pos:start="23:23" pos:end="23:32">input_code</name><argument_list pos:start="23:33" pos:end="23:55">(<argument pos:start="23:34" pos:end="23:35"><expr pos:start="23:34" pos:end="23:35"><name pos:start="23:34" pos:end="23:35">gb</name></expr></argument>, <argument pos:start="23:38" pos:end="23:54"><expr pos:start="23:38" pos:end="23:54"><name pos:start="23:38" pos:end="23:54"><name pos:start="23:38" pos:end="23:40">mlz</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:54">dic_code_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="25:9" pos:end="127:22">switch <condition pos:start="25:16" pos:end="25:28">(<expr pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:27">string_code</name></expr>)</condition> <block pos:start="25:30" pos:end="127:22">{<block_content pos:start="27:13" pos:end="127:22">

            <case pos:start="27:13" pos:end="27:28">case <expr pos:start="27:18" pos:end="27:27"><name pos:start="27:18" pos:end="27:27">FLUSH_CODE</name></expr>:</case>

            <case pos:start="29:13" pos:end="29:26">case <expr pos:start="29:18" pos:end="29:25"><name pos:start="29:18" pos:end="29:25">MAX_CODE</name></expr>:</case>

                <expr_stmt pos:start="31:17" pos:end="31:39"><expr pos:start="31:17" pos:end="31:38"><call pos:start="31:17" pos:end="31:38"><name pos:start="31:17" pos:end="31:33">ff_mlz_flush_dict</name><argument_list pos:start="31:34" pos:end="31:38">(<argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">mlz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:31"><expr pos:start="33:17" pos:end="33:30"><name pos:start="33:17" pos:end="33:25">char_code</name> <operator pos:start="33:27" pos:end="33:27">=</operator> <operator pos:start="33:29" pos:end="33:29">-</operator><literal type="number" pos:start="33:30" pos:end="33:30">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:38"><expr pos:start="35:17" pos:end="35:37"><name pos:start="35:17" pos:end="35:32">last_string_code</name> <operator pos:start="35:34" pos:end="35:34">=</operator> <operator pos:start="35:36" pos:end="35:36">-</operator><literal type="number" pos:start="35:37" pos:end="35:37">1</literal></expr>;</expr_stmt>

                <break pos:start="37:17" pos:end="37:22">break;</break>

            <case pos:start="39:13" pos:end="39:29">case <expr pos:start="39:18" pos:end="39:28"><name pos:start="39:18" pos:end="39:28">FREEZE_CODE</name></expr>:</case>

                <expr_stmt pos:start="41:17" pos:end="41:37"><expr pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:32"><name pos:start="41:17" pos:end="41:19">mlz</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:32">freeze_flag</name></name> <operator pos:start="41:34" pos:end="41:34">=</operator> <literal type="number" pos:start="41:36" pos:end="41:36">1</literal></expr>;</expr_stmt>

                <break pos:start="43:17" pos:end="43:22">break;</break>

            <default pos:start="45:13" pos:end="45:20">default:</default>

                <if_stmt pos:start="47:17" pos:end="127:22"><if pos:start="47:17" pos:end="127:22">if <condition pos:start="47:20" pos:end="47:61">(<expr pos:start="47:21" pos:end="47:60"><name pos:start="47:21" pos:end="47:31">string_code</name> <operator pos:start="47:33" pos:end="47:33">&gt;</operator> <name pos:start="47:35" pos:end="47:60"><name pos:start="47:35" pos:end="47:37">mlz</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:60">current_dic_index_max</name></name></expr>)</condition> <block pos:start="47:63" pos:end="127:22">{<block_content pos:start="49:21" pos:end="127:22">

                    <expr_stmt pos:start="49:21" pos:end="49:145"><expr pos:start="49:21" pos:end="49:144"><call pos:start="49:21" pos:end="49:144"><name pos:start="49:21" pos:end="49:26">av_log</name><argument_list pos:start="49:27" pos:end="49:144">(<argument pos:start="49:28" pos:end="49:39"><expr pos:start="49:28" pos:end="49:39"><name pos:start="49:28" pos:end="49:39"><name pos:start="49:28" pos:end="49:30">mlz</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:39">context</name></name></expr></argument>, <argument pos:start="49:42" pos:end="49:53"><expr pos:start="49:42" pos:end="49:53"><name pos:start="49:42" pos:end="49:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:56" pos:end="49:102"><expr pos:start="49:56" pos:end="49:102"><literal type="string" pos:start="49:56" pos:end="49:102">"String code %d exceeds maximum value of %d.\n"</literal></expr></argument>, <argument pos:start="49:105" pos:end="49:115"><expr pos:start="49:105" pos:end="49:115"><name pos:start="49:105" pos:end="49:115">string_code</name></expr></argument>, <argument pos:start="49:118" pos:end="49:143"><expr pos:start="49:118" pos:end="49:143"><name pos:start="49:118" pos:end="49:143"><name pos:start="49:118" pos:end="49:120">mlz</name><operator pos:start="49:121" pos:end="49:122">-&gt;</operator><name pos:start="49:123" pos:end="49:143">current_dic_index_max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="53:17" pos:end="127:22"><if pos:start="53:17" pos:end="61:17">if <condition pos:start="53:20" pos:end="53:56">(<expr pos:start="53:21" pos:end="53:55"><name pos:start="53:21" pos:end="53:31">string_code</name> <operator pos:start="53:33" pos:end="53:34">==</operator> <operator pos:start="53:36" pos:end="53:36">(</operator><name pos:start="53:37" pos:end="53:39">int</name><operator pos:start="53:40" pos:end="53:40">)</operator> <name pos:start="53:42" pos:end="53:55"><name pos:start="53:42" pos:end="53:44">mlz</name><operator pos:start="53:45" pos:end="53:46">-&gt;</operator><name pos:start="53:47" pos:end="53:55">bump_code</name></name></expr>)</condition> <block pos:start="53:58" pos:end="61:17">{<block_content pos:start="55:21" pos:end="59:68">

                    <expr_stmt pos:start="55:21" pos:end="55:40"><expr pos:start="55:21" pos:end="55:39"><operator pos:start="55:21" pos:end="55:22">++</operator><name pos:start="55:23" pos:end="55:39"><name pos:start="55:23" pos:end="55:25">mlz</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:39">dic_code_bit</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="57:21" pos:end="57:52"><expr pos:start="57:21" pos:end="57:51"><name pos:start="57:21" pos:end="57:46"><name pos:start="57:21" pos:end="57:23">mlz</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:46">current_dic_index_max</name></name> <operator pos:start="57:48" pos:end="57:49">*=</operator> <literal type="number" pos:start="57:51" pos:end="57:51">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:68"><expr pos:start="59:21" pos:end="59:67"><name pos:start="59:21" pos:end="59:34"><name pos:start="59:21" pos:end="59:23">mlz</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:34">bump_code</name></name> <operator pos:start="59:36" pos:end="59:36">=</operator> <name pos:start="59:38" pos:end="59:63"><name pos:start="59:38" pos:end="59:40">mlz</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:63">current_dic_index_max</name></name> <operator pos:start="59:65" pos:end="59:65">-</operator> <literal type="number" pos:start="59:67" pos:end="59:67">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="61:19" pos:end="127:22">else <block pos:start="61:24" pos:end="127:22">{<block_content pos:start="63:21" pos:end="127:22">

                    <if_stmt pos:start="63:21" pos:end="127:22"><if pos:start="63:21" pos:end="127:22">if <condition pos:start="63:24" pos:end="63:54">(<expr pos:start="63:25" pos:end="63:53"><name pos:start="63:25" pos:end="63:35">string_code</name> <operator pos:start="63:37" pos:end="63:38">&gt;=</operator> <name pos:start="63:40" pos:end="63:53"><name pos:start="63:40" pos:end="63:42">mlz</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:53">next_code</name></name></expr>)</condition> <block pos:start="63:56" pos:end="127:22">{<block_content pos:start="65:25" pos:end="127:22">

                        <decl_stmt pos:start="65:25" pos:end="65:125"><decl pos:start="65:25" pos:end="65:124"><type pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">int</name></type> <name pos:start="65:29" pos:end="65:31">ret</name> <init pos:start="65:33" pos:end="65:124">= <expr pos:start="65:35" pos:end="65:124"><call pos:start="65:35" pos:end="65:124"><name pos:start="65:35" pos:end="65:47">decode_string</name><argument_list pos:start="65:48" pos:end="65:124">(<argument pos:start="65:49" pos:end="65:51"><expr pos:start="65:49" pos:end="65:51"><name pos:start="65:49" pos:end="65:51">mlz</name></expr></argument>, <argument pos:start="65:54" pos:end="65:72"><expr pos:start="65:54" pos:end="65:72"><operator pos:start="65:54" pos:end="65:54">&amp;</operator><name pos:start="65:55" pos:end="65:72"><name pos:start="65:55" pos:end="65:58">buff</name><index pos:start="65:59" pos:end="65:72">[<expr pos:start="65:60" pos:end="65:71"><name pos:start="65:60" pos:end="65:71">output_chars</name></expr>]</index></name></expr></argument>, <argument pos:start="65:75" pos:end="65:90"><expr pos:start="65:75" pos:end="65:90"><name pos:start="65:75" pos:end="65:90">last_string_code</name></expr></argument>, <argument pos:start="65:93" pos:end="65:102"><expr pos:start="65:93" pos:end="65:102"><operator pos:start="65:93" pos:end="65:93">&amp;</operator><name pos:start="65:94" pos:end="65:102">char_code</name></expr></argument>, <argument pos:start="65:105" pos:end="65:123"><expr pos:start="65:105" pos:end="65:123"><name pos:start="65:105" pos:end="65:108">size</name> <operator pos:start="65:110" pos:end="65:110">-</operator> <name pos:start="65:112" pos:end="65:123">output_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="67:25" pos:end="127:22"><if pos:start="67:25" pos:end="127:22">if <condition pos:start="67:28" pos:end="67:65">(<expr pos:start="67:29" pos:end="67:64"><name pos:start="67:29" pos:end="67:44"><name pos:start="67:29" pos:end="67:31">ret</name> <argument_list type="generic" pos:start="67:33" pos:end="67:44">&lt; <argument pos:start="67:35" pos:end="67:42"><expr pos:start="67:35" pos:end="67:42"><literal type="number" pos:start="67:35" pos:end="67:35">0</literal> <operator pos:start="67:37" pos:end="67:38">||</operator> <name pos:start="67:40" pos:end="67:42">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="67:46" pos:end="67:49">size</name> <operator pos:start="67:51" pos:end="67:51">-</operator> <name pos:start="67:53" pos:end="67:64">output_chars</name></expr>)</condition> <block pos:start="67:67" pos:end="127:22">{<block_content pos:start="69:29" pos:end="127:22">

                            <expr_stmt pos:start="69:29" pos:end="69:90"><expr pos:start="69:29" pos:end="69:89"><call pos:start="69:29" pos:end="69:89"><name pos:start="69:29" pos:end="69:34">av_log</name><argument_list pos:start="69:35" pos:end="69:89">(<argument pos:start="69:36" pos:end="69:47"><expr pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:47"><name pos:start="69:36" pos:end="69:38">mlz</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:47">context</name></name></expr></argument>, <argument pos:start="69:50" pos:end="69:61"><expr pos:start="69:50" pos:end="69:61"><name pos:start="69:50" pos:end="69:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:64" pos:end="69:88"><expr pos:start="69:64" pos:end="69:88"><literal type="string" pos:start="69:64" pos:end="69:88">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="73:25" pos:end="73:44"><expr pos:start="73:25" pos:end="73:43"><name pos:start="73:25" pos:end="73:36">output_chars</name> <operator pos:start="73:38" pos:end="73:39">+=</operator> <name pos:start="73:41" pos:end="73:43">ret</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="75:25" pos:end="75:114"><expr pos:start="75:25" pos:end="75:113"><name pos:start="75:25" pos:end="75:27">ret</name> <operator pos:start="75:29" pos:end="75:29">=</operator> <call pos:start="75:31" pos:end="75:113"><name pos:start="75:31" pos:end="75:43">decode_string</name><argument_list pos:start="75:44" pos:end="75:113">(<argument pos:start="75:45" pos:end="75:47"><expr pos:start="75:45" pos:end="75:47"><name pos:start="75:45" pos:end="75:47">mlz</name></expr></argument>, <argument pos:start="75:50" pos:end="75:68"><expr pos:start="75:50" pos:end="75:68"><operator pos:start="75:50" pos:end="75:50">&amp;</operator><name pos:start="75:51" pos:end="75:68"><name pos:start="75:51" pos:end="75:54">buff</name><index pos:start="75:55" pos:end="75:68">[<expr pos:start="75:56" pos:end="75:67"><name pos:start="75:56" pos:end="75:67">output_chars</name></expr>]</index></name></expr></argument>, <argument pos:start="75:71" pos:end="75:79"><expr pos:start="75:71" pos:end="75:79"><name pos:start="75:71" pos:end="75:79">char_code</name></expr></argument>, <argument pos:start="75:82" pos:end="75:91"><expr pos:start="75:82" pos:end="75:91"><operator pos:start="75:82" pos:end="75:82">&amp;</operator><name pos:start="75:83" pos:end="75:91">char_code</name></expr></argument>, <argument pos:start="75:94" pos:end="75:112"><expr pos:start="75:94" pos:end="75:112"><name pos:start="75:94" pos:end="75:97">size</name> <operator pos:start="75:99" pos:end="75:99">-</operator> <name pos:start="75:101" pos:end="75:112">output_chars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="77:25" pos:end="127:22"><if pos:start="77:25" pos:end="93:21">if <condition pos:start="77:28" pos:end="77:65">(<expr pos:start="77:29" pos:end="77:64"><name pos:start="77:29" pos:end="77:44"><name pos:start="77:29" pos:end="77:31">ret</name> <argument_list type="generic" pos:start="77:33" pos:end="77:44">&lt; <argument pos:start="77:35" pos:end="77:42"><expr pos:start="77:35" pos:end="77:42"><literal type="number" pos:start="77:35" pos:end="77:35">0</literal> <operator pos:start="77:37" pos:end="77:38">||</operator> <name pos:start="77:40" pos:end="77:42">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="77:46" pos:end="77:49">size</name> <operator pos:start="77:51" pos:end="77:51">-</operator> <name pos:start="77:53" pos:end="77:64">output_chars</name></expr>)</condition> <block pos:start="77:67" pos:end="93:21">{<block_content pos:start="79:29" pos:end="91:41">

                            <expr_stmt pos:start="79:29" pos:end="79:90"><expr pos:start="79:29" pos:end="79:89"><call pos:start="79:29" pos:end="79:89"><name pos:start="79:29" pos:end="79:34">av_log</name><argument_list pos:start="79:35" pos:end="79:89">(<argument pos:start="79:36" pos:end="79:47"><expr pos:start="79:36" pos:end="79:47"><name pos:start="79:36" pos:end="79:47"><name pos:start="79:36" pos:end="79:38">mlz</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:47">context</name></name></expr></argument>, <argument pos:start="79:50" pos:end="79:61"><expr pos:start="79:50" pos:end="79:61"><name pos:start="79:50" pos:end="79:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:64" pos:end="79:88"><expr pos:start="79:64" pos:end="79:88"><literal type="string" pos:start="79:64" pos:end="79:88">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="83:25" pos:end="83:44"><expr pos:start="83:25" pos:end="83:43"><name pos:start="83:25" pos:end="83:36">output_chars</name> <operator pos:start="83:38" pos:end="83:39">+=</operator> <name pos:start="83:41" pos:end="83:43">ret</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="85:25" pos:end="85:94"><expr pos:start="85:25" pos:end="85:93"><call pos:start="85:25" pos:end="85:93"><name pos:start="85:25" pos:end="85:42">set_new_entry_dict</name><argument_list pos:start="85:43" pos:end="85:93">(<argument pos:start="85:44" pos:end="85:47"><expr pos:start="85:44" pos:end="85:47"><name pos:start="85:44" pos:end="85:47">dict</name></expr></argument>, <argument pos:start="85:50" pos:end="85:63"><expr pos:start="85:50" pos:end="85:63"><name pos:start="85:50" pos:end="85:63"><name pos:start="85:50" pos:end="85:52">mlz</name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:63">next_code</name></name></expr></argument>, <argument pos:start="85:66" pos:end="85:81"><expr pos:start="85:66" pos:end="85:81"><name pos:start="85:66" pos:end="85:81">last_string_code</name></expr></argument>, <argument pos:start="85:84" pos:end="85:92"><expr pos:start="85:84" pos:end="85:92"><name pos:start="85:84" pos:end="85:92">char_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





                        <expr_stmt pos:start="91:25" pos:end="91:41"><expr pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:38"><name pos:start="91:25" pos:end="91:27">mlz</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:38">next_code</name></name><operator pos:start="91:39" pos:end="91:40">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="93:23" pos:end="127:22">else <block pos:start="93:28" pos:end="127:22">{<block_content pos:start="95:25" pos:end="127:22">

                        <decl_stmt pos:start="95:25" pos:end="95:120"><decl pos:start="95:25" pos:end="95:119"><type pos:start="95:25" pos:end="95:27"><name pos:start="95:25" pos:end="95:27">int</name></type> <name pos:start="95:29" pos:end="95:31">ret</name> <init pos:start="95:33" pos:end="95:119">= <expr pos:start="95:35" pos:end="95:119"><call pos:start="95:35" pos:end="95:119"><name pos:start="95:35" pos:end="95:47">decode_string</name><argument_list pos:start="95:48" pos:end="95:119">(<argument pos:start="95:49" pos:end="95:51"><expr pos:start="95:49" pos:end="95:51"><name pos:start="95:49" pos:end="95:51">mlz</name></expr></argument>, <argument pos:start="95:54" pos:end="95:72"><expr pos:start="95:54" pos:end="95:72"><operator pos:start="95:54" pos:end="95:54">&amp;</operator><name pos:start="95:55" pos:end="95:72"><name pos:start="95:55" pos:end="95:58">buff</name><index pos:start="95:59" pos:end="95:72">[<expr pos:start="95:60" pos:end="95:71"><name pos:start="95:60" pos:end="95:71">output_chars</name></expr>]</index></name></expr></argument>, <argument pos:start="95:75" pos:end="95:85"><expr pos:start="95:75" pos:end="95:85"><name pos:start="95:75" pos:end="95:85">string_code</name></expr></argument>, <argument pos:start="95:88" pos:end="95:97"><expr pos:start="95:88" pos:end="95:97"><operator pos:start="95:88" pos:end="95:88">&amp;</operator><name pos:start="95:89" pos:end="95:97">char_code</name></expr></argument>, <argument pos:start="95:100" pos:end="95:118"><expr pos:start="95:100" pos:end="95:118"><name pos:start="95:100" pos:end="95:103">size</name> <operator pos:start="95:105" pos:end="95:105">-</operator> <name pos:start="95:107" pos:end="95:118">output_chars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="97:25" pos:end="127:22"><if pos:start="97:25" pos:end="127:22">if <condition pos:start="97:28" pos:end="97:65">(<expr pos:start="97:29" pos:end="97:64"><name pos:start="97:29" pos:end="97:44"><name pos:start="97:29" pos:end="97:31">ret</name> <argument_list type="generic" pos:start="97:33" pos:end="97:44">&lt; <argument pos:start="97:35" pos:end="97:42"><expr pos:start="97:35" pos:end="97:42"><literal type="number" pos:start="97:35" pos:end="97:35">0</literal> <operator pos:start="97:37" pos:end="97:38">||</operator> <name pos:start="97:40" pos:end="97:42">ret</name></expr></argument> &gt;</argument_list></name> <name pos:start="97:46" pos:end="97:49">size</name> <operator pos:start="97:51" pos:end="97:51">-</operator> <name pos:start="97:53" pos:end="97:64">output_chars</name></expr>)</condition> <block pos:start="97:67" pos:end="127:22">{<block_content pos:start="99:29" pos:end="127:22">

                            <expr_stmt pos:start="99:29" pos:end="99:90"><expr pos:start="99:29" pos:end="99:89"><call pos:start="99:29" pos:end="99:89"><name pos:start="99:29" pos:end="99:34">av_log</name><argument_list pos:start="99:35" pos:end="99:89">(<argument pos:start="99:36" pos:end="99:47"><expr pos:start="99:36" pos:end="99:47"><name pos:start="99:36" pos:end="99:47"><name pos:start="99:36" pos:end="99:38">mlz</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:47">context</name></name></expr></argument>, <argument pos:start="99:50" pos:end="99:61"><expr pos:start="99:50" pos:end="99:61"><name pos:start="99:50" pos:end="99:61">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:64" pos:end="99:88"><expr pos:start="99:64" pos:end="99:88"><literal type="string" pos:start="99:64" pos:end="99:88">"output chars overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="103:25" pos:end="103:44"><expr pos:start="103:25" pos:end="103:43"><name pos:start="103:25" pos:end="103:36">output_chars</name> <operator pos:start="103:38" pos:end="103:39">+=</operator> <name pos:start="103:41" pos:end="103:43">ret</name></expr>;</expr_stmt>

                        <if_stmt pos:start="105:25" pos:end="127:22"><if pos:start="105:25" pos:end="127:22">if <condition pos:start="105:28" pos:end="105:70">(<expr pos:start="105:29" pos:end="105:69"><name pos:start="105:29" pos:end="105:40">output_chars</name> <operator pos:start="105:42" pos:end="105:43">&lt;=</operator> <name pos:start="105:45" pos:end="105:48">size</name> <operator pos:start="105:50" pos:end="105:51">&amp;&amp;</operator> <operator pos:start="105:53" pos:end="105:53">!</operator><name pos:start="105:54" pos:end="105:69"><name pos:start="105:54" pos:end="105:56">mlz</name><operator pos:start="105:57" pos:end="105:58">-&gt;</operator><name pos:start="105:59" pos:end="105:69">freeze_flag</name></name></expr>)</condition> <block pos:start="105:72" pos:end="127:22">{<block_content pos:start="107:29" pos:end="127:22">

                            <if_stmt pos:start="107:29" pos:end="127:22"><if pos:start="107:29" pos:end="118:25">if <condition pos:start="107:32" pos:end="107:55">(<expr pos:start="107:33" pos:end="107:54"><name pos:start="107:33" pos:end="107:48">last_string_code</name> <operator pos:start="107:50" pos:end="107:51">!=</operator> <operator pos:start="107:53" pos:end="107:53">-</operator><literal type="number" pos:start="107:54" pos:end="107:54">1</literal></expr>)</condition> <block pos:start="107:57" pos:end="118:25">{<block_content pos:start="109:33" pos:end="115:49">

                                <expr_stmt pos:start="109:33" pos:end="109:102"><expr pos:start="109:33" pos:end="109:101"><call pos:start="109:33" pos:end="109:101"><name pos:start="109:33" pos:end="109:50">set_new_entry_dict</name><argument_list pos:start="109:51" pos:end="109:101">(<argument pos:start="109:52" pos:end="109:55"><expr pos:start="109:52" pos:end="109:55"><name pos:start="109:52" pos:end="109:55">dict</name></expr></argument>, <argument pos:start="109:58" pos:end="109:71"><expr pos:start="109:58" pos:end="109:71"><name pos:start="109:58" pos:end="109:71"><name pos:start="109:58" pos:end="109:60">mlz</name><operator pos:start="109:61" pos:end="109:62">-&gt;</operator><name pos:start="109:63" pos:end="109:71">next_code</name></name></expr></argument>, <argument pos:start="109:74" pos:end="109:89"><expr pos:start="109:74" pos:end="109:89"><name pos:start="109:74" pos:end="109:89">last_string_code</name></expr></argument>, <argument pos:start="109:92" pos:end="109:100"><expr pos:start="109:92" pos:end="109:100"><name pos:start="109:92" pos:end="109:100">char_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





                                <expr_stmt pos:start="115:33" pos:end="115:49"><expr pos:start="115:33" pos:end="115:48"><name pos:start="115:33" pos:end="115:46"><name pos:start="115:33" pos:end="115:35">mlz</name><operator pos:start="115:36" pos:end="115:37">-&gt;</operator><name pos:start="115:38" pos:end="115:46">next_code</name></name><operator pos:start="115:47" pos:end="115:48">++</operator></expr>;</expr_stmt>


                        </block_content>}</block></if> <else pos:start="118:27" pos:end="127:22">else <block pos:start="118:32" pos:end="127:22">{<block_content pos:start="120:29" pos:end="127:22">

                            <break pos:start="120:29" pos:end="120:34">break;</break>



                    <expr_stmt pos:start="124:21" pos:end="124:51"><expr pos:start="124:21" pos:end="124:50"><name pos:start="124:21" pos:end="124:36">last_string_code</name> <operator pos:start="124:38" pos:end="124:38">=</operator> <name pos:start="124:40" pos:end="124:50">string_code</name></expr>;</expr_stmt>


                <break pos:start="127:17" pos:end="127:22">break;</break></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></while></block_content></block></function>



</unit>
