<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1235.c" pos:tabs="8"><function pos:start="1:1" pos:end="413:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name> <parameter_list pos:start="1:31" pos:end="13:53">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:43">ram_size</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:61">vga_ram_size</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><specifier pos:start="3:32" pos:end="3:36">const</specifier> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:54">boot_device</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:72"><decl pos:start="3:57" pos:end="3:72"><type pos:start="3:57" pos:end="3:72"><name pos:start="3:57" pos:end="3:68">DisplayState</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:72">ds</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:55"><decl pos:start="5:32" pos:end="5:55"><type pos:start="5:32" pos:end="5:55"><specifier pos:start="5:32" pos:end="5:36">const</specifier> <name pos:start="5:38" pos:end="5:41">char</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier><modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:55">fd_filename</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:69"><decl pos:start="5:58" pos:end="5:69"><type pos:start="5:58" pos:end="5:69"><name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:69">snapshot</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:58"><decl pos:start="7:32" pos:end="7:58"><type pos:start="7:32" pos:end="7:58"><specifier pos:start="7:32" pos:end="7:36">const</specifier> <name pos:start="7:38" pos:end="7:41">char</name> <modifier pos:start="7:43" pos:end="7:43">*</modifier></type><name pos:start="7:44" pos:end="7:58">kernel_filename</name></decl></parameter>,

                               <parameter pos:start="9:32" pos:end="9:57"><decl pos:start="9:32" pos:end="9:57"><type pos:start="9:32" pos:end="9:57"><specifier pos:start="9:32" pos:end="9:36">const</specifier> <name pos:start="9:38" pos:end="9:41">char</name> <modifier pos:start="9:43" pos:end="9:43">*</modifier></type><name pos:start="9:44" pos:end="9:57">kernel_cmdline</name></decl></parameter>,

                               <parameter pos:start="11:32" pos:end="11:58"><decl pos:start="11:32" pos:end="11:58"><type pos:start="11:32" pos:end="11:58"><specifier pos:start="11:32" pos:end="11:36">const</specifier> <name pos:start="11:38" pos:end="11:41">char</name> <modifier pos:start="11:43" pos:end="11:43">*</modifier></type><name pos:start="11:44" pos:end="11:58">initrd_filename</name></decl></parameter>,

                               <parameter pos:start="13:32" pos:end="13:52"><decl pos:start="13:32" pos:end="13:52"><type pos:start="13:32" pos:end="13:52"><specifier pos:start="13:32" pos:end="13:36">const</specifier> <name pos:start="13:38" pos:end="13:41">char</name> <modifier pos:start="13:43" pos:end="13:43">*</modifier></type><name pos:start="13:44" pos:end="13:52">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="413:1">{<block_content pos:start="17:5" pos:end="411:64">

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">env</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>, <decl pos:start="17:27" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:41"><name pos:start="17:28" pos:end="17:31">envs</name><index pos:start="17:32" pos:end="17:41">[<expr pos:start="17:33" pos:end="17:40"><name pos:start="17:33" pos:end="17:40">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:12">buf</name><index pos:start="19:13" pos:end="19:18">[<expr pos:start="19:14" pos:end="19:17"><literal type="number" pos:start="19:14" pos:end="19:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">pic</name></decl>, <decl pos:start="21:20" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:20" pos:end="21:20">*</modifier><modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">nvram_t</name></type> <name pos:start="23:13" pos:end="23:17">nvram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">m48t59_t</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:20">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">linux_boot</name></decl>, <decl pos:start="27:21" pos:end="27:21"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:29"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">long</name></type> <name pos:start="29:19" pos:end="29:29">bios_offset</name></decl>, <decl pos:start="29:32" pos:end="29:46"><type ref="prev" pos:start="29:5" pos:end="29:17"/><name pos:start="29:32" pos:end="29:46">vga_bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:64"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:12">uint32_t</name></type> <name pos:start="31:14" pos:end="31:24">kernel_base</name></decl>, <decl pos:start="31:27" pos:end="31:37"><type ref="prev" pos:start="31:5" pos:end="31:12"/><name pos:start="31:27" pos:end="31:37">kernel_size</name></decl>, <decl pos:start="31:40" pos:end="31:50"><type ref="prev" pos:start="31:5" pos:end="31:12"/><name pos:start="31:40" pos:end="31:50">initrd_base</name></decl>, <decl pos:start="31:53" pos:end="31:63"><type ref="prev" pos:start="31:5" pos:end="31:12"/><name pos:start="31:53" pos:end="31:63">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:10">PCIBus</name> <modifier pos:start="33:12" pos:end="33:12">*</modifier></type><name pos:start="33:13" pos:end="33:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:25"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:19">MacIONVRAMState</name> <modifier pos:start="35:21" pos:end="35:21">*</modifier></type><name pos:start="35:22" pos:end="35:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:33"><decl pos:start="37:5" pos:end="37:21"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:21">vga_bios_size</name></decl>, <decl pos:start="37:24" pos:end="37:32"><type ref="prev" pos:start="37:5" pos:end="37:7"/><name pos:start="37:24" pos:end="37:32">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:24"><decl pos:start="39:5" pos:end="39:23"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:23">dummy_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:72"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:21">pic_mem_index</name></decl>, <decl pos:start="41:24" pos:end="41:38"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:24" pos:end="41:38">nvram_mem_index</name></decl>, <decl pos:start="41:41" pos:end="41:55"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:41" pos:end="41:55">dbdma_mem_index</name></decl>, <decl pos:start="41:58" pos:end="41:71"><type ref="prev" pos:start="41:5" pos:end="41:7"/><name pos:start="41:58" pos:end="41:71">cuda_mem_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:41"><decl pos:start="43:5" pos:end="43:40"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:23">ppc_boot_device</name> <init pos:start="43:25" pos:end="43:40">= <expr pos:start="43:27" pos:end="43:40"><name pos:start="43:27" pos:end="43:40"><name pos:start="43:27" pos:end="43:37">boot_device</name><index pos:start="43:38" pos:end="43:40">[<expr pos:start="43:39" pos:end="43:39"><literal type="number" pos:start="43:39" pos:end="43:39">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:14">linux_boot</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:33">kernel_filename</name> <operator pos:start="47:35" pos:end="47:36">!=</operator> <name pos:start="47:38" pos:end="47:41">NULL</name><operator pos:start="47:42" pos:end="47:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:19">/* init CPUs */</comment>

    <if_stmt pos:start="53:5" pos:end="55:30"><if pos:start="53:5" pos:end="55:30">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17">cpu_model</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:30"><block_content pos:start="55:9" pos:end="55:30">

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:17">cpu_model</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="string" pos:start="55:21" pos:end="55:29">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="57:5" pos:end="81:5">for <control pos:start="57:9" pos:end="57:34">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:29"><expr pos:start="57:17" pos:end="57:28"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:28">smp_cpus</name></expr>;</condition> <incr pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:31">i</name><operator pos:start="57:32" pos:end="57:33">++</operator></expr></incr>)</control> <block pos:start="57:36" pos:end="81:5">{<block_content pos:start="59:9" pos:end="79:22">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:11">env</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:33"><name pos:start="59:15" pos:end="59:22">cpu_init</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:17">(<expr pos:start="61:13" pos:end="61:16"><operator pos:start="61:13" pos:end="61:13">!</operator><name pos:start="61:14" pos:end="61:16">env</name></expr>)</condition> <block pos:start="61:19" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:20">

            <expr_stmt pos:start="63:13" pos:end="63:71"><expr pos:start="63:13" pos:end="63:70"><call pos:start="63:13" pos:end="63:70"><name pos:start="63:13" pos:end="63:19">fprintf</name><argument_list pos:start="63:20" pos:end="63:70">(<argument pos:start="63:21" pos:end="63:26"><expr pos:start="63:21" pos:end="63:26"><name pos:start="63:21" pos:end="63:26">stderr</name></expr></argument>, <argument pos:start="63:29" pos:end="63:69"><expr pos:start="63:29" pos:end="63:69"><literal type="string" pos:start="63:29" pos:end="63:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:20"><expr pos:start="65:13" pos:end="65:19"><call pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:16">exit</name><argument_list pos:start="65:17" pos:end="65:19">(<argument pos:start="65:18" pos:end="65:18"><expr pos:start="65:18" pos:end="65:18"><literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="69:9" pos:end="69:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:54"><expr pos:start="71:9" pos:end="71:53"><call pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:23">cpu_ppc_tb_init</name><argument_list pos:start="71:24" pos:end="71:53">(<argument pos:start="71:25" pos:end="71:27"><expr pos:start="71:25" pos:end="71:27"><name pos:start="71:25" pos:end="71:27">env</name></expr></argument>, <argument pos:start="71:30" pos:end="71:52"><expr pos:start="71:30" pos:end="71:52"><literal type="number" pos:start="71:30" pos:end="71:34">100UL</literal> <operator pos:start="71:36" pos:end="71:36">*</operator> <literal type="number" pos:start="71:38" pos:end="71:43">1000UL</literal> <operator pos:start="71:45" pos:end="71:45">*</operator> <literal type="number" pos:start="71:47" pos:end="71:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:11">env</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:21">osi_call</name></name> <operator pos:start="73:23" pos:end="73:23">=</operator> <name pos:start="73:25" pos:end="73:36">vga_osi_call</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:49"><expr pos:start="75:9" pos:end="75:48"><call pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:27">qemu_register_reset</name><argument_list pos:start="75:28" pos:end="75:48">(<argument pos:start="75:29" pos:end="75:42"><expr pos:start="75:29" pos:end="75:42"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:42">cpu_ppc_reset</name></expr></argument>, <argument pos:start="75:45" pos:end="75:47"><expr pos:start="75:45" pos:end="75:47"><name pos:start="75:45" pos:end="75:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:62"><expr pos:start="77:9" pos:end="77:61"><call pos:start="77:9" pos:end="77:61"><name pos:start="77:9" pos:end="77:23">register_savevm</name><argument_list pos:start="77:24" pos:end="77:61">(<argument pos:start="77:25" pos:end="77:29"><expr pos:start="77:25" pos:end="77:29"><literal type="string" pos:start="77:25" pos:end="77:29">"cpu"</literal></expr></argument>, <argument pos:start="77:32" pos:end="77:32"><expr pos:start="77:32" pos:end="77:32"><literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:35"><expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">3</literal></expr></argument>, <argument pos:start="77:38" pos:end="77:45"><expr pos:start="77:38" pos:end="77:45"><name pos:start="77:38" pos:end="77:45">cpu_save</name></expr></argument>, <argument pos:start="77:48" pos:end="77:55"><expr pos:start="77:48" pos:end="77:55"><name pos:start="77:48" pos:end="77:55">cpu_load</name></expr></argument>, <argument pos:start="77:58" pos:end="77:60"><expr pos:start="77:58" pos:end="77:60"><name pos:start="77:58" pos:end="77:60">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">envs</name><index pos:start="79:13" pos:end="79:15">[<expr pos:start="79:14" pos:end="79:14"><name pos:start="79:14" pos:end="79:14">i</name></expr>]</index></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:21">env</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:30">(<expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:16"><name pos:start="83:9" pos:end="83:11">env</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:16">nip</name></name> <operator pos:start="83:18" pos:end="83:18">&lt;</operator> <literal type="number" pos:start="83:20" pos:end="83:29">0xFFF80000</literal></expr>)</condition> <block pos:start="83:32" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:71">

        <comment type="block" pos:start="85:9" pos:end="91:11">/* Special test for PowerPC 601:

         * the boot vector is at 0xFFF00100, then we need a 1MB BIOS.

         * But the NVRAM is located at 0xFFF04000...

         */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:71"><expr pos:start="93:9" pos:end="93:70"><call pos:start="93:9" pos:end="93:70"><name pos:start="93:9" pos:end="93:17">cpu_abort</name><argument_list pos:start="93:18" pos:end="93:70">(<argument pos:start="93:19" pos:end="93:21"><expr pos:start="93:19" pos:end="93:21"><name pos:start="93:19" pos:end="93:21">env</name></expr></argument>, <argument pos:start="93:24" pos:end="93:69"><expr pos:start="93:24" pos:end="93:69"><literal type="string" pos:start="93:24" pos:end="93:69">"G3BW Mac hardware can not handle 1 MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:58"><expr pos:start="101:5" pos:end="101:57"><call pos:start="101:5" pos:end="101:57"><name pos:start="101:5" pos:end="101:32">cpu_register_physical_memory</name><argument_list pos:start="101:33" pos:end="101:57">(<argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><literal type="number" pos:start="101:34" pos:end="101:34">0</literal></expr></argument>, <argument pos:start="101:37" pos:end="101:44"><expr pos:start="101:37" pos:end="101:44"><name pos:start="101:37" pos:end="101:44">ram_size</name></expr></argument>, <argument pos:start="101:47" pos:end="101:56"><expr pos:start="101:47" pos:end="101:56"><name pos:start="101:47" pos:end="101:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:42"><expr pos:start="107:5" pos:end="107:41"><name pos:start="107:5" pos:end="107:15">bios_offset</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:26">ram_size</name> <operator pos:start="107:28" pos:end="107:28">+</operator> <name pos:start="107:30" pos:end="107:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="111:34"><if pos:start="109:5" pos:end="111:34">if <condition pos:start="109:8" pos:end="109:26">(<expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:17">bios_name</name> <operator pos:start="109:19" pos:end="109:20">==</operator> <name pos:start="109:22" pos:end="109:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:34"><block_content pos:start="111:9" pos:end="111:34">

        <expr_stmt pos:start="111:9" pos:end="111:34"><expr pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:17">bios_name</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:61"><expr pos:start="113:5" pos:end="113:60"><call pos:start="113:5" pos:end="113:60"><name pos:start="113:5" pos:end="113:12">snprintf</name><argument_list pos:start="113:13" pos:end="113:60">(<argument pos:start="113:14" pos:end="113:16"><expr pos:start="113:14" pos:end="113:16"><name pos:start="113:14" pos:end="113:16">buf</name></expr></argument>, <argument pos:start="113:19" pos:end="113:29"><expr pos:start="113:19" pos:end="113:29"><sizeof pos:start="113:19" pos:end="113:29">sizeof<argument_list pos:start="113:25" pos:end="113:29">(<argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:32" pos:end="113:38"><expr pos:start="113:32" pos:end="113:38"><literal type="string" pos:start="113:32" pos:end="113:38">"%s/%s"</literal></expr></argument>, <argument pos:start="113:41" pos:end="113:48"><expr pos:start="113:41" pos:end="113:48"><name pos:start="113:41" pos:end="113:48">bios_dir</name></expr></argument>, <argument pos:start="113:51" pos:end="113:59"><expr pos:start="113:51" pos:end="113:59"><name pos:start="113:51" pos:end="113:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:61"><expr pos:start="115:5" pos:end="115:60"><name pos:start="115:5" pos:end="115:13">bios_size</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <call pos:start="115:17" pos:end="115:60"><name pos:start="115:17" pos:end="115:26">load_image</name><argument_list pos:start="115:27" pos:end="115:60">(<argument pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:30">buf</name></expr></argument>, <argument pos:start="115:33" pos:end="115:59"><expr pos:start="115:33" pos:end="115:59"><name pos:start="115:33" pos:end="115:45">phys_ram_base</name> <operator pos:start="115:47" pos:end="115:47">+</operator> <name pos:start="115:49" pos:end="115:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:47">(<expr pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:17">bios_size</name> <argument_list type="generic" pos:start="117:19" pos:end="117:36">&lt; <argument pos:start="117:21" pos:end="117:34"><expr pos:start="117:21" pos:end="117:34"><literal type="number" pos:start="117:21" pos:end="117:21">0</literal> <operator pos:start="117:23" pos:end="117:24">||</operator> <name pos:start="117:26" pos:end="117:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="117:38" pos:end="117:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="117:49" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:16">

        <expr_stmt pos:start="119:9" pos:end="119:72"><expr pos:start="119:9" pos:end="119:71"><call pos:start="119:9" pos:end="119:71"><name pos:start="119:9" pos:end="119:17">cpu_abort</name><argument_list pos:start="119:18" pos:end="119:71">(<argument pos:start="119:19" pos:end="119:21"><expr pos:start="119:19" pos:end="119:21"><name pos:start="119:19" pos:end="119:21">env</name></expr></argument>, <argument pos:start="119:24" pos:end="119:65"><expr pos:start="119:24" pos:end="119:65"><literal type="string" pos:start="119:24" pos:end="119:65">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="119:68" pos:end="119:70"><expr pos:start="119:68" pos:end="119:70"><name pos:start="119:68" pos:end="119:70">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:16"><expr pos:start="121:9" pos:end="121:15"><call pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:12">exit</name><argument_list pos:start="121:13" pos:end="121:15">(<argument pos:start="121:14" pos:end="121:14"><expr pos:start="121:14" pos:end="121:14"><literal type="number" pos:start="121:14" pos:end="121:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:45"><expr pos:start="125:5" pos:end="125:44"><name pos:start="125:5" pos:end="125:13">bios_size</name> <operator pos:start="125:15" pos:end="125:15">=</operator> <operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:26">bios_size</name> <operator pos:start="125:28" pos:end="125:28">+</operator> <literal type="number" pos:start="125:30" pos:end="125:34">0xfff</literal><operator pos:start="125:35" pos:end="125:35">)</operator> <operator pos:start="125:37" pos:end="125:37">&amp;</operator> <operator pos:start="125:39" pos:end="125:39">~</operator><literal type="number" pos:start="125:40" pos:end="125:44">0xfff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:31">(<expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:17">bios_size</name> <operator pos:start="127:19" pos:end="127:19">&gt;</operator> <literal type="number" pos:start="127:21" pos:end="127:30">0x00080000</literal></expr>)</condition> <block pos:start="127:33" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:71">

        <comment type="block" pos:start="129:9" pos:end="129:78">/* As the NVRAM is located at 0xFFF04000, we cannot use 1 MB BIOSes */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:71"><expr pos:start="131:9" pos:end="131:70"><call pos:start="131:9" pos:end="131:70"><name pos:start="131:9" pos:end="131:17">cpu_abort</name><argument_list pos:start="131:18" pos:end="131:70">(<argument pos:start="131:19" pos:end="131:21"><expr pos:start="131:19" pos:end="131:21"><name pos:start="131:19" pos:end="131:21">env</name></expr></argument>, <argument pos:start="131:24" pos:end="131:69"><expr pos:start="131:24" pos:end="131:69"><literal type="string" pos:start="131:24" pos:end="131:69">"G3BW Mac hardware can not handle 1 MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="137:70"><expr pos:start="135:5" pos:end="137:69"><call pos:start="135:5" pos:end="137:69"><name pos:start="135:5" pos:end="135:32">cpu_register_physical_memory</name><argument_list pos:start="135:33" pos:end="137:69">(<argument pos:start="135:34" pos:end="135:55"><expr pos:start="135:34" pos:end="135:55"><operator pos:start="135:34" pos:end="135:34">(</operator><name pos:start="135:35" pos:end="135:42">uint32_t</name><operator pos:start="135:43" pos:end="135:43">)</operator><operator pos:start="135:44" pos:end="135:44">(</operator><operator pos:start="135:45" pos:end="135:45">-</operator><name pos:start="135:46" pos:end="135:54">bios_size</name><operator pos:start="135:55" pos:end="135:55">)</operator></expr></argument>,

                                 <argument pos:start="137:34" pos:end="137:42"><expr pos:start="137:34" pos:end="137:42"><name pos:start="137:34" pos:end="137:42">bios_size</name></expr></argument>, <argument pos:start="137:45" pos:end="137:68"><expr pos:start="137:45" pos:end="137:68"><name pos:start="137:45" pos:end="137:55">bios_offset</name> <operator pos:start="137:57" pos:end="137:57">|</operator> <name pos:start="137:59" pos:end="137:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:36">/* allocate and load VGA BIOS */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:46"><expr pos:start="143:5" pos:end="143:45"><name pos:start="143:5" pos:end="143:19">vga_bios_offset</name> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:33">bios_offset</name> <operator pos:start="143:35" pos:end="143:35">+</operator> <name pos:start="143:37" pos:end="143:45">bios_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:68"><expr pos:start="145:5" pos:end="145:67"><call pos:start="145:5" pos:end="145:67"><name pos:start="145:5" pos:end="145:12">snprintf</name><argument_list pos:start="145:13" pos:end="145:67">(<argument pos:start="145:14" pos:end="145:16"><expr pos:start="145:14" pos:end="145:16"><name pos:start="145:14" pos:end="145:16">buf</name></expr></argument>, <argument pos:start="145:19" pos:end="145:29"><expr pos:start="145:19" pos:end="145:29"><sizeof pos:start="145:19" pos:end="145:29">sizeof<argument_list pos:start="145:25" pos:end="145:29">(<argument pos:start="145:26" pos:end="145:28"><expr pos:start="145:26" pos:end="145:28"><name pos:start="145:26" pos:end="145:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="145:32" pos:end="145:38"><expr pos:start="145:32" pos:end="145:38"><literal type="string" pos:start="145:32" pos:end="145:38">"%s/%s"</literal></expr></argument>, <argument pos:start="145:41" pos:end="145:48"><expr pos:start="145:41" pos:end="145:48"><name pos:start="145:41" pos:end="145:48">bios_dir</name></expr></argument>, <argument pos:start="145:51" pos:end="145:66"><expr pos:start="145:51" pos:end="145:66"><name pos:start="145:51" pos:end="145:66">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:73"><expr pos:start="147:5" pos:end="147:72"><name pos:start="147:5" pos:end="147:17">vga_bios_size</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <call pos:start="147:21" pos:end="147:72"><name pos:start="147:21" pos:end="147:30">load_image</name><argument_list pos:start="147:31" pos:end="147:72">(<argument pos:start="147:32" pos:end="147:34"><expr pos:start="147:32" pos:end="147:34"><name pos:start="147:32" pos:end="147:34">buf</name></expr></argument>, <argument pos:start="147:37" pos:end="147:71"><expr pos:start="147:37" pos:end="147:71"><name pos:start="147:37" pos:end="147:49">phys_ram_base</name> <operator pos:start="147:51" pos:end="147:51">+</operator> <name pos:start="147:53" pos:end="147:67">vga_bios_offset</name> <operator pos:start="147:69" pos:end="147:69">+</operator> <literal type="number" pos:start="147:71" pos:end="147:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="177:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="149:26">(<expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:21">vga_bios_size</name> <operator pos:start="149:23" pos:end="149:23">&lt;</operator> <literal type="number" pos:start="149:25" pos:end="149:25">0</literal></expr>)</condition> <block pos:start="149:28" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:26">

        <comment type="block" pos:start="151:9" pos:end="151:54">/* if no bios is present, we can still work */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:78"><expr pos:start="153:9" pos:end="153:77"><call pos:start="153:9" pos:end="153:77"><name pos:start="153:9" pos:end="153:15">fprintf</name><argument_list pos:start="153:16" pos:end="153:77">(<argument pos:start="153:17" pos:end="153:22"><expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">stderr</name></expr></argument>, <argument pos:start="153:25" pos:end="153:71"><expr pos:start="153:25" pos:end="153:71"><literal type="string" pos:start="153:25" pos:end="153:71">"qemu: warning: could not load VGA bios '%s'\n"</literal></expr></argument>, <argument pos:start="153:74" pos:end="153:76"><expr pos:start="153:74" pos:end="153:76"><name pos:start="153:74" pos:end="153:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:21">vga_bios_size</name> <operator pos:start="155:23" pos:end="155:23">=</operator> <literal type="number" pos:start="155:25" pos:end="155:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="157:7" pos:end="177:5">else <block pos:start="157:12" pos:end="177:5">{<block_content pos:start="163:9" pos:end="175:27">

        <comment type="block" pos:start="159:9" pos:end="161:22">/* set a specific header (XXX: find real Apple format for NDRV

           drivers) */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:45"><expr pos:start="163:9" pos:end="163:44"><name pos:start="163:9" pos:end="163:38"><name pos:start="163:9" pos:end="163:21">phys_ram_base</name><index pos:start="163:22" pos:end="163:38">[<expr pos:start="163:23" pos:end="163:37"><name pos:start="163:23" pos:end="163:37">vga_bios_offset</name></expr>]</index></name> <operator pos:start="163:40" pos:end="163:40">=</operator> <literal type="char" pos:start="163:42" pos:end="163:44">'N'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:49"><expr pos:start="165:9" pos:end="165:48"><name pos:start="165:9" pos:end="165:42"><name pos:start="165:9" pos:end="165:21">phys_ram_base</name><index pos:start="165:22" pos:end="165:42">[<expr pos:start="165:23" pos:end="165:41"><name pos:start="165:23" pos:end="165:37">vga_bios_offset</name> <operator pos:start="165:39" pos:end="165:39">+</operator> <literal type="number" pos:start="165:41" pos:end="165:41">1</literal></expr>]</index></name> <operator pos:start="165:44" pos:end="165:44">=</operator> <literal type="char" pos:start="165:46" pos:end="165:48">'D'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:49"><expr pos:start="167:9" pos:end="167:48"><name pos:start="167:9" pos:end="167:42"><name pos:start="167:9" pos:end="167:21">phys_ram_base</name><index pos:start="167:22" pos:end="167:42">[<expr pos:start="167:23" pos:end="167:41"><name pos:start="167:23" pos:end="167:37">vga_bios_offset</name> <operator pos:start="167:39" pos:end="167:39">+</operator> <literal type="number" pos:start="167:41" pos:end="167:41">2</literal></expr>]</index></name> <operator pos:start="167:44" pos:end="167:44">=</operator> <literal type="char" pos:start="167:46" pos:end="167:48">'R'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:49"><expr pos:start="169:9" pos:end="169:48"><name pos:start="169:9" pos:end="169:42"><name pos:start="169:9" pos:end="169:21">phys_ram_base</name><index pos:start="169:22" pos:end="169:42">[<expr pos:start="169:23" pos:end="169:41"><name pos:start="169:23" pos:end="169:37">vga_bios_offset</name> <operator pos:start="169:39" pos:end="169:39">+</operator> <literal type="number" pos:start="169:41" pos:end="169:41">3</literal></expr>]</index></name> <operator pos:start="169:44" pos:end="169:44">=</operator> <literal type="char" pos:start="169:46" pos:end="169:48">'V'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:36"><expr pos:start="171:9" pos:end="173:35"><call pos:start="171:9" pos:end="173:35"><name pos:start="171:9" pos:end="171:20">cpu_to_be32w</name><argument_list pos:start="171:21" pos:end="173:35">(<argument pos:start="171:22" pos:end="171:70"><expr pos:start="171:22" pos:end="171:70"><operator pos:start="171:22" pos:end="171:22">(</operator><name pos:start="171:23" pos:end="171:30">uint32_t</name> <operator pos:start="171:32" pos:end="171:32">*</operator><operator pos:start="171:33" pos:end="171:33">)</operator><operator pos:start="171:34" pos:end="171:34">(</operator><name pos:start="171:35" pos:end="171:47">phys_ram_base</name> <operator pos:start="171:49" pos:end="171:49">+</operator> <name pos:start="171:51" pos:end="171:65">vga_bios_offset</name> <operator pos:start="171:67" pos:end="171:67">+</operator> <literal type="number" pos:start="171:69" pos:end="171:69">4</literal><operator pos:start="171:70" pos:end="171:70">)</operator></expr></argument>,

                     <argument pos:start="173:22" pos:end="173:34"><expr pos:start="173:22" pos:end="173:34"><name pos:start="173:22" pos:end="173:34">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:27"><expr pos:start="175:9" pos:end="175:26"><name pos:start="175:9" pos:end="175:21">vga_bios_size</name> <operator pos:start="175:23" pos:end="175:24">+=</operator> <literal type="number" pos:start="175:26" pos:end="175:26">8</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:53"><expr pos:start="179:5" pos:end="179:52"><name pos:start="179:5" pos:end="179:17">vga_bios_size</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <operator pos:start="179:21" pos:end="179:21">(</operator><name pos:start="179:22" pos:end="179:34">vga_bios_size</name> <operator pos:start="179:36" pos:end="179:36">+</operator> <literal type="number" pos:start="179:38" pos:end="179:42">0xfff</literal><operator pos:start="179:43" pos:end="179:43">)</operator> <operator pos:start="179:45" pos:end="179:45">&amp;</operator> <operator pos:start="179:47" pos:end="179:47">~</operator><literal type="number" pos:start="179:48" pos:end="179:52">0xfff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="183:5" pos:end="241:5"><if pos:start="183:5" pos:end="231:5">if <condition pos:start="183:8" pos:end="183:19">(<expr pos:start="183:9" pos:end="183:18"><name pos:start="183:9" pos:end="183:18">linux_boot</name></expr>)</condition> <block pos:start="183:21" pos:end="231:5">{<block_content pos:start="185:9" pos:end="229:30">

        <expr_stmt pos:start="185:9" pos:end="185:39"><expr pos:start="185:9" pos:end="185:38"><name pos:start="185:9" pos:end="185:19">kernel_base</name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:79"><expr pos:start="189:9" pos:end="189:78"><name pos:start="189:9" pos:end="189:19">kernel_size</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="189:78"><name pos:start="189:23" pos:end="189:32">load_image</name><argument_list pos:start="189:33" pos:end="189:78">(<argument pos:start="189:34" pos:end="189:48"><expr pos:start="189:34" pos:end="189:48"><name pos:start="189:34" pos:end="189:48">kernel_filename</name></expr></argument>, <argument pos:start="189:51" pos:end="189:77"><expr pos:start="189:51" pos:end="189:77"><name pos:start="189:51" pos:end="189:63">phys_ram_base</name> <operator pos:start="189:65" pos:end="189:65">+</operator> <name pos:start="189:67" pos:end="189:77">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="199:9"><if pos:start="191:9" pos:end="199:9">if <condition pos:start="191:12" pos:end="191:28">(<expr pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:23">kernel_size</name> <operator pos:start="191:25" pos:end="191:25">&lt;</operator> <literal type="number" pos:start="191:27" pos:end="191:27">0</literal></expr>)</condition> <block pos:start="191:30" pos:end="199:9">{<block_content pos:start="193:13" pos:end="197:20">

            <expr_stmt pos:start="193:13" pos:end="195:39"><expr pos:start="193:13" pos:end="195:38"><call pos:start="193:13" pos:end="195:38"><name pos:start="193:13" pos:end="193:21">cpu_abort</name><argument_list pos:start="193:22" pos:end="195:38">(<argument pos:start="193:23" pos:end="193:25"><expr pos:start="193:23" pos:end="193:25"><name pos:start="193:23" pos:end="193:25">env</name></expr></argument>, <argument pos:start="193:28" pos:end="193:63"><expr pos:start="193:28" pos:end="193:63"><literal type="string" pos:start="193:28" pos:end="193:63">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="195:23" pos:end="195:37"><expr pos:start="195:23" pos:end="195:37"><name pos:start="195:23" pos:end="195:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:20"><expr pos:start="197:13" pos:end="197:19"><call pos:start="197:13" pos:end="197:19"><name pos:start="197:13" pos:end="197:16">exit</name><argument_list pos:start="197:17" pos:end="197:19">(<argument pos:start="197:18" pos:end="197:18"><expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="201:9" pos:end="201:25">/* load initrd */</comment>

        <if_stmt pos:start="203:9" pos:end="227:9"><if pos:start="203:9" pos:end="221:9">if <condition pos:start="203:12" pos:end="203:28">(<expr pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:27">initrd_filename</name></expr>)</condition> <block pos:start="203:30" pos:end="221:9">{<block_content pos:start="205:13" pos:end="219:13">

            <expr_stmt pos:start="205:13" pos:end="205:43"><expr pos:start="205:13" pos:end="205:42"><name pos:start="205:13" pos:end="205:23">initrd_base</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="209:66"><expr pos:start="207:13" pos:end="209:65"><name pos:start="207:13" pos:end="207:23">initrd_size</name> <operator pos:start="207:25" pos:end="207:25">=</operator> <call pos:start="207:27" pos:end="209:65"><name pos:start="207:27" pos:end="207:36">load_image</name><argument_list pos:start="207:37" pos:end="209:65">(<argument pos:start="207:38" pos:end="207:52"><expr pos:start="207:38" pos:end="207:52"><name pos:start="207:38" pos:end="207:52">initrd_filename</name></expr></argument>,

                                     <argument pos:start="209:38" pos:end="209:64"><expr pos:start="209:38" pos:end="209:64"><name pos:start="209:38" pos:end="209:50">phys_ram_base</name> <operator pos:start="209:52" pos:end="209:52">+</operator> <name pos:start="209:54" pos:end="209:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="219:13"><if pos:start="211:13" pos:end="219:13">if <condition pos:start="211:16" pos:end="211:32">(<expr pos:start="211:17" pos:end="211:31"><name pos:start="211:17" pos:end="211:27">initrd_size</name> <operator pos:start="211:29" pos:end="211:29">&lt;</operator> <literal type="number" pos:start="211:31" pos:end="211:31">0</literal></expr>)</condition> <block pos:start="211:34" pos:end="219:13">{<block_content pos:start="213:17" pos:end="217:24">

                <expr_stmt pos:start="213:17" pos:end="215:43"><expr pos:start="213:17" pos:end="215:42"><call pos:start="213:17" pos:end="215:42"><name pos:start="213:17" pos:end="213:25">cpu_abort</name><argument_list pos:start="213:26" pos:end="215:42">(<argument pos:start="213:27" pos:end="213:29"><expr pos:start="213:27" pos:end="213:29"><name pos:start="213:27" pos:end="213:29">env</name></expr></argument>, <argument pos:start="213:32" pos:end="213:77"><expr pos:start="213:32" pos:end="213:77"><literal type="string" pos:start="213:32" pos:end="213:77">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="215:27" pos:end="215:41"><expr pos:start="215:27" pos:end="215:41"><name pos:start="215:27" pos:end="215:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:24"><expr pos:start="217:17" pos:end="217:23"><call pos:start="217:17" pos:end="217:23"><name pos:start="217:17" pos:end="217:20">exit</name><argument_list pos:start="217:21" pos:end="217:23">(<argument pos:start="217:22" pos:end="217:22"><expr pos:start="217:22" pos:end="217:22"><literal type="number" pos:start="217:22" pos:end="217:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="221:11" pos:end="227:9">else <block pos:start="221:16" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:28">

            <expr_stmt pos:start="223:13" pos:end="223:28"><expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:23">initrd_base</name> <operator pos:start="223:25" pos:end="223:25">=</operator> <literal type="number" pos:start="223:27" pos:end="223:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:28"><expr pos:start="225:13" pos:end="225:27"><name pos:start="225:13" pos:end="225:23">initrd_size</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <literal type="number" pos:start="225:27" pos:end="225:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:30"><expr pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:23">ppc_boot_device</name> <operator pos:start="229:25" pos:end="229:25">=</operator> <literal type="char" pos:start="229:27" pos:end="229:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="231:7" pos:end="241:5">else <block pos:start="231:12" pos:end="241:5">{<block_content pos:start="233:9" pos:end="239:24">

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:19">kernel_base</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:24"><expr pos:start="235:9" pos:end="235:23"><name pos:start="235:9" pos:end="235:19">kernel_size</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <literal type="number" pos:start="235:23" pos:end="235:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:24"><expr pos:start="237:9" pos:end="237:23"><name pos:start="237:9" pos:end="237:19">initrd_base</name> <operator pos:start="237:21" pos:end="237:21">=</operator> <literal type="number" pos:start="237:23" pos:end="237:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:24"><expr pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:19">initrd_size</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <literal type="number" pos:start="239:23" pos:end="239:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:30"><expr pos:start="245:5" pos:end="245:29"><name pos:start="245:5" pos:end="245:16">isa_mem_base</name> <operator pos:start="245:18" pos:end="245:18">=</operator> <literal type="number" pos:start="245:20" pos:end="245:29">0x80000000</literal></expr>;</expr_stmt>

    

    <comment type="block" pos:start="249:5" pos:end="249:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:42"><expr pos:start="251:5" pos:end="251:41"><call pos:start="251:5" pos:end="251:41"><name pos:start="251:5" pos:end="251:17">isa_mmio_init</name><argument_list pos:start="251:18" pos:end="251:41">(<argument pos:start="251:19" pos:end="251:28"><expr pos:start="251:19" pos:end="251:28"><literal type="number" pos:start="251:19" pos:end="251:28">0xfe000000</literal></expr></argument>, <argument pos:start="251:31" pos:end="251:40"><expr pos:start="251:31" pos:end="251:40"><literal type="number" pos:start="251:31" pos:end="251:40">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="255:5" pos:end="255:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:64"><expr pos:start="257:5" pos:end="257:63"><name pos:start="257:5" pos:end="257:17">heathrow_irqs</name> <operator pos:start="257:19" pos:end="257:19">=</operator> <call pos:start="257:21" pos:end="257:63"><name pos:start="257:21" pos:end="257:32">qemu_mallocz</name><argument_list pos:start="257:33" pos:end="257:63">(<argument pos:start="257:34" pos:end="257:62"><expr pos:start="257:34" pos:end="257:62"><name pos:start="257:34" pos:end="257:41">smp_cpus</name> <operator pos:start="257:43" pos:end="257:43">*</operator> <sizeof pos:start="257:45" pos:end="257:62">sizeof<argument_list pos:start="257:51" pos:end="257:62">(<argument pos:start="257:52" pos:end="257:61"><expr pos:start="257:52" pos:end="257:61"><name pos:start="257:52" pos:end="257:59">qemu_irq</name> <operator pos:start="257:61" pos:end="257:61">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="261:54"><expr pos:start="259:5" pos:end="261:53"><name pos:start="259:5" pos:end="259:20"><name pos:start="259:5" pos:end="259:17">heathrow_irqs</name><index pos:start="259:18" pos:end="259:20">[<expr pos:start="259:19" pos:end="259:19"><literal type="number" pos:start="259:19" pos:end="259:19">0</literal></expr>]</index></name> <operator pos:start="259:22" pos:end="259:22">=</operator>

        <call pos:start="261:9" pos:end="261:53"><name pos:start="261:9" pos:end="261:20">qemu_mallocz</name><argument_list pos:start="261:21" pos:end="261:53">(<argument pos:start="261:22" pos:end="261:52"><expr pos:start="261:22" pos:end="261:52"><name pos:start="261:22" pos:end="261:29">smp_cpus</name> <operator pos:start="261:31" pos:end="261:31">*</operator> <sizeof pos:start="261:33" pos:end="261:48">sizeof<argument_list pos:start="261:39" pos:end="261:48">(<argument pos:start="261:40" pos:end="261:47"><expr pos:start="261:40" pos:end="261:47"><name pos:start="261:40" pos:end="261:47">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="261:50" pos:end="261:50">*</operator> <literal type="number" pos:start="261:52" pos:end="261:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="263:5" pos:end="263:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="265:5" pos:end="287:5">for <control pos:start="265:9" pos:end="265:34">(<init pos:start="265:10" pos:end="265:15"><expr pos:start="265:10" pos:end="265:14"><name pos:start="265:10" pos:end="265:10">i</name> <operator pos:start="265:12" pos:end="265:12">=</operator> <literal type="number" pos:start="265:14" pos:end="265:14">0</literal></expr>;</init> <condition pos:start="265:17" pos:end="265:29"><expr pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:17">i</name> <operator pos:start="265:19" pos:end="265:19">&lt;</operator> <name pos:start="265:21" pos:end="265:28">smp_cpus</name></expr>;</condition> <incr pos:start="265:31" pos:end="265:33"><expr pos:start="265:31" pos:end="265:33"><name pos:start="265:31" pos:end="265:31">i</name><operator pos:start="265:32" pos:end="265:33">++</operator></expr></incr>)</control> <block pos:start="265:36" pos:end="287:5">{<block_content pos:start="267:9" pos:end="285:9">

        <switch pos:start="267:9" pos:end="285:9">switch <condition pos:start="267:16" pos:end="267:31">(<expr pos:start="267:17" pos:end="267:30"><call pos:start="267:17" pos:end="267:30"><name pos:start="267:17" pos:end="267:25">PPC_INPUT</name><argument_list pos:start="267:26" pos:end="267:30">(<argument pos:start="267:27" pos:end="267:29"><expr pos:start="267:27" pos:end="267:29"><name pos:start="267:27" pos:end="267:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="267:33" pos:end="285:9">{<block_content pos:start="269:9" pos:end="283:20">

        <case pos:start="269:9" pos:end="269:33">case <expr pos:start="269:14" pos:end="269:32"><name pos:start="269:14" pos:end="269:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="271:13" pos:end="271:58"><expr pos:start="271:13" pos:end="271:57"><name pos:start="271:13" pos:end="271:28"><name pos:start="271:13" pos:end="271:25">heathrow_irqs</name><index pos:start="271:26" pos:end="271:28">[<expr pos:start="271:27" pos:end="271:27"><name pos:start="271:27" pos:end="271:27">i</name></expr>]</index></name> <operator pos:start="271:30" pos:end="271:30">=</operator> <name pos:start="271:32" pos:end="271:47"><name pos:start="271:32" pos:end="271:44">heathrow_irqs</name><index pos:start="271:45" pos:end="271:47">[<expr pos:start="271:46" pos:end="271:46"><literal type="number" pos:start="271:46" pos:end="271:46">0</literal></expr>]</index></name> <operator pos:start="271:49" pos:end="271:49">+</operator> <operator pos:start="271:51" pos:end="271:51">(</operator><name pos:start="271:52" pos:end="271:52">i</name> <operator pos:start="271:54" pos:end="271:54">*</operator> <literal type="number" pos:start="271:56" pos:end="271:56">1</literal><operator pos:start="271:57" pos:end="271:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="275:64"><expr pos:start="273:13" pos:end="275:63"><name pos:start="273:13" pos:end="273:31"><name pos:start="273:13" pos:end="273:25">heathrow_irqs</name><index pos:start="273:26" pos:end="273:28">[<expr pos:start="273:27" pos:end="273:27"><name pos:start="273:27" pos:end="273:27">i</name></expr>]</index><index pos:start="273:29" pos:end="273:31">[<expr pos:start="273:30" pos:end="273:30"><literal type="number" pos:start="273:30" pos:end="273:30">0</literal></expr>]</index></name> <operator pos:start="273:33" pos:end="273:33">=</operator>

                <operator pos:start="275:17" pos:end="275:17">(</operator><operator pos:start="275:18" pos:end="275:18">(</operator><name pos:start="275:19" pos:end="275:26">qemu_irq</name> <operator pos:start="275:28" pos:end="275:28">*</operator><operator pos:start="275:29" pos:end="275:29">)</operator><name pos:start="275:30" pos:end="275:44"><name pos:start="275:30" pos:end="275:32">env</name><operator pos:start="275:33" pos:end="275:34">-&gt;</operator><name pos:start="275:35" pos:end="275:44">irq_inputs</name></name><operator pos:start="275:45" pos:end="275:45">)</operator><index pos:start="275:46" pos:end="275:63">[<expr pos:start="275:47" pos:end="275:62"><name pos:start="275:47" pos:end="275:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <default pos:start="279:9" pos:end="279:16">default:</default>

            <expr_stmt pos:start="281:13" pos:end="281:80"><expr pos:start="281:13" pos:end="281:79"><call pos:start="281:13" pos:end="281:79"><name pos:start="281:13" pos:end="281:21">cpu_abort</name><argument_list pos:start="281:22" pos:end="281:79">(<argument pos:start="281:23" pos:end="281:25"><expr pos:start="281:23" pos:end="281:25"><name pos:start="281:23" pos:end="281:25">env</name></expr></argument>, <argument pos:start="281:28" pos:end="281:78"><expr pos:start="281:28" pos:end="281:78"><literal type="string" pos:start="281:28" pos:end="281:78">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:20"><expr pos:start="283:13" pos:end="283:19"><call pos:start="283:13" pos:end="283:19"><name pos:start="283:13" pos:end="283:16">exit</name><argument_list pos:start="283:17" pos:end="283:19">(<argument pos:start="283:18" pos:end="283:18"><expr pos:start="283:18" pos:end="283:18"><literal type="number" pos:start="283:18" pos:end="283:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="291:5" pos:end="291:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:46">(<expr pos:start="293:9" pos:end="293:45"><call pos:start="293:9" pos:end="293:22"><name pos:start="293:9" pos:end="293:17">PPC_INPUT</name><argument_list pos:start="293:18" pos:end="293:22">(<argument pos:start="293:19" pos:end="293:21"><expr pos:start="293:19" pos:end="293:21"><name pos:start="293:19" pos:end="293:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="293:24" pos:end="293:25">!=</operator> <name pos:start="293:27" pos:end="293:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="293:48" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:16">

        <expr_stmt pos:start="295:9" pos:end="295:74"><expr pos:start="295:9" pos:end="295:73"><call pos:start="295:9" pos:end="295:73"><name pos:start="295:9" pos:end="295:17">cpu_abort</name><argument_list pos:start="295:18" pos:end="295:73">(<argument pos:start="295:19" pos:end="295:21"><expr pos:start="295:19" pos:end="295:21"><name pos:start="295:19" pos:end="295:21">env</name></expr></argument>, <argument pos:start="295:24" pos:end="295:72"><expr pos:start="295:24" pos:end="295:72"><literal type="string" pos:start="295:24" pos:end="295:72">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:16"><expr pos:start="297:9" pos:end="297:15"><call pos:start="297:9" pos:end="297:15"><name pos:start="297:9" pos:end="297:12">exit</name><argument_list pos:start="297:13" pos:end="297:15">(<argument pos:start="297:14" pos:end="297:14"><expr pos:start="297:14" pos:end="297:14"><literal type="number" pos:start="297:14" pos:end="297:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:62"><expr pos:start="301:5" pos:end="301:61"><name pos:start="301:5" pos:end="301:7">pic</name> <operator pos:start="301:9" pos:end="301:9">=</operator> <call pos:start="301:11" pos:end="301:61"><name pos:start="301:11" pos:end="301:27">heathrow_pic_init</name><argument_list pos:start="301:28" pos:end="301:61">(<argument pos:start="301:29" pos:end="301:42"><expr pos:start="301:29" pos:end="301:42"><operator pos:start="301:29" pos:end="301:29">&amp;</operator><name pos:start="301:30" pos:end="301:42">pic_mem_index</name></expr></argument>, <argument pos:start="301:45" pos:end="301:45"><expr pos:start="301:45" pos:end="301:45"><literal type="number" pos:start="301:45" pos:end="301:45">1</literal></expr></argument>, <argument pos:start="301:48" pos:end="301:60"><expr pos:start="301:48" pos:end="301:60"><name pos:start="301:48" pos:end="301:60">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:48"><expr pos:start="303:5" pos:end="303:47"><name pos:start="303:5" pos:end="303:11">pci_bus</name> <operator pos:start="303:13" pos:end="303:13">=</operator> <call pos:start="303:15" pos:end="303:47"><name pos:start="303:15" pos:end="303:30">pci_grackle_init</name><argument_list pos:start="303:31" pos:end="303:47">(<argument pos:start="303:32" pos:end="303:41"><expr pos:start="303:32" pos:end="303:41"><literal type="number" pos:start="303:32" pos:end="303:41">0xfec00000</literal></expr></argument>, <argument pos:start="303:44" pos:end="303:46"><expr pos:start="303:44" pos:end="303:46"><name pos:start="303:44" pos:end="303:46">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="305:5" pos:end="309:49"><expr pos:start="305:5" pos:end="309:48"><call pos:start="305:5" pos:end="309:48"><name pos:start="305:5" pos:end="305:16">pci_vga_init</name><argument_list pos:start="305:17" pos:end="309:48">(<argument pos:start="305:18" pos:end="305:24"><expr pos:start="305:18" pos:end="305:24"><name pos:start="305:18" pos:end="305:24">pci_bus</name></expr></argument>, <argument pos:start="305:27" pos:end="305:28"><expr pos:start="305:27" pos:end="305:28"><name pos:start="305:27" pos:end="305:28">ds</name></expr></argument>, <argument pos:start="305:31" pos:end="305:54"><expr pos:start="305:31" pos:end="305:54"><name pos:start="305:31" pos:end="305:43">phys_ram_base</name> <operator pos:start="305:45" pos:end="305:45">+</operator> <name pos:start="305:47" pos:end="305:54">ram_size</name></expr></argument>,

                 <argument pos:start="307:18" pos:end="307:25"><expr pos:start="307:18" pos:end="307:25"><name pos:start="307:18" pos:end="307:25">ram_size</name></expr></argument>, <argument pos:start="307:28" pos:end="307:39"><expr pos:start="307:28" pos:end="307:39"><name pos:start="307:28" pos:end="307:39">vga_ram_size</name></expr></argument>,

                 <argument pos:start="309:18" pos:end="309:32"><expr pos:start="309:18" pos:end="309:32"><name pos:start="309:18" pos:end="309:32">vga_bios_offset</name></expr></argument>, <argument pos:start="309:35" pos:end="309:47"><expr pos:start="309:35" pos:end="309:47"><name pos:start="309:35" pos:end="309:47">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="313:5" pos:end="313:28">/* XXX: suppress that */</comment>

    <expr_stmt pos:start="315:5" pos:end="315:33"><expr pos:start="315:5" pos:end="315:32"><name pos:start="315:5" pos:end="315:13">dummy_irq</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <call pos:start="315:17" pos:end="315:32"><name pos:start="315:17" pos:end="315:26">i8259_init</name><argument_list pos:start="315:27" pos:end="315:32">(<argument pos:start="315:28" pos:end="315:31"><expr pos:start="315:28" pos:end="315:31"><name pos:start="315:28" pos:end="315:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="319:5" pos:end="319:34">/* XXX: use Mac Serial port */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:52"><expr pos:start="321:5" pos:end="321:51"><call pos:start="321:5" pos:end="321:51"><name pos:start="321:5" pos:end="321:15">serial_init</name><argument_list pos:start="321:16" pos:end="321:51">(<argument pos:start="321:17" pos:end="321:21"><expr pos:start="321:17" pos:end="321:21"><literal type="number" pos:start="321:17" pos:end="321:21">0x3f8</literal></expr></argument>, <argument pos:start="321:24" pos:end="321:35"><expr pos:start="321:24" pos:end="321:35"><name pos:start="321:24" pos:end="321:35"><name pos:start="321:24" pos:end="321:32">dummy_irq</name><index pos:start="321:33" pos:end="321:35">[<expr pos:start="321:34" pos:end="321:34"><literal type="number" pos:start="321:34" pos:end="321:34">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="321:38" pos:end="321:50"><expr pos:start="321:38" pos:end="321:50"><name pos:start="321:38" pos:end="321:50"><name pos:start="321:38" pos:end="321:47">serial_hds</name><index pos:start="321:48" pos:end="321:50">[<expr pos:start="321:49" pos:end="321:49"><literal type="number" pos:start="321:49" pos:end="321:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <for pos:start="325:5" pos:end="333:5">for<control pos:start="325:8" pos:end="325:32">(<init pos:start="325:9" pos:end="325:14"><expr pos:start="325:9" pos:end="325:13"><name pos:start="325:9" pos:end="325:9">i</name> <operator pos:start="325:11" pos:end="325:11">=</operator> <literal type="number" pos:start="325:13" pos:end="325:13">0</literal></expr>;</init> <condition pos:start="325:16" pos:end="325:27"><expr pos:start="325:16" pos:end="325:26"><name pos:start="325:16" pos:end="325:16">i</name> <operator pos:start="325:18" pos:end="325:18">&lt;</operator> <name pos:start="325:20" pos:end="325:26">nb_nics</name></expr>;</condition> <incr pos:start="325:29" pos:end="325:31"><expr pos:start="325:29" pos:end="325:31"><name pos:start="325:29" pos:end="325:29">i</name><operator pos:start="325:30" pos:end="325:31">++</operator></expr></incr>)</control> <block pos:start="325:34" pos:end="333:5">{<block_content pos:start="327:9" pos:end="331:48">

        <if_stmt pos:start="327:9" pos:end="329:43"><if pos:start="327:9" pos:end="329:43">if <condition pos:start="327:12" pos:end="327:31">(<expr pos:start="327:13" pos:end="327:30"><operator pos:start="327:13" pos:end="327:13">!</operator><name pos:start="327:14" pos:end="327:24"><name pos:start="327:14" pos:end="327:21">nd_table</name><index pos:start="327:22" pos:end="327:24">[<expr pos:start="327:23" pos:end="327:23"><name pos:start="327:23" pos:end="327:23">i</name></expr>]</index></name><operator pos:start="327:25" pos:end="327:25">.</operator><name pos:start="327:26" pos:end="327:30">model</name></expr>)</condition><block type="pseudo" pos:start="329:13" pos:end="329:43"><block_content pos:start="329:13" pos:end="329:43">

            <expr_stmt pos:start="329:13" pos:end="329:43"><expr pos:start="329:13" pos:end="329:42"><name pos:start="329:13" pos:end="329:23"><name pos:start="329:13" pos:end="329:20">nd_table</name><index pos:start="329:21" pos:end="329:23">[<expr pos:start="329:22" pos:end="329:22"><name pos:start="329:22" pos:end="329:22">i</name></expr>]</index></name><operator pos:start="329:24" pos:end="329:24">.</operator><name pos:start="329:25" pos:end="329:29">model</name> <operator pos:start="329:31" pos:end="329:31">=</operator> <literal type="string" pos:start="329:33" pos:end="329:42">"ne2k_pci"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:48"><expr pos:start="331:9" pos:end="331:47"><call pos:start="331:9" pos:end="331:47"><name pos:start="331:9" pos:end="331:20">pci_nic_init</name><argument_list pos:start="331:21" pos:end="331:47">(<argument pos:start="331:22" pos:end="331:28"><expr pos:start="331:22" pos:end="331:28"><name pos:start="331:22" pos:end="331:28">pci_bus</name></expr></argument>, <argument pos:start="331:31" pos:end="331:42"><expr pos:start="331:31" pos:end="331:42"><operator pos:start="331:31" pos:end="331:31">&amp;</operator><name pos:start="331:32" pos:end="331:42"><name pos:start="331:32" pos:end="331:39">nd_table</name><index pos:start="331:40" pos:end="331:42">[<expr pos:start="331:41" pos:end="331:41"><name pos:start="331:41" pos:end="331:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="331:45" pos:end="331:46"><expr pos:start="331:45" pos:end="331:46"><operator pos:start="331:45" pos:end="331:45">-</operator><literal type="number" pos:start="331:46" pos:end="331:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    

    <expr_stmt pos:start="337:5" pos:end="337:50"><expr pos:start="337:5" pos:end="337:49"><call pos:start="337:5" pos:end="337:49"><name pos:start="337:5" pos:end="337:23">pci_cmd646_ide_init</name><argument_list pos:start="337:24" pos:end="337:49">(<argument pos:start="337:25" pos:end="337:31"><expr pos:start="337:25" pos:end="337:31"><name pos:start="337:25" pos:end="337:31">pci_bus</name></expr></argument>, <argument pos:start="337:34" pos:end="337:45"><expr pos:start="337:34" pos:end="337:45"><operator pos:start="337:34" pos:end="337:34">&amp;</operator><name pos:start="337:35" pos:end="337:45"><name pos:start="337:35" pos:end="337:42">bs_table</name><index pos:start="337:43" pos:end="337:45">[<expr pos:start="337:44" pos:end="337:44"><literal type="number" pos:start="337:44" pos:end="337:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="337:48" pos:end="337:48"><expr pos:start="337:48" pos:end="337:48"><literal type="number" pos:start="337:48" pos:end="337:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="341:5" pos:end="341:34">/* cuda also initialize ADB */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:42"><expr pos:start="343:5" pos:end="343:41"><call pos:start="343:5" pos:end="343:41"><name pos:start="343:5" pos:end="343:13">cuda_init</name><argument_list pos:start="343:14" pos:end="343:41">(<argument pos:start="343:15" pos:end="343:29"><expr pos:start="343:15" pos:end="343:29"><operator pos:start="343:15" pos:end="343:15">&amp;</operator><name pos:start="343:16" pos:end="343:29">cuda_mem_index</name></expr></argument>, <argument pos:start="343:32" pos:end="343:40"><expr pos:start="343:32" pos:end="343:40"><name pos:start="343:32" pos:end="343:40"><name pos:start="343:32" pos:end="343:34">pic</name><index pos:start="343:35" pos:end="343:40">[<expr pos:start="343:36" pos:end="343:39"><literal type="number" pos:start="343:36" pos:end="343:39">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="347:5" pos:end="347:27"><expr pos:start="347:5" pos:end="347:26"><call pos:start="347:5" pos:end="347:26"><name pos:start="347:5" pos:end="347:16">adb_kbd_init</name><argument_list pos:start="347:17" pos:end="347:26">(<argument pos:start="347:18" pos:end="347:25"><expr pos:start="347:18" pos:end="347:25"><operator pos:start="347:18" pos:end="347:18">&amp;</operator><name pos:start="347:19" pos:end="347:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:29"><expr pos:start="349:5" pos:end="349:28"><call pos:start="349:5" pos:end="349:28"><name pos:start="349:5" pos:end="349:18">adb_mouse_init</name><argument_list pos:start="349:19" pos:end="349:28">(<argument pos:start="349:20" pos:end="349:27"><expr pos:start="349:20" pos:end="349:27"><operator pos:start="349:20" pos:end="349:20">&amp;</operator><name pos:start="349:21" pos:end="349:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="353:5" pos:end="353:53"><expr pos:start="353:5" pos:end="353:52"><name pos:start="353:5" pos:end="353:7">nvr</name> <operator pos:start="353:9" pos:end="353:9">=</operator> <call pos:start="353:11" pos:end="353:52"><name pos:start="353:11" pos:end="353:26">macio_nvram_init</name><argument_list pos:start="353:27" pos:end="353:52">(<argument pos:start="353:28" pos:end="353:43"><expr pos:start="353:28" pos:end="353:43"><operator pos:start="353:28" pos:end="353:28">&amp;</operator><name pos:start="353:29" pos:end="353:43">nvram_mem_index</name></expr></argument>, <argument pos:start="353:46" pos:end="353:51"><expr pos:start="353:46" pos:end="353:51"><literal type="number" pos:start="353:46" pos:end="353:51">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:45"><expr pos:start="355:5" pos:end="355:44"><call pos:start="355:5" pos:end="355:44"><name pos:start="355:5" pos:end="355:31">pmac_format_nvram_partition</name><argument_list pos:start="355:32" pos:end="355:44">(<argument pos:start="355:33" pos:end="355:35"><expr pos:start="355:33" pos:end="355:35"><name pos:start="355:33" pos:end="355:35">nvr</name></expr></argument>, <argument pos:start="355:38" pos:end="355:43"><expr pos:start="355:38" pos:end="355:43"><literal type="number" pos:start="355:38" pos:end="355:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:33"><expr pos:start="359:5" pos:end="359:32"><call pos:start="359:5" pos:end="359:32"><name pos:start="359:5" pos:end="359:14">dbdma_init</name><argument_list pos:start="359:15" pos:end="359:32">(<argument pos:start="359:16" pos:end="359:31"><expr pos:start="359:16" pos:end="359:31"><operator pos:start="359:16" pos:end="359:16">&amp;</operator><name pos:start="359:17" pos:end="359:31">dbdma_mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="363:5" pos:end="365:45"><expr pos:start="363:5" pos:end="365:44"><call pos:start="363:5" pos:end="365:44"><name pos:start="363:5" pos:end="363:14">macio_init</name><argument_list pos:start="363:15" pos:end="365:44">(<argument pos:start="363:16" pos:end="363:22"><expr pos:start="363:16" pos:end="363:22"><name pos:start="363:16" pos:end="363:22">pci_bus</name></expr></argument>, <argument pos:start="363:25" pos:end="363:30"><expr pos:start="363:25" pos:end="363:30"><literal type="number" pos:start="363:25" pos:end="363:30">0x0017</literal></expr></argument>, <argument pos:start="363:33" pos:end="363:33"><expr pos:start="363:33" pos:end="363:33"><literal type="number" pos:start="363:33" pos:end="363:33">1</literal></expr></argument>, <argument pos:start="363:36" pos:end="363:48"><expr pos:start="363:36" pos:end="363:48"><name pos:start="363:36" pos:end="363:48">pic_mem_index</name></expr></argument>, <argument pos:start="363:51" pos:end="363:65"><expr pos:start="363:51" pos:end="363:65"><name pos:start="363:51" pos:end="363:65">dbdma_mem_index</name></expr></argument>,

               <argument pos:start="365:16" pos:end="365:29"><expr pos:start="365:16" pos:end="365:29"><name pos:start="365:16" pos:end="365:29">cuda_mem_index</name></expr></argument>, <argument pos:start="365:32" pos:end="365:34"><expr pos:start="365:32" pos:end="365:34"><name pos:start="365:32" pos:end="365:34">nvr</name></expr></argument>, <argument pos:start="365:37" pos:end="365:37"><expr pos:start="365:37" pos:end="365:37"><literal type="number" pos:start="365:37" pos:end="365:37">0</literal></expr></argument>, <argument pos:start="365:40" pos:end="365:43"><expr pos:start="365:40" pos:end="365:43"><name pos:start="365:40" pos:end="365:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="369:5" pos:end="373:5"><if pos:start="369:5" pos:end="373:5">if <condition pos:start="369:8" pos:end="369:20">(<expr pos:start="369:9" pos:end="369:19"><name pos:start="369:9" pos:end="369:19">usb_enabled</name></expr>)</condition> <block pos:start="369:22" pos:end="373:5">{<block_content pos:start="371:9" pos:end="371:42">

        <expr_stmt pos:start="371:9" pos:end="371:42"><expr pos:start="371:9" pos:end="371:41"><call pos:start="371:9" pos:end="371:41"><name pos:start="371:9" pos:end="371:25">usb_ohci_init_pci</name><argument_list pos:start="371:26" pos:end="371:41">(<argument pos:start="371:27" pos:end="371:33"><expr pos:start="371:27" pos:end="371:33"><name pos:start="371:27" pos:end="371:33">pci_bus</name></expr></argument>, <argument pos:start="371:36" pos:end="371:36"><expr pos:start="371:36" pos:end="371:36"><literal type="number" pos:start="371:36" pos:end="371:36">3</literal></expr></argument>, <argument pos:start="371:39" pos:end="371:40"><expr pos:start="371:39" pos:end="371:40"><operator pos:start="371:39" pos:end="371:39">-</operator><literal type="number" pos:start="371:40" pos:end="371:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="377:5" pos:end="379:27"><if pos:start="377:5" pos:end="379:27">if <condition pos:start="377:8" pos:end="377:73">(<expr pos:start="377:9" pos:end="377:72"><name pos:start="377:9" pos:end="377:21">graphic_depth</name> <operator pos:start="377:23" pos:end="377:24">!=</operator> <literal type="number" pos:start="377:26" pos:end="377:27">15</literal> <operator pos:start="377:29" pos:end="377:30">&amp;&amp;</operator> <name pos:start="377:32" pos:end="377:44">graphic_depth</name> <operator pos:start="377:46" pos:end="377:47">!=</operator> <literal type="number" pos:start="377:49" pos:end="377:50">32</literal> <operator pos:start="377:52" pos:end="377:53">&amp;&amp;</operator> <name pos:start="377:55" pos:end="377:67">graphic_depth</name> <operator pos:start="377:69" pos:end="377:70">!=</operator> <literal type="number" pos:start="377:72" pos:end="377:72">8</literal></expr>)</condition><block type="pseudo" pos:start="379:9" pos:end="379:27"><block_content pos:start="379:9" pos:end="379:27">

        <expr_stmt pos:start="379:9" pos:end="379:27"><expr pos:start="379:9" pos:end="379:26"><name pos:start="379:9" pos:end="379:21">graphic_depth</name> <operator pos:start="379:23" pos:end="379:23">=</operator> <literal type="number" pos:start="379:25" pos:end="379:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:75"><expr pos:start="383:5" pos:end="383:74"><name pos:start="383:5" pos:end="383:10">m48t59</name> <operator pos:start="383:12" pos:end="383:12">=</operator> <call pos:start="383:14" pos:end="383:74"><name pos:start="383:14" pos:end="383:24">m48t59_init</name><argument_list pos:start="383:25" pos:end="383:74">(<argument pos:start="383:26" pos:end="383:37"><expr pos:start="383:26" pos:end="383:37"><name pos:start="383:26" pos:end="383:37"><name pos:start="383:26" pos:end="383:34">dummy_irq</name><index pos:start="383:35" pos:end="383:37">[<expr pos:start="383:36" pos:end="383:36"><literal type="number" pos:start="383:36" pos:end="383:36">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="383:40" pos:end="383:49"><expr pos:start="383:40" pos:end="383:49"><literal type="number" pos:start="383:40" pos:end="383:49">0xFFF04000</literal></expr></argument>, <argument pos:start="383:52" pos:end="383:57"><expr pos:start="383:52" pos:end="383:57"><literal type="number" pos:start="383:52" pos:end="383:57">0x0074</literal></expr></argument>, <argument pos:start="383:60" pos:end="383:69"><expr pos:start="383:60" pos:end="383:69"><name pos:start="383:60" pos:end="383:69">NVRAM_SIZE</name></expr></argument>, <argument pos:start="383:72" pos:end="383:73"><expr pos:start="383:72" pos:end="383:73"><literal type="number" pos:start="383:72" pos:end="383:73">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:26"><expr pos:start="385:5" pos:end="385:25"><name pos:start="385:5" pos:end="385:16"><name pos:start="385:5" pos:end="385:9">nvram</name><operator pos:start="385:10" pos:end="385:10">.</operator><name pos:start="385:11" pos:end="385:16">opaque</name></name> <operator pos:start="385:18" pos:end="385:18">=</operator> <name pos:start="385:20" pos:end="385:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:33"><expr pos:start="387:5" pos:end="387:32"><name pos:start="387:5" pos:end="387:17"><name pos:start="387:5" pos:end="387:9">nvram</name><operator pos:start="387:10" pos:end="387:10">.</operator><name pos:start="387:11" pos:end="387:17">read_fn</name></name> <operator pos:start="387:19" pos:end="387:19">=</operator> <operator pos:start="387:21" pos:end="387:21">&amp;</operator><name pos:start="387:22" pos:end="387:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="389:5" pos:end="389:35"><expr pos:start="389:5" pos:end="389:34"><name pos:start="389:5" pos:end="389:18"><name pos:start="389:5" pos:end="389:9">nvram</name><operator pos:start="389:10" pos:end="389:10">.</operator><name pos:start="389:11" pos:end="389:18">write_fn</name></name> <operator pos:start="389:20" pos:end="389:20">=</operator> <operator pos:start="389:22" pos:end="389:22">&amp;</operator><name pos:start="389:23" pos:end="389:34">m48t59_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="403:71"><expr pos:start="391:5" pos:end="403:70"><call pos:start="391:5" pos:end="403:70"><name pos:start="391:5" pos:end="391:24">PPC_NVRAM_set_params</name><argument_list pos:start="391:25" pos:end="403:70">(<argument pos:start="391:26" pos:end="391:31"><expr pos:start="391:26" pos:end="391:31"><operator pos:start="391:26" pos:end="391:26">&amp;</operator><name pos:start="391:27" pos:end="391:31">nvram</name></expr></argument>, <argument pos:start="391:34" pos:end="391:43"><expr pos:start="391:34" pos:end="391:43"><name pos:start="391:34" pos:end="391:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="391:46" pos:end="391:55"><expr pos:start="391:46" pos:end="391:55"><literal type="string" pos:start="391:46" pos:end="391:55">"HEATHROW"</literal></expr></argument>, <argument pos:start="391:58" pos:end="391:65"><expr pos:start="391:58" pos:end="391:65"><name pos:start="391:58" pos:end="391:65">ram_size</name></expr></argument>,

                         <argument pos:start="393:26" pos:end="393:40"><expr pos:start="393:26" pos:end="393:40"><name pos:start="393:26" pos:end="393:40">ppc_boot_device</name></expr></argument>, <argument pos:start="393:43" pos:end="393:53"><expr pos:start="393:43" pos:end="393:53"><name pos:start="393:43" pos:end="393:53">kernel_base</name></expr></argument>, <argument pos:start="393:56" pos:end="393:66"><expr pos:start="393:56" pos:end="393:66"><name pos:start="393:56" pos:end="393:66">kernel_size</name></expr></argument>,

                         <argument pos:start="395:26" pos:end="395:39"><expr pos:start="395:26" pos:end="395:39"><name pos:start="395:26" pos:end="395:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="397:26" pos:end="397:36"><expr pos:start="397:26" pos:end="397:36"><name pos:start="397:26" pos:end="397:36">initrd_base</name></expr></argument>, <argument pos:start="397:39" pos:end="397:49"><expr pos:start="397:39" pos:end="397:49"><name pos:start="397:39" pos:end="397:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="399:26" pos:end="399:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="401:26" pos:end="401:26"><expr pos:start="401:26" pos:end="401:26"><literal type="number" pos:start="401:26" pos:end="401:26">0</literal></expr></argument>,

                         <argument pos:start="403:26" pos:end="403:38"><expr pos:start="403:26" pos:end="403:38"><name pos:start="403:26" pos:end="403:38">graphic_width</name></expr></argument>, <argument pos:start="403:41" pos:end="403:54"><expr pos:start="403:41" pos:end="403:54"><name pos:start="403:41" pos:end="403:54">graphic_height</name></expr></argument>, <argument pos:start="403:57" pos:end="403:69"><expr pos:start="403:57" pos:end="403:69"><name pos:start="403:57" pos:end="403:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="405:5" pos:end="405:42">/* No PCI init: the BIOS will do it */</comment>



    <comment type="block" pos:start="409:5" pos:end="409:63">/* Special port to get debug messages from Open-Firmware */</comment>

    <expr_stmt pos:start="411:5" pos:end="411:64"><expr pos:start="411:5" pos:end="411:63"><call pos:start="411:5" pos:end="411:63"><name pos:start="411:5" pos:end="411:25">register_ioport_write</name><argument_list pos:start="411:26" pos:end="411:63">(<argument pos:start="411:27" pos:end="411:32"><expr pos:start="411:27" pos:end="411:32"><literal type="number" pos:start="411:27" pos:end="411:32">0x0F00</literal></expr></argument>, <argument pos:start="411:35" pos:end="411:35"><expr pos:start="411:35" pos:end="411:35"><literal type="number" pos:start="411:35" pos:end="411:35">4</literal></expr></argument>, <argument pos:start="411:38" pos:end="411:38"><expr pos:start="411:38" pos:end="411:38"><literal type="number" pos:start="411:38" pos:end="411:38">1</literal></expr></argument>, <argument pos:start="411:41" pos:end="411:56"><expr pos:start="411:41" pos:end="411:56"><operator pos:start="411:41" pos:end="411:41">&amp;</operator><name pos:start="411:42" pos:end="411:56">PPC_debug_write</name></expr></argument>, <argument pos:start="411:59" pos:end="411:62"><expr pos:start="411:59" pos:end="411:62"><name pos:start="411:59" pos:end="411:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
