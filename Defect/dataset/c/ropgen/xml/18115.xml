<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18115.c" pos:tabs="8"><function pos:start="1:1" pos:end="495:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">vfio_realize</name><parameter_list pos:start="1:25" pos:end="1:55">(<parameter pos:start="1:26" pos:end="1:40"><decl pos:start="1:26" pos:end="1:40"><type pos:start="1:26" pos:end="1:40"><name pos:start="1:26" pos:end="1:34">PCIDevice</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">pdev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:47">Error</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier><modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="495:1">{<block_content pos:start="5:5" pos:end="493:57">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">VFIOPCIDevice</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:23">vdev</name> <init pos:start="5:25" pos:end="5:62">= <expr pos:start="5:27" pos:end="5:62"><call pos:start="5:27" pos:end="5:62"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:62">(<argument pos:start="5:37" pos:end="5:49"><expr pos:start="5:37" pos:end="5:49"><name pos:start="5:37" pos:end="5:49">VFIOPCIDevice</name></expr></argument>, <argument pos:start="5:52" pos:end="5:55"><expr pos:start="5:52" pos:end="5:55"><name pos:start="5:52" pos:end="5:55">pdev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:61"><expr pos:start="5:58" pos:end="5:61"><name pos:start="5:58" pos:end="5:61">pdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VFIODevice</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:29">vbasedev_iter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">VFIOGroup</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:49"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">tmp</name></decl>, <decl pos:start="11:16" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:16" pos:end="11:35"><name pos:start="11:16" pos:end="11:25">group_path</name><index pos:start="11:26" pos:end="11:35">[<expr pos:start="11:27" pos:end="11:34"><name pos:start="11:27" pos:end="11:34">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="11:38" pos:end="11:48"><type ref="prev" pos:start="11:5" pos:end="11:10"><modifier pos:start="11:38" pos:end="11:38">*</modifier></type><name pos:start="11:39" pos:end="11:48">group_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">ssize_t</name></type> <name pos:start="15:13" pos:end="15:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:15">stat</name></name></type> <name pos:start="17:17" pos:end="17:18">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">groupid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:15"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:14"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="49:5"><if pos:start="25:5" pos:end="49:5">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:32"><name pos:start="25:10" pos:end="25:13">vdev</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:23">vbasedev</name><operator pos:start="25:24" pos:end="25:24">.</operator><name pos:start="25:25" pos:end="25:32">sysfsdev</name></name></expr>)</condition> <block pos:start="25:35" pos:end="49:5">{<block_content pos:start="27:9" pos:end="47:66">

        <if_stmt pos:start="27:9" pos:end="39:9"><if pos:start="27:9" pos:end="39:9">if <condition pos:start="27:12" pos:end="29:56">(<expr pos:start="27:13" pos:end="29:55"><operator pos:start="27:13" pos:end="27:13">!</operator><operator pos:start="27:14" pos:end="27:14">(</operator><operator pos:start="27:15" pos:end="27:15">~</operator><name pos:start="27:16" pos:end="27:32"><name pos:start="27:16" pos:end="27:19">vdev</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:25">host</name><operator pos:start="27:26" pos:end="27:26">.</operator><name pos:start="27:27" pos:end="27:32">domain</name></name> <operator pos:start="27:34" pos:end="27:35">||</operator> <operator pos:start="27:37" pos:end="27:37">~</operator><name pos:start="27:38" pos:end="27:51"><name pos:start="27:38" pos:end="27:41">vdev</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:47">host</name><operator pos:start="27:48" pos:end="27:48">.</operator><name pos:start="27:49" pos:end="27:51">bus</name></name> <operator pos:start="27:53" pos:end="27:54">||</operator>

              <operator pos:start="29:15" pos:end="29:15">~</operator><name pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:19">vdev</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:25">host</name><operator pos:start="29:26" pos:end="29:26">.</operator><name pos:start="29:27" pos:end="29:30">slot</name></name> <operator pos:start="29:32" pos:end="29:33">||</operator> <operator pos:start="29:35" pos:end="29:35">~</operator><name pos:start="29:36" pos:end="29:54"><name pos:start="29:36" pos:end="29:39">vdev</name><operator pos:start="29:40" pos:end="29:41">-&gt;</operator><name pos:start="29:42" pos:end="29:45">host</name><operator pos:start="29:46" pos:end="29:46">.</operator><name pos:start="29:47" pos:end="29:54">function</name></name><operator pos:start="29:55" pos:end="29:55">)</operator></expr>)</condition> <block pos:start="29:58" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:19">

            <expr_stmt pos:start="31:13" pos:end="31:56"><expr pos:start="31:13" pos:end="31:55"><call pos:start="31:13" pos:end="31:55"><name pos:start="31:13" pos:end="31:22">error_setg</name><argument_list pos:start="31:23" pos:end="31:55">(<argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">errp</name></expr></argument>, <argument pos:start="31:30" pos:end="31:54"><expr pos:start="31:30" pos:end="31:54"><literal type="string" pos:start="31:30" pos:end="31:54">"No provided host device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="35:72"><expr pos:start="33:13" pos:end="35:71"><call pos:start="33:13" pos:end="35:71"><name pos:start="33:13" pos:end="33:29">error_append_hint</name><argument_list pos:start="33:30" pos:end="35:71">(<argument pos:start="33:31" pos:end="33:34"><expr pos:start="33:31" pos:end="33:34"><name pos:start="33:31" pos:end="33:34">errp</name></expr></argument>, <argument pos:start="33:37" pos:end="35:70"><expr pos:start="33:37" pos:end="35:70"><literal type="string" pos:start="33:37" pos:end="33:70">"Use -vfio-pci,host=DDDD:BB:DD.F "</literal>

                              <literal type="string" pos:start="35:31" pos:end="35:70">"or -vfio-pci,sysfsdev=PATH_TO_DEVICE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="47:66"><expr pos:start="41:9" pos:end="47:65"><name pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:12">vdev</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">vbasedev</name><operator pos:start="41:23" pos:end="41:23">.</operator><name pos:start="41:24" pos:end="41:31">sysfsdev</name></name> <operator pos:start="41:33" pos:end="41:33">=</operator>

            <call pos:start="43:13" pos:end="47:65"><name pos:start="43:13" pos:end="43:27">g_strdup_printf</name><argument_list pos:start="43:28" pos:end="47:65">(<argument pos:start="43:29" pos:end="43:70"><expr pos:start="43:29" pos:end="43:70"><literal type="string" pos:start="43:29" pos:end="43:70">"/sys/bus/pci/devices/%04x:%02x:%02x.%01x"</literal></expr></argument>,

                            <argument pos:start="45:29" pos:end="45:45"><expr pos:start="45:29" pos:end="45:45"><name pos:start="45:29" pos:end="45:45"><name pos:start="45:29" pos:end="45:32">vdev</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:38">host</name><operator pos:start="45:39" pos:end="45:39">.</operator><name pos:start="45:40" pos:end="45:45">domain</name></name></expr></argument>, <argument pos:start="45:48" pos:end="45:61"><expr pos:start="45:48" pos:end="45:61"><name pos:start="45:48" pos:end="45:61"><name pos:start="45:48" pos:end="45:51">vdev</name><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:57">host</name><operator pos:start="45:58" pos:end="45:58">.</operator><name pos:start="45:59" pos:end="45:61">bus</name></name></expr></argument>,

                            <argument pos:start="47:29" pos:end="47:43"><expr pos:start="47:29" pos:end="47:43"><name pos:start="47:29" pos:end="47:43"><name pos:start="47:29" pos:end="47:32">vdev</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:38">host</name><operator pos:start="47:39" pos:end="47:39">.</operator><name pos:start="47:40" pos:end="47:43">slot</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:64"><expr pos:start="47:46" pos:end="47:64"><name pos:start="47:46" pos:end="47:64"><name pos:start="47:46" pos:end="47:49">vdev</name><operator pos:start="47:50" pos:end="47:51">-&gt;</operator><name pos:start="47:52" pos:end="47:55">host</name><operator pos:start="47:56" pos:end="47:56">.</operator><name pos:start="47:57" pos:end="47:64">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:47">(<expr pos:start="53:9" pos:end="53:46"><call pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:12">stat</name><argument_list pos:start="53:13" pos:end="53:42">(<argument pos:start="53:14" pos:end="53:36"><expr pos:start="53:14" pos:end="53:36"><name pos:start="53:14" pos:end="53:36"><name pos:start="53:14" pos:end="53:17">vdev</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:27">vbasedev</name><operator pos:start="53:28" pos:end="53:28">.</operator><name pos:start="53:29" pos:end="53:36">sysfsdev</name></name></expr></argument>, <argument pos:start="53:39" pos:end="53:41"><expr pos:start="53:39" pos:end="53:41"><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:41">st</name></expr></argument>)</argument_list></call> <operator pos:start="53:44" pos:end="53:44">&lt;</operator> <literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr>)</condition> <block pos:start="53:49" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:15">

        <expr_stmt pos:start="55:9" pos:end="55:61"><expr pos:start="55:9" pos:end="55:60"><call pos:start="55:9" pos:end="55:60"><name pos:start="55:9" pos:end="55:24">error_setg_errno</name><argument_list pos:start="55:25" pos:end="55:60">(<argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">errp</name></expr></argument>, <argument pos:start="55:32" pos:end="55:36"><expr pos:start="55:32" pos:end="55:36"><name pos:start="55:32" pos:end="55:36">errno</name></expr></argument>, <argument pos:start="55:39" pos:end="55:59"><expr pos:start="55:39" pos:end="55:59"><literal type="string" pos:start="55:39" pos:end="55:59">"no such host device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:65"><expr pos:start="57:9" pos:end="57:64"><call pos:start="57:9" pos:end="57:64"><name pos:start="57:9" pos:end="57:21">error_prepend</name><argument_list pos:start="57:22" pos:end="57:64">(<argument pos:start="57:23" pos:end="57:26"><expr pos:start="57:23" pos:end="57:26"><name pos:start="57:23" pos:end="57:26">errp</name></expr></argument>, <argument pos:start="57:29" pos:end="57:38"><expr pos:start="57:29" pos:end="57:38"><name pos:start="57:29" pos:end="57:38">ERR_PREFIX</name></expr></argument>, <argument pos:start="57:41" pos:end="57:63"><expr pos:start="57:41" pos:end="57:63"><name pos:start="57:41" pos:end="57:63"><name pos:start="57:41" pos:end="57:44">vdev</name><operator pos:start="57:45" pos:end="57:46">-&gt;</operator><name pos:start="57:47" pos:end="57:54">vbasedev</name><operator pos:start="57:55" pos:end="57:55">.</operator><name pos:start="57:56" pos:end="57:63">sysfsdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:70"><expr pos:start="65:5" pos:end="65:69"><name pos:start="65:5" pos:end="65:23"><name pos:start="65:5" pos:end="65:8">vdev</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:18">vbasedev</name><operator pos:start="65:19" pos:end="65:19">.</operator><name pos:start="65:20" pos:end="65:23">name</name></name> <operator pos:start="65:25" pos:end="65:25">=</operator> <call pos:start="65:27" pos:end="65:69"><name pos:start="65:27" pos:end="65:34">g_strdup</name><argument_list pos:start="65:35" pos:end="65:69">(<argument pos:start="65:36" pos:end="65:68"><expr pos:start="65:36" pos:end="65:68"><call pos:start="65:36" pos:end="65:68"><name pos:start="65:36" pos:end="65:43">basename</name><argument_list pos:start="65:44" pos:end="65:68">(<argument pos:start="65:45" pos:end="65:67"><expr pos:start="65:45" pos:end="65:67"><name pos:start="65:45" pos:end="65:67"><name pos:start="65:45" pos:end="65:48">vdev</name><operator pos:start="65:49" pos:end="65:50">-&gt;</operator><name pos:start="65:51" pos:end="65:58">vbasedev</name><operator pos:start="65:59" pos:end="65:59">.</operator><name pos:start="65:60" pos:end="65:67">sysfsdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:39"><expr pos:start="67:5" pos:end="67:38"><name pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:8">vdev</name><operator pos:start="67:9" pos:end="67:10">-&gt;</operator><name pos:start="67:11" pos:end="67:18">vbasedev</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:22">ops</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:38">vfio_pci_ops</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:47"><expr pos:start="69:5" pos:end="69:46"><name pos:start="69:5" pos:end="69:23"><name pos:start="69:5" pos:end="69:8">vdev</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:18">vbasedev</name><operator pos:start="69:19" pos:end="69:19">.</operator><name pos:start="69:20" pos:end="69:23">type</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:46">VFIO_DEVICE_TYPE_PCI</name></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:69"><expr pos:start="73:5" pos:end="73:68"><name pos:start="73:5" pos:end="73:7">tmp</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:68"><name pos:start="73:11" pos:end="73:25">g_strdup_printf</name><argument_list pos:start="73:26" pos:end="73:68">(<argument pos:start="73:27" pos:end="73:42"><expr pos:start="73:27" pos:end="73:42"><literal type="string" pos:start="73:27" pos:end="73:42">"%s/iommu_group"</literal></expr></argument>, <argument pos:start="73:45" pos:end="73:67"><expr pos:start="73:45" pos:end="73:67"><name pos:start="73:45" pos:end="73:67"><name pos:start="73:45" pos:end="73:48">vdev</name><operator pos:start="73:49" pos:end="73:50">-&gt;</operator><name pos:start="73:51" pos:end="73:58">vbasedev</name><operator pos:start="73:59" pos:end="73:59">.</operator><name pos:start="73:60" pos:end="73:67">sysfsdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:56"><expr pos:start="75:5" pos:end="75:55"><name pos:start="75:5" pos:end="75:7">len</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:55"><name pos:start="75:11" pos:end="75:18">readlink</name><argument_list pos:start="75:19" pos:end="75:55">(<argument pos:start="75:20" pos:end="75:22"><expr pos:start="75:20" pos:end="75:22"><name pos:start="75:20" pos:end="75:22">tmp</name></expr></argument>, <argument pos:start="75:25" pos:end="75:34"><expr pos:start="75:25" pos:end="75:34"><name pos:start="75:25" pos:end="75:34">group_path</name></expr></argument>, <argument pos:start="75:37" pos:end="75:54"><expr pos:start="75:37" pos:end="75:54"><sizeof pos:start="75:37" pos:end="75:54">sizeof<argument_list pos:start="75:43" pos:end="75:54">(<argument pos:start="75:44" pos:end="75:53"><expr pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:53">group_path</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:16"><expr pos:start="77:5" pos:end="77:15"><call pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:15">(<argument pos:start="77:12" pos:end="77:14"><expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:46">(<expr pos:start="81:9" pos:end="81:45"><name pos:start="81:9" pos:end="81:11">len</name> <operator pos:start="81:13" pos:end="81:14">&lt;=</operator> <literal type="number" pos:start="81:16" pos:end="81:16">0</literal> <operator pos:start="81:18" pos:end="81:19">||</operator> <name pos:start="81:21" pos:end="81:23">len</name> <operator pos:start="81:25" pos:end="81:26">&gt;=</operator> <sizeof pos:start="81:28" pos:end="81:45">sizeof<argument_list pos:start="81:34" pos:end="81:45">(<argument pos:start="81:35" pos:end="81:44"><expr pos:start="81:35" pos:end="81:44"><name pos:start="81:35" pos:end="81:44">group_path</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="81:48" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:19">

        <expr_stmt pos:start="83:9" pos:end="85:49"><expr pos:start="83:9" pos:end="85:48"><call pos:start="83:9" pos:end="85:48"><name pos:start="83:9" pos:end="83:24">error_setg_errno</name><argument_list pos:start="83:25" pos:end="85:48">(<argument pos:start="83:26" pos:end="83:29"><expr pos:start="83:26" pos:end="83:29"><name pos:start="83:26" pos:end="83:29">errp</name></expr></argument>, <argument pos:start="83:32" pos:end="83:61"><expr pos:start="83:32" pos:end="83:61"><ternary pos:start="83:32" pos:end="83:61"><condition pos:start="83:32" pos:end="83:40"><expr pos:start="83:32" pos:end="83:38"><name pos:start="83:32" pos:end="83:34">len</name> <operator pos:start="83:36" pos:end="83:36">&lt;</operator> <literal type="number" pos:start="83:38" pos:end="83:38">0</literal></expr> ?</condition><then pos:start="83:42" pos:end="83:46"> <expr pos:start="83:42" pos:end="83:46"><name pos:start="83:42" pos:end="83:46">errno</name></expr> </then><else pos:start="83:48" pos:end="83:61">: <expr pos:start="83:50" pos:end="83:61"><name pos:start="83:50" pos:end="83:61">ENAMETOOLONG</name></expr></else></ternary></expr></argument>,

                         <argument pos:start="85:26" pos:end="85:47"><expr pos:start="85:26" pos:end="85:47"><literal type="string" pos:start="85:26" pos:end="85:47">"no iommu_group found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:19">goto <name pos:start="87:14" pos:end="87:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:24"><expr pos:start="93:5" pos:end="93:23"><name pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:14">group_path</name><index pos:start="93:15" pos:end="93:19">[<expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">len</name></expr>]</index></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:38"><expr pos:start="97:5" pos:end="97:37"><name pos:start="97:5" pos:end="97:14">group_name</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <call pos:start="97:18" pos:end="97:37"><name pos:start="97:18" pos:end="97:25">basename</name><argument_list pos:start="97:26" pos:end="97:37">(<argument pos:start="97:27" pos:end="97:36"><expr pos:start="97:27" pos:end="97:36"><name pos:start="97:27" pos:end="97:36">group_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:48">(<expr pos:start="99:9" pos:end="99:47"><call pos:start="99:9" pos:end="99:42"><name pos:start="99:9" pos:end="99:14">sscanf</name><argument_list pos:start="99:15" pos:end="99:42">(<argument pos:start="99:16" pos:end="99:25"><expr pos:start="99:16" pos:end="99:25"><name pos:start="99:16" pos:end="99:25">group_name</name></expr></argument>, <argument pos:start="99:28" pos:end="99:31"><expr pos:start="99:28" pos:end="99:31"><literal type="string" pos:start="99:28" pos:end="99:31">"%d"</literal></expr></argument>, <argument pos:start="99:34" pos:end="99:41"><expr pos:start="99:34" pos:end="99:41"><operator pos:start="99:34" pos:end="99:34">&amp;</operator><name pos:start="99:35" pos:end="99:41">groupid</name></expr></argument>)</argument_list></call> <operator pos:start="99:44" pos:end="99:45">!=</operator> <literal type="number" pos:start="99:47" pos:end="99:47">1</literal></expr>)</condition> <block pos:start="99:50" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:19">

        <expr_stmt pos:start="101:9" pos:end="101:71"><expr pos:start="101:9" pos:end="101:70"><call pos:start="101:9" pos:end="101:70"><name pos:start="101:9" pos:end="101:24">error_setg_errno</name><argument_list pos:start="101:25" pos:end="101:70">(<argument pos:start="101:26" pos:end="101:29"><expr pos:start="101:26" pos:end="101:29"><name pos:start="101:26" pos:end="101:29">errp</name></expr></argument>, <argument pos:start="101:32" pos:end="101:36"><expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:36">errno</name></expr></argument>, <argument pos:start="101:39" pos:end="101:57"><expr pos:start="101:39" pos:end="101:57"><literal type="string" pos:start="101:39" pos:end="101:57">"failed to read %s"</literal></expr></argument>, <argument pos:start="101:60" pos:end="101:69"><expr pos:start="101:60" pos:end="101:69"><name pos:start="101:60" pos:end="101:69">group_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:19">goto <name pos:start="103:14" pos:end="103:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:53"><expr pos:start="109:5" pos:end="109:52"><call pos:start="109:5" pos:end="109:52"><name pos:start="109:5" pos:end="109:22">trace_vfio_realize</name><argument_list pos:start="109:23" pos:end="109:52">(<argument pos:start="109:24" pos:end="109:42"><expr pos:start="109:24" pos:end="109:42"><name pos:start="109:24" pos:end="109:42"><name pos:start="109:24" pos:end="109:27">vdev</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:37">vbasedev</name><operator pos:start="109:38" pos:end="109:38">.</operator><name pos:start="109:39" pos:end="109:42">name</name></name></expr></argument>, <argument pos:start="109:45" pos:end="109:51"><expr pos:start="109:45" pos:end="109:51"><name pos:start="109:45" pos:end="109:51">groupid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:80"><expr pos:start="113:5" pos:end="113:79"><name pos:start="113:5" pos:end="113:9">group</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <call pos:start="113:13" pos:end="113:79"><name pos:start="113:13" pos:end="113:26">vfio_get_group</name><argument_list pos:start="113:27" pos:end="113:79">(<argument pos:start="113:28" pos:end="113:34"><expr pos:start="113:28" pos:end="113:34"><name pos:start="113:28" pos:end="113:34">groupid</name></expr></argument>, <argument pos:start="113:37" pos:end="113:72"><expr pos:start="113:37" pos:end="113:72"><call pos:start="113:37" pos:end="113:72"><name pos:start="113:37" pos:end="113:66">pci_device_iommu_address_space</name><argument_list pos:start="113:67" pos:end="113:72">(<argument pos:start="113:68" pos:end="113:71"><expr pos:start="113:68" pos:end="113:71"><name pos:start="113:68" pos:end="113:71">pdev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:75" pos:end="113:78"><expr pos:start="113:75" pos:end="113:78"><name pos:start="113:75" pos:end="113:78">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:15">(<expr pos:start="115:9" pos:end="115:14"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:14">group</name></expr>)</condition> <block pos:start="115:17" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:19">

        <goto pos:start="117:9" pos:end="117:19">goto <name pos:start="117:14" pos:end="117:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="123:5" pos:end="123:59"><name pos:start="123:5" pos:end="123:17">QLIST_FOREACH</name><argument_list pos:start="123:18" pos:end="123:59">(<argument pos:start="123:19" pos:end="123:31">vbasedev_iter</argument>, <argument pos:start="123:34" pos:end="123:52">&amp;group-&gt;device_list</argument>, <argument pos:start="123:55" pos:end="123:58">next</argument>)</argument_list></macro> <block pos:start="123:61" pos:end="135:5">{<block_content pos:start="125:9" pos:end="133:9">

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:66">(<expr pos:start="125:13" pos:end="125:65"><call pos:start="125:13" pos:end="125:60"><name pos:start="125:13" pos:end="125:18">strcmp</name><argument_list pos:start="125:19" pos:end="125:60">(<argument pos:start="125:20" pos:end="125:38"><expr pos:start="125:20" pos:end="125:38"><name pos:start="125:20" pos:end="125:38"><name pos:start="125:20" pos:end="125:32">vbasedev_iter</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:38">name</name></name></expr></argument>, <argument pos:start="125:41" pos:end="125:59"><expr pos:start="125:41" pos:end="125:59"><name pos:start="125:41" pos:end="125:59"><name pos:start="125:41" pos:end="125:44">vdev</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:54">vbasedev</name><operator pos:start="125:55" pos:end="125:55">.</operator><name pos:start="125:56" pos:end="125:59">name</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:62" pos:end="125:63">==</operator> <literal type="number" pos:start="125:65" pos:end="125:65">0</literal></expr>)</condition> <block pos:start="125:68" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:23">

            <expr_stmt pos:start="127:13" pos:end="127:59"><expr pos:start="127:13" pos:end="127:58"><call pos:start="127:13" pos:end="127:58"><name pos:start="127:13" pos:end="127:22">error_setg</name><argument_list pos:start="127:23" pos:end="127:58">(<argument pos:start="127:24" pos:end="127:27"><expr pos:start="127:24" pos:end="127:27"><name pos:start="127:24" pos:end="127:27">errp</name></expr></argument>, <argument pos:start="127:30" pos:end="127:57"><expr pos:start="127:30" pos:end="127:57"><literal type="string" pos:start="127:30" pos:end="127:57">"device is already attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:34"><expr pos:start="129:13" pos:end="129:33"><call pos:start="129:13" pos:end="129:33"><name pos:start="129:13" pos:end="129:26">vfio_put_group</name><argument_list pos:start="129:27" pos:end="129:33">(<argument pos:start="129:28" pos:end="129:32"><expr pos:start="129:28" pos:end="129:32"><name pos:start="129:28" pos:end="129:32">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:23">goto <name pos:start="131:18" pos:end="131:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="139:5" pos:end="139:77"><expr pos:start="139:5" pos:end="139:76"><name pos:start="139:5" pos:end="139:7">ret</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="139:76"><name pos:start="139:11" pos:end="139:25">vfio_get_device</name><argument_list pos:start="139:26" pos:end="139:76">(<argument pos:start="139:27" pos:end="139:31"><expr pos:start="139:27" pos:end="139:31"><name pos:start="139:27" pos:end="139:31">group</name></expr></argument>, <argument pos:start="139:34" pos:end="139:52"><expr pos:start="139:34" pos:end="139:52"><name pos:start="139:34" pos:end="139:52"><name pos:start="139:34" pos:end="139:37">vdev</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:47">vbasedev</name><operator pos:start="139:48" pos:end="139:48">.</operator><name pos:start="139:49" pos:end="139:52">name</name></name></expr></argument>, <argument pos:start="139:55" pos:end="139:69"><expr pos:start="139:55" pos:end="139:69"><operator pos:start="139:55" pos:end="139:55">&amp;</operator><name pos:start="139:56" pos:end="139:69"><name pos:start="139:56" pos:end="139:59">vdev</name><operator pos:start="139:60" pos:end="139:61">-&gt;</operator><name pos:start="139:62" pos:end="139:69">vbasedev</name></name></expr></argument>, <argument pos:start="139:72" pos:end="139:75"><expr pos:start="139:72" pos:end="139:75"><name pos:start="139:72" pos:end="139:75">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:12">(<expr pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">ret</name></expr>)</condition> <block pos:start="141:14" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:19">

        <expr_stmt pos:start="143:9" pos:end="143:30"><expr pos:start="143:9" pos:end="143:29"><call pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:22">vfio_put_group</name><argument_list pos:start="143:23" pos:end="143:29">(<argument pos:start="143:24" pos:end="143:28"><expr pos:start="143:24" pos:end="143:28"><name pos:start="143:24" pos:end="143:28">group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:19">goto <name pos:start="145:14" pos:end="145:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:37"><expr pos:start="151:5" pos:end="151:36"><call pos:start="151:5" pos:end="151:36"><name pos:start="151:5" pos:end="151:24">vfio_populate_device</name><argument_list pos:start="151:25" pos:end="151:36">(<argument pos:start="151:26" pos:end="151:29"><expr pos:start="151:26" pos:end="151:29"><name pos:start="151:26" pos:end="151:29">vdev</name></expr></argument>, <argument pos:start="151:32" pos:end="151:35"><expr pos:start="151:32" pos:end="151:35"><operator pos:start="151:32" pos:end="151:32">&amp;</operator><name pos:start="151:33" pos:end="151:35">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:12">(<expr pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">err</name></expr>)</condition> <block pos:start="153:14" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:19">

        <expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><call pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:23">error_propagate</name><argument_list pos:start="155:24" pos:end="155:34">(<argument pos:start="155:25" pos:end="155:28"><expr pos:start="155:25" pos:end="155:28"><name pos:start="155:25" pos:end="155:28">errp</name></expr></argument>, <argument pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="157:9" pos:end="157:19">goto <name pos:start="157:14" pos:end="157:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:36">/* Get a copy of config space */</comment>

    <expr_stmt pos:start="165:5" pos:end="169:37"><expr pos:start="165:5" pos:end="169:36"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="169:36"><name pos:start="165:11" pos:end="165:15">pread</name><argument_list pos:start="165:16" pos:end="169:36">(<argument pos:start="165:17" pos:end="165:33"><expr pos:start="165:17" pos:end="165:33"><name pos:start="165:17" pos:end="165:33"><name pos:start="165:17" pos:end="165:20">vdev</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:30">vbasedev</name><operator pos:start="165:31" pos:end="165:31">.</operator><name pos:start="165:32" pos:end="165:33">fd</name></name></expr></argument>, <argument pos:start="165:36" pos:end="165:52"><expr pos:start="165:36" pos:end="165:52"><name pos:start="165:36" pos:end="165:52"><name pos:start="165:36" pos:end="165:39">vdev</name><operator pos:start="165:40" pos:end="165:41">-&gt;</operator><name pos:start="165:42" pos:end="165:45">pdev</name><operator pos:start="165:46" pos:end="165:46">.</operator><name pos:start="165:47" pos:end="165:52">config</name></name></expr></argument>,

                <argument pos:start="167:17" pos:end="167:68"><expr pos:start="167:17" pos:end="167:68"><call pos:start="167:17" pos:end="167:68"><name pos:start="167:17" pos:end="167:19">MIN</name><argument_list pos:start="167:20" pos:end="167:68">(<argument pos:start="167:21" pos:end="167:48"><expr pos:start="167:21" pos:end="167:48"><call pos:start="167:21" pos:end="167:48"><name pos:start="167:21" pos:end="167:35">pci_config_size</name><argument_list pos:start="167:36" pos:end="167:48">(<argument pos:start="167:37" pos:end="167:47"><expr pos:start="167:37" pos:end="167:47"><operator pos:start="167:37" pos:end="167:37">&amp;</operator><name pos:start="167:38" pos:end="167:47"><name pos:start="167:38" pos:end="167:41">vdev</name><operator pos:start="167:42" pos:end="167:43">-&gt;</operator><name pos:start="167:44" pos:end="167:47">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:51" pos:end="167:67"><expr pos:start="167:51" pos:end="167:67"><name pos:start="167:51" pos:end="167:67"><name pos:start="167:51" pos:end="167:54">vdev</name><operator pos:start="167:55" pos:end="167:56">-&gt;</operator><name pos:start="167:57" pos:end="167:67">config_size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="169:17" pos:end="169:35"><expr pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:35"><name pos:start="169:17" pos:end="169:20">vdev</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:35">config_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="179:5"><if pos:start="171:5" pos:end="179:5">if <condition pos:start="171:8" pos:end="171:72">(<expr pos:start="171:9" pos:end="171:71"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">&lt;</operator> <operator pos:start="171:15" pos:end="171:15">(</operator><name pos:start="171:16" pos:end="171:18">int</name><operator pos:start="171:19" pos:end="171:19">)</operator><call pos:start="171:20" pos:end="171:71"><name pos:start="171:20" pos:end="171:22">MIN</name><argument_list pos:start="171:23" pos:end="171:71">(<argument pos:start="171:24" pos:end="171:51"><expr pos:start="171:24" pos:end="171:51"><call pos:start="171:24" pos:end="171:51"><name pos:start="171:24" pos:end="171:38">pci_config_size</name><argument_list pos:start="171:39" pos:end="171:51">(<argument pos:start="171:40" pos:end="171:50"><expr pos:start="171:40" pos:end="171:50"><operator pos:start="171:40" pos:end="171:40">&amp;</operator><name pos:start="171:41" pos:end="171:50"><name pos:start="171:41" pos:end="171:44">vdev</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:50">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:54" pos:end="171:70"><expr pos:start="171:54" pos:end="171:70"><name pos:start="171:54" pos:end="171:70"><name pos:start="171:54" pos:end="171:57">vdev</name><operator pos:start="171:58" pos:end="171:59">-&gt;</operator><name pos:start="171:60" pos:end="171:70">config_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:74" pos:end="179:5">{<block_content pos:start="173:9" pos:end="177:19">

        <expr_stmt pos:start="173:9" pos:end="173:41"><expr pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <ternary pos:start="173:15" pos:end="173:40"><condition pos:start="173:15" pos:end="173:23"><expr pos:start="173:15" pos:end="173:21"><name pos:start="173:15" pos:end="173:17">ret</name> <operator pos:start="173:19" pos:end="173:19">&lt;</operator> <literal type="number" pos:start="173:21" pos:end="173:21">0</literal></expr> ?</condition><then pos:start="173:25" pos:end="173:30"> <expr pos:start="173:25" pos:end="173:30"><operator pos:start="173:25" pos:end="173:25">-</operator><name pos:start="173:26" pos:end="173:30">errno</name></expr> </then><else pos:start="173:32" pos:end="173:40">: <expr pos:start="173:34" pos:end="173:40"><operator pos:start="173:34" pos:end="173:34">-</operator><name pos:start="173:35" pos:end="173:40">EFAULT</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:75"><expr pos:start="175:9" pos:end="175:74"><call pos:start="175:9" pos:end="175:74"><name pos:start="175:9" pos:end="175:24">error_setg_errno</name><argument_list pos:start="175:25" pos:end="175:74">(<argument pos:start="175:26" pos:end="175:29"><expr pos:start="175:26" pos:end="175:29"><name pos:start="175:26" pos:end="175:29">errp</name></expr></argument>, <argument pos:start="175:32" pos:end="175:35"><expr pos:start="175:32" pos:end="175:35"><operator pos:start="175:32" pos:end="175:32">-</operator><name pos:start="175:33" pos:end="175:35">ret</name></expr></argument>, <argument pos:start="175:38" pos:end="175:73"><expr pos:start="175:38" pos:end="175:73"><literal type="string" pos:start="175:38" pos:end="175:73">"failed to read device config space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="177:9" pos:end="177:19">goto <name pos:start="177:14" pos:end="177:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:67">/* vfio emulates a lot for us, but some bits need extra love */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:62"><expr pos:start="185:5" pos:end="185:61"><name pos:start="185:5" pos:end="185:30"><name pos:start="185:5" pos:end="185:8">vdev</name><operator pos:start="185:9" pos:end="185:10">-&gt;</operator><name pos:start="185:11" pos:end="185:30">emulated_config_bits</name></name> <operator pos:start="185:32" pos:end="185:32">=</operator> <call pos:start="185:34" pos:end="185:61"><name pos:start="185:34" pos:end="185:42">g_malloc0</name><argument_list pos:start="185:43" pos:end="185:61">(<argument pos:start="185:44" pos:end="185:60"><expr pos:start="185:44" pos:end="185:60"><name pos:start="185:44" pos:end="185:60"><name pos:start="185:44" pos:end="185:47">vdev</name><operator pos:start="185:48" pos:end="185:49">-&gt;</operator><name pos:start="185:50" pos:end="185:60">config_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:50">/* QEMU can choose to expose the ROM or not */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:66"><expr pos:start="191:5" pos:end="191:65"><call pos:start="191:5" pos:end="191:65"><name pos:start="191:5" pos:end="191:10">memset</name><argument_list pos:start="191:11" pos:end="191:65">(<argument pos:start="191:12" pos:end="191:55"><expr pos:start="191:12" pos:end="191:55"><name pos:start="191:12" pos:end="191:37"><name pos:start="191:12" pos:end="191:15">vdev</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:37">emulated_config_bits</name></name> <operator pos:start="191:39" pos:end="191:39">+</operator> <name pos:start="191:41" pos:end="191:55">PCI_ROM_ADDRESS</name></expr></argument>, <argument pos:start="191:58" pos:end="191:61"><expr pos:start="191:58" pos:end="191:61"><literal type="number" pos:start="191:58" pos:end="191:61">0xff</literal></expr></argument>, <argument pos:start="191:64" pos:end="191:64"><expr pos:start="191:64" pos:end="191:64"><literal type="number" pos:start="191:64" pos:end="191:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="195:5" pos:end="203:7">/*

     * The PCI spec reserves vendor ID 0xffff as an invalid value.  The

     * device ID is managed by the vendor and need only be a 16-bit value.

     * Allow any 16-bit value for subsystem so they can be hidden or changed.

     */</comment>

    <if_stmt pos:start="205:5" pos:end="223:5"><if pos:start="205:5" pos:end="219:5">if <condition pos:start="205:8" pos:end="205:38">(<expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:12">vdev</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:23">vendor_id</name></name> <operator pos:start="205:25" pos:end="205:26">!=</operator> <name pos:start="205:28" pos:end="205:37">PCI_ANY_ID</name></expr>)</condition> <block pos:start="205:40" pos:end="219:5">{<block_content pos:start="207:9" pos:end="217:80">

        <if_stmt pos:start="207:9" pos:end="213:9"><if pos:start="207:9" pos:end="213:9">if <condition pos:start="207:12" pos:end="207:38">(<expr pos:start="207:13" pos:end="207:37"><name pos:start="207:13" pos:end="207:27"><name pos:start="207:13" pos:end="207:16">vdev</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:27">vendor_id</name></name> <operator pos:start="207:29" pos:end="207:30">&gt;=</operator> <literal type="number" pos:start="207:32" pos:end="207:37">0xffff</literal></expr>)</condition> <block pos:start="207:40" pos:end="213:9">{<block_content pos:start="209:13" pos:end="211:23">

            <expr_stmt pos:start="209:13" pos:end="209:63"><expr pos:start="209:13" pos:end="209:62"><call pos:start="209:13" pos:end="209:62"><name pos:start="209:13" pos:end="209:22">error_setg</name><argument_list pos:start="209:23" pos:end="209:62">(<argument pos:start="209:24" pos:end="209:27"><expr pos:start="209:24" pos:end="209:27"><name pos:start="209:24" pos:end="209:27">errp</name></expr></argument>, <argument pos:start="209:30" pos:end="209:61"><expr pos:start="209:30" pos:end="209:61"><literal type="string" pos:start="209:30" pos:end="209:61">"invalid PCI vendor ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="211:13" pos:end="211:23">goto <name pos:start="211:18" pos:end="211:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:73"><expr pos:start="215:9" pos:end="215:72"><call pos:start="215:9" pos:end="215:72"><name pos:start="215:9" pos:end="215:30">vfio_add_emulated_word</name><argument_list pos:start="215:31" pos:end="215:72">(<argument pos:start="215:32" pos:end="215:35"><expr pos:start="215:32" pos:end="215:35"><name pos:start="215:32" pos:end="215:35">vdev</name></expr></argument>, <argument pos:start="215:38" pos:end="215:50"><expr pos:start="215:38" pos:end="215:50"><name pos:start="215:38" pos:end="215:50">PCI_VENDOR_ID</name></expr></argument>, <argument pos:start="215:53" pos:end="215:67"><expr pos:start="215:53" pos:end="215:67"><name pos:start="215:53" pos:end="215:67"><name pos:start="215:53" pos:end="215:56">vdev</name><operator pos:start="215:57" pos:end="215:58">-&gt;</operator><name pos:start="215:59" pos:end="215:67">vendor_id</name></name></expr></argument>, <argument pos:start="215:70" pos:end="215:71"><expr pos:start="215:70" pos:end="215:71"><operator pos:start="215:70" pos:end="215:70">~</operator><literal type="number" pos:start="215:71" pos:end="215:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:80"><expr pos:start="217:9" pos:end="217:79"><call pos:start="217:9" pos:end="217:79"><name pos:start="217:9" pos:end="217:41">trace_vfio_pci_emulated_vendor_id</name><argument_list pos:start="217:42" pos:end="217:79">(<argument pos:start="217:43" pos:end="217:61"><expr pos:start="217:43" pos:end="217:61"><name pos:start="217:43" pos:end="217:61"><name pos:start="217:43" pos:end="217:46">vdev</name><operator pos:start="217:47" pos:end="217:48">-&gt;</operator><name pos:start="217:49" pos:end="217:56">vbasedev</name><operator pos:start="217:57" pos:end="217:57">.</operator><name pos:start="217:58" pos:end="217:61">name</name></name></expr></argument>, <argument pos:start="217:64" pos:end="217:78"><expr pos:start="217:64" pos:end="217:78"><name pos:start="217:64" pos:end="217:78"><name pos:start="217:64" pos:end="217:67">vdev</name><operator pos:start="217:68" pos:end="217:69">-&gt;</operator><name pos:start="217:70" pos:end="217:78">vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="219:7" pos:end="223:5">else <block pos:start="219:12" pos:end="223:5">{<block_content pos:start="221:9" pos:end="221:69">

        <expr_stmt pos:start="221:9" pos:end="221:69"><expr pos:start="221:9" pos:end="221:68"><name pos:start="221:9" pos:end="221:23"><name pos:start="221:9" pos:end="221:12">vdev</name><operator pos:start="221:13" pos:end="221:14">-&gt;</operator><name pos:start="221:15" pos:end="221:23">vendor_id</name></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <call pos:start="221:27" pos:end="221:68"><name pos:start="221:27" pos:end="221:38">pci_get_word</name><argument_list pos:start="221:39" pos:end="221:68">(<argument pos:start="221:40" pos:end="221:67"><expr pos:start="221:40" pos:end="221:67"><name pos:start="221:40" pos:end="221:51"><name pos:start="221:40" pos:end="221:43">pdev</name><operator pos:start="221:44" pos:end="221:45">-&gt;</operator><name pos:start="221:46" pos:end="221:51">config</name></name> <operator pos:start="221:53" pos:end="221:53">+</operator> <name pos:start="221:55" pos:end="221:67">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="227:5" pos:end="245:5"><if pos:start="227:5" pos:end="241:5">if <condition pos:start="227:8" pos:end="227:38">(<expr pos:start="227:9" pos:end="227:37"><name pos:start="227:9" pos:end="227:23"><name pos:start="227:9" pos:end="227:12">vdev</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:23">device_id</name></name> <operator pos:start="227:25" pos:end="227:26">!=</operator> <name pos:start="227:28" pos:end="227:37">PCI_ANY_ID</name></expr>)</condition> <block pos:start="227:40" pos:end="241:5">{<block_content pos:start="229:9" pos:end="239:80">

        <if_stmt pos:start="229:9" pos:end="235:9"><if pos:start="229:9" pos:end="235:9">if <condition pos:start="229:12" pos:end="229:37">(<expr pos:start="229:13" pos:end="229:36"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:16">vdev</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:27">device_id</name></name> <operator pos:start="229:29" pos:end="229:29">&gt;</operator> <literal type="number" pos:start="229:31" pos:end="229:36">0xffff</literal></expr>)</condition> <block pos:start="229:39" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:23">

            <expr_stmt pos:start="231:13" pos:end="231:63"><expr pos:start="231:13" pos:end="231:62"><call pos:start="231:13" pos:end="231:62"><name pos:start="231:13" pos:end="231:22">error_setg</name><argument_list pos:start="231:23" pos:end="231:62">(<argument pos:start="231:24" pos:end="231:27"><expr pos:start="231:24" pos:end="231:27"><name pos:start="231:24" pos:end="231:27">errp</name></expr></argument>, <argument pos:start="231:30" pos:end="231:61"><expr pos:start="231:30" pos:end="231:61"><literal type="string" pos:start="231:30" pos:end="231:61">"invalid PCI device ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="233:13" pos:end="233:23">goto <name pos:start="233:18" pos:end="233:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:73"><expr pos:start="237:9" pos:end="237:72"><call pos:start="237:9" pos:end="237:72"><name pos:start="237:9" pos:end="237:30">vfio_add_emulated_word</name><argument_list pos:start="237:31" pos:end="237:72">(<argument pos:start="237:32" pos:end="237:35"><expr pos:start="237:32" pos:end="237:35"><name pos:start="237:32" pos:end="237:35">vdev</name></expr></argument>, <argument pos:start="237:38" pos:end="237:50"><expr pos:start="237:38" pos:end="237:50"><name pos:start="237:38" pos:end="237:50">PCI_DEVICE_ID</name></expr></argument>, <argument pos:start="237:53" pos:end="237:67"><expr pos:start="237:53" pos:end="237:67"><name pos:start="237:53" pos:end="237:67"><name pos:start="237:53" pos:end="237:56">vdev</name><operator pos:start="237:57" pos:end="237:58">-&gt;</operator><name pos:start="237:59" pos:end="237:67">device_id</name></name></expr></argument>, <argument pos:start="237:70" pos:end="237:71"><expr pos:start="237:70" pos:end="237:71"><operator pos:start="237:70" pos:end="237:70">~</operator><literal type="number" pos:start="237:71" pos:end="237:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:80"><expr pos:start="239:9" pos:end="239:79"><call pos:start="239:9" pos:end="239:79"><name pos:start="239:9" pos:end="239:41">trace_vfio_pci_emulated_device_id</name><argument_list pos:start="239:42" pos:end="239:79">(<argument pos:start="239:43" pos:end="239:61"><expr pos:start="239:43" pos:end="239:61"><name pos:start="239:43" pos:end="239:61"><name pos:start="239:43" pos:end="239:46">vdev</name><operator pos:start="239:47" pos:end="239:48">-&gt;</operator><name pos:start="239:49" pos:end="239:56">vbasedev</name><operator pos:start="239:57" pos:end="239:57">.</operator><name pos:start="239:58" pos:end="239:61">name</name></name></expr></argument>, <argument pos:start="239:64" pos:end="239:78"><expr pos:start="239:64" pos:end="239:78"><name pos:start="239:64" pos:end="239:78"><name pos:start="239:64" pos:end="239:67">vdev</name><operator pos:start="239:68" pos:end="239:69">-&gt;</operator><name pos:start="239:70" pos:end="239:78">device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="241:7" pos:end="245:5">else <block pos:start="241:12" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:69">

        <expr_stmt pos:start="243:9" pos:end="243:69"><expr pos:start="243:9" pos:end="243:68"><name pos:start="243:9" pos:end="243:23"><name pos:start="243:9" pos:end="243:12">vdev</name><operator pos:start="243:13" pos:end="243:14">-&gt;</operator><name pos:start="243:15" pos:end="243:23">device_id</name></name> <operator pos:start="243:25" pos:end="243:25">=</operator> <call pos:start="243:27" pos:end="243:68"><name pos:start="243:27" pos:end="243:38">pci_get_word</name><argument_list pos:start="243:39" pos:end="243:68">(<argument pos:start="243:40" pos:end="243:67"><expr pos:start="243:40" pos:end="243:67"><name pos:start="243:40" pos:end="243:51"><name pos:start="243:40" pos:end="243:43">pdev</name><operator pos:start="243:44" pos:end="243:45">-&gt;</operator><name pos:start="243:46" pos:end="243:51">config</name></name> <operator pos:start="243:53" pos:end="243:53">+</operator> <name pos:start="243:55" pos:end="243:67">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="249:5" pos:end="267:5"><if pos:start="249:5" pos:end="267:5">if <condition pos:start="249:8" pos:end="249:42">(<expr pos:start="249:9" pos:end="249:41"><name pos:start="249:9" pos:end="249:27"><name pos:start="249:9" pos:end="249:12">vdev</name><operator pos:start="249:13" pos:end="249:14">-&gt;</operator><name pos:start="249:15" pos:end="249:27">sub_vendor_id</name></name> <operator pos:start="249:29" pos:end="249:30">!=</operator> <name pos:start="249:32" pos:end="249:41">PCI_ANY_ID</name></expr>)</condition> <block pos:start="249:44" pos:end="267:5">{<block_content pos:start="251:9" pos:end="265:67">

        <if_stmt pos:start="251:9" pos:end="257:9"><if pos:start="251:9" pos:end="257:9">if <condition pos:start="251:12" pos:end="251:41">(<expr pos:start="251:13" pos:end="251:40"><name pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:16">vdev</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:31">sub_vendor_id</name></name> <operator pos:start="251:33" pos:end="251:33">&gt;</operator> <literal type="number" pos:start="251:35" pos:end="251:40">0xffff</literal></expr>)</condition> <block pos:start="251:43" pos:end="257:9">{<block_content pos:start="253:13" pos:end="255:23">

            <expr_stmt pos:start="253:13" pos:end="253:73"><expr pos:start="253:13" pos:end="253:72"><call pos:start="253:13" pos:end="253:72"><name pos:start="253:13" pos:end="253:22">error_setg</name><argument_list pos:start="253:23" pos:end="253:72">(<argument pos:start="253:24" pos:end="253:27"><expr pos:start="253:24" pos:end="253:27"><name pos:start="253:24" pos:end="253:27">errp</name></expr></argument>, <argument pos:start="253:30" pos:end="253:71"><expr pos:start="253:30" pos:end="253:71"><literal type="string" pos:start="253:30" pos:end="253:71">"invalid PCI subsystem vendor ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="255:13" pos:end="255:23">goto <name pos:start="255:18" pos:end="255:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="259:9" pos:end="261:56"><expr pos:start="259:9" pos:end="261:55"><call pos:start="259:9" pos:end="261:55"><name pos:start="259:9" pos:end="259:30">vfio_add_emulated_word</name><argument_list pos:start="259:31" pos:end="261:55">(<argument pos:start="259:32" pos:end="259:35"><expr pos:start="259:32" pos:end="259:35"><name pos:start="259:32" pos:end="259:35">vdev</name></expr></argument>, <argument pos:start="259:38" pos:end="259:60"><expr pos:start="259:38" pos:end="259:60"><name pos:start="259:38" pos:end="259:60">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>,

                               <argument pos:start="261:32" pos:end="261:50"><expr pos:start="261:32" pos:end="261:50"><name pos:start="261:32" pos:end="261:50"><name pos:start="261:32" pos:end="261:35">vdev</name><operator pos:start="261:36" pos:end="261:37">-&gt;</operator><name pos:start="261:38" pos:end="261:50">sub_vendor_id</name></name></expr></argument>, <argument pos:start="261:53" pos:end="261:54"><expr pos:start="261:53" pos:end="261:54"><operator pos:start="261:53" pos:end="261:53">~</operator><literal type="number" pos:start="261:54" pos:end="261:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="265:67"><expr pos:start="263:9" pos:end="265:66"><call pos:start="263:9" pos:end="265:66"><name pos:start="263:9" pos:end="263:45">trace_vfio_pci_emulated_sub_vendor_id</name><argument_list pos:start="263:46" pos:end="265:66">(<argument pos:start="263:47" pos:end="263:65"><expr pos:start="263:47" pos:end="263:65"><name pos:start="263:47" pos:end="263:65"><name pos:start="263:47" pos:end="263:50">vdev</name><operator pos:start="263:51" pos:end="263:52">-&gt;</operator><name pos:start="263:53" pos:end="263:60">vbasedev</name><operator pos:start="263:61" pos:end="263:61">.</operator><name pos:start="263:62" pos:end="263:65">name</name></name></expr></argument>,

                                              <argument pos:start="265:47" pos:end="265:65"><expr pos:start="265:47" pos:end="265:65"><name pos:start="265:47" pos:end="265:65"><name pos:start="265:47" pos:end="265:50">vdev</name><operator pos:start="265:51" pos:end="265:52">-&gt;</operator><name pos:start="265:53" pos:end="265:65">sub_vendor_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="287:5"><if pos:start="271:5" pos:end="287:5">if <condition pos:start="271:8" pos:end="271:42">(<expr pos:start="271:9" pos:end="271:41"><name pos:start="271:9" pos:end="271:27"><name pos:start="271:9" pos:end="271:12">vdev</name><operator pos:start="271:13" pos:end="271:14">-&gt;</operator><name pos:start="271:15" pos:end="271:27">sub_device_id</name></name> <operator pos:start="271:29" pos:end="271:30">!=</operator> <name pos:start="271:32" pos:end="271:41">PCI_ANY_ID</name></expr>)</condition> <block pos:start="271:44" pos:end="287:5">{<block_content pos:start="273:9" pos:end="285:67">

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:41">(<expr pos:start="273:13" pos:end="273:40"><name pos:start="273:13" pos:end="273:31"><name pos:start="273:13" pos:end="273:16">vdev</name><operator pos:start="273:17" pos:end="273:18">-&gt;</operator><name pos:start="273:19" pos:end="273:31">sub_device_id</name></name> <operator pos:start="273:33" pos:end="273:33">&gt;</operator> <literal type="number" pos:start="273:35" pos:end="273:40">0xffff</literal></expr>)</condition> <block pos:start="273:43" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:23">

            <expr_stmt pos:start="275:13" pos:end="275:73"><expr pos:start="275:13" pos:end="275:72"><call pos:start="275:13" pos:end="275:72"><name pos:start="275:13" pos:end="275:22">error_setg</name><argument_list pos:start="275:23" pos:end="275:72">(<argument pos:start="275:24" pos:end="275:27"><expr pos:start="275:24" pos:end="275:27"><name pos:start="275:24" pos:end="275:27">errp</name></expr></argument>, <argument pos:start="275:30" pos:end="275:71"><expr pos:start="275:30" pos:end="275:71"><literal type="string" pos:start="275:30" pos:end="275:71">"invalid PCI subsystem device ID provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="277:13" pos:end="277:23">goto <name pos:start="277:18" pos:end="277:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:80"><expr pos:start="281:9" pos:end="281:79"><call pos:start="281:9" pos:end="281:79"><name pos:start="281:9" pos:end="281:30">vfio_add_emulated_word</name><argument_list pos:start="281:31" pos:end="281:79">(<argument pos:start="281:32" pos:end="281:35"><expr pos:start="281:32" pos:end="281:35"><name pos:start="281:32" pos:end="281:35">vdev</name></expr></argument>, <argument pos:start="281:38" pos:end="281:53"><expr pos:start="281:38" pos:end="281:53"><name pos:start="281:38" pos:end="281:53">PCI_SUBSYSTEM_ID</name></expr></argument>, <argument pos:start="281:56" pos:end="281:74"><expr pos:start="281:56" pos:end="281:74"><name pos:start="281:56" pos:end="281:74"><name pos:start="281:56" pos:end="281:59">vdev</name><operator pos:start="281:60" pos:end="281:61">-&gt;</operator><name pos:start="281:62" pos:end="281:74">sub_device_id</name></name></expr></argument>, <argument pos:start="281:77" pos:end="281:78"><expr pos:start="281:77" pos:end="281:78"><operator pos:start="281:77" pos:end="281:77">~</operator><literal type="number" pos:start="281:78" pos:end="281:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="285:67"><expr pos:start="283:9" pos:end="285:66"><call pos:start="283:9" pos:end="285:66"><name pos:start="283:9" pos:end="283:45">trace_vfio_pci_emulated_sub_device_id</name><argument_list pos:start="283:46" pos:end="285:66">(<argument pos:start="283:47" pos:end="283:65"><expr pos:start="283:47" pos:end="283:65"><name pos:start="283:47" pos:end="283:65"><name pos:start="283:47" pos:end="283:50">vdev</name><operator pos:start="283:51" pos:end="283:52">-&gt;</operator><name pos:start="283:53" pos:end="283:60">vbasedev</name><operator pos:start="283:61" pos:end="283:61">.</operator><name pos:start="283:62" pos:end="283:65">name</name></name></expr></argument>,

                                              <argument pos:start="285:47" pos:end="285:65"><expr pos:start="285:47" pos:end="285:65"><name pos:start="285:47" pos:end="285:65"><name pos:start="285:47" pos:end="285:50">vdev</name><operator pos:start="285:51" pos:end="285:52">-&gt;</operator><name pos:start="285:53" pos:end="285:65">sub_device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:79">/* QEMU can change multi-function devices to single function, or reverse */</comment>

    <expr_stmt pos:start="293:5" pos:end="295:77"><expr pos:start="293:5" pos:end="295:76"><name pos:start="293:5" pos:end="293:47"><name pos:start="293:5" pos:end="293:8">vdev</name><operator pos:start="293:9" pos:end="293:10">-&gt;</operator><name pos:start="293:11" pos:end="293:30">emulated_config_bits</name><index pos:start="293:31" pos:end="293:47">[<expr pos:start="293:32" pos:end="293:46"><name pos:start="293:32" pos:end="293:46">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="293:49" pos:end="293:49">=</operator>

                                              <name pos:start="295:47" pos:end="295:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>



    <comment type="block" pos:start="299:5" pos:end="299:75">/* Restore or clear multifunction, this is always controlled by QEMU */</comment>

    <if_stmt pos:start="301:5" pos:end="309:5"><if pos:start="301:5" pos:end="305:5">if <condition pos:start="301:8" pos:end="301:60">(<expr pos:start="301:9" pos:end="301:59"><name pos:start="301:9" pos:end="301:30"><name pos:start="301:9" pos:end="301:12">vdev</name><operator pos:start="301:13" pos:end="301:14">-&gt;</operator><name pos:start="301:15" pos:end="301:18">pdev</name><operator pos:start="301:19" pos:end="301:19">.</operator><name pos:start="301:20" pos:end="301:30">cap_present</name></name> <operator pos:start="301:32" pos:end="301:32">&amp;</operator> <name pos:start="301:34" pos:end="301:59">QEMU_PCI_CAP_MULTIFUNCTION</name></expr>)</condition> <block pos:start="301:62" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:77">

        <expr_stmt pos:start="303:9" pos:end="303:77"><expr pos:start="303:9" pos:end="303:76"><name pos:start="303:9" pos:end="303:42"><name pos:start="303:9" pos:end="303:12">vdev</name><operator pos:start="303:13" pos:end="303:14">-&gt;</operator><name pos:start="303:15" pos:end="303:18">pdev</name><operator pos:start="303:19" pos:end="303:19">.</operator><name pos:start="303:20" pos:end="303:25">config</name><index pos:start="303:26" pos:end="303:42">[<expr pos:start="303:27" pos:end="303:41"><name pos:start="303:27" pos:end="303:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="303:44" pos:end="303:45">|=</operator> <name pos:start="303:47" pos:end="303:76">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="309:5">else <block pos:start="305:12" pos:end="309:5">{<block_content pos:start="307:9" pos:end="307:78">

        <expr_stmt pos:start="307:9" pos:end="307:78"><expr pos:start="307:9" pos:end="307:77"><name pos:start="307:9" pos:end="307:42"><name pos:start="307:9" pos:end="307:12">vdev</name><operator pos:start="307:13" pos:end="307:14">-&gt;</operator><name pos:start="307:15" pos:end="307:18">pdev</name><operator pos:start="307:19" pos:end="307:19">.</operator><name pos:start="307:20" pos:end="307:25">config</name><index pos:start="307:26" pos:end="307:42">[<expr pos:start="307:27" pos:end="307:41"><name pos:start="307:27" pos:end="307:41">PCI_HEADER_TYPE</name></expr>]</index></name> <operator pos:start="307:44" pos:end="307:45">&amp;=</operator> <operator pos:start="307:47" pos:end="307:47">~</operator><name pos:start="307:48" pos:end="307:77">PCI_HEADER_TYPE_MULTI_FUNCTION</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="313:5" pos:end="321:7">/*

     * Clear host resource mapping info.  If we choose not to register a

     * BAR, such as might be the case with the option ROM, we can get

     * confusing, unwritable, residual addresses from the host here.

     */</comment>

    <expr_stmt pos:start="323:5" pos:end="323:58"><expr pos:start="323:5" pos:end="323:57"><call pos:start="323:5" pos:end="323:57"><name pos:start="323:5" pos:end="323:10">memset</name><argument_list pos:start="323:11" pos:end="323:57">(<argument pos:start="323:12" pos:end="323:49"><expr pos:start="323:12" pos:end="323:49"><operator pos:start="323:12" pos:end="323:12">&amp;</operator><name pos:start="323:13" pos:end="323:49"><name pos:start="323:13" pos:end="323:16">vdev</name><operator pos:start="323:17" pos:end="323:18">-&gt;</operator><name pos:start="323:19" pos:end="323:22">pdev</name><operator pos:start="323:23" pos:end="323:23">.</operator><name pos:start="323:24" pos:end="323:29">config</name><index pos:start="323:30" pos:end="323:49">[<expr pos:start="323:31" pos:end="323:48"><name pos:start="323:31" pos:end="323:48">PCI_BASE_ADDRESS_0</name></expr>]</index></name></expr></argument>, <argument pos:start="323:52" pos:end="323:52"><expr pos:start="323:52" pos:end="323:52"><literal type="number" pos:start="323:52" pos:end="323:52">0</literal></expr></argument>, <argument pos:start="323:55" pos:end="323:56"><expr pos:start="323:55" pos:end="323:56"><literal type="number" pos:start="323:55" pos:end="323:56">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:54"><expr pos:start="325:5" pos:end="325:53"><call pos:start="325:5" pos:end="325:53"><name pos:start="325:5" pos:end="325:10">memset</name><argument_list pos:start="325:11" pos:end="325:53">(<argument pos:start="325:12" pos:end="325:46"><expr pos:start="325:12" pos:end="325:46"><operator pos:start="325:12" pos:end="325:12">&amp;</operator><name pos:start="325:13" pos:end="325:46"><name pos:start="325:13" pos:end="325:16">vdev</name><operator pos:start="325:17" pos:end="325:18">-&gt;</operator><name pos:start="325:19" pos:end="325:22">pdev</name><operator pos:start="325:23" pos:end="325:23">.</operator><name pos:start="325:24" pos:end="325:29">config</name><index pos:start="325:30" pos:end="325:46">[<expr pos:start="325:31" pos:end="325:45"><name pos:start="325:31" pos:end="325:45">PCI_ROM_ADDRESS</name></expr>]</index></name></expr></argument>, <argument pos:start="325:49" pos:end="325:49"><expr pos:start="325:49" pos:end="325:49"><literal type="number" pos:start="325:49" pos:end="325:49">0</literal></expr></argument>, <argument pos:start="325:52" pos:end="325:52"><expr pos:start="325:52" pos:end="325:52"><literal type="number" pos:start="325:52" pos:end="325:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:28"><expr pos:start="329:5" pos:end="329:27"><call pos:start="329:5" pos:end="329:27"><name pos:start="329:5" pos:end="329:21">vfio_pci_size_rom</name><argument_list pos:start="329:22" pos:end="329:27">(<argument pos:start="329:23" pos:end="329:26"><expr pos:start="329:23" pos:end="329:26"><name pos:start="329:23" pos:end="329:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="333:5" pos:end="333:38"><expr pos:start="333:5" pos:end="333:37"><call pos:start="333:5" pos:end="333:37"><name pos:start="333:5" pos:end="333:25">vfio_msix_early_setup</name><argument_list pos:start="333:26" pos:end="333:37">(<argument pos:start="333:27" pos:end="333:30"><expr pos:start="333:27" pos:end="333:30"><name pos:start="333:27" pos:end="333:30">vdev</name></expr></argument>, <argument pos:start="333:33" pos:end="333:36"><expr pos:start="333:33" pos:end="333:36"><operator pos:start="333:33" pos:end="333:33">&amp;</operator><name pos:start="333:34" pos:end="333:36">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="335:5" pos:end="341:5"><if pos:start="335:5" pos:end="341:5">if <condition pos:start="335:8" pos:end="335:12">(<expr pos:start="335:9" pos:end="335:11"><name pos:start="335:9" pos:end="335:11">err</name></expr>)</condition> <block pos:start="335:14" pos:end="341:5">{<block_content pos:start="337:9" pos:end="339:19">

        <expr_stmt pos:start="337:9" pos:end="337:35"><expr pos:start="337:9" pos:end="337:34"><call pos:start="337:9" pos:end="337:34"><name pos:start="337:9" pos:end="337:23">error_propagate</name><argument_list pos:start="337:24" pos:end="337:34">(<argument pos:start="337:25" pos:end="337:28"><expr pos:start="337:25" pos:end="337:28"><name pos:start="337:25" pos:end="337:28">errp</name></expr></argument>, <argument pos:start="337:31" pos:end="337:33"><expr pos:start="337:31" pos:end="337:33"><name pos:start="337:31" pos:end="337:33">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="339:9" pos:end="339:19">goto <name pos:start="339:14" pos:end="339:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:26"><expr pos:start="345:5" pos:end="345:25"><call pos:start="345:5" pos:end="345:25"><name pos:start="345:5" pos:end="345:19">vfio_bars_setup</name><argument_list pos:start="345:20" pos:end="345:25">(<argument pos:start="345:21" pos:end="345:24"><expr pos:start="345:21" pos:end="345:24"><name pos:start="345:21" pos:end="345:24">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="349:5" pos:end="349:44"><expr pos:start="349:5" pos:end="349:43"><name pos:start="349:5" pos:end="349:7">ret</name> <operator pos:start="349:9" pos:end="349:9">=</operator> <call pos:start="349:11" pos:end="349:43"><name pos:start="349:11" pos:end="349:31">vfio_add_capabilities</name><argument_list pos:start="349:32" pos:end="349:43">(<argument pos:start="349:33" pos:end="349:36"><expr pos:start="349:33" pos:end="349:36"><name pos:start="349:33" pos:end="349:36">vdev</name></expr></argument>, <argument pos:start="349:39" pos:end="349:42"><expr pos:start="349:39" pos:end="349:42"><name pos:start="349:39" pos:end="349:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="351:5" pos:end="355:5"><if pos:start="351:5" pos:end="355:5">if <condition pos:start="351:8" pos:end="351:12">(<expr pos:start="351:9" pos:end="351:11"><name pos:start="351:9" pos:end="351:11">ret</name></expr>)</condition> <block pos:start="351:14" pos:end="355:5">{<block_content pos:start="353:9" pos:end="353:26">

        <goto pos:start="353:9" pos:end="353:26">goto <name pos:start="353:14" pos:end="353:25">out_teardown</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="359:5" pos:end="363:5"><if pos:start="359:5" pos:end="363:5">if <condition pos:start="359:8" pos:end="359:18">(<expr pos:start="359:9" pos:end="359:17"><name pos:start="359:9" pos:end="359:17"><name pos:start="359:9" pos:end="359:12">vdev</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:17">vga</name></name></expr>)</condition> <block pos:start="359:20" pos:end="363:5">{<block_content pos:start="361:9" pos:end="361:35">

        <expr_stmt pos:start="361:9" pos:end="361:35"><expr pos:start="361:9" pos:end="361:34"><call pos:start="361:9" pos:end="361:34"><name pos:start="361:9" pos:end="361:28">vfio_vga_quirk_setup</name><argument_list pos:start="361:29" pos:end="361:34">(<argument pos:start="361:30" pos:end="361:33"><expr pos:start="361:30" pos:end="361:33"><name pos:start="361:30" pos:end="361:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="367:5" pos:end="371:5">for <control pos:start="367:9" pos:end="367:38">(<init pos:start="367:10" pos:end="367:15"><expr pos:start="367:10" pos:end="367:14"><name pos:start="367:10" pos:end="367:10">i</name> <operator pos:start="367:12" pos:end="367:12">=</operator> <literal type="number" pos:start="367:14" pos:end="367:14">0</literal></expr>;</init> <condition pos:start="367:17" pos:end="367:33"><expr pos:start="367:17" pos:end="367:32"><name pos:start="367:17" pos:end="367:17">i</name> <operator pos:start="367:19" pos:end="367:19">&lt;</operator> <name pos:start="367:21" pos:end="367:32">PCI_ROM_SLOT</name></expr>;</condition> <incr pos:start="367:35" pos:end="367:37"><expr pos:start="367:35" pos:end="367:37"><name pos:start="367:35" pos:end="367:35">i</name><operator pos:start="367:36" pos:end="367:37">++</operator></expr></incr>)</control> <block pos:start="367:40" pos:end="371:5">{<block_content pos:start="369:9" pos:end="369:38">

        <expr_stmt pos:start="369:9" pos:end="369:38"><expr pos:start="369:9" pos:end="369:37"><call pos:start="369:9" pos:end="369:37"><name pos:start="369:9" pos:end="369:28">vfio_bar_quirk_setup</name><argument_list pos:start="369:29" pos:end="369:37">(<argument pos:start="369:30" pos:end="369:33"><expr pos:start="369:30" pos:end="369:33"><name pos:start="369:30" pos:end="369:33">vdev</name></expr></argument>, <argument pos:start="369:36" pos:end="369:36"><expr pos:start="369:36" pos:end="369:36"><name pos:start="369:36" pos:end="369:36">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="375:5" pos:end="425:5"><if pos:start="375:5" pos:end="425:5">if <condition pos:start="375:8" pos:end="377:58">(<expr pos:start="375:9" pos:end="377:57"><operator pos:start="375:9" pos:end="375:9">!</operator><name pos:start="375:10" pos:end="375:27"><name pos:start="375:10" pos:end="375:13">vdev</name><operator pos:start="375:14" pos:end="375:15">-&gt;</operator><name pos:start="375:16" pos:end="375:27">igd_opregion</name></name> <operator pos:start="375:29" pos:end="375:30">&amp;&amp;</operator>

        <name pos:start="377:9" pos:end="377:22"><name pos:start="377:9" pos:end="377:12">vdev</name><operator pos:start="377:13" pos:end="377:14">-&gt;</operator><name pos:start="377:15" pos:end="377:22">features</name></name> <operator pos:start="377:24" pos:end="377:24">&amp;</operator> <name pos:start="377:26" pos:end="377:57">VFIO_FEATURE_ENABLE_IGD_OPREGION</name></expr>)</condition> <block pos:start="377:60" pos:end="425:5">{<block_content pos:start="379:9" pos:end="423:9">

        <decl_stmt pos:start="379:9" pos:end="379:42"><decl pos:start="379:9" pos:end="379:41"><type pos:start="379:9" pos:end="379:33"><name pos:start="379:9" pos:end="379:31"><name pos:start="379:9" pos:end="379:14">struct</name> <name pos:start="379:16" pos:end="379:31">vfio_region_info</name></name> <modifier pos:start="379:33" pos:end="379:33">*</modifier></type><name pos:start="379:34" pos:end="379:41">opregion</name></decl>;</decl_stmt>



        <if_stmt pos:start="383:9" pos:end="393:9"><if pos:start="383:9" pos:end="393:9">if <condition pos:start="383:12" pos:end="383:39">(<expr pos:start="383:13" pos:end="383:38"><name pos:start="383:13" pos:end="383:38"><name pos:start="383:13" pos:end="383:16">vdev</name><operator pos:start="383:17" pos:end="383:18">-&gt;</operator><name pos:start="383:19" pos:end="383:22">pdev</name><operator pos:start="383:23" pos:end="383:23">.</operator><name pos:start="383:24" pos:end="383:27">qdev</name><operator pos:start="383:28" pos:end="383:28">.</operator><name pos:start="383:29" pos:end="383:38">hotplugged</name></name></expr>)</condition> <block pos:start="383:41" pos:end="393:9">{<block_content pos:start="385:13" pos:end="391:30">

            <expr_stmt pos:start="385:13" pos:end="389:33"><expr pos:start="385:13" pos:end="389:32"><call pos:start="385:13" pos:end="389:32"><name pos:start="385:13" pos:end="385:22">error_setg</name><argument_list pos:start="385:23" pos:end="389:32">(<argument pos:start="385:24" pos:end="385:27"><expr pos:start="385:24" pos:end="385:27"><name pos:start="385:24" pos:end="385:27">errp</name></expr></argument>,

                       <argument pos:start="387:24" pos:end="389:31"><expr pos:start="387:24" pos:end="389:31"><literal type="string" pos:start="387:24" pos:end="387:75">"cannot support IGD OpRegion feature on hotplugged "</literal>

                       <literal type="string" pos:start="389:24" pos:end="389:31">"device"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="391:13" pos:end="391:30">goto <name pos:start="391:18" pos:end="391:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="397:9" pos:end="401:75"><expr pos:start="397:9" pos:end="401:74"><name pos:start="397:9" pos:end="397:11">ret</name> <operator pos:start="397:13" pos:end="397:13">=</operator> <call pos:start="397:15" pos:end="401:74"><name pos:start="397:15" pos:end="397:38">vfio_get_dev_region_info</name><argument_list pos:start="397:39" pos:end="401:74">(<argument pos:start="397:40" pos:end="397:54"><expr pos:start="397:40" pos:end="397:54"><operator pos:start="397:40" pos:end="397:40">&amp;</operator><name pos:start="397:41" pos:end="397:54"><name pos:start="397:41" pos:end="397:44">vdev</name><operator pos:start="397:45" pos:end="397:46">-&gt;</operator><name pos:start="397:47" pos:end="397:54">vbasedev</name></name></expr></argument>,

                        <argument pos:start="399:25" pos:end="399:78"><expr pos:start="399:25" pos:end="399:78"><name pos:start="399:25" pos:end="399:56">VFIO_REGION_TYPE_PCI_VENDOR_TYPE</name> <operator pos:start="399:58" pos:end="399:58">|</operator> <name pos:start="399:60" pos:end="399:78">PCI_VENDOR_ID_INTEL</name></expr></argument>,

                        <argument pos:start="401:25" pos:end="401:62"><expr pos:start="401:25" pos:end="401:62"><name pos:start="401:25" pos:end="401:62">VFIO_REGION_SUBTYPE_INTEL_IGD_OPREGION</name></expr></argument>, <argument pos:start="401:65" pos:end="401:73"><expr pos:start="401:65" pos:end="401:73"><operator pos:start="401:65" pos:end="401:65">&amp;</operator><name pos:start="401:66" pos:end="401:73">opregion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="403:9" pos:end="411:9"><if pos:start="403:9" pos:end="411:9">if <condition pos:start="403:12" pos:end="403:16">(<expr pos:start="403:13" pos:end="403:15"><name pos:start="403:13" pos:end="403:15">ret</name></expr>)</condition> <block pos:start="403:18" pos:end="411:9">{<block_content pos:start="405:13" pos:end="409:30">

            <expr_stmt pos:start="405:13" pos:end="407:80"><expr pos:start="405:13" pos:end="407:79"><call pos:start="405:13" pos:end="407:79"><name pos:start="405:13" pos:end="405:28">error_setg_errno</name><argument_list pos:start="405:29" pos:end="407:79">(<argument pos:start="405:30" pos:end="405:33"><expr pos:start="405:30" pos:end="405:33"><name pos:start="405:30" pos:end="405:33">errp</name></expr></argument>, <argument pos:start="405:36" pos:end="405:39"><expr pos:start="405:36" pos:end="405:39"><operator pos:start="405:36" pos:end="405:36">-</operator><name pos:start="405:37" pos:end="405:39">ret</name></expr></argument>,

                             <argument pos:start="407:30" pos:end="407:78"><expr pos:start="407:30" pos:end="407:78"><literal type="string" pos:start="407:30" pos:end="407:78">"does not support requested IGD OpRegion feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="409:13" pos:end="409:30">goto <name pos:start="409:18" pos:end="409:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="415:9" pos:end="415:63"><expr pos:start="415:9" pos:end="415:62"><name pos:start="415:9" pos:end="415:11">ret</name> <operator pos:start="415:13" pos:end="415:13">=</operator> <call pos:start="415:15" pos:end="415:62"><name pos:start="415:15" pos:end="415:40">vfio_pci_igd_opregion_init</name><argument_list pos:start="415:41" pos:end="415:62">(<argument pos:start="415:42" pos:end="415:45"><expr pos:start="415:42" pos:end="415:45"><name pos:start="415:42" pos:end="415:45">vdev</name></expr></argument>, <argument pos:start="415:48" pos:end="415:55"><expr pos:start="415:48" pos:end="415:55"><name pos:start="415:48" pos:end="415:55">opregion</name></expr></argument>, <argument pos:start="415:58" pos:end="415:61"><expr pos:start="415:58" pos:end="415:61"><name pos:start="415:58" pos:end="415:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="417:9" pos:end="417:25"><expr pos:start="417:9" pos:end="417:24"><call pos:start="417:9" pos:end="417:24"><name pos:start="417:9" pos:end="417:14">g_free</name><argument_list pos:start="417:15" pos:end="417:24">(<argument pos:start="417:16" pos:end="417:23"><expr pos:start="417:16" pos:end="417:23"><name pos:start="417:16" pos:end="417:23">opregion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="419:9" pos:end="423:9"><if pos:start="419:9" pos:end="423:9">if <condition pos:start="419:12" pos:end="419:16">(<expr pos:start="419:13" pos:end="419:15"><name pos:start="419:13" pos:end="419:15">ret</name></expr>)</condition> <block pos:start="419:18" pos:end="423:9">{<block_content pos:start="421:13" pos:end="421:30">

            <goto pos:start="421:13" pos:end="421:30">goto <name pos:start="421:18" pos:end="421:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="429:5" pos:end="429:41">/* QEMU emulates all of MSI &amp; MSIX */</comment>

    <if_stmt pos:start="431:5" pos:end="437:5"><if pos:start="431:5" pos:end="437:5">if <condition pos:start="431:8" pos:end="431:46">(<expr pos:start="431:9" pos:end="431:45"><name pos:start="431:9" pos:end="431:25"><name pos:start="431:9" pos:end="431:12">pdev</name><operator pos:start="431:13" pos:end="431:14">-&gt;</operator><name pos:start="431:15" pos:end="431:25">cap_present</name></name> <operator pos:start="431:27" pos:end="431:27">&amp;</operator> <name pos:start="431:29" pos:end="431:45">QEMU_PCI_CAP_MSIX</name></expr>)</condition> <block pos:start="431:48" pos:end="437:5">{<block_content pos:start="433:9" pos:end="435:32">

        <expr_stmt pos:start="433:9" pos:end="435:32"><expr pos:start="433:9" pos:end="435:31"><call pos:start="433:9" pos:end="435:31"><name pos:start="433:9" pos:end="433:14">memset</name><argument_list pos:start="433:15" pos:end="435:31">(<argument pos:start="433:16" pos:end="433:58"><expr pos:start="433:16" pos:end="433:58"><name pos:start="433:16" pos:end="433:41"><name pos:start="433:16" pos:end="433:19">vdev</name><operator pos:start="433:20" pos:end="433:21">-&gt;</operator><name pos:start="433:22" pos:end="433:41">emulated_config_bits</name></name> <operator pos:start="433:43" pos:end="433:43">+</operator> <name pos:start="433:45" pos:end="433:58"><name pos:start="433:45" pos:end="433:48">pdev</name><operator pos:start="433:49" pos:end="433:50">-&gt;</operator><name pos:start="433:51" pos:end="433:58">msix_cap</name></name></expr></argument>, <argument pos:start="433:61" pos:end="433:64"><expr pos:start="433:61" pos:end="433:64"><literal type="number" pos:start="433:61" pos:end="433:64">0xff</literal></expr></argument>,

               <argument pos:start="435:16" pos:end="435:30"><expr pos:start="435:16" pos:end="435:30"><name pos:start="435:16" pos:end="435:30">MSIX_CAP_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="441:5" pos:end="447:5"><if pos:start="441:5" pos:end="447:5">if <condition pos:start="441:8" pos:end="441:45">(<expr pos:start="441:9" pos:end="441:44"><name pos:start="441:9" pos:end="441:25"><name pos:start="441:9" pos:end="441:12">pdev</name><operator pos:start="441:13" pos:end="441:14">-&gt;</operator><name pos:start="441:15" pos:end="441:25">cap_present</name></name> <operator pos:start="441:27" pos:end="441:27">&amp;</operator> <name pos:start="441:29" pos:end="441:44">QEMU_PCI_CAP_MSI</name></expr>)</condition> <block pos:start="441:47" pos:end="447:5">{<block_content pos:start="443:9" pos:end="445:35">

        <expr_stmt pos:start="443:9" pos:end="445:35"><expr pos:start="443:9" pos:end="445:34"><call pos:start="443:9" pos:end="445:34"><name pos:start="443:9" pos:end="443:14">memset</name><argument_list pos:start="443:15" pos:end="445:34">(<argument pos:start="443:16" pos:end="443:57"><expr pos:start="443:16" pos:end="443:57"><name pos:start="443:16" pos:end="443:41"><name pos:start="443:16" pos:end="443:19">vdev</name><operator pos:start="443:20" pos:end="443:21">-&gt;</operator><name pos:start="443:22" pos:end="443:41">emulated_config_bits</name></name> <operator pos:start="443:43" pos:end="443:43">+</operator> <name pos:start="443:45" pos:end="443:57"><name pos:start="443:45" pos:end="443:48">pdev</name><operator pos:start="443:49" pos:end="443:50">-&gt;</operator><name pos:start="443:51" pos:end="443:57">msi_cap</name></name></expr></argument>, <argument pos:start="443:60" pos:end="443:63"><expr pos:start="443:60" pos:end="443:63"><literal type="number" pos:start="443:60" pos:end="443:63">0xff</literal></expr></argument>,

               <argument pos:start="445:16" pos:end="445:33"><expr pos:start="445:16" pos:end="445:33"><name pos:start="445:16" pos:end="445:33"><name pos:start="445:16" pos:end="445:19">vdev</name><operator pos:start="445:20" pos:end="445:21">-&gt;</operator><name pos:start="445:22" pos:end="445:33">msi_cap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="451:5" pos:end="467:5"><if pos:start="451:5" pos:end="467:5">if <condition pos:start="451:8" pos:end="451:64">(<expr pos:start="451:9" pos:end="451:63"><call pos:start="451:9" pos:end="451:63"><name pos:start="451:9" pos:end="451:28">vfio_pci_read_config</name><argument_list pos:start="451:29" pos:end="451:63">(<argument pos:start="451:30" pos:end="451:40"><expr pos:start="451:30" pos:end="451:40"><operator pos:start="451:30" pos:end="451:30">&amp;</operator><name pos:start="451:31" pos:end="451:40"><name pos:start="451:31" pos:end="451:34">vdev</name><operator pos:start="451:35" pos:end="451:36">-&gt;</operator><name pos:start="451:37" pos:end="451:40">pdev</name></name></expr></argument>, <argument pos:start="451:43" pos:end="451:59"><expr pos:start="451:43" pos:end="451:59"><name pos:start="451:43" pos:end="451:59">PCI_INTERRUPT_PIN</name></expr></argument>, <argument pos:start="451:62" pos:end="451:62"><expr pos:start="451:62" pos:end="451:62"><literal type="number" pos:start="451:62" pos:end="451:62">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="451:66" pos:end="467:5">{<block_content pos:start="453:9" pos:end="465:9">

        <expr_stmt pos:start="453:9" pos:end="455:79"><expr pos:start="453:9" pos:end="455:78"><name pos:start="453:9" pos:end="453:29"><name pos:start="453:9" pos:end="453:12">vdev</name><operator pos:start="453:13" pos:end="453:14">-&gt;</operator><name pos:start="453:15" pos:end="453:18">intx</name><operator pos:start="453:19" pos:end="453:19">.</operator><name pos:start="453:20" pos:end="453:29">mmap_timer</name></name> <operator pos:start="453:31" pos:end="453:31">=</operator> <call pos:start="453:33" pos:end="455:78"><name pos:start="453:33" pos:end="453:44">timer_new_ms</name><argument_list pos:start="453:45" pos:end="455:78">(<argument pos:start="453:46" pos:end="453:63"><expr pos:start="453:46" pos:end="453:63"><name pos:start="453:46" pos:end="453:63">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                                                  <argument pos:start="455:51" pos:end="455:71"><expr pos:start="455:51" pos:end="455:71"><name pos:start="455:51" pos:end="455:71">vfio_intx_mmap_enable</name></expr></argument>, <argument pos:start="455:74" pos:end="455:77"><expr pos:start="455:74" pos:end="455:77"><name pos:start="455:74" pos:end="455:77">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:76"><expr pos:start="457:9" pos:end="457:75"><call pos:start="457:9" pos:end="457:75"><name pos:start="457:9" pos:end="457:44">pci_device_set_intx_routing_notifier</name><argument_list pos:start="457:45" pos:end="457:75">(<argument pos:start="457:46" pos:end="457:56"><expr pos:start="457:46" pos:end="457:56"><operator pos:start="457:46" pos:end="457:46">&amp;</operator><name pos:start="457:47" pos:end="457:56"><name pos:start="457:47" pos:end="457:50">vdev</name><operator pos:start="457:51" pos:end="457:52">-&gt;</operator><name pos:start="457:53" pos:end="457:56">pdev</name></name></expr></argument>, <argument pos:start="457:59" pos:end="457:74"><expr pos:start="457:59" pos:end="457:74"><name pos:start="457:59" pos:end="457:74">vfio_intx_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="459:9" pos:end="459:43"><expr pos:start="459:9" pos:end="459:42"><name pos:start="459:9" pos:end="459:11">ret</name> <operator pos:start="459:13" pos:end="459:13">=</operator> <call pos:start="459:15" pos:end="459:42"><name pos:start="459:15" pos:end="459:30">vfio_intx_enable</name><argument_list pos:start="459:31" pos:end="459:42">(<argument pos:start="459:32" pos:end="459:35"><expr pos:start="459:32" pos:end="459:35"><name pos:start="459:32" pos:end="459:35">vdev</name></expr></argument>, <argument pos:start="459:38" pos:end="459:41"><expr pos:start="459:38" pos:end="459:41"><name pos:start="459:38" pos:end="459:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="461:9" pos:end="465:9"><if pos:start="461:9" pos:end="465:9">if <condition pos:start="461:12" pos:end="461:16">(<expr pos:start="461:13" pos:end="461:15"><name pos:start="461:13" pos:end="461:15">ret</name></expr>)</condition> <block pos:start="461:18" pos:end="465:9">{<block_content pos:start="463:13" pos:end="463:30">

            <goto pos:start="463:13" pos:end="463:30">goto <name pos:start="463:18" pos:end="463:29">out_teardown</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="471:5" pos:end="471:37"><expr pos:start="471:5" pos:end="471:36"><call pos:start="471:5" pos:end="471:36"><name pos:start="471:5" pos:end="471:30">vfio_register_err_notifier</name><argument_list pos:start="471:31" pos:end="471:36">(<argument pos:start="471:32" pos:end="471:35"><expr pos:start="471:32" pos:end="471:35"><name pos:start="471:32" pos:end="471:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:37"><expr pos:start="473:5" pos:end="473:36"><call pos:start="473:5" pos:end="473:36"><name pos:start="473:5" pos:end="473:30">vfio_register_req_notifier</name><argument_list pos:start="473:31" pos:end="473:36">(<argument pos:start="473:32" pos:end="473:35"><expr pos:start="473:32" pos:end="473:35"><name pos:start="473:32" pos:end="473:35">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="475:5" pos:end="475:35"><expr pos:start="475:5" pos:end="475:34"><call pos:start="475:5" pos:end="475:34"><name pos:start="475:5" pos:end="475:28">vfio_setup_resetfn_quirk</name><argument_list pos:start="475:29" pos:end="475:34">(<argument pos:start="475:30" pos:end="475:33"><expr pos:start="475:30" pos:end="475:33"><name pos:start="475:30" pos:end="475:33">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="479:5" pos:end="479:11">return;</return>



<label pos:start="483:1" pos:end="483:13"><name pos:start="483:1" pos:end="483:12">out_teardown</name>:</label>

    <expr_stmt pos:start="485:5" pos:end="485:60"><expr pos:start="485:5" pos:end="485:59"><call pos:start="485:5" pos:end="485:59"><name pos:start="485:5" pos:end="485:40">pci_device_set_intx_routing_notifier</name><argument_list pos:start="485:41" pos:end="485:59">(<argument pos:start="485:42" pos:end="485:52"><expr pos:start="485:42" pos:end="485:52"><operator pos:start="485:42" pos:end="485:42">&amp;</operator><name pos:start="485:43" pos:end="485:52"><name pos:start="485:43" pos:end="485:46">vdev</name><operator pos:start="485:47" pos:end="485:48">-&gt;</operator><name pos:start="485:49" pos:end="485:52">pdev</name></name></expr></argument>, <argument pos:start="485:55" pos:end="485:58"><expr pos:start="485:55" pos:end="485:58"><name pos:start="485:55" pos:end="485:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:28"><expr pos:start="487:5" pos:end="487:27"><call pos:start="487:5" pos:end="487:27"><name pos:start="487:5" pos:end="487:21">vfio_teardown_msi</name><argument_list pos:start="487:22" pos:end="487:27">(<argument pos:start="487:23" pos:end="487:26"><expr pos:start="487:23" pos:end="487:26"><name pos:start="487:23" pos:end="487:26">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:25"><expr pos:start="489:5" pos:end="489:24"><call pos:start="489:5" pos:end="489:24"><name pos:start="489:5" pos:end="489:18">vfio_bars_exit</name><argument_list pos:start="489:19" pos:end="489:24">(<argument pos:start="489:20" pos:end="489:23"><expr pos:start="489:20" pos:end="489:23"><name pos:start="489:20" pos:end="489:23">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="491:1" pos:end="491:6"><name pos:start="491:1" pos:end="491:5">error</name>:</label>

    <expr_stmt pos:start="493:5" pos:end="493:57"><expr pos:start="493:5" pos:end="493:56"><call pos:start="493:5" pos:end="493:56"><name pos:start="493:5" pos:end="493:17">error_prepend</name><argument_list pos:start="493:18" pos:end="493:56">(<argument pos:start="493:19" pos:end="493:22"><expr pos:start="493:19" pos:end="493:22"><name pos:start="493:19" pos:end="493:22">errp</name></expr></argument>, <argument pos:start="493:25" pos:end="493:34"><expr pos:start="493:25" pos:end="493:34"><name pos:start="493:25" pos:end="493:34">ERR_PREFIX</name></expr></argument>, <argument pos:start="493:37" pos:end="493:55"><expr pos:start="493:37" pos:end="493:55"><name pos:start="493:37" pos:end="493:55"><name pos:start="493:37" pos:end="493:40">vdev</name><operator pos:start="493:41" pos:end="493:42">-&gt;</operator><name pos:start="493:43" pos:end="493:50">vbasedev</name><operator pos:start="493:51" pos:end="493:51">.</operator><name pos:start="493:52" pos:end="493:55">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
