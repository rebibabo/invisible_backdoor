<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13037.c" pos:tabs="8"><function pos:start="1:1" pos:end="19:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">qemu_mutex_lock</name><parameter_list pos:start="1:21" pos:end="1:38">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:32"><name pos:start="1:22" pos:end="1:30">QemuMutex</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:37">mutex</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="19:1">{<block_content pos:start="5:5" pos:end="17:40">

    <expr_stmt pos:start="5:5" pos:end="5:39"><expr pos:start="5:5" pos:end="5:38"><call pos:start="5:5" pos:end="5:38"><name pos:start="5:5" pos:end="5:24">EnterCriticalSection</name><argument_list pos:start="5:25" pos:end="5:38">(<argument pos:start="5:26" pos:end="5:37"><expr pos:start="5:26" pos:end="5:37"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:37"><name pos:start="5:27" pos:end="5:31">mutex</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="9:5" pos:end="13:7">/* Win32 CRITICAL_SECTIONs are recursive.  Assert that we're not

     * using them as such.

     */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:30"><expr pos:start="15:5" pos:end="15:29"><call pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:29">(<argument pos:start="15:12" pos:end="15:28"><expr pos:start="15:12" pos:end="15:28"><name pos:start="15:12" pos:end="15:23"><name pos:start="15:12" pos:end="15:16">mutex</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:23">owner</name></name> <operator pos:start="15:25" pos:end="15:26">==</operator> <literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:9">mutex</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:16">owner</name></name> <operator pos:start="17:18" pos:end="17:18">=</operator> <call pos:start="17:20" pos:end="17:39"><name pos:start="17:20" pos:end="17:37">GetCurrentThreadId</name><argument_list pos:start="17:38" pos:end="17:39">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
