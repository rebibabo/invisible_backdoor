<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27315.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pxa2xx_fir_write</name><parameter_list pos:start="1:29" pos:end="3:61">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:45">value64</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:55">unsigned</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:5">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PXA2xxFIrState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:49">= <expr pos:start="7:25" pos:end="7:49"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">PXA2xxFIrState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator> <name pos:start="7:44" pos:end="7:49">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name> <init pos:start="9:20" pos:end="9:28">= <expr pos:start="9:22" pos:end="9:28"><name pos:start="9:22" pos:end="9:28">value64</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:14">ch</name></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="95:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">addr</name></expr>)</condition> <block pos:start="15:19" pos:end="95:5">{<block_content pos:start="17:5" pos:end="93:69">

    <case pos:start="17:5" pos:end="17:15">case <expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:14">ICCR0</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">control</name><index pos:start="19:19" pos:end="19:21">[<expr pos:start="19:20" pos:end="19:20"><literal type="number" pos:start="19:20" pos:end="19:20">0</literal></expr>]</index></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <name pos:start="19:25" pos:end="19:29">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="23:40"><if pos:start="21:9" pos:end="23:40">if <condition pos:start="21:12" pos:end="21:32">(<expr pos:start="21:13" pos:end="21:31"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:19">value</name> <operator pos:start="21:21" pos:end="21:21">&amp;</operator> <operator pos:start="21:23" pos:end="21:23">(</operator><literal type="number" pos:start="21:24" pos:end="21:24">1</literal> <operator pos:start="21:26" pos:end="21:27">&lt;&lt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">4</literal><operator pos:start="21:30" pos:end="21:30">)</operator><operator pos:start="21:31" pos:end="21:31">)</operator></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:40"><block_content pos:start="23:13" pos:end="23:40">			<comment type="block" pos:start="21:57" pos:end="21:65">/* RXE */</comment>

            <expr_stmt pos:start="23:13" pos:end="23:40"><expr pos:start="23:13" pos:end="23:39"><name pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">rx_len</name></name> <operator pos:start="23:23" pos:end="23:23">=</operator> <name pos:start="23:25" pos:end="23:35"><name pos:start="23:25" pos:end="23:25">s</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:35">rx_start</name></name> <operator pos:start="23:37" pos:end="23:37">=</operator> <literal type="number" pos:start="23:39" pos:end="23:39">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:32">(<expr pos:start="25:13" pos:end="25:31"><operator pos:start="25:13" pos:end="25:13">!</operator><operator pos:start="25:14" pos:end="25:14">(</operator><name pos:start="25:15" pos:end="25:19">value</name> <operator pos:start="25:21" pos:end="25:21">&amp;</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal> <operator pos:start="25:26" pos:end="25:27">&lt;&lt;</operator> <literal type="number" pos:start="25:29" pos:end="25:29">3</literal><operator pos:start="25:30" pos:end="25:30">)</operator><operator pos:start="25:31" pos:end="25:31">)</operator></expr>)</condition> <block pos:start="25:34" pos:end="29:9">{<block_content>                      <comment type="block" pos:start="25:57" pos:end="25:65">/* TXE */</comment>

            <comment type="block" pos:start="27:13" pos:end="27:21">/* Nop */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:17">enable</name></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:25">value</name> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <literal type="number" pos:start="31:29" pos:end="31:29">1</literal></expr>;</expr_stmt>				<comment type="block" pos:start="31:57" pos:end="31:65">/* ITR */</comment>

        <if_stmt pos:start="33:9" pos:end="35:29"><if pos:start="33:9" pos:end="35:29">if <condition pos:start="33:12" pos:end="33:23">(<expr pos:start="33:13" pos:end="33:22"><operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:22"><name pos:start="33:14" pos:end="33:14">s</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:22">enable</name></name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:29"><block_content pos:start="35:13" pos:end="35:29">

            <expr_stmt pos:start="35:13" pos:end="35:29"><expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:24"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:21">status</name><index pos:start="35:22" pos:end="35:24">[<expr pos:start="35:23" pos:end="35:23"><literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>]</index></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><call pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:25">pxa2xx_fir_update</name><argument_list pos:start="37:26" pos:end="37:28">(<argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:15">case <expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:14">ICCR1</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:30"><expr pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:18">control</name><index pos:start="43:19" pos:end="43:21">[<expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">1</literal></expr>]</index></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:29">value</name></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:15">case <expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:14">ICCR2</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">control</name><index pos:start="49:19" pos:end="49:21">[<expr pos:start="49:20" pos:end="49:20"><literal type="number" pos:start="49:20" pos:end="49:20">2</literal></expr>]</index></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:29">value</name> <operator pos:start="49:31" pos:end="49:31">&amp;</operator> <literal type="number" pos:start="49:33" pos:end="49:36">0x3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:25">pxa2xx_fir_update</name><argument_list pos:start="51:26" pos:end="51:28">(<argument pos:start="51:27" pos:end="51:27"><expr pos:start="51:27" pos:end="51:27"><name pos:start="51:27" pos:end="51:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><name pos:start="55:10" pos:end="55:13">ICDR</name></expr>:</case>

        <if_stmt pos:start="57:9" pos:end="65:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:37">(<expr pos:start="57:13" pos:end="57:36"><name pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">control</name><index pos:start="57:23" pos:end="57:25">[<expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">2</literal></expr>]</index></name> <operator pos:start="57:27" pos:end="57:27">&amp;</operator> <operator pos:start="57:29" pos:end="57:29">(</operator><literal type="number" pos:start="57:30" pos:end="57:30">1</literal> <operator pos:start="57:32" pos:end="57:33">&lt;&lt;</operator> <literal type="number" pos:start="57:35" pos:end="57:35">2</literal><operator pos:start="57:36" pos:end="57:36">)</operator></expr>)</condition> <block pos:start="57:39" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:23"> <comment type="block" pos:start="57:41" pos:end="57:49">/* TXP */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:23"><expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:14">ch</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:22">value</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="61:11" pos:end="65:9">else <block pos:start="61:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:24">

            <expr_stmt pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:23"><name pos:start="63:13" pos:end="63:14">ch</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <operator pos:start="63:18" pos:end="63:18">~</operator><name pos:start="63:19" pos:end="63:23">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:52">(<expr pos:start="67:13" pos:end="67:51"><name pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:21">enable</name></name> <operator pos:start="67:23" pos:end="67:24">&amp;&amp;</operator> <operator pos:start="67:26" pos:end="67:26">(</operator><name pos:start="67:27" pos:end="67:39"><name pos:start="67:27" pos:end="67:27">s</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:36">control</name><index pos:start="67:37" pos:end="67:39">[<expr pos:start="67:38" pos:end="67:38"><literal type="number" pos:start="67:38" pos:end="67:38">0</literal></expr>]</index></name> <operator pos:start="67:41" pos:end="67:41">&amp;</operator> <operator pos:start="67:43" pos:end="67:43">(</operator><literal type="number" pos:start="67:44" pos:end="67:44">1</literal> <operator pos:start="67:46" pos:end="67:47">&lt;&lt;</operator> <literal type="number" pos:start="67:49" pos:end="67:49">3</literal><operator pos:start="67:50" pos:end="67:50">)</operator><operator pos:start="67:51" pos:end="67:51">)</operator></expr>)</condition> <block pos:start="67:54" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:51"> <comment type="block" pos:start="67:56" pos:end="67:64">/* TXE */</comment>

            <comment type="block" pos:start="69:13" pos:end="71:64">/* XXX this blocks entire thread. Rewrite to use

             * qemu_chr_fe_write and background I/O callbacks */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:51"><expr pos:start="73:13" pos:end="73:50"><call pos:start="73:13" pos:end="73:50"><name pos:start="73:13" pos:end="73:33">qemu_chr_fe_write_all</name><argument_list pos:start="73:34" pos:end="73:50">(<argument pos:start="73:35" pos:end="73:41"><expr pos:start="73:35" pos:end="73:41"><operator pos:start="73:35" pos:end="73:35">&amp;</operator><name pos:start="73:36" pos:end="73:41"><name pos:start="73:36" pos:end="73:36">s</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:41">chr</name></name></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><operator pos:start="73:44" pos:end="73:44">&amp;</operator><name pos:start="73:45" pos:end="73:46">ch</name></expr></argument>, <argument pos:start="73:49" pos:end="73:49"><expr pos:start="73:49" pos:end="73:49"><literal type="number" pos:start="73:49" pos:end="73:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:15">case <expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:14">ICSR0</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:40"><expr pos:start="81:9" pos:end="81:39"><name pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:17">status</name><index pos:start="81:18" pos:end="81:20">[<expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">0</literal></expr>]</index></name> <operator pos:start="81:22" pos:end="81:23">&amp;=</operator> <operator pos:start="81:25" pos:end="81:25">~</operator><operator pos:start="81:26" pos:end="81:26">(</operator><name pos:start="81:27" pos:end="81:31">value</name> <operator pos:start="81:33" pos:end="81:33">&amp;</operator> <literal type="number" pos:start="81:35" pos:end="81:38">0x66</literal><operator pos:start="81:39" pos:end="81:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:29"><expr pos:start="83:9" pos:end="83:28"><call pos:start="83:9" pos:end="83:28"><name pos:start="83:9" pos:end="83:25">pxa2xx_fir_update</name><argument_list pos:start="83:26" pos:end="83:28">(<argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:15">case <expr pos:start="87:10" pos:end="87:14"><name pos:start="87:10" pos:end="87:14">ICFOR</name></expr>:</case>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <default pos:start="91:5" pos:end="91:12">default:</default>

        <expr_stmt pos:start="93:9" pos:end="93:69"><expr pos:start="93:9" pos:end="93:68"><call pos:start="93:9" pos:end="93:68"><name pos:start="93:9" pos:end="93:14">printf</name><argument_list pos:start="93:15" pos:end="93:68">(<argument pos:start="93:16" pos:end="93:47"><expr pos:start="93:16" pos:end="93:47"><literal type="string" pos:start="93:16" pos:end="93:34">"%s: Bad register "</literal> <name pos:start="93:36" pos:end="93:42">REG_FMT</name> <literal type="string" pos:start="93:44" pos:end="93:47">"\n"</literal></expr></argument>, <argument pos:start="93:50" pos:end="93:61"><expr pos:start="93:50" pos:end="93:61"><name pos:start="93:50" pos:end="93:61">__FUNCTION__</name></expr></argument>, <argument pos:start="93:64" pos:end="93:67"><expr pos:start="93:64" pos:end="93:67"><name pos:start="93:64" pos:end="93:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
