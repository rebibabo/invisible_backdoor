<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21663.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xan_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="181:1">{<block_content pos:start="9:5" pos:end="179:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:21">buf_size</name> <init pos:start="11:23" pos:end="11:35">= <expr pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:35"><name pos:start="11:25" pos:end="11:29">avpkt</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">XanContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="123:5"><if pos:start="17:5" pos:end="123:5">if <condition pos:start="17:8" pos:end="17:45">(<expr pos:start="17:9" pos:end="17:44"><name pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:13">avctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:20">codec</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:24">id</name></name> <operator pos:start="17:26" pos:end="17:27">==</operator> <name pos:start="17:29" pos:end="17:44">CODEC_ID_XAN_WC3</name></expr>)</condition> <block pos:start="17:47" pos:end="123:5">{<block_content pos:start="19:9" pos:end="121:33">

        <decl_stmt pos:start="19:9" pos:end="19:48"><decl pos:start="19:9" pos:end="19:47"><type pos:start="19:9" pos:end="19:23"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:21">uint8_t</name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:30">buf_end</name> <init pos:start="19:32" pos:end="19:47">= <expr pos:start="19:34" pos:end="19:47"><name pos:start="19:34" pos:end="19:36">buf</name> <operator pos:start="19:38" pos:end="19:38">+</operator> <name pos:start="19:40" pos:end="19:47">buf_size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">tag</name> <init pos:start="21:17" pos:end="21:19">= <expr pos:start="21:19" pos:end="21:19"><literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr></init></decl>;</decl_stmt>

        <while pos:start="23:9" pos:end="119:9">while <condition pos:start="23:15" pos:end="23:52">(<expr pos:start="23:16" pos:end="23:51"><name pos:start="23:16" pos:end="23:22">buf_end</name> <operator pos:start="23:24" pos:end="23:24">-</operator> <name pos:start="23:26" pos:end="23:28">buf</name> <operator pos:start="23:30" pos:end="23:30">&gt;</operator> <literal type="number" pos:start="23:32" pos:end="23:32">8</literal> <operator pos:start="23:34" pos:end="23:35">&amp;&amp;</operator> <name pos:start="23:37" pos:end="23:39">tag</name> <operator pos:start="23:41" pos:end="23:42">!=</operator> <name pos:start="23:44" pos:end="23:51">VGA__TAG</name></expr>)</condition> <block pos:start="23:54" pos:end="119:9">{<block_content pos:start="25:13" pos:end="117:13">

            <decl_stmt pos:start="25:13" pos:end="25:29"><decl pos:start="25:13" pos:end="25:28"><type pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:20">unsigned</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:28">tmpptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="27:13" pos:end="27:29"><decl pos:start="27:13" pos:end="27:28"><type pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:20">uint32_t</name></type> <name pos:start="27:22" pos:end="27:28">new_pal</name></decl>;</decl_stmt>

            <decl_stmt pos:start="29:13" pos:end="29:21"><decl pos:start="29:13" pos:end="29:20"><type pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">int</name></type> <name pos:start="29:17" pos:end="29:20">size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:18"><decl pos:start="31:13" pos:end="31:17"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:45"><expr pos:start="33:13" pos:end="33:44"><name pos:start="33:13" pos:end="33:15">tag</name>  <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:44"><name pos:start="33:20" pos:end="33:38">bytestream_get_le32</name><argument_list pos:start="33:39" pos:end="33:44">(<argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:45"><expr pos:start="35:13" pos:end="35:44"><name pos:start="35:13" pos:end="35:16">size</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:44"><name pos:start="35:20" pos:end="35:38">bytestream_get_be32</name><argument_list pos:start="35:39" pos:end="35:44">(<argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:43">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:46"><expr pos:start="37:13" pos:end="37:45"><name pos:start="37:13" pos:end="37:16">size</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:45"><name pos:start="37:20" pos:end="37:24">FFMIN</name><argument_list pos:start="37:25" pos:end="37:45">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">size</name></expr></argument>, <argument pos:start="37:32" pos:end="37:44"><expr pos:start="37:32" pos:end="37:44"><name pos:start="37:32" pos:end="37:38">buf_end</name> <operator pos:start="37:40" pos:end="37:40">-</operator> <name pos:start="37:42" pos:end="37:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="39:13" pos:end="117:13">switch <condition pos:start="39:20" pos:end="39:24">(<expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">tag</name></expr>)</condition> <block pos:start="39:26" pos:end="117:13">{<block_content pos:start="41:13" pos:end="115:22">

            <case pos:start="41:13" pos:end="41:26">case <expr pos:start="41:18" pos:end="41:25"><name pos:start="41:18" pos:end="41:25">PALT_TAG</name></expr>:</case>

                <if_stmt pos:start="43:17" pos:end="45:47"><if pos:start="43:17" pos:end="45:47">if <condition pos:start="43:20" pos:end="43:40">(<expr pos:start="43:21" pos:end="43:39"><name pos:start="43:21" pos:end="43:24">size</name> <operator pos:start="43:26" pos:end="43:26">&lt;</operator> <name pos:start="43:28" pos:end="43:39">PALETTE_SIZE</name></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:47"><block_content pos:start="45:21" pos:end="45:47">

                    <return pos:start="45:21" pos:end="45:47">return <expr pos:start="45:28" pos:end="45:46"><name pos:start="45:28" pos:end="45:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="47:17" pos:end="49:47"><if pos:start="47:17" pos:end="49:47">if <condition pos:start="47:20" pos:end="47:54">(<expr pos:start="47:21" pos:end="47:53"><name pos:start="47:21" pos:end="47:37"><name pos:start="47:21" pos:end="47:21">s</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:37">palettes_count</name></name> <operator pos:start="47:39" pos:end="47:40">&gt;=</operator> <name pos:start="47:42" pos:end="47:53">PALETTES_MAX</name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:47"><block_content pos:start="49:21" pos:end="49:47">

                    <return pos:start="49:21" pos:end="49:47">return <expr pos:start="49:28" pos:end="49:46"><name pos:start="49:28" pos:end="49:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:91"><expr pos:start="51:17" pos:end="51:90"><name pos:start="51:17" pos:end="51:22">tmpptr</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <call pos:start="51:26" pos:end="51:90"><name pos:start="51:26" pos:end="51:35">av_realloc</name><argument_list pos:start="51:36" pos:end="51:90">(<argument pos:start="51:37" pos:end="51:47"><expr pos:start="51:37" pos:end="51:47"><name pos:start="51:37" pos:end="51:47"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:47">palettes</name></name></expr></argument>, <argument pos:start="51:50" pos:end="51:89"><expr pos:start="51:50" pos:end="51:89"><operator pos:start="51:50" pos:end="51:50">(</operator><name pos:start="51:51" pos:end="51:67"><name pos:start="51:51" pos:end="51:51">s</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:67">palettes_count</name></name> <operator pos:start="51:69" pos:end="51:69">+</operator> <literal type="number" pos:start="51:71" pos:end="51:71">1</literal><operator pos:start="51:72" pos:end="51:72">)</operator> <operator pos:start="51:74" pos:end="51:74">*</operator> <name pos:start="51:76" pos:end="51:89">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="55:43"><if pos:start="53:17" pos:end="55:43">if <condition pos:start="53:20" pos:end="53:28">(<expr pos:start="53:21" pos:end="53:27"><operator pos:start="53:21" pos:end="53:21">!</operator><name pos:start="53:22" pos:end="53:27">tmpptr</name></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:43"><block_content pos:start="55:21" pos:end="55:43">

                    <return pos:start="55:21" pos:end="55:43">return <expr pos:start="55:28" pos:end="55:42"><call pos:start="55:28" pos:end="55:42"><name pos:start="55:28" pos:end="55:34">AVERROR</name><argument_list pos:start="55:35" pos:end="55:42">(<argument pos:start="55:36" pos:end="55:41"><expr pos:start="55:36" pos:end="55:41"><name pos:start="55:36" pos:end="55:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:37"><expr pos:start="57:17" pos:end="57:36"><name pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:27">palettes</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:36">tmpptr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:62"><expr pos:start="59:17" pos:end="59:61"><name pos:start="59:17" pos:end="59:22">tmpptr</name> <operator pos:start="59:24" pos:end="59:25">+=</operator> <name pos:start="59:27" pos:end="59:43"><name pos:start="59:27" pos:end="59:27">s</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:43">palettes_count</name></name> <operator pos:start="59:45" pos:end="59:45">*</operator> <name pos:start="59:47" pos:end="59:61">AVPALETTE_COUNT</name></expr>;</expr_stmt>

                <for pos:start="61:17" pos:end="83:17">for <control pos:start="61:21" pos:end="61:51">(<init pos:start="61:22" pos:end="61:27"><expr pos:start="61:22" pos:end="61:26"><name pos:start="61:22" pos:end="61:22">i</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">0</literal></expr>;</init> <condition pos:start="61:29" pos:end="61:46"><expr pos:start="61:29" pos:end="61:45"><name pos:start="61:29" pos:end="61:29">i</name> <operator pos:start="61:31" pos:end="61:31">&lt;</operator> <name pos:start="61:33" pos:end="61:45">PALETTE_COUNT</name></expr>;</condition> <incr pos:start="61:48" pos:end="61:50"><expr pos:start="61:48" pos:end="61:50"><name pos:start="61:48" pos:end="61:48">i</name><operator pos:start="61:49" pos:end="61:50">++</operator></expr></incr>)</control> <block pos:start="61:53" pos:end="83:17">{<block_content pos:start="65:21" pos:end="81:57">

<cpp:if pos:start="63:1" pos:end="63:17">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:17"><name pos:start="63:5" pos:end="63:17">RUNTIME_GAMMA</name></expr></cpp:if>

                    <decl_stmt pos:start="65:21" pos:end="65:47"><decl pos:start="65:21" pos:end="65:46"><type pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:23">int</name></type> <name pos:start="65:25" pos:end="65:25">r</name> <init pos:start="65:27" pos:end="65:46">= <expr pos:start="65:29" pos:end="65:46"><call pos:start="65:29" pos:end="65:46"><name pos:start="65:29" pos:end="65:38">gamma_corr</name><argument_list pos:start="65:39" pos:end="65:46">(<argument pos:start="65:40" pos:end="65:45"><expr pos:start="65:40" pos:end="65:45"><operator pos:start="65:40" pos:end="65:40">*</operator><name pos:start="65:41" pos:end="65:43">buf</name><operator pos:start="65:44" pos:end="65:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="67:21" pos:end="67:47"><decl pos:start="67:21" pos:end="67:46"><type pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">int</name></type> <name pos:start="67:25" pos:end="67:25">g</name> <init pos:start="67:27" pos:end="67:46">= <expr pos:start="67:29" pos:end="67:46"><call pos:start="67:29" pos:end="67:46"><name pos:start="67:29" pos:end="67:38">gamma_corr</name><argument_list pos:start="67:39" pos:end="67:46">(<argument pos:start="67:40" pos:end="67:45"><expr pos:start="67:40" pos:end="67:45"><operator pos:start="67:40" pos:end="67:40">*</operator><name pos:start="67:41" pos:end="67:43">buf</name><operator pos:start="67:44" pos:end="67:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="69:21" pos:end="72:0"><decl pos:start="69:21" pos:end="69:46"><type pos:start="69:21" pos:end="69:23"><name pos:start="69:21" pos:end="69:23">int</name></type> <name pos:start="69:25" pos:end="69:25">b</name> <init pos:start="69:27" pos:end="69:46">= <expr pos:start="69:29" pos:end="69:46"><call pos:start="69:29" pos:end="69:46"><name pos:start="69:29" pos:end="69:38">gamma_corr</name><argument_list pos:start="69:39" pos:end="69:46">(<argument pos:start="69:40" pos:end="69:45"><expr pos:start="69:40" pos:end="69:45"><operator pos:start="69:40" pos:end="69:40">*</operator><name pos:start="69:41" pos:end="69:43">buf</name><operator pos:start="69:44" pos:end="69:45">++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

                    <decl_stmt pos:start="73:21" pos:end="73:49"><decl pos:start="73:21" pos:end="73:48"><type pos:start="73:21" pos:end="73:23"><name pos:start="73:21" pos:end="73:23">int</name></type> <name pos:start="73:25" pos:end="73:25">r</name> <init pos:start="73:27" pos:end="73:48">= <expr pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:48"><name pos:start="73:29" pos:end="73:40">gamma_lookup</name><index pos:start="73:41" pos:end="73:48">[<expr pos:start="73:42" pos:end="73:47"><operator pos:start="73:42" pos:end="73:42">*</operator><name pos:start="73:43" pos:end="73:45">buf</name><operator pos:start="73:46" pos:end="73:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="75:21" pos:end="75:49"><decl pos:start="75:21" pos:end="75:48"><type pos:start="75:21" pos:end="75:23"><name pos:start="75:21" pos:end="75:23">int</name></type> <name pos:start="75:25" pos:end="75:25">g</name> <init pos:start="75:27" pos:end="75:48">= <expr pos:start="75:29" pos:end="75:48"><name pos:start="75:29" pos:end="75:48"><name pos:start="75:29" pos:end="75:40">gamma_lookup</name><index pos:start="75:41" pos:end="75:48">[<expr pos:start="75:42" pos:end="75:47"><operator pos:start="75:42" pos:end="75:42">*</operator><name pos:start="75:43" pos:end="75:45">buf</name><operator pos:start="75:46" pos:end="75:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="77:21" pos:end="80:0"><decl pos:start="77:21" pos:end="77:48"><type pos:start="77:21" pos:end="77:23"><name pos:start="77:21" pos:end="77:23">int</name></type> <name pos:start="77:25" pos:end="77:25">b</name> <init pos:start="77:27" pos:end="77:48">= <expr pos:start="77:29" pos:end="77:48"><name pos:start="77:29" pos:end="77:48"><name pos:start="77:29" pos:end="77:40">gamma_lookup</name><index pos:start="77:41" pos:end="77:48">[<expr pos:start="77:42" pos:end="77:47"><operator pos:start="77:42" pos:end="77:42">*</operator><name pos:start="77:43" pos:end="77:45">buf</name><operator pos:start="77:46" pos:end="77:47">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="81:21" pos:end="81:57"><expr pos:start="81:21" pos:end="81:56"><operator pos:start="81:21" pos:end="81:21">*</operator><name pos:start="81:22" pos:end="81:27">tmpptr</name><operator pos:start="81:28" pos:end="81:29">++</operator> <operator pos:start="81:31" pos:end="81:31">=</operator> <operator pos:start="81:33" pos:end="81:33">(</operator><name pos:start="81:34" pos:end="81:34">r</name> <operator pos:start="81:36" pos:end="81:37">&lt;&lt;</operator> <literal type="number" pos:start="81:39" pos:end="81:40">16</literal><operator pos:start="81:41" pos:end="81:41">)</operator> <operator pos:start="81:43" pos:end="81:43">|</operator> <operator pos:start="81:45" pos:end="81:45">(</operator><name pos:start="81:46" pos:end="81:46">g</name> <operator pos:start="81:48" pos:end="81:49">&lt;&lt;</operator> <literal type="number" pos:start="81:51" pos:end="81:51">8</literal><operator pos:start="81:52" pos:end="81:52">)</operator> <operator pos:start="81:54" pos:end="81:54">|</operator> <name pos:start="81:56" pos:end="81:56">b</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="85:17" pos:end="85:36"><expr pos:start="85:17" pos:end="85:35"><name pos:start="85:17" pos:end="85:33"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:33">palettes_count</name></name><operator pos:start="85:34" pos:end="85:35">++</operator></expr>;</expr_stmt>

                <break pos:start="87:17" pos:end="87:22">break;</break>

            <case pos:start="89:13" pos:end="89:26">case <expr pos:start="89:18" pos:end="89:25"><name pos:start="89:18" pos:end="89:25">SHOT_TAG</name></expr>:</case>

                <if_stmt pos:start="91:17" pos:end="93:47"><if pos:start="91:17" pos:end="93:47">if <condition pos:start="91:20" pos:end="91:29">(<expr pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:24">size</name> <operator pos:start="91:26" pos:end="91:26">&lt;</operator> <literal type="number" pos:start="91:28" pos:end="91:28">4</literal></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:47"><block_content pos:start="93:21" pos:end="93:47">

                    <return pos:start="93:21" pos:end="93:47">return <expr pos:start="93:28" pos:end="93:46"><name pos:start="93:28" pos:end="93:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:52"><expr pos:start="95:17" pos:end="95:51"><name pos:start="95:17" pos:end="95:23">new_pal</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="95:51"><name pos:start="95:27" pos:end="95:45">bytestream_get_le32</name><argument_list pos:start="95:46" pos:end="95:51">(<argument pos:start="95:47" pos:end="95:50"><expr pos:start="95:47" pos:end="95:50"><operator pos:start="95:47" pos:end="95:47">&amp;</operator><name pos:start="95:48" pos:end="95:50">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="97:17" pos:end="103:78"><if pos:start="97:17" pos:end="101:17">if <condition pos:start="97:20" pos:end="97:48">(<expr pos:start="97:21" pos:end="97:47"><name pos:start="97:21" pos:end="97:27">new_pal</name> <operator pos:start="97:29" pos:end="97:29">&lt;</operator> <name pos:start="97:31" pos:end="97:47"><name pos:start="97:31" pos:end="97:31">s</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:47">palettes_count</name></name></expr>)</condition> <block pos:start="97:50" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:45">

                    <expr_stmt pos:start="99:21" pos:end="99:45"><expr pos:start="99:21" pos:end="99:44"><name pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:34">cur_palette</name></name> <operator pos:start="99:36" pos:end="99:36">=</operator> <name pos:start="99:38" pos:end="99:44">new_pal</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="101:19" pos:end="103:78">else<block type="pseudo" pos:start="103:21" pos:end="103:78"><block_content pos:start="103:21" pos:end="103:78">

                    <expr_stmt pos:start="103:21" pos:end="103:78"><expr pos:start="103:21" pos:end="103:77"><call pos:start="103:21" pos:end="103:77"><name pos:start="103:21" pos:end="103:26">av_log</name><argument_list pos:start="103:27" pos:end="103:77">(<argument pos:start="103:28" pos:end="103:32"><expr pos:start="103:28" pos:end="103:32"><name pos:start="103:28" pos:end="103:32">avctx</name></expr></argument>, <argument pos:start="103:35" pos:end="103:46"><expr pos:start="103:35" pos:end="103:46"><name pos:start="103:35" pos:end="103:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:49" pos:end="103:76"><expr pos:start="103:49" pos:end="103:76"><literal type="string" pos:start="103:49" pos:end="103:76">"Invalid palette selected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="105:17" pos:end="105:22">break;</break>

            <case pos:start="107:13" pos:end="107:26">case <expr pos:start="107:18" pos:end="107:25"><name pos:start="107:18" pos:end="107:25">VGA__TAG</name></expr>:</case>

                <break pos:start="109:17" pos:end="109:22">break;</break>

            <default pos:start="111:13" pos:end="111:20">default:</default>

                <expr_stmt pos:start="113:17" pos:end="113:28"><expr pos:start="113:17" pos:end="113:27"><name pos:start="113:17" pos:end="113:19">buf</name> <operator pos:start="113:21" pos:end="113:22">+=</operator> <name pos:start="113:24" pos:end="113:27">size</name></expr>;</expr_stmt>

                <break pos:start="115:17" pos:end="115:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></while>

        <expr_stmt pos:start="121:9" pos:end="121:33"><expr pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:16">buf_size</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:26">buf_end</name> <operator pos:start="121:28" pos:end="121:28">-</operator> <name pos:start="121:30" pos:end="121:32">buf</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:60">(<expr pos:start="125:9" pos:end="125:59"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:12">ret</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <call pos:start="125:16" pos:end="125:58"><name pos:start="125:16" pos:end="125:32"><name pos:start="125:16" pos:end="125:20">avctx</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:32">get_buffer</name></name><argument_list pos:start="125:33" pos:end="125:58">(<argument pos:start="125:34" pos:end="125:38"><expr pos:start="125:34" pos:end="125:38"><name pos:start="125:34" pos:end="125:38">avctx</name></expr></argument>, <argument pos:start="125:41" pos:end="125:57"><expr pos:start="125:41" pos:end="125:57"><operator pos:start="125:41" pos:end="125:41">&amp;</operator><name pos:start="125:42" pos:end="125:57"><name pos:start="125:42" pos:end="125:42">s</name><operator pos:start="125:43" pos:end="125:44">-&gt;</operator><name pos:start="125:45" pos:end="125:57">current_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="125:59" pos:end="125:59">)</operator></expr>)</condition> <block pos:start="125:62" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:19">

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><call pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:14">av_log</name><argument_list pos:start="127:15" pos:end="127:63">(<argument pos:start="127:16" pos:end="127:23"><expr pos:start="127:16" pos:end="127:23"><name pos:start="127:16" pos:end="127:23"><name pos:start="127:16" pos:end="127:16">s</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:23">avctx</name></name></expr></argument>, <argument pos:start="127:26" pos:end="127:37"><expr pos:start="127:26" pos:end="127:37"><name pos:start="127:26" pos:end="127:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:40" pos:end="127:62"><expr pos:start="127:40" pos:end="127:62"><literal type="string" pos:start="127:40" pos:end="127:62">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:19">return <expr pos:start="129:16" pos:end="129:18"><name pos:start="129:16" pos:end="129:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:35"><expr pos:start="133:5" pos:end="133:34"><name pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:20">current_frame</name><operator pos:start="133:21" pos:end="133:21">.</operator><name pos:start="133:22" pos:end="133:30">reference</name></name> <operator pos:start="133:32" pos:end="133:32">=</operator> <literal type="number" pos:start="133:34" pos:end="133:34">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="139:72"><if pos:start="137:5" pos:end="139:72">if <condition pos:start="137:8" pos:end="137:23">(<expr pos:start="137:9" pos:end="137:22"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:22"><name pos:start="137:10" pos:end="137:10">s</name><operator pos:start="137:11" pos:end="137:12">-&gt;</operator><name pos:start="137:13" pos:end="137:22">frame_size</name></name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:72"><block_content pos:start="139:9" pos:end="139:72">

        <expr_stmt pos:start="139:9" pos:end="139:72"><expr pos:start="139:9" pos:end="139:71"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:21">frame_size</name></name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:52"><name pos:start="139:25" pos:end="139:25">s</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:40">current_frame</name><operator pos:start="139:41" pos:end="139:41">.</operator><name pos:start="139:42" pos:end="139:49">linesize</name><index pos:start="139:50" pos:end="139:52">[<expr pos:start="139:51" pos:end="139:51"><literal type="number" pos:start="139:51" pos:end="139:51">0</literal></expr>]</index></name> <operator pos:start="139:54" pos:end="139:54">*</operator> <name pos:start="139:56" pos:end="139:71"><name pos:start="139:56" pos:end="139:56">s</name><operator pos:start="139:57" pos:end="139:58">-&gt;</operator><name pos:start="139:59" pos:end="139:63">avctx</name><operator pos:start="139:64" pos:end="139:65">-&gt;</operator><name pos:start="139:66" pos:end="139:71">height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:101"><expr pos:start="143:5" pos:end="143:100"><call pos:start="143:5" pos:end="143:100"><name pos:start="143:5" pos:end="143:10">memcpy</name><argument_list pos:start="143:11" pos:end="143:100">(<argument pos:start="143:12" pos:end="143:35"><expr pos:start="143:12" pos:end="143:35"><name pos:start="143:12" pos:end="143:35"><name pos:start="143:12" pos:end="143:12">s</name><operator pos:start="143:13" pos:end="143:14">-&gt;</operator><name pos:start="143:15" pos:end="143:27">current_frame</name><operator pos:start="143:28" pos:end="143:28">.</operator><name pos:start="143:29" pos:end="143:32">data</name><index pos:start="143:33" pos:end="143:35">[<expr pos:start="143:34" pos:end="143:34"><literal type="number" pos:start="143:34" pos:end="143:34">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="143:38" pos:end="143:83"><expr pos:start="143:38" pos:end="143:83"><name pos:start="143:38" pos:end="143:48"><name pos:start="143:38" pos:end="143:38">s</name><operator pos:start="143:39" pos:end="143:40">-&gt;</operator><name pos:start="143:41" pos:end="143:48">palettes</name></name> <operator pos:start="143:50" pos:end="143:50">+</operator> <name pos:start="143:52" pos:end="143:65"><name pos:start="143:52" pos:end="143:52">s</name><operator pos:start="143:53" pos:end="143:54">-&gt;</operator><name pos:start="143:55" pos:end="143:65">cur_palette</name></name> <operator pos:start="143:67" pos:end="143:67">*</operator> <name pos:start="143:69" pos:end="143:83">AVPALETTE_COUNT</name></expr></argument>, <argument pos:start="143:86" pos:end="143:99"><expr pos:start="143:86" pos:end="143:99"><name pos:start="143:86" pos:end="143:99">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:17"><expr pos:start="147:5" pos:end="147:16"><name pos:start="147:5" pos:end="147:10"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:10">buf</name></name> <operator pos:start="147:12" pos:end="147:12">=</operator> <name pos:start="147:14" pos:end="147:16">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:23"><expr pos:start="149:5" pos:end="149:22"><name pos:start="149:5" pos:end="149:11"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:11">size</name></name> <operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:22">buf_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:28"><expr pos:start="153:5" pos:end="153:27"><call pos:start="153:5" pos:end="153:27"><name pos:start="153:5" pos:end="153:24">xan_wc3_decode_frame</name><argument_list pos:start="153:25" pos:end="153:27">(<argument pos:start="153:26" pos:end="153:26"><expr pos:start="153:26" pos:end="153:26"><name pos:start="153:26" pos:end="153:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:51">/* release the last frame if it is allocated */</comment>

    <if_stmt pos:start="159:5" pos:end="161:53"><if pos:start="159:5" pos:end="161:53">if <condition pos:start="159:8" pos:end="159:30">(<expr pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:29"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:21">last_frame</name><operator pos:start="159:22" pos:end="159:22">.</operator><name pos:start="159:23" pos:end="159:26">data</name><index pos:start="159:27" pos:end="159:29">[<expr pos:start="159:28" pos:end="159:28"><literal type="number" pos:start="159:28" pos:end="159:28">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:53"><block_content pos:start="161:9" pos:end="161:53">

        <expr_stmt pos:start="161:9" pos:end="161:53"><expr pos:start="161:9" pos:end="161:52"><call pos:start="161:9" pos:end="161:52"><name pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:13">avctx</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:29">release_buffer</name></name><argument_list pos:start="161:30" pos:end="161:52">(<argument pos:start="161:31" pos:end="161:35"><expr pos:start="161:31" pos:end="161:35"><name pos:start="161:31" pos:end="161:35">avctx</name></expr></argument>, <argument pos:start="161:38" pos:end="161:51"><expr pos:start="161:38" pos:end="161:51"><operator pos:start="161:38" pos:end="161:38">&amp;</operator><name pos:start="161:39" pos:end="161:51"><name pos:start="161:39" pos:end="161:39">s</name><operator pos:start="161:40" pos:end="161:41">-&gt;</operator><name pos:start="161:42" pos:end="161:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:33"><expr pos:start="165:5" pos:end="165:32"><operator pos:start="165:5" pos:end="165:5">*</operator><name pos:start="165:6" pos:end="165:14">data_size</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <sizeof pos:start="165:18" pos:end="165:32">sizeof<argument_list pos:start="165:24" pos:end="165:32">(<argument pos:start="165:25" pos:end="165:31"><expr pos:start="165:25" pos:end="165:31"><name pos:start="165:25" pos:end="165:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:39"><expr pos:start="167:5" pos:end="167:38"><operator pos:start="167:5" pos:end="167:5">*</operator><operator pos:start="167:6" pos:end="167:6">(</operator><name pos:start="167:7" pos:end="167:13">AVFrame</name><operator pos:start="167:14" pos:end="167:14">*</operator><operator pos:start="167:15" pos:end="167:15">)</operator><name pos:start="167:16" pos:end="167:19">data</name> <operator pos:start="167:21" pos:end="167:21">=</operator> <name pos:start="167:23" pos:end="167:38"><name pos:start="167:23" pos:end="167:23">s</name><operator pos:start="167:24" pos:end="167:25">-&gt;</operator><name pos:start="167:26" pos:end="167:38">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:24">/* shuffle frames */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:53"><expr pos:start="173:5" pos:end="173:52"><call pos:start="173:5" pos:end="173:52"><name pos:start="173:5" pos:end="173:10">FFSWAP</name><argument_list pos:start="173:11" pos:end="173:52">(<argument pos:start="173:12" pos:end="173:18"><expr pos:start="173:12" pos:end="173:18"><name pos:start="173:12" pos:end="173:18">AVFrame</name></expr></argument>, <argument pos:start="173:21" pos:end="173:36"><expr pos:start="173:21" pos:end="173:36"><name pos:start="173:21" pos:end="173:36"><name pos:start="173:21" pos:end="173:21">s</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:36">current_frame</name></name></expr></argument>, <argument pos:start="173:39" pos:end="173:51"><expr pos:start="173:39" pos:end="173:51"><name pos:start="173:39" pos:end="173:51"><name pos:start="173:39" pos:end="173:39">s</name><operator pos:start="173:40" pos:end="173:41">-&gt;</operator><name pos:start="173:42" pos:end="173:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="179:5" pos:end="179:20">return <expr pos:start="179:12" pos:end="179:19"><name pos:start="179:12" pos:end="179:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
