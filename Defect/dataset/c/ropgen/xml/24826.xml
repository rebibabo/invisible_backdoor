<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24826.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_block</name><parameter_list pos:start="1:24" pos:end="3:89">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:42">MJpegDecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">DCTELEM</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:37"><decl pos:start="3:25" pos:end="3:37"><type pos:start="3:25" pos:end="3:37"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:37">component</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:51">dc_index</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:65"><decl pos:start="3:54" pos:end="3:65"><type pos:start="3:54" pos:end="3:65"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">ac_index</name></decl></parameter>, <parameter pos:start="3:68" pos:end="3:88"><decl pos:start="3:68" pos:end="3:88"><type pos:start="3:68" pos:end="3:88"><name pos:start="3:68" pos:end="3:74">int16_t</name> <modifier pos:start="3:76" pos:end="3:76">*</modifier></type><name pos:start="3:77" pos:end="3:88">quant_matrix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">code</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">i</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">j</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:25">level</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">VLC</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:15">ac_vlc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:17">/* DC coef */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:39"><expr pos:start="15:5" pos:end="15:38"><name pos:start="15:5" pos:end="15:7">val</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:38"><name pos:start="15:11" pos:end="15:25">mjpeg_decode_dc</name><argument_list pos:start="15:26" pos:end="15:38">(<argument pos:start="15:27" pos:end="15:27"><expr pos:start="15:27" pos:end="15:27"><name pos:start="15:27" pos:end="15:27">s</name></expr></argument>, <argument pos:start="15:30" pos:end="15:37"><expr pos:start="15:30" pos:end="15:37"><name pos:start="15:30" pos:end="15:37">dc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:11">val</name> <operator pos:start="17:13" pos:end="17:14">==</operator> <literal type="number" pos:start="17:16" pos:end="17:21">0xffff</literal></expr>)</condition> <block pos:start="17:24" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:30"><expr pos:start="19:9" pos:end="19:29"><call pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:15">dprintf</name><argument_list pos:start="19:16" pos:end="19:29">(<argument pos:start="19:17" pos:end="19:28"><expr pos:start="19:17" pos:end="19:28"><literal type="string" pos:start="19:17" pos:end="19:28">"error dc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:7">val</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:13">val</name> <operator pos:start="25:15" pos:end="25:15">*</operator> <name pos:start="25:17" pos:end="25:31"><name pos:start="25:17" pos:end="25:28">quant_matrix</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr>]</index></name> <operator pos:start="25:33" pos:end="25:33">+</operator> <name pos:start="25:35" pos:end="25:55"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:44">last_dc</name><index pos:start="25:45" pos:end="25:55">[<expr pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:54">component</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:14">last_dc</name><index pos:start="27:15" pos:end="27:25">[<expr pos:start="27:16" pos:end="27:24"><name pos:start="27:16" pos:end="27:24">component</name></expr>]</index></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:31">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:9">block</name><index pos:start="29:10" pos:end="29:12">[<expr pos:start="29:11" pos:end="29:11"><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>]</index></name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:18">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:18">/* AC coefs */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:10">ac_vlc</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">&amp;</operator><name pos:start="33:15" pos:end="33:34"><name pos:start="33:15" pos:end="33:15">s</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:21">vlcs</name><index pos:start="33:22" pos:end="33:24">[<expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">1</literal></expr>]</index><index pos:start="33:25" pos:end="33:34">[<expr pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:33">ac_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:10"><expr pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:5">i</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <literal type="number" pos:start="35:9" pos:end="35:9">0</literal></expr>;</expr_stmt>

    <block pos:start="37:5" pos:end="111:29">{<block_content pos:start="37:6" pos:end="111:28"><macro pos:start="37:6" pos:end="37:28"><name pos:start="37:6" pos:end="37:16">OPEN_READER</name><argument_list pos:start="37:17" pos:end="37:28">(<argument pos:start="37:18" pos:end="37:19">re</argument>, <argument pos:start="37:22" pos:end="37:27">&amp;s-&gt;gb</argument>)</argument_list></macro>

    <for pos:start="39:5" pos:end="109:5">for<control pos:start="39:8" pos:end="39:11">(<init pos:start="39:9" pos:end="39:9">;</init><condition pos:start="39:10" pos:end="39:10">;</condition><incr/>)</control> <block pos:start="39:13" pos:end="109:5">{<block_content pos:start="41:9" pos:end="107:9">

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><call pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:20">UPDATE_CACHE</name><argument_list pos:start="41:21" pos:end="41:32">(<argument pos:start="41:22" pos:end="41:23"><expr pos:start="41:22" pos:end="41:23"><name pos:start="41:22" pos:end="41:23">re</name></expr></argument>, <argument pos:start="41:26" pos:end="41:31"><expr pos:start="41:26" pos:end="41:31"><operator pos:start="41:26" pos:end="41:26">&amp;</operator><name pos:start="41:27" pos:end="41:31"><name pos:start="41:27" pos:end="41:27">s</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro pos:start="43:9" pos:end="43:67"><name pos:start="43:9" pos:end="43:15">GET_VLC</name><argument_list pos:start="43:16" pos:end="43:67">(<argument pos:start="43:17" pos:end="43:20">code</argument>, <argument pos:start="43:23" pos:end="43:24">re</argument>, <argument pos:start="43:27" pos:end="43:32">&amp;s-&gt;gb</argument>, <argument pos:start="43:35" pos:end="43:60">s-&gt;vlcs[<literal type="number" pos:start="43:43" pos:end="43:43">1</literal>][ac_index].table</argument>, <argument pos:start="43:63" pos:end="43:63"><literal type="number" pos:start="43:63" pos:end="43:63">9</literal></argument>, <argument pos:start="43:66" pos:end="43:66"><literal type="number" pos:start="43:66" pos:end="43:66">2</literal></argument>)</argument_list></macro>



        <comment type="block" pos:start="47:9" pos:end="47:17">/* EOB */</comment>

        <if_stmt pos:start="49:9" pos:end="51:18"><if pos:start="49:9" pos:end="51:18">if <condition pos:start="49:12" pos:end="49:25">(<expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:16">code</name> <operator pos:start="49:18" pos:end="49:19">==</operator> <literal type="number" pos:start="49:21" pos:end="49:24">0x10</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:18"><block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="107:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:26">(<expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:16">code</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <literal type="number" pos:start="53:21" pos:end="53:25">0x100</literal></expr>)</condition> <block pos:start="53:28" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:20">

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:13">i</name> <operator pos:start="55:15" pos:end="55:16">+=</operator> <literal type="number" pos:start="55:18" pos:end="55:19">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="107:9">else <block pos:start="57:16" pos:end="107:9">{<block_content pos:start="59:13" pos:end="105:47">

            <expr_stmt pos:start="59:13" pos:end="59:39"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:13">i</name> <operator pos:start="59:15" pos:end="59:16">+=</operator> <operator pos:start="59:18" pos:end="59:18">(</operator><operator pos:start="59:19" pos:end="59:19">(</operator><name pos:start="59:20" pos:end="59:27">unsigned</name><operator pos:start="59:28" pos:end="59:28">)</operator><name pos:start="59:29" pos:end="59:32">code</name><operator pos:start="59:33" pos:end="59:33">)</operator> <operator pos:start="59:35" pos:end="59:36">&gt;&gt;</operator> <literal type="number" pos:start="59:38" pos:end="59:38">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:24"><expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:16">code</name> <operator pos:start="61:18" pos:end="61:19">&amp;=</operator> <literal type="number" pos:start="61:21" pos:end="61:23">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="67:13"><if pos:start="63:13" pos:end="67:13">if<condition pos:start="63:15" pos:end="63:42">(<expr pos:start="63:16" pos:end="63:41"><name pos:start="63:16" pos:end="63:19">code</name> <operator pos:start="63:21" pos:end="63:21">&gt;</operator> <name pos:start="63:23" pos:end="63:36">MIN_CACHE_BITS</name> <operator pos:start="63:38" pos:end="63:38">-</operator> <literal type="number" pos:start="63:40" pos:end="63:41">16</literal></expr>)</condition><block pos:start="63:43" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:40">

                <macro pos:start="65:17" pos:end="65:40"><name pos:start="65:17" pos:end="65:28">UPDATE_CACHE</name><argument_list pos:start="65:29" pos:end="65:40">(<argument pos:start="65:30" pos:end="65:31">re</argument>, <argument pos:start="65:34" pos:end="65:39">&amp;s-&gt;gb</argument>)</argument_list></macro>

            </block_content>}</block></if></if_stmt>

            <block pos:start="69:13" pos:end="77:13">{<block_content pos:start="71:17" pos:end="75:69">

                <decl_stmt pos:start="71:17" pos:end="71:43"><decl pos:start="71:17" pos:end="71:42"><type pos:start="71:17" pos:end="71:19"><name pos:start="71:17" pos:end="71:19">int</name></type> <name pos:start="71:21" pos:end="71:25">cache</name><init pos:start="71:26" pos:end="71:42">=<expr pos:start="71:27" pos:end="71:42"><call pos:start="71:27" pos:end="71:42"><name pos:start="71:27" pos:end="71:35">GET_CACHE</name><argument_list pos:start="71:36" pos:end="71:42">(<argument pos:start="71:37" pos:end="71:38"><expr pos:start="71:37" pos:end="71:38"><name pos:start="71:37" pos:end="71:38">re</name></expr></argument>,<argument pos:start="71:40" pos:end="71:41"><expr pos:start="71:40" pos:end="71:41"><name pos:start="71:40" pos:end="71:41">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="73:17" pos:end="73:38"><decl pos:start="73:17" pos:end="73:37"><type pos:start="73:17" pos:end="73:19"><name pos:start="73:17" pos:end="73:19">int</name></type> <name pos:start="73:21" pos:end="73:24">sign</name><init pos:start="73:25" pos:end="73:37">=<expr pos:start="73:26" pos:end="73:37"><operator pos:start="73:26" pos:end="73:26">(</operator><operator pos:start="73:27" pos:end="73:27">~</operator><name pos:start="73:28" pos:end="73:32">cache</name><operator pos:start="73:33" pos:end="73:33">)</operator><operator pos:start="73:34" pos:end="73:35">&gt;&gt;</operator><literal type="number" pos:start="73:36" pos:end="73:37">31</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="75:17" pos:end="75:69"><expr pos:start="75:17" pos:end="75:68"><name pos:start="75:17" pos:end="75:21">level</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <operator pos:start="75:25" pos:end="75:25">(</operator><call pos:start="75:26" pos:end="75:53"><name pos:start="75:26" pos:end="75:34">NEG_USR32</name><argument_list pos:start="75:35" pos:end="75:53">(<argument pos:start="75:36" pos:end="75:47"><expr pos:start="75:36" pos:end="75:47"><name pos:start="75:36" pos:end="75:39">sign</name> <operator pos:start="75:41" pos:end="75:41">^</operator> <name pos:start="75:43" pos:end="75:47">cache</name></expr></argument>,<argument pos:start="75:49" pos:end="75:52"><expr pos:start="75:49" pos:end="75:52"><name pos:start="75:49" pos:end="75:52">code</name></expr></argument>)</argument_list></call> <operator pos:start="75:55" pos:end="75:55">^</operator> <name pos:start="75:57" pos:end="75:60">sign</name><operator pos:start="75:61" pos:end="75:61">)</operator> <operator pos:start="75:63" pos:end="75:63">-</operator> <name pos:start="75:65" pos:end="75:68">sign</name></expr>;</expr_stmt>

            </block_content>}</block>



            <macro pos:start="81:13" pos:end="81:44"><name pos:start="81:13" pos:end="81:26">LAST_SKIP_BITS</name><argument_list pos:start="81:27" pos:end="81:44">(<argument pos:start="81:28" pos:end="81:29">re</argument>, <argument pos:start="81:32" pos:end="81:37">&amp;s-&gt;gb</argument>, <argument pos:start="81:40" pos:end="81:43">code</argument>)</argument_list></macro>



            <if_stmt pos:start="85:13" pos:end="101:13"><if pos:start="85:13" pos:end="101:13">if <condition pos:start="85:16" pos:end="85:24">(<expr pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:20">&gt;=</operator> <literal type="number" pos:start="85:22" pos:end="85:23">63</literal></expr>)</condition> <block pos:start="85:26" pos:end="101:13">{<block_content pos:start="87:17" pos:end="99:26">

                <if_stmt pos:start="87:17" pos:end="95:17"><if pos:start="87:17" pos:end="95:17">if<condition pos:start="87:19" pos:end="87:27">(<expr pos:start="87:20" pos:end="87:26"><name pos:start="87:20" pos:end="87:20">i</name> <operator pos:start="87:22" pos:end="87:23">==</operator> <literal type="number" pos:start="87:25" pos:end="87:26">63</literal></expr>)</condition><block pos:start="87:28" pos:end="95:17">{<block_content pos:start="89:21" pos:end="93:26">

                    <expr_stmt pos:start="89:21" pos:end="89:52"><expr pos:start="89:21" pos:end="89:51"><name pos:start="89:21" pos:end="89:21">j</name> <operator pos:start="89:23" pos:end="89:23">=</operator> <name pos:start="89:25" pos:end="89:51"><name pos:start="89:25" pos:end="89:25">s</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:36">scantable</name><operator pos:start="89:37" pos:end="89:37">.</operator><name pos:start="89:38" pos:end="89:47">permutated</name><index pos:start="89:48" pos:end="89:51">[<expr pos:start="89:49" pos:end="89:50"><literal type="number" pos:start="89:49" pos:end="89:50">63</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:55"><expr pos:start="91:21" pos:end="91:54"><name pos:start="91:21" pos:end="91:28"><name pos:start="91:21" pos:end="91:25">block</name><index pos:start="91:26" pos:end="91:28">[<expr pos:start="91:27" pos:end="91:27"><name pos:start="91:27" pos:end="91:27">j</name></expr>]</index></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <name pos:start="91:32" pos:end="91:36">level</name> <operator pos:start="91:38" pos:end="91:38">*</operator> <name pos:start="91:40" pos:end="91:54"><name pos:start="91:40" pos:end="91:51">quant_matrix</name><index pos:start="91:52" pos:end="91:54">[<expr pos:start="91:53" pos:end="91:53"><name pos:start="91:53" pos:end="91:53">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <break pos:start="93:21" pos:end="93:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><call pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:23">dprintf</name><argument_list pos:start="97:24" pos:end="97:47">(<argument pos:start="97:25" pos:end="97:43"><expr pos:start="97:25" pos:end="97:43"><literal type="string" pos:start="97:25" pos:end="97:43">"error count: %d\n"</literal></expr></argument>, <argument pos:start="97:46" pos:end="97:46"><expr pos:start="97:46" pos:end="97:46"><name pos:start="97:46" pos:end="97:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:26">return <expr pos:start="99:24" pos:end="99:25"><operator pos:start="99:24" pos:end="99:24">-</operator><literal type="number" pos:start="99:25" pos:end="99:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:43"><expr pos:start="103:13" pos:end="103:42"><name pos:start="103:13" pos:end="103:13">j</name> <operator pos:start="103:15" pos:end="103:15">=</operator> <name pos:start="103:17" pos:end="103:42"><name pos:start="103:17" pos:end="103:17">s</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:28">scantable</name><operator pos:start="103:29" pos:end="103:29">.</operator><name pos:start="103:30" pos:end="103:39">permutated</name><index pos:start="103:40" pos:end="103:42">[<expr pos:start="103:41" pos:end="103:41"><name pos:start="103:41" pos:end="103:41">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:47"><expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:17">block</name><index pos:start="105:18" pos:end="105:20">[<expr pos:start="105:19" pos:end="105:19"><name pos:start="105:19" pos:end="105:19">j</name></expr>]</index></name> <operator pos:start="105:22" pos:end="105:22">=</operator> <name pos:start="105:24" pos:end="105:28">level</name> <operator pos:start="105:30" pos:end="105:30">*</operator> <name pos:start="105:32" pos:end="105:46"><name pos:start="105:32" pos:end="105:43">quant_matrix</name><index pos:start="105:44" pos:end="105:46">[<expr pos:start="105:45" pos:end="105:45"><name pos:start="105:45" pos:end="105:45">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <macro pos:start="111:5" pos:end="111:28"><name pos:start="111:5" pos:end="111:16">CLOSE_READER</name><argument_list pos:start="111:17" pos:end="111:28">(<argument pos:start="111:18" pos:end="111:19">re</argument>, <argument pos:start="111:22" pos:end="111:27">&amp;s-&gt;gb</argument>)</argument_list></macro></block_content>}</block>



    <return pos:start="115:5" pos:end="115:13">return <expr pos:start="115:12" pos:end="115:12"><literal type="number" pos:start="115:12" pos:end="115:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
