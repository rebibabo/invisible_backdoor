<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11684.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">vpc_create</name><parameter_list pos:start="1:22" pos:end="1:73">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:42">filename</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:52">QemuOpts</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:58">opts</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="241:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">uint8_t</name></type> <name pos:start="5:13" pos:end="5:21"><name pos:start="5:13" pos:end="5:15">buf</name><index pos:start="5:16" pos:end="5:21">[<expr pos:start="5:17" pos:end="5:20"><literal type="number" pos:start="5:17" pos:end="5:20">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">VHDFooter</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">footer</name> <init pos:start="7:23" pos:end="7:41">= <expr pos:start="7:25" pos:end="7:41"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:34">VHDFooter</name> <operator pos:start="7:36" pos:end="7:36">*</operator><operator pos:start="7:37" pos:end="7:37">)</operator> <name pos:start="7:39" pos:end="7:41">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:25">disk_type_param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:13"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:17">cyls</name> <init pos:start="13:19" pos:end="13:21">= <expr pos:start="13:21" pos:end="13:21"><literal type="number" pos:start="13:21" pos:end="13:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:17">heads</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:24">secs_per_cyl</name> <init pos:start="17:26" pos:end="17:28">= <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:25">total_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:22">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">disk_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name> <init pos:start="25:13" pos:end="25:18">= <expr pos:start="25:15" pos:end="25:18"><operator pos:start="25:15" pos:end="25:15">-</operator><name pos:start="25:16" pos:end="25:18">EIO</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:14">nocow</name> <init pos:start="27:16" pos:end="27:22">= <expr pos:start="27:18" pos:end="27:22"><name pos:start="27:18" pos:end="27:22">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:26">/* Read out options */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:64"><expr pos:start="33:5" pos:end="33:63"><name pos:start="33:5" pos:end="33:14">total_size</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:63"><name pos:start="33:18" pos:end="33:38">qemu_opt_get_size_del</name><argument_list pos:start="33:39" pos:end="33:63">(<argument pos:start="33:40" pos:end="33:43"><expr pos:start="33:40" pos:end="33:43"><name pos:start="33:40" pos:end="33:43">opts</name></expr></argument>, <argument pos:start="33:46" pos:end="33:59"><expr pos:start="33:46" pos:end="33:59"><name pos:start="33:46" pos:end="33:59">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="33:62" pos:end="33:62"><expr pos:start="33:62" pos:end="33:62"><literal type="number" pos:start="33:62" pos:end="33:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:19">disk_type_param</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:62"><name pos:start="35:23" pos:end="35:38">qemu_opt_get_del</name><argument_list pos:start="35:39" pos:end="35:62">(<argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><name pos:start="35:40" pos:end="35:43">opts</name></expr></argument>, <argument pos:start="35:46" pos:end="35:61"><expr pos:start="35:46" pos:end="35:61"><name pos:start="35:46" pos:end="35:61">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="59:5"><if pos:start="37:5" pos:end="55:5">if <condition pos:start="37:8" pos:end="37:24">(<expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:23">disk_type_param</name></expr>)</condition> <block pos:start="37:26" pos:end="55:5">{<block_content pos:start="39:9" pos:end="53:9">

        <if_stmt pos:start="39:9" pos:end="53:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:48">(<expr pos:start="39:13" pos:end="39:47"><operator pos:start="39:13" pos:end="39:13">!</operator><call pos:start="39:14" pos:end="39:47"><name pos:start="39:14" pos:end="39:19">strcmp</name><argument_list pos:start="39:20" pos:end="39:47">(<argument pos:start="39:21" pos:end="39:35"><expr pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:35">disk_type_param</name></expr></argument>, <argument pos:start="39:38" pos:end="39:46"><expr pos:start="39:38" pos:end="39:46"><literal type="string" pos:start="39:38" pos:end="39:46">"dynamic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:50" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:36">

            <expr_stmt pos:start="41:13" pos:end="41:36"><expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:21">disk_type</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:35">VHD_DYNAMIC</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="47:9">else if <condition pos:start="43:19" pos:end="43:53">(<expr pos:start="43:20" pos:end="43:52"><operator pos:start="43:20" pos:end="43:20">!</operator><call pos:start="43:21" pos:end="43:52"><name pos:start="43:21" pos:end="43:26">strcmp</name><argument_list pos:start="43:27" pos:end="43:52">(<argument pos:start="43:28" pos:end="43:42"><expr pos:start="43:28" pos:end="43:42"><name pos:start="43:28" pos:end="43:42">disk_type_param</name></expr></argument>, <argument pos:start="43:45" pos:end="43:51"><expr pos:start="43:45" pos:end="43:51"><literal type="string" pos:start="43:45" pos:end="43:51">"fixed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:55" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:34">

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:21">disk_type</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:33">VHD_FIXED</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="53:9">else <block pos:start="47:16" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:21">

            <expr_stmt pos:start="49:13" pos:end="49:26"><expr pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">-</operator><name pos:start="49:20" pos:end="49:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:21">goto <name pos:start="51:18" pos:end="51:20">out</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:32">

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:17">disk_type</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:31">VHD_DYNAMIC</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:64"><expr pos:start="61:5" pos:end="61:63"><name pos:start="61:5" pos:end="61:9">nocow</name> <operator pos:start="61:11" pos:end="61:11">=</operator> <call pos:start="61:13" pos:end="61:63"><name pos:start="61:13" pos:end="61:33">qemu_opt_get_bool_del</name><argument_list pos:start="61:34" pos:end="61:63">(<argument pos:start="61:35" pos:end="61:38"><expr pos:start="61:35" pos:end="61:38"><name pos:start="61:35" pos:end="61:38">opts</name></expr></argument>, <argument pos:start="61:41" pos:end="61:55"><expr pos:start="61:41" pos:end="61:55"><name pos:start="61:41" pos:end="61:55">BLOCK_OPT_NOCOW</name></expr></argument>, <argument pos:start="61:58" pos:end="61:62"><expr pos:start="61:58" pos:end="61:62"><name pos:start="61:58" pos:end="61:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:25">/* Create the file */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:76"><expr pos:start="67:5" pos:end="67:75"><name pos:start="67:5" pos:end="67:6">fd</name> <operator pos:start="67:8" pos:end="67:8">=</operator> <call pos:start="67:10" pos:end="67:75"><name pos:start="67:10" pos:end="67:18">qemu_open</name><argument_list pos:start="67:19" pos:end="67:75">(<argument pos:start="67:20" pos:end="67:27"><expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:27">filename</name></expr></argument>, <argument pos:start="67:30" pos:end="67:68"><expr pos:start="67:30" pos:end="67:68"><name pos:start="67:30" pos:end="67:37">O_WRONLY</name> <operator pos:start="67:39" pos:end="67:39">|</operator> <name pos:start="67:41" pos:end="67:47">O_CREAT</name> <operator pos:start="67:49" pos:end="67:49">|</operator> <name pos:start="67:51" pos:end="67:57">O_TRUNC</name> <operator pos:start="67:59" pos:end="67:59">|</operator> <name pos:start="67:61" pos:end="67:68">O_BINARY</name></expr></argument>, <argument pos:start="67:71" pos:end="67:74"><expr pos:start="67:71" pos:end="67:74"><literal type="number" pos:start="67:71" pos:end="67:74">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:15">(<expr pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:10">fd</name> <operator pos:start="69:12" pos:end="69:12">&lt;</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>)</condition> <block pos:start="69:17" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:17">

        <expr_stmt pos:start="71:9" pos:end="71:19"><expr pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:18">EIO</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="105:5"><if pos:start="79:5" pos:end="105:5">if <condition pos:start="79:8" pos:end="79:14">(<expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:13">nocow</name></expr>)</condition> <block pos:start="79:16" pos:end="105:5">{<block_content pos:start="93:9" pos:end="104:0">

<cpp:ifdef pos:start="81:1" pos:end="81:16">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:16">__linux__</name></cpp:ifdef>

        <comment type="block" pos:start="83:9" pos:end="91:11">/* Set NOCOW flag to solve performance issue on fs like btrfs.

         * This is an optimisation. The FS_IOC_SETFLAGS ioctl return value will

         * be ignored since any failure of this operation should not block the

         * left work.

         */</comment>

        <decl_stmt pos:start="93:9" pos:end="93:17"><decl pos:start="93:9" pos:end="93:16"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:16">attr</name></decl>;</decl_stmt>

        <if_stmt pos:start="95:9" pos:end="104:0"><if pos:start="95:9" pos:end="104:0">if <condition pos:start="95:12" pos:end="95:51">(<expr pos:start="95:13" pos:end="95:50"><call pos:start="95:13" pos:end="95:45"><name pos:start="95:13" pos:end="95:17">ioctl</name><argument_list pos:start="95:18" pos:end="95:45">(<argument pos:start="95:19" pos:end="95:20"><expr pos:start="95:19" pos:end="95:20"><name pos:start="95:19" pos:end="95:20">fd</name></expr></argument>, <argument pos:start="95:23" pos:end="95:37"><expr pos:start="95:23" pos:end="95:37"><name pos:start="95:23" pos:end="95:37">FS_IOC_GETFLAGS</name></expr></argument>, <argument pos:start="95:40" pos:end="95:44"><expr pos:start="95:40" pos:end="95:44"><operator pos:start="95:40" pos:end="95:40">&amp;</operator><name pos:start="95:41" pos:end="95:44">attr</name></expr></argument>)</argument_list></call> <operator pos:start="95:47" pos:end="95:48">==</operator> <literal type="number" pos:start="95:50" pos:end="95:50">0</literal></expr>)</condition> <block pos:start="95:53" pos:end="104:0">{<block_content pos:start="97:13" pos:end="99:46">

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:16">attr</name> <operator pos:start="97:18" pos:end="97:19">|=</operator> <name pos:start="97:21" pos:end="97:31">FS_NOCOW_FL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:46"><expr pos:start="99:13" pos:end="99:45"><call pos:start="99:13" pos:end="99:45"><name pos:start="99:13" pos:end="99:17">ioctl</name><argument_list pos:start="99:18" pos:end="99:45">(<argument pos:start="99:19" pos:end="99:20"><expr pos:start="99:19" pos:end="99:20"><name pos:start="99:19" pos:end="99:20">fd</name></expr></argument>, <argument pos:start="99:23" pos:end="99:37"><expr pos:start="99:23" pos:end="99:37"><name pos:start="99:23" pos:end="99:37">FS_IOC_SETFLAGS</name></expr></argument>, <argument pos:start="99:40" pos:end="99:44"><expr pos:start="99:40" pos:end="99:44"><operator pos:start="99:40" pos:end="99:40">&amp;</operator><name pos:start="99:41" pos:end="99:44">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="117:7">/*

     * Calculate matching total_size and geometry. Increase the number of

     * sectors requested until we get enough (or fail). This ensures that

     * qemu-img convert doesn't truncate images, but rather rounds up.

     */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:50"><expr pos:start="119:5" pos:end="119:49"><name pos:start="119:5" pos:end="119:17">total_sectors</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:30">total_size</name> <operator pos:start="119:32" pos:end="119:32">/</operator> <name pos:start="119:34" pos:end="119:49">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <for pos:start="121:5" pos:end="135:5">for <control pos:start="121:9" pos:end="121:74">(<init pos:start="121:10" pos:end="121:15"><expr pos:start="121:10" pos:end="121:14"><name pos:start="121:10" pos:end="121:10">i</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <literal type="number" pos:start="121:14" pos:end="121:14">0</literal></expr>;</init> <condition pos:start="121:17" pos:end="121:69"><expr pos:start="121:17" pos:end="121:68"><name pos:start="121:17" pos:end="121:29">total_sectors</name> <operator pos:start="121:31" pos:end="121:31">&gt;</operator> <operator pos:start="121:33" pos:end="121:33">(</operator><name pos:start="121:34" pos:end="121:40">int64_t</name><operator pos:start="121:41" pos:end="121:41">)</operator><name pos:start="121:42" pos:end="121:45">cyls</name> <operator pos:start="121:47" pos:end="121:47">*</operator> <name pos:start="121:49" pos:end="121:53">heads</name> <operator pos:start="121:55" pos:end="121:55">*</operator> <name pos:start="121:57" pos:end="121:68">secs_per_cyl</name></expr>;</condition> <incr pos:start="121:71" pos:end="121:73"><expr pos:start="121:71" pos:end="121:73"><name pos:start="121:71" pos:end="121:71">i</name><operator pos:start="121:72" pos:end="121:73">++</operator></expr></incr>)</control> <block pos:start="121:76" pos:end="135:5">{<block_content pos:start="123:9" pos:end="133:9">

        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="125:46">(<expr pos:start="123:13" pos:end="125:45"><call pos:start="123:13" pos:end="125:45"><name pos:start="123:13" pos:end="123:30">calculate_geometry</name><argument_list pos:start="123:31" pos:end="125:45">(<argument pos:start="123:32" pos:end="123:48"><expr pos:start="123:32" pos:end="123:48"><name pos:start="123:32" pos:end="123:44">total_sectors</name> <operator pos:start="123:46" pos:end="123:46">+</operator> <name pos:start="123:48" pos:end="123:48">i</name></expr></argument>, <argument pos:start="123:51" pos:end="123:55"><expr pos:start="123:51" pos:end="123:55"><operator pos:start="123:51" pos:end="123:51">&amp;</operator><name pos:start="123:52" pos:end="123:55">cyls</name></expr></argument>, <argument pos:start="123:58" pos:end="123:63"><expr pos:start="123:58" pos:end="123:63"><operator pos:start="123:58" pos:end="123:58">&amp;</operator><name pos:start="123:59" pos:end="123:63">heads</name></expr></argument>,

                               <argument pos:start="125:32" pos:end="125:44"><expr pos:start="125:32" pos:end="125:44"><operator pos:start="125:32" pos:end="125:32">&amp;</operator><name pos:start="125:33" pos:end="125:44">secs_per_cyl</name></expr></argument>)</argument_list></call></expr>)</condition>

        <block pos:start="127:9" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:22">

            <expr_stmt pos:start="129:13" pos:end="129:25"><expr pos:start="129:13" pos:end="129:24"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <operator pos:start="129:19" pos:end="129:19">-</operator><name pos:start="129:20" pos:end="129:24">EFBIG</name></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:22">goto <name pos:start="131:18" pos:end="131:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="139:5" pos:end="139:58"><expr pos:start="139:5" pos:end="139:57"><name pos:start="139:5" pos:end="139:17">total_sectors</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">(</operator><name pos:start="139:22" pos:end="139:28">int64_t</name><operator pos:start="139:29" pos:end="139:29">)</operator> <name pos:start="139:31" pos:end="139:34">cyls</name> <operator pos:start="139:36" pos:end="139:36">*</operator> <name pos:start="139:38" pos:end="139:42">heads</name> <operator pos:start="139:44" pos:end="139:44">*</operator> <name pos:start="139:46" pos:end="139:57">secs_per_cyl</name></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:38">/* Prepare the Hard Disk Footer */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:25"><expr pos:start="145:5" pos:end="145:24"><call pos:start="145:5" pos:end="145:24"><name pos:start="145:5" pos:end="145:10">memset</name><argument_list pos:start="145:11" pos:end="145:24">(<argument pos:start="145:12" pos:end="145:14"><expr pos:start="145:12" pos:end="145:14"><name pos:start="145:12" pos:end="145:14">buf</name></expr></argument>, <argument pos:start="145:17" pos:end="145:17"><expr pos:start="145:17" pos:end="145:17"><literal type="number" pos:start="145:17" pos:end="145:17">0</literal></expr></argument>, <argument pos:start="145:20" pos:end="145:23"><expr pos:start="145:20" pos:end="145:23"><literal type="number" pos:start="145:20" pos:end="145:23">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:43"><expr pos:start="149:5" pos:end="149:42"><call pos:start="149:5" pos:end="149:42"><name pos:start="149:5" pos:end="149:10">memcpy</name><argument_list pos:start="149:11" pos:end="149:42">(<argument pos:start="149:12" pos:end="149:26"><expr pos:start="149:12" pos:end="149:26"><name pos:start="149:12" pos:end="149:26"><name pos:start="149:12" pos:end="149:17">footer</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:26">creator</name></name></expr></argument>, <argument pos:start="149:29" pos:end="149:38"><expr pos:start="149:29" pos:end="149:38"><literal type="string" pos:start="149:29" pos:end="149:38">"conectix"</literal></expr></argument>, <argument pos:start="149:41" pos:end="149:41"><expr pos:start="149:41" pos:end="149:41"><literal type="number" pos:start="149:41" pos:end="149:41">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="151:5" pos:end="151:56">/* TODO Check if "qemu" creator_app is ok for VPC */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:43"><expr pos:start="153:5" pos:end="153:42"><call pos:start="153:5" pos:end="153:42"><name pos:start="153:5" pos:end="153:10">memcpy</name><argument_list pos:start="153:11" pos:end="153:42">(<argument pos:start="153:12" pos:end="153:30"><expr pos:start="153:12" pos:end="153:30"><name pos:start="153:12" pos:end="153:30"><name pos:start="153:12" pos:end="153:17">footer</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:30">creator_app</name></name></expr></argument>, <argument pos:start="153:33" pos:end="153:38"><expr pos:start="153:33" pos:end="153:38"><literal type="string" pos:start="153:33" pos:end="153:38">"qemu"</literal></expr></argument>, <argument pos:start="153:41" pos:end="153:41"><expr pos:start="153:41" pos:end="153:41"><literal type="number" pos:start="153:41" pos:end="153:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:42"><expr pos:start="155:5" pos:end="155:41"><call pos:start="155:5" pos:end="155:41"><name pos:start="155:5" pos:end="155:10">memcpy</name><argument_list pos:start="155:11" pos:end="155:41">(<argument pos:start="155:12" pos:end="155:29"><expr pos:start="155:12" pos:end="155:29"><name pos:start="155:12" pos:end="155:29"><name pos:start="155:12" pos:end="155:17">footer</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:29">creator_os</name></name></expr></argument>, <argument pos:start="155:32" pos:end="155:37"><expr pos:start="155:32" pos:end="155:37"><literal type="string" pos:start="155:32" pos:end="155:37">"Wi2k"</literal></expr></argument>, <argument pos:start="155:40" pos:end="155:40"><expr pos:start="155:40" pos:end="155:40"><literal type="number" pos:start="155:40" pos:end="155:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:41"><expr pos:start="159:5" pos:end="159:40"><name pos:start="159:5" pos:end="159:20"><name pos:start="159:5" pos:end="159:10">footer</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:20">features</name></name> <operator pos:start="159:22" pos:end="159:22">=</operator> <call pos:start="159:24" pos:end="159:40"><name pos:start="159:24" pos:end="159:34">be32_to_cpu</name><argument_list pos:start="159:35" pos:end="159:40">(<argument pos:start="159:36" pos:end="159:39"><expr pos:start="159:36" pos:end="159:39"><literal type="number" pos:start="159:36" pos:end="159:39">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:46"><expr pos:start="161:5" pos:end="161:45"><name pos:start="161:5" pos:end="161:19"><name pos:start="161:5" pos:end="161:10">footer</name><operator pos:start="161:11" pos:end="161:12">-&gt;</operator><name pos:start="161:13" pos:end="161:19">version</name></name> <operator pos:start="161:21" pos:end="161:21">=</operator> <call pos:start="161:23" pos:end="161:45"><name pos:start="161:23" pos:end="161:33">be32_to_cpu</name><argument_list pos:start="161:34" pos:end="161:45">(<argument pos:start="161:35" pos:end="161:44"><expr pos:start="161:35" pos:end="161:44"><literal type="number" pos:start="161:35" pos:end="161:44">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="171:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:33">(<expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:17">disk_type</name> <operator pos:start="163:19" pos:end="163:20">==</operator> <name pos:start="163:22" pos:end="163:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="163:35" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:55">

        <expr_stmt pos:start="165:9" pos:end="165:55"><expr pos:start="165:9" pos:end="165:54"><name pos:start="165:9" pos:end="165:27"><name pos:start="165:9" pos:end="165:14">footer</name><operator pos:start="165:15" pos:end="165:16">-&gt;</operator><name pos:start="165:17" pos:end="165:27">data_offset</name></name> <operator pos:start="165:29" pos:end="165:29">=</operator> <call pos:start="165:31" pos:end="165:54"><name pos:start="165:31" pos:end="165:41">be64_to_cpu</name><argument_list pos:start="165:42" pos:end="165:54">(<argument pos:start="165:43" pos:end="165:53"><expr pos:start="165:43" pos:end="165:53"><name pos:start="165:43" pos:end="165:53">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="167:7" pos:end="171:5">else <block pos:start="167:12" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:65">

        <expr_stmt pos:start="169:9" pos:end="169:65"><expr pos:start="169:9" pos:end="169:64"><name pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:14">footer</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:27">data_offset</name></name> <operator pos:start="169:29" pos:end="169:29">=</operator> <call pos:start="169:31" pos:end="169:64"><name pos:start="169:31" pos:end="169:41">be64_to_cpu</name><argument_list pos:start="169:42" pos:end="169:64">(<argument pos:start="169:43" pos:end="169:63"><expr pos:start="169:43" pos:end="169:63"><literal type="number" pos:start="169:43" pos:end="169:63">0xFFFFFFFFFFFFFFFFULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:69"><expr pos:start="173:5" pos:end="173:68"><name pos:start="173:5" pos:end="173:21"><name pos:start="173:5" pos:end="173:10">footer</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:21">timestamp</name></name> <operator pos:start="173:23" pos:end="173:23">=</operator> <call pos:start="173:25" pos:end="173:68"><name pos:start="173:25" pos:end="173:35">be32_to_cpu</name><argument_list pos:start="173:36" pos:end="173:68">(<argument pos:start="173:37" pos:end="173:67"><expr pos:start="173:37" pos:end="173:67"><call pos:start="173:37" pos:end="173:46"><name pos:start="173:37" pos:end="173:40">time</name><argument_list pos:start="173:41" pos:end="173:46">(<argument pos:start="173:42" pos:end="173:45"><expr pos:start="173:42" pos:end="173:45"><name pos:start="173:42" pos:end="173:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="173:48" pos:end="173:48">-</operator> <name pos:start="173:50" pos:end="173:67">VHD_TIMESTAMP_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:36">/* Version of Virtual PC 2007 */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:40"><expr pos:start="179:5" pos:end="179:39"><name pos:start="179:5" pos:end="179:17"><name pos:start="179:5" pos:end="179:10">footer</name><operator pos:start="179:11" pos:end="179:12">-&gt;</operator><name pos:start="179:13" pos:end="179:17">major</name></name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:39"><name pos:start="179:21" pos:end="179:31">be16_to_cpu</name><argument_list pos:start="179:32" pos:end="179:39">(<argument pos:start="179:33" pos:end="179:38"><expr pos:start="179:33" pos:end="179:38"><literal type="number" pos:start="179:33" pos:end="179:38">0x0005</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:40"><expr pos:start="181:5" pos:end="181:39"><name pos:start="181:5" pos:end="181:17"><name pos:start="181:5" pos:end="181:10">footer</name><operator pos:start="181:11" pos:end="181:12">-&gt;</operator><name pos:start="181:13" pos:end="181:17">minor</name></name> <operator pos:start="181:19" pos:end="181:19">=</operator> <call pos:start="181:21" pos:end="181:39"><name pos:start="181:21" pos:end="181:31">be16_to_cpu</name><argument_list pos:start="181:32" pos:end="181:39">(<argument pos:start="181:33" pos:end="181:38"><expr pos:start="181:33" pos:end="181:38"><literal type="number" pos:start="181:33" pos:end="181:38">0x0003</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="195:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:33">(<expr pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:17">disk_type</name> <operator pos:start="183:19" pos:end="183:20">==</operator> <name pos:start="183:22" pos:end="183:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="183:35" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:56">

        <expr_stmt pos:start="185:9" pos:end="185:61"><expr pos:start="185:9" pos:end="185:60"><name pos:start="185:9" pos:end="185:25"><name pos:start="185:9" pos:end="185:14">footer</name><operator pos:start="185:15" pos:end="185:16">-&gt;</operator><name pos:start="185:17" pos:end="185:25">orig_size</name></name> <operator pos:start="185:27" pos:end="185:27">=</operator> <call pos:start="185:29" pos:end="185:60"><name pos:start="185:29" pos:end="185:39">be64_to_cpu</name><argument_list pos:start="185:40" pos:end="185:60">(<argument pos:start="185:41" pos:end="185:59"><expr pos:start="185:41" pos:end="185:59"><name pos:start="185:41" pos:end="185:53">total_sectors</name> <operator pos:start="185:55" pos:end="185:55">*</operator> <literal type="number" pos:start="185:57" pos:end="185:59">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:56"><expr pos:start="187:9" pos:end="187:55"><name pos:start="187:9" pos:end="187:20"><name pos:start="187:9" pos:end="187:14">footer</name><operator pos:start="187:15" pos:end="187:16">-&gt;</operator><name pos:start="187:17" pos:end="187:20">size</name></name> <operator pos:start="187:22" pos:end="187:22">=</operator> <call pos:start="187:24" pos:end="187:55"><name pos:start="187:24" pos:end="187:34">be64_to_cpu</name><argument_list pos:start="187:35" pos:end="187:55">(<argument pos:start="187:36" pos:end="187:54"><expr pos:start="187:36" pos:end="187:54"><name pos:start="187:36" pos:end="187:48">total_sectors</name> <operator pos:start="187:50" pos:end="187:50">*</operator> <literal type="number" pos:start="187:52" pos:end="187:54">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="195:5">else <block pos:start="189:12" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:47">

        <expr_stmt pos:start="191:9" pos:end="191:52"><expr pos:start="191:9" pos:end="191:51"><name pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:14">footer</name><operator pos:start="191:15" pos:end="191:16">-&gt;</operator><name pos:start="191:17" pos:end="191:25">orig_size</name></name> <operator pos:start="191:27" pos:end="191:27">=</operator> <call pos:start="191:29" pos:end="191:51"><name pos:start="191:29" pos:end="191:39">be64_to_cpu</name><argument_list pos:start="191:40" pos:end="191:51">(<argument pos:start="191:41" pos:end="191:50"><expr pos:start="191:41" pos:end="191:50"><name pos:start="191:41" pos:end="191:50">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:47"><expr pos:start="193:9" pos:end="193:46"><name pos:start="193:9" pos:end="193:20"><name pos:start="193:9" pos:end="193:14">footer</name><operator pos:start="193:15" pos:end="193:16">-&gt;</operator><name pos:start="193:17" pos:end="193:20">size</name></name> <operator pos:start="193:22" pos:end="193:22">=</operator> <call pos:start="193:24" pos:end="193:46"><name pos:start="193:24" pos:end="193:34">be64_to_cpu</name><argument_list pos:start="193:35" pos:end="193:46">(<argument pos:start="193:36" pos:end="193:45"><expr pos:start="193:36" pos:end="193:45"><name pos:start="193:36" pos:end="193:45">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:37"><expr pos:start="197:5" pos:end="197:36"><name pos:start="197:5" pos:end="197:16"><name pos:start="197:5" pos:end="197:10">footer</name><operator pos:start="197:11" pos:end="197:12">-&gt;</operator><name pos:start="197:13" pos:end="197:16">cyls</name></name> <operator pos:start="197:18" pos:end="197:18">=</operator> <call pos:start="197:20" pos:end="197:36"><name pos:start="197:20" pos:end="197:30">be16_to_cpu</name><argument_list pos:start="197:31" pos:end="197:36">(<argument pos:start="197:32" pos:end="197:35"><expr pos:start="197:32" pos:end="197:35"><name pos:start="197:32" pos:end="197:35">cyls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:26"><expr pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:10">footer</name><operator pos:start="199:11" pos:end="199:12">-&gt;</operator><name pos:start="199:13" pos:end="199:17">heads</name></name> <operator pos:start="199:19" pos:end="199:19">=</operator> <name pos:start="199:21" pos:end="199:25">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:40"><expr pos:start="201:5" pos:end="201:39"><name pos:start="201:5" pos:end="201:24"><name pos:start="201:5" pos:end="201:10">footer</name><operator pos:start="201:11" pos:end="201:12">-&gt;</operator><name pos:start="201:13" pos:end="201:24">secs_per_cyl</name></name> <operator pos:start="201:26" pos:end="201:26">=</operator> <name pos:start="201:28" pos:end="201:39">secs_per_cyl</name></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="210:0"><expr pos:start="205:5" pos:end="205:41"><name pos:start="205:5" pos:end="205:16"><name pos:start="205:5" pos:end="205:10">footer</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:16">type</name></name> <operator pos:start="205:18" pos:end="205:18">=</operator> <call pos:start="205:20" pos:end="205:41"><name pos:start="205:20" pos:end="205:30">be32_to_cpu</name><argument_list pos:start="205:31" pos:end="205:41">(<argument pos:start="205:32" pos:end="205:40"><expr pos:start="205:32" pos:end="205:40"><name pos:start="205:32" pos:end="205:40">disk_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="209:1" pos:end="209:24">#<cpp:directive pos:start="209:2" pos:end="209:3">if</cpp:directive> <expr pos:start="209:5" pos:end="209:24"><call pos:start="209:5" pos:end="209:24"><name pos:start="209:5" pos:end="209:11">defined</name><argument_list pos:start="209:12" pos:end="209:24">(<argument pos:start="209:13" pos:end="209:23"><expr pos:start="209:13" pos:end="209:23"><name pos:start="209:13" pos:end="209:23">CONFIG_UUID</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="211:5" pos:end="214:0"><expr pos:start="211:5" pos:end="211:31"><call pos:start="211:5" pos:end="211:31"><name pos:start="211:5" pos:end="211:17">uuid_generate</name><argument_list pos:start="211:18" pos:end="211:31">(<argument pos:start="211:19" pos:end="211:30"><expr pos:start="211:19" pos:end="211:30"><name pos:start="211:19" pos:end="211:30"><name pos:start="211:19" pos:end="211:24">footer</name><operator pos:start="211:25" pos:end="211:26">-&gt;</operator><name pos:start="211:27" pos:end="211:30">uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="217:5" pos:end="217:67"><expr pos:start="217:5" pos:end="217:66"><name pos:start="217:5" pos:end="217:20"><name pos:start="217:5" pos:end="217:10">footer</name><operator pos:start="217:11" pos:end="217:12">-&gt;</operator><name pos:start="217:13" pos:end="217:20">checksum</name></name> <operator pos:start="217:22" pos:end="217:22">=</operator> <call pos:start="217:24" pos:end="217:66"><name pos:start="217:24" pos:end="217:34">be32_to_cpu</name><argument_list pos:start="217:35" pos:end="217:66">(<argument pos:start="217:36" pos:end="217:65"><expr pos:start="217:36" pos:end="217:65"><call pos:start="217:36" pos:end="217:65"><name pos:start="217:36" pos:end="217:47">vpc_checksum</name><argument_list pos:start="217:48" pos:end="217:65">(<argument pos:start="217:49" pos:end="217:51"><expr pos:start="217:49" pos:end="217:51"><name pos:start="217:49" pos:end="217:51">buf</name></expr></argument>, <argument pos:start="217:54" pos:end="217:64"><expr pos:start="217:54" pos:end="217:64"><name pos:start="217:54" pos:end="217:64">HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="221:5" pos:end="229:5"><if pos:start="221:5" pos:end="225:5">if <condition pos:start="221:8" pos:end="221:33">(<expr pos:start="221:9" pos:end="221:32"><name pos:start="221:9" pos:end="221:17">disk_type</name> <operator pos:start="221:19" pos:end="221:20">==</operator> <name pos:start="221:22" pos:end="221:32">VHD_DYNAMIC</name></expr>)</condition> <block pos:start="221:35" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:58">

        <expr_stmt pos:start="223:9" pos:end="223:58"><expr pos:start="223:9" pos:end="223:57"><name pos:start="223:9" pos:end="223:11">ret</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:57"><name pos:start="223:15" pos:end="223:33">create_dynamic_disk</name><argument_list pos:start="223:34" pos:end="223:57">(<argument pos:start="223:35" pos:end="223:36"><expr pos:start="223:35" pos:end="223:36"><name pos:start="223:35" pos:end="223:36">fd</name></expr></argument>, <argument pos:start="223:39" pos:end="223:41"><expr pos:start="223:39" pos:end="223:41"><name pos:start="223:39" pos:end="223:41">buf</name></expr></argument>, <argument pos:start="223:44" pos:end="223:56"><expr pos:start="223:44" pos:end="223:56"><name pos:start="223:44" pos:end="223:56">total_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="229:5">else <block pos:start="225:12" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:53">

        <expr_stmt pos:start="227:9" pos:end="227:53"><expr pos:start="227:9" pos:end="227:52"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <call pos:start="227:15" pos:end="227:52"><name pos:start="227:15" pos:end="227:31">create_fixed_disk</name><argument_list pos:start="227:32" pos:end="227:52">(<argument pos:start="227:33" pos:end="227:34"><expr pos:start="227:33" pos:end="227:34"><name pos:start="227:33" pos:end="227:34">fd</name></expr></argument>, <argument pos:start="227:37" pos:end="227:39"><expr pos:start="227:37" pos:end="227:39"><name pos:start="227:37" pos:end="227:39">buf</name></expr></argument>, <argument pos:start="227:42" pos:end="227:51"><expr pos:start="227:42" pos:end="227:51"><name pos:start="227:42" pos:end="227:51">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="233:1" pos:end="233:5"><name pos:start="233:1" pos:end="233:4">fail</name>:</label>

    <expr_stmt pos:start="235:5" pos:end="235:19"><expr pos:start="235:5" pos:end="235:18"><call pos:start="235:5" pos:end="235:18"><name pos:start="235:5" pos:end="235:14">qemu_close</name><argument_list pos:start="235:15" pos:end="235:18">(<argument pos:start="235:16" pos:end="235:17"><expr pos:start="235:16" pos:end="235:17"><name pos:start="235:16" pos:end="235:17">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="237:1" pos:end="237:4"><name pos:start="237:1" pos:end="237:3">out</name>:</label>

    <expr_stmt pos:start="239:5" pos:end="239:28"><expr pos:start="239:5" pos:end="239:27"><call pos:start="239:5" pos:end="239:27"><name pos:start="239:5" pos:end="239:10">g_free</name><argument_list pos:start="239:11" pos:end="239:27">(<argument pos:start="239:12" pos:end="239:26"><expr pos:start="239:12" pos:end="239:26"><name pos:start="239:12" pos:end="239:26">disk_type_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="241:5" pos:end="241:15">return <expr pos:start="241:12" pos:end="241:14"><name pos:start="241:12" pos:end="241:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
