<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11137.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">ppc_powernv_init</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:41">MachineState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:63">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:51"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">PnvMachineState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">pnv</name> <init pos:start="5:26" pos:end="5:51">= <expr pos:start="5:28" pos:end="5:51"><call pos:start="5:28" pos:end="5:51"><name pos:start="5:28" pos:end="5:42">POWERNV_MACHINE</name><argument_list pos:start="5:43" pos:end="5:51">(<argument pos:start="5:44" pos:end="5:50"><expr pos:start="5:44" pos:end="5:50"><name pos:start="5:44" pos:end="5:50">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:21">fw_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">long</name></type> <name pos:start="11:10" pos:end="11:16">fw_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:23">chip_typename</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:22">/* allocate RAM */</comment>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:15">machine</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:25">ram_size</name></name> <operator pos:start="21:27" pos:end="21:27">&lt;</operator> <operator pos:start="21:29" pos:end="21:29">(</operator><literal type="number" pos:start="21:30" pos:end="21:30">1</literal> <operator pos:start="21:32" pos:end="21:32">*</operator> <name pos:start="21:34" pos:end="21:39">G_BYTE</name><operator pos:start="21:40" pos:end="21:40">)</operator></expr>)</condition> <block pos:start="21:43" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:72">

        <expr_stmt pos:start="23:9" pos:end="23:72"><expr pos:start="23:9" pos:end="23:71"><call pos:start="23:9" pos:end="23:71"><name pos:start="23:9" pos:end="23:20">error_report</name><argument_list pos:start="23:21" pos:end="23:71">(<argument pos:start="23:22" pos:end="23:70"><expr pos:start="23:22" pos:end="23:70"><literal type="string" pos:start="23:22" pos:end="23:70">"Warning: skiboot may not work with &lt; 1GB of RAM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:7">ram</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:32"><name pos:start="29:11" pos:end="29:15">g_new</name><argument_list pos:start="29:16" pos:end="29:32">(<argument pos:start="29:17" pos:end="29:28"><expr pos:start="29:17" pos:end="29:28"><name pos:start="29:17" pos:end="29:28">MemoryRegion</name></expr></argument>, <argument pos:start="29:31" pos:end="29:31"><expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="33:60"><expr pos:start="31:5" pos:end="33:59"><call pos:start="31:5" pos:end="33:59"><name pos:start="31:5" pos:end="31:40">memory_region_allocate_system_memory</name><argument_list pos:start="31:41" pos:end="33:59">(<argument pos:start="31:42" pos:end="31:44"><expr pos:start="31:42" pos:end="31:44"><name pos:start="31:42" pos:end="31:44">ram</name></expr></argument>, <argument pos:start="31:47" pos:end="31:50"><expr pos:start="31:47" pos:end="31:50"><name pos:start="31:47" pos:end="31:50">NULL</name></expr></argument>, <argument pos:start="31:53" pos:end="31:69"><expr pos:start="31:53" pos:end="31:69"><literal type="string" pos:start="31:53" pos:end="31:69">"ppc_powernv.ram"</literal></expr></argument>,

                                         <argument pos:start="33:42" pos:end="33:58"><expr pos:start="33:42" pos:end="33:58"><name pos:start="33:42" pos:end="33:58"><name pos:start="33:42" pos:end="33:48">machine</name><operator pos:start="33:49" pos:end="33:50">-&gt;</operator><name pos:start="33:51" pos:end="33:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><call pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:31">memory_region_add_subregion</name><argument_list pos:start="35:32" pos:end="35:60">(<argument pos:start="35:33" pos:end="35:51"><expr pos:start="35:33" pos:end="35:51"><call pos:start="35:33" pos:end="35:51"><name pos:start="35:33" pos:end="35:49">get_system_memory</name><argument_list pos:start="35:50" pos:end="35:51">()</argument_list></call></expr></argument>, <argument pos:start="35:54" pos:end="35:54"><expr pos:start="35:54" pos:end="35:54"><literal type="number" pos:start="35:54" pos:end="35:54">0</literal></expr></argument>, <argument pos:start="35:57" pos:end="35:59"><expr pos:start="35:57" pos:end="35:59"><name pos:start="35:57" pos:end="35:59">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:32">/* load skiboot firmware  */</comment>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:17">bios_name</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>)</condition> <block pos:start="41:28" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:33">

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:17">bios_name</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:32">FW_FILE_NAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:65"><expr pos:start="49:5" pos:end="49:64"><name pos:start="49:5" pos:end="49:15">fw_filename</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:64"><name pos:start="49:19" pos:end="49:32">qemu_find_file</name><argument_list pos:start="49:33" pos:end="49:64">(<argument pos:start="49:34" pos:end="49:52"><expr pos:start="49:34" pos:end="49:52"><name pos:start="49:34" pos:end="49:52">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="49:55" pos:end="49:63"><expr pos:start="49:55" pos:end="49:63"><name pos:start="49:55" pos:end="49:63">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:74"><expr pos:start="53:5" pos:end="53:73"><name pos:start="53:5" pos:end="53:11">fw_size</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:73"><name pos:start="53:15" pos:end="53:33">load_image_targphys</name><argument_list pos:start="53:34" pos:end="53:73">(<argument pos:start="53:35" pos:end="53:45"><expr pos:start="53:35" pos:end="53:45"><name pos:start="53:35" pos:end="53:45">fw_filename</name></expr></argument>, <argument pos:start="53:48" pos:end="53:59"><expr pos:start="53:48" pos:end="53:59"><name pos:start="53:48" pos:end="53:59">FW_LOAD_ADDR</name></expr></argument>, <argument pos:start="53:62" pos:end="53:72"><expr pos:start="53:62" pos:end="53:72"><name pos:start="53:62" pos:end="53:72">FW_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:15">fw_size</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:20">error_report</name><argument_list pos:start="57:21" pos:end="57:61">(<argument pos:start="57:22" pos:end="57:47"><expr pos:start="57:22" pos:end="57:47"><literal type="string" pos:start="57:22" pos:end="57:47">"Could not load OPAL '%s'"</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:60"><expr pos:start="57:50" pos:end="57:60"><name pos:start="57:50" pos:end="57:60">fw_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><call pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:10">g_free</name><argument_list pos:start="63:11" pos:end="63:23">(<argument pos:start="63:12" pos:end="63:22"><expr pos:start="63:12" pos:end="63:22"><name pos:start="63:12" pos:end="63:22">fw_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:21">/* load kernel */</comment>

    <if_stmt pos:start="69:5" pos:end="89:5"><if pos:start="69:5" pos:end="89:5">if <condition pos:start="69:8" pos:end="69:33">(<expr pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:15">machine</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:32">kernel_filename</name></name></expr>)</condition> <block pos:start="69:35" pos:end="89:5">{<block_content pos:start="71:9" pos:end="87:9">

        <decl_stmt pos:start="71:9" pos:end="71:25"><decl pos:start="71:9" pos:end="71:24"><type pos:start="71:9" pos:end="71:12"><name pos:start="71:9" pos:end="71:12">long</name></type> <name pos:start="71:14" pos:end="71:24">kernel_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="75:9" pos:end="77:71"><expr pos:start="75:9" pos:end="77:70"><name pos:start="75:9" pos:end="75:19">kernel_size</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="77:70"><name pos:start="75:23" pos:end="75:41">load_image_targphys</name><argument_list pos:start="75:42" pos:end="77:70">(<argument pos:start="75:43" pos:end="75:66"><expr pos:start="75:43" pos:end="75:66"><name pos:start="75:43" pos:end="75:66"><name pos:start="75:43" pos:end="75:49">machine</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:66">kernel_filename</name></name></expr></argument>,

                                          <argument pos:start="77:43" pos:end="77:58"><expr pos:start="77:43" pos:end="77:58"><name pos:start="77:43" pos:end="77:58">KERNEL_LOAD_ADDR</name></expr></argument>, <argument pos:start="77:61" pos:end="77:69"><expr pos:start="77:61" pos:end="77:69"><literal type="number" pos:start="77:61" pos:end="77:69">0x2000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:28">(<expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:23">kernel_size</name> <operator pos:start="79:25" pos:end="79:25">&lt;</operator> <literal type="number" pos:start="79:27" pos:end="79:27">0</literal></expr>)</condition> <block pos:start="79:30" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:20">

            <expr_stmt pos:start="81:13" pos:end="83:51"><expr pos:start="81:13" pos:end="83:50"><call pos:start="81:13" pos:end="83:50"><name pos:start="81:13" pos:end="81:24">error_report</name><argument_list pos:start="81:25" pos:end="83:50">(<argument pos:start="81:26" pos:end="81:53"><expr pos:start="81:26" pos:end="81:53"><literal type="string" pos:start="81:26" pos:end="81:53">"Could not load kernel '%s'"</literal></expr></argument>,

                         <argument pos:start="83:26" pos:end="83:49"><expr pos:start="83:26" pos:end="83:49"><name pos:start="83:26" pos:end="83:49"><name pos:start="83:26" pos:end="83:32">machine</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:49">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:20"><expr pos:start="85:13" pos:end="85:19"><call pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:16">exit</name><argument_list pos:start="85:17" pos:end="85:19">(<argument pos:start="85:18" pos:end="85:18"><expr pos:start="85:18" pos:end="85:18"><literal type="number" pos:start="85:18" pos:end="85:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:21">/* load initrd */</comment>

    <if_stmt pos:start="95:5" pos:end="113:5"><if pos:start="95:5" pos:end="113:5">if <condition pos:start="95:8" pos:end="95:33">(<expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:15">machine</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:32">initrd_filename</name></name></expr>)</condition> <block pos:start="95:35" pos:end="113:5">{<block_content pos:start="97:9" pos:end="111:9">

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:11">pnv</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:24">initrd_base</name></name> <operator pos:start="97:26" pos:end="97:26">=</operator> <name pos:start="97:28" pos:end="97:43">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="101:64"><expr pos:start="99:9" pos:end="101:63"><name pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:11">pnv</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:24">initrd_size</name></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <call pos:start="99:28" pos:end="101:63"><name pos:start="99:28" pos:end="99:46">load_image_targphys</name><argument_list pos:start="99:47" pos:end="101:63">(<argument pos:start="99:48" pos:end="99:71"><expr pos:start="99:48" pos:end="99:71"><name pos:start="99:48" pos:end="99:71"><name pos:start="99:48" pos:end="99:54">machine</name><operator pos:start="99:55" pos:end="99:56">-&gt;</operator><name pos:start="99:57" pos:end="99:71">initrd_filename</name></name></expr></argument>,

                                  <argument pos:start="101:35" pos:end="101:50"><expr pos:start="101:35" pos:end="101:50"><name pos:start="101:35" pos:end="101:50"><name pos:start="101:35" pos:end="101:37">pnv</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:50">initrd_base</name></name></expr></argument>, <argument pos:start="101:53" pos:end="101:62"><expr pos:start="101:53" pos:end="101:62"><literal type="number" pos:start="101:53" pos:end="101:62">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:66" pos:end="101:80">/* 128MB max */</comment>

        <if_stmt pos:start="103:9" pos:end="111:9"><if pos:start="103:9" pos:end="111:9">if <condition pos:start="103:12" pos:end="103:33">(<expr pos:start="103:13" pos:end="103:32"><name pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:15">pnv</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:28">initrd_size</name></name> <operator pos:start="103:30" pos:end="103:30">&lt;</operator> <literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr>)</condition> <block pos:start="103:35" pos:end="111:9">{<block_content pos:start="105:13" pos:end="109:20">

            <expr_stmt pos:start="105:13" pos:end="107:51"><expr pos:start="105:13" pos:end="107:50"><call pos:start="105:13" pos:end="107:50"><name pos:start="105:13" pos:end="105:24">error_report</name><argument_list pos:start="105:25" pos:end="107:50">(<argument pos:start="105:26" pos:end="105:63"><expr pos:start="105:26" pos:end="105:63"><literal type="string" pos:start="105:26" pos:end="105:63">"Could not load initial ram disk '%s'"</literal></expr></argument>,

                         <argument pos:start="107:26" pos:end="107:49"><expr pos:start="107:26" pos:end="107:49"><name pos:start="107:26" pos:end="107:49"><name pos:start="107:26" pos:end="107:32">machine</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:49">initrd_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:20"><expr pos:start="109:13" pos:end="109:19"><call pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:16">exit</name><argument_list pos:start="109:17" pos:end="109:19">(<argument pos:start="109:18" pos:end="109:18"><expr pos:start="109:18" pos:end="109:18"><literal type="number" pos:start="109:18" pos:end="109:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:65">/* We need some cpu model to instantiate the PnvChip class */</comment>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:35">(<expr pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:15">machine</name><operator pos:start="119:16" pos:end="119:17">-&gt;</operator><name pos:start="119:18" pos:end="119:26">cpu_model</name></name> <operator pos:start="119:28" pos:end="119:29">==</operator> <name pos:start="119:31" pos:end="119:34">NULL</name></expr>)</condition> <block pos:start="119:37" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:38">

        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:15">machine</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:26">cpu_model</name></name> <operator pos:start="121:28" pos:end="121:28">=</operator> <literal type="string" pos:start="121:30" pos:end="121:37">"POWER8"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:36">/* Create the processor chips */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:77"><expr pos:start="129:5" pos:end="129:76"><name pos:start="129:5" pos:end="129:17">chip_typename</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <call pos:start="129:21" pos:end="129:76"><name pos:start="129:21" pos:end="129:35">g_strdup_printf</name><argument_list pos:start="129:36" pos:end="129:76">(<argument pos:start="129:37" pos:end="129:55"><expr pos:start="129:37" pos:end="129:55"><name pos:start="129:37" pos:end="129:49">TYPE_PNV_CHIP</name> <literal type="string" pos:start="129:51" pos:end="129:55">"-%s"</literal></expr></argument>, <argument pos:start="129:58" pos:end="129:75"><expr pos:start="129:58" pos:end="129:75"><name pos:start="129:58" pos:end="129:75"><name pos:start="129:58" pos:end="129:64">machine</name><operator pos:start="129:65" pos:end="129:66">-&gt;</operator><name pos:start="129:67" pos:end="129:75">cpu_model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:45">(<expr pos:start="131:9" pos:end="131:44"><operator pos:start="131:9" pos:end="131:9">!</operator><call pos:start="131:10" pos:end="131:44"><name pos:start="131:10" pos:end="131:29">object_class_by_name</name><argument_list pos:start="131:30" pos:end="131:44">(<argument pos:start="131:31" pos:end="131:43"><expr pos:start="131:31" pos:end="131:43"><name pos:start="131:31" pos:end="131:43">chip_typename</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:47" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:16">

        <expr_stmt pos:start="133:9" pos:end="135:75"><expr pos:start="133:9" pos:end="135:74"><call pos:start="133:9" pos:end="135:74"><name pos:start="133:9" pos:end="133:20">error_report</name><argument_list pos:start="133:21" pos:end="135:74">(<argument pos:start="133:22" pos:end="133:60"><expr pos:start="133:22" pos:end="133:60"><literal type="string" pos:start="133:22" pos:end="133:60">"invalid CPU model '%s' for %s machine"</literal></expr></argument>,

                     <argument pos:start="135:22" pos:end="135:39"><expr pos:start="135:22" pos:end="135:39"><name pos:start="135:22" pos:end="135:39"><name pos:start="135:22" pos:end="135:28">machine</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:39">cpu_model</name></name></expr></argument>, <argument pos:start="135:42" pos:end="135:73"><expr pos:start="135:42" pos:end="135:73"><call pos:start="135:42" pos:end="135:67"><name pos:start="135:42" pos:end="135:58">MACHINE_GET_CLASS</name><argument_list pos:start="135:59" pos:end="135:67">(<argument pos:start="135:60" pos:end="135:66"><expr pos:start="135:60" pos:end="135:66"><name pos:start="135:60" pos:end="135:66">machine</name></expr></argument>)</argument_list></call><operator pos:start="135:68" pos:end="135:69">-&gt;</operator><name pos:start="135:70" pos:end="135:73">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:51"><expr pos:start="143:5" pos:end="143:50"><name pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:7">pnv</name><operator pos:start="143:8" pos:end="143:9">-&gt;</operator><name pos:start="143:10" pos:end="143:14">chips</name></name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:50"><name pos:start="143:18" pos:end="143:23">g_new0</name><argument_list pos:start="143:24" pos:end="143:50">(<argument pos:start="143:25" pos:end="143:33"><expr pos:start="143:25" pos:end="143:33"><name pos:start="143:25" pos:end="143:31">PnvChip</name> <operator pos:start="143:33" pos:end="143:33">*</operator></expr></argument>, <argument pos:start="143:36" pos:end="143:49"><expr pos:start="143:36" pos:end="143:49"><name pos:start="143:36" pos:end="143:49"><name pos:start="143:36" pos:end="143:38">pnv</name><operator pos:start="143:39" pos:end="143:40">-&gt;</operator><name pos:start="143:41" pos:end="143:49">num_chips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="145:5" pos:end="185:5">for <control pos:start="145:9" pos:end="145:40">(<init pos:start="145:10" pos:end="145:15"><expr pos:start="145:10" pos:end="145:14"><name pos:start="145:10" pos:end="145:10">i</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <literal type="number" pos:start="145:14" pos:end="145:14">0</literal></expr>;</init> <condition pos:start="145:17" pos:end="145:35"><expr pos:start="145:17" pos:end="145:34"><name pos:start="145:17" pos:end="145:17">i</name> <operator pos:start="145:19" pos:end="145:19">&lt;</operator> <name pos:start="145:21" pos:end="145:34"><name pos:start="145:21" pos:end="145:23">pnv</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:34">num_chips</name></name></expr>;</condition> <incr pos:start="145:37" pos:end="145:39"><expr pos:start="145:37" pos:end="145:39"><name pos:start="145:37" pos:end="145:37">i</name><operator pos:start="145:38" pos:end="145:39">++</operator></expr></incr>)</control> <block pos:start="145:42" pos:end="185:5">{<block_content pos:start="147:9" pos:end="183:71">

        <decl_stmt pos:start="147:9" pos:end="147:27"><decl pos:start="147:9" pos:end="147:26"><type pos:start="147:9" pos:end="147:12"><name pos:start="147:9" pos:end="147:12">char</name></type> <name pos:start="147:14" pos:end="147:26"><name pos:start="147:14" pos:end="147:22">chip_name</name><index pos:start="147:23" pos:end="147:26">[<expr pos:start="147:24" pos:end="147:25"><literal type="number" pos:start="147:24" pos:end="147:25">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="149:9" pos:end="149:49"><decl pos:start="149:9" pos:end="149:48"><type pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:14">Object</name> <modifier pos:start="149:16" pos:end="149:16">*</modifier></type><name pos:start="149:17" pos:end="149:20">chip</name> <init pos:start="149:22" pos:end="149:48">= <expr pos:start="149:24" pos:end="149:48"><call pos:start="149:24" pos:end="149:48"><name pos:start="149:24" pos:end="149:33">object_new</name><argument_list pos:start="149:34" pos:end="149:48">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47">chip_typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:39"><expr pos:start="153:9" pos:end="153:38"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:11">pnv</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:18">chips</name><index pos:start="153:19" pos:end="153:21">[<expr pos:start="153:20" pos:end="153:20"><name pos:start="153:20" pos:end="153:20">i</name></expr>]</index></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:38"><name pos:start="153:25" pos:end="153:32">PNV_CHIP</name><argument_list pos:start="153:33" pos:end="153:38">(<argument pos:start="153:34" pos:end="153:37"><expr pos:start="153:34" pos:end="153:37"><name pos:start="153:34" pos:end="153:37">chip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="157:9" pos:end="161:11">/* TODO: put all the memory in one node on chip 0 until we find a

         * way to specify different ranges for each chip

         */</comment>

        <if_stmt pos:start="163:9" pos:end="169:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:19">(<expr pos:start="163:13" pos:end="163:18"><name pos:start="163:13" pos:end="163:13">i</name> <operator pos:start="163:15" pos:end="163:16">==</operator> <literal type="number" pos:start="163:18" pos:end="163:18">0</literal></expr>)</condition> <block pos:start="163:21" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:50">

            <expr_stmt pos:start="165:13" pos:end="167:50"><expr pos:start="165:13" pos:end="167:49"><call pos:start="165:13" pos:end="167:49"><name pos:start="165:13" pos:end="165:35">object_property_set_int</name><argument_list pos:start="165:36" pos:end="167:49">(<argument pos:start="165:37" pos:end="165:40"><expr pos:start="165:37" pos:end="165:40"><name pos:start="165:37" pos:end="165:40">chip</name></expr></argument>, <argument pos:start="165:43" pos:end="165:59"><expr pos:start="165:43" pos:end="165:59"><name pos:start="165:43" pos:end="165:59"><name pos:start="165:43" pos:end="165:49">machine</name><operator pos:start="165:50" pos:end="165:51">-&gt;</operator><name pos:start="165:52" pos:end="165:59">ram_size</name></name></expr></argument>, <argument pos:start="165:62" pos:end="165:71"><expr pos:start="165:62" pos:end="165:71"><literal type="string" pos:start="165:62" pos:end="165:71">"ram-size"</literal></expr></argument>,

                                    <argument pos:start="167:37" pos:end="167:48"><expr pos:start="167:37" pos:end="167:48"><operator pos:start="167:37" pos:end="167:37">&amp;</operator><name pos:start="167:38" pos:end="167:48">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:77"><expr pos:start="173:9" pos:end="173:76"><call pos:start="173:9" pos:end="173:76"><name pos:start="173:9" pos:end="173:16">snprintf</name><argument_list pos:start="173:17" pos:end="173:76">(<argument pos:start="173:18" pos:end="173:26"><expr pos:start="173:18" pos:end="173:26"><name pos:start="173:18" pos:end="173:26">chip_name</name></expr></argument>, <argument pos:start="173:29" pos:end="173:45"><expr pos:start="173:29" pos:end="173:45"><sizeof pos:start="173:29" pos:end="173:45">sizeof<argument_list pos:start="173:35" pos:end="173:45">(<argument pos:start="173:36" pos:end="173:44"><expr pos:start="173:36" pos:end="173:44"><name pos:start="173:36" pos:end="173:44">chip_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="173:48" pos:end="173:57"><expr pos:start="173:48" pos:end="173:57"><literal type="string" pos:start="173:48" pos:end="173:57">"chip[%d]"</literal></expr></argument>, <argument pos:start="173:60" pos:end="173:75"><expr pos:start="173:60" pos:end="173:75"><call pos:start="173:60" pos:end="173:75"><name pos:start="173:60" pos:end="173:72">PNV_CHIP_HWID</name><argument_list pos:start="173:73" pos:end="173:75">(<argument pos:start="173:74" pos:end="173:74"><expr pos:start="173:74" pos:end="173:74"><name pos:start="173:74" pos:end="173:74">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:78"><expr pos:start="175:9" pos:end="175:77"><call pos:start="175:9" pos:end="175:77"><name pos:start="175:9" pos:end="175:33">object_property_add_child</name><argument_list pos:start="175:34" pos:end="175:77">(<argument pos:start="175:35" pos:end="175:45"><expr pos:start="175:35" pos:end="175:45"><call pos:start="175:35" pos:end="175:45"><name pos:start="175:35" pos:end="175:40">OBJECT</name><argument_list pos:start="175:41" pos:end="175:45">(<argument pos:start="175:42" pos:end="175:44"><expr pos:start="175:42" pos:end="175:44"><name pos:start="175:42" pos:end="175:44">pnv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:48" pos:end="175:56"><expr pos:start="175:48" pos:end="175:56"><name pos:start="175:48" pos:end="175:56">chip_name</name></expr></argument>, <argument pos:start="175:59" pos:end="175:62"><expr pos:start="175:59" pos:end="175:62"><name pos:start="175:59" pos:end="175:62">chip</name></expr></argument>, <argument pos:start="175:65" pos:end="175:76"><expr pos:start="175:65" pos:end="175:76"><operator pos:start="175:65" pos:end="175:65">&amp;</operator><name pos:start="175:66" pos:end="175:76">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="179:46"><expr pos:start="177:9" pos:end="179:45"><call pos:start="177:9" pos:end="179:45"><name pos:start="177:9" pos:end="177:31">object_property_set_int</name><argument_list pos:start="177:32" pos:end="179:45">(<argument pos:start="177:33" pos:end="177:36"><expr pos:start="177:33" pos:end="177:36"><name pos:start="177:33" pos:end="177:36">chip</name></expr></argument>, <argument pos:start="177:39" pos:end="177:54"><expr pos:start="177:39" pos:end="177:54"><call pos:start="177:39" pos:end="177:54"><name pos:start="177:39" pos:end="177:51">PNV_CHIP_HWID</name><argument_list pos:start="177:52" pos:end="177:54">(<argument pos:start="177:53" pos:end="177:53"><expr pos:start="177:53" pos:end="177:53"><name pos:start="177:53" pos:end="177:53">i</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:57" pos:end="177:65"><expr pos:start="177:57" pos:end="177:65"><literal type="string" pos:start="177:57" pos:end="177:65">"chip-id"</literal></expr></argument>,

                                <argument pos:start="179:33" pos:end="179:44"><expr pos:start="179:33" pos:end="179:44"><operator pos:start="179:33" pos:end="179:33">&amp;</operator><name pos:start="179:34" pos:end="179:44">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:75"><expr pos:start="181:9" pos:end="181:74"><call pos:start="181:9" pos:end="181:74"><name pos:start="181:9" pos:end="181:31">object_property_set_int</name><argument_list pos:start="181:32" pos:end="181:74">(<argument pos:start="181:33" pos:end="181:36"><expr pos:start="181:33" pos:end="181:36"><name pos:start="181:33" pos:end="181:36">chip</name></expr></argument>, <argument pos:start="181:39" pos:end="181:47"><expr pos:start="181:39" pos:end="181:47"><name pos:start="181:39" pos:end="181:47">smp_cores</name></expr></argument>, <argument pos:start="181:50" pos:end="181:59"><expr pos:start="181:50" pos:end="181:59"><literal type="string" pos:start="181:50" pos:end="181:59">"nr-cores"</literal></expr></argument>, <argument pos:start="181:62" pos:end="181:73"><expr pos:start="181:62" pos:end="181:73"><operator pos:start="181:62" pos:end="181:62">&amp;</operator><name pos:start="181:63" pos:end="181:73">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:71"><expr pos:start="183:9" pos:end="183:70"><call pos:start="183:9" pos:end="183:70"><name pos:start="183:9" pos:end="183:32">object_property_set_bool</name><argument_list pos:start="183:33" pos:end="183:70">(<argument pos:start="183:34" pos:end="183:37"><expr pos:start="183:34" pos:end="183:37"><name pos:start="183:34" pos:end="183:37">chip</name></expr></argument>, <argument pos:start="183:40" pos:end="183:43"><expr pos:start="183:40" pos:end="183:43"><name pos:start="183:40" pos:end="183:43">true</name></expr></argument>, <argument pos:start="183:46" pos:end="183:55"><expr pos:start="183:46" pos:end="183:55"><literal type="string" pos:start="183:46" pos:end="183:55">"realized"</literal></expr></argument>, <argument pos:start="183:58" pos:end="183:69"><expr pos:start="183:58" pos:end="183:69"><operator pos:start="183:58" pos:end="183:58">&amp;</operator><name pos:start="183:59" pos:end="183:69">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="187:5" pos:end="187:26"><expr pos:start="187:5" pos:end="187:25"><call pos:start="187:5" pos:end="187:25"><name pos:start="187:5" pos:end="187:10">g_free</name><argument_list pos:start="187:11" pos:end="187:25">(<argument pos:start="187:12" pos:end="187:24"><expr pos:start="187:12" pos:end="187:24"><name pos:start="187:12" pos:end="187:24">chip_typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:39">/* Instantiate ISA bus on chip 0 */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:49"><expr pos:start="193:5" pos:end="193:48"><name pos:start="193:5" pos:end="193:16"><name pos:start="193:5" pos:end="193:7">pnv</name><operator pos:start="193:8" pos:end="193:9">-&gt;</operator><name pos:start="193:10" pos:end="193:16">isa_bus</name></name> <operator pos:start="193:18" pos:end="193:18">=</operator> <call pos:start="193:20" pos:end="193:48"><name pos:start="193:20" pos:end="193:33">pnv_isa_create</name><argument_list pos:start="193:34" pos:end="193:48">(<argument pos:start="193:35" pos:end="193:47"><expr pos:start="193:35" pos:end="193:47"><name pos:start="193:35" pos:end="193:47"><name pos:start="193:35" pos:end="193:37">pnv</name><operator pos:start="193:38" pos:end="193:39">-&gt;</operator><name pos:start="193:40" pos:end="193:44">chips</name><index pos:start="193:45" pos:end="193:47">[<expr pos:start="193:46" pos:end="193:46"><literal type="number" pos:start="193:46" pos:end="193:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:28">/* Create serial port */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:59"><expr pos:start="199:5" pos:end="199:58"><call pos:start="199:5" pos:end="199:58"><name pos:start="199:5" pos:end="199:23">serial_hds_isa_init</name><argument_list pos:start="199:24" pos:end="199:58">(<argument pos:start="199:25" pos:end="199:36"><expr pos:start="199:25" pos:end="199:36"><name pos:start="199:25" pos:end="199:36"><name pos:start="199:25" pos:end="199:27">pnv</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:36">isa_bus</name></name></expr></argument>, <argument pos:start="199:39" pos:end="199:39"><expr pos:start="199:39" pos:end="199:39"><literal type="number" pos:start="199:39" pos:end="199:39">0</literal></expr></argument>, <argument pos:start="199:42" pos:end="199:57"><expr pos:start="199:42" pos:end="199:57"><name pos:start="199:42" pos:end="199:57">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:38">/* Create an RTC ISA device too */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:39"><expr pos:start="205:5" pos:end="205:38"><call pos:start="205:5" pos:end="205:38"><name pos:start="205:5" pos:end="205:12">rtc_init</name><argument_list pos:start="205:13" pos:end="205:38">(<argument pos:start="205:14" pos:end="205:25"><expr pos:start="205:14" pos:end="205:25"><name pos:start="205:14" pos:end="205:25"><name pos:start="205:14" pos:end="205:16">pnv</name><operator pos:start="205:17" pos:end="205:18">-&gt;</operator><name pos:start="205:19" pos:end="205:25">isa_bus</name></name></expr></argument>, <argument pos:start="205:28" pos:end="205:31"><expr pos:start="205:28" pos:end="205:31"><literal type="number" pos:start="205:28" pos:end="205:31">2000</literal></expr></argument>, <argument pos:start="205:34" pos:end="205:37"><expr pos:start="205:34" pos:end="205:37"><name pos:start="205:34" pos:end="205:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="211:27">/* OpenPOWER systems use a IPMI SEL Event message to notify the

     * host to powerdown */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:58"><expr pos:start="213:5" pos:end="213:57"><name pos:start="213:5" pos:end="213:34"><name pos:start="213:5" pos:end="213:7">pnv</name><operator pos:start="213:8" pos:end="213:9">-&gt;</operator><name pos:start="213:10" pos:end="213:27">powerdown_notifier</name><operator pos:start="213:28" pos:end="213:28">.</operator><name pos:start="213:29" pos:end="213:34">notify</name></name> <operator pos:start="213:36" pos:end="213:36">=</operator> <name pos:start="213:38" pos:end="213:57">pnv_powerdown_notify</name></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:63"><expr pos:start="215:5" pos:end="215:62"><call pos:start="215:5" pos:end="215:62"><name pos:start="215:5" pos:end="215:36">qemu_register_powerdown_notifier</name><argument_list pos:start="215:37" pos:end="215:62">(<argument pos:start="215:38" pos:end="215:61"><expr pos:start="215:38" pos:end="215:61"><operator pos:start="215:38" pos:end="215:38">&amp;</operator><name pos:start="215:39" pos:end="215:61"><name pos:start="215:39" pos:end="215:41">pnv</name><operator pos:start="215:42" pos:end="215:43">-&gt;</operator><name pos:start="215:44" pos:end="215:61">powerdown_notifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
