<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12186.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">check_for_slice</name><parameter_list pos:start="1:34" pos:end="1:48">(<parameter pos:start="1:35" pos:end="1:47"><decl pos:start="1:35" pos:end="1:47"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:44">AVSContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">h</name></decl></parameter>)</parameter_list> <block pos:start="1:50" pos:end="35:1">{<block_content pos:start="3:5" pos:end="33:13">

    <decl_stmt pos:start="3:5" pos:end="3:33"><decl pos:start="3:5" pos:end="3:32"><type pos:start="3:5" pos:end="3:19"><name pos:start="3:5" pos:end="3:17">GetBitContext</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:21">gb</name> <init pos:start="3:23" pos:end="3:32">= <expr pos:start="3:25" pos:end="3:32"><operator pos:start="3:25" pos:end="3:25">&amp;</operator><name pos:start="3:26" pos:end="3:32"><name pos:start="3:26" pos:end="3:26">h</name><operator pos:start="3:27" pos:end="3:28">-&gt;</operator><name pos:start="3:29" pos:end="3:29">s</name><operator pos:start="3:30" pos:end="3:30">.</operator><name pos:start="3:31" pos:end="3:32">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">align</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:17"><if pos:start="9:5" pos:end="11:17">if<condition pos:start="9:7" pos:end="9:14">(<expr pos:start="9:8" pos:end="9:13"><name pos:start="9:8" pos:end="9:13"><name pos:start="9:8" pos:end="9:8">h</name><operator pos:start="9:9" pos:end="9:10">-&gt;</operator><name pos:start="9:11" pos:end="9:13">mbx</name></name></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:17"><block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:9">align</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <operator pos:start="13:13" pos:end="13:13">(</operator><operator pos:start="13:14" pos:end="13:14">-</operator><call pos:start="13:15" pos:end="13:32"><name pos:start="13:15" pos:end="13:28">get_bits_count</name><argument_list pos:start="13:29" pos:end="13:32">(<argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><name pos:start="13:30" pos:end="13:31">gb</name></expr></argument>)</argument_list></call><operator pos:start="13:33" pos:end="13:33">)</operator> <operator pos:start="13:35" pos:end="13:35">&amp;</operator> <literal type="number" pos:start="13:37" pos:end="13:37">7</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:33">/* check for stuffing byte */</comment>

    <if_stmt pos:start="17:5" pos:end="19:23"><if pos:start="17:5" pos:end="19:23">if<condition pos:start="17:7" pos:end="17:43">(<expr pos:start="17:8" pos:end="17:42"><operator pos:start="17:8" pos:end="17:8">!</operator><name pos:start="17:9" pos:end="17:13">align</name> <operator pos:start="17:15" pos:end="17:16">&amp;&amp;</operator> <operator pos:start="17:18" pos:end="17:18">(</operator><call pos:start="17:19" pos:end="17:33"><name pos:start="17:19" pos:end="17:27">show_bits</name><argument_list pos:start="17:28" pos:end="17:33">(<argument pos:start="17:29" pos:end="17:30"><expr pos:start="17:29" pos:end="17:30"><name pos:start="17:29" pos:end="17:30">gb</name></expr></argument>,<argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="17:35" pos:end="17:36">==</operator> <literal type="number" pos:start="17:38" pos:end="17:41">0x80</literal><operator pos:start="17:42" pos:end="17:42">)</operator></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:23"><block_content pos:start="19:9" pos:end="19:23">

        <expr_stmt pos:start="19:9" pos:end="19:23"><expr pos:start="19:9" pos:end="19:22"><call pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:16">get_bits</name><argument_list pos:start="19:17" pos:end="19:22">(<argument pos:start="19:18" pos:end="19:19"><expr pos:start="19:18" pos:end="19:19"><name pos:start="19:18" pos:end="19:19">gb</name></expr></argument>,<argument pos:start="19:21" pos:end="19:21"><expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if<condition pos:start="21:7" pos:end="21:60">(<expr pos:start="21:8" pos:end="21:59"><operator pos:start="21:8" pos:end="21:8">(</operator><call pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:22">show_bits_long</name><argument_list pos:start="21:23" pos:end="21:35">(<argument pos:start="21:24" pos:end="21:25"><expr pos:start="21:24" pos:end="21:25"><name pos:start="21:24" pos:end="21:25">gb</name></expr></argument>,<argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><literal type="number" pos:start="21:27" pos:end="21:29">24</literal><operator pos:start="21:29" pos:end="21:29">+</operator><name pos:start="21:30" pos:end="21:34">align</name></expr></argument>)</argument_list></call> <operator pos:start="21:37" pos:end="21:37">&amp;</operator> <literal type="number" pos:start="21:39" pos:end="21:46">0xFFFFFF</literal><operator pos:start="21:47" pos:end="21:47">)</operator> <operator pos:start="21:49" pos:end="21:50">==</operator> <literal type="number" pos:start="21:52" pos:end="21:59">0x000001</literal></expr>)</condition> <block pos:start="21:62" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:17">

        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:22">skip_bits_long</name><argument_list pos:start="23:23" pos:end="23:35">(<argument pos:start="23:24" pos:end="23:25"><expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">gb</name></expr></argument>,<argument pos:start="23:27" pos:end="23:34"><expr pos:start="23:27" pos:end="23:34"><literal type="number" pos:start="23:27" pos:end="23:29">24</literal><operator pos:start="23:29" pos:end="23:29">+</operator><name pos:start="23:30" pos:end="23:34">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:9">h</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:14">stc</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:31"><name pos:start="25:18" pos:end="25:25">get_bits</name><argument_list pos:start="25:26" pos:end="25:31">(<argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><name pos:start="25:27" pos:end="25:28">gb</name></expr></argument>,<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><call pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:27">decode_slice_header</name><argument_list pos:start="27:28" pos:end="27:33">(<argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><name pos:start="27:29" pos:end="27:29">h</name></expr></argument>,<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="33:5" pos:end="33:13">return <expr pos:start="33:12" pos:end="33:12"><literal type="number" pos:start="33:12" pos:end="33:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
