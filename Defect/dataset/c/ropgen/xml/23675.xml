<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23675.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:17">coroutine_fn</name></type> <name pos:start="1:19" pos:end="1:38">qemu_co_mutex_unlock</name><parameter_list pos:start="1:39" pos:end="1:54">(<parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:48"><name pos:start="1:40" pos:end="1:46">CoMutex</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">mutex</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:51">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">Coroutine</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">self</name> <init pos:start="5:21" pos:end="5:43">= <expr pos:start="5:23" pos:end="5:43"><call pos:start="5:23" pos:end="5:43"><name pos:start="5:23" pos:end="5:41">qemu_coroutine_self</name><argument_list pos:start="5:42" pos:end="5:43">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:50"><expr pos:start="9:5" pos:end="9:49"><call pos:start="9:5" pos:end="9:49"><name pos:start="9:5" pos:end="9:36">trace_qemu_co_mutex_unlock_entry</name><argument_list pos:start="9:37" pos:end="9:49">(<argument pos:start="9:38" pos:end="9:42"><expr pos:start="9:38" pos:end="9:42"><name pos:start="9:38" pos:end="9:42">mutex</name></expr></argument>, <argument pos:start="9:45" pos:end="9:48"><expr pos:start="9:45" pos:end="9:48"><name pos:start="9:45" pos:end="9:48">self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:26"><expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:25">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:16">mutex</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:24">locked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:33">(<argument pos:start="15:12" pos:end="15:32"><expr pos:start="15:12" pos:end="15:32"><name pos:start="15:12" pos:end="15:24"><name pos:start="15:12" pos:end="15:16">mutex</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:24">holder</name></name> <operator pos:start="15:26" pos:end="15:27">==</operator> <name pos:start="15:29" pos:end="15:32">self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:32"><expr pos:start="17:5" pos:end="17:31"><call pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:31">(<argument pos:start="17:12" pos:end="17:30"><expr pos:start="17:12" pos:end="17:30"><call pos:start="17:12" pos:end="17:30"><name pos:start="17:12" pos:end="17:28">qemu_in_coroutine</name><argument_list pos:start="17:29" pos:end="17:30">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:9">mutex</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">holder</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:8">self</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:20">locks_held</name></name><operator pos:start="23:21" pos:end="23:22">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:46">(<expr pos:start="25:9" pos:end="25:45"><call pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:24">atomic_fetch_dec</name><argument_list pos:start="25:25" pos:end="25:40">(<argument pos:start="25:26" pos:end="25:39"><expr pos:start="25:26" pos:end="25:39"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:39"><name pos:start="25:27" pos:end="25:31">mutex</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:39">locked</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:42" pos:end="25:43">==</operator> <literal type="number" pos:start="25:45" pos:end="25:45">1</literal></expr>)</condition> <block pos:start="25:48" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:15">

        <comment type="block" pos:start="27:9" pos:end="27:69">/* No waiting qemu_co_mutex_lock().  Pfew, that was easy!  */</comment>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="35:5" pos:end="101:5">for <control pos:start="35:9" pos:end="35:12">(<init pos:start="35:10" pos:end="35:10">;</init><condition pos:start="35:11" pos:end="35:11">;</condition><incr/>)</control> <block pos:start="35:14" pos:end="101:5">{<block_content pos:start="37:9" pos:end="99:9">

        <decl_stmt pos:start="37:9" pos:end="37:50"><decl pos:start="37:9" pos:end="37:49"><type pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:20">CoWaitRecord</name> <modifier pos:start="37:22" pos:end="37:22">*</modifier></type><name pos:start="37:23" pos:end="37:29">to_wake</name> <init pos:start="37:31" pos:end="37:49">= <expr pos:start="37:33" pos:end="37:49"><call pos:start="37:33" pos:end="37:49"><name pos:start="37:33" pos:end="37:42">pop_waiter</name><argument_list pos:start="37:43" pos:end="37:49">(<argument pos:start="37:44" pos:end="37:48"><expr pos:start="37:44" pos:end="37:48"><name pos:start="37:44" pos:end="37:48">mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:29"><decl pos:start="39:9" pos:end="39:28"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">unsigned</name></type> <name pos:start="39:18" pos:end="39:28">our_handoff</name></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:19">to_wake</name></expr>)</condition> <block pos:start="43:22" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:18">

            <decl_stmt pos:start="45:13" pos:end="45:40"><decl pos:start="45:13" pos:end="45:39"><type pos:start="45:13" pos:end="45:23"><name pos:start="45:13" pos:end="45:21">Coroutine</name> <modifier pos:start="45:23" pos:end="45:23">*</modifier></type><name pos:start="45:24" pos:end="45:25">co</name> <init pos:start="45:27" pos:end="45:39">= <expr pos:start="45:29" pos:end="45:39"><name pos:start="45:29" pos:end="45:39"><name pos:start="45:29" pos:end="45:35">to_wake</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:39">co</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:28"><expr pos:start="47:13" pos:end="47:27"><call pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:23">aio_co_wake</name><argument_list pos:start="47:24" pos:end="47:27">(<argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="55:9" pos:end="61:11">/* Some concurrent lock() is in progress (we know this because

         * mutex-&gt;locked was &gt;1) but it hasn't yet put itself on the wait

         * queue.  Pick a sequence number for the handoff protocol (not 0).

         */</comment>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:35">(<expr pos:start="63:13" pos:end="63:34"><operator pos:start="63:13" pos:end="63:14">++</operator><name pos:start="63:15" pos:end="63:29"><name pos:start="63:15" pos:end="63:19">mutex</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:29">sequence</name></name> <operator pos:start="63:31" pos:end="63:32">==</operator> <literal type="number" pos:start="63:34" pos:end="63:34">0</literal></expr>)</condition> <block pos:start="63:37" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:32">

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:17">mutex</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:27">sequence</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:19">our_handoff</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:37"><name pos:start="71:23" pos:end="71:27">mutex</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:37">sequence</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><call pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:21">atomic_mb_set</name><argument_list pos:start="73:22" pos:end="73:51">(<argument pos:start="73:23" pos:end="73:37"><expr pos:start="73:23" pos:end="73:37"><operator pos:start="73:23" pos:end="73:23">&amp;</operator><name pos:start="73:24" pos:end="73:37"><name pos:start="73:24" pos:end="73:28">mutex</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:37">handoff</name></name></expr></argument>, <argument pos:start="73:40" pos:end="73:50"><expr pos:start="73:40" pos:end="73:50"><name pos:start="73:40" pos:end="73:50">our_handoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:32">(<expr pos:start="75:13" pos:end="75:31"><operator pos:start="75:13" pos:end="75:13">!</operator><call pos:start="75:14" pos:end="75:31"><name pos:start="75:14" pos:end="75:24">has_waiters</name><argument_list pos:start="75:25" pos:end="75:31">(<argument pos:start="75:26" pos:end="75:30"><expr pos:start="75:26" pos:end="75:30"><name pos:start="75:26" pos:end="75:30">mutex</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:34" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:18">

            <comment type="block" pos:start="77:13" pos:end="81:15">/* The concurrent lock has not added itself yet, so it

             * will be able to pick our handoff.

             */</comment>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="89:9" pos:end="93:11">/* Try to do the handoff protocol ourselves; if somebody else has

         * already taken it, however, we're done and they're responsible.

         */</comment>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:75">(<expr pos:start="95:13" pos:end="95:74"><call pos:start="95:13" pos:end="95:59"><name pos:start="95:13" pos:end="95:26">atomic_cmpxchg</name><argument_list pos:start="95:27" pos:end="95:59">(<argument pos:start="95:28" pos:end="95:42"><expr pos:start="95:28" pos:end="95:42"><operator pos:start="95:28" pos:end="95:28">&amp;</operator><name pos:start="95:29" pos:end="95:42"><name pos:start="95:29" pos:end="95:33">mutex</name><operator pos:start="95:34" pos:end="95:35">-&gt;</operator><name pos:start="95:36" pos:end="95:42">handoff</name></name></expr></argument>, <argument pos:start="95:45" pos:end="95:55"><expr pos:start="95:45" pos:end="95:55"><name pos:start="95:45" pos:end="95:55">our_handoff</name></expr></argument>, <argument pos:start="95:58" pos:end="95:58"><expr pos:start="95:58" pos:end="95:58"><literal type="number" pos:start="95:58" pos:end="95:58">0</literal></expr></argument>)</argument_list></call> <operator pos:start="95:61" pos:end="95:62">!=</operator> <name pos:start="95:64" pos:end="95:74">our_handoff</name></expr>)</condition> <block pos:start="95:77" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:18">

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="105:5" pos:end="105:51"><expr pos:start="105:5" pos:end="105:50"><call pos:start="105:5" pos:end="105:50"><name pos:start="105:5" pos:end="105:37">trace_qemu_co_mutex_unlock_return</name><argument_list pos:start="105:38" pos:end="105:50">(<argument pos:start="105:39" pos:end="105:43"><expr pos:start="105:39" pos:end="105:43"><name pos:start="105:39" pos:end="105:43">mutex</name></expr></argument>, <argument pos:start="105:46" pos:end="105:49"><expr pos:start="105:46" pos:end="105:49"><name pos:start="105:46" pos:end="105:49">self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
