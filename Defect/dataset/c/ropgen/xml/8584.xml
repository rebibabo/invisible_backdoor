<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8584.c" pos:tabs="8"><function pos:start="1:1" pos:end="439:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">mips_jazz_init</name><parameter_list pos:start="1:27" pos:end="3:56">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:39">MachineState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:48">machine</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:55"><decl pos:start="3:28" pos:end="3:55"><type pos:start="3:28" pos:end="3:55"><name pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:31">enum</name> <name pos:start="3:33" pos:end="3:44">jazz_model_e</name></name></type> <name pos:start="3:46" pos:end="3:55">jazz_model</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="439:1">{<block_content pos:start="7:5" pos:end="437:55">

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:31">address_space</name> <init pos:start="7:33" pos:end="7:53">= <expr pos:start="7:35" pos:end="7:53"><call pos:start="7:35" pos:end="7:53"><name pos:start="7:35" pos:end="7:51">get_system_memory</name><argument_list pos:start="7:52" pos:end="7:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">cpu_model</name> <init pos:start="9:27" pos:end="9:46">= <expr pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:46"><name pos:start="9:29" pos:end="9:35">machine</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">bios_size</name></decl>, <decl pos:start="13:20" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:20">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">MIPSCPU</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUClass</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">CPUMIPSState</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:14">rc4030_dma</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">dmas</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:31">rc4030_dma_mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:51"><decl pos:start="27:5" pos:end="27:50"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:25">isa_mem</name> <init pos:start="27:27" pos:end="27:50">= <expr pos:start="27:29" pos:end="27:50"><call pos:start="27:29" pos:end="27:50"><name pos:start="27:29" pos:end="27:33">g_new</name><argument_list pos:start="27:34" pos:end="27:50">(<argument pos:start="27:35" pos:end="27:46"><expr pos:start="27:35" pos:end="27:46"><name pos:start="27:35" pos:end="27:46">MemoryRegion</name></expr></argument>, <argument pos:start="27:49" pos:end="27:49"><expr pos:start="27:49" pos:end="27:49"><literal type="number" pos:start="27:49" pos:end="27:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:50"><decl pos:start="29:5" pos:end="29:49"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:24">isa_io</name> <init pos:start="29:26" pos:end="29:49">= <expr pos:start="29:28" pos:end="29:49"><call pos:start="29:28" pos:end="29:49"><name pos:start="29:28" pos:end="29:32">g_new</name><argument_list pos:start="29:33" pos:end="29:49">(<argument pos:start="29:34" pos:end="29:45"><expr pos:start="29:34" pos:end="29:45"><name pos:start="29:34" pos:end="29:45">MemoryRegion</name></expr></argument>, <argument pos:start="29:48" pos:end="29:48"><expr pos:start="29:48" pos:end="29:48"><literal type="number" pos:start="29:48" pos:end="29:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:47"><decl pos:start="31:5" pos:end="31:46"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:21">rtc</name> <init pos:start="31:23" pos:end="31:46">= <expr pos:start="31:25" pos:end="31:46"><call pos:start="31:25" pos:end="31:46"><name pos:start="31:25" pos:end="31:29">g_new</name><argument_list pos:start="31:30" pos:end="31:46">(<argument pos:start="31:31" pos:end="31:42"><expr pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:42">MemoryRegion</name></expr></argument>, <argument pos:start="31:45" pos:end="31:45"><expr pos:start="31:45" pos:end="31:45"><literal type="number" pos:start="31:45" pos:end="31:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:49"><decl pos:start="33:5" pos:end="33:48"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:23">i8042</name> <init pos:start="33:25" pos:end="33:48">= <expr pos:start="33:27" pos:end="33:48"><call pos:start="33:27" pos:end="33:48"><name pos:start="33:27" pos:end="33:31">g_new</name><argument_list pos:start="33:32" pos:end="33:48">(<argument pos:start="33:33" pos:end="33:44"><expr pos:start="33:33" pos:end="33:44"><name pos:start="33:33" pos:end="33:44">MemoryRegion</name></expr></argument>, <argument pos:start="33:47" pos:end="33:47"><expr pos:start="33:47" pos:end="33:47"><literal type="number" pos:start="33:47" pos:end="33:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:53"><decl pos:start="35:5" pos:end="35:52"><type pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:16">MemoryRegion</name> <modifier pos:start="35:18" pos:end="35:18">*</modifier></type><name pos:start="35:19" pos:end="35:27">dma_dummy</name> <init pos:start="35:29" pos:end="35:52">= <expr pos:start="35:31" pos:end="35:52"><call pos:start="35:31" pos:end="35:52"><name pos:start="35:31" pos:end="35:35">g_new</name><argument_list pos:start="35:36" pos:end="35:52">(<argument pos:start="35:37" pos:end="35:48"><expr pos:start="35:37" pos:end="35:48"><name pos:start="35:37" pos:end="35:48">MemoryRegion</name></expr></argument>, <argument pos:start="35:51" pos:end="35:51"><expr pos:start="35:51" pos:end="35:51"><literal type="number" pos:start="35:51" pos:end="35:51">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:16"><decl pos:start="37:5" pos:end="37:15"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">NICInfo</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:30"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:15">DeviceState</name> <modifier pos:start="39:17" pos:end="39:17">*</modifier></type><name pos:start="39:18" pos:end="39:20">dev</name></decl>, <decl pos:start="39:23" pos:end="39:29"><type ref="prev" pos:start="39:5" pos:end="39:17"><modifier pos:start="39:23" pos:end="39:23">*</modifier></type><name pos:start="39:24" pos:end="39:29">rc4030</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:25"><decl pos:start="41:5" pos:end="41:24"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">SysBusDevice</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:24">sysbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:10">ISABus</name> <modifier pos:start="43:12" pos:end="43:12">*</modifier></type><name pos:start="43:13" pos:end="43:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:19"><decl pos:start="45:5" pos:end="45:18"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">ISADevice</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:18">pit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:27"><decl pos:start="47:5" pos:end="47:26"><type pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13">DriveInfo</name> <modifier pos:start="47:15" pos:end="47:15">*</modifier></type><name pos:start="47:16" pos:end="47:26"><name pos:start="47:16" pos:end="47:18">fds</name><index pos:start="47:19" pos:end="47:26">[<expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:35"><decl pos:start="49:5" pos:end="49:22"><type pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:12">qemu_irq</name></type> <name pos:start="49:14" pos:end="49:22">esp_reset</name></decl>, <decl pos:start="49:25" pos:end="49:34"><type ref="prev" pos:start="49:5" pos:end="49:12"/><name pos:start="49:25" pos:end="49:34">dma_enable</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:47"><decl pos:start="51:5" pos:end="51:46"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:21">ram</name> <init pos:start="51:23" pos:end="51:46">= <expr pos:start="51:25" pos:end="51:46"><call pos:start="51:25" pos:end="51:46"><name pos:start="51:25" pos:end="51:29">g_new</name><argument_list pos:start="51:30" pos:end="51:46">(<argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:42">MemoryRegion</name></expr></argument>, <argument pos:start="51:45" pos:end="51:45"><expr pos:start="51:45" pos:end="51:45"><literal type="number" pos:start="51:45" pos:end="51:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:48"><decl pos:start="53:5" pos:end="53:47"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:22">bios</name> <init pos:start="53:24" pos:end="53:47">= <expr pos:start="53:26" pos:end="53:47"><call pos:start="53:26" pos:end="53:47"><name pos:start="53:26" pos:end="53:30">g_new</name><argument_list pos:start="53:31" pos:end="53:47">(<argument pos:start="53:32" pos:end="53:43"><expr pos:start="53:32" pos:end="53:43"><name pos:start="53:32" pos:end="53:43">MemoryRegion</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:49"><decl pos:start="55:5" pos:end="55:48"><type pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:16">MemoryRegion</name> <modifier pos:start="55:18" pos:end="55:18">*</modifier></type><name pos:start="55:19" pos:end="55:23">bios2</name> <init pos:start="55:25" pos:end="55:48">= <expr pos:start="55:27" pos:end="55:48"><call pos:start="55:27" pos:end="55:48"><name pos:start="55:27" pos:end="55:31">g_new</name><argument_list pos:start="55:32" pos:end="55:48">(<argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><name pos:start="55:33" pos:end="55:44">MemoryRegion</name></expr></argument>, <argument pos:start="55:47" pos:end="55:47"><expr pos:start="55:47" pos:end="55:47"><literal type="number" pos:start="55:47" pos:end="55:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:19">/* init CPUs */</comment>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:17">cpu_model</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <name pos:start="61:22" pos:end="61:25">NULL</name></expr>)</condition> <block pos:start="61:28" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:28">

        <expr_stmt pos:start="63:9" pos:end="63:28"><expr pos:start="63:9" pos:end="63:27"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="string" pos:start="63:21" pos:end="63:27">"R4000"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:7">cpu</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:34"><name pos:start="67:11" pos:end="67:23">cpu_mips_init</name><argument_list pos:start="67:24" pos:end="67:34">(<argument pos:start="67:25" pos:end="67:33"><expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">cpu</name> <operator pos:start="69:13" pos:end="69:14">==</operator> <name pos:start="69:16" pos:end="69:19">NULL</name></expr>)</condition> <block pos:start="69:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:16">

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:15">fprintf</name><argument_list pos:start="71:16" pos:end="71:58">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">stderr</name></expr></argument>, <argument pos:start="71:25" pos:end="71:57"><expr pos:start="71:25" pos:end="71:57"><literal type="string" pos:start="71:25" pos:end="71:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">exit</name><argument_list pos:start="73:13" pos:end="73:15">(<argument pos:start="73:14" pos:end="73:14"><expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:7">env</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <operator pos:start="77:11" pos:end="77:11">&amp;</operator><name pos:start="77:12" pos:end="77:19"><name pos:start="77:12" pos:end="77:14">cpu</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><call pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:23">qemu_register_reset</name><argument_list pos:start="79:24" pos:end="79:44">(<argument pos:start="79:25" pos:end="79:38"><expr pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:38">main_cpu_reset</name></expr></argument>, <argument pos:start="79:41" pos:end="79:43"><expr pos:start="79:41" pos:end="79:43"><name pos:start="79:41" pos:end="79:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="95:63">/* Chipset returns 0 in invalid reads and do not raise data exceptions.

     * However, we can't simply add a global memory region to catch

     * everything, as memory core directly call unassigned_mem_read/write

     * on some invalid accesses, which call do_unassigned_access on the

     * CPU, which raise an exception.

     * Handle that case by hijacking the do_unassigned_access method on

     * the CPU, and do not raise exceptions for data access. */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:6">cc</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <call pos:start="97:10" pos:end="97:27"><name pos:start="97:10" pos:end="97:22">CPU_GET_CLASS</name><argument_list pos:start="97:23" pos:end="97:27">(<argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:57"><expr pos:start="99:5" pos:end="99:56"><name pos:start="99:5" pos:end="99:29">real_do_unassigned_access</name> <operator pos:start="99:31" pos:end="99:31">=</operator> <name pos:start="99:33" pos:end="99:56"><name pos:start="99:33" pos:end="99:34">cc</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:56">do_unassigned_access</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:62"><expr pos:start="101:5" pos:end="101:61"><name pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:6">cc</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:28">do_unassigned_access</name></name> <operator pos:start="101:30" pos:end="101:30">=</operator> <name pos:start="101:32" pos:end="101:61">mips_jazz_do_unassigned_access</name></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="107:5" pos:end="109:60"><expr pos:start="107:5" pos:end="109:59"><call pos:start="107:5" pos:end="109:59"><name pos:start="107:5" pos:end="107:40">memory_region_allocate_system_memory</name><argument_list pos:start="107:41" pos:end="109:59">(<argument pos:start="107:42" pos:end="107:44"><expr pos:start="107:42" pos:end="107:44"><name pos:start="107:42" pos:end="107:44">ram</name></expr></argument>, <argument pos:start="107:47" pos:end="107:50"><expr pos:start="107:47" pos:end="107:50"><name pos:start="107:47" pos:end="107:50">NULL</name></expr></argument>, <argument pos:start="107:53" pos:end="107:67"><expr pos:start="107:53" pos:end="107:67"><literal type="string" pos:start="107:53" pos:end="107:67">"mips_jazz.ram"</literal></expr></argument>,

                                         <argument pos:start="109:42" pos:end="109:58"><expr pos:start="109:42" pos:end="109:58"><name pos:start="109:42" pos:end="109:58"><name pos:start="109:42" pos:end="109:48">machine</name><operator pos:start="109:49" pos:end="109:50">-&gt;</operator><name pos:start="109:51" pos:end="109:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:55"><expr pos:start="111:5" pos:end="111:54"><call pos:start="111:5" pos:end="111:54"><name pos:start="111:5" pos:end="111:31">memory_region_add_subregion</name><argument_list pos:start="111:32" pos:end="111:54">(<argument pos:start="111:33" pos:end="111:45"><expr pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:45">address_space</name></expr></argument>, <argument pos:start="111:48" pos:end="111:48"><expr pos:start="111:48" pos:end="111:48"><literal type="number" pos:start="111:48" pos:end="111:48">0</literal></expr></argument>, <argument pos:start="111:51" pos:end="111:53"><expr pos:start="111:51" pos:end="111:53"><name pos:start="111:51" pos:end="111:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="117:41"><expr pos:start="115:5" pos:end="117:40"><call pos:start="115:5" pos:end="117:40"><name pos:start="115:5" pos:end="115:26">memory_region_init_ram</name><argument_list pos:start="115:27" pos:end="117:40">(<argument pos:start="115:28" pos:end="115:31"><expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">bios</name></expr></argument>, <argument pos:start="115:34" pos:end="115:37"><expr pos:start="115:34" pos:end="115:37"><name pos:start="115:34" pos:end="115:37">NULL</name></expr></argument>, <argument pos:start="115:40" pos:end="115:55"><expr pos:start="115:40" pos:end="115:55"><literal type="string" pos:start="115:40" pos:end="115:55">"mips_jazz.bios"</literal></expr></argument>, <argument pos:start="115:58" pos:end="115:73"><expr pos:start="115:58" pos:end="115:73"><name pos:start="115:58" pos:end="115:73">MAGNUM_BIOS_SIZE</name></expr></argument>,

                           <argument pos:start="117:28" pos:end="117:39"><expr pos:start="117:28" pos:end="117:39"><operator pos:start="117:28" pos:end="117:28">&amp;</operator><name pos:start="117:29" pos:end="117:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:38"><expr pos:start="119:5" pos:end="119:37"><call pos:start="119:5" pos:end="119:37"><name pos:start="119:5" pos:end="119:31">vmstate_register_ram_global</name><argument_list pos:start="119:32" pos:end="119:37">(<argument pos:start="119:33" pos:end="119:36"><expr pos:start="119:33" pos:end="119:36"><name pos:start="119:33" pos:end="119:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:43"><expr pos:start="121:5" pos:end="121:42"><call pos:start="121:5" pos:end="121:42"><name pos:start="121:5" pos:end="121:30">memory_region_set_readonly</name><argument_list pos:start="121:31" pos:end="121:42">(<argument pos:start="121:32" pos:end="121:35"><expr pos:start="121:32" pos:end="121:35"><name pos:start="121:32" pos:end="121:35">bios</name></expr></argument>, <argument pos:start="121:38" pos:end="121:41"><expr pos:start="121:38" pos:end="121:41"><name pos:start="121:38" pos:end="121:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:50"><expr pos:start="123:5" pos:end="125:49"><call pos:start="123:5" pos:end="125:49"><name pos:start="123:5" pos:end="123:28">memory_region_init_alias</name><argument_list pos:start="123:29" pos:end="125:49">(<argument pos:start="123:30" pos:end="123:34"><expr pos:start="123:30" pos:end="123:34"><name pos:start="123:30" pos:end="123:34">bios2</name></expr></argument>, <argument pos:start="123:37" pos:end="123:40"><expr pos:start="123:37" pos:end="123:40"><name pos:start="123:37" pos:end="123:40">NULL</name></expr></argument>, <argument pos:start="123:43" pos:end="123:58"><expr pos:start="123:43" pos:end="123:58"><literal type="string" pos:start="123:43" pos:end="123:58">"mips_jazz.bios"</literal></expr></argument>, <argument pos:start="123:61" pos:end="123:64"><expr pos:start="123:61" pos:end="123:64"><name pos:start="123:61" pos:end="123:64">bios</name></expr></argument>,

                             <argument pos:start="125:30" pos:end="125:30"><expr pos:start="125:30" pos:end="125:30"><literal type="number" pos:start="125:30" pos:end="125:30">0</literal></expr></argument>, <argument pos:start="125:33" pos:end="125:48"><expr pos:start="125:33" pos:end="125:48"><name pos:start="125:33" pos:end="125:48">MAGNUM_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:67"><expr pos:start="127:5" pos:end="127:66"><call pos:start="127:5" pos:end="127:66"><name pos:start="127:5" pos:end="127:31">memory_region_add_subregion</name><argument_list pos:start="127:32" pos:end="127:66">(<argument pos:start="127:33" pos:end="127:45"><expr pos:start="127:33" pos:end="127:45"><name pos:start="127:33" pos:end="127:45">address_space</name></expr></argument>, <argument pos:start="127:48" pos:end="127:59"><expr pos:start="127:48" pos:end="127:59"><literal type="number" pos:start="127:48" pos:end="127:59">0x1fc00000LL</literal></expr></argument>, <argument pos:start="127:62" pos:end="127:65"><expr pos:start="127:62" pos:end="127:65"><name pos:start="127:62" pos:end="127:65">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:68"><expr pos:start="129:5" pos:end="129:67"><call pos:start="129:5" pos:end="129:67"><name pos:start="129:5" pos:end="129:31">memory_region_add_subregion</name><argument_list pos:start="129:32" pos:end="129:67">(<argument pos:start="129:33" pos:end="129:45"><expr pos:start="129:33" pos:end="129:45"><name pos:start="129:33" pos:end="129:45">address_space</name></expr></argument>, <argument pos:start="129:48" pos:end="129:59"><expr pos:start="129:48" pos:end="129:59"><literal type="number" pos:start="129:48" pos:end="129:59">0xfff00000LL</literal></expr></argument>, <argument pos:start="129:62" pos:end="129:66"><expr pos:start="129:62" pos:end="129:66"><name pos:start="129:62" pos:end="129:66">bios2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="133:5" pos:end="133:30">/* load the BIOS image. */</comment>

    <if_stmt pos:start="135:5" pos:end="137:34"><if pos:start="135:5" pos:end="137:34">if <condition pos:start="135:8" pos:end="135:26">(<expr pos:start="135:9" pos:end="135:25"><name pos:start="135:9" pos:end="135:17">bios_name</name> <operator pos:start="135:19" pos:end="135:20">==</operator> <name pos:start="135:22" pos:end="135:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:34"><block_content pos:start="137:9" pos:end="137:34">

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:17">bios_name</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <name pos:start="137:21" pos:end="137:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:62"><expr pos:start="139:5" pos:end="139:61"><name pos:start="139:5" pos:end="139:12">filename</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <call pos:start="139:16" pos:end="139:61"><name pos:start="139:16" pos:end="139:29">qemu_find_file</name><argument_list pos:start="139:30" pos:end="139:61">(<argument pos:start="139:31" pos:end="139:49"><expr pos:start="139:31" pos:end="139:49"><name pos:start="139:31" pos:end="139:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="139:52" pos:end="139:60"><expr pos:start="139:52" pos:end="139:60"><name pos:start="139:52" pos:end="139:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="153:5"><if pos:start="141:5" pos:end="149:5">if <condition pos:start="141:8" pos:end="141:17">(<expr pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:16">filename</name></expr>)</condition> <block pos:start="141:19" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:25">

        <expr_stmt pos:start="143:9" pos:end="145:58"><expr pos:start="143:9" pos:end="145:57"><name pos:start="143:9" pos:end="143:17">bios_size</name> <operator pos:start="143:19" pos:end="143:19">=</operator> <call pos:start="143:21" pos:end="145:57"><name pos:start="143:21" pos:end="143:39">load_image_targphys</name><argument_list pos:start="143:40" pos:end="145:57">(<argument pos:start="143:41" pos:end="143:48"><expr pos:start="143:41" pos:end="143:48"><name pos:start="143:41" pos:end="143:48">filename</name></expr></argument>, <argument pos:start="143:51" pos:end="143:62"><expr pos:start="143:51" pos:end="143:62"><literal type="number" pos:start="143:51" pos:end="143:62">0xfff00000LL</literal></expr></argument>,

                                        <argument pos:start="145:41" pos:end="145:56"><expr pos:start="145:41" pos:end="145:56"><name pos:start="145:41" pos:end="145:56">MAGNUM_BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:25"><expr pos:start="147:9" pos:end="147:24"><call pos:start="147:9" pos:end="147:24"><name pos:start="147:9" pos:end="147:14">g_free</name><argument_list pos:start="147:15" pos:end="147:24">(<argument pos:start="147:16" pos:end="147:23"><expr pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="153:5">else <block pos:start="149:12" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:23">

        <expr_stmt pos:start="151:9" pos:end="151:23"><expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:17">bios_size</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <operator pos:start="151:21" pos:end="151:21">-</operator><literal type="number" pos:start="151:22" pos:end="151:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:76">(<expr pos:start="155:9" pos:end="155:75"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:37"><name pos:start="155:10" pos:end="155:18">bios_size</name> <argument_list type="generic" pos:start="155:20" pos:end="155:37">&lt; <argument pos:start="155:22" pos:end="155:35"><expr pos:start="155:22" pos:end="155:35"><literal type="number" pos:start="155:22" pos:end="155:22">0</literal> <operator pos:start="155:24" pos:end="155:25">||</operator> <name pos:start="155:27" pos:end="155:35">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="155:39" pos:end="155:54">MAGNUM_BIOS_SIZE</name><operator pos:start="155:55" pos:end="155:55">)</operator> <operator pos:start="155:57" pos:end="155:58">&amp;&amp;</operator> <operator pos:start="155:60" pos:end="155:60">!</operator><call pos:start="155:61" pos:end="155:75"><name pos:start="155:61" pos:end="155:73">qtest_enabled</name><argument_list pos:start="155:74" pos:end="155:75">()</argument_list></call></expr>)</condition> <block pos:start="155:78" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:16">

        <expr_stmt pos:start="157:9" pos:end="157:65"><expr pos:start="157:9" pos:end="157:64"><call pos:start="157:9" pos:end="157:64"><name pos:start="157:9" pos:end="157:20">error_report</name><argument_list pos:start="157:21" pos:end="157:64">(<argument pos:start="157:22" pos:end="157:52"><expr pos:start="157:22" pos:end="157:52"><literal type="string" pos:start="157:22" pos:end="157:52">"Could not load MIPS bios '%s'"</literal></expr></argument>, <argument pos:start="157:55" pos:end="157:63"><expr pos:start="157:55" pos:end="157:63"><name pos:start="157:55" pos:end="157:63">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:16"><expr pos:start="159:9" pos:end="159:15"><call pos:start="159:9" pos:end="159:15"><name pos:start="159:9" pos:end="159:12">exit</name><argument_list pos:start="159:13" pos:end="159:15">(<argument pos:start="159:14" pos:end="159:14"><expr pos:start="159:14" pos:end="159:14"><literal type="number" pos:start="159:14" pos:end="159:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:31"><expr pos:start="167:5" pos:end="167:30"><call pos:start="167:5" pos:end="167:30"><name pos:start="167:5" pos:end="167:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="167:26" pos:end="167:30">(<argument pos:start="167:27" pos:end="167:29"><expr pos:start="167:27" pos:end="167:29"><name pos:start="167:27" pos:end="167:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:29"><expr pos:start="169:5" pos:end="169:28"><call pos:start="169:5" pos:end="169:28"><name pos:start="169:5" pos:end="169:23">cpu_mips_clock_init</name><argument_list pos:start="169:24" pos:end="169:28">(<argument pos:start="169:25" pos:end="169:27"><expr pos:start="169:25" pos:end="169:27"><name pos:start="169:25" pos:end="169:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="173:5" pos:end="173:17">/* Chipset */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:48"><expr pos:start="175:5" pos:end="175:47"><name pos:start="175:5" pos:end="175:10">rc4030</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <call pos:start="175:14" pos:end="175:47"><name pos:start="175:14" pos:end="175:24">rc4030_init</name><argument_list pos:start="175:25" pos:end="175:47">(<argument pos:start="175:26" pos:end="175:30"><expr pos:start="175:26" pos:end="175:30"><operator pos:start="175:26" pos:end="175:26">&amp;</operator><name pos:start="175:27" pos:end="175:30">dmas</name></expr></argument>, <argument pos:start="175:33" pos:end="175:46"><expr pos:start="175:33" pos:end="175:46"><operator pos:start="175:33" pos:end="175:33">&amp;</operator><name pos:start="175:34" pos:end="175:46">rc4030_dma_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:36"><expr pos:start="177:5" pos:end="177:35"><name pos:start="177:5" pos:end="177:10">sysbus</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <call pos:start="177:14" pos:end="177:35"><name pos:start="177:14" pos:end="177:27">SYS_BUS_DEVICE</name><argument_list pos:start="177:28" pos:end="177:35">(<argument pos:start="177:29" pos:end="177:34"><expr pos:start="177:29" pos:end="177:34"><name pos:start="177:29" pos:end="177:34">rc4030</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:47"><expr pos:start="179:5" pos:end="179:46"><call pos:start="179:5" pos:end="179:46"><name pos:start="179:5" pos:end="179:22">sysbus_connect_irq</name><argument_list pos:start="179:23" pos:end="179:46">(<argument pos:start="179:24" pos:end="179:29"><expr pos:start="179:24" pos:end="179:29"><name pos:start="179:24" pos:end="179:29">sysbus</name></expr></argument>, <argument pos:start="179:32" pos:end="179:32"><expr pos:start="179:32" pos:end="179:32"><literal type="number" pos:start="179:32" pos:end="179:32">0</literal></expr></argument>, <argument pos:start="179:35" pos:end="179:45"><expr pos:start="179:35" pos:end="179:45"><name pos:start="179:35" pos:end="179:45"><name pos:start="179:35" pos:end="179:37">env</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:42">irq</name><index pos:start="179:43" pos:end="179:45">[<expr pos:start="179:44" pos:end="179:44"><literal type="number" pos:start="179:44" pos:end="179:44">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:47"><expr pos:start="181:5" pos:end="181:46"><call pos:start="181:5" pos:end="181:46"><name pos:start="181:5" pos:end="181:22">sysbus_connect_irq</name><argument_list pos:start="181:23" pos:end="181:46">(<argument pos:start="181:24" pos:end="181:29"><expr pos:start="181:24" pos:end="181:29"><name pos:start="181:24" pos:end="181:29">sysbus</name></expr></argument>, <argument pos:start="181:32" pos:end="181:32"><expr pos:start="181:32" pos:end="181:32"><literal type="number" pos:start="181:32" pos:end="181:32">1</literal></expr></argument>, <argument pos:start="181:35" pos:end="181:45"><expr pos:start="181:35" pos:end="181:45"><name pos:start="181:35" pos:end="181:45"><name pos:start="181:35" pos:end="181:37">env</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:42">irq</name><index pos:start="181:43" pos:end="181:45">[<expr pos:start="181:44" pos:end="181:44"><literal type="number" pos:start="181:44" pos:end="181:44">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="185:67"><expr pos:start="183:5" pos:end="185:66"><call pos:start="183:5" pos:end="185:66"><name pos:start="183:5" pos:end="183:31">memory_region_add_subregion</name><argument_list pos:start="183:32" pos:end="185:66">(<argument pos:start="183:33" pos:end="183:45"><expr pos:start="183:33" pos:end="183:45"><name pos:start="183:33" pos:end="183:45">address_space</name></expr></argument>, <argument pos:start="183:48" pos:end="183:57"><expr pos:start="183:48" pos:end="183:57"><literal type="number" pos:start="183:48" pos:end="183:57">0x80000000</literal></expr></argument>,

                                <argument pos:start="185:33" pos:end="185:65"><expr pos:start="185:33" pos:end="185:65"><call pos:start="185:33" pos:end="185:65"><name pos:start="185:33" pos:end="185:54">sysbus_mmio_get_region</name><argument_list pos:start="185:55" pos:end="185:65">(<argument pos:start="185:56" pos:end="185:61"><expr pos:start="185:56" pos:end="185:61"><name pos:start="185:56" pos:end="185:61">sysbus</name></expr></argument>, <argument pos:start="185:64" pos:end="185:64"><expr pos:start="185:64" pos:end="185:64"><literal type="number" pos:start="185:64" pos:end="185:64">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="189:67"><expr pos:start="187:5" pos:end="189:66"><call pos:start="187:5" pos:end="189:66"><name pos:start="187:5" pos:end="187:31">memory_region_add_subregion</name><argument_list pos:start="187:32" pos:end="189:66">(<argument pos:start="187:33" pos:end="187:45"><expr pos:start="187:33" pos:end="187:45"><name pos:start="187:33" pos:end="187:45">address_space</name></expr></argument>, <argument pos:start="187:48" pos:end="187:57"><expr pos:start="187:48" pos:end="187:57"><literal type="number" pos:start="187:48" pos:end="187:57">0xf0000000</literal></expr></argument>,

                                <argument pos:start="189:33" pos:end="189:65"><expr pos:start="189:33" pos:end="189:65"><call pos:start="189:33" pos:end="189:65"><name pos:start="189:33" pos:end="189:54">sysbus_mmio_get_region</name><argument_list pos:start="189:55" pos:end="189:65">(<argument pos:start="189:56" pos:end="189:61"><expr pos:start="189:56" pos:end="189:61"><name pos:start="189:56" pos:end="189:61">sysbus</name></expr></argument>, <argument pos:start="189:64" pos:end="189:64"><expr pos:start="189:64" pos:end="189:64"><literal type="number" pos:start="189:64" pos:end="189:64">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:86"><expr pos:start="191:5" pos:end="191:85"><call pos:start="191:5" pos:end="191:85"><name pos:start="191:5" pos:end="191:25">memory_region_init_io</name><argument_list pos:start="191:26" pos:end="191:85">(<argument pos:start="191:27" pos:end="191:35"><expr pos:start="191:27" pos:end="191:35"><name pos:start="191:27" pos:end="191:35">dma_dummy</name></expr></argument>, <argument pos:start="191:38" pos:end="191:41"><expr pos:start="191:38" pos:end="191:41"><name pos:start="191:38" pos:end="191:41">NULL</name></expr></argument>, <argument pos:start="191:44" pos:end="191:57"><expr pos:start="191:44" pos:end="191:57"><operator pos:start="191:44" pos:end="191:44">&amp;</operator><name pos:start="191:45" pos:end="191:57">dma_dummy_ops</name></expr></argument>, <argument pos:start="191:60" pos:end="191:63"><expr pos:start="191:60" pos:end="191:63"><name pos:start="191:60" pos:end="191:63">NULL</name></expr></argument>, <argument pos:start="191:66" pos:end="191:76"><expr pos:start="191:66" pos:end="191:76"><literal type="string" pos:start="191:66" pos:end="191:76">"dummy_dma"</literal></expr></argument>, <argument pos:start="191:79" pos:end="191:84"><expr pos:start="191:79" pos:end="191:84"><literal type="number" pos:start="191:79" pos:end="191:84">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:70"><expr pos:start="193:5" pos:end="193:69"><call pos:start="193:5" pos:end="193:69"><name pos:start="193:5" pos:end="193:31">memory_region_add_subregion</name><argument_list pos:start="193:32" pos:end="193:69">(<argument pos:start="193:33" pos:end="193:45"><expr pos:start="193:33" pos:end="193:45"><name pos:start="193:33" pos:end="193:45">address_space</name></expr></argument>, <argument pos:start="193:48" pos:end="193:57"><expr pos:start="193:48" pos:end="193:57"><literal type="number" pos:start="193:48" pos:end="193:57">0x8000d000</literal></expr></argument>, <argument pos:start="193:60" pos:end="193:68"><expr pos:start="193:60" pos:end="193:68"><name pos:start="193:60" pos:end="193:68">dma_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="197:5" pos:end="197:66">/* ISA bus: IO space at 0x90000000, mem space at 0x91000000 */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:59"><expr pos:start="199:5" pos:end="199:58"><call pos:start="199:5" pos:end="199:58"><name pos:start="199:5" pos:end="199:22">memory_region_init</name><argument_list pos:start="199:23" pos:end="199:58">(<argument pos:start="199:24" pos:end="199:29"><expr pos:start="199:24" pos:end="199:29"><name pos:start="199:24" pos:end="199:29">isa_io</name></expr></argument>, <argument pos:start="199:32" pos:end="199:35"><expr pos:start="199:32" pos:end="199:35"><name pos:start="199:32" pos:end="199:35">NULL</name></expr></argument>, <argument pos:start="199:38" pos:end="199:45"><expr pos:start="199:38" pos:end="199:45"><literal type="string" pos:start="199:38" pos:end="199:45">"isa-io"</literal></expr></argument>, <argument pos:start="199:48" pos:end="199:57"><expr pos:start="199:48" pos:end="199:57"><literal type="number" pos:start="199:48" pos:end="199:57">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:61"><expr pos:start="201:5" pos:end="201:60"><call pos:start="201:5" pos:end="201:60"><name pos:start="201:5" pos:end="201:22">memory_region_init</name><argument_list pos:start="201:23" pos:end="201:60">(<argument pos:start="201:24" pos:end="201:30"><expr pos:start="201:24" pos:end="201:30"><name pos:start="201:24" pos:end="201:30">isa_mem</name></expr></argument>, <argument pos:start="201:33" pos:end="201:36"><expr pos:start="201:33" pos:end="201:36"><name pos:start="201:33" pos:end="201:36">NULL</name></expr></argument>, <argument pos:start="201:39" pos:end="201:47"><expr pos:start="201:39" pos:end="201:47"><literal type="string" pos:start="201:39" pos:end="201:47">"isa-mem"</literal></expr></argument>, <argument pos:start="201:50" pos:end="201:59"><expr pos:start="201:50" pos:end="201:59"><literal type="number" pos:start="201:50" pos:end="201:59">0x01000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:67"><expr pos:start="203:5" pos:end="203:66"><call pos:start="203:5" pos:end="203:66"><name pos:start="203:5" pos:end="203:31">memory_region_add_subregion</name><argument_list pos:start="203:32" pos:end="203:66">(<argument pos:start="203:33" pos:end="203:45"><expr pos:start="203:33" pos:end="203:45"><name pos:start="203:33" pos:end="203:45">address_space</name></expr></argument>, <argument pos:start="203:48" pos:end="203:57"><expr pos:start="203:48" pos:end="203:57"><literal type="number" pos:start="203:48" pos:end="203:57">0x90000000</literal></expr></argument>, <argument pos:start="203:60" pos:end="203:65"><expr pos:start="203:60" pos:end="203:65"><name pos:start="203:60" pos:end="203:65">isa_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:68"><expr pos:start="205:5" pos:end="205:67"><call pos:start="205:5" pos:end="205:67"><name pos:start="205:5" pos:end="205:31">memory_region_add_subregion</name><argument_list pos:start="205:32" pos:end="205:67">(<argument pos:start="205:33" pos:end="205:45"><expr pos:start="205:33" pos:end="205:45"><name pos:start="205:33" pos:end="205:45">address_space</name></expr></argument>, <argument pos:start="205:48" pos:end="205:57"><expr pos:start="205:48" pos:end="205:57"><literal type="number" pos:start="205:48" pos:end="205:57">0x91000000</literal></expr></argument>, <argument pos:start="205:60" pos:end="205:66"><expr pos:start="205:60" pos:end="205:66"><name pos:start="205:60" pos:end="205:66">isa_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:49"><expr pos:start="207:5" pos:end="207:48"><name pos:start="207:5" pos:end="207:11">isa_bus</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="207:48"><name pos:start="207:15" pos:end="207:25">isa_bus_new</name><argument_list pos:start="207:26" pos:end="207:48">(<argument pos:start="207:27" pos:end="207:30"><expr pos:start="207:27" pos:end="207:30"><name pos:start="207:27" pos:end="207:30">NULL</name></expr></argument>, <argument pos:start="207:33" pos:end="207:39"><expr pos:start="207:33" pos:end="207:39"><name pos:start="207:33" pos:end="207:39">isa_mem</name></expr></argument>, <argument pos:start="207:42" pos:end="207:47"><expr pos:start="207:42" pos:end="207:47"><name pos:start="207:42" pos:end="207:47">isa_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:21">/* ISA devices */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:45"><expr pos:start="213:5" pos:end="213:44"><name pos:start="213:5" pos:end="213:9">i8259</name> <operator pos:start="213:11" pos:end="213:11">=</operator> <call pos:start="213:13" pos:end="213:44"><name pos:start="213:13" pos:end="213:22">i8259_init</name><argument_list pos:start="213:23" pos:end="213:44">(<argument pos:start="213:24" pos:end="213:30"><expr pos:start="213:24" pos:end="213:30"><name pos:start="213:24" pos:end="213:30">isa_bus</name></expr></argument>, <argument pos:start="213:33" pos:end="213:43"><expr pos:start="213:33" pos:end="213:43"><name pos:start="213:33" pos:end="213:43"><name pos:start="213:33" pos:end="213:35">env</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:40">irq</name><index pos:start="213:41" pos:end="213:43">[<expr pos:start="213:42" pos:end="213:42"><literal type="number" pos:start="213:42" pos:end="213:42">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:33"><expr pos:start="215:5" pos:end="215:32"><call pos:start="215:5" pos:end="215:32"><name pos:start="215:5" pos:end="215:16">isa_bus_irqs</name><argument_list pos:start="215:17" pos:end="215:32">(<argument pos:start="215:18" pos:end="215:24"><expr pos:start="215:18" pos:end="215:24"><name pos:start="215:18" pos:end="215:24">isa_bus</name></expr></argument>, <argument pos:start="215:27" pos:end="215:31"><expr pos:start="215:27" pos:end="215:31"><name pos:start="215:27" pos:end="215:31">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:16"><expr pos:start="217:5" pos:end="217:15"><call pos:start="217:5" pos:end="217:15"><name pos:start="217:5" pos:end="217:12">DMA_init</name><argument_list pos:start="217:13" pos:end="217:15">(<argument pos:start="217:14" pos:end="217:14"><expr pos:start="217:14" pos:end="217:14"><literal type="number" pos:start="217:14" pos:end="217:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:43"><expr pos:start="219:5" pos:end="219:42"><name pos:start="219:5" pos:end="219:7">pit</name> <operator pos:start="219:9" pos:end="219:9">=</operator> <call pos:start="219:11" pos:end="219:42"><name pos:start="219:11" pos:end="219:18">pit_init</name><argument_list pos:start="219:19" pos:end="219:42">(<argument pos:start="219:20" pos:end="219:26"><expr pos:start="219:20" pos:end="219:26"><name pos:start="219:20" pos:end="219:26">isa_bus</name></expr></argument>, <argument pos:start="219:29" pos:end="219:32"><expr pos:start="219:29" pos:end="219:32"><literal type="number" pos:start="219:29" pos:end="219:32">0x40</literal></expr></argument>, <argument pos:start="219:35" pos:end="219:35"><expr pos:start="219:35" pos:end="219:35"><literal type="number" pos:start="219:35" pos:end="219:35">0</literal></expr></argument>, <argument pos:start="219:38" pos:end="219:41"><expr pos:start="219:38" pos:end="219:41"><name pos:start="219:38" pos:end="219:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:29"><expr pos:start="221:5" pos:end="221:28"><call pos:start="221:5" pos:end="221:28"><name pos:start="221:5" pos:end="221:14">pcspk_init</name><argument_list pos:start="221:15" pos:end="221:28">(<argument pos:start="221:16" pos:end="221:22"><expr pos:start="221:16" pos:end="221:22"><name pos:start="221:16" pos:end="221:22">isa_bus</name></expr></argument>, <argument pos:start="221:25" pos:end="221:27"><expr pos:start="221:25" pos:end="221:27"><name pos:start="221:25" pos:end="221:27">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:20">/* Video card */</comment>

    <switch pos:start="227:5" pos:end="277:5">switch <condition pos:start="227:12" pos:end="227:23">(<expr pos:start="227:13" pos:end="227:22"><name pos:start="227:13" pos:end="227:22">jazz_model</name></expr>)</condition> <block pos:start="227:25" pos:end="277:5">{<block_content pos:start="229:5" pos:end="275:14">

    <case pos:start="229:5" pos:end="229:21">case <expr pos:start="229:10" pos:end="229:20"><name pos:start="229:10" pos:end="229:20">JAZZ_MAGNUM</name></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:47"><expr pos:start="231:9" pos:end="231:46"><name pos:start="231:9" pos:end="231:11">dev</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <call pos:start="231:15" pos:end="231:46"><name pos:start="231:15" pos:end="231:25">qdev_create</name><argument_list pos:start="231:26" pos:end="231:46">(<argument pos:start="231:27" pos:end="231:30"><expr pos:start="231:27" pos:end="231:30"><name pos:start="231:27" pos:end="231:30">NULL</name></expr></argument>, <argument pos:start="231:33" pos:end="231:45"><expr pos:start="231:33" pos:end="231:45"><literal type="string" pos:start="231:33" pos:end="231:45">"sysbus-g364"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:30"><expr pos:start="233:9" pos:end="233:29"><call pos:start="233:9" pos:end="233:29"><name pos:start="233:9" pos:end="233:24">qdev_init_nofail</name><argument_list pos:start="233:25" pos:end="233:29">(<argument pos:start="233:26" pos:end="233:28"><expr pos:start="233:26" pos:end="233:28"><name pos:start="233:26" pos:end="233:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:37"><expr pos:start="235:9" pos:end="235:36"><name pos:start="235:9" pos:end="235:14">sysbus</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <call pos:start="235:18" pos:end="235:36"><name pos:start="235:18" pos:end="235:31">SYS_BUS_DEVICE</name><argument_list pos:start="235:32" pos:end="235:36">(<argument pos:start="235:33" pos:end="235:35"><expr pos:start="235:33" pos:end="235:35"><name pos:start="235:33" pos:end="235:35">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:47"><expr pos:start="237:9" pos:end="237:46"><call pos:start="237:9" pos:end="237:46"><name pos:start="237:9" pos:end="237:23">sysbus_mmio_map</name><argument_list pos:start="237:24" pos:end="237:46">(<argument pos:start="237:25" pos:end="237:30"><expr pos:start="237:25" pos:end="237:30"><name pos:start="237:25" pos:end="237:30">sysbus</name></expr></argument>, <argument pos:start="237:33" pos:end="237:33"><expr pos:start="237:33" pos:end="237:33"><literal type="number" pos:start="237:33" pos:end="237:33">0</literal></expr></argument>, <argument pos:start="237:36" pos:end="237:45"><expr pos:start="237:36" pos:end="237:45"><literal type="number" pos:start="237:36" pos:end="237:45">0x60080000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:47"><expr pos:start="239:9" pos:end="239:46"><call pos:start="239:9" pos:end="239:46"><name pos:start="239:9" pos:end="239:23">sysbus_mmio_map</name><argument_list pos:start="239:24" pos:end="239:46">(<argument pos:start="239:25" pos:end="239:30"><expr pos:start="239:25" pos:end="239:30"><name pos:start="239:25" pos:end="239:30">sysbus</name></expr></argument>, <argument pos:start="239:33" pos:end="239:33"><expr pos:start="239:33" pos:end="239:33"><literal type="number" pos:start="239:33" pos:end="239:33">1</literal></expr></argument>, <argument pos:start="239:36" pos:end="239:45"><expr pos:start="239:36" pos:end="239:45"><literal type="number" pos:start="239:36" pos:end="239:45">0x40000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:67"><expr pos:start="241:9" pos:end="241:66"><call pos:start="241:9" pos:end="241:66"><name pos:start="241:9" pos:end="241:26">sysbus_connect_irq</name><argument_list pos:start="241:27" pos:end="241:66">(<argument pos:start="241:28" pos:end="241:33"><expr pos:start="241:28" pos:end="241:33"><name pos:start="241:28" pos:end="241:33">sysbus</name></expr></argument>, <argument pos:start="241:36" pos:end="241:36"><expr pos:start="241:36" pos:end="241:36"><literal type="number" pos:start="241:36" pos:end="241:36">0</literal></expr></argument>, <argument pos:start="241:39" pos:end="241:65"><expr pos:start="241:39" pos:end="241:65"><call pos:start="241:39" pos:end="241:65"><name pos:start="241:39" pos:end="241:54">qdev_get_gpio_in</name><argument_list pos:start="241:55" pos:end="241:65">(<argument pos:start="241:56" pos:end="241:61"><expr pos:start="241:56" pos:end="241:61"><name pos:start="241:56" pos:end="241:61">rc4030</name></expr></argument>, <argument pos:start="241:64" pos:end="241:64"><expr pos:start="241:64" pos:end="241:64"><literal type="number" pos:start="241:64" pos:end="241:64">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="243:9" pos:end="263:9">{<block_content pos:start="247:13" pos:end="261:26">

            <comment type="block" pos:start="245:13" pos:end="245:65">/* Simple ROM, so user doesn't have to provide one */</comment>

            <decl_stmt pos:start="247:13" pos:end="247:58"><decl pos:start="247:13" pos:end="247:57"><type pos:start="247:13" pos:end="247:26"><name pos:start="247:13" pos:end="247:24">MemoryRegion</name> <modifier pos:start="247:26" pos:end="247:26">*</modifier></type><name pos:start="247:27" pos:end="247:32">rom_mr</name> <init pos:start="247:34" pos:end="247:57">= <expr pos:start="247:36" pos:end="247:57"><call pos:start="247:36" pos:end="247:57"><name pos:start="247:36" pos:end="247:40">g_new</name><argument_list pos:start="247:41" pos:end="247:57">(<argument pos:start="247:42" pos:end="247:53"><expr pos:start="247:42" pos:end="247:53"><name pos:start="247:42" pos:end="247:53">MemoryRegion</name></expr></argument>, <argument pos:start="247:56" pos:end="247:56"><expr pos:start="247:56" pos:end="247:56"><literal type="number" pos:start="247:56" pos:end="247:56">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="249:13" pos:end="251:49"><expr pos:start="249:13" pos:end="251:48"><call pos:start="249:13" pos:end="251:48"><name pos:start="249:13" pos:end="249:34">memory_region_init_ram</name><argument_list pos:start="249:35" pos:end="251:48">(<argument pos:start="249:36" pos:end="249:41"><expr pos:start="249:36" pos:end="249:41"><name pos:start="249:36" pos:end="249:41">rom_mr</name></expr></argument>, <argument pos:start="249:44" pos:end="249:47"><expr pos:start="249:44" pos:end="249:47"><name pos:start="249:44" pos:end="249:47">NULL</name></expr></argument>, <argument pos:start="249:50" pos:end="249:61"><expr pos:start="249:50" pos:end="249:61"><literal type="string" pos:start="249:50" pos:end="249:61">"g364fb.rom"</literal></expr></argument>, <argument pos:start="249:64" pos:end="249:70"><expr pos:start="249:64" pos:end="249:70"><literal type="number" pos:start="249:64" pos:end="249:70">0x80000</literal></expr></argument>,

                                   <argument pos:start="251:36" pos:end="251:47"><expr pos:start="251:36" pos:end="251:47"><operator pos:start="251:36" pos:end="251:36">&amp;</operator><name pos:start="251:37" pos:end="251:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:48"><expr pos:start="253:13" pos:end="253:47"><call pos:start="253:13" pos:end="253:47"><name pos:start="253:13" pos:end="253:39">vmstate_register_ram_global</name><argument_list pos:start="253:40" pos:end="253:47">(<argument pos:start="253:41" pos:end="253:46"><expr pos:start="253:41" pos:end="253:46"><name pos:start="253:41" pos:end="253:46">rom_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:53"><expr pos:start="255:13" pos:end="255:52"><call pos:start="255:13" pos:end="255:52"><name pos:start="255:13" pos:end="255:38">memory_region_set_readonly</name><argument_list pos:start="255:39" pos:end="255:52">(<argument pos:start="255:40" pos:end="255:45"><expr pos:start="255:40" pos:end="255:45"><name pos:start="255:40" pos:end="255:45">rom_mr</name></expr></argument>, <argument pos:start="255:48" pos:end="255:51"><expr pos:start="255:48" pos:end="255:51"><name pos:start="255:48" pos:end="255:51">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt pos:start="257:13" pos:end="257:61"><decl pos:start="257:13" pos:end="257:60"><type pos:start="257:13" pos:end="257:21"><name pos:start="257:13" pos:end="257:19">uint8_t</name> <modifier pos:start="257:21" pos:end="257:21">*</modifier></type><name pos:start="257:22" pos:end="257:24">rom</name> <init pos:start="257:26" pos:end="257:60">= <expr pos:start="257:28" pos:end="257:60"><call pos:start="257:28" pos:end="257:60"><name pos:start="257:28" pos:end="257:52">memory_region_get_ram_ptr</name><argument_list pos:start="257:53" pos:end="257:60">(<argument pos:start="257:54" pos:end="257:59"><expr pos:start="257:54" pos:end="257:59"><name pos:start="257:54" pos:end="257:59">rom_mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:75"><expr pos:start="259:13" pos:end="259:74"><call pos:start="259:13" pos:end="259:74"><name pos:start="259:13" pos:end="259:39">memory_region_add_subregion</name><argument_list pos:start="259:40" pos:end="259:74">(<argument pos:start="259:41" pos:end="259:53"><expr pos:start="259:41" pos:end="259:53"><name pos:start="259:41" pos:end="259:53">address_space</name></expr></argument>, <argument pos:start="259:56" pos:end="259:65"><expr pos:start="259:56" pos:end="259:65"><literal type="number" pos:start="259:56" pos:end="259:65">0x60000000</literal></expr></argument>, <argument pos:start="259:68" pos:end="259:73"><expr pos:start="259:68" pos:end="259:73"><name pos:start="259:68" pos:end="259:73">rom_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:26"><expr pos:start="261:13" pos:end="261:25"><name pos:start="261:13" pos:end="261:18"><name pos:start="261:13" pos:end="261:15">rom</name><index pos:start="261:16" pos:end="261:18">[<expr pos:start="261:17" pos:end="261:17"><literal type="number" pos:start="261:17" pos:end="261:17">0</literal></expr>]</index></name> <operator pos:start="261:20" pos:end="261:20">=</operator> <literal type="number" pos:start="261:22" pos:end="261:25">0x10</literal></expr>;</expr_stmt> <comment type="block" pos:start="261:28" pos:end="261:42">/* Mips G364 */</comment>

        </block_content>}</block>

        <break pos:start="265:9" pos:end="265:14">break;</break>

    <case pos:start="267:5" pos:end="267:21">case <expr pos:start="267:10" pos:end="267:20"><name pos:start="267:10" pos:end="267:20">JAZZ_PICA61</name></expr>:</case>

        <expr_stmt pos:start="269:9" pos:end="269:72"><expr pos:start="269:9" pos:end="269:71"><call pos:start="269:9" pos:end="269:71"><name pos:start="269:9" pos:end="269:23">isa_vga_mm_init</name><argument_list pos:start="269:24" pos:end="269:71">(<argument pos:start="269:25" pos:end="269:34"><expr pos:start="269:25" pos:end="269:34"><literal type="number" pos:start="269:25" pos:end="269:34">0x40000000</literal></expr></argument>, <argument pos:start="269:37" pos:end="269:46"><expr pos:start="269:37" pos:end="269:46"><literal type="number" pos:start="269:37" pos:end="269:46">0x60000000</literal></expr></argument>, <argument pos:start="269:49" pos:end="269:49"><expr pos:start="269:49" pos:end="269:49"><literal type="number" pos:start="269:49" pos:end="269:49">0</literal></expr></argument>, <argument pos:start="269:52" pos:end="269:70"><expr pos:start="269:52" pos:end="269:70"><call pos:start="269:52" pos:end="269:70"><name pos:start="269:52" pos:end="269:68">get_system_memory</name><argument_list pos:start="269:69" pos:end="269:70">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="271:9" pos:end="271:14">break;</break>

    <default pos:start="273:5" pos:end="273:12">default:</default>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="281:5" pos:end="281:28">/* Network controller */</comment>

    <for pos:start="283:5" pos:end="331:5">for <control pos:start="283:9" pos:end="283:33">(<init pos:start="283:10" pos:end="283:15"><expr pos:start="283:10" pos:end="283:14"><name pos:start="283:10" pos:end="283:10">n</name> <operator pos:start="283:12" pos:end="283:12">=</operator> <literal type="number" pos:start="283:14" pos:end="283:14">0</literal></expr>;</init> <condition pos:start="283:17" pos:end="283:28"><expr pos:start="283:17" pos:end="283:27"><name pos:start="283:17" pos:end="283:17">n</name> <operator pos:start="283:19" pos:end="283:19">&lt;</operator> <name pos:start="283:21" pos:end="283:27">nb_nics</name></expr>;</condition> <incr pos:start="283:30" pos:end="283:32"><expr pos:start="283:30" pos:end="283:32"><name pos:start="283:30" pos:end="283:30">n</name><operator pos:start="283:31" pos:end="283:32">++</operator></expr></incr>)</control> <block pos:start="283:35" pos:end="331:5">{<block_content pos:start="285:9" pos:end="329:9">

        <expr_stmt pos:start="285:9" pos:end="285:26"><expr pos:start="285:9" pos:end="285:25"><name pos:start="285:9" pos:end="285:10">nd</name> <operator pos:start="285:12" pos:end="285:12">=</operator> <operator pos:start="285:14" pos:end="285:14">&amp;</operator><name pos:start="285:15" pos:end="285:25"><name pos:start="285:15" pos:end="285:22">nd_table</name><index pos:start="285:23" pos:end="285:25">[<expr pos:start="285:24" pos:end="285:24"><name pos:start="285:24" pos:end="285:24">n</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="289:44"><if pos:start="287:9" pos:end="289:44">if <condition pos:start="287:12" pos:end="287:23">(<expr pos:start="287:13" pos:end="287:22"><operator pos:start="287:13" pos:end="287:13">!</operator><name pos:start="287:14" pos:end="287:22"><name pos:start="287:14" pos:end="287:15">nd</name><operator pos:start="287:16" pos:end="287:17">-&gt;</operator><name pos:start="287:18" pos:end="287:22">model</name></name></expr>)</condition><block type="pseudo" pos:start="289:13" pos:end="289:44"><block_content pos:start="289:13" pos:end="289:44">

            <expr_stmt pos:start="289:13" pos:end="289:44"><expr pos:start="289:13" pos:end="289:43"><name pos:start="289:13" pos:end="289:21"><name pos:start="289:13" pos:end="289:14">nd</name><operator pos:start="289:15" pos:end="289:16">-&gt;</operator><name pos:start="289:17" pos:end="289:21">model</name></name> <operator pos:start="289:23" pos:end="289:23">=</operator> <call pos:start="289:25" pos:end="289:43"><name pos:start="289:25" pos:end="289:32">g_strdup</name><argument_list pos:start="289:33" pos:end="289:43">(<argument pos:start="289:34" pos:end="289:42"><expr pos:start="289:34" pos:end="289:42"><literal type="string" pos:start="289:34" pos:end="289:42">"dp83932"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="291:9" pos:end="329:9"><if pos:start="291:9" pos:end="317:9">if <condition pos:start="291:12" pos:end="291:46">(<expr pos:start="291:13" pos:end="291:45"><call pos:start="291:13" pos:end="291:40"><name pos:start="291:13" pos:end="291:18">strcmp</name><argument_list pos:start="291:19" pos:end="291:40">(<argument pos:start="291:20" pos:end="291:28"><expr pos:start="291:20" pos:end="291:28"><name pos:start="291:20" pos:end="291:28"><name pos:start="291:20" pos:end="291:21">nd</name><operator pos:start="291:22" pos:end="291:23">-&gt;</operator><name pos:start="291:24" pos:end="291:28">model</name></name></expr></argument>, <argument pos:start="291:31" pos:end="291:39"><expr pos:start="291:31" pos:end="291:39"><literal type="string" pos:start="291:31" pos:end="291:39">"dp83932"</literal></expr></argument>)</argument_list></call> <operator pos:start="291:42" pos:end="291:43">==</operator> <literal type="number" pos:start="291:45" pos:end="291:45">0</literal></expr>)</condition> <block pos:start="291:48" pos:end="317:9">{<block_content pos:start="293:13" pos:end="315:18">

            <expr_stmt pos:start="293:13" pos:end="293:48"><expr pos:start="293:13" pos:end="293:47"><call pos:start="293:13" pos:end="293:47"><name pos:start="293:13" pos:end="293:32">qemu_check_nic_model</name><argument_list pos:start="293:33" pos:end="293:47">(<argument pos:start="293:34" pos:end="293:35"><expr pos:start="293:34" pos:end="293:35"><name pos:start="293:34" pos:end="293:35">nd</name></expr></argument>, <argument pos:start="293:38" pos:end="293:46"><expr pos:start="293:38" pos:end="293:46"><literal type="string" pos:start="293:38" pos:end="293:46">"dp83932"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="297:13" pos:end="297:47"><expr pos:start="297:13" pos:end="297:46"><name pos:start="297:13" pos:end="297:15">dev</name> <operator pos:start="297:17" pos:end="297:17">=</operator> <call pos:start="297:19" pos:end="297:46"><name pos:start="297:19" pos:end="297:29">qdev_create</name><argument_list pos:start="297:30" pos:end="297:46">(<argument pos:start="297:31" pos:end="297:34"><expr pos:start="297:31" pos:end="297:34"><name pos:start="297:31" pos:end="297:34">NULL</name></expr></argument>, <argument pos:start="297:37" pos:end="297:45"><expr pos:start="297:37" pos:end="297:45"><literal type="string" pos:start="297:37" pos:end="297:45">"dp8393x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:45"><expr pos:start="299:13" pos:end="299:44"><call pos:start="299:13" pos:end="299:44"><name pos:start="299:13" pos:end="299:35">qdev_set_nic_properties</name><argument_list pos:start="299:36" pos:end="299:44">(<argument pos:start="299:37" pos:end="299:39"><expr pos:start="299:37" pos:end="299:39"><name pos:start="299:37" pos:end="299:39">dev</name></expr></argument>, <argument pos:start="299:42" pos:end="299:43"><expr pos:start="299:42" pos:end="299:43"><name pos:start="299:42" pos:end="299:43">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:52"><expr pos:start="301:13" pos:end="301:51"><call pos:start="301:13" pos:end="301:51"><name pos:start="301:13" pos:end="301:31">qdev_prop_set_uint8</name><argument_list pos:start="301:32" pos:end="301:51">(<argument pos:start="301:33" pos:end="301:35"><expr pos:start="301:33" pos:end="301:35"><name pos:start="301:33" pos:end="301:35">dev</name></expr></argument>, <argument pos:start="301:38" pos:end="301:47"><expr pos:start="301:38" pos:end="301:47"><literal type="string" pos:start="301:38" pos:end="301:47">"it_shift"</literal></expr></argument>, <argument pos:start="301:50" pos:end="301:50"><expr pos:start="301:50" pos:end="301:50"><literal type="number" pos:start="301:50" pos:end="301:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:60"><expr pos:start="303:13" pos:end="303:59"><call pos:start="303:13" pos:end="303:59"><name pos:start="303:13" pos:end="303:29">qdev_prop_set_ptr</name><argument_list pos:start="303:30" pos:end="303:59">(<argument pos:start="303:31" pos:end="303:33"><expr pos:start="303:31" pos:end="303:33"><name pos:start="303:31" pos:end="303:33">dev</name></expr></argument>, <argument pos:start="303:36" pos:end="303:43"><expr pos:start="303:36" pos:end="303:43"><literal type="string" pos:start="303:36" pos:end="303:43">"dma_mr"</literal></expr></argument>, <argument pos:start="303:46" pos:end="303:58"><expr pos:start="303:46" pos:end="303:58"><name pos:start="303:46" pos:end="303:58">rc4030_dma_mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:34"><expr pos:start="305:13" pos:end="305:33"><call pos:start="305:13" pos:end="305:33"><name pos:start="305:13" pos:end="305:28">qdev_init_nofail</name><argument_list pos:start="305:29" pos:end="305:33">(<argument pos:start="305:30" pos:end="305:32"><expr pos:start="305:30" pos:end="305:32"><name pos:start="305:30" pos:end="305:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:41"><expr pos:start="307:13" pos:end="307:40"><name pos:start="307:13" pos:end="307:18">sysbus</name> <operator pos:start="307:20" pos:end="307:20">=</operator> <call pos:start="307:22" pos:end="307:40"><name pos:start="307:22" pos:end="307:35">SYS_BUS_DEVICE</name><argument_list pos:start="307:36" pos:end="307:40">(<argument pos:start="307:37" pos:end="307:39"><expr pos:start="307:37" pos:end="307:39"><name pos:start="307:37" pos:end="307:39">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:51"><expr pos:start="309:13" pos:end="309:50"><call pos:start="309:13" pos:end="309:50"><name pos:start="309:13" pos:end="309:27">sysbus_mmio_map</name><argument_list pos:start="309:28" pos:end="309:50">(<argument pos:start="309:29" pos:end="309:34"><expr pos:start="309:29" pos:end="309:34"><name pos:start="309:29" pos:end="309:34">sysbus</name></expr></argument>, <argument pos:start="309:37" pos:end="309:37"><expr pos:start="309:37" pos:end="309:37"><literal type="number" pos:start="309:37" pos:end="309:37">0</literal></expr></argument>, <argument pos:start="309:40" pos:end="309:49"><expr pos:start="309:40" pos:end="309:49"><literal type="number" pos:start="309:40" pos:end="309:49">0x80001000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:51"><expr pos:start="311:13" pos:end="311:50"><call pos:start="311:13" pos:end="311:50"><name pos:start="311:13" pos:end="311:27">sysbus_mmio_map</name><argument_list pos:start="311:28" pos:end="311:50">(<argument pos:start="311:29" pos:end="311:34"><expr pos:start="311:29" pos:end="311:34"><name pos:start="311:29" pos:end="311:34">sysbus</name></expr></argument>, <argument pos:start="311:37" pos:end="311:37"><expr pos:start="311:37" pos:end="311:37"><literal type="number" pos:start="311:37" pos:end="311:37">1</literal></expr></argument>, <argument pos:start="311:40" pos:end="311:49"><expr pos:start="311:40" pos:end="311:49"><literal type="number" pos:start="311:40" pos:end="311:49">0x8000b000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:71"><expr pos:start="313:13" pos:end="313:70"><call pos:start="313:13" pos:end="313:70"><name pos:start="313:13" pos:end="313:30">sysbus_connect_irq</name><argument_list pos:start="313:31" pos:end="313:70">(<argument pos:start="313:32" pos:end="313:37"><expr pos:start="313:32" pos:end="313:37"><name pos:start="313:32" pos:end="313:37">sysbus</name></expr></argument>, <argument pos:start="313:40" pos:end="313:40"><expr pos:start="313:40" pos:end="313:40"><literal type="number" pos:start="313:40" pos:end="313:40">0</literal></expr></argument>, <argument pos:start="313:43" pos:end="313:69"><expr pos:start="313:43" pos:end="313:69"><call pos:start="313:43" pos:end="313:69"><name pos:start="313:43" pos:end="313:58">qdev_get_gpio_in</name><argument_list pos:start="313:59" pos:end="313:69">(<argument pos:start="313:60" pos:end="313:65"><expr pos:start="313:60" pos:end="313:65"><name pos:start="313:60" pos:end="313:65">rc4030</name></expr></argument>, <argument pos:start="313:68" pos:end="313:68"><expr pos:start="313:68" pos:end="313:68"><literal type="number" pos:start="313:68" pos:end="313:68">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="315:13" pos:end="315:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="317:11" pos:end="323:9">else if <condition pos:start="317:19" pos:end="317:45">(<expr pos:start="317:20" pos:end="317:44"><call pos:start="317:20" pos:end="317:44"><name pos:start="317:20" pos:end="317:33">is_help_option</name><argument_list pos:start="317:34" pos:end="317:44">(<argument pos:start="317:35" pos:end="317:43"><expr pos:start="317:35" pos:end="317:43"><name pos:start="317:35" pos:end="317:43"><name pos:start="317:35" pos:end="317:36">nd</name><operator pos:start="317:37" pos:end="317:38">-&gt;</operator><name pos:start="317:39" pos:end="317:43">model</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="317:47" pos:end="323:9">{<block_content pos:start="319:13" pos:end="321:20">

            <expr_stmt pos:start="319:13" pos:end="319:63"><expr pos:start="319:13" pos:end="319:62"><call pos:start="319:13" pos:end="319:62"><name pos:start="319:13" pos:end="319:19">fprintf</name><argument_list pos:start="319:20" pos:end="319:62">(<argument pos:start="319:21" pos:end="319:26"><expr pos:start="319:21" pos:end="319:26"><name pos:start="319:21" pos:end="319:26">stderr</name></expr></argument>, <argument pos:start="319:29" pos:end="319:61"><expr pos:start="319:29" pos:end="319:61"><literal type="string" pos:start="319:29" pos:end="319:61">"qemu: Supported NICs: dp83932\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:20"><expr pos:start="321:13" pos:end="321:19"><call pos:start="321:13" pos:end="321:19"><name pos:start="321:13" pos:end="321:16">exit</name><argument_list pos:start="321:17" pos:end="321:19">(<argument pos:start="321:18" pos:end="321:18"><expr pos:start="321:18" pos:end="321:18"><literal type="number" pos:start="321:18" pos:end="321:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="323:11" pos:end="329:9">else <block pos:start="323:16" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:20">

            <expr_stmt pos:start="325:13" pos:end="325:70"><expr pos:start="325:13" pos:end="325:69"><call pos:start="325:13" pos:end="325:69"><name pos:start="325:13" pos:end="325:19">fprintf</name><argument_list pos:start="325:20" pos:end="325:69">(<argument pos:start="325:21" pos:end="325:26"><expr pos:start="325:21" pos:end="325:26"><name pos:start="325:21" pos:end="325:26">stderr</name></expr></argument>, <argument pos:start="325:29" pos:end="325:57"><expr pos:start="325:29" pos:end="325:57"><literal type="string" pos:start="325:29" pos:end="325:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="325:60" pos:end="325:68"><expr pos:start="325:60" pos:end="325:68"><name pos:start="325:60" pos:end="325:68"><name pos:start="325:60" pos:end="325:61">nd</name><operator pos:start="325:62" pos:end="325:63">-&gt;</operator><name pos:start="325:64" pos:end="325:68">model</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:20"><expr pos:start="327:13" pos:end="327:19"><call pos:start="327:13" pos:end="327:19"><name pos:start="327:13" pos:end="327:16">exit</name><argument_list pos:start="327:17" pos:end="327:19">(<argument pos:start="327:18" pos:end="327:18"><expr pos:start="327:18" pos:end="327:18"><literal type="number" pos:start="327:18" pos:end="327:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="335:5" pos:end="335:22">/* SCSI adapter */</comment>

    <expr_stmt pos:start="337:5" pos:end="341:67"><expr pos:start="337:5" pos:end="341:66"><call pos:start="337:5" pos:end="341:66"><name pos:start="337:5" pos:end="337:12">esp_init</name><argument_list pos:start="337:13" pos:end="341:66">(<argument pos:start="337:14" pos:end="337:23"><expr pos:start="337:14" pos:end="337:23"><literal type="number" pos:start="337:14" pos:end="337:23">0x80002000</literal></expr></argument>, <argument pos:start="337:26" pos:end="337:26"><expr pos:start="337:26" pos:end="337:26"><literal type="number" pos:start="337:26" pos:end="337:26">0</literal></expr></argument>,

             <argument pos:start="339:14" pos:end="339:28"><expr pos:start="339:14" pos:end="339:28"><name pos:start="339:14" pos:end="339:28">rc4030_dma_read</name></expr></argument>, <argument pos:start="339:31" pos:end="339:46"><expr pos:start="339:31" pos:end="339:46"><name pos:start="339:31" pos:end="339:46">rc4030_dma_write</name></expr></argument>, <argument pos:start="339:49" pos:end="339:55"><expr pos:start="339:49" pos:end="339:55"><name pos:start="339:49" pos:end="339:55"><name pos:start="339:49" pos:end="339:52">dmas</name><index pos:start="339:53" pos:end="339:55">[<expr pos:start="339:54" pos:end="339:54"><literal type="number" pos:start="339:54" pos:end="339:54">0</literal></expr>]</index></name></expr></argument>,

             <argument pos:start="341:14" pos:end="341:40"><expr pos:start="341:14" pos:end="341:40"><call pos:start="341:14" pos:end="341:40"><name pos:start="341:14" pos:end="341:29">qdev_get_gpio_in</name><argument_list pos:start="341:30" pos:end="341:40">(<argument pos:start="341:31" pos:end="341:36"><expr pos:start="341:31" pos:end="341:36"><name pos:start="341:31" pos:end="341:36">rc4030</name></expr></argument>, <argument pos:start="341:39" pos:end="341:39"><expr pos:start="341:39" pos:end="341:39"><literal type="number" pos:start="341:39" pos:end="341:39">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:43" pos:end="341:52"><expr pos:start="341:43" pos:end="341:52"><operator pos:start="341:43" pos:end="341:43">&amp;</operator><name pos:start="341:44" pos:end="341:52">esp_reset</name></expr></argument>, <argument pos:start="341:55" pos:end="341:65"><expr pos:start="341:55" pos:end="341:65"><operator pos:start="341:55" pos:end="341:55">&amp;</operator><name pos:start="341:56" pos:end="341:65">dma_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="345:5" pos:end="345:16">/* Floppy */</comment>

    <if_stmt pos:start="347:5" pos:end="353:5"><if pos:start="347:5" pos:end="353:5">if <condition pos:start="347:8" pos:end="347:47">(<expr pos:start="347:9" pos:end="347:46"><call pos:start="347:9" pos:end="347:36"><name pos:start="347:9" pos:end="347:25">drive_get_max_bus</name><argument_list pos:start="347:26" pos:end="347:36">(<argument pos:start="347:27" pos:end="347:35"><expr pos:start="347:27" pos:end="347:35"><name pos:start="347:27" pos:end="347:35">IF_FLOPPY</name></expr></argument>)</argument_list></call> <operator pos:start="347:38" pos:end="347:39">&gt;=</operator> <name pos:start="347:41" pos:end="347:46">MAX_FD</name></expr>)</condition> <block pos:start="347:49" pos:end="353:5">{<block_content pos:start="349:9" pos:end="351:16">

        <expr_stmt pos:start="349:9" pos:end="349:58"><expr pos:start="349:9" pos:end="349:57"><call pos:start="349:9" pos:end="349:57"><name pos:start="349:9" pos:end="349:15">fprintf</name><argument_list pos:start="349:16" pos:end="349:57">(<argument pos:start="349:17" pos:end="349:22"><expr pos:start="349:17" pos:end="349:22"><name pos:start="349:17" pos:end="349:22">stderr</name></expr></argument>, <argument pos:start="349:25" pos:end="349:56"><expr pos:start="349:25" pos:end="349:56"><literal type="string" pos:start="349:25" pos:end="349:56">"qemu: too many floppy drives\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:16"><expr pos:start="351:9" pos:end="351:15"><call pos:start="351:9" pos:end="351:15"><name pos:start="351:9" pos:end="351:12">exit</name><argument_list pos:start="351:13" pos:end="351:15">(<argument pos:start="351:14" pos:end="351:14"><expr pos:start="351:14" pos:end="351:14"><literal type="number" pos:start="351:14" pos:end="351:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="355:5" pos:end="359:5">for <control pos:start="355:9" pos:end="355:32">(<init pos:start="355:10" pos:end="355:15"><expr pos:start="355:10" pos:end="355:14"><name pos:start="355:10" pos:end="355:10">n</name> <operator pos:start="355:12" pos:end="355:12">=</operator> <literal type="number" pos:start="355:14" pos:end="355:14">0</literal></expr>;</init> <condition pos:start="355:17" pos:end="355:27"><expr pos:start="355:17" pos:end="355:26"><name pos:start="355:17" pos:end="355:17">n</name> <operator pos:start="355:19" pos:end="355:19">&lt;</operator> <name pos:start="355:21" pos:end="355:26">MAX_FD</name></expr>;</condition> <incr pos:start="355:29" pos:end="355:31"><expr pos:start="355:29" pos:end="355:31"><name pos:start="355:29" pos:end="355:29">n</name><operator pos:start="355:30" pos:end="355:31">++</operator></expr></incr>)</control> <block pos:start="355:34" pos:end="359:5">{<block_content pos:start="357:9" pos:end="357:44">

        <expr_stmt pos:start="357:9" pos:end="357:44"><expr pos:start="357:9" pos:end="357:43"><name pos:start="357:9" pos:end="357:14"><name pos:start="357:9" pos:end="357:11">fds</name><index pos:start="357:12" pos:end="357:14">[<expr pos:start="357:13" pos:end="357:13"><name pos:start="357:13" pos:end="357:13">n</name></expr>]</index></name> <operator pos:start="357:16" pos:end="357:16">=</operator> <call pos:start="357:18" pos:end="357:43"><name pos:start="357:18" pos:end="357:26">drive_get</name><argument_list pos:start="357:27" pos:end="357:43">(<argument pos:start="357:28" pos:end="357:36"><expr pos:start="357:28" pos:end="357:36"><name pos:start="357:28" pos:end="357:36">IF_FLOPPY</name></expr></argument>, <argument pos:start="357:39" pos:end="357:39"><expr pos:start="357:39" pos:end="357:39"><literal type="number" pos:start="357:39" pos:end="357:39">0</literal></expr></argument>, <argument pos:start="357:42" pos:end="357:42"><expr pos:start="357:42" pos:end="357:42"><name pos:start="357:42" pos:end="357:42">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="361:5" pos:end="361:72"><expr pos:start="361:5" pos:end="361:71"><call pos:start="361:5" pos:end="361:71"><name pos:start="361:5" pos:end="361:22">fdctrl_init_sysbus</name><argument_list pos:start="361:23" pos:end="361:71">(<argument pos:start="361:24" pos:end="361:50"><expr pos:start="361:24" pos:end="361:50"><call pos:start="361:24" pos:end="361:50"><name pos:start="361:24" pos:end="361:39">qdev_get_gpio_in</name><argument_list pos:start="361:40" pos:end="361:50">(<argument pos:start="361:41" pos:end="361:46"><expr pos:start="361:41" pos:end="361:46"><name pos:start="361:41" pos:end="361:46">rc4030</name></expr></argument>, <argument pos:start="361:49" pos:end="361:49"><expr pos:start="361:49" pos:end="361:49"><literal type="number" pos:start="361:49" pos:end="361:49">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="361:53" pos:end="361:53"><expr pos:start="361:53" pos:end="361:53"><literal type="number" pos:start="361:53" pos:end="361:53">0</literal></expr></argument>, <argument pos:start="361:56" pos:end="361:65"><expr pos:start="361:56" pos:end="361:65"><literal type="number" pos:start="361:56" pos:end="361:65">0x80003000</literal></expr></argument>, <argument pos:start="361:68" pos:end="361:70"><expr pos:start="361:68" pos:end="361:70"><name pos:start="361:68" pos:end="361:70">fds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="365:5" pos:end="365:25">/* Real time clock */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:34"><expr pos:start="367:5" pos:end="367:33"><call pos:start="367:5" pos:end="367:33"><name pos:start="367:5" pos:end="367:12">rtc_init</name><argument_list pos:start="367:13" pos:end="367:33">(<argument pos:start="367:14" pos:end="367:20"><expr pos:start="367:14" pos:end="367:20"><name pos:start="367:14" pos:end="367:20">isa_bus</name></expr></argument>, <argument pos:start="367:23" pos:end="367:26"><expr pos:start="367:23" pos:end="367:26"><literal type="number" pos:start="367:23" pos:end="367:26">1980</literal></expr></argument>, <argument pos:start="367:29" pos:end="367:32"><expr pos:start="367:29" pos:end="367:32"><name pos:start="367:29" pos:end="367:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:68"><expr pos:start="369:5" pos:end="369:67"><call pos:start="369:5" pos:end="369:67"><name pos:start="369:5" pos:end="369:25">memory_region_init_io</name><argument_list pos:start="369:26" pos:end="369:67">(<argument pos:start="369:27" pos:end="369:29"><expr pos:start="369:27" pos:end="369:29"><name pos:start="369:27" pos:end="369:29">rtc</name></expr></argument>, <argument pos:start="369:32" pos:end="369:35"><expr pos:start="369:32" pos:end="369:35"><name pos:start="369:32" pos:end="369:35">NULL</name></expr></argument>, <argument pos:start="369:38" pos:end="369:45"><expr pos:start="369:38" pos:end="369:45"><operator pos:start="369:38" pos:end="369:38">&amp;</operator><name pos:start="369:39" pos:end="369:45">rtc_ops</name></expr></argument>, <argument pos:start="369:48" pos:end="369:51"><expr pos:start="369:48" pos:end="369:51"><name pos:start="369:48" pos:end="369:51">NULL</name></expr></argument>, <argument pos:start="369:54" pos:end="369:58"><expr pos:start="369:54" pos:end="369:58"><literal type="string" pos:start="369:54" pos:end="369:58">"rtc"</literal></expr></argument>, <argument pos:start="369:61" pos:end="369:66"><expr pos:start="369:61" pos:end="369:66"><literal type="number" pos:start="369:61" pos:end="369:66">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="371:5" pos:end="371:64"><expr pos:start="371:5" pos:end="371:63"><call pos:start="371:5" pos:end="371:63"><name pos:start="371:5" pos:end="371:31">memory_region_add_subregion</name><argument_list pos:start="371:32" pos:end="371:63">(<argument pos:start="371:33" pos:end="371:45"><expr pos:start="371:33" pos:end="371:45"><name pos:start="371:33" pos:end="371:45">address_space</name></expr></argument>, <argument pos:start="371:48" pos:end="371:57"><expr pos:start="371:48" pos:end="371:57"><literal type="number" pos:start="371:48" pos:end="371:57">0x80004000</literal></expr></argument>, <argument pos:start="371:60" pos:end="371:62"><expr pos:start="371:60" pos:end="371:62"><name pos:start="371:60" pos:end="371:62">rtc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="375:5" pos:end="375:26">/* Keyboard (i8042) */</comment>

    <expr_stmt pos:start="377:5" pos:end="379:38"><expr pos:start="377:5" pos:end="379:37"><call pos:start="377:5" pos:end="379:37"><name pos:start="377:5" pos:end="377:17">i8042_mm_init</name><argument_list pos:start="377:18" pos:end="379:37">(<argument pos:start="377:19" pos:end="377:45"><expr pos:start="377:19" pos:end="377:45"><call pos:start="377:19" pos:end="377:45"><name pos:start="377:19" pos:end="377:34">qdev_get_gpio_in</name><argument_list pos:start="377:35" pos:end="377:45">(<argument pos:start="377:36" pos:end="377:41"><expr pos:start="377:36" pos:end="377:41"><name pos:start="377:36" pos:end="377:41">rc4030</name></expr></argument>, <argument pos:start="377:44" pos:end="377:44"><expr pos:start="377:44" pos:end="377:44"><literal type="number" pos:start="377:44" pos:end="377:44">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="377:48" pos:end="377:74"><expr pos:start="377:48" pos:end="377:74"><call pos:start="377:48" pos:end="377:74"><name pos:start="377:48" pos:end="377:63">qdev_get_gpio_in</name><argument_list pos:start="377:64" pos:end="377:74">(<argument pos:start="377:65" pos:end="377:70"><expr pos:start="377:65" pos:end="377:70"><name pos:start="377:65" pos:end="377:70">rc4030</name></expr></argument>, <argument pos:start="377:73" pos:end="377:73"><expr pos:start="377:73" pos:end="377:73"><literal type="number" pos:start="377:73" pos:end="377:73">7</literal></expr></argument>)</argument_list></call></expr></argument>,

                  <argument pos:start="379:19" pos:end="379:23"><expr pos:start="379:19" pos:end="379:23"><name pos:start="379:19" pos:end="379:23">i8042</name></expr></argument>, <argument pos:start="379:26" pos:end="379:31"><expr pos:start="379:26" pos:end="379:31"><literal type="number" pos:start="379:26" pos:end="379:31">0x1000</literal></expr></argument>, <argument pos:start="379:34" pos:end="379:36"><expr pos:start="379:34" pos:end="379:36"><literal type="number" pos:start="379:34" pos:end="379:36">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="381:66"><expr pos:start="381:5" pos:end="381:65"><call pos:start="381:5" pos:end="381:65"><name pos:start="381:5" pos:end="381:31">memory_region_add_subregion</name><argument_list pos:start="381:32" pos:end="381:65">(<argument pos:start="381:33" pos:end="381:45"><expr pos:start="381:33" pos:end="381:45"><name pos:start="381:33" pos:end="381:45">address_space</name></expr></argument>, <argument pos:start="381:48" pos:end="381:57"><expr pos:start="381:48" pos:end="381:57"><literal type="number" pos:start="381:48" pos:end="381:57">0x80005000</literal></expr></argument>, <argument pos:start="381:60" pos:end="381:64"><expr pos:start="381:60" pos:end="381:64"><name pos:start="381:60" pos:end="381:64">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="385:5" pos:end="385:22">/* Serial ports */</comment>

    <if_stmt pos:start="387:5" pos:end="395:5"><if pos:start="387:5" pos:end="395:5">if <condition pos:start="387:8" pos:end="387:22">(<expr pos:start="387:9" pos:end="387:21"><name pos:start="387:9" pos:end="387:21"><name pos:start="387:9" pos:end="387:18">serial_hds</name><index pos:start="387:19" pos:end="387:21">[<expr pos:start="387:20" pos:end="387:20"><literal type="number" pos:start="387:20" pos:end="387:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="387:24" pos:end="395:5">{<block_content pos:start="389:9" pos:end="393:60">

        <expr_stmt pos:start="389:9" pos:end="393:60"><expr pos:start="389:9" pos:end="393:59"><call pos:start="389:9" pos:end="393:59"><name pos:start="389:9" pos:end="389:22">serial_mm_init</name><argument_list pos:start="389:23" pos:end="393:59">(<argument pos:start="389:24" pos:end="389:36"><expr pos:start="389:24" pos:end="389:36"><name pos:start="389:24" pos:end="389:36">address_space</name></expr></argument>, <argument pos:start="389:39" pos:end="389:48"><expr pos:start="389:39" pos:end="389:48"><literal type="number" pos:start="389:39" pos:end="389:48">0x80006000</literal></expr></argument>, <argument pos:start="389:51" pos:end="389:51"><expr pos:start="389:51" pos:end="389:51"><literal type="number" pos:start="389:51" pos:end="389:51">0</literal></expr></argument>,

                       <argument pos:start="391:24" pos:end="391:50"><expr pos:start="391:24" pos:end="391:50"><call pos:start="391:24" pos:end="391:50"><name pos:start="391:24" pos:end="391:39">qdev_get_gpio_in</name><argument_list pos:start="391:40" pos:end="391:50">(<argument pos:start="391:41" pos:end="391:46"><expr pos:start="391:41" pos:end="391:46"><name pos:start="391:41" pos:end="391:46">rc4030</name></expr></argument>, <argument pos:start="391:49" pos:end="391:49"><expr pos:start="391:49" pos:end="391:49"><literal type="number" pos:start="391:49" pos:end="391:49">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="391:53" pos:end="391:62"><expr pos:start="391:53" pos:end="391:62"><literal type="number" pos:start="391:53" pos:end="391:59">8000000</literal><operator pos:start="391:60" pos:end="391:60">/</operator><literal type="number" pos:start="391:61" pos:end="391:62">16</literal></expr></argument>,

                       <argument pos:start="393:24" pos:end="393:36"><expr pos:start="393:24" pos:end="393:36"><name pos:start="393:24" pos:end="393:36"><name pos:start="393:24" pos:end="393:33">serial_hds</name><index pos:start="393:34" pos:end="393:36">[<expr pos:start="393:35" pos:end="393:35"><literal type="number" pos:start="393:35" pos:end="393:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="393:39" pos:end="393:58"><expr pos:start="393:39" pos:end="393:58"><name pos:start="393:39" pos:end="393:58">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="397:5" pos:end="405:5"><if pos:start="397:5" pos:end="405:5">if <condition pos:start="397:8" pos:end="397:22">(<expr pos:start="397:9" pos:end="397:21"><name pos:start="397:9" pos:end="397:21"><name pos:start="397:9" pos:end="397:18">serial_hds</name><index pos:start="397:19" pos:end="397:21">[<expr pos:start="397:20" pos:end="397:20"><literal type="number" pos:start="397:20" pos:end="397:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="397:24" pos:end="405:5">{<block_content pos:start="399:9" pos:end="403:60">

        <expr_stmt pos:start="399:9" pos:end="403:60"><expr pos:start="399:9" pos:end="403:59"><call pos:start="399:9" pos:end="403:59"><name pos:start="399:9" pos:end="399:22">serial_mm_init</name><argument_list pos:start="399:23" pos:end="403:59">(<argument pos:start="399:24" pos:end="399:36"><expr pos:start="399:24" pos:end="399:36"><name pos:start="399:24" pos:end="399:36">address_space</name></expr></argument>, <argument pos:start="399:39" pos:end="399:48"><expr pos:start="399:39" pos:end="399:48"><literal type="number" pos:start="399:39" pos:end="399:48">0x80007000</literal></expr></argument>, <argument pos:start="399:51" pos:end="399:51"><expr pos:start="399:51" pos:end="399:51"><literal type="number" pos:start="399:51" pos:end="399:51">0</literal></expr></argument>,

                       <argument pos:start="401:24" pos:end="401:50"><expr pos:start="401:24" pos:end="401:50"><call pos:start="401:24" pos:end="401:50"><name pos:start="401:24" pos:end="401:39">qdev_get_gpio_in</name><argument_list pos:start="401:40" pos:end="401:50">(<argument pos:start="401:41" pos:end="401:46"><expr pos:start="401:41" pos:end="401:46"><name pos:start="401:41" pos:end="401:46">rc4030</name></expr></argument>, <argument pos:start="401:49" pos:end="401:49"><expr pos:start="401:49" pos:end="401:49"><literal type="number" pos:start="401:49" pos:end="401:49">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="401:53" pos:end="401:62"><expr pos:start="401:53" pos:end="401:62"><literal type="number" pos:start="401:53" pos:end="401:59">8000000</literal><operator pos:start="401:60" pos:end="401:60">/</operator><literal type="number" pos:start="401:61" pos:end="401:62">16</literal></expr></argument>,

                       <argument pos:start="403:24" pos:end="403:36"><expr pos:start="403:24" pos:end="403:36"><name pos:start="403:24" pos:end="403:36"><name pos:start="403:24" pos:end="403:33">serial_hds</name><index pos:start="403:34" pos:end="403:36">[<expr pos:start="403:35" pos:end="403:35"><literal type="number" pos:start="403:35" pos:end="403:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="403:39" pos:end="403:58"><expr pos:start="403:39" pos:end="403:58"><name pos:start="403:39" pos:end="403:58">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="409:5" pos:end="409:23">/* Parallel port */</comment>

    <if_stmt pos:start="411:5" pos:end="415:71"><if pos:start="411:5" pos:end="415:71">if <condition pos:start="411:8" pos:end="411:24">(<expr pos:start="411:9" pos:end="411:23"><name pos:start="411:9" pos:end="411:23"><name pos:start="411:9" pos:end="411:20">parallel_hds</name><index pos:start="411:21" pos:end="411:23">[<expr pos:start="411:22" pos:end="411:22"><literal type="number" pos:start="411:22" pos:end="411:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="413:9" pos:end="415:71"><block_content pos:start="413:9" pos:end="415:71">

        <expr_stmt pos:start="413:9" pos:end="415:71"><expr pos:start="413:9" pos:end="415:70"><call pos:start="413:9" pos:end="415:70"><name pos:start="413:9" pos:end="413:24">parallel_mm_init</name><argument_list pos:start="413:25" pos:end="415:70">(<argument pos:start="413:26" pos:end="413:38"><expr pos:start="413:26" pos:end="413:38"><name pos:start="413:26" pos:end="413:38">address_space</name></expr></argument>, <argument pos:start="413:41" pos:end="413:50"><expr pos:start="413:41" pos:end="413:50"><literal type="number" pos:start="413:41" pos:end="413:50">0x80008000</literal></expr></argument>, <argument pos:start="413:53" pos:end="413:53"><expr pos:start="413:53" pos:end="413:53"><literal type="number" pos:start="413:53" pos:end="413:53">0</literal></expr></argument>,

                         <argument pos:start="415:26" pos:end="415:52"><expr pos:start="415:26" pos:end="415:52"><call pos:start="415:26" pos:end="415:52"><name pos:start="415:26" pos:end="415:41">qdev_get_gpio_in</name><argument_list pos:start="415:42" pos:end="415:52">(<argument pos:start="415:43" pos:end="415:48"><expr pos:start="415:43" pos:end="415:48"><name pos:start="415:43" pos:end="415:48">rc4030</name></expr></argument>, <argument pos:start="415:51" pos:end="415:51"><expr pos:start="415:51" pos:end="415:51"><literal type="number" pos:start="415:51" pos:end="415:51">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="415:55" pos:end="415:69"><expr pos:start="415:55" pos:end="415:69"><name pos:start="415:55" pos:end="415:69"><name pos:start="415:55" pos:end="415:66">parallel_hds</name><index pos:start="415:67" pos:end="415:69">[<expr pos:start="415:68" pos:end="415:68"><literal type="number" pos:start="415:68" pos:end="415:68">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="419:5" pos:end="419:60">/* FIXME: missing Jazz sound at 0x8000c000, rc4030[2] */</comment>



    <comment type="block" pos:start="423:5" pos:end="423:15">/* NVRAM */</comment>

    <expr_stmt pos:start="425:5" pos:end="425:39"><expr pos:start="425:5" pos:end="425:38"><name pos:start="425:5" pos:end="425:7">dev</name> <operator pos:start="425:9" pos:end="425:9">=</operator> <call pos:start="425:11" pos:end="425:38"><name pos:start="425:11" pos:end="425:21">qdev_create</name><argument_list pos:start="425:22" pos:end="425:38">(<argument pos:start="425:23" pos:end="425:26"><expr pos:start="425:23" pos:end="425:26"><name pos:start="425:23" pos:end="425:26">NULL</name></expr></argument>, <argument pos:start="425:29" pos:end="425:37"><expr pos:start="425:29" pos:end="425:37"><literal type="string" pos:start="425:29" pos:end="425:37">"ds1225y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:26"><expr pos:start="427:5" pos:end="427:25"><call pos:start="427:5" pos:end="427:25"><name pos:start="427:5" pos:end="427:20">qdev_init_nofail</name><argument_list pos:start="427:21" pos:end="427:25">(<argument pos:start="427:22" pos:end="427:24"><expr pos:start="427:22" pos:end="427:24"><name pos:start="427:22" pos:end="427:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:33"><expr pos:start="429:5" pos:end="429:32"><name pos:start="429:5" pos:end="429:10">sysbus</name> <operator pos:start="429:12" pos:end="429:12">=</operator> <call pos:start="429:14" pos:end="429:32"><name pos:start="429:14" pos:end="429:27">SYS_BUS_DEVICE</name><argument_list pos:start="429:28" pos:end="429:32">(<argument pos:start="429:29" pos:end="429:31"><expr pos:start="429:29" pos:end="429:31"><name pos:start="429:29" pos:end="429:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:43"><expr pos:start="431:5" pos:end="431:42"><call pos:start="431:5" pos:end="431:42"><name pos:start="431:5" pos:end="431:19">sysbus_mmio_map</name><argument_list pos:start="431:20" pos:end="431:42">(<argument pos:start="431:21" pos:end="431:26"><expr pos:start="431:21" pos:end="431:26"><name pos:start="431:21" pos:end="431:26">sysbus</name></expr></argument>, <argument pos:start="431:29" pos:end="431:29"><expr pos:start="431:29" pos:end="431:29"><literal type="number" pos:start="431:29" pos:end="431:29">0</literal></expr></argument>, <argument pos:start="431:32" pos:end="431:41"><expr pos:start="431:32" pos:end="431:41"><literal type="number" pos:start="431:32" pos:end="431:41">0x80009000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="435:5" pos:end="435:23">/* LED indicator */</comment>

    <expr_stmt pos:start="437:5" pos:end="437:55"><expr pos:start="437:5" pos:end="437:54"><call pos:start="437:5" pos:end="437:54"><name pos:start="437:5" pos:end="437:24">sysbus_create_simple</name><argument_list pos:start="437:25" pos:end="437:54">(<argument pos:start="437:26" pos:end="437:35"><expr pos:start="437:26" pos:end="437:35"><literal type="string" pos:start="437:26" pos:end="437:35">"jazz-led"</literal></expr></argument>, <argument pos:start="437:38" pos:end="437:47"><expr pos:start="437:38" pos:end="437:47"><literal type="number" pos:start="437:38" pos:end="437:47">0x8000f000</literal></expr></argument>, <argument pos:start="437:50" pos:end="437:53"><expr pos:start="437:50" pos:end="437:53"><name pos:start="437:50" pos:end="437:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
