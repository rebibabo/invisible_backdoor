<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3833.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">memcard_write</name><parameter_list pos:start="1:26" pos:end="3:40">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:30">void</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">opaque</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:63"><decl pos:start="1:41" pos:end="1:63"><type pos:start="1:41" pos:end="1:63"><name pos:start="1:41" pos:end="1:58">target_phys_addr_t</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:79"><decl pos:start="1:66" pos:end="1:79"><type pos:start="1:66" pos:end="1:79"><name pos:start="1:66" pos:end="1:73">uint64_t</name></type> <name pos:start="1:75" pos:end="1:79">value</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:39"><decl pos:start="3:27" pos:end="3:39"><type pos:start="3:27" pos:end="3:39"><name pos:start="3:27" pos:end="3:34">unsigned</name></type> <name pos:start="3:36" pos:end="3:39">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="103:1">{<block_content pos:start="7:5" pos:end="101:5">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">MilkymistMemcardState</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:28">s</name> <init pos:start="7:30" pos:end="7:37">= <expr pos:start="7:32" pos:end="7:37"><name pos:start="7:32" pos:end="7:37">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:54"><expr pos:start="11:5" pos:end="11:53"><call pos:start="11:5" pos:end="11:53"><name pos:start="11:5" pos:end="11:40">trace_milkymist_memcard_memory_write</name><argument_list pos:start="11:41" pos:end="11:53">(<argument pos:start="11:42" pos:end="11:45"><expr pos:start="11:42" pos:end="11:45"><name pos:start="11:42" pos:end="11:45">addr</name></expr></argument>, <argument pos:start="11:48" pos:end="11:52"><expr pos:start="11:48" pos:end="11:52"><name pos:start="11:48" pos:end="11:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:12">&gt;&gt;=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">2</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="101:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="101:5">{<block_content pos:start="19:5" pos:end="99:14">

    <case pos:start="19:5" pos:end="19:19">case <expr pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:18">R_PENDING</name></expr>:</case>

        <comment type="block" pos:start="21:9" pos:end="21:35">/* clear rx pending bits */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:75"><expr pos:start="23:9" pos:end="23:74"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:15">regs</name><index pos:start="23:16" pos:end="23:26">[<expr pos:start="23:17" pos:end="23:25"><name pos:start="23:17" pos:end="23:25">R_PENDING</name></expr>]</index></name> <operator pos:start="23:28" pos:end="23:29">&amp;=</operator> <operator pos:start="23:31" pos:end="23:31">~</operator><operator pos:start="23:32" pos:end="23:32">(</operator><name pos:start="23:33" pos:end="23:37">value</name> <operator pos:start="23:39" pos:end="23:39">&amp;</operator> <operator pos:start="23:41" pos:end="23:41">(</operator><name pos:start="23:42" pos:end="23:55">PENDING_CMD_RX</name> <operator pos:start="23:57" pos:end="23:57">|</operator> <name pos:start="23:59" pos:end="23:72">PENDING_DAT_RX</name><operator pos:start="23:73" pos:end="23:73">)</operator><operator pos:start="23:74" pos:end="23:74">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><call pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:27">update_pending_bits</name><argument_list pos:start="25:28" pos:end="25:30">(<argument pos:start="25:29" pos:end="25:29"><expr pos:start="25:29" pos:end="25:29"><name pos:start="25:29" pos:end="25:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:15">case <expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:14">R_CMD</name></expr>:</case>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:23"><name pos:start="31:14" pos:end="31:14">s</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:23">enabled</name></name></expr>)</condition> <block pos:start="31:26" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:18">

            <break pos:start="33:13" pos:end="33:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:31">(<expr pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:30">ignore_next_cmd</name></name></expr>)</condition> <block pos:start="37:33" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:18">

            <expr_stmt pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:30">ignore_next_cmd</name></name> <operator pos:start="39:32" pos:end="39:32">=</operator> <literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:56"><expr pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">command</name><index pos:start="45:19" pos:end="45:40">[<expr pos:start="45:20" pos:end="45:39"><name pos:start="45:20" pos:end="45:39"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:39">command_write_ptr</name></name></expr>]</index></name> <operator pos:start="45:42" pos:end="45:42">=</operator> <name pos:start="45:44" pos:end="45:48">value</name> <operator pos:start="45:50" pos:end="45:50">&amp;</operator> <literal type="number" pos:start="45:52" pos:end="45:55">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:62"><expr pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:28">command_write_ptr</name></name> <operator pos:start="47:30" pos:end="47:30">=</operator> <operator pos:start="47:32" pos:end="47:32">(</operator><name pos:start="47:33" pos:end="47:52"><name pos:start="47:33" pos:end="47:33">s</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:52">command_write_ptr</name></name> <operator pos:start="47:54" pos:end="47:54">+</operator> <literal type="number" pos:start="47:56" pos:end="47:56">1</literal><operator pos:start="47:57" pos:end="47:57">)</operator> <operator pos:start="47:59" pos:end="47:59">%</operator> <literal type="number" pos:start="47:61" pos:end="47:61">6</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:38">(<expr pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:32">command_write_ptr</name></name> <operator pos:start="49:34" pos:end="49:35">==</operator> <literal type="number" pos:start="49:37" pos:end="49:37">0</literal></expr>)</condition> <block pos:start="49:40" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:34">

            <expr_stmt pos:start="51:13" pos:end="51:34"><expr pos:start="51:13" pos:end="51:33"><call pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:30">memcard_sd_command</name><argument_list pos:start="51:31" pos:end="51:33">(<argument pos:start="51:32" pos:end="51:32"><expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:15">case <expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:14">R_DAT</name></expr>:</case>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:24">(<expr pos:start="59:13" pos:end="59:23"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:23"><name pos:start="59:14" pos:end="59:14">s</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:23">enabled</name></name></expr>)</condition> <block pos:start="59:26" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:53"><expr pos:start="65:9" pos:end="65:52"><call pos:start="65:9" pos:end="65:52"><name pos:start="65:9" pos:end="65:21">sd_write_data</name><argument_list pos:start="65:22" pos:end="65:52">(<argument pos:start="65:23" pos:end="65:29"><expr pos:start="65:23" pos:end="65:29"><name pos:start="65:23" pos:end="65:29"><name pos:start="65:23" pos:end="65:23">s</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:29">card</name></name></expr></argument>, <argument pos:start="65:32" pos:end="65:51"><expr pos:start="65:32" pos:end="65:51"><operator pos:start="65:32" pos:end="65:32">(</operator><name pos:start="65:33" pos:end="65:37">value</name> <operator pos:start="65:39" pos:end="65:40">&gt;&gt;</operator> <literal type="number" pos:start="65:42" pos:end="65:43">24</literal><operator pos:start="65:44" pos:end="65:44">)</operator> <operator pos:start="65:46" pos:end="65:46">&amp;</operator> <literal type="number" pos:start="65:48" pos:end="65:51">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:53"><expr pos:start="67:9" pos:end="67:52"><call pos:start="67:9" pos:end="67:52"><name pos:start="67:9" pos:end="67:21">sd_write_data</name><argument_list pos:start="67:22" pos:end="67:52">(<argument pos:start="67:23" pos:end="67:29"><expr pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:23">s</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:29">card</name></name></expr></argument>, <argument pos:start="67:32" pos:end="67:51"><expr pos:start="67:32" pos:end="67:51"><operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:37">value</name> <operator pos:start="67:39" pos:end="67:40">&gt;&gt;</operator> <literal type="number" pos:start="67:42" pos:end="67:43">16</literal><operator pos:start="67:44" pos:end="67:44">)</operator> <operator pos:start="67:46" pos:end="67:46">&amp;</operator> <literal type="number" pos:start="67:48" pos:end="67:51">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:52"><expr pos:start="69:9" pos:end="69:51"><call pos:start="69:9" pos:end="69:51"><name pos:start="69:9" pos:end="69:21">sd_write_data</name><argument_list pos:start="69:22" pos:end="69:51">(<argument pos:start="69:23" pos:end="69:29"><expr pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:29"><name pos:start="69:23" pos:end="69:23">s</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:29">card</name></name></expr></argument>, <argument pos:start="69:32" pos:end="69:50"><expr pos:start="69:32" pos:end="69:50"><operator pos:start="69:32" pos:end="69:32">(</operator><name pos:start="69:33" pos:end="69:37">value</name> <operator pos:start="69:39" pos:end="69:40">&gt;&gt;</operator> <literal type="number" pos:start="69:42" pos:end="69:42">8</literal><operator pos:start="69:43" pos:end="69:43">)</operator> <operator pos:start="69:45" pos:end="69:45">&amp;</operator> <literal type="number" pos:start="69:47" pos:end="69:50">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:21">sd_write_data</name><argument_list pos:start="71:22" pos:end="71:44">(<argument pos:start="71:23" pos:end="71:29"><expr pos:start="71:23" pos:end="71:29"><name pos:start="71:23" pos:end="71:29"><name pos:start="71:23" pos:end="71:23">s</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:29">card</name></name></expr></argument>, <argument pos:start="71:32" pos:end="71:43"><expr pos:start="71:32" pos:end="71:43"><name pos:start="71:32" pos:end="71:36">value</name> <operator pos:start="71:38" pos:end="71:38">&amp;</operator> <literal type="number" pos:start="71:40" pos:end="71:43">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:18">case <expr pos:start="75:10" pos:end="75:17"><name pos:start="75:10" pos:end="75:17">R_ENABLE</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:15">regs</name><index pos:start="77:16" pos:end="77:21">[<expr pos:start="77:17" pos:end="77:20"><name pos:start="77:17" pos:end="77:20">addr</name></expr>]</index></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:29">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><call pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:27">update_pending_bits</name><argument_list pos:start="79:28" pos:end="79:30">(<argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><name pos:start="79:29" pos:end="79:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:20">case <expr pos:start="83:10" pos:end="83:19"><name pos:start="83:10" pos:end="83:19">R_CLK2XDIV</name></expr>:</case>

    <case pos:start="85:5" pos:end="85:17">case <expr pos:start="85:10" pos:end="85:16"><name pos:start="85:10" pos:end="85:16">R_START</name></expr>:</case>

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:15">regs</name><index pos:start="87:16" pos:end="87:21">[<expr pos:start="87:17" pos:end="87:20"><name pos:start="87:17" pos:end="87:20">addr</name></expr>]</index></name> <operator pos:start="87:23" pos:end="87:23">=</operator> <name pos:start="87:25" pos:end="87:29">value</name></expr>;</expr_stmt>

        <break pos:start="89:9" pos:end="89:14">break;</break>



    <default pos:start="93:5" pos:end="93:12">default:</default>

        <expr_stmt pos:start="95:9" pos:end="97:43"><expr pos:start="95:9" pos:end="97:42"><call pos:start="95:9" pos:end="97:42"><name pos:start="95:9" pos:end="95:20">error_report</name><argument_list pos:start="95:21" pos:end="97:42">(<argument pos:start="95:22" pos:end="97:30"><expr pos:start="95:22" pos:end="97:30"><literal type="string" pos:start="95:22" pos:end="95:77">"milkymist_memcard: write access to unknown register 0x"</literal>

                <name pos:start="97:17" pos:end="97:30">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="97:33" pos:end="97:41"><expr pos:start="97:33" pos:end="97:41"><name pos:start="97:33" pos:end="97:36">addr</name> <operator pos:start="97:38" pos:end="97:39">&lt;&lt;</operator> <literal type="number" pos:start="97:41" pos:end="97:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
