<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7628.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:15">init</name><parameter_list pos:start="1:16" pos:end="1:55">(<parameter pos:start="1:17" pos:end="1:36"><decl pos:start="1:17" pos:end="1:36"><type pos:start="1:17" pos:end="1:36"><name pos:start="1:17" pos:end="1:31">AVFilterContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">ctx</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:54"><decl pos:start="1:39" pos:end="1:54"><type pos:start="1:39" pos:end="1:54"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:48">char</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">args</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="51:15">{<block_content pos:start="3:5" pos:end="51:15">
    <decl_stmt pos:start="3:5" pos:end="3:34"><decl pos:start="3:5" pos:end="3:33"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:15">EvalContext</name> <modifier pos:start="3:17" pos:end="3:17">*</modifier></type><name pos:start="3:18" pos:end="3:21">eval</name> <init pos:start="3:23" pos:end="3:33">= <expr pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:27">ctx</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:33">priv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:34"><decl pos:start="4:5" pos:end="4:33"><type pos:start="4:5" pos:end="4:10"><name pos:start="4:5" pos:end="4:8">char</name> <modifier pos:start="4:10" pos:end="4:10">*</modifier></type><name pos:start="4:11" pos:end="4:15">args1</name> <init pos:start="4:17" pos:end="4:33">= <expr pos:start="4:19" pos:end="4:33"><call pos:start="4:19" pos:end="4:33"><name pos:start="4:19" pos:end="4:27">av_strdup</name><argument_list pos:start="4:28" pos:end="4:33">(<argument pos:start="4:29" pos:end="4:32"><expr pos:start="4:29" pos:end="4:32"><name pos:start="4:29" pos:end="4:32">args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:14">expr</name></decl>, <decl pos:start="5:17" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:10"><modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">buf</name></decl>, <decl pos:start="5:23" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:10"><modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:29">bufptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:15"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>, <decl pos:start="6:14" pos:end="6:14"><type ref="prev" pos:start="6:5" pos:end="6:7"/><name pos:start="6:14" pos:end="6:14">i</name></decl>;</decl_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:34"><expr pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:8">eval</name><operator pos:start="7:9" pos:end="7:10">-&gt;</operator><name pos:start="7:11" pos:end="7:15">class</name></name> <operator pos:start="7:17" pos:end="7:17">=</operator> <operator pos:start="7:19" pos:end="7:19">&amp;</operator><name pos:start="7:20" pos:end="7:33">aevalsrc_class</name></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:30"><expr pos:start="8:5" pos:end="8:29"><call pos:start="8:5" pos:end="8:29"><name pos:start="8:5" pos:end="8:23">av_opt_set_defaults</name><argument_list pos:start="8:24" pos:end="8:29">(<argument pos:start="8:25" pos:end="8:28"><expr pos:start="8:25" pos:end="8:28"><name pos:start="8:25" pos:end="8:28">eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:27">/* parse expressions */</comment>
    <expr_stmt pos:start="10:5" pos:end="10:16"><expr pos:start="10:5" pos:end="10:15"><name pos:start="10:5" pos:end="10:7">buf</name> <operator pos:start="10:9" pos:end="10:9">=</operator> <name pos:start="10:11" pos:end="10:15">args1</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:10"><expr pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:5">i</name> <operator pos:start="11:7" pos:end="11:7">=</operator> <literal type="number" pos:start="11:9" pos:end="11:9">0</literal></expr>;</expr_stmt>
    <while pos:start="12:5" pos:end="51:15">while <condition pos:start="12:11" pos:end="12:47">(<expr pos:start="12:12" pos:end="12:46"><name pos:start="12:12" pos:end="12:15">expr</name> <operator pos:start="12:17" pos:end="12:17">=</operator> <call pos:start="12:19" pos:end="12:46"><name pos:start="12:19" pos:end="12:27">av_strtok</name><argument_list pos:start="12:28" pos:end="12:46">(<argument pos:start="12:29" pos:end="12:31"><expr pos:start="12:29" pos:end="12:31"><name pos:start="12:29" pos:end="12:31">buf</name></expr></argument>, <argument pos:start="12:34" pos:end="12:36"><expr pos:start="12:34" pos:end="12:36"><literal type="string" pos:start="12:34" pos:end="12:36">":"</literal></expr></argument>, <argument pos:start="12:39" pos:end="12:45"><expr pos:start="12:39" pos:end="12:45"><operator pos:start="12:39" pos:end="12:39">&amp;</operator><name pos:start="12:40" pos:end="12:45">bufptr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="12:49" pos:end="51:15">{<block_content pos:start="13:9" pos:end="51:15">
        <expr_stmt pos:start="13:9" pos:end="14:60"><expr pos:start="13:9" pos:end="14:59"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="14:59"><name pos:start="13:15" pos:end="13:27">av_expr_parse</name><argument_list pos:start="13:28" pos:end="14:59">(<argument pos:start="13:29" pos:end="13:42"><expr pos:start="13:29" pos:end="13:42"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:42"><name pos:start="13:30" pos:end="13:33">eval</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:39">expr</name><index pos:start="13:40" pos:end="13:42">[<expr pos:start="13:41" pos:end="13:41"><name pos:start="13:41" pos:end="13:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="13:45" pos:end="13:48"><expr pos:start="13:45" pos:end="13:48"><name pos:start="13:45" pos:end="13:48">expr</name></expr></argument>, <argument pos:start="13:51" pos:end="13:59"><expr pos:start="13:51" pos:end="13:59"><name pos:start="13:51" pos:end="13:59">var_names</name></expr></argument>,
                            <argument pos:start="14:29" pos:end="14:32"><expr pos:start="14:29" pos:end="14:32"><name pos:start="14:29" pos:end="14:32">NULL</name></expr></argument>, <argument pos:start="14:35" pos:end="14:38"><expr pos:start="14:35" pos:end="14:38"><name pos:start="14:35" pos:end="14:38">NULL</name></expr></argument>, <argument pos:start="14:41" pos:end="14:44"><expr pos:start="14:41" pos:end="14:44"><name pos:start="14:41" pos:end="14:44">NULL</name></expr></argument>, <argument pos:start="14:47" pos:end="14:50"><expr pos:start="14:47" pos:end="14:50"><name pos:start="14:47" pos:end="14:50">NULL</name></expr></argument>, <argument pos:start="14:53" pos:end="14:53"><expr pos:start="14:53" pos:end="14:53"><literal type="number" pos:start="14:53" pos:end="14:53">0</literal></expr></argument>, <argument pos:start="14:56" pos:end="14:58"><expr pos:start="14:56" pos:end="14:58"><name pos:start="14:56" pos:end="14:58">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="15:9" pos:end="16:12"><if pos:start="15:9" pos:end="16:12">if <condition pos:start="15:12" pos:end="15:20">(<expr pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:15">ret</name> <operator pos:start="15:17" pos:end="15:17">&lt;</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>)</condition><block type="pseudo" pos:start="16:9" pos:end="16:12"><block_content pos:start="16:9" pos:end="16:12">
        <expr_stmt pos:start="16:9" pos:end="16:12"><expr pos:start="16:9" pos:end="16:11"><name pos:start="16:9" pos:end="16:9">i</name><operator pos:start="16:10" pos:end="16:11">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="17:9" pos:end="51:15"><if pos:start="17:9" pos:end="51:15">if <condition pos:start="17:12" pos:end="17:37">(<expr pos:start="17:13" pos:end="17:36"><name pos:start="17:13" pos:end="17:18">bufptr</name> <operator pos:start="17:20" pos:end="17:21">&amp;&amp;</operator> <operator pos:start="17:23" pos:end="17:23">*</operator><name pos:start="17:24" pos:end="17:29">bufptr</name> <operator pos:start="17:31" pos:end="17:32">==</operator> <literal type="char" pos:start="17:34" pos:end="17:36">':'</literal></expr>)</condition> <block pos:start="17:39" pos:end="51:15">{<block_content pos:start="18:13" pos:end="51:15"> <comment type="block" pos:start="17:41" pos:end="17:67">/* found last expression */</comment>
            <expr_stmt pos:start="18:13" pos:end="18:21"><expr pos:start="18:13" pos:end="18:20"><name pos:start="18:13" pos:end="18:18">bufptr</name><operator pos:start="18:19" pos:end="18:20">++</operator></expr>;</expr_stmt>
            <break pos:start="19:13" pos:end="19:18">break;</break>
        <expr_stmt pos:start="20:9" pos:end="20:19"><expr pos:start="20:9" pos:end="20:18"><name pos:start="20:9" pos:end="20:11">buf</name> <operator pos:start="20:13" pos:end="20:13">=</operator> <name pos:start="20:15" pos:end="20:18">NULL</name></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:8">eval</name><operator pos:start="21:9" pos:end="21:10">-&gt;</operator><name pos:start="21:11" pos:end="21:21">nb_channels</name></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:25">i</name></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="51:15"><if pos:start="22:5" pos:end="51:15">if <condition pos:start="22:8" pos:end="22:76">(<expr pos:start="22:9" pos:end="22:75"><name pos:start="22:9" pos:end="22:14">bufptr</name> <operator pos:start="22:16" pos:end="22:17">&amp;&amp;</operator> <operator pos:start="22:19" pos:end="22:19">(</operator><name pos:start="22:20" pos:end="22:22">ret</name> <operator pos:start="22:24" pos:end="22:24">=</operator> <call pos:start="22:26" pos:end="22:70"><name pos:start="22:26" pos:end="22:46">av_set_options_string</name><argument_list pos:start="22:47" pos:end="22:70">(<argument pos:start="22:48" pos:end="22:51"><expr pos:start="22:48" pos:end="22:51"><name pos:start="22:48" pos:end="22:51">eval</name></expr></argument>, <argument pos:start="22:54" pos:end="22:59"><expr pos:start="22:54" pos:end="22:59"><name pos:start="22:54" pos:end="22:59">bufptr</name></expr></argument>, <argument pos:start="22:62" pos:end="22:64"><expr pos:start="22:62" pos:end="22:64"><literal type="string" pos:start="22:62" pos:end="22:64">"="</literal></expr></argument>, <argument pos:start="22:67" pos:end="22:69"><expr pos:start="22:67" pos:end="22:69"><literal type="string" pos:start="22:67" pos:end="22:69">":"</literal></expr></argument>)</argument_list></call><operator pos:start="22:71" pos:end="22:71">)</operator> <operator pos:start="22:73" pos:end="22:73">&lt;</operator> <literal type="number" pos:start="22:75" pos:end="22:75">0</literal></expr>)</condition><block type="pseudo" pos:start="23:5" pos:end="51:15"><block_content pos:start="23:5" pos:end="51:15">
    <if_stmt pos:start="23:5" pos:end="51:15"><if pos:start="23:5" pos:end="51:15">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:12">eval</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:26">chlayout_str</name></name></expr>)</condition> <block pos:start="23:29" pos:end="51:15">{<block_content pos:start="24:9" pos:end="51:15">
        <decl_stmt pos:start="24:9" pos:end="24:14"><decl pos:start="24:9" pos:end="24:13"><type pos:start="24:9" pos:end="24:11"><name pos:start="24:9" pos:end="24:11">int</name></type> <name pos:start="24:13" pos:end="24:13">n</name></decl>;</decl_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:80"><expr pos:start="25:9" pos:end="25:79"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:79"><name pos:start="25:15" pos:end="25:37">ff_parse_channel_layout</name><argument_list pos:start="25:38" pos:end="25:79">(<argument pos:start="25:39" pos:end="25:53"><expr pos:start="25:39" pos:end="25:53"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:53"><name pos:start="25:40" pos:end="25:43">eval</name><operator pos:start="25:44" pos:end="25:45">-&gt;</operator><name pos:start="25:46" pos:end="25:53">chlayout</name></name></expr></argument>, <argument pos:start="25:56" pos:end="25:73"><expr pos:start="25:56" pos:end="25:73"><name pos:start="25:56" pos:end="25:73"><name pos:start="25:56" pos:end="25:59">eval</name><operator pos:start="25:60" pos:end="25:61">-&gt;</operator><name pos:start="25:62" pos:end="25:73">chlayout_str</name></name></expr></argument>, <argument pos:start="25:76" pos:end="25:78"><expr pos:start="25:76" pos:end="25:78"><name pos:start="25:76" pos:end="25:78">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="26:9" pos:end="27:62"><if pos:start="26:9" pos:end="27:62">if <condition pos:start="26:12" pos:end="26:20">(<expr pos:start="26:13" pos:end="26:19"><name pos:start="26:13" pos:end="26:15">ret</name> <operator pos:start="26:17" pos:end="26:17">&lt;</operator> <literal type="number" pos:start="26:19" pos:end="26:19">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:62"><block_content pos:start="27:9" pos:end="27:62">
        <expr_stmt pos:start="27:9" pos:end="27:62"><expr pos:start="27:9" pos:end="27:61"><name pos:start="27:9" pos:end="27:9">n</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <call pos:start="27:13" pos:end="27:61"><name pos:start="27:13" pos:end="27:45">av_get_channel_layout_nb_channels</name><argument_list pos:start="27:46" pos:end="27:61">(<argument pos:start="27:47" pos:end="27:60"><expr pos:start="27:47" pos:end="27:60"><name pos:start="27:47" pos:end="27:60"><name pos:start="27:47" pos:end="27:50">eval</name><operator pos:start="27:51" pos:end="27:52">-&gt;</operator><name pos:start="27:53" pos:end="27:60">chlayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="28:9" pos:end="51:15"><if pos:start="28:9" pos:end="34:5">if <condition pos:start="28:12" pos:end="28:35">(<expr pos:start="28:13" pos:end="28:34"><name pos:start="28:13" pos:end="28:13">n</name> <operator pos:start="28:15" pos:end="28:16">!=</operator> <name pos:start="28:18" pos:end="28:34"><name pos:start="28:18" pos:end="28:21">eval</name><operator pos:start="28:22" pos:end="28:23">-&gt;</operator><name pos:start="28:24" pos:end="28:34">nb_channels</name></name></expr>)</condition> <block pos:start="28:37" pos:end="34:5">{<block_content pos:start="29:13" pos:end="33:34">
            <expr_stmt pos:start="29:13" pos:end="32:61"><expr pos:start="29:13" pos:end="32:60"><call pos:start="29:13" pos:end="32:60"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="32:60">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">ctx</name></expr></argument>, <argument pos:start="29:25" pos:end="29:36"><expr pos:start="29:25" pos:end="29:36"><name pos:start="29:25" pos:end="29:36">AV_LOG_ERROR</name></expr></argument>,
                   <argument pos:start="30:20" pos:end="31:91"><expr pos:start="30:20" pos:end="31:91"><literal type="string" pos:start="30:20" pos:end="30:76">"Mismatch between the specified number of channels '%d' "</literal>
                   <literal type="string" pos:start="31:20" pos:end="31:91">"and the number of channels '%d' in the specified channel layout '%s'\n"</literal></expr></argument>,
                   <argument pos:start="32:20" pos:end="32:36"><expr pos:start="32:20" pos:end="32:36"><name pos:start="32:20" pos:end="32:36"><name pos:start="32:20" pos:end="32:23">eval</name><operator pos:start="32:24" pos:end="32:25">-&gt;</operator><name pos:start="32:26" pos:end="32:36">nb_channels</name></name></expr></argument>, <argument pos:start="32:39" pos:end="32:39"><expr pos:start="32:39" pos:end="32:39"><name pos:start="32:39" pos:end="32:39">n</name></expr></argument>, <argument pos:start="32:42" pos:end="32:59"><expr pos:start="32:42" pos:end="32:59"><name pos:start="32:42" pos:end="32:59"><name pos:start="32:42" pos:end="32:45">eval</name><operator pos:start="32:46" pos:end="32:47">-&gt;</operator><name pos:start="32:48" pos:end="32:59">chlayout_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="33:13" pos:end="33:34"><expr pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:33"><name pos:start="33:19" pos:end="33:25">AVERROR</name><argument_list pos:start="33:26" pos:end="33:33">(<argument pos:start="33:27" pos:end="33:32"><expr pos:start="33:27" pos:end="33:32"><name pos:start="33:27" pos:end="33:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="34:7" pos:end="51:15">else <block pos:start="34:12" pos:end="51:15">{<block_content pos:start="36:9" pos:end="51:15">
        <comment type="block" pos:start="35:9" pos:end="35:63">/* guess channel layout from nb expressions/channels */</comment>
        <expr_stmt pos:start="36:9" pos:end="36:74"><expr pos:start="36:9" pos:end="36:73"><name pos:start="36:9" pos:end="36:22"><name pos:start="36:9" pos:end="36:12">eval</name><operator pos:start="36:13" pos:end="36:14">-&gt;</operator><name pos:start="36:15" pos:end="36:22">chlayout</name></name> <operator pos:start="36:24" pos:end="36:24">=</operator> <call pos:start="36:26" pos:end="36:73"><name pos:start="36:26" pos:end="36:54">av_get_default_channel_layout</name><argument_list pos:start="36:55" pos:end="36:73">(<argument pos:start="36:56" pos:end="36:72"><expr pos:start="36:56" pos:end="36:72"><name pos:start="36:56" pos:end="36:72"><name pos:start="36:56" pos:end="36:59">eval</name><operator pos:start="36:60" pos:end="36:61">-&gt;</operator><name pos:start="36:62" pos:end="36:72">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="37:9" pos:end="51:15"><if pos:start="37:9" pos:end="51:15">if <condition pos:start="37:12" pos:end="37:28">(<expr pos:start="37:13" pos:end="37:27"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:27"><name pos:start="37:14" pos:end="37:17">eval</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:27">chlayout</name></name></expr>)</condition> <block pos:start="37:30" pos:end="51:15">{<block_content pos:start="38:13" pos:end="51:15">
            <expr_stmt pos:start="38:13" pos:end="39:38"><expr pos:start="38:13" pos:end="39:37"><call pos:start="38:13" pos:end="39:37"><name pos:start="38:13" pos:end="38:18">av_log</name><argument_list pos:start="38:19" pos:end="39:37">(<argument pos:start="38:20" pos:end="38:22"><expr pos:start="38:20" pos:end="38:22"><name pos:start="38:20" pos:end="38:22">ctx</name></expr></argument>, <argument pos:start="38:25" pos:end="38:36"><expr pos:start="38:25" pos:end="38:36"><name pos:start="38:25" pos:end="38:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="38:39" pos:end="38:82"><expr pos:start="38:39" pos:end="38:82"><literal type="string" pos:start="38:39" pos:end="38:82">"Invalid number of channels '%d' provided\n"</literal></expr></argument>,
                   <argument pos:start="39:20" pos:end="39:36"><expr pos:start="39:20" pos:end="39:36"><name pos:start="39:20" pos:end="39:36"><name pos:start="39:20" pos:end="39:23">eval</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:36">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:34"><expr pos:start="40:13" pos:end="40:33"><name pos:start="40:13" pos:end="40:15">ret</name> <operator pos:start="40:17" pos:end="40:17">=</operator> <call pos:start="40:19" pos:end="40:33"><name pos:start="40:19" pos:end="40:25">AVERROR</name><argument_list pos:start="40:26" pos:end="40:33">(<argument pos:start="40:27" pos:end="40:32"><expr pos:start="40:27" pos:end="40:32"><name pos:start="40:27" pos:end="40:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="41:5" pos:end="42:24"><if pos:start="41:5" pos:end="42:24">if <condition pos:start="41:8" pos:end="41:85">(<expr pos:start="41:9" pos:end="41:84"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:12">ret</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:83"><name pos:start="41:16" pos:end="41:35">ff_parse_sample_rate</name><argument_list pos:start="41:36" pos:end="41:83">(<argument pos:start="41:37" pos:end="41:54"><expr pos:start="41:37" pos:end="41:54"><operator pos:start="41:37" pos:end="41:37">&amp;</operator><name pos:start="41:38" pos:end="41:54"><name pos:start="41:38" pos:end="41:41">eval</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:54">sample_rate</name></name></expr></argument>, <argument pos:start="41:57" pos:end="41:77"><expr pos:start="41:57" pos:end="41:77"><name pos:start="41:57" pos:end="41:77"><name pos:start="41:57" pos:end="41:60">eval</name><operator pos:start="41:61" pos:end="41:62">-&gt;</operator><name pos:start="41:63" pos:end="41:77">sample_rate_str</name></name></expr></argument>, <argument pos:start="41:80" pos:end="41:82"><expr pos:start="41:80" pos:end="41:82"><name pos:start="41:80" pos:end="41:82">ctx</name></expr></argument>)</argument_list></call><operator pos:start="41:84" pos:end="41:84">)</operator></expr>)</condition><block type="pseudo" pos:start="42:5" pos:end="42:24"><block_content pos:start="42:5" pos:end="42:24">
    <expr_stmt pos:start="42:5" pos:end="42:24"><expr pos:start="42:5" pos:end="42:23"><name pos:start="42:5" pos:end="42:18"><name pos:start="42:5" pos:end="42:8">eval</name><operator pos:start="42:9" pos:end="42:10">-&gt;</operator><name pos:start="42:11" pos:end="42:18">duration</name></name> <operator pos:start="42:20" pos:end="42:20">=</operator> <operator pos:start="42:22" pos:end="42:22">-</operator><literal type="number" pos:start="42:23" pos:end="42:23">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="43:5" pos:end="51:15"><if pos:start="43:5" pos:end="51:15">if <condition pos:start="43:8" pos:end="43:27">(<expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:12">eval</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:26">duration_str</name></name></expr>)</condition> <block pos:start="43:29" pos:end="51:15">{<block_content pos:start="44:9" pos:end="51:15">
        <decl_stmt pos:start="44:9" pos:end="44:24"><decl pos:start="44:9" pos:end="44:23"><type pos:start="44:9" pos:end="44:15"><name pos:start="44:9" pos:end="44:15">int64_t</name></type> <name pos:start="44:17" pos:end="44:18">us</name> <init pos:start="44:20" pos:end="44:23">= <expr pos:start="44:22" pos:end="44:23"><operator pos:start="44:22" pos:end="44:22">-</operator><literal type="number" pos:start="44:23" pos:end="44:23">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="45:9" pos:end="51:15"><if pos:start="45:9" pos:end="51:15">if <condition pos:start="45:12" pos:end="45:66">(<expr pos:start="45:13" pos:end="45:65"><operator pos:start="45:13" pos:end="45:13">(</operator><name pos:start="45:14" pos:end="45:16">ret</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <call pos:start="45:20" pos:end="45:60"><name pos:start="45:20" pos:end="45:32">av_parse_time</name><argument_list pos:start="45:33" pos:end="45:60">(<argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><operator pos:start="45:34" pos:end="45:34">&amp;</operator><name pos:start="45:35" pos:end="45:36">us</name></expr></argument>, <argument pos:start="45:39" pos:end="45:56"><expr pos:start="45:39" pos:end="45:56"><name pos:start="45:39" pos:end="45:56"><name pos:start="45:39" pos:end="45:42">eval</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:56">duration_str</name></name></expr></argument>, <argument pos:start="45:59" pos:end="45:59"><expr pos:start="45:59" pos:end="45:59"><literal type="number" pos:start="45:59" pos:end="45:59">1</literal></expr></argument>)</argument_list></call><operator pos:start="45:61" pos:end="45:61">)</operator> <operator pos:start="45:63" pos:end="45:63">&lt;</operator> <literal type="number" pos:start="45:65" pos:end="45:65">0</literal></expr>)</condition> <block pos:start="45:68" pos:end="51:15">{<block_content pos:start="46:13" pos:end="51:15">
            <expr_stmt pos:start="46:13" pos:end="46:86"><expr pos:start="46:13" pos:end="46:85"><call pos:start="46:13" pos:end="46:85"><name pos:start="46:13" pos:end="46:18">av_log</name><argument_list pos:start="46:19" pos:end="46:85">(<argument pos:start="46:20" pos:end="46:22"><expr pos:start="46:20" pos:end="46:22"><name pos:start="46:20" pos:end="46:22">ctx</name></expr></argument>, <argument pos:start="46:25" pos:end="46:36"><expr pos:start="46:25" pos:end="46:36"><name pos:start="46:25" pos:end="46:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="46:39" pos:end="46:64"><expr pos:start="46:39" pos:end="46:64"><literal type="string" pos:start="46:39" pos:end="46:64">"Invalid duration: '%s'\n"</literal></expr></argument>, <argument pos:start="46:67" pos:end="46:84"><expr pos:start="46:67" pos:end="46:84"><name pos:start="46:67" pos:end="46:84"><name pos:start="46:67" pos:end="46:70">eval</name><operator pos:start="46:71" pos:end="46:72">-&gt;</operator><name pos:start="46:73" pos:end="46:84">duration_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:46"><expr pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:12">eval</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:22">duration</name></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <operator pos:start="47:26" pos:end="47:26">(</operator><name pos:start="47:27" pos:end="47:32">double</name><operator pos:start="47:33" pos:end="47:33">)</operator><name pos:start="47:34" pos:end="47:35">us</name> <operator pos:start="47:37" pos:end="47:37">/</operator> <literal type="number" pos:start="47:39" pos:end="47:45">1000000</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:16"><expr pos:start="48:5" pos:end="48:15"><name pos:start="48:5" pos:end="48:11"><name pos:start="48:5" pos:end="48:8">eval</name><operator pos:start="48:9" pos:end="48:10">-&gt;</operator><name pos:start="48:11" pos:end="48:11">n</name></name> <operator pos:start="48:13" pos:end="48:13">=</operator> <literal type="number" pos:start="48:15" pos:end="48:15">0</literal></expr>;</expr_stmt>
<label pos:start="49:1" pos:end="49:4"><name pos:start="49:1" pos:end="49:3">end</name>:</label>
    <expr_stmt pos:start="50:5" pos:end="50:19"><expr pos:start="50:5" pos:end="50:18"><call pos:start="50:5" pos:end="50:18"><name pos:start="50:5" pos:end="50:11">av_free</name><argument_list pos:start="50:12" pos:end="50:18">(<argument pos:start="50:13" pos:end="50:17"><expr pos:start="50:13" pos:end="50:17"><name pos:start="50:13" pos:end="50:17">args1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="51:5" pos:end="51:15">return <expr pos:start="51:12" pos:end="51:14"><name pos:start="51:12" pos:end="51:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function></unit>
