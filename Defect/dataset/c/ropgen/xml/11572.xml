<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11572.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">adaptive_quantization</name><parameter_list pos:start="1:34" pos:end="1:62">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:61"><decl pos:start="1:54" pos:end="1:61"><type pos:start="1:54" pos:end="1:61"><name pos:start="1:54" pos:end="1:59">double</name></type> <name pos:start="1:61" pos:end="1:61">q</name></decl></parameter>)</parameter_list><block pos:start="1:63" pos:end="167:1">{<block_content pos:start="3:5" pos:end="165:5">

    <decl_stmt pos:start="3:5" pos:end="3:10"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:69"><decl pos:start="5:5" pos:end="5:68"><type pos:start="5:5" pos:end="5:15"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:15">float</name></type> <name pos:start="5:17" pos:end="5:28">lumi_masking</name><init pos:start="5:29" pos:end="5:68">= <expr pos:start="5:31" pos:end="5:68"><name pos:start="5:31" pos:end="5:52"><name pos:start="5:31" pos:end="5:31">s</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:38">avctx</name><operator pos:start="5:39" pos:end="5:40">-&gt;</operator><name pos:start="5:41" pos:end="5:52">lumi_masking</name></name> <operator pos:start="5:54" pos:end="5:54">/</operator> <operator pos:start="5:56" pos:end="5:56">(</operator><literal type="number" pos:start="5:57" pos:end="5:61">128.0</literal><operator pos:start="5:62" pos:end="5:62">*</operator><literal type="number" pos:start="5:63" pos:end="5:67">128.0</literal><operator pos:start="5:68" pos:end="5:68">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:69"><decl pos:start="7:5" pos:end="7:68"><type pos:start="7:5" pos:end="7:15"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:15">float</name></type> <name pos:start="7:17" pos:end="7:28">dark_masking</name><init pos:start="7:29" pos:end="7:68">= <expr pos:start="7:31" pos:end="7:68"><name pos:start="7:31" pos:end="7:52"><name pos:start="7:31" pos:end="7:31">s</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:38">avctx</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:52">dark_masking</name></name> <operator pos:start="7:54" pos:end="7:54">/</operator> <operator pos:start="7:56" pos:end="7:56">(</operator><literal type="number" pos:start="7:57" pos:end="7:61">128.0</literal><operator pos:start="7:62" pos:end="7:62">*</operator><literal type="number" pos:start="7:63" pos:end="7:67">128.0</literal><operator pos:start="7:68" pos:end="7:68">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:66"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:15">float</name></type> <name pos:start="9:17" pos:end="9:33">temp_cplx_masking</name><init pos:start="9:34" pos:end="9:66">= <expr pos:start="9:36" pos:end="9:66"><name pos:start="9:36" pos:end="9:66"><name pos:start="9:36" pos:end="9:36">s</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:43">avctx</name><operator pos:start="9:44" pos:end="9:45">-&gt;</operator><name pos:start="9:46" pos:end="9:66">temporal_cplx_masking</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:70"><decl pos:start="11:5" pos:end="11:69"><type pos:start="11:5" pos:end="11:15"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:15">float</name></type> <name pos:start="11:17" pos:end="11:36">spatial_cplx_masking</name> <init pos:start="11:38" pos:end="11:69">= <expr pos:start="11:40" pos:end="11:69"><name pos:start="11:40" pos:end="11:69"><name pos:start="11:40" pos:end="11:40">s</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:47">avctx</name><operator pos:start="11:48" pos:end="11:49">-&gt;</operator><name pos:start="11:50" pos:end="11:69">spatial_cplx_masking</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:48"><decl pos:start="13:5" pos:end="13:47"><type pos:start="13:5" pos:end="13:15"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:15">float</name></type> <name pos:start="13:17" pos:end="13:25">p_masking</name> <init pos:start="13:27" pos:end="13:47">= <expr pos:start="13:29" pos:end="13:47"><name pos:start="13:29" pos:end="13:47"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:36">avctx</name><operator pos:start="13:37" pos:end="13:38">-&gt;</operator><name pos:start="13:39" pos:end="13:47">p_masking</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:18">bits_sum</name><init pos:start="15:19" pos:end="15:23">= <expr pos:start="15:21" pos:end="15:23"><literal type="number" pos:start="15:21" pos:end="15:23">0.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:9">float</name></type> <name pos:start="17:11" pos:end="17:18">cplx_sum</name><init pos:start="17:19" pos:end="17:23">= <expr pos:start="17:21" pos:end="17:23"><literal type="number" pos:start="17:21" pos:end="17:23">0.0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:29"><name pos:start="19:11" pos:end="19:18">cplx_tab</name><index pos:start="19:19" pos:end="19:29">[<expr pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:20">s</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:28">mb_num</name></name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:9">float</name></type> <name pos:start="21:11" pos:end="21:29"><name pos:start="21:11" pos:end="21:18">bits_tab</name><index pos:start="21:19" pos:end="21:29">[<expr pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:28">mb_num</name></name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:13"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:18">qmin</name><init pos:start="23:19" pos:end="23:21">= <expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">2</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="23:24" pos:end="23:43">//s-&gt;avctx-&gt;mb_qmin;</comment>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:13"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:13">int</name></type> <name pos:start="25:15" pos:end="25:18">qmax</name><init pos:start="25:19" pos:end="25:22">= <expr pos:start="25:21" pos:end="25:22"><literal type="number" pos:start="25:21" pos:end="25:22">31</literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="25:25" pos:end="25:44">//s-&gt;avctx-&gt;mb_qmax;</comment>

    <decl_stmt pos:start="27:5" pos:end="27:45"><decl pos:start="27:5" pos:end="27:44"><type pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:11">Picture</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier> <specifier pos:start="27:15" pos:end="27:19">const</specifier></type> <name pos:start="27:21" pos:end="27:23">pic</name><init pos:start="27:24" pos:end="27:44">= <expr pos:start="27:26" pos:end="27:44"><operator pos:start="27:26" pos:end="27:26">&amp;</operator><name pos:start="27:27" pos:end="27:44"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:44">current_picture</name></name></expr></init></decl>;</decl_stmt>

    

    <for pos:start="31:5" pos:end="91:5">for<control pos:start="31:8" pos:end="31:30">(<init pos:start="31:9" pos:end="31:12"><expr pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:9">i</name><operator pos:start="31:10" pos:end="31:10">=</operator><literal type="number" pos:start="31:11" pos:end="31:11">0</literal></expr>;</init> <condition pos:start="31:14" pos:end="31:25"><expr pos:start="31:14" pos:end="31:24"><name pos:start="31:14" pos:end="31:14">i</name><operator pos:start="31:15" pos:end="31:15">&lt;</operator><name pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:16">s</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:24">mb_num</name></name></expr>;</condition> <incr pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:27">i</name><operator pos:start="31:28" pos:end="31:29">++</operator></expr></incr>)</control><block pos:start="31:31" pos:end="91:5">{<block_content pos:start="33:9" pos:end="89:26">

        <decl_stmt pos:start="33:9" pos:end="33:49"><decl pos:start="33:9" pos:end="33:48"><type pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:13">float</name></type> <name pos:start="33:15" pos:end="33:23">temp_cplx</name><init pos:start="33:24" pos:end="33:48">= <expr pos:start="33:26" pos:end="33:48"><call pos:start="33:26" pos:end="33:48"><name pos:start="33:26" pos:end="33:29">sqrt</name><argument_list pos:start="33:30" pos:end="33:48">(<argument pos:start="33:31" pos:end="33:47"><expr pos:start="33:31" pos:end="33:47"><name pos:start="33:31" pos:end="33:47"><name pos:start="33:31" pos:end="33:33">pic</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:44">mc_mb_var</name><index pos:start="33:45" pos:end="33:47">[<expr pos:start="33:46" pos:end="33:46"><name pos:start="33:46" pos:end="33:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:46"><decl pos:start="35:9" pos:end="35:45"><type pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">float</name></type> <name pos:start="35:15" pos:end="35:23">spat_cplx</name><init pos:start="35:24" pos:end="35:45">= <expr pos:start="35:26" pos:end="35:45"><call pos:start="35:26" pos:end="35:45"><name pos:start="35:26" pos:end="35:29">sqrt</name><argument_list pos:start="35:30" pos:end="35:45">(<argument pos:start="35:31" pos:end="35:44"><expr pos:start="35:31" pos:end="35:44"><name pos:start="35:31" pos:end="35:44"><name pos:start="35:31" pos:end="35:33">pic</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:41">mb_var</name><index pos:start="35:42" pos:end="35:44">[<expr pos:start="35:43" pos:end="35:43"><name pos:start="35:43" pos:end="35:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:40"><decl pos:start="37:9" pos:end="37:39"><type pos:start="37:9" pos:end="37:17"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:17">int</name></type> <name pos:start="37:19" pos:end="37:22">lumi</name><init pos:start="37:23" pos:end="37:39">= <expr pos:start="37:25" pos:end="37:39"><name pos:start="37:25" pos:end="37:39"><name pos:start="37:25" pos:end="37:27">pic</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:36">mb_mean</name><index pos:start="37:37" pos:end="37:39">[<expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:33"><decl pos:start="39:9" pos:end="39:18"><type pos:start="39:9" pos:end="39:13"><name pos:start="39:9" pos:end="39:13">float</name></type> <name pos:start="39:15" pos:end="39:18">bits</name></decl>, <decl pos:start="39:21" pos:end="39:24"><type ref="prev" pos:start="39:9" pos:end="39:13"/><name pos:start="39:21" pos:end="39:24">cplx</name></decl>, <decl pos:start="39:27" pos:end="39:32"><type ref="prev" pos:start="39:9" pos:end="39:13"/><name pos:start="39:27" pos:end="39:32">factor</name></decl>;</decl_stmt>

        

        <if_stmt pos:start="43:9" pos:end="43:43"><if pos:start="43:9" pos:end="43:43">if<condition pos:start="43:11" pos:end="43:27">(<expr pos:start="43:12" pos:end="43:26"><name pos:start="43:12" pos:end="43:20">spat_cplx</name> <operator pos:start="43:22" pos:end="43:22">&lt;</operator> <name pos:start="43:24" pos:end="43:24">q</name><operator pos:start="43:25" pos:end="43:25">/</operator><literal type="number" pos:start="43:26" pos:end="43:26">3</literal></expr>)</condition><block type="pseudo" pos:start="43:29" pos:end="43:43"><block_content pos:start="43:29" pos:end="43:43"> <expr_stmt pos:start="43:29" pos:end="43:43"><expr pos:start="43:29" pos:end="43:42"><name pos:start="43:29" pos:end="43:37">spat_cplx</name><operator pos:start="43:38" pos:end="43:38">=</operator> <name pos:start="43:40" pos:end="43:40">q</name><operator pos:start="43:41" pos:end="43:41">/</operator><literal type="number" pos:start="43:42" pos:end="43:42">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="43:45" pos:end="43:60">//FIXME finetune</comment>

        <if_stmt pos:start="45:9" pos:end="45:43"><if pos:start="45:9" pos:end="45:43">if<condition pos:start="45:11" pos:end="45:27">(<expr pos:start="45:12" pos:end="45:26"><name pos:start="45:12" pos:end="45:20">temp_cplx</name> <operator pos:start="45:22" pos:end="45:22">&lt;</operator> <name pos:start="45:24" pos:end="45:24">q</name><operator pos:start="45:25" pos:end="45:25">/</operator><literal type="number" pos:start="45:26" pos:end="45:26">3</literal></expr>)</condition><block type="pseudo" pos:start="45:29" pos:end="45:43"><block_content pos:start="45:29" pos:end="45:43"> <expr_stmt pos:start="45:29" pos:end="45:43"><expr pos:start="45:29" pos:end="45:42"><name pos:start="45:29" pos:end="45:37">temp_cplx</name><operator pos:start="45:38" pos:end="45:38">=</operator> <name pos:start="45:40" pos:end="45:40">q</name><operator pos:start="45:41" pos:end="45:41">/</operator><literal type="number" pos:start="45:42" pos:end="45:42">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="45:45" pos:end="45:60">//FIXME finetune</comment>

        

        <if_stmt pos:start="49:9" pos:end="61:9"><if pos:start="49:9" pos:end="55:9">if<condition pos:start="49:11" pos:end="49:41">(<expr pos:start="49:12" pos:end="49:40"><operator pos:start="49:12" pos:end="49:12">(</operator><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">mb_type</name><index pos:start="49:23" pos:end="49:25">[<expr pos:start="49:24" pos:end="49:24"><name pos:start="49:24" pos:end="49:24">i</name></expr>]</index></name><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:39">MB_TYPE_INTRA</name><operator pos:start="49:40" pos:end="49:40">)</operator></expr>)</condition><block pos:start="49:42" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:36"><comment type="line" pos:start="49:43" pos:end="49:58">//FIXME hq mode </comment>

            <expr_stmt pos:start="51:13" pos:end="51:28"><expr pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:16">cplx</name><operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:27">spat_cplx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:36"><expr pos:start="53:13" pos:end="53:35"><name pos:start="53:13" pos:end="53:18">factor</name><operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:25">1.0</literal> <operator pos:start="53:25" pos:end="53:25">+</operator> <name pos:start="53:27" pos:end="53:35">p_masking</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="55:10" pos:end="61:9">else<block pos:start="55:14" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:56">

            <expr_stmt pos:start="57:13" pos:end="57:28"><expr pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:16">cplx</name><operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:27">temp_cplx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:56"><expr pos:start="59:13" pos:end="59:55"><name pos:start="59:13" pos:end="59:18">factor</name><operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:55"><name pos:start="59:21" pos:end="59:23">pow</name><argument_list pos:start="59:24" pos:end="59:55">(<argument pos:start="59:25" pos:end="59:33"><expr pos:start="59:25" pos:end="59:33"><name pos:start="59:25" pos:end="59:33">temp_cplx</name></expr></argument>, <argument pos:start="59:36" pos:end="59:54"><expr pos:start="59:36" pos:end="59:54"><operator pos:start="59:36" pos:end="59:36">-</operator> <name pos:start="59:38" pos:end="59:54">temp_cplx_masking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:55"><expr pos:start="63:9" pos:end="63:54"><name pos:start="63:9" pos:end="63:14">factor</name><operator pos:start="63:15" pos:end="63:16">*=</operator><call pos:start="63:17" pos:end="63:54"><name pos:start="63:17" pos:end="63:19">pow</name><argument_list pos:start="63:20" pos:end="63:54">(<argument pos:start="63:21" pos:end="63:29"><expr pos:start="63:21" pos:end="63:29"><name pos:start="63:21" pos:end="63:29">spat_cplx</name></expr></argument>, <argument pos:start="63:32" pos:end="63:53"><expr pos:start="63:32" pos:end="63:53"><operator pos:start="63:32" pos:end="63:32">-</operator> <name pos:start="63:34" pos:end="63:53">spatial_cplx_masking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="73:64"><if pos:start="67:9" pos:end="69:64">if<condition pos:start="67:11" pos:end="67:20">(<expr pos:start="67:12" pos:end="67:19"><name pos:start="67:12" pos:end="67:15">lumi</name><operator pos:start="67:16" pos:end="67:16">&gt;</operator><literal type="number" pos:start="67:17" pos:end="67:19">127</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:64"><block_content pos:start="69:13" pos:end="69:64">

            <expr_stmt pos:start="69:13" pos:end="69:64"><expr pos:start="69:13" pos:end="69:63"><name pos:start="69:13" pos:end="69:18">factor</name><operator pos:start="69:19" pos:end="69:20">*=</operator> <operator pos:start="69:22" pos:end="69:22">(</operator><literal type="number" pos:start="69:23" pos:end="69:27">1.0</literal> <operator pos:start="69:27" pos:end="69:27">-</operator> <operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:33">lumi</name><operator pos:start="69:34" pos:end="69:34">-</operator><literal type="number" pos:start="69:35" pos:end="69:37">128</literal><operator pos:start="69:38" pos:end="69:38">)</operator><operator pos:start="69:39" pos:end="69:39">*</operator><operator pos:start="69:40" pos:end="69:40">(</operator><name pos:start="69:41" pos:end="69:44">lumi</name><operator pos:start="69:45" pos:end="69:45">-</operator><literal type="number" pos:start="69:46" pos:end="69:48">128</literal><operator pos:start="69:49" pos:end="69:49">)</operator><operator pos:start="69:50" pos:end="69:50">*</operator><name pos:start="69:51" pos:end="69:62">lumi_masking</name><operator pos:start="69:63" pos:end="69:63">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="71:9" pos:end="73:64">else<block type="pseudo" pos:start="73:13" pos:end="73:64"><block_content pos:start="73:13" pos:end="73:64">

            <expr_stmt pos:start="73:13" pos:end="73:64"><expr pos:start="73:13" pos:end="73:63"><name pos:start="73:13" pos:end="73:18">factor</name><operator pos:start="73:19" pos:end="73:20">*=</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><literal type="number" pos:start="73:23" pos:end="73:27">1.0</literal> <operator pos:start="73:27" pos:end="73:27">-</operator> <operator pos:start="73:29" pos:end="73:29">(</operator><name pos:start="73:30" pos:end="73:33">lumi</name><operator pos:start="73:34" pos:end="73:34">-</operator><literal type="number" pos:start="73:35" pos:end="73:37">128</literal><operator pos:start="73:38" pos:end="73:38">)</operator><operator pos:start="73:39" pos:end="73:39">*</operator><operator pos:start="73:40" pos:end="73:40">(</operator><name pos:start="73:41" pos:end="73:44">lumi</name><operator pos:start="73:45" pos:end="73:45">-</operator><literal type="number" pos:start="73:46" pos:end="73:48">128</literal><operator pos:start="73:49" pos:end="73:49">)</operator><operator pos:start="73:50" pos:end="73:50">*</operator><name pos:start="73:51" pos:end="73:62">dark_masking</name><operator pos:start="73:63" pos:end="73:63">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        

        <if_stmt pos:start="77:9" pos:end="77:43"><if pos:start="77:9" pos:end="77:43">if<condition pos:start="77:11" pos:end="77:26">(<expr pos:start="77:12" pos:end="77:25"><name pos:start="77:12" pos:end="77:17">factor</name><operator pos:start="77:18" pos:end="77:18">&lt;</operator><literal type="number" pos:start="77:19" pos:end="77:25">0.00001</literal></expr>)</condition><block type="pseudo" pos:start="77:28" pos:end="77:43"><block_content pos:start="77:28" pos:end="77:43"> <expr_stmt pos:start="77:28" pos:end="77:43"><expr pos:start="77:28" pos:end="77:42"><name pos:start="77:28" pos:end="77:33">factor</name><operator pos:start="77:34" pos:end="77:34">=</operator> <literal type="number" pos:start="77:36" pos:end="77:42">0.00001</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:12">bits</name><operator pos:start="81:13" pos:end="81:13">=</operator> <name pos:start="81:15" pos:end="81:18">cplx</name><operator pos:start="81:19" pos:end="81:19">*</operator><name pos:start="81:20" pos:end="81:25">factor</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:24"><expr pos:start="83:9" pos:end="83:23"><name pos:start="83:9" pos:end="83:16">cplx_sum</name><operator pos:start="83:17" pos:end="83:18">+=</operator> <name pos:start="83:20" pos:end="83:23">cplx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:24"><expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:16">bits_sum</name><operator pos:start="85:17" pos:end="85:18">+=</operator> <name pos:start="85:20" pos:end="85:23">bits</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:26"><expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:16">cplx_tab</name><index pos:start="87:17" pos:end="87:19">[<expr pos:start="87:18" pos:end="87:18"><name pos:start="87:18" pos:end="87:18">i</name></expr>]</index></name><operator pos:start="87:20" pos:end="87:20">=</operator> <name pos:start="87:22" pos:end="87:25">cplx</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:16">bits_tab</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">i</name></expr>]</index></name><operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:25">bits</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="95:5" pos:end="95:34">/* handle qmin/qmax cliping */</comment>

    <if_stmt pos:start="97:5" pos:end="125:5"><if pos:start="97:5" pos:end="125:5">if<condition pos:start="97:7" pos:end="97:41">(<expr pos:start="97:8" pos:end="97:40"><name pos:start="97:8" pos:end="97:15"><name pos:start="97:8" pos:end="97:8">s</name><operator pos:start="97:9" pos:end="97:10">-&gt;</operator><name pos:start="97:11" pos:end="97:15">flags</name></name><operator pos:start="97:16" pos:end="97:16">&amp;</operator><name pos:start="97:17" pos:end="97:40">CODEC_FLAG_NORMALIZE_AQP</name></expr>)</condition><block pos:start="97:42" pos:end="125:5">{<block_content pos:start="99:9" pos:end="123:9">

        <for pos:start="99:9" pos:end="123:9">for<control pos:start="99:12" pos:end="99:34">(<init pos:start="99:13" pos:end="99:16"><expr pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:13">i</name><operator pos:start="99:14" pos:end="99:14">=</operator><literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>;</init> <condition pos:start="99:18" pos:end="99:29"><expr pos:start="99:18" pos:end="99:28"><name pos:start="99:18" pos:end="99:18">i</name><operator pos:start="99:19" pos:end="99:19">&lt;</operator><name pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:28">mb_num</name></name></expr>;</condition> <incr pos:start="99:31" pos:end="99:33"><expr pos:start="99:31" pos:end="99:33"><name pos:start="99:31" pos:end="99:31">i</name><operator pos:start="99:32" pos:end="99:33">++</operator></expr></incr>)</control><block pos:start="99:35" pos:end="123:9">{<block_content pos:start="101:13" pos:end="121:13">

            <decl_stmt pos:start="101:13" pos:end="101:50"><decl pos:start="101:13" pos:end="101:49"><type pos:start="101:13" pos:end="101:17"><name pos:start="101:13" pos:end="101:17">float</name></type> <name pos:start="101:19" pos:end="101:22">newq</name><init pos:start="101:23" pos:end="101:49">= <expr pos:start="101:25" pos:end="101:49"><name pos:start="101:25" pos:end="101:25">q</name><operator pos:start="101:26" pos:end="101:26">*</operator><name pos:start="101:27" pos:end="101:37"><name pos:start="101:27" pos:end="101:34">cplx_tab</name><index pos:start="101:35" pos:end="101:37">[<expr pos:start="101:36" pos:end="101:36"><name pos:start="101:36" pos:end="101:36">i</name></expr>]</index></name><operator pos:start="101:38" pos:end="101:38">/</operator><name pos:start="101:39" pos:end="101:49"><name pos:start="101:39" pos:end="101:46">bits_tab</name><index pos:start="101:47" pos:end="101:49">[<expr pos:start="101:48" pos:end="101:48"><name pos:start="101:48" pos:end="101:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:37"><expr pos:start="103:13" pos:end="103:36"><name pos:start="103:13" pos:end="103:16">newq</name><operator pos:start="103:17" pos:end="103:18">*=</operator> <name pos:start="103:20" pos:end="103:27">bits_sum</name><operator pos:start="103:28" pos:end="103:28">/</operator><name pos:start="103:29" pos:end="103:36">cplx_sum</name></expr>;</expr_stmt>



            <if_stmt pos:start="107:13" pos:end="121:13"><if pos:start="107:13" pos:end="113:13">if     <condition pos:start="107:20" pos:end="107:32">(<expr pos:start="107:21" pos:end="107:31"><name pos:start="107:21" pos:end="107:24">newq</name> <operator pos:start="107:26" pos:end="107:26">&gt;</operator> <name pos:start="107:28" pos:end="107:31">qmax</name></expr>)</condition><block pos:start="107:33" pos:end="113:13">{<block_content pos:start="109:17" pos:end="111:47">

                <expr_stmt pos:start="109:17" pos:end="109:40"><expr pos:start="109:17" pos:end="109:39"><name pos:start="109:17" pos:end="109:24">bits_sum</name> <operator pos:start="109:26" pos:end="109:27">-=</operator> <name pos:start="109:29" pos:end="109:39"><name pos:start="109:29" pos:end="109:36">bits_tab</name><index pos:start="109:37" pos:end="109:39">[<expr pos:start="109:38" pos:end="109:38"><name pos:start="109:38" pos:end="109:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:47"><expr pos:start="111:17" pos:end="111:46"><name pos:start="111:17" pos:end="111:24">cplx_sum</name> <operator pos:start="111:26" pos:end="111:27">-=</operator> <name pos:start="111:29" pos:end="111:39"><name pos:start="111:29" pos:end="111:36">cplx_tab</name><index pos:start="111:37" pos:end="111:39">[<expr pos:start="111:38" pos:end="111:38"><name pos:start="111:38" pos:end="111:38">i</name></expr>]</index></name><operator pos:start="111:40" pos:end="111:40">*</operator><name pos:start="111:41" pos:end="111:41">q</name><operator pos:start="111:42" pos:end="111:42">/</operator><name pos:start="111:43" pos:end="111:46">qmax</name></expr>;</expr_stmt>

            </block_content>}</block></if>

            <if type="elseif" pos:start="115:13" pos:end="121:13">else if<condition pos:start="115:20" pos:end="115:32">(<expr pos:start="115:21" pos:end="115:31"><name pos:start="115:21" pos:end="115:24">newq</name> <operator pos:start="115:26" pos:end="115:26">&lt;</operator> <name pos:start="115:28" pos:end="115:31">qmin</name></expr>)</condition><block pos:start="115:33" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:47">

                <expr_stmt pos:start="117:17" pos:end="117:40"><expr pos:start="117:17" pos:end="117:39"><name pos:start="117:17" pos:end="117:24">bits_sum</name> <operator pos:start="117:26" pos:end="117:27">-=</operator> <name pos:start="117:29" pos:end="117:39"><name pos:start="117:29" pos:end="117:36">bits_tab</name><index pos:start="117:37" pos:end="117:39">[<expr pos:start="117:38" pos:end="117:38"><name pos:start="117:38" pos:end="117:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:47"><expr pos:start="119:17" pos:end="119:46"><name pos:start="119:17" pos:end="119:24">cplx_sum</name> <operator pos:start="119:26" pos:end="119:27">-=</operator> <name pos:start="119:29" pos:end="119:39"><name pos:start="119:29" pos:end="119:36">cplx_tab</name><index pos:start="119:37" pos:end="119:39">[<expr pos:start="119:38" pos:end="119:38"><name pos:start="119:38" pos:end="119:38">i</name></expr>]</index></name><operator pos:start="119:40" pos:end="119:40">*</operator><name pos:start="119:41" pos:end="119:41">q</name><operator pos:start="119:42" pos:end="119:42">/</operator><name pos:start="119:43" pos:end="119:46">qmin</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

   

    <for pos:start="129:5" pos:end="165:5">for<control pos:start="129:8" pos:end="129:30">(<init pos:start="129:9" pos:end="129:12"><expr pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:9">i</name><operator pos:start="129:10" pos:end="129:10">=</operator><literal type="number" pos:start="129:11" pos:end="129:11">0</literal></expr>;</init> <condition pos:start="129:14" pos:end="129:25"><expr pos:start="129:14" pos:end="129:24"><name pos:start="129:14" pos:end="129:14">i</name><operator pos:start="129:15" pos:end="129:15">&lt;</operator><name pos:start="129:16" pos:end="129:24"><name pos:start="129:16" pos:end="129:16">s</name><operator pos:start="129:17" pos:end="129:18">-&gt;</operator><name pos:start="129:19" pos:end="129:24">mb_num</name></name></expr>;</condition> <incr pos:start="129:27" pos:end="129:29"><expr pos:start="129:27" pos:end="129:29"><name pos:start="129:27" pos:end="129:27">i</name><operator pos:start="129:28" pos:end="129:29">++</operator></expr></incr>)</control><block pos:start="129:31" pos:end="165:5">{<block_content pos:start="131:9" pos:end="163:35">

        <decl_stmt pos:start="131:9" pos:end="131:46"><decl pos:start="131:9" pos:end="131:45"><type pos:start="131:9" pos:end="131:13"><name pos:start="131:9" pos:end="131:13">float</name></type> <name pos:start="131:15" pos:end="131:18">newq</name><init pos:start="131:19" pos:end="131:45">= <expr pos:start="131:21" pos:end="131:45"><name pos:start="131:21" pos:end="131:21">q</name><operator pos:start="131:22" pos:end="131:22">*</operator><name pos:start="131:23" pos:end="131:33"><name pos:start="131:23" pos:end="131:30">cplx_tab</name><index pos:start="131:31" pos:end="131:33">[<expr pos:start="131:32" pos:end="131:32"><name pos:start="131:32" pos:end="131:32">i</name></expr>]</index></name><operator pos:start="131:34" pos:end="131:34">/</operator><name pos:start="131:35" pos:end="131:45"><name pos:start="131:35" pos:end="131:42">bits_tab</name><index pos:start="131:43" pos:end="131:45">[<expr pos:start="131:44" pos:end="131:44"><name pos:start="131:44" pos:end="131:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:17"><decl pos:start="133:9" pos:end="133:16"><type pos:start="133:9" pos:end="133:11"><name pos:start="133:9" pos:end="133:11">int</name></type> <name pos:start="133:13" pos:end="133:16">intq</name></decl>;</decl_stmt>



        <if_stmt pos:start="137:9" pos:end="141:9"><if pos:start="137:9" pos:end="141:9">if<condition pos:start="137:11" pos:end="137:45">(<expr pos:start="137:12" pos:end="137:44"><name pos:start="137:12" pos:end="137:19"><name pos:start="137:12" pos:end="137:12">s</name><operator pos:start="137:13" pos:end="137:14">-&gt;</operator><name pos:start="137:15" pos:end="137:19">flags</name></name><operator pos:start="137:20" pos:end="137:20">&amp;</operator><name pos:start="137:21" pos:end="137:44">CODEC_FLAG_NORMALIZE_AQP</name></expr>)</condition><block pos:start="137:46" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:37">

            <expr_stmt pos:start="139:13" pos:end="139:37"><expr pos:start="139:13" pos:end="139:36"><name pos:start="139:13" pos:end="139:16">newq</name><operator pos:start="139:17" pos:end="139:18">*=</operator> <name pos:start="139:20" pos:end="139:27">bits_sum</name><operator pos:start="139:28" pos:end="139:28">/</operator><name pos:start="139:29" pos:end="139:36">cplx_sum</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="145:9" pos:end="151:36"><if pos:start="145:9" pos:end="147:41">if<condition pos:start="145:11" pos:end="145:56">(<expr pos:start="145:12" pos:end="145:55"><name pos:start="145:12" pos:end="145:12">i</name> <operator pos:start="145:14" pos:end="145:15">&amp;&amp;</operator> <call pos:start="145:17" pos:end="145:50"><name pos:start="145:17" pos:end="145:19">ABS</name><argument_list pos:start="145:20" pos:end="145:50">(<argument pos:start="145:21" pos:end="145:49"><expr pos:start="145:21" pos:end="145:49"><name pos:start="145:21" pos:end="145:42"><name pos:start="145:21" pos:end="145:23">pic</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:37">qscale_table</name><index pos:start="145:38" pos:end="145:42">[<expr pos:start="145:39" pos:end="145:41"><name pos:start="145:39" pos:end="145:39">i</name><operator pos:start="145:40" pos:end="145:40">-</operator><literal type="number" pos:start="145:41" pos:end="145:41">1</literal></expr>]</index></name> <operator pos:start="145:44" pos:end="145:44">-</operator> <name pos:start="145:46" pos:end="145:49">newq</name></expr></argument>)</argument_list></call><operator pos:start="145:51" pos:end="145:51">&lt;</operator><literal type="number" pos:start="145:52" pos:end="145:55">0.75</literal></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:41"><block_content pos:start="147:13" pos:end="147:41">

            <expr_stmt pos:start="147:13" pos:end="147:41"><expr pos:start="147:13" pos:end="147:40"><name pos:start="147:13" pos:end="147:16">intq</name><operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:40"><name pos:start="147:19" pos:end="147:21">pic</name><operator pos:start="147:22" pos:end="147:23">-&gt;</operator><name pos:start="147:24" pos:end="147:35">qscale_table</name><index pos:start="147:36" pos:end="147:40">[<expr pos:start="147:37" pos:end="147:39"><name pos:start="147:37" pos:end="147:37">i</name><operator pos:start="147:38" pos:end="147:38">-</operator><literal type="number" pos:start="147:39" pos:end="147:39">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="149:9" pos:end="151:36">else<block type="pseudo" pos:start="151:13" pos:end="151:36"><block_content pos:start="151:13" pos:end="151:36">

            <expr_stmt pos:start="151:13" pos:end="151:36"><expr pos:start="151:13" pos:end="151:35"><name pos:start="151:13" pos:end="151:16">intq</name><operator pos:start="151:17" pos:end="151:17">=</operator> <operator pos:start="151:19" pos:end="151:19">(</operator><name pos:start="151:20" pos:end="151:22">int</name><operator pos:start="151:23" pos:end="151:23">)</operator><operator pos:start="151:24" pos:end="151:24">(</operator><name pos:start="151:25" pos:end="151:28">newq</name> <operator pos:start="151:30" pos:end="151:30">+</operator> <literal type="number" pos:start="151:32" pos:end="151:34">0.5</literal><operator pos:start="151:35" pos:end="151:35">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="155:9" pos:end="157:40"><if pos:start="155:9" pos:end="155:40">if     <condition pos:start="155:16" pos:end="155:28">(<expr pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:20">intq</name> <operator pos:start="155:22" pos:end="155:22">&gt;</operator> <name pos:start="155:24" pos:end="155:27">qmax</name></expr>)</condition><block type="pseudo" pos:start="155:30" pos:end="155:40"><block_content pos:start="155:30" pos:end="155:40"> <expr_stmt pos:start="155:30" pos:end="155:40"><expr pos:start="155:30" pos:end="155:39"><name pos:start="155:30" pos:end="155:33">intq</name><operator pos:start="155:34" pos:end="155:34">=</operator> <name pos:start="155:36" pos:end="155:39">qmax</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="157:9" pos:end="157:40">else if<condition pos:start="157:16" pos:end="157:28">(<expr pos:start="157:17" pos:end="157:27"><name pos:start="157:17" pos:end="157:20">intq</name> <operator pos:start="157:22" pos:end="157:22">&lt;</operator> <name pos:start="157:24" pos:end="157:27">qmin</name></expr>)</condition><block type="pseudo" pos:start="157:30" pos:end="157:40"><block_content pos:start="157:30" pos:end="157:40"> <expr_stmt pos:start="157:30" pos:end="157:40"><expr pos:start="157:30" pos:end="157:39"><name pos:start="157:30" pos:end="157:33">intq</name><operator pos:start="157:34" pos:end="157:34">=</operator> <name pos:start="157:36" pos:end="157:39">qmin</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="159:1" pos:end="159:36">//if(i%s-&gt;mb_width==0) printf("\n");</comment>

<comment type="line" pos:start="161:1" pos:end="161:52">//printf("%2d%3d ", intq, ff_sqrt(s-&gt;mc_mb_var[i]));</comment>

        <expr_stmt pos:start="163:9" pos:end="163:35"><expr pos:start="163:9" pos:end="163:34"><name pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:11">pic</name><operator pos:start="163:12" pos:end="163:13">-&gt;</operator><name pos:start="163:14" pos:end="163:25">qscale_table</name><index pos:start="163:26" pos:end="163:28">[<expr pos:start="163:27" pos:end="163:27"><name pos:start="163:27" pos:end="163:27">i</name></expr>]</index></name><operator pos:start="163:29" pos:end="163:29">=</operator> <name pos:start="163:31" pos:end="163:34">intq</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
