<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24383.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">sofalizer_convolute</name><parameter_list pos:start="1:31" pos:end="1:87">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:46">AVFilterContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">ctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">arg</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:73">jobnr</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:86"><decl pos:start="1:76" pos:end="1:86"><type pos:start="1:76" pos:end="1:86"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:86">nb_jobs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">SOFAlizerContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:35">= <expr pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:35"><name pos:start="5:27" pos:end="5:29">ctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:35">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">ThreadData</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">td</name> <init pos:start="7:20" pos:end="7:24">= <expr pos:start="7:22" pos:end="7:24"><name pos:start="7:22" pos:end="7:24">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">in</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:24"><name pos:start="9:19" pos:end="9:20">td</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:24">in</name></name></expr></init></decl>, <decl pos:start="9:27" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:13"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:30">out</name> <init pos:start="9:32" pos:end="9:40">= <expr pos:start="9:34" pos:end="9:40"><name pos:start="9:34" pos:end="9:40"><name pos:start="9:34" pos:end="9:35">td</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:40">out</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">offset</name> <init pos:start="11:16" pos:end="11:22">= <expr pos:start="11:18" pos:end="11:22"><name pos:start="11:18" pos:end="11:22">jobnr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">int</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:14">write</name> <init pos:start="13:16" pos:end="13:34">= <expr pos:start="13:18" pos:end="13:34"><operator pos:start="13:18" pos:end="13:18">&amp;</operator><name pos:start="13:19" pos:end="13:34"><name pos:start="13:19" pos:end="13:20">td</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:27">write</name><index pos:start="13:28" pos:end="13:34">[<expr pos:start="13:29" pos:end="13:33"><name pos:start="13:29" pos:end="13:33">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:20"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier><specifier pos:start="15:16" pos:end="15:20">const</specifier></type> <name pos:start="15:22" pos:end="15:26">delay</name> <init pos:start="15:28" pos:end="15:45">= <expr pos:start="15:30" pos:end="15:45"><name pos:start="15:30" pos:end="15:45"><name pos:start="15:30" pos:end="15:31">td</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:38">delay</name><index pos:start="15:39" pos:end="15:45">[<expr pos:start="15:40" pos:end="15:44"><name pos:start="15:40" pos:end="15:44">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:41"><type pos:start="17:5" pos:end="17:22"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:15">float</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier><specifier pos:start="17:18" pos:end="17:22">const</specifier></type> <name pos:start="17:24" pos:end="17:25">ir</name> <init pos:start="17:27" pos:end="17:41">= <expr pos:start="17:29" pos:end="17:41"><name pos:start="17:29" pos:end="17:41"><name pos:start="17:29" pos:end="17:30">td</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:34">ir</name><index pos:start="17:35" pos:end="17:41">[<expr pos:start="17:36" pos:end="17:40"><name pos:start="17:36" pos:end="17:40">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">int</name> <modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:20">n_clippings</name> <init pos:start="19:22" pos:end="19:46">= <expr pos:start="19:24" pos:end="19:46"><operator pos:start="19:24" pos:end="19:24">&amp;</operator><name pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:26">td</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:39">n_clippings</name><index pos:start="19:40" pos:end="19:46">[<expr pos:start="19:41" pos:end="19:45"><name pos:start="19:41" pos:end="19:45">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:46"><decl pos:start="21:5" pos:end="21:45"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">float</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:21">ringbuffer</name> <init pos:start="21:23" pos:end="21:45">= <expr pos:start="21:25" pos:end="21:45"><name pos:start="21:25" pos:end="21:45"><name pos:start="21:25" pos:end="21:26">td</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:38">ringbuffer</name><index pos:start="21:39" pos:end="21:45">[<expr pos:start="21:40" pos:end="21:44"><name pos:start="21:40" pos:end="21:44">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:42"><decl pos:start="23:5" pos:end="23:41"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">float</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:19">temp_src</name> <init pos:start="23:21" pos:end="23:41">= <expr pos:start="23:23" pos:end="23:41"><name pos:start="23:23" pos:end="23:41"><name pos:start="23:23" pos:end="23:24">td</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:34">temp_src</name><index pos:start="23:35" pos:end="23:41">[<expr pos:start="23:36" pos:end="23:40"><name pos:start="23:36" pos:end="23:40">jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:44"><decl pos:start="25:5" pos:end="25:43"><type pos:start="25:5" pos:end="25:13"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:13">int</name></type> <name pos:start="25:15" pos:end="25:23">n_samples</name> <init pos:start="25:25" pos:end="25:43">= <expr pos:start="25:27" pos:end="25:43"><name pos:start="25:27" pos:end="25:43"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:33">sofa</name><operator pos:start="25:34" pos:end="25:34">.</operator><name pos:start="25:35" pos:end="25:43">n_samples</name></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="25:46" pos:end="25:67">/* length of one IR */</comment>

    <decl_stmt pos:start="27:5" pos:end="27:50"><decl pos:start="27:5" pos:end="27:49"><type pos:start="27:5" pos:end="27:17"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:15">float</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:20">src</name> <init pos:start="27:22" pos:end="27:49">= <expr pos:start="27:24" pos:end="27:49"><operator pos:start="27:24" pos:end="27:24">(</operator><specifier pos:start="27:25" pos:end="27:29">const</specifier> <name pos:start="27:31" pos:end="27:35">float</name> <operator pos:start="27:37" pos:end="27:37">*</operator><operator pos:start="27:38" pos:end="27:38">)</operator><name pos:start="27:39" pos:end="27:49"><name pos:start="27:39" pos:end="27:40">in</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:46">data</name><index pos:start="27:47" pos:end="27:49">[<expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="27:52" pos:end="27:90">/* get pointer to audio input buffer */</comment>

    <decl_stmt pos:start="29:5" pos:end="29:39"><decl pos:start="29:5" pos:end="29:38"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">float</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:14">dst</name> <init pos:start="29:16" pos:end="29:38">= <expr pos:start="29:18" pos:end="29:38"><operator pos:start="29:18" pos:end="29:18">(</operator><name pos:start="29:19" pos:end="29:23">float</name> <operator pos:start="29:25" pos:end="29:25">*</operator><operator pos:start="29:26" pos:end="29:26">)</operator><name pos:start="29:27" pos:end="29:38"><name pos:start="29:27" pos:end="29:29">out</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:35">data</name><index pos:start="29:36" pos:end="29:38">[<expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="29:41" pos:end="29:80">/* get pointer to audio output buffer */</comment>

    <decl_stmt pos:start="31:5" pos:end="31:38"><decl pos:start="31:5" pos:end="31:37"><type pos:start="31:5" pos:end="31:13"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:13">int</name></type> <name pos:start="31:15" pos:end="31:25">in_channels</name> <init pos:start="31:27" pos:end="31:37">= <expr pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:37">n_conv</name></name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="31:40" pos:end="31:69">/* number of input channels */</comment>

    <comment type="block" pos:start="33:5" pos:end="33:78">/* ring buffer length is: longest IR plus max. delay -&gt; next power of 2 */</comment>

    <decl_stmt pos:start="35:5" pos:end="35:47"><decl pos:start="35:5" pos:end="35:46"><type pos:start="35:5" pos:end="35:13"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:13">int</name></type> <name pos:start="35:15" pos:end="35:27">buffer_length</name> <init pos:start="35:29" pos:end="35:46">= <expr pos:start="35:31" pos:end="35:46"><name pos:start="35:31" pos:end="35:46"><name pos:start="35:31" pos:end="35:31">s</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:46">buffer_length</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:64">/* -1 for AND instead of MODULO (applied to powers of 2): */</comment>

    <decl_stmt pos:start="39:5" pos:end="39:56"><decl pos:start="39:5" pos:end="39:55"><type pos:start="39:5" pos:end="39:18"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:18">uint32_t</name></type> <name pos:start="39:20" pos:end="39:25">modulo</name> <init pos:start="39:27" pos:end="39:55">= <expr pos:start="39:29" pos:end="39:55"><operator pos:start="39:29" pos:end="39:29">(</operator><name pos:start="39:30" pos:end="39:37">uint32_t</name><operator pos:start="39:38" pos:end="39:38">)</operator><name pos:start="39:39" pos:end="39:51">buffer_length</name> <operator pos:start="39:53" pos:end="39:53">-</operator> <literal type="number" pos:start="39:55" pos:end="39:55">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:11"><name pos:start="41:5" pos:end="41:9">float</name> <modifier pos:start="41:11" pos:end="41:11">*</modifier></type><name pos:start="41:12" pos:end="41:21"><name pos:start="41:12" pos:end="41:17">buffer</name><index pos:start="41:18" pos:end="41:21">[<expr pos:start="41:19" pos:end="41:20"><literal type="number" pos:start="41:19" pos:end="41:20">16</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="41:24" pos:end="41:68">/* holds ringbuffer for each input channel */</comment>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:10">wr</name> <init pos:start="43:12" pos:end="43:19">= <expr pos:start="43:14" pos:end="43:19"><operator pos:start="43:14" pos:end="43:14">*</operator><name pos:start="43:15" pos:end="43:19">write</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:13"><decl pos:start="45:5" pos:end="45:12"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:12">read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:13"><decl pos:start="47:5" pos:end="47:9"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:9">i</name></decl>, <decl pos:start="47:12" pos:end="47:12"><type ref="prev" pos:start="47:5" pos:end="47:7"/><name pos:start="47:12" pos:end="47:12">l</name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:18"><expr pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:7">dst</name> <operator pos:start="51:9" pos:end="51:10">+=</operator> <name pos:start="51:12" pos:end="51:17">offset</name></expr>;</expr_stmt>

    <for pos:start="53:5" pos:end="59:5">for <control pos:start="53:9" pos:end="53:37">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">l</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:32"><expr pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:17">l</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:31">in_channels</name></expr>;</condition> <incr pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><name pos:start="53:34" pos:end="53:34">l</name><operator pos:start="53:35" pos:end="53:36">++</operator></expr></incr>)</control> <block pos:start="53:39" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:51">

        <comment type="block" pos:start="55:9" pos:end="55:71">/* get starting address of ringbuffer for each input channel */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:14">buffer</name><index pos:start="57:15" pos:end="57:17">[<expr pos:start="57:16" pos:end="57:16"><name pos:start="57:16" pos:end="57:16">l</name></expr>]</index></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:30">ringbuffer</name> <operator pos:start="57:32" pos:end="57:32">+</operator> <name pos:start="57:34" pos:end="57:34">l</name> <operator pos:start="57:36" pos:end="57:36">*</operator> <name pos:start="57:38" pos:end="57:50">buffer_length</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="63:5" pos:end="159:5">for <control pos:start="63:9" pos:end="63:40">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:35"><expr pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:34"><name pos:start="63:21" pos:end="63:22">in</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:34">nb_samples</name></name></expr>;</condition> <incr pos:start="63:37" pos:end="63:39"><expr pos:start="63:37" pos:end="63:39"><name pos:start="63:37" pos:end="63:37">i</name><operator pos:start="63:38" pos:end="63:39">++</operator></expr></incr>)</control> <block pos:start="63:42" pos:end="159:5">{<block_content pos:start="65:9" pos:end="157:33">

        <decl_stmt pos:start="65:9" pos:end="65:34"><decl pos:start="65:9" pos:end="65:33"><type pos:start="65:9" pos:end="65:21"><specifier pos:start="65:9" pos:end="65:13">const</specifier> <name pos:start="65:15" pos:end="65:19">float</name> <modifier pos:start="65:21" pos:end="65:21">*</modifier></type><name pos:start="65:22" pos:end="65:28">temp_ir</name> <init pos:start="65:30" pos:end="65:33">= <expr pos:start="65:32" pos:end="65:33"><name pos:start="65:32" pos:end="65:33">ir</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="65:36" pos:end="65:78">/* using same set of IRs for each sample */</comment>



        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><operator pos:start="69:9" pos:end="69:9">*</operator><name pos:start="69:10" pos:end="69:12">dst</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</expr_stmt>

        <for pos:start="71:9" pos:end="77:9">for <control pos:start="71:13" pos:end="71:41">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">l</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:36"><expr pos:start="71:21" pos:end="71:35"><name pos:start="71:21" pos:end="71:21">l</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:35">in_channels</name></expr>;</condition> <incr pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><name pos:start="71:38" pos:end="71:38">l</name><operator pos:start="71:39" pos:end="71:40">++</operator></expr></incr>)</control> <block pos:start="71:43" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:39">

            <comment type="block" pos:start="73:13" pos:end="73:77">/* write current input sample to ringbuffer (for each channel) */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:39"><expr pos:start="75:13" pos:end="75:38"><operator pos:start="75:13" pos:end="75:13">*</operator><operator pos:start="75:14" pos:end="75:14">(</operator><name pos:start="75:15" pos:end="75:23"><name pos:start="75:15" pos:end="75:20">buffer</name><index pos:start="75:21" pos:end="75:23">[<expr pos:start="75:22" pos:end="75:22"><name pos:start="75:22" pos:end="75:22">l</name></expr>]</index></name> <operator pos:start="75:25" pos:end="75:25">+</operator> <name pos:start="75:27" pos:end="75:28">wr</name><operator pos:start="75:29" pos:end="75:29">)</operator> <operator pos:start="75:31" pos:end="75:31">=</operator> <name pos:start="75:33" pos:end="75:38"><name pos:start="75:33" pos:end="75:35">src</name><index pos:start="75:36" pos:end="75:38">[<expr pos:start="75:37" pos:end="75:37"><name pos:start="75:37" pos:end="75:37">l</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="81:9" pos:end="81:60">/* loop goes through all channels to be convolved */</comment>

        <for pos:start="83:9" pos:end="139:9">for <control pos:start="83:13" pos:end="83:41">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">l</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:36"><expr pos:start="83:21" pos:end="83:35"><name pos:start="83:21" pos:end="83:21">l</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <name pos:start="83:25" pos:end="83:35">in_channels</name></expr>;</condition> <incr pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:38">l</name><operator pos:start="83:39" pos:end="83:40">++</operator></expr></incr>)</control> <block pos:start="83:43" pos:end="139:9">{<block_content pos:start="85:13" pos:end="137:33">

            <decl_stmt pos:start="85:13" pos:end="85:48"><decl pos:start="85:13" pos:end="85:47"><type pos:start="85:13" pos:end="85:30"><specifier pos:start="85:13" pos:end="85:17">const</specifier> <name pos:start="85:19" pos:end="85:23">float</name> <modifier pos:start="85:25" pos:end="85:25">*</modifier><specifier pos:start="85:26" pos:end="85:30">const</specifier></type> <name pos:start="85:32" pos:end="85:35">bptr</name> <init pos:start="85:37" pos:end="85:47">= <expr pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:44">buffer</name><index pos:start="85:45" pos:end="85:47">[<expr pos:start="85:46" pos:end="85:46"><name pos:start="85:46" pos:end="85:46">l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="89:13" pos:end="101:13"><if pos:start="89:13" pos:end="101:13">if <condition pos:start="89:16" pos:end="89:36">(<expr pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:17">l</name> <operator pos:start="89:19" pos:end="89:20">==</operator> <name pos:start="89:22" pos:end="89:35"><name pos:start="89:22" pos:end="89:22">s</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:35">lfe_channel</name></name></expr>)</condition> <block pos:start="89:38" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:25">

                <comment type="block" pos:start="91:17" pos:end="91:73">/* LFE is an input channel but requires no convolution */</comment>

                <comment type="block" pos:start="93:17" pos:end="93:71">/* apply gain to LFE signal and add to output buffer */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:69"><expr pos:start="95:17" pos:end="95:68"><operator pos:start="95:17" pos:end="95:17">*</operator><name pos:start="95:18" pos:end="95:20">dst</name> <operator pos:start="95:22" pos:end="95:23">+=</operator> <operator pos:start="95:25" pos:end="95:25">*</operator><operator pos:start="95:26" pos:end="95:26">(</operator><name pos:start="95:27" pos:end="95:48"><name pos:start="95:27" pos:end="95:32">buffer</name><index pos:start="95:33" pos:end="95:48">[<expr pos:start="95:34" pos:end="95:47"><name pos:start="95:34" pos:end="95:47"><name pos:start="95:34" pos:end="95:34">s</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:47">lfe_channel</name></name></expr>]</index></name> <operator pos:start="95:50" pos:end="95:50">+</operator> <name pos:start="95:52" pos:end="95:53">wr</name><operator pos:start="95:54" pos:end="95:54">)</operator> <operator pos:start="95:56" pos:end="95:56">*</operator> <name pos:start="95:58" pos:end="95:68"><name pos:start="95:58" pos:end="95:58">s</name><operator pos:start="95:59" pos:end="95:60">-&gt;</operator><name pos:start="95:61" pos:end="95:68">gain_lfe</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:37"><expr pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:23">temp_ir</name> <operator pos:start="97:25" pos:end="97:26">+=</operator> <name pos:start="97:28" pos:end="97:36">n_samples</name></expr>;</expr_stmt>

                <continue pos:start="99:17" pos:end="99:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="105:13" pos:end="109:37">/* current read position in ringbuffer: input sample write position

             * - delay for l-th ch. + diff. betw. IR length and buffer length

             * (mod buffer length) */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:82"><expr pos:start="111:13" pos:end="111:81"><name pos:start="111:13" pos:end="111:16">read</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <operator pos:start="111:20" pos:end="111:20">(</operator><name pos:start="111:21" pos:end="111:22">wr</name> <operator pos:start="111:24" pos:end="111:24">-</operator> <operator pos:start="111:26" pos:end="111:26">*</operator><operator pos:start="111:27" pos:end="111:27">(</operator><name pos:start="111:28" pos:end="111:32">delay</name> <operator pos:start="111:34" pos:end="111:34">+</operator> <name pos:start="111:36" pos:end="111:36">l</name><operator pos:start="111:37" pos:end="111:37">)</operator> <operator pos:start="111:39" pos:end="111:39">-</operator> <operator pos:start="111:41" pos:end="111:41">(</operator><name pos:start="111:42" pos:end="111:50">n_samples</name> <operator pos:start="111:52" pos:end="111:52">-</operator> <literal type="number" pos:start="111:54" pos:end="111:54">1</literal><operator pos:start="111:55" pos:end="111:55">)</operator> <operator pos:start="111:57" pos:end="111:57">+</operator> <name pos:start="111:59" pos:end="111:71">buffer_length</name><operator pos:start="111:72" pos:end="111:72">)</operator> <operator pos:start="111:74" pos:end="111:74">&amp;</operator> <name pos:start="111:76" pos:end="111:81">modulo</name></expr>;</expr_stmt>



            <if_stmt pos:start="115:13" pos:end="129:13"><if pos:start="115:13" pos:end="119:13">if <condition pos:start="115:16" pos:end="115:49">(<expr pos:start="115:17" pos:end="115:48"><name pos:start="115:17" pos:end="115:20">read</name> <operator pos:start="115:22" pos:end="115:22">+</operator> <name pos:start="115:24" pos:end="115:32">n_samples</name> <operator pos:start="115:34" pos:end="115:34">&lt;</operator> <name pos:start="115:36" pos:end="115:48">buffer_length</name></expr>)</condition> <block pos:start="115:51" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:77">

                <expr_stmt pos:start="117:17" pos:end="117:77"><expr pos:start="117:17" pos:end="117:76"><call pos:start="117:17" pos:end="117:76"><name pos:start="117:17" pos:end="117:22">memcpy</name><argument_list pos:start="117:23" pos:end="117:76">(<argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31">temp_src</name></expr></argument>, <argument pos:start="117:34" pos:end="117:44"><expr pos:start="117:34" pos:end="117:44"><name pos:start="117:34" pos:end="117:37">bptr</name> <operator pos:start="117:39" pos:end="117:39">+</operator> <name pos:start="117:41" pos:end="117:44">read</name></expr></argument>, <argument pos:start="117:47" pos:end="117:75"><expr pos:start="117:47" pos:end="117:75"><name pos:start="117:47" pos:end="117:55">n_samples</name> <operator pos:start="117:57" pos:end="117:57">*</operator> <sizeof pos:start="117:59" pos:end="117:75">sizeof<argument_list pos:start="117:65" pos:end="117:75">(<argument pos:start="117:66" pos:end="117:74"><expr pos:start="117:66" pos:end="117:74"><operator pos:start="117:66" pos:end="117:66">*</operator><name pos:start="117:67" pos:end="117:74">temp_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="119:15" pos:end="129:13">else <block pos:start="119:20" pos:end="129:13">{<block_content pos:start="121:17" pos:end="127:84">

                <decl_stmt pos:start="121:17" pos:end="121:86"><decl pos:start="121:17" pos:end="121:85"><type pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">int</name></type> <name pos:start="121:21" pos:end="121:23">len</name> <init pos:start="121:25" pos:end="121:85">= <expr pos:start="121:27" pos:end="121:85"><call pos:start="121:27" pos:end="121:85"><name pos:start="121:27" pos:end="121:31">FFMIN</name><argument_list pos:start="121:32" pos:end="121:85">(<argument pos:start="121:33" pos:end="121:62"><expr pos:start="121:33" pos:end="121:62"><name pos:start="121:33" pos:end="121:41">n_samples</name> <operator pos:start="121:43" pos:end="121:43">-</operator> <operator pos:start="121:45" pos:end="121:45">(</operator><name pos:start="121:46" pos:end="121:49">read</name> <operator pos:start="121:51" pos:end="121:51">%</operator> <name pos:start="121:53" pos:end="121:61">n_samples</name><operator pos:start="121:62" pos:end="121:62">)</operator></expr></argument>, <argument pos:start="121:65" pos:end="121:84"><expr pos:start="121:65" pos:end="121:84"><name pos:start="121:65" pos:end="121:77">buffer_length</name> <operator pos:start="121:79" pos:end="121:79">-</operator> <name pos:start="121:81" pos:end="121:84">read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="125:17" pos:end="125:71"><expr pos:start="125:17" pos:end="125:70"><call pos:start="125:17" pos:end="125:70"><name pos:start="125:17" pos:end="125:22">memcpy</name><argument_list pos:start="125:23" pos:end="125:70">(<argument pos:start="125:24" pos:end="125:31"><expr pos:start="125:24" pos:end="125:31"><name pos:start="125:24" pos:end="125:31">temp_src</name></expr></argument>, <argument pos:start="125:34" pos:end="125:44"><expr pos:start="125:34" pos:end="125:44"><name pos:start="125:34" pos:end="125:37">bptr</name> <operator pos:start="125:39" pos:end="125:39">+</operator> <name pos:start="125:41" pos:end="125:44">read</name></expr></argument>, <argument pos:start="125:47" pos:end="125:69"><expr pos:start="125:47" pos:end="125:69"><name pos:start="125:47" pos:end="125:49">len</name> <operator pos:start="125:51" pos:end="125:51">*</operator> <sizeof pos:start="125:53" pos:end="125:69">sizeof<argument_list pos:start="125:59" pos:end="125:69">(<argument pos:start="125:60" pos:end="125:68"><expr pos:start="125:60" pos:end="125:68"><operator pos:start="125:60" pos:end="125:60">*</operator><name pos:start="125:61" pos:end="125:68">temp_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:84"><expr pos:start="127:17" pos:end="127:83"><call pos:start="127:17" pos:end="127:83"><name pos:start="127:17" pos:end="127:22">memcpy</name><argument_list pos:start="127:23" pos:end="127:83">(<argument pos:start="127:24" pos:end="127:37"><expr pos:start="127:24" pos:end="127:37"><name pos:start="127:24" pos:end="127:31">temp_src</name> <operator pos:start="127:33" pos:end="127:33">+</operator> <name pos:start="127:35" pos:end="127:37">len</name></expr></argument>, <argument pos:start="127:40" pos:end="127:43"><expr pos:start="127:40" pos:end="127:43"><name pos:start="127:40" pos:end="127:43">bptr</name></expr></argument>, <argument pos:start="127:46" pos:end="127:82"><expr pos:start="127:46" pos:end="127:82"><operator pos:start="127:46" pos:end="127:46">(</operator><name pos:start="127:47" pos:end="127:55">n_samples</name> <operator pos:start="127:57" pos:end="127:57">-</operator> <name pos:start="127:59" pos:end="127:61">len</name><operator pos:start="127:62" pos:end="127:62">)</operator> <operator pos:start="127:64" pos:end="127:64">*</operator> <sizeof pos:start="127:66" pos:end="127:82">sizeof<argument_list pos:start="127:72" pos:end="127:82">(<argument pos:start="127:73" pos:end="127:81"><expr pos:start="127:73" pos:end="127:81"><operator pos:start="127:73" pos:end="127:73">*</operator><name pos:start="127:74" pos:end="127:81">temp_src</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="133:13" pos:end="133:64">/* multiply signal and IR, and add up the results */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:81"><expr pos:start="135:13" pos:end="135:80"><name pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:15">dst</name><index pos:start="135:16" pos:end="135:18">[<expr pos:start="135:17" pos:end="135:17"><literal type="number" pos:start="135:17" pos:end="135:17">0</literal></expr>]</index></name> <operator pos:start="135:20" pos:end="135:21">+=</operator> <call pos:start="135:23" pos:end="135:80"><name pos:start="135:23" pos:end="135:50"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:29">fdsp</name><operator pos:start="135:30" pos:end="135:31">-&gt;</operator><name pos:start="135:32" pos:end="135:50">scalarproduct_float</name></name><argument_list pos:start="135:51" pos:end="135:80">(<argument pos:start="135:52" pos:end="135:58"><expr pos:start="135:52" pos:end="135:58"><name pos:start="135:52" pos:end="135:58">temp_ir</name></expr></argument>, <argument pos:start="135:61" pos:end="135:68"><expr pos:start="135:61" pos:end="135:68"><name pos:start="135:61" pos:end="135:68">temp_src</name></expr></argument>, <argument pos:start="135:71" pos:end="135:79"><expr pos:start="135:71" pos:end="135:79"><name pos:start="135:71" pos:end="135:79">n_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:33"><expr pos:start="137:13" pos:end="137:32"><name pos:start="137:13" pos:end="137:19">temp_ir</name> <operator pos:start="137:21" pos:end="137:22">+=</operator> <name pos:start="137:24" pos:end="137:32">n_samples</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="143:9" pos:end="143:31">/* clippings counter */</comment>

        <if_stmt pos:start="145:9" pos:end="147:30"><if pos:start="145:9" pos:end="147:30">if <condition pos:start="145:12" pos:end="145:27">(<expr pos:start="145:13" pos:end="145:26"><call pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:16">fabs</name><argument_list pos:start="145:17" pos:end="145:22">(<argument pos:start="145:18" pos:end="145:21"><expr pos:start="145:18" pos:end="145:21"><operator pos:start="145:18" pos:end="145:18">*</operator><name pos:start="145:19" pos:end="145:21">dst</name></expr></argument>)</argument_list></call> <operator pos:start="145:24" pos:end="145:24">&gt;</operator> <literal type="number" pos:start="145:26" pos:end="145:26">1</literal></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:30"><block_content pos:start="147:13" pos:end="147:30">

            <expr_stmt pos:start="147:13" pos:end="147:30"><expr pos:start="147:13" pos:end="147:29"><operator pos:start="147:13" pos:end="147:13">*</operator><name pos:start="147:14" pos:end="147:24">n_clippings</name> <operator pos:start="147:26" pos:end="147:27">+=</operator> <literal type="number" pos:start="147:29" pos:end="147:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="151:9" pos:end="151:90">/* move output buffer pointer by +2 to get to next sample of processed channel: */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:17"><expr pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:11">dst</name> <operator pos:start="153:13" pos:end="153:14">+=</operator> <literal type="number" pos:start="153:16" pos:end="153:16">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:27"><expr pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:11">src</name> <operator pos:start="155:13" pos:end="155:14">+=</operator> <name pos:start="155:16" pos:end="155:26">in_channels</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:10">wr</name>   <operator pos:start="157:14" pos:end="157:14">=</operator> <operator pos:start="157:16" pos:end="157:16">(</operator><name pos:start="157:17" pos:end="157:18">wr</name> <operator pos:start="157:20" pos:end="157:20">+</operator> <literal type="number" pos:start="157:22" pos:end="157:22">1</literal><operator pos:start="157:23" pos:end="157:23">)</operator> <operator pos:start="157:25" pos:end="157:25">&amp;</operator> <name pos:start="157:27" pos:end="157:32">modulo</name></expr>;</expr_stmt> <comment type="block" pos:start="157:35" pos:end="157:72">/* update ringbuffer write position */</comment>

    </block_content>}</block></for>



    <expr_stmt pos:start="163:5" pos:end="163:16"><expr pos:start="163:5" pos:end="163:15"><operator pos:start="163:5" pos:end="163:5">*</operator><name pos:start="163:6" pos:end="163:10">write</name> <operator pos:start="163:12" pos:end="163:12">=</operator> <name pos:start="163:14" pos:end="163:15">wr</name></expr>;</expr_stmt> <comment type="block" pos:start="163:18" pos:end="163:74">/* remember write position in ringbuffer for next call */</comment>



    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
