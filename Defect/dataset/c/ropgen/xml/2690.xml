<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2690.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">mtree_print_mr</name><parameter_list pos:start="1:27" pos:end="7:67">(<parameter pos:start="1:28" pos:end="1:54"><decl pos:start="1:28" pos:end="1:54"><type pos:start="1:28" pos:end="1:54"><name pos:start="1:28" pos:end="1:43">fprintf_function</name></type> <name pos:start="1:45" pos:end="1:54">mon_printf</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:63"><decl pos:start="1:57" pos:end="1:63"><type pos:start="1:57" pos:end="1:63"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">f</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:45">MemoryRegion</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">mr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:69"><decl pos:start="3:52" pos:end="3:69"><type pos:start="3:52" pos:end="3:69"><name pos:start="3:52" pos:end="3:59">unsigned</name> <name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:69">level</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:38"><decl pos:start="5:28" pos:end="5:38"><type pos:start="5:28" pos:end="5:38"><name pos:start="5:28" pos:end="5:33">hwaddr</name></type> <name pos:start="5:35" pos:end="5:38">base</name></decl></parameter>,

                           <parameter pos:start="7:28" pos:end="7:66"><decl pos:start="7:28" pos:end="7:66"><type pos:start="7:28" pos:end="7:66"><name pos:start="7:28" pos:end="7:47">MemoryRegionListHead</name> <modifier pos:start="7:49" pos:end="7:49">*</modifier></type><name pos:start="7:50" pos:end="7:66">alias_print_queue</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="169:1">{<block_content pos:start="11:5" pos:end="167:5">

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MemoryRegionList</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:28">new_ml</name></decl>, <decl pos:start="11:31" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:22"><modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:33">ml</name></decl>, <decl pos:start="11:36" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:22"><modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:43">next_ml</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:24">MemoryRegionListHead</name></type> <name pos:start="13:26" pos:end="13:42">submr_print_queue</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:22">MemoryRegion</name> <modifier pos:start="15:24" pos:end="15:24">*</modifier></type><name pos:start="15:25" pos:end="15:29">submr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:18">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:12">(<expr pos:start="21:9" pos:end="21:11"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:11">mr</name></expr>)</condition> <block pos:start="21:14" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="29:5" pos:end="33:5">for <control pos:start="29:9" pos:end="29:31">(<init pos:start="29:10" pos:end="29:15"><expr pos:start="29:10" pos:end="29:14"><name pos:start="29:10" pos:end="29:10">i</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</init> <condition pos:start="29:17" pos:end="29:26"><expr pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:17">i</name> <operator pos:start="29:19" pos:end="29:19">&lt;</operator> <name pos:start="29:21" pos:end="29:25">level</name></expr>;</condition> <incr pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:28">i</name><operator pos:start="29:29" pos:end="29:30">++</operator></expr></incr>)</control> <block pos:start="29:33" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:36">

        <expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><call pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:18">mon_printf</name><argument_list pos:start="31:19" pos:end="31:35">(<argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><name pos:start="31:20" pos:end="31:20">f</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">MTREE_INDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="37:5" pos:end="111:5"><if pos:start="37:5" pos:end="93:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:10">mr</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:17">alias</name></name></expr>)</condition> <block pos:start="37:20" pos:end="93:5">{<block_content pos:start="39:9" pos:end="91:53">

        <decl_stmt pos:start="39:9" pos:end="39:29"><decl pos:start="39:9" pos:end="39:28"><type pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:24">MemoryRegionList</name> <modifier pos:start="39:26" pos:end="39:26">*</modifier></type><name pos:start="39:27" pos:end="39:28">ml</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:27"><decl pos:start="41:9" pos:end="41:26"><type pos:start="41:9" pos:end="41:12"><name pos:start="41:9" pos:end="41:12">bool</name></type> <name pos:start="41:14" pos:end="41:18">found</name> <init pos:start="41:20" pos:end="41:26">= <expr pos:start="41:22" pos:end="41:26"><name pos:start="41:22" pos:end="41:26">false</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="45:9" pos:end="45:56">/* check if the alias is already in the queue */</comment>

        <macro pos:start="47:9" pos:end="47:52"><name pos:start="47:9" pos:end="47:22">QTAILQ_FOREACH</name><argument_list pos:start="47:23" pos:end="47:52">(<argument pos:start="47:24" pos:end="47:25">ml</argument>, <argument pos:start="47:28" pos:end="47:44">alias_print_queue</argument>, <argument pos:start="47:47" pos:end="47:51">queue</argument>)</argument_list></macro> <block pos:start="47:54" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:13">

            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:36">(<expr pos:start="49:17" pos:end="49:35"><name pos:start="49:17" pos:end="49:22"><name pos:start="49:17" pos:end="49:18">ml</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:22">mr</name></name> <operator pos:start="49:24" pos:end="49:25">==</operator> <name pos:start="49:27" pos:end="49:35"><name pos:start="49:27" pos:end="49:28">mr</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:35">alias</name></name></expr>)</condition> <block pos:start="49:38" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:29">

                <expr_stmt pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:21">found</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:28">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:19">(<expr pos:start="59:13" pos:end="59:18"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:18">found</name></expr>)</condition> <block pos:start="59:21" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:61">

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:14">ml</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:43"><name pos:start="61:18" pos:end="61:22">g_new</name><argument_list pos:start="61:23" pos:end="61:43">(<argument pos:start="61:24" pos:end="61:39"><expr pos:start="61:24" pos:end="61:39"><name pos:start="61:24" pos:end="61:39">MemoryRegionList</name></expr></argument>, <argument pos:start="61:42" pos:end="61:42"><expr pos:start="61:42" pos:end="61:42"><literal type="number" pos:start="61:42" pos:end="61:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:31"><expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:14">ml</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:18">mr</name></name> <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:30"><name pos:start="63:22" pos:end="63:23">mr</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:30">alias</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:61"><expr pos:start="65:13" pos:end="65:60"><call pos:start="65:13" pos:end="65:60"><name pos:start="65:13" pos:end="65:30">QTAILQ_INSERT_TAIL</name><argument_list pos:start="65:31" pos:end="65:60">(<argument pos:start="65:32" pos:end="65:48"><expr pos:start="65:32" pos:end="65:48"><name pos:start="65:32" pos:end="65:48">alias_print_queue</name></expr></argument>, <argument pos:start="65:51" pos:end="65:52"><expr pos:start="65:51" pos:end="65:52"><name pos:start="65:51" pos:end="65:52">ml</name></expr></argument>, <argument pos:start="65:55" pos:end="65:59"><expr pos:start="65:55" pos:end="65:59"><name pos:start="65:55" pos:end="65:59">queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="91:53"><expr pos:start="69:9" pos:end="91:52"><call pos:start="69:9" pos:end="91:52"><name pos:start="69:9" pos:end="69:18">mon_printf</name><argument_list pos:start="69:19" pos:end="91:52">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">f</name></expr></argument>, <argument pos:start="69:23" pos:end="73:44"><expr pos:start="69:23" pos:end="73:44"><name pos:start="69:23" pos:end="69:36">TARGET_FMT_plx</name> <literal type="string" pos:start="69:38" pos:end="69:40">"-"</literal> <name pos:start="69:42" pos:end="69:55">TARGET_FMT_plx</name>

                   <literal type="string" pos:start="71:20" pos:end="71:50">" (prio %d, %s): alias %s @%s "</literal> <name pos:start="71:52" pos:end="71:65">TARGET_FMT_plx</name>

                   <literal type="string" pos:start="73:20" pos:end="73:22">"-"</literal> <name pos:start="73:24" pos:end="73:37">TARGET_FMT_plx</name> <literal type="string" pos:start="73:39" pos:end="73:44">"%s\n"</literal></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:34"><expr pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:23">base</name> <operator pos:start="75:25" pos:end="75:25">+</operator> <name pos:start="75:27" pos:end="75:34"><name pos:start="75:27" pos:end="75:28">mr</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:34">addr</name></name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:54"><expr pos:start="77:20" pos:end="77:54"><name pos:start="77:20" pos:end="77:23">base</name> <operator pos:start="77:25" pos:end="77:25">+</operator> <name pos:start="77:27" pos:end="77:34"><name pos:start="77:27" pos:end="77:28">mr</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:34">addr</name></name> <operator pos:start="77:36" pos:end="77:36">+</operator> <call pos:start="77:38" pos:end="77:54"><name pos:start="77:38" pos:end="77:44">MR_SIZE</name><argument_list pos:start="77:45" pos:end="77:54">(<argument pos:start="77:46" pos:end="77:53"><expr pos:start="77:46" pos:end="77:53"><name pos:start="77:46" pos:end="77:53"><name pos:start="77:46" pos:end="77:47">mr</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:53">size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="79:20" pos:end="79:31"><expr pos:start="79:20" pos:end="79:31"><name pos:start="79:20" pos:end="79:31"><name pos:start="79:20" pos:end="79:21">mr</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:31">priority</name></name></expr></argument>,

                   <argument pos:start="81:20" pos:end="81:57"><expr pos:start="81:20" pos:end="81:57"><call pos:start="81:20" pos:end="81:57"><name pos:start="81:20" pos:end="81:37">memory_region_type</name><argument_list pos:start="81:38" pos:end="81:57">(<argument pos:start="81:39" pos:end="81:56"><expr pos:start="81:39" pos:end="81:56"><operator pos:start="81:39" pos:end="81:39">(</operator><name pos:start="81:40" pos:end="81:51">MemoryRegion</name> <operator pos:start="81:53" pos:end="81:53">*</operator><operator pos:start="81:54" pos:end="81:54">)</operator><name pos:start="81:55" pos:end="81:56">mr</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:41"><expr pos:start="83:20" pos:end="83:41"><call pos:start="83:20" pos:end="83:41"><name pos:start="83:20" pos:end="83:37">memory_region_name</name><argument_list pos:start="83:38" pos:end="83:41">(<argument pos:start="83:39" pos:end="83:40"><expr pos:start="83:39" pos:end="83:40"><name pos:start="83:39" pos:end="83:40">mr</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:48"><expr pos:start="85:20" pos:end="85:48"><call pos:start="85:20" pos:end="85:48"><name pos:start="85:20" pos:end="85:37">memory_region_name</name><argument_list pos:start="85:38" pos:end="85:48">(<argument pos:start="85:39" pos:end="85:47"><expr pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:47"><name pos:start="85:39" pos:end="85:40">mr</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:47">alias</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="87:20" pos:end="87:35"><expr pos:start="87:20" pos:end="87:35"><name pos:start="87:20" pos:end="87:35"><name pos:start="87:20" pos:end="87:21">mr</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:35">alias_offset</name></name></expr></argument>,

                   <argument pos:start="89:20" pos:end="89:55"><expr pos:start="89:20" pos:end="89:55"><name pos:start="89:20" pos:end="89:35"><name pos:start="89:20" pos:end="89:21">mr</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:35">alias_offset</name></name> <operator pos:start="89:37" pos:end="89:37">+</operator> <call pos:start="89:39" pos:end="89:55"><name pos:start="89:39" pos:end="89:45">MR_SIZE</name><argument_list pos:start="89:46" pos:end="89:55">(<argument pos:start="89:47" pos:end="89:54"><expr pos:start="89:47" pos:end="89:54"><name pos:start="89:47" pos:end="89:54"><name pos:start="89:47" pos:end="89:48">mr</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:54">size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="91:20" pos:end="91:51"><expr pos:start="91:20" pos:end="91:51"><ternary pos:start="91:20" pos:end="91:51"><condition pos:start="91:20" pos:end="91:32"><expr pos:start="91:20" pos:end="91:30"><name pos:start="91:20" pos:end="91:30"><name pos:start="91:20" pos:end="91:21">mr</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:30">enabled</name></name></expr> ?</condition><then pos:start="91:34" pos:end="91:35"> <expr pos:start="91:34" pos:end="91:35"><literal type="string" pos:start="91:34" pos:end="91:35">""</literal></expr> </then><else pos:start="91:37" pos:end="91:51">: <expr pos:start="91:39" pos:end="91:51"><literal type="string" pos:start="91:39" pos:end="91:51">" [disabled]"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="111:5">else <block pos:start="93:12" pos:end="111:5">{<block_content pos:start="95:9" pos:end="109:53">

        <expr_stmt pos:start="95:9" pos:end="109:53"><expr pos:start="95:9" pos:end="109:52"><call pos:start="95:9" pos:end="109:52"><name pos:start="95:9" pos:end="95:18">mon_printf</name><argument_list pos:start="95:19" pos:end="109:52">(<argument pos:start="95:20" pos:end="95:20"><expr pos:start="95:20" pos:end="95:20"><name pos:start="95:20" pos:end="95:20">f</name></expr></argument>,

                   <argument pos:start="97:20" pos:end="97:77"><expr pos:start="97:20" pos:end="97:77"><name pos:start="97:20" pos:end="97:33">TARGET_FMT_plx</name> <literal type="string" pos:start="97:35" pos:end="97:37">"-"</literal> <name pos:start="97:39" pos:end="97:52">TARGET_FMT_plx</name> <literal type="string" pos:start="97:54" pos:end="97:77">" (prio %d, %s): %s%s\n"</literal></expr></argument>,

                   <argument pos:start="99:20" pos:end="99:34"><expr pos:start="99:20" pos:end="99:34"><name pos:start="99:20" pos:end="99:23">base</name> <operator pos:start="99:25" pos:end="99:25">+</operator> <name pos:start="99:27" pos:end="99:34"><name pos:start="99:27" pos:end="99:28">mr</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:34">addr</name></name></expr></argument>,

                   <argument pos:start="101:20" pos:end="101:54"><expr pos:start="101:20" pos:end="101:54"><name pos:start="101:20" pos:end="101:23">base</name> <operator pos:start="101:25" pos:end="101:25">+</operator> <name pos:start="101:27" pos:end="101:34"><name pos:start="101:27" pos:end="101:28">mr</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:34">addr</name></name> <operator pos:start="101:36" pos:end="101:36">+</operator> <call pos:start="101:38" pos:end="101:54"><name pos:start="101:38" pos:end="101:44">MR_SIZE</name><argument_list pos:start="101:45" pos:end="101:54">(<argument pos:start="101:46" pos:end="101:53"><expr pos:start="101:46" pos:end="101:53"><name pos:start="101:46" pos:end="101:53"><name pos:start="101:46" pos:end="101:47">mr</name><operator pos:start="101:48" pos:end="101:49">-&gt;</operator><name pos:start="101:50" pos:end="101:53">size</name></name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="103:20" pos:end="103:31"><expr pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:21">mr</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:31">priority</name></name></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:57"><expr pos:start="105:20" pos:end="105:57"><call pos:start="105:20" pos:end="105:57"><name pos:start="105:20" pos:end="105:37">memory_region_type</name><argument_list pos:start="105:38" pos:end="105:57">(<argument pos:start="105:39" pos:end="105:56"><expr pos:start="105:39" pos:end="105:56"><operator pos:start="105:39" pos:end="105:39">(</operator><name pos:start="105:40" pos:end="105:51">MemoryRegion</name> <operator pos:start="105:53" pos:end="105:53">*</operator><operator pos:start="105:54" pos:end="105:54">)</operator><name pos:start="105:55" pos:end="105:56">mr</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="107:20" pos:end="107:41"><expr pos:start="107:20" pos:end="107:41"><call pos:start="107:20" pos:end="107:41"><name pos:start="107:20" pos:end="107:37">memory_region_name</name><argument_list pos:start="107:38" pos:end="107:41">(<argument pos:start="107:39" pos:end="107:40"><expr pos:start="107:39" pos:end="107:40"><name pos:start="107:39" pos:end="107:40">mr</name></expr></argument>)</argument_list></call></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:51"><expr pos:start="109:20" pos:end="109:51"><ternary pos:start="109:20" pos:end="109:51"><condition pos:start="109:20" pos:end="109:32"><expr pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:21">mr</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:30">enabled</name></name></expr> ?</condition><then pos:start="109:34" pos:end="109:35"> <expr pos:start="109:34" pos:end="109:35"><literal type="string" pos:start="109:34" pos:end="109:35">""</literal></expr> </then><else pos:start="109:37" pos:end="109:51">: <expr pos:start="109:39" pos:end="109:51"><literal type="string" pos:start="109:39" pos:end="109:51">" [disabled]"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:36"><expr pos:start="115:5" pos:end="115:35"><call pos:start="115:5" pos:end="115:35"><name pos:start="115:5" pos:end="115:15">QTAILQ_INIT</name><argument_list pos:start="115:16" pos:end="115:35">(<argument pos:start="115:17" pos:end="115:34"><expr pos:start="115:17" pos:end="115:34"><operator pos:start="115:17" pos:end="115:17">&amp;</operator><name pos:start="115:18" pos:end="115:34">submr_print_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="119:5" pos:end="119:59"><name pos:start="119:5" pos:end="119:18">QTAILQ_FOREACH</name><argument_list pos:start="119:19" pos:end="119:59">(<argument pos:start="119:20" pos:end="119:24">submr</argument>, <argument pos:start="119:27" pos:end="119:41">&amp;mr-&gt;subregions</argument>, <argument pos:start="119:44" pos:end="119:58">subregions_link</argument>)</argument_list></macro> <block pos:start="119:61" pos:end="149:5">{<block_content pos:start="121:9" pos:end="147:9">

        <expr_stmt pos:start="121:9" pos:end="121:44"><expr pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:14">new_ml</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <call pos:start="121:18" pos:end="121:43"><name pos:start="121:18" pos:end="121:22">g_new</name><argument_list pos:start="121:23" pos:end="121:43">(<argument pos:start="121:24" pos:end="121:39"><expr pos:start="121:24" pos:end="121:39"><name pos:start="121:24" pos:end="121:39">MemoryRegionList</name></expr></argument>, <argument pos:start="121:42" pos:end="121:42"><expr pos:start="121:42" pos:end="121:42"><literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:27"><expr pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:14">new_ml</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:18">mr</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:26">submr</name></expr>;</expr_stmt>

        <macro pos:start="125:9" pos:end="125:53"><name pos:start="125:9" pos:end="125:22">QTAILQ_FOREACH</name><argument_list pos:start="125:23" pos:end="125:53">(<argument pos:start="125:24" pos:end="125:25">ml</argument>, <argument pos:start="125:28" pos:end="125:45">&amp;submr_print_queue</argument>, <argument pos:start="125:48" pos:end="125:52">queue</argument>)</argument_list></macro> <block pos:start="125:55" pos:end="141:9">{<block_content pos:start="127:13" pos:end="139:13">

            <if_stmt pos:start="127:13" pos:end="139:13"><if pos:start="127:13" pos:end="139:13">if <condition pos:start="127:16" pos:end="131:58">(<expr pos:start="127:17" pos:end="131:57"><name pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:22">new_ml</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:26">mr</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:32">addr</name></name> <operator pos:start="127:34" pos:end="127:34">&lt;</operator> <name pos:start="127:36" pos:end="127:47"><name pos:start="127:36" pos:end="127:37">ml</name><operator pos:start="127:38" pos:end="127:39">-&gt;</operator><name pos:start="127:40" pos:end="127:41">mr</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:47">addr</name></name> <operator pos:start="127:49" pos:end="127:50">||</operator>

                <operator pos:start="129:17" pos:end="129:17">(</operator><name pos:start="129:18" pos:end="129:33"><name pos:start="129:18" pos:end="129:23">new_ml</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:27">mr</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:33">addr</name></name> <operator pos:start="129:35" pos:end="129:36">==</operator> <name pos:start="129:38" pos:end="129:49"><name pos:start="129:38" pos:end="129:39">ml</name><operator pos:start="129:40" pos:end="129:41">-&gt;</operator><name pos:start="129:42" pos:end="129:43">mr</name><operator pos:start="129:44" pos:end="129:45">-&gt;</operator><name pos:start="129:46" pos:end="129:49">addr</name></name> <operator pos:start="129:51" pos:end="129:52">&amp;&amp;</operator>

                 <name pos:start="131:18" pos:end="131:37"><name pos:start="131:18" pos:end="131:23">new_ml</name><operator pos:start="131:24" pos:end="131:25">-&gt;</operator><name pos:start="131:26" pos:end="131:27">mr</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:37">priority</name></name> <operator pos:start="131:39" pos:end="131:39">&gt;</operator> <name pos:start="131:41" pos:end="131:56"><name pos:start="131:41" pos:end="131:42">ml</name><operator pos:start="131:43" pos:end="131:44">-&gt;</operator><name pos:start="131:45" pos:end="131:46">mr</name><operator pos:start="131:47" pos:end="131:48">-&gt;</operator><name pos:start="131:49" pos:end="131:56">priority</name></name><operator pos:start="131:57" pos:end="131:57">)</operator></expr>)</condition> <block pos:start="131:60" pos:end="139:13">{<block_content pos:start="133:17" pos:end="137:22">

                <expr_stmt pos:start="133:17" pos:end="133:56"><expr pos:start="133:17" pos:end="133:55"><call pos:start="133:17" pos:end="133:55"><name pos:start="133:17" pos:end="133:36">QTAILQ_INSERT_BEFORE</name><argument_list pos:start="133:37" pos:end="133:55">(<argument pos:start="133:38" pos:end="133:39"><expr pos:start="133:38" pos:end="133:39"><name pos:start="133:38" pos:end="133:39">ml</name></expr></argument>, <argument pos:start="133:42" pos:end="133:47"><expr pos:start="133:42" pos:end="133:47"><name pos:start="133:42" pos:end="133:47">new_ml</name></expr></argument>, <argument pos:start="133:50" pos:end="133:54"><expr pos:start="133:50" pos:end="133:54"><name pos:start="133:50" pos:end="133:54">queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:30"><expr pos:start="135:17" pos:end="135:29"><name pos:start="135:17" pos:end="135:22">new_ml</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <name pos:start="135:26" pos:end="135:29">NULL</name></expr>;</expr_stmt>

                <break pos:start="137:17" pos:end="137:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="143:9" pos:end="147:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:19">(<expr pos:start="143:13" pos:end="143:18"><name pos:start="143:13" pos:end="143:18">new_ml</name></expr>)</condition> <block pos:start="143:21" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:66">

            <expr_stmt pos:start="145:13" pos:end="145:66"><expr pos:start="145:13" pos:end="145:65"><call pos:start="145:13" pos:end="145:65"><name pos:start="145:13" pos:end="145:30">QTAILQ_INSERT_TAIL</name><argument_list pos:start="145:31" pos:end="145:65">(<argument pos:start="145:32" pos:end="145:49"><expr pos:start="145:32" pos:end="145:49"><operator pos:start="145:32" pos:end="145:32">&amp;</operator><name pos:start="145:33" pos:end="145:49">submr_print_queue</name></expr></argument>, <argument pos:start="145:52" pos:end="145:57"><expr pos:start="145:52" pos:end="145:57"><name pos:start="145:52" pos:end="145:57">new_ml</name></expr></argument>, <argument pos:start="145:60" pos:end="145:64"><expr pos:start="145:60" pos:end="145:64"><name pos:start="145:60" pos:end="145:64">queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <macro pos:start="153:5" pos:end="153:49"><name pos:start="153:5" pos:end="153:18">QTAILQ_FOREACH</name><argument_list pos:start="153:19" pos:end="153:49">(<argument pos:start="153:20" pos:end="153:21">ml</argument>, <argument pos:start="153:24" pos:end="153:41">&amp;submr_print_queue</argument>, <argument pos:start="153:44" pos:end="153:48">queue</argument>)</argument_list></macro> <block pos:start="153:51" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:42">

        <expr_stmt pos:start="155:9" pos:end="157:42"><expr pos:start="155:9" pos:end="157:41"><call pos:start="155:9" pos:end="157:41"><name pos:start="155:9" pos:end="155:22">mtree_print_mr</name><argument_list pos:start="155:23" pos:end="157:41">(<argument pos:start="155:24" pos:end="155:33"><expr pos:start="155:24" pos:end="155:33"><name pos:start="155:24" pos:end="155:33">mon_printf</name></expr></argument>, <argument pos:start="155:36" pos:end="155:36"><expr pos:start="155:36" pos:end="155:36"><name pos:start="155:36" pos:end="155:36">f</name></expr></argument>, <argument pos:start="155:39" pos:end="155:44"><expr pos:start="155:39" pos:end="155:44"><name pos:start="155:39" pos:end="155:44"><name pos:start="155:39" pos:end="155:40">ml</name><operator pos:start="155:41" pos:end="155:42">-&gt;</operator><name pos:start="155:43" pos:end="155:44">mr</name></name></expr></argument>, <argument pos:start="155:47" pos:end="155:55"><expr pos:start="155:47" pos:end="155:55"><name pos:start="155:47" pos:end="155:51">level</name> <operator pos:start="155:53" pos:end="155:53">+</operator> <literal type="number" pos:start="155:55" pos:end="155:55">1</literal></expr></argument>, <argument pos:start="155:58" pos:end="155:72"><expr pos:start="155:58" pos:end="155:72"><name pos:start="155:58" pos:end="155:61">base</name> <operator pos:start="155:63" pos:end="155:63">+</operator> <name pos:start="155:65" pos:end="155:72"><name pos:start="155:65" pos:end="155:66">mr</name><operator pos:start="155:67" pos:end="155:68">-&gt;</operator><name pos:start="155:69" pos:end="155:72">addr</name></name></expr></argument>,

                       <argument pos:start="157:24" pos:end="157:40"><expr pos:start="157:24" pos:end="157:40"><name pos:start="157:24" pos:end="157:40">alias_print_queue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <macro pos:start="163:5" pos:end="163:63"><name pos:start="163:5" pos:end="163:23">QTAILQ_FOREACH_SAFE</name><argument_list pos:start="163:24" pos:end="163:63">(<argument pos:start="163:25" pos:end="163:26">ml</argument>, <argument pos:start="163:29" pos:end="163:46">&amp;submr_print_queue</argument>, <argument pos:start="163:49" pos:end="163:53">queue</argument>, <argument pos:start="163:56" pos:end="163:62">next_ml</argument>)</argument_list></macro> <block pos:start="163:65" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:19">

        <expr_stmt pos:start="165:9" pos:end="165:19"><expr pos:start="165:9" pos:end="165:18"><call pos:start="165:9" pos:end="165:18"><name pos:start="165:9" pos:end="165:14">g_free</name><argument_list pos:start="165:15" pos:end="165:18">(<argument pos:start="165:16" pos:end="165:17"><expr pos:start="165:16" pos:end="165:17"><name pos:start="165:16" pos:end="165:17">ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
