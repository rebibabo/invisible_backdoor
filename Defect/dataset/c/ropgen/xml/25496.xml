<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25496.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">iscsi_readcapacity_sync</name><parameter_list pos:start="1:36" pos:end="1:69">(<parameter pos:start="1:37" pos:end="1:54"><decl pos:start="1:37" pos:end="1:54"><type pos:start="1:37" pos:end="1:54"><name pos:start="1:37" pos:end="1:44">IscsiLun</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:54">iscsilun</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:61">Error</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:20">scsi_task</name></name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:26">task</name> <init pos:start="5:28" pos:end="5:33">= <expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:30"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:30">scsi_readcapacity10</name></name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:36">rc10</name> <init pos:start="7:38" pos:end="7:43">= <expr pos:start="7:40" pos:end="7:43"><name pos:start="7:40" pos:end="7:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:32"><name pos:start="9:5" pos:end="9:30"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:30">scsi_readcapacity16</name></name> <modifier pos:start="9:32" pos:end="9:32">*</modifier></type><name pos:start="9:33" pos:end="9:36">rc16</name> <init pos:start="9:38" pos:end="9:43">= <expr pos:start="9:40" pos:end="9:43"><name pos:start="9:40" pos:end="9:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">retries</name> <init pos:start="11:17" pos:end="11:35">= <expr pos:start="11:19" pos:end="11:35"><name pos:start="11:19" pos:end="11:35">ISCSI_CMD_RETRIES</name></expr></init></decl>;</decl_stmt> 



    <do pos:start="15:5" pos:end="103:31">do <block pos:start="15:8" pos:end="99:5">{<block_content pos:start="17:9" pos:end="97:9">

        <if_stmt pos:start="17:9" pos:end="23:9"><if pos:start="17:9" pos:end="23:9">if <condition pos:start="17:12" pos:end="17:25">(<expr pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:16">task</name> <operator pos:start="17:18" pos:end="17:19">!=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr>)</condition> <block pos:start="17:27" pos:end="23:9">{<block_content pos:start="19:13" pos:end="21:24">

            <expr_stmt pos:start="19:13" pos:end="19:38"><expr pos:start="19:13" pos:end="19:37"><call pos:start="19:13" pos:end="19:37"><name pos:start="19:13" pos:end="19:31">scsi_free_scsi_task</name><argument_list pos:start="19:32" pos:end="19:37">(<argument pos:start="19:33" pos:end="19:36"><expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:16">task</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="27:9" pos:end="97:9">switch <condition pos:start="27:16" pos:end="27:31">(<expr pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:30"><name pos:start="27:17" pos:end="27:24">iscsilun</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:30">type</name></name></expr>)</condition> <block pos:start="27:33" pos:end="97:9">{<block_content pos:start="29:9" pos:end="95:19">

        <case pos:start="29:9" pos:end="29:23">case <expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:22">TYPE_DISK</name></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:77"><expr pos:start="31:13" pos:end="31:76"><name pos:start="31:13" pos:end="31:16">task</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:76"><name pos:start="31:20" pos:end="31:44">iscsi_readcapacity16_sync</name><argument_list pos:start="31:45" pos:end="31:76">(<argument pos:start="31:46" pos:end="31:60"><expr pos:start="31:46" pos:end="31:60"><name pos:start="31:46" pos:end="31:60"><name pos:start="31:46" pos:end="31:53">iscsilun</name><operator pos:start="31:54" pos:end="31:55">-&gt;</operator><name pos:start="31:56" pos:end="31:60">iscsi</name></name></expr></argument>, <argument pos:start="31:63" pos:end="31:75"><expr pos:start="31:63" pos:end="31:75"><name pos:start="31:63" pos:end="31:75"><name pos:start="31:63" pos:end="31:70">iscsilun</name><operator pos:start="31:71" pos:end="31:72">-&gt;</operator><name pos:start="31:73" pos:end="31:75">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="55:13"><if pos:start="33:13" pos:end="55:13">if <condition pos:start="33:16" pos:end="33:65">(<expr pos:start="33:17" pos:end="33:64"><name pos:start="33:17" pos:end="33:20">task</name> <operator pos:start="33:22" pos:end="33:23">!=</operator> <name pos:start="33:25" pos:end="33:28">NULL</name> <operator pos:start="33:30" pos:end="33:31">&amp;&amp;</operator> <name pos:start="33:33" pos:end="33:44"><name pos:start="33:33" pos:end="33:36">task</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:44">status</name></name> <operator pos:start="33:46" pos:end="33:47">==</operator> <name pos:start="33:49" pos:end="33:64">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="33:67" pos:end="55:13">{<block_content pos:start="35:17" pos:end="53:17">

                <expr_stmt pos:start="35:17" pos:end="35:52"><expr pos:start="35:17" pos:end="35:51"><name pos:start="35:17" pos:end="35:20">rc16</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:51"><name pos:start="35:24" pos:end="35:45">scsi_datain_unmarshall</name><argument_list pos:start="35:46" pos:end="35:51">(<argument pos:start="35:47" pos:end="35:50"><expr pos:start="35:47" pos:end="35:50"><name pos:start="35:47" pos:end="35:50">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="37:17" pos:end="53:17"><if pos:start="37:17" pos:end="41:17">if <condition pos:start="37:20" pos:end="37:33">(<expr pos:start="37:21" pos:end="37:32"><name pos:start="37:21" pos:end="37:24">rc16</name> <operator pos:start="37:26" pos:end="37:27">==</operator> <name pos:start="37:29" pos:end="37:32">NULL</name></expr>)</condition> <block pos:start="37:35" pos:end="41:17">{<block_content pos:start="39:21" pos:end="39:89">

                    <expr_stmt pos:start="39:21" pos:end="39:89"><expr pos:start="39:21" pos:end="39:88"><call pos:start="39:21" pos:end="39:88"><name pos:start="39:21" pos:end="39:30">error_setg</name><argument_list pos:start="39:31" pos:end="39:88">(<argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><name pos:start="39:32" pos:end="39:35">errp</name></expr></argument>, <argument pos:start="39:38" pos:end="39:87"><expr pos:start="39:38" pos:end="39:87"><literal type="string" pos:start="39:38" pos:end="39:87">"iSCSI: Failed to unmarshall readcapacity16 data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="41:19" pos:end="53:17">else <block pos:start="41:24" pos:end="53:17">{<block_content pos:start="43:21" pos:end="51:80">

                    <expr_stmt pos:start="43:21" pos:end="43:62"><expr pos:start="43:21" pos:end="43:61"><name pos:start="43:21" pos:end="43:40"><name pos:start="43:21" pos:end="43:28">iscsilun</name><operator pos:start="43:29" pos:end="43:30">-&gt;</operator><name pos:start="43:31" pos:end="43:40">block_size</name></name> <operator pos:start="43:42" pos:end="43:42">=</operator> <name pos:start="43:44" pos:end="43:61"><name pos:start="43:44" pos:end="43:47">rc16</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:61">block_length</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="45:21" pos:end="45:66"><expr pos:start="45:21" pos:end="45:65"><name pos:start="45:21" pos:end="45:40"><name pos:start="45:21" pos:end="45:28">iscsilun</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:40">num_blocks</name></name> <operator pos:start="45:42" pos:end="45:42">=</operator> <name pos:start="45:44" pos:end="45:61"><name pos:start="45:44" pos:end="45:47">rc16</name><operator pos:start="45:48" pos:end="45:49">-&gt;</operator><name pos:start="45:50" pos:end="45:61">returned_lba</name></name> <operator pos:start="45:63" pos:end="45:63">+</operator> <literal type="number" pos:start="45:65" pos:end="45:65">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="47:21" pos:end="47:52"><expr pos:start="47:21" pos:end="47:51"><name pos:start="47:21" pos:end="47:35"><name pos:start="47:21" pos:end="47:28">iscsilun</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:35">lbpme</name></name> <operator pos:start="47:37" pos:end="47:37">=</operator> <operator pos:start="47:39" pos:end="47:39">!</operator><operator pos:start="47:40" pos:end="47:40">!</operator><name pos:start="47:41" pos:end="47:51"><name pos:start="47:41" pos:end="47:44">rc16</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:51">lbpme</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:52"><expr pos:start="49:21" pos:end="49:51"><name pos:start="49:21" pos:end="49:35"><name pos:start="49:21" pos:end="49:28">iscsilun</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:35">lbprz</name></name> <operator pos:start="49:37" pos:end="49:37">=</operator> <operator pos:start="49:39" pos:end="49:39">!</operator><operator pos:start="49:40" pos:end="49:40">!</operator><name pos:start="49:41" pos:end="49:51"><name pos:start="49:41" pos:end="49:44">rc16</name><operator pos:start="49:45" pos:end="49:46">-&gt;</operator><name pos:start="49:47" pos:end="49:51">lbprz</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:80"><expr pos:start="51:21" pos:end="51:79"><name pos:start="51:21" pos:end="51:43"><name pos:start="51:21" pos:end="51:28">iscsilun</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:43">use_16_for_rw</name></name> <operator pos:start="51:45" pos:end="51:45">=</operator> <operator pos:start="51:47" pos:end="51:47">(</operator><name pos:start="51:48" pos:end="51:65"><name pos:start="51:48" pos:end="51:51">rc16</name><operator pos:start="51:52" pos:end="51:53">-&gt;</operator><name pos:start="51:54" pos:end="51:65">returned_lba</name></name> <operator pos:start="51:67" pos:end="51:67">&gt;</operator> <literal type="number" pos:start="51:69" pos:end="51:78">0xffffffff</literal><operator pos:start="51:79" pos:end="51:79">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:22">case <expr pos:start="59:14" pos:end="59:21"><name pos:start="59:14" pos:end="59:21">TYPE_ROM</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:83"><expr pos:start="61:13" pos:end="61:82"><name pos:start="61:13" pos:end="61:16">task</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:82"><name pos:start="61:20" pos:end="61:44">iscsi_readcapacity10_sync</name><argument_list pos:start="61:45" pos:end="61:82">(<argument pos:start="61:46" pos:end="61:60"><expr pos:start="61:46" pos:end="61:60"><name pos:start="61:46" pos:end="61:60"><name pos:start="61:46" pos:end="61:53">iscsilun</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:60">iscsi</name></name></expr></argument>, <argument pos:start="61:63" pos:end="61:75"><expr pos:start="61:63" pos:end="61:75"><name pos:start="61:63" pos:end="61:75"><name pos:start="61:63" pos:end="61:70">iscsilun</name><operator pos:start="61:71" pos:end="61:72">-&gt;</operator><name pos:start="61:73" pos:end="61:75">lun</name></name></expr></argument>, <argument pos:start="61:78" pos:end="61:78"><expr pos:start="61:78" pos:end="61:78"><literal type="number" pos:start="61:78" pos:end="61:78">0</literal></expr></argument>, <argument pos:start="61:81" pos:end="61:81"><expr pos:start="61:81" pos:end="61:81"><literal type="number" pos:start="61:81" pos:end="61:81">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="89:13"><if pos:start="63:13" pos:end="89:13">if <condition pos:start="63:16" pos:end="63:65">(<expr pos:start="63:17" pos:end="63:64"><name pos:start="63:17" pos:end="63:20">task</name> <operator pos:start="63:22" pos:end="63:23">!=</operator> <name pos:start="63:25" pos:end="63:28">NULL</name> <operator pos:start="63:30" pos:end="63:31">&amp;&amp;</operator> <name pos:start="63:33" pos:end="63:44"><name pos:start="63:33" pos:end="63:36">task</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:44">status</name></name> <operator pos:start="63:46" pos:end="63:47">==</operator> <name pos:start="63:49" pos:end="63:64">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="63:67" pos:end="89:13">{<block_content pos:start="65:17" pos:end="87:17">

                <expr_stmt pos:start="65:17" pos:end="65:52"><expr pos:start="65:17" pos:end="65:51"><name pos:start="65:17" pos:end="65:20">rc10</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:51"><name pos:start="65:24" pos:end="65:45">scsi_datain_unmarshall</name><argument_list pos:start="65:46" pos:end="65:51">(<argument pos:start="65:47" pos:end="65:50"><expr pos:start="65:47" pos:end="65:50"><name pos:start="65:47" pos:end="65:50">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="87:17"><if pos:start="67:17" pos:end="71:17">if <condition pos:start="67:20" pos:end="67:33">(<expr pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:24">rc10</name> <operator pos:start="67:26" pos:end="67:27">==</operator> <name pos:start="67:29" pos:end="67:32">NULL</name></expr>)</condition> <block pos:start="67:35" pos:end="71:17">{<block_content pos:start="69:21" pos:end="69:89">

                    <expr_stmt pos:start="69:21" pos:end="69:89"><expr pos:start="69:21" pos:end="69:88"><call pos:start="69:21" pos:end="69:88"><name pos:start="69:21" pos:end="69:30">error_setg</name><argument_list pos:start="69:31" pos:end="69:88">(<argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">errp</name></expr></argument>, <argument pos:start="69:38" pos:end="69:87"><expr pos:start="69:38" pos:end="69:87"><literal type="string" pos:start="69:38" pos:end="69:87">"iSCSI: Failed to unmarshall readcapacity10 data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="71:19" pos:end="87:17">else <block pos:start="71:24" pos:end="87:17">{<block_content pos:start="73:21" pos:end="85:21">

                    <expr_stmt pos:start="73:21" pos:end="73:60"><expr pos:start="73:21" pos:end="73:59"><name pos:start="73:21" pos:end="73:40"><name pos:start="73:21" pos:end="73:28">iscsilun</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:40">block_size</name></name> <operator pos:start="73:42" pos:end="73:42">=</operator> <name pos:start="73:44" pos:end="73:59"><name pos:start="73:44" pos:end="73:47">rc10</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:59">block_size</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="75:21" pos:end="85:21"><if pos:start="75:21" pos:end="81:21">if <condition pos:start="75:24" pos:end="75:39">(<expr pos:start="75:25" pos:end="75:38"><name pos:start="75:25" pos:end="75:33"><name pos:start="75:25" pos:end="75:28">rc10</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:33">lba</name></name> <operator pos:start="75:35" pos:end="75:36">==</operator> <literal type="number" pos:start="75:38" pos:end="75:38">0</literal></expr>)</condition> <block pos:start="75:41" pos:end="81:21">{<block_content pos:start="79:25" pos:end="79:49">

                        <comment type="block" pos:start="77:25" pos:end="77:47">/* blank disk loaded */</comment>

                        <expr_stmt pos:start="79:25" pos:end="79:49"><expr pos:start="79:25" pos:end="79:48"><name pos:start="79:25" pos:end="79:44"><name pos:start="79:25" pos:end="79:32">iscsilun</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:44">num_blocks</name></name> <operator pos:start="79:46" pos:end="79:46">=</operator> <literal type="number" pos:start="79:48" pos:end="79:48">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="81:23" pos:end="85:21">else <block pos:start="81:28" pos:end="85:21">{<block_content pos:start="83:25" pos:end="83:61">

                        <expr_stmt pos:start="83:25" pos:end="83:61"><expr pos:start="83:25" pos:end="83:60"><name pos:start="83:25" pos:end="83:44"><name pos:start="83:25" pos:end="83:32">iscsilun</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:44">num_blocks</name></name> <operator pos:start="83:46" pos:end="83:46">=</operator> <name pos:start="83:48" pos:end="83:56"><name pos:start="83:48" pos:end="83:51">rc10</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:56">lba</name></name> <operator pos:start="83:58" pos:end="83:58">+</operator> <literal type="number" pos:start="83:60" pos:end="83:60">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <default pos:start="93:9" pos:end="93:16">default:</default>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></switch>

    </block_content>}</block> while <condition pos:start="99:13" pos:end="103:30">(<expr pos:start="99:14" pos:end="103:29"><name pos:start="99:14" pos:end="99:17">task</name> <operator pos:start="99:19" pos:end="99:20">!=</operator> <name pos:start="99:22" pos:end="99:25">NULL</name> <operator pos:start="99:27" pos:end="99:28">&amp;&amp;</operator> <name pos:start="99:30" pos:end="99:41"><name pos:start="99:30" pos:end="99:33">task</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:41">status</name></name> <operator pos:start="99:43" pos:end="99:44">==</operator> <name pos:start="99:46" pos:end="99:72">SCSI_STATUS_CHECK_CONDITION</name>

             <operator pos:start="101:14" pos:end="101:15">&amp;&amp;</operator> <name pos:start="101:17" pos:end="101:31"><name pos:start="101:17" pos:end="101:20">task</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:27">sense</name><operator pos:start="101:28" pos:end="101:28">.</operator><name pos:start="101:29" pos:end="101:31">key</name></name> <operator pos:start="101:33" pos:end="101:34">==</operator> <name pos:start="101:36" pos:end="101:60">SCSI_SENSE_UNIT_ATTENTION</name>

             <operator pos:start="103:14" pos:end="103:15">&amp;&amp;</operator> <name pos:start="103:17" pos:end="103:23">retries</name><operator pos:start="103:24" pos:end="103:25">--</operator> <operator pos:start="103:27" pos:end="103:27">&gt;</operator> <literal type="number" pos:start="103:29" pos:end="103:29">0</literal></expr>)</condition>;</do>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:57">(<expr pos:start="107:9" pos:end="107:56"><name pos:start="107:9" pos:end="107:12">task</name> <operator pos:start="107:14" pos:end="107:15">==</operator> <name pos:start="107:17" pos:end="107:20">NULL</name> <operator pos:start="107:22" pos:end="107:23">||</operator> <name pos:start="107:25" pos:end="107:36"><name pos:start="107:25" pos:end="107:28">task</name><operator pos:start="107:29" pos:end="107:30">-&gt;</operator><name pos:start="107:31" pos:end="107:36">status</name></name> <operator pos:start="107:38" pos:end="107:39">!=</operator> <name pos:start="107:41" pos:end="107:56">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="107:59" pos:end="115:5">{<block_content pos:start="109:9" pos:end="109:74">

        <expr_stmt pos:start="109:9" pos:end="109:74"><expr pos:start="109:9" pos:end="109:73"><call pos:start="109:9" pos:end="109:73"><name pos:start="109:9" pos:end="109:18">error_setg</name><argument_list pos:start="109:19" pos:end="109:73">(<argument pos:start="109:20" pos:end="109:23"><expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">errp</name></expr></argument>, <argument pos:start="109:26" pos:end="109:72"><expr pos:start="109:26" pos:end="109:72"><literal type="string" pos:start="109:26" pos:end="109:72">"iSCSI: failed to send readcapacity10 command."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:13">(<expr pos:start="117:9" pos:end="117:12"><name pos:start="117:9" pos:end="117:12">task</name></expr>)</condition> <block pos:start="117:15" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:34">

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><call pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:27">scsi_free_scsi_task</name><argument_list pos:start="119:28" pos:end="119:33">(<argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><name pos:start="119:29" pos:end="119:32">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function></unit>
