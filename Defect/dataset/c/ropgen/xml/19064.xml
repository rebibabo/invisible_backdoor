<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19064.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:72"><name pos:start="1:1" pos:end="1:19">dshow_cycle_devices</name><argument_list pos:start="1:20" pos:end="3:72">(<argument pos:start="1:21" pos:end="1:42">AVFormatContext *avctx</argument>, <argument pos:start="1:45" pos:end="1:67">ICreateDevEnum *devenum</argument>,

                    <argument pos:start="3:21" pos:end="3:48">enum dshowDeviceType devtype</argument>, <argument pos:start="3:51" pos:end="3:71">IBaseFilter **pfilter</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:13">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">dshow_ctx</name></name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">ctx</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">IBaseFilter</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:30">device_filter</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">IEnumMoniker</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:27">classenum</name> <init pos:start="11:29" pos:end="11:34">= <expr pos:start="11:31" pos:end="11:34"><name pos:start="11:31" pos:end="11:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">IMoniker</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:15">m</name> <init pos:start="13:17" pos:end="13:22">= <expr pos:start="13:19" pos:end="13:22"><name pos:start="13:19" pos:end="13:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:56"><decl pos:start="15:5" pos:end="15:55"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">device_name</name> <init pos:start="15:29" pos:end="15:55">= <expr pos:start="15:31" pos:end="15:55"><name pos:start="15:31" pos:end="15:55"><name pos:start="15:31" pos:end="15:33">ctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:46">device_name</name><index pos:start="15:47" pos:end="15:55">[<expr pos:start="15:48" pos:end="15:54"><name pos:start="15:48" pos:end="15:54">devtype</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">r</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="23:69"><decl pos:start="21:5" pos:end="23:68"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">GUID</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:30"><name pos:start="21:17" pos:end="21:27">device_guid</name><index pos:start="21:28" pos:end="21:30">[<expr pos:start="21:29" pos:end="21:29"><literal type="number" pos:start="21:29" pos:end="21:29">2</literal></expr>]</index></name> <init pos:start="21:32" pos:end="23:68">= <expr pos:start="21:34" pos:end="23:68"><block pos:start="21:34" pos:end="23:68">{ <expr pos:start="21:36" pos:end="21:66"><operator pos:start="21:36" pos:end="21:36">&amp;</operator><name pos:start="21:37" pos:end="21:66">CLSID_VideoInputDeviceCategory</name></expr>,

                                   <expr pos:start="23:36" pos:end="23:66"><operator pos:start="23:36" pos:end="23:36">&amp;</operator><name pos:start="23:37" pos:end="23:66">CLSID_AudioInputDeviceCategory</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:75"><decl pos:start="25:5" pos:end="25:74"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:27">devtypename</name> <init pos:start="25:29" pos:end="25:74">= <expr pos:start="25:31" pos:end="25:74"><ternary pos:start="25:31" pos:end="25:74"><condition pos:start="25:31" pos:end="25:56"><expr pos:start="25:31" pos:end="25:54"><operator pos:start="25:31" pos:end="25:31">(</operator><name pos:start="25:32" pos:end="25:38">devtype</name> <operator pos:start="25:40" pos:end="25:41">==</operator> <name pos:start="25:43" pos:end="25:53">VideoDevice</name><operator pos:start="25:54" pos:end="25:54">)</operator></expr> ?</condition><then pos:start="25:58" pos:end="25:64"> <expr pos:start="25:58" pos:end="25:64"><literal type="string" pos:start="25:58" pos:end="25:64">"video"</literal></expr> </then><else pos:start="25:66" pos:end="25:74">: <expr pos:start="25:68" pos:end="25:74"><literal type="string" pos:start="25:68" pos:end="25:74">"audio"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:78"><expr pos:start="29:5" pos:end="31:77"><name pos:start="29:5" pos:end="29:5">r</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="31:77"><name pos:start="29:9" pos:end="29:44">ICreateDevEnum_CreateClassEnumerator</name><argument_list pos:start="29:45" pos:end="31:77">(<argument pos:start="29:46" pos:end="29:52"><expr pos:start="29:46" pos:end="29:52"><name pos:start="29:46" pos:end="29:52">devenum</name></expr></argument>, <argument pos:start="29:55" pos:end="29:74"><expr pos:start="29:55" pos:end="29:74"><name pos:start="29:55" pos:end="29:74"><name pos:start="29:55" pos:end="29:65">device_guid</name><index pos:start="29:66" pos:end="29:74">[<expr pos:start="29:67" pos:end="29:73"><name pos:start="29:67" pos:end="29:73">devtype</name></expr>]</index></name></expr></argument>,

                                             <argument pos:start="31:46" pos:end="31:73"><expr pos:start="31:46" pos:end="31:73"><operator pos:start="31:46" pos:end="31:46">(</operator><name pos:start="31:47" pos:end="31:58">IEnumMoniker</name> <operator pos:start="31:60" pos:end="31:60">*</operator><operator pos:start="31:61" pos:end="31:61">*</operator><operator pos:start="31:62" pos:end="31:62">)</operator> <operator pos:start="31:64" pos:end="31:64">&amp;</operator><name pos:start="31:65" pos:end="31:73">classenum</name></expr></argument>, <argument pos:start="31:76" pos:end="31:76"><expr pos:start="31:76" pos:end="31:76"><literal type="number" pos:start="31:76" pos:end="31:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:18">(<expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:9">r</name> <operator pos:start="33:11" pos:end="33:12">!=</operator> <name pos:start="33:14" pos:end="33:17">S_OK</name></expr>)</condition> <block pos:start="33:20" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:28">

        <expr_stmt pos:start="35:9" pos:end="37:28"><expr pos:start="35:9" pos:end="37:27"><call pos:start="35:9" pos:end="37:27"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="37:27">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:71"><expr pos:start="35:37" pos:end="35:71"><literal type="string" pos:start="35:37" pos:end="35:71">"Could not enumerate %s devices.\n"</literal></expr></argument>,

               <argument pos:start="37:16" pos:end="37:26"><expr pos:start="37:16" pos:end="37:26"><name pos:start="37:16" pos:end="37:26">devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:28">return <expr pos:start="39:16" pos:end="39:27"><call pos:start="39:16" pos:end="39:27"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="45:5" pos:end="107:5">while <condition pos:start="45:11" pos:end="45:79">(<expr pos:start="45:12" pos:end="45:78"><call pos:start="45:12" pos:end="45:52"><name pos:start="45:12" pos:end="45:28">IEnumMoniker_Next</name><argument_list pos:start="45:29" pos:end="45:52">(<argument pos:start="45:30" pos:end="45:38"><expr pos:start="45:30" pos:end="45:38"><name pos:start="45:30" pos:end="45:38">classenum</name></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><literal type="number" pos:start="45:41" pos:end="45:41">1</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:45"><expr pos:start="45:44" pos:end="45:45"><operator pos:start="45:44" pos:end="45:44">&amp;</operator><name pos:start="45:45" pos:end="45:45">m</name></expr></argument>, <argument pos:start="45:48" pos:end="45:51"><expr pos:start="45:48" pos:end="45:51"><name pos:start="45:48" pos:end="45:51">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="45:54" pos:end="45:55">==</operator> <name pos:start="45:57" pos:end="45:60">S_OK</name> <operator pos:start="45:62" pos:end="45:63">&amp;&amp;</operator> <operator pos:start="45:65" pos:end="45:65">!</operator><name pos:start="45:66" pos:end="45:78">device_filter</name></expr>)</condition> <block pos:start="45:81" pos:end="107:5">{<block_content pos:start="47:9" pos:end="105:28">

        <decl_stmt pos:start="47:9" pos:end="47:33"><decl pos:start="47:9" pos:end="47:32"><type pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:20">IPropertyBag</name> <modifier pos:start="47:22" pos:end="47:22">*</modifier></type><name pos:start="47:23" pos:end="47:25">bag</name> <init pos:start="47:27" pos:end="47:32">= <expr pos:start="47:29" pos:end="47:32"><name pos:start="47:29" pos:end="47:32">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:12">char</name> <modifier pos:start="49:14" pos:end="49:14">*</modifier></type><name pos:start="49:15" pos:end="49:17">buf</name> <init pos:start="49:19" pos:end="49:24">= <expr pos:start="49:21" pos:end="49:24"><name pos:start="49:21" pos:end="49:24">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:20"><decl pos:start="51:9" pos:end="51:19"><type pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:15">VARIANT</name></type> <name pos:start="51:17" pos:end="51:19">var</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:78"><expr pos:start="55:9" pos:end="55:77"><name pos:start="55:9" pos:end="55:9">r</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:77"><name pos:start="55:13" pos:end="55:34">IMoniker_BindToStorage</name><argument_list pos:start="55:35" pos:end="55:77">(<argument pos:start="55:36" pos:end="55:36"><expr pos:start="55:36" pos:end="55:36"><name pos:start="55:36" pos:end="55:36">m</name></expr></argument>, <argument pos:start="55:39" pos:end="55:39"><expr pos:start="55:39" pos:end="55:39"><literal type="number" pos:start="55:39" pos:end="55:39">0</literal></expr></argument>, <argument pos:start="55:42" pos:end="55:42"><expr pos:start="55:42" pos:end="55:42"><literal type="number" pos:start="55:42" pos:end="55:42">0</literal></expr></argument>, <argument pos:start="55:45" pos:end="55:61"><expr pos:start="55:45" pos:end="55:61"><operator pos:start="55:45" pos:end="55:45">&amp;</operator><name pos:start="55:46" pos:end="55:61">IID_IPropertyBag</name></expr></argument>, <argument pos:start="55:64" pos:end="55:76"><expr pos:start="55:64" pos:end="55:76"><operator pos:start="55:64" pos:end="55:64">(</operator><name pos:start="55:65" pos:end="55:68">void</name> <operator pos:start="55:70" pos:end="55:70">*</operator><operator pos:start="55:71" pos:end="55:71">)</operator> <operator pos:start="55:73" pos:end="55:73">&amp;</operator><name pos:start="55:74" pos:end="55:76">bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:23"><if pos:start="57:9" pos:end="59:23">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">r</name> <operator pos:start="57:15" pos:end="57:16">!=</operator> <name pos:start="57:18" pos:end="57:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:23"><block_content pos:start="59:13" pos:end="59:23">

            <goto pos:start="59:13" pos:end="59:23">goto <name pos:start="59:18" pos:end="59:22">fail1</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:25"><expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:11">var</name><operator pos:start="63:12" pos:end="63:12">.</operator><name pos:start="63:13" pos:end="63:14">vt</name></name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:24">VT_BSTR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:64"><expr pos:start="65:9" pos:end="65:63"><name pos:start="65:9" pos:end="65:9">r</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:63"><name pos:start="65:13" pos:end="65:29">IPropertyBag_Read</name><argument_list pos:start="65:30" pos:end="65:63">(<argument pos:start="65:31" pos:end="65:33"><expr pos:start="65:31" pos:end="65:33"><name pos:start="65:31" pos:end="65:33">bag</name></expr></argument>, <argument pos:start="65:36" pos:end="65:50"><expr pos:start="65:36" pos:end="65:50"><literal type="string" pos:start="65:36" pos:end="65:50">L"FriendlyName"</literal></expr></argument>, <argument pos:start="65:53" pos:end="65:56"><expr pos:start="65:53" pos:end="65:56"><operator pos:start="65:53" pos:end="65:53">&amp;</operator><name pos:start="65:54" pos:end="65:56">var</name></expr></argument>, <argument pos:start="65:59" pos:end="65:62"><expr pos:start="65:59" pos:end="65:62"><name pos:start="65:59" pos:end="65:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:23"><if pos:start="67:9" pos:end="69:23">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:13">r</name> <operator pos:start="67:15" pos:end="67:16">!=</operator> <name pos:start="67:18" pos:end="67:21">S_OK</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23">

            <goto pos:start="69:13" pos:end="69:23">goto <name pos:start="69:18" pos:end="69:22">fail1</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:45"><expr pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:11">buf</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:44"><name pos:start="73:15" pos:end="73:31">dup_wchar_to_utf8</name><argument_list pos:start="73:32" pos:end="73:44">(<argument pos:start="73:33" pos:end="73:43"><expr pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:35">var</name><operator pos:start="73:36" pos:end="73:36">.</operator><name pos:start="73:37" pos:end="73:43">bstrVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="91:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:19">pfilter</name></expr>)</condition> <block pos:start="77:22" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:86">

            <if_stmt pos:start="79:13" pos:end="81:27"><if pos:start="79:13" pos:end="81:27">if <condition pos:start="79:16" pos:end="79:41">(<expr pos:start="79:17" pos:end="79:40"><call pos:start="79:17" pos:end="79:40"><name pos:start="79:17" pos:end="79:22">strcmp</name><argument_list pos:start="79:23" pos:end="79:40">(<argument pos:start="79:24" pos:end="79:34"><expr pos:start="79:24" pos:end="79:34"><name pos:start="79:24" pos:end="79:34">device_name</name></expr></argument>, <argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:27"><block_content pos:start="81:17" pos:end="81:27">

                <goto pos:start="81:17" pos:end="81:27">goto <name pos:start="81:22" pos:end="81:26">fail1</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:86"><expr pos:start="85:13" pos:end="85:85"><call pos:start="85:13" pos:end="85:85"><name pos:start="85:13" pos:end="85:33">IMoniker_BindToObject</name><argument_list pos:start="85:34" pos:end="85:85">(<argument pos:start="85:35" pos:end="85:35"><expr pos:start="85:35" pos:end="85:35"><name pos:start="85:35" pos:end="85:35">m</name></expr></argument>, <argument pos:start="85:38" pos:end="85:38"><expr pos:start="85:38" pos:end="85:38"><literal type="number" pos:start="85:38" pos:end="85:38">0</literal></expr></argument>, <argument pos:start="85:41" pos:end="85:41"><expr pos:start="85:41" pos:end="85:41"><literal type="number" pos:start="85:41" pos:end="85:41">0</literal></expr></argument>, <argument pos:start="85:44" pos:end="85:59"><expr pos:start="85:44" pos:end="85:59"><operator pos:start="85:44" pos:end="85:44">&amp;</operator><name pos:start="85:45" pos:end="85:59">IID_IBaseFilter</name></expr></argument>, <argument pos:start="85:62" pos:end="85:84"><expr pos:start="85:62" pos:end="85:84"><operator pos:start="85:62" pos:end="85:62">(</operator><name pos:start="85:63" pos:end="85:66">void</name> <operator pos:start="85:68" pos:end="85:68">*</operator><operator pos:start="85:69" pos:end="85:69">)</operator> <operator pos:start="85:71" pos:end="85:71">&amp;</operator><name pos:start="85:72" pos:end="85:84">device_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:57">

            <expr_stmt pos:start="89:13" pos:end="89:57"><expr pos:start="89:13" pos:end="89:56"><call pos:start="89:13" pos:end="89:56"><name pos:start="89:13" pos:end="89:18">av_log</name><argument_list pos:start="89:19" pos:end="89:56">(<argument pos:start="89:20" pos:end="89:24"><expr pos:start="89:20" pos:end="89:24"><name pos:start="89:20" pos:end="89:24">avctx</name></expr></argument>, <argument pos:start="89:27" pos:end="89:37"><expr pos:start="89:27" pos:end="89:37"><name pos:start="89:27" pos:end="89:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="89:40" pos:end="89:50"><expr pos:start="89:40" pos:end="89:50"><literal type="string" pos:start="89:40" pos:end="89:50">" \"%s\"\n"</literal></expr></argument>, <argument pos:start="89:53" pos:end="89:55"><expr pos:start="89:53" pos:end="89:55"><name pos:start="89:53" pos:end="89:55">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



<label pos:start="95:1" pos:end="95:6"><name pos:start="95:1" pos:end="95:5">fail1</name>:</label>

        <if_stmt pos:start="97:9" pos:end="99:25"><if pos:start="97:9" pos:end="99:25">if <condition pos:start="97:12" pos:end="97:16">(<expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">buf</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:25"><block_content pos:start="99:13" pos:end="99:25">

            <expr_stmt pos:start="99:13" pos:end="99:25"><expr pos:start="99:13" pos:end="99:24"><call pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:19">av_free</name><argument_list pos:start="99:20" pos:end="99:24">(<argument pos:start="99:21" pos:end="99:23"><expr pos:start="99:21" pos:end="99:23"><name pos:start="99:21" pos:end="99:23">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="103:38"><if pos:start="101:9" pos:end="103:38">if <condition pos:start="101:12" pos:end="101:16">(<expr pos:start="101:13" pos:end="101:15"><name pos:start="101:13" pos:end="101:15">bag</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:38"><block_content pos:start="103:13" pos:end="103:38">

            <expr_stmt pos:start="103:13" pos:end="103:38"><expr pos:start="103:13" pos:end="103:37"><call pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:32">IPropertyBag_Release</name><argument_list pos:start="103:33" pos:end="103:37">(<argument pos:start="103:34" pos:end="103:36"><expr pos:start="103:34" pos:end="103:36"><name pos:start="103:34" pos:end="103:36">bag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><call pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:24">IMoniker_Release</name><argument_list pos:start="105:25" pos:end="105:27">(<argument pos:start="105:26" pos:end="105:26"><expr pos:start="105:26" pos:end="105:26"><name pos:start="105:26" pos:end="105:26">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="111:5" pos:end="111:36"><expr pos:start="111:5" pos:end="111:35"><call pos:start="111:5" pos:end="111:35"><name pos:start="111:5" pos:end="111:24">IEnumMoniker_Release</name><argument_list pos:start="111:25" pos:end="111:35">(<argument pos:start="111:26" pos:end="111:34"><expr pos:start="111:26" pos:end="111:34"><name pos:start="111:26" pos:end="111:34">classenum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="129:5"><if pos:start="115:5" pos:end="129:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:15">pfilter</name></expr>)</condition> <block pos:start="115:18" pos:end="129:5">{<block_content pos:start="117:9" pos:end="127:33">

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:27">(<expr pos:start="117:13" pos:end="117:26"><operator pos:start="117:13" pos:end="117:13">!</operator><name pos:start="117:14" pos:end="117:26">device_filter</name></expr>)</condition> <block pos:start="117:29" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:32">

            <expr_stmt pos:start="119:13" pos:end="121:32"><expr pos:start="119:13" pos:end="121:31"><call pos:start="119:13" pos:end="121:31"><name pos:start="119:13" pos:end="119:18">av_log</name><argument_list pos:start="119:19" pos:end="121:31">(<argument pos:start="119:20" pos:end="119:24"><expr pos:start="119:20" pos:end="119:24"><name pos:start="119:20" pos:end="119:24">avctx</name></expr></argument>, <argument pos:start="119:27" pos:end="119:38"><expr pos:start="119:27" pos:end="119:38"><name pos:start="119:27" pos:end="119:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:41" pos:end="119:69"><expr pos:start="119:41" pos:end="119:69"><literal type="string" pos:start="119:41" pos:end="119:69">"Could not find %s device.\n"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:30"><expr pos:start="121:20" pos:end="121:30"><name pos:start="121:20" pos:end="121:30">devtypename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:32">return <expr pos:start="123:20" pos:end="123:31"><call pos:start="123:20" pos:end="123:31"><name pos:start="123:20" pos:end="123:26">AVERROR</name><argument_list pos:start="123:27" pos:end="123:31">(<argument pos:start="123:28" pos:end="123:30"><expr pos:start="123:28" pos:end="123:30"><name pos:start="123:28" pos:end="123:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><operator pos:start="127:9" pos:end="127:9">*</operator><name pos:start="127:10" pos:end="127:16">pfilter</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <name pos:start="127:20" pos:end="127:32">device_filter</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
