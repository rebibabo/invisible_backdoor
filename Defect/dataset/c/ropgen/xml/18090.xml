<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18090.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">msrle_decode_8_16_24_32</name><parameter_list pos:start="1:35" pos:end="3:65">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:49">AVCodecContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">avctx</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:67">AVPicture</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">pic</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">depth</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:64"><decl pos:start="3:47" pos:end="3:64"><type pos:start="3:47" pos:end="3:64"><name pos:start="3:47" pos:end="3:60">GetByteContext</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:64">gb</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="243:1">{<block_content pos:start="7:5" pos:end="241:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:19">output</name></decl>, <decl pos:start="7:22" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:13"><modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:32">output_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">p1</name></decl>, <decl pos:start="9:13" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:14">p2</name></decl>, <decl pos:start="9:17" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:20">line</name><init pos:start="9:21" pos:end="9:38">=<expr pos:start="9:22" pos:end="9:38"><name pos:start="9:22" pos:end="9:34"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">height</name></name> <operator pos:start="9:36" pos:end="9:36">-</operator> <literal type="number" pos:start="9:38" pos:end="9:38">1</literal></expr></init></decl>, <decl pos:start="9:41" pos:end="9:45"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:41" pos:end="9:43">pos</name><init pos:start="9:44" pos:end="9:45">=<expr pos:start="9:45" pos:end="9:45"><literal type="number" pos:start="9:45" pos:end="9:45">0</literal></expr></init></decl>, <decl pos:start="9:48" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:48" pos:end="9:48">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:18">pix16</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">pix32</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:63"><decl pos:start="15:5" pos:end="15:62"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:22">width</name><init pos:start="15:23" pos:end="15:62">= <expr pos:start="15:25" pos:end="15:62"><call pos:start="15:25" pos:end="15:47"><name pos:start="15:25" pos:end="15:29">FFABS</name><argument_list pos:start="15:30" pos:end="15:47">(<argument pos:start="15:31" pos:end="15:46"><expr pos:start="15:31" pos:end="15:46"><name pos:start="15:31" pos:end="15:46"><name pos:start="15:31" pos:end="15:33">pic</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:43">linesize</name><index pos:start="15:44" pos:end="15:46">[<expr pos:start="15:45" pos:end="15:45"><literal type="number" pos:start="15:45" pos:end="15:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="15:49" pos:end="15:49">/</operator> <operator pos:start="15:51" pos:end="15:51">(</operator><name pos:start="15:52" pos:end="15:56">depth</name> <operator pos:start="15:58" pos:end="15:59">&gt;&gt;</operator> <literal type="number" pos:start="15:61" pos:end="15:61">3</literal><operator pos:start="15:62" pos:end="15:62">)</operator></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:71"><expr pos:start="19:5" pos:end="19:70"><name pos:start="19:5" pos:end="19:10">output</name>     <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:29"><name pos:start="19:18" pos:end="19:20">pic</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:26">data</name><index pos:start="19:27" pos:end="19:29">[<expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>]</index></name> <operator pos:start="19:31" pos:end="19:31">+</operator> <operator pos:start="19:33" pos:end="19:33">(</operator><name pos:start="19:34" pos:end="19:46"><name pos:start="19:34" pos:end="19:38">avctx</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:46">height</name></name> <operator pos:start="19:48" pos:end="19:48">-</operator> <literal type="number" pos:start="19:50" pos:end="19:50">1</literal><operator pos:start="19:51" pos:end="19:51">)</operator> <operator pos:start="19:53" pos:end="19:53">*</operator> <name pos:start="19:55" pos:end="19:70"><name pos:start="19:55" pos:end="19:57">pic</name><operator pos:start="19:58" pos:end="19:59">-&gt;</operator><name pos:start="19:60" pos:end="19:67">linesize</name><index pos:start="19:68" pos:end="19:70">[<expr pos:start="19:69" pos:end="19:69"><literal type="number" pos:start="19:69" pos:end="19:69">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:71"><expr pos:start="21:5" pos:end="21:70"><name pos:start="21:5" pos:end="21:14">output_end</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:29"><name pos:start="21:18" pos:end="21:20">pic</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:26">data</name><index pos:start="21:27" pos:end="21:29">[<expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr>]</index></name> <operator pos:start="21:31" pos:end="21:31">+</operator>  <name pos:start="21:34" pos:end="21:46"><name pos:start="21:34" pos:end="21:38">avctx</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:46">height</name></name>      <operator pos:start="21:53" pos:end="21:53">*</operator> <name pos:start="21:55" pos:end="21:70"><name pos:start="21:55" pos:end="21:57">pic</name><operator pos:start="21:58" pos:end="21:59">-&gt;</operator><name pos:start="21:60" pos:end="21:67">linesize</name><index pos:start="21:68" pos:end="21:70">[<expr pos:start="21:69" pos:end="21:69"><literal type="number" pos:start="21:69" pos:end="21:69">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="235:5">while <condition pos:start="23:11" pos:end="23:46">(<expr pos:start="23:12" pos:end="23:45"><call pos:start="23:12" pos:end="23:41"><name pos:start="23:12" pos:end="23:37">bytestream2_get_bytes_left</name><argument_list pos:start="23:38" pos:end="23:41">(<argument pos:start="23:39" pos:end="23:40"><expr pos:start="23:39" pos:end="23:40"><name pos:start="23:39" pos:end="23:40">gb</name></expr></argument>)</argument_list></call> <operator pos:start="23:43" pos:end="23:43">&gt;</operator> <literal type="number" pos:start="23:45" pos:end="23:45">0</literal></expr>)</condition> <block pos:start="23:48" pos:end="235:5">{<block_content pos:start="25:9" pos:end="233:9">

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:10">p1</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:38"><name pos:start="25:14" pos:end="25:34">bytestream2_get_byteu</name><argument_list pos:start="25:35" pos:end="25:38">(<argument pos:start="25:36" pos:end="25:37"><expr pos:start="25:36" pos:end="25:37"><name pos:start="25:36" pos:end="25:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="233:9"><if pos:start="27:9" pos:end="147:9">if<condition pos:start="27:11" pos:end="27:19">(<expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:13">p1</name> <operator pos:start="27:15" pos:end="27:16">==</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>)</condition> <block pos:start="27:21" pos:end="147:9">{<block_content pos:start="29:13" pos:end="145:22"> <comment type="line" pos:start="27:23" pos:end="27:35">//Escape code</comment>

            <expr_stmt pos:start="29:13" pos:end="29:42"><expr pos:start="29:13" pos:end="29:41"><name pos:start="29:13" pos:end="29:14">p2</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:41"><name pos:start="29:18" pos:end="29:37">bytestream2_get_byte</name><argument_list pos:start="29:38" pos:end="29:41">(<argument pos:start="29:39" pos:end="29:40"><expr pos:start="29:39" pos:end="29:40"><name pos:start="29:39" pos:end="29:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="85:13"><if pos:start="31:13" pos:end="59:13">if<condition pos:start="31:15" pos:end="31:23">(<expr pos:start="31:16" pos:end="31:22"><name pos:start="31:16" pos:end="31:17">p2</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr>)</condition> <block pos:start="31:25" pos:end="59:13">{<block_content pos:start="33:17" pos:end="57:25"> <comment type="line" pos:start="31:27" pos:end="31:39">//End-of-line</comment>

                <expr_stmt pos:start="33:17" pos:end="33:68"><expr pos:start="33:17" pos:end="33:67"><name pos:start="33:17" pos:end="33:22">output</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:28">pic</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:34">data</name><index pos:start="33:35" pos:end="33:37">[<expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">0</literal></expr>]</index></name> <operator pos:start="33:39" pos:end="33:39">+</operator> <operator pos:start="33:41" pos:end="33:41">(</operator><operator pos:start="33:42" pos:end="33:43">--</operator><name pos:start="33:44" pos:end="33:47">line</name><operator pos:start="33:48" pos:end="33:48">)</operator> <operator pos:start="33:50" pos:end="33:50">*</operator> <name pos:start="33:52" pos:end="33:67"><name pos:start="33:52" pos:end="33:54">pic</name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:64">linesize</name><index pos:start="33:65" pos:end="33:67">[<expr pos:start="33:66" pos:end="33:66"><literal type="number" pos:start="33:66" pos:end="33:66">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="35:17" pos:end="53:17"><if pos:start="35:17" pos:end="53:17">if <condition pos:start="35:20" pos:end="35:29">(<expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:24">line</name> <operator pos:start="35:26" pos:end="35:26">&lt;</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr>)</condition> <block pos:start="35:31" pos:end="53:17">{<block_content pos:start="37:21" pos:end="51:21">

                    <if_stmt pos:start="37:21" pos:end="51:21"><if pos:start="37:21" pos:end="41:21">if <condition pos:start="37:24" pos:end="37:54">(<expr pos:start="37:25" pos:end="37:53"><call pos:start="37:25" pos:end="37:48"><name pos:start="37:25" pos:end="37:44">bytestream2_get_be16</name><argument_list pos:start="37:45" pos:end="37:48">(<argument pos:start="37:46" pos:end="37:47"><expr pos:start="37:46" pos:end="37:47"><name pos:start="37:46" pos:end="37:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="37:50" pos:end="37:51">==</operator> <literal type="number" pos:start="37:53" pos:end="37:53">1</literal></expr>)</condition> <block pos:start="37:56" pos:end="41:21">{<block_content pos:start="39:25" pos:end="39:33"> <comment type="line" pos:start="37:58" pos:end="37:74">// end-of-picture</comment>

                        <return pos:start="39:25" pos:end="39:33">return <expr pos:start="39:32" pos:end="39:32"><literal type="number" pos:start="39:32" pos:end="39:32">0</literal></expr>;</return>

                    </block_content>}</block></if> <else pos:start="41:23" pos:end="51:21">else <block pos:start="41:28" pos:end="51:21">{<block_content pos:start="43:25" pos:end="49:51">

                        <expr_stmt pos:start="43:25" pos:end="47:63"><expr pos:start="43:25" pos:end="47:62"><call pos:start="43:25" pos:end="47:62"><name pos:start="43:25" pos:end="43:30">av_log</name><argument_list pos:start="43:31" pos:end="47:62">(<argument pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><name pos:start="43:32" pos:end="43:36">avctx</name></expr></argument>, <argument pos:start="43:39" pos:end="43:50"><expr pos:start="43:39" pos:end="43:50"><name pos:start="43:39" pos:end="43:50">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="45:32" pos:end="45:85"><expr pos:start="45:32" pos:end="45:85"><literal type="string" pos:start="45:32" pos:end="45:85">"Next line is beyond picture bounds (%d bytes left)\n"</literal></expr></argument>,

                               <argument pos:start="47:32" pos:end="47:61"><expr pos:start="47:32" pos:end="47:61"><call pos:start="47:32" pos:end="47:61"><name pos:start="47:32" pos:end="47:57">bytestream2_get_bytes_left</name><argument_list pos:start="47:58" pos:end="47:61">(<argument pos:start="47:59" pos:end="47:60"><expr pos:start="47:59" pos:end="47:60"><name pos:start="47:59" pos:end="47:60">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="49:25" pos:end="49:51">return <expr pos:start="49:32" pos:end="49:50"><name pos:start="49:32" pos:end="49:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:24"><expr pos:start="55:17" pos:end="55:23"><name pos:start="55:17" pos:end="55:19">pos</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>;</expr_stmt>

                <continue pos:start="57:17" pos:end="57:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="59:15" pos:end="63:13">else if<condition pos:start="59:22" pos:end="59:30">(<expr pos:start="59:23" pos:end="59:29"><name pos:start="59:23" pos:end="59:24">p2</name> <operator pos:start="59:26" pos:end="59:27">==</operator> <literal type="number" pos:start="59:29" pos:end="59:29">1</literal></expr>)</condition> <block pos:start="59:32" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:25"> <comment type="line" pos:start="59:34" pos:end="59:49">//End-of-picture</comment>

                <return pos:start="61:17" pos:end="61:25">return <expr pos:start="61:24" pos:end="61:24"><literal type="number" pos:start="61:24" pos:end="61:24">0</literal></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="63:15" pos:end="85:13">else if<condition pos:start="63:22" pos:end="63:30">(<expr pos:start="63:23" pos:end="63:29"><name pos:start="63:23" pos:end="63:24">p2</name> <operator pos:start="63:26" pos:end="63:27">==</operator> <literal type="number" pos:start="63:29" pos:end="63:29">2</literal></expr>)</condition> <block pos:start="63:32" pos:end="85:13">{<block_content pos:start="65:17" pos:end="83:25"> <comment type="line" pos:start="63:34" pos:end="63:39">//Skip</comment>

                <expr_stmt pos:start="65:17" pos:end="65:46"><expr pos:start="65:17" pos:end="65:45"><name pos:start="65:17" pos:end="65:18">p1</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:45"><name pos:start="65:22" pos:end="65:41">bytestream2_get_byte</name><argument_list pos:start="65:42" pos:end="65:45">(<argument pos:start="65:43" pos:end="65:44"><expr pos:start="65:43" pos:end="65:44"><name pos:start="65:43" pos:end="65:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:46"><expr pos:start="67:17" pos:end="67:45"><name pos:start="67:17" pos:end="67:18">p2</name> <operator pos:start="67:20" pos:end="67:20">=</operator> <call pos:start="67:22" pos:end="67:45"><name pos:start="67:22" pos:end="67:41">bytestream2_get_byte</name><argument_list pos:start="67:42" pos:end="67:45">(<argument pos:start="67:43" pos:end="67:44"><expr pos:start="67:43" pos:end="67:44"><name pos:start="67:43" pos:end="67:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:27"><expr pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:20">line</name> <operator pos:start="69:22" pos:end="69:23">-=</operator> <name pos:start="69:25" pos:end="69:26">p2</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:26"><expr pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:19">pos</name> <operator pos:start="71:21" pos:end="71:22">+=</operator> <name pos:start="71:24" pos:end="71:25">p1</name></expr>;</expr_stmt>

                <if_stmt pos:start="73:17" pos:end="79:17"><if pos:start="73:17" pos:end="79:17">if <condition pos:start="73:20" pos:end="73:45">(<expr pos:start="73:21" pos:end="73:44"><name pos:start="73:21" pos:end="73:24">line</name> <operator pos:start="73:26" pos:end="73:26">&lt;</operator> <literal type="number" pos:start="73:28" pos:end="73:28">0</literal> <operator pos:start="73:30" pos:end="73:31">||</operator> <name pos:start="73:33" pos:end="73:35">pos</name> <operator pos:start="73:37" pos:end="73:38">&gt;=</operator> <name pos:start="73:40" pos:end="73:44">width</name></expr>)</condition><block pos:start="73:46" pos:end="79:17">{<block_content pos:start="75:21" pos:end="77:30">

                    <expr_stmt pos:start="75:21" pos:end="75:80"><expr pos:start="75:21" pos:end="75:79"><call pos:start="75:21" pos:end="75:79"><name pos:start="75:21" pos:end="75:26">av_log</name><argument_list pos:start="75:27" pos:end="75:79">(<argument pos:start="75:28" pos:end="75:32"><expr pos:start="75:28" pos:end="75:32"><name pos:start="75:28" pos:end="75:32">avctx</name></expr></argument>, <argument pos:start="75:35" pos:end="75:46"><expr pos:start="75:35" pos:end="75:46"><name pos:start="75:35" pos:end="75:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:49" pos:end="75:78"><expr pos:start="75:49" pos:end="75:78"><literal type="string" pos:start="75:49" pos:end="75:78">"Skip beyond picture bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="77:21" pos:end="77:30">return <expr pos:start="77:28" pos:end="77:29"><operator pos:start="77:28" pos:end="77:28">-</operator><literal type="number" pos:start="77:29" pos:end="77:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:85"><expr pos:start="81:17" pos:end="81:84"><name pos:start="81:17" pos:end="81:22">output</name> <operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:37"><name pos:start="81:26" pos:end="81:28">pic</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:34">data</name><index pos:start="81:35" pos:end="81:37">[<expr pos:start="81:36" pos:end="81:36"><literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr>]</index></name> <operator pos:start="81:39" pos:end="81:39">+</operator> <name pos:start="81:41" pos:end="81:44">line</name> <operator pos:start="81:46" pos:end="81:46">*</operator> <name pos:start="81:48" pos:end="81:63"><name pos:start="81:48" pos:end="81:50">pic</name><operator pos:start="81:51" pos:end="81:52">-&gt;</operator><name pos:start="81:53" pos:end="81:60">linesize</name><index pos:start="81:61" pos:end="81:63">[<expr pos:start="81:62" pos:end="81:62"><literal type="number" pos:start="81:62" pos:end="81:62">0</literal></expr>]</index></name> <operator pos:start="81:65" pos:end="81:65">+</operator> <name pos:start="81:67" pos:end="81:69">pos</name> <operator pos:start="81:71" pos:end="81:71">*</operator> <operator pos:start="81:73" pos:end="81:73">(</operator><name pos:start="81:74" pos:end="81:78">depth</name> <operator pos:start="81:80" pos:end="81:81">&gt;&gt;</operator> <literal type="number" pos:start="81:83" pos:end="81:83">3</literal><operator pos:start="81:84" pos:end="81:84">)</operator></expr>;</expr_stmt>

                <continue pos:start="83:17" pos:end="83:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="87:13" pos:end="87:24">// Copy data</comment>

            <if_stmt pos:start="89:13" pos:end="103:13"><if pos:start="89:13" pos:end="97:13">if <condition pos:start="89:16" pos:end="91:82">(<expr pos:start="89:17" pos:end="91:81"><operator pos:start="89:17" pos:end="89:17">(</operator><name pos:start="89:18" pos:end="89:33"><name pos:start="89:18" pos:end="89:20">pic</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:30">linesize</name><index pos:start="89:31" pos:end="89:33">[<expr pos:start="89:32" pos:end="89:32"><literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr>]</index></name> <operator pos:start="89:35" pos:end="89:35">&gt;</operator> <literal type="number" pos:start="89:37" pos:end="89:37">0</literal> <operator pos:start="89:39" pos:end="89:40">&amp;&amp;</operator> <name pos:start="89:42" pos:end="89:47">output</name> <operator pos:start="89:49" pos:end="89:49">+</operator> <name pos:start="89:51" pos:end="89:52">p2</name> <operator pos:start="89:54" pos:end="89:54">*</operator> <operator pos:start="89:56" pos:end="89:56">(</operator><name pos:start="89:57" pos:end="89:61">depth</name> <operator pos:start="89:63" pos:end="89:64">&gt;&gt;</operator> <literal type="number" pos:start="89:66" pos:end="89:66">3</literal><operator pos:start="89:67" pos:end="89:67">)</operator> <operator pos:start="89:69" pos:end="89:69">&gt;</operator> <name pos:start="89:71" pos:end="89:80">output_end</name><operator pos:start="89:81" pos:end="89:81">)</operator> <operator pos:start="89:83" pos:end="89:84">||</operator>

                <operator pos:start="91:17" pos:end="91:17">(</operator><name pos:start="91:18" pos:end="91:33"><name pos:start="91:18" pos:end="91:20">pic</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:30">linesize</name><index pos:start="91:31" pos:end="91:33">[<expr pos:start="91:32" pos:end="91:32"><literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr>]</index></name> <operator pos:start="91:35" pos:end="91:35">&lt;</operator> <literal type="number" pos:start="91:37" pos:end="91:37">0</literal> <operator pos:start="91:39" pos:end="91:40">&amp;&amp;</operator> <name pos:start="91:42" pos:end="91:47">output</name> <operator pos:start="91:49" pos:end="91:49">+</operator> <name pos:start="91:51" pos:end="91:52">p2</name> <operator pos:start="91:54" pos:end="91:54">*</operator> <operator pos:start="91:56" pos:end="91:56">(</operator><name pos:start="91:57" pos:end="91:61">depth</name> <operator pos:start="91:63" pos:end="91:64">&gt;&gt;</operator> <literal type="number" pos:start="91:66" pos:end="91:66">3</literal><operator pos:start="91:67" pos:end="91:67">)</operator> <operator pos:start="91:69" pos:end="91:69">&lt;</operator> <name pos:start="91:71" pos:end="91:80">output_end</name><operator pos:start="91:81" pos:end="91:81">)</operator></expr>)</condition> <block pos:start="91:84" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:25">

                <expr_stmt pos:start="93:17" pos:end="93:55"><expr pos:start="93:17" pos:end="93:54"><call pos:start="93:17" pos:end="93:54"><name pos:start="93:17" pos:end="93:32">bytestream2_skip</name><argument_list pos:start="93:33" pos:end="93:54">(<argument pos:start="93:34" pos:end="93:35"><expr pos:start="93:34" pos:end="93:35"><name pos:start="93:34" pos:end="93:35">gb</name></expr></argument>, <argument pos:start="93:38" pos:end="93:53"><expr pos:start="93:38" pos:end="93:53"><literal type="number" pos:start="93:38" pos:end="93:38">2</literal> <operator pos:start="93:40" pos:end="93:40">*</operator> <operator pos:start="93:42" pos:end="93:42">(</operator><name pos:start="93:43" pos:end="93:47">depth</name> <operator pos:start="93:49" pos:end="93:50">&gt;&gt;</operator> <literal type="number" pos:start="93:52" pos:end="93:52">3</literal><operator pos:start="93:53" pos:end="93:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="95:17" pos:end="95:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="97:15" pos:end="103:13">else if <condition pos:start="97:23" pos:end="97:74">(<expr pos:start="97:24" pos:end="97:73"><call pos:start="97:24" pos:end="97:53"><name pos:start="97:24" pos:end="97:49">bytestream2_get_bytes_left</name><argument_list pos:start="97:50" pos:end="97:53">(<argument pos:start="97:51" pos:end="97:52"><expr pos:start="97:51" pos:end="97:52"><name pos:start="97:51" pos:end="97:52">gb</name></expr></argument>)</argument_list></call> <operator pos:start="97:55" pos:end="97:55">&lt;</operator> <name pos:start="97:57" pos:end="97:58">p2</name> <operator pos:start="97:60" pos:end="97:60">*</operator> <operator pos:start="97:62" pos:end="97:62">(</operator><name pos:start="97:63" pos:end="97:67">depth</name> <operator pos:start="97:69" pos:end="97:70">&gt;&gt;</operator> <literal type="number" pos:start="97:72" pos:end="97:72">3</literal><operator pos:start="97:73" pos:end="97:73">)</operator></expr>)</condition> <block pos:start="97:76" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:43">

                <expr_stmt pos:start="99:17" pos:end="99:68"><expr pos:start="99:17" pos:end="99:67"><call pos:start="99:17" pos:end="99:67"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="99:67">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">avctx</name></expr></argument>, <argument pos:start="99:31" pos:end="99:42"><expr pos:start="99:31" pos:end="99:42"><name pos:start="99:31" pos:end="99:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:45" pos:end="99:66"><expr pos:start="99:45" pos:end="99:66"><literal type="string" pos:start="99:45" pos:end="99:66">"bytestream overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="101:17" pos:end="101:43">return <expr pos:start="101:24" pos:end="101:42"><name pos:start="101:24" pos:end="101:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="107:13" pos:end="143:13"><if pos:start="107:13" pos:end="123:13">if <condition pos:start="107:16" pos:end="107:46">(<expr pos:start="107:17" pos:end="107:45"><operator pos:start="107:17" pos:end="107:17">(</operator><name pos:start="107:18" pos:end="107:22">depth</name> <operator pos:start="107:24" pos:end="107:25">==</operator> <literal type="number" pos:start="107:27" pos:end="107:27">8</literal><operator pos:start="107:28" pos:end="107:28">)</operator> <operator pos:start="107:30" pos:end="107:31">||</operator> <operator pos:start="107:33" pos:end="107:33">(</operator><name pos:start="107:34" pos:end="107:38">depth</name> <operator pos:start="107:40" pos:end="107:41">==</operator> <literal type="number" pos:start="107:43" pos:end="107:44">24</literal><operator pos:start="107:45" pos:end="107:45">)</operator></expr>)</condition> <block pos:start="107:48" pos:end="123:13">{<block_content pos:start="109:17" pos:end="121:17">

                <for pos:start="109:17" pos:end="113:17">for<control pos:start="109:20" pos:end="109:54">(<init pos:start="109:21" pos:end="109:26"><expr pos:start="109:21" pos:end="109:25"><name pos:start="109:21" pos:end="109:21">i</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <literal type="number" pos:start="109:25" pos:end="109:25">0</literal></expr>;</init> <condition pos:start="109:28" pos:end="109:49"><expr pos:start="109:28" pos:end="109:48"><name pos:start="109:28" pos:end="109:28">i</name> <operator pos:start="109:30" pos:end="109:30">&lt;</operator> <name pos:start="109:32" pos:end="109:33">p2</name> <operator pos:start="109:35" pos:end="109:35">*</operator> <operator pos:start="109:37" pos:end="109:37">(</operator><name pos:start="109:38" pos:end="109:42">depth</name> <operator pos:start="109:44" pos:end="109:45">&gt;&gt;</operator> <literal type="number" pos:start="109:47" pos:end="109:47">3</literal><operator pos:start="109:48" pos:end="109:48">)</operator></expr>;</condition> <incr pos:start="109:51" pos:end="109:53"><expr pos:start="109:51" pos:end="109:53"><name pos:start="109:51" pos:end="109:51">i</name><operator pos:start="109:52" pos:end="109:53">++</operator></expr></incr>)</control> <block pos:start="109:56" pos:end="113:17">{<block_content pos:start="111:21" pos:end="111:58">

                    <expr_stmt pos:start="111:21" pos:end="111:58"><expr pos:start="111:21" pos:end="111:57"><operator pos:start="111:21" pos:end="111:21">*</operator><name pos:start="111:22" pos:end="111:27">output</name><operator pos:start="111:28" pos:end="111:29">++</operator> <operator pos:start="111:31" pos:end="111:31">=</operator> <call pos:start="111:33" pos:end="111:57"><name pos:start="111:33" pos:end="111:53">bytestream2_get_byteu</name><argument_list pos:start="111:54" pos:end="111:57">(<argument pos:start="111:55" pos:end="111:56"><expr pos:start="111:55" pos:end="111:56"><name pos:start="111:55" pos:end="111:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <comment type="line" pos:start="115:17" pos:end="115:67">// RLE8 copy is actually padded - and runs are not!</comment>

                <if_stmt pos:start="117:17" pos:end="121:17"><if pos:start="117:17" pos:end="121:17">if<condition pos:start="117:19" pos:end="117:42">(<expr pos:start="117:20" pos:end="117:41"><name pos:start="117:20" pos:end="117:24">depth</name> <operator pos:start="117:26" pos:end="117:27">==</operator> <literal type="number" pos:start="117:29" pos:end="117:29">8</literal> <operator pos:start="117:31" pos:end="117:32">&amp;&amp;</operator> <operator pos:start="117:34" pos:end="117:34">(</operator><name pos:start="117:35" pos:end="117:36">p2</name> <operator pos:start="117:38" pos:end="117:38">&amp;</operator> <literal type="number" pos:start="117:40" pos:end="117:40">1</literal><operator pos:start="117:41" pos:end="117:41">)</operator></expr>)</condition> <block pos:start="117:44" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:44">

                    <expr_stmt pos:start="119:21" pos:end="119:44"><expr pos:start="119:21" pos:end="119:43"><call pos:start="119:21" pos:end="119:43"><name pos:start="119:21" pos:end="119:36">bytestream2_skip</name><argument_list pos:start="119:37" pos:end="119:43">(<argument pos:start="119:38" pos:end="119:39"><expr pos:start="119:38" pos:end="119:39"><name pos:start="119:38" pos:end="119:39">gb</name></expr></argument>, <argument pos:start="119:42" pos:end="119:42"><expr pos:start="119:42" pos:end="119:42"><literal type="number" pos:start="119:42" pos:end="119:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="123:15" pos:end="133:13">else if <condition pos:start="123:23" pos:end="123:35">(<expr pos:start="123:24" pos:end="123:34"><name pos:start="123:24" pos:end="123:28">depth</name> <operator pos:start="123:30" pos:end="123:31">==</operator> <literal type="number" pos:start="123:33" pos:end="123:34">16</literal></expr>)</condition> <block pos:start="123:37" pos:end="133:13">{<block_content pos:start="125:17" pos:end="131:17">

                <for pos:start="125:17" pos:end="131:17">for<control pos:start="125:20" pos:end="125:39">(<init pos:start="125:21" pos:end="125:26"><expr pos:start="125:21" pos:end="125:25"><name pos:start="125:21" pos:end="125:21">i</name> <operator pos:start="125:23" pos:end="125:23">=</operator> <literal type="number" pos:start="125:25" pos:end="125:25">0</literal></expr>;</init> <condition pos:start="125:28" pos:end="125:34"><expr pos:start="125:28" pos:end="125:33"><name pos:start="125:28" pos:end="125:28">i</name> <operator pos:start="125:30" pos:end="125:30">&lt;</operator> <name pos:start="125:32" pos:end="125:33">p2</name></expr>;</condition> <incr pos:start="125:36" pos:end="125:38"><expr pos:start="125:36" pos:end="125:38"><name pos:start="125:36" pos:end="125:36">i</name><operator pos:start="125:37" pos:end="125:38">++</operator></expr></incr>)</control> <block pos:start="125:41" pos:end="131:17">{<block_content pos:start="127:21" pos:end="129:32">

                    <expr_stmt pos:start="127:21" pos:end="127:67"><expr pos:start="127:21" pos:end="127:66"><operator pos:start="127:21" pos:end="127:21">*</operator><operator pos:start="127:22" pos:end="127:22">(</operator><name pos:start="127:23" pos:end="127:30">uint16_t</name><operator pos:start="127:31" pos:end="127:31">*</operator><operator pos:start="127:32" pos:end="127:32">)</operator><name pos:start="127:33" pos:end="127:38">output</name> <operator pos:start="127:40" pos:end="127:40">=</operator> <call pos:start="127:42" pos:end="127:66"><name pos:start="127:42" pos:end="127:62">bytestream2_get_le16u</name><argument_list pos:start="127:63" pos:end="127:66">(<argument pos:start="127:64" pos:end="127:65"><expr pos:start="127:64" pos:end="127:65"><name pos:start="127:64" pos:end="127:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:32"><expr pos:start="129:21" pos:end="129:31"><name pos:start="129:21" pos:end="129:26">output</name> <operator pos:start="129:28" pos:end="129:29">+=</operator> <literal type="number" pos:start="129:31" pos:end="129:31">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="133:15" pos:end="143:13">else if <condition pos:start="133:23" pos:end="133:35">(<expr pos:start="133:24" pos:end="133:34"><name pos:start="133:24" pos:end="133:28">depth</name> <operator pos:start="133:30" pos:end="133:31">==</operator> <literal type="number" pos:start="133:33" pos:end="133:34">32</literal></expr>)</condition> <block pos:start="133:37" pos:end="143:13">{<block_content pos:start="135:17" pos:end="141:17">

                <for pos:start="135:17" pos:end="141:17">for<control pos:start="135:20" pos:end="135:39">(<init pos:start="135:21" pos:end="135:26"><expr pos:start="135:21" pos:end="135:25"><name pos:start="135:21" pos:end="135:21">i</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <literal type="number" pos:start="135:25" pos:end="135:25">0</literal></expr>;</init> <condition pos:start="135:28" pos:end="135:34"><expr pos:start="135:28" pos:end="135:33"><name pos:start="135:28" pos:end="135:28">i</name> <operator pos:start="135:30" pos:end="135:30">&lt;</operator> <name pos:start="135:32" pos:end="135:33">p2</name></expr>;</condition> <incr pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:36">i</name><operator pos:start="135:37" pos:end="135:38">++</operator></expr></incr>)</control> <block pos:start="135:41" pos:end="141:17">{<block_content pos:start="137:21" pos:end="139:32">

                    <expr_stmt pos:start="137:21" pos:end="137:67"><expr pos:start="137:21" pos:end="137:66"><operator pos:start="137:21" pos:end="137:21">*</operator><operator pos:start="137:22" pos:end="137:22">(</operator><name pos:start="137:23" pos:end="137:30">uint32_t</name><operator pos:start="137:31" pos:end="137:31">*</operator><operator pos:start="137:32" pos:end="137:32">)</operator><name pos:start="137:33" pos:end="137:38">output</name> <operator pos:start="137:40" pos:end="137:40">=</operator> <call pos:start="137:42" pos:end="137:66"><name pos:start="137:42" pos:end="137:62">bytestream2_get_le32u</name><argument_list pos:start="137:63" pos:end="137:66">(<argument pos:start="137:64" pos:end="137:65"><expr pos:start="137:64" pos:end="137:65"><name pos:start="137:64" pos:end="137:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:32"><expr pos:start="139:21" pos:end="139:31"><name pos:start="139:21" pos:end="139:26">output</name> <operator pos:start="139:28" pos:end="139:29">+=</operator> <literal type="number" pos:start="139:31" pos:end="139:31">4</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:22"><expr pos:start="145:13" pos:end="145:21"><name pos:start="145:13" pos:end="145:15">pos</name> <operator pos:start="145:17" pos:end="145:18">+=</operator> <name pos:start="145:20" pos:end="145:21">p2</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="147:11" pos:end="233:9">else <block pos:start="147:16" pos:end="233:9">{<block_content pos:start="149:13" pos:end="231:22"> <comment type="line" pos:start="147:18" pos:end="147:32">//run of pixels</comment>

            <decl_stmt pos:start="149:13" pos:end="149:27"><decl pos:start="149:13" pos:end="149:26"><type pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:19">uint8_t</name></type> <name pos:start="149:21" pos:end="149:26"><name pos:start="149:21" pos:end="149:23">pix</name><index pos:start="149:24" pos:end="149:26">[<expr pos:start="149:25" pos:end="149:25"><literal type="number" pos:start="149:25" pos:end="149:25">3</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:start="149:29" pos:end="149:44">//original pixel</comment>

            <if_stmt pos:start="151:13" pos:end="155:25"><if pos:start="151:13" pos:end="155:25">if <condition pos:start="151:16" pos:end="153:82">(<expr pos:start="151:17" pos:end="153:81"><operator pos:start="151:17" pos:end="151:17">(</operator><name pos:start="151:18" pos:end="151:33"><name pos:start="151:18" pos:end="151:20">pic</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:30">linesize</name><index pos:start="151:31" pos:end="151:33">[<expr pos:start="151:32" pos:end="151:32"><literal type="number" pos:start="151:32" pos:end="151:32">0</literal></expr>]</index></name> <operator pos:start="151:35" pos:end="151:35">&gt;</operator> <literal type="number" pos:start="151:37" pos:end="151:37">0</literal> <operator pos:start="151:39" pos:end="151:40">&amp;&amp;</operator> <name pos:start="151:42" pos:end="151:47">output</name> <operator pos:start="151:49" pos:end="151:49">+</operator> <name pos:start="151:51" pos:end="151:52">p1</name> <operator pos:start="151:54" pos:end="151:54">*</operator> <operator pos:start="151:56" pos:end="151:56">(</operator><name pos:start="151:57" pos:end="151:61">depth</name> <operator pos:start="151:63" pos:end="151:64">&gt;&gt;</operator> <literal type="number" pos:start="151:66" pos:end="151:66">3</literal><operator pos:start="151:67" pos:end="151:67">)</operator> <operator pos:start="151:69" pos:end="151:69">&gt;</operator> <name pos:start="151:71" pos:end="151:80">output_end</name><operator pos:start="151:81" pos:end="151:81">)</operator> <operator pos:start="151:83" pos:end="151:84">||</operator>

                <operator pos:start="153:17" pos:end="153:17">(</operator><name pos:start="153:18" pos:end="153:33"><name pos:start="153:18" pos:end="153:20">pic</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:30">linesize</name><index pos:start="153:31" pos:end="153:33">[<expr pos:start="153:32" pos:end="153:32"><literal type="number" pos:start="153:32" pos:end="153:32">0</literal></expr>]</index></name> <operator pos:start="153:35" pos:end="153:35">&lt;</operator> <literal type="number" pos:start="153:37" pos:end="153:37">0</literal> <operator pos:start="153:39" pos:end="153:40">&amp;&amp;</operator> <name pos:start="153:42" pos:end="153:47">output</name> <operator pos:start="153:49" pos:end="153:49">+</operator> <name pos:start="153:51" pos:end="153:52">p1</name> <operator pos:start="153:54" pos:end="153:54">*</operator> <operator pos:start="153:56" pos:end="153:56">(</operator><name pos:start="153:57" pos:end="153:61">depth</name> <operator pos:start="153:63" pos:end="153:64">&gt;&gt;</operator> <literal type="number" pos:start="153:66" pos:end="153:66">3</literal><operator pos:start="153:67" pos:end="153:67">)</operator> <operator pos:start="153:69" pos:end="153:69">&lt;</operator> <name pos:start="153:71" pos:end="153:80">output_end</name><operator pos:start="153:81" pos:end="153:81">)</operator></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:25"><block_content pos:start="155:17" pos:end="155:25">

                <continue pos:start="155:17" pos:end="155:25">continue;</continue></block_content></block></if></if_stmt>

            <switch pos:start="157:13" pos:end="179:13">switch<condition pos:start="157:19" pos:end="157:25">(<expr pos:start="157:20" pos:end="157:24"><name pos:start="157:20" pos:end="157:24">depth</name></expr>)</condition><block pos:start="157:26" pos:end="179:13">{<block_content pos:start="159:13" pos:end="177:27">

            <case pos:start="159:13" pos:end="159:20">case  <expr pos:start="159:19" pos:end="159:19"><literal type="number" pos:start="159:19" pos:end="159:19">8</literal></expr>:</case> <expr_stmt pos:start="159:22" pos:end="159:55"><expr pos:start="159:22" pos:end="159:54"><name pos:start="159:22" pos:end="159:27"><name pos:start="159:22" pos:end="159:24">pix</name><index pos:start="159:25" pos:end="159:27">[<expr pos:start="159:26" pos:end="159:26"><literal type="number" pos:start="159:26" pos:end="159:26">0</literal></expr>]</index></name> <operator pos:start="159:29" pos:end="159:29">=</operator> <call pos:start="159:31" pos:end="159:54"><name pos:start="159:31" pos:end="159:50">bytestream2_get_byte</name><argument_list pos:start="159:51" pos:end="159:54">(<argument pos:start="159:52" pos:end="159:53"><expr pos:start="159:52" pos:end="159:53"><name pos:start="159:52" pos:end="159:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <break pos:start="161:22" pos:end="161:27">break;</break>

            <case pos:start="163:13" pos:end="163:20">case <expr pos:start="163:18" pos:end="163:19"><literal type="number" pos:start="163:18" pos:end="163:19">16</literal></expr>:</case> <expr_stmt pos:start="163:22" pos:end="163:55"><expr pos:start="163:22" pos:end="163:54"><name pos:start="163:22" pos:end="163:26">pix16</name>  <operator pos:start="163:29" pos:end="163:29">=</operator> <call pos:start="163:31" pos:end="163:54"><name pos:start="163:31" pos:end="163:50">bytestream2_get_le16</name><argument_list pos:start="163:51" pos:end="163:54">(<argument pos:start="163:52" pos:end="163:53"><expr pos:start="163:52" pos:end="163:53"><name pos:start="163:52" pos:end="163:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <break pos:start="165:22" pos:end="165:27">break;</break>

            <case pos:start="167:13" pos:end="167:20">case <expr pos:start="167:18" pos:end="167:19"><literal type="number" pos:start="167:18" pos:end="167:19">24</literal></expr>:</case> <expr_stmt pos:start="167:22" pos:end="167:55"><expr pos:start="167:22" pos:end="167:54"><name pos:start="167:22" pos:end="167:27"><name pos:start="167:22" pos:end="167:24">pix</name><index pos:start="167:25" pos:end="167:27">[<expr pos:start="167:26" pos:end="167:26"><literal type="number" pos:start="167:26" pos:end="167:26">0</literal></expr>]</index></name> <operator pos:start="167:29" pos:end="167:29">=</operator> <call pos:start="167:31" pos:end="167:54"><name pos:start="167:31" pos:end="167:50">bytestream2_get_byte</name><argument_list pos:start="167:51" pos:end="167:54">(<argument pos:start="167:52" pos:end="167:53"><expr pos:start="167:52" pos:end="167:53"><name pos:start="167:52" pos:end="167:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <expr_stmt pos:start="169:22" pos:end="169:55"><expr pos:start="169:22" pos:end="169:54"><name pos:start="169:22" pos:end="169:27"><name pos:start="169:22" pos:end="169:24">pix</name><index pos:start="169:25" pos:end="169:27">[<expr pos:start="169:26" pos:end="169:26"><literal type="number" pos:start="169:26" pos:end="169:26">1</literal></expr>]</index></name> <operator pos:start="169:29" pos:end="169:29">=</operator> <call pos:start="169:31" pos:end="169:54"><name pos:start="169:31" pos:end="169:50">bytestream2_get_byte</name><argument_list pos:start="169:51" pos:end="169:54">(<argument pos:start="169:52" pos:end="169:53"><expr pos:start="169:52" pos:end="169:53"><name pos:start="169:52" pos:end="169:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <expr_stmt pos:start="171:22" pos:end="171:55"><expr pos:start="171:22" pos:end="171:54"><name pos:start="171:22" pos:end="171:27"><name pos:start="171:22" pos:end="171:24">pix</name><index pos:start="171:25" pos:end="171:27">[<expr pos:start="171:26" pos:end="171:26"><literal type="number" pos:start="171:26" pos:end="171:26">2</literal></expr>]</index></name> <operator pos:start="171:29" pos:end="171:29">=</operator> <call pos:start="171:31" pos:end="171:54"><name pos:start="171:31" pos:end="171:50">bytestream2_get_byte</name><argument_list pos:start="171:51" pos:end="171:54">(<argument pos:start="171:52" pos:end="171:53"><expr pos:start="171:52" pos:end="171:53"><name pos:start="171:52" pos:end="171:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <break pos:start="173:22" pos:end="173:27">break;</break>

            <case pos:start="175:13" pos:end="175:20">case <expr pos:start="175:18" pos:end="175:19"><literal type="number" pos:start="175:18" pos:end="175:19">32</literal></expr>:</case> <expr_stmt pos:start="175:22" pos:end="175:55"><expr pos:start="175:22" pos:end="175:54"><name pos:start="175:22" pos:end="175:26">pix32</name>  <operator pos:start="175:29" pos:end="175:29">=</operator> <call pos:start="175:31" pos:end="175:54"><name pos:start="175:31" pos:end="175:50">bytestream2_get_le32</name><argument_list pos:start="175:51" pos:end="175:54">(<argument pos:start="175:52" pos:end="175:53"><expr pos:start="175:52" pos:end="175:53"><name pos:start="175:52" pos:end="175:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                     <break pos:start="177:22" pos:end="177:27">break;</break>

            </block_content>}</block></switch>

            <switch pos:start="181:13" pos:end="229:13">switch<condition pos:start="181:19" pos:end="181:25">(<expr pos:start="181:20" pos:end="181:24"><name pos:start="181:20" pos:end="181:24">depth</name></expr>)</condition><block pos:start="181:26" pos:end="229:13">{<block_content pos:start="183:13" pos:end="227:22">

            <case pos:start="183:13" pos:end="183:20">case  <expr pos:start="183:19" pos:end="183:19"><literal type="number" pos:start="183:19" pos:end="183:19">8</literal></expr>:</case>

                <for pos:start="185:17" pos:end="187:43">for<control pos:start="185:20" pos:end="185:39">(<init pos:start="185:21" pos:end="185:26"><expr pos:start="185:21" pos:end="185:25"><name pos:start="185:21" pos:end="185:21">i</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <literal type="number" pos:start="185:25" pos:end="185:25">0</literal></expr>;</init> <condition pos:start="185:28" pos:end="185:34"><expr pos:start="185:28" pos:end="185:33"><name pos:start="185:28" pos:end="185:28">i</name> <operator pos:start="185:30" pos:end="185:30">&lt;</operator> <name pos:start="185:32" pos:end="185:33">p1</name></expr>;</condition> <incr pos:start="185:36" pos:end="185:38"><expr pos:start="185:36" pos:end="185:38"><name pos:start="185:36" pos:end="185:36">i</name><operator pos:start="185:37" pos:end="185:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="187:25" pos:end="187:43"><block_content pos:start="187:25" pos:end="187:43">

                        <expr_stmt pos:start="187:25" pos:end="187:43"><expr pos:start="187:25" pos:end="187:42"><operator pos:start="187:25" pos:end="187:25">*</operator><name pos:start="187:26" pos:end="187:31">output</name><operator pos:start="187:32" pos:end="187:33">++</operator> <operator pos:start="187:35" pos:end="187:35">=</operator> <name pos:start="187:37" pos:end="187:42"><name pos:start="187:37" pos:end="187:39">pix</name><index pos:start="187:40" pos:end="187:42">[<expr pos:start="187:41" pos:end="187:41"><literal type="number" pos:start="187:41" pos:end="187:41">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <break pos:start="189:17" pos:end="189:22">break;</break>

            <case pos:start="191:13" pos:end="191:20">case <expr pos:start="191:18" pos:end="191:19"><literal type="number" pos:start="191:18" pos:end="191:19">16</literal></expr>:</case>

                <for pos:start="193:17" pos:end="199:17">for<control pos:start="193:20" pos:end="193:39">(<init pos:start="193:21" pos:end="193:26"><expr pos:start="193:21" pos:end="193:25"><name pos:start="193:21" pos:end="193:21">i</name> <operator pos:start="193:23" pos:end="193:23">=</operator> <literal type="number" pos:start="193:25" pos:end="193:25">0</literal></expr>;</init> <condition pos:start="193:28" pos:end="193:34"><expr pos:start="193:28" pos:end="193:33"><name pos:start="193:28" pos:end="193:28">i</name> <operator pos:start="193:30" pos:end="193:30">&lt;</operator> <name pos:start="193:32" pos:end="193:33">p1</name></expr>;</condition> <incr pos:start="193:36" pos:end="193:38"><expr pos:start="193:36" pos:end="193:38"><name pos:start="193:36" pos:end="193:36">i</name><operator pos:start="193:37" pos:end="193:38">++</operator></expr></incr>)</control> <block pos:start="193:41" pos:end="199:17">{<block_content pos:start="195:25" pos:end="197:36">

                        <expr_stmt pos:start="195:25" pos:end="195:51"><expr pos:start="195:25" pos:end="195:50"><operator pos:start="195:25" pos:end="195:25">*</operator><operator pos:start="195:26" pos:end="195:26">(</operator><name pos:start="195:27" pos:end="195:34">uint16_t</name><operator pos:start="195:35" pos:end="195:35">*</operator><operator pos:start="195:36" pos:end="195:36">)</operator><name pos:start="195:37" pos:end="195:42">output</name> <operator pos:start="195:44" pos:end="195:44">=</operator> <name pos:start="195:46" pos:end="195:50">pix16</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="197:25" pos:end="197:36"><expr pos:start="197:25" pos:end="197:35"><name pos:start="197:25" pos:end="197:30">output</name> <operator pos:start="197:32" pos:end="197:33">+=</operator> <literal type="number" pos:start="197:35" pos:end="197:35">2</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <break pos:start="201:17" pos:end="201:22">break;</break>

            <case pos:start="203:13" pos:end="203:20">case <expr pos:start="203:18" pos:end="203:19"><literal type="number" pos:start="203:18" pos:end="203:19">24</literal></expr>:</case>

                <for pos:start="205:17" pos:end="213:17">for<control pos:start="205:20" pos:end="205:39">(<init pos:start="205:21" pos:end="205:26"><expr pos:start="205:21" pos:end="205:25"><name pos:start="205:21" pos:end="205:21">i</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <literal type="number" pos:start="205:25" pos:end="205:25">0</literal></expr>;</init> <condition pos:start="205:28" pos:end="205:34"><expr pos:start="205:28" pos:end="205:33"><name pos:start="205:28" pos:end="205:28">i</name> <operator pos:start="205:30" pos:end="205:30">&lt;</operator> <name pos:start="205:32" pos:end="205:33">p1</name></expr>;</condition> <incr pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><name pos:start="205:36" pos:end="205:36">i</name><operator pos:start="205:37" pos:end="205:38">++</operator></expr></incr>)</control> <block pos:start="205:41" pos:end="213:17">{<block_content pos:start="207:25" pos:end="211:43">

                        <expr_stmt pos:start="207:25" pos:end="207:43"><expr pos:start="207:25" pos:end="207:42"><operator pos:start="207:25" pos:end="207:25">*</operator><name pos:start="207:26" pos:end="207:31">output</name><operator pos:start="207:32" pos:end="207:33">++</operator> <operator pos:start="207:35" pos:end="207:35">=</operator> <name pos:start="207:37" pos:end="207:42"><name pos:start="207:37" pos:end="207:39">pix</name><index pos:start="207:40" pos:end="207:42">[<expr pos:start="207:41" pos:end="207:41"><literal type="number" pos:start="207:41" pos:end="207:41">0</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="209:25" pos:end="209:43"><expr pos:start="209:25" pos:end="209:42"><operator pos:start="209:25" pos:end="209:25">*</operator><name pos:start="209:26" pos:end="209:31">output</name><operator pos:start="209:32" pos:end="209:33">++</operator> <operator pos:start="209:35" pos:end="209:35">=</operator> <name pos:start="209:37" pos:end="209:42"><name pos:start="209:37" pos:end="209:39">pix</name><index pos:start="209:40" pos:end="209:42">[<expr pos:start="209:41" pos:end="209:41"><literal type="number" pos:start="209:41" pos:end="209:41">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="211:25" pos:end="211:43"><expr pos:start="211:25" pos:end="211:42"><operator pos:start="211:25" pos:end="211:25">*</operator><name pos:start="211:26" pos:end="211:31">output</name><operator pos:start="211:32" pos:end="211:33">++</operator> <operator pos:start="211:35" pos:end="211:35">=</operator> <name pos:start="211:37" pos:end="211:42"><name pos:start="211:37" pos:end="211:39">pix</name><index pos:start="211:40" pos:end="211:42">[<expr pos:start="211:41" pos:end="211:41"><literal type="number" pos:start="211:41" pos:end="211:41">2</literal></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <break pos:start="215:17" pos:end="215:22">break;</break>

            <case pos:start="217:13" pos:end="217:20">case <expr pos:start="217:18" pos:end="217:19"><literal type="number" pos:start="217:18" pos:end="217:19">32</literal></expr>:</case>

                <for pos:start="219:17" pos:end="225:17">for<control pos:start="219:20" pos:end="219:39">(<init pos:start="219:21" pos:end="219:26"><expr pos:start="219:21" pos:end="219:25"><name pos:start="219:21" pos:end="219:21">i</name> <operator pos:start="219:23" pos:end="219:23">=</operator> <literal type="number" pos:start="219:25" pos:end="219:25">0</literal></expr>;</init> <condition pos:start="219:28" pos:end="219:34"><expr pos:start="219:28" pos:end="219:33"><name pos:start="219:28" pos:end="219:28">i</name> <operator pos:start="219:30" pos:end="219:30">&lt;</operator> <name pos:start="219:32" pos:end="219:33">p1</name></expr>;</condition> <incr pos:start="219:36" pos:end="219:38"><expr pos:start="219:36" pos:end="219:38"><name pos:start="219:36" pos:end="219:36">i</name><operator pos:start="219:37" pos:end="219:38">++</operator></expr></incr>)</control> <block pos:start="219:41" pos:end="225:17">{<block_content pos:start="221:25" pos:end="223:36">

                        <expr_stmt pos:start="221:25" pos:end="221:51"><expr pos:start="221:25" pos:end="221:50"><operator pos:start="221:25" pos:end="221:25">*</operator><operator pos:start="221:26" pos:end="221:26">(</operator><name pos:start="221:27" pos:end="221:34">uint32_t</name><operator pos:start="221:35" pos:end="221:35">*</operator><operator pos:start="221:36" pos:end="221:36">)</operator><name pos:start="221:37" pos:end="221:42">output</name> <operator pos:start="221:44" pos:end="221:44">=</operator> <name pos:start="221:46" pos:end="221:50">pix32</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="223:25" pos:end="223:36"><expr pos:start="223:25" pos:end="223:35"><name pos:start="223:25" pos:end="223:30">output</name> <operator pos:start="223:32" pos:end="223:33">+=</operator> <literal type="number" pos:start="223:35" pos:end="223:35">4</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <break pos:start="227:17" pos:end="227:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="231:13" pos:end="231:22"><expr pos:start="231:13" pos:end="231:21"><name pos:start="231:13" pos:end="231:15">pos</name> <operator pos:start="231:17" pos:end="231:18">+=</operator> <name pos:start="231:20" pos:end="231:21">p1</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="239:5" pos:end="239:78"><expr pos:start="239:5" pos:end="239:77"><call pos:start="239:5" pos:end="239:77"><name pos:start="239:5" pos:end="239:10">av_log</name><argument_list pos:start="239:11" pos:end="239:77">(<argument pos:start="239:12" pos:end="239:16"><expr pos:start="239:12" pos:end="239:16"><name pos:start="239:12" pos:end="239:16">avctx</name></expr></argument>, <argument pos:start="239:19" pos:end="239:32"><expr pos:start="239:19" pos:end="239:32"><name pos:start="239:19" pos:end="239:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="239:35" pos:end="239:76"><expr pos:start="239:35" pos:end="239:76"><literal type="string" pos:start="239:35" pos:end="239:76">"MS RLE warning: no end-of-picture code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="241:5" pos:end="241:13">return <expr pos:start="241:12" pos:end="241:12"><literal type="number" pos:start="241:12" pos:end="241:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
