<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6487.c" pos:tabs="8"><function pos:start="1:1" pos:end="743:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">lsi_execute_script</name><parameter_list pos:start="1:31" pos:end="1:43">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:41"><name pos:start="1:32" pos:end="1:39">LSIState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="743:1">{<block_content pos:start="5:5" pos:end="741:43">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">insn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">opcode</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:33"><expr pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:13">istat1</name></name> <operator pos:start="13:15" pos:end="13:16">|=</operator> <name pos:start="13:18" pos:end="13:32">LSI_ISTAT1_SRUN</name></expr>;</expr_stmt>

<label pos:start="15:1" pos:end="15:6"><name pos:start="15:1" pos:end="15:5">again</name>:</label>

    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:8">insn</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:32"><name pos:start="17:12" pos:end="17:21">read_dword</name><argument_list pos:start="17:22" pos:end="17:32">(<argument pos:start="17:23" pos:end="17:23"><expr pos:start="17:23" pos:end="17:23"><name pos:start="17:23" pos:end="17:23">s</name></expr></argument>, <argument pos:start="17:26" pos:end="17:31"><expr pos:start="17:26" pos:end="17:31"><name pos:start="17:26" pos:end="17:31"><name pos:start="17:26" pos:end="17:26">s</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:31">dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:8">addr</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:36"><name pos:start="19:12" pos:end="19:21">read_dword</name><argument_list pos:start="19:22" pos:end="19:36">(<argument pos:start="19:23" pos:end="19:23"><expr pos:start="19:23" pos:end="19:23"><name pos:start="19:23" pos:end="19:23">s</name></expr></argument>, <argument pos:start="19:26" pos:end="19:35"><expr pos:start="19:26" pos:end="19:35"><name pos:start="19:26" pos:end="19:31"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:31">dsp</name></name> <operator pos:start="19:33" pos:end="19:33">+</operator> <literal type="number" pos:start="19:35" pos:end="19:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:75"><expr pos:start="21:5" pos:end="21:74"><call pos:start="21:5" pos:end="21:74"><name pos:start="21:5" pos:end="21:11">DPRINTF</name><argument_list pos:start="21:12" pos:end="21:74">(<argument pos:start="21:13" pos:end="21:53"><expr pos:start="21:13" pos:end="21:53"><literal type="string" pos:start="21:13" pos:end="21:53">"SCRIPTS dsp=%08x opcode %08x arg %08x\n"</literal></expr></argument>, <argument pos:start="21:56" pos:end="21:61"><expr pos:start="21:56" pos:end="21:61"><name pos:start="21:56" pos:end="21:61"><name pos:start="21:56" pos:end="21:56">s</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:61">dsp</name></name></expr></argument>, <argument pos:start="21:64" pos:end="21:67"><expr pos:start="21:64" pos:end="21:67"><name pos:start="21:64" pos:end="21:67">insn</name></expr></argument>, <argument pos:start="21:70" pos:end="21:73"><expr pos:start="21:70" pos:end="21:73"><name pos:start="21:70" pos:end="21:73">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:11">dsps</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:18">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:11">dcmd</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:18">insn</name> <operator pos:start="25:20" pos:end="25:21">&gt;&gt;</operator> <literal type="number" pos:start="25:23" pos:end="25:24">24</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:10">dsp</name></name> <operator pos:start="27:12" pos:end="27:13">+=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">8</literal></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="723:5">switch <condition pos:start="29:12" pos:end="29:23">(<expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:16">insn</name> <operator pos:start="29:18" pos:end="29:19">&gt;&gt;</operator> <literal type="number" pos:start="29:21" pos:end="29:22">30</literal></expr>)</condition> <block pos:start="29:25" pos:end="723:5">{<block_content pos:start="31:5" pos:end="721:9">

    <case pos:start="31:5" pos:end="31:11">case <expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">0</literal></expr>:</case> <comment type="block" pos:start="31:13" pos:end="31:30">/* Block move.  */</comment>

        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="41:9">if <condition pos:start="33:12" pos:end="33:37">(<expr pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">sist1</name></name> <operator pos:start="33:22" pos:end="33:22">&amp;</operator> <name pos:start="33:24" pos:end="33:36">LSI_SIST1_STO</name></expr>)</condition> <block pos:start="33:39" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:18">

            <expr_stmt pos:start="35:13" pos:end="35:48"><expr pos:start="35:13" pos:end="35:47"><call pos:start="35:13" pos:end="35:47"><name pos:start="35:13" pos:end="35:19">DPRINTF</name><argument_list pos:start="35:20" pos:end="35:47">(<argument pos:start="35:21" pos:end="35:46"><expr pos:start="35:21" pos:end="35:46"><literal type="string" pos:start="35:21" pos:end="35:46">"Delayed select timeout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:31"><expr pos:start="37:13" pos:end="37:30"><call pos:start="37:13" pos:end="37:30"><name pos:start="37:13" pos:end="37:27">lsi_stop_script</name><argument_list pos:start="37:28" pos:end="37:30">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">dbc</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:21">insn</name> <operator pos:start="43:23" pos:end="43:23">&amp;</operator> <literal type="number" pos:start="43:25" pos:end="43:32">0xffffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:14">rbc</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:23"><name pos:start="45:18" pos:end="45:18">s</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:23">dbc</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="71:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:16">insn</name> <operator pos:start="47:18" pos:end="47:18">&amp;</operator> <operator pos:start="47:20" pos:end="47:20">(</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal> <operator pos:start="47:23" pos:end="47:24">&lt;&lt;</operator> <literal type="number" pos:start="47:26" pos:end="47:27">29</literal><operator pos:start="47:28" pos:end="47:28">)</operator></expr>)</condition> <block pos:start="47:31" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:39">

            <comment type="block" pos:start="49:13" pos:end="49:39">/* Indirect addressing.  */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:39"><expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:16">addr</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:29">read_dword</name><argument_list pos:start="51:30" pos:end="51:38">(<argument pos:start="51:31" pos:end="51:31"><expr pos:start="51:31" pos:end="51:31"><name pos:start="51:31" pos:end="51:31">s</name></expr></argument>, <argument pos:start="51:34" pos:end="51:37"><expr pos:start="51:34" pos:end="51:37"><name pos:start="51:34" pos:end="51:37">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="71:9">else if <condition pos:start="53:19" pos:end="53:36">(<expr pos:start="53:20" pos:end="53:35"><name pos:start="53:20" pos:end="53:23">insn</name> <operator pos:start="53:25" pos:end="53:25">&amp;</operator> <operator pos:start="53:27" pos:end="53:27">(</operator><literal type="number" pos:start="53:28" pos:end="53:28">1</literal> <operator pos:start="53:30" pos:end="53:31">&lt;&lt;</operator> <literal type="number" pos:start="53:33" pos:end="53:34">28</literal><operator pos:start="53:35" pos:end="53:35">)</operator></expr>)</condition> <block pos:start="53:38" pos:end="71:9">{<block_content pos:start="55:13" pos:end="69:39">

            <decl_stmt pos:start="55:13" pos:end="55:28"><decl pos:start="55:13" pos:end="55:27"><type pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:20">uint32_t</name></type> <name pos:start="55:22" pos:end="55:27"><name pos:start="55:22" pos:end="55:24">buf</name><index pos:start="55:25" pos:end="55:27">[<expr pos:start="55:26" pos:end="55:26"><literal type="number" pos:start="55:26" pos:end="55:26">2</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="57:13" pos:end="57:27"><decl pos:start="57:13" pos:end="57:26"><type pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:19">int32_t</name></type> <name pos:start="57:21" pos:end="57:26">offset</name></decl>;</decl_stmt>

            <comment type="block" pos:start="59:13" pos:end="59:45">/* Table indirect addressing.  */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:18">offset</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <call pos:start="61:22" pos:end="61:32"><name pos:start="61:22" pos:end="61:26">sxt24</name><argument_list pos:start="61:27" pos:end="61:32">(<argument pos:start="61:28" pos:end="61:31"><expr pos:start="61:28" pos:end="61:31"><name pos:start="61:28" pos:end="61:31">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:73"><expr pos:start="63:13" pos:end="63:72"><call pos:start="63:13" pos:end="63:72"><name pos:start="63:13" pos:end="63:36">cpu_physical_memory_read</name><argument_list pos:start="63:37" pos:end="63:72">(<argument pos:start="63:38" pos:end="63:52"><expr pos:start="63:38" pos:end="63:52"><name pos:start="63:38" pos:end="63:43"><name pos:start="63:38" pos:end="63:38">s</name><operator pos:start="63:39" pos:end="63:40">-&gt;</operator><name pos:start="63:41" pos:end="63:43">dsa</name></name> <operator pos:start="63:45" pos:end="63:45">+</operator> <name pos:start="63:47" pos:end="63:52">offset</name></expr></argument>, <argument pos:start="63:55" pos:end="63:68"><expr pos:start="63:55" pos:end="63:68"><operator pos:start="63:55" pos:end="63:55">(</operator><name pos:start="63:56" pos:end="63:62">uint8_t</name> <operator pos:start="63:64" pos:end="63:64">*</operator><operator pos:start="63:65" pos:end="63:65">)</operator><name pos:start="63:66" pos:end="63:68">buf</name></expr></argument>, <argument pos:start="63:71" pos:end="63:71"><expr pos:start="63:71" pos:end="63:71"><literal type="number" pos:start="63:71" pos:end="63:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:18">dbc</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:40"><name pos:start="65:22" pos:end="65:32">cpu_to_le32</name><argument_list pos:start="65:33" pos:end="65:40">(<argument pos:start="65:34" pos:end="65:39"><expr pos:start="65:34" pos:end="65:39"><name pos:start="65:34" pos:end="65:39"><name pos:start="65:34" pos:end="65:36">buf</name><index pos:start="65:37" pos:end="65:39">[<expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:28"><expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:18">rbc</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:27"><name pos:start="67:22" pos:end="67:22">s</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:27">dbc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:39"><expr pos:start="69:13" pos:end="69:38"><name pos:start="69:13" pos:end="69:16">addr</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <call pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:30">cpu_to_le32</name><argument_list pos:start="69:31" pos:end="69:38">(<argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:34">buf</name><index pos:start="69:35" pos:end="69:37">[<expr pos:start="69:36" pos:end="69:36"><literal type="number" pos:start="69:36" pos:end="69:36">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:59">(<expr pos:start="73:13" pos:end="73:58"><operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:22"><name pos:start="73:14" pos:end="73:14">s</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:22">sstat1</name></name> <operator pos:start="73:24" pos:end="73:24">&amp;</operator> <name pos:start="73:26" pos:end="73:35">PHASE_MASK</name><operator pos:start="73:36" pos:end="73:36">)</operator> <operator pos:start="73:38" pos:end="73:39">!=</operator> <operator pos:start="73:41" pos:end="73:41">(</operator><operator pos:start="73:42" pos:end="73:42">(</operator><name pos:start="73:43" pos:end="73:46">insn</name> <operator pos:start="73:48" pos:end="73:49">&gt;&gt;</operator> <literal type="number" pos:start="73:51" pos:end="73:52">24</literal><operator pos:start="73:53" pos:end="73:53">)</operator> <operator pos:start="73:55" pos:end="73:55">&amp;</operator> <literal type="number" pos:start="73:57" pos:end="73:57">7</literal><operator pos:start="73:58" pos:end="73:58">)</operator></expr>)</condition> <block pos:start="73:61" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:18">

            <expr_stmt pos:start="75:13" pos:end="77:62"><expr pos:start="75:13" pos:end="77:61"><call pos:start="75:13" pos:end="77:61"><name pos:start="75:13" pos:end="75:19">DPRINTF</name><argument_list pos:start="75:20" pos:end="77:61">(<argument pos:start="75:21" pos:end="75:54"><expr pos:start="75:21" pos:end="75:54"><literal type="string" pos:start="75:21" pos:end="75:54">"Wrong phase got %d expected %d\n"</literal></expr></argument>,

                    <argument pos:start="77:21" pos:end="77:42"><expr pos:start="77:21" pos:end="77:42"><name pos:start="77:21" pos:end="77:29"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:29">sstat1</name></name> <operator pos:start="77:31" pos:end="77:31">&amp;</operator> <name pos:start="77:33" pos:end="77:42">PHASE_MASK</name></expr></argument>, <argument pos:start="77:45" pos:end="77:60"><expr pos:start="77:45" pos:end="77:60"><operator pos:start="77:45" pos:end="77:45">(</operator><name pos:start="77:46" pos:end="77:49">insn</name> <operator pos:start="77:51" pos:end="77:52">&gt;&gt;</operator> <literal type="number" pos:start="77:54" pos:end="77:55">24</literal><operator pos:start="77:56" pos:end="77:56">)</operator> <operator pos:start="77:58" pos:end="77:58">&amp;</operator> <literal type="number" pos:start="77:60" pos:end="77:60">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:58"><expr pos:start="79:13" pos:end="79:57"><call pos:start="79:13" pos:end="79:57"><name pos:start="79:13" pos:end="79:37">lsi_script_scsi_interrupt</name><argument_list pos:start="79:38" pos:end="79:57">(<argument pos:start="79:39" pos:end="79:39"><expr pos:start="79:39" pos:end="79:39"><name pos:start="79:39" pos:end="79:39">s</name></expr></argument>, <argument pos:start="79:42" pos:end="79:53"><expr pos:start="79:42" pos:end="79:53"><name pos:start="79:42" pos:end="79:53">LSI_SIST0_MA</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:23"><expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:15">dnad</name></name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:22">addr</name></expr>;</expr_stmt>

        <comment type="block" pos:start="87:9" pos:end="87:27">/* ??? Set ESA.  */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:27"><expr pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:9">s</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:13">ia</name></name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:22">dsp</name></name> <operator pos:start="89:24" pos:end="89:24">-</operator> <literal type="number" pos:start="89:26" pos:end="89:26">8</literal></expr>;</expr_stmt>

        <switch pos:start="91:9" pos:end="147:9">switch <condition pos:start="91:16" pos:end="91:32">(<expr pos:start="91:17" pos:end="91:31"><name pos:start="91:17" pos:end="91:25"><name pos:start="91:17" pos:end="91:17">s</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:25">sstat1</name></name> <operator pos:start="91:27" pos:end="91:27">&amp;</operator> <literal type="number" pos:start="91:29" pos:end="91:31">0x7</literal></expr>)</condition> <block pos:start="91:34" pos:end="147:9">{<block_content pos:start="93:9" pos:end="145:20">

        <case pos:start="93:9" pos:end="93:22">case <expr pos:start="93:14" pos:end="93:21"><name pos:start="93:14" pos:end="93:21">PHASE_DO</name></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:22">waiting</name></name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:29"><expr pos:start="97:13" pos:end="97:28"><call pos:start="97:13" pos:end="97:28"><name pos:start="97:13" pos:end="97:22">lsi_do_dma</name><argument_list pos:start="97:23" pos:end="97:28">(<argument pos:start="97:24" pos:end="97:24"><expr pos:start="97:24" pos:end="97:24"><name pos:start="97:24" pos:end="97:24">s</name></expr></argument>, <argument pos:start="97:27" pos:end="97:27"><expr pos:start="97:27" pos:end="97:27"><literal type="number" pos:start="97:27" pos:end="97:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="99:13" pos:end="101:31"><if pos:start="99:13" pos:end="101:31">if <condition pos:start="99:16" pos:end="99:27">(<expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:26">waiting</name></name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:31"><block_content pos:start="101:17" pos:end="101:31">

                <expr_stmt pos:start="101:17" pos:end="101:31"><expr pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:26"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:26">waiting</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <literal type="number" pos:start="101:30" pos:end="101:30">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:22">case <expr pos:start="105:14" pos:end="105:21"><name pos:start="105:14" pos:end="105:21">PHASE_DI</name></expr>:</case>

            <expr_stmt pos:start="107:13" pos:end="107:27"><expr pos:start="107:13" pos:end="107:26"><name pos:start="107:13" pos:end="107:22"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:22">waiting</name></name> <operator pos:start="107:24" pos:end="107:24">=</operator> <literal type="number" pos:start="107:26" pos:end="107:26">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:29"><expr pos:start="109:13" pos:end="109:28"><call pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:22">lsi_do_dma</name><argument_list pos:start="109:23" pos:end="109:28">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>, <argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><literal type="number" pos:start="109:27" pos:end="109:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="111:13" pos:end="113:31"><if pos:start="111:13" pos:end="113:31">if <condition pos:start="111:16" pos:end="111:27">(<expr pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:26">waiting</name></name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:31"><block_content pos:start="113:17" pos:end="113:31">

                <expr_stmt pos:start="113:17" pos:end="113:31"><expr pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:26"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:26">waiting</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <literal type="number" pos:start="113:30" pos:end="113:30">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        <case pos:start="117:9" pos:end="117:23">case <expr pos:start="117:14" pos:end="117:22"><name pos:start="117:14" pos:end="117:22">PHASE_CMD</name></expr>:</case>

            <expr_stmt pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><call pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:26">lsi_do_command</name><argument_list pos:start="119:27" pos:end="119:29">(<argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><name pos:start="119:28" pos:end="119:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="121:13" pos:end="121:18">break;</break>

        <case pos:start="123:9" pos:end="123:22">case <expr pos:start="123:14" pos:end="123:21"><name pos:start="123:14" pos:end="123:21">PHASE_ST</name></expr>:</case>

            <expr_stmt pos:start="125:13" pos:end="125:29"><expr pos:start="125:13" pos:end="125:28"><call pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:25">lsi_do_status</name><argument_list pos:start="125:26" pos:end="125:28">(<argument pos:start="125:27" pos:end="125:27"><expr pos:start="125:27" pos:end="125:27"><name pos:start="125:27" pos:end="125:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        <case pos:start="129:9" pos:end="129:22">case <expr pos:start="129:14" pos:end="129:21"><name pos:start="129:14" pos:end="129:21">PHASE_MO</name></expr>:</case>

            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><call pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:25">lsi_do_msgout</name><argument_list pos:start="131:26" pos:end="131:28">(<argument pos:start="131:27" pos:end="131:27"><expr pos:start="131:27" pos:end="131:27"><name pos:start="131:27" pos:end="131:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:22">case <expr pos:start="135:14" pos:end="135:21"><name pos:start="135:14" pos:end="135:21">PHASE_MI</name></expr>:</case>

            <expr_stmt pos:start="137:13" pos:end="137:28"><expr pos:start="137:13" pos:end="137:27"><call pos:start="137:13" pos:end="137:27"><name pos:start="137:13" pos:end="137:24">lsi_do_msgin</name><argument_list pos:start="137:25" pos:end="137:27">(<argument pos:start="137:26" pos:end="137:26"><expr pos:start="137:26" pos:end="137:26"><name pos:start="137:26" pos:end="137:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="139:13" pos:end="139:18">break;</break>

        <default pos:start="141:9" pos:end="141:16">default:</default>

            <expr_stmt pos:start="143:13" pos:end="143:69"><expr pos:start="143:13" pos:end="143:68"><call pos:start="143:13" pos:end="143:68"><name pos:start="143:13" pos:end="143:16">BADF</name><argument_list pos:start="143:17" pos:end="143:68">(<argument pos:start="143:18" pos:end="143:43"><expr pos:start="143:18" pos:end="143:43"><literal type="string" pos:start="143:18" pos:end="143:43">"Unimplemented phase %d\n"</literal></expr></argument>, <argument pos:start="143:46" pos:end="143:67"><expr pos:start="143:46" pos:end="143:67"><name pos:start="143:46" pos:end="143:54"><name pos:start="143:46" pos:end="143:46">s</name><operator pos:start="143:47" pos:end="143:48">-&gt;</operator><name pos:start="143:49" pos:end="143:54">sstat1</name></name> <operator pos:start="143:56" pos:end="143:56">&amp;</operator> <name pos:start="143:58" pos:end="143:67">PHASE_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:20"><expr pos:start="145:13" pos:end="145:19"><call pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:16">exit</name><argument_list pos:start="145:17" pos:end="145:19">(<argument pos:start="145:18" pos:end="145:18"><expr pos:start="145:18" pos:end="145:18"><literal type="number" pos:start="145:18" pos:end="145:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="149:9" pos:end="149:33"><expr pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:16"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:16">dfifo</name></name> <operator pos:start="149:18" pos:end="149:18">=</operator> <name pos:start="149:20" pos:end="149:25"><name pos:start="149:20" pos:end="149:20">s</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:25">dbc</name></name> <operator pos:start="149:27" pos:end="149:27">&amp;</operator> <literal type="number" pos:start="149:29" pos:end="149:32">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:61"><expr pos:start="151:9" pos:end="151:60"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:17">ctest5</name></name> <operator pos:start="151:19" pos:end="151:19">=</operator> <operator pos:start="151:21" pos:end="151:21">(</operator><name pos:start="151:22" pos:end="151:30"><name pos:start="151:22" pos:end="151:22">s</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:30">ctest5</name></name> <operator pos:start="151:32" pos:end="151:32">&amp;</operator> <literal type="number" pos:start="151:34" pos:end="151:37">0xfc</literal><operator pos:start="151:38" pos:end="151:38">)</operator> <operator pos:start="151:40" pos:end="151:40">|</operator> <operator pos:start="151:42" pos:end="151:42">(</operator><operator pos:start="151:43" pos:end="151:43">(</operator><name pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:44">s</name><operator pos:start="151:45" pos:end="151:46">-&gt;</operator><name pos:start="151:47" pos:end="151:49">dbc</name></name> <operator pos:start="151:51" pos:end="151:52">&gt;&gt;</operator> <literal type="number" pos:start="151:54" pos:end="151:54">8</literal><operator pos:start="151:55" pos:end="151:55">)</operator> <operator pos:start="151:57" pos:end="151:57">&amp;</operator> <literal type="number" pos:start="151:59" pos:end="151:59">3</literal><operator pos:start="151:60" pos:end="151:60">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:24"><expr pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:14"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:14">sbc</name></name> <operator pos:start="153:16" pos:end="153:16">=</operator> <name pos:start="153:18" pos:end="153:23"><name pos:start="153:18" pos:end="153:18">s</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:23">dbc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:25"><expr pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:14"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:14">rbc</name></name> <operator pos:start="155:16" pos:end="155:17">-=</operator> <name pos:start="155:19" pos:end="155:24"><name pos:start="155:19" pos:end="155:19">s</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:24">dbc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:13"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:13">ua</name></name> <operator pos:start="157:15" pos:end="157:15">=</operator> <name pos:start="157:17" pos:end="157:20">addr</name> <operator pos:start="157:22" pos:end="157:22">+</operator> <name pos:start="157:24" pos:end="157:29"><name pos:start="157:24" pos:end="157:24">s</name><operator pos:start="157:25" pos:end="157:26">-&gt;</operator><name pos:start="157:27" pos:end="157:29">dbc</name></name></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>



    <case pos:start="163:5" pos:end="163:11">case <expr pos:start="163:10" pos:end="163:10"><literal type="number" pos:start="163:10" pos:end="163:10">1</literal></expr>:</case> <comment type="block" pos:start="163:13" pos:end="163:48">/* IO or Read/Write instruction.  */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:34"><expr pos:start="165:9" pos:end="165:33"><name pos:start="165:9" pos:end="165:14">opcode</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <operator pos:start="165:18" pos:end="165:18">(</operator><name pos:start="165:19" pos:end="165:22">insn</name> <operator pos:start="165:24" pos:end="165:25">&gt;&gt;</operator> <literal type="number" pos:start="165:27" pos:end="165:28">27</literal><operator pos:start="165:29" pos:end="165:29">)</operator> <operator pos:start="165:31" pos:end="165:31">&amp;</operator> <literal type="number" pos:start="165:33" pos:end="165:33">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="499:9"><if pos:start="167:9" pos:end="323:9">if <condition pos:start="167:12" pos:end="167:23">(<expr pos:start="167:13" pos:end="167:22"><name pos:start="167:13" pos:end="167:18">opcode</name> <operator pos:start="167:20" pos:end="167:20">&lt;</operator> <literal type="number" pos:start="167:22" pos:end="167:22">5</literal></expr>)</condition> <block pos:start="167:25" pos:end="323:9">{<block_content pos:start="169:13" pos:end="321:13">

            <decl_stmt pos:start="169:13" pos:end="169:24"><decl pos:start="169:13" pos:end="169:23"><type pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:20">uint32_t</name></type> <name pos:start="169:22" pos:end="169:23">id</name></decl>;</decl_stmt>



            <if_stmt pos:start="173:13" pos:end="181:13"><if pos:start="173:13" pos:end="177:13">if <condition pos:start="173:16" pos:end="173:33">(<expr pos:start="173:17" pos:end="173:32"><name pos:start="173:17" pos:end="173:20">insn</name> <operator pos:start="173:22" pos:end="173:22">&amp;</operator> <operator pos:start="173:24" pos:end="173:24">(</operator><literal type="number" pos:start="173:25" pos:end="173:25">1</literal> <operator pos:start="173:27" pos:end="173:28">&lt;&lt;</operator> <literal type="number" pos:start="173:30" pos:end="173:31">25</literal><operator pos:start="173:32" pos:end="173:32">)</operator></expr>)</condition> <block pos:start="173:35" pos:end="177:13">{<block_content pos:start="175:17" pos:end="175:57">

                <expr_stmt pos:start="175:17" pos:end="175:57"><expr pos:start="175:17" pos:end="175:56"><name pos:start="175:17" pos:end="175:18">id</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <call pos:start="175:22" pos:end="175:56"><name pos:start="175:22" pos:end="175:31">read_dword</name><argument_list pos:start="175:32" pos:end="175:56">(<argument pos:start="175:33" pos:end="175:33"><expr pos:start="175:33" pos:end="175:33"><name pos:start="175:33" pos:end="175:33">s</name></expr></argument>, <argument pos:start="175:36" pos:end="175:55"><expr pos:start="175:36" pos:end="175:55"><name pos:start="175:36" pos:end="175:41"><name pos:start="175:36" pos:end="175:36">s</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:41">dsa</name></name> <operator pos:start="175:43" pos:end="175:43">+</operator> <call pos:start="175:45" pos:end="175:55"><name pos:start="175:45" pos:end="175:49">sxt24</name><argument_list pos:start="175:50" pos:end="175:55">(<argument pos:start="175:51" pos:end="175:54"><expr pos:start="175:51" pos:end="175:54"><name pos:start="175:51" pos:end="175:54">insn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="177:15" pos:end="181:13">else <block pos:start="177:20" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:26">

                <expr_stmt pos:start="179:17" pos:end="179:26"><expr pos:start="179:17" pos:end="179:25"><name pos:start="179:17" pos:end="179:18">id</name> <operator pos:start="179:20" pos:end="179:20">=</operator> <name pos:start="179:22" pos:end="179:25">addr</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:34"><expr pos:start="183:13" pos:end="183:33"><name pos:start="183:13" pos:end="183:14">id</name> <operator pos:start="183:16" pos:end="183:16">=</operator> <operator pos:start="183:18" pos:end="183:18">(</operator><name pos:start="183:19" pos:end="183:20">id</name> <operator pos:start="183:22" pos:end="183:23">&gt;&gt;</operator> <literal type="number" pos:start="183:25" pos:end="183:26">16</literal><operator pos:start="183:27" pos:end="183:27">)</operator> <operator pos:start="183:29" pos:end="183:29">&amp;</operator> <literal type="number" pos:start="183:31" pos:end="183:33">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="185:13" pos:end="189:13"><if pos:start="185:13" pos:end="189:13">if <condition pos:start="185:16" pos:end="185:33">(<expr pos:start="185:17" pos:end="185:32"><name pos:start="185:17" pos:end="185:20">insn</name> <operator pos:start="185:22" pos:end="185:22">&amp;</operator> <operator pos:start="185:24" pos:end="185:24">(</operator><literal type="number" pos:start="185:25" pos:end="185:25">1</literal> <operator pos:start="185:27" pos:end="185:28">&lt;&lt;</operator> <literal type="number" pos:start="185:30" pos:end="185:31">26</literal><operator pos:start="185:32" pos:end="185:32">)</operator></expr>)</condition> <block pos:start="185:35" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:44">

                <expr_stmt pos:start="187:17" pos:end="187:44"><expr pos:start="187:17" pos:end="187:43"><name pos:start="187:17" pos:end="187:20">addr</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <name pos:start="187:24" pos:end="187:29"><name pos:start="187:24" pos:end="187:24">s</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:29">dsp</name></name> <operator pos:start="187:31" pos:end="187:31">+</operator> <call pos:start="187:33" pos:end="187:43"><name pos:start="187:33" pos:end="187:37">sxt24</name><argument_list pos:start="187:38" pos:end="187:43">(<argument pos:start="187:39" pos:end="187:42"><expr pos:start="187:39" pos:end="187:42"><name pos:start="187:39" pos:end="187:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:27"><expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:13">s</name><operator pos:start="191:14" pos:end="191:15">-&gt;</operator><name pos:start="191:16" pos:end="191:19">dnad</name></name> <operator pos:start="191:21" pos:end="191:21">=</operator> <name pos:start="191:23" pos:end="191:26">addr</name></expr>;</expr_stmt>

            <switch pos:start="193:13" pos:end="321:13">switch <condition pos:start="193:20" pos:end="193:27">(<expr pos:start="193:21" pos:end="193:26"><name pos:start="193:21" pos:end="193:26">opcode</name></expr>)</condition> <block pos:start="193:29" pos:end="321:13">{<block_content pos:start="195:13" pos:end="319:22">

            <case pos:start="195:13" pos:end="195:19">case <expr pos:start="195:18" pos:end="195:18"><literal type="number" pos:start="195:18" pos:end="195:18">0</literal></expr>:</case> <comment type="block" pos:start="195:21" pos:end="195:32">/* Select */</comment>

                <expr_stmt pos:start="197:17" pos:end="197:29"><expr pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:23"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:23">sdid</name></name> <operator pos:start="197:25" pos:end="197:25">=</operator> <name pos:start="197:27" pos:end="197:28">id</name></expr>;</expr_stmt>

                <if_stmt pos:start="199:17" pos:end="205:17"><if pos:start="199:17" pos:end="205:17">if <condition pos:start="199:20" pos:end="199:64">(<expr pos:start="199:21" pos:end="199:63"><name pos:start="199:21" pos:end="199:38"><name pos:start="199:21" pos:end="199:21">s</name><operator pos:start="199:22" pos:end="199:23">-&gt;</operator><name pos:start="199:24" pos:end="199:38">current_dma_len</name></name> <operator pos:start="199:40" pos:end="199:41">&amp;&amp;</operator> <operator pos:start="199:43" pos:end="199:43">(</operator><name pos:start="199:44" pos:end="199:50"><name pos:start="199:44" pos:end="199:44">s</name><operator pos:start="199:45" pos:end="199:46">-&gt;</operator><name pos:start="199:47" pos:end="199:50">ssid</name></name> <operator pos:start="199:52" pos:end="199:52">&amp;</operator> <literal type="number" pos:start="199:54" pos:end="199:56">0xf</literal><operator pos:start="199:57" pos:end="199:57">)</operator> <operator pos:start="199:59" pos:end="199:60">==</operator> <name pos:start="199:62" pos:end="199:63">id</name></expr>)</condition> <block pos:start="199:66" pos:end="205:17">{<block_content pos:start="201:21" pos:end="203:26">

                    <expr_stmt pos:start="201:21" pos:end="201:69"><expr pos:start="201:21" pos:end="201:68"><call pos:start="201:21" pos:end="201:68"><name pos:start="201:21" pos:end="201:27">DPRINTF</name><argument_list pos:start="201:28" pos:end="201:68">(<argument pos:start="201:29" pos:end="201:63"><expr pos:start="201:29" pos:end="201:63"><literal type="string" pos:start="201:29" pos:end="201:63">"Already reselected by target %d\n"</literal></expr></argument>, <argument pos:start="201:66" pos:end="201:67"><expr pos:start="201:66" pos:end="201:67"><name pos:start="201:66" pos:end="201:67">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="203:21" pos:end="203:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:44"><expr pos:start="207:17" pos:end="207:43"><name pos:start="207:17" pos:end="207:25"><name pos:start="207:17" pos:end="207:17">s</name><operator pos:start="207:18" pos:end="207:19">-&gt;</operator><name pos:start="207:20" pos:end="207:25">sstat0</name></name> <operator pos:start="207:27" pos:end="207:28">|=</operator> <name pos:start="207:30" pos:end="207:43">LSI_SSTAT0_WOA</name></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:46"><expr pos:start="209:17" pos:end="209:45"><name pos:start="209:17" pos:end="209:25"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:25">scntl1</name></name> <operator pos:start="209:27" pos:end="209:28">&amp;=</operator> <operator pos:start="209:30" pos:end="209:30">~</operator><name pos:start="209:31" pos:end="209:45">LSI_SCNTL1_IARB</name></expr>;</expr_stmt>

                <if_stmt pos:start="211:17" pos:end="221:17"><if pos:start="211:17" pos:end="221:17">if <condition pos:start="211:20" pos:end="211:59">(<expr pos:start="211:21" pos:end="211:58"><name pos:start="211:21" pos:end="211:22">id</name> <operator pos:start="211:24" pos:end="211:25">&gt;=</operator> <name pos:start="211:27" pos:end="211:38">LSI_MAX_DEVS</name> <operator pos:start="211:40" pos:end="211:41">||</operator> <operator pos:start="211:43" pos:end="211:43">!</operator><name pos:start="211:44" pos:end="211:58"><name pos:start="211:44" pos:end="211:44">s</name><operator pos:start="211:45" pos:end="211:46">-&gt;</operator><name pos:start="211:47" pos:end="211:54">scsi_dev</name><index pos:start="211:55" pos:end="211:58">[<expr pos:start="211:56" pos:end="211:57"><name pos:start="211:56" pos:end="211:57">id</name></expr>]</index></name></expr>)</condition> <block pos:start="211:61" pos:end="221:17">{<block_content pos:start="213:21" pos:end="219:26">

                    <expr_stmt pos:start="213:21" pos:end="213:63"><expr pos:start="213:21" pos:end="213:62"><call pos:start="213:21" pos:end="213:62"><name pos:start="213:21" pos:end="213:27">DPRINTF</name><argument_list pos:start="213:28" pos:end="213:62">(<argument pos:start="213:29" pos:end="213:57"><expr pos:start="213:29" pos:end="213:57"><literal type="string" pos:start="213:29" pos:end="213:57">"Selected absent target %d\n"</literal></expr></argument>, <argument pos:start="213:60" pos:end="213:61"><expr pos:start="213:60" pos:end="213:61"><name pos:start="213:60" pos:end="213:61">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="215:21" pos:end="215:67"><expr pos:start="215:21" pos:end="215:66"><call pos:start="215:21" pos:end="215:66"><name pos:start="215:21" pos:end="215:45">lsi_script_scsi_interrupt</name><argument_list pos:start="215:46" pos:end="215:66">(<argument pos:start="215:47" pos:end="215:47"><expr pos:start="215:47" pos:end="215:47"><name pos:start="215:47" pos:end="215:47">s</name></expr></argument>, <argument pos:start="215:50" pos:end="215:50"><expr pos:start="215:50" pos:end="215:50"><literal type="number" pos:start="215:50" pos:end="215:50">0</literal></expr></argument>, <argument pos:start="215:53" pos:end="215:65"><expr pos:start="215:53" pos:end="215:65"><name pos:start="215:53" pos:end="215:65">LSI_SIST1_STO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="217:21" pos:end="217:38"><expr pos:start="217:21" pos:end="217:37"><call pos:start="217:21" pos:end="217:37"><name pos:start="217:21" pos:end="217:34">lsi_disconnect</name><argument_list pos:start="217:35" pos:end="217:37">(<argument pos:start="217:36" pos:end="217:36"><expr pos:start="217:36" pos:end="217:36"><name pos:start="217:36" pos:end="217:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="219:21" pos:end="219:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="223:17" pos:end="225:59"><expr pos:start="223:17" pos:end="225:58"><call pos:start="223:17" pos:end="225:58"><name pos:start="223:17" pos:end="223:23">DPRINTF</name><argument_list pos:start="223:24" pos:end="225:58">(<argument pos:start="223:25" pos:end="223:48"><expr pos:start="223:25" pos:end="223:48"><literal type="string" pos:start="223:25" pos:end="223:48">"Selected target %d%s\n"</literal></expr></argument>,

                        <argument pos:start="225:25" pos:end="225:26"><expr pos:start="225:25" pos:end="225:26"><name pos:start="225:25" pos:end="225:26">id</name></expr></argument>, <argument pos:start="225:29" pos:end="225:57"><expr pos:start="225:29" pos:end="225:57"><ternary pos:start="225:29" pos:end="225:57"><condition pos:start="225:29" pos:end="225:45"><expr pos:start="225:29" pos:end="225:43"><name pos:start="225:29" pos:end="225:32">insn</name> <operator pos:start="225:34" pos:end="225:34">&amp;</operator> <operator pos:start="225:36" pos:end="225:36">(</operator><literal type="number" pos:start="225:37" pos:end="225:37">1</literal> <operator pos:start="225:39" pos:end="225:40">&lt;&lt;</operator> <literal type="number" pos:start="225:42" pos:end="225:42">3</literal><operator pos:start="225:43" pos:end="225:43">)</operator></expr> ?</condition><then pos:start="225:47" pos:end="225:52"> <expr pos:start="225:47" pos:end="225:52"><literal type="string" pos:start="225:47" pos:end="225:52">" ATN"</literal></expr> </then><else pos:start="225:54" pos:end="225:57">: <expr pos:start="225:56" pos:end="225:57"><literal type="string" pos:start="225:56" pos:end="225:57">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="227:17" pos:end="231:66">/* ??? Linux drivers compain when this is set.  Maybe

                   it only applies in low-level mode (unimplemented).

                lsi_script_scsi_interrupt(s, LSI_SIST0_CMP, 0); */</comment>

                <expr_stmt pos:start="233:17" pos:end="233:49"><expr pos:start="233:17" pos:end="233:48"><name pos:start="233:17" pos:end="233:30"><name pos:start="233:17" pos:end="233:17">s</name><operator pos:start="233:18" pos:end="233:19">-&gt;</operator><name pos:start="233:20" pos:end="233:30">current_dev</name></name> <operator pos:start="233:32" pos:end="233:32">=</operator> <name pos:start="233:34" pos:end="233:48"><name pos:start="233:34" pos:end="233:34">s</name><operator pos:start="233:35" pos:end="233:36">-&gt;</operator><name pos:start="233:37" pos:end="233:44">scsi_dev</name><index pos:start="233:45" pos:end="233:48">[<expr pos:start="233:46" pos:end="233:47"><name pos:start="233:46" pos:end="233:47">id</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:41"><expr pos:start="235:17" pos:end="235:40"><name pos:start="235:17" pos:end="235:30"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:30">current_tag</name></name> <operator pos:start="235:32" pos:end="235:32">=</operator> <name pos:start="235:34" pos:end="235:35">id</name> <operator pos:start="235:37" pos:end="235:38">&lt;&lt;</operator> <literal type="number" pos:start="235:40" pos:end="235:40">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:44"><expr pos:start="237:17" pos:end="237:43"><name pos:start="237:17" pos:end="237:25"><name pos:start="237:17" pos:end="237:17">s</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:25">scntl1</name></name> <operator pos:start="237:27" pos:end="237:28">|=</operator> <name pos:start="237:30" pos:end="237:43">LSI_SCNTL1_CON</name></expr>;</expr_stmt>

                <if_stmt pos:start="239:17" pos:end="243:17"><if pos:start="239:17" pos:end="243:17">if <condition pos:start="239:20" pos:end="239:36">(<expr pos:start="239:21" pos:end="239:35"><name pos:start="239:21" pos:end="239:24">insn</name> <operator pos:start="239:26" pos:end="239:26">&amp;</operator> <operator pos:start="239:28" pos:end="239:28">(</operator><literal type="number" pos:start="239:29" pos:end="239:29">1</literal> <operator pos:start="239:31" pos:end="239:32">&lt;&lt;</operator> <literal type="number" pos:start="239:34" pos:end="239:34">3</literal><operator pos:start="239:35" pos:end="239:35">)</operator></expr>)</condition> <block pos:start="239:38" pos:end="243:17">{<block_content pos:start="241:21" pos:end="241:44">

                    <expr_stmt pos:start="241:21" pos:end="241:44"><expr pos:start="241:21" pos:end="241:43"><name pos:start="241:21" pos:end="241:27"><name pos:start="241:21" pos:end="241:21">s</name><operator pos:start="241:22" pos:end="241:23">-&gt;</operator><name pos:start="241:24" pos:end="241:27">socl</name></name> <operator pos:start="241:29" pos:end="241:30">|=</operator> <name pos:start="241:32" pos:end="241:43">LSI_SOCL_ATN</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:43"><expr pos:start="245:17" pos:end="245:42"><call pos:start="245:17" pos:end="245:42"><name pos:start="245:17" pos:end="245:29">lsi_set_phase</name><argument_list pos:start="245:30" pos:end="245:42">(<argument pos:start="245:31" pos:end="245:31"><expr pos:start="245:31" pos:end="245:31"><name pos:start="245:31" pos:end="245:31">s</name></expr></argument>, <argument pos:start="245:34" pos:end="245:41"><expr pos:start="245:34" pos:end="245:41"><name pos:start="245:34" pos:end="245:41">PHASE_MO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="247:17" pos:end="247:22">break;</break>

            <case pos:start="249:13" pos:end="249:19">case <expr pos:start="249:18" pos:end="249:18"><literal type="number" pos:start="249:18" pos:end="249:18">1</literal></expr>:</case> <comment type="block" pos:start="249:21" pos:end="249:36">/* Disconnect */</comment>

                <expr_stmt pos:start="251:17" pos:end="251:44"><expr pos:start="251:17" pos:end="251:43"><call pos:start="251:17" pos:end="251:43"><name pos:start="251:17" pos:end="251:23">DPRINTF</name><argument_list pos:start="251:24" pos:end="251:43">(<argument pos:start="251:25" pos:end="251:42"><expr pos:start="251:25" pos:end="251:42"><literal type="string" pos:start="251:25" pos:end="251:42">"Wait Disconect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:45"><expr pos:start="253:17" pos:end="253:44"><name pos:start="253:17" pos:end="253:25"><name pos:start="253:17" pos:end="253:17">s</name><operator pos:start="253:18" pos:end="253:19">-&gt;</operator><name pos:start="253:20" pos:end="253:25">scntl1</name></name> <operator pos:start="253:27" pos:end="253:28">&amp;=</operator> <operator pos:start="253:30" pos:end="253:30">~</operator><name pos:start="253:31" pos:end="253:44">LSI_SCNTL1_CON</name></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            <case pos:start="257:13" pos:end="257:19">case <expr pos:start="257:18" pos:end="257:18"><literal type="number" pos:start="257:18" pos:end="257:18">2</literal></expr>:</case> <comment type="block" pos:start="257:21" pos:end="257:39">/* Wait Reselect */</comment>

                <expr_stmt pos:start="259:17" pos:end="259:37"><expr pos:start="259:17" pos:end="259:36"><call pos:start="259:17" pos:end="259:36"><name pos:start="259:17" pos:end="259:33">lsi_wait_reselect</name><argument_list pos:start="259:34" pos:end="259:36">(<argument pos:start="259:35" pos:end="259:35"><expr pos:start="259:35" pos:end="259:35"><name pos:start="259:35" pos:end="259:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="261:17" pos:end="261:22">break;</break>

            <case pos:start="263:13" pos:end="263:19">case <expr pos:start="263:18" pos:end="263:18"><literal type="number" pos:start="263:18" pos:end="263:18">3</literal></expr>:</case> <comment type="block" pos:start="263:21" pos:end="263:29">/* Set */</comment>

                <expr_stmt pos:start="265:17" pos:end="273:55"><expr pos:start="265:17" pos:end="273:54"><call pos:start="265:17" pos:end="273:54"><name pos:start="265:17" pos:end="265:23">DPRINTF</name><argument_list pos:start="265:24" pos:end="273:54">(<argument pos:start="265:25" pos:end="265:39"><expr pos:start="265:25" pos:end="265:39"><literal type="string" pos:start="265:25" pos:end="265:39">"Set%s%s%s%s\n"</literal></expr></argument>,

                        <argument pos:start="267:25" pos:end="267:53"><expr pos:start="267:25" pos:end="267:53"><ternary pos:start="267:25" pos:end="267:53"><condition pos:start="267:25" pos:end="267:41"><expr pos:start="267:25" pos:end="267:39"><name pos:start="267:25" pos:end="267:28">insn</name> <operator pos:start="267:30" pos:end="267:30">&amp;</operator> <operator pos:start="267:32" pos:end="267:32">(</operator><literal type="number" pos:start="267:33" pos:end="267:33">1</literal> <operator pos:start="267:35" pos:end="267:36">&lt;&lt;</operator> <literal type="number" pos:start="267:38" pos:end="267:38">3</literal><operator pos:start="267:39" pos:end="267:39">)</operator></expr> ?</condition><then pos:start="267:43" pos:end="267:48"> <expr pos:start="267:43" pos:end="267:48"><literal type="string" pos:start="267:43" pos:end="267:48">" ATN"</literal></expr> </then><else pos:start="267:50" pos:end="267:53">: <expr pos:start="267:52" pos:end="267:53"><literal type="string" pos:start="267:52" pos:end="267:53">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="269:25" pos:end="269:53"><expr pos:start="269:25" pos:end="269:53"><ternary pos:start="269:25" pos:end="269:53"><condition pos:start="269:25" pos:end="269:41"><expr pos:start="269:25" pos:end="269:39"><name pos:start="269:25" pos:end="269:28">insn</name> <operator pos:start="269:30" pos:end="269:30">&amp;</operator> <operator pos:start="269:32" pos:end="269:32">(</operator><literal type="number" pos:start="269:33" pos:end="269:33">1</literal> <operator pos:start="269:35" pos:end="269:36">&lt;&lt;</operator> <literal type="number" pos:start="269:38" pos:end="269:38">6</literal><operator pos:start="269:39" pos:end="269:39">)</operator></expr> ?</condition><then pos:start="269:43" pos:end="269:48"> <expr pos:start="269:43" pos:end="269:48"><literal type="string" pos:start="269:43" pos:end="269:48">" ACK"</literal></expr> </then><else pos:start="269:50" pos:end="269:53">: <expr pos:start="269:52" pos:end="269:53"><literal type="string" pos:start="269:52" pos:end="269:53">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="271:25" pos:end="271:52"><expr pos:start="271:25" pos:end="271:52"><ternary pos:start="271:25" pos:end="271:52"><condition pos:start="271:25" pos:end="271:41"><expr pos:start="271:25" pos:end="271:39"><name pos:start="271:25" pos:end="271:28">insn</name> <operator pos:start="271:30" pos:end="271:30">&amp;</operator> <operator pos:start="271:32" pos:end="271:32">(</operator><literal type="number" pos:start="271:33" pos:end="271:33">1</literal> <operator pos:start="271:35" pos:end="271:36">&lt;&lt;</operator> <literal type="number" pos:start="271:38" pos:end="271:38">9</literal><operator pos:start="271:39" pos:end="271:39">)</operator></expr> ?</condition><then pos:start="271:43" pos:end="271:47"> <expr pos:start="271:43" pos:end="271:47"><literal type="string" pos:start="271:43" pos:end="271:47">" TM"</literal></expr> </then><else pos:start="271:49" pos:end="271:52">: <expr pos:start="271:51" pos:end="271:52"><literal type="string" pos:start="271:51" pos:end="271:52">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="273:25" pos:end="273:53"><expr pos:start="273:25" pos:end="273:53"><ternary pos:start="273:25" pos:end="273:53"><condition pos:start="273:25" pos:end="273:42"><expr pos:start="273:25" pos:end="273:40"><name pos:start="273:25" pos:end="273:28">insn</name> <operator pos:start="273:30" pos:end="273:30">&amp;</operator> <operator pos:start="273:32" pos:end="273:32">(</operator><literal type="number" pos:start="273:33" pos:end="273:33">1</literal> <operator pos:start="273:35" pos:end="273:36">&lt;&lt;</operator> <literal type="number" pos:start="273:38" pos:end="273:39">10</literal><operator pos:start="273:40" pos:end="273:40">)</operator></expr> ?</condition><then pos:start="273:44" pos:end="273:48"> <expr pos:start="273:44" pos:end="273:48"><literal type="string" pos:start="273:44" pos:end="273:48">" CC"</literal></expr> </then><else pos:start="273:50" pos:end="273:53">: <expr pos:start="273:52" pos:end="273:53"><literal type="string" pos:start="273:52" pos:end="273:53">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="275:17" pos:end="281:17"><if pos:start="275:17" pos:end="281:17">if <condition pos:start="275:20" pos:end="275:36">(<expr pos:start="275:21" pos:end="275:35"><name pos:start="275:21" pos:end="275:24">insn</name> <operator pos:start="275:26" pos:end="275:26">&amp;</operator> <operator pos:start="275:28" pos:end="275:28">(</operator><literal type="number" pos:start="275:29" pos:end="275:29">1</literal> <operator pos:start="275:31" pos:end="275:32">&lt;&lt;</operator> <literal type="number" pos:start="275:34" pos:end="275:34">3</literal><operator pos:start="275:35" pos:end="275:35">)</operator></expr>)</condition> <block pos:start="275:38" pos:end="281:17">{<block_content pos:start="277:21" pos:end="279:47">

                    <expr_stmt pos:start="277:21" pos:end="277:44"><expr pos:start="277:21" pos:end="277:43"><name pos:start="277:21" pos:end="277:27"><name pos:start="277:21" pos:end="277:21">s</name><operator pos:start="277:22" pos:end="277:23">-&gt;</operator><name pos:start="277:24" pos:end="277:27">socl</name></name> <operator pos:start="277:29" pos:end="277:30">|=</operator> <name pos:start="277:32" pos:end="277:43">LSI_SOCL_ATN</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="279:21" pos:end="279:47"><expr pos:start="279:21" pos:end="279:46"><call pos:start="279:21" pos:end="279:46"><name pos:start="279:21" pos:end="279:33">lsi_set_phase</name><argument_list pos:start="279:34" pos:end="279:46">(<argument pos:start="279:35" pos:end="279:35"><expr pos:start="279:35" pos:end="279:35"><name pos:start="279:35" pos:end="279:35">s</name></expr></argument>, <argument pos:start="279:38" pos:end="279:45"><expr pos:start="279:38" pos:end="279:45"><name pos:start="279:38" pos:end="279:45">PHASE_MO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="283:17" pos:end="289:17"><if pos:start="283:17" pos:end="289:17">if <condition pos:start="283:20" pos:end="283:36">(<expr pos:start="283:21" pos:end="283:35"><name pos:start="283:21" pos:end="283:24">insn</name> <operator pos:start="283:26" pos:end="283:26">&amp;</operator> <operator pos:start="283:28" pos:end="283:28">(</operator><literal type="number" pos:start="283:29" pos:end="283:29">1</literal> <operator pos:start="283:31" pos:end="283:32">&lt;&lt;</operator> <literal type="number" pos:start="283:34" pos:end="283:34">9</literal><operator pos:start="283:35" pos:end="283:35">)</operator></expr>)</condition> <block pos:start="283:38" pos:end="289:17">{<block_content pos:start="285:21" pos:end="287:28">

                    <expr_stmt pos:start="285:21" pos:end="285:58"><expr pos:start="285:21" pos:end="285:57"><call pos:start="285:21" pos:end="285:57"><name pos:start="285:21" pos:end="285:24">BADF</name><argument_list pos:start="285:25" pos:end="285:57">(<argument pos:start="285:26" pos:end="285:56"><expr pos:start="285:26" pos:end="285:56"><literal type="string" pos:start="285:26" pos:end="285:56">"Target mode not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="287:21" pos:end="287:28"><expr pos:start="287:21" pos:end="287:27"><call pos:start="287:21" pos:end="287:27"><name pos:start="287:21" pos:end="287:24">exit</name><argument_list pos:start="287:25" pos:end="287:27">(<argument pos:start="287:26" pos:end="287:26"><expr pos:start="287:26" pos:end="287:26"><literal type="number" pos:start="287:26" pos:end="287:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="291:17" pos:end="293:33"><if pos:start="291:17" pos:end="293:33">if <condition pos:start="291:20" pos:end="291:37">(<expr pos:start="291:21" pos:end="291:36"><name pos:start="291:21" pos:end="291:24">insn</name> <operator pos:start="291:26" pos:end="291:26">&amp;</operator> <operator pos:start="291:28" pos:end="291:28">(</operator><literal type="number" pos:start="291:29" pos:end="291:29">1</literal> <operator pos:start="291:31" pos:end="291:32">&lt;&lt;</operator> <literal type="number" pos:start="291:34" pos:end="291:35">10</literal><operator pos:start="291:36" pos:end="291:36">)</operator></expr>)</condition><block type="pseudo" pos:start="293:21" pos:end="293:33"><block_content pos:start="293:21" pos:end="293:33">

                    <expr_stmt pos:start="293:21" pos:end="293:33"><expr pos:start="293:21" pos:end="293:32"><name pos:start="293:21" pos:end="293:28"><name pos:start="293:21" pos:end="293:21">s</name><operator pos:start="293:22" pos:end="293:23">-&gt;</operator><name pos:start="293:24" pos:end="293:28">carry</name></name> <operator pos:start="293:30" pos:end="293:30">=</operator> <literal type="number" pos:start="293:32" pos:end="293:32">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="295:17" pos:end="295:22">break;</break>

            <case pos:start="297:13" pos:end="297:19">case <expr pos:start="297:18" pos:end="297:18"><literal type="number" pos:start="297:18" pos:end="297:18">4</literal></expr>:</case> <comment type="block" pos:start="297:21" pos:end="297:31">/* Clear */</comment>

                <expr_stmt pos:start="299:17" pos:end="307:55"><expr pos:start="299:17" pos:end="307:54"><call pos:start="299:17" pos:end="307:54"><name pos:start="299:17" pos:end="299:23">DPRINTF</name><argument_list pos:start="299:24" pos:end="307:54">(<argument pos:start="299:25" pos:end="299:41"><expr pos:start="299:25" pos:end="299:41"><literal type="string" pos:start="299:25" pos:end="299:41">"Clear%s%s%s%s\n"</literal></expr></argument>,

                        <argument pos:start="301:25" pos:end="301:53"><expr pos:start="301:25" pos:end="301:53"><ternary pos:start="301:25" pos:end="301:53"><condition pos:start="301:25" pos:end="301:41"><expr pos:start="301:25" pos:end="301:39"><name pos:start="301:25" pos:end="301:28">insn</name> <operator pos:start="301:30" pos:end="301:30">&amp;</operator> <operator pos:start="301:32" pos:end="301:32">(</operator><literal type="number" pos:start="301:33" pos:end="301:33">1</literal> <operator pos:start="301:35" pos:end="301:36">&lt;&lt;</operator> <literal type="number" pos:start="301:38" pos:end="301:38">3</literal><operator pos:start="301:39" pos:end="301:39">)</operator></expr> ?</condition><then pos:start="301:43" pos:end="301:48"> <expr pos:start="301:43" pos:end="301:48"><literal type="string" pos:start="301:43" pos:end="301:48">" ATN"</literal></expr> </then><else pos:start="301:50" pos:end="301:53">: <expr pos:start="301:52" pos:end="301:53"><literal type="string" pos:start="301:52" pos:end="301:53">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="303:25" pos:end="303:53"><expr pos:start="303:25" pos:end="303:53"><ternary pos:start="303:25" pos:end="303:53"><condition pos:start="303:25" pos:end="303:41"><expr pos:start="303:25" pos:end="303:39"><name pos:start="303:25" pos:end="303:28">insn</name> <operator pos:start="303:30" pos:end="303:30">&amp;</operator> <operator pos:start="303:32" pos:end="303:32">(</operator><literal type="number" pos:start="303:33" pos:end="303:33">1</literal> <operator pos:start="303:35" pos:end="303:36">&lt;&lt;</operator> <literal type="number" pos:start="303:38" pos:end="303:38">6</literal><operator pos:start="303:39" pos:end="303:39">)</operator></expr> ?</condition><then pos:start="303:43" pos:end="303:48"> <expr pos:start="303:43" pos:end="303:48"><literal type="string" pos:start="303:43" pos:end="303:48">" ACK"</literal></expr> </then><else pos:start="303:50" pos:end="303:53">: <expr pos:start="303:52" pos:end="303:53"><literal type="string" pos:start="303:52" pos:end="303:53">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="305:25" pos:end="305:52"><expr pos:start="305:25" pos:end="305:52"><ternary pos:start="305:25" pos:end="305:52"><condition pos:start="305:25" pos:end="305:41"><expr pos:start="305:25" pos:end="305:39"><name pos:start="305:25" pos:end="305:28">insn</name> <operator pos:start="305:30" pos:end="305:30">&amp;</operator> <operator pos:start="305:32" pos:end="305:32">(</operator><literal type="number" pos:start="305:33" pos:end="305:33">1</literal> <operator pos:start="305:35" pos:end="305:36">&lt;&lt;</operator> <literal type="number" pos:start="305:38" pos:end="305:38">9</literal><operator pos:start="305:39" pos:end="305:39">)</operator></expr> ?</condition><then pos:start="305:43" pos:end="305:47"> <expr pos:start="305:43" pos:end="305:47"><literal type="string" pos:start="305:43" pos:end="305:47">" TM"</literal></expr> </then><else pos:start="305:49" pos:end="305:52">: <expr pos:start="305:51" pos:end="305:52"><literal type="string" pos:start="305:51" pos:end="305:52">""</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="307:25" pos:end="307:53"><expr pos:start="307:25" pos:end="307:53"><ternary pos:start="307:25" pos:end="307:53"><condition pos:start="307:25" pos:end="307:42"><expr pos:start="307:25" pos:end="307:40"><name pos:start="307:25" pos:end="307:28">insn</name> <operator pos:start="307:30" pos:end="307:30">&amp;</operator> <operator pos:start="307:32" pos:end="307:32">(</operator><literal type="number" pos:start="307:33" pos:end="307:33">1</literal> <operator pos:start="307:35" pos:end="307:36">&lt;&lt;</operator> <literal type="number" pos:start="307:38" pos:end="307:39">10</literal><operator pos:start="307:40" pos:end="307:40">)</operator></expr> ?</condition><then pos:start="307:44" pos:end="307:48"> <expr pos:start="307:44" pos:end="307:48"><literal type="string" pos:start="307:44" pos:end="307:48">" CC"</literal></expr> </then><else pos:start="307:50" pos:end="307:53">: <expr pos:start="307:52" pos:end="307:53"><literal type="string" pos:start="307:52" pos:end="307:53">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="309:17" pos:end="313:17"><if pos:start="309:17" pos:end="313:17">if <condition pos:start="309:20" pos:end="309:36">(<expr pos:start="309:21" pos:end="309:35"><name pos:start="309:21" pos:end="309:24">insn</name> <operator pos:start="309:26" pos:end="309:26">&amp;</operator> <operator pos:start="309:28" pos:end="309:28">(</operator><literal type="number" pos:start="309:29" pos:end="309:29">1</literal> <operator pos:start="309:31" pos:end="309:32">&lt;&lt;</operator> <literal type="number" pos:start="309:34" pos:end="309:34">3</literal><operator pos:start="309:35" pos:end="309:35">)</operator></expr>)</condition> <block pos:start="309:38" pos:end="313:17">{<block_content pos:start="311:21" pos:end="311:45">

                    <expr_stmt pos:start="311:21" pos:end="311:45"><expr pos:start="311:21" pos:end="311:44"><name pos:start="311:21" pos:end="311:27"><name pos:start="311:21" pos:end="311:21">s</name><operator pos:start="311:22" pos:end="311:23">-&gt;</operator><name pos:start="311:24" pos:end="311:27">socl</name></name> <operator pos:start="311:29" pos:end="311:30">&amp;=</operator> <operator pos:start="311:32" pos:end="311:32">~</operator><name pos:start="311:33" pos:end="311:44">LSI_SOCL_ATN</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="315:17" pos:end="317:33"><if pos:start="315:17" pos:end="317:33">if <condition pos:start="315:20" pos:end="315:37">(<expr pos:start="315:21" pos:end="315:36"><name pos:start="315:21" pos:end="315:24">insn</name> <operator pos:start="315:26" pos:end="315:26">&amp;</operator> <operator pos:start="315:28" pos:end="315:28">(</operator><literal type="number" pos:start="315:29" pos:end="315:29">1</literal> <operator pos:start="315:31" pos:end="315:32">&lt;&lt;</operator> <literal type="number" pos:start="315:34" pos:end="315:35">10</literal><operator pos:start="315:36" pos:end="315:36">)</operator></expr>)</condition><block type="pseudo" pos:start="317:21" pos:end="317:33"><block_content pos:start="317:21" pos:end="317:33">

                    <expr_stmt pos:start="317:21" pos:end="317:33"><expr pos:start="317:21" pos:end="317:32"><name pos:start="317:21" pos:end="317:28"><name pos:start="317:21" pos:end="317:21">s</name><operator pos:start="317:22" pos:end="317:23">-&gt;</operator><name pos:start="317:24" pos:end="317:28">carry</name></name> <operator pos:start="317:30" pos:end="317:30">=</operator> <literal type="number" pos:start="317:32" pos:end="317:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="319:17" pos:end="319:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="323:11" pos:end="499:9">else <block pos:start="323:16" pos:end="499:9">{<block_content pos:start="325:13" pos:end="497:13">

            <decl_stmt pos:start="325:13" pos:end="325:24"><decl pos:start="325:13" pos:end="325:23"><type pos:start="325:13" pos:end="325:19"><name pos:start="325:13" pos:end="325:19">uint8_t</name></type> <name pos:start="325:21" pos:end="325:23">op0</name></decl>;</decl_stmt>

            <decl_stmt pos:start="327:13" pos:end="327:24"><decl pos:start="327:13" pos:end="327:23"><type pos:start="327:13" pos:end="327:19"><name pos:start="327:13" pos:end="327:19">uint8_t</name></type> <name pos:start="327:21" pos:end="327:23">op1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="329:13" pos:end="329:26"><decl pos:start="329:13" pos:end="329:25"><type pos:start="329:13" pos:end="329:19"><name pos:start="329:13" pos:end="329:19">uint8_t</name></type> <name pos:start="329:21" pos:end="329:25">data8</name></decl>;</decl_stmt>

            <decl_stmt pos:start="331:13" pos:end="331:20"><decl pos:start="331:13" pos:end="331:19"><type pos:start="331:13" pos:end="331:15"><name pos:start="331:13" pos:end="331:15">int</name></type> <name pos:start="331:17" pos:end="331:19">reg</name></decl>;</decl_stmt>

            <decl_stmt pos:start="333:13" pos:end="336:0"><decl pos:start="333:13" pos:end="333:24"><type pos:start="333:13" pos:end="333:15"><name pos:start="333:13" pos:end="333:15">int</name></type> <name pos:start="333:17" pos:end="333:24">operator</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="335:1" pos:end="335:16">#<cpp:directive pos:start="335:2" pos:end="335:6">ifdef</cpp:directive> <name pos:start="335:8" pos:end="335:16">DEBUG_LSI</name></cpp:ifdef>

            <decl_stmt pos:start="337:13" pos:end="339:55"><decl pos:start="337:13" pos:end="339:54"><type pos:start="337:13" pos:end="337:31"><specifier pos:start="337:13" pos:end="337:18">static</specifier> <specifier pos:start="337:20" pos:end="337:24">const</specifier> <name pos:start="337:26" pos:end="337:29">char</name> <modifier pos:start="337:31" pos:end="337:31">*</modifier></type><name pos:start="337:32" pos:end="337:46"><name pos:start="337:32" pos:end="337:43">opcode_names</name><index pos:start="337:44" pos:end="337:46">[<expr pos:start="337:45" pos:end="337:45"><literal type="number" pos:start="337:45" pos:end="337:45">3</literal></expr>]</index></name> <init pos:start="337:48" pos:end="339:54">=

                <expr pos:start="339:17" pos:end="339:54"><block pos:start="339:17" pos:end="339:54">{<expr pos:start="339:18" pos:end="339:24"><literal type="string" pos:start="339:18" pos:end="339:24">"Write"</literal></expr>, <expr pos:start="339:27" pos:end="339:32"><literal type="string" pos:start="339:27" pos:end="339:32">"Read"</literal></expr>, <expr pos:start="339:35" pos:end="339:53"><literal type="string" pos:start="339:35" pos:end="339:53">"Read-Modify-Write"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="341:13" pos:end="346:0"><decl pos:start="341:13" pos:end="343:71"><type pos:start="341:13" pos:end="341:31"><specifier pos:start="341:13" pos:end="341:18">static</specifier> <specifier pos:start="341:20" pos:end="341:24">const</specifier> <name pos:start="341:26" pos:end="341:29">char</name> <modifier pos:start="341:31" pos:end="341:31">*</modifier></type><name pos:start="341:32" pos:end="341:48"><name pos:start="341:32" pos:end="341:45">operator_names</name><index pos:start="341:46" pos:end="341:48">[<expr pos:start="341:47" pos:end="341:47"><literal type="number" pos:start="341:47" pos:end="341:47">8</literal></expr>]</index></name> <init pos:start="341:50" pos:end="343:71">=

                <expr pos:start="343:17" pos:end="343:71"><block pos:start="343:17" pos:end="343:71">{<expr pos:start="343:18" pos:end="343:22"><literal type="string" pos:start="343:18" pos:end="343:22">"MOV"</literal></expr>, <expr pos:start="343:25" pos:end="343:29"><literal type="string" pos:start="343:25" pos:end="343:29">"SHL"</literal></expr>, <expr pos:start="343:32" pos:end="343:35"><literal type="string" pos:start="343:32" pos:end="343:35">"OR"</literal></expr>, <expr pos:start="343:38" pos:end="343:42"><literal type="string" pos:start="343:38" pos:end="343:42">"XOR"</literal></expr>, <expr pos:start="343:45" pos:end="343:49"><literal type="string" pos:start="343:45" pos:end="343:49">"AND"</literal></expr>, <expr pos:start="343:52" pos:end="343:56"><literal type="string" pos:start="343:52" pos:end="343:56">"SHR"</literal></expr>, <expr pos:start="343:59" pos:end="343:63"><literal type="string" pos:start="343:59" pos:end="343:63">"ADD"</literal></expr>, <expr pos:start="343:66" pos:end="343:70"><literal type="string" pos:start="343:66" pos:end="343:70">"ADC"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="349:13" pos:end="349:56"><expr pos:start="349:13" pos:end="349:55"><name pos:start="349:13" pos:end="349:15">reg</name> <operator pos:start="349:17" pos:end="349:17">=</operator> <operator pos:start="349:19" pos:end="349:19">(</operator><operator pos:start="349:20" pos:end="349:20">(</operator><name pos:start="349:21" pos:end="349:24">insn</name> <operator pos:start="349:26" pos:end="349:27">&gt;&gt;</operator> <literal type="number" pos:start="349:29" pos:end="349:30">16</literal><operator pos:start="349:31" pos:end="349:31">)</operator> <operator pos:start="349:33" pos:end="349:33">&amp;</operator> <literal type="number" pos:start="349:35" pos:end="349:38">0x7f</literal><operator pos:start="349:39" pos:end="349:39">)</operator> <operator pos:start="349:41" pos:end="349:41">|</operator> <operator pos:start="349:43" pos:end="349:43">(</operator><name pos:start="349:44" pos:end="349:47">insn</name> <operator pos:start="349:49" pos:end="349:49">&amp;</operator> <literal type="number" pos:start="349:51" pos:end="349:54">0x80</literal><operator pos:start="349:55" pos:end="349:55">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:39"><expr pos:start="351:13" pos:end="351:38"><name pos:start="351:13" pos:end="351:17">data8</name> <operator pos:start="351:19" pos:end="351:19">=</operator> <operator pos:start="351:21" pos:end="351:21">(</operator><name pos:start="351:22" pos:end="351:25">insn</name> <operator pos:start="351:27" pos:end="351:28">&gt;&gt;</operator> <literal type="number" pos:start="351:30" pos:end="351:30">8</literal><operator pos:start="351:31" pos:end="351:31">)</operator> <operator pos:start="351:33" pos:end="351:33">&amp;</operator> <literal type="number" pos:start="351:35" pos:end="351:38">0xff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:38"><expr pos:start="353:13" pos:end="353:37"><name pos:start="353:13" pos:end="353:18">opcode</name> <operator pos:start="353:20" pos:end="353:20">=</operator> <operator pos:start="353:22" pos:end="353:22">(</operator><name pos:start="353:23" pos:end="353:26">insn</name> <operator pos:start="353:28" pos:end="353:29">&gt;&gt;</operator> <literal type="number" pos:start="353:31" pos:end="353:32">27</literal><operator pos:start="353:33" pos:end="353:33">)</operator> <operator pos:start="353:35" pos:end="353:35">&amp;</operator> <literal type="number" pos:start="353:37" pos:end="353:37">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:40"><expr pos:start="355:13" pos:end="355:39"><name pos:start="355:13" pos:end="355:20">operator</name> <operator pos:start="355:22" pos:end="355:22">=</operator> <operator pos:start="355:24" pos:end="355:24">(</operator><name pos:start="355:25" pos:end="355:28">insn</name> <operator pos:start="355:30" pos:end="355:31">&gt;&gt;</operator> <literal type="number" pos:start="355:33" pos:end="355:34">24</literal><operator pos:start="355:35" pos:end="355:35">)</operator> <operator pos:start="355:37" pos:end="355:37">&amp;</operator> <literal type="number" pos:start="355:39" pos:end="355:39">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="363:55"><expr pos:start="357:13" pos:end="363:54"><call pos:start="357:13" pos:end="363:54"><name pos:start="357:13" pos:end="357:19">DPRINTF</name><argument_list pos:start="357:20" pos:end="363:54">(<argument pos:start="357:21" pos:end="357:65"><expr pos:start="357:21" pos:end="357:65"><literal type="string" pos:start="357:21" pos:end="357:65">"%s reg 0x%x %s data8=0x%02x sfbr=0x%02x%s\n"</literal></expr></argument>,

                    <argument pos:start="359:21" pos:end="359:44"><expr pos:start="359:21" pos:end="359:44"><name pos:start="359:21" pos:end="359:44"><name pos:start="359:21" pos:end="359:32">opcode_names</name><index pos:start="359:33" pos:end="359:44">[<expr pos:start="359:34" pos:end="359:43"><name pos:start="359:34" pos:end="359:39">opcode</name> <operator pos:start="359:41" pos:end="359:41">-</operator> <literal type="number" pos:start="359:43" pos:end="359:43">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="359:47" pos:end="359:49"><expr pos:start="359:47" pos:end="359:49"><name pos:start="359:47" pos:end="359:49">reg</name></expr></argument>,

                    <argument pos:start="361:21" pos:end="361:44"><expr pos:start="361:21" pos:end="361:44"><name pos:start="361:21" pos:end="361:44"><name pos:start="361:21" pos:end="361:34">operator_names</name><index pos:start="361:35" pos:end="361:44">[<expr pos:start="361:36" pos:end="361:43"><name pos:start="361:36" pos:end="361:43">operator</name></expr>]</index></name></expr></argument>, <argument pos:start="361:47" pos:end="361:51"><expr pos:start="361:47" pos:end="361:51"><name pos:start="361:47" pos:end="361:51">data8</name></expr></argument>, <argument pos:start="361:54" pos:end="361:60"><expr pos:start="361:54" pos:end="361:60"><name pos:start="361:54" pos:end="361:60"><name pos:start="361:54" pos:end="361:54">s</name><operator pos:start="361:55" pos:end="361:56">-&gt;</operator><name pos:start="361:57" pos:end="361:60">sfbr</name></name></expr></argument>,

                    <argument pos:start="363:21" pos:end="363:53"><expr pos:start="363:21" pos:end="363:53"><ternary pos:start="363:21" pos:end="363:53"><condition pos:start="363:21" pos:end="363:40"><expr pos:start="363:21" pos:end="363:38"><operator pos:start="363:21" pos:end="363:21">(</operator><name pos:start="363:22" pos:end="363:25">insn</name> <operator pos:start="363:27" pos:end="363:27">&amp;</operator> <operator pos:start="363:29" pos:end="363:29">(</operator><literal type="number" pos:start="363:30" pos:end="363:30">1</literal> <operator pos:start="363:32" pos:end="363:33">&lt;&lt;</operator> <literal type="number" pos:start="363:35" pos:end="363:36">23</literal><operator pos:start="363:37" pos:end="363:37">)</operator><operator pos:start="363:38" pos:end="363:38">)</operator></expr> ?</condition><then pos:start="363:42" pos:end="363:48"> <expr pos:start="363:42" pos:end="363:48"><literal type="string" pos:start="363:42" pos:end="363:48">" SFBR"</literal></expr> </then><else pos:start="363:50" pos:end="363:53">: <expr pos:start="363:52" pos:end="363:53"><literal type="string" pos:start="363:52" pos:end="363:53">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="365:13" pos:end="365:26"><expr pos:start="365:13" pos:end="365:25"><name pos:start="365:13" pos:end="365:15">op0</name> <operator pos:start="365:17" pos:end="365:17">=</operator> <name pos:start="365:19" pos:end="365:21">op1</name> <operator pos:start="365:23" pos:end="365:23">=</operator> <literal type="number" pos:start="365:25" pos:end="365:25">0</literal></expr>;</expr_stmt>

            <switch pos:start="367:13" pos:end="405:13">switch <condition pos:start="367:20" pos:end="367:27">(<expr pos:start="367:21" pos:end="367:26"><name pos:start="367:21" pos:end="367:26">opcode</name></expr>)</condition> <block pos:start="367:29" pos:end="405:13">{<block_content pos:start="369:13" pos:end="403:22">

            <case pos:start="369:13" pos:end="369:19">case <expr pos:start="369:18" pos:end="369:18"><literal type="number" pos:start="369:18" pos:end="369:18">5</literal></expr>:</case> <comment type="block" pos:start="369:21" pos:end="369:35">/* From SFBR */</comment>

                <expr_stmt pos:start="371:17" pos:end="371:30"><expr pos:start="371:17" pos:end="371:29"><name pos:start="371:17" pos:end="371:19">op0</name> <operator pos:start="371:21" pos:end="371:21">=</operator> <name pos:start="371:23" pos:end="371:29"><name pos:start="371:23" pos:end="371:23">s</name><operator pos:start="371:24" pos:end="371:25">-&gt;</operator><name pos:start="371:26" pos:end="371:29">sfbr</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:28"><expr pos:start="373:17" pos:end="373:27"><name pos:start="373:17" pos:end="373:19">op1</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <name pos:start="373:23" pos:end="373:27">data8</name></expr>;</expr_stmt>

                <break pos:start="375:17" pos:end="375:22">break;</break>

            <case pos:start="377:13" pos:end="377:19">case <expr pos:start="377:18" pos:end="377:18"><literal type="number" pos:start="377:18" pos:end="377:18">6</literal></expr>:</case> <comment type="block" pos:start="377:21" pos:end="377:33">/* To SFBR */</comment>

                <if_stmt pos:start="379:17" pos:end="381:48"><if pos:start="379:17" pos:end="381:48">if <condition pos:start="379:20" pos:end="379:29">(<expr pos:start="379:21" pos:end="379:28"><name pos:start="379:21" pos:end="379:28">operator</name></expr>)</condition><block type="pseudo" pos:start="381:21" pos:end="381:48"><block_content pos:start="381:21" pos:end="381:48">

                    <expr_stmt pos:start="381:21" pos:end="381:48"><expr pos:start="381:21" pos:end="381:47"><name pos:start="381:21" pos:end="381:23">op0</name> <operator pos:start="381:25" pos:end="381:25">=</operator> <call pos:start="381:27" pos:end="381:47"><name pos:start="381:27" pos:end="381:39">lsi_reg_readb</name><argument_list pos:start="381:40" pos:end="381:47">(<argument pos:start="381:41" pos:end="381:41"><expr pos:start="381:41" pos:end="381:41"><name pos:start="381:41" pos:end="381:41">s</name></expr></argument>, <argument pos:start="381:44" pos:end="381:46"><expr pos:start="381:44" pos:end="381:46"><name pos:start="381:44" pos:end="381:46">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:28"><expr pos:start="383:17" pos:end="383:27"><name pos:start="383:17" pos:end="383:19">op1</name> <operator pos:start="383:21" pos:end="383:21">=</operator> <name pos:start="383:23" pos:end="383:27">data8</name></expr>;</expr_stmt>

                <break pos:start="385:17" pos:end="385:22">break;</break>

            <case pos:start="387:13" pos:end="387:19">case <expr pos:start="387:18" pos:end="387:18"><literal type="number" pos:start="387:18" pos:end="387:18">7</literal></expr>:</case> <comment type="block" pos:start="387:21" pos:end="387:43">/* Read-modify-write */</comment>

                <if_stmt pos:start="389:17" pos:end="391:48"><if pos:start="389:17" pos:end="391:48">if <condition pos:start="389:20" pos:end="389:29">(<expr pos:start="389:21" pos:end="389:28"><name pos:start="389:21" pos:end="389:28">operator</name></expr>)</condition><block type="pseudo" pos:start="391:21" pos:end="391:48"><block_content pos:start="391:21" pos:end="391:48">

                    <expr_stmt pos:start="391:21" pos:end="391:48"><expr pos:start="391:21" pos:end="391:47"><name pos:start="391:21" pos:end="391:23">op0</name> <operator pos:start="391:25" pos:end="391:25">=</operator> <call pos:start="391:27" pos:end="391:47"><name pos:start="391:27" pos:end="391:39">lsi_reg_readb</name><argument_list pos:start="391:40" pos:end="391:47">(<argument pos:start="391:41" pos:end="391:41"><expr pos:start="391:41" pos:end="391:41"><name pos:start="391:41" pos:end="391:41">s</name></expr></argument>, <argument pos:start="391:44" pos:end="391:46"><expr pos:start="391:44" pos:end="391:46"><name pos:start="391:44" pos:end="391:46">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="393:17" pos:end="401:17"><if pos:start="393:17" pos:end="397:17">if <condition pos:start="393:20" pos:end="393:37">(<expr pos:start="393:21" pos:end="393:36"><name pos:start="393:21" pos:end="393:24">insn</name> <operator pos:start="393:26" pos:end="393:26">&amp;</operator> <operator pos:start="393:28" pos:end="393:28">(</operator><literal type="number" pos:start="393:29" pos:end="393:29">1</literal> <operator pos:start="393:31" pos:end="393:32">&lt;&lt;</operator> <literal type="number" pos:start="393:34" pos:end="393:35">23</literal><operator pos:start="393:36" pos:end="393:36">)</operator></expr>)</condition> <block pos:start="393:39" pos:end="397:17">{<block_content pos:start="395:21" pos:end="395:34">

                    <expr_stmt pos:start="395:21" pos:end="395:34"><expr pos:start="395:21" pos:end="395:33"><name pos:start="395:21" pos:end="395:23">op1</name> <operator pos:start="395:25" pos:end="395:25">=</operator> <name pos:start="395:27" pos:end="395:33"><name pos:start="395:27" pos:end="395:27">s</name><operator pos:start="395:28" pos:end="395:29">-&gt;</operator><name pos:start="395:30" pos:end="395:33">sfbr</name></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="397:19" pos:end="401:17">else <block pos:start="397:24" pos:end="401:17">{<block_content pos:start="399:21" pos:end="399:32">

                    <expr_stmt pos:start="399:21" pos:end="399:32"><expr pos:start="399:21" pos:end="399:31"><name pos:start="399:21" pos:end="399:23">op1</name> <operator pos:start="399:25" pos:end="399:25">=</operator> <name pos:start="399:27" pos:end="399:31">data8</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="403:17" pos:end="403:22">break;</break>

            </block_content>}</block></switch>



            <switch pos:start="409:13" pos:end="477:13">switch <condition pos:start="409:20" pos:end="409:29">(<expr pos:start="409:21" pos:end="409:28"><name pos:start="409:21" pos:end="409:28">operator</name></expr>)</condition> <block pos:start="409:31" pos:end="477:13">{<block_content pos:start="411:13" pos:end="475:22">

            <case pos:start="411:13" pos:end="411:19">case <expr pos:start="411:18" pos:end="411:18"><literal type="number" pos:start="411:18" pos:end="411:18">0</literal></expr>:</case> <comment type="block" pos:start="411:21" pos:end="411:30">/* move */</comment>

                <expr_stmt pos:start="413:17" pos:end="413:26"><expr pos:start="413:17" pos:end="413:25"><name pos:start="413:17" pos:end="413:19">op0</name> <operator pos:start="413:21" pos:end="413:21">=</operator> <name pos:start="413:23" pos:end="413:25">op1</name></expr>;</expr_stmt>

                <break pos:start="415:17" pos:end="415:22">break;</break>

            <case pos:start="417:13" pos:end="417:19">case <expr pos:start="417:18" pos:end="417:18"><literal type="number" pos:start="417:18" pos:end="417:18">1</literal></expr>:</case> <comment type="block" pos:start="417:21" pos:end="417:36">/* Shift left */</comment>

                <expr_stmt pos:start="419:17" pos:end="419:31"><expr pos:start="419:17" pos:end="419:30"><name pos:start="419:17" pos:end="419:19">op1</name> <operator pos:start="419:21" pos:end="419:21">=</operator> <name pos:start="419:23" pos:end="419:25">op0</name> <operator pos:start="419:27" pos:end="419:28">&gt;&gt;</operator> <literal type="number" pos:start="419:30" pos:end="419:30">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:44"><expr pos:start="421:17" pos:end="421:43"><name pos:start="421:17" pos:end="421:19">op0</name> <operator pos:start="421:21" pos:end="421:21">=</operator> <operator pos:start="421:23" pos:end="421:23">(</operator><name pos:start="421:24" pos:end="421:26">op0</name> <operator pos:start="421:28" pos:end="421:29">&lt;&lt;</operator> <literal type="number" pos:start="421:31" pos:end="421:31">1</literal><operator pos:start="421:32" pos:end="421:32">)</operator> <operator pos:start="421:34" pos:end="421:34">|</operator> <name pos:start="421:36" pos:end="421:43"><name pos:start="421:36" pos:end="421:36">s</name><operator pos:start="421:37" pos:end="421:38">-&gt;</operator><name pos:start="421:39" pos:end="421:43">carry</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:31"><expr pos:start="423:17" pos:end="423:30"><name pos:start="423:17" pos:end="423:24"><name pos:start="423:17" pos:end="423:17">s</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:24">carry</name></name> <operator pos:start="423:26" pos:end="423:26">=</operator> <name pos:start="423:28" pos:end="423:30">op1</name></expr>;</expr_stmt>

                <break pos:start="425:17" pos:end="425:22">break;</break>

            <case pos:start="427:13" pos:end="427:19">case <expr pos:start="427:18" pos:end="427:18"><literal type="number" pos:start="427:18" pos:end="427:18">2</literal></expr>:</case> <comment type="block" pos:start="427:21" pos:end="427:28">/* OR */</comment>

                <expr_stmt pos:start="429:17" pos:end="429:27"><expr pos:start="429:17" pos:end="429:26"><name pos:start="429:17" pos:end="429:19">op0</name> <operator pos:start="429:21" pos:end="429:22">|=</operator> <name pos:start="429:24" pos:end="429:26">op1</name></expr>;</expr_stmt>

                <break pos:start="431:17" pos:end="431:22">break;</break>

            <case pos:start="433:13" pos:end="433:19">case <expr pos:start="433:18" pos:end="433:18"><literal type="number" pos:start="433:18" pos:end="433:18">3</literal></expr>:</case> <comment type="block" pos:start="433:21" pos:end="433:29">/* XOR */</comment>

                <expr_stmt pos:start="435:17" pos:end="435:27"><expr pos:start="435:17" pos:end="435:26"><name pos:start="435:17" pos:end="435:19">op0</name> <operator pos:start="435:21" pos:end="435:22">^=</operator> <name pos:start="435:24" pos:end="435:26">op1</name></expr>;</expr_stmt>

                <break pos:start="437:17" pos:end="437:22">break;</break>

            <case pos:start="439:13" pos:end="439:19">case <expr pos:start="439:18" pos:end="439:18"><literal type="number" pos:start="439:18" pos:end="439:18">4</literal></expr>:</case> <comment type="block" pos:start="439:21" pos:end="439:29">/* AND */</comment>

                <expr_stmt pos:start="441:17" pos:end="441:27"><expr pos:start="441:17" pos:end="441:26"><name pos:start="441:17" pos:end="441:19">op0</name> <operator pos:start="441:21" pos:end="441:22">&amp;=</operator> <name pos:start="441:24" pos:end="441:26">op1</name></expr>;</expr_stmt>

                <break pos:start="443:17" pos:end="443:22">break;</break>

            <case pos:start="445:13" pos:end="445:19">case <expr pos:start="445:18" pos:end="445:18"><literal type="number" pos:start="445:18" pos:end="445:18">5</literal></expr>:</case> <comment type="block" pos:start="445:21" pos:end="445:29">/* SHR */</comment>

                <expr_stmt pos:start="447:17" pos:end="447:30"><expr pos:start="447:17" pos:end="447:29"><name pos:start="447:17" pos:end="447:19">op1</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <name pos:start="447:23" pos:end="447:25">op0</name> <operator pos:start="447:27" pos:end="447:27">&amp;</operator> <literal type="number" pos:start="447:29" pos:end="447:29">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="449:17" pos:end="449:51"><expr pos:start="449:17" pos:end="449:50"><name pos:start="449:17" pos:end="449:19">op0</name> <operator pos:start="449:21" pos:end="449:21">=</operator> <operator pos:start="449:23" pos:end="449:23">(</operator><name pos:start="449:24" pos:end="449:26">op0</name> <operator pos:start="449:28" pos:end="449:29">&gt;&gt;</operator> <literal type="number" pos:start="449:31" pos:end="449:31">1</literal><operator pos:start="449:32" pos:end="449:32">)</operator> <operator pos:start="449:34" pos:end="449:34">|</operator> <operator pos:start="449:36" pos:end="449:36">(</operator><name pos:start="449:37" pos:end="449:44"><name pos:start="449:37" pos:end="449:37">s</name><operator pos:start="449:38" pos:end="449:39">-&gt;</operator><name pos:start="449:40" pos:end="449:44">carry</name></name> <operator pos:start="449:46" pos:end="449:47">&lt;&lt;</operator> <literal type="number" pos:start="449:49" pos:end="449:49">7</literal><operator pos:start="449:50" pos:end="449:50">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="451:17" pos:end="451:31"><expr pos:start="451:17" pos:end="451:30"><name pos:start="451:17" pos:end="451:24"><name pos:start="451:17" pos:end="451:17">s</name><operator pos:start="451:18" pos:end="451:19">-&gt;</operator><name pos:start="451:20" pos:end="451:24">carry</name></name> <operator pos:start="451:26" pos:end="451:26">=</operator> <name pos:start="451:28" pos:end="451:30">op1</name></expr>;</expr_stmt>

                <break pos:start="453:17" pos:end="453:22">break;</break>

            <case pos:start="455:13" pos:end="455:19">case <expr pos:start="455:18" pos:end="455:18"><literal type="number" pos:start="455:18" pos:end="455:18">6</literal></expr>:</case> <comment type="block" pos:start="455:21" pos:end="455:29">/* ADD */</comment>

                <expr_stmt pos:start="457:17" pos:end="457:27"><expr pos:start="457:17" pos:end="457:26"><name pos:start="457:17" pos:end="457:19">op0</name> <operator pos:start="457:21" pos:end="457:22">+=</operator> <name pos:start="457:24" pos:end="457:26">op1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="459:17" pos:end="459:37"><expr pos:start="459:17" pos:end="459:36"><name pos:start="459:17" pos:end="459:24"><name pos:start="459:17" pos:end="459:17">s</name><operator pos:start="459:18" pos:end="459:19">-&gt;</operator><name pos:start="459:20" pos:end="459:24">carry</name></name> <operator pos:start="459:26" pos:end="459:26">=</operator> <name pos:start="459:28" pos:end="459:30">op0</name> <operator pos:start="459:32" pos:end="459:32">&lt;</operator> <name pos:start="459:34" pos:end="459:36">op1</name></expr>;</expr_stmt>

                <break pos:start="461:17" pos:end="461:22">break;</break>

            <case pos:start="463:13" pos:end="463:19">case <expr pos:start="463:18" pos:end="463:18"><literal type="number" pos:start="463:18" pos:end="463:18">7</literal></expr>:</case> <comment type="block" pos:start="463:21" pos:end="463:29">/* ADC */</comment>

                <expr_stmt pos:start="465:17" pos:end="465:38"><expr pos:start="465:17" pos:end="465:37"><name pos:start="465:17" pos:end="465:19">op0</name> <operator pos:start="465:21" pos:end="465:22">+=</operator> <name pos:start="465:24" pos:end="465:26">op1</name> <operator pos:start="465:28" pos:end="465:28">+</operator> <name pos:start="465:30" pos:end="465:37"><name pos:start="465:30" pos:end="465:30">s</name><operator pos:start="465:31" pos:end="465:32">-&gt;</operator><name pos:start="465:33" pos:end="465:37">carry</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="467:17" pos:end="473:41"><if pos:start="467:17" pos:end="469:42">if <condition pos:start="467:20" pos:end="467:29">(<expr pos:start="467:21" pos:end="467:28"><name pos:start="467:21" pos:end="467:28"><name pos:start="467:21" pos:end="467:21">s</name><operator pos:start="467:22" pos:end="467:23">-&gt;</operator><name pos:start="467:24" pos:end="467:28">carry</name></name></expr>)</condition><block type="pseudo" pos:start="469:21" pos:end="469:42"><block_content pos:start="469:21" pos:end="469:42">

                    <expr_stmt pos:start="469:21" pos:end="469:42"><expr pos:start="469:21" pos:end="469:41"><name pos:start="469:21" pos:end="469:28"><name pos:start="469:21" pos:end="469:21">s</name><operator pos:start="469:22" pos:end="469:23">-&gt;</operator><name pos:start="469:24" pos:end="469:28">carry</name></name> <operator pos:start="469:30" pos:end="469:30">=</operator> <name pos:start="469:32" pos:end="469:34">op0</name> <operator pos:start="469:36" pos:end="469:37">&lt;=</operator> <name pos:start="469:39" pos:end="469:41">op1</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="471:17" pos:end="473:41">else<block type="pseudo" pos:start="473:21" pos:end="473:41"><block_content pos:start="473:21" pos:end="473:41">

                    <expr_stmt pos:start="473:21" pos:end="473:41"><expr pos:start="473:21" pos:end="473:40"><name pos:start="473:21" pos:end="473:28"><name pos:start="473:21" pos:end="473:21">s</name><operator pos:start="473:22" pos:end="473:23">-&gt;</operator><name pos:start="473:24" pos:end="473:28">carry</name></name> <operator pos:start="473:30" pos:end="473:30">=</operator> <name pos:start="473:32" pos:end="473:34">op0</name> <operator pos:start="473:36" pos:end="473:36">&lt;</operator> <name pos:start="473:38" pos:end="473:40">op1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break pos:start="475:17" pos:end="475:22">break;</break>

            </block_content>}</block></switch>



            <switch pos:start="481:13" pos:end="497:13">switch <condition pos:start="481:20" pos:end="481:27">(<expr pos:start="481:21" pos:end="481:26"><name pos:start="481:21" pos:end="481:26">opcode</name></expr>)</condition> <block pos:start="481:29" pos:end="497:13">{<block_content pos:start="483:13" pos:end="495:22">

            <case pos:start="483:13" pos:end="483:19">case <expr pos:start="483:18" pos:end="483:18"><literal type="number" pos:start="483:18" pos:end="483:18">5</literal></expr>:</case> <comment type="block" pos:start="483:21" pos:end="483:35">/* From SFBR */</comment>

            <case pos:start="485:13" pos:end="485:19">case <expr pos:start="485:18" pos:end="485:18"><literal type="number" pos:start="485:18" pos:end="485:18">7</literal></expr>:</case> <comment type="block" pos:start="485:21" pos:end="485:43">/* Read-modify-write */</comment>

                <expr_stmt pos:start="487:17" pos:end="487:44"><expr pos:start="487:17" pos:end="487:43"><call pos:start="487:17" pos:end="487:43"><name pos:start="487:17" pos:end="487:30">lsi_reg_writeb</name><argument_list pos:start="487:31" pos:end="487:43">(<argument pos:start="487:32" pos:end="487:32"><expr pos:start="487:32" pos:end="487:32"><name pos:start="487:32" pos:end="487:32">s</name></expr></argument>, <argument pos:start="487:35" pos:end="487:37"><expr pos:start="487:35" pos:end="487:37"><name pos:start="487:35" pos:end="487:37">reg</name></expr></argument>, <argument pos:start="487:40" pos:end="487:42"><expr pos:start="487:40" pos:end="487:42"><name pos:start="487:40" pos:end="487:42">op0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="489:17" pos:end="489:22">break;</break>

            <case pos:start="491:13" pos:end="491:19">case <expr pos:start="491:18" pos:end="491:18"><literal type="number" pos:start="491:18" pos:end="491:18">6</literal></expr>:</case> <comment type="block" pos:start="491:21" pos:end="491:33">/* To SFBR */</comment>

                <expr_stmt pos:start="493:17" pos:end="493:30"><expr pos:start="493:17" pos:end="493:29"><name pos:start="493:17" pos:end="493:23"><name pos:start="493:17" pos:end="493:17">s</name><operator pos:start="493:18" pos:end="493:19">-&gt;</operator><name pos:start="493:20" pos:end="493:23">sfbr</name></name> <operator pos:start="493:25" pos:end="493:25">=</operator> <name pos:start="493:27" pos:end="493:29">op0</name></expr>;</expr_stmt>

                <break pos:start="495:17" pos:end="495:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="501:9" pos:end="501:14">break;</break>



    <case pos:start="505:5" pos:end="505:11">case <expr pos:start="505:10" pos:end="505:10"><literal type="number" pos:start="505:10" pos:end="505:10">2</literal></expr>:</case> <comment type="block" pos:start="505:13" pos:end="505:36">/* Transfer Control.  */</comment>

        <block pos:start="507:9" pos:end="645:9">{<block_content pos:start="509:13" pos:end="643:13">

            <decl_stmt pos:start="509:13" pos:end="509:21"><decl pos:start="509:13" pos:end="509:20"><type pos:start="509:13" pos:end="509:15"><name pos:start="509:13" pos:end="509:15">int</name></type> <name pos:start="509:17" pos:end="509:20">cond</name></decl>;</decl_stmt>

            <decl_stmt pos:start="511:13" pos:end="511:20"><decl pos:start="511:13" pos:end="511:19"><type pos:start="511:13" pos:end="511:15"><name pos:start="511:13" pos:end="511:15">int</name></type> <name pos:start="511:17" pos:end="511:19">jmp</name></decl>;</decl_stmt>



            <if_stmt pos:start="515:13" pos:end="521:13"><if pos:start="515:13" pos:end="521:13">if <condition pos:start="515:16" pos:end="515:41">(<expr pos:start="515:17" pos:end="515:40"><operator pos:start="515:17" pos:end="515:17">(</operator><name pos:start="515:18" pos:end="515:21">insn</name> <operator pos:start="515:23" pos:end="515:23">&amp;</operator> <literal type="number" pos:start="515:25" pos:end="515:34">0x002e0000</literal><operator pos:start="515:35" pos:end="515:35">)</operator> <operator pos:start="515:37" pos:end="515:38">==</operator> <literal type="number" pos:start="515:40" pos:end="515:40">0</literal></expr>)</condition> <block pos:start="515:43" pos:end="521:13">{<block_content pos:start="517:17" pos:end="519:22">

                <expr_stmt pos:start="517:17" pos:end="517:33"><expr pos:start="517:17" pos:end="517:32"><call pos:start="517:17" pos:end="517:32"><name pos:start="517:17" pos:end="517:23">DPRINTF</name><argument_list pos:start="517:24" pos:end="517:32">(<argument pos:start="517:25" pos:end="517:31"><expr pos:start="517:25" pos:end="517:31"><literal type="string" pos:start="517:25" pos:end="517:31">"NOP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="519:17" pos:end="519:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="523:13" pos:end="531:13"><if pos:start="523:13" pos:end="531:13">if <condition pos:start="523:16" pos:end="523:41">(<expr pos:start="523:17" pos:end="523:40"><name pos:start="523:17" pos:end="523:24"><name pos:start="523:17" pos:end="523:17">s</name><operator pos:start="523:18" pos:end="523:19">-&gt;</operator><name pos:start="523:20" pos:end="523:24">sist1</name></name> <operator pos:start="523:26" pos:end="523:26">&amp;</operator> <name pos:start="523:28" pos:end="523:40">LSI_SIST1_STO</name></expr>)</condition> <block pos:start="523:43" pos:end="531:13">{<block_content pos:start="525:17" pos:end="529:22">

                <expr_stmt pos:start="525:17" pos:end="525:52"><expr pos:start="525:17" pos:end="525:51"><call pos:start="525:17" pos:end="525:51"><name pos:start="525:17" pos:end="525:23">DPRINTF</name><argument_list pos:start="525:24" pos:end="525:51">(<argument pos:start="525:25" pos:end="525:50"><expr pos:start="525:25" pos:end="525:50"><literal type="string" pos:start="525:25" pos:end="525:50">"Delayed select timeout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="527:17" pos:end="527:35"><expr pos:start="527:17" pos:end="527:34"><call pos:start="527:17" pos:end="527:34"><name pos:start="527:17" pos:end="527:31">lsi_stop_script</name><argument_list pos:start="527:32" pos:end="527:34">(<argument pos:start="527:33" pos:end="527:33"><expr pos:start="527:33" pos:end="527:33"><name pos:start="527:33" pos:end="527:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="529:17" pos:end="529:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:49"><expr pos:start="533:13" pos:end="533:48"><name pos:start="533:13" pos:end="533:16">cond</name> <operator pos:start="533:18" pos:end="533:18">=</operator> <name pos:start="533:20" pos:end="533:22">jmp</name> <operator pos:start="533:24" pos:end="533:24">=</operator> <operator pos:start="533:26" pos:end="533:26">(</operator><name pos:start="533:27" pos:end="533:30">insn</name> <operator pos:start="533:32" pos:end="533:32">&amp;</operator> <operator pos:start="533:34" pos:end="533:34">(</operator><literal type="number" pos:start="533:35" pos:end="533:35">1</literal> <operator pos:start="533:37" pos:end="533:38">&lt;&lt;</operator> <literal type="number" pos:start="533:40" pos:end="533:41">19</literal><operator pos:start="533:42" pos:end="533:42">)</operator><operator pos:start="533:43" pos:end="533:43">)</operator> <operator pos:start="533:45" pos:end="533:46">!=</operator> <literal type="number" pos:start="533:48" pos:end="533:48">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="535:13" pos:end="541:13"><if pos:start="535:13" pos:end="541:13">if <condition pos:start="535:16" pos:end="535:50">(<expr pos:start="535:17" pos:end="535:49"><name pos:start="535:17" pos:end="535:20">cond</name> <operator pos:start="535:22" pos:end="535:23">==</operator> <name pos:start="535:25" pos:end="535:27">jmp</name> <operator pos:start="535:29" pos:end="535:30">&amp;&amp;</operator> <operator pos:start="535:32" pos:end="535:32">(</operator><name pos:start="535:33" pos:end="535:36">insn</name> <operator pos:start="535:38" pos:end="535:38">&amp;</operator> <operator pos:start="535:40" pos:end="535:40">(</operator><literal type="number" pos:start="535:41" pos:end="535:41">1</literal> <operator pos:start="535:43" pos:end="535:44">&lt;&lt;</operator> <literal type="number" pos:start="535:46" pos:end="535:47">21</literal><operator pos:start="535:48" pos:end="535:48">)</operator><operator pos:start="535:49" pos:end="535:49">)</operator></expr>)</condition> <block pos:start="535:52" pos:end="541:13">{<block_content pos:start="537:17" pos:end="539:37">

                <expr_stmt pos:start="537:17" pos:end="537:63"><expr pos:start="537:17" pos:end="537:62"><call pos:start="537:17" pos:end="537:62"><name pos:start="537:17" pos:end="537:23">DPRINTF</name><argument_list pos:start="537:24" pos:end="537:62">(<argument pos:start="537:25" pos:end="537:44"><expr pos:start="537:25" pos:end="537:44"><literal type="string" pos:start="537:25" pos:end="537:44">"Compare carry %d\n"</literal></expr></argument>, <argument pos:start="537:47" pos:end="537:61"><expr pos:start="537:47" pos:end="537:61"><name pos:start="537:47" pos:end="537:54"><name pos:start="537:47" pos:end="537:47">s</name><operator pos:start="537:48" pos:end="537:49">-&gt;</operator><name pos:start="537:50" pos:end="537:54">carry</name></name> <operator pos:start="537:56" pos:end="537:57">==</operator> <name pos:start="537:59" pos:end="537:61">jmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="539:17" pos:end="539:37"><expr pos:start="539:17" pos:end="539:36"><name pos:start="539:17" pos:end="539:20">cond</name> <operator pos:start="539:22" pos:end="539:22">=</operator> <name pos:start="539:24" pos:end="539:31"><name pos:start="539:24" pos:end="539:24">s</name><operator pos:start="539:25" pos:end="539:26">-&gt;</operator><name pos:start="539:27" pos:end="539:31">carry</name></name> <operator pos:start="539:33" pos:end="539:34">!=</operator> <literal type="number" pos:start="539:36" pos:end="539:36">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="543:13" pos:end="555:13"><if pos:start="543:13" pos:end="555:13">if <condition pos:start="543:16" pos:end="543:50">(<expr pos:start="543:17" pos:end="543:49"><name pos:start="543:17" pos:end="543:20">cond</name> <operator pos:start="543:22" pos:end="543:23">==</operator> <name pos:start="543:25" pos:end="543:27">jmp</name> <operator pos:start="543:29" pos:end="543:30">&amp;&amp;</operator> <operator pos:start="543:32" pos:end="543:32">(</operator><name pos:start="543:33" pos:end="543:36">insn</name> <operator pos:start="543:38" pos:end="543:38">&amp;</operator> <operator pos:start="543:40" pos:end="543:40">(</operator><literal type="number" pos:start="543:41" pos:end="543:41">1</literal> <operator pos:start="543:43" pos:end="543:44">&lt;&lt;</operator> <literal type="number" pos:start="543:46" pos:end="543:47">17</literal><operator pos:start="543:48" pos:end="543:48">)</operator><operator pos:start="543:49" pos:end="543:49">)</operator></expr>)</condition> <block pos:start="543:52" pos:end="555:13">{<block_content pos:start="545:17" pos:end="553:70">

                <expr_stmt pos:start="545:17" pos:end="551:44"><expr pos:start="545:17" pos:end="551:43"><call pos:start="545:17" pos:end="551:43"><name pos:start="545:17" pos:end="545:23">DPRINTF</name><argument_list pos:start="545:24" pos:end="551:43">(<argument pos:start="545:25" pos:end="545:51"><expr pos:start="545:25" pos:end="545:51"><literal type="string" pos:start="545:25" pos:end="545:51">"Compare phase %d %c= %d\n"</literal></expr></argument>,

                        <argument pos:start="547:25" pos:end="547:48"><expr pos:start="547:25" pos:end="547:48"><operator pos:start="547:25" pos:end="547:25">(</operator><name pos:start="547:26" pos:end="547:34"><name pos:start="547:26" pos:end="547:26">s</name><operator pos:start="547:27" pos:end="547:28">-&gt;</operator><name pos:start="547:29" pos:end="547:34">sstat1</name></name> <operator pos:start="547:36" pos:end="547:36">&amp;</operator> <name pos:start="547:38" pos:end="547:47">PHASE_MASK</name><operator pos:start="547:48" pos:end="547:48">)</operator></expr></argument>,

                        <argument pos:start="549:25" pos:end="549:39"><expr pos:start="549:25" pos:end="549:39"><ternary pos:start="549:25" pos:end="549:39"><condition pos:start="549:25" pos:end="549:29"><expr pos:start="549:25" pos:end="549:27"><name pos:start="549:25" pos:end="549:27">jmp</name></expr> ?</condition><then pos:start="549:31" pos:end="549:33"> <expr pos:start="549:31" pos:end="549:33"><literal type="char" pos:start="549:31" pos:end="549:33">'='</literal></expr> </then><else pos:start="549:35" pos:end="549:39">: <expr pos:start="549:37" pos:end="549:39"><literal type="char" pos:start="549:37" pos:end="549:39">'!'</literal></expr></else></ternary></expr></argument>,

                        <argument pos:start="551:25" pos:end="551:42"><expr pos:start="551:25" pos:end="551:42"><operator pos:start="551:25" pos:end="551:25">(</operator><operator pos:start="551:26" pos:end="551:26">(</operator><name pos:start="551:27" pos:end="551:30">insn</name> <operator pos:start="551:32" pos:end="551:33">&gt;&gt;</operator> <literal type="number" pos:start="551:35" pos:end="551:36">24</literal><operator pos:start="551:37" pos:end="551:37">)</operator> <operator pos:start="551:39" pos:end="551:39">&amp;</operator> <literal type="number" pos:start="551:41" pos:end="551:41">7</literal><operator pos:start="551:42" pos:end="551:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="553:17" pos:end="553:70"><expr pos:start="553:17" pos:end="553:69"><name pos:start="553:17" pos:end="553:20">cond</name> <operator pos:start="553:22" pos:end="553:22">=</operator> <operator pos:start="553:24" pos:end="553:24">(</operator><name pos:start="553:25" pos:end="553:33"><name pos:start="553:25" pos:end="553:25">s</name><operator pos:start="553:26" pos:end="553:27">-&gt;</operator><name pos:start="553:28" pos:end="553:33">sstat1</name></name> <operator pos:start="553:35" pos:end="553:35">&amp;</operator> <name pos:start="553:37" pos:end="553:46">PHASE_MASK</name><operator pos:start="553:47" pos:end="553:47">)</operator> <operator pos:start="553:49" pos:end="553:50">==</operator> <operator pos:start="553:52" pos:end="553:52">(</operator><operator pos:start="553:53" pos:end="553:53">(</operator><name pos:start="553:54" pos:end="553:57">insn</name> <operator pos:start="553:59" pos:end="553:60">&gt;&gt;</operator> <literal type="number" pos:start="553:62" pos:end="553:63">24</literal><operator pos:start="553:64" pos:end="553:64">)</operator> <operator pos:start="553:66" pos:end="553:66">&amp;</operator> <literal type="number" pos:start="553:68" pos:end="553:68">7</literal><operator pos:start="553:69" pos:end="553:69">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="557:13" pos:end="571:13"><if pos:start="557:13" pos:end="571:13">if <condition pos:start="557:16" pos:end="557:50">(<expr pos:start="557:17" pos:end="557:49"><name pos:start="557:17" pos:end="557:20">cond</name> <operator pos:start="557:22" pos:end="557:23">==</operator> <name pos:start="557:25" pos:end="557:27">jmp</name> <operator pos:start="557:29" pos:end="557:30">&amp;&amp;</operator> <operator pos:start="557:32" pos:end="557:32">(</operator><name pos:start="557:33" pos:end="557:36">insn</name> <operator pos:start="557:38" pos:end="557:38">&amp;</operator> <operator pos:start="557:40" pos:end="557:40">(</operator><literal type="number" pos:start="557:41" pos:end="557:41">1</literal> <operator pos:start="557:43" pos:end="557:44">&lt;&lt;</operator> <literal type="number" pos:start="557:46" pos:end="557:47">18</literal><operator pos:start="557:48" pos:end="557:48">)</operator><operator pos:start="557:49" pos:end="557:49">)</operator></expr>)</condition> <block pos:start="557:52" pos:end="571:13">{<block_content pos:start="559:17" pos:end="569:57">

                <decl_stmt pos:start="559:17" pos:end="559:29"><decl pos:start="559:17" pos:end="559:28"><type pos:start="559:17" pos:end="559:23"><name pos:start="559:17" pos:end="559:23">uint8_t</name></type> <name pos:start="559:25" pos:end="559:28">mask</name></decl>;</decl_stmt>



                <expr_stmt pos:start="563:17" pos:end="563:43"><expr pos:start="563:17" pos:end="563:42"><name pos:start="563:17" pos:end="563:20">mask</name> <operator pos:start="563:22" pos:end="563:22">=</operator> <operator pos:start="563:24" pos:end="563:24">(</operator><operator pos:start="563:25" pos:end="563:25">~</operator><name pos:start="563:26" pos:end="563:29">insn</name> <operator pos:start="563:31" pos:end="563:32">&gt;&gt;</operator> <literal type="number" pos:start="563:34" pos:end="563:34">8</literal><operator pos:start="563:35" pos:end="563:35">)</operator> <operator pos:start="563:37" pos:end="563:37">&amp;</operator> <literal type="number" pos:start="563:39" pos:end="563:42">0xff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="565:17" pos:end="567:69"><expr pos:start="565:17" pos:end="567:68"><call pos:start="565:17" pos:end="567:68"><name pos:start="565:17" pos:end="565:23">DPRINTF</name><argument_list pos:start="565:24" pos:end="567:68">(<argument pos:start="565:25" pos:end="565:61"><expr pos:start="565:25" pos:end="565:61"><literal type="string" pos:start="565:25" pos:end="565:61">"Compare data 0x%x &amp; 0x%x %c= 0x%x\n"</literal></expr></argument>,

                        <argument pos:start="567:25" pos:end="567:31"><expr pos:start="567:25" pos:end="567:31"><name pos:start="567:25" pos:end="567:31"><name pos:start="567:25" pos:end="567:25">s</name><operator pos:start="567:26" pos:end="567:27">-&gt;</operator><name pos:start="567:28" pos:end="567:31">sfbr</name></name></expr></argument>, <argument pos:start="567:34" pos:end="567:37"><expr pos:start="567:34" pos:end="567:37"><name pos:start="567:34" pos:end="567:37">mask</name></expr></argument>, <argument pos:start="567:40" pos:end="567:54"><expr pos:start="567:40" pos:end="567:54"><ternary pos:start="567:40" pos:end="567:54"><condition pos:start="567:40" pos:end="567:44"><expr pos:start="567:40" pos:end="567:42"><name pos:start="567:40" pos:end="567:42">jmp</name></expr> ?</condition><then pos:start="567:46" pos:end="567:48"> <expr pos:start="567:46" pos:end="567:48"><literal type="char" pos:start="567:46" pos:end="567:48">'='</literal></expr> </then><else pos:start="567:50" pos:end="567:54">: <expr pos:start="567:52" pos:end="567:54"><literal type="char" pos:start="567:52" pos:end="567:54">'!'</literal></expr></else></ternary></expr></argument>, <argument pos:start="567:57" pos:end="567:67"><expr pos:start="567:57" pos:end="567:67"><name pos:start="567:57" pos:end="567:60">insn</name> <operator pos:start="567:62" pos:end="567:62">&amp;</operator> <name pos:start="567:64" pos:end="567:67">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="569:17" pos:end="569:57"><expr pos:start="569:17" pos:end="569:56"><name pos:start="569:17" pos:end="569:20">cond</name> <operator pos:start="569:22" pos:end="569:22">=</operator> <operator pos:start="569:24" pos:end="569:24">(</operator><name pos:start="569:25" pos:end="569:31"><name pos:start="569:25" pos:end="569:25">s</name><operator pos:start="569:26" pos:end="569:27">-&gt;</operator><name pos:start="569:28" pos:end="569:31">sfbr</name></name> <operator pos:start="569:33" pos:end="569:33">&amp;</operator> <name pos:start="569:35" pos:end="569:38">mask</name><operator pos:start="569:39" pos:end="569:39">)</operator> <operator pos:start="569:41" pos:end="569:42">==</operator> <operator pos:start="569:44" pos:end="569:44">(</operator><name pos:start="569:45" pos:end="569:48">insn</name> <operator pos:start="569:50" pos:end="569:50">&amp;</operator> <name pos:start="569:52" pos:end="569:55">mask</name><operator pos:start="569:56" pos:end="569:56">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="573:13" pos:end="643:13"><if pos:start="573:13" pos:end="639:13">if <condition pos:start="573:16" pos:end="573:28">(<expr pos:start="573:17" pos:end="573:27"><name pos:start="573:17" pos:end="573:20">cond</name> <operator pos:start="573:22" pos:end="573:23">==</operator> <name pos:start="573:25" pos:end="573:27">jmp</name></expr>)</condition> <block pos:start="573:30" pos:end="639:13">{<block_content pos:start="575:17" pos:end="637:17">

                <if_stmt pos:start="575:17" pos:end="581:17"><if pos:start="575:17" pos:end="581:17">if <condition pos:start="575:20" pos:end="575:37">(<expr pos:start="575:21" pos:end="575:36"><name pos:start="575:21" pos:end="575:24">insn</name> <operator pos:start="575:26" pos:end="575:26">&amp;</operator> <operator pos:start="575:28" pos:end="575:28">(</operator><literal type="number" pos:start="575:29" pos:end="575:29">1</literal> <operator pos:start="575:31" pos:end="575:32">&lt;&lt;</operator> <literal type="number" pos:start="575:34" pos:end="575:35">23</literal><operator pos:start="575:36" pos:end="575:36">)</operator></expr>)</condition> <block pos:start="575:39" pos:end="581:17">{<block_content pos:start="579:21" pos:end="579:48">

                    <comment type="block" pos:start="577:21" pos:end="577:44">/* Relative address.  */</comment>

                    <expr_stmt pos:start="579:21" pos:end="579:48"><expr pos:start="579:21" pos:end="579:47"><name pos:start="579:21" pos:end="579:24">addr</name> <operator pos:start="579:26" pos:end="579:26">=</operator> <name pos:start="579:28" pos:end="579:33"><name pos:start="579:28" pos:end="579:28">s</name><operator pos:start="579:29" pos:end="579:30">-&gt;</operator><name pos:start="579:31" pos:end="579:33">dsp</name></name> <operator pos:start="579:35" pos:end="579:35">+</operator> <call pos:start="579:37" pos:end="579:47"><name pos:start="579:37" pos:end="579:41">sxt24</name><argument_list pos:start="579:42" pos:end="579:47">(<argument pos:start="579:43" pos:end="579:46"><expr pos:start="579:43" pos:end="579:46"><name pos:start="579:43" pos:end="579:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <switch pos:start="583:17" pos:end="637:17">switch <condition pos:start="583:24" pos:end="583:41">(<expr pos:start="583:25" pos:end="583:40"><operator pos:start="583:25" pos:end="583:25">(</operator><name pos:start="583:26" pos:end="583:29">insn</name> <operator pos:start="583:31" pos:end="583:32">&gt;&gt;</operator> <literal type="number" pos:start="583:34" pos:end="583:35">27</literal><operator pos:start="583:36" pos:end="583:36">)</operator> <operator pos:start="583:38" pos:end="583:38">&amp;</operator> <literal type="number" pos:start="583:40" pos:end="583:40">7</literal></expr>)</condition> <block pos:start="583:43" pos:end="637:17">{<block_content pos:start="585:17" pos:end="635:26">

                <case pos:start="585:17" pos:end="585:23">case <expr pos:start="585:22" pos:end="585:22"><literal type="number" pos:start="585:22" pos:end="585:22">0</literal></expr>:</case> <comment type="block" pos:start="585:25" pos:end="585:34">/* Jump */</comment>

                    <expr_stmt pos:start="587:21" pos:end="587:54"><expr pos:start="587:21" pos:end="587:53"><call pos:start="587:21" pos:end="587:53"><name pos:start="587:21" pos:end="587:27">DPRINTF</name><argument_list pos:start="587:28" pos:end="587:53">(<argument pos:start="587:29" pos:end="587:46"><expr pos:start="587:29" pos:end="587:46"><literal type="string" pos:start="587:29" pos:end="587:46">"Jump to 0x%08x\n"</literal></expr></argument>, <argument pos:start="587:49" pos:end="587:52"><expr pos:start="587:49" pos:end="587:52"><name pos:start="587:49" pos:end="587:52">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="589:21" pos:end="589:34"><expr pos:start="589:21" pos:end="589:33"><name pos:start="589:21" pos:end="589:26"><name pos:start="589:21" pos:end="589:21">s</name><operator pos:start="589:22" pos:end="589:23">-&gt;</operator><name pos:start="589:24" pos:end="589:26">dsp</name></name> <operator pos:start="589:28" pos:end="589:28">=</operator> <name pos:start="589:30" pos:end="589:33">addr</name></expr>;</expr_stmt>

                    <break pos:start="591:21" pos:end="591:26">break;</break>

                <case pos:start="593:17" pos:end="593:23">case <expr pos:start="593:22" pos:end="593:22"><literal type="number" pos:start="593:22" pos:end="593:22">1</literal></expr>:</case> <comment type="block" pos:start="593:25" pos:end="593:34">/* Call */</comment>

                    <expr_stmt pos:start="595:21" pos:end="595:51"><expr pos:start="595:21" pos:end="595:50"><call pos:start="595:21" pos:end="595:50"><name pos:start="595:21" pos:end="595:27">DPRINTF</name><argument_list pos:start="595:28" pos:end="595:50">(<argument pos:start="595:29" pos:end="595:43"><expr pos:start="595:29" pos:end="595:43"><literal type="string" pos:start="595:29" pos:end="595:43">"Call 0x%08x\n"</literal></expr></argument>, <argument pos:start="595:46" pos:end="595:49"><expr pos:start="595:46" pos:end="595:49"><name pos:start="595:46" pos:end="595:49">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="597:21" pos:end="597:37"><expr pos:start="597:21" pos:end="597:36"><name pos:start="597:21" pos:end="597:27"><name pos:start="597:21" pos:end="597:21">s</name><operator pos:start="597:22" pos:end="597:23">-&gt;</operator><name pos:start="597:24" pos:end="597:27">temp</name></name> <operator pos:start="597:29" pos:end="597:29">=</operator> <name pos:start="597:31" pos:end="597:36"><name pos:start="597:31" pos:end="597:31">s</name><operator pos:start="597:32" pos:end="597:33">-&gt;</operator><name pos:start="597:34" pos:end="597:36">dsp</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="599:21" pos:end="599:34"><expr pos:start="599:21" pos:end="599:33"><name pos:start="599:21" pos:end="599:26"><name pos:start="599:21" pos:end="599:21">s</name><operator pos:start="599:22" pos:end="599:23">-&gt;</operator><name pos:start="599:24" pos:end="599:26">dsp</name></name> <operator pos:start="599:28" pos:end="599:28">=</operator> <name pos:start="599:30" pos:end="599:33">addr</name></expr>;</expr_stmt>

                    <break pos:start="601:21" pos:end="601:26">break;</break>

                <case pos:start="603:17" pos:end="603:23">case <expr pos:start="603:22" pos:end="603:22"><literal type="number" pos:start="603:22" pos:end="603:22">2</literal></expr>:</case> <comment type="block" pos:start="603:25" pos:end="603:36">/* Return */</comment>

                    <expr_stmt pos:start="605:21" pos:end="605:59"><expr pos:start="605:21" pos:end="605:58"><call pos:start="605:21" pos:end="605:58"><name pos:start="605:21" pos:end="605:27">DPRINTF</name><argument_list pos:start="605:28" pos:end="605:58">(<argument pos:start="605:29" pos:end="605:48"><expr pos:start="605:29" pos:end="605:48"><literal type="string" pos:start="605:29" pos:end="605:48">"Return to 0x%08x\n"</literal></expr></argument>, <argument pos:start="605:51" pos:end="605:57"><expr pos:start="605:51" pos:end="605:57"><name pos:start="605:51" pos:end="605:57"><name pos:start="605:51" pos:end="605:51">s</name><operator pos:start="605:52" pos:end="605:53">-&gt;</operator><name pos:start="605:54" pos:end="605:57">temp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="607:21" pos:end="607:37"><expr pos:start="607:21" pos:end="607:36"><name pos:start="607:21" pos:end="607:26"><name pos:start="607:21" pos:end="607:21">s</name><operator pos:start="607:22" pos:end="607:23">-&gt;</operator><name pos:start="607:24" pos:end="607:26">dsp</name></name> <operator pos:start="607:28" pos:end="607:28">=</operator> <name pos:start="607:30" pos:end="607:36"><name pos:start="607:30" pos:end="607:30">s</name><operator pos:start="607:31" pos:end="607:32">-&gt;</operator><name pos:start="607:33" pos:end="607:36">temp</name></name></expr>;</expr_stmt>

                    <break pos:start="609:21" pos:end="609:26">break;</break>

                <case pos:start="611:17" pos:end="611:23">case <expr pos:start="611:22" pos:end="611:22"><literal type="number" pos:start="611:22" pos:end="611:22">3</literal></expr>:</case> <comment type="block" pos:start="611:25" pos:end="611:39">/* Interrupt */</comment>

                    <expr_stmt pos:start="613:21" pos:end="613:59"><expr pos:start="613:21" pos:end="613:58"><call pos:start="613:21" pos:end="613:58"><name pos:start="613:21" pos:end="613:27">DPRINTF</name><argument_list pos:start="613:28" pos:end="613:58">(<argument pos:start="613:29" pos:end="613:48"><expr pos:start="613:29" pos:end="613:48"><literal type="string" pos:start="613:29" pos:end="613:48">"Interrupt 0x%08x\n"</literal></expr></argument>, <argument pos:start="613:51" pos:end="613:57"><expr pos:start="613:51" pos:end="613:57"><name pos:start="613:51" pos:end="613:57"><name pos:start="613:51" pos:end="613:51">s</name><operator pos:start="613:52" pos:end="613:53">-&gt;</operator><name pos:start="613:54" pos:end="613:57">dsps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="615:21" pos:end="625:21"><if pos:start="615:21" pos:end="621:21">if <condition pos:start="615:24" pos:end="615:48">(<expr pos:start="615:25" pos:end="615:47"><operator pos:start="615:25" pos:end="615:25">(</operator><name pos:start="615:26" pos:end="615:29">insn</name> <operator pos:start="615:31" pos:end="615:31">&amp;</operator> <operator pos:start="615:33" pos:end="615:33">(</operator><literal type="number" pos:start="615:34" pos:end="615:34">1</literal> <operator pos:start="615:36" pos:end="615:37">&lt;&lt;</operator> <literal type="number" pos:start="615:39" pos:end="615:40">20</literal><operator pos:start="615:41" pos:end="615:41">)</operator><operator pos:start="615:42" pos:end="615:42">)</operator> <operator pos:start="615:44" pos:end="615:45">!=</operator> <literal type="number" pos:start="615:47" pos:end="615:47">0</literal></expr>)</condition> <block pos:start="615:50" pos:end="621:21">{<block_content pos:start="617:25" pos:end="619:42">

                        <expr_stmt pos:start="617:25" pos:end="617:53"><expr pos:start="617:25" pos:end="617:52"><name pos:start="617:25" pos:end="617:33"><name pos:start="617:25" pos:end="617:25">s</name><operator pos:start="617:26" pos:end="617:27">-&gt;</operator><name pos:start="617:28" pos:end="617:33">istat0</name></name> <operator pos:start="617:35" pos:end="617:36">|=</operator> <name pos:start="617:38" pos:end="617:52">LSI_ISTAT0_INTF</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="619:25" pos:end="619:42"><expr pos:start="619:25" pos:end="619:41"><call pos:start="619:25" pos:end="619:41"><name pos:start="619:25" pos:end="619:38">lsi_update_irq</name><argument_list pos:start="619:39" pos:end="619:41">(<argument pos:start="619:40" pos:end="619:40"><expr pos:start="619:40" pos:end="619:40"><name pos:start="619:40" pos:end="619:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="621:23" pos:end="625:21">else <block pos:start="621:28" pos:end="625:21">{<block_content pos:start="623:25" pos:end="623:67">

                        <expr_stmt pos:start="623:25" pos:end="623:67"><expr pos:start="623:25" pos:end="623:66"><call pos:start="623:25" pos:end="623:66"><name pos:start="623:25" pos:end="623:48">lsi_script_dma_interrupt</name><argument_list pos:start="623:49" pos:end="623:66">(<argument pos:start="623:50" pos:end="623:50"><expr pos:start="623:50" pos:end="623:50"><name pos:start="623:50" pos:end="623:50">s</name></expr></argument>, <argument pos:start="623:53" pos:end="623:65"><expr pos:start="623:53" pos:end="623:65"><name pos:start="623:53" pos:end="623:65">LSI_DSTAT_SIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="627:21" pos:end="627:26">break;</break>

                <default pos:start="629:17" pos:end="629:24">default:</default>

                    <expr_stmt pos:start="631:21" pos:end="631:58"><expr pos:start="631:21" pos:end="631:57"><call pos:start="631:21" pos:end="631:57"><name pos:start="631:21" pos:end="631:27">DPRINTF</name><argument_list pos:start="631:28" pos:end="631:57">(<argument pos:start="631:29" pos:end="631:56"><expr pos:start="631:29" pos:end="631:56"><literal type="string" pos:start="631:29" pos:end="631:56">"Illegal transfer control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="633:21" pos:end="633:63"><expr pos:start="633:21" pos:end="633:62"><call pos:start="633:21" pos:end="633:62"><name pos:start="633:21" pos:end="633:44">lsi_script_dma_interrupt</name><argument_list pos:start="633:45" pos:end="633:62">(<argument pos:start="633:46" pos:end="633:46"><expr pos:start="633:46" pos:end="633:46"><name pos:start="633:46" pos:end="633:46">s</name></expr></argument>, <argument pos:start="633:49" pos:end="633:61"><expr pos:start="633:49" pos:end="633:61"><name pos:start="633:49" pos:end="633:61">LSI_DSTAT_IID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="635:21" pos:end="635:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="639:15" pos:end="643:13">else <block pos:start="639:20" pos:end="643:13">{<block_content pos:start="641:17" pos:end="641:54">

                <expr_stmt pos:start="641:17" pos:end="641:54"><expr pos:start="641:17" pos:end="641:53"><call pos:start="641:17" pos:end="641:53"><name pos:start="641:17" pos:end="641:23">DPRINTF</name><argument_list pos:start="641:24" pos:end="641:53">(<argument pos:start="641:25" pos:end="641:52"><expr pos:start="641:25" pos:end="641:52"><literal type="string" pos:start="641:25" pos:end="641:52">"Control condition failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="647:9" pos:end="647:14">break;</break>



    <case pos:start="651:5" pos:end="651:11">case <expr pos:start="651:10" pos:end="651:10"><literal type="number" pos:start="651:10" pos:end="651:10">3</literal></expr>:</case>

        <if_stmt pos:start="653:9" pos:end="721:9"><if pos:start="653:9" pos:end="671:9">if <condition pos:start="653:12" pos:end="653:36">(<expr pos:start="653:13" pos:end="653:35"><operator pos:start="653:13" pos:end="653:13">(</operator><name pos:start="653:14" pos:end="653:17">insn</name> <operator pos:start="653:19" pos:end="653:19">&amp;</operator> <operator pos:start="653:21" pos:end="653:21">(</operator><literal type="number" pos:start="653:22" pos:end="653:22">1</literal> <operator pos:start="653:24" pos:end="653:25">&lt;&lt;</operator> <literal type="number" pos:start="653:27" pos:end="653:28">29</literal><operator pos:start="653:29" pos:end="653:29">)</operator><operator pos:start="653:30" pos:end="653:30">)</operator> <operator pos:start="653:32" pos:end="653:33">==</operator> <literal type="number" pos:start="653:35" pos:end="653:35">0</literal></expr>)</condition> <block pos:start="653:38" pos:end="671:9">{<block_content pos:start="657:13" pos:end="669:55">

            <comment type="block" pos:start="655:13" pos:end="655:31">/* Memory move.  */</comment>

            <decl_stmt pos:start="657:13" pos:end="657:26"><decl pos:start="657:13" pos:end="657:25"><type pos:start="657:13" pos:end="657:20"><name pos:start="657:13" pos:end="657:20">uint32_t</name></type> <name pos:start="657:22" pos:end="657:25">dest</name></decl>;</decl_stmt>

            <comment type="block" pos:start="659:13" pos:end="663:44">/* ??? The docs imply the destination address is loaded into

               the TEMP register.  However the Linux drivers rely on

               the value being presrved.  */</comment>

            <expr_stmt pos:start="665:13" pos:end="665:41"><expr pos:start="665:13" pos:end="665:40"><name pos:start="665:13" pos:end="665:16">dest</name> <operator pos:start="665:18" pos:end="665:18">=</operator> <call pos:start="665:20" pos:end="665:40"><name pos:start="665:20" pos:end="665:29">read_dword</name><argument_list pos:start="665:30" pos:end="665:40">(<argument pos:start="665:31" pos:end="665:31"><expr pos:start="665:31" pos:end="665:31"><name pos:start="665:31" pos:end="665:31">s</name></expr></argument>, <argument pos:start="665:34" pos:end="665:39"><expr pos:start="665:34" pos:end="665:39"><name pos:start="665:34" pos:end="665:39"><name pos:start="665:34" pos:end="665:34">s</name><operator pos:start="665:35" pos:end="665:36">-&gt;</operator><name pos:start="665:37" pos:end="665:39">dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="667:13" pos:end="667:24"><expr pos:start="667:13" pos:end="667:23"><name pos:start="667:13" pos:end="667:18"><name pos:start="667:13" pos:end="667:13">s</name><operator pos:start="667:14" pos:end="667:15">-&gt;</operator><name pos:start="667:16" pos:end="667:18">dsp</name></name> <operator pos:start="667:20" pos:end="667:21">+=</operator> <literal type="number" pos:start="667:23" pos:end="667:23">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="669:13" pos:end="669:55"><expr pos:start="669:13" pos:end="669:54"><call pos:start="669:13" pos:end="669:54"><name pos:start="669:13" pos:end="669:22">lsi_memcpy</name><argument_list pos:start="669:23" pos:end="669:54">(<argument pos:start="669:24" pos:end="669:24"><expr pos:start="669:24" pos:end="669:24"><name pos:start="669:24" pos:end="669:24">s</name></expr></argument>, <argument pos:start="669:27" pos:end="669:30"><expr pos:start="669:27" pos:end="669:30"><name pos:start="669:27" pos:end="669:30">dest</name></expr></argument>, <argument pos:start="669:33" pos:end="669:36"><expr pos:start="669:33" pos:end="669:36"><name pos:start="669:33" pos:end="669:36">addr</name></expr></argument>, <argument pos:start="669:39" pos:end="669:53"><expr pos:start="669:39" pos:end="669:53"><name pos:start="669:39" pos:end="669:42">insn</name> <operator pos:start="669:44" pos:end="669:44">&amp;</operator> <literal type="number" pos:start="669:46" pos:end="669:53">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="671:11" pos:end="721:9">else <block pos:start="671:16" pos:end="721:9">{<block_content pos:start="673:13" pos:end="719:13">

            <decl_stmt pos:start="673:13" pos:end="673:28"><decl pos:start="673:13" pos:end="673:27"><type pos:start="673:13" pos:end="673:19"><name pos:start="673:13" pos:end="673:19">uint8_t</name></type> <name pos:start="673:21" pos:end="673:27"><name pos:start="673:21" pos:end="673:24">data</name><index pos:start="673:25" pos:end="673:27">[<expr pos:start="673:26" pos:end="673:26"><literal type="number" pos:start="673:26" pos:end="673:26">7</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="675:13" pos:end="675:20"><decl pos:start="675:13" pos:end="675:19"><type pos:start="675:13" pos:end="675:15"><name pos:start="675:13" pos:end="675:15">int</name></type> <name pos:start="675:17" pos:end="675:19">reg</name></decl>;</decl_stmt>

            <decl_stmt pos:start="677:13" pos:end="677:18"><decl pos:start="677:13" pos:end="677:17"><type pos:start="677:13" pos:end="677:15"><name pos:start="677:13" pos:end="677:15">int</name></type> <name pos:start="677:17" pos:end="677:17">n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="679:13" pos:end="679:18"><decl pos:start="679:13" pos:end="679:17"><type pos:start="679:13" pos:end="679:15"><name pos:start="679:13" pos:end="679:15">int</name></type> <name pos:start="679:17" pos:end="679:17">i</name></decl>;</decl_stmt>



            <if_stmt pos:start="683:13" pos:end="687:13"><if pos:start="683:13" pos:end="687:13">if <condition pos:start="683:16" pos:end="683:33">(<expr pos:start="683:17" pos:end="683:32"><name pos:start="683:17" pos:end="683:20">insn</name> <operator pos:start="683:22" pos:end="683:22">&amp;</operator> <operator pos:start="683:24" pos:end="683:24">(</operator><literal type="number" pos:start="683:25" pos:end="683:25">1</literal> <operator pos:start="683:27" pos:end="683:28">&lt;&lt;</operator> <literal type="number" pos:start="683:30" pos:end="683:31">28</literal><operator pos:start="683:32" pos:end="683:32">)</operator></expr>)</condition> <block pos:start="683:35" pos:end="687:13">{<block_content pos:start="685:17" pos:end="685:44">

                <expr_stmt pos:start="685:17" pos:end="685:44"><expr pos:start="685:17" pos:end="685:43"><name pos:start="685:17" pos:end="685:20">addr</name> <operator pos:start="685:22" pos:end="685:22">=</operator> <name pos:start="685:24" pos:end="685:29"><name pos:start="685:24" pos:end="685:24">s</name><operator pos:start="685:25" pos:end="685:26">-&gt;</operator><name pos:start="685:27" pos:end="685:29">dsa</name></name> <operator pos:start="685:31" pos:end="685:31">+</operator> <call pos:start="685:33" pos:end="685:43"><name pos:start="685:33" pos:end="685:37">sxt24</name><argument_list pos:start="685:38" pos:end="685:43">(<argument pos:start="685:39" pos:end="685:42"><expr pos:start="685:39" pos:end="685:42"><name pos:start="685:39" pos:end="685:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:27"><expr pos:start="689:13" pos:end="689:26"><name pos:start="689:13" pos:end="689:13">n</name> <operator pos:start="689:15" pos:end="689:15">=</operator> <operator pos:start="689:17" pos:end="689:17">(</operator><name pos:start="689:18" pos:end="689:21">insn</name> <operator pos:start="689:23" pos:end="689:23">&amp;</operator> <literal type="number" pos:start="689:25" pos:end="689:25">7</literal><operator pos:start="689:26" pos:end="689:26">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:38"><expr pos:start="691:13" pos:end="691:37"><name pos:start="691:13" pos:end="691:15">reg</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <operator pos:start="691:19" pos:end="691:19">(</operator><name pos:start="691:20" pos:end="691:23">insn</name> <operator pos:start="691:25" pos:end="691:26">&gt;&gt;</operator> <literal type="number" pos:start="691:28" pos:end="691:29">16</literal><operator pos:start="691:30" pos:end="691:30">)</operator> <operator pos:start="691:32" pos:end="691:32">&amp;</operator> <literal type="number" pos:start="691:34" pos:end="691:37">0xff</literal></expr>;</expr_stmt>

            <if_stmt pos:start="693:13" pos:end="719:13"><if pos:start="693:13" pos:end="707:13">if <condition pos:start="693:16" pos:end="693:33">(<expr pos:start="693:17" pos:end="693:32"><name pos:start="693:17" pos:end="693:20">insn</name> <operator pos:start="693:22" pos:end="693:22">&amp;</operator> <operator pos:start="693:24" pos:end="693:24">(</operator><literal type="number" pos:start="693:25" pos:end="693:25">1</literal> <operator pos:start="693:27" pos:end="693:28">&lt;&lt;</operator> <literal type="number" pos:start="693:30" pos:end="693:31">24</literal><operator pos:start="693:32" pos:end="693:32">)</operator></expr>)</condition> <block pos:start="693:35" pos:end="707:13">{<block_content pos:start="695:17" pos:end="705:17">

                <expr_stmt pos:start="695:17" pos:end="695:56"><expr pos:start="695:17" pos:end="695:55"><call pos:start="695:17" pos:end="695:55"><name pos:start="695:17" pos:end="695:40">cpu_physical_memory_read</name><argument_list pos:start="695:41" pos:end="695:55">(<argument pos:start="695:42" pos:end="695:45"><expr pos:start="695:42" pos:end="695:45"><name pos:start="695:42" pos:end="695:45">addr</name></expr></argument>, <argument pos:start="695:48" pos:end="695:51"><expr pos:start="695:48" pos:end="695:51"><name pos:start="695:48" pos:end="695:51">data</name></expr></argument>, <argument pos:start="695:54" pos:end="695:54"><expr pos:start="695:54" pos:end="695:54"><name pos:start="695:54" pos:end="695:54">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="697:17" pos:end="699:44"><expr pos:start="697:17" pos:end="699:43"><call pos:start="697:17" pos:end="699:43"><name pos:start="697:17" pos:end="697:23">DPRINTF</name><argument_list pos:start="697:24" pos:end="699:43">(<argument pos:start="697:25" pos:end="697:68"><expr pos:start="697:25" pos:end="697:68"><literal type="string" pos:start="697:25" pos:end="697:68">"Load reg 0x%x size %d addr 0x%08x = %08x\n"</literal></expr></argument>, <argument pos:start="697:71" pos:end="697:73"><expr pos:start="697:71" pos:end="697:73"><name pos:start="697:71" pos:end="697:73">reg</name></expr></argument>, <argument pos:start="697:76" pos:end="697:76"><expr pos:start="697:76" pos:end="697:76"><name pos:start="697:76" pos:end="697:76">n</name></expr></argument>,

                        <argument pos:start="699:25" pos:end="699:28"><expr pos:start="699:25" pos:end="699:28"><name pos:start="699:25" pos:end="699:28">addr</name></expr></argument>, <argument pos:start="699:31" pos:end="699:42"><expr pos:start="699:31" pos:end="699:42"><operator pos:start="699:31" pos:end="699:31">*</operator><operator pos:start="699:32" pos:end="699:32">(</operator><name pos:start="699:33" pos:end="699:35">int</name> <operator pos:start="699:37" pos:end="699:37">*</operator><operator pos:start="699:38" pos:end="699:38">)</operator><name pos:start="699:39" pos:end="699:42">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="701:17" pos:end="705:17">for <control pos:start="701:21" pos:end="701:39">(<init pos:start="701:22" pos:end="701:27"><expr pos:start="701:22" pos:end="701:26"><name pos:start="701:22" pos:end="701:22">i</name> <operator pos:start="701:24" pos:end="701:24">=</operator> <literal type="number" pos:start="701:26" pos:end="701:26">0</literal></expr>;</init> <condition pos:start="701:29" pos:end="701:34"><expr pos:start="701:29" pos:end="701:33"><name pos:start="701:29" pos:end="701:29">i</name> <operator pos:start="701:31" pos:end="701:31">&lt;</operator> <name pos:start="701:33" pos:end="701:33">n</name></expr>;</condition> <incr pos:start="701:36" pos:end="701:38"><expr pos:start="701:36" pos:end="701:38"><name pos:start="701:36" pos:end="701:36">i</name><operator pos:start="701:37" pos:end="701:38">++</operator></expr></incr>)</control> <block pos:start="701:41" pos:end="705:17">{<block_content pos:start="703:21" pos:end="703:56">

                    <expr_stmt pos:start="703:21" pos:end="703:56"><expr pos:start="703:21" pos:end="703:55"><call pos:start="703:21" pos:end="703:55"><name pos:start="703:21" pos:end="703:34">lsi_reg_writeb</name><argument_list pos:start="703:35" pos:end="703:55">(<argument pos:start="703:36" pos:end="703:36"><expr pos:start="703:36" pos:end="703:36"><name pos:start="703:36" pos:end="703:36">s</name></expr></argument>, <argument pos:start="703:39" pos:end="703:45"><expr pos:start="703:39" pos:end="703:45"><name pos:start="703:39" pos:end="703:41">reg</name> <operator pos:start="703:43" pos:end="703:43">+</operator> <name pos:start="703:45" pos:end="703:45">i</name></expr></argument>, <argument pos:start="703:48" pos:end="703:54"><expr pos:start="703:48" pos:end="703:54"><name pos:start="703:48" pos:end="703:54"><name pos:start="703:48" pos:end="703:51">data</name><index pos:start="703:52" pos:end="703:54">[<expr pos:start="703:53" pos:end="703:53"><name pos:start="703:53" pos:end="703:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="707:15" pos:end="719:13">else <block pos:start="707:20" pos:end="719:13">{<block_content pos:start="709:17" pos:end="717:57">

                <expr_stmt pos:start="709:17" pos:end="709:78"><expr pos:start="709:17" pos:end="709:77"><call pos:start="709:17" pos:end="709:77"><name pos:start="709:17" pos:end="709:23">DPRINTF</name><argument_list pos:start="709:24" pos:end="709:77">(<argument pos:start="709:25" pos:end="709:62"><expr pos:start="709:25" pos:end="709:62"><literal type="string" pos:start="709:25" pos:end="709:62">"Store reg 0x%x size %d addr 0x%08x\n"</literal></expr></argument>, <argument pos:start="709:65" pos:end="709:67"><expr pos:start="709:65" pos:end="709:67"><name pos:start="709:65" pos:end="709:67">reg</name></expr></argument>, <argument pos:start="709:70" pos:end="709:70"><expr pos:start="709:70" pos:end="709:70"><name pos:start="709:70" pos:end="709:70">n</name></expr></argument>, <argument pos:start="709:73" pos:end="709:76"><expr pos:start="709:73" pos:end="709:76"><name pos:start="709:73" pos:end="709:76">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="711:17" pos:end="715:17">for <control pos:start="711:21" pos:end="711:39">(<init pos:start="711:22" pos:end="711:27"><expr pos:start="711:22" pos:end="711:26"><name pos:start="711:22" pos:end="711:22">i</name> <operator pos:start="711:24" pos:end="711:24">=</operator> <literal type="number" pos:start="711:26" pos:end="711:26">0</literal></expr>;</init> <condition pos:start="711:29" pos:end="711:34"><expr pos:start="711:29" pos:end="711:33"><name pos:start="711:29" pos:end="711:29">i</name> <operator pos:start="711:31" pos:end="711:31">&lt;</operator> <name pos:start="711:33" pos:end="711:33">n</name></expr>;</condition> <incr pos:start="711:36" pos:end="711:38"><expr pos:start="711:36" pos:end="711:38"><name pos:start="711:36" pos:end="711:36">i</name><operator pos:start="711:37" pos:end="711:38">++</operator></expr></incr>)</control> <block pos:start="711:41" pos:end="715:17">{<block_content pos:start="713:21" pos:end="713:56">

                    <expr_stmt pos:start="713:21" pos:end="713:56"><expr pos:start="713:21" pos:end="713:55"><name pos:start="713:21" pos:end="713:27"><name pos:start="713:21" pos:end="713:24">data</name><index pos:start="713:25" pos:end="713:27">[<expr pos:start="713:26" pos:end="713:26"><name pos:start="713:26" pos:end="713:26">i</name></expr>]</index></name> <operator pos:start="713:29" pos:end="713:29">=</operator> <call pos:start="713:31" pos:end="713:55"><name pos:start="713:31" pos:end="713:43">lsi_reg_readb</name><argument_list pos:start="713:44" pos:end="713:55">(<argument pos:start="713:45" pos:end="713:45"><expr pos:start="713:45" pos:end="713:45"><name pos:start="713:45" pos:end="713:45">s</name></expr></argument>, <argument pos:start="713:48" pos:end="713:54"><expr pos:start="713:48" pos:end="713:54"><name pos:start="713:48" pos:end="713:50">reg</name> <operator pos:start="713:52" pos:end="713:52">+</operator> <name pos:start="713:54" pos:end="713:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="717:17" pos:end="717:57"><expr pos:start="717:17" pos:end="717:56"><call pos:start="717:17" pos:end="717:56"><name pos:start="717:17" pos:end="717:41">cpu_physical_memory_write</name><argument_list pos:start="717:42" pos:end="717:56">(<argument pos:start="717:43" pos:end="717:46"><expr pos:start="717:43" pos:end="717:46"><name pos:start="717:43" pos:end="717:46">addr</name></expr></argument>, <argument pos:start="717:49" pos:end="717:52"><expr pos:start="717:49" pos:end="717:52"><name pos:start="717:49" pos:end="717:52">data</name></expr></argument>, <argument pos:start="717:55" pos:end="717:55"><expr pos:start="717:55" pos:end="717:55"><name pos:start="717:55" pos:end="717:55">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></switch>

    <comment type="block" pos:start="725:5" pos:end="725:44">/* ??? Need to avoid infinite loops.  */</comment>

    <if_stmt pos:start="727:5" pos:end="739:5"><if pos:start="727:5" pos:end="739:5">if <condition pos:start="727:8" pos:end="727:51">(<expr pos:start="727:9" pos:end="727:50"><name pos:start="727:9" pos:end="727:17"><name pos:start="727:9" pos:end="727:9">s</name><operator pos:start="727:10" pos:end="727:11">-&gt;</operator><name pos:start="727:12" pos:end="727:17">istat1</name></name> <operator pos:start="727:19" pos:end="727:19">&amp;</operator> <name pos:start="727:21" pos:end="727:35">LSI_ISTAT1_SRUN</name> <operator pos:start="727:37" pos:end="727:38">&amp;&amp;</operator> <operator pos:start="727:40" pos:end="727:40">!</operator><name pos:start="727:41" pos:end="727:50"><name pos:start="727:41" pos:end="727:41">s</name><operator pos:start="727:42" pos:end="727:43">-&gt;</operator><name pos:start="727:44" pos:end="727:50">waiting</name></name></expr>)</condition> <block pos:start="727:53" pos:end="739:5">{<block_content pos:start="729:9" pos:end="737:9">

        <if_stmt pos:start="729:9" pos:end="737:9"><if pos:start="729:9" pos:end="733:9">if <condition pos:start="729:12" pos:end="729:37">(<expr pos:start="729:13" pos:end="729:36"><name pos:start="729:13" pos:end="729:20"><name pos:start="729:13" pos:end="729:13">s</name><operator pos:start="729:14" pos:end="729:15">-&gt;</operator><name pos:start="729:16" pos:end="729:20">dcntl</name></name> <operator pos:start="729:22" pos:end="729:22">&amp;</operator> <name pos:start="729:24" pos:end="729:36">LSI_DCNTL_SSM</name></expr>)</condition> <block pos:start="729:39" pos:end="733:9">{<block_content pos:start="731:13" pos:end="731:55">

            <expr_stmt pos:start="731:13" pos:end="731:55"><expr pos:start="731:13" pos:end="731:54"><call pos:start="731:13" pos:end="731:54"><name pos:start="731:13" pos:end="731:36">lsi_script_dma_interrupt</name><argument_list pos:start="731:37" pos:end="731:54">(<argument pos:start="731:38" pos:end="731:38"><expr pos:start="731:38" pos:end="731:38"><name pos:start="731:38" pos:end="731:38">s</name></expr></argument>, <argument pos:start="731:41" pos:end="731:53"><expr pos:start="731:41" pos:end="731:53"><name pos:start="731:41" pos:end="731:53">LSI_DSTAT_SSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="733:11" pos:end="737:9">else <block pos:start="733:16" pos:end="737:9">{<block_content pos:start="735:13" pos:end="735:23">

            <goto pos:start="735:13" pos:end="735:23">goto <name pos:start="735:18" pos:end="735:22">again</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="741:5" pos:end="741:43"><expr pos:start="741:5" pos:end="741:42"><call pos:start="741:5" pos:end="741:42"><name pos:start="741:5" pos:end="741:11">DPRINTF</name><argument_list pos:start="741:12" pos:end="741:42">(<argument pos:start="741:13" pos:end="741:41"><expr pos:start="741:13" pos:end="741:41"><literal type="string" pos:start="741:13" pos:end="741:41">"SCRIPTS execution stopped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
