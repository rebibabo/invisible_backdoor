<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10973.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">spapr_lmb_release</name><parameter_list pos:start="1:23" pos:end="1:40">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:34">DeviceState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:33">

    <decl_stmt pos:start="5:5" pos:end="5:76"><decl pos:start="5:5" pos:end="5:75"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">sPAPRMachineState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:28">spapr</name> <init pos:start="5:30" pos:end="5:75">= <expr pos:start="5:32" pos:end="5:75"><call pos:start="5:32" pos:end="5:75"><name pos:start="5:32" pos:end="5:44">SPAPR_MACHINE</name><argument_list pos:start="5:45" pos:end="5:75">(<argument pos:start="5:46" pos:end="5:74"><expr pos:start="5:46" pos:end="5:74"><call pos:start="5:46" pos:end="5:74"><name pos:start="5:46" pos:end="5:69">qdev_get_hotplug_handler</name><argument_list pos:start="5:70" pos:end="5:74">(<argument pos:start="5:71" pos:end="5:73"><expr pos:start="5:71" pos:end="5:73"><name pos:start="5:71" pos:end="5:73">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCDIMMDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">dimm</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><call pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:32">PC_DIMM</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">PCDIMMDeviceClass</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:26">ddc</name> <init pos:start="9:28" pos:end="9:52">= <expr pos:start="9:30" pos:end="9:52"><call pos:start="9:30" pos:end="9:52"><name pos:start="9:30" pos:end="9:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="9:47" pos:end="9:52">(<argument pos:start="9:48" pos:end="9:51"><expr pos:start="9:48" pos:end="9:51"><name pos:start="9:48" pos:end="9:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">mr</name> <init pos:start="11:22" pos:end="11:51">= <expr pos:start="11:24" pos:end="11:51"><call pos:start="11:24" pos:end="11:51"><name pos:start="11:24" pos:end="11:45"><name pos:start="11:24" pos:end="11:26">ddc</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:45">get_memory_region</name></name><argument_list pos:start="11:46" pos:end="11:51">(<argument pos:start="11:47" pos:end="11:50"><expr pos:start="11:47" pos:end="11:50"><name pos:start="11:47" pos:end="11:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:78"><decl pos:start="13:5" pos:end="13:77"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">sPAPRDIMMState</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:22">ds</name> <init pos:start="13:24" pos:end="13:77">= <expr pos:start="13:26" pos:end="13:77"><call pos:start="13:26" pos:end="13:77"><name pos:start="13:26" pos:end="13:56">spapr_pending_dimm_unplugs_find</name><argument_list pos:start="13:57" pos:end="13:77">(<argument pos:start="13:58" pos:end="13:62"><expr pos:start="13:58" pos:end="13:62"><name pos:start="13:58" pos:end="13:62">spapr</name></expr></argument>, <argument pos:start="13:65" pos:end="13:76"><expr pos:start="13:65" pos:end="13:76"><call pos:start="13:65" pos:end="13:76"><name pos:start="13:65" pos:end="13:71">PC_DIMM</name><argument_list pos:start="13:72" pos:end="13:76">(<argument pos:start="13:73" pos:end="13:75"><expr pos:start="13:73" pos:end="13:75"><name pos:start="13:73" pos:end="13:75">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="19:61">/* This information will get lost if a migration occurs

     * during the unplug process. In this case recover it. */</comment>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:10">ds</name> <operator pos:start="21:12" pos:end="21:13">==</operator> <name pos:start="21:15" pos:end="21:18">NULL</name></expr>)</condition> <block pos:start="21:21" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:30">

        <expr_stmt pos:start="23:9" pos:end="23:67"><expr pos:start="23:9" pos:end="23:66"><name pos:start="23:9" pos:end="23:10">ds</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:66"><name pos:start="23:14" pos:end="23:45">spapr_recover_pending_dimm_state</name><argument_list pos:start="23:46" pos:end="23:66">(<argument pos:start="23:47" pos:end="23:51"><expr pos:start="23:47" pos:end="23:51"><name pos:start="23:47" pos:end="23:51">spapr</name></expr></argument>, <argument pos:start="23:54" pos:end="23:65"><expr pos:start="23:54" pos:end="23:65"><call pos:start="23:54" pos:end="23:65"><name pos:start="23:54" pos:end="23:60">PC_DIMM</name><argument_list pos:start="23:61" pos:end="23:65">(<argument pos:start="23:62" pos:end="23:64"><expr pos:start="23:62" pos:end="23:64"><name pos:start="23:62" pos:end="23:64">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:21"><expr pos:start="25:9" pos:end="25:20"><call pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:16">g_assert</name><argument_list pos:start="25:17" pos:end="25:20">(<argument pos:start="25:18" pos:end="25:19"><expr pos:start="25:18" pos:end="25:19"><name pos:start="25:18" pos:end="25:19">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="27:9" pos:end="27:75">/* The DRC being examined by the caller at least must be counted */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:16">g_assert</name><argument_list pos:start="29:17" pos:end="29:29">(<argument pos:start="29:18" pos:end="29:28"><expr pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:19">ds</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:28">nr_lmbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><operator pos:start="35:9" pos:end="35:10">--</operator><name pos:start="35:11" pos:end="35:21"><name pos:start="35:11" pos:end="35:12">ds</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:21">nr_lmbs</name></name></expr>)</condition> <block pos:start="35:24" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:49"><expr pos:start="43:5" pos:end="43:48"><call pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:37">spapr_pending_dimm_unplugs_remove</name><argument_list pos:start="43:38" pos:end="43:48">(<argument pos:start="43:39" pos:end="43:43"><expr pos:start="43:39" pos:end="43:43"><name pos:start="43:39" pos:end="43:43">spapr</name></expr></argument>, <argument pos:start="43:46" pos:end="43:47"><expr pos:start="43:46" pos:end="43:47"><name pos:start="43:46" pos:end="43:47">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="53:7">/*

     * Now that all the LMBs have been removed by the guest, call the

     * pc-dimm unplug handler to cleanup up the pc-dimm device.

     */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:59"><expr pos:start="55:5" pos:end="55:58"><call pos:start="55:5" pos:end="55:58"><name pos:start="55:5" pos:end="55:25">pc_dimm_memory_unplug</name><argument_list pos:start="55:26" pos:end="55:58">(<argument pos:start="55:27" pos:end="55:29"><expr pos:start="55:27" pos:end="55:29"><name pos:start="55:27" pos:end="55:29">dev</name></expr></argument>, <argument pos:start="55:32" pos:end="55:53"><expr pos:start="55:32" pos:end="55:53"><operator pos:start="55:32" pos:end="55:32">&amp;</operator><name pos:start="55:33" pos:end="55:53"><name pos:start="55:33" pos:end="55:37">spapr</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:53">hotplug_memory</name></name></expr></argument>, <argument pos:start="55:56" pos:end="55:57"><expr pos:start="55:56" pos:end="55:57"><name pos:start="55:56" pos:end="55:57">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:19">object_unparent</name><argument_list pos:start="57:20" pos:end="57:32">(<argument pos:start="57:21" pos:end="57:31"><expr pos:start="57:21" pos:end="57:31"><call pos:start="57:21" pos:end="57:31"><name pos:start="57:21" pos:end="57:26">OBJECT</name><argument_list pos:start="57:27" pos:end="57:31">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">dev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
