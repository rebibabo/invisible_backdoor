<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1695.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">udp_write</name><parameter_list pos:start="1:21" pos:end="1:65">(<parameter pos:start="1:22" pos:end="1:34"><decl pos:start="1:22" pos:end="1:34"><type pos:start="1:22" pos:end="1:34"><name pos:start="1:22" pos:end="1:31">URLContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">h</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:54"><decl pos:start="1:37" pos:end="1:54"><type pos:start="1:37" pos:end="1:54"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:49">uint8_t</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">buf</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:64"><decl pos:start="1:57" pos:end="1:64"><type pos:start="1:57" pos:end="1:64"><name pos:start="1:57" pos:end="1:59">int</name></type> <name pos:start="1:61" pos:end="1:64">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:16">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">UDPContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="39:5">for<control pos:start="11:8" pos:end="11:11">(<init pos:start="11:9" pos:end="11:9">;</init><condition pos:start="11:10" pos:end="11:10">;</condition><incr/>)</control> <block pos:start="11:13" pos:end="39:5">{<block_content pos:start="13:9" pos:end="37:9">

        <if_stmt pos:start="13:9" pos:end="23:48"><if pos:start="13:9" pos:end="21:9">if <condition pos:start="13:12" pos:end="13:29">(<expr pos:start="13:13" pos:end="13:28"><operator pos:start="13:13" pos:end="13:13">!</operator><name pos:start="13:14" pos:end="13:28"><name pos:start="13:14" pos:end="13:14">s</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:28">is_connected</name></name></expr>)</condition> <block pos:start="13:31" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:44">

            <expr_stmt pos:start="15:13" pos:end="19:44"><expr pos:start="15:13" pos:end="19:43"><name pos:start="15:13" pos:end="15:15">ret</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="19:43"><name pos:start="15:19" pos:end="15:24">sendto</name> <argument_list pos:start="15:26" pos:end="19:43">(<argument pos:start="15:27" pos:end="15:35"><expr pos:start="15:27" pos:end="15:35"><name pos:start="15:27" pos:end="15:35"><name pos:start="15:27" pos:end="15:27">s</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:35">udp_fd</name></name></expr></argument>, <argument pos:start="15:38" pos:end="15:40"><expr pos:start="15:38" pos:end="15:40"><name pos:start="15:38" pos:end="15:40">buf</name></expr></argument>, <argument pos:start="15:43" pos:end="15:46"><expr pos:start="15:43" pos:end="15:46"><name pos:start="15:43" pos:end="15:46">size</name></expr></argument>, <argument pos:start="15:49" pos:end="15:49"><expr pos:start="15:49" pos:end="15:49"><literal type="number" pos:start="15:49" pos:end="15:49">0</literal></expr></argument>,

                          <argument pos:start="17:27" pos:end="17:59"><expr pos:start="17:27" pos:end="17:59"><operator pos:start="17:27" pos:end="17:27">(</operator>struct <name pos:start="17:35" pos:end="17:42">sockaddr</name> <operator pos:start="17:44" pos:end="17:44">*</operator><operator pos:start="17:45" pos:end="17:45">)</operator> <operator pos:start="17:47" pos:end="17:47">&amp;</operator><name pos:start="17:48" pos:end="17:59"><name pos:start="17:48" pos:end="17:48">s</name><operator pos:start="17:49" pos:end="17:50">-&gt;</operator><name pos:start="17:51" pos:end="17:59">dest_addr</name></name></expr></argument>,

                          <argument pos:start="19:27" pos:end="19:42"><expr pos:start="19:27" pos:end="19:42"><name pos:start="19:27" pos:end="19:42"><name pos:start="19:27" pos:end="19:27">s</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:42">dest_addr_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="21:11" pos:end="23:48">else<block type="pseudo" pos:start="23:13" pos:end="23:48"><block_content pos:start="23:13" pos:end="23:48">

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:47"><name pos:start="23:19" pos:end="23:22">send</name><argument_list pos:start="23:23" pos:end="23:47">(<argument pos:start="23:24" pos:end="23:32"><expr pos:start="23:24" pos:end="23:32"><name pos:start="23:24" pos:end="23:32"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:32">udp_fd</name></name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">buf</name></expr></argument>, <argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">size</name></expr></argument>, <argument pos:start="23:46" pos:end="23:46"><expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="25:9" pos:end="37:9"><if pos:start="25:9" pos:end="33:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition> <block pos:start="25:22" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:37">

            <if_stmt pos:start="27:13" pos:end="31:37"><if pos:start="27:13" pos:end="31:37">if <condition pos:start="27:16" pos:end="29:49">(<expr pos:start="27:17" pos:end="29:48"><call pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:27">ff_neterrno</name><argument_list pos:start="27:28" pos:end="27:29">()</argument_list></call> <operator pos:start="27:31" pos:end="27:32">!=</operator> <call pos:start="27:34" pos:end="27:47"><name pos:start="27:34" pos:end="27:40">AVERROR</name><argument_list pos:start="27:41" pos:end="27:47">(<argument pos:start="27:42" pos:end="27:46"><expr pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:46">EINTR</name></expr></argument>)</argument_list></call> <operator pos:start="27:49" pos:end="27:50">&amp;&amp;</operator>

                <call pos:start="29:17" pos:end="29:29"><name pos:start="29:17" pos:end="29:27">ff_neterrno</name><argument_list pos:start="29:28" pos:end="29:29">()</argument_list></call> <operator pos:start="29:31" pos:end="29:32">!=</operator> <call pos:start="29:34" pos:end="29:48"><name pos:start="29:34" pos:end="29:40">AVERROR</name><argument_list pos:start="29:41" pos:end="29:48">(<argument pos:start="29:42" pos:end="29:47"><expr pos:start="29:42" pos:end="29:47"><name pos:start="29:42" pos:end="29:47">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="31:17" pos:end="31:37"><block_content pos:start="31:17" pos:end="31:37">

                <return pos:start="31:17" pos:end="31:37">return <expr pos:start="31:24" pos:end="31:36"><call pos:start="31:24" pos:end="31:36"><name pos:start="31:24" pos:end="31:34">ff_neterrno</name><argument_list pos:start="31:35" pos:end="31:36">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="37:9">else <block pos:start="33:16" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <return pos:start="41:5" pos:end="41:16">return <expr pos:start="41:12" pos:end="41:15"><name pos:start="41:12" pos:end="41:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
