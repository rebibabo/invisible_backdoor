<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20297.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">decode_group3_2d_line</name><parameter_list pos:start="1:33" pos:end="3:98">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:73"><decl pos:start="1:57" pos:end="1:73"><type pos:start="1:57" pos:end="1:73"><name pos:start="1:57" pos:end="1:69">GetBitContext</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:73">gb</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:41">unsigned</name> <name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:51">width</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:62"><decl pos:start="3:54" pos:end="3:62"><type pos:start="3:54" pos:end="3:62"><name pos:start="3:54" pos:end="3:56">int</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">runs</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:81"><decl pos:start="3:65" pos:end="3:81"><type pos:start="3:65" pos:end="3:81"><specifier pos:start="3:65" pos:end="3:69">const</specifier> <name pos:start="3:71" pos:end="3:73">int</name> <modifier pos:start="3:75" pos:end="3:75">*</modifier></type><name pos:start="3:76" pos:end="3:81">runend</name></decl></parameter>, <parameter pos:start="3:84" pos:end="3:97"><decl pos:start="3:84" pos:end="3:97"><type pos:start="3:84" pos:end="3:97"><specifier pos:start="3:84" pos:end="3:88">const</specifier> <name pos:start="3:90" pos:end="3:92">int</name> <modifier pos:start="3:94" pos:end="3:94">*</modifier></type><name pos:start="3:95" pos:end="3:97">ref</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">mode</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>, <decl pos:start="7:19" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:27">saved_run</name> <init pos:start="7:29" pos:end="7:31">= <expr pos:start="7:31" pos:end="7:31"><literal type="number" pos:start="7:31" pos:end="7:31">0</literal></expr></init></decl>, <decl pos:start="7:34" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:34">t</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">run_off</name> <init pos:start="9:17" pos:end="9:24">= <expr pos:start="9:19" pos:end="9:24"><operator pos:start="9:19" pos:end="9:19">*</operator><name pos:start="9:20" pos:end="9:22">ref</name><operator pos:start="9:23" pos:end="9:24">++</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:21">offs</name><init pos:start="11:22" pos:end="11:23">=<expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>, <decl pos:start="11:26" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:26" pos:end="11:28">run</name><init pos:start="11:29" pos:end="11:31">= <expr pos:start="11:31" pos:end="11:31"><literal type="number" pos:start="11:31" pos:end="11:31">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:13"><expr pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">runend</name><operator pos:start="15:11" pos:end="15:12">--</operator></expr>;</expr_stmt> <comment type="line" pos:start="15:15" pos:end="15:39">// for the last written 0</comment>



    <while pos:start="19:5" pos:end="153:5">while<condition pos:start="19:10" pos:end="19:23">(<expr pos:start="19:11" pos:end="19:22"><name pos:start="19:11" pos:end="19:14">offs</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <name pos:start="19:18" pos:end="19:22">width</name></expr>)</condition><block pos:start="19:24" pos:end="153:5">{<block_content pos:start="21:9" pos:end="151:9">

        <decl_stmt pos:start="21:9" pos:end="21:66"><decl pos:start="21:9" pos:end="21:65"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:17">cmode</name> <init pos:start="21:19" pos:end="21:65">= <expr pos:start="21:21" pos:end="21:65"><call pos:start="21:21" pos:end="21:65"><name pos:start="21:21" pos:end="21:28">get_vlc2</name><argument_list pos:start="21:29" pos:end="21:65">(<argument pos:start="21:30" pos:end="21:31"><expr pos:start="21:30" pos:end="21:31"><name pos:start="21:30" pos:end="21:31">gb</name></expr></argument>, <argument pos:start="21:34" pos:end="21:58"><expr pos:start="21:34" pos:end="21:58"><name pos:start="21:34" pos:end="21:58"><name pos:start="21:34" pos:end="21:52">ccitt_group3_2d_vlc</name><operator pos:start="21:53" pos:end="21:53">.</operator><name pos:start="21:54" pos:end="21:58">table</name></name></expr></argument>, <argument pos:start="21:61" pos:end="21:61"><expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">9</literal></expr></argument>, <argument pos:start="21:64" pos:end="21:64"><expr pos:start="21:64" pos:end="21:64"><literal type="number" pos:start="21:64" pos:end="21:64">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if<condition pos:start="23:11" pos:end="23:23">(<expr pos:start="23:12" pos:end="23:22"><name pos:start="23:12" pos:end="23:16">cmode</name> <operator pos:start="23:18" pos:end="23:19">==</operator> <operator pos:start="23:21" pos:end="23:21">-</operator><literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr>)</condition><block pos:start="23:24" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:22">

            <expr_stmt pos:start="25:13" pos:end="25:64"><expr pos:start="25:13" pos:end="25:63"><call pos:start="25:13" pos:end="25:63"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:63">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:62"><expr pos:start="25:41" pos:end="25:62"><literal type="string" pos:start="25:41" pos:end="25:62">"Incorrect mode VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="141:9"><if pos:start="31:9" pos:end="51:9">if<condition pos:start="31:11" pos:end="31:18">(<expr pos:start="31:12" pos:end="31:17"><operator pos:start="31:12" pos:end="31:12">!</operator><name pos:start="31:13" pos:end="31:17">cmode</name></expr>)</condition><block pos:start="31:19" pos:end="51:9">{<block_content pos:start="33:13" pos:end="49:29"><comment type="line" pos:start="31:20" pos:end="31:30">//pass mode</comment>

            <expr_stmt pos:start="33:13" pos:end="33:30"><expr pos:start="33:13" pos:end="33:29"><name pos:start="33:13" pos:end="33:19">run_off</name> <operator pos:start="33:21" pos:end="33:22">+=</operator> <operator pos:start="33:24" pos:end="33:24">*</operator><name pos:start="33:25" pos:end="33:27">ref</name><operator pos:start="33:28" pos:end="33:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:15">run</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:25">run_off</name> <operator pos:start="35:27" pos:end="35:27">-</operator> <name pos:start="35:29" pos:end="35:32">offs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:26"><expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:16">offs</name><operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:25">run_off</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:30"><expr pos:start="39:13" pos:end="39:29"><name pos:start="39:13" pos:end="39:19">run_off</name> <operator pos:start="39:21" pos:end="39:22">+=</operator> <operator pos:start="39:24" pos:end="39:24">*</operator><name pos:start="39:25" pos:end="39:27">ref</name><operator pos:start="39:28" pos:end="39:29">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if<condition pos:start="41:15" pos:end="41:28">(<expr pos:start="41:16" pos:end="41:27"><name pos:start="41:16" pos:end="41:19">offs</name> <operator pos:start="41:21" pos:end="41:21">&gt;</operator> <name pos:start="41:23" pos:end="41:27">width</name></expr>)</condition><block pos:start="41:29" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:26">

                <expr_stmt pos:start="43:17" pos:end="43:72"><expr pos:start="43:17" pos:end="43:71"><call pos:start="43:17" pos:end="43:71"><name pos:start="43:17" pos:end="43:22">av_log</name><argument_list pos:start="43:23" pos:end="43:71">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28">avctx</name></expr></argument>, <argument pos:start="43:31" pos:end="43:42"><expr pos:start="43:31" pos:end="43:42"><name pos:start="43:31" pos:end="43:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:45" pos:end="43:70"><expr pos:start="43:45" pos:end="43:70"><literal type="string" pos:start="43:45" pos:end="43:70">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="45:17" pos:end="45:26">return <expr pos:start="45:24" pos:end="45:25"><operator pos:start="45:24" pos:end="45:24">-</operator><literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:29"><expr pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:21">saved_run</name> <operator pos:start="49:23" pos:end="49:24">+=</operator> <name pos:start="49:26" pos:end="49:28">run</name></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="51:10" pos:end="105:9">else if<condition pos:start="51:17" pos:end="51:28">(<expr pos:start="51:18" pos:end="51:27"><name pos:start="51:18" pos:end="51:22">cmode</name> <operator pos:start="51:24" pos:end="51:25">==</operator> <literal type="number" pos:start="51:27" pos:end="51:27">1</literal></expr>)</condition><block pos:start="51:29" pos:end="105:9">{<block_content pos:start="53:13" pos:end="103:13"><comment type="line" pos:start="51:30" pos:end="51:46">//horizontal mode</comment>

            <decl_stmt pos:start="53:13" pos:end="53:18"><decl pos:start="53:13" pos:end="53:17"><type pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:15">int</name></type> <name pos:start="53:17" pos:end="53:17">k</name></decl>;</decl_stmt>

            <for pos:start="55:13" pos:end="103:13">for<control pos:start="55:16" pos:end="55:34">(<init pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:21"><name pos:start="55:17" pos:end="55:17">k</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">0</literal></expr>;</init> <condition pos:start="55:24" pos:end="55:29"><expr pos:start="55:24" pos:end="55:28"><name pos:start="55:24" pos:end="55:24">k</name> <operator pos:start="55:26" pos:end="55:26">&lt;</operator> <literal type="number" pos:start="55:28" pos:end="55:28">2</literal></expr>;</condition> <incr pos:start="55:31" pos:end="55:33"><expr pos:start="55:31" pos:end="55:33"><name pos:start="55:31" pos:end="55:31">k</name><operator pos:start="55:32" pos:end="55:33">++</operator></expr></incr>)</control><block pos:start="55:35" pos:end="103:13">{<block_content pos:start="57:17" pos:end="101:29">

                <expr_stmt pos:start="57:17" pos:end="57:24"><expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:19">run</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <literal type="number" pos:start="57:23" pos:end="57:23">0</literal></expr>;</expr_stmt>

                <for pos:start="59:17" pos:end="77:17">for<control pos:start="59:20" pos:end="59:23">(<init pos:start="59:21" pos:end="59:21">;</init><condition pos:start="59:22" pos:end="59:22">;</condition><incr/>)</control><block pos:start="59:24" pos:end="77:17">{<block_content pos:start="61:21" pos:end="75:30">

                    <expr_stmt pos:start="61:21" pos:end="61:66"><expr pos:start="61:21" pos:end="61:65"><name pos:start="61:21" pos:end="61:21">t</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <call pos:start="61:25" pos:end="61:65"><name pos:start="61:25" pos:end="61:32">get_vlc2</name><argument_list pos:start="61:33" pos:end="61:65">(<argument pos:start="61:34" pos:end="61:35"><expr pos:start="61:34" pos:end="61:35"><name pos:start="61:34" pos:end="61:35">gb</name></expr></argument>, <argument pos:start="61:38" pos:end="61:58"><expr pos:start="61:38" pos:end="61:58"><name pos:start="61:38" pos:end="61:52"><name pos:start="61:38" pos:end="61:46">ccitt_vlc</name><index pos:start="61:47" pos:end="61:52">[<expr pos:start="61:48" pos:end="61:51"><name pos:start="61:48" pos:end="61:51">mode</name></expr>]</index></name><operator pos:start="61:53" pos:end="61:53">.</operator><name pos:start="61:54" pos:end="61:58">table</name></expr></argument>, <argument pos:start="61:61" pos:end="61:61"><expr pos:start="61:61" pos:end="61:61"><literal type="number" pos:start="61:61" pos:end="61:61">9</literal></expr></argument>, <argument pos:start="61:64" pos:end="61:64"><expr pos:start="61:64" pos:end="61:64"><literal type="number" pos:start="61:64" pos:end="61:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="63:21" pos:end="69:21"><if pos:start="63:21" pos:end="69:21">if<condition pos:start="63:23" pos:end="63:31">(<expr pos:start="63:24" pos:end="63:30"><name pos:start="63:24" pos:end="63:24">t</name> <operator pos:start="63:26" pos:end="63:27">==</operator> <operator pos:start="63:29" pos:end="63:29">-</operator><literal type="number" pos:start="63:30" pos:end="63:30">1</literal></expr>)</condition><block pos:start="63:32" pos:end="69:21">{<block_content pos:start="65:25" pos:end="67:34">

                        <expr_stmt pos:start="65:25" pos:end="65:72"><expr pos:start="65:25" pos:end="65:71"><call pos:start="65:25" pos:end="65:71"><name pos:start="65:25" pos:end="65:30">av_log</name><argument_list pos:start="65:31" pos:end="65:71">(<argument pos:start="65:32" pos:end="65:36"><expr pos:start="65:32" pos:end="65:36"><name pos:start="65:32" pos:end="65:36">avctx</name></expr></argument>, <argument pos:start="65:39" pos:end="65:50"><expr pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:53" pos:end="65:70"><expr pos:start="65:53" pos:end="65:70"><literal type="string" pos:start="65:53" pos:end="65:70">"Incorrect code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="67:25" pos:end="67:34">return <expr pos:start="67:32" pos:end="67:33"><operator pos:start="67:32" pos:end="67:32">-</operator><literal type="number" pos:start="67:33" pos:end="67:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="71:21" pos:end="71:29"><expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:23">run</name> <operator pos:start="71:25" pos:end="71:26">+=</operator> <name pos:start="71:28" pos:end="71:28">t</name></expr>;</expr_stmt>

                    <if_stmt pos:start="73:21" pos:end="75:30"><if pos:start="73:21" pos:end="75:30">if<condition pos:start="73:23" pos:end="73:30">(<expr pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:24">t</name> <operator pos:start="73:26" pos:end="73:26">&lt;</operator> <literal type="number" pos:start="73:28" pos:end="73:29">64</literal></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:30"><block_content pos:start="75:25" pos:end="75:30">

                        <break pos:start="75:25" pos:end="75:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="79:17" pos:end="79:42"><expr pos:start="79:17" pos:end="79:41"><operator pos:start="79:17" pos:end="79:17">*</operator><name pos:start="79:18" pos:end="79:21">runs</name><operator pos:start="79:22" pos:end="79:23">++</operator> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:29">run</name> <operator pos:start="79:31" pos:end="79:31">+</operator> <name pos:start="79:33" pos:end="79:41">saved_run</name></expr>;</expr_stmt>

                <if_stmt pos:start="81:17" pos:end="87:17"><if pos:start="81:17" pos:end="87:17">if<condition pos:start="81:19" pos:end="81:34">(<expr pos:start="81:20" pos:end="81:33"><name pos:start="81:20" pos:end="81:23">runs</name> <operator pos:start="81:25" pos:end="81:26">&gt;=</operator> <name pos:start="81:28" pos:end="81:33">runend</name></expr>)</condition><block pos:start="81:35" pos:end="87:17">{<block_content pos:start="83:21" pos:end="85:30">

                    <expr_stmt pos:start="83:21" pos:end="83:65"><expr pos:start="83:21" pos:end="83:64"><call pos:start="83:21" pos:end="83:64"><name pos:start="83:21" pos:end="83:26">av_log</name><argument_list pos:start="83:27" pos:end="83:64">(<argument pos:start="83:28" pos:end="83:32"><expr pos:start="83:28" pos:end="83:32"><name pos:start="83:28" pos:end="83:32">avctx</name></expr></argument>, <argument pos:start="83:35" pos:end="83:46"><expr pos:start="83:35" pos:end="83:46"><name pos:start="83:35" pos:end="83:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:49" pos:end="83:63"><expr pos:start="83:49" pos:end="83:63"><literal type="string" pos:start="83:49" pos:end="83:63">"Run overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="85:21" pos:end="85:30">return <expr pos:start="85:28" pos:end="85:29"><operator pos:start="85:28" pos:end="85:28">-</operator><literal type="number" pos:start="85:29" pos:end="85:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:30"><expr pos:start="89:17" pos:end="89:29"><name pos:start="89:17" pos:end="89:25">saved_run</name> <operator pos:start="89:27" pos:end="89:27">=</operator> <literal type="number" pos:start="89:29" pos:end="89:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:28"><expr pos:start="91:17" pos:end="91:27"><name pos:start="91:17" pos:end="91:20">offs</name> <operator pos:start="91:22" pos:end="91:23">+=</operator> <name pos:start="91:25" pos:end="91:27">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="93:17" pos:end="99:17"><if pos:start="93:17" pos:end="99:17">if<condition pos:start="93:19" pos:end="93:47">(<expr pos:start="93:20" pos:end="93:46"><name pos:start="93:20" pos:end="93:23">offs</name> <operator pos:start="93:25" pos:end="93:25">&gt;</operator> <name pos:start="93:27" pos:end="93:31">width</name> <operator pos:start="93:33" pos:end="93:34">||</operator> <name pos:start="93:36" pos:end="93:38">run</name> <operator pos:start="93:40" pos:end="93:40">&gt;</operator> <name pos:start="93:42" pos:end="93:46">width</name></expr>)</condition><block pos:start="93:48" pos:end="99:17">{<block_content pos:start="95:21" pos:end="97:30">

                    <expr_stmt pos:start="95:21" pos:end="95:76"><expr pos:start="95:21" pos:end="95:75"><call pos:start="95:21" pos:end="95:75"><name pos:start="95:21" pos:end="95:26">av_log</name><argument_list pos:start="95:27" pos:end="95:75">(<argument pos:start="95:28" pos:end="95:32"><expr pos:start="95:28" pos:end="95:32"><name pos:start="95:28" pos:end="95:32">avctx</name></expr></argument>, <argument pos:start="95:35" pos:end="95:46"><expr pos:start="95:35" pos:end="95:46"><name pos:start="95:35" pos:end="95:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:49" pos:end="95:74"><expr pos:start="95:49" pos:end="95:74"><literal type="string" pos:start="95:49" pos:end="95:74">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="97:21" pos:end="97:30">return <expr pos:start="97:28" pos:end="97:29"><operator pos:start="97:28" pos:end="97:28">-</operator><literal type="number" pos:start="97:29" pos:end="97:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:29"><expr pos:start="101:17" pos:end="101:28"><name pos:start="101:17" pos:end="101:20">mode</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <operator pos:start="101:24" pos:end="101:24">!</operator><name pos:start="101:25" pos:end="101:28">mode</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if><if type="elseif" pos:start="105:10" pos:end="111:9">else if<condition pos:start="105:17" pos:end="105:43">(<expr pos:start="105:18" pos:end="105:42"><name pos:start="105:18" pos:end="105:22">cmode</name> <operator pos:start="105:24" pos:end="105:25">==</operator> <literal type="number" pos:start="105:27" pos:end="105:27">9</literal> <operator pos:start="105:29" pos:end="105:30">||</operator> <name pos:start="105:32" pos:end="105:36">cmode</name> <operator pos:start="105:38" pos:end="105:39">==</operator> <literal type="number" pos:start="105:41" pos:end="105:42">10</literal></expr>)</condition><block pos:start="105:44" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:22">

            <expr_stmt pos:start="107:13" pos:end="107:83"><expr pos:start="107:13" pos:end="107:82"><call pos:start="107:13" pos:end="107:82"><name pos:start="107:13" pos:end="107:18">av_log</name><argument_list pos:start="107:19" pos:end="107:82">(<argument pos:start="107:20" pos:end="107:24"><expr pos:start="107:20" pos:end="107:24"><name pos:start="107:20" pos:end="107:24">avctx</name></expr></argument>, <argument pos:start="107:27" pos:end="107:38"><expr pos:start="107:27" pos:end="107:38"><name pos:start="107:27" pos:end="107:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:41" pos:end="107:81"><expr pos:start="107:41" pos:end="107:81"><literal type="string" pos:start="107:41" pos:end="107:81">"Special modes are not supported (yet)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return>

        </block_content>}</block></if><else pos:start="111:10" pos:end="141:9">else<block pos:start="111:14" pos:end="141:9">{<block_content pos:start="113:13" pos:end="139:25"><comment type="line" pos:start="111:15" pos:end="111:29">//vertical mode</comment>

            <expr_stmt pos:start="113:13" pos:end="113:47"><expr pos:start="113:13" pos:end="113:46"><name pos:start="113:13" pos:end="113:15">run</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:25">run_off</name> <operator pos:start="113:27" pos:end="113:27">-</operator> <name pos:start="113:29" pos:end="113:32">offs</name> <operator pos:start="113:34" pos:end="113:34">+</operator> <operator pos:start="113:36" pos:end="113:36">(</operator><name pos:start="113:37" pos:end="113:41">cmode</name> <operator pos:start="113:43" pos:end="113:43">-</operator> <literal type="number" pos:start="113:45" pos:end="113:45">5</literal><operator pos:start="113:46" pos:end="113:46">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:30"><expr pos:start="115:13" pos:end="115:29"><name pos:start="115:13" pos:end="115:19">run_off</name> <operator pos:start="115:21" pos:end="115:22">-=</operator> <operator pos:start="115:24" pos:end="115:24">*</operator><operator pos:start="115:25" pos:end="115:26">--</operator><name pos:start="115:27" pos:end="115:29">ref</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:24"><expr pos:start="117:13" pos:end="117:23"><name pos:start="117:13" pos:end="117:16">offs</name> <operator pos:start="117:18" pos:end="117:19">+=</operator> <name pos:start="117:21" pos:end="117:23">run</name></expr>;</expr_stmt>

            <if_stmt pos:start="119:13" pos:end="125:13"><if pos:start="119:13" pos:end="125:13">if<condition pos:start="119:15" pos:end="119:43">(<expr pos:start="119:16" pos:end="119:42"><name pos:start="119:16" pos:end="119:19">offs</name> <operator pos:start="119:21" pos:end="119:21">&gt;</operator> <name pos:start="119:23" pos:end="119:27">width</name> <operator pos:start="119:29" pos:end="119:30">||</operator> <name pos:start="119:32" pos:end="119:34">run</name> <operator pos:start="119:36" pos:end="119:36">&gt;</operator> <name pos:start="119:38" pos:end="119:42">width</name></expr>)</condition><block pos:start="119:44" pos:end="125:13">{<block_content pos:start="121:17" pos:end="123:26">

                <expr_stmt pos:start="121:17" pos:end="121:72"><expr pos:start="121:17" pos:end="121:71"><call pos:start="121:17" pos:end="121:71"><name pos:start="121:17" pos:end="121:22">av_log</name><argument_list pos:start="121:23" pos:end="121:71">(<argument pos:start="121:24" pos:end="121:28"><expr pos:start="121:24" pos:end="121:28"><name pos:start="121:24" pos:end="121:28">avctx</name></expr></argument>, <argument pos:start="121:31" pos:end="121:42"><expr pos:start="121:31" pos:end="121:42"><name pos:start="121:31" pos:end="121:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:45" pos:end="121:70"><expr pos:start="121:45" pos:end="121:70"><literal type="string" pos:start="121:45" pos:end="121:70">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="123:17" pos:end="123:26">return <expr pos:start="123:24" pos:end="123:25"><operator pos:start="123:24" pos:end="123:24">-</operator><literal type="number" pos:start="123:25" pos:end="123:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:38"><expr pos:start="127:13" pos:end="127:37"><operator pos:start="127:13" pos:end="127:13">*</operator><name pos:start="127:14" pos:end="127:17">runs</name><operator pos:start="127:18" pos:end="127:19">++</operator> <operator pos:start="127:21" pos:end="127:21">=</operator> <name pos:start="127:23" pos:end="127:25">run</name> <operator pos:start="127:27" pos:end="127:27">+</operator> <name pos:start="127:29" pos:end="127:37">saved_run</name></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="135:13"><if pos:start="129:13" pos:end="135:13">if<condition pos:start="129:15" pos:end="129:30">(<expr pos:start="129:16" pos:end="129:29"><name pos:start="129:16" pos:end="129:19">runs</name> <operator pos:start="129:21" pos:end="129:22">&gt;=</operator> <name pos:start="129:24" pos:end="129:29">runend</name></expr>)</condition><block pos:start="129:31" pos:end="135:13">{<block_content pos:start="131:17" pos:end="133:26">

                <expr_stmt pos:start="131:17" pos:end="131:61"><expr pos:start="131:17" pos:end="131:60"><call pos:start="131:17" pos:end="131:60"><name pos:start="131:17" pos:end="131:22">av_log</name><argument_list pos:start="131:23" pos:end="131:60">(<argument pos:start="131:24" pos:end="131:28"><expr pos:start="131:24" pos:end="131:28"><name pos:start="131:24" pos:end="131:28">avctx</name></expr></argument>, <argument pos:start="131:31" pos:end="131:42"><expr pos:start="131:31" pos:end="131:42"><name pos:start="131:31" pos:end="131:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:45" pos:end="131:59"><expr pos:start="131:45" pos:end="131:59"><literal type="string" pos:start="131:45" pos:end="131:59">"Run overrun\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="133:17" pos:end="133:26">return <expr pos:start="133:24" pos:end="133:25"><operator pos:start="133:24" pos:end="133:24">-</operator><literal type="number" pos:start="133:25" pos:end="133:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:26"><expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:21">saved_run</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <literal type="number" pos:start="137:25" pos:end="137:25">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:25"><expr pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:16">mode</name> <operator pos:start="139:18" pos:end="139:18">=</operator> <operator pos:start="139:20" pos:end="139:20">!</operator><name pos:start="139:21" pos:end="139:24">mode</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="143:9" pos:end="143:28">//sync line pointers</comment>

        <while pos:start="145:9" pos:end="151:9">while<condition pos:start="145:14" pos:end="145:30">(<expr pos:start="145:15" pos:end="145:29"><name pos:start="145:15" pos:end="145:21">run_off</name> <operator pos:start="145:23" pos:end="145:24">&lt;=</operator> <name pos:start="145:26" pos:end="145:29">offs</name></expr>)</condition><block pos:start="145:31" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:30">

            <expr_stmt pos:start="147:13" pos:end="147:30"><expr pos:start="147:13" pos:end="147:29"><name pos:start="147:13" pos:end="147:19">run_off</name> <operator pos:start="147:21" pos:end="147:22">+=</operator> <operator pos:start="147:24" pos:end="147:24">*</operator><name pos:start="147:25" pos:end="147:27">ref</name><operator pos:start="147:28" pos:end="147:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:30"><expr pos:start="149:13" pos:end="149:29"><name pos:start="149:13" pos:end="149:19">run_off</name> <operator pos:start="149:21" pos:end="149:22">+=</operator> <operator pos:start="149:24" pos:end="149:24">*</operator><name pos:start="149:25" pos:end="149:27">ref</name><operator pos:start="149:28" pos:end="149:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>

    <expr_stmt pos:start="155:5" pos:end="155:24"><expr pos:start="155:5" pos:end="155:23"><operator pos:start="155:5" pos:end="155:5">*</operator><name pos:start="155:6" pos:end="155:9">runs</name><operator pos:start="155:10" pos:end="155:11">++</operator> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:23">saved_run</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:16"><expr pos:start="157:5" pos:end="157:15"><operator pos:start="157:5" pos:end="157:5">*</operator><name pos:start="157:6" pos:end="157:9">runs</name><operator pos:start="157:10" pos:end="157:11">++</operator> <operator pos:start="157:13" pos:end="157:13">=</operator> <literal type="number" pos:start="157:15" pos:end="157:15">0</literal></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
