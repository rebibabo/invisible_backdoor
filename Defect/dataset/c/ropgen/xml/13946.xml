<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13946.c" pos:tabs="8"><function pos:start="1:1" pos:end="757:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:27">do_arm_semihosting</name><parameter_list pos:start="1:28" pos:end="1:45">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">CPUARMState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="757:1">{<block_content pos:start="5:5" pos:end="755:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">ARMCPU</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:15">cpu</name> <init pos:start="5:17" pos:end="5:38">= <expr pos:start="5:19" pos:end="5:38"><call pos:start="5:19" pos:end="5:38"><name pos:start="5:19" pos:end="5:33">arm_env_get_cpu</name><argument_list pos:start="5:34" pos:end="5:38">(<argument pos:start="5:35" pos:end="5:37"><expr pos:start="5:35" pos:end="5:37"><name pos:start="5:35" pos:end="5:37">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:21">args</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:21">arg0</name></decl>, <decl pos:start="11:24" pos:end="11:27"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:24" pos:end="11:27">arg1</name></decl>, <decl pos:start="11:30" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:30" pos:end="11:33">arg2</name></decl>, <decl pos:start="11:36" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:36" pos:end="11:39">arg3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type> <name pos:start="13:12" pos:end="13:12">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:11"><decl pos:start="15:5" pos:end="15:10"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">nr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:16">len</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="21:1" pos:end="21:23">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:23">CONFIG_USER_ONLY</name></cpp:ifdef>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:30"><type pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:13">TaskState</name> <modifier pos:start="23:15" pos:end="23:15">*</modifier></type><name pos:start="23:16" pos:end="23:17">ts</name> <init pos:start="23:19" pos:end="23:30">= <expr pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:30"><name pos:start="23:21" pos:end="23:22">cs</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:30">opaque</name></name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="27:5" pos:end="30:0"><decl pos:start="27:5" pos:end="27:25"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">CPUARMState</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:19">ts</name> <init pos:start="27:21" pos:end="27:25">= <expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">env</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:6">nr</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <name pos:start="33:10" pos:end="33:21"><name pos:start="33:10" pos:end="33:12">env</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:18">regs</name><index pos:start="33:19" pos:end="33:21">[<expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:8">args</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <name pos:start="35:12" pos:end="35:23"><name pos:start="35:12" pos:end="35:14">env</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:20">regs</name><index pos:start="35:21" pos:end="35:23">[<expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="37:5" pos:end="755:5">switch <condition pos:start="37:12" pos:end="37:15">(<expr pos:start="37:13" pos:end="37:14"><name pos:start="37:13" pos:end="37:14">nr</name></expr>)</condition> <block pos:start="37:17" pos:end="755:5">{<block_content pos:start="39:5" pos:end="753:16">

    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:24">TARGET_SYS_OPEN</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><call pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:15">GET_ARG</name><argument_list pos:start="41:16" pos:end="41:18">(<argument pos:start="41:17" pos:end="41:17"><expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:19"><expr pos:start="43:9" pos:end="43:18"><call pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:15">GET_ARG</name><argument_list pos:start="43:16" pos:end="43:18">(<argument pos:start="43:17" pos:end="43:17"><expr pos:start="43:17" pos:end="43:17"><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:19"><expr pos:start="45:9" pos:end="45:18"><call pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:15">GET_ARG</name><argument_list pos:start="45:16" pos:end="45:18">(<argument pos:start="45:17" pos:end="45:17"><expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:9">s</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:28">lock_user_string</name><argument_list pos:start="47:29" pos:end="47:34">(<argument pos:start="47:30" pos:end="47:33"><expr pos:start="47:30" pos:end="47:33"><name pos:start="47:30" pos:end="47:33">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:15">(<expr pos:start="49:13" pos:end="49:14"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:14">s</name></expr>)</condition> <block pos:start="49:17" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:32">

            <comment type="block" pos:start="51:13" pos:end="51:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="53:13" pos:end="53:32">return <expr pos:start="53:20" pos:end="53:31"><operator pos:start="53:20" pos:end="53:20">(</operator><name pos:start="53:21" pos:end="53:28">uint32_t</name><operator pos:start="53:29" pos:end="53:29">)</operator><operator pos:start="53:30" pos:end="53:30">-</operator><literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:23">(<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:16">arg1</name> <operator pos:start="57:18" pos:end="57:19">&gt;=</operator> <literal type="number" pos:start="57:21" pos:end="57:22">12</literal></expr>)</condition> <block pos:start="57:25" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:32">

            <expr_stmt pos:start="59:13" pos:end="59:36"><expr pos:start="59:13" pos:end="59:35"><call pos:start="59:13" pos:end="59:35"><name pos:start="59:13" pos:end="59:23">unlock_user</name><argument_list pos:start="59:24" pos:end="59:35">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>, <argument pos:start="59:28" pos:end="59:31"><expr pos:start="59:28" pos:end="59:31"><name pos:start="59:28" pos:end="59:31">arg0</name></expr></argument>, <argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:32">return <expr pos:start="61:20" pos:end="61:31"><operator pos:start="61:20" pos:end="61:20">(</operator><name pos:start="61:21" pos:end="61:28">uint32_t</name><operator pos:start="61:29" pos:end="61:29">)</operator><operator pos:start="61:30" pos:end="61:30">-</operator><literal type="number" pos:start="61:31" pos:end="61:31">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:34">(<expr pos:start="65:13" pos:end="65:33"><call pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:18">strcmp</name><argument_list pos:start="65:19" pos:end="65:28">(<argument pos:start="65:20" pos:end="65:20"><expr pos:start="65:20" pos:end="65:20"><name pos:start="65:20" pos:end="65:20">s</name></expr></argument>, <argument pos:start="65:23" pos:end="65:27"><expr pos:start="65:23" pos:end="65:27"><literal type="string" pos:start="65:23" pos:end="65:27">":tt"</literal></expr></argument>)</argument_list></call> <operator pos:start="65:30" pos:end="65:31">==</operator> <literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr>)</condition> <block pos:start="65:36" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:33">

            <decl_stmt pos:start="67:13" pos:end="67:72"><decl pos:start="67:13" pos:end="67:71"><type pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">int</name></type> <name pos:start="67:17" pos:end="67:29">result_fileno</name> <init pos:start="67:31" pos:end="67:71">= <expr pos:start="67:33" pos:end="67:71"><ternary pos:start="67:33" pos:end="67:71"><condition pos:start="67:33" pos:end="67:42"><expr pos:start="67:33" pos:end="67:40"><name pos:start="67:33" pos:end="67:36">arg1</name> <operator pos:start="67:38" pos:end="67:38">&lt;</operator> <literal type="number" pos:start="67:40" pos:end="67:40">4</literal></expr> ?</condition><then pos:start="67:44" pos:end="67:55"> <expr pos:start="67:44" pos:end="67:55"><name pos:start="67:44" pos:end="67:55">STDIN_FILENO</name></expr> </then><else pos:start="67:57" pos:end="67:71">: <expr pos:start="67:59" pos:end="67:71"><name pos:start="67:59" pos:end="67:71">STDOUT_FILENO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:36"><expr pos:start="69:13" pos:end="69:35"><call pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:23">unlock_user</name><argument_list pos:start="69:24" pos:end="69:35">(<argument pos:start="69:25" pos:end="69:25"><expr pos:start="69:25" pos:end="69:25"><name pos:start="69:25" pos:end="69:25">s</name></expr></argument>, <argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">arg0</name></expr></argument>, <argument pos:start="69:34" pos:end="69:34"><expr pos:start="69:34" pos:end="69:34"><literal type="number" pos:start="69:34" pos:end="69:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:33">return <expr pos:start="71:20" pos:end="71:32"><name pos:start="71:20" pos:end="71:32">result_fileno</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="87:9"><if pos:start="75:9" pos:end="83:9">if <condition pos:start="75:12" pos:end="75:31">(<expr pos:start="75:13" pos:end="75:30"><call pos:start="75:13" pos:end="75:30"><name pos:start="75:13" pos:end="75:28">use_gdb_syscalls</name><argument_list pos:start="75:29" pos:end="75:30">()</argument_list></call></expr>)</condition> <block pos:start="75:33" pos:end="83:9">{<block_content pos:start="77:13" pos:end="81:31">

            <expr_stmt pos:start="77:13" pos:end="79:66"><expr pos:start="77:13" pos:end="79:65"><call pos:start="77:13" pos:end="79:65"><name pos:start="77:13" pos:end="77:26">gdb_do_syscall</name><argument_list pos:start="77:27" pos:end="79:65">(<argument pos:start="77:28" pos:end="77:38"><expr pos:start="77:28" pos:end="77:38"><name pos:start="77:28" pos:end="77:38">arm_semi_cb</name></expr></argument>, <argument pos:start="77:41" pos:end="77:56"><expr pos:start="77:41" pos:end="77:56"><literal type="string" pos:start="77:41" pos:end="77:56">"open,%s,%x,1a4"</literal></expr></argument>, <argument pos:start="77:59" pos:end="77:62"><expr pos:start="77:59" pos:end="77:62"><name pos:start="77:59" pos:end="77:62">arg0</name></expr></argument>,

                           <argument pos:start="79:28" pos:end="79:38"><expr pos:start="79:28" pos:end="79:38"><operator pos:start="79:28" pos:end="79:28">(</operator><name pos:start="79:29" pos:end="79:31">int</name><operator pos:start="79:32" pos:end="79:32">)</operator><name pos:start="79:33" pos:end="79:36">arg2</name><operator pos:start="79:37" pos:end="79:37">+</operator><literal type="number" pos:start="79:38" pos:end="79:38">1</literal></expr></argument>, <argument pos:start="79:41" pos:end="79:64"><expr pos:start="79:41" pos:end="79:64"><name pos:start="79:41" pos:end="79:64"><name pos:start="79:41" pos:end="79:58">gdb_open_modeflags</name><index pos:start="79:59" pos:end="79:64">[<expr pos:start="79:60" pos:end="79:63"><name pos:start="79:60" pos:end="79:63">arg1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:30"><name pos:start="81:19" pos:end="81:21">env</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:27">regs</name><index pos:start="81:28" pos:end="81:30">[<expr pos:start="81:29" pos:end="81:29"><literal type="number" pos:start="81:29" pos:end="81:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="87:9">else <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:73">

            <expr_stmt pos:start="85:13" pos:end="85:73"><expr pos:start="85:13" pos:end="85:72"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:72"><name pos:start="85:19" pos:end="85:31">set_swi_errno</name><argument_list pos:start="85:32" pos:end="85:72">(<argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">ts</name></expr></argument>, <argument pos:start="85:37" pos:end="85:71"><expr pos:start="85:37" pos:end="85:71"><call pos:start="85:37" pos:end="85:71"><name pos:start="85:37" pos:end="85:40">open</name><argument_list pos:start="85:41" pos:end="85:71">(<argument pos:start="85:42" pos:end="85:42"><expr pos:start="85:42" pos:end="85:42"><name pos:start="85:42" pos:end="85:42">s</name></expr></argument>, <argument pos:start="85:45" pos:end="85:64"><expr pos:start="85:45" pos:end="85:64"><name pos:start="85:45" pos:end="85:64"><name pos:start="85:45" pos:end="85:58">open_modeflags</name><index pos:start="85:59" pos:end="85:64">[<expr pos:start="85:60" pos:end="85:63"><name pos:start="85:60" pos:end="85:63">arg1</name></expr>]</index></name></expr></argument>, <argument pos:start="85:67" pos:end="85:70"><expr pos:start="85:67" pos:end="85:70"><literal type="number" pos:start="85:67" pos:end="85:70">0644</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><call pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:19">unlock_user</name><argument_list pos:start="89:20" pos:end="89:31">(<argument pos:start="89:21" pos:end="89:21"><expr pos:start="89:21" pos:end="89:21"><name pos:start="89:21" pos:end="89:21">s</name></expr></argument>, <argument pos:start="89:24" pos:end="89:27"><expr pos:start="89:24" pos:end="89:27"><name pos:start="89:24" pos:end="89:27">arg0</name></expr></argument>, <argument pos:start="89:30" pos:end="89:30"><expr pos:start="89:30" pos:end="89:30"><literal type="number" pos:start="89:30" pos:end="89:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:19">return <expr pos:start="91:16" pos:end="91:18"><name pos:start="91:16" pos:end="91:18">ret</name></expr>;</return>

    <case pos:start="93:5" pos:end="93:26">case <expr pos:start="93:10" pos:end="93:25"><name pos:start="93:10" pos:end="93:25">TARGET_SYS_CLOSE</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:19"><expr pos:start="95:9" pos:end="95:18"><call pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:15">GET_ARG</name><argument_list pos:start="95:16" pos:end="95:18">(<argument pos:start="95:17" pos:end="95:17"><expr pos:start="95:17" pos:end="95:17"><literal type="number" pos:start="95:17" pos:end="95:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="107:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:31">(<expr pos:start="97:13" pos:end="97:30"><call pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:28">use_gdb_syscalls</name><argument_list pos:start="97:29" pos:end="97:30">()</argument_list></call></expr>)</condition> <block pos:start="97:33" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:32">

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:26">gdb_do_syscall</name><argument_list pos:start="99:27" pos:end="99:57">(<argument pos:start="99:28" pos:end="99:38"><expr pos:start="99:28" pos:end="99:38"><name pos:start="99:28" pos:end="99:38">arm_semi_cb</name></expr></argument>, <argument pos:start="99:41" pos:end="99:50"><expr pos:start="99:41" pos:end="99:50"><literal type="string" pos:start="99:41" pos:end="99:50">"close,%x"</literal></expr></argument>, <argument pos:start="99:53" pos:end="99:56"><expr pos:start="99:53" pos:end="99:56"><name pos:start="99:53" pos:end="99:56">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:32">return <expr pos:start="101:20" pos:end="101:31"><name pos:start="101:20" pos:end="101:31"><name pos:start="101:20" pos:end="101:22">env</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:28">regs</name><index pos:start="101:29" pos:end="101:31">[<expr pos:start="101:30" pos:end="101:30"><literal type="number" pos:start="101:30" pos:end="101:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="107:9">else <block pos:start="103:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:50">

            <return pos:start="105:13" pos:end="105:50">return <expr pos:start="105:20" pos:end="105:49"><call pos:start="105:20" pos:end="105:49"><name pos:start="105:20" pos:end="105:32">set_swi_errno</name><argument_list pos:start="105:33" pos:end="105:49">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">ts</name></expr></argument>, <argument pos:start="105:38" pos:end="105:48"><expr pos:start="105:38" pos:end="105:48"><call pos:start="105:38" pos:end="105:48"><name pos:start="105:38" pos:end="105:42">close</name><argument_list pos:start="105:43" pos:end="105:48">(<argument pos:start="105:44" pos:end="105:47"><expr pos:start="105:44" pos:end="105:47"><name pos:start="105:44" pos:end="105:47">arg0</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="109:5" pos:end="109:27">case <expr pos:start="109:10" pos:end="109:26"><name pos:start="109:10" pos:end="109:26">TARGET_SYS_WRITEC</name></expr>:</case>

        <block pos:start="111:9" pos:end="137:9">{<block_content pos:start="113:11" pos:end="135:11">

          <decl_stmt pos:start="113:11" pos:end="113:17"><decl pos:start="113:11" pos:end="113:16"><type pos:start="113:11" pos:end="113:14"><name pos:start="113:11" pos:end="113:14">char</name></type> <name pos:start="113:16" pos:end="113:16">c</name></decl>;</decl_stmt>



          <if_stmt pos:start="117:11" pos:end="121:34"><if pos:start="117:11" pos:end="121:34">if <condition pos:start="117:14" pos:end="117:35">(<expr pos:start="117:15" pos:end="117:34"><call pos:start="117:15" pos:end="117:34"><name pos:start="117:15" pos:end="117:25">get_user_u8</name><argument_list pos:start="117:26" pos:end="117:34">(<argument pos:start="117:27" pos:end="117:27"><expr pos:start="117:27" pos:end="117:27"><name pos:start="117:27" pos:end="117:27">c</name></expr></argument>, <argument pos:start="117:30" pos:end="117:33"><expr pos:start="117:30" pos:end="117:33"><name pos:start="117:30" pos:end="117:33">args</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="121:15" pos:end="121:34"><block_content pos:start="121:15" pos:end="121:34">

              <comment type="block" pos:start="119:15" pos:end="119:70">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

              <return pos:start="121:15" pos:end="121:34">return <expr pos:start="121:22" pos:end="121:33"><operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:30">uint32_t</name><operator pos:start="121:31" pos:end="121:31">)</operator><operator pos:start="121:32" pos:end="121:32">-</operator><literal type="number" pos:start="121:33" pos:end="121:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

          <comment type="block" pos:start="123:11" pos:end="123:64">/* Write to debug console.  stderr is near enough.  */</comment>

          <if_stmt pos:start="125:11" pos:end="135:11"><if pos:start="125:11" pos:end="131:11">if <condition pos:start="125:14" pos:end="125:33">(<expr pos:start="125:15" pos:end="125:32"><call pos:start="125:15" pos:end="125:32"><name pos:start="125:15" pos:end="125:30">use_gdb_syscalls</name><argument_list pos:start="125:31" pos:end="125:32">()</argument_list></call></expr>)</condition> <block pos:start="125:35" pos:end="131:11">{<block_content pos:start="127:17" pos:end="129:36">

                <expr_stmt pos:start="127:17" pos:end="127:66"><expr pos:start="127:17" pos:end="127:65"><call pos:start="127:17" pos:end="127:65"><name pos:start="127:17" pos:end="127:30">gdb_do_syscall</name><argument_list pos:start="127:31" pos:end="127:65">(<argument pos:start="127:32" pos:end="127:42"><expr pos:start="127:32" pos:end="127:42"><name pos:start="127:32" pos:end="127:42">arm_semi_cb</name></expr></argument>, <argument pos:start="127:45" pos:end="127:58"><expr pos:start="127:45" pos:end="127:58"><literal type="string" pos:start="127:45" pos:end="127:58">"write,2,%x,1"</literal></expr></argument>, <argument pos:start="127:61" pos:end="127:64"><expr pos:start="127:61" pos:end="127:64"><name pos:start="127:61" pos:end="127:64">args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="129:17" pos:end="129:36">return <expr pos:start="129:24" pos:end="129:35"><name pos:start="129:24" pos:end="129:35"><name pos:start="129:24" pos:end="129:26">env</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:32">regs</name><index pos:start="129:33" pos:end="129:35">[<expr pos:start="129:34" pos:end="129:34"><literal type="number" pos:start="129:34" pos:end="129:34">0</literal></expr>]</index></name></expr>;</return>

          </block_content>}</block></if> <else pos:start="131:13" pos:end="135:11">else <block pos:start="131:18" pos:end="135:11">{<block_content pos:start="133:17" pos:end="133:51">

                <return pos:start="133:17" pos:end="133:51">return <expr pos:start="133:24" pos:end="133:50"><call pos:start="133:24" pos:end="133:50"><name pos:start="133:24" pos:end="133:28">write</name><argument_list pos:start="133:29" pos:end="133:50">(<argument pos:start="133:30" pos:end="133:42"><expr pos:start="133:30" pos:end="133:42"><name pos:start="133:30" pos:end="133:42">STDERR_FILENO</name></expr></argument>, <argument pos:start="133:45" pos:end="133:46"><expr pos:start="133:45" pos:end="133:46"><operator pos:start="133:45" pos:end="133:45">&amp;</operator><name pos:start="133:46" pos:end="133:46">c</name></expr></argument>, <argument pos:start="133:49" pos:end="133:49"><expr pos:start="133:49" pos:end="133:49"><literal type="number" pos:start="133:49" pos:end="133:49">1</literal></expr></argument>)</argument_list></call></expr>;</return>

          </block_content>}</block></else></if_stmt>

        </block_content>}</block>

    <case pos:start="139:5" pos:end="139:27">case <expr pos:start="139:10" pos:end="139:26"><name pos:start="139:10" pos:end="139:26">TARGET_SYS_WRITE0</name></expr>:</case>

        <if_stmt pos:start="141:9" pos:end="145:32"><if pos:start="141:9" pos:end="145:32">if <condition pos:start="141:12" pos:end="141:42">(<expr pos:start="141:13" pos:end="141:41"><operator pos:start="141:13" pos:end="141:13">!</operator><operator pos:start="141:14" pos:end="141:14">(</operator><name pos:start="141:15" pos:end="141:15">s</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <call pos:start="141:19" pos:end="141:40"><name pos:start="141:19" pos:end="141:34">lock_user_string</name><argument_list pos:start="141:35" pos:end="141:40">(<argument pos:start="141:36" pos:end="141:39"><expr pos:start="141:36" pos:end="141:39"><name pos:start="141:36" pos:end="141:39">args</name></expr></argument>)</argument_list></call><operator pos:start="141:41" pos:end="141:41">)</operator></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:32"><block_content pos:start="145:13" pos:end="145:32">

            <comment type="block" pos:start="143:13" pos:end="143:68">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

            <return pos:start="145:13" pos:end="145:32">return <expr pos:start="145:20" pos:end="145:31"><operator pos:start="145:20" pos:end="145:20">(</operator><name pos:start="145:21" pos:end="145:28">uint32_t</name><operator pos:start="145:29" pos:end="145:29">)</operator><operator pos:start="145:30" pos:end="145:30">-</operator><literal type="number" pos:start="145:31" pos:end="145:31">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:11">len</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:23"><name pos:start="147:15" pos:end="147:20">strlen</name><argument_list pos:start="147:21" pos:end="147:23">(<argument pos:start="147:22" pos:end="147:22"><expr pos:start="147:22" pos:end="147:22"><name pos:start="147:22" pos:end="147:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="159:9"><if pos:start="149:9" pos:end="155:9">if <condition pos:start="149:12" pos:end="149:31">(<expr pos:start="149:13" pos:end="149:30"><call pos:start="149:13" pos:end="149:30"><name pos:start="149:13" pos:end="149:28">use_gdb_syscalls</name><argument_list pos:start="149:29" pos:end="149:30">()</argument_list></call></expr>)</condition> <block pos:start="149:33" pos:end="155:9">{<block_content pos:start="151:13" pos:end="153:31">

            <expr_stmt pos:start="151:13" pos:end="151:70"><expr pos:start="151:13" pos:end="151:69"><call pos:start="151:13" pos:end="151:69"><name pos:start="151:13" pos:end="151:26">gdb_do_syscall</name><argument_list pos:start="151:27" pos:end="151:69">(<argument pos:start="151:28" pos:end="151:38"><expr pos:start="151:28" pos:end="151:38"><name pos:start="151:28" pos:end="151:38">arm_semi_cb</name></expr></argument>, <argument pos:start="151:41" pos:end="151:57"><expr pos:start="151:41" pos:end="151:57"><literal type="string" pos:start="151:41" pos:end="151:57">"write,2,%x,%x\n"</literal></expr></argument>, <argument pos:start="151:60" pos:end="151:63"><expr pos:start="151:60" pos:end="151:63"><name pos:start="151:60" pos:end="151:63">args</name></expr></argument>, <argument pos:start="151:66" pos:end="151:68"><expr pos:start="151:66" pos:end="151:68"><name pos:start="151:66" pos:end="151:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:31"><expr pos:start="153:13" pos:end="153:30"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:30"><name pos:start="153:19" pos:end="153:21">env</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:27">regs</name><index pos:start="153:28" pos:end="153:30">[<expr pos:start="153:29" pos:end="153:29"><literal type="number" pos:start="153:29" pos:end="153:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="159:9">else <block pos:start="155:16" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:47">

            <expr_stmt pos:start="157:13" pos:end="157:47"><expr pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="157:46"><name pos:start="157:19" pos:end="157:23">write</name><argument_list pos:start="157:24" pos:end="157:46">(<argument pos:start="157:25" pos:end="157:37"><expr pos:start="157:25" pos:end="157:37"><name pos:start="157:25" pos:end="157:37">STDERR_FILENO</name></expr></argument>, <argument pos:start="157:40" pos:end="157:40"><expr pos:start="157:40" pos:end="157:40"><name pos:start="157:40" pos:end="157:40">s</name></expr></argument>, <argument pos:start="157:43" pos:end="157:45"><expr pos:start="157:43" pos:end="157:45"><name pos:start="157:43" pos:end="157:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><call pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:19">unlock_user</name><argument_list pos:start="161:20" pos:end="161:31">(<argument pos:start="161:21" pos:end="161:21"><expr pos:start="161:21" pos:end="161:21"><name pos:start="161:21" pos:end="161:21">s</name></expr></argument>, <argument pos:start="161:24" pos:end="161:27"><expr pos:start="161:24" pos:end="161:27"><name pos:start="161:24" pos:end="161:27">args</name></expr></argument>, <argument pos:start="161:30" pos:end="161:30"><expr pos:start="161:30" pos:end="161:30"><literal type="number" pos:start="161:30" pos:end="161:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:19">return <expr pos:start="163:16" pos:end="163:18"><name pos:start="163:16" pos:end="163:18">ret</name></expr>;</return>

    <case pos:start="165:5" pos:end="165:26">case <expr pos:start="165:10" pos:end="165:25"><name pos:start="165:10" pos:end="165:25">TARGET_SYS_WRITE</name></expr>:</case>

        <expr_stmt pos:start="167:9" pos:end="167:19"><expr pos:start="167:9" pos:end="167:18"><call pos:start="167:9" pos:end="167:18"><name pos:start="167:9" pos:end="167:15">GET_ARG</name><argument_list pos:start="167:16" pos:end="167:18">(<argument pos:start="167:17" pos:end="167:17"><expr pos:start="167:17" pos:end="167:17"><literal type="number" pos:start="167:17" pos:end="167:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:19"><expr pos:start="169:9" pos:end="169:18"><call pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:15">GET_ARG</name><argument_list pos:start="169:16" pos:end="169:18">(<argument pos:start="169:17" pos:end="169:17"><expr pos:start="169:17" pos:end="169:17"><literal type="number" pos:start="169:17" pos:end="169:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:19"><expr pos:start="171:9" pos:end="171:18"><call pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:15">GET_ARG</name><argument_list pos:start="171:16" pos:end="171:18">(<argument pos:start="171:17" pos:end="171:17"><expr pos:start="171:17" pos:end="171:17"><literal type="number" pos:start="171:17" pos:end="171:17">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:19"><expr pos:start="173:9" pos:end="173:18"><name pos:start="173:9" pos:end="173:11">len</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <name pos:start="173:15" pos:end="173:18">arg2</name></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="205:9"><if pos:start="175:9" pos:end="183:9">if <condition pos:start="175:12" pos:end="175:31">(<expr pos:start="175:13" pos:end="175:30"><call pos:start="175:13" pos:end="175:30"><name pos:start="175:13" pos:end="175:28">use_gdb_syscalls</name><argument_list pos:start="175:29" pos:end="175:30">()</argument_list></call></expr>)</condition> <block pos:start="175:33" pos:end="183:9">{<block_content pos:start="177:13" pos:end="181:32">

            <expr_stmt pos:start="177:13" pos:end="177:39"><expr pos:start="177:13" pos:end="177:38"><name pos:start="177:13" pos:end="177:32">arm_semi_syscall_len</name> <operator pos:start="177:34" pos:end="177:34">=</operator> <name pos:start="177:36" pos:end="177:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:75"><expr pos:start="179:13" pos:end="179:74"><call pos:start="179:13" pos:end="179:74"><name pos:start="179:13" pos:end="179:26">gdb_do_syscall</name><argument_list pos:start="179:27" pos:end="179:74">(<argument pos:start="179:28" pos:end="179:38"><expr pos:start="179:28" pos:end="179:38"><name pos:start="179:28" pos:end="179:38">arm_semi_cb</name></expr></argument>, <argument pos:start="179:41" pos:end="179:56"><expr pos:start="179:41" pos:end="179:56"><literal type="string" pos:start="179:41" pos:end="179:56">"write,%x,%x,%x"</literal></expr></argument>, <argument pos:start="179:59" pos:end="179:62"><expr pos:start="179:59" pos:end="179:62"><name pos:start="179:59" pos:end="179:62">arg0</name></expr></argument>, <argument pos:start="179:65" pos:end="179:68"><expr pos:start="179:65" pos:end="179:68"><name pos:start="179:65" pos:end="179:68">arg1</name></expr></argument>, <argument pos:start="179:71" pos:end="179:73"><expr pos:start="179:71" pos:end="179:73"><name pos:start="179:71" pos:end="179:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:32">return <expr pos:start="181:20" pos:end="181:31"><name pos:start="181:20" pos:end="181:31"><name pos:start="181:20" pos:end="181:22">env</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:28">regs</name><index pos:start="181:29" pos:end="181:31">[<expr pos:start="181:30" pos:end="181:30"><literal type="number" pos:start="181:30" pos:end="181:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="205:9">else <block pos:start="183:16" pos:end="205:9">{<block_content pos:start="185:13" pos:end="203:29">

            <expr_stmt pos:start="185:13" pos:end="185:53"><expr pos:start="185:13" pos:end="185:52"><name pos:start="185:13" pos:end="185:13">s</name> <operator pos:start="185:15" pos:end="185:15">=</operator> <call pos:start="185:17" pos:end="185:52"><name pos:start="185:17" pos:end="185:25">lock_user</name><argument_list pos:start="185:26" pos:end="185:52">(<argument pos:start="185:27" pos:end="185:37"><expr pos:start="185:27" pos:end="185:37"><name pos:start="185:27" pos:end="185:37">VERIFY_READ</name></expr></argument>, <argument pos:start="185:40" pos:end="185:43"><expr pos:start="185:40" pos:end="185:43"><name pos:start="185:40" pos:end="185:43">arg1</name></expr></argument>, <argument pos:start="185:46" pos:end="185:48"><expr pos:start="185:46" pos:end="185:48"><name pos:start="185:46" pos:end="185:48">len</name></expr></argument>, <argument pos:start="185:51" pos:end="185:51"><expr pos:start="185:51" pos:end="185:51"><literal type="number" pos:start="185:51" pos:end="185:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:19">(<expr pos:start="187:17" pos:end="187:18"><operator pos:start="187:17" pos:end="187:17">!</operator><name pos:start="187:18" pos:end="187:18">s</name></expr>)</condition> <block pos:start="187:21" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:36">

                <comment type="block" pos:start="189:17" pos:end="189:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="191:17" pos:end="191:36">return <expr pos:start="191:24" pos:end="191:35"><operator pos:start="191:24" pos:end="191:24">(</operator><name pos:start="191:25" pos:end="191:32">uint32_t</name><operator pos:start="191:33" pos:end="191:33">)</operator><operator pos:start="191:34" pos:end="191:34">-</operator><literal type="number" pos:start="191:35" pos:end="191:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:57"><expr pos:start="195:13" pos:end="195:56"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:56"><name pos:start="195:19" pos:end="195:31">set_swi_errno</name><argument_list pos:start="195:32" pos:end="195:56">(<argument pos:start="195:33" pos:end="195:34"><expr pos:start="195:33" pos:end="195:34"><name pos:start="195:33" pos:end="195:34">ts</name></expr></argument>, <argument pos:start="195:37" pos:end="195:55"><expr pos:start="195:37" pos:end="195:55"><call pos:start="195:37" pos:end="195:55"><name pos:start="195:37" pos:end="195:41">write</name><argument_list pos:start="195:42" pos:end="195:55">(<argument pos:start="195:43" pos:end="195:46"><expr pos:start="195:43" pos:end="195:46"><name pos:start="195:43" pos:end="195:46">arg0</name></expr></argument>, <argument pos:start="195:49" pos:end="195:49"><expr pos:start="195:49" pos:end="195:49"><name pos:start="195:49" pos:end="195:49">s</name></expr></argument>, <argument pos:start="195:52" pos:end="195:54"><expr pos:start="195:52" pos:end="195:54"><name pos:start="195:52" pos:end="195:54">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:36"><expr pos:start="197:13" pos:end="197:35"><call pos:start="197:13" pos:end="197:35"><name pos:start="197:13" pos:end="197:23">unlock_user</name><argument_list pos:start="197:24" pos:end="197:35">(<argument pos:start="197:25" pos:end="197:25"><expr pos:start="197:25" pos:end="197:25"><name pos:start="197:25" pos:end="197:25">s</name></expr></argument>, <argument pos:start="197:28" pos:end="197:31"><expr pos:start="197:28" pos:end="197:31"><name pos:start="197:28" pos:end="197:31">arg1</name></expr></argument>, <argument pos:start="197:34" pos:end="197:34"><expr pos:start="197:34" pos:end="197:34"><literal type="number" pos:start="197:34" pos:end="197:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="201:26"><if pos:start="199:13" pos:end="201:26">if <condition pos:start="199:16" pos:end="199:36">(<expr pos:start="199:17" pos:end="199:35"><name pos:start="199:17" pos:end="199:19">ret</name> <operator pos:start="199:21" pos:end="199:22">==</operator> <operator pos:start="199:24" pos:end="199:24">(</operator><name pos:start="199:25" pos:end="199:32">uint32_t</name><operator pos:start="199:33" pos:end="199:33">)</operator><operator pos:start="199:34" pos:end="199:34">-</operator><literal type="number" pos:start="199:35" pos:end="199:35">1</literal></expr>)</condition><block type="pseudo" pos:start="201:17" pos:end="201:26"><block_content pos:start="201:17" pos:end="201:26">

                <return pos:start="201:17" pos:end="201:26">return <expr pos:start="201:24" pos:end="201:25"><operator pos:start="201:24" pos:end="201:24">-</operator><literal type="number" pos:start="201:25" pos:end="201:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="203:13" pos:end="203:29">return <expr pos:start="203:20" pos:end="203:28"><name pos:start="203:20" pos:end="203:22">len</name> <operator pos:start="203:24" pos:end="203:24">-</operator> <name pos:start="203:26" pos:end="203:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="207:5" pos:end="207:25">case <expr pos:start="207:10" pos:end="207:24"><name pos:start="207:10" pos:end="207:24">TARGET_SYS_READ</name></expr>:</case>

        <expr_stmt pos:start="209:9" pos:end="209:19"><expr pos:start="209:9" pos:end="209:18"><call pos:start="209:9" pos:end="209:18"><name pos:start="209:9" pos:end="209:15">GET_ARG</name><argument_list pos:start="209:16" pos:end="209:18">(<argument pos:start="209:17" pos:end="209:17"><expr pos:start="209:17" pos:end="209:17"><literal type="number" pos:start="209:17" pos:end="209:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:19"><expr pos:start="211:9" pos:end="211:18"><call pos:start="211:9" pos:end="211:18"><name pos:start="211:9" pos:end="211:15">GET_ARG</name><argument_list pos:start="211:16" pos:end="211:18">(<argument pos:start="211:17" pos:end="211:17"><expr pos:start="211:17" pos:end="211:17"><literal type="number" pos:start="211:17" pos:end="211:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:19"><expr pos:start="213:9" pos:end="213:18"><call pos:start="213:9" pos:end="213:18"><name pos:start="213:9" pos:end="213:15">GET_ARG</name><argument_list pos:start="213:16" pos:end="213:18">(<argument pos:start="213:17" pos:end="213:17"><expr pos:start="213:17" pos:end="213:17"><literal type="number" pos:start="213:17" pos:end="213:17">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:19"><expr pos:start="215:9" pos:end="215:18"><name pos:start="215:9" pos:end="215:11">len</name> <operator pos:start="215:13" pos:end="215:13">=</operator> <name pos:start="215:15" pos:end="215:18">arg2</name></expr>;</expr_stmt>

        <if_stmt pos:start="217:9" pos:end="251:9"><if pos:start="217:9" pos:end="225:9">if <condition pos:start="217:12" pos:end="217:31">(<expr pos:start="217:13" pos:end="217:30"><call pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:28">use_gdb_syscalls</name><argument_list pos:start="217:29" pos:end="217:30">()</argument_list></call></expr>)</condition> <block pos:start="217:33" pos:end="225:9">{<block_content pos:start="219:13" pos:end="223:32">

            <expr_stmt pos:start="219:13" pos:end="219:39"><expr pos:start="219:13" pos:end="219:38"><name pos:start="219:13" pos:end="219:32">arm_semi_syscall_len</name> <operator pos:start="219:34" pos:end="219:34">=</operator> <name pos:start="219:36" pos:end="219:38">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:74"><expr pos:start="221:13" pos:end="221:73"><call pos:start="221:13" pos:end="221:73"><name pos:start="221:13" pos:end="221:26">gdb_do_syscall</name><argument_list pos:start="221:27" pos:end="221:73">(<argument pos:start="221:28" pos:end="221:38"><expr pos:start="221:28" pos:end="221:38"><name pos:start="221:28" pos:end="221:38">arm_semi_cb</name></expr></argument>, <argument pos:start="221:41" pos:end="221:55"><expr pos:start="221:41" pos:end="221:55"><literal type="string" pos:start="221:41" pos:end="221:55">"read,%x,%x,%x"</literal></expr></argument>, <argument pos:start="221:58" pos:end="221:61"><expr pos:start="221:58" pos:end="221:61"><name pos:start="221:58" pos:end="221:61">arg0</name></expr></argument>, <argument pos:start="221:64" pos:end="221:67"><expr pos:start="221:64" pos:end="221:67"><name pos:start="221:64" pos:end="221:67">arg1</name></expr></argument>, <argument pos:start="221:70" pos:end="221:72"><expr pos:start="221:70" pos:end="221:72"><name pos:start="221:70" pos:end="221:72">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="223:13" pos:end="223:32">return <expr pos:start="223:20" pos:end="223:31"><name pos:start="223:20" pos:end="223:31"><name pos:start="223:20" pos:end="223:22">env</name><operator pos:start="223:23" pos:end="223:24">-&gt;</operator><name pos:start="223:25" pos:end="223:28">regs</name><index pos:start="223:29" pos:end="223:31">[<expr pos:start="223:30" pos:end="223:30"><literal type="number" pos:start="223:30" pos:end="223:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="225:11" pos:end="251:9">else <block pos:start="225:16" pos:end="251:9">{<block_content pos:start="227:13" pos:end="249:29">

            <expr_stmt pos:start="227:13" pos:end="227:54"><expr pos:start="227:13" pos:end="227:53"><name pos:start="227:13" pos:end="227:13">s</name> <operator pos:start="227:15" pos:end="227:15">=</operator> <call pos:start="227:17" pos:end="227:53"><name pos:start="227:17" pos:end="227:25">lock_user</name><argument_list pos:start="227:26" pos:end="227:53">(<argument pos:start="227:27" pos:end="227:38"><expr pos:start="227:27" pos:end="227:38"><name pos:start="227:27" pos:end="227:38">VERIFY_WRITE</name></expr></argument>, <argument pos:start="227:41" pos:end="227:44"><expr pos:start="227:41" pos:end="227:44"><name pos:start="227:41" pos:end="227:44">arg1</name></expr></argument>, <argument pos:start="227:47" pos:end="227:49"><expr pos:start="227:47" pos:end="227:49"><name pos:start="227:47" pos:end="227:49">len</name></expr></argument>, <argument pos:start="227:52" pos:end="227:52"><expr pos:start="227:52" pos:end="227:52"><literal type="number" pos:start="227:52" pos:end="227:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="235:13"><if pos:start="229:13" pos:end="235:13">if <condition pos:start="229:16" pos:end="229:19">(<expr pos:start="229:17" pos:end="229:18"><operator pos:start="229:17" pos:end="229:17">!</operator><name pos:start="229:18" pos:end="229:18">s</name></expr>)</condition> <block pos:start="229:21" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:36">

                <comment type="block" pos:start="231:17" pos:end="231:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="233:17" pos:end="233:36">return <expr pos:start="233:24" pos:end="233:35"><operator pos:start="233:24" pos:end="233:24">(</operator><name pos:start="233:25" pos:end="233:32">uint32_t</name><operator pos:start="233:33" pos:end="233:33">)</operator><operator pos:start="233:34" pos:end="233:34">-</operator><literal type="number" pos:start="233:35" pos:end="233:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <do pos:start="237:13" pos:end="241:50">do <block pos:start="237:16" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:60">

                <expr_stmt pos:start="239:17" pos:end="239:60"><expr pos:start="239:17" pos:end="239:59"><name pos:start="239:17" pos:end="239:19">ret</name> <operator pos:start="239:21" pos:end="239:21">=</operator> <call pos:start="239:23" pos:end="239:59"><name pos:start="239:23" pos:end="239:35">set_swi_errno</name><argument_list pos:start="239:36" pos:end="239:59">(<argument pos:start="239:37" pos:end="239:38"><expr pos:start="239:37" pos:end="239:38"><name pos:start="239:37" pos:end="239:38">ts</name></expr></argument>, <argument pos:start="239:41" pos:end="239:58"><expr pos:start="239:41" pos:end="239:58"><call pos:start="239:41" pos:end="239:58"><name pos:start="239:41" pos:end="239:44">read</name><argument_list pos:start="239:45" pos:end="239:58">(<argument pos:start="239:46" pos:end="239:49"><expr pos:start="239:46" pos:end="239:49"><name pos:start="239:46" pos:end="239:49">arg0</name></expr></argument>, <argument pos:start="239:52" pos:end="239:52"><expr pos:start="239:52" pos:end="239:52"><name pos:start="239:52" pos:end="239:52">s</name></expr></argument>, <argument pos:start="239:55" pos:end="239:57"><expr pos:start="239:55" pos:end="239:57"><name pos:start="239:55" pos:end="239:57">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block> while <condition pos:start="241:21" pos:end="241:49">(<expr pos:start="241:22" pos:end="241:48"><name pos:start="241:22" pos:end="241:24">ret</name> <operator pos:start="241:26" pos:end="241:27">==</operator> <operator pos:start="241:29" pos:end="241:29">-</operator><literal type="number" pos:start="241:30" pos:end="241:30">1</literal> <operator pos:start="241:32" pos:end="241:33">&amp;&amp;</operator> <name pos:start="241:35" pos:end="241:39">errno</name> <operator pos:start="241:41" pos:end="241:42">==</operator> <name pos:start="241:44" pos:end="241:48">EINTR</name></expr>)</condition>;</do>

            <expr_stmt pos:start="243:13" pos:end="243:38"><expr pos:start="243:13" pos:end="243:37"><call pos:start="243:13" pos:end="243:37"><name pos:start="243:13" pos:end="243:23">unlock_user</name><argument_list pos:start="243:24" pos:end="243:37">(<argument pos:start="243:25" pos:end="243:25"><expr pos:start="243:25" pos:end="243:25"><name pos:start="243:25" pos:end="243:25">s</name></expr></argument>, <argument pos:start="243:28" pos:end="243:31"><expr pos:start="243:28" pos:end="243:31"><name pos:start="243:28" pos:end="243:31">arg1</name></expr></argument>, <argument pos:start="243:34" pos:end="243:36"><expr pos:start="243:34" pos:end="243:36"><name pos:start="243:34" pos:end="243:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="247:26"><if pos:start="245:13" pos:end="247:26">if <condition pos:start="245:16" pos:end="245:36">(<expr pos:start="245:17" pos:end="245:35"><name pos:start="245:17" pos:end="245:19">ret</name> <operator pos:start="245:21" pos:end="245:22">==</operator> <operator pos:start="245:24" pos:end="245:24">(</operator><name pos:start="245:25" pos:end="245:32">uint32_t</name><operator pos:start="245:33" pos:end="245:33">)</operator><operator pos:start="245:34" pos:end="245:34">-</operator><literal type="number" pos:start="245:35" pos:end="245:35">1</literal></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:26"><block_content pos:start="247:17" pos:end="247:26">

                <return pos:start="247:17" pos:end="247:26">return <expr pos:start="247:24" pos:end="247:25"><operator pos:start="247:24" pos:end="247:24">-</operator><literal type="number" pos:start="247:25" pos:end="247:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="249:13" pos:end="249:29">return <expr pos:start="249:20" pos:end="249:28"><name pos:start="249:20" pos:end="249:22">len</name> <operator pos:start="249:24" pos:end="249:24">-</operator> <name pos:start="249:26" pos:end="249:28">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="253:5" pos:end="253:26">case <expr pos:start="253:10" pos:end="253:25"><name pos:start="253:10" pos:end="253:25">TARGET_SYS_READC</name></expr>:</case>

       <comment type="block" pos:start="255:8" pos:end="255:60">/* XXX: Read from debug console. Not implemented.  */</comment>

        <return pos:start="257:9" pos:end="257:17">return <expr pos:start="257:16" pos:end="257:16"><literal type="number" pos:start="257:16" pos:end="257:16">0</literal></expr>;</return>

    <case pos:start="259:5" pos:end="259:26">case <expr pos:start="259:10" pos:end="259:25"><name pos:start="259:10" pos:end="259:25">TARGET_SYS_ISTTY</name></expr>:</case>

        <expr_stmt pos:start="261:9" pos:end="261:19"><expr pos:start="261:9" pos:end="261:18"><call pos:start="261:9" pos:end="261:18"><name pos:start="261:9" pos:end="261:15">GET_ARG</name><argument_list pos:start="261:16" pos:end="261:18">(<argument pos:start="261:17" pos:end="261:17"><expr pos:start="261:17" pos:end="261:17"><literal type="number" pos:start="261:17" pos:end="261:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="273:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:31">(<expr pos:start="263:13" pos:end="263:30"><call pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:28">use_gdb_syscalls</name><argument_list pos:start="263:29" pos:end="263:30">()</argument_list></call></expr>)</condition> <block pos:start="263:33" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:32">

            <expr_stmt pos:start="265:13" pos:end="265:59"><expr pos:start="265:13" pos:end="265:58"><call pos:start="265:13" pos:end="265:58"><name pos:start="265:13" pos:end="265:26">gdb_do_syscall</name><argument_list pos:start="265:27" pos:end="265:58">(<argument pos:start="265:28" pos:end="265:38"><expr pos:start="265:28" pos:end="265:38"><name pos:start="265:28" pos:end="265:38">arm_semi_cb</name></expr></argument>, <argument pos:start="265:41" pos:end="265:51"><expr pos:start="265:41" pos:end="265:51"><literal type="string" pos:start="265:41" pos:end="265:51">"isatty,%x"</literal></expr></argument>, <argument pos:start="265:54" pos:end="265:57"><expr pos:start="265:54" pos:end="265:57"><name pos:start="265:54" pos:end="265:57">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="267:13" pos:end="267:32">return <expr pos:start="267:20" pos:end="267:31"><name pos:start="267:20" pos:end="267:31"><name pos:start="267:20" pos:end="267:22">env</name><operator pos:start="267:23" pos:end="267:24">-&gt;</operator><name pos:start="267:25" pos:end="267:28">regs</name><index pos:start="267:29" pos:end="267:31">[<expr pos:start="267:30" pos:end="267:30"><literal type="number" pos:start="267:30" pos:end="267:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="269:11" pos:end="273:9">else <block pos:start="269:16" pos:end="273:9">{<block_content pos:start="271:13" pos:end="271:32">

            <return pos:start="271:13" pos:end="271:32">return <expr pos:start="271:20" pos:end="271:31"><call pos:start="271:20" pos:end="271:31"><name pos:start="271:20" pos:end="271:25">isatty</name><argument_list pos:start="271:26" pos:end="271:31">(<argument pos:start="271:27" pos:end="271:30"><expr pos:start="271:27" pos:end="271:30"><name pos:start="271:27" pos:end="271:30">arg0</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="275:5" pos:end="275:25">case <expr pos:start="275:10" pos:end="275:24"><name pos:start="275:10" pos:end="275:24">TARGET_SYS_SEEK</name></expr>:</case>

        <expr_stmt pos:start="277:9" pos:end="277:19"><expr pos:start="277:9" pos:end="277:18"><call pos:start="277:9" pos:end="277:18"><name pos:start="277:9" pos:end="277:15">GET_ARG</name><argument_list pos:start="277:16" pos:end="277:18">(<argument pos:start="277:17" pos:end="277:17"><expr pos:start="277:17" pos:end="277:17"><literal type="number" pos:start="277:17" pos:end="277:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:19"><expr pos:start="279:9" pos:end="279:18"><call pos:start="279:9" pos:end="279:18"><name pos:start="279:9" pos:end="279:15">GET_ARG</name><argument_list pos:start="279:16" pos:end="279:18">(<argument pos:start="279:17" pos:end="279:17"><expr pos:start="279:17" pos:end="279:17"><literal type="number" pos:start="279:17" pos:end="279:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="281:9" pos:end="297:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:31">(<expr pos:start="281:13" pos:end="281:30"><call pos:start="281:13" pos:end="281:30"><name pos:start="281:13" pos:end="281:28">use_gdb_syscalls</name><argument_list pos:start="281:29" pos:end="281:30">()</argument_list></call></expr>)</condition> <block pos:start="281:33" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:32">

            <expr_stmt pos:start="283:13" pos:end="283:69"><expr pos:start="283:13" pos:end="283:68"><call pos:start="283:13" pos:end="283:68"><name pos:start="283:13" pos:end="283:26">gdb_do_syscall</name><argument_list pos:start="283:27" pos:end="283:68">(<argument pos:start="283:28" pos:end="283:38"><expr pos:start="283:28" pos:end="283:38"><name pos:start="283:28" pos:end="283:38">arm_semi_cb</name></expr></argument>, <argument pos:start="283:41" pos:end="283:55"><expr pos:start="283:41" pos:end="283:55"><literal type="string" pos:start="283:41" pos:end="283:55">"lseek,%x,%x,0"</literal></expr></argument>, <argument pos:start="283:58" pos:end="283:61"><expr pos:start="283:58" pos:end="283:61"><name pos:start="283:58" pos:end="283:61">arg0</name></expr></argument>, <argument pos:start="283:64" pos:end="283:67"><expr pos:start="283:64" pos:end="283:67"><name pos:start="283:64" pos:end="283:67">arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="285:13" pos:end="285:32">return <expr pos:start="285:20" pos:end="285:31"><name pos:start="285:20" pos:end="285:31"><name pos:start="285:20" pos:end="285:22">env</name><operator pos:start="285:23" pos:end="285:24">-&gt;</operator><name pos:start="285:25" pos:end="285:28">regs</name><index pos:start="285:29" pos:end="285:31">[<expr pos:start="285:30" pos:end="285:30"><literal type="number" pos:start="285:30" pos:end="285:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="287:11" pos:end="297:9">else <block pos:start="287:16" pos:end="297:9">{<block_content pos:start="289:13" pos:end="295:21">

            <expr_stmt pos:start="289:13" pos:end="289:65"><expr pos:start="289:13" pos:end="289:64"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <call pos:start="289:19" pos:end="289:64"><name pos:start="289:19" pos:end="289:31">set_swi_errno</name><argument_list pos:start="289:32" pos:end="289:64">(<argument pos:start="289:33" pos:end="289:34"><expr pos:start="289:33" pos:end="289:34"><name pos:start="289:33" pos:end="289:34">ts</name></expr></argument>, <argument pos:start="289:37" pos:end="289:63"><expr pos:start="289:37" pos:end="289:63"><call pos:start="289:37" pos:end="289:63"><name pos:start="289:37" pos:end="289:41">lseek</name><argument_list pos:start="289:42" pos:end="289:63">(<argument pos:start="289:43" pos:end="289:46"><expr pos:start="289:43" pos:end="289:46"><name pos:start="289:43" pos:end="289:46">arg0</name></expr></argument>, <argument pos:start="289:49" pos:end="289:52"><expr pos:start="289:49" pos:end="289:52"><name pos:start="289:49" pos:end="289:52">arg1</name></expr></argument>, <argument pos:start="289:55" pos:end="289:62"><expr pos:start="289:55" pos:end="289:62"><name pos:start="289:55" pos:end="289:62">SEEK_SET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="293:24"><if pos:start="291:13" pos:end="293:24">if <condition pos:start="291:16" pos:end="291:36">(<expr pos:start="291:17" pos:end="291:35"><name pos:start="291:17" pos:end="291:19">ret</name> <operator pos:start="291:21" pos:end="291:22">==</operator> <operator pos:start="291:24" pos:end="291:24">(</operator><name pos:start="291:25" pos:end="291:32">uint32_t</name><operator pos:start="291:33" pos:end="291:33">)</operator><operator pos:start="291:34" pos:end="291:34">-</operator><literal type="number" pos:start="291:35" pos:end="291:35">1</literal></expr>)</condition><block type="pseudo" pos:start="293:15" pos:end="293:24"><block_content pos:start="293:15" pos:end="293:24">

              <return pos:start="293:15" pos:end="293:24">return <expr pos:start="293:22" pos:end="293:23"><operator pos:start="293:22" pos:end="293:22">-</operator><literal type="number" pos:start="293:23" pos:end="293:23">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="295:13" pos:end="295:21">return <expr pos:start="295:20" pos:end="295:20"><literal type="number" pos:start="295:20" pos:end="295:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="299:5" pos:end="299:25">case <expr pos:start="299:10" pos:end="299:24"><name pos:start="299:10" pos:end="299:24">TARGET_SYS_FLEN</name></expr>:</case>

        <expr_stmt pos:start="301:9" pos:end="301:19"><expr pos:start="301:9" pos:end="301:18"><call pos:start="301:9" pos:end="301:18"><name pos:start="301:9" pos:end="301:15">GET_ARG</name><argument_list pos:start="301:16" pos:end="301:18">(<argument pos:start="301:17" pos:end="301:17"><expr pos:start="301:17" pos:end="301:17"><literal type="number" pos:start="301:17" pos:end="301:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="303:9" pos:end="323:9"><if pos:start="303:9" pos:end="311:9">if <condition pos:start="303:12" pos:end="303:31">(<expr pos:start="303:13" pos:end="303:30"><call pos:start="303:13" pos:end="303:30"><name pos:start="303:13" pos:end="303:28">use_gdb_syscalls</name><argument_list pos:start="303:29" pos:end="303:30">()</argument_list></call></expr>)</condition> <block pos:start="303:33" pos:end="311:9">{<block_content pos:start="305:13" pos:end="309:32">

            <expr_stmt pos:start="305:13" pos:end="307:51"><expr pos:start="305:13" pos:end="307:50"><call pos:start="305:13" pos:end="307:50"><name pos:start="305:13" pos:end="305:26">gdb_do_syscall</name><argument_list pos:start="305:27" pos:end="307:50">(<argument pos:start="305:28" pos:end="305:43"><expr pos:start="305:28" pos:end="305:43"><name pos:start="305:28" pos:end="305:43">arm_semi_flen_cb</name></expr></argument>, <argument pos:start="305:46" pos:end="305:58"><expr pos:start="305:46" pos:end="305:58"><literal type="string" pos:start="305:46" pos:end="305:58">"fstat,%x,%x"</literal></expr></argument>,

                           <argument pos:start="307:28" pos:end="307:31"><expr pos:start="307:28" pos:end="307:31"><name pos:start="307:28" pos:end="307:31">arg0</name></expr></argument>, <argument pos:start="307:34" pos:end="307:49"><expr pos:start="307:34" pos:end="307:49"><name pos:start="307:34" pos:end="307:46"><name pos:start="307:34" pos:end="307:36">env</name><operator pos:start="307:37" pos:end="307:38">-&gt;</operator><name pos:start="307:39" pos:end="307:42">regs</name><index pos:start="307:43" pos:end="307:46">[<expr pos:start="307:44" pos:end="307:45"><literal type="number" pos:start="307:44" pos:end="307:45">13</literal></expr>]</index></name><operator pos:start="307:47" pos:end="307:47">-</operator><literal type="number" pos:start="307:48" pos:end="307:49">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="309:13" pos:end="309:32">return <expr pos:start="309:20" pos:end="309:31"><name pos:start="309:20" pos:end="309:31"><name pos:start="309:20" pos:end="309:22">env</name><operator pos:start="309:23" pos:end="309:24">-&gt;</operator><name pos:start="309:25" pos:end="309:28">regs</name><index pos:start="309:29" pos:end="309:31">[<expr pos:start="309:30" pos:end="309:30"><literal type="number" pos:start="309:30" pos:end="309:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="311:11" pos:end="323:9">else <block pos:start="311:16" pos:end="323:9">{<block_content pos:start="313:13" pos:end="321:31">

            <decl_stmt pos:start="313:13" pos:end="313:28"><decl pos:start="313:13" pos:end="313:27"><type pos:start="313:13" pos:end="313:23"><name pos:start="313:13" pos:end="313:23"><name pos:start="313:13" pos:end="313:18">struct</name> <name pos:start="313:20" pos:end="313:23">stat</name></name></type> <name pos:start="313:25" pos:end="313:27">buf</name></decl>;</decl_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:55"><expr pos:start="315:13" pos:end="315:54"><name pos:start="315:13" pos:end="315:15">ret</name> <operator pos:start="315:17" pos:end="315:17">=</operator> <call pos:start="315:19" pos:end="315:54"><name pos:start="315:19" pos:end="315:31">set_swi_errno</name><argument_list pos:start="315:32" pos:end="315:54">(<argument pos:start="315:33" pos:end="315:34"><expr pos:start="315:33" pos:end="315:34"><name pos:start="315:33" pos:end="315:34">ts</name></expr></argument>, <argument pos:start="315:37" pos:end="315:53"><expr pos:start="315:37" pos:end="315:53"><call pos:start="315:37" pos:end="315:53"><name pos:start="315:37" pos:end="315:41">fstat</name><argument_list pos:start="315:42" pos:end="315:53">(<argument pos:start="315:43" pos:end="315:46"><expr pos:start="315:43" pos:end="315:46"><name pos:start="315:43" pos:end="315:46">arg0</name></expr></argument>, <argument pos:start="315:49" pos:end="315:52"><expr pos:start="315:49" pos:end="315:52"><operator pos:start="315:49" pos:end="315:49">&amp;</operator><name pos:start="315:50" pos:end="315:52">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="317:13" pos:end="319:26"><if pos:start="317:13" pos:end="319:26">if <condition pos:start="317:16" pos:end="317:36">(<expr pos:start="317:17" pos:end="317:35"><name pos:start="317:17" pos:end="317:19">ret</name> <operator pos:start="317:21" pos:end="317:22">==</operator> <operator pos:start="317:24" pos:end="317:24">(</operator><name pos:start="317:25" pos:end="317:32">uint32_t</name><operator pos:start="317:33" pos:end="317:33">)</operator><operator pos:start="317:34" pos:end="317:34">-</operator><literal type="number" pos:start="317:35" pos:end="317:35">1</literal></expr>)</condition><block type="pseudo" pos:start="319:17" pos:end="319:26"><block_content pos:start="319:17" pos:end="319:26">

                <return pos:start="319:17" pos:end="319:26">return <expr pos:start="319:24" pos:end="319:25"><operator pos:start="319:24" pos:end="319:24">-</operator><literal type="number" pos:start="319:25" pos:end="319:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <return pos:start="321:13" pos:end="321:31">return <expr pos:start="321:20" pos:end="321:30"><name pos:start="321:20" pos:end="321:30"><name pos:start="321:20" pos:end="321:22">buf</name><operator pos:start="321:23" pos:end="321:23">.</operator><name pos:start="321:24" pos:end="321:30">st_size</name></name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="325:5" pos:end="325:27">case <expr pos:start="325:10" pos:end="325:26"><name pos:start="325:10" pos:end="325:26">TARGET_SYS_TMPNAM</name></expr>:</case>

        <comment type="block" pos:start="327:9" pos:end="327:36">/* XXX: Not implemented.  */</comment>

        <return pos:start="329:9" pos:end="329:18">return <expr pos:start="329:16" pos:end="329:17"><operator pos:start="329:16" pos:end="329:16">-</operator><literal type="number" pos:start="329:17" pos:end="329:17">1</literal></expr>;</return>

    <case pos:start="331:5" pos:end="331:27">case <expr pos:start="331:10" pos:end="331:26"><name pos:start="331:10" pos:end="331:26">TARGET_SYS_REMOVE</name></expr>:</case>

        <expr_stmt pos:start="333:9" pos:end="333:19"><expr pos:start="333:9" pos:end="333:18"><call pos:start="333:9" pos:end="333:18"><name pos:start="333:9" pos:end="333:15">GET_ARG</name><argument_list pos:start="333:16" pos:end="333:18">(<argument pos:start="333:17" pos:end="333:17"><expr pos:start="333:17" pos:end="333:17"><literal type="number" pos:start="333:17" pos:end="333:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:19"><expr pos:start="335:9" pos:end="335:18"><call pos:start="335:9" pos:end="335:18"><name pos:start="335:9" pos:end="335:15">GET_ARG</name><argument_list pos:start="335:16" pos:end="335:18">(<argument pos:start="335:17" pos:end="335:17"><expr pos:start="335:17" pos:end="335:17"><literal type="number" pos:start="335:17" pos:end="335:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="337:9" pos:end="359:9"><if pos:start="337:9" pos:end="343:9">if <condition pos:start="337:12" pos:end="337:31">(<expr pos:start="337:13" pos:end="337:30"><call pos:start="337:13" pos:end="337:30"><name pos:start="337:13" pos:end="337:28">use_gdb_syscalls</name><argument_list pos:start="337:29" pos:end="337:30">()</argument_list></call></expr>)</condition> <block pos:start="337:33" pos:end="343:9">{<block_content pos:start="339:13" pos:end="341:31">

            <expr_stmt pos:start="339:13" pos:end="339:72"><expr pos:start="339:13" pos:end="339:71"><call pos:start="339:13" pos:end="339:71"><name pos:start="339:13" pos:end="339:26">gdb_do_syscall</name><argument_list pos:start="339:27" pos:end="339:71">(<argument pos:start="339:28" pos:end="339:38"><expr pos:start="339:28" pos:end="339:38"><name pos:start="339:28" pos:end="339:38">arm_semi_cb</name></expr></argument>, <argument pos:start="339:41" pos:end="339:51"><expr pos:start="339:41" pos:end="339:51"><literal type="string" pos:start="339:41" pos:end="339:51">"unlink,%s"</literal></expr></argument>, <argument pos:start="339:54" pos:end="339:57"><expr pos:start="339:54" pos:end="339:57"><name pos:start="339:54" pos:end="339:57">arg0</name></expr></argument>, <argument pos:start="339:60" pos:end="339:70"><expr pos:start="339:60" pos:end="339:70"><operator pos:start="339:60" pos:end="339:60">(</operator><name pos:start="339:61" pos:end="339:63">int</name><operator pos:start="339:64" pos:end="339:64">)</operator><name pos:start="339:65" pos:end="339:68">arg1</name><operator pos:start="339:69" pos:end="339:69">+</operator><literal type="number" pos:start="339:70" pos:end="339:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:31"><expr pos:start="341:13" pos:end="341:30"><name pos:start="341:13" pos:end="341:15">ret</name> <operator pos:start="341:17" pos:end="341:17">=</operator> <name pos:start="341:19" pos:end="341:30"><name pos:start="341:19" pos:end="341:21">env</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:27">regs</name><index pos:start="341:28" pos:end="341:30">[<expr pos:start="341:29" pos:end="341:29"><literal type="number" pos:start="341:29" pos:end="341:29">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="343:11" pos:end="359:9">else <block pos:start="343:16" pos:end="359:9">{<block_content pos:start="345:13" pos:end="357:36">

            <expr_stmt pos:start="345:13" pos:end="345:39"><expr pos:start="345:13" pos:end="345:38"><name pos:start="345:13" pos:end="345:13">s</name> <operator pos:start="345:15" pos:end="345:15">=</operator> <call pos:start="345:17" pos:end="345:38"><name pos:start="345:17" pos:end="345:32">lock_user_string</name><argument_list pos:start="345:33" pos:end="345:38">(<argument pos:start="345:34" pos:end="345:37"><expr pos:start="345:34" pos:end="345:37"><name pos:start="345:34" pos:end="345:37">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="347:13" pos:end="353:13"><if pos:start="347:13" pos:end="353:13">if <condition pos:start="347:16" pos:end="347:19">(<expr pos:start="347:17" pos:end="347:18"><operator pos:start="347:17" pos:end="347:17">!</operator><name pos:start="347:18" pos:end="347:18">s</name></expr>)</condition> <block pos:start="347:21" pos:end="353:13">{<block_content pos:start="351:17" pos:end="351:36">

                <comment type="block" pos:start="349:17" pos:end="349:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="351:17" pos:end="351:36">return <expr pos:start="351:24" pos:end="351:35"><operator pos:start="351:24" pos:end="351:24">(</operator><name pos:start="351:25" pos:end="351:32">uint32_t</name><operator pos:start="351:33" pos:end="351:33">)</operator><operator pos:start="351:34" pos:end="351:34">-</operator><literal type="number" pos:start="351:35" pos:end="351:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:48"><expr pos:start="355:13" pos:end="355:47"><name pos:start="355:13" pos:end="355:15">ret</name> <operator pos:start="355:17" pos:end="355:17">=</operator>  <call pos:start="355:20" pos:end="355:47"><name pos:start="355:20" pos:end="355:32">set_swi_errno</name><argument_list pos:start="355:33" pos:end="355:47">(<argument pos:start="355:34" pos:end="355:35"><expr pos:start="355:34" pos:end="355:35"><name pos:start="355:34" pos:end="355:35">ts</name></expr></argument>, <argument pos:start="355:38" pos:end="355:46"><expr pos:start="355:38" pos:end="355:46"><call pos:start="355:38" pos:end="355:46"><name pos:start="355:38" pos:end="355:43">remove</name><argument_list pos:start="355:44" pos:end="355:46">(<argument pos:start="355:45" pos:end="355:45"><expr pos:start="355:45" pos:end="355:45"><name pos:start="355:45" pos:end="355:45">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:36"><expr pos:start="357:13" pos:end="357:35"><call pos:start="357:13" pos:end="357:35"><name pos:start="357:13" pos:end="357:23">unlock_user</name><argument_list pos:start="357:24" pos:end="357:35">(<argument pos:start="357:25" pos:end="357:25"><expr pos:start="357:25" pos:end="357:25"><name pos:start="357:25" pos:end="357:25">s</name></expr></argument>, <argument pos:start="357:28" pos:end="357:31"><expr pos:start="357:28" pos:end="357:31"><name pos:start="357:28" pos:end="357:31">arg0</name></expr></argument>, <argument pos:start="357:34" pos:end="357:34"><expr pos:start="357:34" pos:end="357:34"><literal type="number" pos:start="357:34" pos:end="357:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="361:9" pos:end="361:19">return <expr pos:start="361:16" pos:end="361:18"><name pos:start="361:16" pos:end="361:18">ret</name></expr>;</return>

    <case pos:start="363:5" pos:end="363:27">case <expr pos:start="363:10" pos:end="363:26"><name pos:start="363:10" pos:end="363:26">TARGET_SYS_RENAME</name></expr>:</case>

        <expr_stmt pos:start="365:9" pos:end="365:19"><expr pos:start="365:9" pos:end="365:18"><call pos:start="365:9" pos:end="365:18"><name pos:start="365:9" pos:end="365:15">GET_ARG</name><argument_list pos:start="365:16" pos:end="365:18">(<argument pos:start="365:17" pos:end="365:17"><expr pos:start="365:17" pos:end="365:17"><literal type="number" pos:start="365:17" pos:end="365:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:19"><expr pos:start="367:9" pos:end="367:18"><call pos:start="367:9" pos:end="367:18"><name pos:start="367:9" pos:end="367:15">GET_ARG</name><argument_list pos:start="367:16" pos:end="367:18">(<argument pos:start="367:17" pos:end="367:17"><expr pos:start="367:17" pos:end="367:17"><literal type="number" pos:start="367:17" pos:end="367:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:19"><expr pos:start="369:9" pos:end="369:18"><call pos:start="369:9" pos:end="369:18"><name pos:start="369:9" pos:end="369:15">GET_ARG</name><argument_list pos:start="369:16" pos:end="369:18">(<argument pos:start="369:17" pos:end="369:17"><expr pos:start="369:17" pos:end="369:17"><literal type="number" pos:start="369:17" pos:end="369:17">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:19"><expr pos:start="371:9" pos:end="371:18"><call pos:start="371:9" pos:end="371:18"><name pos:start="371:9" pos:end="371:15">GET_ARG</name><argument_list pos:start="371:16" pos:end="371:18">(<argument pos:start="371:17" pos:end="371:17"><expr pos:start="371:17" pos:end="371:17"><literal type="number" pos:start="371:17" pos:end="371:17">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="373:9" pos:end="409:9"><if pos:start="373:9" pos:end="381:9">if <condition pos:start="373:12" pos:end="373:31">(<expr pos:start="373:13" pos:end="373:30"><call pos:start="373:13" pos:end="373:30"><name pos:start="373:13" pos:end="373:28">use_gdb_syscalls</name><argument_list pos:start="373:29" pos:end="373:30">()</argument_list></call></expr>)</condition> <block pos:start="373:33" pos:end="381:9">{<block_content pos:start="375:13" pos:end="379:32">

            <expr_stmt pos:start="375:13" pos:end="377:65"><expr pos:start="375:13" pos:end="377:64"><call pos:start="375:13" pos:end="377:64"><name pos:start="375:13" pos:end="375:26">gdb_do_syscall</name><argument_list pos:start="375:27" pos:end="377:64">(<argument pos:start="375:28" pos:end="375:38"><expr pos:start="375:28" pos:end="375:38"><name pos:start="375:28" pos:end="375:38">arm_semi_cb</name></expr></argument>, <argument pos:start="375:41" pos:end="375:54"><expr pos:start="375:41" pos:end="375:54"><literal type="string" pos:start="375:41" pos:end="375:54">"rename,%s,%s"</literal></expr></argument>,

                           <argument pos:start="377:28" pos:end="377:31"><expr pos:start="377:28" pos:end="377:31"><name pos:start="377:28" pos:end="377:31">arg0</name></expr></argument>, <argument pos:start="377:34" pos:end="377:44"><expr pos:start="377:34" pos:end="377:44"><operator pos:start="377:34" pos:end="377:34">(</operator><name pos:start="377:35" pos:end="377:37">int</name><operator pos:start="377:38" pos:end="377:38">)</operator><name pos:start="377:39" pos:end="377:42">arg1</name><operator pos:start="377:43" pos:end="377:43">+</operator><literal type="number" pos:start="377:44" pos:end="377:44">1</literal></expr></argument>, <argument pos:start="377:47" pos:end="377:50"><expr pos:start="377:47" pos:end="377:50"><name pos:start="377:47" pos:end="377:50">arg2</name></expr></argument>, <argument pos:start="377:53" pos:end="377:63"><expr pos:start="377:53" pos:end="377:63"><operator pos:start="377:53" pos:end="377:53">(</operator><name pos:start="377:54" pos:end="377:56">int</name><operator pos:start="377:57" pos:end="377:57">)</operator><name pos:start="377:58" pos:end="377:61">arg3</name><operator pos:start="377:62" pos:end="377:62">+</operator><literal type="number" pos:start="377:63" pos:end="377:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="379:13" pos:end="379:32">return <expr pos:start="379:20" pos:end="379:31"><name pos:start="379:20" pos:end="379:31"><name pos:start="379:20" pos:end="379:22">env</name><operator pos:start="379:23" pos:end="379:24">-&gt;</operator><name pos:start="379:25" pos:end="379:28">regs</name><index pos:start="379:29" pos:end="379:31">[<expr pos:start="379:30" pos:end="379:30"><literal type="number" pos:start="379:30" pos:end="379:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="381:11" pos:end="409:9">else <block pos:start="381:16" pos:end="409:9">{<block_content pos:start="383:13" pos:end="407:23">

            <decl_stmt pos:start="383:13" pos:end="383:21"><decl pos:start="383:13" pos:end="383:20"><type pos:start="383:13" pos:end="383:18"><name pos:start="383:13" pos:end="383:16">char</name> <modifier pos:start="383:18" pos:end="383:18">*</modifier></type><name pos:start="383:19" pos:end="383:20">s2</name></decl>;</decl_stmt>

            <expr_stmt pos:start="385:13" pos:end="385:39"><expr pos:start="385:13" pos:end="385:38"><name pos:start="385:13" pos:end="385:13">s</name> <operator pos:start="385:15" pos:end="385:15">=</operator> <call pos:start="385:17" pos:end="385:38"><name pos:start="385:17" pos:end="385:32">lock_user_string</name><argument_list pos:start="385:33" pos:end="385:38">(<argument pos:start="385:34" pos:end="385:37"><expr pos:start="385:34" pos:end="385:37"><name pos:start="385:34" pos:end="385:37">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:40"><expr pos:start="387:13" pos:end="387:39"><name pos:start="387:13" pos:end="387:14">s2</name> <operator pos:start="387:16" pos:end="387:16">=</operator> <call pos:start="387:18" pos:end="387:39"><name pos:start="387:18" pos:end="387:33">lock_user_string</name><argument_list pos:start="387:34" pos:end="387:39">(<argument pos:start="387:35" pos:end="387:38"><expr pos:start="387:35" pos:end="387:38"><name pos:start="387:35" pos:end="387:38">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="389:13" pos:end="397:55"><if pos:start="389:13" pos:end="393:35">if <condition pos:start="389:16" pos:end="389:26">(<expr pos:start="389:17" pos:end="389:25"><operator pos:start="389:17" pos:end="389:17">!</operator><name pos:start="389:18" pos:end="389:18">s</name> <operator pos:start="389:20" pos:end="389:21">||</operator> <operator pos:start="389:23" pos:end="389:23">!</operator><name pos:start="389:24" pos:end="389:25">s2</name></expr>)</condition><block type="pseudo" pos:start="393:17" pos:end="393:35"><block_content pos:start="393:17" pos:end="393:35">

                <comment type="block" pos:start="391:17" pos:end="391:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <expr_stmt pos:start="393:17" pos:end="393:35"><expr pos:start="393:17" pos:end="393:34"><name pos:start="393:17" pos:end="393:19">ret</name> <operator pos:start="393:21" pos:end="393:21">=</operator> <operator pos:start="393:23" pos:end="393:23">(</operator><name pos:start="393:24" pos:end="393:31">uint32_t</name><operator pos:start="393:32" pos:end="393:32">)</operator><operator pos:start="393:33" pos:end="393:33">-</operator><literal type="number" pos:start="393:34" pos:end="393:34">1</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="395:13" pos:end="397:55">else<block type="pseudo" pos:start="397:17" pos:end="397:55"><block_content pos:start="397:17" pos:end="397:55">

                <expr_stmt pos:start="397:17" pos:end="397:55"><expr pos:start="397:17" pos:end="397:54"><name pos:start="397:17" pos:end="397:19">ret</name> <operator pos:start="397:21" pos:end="397:21">=</operator> <call pos:start="397:23" pos:end="397:54"><name pos:start="397:23" pos:end="397:35">set_swi_errno</name><argument_list pos:start="397:36" pos:end="397:54">(<argument pos:start="397:37" pos:end="397:38"><expr pos:start="397:37" pos:end="397:38"><name pos:start="397:37" pos:end="397:38">ts</name></expr></argument>, <argument pos:start="397:41" pos:end="397:53"><expr pos:start="397:41" pos:end="397:53"><call pos:start="397:41" pos:end="397:53"><name pos:start="397:41" pos:end="397:46">rename</name><argument_list pos:start="397:47" pos:end="397:53">(<argument pos:start="397:48" pos:end="397:48"><expr pos:start="397:48" pos:end="397:48"><name pos:start="397:48" pos:end="397:48">s</name></expr></argument>, <argument pos:start="397:51" pos:end="397:52"><expr pos:start="397:51" pos:end="397:52"><name pos:start="397:51" pos:end="397:52">s2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="399:13" pos:end="401:41"><if pos:start="399:13" pos:end="401:41">if <condition pos:start="399:16" pos:end="399:19">(<expr pos:start="399:17" pos:end="399:18"><name pos:start="399:17" pos:end="399:18">s2</name></expr>)</condition><block type="pseudo" pos:start="401:17" pos:end="401:41"><block_content pos:start="401:17" pos:end="401:41">

                <expr_stmt pos:start="401:17" pos:end="401:41"><expr pos:start="401:17" pos:end="401:40"><call pos:start="401:17" pos:end="401:40"><name pos:start="401:17" pos:end="401:27">unlock_user</name><argument_list pos:start="401:28" pos:end="401:40">(<argument pos:start="401:29" pos:end="401:30"><expr pos:start="401:29" pos:end="401:30"><name pos:start="401:29" pos:end="401:30">s2</name></expr></argument>, <argument pos:start="401:33" pos:end="401:36"><expr pos:start="401:33" pos:end="401:36"><name pos:start="401:33" pos:end="401:36">arg2</name></expr></argument>, <argument pos:start="401:39" pos:end="401:39"><expr pos:start="401:39" pos:end="401:39"><literal type="number" pos:start="401:39" pos:end="401:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="403:13" pos:end="405:40"><if pos:start="403:13" pos:end="405:40">if <condition pos:start="403:16" pos:end="403:18">(<expr pos:start="403:17" pos:end="403:17"><name pos:start="403:17" pos:end="403:17">s</name></expr>)</condition><block type="pseudo" pos:start="405:17" pos:end="405:40"><block_content pos:start="405:17" pos:end="405:40">

                <expr_stmt pos:start="405:17" pos:end="405:40"><expr pos:start="405:17" pos:end="405:39"><call pos:start="405:17" pos:end="405:39"><name pos:start="405:17" pos:end="405:27">unlock_user</name><argument_list pos:start="405:28" pos:end="405:39">(<argument pos:start="405:29" pos:end="405:29"><expr pos:start="405:29" pos:end="405:29"><name pos:start="405:29" pos:end="405:29">s</name></expr></argument>, <argument pos:start="405:32" pos:end="405:35"><expr pos:start="405:32" pos:end="405:35"><name pos:start="405:32" pos:end="405:35">arg0</name></expr></argument>, <argument pos:start="405:38" pos:end="405:38"><expr pos:start="405:38" pos:end="405:38"><literal type="number" pos:start="405:38" pos:end="405:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="407:13" pos:end="407:23">return <expr pos:start="407:20" pos:end="407:22"><name pos:start="407:20" pos:end="407:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="411:5" pos:end="411:26">case <expr pos:start="411:10" pos:end="411:25"><name pos:start="411:10" pos:end="411:25">TARGET_SYS_CLOCK</name></expr>:</case>

        <return pos:start="413:9" pos:end="413:48">return <expr pos:start="413:16" pos:end="413:47"><call pos:start="413:16" pos:end="413:22"><name pos:start="413:16" pos:end="413:20">clock</name><argument_list pos:start="413:21" pos:end="413:22">()</argument_list></call> <operator pos:start="413:24" pos:end="413:24">/</operator> <operator pos:start="413:26" pos:end="413:26">(</operator><name pos:start="413:27" pos:end="413:40">CLOCKS_PER_SEC</name> <operator pos:start="413:42" pos:end="413:42">/</operator> <literal type="number" pos:start="413:44" pos:end="413:46">100</literal><operator pos:start="413:47" pos:end="413:47">)</operator></expr>;</return>

    <case pos:start="415:5" pos:end="415:25">case <expr pos:start="415:10" pos:end="415:24"><name pos:start="415:10" pos:end="415:24">TARGET_SYS_TIME</name></expr>:</case>

        <return pos:start="417:9" pos:end="417:45">return <expr pos:start="417:16" pos:end="417:44"><call pos:start="417:16" pos:end="417:44"><name pos:start="417:16" pos:end="417:28">set_swi_errno</name><argument_list pos:start="417:29" pos:end="417:44">(<argument pos:start="417:30" pos:end="417:31"><expr pos:start="417:30" pos:end="417:31"><name pos:start="417:30" pos:end="417:31">ts</name></expr></argument>, <argument pos:start="417:34" pos:end="417:43"><expr pos:start="417:34" pos:end="417:43"><call pos:start="417:34" pos:end="417:43"><name pos:start="417:34" pos:end="417:37">time</name><argument_list pos:start="417:38" pos:end="417:43">(<argument pos:start="417:39" pos:end="417:42"><expr pos:start="417:39" pos:end="417:42"><name pos:start="417:39" pos:end="417:42">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="419:5" pos:end="419:27">case <expr pos:start="419:10" pos:end="419:26"><name pos:start="419:10" pos:end="419:26">TARGET_SYS_SYSTEM</name></expr>:</case>

        <expr_stmt pos:start="421:9" pos:end="421:19"><expr pos:start="421:9" pos:end="421:18"><call pos:start="421:9" pos:end="421:18"><name pos:start="421:9" pos:end="421:15">GET_ARG</name><argument_list pos:start="421:16" pos:end="421:18">(<argument pos:start="421:17" pos:end="421:17"><expr pos:start="421:17" pos:end="421:17"><literal type="number" pos:start="421:17" pos:end="421:17">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:19"><expr pos:start="423:9" pos:end="423:18"><call pos:start="423:9" pos:end="423:18"><name pos:start="423:9" pos:end="423:15">GET_ARG</name><argument_list pos:start="423:16" pos:end="423:18">(<argument pos:start="423:17" pos:end="423:17"><expr pos:start="423:17" pos:end="423:17"><literal type="number" pos:start="423:17" pos:end="423:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="425:9" pos:end="449:9"><if pos:start="425:9" pos:end="431:9">if <condition pos:start="425:12" pos:end="425:31">(<expr pos:start="425:13" pos:end="425:30"><call pos:start="425:13" pos:end="425:30"><name pos:start="425:13" pos:end="425:28">use_gdb_syscalls</name><argument_list pos:start="425:29" pos:end="425:30">()</argument_list></call></expr>)</condition> <block pos:start="425:33" pos:end="431:9">{<block_content pos:start="427:13" pos:end="429:32">

            <expr_stmt pos:start="427:13" pos:end="427:72"><expr pos:start="427:13" pos:end="427:71"><call pos:start="427:13" pos:end="427:71"><name pos:start="427:13" pos:end="427:26">gdb_do_syscall</name><argument_list pos:start="427:27" pos:end="427:71">(<argument pos:start="427:28" pos:end="427:38"><expr pos:start="427:28" pos:end="427:38"><name pos:start="427:28" pos:end="427:38">arm_semi_cb</name></expr></argument>, <argument pos:start="427:41" pos:end="427:51"><expr pos:start="427:41" pos:end="427:51"><literal type="string" pos:start="427:41" pos:end="427:51">"system,%s"</literal></expr></argument>, <argument pos:start="427:54" pos:end="427:57"><expr pos:start="427:54" pos:end="427:57"><name pos:start="427:54" pos:end="427:57">arg0</name></expr></argument>, <argument pos:start="427:60" pos:end="427:70"><expr pos:start="427:60" pos:end="427:70"><operator pos:start="427:60" pos:end="427:60">(</operator><name pos:start="427:61" pos:end="427:63">int</name><operator pos:start="427:64" pos:end="427:64">)</operator><name pos:start="427:65" pos:end="427:68">arg1</name><operator pos:start="427:69" pos:end="427:69">+</operator><literal type="number" pos:start="427:70" pos:end="427:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="429:13" pos:end="429:32">return <expr pos:start="429:20" pos:end="429:31"><name pos:start="429:20" pos:end="429:31"><name pos:start="429:20" pos:end="429:22">env</name><operator pos:start="429:23" pos:end="429:24">-&gt;</operator><name pos:start="429:25" pos:end="429:28">regs</name><index pos:start="429:29" pos:end="429:31">[<expr pos:start="429:30" pos:end="429:30"><literal type="number" pos:start="429:30" pos:end="429:30">0</literal></expr>]</index></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="431:11" pos:end="449:9">else <block pos:start="431:16" pos:end="449:9">{<block_content pos:start="433:13" pos:end="447:23">

            <expr_stmt pos:start="433:13" pos:end="433:39"><expr pos:start="433:13" pos:end="433:38"><name pos:start="433:13" pos:end="433:13">s</name> <operator pos:start="433:15" pos:end="433:15">=</operator> <call pos:start="433:17" pos:end="433:38"><name pos:start="433:17" pos:end="433:32">lock_user_string</name><argument_list pos:start="433:33" pos:end="433:38">(<argument pos:start="433:34" pos:end="433:37"><expr pos:start="433:34" pos:end="433:37"><name pos:start="433:34" pos:end="433:37">arg0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="435:13" pos:end="441:13"><if pos:start="435:13" pos:end="441:13">if <condition pos:start="435:16" pos:end="435:19">(<expr pos:start="435:17" pos:end="435:18"><operator pos:start="435:17" pos:end="435:17">!</operator><name pos:start="435:18" pos:end="435:18">s</name></expr>)</condition> <block pos:start="435:21" pos:end="441:13">{<block_content pos:start="439:17" pos:end="439:36">

                <comment type="block" pos:start="437:17" pos:end="437:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="439:17" pos:end="439:36">return <expr pos:start="439:24" pos:end="439:35"><operator pos:start="439:24" pos:end="439:24">(</operator><name pos:start="439:25" pos:end="439:32">uint32_t</name><operator pos:start="439:33" pos:end="439:33">)</operator><operator pos:start="439:34" pos:end="439:34">-</operator><literal type="number" pos:start="439:35" pos:end="439:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:47"><expr pos:start="443:13" pos:end="443:46"><name pos:start="443:13" pos:end="443:15">ret</name> <operator pos:start="443:17" pos:end="443:17">=</operator> <call pos:start="443:19" pos:end="443:46"><name pos:start="443:19" pos:end="443:31">set_swi_errno</name><argument_list pos:start="443:32" pos:end="443:46">(<argument pos:start="443:33" pos:end="443:34"><expr pos:start="443:33" pos:end="443:34"><name pos:start="443:33" pos:end="443:34">ts</name></expr></argument>, <argument pos:start="443:37" pos:end="443:45"><expr pos:start="443:37" pos:end="443:45"><call pos:start="443:37" pos:end="443:45"><name pos:start="443:37" pos:end="443:42">system</name><argument_list pos:start="443:43" pos:end="443:45">(<argument pos:start="443:44" pos:end="443:44"><expr pos:start="443:44" pos:end="443:44"><name pos:start="443:44" pos:end="443:44">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="445:13" pos:end="445:36"><expr pos:start="445:13" pos:end="445:35"><call pos:start="445:13" pos:end="445:35"><name pos:start="445:13" pos:end="445:23">unlock_user</name><argument_list pos:start="445:24" pos:end="445:35">(<argument pos:start="445:25" pos:end="445:25"><expr pos:start="445:25" pos:end="445:25"><name pos:start="445:25" pos:end="445:25">s</name></expr></argument>, <argument pos:start="445:28" pos:end="445:31"><expr pos:start="445:28" pos:end="445:31"><name pos:start="445:28" pos:end="445:31">arg0</name></expr></argument>, <argument pos:start="445:34" pos:end="445:34"><expr pos:start="445:34" pos:end="445:34"><literal type="number" pos:start="445:34" pos:end="445:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="447:13" pos:end="447:23">return <expr pos:start="447:20" pos:end="447:22"><name pos:start="447:20" pos:end="447:22">ret</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="451:5" pos:end="454:0">case <expr pos:start="451:10" pos:end="451:25"><name pos:start="451:10" pos:end="451:25">TARGET_SYS_ERRNO</name></expr>:</case>

<cpp:ifdef pos:start="453:1" pos:end="453:23">#<cpp:directive pos:start="453:2" pos:end="453:6">ifdef</cpp:directive> <name pos:start="453:8" pos:end="453:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <return pos:start="455:9" pos:end="458:0">return <expr pos:start="455:16" pos:end="455:28"><name pos:start="455:16" pos:end="455:28"><name pos:start="455:16" pos:end="455:17">ts</name><operator pos:start="455:18" pos:end="455:19">-&gt;</operator><name pos:start="455:20" pos:end="455:28">swi_errno</name></name></expr>;</return>

<cpp:else pos:start="457:1" pos:end="457:5">#<cpp:directive pos:start="457:2" pos:end="457:5">else</cpp:directive></cpp:else>

        <return pos:start="459:9" pos:end="462:0">return <expr pos:start="459:16" pos:end="459:26"><name pos:start="459:16" pos:end="459:26">syscall_err</name></expr>;</return>

<cpp:endif pos:start="461:1" pos:end="461:6">#<cpp:directive pos:start="461:2" pos:end="461:6">endif</cpp:directive></cpp:endif>

    <case pos:start="463:5" pos:end="463:32">case <expr pos:start="463:10" pos:end="463:31"><name pos:start="463:10" pos:end="463:31">TARGET_SYS_GET_CMDLINE</name></expr>:</case>

        <block pos:start="465:9" pos:end="637:9">{<block_content pos:start="495:13" pos:end="635:26">

            <comment type="block" pos:start="467:13" pos:end="491:15">/* Build a command-line from the original argv.

             *

             * The inputs are:

             *     * arg0, pointer to a buffer of at least the size

             *               specified in arg1.

             *     * arg1, size of the buffer pointed to by arg0 in

             *               bytes.

             *

             * The outputs are:

             *     * arg0, pointer to null-terminated string of the

             *               command line.

             *     * arg1, length of the string pointed to by arg0.

             */</comment>



            <decl_stmt pos:start="495:13" pos:end="495:32"><decl pos:start="495:13" pos:end="495:31"><type pos:start="495:13" pos:end="495:18"><name pos:start="495:13" pos:end="495:16">char</name> <modifier pos:start="495:18" pos:end="495:18">*</modifier></type><name pos:start="495:19" pos:end="495:31">output_buffer</name></decl>;</decl_stmt>

            <decl_stmt pos:start="497:13" pos:end="497:30"><decl pos:start="497:13" pos:end="497:29"><type pos:start="497:13" pos:end="497:18"><name pos:start="497:13" pos:end="497:18">size_t</name></type> <name pos:start="497:20" pos:end="497:29">input_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="499:13" pos:end="499:31"><decl pos:start="499:13" pos:end="499:30"><type pos:start="499:13" pos:end="499:18"><name pos:start="499:13" pos:end="499:18">size_t</name></type> <name pos:start="499:20" pos:end="499:30">output_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="501:13" pos:end="501:27"><decl pos:start="501:13" pos:end="501:26"><type pos:start="501:13" pos:end="501:15"><name pos:start="501:13" pos:end="501:15">int</name></type> <name pos:start="501:17" pos:end="501:22">status</name> <init pos:start="501:24" pos:end="501:26">= <expr pos:start="501:26" pos:end="501:26"><literal type="number" pos:start="501:26" pos:end="501:26">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:23"><expr pos:start="503:13" pos:end="503:22"><call pos:start="503:13" pos:end="503:22"><name pos:start="503:13" pos:end="503:19">GET_ARG</name><argument_list pos:start="503:20" pos:end="503:22">(<argument pos:start="503:21" pos:end="503:21"><expr pos:start="503:21" pos:end="503:21"><literal type="number" pos:start="503:21" pos:end="503:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:23"><expr pos:start="505:13" pos:end="505:22"><call pos:start="505:13" pos:end="505:22"><name pos:start="505:13" pos:end="505:19">GET_ARG</name><argument_list pos:start="505:20" pos:end="505:22">(<argument pos:start="505:21" pos:end="505:21"><expr pos:start="505:21" pos:end="505:21"><literal type="number" pos:start="505:21" pos:end="505:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="512:0"><expr pos:start="507:13" pos:end="507:29"><name pos:start="507:13" pos:end="507:22">input_size</name> <operator pos:start="507:24" pos:end="507:24">=</operator> <name pos:start="507:26" pos:end="507:29">arg1</name></expr>;</expr_stmt>

            <comment type="block" pos:start="509:13" pos:end="509:57">/* Compute the size of the output string.  */</comment>

<cpp:if pos:start="511:1" pos:end="511:30">#<cpp:directive pos:start="511:2" pos:end="511:3">if</cpp:directive> <expr pos:start="511:5" pos:end="511:30"><operator pos:start="511:5" pos:end="511:5">!</operator><call pos:start="511:6" pos:end="511:30"><name pos:start="511:6" pos:end="511:12">defined</name><argument_list pos:start="511:13" pos:end="511:30">(<argument pos:start="511:14" pos:end="511:29"><expr pos:start="511:14" pos:end="511:29"><name pos:start="511:14" pos:end="511:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="513:13" pos:end="522:0"><expr pos:start="513:13" pos:end="519:27"><name pos:start="513:13" pos:end="513:23">output_size</name> <operator pos:start="513:25" pos:end="513:25">=</operator> <call pos:start="513:27" pos:end="513:64"><name pos:start="513:27" pos:end="513:32">strlen</name><argument_list pos:start="513:33" pos:end="513:64">(<argument pos:start="513:34" pos:end="513:63"><expr pos:start="513:34" pos:end="513:63"><name pos:start="513:34" pos:end="513:63"><name pos:start="513:34" pos:end="513:35">ts</name><operator pos:start="513:36" pos:end="513:37">-&gt;</operator><name pos:start="513:38" pos:end="513:46">boot_info</name><operator pos:start="513:47" pos:end="513:48">-&gt;</operator><name pos:start="513:49" pos:end="513:63">kernel_filename</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="515:25" pos:end="515:25">+</operator> <literal type="number" pos:start="515:27" pos:end="517:25">1</literal>  <comment type="block" pos:start="515:30" pos:end="515:53">/* Separating space.  */</comment>

                        <operator pos:start="517:25" pos:end="517:25">+</operator> <call pos:start="517:27" pos:end="517:63"><name pos:start="517:27" pos:end="517:32">strlen</name><argument_list pos:start="517:33" pos:end="517:63">(<argument pos:start="517:34" pos:end="517:62"><expr pos:start="517:34" pos:end="517:62"><name pos:start="517:34" pos:end="517:62"><name pos:start="517:34" pos:end="517:35">ts</name><operator pos:start="517:36" pos:end="517:37">-&gt;</operator><name pos:start="517:38" pos:end="517:46">boot_info</name><operator pos:start="517:47" pos:end="517:48">-&gt;</operator><name pos:start="517:49" pos:end="517:62">kernel_cmdline</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="519:25" pos:end="519:25">+</operator> <literal type="number" pos:start="519:27" pos:end="519:27">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="519:30" pos:end="519:58">/* Terminating null byte.  */</comment>

<cpp:else pos:start="521:1" pos:end="521:5">#<cpp:directive pos:start="521:2" pos:end="521:5">else</cpp:directive></cpp:else>

            <decl_stmt pos:start="523:13" pos:end="523:27"><decl pos:start="523:13" pos:end="523:26"><type pos:start="523:13" pos:end="523:24"><name pos:start="523:13" pos:end="523:20">unsigned</name> <name pos:start="523:22" pos:end="523:24">int</name></type> <name pos:start="523:26" pos:end="523:26">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="527:13" pos:end="527:66"><expr pos:start="527:13" pos:end="527:65"><name pos:start="527:13" pos:end="527:23">output_size</name> <operator pos:start="527:25" pos:end="527:25">=</operator> <name pos:start="527:27" pos:end="527:43"><name pos:start="527:27" pos:end="527:28">ts</name><operator pos:start="527:29" pos:end="527:30">-&gt;</operator><name pos:start="527:31" pos:end="527:34">info</name><operator pos:start="527:35" pos:end="527:36">-&gt;</operator><name pos:start="527:37" pos:end="527:43">arg_end</name></name> <operator pos:start="527:45" pos:end="527:45">-</operator> <name pos:start="527:47" pos:end="527:65"><name pos:start="527:47" pos:end="527:48">ts</name><operator pos:start="527:49" pos:end="527:50">-&gt;</operator><name pos:start="527:51" pos:end="527:54">info</name><operator pos:start="527:55" pos:end="527:56">-&gt;</operator><name pos:start="527:57" pos:end="527:65">arg_start</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="529:13" pos:end="540:0"><if pos:start="529:13" pos:end="540:0">if <condition pos:start="529:16" pos:end="529:29">(<expr pos:start="529:17" pos:end="529:28"><operator pos:start="529:17" pos:end="529:17">!</operator><name pos:start="529:18" pos:end="529:28">output_size</name></expr>)</condition> <block pos:start="529:31" pos:end="540:0">{<block_content pos:start="535:17" pos:end="535:32">

                <comment type="block" pos:start="531:17" pos:end="533:53">/* We special-case the "empty command line" case (argc==0).

                   Just provide the terminating 0. */</comment>

                <expr_stmt pos:start="535:17" pos:end="535:32"><expr pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:27">output_size</name> <operator pos:start="535:29" pos:end="535:29">=</operator> <literal type="number" pos:start="535:31" pos:end="535:31">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="539:1" pos:end="539:6">#<cpp:directive pos:start="539:2" pos:end="539:6">endif</cpp:directive></cpp:endif>



            <if_stmt pos:start="543:13" pos:end="549:13"><if pos:start="543:13" pos:end="549:13">if <condition pos:start="543:16" pos:end="543:41">(<expr pos:start="543:17" pos:end="543:40"><name pos:start="543:17" pos:end="543:27">output_size</name> <operator pos:start="543:29" pos:end="543:29">&gt;</operator> <name pos:start="543:31" pos:end="543:40">input_size</name></expr>)</condition> <block pos:start="543:43" pos:end="549:13">{<block_content pos:start="547:17" pos:end="547:26">

                 <comment type="block" pos:start="545:18" pos:end="545:73">/* Not enough space to store command-line arguments.  */</comment>

                <return pos:start="547:17" pos:end="547:26">return <expr pos:start="547:24" pos:end="547:25"><operator pos:start="547:24" pos:end="547:24">-</operator><literal type="number" pos:start="547:25" pos:end="547:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="553:13" pos:end="553:50">/* Adjust the command-line length.  */</comment>

            <if_stmt pos:start="555:13" pos:end="561:13"><if pos:start="555:13" pos:end="561:13">if <condition pos:start="555:16" pos:end="555:44">(<expr pos:start="555:17" pos:end="555:43"><call pos:start="555:17" pos:end="555:43"><name pos:start="555:17" pos:end="555:23">SET_ARG</name><argument_list pos:start="555:24" pos:end="555:43">(<argument pos:start="555:25" pos:end="555:25"><expr pos:start="555:25" pos:end="555:25"><literal type="number" pos:start="555:25" pos:end="555:25">1</literal></expr></argument>, <argument pos:start="555:28" pos:end="555:42"><expr pos:start="555:28" pos:end="555:42"><name pos:start="555:28" pos:end="555:38">output_size</name> <operator pos:start="555:40" pos:end="555:40">-</operator> <literal type="number" pos:start="555:42" pos:end="555:42">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="555:46" pos:end="561:13">{<block_content pos:start="559:17" pos:end="559:26">

                <comment type="block" pos:start="557:17" pos:end="557:59">/* Couldn't write back to argument block */</comment>

                <return pos:start="559:17" pos:end="559:26">return <expr pos:start="559:24" pos:end="559:25"><operator pos:start="559:24" pos:end="559:24">-</operator><literal type="number" pos:start="559:25" pos:end="559:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="565:13" pos:end="565:51">/* Lock the buffer on the ARM side.  */</comment>

            <expr_stmt pos:start="567:13" pos:end="567:74"><expr pos:start="567:13" pos:end="567:73"><name pos:start="567:13" pos:end="567:25">output_buffer</name> <operator pos:start="567:27" pos:end="567:27">=</operator> <call pos:start="567:29" pos:end="567:73"><name pos:start="567:29" pos:end="567:37">lock_user</name><argument_list pos:start="567:38" pos:end="567:73">(<argument pos:start="567:39" pos:end="567:50"><expr pos:start="567:39" pos:end="567:50"><name pos:start="567:39" pos:end="567:50">VERIFY_WRITE</name></expr></argument>, <argument pos:start="567:53" pos:end="567:56"><expr pos:start="567:53" pos:end="567:56"><name pos:start="567:53" pos:end="567:56">arg0</name></expr></argument>, <argument pos:start="567:59" pos:end="567:69"><expr pos:start="567:59" pos:end="567:69"><name pos:start="567:59" pos:end="567:69">output_size</name></expr></argument>, <argument pos:start="567:72" pos:end="567:72"><expr pos:start="567:72" pos:end="567:72"><literal type="number" pos:start="567:72" pos:end="567:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="569:13" pos:end="580:0"><if pos:start="569:13" pos:end="580:0">if <condition pos:start="569:16" pos:end="569:31">(<expr pos:start="569:17" pos:end="569:30"><operator pos:start="569:17" pos:end="569:17">!</operator><name pos:start="569:18" pos:end="569:30">output_buffer</name></expr>)</condition> <block pos:start="569:33" pos:end="580:0">{<block_content pos:start="571:17" pos:end="571:26">

                <return pos:start="571:17" pos:end="571:26">return <expr pos:start="571:24" pos:end="571:25"><operator pos:start="571:24" pos:end="571:24">-</operator><literal type="number" pos:start="571:25" pos:end="571:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="577:13" pos:end="577:51">/* Copy the command-line arguments.  */</comment>

<cpp:if pos:start="579:1" pos:end="579:30">#<cpp:directive pos:start="579:2" pos:end="579:3">if</cpp:directive> <expr pos:start="579:5" pos:end="579:30"><operator pos:start="579:5" pos:end="579:5">!</operator><call pos:start="579:6" pos:end="579:30"><name pos:start="579:6" pos:end="579:12">defined</name><argument_list pos:start="579:13" pos:end="579:30">(<argument pos:start="579:14" pos:end="579:29"><expr pos:start="579:14" pos:end="579:29"><name pos:start="579:14" pos:end="579:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="581:13" pos:end="581:80"><expr pos:start="581:13" pos:end="581:79"><call pos:start="581:13" pos:end="581:79"><name pos:start="581:13" pos:end="581:19">pstrcpy</name><argument_list pos:start="581:20" pos:end="581:79">(<argument pos:start="581:21" pos:end="581:33"><expr pos:start="581:21" pos:end="581:33"><name pos:start="581:21" pos:end="581:33">output_buffer</name></expr></argument>, <argument pos:start="581:36" pos:end="581:46"><expr pos:start="581:36" pos:end="581:46"><name pos:start="581:36" pos:end="581:46">output_size</name></expr></argument>, <argument pos:start="581:49" pos:end="581:78"><expr pos:start="581:49" pos:end="581:78"><name pos:start="581:49" pos:end="581:78"><name pos:start="581:49" pos:end="581:50">ts</name><operator pos:start="581:51" pos:end="581:52">-&gt;</operator><name pos:start="581:53" pos:end="581:61">boot_info</name><operator pos:start="581:62" pos:end="581:63">-&gt;</operator><name pos:start="581:64" pos:end="581:78">kernel_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:53"><expr pos:start="583:13" pos:end="583:52"><call pos:start="583:13" pos:end="583:52"><name pos:start="583:13" pos:end="583:19">pstrcat</name><argument_list pos:start="583:20" pos:end="583:52">(<argument pos:start="583:21" pos:end="583:33"><expr pos:start="583:21" pos:end="583:33"><name pos:start="583:21" pos:end="583:33">output_buffer</name></expr></argument>, <argument pos:start="583:36" pos:end="583:46"><expr pos:start="583:36" pos:end="583:46"><name pos:start="583:36" pos:end="583:46">output_size</name></expr></argument>, <argument pos:start="583:49" pos:end="583:51"><expr pos:start="583:49" pos:end="583:51"><literal type="string" pos:start="583:49" pos:end="583:51">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="585:13" pos:end="588:0"><expr pos:start="585:13" pos:end="585:78"><call pos:start="585:13" pos:end="585:78"><name pos:start="585:13" pos:end="585:19">pstrcat</name><argument_list pos:start="585:20" pos:end="585:78">(<argument pos:start="585:21" pos:end="585:33"><expr pos:start="585:21" pos:end="585:33"><name pos:start="585:21" pos:end="585:33">output_buffer</name></expr></argument>, <argument pos:start="585:36" pos:end="585:46"><expr pos:start="585:36" pos:end="585:46"><name pos:start="585:36" pos:end="585:46">output_size</name></expr></argument>, <argument pos:start="585:49" pos:end="585:77"><expr pos:start="585:49" pos:end="585:77"><name pos:start="585:49" pos:end="585:77"><name pos:start="585:49" pos:end="585:50">ts</name><operator pos:start="585:51" pos:end="585:52">-&gt;</operator><name pos:start="585:53" pos:end="585:61">boot_info</name><operator pos:start="585:62" pos:end="585:63">-&gt;</operator><name pos:start="585:64" pos:end="585:77">kernel_cmdline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="587:1" pos:end="587:5">#<cpp:directive pos:start="587:2" pos:end="587:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="589:13" pos:end="597:13"><if pos:start="589:13" pos:end="597:13">if <condition pos:start="589:16" pos:end="589:33">(<expr pos:start="589:17" pos:end="589:32"><name pos:start="589:17" pos:end="589:27">output_size</name> <operator pos:start="589:29" pos:end="589:30">==</operator> <literal type="number" pos:start="589:32" pos:end="589:32">1</literal></expr>)</condition> <block pos:start="589:35" pos:end="597:13">{<block_content pos:start="593:17" pos:end="595:25">

                <comment type="block" pos:start="591:17" pos:end="591:42">/* Empty command-line.  */</comment>

                <expr_stmt pos:start="593:17" pos:end="593:40"><expr pos:start="593:17" pos:end="593:39"><name pos:start="593:17" pos:end="593:32"><name pos:start="593:17" pos:end="593:29">output_buffer</name><index pos:start="593:30" pos:end="593:32">[<expr pos:start="593:31" pos:end="593:31"><literal type="number" pos:start="593:31" pos:end="593:31">0</literal></expr>]</index></name> <operator pos:start="593:34" pos:end="593:34">=</operator> <literal type="char" pos:start="593:36" pos:end="593:39">'\0'</literal></expr>;</expr_stmt>

                <goto pos:start="595:17" pos:end="595:25">goto <name pos:start="595:22" pos:end="595:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="601:13" pos:end="609:13"><if pos:start="601:13" pos:end="609:13">if <condition pos:start="601:16" pos:end="603:44">(<expr pos:start="601:17" pos:end="603:43"><call pos:start="601:17" pos:end="603:43"><name pos:start="601:17" pos:end="601:30">copy_from_user</name><argument_list pos:start="601:31" pos:end="603:43">(<argument pos:start="601:32" pos:end="601:44"><expr pos:start="601:32" pos:end="601:44"><name pos:start="601:32" pos:end="601:44">output_buffer</name></expr></argument>, <argument pos:start="601:47" pos:end="601:65"><expr pos:start="601:47" pos:end="601:65"><name pos:start="601:47" pos:end="601:65"><name pos:start="601:47" pos:end="601:48">ts</name><operator pos:start="601:49" pos:end="601:50">-&gt;</operator><name pos:start="601:51" pos:end="601:54">info</name><operator pos:start="601:55" pos:end="601:56">-&gt;</operator><name pos:start="601:57" pos:end="601:65">arg_start</name></name></expr></argument>,

                               <argument pos:start="603:32" pos:end="603:42"><expr pos:start="603:32" pos:end="603:42"><name pos:start="603:32" pos:end="603:42">output_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="603:46" pos:end="609:13">{<block_content pos:start="605:17" pos:end="607:25">

                <expr_stmt pos:start="605:17" pos:end="605:28"><expr pos:start="605:17" pos:end="605:27"><name pos:start="605:17" pos:end="605:22">status</name> <operator pos:start="605:24" pos:end="605:24">=</operator> <operator pos:start="605:26" pos:end="605:26">-</operator><literal type="number" pos:start="605:27" pos:end="605:27">1</literal></expr>;</expr_stmt>

                <goto pos:start="607:17" pos:end="607:25">goto <name pos:start="607:22" pos:end="607:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="613:13" pos:end="613:54">/* Separate arguments by white spaces.  */</comment>

            <for pos:start="615:13" pos:end="623:13">for <control pos:start="615:17" pos:end="615:49">(<init pos:start="615:18" pos:end="615:23"><expr pos:start="615:18" pos:end="615:22"><name pos:start="615:18" pos:end="615:18">i</name> <operator pos:start="615:20" pos:end="615:20">=</operator> <literal type="number" pos:start="615:22" pos:end="615:22">0</literal></expr>;</init> <condition pos:start="615:25" pos:end="615:44"><expr pos:start="615:25" pos:end="615:43"><name pos:start="615:25" pos:end="615:25">i</name> <operator pos:start="615:27" pos:end="615:27">&lt;</operator> <name pos:start="615:29" pos:end="615:39">output_size</name> <operator pos:start="615:41" pos:end="615:41">-</operator> <literal type="number" pos:start="615:43" pos:end="615:43">1</literal></expr>;</condition> <incr pos:start="615:46" pos:end="615:48"><expr pos:start="615:46" pos:end="615:48"><name pos:start="615:46" pos:end="615:46">i</name><operator pos:start="615:47" pos:end="615:48">++</operator></expr></incr>)</control> <block pos:start="615:51" pos:end="623:13">{<block_content pos:start="617:17" pos:end="621:17">

                <if_stmt pos:start="617:17" pos:end="621:17"><if pos:start="617:17" pos:end="621:17">if <condition pos:start="617:20" pos:end="617:42">(<expr pos:start="617:21" pos:end="617:41"><name pos:start="617:21" pos:end="617:36"><name pos:start="617:21" pos:end="617:33">output_buffer</name><index pos:start="617:34" pos:end="617:36">[<expr pos:start="617:35" pos:end="617:35"><name pos:start="617:35" pos:end="617:35">i</name></expr>]</index></name> <operator pos:start="617:38" pos:end="617:39">==</operator> <literal type="number" pos:start="617:41" pos:end="617:41">0</literal></expr>)</condition> <block pos:start="617:44" pos:end="621:17">{<block_content pos:start="619:21" pos:end="619:43">

                    <expr_stmt pos:start="619:21" pos:end="619:43"><expr pos:start="619:21" pos:end="619:42"><name pos:start="619:21" pos:end="619:36"><name pos:start="619:21" pos:end="619:33">output_buffer</name><index pos:start="619:34" pos:end="619:36">[<expr pos:start="619:35" pos:end="619:35"><name pos:start="619:35" pos:end="619:35">i</name></expr>]</index></name> <operator pos:start="619:38" pos:end="619:38">=</operator> <literal type="char" pos:start="619:40" pos:end="619:42">' '</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        <label pos:start="625:9" pos:end="628:0"><name pos:start="625:9" pos:end="625:11">out</name>:</label>

<cpp:endif pos:start="627:1" pos:end="627:6">#<cpp:directive pos:start="627:2" pos:end="627:6">endif</cpp:directive></cpp:endif>

            <comment type="block" pos:start="629:13" pos:end="629:53">/* Unlock the buffer on the ARM side.  */</comment>

            <expr_stmt pos:start="631:13" pos:end="631:58"><expr pos:start="631:13" pos:end="631:57"><call pos:start="631:13" pos:end="631:57"><name pos:start="631:13" pos:end="631:23">unlock_user</name><argument_list pos:start="631:24" pos:end="631:57">(<argument pos:start="631:25" pos:end="631:37"><expr pos:start="631:25" pos:end="631:37"><name pos:start="631:25" pos:end="631:37">output_buffer</name></expr></argument>, <argument pos:start="631:40" pos:end="631:43"><expr pos:start="631:40" pos:end="631:43"><name pos:start="631:40" pos:end="631:43">arg0</name></expr></argument>, <argument pos:start="631:46" pos:end="631:56"><expr pos:start="631:46" pos:end="631:56"><name pos:start="631:46" pos:end="631:56">output_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="635:13" pos:end="635:26">return <expr pos:start="635:20" pos:end="635:25"><name pos:start="635:20" pos:end="635:25">status</name></expr>;</return>

        </block_content>}</block>

    <case pos:start="639:5" pos:end="639:29">case <expr pos:start="639:10" pos:end="639:28"><name pos:start="639:10" pos:end="639:28">TARGET_SYS_HEAPINFO</name></expr>:</case>

        <block pos:start="641:9" pos:end="739:9">{<block_content pos:start="643:13" pos:end="737:21">

            <decl_stmt pos:start="643:13" pos:end="643:26"><decl pos:start="643:13" pos:end="643:25"><type pos:start="643:13" pos:end="643:22"><name pos:start="643:13" pos:end="643:20">uint32_t</name> <modifier pos:start="643:22" pos:end="643:22">*</modifier></type><name pos:start="643:23" pos:end="643:25">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="645:13" pos:end="645:27"><decl pos:start="645:13" pos:end="645:26"><type pos:start="645:13" pos:end="645:20"><name pos:start="645:13" pos:end="645:20">uint32_t</name></type> <name pos:start="645:22" pos:end="645:26">limit</name></decl>;</decl_stmt>

            <expr_stmt pos:start="647:13" pos:end="652:0"><expr pos:start="647:13" pos:end="647:22"><call pos:start="647:13" pos:end="647:22"><name pos:start="647:13" pos:end="647:19">GET_ARG</name><argument_list pos:start="647:20" pos:end="647:22">(<argument pos:start="647:21" pos:end="647:21"><expr pos:start="647:21" pos:end="647:21"><literal type="number" pos:start="647:21" pos:end="647:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="651:1" pos:end="651:23">#<cpp:directive pos:start="651:2" pos:end="651:6">ifdef</cpp:directive> <name pos:start="651:8" pos:end="651:23">CONFIG_USER_ONLY</name></cpp:ifdef>

            <comment type="block" pos:start="653:13" pos:end="655:42">/* Some C libraries assume the heap immediately follows .bss, so

               allocate it using sbrk.  */</comment>

            <if_stmt pos:start="657:13" pos:end="685:13"><if pos:start="657:13" pos:end="685:13">if <condition pos:start="657:16" pos:end="657:32">(<expr pos:start="657:17" pos:end="657:31"><operator pos:start="657:17" pos:end="657:17">!</operator><name pos:start="657:18" pos:end="657:31"><name pos:start="657:18" pos:end="657:19">ts</name><operator pos:start="657:20" pos:end="657:21">-&gt;</operator><name pos:start="657:22" pos:end="657:31">heap_limit</name></name></expr>)</condition> <block pos:start="657:34" pos:end="685:13">{<block_content pos:start="659:17" pos:end="683:39">

                <decl_stmt pos:start="659:17" pos:end="659:30"><decl pos:start="659:17" pos:end="659:29"><type pos:start="659:17" pos:end="659:25"><name pos:start="659:17" pos:end="659:25">abi_ulong</name></type> <name pos:start="659:27" pos:end="659:29">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="663:17" pos:end="663:42"><expr pos:start="663:17" pos:end="663:41"><name pos:start="663:17" pos:end="663:29"><name pos:start="663:17" pos:end="663:18">ts</name><operator pos:start="663:19" pos:end="663:20">-&gt;</operator><name pos:start="663:21" pos:end="663:29">heap_base</name></name> <operator pos:start="663:31" pos:end="663:31">=</operator> <call pos:start="663:33" pos:end="663:41"><name pos:start="663:33" pos:end="663:38">do_brk</name><argument_list pos:start="663:39" pos:end="663:41">(<argument pos:start="663:40" pos:end="663:40"><expr pos:start="663:40" pos:end="663:40"><literal type="number" pos:start="663:40" pos:end="663:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="665:17" pos:end="665:60"><expr pos:start="665:17" pos:end="665:59"><name pos:start="665:17" pos:end="665:21">limit</name> <operator pos:start="665:23" pos:end="665:23">=</operator> <name pos:start="665:25" pos:end="665:37"><name pos:start="665:25" pos:end="665:26">ts</name><operator pos:start="665:27" pos:end="665:28">-&gt;</operator><name pos:start="665:29" pos:end="665:37">heap_base</name></name> <operator pos:start="665:39" pos:end="665:39">+</operator> <name pos:start="665:41" pos:end="665:59">ARM_ANGEL_HEAP_SIZE</name></expr>;</expr_stmt>

                <comment type="block" pos:start="667:17" pos:end="667:73">/* Try a big heap, and reduce the size if that fails.  */</comment>

                <for pos:start="669:17" pos:end="681:17">for <control pos:start="669:21" pos:end="669:24">(<init pos:start="669:22" pos:end="669:22">;</init><condition pos:start="669:23" pos:end="669:23">;</condition><incr/>)</control> <block pos:start="669:26" pos:end="681:17">{<block_content pos:start="671:21" pos:end="679:64">

                    <expr_stmt pos:start="671:21" pos:end="671:40"><expr pos:start="671:21" pos:end="671:39"><name pos:start="671:21" pos:end="671:23">ret</name> <operator pos:start="671:25" pos:end="671:25">=</operator> <call pos:start="671:27" pos:end="671:39"><name pos:start="671:27" pos:end="671:32">do_brk</name><argument_list pos:start="671:33" pos:end="671:39">(<argument pos:start="671:34" pos:end="671:38"><expr pos:start="671:34" pos:end="671:38"><name pos:start="671:34" pos:end="671:38">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="673:21" pos:end="677:21"><if pos:start="673:21" pos:end="677:21">if <condition pos:start="673:24" pos:end="673:37">(<expr pos:start="673:25" pos:end="673:36"><name pos:start="673:25" pos:end="673:27">ret</name> <operator pos:start="673:29" pos:end="673:30">&gt;=</operator> <name pos:start="673:32" pos:end="673:36">limit</name></expr>)</condition> <block pos:start="673:39" pos:end="677:21">{<block_content pos:start="675:25" pos:end="675:30">

                        <break pos:start="675:25" pos:end="675:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="679:21" pos:end="679:64"><expr pos:start="679:21" pos:end="679:63"><name pos:start="679:21" pos:end="679:25">limit</name> <operator pos:start="679:27" pos:end="679:27">=</operator> <operator pos:start="679:29" pos:end="679:29">(</operator><name pos:start="679:30" pos:end="679:42"><name pos:start="679:30" pos:end="679:31">ts</name><operator pos:start="679:32" pos:end="679:33">-&gt;</operator><name pos:start="679:34" pos:end="679:42">heap_base</name></name> <operator pos:start="679:44" pos:end="679:45">&gt;&gt;</operator> <literal type="number" pos:start="679:47" pos:end="679:47">1</literal><operator pos:start="679:48" pos:end="679:48">)</operator> <operator pos:start="679:50" pos:end="679:50">+</operator> <operator pos:start="679:52" pos:end="679:52">(</operator><name pos:start="679:53" pos:end="679:57">limit</name> <operator pos:start="679:59" pos:end="679:60">&gt;&gt;</operator> <literal type="number" pos:start="679:62" pos:end="679:62">1</literal><operator pos:start="679:63" pos:end="679:63">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="683:17" pos:end="683:39"><expr pos:start="683:17" pos:end="683:38"><name pos:start="683:17" pos:end="683:30"><name pos:start="683:17" pos:end="683:18">ts</name><operator pos:start="683:19" pos:end="683:20">-&gt;</operator><name pos:start="683:21" pos:end="683:30">heap_limit</name></name> <operator pos:start="683:32" pos:end="683:32">=</operator> <name pos:start="683:34" pos:end="683:38">limit</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="689:13" pos:end="689:55"><expr pos:start="689:13" pos:end="689:54"><name pos:start="689:13" pos:end="689:15">ptr</name> <operator pos:start="689:17" pos:end="689:17">=</operator> <call pos:start="689:19" pos:end="689:54"><name pos:start="689:19" pos:end="689:27">lock_user</name><argument_list pos:start="689:28" pos:end="689:54">(<argument pos:start="689:29" pos:end="689:40"><expr pos:start="689:29" pos:end="689:40"><name pos:start="689:29" pos:end="689:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="689:43" pos:end="689:46"><expr pos:start="689:43" pos:end="689:46"><name pos:start="689:43" pos:end="689:46">arg0</name></expr></argument>, <argument pos:start="689:49" pos:end="689:50"><expr pos:start="689:49" pos:end="689:50"><literal type="number" pos:start="689:49" pos:end="689:50">16</literal></expr></argument>, <argument pos:start="689:53" pos:end="689:53"><expr pos:start="689:53" pos:end="689:53"><literal type="number" pos:start="689:53" pos:end="689:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="691:13" pos:end="697:13"><if pos:start="691:13" pos:end="697:13">if <condition pos:start="691:16" pos:end="691:21">(<expr pos:start="691:17" pos:end="691:20"><operator pos:start="691:17" pos:end="691:17">!</operator><name pos:start="691:18" pos:end="691:20">ptr</name></expr>)</condition> <block pos:start="691:23" pos:end="697:13">{<block_content pos:start="695:17" pos:end="695:36">

                <comment type="block" pos:start="693:17" pos:end="693:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="695:17" pos:end="695:36">return <expr pos:start="695:24" pos:end="695:35"><operator pos:start="695:24" pos:end="695:24">(</operator><name pos:start="695:25" pos:end="695:32">uint32_t</name><operator pos:start="695:33" pos:end="695:33">)</operator><operator pos:start="695:34" pos:end="695:34">-</operator><literal type="number" pos:start="695:35" pos:end="695:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="699:13" pos:end="699:44"><expr pos:start="699:13" pos:end="699:43"><name pos:start="699:13" pos:end="699:18"><name pos:start="699:13" pos:end="699:15">ptr</name><index pos:start="699:16" pos:end="699:18">[<expr pos:start="699:17" pos:end="699:17"><literal type="number" pos:start="699:17" pos:end="699:17">0</literal></expr>]</index></name> <operator pos:start="699:20" pos:end="699:20">=</operator> <call pos:start="699:22" pos:end="699:43"><name pos:start="699:22" pos:end="699:28">tswap32</name><argument_list pos:start="699:29" pos:end="699:43">(<argument pos:start="699:30" pos:end="699:42"><expr pos:start="699:30" pos:end="699:42"><name pos:start="699:30" pos:end="699:42"><name pos:start="699:30" pos:end="699:31">ts</name><operator pos:start="699:32" pos:end="699:33">-&gt;</operator><name pos:start="699:34" pos:end="699:42">heap_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:45"><expr pos:start="701:13" pos:end="701:44"><name pos:start="701:13" pos:end="701:18"><name pos:start="701:13" pos:end="701:15">ptr</name><index pos:start="701:16" pos:end="701:18">[<expr pos:start="701:17" pos:end="701:17"><literal type="number" pos:start="701:17" pos:end="701:17">1</literal></expr>]</index></name> <operator pos:start="701:20" pos:end="701:20">=</operator> <call pos:start="701:22" pos:end="701:44"><name pos:start="701:22" pos:end="701:28">tswap32</name><argument_list pos:start="701:29" pos:end="701:44">(<argument pos:start="701:30" pos:end="701:43"><expr pos:start="701:30" pos:end="701:43"><name pos:start="701:30" pos:end="701:43"><name pos:start="701:30" pos:end="701:31">ts</name><operator pos:start="701:32" pos:end="701:33">-&gt;</operator><name pos:start="701:34" pos:end="701:43">heap_limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:45"><expr pos:start="703:13" pos:end="703:44"><name pos:start="703:13" pos:end="703:18"><name pos:start="703:13" pos:end="703:15">ptr</name><index pos:start="703:16" pos:end="703:18">[<expr pos:start="703:17" pos:end="703:17"><literal type="number" pos:start="703:17" pos:end="703:17">2</literal></expr>]</index></name> <operator pos:start="703:20" pos:end="703:20">=</operator> <call pos:start="703:22" pos:end="703:44"><name pos:start="703:22" pos:end="703:28">tswap32</name><argument_list pos:start="703:29" pos:end="703:44">(<argument pos:start="703:30" pos:end="703:43"><expr pos:start="703:30" pos:end="703:43"><name pos:start="703:30" pos:end="703:43"><name pos:start="703:30" pos:end="703:31">ts</name><operator pos:start="703:32" pos:end="703:33">-&gt;</operator><name pos:start="703:34" pos:end="703:43">stack_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:32"><expr pos:start="705:13" pos:end="705:31"><name pos:start="705:13" pos:end="705:18"><name pos:start="705:13" pos:end="705:15">ptr</name><index pos:start="705:16" pos:end="705:18">[<expr pos:start="705:17" pos:end="705:17"><literal type="number" pos:start="705:17" pos:end="705:17">3</literal></expr>]</index></name> <operator pos:start="705:20" pos:end="705:20">=</operator> <call pos:start="705:22" pos:end="705:31"><name pos:start="705:22" pos:end="705:28">tswap32</name><argument_list pos:start="705:29" pos:end="705:31">(<argument pos:start="705:30" pos:end="705:30"><expr pos:start="705:30" pos:end="705:30"><literal type="number" pos:start="705:30" pos:end="705:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="705:34" pos:end="705:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="707:13" pos:end="710:0"><expr pos:start="707:13" pos:end="707:38"><call pos:start="707:13" pos:end="707:38"><name pos:start="707:13" pos:end="707:23">unlock_user</name><argument_list pos:start="707:24" pos:end="707:38">(<argument pos:start="707:25" pos:end="707:27"><expr pos:start="707:25" pos:end="707:27"><name pos:start="707:25" pos:end="707:27">ptr</name></expr></argument>, <argument pos:start="707:30" pos:end="707:33"><expr pos:start="707:30" pos:end="707:33"><name pos:start="707:30" pos:end="707:33">arg0</name></expr></argument>, <argument pos:start="707:36" pos:end="707:37"><expr pos:start="707:36" pos:end="707:37"><literal type="number" pos:start="707:36" pos:end="707:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="709:1" pos:end="709:5">#<cpp:directive pos:start="709:2" pos:end="709:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="711:13" pos:end="711:29"><expr pos:start="711:13" pos:end="711:28"><name pos:start="711:13" pos:end="711:17">limit</name> <operator pos:start="711:19" pos:end="711:19">=</operator> <name pos:start="711:21" pos:end="711:28">ram_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="713:13" pos:end="713:55"><expr pos:start="713:13" pos:end="713:54"><name pos:start="713:13" pos:end="713:15">ptr</name> <operator pos:start="713:17" pos:end="713:17">=</operator> <call pos:start="713:19" pos:end="713:54"><name pos:start="713:19" pos:end="713:27">lock_user</name><argument_list pos:start="713:28" pos:end="713:54">(<argument pos:start="713:29" pos:end="713:40"><expr pos:start="713:29" pos:end="713:40"><name pos:start="713:29" pos:end="713:40">VERIFY_WRITE</name></expr></argument>, <argument pos:start="713:43" pos:end="713:46"><expr pos:start="713:43" pos:end="713:46"><name pos:start="713:43" pos:end="713:46">arg0</name></expr></argument>, <argument pos:start="713:49" pos:end="713:50"><expr pos:start="713:49" pos:end="713:50"><literal type="number" pos:start="713:49" pos:end="713:50">16</literal></expr></argument>, <argument pos:start="713:53" pos:end="713:53"><expr pos:start="713:53" pos:end="713:53"><literal type="number" pos:start="713:53" pos:end="713:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="715:13" pos:end="721:13"><if pos:start="715:13" pos:end="721:13">if <condition pos:start="715:16" pos:end="715:21">(<expr pos:start="715:17" pos:end="715:20"><operator pos:start="715:17" pos:end="715:17">!</operator><name pos:start="715:18" pos:end="715:20">ptr</name></expr>)</condition> <block pos:start="715:23" pos:end="721:13">{<block_content pos:start="719:17" pos:end="719:36">

                <comment type="block" pos:start="717:17" pos:end="717:72">/* FIXME - should this error code be -TARGET_EFAULT ? */</comment>

                <return pos:start="719:17" pos:end="719:36">return <expr pos:start="719:24" pos:end="719:35"><operator pos:start="719:24" pos:end="719:24">(</operator><name pos:start="719:25" pos:end="719:32">uint32_t</name><operator pos:start="719:33" pos:end="719:33">)</operator><operator pos:start="719:34" pos:end="719:34">-</operator><literal type="number" pos:start="719:35" pos:end="719:35">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="723:13" pos:end="723:75">/* TODO: Make this use the limit of the loaded application.  */</comment>

            <expr_stmt pos:start="725:13" pos:end="725:40"><expr pos:start="725:13" pos:end="725:39"><name pos:start="725:13" pos:end="725:18"><name pos:start="725:13" pos:end="725:15">ptr</name><index pos:start="725:16" pos:end="725:18">[<expr pos:start="725:17" pos:end="725:17"><literal type="number" pos:start="725:17" pos:end="725:17">0</literal></expr>]</index></name> <operator pos:start="725:20" pos:end="725:20">=</operator> <call pos:start="725:22" pos:end="725:39"><name pos:start="725:22" pos:end="725:28">tswap32</name><argument_list pos:start="725:29" pos:end="725:39">(<argument pos:start="725:30" pos:end="725:38"><expr pos:start="725:30" pos:end="725:38"><name pos:start="725:30" pos:end="725:34">limit</name> <operator pos:start="725:36" pos:end="725:36">/</operator> <literal type="number" pos:start="725:38" pos:end="725:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="727:13" pos:end="727:36"><expr pos:start="727:13" pos:end="727:35"><name pos:start="727:13" pos:end="727:18"><name pos:start="727:13" pos:end="727:15">ptr</name><index pos:start="727:16" pos:end="727:18">[<expr pos:start="727:17" pos:end="727:17"><literal type="number" pos:start="727:17" pos:end="727:17">1</literal></expr>]</index></name> <operator pos:start="727:20" pos:end="727:20">=</operator> <call pos:start="727:22" pos:end="727:35"><name pos:start="727:22" pos:end="727:28">tswap32</name><argument_list pos:start="727:29" pos:end="727:35">(<argument pos:start="727:30" pos:end="727:34"><expr pos:start="727:30" pos:end="727:34"><name pos:start="727:30" pos:end="727:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="729:13" pos:end="729:36"><expr pos:start="729:13" pos:end="729:35"><name pos:start="729:13" pos:end="729:18"><name pos:start="729:13" pos:end="729:15">ptr</name><index pos:start="729:16" pos:end="729:18">[<expr pos:start="729:17" pos:end="729:17"><literal type="number" pos:start="729:17" pos:end="729:17">2</literal></expr>]</index></name> <operator pos:start="729:20" pos:end="729:20">=</operator> <call pos:start="729:22" pos:end="729:35"><name pos:start="729:22" pos:end="729:28">tswap32</name><argument_list pos:start="729:29" pos:end="729:35">(<argument pos:start="729:30" pos:end="729:34"><expr pos:start="729:30" pos:end="729:34"><name pos:start="729:30" pos:end="729:34">limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="729:38" pos:end="729:53">/* Stack base */</comment>

            <expr_stmt pos:start="731:13" pos:end="731:32"><expr pos:start="731:13" pos:end="731:31"><name pos:start="731:13" pos:end="731:18"><name pos:start="731:13" pos:end="731:15">ptr</name><index pos:start="731:16" pos:end="731:18">[<expr pos:start="731:17" pos:end="731:17"><literal type="number" pos:start="731:17" pos:end="731:17">3</literal></expr>]</index></name> <operator pos:start="731:20" pos:end="731:20">=</operator> <call pos:start="731:22" pos:end="731:31"><name pos:start="731:22" pos:end="731:28">tswap32</name><argument_list pos:start="731:29" pos:end="731:31">(<argument pos:start="731:30" pos:end="731:30"><expr pos:start="731:30" pos:end="731:30"><literal type="number" pos:start="731:30" pos:end="731:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="731:34" pos:end="731:52">/* Stack limit.  */</comment>

            <expr_stmt pos:start="733:13" pos:end="736:0"><expr pos:start="733:13" pos:end="733:38"><call pos:start="733:13" pos:end="733:38"><name pos:start="733:13" pos:end="733:23">unlock_user</name><argument_list pos:start="733:24" pos:end="733:38">(<argument pos:start="733:25" pos:end="733:27"><expr pos:start="733:25" pos:end="733:27"><name pos:start="733:25" pos:end="733:27">ptr</name></expr></argument>, <argument pos:start="733:30" pos:end="733:33"><expr pos:start="733:30" pos:end="733:33"><name pos:start="733:30" pos:end="733:33">arg0</name></expr></argument>, <argument pos:start="733:36" pos:end="733:37"><expr pos:start="733:36" pos:end="733:37"><literal type="number" pos:start="733:36" pos:end="733:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="735:1" pos:end="735:6">#<cpp:directive pos:start="735:2" pos:end="735:6">endif</cpp:directive></cpp:endif>

            <return pos:start="737:13" pos:end="737:21">return <expr pos:start="737:20" pos:end="737:20"><literal type="number" pos:start="737:20" pos:end="737:20">0</literal></expr>;</return>

        </block_content>}</block>

    <case pos:start="741:5" pos:end="741:25">case <expr pos:start="741:10" pos:end="741:24"><name pos:start="741:10" pos:end="741:24">TARGET_SYS_EXIT</name></expr>:</case>

        <expr_stmt pos:start="743:9" pos:end="743:25"><expr pos:start="743:9" pos:end="743:24"><call pos:start="743:9" pos:end="743:24"><name pos:start="743:9" pos:end="743:16">gdb_exit</name><argument_list pos:start="743:17" pos:end="743:24">(<argument pos:start="743:18" pos:end="743:20"><expr pos:start="743:18" pos:end="743:20"><name pos:start="743:18" pos:end="743:20">env</name></expr></argument>, <argument pos:start="743:23" pos:end="743:23"><expr pos:start="743:23" pos:end="743:23"><literal type="number" pos:start="743:23" pos:end="743:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="745:9" pos:end="745:16"><expr pos:start="745:9" pos:end="745:15"><call pos:start="745:9" pos:end="745:15"><name pos:start="745:9" pos:end="745:12">exit</name><argument_list pos:start="745:13" pos:end="745:15">(<argument pos:start="745:14" pos:end="745:14"><expr pos:start="745:14" pos:end="745:14"><literal type="number" pos:start="745:14" pos:end="745:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <default pos:start="747:5" pos:end="747:12">default:</default>

        <expr_stmt pos:start="749:9" pos:end="749:74"><expr pos:start="749:9" pos:end="749:73"><call pos:start="749:9" pos:end="749:73"><name pos:start="749:9" pos:end="749:15">fprintf</name><argument_list pos:start="749:16" pos:end="749:73">(<argument pos:start="749:17" pos:end="749:22"><expr pos:start="749:17" pos:end="749:22"><name pos:start="749:17" pos:end="749:22">stderr</name></expr></argument>, <argument pos:start="749:25" pos:end="749:68"><expr pos:start="749:25" pos:end="749:68"><literal type="string" pos:start="749:25" pos:end="749:68">"qemu: Unsupported SemiHosting SWI 0x%02x\n"</literal></expr></argument>, <argument pos:start="749:71" pos:end="749:72"><expr pos:start="749:71" pos:end="749:72"><name pos:start="749:71" pos:end="749:72">nr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="751:9" pos:end="751:47"><expr pos:start="751:9" pos:end="751:46"><call pos:start="751:9" pos:end="751:46"><name pos:start="751:9" pos:end="751:22">cpu_dump_state</name><argument_list pos:start="751:23" pos:end="751:46">(<argument pos:start="751:24" pos:end="751:25"><expr pos:start="751:24" pos:end="751:25"><name pos:start="751:24" pos:end="751:25">cs</name></expr></argument>, <argument pos:start="751:28" pos:end="751:33"><expr pos:start="751:28" pos:end="751:33"><name pos:start="751:28" pos:end="751:33">stderr</name></expr></argument>, <argument pos:start="751:36" pos:end="751:42"><expr pos:start="751:36" pos:end="751:42"><name pos:start="751:36" pos:end="751:42">fprintf</name></expr></argument>, <argument pos:start="751:45" pos:end="751:45"><expr pos:start="751:45" pos:end="751:45"><literal type="number" pos:start="751:45" pos:end="751:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="753:9" pos:end="753:16"><expr pos:start="753:9" pos:end="753:15"><call pos:start="753:9" pos:end="753:15"><name pos:start="753:9" pos:end="753:13">abort</name><argument_list pos:start="753:14" pos:end="753:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
