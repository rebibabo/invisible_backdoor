<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17709.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">configure_icount</name><parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:43">Error</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:45">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">option</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">rem_str</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:41"><expr pos:start="11:5" pos:end="11:40"><name pos:start="11:5" pos:end="11:10">option</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <call pos:start="11:14" pos:end="11:40"><name pos:start="11:14" pos:end="11:25">qemu_opt_get</name><argument_list pos:start="11:26" pos:end="11:40">(<argument pos:start="11:27" pos:end="11:30"><expr pos:start="11:27" pos:end="11:30"><name pos:start="11:27" pos:end="11:30">opts</name></expr></argument>, <argument pos:start="11:33" pos:end="11:39"><expr pos:start="11:33" pos:end="11:39"><literal type="string" pos:start="11:33" pos:end="11:39">"shift"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="23:5"><if pos:start="13:5" pos:end="23:5">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:15">option</name></expr>)</condition> <block pos:start="13:18" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:15">

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:48">(<expr pos:start="15:13" pos:end="15:47"><call pos:start="15:13" pos:end="15:39"><name pos:start="15:13" pos:end="15:24">qemu_opt_get</name><argument_list pos:start="15:25" pos:end="15:39">(<argument pos:start="15:26" pos:end="15:29"><expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">opts</name></expr></argument>, <argument pos:start="15:32" pos:end="15:38"><expr pos:start="15:32" pos:end="15:38"><literal type="string" pos:start="15:32" pos:end="15:38">"align"</literal></expr></argument>)</argument_list></call> <operator pos:start="15:41" pos:end="15:42">!=</operator> <name pos:start="15:44" pos:end="15:47">NULL</name></expr>)</condition> <block pos:start="15:50" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:77">

            <expr_stmt pos:start="17:13" pos:end="17:77"><expr pos:start="17:13" pos:end="17:76"><call pos:start="17:13" pos:end="17:76"><name pos:start="17:13" pos:end="17:22">error_setg</name><argument_list pos:start="17:23" pos:end="17:76">(<argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">errp</name></expr></argument>, <argument pos:start="17:30" pos:end="17:75"><expr pos:start="17:30" pos:end="17:75"><literal type="string" pos:start="17:30" pos:end="17:75">"Please specify shift option when using align"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:16">icount_sleep</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:57"><name pos:start="27:20" pos:end="27:36">qemu_opt_get_bool</name><argument_list pos:start="27:37" pos:end="27:57">(<argument pos:start="27:38" pos:end="27:41"><expr pos:start="27:38" pos:end="27:41"><name pos:start="27:38" pos:end="27:41">opts</name></expr></argument>, <argument pos:start="27:44" pos:end="27:50"><expr pos:start="27:44" pos:end="27:50"><literal type="string" pos:start="27:44" pos:end="27:50">"sleep"</literal></expr></argument>, <argument pos:start="27:53" pos:end="27:56"><expr pos:start="27:53" pos:end="27:56"><name pos:start="27:53" pos:end="27:56">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:20">icount_sleep</name></expr>)</condition> <block pos:start="29:23" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:67">

        <expr_stmt pos:start="31:9" pos:end="33:67"><expr pos:start="31:9" pos:end="33:66"><name pos:start="31:9" pos:end="31:25">icount_warp_timer</name> <operator pos:start="31:27" pos:end="31:27">=</operator> <call pos:start="31:29" pos:end="33:66"><name pos:start="31:29" pos:end="31:40">timer_new_ns</name><argument_list pos:start="31:41" pos:end="33:66">(<argument pos:start="31:42" pos:end="31:62"><expr pos:start="31:42" pos:end="31:62"><name pos:start="31:42" pos:end="31:62">QEMU_CLOCK_VIRTUAL_RT</name></expr></argument>,

                                         <argument pos:start="33:42" pos:end="33:59"><expr pos:start="33:42" pos:end="33:59"><name pos:start="33:42" pos:end="33:59">icount_dummy_timer</name></expr></argument>, <argument pos:start="33:62" pos:end="33:65"><expr pos:start="33:62" pos:end="33:65"><name pos:start="33:62" pos:end="33:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:66"><expr pos:start="39:5" pos:end="39:65"><name pos:start="39:5" pos:end="39:23">icount_align_option</name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:65"><name pos:start="39:27" pos:end="39:43">qemu_opt_get_bool</name><argument_list pos:start="39:44" pos:end="39:65">(<argument pos:start="39:45" pos:end="39:48"><expr pos:start="39:45" pos:end="39:48"><name pos:start="39:45" pos:end="39:48">opts</name></expr></argument>, <argument pos:start="39:51" pos:end="39:57"><expr pos:start="39:51" pos:end="39:57"><literal type="string" pos:start="39:51" pos:end="39:57">"align"</literal></expr></argument>, <argument pos:start="39:60" pos:end="39:64"><expr pos:start="39:60" pos:end="39:64"><name pos:start="39:60" pos:end="39:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:45">(<expr pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:27">icount_align_option</name> <operator pos:start="43:29" pos:end="43:30">&amp;&amp;</operator> <operator pos:start="43:32" pos:end="43:32">!</operator><name pos:start="43:33" pos:end="43:44">icount_sleep</name></expr>)</condition> <block pos:start="43:47" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:68">

        <expr_stmt pos:start="45:9" pos:end="45:68"><expr pos:start="45:9" pos:end="45:67"><call pos:start="45:9" pos:end="45:67"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="45:67">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:66"><expr pos:start="45:26" pos:end="45:66"><literal type="string" pos:start="45:26" pos:end="45:66">"align=on and sleep=off are incompatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="73:5"><if pos:start="49:5" pos:end="65:5">if <condition pos:start="49:8" pos:end="49:36">(<expr pos:start="49:9" pos:end="49:35"><call pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:14">strcmp</name><argument_list pos:start="49:15" pos:end="49:30">(<argument pos:start="49:16" pos:end="49:21"><expr pos:start="49:16" pos:end="49:21"><name pos:start="49:16" pos:end="49:21">option</name></expr></argument>, <argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><literal type="string" pos:start="49:24" pos:end="49:29">"auto"</literal></expr></argument>)</argument_list></call> <operator pos:start="49:32" pos:end="49:33">!=</operator> <literal type="number" pos:start="49:35" pos:end="49:35">0</literal></expr>)</condition> <block pos:start="49:38" pos:end="65:5">{<block_content pos:start="51:9" pos:end="63:15">

        <expr_stmt pos:start="51:9" pos:end="51:18"><expr pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:13">errno</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:56"><expr pos:start="53:9" pos:end="53:55"><name pos:start="53:9" pos:end="53:25">icount_time_shift</name> <operator pos:start="53:27" pos:end="53:27">=</operator> <call pos:start="53:29" pos:end="53:55"><name pos:start="53:29" pos:end="53:34">strtol</name><argument_list pos:start="53:35" pos:end="53:55">(<argument pos:start="53:36" pos:end="53:41"><expr pos:start="53:36" pos:end="53:41"><name pos:start="53:36" pos:end="53:41">option</name></expr></argument>, <argument pos:start="53:44" pos:end="53:51"><expr pos:start="53:44" pos:end="53:51"><operator pos:start="53:44" pos:end="53:44">&amp;</operator><name pos:start="53:45" pos:end="53:51">rem_str</name></expr></argument>, <argument pos:start="53:54" pos:end="53:54"><expr pos:start="53:54" pos:end="53:54"><literal type="number" pos:start="53:54" pos:end="53:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:62">(<expr pos:start="55:13" pos:end="55:61"><name pos:start="55:13" pos:end="55:17">errno</name> <operator pos:start="55:19" pos:end="55:20">!=</operator> <literal type="number" pos:start="55:22" pos:end="55:22">0</literal> <operator pos:start="55:24" pos:end="55:25">||</operator> <operator pos:start="55:27" pos:end="55:27">*</operator><name pos:start="55:28" pos:end="55:34">rem_str</name> <operator pos:start="55:36" pos:end="55:37">!=</operator> <literal type="char" pos:start="55:39" pos:end="55:42">'\0'</literal> <operator pos:start="55:44" pos:end="55:45">||</operator> <operator pos:start="55:47" pos:end="55:47">!</operator><call pos:start="55:48" pos:end="55:61"><name pos:start="55:48" pos:end="55:53">strlen</name><argument_list pos:start="55:54" pos:end="55:61">(<argument pos:start="55:55" pos:end="55:60"><expr pos:start="55:55" pos:end="55:60"><name pos:start="55:55" pos:end="55:60">option</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:64" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:60">

            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><call pos:start="57:13" pos:end="57:59"><name pos:start="57:13" pos:end="57:22">error_setg</name><argument_list pos:start="57:23" pos:end="57:59">(<argument pos:start="57:24" pos:end="57:27"><expr pos:start="57:24" pos:end="57:27"><name pos:start="57:24" pos:end="57:27">errp</name></expr></argument>, <argument pos:start="57:30" pos:end="57:58"><expr pos:start="57:30" pos:end="57:58"><literal type="string" pos:start="57:30" pos:end="57:58">"icount: Invalid shift value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:18">use_icount</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="65:7" pos:end="69:5">else if <condition pos:start="65:15" pos:end="65:35">(<expr pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:34">icount_align_option</name></expr>)</condition> <block pos:start="65:37" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:69">

        <expr_stmt pos:start="67:9" pos:end="67:69"><expr pos:start="67:9" pos:end="67:68"><call pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:68">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:67"><expr pos:start="67:26" pos:end="67:67"><literal type="string" pos:start="67:26" pos:end="67:67">"shift=auto and align=on are incompatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="73:5">else if <condition pos:start="69:15" pos:end="69:29">(<expr pos:start="69:16" pos:end="69:28"><operator pos:start="69:16" pos:end="69:16">!</operator><name pos:start="69:17" pos:end="69:28">icount_sleep</name></expr>)</condition> <block pos:start="69:31" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:70">

        <expr_stmt pos:start="71:9" pos:end="71:70"><expr pos:start="71:9" pos:end="71:69"><call pos:start="71:9" pos:end="71:69"><name pos:start="71:9" pos:end="71:18">error_setg</name><argument_list pos:start="71:19" pos:end="71:69">(<argument pos:start="71:20" pos:end="71:23"><expr pos:start="71:20" pos:end="71:23"><name pos:start="71:20" pos:end="71:23">errp</name></expr></argument>, <argument pos:start="71:26" pos:end="71:68"><expr pos:start="71:26" pos:end="71:68"><literal type="string" pos:start="71:26" pos:end="71:68">"shift=auto and sleep=off are incompatible"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:19"><expr pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:14">use_icount</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <literal type="number" pos:start="77:18" pos:end="77:18">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="83:54">/* 125MIPS seems a reasonable initial guess at the guest speed.

       It will be corrected fairly quickly anyway.  */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:21">icount_time_shift</name> <operator pos:start="85:23" pos:end="85:23">=</operator> <literal type="number" pos:start="85:25" pos:end="85:25">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="97:28">/* Have both realtime and virtual time triggers for speed adjustment.

       The realtime trigger catches emulated time passing too slowly,

       the virtual time trigger catches emulated time passing too fast.

       Realtime triggers occur even when idle, so use them less frequently

       than VM triggers.  */</comment>

    <expr_stmt pos:start="99:5" pos:end="101:59"><expr pos:start="99:5" pos:end="101:58"><name pos:start="99:5" pos:end="99:19">icount_rt_timer</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="101:58"><name pos:start="99:23" pos:end="99:34">timer_new_ms</name><argument_list pos:start="99:35" pos:end="101:58">(<argument pos:start="99:36" pos:end="99:56"><expr pos:start="99:36" pos:end="99:56"><name pos:start="99:36" pos:end="99:56">QEMU_CLOCK_VIRTUAL_RT</name></expr></argument>,

                                   <argument pos:start="101:36" pos:end="101:51"><expr pos:start="101:36" pos:end="101:51"><name pos:start="101:36" pos:end="101:51">icount_adjust_rt</name></expr></argument>, <argument pos:start="101:54" pos:end="101:57"><expr pos:start="101:54" pos:end="101:57"><name pos:start="101:54" pos:end="101:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="105:68"><expr pos:start="103:5" pos:end="105:67"><call pos:start="103:5" pos:end="105:67"><name pos:start="103:5" pos:end="103:13">timer_mod</name><argument_list pos:start="103:14" pos:end="105:67">(<argument pos:start="103:15" pos:end="103:29"><expr pos:start="103:15" pos:end="103:29"><name pos:start="103:15" pos:end="103:29">icount_rt_timer</name></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:66"><expr pos:start="105:20" pos:end="105:66"><call pos:start="105:20" pos:end="105:59"><name pos:start="105:20" pos:end="105:36">qemu_clock_get_ms</name><argument_list pos:start="105:37" pos:end="105:59">(<argument pos:start="105:38" pos:end="105:58"><expr pos:start="105:38" pos:end="105:58"><name pos:start="105:38" pos:end="105:58">QEMU_CLOCK_VIRTUAL_RT</name></expr></argument>)</argument_list></call> <operator pos:start="105:61" pos:end="105:61">+</operator> <literal type="number" pos:start="105:63" pos:end="105:66">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:64"><expr pos:start="107:5" pos:end="109:63"><name pos:start="107:5" pos:end="107:19">icount_vm_timer</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <call pos:start="107:23" pos:end="109:63"><name pos:start="107:23" pos:end="107:34">timer_new_ns</name><argument_list pos:start="107:35" pos:end="109:63">(<argument pos:start="107:36" pos:end="107:53"><expr pos:start="107:36" pos:end="107:53"><name pos:start="107:36" pos:end="107:53">QEMU_CLOCK_VIRTUAL</name></expr></argument>,

                                        <argument pos:start="109:41" pos:end="109:56"><expr pos:start="109:41" pos:end="109:56"><name pos:start="109:41" pos:end="109:56">icount_adjust_vm</name></expr></argument>, <argument pos:start="109:59" pos:end="109:62"><expr pos:start="109:59" pos:end="109:62"><name pos:start="109:59" pos:end="109:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="115:45"><expr pos:start="111:5" pos:end="115:44"><call pos:start="111:5" pos:end="115:44"><name pos:start="111:5" pos:end="111:13">timer_mod</name><argument_list pos:start="111:14" pos:end="115:44">(<argument pos:start="111:15" pos:end="111:29"><expr pos:start="111:15" pos:end="111:29"><name pos:start="111:15" pos:end="111:29">icount_vm_timer</name></expr></argument>,

                   <argument pos:start="113:20" pos:end="115:43"><expr pos:start="113:20" pos:end="115:43"><call pos:start="113:20" pos:end="113:56"><name pos:start="113:20" pos:end="113:36">qemu_clock_get_ns</name><argument_list pos:start="113:37" pos:end="113:56">(<argument pos:start="113:38" pos:end="113:55"><expr pos:start="113:38" pos:end="113:55"><name pos:start="113:38" pos:end="113:55">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="113:58" pos:end="113:58">+</operator>

                   <call pos:start="115:20" pos:end="115:38"><name pos:start="115:20" pos:end="115:36">get_ticks_per_sec</name><argument_list pos:start="115:37" pos:end="115:38">()</argument_list></call> <operator pos:start="115:40" pos:end="115:40">/</operator> <literal type="number" pos:start="115:42" pos:end="115:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
