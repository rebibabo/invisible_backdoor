<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19956.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:35">_pte_check</name> <parameter_list pos:start="1:37" pos:end="5:51">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:46">mmu_ctx_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">ctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:63">is_64b</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:54"><decl pos:start="3:38" pos:end="3:54"><type pos:start="3:38" pos:end="3:54"><name pos:start="3:38" pos:end="3:49">target_ulong</name></type> <name pos:start="3:51" pos:end="3:54">pte0</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:73"><decl pos:start="3:57" pos:end="3:73"><type pos:start="3:57" pos:end="3:73"><name pos:start="3:57" pos:end="3:68">target_ulong</name></type> <name pos:start="3:70" pos:end="3:73">pte1</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:42"><decl pos:start="5:38" pos:end="5:42"><type pos:start="5:38" pos:end="5:42"><name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:42">h</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:50"><decl pos:start="5:45" pos:end="5:50"><type pos:start="5:45" pos:end="5:50"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:50">rw</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="167:1">{<block_content pos:start="9:5" pos:end="165:15">

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:21">ptem</name></decl>, <decl pos:start="9:24" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:24" pos:end="9:28">mmask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">access</name></decl>, <decl pos:start="11:17" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:17" pos:end="11:19">ret</name></decl>, <decl pos:start="11:22" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:25">pteh</name></decl>, <decl pos:start="11:28" pos:end="11:31"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:28" pos:end="11:31">ptev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:15"><expr pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:10">access</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="22:0"><expr pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <operator pos:start="17:11" pos:end="17:11">-</operator><literal type="number" pos:start="17:12" pos:end="17:12">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:40">/* Check validity and table match */</comment>

<cpp:if pos:start="21:1" pos:end="21:25">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:11">defined</name><argument_list pos:start="21:12" pos:end="21:25">(<argument pos:start="21:13" pos:end="21:24"><expr pos:start="21:13" pos:end="21:24"><name pos:start="21:13" pos:end="21:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="23:5" pos:end="39:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">is_64b</name></expr>)</condition> <block pos:start="23:17" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:31">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:12">ptev</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:35"><name pos:start="25:16" pos:end="25:29">pte64_is_valid</name><argument_list pos:start="25:30" pos:end="25:35">(<argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">pte0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:31"><expr pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:12">pteh</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:20">pte0</name> <operator pos:start="27:22" pos:end="27:23">&gt;&gt;</operator> <literal type="number" pos:start="27:25" pos:end="27:25">1</literal><operator pos:start="27:26" pos:end="27:26">)</operator> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <literal type="number" pos:start="27:30" pos:end="27:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="39:5">else

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <block pos:start="33:5" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:31">

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:12">ptev</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:33"><name pos:start="35:16" pos:end="35:27">pte_is_valid</name><argument_list pos:start="35:28" pos:end="35:33">(<argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">pte0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:12">pteh</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:20">pte0</name> <operator pos:start="37:22" pos:end="37:23">&gt;&gt;</operator> <literal type="number" pos:start="37:25" pos:end="37:25">6</literal><operator pos:start="37:26" pos:end="37:26">)</operator> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <literal type="number" pos:start="37:30" pos:end="37:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="41:5" pos:end="161:5"><if pos:start="41:5" pos:end="161:5">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:12">ptev</name> <operator pos:start="41:14" pos:end="41:15">&amp;&amp;</operator> <name pos:start="41:17" pos:end="41:17">h</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <name pos:start="41:22" pos:end="41:25">pteh</name></expr>)</condition> <block pos:start="41:28" pos:end="161:5">{<block_content pos:start="47:9" pos:end="159:9">

        <comment type="block" pos:start="43:9" pos:end="43:30">/* Check vsid &amp; api */</comment>

<cpp:if pos:start="45:1" pos:end="45:25">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:11">defined</name><argument_list pos:start="45:12" pos:end="45:25">(<argument pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="47:9" pos:end="63:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:19">(<expr pos:start="47:13" pos:end="47:18"><name pos:start="47:13" pos:end="47:18">is_64b</name></expr>)</condition> <block pos:start="47:21" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:37">

            <expr_stmt pos:start="49:13" pos:end="49:42"><expr pos:start="49:13" pos:end="49:41"><name pos:start="49:13" pos:end="49:16">ptem</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:23">pte0</name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <name pos:start="49:27" pos:end="49:41">PTE64_PTEM_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:37"><expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:17">mmask</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:36">PTE64_CHECK_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="63:9">else

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

        <block pos:start="57:9" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:35">

            <expr_stmt pos:start="59:13" pos:end="59:40"><expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:16">ptem</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:23">pte0</name> <operator pos:start="59:25" pos:end="59:25">&amp;</operator> <name pos:start="59:27" pos:end="59:39">PTE_PTEM_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:17">mmask</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:34">PTE_CHECK_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="65:9" pos:end="159:9"><if pos:start="65:9" pos:end="159:9">if <condition pos:start="65:12" pos:end="65:30">(<expr pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:16">ptem</name> <operator pos:start="65:18" pos:end="65:19">==</operator> <name pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:23">ctx</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:29">ptem</name></name></expr>)</condition> <block pos:start="65:32" pos:end="159:9">{<block_content pos:start="67:13" pos:end="157:13">

            <if_stmt pos:start="67:13" pos:end="81:13"><if pos:start="67:13" pos:end="81:13">if <condition pos:start="67:16" pos:end="67:47">(<expr pos:start="67:17" pos:end="67:46"><name pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:19">ctx</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:26">raddr</name></name> <operator pos:start="67:28" pos:end="67:29">!=</operator> <operator pos:start="67:31" pos:end="67:31">(</operator><name pos:start="67:32" pos:end="67:43">target_ulong</name><operator pos:start="67:44" pos:end="67:44">)</operator><operator pos:start="67:45" pos:end="67:45">-</operator><literal type="number" pos:start="67:46" pos:end="67:46">1</literal></expr>)</condition> <block pos:start="67:49" pos:end="81:13">{<block_content pos:start="71:17" pos:end="79:17">

                <comment type="block" pos:start="69:17" pos:end="69:66">/* all matches should have equal RPN, WIMG &amp; PP */</comment>

                <if_stmt pos:start="71:17" pos:end="79:17"><if pos:start="71:17" pos:end="79:17">if <condition pos:start="71:20" pos:end="71:59">(<expr pos:start="71:21" pos:end="71:58"><operator pos:start="71:21" pos:end="71:21">(</operator><name pos:start="71:22" pos:end="71:31"><name pos:start="71:22" pos:end="71:24">ctx</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:31">raddr</name></name> <operator pos:start="71:33" pos:end="71:33">&amp;</operator> <name pos:start="71:35" pos:end="71:39">mmask</name><operator pos:start="71:40" pos:end="71:40">)</operator> <operator pos:start="71:42" pos:end="71:43">!=</operator> <operator pos:start="71:45" pos:end="71:45">(</operator><name pos:start="71:46" pos:end="71:49">pte1</name> <operator pos:start="71:51" pos:end="71:51">&amp;</operator> <name pos:start="71:53" pos:end="71:57">mmask</name><operator pos:start="71:58" pos:end="71:58">)</operator></expr>)</condition> <block pos:start="71:61" pos:end="79:17">{<block_content pos:start="73:21" pos:end="77:30">

                    <if_stmt pos:start="73:21" pos:end="75:62"><if pos:start="73:21" pos:end="75:62">if <condition pos:start="73:24" pos:end="73:38">(<expr pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:32">loglevel</name> <operator pos:start="73:34" pos:end="73:35">!=</operator> <literal type="number" pos:start="73:37" pos:end="73:37">0</literal></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:62"><block_content pos:start="75:25" pos:end="75:62">

                        <expr_stmt pos:start="75:25" pos:end="75:62"><expr pos:start="75:25" pos:end="75:61"><call pos:start="75:25" pos:end="75:61"><name pos:start="75:25" pos:end="75:31">fprintf</name><argument_list pos:start="75:32" pos:end="75:61">(<argument pos:start="75:33" pos:end="75:39"><expr pos:start="75:33" pos:end="75:39"><name pos:start="75:33" pos:end="75:39">logfile</name></expr></argument>, <argument pos:start="75:42" pos:end="75:60"><expr pos:start="75:42" pos:end="75:60"><literal type="string" pos:start="75:42" pos:end="75:60">"Bad RPN/WIMG/PP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <return pos:start="77:21" pos:end="77:30">return <expr pos:start="77:28" pos:end="77:29"><operator pos:start="77:28" pos:end="77:28">-</operator><literal type="number" pos:start="77:29" pos:end="77:29">3</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="83:13" pos:end="83:39">/* Compute access rights */</comment>

            <if_stmt pos:start="85:13" pos:end="119:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:30">(<expr pos:start="85:17" pos:end="85:29"><name pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:19">ctx</name><operator pos:start="85:20" pos:end="85:21">-&gt;</operator><name pos:start="85:22" pos:end="85:24">key</name></name> <operator pos:start="85:26" pos:end="85:27">==</operator> <literal type="number" pos:start="85:29" pos:end="85:29">0</literal></expr>)</condition> <block pos:start="85:32" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:41">

                <expr_stmt pos:start="87:17" pos:end="87:35"><expr pos:start="87:17" pos:end="87:34"><name pos:start="87:17" pos:end="87:22">access</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <name pos:start="87:26" pos:end="87:34">PAGE_READ</name></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="91:41"><if pos:start="89:17" pos:end="91:41">if <condition pos:start="89:20" pos:end="89:47">(<expr pos:start="89:21" pos:end="89:46"><operator pos:start="89:21" pos:end="89:21">(</operator><name pos:start="89:22" pos:end="89:25">pte1</name> <operator pos:start="89:27" pos:end="89:27">&amp;</operator> <literal type="number" pos:start="89:29" pos:end="89:38">0x00000003</literal><operator pos:start="89:39" pos:end="89:39">)</operator> <operator pos:start="89:41" pos:end="89:42">!=</operator> <literal type="number" pos:start="89:44" pos:end="89:46">0x3</literal></expr>)</condition><block type="pseudo" pos:start="91:21" pos:end="91:41"><block_content pos:start="91:21" pos:end="91:41">

                    <expr_stmt pos:start="91:21" pos:end="91:41"><expr pos:start="91:21" pos:end="91:40"><name pos:start="91:21" pos:end="91:26">access</name> <operator pos:start="91:28" pos:end="91:29">|=</operator> <name pos:start="91:31" pos:end="91:40">PAGE_WRITE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="93:15" pos:end="119:13">else <block pos:start="93:20" pos:end="119:13">{<block_content pos:start="95:17" pos:end="117:17">

                <switch pos:start="95:17" pos:end="117:17">switch <condition pos:start="95:24" pos:end="95:42">(<expr pos:start="95:25" pos:end="95:41"><name pos:start="95:25" pos:end="95:28">pte1</name> <operator pos:start="95:30" pos:end="95:30">&amp;</operator> <literal type="number" pos:start="95:32" pos:end="95:41">0x00000003</literal></expr>)</condition> <block pos:start="95:44" pos:end="117:17">{<block_content pos:start="97:17" pos:end="115:26">

                <case pos:start="97:17" pos:end="97:25">case <expr pos:start="97:22" pos:end="97:24"><literal type="number" pos:start="97:22" pos:end="97:24">0x0</literal></expr>:</case>

                    <expr_stmt pos:start="99:21" pos:end="99:31"><expr pos:start="99:21" pos:end="99:30"><name pos:start="99:21" pos:end="99:26">access</name> <operator pos:start="99:28" pos:end="99:28">=</operator> <literal type="number" pos:start="99:30" pos:end="99:30">0</literal></expr>;</expr_stmt>

                    <break pos:start="101:21" pos:end="101:26">break;</break>

                <case pos:start="103:17" pos:end="103:25">case <expr pos:start="103:22" pos:end="103:24"><literal type="number" pos:start="103:22" pos:end="103:24">0x1</literal></expr>:</case>

                <case pos:start="105:17" pos:end="105:25">case <expr pos:start="105:22" pos:end="105:24"><literal type="number" pos:start="105:22" pos:end="105:24">0x3</literal></expr>:</case>

                    <expr_stmt pos:start="107:21" pos:end="107:39"><expr pos:start="107:21" pos:end="107:38"><name pos:start="107:21" pos:end="107:26">access</name> <operator pos:start="107:28" pos:end="107:28">=</operator> <name pos:start="107:30" pos:end="107:38">PAGE_READ</name></expr>;</expr_stmt>

                    <break pos:start="109:21" pos:end="109:26">break;</break>

                <case pos:start="111:17" pos:end="111:25">case <expr pos:start="111:22" pos:end="111:24"><literal type="number" pos:start="111:22" pos:end="111:24">0x2</literal></expr>:</case>

                    <expr_stmt pos:start="113:21" pos:end="113:52"><expr pos:start="113:21" pos:end="113:51"><name pos:start="113:21" pos:end="113:26">access</name> <operator pos:start="113:28" pos:end="113:28">=</operator> <name pos:start="113:30" pos:end="113:38">PAGE_READ</name> <operator pos:start="113:40" pos:end="113:40">|</operator> <name pos:start="113:42" pos:end="113:51">PAGE_WRITE</name></expr>;</expr_stmt>

                    <break pos:start="115:21" pos:end="115:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="121:13" pos:end="121:52">/* Keep the matching PTE informations */</comment>

            <expr_stmt pos:start="123:13" pos:end="123:30"><expr pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:15">ctx</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:22">raddr</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:29">pte1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:31"><expr pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:15">ctx</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:21">prot</name></name> <operator pos:start="125:23" pos:end="125:23">=</operator> <name pos:start="125:25" pos:end="125:30">access</name></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="157:13"><if pos:start="127:13" pos:end="143:13">if <condition pos:start="127:16" pos:end="129:51">(<expr pos:start="127:17" pos:end="129:50"><operator pos:start="127:17" pos:end="127:17">(</operator><name pos:start="127:18" pos:end="127:19">rw</name> <operator pos:start="127:21" pos:end="127:22">==</operator> <literal type="number" pos:start="127:24" pos:end="127:24">0</literal> <operator pos:start="127:26" pos:end="127:27">&amp;&amp;</operator> <operator pos:start="127:29" pos:end="127:29">(</operator><name pos:start="127:30" pos:end="127:35">access</name> <operator pos:start="127:37" pos:end="127:37">&amp;</operator> <name pos:start="127:39" pos:end="127:47">PAGE_READ</name><operator pos:start="127:48" pos:end="127:48">)</operator><operator pos:start="127:49" pos:end="127:49">)</operator> <operator pos:start="127:51" pos:end="127:52">||</operator>

                <operator pos:start="129:17" pos:end="129:17">(</operator><name pos:start="129:18" pos:end="129:19">rw</name> <operator pos:start="129:21" pos:end="129:22">==</operator> <literal type="number" pos:start="129:24" pos:end="129:24">1</literal> <operator pos:start="129:26" pos:end="129:27">&amp;&amp;</operator> <operator pos:start="129:29" pos:end="129:29">(</operator><name pos:start="129:30" pos:end="129:35">access</name> <operator pos:start="129:37" pos:end="129:37">&amp;</operator> <name pos:start="129:39" pos:end="129:48">PAGE_WRITE</name><operator pos:start="129:49" pos:end="129:49">)</operator><operator pos:start="129:50" pos:end="129:50">)</operator></expr>)</condition> <block pos:start="129:53" pos:end="143:13">{<block_content pos:start="135:17" pos:end="141:24">

                <comment type="block" pos:start="131:17" pos:end="131:36">/* Access granted */</comment>

<cpp:if pos:start="133:1" pos:end="133:23">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:23"><call pos:start="133:5" pos:end="133:23"><name pos:start="133:5" pos:end="133:11">defined</name> <argument_list pos:start="133:13" pos:end="133:23">(<argument pos:start="133:14" pos:end="133:22"><expr pos:start="133:14" pos:end="133:22"><name pos:start="133:14" pos:end="133:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="135:17" pos:end="140:0"><if pos:start="135:17" pos:end="140:0">if <condition pos:start="135:20" pos:end="135:34">(<expr pos:start="135:21" pos:end="135:33"><name pos:start="135:21" pos:end="135:28">loglevel</name> <operator pos:start="135:30" pos:end="135:31">!=</operator> <literal type="number" pos:start="135:33" pos:end="135:33">0</literal></expr>)</condition><block type="pseudo" pos:start="137:21" pos:end="140:0"><block_content pos:start="137:21" pos:end="140:0">

                    <expr_stmt pos:start="137:21" pos:end="140:0"><expr pos:start="137:21" pos:end="137:62"><call pos:start="137:21" pos:end="137:62"><name pos:start="137:21" pos:end="137:27">fprintf</name><argument_list pos:start="137:28" pos:end="137:62">(<argument pos:start="137:29" pos:end="137:35"><expr pos:start="137:29" pos:end="137:35"><name pos:start="137:29" pos:end="137:35">logfile</name></expr></argument>, <argument pos:start="137:38" pos:end="137:61"><expr pos:start="137:38" pos:end="137:61"><literal type="string" pos:start="137:38" pos:end="137:61">"PTE access granted !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="139:1" pos:end="139:6">#<cpp:directive pos:start="139:2" pos:end="139:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="141:17" pos:end="141:24"><expr pos:start="141:17" pos:end="141:23"><name pos:start="141:17" pos:end="141:19">ret</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <literal type="number" pos:start="141:23" pos:end="141:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="143:15" pos:end="157:13">else <block pos:start="143:20" pos:end="157:13">{<block_content pos:start="149:17" pos:end="155:25">

                <comment type="block" pos:start="145:17" pos:end="145:44">/* Access right violation */</comment>

<cpp:if pos:start="147:1" pos:end="147:23">#<cpp:directive pos:start="147:2" pos:end="147:3">if</cpp:directive> <expr pos:start="147:5" pos:end="147:23"><call pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:11">defined</name> <argument_list pos:start="147:13" pos:end="147:23">(<argument pos:start="147:14" pos:end="147:22"><expr pos:start="147:14" pos:end="147:22"><name pos:start="147:14" pos:end="147:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="149:17" pos:end="154:0"><if pos:start="149:17" pos:end="154:0">if <condition pos:start="149:20" pos:end="149:34">(<expr pos:start="149:21" pos:end="149:33"><name pos:start="149:21" pos:end="149:28">loglevel</name> <operator pos:start="149:30" pos:end="149:31">!=</operator> <literal type="number" pos:start="149:33" pos:end="149:33">0</literal></expr>)</condition><block type="pseudo" pos:start="151:21" pos:end="154:0"><block_content pos:start="151:21" pos:end="154:0">

                    <expr_stmt pos:start="151:21" pos:end="154:0"><expr pos:start="151:21" pos:end="151:61"><call pos:start="151:21" pos:end="151:61"><name pos:start="151:21" pos:end="151:27">fprintf</name><argument_list pos:start="151:28" pos:end="151:61">(<argument pos:start="151:29" pos:end="151:35"><expr pos:start="151:29" pos:end="151:35"><name pos:start="151:29" pos:end="151:35">logfile</name></expr></argument>, <argument pos:start="151:38" pos:end="151:60"><expr pos:start="151:38" pos:end="151:60"><literal type="string" pos:start="151:38" pos:end="151:60">"PTE access rejected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="155:17" pos:end="155:25"><expr pos:start="155:17" pos:end="155:24"><name pos:start="155:17" pos:end="155:19">ret</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <operator pos:start="155:23" pos:end="155:23">-</operator><literal type="number" pos:start="155:24" pos:end="155:24">2</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="165:5" pos:end="165:15">return <expr pos:start="165:12" pos:end="165:14"><name pos:start="165:12" pos:end="165:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
