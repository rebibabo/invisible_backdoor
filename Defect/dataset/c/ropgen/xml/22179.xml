<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22179.c" pos:tabs="8"><function pos:start="1:1" pos:end="385:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">load_linux</name><parameter_list pos:start="1:23" pos:end="11:47">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">fw_cfg</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:52"><decl pos:start="3:24" pos:end="3:52"><type pos:start="3:24" pos:end="3:52"><name pos:start="3:24" pos:end="3:41">target_phys_addr_t</name></type> <name pos:start="3:43" pos:end="3:52">option_rom</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:50"><decl pos:start="5:24" pos:end="5:50"><type pos:start="5:24" pos:end="5:50"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">char</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:50">kernel_filename</name></decl></parameter>,

		       <parameter pos:start="7:24" pos:end="7:50"><decl pos:start="7:24" pos:end="7:50"><type pos:start="7:24" pos:end="7:50"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">char</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:50">initrd_filename</name></decl></parameter>,

		       <parameter pos:start="9:24" pos:end="9:49"><decl pos:start="9:24" pos:end="9:49"><type pos:start="9:24" pos:end="9:49"><specifier pos:start="9:24" pos:end="9:28">const</specifier> <name pos:start="9:30" pos:end="9:33">char</name> <modifier pos:start="9:35" pos:end="9:35">*</modifier></type><name pos:start="9:36" pos:end="9:49">kernel_cmdline</name></decl></parameter>,

               <parameter pos:start="11:16" pos:end="11:46"><decl pos:start="11:16" pos:end="11:46"><type pos:start="11:16" pos:end="11:46"><name pos:start="11:16" pos:end="11:33">target_phys_addr_t</name></type> <name pos:start="11:35" pos:end="11:46">max_ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="385:1">{<block_content pos:start="15:5" pos:end="383:47">

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:21">protocol</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19"><name pos:start="17:14" pos:end="17:16">gpr</name><index pos:start="17:17" pos:end="17:19">[<expr pos:start="17:18" pos:end="17:18"><literal type="number" pos:start="17:18" pos:end="17:18">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint16_t</name></type> <name pos:start="19:14" pos:end="19:19"><name pos:start="19:14" pos:end="19:16">seg</name><index pos:start="19:17" pos:end="19:19">[<expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint16_t</name></type> <name pos:start="21:14" pos:end="21:21">real_seg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:63"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">setup_size</name></decl>, <decl pos:start="23:21" pos:end="23:31"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:21" pos:end="23:31">kernel_size</name></decl>, <decl pos:start="23:34" pos:end="23:48"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:34" pos:end="23:44">initrd_size</name> <init pos:start="23:46" pos:end="23:48">= <expr pos:start="23:48" pos:end="23:48"><literal type="number" pos:start="23:48" pos:end="23:48">0</literal></expr></init></decl>, <decl pos:start="23:51" pos:end="23:62"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:51" pos:end="23:62">cmdline_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:23">initrd_max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:24"><name pos:start="27:13" pos:end="27:18">header</name><index pos:start="27:19" pos:end="27:24">[<expr pos:start="27:20" pos:end="27:23"><literal type="number" pos:start="27:20" pos:end="27:23">8192</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:75"><decl pos:start="29:5" pos:end="29:32"><type pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:22">target_phys_addr_t</name></type> <name pos:start="29:24" pos:end="29:32">real_addr</name></decl>, <decl pos:start="29:35" pos:end="29:43"><type ref="prev" pos:start="29:5" pos:end="29:22"/><name pos:start="29:35" pos:end="29:43">prot_addr</name></decl>, <decl pos:start="29:46" pos:end="29:57"><type ref="prev" pos:start="29:5" pos:end="29:22"/><name pos:start="29:46" pos:end="29:57">cmdline_addr</name></decl>, <decl pos:start="29:60" pos:end="29:74"><type ref="prev" pos:start="29:5" pos:end="29:22"/><name pos:start="29:60" pos:end="29:70">initrd_addr</name> <init pos:start="29:72" pos:end="29:74">= <expr pos:start="29:74" pos:end="29:74"><literal type="number" pos:start="29:74" pos:end="29:74">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:11"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:8">FILE</name> <modifier pos:start="31:10" pos:end="31:10">*</modifier></type><name pos:start="31:11" pos:end="31:11">f</name></decl>, <decl pos:start="31:14" pos:end="31:16"><type ref="prev" pos:start="31:5" pos:end="31:10"><modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:16">fi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:16"><decl pos:start="33:5" pos:end="33:15"><type pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:8">char</name> <modifier pos:start="33:10" pos:end="33:10">*</modifier></type><name pos:start="33:11" pos:end="33:15">vmode</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:49">/* Align to 16 bytes as a paranoia measure */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:16">cmdline_size</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <operator pos:start="39:20" pos:end="39:20">(</operator><call pos:start="39:21" pos:end="39:42"><name pos:start="39:21" pos:end="39:26">strlen</name><argument_list pos:start="39:27" pos:end="39:42">(<argument pos:start="39:28" pos:end="39:41"><expr pos:start="39:28" pos:end="39:41"><name pos:start="39:28" pos:end="39:41">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="39:43" pos:end="39:43">+</operator><literal type="number" pos:start="39:44" pos:end="39:45">16</literal><operator pos:start="39:46" pos:end="39:46">)</operator> <operator pos:start="39:48" pos:end="39:48">&amp;</operator> <operator pos:start="39:50" pos:end="39:50">~</operator><literal type="number" pos:start="39:51" pos:end="39:52">15</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:32">/* load the kernel header */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:5">f</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:13">fopen</name><argument_list pos:start="45:14" pos:end="45:36">(<argument pos:start="45:15" pos:end="45:29"><expr pos:start="45:15" pos:end="45:29"><name pos:start="45:15" pos:end="45:29">kernel_filename</name></expr></argument>, <argument pos:start="45:32" pos:end="45:35"><expr pos:start="45:32" pos:end="45:35"><literal type="string" pos:start="45:32" pos:end="45:35">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="70:0"><if pos:start="47:5" pos:end="70:0">if <condition pos:start="47:8" pos:end="51:45">(<expr pos:start="47:9" pos:end="51:44"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:10">f</name> <operator pos:start="47:12" pos:end="47:13">||</operator> <operator pos:start="47:15" pos:end="47:15">!</operator><operator pos:start="47:16" pos:end="47:16">(</operator><name pos:start="47:17" pos:end="47:27">kernel_size</name> <operator pos:start="47:29" pos:end="47:29">=</operator> <call pos:start="47:31" pos:end="47:46"><name pos:start="47:31" pos:end="47:43">get_file_size</name><argument_list pos:start="47:44" pos:end="47:46">(<argument pos:start="47:45" pos:end="47:45"><expr pos:start="47:45" pos:end="47:45"><name pos:start="47:45" pos:end="47:45">f</name></expr></argument>)</argument_list></call><operator pos:start="47:47" pos:end="47:47">)</operator> <operator pos:start="47:49" pos:end="47:50">||</operator>

	<call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:13">fread</name><argument_list pos:start="49:14" pos:end="49:65">(<argument pos:start="49:15" pos:end="49:20"><expr pos:start="49:15" pos:end="49:20"><name pos:start="49:15" pos:end="49:20">header</name></expr></argument>, <argument pos:start="49:23" pos:end="49:23"><expr pos:start="49:23" pos:end="49:23"><literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr></argument>, <argument pos:start="49:26" pos:end="49:61"><expr pos:start="49:26" pos:end="49:61"><call pos:start="49:26" pos:end="49:61"><name pos:start="49:26" pos:end="49:28">MIN</name><argument_list pos:start="49:29" pos:end="49:61">(<argument pos:start="49:30" pos:end="49:47"><expr pos:start="49:30" pos:end="49:47"><call pos:start="49:30" pos:end="49:47"><name pos:start="49:30" pos:end="49:39">ARRAY_SIZE</name><argument_list pos:start="49:40" pos:end="49:47">(<argument pos:start="49:41" pos:end="49:46"><expr pos:start="49:41" pos:end="49:46"><name pos:start="49:41" pos:end="49:46">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:50" pos:end="49:60"><expr pos:start="49:50" pos:end="49:60"><name pos:start="49:50" pos:end="49:60">kernel_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:64" pos:end="49:64"><expr pos:start="49:64" pos:end="49:64"><name pos:start="49:64" pos:end="49:64">f</name></expr></argument>)</argument_list></call> <operator pos:start="49:67" pos:end="49:68">!=</operator>

	<call pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:11">MIN</name><argument_list pos:start="51:12" pos:end="51:44">(<argument pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:30"><call pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:22">ARRAY_SIZE</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:29"><expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:29">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:33" pos:end="51:43"><expr pos:start="51:33" pos:end="51:43"><name pos:start="51:33" pos:end="51:43">kernel_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:47" pos:end="70:0">{<block_content pos:start="53:9" pos:end="57:16">

	<expr_stmt pos:start="53:9" pos:end="55:50"><expr pos:start="53:9" pos:end="55:49"><call pos:start="53:9" pos:end="55:49"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="55:49">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:64"><expr pos:start="53:25" pos:end="53:64"><literal type="string" pos:start="53:25" pos:end="53:64">"qemu: could not load kernel '%s': %s\n"</literal></expr></argument>,

		<argument pos:start="55:17" pos:end="55:31"><expr pos:start="55:17" pos:end="55:31"><name pos:start="55:17" pos:end="55:31">kernel_filename</name></expr></argument>, <argument pos:start="55:34" pos:end="55:48"><expr pos:start="55:34" pos:end="55:48"><call pos:start="55:34" pos:end="55:48"><name pos:start="55:34" pos:end="55:41">strerror</name><argument_list pos:start="55:42" pos:end="55:48">(<argument pos:start="55:43" pos:end="55:47"><expr pos:start="55:43" pos:end="55:47"><name pos:start="55:43" pos:end="55:47">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:33">/* kernel protocol version */</comment>

<cpp:if pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:3">if</cpp:directive> <expr pos:start="65:5" pos:end="65:5"><literal type="number" pos:start="65:5" pos:end="65:5">0</literal></expr></cpp:if>

    fprintf(stderr, "header magic: %#x\n", ldl_p(header+0x202));

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="71:5" pos:end="89:5"><if pos:start="71:5" pos:end="73:40">if <condition pos:start="71:8" pos:end="71:42">(<expr pos:start="71:9" pos:end="71:41"><call pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:13">ldl_p</name><argument_list pos:start="71:14" pos:end="71:27">(<argument pos:start="71:15" pos:end="71:26"><expr pos:start="71:15" pos:end="71:26"><name pos:start="71:15" pos:end="71:20">header</name><operator pos:start="71:21" pos:end="71:21">+</operator><literal type="number" pos:start="71:22" pos:end="71:26">0x202</literal></expr></argument>)</argument_list></call> <operator pos:start="71:29" pos:end="71:30">==</operator> <literal type="number" pos:start="71:32" pos:end="71:41">0x53726448</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:40"><block_content pos:start="73:9" pos:end="73:40">

	<expr_stmt pos:start="73:9" pos:end="73:40"><expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:16">protocol</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:39"><name pos:start="73:20" pos:end="73:25">lduw_p</name><argument_list pos:start="73:26" pos:end="73:39">(<argument pos:start="73:27" pos:end="73:38"><expr pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:32">header</name><operator pos:start="73:33" pos:end="73:33">+</operator><literal type="number" pos:start="73:34" pos:end="73:38">0x206</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="75:5" pos:end="89:5">else <block pos:start="75:10" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:21">

	<comment type="block" pos:start="77:9" pos:end="79:46">/* This looks like a multiboot kernel. If it is, let's stop

	   treating it like a Linux kernel. */</comment>

	<if_stmt pos:start="81:9" pos:end="85:19"><if pos:start="81:9" pos:end="85:19">if <condition pos:start="81:12" pos:end="83:68">(<expr pos:start="81:13" pos:end="83:67"><call pos:start="81:13" pos:end="83:67"><name pos:start="81:13" pos:end="81:26">load_multiboot</name><argument_list pos:start="81:27" pos:end="83:67">(<argument pos:start="81:28" pos:end="81:33"><expr pos:start="81:28" pos:end="81:33"><name pos:start="81:28" pos:end="81:33">fw_cfg</name></expr></argument>, <argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><name pos:start="81:36" pos:end="81:36">f</name></expr></argument>, <argument pos:start="81:39" pos:end="81:53"><expr pos:start="81:39" pos:end="81:53"><name pos:start="81:39" pos:end="81:53">kernel_filename</name></expr></argument>,

                           <argument pos:start="83:28" pos:end="83:42"><expr pos:start="83:28" pos:end="83:42"><name pos:start="83:28" pos:end="83:42">initrd_filename</name></expr></argument>, <argument pos:start="83:45" pos:end="83:58"><expr pos:start="83:45" pos:end="83:58"><name pos:start="83:45" pos:end="83:58">kernel_cmdline</name></expr></argument>, <argument pos:start="83:61" pos:end="83:66"><expr pos:start="83:61" pos:end="83:66"><name pos:start="83:61" pos:end="83:66">header</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:19"><block_content pos:start="85:13" pos:end="85:19">

            <return pos:start="85:13" pos:end="85:19">return;</return></block_content></block></if></if_stmt>

	<expr_stmt pos:start="87:9" pos:end="87:21"><expr pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:16">protocol</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="93:5" pos:end="144:0"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:52">(<expr pos:start="93:9" pos:end="93:51"><name pos:start="93:9" pos:end="93:16">protocol</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <literal type="number" pos:start="93:20" pos:end="93:24">0x200</literal> <operator pos:start="93:26" pos:end="93:27">||</operator> <operator pos:start="93:29" pos:end="93:29">!</operator><operator pos:start="93:30" pos:end="93:30">(</operator><name pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:36">header</name><index pos:start="93:37" pos:end="93:43">[<expr pos:start="93:38" pos:end="93:42"><literal type="number" pos:start="93:38" pos:end="93:42">0x211</literal></expr>]</index></name> <operator pos:start="93:45" pos:end="93:45">&amp;</operator> <literal type="number" pos:start="93:47" pos:end="93:50">0x01</literal><operator pos:start="93:51" pos:end="93:51">)</operator></expr>)</condition> <block pos:start="93:54" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:31">

	<comment type="block" pos:start="95:9" pos:end="95:24">/* Low kernel */</comment>

	<expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:17">real_addr</name>    <operator pos:start="97:22" pos:end="97:22">=</operator> <literal type="number" pos:start="97:24" pos:end="97:30">0x90000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="99:9" pos:end="99:46"><expr pos:start="99:9" pos:end="99:45"><name pos:start="99:9" pos:end="99:20">cmdline_addr</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:32">0x9a000</literal> <operator pos:start="99:32" pos:end="99:32">-</operator> <name pos:start="99:34" pos:end="99:45">cmdline_size</name></expr>;</expr_stmt>

	<expr_stmt pos:start="101:9" pos:end="101:31"><expr pos:start="101:9" pos:end="101:30"><name pos:start="101:9" pos:end="101:17">prot_addr</name>    <operator pos:start="101:22" pos:end="101:22">=</operator> <literal type="number" pos:start="101:24" pos:end="101:30">0x10000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="113:5">else if <condition pos:start="103:15" pos:end="103:32">(<expr pos:start="103:16" pos:end="103:31"><name pos:start="103:16" pos:end="103:23">protocol</name> <operator pos:start="103:25" pos:end="103:25">&lt;</operator> <literal type="number" pos:start="103:27" pos:end="103:31">0x202</literal></expr>)</condition> <block pos:start="103:34" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:32">

	<comment type="block" pos:start="105:9" pos:end="105:37">/* High but ancient kernel */</comment>

	<expr_stmt pos:start="107:9" pos:end="107:31"><expr pos:start="107:9" pos:end="107:30"><name pos:start="107:9" pos:end="107:17">real_addr</name>    <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:30">0x90000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:20">cmdline_addr</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <literal type="number" pos:start="109:24" pos:end="109:32">0x9a000</literal> <operator pos:start="109:32" pos:end="109:32">-</operator> <name pos:start="109:34" pos:end="109:45">cmdline_size</name></expr>;</expr_stmt>

	<expr_stmt pos:start="111:9" pos:end="111:32"><expr pos:start="111:9" pos:end="111:31"><name pos:start="111:9" pos:end="111:17">prot_addr</name>    <operator pos:start="111:22" pos:end="111:22">=</operator> <literal type="number" pos:start="111:24" pos:end="111:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="144:0">else <block pos:start="113:12" pos:end="144:0">{<block_content pos:start="117:9" pos:end="121:32">

	<comment type="block" pos:start="115:9" pos:end="115:36">/* High and recent kernel */</comment>

	<expr_stmt pos:start="117:9" pos:end="117:31"><expr pos:start="117:9" pos:end="117:30"><name pos:start="117:9" pos:end="117:17">real_addr</name>    <operator pos:start="117:22" pos:end="117:22">=</operator> <literal type="number" pos:start="117:24" pos:end="117:30">0x10000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:20">cmdline_addr</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <literal type="number" pos:start="119:24" pos:end="119:30">0x20000</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="121:9" pos:end="121:32"><expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:17">prot_addr</name>    <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:31">0x100000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:if pos:start="127:1" pos:end="127:5">#<cpp:directive pos:start="127:2" pos:end="127:3">if</cpp:directive> <expr pos:start="127:5" pos:end="127:5"><literal type="number" pos:start="127:5" pos:end="127:5">0</literal></expr></cpp:if>

    fprintf(stderr,

	    "qemu: real_addr     = 0x" TARGET_FMT_plx "\n"

	    "qemu: cmdline_addr  = 0x" TARGET_FMT_plx "\n"

	    "qemu: prot_addr     = 0x" TARGET_FMT_plx "\n",

	    real_addr,

	    cmdline_addr,

	    prot_addr);

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="147:5" pos:end="147:48">/* highest address for loading the initrd */</comment>

    <if_stmt pos:start="149:5" pos:end="155:32"><if pos:start="149:5" pos:end="151:41">if <condition pos:start="149:8" pos:end="149:26">(<expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:16">protocol</name> <operator pos:start="149:18" pos:end="149:19">&gt;=</operator> <literal type="number" pos:start="149:21" pos:end="149:25">0x203</literal></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:41"><block_content pos:start="151:9" pos:end="151:41">

	<expr_stmt pos:start="151:9" pos:end="151:41"><expr pos:start="151:9" pos:end="151:40"><name pos:start="151:9" pos:end="151:18">initrd_max</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:40"><name pos:start="151:22" pos:end="151:26">ldl_p</name><argument_list pos:start="151:27" pos:end="151:40">(<argument pos:start="151:28" pos:end="151:39"><expr pos:start="151:28" pos:end="151:39"><name pos:start="151:28" pos:end="151:33">header</name><operator pos:start="151:34" pos:end="151:34">+</operator><literal type="number" pos:start="151:35" pos:end="151:39">0x22c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="153:5" pos:end="155:32">else<block type="pseudo" pos:start="155:9" pos:end="155:32"><block_content pos:start="155:9" pos:end="155:32">

	<expr_stmt pos:start="155:9" pos:end="155:32"><expr pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:18">initrd_max</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <literal type="number" pos:start="155:22" pos:end="155:31">0x37ffffff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="159:5" pos:end="161:51"><if pos:start="159:5" pos:end="161:51">if <condition pos:start="159:8" pos:end="159:50">(<expr pos:start="159:9" pos:end="159:49"><name pos:start="159:9" pos:end="159:18">initrd_max</name> <operator pos:start="159:20" pos:end="159:21">&gt;=</operator> <name pos:start="159:23" pos:end="159:34">max_ram_size</name><operator pos:start="159:35" pos:end="159:35">-</operator><name pos:start="159:36" pos:end="159:49">ACPI_DATA_SIZE</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:51"><block_content pos:start="161:9" pos:end="161:51">

    	<expr_stmt pos:start="161:9" pos:end="161:51"><expr pos:start="161:9" pos:end="161:50"><name pos:start="161:9" pos:end="161:18">initrd_max</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <name pos:start="161:22" pos:end="161:33">max_ram_size</name><operator pos:start="161:34" pos:end="161:34">-</operator><name pos:start="161:35" pos:end="161:48">ACPI_DATA_SIZE</name><operator pos:start="161:49" pos:end="161:49">-</operator><literal type="number" pos:start="161:50" pos:end="161:50">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:29">/* kernel command line */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:57"><expr pos:start="167:5" pos:end="167:56"><call pos:start="167:5" pos:end="167:56"><name pos:start="167:5" pos:end="167:20">pstrcpy_targphys</name><argument_list pos:start="167:21" pos:end="167:56">(<argument pos:start="167:22" pos:end="167:33"><expr pos:start="167:22" pos:end="167:33"><name pos:start="167:22" pos:end="167:33">cmdline_addr</name></expr></argument>, <argument pos:start="167:36" pos:end="167:39"><expr pos:start="167:36" pos:end="167:39"><literal type="number" pos:start="167:36" pos:end="167:39">4096</literal></expr></argument>, <argument pos:start="167:42" pos:end="167:55"><expr pos:start="167:42" pos:end="167:55"><name pos:start="167:42" pos:end="167:55">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="175:5">if <condition pos:start="171:8" pos:end="171:26">(<expr pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:16">protocol</name> <operator pos:start="171:18" pos:end="171:19">&gt;=</operator> <literal type="number" pos:start="171:21" pos:end="171:25">0x202</literal></expr>)</condition> <block pos:start="171:28" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:42">

	<expr_stmt pos:start="173:9" pos:end="173:42"><expr pos:start="173:9" pos:end="173:41"><call pos:start="173:9" pos:end="173:41"><name pos:start="173:9" pos:end="173:13">stl_p</name><argument_list pos:start="173:14" pos:end="173:41">(<argument pos:start="173:15" pos:end="173:26"><expr pos:start="173:15" pos:end="173:26"><name pos:start="173:15" pos:end="173:20">header</name><operator pos:start="173:21" pos:end="173:21">+</operator><literal type="number" pos:start="173:22" pos:end="173:26">0x228</literal></expr></argument>, <argument pos:start="173:29" pos:end="173:40"><expr pos:start="173:29" pos:end="173:40"><name pos:start="173:29" pos:end="173:40">cmdline_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="181:5">else <block pos:start="175:12" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:51">

	<expr_stmt pos:start="177:9" pos:end="177:35"><expr pos:start="177:9" pos:end="177:34"><call pos:start="177:9" pos:end="177:34"><name pos:start="177:9" pos:end="177:13">stw_p</name><argument_list pos:start="177:14" pos:end="177:34">(<argument pos:start="177:15" pos:end="177:25"><expr pos:start="177:15" pos:end="177:25"><name pos:start="177:15" pos:end="177:20">header</name><operator pos:start="177:21" pos:end="177:21">+</operator><literal type="number" pos:start="177:22" pos:end="177:25">0x20</literal></expr></argument>, <argument pos:start="177:28" pos:end="177:33"><expr pos:start="177:28" pos:end="177:33"><literal type="number" pos:start="177:28" pos:end="177:33">0xA33F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="179:9" pos:end="179:51"><expr pos:start="179:9" pos:end="179:50"><call pos:start="179:9" pos:end="179:50"><name pos:start="179:9" pos:end="179:13">stw_p</name><argument_list pos:start="179:14" pos:end="179:50">(<argument pos:start="179:15" pos:end="179:25"><expr pos:start="179:15" pos:end="179:25"><name pos:start="179:15" pos:end="179:20">header</name><operator pos:start="179:21" pos:end="179:21">+</operator><literal type="number" pos:start="179:22" pos:end="179:25">0x22</literal></expr></argument>, <argument pos:start="179:28" pos:end="179:49"><expr pos:start="179:28" pos:end="179:49"><name pos:start="179:28" pos:end="179:39">cmdline_addr</name><operator pos:start="179:40" pos:end="179:40">-</operator><name pos:start="179:41" pos:end="179:49">real_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:31">/* handle vga= parameter */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:43"><expr pos:start="187:5" pos:end="187:42"><name pos:start="187:5" pos:end="187:9">vmode</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <call pos:start="187:13" pos:end="187:42"><name pos:start="187:13" pos:end="187:18">strstr</name><argument_list pos:start="187:19" pos:end="187:42">(<argument pos:start="187:20" pos:end="187:33"><expr pos:start="187:20" pos:end="187:33"><name pos:start="187:20" pos:end="187:33">kernel_cmdline</name></expr></argument>, <argument pos:start="187:36" pos:end="187:41"><expr pos:start="187:36" pos:end="187:41"><literal type="string" pos:start="187:36" pos:end="187:41">"vga="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="217:5"><if pos:start="189:5" pos:end="217:5">if <condition pos:start="189:8" pos:end="189:14">(<expr pos:start="189:9" pos:end="189:13"><name pos:start="189:9" pos:end="189:13">vmode</name></expr>)</condition> <block pos:start="189:16" pos:end="217:5">{<block_content pos:start="191:9" pos:end="215:40">

        <decl_stmt pos:start="191:9" pos:end="191:32"><decl pos:start="191:9" pos:end="191:31"><type pos:start="191:9" pos:end="191:20"><name pos:start="191:9" pos:end="191:16">unsigned</name> <name pos:start="191:18" pos:end="191:20">int</name></type> <name pos:start="191:22" pos:end="191:31">video_mode</name></decl>;</decl_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:25">/* skip "vga=" */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:19"><expr pos:start="195:9" pos:end="195:18"><name pos:start="195:9" pos:end="195:13">vmode</name> <operator pos:start="195:15" pos:end="195:16">+=</operator> <literal type="number" pos:start="195:18" pos:end="195:18">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="213:9"><if pos:start="197:9" pos:end="201:9">if <condition pos:start="197:12" pos:end="197:41">(<expr pos:start="197:13" pos:end="197:40"><operator pos:start="197:13" pos:end="197:13">!</operator><call pos:start="197:14" pos:end="197:40"><name pos:start="197:14" pos:end="197:20">strncmp</name><argument_list pos:start="197:21" pos:end="197:40">(<argument pos:start="197:22" pos:end="197:26"><expr pos:start="197:22" pos:end="197:26"><name pos:start="197:22" pos:end="197:26">vmode</name></expr></argument>, <argument pos:start="197:29" pos:end="197:36"><expr pos:start="197:29" pos:end="197:36"><literal type="string" pos:start="197:29" pos:end="197:36">"normal"</literal></expr></argument>, <argument pos:start="197:39" pos:end="197:39"><expr pos:start="197:39" pos:end="197:39"><literal type="number" pos:start="197:39" pos:end="197:39">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:43" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:32">

            <expr_stmt pos:start="199:13" pos:end="199:32"><expr pos:start="199:13" pos:end="199:31"><name pos:start="199:13" pos:end="199:22">video_mode</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <literal type="number" pos:start="199:26" pos:end="199:31">0xffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="201:11" pos:end="205:9">else if <condition pos:start="201:19" pos:end="201:45">(<expr pos:start="201:20" pos:end="201:44"><operator pos:start="201:20" pos:end="201:20">!</operator><call pos:start="201:21" pos:end="201:44"><name pos:start="201:21" pos:end="201:27">strncmp</name><argument_list pos:start="201:28" pos:end="201:44">(<argument pos:start="201:29" pos:end="201:33"><expr pos:start="201:29" pos:end="201:33"><name pos:start="201:29" pos:end="201:33">vmode</name></expr></argument>, <argument pos:start="201:36" pos:end="201:40"><expr pos:start="201:36" pos:end="201:40"><literal type="string" pos:start="201:36" pos:end="201:40">"ext"</literal></expr></argument>, <argument pos:start="201:43" pos:end="201:43"><expr pos:start="201:43" pos:end="201:43"><literal type="number" pos:start="201:43" pos:end="201:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="201:47" pos:end="205:9">{<block_content pos:start="203:13" pos:end="203:32">

            <expr_stmt pos:start="203:13" pos:end="203:32"><expr pos:start="203:13" pos:end="203:31"><name pos:start="203:13" pos:end="203:22">video_mode</name> <operator pos:start="203:24" pos:end="203:24">=</operator> <literal type="number" pos:start="203:26" pos:end="203:31">0xfffe</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="205:11" pos:end="209:9">else if <condition pos:start="205:19" pos:end="205:45">(<expr pos:start="205:20" pos:end="205:44"><operator pos:start="205:20" pos:end="205:20">!</operator><call pos:start="205:21" pos:end="205:44"><name pos:start="205:21" pos:end="205:27">strncmp</name><argument_list pos:start="205:28" pos:end="205:44">(<argument pos:start="205:29" pos:end="205:33"><expr pos:start="205:29" pos:end="205:33"><name pos:start="205:29" pos:end="205:33">vmode</name></expr></argument>, <argument pos:start="205:36" pos:end="205:40"><expr pos:start="205:36" pos:end="205:40"><literal type="string" pos:start="205:36" pos:end="205:40">"ask"</literal></expr></argument>, <argument pos:start="205:43" pos:end="205:43"><expr pos:start="205:43" pos:end="205:43"><literal type="number" pos:start="205:43" pos:end="205:43">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:47" pos:end="209:9">{<block_content pos:start="207:13" pos:end="207:32">

            <expr_stmt pos:start="207:13" pos:end="207:32"><expr pos:start="207:13" pos:end="207:31"><name pos:start="207:13" pos:end="207:22">video_mode</name> <operator pos:start="207:24" pos:end="207:24">=</operator> <literal type="number" pos:start="207:26" pos:end="207:31">0xfffd</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="209:11" pos:end="213:9">else <block pos:start="209:16" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:48">

            <expr_stmt pos:start="211:13" pos:end="211:48"><expr pos:start="211:13" pos:end="211:47"><name pos:start="211:13" pos:end="211:22">video_mode</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <call pos:start="211:26" pos:end="211:47"><name pos:start="211:26" pos:end="211:31">strtol</name><argument_list pos:start="211:32" pos:end="211:47">(<argument pos:start="211:33" pos:end="211:37"><expr pos:start="211:33" pos:end="211:37"><name pos:start="211:33" pos:end="211:37">vmode</name></expr></argument>, <argument pos:start="211:40" pos:end="211:43"><expr pos:start="211:40" pos:end="211:43"><name pos:start="211:40" pos:end="211:43">NULL</name></expr></argument>, <argument pos:start="211:46" pos:end="211:46"><expr pos:start="211:46" pos:end="211:46"><literal type="number" pos:start="211:46" pos:end="211:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:40"><expr pos:start="215:9" pos:end="215:39"><call pos:start="215:9" pos:end="215:39"><name pos:start="215:9" pos:end="215:13">stw_p</name><argument_list pos:start="215:14" pos:end="215:39">(<argument pos:start="215:15" pos:end="215:26"><expr pos:start="215:15" pos:end="215:26"><name pos:start="215:15" pos:end="215:20">header</name><operator pos:start="215:21" pos:end="215:21">+</operator><literal type="number" pos:start="215:22" pos:end="215:26">0x1fa</literal></expr></argument>, <argument pos:start="215:29" pos:end="215:38"><expr pos:start="215:29" pos:end="215:38"><name pos:start="215:29" pos:end="215:38">video_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:21">/* loader type */</comment>

    <comment type="block" pos:start="223:5" pos:end="227:36">/* High nybble = B reserved for Qemu; low nybble is revision number.

       If this code is substantially changed, you may want to consider

       incrementing the revision. */</comment>

    <if_stmt pos:start="229:5" pos:end="231:29"><if pos:start="229:5" pos:end="231:29">if <condition pos:start="229:8" pos:end="229:26">(<expr pos:start="229:9" pos:end="229:25"><name pos:start="229:9" pos:end="229:16">protocol</name> <operator pos:start="229:18" pos:end="229:19">&gt;=</operator> <literal type="number" pos:start="229:21" pos:end="229:25">0x200</literal></expr>)</condition><block type="pseudo" pos:start="231:9" pos:end="231:29"><block_content pos:start="231:9" pos:end="231:29">

	<expr_stmt pos:start="231:9" pos:end="231:29"><expr pos:start="231:9" pos:end="231:28"><name pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:14">header</name><index pos:start="231:15" pos:end="231:21">[<expr pos:start="231:16" pos:end="231:20"><literal type="number" pos:start="231:16" pos:end="231:20">0x210</literal></expr>]</index></name> <operator pos:start="231:23" pos:end="231:23">=</operator> <literal type="number" pos:start="231:25" pos:end="231:28">0xB0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:14">/* heap */</comment>

    <if_stmt pos:start="237:5" pos:end="243:5"><if pos:start="237:5" pos:end="243:5">if <condition pos:start="237:8" pos:end="237:26">(<expr pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:16">protocol</name> <operator pos:start="237:18" pos:end="237:19">&gt;=</operator> <literal type="number" pos:start="237:21" pos:end="237:25">0x201</literal></expr>)</condition> <block pos:start="237:28" pos:end="243:5">{<block_content pos:start="239:9" pos:end="241:58">

	<expr_stmt pos:start="239:9" pos:end="239:30"><expr pos:start="239:9" pos:end="239:29"><name pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:14">header</name><index pos:start="239:15" pos:end="239:21">[<expr pos:start="239:16" pos:end="239:20"><literal type="number" pos:start="239:16" pos:end="239:20">0x211</literal></expr>]</index></name> <operator pos:start="239:23" pos:end="239:24">|=</operator> <literal type="number" pos:start="239:26" pos:end="239:29">0x80</literal></expr>;</expr_stmt>	<comment type="block" pos:start="239:33" pos:end="239:50">/* CAN_USE_HEAP */</comment>

	<expr_stmt pos:start="241:9" pos:end="241:58"><expr pos:start="241:9" pos:end="241:57"><call pos:start="241:9" pos:end="241:57"><name pos:start="241:9" pos:end="241:13">stw_p</name><argument_list pos:start="241:14" pos:end="241:57">(<argument pos:start="241:15" pos:end="241:26"><expr pos:start="241:15" pos:end="241:26"><name pos:start="241:15" pos:end="241:20">header</name><operator pos:start="241:21" pos:end="241:21">+</operator><literal type="number" pos:start="241:22" pos:end="241:26">0x224</literal></expr></argument>, <argument pos:start="241:29" pos:end="241:56"><expr pos:start="241:29" pos:end="241:56"><name pos:start="241:29" pos:end="241:40">cmdline_addr</name><operator pos:start="241:41" pos:end="241:41">-</operator><name pos:start="241:42" pos:end="241:50">real_addr</name><operator pos:start="241:51" pos:end="241:51">-</operator><literal type="number" pos:start="241:52" pos:end="241:56">0x200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:21">/* load initrd */</comment>

    <if_stmt pos:start="249:5" pos:end="299:5"><if pos:start="249:5" pos:end="299:5">if <condition pos:start="249:8" pos:end="249:24">(<expr pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:23">initrd_filename</name></expr>)</condition> <block pos:start="249:26" pos:end="299:5">{<block_content pos:start="251:9" pos:end="297:41">

	<if_stmt pos:start="251:9" pos:end="257:9"><if pos:start="251:9" pos:end="257:9">if <condition pos:start="251:12" pos:end="251:29">(<expr pos:start="251:13" pos:end="251:28"><name pos:start="251:13" pos:end="251:20">protocol</name> <operator pos:start="251:22" pos:end="251:22">&lt;</operator> <literal type="number" pos:start="251:24" pos:end="251:28">0x200</literal></expr>)</condition> <block pos:start="251:31" pos:end="257:9">{<block_content pos:start="253:13" pos:end="255:20">

	    <expr_stmt pos:start="253:13" pos:end="253:79"><expr pos:start="253:13" pos:end="253:78"><call pos:start="253:13" pos:end="253:78"><name pos:start="253:13" pos:end="253:19">fprintf</name><argument_list pos:start="253:20" pos:end="253:78">(<argument pos:start="253:21" pos:end="253:26"><expr pos:start="253:21" pos:end="253:26"><name pos:start="253:21" pos:end="253:26">stderr</name></expr></argument>, <argument pos:start="253:29" pos:end="253:77"><expr pos:start="253:29" pos:end="253:77"><literal type="string" pos:start="253:29" pos:end="253:77">"qemu: linux kernel too old to load a ram disk\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="255:13" pos:end="255:20"><expr pos:start="255:13" pos:end="255:19"><call pos:start="255:13" pos:end="255:19"><name pos:start="255:13" pos:end="255:16">exit</name><argument_list pos:start="255:17" pos:end="255:19">(<argument pos:start="255:18" pos:end="255:18"><expr pos:start="255:18" pos:end="255:18"><literal type="number" pos:start="255:18" pos:end="255:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="261:9" pos:end="261:42"><expr pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:10">fi</name> <operator pos:start="261:12" pos:end="261:12">=</operator> <call pos:start="261:14" pos:end="261:41"><name pos:start="261:14" pos:end="261:18">fopen</name><argument_list pos:start="261:19" pos:end="261:41">(<argument pos:start="261:20" pos:end="261:34"><expr pos:start="261:20" pos:end="261:34"><name pos:start="261:20" pos:end="261:34">initrd_filename</name></expr></argument>, <argument pos:start="261:37" pos:end="261:40"><expr pos:start="261:37" pos:end="261:40"><literal type="string" pos:start="261:37" pos:end="261:40">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="263:9" pos:end="271:9"><if pos:start="263:9" pos:end="271:9">if <condition pos:start="263:12" pos:end="263:16">(<expr pos:start="263:13" pos:end="263:15"><operator pos:start="263:13" pos:end="263:13">!</operator><name pos:start="263:14" pos:end="263:15">fi</name></expr>)</condition> <block pos:start="263:18" pos:end="271:9">{<block_content pos:start="265:13" pos:end="269:20">

	    <expr_stmt pos:start="265:13" pos:end="267:54"><expr pos:start="265:13" pos:end="267:53"><call pos:start="265:13" pos:end="267:53"><name pos:start="265:13" pos:end="265:19">fprintf</name><argument_list pos:start="265:20" pos:end="267:53">(<argument pos:start="265:21" pos:end="265:26"><expr pos:start="265:21" pos:end="265:26"><name pos:start="265:21" pos:end="265:26">stderr</name></expr></argument>, <argument pos:start="265:29" pos:end="265:78"><expr pos:start="265:29" pos:end="265:78"><literal type="string" pos:start="265:29" pos:end="265:78">"qemu: could not load initial ram disk '%s': %s\n"</literal></expr></argument>,

		    <argument pos:start="267:21" pos:end="267:35"><expr pos:start="267:21" pos:end="267:35"><name pos:start="267:21" pos:end="267:35">initrd_filename</name></expr></argument>, <argument pos:start="267:38" pos:end="267:52"><expr pos:start="267:38" pos:end="267:52"><call pos:start="267:38" pos:end="267:52"><name pos:start="267:38" pos:end="267:45">strerror</name><argument_list pos:start="267:46" pos:end="267:52">(<argument pos:start="267:47" pos:end="267:51"><expr pos:start="267:47" pos:end="267:51"><name pos:start="267:47" pos:end="267:51">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="269:13" pos:end="269:20"><expr pos:start="269:13" pos:end="269:19"><call pos:start="269:13" pos:end="269:19"><name pos:start="269:13" pos:end="269:16">exit</name><argument_list pos:start="269:17" pos:end="269:19">(<argument pos:start="269:18" pos:end="269:18"><expr pos:start="269:18" pos:end="269:18"><literal type="number" pos:start="269:18" pos:end="269:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="275:9" pos:end="275:40"><expr pos:start="275:9" pos:end="275:39"><name pos:start="275:9" pos:end="275:19">initrd_size</name> <operator pos:start="275:21" pos:end="275:21">=</operator> <call pos:start="275:23" pos:end="275:39"><name pos:start="275:23" pos:end="275:35">get_file_size</name><argument_list pos:start="275:36" pos:end="275:39">(<argument pos:start="275:37" pos:end="275:38"><expr pos:start="275:37" pos:end="275:38"><name pos:start="275:37" pos:end="275:38">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="277:9" pos:end="277:55"><expr pos:start="277:9" pos:end="277:54"><name pos:start="277:9" pos:end="277:19">initrd_addr</name> <operator pos:start="277:21" pos:end="277:21">=</operator> <operator pos:start="277:23" pos:end="277:23">(</operator><name pos:start="277:24" pos:end="277:33">initrd_max</name><operator pos:start="277:34" pos:end="277:34">-</operator><name pos:start="277:35" pos:end="277:45">initrd_size</name><operator pos:start="277:46" pos:end="277:46">)</operator> <operator pos:start="277:48" pos:end="277:48">&amp;</operator> <operator pos:start="277:50" pos:end="277:50">~</operator><literal type="number" pos:start="277:51" pos:end="277:54">4095</literal></expr>;</expr_stmt>



	<if_stmt pos:start="281:9" pos:end="289:9"><if pos:start="281:9" pos:end="289:9">if <condition pos:start="281:12" pos:end="281:61">(<expr pos:start="281:13" pos:end="281:60"><operator pos:start="281:13" pos:end="281:13">!</operator><call pos:start="281:14" pos:end="281:60"><name pos:start="281:14" pos:end="281:30">fread_targphys_ok</name><argument_list pos:start="281:31" pos:end="281:60">(<argument pos:start="281:32" pos:end="281:42"><expr pos:start="281:32" pos:end="281:42"><name pos:start="281:32" pos:end="281:42">initrd_addr</name></expr></argument>, <argument pos:start="281:45" pos:end="281:55"><expr pos:start="281:45" pos:end="281:55"><name pos:start="281:45" pos:end="281:55">initrd_size</name></expr></argument>, <argument pos:start="281:58" pos:end="281:59"><expr pos:start="281:58" pos:end="281:59"><name pos:start="281:58" pos:end="281:59">fi</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:63" pos:end="289:9">{<block_content pos:start="283:13" pos:end="287:20">

	    <expr_stmt pos:start="283:13" pos:end="285:54"><expr pos:start="283:13" pos:end="285:53"><call pos:start="283:13" pos:end="285:53"><name pos:start="283:13" pos:end="283:19">fprintf</name><argument_list pos:start="283:20" pos:end="285:53">(<argument pos:start="283:21" pos:end="283:26"><expr pos:start="283:21" pos:end="283:26"><name pos:start="283:21" pos:end="283:26">stderr</name></expr></argument>, <argument pos:start="283:29" pos:end="283:77"><expr pos:start="283:29" pos:end="283:77"><literal type="string" pos:start="283:29" pos:end="283:77">"qemu: read error on initial ram disk '%s': %s\n"</literal></expr></argument>,

		    <argument pos:start="285:21" pos:end="285:35"><expr pos:start="285:21" pos:end="285:35"><name pos:start="285:21" pos:end="285:35">initrd_filename</name></expr></argument>, <argument pos:start="285:38" pos:end="285:52"><expr pos:start="285:38" pos:end="285:52"><call pos:start="285:38" pos:end="285:52"><name pos:start="285:38" pos:end="285:45">strerror</name><argument_list pos:start="285:46" pos:end="285:52">(<argument pos:start="285:47" pos:end="285:51"><expr pos:start="285:47" pos:end="285:51"><name pos:start="285:47" pos:end="285:51">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="287:13" pos:end="287:20"><expr pos:start="287:13" pos:end="287:19"><call pos:start="287:13" pos:end="287:19"><name pos:start="287:13" pos:end="287:16">exit</name><argument_list pos:start="287:17" pos:end="287:19">(<argument pos:start="287:18" pos:end="287:18"><expr pos:start="287:18" pos:end="287:18"><literal type="number" pos:start="287:18" pos:end="287:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="291:9" pos:end="291:19"><expr pos:start="291:9" pos:end="291:18"><call pos:start="291:9" pos:end="291:18"><name pos:start="291:9" pos:end="291:14">fclose</name><argument_list pos:start="291:15" pos:end="291:18">(<argument pos:start="291:16" pos:end="291:17"><expr pos:start="291:16" pos:end="291:17"><name pos:start="291:16" pos:end="291:17">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="295:9" pos:end="295:41"><expr pos:start="295:9" pos:end="295:40"><call pos:start="295:9" pos:end="295:40"><name pos:start="295:9" pos:end="295:13">stl_p</name><argument_list pos:start="295:14" pos:end="295:40">(<argument pos:start="295:15" pos:end="295:26"><expr pos:start="295:15" pos:end="295:26"><name pos:start="295:15" pos:end="295:20">header</name><operator pos:start="295:21" pos:end="295:21">+</operator><literal type="number" pos:start="295:22" pos:end="295:26">0x218</literal></expr></argument>, <argument pos:start="295:29" pos:end="295:39"><expr pos:start="295:29" pos:end="295:39"><name pos:start="295:29" pos:end="295:39">initrd_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="297:9" pos:end="297:41"><expr pos:start="297:9" pos:end="297:40"><call pos:start="297:9" pos:end="297:40"><name pos:start="297:9" pos:end="297:13">stl_p</name><argument_list pos:start="297:14" pos:end="297:40">(<argument pos:start="297:15" pos:end="297:26"><expr pos:start="297:15" pos:end="297:26"><name pos:start="297:15" pos:end="297:20">header</name><operator pos:start="297:21" pos:end="297:21">+</operator><literal type="number" pos:start="297:22" pos:end="297:26">0x21c</literal></expr></argument>, <argument pos:start="297:29" pos:end="297:39"><expr pos:start="297:29" pos:end="297:39"><name pos:start="297:29" pos:end="297:39">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="303:5" pos:end="303:68">/* store the finalized header and load the rest of the kernel */</comment>

    <expr_stmt pos:start="305:5" pos:end="305:69"><expr pos:start="305:5" pos:end="305:68"><call pos:start="305:5" pos:end="305:68"><name pos:start="305:5" pos:end="305:29">cpu_physical_memory_write</name><argument_list pos:start="305:30" pos:end="305:68">(<argument pos:start="305:31" pos:end="305:39"><expr pos:start="305:31" pos:end="305:39"><name pos:start="305:31" pos:end="305:39">real_addr</name></expr></argument>, <argument pos:start="305:42" pos:end="305:47"><expr pos:start="305:42" pos:end="305:47"><name pos:start="305:42" pos:end="305:47">header</name></expr></argument>, <argument pos:start="305:50" pos:end="305:67"><expr pos:start="305:50" pos:end="305:67"><call pos:start="305:50" pos:end="305:67"><name pos:start="305:50" pos:end="305:59">ARRAY_SIZE</name><argument_list pos:start="305:60" pos:end="305:67">(<argument pos:start="305:61" pos:end="305:66"><expr pos:start="305:61" pos:end="305:66"><name pos:start="305:61" pos:end="305:66">header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="309:5" pos:end="309:31"><expr pos:start="309:5" pos:end="309:30"><name pos:start="309:5" pos:end="309:14">setup_size</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <name pos:start="309:18" pos:end="309:30"><name pos:start="309:18" pos:end="309:23">header</name><index pos:start="309:24" pos:end="309:30">[<expr pos:start="309:25" pos:end="309:29"><literal type="number" pos:start="309:25" pos:end="309:29">0x1f1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="313:23"><if pos:start="311:5" pos:end="313:23">if <condition pos:start="311:8" pos:end="311:24">(<expr pos:start="311:9" pos:end="311:23"><name pos:start="311:9" pos:end="311:18">setup_size</name> <operator pos:start="311:20" pos:end="311:21">==</operator> <literal type="number" pos:start="311:23" pos:end="311:23">0</literal></expr>)</condition><block type="pseudo" pos:start="313:9" pos:end="313:23"><block_content pos:start="313:9" pos:end="313:23">

	<expr_stmt pos:start="313:9" pos:end="313:23"><expr pos:start="313:9" pos:end="313:22"><name pos:start="313:9" pos:end="313:18">setup_size</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="317:5" pos:end="317:36"><expr pos:start="317:5" pos:end="317:35"><name pos:start="317:5" pos:end="317:14">setup_size</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <operator pos:start="317:18" pos:end="317:18">(</operator><name pos:start="317:19" pos:end="317:28">setup_size</name><operator pos:start="317:29" pos:end="317:29">+</operator><literal type="number" pos:start="317:30" pos:end="317:30">1</literal><operator pos:start="317:31" pos:end="317:31">)</operator><operator pos:start="317:32" pos:end="317:32">*</operator><literal type="number" pos:start="317:33" pos:end="317:35">512</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="319:5" pos:end="319:37">/* Size of protected-mode code */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:87"><expr pos:start="321:5" pos:end="321:86"><name pos:start="321:5" pos:end="321:15">kernel_size</name> <operator pos:start="321:17" pos:end="321:18">-=</operator> <ternary pos:start="321:20" pos:end="321:86"><condition pos:start="321:20" pos:end="321:54"><expr pos:start="321:20" pos:end="321:52"><operator pos:start="321:20" pos:end="321:20">(</operator><name pos:start="321:21" pos:end="321:30">setup_size</name> <operator pos:start="321:32" pos:end="321:32">&gt;</operator> <call pos:start="321:34" pos:end="321:51"><name pos:start="321:34" pos:end="321:43">ARRAY_SIZE</name><argument_list pos:start="321:44" pos:end="321:51">(<argument pos:start="321:45" pos:end="321:50"><expr pos:start="321:45" pos:end="321:50"><name pos:start="321:45" pos:end="321:50">header</name></expr></argument>)</argument_list></call><operator pos:start="321:52" pos:end="321:52">)</operator></expr> ?</condition><then pos:start="321:56" pos:end="321:65"> <expr pos:start="321:56" pos:end="321:65"><name pos:start="321:56" pos:end="321:65">setup_size</name></expr> </then><else pos:start="321:67" pos:end="321:86">: <expr pos:start="321:69" pos:end="321:86"><call pos:start="321:69" pos:end="321:86"><name pos:start="321:69" pos:end="321:78">ARRAY_SIZE</name><argument_list pos:start="321:79" pos:end="321:86">(<argument pos:start="321:80" pos:end="321:85"><expr pos:start="321:80" pos:end="321:85"><name pos:start="321:80" pos:end="321:85">header</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="325:5" pos:end="325:63">/* In case we have read too much already, copy that over */</comment>

    <if_stmt pos:start="327:5" pos:end="335:5"><if pos:start="327:5" pos:end="335:5">if <condition pos:start="327:8" pos:end="327:40">(<expr pos:start="327:9" pos:end="327:39"><name pos:start="327:9" pos:end="327:18">setup_size</name> <operator pos:start="327:20" pos:end="327:20">&lt;</operator> <call pos:start="327:22" pos:end="327:39"><name pos:start="327:22" pos:end="327:31">ARRAY_SIZE</name><argument_list pos:start="327:32" pos:end="327:39">(<argument pos:start="327:33" pos:end="327:38"><expr pos:start="327:33" pos:end="327:38"><name pos:start="327:33" pos:end="327:38">header</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="327:42" pos:end="335:5">{<block_content pos:start="329:9" pos:end="333:40">

        <expr_stmt pos:start="329:9" pos:end="329:99"><expr pos:start="329:9" pos:end="329:98"><call pos:start="329:9" pos:end="329:98"><name pos:start="329:9" pos:end="329:33">cpu_physical_memory_write</name><argument_list pos:start="329:34" pos:end="329:98">(<argument pos:start="329:35" pos:end="329:43"><expr pos:start="329:35" pos:end="329:43"><name pos:start="329:35" pos:end="329:43">prot_addr</name></expr></argument>, <argument pos:start="329:46" pos:end="329:64"><expr pos:start="329:46" pos:end="329:64"><name pos:start="329:46" pos:end="329:51">header</name> <operator pos:start="329:53" pos:end="329:53">+</operator> <name pos:start="329:55" pos:end="329:64">setup_size</name></expr></argument>, <argument pos:start="329:67" pos:end="329:97"><expr pos:start="329:67" pos:end="329:97"><call pos:start="329:67" pos:end="329:84"><name pos:start="329:67" pos:end="329:76">ARRAY_SIZE</name><argument_list pos:start="329:77" pos:end="329:84">(<argument pos:start="329:78" pos:end="329:83"><expr pos:start="329:78" pos:end="329:83"><name pos:start="329:78" pos:end="329:83">header</name></expr></argument>)</argument_list></call> <operator pos:start="329:86" pos:end="329:86">-</operator> <name pos:start="329:88" pos:end="329:97">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:55"><expr pos:start="331:9" pos:end="331:54"><name pos:start="331:9" pos:end="331:17">prot_addr</name> <operator pos:start="331:19" pos:end="331:20">+=</operator> <operator pos:start="331:22" pos:end="331:22">(</operator><call pos:start="331:23" pos:end="331:40"><name pos:start="331:23" pos:end="331:32">ARRAY_SIZE</name><argument_list pos:start="331:33" pos:end="331:40">(<argument pos:start="331:34" pos:end="331:39"><expr pos:start="331:34" pos:end="331:39"><name pos:start="331:34" pos:end="331:39">header</name></expr></argument>)</argument_list></call> <operator pos:start="331:42" pos:end="331:42">-</operator> <name pos:start="331:44" pos:end="331:53">setup_size</name><operator pos:start="331:54" pos:end="331:54">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:40"><expr pos:start="333:9" pos:end="333:39"><name pos:start="333:9" pos:end="333:18">setup_size</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <call pos:start="333:22" pos:end="333:39"><name pos:start="333:22" pos:end="333:31">ARRAY_SIZE</name><argument_list pos:start="333:32" pos:end="333:39">(<argument pos:start="333:33" pos:end="333:38"><expr pos:start="333:33" pos:end="333:38"><name pos:start="333:33" pos:end="333:38">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="339:5" pos:end="351:5"><if pos:start="339:5" pos:end="351:5">if <condition pos:start="339:8" pos:end="343:54">(<expr pos:start="339:9" pos:end="343:53"><operator pos:start="339:9" pos:end="339:9">!</operator><call pos:start="339:10" pos:end="341:62"><name pos:start="339:10" pos:end="339:26">fread_targphys_ok</name><argument_list pos:start="339:27" pos:end="341:62">(<argument pos:start="339:28" pos:end="339:57"><expr pos:start="339:28" pos:end="339:57"><name pos:start="339:28" pos:end="339:36">real_addr</name> <operator pos:start="339:38" pos:end="339:38">+</operator> <call pos:start="339:40" pos:end="339:57"><name pos:start="339:40" pos:end="339:49">ARRAY_SIZE</name><argument_list pos:start="339:50" pos:end="339:57">(<argument pos:start="339:51" pos:end="339:56"><expr pos:start="339:51" pos:end="339:56"><name pos:start="339:51" pos:end="339:56">header</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="341:28" pos:end="341:58"><expr pos:start="341:28" pos:end="341:58"><name pos:start="341:28" pos:end="341:37">setup_size</name> <operator pos:start="341:39" pos:end="341:39">-</operator> <call pos:start="341:41" pos:end="341:58"><name pos:start="341:41" pos:end="341:50">ARRAY_SIZE</name><argument_list pos:start="341:51" pos:end="341:58">(<argument pos:start="341:52" pos:end="341:57"><expr pos:start="341:52" pos:end="341:57"><name pos:start="341:52" pos:end="341:57">header</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="341:61" pos:end="341:61"><expr pos:start="341:61" pos:end="341:61"><name pos:start="341:61" pos:end="341:61">f</name></expr></argument>)</argument_list></call> <operator pos:start="341:64" pos:end="341:65">||</operator>

	<operator pos:start="343:9" pos:end="343:9">!</operator><call pos:start="343:10" pos:end="343:53"><name pos:start="343:10" pos:end="343:26">fread_targphys_ok</name><argument_list pos:start="343:27" pos:end="343:53">(<argument pos:start="343:28" pos:end="343:36"><expr pos:start="343:28" pos:end="343:36"><name pos:start="343:28" pos:end="343:36">prot_addr</name></expr></argument>, <argument pos:start="343:39" pos:end="343:49"><expr pos:start="343:39" pos:end="343:49"><name pos:start="343:39" pos:end="343:49">kernel_size</name></expr></argument>, <argument pos:start="343:52" pos:end="343:52"><expr pos:start="343:52" pos:end="343:52"><name pos:start="343:52" pos:end="343:52">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="343:56" pos:end="351:5">{<block_content pos:start="345:9" pos:end="349:16">

	<expr_stmt pos:start="345:9" pos:end="347:33"><expr pos:start="345:9" pos:end="347:32"><call pos:start="345:9" pos:end="347:32"><name pos:start="345:9" pos:end="345:15">fprintf</name><argument_list pos:start="345:16" pos:end="347:32">(<argument pos:start="345:17" pos:end="345:22"><expr pos:start="345:17" pos:end="345:22"><name pos:start="345:17" pos:end="345:22">stderr</name></expr></argument>, <argument pos:start="345:25" pos:end="345:59"><expr pos:start="345:25" pos:end="345:59"><literal type="string" pos:start="345:25" pos:end="345:59">"qemu: read error on kernel '%s'\n"</literal></expr></argument>,

		<argument pos:start="347:17" pos:end="347:31"><expr pos:start="347:17" pos:end="347:31"><name pos:start="347:17" pos:end="347:31">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="349:9" pos:end="349:16"><expr pos:start="349:9" pos:end="349:15"><call pos:start="349:9" pos:end="349:15"><name pos:start="349:9" pos:end="349:12">exit</name><argument_list pos:start="349:13" pos:end="349:15">(<argument pos:start="349:14" pos:end="349:14"><expr pos:start="349:14" pos:end="349:14"><literal type="number" pos:start="349:14" pos:end="349:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:14"><expr pos:start="353:5" pos:end="353:13"><call pos:start="353:5" pos:end="353:13"><name pos:start="353:5" pos:end="353:10">fclose</name><argument_list pos:start="353:11" pos:end="353:13">(<argument pos:start="353:12" pos:end="353:12"><expr pos:start="353:12" pos:end="353:12"><name pos:start="353:12" pos:end="353:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="357:5" pos:end="357:66">/* generate bootsector to set up the initial register state */</comment>

    <expr_stmt pos:start="359:5" pos:end="359:30"><expr pos:start="359:5" pos:end="359:29"><name pos:start="359:5" pos:end="359:12">real_seg</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <name pos:start="359:16" pos:end="359:24">real_addr</name> <operator pos:start="359:26" pos:end="359:27">&gt;&gt;</operator> <literal type="number" pos:start="359:29" pos:end="359:29">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:58"><expr pos:start="361:5" pos:end="361:57"><name pos:start="361:5" pos:end="361:10"><name pos:start="361:5" pos:end="361:7">seg</name><index pos:start="361:8" pos:end="361:10">[<expr pos:start="361:9" pos:end="361:9"><literal type="number" pos:start="361:9" pos:end="361:9">0</literal></expr>]</index></name> <operator pos:start="361:12" pos:end="361:12">=</operator> <name pos:start="361:14" pos:end="361:19"><name pos:start="361:14" pos:end="361:16">seg</name><index pos:start="361:17" pos:end="361:19">[<expr pos:start="361:18" pos:end="361:18"><literal type="number" pos:start="361:18" pos:end="361:18">2</literal></expr>]</index></name> <operator pos:start="361:21" pos:end="361:21">=</operator> <name pos:start="361:23" pos:end="361:28"><name pos:start="361:23" pos:end="361:25">seg</name><index pos:start="361:26" pos:end="361:28">[<expr pos:start="361:27" pos:end="361:27"><literal type="number" pos:start="361:27" pos:end="361:27">3</literal></expr>]</index></name> <operator pos:start="361:30" pos:end="361:30">=</operator> <name pos:start="361:32" pos:end="361:37"><name pos:start="361:32" pos:end="361:34">seg</name><index pos:start="361:35" pos:end="361:37">[<expr pos:start="361:36" pos:end="361:36"><literal type="number" pos:start="361:36" pos:end="361:36">4</literal></expr>]</index></name> <operator pos:start="361:39" pos:end="361:39">=</operator> <name pos:start="361:41" pos:end="361:46"><name pos:start="361:41" pos:end="361:43">seg</name><index pos:start="361:44" pos:end="361:46">[<expr pos:start="361:45" pos:end="361:45"><literal type="number" pos:start="361:45" pos:end="361:45">4</literal></expr>]</index></name> <operator pos:start="361:48" pos:end="361:48">=</operator> <name pos:start="361:50" pos:end="361:57">real_seg</name></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:27"><expr pos:start="363:5" pos:end="363:26"><name pos:start="363:5" pos:end="363:10"><name pos:start="363:5" pos:end="363:7">seg</name><index pos:start="363:8" pos:end="363:10">[<expr pos:start="363:9" pos:end="363:9"><literal type="number" pos:start="363:9" pos:end="363:9">1</literal></expr>]</index></name> <operator pos:start="363:12" pos:end="363:12">=</operator> <name pos:start="363:14" pos:end="363:21">real_seg</name><operator pos:start="363:22" pos:end="363:22">+</operator><literal type="number" pos:start="363:23" pos:end="363:26">0x20</literal></expr>;</expr_stmt>	<comment type="block" pos:start="363:33" pos:end="363:40">/* CS */</comment>

    <expr_stmt pos:start="365:5" pos:end="365:31"><expr pos:start="365:5" pos:end="365:30"><call pos:start="365:5" pos:end="365:30"><name pos:start="365:5" pos:end="365:10">memset</name><argument_list pos:start="365:11" pos:end="365:30">(<argument pos:start="365:12" pos:end="365:14"><expr pos:start="365:12" pos:end="365:14"><name pos:start="365:12" pos:end="365:14">gpr</name></expr></argument>, <argument pos:start="365:17" pos:end="365:17"><expr pos:start="365:17" pos:end="365:17"><literal type="number" pos:start="365:17" pos:end="365:17">0</literal></expr></argument>, <argument pos:start="365:20" pos:end="365:29"><expr pos:start="365:20" pos:end="365:29"><sizeof pos:start="365:20" pos:end="365:29">sizeof <name pos:start="365:27" pos:end="365:29">gpr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:39"><expr pos:start="367:5" pos:end="367:38"><name pos:start="367:5" pos:end="367:10"><name pos:start="367:5" pos:end="367:7">gpr</name><index pos:start="367:8" pos:end="367:10">[<expr pos:start="367:9" pos:end="367:9"><literal type="number" pos:start="367:9" pos:end="367:9">4</literal></expr>]</index></name> <operator pos:start="367:12" pos:end="367:12">=</operator> <name pos:start="367:14" pos:end="367:25">cmdline_addr</name><operator pos:start="367:26" pos:end="367:26">-</operator><name pos:start="367:27" pos:end="367:35">real_addr</name><operator pos:start="367:36" pos:end="367:36">-</operator><literal type="number" pos:start="367:37" pos:end="367:38">16</literal></expr>;</expr_stmt>	<comment type="block" pos:start="367:41" pos:end="367:66">/* SP (-16 is paranoia) */</comment>



    <expr_stmt pos:start="371:5" pos:end="371:50"><expr pos:start="371:5" pos:end="371:49"><call pos:start="371:5" pos:end="371:49"><name pos:start="371:5" pos:end="371:26">option_rom_setup_reset</name><argument_list pos:start="371:27" pos:end="371:49">(<argument pos:start="371:28" pos:end="371:36"><expr pos:start="371:28" pos:end="371:36"><name pos:start="371:28" pos:end="371:36">real_addr</name></expr></argument>, <argument pos:start="371:39" pos:end="371:48"><expr pos:start="371:39" pos:end="371:48"><name pos:start="371:39" pos:end="371:48">setup_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="373:5" pos:end="373:51"><expr pos:start="373:5" pos:end="373:50"><call pos:start="373:5" pos:end="373:50"><name pos:start="373:5" pos:end="373:26">option_rom_setup_reset</name><argument_list pos:start="373:27" pos:end="373:50">(<argument pos:start="373:28" pos:end="373:36"><expr pos:start="373:28" pos:end="373:36"><name pos:start="373:28" pos:end="373:36">prot_addr</name></expr></argument>, <argument pos:start="373:39" pos:end="373:49"><expr pos:start="373:39" pos:end="373:49"><name pos:start="373:39" pos:end="373:49">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:55"><expr pos:start="375:5" pos:end="375:54"><call pos:start="375:5" pos:end="375:54"><name pos:start="375:5" pos:end="375:26">option_rom_setup_reset</name><argument_list pos:start="375:27" pos:end="375:54">(<argument pos:start="375:28" pos:end="375:39"><expr pos:start="375:28" pos:end="375:39"><name pos:start="375:28" pos:end="375:39">cmdline_addr</name></expr></argument>, <argument pos:start="375:42" pos:end="375:53"><expr pos:start="375:42" pos:end="375:53"><name pos:start="375:42" pos:end="375:53">cmdline_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="377:5" pos:end="379:57"><if pos:start="377:5" pos:end="379:57">if <condition pos:start="377:8" pos:end="377:24">(<expr pos:start="377:9" pos:end="377:23"><name pos:start="377:9" pos:end="377:23">initrd_filename</name></expr>)</condition><block type="pseudo" pos:start="379:9" pos:end="379:57"><block_content pos:start="379:9" pos:end="379:57">

        <expr_stmt pos:start="379:9" pos:end="379:57"><expr pos:start="379:9" pos:end="379:56"><call pos:start="379:9" pos:end="379:56"><name pos:start="379:9" pos:end="379:30">option_rom_setup_reset</name><argument_list pos:start="379:31" pos:end="379:56">(<argument pos:start="379:32" pos:end="379:42"><expr pos:start="379:32" pos:end="379:42"><name pos:start="379:32" pos:end="379:42">initrd_addr</name></expr></argument>, <argument pos:start="379:45" pos:end="379:55"><expr pos:start="379:45" pos:end="379:55"><name pos:start="379:45" pos:end="379:55">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:47"><expr pos:start="383:5" pos:end="383:46"><call pos:start="383:5" pos:end="383:46"><name pos:start="383:5" pos:end="383:21">generate_bootsect</name><argument_list pos:start="383:22" pos:end="383:46">(<argument pos:start="383:23" pos:end="383:32"><expr pos:start="383:23" pos:end="383:32"><name pos:start="383:23" pos:end="383:32">option_rom</name></expr></argument>, <argument pos:start="383:35" pos:end="383:37"><expr pos:start="383:35" pos:end="383:37"><name pos:start="383:35" pos:end="383:37">gpr</name></expr></argument>, <argument pos:start="383:40" pos:end="383:42"><expr pos:start="383:40" pos:end="383:42"><name pos:start="383:40" pos:end="383:42">seg</name></expr></argument>, <argument pos:start="383:45" pos:end="383:45"><expr pos:start="383:45" pos:end="383:45"><literal type="number" pos:start="383:45" pos:end="383:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
