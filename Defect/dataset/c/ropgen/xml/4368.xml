<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4368.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">decode_main_header</name><parameter_list pos:start="1:30" pos:end="1:46">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">NUTContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">nut</name></decl></parameter>)</parameter_list><block pos:start="1:47" pos:end="135:1">{<block_content pos:start="3:5" pos:end="133:13">

    <decl_stmt pos:start="3:5" pos:end="3:33"><decl pos:start="3:5" pos:end="3:32"><type pos:start="3:5" pos:end="3:21"><name pos:start="3:5" pos:end="3:19">AVFormatContext</name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:22">s</name><init pos:start="3:23" pos:end="3:32">= <expr pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:27">nut</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:32">avf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ByteIOContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">bc</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><call pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:20">get_packetheader</name><argument_list pos:start="13:21" pos:end="13:35">(<argument pos:start="13:22" pos:end="13:24"><expr pos:start="13:22" pos:end="13:24"><name pos:start="13:22" pos:end="13:24">nut</name></expr></argument>, <argument pos:start="13:27" pos:end="13:28"><expr pos:start="13:27" pos:end="13:28"><name pos:start="13:27" pos:end="13:28">bc</name></expr></argument>, <argument pos:start="13:31" pos:end="13:31"><expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">8</literal></expr></argument>, <argument pos:start="13:34" pos:end="13:34"><expr pos:start="13:34" pos:end="13:34"><literal type="number" pos:start="13:34" pos:end="13:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:7">tmp</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:19"><name pos:start="17:11" pos:end="17:15">get_v</name><argument_list pos:start="17:16" pos:end="17:19">(<argument pos:start="17:17" pos:end="17:18"><expr pos:start="17:17" pos:end="17:18"><name pos:start="17:17" pos:end="17:18">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:11">tmp</name> <operator pos:start="19:13" pos:end="19:14">!=</operator> <literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>)</condition><block pos:start="19:18" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

	<expr_stmt pos:start="21:9" pos:end="21:60"><expr pos:start="21:9" pos:end="21:59"><call pos:start="21:9" pos:end="21:59"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:59">(<argument pos:start="21:16" pos:end="21:16"><expr pos:start="21:16" pos:end="21:16"><name pos:start="21:16" pos:end="21:16">s</name></expr></argument>, <argument pos:start="21:19" pos:end="21:30"><expr pos:start="21:19" pos:end="21:30"><name pos:start="21:19" pos:end="21:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:33" pos:end="21:53"><expr pos:start="21:33" pos:end="21:53"><literal type="string" pos:start="21:33" pos:end="21:53">"bad version (%Ld)\n"</literal></expr></argument>, <argument pos:start="21:56" pos:end="21:58"><expr pos:start="21:56" pos:end="21:58"><name pos:start="21:56" pos:end="21:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:7">nut</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:21">stream_count</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:33"><name pos:start="29:25" pos:end="29:29">get_v</name><argument_list pos:start="29:30" pos:end="29:33">(<argument pos:start="29:31" pos:end="29:32"><expr pos:start="29:31" pos:end="29:32"><name pos:start="29:31" pos:end="29:32">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:14"><expr pos:start="31:5" pos:end="31:13"><call pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:9">get_v</name><argument_list pos:start="31:10" pos:end="31:13">(<argument pos:start="31:11" pos:end="31:12"><expr pos:start="31:11" pos:end="31:12"><name pos:start="31:11" pos:end="31:12">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="31:16" pos:end="31:35">//checksum threshold</comment>



    <for pos:start="35:5" pos:end="111:5">for<control pos:start="35:8" pos:end="35:20">(<init pos:start="35:9" pos:end="35:12"><expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:9">i</name><operator pos:start="35:10" pos:end="35:10">=</operator><literal type="number" pos:start="35:11" pos:end="35:11">0</literal></expr>;</init> <condition pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name><operator pos:start="35:15" pos:end="35:15">&lt;</operator><literal type="number" pos:start="35:16" pos:end="35:18">256</literal></expr>;</condition><incr/>)</control><block pos:start="35:21" pos:end="111:5">{<block_content pos:start="37:9" pos:end="109:9">

        <decl_stmt pos:start="37:9" pos:end="37:34"><decl pos:start="37:9" pos:end="37:33"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:21">tmp_flags</name> <init pos:start="37:23" pos:end="37:33">= <expr pos:start="37:25" pos:end="37:33"><call pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:29">get_v</name><argument_list pos:start="37:30" pos:end="37:33">(<argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:34"><decl pos:start="39:9" pos:end="39:33"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:22">tmp_stream</name><init pos:start="39:23" pos:end="39:33">= <expr pos:start="39:25" pos:end="39:33"><call pos:start="39:25" pos:end="39:33"><name pos:start="39:25" pos:end="39:29">get_v</name><argument_list pos:start="39:30" pos:end="39:33">(<argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><name pos:start="39:31" pos:end="39:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:34"><decl pos:start="41:9" pos:end="41:33"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:19">tmp_mul</name>   <init pos:start="41:23" pos:end="41:33">= <expr pos:start="41:25" pos:end="41:33"><call pos:start="41:25" pos:end="41:33"><name pos:start="41:25" pos:end="41:29">get_v</name><argument_list pos:start="41:30" pos:end="41:33">(<argument pos:start="41:31" pos:end="41:32"><expr pos:start="41:31" pos:end="41:32"><name pos:start="41:31" pos:end="41:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:34"><decl pos:start="43:9" pos:end="43:33"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:20">tmp_size</name>  <init pos:start="43:23" pos:end="43:33">= <expr pos:start="43:25" pos:end="43:33"><call pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:29">get_v</name><argument_list pos:start="43:30" pos:end="43:33">(<argument pos:start="43:31" pos:end="43:32"><expr pos:start="43:31" pos:end="43:32"><name pos:start="43:31" pos:end="43:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:34"><decl pos:start="45:9" pos:end="45:33"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:17">count</name>     <init pos:start="45:23" pos:end="45:33">= <expr pos:start="45:25" pos:end="45:33"><call pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:29">get_v</name><argument_list pos:start="45:30" pos:end="45:33">(<argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if<condition pos:start="49:11" pos:end="49:39">(<expr pos:start="49:12" pos:end="49:38"><name pos:start="49:12" pos:end="49:16">count</name> <operator pos:start="49:18" pos:end="49:19">==</operator> <literal type="number" pos:start="49:21" pos:end="49:21">0</literal> <operator pos:start="49:23" pos:end="49:24">||</operator> <name pos:start="49:26" pos:end="49:26">i</name><operator pos:start="49:27" pos:end="49:27">+</operator><name pos:start="49:28" pos:end="49:32">count</name> <operator pos:start="49:34" pos:end="49:34">&gt;</operator> <literal type="number" pos:start="49:36" pos:end="49:38">256</literal></expr>)</condition><block pos:start="49:40" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:22">

            <expr_stmt pos:start="51:13" pos:end="51:74"><expr pos:start="51:13" pos:end="51:73"><call pos:start="51:13" pos:end="51:73"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:73">(<argument pos:start="51:20" pos:end="51:20"><expr pos:start="51:20" pos:end="51:20"><name pos:start="51:20" pos:end="51:20">s</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:62"><expr pos:start="51:37" pos:end="51:62"><literal type="string" pos:start="51:37" pos:end="51:62">"illegal count %d at %d\n"</literal></expr></argument>, <argument pos:start="51:65" pos:end="51:69"><expr pos:start="51:65" pos:end="51:69"><name pos:start="51:65" pos:end="51:69">count</name></expr></argument>, <argument pos:start="51:72" pos:end="51:72"><expr pos:start="51:72" pos:end="51:72"><name pos:start="51:72" pos:end="51:72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="77:9"><if pos:start="59:9" pos:end="77:9">if<condition pos:start="59:11" pos:end="59:59">(<expr pos:start="59:12" pos:end="59:58"><operator pos:start="59:12" pos:end="59:12">(</operator><name pos:start="59:13" pos:end="59:21">tmp_flags</name> <operator pos:start="59:23" pos:end="59:23">&amp;</operator> <name pos:start="59:25" pos:end="59:39">FLAG_FRAME_TYPE</name><operator pos:start="59:40" pos:end="59:40">)</operator> <operator pos:start="59:42" pos:end="59:43">&amp;&amp;</operator> <name pos:start="59:45" pos:end="59:53">tmp_flags</name> <operator pos:start="59:55" pos:end="59:56">!=</operator> <literal type="number" pos:start="59:58" pos:end="59:58">1</literal></expr>)</condition><block pos:start="59:60" pos:end="77:9">{<block_content pos:start="61:13" pos:end="75:13">

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if<condition pos:start="61:15" pos:end="61:47">(<expr pos:start="61:16" pos:end="61:46"><name pos:start="61:16" pos:end="61:24">tmp_flags</name> <operator pos:start="61:26" pos:end="61:26">&amp;</operator> <name pos:start="61:28" pos:end="61:46">FLAG_PRED_KEY_FRAME</name></expr>)</condition><block pos:start="61:48" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:26">

                <expr_stmt pos:start="63:17" pos:end="63:85"><expr pos:start="63:17" pos:end="63:84"><call pos:start="63:17" pos:end="63:84"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="63:84">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">s</name></expr></argument>, <argument pos:start="63:27" pos:end="63:38"><expr pos:start="63:27" pos:end="63:38"><name pos:start="63:27" pos:end="63:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:41" pos:end="63:83"><expr pos:start="63:41" pos:end="63:83"><literal type="string" pos:start="63:41" pos:end="63:83">"keyframe prediction in non 0 frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="65:17" pos:end="65:26">return <expr pos:start="65:24" pos:end="65:25"><operator pos:start="65:24" pos:end="65:24">-</operator><literal type="number" pos:start="65:25" pos:end="65:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="69:13" pos:end="75:13"><if pos:start="69:13" pos:end="75:13">if<condition pos:start="69:15" pos:end="69:72">(<expr pos:start="69:16" pos:end="69:70"><operator pos:start="69:16" pos:end="69:16">!</operator><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:26">tmp_flags</name> <operator pos:start="69:28" pos:end="69:28">&amp;</operator> <name pos:start="69:30" pos:end="69:37">FLAG_PTS</name><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">||</operator> <operator pos:start="69:43" pos:end="69:43">!</operator><operator pos:start="69:44" pos:end="69:44">(</operator><name pos:start="69:45" pos:end="69:53">tmp_flags</name> <operator pos:start="69:55" pos:end="69:55">&amp;</operator> <name pos:start="69:57" pos:end="69:69">FLAG_FULL_PTS</name><operator pos:start="69:70" pos:end="69:70">)</operator></expr> )</condition><block pos:start="69:73" pos:end="75:13">{<block_content pos:start="71:17" pos:end="73:26">

                <expr_stmt pos:start="71:17" pos:end="71:77"><expr pos:start="71:17" pos:end="71:76"><call pos:start="71:17" pos:end="71:76"><name pos:start="71:17" pos:end="71:22">av_log</name><argument_list pos:start="71:23" pos:end="71:76">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">s</name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><name pos:start="71:27" pos:end="71:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:41" pos:end="71:75"><expr pos:start="71:41" pos:end="71:75"><literal type="string" pos:start="71:41" pos:end="71:75">"no full pts in non 0 frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="73:17" pos:end="73:26">return <expr pos:start="73:24" pos:end="73:25"><operator pos:start="73:24" pos:end="73:24">-</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="81:9" pos:end="109:9">for<control pos:start="81:12" pos:end="81:34">(<init pos:start="81:13" pos:end="81:16"><expr pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:13">j</name><operator pos:start="81:14" pos:end="81:14">=</operator><literal type="number" pos:start="81:15" pos:end="81:15">0</literal></expr>;</init> <condition pos:start="81:18" pos:end="81:25"><expr pos:start="81:18" pos:end="81:24"><name pos:start="81:18" pos:end="81:18">j</name><operator pos:start="81:19" pos:end="81:19">&lt;</operator><name pos:start="81:20" pos:end="81:24">count</name></expr>;</condition> <incr pos:start="81:27" pos:end="81:33"><expr pos:start="81:27" pos:end="81:29"><name pos:start="81:27" pos:end="81:27">j</name><operator pos:start="81:28" pos:end="81:29">++</operator></expr><operator pos:start="81:30" pos:end="81:30">,</operator><expr pos:start="81:31" pos:end="81:33"><name pos:start="81:31" pos:end="81:31">i</name><operator pos:start="81:32" pos:end="81:33">++</operator></expr></incr>)</control><block pos:start="81:35" pos:end="109:9">{<block_content pos:start="83:13" pos:end="107:13">

            <if_stmt pos:start="83:13" pos:end="89:13"><if pos:start="83:13" pos:end="89:13">if<condition pos:start="83:15" pos:end="83:50">(<expr pos:start="83:16" pos:end="83:49"><name pos:start="83:16" pos:end="83:25">tmp_stream</name> <operator pos:start="83:27" pos:end="83:27">&gt;</operator> <name pos:start="83:29" pos:end="83:45"><name pos:start="83:29" pos:end="83:31">nut</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:45">stream_count</name></name> <operator pos:start="83:47" pos:end="83:47">+</operator> <literal type="number" pos:start="83:49" pos:end="83:49">1</literal></expr>)</condition><block pos:start="83:51" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:26">

                <expr_stmt pos:start="85:17" pos:end="85:67"><expr pos:start="85:17" pos:end="85:66"><call pos:start="85:17" pos:end="85:66"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="85:66">(<argument pos:start="85:24" pos:end="85:24"><expr pos:start="85:24" pos:end="85:24"><name pos:start="85:24" pos:end="85:24">s</name></expr></argument>, <argument pos:start="85:27" pos:end="85:38"><expr pos:start="85:27" pos:end="85:38"><name pos:start="85:27" pos:end="85:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:41" pos:end="85:65"><expr pos:start="85:41" pos:end="85:65"><literal type="string" pos:start="85:41" pos:end="85:65">"illegal stream number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:26">return <expr pos:start="87:24" pos:end="87:25"><operator pos:start="87:24" pos:end="87:24">-</operator><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:60"><expr pos:start="93:13" pos:end="93:58"><name pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:15">nut</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:27">frame_code</name><index pos:start="93:28" pos:end="93:30">[<expr pos:start="93:29" pos:end="93:29"><name pos:start="93:29" pos:end="93:29">i</name></expr>]</index></name><operator pos:start="93:31" pos:end="93:31">.</operator><name pos:start="93:32" pos:end="93:36">flags</name>           <operator pos:start="93:48" pos:end="93:48">=</operator> <name pos:start="93:50" pos:end="93:58">tmp_flags</name></expr> ;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:60"><expr pos:start="95:13" pos:end="95:59"><name pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:15">nut</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:27">frame_code</name><index pos:start="95:28" pos:end="95:30">[<expr pos:start="95:29" pos:end="95:29"><name pos:start="95:29" pos:end="95:29">i</name></expr>]</index></name><operator pos:start="95:31" pos:end="95:31">.</operator><name pos:start="95:32" pos:end="95:46">stream_id_plus1</name> <operator pos:start="95:48" pos:end="95:48">=</operator> <name pos:start="95:50" pos:end="95:59">tmp_stream</name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:60"><expr pos:start="97:13" pos:end="97:56"><name pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:15">nut</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:27">frame_code</name><index pos:start="97:28" pos:end="97:30">[<expr pos:start="97:29" pos:end="97:29"><name pos:start="97:29" pos:end="97:29">i</name></expr>]</index></name><operator pos:start="97:31" pos:end="97:31">.</operator><name pos:start="97:32" pos:end="97:39">size_mul</name>        <operator pos:start="97:48" pos:end="97:48">=</operator> <name pos:start="97:50" pos:end="97:56">tmp_mul</name></expr>   ;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:60"><expr pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:30"><name pos:start="99:13" pos:end="99:15">nut</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:27">frame_code</name><index pos:start="99:28" pos:end="99:30">[<expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">i</name></expr>]</index></name><operator pos:start="99:31" pos:end="99:31">.</operator><name pos:start="99:32" pos:end="99:39">size_lsb</name>        <operator pos:start="99:48" pos:end="99:48">=</operator> <name pos:start="99:50" pos:end="99:57">tmp_size</name></expr>  ;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if<condition pos:start="101:15" pos:end="101:37">(<expr pos:start="101:16" pos:end="101:36"><operator pos:start="101:16" pos:end="101:17">++</operator><name pos:start="101:18" pos:end="101:25">tmp_size</name> <operator pos:start="101:27" pos:end="101:28">&gt;=</operator> <name pos:start="101:30" pos:end="101:36">tmp_mul</name></expr>)</condition><block pos:start="101:38" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:29">

                <expr_stmt pos:start="103:17" pos:end="103:27"><expr pos:start="103:17" pos:end="103:26"><name pos:start="103:17" pos:end="103:24">tmp_size</name><operator pos:start="103:25" pos:end="103:25">=</operator><literal type="number" pos:start="103:26" pos:end="103:26">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:29"><expr pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:26">tmp_stream</name><operator pos:start="105:27" pos:end="105:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if<condition pos:start="113:7" pos:end="113:39">(<expr pos:start="113:8" pos:end="113:38"><name pos:start="113:8" pos:end="113:27"><name pos:start="113:8" pos:end="113:10">nut</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:22">frame_code</name><index pos:start="113:23" pos:end="113:27">[<expr pos:start="113:24" pos:end="113:26"><literal type="char" pos:start="113:24" pos:end="113:26">'N'</literal></expr>]</index></name><operator pos:start="113:28" pos:end="113:28">.</operator><name pos:start="113:29" pos:end="113:33">flags</name> <operator pos:start="113:35" pos:end="113:36">!=</operator> <literal type="number" pos:start="113:38" pos:end="113:38">1</literal></expr>)</condition><block pos:start="113:40" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:18">

        <expr_stmt pos:start="115:9" pos:end="115:62"><expr pos:start="115:9" pos:end="115:61"><call pos:start="115:9" pos:end="115:61"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="115:61">(<argument pos:start="115:16" pos:end="115:16"><expr pos:start="115:16" pos:end="115:16"><name pos:start="115:16" pos:end="115:16">s</name></expr></argument>, <argument pos:start="115:19" pos:end="115:30"><expr pos:start="115:19" pos:end="115:30"><name pos:start="115:19" pos:end="115:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:33" pos:end="115:60"><expr pos:start="115:33" pos:end="115:60"><literal type="string" pos:start="115:33" pos:end="115:60">"illegal frame_code table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:18">return <expr pos:start="117:16" pos:end="117:17"><operator pos:start="117:16" pos:end="117:16">-</operator><literal type="number" pos:start="117:17" pos:end="117:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if<condition pos:start="123:7" pos:end="123:26">(<expr pos:start="123:8" pos:end="123:25"><call pos:start="123:8" pos:end="123:25"><name pos:start="123:8" pos:end="123:21">check_checksum</name><argument_list pos:start="123:22" pos:end="123:25">(<argument pos:start="123:23" pos:end="123:24"><expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">bc</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="123:27" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:18">

        <expr_stmt pos:start="125:9" pos:end="125:68"><expr pos:start="125:9" pos:end="125:67"><call pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:14">av_log</name><argument_list pos:start="125:15" pos:end="125:67">(<argument pos:start="125:16" pos:end="125:16"><expr pos:start="125:16" pos:end="125:16"><name pos:start="125:16" pos:end="125:16">s</name></expr></argument>, <argument pos:start="125:19" pos:end="125:30"><expr pos:start="125:19" pos:end="125:30"><name pos:start="125:19" pos:end="125:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="125:33" pos:end="125:66"><expr pos:start="125:33" pos:end="125:66"><literal type="string" pos:start="125:33" pos:end="125:66">"Main header checksum missmatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:18">return <expr pos:start="127:16" pos:end="127:17"><operator pos:start="127:16" pos:end="127:16">-</operator><literal type="number" pos:start="127:17" pos:end="127:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
