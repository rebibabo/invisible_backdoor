<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/40.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">parse_picture_segment</name><parameter_list pos:start="1:33" pos:end="3:67">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">uint8_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:52">buf</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:66"><decl pos:start="3:55" pos:end="3:66"><type pos:start="3:55" pos:end="3:66"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:66">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:13">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PGSSubContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:25">sequence_desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:31">rle_bitmap_len</name></decl>, <decl pos:start="13:34" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:34" pos:end="13:38">width</name></decl>, <decl pos:start="13:41" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:16"/><name pos:start="13:41" pos:end="13:46">height</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:18"><if pos:start="17:5" pos:end="19:18">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:16">buf_size</name> <operator pos:start="17:18" pos:end="17:19">&lt;=</operator> <literal type="number" pos:start="17:21" pos:end="17:21">4</literal></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:18"><block_content pos:start="19:9" pos:end="19:18">

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:12">buf_size</name> <operator pos:start="21:14" pos:end="21:15">-=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:67">/* skip 3 unknown bytes: Object ID (2 bytes), Version Number */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:13"><expr pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">buf</name> <operator pos:start="27:9" pos:end="27:10">+=</operator> <literal type="number" pos:start="27:12" pos:end="27:12">3</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:101">/* Read the Sequence Description to determine if start of RLE data or appended to previous RLE */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:46"><expr pos:start="33:5" pos:end="33:45"><name pos:start="33:5" pos:end="33:17">sequence_desc</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <call pos:start="33:21" pos:end="33:45"><name pos:start="33:21" pos:end="33:39">bytestream_get_byte</name><argument_list pos:start="33:40" pos:end="33:45">(<argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><operator pos:start="33:41" pos:end="33:41">&amp;</operator><name pos:start="33:42" pos:end="33:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="57:5"><if pos:start="37:5" pos:end="57:5">if <condition pos:start="37:8" pos:end="37:32">(<expr pos:start="37:9" pos:end="37:31"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:23">sequence_desc</name> <operator pos:start="37:25" pos:end="37:25">&amp;</operator> <literal type="number" pos:start="37:27" pos:end="37:30">0x80</literal><operator pos:start="37:31" pos:end="37:31">)</operator></expr>)</condition> <block pos:start="37:34" pos:end="57:5">{<block_content pos:start="41:9" pos:end="55:17">

        <comment type="block" pos:start="39:9" pos:end="39:33">/* Additional RLE data */</comment>

        <if_stmt pos:start="41:9" pos:end="43:22"><if pos:start="41:9" pos:end="43:22">if <condition pos:start="41:12" pos:end="41:54">(<expr pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:20">buf_size</name> <operator pos:start="41:22" pos:end="41:22">&gt;</operator> <name pos:start="41:24" pos:end="41:53"><name pos:start="41:24" pos:end="41:26">ctx</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:35">picture</name><operator pos:start="41:36" pos:end="41:36">.</operator><name pos:start="41:37" pos:end="41:53">rle_remaining_len</name></name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:22"><block_content pos:start="43:13" pos:end="43:22">

            <return pos:start="43:13" pos:end="43:22">return <expr pos:start="43:20" pos:end="43:21"><operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:76"><expr pos:start="47:9" pos:end="47:75"><call pos:start="47:9" pos:end="47:75"><name pos:start="47:9" pos:end="47:14">memcpy</name><argument_list pos:start="47:15" pos:end="47:75">(<argument pos:start="47:16" pos:end="47:59"><expr pos:start="47:16" pos:end="47:59"><name pos:start="47:16" pos:end="47:31"><name pos:start="47:16" pos:end="47:18">ctx</name><operator pos:start="47:19" pos:end="47:20">-&gt;</operator><name pos:start="47:21" pos:end="47:27">picture</name><operator pos:start="47:28" pos:end="47:28">.</operator><name pos:start="47:29" pos:end="47:31">rle</name></name> <operator pos:start="47:33" pos:end="47:33">+</operator> <name pos:start="47:35" pos:end="47:59"><name pos:start="47:35" pos:end="47:37">ctx</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:46">picture</name><operator pos:start="47:47" pos:end="47:47">.</operator><name pos:start="47:48" pos:end="47:59">rle_data_len</name></name></expr></argument>, <argument pos:start="47:62" pos:end="47:64"><expr pos:start="47:62" pos:end="47:64"><name pos:start="47:62" pos:end="47:64">buf</name></expr></argument>, <argument pos:start="47:67" pos:end="47:74"><expr pos:start="47:67" pos:end="47:74"><name pos:start="47:67" pos:end="47:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:46"><expr pos:start="49:9" pos:end="49:45"><name pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:11">ctx</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:20">picture</name><operator pos:start="49:21" pos:end="49:21">.</operator><name pos:start="49:22" pos:end="49:33">rle_data_len</name></name> <operator pos:start="49:35" pos:end="49:36">+=</operator> <name pos:start="49:38" pos:end="49:45">buf_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:51"><expr pos:start="51:9" pos:end="51:50"><name pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:20">picture</name><operator pos:start="51:21" pos:end="51:21">.</operator><name pos:start="51:22" pos:end="51:38">rle_remaining_len</name></name> <operator pos:start="51:40" pos:end="51:41">-=</operator> <name pos:start="51:43" pos:end="51:50">buf_size</name></expr>;</expr_stmt>



        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="63:18"><if pos:start="61:5" pos:end="63:18">if <condition pos:start="61:8" pos:end="61:22">(<expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:16">buf_size</name> <operator pos:start="61:18" pos:end="61:19">&lt;=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">7</literal></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:18"><expr pos:start="65:5" pos:end="65:17"><name pos:start="65:5" pos:end="65:12">buf_size</name> <operator pos:start="65:14" pos:end="65:15">-=</operator> <literal type="number" pos:start="65:17" pos:end="65:17">7</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:74">/* Decode rle bitmap length, stored size includes width/height data */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:18">rle_bitmap_len</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:46"><name pos:start="71:22" pos:end="71:40">bytestream_get_be24</name><argument_list pos:start="71:41" pos:end="71:46">(<argument pos:start="71:42" pos:end="71:45"><expr pos:start="71:42" pos:end="71:45"><operator pos:start="71:42" pos:end="71:42">&amp;</operator><name pos:start="71:43" pos:end="71:45">buf</name></expr></argument>)</argument_list></call> <operator pos:start="71:48" pos:end="71:48">-</operator> <literal type="number" pos:start="71:50" pos:end="71:50">2</literal><operator pos:start="71:51" pos:end="71:51">*</operator><literal type="number" pos:start="71:52" pos:end="71:52">2</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:41">/* Get bitmap dimensions from data */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:39"><expr pos:start="77:5" pos:end="77:38"><name pos:start="77:5" pos:end="77:9">width</name>  <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:38"><name pos:start="77:14" pos:end="77:32">bytestream_get_be16</name><argument_list pos:start="77:33" pos:end="77:38">(<argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><operator pos:start="77:34" pos:end="77:34">&amp;</operator><name pos:start="77:35" pos:end="77:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:39"><expr pos:start="79:5" pos:end="79:38"><name pos:start="79:5" pos:end="79:10">height</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:38"><name pos:start="79:14" pos:end="79:32">bytestream_get_be16</name><argument_list pos:start="79:33" pos:end="79:38">(<argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><operator pos:start="79:34" pos:end="79:34">&amp;</operator><name pos:start="79:35" pos:end="79:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:47">/* Make sure the bitmap is not too large */</comment>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:55">(<expr pos:start="85:9" pos:end="85:54"><name pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:13">avctx</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:20">width</name></name> <operator pos:start="85:22" pos:end="85:22">&lt;</operator> <name pos:start="85:24" pos:end="85:28">width</name> <operator pos:start="85:30" pos:end="85:31">||</operator> <name pos:start="85:33" pos:end="85:45"><name pos:start="85:33" pos:end="85:37">avctx</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:45">height</name></name> <operator pos:start="85:47" pos:end="85:47">&lt;</operator> <name pos:start="85:49" pos:end="85:54">height</name></expr>)</condition> <block pos:start="85:57" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:18">

        <expr_stmt pos:start="87:9" pos:end="87:78"><expr pos:start="87:9" pos:end="87:77"><call pos:start="87:9" pos:end="87:77"><name pos:start="87:9" pos:end="87:14">av_log</name><argument_list pos:start="87:15" pos:end="87:77">(<argument pos:start="87:16" pos:end="87:20"><expr pos:start="87:16" pos:end="87:20"><name pos:start="87:16" pos:end="87:20">avctx</name></expr></argument>, <argument pos:start="87:23" pos:end="87:34"><expr pos:start="87:23" pos:end="87:34"><name pos:start="87:23" pos:end="87:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:37" pos:end="87:76"><expr pos:start="87:37" pos:end="87:76"><literal type="string" pos:start="87:37" pos:end="87:76">"Bitmap dimensions larger than video.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:18">return <expr pos:start="89:16" pos:end="89:17"><operator pos:start="89:16" pos:end="89:16">-</operator><literal type="number" pos:start="89:17" pos:end="89:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:7">ctx</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:16">picture</name><operator pos:start="95:17" pos:end="95:17">.</operator><name pos:start="95:18" pos:end="95:18">w</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:26">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:7">ctx</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:16">picture</name><operator pos:start="97:17" pos:end="97:17">.</operator><name pos:start="97:18" pos:end="97:18">h</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:27">height</name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:85"><expr pos:start="101:5" pos:end="101:84"><call pos:start="101:5" pos:end="101:84"><name pos:start="101:5" pos:end="101:18">av_fast_malloc</name><argument_list pos:start="101:19" pos:end="101:84">(<argument pos:start="101:20" pos:end="101:36"><expr pos:start="101:20" pos:end="101:36"><operator pos:start="101:20" pos:end="101:20">&amp;</operator><name pos:start="101:21" pos:end="101:36"><name pos:start="101:21" pos:end="101:23">ctx</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:32">picture</name><operator pos:start="101:33" pos:end="101:33">.</operator><name pos:start="101:34" pos:end="101:36">rle</name></name></expr></argument>, <argument pos:start="101:39" pos:end="101:67"><expr pos:start="101:39" pos:end="101:67"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:67"><name pos:start="101:40" pos:end="101:42">ctx</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:51">picture</name><operator pos:start="101:52" pos:end="101:52">.</operator><name pos:start="101:53" pos:end="101:67">rle_buffer_size</name></name></expr></argument>, <argument pos:start="101:70" pos:end="101:83"><expr pos:start="101:70" pos:end="101:83"><name pos:start="101:70" pos:end="101:83">rle_bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="107:18"><if pos:start="105:5" pos:end="107:18">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><operator pos:start="105:9" pos:end="105:9">!</operator><name pos:start="105:10" pos:end="105:25"><name pos:start="105:10" pos:end="105:12">ctx</name><operator pos:start="105:13" pos:end="105:14">-&gt;</operator><name pos:start="105:15" pos:end="105:21">picture</name><operator pos:start="105:22" pos:end="105:22">.</operator><name pos:start="105:23" pos:end="105:25">rle</name></name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:18"><block_content pos:start="107:9" pos:end="107:18">

        <return pos:start="107:9" pos:end="107:18">return <expr pos:start="107:16" pos:end="107:17"><operator pos:start="107:16" pos:end="107:16">-</operator><literal type="number" pos:start="107:17" pos:end="107:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:44"><expr pos:start="111:5" pos:end="111:43"><call pos:start="111:5" pos:end="111:43"><name pos:start="111:5" pos:end="111:10">memcpy</name><argument_list pos:start="111:11" pos:end="111:43">(<argument pos:start="111:12" pos:end="111:27"><expr pos:start="111:12" pos:end="111:27"><name pos:start="111:12" pos:end="111:27"><name pos:start="111:12" pos:end="111:14">ctx</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:23">picture</name><operator pos:start="111:24" pos:end="111:24">.</operator><name pos:start="111:25" pos:end="111:27">rle</name></name></expr></argument>, <argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">buf</name></expr></argument>, <argument pos:start="111:35" pos:end="111:42"><expr pos:start="111:35" pos:end="111:42"><name pos:start="111:35" pos:end="111:42">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:41"><expr pos:start="113:5" pos:end="113:40"><name pos:start="113:5" pos:end="113:29"><name pos:start="113:5" pos:end="113:7">ctx</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:16">picture</name><operator pos:start="113:17" pos:end="113:17">.</operator><name pos:start="113:18" pos:end="113:29">rle_data_len</name></name> <operator pos:start="113:31" pos:end="113:31">=</operator> <name pos:start="113:33" pos:end="113:40">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:63"><expr pos:start="115:5" pos:end="115:62"><name pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:7">ctx</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:16">picture</name><operator pos:start="115:17" pos:end="115:17">.</operator><name pos:start="115:18" pos:end="115:34">rle_remaining_len</name></name> <operator pos:start="115:36" pos:end="115:36">=</operator> <name pos:start="115:38" pos:end="115:51">rle_bitmap_len</name> <operator pos:start="115:53" pos:end="115:53">-</operator> <name pos:start="115:55" pos:end="115:62">buf_size</name></expr>;</expr_stmt>



    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
