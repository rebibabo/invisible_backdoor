<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4833.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:8">uint64_t</name> <name pos:start="1:10" pos:end="1:15">HELPER</name></type>(<name pos:start="1:17" pos:end="1:35">paired_cmpxchg64_be</name>)<parameter_list pos:start="1:37" pos:end="3:70">(<parameter pos:start="1:38" pos:end="1:53"><decl pos:start="1:38" pos:end="1:53"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:48">CPUARMState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">env</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:63">uint64_t</name></type> <name pos:start="1:65" pos:end="1:68">addr</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:52"><decl pos:start="3:38" pos:end="3:52"><type pos:start="3:38" pos:end="3:52"><name pos:start="3:38" pos:end="3:45">uint64_t</name></type> <name pos:start="3:47" pos:end="3:52">new_lo</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:69"><decl pos:start="3:55" pos:end="3:69"><type pos:start="3:55" pos:end="3:69"><name pos:start="3:55" pos:end="3:62">uint64_t</name></type> <name pos:start="3:64" pos:end="3:69">new_hi</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="105:1">{<block_content pos:start="7:5" pos:end="103:20">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:16">ra</name> <init pos:start="7:18" pos:end="7:26">= <expr pos:start="7:20" pos:end="7:26"><call pos:start="7:20" pos:end="7:26"><name pos:start="7:20" pos:end="7:24">GETPC</name><argument_list pos:start="7:25" pos:end="7:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">Int128</name></type> <name pos:start="9:12" pos:end="9:15">oldv</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:18" pos:end="9:21">cmpv</name></decl>, <decl pos:start="9:24" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:24" pos:end="9:27">newv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:16">success</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:67"><expr pos:start="15:5" pos:end="15:66"><name pos:start="15:5" pos:end="15:8">cmpv</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:66"><name pos:start="15:12" pos:end="15:25">int128_make128</name><argument_list pos:start="15:26" pos:end="15:66">(<argument pos:start="15:27" pos:end="15:44"><expr pos:start="15:27" pos:end="15:44"><name pos:start="15:27" pos:end="15:44"><name pos:start="15:27" pos:end="15:29">env</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:44">exclusive_val</name></name></expr></argument>, <argument pos:start="15:47" pos:end="15:65"><expr pos:start="15:47" pos:end="15:65"><name pos:start="15:47" pos:end="15:65"><name pos:start="15:47" pos:end="15:49">env</name><operator pos:start="15:50" pos:end="15:51">-&gt;</operator><name pos:start="15:52" pos:end="15:65">exclusive_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:8">newv</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:41"><name pos:start="17:12" pos:end="17:25">int128_make128</name><argument_list pos:start="17:26" pos:end="17:41">(<argument pos:start="17:27" pos:end="17:32"><expr pos:start="17:27" pos:end="17:32"><name pos:start="17:27" pos:end="17:32">new_lo</name></expr></argument>, <argument pos:start="17:35" pos:end="17:40"><expr pos:start="17:35" pos:end="17:40"><name pos:start="17:35" pos:end="17:40">new_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="99:5"><if pos:start="21:5" pos:end="39:5">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:21">parallel_cpus</name></expr>)</condition> <block pos:start="21:24" pos:end="39:5">{<block_content pos:start="25:9" pos:end="38:0">

<cpp:ifndef pos:start="23:1" pos:end="23:24">#<cpp:directive pos:start="23:2" pos:end="23:7">ifndef</cpp:directive> <name pos:start="23:9" pos:end="23:24">CONFIG_ATOMIC128</name></cpp:ifndef>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:50"><call pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:28">cpu_loop_exit_atomic</name><argument_list pos:start="25:29" pos:end="25:50">(<argument pos:start="25:30" pos:end="25:45"><expr pos:start="25:30" pos:end="25:45"><call pos:start="25:30" pos:end="25:45"><name pos:start="25:30" pos:end="25:40">ENV_GET_CPU</name><argument_list pos:start="25:41" pos:end="25:45">(<argument pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><name pos:start="25:42" pos:end="25:44">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:48" pos:end="25:49"><expr pos:start="25:48" pos:end="25:49"><name pos:start="25:48" pos:end="25:49">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="27:1" pos:end="27:5">#<cpp:directive pos:start="27:2" pos:end="27:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="29:9" pos:end="29:48"><decl pos:start="29:9" pos:end="29:47"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:19">mem_idx</name> <init pos:start="29:21" pos:end="29:47">= <expr pos:start="29:23" pos:end="29:47"><call pos:start="29:23" pos:end="29:47"><name pos:start="29:23" pos:end="29:35">cpu_mmu_index</name><argument_list pos:start="29:36" pos:end="29:47">(<argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">env</name></expr></argument>, <argument pos:start="29:42" pos:end="29:46"><expr pos:start="29:42" pos:end="29:46"><name pos:start="29:42" pos:end="29:46">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:71"><decl pos:start="31:9" pos:end="31:70"><type pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:19">TCGMemOpIdx</name></type> <name pos:start="31:21" pos:end="31:22">oi</name> <init pos:start="31:24" pos:end="31:70">= <expr pos:start="31:26" pos:end="31:70"><call pos:start="31:26" pos:end="31:70"><name pos:start="31:26" pos:end="31:39">make_memop_idx</name><argument_list pos:start="31:40" pos:end="31:70">(<argument pos:start="31:41" pos:end="31:60"><expr pos:start="31:41" pos:end="31:60"><name pos:start="31:41" pos:end="31:46">MO_BEQ</name> <operator pos:start="31:48" pos:end="31:48">|</operator> <name pos:start="31:50" pos:end="31:60">MO_ALIGN_16</name></expr></argument>, <argument pos:start="31:63" pos:end="31:69"><expr pos:start="31:63" pos:end="31:69"><name pos:start="31:63" pos:end="31:69">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:76"><expr pos:start="33:9" pos:end="33:75"><name pos:start="33:9" pos:end="33:12">oldv</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:75"><name pos:start="33:16" pos:end="33:44">helper_atomic_cmpxchgo_be_mmu</name><argument_list pos:start="33:45" pos:end="33:75">(<argument pos:start="33:46" pos:end="33:48"><expr pos:start="33:46" pos:end="33:48"><name pos:start="33:46" pos:end="33:48">env</name></expr></argument>, <argument pos:start="33:51" pos:end="33:54"><expr pos:start="33:51" pos:end="33:54"><name pos:start="33:51" pos:end="33:54">addr</name></expr></argument>, <argument pos:start="33:57" pos:end="33:60"><expr pos:start="33:57" pos:end="33:60"><name pos:start="33:57" pos:end="33:60">cmpv</name></expr></argument>, <argument pos:start="33:63" pos:end="33:66"><expr pos:start="33:63" pos:end="33:66"><name pos:start="33:63" pos:end="33:66">newv</name></expr></argument>, <argument pos:start="33:69" pos:end="33:70"><expr pos:start="33:69" pos:end="33:70"><name pos:start="33:69" pos:end="33:70">oi</name></expr></argument>, <argument pos:start="33:73" pos:end="33:74"><expr pos:start="33:73" pos:end="33:74"><name pos:start="33:73" pos:end="33:74">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="38:0"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:15">success</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:39"><name pos:start="35:19" pos:end="35:27">int128_eq</name><argument_list pos:start="35:28" pos:end="35:39">(<argument pos:start="35:29" pos:end="35:32"><expr pos:start="35:29" pos:end="35:32"><name pos:start="35:29" pos:end="35:32">oldv</name></expr></argument>, <argument pos:start="35:35" pos:end="35:38"><expr pos:start="35:35" pos:end="35:38"><name pos:start="35:35" pos:end="35:38">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="99:5">else <block pos:start="39:12" pos:end="99:5">{<block_content pos:start="41:9" pos:end="98:0">

        <decl_stmt pos:start="41:9" pos:end="46:0"><decl pos:start="41:9" pos:end="41:19"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">uint64_t</name></type> <name pos:start="41:18" pos:end="41:19">o0</name></decl>, <decl pos:start="41:22" pos:end="41:23"><type ref="prev" pos:start="41:9" pos:end="41:16"/><name pos:start="41:22" pos:end="41:23">o1</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="45:1" pos:end="45:23">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <comment type="block" pos:start="47:9" pos:end="47:37">/* ??? Enforce alignment.  */</comment>

        <decl_stmt pos:start="49:9" pos:end="49:36"><decl pos:start="49:9" pos:end="49:35"><type pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:16">uint64_t</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:23">haddr</name> <init pos:start="49:25" pos:end="49:35">= <expr pos:start="49:27" pos:end="49:35"><call pos:start="49:27" pos:end="49:35"><name pos:start="49:27" pos:end="49:29">g2h</name><argument_list pos:start="49:30" pos:end="49:35">(<argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:10">o1</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:32"><name pos:start="51:14" pos:end="51:21">ldq_be_p</name><argument_list pos:start="51:22" pos:end="51:32">(<argument pos:start="51:23" pos:end="51:31"><expr pos:start="51:23" pos:end="51:31"><name pos:start="51:23" pos:end="51:27">haddr</name> <operator pos:start="51:29" pos:end="51:29">+</operator> <literal type="number" pos:start="51:31" pos:end="51:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:10">o0</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <call pos:start="53:14" pos:end="53:32"><name pos:start="53:14" pos:end="53:21">ldq_be_p</name><argument_list pos:start="53:22" pos:end="53:32">(<argument pos:start="53:23" pos:end="53:31"><expr pos:start="53:23" pos:end="53:31"><name pos:start="53:23" pos:end="53:27">haddr</name> <operator pos:start="53:29" pos:end="53:29">+</operator> <literal type="number" pos:start="53:31" pos:end="53:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:12">oldv</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:37"><name pos:start="55:16" pos:end="55:29">int128_make128</name><argument_list pos:start="55:30" pos:end="55:37">(<argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><name pos:start="55:31" pos:end="55:32">o0</name></expr></argument>, <argument pos:start="55:35" pos:end="55:36"><expr pos:start="55:35" pos:end="55:36"><name pos:start="55:35" pos:end="55:36">o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:15">success</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:39"><name pos:start="59:19" pos:end="59:27">int128_eq</name><argument_list pos:start="59:28" pos:end="59:39">(<argument pos:start="59:29" pos:end="59:32"><expr pos:start="59:29" pos:end="59:32"><name pos:start="59:29" pos:end="59:32">oldv</name></expr></argument>, <argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="70:0"><if pos:start="61:9" pos:end="70:0">if <condition pos:start="61:12" pos:end="61:20">(<expr pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:19">success</name></expr>)</condition> <block pos:start="61:22" pos:end="70:0">{<block_content pos:start="63:13" pos:end="65:52">

            <expr_stmt pos:start="63:13" pos:end="63:52"><expr pos:start="63:13" pos:end="63:51"><call pos:start="63:13" pos:end="63:51"><name pos:start="63:13" pos:end="63:20">stq_be_p</name><argument_list pos:start="63:21" pos:end="63:51">(<argument pos:start="63:22" pos:end="63:30"><expr pos:start="63:22" pos:end="63:30"><name pos:start="63:22" pos:end="63:26">haddr</name> <operator pos:start="63:28" pos:end="63:28">+</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr></argument>, <argument pos:start="63:33" pos:end="63:50"><expr pos:start="63:33" pos:end="63:50"><call pos:start="63:33" pos:end="63:50"><name pos:start="63:33" pos:end="63:44">int128_gethi</name><argument_list pos:start="63:45" pos:end="63:50">(<argument pos:start="63:46" pos:end="63:49"><expr pos:start="63:46" pos:end="63:49"><name pos:start="63:46" pos:end="63:49">newv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:52"><expr pos:start="65:13" pos:end="65:51"><call pos:start="65:13" pos:end="65:51"><name pos:start="65:13" pos:end="65:20">stq_be_p</name><argument_list pos:start="65:21" pos:end="65:51">(<argument pos:start="65:22" pos:end="65:30"><expr pos:start="65:22" pos:end="65:30"><name pos:start="65:22" pos:end="65:26">haddr</name> <operator pos:start="65:28" pos:end="65:28">+</operator> <literal type="number" pos:start="65:30" pos:end="65:30">1</literal></expr></argument>, <argument pos:start="65:33" pos:end="65:50"><expr pos:start="65:33" pos:end="65:50"><call pos:start="65:33" pos:end="65:50"><name pos:start="65:33" pos:end="65:44">int128_getlo</name><argument_list pos:start="65:45" pos:end="65:50">(<argument pos:start="65:46" pos:end="65:49"><expr pos:start="65:46" pos:end="65:49"><name pos:start="65:46" pos:end="65:49">newv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

        <decl_stmt pos:start="71:9" pos:end="71:48"><decl pos:start="71:9" pos:end="71:47"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:19">mem_idx</name> <init pos:start="71:21" pos:end="71:47">= <expr pos:start="71:23" pos:end="71:47"><call pos:start="71:23" pos:end="71:47"><name pos:start="71:23" pos:end="71:35">cpu_mmu_index</name><argument_list pos:start="71:36" pos:end="71:47">(<argument pos:start="71:37" pos:end="71:39"><expr pos:start="71:37" pos:end="71:39"><name pos:start="71:37" pos:end="71:39">env</name></expr></argument>, <argument pos:start="71:42" pos:end="71:46"><expr pos:start="71:42" pos:end="71:46"><name pos:start="71:42" pos:end="71:46">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:72"><decl pos:start="73:9" pos:end="73:71"><type pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:19">TCGMemOpIdx</name></type> <name pos:start="73:21" pos:end="73:23">oi0</name> <init pos:start="73:25" pos:end="73:71">= <expr pos:start="73:27" pos:end="73:71"><call pos:start="73:27" pos:end="73:71"><name pos:start="73:27" pos:end="73:40">make_memop_idx</name><argument_list pos:start="73:41" pos:end="73:71">(<argument pos:start="73:42" pos:end="73:61"><expr pos:start="73:42" pos:end="73:61"><name pos:start="73:42" pos:end="73:47">MO_BEQ</name> <operator pos:start="73:49" pos:end="73:49">|</operator> <name pos:start="73:51" pos:end="73:61">MO_ALIGN_16</name></expr></argument>, <argument pos:start="73:64" pos:end="73:70"><expr pos:start="73:64" pos:end="73:70"><name pos:start="73:64" pos:end="73:70">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:58"><decl pos:start="75:9" pos:end="75:57"><type pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:19">TCGMemOpIdx</name></type> <name pos:start="75:21" pos:end="75:23">oi1</name> <init pos:start="75:25" pos:end="75:57">= <expr pos:start="75:27" pos:end="75:57"><call pos:start="75:27" pos:end="75:57"><name pos:start="75:27" pos:end="75:40">make_memop_idx</name><argument_list pos:start="75:41" pos:end="75:57">(<argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:47">MO_BEQ</name></expr></argument>, <argument pos:start="75:50" pos:end="75:56"><expr pos:start="75:50" pos:end="75:56"><name pos:start="75:50" pos:end="75:56">mem_idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:55"><expr pos:start="79:9" pos:end="79:54"><name pos:start="79:9" pos:end="79:10">o1</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <call pos:start="79:14" pos:end="79:54"><name pos:start="79:14" pos:end="79:30">helper_be_ldq_mmu</name><argument_list pos:start="79:31" pos:end="79:54">(<argument pos:start="79:32" pos:end="79:34"><expr pos:start="79:32" pos:end="79:34"><name pos:start="79:32" pos:end="79:34">env</name></expr></argument>, <argument pos:start="79:37" pos:end="79:44"><expr pos:start="79:37" pos:end="79:44"><name pos:start="79:37" pos:end="79:40">addr</name> <operator pos:start="79:42" pos:end="79:42">+</operator> <literal type="number" pos:start="79:44" pos:end="79:44">0</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:49"><expr pos:start="79:47" pos:end="79:49"><name pos:start="79:47" pos:end="79:49">oi0</name></expr></argument>, <argument pos:start="79:52" pos:end="79:53"><expr pos:start="79:52" pos:end="79:53"><name pos:start="79:52" pos:end="79:53">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:10">o0</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:54"><name pos:start="81:14" pos:end="81:30">helper_be_ldq_mmu</name><argument_list pos:start="81:31" pos:end="81:54">(<argument pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:34">env</name></expr></argument>, <argument pos:start="81:37" pos:end="81:44"><expr pos:start="81:37" pos:end="81:44"><name pos:start="81:37" pos:end="81:40">addr</name> <operator pos:start="81:42" pos:end="81:42">+</operator> <literal type="number" pos:start="81:44" pos:end="81:44">8</literal></expr></argument>, <argument pos:start="81:47" pos:end="81:49"><expr pos:start="81:47" pos:end="81:49"><name pos:start="81:47" pos:end="81:49">oi1</name></expr></argument>, <argument pos:start="81:52" pos:end="81:53"><expr pos:start="81:52" pos:end="81:53"><name pos:start="81:52" pos:end="81:53">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:38"><expr pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:12">oldv</name> <operator pos:start="83:14" pos:end="83:14">=</operator> <call pos:start="83:16" pos:end="83:37"><name pos:start="83:16" pos:end="83:29">int128_make128</name><argument_list pos:start="83:30" pos:end="83:37">(<argument pos:start="83:31" pos:end="83:32"><expr pos:start="83:31" pos:end="83:32"><name pos:start="83:31" pos:end="83:32">o0</name></expr></argument>, <argument pos:start="83:35" pos:end="83:36"><expr pos:start="83:35" pos:end="83:36"><name pos:start="83:35" pos:end="83:36">o1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="87:9" pos:end="87:40"><expr pos:start="87:9" pos:end="87:39"><name pos:start="87:9" pos:end="87:15">success</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:39"><name pos:start="87:19" pos:end="87:27">int128_eq</name><argument_list pos:start="87:28" pos:end="87:39">(<argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><name pos:start="87:29" pos:end="87:32">oldv</name></expr></argument>, <argument pos:start="87:35" pos:end="87:38"><expr pos:start="87:35" pos:end="87:38"><name pos:start="87:35" pos:end="87:38">cmpv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="98:0"><if pos:start="89:9" pos:end="98:0">if <condition pos:start="89:12" pos:end="89:20">(<expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:19">success</name></expr>)</condition> <block pos:start="89:22" pos:end="98:0">{<block_content pos:start="91:13" pos:end="93:74">

            <expr_stmt pos:start="91:13" pos:end="91:74"><expr pos:start="91:13" pos:end="91:73"><call pos:start="91:13" pos:end="91:73"><name pos:start="91:13" pos:end="91:29">helper_be_stq_mmu</name><argument_list pos:start="91:30" pos:end="91:73">(<argument pos:start="91:31" pos:end="91:33"><expr pos:start="91:31" pos:end="91:33"><name pos:start="91:31" pos:end="91:33">env</name></expr></argument>, <argument pos:start="91:36" pos:end="91:43"><expr pos:start="91:36" pos:end="91:43"><name pos:start="91:36" pos:end="91:39">addr</name> <operator pos:start="91:41" pos:end="91:41">+</operator> <literal type="number" pos:start="91:43" pos:end="91:43">0</literal></expr></argument>, <argument pos:start="91:46" pos:end="91:63"><expr pos:start="91:46" pos:end="91:63"><call pos:start="91:46" pos:end="91:63"><name pos:start="91:46" pos:end="91:57">int128_gethi</name><argument_list pos:start="91:58" pos:end="91:63">(<argument pos:start="91:59" pos:end="91:62"><expr pos:start="91:59" pos:end="91:62"><name pos:start="91:59" pos:end="91:62">newv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:66" pos:end="91:68"><expr pos:start="91:66" pos:end="91:68"><name pos:start="91:66" pos:end="91:68">oi1</name></expr></argument>, <argument pos:start="91:71" pos:end="91:72"><expr pos:start="91:71" pos:end="91:72"><name pos:start="91:71" pos:end="91:72">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:74"><expr pos:start="93:13" pos:end="93:73"><call pos:start="93:13" pos:end="93:73"><name pos:start="93:13" pos:end="93:29">helper_be_stq_mmu</name><argument_list pos:start="93:30" pos:end="93:73">(<argument pos:start="93:31" pos:end="93:33"><expr pos:start="93:31" pos:end="93:33"><name pos:start="93:31" pos:end="93:33">env</name></expr></argument>, <argument pos:start="93:36" pos:end="93:43"><expr pos:start="93:36" pos:end="93:43"><name pos:start="93:36" pos:end="93:39">addr</name> <operator pos:start="93:41" pos:end="93:41">+</operator> <literal type="number" pos:start="93:43" pos:end="93:43">8</literal></expr></argument>, <argument pos:start="93:46" pos:end="93:63"><expr pos:start="93:46" pos:end="93:63"><call pos:start="93:46" pos:end="93:63"><name pos:start="93:46" pos:end="93:57">int128_getlo</name><argument_list pos:start="93:58" pos:end="93:63">(<argument pos:start="93:59" pos:end="93:62"><expr pos:start="93:59" pos:end="93:62"><name pos:start="93:59" pos:end="93:62">newv</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:66" pos:end="93:68"><expr pos:start="93:66" pos:end="93:68"><name pos:start="93:66" pos:end="93:68">oi1</name></expr></argument>, <argument pos:start="93:71" pos:end="93:72"><expr pos:start="93:71" pos:end="93:72"><name pos:start="93:71" pos:end="93:72">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <return pos:start="103:5" pos:end="103:20">return <expr pos:start="103:12" pos:end="103:19"><operator pos:start="103:12" pos:end="103:12">!</operator><name pos:start="103:13" pos:end="103:19">success</name></expr>;</return>

</block_content>}</block></function>
</unit>
