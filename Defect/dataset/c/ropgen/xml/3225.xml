<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3225.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">fchmodat_nofollow</name><parameter_list pos:start="1:29" pos:end="1:70">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:38"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:38">dirfd</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">name</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:64">mode_t</name></type> <name pos:start="1:66" pos:end="1:69">mode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">fd</name></decl>, <decl pos:start="5:13" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:15">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="23:7">/* FIXME: this should be handled with fchmodat(AT_SYMLINK_NOFOLLOW).

     * Unfortunately, the linux kernel doesn't implement it yet. As an

     * alternative, let's open the file and use fchmod() instead. This

     * may fail depending on the permissions of the file, but it is the

     * best we can do to avoid TOCTTOU. We first try to open read-only

     * in case name points to a directory. If that fails, we try write-only

     * in case name doesn't point to a directory.

     */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:6">fd</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <call pos:start="25:10" pos:end="25:46"><name pos:start="25:10" pos:end="25:20">openat_file</name><argument_list pos:start="25:21" pos:end="25:46">(<argument pos:start="25:22" pos:end="25:26"><expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26">dirfd</name></expr></argument>, <argument pos:start="25:29" pos:end="25:32"><expr pos:start="25:29" pos:end="25:32"><name pos:start="25:29" pos:end="25:32">name</name></expr></argument>, <argument pos:start="25:35" pos:end="25:42"><expr pos:start="25:35" pos:end="25:42"><name pos:start="25:35" pos:end="25:42">O_RDONLY</name></expr></argument>, <argument pos:start="25:45" pos:end="25:45"><expr pos:start="25:45" pos:end="25:45"><literal type="number" pos:start="25:45" pos:end="25:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="43:5">if <condition pos:start="27:8" pos:end="27:17">(<expr pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:10">fd</name> <operator pos:start="27:12" pos:end="27:13">==</operator> <operator pos:start="27:15" pos:end="27:15">-</operator><literal type="number" pos:start="27:16" pos:end="27:16">1</literal></expr>)</condition> <block pos:start="27:19" pos:end="43:5">{<block_content pos:start="31:9" pos:end="41:9">

        <comment type="block" pos:start="29:9" pos:end="29:70">/* In case the file is writable-only and isn't a directory. */</comment>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:28">(<expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:17">errno</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <name pos:start="31:22" pos:end="31:27">EACCES</name></expr>)</condition> <block pos:start="31:30" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:55">

            <expr_stmt pos:start="33:13" pos:end="33:55"><expr pos:start="33:13" pos:end="33:54"><name pos:start="33:13" pos:end="33:14">fd</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:54"><name pos:start="33:18" pos:end="33:28">openat_file</name><argument_list pos:start="33:29" pos:end="33:54">(<argument pos:start="33:30" pos:end="33:34"><expr pos:start="33:30" pos:end="33:34"><name pos:start="33:30" pos:end="33:34">dirfd</name></expr></argument>, <argument pos:start="33:37" pos:end="33:40"><expr pos:start="33:37" pos:end="33:40"><name pos:start="33:37" pos:end="33:40">name</name></expr></argument>, <argument pos:start="33:43" pos:end="33:50"><expr pos:start="33:43" pos:end="33:50"><name pos:start="33:43" pos:end="33:50">O_WRONLY</name></expr></argument>, <argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><literal type="number" pos:start="33:53" pos:end="33:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:40">(<expr pos:start="37:13" pos:end="37:39"><name pos:start="37:13" pos:end="37:14">fd</name> <operator pos:start="37:16" pos:end="37:17">==</operator> <operator pos:start="37:19" pos:end="37:19">-</operator><literal type="number" pos:start="37:20" pos:end="37:20">1</literal> <operator pos:start="37:22" pos:end="37:23">&amp;&amp;</operator> <name pos:start="37:25" pos:end="37:29">errno</name> <operator pos:start="37:31" pos:end="37:32">==</operator> <name pos:start="37:34" pos:end="37:39">EISDIR</name></expr>)</condition> <block pos:start="37:42" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:27">

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:17">errno</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:26">EACCES</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:10">fd</name> <operator pos:start="45:12" pos:end="45:13">==</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>)</condition> <block pos:start="45:19" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:18">

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:7">ret</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:26"><name pos:start="51:11" pos:end="51:16">fchmod</name><argument_list pos:start="51:17" pos:end="51:26">(<argument pos:start="51:18" pos:end="51:19"><expr pos:start="51:18" pos:end="51:19"><name pos:start="51:18" pos:end="51:19">fd</name></expr></argument>, <argument pos:start="51:22" pos:end="51:25"><expr pos:start="51:22" pos:end="51:25"><name pos:start="51:22" pos:end="51:25">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:29"><expr pos:start="53:5" pos:end="53:28"><call pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:24">close_preserve_errno</name><argument_list pos:start="53:25" pos:end="53:28">(<argument pos:start="53:26" pos:end="53:27"><expr pos:start="53:26" pos:end="53:27"><name pos:start="53:26" pos:end="53:27">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="55:5" pos:end="55:15">return <expr pos:start="55:12" pos:end="55:14"><name pos:start="55:12" pos:end="55:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
