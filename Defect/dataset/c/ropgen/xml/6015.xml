<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6015.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:19">virtqueue_pop</name><parameter_list pos:start="1:20" pos:end="1:45">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:29">VirtQueue</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:33">vq</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:44"><decl pos:start="1:36" pos:end="1:44"><type pos:start="1:36" pos:end="1:44"><name pos:start="1:36" pos:end="1:41">size_t</name></type> <name pos:start="1:43" pos:end="1:44">sz</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:16">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>, <decl pos:start="5:21" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:21" pos:end="5:24">head</name></decl>, <decl pos:start="5:27" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:27" pos:end="5:29">max</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:18">desc_pa</name> <init pos:start="7:20" pos:end="7:35">= <expr pos:start="7:22" pos:end="7:35"><name pos:start="7:22" pos:end="7:35"><name pos:start="7:22" pos:end="7:23">vq</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:30">vring</name><operator pos:start="7:31" pos:end="7:31">.</operator><name pos:start="7:32" pos:end="7:35">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">VirtIODevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:22">vdev</name> <init pos:start="9:24" pos:end="9:33">= <expr pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:27">vq</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:33">vdev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">VirtQueueElement</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">elem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:20">out_num</name></decl>, <decl pos:start="13:23" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:28">in_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:35"><name pos:start="15:12" pos:end="15:15">addr</name><index pos:start="15:16" pos:end="15:35">[<expr pos:start="15:17" pos:end="15:34"><name pos:start="15:17" pos:end="15:34">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:16">iovec</name></name></type> <name pos:start="17:18" pos:end="17:40"><name pos:start="17:18" pos:end="17:20">iov</name><index pos:start="17:21" pos:end="17:40">[<expr pos:start="17:22" pos:end="17:39"><name pos:start="17:22" pos:end="17:39">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">VRingDesc</name></type> <name pos:start="19:15" pos:end="19:18">desc</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:52"><name pos:start="23:10" pos:end="23:28">virtqueue_num_heads</name><argument_list pos:start="23:29" pos:end="23:52">(<argument pos:start="23:30" pos:end="23:31"><expr pos:start="23:30" pos:end="23:31"><name pos:start="23:30" pos:end="23:31">vq</name></expr></argument>, <argument pos:start="23:34" pos:end="23:51"><expr pos:start="23:34" pos:end="23:51"><name pos:start="23:34" pos:end="23:51"><name pos:start="23:34" pos:end="23:35">vq</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:51">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:55" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:66">/* When we start there are none of either input nor output. */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:25"><expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:11">out_num</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:20">in_num</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:7">max</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:23"><name pos:start="37:11" pos:end="37:12">vq</name><operator pos:start="37:13" pos:end="37:14">-&gt;</operator><name pos:start="37:15" pos:end="37:19">vring</name><operator pos:start="37:20" pos:end="37:20">.</operator><name pos:start="37:21" pos:end="37:23">num</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:60"><expr pos:start="41:5" pos:end="41:59"><name pos:start="41:5" pos:end="41:5">i</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:12">head</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:59"><name pos:start="41:16" pos:end="41:33">virtqueue_get_head</name><argument_list pos:start="41:34" pos:end="41:59">(<argument pos:start="41:35" pos:end="41:36"><expr pos:start="41:35" pos:end="41:36"><name pos:start="41:35" pos:end="41:36">vq</name></expr></argument>, <argument pos:start="41:39" pos:end="41:58"><expr pos:start="41:39" pos:end="41:58"><name pos:start="41:39" pos:end="41:56"><name pos:start="41:39" pos:end="41:40">vq</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:56">last_avail_idx</name></name><operator pos:start="41:57" pos:end="41:58">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:63">(<expr pos:start="43:9" pos:end="43:62"><call pos:start="43:9" pos:end="43:62"><name pos:start="43:9" pos:end="43:31">virtio_vdev_has_feature</name><argument_list pos:start="43:32" pos:end="43:62">(<argument pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:36"><name pos:start="43:33" pos:end="43:36">vdev</name></expr></argument>, <argument pos:start="43:39" pos:end="43:61"><expr pos:start="43:39" pos:end="43:61"><name pos:start="43:39" pos:end="43:61">VIRTIO_RING_F_EVENT_IDX</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:65" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:54">

        <expr_stmt pos:start="45:9" pos:end="45:54"><expr pos:start="45:9" pos:end="45:53"><call pos:start="45:9" pos:end="45:53"><name pos:start="45:9" pos:end="45:29">vring_set_avail_event</name><argument_list pos:start="45:30" pos:end="45:53">(<argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">vq</name></expr></argument>, <argument pos:start="45:35" pos:end="45:52"><expr pos:start="45:35" pos:end="45:52"><name pos:start="45:35" pos:end="45:52"><name pos:start="45:35" pos:end="45:36">vq</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:52">last_avail_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:45"><expr pos:start="51:5" pos:end="51:44"><call pos:start="51:5" pos:end="51:44"><name pos:start="51:5" pos:end="51:19">vring_desc_read</name><argument_list pos:start="51:20" pos:end="51:44">(<argument pos:start="51:21" pos:end="51:24"><expr pos:start="51:21" pos:end="51:24"><name pos:start="51:21" pos:end="51:24">vdev</name></expr></argument>, <argument pos:start="51:27" pos:end="51:31"><expr pos:start="51:27" pos:end="51:31"><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:31">desc</name></expr></argument>, <argument pos:start="51:34" pos:end="51:40"><expr pos:start="51:34" pos:end="51:40"><name pos:start="51:34" pos:end="51:40">desc_pa</name></expr></argument>, <argument pos:start="51:43" pos:end="51:43"><expr pos:start="51:43" pos:end="51:43"><name pos:start="51:43" pos:end="51:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="75:5"><if pos:start="53:5" pos:end="75:5">if <condition pos:start="53:8" pos:end="53:43">(<expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:12">desc</name><operator pos:start="53:13" pos:end="53:13">.</operator><name pos:start="53:14" pos:end="53:18">flags</name></name> <operator pos:start="53:20" pos:end="53:20">&amp;</operator> <name pos:start="53:22" pos:end="53:42">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="53:45" pos:end="75:5">{<block_content pos:start="55:9" pos:end="73:49">

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:41">(<expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:16">desc</name><operator pos:start="55:17" pos:end="55:17">.</operator><name pos:start="55:18" pos:end="55:20">len</name></name> <operator pos:start="55:22" pos:end="55:22">%</operator> <sizeof pos:start="55:24" pos:end="55:40">sizeof<argument_list pos:start="55:30" pos:end="55:40">(<argument pos:start="55:31" pos:end="55:39"><expr pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:39">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="55:43" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:20">

            <expr_stmt pos:start="57:13" pos:end="57:67"><expr pos:start="57:13" pos:end="57:66"><call pos:start="57:13" pos:end="57:66"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="57:66">(<argument pos:start="57:26" pos:end="57:65"><expr pos:start="57:26" pos:end="57:65"><literal type="string" pos:start="57:26" pos:end="57:65">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:20"><expr pos:start="59:13" pos:end="59:19"><call pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:16">exit</name><argument_list pos:start="59:17" pos:end="59:19">(<argument pos:start="59:18" pos:end="59:18"><expr pos:start="59:18" pos:end="59:18"><literal type="number" pos:start="59:18" pos:end="59:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="65:9" pos:end="65:53">/* loop over the indirect descriptor table */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:11">max</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <name pos:start="67:15" pos:end="67:22"><name pos:start="67:15" pos:end="67:18">desc</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:22">len</name></name> <operator pos:start="67:24" pos:end="67:24">/</operator> <sizeof pos:start="67:26" pos:end="67:42">sizeof<argument_list pos:start="67:32" pos:end="67:42">(<argument pos:start="67:33" pos:end="67:41"><expr pos:start="67:33" pos:end="67:41"><name pos:start="67:33" pos:end="67:41">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:15">desc_pa</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:27"><name pos:start="69:19" pos:end="69:22">desc</name><operator pos:start="69:23" pos:end="69:23">.</operator><name pos:start="69:24" pos:end="69:27">addr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:14"><expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:9">i</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <literal type="number" pos:start="71:13" pos:end="71:13">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:23">vring_desc_read</name><argument_list pos:start="73:24" pos:end="73:48">(<argument pos:start="73:25" pos:end="73:28"><expr pos:start="73:25" pos:end="73:28"><name pos:start="73:25" pos:end="73:28">vdev</name></expr></argument>, <argument pos:start="73:31" pos:end="73:35"><expr pos:start="73:31" pos:end="73:35"><operator pos:start="73:31" pos:end="73:31">&amp;</operator><name pos:start="73:32" pos:end="73:35">desc</name></expr></argument>, <argument pos:start="73:38" pos:end="73:44"><expr pos:start="73:38" pos:end="73:44"><name pos:start="73:38" pos:end="73:44">desc_pa</name></expr></argument>, <argument pos:start="73:47" pos:end="73:47"><expr pos:start="73:47" pos:end="73:47"><name pos:start="73:47" pos:end="73:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:37">/* Collect all the descriptors */</comment>

    <do pos:start="81:5" pos:end="117:79">do <block pos:start="81:8" pos:end="117:5">{<block_content pos:start="83:9" pos:end="115:9">

        <if_stmt pos:start="83:9" pos:end="103:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:44">(<expr pos:start="83:13" pos:end="83:43"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:16">desc</name><operator pos:start="83:17" pos:end="83:17">.</operator><name pos:start="83:18" pos:end="83:22">flags</name></name> <operator pos:start="83:24" pos:end="83:24">&amp;</operator> <name pos:start="83:26" pos:end="83:43">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="83:46" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:88">

            <expr_stmt pos:start="85:13" pos:end="87:88"><expr pos:start="85:13" pos:end="87:87"><call pos:start="85:13" pos:end="87:87"><name pos:start="85:13" pos:end="85:30">virtqueue_map_desc</name><argument_list pos:start="85:31" pos:end="87:87">(<argument pos:start="85:32" pos:end="85:38"><expr pos:start="85:32" pos:end="85:38"><operator pos:start="85:32" pos:end="85:32">&amp;</operator><name pos:start="85:33" pos:end="85:38">in_num</name></expr></argument>, <argument pos:start="85:41" pos:end="85:54"><expr pos:start="85:41" pos:end="85:54"><name pos:start="85:41" pos:end="85:44">addr</name> <operator pos:start="85:46" pos:end="85:46">+</operator> <name pos:start="85:48" pos:end="85:54">out_num</name></expr></argument>, <argument pos:start="85:57" pos:end="85:69"><expr pos:start="85:57" pos:end="85:69"><name pos:start="85:57" pos:end="85:59">iov</name> <operator pos:start="85:61" pos:end="85:61">+</operator> <name pos:start="85:63" pos:end="85:69">out_num</name></expr></argument>,

                               <argument pos:start="87:32" pos:end="87:59"><expr pos:start="87:32" pos:end="87:59"><name pos:start="87:32" pos:end="87:49">VIRTQUEUE_MAX_SIZE</name> <operator pos:start="87:51" pos:end="87:51">-</operator> <name pos:start="87:53" pos:end="87:59">out_num</name></expr></argument>, <argument pos:start="87:62" pos:end="87:65"><expr pos:start="87:62" pos:end="87:65"><name pos:start="87:62" pos:end="87:65">true</name></expr></argument>, <argument pos:start="87:68" pos:end="87:76"><expr pos:start="87:68" pos:end="87:76"><name pos:start="87:68" pos:end="87:76"><name pos:start="87:68" pos:end="87:71">desc</name><operator pos:start="87:72" pos:end="87:72">.</operator><name pos:start="87:73" pos:end="87:76">addr</name></name></expr></argument>, <argument pos:start="87:79" pos:end="87:86"><expr pos:start="87:79" pos:end="87:86"><name pos:start="87:79" pos:end="87:86"><name pos:start="87:79" pos:end="87:82">desc</name><operator pos:start="87:83" pos:end="87:83">.</operator><name pos:start="87:84" pos:end="87:86">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="103:9">else <block pos:start="89:16" pos:end="103:9">{<block_content pos:start="91:13" pos:end="101:79">

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:23">(<expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">in_num</name></expr>)</condition> <block pos:start="91:25" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:24">

                <expr_stmt pos:start="93:17" pos:end="93:64"><expr pos:start="93:17" pos:end="93:63"><call pos:start="93:17" pos:end="93:63"><name pos:start="93:17" pos:end="93:28">error_report</name><argument_list pos:start="93:29" pos:end="93:63">(<argument pos:start="93:30" pos:end="93:62"><expr pos:start="93:30" pos:end="93:62"><literal type="string" pos:start="93:30" pos:end="93:62">"Incorrect order for descriptors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:24"><expr pos:start="95:17" pos:end="95:23"><call pos:start="95:17" pos:end="95:23"><name pos:start="95:17" pos:end="95:20">exit</name><argument_list pos:start="95:21" pos:end="95:23">(<argument pos:start="95:22" pos:end="95:22"><expr pos:start="95:22" pos:end="95:22"><literal type="number" pos:start="95:22" pos:end="95:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="99:13" pos:end="101:79"><expr pos:start="99:13" pos:end="101:78"><call pos:start="99:13" pos:end="101:78"><name pos:start="99:13" pos:end="99:30">virtqueue_map_desc</name><argument_list pos:start="99:31" pos:end="101:78">(<argument pos:start="99:32" pos:end="99:39"><expr pos:start="99:32" pos:end="99:39"><operator pos:start="99:32" pos:end="99:32">&amp;</operator><name pos:start="99:33" pos:end="99:39">out_num</name></expr></argument>, <argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><name pos:start="99:42" pos:end="99:45">addr</name></expr></argument>, <argument pos:start="99:48" pos:end="99:50"><expr pos:start="99:48" pos:end="99:50"><name pos:start="99:48" pos:end="99:50">iov</name></expr></argument>,

                               <argument pos:start="101:32" pos:end="101:49"><expr pos:start="101:32" pos:end="101:49"><name pos:start="101:32" pos:end="101:49">VIRTQUEUE_MAX_SIZE</name></expr></argument>, <argument pos:start="101:52" pos:end="101:56"><expr pos:start="101:52" pos:end="101:56"><name pos:start="101:52" pos:end="101:56">false</name></expr></argument>, <argument pos:start="101:59" pos:end="101:67"><expr pos:start="101:59" pos:end="101:67"><name pos:start="101:59" pos:end="101:67"><name pos:start="101:59" pos:end="101:62">desc</name><operator pos:start="101:63" pos:end="101:63">.</operator><name pos:start="101:64" pos:end="101:67">addr</name></name></expr></argument>, <argument pos:start="101:70" pos:end="101:77"><expr pos:start="101:70" pos:end="101:77"><name pos:start="101:70" pos:end="101:77"><name pos:start="101:70" pos:end="101:73">desc</name><operator pos:start="101:74" pos:end="101:74">.</operator><name pos:start="101:75" pos:end="101:77">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:68">/* If we've got too many, that implies a descriptor loop. */</comment>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:37">(<expr pos:start="109:13" pos:end="109:36"><operator pos:start="109:13" pos:end="109:13">(</operator><name pos:start="109:14" pos:end="109:19">in_num</name> <operator pos:start="109:21" pos:end="109:21">+</operator> <name pos:start="109:23" pos:end="109:29">out_num</name><operator pos:start="109:30" pos:end="109:30">)</operator> <operator pos:start="109:32" pos:end="109:32">&gt;</operator> <name pos:start="109:34" pos:end="109:36">max</name></expr>)</condition> <block pos:start="109:39" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:20">

            <expr_stmt pos:start="111:13" pos:end="111:46"><expr pos:start="111:13" pos:end="111:45"><call pos:start="111:13" pos:end="111:45"><name pos:start="111:13" pos:end="111:24">error_report</name><argument_list pos:start="111:25" pos:end="111:45">(<argument pos:start="111:26" pos:end="111:44"><expr pos:start="111:26" pos:end="111:44"><literal type="string" pos:start="111:26" pos:end="111:44">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:20"><expr pos:start="113:13" pos:end="113:19"><call pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:16">exit</name><argument_list pos:start="113:17" pos:end="113:19">(<argument pos:start="113:18" pos:end="113:18"><expr pos:start="113:18" pos:end="113:18"><literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="117:13" pos:end="117:78">(<expr pos:start="117:14" pos:end="117:77"><operator pos:start="117:14" pos:end="117:14">(</operator><name pos:start="117:15" pos:end="117:15">i</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:69"><name pos:start="117:19" pos:end="117:42">virtqueue_read_next_desc</name><argument_list pos:start="117:43" pos:end="117:69">(<argument pos:start="117:44" pos:end="117:47"><expr pos:start="117:44" pos:end="117:47"><name pos:start="117:44" pos:end="117:47">vdev</name></expr></argument>, <argument pos:start="117:50" pos:end="117:54"><expr pos:start="117:50" pos:end="117:54"><operator pos:start="117:50" pos:end="117:50">&amp;</operator><name pos:start="117:51" pos:end="117:54">desc</name></expr></argument>, <argument pos:start="117:57" pos:end="117:63"><expr pos:start="117:57" pos:end="117:63"><name pos:start="117:57" pos:end="117:63">desc_pa</name></expr></argument>, <argument pos:start="117:66" pos:end="117:68"><expr pos:start="117:66" pos:end="117:68"><name pos:start="117:66" pos:end="117:68">max</name></expr></argument>)</argument_list></call><operator pos:start="117:70" pos:end="117:70">)</operator> <operator pos:start="117:72" pos:end="117:73">!=</operator> <name pos:start="117:75" pos:end="117:77">max</name></expr>)</condition>;</do>



    <comment type="block" pos:start="121:5" pos:end="121:52">/* Now copy what we have collected and mapped */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:56"><expr pos:start="123:5" pos:end="123:55"><name pos:start="123:5" pos:end="123:8">elem</name> <operator pos:start="123:10" pos:end="123:10">=</operator> <call pos:start="123:12" pos:end="123:55"><name pos:start="123:12" pos:end="123:34">virtqueue_alloc_element</name><argument_list pos:start="123:35" pos:end="123:55">(<argument pos:start="123:36" pos:end="123:37"><expr pos:start="123:36" pos:end="123:37"><name pos:start="123:36" pos:end="123:37">sz</name></expr></argument>, <argument pos:start="123:40" pos:end="123:46"><expr pos:start="123:40" pos:end="123:46"><name pos:start="123:40" pos:end="123:46">out_num</name></expr></argument>, <argument pos:start="123:49" pos:end="123:54"><expr pos:start="123:49" pos:end="123:54"><name pos:start="123:49" pos:end="123:54">in_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:23"><expr pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:8">elem</name><operator pos:start="125:9" pos:end="125:10">-&gt;</operator><name pos:start="125:11" pos:end="125:15">index</name></name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:22">head</name></expr>;</expr_stmt>

    <for pos:start="127:5" pos:end="133:5">for <control pos:start="127:9" pos:end="127:33">(<init pos:start="127:10" pos:end="127:15"><expr pos:start="127:10" pos:end="127:14"><name pos:start="127:10" pos:end="127:10">i</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <literal type="number" pos:start="127:14" pos:end="127:14">0</literal></expr>;</init> <condition pos:start="127:17" pos:end="127:28"><expr pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:17">i</name> <operator pos:start="127:19" pos:end="127:19">&lt;</operator> <name pos:start="127:21" pos:end="127:27">out_num</name></expr>;</condition> <incr pos:start="127:30" pos:end="127:32"><expr pos:start="127:30" pos:end="127:32"><name pos:start="127:30" pos:end="127:30">i</name><operator pos:start="127:31" pos:end="127:32">++</operator></expr></incr>)</control> <block pos:start="127:35" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:33">

        <expr_stmt pos:start="129:9" pos:end="129:36"><expr pos:start="129:9" pos:end="129:35"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:12">elem</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:22">out_addr</name><index pos:start="129:23" pos:end="129:25">[<expr pos:start="129:24" pos:end="129:24"><name pos:start="129:24" pos:end="129:24">i</name></expr>]</index></name> <operator pos:start="129:27" pos:end="129:27">=</operator> <name pos:start="129:29" pos:end="129:35"><name pos:start="129:29" pos:end="129:32">addr</name><index pos:start="129:33" pos:end="129:35">[<expr pos:start="129:34" pos:end="129:34"><name pos:start="129:34" pos:end="129:34">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:33"><expr pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:12">elem</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:20">out_sg</name><index pos:start="131:21" pos:end="131:23">[<expr pos:start="131:22" pos:end="131:22"><name pos:start="131:22" pos:end="131:22">i</name></expr>]</index></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:32"><name pos:start="131:27" pos:end="131:29">iov</name><index pos:start="131:30" pos:end="131:32">[<expr pos:start="131:31" pos:end="131:31"><name pos:start="131:31" pos:end="131:31">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="135:5" pos:end="141:5">for <control pos:start="135:9" pos:end="135:32">(<init pos:start="135:10" pos:end="135:15"><expr pos:start="135:10" pos:end="135:14"><name pos:start="135:10" pos:end="135:10">i</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <literal type="number" pos:start="135:14" pos:end="135:14">0</literal></expr>;</init> <condition pos:start="135:17" pos:end="135:27"><expr pos:start="135:17" pos:end="135:26"><name pos:start="135:17" pos:end="135:17">i</name> <operator pos:start="135:19" pos:end="135:19">&lt;</operator> <name pos:start="135:21" pos:end="135:26">in_num</name></expr>;</condition> <incr pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:29">i</name><operator pos:start="135:30" pos:end="135:31">++</operator></expr></incr>)</control> <block pos:start="135:34" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:42">

        <expr_stmt pos:start="137:9" pos:end="137:45"><expr pos:start="137:9" pos:end="137:44"><name pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:12">elem</name><operator pos:start="137:13" pos:end="137:14">-&gt;</operator><name pos:start="137:15" pos:end="137:21">in_addr</name><index pos:start="137:22" pos:end="137:24">[<expr pos:start="137:23" pos:end="137:23"><name pos:start="137:23" pos:end="137:23">i</name></expr>]</index></name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:44"><name pos:start="137:28" pos:end="137:31">addr</name><index pos:start="137:32" pos:end="137:44">[<expr pos:start="137:33" pos:end="137:43"><name pos:start="137:33" pos:end="137:39">out_num</name> <operator pos:start="137:41" pos:end="137:41">+</operator> <name pos:start="137:43" pos:end="137:43">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:42"><expr pos:start="139:9" pos:end="139:41"><name pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:12">elem</name><operator pos:start="139:13" pos:end="139:14">-&gt;</operator><name pos:start="139:15" pos:end="139:19">in_sg</name><index pos:start="139:20" pos:end="139:22">[<expr pos:start="139:21" pos:end="139:21"><name pos:start="139:21" pos:end="139:21">i</name></expr>]</index></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <name pos:start="139:26" pos:end="139:41"><name pos:start="139:26" pos:end="139:28">iov</name><index pos:start="139:29" pos:end="139:41">[<expr pos:start="139:30" pos:end="139:40"><name pos:start="139:30" pos:end="139:36">out_num</name> <operator pos:start="139:38" pos:end="139:38">+</operator> <name pos:start="139:40" pos:end="139:40">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="145:5" pos:end="145:16"><expr pos:start="145:5" pos:end="145:15"><name pos:start="145:5" pos:end="145:13"><name pos:start="145:5" pos:end="145:6">vq</name><operator pos:start="145:7" pos:end="145:8">-&gt;</operator><name pos:start="145:9" pos:end="145:13">inuse</name></name><operator pos:start="145:14" pos:end="145:15">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:63"><expr pos:start="149:5" pos:end="149:62"><call pos:start="149:5" pos:end="149:62"><name pos:start="149:5" pos:end="149:23">trace_virtqueue_pop</name><argument_list pos:start="149:24" pos:end="149:62">(<argument pos:start="149:25" pos:end="149:26"><expr pos:start="149:25" pos:end="149:26"><name pos:start="149:25" pos:end="149:26">vq</name></expr></argument>, <argument pos:start="149:29" pos:end="149:32"><expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:32">elem</name></expr></argument>, <argument pos:start="149:35" pos:end="149:46"><expr pos:start="149:35" pos:end="149:46"><name pos:start="149:35" pos:end="149:46"><name pos:start="149:35" pos:end="149:38">elem</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:46">in_num</name></name></expr></argument>, <argument pos:start="149:49" pos:end="149:61"><expr pos:start="149:49" pos:end="149:61"><name pos:start="149:49" pos:end="149:61"><name pos:start="149:49" pos:end="149:52">elem</name><operator pos:start="149:53" pos:end="149:54">-&gt;</operator><name pos:start="149:55" pos:end="149:61">out_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="151:5" pos:end="151:16">return <expr pos:start="151:12" pos:end="151:15"><name pos:start="151:12" pos:end="151:15">elem</name></expr>;</return>

</block_content>}</block></function>
</unit>
