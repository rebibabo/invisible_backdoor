<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18054.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:35">h_get_term_char</name><parameter_list pos:start="1:36" pos:end="3:76">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">CPUState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:74"><decl pos:start="1:52" pos:end="1:74"><type pos:start="1:52" pos:end="1:74"><name pos:start="1:52" pos:end="1:67">sPAPREnvironment</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">spapr</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:55"><decl pos:start="3:37" pos:end="3:55"><type pos:start="3:37" pos:end="3:55"><name pos:start="3:37" pos:end="3:48">target_ulong</name></type> <name pos:start="3:50" pos:end="3:55">opcode</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:75"><decl pos:start="3:58" pos:end="3:75"><type pos:start="3:58" pos:end="3:75"><name pos:start="3:58" pos:end="3:69">target_ulong</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:75">args</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:21">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:20">reg</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:27">args</name><index pos:start="7:28" pos:end="7:30">[<expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">target_ulong</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">len</name> <init pos:start="9:23" pos:end="9:32">= <expr pos:start="9:25" pos:end="9:32"><name pos:start="9:25" pos:end="9:28">args</name> <operator pos:start="9:30" pos:end="9:30">+</operator> <literal type="number" pos:start="9:32" pos:end="9:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">target_ulong</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:25">char0_7</name> <init pos:start="11:27" pos:end="11:36">= <expr pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:32">args</name> <operator pos:start="11:34" pos:end="11:34">+</operator> <literal type="number" pos:start="11:36" pos:end="11:36">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">target_ulong</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:26">char8_15</name> <init pos:start="13:28" pos:end="13:37">= <expr pos:start="13:30" pos:end="13:37"><name pos:start="13:30" pos:end="13:33">args</name> <operator pos:start="13:35" pos:end="13:35">+</operator> <literal type="number" pos:start="13:37" pos:end="13:37">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:70"><decl pos:start="15:5" pos:end="15:69"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">VIOsPAPRDevice</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:24">sdev</name> <init pos:start="15:26" pos:end="15:69">= <expr pos:start="15:28" pos:end="15:69"><call pos:start="15:28" pos:end="15:69"><name pos:start="15:28" pos:end="15:48">spapr_vio_find_by_reg</name><argument_list pos:start="15:49" pos:end="15:69">(<argument pos:start="15:50" pos:end="15:63"><expr pos:start="15:50" pos:end="15:63"><name pos:start="15:50" pos:end="15:63"><name pos:start="15:50" pos:end="15:54">spapr</name><operator pos:start="15:55" pos:end="15:56">-&gt;</operator><name pos:start="15:57" pos:end="15:63">vio_bus</name></name></expr></argument>, <argument pos:start="15:66" pos:end="15:68"><expr pos:start="15:66" pos:end="15:68"><name pos:start="15:66" pos:end="15:68">reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:15">buf</name><index pos:start="17:16" pos:end="17:19">[<expr pos:start="17:17" pos:end="17:18"><literal type="number" pos:start="17:17" pos:end="17:18">16</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:14">(<expr pos:start="21:9" pos:end="21:13"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:13">sdev</name></expr>)</condition> <block pos:start="21:16" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:27">

        <return pos:start="23:9" pos:end="23:27">return <expr pos:start="23:16" pos:end="23:26"><name pos:start="23:16" pos:end="23:26">H_PARAMETER</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><operator pos:start="29:5" pos:end="29:5">*</operator><name pos:start="29:6" pos:end="29:8">len</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:47"><name pos:start="29:12" pos:end="29:23">vty_getchars</name><argument_list pos:start="29:24" pos:end="29:47">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">sdev</name></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">buf</name></expr></argument>, <argument pos:start="29:36" pos:end="29:46"><expr pos:start="29:36" pos:end="29:46"><sizeof pos:start="29:36" pos:end="29:46">sizeof<argument_list pos:start="29:42" pos:end="29:46">(<argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><operator pos:start="31:9" pos:end="31:9">*</operator><name pos:start="31:10" pos:end="31:12">len</name> <operator pos:start="31:14" pos:end="31:14">&lt;</operator> <literal type="number" pos:start="31:16" pos:end="31:17">16</literal></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:41">

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:14">memset</name><argument_list pos:start="33:15" pos:end="33:40">(<argument pos:start="33:16" pos:end="33:25"><expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:18">buf</name> <operator pos:start="33:20" pos:end="33:20">+</operator> <operator pos:start="33:22" pos:end="33:22">*</operator><name pos:start="33:23" pos:end="33:25">len</name></expr></argument>, <argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><literal type="number" pos:start="33:31" pos:end="33:34">16</literal> <operator pos:start="33:34" pos:end="33:34">-</operator> <operator pos:start="33:36" pos:end="33:36">*</operator><name pos:start="33:37" pos:end="33:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:47"><expr pos:start="39:5" pos:end="39:46"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:12">char0_7</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <call pos:start="39:16" pos:end="39:46"><name pos:start="39:16" pos:end="39:26">be64_to_cpu</name><argument_list pos:start="39:27" pos:end="39:46">(<argument pos:start="39:28" pos:end="39:45"><expr pos:start="39:28" pos:end="39:45"><operator pos:start="39:28" pos:end="39:28">*</operator><operator pos:start="39:29" pos:end="39:29">(</operator><operator pos:start="39:30" pos:end="39:30">(</operator><name pos:start="39:31" pos:end="39:38">uint64_t</name> <operator pos:start="39:40" pos:end="39:40">*</operator><operator pos:start="39:41" pos:end="39:41">)</operator><name pos:start="39:42" pos:end="39:44">buf</name><operator pos:start="39:45" pos:end="39:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:52"><expr pos:start="41:5" pos:end="41:51"><operator pos:start="41:5" pos:end="41:5">*</operator><name pos:start="41:6" pos:end="41:13">char8_15</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:51"><name pos:start="41:17" pos:end="41:27">be64_to_cpu</name><argument_list pos:start="41:28" pos:end="41:51">(<argument pos:start="41:29" pos:end="41:50"><expr pos:start="41:29" pos:end="41:50"><operator pos:start="41:29" pos:end="41:29">*</operator><operator pos:start="41:30" pos:end="41:30">(</operator><operator pos:start="41:31" pos:end="41:31">(</operator><name pos:start="41:32" pos:end="41:39">uint64_t</name> <operator pos:start="41:41" pos:end="41:41">*</operator><operator pos:start="41:42" pos:end="41:42">)</operator><name pos:start="41:43" pos:end="41:45">buf</name> <operator pos:start="41:47" pos:end="41:47">+</operator> <literal type="number" pos:start="41:49" pos:end="41:49">1</literal><operator pos:start="41:50" pos:end="41:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="45:5" pos:end="45:21">return <expr pos:start="45:12" pos:end="45:20"><name pos:start="45:12" pos:end="45:20">H_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
