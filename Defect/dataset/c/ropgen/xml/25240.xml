<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25240.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">output_packet</name><parameter_list pos:start="1:26" pos:end="1:79">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">AVPacket</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">pkt</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:78"><decl pos:start="1:62" pos:end="1:78"><type pos:start="1:62" pos:end="1:78"><name pos:start="1:62" pos:end="1:73">OutputStream</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:78">ost</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:5">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:52">/* apply the output bitstream filters, if any */</comment>

    <if_stmt pos:start="11:5" pos:end="67:34"><if pos:start="11:5" pos:end="65:5">if <condition pos:start="11:8" pos:end="11:34">(<expr pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:11">ost</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:33">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="11:36" pos:end="65:5">{<block_content pos:start="13:9" pos:end="63:9">

        <decl_stmt pos:start="13:9" pos:end="13:16"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:55"><expr pos:start="17:9" pos:end="17:54"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:54"><name pos:start="17:15" pos:end="17:32">av_bsf_send_packet</name><argument_list pos:start="17:33" pos:end="17:54">(<argument pos:start="17:34" pos:end="17:48"><expr pos:start="17:34" pos:end="17:48"><name pos:start="17:34" pos:end="17:48"><name pos:start="17:34" pos:end="17:36">ost</name><operator pos:start="17:37" pos:end="17:38">-&gt;</operator><name pos:start="17:39" pos:end="17:45">bsf_ctx</name><index pos:start="17:46" pos:end="17:48">[<expr pos:start="17:47" pos:end="17:47"><literal type="number" pos:start="17:47" pos:end="17:47">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="17:51" pos:end="17:53"><expr pos:start="17:51" pos:end="17:53"><name pos:start="17:51" pos:end="17:53">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="21:24"><if pos:start="19:9" pos:end="21:24">if <condition pos:start="19:12" pos:end="19:20">(<expr pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:15">ret</name> <operator pos:start="19:17" pos:end="19:17">&lt;</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:24"><block_content pos:start="21:13" pos:end="21:24">

            <goto pos:start="21:13" pos:end="21:24">goto <name pos:start="21:18" pos:end="21:23">finish</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:16"><expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">idx</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr>;</expr_stmt>

        <while pos:start="27:9" pos:end="63:9">while <condition pos:start="27:15" pos:end="27:19">(<expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">idx</name></expr>)</condition> <block pos:start="27:21" pos:end="63:9">{<block_content pos:start="31:13" pos:end="61:42">

            <comment type="block" pos:start="29:13" pos:end="29:68">/* get a packet from the previous filter up the chain */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:68"><expr pos:start="31:13" pos:end="31:67"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:67"><name pos:start="31:19" pos:end="31:39">av_bsf_receive_packet</name><argument_list pos:start="31:40" pos:end="31:67">(<argument pos:start="31:41" pos:end="31:61"><expr pos:start="31:41" pos:end="31:61"><name pos:start="31:41" pos:end="31:61"><name pos:start="31:41" pos:end="31:43">ost</name><operator pos:start="31:44" pos:end="31:45">-&gt;</operator><name pos:start="31:46" pos:end="31:52">bsf_ctx</name><index pos:start="31:53" pos:end="31:61">[<expr pos:start="31:54" pos:end="31:60"><name pos:start="31:54" pos:end="31:56">idx</name> <operator pos:start="31:58" pos:end="31:58">-</operator> <literal type="number" pos:start="31:60" pos:end="31:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="31:64" pos:end="31:66"><expr pos:start="31:64" pos:end="31:66"><name pos:start="31:64" pos:end="31:66">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="43:28"><if pos:start="33:13" pos:end="41:13">if <condition pos:start="33:16" pos:end="33:39">(<expr pos:start="33:17" pos:end="33:38"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:22">==</operator> <call pos:start="33:24" pos:end="33:38"><name pos:start="33:24" pos:end="33:30">AVERROR</name><argument_list pos:start="33:31" pos:end="33:38">(<argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="41:13">{<block_content pos:start="35:17" pos:end="39:25">

                <expr_stmt pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:21"><name pos:start="37:17" pos:end="37:19">idx</name><operator pos:start="37:20" pos:end="37:21">--</operator></expr>;</expr_stmt>

                <continue pos:start="39:17" pos:end="39:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="41:15" pos:end="43:28">else if <condition pos:start="41:23" pos:end="41:31">(<expr pos:start="41:24" pos:end="41:30"><name pos:start="41:24" pos:end="41:26">ret</name> <operator pos:start="41:28" pos:end="41:28">&lt;</operator> <literal type="number" pos:start="41:30" pos:end="41:30">0</literal></expr>)</condition><block type="pseudo" pos:start="43:17" pos:end="43:28"><block_content pos:start="43:17" pos:end="43:28">

                <goto pos:start="43:17" pos:end="43:28">goto <name pos:start="43:22" pos:end="43:27">finish</name>;</goto></block_content></block></if></if_stmt>



            <comment type="block" pos:start="47:13" pos:end="47:75">/* send it to the next filter down the chain or to the muxer */</comment>

            <if_stmt pos:start="49:13" pos:end="61:42"><if pos:start="49:13" pos:end="59:13">if <condition pos:start="49:16" pos:end="49:48">(<expr pos:start="49:17" pos:end="49:47"><name pos:start="49:17" pos:end="49:19">idx</name> <operator pos:start="49:21" pos:end="49:21">&lt;</operator> <name pos:start="49:23" pos:end="49:47"><name pos:start="49:23" pos:end="49:25">ost</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:47">nb_bitstream_filters</name></name></expr>)</condition> <block pos:start="49:50" pos:end="59:13">{<block_content pos:start="51:17" pos:end="57:22">

                <expr_stmt pos:start="51:17" pos:end="51:65"><expr pos:start="51:17" pos:end="51:64"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:64"><name pos:start="51:23" pos:end="51:40">av_bsf_send_packet</name><argument_list pos:start="51:41" pos:end="51:64">(<argument pos:start="51:42" pos:end="51:58"><expr pos:start="51:42" pos:end="51:58"><name pos:start="51:42" pos:end="51:58"><name pos:start="51:42" pos:end="51:44">ost</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:53">bsf_ctx</name><index pos:start="51:54" pos:end="51:58">[<expr pos:start="51:55" pos:end="51:57"><name pos:start="51:55" pos:end="51:57">idx</name></expr>]</index></name></expr></argument>, <argument pos:start="51:61" pos:end="51:63"><expr pos:start="51:61" pos:end="51:63"><name pos:start="51:61" pos:end="51:63">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="55:32"><if pos:start="53:17" pos:end="55:32">if <condition pos:start="53:20" pos:end="53:28">(<expr pos:start="53:21" pos:end="53:27"><name pos:start="53:21" pos:end="53:23">ret</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:32"><block_content pos:start="55:21" pos:end="55:32">

                    <goto pos:start="55:21" pos:end="55:32">goto <name pos:start="55:26" pos:end="55:31">finish</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:21"><name pos:start="57:17" pos:end="57:19">idx</name><operator pos:start="57:20" pos:end="57:21">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="59:15" pos:end="61:42">else<block type="pseudo" pos:start="61:17" pos:end="61:42"><block_content pos:start="61:17" pos:end="61:42">

                <expr_stmt pos:start="61:17" pos:end="61:42"><expr pos:start="61:17" pos:end="61:41"><call pos:start="61:17" pos:end="61:41"><name pos:start="61:17" pos:end="61:28">write_packet</name><argument_list pos:start="61:29" pos:end="61:41">(<argument pos:start="61:30" pos:end="61:30"><expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">s</name></expr></argument>, <argument pos:start="61:33" pos:end="61:35"><expr pos:start="61:33" pos:end="61:35"><name pos:start="61:33" pos:end="61:35">pkt</name></expr></argument>, <argument pos:start="61:38" pos:end="61:40"><expr pos:start="61:38" pos:end="61:40"><name pos:start="61:38" pos:end="61:40">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="67:34">else<block type="pseudo" pos:start="67:9" pos:end="67:34"><block_content pos:start="67:9" pos:end="67:34">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><call pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:20">write_packet</name><argument_list pos:start="67:21" pos:end="67:33">(<argument pos:start="67:22" pos:end="67:22"><expr pos:start="67:22" pos:end="67:22"><name pos:start="67:22" pos:end="67:22">s</name></expr></argument>, <argument pos:start="67:25" pos:end="67:27"><expr pos:start="67:25" pos:end="67:27"><name pos:start="67:25" pos:end="67:27">pkt</name></expr></argument>, <argument pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:32">ost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



<label pos:start="71:1" pos:end="71:7"><name pos:start="71:1" pos:end="71:6">finish</name>:</label>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:38">(<expr pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal> <operator pos:start="73:17" pos:end="73:18">&amp;&amp;</operator> <name pos:start="73:20" pos:end="73:22">ret</name> <operator pos:start="73:24" pos:end="73:25">!=</operator> <name pos:start="73:27" pos:end="73:37">AVERROR_EOF</name></expr>)</condition> <block pos:start="73:40" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:24">

        <expr_stmt pos:start="75:9" pos:end="77:75"><expr pos:start="75:9" pos:end="77:74"><call pos:start="75:9" pos:end="77:74"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="77:74">(<argument pos:start="75:16" pos:end="75:19"><expr pos:start="75:16" pos:end="75:19"><name pos:start="75:16" pos:end="75:19">NULL</name></expr></argument>, <argument pos:start="75:22" pos:end="75:33"><expr pos:start="75:22" pos:end="75:33"><name pos:start="75:22" pos:end="75:33">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="75:36" pos:end="77:44"><expr pos:start="75:36" pos:end="77:44"><literal type="string" pos:start="75:36" pos:end="75:83">"Error applying bitstream filters to an output "</literal>

               <literal type="string" pos:start="77:16" pos:end="77:44">"packet for stream #%d:%d.\n"</literal></expr></argument>, <argument pos:start="77:47" pos:end="77:61"><expr pos:start="77:47" pos:end="77:61"><name pos:start="77:47" pos:end="77:61"><name pos:start="77:47" pos:end="77:49">ost</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:61">file_index</name></name></expr></argument>, <argument pos:start="77:64" pos:end="77:73"><expr pos:start="77:64" pos:end="77:73"><name pos:start="77:64" pos:end="77:73"><name pos:start="77:64" pos:end="77:66">ost</name><operator pos:start="77:67" pos:end="77:68">-&gt;</operator><name pos:start="77:69" pos:end="77:73">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><call pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:20">exit_program</name><argument_list pos:start="79:21" pos:end="79:23">(<argument pos:start="79:22" pos:end="79:22"><expr pos:start="79:22" pos:end="79:22"><literal type="number" pos:start="79:22" pos:end="79:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
