<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9723.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">mxf_get_d10_aes3_packet</name><parameter_list pos:start="1:35" pos:end="1:96">(<parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:46">AVIOContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">pb</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:60">AVStream</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">st</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:79"><decl pos:start="1:67" pos:end="1:79"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:74">AVPacket</name> <modifier pos:start="1:76" pos:end="1:76">*</modifier></type><name pos:start="1:77" pos:end="1:79">pkt</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:95"><decl pos:start="1:82" pos:end="1:95"><type pos:start="1:82" pos:end="1:95"><name pos:start="1:82" pos:end="1:88">int64_t</name></type> <name pos:start="1:90" pos:end="1:95">length</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:26">buf_ptr</name></decl>, <decl pos:start="5:29" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:36">end_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">data_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:18"><if pos:start="13:5" pos:end="15:18">if <condition pos:start="13:8" pos:end="13:23">(<expr pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:14">length</name> <operator pos:start="13:16" pos:end="13:16">&gt;</operator> <literal type="number" pos:start="13:18" pos:end="13:22">61444</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:18"><block_content pos:start="15:9" pos:end="15:18"> <comment type="block" pos:start="13:25" pos:end="13:68">/* worst case PAL 1920 samples 8 channels */</comment>

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:31"><expr pos:start="17:5" pos:end="17:30"><call pos:start="17:5" pos:end="17:30"><name pos:start="17:5" pos:end="17:17">av_new_packet</name><argument_list pos:start="17:18" pos:end="17:30">(<argument pos:start="17:19" pos:end="17:21"><expr pos:start="17:19" pos:end="17:21"><name pos:start="17:19" pos:end="17:21">pkt</name></expr></argument>, <argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><call pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:13">avio_read</name><argument_list pos:start="19:14" pos:end="19:36">(<argument pos:start="19:15" pos:end="19:16"><expr pos:start="19:15" pos:end="19:16"><name pos:start="19:15" pos:end="19:16">pb</name></expr></argument>, <argument pos:start="19:19" pos:end="19:27"><expr pos:start="19:19" pos:end="19:27"><name pos:start="19:19" pos:end="19:27"><name pos:start="19:19" pos:end="19:21">pkt</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:27">data</name></name></expr></argument>, <argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:12">data_ptr</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:24"><name pos:start="21:16" pos:end="21:18">pkt</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:24">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:33"><expr pos:start="23:5" pos:end="23:32"><name pos:start="23:5" pos:end="23:11">end_ptr</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:23"><name pos:start="23:15" pos:end="23:17">pkt</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:23">data</name></name> <operator pos:start="23:25" pos:end="23:25">+</operator> <name pos:start="23:27" pos:end="23:32">length</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:11">buf_ptr</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:23"><name pos:start="25:15" pos:end="25:17">pkt</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:23">data</name></name> <operator pos:start="25:25" pos:end="25:25">+</operator> <literal type="number" pos:start="25:27" pos:end="25:27">4</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:30" pos:end="25:57">/* skip SMPTE 331M header */</comment>

    <for pos:start="27:5" pos:end="45:5">for <control pos:start="27:9" pos:end="27:31">(<init pos:start="27:10" pos:end="27:10">;</init> <condition pos:start="27:12" pos:end="27:29"><expr pos:start="27:12" pos:end="27:28"><name pos:start="27:12" pos:end="27:18">buf_ptr</name> <operator pos:start="27:20" pos:end="27:20">&lt;</operator> <name pos:start="27:22" pos:end="27:28">end_ptr</name></expr>;</condition> <incr/>)</control> <block pos:start="27:33" pos:end="45:5">{<block_content pos:start="29:9" pos:end="43:46">

        <for pos:start="29:9" pos:end="41:9">for <control pos:start="29:13" pos:end="29:49">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:44"><expr pos:start="29:21" pos:end="29:43"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:26">st</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:33">codec</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:43">channels</name></name></expr>;</condition> <incr pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:46">i</name><operator pos:start="29:47" pos:end="29:48">++</operator></expr></incr>)</control> <block pos:start="29:51" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:72">

            <decl_stmt pos:start="31:13" pos:end="31:60"><decl pos:start="31:13" pos:end="31:59"><type pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">uint32_t</name></type> <name pos:start="31:22" pos:end="31:27">sample</name> <init pos:start="31:29" pos:end="31:59">= <expr pos:start="31:31" pos:end="31:59"><call pos:start="31:31" pos:end="31:59"><name pos:start="31:31" pos:end="31:49">bytestream_get_le32</name><argument_list pos:start="31:50" pos:end="31:59">(<argument pos:start="31:51" pos:end="31:58"><expr pos:start="31:51" pos:end="31:58"><operator pos:start="31:51" pos:end="31:51">&amp;</operator><name pos:start="31:52" pos:end="31:58">buf_ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="33:13" pos:end="39:72"><if pos:start="33:13" pos:end="35:73">if <condition pos:start="33:16" pos:end="33:55">(<expr pos:start="33:17" pos:end="33:54"><name pos:start="33:17" pos:end="33:48"><name pos:start="33:17" pos:end="33:18">st</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:25">codec</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:48">bits_per_coded_sample</name></name> <operator pos:start="33:50" pos:end="33:51">==</operator> <literal type="number" pos:start="33:53" pos:end="33:54">24</literal></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:73"><block_content pos:start="35:17" pos:end="35:73">

                <expr_stmt pos:start="35:17" pos:end="35:73"><expr pos:start="35:17" pos:end="35:72"><call pos:start="35:17" pos:end="35:72"><name pos:start="35:17" pos:end="35:35">bytestream_put_le24</name><argument_list pos:start="35:36" pos:end="35:72">(<argument pos:start="35:37" pos:end="35:45"><expr pos:start="35:37" pos:end="35:45"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:45">data_ptr</name></expr></argument>, <argument pos:start="35:48" pos:end="35:71"><expr pos:start="35:48" pos:end="35:71"><operator pos:start="35:48" pos:end="35:48">(</operator><name pos:start="35:49" pos:end="35:54">sample</name> <operator pos:start="35:56" pos:end="35:57">&gt;&gt;</operator> <literal type="number" pos:start="35:59" pos:end="35:59">4</literal><operator pos:start="35:60" pos:end="35:60">)</operator> <operator pos:start="35:62" pos:end="35:62">&amp;</operator> <literal type="number" pos:start="35:64" pos:end="35:71">0xffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="37:13" pos:end="39:72">else<block type="pseudo" pos:start="39:17" pos:end="39:72"><block_content pos:start="39:17" pos:end="39:72">

                <expr_stmt pos:start="39:17" pos:end="39:72"><expr pos:start="39:17" pos:end="39:71"><call pos:start="39:17" pos:end="39:71"><name pos:start="39:17" pos:end="39:35">bytestream_put_le16</name><argument_list pos:start="39:36" pos:end="39:71">(<argument pos:start="39:37" pos:end="39:45"><expr pos:start="39:37" pos:end="39:45"><operator pos:start="39:37" pos:end="39:37">&amp;</operator><name pos:start="39:38" pos:end="39:45">data_ptr</name></expr></argument>, <argument pos:start="39:48" pos:end="39:70"><expr pos:start="39:48" pos:end="39:70"><operator pos:start="39:48" pos:end="39:48">(</operator><name pos:start="39:49" pos:end="39:54">sample</name> <operator pos:start="39:56" pos:end="39:57">&gt;&gt;</operator> <literal type="number" pos:start="39:59" pos:end="39:60">12</literal><operator pos:start="39:61" pos:end="39:61">)</operator> <operator pos:start="39:63" pos:end="39:63">&amp;</operator> <literal type="number" pos:start="39:65" pos:end="39:70">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="43:9" pos:end="43:46"><expr pos:start="43:9" pos:end="43:45"><name pos:start="43:9" pos:end="43:15">buf_ptr</name> <operator pos:start="43:17" pos:end="43:18">+=</operator> <literal type="number" pos:start="43:20" pos:end="43:23">32</literal> <operator pos:start="43:23" pos:end="43:23">-</operator> <name pos:start="43:25" pos:end="43:43"><name pos:start="43:25" pos:end="43:26">st</name><operator pos:start="43:27" pos:end="43:28">-&gt;</operator><name pos:start="43:29" pos:end="43:33">codec</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:43">channels</name></name><operator pos:start="43:44" pos:end="43:44">*</operator><literal type="number" pos:start="43:45" pos:end="43:45">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="43:48" pos:end="43:85">// always 8 channels stored SMPTE 331M</comment>

    </block_content>}</block></for>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:7">pkt</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:13">size</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:24">data_ptr</name> <operator pos:start="47:26" pos:end="47:26">-</operator> <name pos:start="47:28" pos:end="47:36"><name pos:start="47:28" pos:end="47:30">pkt</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:36">data</name></name></expr>;</expr_stmt>

    <return pos:start="49:5" pos:end="49:13">return <expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
