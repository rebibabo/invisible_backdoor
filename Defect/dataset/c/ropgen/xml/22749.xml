<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22749.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:23">ioinst_handle_rsch</name><parameter_list pos:start="1:24" pos:end="1:52">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:31">S390CPU</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">cpu</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint64_t</name></type> <name pos:start="1:48" pos:end="1:51">reg1</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:19">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">cssid</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">ssid</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">schid</name></decl>, <decl pos:start="5:29" pos:end="5:29"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:29">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SubchDev</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">sch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:21">= <expr pos:start="9:15" pos:end="9:21"><operator pos:start="9:15" pos:end="9:15">-</operator><name pos:start="9:16" pos:end="9:21">ENODEV</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">cc</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:70">(<expr pos:start="15:9" pos:end="15:69"><call pos:start="15:9" pos:end="15:69"><name pos:start="15:9" pos:end="15:36">ioinst_disassemble_sch_ident</name><argument_list pos:start="15:37" pos:end="15:69">(<argument pos:start="15:38" pos:end="15:41"><expr pos:start="15:38" pos:end="15:41"><name pos:start="15:38" pos:end="15:41">reg1</name></expr></argument>, <argument pos:start="15:44" pos:end="15:45"><expr pos:start="15:44" pos:end="15:45"><operator pos:start="15:44" pos:end="15:44">&amp;</operator><name pos:start="15:45" pos:end="15:45">m</name></expr></argument>, <argument pos:start="15:48" pos:end="15:53"><expr pos:start="15:48" pos:end="15:53"><operator pos:start="15:48" pos:end="15:48">&amp;</operator><name pos:start="15:49" pos:end="15:53">cssid</name></expr></argument>, <argument pos:start="15:56" pos:end="15:60"><expr pos:start="15:56" pos:end="15:60"><operator pos:start="15:56" pos:end="15:56">&amp;</operator><name pos:start="15:57" pos:end="15:60">ssid</name></expr></argument>, <argument pos:start="15:63" pos:end="15:68"><expr pos:start="15:63" pos:end="15:68"><operator pos:start="15:63" pos:end="15:63">&amp;</operator><name pos:start="15:64" pos:end="15:68">schid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:72" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:25">program_interrupt</name><argument_list pos:start="17:26" pos:end="17:52">(<argument pos:start="17:27" pos:end="17:35"><expr pos:start="17:27" pos:end="17:35"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:35"><name pos:start="17:28" pos:end="17:30">cpu</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:35">env</name></name></expr></argument>, <argument pos:start="17:38" pos:end="17:48"><expr pos:start="17:38" pos:end="17:48"><name pos:start="17:38" pos:end="17:48">PGM_OPERAND</name></expr></argument>, <argument pos:start="17:51" pos:end="17:51"><expr pos:start="17:51" pos:end="17:51"><literal type="number" pos:start="17:51" pos:end="17:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:52"><expr pos:start="23:5" pos:end="23:51"><call pos:start="23:5" pos:end="23:51"><name pos:start="23:5" pos:end="23:23">trace_ioinst_sch_id</name><argument_list pos:start="23:24" pos:end="23:51">(<argument pos:start="23:25" pos:end="23:30"><expr pos:start="23:25" pos:end="23:30"><literal type="string" pos:start="23:25" pos:end="23:30">"rsch"</literal></expr></argument>, <argument pos:start="23:33" pos:end="23:37"><expr pos:start="23:33" pos:end="23:37"><name pos:start="23:33" pos:end="23:37">cssid</name></expr></argument>, <argument pos:start="23:40" pos:end="23:43"><expr pos:start="23:40" pos:end="23:43"><name pos:start="23:40" pos:end="23:43">ssid</name></expr></argument>, <argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><name pos:start="23:46" pos:end="23:50">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:7">sch</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:47"><name pos:start="25:11" pos:end="25:24">css_find_subch</name><argument_list pos:start="25:25" pos:end="25:47">(<argument pos:start="25:26" pos:end="25:26"><expr pos:start="25:26" pos:end="25:26"><name pos:start="25:26" pos:end="25:26">m</name></expr></argument>, <argument pos:start="25:29" pos:end="25:33"><expr pos:start="25:29" pos:end="25:33"><name pos:start="25:29" pos:end="25:33">cssid</name></expr></argument>, <argument pos:start="25:36" pos:end="25:39"><expr pos:start="25:36" pos:end="25:39"><name pos:start="25:36" pos:end="25:39">ssid</name></expr></argument>, <argument pos:start="25:42" pos:end="25:46"><expr pos:start="25:42" pos:end="25:46"><name pos:start="25:42" pos:end="25:46">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:38">(<expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:11">sch</name> <operator pos:start="27:13" pos:end="27:14">&amp;&amp;</operator> <call pos:start="27:16" pos:end="27:37"><name pos:start="27:16" pos:end="27:32">css_subch_visible</name><argument_list pos:start="27:33" pos:end="27:37">(<argument pos:start="27:34" pos:end="27:36"><expr pos:start="27:34" pos:end="27:36"><name pos:start="27:34" pos:end="27:36">sch</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:40" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:31">

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:30"><name pos:start="29:15" pos:end="29:25">css_do_rsch</name><argument_list pos:start="29:26" pos:end="29:30">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">sch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="33:5" pos:end="59:5">switch <condition pos:start="33:12" pos:end="33:16">(<expr pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">ret</name></expr>)</condition> <block pos:start="33:18" pos:end="59:5">{<block_content pos:start="35:5" pos:end="57:14">

    <case pos:start="35:5" pos:end="35:17">case <expr pos:start="35:10" pos:end="35:16"><operator pos:start="35:10" pos:end="35:10">-</operator><name pos:start="35:11" pos:end="35:16">ENODEV</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:15"><expr pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">cc</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <literal type="number" pos:start="37:14" pos:end="37:14">3</literal></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:17">case <expr pos:start="41:10" pos:end="41:16"><operator pos:start="41:10" pos:end="41:10">-</operator><name pos:start="41:11" pos:end="41:16">EINVAL</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:15"><expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:10">cc</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <literal type="number" pos:start="43:14" pos:end="43:14">2</literal></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">0</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:15"><expr pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:10">cc</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <default pos:start="53:5" pos:end="53:12">default:</default>

        <expr_stmt pos:start="55:9" pos:end="55:15"><expr pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:10">cc</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">1</literal></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="61:5" pos:end="61:19"><expr pos:start="61:5" pos:end="61:18"><call pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:9">setcc</name><argument_list pos:start="61:10" pos:end="61:18">(<argument pos:start="61:11" pos:end="61:13"><expr pos:start="61:11" pos:end="61:13"><name pos:start="61:11" pos:end="61:13">cpu</name></expr></argument>, <argument pos:start="61:16" pos:end="61:17"><expr pos:start="61:16" pos:end="61:17"><name pos:start="61:16" pos:end="61:17">cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
