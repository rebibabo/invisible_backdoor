<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23966.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:5"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">draw_mandelbrot</name><parameter_list pos:start="1:28" pos:end="1:93">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:43">AVFilterContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:65"><decl pos:start="1:51" pos:end="1:65"><type pos:start="1:51" pos:end="1:65"><name pos:start="1:51" pos:end="1:58">uint32_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:65">color</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:79"><decl pos:start="1:68" pos:end="1:79"><type pos:start="1:68" pos:end="1:79"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:79">linesize</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:92"><decl pos:start="1:82" pos:end="1:92"><type pos:start="1:82" pos:end="1:92"><name pos:start="1:82" pos:end="1:88">int64_t</name></type> <name pos:start="1:90" pos:end="1:92">pts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="251:5">{<block_content pos:start="5:5" pos:end="249:78">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">MBContext</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">mb</name> <init pos:start="5:19" pos:end="5:29">= <expr pos:start="5:21" pos:end="5:29"><name pos:start="5:21" pos:end="5:29"><name pos:start="5:21" pos:end="5:23">ctx</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:29">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">x</name></decl>,<decl pos:start="7:11" pos:end="7:11"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:11" pos:end="7:11">y</name></decl>,<decl pos:start="7:13" pos:end="7:13"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:13">i</name></decl>, <decl pos:start="7:16" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:22">in_cidx</name><init pos:start="7:23" pos:end="7:24">=<expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>, <decl pos:start="7:27" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:35">next_cidx</name><init pos:start="7:36" pos:end="7:37">=<expr pos:start="7:37" pos:end="7:37"><literal type="number" pos:start="7:37" pos:end="7:37">0</literal></expr></init></decl>, <decl pos:start="7:40" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:47">tmp_cidx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:86"><decl pos:start="9:5" pos:end="9:85"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:16">scale</name><init pos:start="9:17" pos:end="9:85">= <expr pos:start="9:19" pos:end="9:85"><name pos:start="9:19" pos:end="9:33"><name pos:start="9:19" pos:end="9:20">mb</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:33">start_scale</name></name><operator pos:start="9:34" pos:end="9:34">*</operator><call pos:start="9:35" pos:end="9:85"><name pos:start="9:35" pos:end="9:37">pow</name><argument_list pos:start="9:38" pos:end="9:85">(<argument pos:start="9:39" pos:end="9:67"><expr pos:start="9:39" pos:end="9:67"><name pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:40">mb</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:51">end_scale</name></name><operator pos:start="9:52" pos:end="9:52">/</operator><name pos:start="9:53" pos:end="9:67"><name pos:start="9:53" pos:end="9:54">mb</name><operator pos:start="9:55" pos:end="9:56">-&gt;</operator><name pos:start="9:57" pos:end="9:67">start_scale</name></name></expr></argument>, <argument pos:start="9:70" pos:end="9:84"><expr pos:start="9:70" pos:end="9:84"><name pos:start="9:70" pos:end="9:72">pts</name><operator pos:start="9:73" pos:end="9:73">/</operator><name pos:start="9:74" pos:end="9:84"><name pos:start="9:74" pos:end="9:75">mb</name><operator pos:start="9:76" pos:end="9:77">-&gt;</operator><name pos:start="9:78" pos:end="9:84">end_pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">use_zyklus</name><init pos:start="11:19" pos:end="11:20">=<expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:88"><expr pos:start="13:5" pos:end="13:87"><call pos:start="13:5" pos:end="13:87"><name pos:start="13:5" pos:end="13:19">fill_from_cache</name><argument_list pos:start="13:20" pos:end="13:87">(<argument pos:start="13:21" pos:end="13:23"><expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">ctx</name></expr></argument>, <argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></argument>, <argument pos:start="13:32" pos:end="13:39"><expr pos:start="13:32" pos:end="13:39"><operator pos:start="13:32" pos:end="13:32">&amp;</operator><name pos:start="13:33" pos:end="13:39">in_cidx</name></expr></argument>, <argument pos:start="13:42" pos:end="13:45"><expr pos:start="13:42" pos:end="13:45"><name pos:start="13:42" pos:end="13:45">NULL</name></expr></argument>, <argument pos:start="13:48" pos:end="13:79"><expr pos:start="13:48" pos:end="13:79"><name pos:start="13:48" pos:end="13:58"><name pos:start="13:48" pos:end="13:49">mb</name><operator pos:start="13:50" pos:end="13:51">-&gt;</operator><name pos:start="13:52" pos:end="13:58">start_y</name></name><operator pos:start="13:59" pos:end="13:59">+</operator><name pos:start="13:60" pos:end="13:64">scale</name><operator pos:start="13:65" pos:end="13:65">*</operator><operator pos:start="13:66" pos:end="13:66">(</operator><operator pos:start="13:67" pos:end="13:67">-</operator><name pos:start="13:68" pos:end="13:72"><name pos:start="13:68" pos:end="13:69">mb</name><operator pos:start="13:70" pos:end="13:71">-&gt;</operator><name pos:start="13:72" pos:end="13:72">h</name></name><operator pos:start="13:73" pos:end="13:73">/</operator><literal type="number" pos:start="13:74" pos:end="13:75">2</literal><operator pos:start="13:75" pos:end="13:75">-</operator><literal type="number" pos:start="13:76" pos:end="13:78">0.5</literal><operator pos:start="13:79" pos:end="13:79">)</operator></expr></argument>, <argument pos:start="13:82" pos:end="13:86"><expr pos:start="13:82" pos:end="13:86"><name pos:start="13:82" pos:end="13:86">scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:12">tmp_cidx</name><operator pos:start="15:13" pos:end="15:13">=</operator> <name pos:start="15:15" pos:end="15:21">in_cidx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><call pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:10">memset</name><argument_list pos:start="17:11" pos:end="17:42">(<argument pos:start="17:12" pos:end="17:16"><expr pos:start="17:12" pos:end="17:16"><name pos:start="17:12" pos:end="17:16">color</name></expr></argument>, <argument pos:start="17:19" pos:end="17:19"><expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr></argument>, <argument pos:start="17:22" pos:end="17:41"><expr pos:start="17:22" pos:end="17:41"><sizeof pos:start="17:22" pos:end="17:35">sizeof<argument_list pos:start="17:28" pos:end="17:35">(<argument pos:start="17:29" pos:end="17:34"><expr pos:start="17:29" pos:end="17:34"><operator pos:start="17:29" pos:end="17:29">*</operator><name pos:start="17:30" pos:end="17:34">color</name></expr></argument>)</argument_list></sizeof><operator pos:start="17:36" pos:end="17:36">*</operator><name pos:start="17:37" pos:end="17:41"><name pos:start="17:37" pos:end="17:38">mb</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:41">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="247:9">for<control pos:start="19:8" pos:end="19:26">(<init pos:start="19:9" pos:end="19:12"><expr pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:9">y</name><operator pos:start="19:10" pos:end="19:10">=</operator><literal type="number" pos:start="19:11" pos:end="19:11">0</literal></expr>;</init> <condition pos:start="19:14" pos:end="19:21"><expr pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:14">y</name><operator pos:start="19:15" pos:end="19:15">&lt;</operator><name pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:17">mb</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:20">h</name></name></expr>;</condition> <incr pos:start="19:23" pos:end="19:25"><expr pos:start="19:23" pos:end="19:25"><name pos:start="19:23" pos:end="19:23">y</name><operator pos:start="19:24" pos:end="19:25">++</operator></expr></incr>)</control><block pos:start="19:27" pos:end="247:9">{<block_content pos:start="21:9" pos:end="245:13">

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:14">y1</name><init pos:start="21:15" pos:end="21:19">= <expr pos:start="21:17" pos:end="21:19"><name pos:start="21:17" pos:end="21:17">y</name><operator pos:start="21:18" pos:end="21:18">+</operator><literal type="number" pos:start="21:19" pos:end="21:19">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:54"><decl pos:start="23:9" pos:end="23:53"><type pos:start="23:9" pos:end="23:20"><specifier pos:start="23:9" pos:end="23:13">const</specifier> <name pos:start="23:15" pos:end="23:20">double</name></type> <name pos:start="23:22" pos:end="23:23">ci</name><init pos:start="23:24" pos:end="23:53">=<expr pos:start="23:25" pos:end="23:53"><name pos:start="23:25" pos:end="23:35"><name pos:start="23:25" pos:end="23:26">mb</name><operator pos:start="23:27" pos:end="23:28">-&gt;</operator><name pos:start="23:29" pos:end="23:35">start_y</name></name><operator pos:start="23:36" pos:end="23:36">+</operator><name pos:start="23:37" pos:end="23:41">scale</name><operator pos:start="23:42" pos:end="23:42">*</operator><operator pos:start="23:43" pos:end="23:43">(</operator><name pos:start="23:44" pos:end="23:44">y</name><operator pos:start="23:45" pos:end="23:45">-</operator><name pos:start="23:46" pos:end="23:50"><name pos:start="23:46" pos:end="23:47">mb</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:50">h</name></name><operator pos:start="23:51" pos:end="23:51">/</operator><literal type="number" pos:start="23:52" pos:end="23:52">2</literal><operator pos:start="23:53" pos:end="23:53">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:68"><expr pos:start="25:9" pos:end="25:67"><call pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:23">fill_from_cache</name><argument_list pos:start="25:24" pos:end="25:67">(<argument pos:start="25:25" pos:end="25:27"><expr pos:start="25:25" pos:end="25:27"><name pos:start="25:25" pos:end="25:27">ctx</name></expr></argument>, <argument pos:start="25:30" pos:end="25:33"><expr pos:start="25:30" pos:end="25:33"><name pos:start="25:30" pos:end="25:33">NULL</name></expr></argument>, <argument pos:start="25:36" pos:end="25:43"><expr pos:start="25:36" pos:end="25:43"><operator pos:start="25:36" pos:end="25:36">&amp;</operator><name pos:start="25:37" pos:end="25:43">in_cidx</name></expr></argument>, <argument pos:start="25:46" pos:end="25:55"><expr pos:start="25:46" pos:end="25:55"><operator pos:start="25:46" pos:end="25:46">&amp;</operator><name pos:start="25:47" pos:end="25:55">next_cidx</name></expr></argument>, <argument pos:start="25:58" pos:end="25:59"><expr pos:start="25:58" pos:end="25:59"><name pos:start="25:58" pos:end="25:59">ci</name></expr></argument>, <argument pos:start="25:62" pos:end="25:66"><expr pos:start="25:62" pos:end="25:66"><name pos:start="25:62" pos:end="25:66">scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if<condition pos:start="27:11" pos:end="27:20">(<expr pos:start="27:12" pos:end="27:19"><name pos:start="27:12" pos:end="27:13">y1</name><operator pos:start="27:14" pos:end="27:14">&lt;</operator><name pos:start="27:15" pos:end="27:19"><name pos:start="27:15" pos:end="27:16">mb</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:19">h</name></name></expr>)</condition><block pos:start="27:21" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:92">

            <expr_stmt pos:start="29:13" pos:end="29:63"><expr pos:start="29:13" pos:end="29:62"><call pos:start="29:13" pos:end="29:62"><name pos:start="29:13" pos:end="29:18">memset</name><argument_list pos:start="29:19" pos:end="29:62">(<argument pos:start="29:20" pos:end="29:36"><expr pos:start="29:20" pos:end="29:36"><name pos:start="29:20" pos:end="29:24">color</name><operator pos:start="29:25" pos:end="29:25">+</operator><name pos:start="29:26" pos:end="29:33">linesize</name><operator pos:start="29:34" pos:end="29:34">*</operator><name pos:start="29:35" pos:end="29:36">y1</name></expr></argument>, <argument pos:start="29:39" pos:end="29:39"><expr pos:start="29:39" pos:end="29:39"><literal type="number" pos:start="29:39" pos:end="29:39">0</literal></expr></argument>, <argument pos:start="29:42" pos:end="29:61"><expr pos:start="29:42" pos:end="29:61"><sizeof pos:start="29:42" pos:end="29:55">sizeof<argument_list pos:start="29:48" pos:end="29:55">(<argument pos:start="29:49" pos:end="29:54"><expr pos:start="29:49" pos:end="29:54"><operator pos:start="29:49" pos:end="29:49">*</operator><name pos:start="29:50" pos:end="29:54">color</name></expr></argument>)</argument_list></sizeof><operator pos:start="29:56" pos:end="29:56">*</operator><name pos:start="29:57" pos:end="29:61"><name pos:start="29:57" pos:end="29:58">mb</name><operator pos:start="29:59" pos:end="29:60">-&gt;</operator><name pos:start="29:61" pos:end="29:61">w</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:92"><expr pos:start="31:13" pos:end="31:91"><call pos:start="31:13" pos:end="31:91"><name pos:start="31:13" pos:end="31:27">fill_from_cache</name><argument_list pos:start="31:28" pos:end="31:91">(<argument pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><name pos:start="31:29" pos:end="31:31">ctx</name></expr></argument>, <argument pos:start="31:34" pos:end="31:50"><expr pos:start="31:34" pos:end="31:50"><name pos:start="31:34" pos:end="31:38">color</name><operator pos:start="31:39" pos:end="31:39">+</operator><name pos:start="31:40" pos:end="31:47">linesize</name><operator pos:start="31:48" pos:end="31:48">*</operator><name pos:start="31:49" pos:end="31:50">y1</name></expr></argument>, <argument pos:start="31:53" pos:end="31:61"><expr pos:start="31:53" pos:end="31:61"><operator pos:start="31:53" pos:end="31:53">&amp;</operator><name pos:start="31:54" pos:end="31:61">tmp_cidx</name></expr></argument>, <argument pos:start="31:64" pos:end="31:67"><expr pos:start="31:64" pos:end="31:67"><name pos:start="31:64" pos:end="31:67">NULL</name></expr></argument>, <argument pos:start="31:70" pos:end="31:83"><expr pos:start="31:70" pos:end="31:83"><name pos:start="31:70" pos:end="31:71">ci</name> <operator pos:start="31:73" pos:end="31:73">+</operator> <literal type="number" pos:start="31:75" pos:end="31:75">3</literal><operator pos:start="31:76" pos:end="31:76">*</operator><name pos:start="31:77" pos:end="31:81">scale</name><operator pos:start="31:82" pos:end="31:82">/</operator><literal type="number" pos:start="31:83" pos:end="31:83">2</literal></expr></argument>, <argument pos:start="31:86" pos:end="31:90"><expr pos:start="31:86" pos:end="31:90"><name pos:start="31:86" pos:end="31:90">scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="37:9" pos:end="181:13">for<control pos:start="37:12" pos:end="37:30">(<init pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:13">x</name><operator pos:start="37:14" pos:end="37:14">=</operator><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>;</init> <condition pos:start="37:18" pos:end="37:25"><expr pos:start="37:18" pos:end="37:24"><name pos:start="37:18" pos:end="37:18">x</name><operator pos:start="37:19" pos:end="37:19">&lt;</operator><name pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:21">mb</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:24">w</name></name></expr>;</condition> <incr pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:27">x</name><operator pos:start="37:28" pos:end="37:29">++</operator></expr></incr>)</control><block pos:start="37:31" pos:end="181:13">{<block_content pos:start="39:13" pos:end="179:17">

            <decl_stmt pos:start="39:13" pos:end="39:26"><decl pos:start="39:13" pos:end="39:25"><type pos:start="39:13" pos:end="39:17"><name pos:start="39:13" pos:end="39:17">float</name></type> <name pos:start="39:19" pos:end="39:25">epsilon</name></decl>;</decl_stmt>

            <decl_stmt pos:start="41:13" pos:end="41:58"><decl pos:start="41:13" pos:end="41:57"><type pos:start="41:13" pos:end="41:24"><specifier pos:start="41:13" pos:end="41:17">const</specifier> <name pos:start="41:19" pos:end="41:24">double</name></type> <name pos:start="41:26" pos:end="41:27">cr</name><init pos:start="41:28" pos:end="41:57">=<expr pos:start="41:29" pos:end="41:57"><name pos:start="41:29" pos:end="41:39"><name pos:start="41:29" pos:end="41:30">mb</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:39">start_x</name></name><operator pos:start="41:40" pos:end="41:40">+</operator><name pos:start="41:41" pos:end="41:45">scale</name><operator pos:start="41:46" pos:end="41:46">*</operator><operator pos:start="41:47" pos:end="41:47">(</operator><name pos:start="41:48" pos:end="41:48">x</name><operator pos:start="41:49" pos:end="41:49">-</operator><name pos:start="41:50" pos:end="41:54"><name pos:start="41:50" pos:end="41:51">mb</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:54">w</name></name><operator pos:start="41:55" pos:end="41:55">/</operator><literal type="number" pos:start="41:56" pos:end="41:56">2</literal><operator pos:start="41:57" pos:end="41:57">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="43:13" pos:end="43:25"><decl pos:start="43:13" pos:end="43:24"><type pos:start="43:13" pos:end="43:18"><name pos:start="43:13" pos:end="43:18">double</name></type> <name pos:start="43:20" pos:end="43:21">zr</name><init pos:start="43:22" pos:end="43:24">=<expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">cr</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="45:13" pos:end="45:25"><decl pos:start="45:13" pos:end="45:24"><type pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:18">double</name></type> <name pos:start="45:20" pos:end="45:21">zi</name><init pos:start="45:22" pos:end="45:24">=<expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">ci</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="47:13" pos:end="47:25"><decl pos:start="47:13" pos:end="47:24"><type pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:20">uint32_t</name></type> <name pos:start="47:22" pos:end="47:22">c</name><init pos:start="47:23" pos:end="47:24">=<expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="49:13" pos:end="49:54"><decl pos:start="49:13" pos:end="49:53"><type pos:start="49:13" pos:end="49:18"><name pos:start="49:13" pos:end="49:18">double</name></type> <name pos:start="49:20" pos:end="49:21">dv</name><init pos:start="49:22" pos:end="49:53">= <expr pos:start="49:24" pos:end="49:53"><name pos:start="49:24" pos:end="49:33"><name pos:start="49:24" pos:end="49:25">mb</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:33">dither</name></name> <operator pos:start="49:35" pos:end="49:35">/</operator> <operator pos:start="49:37" pos:end="49:37">(</operator><name pos:start="49:38" pos:end="49:43">double</name><operator pos:start="49:44" pos:end="49:44">)</operator><operator pos:start="49:45" pos:end="49:45">(</operator><literal type="number" pos:start="49:46" pos:end="49:48">1LL</literal><operator pos:start="49:49" pos:end="49:50">&lt;&lt;</operator><literal type="number" pos:start="49:51" pos:end="49:52">32</literal><operator pos:start="49:53" pos:end="49:53">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:54"><expr pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:14">mb</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:22">dither</name></name><operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:34"><name pos:start="51:25" pos:end="51:26">mb</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:34">dither</name></name><operator pos:start="51:35" pos:end="51:35">*</operator><literal type="number" pos:start="51:36" pos:end="51:43">1664525</literal><operator pos:start="51:43" pos:end="51:43">+</operator><literal type="number" pos:start="51:44" pos:end="51:53">1013904223</literal></expr>;</expr_stmt>



            <if_stmt pos:start="55:13" pos:end="57:25"><if pos:start="55:13" pos:end="57:25">if<condition pos:start="55:15" pos:end="55:50">(<expr pos:start="55:16" pos:end="55:49"><name pos:start="55:16" pos:end="55:36"><name pos:start="55:16" pos:end="55:20">color</name><index pos:start="55:21" pos:end="55:36">[<expr pos:start="55:22" pos:end="55:35"><name pos:start="55:22" pos:end="55:22">x</name> <operator pos:start="55:24" pos:end="55:24">+</operator> <name pos:start="55:26" pos:end="55:26">y</name><operator pos:start="55:27" pos:end="55:27">*</operator><name pos:start="55:28" pos:end="55:35">linesize</name></expr>]</index></name> <operator pos:start="55:38" pos:end="55:38">&amp;</operator> <literal type="number" pos:start="55:40" pos:end="55:49">0xFF000000</literal></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:25"><block_content pos:start="57:17" pos:end="57:25">

                <continue pos:start="57:17" pos:end="57:25">continue;</continue></block_content></block></if></if_stmt>

            <if_stmt pos:start="59:13" pos:end="73:13"><if pos:start="59:13" pos:end="73:13">if<condition pos:start="59:15" pos:end="59:51">(<expr pos:start="59:16" pos:end="59:50"><call pos:start="59:16" pos:end="59:50"><name pos:start="59:16" pos:end="59:23">interpol</name><argument_list pos:start="59:24" pos:end="59:50">(<argument pos:start="59:25" pos:end="59:26"><expr pos:start="59:25" pos:end="59:26"><name pos:start="59:25" pos:end="59:26">mb</name></expr></argument>, <argument pos:start="59:29" pos:end="59:33"><expr pos:start="59:29" pos:end="59:33"><name pos:start="59:29" pos:end="59:33">color</name></expr></argument>, <argument pos:start="59:36" pos:end="59:36"><expr pos:start="59:36" pos:end="59:36"><name pos:start="59:36" pos:end="59:36">x</name></expr></argument>, <argument pos:start="59:39" pos:end="59:39"><expr pos:start="59:39" pos:end="59:39"><name pos:start="59:39" pos:end="59:39">y</name></expr></argument>, <argument pos:start="59:42" pos:end="59:49"><expr pos:start="59:42" pos:end="59:49"><name pos:start="59:42" pos:end="59:49">linesize</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="59:52" pos:end="73:13">{<block_content pos:start="61:17" pos:end="71:25">

                <if_stmt pos:start="61:17" pos:end="69:17"><if pos:start="61:17" pos:end="69:17">if<condition pos:start="61:19" pos:end="61:51">(<expr pos:start="61:20" pos:end="61:50"><name pos:start="61:20" pos:end="61:28">next_cidx</name> <operator pos:start="61:30" pos:end="61:30">&lt;</operator> <name pos:start="61:32" pos:end="61:50"><name pos:start="61:32" pos:end="61:33">mb</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:50">cache_allocated</name></name></expr>)</condition><block pos:start="61:52" pos:end="69:17">{<block_content pos:start="63:21" pos:end="67:76">

                    <expr_stmt pos:start="63:21" pos:end="63:57"><expr pos:start="63:21" pos:end="63:56"><name pos:start="63:21" pos:end="63:47"><name pos:start="63:21" pos:end="63:22">mb</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:34">next_cache</name><index pos:start="63:35" pos:end="63:47">[<expr pos:start="63:36" pos:end="63:44"><name pos:start="63:36" pos:end="63:44">next_cidx</name></expr>  ]</index></name><operator pos:start="63:48" pos:end="63:48">.</operator><name pos:start="63:49" pos:end="63:52"><name pos:start="63:49" pos:end="63:49">p</name><index pos:start="63:50" pos:end="63:52">[<expr pos:start="63:51" pos:end="63:51"><literal type="number" pos:start="63:51" pos:end="63:51">0</literal></expr>]</index></name><operator pos:start="63:53" pos:end="63:53">=</operator> <name pos:start="63:55" pos:end="63:56">cr</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:57"><expr pos:start="65:21" pos:end="65:56"><name pos:start="65:21" pos:end="65:47"><name pos:start="65:21" pos:end="65:22">mb</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:34">next_cache</name><index pos:start="65:35" pos:end="65:47">[<expr pos:start="65:36" pos:end="65:44"><name pos:start="65:36" pos:end="65:44">next_cidx</name></expr>  ]</index></name><operator pos:start="65:48" pos:end="65:48">.</operator><name pos:start="65:49" pos:end="65:52"><name pos:start="65:49" pos:end="65:49">p</name><index pos:start="65:50" pos:end="65:52">[<expr pos:start="65:51" pos:end="65:51"><literal type="number" pos:start="65:51" pos:end="65:51">1</literal></expr>]</index></name><operator pos:start="65:53" pos:end="65:53">=</operator> <name pos:start="65:55" pos:end="65:56">ci</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:76"><expr pos:start="67:21" pos:end="67:75"><name pos:start="67:21" pos:end="67:47"><name pos:start="67:21" pos:end="67:22">mb</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:34">next_cache</name><index pos:start="67:35" pos:end="67:47">[<expr pos:start="67:36" pos:end="67:46"><name pos:start="67:36" pos:end="67:44">next_cidx</name><operator pos:start="67:45" pos:end="67:46">++</operator></expr>]</index></name><operator pos:start="67:48" pos:end="67:48">.</operator><name pos:start="67:49" pos:end="67:51">val</name> <operator pos:start="67:53" pos:end="67:53">=</operator> <name pos:start="67:55" pos:end="67:75"><name pos:start="67:55" pos:end="67:59">color</name><index pos:start="67:60" pos:end="67:75">[<expr pos:start="67:61" pos:end="67:74"><name pos:start="67:61" pos:end="67:61">x</name> <operator pos:start="67:63" pos:end="67:63">+</operator> <name pos:start="67:65" pos:end="67:65">y</name><operator pos:start="67:66" pos:end="67:66">*</operator><name pos:start="67:67" pos:end="67:74">linesize</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <continue pos:start="71:17" pos:end="71:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:91"><expr pos:start="77:13" pos:end="77:90"><name pos:start="77:13" pos:end="77:22">use_zyklus</name><operator pos:start="77:23" pos:end="77:23">=</operator> <operator pos:start="77:25" pos:end="77:25">(</operator><name pos:start="77:26" pos:end="77:26">x</name><operator pos:start="77:27" pos:end="77:28">==</operator><literal type="number" pos:start="77:29" pos:end="77:29">0</literal> <operator pos:start="77:31" pos:end="77:32">||</operator> <name pos:start="77:34" pos:end="77:42"><name pos:start="77:34" pos:end="77:35">mb</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:42">inner</name></name><operator pos:start="77:43" pos:end="77:44">!=</operator><name pos:start="77:45" pos:end="77:49">BLACK</name> <operator pos:start="77:51" pos:end="77:52">||</operator><name pos:start="77:53" pos:end="77:75"><name pos:start="77:53" pos:end="77:57">color</name><index pos:start="77:58" pos:end="77:75">[<expr pos:start="77:59" pos:end="77:74"><name pos:start="77:59" pos:end="77:59">x</name><operator pos:start="77:60" pos:end="77:60">-</operator><literal type="number" pos:start="77:61" pos:end="77:63">1</literal> <operator pos:start="77:63" pos:end="77:63">+</operator> <name pos:start="77:65" pos:end="77:65">y</name><operator pos:start="77:66" pos:end="77:66">*</operator><name pos:start="77:67" pos:end="77:74">linesize</name></expr>]</index></name> <operator pos:start="77:77" pos:end="77:78">==</operator> <literal type="number" pos:start="77:80" pos:end="77:89">0xFF000000</literal><operator pos:start="77:90" pos:end="77:90">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="116:0"><if pos:start="79:13" pos:end="116:0">if<condition pos:start="79:15" pos:end="79:26">(<expr pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:25">use_zyklus</name></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="116:0"><block_content pos:start="81:17" pos:end="116:0">

                <expr_stmt pos:start="81:17" pos:end="116:0"><expr pos:start="81:17" pos:end="81:76"><name pos:start="81:17" pos:end="81:23">epsilon</name><operator pos:start="81:24" pos:end="81:24">=</operator> <name pos:start="81:26" pos:end="81:30">scale</name><operator pos:start="81:31" pos:end="81:31">*</operator><literal type="number" pos:start="81:32" pos:end="81:32">1</literal><operator pos:start="81:33" pos:end="81:33">*</operator><call pos:start="81:34" pos:end="81:70"><name pos:start="81:34" pos:end="81:37">sqrt</name><argument_list pos:start="81:38" pos:end="81:70">(<argument pos:start="81:39" pos:end="81:69"><expr pos:start="81:39" pos:end="81:69"><call pos:start="81:39" pos:end="81:52"><name pos:start="81:39" pos:end="81:41">SQR</name><argument_list pos:start="81:42" pos:end="81:52">(<argument pos:start="81:43" pos:end="81:51"><expr pos:start="81:43" pos:end="81:51"><name pos:start="81:43" pos:end="81:43">x</name><operator pos:start="81:44" pos:end="81:44">-</operator><name pos:start="81:45" pos:end="81:49"><name pos:start="81:45" pos:end="81:46">mb</name><operator pos:start="81:47" pos:end="81:48">-&gt;</operator><name pos:start="81:49" pos:end="81:49">w</name></name><operator pos:start="81:50" pos:end="81:50">/</operator><literal type="number" pos:start="81:51" pos:end="81:51">2</literal></expr></argument>)</argument_list></call> <operator pos:start="81:54" pos:end="81:54">+</operator> <call pos:start="81:56" pos:end="81:69"><name pos:start="81:56" pos:end="81:58">SQR</name><argument_list pos:start="81:59" pos:end="81:69">(<argument pos:start="81:60" pos:end="81:68"><expr pos:start="81:60" pos:end="81:68"><name pos:start="81:60" pos:end="81:60">y</name><operator pos:start="81:61" pos:end="81:61">-</operator><name pos:start="81:62" pos:end="81:66"><name pos:start="81:62" pos:end="81:63">mb</name><operator pos:start="81:64" pos:end="81:65">-&gt;</operator><name pos:start="81:66" pos:end="81:66">h</name></name><operator pos:start="81:67" pos:end="81:67">/</operator><literal type="number" pos:start="81:68" pos:end="81:68">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="81:71" pos:end="81:71">/</operator><name pos:start="81:72" pos:end="81:76"><name pos:start="81:72" pos:end="81:73">mb</name><operator pos:start="81:74" pos:end="81:75">-&gt;</operator><name pos:start="81:76" pos:end="81:76">w</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="85:1" pos:end="89:33">#<cpp:directive pos:start="85:2" pos:end="85:7">define</cpp:directive> <cpp:macro pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:14">Z_Z2_C</name><parameter_list pos:start="85:15" pos:end="85:33">(<parameter pos:start="85:16" pos:end="85:19"><type pos:start="85:16" pos:end="85:19"><name pos:start="85:16" pos:end="85:19">outr</name></type></parameter>,<parameter pos:start="85:21" pos:end="85:24"><type pos:start="85:21" pos:end="85:24"><name pos:start="85:21" pos:end="85:24">outi</name></type></parameter>,<parameter pos:start="85:26" pos:end="85:28"><type pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">inr</name></type></parameter>,<parameter pos:start="85:30" pos:end="85:32"><type pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:32">ini</name></type></parameter>)</parameter_list></cpp:macro>\

            <cpp:value pos:start="87:13" pos:end="89:33">outr= inr*inr - ini*ini + cr;\

            outi= 2*inr*ini + ci;</cpp:value></cpp:define>



<cpp:define pos:start="93:1" pos:end="115:43">#<cpp:directive pos:start="93:2" pos:end="93:7">define</cpp:directive> <cpp:macro pos:start="93:9" pos:end="93:43"><name pos:start="93:9" pos:end="93:21">Z_Z2_C_ZYKLUS</name><parameter_list pos:start="93:22" pos:end="93:43">(<parameter pos:start="93:23" pos:end="93:26"><type pos:start="93:23" pos:end="93:26"><name pos:start="93:23" pos:end="93:26">outr</name></type></parameter>,<parameter pos:start="93:28" pos:end="93:31"><type pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">outi</name></type></parameter>,<parameter pos:start="93:33" pos:end="93:35"><type pos:start="93:33" pos:end="93:35"><name pos:start="93:33" pos:end="93:35">inr</name></type></parameter>,<parameter pos:start="93:37" pos:end="93:39"><type pos:start="93:37" pos:end="93:39"><name pos:start="93:37" pos:end="93:39">ini</name></type></parameter>, <parameter pos:start="93:42" pos:end="93:42"><type pos:start="93:42" pos:end="93:42"><name pos:start="93:42" pos:end="93:42">Z</name></type></parameter>)</parameter_list></cpp:macro>\

            <cpp:value pos:start="95:13" pos:end="115:43">Z_Z2_C(outr,outi,inr,ini)\

            if(use_zyklus){\

                if(Z &amp;&amp; fabs(mb-&gt;zyklus[i&gt;&gt;1][0]-outr)+fabs(mb-&gt;zyklus[i&gt;&gt;1][1]-outi) &lt;= epsilon)\

                    break;\

            }\

            mb-&gt;zyklus[i][0]= outr;\

            mb-&gt;zyklus[i][1]= outi;\







            for(i=0; i&lt;mb-&gt;maxiter-8; i++){</cpp:value></cpp:define>

                <decl_stmt pos:start="117:17" pos:end="117:25"><decl pos:start="117:17" pos:end="117:24"><type pos:start="117:17" pos:end="117:22"><name pos:start="117:17" pos:end="117:22">double</name></type> <name pos:start="117:24" pos:end="117:24">t</name></decl>;</decl_stmt>

                <macro pos:start="119:17" pos:end="119:47"><name pos:start="119:17" pos:end="119:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="119:30" pos:end="119:47">(<argument pos:start="119:31" pos:end="119:31">t</argument>, <argument pos:start="119:34" pos:end="119:35">zi</argument>, <argument pos:start="119:38" pos:end="119:39">zr</argument>, <argument pos:start="119:42" pos:end="119:43">zi</argument>, <argument pos:start="119:46" pos:end="119:46"><literal type="number" pos:start="119:46" pos:end="119:46">0</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="121:17" pos:end="121:20"><expr pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:17">i</name><operator pos:start="121:18" pos:end="121:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="123:17" pos:end="123:47"><name pos:start="123:17" pos:end="123:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="123:30" pos:end="123:47">(<argument pos:start="123:31" pos:end="123:32">zr</argument>, <argument pos:start="123:35" pos:end="123:36">zi</argument>, <argument pos:start="123:39" pos:end="123:39">t</argument>, <argument pos:start="123:42" pos:end="123:43">zi</argument>, <argument pos:start="123:46" pos:end="123:46"><literal type="number" pos:start="123:46" pos:end="123:46">1</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="125:17" pos:end="125:20"><expr pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:17">i</name><operator pos:start="125:18" pos:end="125:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="127:17" pos:end="127:47"><name pos:start="127:17" pos:end="127:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="127:30" pos:end="127:47">(<argument pos:start="127:31" pos:end="127:31">t</argument>, <argument pos:start="127:34" pos:end="127:35">zi</argument>, <argument pos:start="127:38" pos:end="127:39">zr</argument>, <argument pos:start="127:42" pos:end="127:43">zi</argument>, <argument pos:start="127:46" pos:end="127:46"><literal type="number" pos:start="127:46" pos:end="127:46">0</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="129:17" pos:end="129:20"><expr pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:17">i</name><operator pos:start="129:18" pos:end="129:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="131:17" pos:end="131:47"><name pos:start="131:17" pos:end="131:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="131:30" pos:end="131:47">(<argument pos:start="131:31" pos:end="131:32">zr</argument>, <argument pos:start="131:35" pos:end="131:36">zi</argument>, <argument pos:start="131:39" pos:end="131:39">t</argument>, <argument pos:start="131:42" pos:end="131:43">zi</argument>, <argument pos:start="131:46" pos:end="131:46"><literal type="number" pos:start="131:46" pos:end="131:46">1</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="133:17" pos:end="133:20"><expr pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:17">i</name><operator pos:start="133:18" pos:end="133:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="135:17" pos:end="135:47"><name pos:start="135:17" pos:end="135:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="135:30" pos:end="135:47">(<argument pos:start="135:31" pos:end="135:31">t</argument>, <argument pos:start="135:34" pos:end="135:35">zi</argument>, <argument pos:start="135:38" pos:end="135:39">zr</argument>, <argument pos:start="135:42" pos:end="135:43">zi</argument>, <argument pos:start="135:46" pos:end="135:46"><literal type="number" pos:start="135:46" pos:end="135:46">0</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="137:17" pos:end="137:20"><expr pos:start="137:17" pos:end="137:19"><name pos:start="137:17" pos:end="137:17">i</name><operator pos:start="137:18" pos:end="137:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="139:17" pos:end="139:47"><name pos:start="139:17" pos:end="139:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="139:30" pos:end="139:47">(<argument pos:start="139:31" pos:end="139:32">zr</argument>, <argument pos:start="139:35" pos:end="139:36">zi</argument>, <argument pos:start="139:39" pos:end="139:39">t</argument>, <argument pos:start="139:42" pos:end="139:43">zi</argument>, <argument pos:start="139:46" pos:end="139:46"><literal type="number" pos:start="139:46" pos:end="139:46">1</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="141:17" pos:end="141:20"><expr pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:17">i</name><operator pos:start="141:18" pos:end="141:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="143:17" pos:end="143:47"><name pos:start="143:17" pos:end="143:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="143:30" pos:end="143:47">(<argument pos:start="143:31" pos:end="143:31">t</argument>, <argument pos:start="143:34" pos:end="143:35">zi</argument>, <argument pos:start="143:38" pos:end="143:39">zr</argument>, <argument pos:start="143:42" pos:end="143:43">zi</argument>, <argument pos:start="143:46" pos:end="143:46"><literal type="number" pos:start="143:46" pos:end="143:46">0</literal></argument>)</argument_list></macro>

                <expr_stmt pos:start="145:17" pos:end="145:20"><expr pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:17">i</name><operator pos:start="145:18" pos:end="145:19">++</operator></expr>;</expr_stmt>

                <macro pos:start="147:17" pos:end="147:47"><name pos:start="147:17" pos:end="147:29">Z_Z2_C_ZYKLUS</name><argument_list pos:start="147:30" pos:end="147:47">(<argument pos:start="147:31" pos:end="147:32">zr</argument>, <argument pos:start="147:35" pos:end="147:36">zi</argument>, <argument pos:start="147:39" pos:end="147:39">t</argument>, <argument pos:start="147:42" pos:end="147:43">zi</argument>, <argument pos:start="147:46" pos:end="147:46"><literal type="number" pos:start="147:46" pos:end="147:46">1</literal></argument>)</argument_list></macro>

                <if_stmt pos:start="149:17" pos:end="179:17"><if pos:start="149:17" pos:end="179:17">if<condition pos:start="149:19" pos:end="149:47">(<expr pos:start="149:20" pos:end="149:46"><name pos:start="149:20" pos:end="149:21">zr</name><operator pos:start="149:22" pos:end="149:22">*</operator><name pos:start="149:23" pos:end="149:24">zr</name> <operator pos:start="149:26" pos:end="149:26">+</operator> <name pos:start="149:28" pos:end="149:29">zi</name><operator pos:start="149:30" pos:end="149:30">*</operator><name pos:start="149:31" pos:end="149:32">zi</name> <operator pos:start="149:34" pos:end="149:34">&gt;</operator> <name pos:start="149:36" pos:end="149:46"><name pos:start="149:36" pos:end="149:37">mb</name><operator pos:start="149:38" pos:end="149:39">-&gt;</operator><name pos:start="149:40" pos:end="149:46">bailout</name></name></expr>)</condition><block pos:start="149:48" pos:end="179:17">{<block_content pos:start="151:21" pos:end="177:26">

                    <expr_stmt pos:start="151:21" pos:end="151:36"><expr pos:start="151:21" pos:end="151:35"><name pos:start="151:21" pos:end="151:21">i</name><operator pos:start="151:22" pos:end="151:23">-=</operator> <call pos:start="151:25" pos:end="151:35"><name pos:start="151:25" pos:end="151:29">FFMIN</name><argument_list pos:start="151:30" pos:end="151:35">(<argument pos:start="151:31" pos:end="151:31"><expr pos:start="151:31" pos:end="151:31"><literal type="number" pos:start="151:31" pos:end="151:31">7</literal></expr></argument>, <argument pos:start="151:34" pos:end="151:34"><expr pos:start="151:34" pos:end="151:34"><name pos:start="151:34" pos:end="151:34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="153:21" pos:end="175:21">for<control pos:start="153:24" pos:end="153:45">(<init pos:start="153:25" pos:end="153:25">;</init> <condition pos:start="153:27" pos:end="153:40"><expr pos:start="153:27" pos:end="153:39"><name pos:start="153:27" pos:end="153:27">i</name><operator pos:start="153:28" pos:end="153:28">&lt;</operator><name pos:start="153:29" pos:end="153:39"><name pos:start="153:29" pos:end="153:30">mb</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:39">maxiter</name></name></expr>;</condition> <incr pos:start="153:42" pos:end="153:44"><expr pos:start="153:42" pos:end="153:44"><name pos:start="153:42" pos:end="153:42">i</name><operator pos:start="153:43" pos:end="153:44">++</operator></expr></incr>)</control><block pos:start="153:46" pos:end="175:21">{<block_content pos:start="155:25" pos:end="173:25">

                        <expr_stmt pos:start="155:25" pos:end="155:45"><expr pos:start="155:25" pos:end="155:44"><name pos:start="155:25" pos:end="155:26">zr</name><operator pos:start="155:27" pos:end="155:27">=</operator> <name pos:start="155:29" pos:end="155:44"><name pos:start="155:29" pos:end="155:30">mb</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:38">zyklus</name><index pos:start="155:39" pos:end="155:41">[<expr pos:start="155:40" pos:end="155:40"><name pos:start="155:40" pos:end="155:40">i</name></expr>]</index><index pos:start="155:42" pos:end="155:44">[<expr pos:start="155:43" pos:end="155:43"><literal type="number" pos:start="155:43" pos:end="155:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="157:25" pos:end="157:45"><expr pos:start="157:25" pos:end="157:44"><name pos:start="157:25" pos:end="157:26">zi</name><operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:44"><name pos:start="157:29" pos:end="157:30">mb</name><operator pos:start="157:31" pos:end="157:32">-&gt;</operator><name pos:start="157:33" pos:end="157:38">zyklus</name><index pos:start="157:39" pos:end="157:41">[<expr pos:start="157:40" pos:end="157:40"><name pos:start="157:40" pos:end="157:40">i</name></expr>]</index><index pos:start="157:42" pos:end="157:44">[<expr pos:start="157:43" pos:end="157:43"><literal type="number" pos:start="157:43" pos:end="157:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="159:25" pos:end="173:25"><if pos:start="159:25" pos:end="173:25">if<condition pos:start="159:27" pos:end="159:55">(<expr pos:start="159:28" pos:end="159:54"><name pos:start="159:28" pos:end="159:29">zr</name><operator pos:start="159:30" pos:end="159:30">*</operator><name pos:start="159:31" pos:end="159:32">zr</name> <operator pos:start="159:34" pos:end="159:34">+</operator> <name pos:start="159:36" pos:end="159:37">zi</name><operator pos:start="159:38" pos:end="159:38">*</operator><name pos:start="159:39" pos:end="159:40">zi</name> <operator pos:start="159:42" pos:end="159:42">&gt;</operator> <name pos:start="159:44" pos:end="159:54"><name pos:start="159:44" pos:end="159:45">mb</name><operator pos:start="159:46" pos:end="159:47">-&gt;</operator><name pos:start="159:48" pos:end="159:54">bailout</name></name></expr>)</condition><block pos:start="159:56" pos:end="173:25">{<block_content pos:start="161:29" pos:end="171:34">

                            <switch pos:start="161:29" pos:end="167:29">switch<condition pos:start="161:35" pos:end="161:45">(<expr pos:start="161:36" pos:end="161:44"><name pos:start="161:36" pos:end="161:44"><name pos:start="161:36" pos:end="161:37">mb</name><operator pos:start="161:38" pos:end="161:39">-&gt;</operator><name pos:start="161:40" pos:end="161:44">outer</name></name></expr>)</condition><block pos:start="161:46" pos:end="167:29">{<block_content pos:start="163:29" pos:end="165:120">

                            <case pos:start="163:29" pos:end="163:60">case            <expr pos:start="163:45" pos:end="163:59"><name pos:start="163:45" pos:end="163:59">ITERATION_COUNT</name></expr>:</case> <expr_stmt pos:start="163:62" pos:end="163:68"><expr pos:start="163:62" pos:end="163:67"><name pos:start="163:62" pos:end="163:63">zr</name> <operator pos:start="163:65" pos:end="163:65">=</operator> <name pos:start="163:67" pos:end="163:67">i</name></expr>;</expr_stmt> <break pos:start="163:70" pos:end="163:75">break;</break>

                            <case pos:start="165:29" pos:end="165:60">case <expr pos:start="165:34" pos:end="165:59"><name pos:start="165:34" pos:end="165:59">NORMALIZED_ITERATION_COUNT</name></expr>:</case> <expr_stmt pos:start="165:62" pos:end="165:113"><expr pos:start="165:62" pos:end="165:112"><name pos:start="165:62" pos:end="165:63">zr</name><operator pos:start="165:64" pos:end="165:64">=</operator> <name pos:start="165:66" pos:end="165:66">i</name> <operator pos:start="165:68" pos:end="165:68">+</operator> <call pos:start="165:70" pos:end="165:112"><name pos:start="165:70" pos:end="165:73">log2</name><argument_list pos:start="165:74" pos:end="165:112">(<argument pos:start="165:75" pos:end="165:111"><expr pos:start="165:75" pos:end="165:111"><call pos:start="165:75" pos:end="165:90"><name pos:start="165:75" pos:end="165:77">log</name><argument_list pos:start="165:78" pos:end="165:90">(<argument pos:start="165:79" pos:end="165:89"><expr pos:start="165:79" pos:end="165:89"><name pos:start="165:79" pos:end="165:89"><name pos:start="165:79" pos:end="165:80">mb</name><operator pos:start="165:81" pos:end="165:82">-&gt;</operator><name pos:start="165:83" pos:end="165:89">bailout</name></name></expr></argument>)</argument_list></call> <operator pos:start="165:92" pos:end="165:92">/</operator> <call pos:start="165:94" pos:end="165:111"><name pos:start="165:94" pos:end="165:96">log</name><argument_list pos:start="165:97" pos:end="165:111">(<argument pos:start="165:98" pos:end="165:110"><expr pos:start="165:98" pos:end="165:110"><name pos:start="165:98" pos:end="165:99">zr</name><operator pos:start="165:100" pos:end="165:100">*</operator><name pos:start="165:101" pos:end="165:102">zr</name> <operator pos:start="165:104" pos:end="165:104">+</operator> <name pos:start="165:106" pos:end="165:107">zi</name><operator pos:start="165:108" pos:end="165:108">*</operator><name pos:start="165:109" pos:end="165:110">zi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="165:115" pos:end="165:120">break;</break>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="169:29" pos:end="169:129"><expr pos:start="169:29" pos:end="169:128"><name pos:start="169:29" pos:end="169:29">c</name><operator pos:start="169:30" pos:end="169:30">=</operator> <call pos:start="169:32" pos:end="169:54"><name pos:start="169:32" pos:end="169:37">lrintf</name><argument_list pos:start="169:38" pos:end="169:54">(<argument pos:start="169:39" pos:end="169:53"><expr pos:start="169:39" pos:end="169:53"><operator pos:start="169:39" pos:end="169:39">(</operator><call pos:start="169:40" pos:end="169:46"><name pos:start="169:40" pos:end="169:42">sin</name><argument_list pos:start="169:43" pos:end="169:46">(<argument pos:start="169:44" pos:end="169:45"><expr pos:start="169:44" pos:end="169:45"><name pos:start="169:44" pos:end="169:45">zr</name></expr></argument>)</argument_list></call><operator pos:start="169:47" pos:end="169:47">+</operator><literal type="number" pos:start="169:48" pos:end="169:48">1</literal><operator pos:start="169:49" pos:end="169:49">)</operator><operator pos:start="169:50" pos:end="169:50">*</operator><literal type="number" pos:start="169:51" pos:end="169:53">127</literal></expr></argument>)</argument_list></call> <operator pos:start="169:56" pos:end="169:56">+</operator> <call pos:start="169:58" pos:end="169:86"><name pos:start="169:58" pos:end="169:63">lrintf</name><argument_list pos:start="169:64" pos:end="169:86">(<argument pos:start="169:65" pos:end="169:85"><expr pos:start="169:65" pos:end="169:85"><operator pos:start="169:65" pos:end="169:65">(</operator><call pos:start="169:66" pos:end="169:78"><name pos:start="169:66" pos:end="169:68">sin</name><argument_list pos:start="169:69" pos:end="169:78">(<argument pos:start="169:70" pos:end="169:77"><expr pos:start="169:70" pos:end="169:77"><name pos:start="169:70" pos:end="169:71">zr</name><operator pos:start="169:72" pos:end="169:72">/</operator><literal type="number" pos:start="169:73" pos:end="169:77">1.234</literal></expr></argument>)</argument_list></call><operator pos:start="169:79" pos:end="169:79">+</operator><literal type="number" pos:start="169:80" pos:end="169:80">1</literal><operator pos:start="169:81" pos:end="169:81">)</operator><operator pos:start="169:82" pos:end="169:82">*</operator><literal type="number" pos:start="169:83" pos:end="169:85">127</literal></expr></argument>)</argument_list></call><operator pos:start="169:87" pos:end="169:87">*</operator><literal type="number" pos:start="169:88" pos:end="169:90">256</literal><operator pos:start="169:91" pos:end="169:91">*</operator><literal type="number" pos:start="169:92" pos:end="169:96">256</literal> <operator pos:start="169:96" pos:end="169:96">+</operator> <call pos:start="169:98" pos:end="169:124"><name pos:start="169:98" pos:end="169:103">lrintf</name><argument_list pos:start="169:104" pos:end="169:124">(<argument pos:start="169:105" pos:end="169:123"><expr pos:start="169:105" pos:end="169:123"><operator pos:start="169:105" pos:end="169:105">(</operator><call pos:start="169:106" pos:end="169:116"><name pos:start="169:106" pos:end="169:108">sin</name><argument_list pos:start="169:109" pos:end="169:116">(<argument pos:start="169:110" pos:end="169:115"><expr pos:start="169:110" pos:end="169:115"><name pos:start="169:110" pos:end="169:111">zr</name><operator pos:start="169:112" pos:end="169:112">/</operator><literal type="number" pos:start="169:113" pos:end="169:115">100</literal></expr></argument>)</argument_list></call><operator pos:start="169:117" pos:end="169:117">+</operator><literal type="number" pos:start="169:118" pos:end="169:118">1</literal><operator pos:start="169:119" pos:end="169:119">)</operator><operator pos:start="169:120" pos:end="169:120">*</operator><literal type="number" pos:start="169:121" pos:end="169:123">127</literal></expr></argument>)</argument_list></call><operator pos:start="169:125" pos:end="169:125">*</operator><literal type="number" pos:start="169:126" pos:end="169:128">256</literal></expr>;</expr_stmt>

                            <break pos:start="171:29" pos:end="171:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="177:21" pos:end="177:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="183:13" pos:end="231:13"><if pos:start="183:13" pos:end="231:13">if<condition pos:start="183:15" pos:end="183:18">(<expr pos:start="183:16" pos:end="183:17"><operator pos:start="183:16" pos:end="183:16">!</operator><name pos:start="183:17" pos:end="183:17">c</name></expr>)</condition><block pos:start="183:19" pos:end="231:13">{<block_content pos:start="185:17" pos:end="229:17">

                <if_stmt pos:start="185:17" pos:end="229:17"><if pos:start="185:17" pos:end="203:17">if<condition pos:start="185:19" pos:end="185:37">(<expr pos:start="185:20" pos:end="185:36"><name pos:start="185:20" pos:end="185:28"><name pos:start="185:20" pos:end="185:21">mb</name><operator pos:start="185:22" pos:end="185:23">-&gt;</operator><name pos:start="185:24" pos:end="185:28">inner</name></name><operator pos:start="185:29" pos:end="185:30">==</operator><name pos:start="185:31" pos:end="185:36">PERIOD</name></expr>)</condition><block pos:start="185:38" pos:end="203:17">{<block_content pos:start="187:17" pos:end="201:17">

                <decl_stmt pos:start="187:17" pos:end="187:22"><decl pos:start="187:17" pos:end="187:21"><type pos:start="187:17" pos:end="187:19"><name pos:start="187:17" pos:end="187:19">int</name></type> <name pos:start="187:21" pos:end="187:21">j</name></decl>;</decl_stmt>

                <for pos:start="189:17" pos:end="193:30">for<control pos:start="189:20" pos:end="189:34">(<init pos:start="189:21" pos:end="189:26"><expr pos:start="189:21" pos:end="189:25"><name pos:start="189:21" pos:end="189:21">j</name><operator pos:start="189:22" pos:end="189:22">=</operator><name pos:start="189:23" pos:end="189:23">i</name><operator pos:start="189:24" pos:end="189:24">-</operator><literal type="number" pos:start="189:25" pos:end="189:25">1</literal></expr>;</init> <condition pos:start="189:28" pos:end="189:29"><expr pos:start="189:28" pos:end="189:28"><name pos:start="189:28" pos:end="189:28">j</name></expr>;</condition> <incr pos:start="189:31" pos:end="189:33"><expr pos:start="189:31" pos:end="189:33"><name pos:start="189:31" pos:end="189:31">j</name><operator pos:start="189:32" pos:end="189:33">--</operator></expr></incr>)</control><block type="pseudo" pos:start="191:21" pos:end="193:30"><block_content pos:start="191:21" pos:end="193:30">

                    <if_stmt pos:start="191:21" pos:end="193:30"><if pos:start="191:21" pos:end="193:30">if<condition pos:start="191:23" pos:end="191:96">(<expr pos:start="191:24" pos:end="191:95"><call pos:start="191:24" pos:end="191:47"><name pos:start="191:24" pos:end="191:26">SQR</name><argument_list pos:start="191:27" pos:end="191:47">(<argument pos:start="191:28" pos:end="191:46"><expr pos:start="191:28" pos:end="191:46"><name pos:start="191:28" pos:end="191:43"><name pos:start="191:28" pos:end="191:29">mb</name><operator pos:start="191:30" pos:end="191:31">-&gt;</operator><name pos:start="191:32" pos:end="191:37">zyklus</name><index pos:start="191:38" pos:end="191:40">[<expr pos:start="191:39" pos:end="191:39"><name pos:start="191:39" pos:end="191:39">j</name></expr>]</index><index pos:start="191:41" pos:end="191:43">[<expr pos:start="191:42" pos:end="191:42"><literal type="number" pos:start="191:42" pos:end="191:42">0</literal></expr>]</index></name><operator pos:start="191:44" pos:end="191:44">-</operator><name pos:start="191:45" pos:end="191:46">zr</name></expr></argument>)</argument_list></call> <operator pos:start="191:49" pos:end="191:49">+</operator> <call pos:start="191:51" pos:end="191:74"><name pos:start="191:51" pos:end="191:53">SQR</name><argument_list pos:start="191:54" pos:end="191:74">(<argument pos:start="191:55" pos:end="191:73"><expr pos:start="191:55" pos:end="191:73"><name pos:start="191:55" pos:end="191:70"><name pos:start="191:55" pos:end="191:56">mb</name><operator pos:start="191:57" pos:end="191:58">-&gt;</operator><name pos:start="191:59" pos:end="191:64">zyklus</name><index pos:start="191:65" pos:end="191:67">[<expr pos:start="191:66" pos:end="191:66"><name pos:start="191:66" pos:end="191:66">j</name></expr>]</index><index pos:start="191:68" pos:end="191:70">[<expr pos:start="191:69" pos:end="191:69"><literal type="number" pos:start="191:69" pos:end="191:69">1</literal></expr>]</index></name><operator pos:start="191:71" pos:end="191:71">-</operator><name pos:start="191:72" pos:end="191:73">zi</name></expr></argument>)</argument_list></call> <operator pos:start="191:76" pos:end="191:76">&lt;</operator> <name pos:start="191:78" pos:end="191:84">epsilon</name><operator pos:start="191:85" pos:end="191:85">*</operator><name pos:start="191:86" pos:end="191:92">epsilon</name><operator pos:start="191:93" pos:end="191:93">*</operator><literal type="number" pos:start="191:94" pos:end="191:95">10</literal></expr>)</condition><block type="pseudo" pos:start="193:25" pos:end="193:30"><block_content pos:start="193:25" pos:end="193:30">

                        <break pos:start="193:25" pos:end="193:30">break;</break></block_content></block></if></if_stmt></block_content></block></for>

                <if_stmt pos:start="195:17" pos:end="201:17"><if pos:start="195:17" pos:end="201:17">if<condition pos:start="195:19" pos:end="195:21">(<expr pos:start="195:20" pos:end="195:20"><name pos:start="195:20" pos:end="195:20">j</name></expr>)</condition><block pos:start="195:22" pos:end="201:17">{<block_content pos:start="197:21" pos:end="199:77">

                    <expr_stmt pos:start="197:21" pos:end="197:27"><expr pos:start="197:21" pos:end="197:26"><name pos:start="197:21" pos:end="197:21">c</name><operator pos:start="197:22" pos:end="197:22">=</operator> <name pos:start="197:24" pos:end="197:24">i</name><operator pos:start="197:25" pos:end="197:25">-</operator><name pos:start="197:26" pos:end="197:26">j</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="199:21" pos:end="199:77"><expr pos:start="199:21" pos:end="199:76"><name pos:start="199:21" pos:end="199:21">c</name><operator pos:start="199:22" pos:end="199:22">=</operator> <operator pos:start="199:24" pos:end="199:24">(</operator><operator pos:start="199:25" pos:end="199:25">(</operator><name pos:start="199:26" pos:end="199:26">c</name><operator pos:start="199:27" pos:end="199:28">&lt;&lt;</operator><literal type="number" pos:start="199:29" pos:end="199:29">5</literal><operator pos:start="199:30" pos:end="199:30">)</operator><operator pos:start="199:31" pos:end="199:31">&amp;</operator><literal type="number" pos:start="199:32" pos:end="199:35">0xE0</literal><operator pos:start="199:36" pos:end="199:36">)</operator> <operator pos:start="199:38" pos:end="199:38">+</operator> <operator pos:start="199:40" pos:end="199:40">(</operator><operator pos:start="199:41" pos:end="199:41">(</operator><name pos:start="199:42" pos:end="199:42">c</name><operator pos:start="199:43" pos:end="199:44">&lt;&lt;</operator><literal type="number" pos:start="199:45" pos:end="199:46">16</literal><operator pos:start="199:47" pos:end="199:47">)</operator><operator pos:start="199:48" pos:end="199:48">&amp;</operator><literal type="number" pos:start="199:49" pos:end="199:54">0xE000</literal><operator pos:start="199:55" pos:end="199:55">)</operator> <operator pos:start="199:57" pos:end="199:57">+</operator> <operator pos:start="199:59" pos:end="199:59">(</operator><operator pos:start="199:60" pos:end="199:60">(</operator><name pos:start="199:61" pos:end="199:61">c</name><operator pos:start="199:62" pos:end="199:63">&lt;&lt;</operator><literal type="number" pos:start="199:64" pos:end="199:65">27</literal><operator pos:start="199:66" pos:end="199:66">)</operator><operator pos:start="199:67" pos:end="199:67">&amp;</operator><literal type="number" pos:start="199:68" pos:end="199:75">0xE00000</literal><operator pos:start="199:76" pos:end="199:76">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                </block_content>}</block></if><if type="elseif" pos:start="203:18" pos:end="207:17">else if<condition pos:start="203:25" pos:end="203:45">(<expr pos:start="203:26" pos:end="203:44"><name pos:start="203:26" pos:end="203:34"><name pos:start="203:26" pos:end="203:27">mb</name><operator pos:start="203:28" pos:end="203:29">-&gt;</operator><name pos:start="203:30" pos:end="203:34">inner</name></name><operator pos:start="203:35" pos:end="203:36">==</operator><name pos:start="203:37" pos:end="203:44">CONVTIME</name></expr>)</condition><block pos:start="203:46" pos:end="207:17">{<block_content pos:start="205:21" pos:end="205:62">

                    <expr_stmt pos:start="205:21" pos:end="205:62"><expr pos:start="205:21" pos:end="205:61"><name pos:start="205:21" pos:end="205:21">c</name><operator pos:start="205:22" pos:end="205:22">=</operator> <call pos:start="205:24" pos:end="205:52"><name pos:start="205:24" pos:end="205:28">floor</name><argument_list pos:start="205:29" pos:end="205:52">(<argument pos:start="205:30" pos:end="205:51"><expr pos:start="205:30" pos:end="205:51"><name pos:start="205:30" pos:end="205:30">i</name><operator pos:start="205:31" pos:end="205:31">*</operator><literal type="number" pos:start="205:32" pos:end="205:36">255.0</literal><operator pos:start="205:37" pos:end="205:37">/</operator><name pos:start="205:38" pos:end="205:48"><name pos:start="205:38" pos:end="205:39">mb</name><operator pos:start="205:40" pos:end="205:41">-&gt;</operator><name pos:start="205:42" pos:end="205:48">maxiter</name></name><operator pos:start="205:49" pos:end="205:49">+</operator><name pos:start="205:50" pos:end="205:51">dv</name></expr></argument>)</argument_list></call><operator pos:start="205:53" pos:end="205:53">*</operator><literal type="number" pos:start="205:54" pos:end="205:61">0x010101</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="207:19" pos:end="229:17">else if<condition pos:start="207:26" pos:end="207:44">(<expr pos:start="207:27" pos:end="207:43"><name pos:start="207:27" pos:end="207:35"><name pos:start="207:27" pos:end="207:28">mb</name><operator pos:start="207:29" pos:end="207:30">-&gt;</operator><name pos:start="207:31" pos:end="207:35">inner</name></name><operator pos:start="207:36" pos:end="207:37">==</operator><name pos:start="207:38" pos:end="207:43">MINCOL</name></expr>)</condition><block pos:start="207:45" pos:end="229:17">{<block_content pos:start="209:21" pos:end="227:141">

                    <decl_stmt pos:start="209:21" pos:end="209:26"><decl pos:start="209:21" pos:end="209:25"><type pos:start="209:21" pos:end="209:23"><name pos:start="209:21" pos:end="209:23">int</name></type> <name pos:start="209:25" pos:end="209:25">j</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="211:21" pos:end="211:40"><decl pos:start="211:21" pos:end="211:39"><type pos:start="211:21" pos:end="211:26"><name pos:start="211:21" pos:end="211:26">double</name></type> <name pos:start="211:28" pos:end="211:34">closest</name><init pos:start="211:35" pos:end="211:39">=<expr pos:start="211:36" pos:end="211:39"><literal type="number" pos:start="211:36" pos:end="211:39">9999</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="213:21" pos:end="213:40"><decl pos:start="213:21" pos:end="213:39"><type pos:start="213:21" pos:end="213:23"><name pos:start="213:21" pos:end="213:23">int</name></type> <name pos:start="213:25" pos:end="213:37">closest_index</name><init pos:start="213:38" pos:end="213:39">=<expr pos:start="213:39" pos:end="213:39"><literal type="number" pos:start="213:39" pos:end="213:39">0</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="215:21" pos:end="223:25">for<control pos:start="215:24" pos:end="215:41">(<init pos:start="215:25" pos:end="215:30"><expr pos:start="215:25" pos:end="215:29"><name pos:start="215:25" pos:end="215:25">j</name><operator pos:start="215:26" pos:end="215:26">=</operator><name pos:start="215:27" pos:end="215:27">i</name><operator pos:start="215:28" pos:end="215:28">-</operator><literal type="number" pos:start="215:29" pos:end="215:29">1</literal></expr>;</init> <condition pos:start="215:32" pos:end="215:36"><expr pos:start="215:32" pos:end="215:35"><name pos:start="215:32" pos:end="215:32">j</name><operator pos:start="215:33" pos:end="215:34">&gt;=</operator><literal type="number" pos:start="215:35" pos:end="215:35">0</literal></expr>;</condition> <incr pos:start="215:38" pos:end="215:40"><expr pos:start="215:38" pos:end="215:40"><name pos:start="215:38" pos:end="215:38">j</name><operator pos:start="215:39" pos:end="215:40">--</operator></expr></incr>)</control><block type="pseudo" pos:start="217:25" pos:end="223:25"><block_content pos:start="217:25" pos:end="223:25">

                        <if_stmt pos:start="217:25" pos:end="223:25"><if pos:start="217:25" pos:end="223:25">if<condition pos:start="217:27" pos:end="217:83">(<expr pos:start="217:28" pos:end="217:82"><call pos:start="217:28" pos:end="217:48"><name pos:start="217:28" pos:end="217:30">SQR</name><argument_list pos:start="217:31" pos:end="217:48">(<argument pos:start="217:32" pos:end="217:47"><expr pos:start="217:32" pos:end="217:47"><name pos:start="217:32" pos:end="217:47"><name pos:start="217:32" pos:end="217:33">mb</name><operator pos:start="217:34" pos:end="217:35">-&gt;</operator><name pos:start="217:36" pos:end="217:41">zyklus</name><index pos:start="217:42" pos:end="217:44">[<expr pos:start="217:43" pos:end="217:43"><name pos:start="217:43" pos:end="217:43">j</name></expr>]</index><index pos:start="217:45" pos:end="217:47">[<expr pos:start="217:46" pos:end="217:46"><literal type="number" pos:start="217:46" pos:end="217:46">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="217:50" pos:end="217:50">+</operator> <call pos:start="217:52" pos:end="217:72"><name pos:start="217:52" pos:end="217:54">SQR</name><argument_list pos:start="217:55" pos:end="217:72">(<argument pos:start="217:56" pos:end="217:71"><expr pos:start="217:56" pos:end="217:71"><name pos:start="217:56" pos:end="217:71"><name pos:start="217:56" pos:end="217:57">mb</name><operator pos:start="217:58" pos:end="217:59">-&gt;</operator><name pos:start="217:60" pos:end="217:65">zyklus</name><index pos:start="217:66" pos:end="217:68">[<expr pos:start="217:67" pos:end="217:67"><name pos:start="217:67" pos:end="217:67">j</name></expr>]</index><index pos:start="217:69" pos:end="217:71">[<expr pos:start="217:70" pos:end="217:70"><literal type="number" pos:start="217:70" pos:end="217:70">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="217:74" pos:end="217:74">&lt;</operator> <name pos:start="217:76" pos:end="217:82">closest</name></expr>)</condition><block pos:start="217:84" pos:end="223:25">{<block_content pos:start="219:29" pos:end="221:45">

                            <expr_stmt pos:start="219:29" pos:end="219:83"><expr pos:start="219:29" pos:end="219:82"><name pos:start="219:29" pos:end="219:35">closest</name><operator pos:start="219:36" pos:end="219:36">=</operator> <call pos:start="219:38" pos:end="219:58"><name pos:start="219:38" pos:end="219:40">SQR</name><argument_list pos:start="219:41" pos:end="219:58">(<argument pos:start="219:42" pos:end="219:57"><expr pos:start="219:42" pos:end="219:57"><name pos:start="219:42" pos:end="219:57"><name pos:start="219:42" pos:end="219:43">mb</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:51">zyklus</name><index pos:start="219:52" pos:end="219:54">[<expr pos:start="219:53" pos:end="219:53"><name pos:start="219:53" pos:end="219:53">j</name></expr>]</index><index pos:start="219:55" pos:end="219:57">[<expr pos:start="219:56" pos:end="219:56"><literal type="number" pos:start="219:56" pos:end="219:56">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="219:60" pos:end="219:60">+</operator> <call pos:start="219:62" pos:end="219:82"><name pos:start="219:62" pos:end="219:64">SQR</name><argument_list pos:start="219:65" pos:end="219:82">(<argument pos:start="219:66" pos:end="219:81"><expr pos:start="219:66" pos:end="219:81"><name pos:start="219:66" pos:end="219:81"><name pos:start="219:66" pos:end="219:67">mb</name><operator pos:start="219:68" pos:end="219:69">-&gt;</operator><name pos:start="219:70" pos:end="219:75">zyklus</name><index pos:start="219:76" pos:end="219:78">[<expr pos:start="219:77" pos:end="219:77"><name pos:start="219:77" pos:end="219:77">j</name></expr>]</index><index pos:start="219:79" pos:end="219:81">[<expr pos:start="219:80" pos:end="219:80"><literal type="number" pos:start="219:80" pos:end="219:80">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="221:29" pos:end="221:45"><expr pos:start="221:29" pos:end="221:44"><name pos:start="221:29" pos:end="221:41">closest_index</name><operator pos:start="221:42" pos:end="221:42">=</operator> <name pos:start="221:44" pos:end="221:44">j</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt></block_content></block></for>

                    <expr_stmt pos:start="225:21" pos:end="225:44"><expr pos:start="225:21" pos:end="225:43"><name pos:start="225:21" pos:end="225:27">closest</name> <operator pos:start="225:29" pos:end="225:29">=</operator> <call pos:start="225:31" pos:end="225:43"><name pos:start="225:31" pos:end="225:34">sqrt</name><argument_list pos:start="225:35" pos:end="225:43">(<argument pos:start="225:36" pos:end="225:42"><expr pos:start="225:36" pos:end="225:42"><name pos:start="225:36" pos:end="225:42">closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:141"><expr pos:start="227:21" pos:end="227:140"><name pos:start="227:21" pos:end="227:21">c</name><operator pos:start="227:22" pos:end="227:22">=</operator> <call pos:start="227:24" pos:end="227:78"><name pos:start="227:24" pos:end="227:29">lrintf</name><argument_list pos:start="227:30" pos:end="227:78">(<argument pos:start="227:31" pos:end="227:77"><expr pos:start="227:31" pos:end="227:77"><operator pos:start="227:31" pos:end="227:31">(</operator><name pos:start="227:32" pos:end="227:59"><name pos:start="227:32" pos:end="227:33">mb</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:41">zyklus</name><index pos:start="227:42" pos:end="227:56">[<expr pos:start="227:43" pos:end="227:55"><name pos:start="227:43" pos:end="227:55">closest_index</name></expr>]</index><index pos:start="227:57" pos:end="227:59">[<expr pos:start="227:58" pos:end="227:58"><literal type="number" pos:start="227:58" pos:end="227:58">0</literal></expr>]</index></name><operator pos:start="227:60" pos:end="227:60">/</operator><name pos:start="227:61" pos:end="227:67">closest</name><operator pos:start="227:68" pos:end="227:68">+</operator><literal type="number" pos:start="227:69" pos:end="227:69">1</literal><operator pos:start="227:70" pos:end="227:70">)</operator><operator pos:start="227:71" pos:end="227:71">*</operator><literal type="number" pos:start="227:72" pos:end="227:75">127</literal><operator pos:start="227:75" pos:end="227:75">+</operator><name pos:start="227:76" pos:end="227:77">dv</name></expr></argument>)</argument_list></call> <operator pos:start="227:80" pos:end="227:80">+</operator> <call pos:start="227:82" pos:end="227:136"><name pos:start="227:82" pos:end="227:87">lrintf</name><argument_list pos:start="227:88" pos:end="227:136">(<argument pos:start="227:89" pos:end="227:135"><expr pos:start="227:89" pos:end="227:135"><operator pos:start="227:89" pos:end="227:89">(</operator><name pos:start="227:90" pos:end="227:117"><name pos:start="227:90" pos:end="227:91">mb</name><operator pos:start="227:92" pos:end="227:93">-&gt;</operator><name pos:start="227:94" pos:end="227:99">zyklus</name><index pos:start="227:100" pos:end="227:114">[<expr pos:start="227:101" pos:end="227:113"><name pos:start="227:101" pos:end="227:113">closest_index</name></expr>]</index><index pos:start="227:115" pos:end="227:117">[<expr pos:start="227:116" pos:end="227:116"><literal type="number" pos:start="227:116" pos:end="227:116">1</literal></expr>]</index></name><operator pos:start="227:118" pos:end="227:118">/</operator><name pos:start="227:119" pos:end="227:125">closest</name><operator pos:start="227:126" pos:end="227:126">+</operator><literal type="number" pos:start="227:127" pos:end="227:127">1</literal><operator pos:start="227:128" pos:end="227:128">)</operator><operator pos:start="227:129" pos:end="227:129">*</operator><literal type="number" pos:start="227:130" pos:end="227:133">127</literal><operator pos:start="227:133" pos:end="227:133">+</operator><name pos:start="227:134" pos:end="227:135">dv</name></expr></argument>)</argument_list></call><operator pos:start="227:137" pos:end="227:137">*</operator><literal type="number" pos:start="227:138" pos:end="227:140">256</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:28"><expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:13">c</name> <operator pos:start="233:15" pos:end="233:16">|=</operator> <literal type="number" pos:start="233:18" pos:end="233:27">0xFF000000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:37"><expr pos:start="235:13" pos:end="235:36"><name pos:start="235:13" pos:end="235:33"><name pos:start="235:13" pos:end="235:17">color</name><index pos:start="235:18" pos:end="235:33">[<expr pos:start="235:19" pos:end="235:32"><name pos:start="235:19" pos:end="235:19">x</name> <operator pos:start="235:21" pos:end="235:21">+</operator> <name pos:start="235:23" pos:end="235:23">y</name><operator pos:start="235:24" pos:end="235:24">*</operator><name pos:start="235:25" pos:end="235:32">linesize</name></expr>]</index></name><operator pos:start="235:34" pos:end="235:34">=</operator> <name pos:start="235:36" pos:end="235:36">c</name></expr>;</expr_stmt>

            <if_stmt pos:start="237:13" pos:end="245:13"><if pos:start="237:13" pos:end="245:13">if<condition pos:start="237:15" pos:end="237:47">(<expr pos:start="237:16" pos:end="237:46"><name pos:start="237:16" pos:end="237:24">next_cidx</name> <operator pos:start="237:26" pos:end="237:26">&lt;</operator> <name pos:start="237:28" pos:end="237:46"><name pos:start="237:28" pos:end="237:29">mb</name><operator pos:start="237:30" pos:end="237:31">-&gt;</operator><name pos:start="237:32" pos:end="237:46">cache_allocated</name></name></expr>)</condition><block pos:start="237:48" pos:end="245:13">{<block_content pos:start="239:17" pos:end="243:52">

                <expr_stmt pos:start="239:17" pos:end="239:53"><expr pos:start="239:17" pos:end="239:52"><name pos:start="239:17" pos:end="239:43"><name pos:start="239:17" pos:end="239:18">mb</name><operator pos:start="239:19" pos:end="239:20">-&gt;</operator><name pos:start="239:21" pos:end="239:30">next_cache</name><index pos:start="239:31" pos:end="239:43">[<expr pos:start="239:32" pos:end="239:40"><name pos:start="239:32" pos:end="239:40">next_cidx</name></expr>  ]</index></name><operator pos:start="239:44" pos:end="239:44">.</operator><name pos:start="239:45" pos:end="239:48"><name pos:start="239:45" pos:end="239:45">p</name><index pos:start="239:46" pos:end="239:48">[<expr pos:start="239:47" pos:end="239:47"><literal type="number" pos:start="239:47" pos:end="239:47">0</literal></expr>]</index></name><operator pos:start="239:49" pos:end="239:49">=</operator> <name pos:start="239:51" pos:end="239:52">cr</name></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:53"><expr pos:start="241:17" pos:end="241:52"><name pos:start="241:17" pos:end="241:43"><name pos:start="241:17" pos:end="241:18">mb</name><operator pos:start="241:19" pos:end="241:20">-&gt;</operator><name pos:start="241:21" pos:end="241:30">next_cache</name><index pos:start="241:31" pos:end="241:43">[<expr pos:start="241:32" pos:end="241:40"><name pos:start="241:32" pos:end="241:40">next_cidx</name></expr>  ]</index></name><operator pos:start="241:44" pos:end="241:44">.</operator><name pos:start="241:45" pos:end="241:48"><name pos:start="241:45" pos:end="241:45">p</name><index pos:start="241:46" pos:end="241:48">[<expr pos:start="241:47" pos:end="241:47"><literal type="number" pos:start="241:47" pos:end="241:47">1</literal></expr>]</index></name><operator pos:start="241:49" pos:end="241:49">=</operator> <name pos:start="241:51" pos:end="241:52">ci</name></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:52"><expr pos:start="243:17" pos:end="243:51"><name pos:start="243:17" pos:end="243:43"><name pos:start="243:17" pos:end="243:18">mb</name><operator pos:start="243:19" pos:end="243:20">-&gt;</operator><name pos:start="243:21" pos:end="243:30">next_cache</name><index pos:start="243:31" pos:end="243:43">[<expr pos:start="243:32" pos:end="243:42"><name pos:start="243:32" pos:end="243:40">next_cidx</name><operator pos:start="243:41" pos:end="243:42">++</operator></expr>]</index></name><operator pos:start="243:44" pos:end="243:44">.</operator><name pos:start="243:45" pos:end="243:47">val</name> <operator pos:start="243:49" pos:end="243:49">=</operator> <name pos:start="243:51" pos:end="243:51">c</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="249:9" pos:end="249:78"><expr pos:start="249:9" pos:end="249:77"><call pos:start="249:9" pos:end="249:77"><name pos:start="249:9" pos:end="249:23">fill_from_cache</name><argument_list pos:start="249:24" pos:end="249:77">(<argument pos:start="249:25" pos:end="249:27"><expr pos:start="249:25" pos:end="249:27"><name pos:start="249:25" pos:end="249:27">ctx</name></expr></argument>, <argument pos:start="249:30" pos:end="249:33"><expr pos:start="249:30" pos:end="249:33"><name pos:start="249:30" pos:end="249:33">NULL</name></expr></argument>, <argument pos:start="249:36" pos:end="249:43"><expr pos:start="249:36" pos:end="249:43"><operator pos:start="249:36" pos:end="249:36">&amp;</operator><name pos:start="249:37" pos:end="249:43">in_cidx</name></expr></argument>, <argument pos:start="249:46" pos:end="249:55"><expr pos:start="249:46" pos:end="249:55"><operator pos:start="249:46" pos:end="249:46">&amp;</operator><name pos:start="249:47" pos:end="249:55">next_cidx</name></expr></argument>, <argument pos:start="249:58" pos:end="249:69"><expr pos:start="249:58" pos:end="249:69"><name pos:start="249:58" pos:end="249:59">ci</name> <operator pos:start="249:61" pos:end="249:61">+</operator> <name pos:start="249:63" pos:end="249:67">scale</name><operator pos:start="249:68" pos:end="249:68">/</operator><literal type="number" pos:start="249:69" pos:end="249:69">2</literal></expr></argument>, <argument pos:start="249:72" pos:end="249:76"><expr pos:start="249:72" pos:end="249:76"><name pos:start="249:72" pos:end="249:76">scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></function>

    <expr_stmt pos:start="253:5" pos:end="253:51"><expr pos:start="253:5" pos:end="253:50"><call pos:start="253:5" pos:end="253:50"><name pos:start="253:5" pos:end="253:10">FFSWAP</name><argument_list pos:start="253:11" pos:end="253:50">(<argument pos:start="253:12" pos:end="253:16"><expr pos:start="253:12" pos:end="253:16"><name pos:start="253:12" pos:end="253:15">void</name><operator pos:start="253:16" pos:end="253:16">*</operator></expr></argument>, <argument pos:start="253:19" pos:end="253:32"><expr pos:start="253:19" pos:end="253:32"><name pos:start="253:19" pos:end="253:32"><name pos:start="253:19" pos:end="253:20">mb</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:32">next_cache</name></name></expr></argument>, <argument pos:start="253:35" pos:end="253:49"><expr pos:start="253:35" pos:end="253:49"><name pos:start="253:35" pos:end="253:49"><name pos:start="253:35" pos:end="253:36">mb</name><operator pos:start="253:37" pos:end="253:38">-&gt;</operator><name pos:start="253:39" pos:end="253:49">point_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:31"><expr pos:start="255:5" pos:end="255:30"><name pos:start="255:5" pos:end="255:18"><name pos:start="255:5" pos:end="255:6">mb</name><operator pos:start="255:7" pos:end="255:8">-&gt;</operator><name pos:start="255:9" pos:end="255:18">cache_used</name></name> <operator pos:start="255:20" pos:end="255:20">=</operator> <name pos:start="255:22" pos:end="255:30">next_cidx</name></expr>;</expr_stmt>

    <if_stmt pos:start="257:5" pos:end="259:67"><if pos:start="257:5" pos:end="259:67">if<condition pos:start="257:7" pos:end="257:45">(<expr pos:start="257:8" pos:end="257:44"><name pos:start="257:8" pos:end="257:21"><name pos:start="257:8" pos:end="257:9">mb</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:21">cache_used</name></name> <operator pos:start="257:23" pos:end="257:24">==</operator> <name pos:start="257:26" pos:end="257:44"><name pos:start="257:26" pos:end="257:27">mb</name><operator pos:start="257:28" pos:end="257:29">-&gt;</operator><name pos:start="257:30" pos:end="257:44">cache_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="259:9" pos:end="259:67"><block_content pos:start="259:9" pos:end="259:67">

        <expr_stmt pos:start="259:9" pos:end="259:67"><expr pos:start="259:9" pos:end="259:66"><call pos:start="259:9" pos:end="259:66"><name pos:start="259:9" pos:end="259:14">av_log</name><argument_list pos:start="259:15" pos:end="259:66">(<argument pos:start="259:16" pos:end="259:16"><expr pos:start="259:16" pos:end="259:16"><literal type="number" pos:start="259:16" pos:end="259:16">0</literal></expr></argument>, <argument pos:start="259:19" pos:end="259:29"><expr pos:start="259:19" pos:end="259:29"><name pos:start="259:19" pos:end="259:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="259:32" pos:end="259:65"><expr pos:start="259:32" pos:end="259:65"><literal type="string" pos:start="259:32" pos:end="259:65">"Mandelbrot cache is too small!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

}
</unit>
