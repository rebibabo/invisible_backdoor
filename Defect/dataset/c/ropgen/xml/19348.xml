<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19348.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:43">sd_co_flush_to_disk</name><parameter_list pos:start="1:44" pos:end="1:65">(<parameter pos:start="1:45" pos:end="1:64"><decl pos:start="1:45" pos:end="1:64"><type pos:start="1:45" pos:end="1:62"><name pos:start="1:45" pos:end="1:60">BlockDriverState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">BDRVSheepdogState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:37">= <expr pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">bs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18">SheepdogObjReq</name></type> <name pos:start="7:20" pos:end="7:22">hdr</name> <init pos:start="7:24" pos:end="7:30">= <expr pos:start="7:26" pos:end="7:30"><block pos:start="7:26" pos:end="7:30">{ <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">SheepdogObjRsp</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">rsp</name> <init pos:start="9:25" pos:end="9:48">= <expr pos:start="9:27" pos:end="9:48"><operator pos:start="9:27" pos:end="9:27">(</operator><name pos:start="9:28" pos:end="9:41">SheepdogObjRsp</name> <operator pos:start="9:43" pos:end="9:43">*</operator><operator pos:start="9:44" pos:end="9:44">)</operator><operator pos:start="9:45" pos:end="9:45">&amp;</operator><name pos:start="9:46" pos:end="9:48">hdr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">SheepdogInode</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:24">inode</name> <init pos:start="11:26" pos:end="11:36">= <expr pos:start="11:28" pos:end="11:36"><operator pos:start="11:28" pos:end="11:28">&amp;</operator><name pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:36">inode</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:21">wlen</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>, <decl pos:start="15:28" pos:end="15:35"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:28" pos:end="15:31">rlen</name> <init pos:start="15:33" pos:end="15:35">= <expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:44">(<expr pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:22">cache_flags</name></name> <operator pos:start="19:24" pos:end="19:25">!=</operator> <name pos:start="19:27" pos:end="19:43">SD_FLAG_CMD_CACHE</name></expr>)</condition> <block pos:start="19:46" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:7">hdr</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:14">opcode</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:32">SD_OP_FLUSH_VDI</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:7">hdr</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:11">oid</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:43"><name pos:start="29:15" pos:end="29:28">vid_to_vdi_oid</name><argument_list pos:start="29:29" pos:end="29:43">(<argument pos:start="29:30" pos:end="29:42"><expr pos:start="29:30" pos:end="29:42"><name pos:start="29:30" pos:end="29:42"><name pos:start="29:30" pos:end="29:34">inode</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:42">vdi_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:71"><expr pos:start="33:5" pos:end="33:70"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:70"><name pos:start="33:11" pos:end="33:16">do_req</name><argument_list pos:start="33:17" pos:end="33:70">(<argument pos:start="33:18" pos:end="33:28"><expr pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:18">s</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:28">flush_fd</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:49"><expr pos:start="33:31" pos:end="33:49"><operator pos:start="33:31" pos:end="33:31">(</operator><name pos:start="33:32" pos:end="33:42">SheepdogReq</name> <operator pos:start="33:44" pos:end="33:44">*</operator><operator pos:start="33:45" pos:end="33:45">)</operator><operator pos:start="33:46" pos:end="33:46">&amp;</operator><name pos:start="33:47" pos:end="33:49">hdr</name></expr></argument>, <argument pos:start="33:52" pos:end="33:55"><expr pos:start="33:52" pos:end="33:55"><name pos:start="33:52" pos:end="33:55">NULL</name></expr></argument>, <argument pos:start="33:58" pos:end="33:62"><expr pos:start="33:58" pos:end="33:62"><operator pos:start="33:58" pos:end="33:58">&amp;</operator><name pos:start="33:59" pos:end="33:62">wlen</name></expr></argument>, <argument pos:start="33:65" pos:end="33:69"><expr pos:start="33:65" pos:end="33:69"><operator pos:start="33:65" pos:end="33:65">&amp;</operator><name pos:start="33:66" pos:end="33:69">rlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">ret</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:19">

        <expr_stmt pos:start="37:9" pos:end="37:62"><expr pos:start="37:9" pos:end="37:61"><call pos:start="37:9" pos:end="37:61"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:61">(<argument pos:start="37:22" pos:end="37:60"><expr pos:start="37:22" pos:end="37:60"><literal type="string" pos:start="37:22" pos:end="37:60">"failed to send a request to the sheep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:19">return <expr pos:start="39:16" pos:end="39:18"><name pos:start="39:16" pos:end="39:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:44">(<expr pos:start="45:9" pos:end="45:43"><name pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:11">rsp</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:19">result</name></name> <operator pos:start="45:21" pos:end="45:22">==</operator> <name pos:start="45:24" pos:end="45:43">SD_RES_INVALID_PARMS</name></expr>)</condition> <block pos:start="45:46" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:17">

        <expr_stmt pos:start="47:9" pos:end="47:77"><expr pos:start="47:9" pos:end="47:76"><call pos:start="47:9" pos:end="47:76"><name pos:start="47:9" pos:end="47:15">dprintf</name><argument_list pos:start="47:16" pos:end="47:76">(<argument pos:start="47:17" pos:end="47:75"><expr pos:start="47:17" pos:end="47:75"><literal type="string" pos:start="47:17" pos:end="47:75">"disable write cache since the server doesn't support it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:22">cache_flags</name></name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:43">SD_FLAG_CMD_DIRECT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:19">closesocket</name><argument_list pos:start="53:20" pos:end="53:32">(<argument pos:start="53:21" pos:end="53:31"><expr pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:21">s</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:31">flush_fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:38">(<expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:11">rsp</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:19">result</name></name> <operator pos:start="61:21" pos:end="61:22">!=</operator> <name pos:start="61:24" pos:end="61:37">SD_RES_SUCCESS</name></expr>)</condition> <block pos:start="61:40" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:20">

        <expr_stmt pos:start="63:9" pos:end="63:53"><expr pos:start="63:9" pos:end="63:52"><call pos:start="63:9" pos:end="63:52"><name pos:start="63:9" pos:end="63:20">error_report</name><argument_list pos:start="63:21" pos:end="63:52">(<argument pos:start="63:22" pos:end="63:25"><expr pos:start="63:22" pos:end="63:25"><literal type="string" pos:start="63:22" pos:end="63:25">"%s"</literal></expr></argument>, <argument pos:start="63:28" pos:end="63:51"><expr pos:start="63:28" pos:end="63:51"><call pos:start="63:28" pos:end="63:51"><name pos:start="63:28" pos:end="63:38">sd_strerror</name><argument_list pos:start="63:39" pos:end="63:51">(<argument pos:start="63:40" pos:end="63:50"><expr pos:start="63:40" pos:end="63:50"><name pos:start="63:40" pos:end="63:50"><name pos:start="63:40" pos:end="63:42">rsp</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:50">result</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:20">return <expr pos:start="65:16" pos:end="65:19"><operator pos:start="65:16" pos:end="65:16">-</operator><name pos:start="65:17" pos:end="65:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
