<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20535.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">decode_cce</name><parameter_list pos:start="1:22" pos:end="1:80">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:32">AACContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type> <name pos:start="1:36" pos:end="1:37">ac</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><name pos:start="1:40" pos:end="1:52">GetBitContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type> <name pos:start="1:56" pos:end="1:57">gb</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:79"><decl pos:start="1:60" pos:end="1:79"><type pos:start="1:60" pos:end="1:79"><name pos:start="1:60" pos:end="1:73">ChannelElement</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type> <name pos:start="1:77" pos:end="1:79">che</name></decl></parameter>)</parameter_list> <block pos:start="1:82" pos:end="133:1">{<block_content pos:start="3:5" pos:end="131:13">

    <decl_stmt pos:start="3:5" pos:end="3:21"><decl pos:start="3:5" pos:end="3:20"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:16">num_gain</name> <init pos:start="3:18" pos:end="3:20">= <expr pos:start="3:20" pos:end="3:20"><literal type="number" pos:start="3:20" pos:end="3:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">g</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">sfb</name></decl>, <decl pos:start="5:20" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:22">ret</name></decl>, <decl pos:start="5:25" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:27">idx</name> <init pos:start="5:29" pos:end="5:31">= <expr pos:start="5:31" pos:end="5:31"><literal type="number" pos:start="5:31" pos:end="5:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">sign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">float</name></type> <name pos:start="9:11" pos:end="9:15">scale</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">SingleChannelElement</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type> <name pos:start="11:28" pos:end="11:30">sce</name> <init pos:start="11:32" pos:end="11:44">= <expr pos:start="11:34" pos:end="11:44"><operator pos:start="11:34" pos:end="11:34">&amp;</operator><name pos:start="11:35" pos:end="11:44"><name pos:start="11:35" pos:end="11:37">che</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:41">ch</name><index pos:start="11:42" pos:end="11:44">[<expr pos:start="11:43" pos:end="11:43"><literal type="number" pos:start="11:43" pos:end="11:43">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">ChannelCoupling</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type> <name pos:start="13:23" pos:end="13:26">coup</name>     <init pos:start="13:32" pos:end="13:43">= <expr pos:start="13:34" pos:end="13:43"><operator pos:start="13:34" pos:end="13:34">&amp;</operator><name pos:start="13:35" pos:end="13:43"><name pos:start="13:35" pos:end="13:37">che</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:43">coup</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:8">coup</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:24">coupling_point</name></name> <operator pos:start="17:26" pos:end="17:26">=</operator> <literal type="number" pos:start="17:28" pos:end="17:28">2</literal><operator pos:start="17:29" pos:end="17:29">*</operator><call pos:start="17:30" pos:end="17:42"><name pos:start="17:30" pos:end="17:38">get_bits1</name><argument_list pos:start="17:39" pos:end="17:42">(<argument pos:start="17:40" pos:end="17:41"><expr pos:start="17:40" pos:end="17:41"><name pos:start="17:40" pos:end="17:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:8">coup</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:21">num_coupled</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <call pos:start="19:25" pos:end="19:39"><name pos:start="19:25" pos:end="19:32">get_bits</name><argument_list pos:start="19:33" pos:end="19:39">(<argument pos:start="19:34" pos:end="19:35"><expr pos:start="19:34" pos:end="19:35"><name pos:start="19:34" pos:end="19:35">gb</name></expr></argument>, <argument pos:start="19:38" pos:end="19:38"><expr pos:start="19:38" pos:end="19:38"><literal type="number" pos:start="19:38" pos:end="19:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="41:5">for <control pos:start="21:9" pos:end="21:44">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">c</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:39"><expr pos:start="21:17" pos:end="21:38"><name pos:start="21:17" pos:end="21:17">c</name> <operator pos:start="21:19" pos:end="21:20">&lt;=</operator> <name pos:start="21:22" pos:end="21:38"><name pos:start="21:22" pos:end="21:25">coup</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:38">num_coupled</name></name></expr>;</condition> <incr pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:41">c</name><operator pos:start="21:42" pos:end="21:43">++</operator></expr></incr>)</control> <block pos:start="21:46" pos:end="41:5">{<block_content pos:start="23:9" pos:end="39:35">

        <expr_stmt pos:start="23:9" pos:end="23:19"><expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:16">num_gain</name><operator pos:start="23:17" pos:end="23:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:60"><expr pos:start="25:9" pos:end="25:59"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:12">coup</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:18">type</name><index pos:start="25:19" pos:end="25:21">[<expr pos:start="25:20" pos:end="25:20"><name pos:start="25:20" pos:end="25:20">c</name></expr>]</index></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <ternary pos:start="25:25" pos:end="25:59"><condition pos:start="25:25" pos:end="25:39"><expr pos:start="25:25" pos:end="25:37"><call pos:start="25:25" pos:end="25:37"><name pos:start="25:25" pos:end="25:33">get_bits1</name><argument_list pos:start="25:34" pos:end="25:37">(<argument pos:start="25:35" pos:end="25:36"><expr pos:start="25:35" pos:end="25:36"><name pos:start="25:35" pos:end="25:36">gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="25:41" pos:end="25:48"> <expr pos:start="25:41" pos:end="25:48"><name pos:start="25:41" pos:end="25:48">TYPE_CPE</name></expr> </then><else pos:start="25:50" pos:end="25:59">: <expr pos:start="25:52" pos:end="25:59"><name pos:start="25:52" pos:end="25:59">TYPE_SCE</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:12">coup</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:23">id_select</name><index pos:start="27:24" pos:end="27:26">[<expr pos:start="27:25" pos:end="27:25"><name pos:start="27:25" pos:end="27:25">c</name></expr>]</index></name> <operator pos:start="27:28" pos:end="27:28">=</operator> <call pos:start="27:30" pos:end="27:44"><name pos:start="27:30" pos:end="27:37">get_bits</name><argument_list pos:start="27:38" pos:end="27:44">(<argument pos:start="27:39" pos:end="27:40"><expr pos:start="27:39" pos:end="27:40"><name pos:start="27:39" pos:end="27:40">gb</name></expr></argument>, <argument pos:start="27:43" pos:end="27:43"><expr pos:start="27:43" pos:end="27:43"><literal type="number" pos:start="27:43" pos:end="27:43">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="39:35"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:38">(<expr pos:start="29:13" pos:end="29:37"><name pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:16">coup</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:22">type</name><index pos:start="29:23" pos:end="29:25">[<expr pos:start="29:24" pos:end="29:24"><name pos:start="29:24" pos:end="29:24">c</name></expr>]</index></name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:37">TYPE_CPE</name></expr>)</condition> <block pos:start="29:40" pos:end="37:9">{<block_content pos:start="31:13" pos:end="35:27">

            <expr_stmt pos:start="31:13" pos:end="31:49"><expr pos:start="31:13" pos:end="31:48"><name pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:16">coup</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:27">ch_select</name><index pos:start="31:28" pos:end="31:30">[<expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">c</name></expr>]</index></name> <operator pos:start="31:32" pos:end="31:32">=</operator> <call pos:start="31:34" pos:end="31:48"><name pos:start="31:34" pos:end="31:41">get_bits</name><argument_list pos:start="31:42" pos:end="31:48">(<argument pos:start="31:43" pos:end="31:44"><expr pos:start="31:43" pos:end="31:44"><name pos:start="31:43" pos:end="31:44">gb</name></expr></argument>, <argument pos:start="31:47" pos:end="31:47"><expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="35:27"><if pos:start="33:13" pos:end="35:27">if <condition pos:start="33:16" pos:end="33:40">(<expr pos:start="33:17" pos:end="33:39"><name pos:start="33:17" pos:end="33:34"><name pos:start="33:17" pos:end="33:20">coup</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:31">ch_select</name><index pos:start="33:32" pos:end="33:34">[<expr pos:start="33:33" pos:end="33:33"><name pos:start="33:33" pos:end="33:33">c</name></expr>]</index></name> <operator pos:start="33:36" pos:end="33:37">==</operator> <literal type="number" pos:start="33:39" pos:end="33:39">3</literal></expr>)</condition><block type="pseudo" pos:start="35:17" pos:end="35:27"><block_content pos:start="35:17" pos:end="35:27">

                <expr_stmt pos:start="35:17" pos:end="35:27"><expr pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:24">num_gain</name><operator pos:start="35:25" pos:end="35:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="39:35">else<block type="pseudo" pos:start="39:13" pos:end="39:35"><block_content pos:start="39:13" pos:end="39:35">

            <expr_stmt pos:start="39:13" pos:end="39:35"><expr pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:30"><name pos:start="39:13" pos:end="39:16">coup</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:27">ch_select</name><index pos:start="39:28" pos:end="39:30">[<expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">c</name></expr>]</index></name> <operator pos:start="39:32" pos:end="39:32">=</operator> <literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="43:5" pos:end="43:42"><expr pos:start="43:5" pos:end="43:41"><name pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:8">coup</name><operator pos:start="43:9" pos:end="43:10">-&gt;</operator><name pos:start="43:11" pos:end="43:24">coupling_point</name></name> <operator pos:start="43:26" pos:end="43:27">+=</operator> <call pos:start="43:29" pos:end="43:41"><name pos:start="43:29" pos:end="43:37">get_bits1</name><argument_list pos:start="43:38" pos:end="43:41">(<argument pos:start="43:39" pos:end="43:40"><expr pos:start="43:39" pos:end="43:40"><name pos:start="43:39" pos:end="43:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="47:34">(<expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:12">coup</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:28">coupling_point</name></name> <operator pos:start="47:30" pos:end="47:31">==</operator> <literal type="number" pos:start="47:33" pos:end="47:33">2</literal></expr>)</condition> <block pos:start="47:36" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:18">

        <expr_stmt pos:start="49:9" pos:end="51:77"><expr pos:start="49:9" pos:end="51:76"><call pos:start="49:9" pos:end="51:76"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="51:76">(<argument pos:start="49:16" pos:end="49:29"><expr pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:17">ac</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:29">avccontext</name></name></expr></argument>, <argument pos:start="49:32" pos:end="49:43"><expr pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:43">AV_LOG_ERROR</name></expr></argument>,

            <argument pos:start="51:13" pos:end="51:75"><expr pos:start="51:13" pos:end="51:75"><literal type="string" pos:start="51:13" pos:end="51:75">"Independently switched CCE with 'invalid' domain signalled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:49"><expr pos:start="53:9" pos:end="53:48"><call pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:14">memset</name><argument_list pos:start="53:15" pos:end="53:48">(<argument pos:start="53:16" pos:end="53:19"><expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">coup</name></expr></argument>, <argument pos:start="53:22" pos:end="53:22"><expr pos:start="53:22" pos:end="53:22"><literal type="number" pos:start="53:22" pos:end="53:22">0</literal></expr></argument>, <argument pos:start="53:25" pos:end="53:47"><expr pos:start="53:25" pos:end="53:47"><sizeof pos:start="53:25" pos:end="53:47">sizeof<argument_list pos:start="53:31" pos:end="53:47">(<argument pos:start="53:32" pos:end="53:46"><expr pos:start="53:32" pos:end="53:46"><name pos:start="53:32" pos:end="53:46">ChannelCoupling</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:18">return <expr pos:start="55:16" pos:end="55:17"><operator pos:start="55:16" pos:end="55:16">-</operator><literal type="number" pos:start="55:17" pos:end="55:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:27"><expr pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:8">sign</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <call pos:start="61:12" pos:end="61:26"><name pos:start="61:12" pos:end="61:19">get_bits</name><argument_list pos:start="61:20" pos:end="61:26">(<argument pos:start="61:21" pos:end="61:22"><expr pos:start="61:21" pos:end="61:22"><name pos:start="61:21" pos:end="61:22">gb</name></expr></argument>, <argument pos:start="61:25" pos:end="61:25"><expr pos:start="61:25" pos:end="61:25"><literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:55"><expr pos:start="63:5" pos:end="63:54"><name pos:start="63:5" pos:end="63:9">scale</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:15">pow</name><argument_list pos:start="63:16" pos:end="63:54">(<argument pos:start="63:17" pos:end="63:18"><expr pos:start="63:17" pos:end="63:18"><literal type="number" pos:start="63:17" pos:end="63:18">2.</literal></expr></argument>, <argument pos:start="63:21" pos:end="63:53"><expr pos:start="63:21" pos:end="63:53"><call pos:start="63:21" pos:end="63:53"><name pos:start="63:21" pos:end="63:23">pow</name><argument_list pos:start="63:24" pos:end="63:53">(<argument pos:start="63:25" pos:end="63:26"><expr pos:start="63:25" pos:end="63:26"><literal type="number" pos:start="63:25" pos:end="63:26">2.</literal></expr></argument>, <argument pos:start="63:29" pos:end="63:52"><expr pos:start="63:29" pos:end="63:52"><operator pos:start="63:29" pos:end="63:29">(</operator><name pos:start="63:30" pos:end="63:32">int</name><operator pos:start="63:33" pos:end="63:33">)</operator><call pos:start="63:34" pos:end="63:48"><name pos:start="63:34" pos:end="63:41">get_bits</name><argument_list pos:start="63:42" pos:end="63:48">(<argument pos:start="63:43" pos:end="63:44"><expr pos:start="63:43" pos:end="63:44"><name pos:start="63:43" pos:end="63:44">gb</name></expr></argument>, <argument pos:start="63:47" pos:end="63:47"><expr pos:start="63:47" pos:end="63:47"><literal type="number" pos:start="63:47" pos:end="63:47">2</literal></expr></argument>)</argument_list></call> <operator pos:start="63:50" pos:end="63:50">-</operator> <literal type="number" pos:start="63:52" pos:end="63:52">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="69:19"><if pos:start="67:5" pos:end="69:19">if <condition pos:start="67:8" pos:end="67:46">(<expr pos:start="67:9" pos:end="67:45"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:12">ret</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:44"><name pos:start="67:16" pos:end="67:25">decode_ics</name><argument_list pos:start="67:26" pos:end="67:44">(<argument pos:start="67:27" pos:end="67:28"><expr pos:start="67:27" pos:end="67:28"><name pos:start="67:27" pos:end="67:28">ac</name></expr></argument>, <argument pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:33">sce</name></expr></argument>, <argument pos:start="67:36" pos:end="67:37"><expr pos:start="67:36" pos:end="67:37"><name pos:start="67:36" pos:end="67:37">gb</name></expr></argument>, <argument pos:start="67:40" pos:end="67:40"><expr pos:start="67:40" pos:end="67:40"><literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">0</literal></expr></argument>)</argument_list></call><operator pos:start="67:45" pos:end="67:45">)</operator></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:19"><block_content pos:start="69:9" pos:end="69:19">

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="73:5" pos:end="129:5">for <control pos:start="73:9" pos:end="73:34">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">c</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:29"><expr pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:17">c</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:28">num_gain</name></expr>;</condition> <incr pos:start="73:31" pos:end="73:33"><expr pos:start="73:31" pos:end="73:33"><name pos:start="73:31" pos:end="73:31">c</name><operator pos:start="73:32" pos:end="73:33">++</operator></expr></incr>)</control> <block pos:start="73:36" pos:end="129:5">{<block_content pos:start="75:9" pos:end="127:9">

        <decl_stmt pos:start="75:9" pos:end="75:20"><decl pos:start="75:9" pos:end="75:19"><type pos:start="75:9" pos:end="75:11"><name pos:start="75:9" pos:end="75:11">int</name></type> <name pos:start="75:13" pos:end="75:15">cge</name> <init pos:start="75:17" pos:end="75:19">= <expr pos:start="75:19" pos:end="75:19"><literal type="number" pos:start="75:19" pos:end="75:19">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:21"><decl pos:start="77:9" pos:end="77:20"><type pos:start="77:9" pos:end="77:11"><name pos:start="77:9" pos:end="77:11">int</name></type> <name pos:start="77:13" pos:end="77:16">gain</name> <init pos:start="77:18" pos:end="77:20">= <expr pos:start="77:20" pos:end="77:20"><literal type="number" pos:start="77:20" pos:end="77:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="79:30"><decl pos:start="79:9" pos:end="79:29"><type pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:13">float</name></type> <name pos:start="79:15" pos:end="79:24">gain_cache</name> <init pos:start="79:26" pos:end="79:29">= <expr pos:start="79:28" pos:end="79:29"><literal type="number" pos:start="79:28" pos:end="79:29">1.</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:14">(<expr pos:start="81:13" pos:end="81:13"><name pos:start="81:13" pos:end="81:13">c</name></expr>)</condition> <block pos:start="81:16" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:42">

            <expr_stmt pos:start="83:13" pos:end="83:74"><expr pos:start="83:13" pos:end="83:73"><name pos:start="83:13" pos:end="83:15">cge</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <ternary pos:start="83:19" pos:end="83:73"><condition pos:start="83:19" pos:end="83:55"><expr pos:start="83:19" pos:end="83:53"><name pos:start="83:19" pos:end="83:38"><name pos:start="83:19" pos:end="83:22">coup</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:38">coupling_point</name></name> <operator pos:start="83:40" pos:end="83:41">==</operator> <name pos:start="83:43" pos:end="83:53">AFTER_IMDCT</name></expr> ?</condition><then pos:start="83:57" pos:end="83:57"> <expr pos:start="83:57" pos:end="83:57"><literal type="number" pos:start="83:57" pos:end="83:57">1</literal></expr> </then><else pos:start="83:59" pos:end="83:73">: <expr pos:start="83:61" pos:end="83:73"><call pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:69">get_bits1</name><argument_list pos:start="83:70" pos:end="83:73">(<argument pos:start="83:71" pos:end="83:72"><expr pos:start="83:71" pos:end="83:72"><name pos:start="83:71" pos:end="83:72">gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:76"><expr pos:start="85:13" pos:end="85:75"><name pos:start="85:13" pos:end="85:16">gain</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <ternary pos:start="85:20" pos:end="85:75"><condition pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">cge</name></expr> ?</condition><then pos:start="85:26" pos:end="85:72"> <expr pos:start="85:26" pos:end="85:72"><call pos:start="85:26" pos:end="85:67"><name pos:start="85:26" pos:end="85:33">get_vlc2</name><argument_list pos:start="85:34" pos:end="85:67">(<argument pos:start="85:35" pos:end="85:36"><expr pos:start="85:35" pos:end="85:36"><name pos:start="85:35" pos:end="85:36">gb</name></expr></argument>, <argument pos:start="85:39" pos:end="85:60"><expr pos:start="85:39" pos:end="85:60"><name pos:start="85:39" pos:end="85:60"><name pos:start="85:39" pos:end="85:54">vlc_scalefactors</name><operator pos:start="85:55" pos:end="85:55">.</operator><name pos:start="85:56" pos:end="85:60">table</name></name></expr></argument>, <argument pos:start="85:63" pos:end="85:63"><expr pos:start="85:63" pos:end="85:63"><literal type="number" pos:start="85:63" pos:end="85:63">7</literal></expr></argument>, <argument pos:start="85:66" pos:end="85:66"><expr pos:start="85:66" pos:end="85:66"><literal type="number" pos:start="85:66" pos:end="85:66">3</literal></expr></argument>)</argument_list></call> <operator pos:start="85:69" pos:end="85:69">-</operator> <literal type="number" pos:start="85:71" pos:end="85:72">60</literal></expr></then><else pos:start="85:73" pos:end="85:75">: <expr pos:start="85:75" pos:end="85:75"><literal type="number" pos:start="85:75" pos:end="85:75">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:22">gain_cache</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <call pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:28">pow</name><argument_list pos:start="87:29" pos:end="87:41">(<argument pos:start="87:30" pos:end="87:34"><expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">scale</name></expr></argument>, <argument pos:start="87:37" pos:end="87:40"><expr pos:start="87:37" pos:end="87:40"><name pos:start="87:37" pos:end="87:40">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="91:9" pos:end="127:9">for <control pos:start="91:13" pos:end="91:56">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">g</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:51"><expr pos:start="91:21" pos:end="91:50"><name pos:start="91:21" pos:end="91:21">g</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <name pos:start="91:25" pos:end="91:50"><name pos:start="91:25" pos:end="91:27">sce</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:32">ics</name><operator pos:start="91:33" pos:end="91:33">.</operator><name pos:start="91:34" pos:end="91:50">num_window_groups</name></name></expr>;</condition> <incr pos:start="91:53" pos:end="91:55"><expr pos:start="91:53" pos:end="91:55"><name pos:start="91:53" pos:end="91:53">g</name><operator pos:start="91:54" pos:end="91:55">++</operator></expr></incr>)</control> <block pos:start="91:58" pos:end="127:9">{<block_content pos:start="93:13" pos:end="125:13">

            <for pos:start="93:13" pos:end="125:13">for <control pos:start="93:17" pos:end="93:63">(<init pos:start="93:18" pos:end="93:25"><expr pos:start="93:18" pos:end="93:24"><name pos:start="93:18" pos:end="93:20">sfb</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <literal type="number" pos:start="93:24" pos:end="93:24">0</literal></expr>;</init> <condition pos:start="93:27" pos:end="93:49"><expr pos:start="93:27" pos:end="93:48"><name pos:start="93:27" pos:end="93:29">sfb</name> <operator pos:start="93:31" pos:end="93:31">&lt;</operator> <name pos:start="93:33" pos:end="93:48"><name pos:start="93:33" pos:end="93:35">sce</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:40">ics</name><operator pos:start="93:41" pos:end="93:41">.</operator><name pos:start="93:42" pos:end="93:48">max_sfb</name></name></expr>;</condition> <incr pos:start="93:51" pos:end="93:62"><expr pos:start="93:51" pos:end="93:55"><name pos:start="93:51" pos:end="93:53">sfb</name><operator pos:start="93:54" pos:end="93:55">++</operator></expr><operator pos:start="93:56" pos:end="93:56">,</operator> <expr pos:start="93:58" pos:end="93:62"><name pos:start="93:58" pos:end="93:60">idx</name><operator pos:start="93:61" pos:end="93:62">++</operator></expr></incr>)</control> <block pos:start="93:65" pos:end="125:13">{<block_content pos:start="95:17" pos:end="123:17">

                <if_stmt pos:start="95:17" pos:end="123:17"><if pos:start="95:17" pos:end="123:17">if <condition pos:start="95:20" pos:end="95:51">(<expr pos:start="95:21" pos:end="95:50"><name pos:start="95:21" pos:end="95:39"><name pos:start="95:21" pos:end="95:23">sce</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:34">band_type</name><index pos:start="95:35" pos:end="95:39">[<expr pos:start="95:36" pos:end="95:38"><name pos:start="95:36" pos:end="95:38">idx</name></expr>]</index></name> <operator pos:start="95:41" pos:end="95:42">!=</operator> <name pos:start="95:44" pos:end="95:50">ZERO_BT</name></expr>)</condition> <block pos:start="95:53" pos:end="123:17">{<block_content pos:start="97:21" pos:end="121:52">

                    <if_stmt pos:start="97:21" pos:end="119:21"><if pos:start="97:21" pos:end="119:21">if <condition pos:start="97:24" pos:end="97:29">(<expr pos:start="97:25" pos:end="97:28"><operator pos:start="97:25" pos:end="97:25">!</operator><name pos:start="97:26" pos:end="97:28">cge</name></expr>)</condition> <block pos:start="97:31" pos:end="119:21">{<block_content pos:start="99:25" pos:end="117:25">

                        <decl_stmt pos:start="99:25" pos:end="99:80"><decl pos:start="99:25" pos:end="99:79"><type pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">int</name></type> <name pos:start="99:29" pos:end="99:29">t</name> <init pos:start="99:31" pos:end="99:79">= <expr pos:start="99:33" pos:end="99:79"><call pos:start="99:33" pos:end="99:74"><name pos:start="99:33" pos:end="99:40">get_vlc2</name><argument_list pos:start="99:41" pos:end="99:74">(<argument pos:start="99:42" pos:end="99:43"><expr pos:start="99:42" pos:end="99:43"><name pos:start="99:42" pos:end="99:43">gb</name></expr></argument>, <argument pos:start="99:46" pos:end="99:67"><expr pos:start="99:46" pos:end="99:67"><name pos:start="99:46" pos:end="99:67"><name pos:start="99:46" pos:end="99:61">vlc_scalefactors</name><operator pos:start="99:62" pos:end="99:62">.</operator><name pos:start="99:63" pos:end="99:67">table</name></name></expr></argument>, <argument pos:start="99:70" pos:end="99:70"><expr pos:start="99:70" pos:end="99:70"><literal type="number" pos:start="99:70" pos:end="99:70">7</literal></expr></argument>, <argument pos:start="99:73" pos:end="99:73"><expr pos:start="99:73" pos:end="99:73"><literal type="number" pos:start="99:73" pos:end="99:73">3</literal></expr></argument>)</argument_list></call> <operator pos:start="99:76" pos:end="99:76">-</operator> <literal type="number" pos:start="99:78" pos:end="99:79">60</literal></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="101:25" pos:end="117:25"><if pos:start="101:25" pos:end="117:25">if <condition pos:start="101:28" pos:end="101:30">(<expr pos:start="101:29" pos:end="101:29"><name pos:start="101:29" pos:end="101:29">t</name></expr>)</condition> <block pos:start="101:32" pos:end="117:25">{<block_content pos:start="103:29" pos:end="115:62">

                            <decl_stmt pos:start="103:29" pos:end="103:38"><decl pos:start="103:29" pos:end="103:37"><type pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">int</name></type> <name pos:start="103:33" pos:end="103:33">s</name> <init pos:start="103:35" pos:end="103:37">= <expr pos:start="103:37" pos:end="103:37"><literal type="number" pos:start="103:37" pos:end="103:37">1</literal></expr></init></decl>;</decl_stmt>

                            <if_stmt pos:start="105:29" pos:end="111:29"><if pos:start="105:29" pos:end="111:29">if <condition pos:start="105:32" pos:end="105:37">(<expr pos:start="105:33" pos:end="105:36"><name pos:start="105:33" pos:end="105:36">sign</name></expr>)</condition> <block pos:start="105:39" pos:end="111:29">{<block_content pos:start="107:33" pos:end="109:40">

                                <expr_stmt pos:start="107:33" pos:end="107:52"><expr pos:start="107:33" pos:end="107:51"><name pos:start="107:33" pos:end="107:33">s</name>  <operator pos:start="107:36" pos:end="107:37">-=</operator> <literal type="number" pos:start="107:39" pos:end="107:39">2</literal> <operator pos:start="107:41" pos:end="107:41">*</operator> <operator pos:start="107:43" pos:end="107:43">(</operator><name pos:start="107:44" pos:end="107:44">t</name> <operator pos:start="107:46" pos:end="107:46">&amp;</operator> <literal type="number" pos:start="107:48" pos:end="107:50">0x1</literal><operator pos:start="107:51" pos:end="107:51">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="109:33" pos:end="109:40"><expr pos:start="109:33" pos:end="109:39"><name pos:start="109:33" pos:end="109:33">t</name> <operator pos:start="109:35" pos:end="109:37">&gt;&gt;=</operator> <literal type="number" pos:start="109:39" pos:end="109:39">1</literal></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="113:29" pos:end="113:38"><expr pos:start="113:29" pos:end="113:37"><name pos:start="113:29" pos:end="113:32">gain</name> <operator pos:start="113:34" pos:end="113:35">+=</operator> <name pos:start="113:37" pos:end="113:37">t</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="115:29" pos:end="115:62"><expr pos:start="115:29" pos:end="115:61"><name pos:start="115:29" pos:end="115:38">gain_cache</name> <operator pos:start="115:40" pos:end="115:40">=</operator> <call pos:start="115:42" pos:end="115:57"><name pos:start="115:42" pos:end="115:44">pow</name><argument_list pos:start="115:45" pos:end="115:57">(<argument pos:start="115:46" pos:end="115:50"><expr pos:start="115:46" pos:end="115:50"><name pos:start="115:46" pos:end="115:50">scale</name></expr></argument>, <argument pos:start="115:53" pos:end="115:56"><expr pos:start="115:53" pos:end="115:56"><name pos:start="115:53" pos:end="115:56">gain</name></expr></argument>)</argument_list></call> <operator pos:start="115:59" pos:end="115:59">*</operator> <name pos:start="115:61" pos:end="115:61">s</name></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="121:21" pos:end="121:52"><expr pos:start="121:21" pos:end="121:51"><name pos:start="121:21" pos:end="121:38"><name pos:start="121:21" pos:end="121:24">coup</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:30">gain</name><index pos:start="121:31" pos:end="121:33">[<expr pos:start="121:32" pos:end="121:32"><name pos:start="121:32" pos:end="121:32">c</name></expr>]</index><index pos:start="121:34" pos:end="121:38">[<expr pos:start="121:35" pos:end="121:37"><name pos:start="121:35" pos:end="121:37">idx</name></expr>]</index></name> <operator pos:start="121:40" pos:end="121:40">=</operator> <name pos:start="121:42" pos:end="121:51">gain_cache</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
