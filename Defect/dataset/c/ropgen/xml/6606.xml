<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6606.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">cpu_exec</name><parameter_list pos:start="1:13" pos:end="1:27">(<parameter pos:start="1:14" pos:end="1:26"><decl pos:start="1:14" pos:end="1:26"><type pos:start="1:14" pos:end="1:23"><name pos:start="1:14" pos:end="1:21">CPUState</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:26">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="459:1">{<block_content pos:start="5:5" pos:end="457:15">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cc</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:32">CPU_GET_CLASS</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:18">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:18">TARGET_I386</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">X86CPU</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:19">x86_cpu</name> <init pos:start="9:21" pos:end="9:34">= <expr pos:start="9:23" pos:end="9:34"><call pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:29">X86_CPU</name><argument_list pos:start="9:30" pos:end="9:34">(<argument pos:start="9:31" pos:end="9:33"><expr pos:start="9:31" pos:end="9:33"><name pos:start="9:31" pos:end="9:33">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">CPUArchState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">env</name> <init pos:start="11:23" pos:end="11:37">= <expr pos:start="11:25" pos:end="11:37"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:32">x86_cpu</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:37">env</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:30">interrupt_request</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">TranslationBlock</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:19">tc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">uintptr_t</name></type> <name pos:start="21:15" pos:end="21:21">next_tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">SyncClocks</name></type> <name pos:start="23:16" pos:end="23:17">sc</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="51:5"><if pos:start="27:5" pos:end="51:5">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:11">cpu</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:19">halted</name></name></expr>)</condition> <block pos:start="27:22" pos:end="51:5">{<block_content pos:start="31:9" pos:end="49:24">

<cpp:if pos:start="29:1" pos:end="29:54">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:54"><call pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:24">(<argument pos:start="29:13" pos:end="29:23"><expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="29:26" pos:end="29:27">&amp;&amp;</operator> <operator pos:start="29:29" pos:end="29:29">!</operator><call pos:start="29:30" pos:end="29:54"><name pos:start="29:30" pos:end="29:36">defined</name><argument_list pos:start="29:37" pos:end="29:54">(<argument pos:start="29:38" pos:end="29:53"><expr pos:start="29:38" pos:end="29:53"><name pos:start="29:38" pos:end="29:53">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="31:9" pos:end="40:0"><if pos:start="31:9" pos:end="40:0">if <condition pos:start="31:12" pos:end="31:56">(<expr pos:start="31:13" pos:end="31:55"><name pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:15">cpu</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:34">interrupt_request</name></name> <operator pos:start="31:36" pos:end="31:36">&amp;</operator> <name pos:start="31:38" pos:end="31:55">CPU_INTERRUPT_POLL</name></expr>)</condition> <block pos:start="31:58" pos:end="40:0">{<block_content pos:start="33:13" pos:end="35:57">

            <expr_stmt pos:start="33:13" pos:end="33:47"><expr pos:start="33:13" pos:end="33:46"><call pos:start="33:13" pos:end="33:46"><name pos:start="33:13" pos:end="33:25">apic_poll_irq</name><argument_list pos:start="33:26" pos:end="33:46">(<argument pos:start="33:27" pos:end="33:45"><expr pos:start="33:27" pos:end="33:45"><name pos:start="33:27" pos:end="33:45"><name pos:start="33:27" pos:end="33:33">x86_cpu</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:45">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:57"><expr pos:start="35:13" pos:end="35:56"><call pos:start="35:13" pos:end="35:56"><name pos:start="35:13" pos:end="35:31">cpu_reset_interrupt</name><argument_list pos:start="35:32" pos:end="35:56">(<argument pos:start="35:33" pos:end="35:35"><expr pos:start="35:33" pos:end="35:35"><name pos:start="35:33" pos:end="35:35">cpu</name></expr></argument>, <argument pos:start="35:38" pos:end="35:55"><expr pos:start="35:38" pos:end="35:55"><name pos:start="35:38" pos:end="35:55">CPU_INTERRUPT_POLL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:31">(<expr pos:start="41:13" pos:end="41:30"><operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="41:30"><name pos:start="41:14" pos:end="41:25">cpu_has_work</name><argument_list pos:start="41:26" pos:end="41:30">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:33" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:31">

            <return pos:start="43:13" pos:end="43:31">return <expr pos:start="43:20" pos:end="43:30"><name pos:start="43:20" pos:end="43:30">EXCP_HALTED</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:24"><expr pos:start="49:9" pos:end="49:23"><name pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:11">cpu</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:19">halted</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <literal type="number" pos:start="49:23" pos:end="49:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:15">current_cpu</name> <operator pos:start="55:17" pos:end="55:17">=</operator> <name pos:start="55:19" pos:end="55:21">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:41"><expr pos:start="57:5" pos:end="57:40"><call pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:17">atomic_mb_set</name><argument_list pos:start="57:18" pos:end="57:40">(<argument pos:start="57:19" pos:end="57:34"><expr pos:start="57:19" pos:end="57:34"><operator pos:start="57:19" pos:end="57:19">&amp;</operator><name pos:start="57:20" pos:end="57:34">tcg_current_cpu</name></expr></argument>, <argument pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:20"><expr pos:start="59:5" pos:end="59:19"><call pos:start="59:5" pos:end="59:19"><name pos:start="59:5" pos:end="59:17">rcu_read_lock</name><argument_list pos:start="59:18" pos:end="59:19">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:48">(<expr pos:start="63:9" pos:end="63:47"><call pos:start="63:9" pos:end="63:47"><name pos:start="63:9" pos:end="63:16">unlikely</name><argument_list pos:start="63:17" pos:end="63:47">(<argument pos:start="63:18" pos:end="63:46"><expr pos:start="63:18" pos:end="63:46"><call pos:start="63:18" pos:end="63:46"><name pos:start="63:18" pos:end="63:31">atomic_mb_read</name><argument_list pos:start="63:32" pos:end="63:46">(<argument pos:start="63:33" pos:end="63:45"><expr pos:start="63:33" pos:end="63:45"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:45">exit_request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:50" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:30">

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:11">cpu</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:25">exit_request</name></name> <operator pos:start="65:27" pos:end="65:27">=</operator> <literal type="number" pos:start="65:29" pos:end="65:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:28"><expr pos:start="71:5" pos:end="71:27"><call pos:start="71:5" pos:end="71:27"><name pos:start="71:5" pos:end="71:22"><name pos:start="71:5" pos:end="71:6">cc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:22">cpu_exec_enter</name></name><argument_list pos:start="71:23" pos:end="71:27">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="83:7">/* Calculate difference between guest clock and host clock.

     * This delay includes the delay of the last cycle, so

     * what we have to do is sleep until it is 0. As for the

     * advance/delay we gain here, we try to fix it next time.

     */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:32"><expr pos:start="85:5" pos:end="85:31"><call pos:start="85:5" pos:end="85:31"><name pos:start="85:5" pos:end="85:21">init_delay_params</name><argument_list pos:start="85:22" pos:end="85:31">(<argument pos:start="85:23" pos:end="85:25"><expr pos:start="85:23" pos:end="85:25"><operator pos:start="85:23" pos:end="85:23">&amp;</operator><name pos:start="85:24" pos:end="85:25">sc</name></expr></argument>, <argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:55">/* prepare setjmp context for exception handling */</comment>

    <for pos:start="91:5" pos:end="437:5">for<control pos:start="91:8" pos:end="91:11">(<init pos:start="91:9" pos:end="91:9">;</init><condition pos:start="91:10" pos:end="91:10">;</condition><incr/>)</control> <block pos:start="91:13" pos:end="437:5">{<block_content pos:start="93:9" pos:end="435:9">

        <if_stmt pos:start="93:9" pos:end="435:9"><if pos:start="93:9" pos:end="413:9">if <condition pos:start="93:12" pos:end="93:44">(<expr pos:start="93:13" pos:end="93:43"><call pos:start="93:13" pos:end="93:38"><name pos:start="93:13" pos:end="93:21">sigsetjmp</name><argument_list pos:start="93:22" pos:end="93:38">(<argument pos:start="93:23" pos:end="93:34"><expr pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:34"><name pos:start="93:23" pos:end="93:25">cpu</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:34">jmp_env</name></name></expr></argument>, <argument pos:start="93:37" pos:end="93:37"><expr pos:start="93:37" pos:end="93:37"><literal type="number" pos:start="93:37" pos:end="93:37">0</literal></expr></argument>)</argument_list></call> <operator pos:start="93:40" pos:end="93:41">==</operator> <literal type="number" pos:start="93:43" pos:end="93:43">0</literal></expr>)</condition> <block pos:start="93:46" pos:end="413:9">{<block_content pos:start="97:13" pos:end="411:13">

            <comment type="block" pos:start="95:13" pos:end="95:64">/* if an exception is pending, we execute it here */</comment>

            <if_stmt pos:start="97:13" pos:end="147:13"><if pos:start="97:13" pos:end="147:13">if <condition pos:start="97:16" pos:end="97:42">(<expr pos:start="97:17" pos:end="97:41"><name pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:19">cpu</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:36">exception_index</name></name> <operator pos:start="97:38" pos:end="97:39">&gt;=</operator> <literal type="number" pos:start="97:41" pos:end="97:41">0</literal></expr>)</condition> <block pos:start="97:44" pos:end="147:13">{<block_content pos:start="99:17" pos:end="145:17">

                <if_stmt pos:start="99:17" pos:end="145:17"><if pos:start="99:17" pos:end="115:17">if <condition pos:start="99:20" pos:end="99:59">(<expr pos:start="99:21" pos:end="99:58"><name pos:start="99:21" pos:end="99:40"><name pos:start="99:21" pos:end="99:23">cpu</name><operator pos:start="99:24" pos:end="99:25">-&gt;</operator><name pos:start="99:26" pos:end="99:40">exception_index</name></name> <operator pos:start="99:42" pos:end="99:43">&gt;=</operator> <name pos:start="99:45" pos:end="99:58">EXCP_INTERRUPT</name></expr>)</condition> <block pos:start="99:61" pos:end="115:17">{<block_content pos:start="103:21" pos:end="113:26">

                    <comment type="block" pos:start="101:21" pos:end="101:66">/* exit request from the cpu execution loop */</comment>

                    <expr_stmt pos:start="103:21" pos:end="103:47"><expr pos:start="103:21" pos:end="103:46"><name pos:start="103:21" pos:end="103:23">ret</name> <operator pos:start="103:25" pos:end="103:25">=</operator> <name pos:start="103:27" pos:end="103:46"><name pos:start="103:27" pos:end="103:29">cpu</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:46">exception_index</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="105:21" pos:end="109:21"><if pos:start="105:21" pos:end="109:21">if <condition pos:start="105:24" pos:end="105:42">(<expr pos:start="105:25" pos:end="105:41"><name pos:start="105:25" pos:end="105:27">ret</name> <operator pos:start="105:29" pos:end="105:30">==</operator> <name pos:start="105:32" pos:end="105:41">EXCP_DEBUG</name></expr>)</condition> <block pos:start="105:44" pos:end="109:21">{<block_content pos:start="107:25" pos:end="107:56">

                        <expr_stmt pos:start="107:25" pos:end="107:56"><expr pos:start="107:25" pos:end="107:55"><call pos:start="107:25" pos:end="107:55"><name pos:start="107:25" pos:end="107:50">cpu_handle_debug_exception</name><argument_list pos:start="107:51" pos:end="107:55">(<argument pos:start="107:52" pos:end="107:54"><expr pos:start="107:52" pos:end="107:54"><name pos:start="107:52" pos:end="107:54">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="111:21" pos:end="111:46"><expr pos:start="111:21" pos:end="111:45"><name pos:start="111:21" pos:end="111:40"><name pos:start="111:21" pos:end="111:23">cpu</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:40">exception_index</name></name> <operator pos:start="111:42" pos:end="111:42">=</operator> <operator pos:start="111:44" pos:end="111:44">-</operator><literal type="number" pos:start="111:45" pos:end="111:45">1</literal></expr>;</expr_stmt>

                    <break pos:start="113:21" pos:end="113:26">break;</break>

                </block_content>}</block></if> <else pos:start="115:19" pos:end="145:17">else <block pos:start="115:24" pos:end="145:17">{<block_content pos:start="127:21" pos:end="144:0">

<cpp:if pos:start="117:1" pos:end="117:29">#<cpp:directive pos:start="117:2" pos:end="117:3">if</cpp:directive> <expr pos:start="117:5" pos:end="117:29"><call pos:start="117:5" pos:end="117:29"><name pos:start="117:5" pos:end="117:11">defined</name><argument_list pos:start="117:12" pos:end="117:29">(<argument pos:start="117:13" pos:end="117:28"><expr pos:start="117:13" pos:end="117:28"><name pos:start="117:13" pos:end="117:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <comment type="block" pos:start="119:21" pos:end="123:30">/* if user mode only, we simulate a fake exception

                       which will be handled outside the cpu execution

                       loop */</comment>

<cpp:if pos:start="125:1" pos:end="125:24">#<cpp:directive pos:start="125:2" pos:end="125:3">if</cpp:directive> <expr pos:start="125:5" pos:end="125:24"><call pos:start="125:5" pos:end="125:24"><name pos:start="125:5" pos:end="125:11">defined</name><argument_list pos:start="125:12" pos:end="125:24">(<argument pos:start="125:13" pos:end="125:23"><expr pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <expr_stmt pos:start="127:21" pos:end="130:0"><expr pos:start="127:21" pos:end="127:41"><call pos:start="127:21" pos:end="127:41"><name pos:start="127:21" pos:end="127:36"><name pos:start="127:21" pos:end="127:22">cc</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:36">do_interrupt</name></name><argument_list pos:start="127:37" pos:end="127:41">(<argument pos:start="127:38" pos:end="127:40"><expr pos:start="127:38" pos:end="127:40"><name pos:start="127:38" pos:end="127:40">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="129:1" pos:end="129:6">#<cpp:directive pos:start="129:2" pos:end="129:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="131:21" pos:end="131:47"><expr pos:start="131:21" pos:end="131:46"><name pos:start="131:21" pos:end="131:23">ret</name> <operator pos:start="131:25" pos:end="131:25">=</operator> <name pos:start="131:27" pos:end="131:46"><name pos:start="131:27" pos:end="131:29">cpu</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:46">exception_index</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:46"><expr pos:start="133:21" pos:end="133:45"><name pos:start="133:21" pos:end="133:40"><name pos:start="133:21" pos:end="133:23">cpu</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:40">exception_index</name></name> <operator pos:start="133:42" pos:end="133:42">=</operator> <operator pos:start="133:44" pos:end="133:44">-</operator><literal type="number" pos:start="133:45" pos:end="133:45">1</literal></expr>;</expr_stmt>

                    <break pos:start="135:21" pos:end="138:0">break;</break>

<cpp:else pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="139:21" pos:end="139:42"><expr pos:start="139:21" pos:end="139:41"><call pos:start="139:21" pos:end="139:41"><name pos:start="139:21" pos:end="139:36"><name pos:start="139:21" pos:end="139:22">cc</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:36">do_interrupt</name></name><argument_list pos:start="139:37" pos:end="139:41">(<argument pos:start="139:38" pos:end="139:40"><expr pos:start="139:38" pos:end="139:40"><name pos:start="139:38" pos:end="139:40">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="144:0"><expr pos:start="141:21" pos:end="141:45"><name pos:start="141:21" pos:end="141:40"><name pos:start="141:21" pos:end="141:23">cpu</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:40">exception_index</name></name> <operator pos:start="141:42" pos:end="141:42">=</operator> <operator pos:start="141:44" pos:end="141:44">-</operator><literal type="number" pos:start="141:45" pos:end="141:45">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="151:13" pos:end="151:24"><expr pos:start="151:13" pos:end="151:23"><name pos:start="151:13" pos:end="151:19">next_tb</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <literal type="number" pos:start="151:23" pos:end="151:23">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="151:26" pos:end="151:55">/* force lookup of first TB */</comment>

            <for pos:start="153:13" pos:end="411:13">for<control pos:start="153:16" pos:end="153:19">(<init pos:start="153:17" pos:end="153:17">;</init><condition pos:start="153:18" pos:end="153:18">;</condition><incr/>)</control> <block pos:start="153:21" pos:end="411:13">{<block_content pos:start="155:17" pos:end="405:39">

                <expr_stmt pos:start="155:17" pos:end="155:59"><expr pos:start="155:17" pos:end="155:58"><name pos:start="155:17" pos:end="155:33">interrupt_request</name> <operator pos:start="155:35" pos:end="155:35">=</operator> <name pos:start="155:37" pos:end="155:58"><name pos:start="155:37" pos:end="155:39">cpu</name><operator pos:start="155:40" pos:end="155:41">-&gt;</operator><name pos:start="155:42" pos:end="155:58">interrupt_request</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="243:17"><if pos:start="157:17" pos:end="243:17">if <condition pos:start="157:20" pos:end="157:48">(<expr pos:start="157:21" pos:end="157:47"><call pos:start="157:21" pos:end="157:47"><name pos:start="157:21" pos:end="157:28">unlikely</name><argument_list pos:start="157:29" pos:end="157:47">(<argument pos:start="157:30" pos:end="157:46"><expr pos:start="157:30" pos:end="157:46"><name pos:start="157:30" pos:end="157:46">interrupt_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:50" pos:end="243:17">{<block_content pos:start="159:21" pos:end="241:21">

                    <if_stmt pos:start="159:21" pos:end="165:21"><if pos:start="159:21" pos:end="165:21">if <condition pos:start="159:24" pos:end="159:72">(<expr pos:start="159:25" pos:end="159:71"><call pos:start="159:25" pos:end="159:71"><name pos:start="159:25" pos:end="159:32">unlikely</name><argument_list pos:start="159:33" pos:end="159:71">(<argument pos:start="159:34" pos:end="159:70"><expr pos:start="159:34" pos:end="159:70"><name pos:start="159:34" pos:end="159:56"><name pos:start="159:34" pos:end="159:36">cpu</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:56">singlestep_enabled</name></name> <operator pos:start="159:58" pos:end="159:58">&amp;</operator> <name pos:start="159:60" pos:end="159:70">SSTEP_NOIRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:74" pos:end="165:21">{<block_content pos:start="163:25" pos:end="163:71">

                        <comment type="block" pos:start="161:25" pos:end="161:73">/* Mask out external interrupts for this step. */</comment>

                        <expr_stmt pos:start="163:25" pos:end="163:71"><expr pos:start="163:25" pos:end="163:70"><name pos:start="163:25" pos:end="163:41">interrupt_request</name> <operator pos:start="163:43" pos:end="163:44">&amp;=</operator> <operator pos:start="163:46" pos:end="163:46">~</operator><name pos:start="163:47" pos:end="163:70">CPU_INTERRUPT_SSTEP_MASK</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="167:21" pos:end="175:21"><if pos:start="167:21" pos:end="175:21">if <condition pos:start="167:24" pos:end="167:64">(<expr pos:start="167:25" pos:end="167:63"><name pos:start="167:25" pos:end="167:41">interrupt_request</name> <operator pos:start="167:43" pos:end="167:43">&amp;</operator> <name pos:start="167:45" pos:end="167:63">CPU_INTERRUPT_DEBUG</name></expr>)</condition> <block pos:start="167:66" pos:end="175:21">{<block_content pos:start="169:25" pos:end="173:43">

                        <expr_stmt pos:start="169:25" pos:end="169:71"><expr pos:start="169:25" pos:end="169:70"><name pos:start="169:25" pos:end="169:46"><name pos:start="169:25" pos:end="169:27">cpu</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:46">interrupt_request</name></name> <operator pos:start="169:48" pos:end="169:49">&amp;=</operator> <operator pos:start="169:51" pos:end="169:51">~</operator><name pos:start="169:52" pos:end="169:70">CPU_INTERRUPT_DEBUG</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="171:25" pos:end="171:58"><expr pos:start="171:25" pos:end="171:57"><name pos:start="171:25" pos:end="171:44"><name pos:start="171:25" pos:end="171:27">cpu</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:44">exception_index</name></name> <operator pos:start="171:46" pos:end="171:46">=</operator> <name pos:start="171:48" pos:end="171:57">EXCP_DEBUG</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="173:43"><expr pos:start="173:25" pos:end="173:42"><call pos:start="173:25" pos:end="173:42"><name pos:start="173:25" pos:end="173:37">cpu_loop_exit</name><argument_list pos:start="173:38" pos:end="173:42">(<argument pos:start="173:39" pos:end="173:41"><expr pos:start="173:39" pos:end="173:41"><name pos:start="173:39" pos:end="173:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="177:21" pos:end="190:0"><if pos:start="177:21" pos:end="190:0">if <condition pos:start="177:24" pos:end="177:63">(<expr pos:start="177:25" pos:end="177:62"><name pos:start="177:25" pos:end="177:41">interrupt_request</name> <operator pos:start="177:43" pos:end="177:43">&amp;</operator> <name pos:start="177:45" pos:end="177:62">CPU_INTERRUPT_HALT</name></expr>)</condition> <block pos:start="177:65" pos:end="190:0">{<block_content pos:start="179:25" pos:end="185:43">

                        <expr_stmt pos:start="179:25" pos:end="179:70"><expr pos:start="179:25" pos:end="179:69"><name pos:start="179:25" pos:end="179:46"><name pos:start="179:25" pos:end="179:27">cpu</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:46">interrupt_request</name></name> <operator pos:start="179:48" pos:end="179:49">&amp;=</operator> <operator pos:start="179:51" pos:end="179:51">~</operator><name pos:start="179:52" pos:end="179:69">CPU_INTERRUPT_HALT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="181:25" pos:end="181:40"><expr pos:start="181:25" pos:end="181:39"><name pos:start="181:25" pos:end="181:35"><name pos:start="181:25" pos:end="181:27">cpu</name><operator pos:start="181:28" pos:end="181:29">-&gt;</operator><name pos:start="181:30" pos:end="181:35">halted</name></name> <operator pos:start="181:37" pos:end="181:37">=</operator> <literal type="number" pos:start="181:39" pos:end="181:39">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="183:25" pos:end="183:56"><expr pos:start="183:25" pos:end="183:55"><name pos:start="183:25" pos:end="183:44"><name pos:start="183:25" pos:end="183:27">cpu</name><operator pos:start="183:28" pos:end="183:29">-&gt;</operator><name pos:start="183:30" pos:end="183:44">exception_index</name></name> <operator pos:start="183:46" pos:end="183:46">=</operator> <name pos:start="183:48" pos:end="183:55">EXCP_HLT</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="185:25" pos:end="185:43"><expr pos:start="185:25" pos:end="185:42"><call pos:start="185:25" pos:end="185:42"><name pos:start="185:25" pos:end="185:37">cpu_loop_exit</name><argument_list pos:start="185:38" pos:end="185:42">(<argument pos:start="185:39" pos:end="185:41"><expr pos:start="185:39" pos:end="185:41"><name pos:start="185:39" pos:end="185:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="189:1" pos:end="189:24">#<cpp:directive pos:start="189:2" pos:end="189:3">if</cpp:directive> <expr pos:start="189:5" pos:end="189:24"><call pos:start="189:5" pos:end="189:24"><name pos:start="189:5" pos:end="189:11">defined</name><argument_list pos:start="189:12" pos:end="189:24">(<argument pos:start="189:13" pos:end="189:23"><expr pos:start="189:13" pos:end="189:23"><name pos:start="189:13" pos:end="189:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="191:21" pos:end="204:0"><if pos:start="191:21" pos:end="204:0">if <condition pos:start="191:24" pos:end="191:63">(<expr pos:start="191:25" pos:end="191:62"><name pos:start="191:25" pos:end="191:41">interrupt_request</name> <operator pos:start="191:43" pos:end="191:43">&amp;</operator> <name pos:start="191:45" pos:end="191:62">CPU_INTERRUPT_INIT</name></expr>)</condition> <block pos:start="191:65" pos:end="204:0">{<block_content pos:start="193:25" pos:end="199:43">

                        <expr_stmt pos:start="193:25" pos:end="193:77"><expr pos:start="193:25" pos:end="193:76"><call pos:start="193:25" pos:end="193:76"><name pos:start="193:25" pos:end="193:53">cpu_svm_check_intercept_param</name><argument_list pos:start="193:54" pos:end="193:76">(<argument pos:start="193:55" pos:end="193:57"><expr pos:start="193:55" pos:end="193:57"><name pos:start="193:55" pos:end="193:57">env</name></expr></argument>, <argument pos:start="193:60" pos:end="193:72"><expr pos:start="193:60" pos:end="193:72"><name pos:start="193:60" pos:end="193:72">SVM_EXIT_INIT</name></expr></argument>, <argument pos:start="193:75" pos:end="193:75"><expr pos:start="193:75" pos:end="193:75"><literal type="number" pos:start="193:75" pos:end="193:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="195:25" pos:end="195:45"><expr pos:start="195:25" pos:end="195:44"><call pos:start="195:25" pos:end="195:44"><name pos:start="195:25" pos:end="195:35">do_cpu_init</name><argument_list pos:start="195:36" pos:end="195:44">(<argument pos:start="195:37" pos:end="195:43"><expr pos:start="195:37" pos:end="195:43"><name pos:start="195:37" pos:end="195:43">x86_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="197:25" pos:end="197:59"><expr pos:start="197:25" pos:end="197:58"><name pos:start="197:25" pos:end="197:44"><name pos:start="197:25" pos:end="197:27">cpu</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:44">exception_index</name></name> <operator pos:start="197:46" pos:end="197:46">=</operator> <name pos:start="197:48" pos:end="197:58">EXCP_HALTED</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="199:25" pos:end="199:43"><expr pos:start="199:25" pos:end="199:42"><call pos:start="199:25" pos:end="199:42"><name pos:start="199:25" pos:end="199:37">cpu_loop_exit</name><argument_list pos:start="199:38" pos:end="199:42">(<argument pos:start="199:39" pos:end="199:41"><expr pos:start="199:39" pos:end="199:41"><name pos:start="199:39" pos:end="199:41">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="203:1" pos:end="203:5">#<cpp:directive pos:start="203:2" pos:end="203:5">else</cpp:directive></cpp:else>

                    <if_stmt pos:start="205:21" pos:end="212:0"><if pos:start="205:21" pos:end="212:0">if <condition pos:start="205:24" pos:end="205:64">(<expr pos:start="205:25" pos:end="205:63"><name pos:start="205:25" pos:end="205:41">interrupt_request</name> <operator pos:start="205:43" pos:end="205:43">&amp;</operator> <name pos:start="205:45" pos:end="205:63">CPU_INTERRUPT_RESET</name></expr>)</condition> <block pos:start="205:66" pos:end="212:0">{<block_content pos:start="207:25" pos:end="207:39">

                        <expr_stmt pos:start="207:25" pos:end="207:39"><expr pos:start="207:25" pos:end="207:38"><call pos:start="207:25" pos:end="207:38"><name pos:start="207:25" pos:end="207:33">cpu_reset</name><argument_list pos:start="207:34" pos:end="207:38">(<argument pos:start="207:35" pos:end="207:37"><expr pos:start="207:35" pos:end="207:37"><name pos:start="207:35" pos:end="207:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="211:1" pos:end="211:6">#<cpp:directive pos:start="211:2" pos:end="211:6">endif</cpp:directive></cpp:endif>

                    <comment type="block" pos:start="213:21" pos:end="219:61">/* The target hook has 3 exit conditions:

                       False when the interrupt isn't processed,

                       True when it is, and we should restart on a new TB,

                       and via longjmp via cpu_loop_exit.  */</comment>

                    <if_stmt pos:start="221:21" pos:end="225:21"><if pos:start="221:21" pos:end="225:21">if <condition pos:start="221:24" pos:end="221:71">(<expr pos:start="221:25" pos:end="221:70"><call pos:start="221:25" pos:end="221:70"><name pos:start="221:25" pos:end="221:46"><name pos:start="221:25" pos:end="221:26">cc</name><operator pos:start="221:27" pos:end="221:28">-&gt;</operator><name pos:start="221:29" pos:end="221:46">cpu_exec_interrupt</name></name><argument_list pos:start="221:47" pos:end="221:70">(<argument pos:start="221:48" pos:end="221:50"><expr pos:start="221:48" pos:end="221:50"><name pos:start="221:48" pos:end="221:50">cpu</name></expr></argument>, <argument pos:start="221:53" pos:end="221:69"><expr pos:start="221:53" pos:end="221:69"><name pos:start="221:53" pos:end="221:69">interrupt_request</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:73" pos:end="225:21">{<block_content pos:start="223:25" pos:end="223:36">

                        <expr_stmt pos:start="223:25" pos:end="223:36"><expr pos:start="223:25" pos:end="223:35"><name pos:start="223:25" pos:end="223:31">next_tb</name> <operator pos:start="223:33" pos:end="223:33">=</operator> <literal type="number" pos:start="223:35" pos:end="223:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="227:21" pos:end="229:72">/* Don't use the cached interrupt_request value,

                       do_interrupt may have updated the EXITTB flag. */</comment>

                    <if_stmt pos:start="231:21" pos:end="241:21"><if pos:start="231:21" pos:end="241:21">if <condition pos:start="231:24" pos:end="231:70">(<expr pos:start="231:25" pos:end="231:69"><name pos:start="231:25" pos:end="231:46"><name pos:start="231:25" pos:end="231:27">cpu</name><operator pos:start="231:28" pos:end="231:29">-&gt;</operator><name pos:start="231:30" pos:end="231:46">interrupt_request</name></name> <operator pos:start="231:48" pos:end="231:48">&amp;</operator> <name pos:start="231:50" pos:end="231:69">CPU_INTERRUPT_EXITTB</name></expr>)</condition> <block pos:start="231:72" pos:end="241:21">{<block_content pos:start="233:25" pos:end="239:36">

                        <expr_stmt pos:start="233:25" pos:end="233:72"><expr pos:start="233:25" pos:end="233:71"><name pos:start="233:25" pos:end="233:46"><name pos:start="233:25" pos:end="233:27">cpu</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:46">interrupt_request</name></name> <operator pos:start="233:48" pos:end="233:49">&amp;=</operator> <operator pos:start="233:51" pos:end="233:51">~</operator><name pos:start="233:52" pos:end="233:71">CPU_INTERRUPT_EXITTB</name></expr>;</expr_stmt>

                        <comment type="block" pos:start="235:25" pos:end="237:58">/* ensure that no TB jump will be modified as

                           the program flow was changed */</comment>

                        <expr_stmt pos:start="239:25" pos:end="239:36"><expr pos:start="239:25" pos:end="239:35"><name pos:start="239:25" pos:end="239:31">next_tb</name> <operator pos:start="239:33" pos:end="239:33">=</operator> <literal type="number" pos:start="239:35" pos:end="239:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="245:17" pos:end="253:17"><if pos:start="245:17" pos:end="253:17">if <condition pos:start="245:20" pos:end="245:48">(<expr pos:start="245:21" pos:end="245:47"><call pos:start="245:21" pos:end="245:47"><name pos:start="245:21" pos:end="245:28">unlikely</name><argument_list pos:start="245:29" pos:end="245:47">(<argument pos:start="245:30" pos:end="245:46"><expr pos:start="245:30" pos:end="245:46"><name pos:start="245:30" pos:end="245:46"><name pos:start="245:30" pos:end="245:32">cpu</name><operator pos:start="245:33" pos:end="245:34">-&gt;</operator><name pos:start="245:35" pos:end="245:46">exit_request</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:50" pos:end="253:17">{<block_content pos:start="247:21" pos:end="251:39">

                    <expr_stmt pos:start="247:21" pos:end="247:42"><expr pos:start="247:21" pos:end="247:41"><name pos:start="247:21" pos:end="247:37"><name pos:start="247:21" pos:end="247:23">cpu</name><operator pos:start="247:24" pos:end="247:25">-&gt;</operator><name pos:start="247:26" pos:end="247:37">exit_request</name></name> <operator pos:start="247:39" pos:end="247:39">=</operator> <literal type="number" pos:start="247:41" pos:end="247:41">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="249:21" pos:end="249:58"><expr pos:start="249:21" pos:end="249:57"><name pos:start="249:21" pos:end="249:40"><name pos:start="249:21" pos:end="249:23">cpu</name><operator pos:start="249:24" pos:end="249:25">-&gt;</operator><name pos:start="249:26" pos:end="249:40">exception_index</name></name> <operator pos:start="249:42" pos:end="249:42">=</operator> <name pos:start="249:44" pos:end="249:57">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="251:21" pos:end="251:39"><expr pos:start="251:21" pos:end="251:38"><call pos:start="251:21" pos:end="251:38"><name pos:start="251:21" pos:end="251:33">cpu_loop_exit</name><argument_list pos:start="251:34" pos:end="251:38">(<argument pos:start="251:35" pos:end="251:37"><expr pos:start="251:35" pos:end="251:37"><name pos:start="251:35" pos:end="251:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:26"><expr pos:start="255:17" pos:end="255:25"><call pos:start="255:17" pos:end="255:25"><name pos:start="255:17" pos:end="255:23">tb_lock</name><argument_list pos:start="255:24" pos:end="255:25">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:39"><expr pos:start="257:17" pos:end="257:38"><name pos:start="257:17" pos:end="257:18">tb</name> <operator pos:start="257:20" pos:end="257:20">=</operator> <call pos:start="257:22" pos:end="257:38"><name pos:start="257:22" pos:end="257:33">tb_find_fast</name><argument_list pos:start="257:34" pos:end="257:38">(<argument pos:start="257:35" pos:end="257:37"><expr pos:start="257:35" pos:end="257:37"><name pos:start="257:35" pos:end="257:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="259:17" pos:end="261:46">/* Note: we do it here to avoid a gcc bug on Mac OS X when

                   doing it in tb_find_slow */</comment>

                <if_stmt pos:start="263:17" pos:end="275:17"><if pos:start="263:17" pos:end="275:17">if <condition pos:start="263:20" pos:end="263:55">(<expr pos:start="263:21" pos:end="263:54"><name pos:start="263:21" pos:end="263:54"><name pos:start="263:21" pos:end="263:27">tcg_ctx</name><operator pos:start="263:28" pos:end="263:28">.</operator><name pos:start="263:29" pos:end="263:34">tb_ctx</name><operator pos:start="263:35" pos:end="263:35">.</operator><name pos:start="263:36" pos:end="263:54">tb_invalidated_flag</name></name></expr>)</condition> <block pos:start="263:57" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:59">

                    <comment type="block" pos:start="265:21" pos:end="269:60">/* as some TB could have been invalidated because

                       of memory exceptions while generating the code, we

                       must recompute the hash index here */</comment>

                    <expr_stmt pos:start="271:21" pos:end="271:32"><expr pos:start="271:21" pos:end="271:31"><name pos:start="271:21" pos:end="271:27">next_tb</name> <operator pos:start="271:29" pos:end="271:29">=</operator> <literal type="number" pos:start="271:31" pos:end="271:31">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:59"><expr pos:start="273:21" pos:end="273:58"><name pos:start="273:21" pos:end="273:54"><name pos:start="273:21" pos:end="273:27">tcg_ctx</name><operator pos:start="273:28" pos:end="273:28">.</operator><name pos:start="273:29" pos:end="273:34">tb_ctx</name><operator pos:start="273:35" pos:end="273:35">.</operator><name pos:start="273:36" pos:end="273:54">tb_invalidated_flag</name></name> <operator pos:start="273:56" pos:end="273:56">=</operator> <literal type="number" pos:start="273:58" pos:end="273:58">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="277:17" pos:end="283:17"><if pos:start="277:17" pos:end="283:17">if <condition pos:start="277:20" pos:end="277:53">(<expr pos:start="277:21" pos:end="277:52"><call pos:start="277:21" pos:end="277:52"><name pos:start="277:21" pos:end="277:38">qemu_loglevel_mask</name><argument_list pos:start="277:39" pos:end="277:52">(<argument pos:start="277:40" pos:end="277:51"><expr pos:start="277:40" pos:end="277:51"><name pos:start="277:40" pos:end="277:51">CPU_LOG_EXEC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:55" pos:end="283:17">{<block_content pos:start="279:21" pos:end="281:72">

                    <expr_stmt pos:start="279:21" pos:end="281:72"><expr pos:start="279:21" pos:end="281:71"><call pos:start="279:21" pos:end="281:71"><name pos:start="279:21" pos:end="279:28">qemu_log</name><argument_list pos:start="279:29" pos:end="281:71">(<argument pos:start="279:30" pos:end="279:64"><expr pos:start="279:30" pos:end="279:64"><literal type="string" pos:start="279:30" pos:end="279:41">"Trace %p ["</literal> <name pos:start="279:43" pos:end="279:55">TARGET_FMT_lx</name> <literal type="string" pos:start="279:57" pos:end="279:64">"] %s\n"</literal></expr></argument>,

                             <argument pos:start="281:30" pos:end="281:39"><expr pos:start="281:30" pos:end="281:39"><name pos:start="281:30" pos:end="281:39"><name pos:start="281:30" pos:end="281:31">tb</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:39">tc_ptr</name></name></expr></argument>, <argument pos:start="281:42" pos:end="281:47"><expr pos:start="281:42" pos:end="281:47"><name pos:start="281:42" pos:end="281:47"><name pos:start="281:42" pos:end="281:43">tb</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:47">pc</name></name></expr></argument>, <argument pos:start="281:50" pos:end="281:70"><expr pos:start="281:50" pos:end="281:70"><call pos:start="281:50" pos:end="281:70"><name pos:start="281:50" pos:end="281:62">lookup_symbol</name><argument_list pos:start="281:63" pos:end="281:70">(<argument pos:start="281:64" pos:end="281:69"><expr pos:start="281:64" pos:end="281:69"><name pos:start="281:64" pos:end="281:69"><name pos:start="281:64" pos:end="281:65">tb</name><operator pos:start="281:66" pos:end="281:67">-&gt;</operator><name pos:start="281:68" pos:end="281:69">pc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="285:17" pos:end="289:27">/* see if we can patch the calling TB. When the TB

                   spans two pages, we cannot safely do a direct

                   jump. */</comment>

                <if_stmt pos:start="291:17" pos:end="299:17"><if pos:start="291:17" pos:end="299:17">if <condition pos:start="291:20" pos:end="293:63">(<expr pos:start="291:21" pos:end="293:62"><name pos:start="291:21" pos:end="291:27">next_tb</name> <operator pos:start="291:29" pos:end="291:30">!=</operator> <literal type="number" pos:start="291:32" pos:end="291:32">0</literal> <operator pos:start="291:34" pos:end="291:35">&amp;&amp;</operator> <name pos:start="291:37" pos:end="291:52"><name pos:start="291:37" pos:end="291:38">tb</name><operator pos:start="291:39" pos:end="291:40">-&gt;</operator><name pos:start="291:41" pos:end="291:49">page_addr</name><index pos:start="291:50" pos:end="291:52">[<expr pos:start="291:51" pos:end="291:51"><literal type="number" pos:start="291:51" pos:end="291:51">1</literal></expr>]</index></name> <operator pos:start="291:54" pos:end="291:55">==</operator> <operator pos:start="291:57" pos:end="291:57">-</operator><literal type="number" pos:start="291:58" pos:end="291:58">1</literal>

                    <operator pos:start="293:21" pos:end="293:22">&amp;&amp;</operator> <operator pos:start="293:24" pos:end="293:24">!</operator><call pos:start="293:25" pos:end="293:62"><name pos:start="293:25" pos:end="293:42">qemu_loglevel_mask</name><argument_list pos:start="293:43" pos:end="293:62">(<argument pos:start="293:44" pos:end="293:61"><expr pos:start="293:44" pos:end="293:61"><name pos:start="293:44" pos:end="293:61">CPU_LOG_TB_NOCHAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="293:65" pos:end="299:17">{<block_content pos:start="295:21" pos:end="297:60">

                    <expr_stmt pos:start="295:21" pos:end="297:60"><expr pos:start="295:21" pos:end="297:59"><call pos:start="295:21" pos:end="297:59"><name pos:start="295:21" pos:end="295:31">tb_add_jump</name><argument_list pos:start="295:32" pos:end="297:59">(<argument pos:start="295:33" pos:end="295:77"><expr pos:start="295:33" pos:end="295:77"><operator pos:start="295:33" pos:end="295:33">(</operator><name pos:start="295:34" pos:end="295:49">TranslationBlock</name> <operator pos:start="295:51" pos:end="295:51">*</operator><operator pos:start="295:52" pos:end="295:52">)</operator><operator pos:start="295:53" pos:end="295:53">(</operator><name pos:start="295:54" pos:end="295:60">next_tb</name> <operator pos:start="295:62" pos:end="295:62">&amp;</operator> <operator pos:start="295:64" pos:end="295:64">~</operator><name pos:start="295:65" pos:end="295:76">TB_EXIT_MASK</name><operator pos:start="295:77" pos:end="295:77">)</operator></expr></argument>,

                                <argument pos:start="297:33" pos:end="297:54"><expr pos:start="297:33" pos:end="297:54"><name pos:start="297:33" pos:end="297:39">next_tb</name> <operator pos:start="297:41" pos:end="297:41">&amp;</operator> <name pos:start="297:43" pos:end="297:54">TB_EXIT_MASK</name></expr></argument>, <argument pos:start="297:57" pos:end="297:58"><expr pos:start="297:57" pos:end="297:58"><name pos:start="297:57" pos:end="297:58">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:28"><expr pos:start="301:17" pos:end="301:27"><call pos:start="301:17" pos:end="301:27"><name pos:start="301:17" pos:end="301:25">tb_unlock</name><argument_list pos:start="301:26" pos:end="301:27">()</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="303:17" pos:end="399:17"><if pos:start="303:17" pos:end="399:17">if <condition pos:start="303:20" pos:end="303:47">(<expr pos:start="303:21" pos:end="303:46"><call pos:start="303:21" pos:end="303:46"><name pos:start="303:21" pos:end="303:26">likely</name><argument_list pos:start="303:27" pos:end="303:46">(<argument pos:start="303:28" pos:end="303:45"><expr pos:start="303:28" pos:end="303:45"><operator pos:start="303:28" pos:end="303:28">!</operator><name pos:start="303:29" pos:end="303:45"><name pos:start="303:29" pos:end="303:31">cpu</name><operator pos:start="303:32" pos:end="303:33">-&gt;</operator><name pos:start="303:34" pos:end="303:45">exit_request</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:49" pos:end="399:17">{<block_content pos:start="305:21" pos:end="397:21">

                    <expr_stmt pos:start="305:21" pos:end="305:46"><expr pos:start="305:21" pos:end="305:45"><call pos:start="305:21" pos:end="305:45"><name pos:start="305:21" pos:end="305:33">trace_exec_tb</name><argument_list pos:start="305:34" pos:end="305:45">(<argument pos:start="305:35" pos:end="305:36"><expr pos:start="305:35" pos:end="305:36"><name pos:start="305:35" pos:end="305:36">tb</name></expr></argument>, <argument pos:start="305:39" pos:end="305:44"><expr pos:start="305:39" pos:end="305:44"><name pos:start="305:39" pos:end="305:44"><name pos:start="305:39" pos:end="305:40">tb</name><operator pos:start="305:41" pos:end="305:42">-&gt;</operator><name pos:start="305:43" pos:end="305:44">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="307:21" pos:end="307:40"><expr pos:start="307:21" pos:end="307:39"><name pos:start="307:21" pos:end="307:26">tc_ptr</name> <operator pos:start="307:28" pos:end="307:28">=</operator> <name pos:start="307:30" pos:end="307:39"><name pos:start="307:30" pos:end="307:31">tb</name><operator pos:start="307:32" pos:end="307:33">-&gt;</operator><name pos:start="307:34" pos:end="307:39">tc_ptr</name></name></expr>;</expr_stmt>

                    <comment type="block" pos:start="309:21" pos:end="309:52">/* execute the generated code */</comment>

                    <expr_stmt pos:start="311:21" pos:end="311:41"><expr pos:start="311:21" pos:end="311:40"><name pos:start="311:21" pos:end="311:35"><name pos:start="311:21" pos:end="311:23">cpu</name><operator pos:start="311:24" pos:end="311:25">-&gt;</operator><name pos:start="311:26" pos:end="311:35">current_tb</name></name> <operator pos:start="311:37" pos:end="311:37">=</operator> <name pos:start="311:39" pos:end="311:40">tb</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:55"><expr pos:start="313:21" pos:end="313:54"><name pos:start="313:21" pos:end="313:27">next_tb</name> <operator pos:start="313:29" pos:end="313:29">=</operator> <call pos:start="313:31" pos:end="313:54"><name pos:start="313:31" pos:end="313:41">cpu_tb_exec</name><argument_list pos:start="313:42" pos:end="313:54">(<argument pos:start="313:43" pos:end="313:45"><expr pos:start="313:43" pos:end="313:45"><name pos:start="313:43" pos:end="313:45">cpu</name></expr></argument>, <argument pos:start="313:48" pos:end="313:53"><expr pos:start="313:48" pos:end="313:53"><name pos:start="313:48" pos:end="313:53">tc_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="315:21" pos:end="315:43"><expr pos:start="315:21" pos:end="315:42"><name pos:start="315:21" pos:end="315:35"><name pos:start="315:21" pos:end="315:23">cpu</name><operator pos:start="315:24" pos:end="315:25">-&gt;</operator><name pos:start="315:26" pos:end="315:35">current_tb</name></name> <operator pos:start="315:37" pos:end="315:37">=</operator> <name pos:start="315:39" pos:end="315:42">NULL</name></expr>;</expr_stmt>

                    <switch pos:start="317:21" pos:end="397:21">switch <condition pos:start="317:28" pos:end="317:51">(<expr pos:start="317:29" pos:end="317:50"><name pos:start="317:29" pos:end="317:35">next_tb</name> <operator pos:start="317:37" pos:end="317:37">&amp;</operator> <name pos:start="317:39" pos:end="317:50">TB_EXIT_MASK</name></expr>)</condition> <block pos:start="317:53" pos:end="397:21">{<block_content pos:start="319:21" pos:end="395:30">

                    <case pos:start="319:21" pos:end="319:43">case <expr pos:start="319:26" pos:end="319:42"><name pos:start="319:26" pos:end="319:42">TB_EXIT_REQUESTED</name></expr>:</case>

                        <comment type="block" pos:start="321:25" pos:end="339:27">/* Something asked us to stop executing

                         * chained TBs; just continue round the main

                         * loop. Whatever requested the exit will also

                         * have set something else (eg exit_request or

                         * interrupt_request) which we will handle

                         * next time around the loop.  But we need to

                         * ensure the tcg_exit_req read in generated code

                         * comes before the next read of cpu-&gt;exit_request

                         * or cpu-&gt;interrupt_request.

                         */</comment>

                        <expr_stmt pos:start="341:25" pos:end="341:34"><expr pos:start="341:25" pos:end="341:33"><call pos:start="341:25" pos:end="341:33"><name pos:start="341:25" pos:end="341:31">smp_rmb</name><argument_list pos:start="341:32" pos:end="341:33">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="343:25" pos:end="343:36"><expr pos:start="343:25" pos:end="343:35"><name pos:start="343:25" pos:end="343:31">next_tb</name> <operator pos:start="343:33" pos:end="343:33">=</operator> <literal type="number" pos:start="343:35" pos:end="343:35">0</literal></expr>;</expr_stmt>

                        <break pos:start="345:25" pos:end="345:30">break;</break>

                    <case pos:start="347:21" pos:end="347:48">case <expr pos:start="347:26" pos:end="347:47"><name pos:start="347:26" pos:end="347:47">TB_EXIT_ICOUNT_EXPIRED</name></expr>:</case>

                    <block pos:start="349:21" pos:end="391:21">{<block_content pos:start="353:25" pos:end="389:30">

                        <comment type="block" pos:start="351:25" pos:end="351:59">/* Instruction counter expired.  */</comment>

                        <decl_stmt pos:start="353:25" pos:end="353:62"><decl pos:start="353:25" pos:end="353:61"><type pos:start="353:25" pos:end="353:27"><name pos:start="353:25" pos:end="353:27">int</name></type> <name pos:start="353:29" pos:end="353:38">insns_left</name> <init pos:start="353:40" pos:end="353:61">= <expr pos:start="353:42" pos:end="353:61"><name pos:start="353:42" pos:end="353:61"><name pos:start="353:42" pos:end="353:44">cpu</name><operator pos:start="353:45" pos:end="353:46">-&gt;</operator><name pos:start="353:47" pos:end="353:57">icount_decr</name><operator pos:start="353:58" pos:end="353:58">.</operator><name pos:start="353:59" pos:end="353:61">u32</name></name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="355:25" pos:end="387:25"><if pos:start="355:25" pos:end="367:25">if <condition pos:start="355:28" pos:end="355:65">(<expr pos:start="355:29" pos:end="355:64"><name pos:start="355:29" pos:end="355:45"><name pos:start="355:29" pos:end="355:31">cpu</name><operator pos:start="355:32" pos:end="355:33">-&gt;</operator><name pos:start="355:34" pos:end="355:45">icount_extra</name></name> <operator pos:start="355:47" pos:end="355:48">&amp;&amp;</operator> <name pos:start="355:50" pos:end="355:59">insns_left</name> <operator pos:start="355:61" pos:end="355:62">&gt;=</operator> <literal type="number" pos:start="355:64" pos:end="355:64">0</literal></expr>)</condition> <block pos:start="355:67" pos:end="367:25">{<block_content pos:start="359:29" pos:end="365:66">

                            <comment type="block" pos:start="357:29" pos:end="357:77">/* Refill decrementer and continue execution.  */</comment>

                            <expr_stmt pos:start="359:29" pos:end="359:60"><expr pos:start="359:29" pos:end="359:59"><name pos:start="359:29" pos:end="359:45"><name pos:start="359:29" pos:end="359:31">cpu</name><operator pos:start="359:32" pos:end="359:33">-&gt;</operator><name pos:start="359:34" pos:end="359:45">icount_extra</name></name> <operator pos:start="359:47" pos:end="359:48">+=</operator> <name pos:start="359:50" pos:end="359:59">insns_left</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="361:29" pos:end="361:72"><expr pos:start="361:29" pos:end="361:71"><name pos:start="361:29" pos:end="361:38">insns_left</name> <operator pos:start="361:40" pos:end="361:40">=</operator> <call pos:start="361:42" pos:end="361:71"><name pos:start="361:42" pos:end="361:44">MIN</name><argument_list pos:start="361:45" pos:end="361:71">(<argument pos:start="361:46" pos:end="361:51"><expr pos:start="361:46" pos:end="361:51"><literal type="number" pos:start="361:46" pos:end="361:51">0xffff</literal></expr></argument>, <argument pos:start="361:54" pos:end="361:70"><expr pos:start="361:54" pos:end="361:70"><name pos:start="361:54" pos:end="361:70"><name pos:start="361:54" pos:end="361:56">cpu</name><operator pos:start="361:57" pos:end="361:58">-&gt;</operator><name pos:start="361:59" pos:end="361:70">icount_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="363:29" pos:end="363:60"><expr pos:start="363:29" pos:end="363:59"><name pos:start="363:29" pos:end="363:45"><name pos:start="363:29" pos:end="363:31">cpu</name><operator pos:start="363:32" pos:end="363:33">-&gt;</operator><name pos:start="363:34" pos:end="363:45">icount_extra</name></name> <operator pos:start="363:47" pos:end="363:48">-=</operator> <name pos:start="363:50" pos:end="363:59">insns_left</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="365:29" pos:end="365:66"><expr pos:start="365:29" pos:end="365:65"><name pos:start="365:29" pos:end="365:52"><name pos:start="365:29" pos:end="365:31">cpu</name><operator pos:start="365:32" pos:end="365:33">-&gt;</operator><name pos:start="365:34" pos:end="365:44">icount_decr</name><operator pos:start="365:45" pos:end="365:45">.</operator><name pos:start="365:46" pos:end="365:48">u16</name><operator pos:start="365:49" pos:end="365:49">.</operator><name pos:start="365:50" pos:end="365:52">low</name></name> <operator pos:start="365:54" pos:end="365:54">=</operator> <name pos:start="365:56" pos:end="365:65">insns_left</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="367:27" pos:end="387:25">else <block pos:start="367:32" pos:end="387:25">{<block_content pos:start="369:29" pos:end="385:47">

                            <if_stmt pos:start="369:29" pos:end="379:29"><if pos:start="369:29" pos:end="379:29">if <condition pos:start="369:32" pos:end="369:47">(<expr pos:start="369:33" pos:end="369:46"><name pos:start="369:33" pos:end="369:42">insns_left</name> <operator pos:start="369:44" pos:end="369:44">&gt;</operator> <literal type="number" pos:start="369:46" pos:end="369:46">0</literal></expr>)</condition> <block pos:start="369:49" pos:end="379:29">{<block_content pos:start="373:33" pos:end="377:55">

                                <comment type="block" pos:start="371:33" pos:end="371:70">/* Execute remaining instructions.  */</comment>

                                <expr_stmt pos:start="373:33" pos:end="373:83"><expr pos:start="373:33" pos:end="373:82"><name pos:start="373:33" pos:end="373:34">tb</name> <operator pos:start="373:36" pos:end="373:36">=</operator> <operator pos:start="373:38" pos:end="373:38">(</operator><name pos:start="373:39" pos:end="373:54">TranslationBlock</name> <operator pos:start="373:56" pos:end="373:56">*</operator><operator pos:start="373:57" pos:end="373:57">)</operator><operator pos:start="373:58" pos:end="373:58">(</operator><name pos:start="373:59" pos:end="373:65">next_tb</name> <operator pos:start="373:67" pos:end="373:67">&amp;</operator> <operator pos:start="373:69" pos:end="373:69">~</operator><name pos:start="373:70" pos:end="373:81">TB_EXIT_MASK</name><operator pos:start="373:82" pos:end="373:82">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="375:33" pos:end="375:70"><expr pos:start="375:33" pos:end="375:69"><call pos:start="375:33" pos:end="375:69"><name pos:start="375:33" pos:end="375:48">cpu_exec_nocache</name><argument_list pos:start="375:49" pos:end="375:69">(<argument pos:start="375:50" pos:end="375:52"><expr pos:start="375:50" pos:end="375:52"><name pos:start="375:50" pos:end="375:52">cpu</name></expr></argument>, <argument pos:start="375:55" pos:end="375:64"><expr pos:start="375:55" pos:end="375:64"><name pos:start="375:55" pos:end="375:64">insns_left</name></expr></argument>, <argument pos:start="375:67" pos:end="375:68"><expr pos:start="375:67" pos:end="375:68"><name pos:start="375:67" pos:end="375:68">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="377:33" pos:end="377:55"><expr pos:start="377:33" pos:end="377:54"><call pos:start="377:33" pos:end="377:54"><name pos:start="377:33" pos:end="377:44">align_clocks</name><argument_list pos:start="377:45" pos:end="377:54">(<argument pos:start="377:46" pos:end="377:48"><expr pos:start="377:46" pos:end="377:48"><operator pos:start="377:46" pos:end="377:46">&amp;</operator><name pos:start="377:47" pos:end="377:48">sc</name></expr></argument>, <argument pos:start="377:51" pos:end="377:53"><expr pos:start="377:51" pos:end="377:53"><name pos:start="377:51" pos:end="377:53">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="381:29" pos:end="381:66"><expr pos:start="381:29" pos:end="381:65"><name pos:start="381:29" pos:end="381:48"><name pos:start="381:29" pos:end="381:31">cpu</name><operator pos:start="381:32" pos:end="381:33">-&gt;</operator><name pos:start="381:34" pos:end="381:48">exception_index</name></name> <operator pos:start="381:50" pos:end="381:50">=</operator> <name pos:start="381:52" pos:end="381:65">EXCP_INTERRUPT</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="383:29" pos:end="383:40"><expr pos:start="383:29" pos:end="383:39"><name pos:start="383:29" pos:end="383:35">next_tb</name> <operator pos:start="383:37" pos:end="383:37">=</operator> <literal type="number" pos:start="383:39" pos:end="383:39">0</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="385:29" pos:end="385:47"><expr pos:start="385:29" pos:end="385:46"><call pos:start="385:29" pos:end="385:46"><name pos:start="385:29" pos:end="385:41">cpu_loop_exit</name><argument_list pos:start="385:42" pos:end="385:46">(<argument pos:start="385:43" pos:end="385:45"><expr pos:start="385:43" pos:end="385:45"><name pos:start="385:43" pos:end="385:45">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <break pos:start="389:25" pos:end="389:30">break;</break>

                    </block_content>}</block>

                    <default pos:start="393:21" pos:end="393:28">default:</default>

                        <break pos:start="395:25" pos:end="395:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="401:17" pos:end="403:48">/* Try to align the host and virtual clocks

                   if the guest is in advance */</comment>

                <expr_stmt pos:start="405:17" pos:end="405:39"><expr pos:start="405:17" pos:end="405:38"><call pos:start="405:17" pos:end="405:38"><name pos:start="405:17" pos:end="405:28">align_clocks</name><argument_list pos:start="405:29" pos:end="405:38">(<argument pos:start="405:30" pos:end="405:32"><expr pos:start="405:30" pos:end="405:32"><operator pos:start="405:30" pos:end="405:30">&amp;</operator><name pos:start="405:31" pos:end="405:32">sc</name></expr></argument>, <argument pos:start="405:35" pos:end="405:37"><expr pos:start="405:35" pos:end="405:37"><name pos:start="405:35" pos:end="405:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="407:17" pos:end="409:52">/* reset soft MMU for next block (it can currently

                   only be set by a memory fault) */</comment>

            </block_content>}</block></for> <comment type="block" pos:start="411:15" pos:end="411:27">/* for(;;) */</comment>

        </block_content>}</block></if> <else pos:start="413:11" pos:end="435:9">else <block pos:start="413:16" pos:end="435:9">{<block_content pos:start="419:13" pos:end="433:28">

            <comment type="block" pos:start="415:13" pos:end="417:66">/* Reload env after longjmp - the compiler may have smashed all

             * local variables as longjmp is marked 'noreturn'. */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:30"><expr pos:start="419:13" pos:end="419:29"><name pos:start="419:13" pos:end="419:15">cpu</name> <operator pos:start="419:17" pos:end="419:17">=</operator> <name pos:start="419:19" pos:end="419:29">current_cpu</name></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:36"><expr pos:start="421:13" pos:end="421:35"><name pos:start="421:13" pos:end="421:14">cc</name> <operator pos:start="421:16" pos:end="421:16">=</operator> <call pos:start="421:18" pos:end="421:35"><name pos:start="421:18" pos:end="421:30">CPU_GET_CLASS</name><argument_list pos:start="421:31" pos:end="421:35">(<argument pos:start="421:32" pos:end="421:34"><expr pos:start="421:32" pos:end="421:34"><name pos:start="421:32" pos:end="421:34">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="426:0"><expr pos:start="423:13" pos:end="423:30"><name pos:start="423:13" pos:end="423:26"><name pos:start="423:13" pos:end="423:15">cpu</name><operator pos:start="423:16" pos:end="423:17">-&gt;</operator><name pos:start="423:18" pos:end="423:26">can_do_io</name></name> <operator pos:start="423:28" pos:end="423:28">=</operator> <literal type="number" pos:start="423:30" pos:end="423:30">1</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="425:1" pos:end="425:18">#<cpp:directive pos:start="425:2" pos:end="425:6">ifdef</cpp:directive> <name pos:start="425:8" pos:end="425:18">TARGET_I386</name></cpp:ifdef>

            <expr_stmt pos:start="427:13" pos:end="427:35"><expr pos:start="427:13" pos:end="427:34"><name pos:start="427:13" pos:end="427:19">x86_cpu</name> <operator pos:start="427:21" pos:end="427:21">=</operator> <call pos:start="427:23" pos:end="427:34"><name pos:start="427:23" pos:end="427:29">X86_CPU</name><argument_list pos:start="427:30" pos:end="427:34">(<argument pos:start="427:31" pos:end="427:33"><expr pos:start="427:31" pos:end="427:33"><name pos:start="427:31" pos:end="427:33">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="432:0"><expr pos:start="429:13" pos:end="429:31"><name pos:start="429:13" pos:end="429:15">env</name> <operator pos:start="429:17" pos:end="429:17">=</operator> <operator pos:start="429:19" pos:end="429:19">&amp;</operator><name pos:start="429:20" pos:end="429:31"><name pos:start="429:20" pos:end="429:26">x86_cpu</name><operator pos:start="429:27" pos:end="429:28">-&gt;</operator><name pos:start="429:29" pos:end="429:31">env</name></name></expr>;</expr_stmt>

<cpp:endif pos:start="431:1" pos:end="431:6">#<cpp:directive pos:start="431:2" pos:end="431:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="433:13" pos:end="433:28"><expr pos:start="433:13" pos:end="433:27"><call pos:start="433:13" pos:end="433:27"><name pos:start="433:13" pos:end="433:25">tb_lock_reset</name><argument_list pos:start="433:26" pos:end="433:27">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for> <comment type="block" pos:start="437:7" pos:end="437:19">/* for(;;) */</comment>



    <expr_stmt pos:start="441:5" pos:end="441:27"><expr pos:start="441:5" pos:end="441:26"><call pos:start="441:5" pos:end="441:26"><name pos:start="441:5" pos:end="441:21"><name pos:start="441:5" pos:end="441:6">cc</name><operator pos:start="441:7" pos:end="441:8">-&gt;</operator><name pos:start="441:9" pos:end="441:21">cpu_exec_exit</name></name><argument_list pos:start="441:22" pos:end="441:26">(<argument pos:start="441:23" pos:end="441:25"><expr pos:start="441:23" pos:end="441:25"><name pos:start="441:23" pos:end="441:25">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:22"><expr pos:start="443:5" pos:end="443:21"><call pos:start="443:5" pos:end="443:21"><name pos:start="443:5" pos:end="443:19">rcu_read_unlock</name><argument_list pos:start="443:20" pos:end="443:21">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="447:5" pos:end="447:62">/* fail safe : never use current_cpu outside cpu_exec() */</comment>

    <expr_stmt pos:start="449:5" pos:end="449:23"><expr pos:start="449:5" pos:end="449:22"><name pos:start="449:5" pos:end="449:15">current_cpu</name> <operator pos:start="449:17" pos:end="449:17">=</operator> <name pos:start="449:19" pos:end="449:22">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="453:5" pos:end="453:73">/* Does not need atomic_mb_set because a spurious wakeup is okay.  */</comment>

    <expr_stmt pos:start="455:5" pos:end="455:39"><expr pos:start="455:5" pos:end="455:38"><call pos:start="455:5" pos:end="455:38"><name pos:start="455:5" pos:end="455:14">atomic_set</name><argument_list pos:start="455:15" pos:end="455:38">(<argument pos:start="455:16" pos:end="455:31"><expr pos:start="455:16" pos:end="455:31"><operator pos:start="455:16" pos:end="455:16">&amp;</operator><name pos:start="455:17" pos:end="455:31">tcg_current_cpu</name></expr></argument>, <argument pos:start="455:34" pos:end="455:37"><expr pos:start="455:34" pos:end="455:37"><name pos:start="455:34" pos:end="455:37">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="457:5" pos:end="457:15">return <expr pos:start="457:12" pos:end="457:14"><name pos:start="457:12" pos:end="457:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
