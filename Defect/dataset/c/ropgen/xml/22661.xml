<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22661.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">multiwrite_f</name><parameter_list pos:start="1:24" pos:end="1:68">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:54"><decl pos:start="1:47" pos:end="1:54"><type pos:start="1:47" pos:end="1:54"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:54">argc</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:67"><decl pos:start="1:57" pos:end="1:67"><type pos:start="1:57" pos:end="1:67"><name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier><modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="251:1">{<block_content pos:start="5:5" pos:end="249:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">Cflag</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">qflag</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">c</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier><modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">offset</name></decl>, <decl pos:start="13:21" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:21" pos:end="13:32">first_offset</name> <init pos:start="13:34" pos:end="13:36">= <expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">total</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">nr_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">nr_reqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><literal type="number" pos:start="23:19" pos:end="23:22">0xcd</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">QEMUIOVector</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:23">qiovs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">BlockRequest</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:22">reqs</name></decl>;</decl_stmt>



    <while pos:start="33:5" pos:end="67:5">while <condition pos:start="33:11" pos:end="33:51">(<expr pos:start="33:12" pos:end="33:50"><operator pos:start="33:12" pos:end="33:12">(</operator><name pos:start="33:13" pos:end="33:13">c</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:42"><name pos:start="33:17" pos:end="33:22">getopt</name><argument_list pos:start="33:23" pos:end="33:42">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">argc</name></expr></argument>, <argument pos:start="33:30" pos:end="33:33"><expr pos:start="33:30" pos:end="33:33"><name pos:start="33:30" pos:end="33:33">argv</name></expr></argument>, <argument pos:start="33:36" pos:end="33:41"><expr pos:start="33:36" pos:end="33:41"><literal type="string" pos:start="33:36" pos:end="33:41">"CqP:"</literal></expr></argument>)</argument_list></call><operator pos:start="33:43" pos:end="33:43">)</operator> <operator pos:start="33:45" pos:end="33:46">!=</operator> <name pos:start="33:48" pos:end="33:50">EOF</name></expr>)</condition> <block pos:start="33:53" pos:end="67:5">{<block_content pos:start="35:9" pos:end="65:9">

        <switch pos:start="35:9" pos:end="65:9">switch <condition pos:start="35:16" pos:end="35:18">(<expr pos:start="35:17" pos:end="35:17"><name pos:start="35:17" pos:end="35:17">c</name></expr>)</condition> <block pos:start="35:20" pos:end="65:9">{<block_content pos:start="37:9" pos:end="63:53">

        <case pos:start="37:9" pos:end="37:17">case <expr pos:start="37:14" pos:end="37:16"><literal type="char" pos:start="37:14" pos:end="37:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:22"><expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:17">Cflag</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:17">qflag</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        <case pos:start="49:9" pos:end="49:17">case <expr pos:start="49:14" pos:end="49:16"><literal type="char" pos:start="49:14" pos:end="49:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="51:13" pos:end="51:44"><expr pos:start="51:13" pos:end="51:43"><name pos:start="51:13" pos:end="51:19">pattern</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:43"><name pos:start="51:23" pos:end="51:35">parse_pattern</name><argument_list pos:start="51:36" pos:end="51:43">(<argument pos:start="51:37" pos:end="51:42"><expr pos:start="51:37" pos:end="51:42"><name pos:start="51:37" pos:end="51:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:28">(<expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:23">pattern</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition> <block pos:start="53:30" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:25">

                <return pos:start="55:17" pos:end="55:25">return <expr pos:start="55:24" pos:end="55:24"><literal type="number" pos:start="55:24" pos:end="55:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        <default pos:start="61:9" pos:end="61:16">default:</default>

            <return pos:start="63:13" pos:end="63:53">return <expr pos:start="63:20" pos:end="63:52"><call pos:start="63:20" pos:end="63:52"><name pos:start="63:20" pos:end="63:39">qemuio_command_usage</name><argument_list pos:start="63:40" pos:end="63:52">(<argument pos:start="63:41" pos:end="63:51"><expr pos:start="63:41" pos:end="63:51"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:51">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:14">optind</name> <operator pos:start="71:16" pos:end="71:16">&gt;</operator> <name pos:start="71:18" pos:end="71:21">argc</name> <operator pos:start="71:23" pos:end="71:23">-</operator> <literal type="number" pos:start="71:25" pos:end="71:25">2</literal></expr>)</condition> <block pos:start="71:28" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:49">

        <return pos:start="73:9" pos:end="73:49">return <expr pos:start="73:16" pos:end="73:48"><call pos:start="73:16" pos:end="73:48"><name pos:start="73:16" pos:end="73:35">qemuio_command_usage</name><argument_list pos:start="73:36" pos:end="73:48">(<argument pos:start="73:37" pos:end="73:47"><expr pos:start="73:37" pos:end="73:47"><operator pos:start="73:37" pos:end="73:37">&amp;</operator><name pos:start="73:38" pos:end="73:47">writev_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:16"><expr pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:11">nr_reqs</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <literal type="number" pos:start="79:15" pos:end="79:15">1</literal></expr>;</expr_stmt>

    <for pos:start="81:5" pos:end="89:5">for <control pos:start="81:9" pos:end="81:35">(<init pos:start="81:10" pos:end="81:20"><expr pos:start="81:10" pos:end="81:19"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:19">optind</name></expr>;</init> <condition pos:start="81:22" pos:end="81:30"><expr pos:start="81:22" pos:end="81:29"><name pos:start="81:22" pos:end="81:22">i</name> <operator pos:start="81:24" pos:end="81:24">&lt;</operator> <name pos:start="81:26" pos:end="81:29">argc</name></expr>;</condition> <incr pos:start="81:32" pos:end="81:34"><expr pos:start="81:32" pos:end="81:34"><name pos:start="81:32" pos:end="81:32">i</name><operator pos:start="81:33" pos:end="81:34">++</operator></expr></incr>)</control> <block pos:start="81:37" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:9">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:34">(<expr pos:start="83:13" pos:end="83:33"><operator pos:start="83:13" pos:end="83:13">!</operator><call pos:start="83:14" pos:end="83:33"><name pos:start="83:14" pos:end="83:19">strcmp</name><argument_list pos:start="83:20" pos:end="83:33">(<argument pos:start="83:21" pos:end="83:27"><expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:24">argv</name><index pos:start="83:25" pos:end="83:27">[<expr pos:start="83:26" pos:end="83:26"><name pos:start="83:26" pos:end="83:26">i</name></expr>]</index></name></expr></argument>, <argument pos:start="83:30" pos:end="83:32"><expr pos:start="83:30" pos:end="83:32"><literal type="string" pos:start="83:30" pos:end="83:32">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:36" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:22">

            <expr_stmt pos:start="85:13" pos:end="85:22"><expr pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:19">nr_reqs</name><operator pos:start="85:20" pos:end="85:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:8">reqs</name> <operator pos:start="93:10" pos:end="93:10">=</operator> <call pos:start="93:12" pos:end="93:45"><name pos:start="93:12" pos:end="93:20">g_malloc0</name><argument_list pos:start="93:21" pos:end="93:45">(<argument pos:start="93:22" pos:end="93:44"><expr pos:start="93:22" pos:end="93:44"><name pos:start="93:22" pos:end="93:28">nr_reqs</name> <operator pos:start="93:30" pos:end="93:30">*</operator> <sizeof pos:start="93:32" pos:end="93:44">sizeof<argument_list pos:start="93:38" pos:end="93:44">(<argument pos:start="93:39" pos:end="93:43"><expr pos:start="93:39" pos:end="93:43"><operator pos:start="93:39" pos:end="93:39">*</operator><name pos:start="93:40" pos:end="93:43">reqs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:44"><expr pos:start="95:5" pos:end="95:43"><name pos:start="95:5" pos:end="95:7">buf</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="95:43"><name pos:start="95:11" pos:end="95:19">g_malloc0</name><argument_list pos:start="95:20" pos:end="95:43">(<argument pos:start="95:21" pos:end="95:42"><expr pos:start="95:21" pos:end="95:42"><name pos:start="95:21" pos:end="95:27">nr_reqs</name> <operator pos:start="95:29" pos:end="95:29">*</operator> <sizeof pos:start="95:31" pos:end="95:42">sizeof<argument_list pos:start="95:37" pos:end="95:42">(<argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><operator pos:start="95:38" pos:end="95:38">*</operator><name pos:start="95:39" pos:end="95:41">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:9">qiovs</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="97:46"><name pos:start="97:13" pos:end="97:20">g_malloc</name><argument_list pos:start="97:21" pos:end="97:46">(<argument pos:start="97:22" pos:end="97:45"><expr pos:start="97:22" pos:end="97:45"><name pos:start="97:22" pos:end="97:28">nr_reqs</name> <operator pos:start="97:30" pos:end="97:30">*</operator> <sizeof pos:start="97:32" pos:end="97:45">sizeof<argument_list pos:start="97:38" pos:end="97:45">(<argument pos:start="97:39" pos:end="97:44"><expr pos:start="97:39" pos:end="97:44"><operator pos:start="97:39" pos:end="97:39">*</operator><name pos:start="97:40" pos:end="97:44">qiovs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="101:5" pos:end="187:5">for <control pos:start="101:9" pos:end="101:50">(<init pos:start="101:10" pos:end="101:15"><expr pos:start="101:10" pos:end="101:14"><name pos:start="101:10" pos:end="101:10">i</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>;</init> <condition pos:start="101:17" pos:end="101:45"><expr pos:start="101:17" pos:end="101:44"><name pos:start="101:17" pos:end="101:17">i</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <name pos:start="101:21" pos:end="101:27">nr_reqs</name> <operator pos:start="101:29" pos:end="101:30">&amp;&amp;</operator> <name pos:start="101:32" pos:end="101:37">optind</name> <operator pos:start="101:39" pos:end="101:39">&lt;</operator> <name pos:start="101:41" pos:end="101:44">argc</name></expr>;</condition> <incr pos:start="101:47" pos:end="101:49"><expr pos:start="101:47" pos:end="101:49"><name pos:start="101:47" pos:end="101:47">i</name><operator pos:start="101:48" pos:end="101:49">++</operator></expr></incr>)</control> <block pos:start="101:52" pos:end="187:5">{<block_content pos:start="103:9" pos:end="185:18">

        <decl_stmt pos:start="103:9" pos:end="103:14"><decl pos:start="103:9" pos:end="103:13"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:13">j</name></decl>;</decl_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:44">/* Read the offset of the request */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:38"><expr pos:start="109:9" pos:end="109:37"><name pos:start="109:9" pos:end="109:14">offset</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:37"><name pos:start="109:18" pos:end="109:23">cvtnum</name><argument_list pos:start="109:24" pos:end="109:37">(<argument pos:start="109:25" pos:end="109:36"><expr pos:start="109:25" pos:end="109:36"><name pos:start="109:25" pos:end="109:36"><name pos:start="109:25" pos:end="109:28">argv</name><index pos:start="109:29" pos:end="109:36">[<expr pos:start="109:30" pos:end="109:35"><name pos:start="109:30" pos:end="109:35">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:23">(<expr pos:start="111:13" pos:end="111:22"><name pos:start="111:13" pos:end="111:18">offset</name> <operator pos:start="111:20" pos:end="111:20">&lt;</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>)</condition> <block pos:start="111:25" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:21">

            <expr_stmt pos:start="113:13" pos:end="113:72"><expr pos:start="113:13" pos:end="113:71"><call pos:start="113:13" pos:end="113:71"><name pos:start="113:13" pos:end="113:18">printf</name><argument_list pos:start="113:19" pos:end="113:71">(<argument pos:start="113:20" pos:end="113:56"><expr pos:start="113:20" pos:end="113:56"><literal type="string" pos:start="113:20" pos:end="113:56">"non-numeric offset argument -- %s\n"</literal></expr></argument>, <argument pos:start="113:59" pos:end="113:70"><expr pos:start="113:59" pos:end="113:70"><name pos:start="113:59" pos:end="113:70"><name pos:start="113:59" pos:end="113:62">argv</name><index pos:start="113:63" pos:end="113:70">[<expr pos:start="113:64" pos:end="113:69"><name pos:start="113:64" pos:end="113:69">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="115:13" pos:end="115:21">goto <name pos:start="115:18" pos:end="115:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:17"><expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:14">optind</name><operator pos:start="119:15" pos:end="119:16">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="123:27">(<expr pos:start="123:13" pos:end="123:26"><name pos:start="123:13" pos:end="123:18">offset</name> <operator pos:start="123:20" pos:end="123:20">&amp;</operator> <literal type="number" pos:start="123:22" pos:end="123:26">0x1ff</literal></expr>)</condition> <block pos:start="123:29" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:21">

            <expr_stmt pos:start="125:13" pos:end="127:38"><expr pos:start="125:13" pos:end="127:37"><call pos:start="125:13" pos:end="127:37"><name pos:start="125:13" pos:end="125:18">printf</name><argument_list pos:start="125:19" pos:end="127:37">(<argument pos:start="125:20" pos:end="125:56"><expr pos:start="125:20" pos:end="125:56"><literal type="string" pos:start="125:20" pos:end="125:56">"offset %lld is not sector aligned\n"</literal></expr></argument>,

                   <argument pos:start="127:20" pos:end="127:36"><expr pos:start="127:20" pos:end="127:36"><operator pos:start="127:20" pos:end="127:20">(</operator><name pos:start="127:21" pos:end="127:24">long</name> <name pos:start="127:26" pos:end="127:29">long</name><operator pos:start="127:30" pos:end="127:30">)</operator><name pos:start="127:31" pos:end="127:36">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="129:13" pos:end="129:21">goto <name pos:start="129:18" pos:end="129:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:19">(<expr pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:13">i</name> <operator pos:start="135:15" pos:end="135:16">==</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>)</condition> <block pos:start="135:21" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:34">

            <expr_stmt pos:start="137:13" pos:end="137:34"><expr pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:24">first_offset</name> <operator pos:start="137:26" pos:end="137:26">=</operator> <name pos:start="137:28" pos:end="137:33">offset</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="143:9" pos:end="143:43">/* Read lengths for qiov entries */</comment>

        <for pos:start="145:9" pos:end="153:9">for <control pos:start="145:13" pos:end="145:39">(<init pos:start="145:14" pos:end="145:24"><expr pos:start="145:14" pos:end="145:23"><name pos:start="145:14" pos:end="145:14">j</name> <operator pos:start="145:16" pos:end="145:16">=</operator> <name pos:start="145:18" pos:end="145:23">optind</name></expr>;</init> <condition pos:start="145:26" pos:end="145:34"><expr pos:start="145:26" pos:end="145:33"><name pos:start="145:26" pos:end="145:26">j</name> <operator pos:start="145:28" pos:end="145:28">&lt;</operator> <name pos:start="145:30" pos:end="145:33">argc</name></expr>;</condition> <incr pos:start="145:36" pos:end="145:38"><expr pos:start="145:36" pos:end="145:38"><name pos:start="145:36" pos:end="145:36">j</name><operator pos:start="145:37" pos:end="145:38">++</operator></expr></incr>)</control> <block pos:start="145:41" pos:end="153:9">{<block_content pos:start="147:13" pos:end="151:13">

            <if_stmt pos:start="147:13" pos:end="151:13"><if pos:start="147:13" pos:end="151:13">if <condition pos:start="147:16" pos:end="147:38">(<expr pos:start="147:17" pos:end="147:37"><operator pos:start="147:17" pos:end="147:17">!</operator><call pos:start="147:18" pos:end="147:37"><name pos:start="147:18" pos:end="147:23">strcmp</name><argument_list pos:start="147:24" pos:end="147:37">(<argument pos:start="147:25" pos:end="147:31"><expr pos:start="147:25" pos:end="147:31"><name pos:start="147:25" pos:end="147:31"><name pos:start="147:25" pos:end="147:28">argv</name><index pos:start="147:29" pos:end="147:31">[<expr pos:start="147:30" pos:end="147:30"><name pos:start="147:30" pos:end="147:30">j</name></expr>]</index></name></expr></argument>, <argument pos:start="147:34" pos:end="147:36"><expr pos:start="147:34" pos:end="147:36"><literal type="string" pos:start="147:34" pos:end="147:36">";"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:40" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:22">

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="157:9" pos:end="157:28"><expr pos:start="157:9" pos:end="157:27"><name pos:start="157:9" pos:end="157:14">nr_iov</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <name pos:start="157:18" pos:end="157:18">j</name> <operator pos:start="157:20" pos:end="157:20">-</operator> <name pos:start="157:22" pos:end="157:27">optind</name></expr>;</expr_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:27">/* Build request */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:77"><expr pos:start="163:9" pos:end="163:76"><name pos:start="163:9" pos:end="163:14"><name pos:start="163:9" pos:end="163:11">buf</name><index pos:start="163:12" pos:end="163:14">[<expr pos:start="163:13" pos:end="163:13"><name pos:start="163:13" pos:end="163:13">i</name></expr>]</index></name> <operator pos:start="163:16" pos:end="163:16">=</operator> <call pos:start="163:18" pos:end="163:76"><name pos:start="163:18" pos:end="163:29">create_iovec</name><argument_list pos:start="163:30" pos:end="163:76">(<argument pos:start="163:31" pos:end="163:32"><expr pos:start="163:31" pos:end="163:32"><name pos:start="163:31" pos:end="163:32">bs</name></expr></argument>, <argument pos:start="163:35" pos:end="163:43"><expr pos:start="163:35" pos:end="163:43"><operator pos:start="163:35" pos:end="163:35">&amp;</operator><name pos:start="163:36" pos:end="163:43"><name pos:start="163:36" pos:end="163:40">qiovs</name><index pos:start="163:41" pos:end="163:43">[<expr pos:start="163:42" pos:end="163:42"><name pos:start="163:42" pos:end="163:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="163:46" pos:end="163:58"><expr pos:start="163:46" pos:end="163:58"><operator pos:start="163:46" pos:end="163:46">&amp;</operator><name pos:start="163:47" pos:end="163:58"><name pos:start="163:47" pos:end="163:50">argv</name><index pos:start="163:51" pos:end="163:58">[<expr pos:start="163:52" pos:end="163:57"><name pos:start="163:52" pos:end="163:57">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="163:61" pos:end="163:66"><expr pos:start="163:61" pos:end="163:66"><name pos:start="163:61" pos:end="163:66">nr_iov</name></expr></argument>, <argument pos:start="163:69" pos:end="163:75"><expr pos:start="163:69" pos:end="163:75"><name pos:start="163:69" pos:end="163:75">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:27">(<expr pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:18"><name pos:start="165:13" pos:end="165:15">buf</name><index pos:start="165:16" pos:end="165:18">[<expr pos:start="165:17" pos:end="165:17"><name pos:start="165:17" pos:end="165:17">i</name></expr>]</index></name> <operator pos:start="165:20" pos:end="165:21">==</operator> <name pos:start="165:23" pos:end="165:26">NULL</name></expr>)</condition> <block pos:start="165:29" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:21">

            <goto pos:start="167:13" pos:end="167:21">goto <name pos:start="167:18" pos:end="167:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:33"><expr pos:start="173:9" pos:end="173:32"><name pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:12">reqs</name><index pos:start="173:13" pos:end="173:15">[<expr pos:start="173:14" pos:end="173:14"><name pos:start="173:14" pos:end="173:14">i</name></expr>]</index></name><operator pos:start="173:16" pos:end="173:16">.</operator><name pos:start="173:17" pos:end="173:20">qiov</name> <operator pos:start="173:22" pos:end="173:22">=</operator> <operator pos:start="173:24" pos:end="173:24">&amp;</operator><name pos:start="173:25" pos:end="173:32"><name pos:start="173:25" pos:end="173:29">qiovs</name><index pos:start="173:30" pos:end="173:32">[<expr pos:start="173:31" pos:end="173:31"><name pos:start="173:31" pos:end="173:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:37"><expr pos:start="175:9" pos:end="175:36"><name pos:start="175:9" pos:end="175:15"><name pos:start="175:9" pos:end="175:12">reqs</name><index pos:start="175:13" pos:end="175:15">[<expr pos:start="175:14" pos:end="175:14"><name pos:start="175:14" pos:end="175:14">i</name></expr>]</index></name><operator pos:start="175:16" pos:end="175:16">.</operator><name pos:start="175:17" pos:end="175:22">sector</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <name pos:start="175:26" pos:end="175:31">offset</name> <operator pos:start="175:33" pos:end="175:34">&gt;&gt;</operator> <literal type="number" pos:start="175:36" pos:end="175:36">9</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:53"><expr pos:start="177:9" pos:end="177:52"><name pos:start="177:9" pos:end="177:15"><name pos:start="177:9" pos:end="177:12">reqs</name><index pos:start="177:13" pos:end="177:15">[<expr pos:start="177:14" pos:end="177:14"><name pos:start="177:14" pos:end="177:14">i</name></expr>]</index></name><operator pos:start="177:16" pos:end="177:16">.</operator><name pos:start="177:17" pos:end="177:26">nb_sectors</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:36"><name pos:start="177:30" pos:end="177:33">reqs</name><index pos:start="177:34" pos:end="177:36">[<expr pos:start="177:35" pos:end="177:35"><name pos:start="177:35" pos:end="177:35">i</name></expr>]</index></name><operator pos:start="177:37" pos:end="177:37">.</operator><name pos:start="177:38" pos:end="177:47"><name pos:start="177:38" pos:end="177:41">qiov</name><operator pos:start="177:42" pos:end="177:43">-&gt;</operator><name pos:start="177:44" pos:end="177:47">size</name></name> <operator pos:start="177:49" pos:end="177:50">&gt;&gt;</operator> <literal type="number" pos:start="177:52" pos:end="177:52">9</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:14">optind</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <name pos:start="181:18" pos:end="181:18">j</name> <operator pos:start="181:20" pos:end="181:20">+</operator> <literal type="number" pos:start="181:22" pos:end="181:22">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:18"><expr pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:15">pattern</name><operator pos:start="185:16" pos:end="185:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="191:5" pos:end="191:62">/* If there were empty requests at the end, ignore them */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:16"><expr pos:start="193:5" pos:end="193:15"><name pos:start="193:5" pos:end="193:11">nr_reqs</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <name pos:start="193:15" pos:end="193:15">i</name></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:28"><expr pos:start="197:5" pos:end="197:27"><call pos:start="197:5" pos:end="197:27"><name pos:start="197:5" pos:end="197:16">gettimeofday</name><argument_list pos:start="197:17" pos:end="197:27">(<argument pos:start="197:18" pos:end="197:20"><expr pos:start="197:18" pos:end="197:20"><operator pos:start="197:18" pos:end="197:18">&amp;</operator><name pos:start="197:19" pos:end="197:20">t1</name></expr></argument>, <argument pos:start="197:23" pos:end="197:26"><expr pos:start="197:23" pos:end="197:26"><name pos:start="197:23" pos:end="197:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:55"><expr pos:start="199:5" pos:end="199:54"><name pos:start="199:5" pos:end="199:7">cnt</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <call pos:start="199:11" pos:end="199:54"><name pos:start="199:11" pos:end="199:27">do_aio_multiwrite</name><argument_list pos:start="199:28" pos:end="199:54">(<argument pos:start="199:29" pos:end="199:30"><expr pos:start="199:29" pos:end="199:30"><name pos:start="199:29" pos:end="199:30">bs</name></expr></argument>, <argument pos:start="199:33" pos:end="199:36"><expr pos:start="199:33" pos:end="199:36"><name pos:start="199:33" pos:end="199:36">reqs</name></expr></argument>, <argument pos:start="199:39" pos:end="199:45"><expr pos:start="199:39" pos:end="199:45"><name pos:start="199:39" pos:end="199:45">nr_reqs</name></expr></argument>, <argument pos:start="199:48" pos:end="199:53"><expr pos:start="199:48" pos:end="199:53"><operator pos:start="199:48" pos:end="199:48">&amp;</operator><name pos:start="199:49" pos:end="199:53">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:28"><expr pos:start="201:5" pos:end="201:27"><call pos:start="201:5" pos:end="201:27"><name pos:start="201:5" pos:end="201:16">gettimeofday</name><argument_list pos:start="201:17" pos:end="201:27">(<argument pos:start="201:18" pos:end="201:20"><expr pos:start="201:18" pos:end="201:20"><operator pos:start="201:18" pos:end="201:18">&amp;</operator><name pos:start="201:19" pos:end="201:20">t2</name></expr></argument>, <argument pos:start="201:23" pos:end="201:26"><expr pos:start="201:23" pos:end="201:26"><name pos:start="201:23" pos:end="201:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="205:5" pos:end="211:5"><if pos:start="205:5" pos:end="211:5">if <condition pos:start="205:8" pos:end="205:16">(<expr pos:start="205:9" pos:end="205:15"><name pos:start="205:9" pos:end="205:11">cnt</name> <operator pos:start="205:13" pos:end="205:13">&lt;</operator> <literal type="number" pos:start="205:15" pos:end="205:15">0</literal></expr>)</condition> <block pos:start="205:18" pos:end="211:5">{<block_content pos:start="207:9" pos:end="209:17">

        <expr_stmt pos:start="207:9" pos:end="207:62"><expr pos:start="207:9" pos:end="207:61"><call pos:start="207:9" pos:end="207:61"><name pos:start="207:9" pos:end="207:14">printf</name><argument_list pos:start="207:15" pos:end="207:61">(<argument pos:start="207:16" pos:end="207:44"><expr pos:start="207:16" pos:end="207:44"><literal type="string" pos:start="207:16" pos:end="207:44">"aio_multiwrite failed: %s\n"</literal></expr></argument>, <argument pos:start="207:47" pos:end="207:60"><expr pos:start="207:47" pos:end="207:60"><call pos:start="207:47" pos:end="207:60"><name pos:start="207:47" pos:end="207:54">strerror</name><argument_list pos:start="207:55" pos:end="207:60">(<argument pos:start="207:56" pos:end="207:59"><expr pos:start="207:56" pos:end="207:59"><operator pos:start="207:56" pos:end="207:56">-</operator><name pos:start="207:57" pos:end="207:59">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="209:9" pos:end="209:17">goto <name pos:start="209:14" pos:end="209:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="215:5" pos:end="219:5"><if pos:start="215:5" pos:end="219:5">if <condition pos:start="215:8" pos:end="215:14">(<expr pos:start="215:9" pos:end="215:13"><name pos:start="215:9" pos:end="215:13">qflag</name></expr>)</condition> <block pos:start="215:16" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:17">

        <goto pos:start="217:9" pos:end="217:17">goto <name pos:start="217:14" pos:end="217:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:22"><expr pos:start="225:5" pos:end="225:21"><name pos:start="225:5" pos:end="225:6">t2</name> <operator pos:start="225:8" pos:end="225:8">=</operator> <call pos:start="225:10" pos:end="225:21"><name pos:start="225:10" pos:end="225:13">tsub</name><argument_list pos:start="225:14" pos:end="225:21">(<argument pos:start="225:15" pos:end="225:16"><expr pos:start="225:15" pos:end="225:16"><name pos:start="225:15" pos:end="225:16">t2</name></expr></argument>, <argument pos:start="225:19" pos:end="225:20"><expr pos:start="225:19" pos:end="225:20"><name pos:start="225:19" pos:end="225:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:71"><expr pos:start="227:5" pos:end="227:70"><call pos:start="227:5" pos:end="227:70"><name pos:start="227:5" pos:end="227:16">print_report</name><argument_list pos:start="227:17" pos:end="227:70">(<argument pos:start="227:18" pos:end="227:24"><expr pos:start="227:18" pos:end="227:24"><literal type="string" pos:start="227:18" pos:end="227:24">"wrote"</literal></expr></argument>, <argument pos:start="227:27" pos:end="227:29"><expr pos:start="227:27" pos:end="227:29"><operator pos:start="227:27" pos:end="227:27">&amp;</operator><name pos:start="227:28" pos:end="227:29">t2</name></expr></argument>, <argument pos:start="227:32" pos:end="227:43"><expr pos:start="227:32" pos:end="227:43"><name pos:start="227:32" pos:end="227:43">first_offset</name></expr></argument>, <argument pos:start="227:46" pos:end="227:50"><expr pos:start="227:46" pos:end="227:50"><name pos:start="227:46" pos:end="227:50">total</name></expr></argument>, <argument pos:start="227:53" pos:end="227:57"><expr pos:start="227:53" pos:end="227:57"><name pos:start="227:53" pos:end="227:57">total</name></expr></argument>, <argument pos:start="227:60" pos:end="227:62"><expr pos:start="227:60" pos:end="227:62"><name pos:start="227:60" pos:end="227:62">cnt</name></expr></argument>, <argument pos:start="227:65" pos:end="227:69"><expr pos:start="227:65" pos:end="227:69"><name pos:start="227:65" pos:end="227:69">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="229:1" pos:end="229:4"><name pos:start="229:1" pos:end="229:3">out</name>:</label>

    <for pos:start="231:5" pos:end="241:5">for <control pos:start="231:9" pos:end="231:33">(<init pos:start="231:10" pos:end="231:15"><expr pos:start="231:10" pos:end="231:14"><name pos:start="231:10" pos:end="231:10">i</name> <operator pos:start="231:12" pos:end="231:12">=</operator> <literal type="number" pos:start="231:14" pos:end="231:14">0</literal></expr>;</init> <condition pos:start="231:17" pos:end="231:28"><expr pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:17">i</name> <operator pos:start="231:19" pos:end="231:19">&lt;</operator> <name pos:start="231:21" pos:end="231:27">nr_reqs</name></expr>;</condition> <incr pos:start="231:30" pos:end="231:32"><expr pos:start="231:30" pos:end="231:32"><name pos:start="231:30" pos:end="231:30">i</name><operator pos:start="231:31" pos:end="231:32">++</operator></expr></incr>)</control> <block pos:start="231:35" pos:end="241:5">{<block_content pos:start="233:9" pos:end="239:9">

        <expr_stmt pos:start="233:9" pos:end="233:29"><expr pos:start="233:9" pos:end="233:28"><call pos:start="233:9" pos:end="233:28"><name pos:start="233:9" pos:end="233:20">qemu_io_free</name><argument_list pos:start="233:21" pos:end="233:28">(<argument pos:start="233:22" pos:end="233:27"><expr pos:start="233:22" pos:end="233:27"><name pos:start="233:22" pos:end="233:27"><name pos:start="233:22" pos:end="233:24">buf</name><index pos:start="233:25" pos:end="233:27">[<expr pos:start="233:26" pos:end="233:26"><name pos:start="233:26" pos:end="233:26">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="239:9"><if pos:start="235:9" pos:end="239:9">if <condition pos:start="235:12" pos:end="235:33">(<expr pos:start="235:13" pos:end="235:32"><name pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:16">reqs</name><index pos:start="235:17" pos:end="235:19">[<expr pos:start="235:18" pos:end="235:18"><name pos:start="235:18" pos:end="235:18">i</name></expr>]</index></name><operator pos:start="235:20" pos:end="235:20">.</operator><name pos:start="235:21" pos:end="235:24">qiov</name> <operator pos:start="235:26" pos:end="235:27">!=</operator> <name pos:start="235:29" pos:end="235:32">NULL</name></expr>)</condition> <block pos:start="235:35" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:42">

            <expr_stmt pos:start="237:13" pos:end="237:42"><expr pos:start="237:13" pos:end="237:41"><call pos:start="237:13" pos:end="237:41"><name pos:start="237:13" pos:end="237:30">qemu_iovec_destroy</name><argument_list pos:start="237:31" pos:end="237:41">(<argument pos:start="237:32" pos:end="237:40"><expr pos:start="237:32" pos:end="237:40"><operator pos:start="237:32" pos:end="237:32">&amp;</operator><name pos:start="237:33" pos:end="237:40"><name pos:start="237:33" pos:end="237:37">qiovs</name><index pos:start="237:38" pos:end="237:40">[<expr pos:start="237:39" pos:end="237:39"><name pos:start="237:39" pos:end="237:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="243:5" pos:end="243:16"><expr pos:start="243:5" pos:end="243:15"><call pos:start="243:5" pos:end="243:15"><name pos:start="243:5" pos:end="243:10">g_free</name><argument_list pos:start="243:11" pos:end="243:15">(<argument pos:start="243:12" pos:end="243:14"><expr pos:start="243:12" pos:end="243:14"><name pos:start="243:12" pos:end="243:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:17"><expr pos:start="245:5" pos:end="245:16"><call pos:start="245:5" pos:end="245:16"><name pos:start="245:5" pos:end="245:10">g_free</name><argument_list pos:start="245:11" pos:end="245:16">(<argument pos:start="245:12" pos:end="245:15"><expr pos:start="245:12" pos:end="245:15"><name pos:start="245:12" pos:end="245:15">reqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:18"><expr pos:start="247:5" pos:end="247:17"><call pos:start="247:5" pos:end="247:17"><name pos:start="247:5" pos:end="247:10">g_free</name><argument_list pos:start="247:11" pos:end="247:17">(<argument pos:start="247:12" pos:end="247:16"><expr pos:start="247:12" pos:end="247:16"><name pos:start="247:12" pos:end="247:16">qiovs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="249:5" pos:end="249:13">return <expr pos:start="249:12" pos:end="249:12"><literal type="number" pos:start="249:12" pos:end="249:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
