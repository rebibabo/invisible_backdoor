<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8716.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">serial_ioport_write</name><parameter_list pos:start="1:32" pos:end="1:74">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:44">opaque</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:59">addr</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:69">uint32_t</name></type> <name pos:start="1:71" pos:end="1:73">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SerialState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name></type> <name pos:start="7:19" pos:end="7:20">ch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">addr</name> <operator pos:start="11:10" pos:end="11:11">&amp;=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">7</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="13:1" pos:end="13:19">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:19">DEBUG_SERIAL</name></cpp:ifdef>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:63"><call pos:start="15:5" pos:end="15:63"><name pos:start="15:5" pos:end="15:10">printf</name><argument_list pos:start="15:11" pos:end="15:63">(<argument pos:start="15:12" pos:end="15:51"><expr pos:start="15:12" pos:end="15:51"><literal type="string" pos:start="15:12" pos:end="15:51">"serial: write addr=0x%02x val=0x%02x\n"</literal></expr></argument>, <argument pos:start="15:54" pos:end="15:57"><expr pos:start="15:54" pos:end="15:57"><name pos:start="15:54" pos:end="15:57">addr</name></expr></argument>, <argument pos:start="15:60" pos:end="15:62"><expr pos:start="15:60" pos:end="15:62"><name pos:start="15:60" pos:end="15:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <switch pos:start="19:5" pos:end="149:5">switch<condition pos:start="19:11" pos:end="19:16">(<expr pos:start="19:12" pos:end="19:15"><name pos:start="19:12" pos:end="19:15">addr</name></expr>)</condition> <block pos:start="19:18" pos:end="149:5">{<block_content pos:start="21:5" pos:end="147:14">

    <default pos:start="21:5" pos:end="21:12">default:</default>

    <case pos:start="23:5" pos:end="23:11">case <expr pos:start="23:10" pos:end="23:10"><literal type="number" pos:start="23:10" pos:end="23:10">0</literal></expr>:</case>

        <if_stmt pos:start="25:9" pos:end="71:9"><if pos:start="25:9" pos:end="31:9">if <condition pos:start="25:12" pos:end="25:35">(<expr pos:start="25:13" pos:end="25:34"><name pos:start="25:13" pos:end="25:18"><name pos:start="25:13" pos:end="25:13">s</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:18">lcr</name></name> <operator pos:start="25:20" pos:end="25:20">&amp;</operator> <name pos:start="25:22" pos:end="25:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="25:37" pos:end="31:9">{<block_content pos:start="27:13" pos:end="29:40">

            <expr_stmt pos:start="27:13" pos:end="27:53"><expr pos:start="27:13" pos:end="27:52"><name pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:22">divider</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <operator pos:start="27:26" pos:end="27:26">(</operator><name pos:start="27:27" pos:end="27:36"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">divider</name></name> <operator pos:start="27:38" pos:end="27:38">&amp;</operator> <literal type="number" pos:start="27:40" pos:end="27:45">0xff00</literal><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:48">|</operator> <name pos:start="27:50" pos:end="27:52">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:40"><expr pos:start="29:13" pos:end="29:39"><call pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:36">serial_update_parameters</name><argument_list pos:start="29:37" pos:end="29:39">(<argument pos:start="29:38" pos:end="29:38"><expr pos:start="29:38" pos:end="29:38"><name pos:start="29:38" pos:end="29:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="71:9">else <block pos:start="31:16" pos:end="71:9">{<block_content pos:start="33:13" pos:end="69:13">

            <expr_stmt pos:start="33:13" pos:end="33:32"><expr pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:27">thr_ipending</name></name> <operator pos:start="33:29" pos:end="33:29">=</operator> <literal type="number" pos:start="33:31" pos:end="33:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:37"><expr pos:start="35:13" pos:end="35:36"><name pos:start="35:13" pos:end="35:18"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:18">lsr</name></name> <operator pos:start="35:20" pos:end="35:21">&amp;=</operator> <operator pos:start="35:23" pos:end="35:23">~</operator><name pos:start="35:24" pos:end="35:36">UART_LSR_THRE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:29">serial_update_irq</name><argument_list pos:start="37:30" pos:end="37:32">(<argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><name pos:start="37:31" pos:end="37:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:21"><expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:14">ch</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:20">val</name></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="53:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:42">(<expr pos:start="41:17" pos:end="41:41"><operator pos:start="41:17" pos:end="41:17">!</operator><operator pos:start="41:18" pos:end="41:18">(</operator><name pos:start="41:19" pos:end="41:24"><name pos:start="41:19" pos:end="41:19">s</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:24">mcr</name></name> <operator pos:start="41:26" pos:end="41:26">&amp;</operator> <name pos:start="41:28" pos:end="41:40">UART_MCR_LOOP</name><operator pos:start="41:41" pos:end="41:41">)</operator></expr>)</condition> <block pos:start="41:44" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:47">

                <comment type="block" pos:start="43:17" pos:end="43:62">/* when not in loopback mode, send the char */</comment>

                <expr_stmt pos:start="45:17" pos:end="45:47"><expr pos:start="45:17" pos:end="45:46"><call pos:start="45:17" pos:end="45:46"><name pos:start="45:17" pos:end="45:30">qemu_chr_write</name><argument_list pos:start="45:31" pos:end="45:46">(<argument pos:start="45:32" pos:end="45:37"><expr pos:start="45:32" pos:end="45:37"><name pos:start="45:32" pos:end="45:37"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:37">chr</name></name></expr></argument>, <argument pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:42">ch</name></expr></argument>, <argument pos:start="45:45" pos:end="45:45"><expr pos:start="45:45" pos:end="45:45"><literal type="number" pos:start="45:45" pos:end="45:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="47:15" pos:end="53:13">else <block pos:start="47:20" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:43">

                <comment type="block" pos:start="49:17" pos:end="49:72">/* in loopback mode, say that we just received a char */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:43"><expr pos:start="51:17" pos:end="51:42"><call pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:35">serial_receive_byte</name><argument_list pos:start="51:36" pos:end="51:42">(<argument pos:start="51:37" pos:end="51:37"><expr pos:start="51:37" pos:end="51:37"><name pos:start="51:37" pos:end="51:37">s</name></expr></argument>, <argument pos:start="51:40" pos:end="51:41"><expr pos:start="51:40" pos:end="51:41"><name pos:start="51:40" pos:end="51:41">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="55:13" pos:end="69:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:32">(<expr pos:start="55:17" pos:end="55:31"><name pos:start="55:17" pos:end="55:27"><name pos:start="55:17" pos:end="55:17">s</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:27">tx_burst</name></name> <operator pos:start="55:29" pos:end="55:29">&gt;</operator> <literal type="number" pos:start="55:31" pos:end="55:31">0</literal></expr>)</condition> <block pos:start="55:34" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:34">

                <expr_stmt pos:start="57:17" pos:end="57:30"><expr pos:start="57:17" pos:end="57:29"><name pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:17">s</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:27">tx_burst</name></name><operator pos:start="57:28" pos:end="57:29">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:34"><expr pos:start="59:17" pos:end="59:33"><call pos:start="59:17" pos:end="59:33"><name pos:start="59:17" pos:end="59:30">serial_tx_done</name><argument_list pos:start="59:31" pos:end="59:33">(<argument pos:start="59:32" pos:end="59:32"><expr pos:start="59:32" pos:end="59:32"><name pos:start="59:32" pos:end="59:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="61:15" pos:end="69:13">else if <condition pos:start="61:23" pos:end="61:40">(<expr pos:start="61:24" pos:end="61:39"><name pos:start="61:24" pos:end="61:34"><name pos:start="61:24" pos:end="61:24">s</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:34">tx_burst</name></name> <operator pos:start="61:36" pos:end="61:37">==</operator> <literal type="number" pos:start="61:39" pos:end="61:39">0</literal></expr>)</condition> <block pos:start="61:42" pos:end="69:13">{<block_content pos:start="63:17" pos:end="67:76">

                <expr_stmt pos:start="63:17" pos:end="63:30"><expr pos:start="63:17" pos:end="63:29"><name pos:start="63:17" pos:end="63:27"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:27">tx_burst</name></name><operator pos:start="63:28" pos:end="63:29">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="67:76"><expr pos:start="65:17" pos:end="67:75"><call pos:start="65:17" pos:end="67:75"><name pos:start="65:17" pos:end="65:30">qemu_mod_timer</name><argument_list pos:start="65:31" pos:end="67:75">(<argument pos:start="65:32" pos:end="65:42"><expr pos:start="65:32" pos:end="65:42"><name pos:start="65:32" pos:end="65:42"><name pos:start="65:32" pos:end="65:32">s</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:42">tx_timer</name></name></expr></argument>, <argument pos:start="65:45" pos:end="67:74"><expr pos:start="65:45" pos:end="67:74"><call pos:start="65:45" pos:end="65:68"><name pos:start="65:45" pos:end="65:58">qemu_get_clock</name><argument_list pos:start="65:59" pos:end="65:68">(<argument pos:start="65:60" pos:end="65:67"><expr pos:start="65:60" pos:end="65:67"><name pos:start="65:60" pos:end="65:67">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="65:70" pos:end="65:70">+</operator>

                               <name pos:start="67:32" pos:end="67:44">ticks_per_sec</name> <operator pos:start="67:46" pos:end="67:46">*</operator> <name pos:start="67:48" pos:end="67:67">THROTTLE_TX_INTERVAL</name> <operator pos:start="67:69" pos:end="67:69">/</operator> <literal type="number" pos:start="67:71" pos:end="67:74">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:11">case <expr pos:start="75:10" pos:end="75:10"><literal type="number" pos:start="75:10" pos:end="75:10">1</literal></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="95:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:35">(<expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:18">lcr</name></name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <name pos:start="77:22" pos:end="77:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="77:37" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:40">

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">divider</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <operator pos:start="79:26" pos:end="79:26">(</operator><name pos:start="79:27" pos:end="79:36"><name pos:start="79:27" pos:end="79:27">s</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:36">divider</name></name> <operator pos:start="79:38" pos:end="79:38">&amp;</operator> <literal type="number" pos:start="79:40" pos:end="79:45">0x00ff</literal><operator pos:start="79:46" pos:end="79:46">)</operator> <operator pos:start="79:48" pos:end="79:48">|</operator> <operator pos:start="79:50" pos:end="79:50">(</operator><name pos:start="79:51" pos:end="79:53">val</name> <operator pos:start="79:55" pos:end="79:56">&lt;&lt;</operator> <literal type="number" pos:start="79:58" pos:end="79:58">8</literal><operator pos:start="79:59" pos:end="79:59">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:40"><expr pos:start="81:13" pos:end="81:39"><call pos:start="81:13" pos:end="81:39"><name pos:start="81:13" pos:end="81:36">serial_update_parameters</name><argument_list pos:start="81:37" pos:end="81:39">(<argument pos:start="81:38" pos:end="81:38"><expr pos:start="81:38" pos:end="81:38"><name pos:start="81:38" pos:end="81:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="95:9">else <block pos:start="83:16" pos:end="95:9">{<block_content pos:start="85:13" pos:end="93:33">

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:18">ier</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <name pos:start="85:22" pos:end="85:24">val</name> <operator pos:start="85:26" pos:end="85:26">&amp;</operator> <literal type="number" pos:start="85:28" pos:end="85:31">0x0f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:39">(<expr pos:start="87:17" pos:end="87:38"><name pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:17">s</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:22">lsr</name></name> <operator pos:start="87:24" pos:end="87:24">&amp;</operator> <name pos:start="87:26" pos:end="87:38">UART_LSR_THRE</name></expr>)</condition> <block pos:start="87:41" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:36">

                <expr_stmt pos:start="89:17" pos:end="89:36"><expr pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:31"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:31">thr_ipending</name></name> <operator pos:start="89:33" pos:end="89:33">=</operator> <literal type="number" pos:start="89:35" pos:end="89:35">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><call pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:29">serial_update_irq</name><argument_list pos:start="93:30" pos:end="93:32">(<argument pos:start="93:31" pos:end="93:31"><expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <case pos:start="99:5" pos:end="99:11">case <expr pos:start="99:10" pos:end="99:10"><literal type="number" pos:start="99:10" pos:end="99:10">2</literal></expr>:</case>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:11">case <expr pos:start="103:10" pos:end="103:10"><literal type="number" pos:start="103:10" pos:end="103:10">3</literal></expr>:</case>

        <block pos:start="105:9" pos:end="125:9">{<block_content pos:start="107:13" pos:end="123:13">

            <decl_stmt pos:start="107:13" pos:end="107:29"><decl pos:start="107:13" pos:end="107:28"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:28">break_enable</name></decl>;</decl_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:25"><expr pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:18">lcr</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:24">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:40"><expr pos:start="111:13" pos:end="111:39"><call pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:36">serial_update_parameters</name><argument_list pos:start="111:37" pos:end="111:39">(<argument pos:start="111:38" pos:end="111:38"><expr pos:start="111:38" pos:end="111:38"><name pos:start="111:38" pos:end="111:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:42"><expr pos:start="113:13" pos:end="113:41"><name pos:start="113:13" pos:end="113:24">break_enable</name> <operator pos:start="113:26" pos:end="113:26">=</operator> <operator pos:start="113:28" pos:end="113:28">(</operator><name pos:start="113:29" pos:end="113:31">val</name> <operator pos:start="113:33" pos:end="113:34">&gt;&gt;</operator> <literal type="number" pos:start="113:36" pos:end="113:36">6</literal><operator pos:start="113:37" pos:end="113:37">)</operator> <operator pos:start="113:39" pos:end="113:39">&amp;</operator> <literal type="number" pos:start="113:41" pos:end="113:41">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="123:13"><if pos:start="115:13" pos:end="123:13">if <condition pos:start="115:16" pos:end="115:53">(<expr pos:start="115:17" pos:end="115:52"><name pos:start="115:17" pos:end="115:28">break_enable</name> <operator pos:start="115:30" pos:end="115:31">!=</operator> <name pos:start="115:33" pos:end="115:52"><name pos:start="115:33" pos:end="115:33">s</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:52">last_break_enable</name></name></expr>)</condition> <block pos:start="115:55" pos:end="123:13">{<block_content pos:start="117:17" pos:end="121:46">

                <expr_stmt pos:start="117:17" pos:end="117:52"><expr pos:start="117:17" pos:end="117:51"><name pos:start="117:17" pos:end="117:36"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:36">last_break_enable</name></name> <operator pos:start="117:38" pos:end="117:38">=</operator> <name pos:start="117:40" pos:end="117:51">break_enable</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="121:46"><expr pos:start="119:17" pos:end="121:45"><call pos:start="119:17" pos:end="121:45"><name pos:start="119:17" pos:end="119:30">qemu_chr_ioctl</name><argument_list pos:start="119:31" pos:end="121:45">(<argument pos:start="119:32" pos:end="119:37"><expr pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:32">s</name><operator pos:start="119:33" pos:end="119:34">-&gt;</operator><name pos:start="119:35" pos:end="119:37">chr</name></name></expr></argument>, <argument pos:start="119:40" pos:end="119:65"><expr pos:start="119:40" pos:end="119:65"><name pos:start="119:40" pos:end="119:65">CHR_IOCTL_SERIAL_SET_BREAK</name></expr></argument>,

                               <argument pos:start="121:32" pos:end="121:44"><expr pos:start="121:32" pos:end="121:44"><operator pos:start="121:32" pos:end="121:32">&amp;</operator><name pos:start="121:33" pos:end="121:44">break_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <case pos:start="129:5" pos:end="129:11">case <expr pos:start="129:10" pos:end="129:10"><literal type="number" pos:start="129:10" pos:end="129:10">4</literal></expr>:</case>

        <expr_stmt pos:start="131:9" pos:end="131:28"><expr pos:start="131:9" pos:end="131:27"><name pos:start="131:9" pos:end="131:14"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:14">mcr</name></name> <operator pos:start="131:16" pos:end="131:16">=</operator> <name pos:start="131:18" pos:end="131:20">val</name> <operator pos:start="131:22" pos:end="131:22">&amp;</operator> <literal type="number" pos:start="131:24" pos:end="131:27">0x1f</literal></expr>;</expr_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <case pos:start="135:5" pos:end="135:11">case <expr pos:start="135:10" pos:end="135:10"><literal type="number" pos:start="135:10" pos:end="135:10">5</literal></expr>:</case>

        <break pos:start="137:9" pos:end="137:14">break;</break>

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">6</literal></expr>:</case>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:11">case <expr pos:start="143:10" pos:end="143:10"><literal type="number" pos:start="143:10" pos:end="143:10">7</literal></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:21"><expr pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:14"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:14">scr</name></name> <operator pos:start="145:16" pos:end="145:16">=</operator> <name pos:start="145:18" pos:end="145:20">val</name></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
