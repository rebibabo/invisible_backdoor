<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4366.c" pos:tabs="8"><function pos:start="1:1" pos:end="681:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">initFilter</name><parameter_list pos:start="1:22" pos:end="5:82">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:29">int16_t</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier><modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:41">outFilter</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:62"><decl pos:start="1:44" pos:end="1:62"><type pos:start="1:44" pos:end="1:62"><name pos:start="1:44" pos:end="1:50">int16_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier><modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:62">filterPos</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:82"><decl pos:start="1:65" pos:end="1:82"><type pos:start="1:65" pos:end="1:82"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:82">outFilterSize</name></decl></parameter>, <parameter pos:start="1:85" pos:end="1:92"><decl pos:start="1:85" pos:end="1:92"><type pos:start="1:85" pos:end="1:92"><name pos:start="1:85" pos:end="1:87">int</name></type> <name pos:start="1:89" pos:end="1:92">xInc</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:30"><decl pos:start="3:23" pos:end="3:30"><type pos:start="3:23" pos:end="3:30"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:30">srcW</name></decl></parameter>, <parameter pos:start="3:33" pos:end="3:40"><decl pos:start="3:33" pos:end="3:40"><type pos:start="3:33" pos:end="3:40"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:40">dstW</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:57"><decl pos:start="3:43" pos:end="3:57"><type pos:start="3:43" pos:end="3:57"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:57">filterAlign</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:66"><decl pos:start="3:60" pos:end="3:66"><type pos:start="3:60" pos:end="3:66"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:66">one</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:77"><decl pos:start="3:69" pos:end="3:77"><type pos:start="3:69" pos:end="3:77"><name pos:start="3:69" pos:end="3:71">int</name></type> <name pos:start="3:73" pos:end="3:77">flags</name></decl></parameter>, <parameter pos:start="3:80" pos:end="3:92"><decl pos:start="3:80" pos:end="3:92"><type pos:start="3:80" pos:end="3:92"><name pos:start="3:80" pos:end="3:82">int</name></type> <name pos:start="3:84" pos:end="3:92">cpu_flags</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:42"><decl pos:start="5:23" pos:end="5:42"><type pos:start="5:23" pos:end="5:42"><name pos:start="5:23" pos:end="5:31">SwsVector</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:42">srcFilter</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:64"><decl pos:start="5:45" pos:end="5:64"><type pos:start="5:45" pos:end="5:64"><name pos:start="5:45" pos:end="5:53">SwsVector</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:64">dstFilter</name></decl></parameter>, <parameter pos:start="5:67" pos:end="5:81"><decl pos:start="5:67" pos:end="5:81"><type pos:start="5:67" pos:end="5:78"><name pos:start="5:67" pos:end="5:72">double</name></type> <name pos:start="5:74" pos:end="5:81"><name pos:start="5:74" pos:end="5:78">param</name><index pos:start="5:79" pos:end="5:81">[<expr pos:start="5:80" pos:end="5:80"><literal type="number" pos:start="5:80" pos:end="5:80">2</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="681:1">{<block_content pos:start="9:5" pos:end="679:15">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">filterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">filter2Size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:21">minFilterSize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">int64_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:19">filter</name><init pos:start="17:20" pos:end="17:24">=<expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">int64_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">filter2</name><init pos:start="19:21" pos:end="19:25">=<expr pos:start="19:22" pos:end="19:25"><name pos:start="19:22" pos:end="19:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:17"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:17">int64_t</name></type> <name pos:start="21:19" pos:end="21:22">fone</name><init pos:start="21:23" pos:end="21:31">= <expr pos:start="21:25" pos:end="21:31"><literal type="number" pos:start="21:25" pos:end="21:27">1LL</literal><operator pos:start="21:28" pos:end="21:29">&lt;&lt;</operator><literal type="number" pos:start="21:30" pos:end="21:31">54</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name><init pos:start="23:12" pos:end="23:15">= <expr pos:start="23:14" pos:end="23:15"><operator pos:start="23:14" pos:end="23:14">-</operator><literal type="number" pos:start="23:15" pos:end="23:15">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:13"><expr pos:start="27:5" pos:end="27:12"><call pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">emms_c</name><argument_list pos:start="27:11" pos:end="27:12">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="27:15" pos:end="27:87">//FIXME this should not be required but it IS (even for non-MMX versions)</comment>



    <comment type="line" pos:start="31:5" pos:end="31:78">// NOTE: the +3 is for the MMX(+1)/SSE(+3) scaler which reads over the end</comment>

    <expr_stmt pos:start="33:5" pos:end="33:71"><expr pos:start="33:5" pos:end="33:70"><call pos:start="33:5" pos:end="33:70"><name pos:start="33:5" pos:end="33:20">FF_ALLOC_OR_GOTO</name><argument_list pos:start="33:21" pos:end="33:70">(<argument pos:start="33:22" pos:end="33:25"><expr pos:start="33:22" pos:end="33:25"><name pos:start="33:22" pos:end="33:25">NULL</name></expr></argument>, <argument pos:start="33:28" pos:end="33:37"><expr pos:start="33:28" pos:end="33:37"><operator pos:start="33:28" pos:end="33:28">*</operator><name pos:start="33:29" pos:end="33:37">filterPos</name></expr></argument>, <argument pos:start="33:40" pos:end="33:63"><expr pos:start="33:40" pos:end="33:63"><operator pos:start="33:40" pos:end="33:40">(</operator><name pos:start="33:41" pos:end="33:44">dstW</name><operator pos:start="33:45" pos:end="33:45">+</operator><literal type="number" pos:start="33:46" pos:end="33:46">3</literal><operator pos:start="33:47" pos:end="33:47">)</operator><operator pos:start="33:48" pos:end="33:48">*</operator><sizeof pos:start="33:49" pos:end="33:63">sizeof<argument_list pos:start="33:55" pos:end="33:63">(<argument pos:start="33:56" pos:end="33:62"><expr pos:start="33:56" pos:end="33:62"><name pos:start="33:56" pos:end="33:62">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:66" pos:end="33:69"><expr pos:start="33:66" pos:end="33:69"><name pos:start="33:66" pos:end="33:69">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="333:5"><if pos:start="37:5" pos:end="57:5">if <condition pos:start="37:8" pos:end="37:34">(<expr pos:start="37:9" pos:end="37:33"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:13">FFABS</name><argument_list pos:start="37:14" pos:end="37:29">(<argument pos:start="37:15" pos:end="37:28"><expr pos:start="37:15" pos:end="37:28"><name pos:start="37:15" pos:end="37:18">xInc</name> <operator pos:start="37:20" pos:end="37:20">-</operator> <literal type="number" pos:start="37:22" pos:end="37:28">0x10000</literal></expr></argument>)</argument_list></call> <operator pos:start="37:31" pos:end="37:31">&lt;</operator><literal type="number" pos:start="37:32" pos:end="37:33">10</literal></expr>)</condition> <block pos:start="37:36" pos:end="57:5">{<block_content pos:start="39:9" pos:end="53:9"> <comment type="line" pos:start="37:38" pos:end="37:48">// unscaled</comment>

        <decl_stmt pos:start="39:9" pos:end="39:14"><decl pos:start="39:9" pos:end="39:13"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:18">filterSize</name><operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:79"><expr pos:start="43:9" pos:end="43:78"><call pos:start="43:9" pos:end="43:78"><name pos:start="43:9" pos:end="43:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="43:26" pos:end="43:78">(<argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><name pos:start="43:27" pos:end="43:30">NULL</name></expr></argument>, <argument pos:start="43:33" pos:end="43:38"><expr pos:start="43:33" pos:end="43:38"><name pos:start="43:33" pos:end="43:38">filter</name></expr></argument>, <argument pos:start="43:41" pos:end="43:71"><expr pos:start="43:41" pos:end="43:71"><name pos:start="43:41" pos:end="43:44">dstW</name><operator pos:start="43:45" pos:end="43:45">*</operator><sizeof pos:start="43:46" pos:end="43:60">sizeof<argument_list pos:start="43:52" pos:end="43:60">(<argument pos:start="43:53" pos:end="43:59"><expr pos:start="43:53" pos:end="43:59"><operator pos:start="43:53" pos:end="43:53">*</operator><name pos:start="43:54" pos:end="43:59">filter</name></expr></argument>)</argument_list></sizeof><operator pos:start="43:61" pos:end="43:61">*</operator><name pos:start="43:62" pos:end="43:71">filterSize</name></expr></argument>, <argument pos:start="43:74" pos:end="43:77"><expr pos:start="43:74" pos:end="43:77"><name pos:start="43:74" pos:end="43:77">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="47:9" pos:end="53:9">for <control pos:start="47:13" pos:end="47:30">(<init pos:start="47:14" pos:end="47:17"><expr pos:start="47:14" pos:end="47:16"><name pos:start="47:14" pos:end="47:14">i</name><operator pos:start="47:15" pos:end="47:15">=</operator><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</init> <condition pos:start="47:19" pos:end="47:25"><expr pos:start="47:19" pos:end="47:24"><name pos:start="47:19" pos:end="47:19">i</name><operator pos:start="47:20" pos:end="47:20">&lt;</operator><name pos:start="47:21" pos:end="47:24">dstW</name></expr>;</condition> <incr pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:27">i</name><operator pos:start="47:28" pos:end="47:29">++</operator></expr></incr>)</control> <block pos:start="47:32" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:30">

            <expr_stmt pos:start="49:13" pos:end="49:39"><expr pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:18">filter</name><index pos:start="49:19" pos:end="49:32">[<expr pos:start="49:20" pos:end="49:31"><name pos:start="49:20" pos:end="49:20">i</name><operator pos:start="49:21" pos:end="49:21">*</operator><name pos:start="49:22" pos:end="49:31">filterSize</name></expr>]</index></name><operator pos:start="49:33" pos:end="49:33">=</operator> <name pos:start="49:35" pos:end="49:38">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><operator pos:start="51:13" pos:end="51:13">(</operator><operator pos:start="51:14" pos:end="51:14">*</operator><name pos:start="51:15" pos:end="51:23">filterPos</name><operator pos:start="51:24" pos:end="51:24">)</operator><index pos:start="51:25" pos:end="51:27">[<expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">i</name></expr>]</index><operator pos:start="51:28" pos:end="51:28">=</operator><name pos:start="51:29" pos:end="51:29">i</name></expr>;</expr_stmt>

        </block_content>}</block></for>



    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="85:5">else if <condition pos:start="57:15" pos:end="57:31">(<expr pos:start="57:16" pos:end="57:30"><name pos:start="57:16" pos:end="57:20">flags</name><operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:30">SWS_POINT</name></expr>)</condition> <block pos:start="57:33" pos:end="85:5">{<block_content pos:start="59:9" pos:end="83:9"> <comment type="line" pos:start="57:35" pos:end="57:69">// lame looking point sampling mode</comment>

        <decl_stmt pos:start="59:9" pos:end="59:14"><decl pos:start="59:9" pos:end="59:13"><type pos:start="59:9" pos:end="59:11"><name pos:start="59:9" pos:end="59:11">int</name></type> <name pos:start="59:13" pos:end="59:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:22"><decl pos:start="61:9" pos:end="61:21"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:18">filterSize</name><operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:78"><expr pos:start="65:9" pos:end="65:77"><call pos:start="65:9" pos:end="65:77"><name pos:start="65:9" pos:end="65:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="65:25" pos:end="65:77">(<argument pos:start="65:26" pos:end="65:29"><expr pos:start="65:26" pos:end="65:29"><name pos:start="65:26" pos:end="65:29">NULL</name></expr></argument>, <argument pos:start="65:32" pos:end="65:37"><expr pos:start="65:32" pos:end="65:37"><name pos:start="65:32" pos:end="65:37">filter</name></expr></argument>, <argument pos:start="65:40" pos:end="65:70"><expr pos:start="65:40" pos:end="65:70"><name pos:start="65:40" pos:end="65:43">dstW</name><operator pos:start="65:44" pos:end="65:44">*</operator><sizeof pos:start="65:45" pos:end="65:59">sizeof<argument_list pos:start="65:51" pos:end="65:59">(<argument pos:start="65:52" pos:end="65:58"><expr pos:start="65:52" pos:end="65:58"><operator pos:start="65:52" pos:end="65:52">*</operator><name pos:start="65:53" pos:end="65:58">filter</name></expr></argument>)</argument_list></sizeof><operator pos:start="65:60" pos:end="65:60">*</operator><name pos:start="65:61" pos:end="65:70">filterSize</name></expr></argument>, <argument pos:start="65:73" pos:end="65:76"><expr pos:start="65:73" pos:end="65:76"><name pos:start="65:73" pos:end="65:76">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:17">xDstInSrc</name><operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:23">xInc</name><operator pos:start="69:24" pos:end="69:24">/</operator><literal type="number" pos:start="69:25" pos:end="69:27">2</literal> <operator pos:start="69:27" pos:end="69:27">-</operator> <literal type="number" pos:start="69:29" pos:end="69:34">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="71:9" pos:end="83:9">for <control pos:start="71:13" pos:end="71:30">(<init pos:start="71:14" pos:end="71:17"><expr pos:start="71:14" pos:end="71:16"><name pos:start="71:14" pos:end="71:14">i</name><operator pos:start="71:15" pos:end="71:15">=</operator><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr>;</init> <condition pos:start="71:19" pos:end="71:25"><expr pos:start="71:19" pos:end="71:24"><name pos:start="71:19" pos:end="71:19">i</name><operator pos:start="71:20" pos:end="71:20">&lt;</operator><name pos:start="71:21" pos:end="71:24">dstW</name></expr>;</condition> <incr pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><name pos:start="71:27" pos:end="71:27">i</name><operator pos:start="71:28" pos:end="71:29">++</operator></expr></incr>)</control> <block pos:start="71:32" pos:end="83:9">{<block_content pos:start="73:13" pos:end="81:29">

            <decl_stmt pos:start="73:13" pos:end="73:69"><decl pos:start="73:13" pos:end="73:68"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:18">xx</name><init pos:start="73:19" pos:end="73:68">= <expr pos:start="73:21" pos:end="73:68"><operator pos:start="73:21" pos:end="73:21">(</operator><name pos:start="73:22" pos:end="73:30">xDstInSrc</name> <operator pos:start="73:32" pos:end="73:32">-</operator> <operator pos:start="73:34" pos:end="73:34">(</operator><operator pos:start="73:35" pos:end="73:35">(</operator><name pos:start="73:36" pos:end="73:45">filterSize</name><operator pos:start="73:46" pos:end="73:46">-</operator><literal type="number" pos:start="73:47" pos:end="73:47">1</literal><operator pos:start="73:48" pos:end="73:48">)</operator><operator pos:start="73:49" pos:end="73:50">&lt;&lt;</operator><literal type="number" pos:start="73:51" pos:end="73:52">15</literal><operator pos:start="73:53" pos:end="73:53">)</operator> <operator pos:start="73:55" pos:end="73:55">+</operator> <operator pos:start="73:57" pos:end="73:57">(</operator><literal type="number" pos:start="73:58" pos:end="73:58">1</literal><operator pos:start="73:59" pos:end="73:60">&lt;&lt;</operator><literal type="number" pos:start="73:61" pos:end="73:62">15</literal><operator pos:start="73:63" pos:end="73:63">)</operator><operator pos:start="73:64" pos:end="73:64">)</operator><operator pos:start="73:65" pos:end="73:66">&gt;&gt;</operator><literal type="number" pos:start="73:67" pos:end="73:68">16</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><operator pos:start="77:13" pos:end="77:13">(</operator><operator pos:start="77:14" pos:end="77:14">*</operator><name pos:start="77:15" pos:end="77:23">filterPos</name><operator pos:start="77:24" pos:end="77:24">)</operator><index pos:start="77:25" pos:end="77:27">[<expr pos:start="77:26" pos:end="77:26"><name pos:start="77:26" pos:end="77:26">i</name></expr>]</index><operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:31">xx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:28"><expr pos:start="79:13" pos:end="79:27"><name pos:start="79:13" pos:end="79:21"><name pos:start="79:13" pos:end="79:18">filter</name><index pos:start="79:19" pos:end="79:21">[<expr pos:start="79:20" pos:end="79:20"><name pos:start="79:20" pos:end="79:20">i</name></expr>]</index></name><operator pos:start="79:22" pos:end="79:22">=</operator> <name pos:start="79:24" pos:end="79:27">fone</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:29"><expr pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:21">xDstInSrc</name><operator pos:start="81:22" pos:end="81:23">+=</operator> <name pos:start="81:25" pos:end="81:28">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="85:7" pos:end="127:5">else if <condition pos:start="85:15" pos:end="85:82">(<expr pos:start="85:16" pos:end="85:81"><operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:20">xInc</name> <operator pos:start="85:22" pos:end="85:23">&lt;=</operator> <operator pos:start="85:25" pos:end="85:25">(</operator><literal type="number" pos:start="85:26" pos:end="85:26">1</literal><operator pos:start="85:27" pos:end="85:28">&lt;&lt;</operator><literal type="number" pos:start="85:29" pos:end="85:30">16</literal><operator pos:start="85:31" pos:end="85:31">)</operator> <operator pos:start="85:33" pos:end="85:34">&amp;&amp;</operator> <operator pos:start="85:36" pos:end="85:36">(</operator><name pos:start="85:37" pos:end="85:41">flags</name><operator pos:start="85:42" pos:end="85:42">&amp;</operator><name pos:start="85:43" pos:end="85:50">SWS_AREA</name><operator pos:start="85:51" pos:end="85:51">)</operator><operator pos:start="85:52" pos:end="85:52">)</operator> <operator pos:start="85:54" pos:end="85:55">||</operator> <operator pos:start="85:57" pos:end="85:57">(</operator><name pos:start="85:58" pos:end="85:62">flags</name><operator pos:start="85:63" pos:end="85:63">&amp;</operator><name pos:start="85:64" pos:end="85:80">SWS_FAST_BILINEAR</name><operator pos:start="85:81" pos:end="85:81">)</operator></expr>)</condition> <block pos:start="85:84" pos:end="127:5">{<block_content pos:start="87:9" pos:end="125:9"> <comment type="line" pos:start="85:86" pos:end="85:104">// bilinear upscale</comment>

        <decl_stmt pos:start="87:9" pos:end="87:14"><decl pos:start="87:9" pos:end="87:13"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:22"><decl pos:start="89:9" pos:end="89:21"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:21">xDstInSrc</name></decl>;</decl_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:18">filterSize</name><operator pos:start="91:19" pos:end="91:19">=</operator> <literal type="number" pos:start="91:21" pos:end="91:21">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:78"><expr pos:start="93:9" pos:end="93:77"><call pos:start="93:9" pos:end="93:77"><name pos:start="93:9" pos:end="93:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="93:25" pos:end="93:77">(<argument pos:start="93:26" pos:end="93:29"><expr pos:start="93:26" pos:end="93:29"><name pos:start="93:26" pos:end="93:29">NULL</name></expr></argument>, <argument pos:start="93:32" pos:end="93:37"><expr pos:start="93:32" pos:end="93:37"><name pos:start="93:32" pos:end="93:37">filter</name></expr></argument>, <argument pos:start="93:40" pos:end="93:70"><expr pos:start="93:40" pos:end="93:70"><name pos:start="93:40" pos:end="93:43">dstW</name><operator pos:start="93:44" pos:end="93:44">*</operator><sizeof pos:start="93:45" pos:end="93:59">sizeof<argument_list pos:start="93:51" pos:end="93:59">(<argument pos:start="93:52" pos:end="93:58"><expr pos:start="93:52" pos:end="93:58"><operator pos:start="93:52" pos:end="93:52">*</operator><name pos:start="93:53" pos:end="93:58">filter</name></expr></argument>)</argument_list></sizeof><operator pos:start="93:60" pos:end="93:60">*</operator><name pos:start="93:61" pos:end="93:70">filterSize</name></expr></argument>, <argument pos:start="93:73" pos:end="93:76"><expr pos:start="93:73" pos:end="93:76"><name pos:start="93:73" pos:end="93:76">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:35"><expr pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:17">xDstInSrc</name><operator pos:start="97:18" pos:end="97:18">=</operator> <name pos:start="97:20" pos:end="97:23">xInc</name><operator pos:start="97:24" pos:end="97:24">/</operator><literal type="number" pos:start="97:25" pos:end="97:27">2</literal> <operator pos:start="97:27" pos:end="97:27">-</operator> <literal type="number" pos:start="97:29" pos:end="97:34">0x8000</literal></expr>;</expr_stmt>

        <for pos:start="99:9" pos:end="125:9">for <control pos:start="99:13" pos:end="99:30">(<init pos:start="99:14" pos:end="99:17"><expr pos:start="99:14" pos:end="99:16"><name pos:start="99:14" pos:end="99:14">i</name><operator pos:start="99:15" pos:end="99:15">=</operator><literal type="number" pos:start="99:16" pos:end="99:16">0</literal></expr>;</init> <condition pos:start="99:19" pos:end="99:25"><expr pos:start="99:19" pos:end="99:24"><name pos:start="99:19" pos:end="99:19">i</name><operator pos:start="99:20" pos:end="99:20">&lt;</operator><name pos:start="99:21" pos:end="99:24">dstW</name></expr>;</condition> <incr pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:27">i</name><operator pos:start="99:28" pos:end="99:29">++</operator></expr></incr>)</control> <block pos:start="99:32" pos:end="125:9">{<block_content pos:start="101:13" pos:end="123:29">

            <decl_stmt pos:start="101:13" pos:end="101:69"><decl pos:start="101:13" pos:end="101:68"><type pos:start="101:13" pos:end="101:15"><name pos:start="101:13" pos:end="101:15">int</name></type> <name pos:start="101:17" pos:end="101:18">xx</name><init pos:start="101:19" pos:end="101:68">= <expr pos:start="101:21" pos:end="101:68"><operator pos:start="101:21" pos:end="101:21">(</operator><name pos:start="101:22" pos:end="101:30">xDstInSrc</name> <operator pos:start="101:32" pos:end="101:32">-</operator> <operator pos:start="101:34" pos:end="101:34">(</operator><operator pos:start="101:35" pos:end="101:35">(</operator><name pos:start="101:36" pos:end="101:45">filterSize</name><operator pos:start="101:46" pos:end="101:46">-</operator><literal type="number" pos:start="101:47" pos:end="101:47">1</literal><operator pos:start="101:48" pos:end="101:48">)</operator><operator pos:start="101:49" pos:end="101:50">&lt;&lt;</operator><literal type="number" pos:start="101:51" pos:end="101:52">15</literal><operator pos:start="101:53" pos:end="101:53">)</operator> <operator pos:start="101:55" pos:end="101:55">+</operator> <operator pos:start="101:57" pos:end="101:57">(</operator><literal type="number" pos:start="101:58" pos:end="101:58">1</literal><operator pos:start="101:59" pos:end="101:60">&lt;&lt;</operator><literal type="number" pos:start="101:61" pos:end="101:62">15</literal><operator pos:start="101:63" pos:end="101:63">)</operator><operator pos:start="101:64" pos:end="101:64">)</operator><operator pos:start="101:65" pos:end="101:66">&gt;&gt;</operator><literal type="number" pos:start="101:67" pos:end="101:68">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:18"><decl pos:start="103:13" pos:end="103:17"><type pos:start="103:13" pos:end="103:15"><name pos:start="103:13" pos:end="103:15">int</name></type> <name pos:start="103:17" pos:end="103:17">j</name></decl>;</decl_stmt>



            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><operator pos:start="107:13" pos:end="107:13">(</operator><operator pos:start="107:14" pos:end="107:14">*</operator><name pos:start="107:15" pos:end="107:23">filterPos</name><operator pos:start="107:24" pos:end="107:24">)</operator><index pos:start="107:25" pos:end="107:27">[<expr pos:start="107:26" pos:end="107:26"><name pos:start="107:26" pos:end="107:26">i</name></expr>]</index><operator pos:start="107:28" pos:end="107:28">=</operator> <name pos:start="107:30" pos:end="107:31">xx</name></expr>;</expr_stmt>

            <comment type="line" pos:start="109:13" pos:end="109:68">//bilinear upscale / linear interpolate / area averaging</comment>

            <for pos:start="111:13" pos:end="121:13">for <control pos:start="111:17" pos:end="111:40">(<init pos:start="111:18" pos:end="111:21"><expr pos:start="111:18" pos:end="111:20"><name pos:start="111:18" pos:end="111:18">j</name><operator pos:start="111:19" pos:end="111:19">=</operator><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</init> <condition pos:start="111:23" pos:end="111:35"><expr pos:start="111:23" pos:end="111:34"><name pos:start="111:23" pos:end="111:23">j</name><operator pos:start="111:24" pos:end="111:24">&lt;</operator><name pos:start="111:25" pos:end="111:34">filterSize</name></expr>;</condition> <incr pos:start="111:37" pos:end="111:39"><expr pos:start="111:37" pos:end="111:39"><name pos:start="111:37" pos:end="111:37">j</name><operator pos:start="111:38" pos:end="111:39">++</operator></expr></incr>)</control> <block pos:start="111:42" pos:end="121:13">{<block_content pos:start="113:17" pos:end="119:21">

                <decl_stmt pos:start="113:17" pos:end="113:77"><decl pos:start="113:17" pos:end="113:76"><type pos:start="113:17" pos:end="113:23"><name pos:start="113:17" pos:end="113:23">int64_t</name></type> <name pos:start="113:25" pos:end="113:29">coeff</name><init pos:start="113:30" pos:end="113:76">= <expr pos:start="113:32" pos:end="113:76"><name pos:start="113:32" pos:end="113:35">fone</name> <operator pos:start="113:37" pos:end="113:37">-</operator> <call pos:start="113:39" pos:end="113:65"><name pos:start="113:39" pos:end="113:43">FFABS</name><argument_list pos:start="113:44" pos:end="113:65">(<argument pos:start="113:45" pos:end="113:64"><expr pos:start="113:45" pos:end="113:64"><operator pos:start="113:45" pos:end="113:45">(</operator><name pos:start="113:46" pos:end="113:47">xx</name><operator pos:start="113:48" pos:end="113:49">&lt;&lt;</operator><literal type="number" pos:start="113:50" pos:end="113:51">16</literal><operator pos:start="113:52" pos:end="113:52">)</operator> <operator pos:start="113:54" pos:end="113:54">-</operator> <name pos:start="113:56" pos:end="113:64">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="113:66" pos:end="113:66">*</operator><operator pos:start="113:67" pos:end="113:67">(</operator><name pos:start="113:68" pos:end="113:71">fone</name><operator pos:start="113:72" pos:end="113:73">&gt;&gt;</operator><literal type="number" pos:start="113:74" pos:end="113:75">16</literal><operator pos:start="113:76" pos:end="113:76">)</operator></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="115:17" pos:end="115:37"><if pos:start="115:17" pos:end="115:37">if <condition pos:start="115:20" pos:end="115:28">(<expr pos:start="115:21" pos:end="115:27"><name pos:start="115:21" pos:end="115:25">coeff</name><operator pos:start="115:26" pos:end="115:26">&lt;</operator><literal type="number" pos:start="115:27" pos:end="115:27">0</literal></expr>)</condition><block type="pseudo" pos:start="115:30" pos:end="115:37"><block_content pos:start="115:30" pos:end="115:37"> <expr_stmt pos:start="115:30" pos:end="115:37"><expr pos:start="115:30" pos:end="115:36"><name pos:start="115:30" pos:end="115:34">coeff</name><operator pos:start="115:35" pos:end="115:35">=</operator><literal type="number" pos:start="115:36" pos:end="115:36">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:48"><expr pos:start="117:17" pos:end="117:47"><name pos:start="117:17" pos:end="117:40"><name pos:start="117:17" pos:end="117:22">filter</name><index pos:start="117:23" pos:end="117:40">[<expr pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:24">i</name><operator pos:start="117:25" pos:end="117:25">*</operator><name pos:start="117:26" pos:end="117:35">filterSize</name> <operator pos:start="117:37" pos:end="117:37">+</operator> <name pos:start="117:39" pos:end="117:39">j</name></expr>]</index></name><operator pos:start="117:41" pos:end="117:41">=</operator> <name pos:start="117:43" pos:end="117:47">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="119:17" pos:end="119:21"><expr pos:start="119:17" pos:end="119:20"><name pos:start="119:17" pos:end="119:18">xx</name><operator pos:start="119:19" pos:end="119:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="123:13" pos:end="123:29"><expr pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:21">xDstInSrc</name><operator pos:start="123:22" pos:end="123:23">+=</operator> <name pos:start="123:25" pos:end="123:28">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="333:5">else <block pos:start="127:12" pos:end="333:5">{<block_content pos:start="129:9" pos:end="331:9">

        <decl_stmt pos:start="129:9" pos:end="129:22"><decl pos:start="129:9" pos:end="129:21"><type pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:11">int</name></type> <name pos:start="129:13" pos:end="129:21">xDstInSrc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:23"><decl pos:start="131:9" pos:end="131:22"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:22">sizeFactor</name></decl>;</decl_stmt>



        <if_stmt pos:start="135:9" pos:end="157:9"><if pos:start="135:9" pos:end="135:56">if      <condition pos:start="135:17" pos:end="135:35">(<expr pos:start="135:18" pos:end="135:34"><name pos:start="135:18" pos:end="135:22">flags</name><operator pos:start="135:23" pos:end="135:23">&amp;</operator><name pos:start="135:24" pos:end="135:34">SWS_BICUBIC</name></expr>)</condition><block type="pseudo" pos:start="135:42" pos:end="135:56"><block_content pos:start="135:42" pos:end="135:56">      <expr_stmt pos:start="135:42" pos:end="135:56"><expr pos:start="135:42" pos:end="135:55"><name pos:start="135:42" pos:end="135:51">sizeFactor</name><operator pos:start="135:52" pos:end="135:52">=</operator>  <literal type="number" pos:start="135:55" pos:end="135:55">4</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="137:9" pos:end="137:56">else if <condition pos:start="137:17" pos:end="137:29">(<expr pos:start="137:18" pos:end="137:28"><name pos:start="137:18" pos:end="137:22">flags</name><operator pos:start="137:23" pos:end="137:23">&amp;</operator><name pos:start="137:24" pos:end="137:28">SWS_X</name></expr>)</condition><block type="pseudo" pos:start="137:42" pos:end="137:56"><block_content pos:start="137:42" pos:end="137:56">            <expr_stmt pos:start="137:42" pos:end="137:56"><expr pos:start="137:42" pos:end="137:55"><name pos:start="137:42" pos:end="137:51">sizeFactor</name><operator pos:start="137:52" pos:end="137:52">=</operator>  <literal type="number" pos:start="137:55" pos:end="137:55">8</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="139:9" pos:end="139:56">else if <condition pos:start="139:17" pos:end="139:32">(<expr pos:start="139:18" pos:end="139:31"><name pos:start="139:18" pos:end="139:22">flags</name><operator pos:start="139:23" pos:end="139:23">&amp;</operator><name pos:start="139:24" pos:end="139:31">SWS_AREA</name></expr>)</condition><block type="pseudo" pos:start="139:42" pos:end="139:56"><block_content pos:start="139:42" pos:end="139:56">         <expr_stmt pos:start="139:42" pos:end="139:56"><expr pos:start="139:42" pos:end="139:55"><name pos:start="139:42" pos:end="139:51">sizeFactor</name><operator pos:start="139:52" pos:end="139:52">=</operator>  <literal type="number" pos:start="139:55" pos:end="139:55">1</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="139:58" pos:end="139:101">//downscale only, for upscale it is bilinear</comment>

        <if type="elseif" pos:start="141:9" pos:end="141:56">else if <condition pos:start="141:17" pos:end="141:33">(<expr pos:start="141:18" pos:end="141:32"><name pos:start="141:18" pos:end="141:22">flags</name><operator pos:start="141:23" pos:end="141:23">&amp;</operator><name pos:start="141:24" pos:end="141:32">SWS_GAUSS</name></expr>)</condition><block type="pseudo" pos:start="141:42" pos:end="141:56"><block_content pos:start="141:42" pos:end="141:56">        <expr_stmt pos:start="141:42" pos:end="141:56"><expr pos:start="141:42" pos:end="141:55"><name pos:start="141:42" pos:end="141:51">sizeFactor</name><operator pos:start="141:52" pos:end="141:52">=</operator>  <literal type="number" pos:start="141:55" pos:end="141:55">8</literal></expr>;</expr_stmt></block_content></block></if>   <comment type="line" pos:start="141:60" pos:end="141:73">// infinite ;)</comment>

        <if type="elseif" pos:start="143:9" pos:end="143:106">else if <condition pos:start="143:17" pos:end="143:35">(<expr pos:start="143:18" pos:end="143:34"><name pos:start="143:18" pos:end="143:22">flags</name><operator pos:start="143:23" pos:end="143:23">&amp;</operator><name pos:start="143:24" pos:end="143:34">SWS_LANCZOS</name></expr>)</condition><block type="pseudo" pos:start="143:42" pos:end="143:106"><block_content pos:start="143:42" pos:end="143:106">      <expr_stmt pos:start="143:42" pos:end="143:106"><expr pos:start="143:42" pos:end="143:105"><name pos:start="143:42" pos:end="143:51">sizeFactor</name><operator pos:start="143:52" pos:end="143:52">=</operator> <ternary pos:start="143:54" pos:end="143:105"><condition pos:start="143:54" pos:end="143:84"><expr pos:start="143:54" pos:end="143:82"><name pos:start="143:54" pos:end="143:61"><name pos:start="143:54" pos:end="143:58">param</name><index pos:start="143:59" pos:end="143:61">[<expr pos:start="143:60" pos:end="143:60"><literal type="number" pos:start="143:60" pos:end="143:60">0</literal></expr>]</index></name> <operator pos:start="143:63" pos:end="143:64">!=</operator> <name pos:start="143:66" pos:end="143:82">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="143:86" pos:end="143:101"> <expr pos:start="143:86" pos:end="143:101"><call pos:start="143:86" pos:end="143:101"><name pos:start="143:86" pos:end="143:89">ceil</name><argument_list pos:start="143:90" pos:end="143:101">(<argument pos:start="143:91" pos:end="143:100"><expr pos:start="143:91" pos:end="143:100"><literal type="number" pos:start="143:91" pos:end="143:91">2</literal><operator pos:start="143:92" pos:end="143:92">*</operator><name pos:start="143:93" pos:end="143:100"><name pos:start="143:93" pos:end="143:97">param</name><index pos:start="143:98" pos:end="143:100">[<expr pos:start="143:99" pos:end="143:99"><literal type="number" pos:start="143:99" pos:end="143:99">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="143:103" pos:end="143:105">: <expr pos:start="143:105" pos:end="143:105"><literal type="number" pos:start="143:105" pos:end="143:105">6</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="145:9" pos:end="145:56">else if <condition pos:start="145:17" pos:end="145:32">(<expr pos:start="145:18" pos:end="145:31"><name pos:start="145:18" pos:end="145:22">flags</name><operator pos:start="145:23" pos:end="145:23">&amp;</operator><name pos:start="145:24" pos:end="145:31">SWS_SINC</name></expr>)</condition><block type="pseudo" pos:start="145:42" pos:end="145:56"><block_content pos:start="145:42" pos:end="145:56">         <expr_stmt pos:start="145:42" pos:end="145:56"><expr pos:start="145:42" pos:end="145:55"><name pos:start="145:42" pos:end="145:51">sizeFactor</name><operator pos:start="145:52" pos:end="145:52">=</operator> <literal type="number" pos:start="145:54" pos:end="145:55">20</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="145:58" pos:end="145:71">// infinite ;)</comment>

        <if type="elseif" pos:start="147:9" pos:end="147:56">else if <condition pos:start="147:17" pos:end="147:34">(<expr pos:start="147:18" pos:end="147:33"><name pos:start="147:18" pos:end="147:22">flags</name><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:33">SWS_SPLINE</name></expr>)</condition><block type="pseudo" pos:start="147:42" pos:end="147:56"><block_content pos:start="147:42" pos:end="147:56">       <expr_stmt pos:start="147:42" pos:end="147:56"><expr pos:start="147:42" pos:end="147:55"><name pos:start="147:42" pos:end="147:51">sizeFactor</name><operator pos:start="147:52" pos:end="147:52">=</operator> <literal type="number" pos:start="147:54" pos:end="147:55">20</literal></expr>;</expr_stmt></block_content></block></if>  <comment type="line" pos:start="147:59" pos:end="147:72">// infinite ;)</comment>

        <if type="elseif" pos:start="149:9" pos:end="149:56">else if <condition pos:start="149:17" pos:end="149:36">(<expr pos:start="149:18" pos:end="149:35"><name pos:start="149:18" pos:end="149:22">flags</name><operator pos:start="149:23" pos:end="149:23">&amp;</operator><name pos:start="149:24" pos:end="149:35">SWS_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="149:42" pos:end="149:56"><block_content pos:start="149:42" pos:end="149:56">     <expr_stmt pos:start="149:42" pos:end="149:56"><expr pos:start="149:42" pos:end="149:55"><name pos:start="149:42" pos:end="149:51">sizeFactor</name><operator pos:start="149:52" pos:end="149:52">=</operator>  <literal type="number" pos:start="149:55" pos:end="149:55">2</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="151:9" pos:end="157:9">else <block pos:start="151:14" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:22">

            <expr_stmt pos:start="153:13" pos:end="153:26"><expr pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:22">sizeFactor</name><operator pos:start="153:23" pos:end="153:23">=</operator> <literal type="number" pos:start="153:25" pos:end="153:25">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="153:28" pos:end="153:47">//GCC warning killer</comment>

            <expr_stmt pos:start="155:13" pos:end="155:22"><expr pos:start="155:13" pos:end="155:21"><call pos:start="155:13" pos:end="155:21"><name pos:start="155:13" pos:end="155:18">assert</name><argument_list pos:start="155:19" pos:end="155:21">(<argument pos:start="155:20" pos:end="155:20"><expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="161:9" pos:end="163:83"><if pos:start="161:9" pos:end="161:59">if <condition pos:start="161:12" pos:end="161:26">(<expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:16">xInc</name> <operator pos:start="161:18" pos:end="161:19">&lt;=</operator> <literal type="number" pos:start="161:21" pos:end="161:21">1</literal><operator pos:start="161:22" pos:end="161:23">&lt;&lt;</operator><literal type="number" pos:start="161:24" pos:end="161:25">16</literal></expr>)</condition><block type="pseudo" pos:start="161:33" pos:end="161:59"><block_content pos:start="161:33" pos:end="161:59">      <expr_stmt pos:start="161:33" pos:end="161:59"><expr pos:start="161:33" pos:end="161:58"><name pos:start="161:33" pos:end="161:42">filterSize</name><operator pos:start="161:43" pos:end="161:43">=</operator> <literal type="number" pos:start="161:45" pos:end="161:47">1</literal> <operator pos:start="161:47" pos:end="161:47">+</operator> <name pos:start="161:49" pos:end="161:58">sizeFactor</name></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="161:61" pos:end="161:70">// upscale</comment>

        <else pos:start="163:9" pos:end="163:83">else<block type="pseudo" pos:start="163:33" pos:end="163:83"><block_content pos:start="163:33" pos:end="163:83">                    <expr_stmt pos:start="163:33" pos:end="163:83"><expr pos:start="163:33" pos:end="163:82"><name pos:start="163:33" pos:end="163:42">filterSize</name><operator pos:start="163:43" pos:end="163:43">=</operator> <literal type="number" pos:start="163:45" pos:end="163:47">1</literal> <operator pos:start="163:47" pos:end="163:47">+</operator> <operator pos:start="163:49" pos:end="163:49">(</operator><name pos:start="163:50" pos:end="163:59">sizeFactor</name><operator pos:start="163:60" pos:end="163:60">*</operator><name pos:start="163:61" pos:end="163:64">srcW</name> <operator pos:start="163:66" pos:end="163:66">+</operator> <name pos:start="163:68" pos:end="163:71">dstW</name> <operator pos:start="163:73" pos:end="163:73">-</operator> <literal type="number" pos:start="163:75" pos:end="163:75">1</literal><operator pos:start="163:76" pos:end="163:76">)</operator><operator pos:start="163:77" pos:end="163:77">/</operator> <name pos:start="163:79" pos:end="163:82">dstW</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="167:9" pos:end="167:51"><if pos:start="167:9" pos:end="167:51">if <condition pos:start="167:12" pos:end="167:32">(<expr pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:22">filterSize</name> <operator pos:start="167:24" pos:end="167:24">&gt;</operator> <name pos:start="167:26" pos:end="167:29">srcW</name><operator pos:start="167:30" pos:end="167:30">-</operator><literal type="number" pos:start="167:31" pos:end="167:31">2</literal></expr>)</condition><block type="pseudo" pos:start="167:34" pos:end="167:51"><block_content pos:start="167:34" pos:end="167:51"> <expr_stmt pos:start="167:34" pos:end="167:51"><expr pos:start="167:34" pos:end="167:50"><name pos:start="167:34" pos:end="167:43">filterSize</name><operator pos:start="167:44" pos:end="167:44">=</operator><name pos:start="167:45" pos:end="167:48">srcW</name><operator pos:start="167:49" pos:end="167:49">-</operator><literal type="number" pos:start="167:50" pos:end="167:50">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:78"><expr pos:start="171:9" pos:end="171:77"><call pos:start="171:9" pos:end="171:77"><name pos:start="171:9" pos:end="171:24">FF_ALLOC_OR_GOTO</name><argument_list pos:start="171:25" pos:end="171:77">(<argument pos:start="171:26" pos:end="171:29"><expr pos:start="171:26" pos:end="171:29"><name pos:start="171:26" pos:end="171:29">NULL</name></expr></argument>, <argument pos:start="171:32" pos:end="171:37"><expr pos:start="171:32" pos:end="171:37"><name pos:start="171:32" pos:end="171:37">filter</name></expr></argument>, <argument pos:start="171:40" pos:end="171:70"><expr pos:start="171:40" pos:end="171:70"><name pos:start="171:40" pos:end="171:43">dstW</name><operator pos:start="171:44" pos:end="171:44">*</operator><sizeof pos:start="171:45" pos:end="171:59">sizeof<argument_list pos:start="171:51" pos:end="171:59">(<argument pos:start="171:52" pos:end="171:58"><expr pos:start="171:52" pos:end="171:58"><operator pos:start="171:52" pos:end="171:52">*</operator><name pos:start="171:53" pos:end="171:58">filter</name></expr></argument>)</argument_list></sizeof><operator pos:start="171:60" pos:end="171:60">*</operator><name pos:start="171:61" pos:end="171:70">filterSize</name></expr></argument>, <argument pos:start="171:73" pos:end="171:76"><expr pos:start="171:73" pos:end="171:76"><name pos:start="171:73" pos:end="171:76">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:17">xDstInSrc</name><operator pos:start="175:18" pos:end="175:18">=</operator> <name pos:start="175:20" pos:end="175:23">xInc</name> <operator pos:start="175:25" pos:end="175:25">-</operator> <literal type="number" pos:start="175:27" pos:end="175:33">0x10000</literal></expr>;</expr_stmt>

        <for pos:start="177:9" pos:end="331:9">for <control pos:start="177:13" pos:end="177:30">(<init pos:start="177:14" pos:end="177:17"><expr pos:start="177:14" pos:end="177:16"><name pos:start="177:14" pos:end="177:14">i</name><operator pos:start="177:15" pos:end="177:15">=</operator><literal type="number" pos:start="177:16" pos:end="177:16">0</literal></expr>;</init> <condition pos:start="177:19" pos:end="177:25"><expr pos:start="177:19" pos:end="177:24"><name pos:start="177:19" pos:end="177:19">i</name><operator pos:start="177:20" pos:end="177:20">&lt;</operator><name pos:start="177:21" pos:end="177:24">dstW</name></expr>;</condition> <incr pos:start="177:27" pos:end="177:29"><expr pos:start="177:27" pos:end="177:29"><name pos:start="177:27" pos:end="177:27">i</name><operator pos:start="177:28" pos:end="177:29">++</operator></expr></incr>)</control> <block pos:start="177:32" pos:end="331:9">{<block_content pos:start="179:13" pos:end="329:31">

            <decl_stmt pos:start="179:13" pos:end="179:65"><decl pos:start="179:13" pos:end="179:64"><type pos:start="179:13" pos:end="179:15"><name pos:start="179:13" pos:end="179:15">int</name></type> <name pos:start="179:17" pos:end="179:18">xx</name><init pos:start="179:19" pos:end="179:64">= <expr pos:start="179:21" pos:end="179:64"><operator pos:start="179:21" pos:end="179:21">(</operator><name pos:start="179:22" pos:end="179:30">xDstInSrc</name> <operator pos:start="179:32" pos:end="179:32">-</operator> <operator pos:start="179:34" pos:end="179:34">(</operator><operator pos:start="179:35" pos:end="179:35">(</operator><name pos:start="179:36" pos:end="179:45">filterSize</name><operator pos:start="179:46" pos:end="179:46">-</operator><literal type="number" pos:start="179:47" pos:end="179:47">2</literal><operator pos:start="179:48" pos:end="179:48">)</operator><operator pos:start="179:49" pos:end="179:50">&lt;&lt;</operator><literal type="number" pos:start="179:51" pos:end="179:52">16</literal><operator pos:start="179:53" pos:end="179:53">)</operator><operator pos:start="179:54" pos:end="179:54">)</operator> <operator pos:start="179:56" pos:end="179:56">/</operator> <operator pos:start="179:58" pos:end="179:58">(</operator><literal type="number" pos:start="179:59" pos:end="179:59">1</literal><operator pos:start="179:60" pos:end="179:61">&lt;&lt;</operator><literal type="number" pos:start="179:62" pos:end="179:63">17</literal><operator pos:start="179:64" pos:end="179:64">)</operator></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="181:13" pos:end="181:18"><decl pos:start="181:13" pos:end="181:17"><type pos:start="181:13" pos:end="181:15"><name pos:start="181:13" pos:end="181:15">int</name></type> <name pos:start="181:17" pos:end="181:17">j</name></decl>;</decl_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:32"><expr pos:start="183:13" pos:end="183:31"><operator pos:start="183:13" pos:end="183:13">(</operator><operator pos:start="183:14" pos:end="183:14">*</operator><name pos:start="183:15" pos:end="183:23">filterPos</name><operator pos:start="183:24" pos:end="183:24">)</operator><index pos:start="183:25" pos:end="183:27">[<expr pos:start="183:26" pos:end="183:26"><name pos:start="183:26" pos:end="183:26">i</name></expr>]</index><operator pos:start="183:28" pos:end="183:28">=</operator> <name pos:start="183:30" pos:end="183:31">xx</name></expr>;</expr_stmt>

            <for pos:start="185:13" pos:end="327:13">for <control pos:start="185:17" pos:end="185:40">(<init pos:start="185:18" pos:end="185:21"><expr pos:start="185:18" pos:end="185:20"><name pos:start="185:18" pos:end="185:18">j</name><operator pos:start="185:19" pos:end="185:19">=</operator><literal type="number" pos:start="185:20" pos:end="185:20">0</literal></expr>;</init> <condition pos:start="185:23" pos:end="185:35"><expr pos:start="185:23" pos:end="185:34"><name pos:start="185:23" pos:end="185:23">j</name><operator pos:start="185:24" pos:end="185:24">&lt;</operator><name pos:start="185:25" pos:end="185:34">filterSize</name></expr>;</condition> <incr pos:start="185:37" pos:end="185:39"><expr pos:start="185:37" pos:end="185:39"><name pos:start="185:37" pos:end="185:37">j</name><operator pos:start="185:38" pos:end="185:39">++</operator></expr></incr>)</control> <block pos:start="185:42" pos:end="327:13">{<block_content pos:start="187:17" pos:end="325:21">

                <decl_stmt pos:start="187:17" pos:end="187:70"><decl pos:start="187:17" pos:end="187:69"><type pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:23">int64_t</name></type> <name pos:start="187:25" pos:end="187:25">d</name><init pos:start="187:26" pos:end="187:69">= <expr pos:start="187:28" pos:end="187:69"><operator pos:start="187:28" pos:end="187:28">(</operator><operator pos:start="187:29" pos:end="187:29">(</operator><name pos:start="187:30" pos:end="187:36">int64_t</name><operator pos:start="187:37" pos:end="187:37">)</operator><call pos:start="187:38" pos:end="187:64"><name pos:start="187:38" pos:end="187:42">FFABS</name><argument_list pos:start="187:43" pos:end="187:64">(<argument pos:start="187:44" pos:end="187:63"><expr pos:start="187:44" pos:end="187:63"><operator pos:start="187:44" pos:end="187:44">(</operator><name pos:start="187:45" pos:end="187:46">xx</name><operator pos:start="187:47" pos:end="187:48">&lt;&lt;</operator><literal type="number" pos:start="187:49" pos:end="187:50">17</literal><operator pos:start="187:51" pos:end="187:51">)</operator> <operator pos:start="187:53" pos:end="187:53">-</operator> <name pos:start="187:55" pos:end="187:63">xDstInSrc</name></expr></argument>)</argument_list></call><operator pos:start="187:65" pos:end="187:65">)</operator><operator pos:start="187:66" pos:end="187:67">&lt;&lt;</operator><literal type="number" pos:start="187:68" pos:end="187:69">13</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="189:17" pos:end="189:30"><decl pos:start="189:17" pos:end="189:29"><type pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22">double</name></type> <name pos:start="189:24" pos:end="189:29">floatd</name></decl>;</decl_stmt>

                <decl_stmt pos:start="191:17" pos:end="191:30"><decl pos:start="191:17" pos:end="191:29"><type pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:23">int64_t</name></type> <name pos:start="191:25" pos:end="191:29">coeff</name></decl>;</decl_stmt>



                <if_stmt pos:start="195:17" pos:end="197:35"><if pos:start="195:17" pos:end="197:35">if <condition pos:start="195:20" pos:end="195:33">(<expr pos:start="195:21" pos:end="195:32"><name pos:start="195:21" pos:end="195:24">xInc</name> <operator pos:start="195:26" pos:end="195:26">&gt;</operator> <literal type="number" pos:start="195:28" pos:end="195:28">1</literal><operator pos:start="195:29" pos:end="195:30">&lt;&lt;</operator><literal type="number" pos:start="195:31" pos:end="195:32">16</literal></expr>)</condition><block type="pseudo" pos:start="197:21" pos:end="197:35"><block_content pos:start="197:21" pos:end="197:35">

                    <expr_stmt pos:start="197:21" pos:end="197:35"><expr pos:start="197:21" pos:end="197:34"><name pos:start="197:21" pos:end="197:21">d</name><operator pos:start="197:22" pos:end="197:22">=</operator> <name pos:start="197:24" pos:end="197:24">d</name><operator pos:start="197:25" pos:end="197:25">*</operator><name pos:start="197:26" pos:end="197:29">dstW</name><operator pos:start="197:30" pos:end="197:30">/</operator><name pos:start="197:31" pos:end="197:34">srcW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:42"><expr pos:start="199:17" pos:end="199:41"><name pos:start="199:17" pos:end="199:22">floatd</name><operator pos:start="199:23" pos:end="199:23">=</operator> <name pos:start="199:25" pos:end="199:25">d</name> <operator pos:start="199:27" pos:end="199:27">*</operator> <operator pos:start="199:29" pos:end="199:29">(</operator><literal type="number" pos:start="199:30" pos:end="199:32">1.0</literal><operator pos:start="199:33" pos:end="199:33">/</operator><operator pos:start="199:34" pos:end="199:34">(</operator><literal type="number" pos:start="199:35" pos:end="199:35">1</literal><operator pos:start="199:36" pos:end="199:37">&lt;&lt;</operator><literal type="number" pos:start="199:38" pos:end="199:39">30</literal><operator pos:start="199:40" pos:end="199:40">)</operator><operator pos:start="199:41" pos:end="199:41">)</operator></expr>;</expr_stmt>



                <if_stmt pos:start="203:17" pos:end="319:17"><if pos:start="203:17" pos:end="235:17">if <condition pos:start="203:20" pos:end="203:40">(<expr pos:start="203:21" pos:end="203:39"><name pos:start="203:21" pos:end="203:25">flags</name> <operator pos:start="203:27" pos:end="203:27">&amp;</operator> <name pos:start="203:29" pos:end="203:39">SWS_BICUBIC</name></expr>)</condition> <block pos:start="203:42" pos:end="235:17">{<block_content pos:start="205:21" pos:end="233:43">

                    <decl_stmt pos:start="205:21" pos:end="205:90"><decl pos:start="205:21" pos:end="205:89"><type pos:start="205:21" pos:end="205:27"><name pos:start="205:21" pos:end="205:27">int64_t</name></type> <name pos:start="205:29" pos:end="205:29">B</name><init pos:start="205:30" pos:end="205:89">= <expr pos:start="205:32" pos:end="205:89"><operator pos:start="205:32" pos:end="205:32">(</operator><ternary pos:start="205:33" pos:end="205:78"><condition pos:start="205:33" pos:end="205:63"><expr pos:start="205:33" pos:end="205:61"><name pos:start="205:33" pos:end="205:40"><name pos:start="205:33" pos:end="205:37">param</name><index pos:start="205:38" pos:end="205:40">[<expr pos:start="205:39" pos:end="205:39"><literal type="number" pos:start="205:39" pos:end="205:39">0</literal></expr>]</index></name> <operator pos:start="205:42" pos:end="205:43">!=</operator> <name pos:start="205:45" pos:end="205:61">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="205:65" pos:end="205:72"> <expr pos:start="205:65" pos:end="205:72"><name pos:start="205:65" pos:end="205:72"><name pos:start="205:65" pos:end="205:69">param</name><index pos:start="205:70" pos:end="205:72">[<expr pos:start="205:71" pos:end="205:71"><literal type="number" pos:start="205:71" pos:end="205:71">0</literal></expr>]</index></name></expr> </then><else pos:start="205:74" pos:end="205:78">:   <expr pos:start="205:78" pos:end="205:78"><literal type="number" pos:start="205:78" pos:end="205:78">0</literal></expr></else></ternary><operator pos:start="205:79" pos:end="205:79">)</operator> <operator pos:start="205:81" pos:end="205:81">*</operator> <operator pos:start="205:83" pos:end="205:83">(</operator><literal type="number" pos:start="205:84" pos:end="205:84">1</literal><operator pos:start="205:85" pos:end="205:86">&lt;&lt;</operator><literal type="number" pos:start="205:87" pos:end="205:88">24</literal><operator pos:start="205:89" pos:end="205:89">)</operator></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="207:21" pos:end="207:90"><decl pos:start="207:21" pos:end="207:89"><type pos:start="207:21" pos:end="207:27"><name pos:start="207:21" pos:end="207:27">int64_t</name></type> <name pos:start="207:29" pos:end="207:29">C</name><init pos:start="207:30" pos:end="207:89">= <expr pos:start="207:32" pos:end="207:89"><operator pos:start="207:32" pos:end="207:32">(</operator><ternary pos:start="207:33" pos:end="207:78"><condition pos:start="207:33" pos:end="207:63"><expr pos:start="207:33" pos:end="207:61"><name pos:start="207:33" pos:end="207:40"><name pos:start="207:33" pos:end="207:37">param</name><index pos:start="207:38" pos:end="207:40">[<expr pos:start="207:39" pos:end="207:39"><literal type="number" pos:start="207:39" pos:end="207:39">1</literal></expr>]</index></name> <operator pos:start="207:42" pos:end="207:43">!=</operator> <name pos:start="207:45" pos:end="207:61">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="207:65" pos:end="207:72"> <expr pos:start="207:65" pos:end="207:72"><name pos:start="207:65" pos:end="207:72"><name pos:start="207:65" pos:end="207:69">param</name><index pos:start="207:70" pos:end="207:72">[<expr pos:start="207:71" pos:end="207:71"><literal type="number" pos:start="207:71" pos:end="207:71">1</literal></expr>]</index></name></expr> </then><else pos:start="207:74" pos:end="207:78">: <expr pos:start="207:76" pos:end="207:78"><literal type="number" pos:start="207:76" pos:end="207:78">0.6</literal></expr></else></ternary><operator pos:start="207:79" pos:end="207:79">)</operator> <operator pos:start="207:81" pos:end="207:81">*</operator> <operator pos:start="207:83" pos:end="207:83">(</operator><literal type="number" pos:start="207:84" pos:end="207:84">1</literal><operator pos:start="207:85" pos:end="207:86">&lt;&lt;</operator><literal type="number" pos:start="207:87" pos:end="207:88">24</literal><operator pos:start="207:89" pos:end="207:89">)</operator></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="211:21" pos:end="231:21"><if pos:start="211:21" pos:end="215:21">if <condition pos:start="211:24" pos:end="211:37">(<expr pos:start="211:25" pos:end="211:36"><name pos:start="211:25" pos:end="211:25">d</name> <operator pos:start="211:27" pos:end="211:28">&gt;=</operator> <literal type="number" pos:start="211:30" pos:end="211:32">1LL</literal><operator pos:start="211:33" pos:end="211:34">&lt;&lt;</operator><literal type="number" pos:start="211:35" pos:end="211:36">31</literal></expr>)</condition> <block pos:start="211:39" pos:end="215:21">{<block_content pos:start="213:25" pos:end="213:36">

                        <expr_stmt pos:start="213:25" pos:end="213:36"><expr pos:start="213:25" pos:end="213:35"><name pos:start="213:25" pos:end="213:29">coeff</name> <operator pos:start="213:31" pos:end="213:31">=</operator> <literal type="number" pos:start="213:33" pos:end="213:35">0.0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="215:23" pos:end="231:21">else <block pos:start="215:28" pos:end="231:21">{<block_content pos:start="217:25" pos:end="229:103">

                        <decl_stmt pos:start="217:25" pos:end="217:53"><decl pos:start="217:25" pos:end="217:52"><type pos:start="217:25" pos:end="217:31"><name pos:start="217:25" pos:end="217:31">int64_t</name></type> <name pos:start="217:33" pos:end="217:34">dd</name>  <init pos:start="217:37" pos:end="217:52">= <expr pos:start="217:39" pos:end="217:52"><operator pos:start="217:39" pos:end="217:39">(</operator><name pos:start="217:40" pos:end="217:40">d</name>  <operator pos:start="217:43" pos:end="217:43">*</operator> <name pos:start="217:45" pos:end="217:45">d</name><operator pos:start="217:46" pos:end="217:46">)</operator> <operator pos:start="217:48" pos:end="217:49">&gt;&gt;</operator> <literal type="number" pos:start="217:51" pos:end="217:52">30</literal></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="219:25" pos:end="219:53"><decl pos:start="219:25" pos:end="219:52"><type pos:start="219:25" pos:end="219:31"><name pos:start="219:25" pos:end="219:31">int64_t</name></type> <name pos:start="219:33" pos:end="219:35">ddd</name> <init pos:start="219:37" pos:end="219:52">= <expr pos:start="219:39" pos:end="219:52"><operator pos:start="219:39" pos:end="219:39">(</operator><name pos:start="219:40" pos:end="219:41">dd</name> <operator pos:start="219:43" pos:end="219:43">*</operator> <name pos:start="219:45" pos:end="219:45">d</name><operator pos:start="219:46" pos:end="219:46">)</operator> <operator pos:start="219:48" pos:end="219:49">&gt;&gt;</operator> <literal type="number" pos:start="219:51" pos:end="219:52">30</literal></expr></init></decl>;</decl_stmt>



                        <if_stmt pos:start="223:25" pos:end="229:103"><if pos:start="223:25" pos:end="225:115">if <condition pos:start="223:28" pos:end="223:40">(<expr pos:start="223:29" pos:end="223:39"><name pos:start="223:29" pos:end="223:29">d</name> <operator pos:start="223:31" pos:end="223:31">&lt;</operator> <literal type="number" pos:start="223:33" pos:end="223:35">1LL</literal><operator pos:start="223:36" pos:end="223:37">&lt;&lt;</operator><literal type="number" pos:start="223:38" pos:end="223:39">30</literal></expr>)</condition><block type="pseudo" pos:start="225:29" pos:end="225:115"><block_content pos:start="225:29" pos:end="225:115">

                            <expr_stmt pos:start="225:29" pos:end="225:115"><expr pos:start="225:29" pos:end="225:114"><name pos:start="225:29" pos:end="225:33">coeff</name> <operator pos:start="225:35" pos:end="225:35">=</operator> <operator pos:start="225:37" pos:end="225:37">(</operator><literal type="number" pos:start="225:38" pos:end="225:39">12</literal><operator pos:start="225:40" pos:end="225:40">*</operator><operator pos:start="225:41" pos:end="225:41">(</operator><literal type="number" pos:start="225:42" pos:end="225:42">1</literal><operator pos:start="225:43" pos:end="225:44">&lt;&lt;</operator><literal type="number" pos:start="225:45" pos:end="225:46">24</literal><operator pos:start="225:47" pos:end="225:47">)</operator><operator pos:start="225:48" pos:end="225:48">-</operator><literal type="number" pos:start="225:49" pos:end="225:49">9</literal><operator pos:start="225:50" pos:end="225:50">*</operator><name pos:start="225:51" pos:end="225:51">B</name><operator pos:start="225:52" pos:end="225:52">-</operator><literal type="number" pos:start="225:53" pos:end="225:53">6</literal><operator pos:start="225:54" pos:end="225:54">*</operator><name pos:start="225:55" pos:end="225:55">C</name><operator pos:start="225:56" pos:end="225:56">)</operator><operator pos:start="225:57" pos:end="225:57">*</operator><name pos:start="225:58" pos:end="225:60">ddd</name> <operator pos:start="225:62" pos:end="225:62">+</operator> <operator pos:start="225:64" pos:end="225:64">(</operator><operator pos:start="225:65" pos:end="225:65">-</operator><literal type="number" pos:start="225:66" pos:end="225:67">18</literal><operator pos:start="225:68" pos:end="225:68">*</operator><operator pos:start="225:69" pos:end="225:69">(</operator><literal type="number" pos:start="225:70" pos:end="225:70">1</literal><operator pos:start="225:71" pos:end="225:72">&lt;&lt;</operator><literal type="number" pos:start="225:73" pos:end="225:74">24</literal><operator pos:start="225:75" pos:end="225:75">)</operator><operator pos:start="225:76" pos:end="225:76">+</operator><literal type="number" pos:start="225:77" pos:end="225:78">12</literal><operator pos:start="225:79" pos:end="225:79">*</operator><name pos:start="225:80" pos:end="225:80">B</name><operator pos:start="225:81" pos:end="225:81">+</operator><literal type="number" pos:start="225:82" pos:end="225:82">6</literal><operator pos:start="225:83" pos:end="225:83">*</operator><name pos:start="225:84" pos:end="225:84">C</name><operator pos:start="225:85" pos:end="225:85">)</operator><operator pos:start="225:86" pos:end="225:86">*</operator><name pos:start="225:87" pos:end="225:88">dd</name> <operator pos:start="225:90" pos:end="225:90">+</operator> <operator pos:start="225:92" pos:end="225:92">(</operator><literal type="number" pos:start="225:93" pos:end="225:93">6</literal><operator pos:start="225:94" pos:end="225:94">*</operator><operator pos:start="225:95" pos:end="225:95">(</operator><literal type="number" pos:start="225:96" pos:end="225:96">1</literal><operator pos:start="225:97" pos:end="225:98">&lt;&lt;</operator><literal type="number" pos:start="225:99" pos:end="225:100">24</literal><operator pos:start="225:101" pos:end="225:101">)</operator><operator pos:start="225:102" pos:end="225:102">-</operator><literal type="number" pos:start="225:103" pos:end="225:103">2</literal><operator pos:start="225:104" pos:end="225:104">*</operator><name pos:start="225:105" pos:end="225:105">B</name><operator pos:start="225:106" pos:end="225:106">)</operator><operator pos:start="225:107" pos:end="225:107">*</operator><operator pos:start="225:108" pos:end="225:108">(</operator><literal type="number" pos:start="225:109" pos:end="225:109">1</literal><operator pos:start="225:110" pos:end="225:111">&lt;&lt;</operator><literal type="number" pos:start="225:112" pos:end="225:113">30</literal><operator pos:start="225:114" pos:end="225:114">)</operator></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="227:25" pos:end="229:103">else<block type="pseudo" pos:start="229:29" pos:end="229:103"><block_content pos:start="229:29" pos:end="229:103">

                            <expr_stmt pos:start="229:29" pos:end="229:103"><expr pos:start="229:29" pos:end="229:102"><name pos:start="229:29" pos:end="229:33">coeff</name> <operator pos:start="229:35" pos:end="229:35">=</operator> <operator pos:start="229:37" pos:end="229:37">(</operator><operator pos:start="229:38" pos:end="229:38">-</operator><name pos:start="229:39" pos:end="229:39">B</name><operator pos:start="229:40" pos:end="229:40">-</operator><literal type="number" pos:start="229:41" pos:end="229:41">6</literal><operator pos:start="229:42" pos:end="229:42">*</operator><name pos:start="229:43" pos:end="229:43">C</name><operator pos:start="229:44" pos:end="229:44">)</operator><operator pos:start="229:45" pos:end="229:45">*</operator><name pos:start="229:46" pos:end="229:48">ddd</name> <operator pos:start="229:50" pos:end="229:50">+</operator> <operator pos:start="229:52" pos:end="229:52">(</operator><literal type="number" pos:start="229:53" pos:end="229:53">6</literal><operator pos:start="229:54" pos:end="229:54">*</operator><name pos:start="229:55" pos:end="229:55">B</name><operator pos:start="229:56" pos:end="229:56">+</operator><literal type="number" pos:start="229:57" pos:end="229:58">30</literal><operator pos:start="229:59" pos:end="229:59">*</operator><name pos:start="229:60" pos:end="229:60">C</name><operator pos:start="229:61" pos:end="229:61">)</operator><operator pos:start="229:62" pos:end="229:62">*</operator><name pos:start="229:63" pos:end="229:64">dd</name> <operator pos:start="229:66" pos:end="229:66">+</operator> <operator pos:start="229:68" pos:end="229:68">(</operator><operator pos:start="229:69" pos:end="229:69">-</operator><literal type="number" pos:start="229:70" pos:end="229:71">12</literal><operator pos:start="229:72" pos:end="229:72">*</operator><name pos:start="229:73" pos:end="229:73">B</name><operator pos:start="229:74" pos:end="229:74">-</operator><literal type="number" pos:start="229:75" pos:end="229:76">48</literal><operator pos:start="229:77" pos:end="229:77">*</operator><name pos:start="229:78" pos:end="229:78">C</name><operator pos:start="229:79" pos:end="229:79">)</operator><operator pos:start="229:80" pos:end="229:80">*</operator><name pos:start="229:81" pos:end="229:81">d</name> <operator pos:start="229:83" pos:end="229:83">+</operator> <operator pos:start="229:85" pos:end="229:85">(</operator><literal type="number" pos:start="229:86" pos:end="229:86">8</literal><operator pos:start="229:87" pos:end="229:87">*</operator><name pos:start="229:88" pos:end="229:88">B</name><operator pos:start="229:89" pos:end="229:89">+</operator><literal type="number" pos:start="229:90" pos:end="229:91">24</literal><operator pos:start="229:92" pos:end="229:92">*</operator><name pos:start="229:93" pos:end="229:93">C</name><operator pos:start="229:94" pos:end="229:94">)</operator><operator pos:start="229:95" pos:end="229:95">*</operator><operator pos:start="229:96" pos:end="229:96">(</operator><literal type="number" pos:start="229:97" pos:end="229:97">1</literal><operator pos:start="229:98" pos:end="229:99">&lt;&lt;</operator><literal type="number" pos:start="229:100" pos:end="229:101">30</literal><operator pos:start="229:102" pos:end="229:102">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:43"><expr pos:start="233:21" pos:end="233:42"><name pos:start="233:21" pos:end="233:25">coeff</name> <operator pos:start="233:27" pos:end="233:28">*=</operator> <name pos:start="233:30" pos:end="233:33">fone</name><operator pos:start="233:34" pos:end="233:35">&gt;&gt;</operator><operator pos:start="233:36" pos:end="233:36">(</operator><literal type="number" pos:start="233:37" pos:end="233:39">30</literal><operator pos:start="233:39" pos:end="233:39">+</operator><literal type="number" pos:start="233:40" pos:end="233:41">24</literal><operator pos:start="233:42" pos:end="233:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if>

<comment type="block" pos:start="237:1" pos:end="245:19">/*                else if (flags &amp; SWS_X) {

                    double p= param ? param*0.01 : 0.3;

                    coeff = d ? sin(d*M_PI)/(d*M_PI) : 1.0;

                    coeff*= pow(2.0, - p*d*d);

                }*/</comment>

                <if type="elseif" pos:start="247:17" pos:end="269:17">else if <condition pos:start="247:25" pos:end="247:39">(<expr pos:start="247:26" pos:end="247:38"><name pos:start="247:26" pos:end="247:30">flags</name> <operator pos:start="247:32" pos:end="247:32">&amp;</operator> <name pos:start="247:34" pos:end="247:38">SWS_X</name></expr>)</condition> <block pos:start="247:41" pos:end="269:17">{<block_content pos:start="249:21" pos:end="267:46">

                    <decl_stmt pos:start="249:21" pos:end="249:77"><decl pos:start="249:21" pos:end="249:76"><type pos:start="249:21" pos:end="249:26"><name pos:start="249:21" pos:end="249:26">double</name></type> <name pos:start="249:28" pos:end="249:28">A</name><init pos:start="249:29" pos:end="249:76">= <expr pos:start="249:31" pos:end="249:76"><ternary pos:start="249:31" pos:end="249:76"><condition pos:start="249:31" pos:end="249:61"><expr pos:start="249:31" pos:end="249:59"><name pos:start="249:31" pos:end="249:38"><name pos:start="249:31" pos:end="249:35">param</name><index pos:start="249:36" pos:end="249:38">[<expr pos:start="249:37" pos:end="249:37"><literal type="number" pos:start="249:37" pos:end="249:37">0</literal></expr>]</index></name> <operator pos:start="249:40" pos:end="249:41">!=</operator> <name pos:start="249:43" pos:end="249:59">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="249:63" pos:end="249:70"> <expr pos:start="249:63" pos:end="249:70"><name pos:start="249:63" pos:end="249:70"><name pos:start="249:63" pos:end="249:67">param</name><index pos:start="249:68" pos:end="249:70">[<expr pos:start="249:69" pos:end="249:69"><literal type="number" pos:start="249:69" pos:end="249:69">0</literal></expr>]</index></name></expr> </then><else pos:start="249:72" pos:end="249:76">: <expr pos:start="249:74" pos:end="249:76"><literal type="number" pos:start="249:74" pos:end="249:76">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="251:21" pos:end="251:29"><decl pos:start="251:21" pos:end="251:28"><type pos:start="251:21" pos:end="251:26"><name pos:start="251:21" pos:end="251:26">double</name></type> <name pos:start="251:28" pos:end="251:28">c</name></decl>;</decl_stmt>



                    <if_stmt pos:start="255:21" pos:end="261:31"><if pos:start="255:21" pos:end="257:45">if <condition pos:start="255:24" pos:end="255:35">(<expr pos:start="255:25" pos:end="255:34"><name pos:start="255:25" pos:end="255:30">floatd</name><operator pos:start="255:31" pos:end="255:31">&lt;</operator><literal type="number" pos:start="255:32" pos:end="255:34">1.0</literal></expr>)</condition><block type="pseudo" pos:start="257:25" pos:end="257:45"><block_content pos:start="257:25" pos:end="257:45">

                        <expr_stmt pos:start="257:25" pos:end="257:45"><expr pos:start="257:25" pos:end="257:44"><name pos:start="257:25" pos:end="257:25">c</name> <operator pos:start="257:27" pos:end="257:27">=</operator> <call pos:start="257:29" pos:end="257:44"><name pos:start="257:29" pos:end="257:31">cos</name><argument_list pos:start="257:32" pos:end="257:44">(<argument pos:start="257:33" pos:end="257:43"><expr pos:start="257:33" pos:end="257:43"><name pos:start="257:33" pos:end="257:38">floatd</name><operator pos:start="257:39" pos:end="257:39">*</operator><name pos:start="257:40" pos:end="257:43">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="259:21" pos:end="261:31">else<block type="pseudo" pos:start="261:25" pos:end="261:31"><block_content pos:start="261:25" pos:end="261:31">

                        <expr_stmt pos:start="261:25" pos:end="261:31"><expr pos:start="261:25" pos:end="261:30"><name pos:start="261:25" pos:end="261:25">c</name><operator pos:start="261:26" pos:end="261:26">=</operator><operator pos:start="261:27" pos:end="261:27">-</operator><literal type="number" pos:start="261:28" pos:end="261:30">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt pos:start="263:21" pos:end="265:51"><if pos:start="263:21" pos:end="263:51">if <condition pos:start="263:24" pos:end="263:30">(<expr pos:start="263:25" pos:end="263:29"><name pos:start="263:25" pos:end="263:25">c</name><operator pos:start="263:26" pos:end="263:26">&lt;</operator><literal type="number" pos:start="263:27" pos:end="263:29">0.0</literal></expr>)</condition><block type="pseudo" pos:start="263:37" pos:end="263:51"><block_content pos:start="263:37" pos:end="263:51">      <expr_stmt pos:start="263:37" pos:end="263:51"><expr pos:start="263:37" pos:end="263:50"><name pos:start="263:37" pos:end="263:37">c</name><operator pos:start="263:38" pos:end="263:38">=</operator> <operator pos:start="263:40" pos:end="263:40">-</operator><call pos:start="263:41" pos:end="263:50"><name pos:start="263:41" pos:end="263:43">pow</name><argument_list pos:start="263:44" pos:end="263:50">(<argument pos:start="263:45" pos:end="263:46"><expr pos:start="263:45" pos:end="263:46"><operator pos:start="263:45" pos:end="263:45">-</operator><name pos:start="263:46" pos:end="263:46">c</name></expr></argument>, <argument pos:start="263:49" pos:end="263:49"><expr pos:start="263:49" pos:end="263:49"><name pos:start="263:49" pos:end="263:49">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="265:21" pos:end="265:51">else<block type="pseudo" pos:start="265:37" pos:end="265:51"><block_content pos:start="265:37" pos:end="265:51">            <expr_stmt pos:start="265:37" pos:end="265:51"><expr pos:start="265:37" pos:end="265:50"><name pos:start="265:37" pos:end="265:37">c</name><operator pos:start="265:38" pos:end="265:38">=</operator>  <call pos:start="265:41" pos:end="265:50"><name pos:start="265:41" pos:end="265:43">pow</name><argument_list pos:start="265:44" pos:end="265:50">( <argument pos:start="265:46" pos:end="265:46"><expr pos:start="265:46" pos:end="265:46"><name pos:start="265:46" pos:end="265:46">c</name></expr></argument>, <argument pos:start="265:49" pos:end="265:49"><expr pos:start="265:49" pos:end="265:49"><name pos:start="265:49" pos:end="265:49">A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="267:21" pos:end="267:46"><expr pos:start="267:21" pos:end="267:45"><name pos:start="267:21" pos:end="267:25">coeff</name><operator pos:start="267:26" pos:end="267:26">=</operator> <operator pos:start="267:28" pos:end="267:28">(</operator><name pos:start="267:29" pos:end="267:29">c</name><operator pos:start="267:30" pos:end="267:30">*</operator><literal type="number" pos:start="267:31" pos:end="267:35">0.5</literal> <operator pos:start="267:35" pos:end="267:35">+</operator> <literal type="number" pos:start="267:37" pos:end="267:39">0.5</literal><operator pos:start="267:40" pos:end="267:40">)</operator><operator pos:start="267:41" pos:end="267:41">*</operator><name pos:start="267:42" pos:end="267:45">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="269:19" pos:end="281:17">else if <condition pos:start="269:27" pos:end="269:44">(<expr pos:start="269:28" pos:end="269:43"><name pos:start="269:28" pos:end="269:32">flags</name> <operator pos:start="269:34" pos:end="269:34">&amp;</operator> <name pos:start="269:36" pos:end="269:43">SWS_AREA</name></expr>)</condition> <block pos:start="269:46" pos:end="281:17">{<block_content pos:start="271:21" pos:end="279:43">

                    <decl_stmt pos:start="271:21" pos:end="271:44"><decl pos:start="271:21" pos:end="271:43"><type pos:start="271:21" pos:end="271:27"><name pos:start="271:21" pos:end="271:27">int64_t</name></type> <name pos:start="271:29" pos:end="271:30">d2</name><init pos:start="271:31" pos:end="271:43">= <expr pos:start="271:33" pos:end="271:43"><name pos:start="271:33" pos:end="271:33">d</name> <operator pos:start="271:35" pos:end="271:35">-</operator> <operator pos:start="271:37" pos:end="271:37">(</operator><literal type="number" pos:start="271:38" pos:end="271:38">1</literal><operator pos:start="271:39" pos:end="271:40">&lt;&lt;</operator><literal type="number" pos:start="271:41" pos:end="271:42">29</literal><operator pos:start="271:43" pos:end="271:43">)</operator></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="273:21" pos:end="277:35"><if pos:start="273:21" pos:end="273:84">if      <condition pos:start="273:29" pos:end="273:55">(<expr pos:start="273:30" pos:end="273:54"><name pos:start="273:30" pos:end="273:31">d2</name><operator pos:start="273:32" pos:end="273:32">*</operator><name pos:start="273:33" pos:end="273:36">xInc</name> <operator pos:start="273:38" pos:end="273:38">&lt;</operator> <operator pos:start="273:40" pos:end="273:40">-</operator><operator pos:start="273:41" pos:end="273:41">(</operator><literal type="number" pos:start="273:42" pos:end="273:44">1LL</literal><operator pos:start="273:45" pos:end="273:46">&lt;&lt;</operator><operator pos:start="273:47" pos:end="273:47">(</operator><literal type="number" pos:start="273:48" pos:end="273:50">29</literal><operator pos:start="273:50" pos:end="273:50">+</operator><literal type="number" pos:start="273:51" pos:end="273:52">16</literal><operator pos:start="273:53" pos:end="273:53">)</operator><operator pos:start="273:54" pos:end="273:54">)</operator></expr>)</condition><block type="pseudo" pos:start="273:57" pos:end="273:84"><block_content pos:start="273:57" pos:end="273:84"> <expr_stmt pos:start="273:57" pos:end="273:84"><expr pos:start="273:57" pos:end="273:83"><name pos:start="273:57" pos:end="273:61">coeff</name><operator pos:start="273:62" pos:end="273:62">=</operator> <literal type="number" pos:start="273:64" pos:end="273:66">1.0</literal> <operator pos:start="273:68" pos:end="273:68">*</operator> <operator pos:start="273:70" pos:end="273:70">(</operator><literal type="number" pos:start="273:71" pos:end="273:73">1LL</literal><operator pos:start="273:74" pos:end="273:75">&lt;&lt;</operator><operator pos:start="273:76" pos:end="273:76">(</operator><literal type="number" pos:start="273:77" pos:end="273:79">30</literal><operator pos:start="273:79" pos:end="273:79">+</operator><literal type="number" pos:start="273:80" pos:end="273:81">16</literal><operator pos:start="273:82" pos:end="273:82">)</operator><operator pos:start="273:83" pos:end="273:83">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <if type="elseif" pos:start="275:21" pos:end="275:89">else if <condition pos:start="275:29" pos:end="275:55">(<expr pos:start="275:30" pos:end="275:54"><name pos:start="275:30" pos:end="275:31">d2</name><operator pos:start="275:32" pos:end="275:32">*</operator><name pos:start="275:33" pos:end="275:36">xInc</name> <operator pos:start="275:38" pos:end="275:38">&lt;</operator>  <operator pos:start="275:41" pos:end="275:41">(</operator><literal type="number" pos:start="275:42" pos:end="275:44">1LL</literal><operator pos:start="275:45" pos:end="275:46">&lt;&lt;</operator><operator pos:start="275:47" pos:end="275:47">(</operator><literal type="number" pos:start="275:48" pos:end="275:50">29</literal><operator pos:start="275:50" pos:end="275:50">+</operator><literal type="number" pos:start="275:51" pos:end="275:52">16</literal><operator pos:start="275:53" pos:end="275:53">)</operator><operator pos:start="275:54" pos:end="275:54">)</operator></expr>)</condition><block type="pseudo" pos:start="275:57" pos:end="275:89"><block_content pos:start="275:57" pos:end="275:89"> <expr_stmt pos:start="275:57" pos:end="275:89"><expr pos:start="275:57" pos:end="275:88"><name pos:start="275:57" pos:end="275:61">coeff</name><operator pos:start="275:62" pos:end="275:62">=</operator> <operator pos:start="275:64" pos:end="275:64">-</operator><name pos:start="275:65" pos:end="275:66">d2</name><operator pos:start="275:67" pos:end="275:67">*</operator><name pos:start="275:68" pos:end="275:71">xInc</name> <operator pos:start="275:73" pos:end="275:73">+</operator> <operator pos:start="275:75" pos:end="275:75">(</operator><literal type="number" pos:start="275:76" pos:end="275:78">1LL</literal><operator pos:start="275:79" pos:end="275:80">&lt;&lt;</operator><operator pos:start="275:81" pos:end="275:81">(</operator><literal type="number" pos:start="275:82" pos:end="275:84">29</literal><operator pos:start="275:84" pos:end="275:84">+</operator><literal type="number" pos:start="275:85" pos:end="275:86">16</literal><operator pos:start="275:87" pos:end="275:87">)</operator><operator pos:start="275:88" pos:end="275:88">)</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="277:21" pos:end="277:35">else<block type="pseudo" pos:start="277:26" pos:end="277:35"><block_content pos:start="277:26" pos:end="277:35"> <expr_stmt pos:start="277:26" pos:end="277:35"><expr pos:start="277:26" pos:end="277:34"><name pos:start="277:26" pos:end="277:30">coeff</name><operator pos:start="277:31" pos:end="277:31">=</operator><literal type="number" pos:start="277:32" pos:end="277:34">0.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="279:21" pos:end="279:43"><expr pos:start="279:21" pos:end="279:42"><name pos:start="279:21" pos:end="279:25">coeff</name> <operator pos:start="279:27" pos:end="279:28">*=</operator> <name pos:start="279:30" pos:end="279:33">fone</name><operator pos:start="279:34" pos:end="279:35">&gt;&gt;</operator><operator pos:start="279:36" pos:end="279:36">(</operator><literal type="number" pos:start="279:37" pos:end="279:39">30</literal><operator pos:start="279:39" pos:end="279:39">+</operator><literal type="number" pos:start="279:40" pos:end="279:41">16</literal><operator pos:start="279:42" pos:end="279:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="281:19" pos:end="287:17">else if <condition pos:start="281:27" pos:end="281:45">(<expr pos:start="281:28" pos:end="281:44"><name pos:start="281:28" pos:end="281:32">flags</name> <operator pos:start="281:34" pos:end="281:34">&amp;</operator> <name pos:start="281:36" pos:end="281:44">SWS_GAUSS</name></expr>)</condition> <block pos:start="281:47" pos:end="287:17">{<block_content pos:start="283:21" pos:end="285:63">

                    <decl_stmt pos:start="283:21" pos:end="283:77"><decl pos:start="283:21" pos:end="283:76"><type pos:start="283:21" pos:end="283:26"><name pos:start="283:21" pos:end="283:26">double</name></type> <name pos:start="283:28" pos:end="283:28">p</name><init pos:start="283:29" pos:end="283:76">= <expr pos:start="283:31" pos:end="283:76"><ternary pos:start="283:31" pos:end="283:76"><condition pos:start="283:31" pos:end="283:61"><expr pos:start="283:31" pos:end="283:59"><name pos:start="283:31" pos:end="283:38"><name pos:start="283:31" pos:end="283:35">param</name><index pos:start="283:36" pos:end="283:38">[<expr pos:start="283:37" pos:end="283:37"><literal type="number" pos:start="283:37" pos:end="283:37">0</literal></expr>]</index></name> <operator pos:start="283:40" pos:end="283:41">!=</operator> <name pos:start="283:43" pos:end="283:59">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="283:63" pos:end="283:70"> <expr pos:start="283:63" pos:end="283:70"><name pos:start="283:63" pos:end="283:70"><name pos:start="283:63" pos:end="283:67">param</name><index pos:start="283:68" pos:end="283:70">[<expr pos:start="283:69" pos:end="283:69"><literal type="number" pos:start="283:69" pos:end="283:69">0</literal></expr>]</index></name></expr> </then><else pos:start="283:72" pos:end="283:76">: <expr pos:start="283:74" pos:end="283:76"><literal type="number" pos:start="283:74" pos:end="283:76">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="285:21" pos:end="285:63"><expr pos:start="285:21" pos:end="285:62"><name pos:start="285:21" pos:end="285:25">coeff</name> <operator pos:start="285:27" pos:end="285:27">=</operator> <operator pos:start="285:29" pos:end="285:29">(</operator><call pos:start="285:30" pos:end="285:56"><name pos:start="285:30" pos:end="285:32">pow</name><argument_list pos:start="285:33" pos:end="285:56">(<argument pos:start="285:34" pos:end="285:36"><expr pos:start="285:34" pos:end="285:36"><literal type="number" pos:start="285:34" pos:end="285:36">2.0</literal></expr></argument>, <argument pos:start="285:39" pos:end="285:55"><expr pos:start="285:39" pos:end="285:55"><operator pos:start="285:39" pos:end="285:39">-</operator> <name pos:start="285:41" pos:end="285:41">p</name><operator pos:start="285:42" pos:end="285:42">*</operator><name pos:start="285:43" pos:end="285:48">floatd</name><operator pos:start="285:49" pos:end="285:49">*</operator><name pos:start="285:50" pos:end="285:55">floatd</name></expr></argument>)</argument_list></call><operator pos:start="285:57" pos:end="285:57">)</operator><operator pos:start="285:58" pos:end="285:58">*</operator><name pos:start="285:59" pos:end="285:62">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="287:19" pos:end="291:17">else if <condition pos:start="287:27" pos:end="287:44">(<expr pos:start="287:28" pos:end="287:43"><name pos:start="287:28" pos:end="287:32">flags</name> <operator pos:start="287:34" pos:end="287:34">&amp;</operator> <name pos:start="287:36" pos:end="287:43">SWS_SINC</name></expr>)</condition> <block pos:start="287:46" pos:end="291:17">{<block_content pos:start="289:21" pos:end="289:76">

                    <expr_stmt pos:start="289:21" pos:end="289:76"><expr pos:start="289:21" pos:end="289:75"><name pos:start="289:21" pos:end="289:25">coeff</name> <operator pos:start="289:27" pos:end="289:27">=</operator> <operator pos:start="289:29" pos:end="289:29">(</operator><ternary pos:start="289:30" pos:end="289:69"><condition pos:start="289:30" pos:end="289:32"><expr pos:start="289:30" pos:end="289:30"><name pos:start="289:30" pos:end="289:30">d</name></expr> ?</condition><then pos:start="289:34" pos:end="289:63"> <expr pos:start="289:34" pos:end="289:63"><call pos:start="289:34" pos:end="289:49"><name pos:start="289:34" pos:end="289:36">sin</name><argument_list pos:start="289:37" pos:end="289:49">(<argument pos:start="289:38" pos:end="289:48"><expr pos:start="289:38" pos:end="289:48"><name pos:start="289:38" pos:end="289:43">floatd</name><operator pos:start="289:44" pos:end="289:44">*</operator><name pos:start="289:45" pos:end="289:48">M_PI</name></expr></argument>)</argument_list></call><operator pos:start="289:50" pos:end="289:50">/</operator><operator pos:start="289:51" pos:end="289:51">(</operator><name pos:start="289:52" pos:end="289:57">floatd</name><operator pos:start="289:58" pos:end="289:58">*</operator><name pos:start="289:59" pos:end="289:62">M_PI</name><operator pos:start="289:63" pos:end="289:63">)</operator></expr> </then><else pos:start="289:65" pos:end="289:69">: <expr pos:start="289:67" pos:end="289:69"><literal type="number" pos:start="289:67" pos:end="289:69">1.0</literal></expr></else></ternary><operator pos:start="289:70" pos:end="289:70">)</operator><operator pos:start="289:71" pos:end="289:71">*</operator><name pos:start="289:72" pos:end="289:75">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="291:19" pos:end="299:17">else if <condition pos:start="291:27" pos:end="291:47">(<expr pos:start="291:28" pos:end="291:46"><name pos:start="291:28" pos:end="291:32">flags</name> <operator pos:start="291:34" pos:end="291:34">&amp;</operator> <name pos:start="291:36" pos:end="291:46">SWS_LANCZOS</name></expr>)</condition> <block pos:start="291:49" pos:end="299:17">{<block_content pos:start="293:21" pos:end="297:42">

                    <decl_stmt pos:start="293:21" pos:end="293:77"><decl pos:start="293:21" pos:end="293:76"><type pos:start="293:21" pos:end="293:26"><name pos:start="293:21" pos:end="293:26">double</name></type> <name pos:start="293:28" pos:end="293:28">p</name><init pos:start="293:29" pos:end="293:76">= <expr pos:start="293:31" pos:end="293:76"><ternary pos:start="293:31" pos:end="293:76"><condition pos:start="293:31" pos:end="293:61"><expr pos:start="293:31" pos:end="293:59"><name pos:start="293:31" pos:end="293:38"><name pos:start="293:31" pos:end="293:35">param</name><index pos:start="293:36" pos:end="293:38">[<expr pos:start="293:37" pos:end="293:37"><literal type="number" pos:start="293:37" pos:end="293:37">0</literal></expr>]</index></name> <operator pos:start="293:40" pos:end="293:41">!=</operator> <name pos:start="293:43" pos:end="293:59">SWS_PARAM_DEFAULT</name></expr> ?</condition><then pos:start="293:63" pos:end="293:70"> <expr pos:start="293:63" pos:end="293:70"><name pos:start="293:63" pos:end="293:70"><name pos:start="293:63" pos:end="293:67">param</name><index pos:start="293:68" pos:end="293:70">[<expr pos:start="293:69" pos:end="293:69"><literal type="number" pos:start="293:69" pos:end="293:69">0</literal></expr>]</index></name></expr> </then><else pos:start="293:72" pos:end="293:76">: <expr pos:start="293:74" pos:end="293:76"><literal type="number" pos:start="293:74" pos:end="293:76">3.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="295:21" pos:end="295:109"><expr pos:start="295:21" pos:end="295:108"><name pos:start="295:21" pos:end="295:25">coeff</name> <operator pos:start="295:27" pos:end="295:27">=</operator> <operator pos:start="295:29" pos:end="295:29">(</operator><ternary pos:start="295:30" pos:end="295:102"><condition pos:start="295:30" pos:end="295:32"><expr pos:start="295:30" pos:end="295:30"><name pos:start="295:30" pos:end="295:30">d</name></expr> ?</condition><then pos:start="295:34" pos:end="295:96"> <expr pos:start="295:34" pos:end="295:96"><call pos:start="295:34" pos:end="295:49"><name pos:start="295:34" pos:end="295:36">sin</name><argument_list pos:start="295:37" pos:end="295:49">(<argument pos:start="295:38" pos:end="295:48"><expr pos:start="295:38" pos:end="295:48"><name pos:start="295:38" pos:end="295:43">floatd</name><operator pos:start="295:44" pos:end="295:44">*</operator><name pos:start="295:45" pos:end="295:48">M_PI</name></expr></argument>)</argument_list></call><operator pos:start="295:50" pos:end="295:50">*</operator><call pos:start="295:51" pos:end="295:68"><name pos:start="295:51" pos:end="295:53">sin</name><argument_list pos:start="295:54" pos:end="295:68">(<argument pos:start="295:55" pos:end="295:67"><expr pos:start="295:55" pos:end="295:67"><name pos:start="295:55" pos:end="295:60">floatd</name><operator pos:start="295:61" pos:end="295:61">*</operator><name pos:start="295:62" pos:end="295:65">M_PI</name><operator pos:start="295:66" pos:end="295:66">/</operator><name pos:start="295:67" pos:end="295:67">p</name></expr></argument>)</argument_list></call><operator pos:start="295:69" pos:end="295:69">/</operator><operator pos:start="295:70" pos:end="295:70">(</operator><name pos:start="295:71" pos:end="295:76">floatd</name><operator pos:start="295:77" pos:end="295:77">*</operator><name pos:start="295:78" pos:end="295:83">floatd</name><operator pos:start="295:84" pos:end="295:84">*</operator><name pos:start="295:85" pos:end="295:88">M_PI</name><operator pos:start="295:89" pos:end="295:89">*</operator><name pos:start="295:90" pos:end="295:93">M_PI</name><operator pos:start="295:94" pos:end="295:94">/</operator><name pos:start="295:95" pos:end="295:95">p</name><operator pos:start="295:96" pos:end="295:96">)</operator></expr> </then><else pos:start="295:98" pos:end="295:102">: <expr pos:start="295:100" pos:end="295:102"><literal type="number" pos:start="295:100" pos:end="295:102">1.0</literal></expr></else></ternary><operator pos:start="295:103" pos:end="295:103">)</operator><operator pos:start="295:104" pos:end="295:104">*</operator><name pos:start="295:105" pos:end="295:108">fone</name></expr>;</expr_stmt>

                    <if_stmt pos:start="297:21" pos:end="297:42"><if pos:start="297:21" pos:end="297:42">if <condition pos:start="297:24" pos:end="297:33">(<expr pos:start="297:25" pos:end="297:32"><name pos:start="297:25" pos:end="297:30">floatd</name><operator pos:start="297:31" pos:end="297:31">&gt;</operator><name pos:start="297:32" pos:end="297:32">p</name></expr>)</condition><block type="pseudo" pos:start="297:35" pos:end="297:42"><block_content pos:start="297:35" pos:end="297:42"> <expr_stmt pos:start="297:35" pos:end="297:42"><expr pos:start="297:35" pos:end="297:41"><name pos:start="297:35" pos:end="297:39">coeff</name><operator pos:start="297:40" pos:end="297:40">=</operator><literal type="number" pos:start="297:41" pos:end="297:41">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="299:19" pos:end="307:17">else if <condition pos:start="299:27" pos:end="299:48">(<expr pos:start="299:28" pos:end="299:47"><name pos:start="299:28" pos:end="299:32">flags</name> <operator pos:start="299:34" pos:end="299:34">&amp;</operator> <name pos:start="299:36" pos:end="299:47">SWS_BILINEAR</name></expr>)</condition> <block pos:start="299:50" pos:end="307:17">{<block_content pos:start="301:21" pos:end="305:40">

                    <expr_stmt pos:start="301:21" pos:end="301:39"><expr pos:start="301:21" pos:end="301:38"><name pos:start="301:21" pos:end="301:25">coeff</name><operator pos:start="301:26" pos:end="301:26">=</operator> <operator pos:start="301:28" pos:end="301:28">(</operator><literal type="number" pos:start="301:29" pos:end="301:29">1</literal><operator pos:start="301:30" pos:end="301:31">&lt;&lt;</operator><literal type="number" pos:start="301:32" pos:end="301:33">30</literal><operator pos:start="301:34" pos:end="301:34">)</operator> <operator pos:start="301:36" pos:end="301:36">-</operator> <name pos:start="301:38" pos:end="301:38">d</name></expr>;</expr_stmt>

                    <if_stmt pos:start="303:21" pos:end="303:41"><if pos:start="303:21" pos:end="303:41">if <condition pos:start="303:24" pos:end="303:32">(<expr pos:start="303:25" pos:end="303:31"><name pos:start="303:25" pos:end="303:29">coeff</name><operator pos:start="303:30" pos:end="303:30">&lt;</operator><literal type="number" pos:start="303:31" pos:end="303:31">0</literal></expr>)</condition><block type="pseudo" pos:start="303:34" pos:end="303:41"><block_content pos:start="303:34" pos:end="303:41"> <expr_stmt pos:start="303:34" pos:end="303:41"><expr pos:start="303:34" pos:end="303:40"><name pos:start="303:34" pos:end="303:38">coeff</name><operator pos:start="303:39" pos:end="303:39">=</operator><literal type="number" pos:start="303:40" pos:end="303:40">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="305:21" pos:end="305:40"><expr pos:start="305:21" pos:end="305:39"><name pos:start="305:21" pos:end="305:25">coeff</name> <operator pos:start="305:27" pos:end="305:28">*=</operator> <name pos:start="305:30" pos:end="305:33">fone</name> <operator pos:start="305:35" pos:end="305:36">&gt;&gt;</operator> <literal type="number" pos:start="305:38" pos:end="305:39">30</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="307:19" pos:end="313:17">else if <condition pos:start="307:27" pos:end="307:46">(<expr pos:start="307:28" pos:end="307:45"><name pos:start="307:28" pos:end="307:32">flags</name> <operator pos:start="307:34" pos:end="307:34">&amp;</operator> <name pos:start="307:36" pos:end="307:45">SWS_SPLINE</name></expr>)</condition> <block pos:start="307:48" pos:end="313:17">{<block_content pos:start="309:21" pos:end="311:79">

                    <decl_stmt pos:start="309:21" pos:end="309:48"><decl pos:start="309:21" pos:end="309:47"><type pos:start="309:21" pos:end="309:26"><name pos:start="309:21" pos:end="309:26">double</name></type> <name pos:start="309:28" pos:end="309:28">p</name><init pos:start="309:29" pos:end="309:47">=<expr pos:start="309:30" pos:end="309:47"><operator pos:start="309:30" pos:end="309:30">-</operator><literal type="number" pos:start="309:31" pos:end="309:47">2.196152422706632</literal></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="311:21" pos:end="311:79"><expr pos:start="311:21" pos:end="311:78"><name pos:start="311:21" pos:end="311:25">coeff</name> <operator pos:start="311:27" pos:end="311:27">=</operator> <call pos:start="311:29" pos:end="311:71"><name pos:start="311:29" pos:end="311:42">getSplineCoeff</name><argument_list pos:start="311:43" pos:end="311:71">(<argument pos:start="311:44" pos:end="311:46"><expr pos:start="311:44" pos:end="311:46"><literal type="number" pos:start="311:44" pos:end="311:46">1.0</literal></expr></argument>, <argument pos:start="311:49" pos:end="311:51"><expr pos:start="311:49" pos:end="311:51"><literal type="number" pos:start="311:49" pos:end="311:51">0.0</literal></expr></argument>, <argument pos:start="311:54" pos:end="311:54"><expr pos:start="311:54" pos:end="311:54"><name pos:start="311:54" pos:end="311:54">p</name></expr></argument>, <argument pos:start="311:57" pos:end="311:62"><expr pos:start="311:57" pos:end="311:62"><operator pos:start="311:57" pos:end="311:57">-</operator><name pos:start="311:58" pos:end="311:58">p</name><operator pos:start="311:59" pos:end="311:59">-</operator><literal type="number" pos:start="311:60" pos:end="311:62">1.0</literal></expr></argument>, <argument pos:start="311:65" pos:end="311:70"><expr pos:start="311:65" pos:end="311:70"><name pos:start="311:65" pos:end="311:70">floatd</name></expr></argument>)</argument_list></call> <operator pos:start="311:73" pos:end="311:73">*</operator> <name pos:start="311:75" pos:end="311:78">fone</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="313:19" pos:end="319:17">else <block pos:start="313:24" pos:end="319:17">{<block_content pos:start="315:21" pos:end="317:30">

                    <expr_stmt pos:start="315:21" pos:end="315:31"><expr pos:start="315:21" pos:end="315:30"><name pos:start="315:21" pos:end="315:25">coeff</name><operator pos:start="315:26" pos:end="315:26">=</operator> <literal type="number" pos:start="315:28" pos:end="315:30">0.0</literal></expr>;</expr_stmt> <comment type="line" pos:start="315:33" pos:end="315:52">//GCC warning killer</comment>

                    <expr_stmt pos:start="317:21" pos:end="317:30"><expr pos:start="317:21" pos:end="317:29"><call pos:start="317:21" pos:end="317:29"><name pos:start="317:21" pos:end="317:26">assert</name><argument_list pos:start="317:27" pos:end="317:29">(<argument pos:start="317:28" pos:end="317:28"><expr pos:start="317:28" pos:end="317:28"><literal type="number" pos:start="317:28" pos:end="317:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="323:17" pos:end="323:48"><expr pos:start="323:17" pos:end="323:47"><name pos:start="323:17" pos:end="323:40"><name pos:start="323:17" pos:end="323:22">filter</name><index pos:start="323:23" pos:end="323:40">[<expr pos:start="323:24" pos:end="323:39"><name pos:start="323:24" pos:end="323:24">i</name><operator pos:start="323:25" pos:end="323:25">*</operator><name pos:start="323:26" pos:end="323:35">filterSize</name> <operator pos:start="323:37" pos:end="323:37">+</operator> <name pos:start="323:39" pos:end="323:39">j</name></expr>]</index></name><operator pos:start="323:41" pos:end="323:41">=</operator> <name pos:start="323:43" pos:end="323:47">coeff</name></expr>;</expr_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:21"><expr pos:start="325:17" pos:end="325:20"><name pos:start="325:17" pos:end="325:18">xx</name><operator pos:start="325:19" pos:end="325:20">++</operator></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="329:13" pos:end="329:31"><expr pos:start="329:13" pos:end="329:30"><name pos:start="329:13" pos:end="329:21">xDstInSrc</name><operator pos:start="329:22" pos:end="329:23">+=</operator> <literal type="number" pos:start="329:25" pos:end="329:25">2</literal><operator pos:start="329:26" pos:end="329:26">*</operator><name pos:start="329:27" pos:end="329:30">xInc</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="337:5" pos:end="341:6">/* apply src &amp; dst Filter to filter -&gt; filter2

       av_free(filter);

    */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:25"><expr pos:start="343:5" pos:end="343:24"><call pos:start="343:5" pos:end="343:24"><name pos:start="343:5" pos:end="343:10">assert</name><argument_list pos:start="343:11" pos:end="343:24">(<argument pos:start="343:12" pos:end="343:23"><expr pos:start="343:12" pos:end="343:23"><name pos:start="343:12" pos:end="343:21">filterSize</name><operator pos:start="343:22" pos:end="343:22">&gt;</operator><literal type="number" pos:start="343:23" pos:end="343:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:28"><expr pos:start="345:5" pos:end="345:27"><name pos:start="345:5" pos:end="345:15">filter2Size</name><operator pos:start="345:16" pos:end="345:16">=</operator> <name pos:start="345:18" pos:end="345:27">filterSize</name></expr>;</expr_stmt>

    <if_stmt pos:start="347:5" pos:end="347:55"><if pos:start="347:5" pos:end="347:55">if <condition pos:start="347:8" pos:end="347:18">(<expr pos:start="347:9" pos:end="347:17"><name pos:start="347:9" pos:end="347:17">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="347:20" pos:end="347:55"><block_content pos:start="347:20" pos:end="347:55"> <expr_stmt pos:start="347:20" pos:end="347:55"><expr pos:start="347:20" pos:end="347:54"><name pos:start="347:20" pos:end="347:30">filter2Size</name><operator pos:start="347:31" pos:end="347:32">+=</operator> <name pos:start="347:34" pos:end="347:50"><name pos:start="347:34" pos:end="347:42">srcFilter</name><operator pos:start="347:43" pos:end="347:44">-&gt;</operator><name pos:start="347:45" pos:end="347:50">length</name></name> <operator pos:start="347:52" pos:end="347:52">-</operator> <literal type="number" pos:start="347:54" pos:end="347:54">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="349:5" pos:end="349:55"><if pos:start="349:5" pos:end="349:55">if <condition pos:start="349:8" pos:end="349:18">(<expr pos:start="349:9" pos:end="349:17"><name pos:start="349:9" pos:end="349:17">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="349:20" pos:end="349:55"><block_content pos:start="349:20" pos:end="349:55"> <expr_stmt pos:start="349:20" pos:end="349:55"><expr pos:start="349:20" pos:end="349:54"><name pos:start="349:20" pos:end="349:30">filter2Size</name><operator pos:start="349:31" pos:end="349:32">+=</operator> <name pos:start="349:34" pos:end="349:50"><name pos:start="349:34" pos:end="349:42">dstFilter</name><operator pos:start="349:43" pos:end="349:44">-&gt;</operator><name pos:start="349:45" pos:end="349:50">length</name></name> <operator pos:start="349:52" pos:end="349:52">-</operator> <literal type="number" pos:start="349:54" pos:end="349:54">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:26"><expr pos:start="351:5" pos:end="351:25"><call pos:start="351:5" pos:end="351:25"><name pos:start="351:5" pos:end="351:10">assert</name><argument_list pos:start="351:11" pos:end="351:25">(<argument pos:start="351:12" pos:end="351:24"><expr pos:start="351:12" pos:end="351:24"><name pos:start="351:12" pos:end="351:22">filter2Size</name><operator pos:start="351:23" pos:end="351:23">&gt;</operator><literal type="number" pos:start="351:24" pos:end="351:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:78"><expr pos:start="353:5" pos:end="353:77"><call pos:start="353:5" pos:end="353:77"><name pos:start="353:5" pos:end="353:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="353:22" pos:end="353:77">(<argument pos:start="353:23" pos:end="353:26"><expr pos:start="353:23" pos:end="353:26"><name pos:start="353:23" pos:end="353:26">NULL</name></expr></argument>, <argument pos:start="353:29" pos:end="353:35"><expr pos:start="353:29" pos:end="353:35"><name pos:start="353:29" pos:end="353:35">filter2</name></expr></argument>, <argument pos:start="353:38" pos:end="353:70"><expr pos:start="353:38" pos:end="353:70"><name pos:start="353:38" pos:end="353:48">filter2Size</name><operator pos:start="353:49" pos:end="353:49">*</operator><name pos:start="353:50" pos:end="353:53">dstW</name><operator pos:start="353:54" pos:end="353:54">*</operator><sizeof pos:start="353:55" pos:end="353:70">sizeof<argument_list pos:start="353:61" pos:end="353:70">(<argument pos:start="353:62" pos:end="353:69"><expr pos:start="353:62" pos:end="353:69"><operator pos:start="353:62" pos:end="353:62">*</operator><name pos:start="353:63" pos:end="353:69">filter2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="353:73" pos:end="353:76"><expr pos:start="353:73" pos:end="353:76"><name pos:start="353:73" pos:end="353:76">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="357:5" pos:end="387:5">for <control pos:start="357:9" pos:end="357:26">(<init pos:start="357:10" pos:end="357:13"><expr pos:start="357:10" pos:end="357:12"><name pos:start="357:10" pos:end="357:10">i</name><operator pos:start="357:11" pos:end="357:11">=</operator><literal type="number" pos:start="357:12" pos:end="357:12">0</literal></expr>;</init> <condition pos:start="357:15" pos:end="357:21"><expr pos:start="357:15" pos:end="357:20"><name pos:start="357:15" pos:end="357:15">i</name><operator pos:start="357:16" pos:end="357:16">&lt;</operator><name pos:start="357:17" pos:end="357:20">dstW</name></expr>;</condition> <incr pos:start="357:23" pos:end="357:25"><expr pos:start="357:23" pos:end="357:25"><name pos:start="357:23" pos:end="357:23">i</name><operator pos:start="357:24" pos:end="357:25">++</operator></expr></incr>)</control> <block pos:start="357:28" pos:end="387:5">{<block_content pos:start="359:9" pos:end="385:63">

        <decl_stmt pos:start="359:9" pos:end="359:17"><decl pos:start="359:9" pos:end="359:13"><type pos:start="359:9" pos:end="359:11"><name pos:start="359:9" pos:end="359:11">int</name></type> <name pos:start="359:13" pos:end="359:13">j</name></decl>, <decl pos:start="359:16" pos:end="359:16"><type ref="prev" pos:start="359:9" pos:end="359:11"/><name pos:start="359:16" pos:end="359:16">k</name></decl>;</decl_stmt>



        <if_stmt pos:start="363:9" pos:end="379:9"><if pos:start="363:9" pos:end="373:9">if<condition pos:start="363:11" pos:end="363:21">(<expr pos:start="363:12" pos:end="363:20"><name pos:start="363:12" pos:end="363:20">srcFilter</name></expr>)</condition> <block pos:start="363:23" pos:end="373:9">{<block_content pos:start="365:13" pos:end="371:13">

            <for pos:start="365:13" pos:end="371:13">for <control pos:start="365:17" pos:end="365:47">(<init pos:start="365:18" pos:end="365:21"><expr pos:start="365:18" pos:end="365:20"><name pos:start="365:18" pos:end="365:18">k</name><operator pos:start="365:19" pos:end="365:19">=</operator><literal type="number" pos:start="365:20" pos:end="365:20">0</literal></expr>;</init> <condition pos:start="365:23" pos:end="365:42"><expr pos:start="365:23" pos:end="365:41"><name pos:start="365:23" pos:end="365:23">k</name><operator pos:start="365:24" pos:end="365:24">&lt;</operator><name pos:start="365:25" pos:end="365:41"><name pos:start="365:25" pos:end="365:33">srcFilter</name><operator pos:start="365:34" pos:end="365:35">-&gt;</operator><name pos:start="365:36" pos:end="365:41">length</name></name></expr>;</condition> <incr pos:start="365:44" pos:end="365:46"><expr pos:start="365:44" pos:end="365:46"><name pos:start="365:44" pos:end="365:44">k</name><operator pos:start="365:45" pos:end="365:46">++</operator></expr></incr>)</control> <block pos:start="365:49" pos:end="371:13">{<block_content pos:start="367:17" pos:end="369:99">

                <for pos:start="367:17" pos:end="369:99">for <control pos:start="367:21" pos:end="367:44">(<init pos:start="367:22" pos:end="367:25"><expr pos:start="367:22" pos:end="367:24"><name pos:start="367:22" pos:end="367:22">j</name><operator pos:start="367:23" pos:end="367:23">=</operator><literal type="number" pos:start="367:24" pos:end="367:24">0</literal></expr>;</init> <condition pos:start="367:27" pos:end="367:39"><expr pos:start="367:27" pos:end="367:38"><name pos:start="367:27" pos:end="367:27">j</name><operator pos:start="367:28" pos:end="367:28">&lt;</operator><name pos:start="367:29" pos:end="367:38">filterSize</name></expr>;</condition> <incr pos:start="367:41" pos:end="367:43"><expr pos:start="367:41" pos:end="367:43"><name pos:start="367:41" pos:end="367:41">j</name><operator pos:start="367:42" pos:end="367:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="369:21" pos:end="369:99"><block_content pos:start="369:21" pos:end="369:99">

                    <expr_stmt pos:start="369:21" pos:end="369:99"><expr pos:start="369:21" pos:end="369:98"><name pos:start="369:21" pos:end="369:50"><name pos:start="369:21" pos:end="369:27">filter2</name><index pos:start="369:28" pos:end="369:50">[<expr pos:start="369:29" pos:end="369:49"><name pos:start="369:29" pos:end="369:29">i</name><operator pos:start="369:30" pos:end="369:30">*</operator><name pos:start="369:31" pos:end="369:41">filter2Size</name> <operator pos:start="369:43" pos:end="369:43">+</operator> <name pos:start="369:45" pos:end="369:45">k</name> <operator pos:start="369:47" pos:end="369:47">+</operator> <name pos:start="369:49" pos:end="369:49">j</name></expr>]</index></name> <operator pos:start="369:52" pos:end="369:53">+=</operator> <name pos:start="369:55" pos:end="369:73"><name pos:start="369:55" pos:end="369:63">srcFilter</name><operator pos:start="369:64" pos:end="369:65">-&gt;</operator><name pos:start="369:66" pos:end="369:70">coeff</name><index pos:start="369:71" pos:end="369:73">[<expr pos:start="369:72" pos:end="369:72"><name pos:start="369:72" pos:end="369:72">k</name></expr>]</index></name><operator pos:start="369:74" pos:end="369:74">*</operator><name pos:start="369:75" pos:end="369:98"><name pos:start="369:75" pos:end="369:80">filter</name><index pos:start="369:81" pos:end="369:98">[<expr pos:start="369:82" pos:end="369:97"><name pos:start="369:82" pos:end="369:82">i</name><operator pos:start="369:83" pos:end="369:83">*</operator><name pos:start="369:84" pos:end="369:93">filterSize</name> <operator pos:start="369:95" pos:end="369:95">+</operator> <name pos:start="369:97" pos:end="369:97">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="373:11" pos:end="379:9">else <block pos:start="373:16" pos:end="379:9">{<block_content pos:start="375:13" pos:end="377:69">

            <for pos:start="375:13" pos:end="377:69">for <control pos:start="375:17" pos:end="375:40">(<init pos:start="375:18" pos:end="375:21"><expr pos:start="375:18" pos:end="375:20"><name pos:start="375:18" pos:end="375:18">j</name><operator pos:start="375:19" pos:end="375:19">=</operator><literal type="number" pos:start="375:20" pos:end="375:20">0</literal></expr>;</init> <condition pos:start="375:23" pos:end="375:35"><expr pos:start="375:23" pos:end="375:34"><name pos:start="375:23" pos:end="375:23">j</name><operator pos:start="375:24" pos:end="375:24">&lt;</operator><name pos:start="375:25" pos:end="375:34">filterSize</name></expr>;</condition> <incr pos:start="375:37" pos:end="375:39"><expr pos:start="375:37" pos:end="375:39"><name pos:start="375:37" pos:end="375:37">j</name><operator pos:start="375:38" pos:end="375:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="377:17" pos:end="377:69"><block_content pos:start="377:17" pos:end="377:69">

                <expr_stmt pos:start="377:17" pos:end="377:69"><expr pos:start="377:17" pos:end="377:68"><name pos:start="377:17" pos:end="377:42"><name pos:start="377:17" pos:end="377:23">filter2</name><index pos:start="377:24" pos:end="377:42">[<expr pos:start="377:25" pos:end="377:41"><name pos:start="377:25" pos:end="377:25">i</name><operator pos:start="377:26" pos:end="377:26">*</operator><name pos:start="377:27" pos:end="377:37">filter2Size</name> <operator pos:start="377:39" pos:end="377:39">+</operator> <name pos:start="377:41" pos:end="377:41">j</name></expr>]</index></name><operator pos:start="377:43" pos:end="377:43">=</operator> <name pos:start="377:45" pos:end="377:68"><name pos:start="377:45" pos:end="377:50">filter</name><index pos:start="377:51" pos:end="377:68">[<expr pos:start="377:52" pos:end="377:67"><name pos:start="377:52" pos:end="377:52">i</name><operator pos:start="377:53" pos:end="377:53">*</operator><name pos:start="377:54" pos:end="377:63">filterSize</name> <operator pos:start="377:65" pos:end="377:65">+</operator> <name pos:start="377:67" pos:end="377:67">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <comment type="line" pos:start="381:9" pos:end="381:25">//FIXME dstFilter</comment>



        <expr_stmt pos:start="385:9" pos:end="385:63"><expr pos:start="385:9" pos:end="385:62"><operator pos:start="385:9" pos:end="385:9">(</operator><operator pos:start="385:10" pos:end="385:10">*</operator><name pos:start="385:11" pos:end="385:19">filterPos</name><operator pos:start="385:20" pos:end="385:20">)</operator><index pos:start="385:21" pos:end="385:23">[<expr pos:start="385:22" pos:end="385:22"><name pos:start="385:22" pos:end="385:22">i</name></expr>]</index><operator pos:start="385:24" pos:end="385:25">+=</operator> <operator pos:start="385:27" pos:end="385:27">(</operator><name pos:start="385:28" pos:end="385:37">filterSize</name><operator pos:start="385:38" pos:end="385:38">-</operator><literal type="number" pos:start="385:39" pos:end="385:39">1</literal><operator pos:start="385:40" pos:end="385:40">)</operator><operator pos:start="385:41" pos:end="385:41">/</operator><literal type="number" pos:start="385:42" pos:end="385:44">2</literal> <operator pos:start="385:44" pos:end="385:44">-</operator> <operator pos:start="385:46" pos:end="385:46">(</operator><name pos:start="385:47" pos:end="385:57">filter2Size</name><operator pos:start="385:58" pos:end="385:58">-</operator><literal type="number" pos:start="385:59" pos:end="385:59">1</literal><operator pos:start="385:60" pos:end="385:60">)</operator><operator pos:start="385:61" pos:end="385:61">/</operator><literal type="number" pos:start="385:62" pos:end="385:62">2</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="389:5" pos:end="389:22"><expr pos:start="389:5" pos:end="389:21"><call pos:start="389:5" pos:end="389:21"><name pos:start="389:5" pos:end="389:12">av_freep</name><argument_list pos:start="389:13" pos:end="389:21">(<argument pos:start="389:14" pos:end="389:20"><expr pos:start="389:14" pos:end="389:20"><operator pos:start="389:14" pos:end="389:14">&amp;</operator><name pos:start="389:15" pos:end="389:20">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="393:5" pos:end="393:72">/* try to reduce the filter-size (step1 find size and shift left) */</comment>

    <comment type="line" pos:start="395:5" pos:end="395:76">// Assume it is near normalized (*0.5 or *2.0 is OK but * 0.001 is not).</comment>

    <expr_stmt pos:start="397:5" pos:end="397:21"><expr pos:start="397:5" pos:end="397:20"><name pos:start="397:5" pos:end="397:17">minFilterSize</name><operator pos:start="397:18" pos:end="397:18">=</operator> <literal type="number" pos:start="397:20" pos:end="397:20">0</literal></expr>;</expr_stmt>

    <for pos:start="399:5" pos:end="463:5">for <control pos:start="399:9" pos:end="399:29">(<init pos:start="399:10" pos:end="399:18"><expr pos:start="399:10" pos:end="399:17"><name pos:start="399:10" pos:end="399:10">i</name><operator pos:start="399:11" pos:end="399:11">=</operator><name pos:start="399:12" pos:end="399:15">dstW</name><operator pos:start="399:16" pos:end="399:16">-</operator><literal type="number" pos:start="399:17" pos:end="399:17">1</literal></expr>;</init> <condition pos:start="399:20" pos:end="399:24"><expr pos:start="399:20" pos:end="399:23"><name pos:start="399:20" pos:end="399:20">i</name><operator pos:start="399:21" pos:end="399:22">&gt;=</operator><literal type="number" pos:start="399:23" pos:end="399:23">0</literal></expr>;</condition> <incr pos:start="399:26" pos:end="399:28"><expr pos:start="399:26" pos:end="399:28"><name pos:start="399:26" pos:end="399:26">i</name><operator pos:start="399:27" pos:end="399:28">--</operator></expr></incr>)</control> <block pos:start="399:31" pos:end="463:5">{<block_content pos:start="401:9" pos:end="461:50">

        <decl_stmt pos:start="401:9" pos:end="401:29"><decl pos:start="401:9" pos:end="401:28"><type pos:start="401:9" pos:end="401:11"><name pos:start="401:9" pos:end="401:11">int</name></type> <name pos:start="401:13" pos:end="401:15">min</name><init pos:start="401:16" pos:end="401:28">= <expr pos:start="401:18" pos:end="401:28"><name pos:start="401:18" pos:end="401:28">filter2Size</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="403:9" pos:end="403:14"><decl pos:start="403:9" pos:end="403:13"><type pos:start="403:9" pos:end="403:11"><name pos:start="403:9" pos:end="403:11">int</name></type> <name pos:start="403:13" pos:end="403:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="405:9" pos:end="405:27"><decl pos:start="405:9" pos:end="405:26"><type pos:start="405:9" pos:end="405:15"><name pos:start="405:9" pos:end="405:15">int64_t</name></type> <name pos:start="405:17" pos:end="405:22">cutOff</name><init pos:start="405:23" pos:end="405:26">=<expr pos:start="405:24" pos:end="405:26"><literal type="number" pos:start="405:24" pos:end="405:26">0.0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="409:9" pos:end="409:72">/* get rid of near zero elements on the left by shifting left */</comment>

        <for pos:start="411:9" pos:end="439:9">for <control pos:start="411:13" pos:end="411:37">(<init pos:start="411:14" pos:end="411:17"><expr pos:start="411:14" pos:end="411:16"><name pos:start="411:14" pos:end="411:14">j</name><operator pos:start="411:15" pos:end="411:15">=</operator><literal type="number" pos:start="411:16" pos:end="411:16">0</literal></expr>;</init> <condition pos:start="411:19" pos:end="411:32"><expr pos:start="411:19" pos:end="411:31"><name pos:start="411:19" pos:end="411:19">j</name><operator pos:start="411:20" pos:end="411:20">&lt;</operator><name pos:start="411:21" pos:end="411:31">filter2Size</name></expr>;</condition> <incr pos:start="411:34" pos:end="411:36"><expr pos:start="411:34" pos:end="411:36"><name pos:start="411:34" pos:end="411:34">j</name><operator pos:start="411:35" pos:end="411:36">++</operator></expr></incr>)</control> <block pos:start="411:39" pos:end="439:9">{<block_content pos:start="413:13" pos:end="437:30">

            <decl_stmt pos:start="413:13" pos:end="413:18"><decl pos:start="413:13" pos:end="413:17"><type pos:start="413:13" pos:end="413:15"><name pos:start="413:13" pos:end="413:15">int</name></type> <name pos:start="413:17" pos:end="413:17">k</name></decl>;</decl_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:52"><expr pos:start="415:13" pos:end="415:51"><name pos:start="415:13" pos:end="415:18">cutOff</name> <operator pos:start="415:20" pos:end="415:21">+=</operator> <call pos:start="415:23" pos:end="415:51"><name pos:start="415:23" pos:end="415:27">FFABS</name><argument_list pos:start="415:28" pos:end="415:51">(<argument pos:start="415:29" pos:end="415:50"><expr pos:start="415:29" pos:end="415:50"><name pos:start="415:29" pos:end="415:50"><name pos:start="415:29" pos:end="415:35">filter2</name><index pos:start="415:36" pos:end="415:50">[<expr pos:start="415:37" pos:end="415:49"><name pos:start="415:37" pos:end="415:37">i</name><operator pos:start="415:38" pos:end="415:38">*</operator><name pos:start="415:39" pos:end="415:49">filter2Size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="419:13" pos:end="419:59"><if pos:start="419:13" pos:end="419:59">if <condition pos:start="419:16" pos:end="419:52">(<expr pos:start="419:17" pos:end="419:51"><name pos:start="419:17" pos:end="419:22">cutOff</name> <operator pos:start="419:24" pos:end="419:24">&gt;</operator> <name pos:start="419:26" pos:end="419:46">SWS_MAX_REDUCE_CUTOFF</name><operator pos:start="419:47" pos:end="419:47">*</operator><name pos:start="419:48" pos:end="419:51">fone</name></expr>)</condition><block type="pseudo" pos:start="419:54" pos:end="419:59"><block_content pos:start="419:54" pos:end="419:59"> <break pos:start="419:54" pos:end="419:59">break;</break></block_content></block></if></if_stmt>



            <comment type="block" pos:start="423:13" pos:end="423:90">/* preserve monotonicity because the core can't handle the filter otherwise */</comment>

            <if_stmt pos:start="425:13" pos:end="425:72"><if pos:start="425:13" pos:end="425:72">if <condition pos:start="425:16" pos:end="425:65">(<expr pos:start="425:17" pos:end="425:64"><name pos:start="425:17" pos:end="425:17">i</name><operator pos:start="425:18" pos:end="425:18">&lt;</operator><name pos:start="425:19" pos:end="425:22">dstW</name><operator pos:start="425:23" pos:end="425:23">-</operator><literal type="number" pos:start="425:24" pos:end="425:24">1</literal> <operator pos:start="425:26" pos:end="425:27">&amp;&amp;</operator> <operator pos:start="425:29" pos:end="425:29">(</operator><operator pos:start="425:30" pos:end="425:30">*</operator><name pos:start="425:31" pos:end="425:39">filterPos</name><operator pos:start="425:40" pos:end="425:40">)</operator><index pos:start="425:41" pos:end="425:43">[<expr pos:start="425:42" pos:end="425:42"><name pos:start="425:42" pos:end="425:42">i</name></expr>]</index> <operator pos:start="425:45" pos:end="425:46">&gt;=</operator> <operator pos:start="425:48" pos:end="425:48">(</operator><operator pos:start="425:49" pos:end="425:49">*</operator><name pos:start="425:50" pos:end="425:58">filterPos</name><operator pos:start="425:59" pos:end="425:59">)</operator><index pos:start="425:60" pos:end="425:64">[<expr pos:start="425:61" pos:end="425:63"><name pos:start="425:61" pos:end="425:61">i</name><operator pos:start="425:62" pos:end="425:62">+</operator><literal type="number" pos:start="425:63" pos:end="425:63">1</literal></expr>]</index></expr>)</condition><block type="pseudo" pos:start="425:67" pos:end="425:72"><block_content pos:start="425:67" pos:end="425:72"> <break pos:start="425:67" pos:end="425:72">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="429:13" pos:end="429:44">// move filter coefficients left</comment>

            <for pos:start="431:13" pos:end="433:75">for <control pos:start="431:17" pos:end="431:41">(<init pos:start="431:18" pos:end="431:21"><expr pos:start="431:18" pos:end="431:20"><name pos:start="431:18" pos:end="431:18">k</name><operator pos:start="431:19" pos:end="431:19">=</operator><literal type="number" pos:start="431:20" pos:end="431:20">1</literal></expr>;</init> <condition pos:start="431:23" pos:end="431:36"><expr pos:start="431:23" pos:end="431:35"><name pos:start="431:23" pos:end="431:23">k</name><operator pos:start="431:24" pos:end="431:24">&lt;</operator><name pos:start="431:25" pos:end="431:35">filter2Size</name></expr>;</condition> <incr pos:start="431:38" pos:end="431:40"><expr pos:start="431:38" pos:end="431:40"><name pos:start="431:38" pos:end="431:38">k</name><operator pos:start="431:39" pos:end="431:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="433:17" pos:end="433:75"><block_content pos:start="433:17" pos:end="433:75">

                <expr_stmt pos:start="433:17" pos:end="433:75"><expr pos:start="433:17" pos:end="433:74"><name pos:start="433:17" pos:end="433:46"><name pos:start="433:17" pos:end="433:23">filter2</name><index pos:start="433:24" pos:end="433:46">[<expr pos:start="433:25" pos:end="433:45"><name pos:start="433:25" pos:end="433:25">i</name><operator pos:start="433:26" pos:end="433:26">*</operator><name pos:start="433:27" pos:end="433:37">filter2Size</name> <operator pos:start="433:39" pos:end="433:39">+</operator> <name pos:start="433:41" pos:end="433:41">k</name> <operator pos:start="433:43" pos:end="433:43">-</operator> <literal type="number" pos:start="433:45" pos:end="433:45">1</literal></expr>]</index></name><operator pos:start="433:47" pos:end="433:47">=</operator> <name pos:start="433:49" pos:end="433:74"><name pos:start="433:49" pos:end="433:55">filter2</name><index pos:start="433:56" pos:end="433:74">[<expr pos:start="433:57" pos:end="433:73"><name pos:start="433:57" pos:end="433:57">i</name><operator pos:start="433:58" pos:end="433:58">*</operator><name pos:start="433:59" pos:end="433:69">filter2Size</name> <operator pos:start="433:71" pos:end="433:71">+</operator> <name pos:start="433:73" pos:end="433:73">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="435:13" pos:end="435:46"><expr pos:start="435:13" pos:end="435:45"><name pos:start="435:13" pos:end="435:42"><name pos:start="435:13" pos:end="435:19">filter2</name><index pos:start="435:20" pos:end="435:42">[<expr pos:start="435:21" pos:end="435:41"><name pos:start="435:21" pos:end="435:21">i</name><operator pos:start="435:22" pos:end="435:22">*</operator><name pos:start="435:23" pos:end="435:33">filter2Size</name> <operator pos:start="435:35" pos:end="435:35">+</operator> <name pos:start="435:37" pos:end="435:37">k</name> <operator pos:start="435:39" pos:end="435:39">-</operator> <literal type="number" pos:start="435:41" pos:end="435:41">1</literal></expr>]</index></name><operator pos:start="435:43" pos:end="435:43">=</operator> <literal type="number" pos:start="435:45" pos:end="435:45">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:30"><expr pos:start="437:13" pos:end="437:29"><operator pos:start="437:13" pos:end="437:13">(</operator><operator pos:start="437:14" pos:end="437:14">*</operator><name pos:start="437:15" pos:end="437:23">filterPos</name><operator pos:start="437:24" pos:end="437:24">)</operator><index pos:start="437:25" pos:end="437:27">[<expr pos:start="437:26" pos:end="437:26"><name pos:start="437:26" pos:end="437:26">i</name></expr>]</index><operator pos:start="437:28" pos:end="437:29">++</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="443:9" pos:end="443:17"><expr pos:start="443:9" pos:end="443:16"><name pos:start="443:9" pos:end="443:14">cutOff</name><operator pos:start="443:15" pos:end="443:15">=</operator><literal type="number" pos:start="443:16" pos:end="443:16">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="445:9" pos:end="445:43">/* count near zeros on the right */</comment>

        <for pos:start="447:9" pos:end="457:9">for <control pos:start="447:13" pos:end="447:39">(<init pos:start="447:14" pos:end="447:29"><expr pos:start="447:14" pos:end="447:28"><name pos:start="447:14" pos:end="447:14">j</name><operator pos:start="447:15" pos:end="447:15">=</operator><name pos:start="447:16" pos:end="447:26">filter2Size</name><operator pos:start="447:27" pos:end="447:27">-</operator><literal type="number" pos:start="447:28" pos:end="447:28">1</literal></expr>;</init> <condition pos:start="447:31" pos:end="447:34"><expr pos:start="447:31" pos:end="447:33"><name pos:start="447:31" pos:end="447:31">j</name><operator pos:start="447:32" pos:end="447:32">&gt;</operator><literal type="number" pos:start="447:33" pos:end="447:33">0</literal></expr>;</condition> <incr pos:start="447:36" pos:end="447:38"><expr pos:start="447:36" pos:end="447:38"><name pos:start="447:36" pos:end="447:36">j</name><operator pos:start="447:37" pos:end="447:38">--</operator></expr></incr>)</control> <block pos:start="447:41" pos:end="457:9">{<block_content pos:start="449:13" pos:end="455:18">

            <expr_stmt pos:start="449:13" pos:end="449:56"><expr pos:start="449:13" pos:end="449:55"><name pos:start="449:13" pos:end="449:18">cutOff</name> <operator pos:start="449:20" pos:end="449:21">+=</operator> <call pos:start="449:23" pos:end="449:55"><name pos:start="449:23" pos:end="449:27">FFABS</name><argument_list pos:start="449:28" pos:end="449:55">(<argument pos:start="449:29" pos:end="449:54"><expr pos:start="449:29" pos:end="449:54"><name pos:start="449:29" pos:end="449:54"><name pos:start="449:29" pos:end="449:35">filter2</name><index pos:start="449:36" pos:end="449:54">[<expr pos:start="449:37" pos:end="449:53"><name pos:start="449:37" pos:end="449:37">i</name><operator pos:start="449:38" pos:end="449:38">*</operator><name pos:start="449:39" pos:end="449:49">filter2Size</name> <operator pos:start="449:51" pos:end="449:51">+</operator> <name pos:start="449:53" pos:end="449:53">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="453:13" pos:end="453:59"><if pos:start="453:13" pos:end="453:59">if <condition pos:start="453:16" pos:end="453:52">(<expr pos:start="453:17" pos:end="453:51"><name pos:start="453:17" pos:end="453:22">cutOff</name> <operator pos:start="453:24" pos:end="453:24">&gt;</operator> <name pos:start="453:26" pos:end="453:46">SWS_MAX_REDUCE_CUTOFF</name><operator pos:start="453:47" pos:end="453:47">*</operator><name pos:start="453:48" pos:end="453:51">fone</name></expr>)</condition><block type="pseudo" pos:start="453:54" pos:end="453:59"><block_content pos:start="453:54" pos:end="453:59"> <break pos:start="453:54" pos:end="453:59">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="455:13" pos:end="455:18"><expr pos:start="455:13" pos:end="455:17"><name pos:start="455:13" pos:end="455:15">min</name><operator pos:start="455:16" pos:end="455:17">--</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="461:9" pos:end="461:50"><if pos:start="461:9" pos:end="461:50">if <condition pos:start="461:12" pos:end="461:30">(<expr pos:start="461:13" pos:end="461:29"><name pos:start="461:13" pos:end="461:15">min</name><operator pos:start="461:16" pos:end="461:16">&gt;</operator><name pos:start="461:17" pos:end="461:29">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="461:32" pos:end="461:50"><block_content pos:start="461:32" pos:end="461:50"> <expr_stmt pos:start="461:32" pos:end="461:50"><expr pos:start="461:32" pos:end="461:49"><name pos:start="461:32" pos:end="461:44">minFilterSize</name><operator pos:start="461:45" pos:end="461:45">=</operator> <name pos:start="461:47" pos:end="461:49">min</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="467:5" pos:end="493:5"><if pos:start="467:5" pos:end="493:5">if <condition pos:start="467:8" pos:end="467:56">(<expr pos:start="467:9" pos:end="467:55"><name pos:start="467:9" pos:end="467:20">HAVE_ALTIVEC</name> <operator pos:start="467:22" pos:end="467:23">&amp;&amp;</operator> <name pos:start="467:25" pos:end="467:33">cpu_flags</name> <operator pos:start="467:35" pos:end="467:35">&amp;</operator> <name pos:start="467:37" pos:end="467:55">AV_CPU_FLAG_ALTIVEC</name></expr>)</condition> <block pos:start="467:58" pos:end="493:5">{<block_content pos:start="473:9" pos:end="491:28">

        <comment type="line" pos:start="469:9" pos:end="469:44">// we can handle the special case 4,</comment>

        <comment type="line" pos:start="471:9" pos:end="471:47">// so we don't want to go to the full 8</comment>

        <if_stmt pos:start="473:9" pos:end="475:28"><if pos:start="473:9" pos:end="475:28">if <condition pos:start="473:12" pos:end="473:30">(<expr pos:start="473:13" pos:end="473:29"><name pos:start="473:13" pos:end="473:25">minFilterSize</name> <operator pos:start="473:27" pos:end="473:27">&lt;</operator> <literal type="number" pos:start="473:29" pos:end="473:29">5</literal></expr>)</condition><block type="pseudo" pos:start="475:13" pos:end="475:28"><block_content pos:start="475:13" pos:end="475:28">

            <expr_stmt pos:start="475:13" pos:end="475:28"><expr pos:start="475:13" pos:end="475:27"><name pos:start="475:13" pos:end="475:23">filterAlign</name> <operator pos:start="475:25" pos:end="475:25">=</operator> <literal type="number" pos:start="475:27" pos:end="475:27">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="line" pos:start="479:9" pos:end="479:49">// We really don't want to waste our time</comment>

        <comment type="line" pos:start="481:9" pos:end="481:53">// doing useless computation, so fall back on</comment>

        <comment type="line" pos:start="483:9" pos:end="483:52">// the scalar C code for very small filters.</comment>

        <comment type="line" pos:start="485:9" pos:end="485:53">// Vectorizing is worth it only if you have a</comment>

        <comment type="line" pos:start="487:9" pos:end="487:31">// decent-sized vector.</comment>

        <if_stmt pos:start="489:9" pos:end="491:28"><if pos:start="489:9" pos:end="491:28">if <condition pos:start="489:12" pos:end="489:30">(<expr pos:start="489:13" pos:end="489:29"><name pos:start="489:13" pos:end="489:25">minFilterSize</name> <operator pos:start="489:27" pos:end="489:27">&lt;</operator> <literal type="number" pos:start="489:29" pos:end="489:29">3</literal></expr>)</condition><block type="pseudo" pos:start="491:13" pos:end="491:28"><block_content pos:start="491:13" pos:end="491:28">

            <expr_stmt pos:start="491:13" pos:end="491:28"><expr pos:start="491:13" pos:end="491:27"><name pos:start="491:13" pos:end="491:23">filterAlign</name> <operator pos:start="491:25" pos:end="491:25">=</operator> <literal type="number" pos:start="491:27" pos:end="491:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="497:5" pos:end="505:5"><if pos:start="497:5" pos:end="505:5">if <condition pos:start="497:8" pos:end="497:48">(<expr pos:start="497:9" pos:end="497:47"><name pos:start="497:9" pos:end="497:16">HAVE_MMX</name> <operator pos:start="497:18" pos:end="497:19">&amp;&amp;</operator> <name pos:start="497:21" pos:end="497:29">cpu_flags</name> <operator pos:start="497:31" pos:end="497:31">&amp;</operator> <name pos:start="497:33" pos:end="497:47">AV_CPU_FLAG_MMX</name></expr>)</condition> <block pos:start="497:50" pos:end="505:5">{<block_content pos:start="501:9" pos:end="503:27">

        <comment type="line" pos:start="499:9" pos:end="499:55">// special case for unscaled vertical filtering</comment>

        <if_stmt pos:start="501:9" pos:end="503:27"><if pos:start="501:9" pos:end="503:27">if <condition pos:start="501:12" pos:end="501:51">(<expr pos:start="501:13" pos:end="501:50"><name pos:start="501:13" pos:end="501:25">minFilterSize</name> <operator pos:start="501:27" pos:end="501:28">==</operator> <literal type="number" pos:start="501:30" pos:end="501:30">1</literal> <operator pos:start="501:32" pos:end="501:33">&amp;&amp;</operator> <name pos:start="501:35" pos:end="501:45">filterAlign</name> <operator pos:start="501:47" pos:end="501:48">==</operator> <literal type="number" pos:start="501:50" pos:end="501:50">2</literal></expr>)</condition><block type="pseudo" pos:start="503:13" pos:end="503:27"><block_content pos:start="503:13" pos:end="503:27">

            <expr_stmt pos:start="503:13" pos:end="503:27"><expr pos:start="503:13" pos:end="503:26"><name pos:start="503:13" pos:end="503:23">filterAlign</name><operator pos:start="503:24" pos:end="503:24">=</operator> <literal type="number" pos:start="503:26" pos:end="503:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="509:5" pos:end="509:30"><expr pos:start="509:5" pos:end="509:29"><call pos:start="509:5" pos:end="509:29"><name pos:start="509:5" pos:end="509:10">assert</name><argument_list pos:start="509:11" pos:end="509:29">(<argument pos:start="509:12" pos:end="509:28"><expr pos:start="509:12" pos:end="509:28"><name pos:start="509:12" pos:end="509:24">minFilterSize</name> <operator pos:start="509:26" pos:end="509:26">&gt;</operator> <literal type="number" pos:start="509:28" pos:end="509:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:70"><expr pos:start="511:5" pos:end="511:69"><name pos:start="511:5" pos:end="511:14">filterSize</name><operator pos:start="511:15" pos:end="511:15">=</operator> <operator pos:start="511:17" pos:end="511:17">(</operator><name pos:start="511:18" pos:end="511:30">minFilterSize</name> <operator pos:start="511:32" pos:end="511:32">+</operator><operator pos:start="511:33" pos:end="511:33">(</operator><name pos:start="511:34" pos:end="511:44">filterAlign</name><operator pos:start="511:45" pos:end="511:45">-</operator><literal type="number" pos:start="511:46" pos:end="511:46">1</literal><operator pos:start="511:47" pos:end="511:47">)</operator><operator pos:start="511:48" pos:end="511:48">)</operator> <operator pos:start="511:50" pos:end="511:50">&amp;</operator> <operator pos:start="511:52" pos:end="511:52">(</operator><operator pos:start="511:53" pos:end="511:53">~</operator><operator pos:start="511:54" pos:end="511:54">(</operator><name pos:start="511:55" pos:end="511:65">filterAlign</name><operator pos:start="511:66" pos:end="511:66">-</operator><literal type="number" pos:start="511:67" pos:end="511:67">1</literal><operator pos:start="511:68" pos:end="511:68">)</operator><operator pos:start="511:69" pos:end="511:69">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:27"><expr pos:start="513:5" pos:end="513:26"><call pos:start="513:5" pos:end="513:26"><name pos:start="513:5" pos:end="513:10">assert</name><argument_list pos:start="513:11" pos:end="513:26">(<argument pos:start="513:12" pos:end="513:25"><expr pos:start="513:12" pos:end="513:25"><name pos:start="513:12" pos:end="513:21">filterSize</name> <operator pos:start="513:23" pos:end="513:23">&gt;</operator> <literal type="number" pos:start="513:25" pos:end="513:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:55"><expr pos:start="515:5" pos:end="515:54"><name pos:start="515:5" pos:end="515:10">filter</name><operator pos:start="515:11" pos:end="515:11">=</operator> <call pos:start="515:13" pos:end="515:54"><name pos:start="515:13" pos:end="515:21">av_malloc</name><argument_list pos:start="515:22" pos:end="515:54">(<argument pos:start="515:23" pos:end="515:53"><expr pos:start="515:23" pos:end="515:53"><name pos:start="515:23" pos:end="515:32">filterSize</name><operator pos:start="515:33" pos:end="515:33">*</operator><name pos:start="515:34" pos:end="515:37">dstW</name><operator pos:start="515:38" pos:end="515:38">*</operator><sizeof pos:start="515:39" pos:end="515:53">sizeof<argument_list pos:start="515:45" pos:end="515:53">(<argument pos:start="515:46" pos:end="515:52"><expr pos:start="515:46" pos:end="515:52"><operator pos:start="515:46" pos:end="515:46">*</operator><name pos:start="515:47" pos:end="515:52">filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="517:5" pos:end="519:18"><if pos:start="517:5" pos:end="519:18">if <condition pos:start="517:8" pos:end="517:96">(<expr pos:start="517:9" pos:end="517:95"><name pos:start="517:9" pos:end="517:18">filterSize</name> <operator pos:start="517:20" pos:end="517:21">&gt;=</operator> <name pos:start="517:23" pos:end="517:37">MAX_FILTER_SIZE</name><operator pos:start="517:38" pos:end="517:38">*</operator><literal type="number" pos:start="517:39" pos:end="517:40">16</literal><operator pos:start="517:41" pos:end="517:41">/</operator><operator pos:start="517:42" pos:end="517:42">(</operator><ternary pos:start="517:43" pos:end="517:83"><condition pos:start="517:43" pos:end="517:68"><expr pos:start="517:43" pos:end="517:66"><operator pos:start="517:43" pos:end="517:43">(</operator><name pos:start="517:44" pos:end="517:48">flags</name><operator pos:start="517:49" pos:end="517:49">&amp;</operator><name pos:start="517:50" pos:end="517:65">SWS_ACCURATE_RND</name><operator pos:start="517:66" pos:end="517:66">)</operator></expr> ?</condition><then pos:start="517:70" pos:end="517:78"> <expr pos:start="517:70" pos:end="517:78"><name pos:start="517:70" pos:end="517:78">APCK_SIZE</name></expr> </then><else pos:start="517:80" pos:end="517:83">: <expr pos:start="517:82" pos:end="517:83"><literal type="number" pos:start="517:82" pos:end="517:83">16</literal></expr></else></ternary><operator pos:start="517:84" pos:end="517:84">)</operator> <operator pos:start="517:86" pos:end="517:87">||</operator> <operator pos:start="517:89" pos:end="517:89">!</operator><name pos:start="517:90" pos:end="517:95">filter</name></expr>)</condition><block type="pseudo" pos:start="519:9" pos:end="519:18"><block_content pos:start="519:9" pos:end="519:18">

        <goto pos:start="519:9" pos:end="519:18">goto <name pos:start="519:14" pos:end="519:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:31"><expr pos:start="521:5" pos:end="521:30"><operator pos:start="521:5" pos:end="521:5">*</operator><name pos:start="521:6" pos:end="521:18">outFilterSize</name><operator pos:start="521:19" pos:end="521:19">=</operator> <name pos:start="521:21" pos:end="521:30">filterSize</name></expr>;</expr_stmt>



    <if_stmt pos:start="525:5" pos:end="527:117"><if pos:start="525:5" pos:end="527:117">if <condition pos:start="525:8" pos:end="525:29">(<expr pos:start="525:9" pos:end="525:28"><name pos:start="525:9" pos:end="525:13">flags</name><operator pos:start="525:14" pos:end="525:14">&amp;</operator><name pos:start="525:15" pos:end="525:28">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="527:9" pos:end="527:117"><block_content pos:start="527:9" pos:end="527:117">

        <expr_stmt pos:start="527:9" pos:end="527:117"><expr pos:start="527:9" pos:end="527:116"><call pos:start="527:9" pos:end="527:116"><name pos:start="527:9" pos:end="527:14">av_log</name><argument_list pos:start="527:15" pos:end="527:116">(<argument pos:start="527:16" pos:end="527:19"><expr pos:start="527:16" pos:end="527:19"><name pos:start="527:16" pos:end="527:19">NULL</name></expr></argument>, <argument pos:start="527:22" pos:end="527:35"><expr pos:start="527:22" pos:end="527:35"><name pos:start="527:22" pos:end="527:35">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="527:38" pos:end="527:90"><expr pos:start="527:38" pos:end="527:90"><literal type="string" pos:start="527:38" pos:end="527:90">"SwScaler: reducing / aligning filtersize %d -&gt; %d\n"</literal></expr></argument>, <argument pos:start="527:93" pos:end="527:103"><expr pos:start="527:93" pos:end="527:103"><name pos:start="527:93" pos:end="527:103">filter2Size</name></expr></argument>, <argument pos:start="527:106" pos:end="527:115"><expr pos:start="527:106" pos:end="527:115"><name pos:start="527:106" pos:end="527:115">filterSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="529:5" pos:end="529:57">/* try to reduce the filter-size (step2 reduce it) */</comment>

    <for pos:start="531:5" pos:end="549:5">for <control pos:start="531:9" pos:end="531:26">(<init pos:start="531:10" pos:end="531:13"><expr pos:start="531:10" pos:end="531:12"><name pos:start="531:10" pos:end="531:10">i</name><operator pos:start="531:11" pos:end="531:11">=</operator><literal type="number" pos:start="531:12" pos:end="531:12">0</literal></expr>;</init> <condition pos:start="531:15" pos:end="531:21"><expr pos:start="531:15" pos:end="531:20"><name pos:start="531:15" pos:end="531:15">i</name><operator pos:start="531:16" pos:end="531:16">&lt;</operator><name pos:start="531:17" pos:end="531:20">dstW</name></expr>;</condition> <incr pos:start="531:23" pos:end="531:25"><expr pos:start="531:23" pos:end="531:25"><name pos:start="531:23" pos:end="531:23">i</name><operator pos:start="531:24" pos:end="531:25">++</operator></expr></incr>)</control> <block pos:start="531:28" pos:end="549:5">{<block_content pos:start="533:9" pos:end="547:9">

        <decl_stmt pos:start="533:9" pos:end="533:14"><decl pos:start="533:9" pos:end="533:13"><type pos:start="533:9" pos:end="533:11"><name pos:start="533:9" pos:end="533:11">int</name></type> <name pos:start="533:13" pos:end="533:13">j</name></decl>;</decl_stmt>



        <for pos:start="537:9" pos:end="547:9">for <control pos:start="537:13" pos:end="537:36">(<init pos:start="537:14" pos:end="537:17"><expr pos:start="537:14" pos:end="537:16"><name pos:start="537:14" pos:end="537:14">j</name><operator pos:start="537:15" pos:end="537:15">=</operator><literal type="number" pos:start="537:16" pos:end="537:16">0</literal></expr>;</init> <condition pos:start="537:19" pos:end="537:31"><expr pos:start="537:19" pos:end="537:30"><name pos:start="537:19" pos:end="537:19">j</name><operator pos:start="537:20" pos:end="537:20">&lt;</operator><name pos:start="537:21" pos:end="537:30">filterSize</name></expr>;</condition> <incr pos:start="537:33" pos:end="537:35"><expr pos:start="537:33" pos:end="537:35"><name pos:start="537:33" pos:end="537:33">j</name><operator pos:start="537:34" pos:end="537:35">++</operator></expr></incr>)</control> <block pos:start="537:38" pos:end="547:9">{<block_content pos:start="539:13" pos:end="545:44">

            <if_stmt pos:start="539:13" pos:end="541:84"><if pos:start="539:13" pos:end="539:60">if <condition pos:start="539:16" pos:end="539:31">(<expr pos:start="539:17" pos:end="539:30"><name pos:start="539:17" pos:end="539:17">j</name><operator pos:start="539:18" pos:end="539:19">&gt;=</operator><name pos:start="539:20" pos:end="539:30">filter2Size</name></expr>)</condition><block type="pseudo" pos:start="539:33" pos:end="539:60"><block_content pos:start="539:33" pos:end="539:60"> <expr_stmt pos:start="539:33" pos:end="539:60"><expr pos:start="539:33" pos:end="539:59"><name pos:start="539:33" pos:end="539:56"><name pos:start="539:33" pos:end="539:38">filter</name><index pos:start="539:39" pos:end="539:56">[<expr pos:start="539:40" pos:end="539:55"><name pos:start="539:40" pos:end="539:40">i</name><operator pos:start="539:41" pos:end="539:41">*</operator><name pos:start="539:42" pos:end="539:51">filterSize</name> <operator pos:start="539:53" pos:end="539:53">+</operator> <name pos:start="539:55" pos:end="539:55">j</name></expr>]</index></name><operator pos:start="539:57" pos:end="539:57">=</operator> <literal type="number" pos:start="539:59" pos:end="539:59">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="541:13" pos:end="541:84">else<block type="pseudo" pos:start="541:32" pos:end="541:84"><block_content pos:start="541:32" pos:end="541:84">               <expr_stmt pos:start="541:32" pos:end="541:84"><expr pos:start="541:32" pos:end="541:83"><name pos:start="541:32" pos:end="541:55"><name pos:start="541:32" pos:end="541:37">filter</name><index pos:start="541:38" pos:end="541:55">[<expr pos:start="541:39" pos:end="541:54"><name pos:start="541:39" pos:end="541:39">i</name><operator pos:start="541:40" pos:end="541:40">*</operator><name pos:start="541:41" pos:end="541:50">filterSize</name> <operator pos:start="541:52" pos:end="541:52">+</operator> <name pos:start="541:54" pos:end="541:54">j</name></expr>]</index></name><operator pos:start="541:56" pos:end="541:56">=</operator> <name pos:start="541:58" pos:end="541:83"><name pos:start="541:58" pos:end="541:64">filter2</name><index pos:start="541:65" pos:end="541:83">[<expr pos:start="541:66" pos:end="541:82"><name pos:start="541:66" pos:end="541:66">i</name><operator pos:start="541:67" pos:end="541:67">*</operator><name pos:start="541:68" pos:end="541:78">filter2Size</name> <operator pos:start="541:80" pos:end="541:80">+</operator> <name pos:start="541:82" pos:end="541:82">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="543:13" pos:end="545:44"><if pos:start="543:13" pos:end="545:44">if<condition pos:start="543:15" pos:end="543:58">(<expr pos:start="543:16" pos:end="543:57"><operator pos:start="543:16" pos:end="543:16">(</operator><name pos:start="543:17" pos:end="543:21">flags</name> <operator pos:start="543:23" pos:end="543:23">&amp;</operator> <name pos:start="543:25" pos:end="543:36">SWS_BITEXACT</name><operator pos:start="543:37" pos:end="543:37">)</operator> <operator pos:start="543:39" pos:end="543:40">&amp;&amp;</operator> <name pos:start="543:42" pos:end="543:42">j</name><operator pos:start="543:43" pos:end="543:44">&gt;=</operator><name pos:start="543:45" pos:end="543:57">minFilterSize</name></expr>)</condition><block type="pseudo" pos:start="545:17" pos:end="545:44"><block_content pos:start="545:17" pos:end="545:44">

                <expr_stmt pos:start="545:17" pos:end="545:44"><expr pos:start="545:17" pos:end="545:43"><name pos:start="545:17" pos:end="545:40"><name pos:start="545:17" pos:end="545:22">filter</name><index pos:start="545:23" pos:end="545:40">[<expr pos:start="545:24" pos:end="545:39"><name pos:start="545:24" pos:end="545:24">i</name><operator pos:start="545:25" pos:end="545:25">*</operator><name pos:start="545:26" pos:end="545:35">filterSize</name> <operator pos:start="545:37" pos:end="545:37">+</operator> <name pos:start="545:39" pos:end="545:39">j</name></expr>]</index></name><operator pos:start="545:41" pos:end="545:41">=</operator> <literal type="number" pos:start="545:43" pos:end="545:43">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="line" pos:start="553:5" pos:end="553:46">//FIXME try to align filterPos if possible</comment>



    <comment type="line" pos:start="557:5" pos:end="557:17">//fix borders</comment>

    <for pos:start="559:5" pos:end="603:5">for <control pos:start="559:9" pos:end="559:26">(<init pos:start="559:10" pos:end="559:13"><expr pos:start="559:10" pos:end="559:12"><name pos:start="559:10" pos:end="559:10">i</name><operator pos:start="559:11" pos:end="559:11">=</operator><literal type="number" pos:start="559:12" pos:end="559:12">0</literal></expr>;</init> <condition pos:start="559:15" pos:end="559:21"><expr pos:start="559:15" pos:end="559:20"><name pos:start="559:15" pos:end="559:15">i</name><operator pos:start="559:16" pos:end="559:16">&lt;</operator><name pos:start="559:17" pos:end="559:20">dstW</name></expr>;</condition> <incr pos:start="559:23" pos:end="559:25"><expr pos:start="559:23" pos:end="559:25"><name pos:start="559:23" pos:end="559:23">i</name><operator pos:start="559:24" pos:end="559:25">++</operator></expr></incr>)</control> <block pos:start="559:28" pos:end="603:5">{<block_content pos:start="561:9" pos:end="601:9">

        <decl_stmt pos:start="561:9" pos:end="561:14"><decl pos:start="561:9" pos:end="561:13"><type pos:start="561:9" pos:end="561:11"><name pos:start="561:9" pos:end="561:11">int</name></type> <name pos:start="561:13" pos:end="561:13">j</name></decl>;</decl_stmt>

        <if_stmt pos:start="563:9" pos:end="579:9"><if pos:start="563:9" pos:end="579:9">if <condition pos:start="563:12" pos:end="563:32">(<expr pos:start="563:13" pos:end="563:31"><operator pos:start="563:13" pos:end="563:13">(</operator><operator pos:start="563:14" pos:end="563:14">*</operator><name pos:start="563:15" pos:end="563:23">filterPos</name><operator pos:start="563:24" pos:end="563:24">)</operator><index pos:start="563:25" pos:end="563:27">[<expr pos:start="563:26" pos:end="563:26"><name pos:start="563:26" pos:end="563:26">i</name></expr>]</index> <operator pos:start="563:29" pos:end="563:29">&lt;</operator> <literal type="number" pos:start="563:31" pos:end="563:31">0</literal></expr>)</condition> <block pos:start="563:34" pos:end="579:9">{<block_content pos:start="567:13" pos:end="577:31">

            <comment type="line" pos:start="565:13" pos:end="565:72">// move filter coefficients left to compensate for filterPos</comment>

            <for pos:start="567:13" pos:end="575:13">for <control pos:start="567:17" pos:end="567:40">(<init pos:start="567:18" pos:end="567:21"><expr pos:start="567:18" pos:end="567:20"><name pos:start="567:18" pos:end="567:18">j</name><operator pos:start="567:19" pos:end="567:19">=</operator><literal type="number" pos:start="567:20" pos:end="567:20">1</literal></expr>;</init> <condition pos:start="567:23" pos:end="567:35"><expr pos:start="567:23" pos:end="567:34"><name pos:start="567:23" pos:end="567:23">j</name><operator pos:start="567:24" pos:end="567:24">&lt;</operator><name pos:start="567:25" pos:end="567:34">filterSize</name></expr>;</condition> <incr pos:start="567:37" pos:end="567:39"><expr pos:start="567:37" pos:end="567:39"><name pos:start="567:37" pos:end="567:37">j</name><operator pos:start="567:38" pos:end="567:39">++</operator></expr></incr>)</control> <block pos:start="567:42" pos:end="575:13">{<block_content pos:start="569:17" pos:end="573:43">

                <decl_stmt pos:start="569:17" pos:end="569:56"><decl pos:start="569:17" pos:end="569:55"><type pos:start="569:17" pos:end="569:19"><name pos:start="569:17" pos:end="569:19">int</name></type> <name pos:start="569:21" pos:end="569:24">left</name><init pos:start="569:25" pos:end="569:55">= <expr pos:start="569:27" pos:end="569:55"><call pos:start="569:27" pos:end="569:55"><name pos:start="569:27" pos:end="569:31">FFMAX</name><argument_list pos:start="569:32" pos:end="569:55">(<argument pos:start="569:33" pos:end="569:51"><expr pos:start="569:33" pos:end="569:51"><name pos:start="569:33" pos:end="569:33">j</name> <operator pos:start="569:35" pos:end="569:35">+</operator> <operator pos:start="569:37" pos:end="569:37">(</operator><operator pos:start="569:38" pos:end="569:38">*</operator><name pos:start="569:39" pos:end="569:47">filterPos</name><operator pos:start="569:48" pos:end="569:48">)</operator><index pos:start="569:49" pos:end="569:51">[<expr pos:start="569:50" pos:end="569:50"><name pos:start="569:50" pos:end="569:50">i</name></expr>]</index></expr></argument>, <argument pos:start="569:54" pos:end="569:54"><expr pos:start="569:54" pos:end="569:54"><literal type="number" pos:start="569:54" pos:end="569:54">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="571:17" pos:end="571:72"><expr pos:start="571:17" pos:end="571:71"><name pos:start="571:17" pos:end="571:43"><name pos:start="571:17" pos:end="571:22">filter</name><index pos:start="571:23" pos:end="571:43">[<expr pos:start="571:24" pos:end="571:42"><name pos:start="571:24" pos:end="571:24">i</name><operator pos:start="571:25" pos:end="571:25">*</operator><name pos:start="571:26" pos:end="571:35">filterSize</name> <operator pos:start="571:37" pos:end="571:37">+</operator> <name pos:start="571:39" pos:end="571:42">left</name></expr>]</index></name> <operator pos:start="571:45" pos:end="571:46">+=</operator> <name pos:start="571:48" pos:end="571:71"><name pos:start="571:48" pos:end="571:53">filter</name><index pos:start="571:54" pos:end="571:71">[<expr pos:start="571:55" pos:end="571:70"><name pos:start="571:55" pos:end="571:55">i</name><operator pos:start="571:56" pos:end="571:56">*</operator><name pos:start="571:57" pos:end="571:66">filterSize</name> <operator pos:start="571:68" pos:end="571:68">+</operator> <name pos:start="571:70" pos:end="571:70">j</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="573:17" pos:end="573:43"><expr pos:start="573:17" pos:end="573:42"><name pos:start="573:17" pos:end="573:40"><name pos:start="573:17" pos:end="573:22">filter</name><index pos:start="573:23" pos:end="573:40">[<expr pos:start="573:24" pos:end="573:39"><name pos:start="573:24" pos:end="573:24">i</name><operator pos:start="573:25" pos:end="573:25">*</operator><name pos:start="573:26" pos:end="573:35">filterSize</name> <operator pos:start="573:37" pos:end="573:37">+</operator> <name pos:start="573:39" pos:end="573:39">j</name></expr>]</index></name><operator pos:start="573:41" pos:end="573:41">=</operator><literal type="number" pos:start="573:42" pos:end="573:42">0</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="577:13" pos:end="577:31"><expr pos:start="577:13" pos:end="577:30"><operator pos:start="577:13" pos:end="577:13">(</operator><operator pos:start="577:14" pos:end="577:14">*</operator><name pos:start="577:15" pos:end="577:23">filterPos</name><operator pos:start="577:24" pos:end="577:24">)</operator><index pos:start="577:25" pos:end="577:27">[<expr pos:start="577:26" pos:end="577:26"><name pos:start="577:26" pos:end="577:26">i</name></expr>]</index><operator pos:start="577:28" pos:end="577:28">=</operator> <literal type="number" pos:start="577:30" pos:end="577:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="583:9" pos:end="601:9"><if pos:start="583:9" pos:end="601:9">if <condition pos:start="583:12" pos:end="583:48">(<expr pos:start="583:13" pos:end="583:47"><operator pos:start="583:13" pos:end="583:13">(</operator><operator pos:start="583:14" pos:end="583:14">*</operator><name pos:start="583:15" pos:end="583:23">filterPos</name><operator pos:start="583:24" pos:end="583:24">)</operator><index pos:start="583:25" pos:end="583:27">[<expr pos:start="583:26" pos:end="583:26"><name pos:start="583:26" pos:end="583:26">i</name></expr>]</index> <operator pos:start="583:29" pos:end="583:29">+</operator> <name pos:start="583:31" pos:end="583:40">filterSize</name> <operator pos:start="583:42" pos:end="583:42">&gt;</operator> <name pos:start="583:44" pos:end="583:47">srcW</name></expr>)</condition> <block pos:start="583:50" pos:end="601:9">{<block_content pos:start="585:13" pos:end="599:47">

            <decl_stmt pos:start="585:13" pos:end="585:59"><decl pos:start="585:13" pos:end="585:58"><type pos:start="585:13" pos:end="585:15"><name pos:start="585:13" pos:end="585:15">int</name></type> <name pos:start="585:17" pos:end="585:21">shift</name><init pos:start="585:22" pos:end="585:58">= <expr pos:start="585:24" pos:end="585:58"><operator pos:start="585:24" pos:end="585:24">(</operator><operator pos:start="585:25" pos:end="585:25">*</operator><name pos:start="585:26" pos:end="585:34">filterPos</name><operator pos:start="585:35" pos:end="585:35">)</operator><index pos:start="585:36" pos:end="585:38">[<expr pos:start="585:37" pos:end="585:37"><name pos:start="585:37" pos:end="585:37">i</name></expr>]</index> <operator pos:start="585:40" pos:end="585:40">+</operator> <name pos:start="585:42" pos:end="585:51">filterSize</name> <operator pos:start="585:53" pos:end="585:53">-</operator> <name pos:start="585:55" pos:end="585:58">srcW</name></expr></init></decl>;</decl_stmt>

            <comment type="line" pos:start="587:13" pos:end="587:73">// move filter coefficients right to compensate for filterPos</comment>

            <for pos:start="589:13" pos:end="597:13">for <control pos:start="589:17" pos:end="589:43">(<init pos:start="589:18" pos:end="589:32"><expr pos:start="589:18" pos:end="589:31"><name pos:start="589:18" pos:end="589:18">j</name><operator pos:start="589:19" pos:end="589:19">=</operator><name pos:start="589:20" pos:end="589:29">filterSize</name><operator pos:start="589:30" pos:end="589:30">-</operator><literal type="number" pos:start="589:31" pos:end="589:31">2</literal></expr>;</init> <condition pos:start="589:34" pos:end="589:38"><expr pos:start="589:34" pos:end="589:37"><name pos:start="589:34" pos:end="589:34">j</name><operator pos:start="589:35" pos:end="589:36">&gt;=</operator><literal type="number" pos:start="589:37" pos:end="589:37">0</literal></expr>;</condition> <incr pos:start="589:40" pos:end="589:42"><expr pos:start="589:40" pos:end="589:42"><name pos:start="589:40" pos:end="589:40">j</name><operator pos:start="589:41" pos:end="589:42">--</operator></expr></incr>)</control> <block pos:start="589:45" pos:end="597:13">{<block_content pos:start="591:17" pos:end="595:42">

                <decl_stmt pos:start="591:17" pos:end="591:58"><decl pos:start="591:17" pos:end="591:57"><type pos:start="591:17" pos:end="591:19"><name pos:start="591:17" pos:end="591:19">int</name></type> <name pos:start="591:21" pos:end="591:25">right</name><init pos:start="591:26" pos:end="591:57">= <expr pos:start="591:28" pos:end="591:57"><call pos:start="591:28" pos:end="591:57"><name pos:start="591:28" pos:end="591:32">FFMIN</name><argument_list pos:start="591:33" pos:end="591:57">(<argument pos:start="591:34" pos:end="591:42"><expr pos:start="591:34" pos:end="591:42"><name pos:start="591:34" pos:end="591:34">j</name> <operator pos:start="591:36" pos:end="591:36">+</operator> <name pos:start="591:38" pos:end="591:42">shift</name></expr></argument>, <argument pos:start="591:45" pos:end="591:56"><expr pos:start="591:45" pos:end="591:56"><name pos:start="591:45" pos:end="591:54">filterSize</name><operator pos:start="591:55" pos:end="591:55">-</operator><literal type="number" pos:start="591:56" pos:end="591:56">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="593:17" pos:end="593:71"><expr pos:start="593:17" pos:end="593:70"><name pos:start="593:17" pos:end="593:43"><name pos:start="593:17" pos:end="593:22">filter</name><index pos:start="593:23" pos:end="593:43">[<expr pos:start="593:24" pos:end="593:42"><name pos:start="593:24" pos:end="593:24">i</name><operator pos:start="593:25" pos:end="593:25">*</operator><name pos:start="593:26" pos:end="593:35">filterSize</name> <operator pos:start="593:37" pos:end="593:37">+</operator><name pos:start="593:38" pos:end="593:42">right</name></expr>]</index></name> <operator pos:start="593:45" pos:end="593:46">+=</operator> <name pos:start="593:48" pos:end="593:70"><name pos:start="593:48" pos:end="593:53">filter</name><index pos:start="593:54" pos:end="593:70">[<expr pos:start="593:55" pos:end="593:69"><name pos:start="593:55" pos:end="593:55">i</name><operator pos:start="593:56" pos:end="593:56">*</operator><name pos:start="593:57" pos:end="593:66">filterSize</name> <operator pos:start="593:68" pos:end="593:68">+</operator><name pos:start="593:69" pos:end="593:69">j</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="595:42"><expr pos:start="595:17" pos:end="595:41"><name pos:start="595:17" pos:end="595:39"><name pos:start="595:17" pos:end="595:22">filter</name><index pos:start="595:23" pos:end="595:39">[<expr pos:start="595:24" pos:end="595:38"><name pos:start="595:24" pos:end="595:24">i</name><operator pos:start="595:25" pos:end="595:25">*</operator><name pos:start="595:26" pos:end="595:35">filterSize</name> <operator pos:start="595:37" pos:end="595:37">+</operator><name pos:start="595:38" pos:end="595:38">j</name></expr>]</index></name><operator pos:start="595:40" pos:end="595:40">=</operator><literal type="number" pos:start="595:41" pos:end="595:41">0</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="599:13" pos:end="599:47"><expr pos:start="599:13" pos:end="599:46"><operator pos:start="599:13" pos:end="599:13">(</operator><operator pos:start="599:14" pos:end="599:14">*</operator><name pos:start="599:15" pos:end="599:23">filterPos</name><operator pos:start="599:24" pos:end="599:24">)</operator><index pos:start="599:25" pos:end="599:27">[<expr pos:start="599:26" pos:end="599:26"><name pos:start="599:26" pos:end="599:26">i</name></expr>]</index><operator pos:start="599:28" pos:end="599:28">=</operator> <name pos:start="599:30" pos:end="599:33">srcW</name> <operator pos:start="599:35" pos:end="599:35">-</operator> <name pos:start="599:37" pos:end="599:46">filterSize</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="line" pos:start="607:5" pos:end="607:65">// Note the +1 is for the MMX scaler which reads over the end</comment>

    <comment type="block" pos:start="609:5" pos:end="609:65">/* align at 16 for AltiVec (needed by hScale_altivec_real) */</comment>

    <expr_stmt pos:start="611:5" pos:end="611:87"><expr pos:start="611:5" pos:end="611:86"><call pos:start="611:5" pos:end="611:86"><name pos:start="611:5" pos:end="611:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="611:22" pos:end="611:86">(<argument pos:start="611:23" pos:end="611:26"><expr pos:start="611:23" pos:end="611:26"><name pos:start="611:23" pos:end="611:26">NULL</name></expr></argument>, <argument pos:start="611:29" pos:end="611:38"><expr pos:start="611:29" pos:end="611:38"><operator pos:start="611:29" pos:end="611:29">*</operator><name pos:start="611:30" pos:end="611:38">outFilter</name></expr></argument>, <argument pos:start="611:41" pos:end="611:79"><expr pos:start="611:41" pos:end="611:79"><operator pos:start="611:41" pos:end="611:41">*</operator><name pos:start="611:42" pos:end="611:54">outFilterSize</name><operator pos:start="611:55" pos:end="611:55">*</operator><operator pos:start="611:56" pos:end="611:56">(</operator><name pos:start="611:57" pos:end="611:60">dstW</name><operator pos:start="611:61" pos:end="611:61">+</operator><literal type="number" pos:start="611:62" pos:end="611:62">3</literal><operator pos:start="611:63" pos:end="611:63">)</operator><operator pos:start="611:64" pos:end="611:64">*</operator><sizeof pos:start="611:65" pos:end="611:79">sizeof<argument_list pos:start="611:71" pos:end="611:79">(<argument pos:start="611:72" pos:end="611:78"><expr pos:start="611:72" pos:end="611:78"><name pos:start="611:72" pos:end="611:78">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="611:82" pos:end="611:85"><expr pos:start="611:82" pos:end="611:85"><name pos:start="611:82" pos:end="611:85">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="615:5" pos:end="615:40">/* normalize &amp; store in outFilter */</comment>

    <for pos:start="617:5" pos:end="647:5">for <control pos:start="617:9" pos:end="617:26">(<init pos:start="617:10" pos:end="617:13"><expr pos:start="617:10" pos:end="617:12"><name pos:start="617:10" pos:end="617:10">i</name><operator pos:start="617:11" pos:end="617:11">=</operator><literal type="number" pos:start="617:12" pos:end="617:12">0</literal></expr>;</init> <condition pos:start="617:15" pos:end="617:21"><expr pos:start="617:15" pos:end="617:20"><name pos:start="617:15" pos:end="617:15">i</name><operator pos:start="617:16" pos:end="617:16">&lt;</operator><name pos:start="617:17" pos:end="617:20">dstW</name></expr>;</condition> <incr pos:start="617:23" pos:end="617:25"><expr pos:start="617:23" pos:end="617:25"><name pos:start="617:23" pos:end="617:23">i</name><operator pos:start="617:24" pos:end="617:25">++</operator></expr></incr>)</control> <block pos:start="617:28" pos:end="647:5">{<block_content pos:start="619:9" pos:end="645:9">

        <decl_stmt pos:start="619:9" pos:end="619:14"><decl pos:start="619:9" pos:end="619:13"><type pos:start="619:9" pos:end="619:11"><name pos:start="619:9" pos:end="619:11">int</name></type> <name pos:start="619:13" pos:end="619:13">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="621:9" pos:end="621:24"><decl pos:start="621:9" pos:end="621:23"><type pos:start="621:9" pos:end="621:15"><name pos:start="621:9" pos:end="621:15">int64_t</name></type> <name pos:start="621:17" pos:end="621:21">error</name><init pos:start="621:22" pos:end="621:23">=<expr pos:start="621:23" pos:end="621:23"><literal type="number" pos:start="621:23" pos:end="621:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="623:9" pos:end="623:22"><decl pos:start="623:9" pos:end="623:21"><type pos:start="623:9" pos:end="623:15"><name pos:start="623:9" pos:end="623:15">int64_t</name></type> <name pos:start="623:17" pos:end="623:19">sum</name><init pos:start="623:20" pos:end="623:21">=<expr pos:start="623:21" pos:end="623:21"><literal type="number" pos:start="623:21" pos:end="623:21">0</literal></expr></init></decl>;</decl_stmt>



        <for pos:start="627:9" pos:end="631:9">for <control pos:start="627:13" pos:end="627:36">(<init pos:start="627:14" pos:end="627:17"><expr pos:start="627:14" pos:end="627:16"><name pos:start="627:14" pos:end="627:14">j</name><operator pos:start="627:15" pos:end="627:15">=</operator><literal type="number" pos:start="627:16" pos:end="627:16">0</literal></expr>;</init> <condition pos:start="627:19" pos:end="627:31"><expr pos:start="627:19" pos:end="627:30"><name pos:start="627:19" pos:end="627:19">j</name><operator pos:start="627:20" pos:end="627:20">&lt;</operator><name pos:start="627:21" pos:end="627:30">filterSize</name></expr>;</condition> <incr pos:start="627:33" pos:end="627:35"><expr pos:start="627:33" pos:end="627:35"><name pos:start="627:33" pos:end="627:33">j</name><operator pos:start="627:34" pos:end="627:35">++</operator></expr></incr>)</control> <block pos:start="627:38" pos:end="631:9">{<block_content pos:start="629:13" pos:end="629:43">

            <expr_stmt pos:start="629:13" pos:end="629:43"><expr pos:start="629:13" pos:end="629:42"><name pos:start="629:13" pos:end="629:15">sum</name><operator pos:start="629:16" pos:end="629:17">+=</operator> <name pos:start="629:19" pos:end="629:42"><name pos:start="629:19" pos:end="629:24">filter</name><index pos:start="629:25" pos:end="629:42">[<expr pos:start="629:26" pos:end="629:41"><name pos:start="629:26" pos:end="629:26">i</name><operator pos:start="629:27" pos:end="629:27">*</operator><name pos:start="629:28" pos:end="629:37">filterSize</name> <operator pos:start="629:39" pos:end="629:39">+</operator> <name pos:start="629:41" pos:end="629:41">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="633:9" pos:end="633:32"><expr pos:start="633:9" pos:end="633:31"><name pos:start="633:9" pos:end="633:11">sum</name><operator pos:start="633:12" pos:end="633:12">=</operator> <operator pos:start="633:14" pos:end="633:14">(</operator><name pos:start="633:15" pos:end="633:17">sum</name> <operator pos:start="633:19" pos:end="633:19">+</operator> <name pos:start="633:21" pos:end="633:23">one</name><operator pos:start="633:24" pos:end="633:24">/</operator><literal type="number" pos:start="633:25" pos:end="633:25">2</literal><operator pos:start="633:26" pos:end="633:26">)</operator><operator pos:start="633:27" pos:end="633:27">/</operator> <name pos:start="633:29" pos:end="633:31">one</name></expr>;</expr_stmt>

        <for pos:start="635:9" pos:end="645:9">for <control pos:start="635:13" pos:end="635:40">(<init pos:start="635:14" pos:end="635:17"><expr pos:start="635:14" pos:end="635:16"><name pos:start="635:14" pos:end="635:14">j</name><operator pos:start="635:15" pos:end="635:15">=</operator><literal type="number" pos:start="635:16" pos:end="635:16">0</literal></expr>;</init> <condition pos:start="635:19" pos:end="635:35"><expr pos:start="635:19" pos:end="635:34"><name pos:start="635:19" pos:end="635:19">j</name><operator pos:start="635:20" pos:end="635:20">&lt;</operator><operator pos:start="635:21" pos:end="635:21">*</operator><name pos:start="635:22" pos:end="635:34">outFilterSize</name></expr>;</condition> <incr pos:start="635:37" pos:end="635:39"><expr pos:start="635:37" pos:end="635:39"><name pos:start="635:37" pos:end="635:37">j</name><operator pos:start="635:38" pos:end="635:39">++</operator></expr></incr>)</control> <block pos:start="635:42" pos:end="645:9">{<block_content pos:start="637:13" pos:end="643:32">

            <decl_stmt pos:start="637:13" pos:end="637:56"><decl pos:start="637:13" pos:end="637:55"><type pos:start="637:13" pos:end="637:19"><name pos:start="637:13" pos:end="637:19">int64_t</name></type> <name pos:start="637:21" pos:end="637:21">v</name><init pos:start="637:22" pos:end="637:55">= <expr pos:start="637:24" pos:end="637:55"><name pos:start="637:24" pos:end="637:47"><name pos:start="637:24" pos:end="637:29">filter</name><index pos:start="637:30" pos:end="637:47">[<expr pos:start="637:31" pos:end="637:46"><name pos:start="637:31" pos:end="637:31">i</name><operator pos:start="637:32" pos:end="637:32">*</operator><name pos:start="637:33" pos:end="637:42">filterSize</name> <operator pos:start="637:44" pos:end="637:44">+</operator> <name pos:start="637:46" pos:end="637:46">j</name></expr>]</index></name> <operator pos:start="637:49" pos:end="637:49">+</operator> <name pos:start="637:51" pos:end="637:55">error</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="639:13" pos:end="639:42"><decl pos:start="639:13" pos:end="639:41"><type pos:start="639:13" pos:end="639:15"><name pos:start="639:13" pos:end="639:15">int</name></type> <name pos:start="639:17" pos:end="639:20">intV</name><init pos:start="639:21" pos:end="639:41">= <expr pos:start="639:23" pos:end="639:41"><call pos:start="639:23" pos:end="639:41"><name pos:start="639:23" pos:end="639:33">ROUNDED_DIV</name><argument_list pos:start="639:34" pos:end="639:41">(<argument pos:start="639:35" pos:end="639:35"><expr pos:start="639:35" pos:end="639:35"><name pos:start="639:35" pos:end="639:35">v</name></expr></argument>, <argument pos:start="639:38" pos:end="639:40"><expr pos:start="639:38" pos:end="639:40"><name pos:start="639:38" pos:end="639:40">sum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="641:13" pos:end="641:55"><expr pos:start="641:13" pos:end="641:54"><operator pos:start="641:13" pos:end="641:13">(</operator><operator pos:start="641:14" pos:end="641:14">*</operator><name pos:start="641:15" pos:end="641:23">outFilter</name><operator pos:start="641:24" pos:end="641:24">)</operator><index pos:start="641:25" pos:end="641:48">[<expr pos:start="641:26" pos:end="641:47"><name pos:start="641:26" pos:end="641:26">i</name><operator pos:start="641:27" pos:end="641:27">*</operator><operator pos:start="641:28" pos:end="641:28">(</operator><operator pos:start="641:29" pos:end="641:29">*</operator><name pos:start="641:30" pos:end="641:42">outFilterSize</name><operator pos:start="641:43" pos:end="641:43">)</operator> <operator pos:start="641:45" pos:end="641:45">+</operator> <name pos:start="641:47" pos:end="641:47">j</name></expr>]</index><operator pos:start="641:49" pos:end="641:49">=</operator> <name pos:start="641:51" pos:end="641:54">intV</name></expr>;</expr_stmt>

            <expr_stmt pos:start="643:13" pos:end="643:32"><expr pos:start="643:13" pos:end="643:31"><name pos:start="643:13" pos:end="643:17">error</name><operator pos:start="643:18" pos:end="643:18">=</operator> <name pos:start="643:20" pos:end="643:20">v</name> <operator pos:start="643:22" pos:end="643:22">-</operator> <name pos:start="643:24" pos:end="643:27">intV</name><operator pos:start="643:28" pos:end="643:28">*</operator><name pos:start="643:29" pos:end="643:31">sum</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="651:5" pos:end="655:48"><expr pos:start="651:5" pos:end="655:47"><operator pos:start="651:5" pos:end="651:5">(</operator><operator pos:start="651:6" pos:end="651:6">*</operator><name pos:start="651:7" pos:end="651:15">filterPos</name><operator pos:start="651:16" pos:end="651:16">)</operator><index pos:start="651:17" pos:end="651:24">[<expr pos:start="651:18" pos:end="651:23"><name pos:start="651:18" pos:end="651:21">dstW</name><operator pos:start="651:22" pos:end="651:22">+</operator><literal type="number" pos:start="651:23" pos:end="651:23">0</literal></expr>]</index> <operator pos:start="651:26" pos:end="651:26">=</operator>

    <operator pos:start="653:5" pos:end="653:5">(</operator><operator pos:start="653:6" pos:end="653:6">*</operator><name pos:start="653:7" pos:end="653:15">filterPos</name><operator pos:start="653:16" pos:end="653:16">)</operator><index pos:start="653:17" pos:end="653:24">[<expr pos:start="653:18" pos:end="653:23"><name pos:start="653:18" pos:end="653:21">dstW</name><operator pos:start="653:22" pos:end="653:22">+</operator><literal type="number" pos:start="653:23" pos:end="653:23">1</literal></expr>]</index> <operator pos:start="653:26" pos:end="653:26">=</operator>

    <operator pos:start="655:5" pos:end="655:5">(</operator><operator pos:start="655:6" pos:end="655:6">*</operator><name pos:start="655:7" pos:end="655:15">filterPos</name><operator pos:start="655:16" pos:end="655:16">)</operator><index pos:start="655:17" pos:end="655:24">[<expr pos:start="655:18" pos:end="655:23"><name pos:start="655:18" pos:end="655:21">dstW</name><operator pos:start="655:22" pos:end="655:22">+</operator><literal type="number" pos:start="655:23" pos:end="655:23">2</literal></expr>]</index> <operator pos:start="655:26" pos:end="655:26">=</operator> <operator pos:start="655:28" pos:end="655:28">(</operator><operator pos:start="655:29" pos:end="655:29">*</operator><name pos:start="655:30" pos:end="655:38">filterPos</name><operator pos:start="655:39" pos:end="655:39">)</operator><index pos:start="655:40" pos:end="655:47">[<expr pos:start="655:41" pos:end="655:46"><name pos:start="655:41" pos:end="655:44">dstW</name><operator pos:start="655:45" pos:end="655:45">-</operator><literal type="number" pos:start="655:46" pos:end="655:46">1</literal></expr>]</index></expr>;</expr_stmt> <comment type="line" pos:start="655:50" pos:end="655:93">// the MMX/SSE scaler will read over the end</comment>

    <for pos:start="657:5" pos:end="667:5">for <control pos:start="657:9" pos:end="657:36">(<init pos:start="657:10" pos:end="657:13"><expr pos:start="657:10" pos:end="657:12"><name pos:start="657:10" pos:end="657:10">i</name><operator pos:start="657:11" pos:end="657:11">=</operator><literal type="number" pos:start="657:12" pos:end="657:12">0</literal></expr>;</init> <condition pos:start="657:15" pos:end="657:31"><expr pos:start="657:15" pos:end="657:30"><name pos:start="657:15" pos:end="657:15">i</name><operator pos:start="657:16" pos:end="657:16">&lt;</operator><operator pos:start="657:17" pos:end="657:17">*</operator><name pos:start="657:18" pos:end="657:30">outFilterSize</name></expr>;</condition> <incr pos:start="657:33" pos:end="657:35"><expr pos:start="657:33" pos:end="657:35"><name pos:start="657:33" pos:end="657:33">i</name><operator pos:start="657:34" pos:end="657:35">++</operator></expr></incr>)</control> <block pos:start="657:38" pos:end="667:5">{<block_content pos:start="659:9" pos:end="665:65">

        <decl_stmt pos:start="659:9" pos:end="659:49"><decl pos:start="659:9" pos:end="659:48"><type pos:start="659:9" pos:end="659:11"><name pos:start="659:9" pos:end="659:11">int</name></type> <name pos:start="659:13" pos:end="659:13">k</name><init pos:start="659:14" pos:end="659:48">= <expr pos:start="659:16" pos:end="659:48"><operator pos:start="659:16" pos:end="659:16">(</operator><name pos:start="659:17" pos:end="659:20">dstW</name> <operator pos:start="659:22" pos:end="659:22">-</operator> <literal type="number" pos:start="659:24" pos:end="659:24">1</literal><operator pos:start="659:25" pos:end="659:25">)</operator> <operator pos:start="659:27" pos:end="659:27">*</operator> <operator pos:start="659:29" pos:end="659:29">(</operator><operator pos:start="659:30" pos:end="659:30">*</operator><name pos:start="659:31" pos:end="659:43">outFilterSize</name><operator pos:start="659:44" pos:end="659:44">)</operator> <operator pos:start="659:46" pos:end="659:46">+</operator> <name pos:start="659:48" pos:end="659:48">i</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="661:9" pos:end="665:65"><expr pos:start="661:9" pos:end="665:64"><operator pos:start="661:9" pos:end="661:9">(</operator><operator pos:start="661:10" pos:end="661:10">*</operator><name pos:start="661:11" pos:end="661:19">outFilter</name><operator pos:start="661:20" pos:end="661:20">)</operator><index pos:start="661:21" pos:end="661:46">[<expr pos:start="661:22" pos:end="661:45"><name pos:start="661:22" pos:end="661:22">k</name> <operator pos:start="661:24" pos:end="661:24">+</operator> <literal type="number" pos:start="661:26" pos:end="661:26">1</literal> <operator pos:start="661:28" pos:end="661:28">*</operator> <operator pos:start="661:30" pos:end="661:30">(</operator><operator pos:start="661:31" pos:end="661:31">*</operator><name pos:start="661:32" pos:end="661:44">outFilterSize</name><operator pos:start="661:45" pos:end="661:45">)</operator></expr>]</index> <operator pos:start="661:48" pos:end="661:48">=</operator>

        <operator pos:start="663:9" pos:end="663:9">(</operator><operator pos:start="663:10" pos:end="663:10">*</operator><name pos:start="663:11" pos:end="663:19">outFilter</name><operator pos:start="663:20" pos:end="663:20">)</operator><index pos:start="663:21" pos:end="663:46">[<expr pos:start="663:22" pos:end="663:45"><name pos:start="663:22" pos:end="663:22">k</name> <operator pos:start="663:24" pos:end="663:24">+</operator> <literal type="number" pos:start="663:26" pos:end="663:26">2</literal> <operator pos:start="663:28" pos:end="663:28">*</operator> <operator pos:start="663:30" pos:end="663:30">(</operator><operator pos:start="663:31" pos:end="663:31">*</operator><name pos:start="663:32" pos:end="663:44">outFilterSize</name><operator pos:start="663:45" pos:end="663:45">)</operator></expr>]</index> <operator pos:start="663:48" pos:end="663:48">=</operator>

        <operator pos:start="665:9" pos:end="665:9">(</operator><operator pos:start="665:10" pos:end="665:10">*</operator><name pos:start="665:11" pos:end="665:19">outFilter</name><operator pos:start="665:20" pos:end="665:20">)</operator><index pos:start="665:21" pos:end="665:46">[<expr pos:start="665:22" pos:end="665:45"><name pos:start="665:22" pos:end="665:22">k</name> <operator pos:start="665:24" pos:end="665:24">+</operator> <literal type="number" pos:start="665:26" pos:end="665:26">3</literal> <operator pos:start="665:28" pos:end="665:28">*</operator> <operator pos:start="665:30" pos:end="665:30">(</operator><operator pos:start="665:31" pos:end="665:31">*</operator><name pos:start="665:32" pos:end="665:44">outFilterSize</name><operator pos:start="665:45" pos:end="665:45">)</operator></expr>]</index> <operator pos:start="665:48" pos:end="665:48">=</operator> <operator pos:start="665:50" pos:end="665:50">(</operator><operator pos:start="665:51" pos:end="665:51">*</operator><name pos:start="665:52" pos:end="665:60">outFilter</name><operator pos:start="665:61" pos:end="665:61">)</operator><index pos:start="665:62" pos:end="665:64">[<expr pos:start="665:63" pos:end="665:63"><name pos:start="665:63" pos:end="665:63">k</name></expr>]</index></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="671:5" pos:end="671:10"><expr pos:start="671:5" pos:end="671:9"><name pos:start="671:5" pos:end="671:7">ret</name><operator pos:start="671:8" pos:end="671:8">=</operator><literal type="number" pos:start="671:9" pos:end="671:9">0</literal></expr>;</expr_stmt>

<label pos:start="673:1" pos:end="673:5"><name pos:start="673:1" pos:end="673:4">fail</name>:</label>

    <expr_stmt pos:start="675:5" pos:end="675:20"><expr pos:start="675:5" pos:end="675:19"><call pos:start="675:5" pos:end="675:19"><name pos:start="675:5" pos:end="675:11">av_free</name><argument_list pos:start="675:12" pos:end="675:19">(<argument pos:start="675:13" pos:end="675:18"><expr pos:start="675:13" pos:end="675:18"><name pos:start="675:13" pos:end="675:18">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="677:5" pos:end="677:21"><expr pos:start="677:5" pos:end="677:20"><call pos:start="677:5" pos:end="677:20"><name pos:start="677:5" pos:end="677:11">av_free</name><argument_list pos:start="677:12" pos:end="677:20">(<argument pos:start="677:13" pos:end="677:19"><expr pos:start="677:13" pos:end="677:19"><name pos:start="677:13" pos:end="677:19">filter2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="679:5" pos:end="679:15">return <expr pos:start="679:12" pos:end="679:14"><name pos:start="679:12" pos:end="679:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
