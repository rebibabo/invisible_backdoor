<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2201.c" pos:tabs="8"><function pos:start="1:1" pos:end="511:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:38">msmpeg4_decode_block</name><parameter_list pos:start="1:39" pos:end="3:74">(<parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><name pos:start="1:40" pos:end="1:53">MpegEncContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type> <name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:74"><decl pos:start="1:60" pos:end="1:74"><type pos:start="1:60" pos:end="1:74"><name pos:start="1:60" pos:end="1:66">DCTELEM</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type> <name pos:start="1:70" pos:end="1:74">block</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:35"><decl pos:start="3:31" pos:end="3:35"><type pos:start="3:31" pos:end="3:35"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:35">n</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">coded</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:73"><decl pos:start="3:49" pos:end="3:73"><type pos:start="3:49" pos:end="3:73"><specifier pos:start="3:49" pos:end="3:53">const</specifier> <name pos:start="3:55" pos:end="3:61">uint8_t</name> <modifier pos:start="3:63" pos:end="3:63">*</modifier></type><name pos:start="3:64" pos:end="3:73">scan_table</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="511:1">{<block_content pos:start="7:5" pos:end="509:13">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">level</name></decl>, <decl pos:start="7:16" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:16">i</name></decl>, <decl pos:start="7:19" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:22">last</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">run</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:37">run_diff</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">dc_pred_dir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">RLTable</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:15">rl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">RL_VLC_ELEM</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:23">rl_vlc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">qmul</name></decl>, <decl pos:start="15:15" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:18">qadd</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="157:5"><if pos:start="19:5" pos:end="119:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">mb_intra</name></name></expr>)</condition> <block pos:start="19:22" pos:end="119:5">{<block_content pos:start="21:9" pos:end="117:30">

        <expr_stmt pos:start="21:9" pos:end="21:15"><expr pos:start="21:9" pos:end="21:14"><name pos:start="21:9" pos:end="21:12">qmul</name><operator pos:start="21:13" pos:end="21:13">=</operator><literal type="number" pos:start="21:14" pos:end="21:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:12">qadd</name><operator pos:start="23:13" pos:end="23:13">=</operator><literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</expr_stmt>



	<comment type="block" pos:start="27:9" pos:end="27:21">/* DC coef */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><call pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:16">set_stat</name><argument_list pos:start="29:17" pos:end="29:23">(<argument pos:start="29:18" pos:end="29:22"><expr pos:start="29:18" pos:end="29:22"><name pos:start="29:18" pos:end="29:22">ST_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:53"><name pos:start="31:9" pos:end="31:13">level</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:53"><name pos:start="31:17" pos:end="31:33">msmpeg4_decode_dc</name><argument_list pos:start="31:34" pos:end="31:53">(<argument pos:start="31:35" pos:end="31:35"><expr pos:start="31:35" pos:end="31:35"><name pos:start="31:35" pos:end="31:35">s</name></expr></argument>, <argument pos:start="31:38" pos:end="31:38"><expr pos:start="31:38" pos:end="31:38"><name pos:start="31:38" pos:end="31:38">n</name></expr></argument>, <argument pos:start="31:41" pos:end="31:52"><expr pos:start="31:41" pos:end="31:52"><operator pos:start="31:41" pos:end="31:41">&amp;</operator><name pos:start="31:42" pos:end="31:52">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="33:1" pos:end="33:15">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:15">PRINT_MB</name></cpp:ifdef>

<block pos:start="35:1" pos:end="48:0">{<block_content pos:start="37:5" pos:end="43:23">

    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:14"><specifier pos:start="37:5" pos:end="37:10">static</specifier> <name pos:start="37:12" pos:end="37:14">int</name></type> <name pos:start="37:16" pos:end="37:16">c</name></decl>;</decl_stmt>

    <if_stmt pos:start="39:5" pos:end="39:17"><if pos:start="39:5" pos:end="39:17">if<condition pos:start="39:7" pos:end="39:12">(<expr pos:start="39:8" pos:end="39:11"><name pos:start="39:8" pos:end="39:8">n</name><operator pos:start="39:9" pos:end="39:10">==</operator><literal type="number" pos:start="39:11" pos:end="39:11">0</literal></expr>)</condition><block type="pseudo" pos:start="39:14" pos:end="39:17"><block_content pos:start="39:14" pos:end="39:17"> <expr_stmt pos:start="39:14" pos:end="39:17"><expr pos:start="39:14" pos:end="39:16"><name pos:start="39:14" pos:end="39:14">c</name><operator pos:start="39:15" pos:end="39:15">=</operator><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="41:29"><if pos:start="41:5" pos:end="41:29">if<condition pos:start="41:7" pos:end="41:12">(<expr pos:start="41:8" pos:end="41:11"><name pos:start="41:8" pos:end="41:8">n</name><operator pos:start="41:9" pos:end="41:10">==</operator><literal type="number" pos:start="41:11" pos:end="41:11">4</literal></expr>)</condition><block type="pseudo" pos:start="41:14" pos:end="41:29"><block_content pos:start="41:14" pos:end="41:29"> <expr_stmt pos:start="41:14" pos:end="41:29"><expr pos:start="41:14" pos:end="41:28"><call pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:19">printf</name><argument_list pos:start="41:20" pos:end="41:28">(<argument pos:start="41:21" pos:end="41:24"><expr pos:start="41:21" pos:end="41:24"><literal type="string" pos:start="41:21" pos:end="41:24">"%X"</literal></expr></argument>, <argument pos:start="41:27" pos:end="41:27"><expr pos:start="41:27" pos:end="41:27"><name pos:start="41:27" pos:end="41:27">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:23"><expr pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">c</name><operator pos:start="43:6" pos:end="43:7">+=</operator> <name pos:start="43:9" pos:end="43:9">c</name> <operator pos:start="43:11" pos:end="43:11">+</operator><name pos:start="43:12" pos:end="43:22">dc_pred_dir</name></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:17">level</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr>)</condition><block pos:start="49:23" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:46">

            <expr_stmt pos:start="51:13" pos:end="51:83"><expr pos:start="51:13" pos:end="51:82"><call pos:start="51:13" pos:end="51:82"><name pos:start="51:13" pos:end="51:19">fprintf</name><argument_list pos:start="51:20" pos:end="51:82">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">stderr</name></expr></argument>, <argument pos:start="51:29" pos:end="51:67"><expr pos:start="51:29" pos:end="51:67"><literal type="string" pos:start="51:29" pos:end="51:67">"dc overflow- block: %d qscale: %d//\n"</literal></expr></argument>, <argument pos:start="51:70" pos:end="51:70"><expr pos:start="51:70" pos:end="51:70"><name pos:start="51:70" pos:end="51:70">n</name></expr></argument>, <argument pos:start="51:73" pos:end="51:81"><expr pos:start="51:73" pos:end="51:81"><name pos:start="51:73" pos:end="51:81"><name pos:start="51:73" pos:end="51:73">s</name><operator pos:start="51:74" pos:end="51:75">-&gt;</operator><name pos:start="51:76" pos:end="51:81">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="53:13" pos:end="55:46"><if pos:start="53:13" pos:end="53:44">if<condition pos:start="53:15" pos:end="53:35">(<expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:16">s</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:34">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="53:37" pos:end="53:44"><block_content pos:start="53:37" pos:end="53:44"> <expr_stmt pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:43"><name pos:start="53:37" pos:end="53:41">level</name><operator pos:start="53:42" pos:end="53:42">=</operator><literal type="number" pos:start="53:43" pos:end="53:43">0</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="55:13" pos:end="55:46">else<block type="pseudo" pos:start="55:37" pos:end="55:46"><block_content pos:start="55:37" pos:end="55:46">                    <return pos:start="55:37" pos:end="55:46">return <expr pos:start="55:44" pos:end="55:45"><operator pos:start="55:44" pos:end="55:44">-</operator><literal type="number" pos:start="55:45" pos:end="55:45">1</literal></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="83:9"><if pos:start="59:9" pos:end="71:9">if <condition pos:start="59:12" pos:end="59:18">(<expr pos:start="59:13" pos:end="59:17"><name pos:start="59:13" pos:end="59:13">n</name> <operator pos:start="59:15" pos:end="59:15">&lt;</operator> <literal type="number" pos:start="59:17" pos:end="59:17">4</literal></expr>)</condition> <block pos:start="59:20" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:13">

            <expr_stmt pos:start="61:13" pos:end="61:46"><expr pos:start="61:13" pos:end="61:45"><name pos:start="61:13" pos:end="61:14">rl</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <operator pos:start="61:18" pos:end="61:18">&amp;</operator><name pos:start="61:19" pos:end="61:45"><name pos:start="61:19" pos:end="61:26">rl_table</name><index pos:start="61:27" pos:end="61:45">[<expr pos:start="61:28" pos:end="61:44"><name pos:start="61:28" pos:end="61:44"><name pos:start="61:28" pos:end="61:28">s</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:44">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if<condition pos:start="63:15" pos:end="63:41">(<expr pos:start="63:16" pos:end="63:40"><name pos:start="63:16" pos:end="63:20">level</name> <operator pos:start="63:22" pos:end="63:22">&gt;</operator> <literal type="number" pos:start="63:24" pos:end="63:26">256</literal><operator pos:start="63:27" pos:end="63:27">*</operator><name pos:start="63:28" pos:end="63:40"><name pos:start="63:28" pos:end="63:28">s</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:40">y_dc_scale</name></name></expr>)</condition><block pos:start="63:42" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:51">

                <expr_stmt pos:start="65:17" pos:end="65:76"><expr pos:start="65:17" pos:end="65:75"><call pos:start="65:17" pos:end="65:75"><name pos:start="65:17" pos:end="65:23">fprintf</name><argument_list pos:start="65:24" pos:end="65:75">(<argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:30">stderr</name></expr></argument>, <argument pos:start="65:33" pos:end="65:63"><expr pos:start="65:33" pos:end="65:63"><literal type="string" pos:start="65:33" pos:end="65:63">"dc overflow+ L qscale: %d//\n"</literal></expr></argument>, <argument pos:start="65:66" pos:end="65:74"><expr pos:start="65:66" pos:end="65:74"><name pos:start="65:66" pos:end="65:74"><name pos:start="65:66" pos:end="65:66">s</name><operator pos:start="65:67" pos:end="65:68">-&gt;</operator><name pos:start="65:69" pos:end="65:74">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="67:51"><if pos:start="67:17" pos:end="67:51">if<condition pos:start="67:19" pos:end="67:40">(<expr pos:start="67:20" pos:end="67:39"><operator pos:start="67:20" pos:end="67:20">!</operator><name pos:start="67:21" pos:end="67:39"><name pos:start="67:21" pos:end="67:21">s</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="67:42" pos:end="67:51"><block_content pos:start="67:42" pos:end="67:51"> <return pos:start="67:42" pos:end="67:51">return <expr pos:start="67:49" pos:end="67:50"><operator pos:start="67:49" pos:end="67:49">-</operator><literal type="number" pos:start="67:50" pos:end="67:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="83:9">else <block pos:start="71:16" pos:end="83:9">{<block_content pos:start="73:13" pos:end="81:13">

            <expr_stmt pos:start="73:13" pos:end="73:57"><expr pos:start="73:13" pos:end="73:56"><name pos:start="73:13" pos:end="73:14">rl</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <operator pos:start="73:18" pos:end="73:18">&amp;</operator><name pos:start="73:19" pos:end="73:56"><name pos:start="73:19" pos:end="73:26">rl_table</name><index pos:start="73:27" pos:end="73:56">[<expr pos:start="73:28" pos:end="73:55"><literal type="number" pos:start="73:28" pos:end="73:30">3</literal> <operator pos:start="73:30" pos:end="73:30">+</operator> <name pos:start="73:32" pos:end="73:55"><name pos:start="73:32" pos:end="73:32">s</name><operator pos:start="73:33" pos:end="73:34">-&gt;</operator><name pos:start="73:35" pos:end="73:55">rl_chroma_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="81:13"><if pos:start="75:13" pos:end="81:13">if<condition pos:start="75:15" pos:end="75:41">(<expr pos:start="75:16" pos:end="75:40"><name pos:start="75:16" pos:end="75:20">level</name> <operator pos:start="75:22" pos:end="75:22">&gt;</operator> <literal type="number" pos:start="75:24" pos:end="75:26">256</literal><operator pos:start="75:27" pos:end="75:27">*</operator><name pos:start="75:28" pos:end="75:40"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:40">c_dc_scale</name></name></expr>)</condition><block pos:start="75:42" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:51">

                <expr_stmt pos:start="77:17" pos:end="77:76"><expr pos:start="77:17" pos:end="77:75"><call pos:start="77:17" pos:end="77:75"><name pos:start="77:17" pos:end="77:23">fprintf</name><argument_list pos:start="77:24" pos:end="77:75">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30">stderr</name></expr></argument>, <argument pos:start="77:33" pos:end="77:63"><expr pos:start="77:33" pos:end="77:63"><literal type="string" pos:start="77:33" pos:end="77:63">"dc overflow+ C qscale: %d//\n"</literal></expr></argument>, <argument pos:start="77:66" pos:end="77:74"><expr pos:start="77:66" pos:end="77:74"><name pos:start="77:66" pos:end="77:74"><name pos:start="77:66" pos:end="77:66">s</name><operator pos:start="77:67" pos:end="77:68">-&gt;</operator><name pos:start="77:69" pos:end="77:74">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="79:51"><if pos:start="79:17" pos:end="79:51">if<condition pos:start="79:19" pos:end="79:40">(<expr pos:start="79:20" pos:end="79:39"><operator pos:start="79:20" pos:end="79:20">!</operator><name pos:start="79:21" pos:end="79:39"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:39">inter_intra_pred</name></name></expr>)</condition><block type="pseudo" pos:start="79:42" pos:end="79:51"><block_content pos:start="79:42" pos:end="79:51"> <return pos:start="79:42" pos:end="79:51">return <expr pos:start="79:49" pos:end="79:50"><operator pos:start="79:49" pos:end="79:49">-</operator><literal type="number" pos:start="79:50" pos:end="79:50">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:25"><expr pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:16"><name pos:start="85:9" pos:end="85:13">block</name><index pos:start="85:14" pos:end="85:16">[<expr pos:start="85:15" pos:end="85:15"><literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>]</index></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:24">level</name></expr>;</expr_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:21"><expr pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:16">run_diff</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:14"><expr pos:start="91:9" pos:end="91:13"><name pos:start="91:9" pos:end="91:9">i</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <literal type="number" pos:start="91:13" pos:end="91:13">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:19">(<expr pos:start="93:13" pos:end="93:18"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:18">coded</name></expr>)</condition> <block pos:start="93:21" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:27">

            <goto pos:start="95:13" pos:end="95:27">goto <name pos:start="95:18" pos:end="95:26">not_coded</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="113:9"><if pos:start="99:9" pos:end="109:9">if <condition pos:start="99:12" pos:end="99:23">(<expr pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:22"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:22">ac_pred</name></name></expr>)</condition> <block pos:start="99:25" pos:end="109:9">{<block_content pos:start="101:13" pos:end="107:61">

            <if_stmt pos:start="101:13" pos:end="107:61"><if pos:start="101:13" pos:end="103:61">if <condition pos:start="101:16" pos:end="101:33">(<expr pos:start="101:17" pos:end="101:32"><name pos:start="101:17" pos:end="101:27">dc_pred_dir</name> <operator pos:start="101:29" pos:end="101:30">==</operator> <literal type="number" pos:start="101:32" pos:end="101:32">0</literal></expr>)</condition><block type="pseudo" pos:start="103:17" pos:end="103:61"><block_content pos:start="103:17" pos:end="103:61"> 

                <expr_stmt pos:start="103:17" pos:end="103:61"><expr pos:start="103:17" pos:end="103:60"><name pos:start="103:17" pos:end="103:26">scan_table</name> <operator pos:start="103:28" pos:end="103:28">=</operator> <name pos:start="103:30" pos:end="103:60"><name pos:start="103:30" pos:end="103:30">s</name><operator pos:start="103:31" pos:end="103:32">-&gt;</operator><name pos:start="103:33" pos:end="103:49">intra_v_scantable</name><operator pos:start="103:50" pos:end="103:50">.</operator><name pos:start="103:51" pos:end="103:60">permutated</name></name></expr>;</expr_stmt></block_content></block></if> <comment type="block" pos:start="103:63" pos:end="103:72">/* left */</comment>

            <else pos:start="105:13" pos:end="107:61">else<block type="pseudo" pos:start="107:17" pos:end="107:61"><block_content pos:start="107:17" pos:end="107:61">

                <expr_stmt pos:start="107:17" pos:end="107:61"><expr pos:start="107:17" pos:end="107:60"><name pos:start="107:17" pos:end="107:26">scan_table</name> <operator pos:start="107:28" pos:end="107:28">=</operator> <name pos:start="107:30" pos:end="107:60"><name pos:start="107:30" pos:end="107:30">s</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:49">intra_h_scantable</name><operator pos:start="107:50" pos:end="107:50">.</operator><name pos:start="107:51" pos:end="107:60">permutated</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="107:63" pos:end="107:71">/* top */</comment>

        </block_content>}</block></if> <else pos:start="109:11" pos:end="113:9">else <block pos:start="109:16" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:55">

            <expr_stmt pos:start="111:13" pos:end="111:55"><expr pos:start="111:13" pos:end="111:54"><name pos:start="111:13" pos:end="111:22">scan_table</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <name pos:start="111:26" pos:end="111:54"><name pos:start="111:26" pos:end="111:26">s</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:43">intra_scantable</name><operator pos:start="111:44" pos:end="111:44">.</operator><name pos:start="111:45" pos:end="111:54">permutated</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:30"><expr pos:start="115:9" pos:end="115:29"><call pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:16">set_stat</name><argument_list pos:start="115:17" pos:end="115:29">(<argument pos:start="115:18" pos:end="115:28"><expr pos:start="115:18" pos:end="115:28"><name pos:start="115:18" pos:end="115:28">ST_INTRA_AC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:30"><expr pos:start="117:9" pos:end="117:29"><name pos:start="117:9" pos:end="117:14">rl_vlc</name><operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:29"><name pos:start="117:17" pos:end="117:18">rl</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:26">rl_vlc</name><index pos:start="117:27" pos:end="117:29">[<expr pos:start="117:28" pos:end="117:28"><literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="157:5">else <block pos:start="119:12" pos:end="157:5">{<block_content pos:start="121:9" pos:end="155:38">

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:12">qmul</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <name pos:start="121:16" pos:end="121:24"><name pos:start="121:16" pos:end="121:16">s</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:24">qscale</name></name> <operator pos:start="121:26" pos:end="121:27">&lt;&lt;</operator> <literal type="number" pos:start="121:29" pos:end="121:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:35"><expr pos:start="123:9" pos:end="123:34"><name pos:start="123:9" pos:end="123:12">qadd</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:25">qscale</name></name> <operator pos:start="123:27" pos:end="123:27">-</operator> <literal type="number" pos:start="123:29" pos:end="123:29">1</literal><operator pos:start="123:30" pos:end="123:30">)</operator> <operator pos:start="123:32" pos:end="123:32">|</operator> <literal type="number" pos:start="123:34" pos:end="123:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:15"><expr pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:9">i</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <operator pos:start="125:13" pos:end="125:13">-</operator><literal type="number" pos:start="125:14" pos:end="125:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:10">rl</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <operator pos:start="127:14" pos:end="127:14">&amp;</operator><name pos:start="127:15" pos:end="127:45"><name pos:start="127:15" pos:end="127:22">rl_table</name><index pos:start="127:23" pos:end="127:45">[<expr pos:start="127:24" pos:end="127:44"><literal type="number" pos:start="127:24" pos:end="127:26">3</literal> <operator pos:start="127:26" pos:end="127:26">+</operator> <name pos:start="127:28" pos:end="127:44"><name pos:start="127:28" pos:end="127:28">s</name><operator pos:start="127:29" pos:end="127:30">-&gt;</operator><name pos:start="127:31" pos:end="127:44">rl_table_index</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="131:9" pos:end="137:25"><if pos:start="131:9" pos:end="133:25">if<condition pos:start="131:11" pos:end="131:33">(<expr pos:start="131:12" pos:end="131:32"><name pos:start="131:12" pos:end="131:29"><name pos:start="131:12" pos:end="131:12">s</name><operator pos:start="131:13" pos:end="131:14">-&gt;</operator><name pos:start="131:15" pos:end="131:29">msmpeg4_version</name></name><operator pos:start="131:30" pos:end="131:31">==</operator><literal type="number" pos:start="131:32" pos:end="131:32">2</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:25"><block_content pos:start="133:13" pos:end="133:25">

            <expr_stmt pos:start="133:13" pos:end="133:25"><expr pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:20">run_diff</name> <operator pos:start="133:22" pos:end="133:22">=</operator> <literal type="number" pos:start="133:24" pos:end="133:24">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="135:9" pos:end="137:25">else<block type="pseudo" pos:start="137:13" pos:end="137:25"><block_content pos:start="137:13" pos:end="137:25">

            <expr_stmt pos:start="137:13" pos:end="137:25"><expr pos:start="137:13" pos:end="137:24"><name pos:start="137:13" pos:end="137:20">run_diff</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <literal type="number" pos:start="137:24" pos:end="137:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="141:9" pos:end="147:9"><if pos:start="141:9" pos:end="147:9">if <condition pos:start="141:12" pos:end="141:19">(<expr pos:start="141:13" pos:end="141:18"><operator pos:start="141:13" pos:end="141:13">!</operator><name pos:start="141:14" pos:end="141:18">coded</name></expr>)</condition> <block pos:start="141:21" pos:end="147:9">{<block_content pos:start="143:13" pos:end="145:21">

            <expr_stmt pos:start="143:13" pos:end="143:39"><expr pos:start="143:13" pos:end="143:38"><name pos:start="143:13" pos:end="143:34"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:31">block_last_index</name><index pos:start="143:32" pos:end="143:34">[<expr pos:start="143:33" pos:end="143:33"><name pos:start="143:33" pos:end="143:33">n</name></expr>]</index></name> <operator pos:start="143:36" pos:end="143:36">=</operator> <name pos:start="143:38" pos:end="143:38">i</name></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:21">return <expr pos:start="145:20" pos:end="145:20"><literal type="number" pos:start="145:20" pos:end="145:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="149:9" pos:end="151:55"><if pos:start="149:9" pos:end="151:55">if<condition pos:start="149:11" pos:end="149:23">(<expr pos:start="149:12" pos:end="149:22"><operator pos:start="149:12" pos:end="149:12">!</operator><name pos:start="149:13" pos:end="149:22">scan_table</name></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:55"><block_content pos:start="151:13" pos:end="151:55">

            <expr_stmt pos:start="151:13" pos:end="151:55"><expr pos:start="151:13" pos:end="151:54"><name pos:start="151:13" pos:end="151:22">scan_table</name> <operator pos:start="151:24" pos:end="151:24">=</operator> <name pos:start="151:26" pos:end="151:54"><name pos:start="151:26" pos:end="151:26">s</name><operator pos:start="151:27" pos:end="151:28">-&gt;</operator><name pos:start="151:29" pos:end="151:43">inter_scantable</name><operator pos:start="151:44" pos:end="151:44">.</operator><name pos:start="151:45" pos:end="151:54">permutated</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:16">set_stat</name><argument_list pos:start="153:17" pos:end="153:29">(<argument pos:start="153:18" pos:end="153:28"><expr pos:start="153:18" pos:end="153:28"><name pos:start="153:18" pos:end="153:28">ST_INTER_AC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:38"><expr pos:start="155:9" pos:end="155:37"><name pos:start="155:9" pos:end="155:14">rl_vlc</name><operator pos:start="155:15" pos:end="155:15">=</operator> <name pos:start="155:17" pos:end="155:37"><name pos:start="155:17" pos:end="155:18">rl</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:26">rl_vlc</name><index pos:start="155:27" pos:end="155:37">[<expr pos:start="155:28" pos:end="155:36"><name pos:start="155:28" pos:end="155:36"><name pos:start="155:28" pos:end="155:28">s</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:36">qscale</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

  <block pos:start="159:3" pos:end="487:3">{<block_content pos:start="161:5" pos:end="485:29">

    <expr_stmt pos:start="161:5" pos:end="161:28"><expr pos:start="161:5" pos:end="161:27"><call pos:start="161:5" pos:end="161:27"><name pos:start="161:5" pos:end="161:15">OPEN_READER</name><argument_list pos:start="161:16" pos:end="161:27">(<argument pos:start="161:17" pos:end="161:18"><expr pos:start="161:17" pos:end="161:18"><name pos:start="161:17" pos:end="161:18">re</name></expr></argument>, <argument pos:start="161:21" pos:end="161:26"><expr pos:start="161:21" pos:end="161:26"><operator pos:start="161:21" pos:end="161:21">&amp;</operator><name pos:start="161:22" pos:end="161:26"><name pos:start="161:22" pos:end="161:22">s</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="163:5" pos:end="483:5">for<control pos:start="163:8" pos:end="163:11">(<init pos:start="163:9" pos:end="163:9">;</init><condition pos:start="163:10" pos:end="163:10">;</condition><incr/>)</control> <block pos:start="163:13" pos:end="483:5">{<block_content pos:start="165:9" pos:end="481:37">

        <expr_stmt pos:start="165:9" pos:end="165:33"><expr pos:start="165:9" pos:end="165:32"><call pos:start="165:9" pos:end="165:32"><name pos:start="165:9" pos:end="165:20">UPDATE_CACHE</name><argument_list pos:start="165:21" pos:end="165:32">(<argument pos:start="165:22" pos:end="165:23"><expr pos:start="165:22" pos:end="165:23"><name pos:start="165:22" pos:end="165:23">re</name></expr></argument>, <argument pos:start="165:26" pos:end="165:31"><expr pos:start="165:26" pos:end="165:31"><operator pos:start="165:26" pos:end="165:26">&amp;</operator><name pos:start="165:27" pos:end="165:31"><name pos:start="165:27" pos:end="165:27">s</name><operator pos:start="165:28" pos:end="165:29">-&gt;</operator><name pos:start="165:30" pos:end="165:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:68"><expr pos:start="167:9" pos:end="167:67"><call pos:start="167:9" pos:end="167:67"><name pos:start="167:9" pos:end="167:18">GET_RL_VLC</name><argument_list pos:start="167:19" pos:end="167:67">(<argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><name pos:start="167:20" pos:end="167:24">level</name></expr></argument>, <argument pos:start="167:27" pos:end="167:29"><expr pos:start="167:27" pos:end="167:29"><name pos:start="167:27" pos:end="167:29">run</name></expr></argument>, <argument pos:start="167:32" pos:end="167:33"><expr pos:start="167:32" pos:end="167:33"><name pos:start="167:32" pos:end="167:33">re</name></expr></argument>, <argument pos:start="167:36" pos:end="167:41"><expr pos:start="167:36" pos:end="167:41"><operator pos:start="167:36" pos:end="167:36">&amp;</operator><name pos:start="167:37" pos:end="167:41"><name pos:start="167:37" pos:end="167:37">s</name><operator pos:start="167:38" pos:end="167:39">-&gt;</operator><name pos:start="167:40" pos:end="167:41">gb</name></name></expr></argument>, <argument pos:start="167:44" pos:end="167:49"><expr pos:start="167:44" pos:end="167:49"><name pos:start="167:44" pos:end="167:49">rl_vlc</name></expr></argument>, <argument pos:start="167:52" pos:end="167:63"><expr pos:start="167:52" pos:end="167:63"><name pos:start="167:52" pos:end="167:63">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="167:66" pos:end="167:66"><expr pos:start="167:66" pos:end="167:66"><literal type="number" pos:start="167:66" pos:end="167:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="445:9"><if pos:start="169:9" pos:end="425:9">if <condition pos:start="169:12" pos:end="169:21">(<expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:17">level</name><operator pos:start="169:18" pos:end="169:19">==</operator><literal type="number" pos:start="169:20" pos:end="169:20">0</literal></expr>)</condition> <block pos:start="169:23" pos:end="425:9">{<block_content pos:start="171:13" pos:end="423:13">

            <decl_stmt pos:start="171:13" pos:end="171:22"><decl pos:start="171:13" pos:end="171:21"><type pos:start="171:13" pos:end="171:15"><name pos:start="171:13" pos:end="171:15">int</name></type> <name pos:start="171:17" pos:end="171:21">cache</name></decl>;</decl_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:41"><expr pos:start="173:13" pos:end="173:40"><name pos:start="173:13" pos:end="173:17">cache</name><operator pos:start="173:18" pos:end="173:18">=</operator> <call pos:start="173:20" pos:end="173:40"><name pos:start="173:20" pos:end="173:28">GET_CACHE</name><argument_list pos:start="173:29" pos:end="173:40">(<argument pos:start="173:30" pos:end="173:31"><expr pos:start="173:30" pos:end="173:31"><name pos:start="173:30" pos:end="173:31">re</name></expr></argument>, <argument pos:start="173:34" pos:end="173:39"><expr pos:start="173:34" pos:end="173:39"><operator pos:start="173:34" pos:end="173:34">&amp;</operator><name pos:start="173:35" pos:end="173:39"><name pos:start="173:35" pos:end="173:35">s</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="175:13" pos:end="175:24">/* escape */</comment>

            <if_stmt pos:start="177:13" pos:end="423:13"><if pos:start="177:13" pos:end="385:13">if <condition pos:start="177:16" pos:end="177:63">(<expr pos:start="177:17" pos:end="177:62"><name pos:start="177:17" pos:end="177:34"><name pos:start="177:17" pos:end="177:17">s</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:34">msmpeg4_version</name></name><operator pos:start="177:35" pos:end="177:36">==</operator><literal type="number" pos:start="177:37" pos:end="177:37">1</literal> <operator pos:start="177:39" pos:end="177:40">||</operator> <operator pos:start="177:42" pos:end="177:42">(</operator><name pos:start="177:43" pos:end="177:47">cache</name><operator pos:start="177:48" pos:end="177:48">&amp;</operator><literal type="number" pos:start="177:49" pos:end="177:58">0x80000000</literal><operator pos:start="177:59" pos:end="177:59">)</operator><operator pos:start="177:60" pos:end="177:61">==</operator><literal type="number" pos:start="177:62" pos:end="177:62">0</literal></expr>)</condition> <block pos:start="177:65" pos:end="385:13">{<block_content pos:start="179:17" pos:end="383:17">

                <if_stmt pos:start="179:17" pos:end="383:17"><if pos:start="179:17" pos:end="347:17">if <condition pos:start="179:20" pos:end="179:67">(<expr pos:start="179:21" pos:end="179:66"><name pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:21">s</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:38">msmpeg4_version</name></name><operator pos:start="179:39" pos:end="179:40">==</operator><literal type="number" pos:start="179:41" pos:end="179:41">1</literal> <operator pos:start="179:43" pos:end="179:44">||</operator> <operator pos:start="179:46" pos:end="179:46">(</operator><name pos:start="179:47" pos:end="179:51">cache</name><operator pos:start="179:52" pos:end="179:52">&amp;</operator><literal type="number" pos:start="179:53" pos:end="179:62">0x40000000</literal><operator pos:start="179:63" pos:end="179:63">)</operator><operator pos:start="179:64" pos:end="179:65">==</operator><literal type="number" pos:start="179:66" pos:end="179:66">0</literal></expr>)</condition> <block pos:start="179:69" pos:end="347:17">{<block_content pos:start="183:21" pos:end="346:0">

                    <comment type="block" pos:start="181:21" pos:end="181:38">/* third escape */</comment>

                    <if_stmt pos:start="183:21" pos:end="183:76"><if pos:start="183:21" pos:end="183:76">if<condition pos:start="183:23" pos:end="183:45">(<expr pos:start="183:24" pos:end="183:44"><name pos:start="183:24" pos:end="183:41"><name pos:start="183:24" pos:end="183:24">s</name><operator pos:start="183:25" pos:end="183:26">-&gt;</operator><name pos:start="183:27" pos:end="183:41">msmpeg4_version</name></name><operator pos:start="183:42" pos:end="183:43">!=</operator><literal type="number" pos:start="183:44" pos:end="183:44">1</literal></expr>)</condition><block type="pseudo" pos:start="183:47" pos:end="183:76"><block_content pos:start="183:47" pos:end="183:76"> <expr_stmt pos:start="183:47" pos:end="183:76"><expr pos:start="183:47" pos:end="183:75"><call pos:start="183:47" pos:end="183:75"><name pos:start="183:47" pos:end="183:60">LAST_SKIP_BITS</name><argument_list pos:start="183:61" pos:end="183:75">(<argument pos:start="183:62" pos:end="183:63"><expr pos:start="183:62" pos:end="183:63"><name pos:start="183:62" pos:end="183:63">re</name></expr></argument>, <argument pos:start="183:66" pos:end="183:71"><expr pos:start="183:66" pos:end="183:71"><operator pos:start="183:66" pos:end="183:66">&amp;</operator><name pos:start="183:67" pos:end="183:71"><name pos:start="183:67" pos:end="183:67">s</name><operator pos:start="183:68" pos:end="183:69">-&gt;</operator><name pos:start="183:70" pos:end="183:71">gb</name></name></expr></argument>, <argument pos:start="183:74" pos:end="183:74"><expr pos:start="183:74" pos:end="183:74"><literal type="number" pos:start="183:74" pos:end="183:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:45"><expr pos:start="185:21" pos:end="185:44"><call pos:start="185:21" pos:end="185:44"><name pos:start="185:21" pos:end="185:32">UPDATE_CACHE</name><argument_list pos:start="185:33" pos:end="185:44">(<argument pos:start="185:34" pos:end="185:35"><expr pos:start="185:34" pos:end="185:35"><name pos:start="185:34" pos:end="185:35">re</name></expr></argument>, <argument pos:start="185:38" pos:end="185:43"><expr pos:start="185:38" pos:end="185:43"><operator pos:start="185:38" pos:end="185:38">&amp;</operator><name pos:start="185:39" pos:end="185:43"><name pos:start="185:39" pos:end="185:39">s</name><operator pos:start="185:40" pos:end="185:41">-&gt;</operator><name pos:start="185:42" pos:end="185:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="187:21" pos:end="312:0"><if pos:start="187:21" pos:end="197:21">if<condition pos:start="187:23" pos:end="187:45">(<expr pos:start="187:24" pos:end="187:44"><name pos:start="187:24" pos:end="187:41"><name pos:start="187:24" pos:end="187:24">s</name><operator pos:start="187:25" pos:end="187:26">-&gt;</operator><name pos:start="187:27" pos:end="187:41">msmpeg4_version</name></name><operator pos:start="187:42" pos:end="187:43">&lt;=</operator><literal type="number" pos:start="187:44" pos:end="187:44">3</literal></expr>)</condition><block pos:start="187:46" pos:end="197:21">{<block_content pos:start="189:25" pos:end="195:56">

                        <expr_stmt pos:start="189:25" pos:end="189:57"><expr pos:start="189:25" pos:end="189:56"><name pos:start="189:25" pos:end="189:28">last</name><operator pos:start="189:29" pos:end="189:29">=</operator>  <call pos:start="189:32" pos:end="189:56"><name pos:start="189:32" pos:end="189:41">SHOW_UBITS</name><argument_list pos:start="189:42" pos:end="189:56">(<argument pos:start="189:43" pos:end="189:44"><expr pos:start="189:43" pos:end="189:44"><name pos:start="189:43" pos:end="189:44">re</name></expr></argument>, <argument pos:start="189:47" pos:end="189:52"><expr pos:start="189:47" pos:end="189:52"><operator pos:start="189:47" pos:end="189:47">&amp;</operator><name pos:start="189:48" pos:end="189:52"><name pos:start="189:48" pos:end="189:48">s</name><operator pos:start="189:49" pos:end="189:50">-&gt;</operator><name pos:start="189:51" pos:end="189:52">gb</name></name></expr></argument>, <argument pos:start="189:55" pos:end="189:55"><expr pos:start="189:55" pos:end="189:55"><literal type="number" pos:start="189:55" pos:end="189:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="189:59" pos:end="189:84"><expr pos:start="189:59" pos:end="189:83"><call pos:start="189:59" pos:end="189:83"><name pos:start="189:59" pos:end="189:68">SKIP_CACHE</name><argument_list pos:start="189:69" pos:end="189:83">(<argument pos:start="189:70" pos:end="189:71"><expr pos:start="189:70" pos:end="189:71"><name pos:start="189:70" pos:end="189:71">re</name></expr></argument>, <argument pos:start="189:74" pos:end="189:79"><expr pos:start="189:74" pos:end="189:79"><operator pos:start="189:74" pos:end="189:74">&amp;</operator><name pos:start="189:75" pos:end="189:79"><name pos:start="189:75" pos:end="189:75">s</name><operator pos:start="189:76" pos:end="189:77">-&gt;</operator><name pos:start="189:78" pos:end="189:79">gb</name></name></expr></argument>, <argument pos:start="189:82" pos:end="189:82"><expr pos:start="189:82" pos:end="189:82"><literal type="number" pos:start="189:82" pos:end="189:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="191:25" pos:end="191:57"><expr pos:start="191:25" pos:end="191:56"><name pos:start="191:25" pos:end="191:27">run</name><operator pos:start="191:28" pos:end="191:28">=</operator>   <call pos:start="191:32" pos:end="191:56"><name pos:start="191:32" pos:end="191:41">SHOW_UBITS</name><argument_list pos:start="191:42" pos:end="191:56">(<argument pos:start="191:43" pos:end="191:44"><expr pos:start="191:43" pos:end="191:44"><name pos:start="191:43" pos:end="191:44">re</name></expr></argument>, <argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><operator pos:start="191:47" pos:end="191:47">&amp;</operator><name pos:start="191:48" pos:end="191:52"><name pos:start="191:48" pos:end="191:48">s</name><operator pos:start="191:49" pos:end="191:50">-&gt;</operator><name pos:start="191:51" pos:end="191:52">gb</name></name></expr></argument>, <argument pos:start="191:55" pos:end="191:55"><expr pos:start="191:55" pos:end="191:55"><literal type="number" pos:start="191:55" pos:end="191:55">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="191:59" pos:end="191:84"><expr pos:start="191:59" pos:end="191:83"><call pos:start="191:59" pos:end="191:83"><name pos:start="191:59" pos:end="191:68">SKIP_CACHE</name><argument_list pos:start="191:69" pos:end="191:83">(<argument pos:start="191:70" pos:end="191:71"><expr pos:start="191:70" pos:end="191:71"><name pos:start="191:70" pos:end="191:71">re</name></expr></argument>, <argument pos:start="191:74" pos:end="191:79"><expr pos:start="191:74" pos:end="191:79"><operator pos:start="191:74" pos:end="191:74">&amp;</operator><name pos:start="191:75" pos:end="191:79"><name pos:start="191:75" pos:end="191:75">s</name><operator pos:start="191:76" pos:end="191:77">-&gt;</operator><name pos:start="191:78" pos:end="191:79">gb</name></name></expr></argument>, <argument pos:start="191:82" pos:end="191:82"><expr pos:start="191:82" pos:end="191:82"><literal type="number" pos:start="191:82" pos:end="191:82">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="193:25" pos:end="193:57"><expr pos:start="193:25" pos:end="193:56"><name pos:start="193:25" pos:end="193:29">level</name><operator pos:start="193:30" pos:end="193:30">=</operator> <call pos:start="193:32" pos:end="193:56"><name pos:start="193:32" pos:end="193:41">SHOW_SBITS</name><argument_list pos:start="193:42" pos:end="193:56">(<argument pos:start="193:43" pos:end="193:44"><expr pos:start="193:43" pos:end="193:44"><name pos:start="193:43" pos:end="193:44">re</name></expr></argument>, <argument pos:start="193:47" pos:end="193:52"><expr pos:start="193:47" pos:end="193:52"><operator pos:start="193:47" pos:end="193:47">&amp;</operator><name pos:start="193:48" pos:end="193:52"><name pos:start="193:48" pos:end="193:48">s</name><operator pos:start="193:49" pos:end="193:50">-&gt;</operator><name pos:start="193:51" pos:end="193:52">gb</name></name></expr></argument>, <argument pos:start="193:55" pos:end="193:55"><expr pos:start="193:55" pos:end="193:55"><literal type="number" pos:start="193:55" pos:end="193:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="193:59" pos:end="193:89"><expr pos:start="193:59" pos:end="193:88"><call pos:start="193:59" pos:end="193:88"><name pos:start="193:59" pos:end="193:73">LAST_SKIP_CACHE</name><argument_list pos:start="193:74" pos:end="193:88">(<argument pos:start="193:75" pos:end="193:76"><expr pos:start="193:75" pos:end="193:76"><name pos:start="193:75" pos:end="193:76">re</name></expr></argument>, <argument pos:start="193:79" pos:end="193:84"><expr pos:start="193:79" pos:end="193:84"><operator pos:start="193:79" pos:end="193:79">&amp;</operator><name pos:start="193:80" pos:end="193:84"><name pos:start="193:80" pos:end="193:80">s</name><operator pos:start="193:81" pos:end="193:82">-&gt;</operator><name pos:start="193:83" pos:end="193:84">gb</name></name></expr></argument>, <argument pos:start="193:87" pos:end="193:87"><expr pos:start="193:87" pos:end="193:87"><literal type="number" pos:start="193:87" pos:end="193:87">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="195:25" pos:end="195:56"><expr pos:start="195:25" pos:end="195:55"><call pos:start="195:25" pos:end="195:55"><name pos:start="195:25" pos:end="195:36">SKIP_COUNTER</name><argument_list pos:start="195:37" pos:end="195:55">(<argument pos:start="195:38" pos:end="195:39"><expr pos:start="195:38" pos:end="195:39"><name pos:start="195:38" pos:end="195:39">re</name></expr></argument>, <argument pos:start="195:42" pos:end="195:47"><expr pos:start="195:42" pos:end="195:47"><operator pos:start="195:42" pos:end="195:42">&amp;</operator><name pos:start="195:43" pos:end="195:47"><name pos:start="195:43" pos:end="195:43">s</name><operator pos:start="195:44" pos:end="195:45">-&gt;</operator><name pos:start="195:46" pos:end="195:47">gb</name></name></expr></argument>, <argument pos:start="195:50" pos:end="195:54"><expr pos:start="195:50" pos:end="195:54"><literal type="number" pos:start="195:50" pos:end="195:51">1</literal><operator pos:start="195:51" pos:end="195:51">+</operator><literal type="number" pos:start="195:52" pos:end="195:53">6</literal><operator pos:start="195:53" pos:end="195:53">+</operator><literal type="number" pos:start="195:54" pos:end="195:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if><else pos:start="197:22" pos:end="312:0">else<block pos:start="197:26" pos:end="312:0">{<block_content pos:start="199:25" pos:end="267:47">                        

                        <decl_stmt pos:start="199:25" pos:end="199:33"><decl pos:start="199:25" pos:end="199:32"><type pos:start="199:25" pos:end="199:27"><name pos:start="199:25" pos:end="199:27">int</name></type> <name pos:start="199:29" pos:end="199:32">sign</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="201:25" pos:end="201:57"><expr pos:start="201:25" pos:end="201:56"><name pos:start="201:25" pos:end="201:28">last</name><operator pos:start="201:29" pos:end="201:29">=</operator>  <call pos:start="201:32" pos:end="201:56"><name pos:start="201:32" pos:end="201:41">SHOW_UBITS</name><argument_list pos:start="201:42" pos:end="201:56">(<argument pos:start="201:43" pos:end="201:44"><expr pos:start="201:43" pos:end="201:44"><name pos:start="201:43" pos:end="201:44">re</name></expr></argument>, <argument pos:start="201:47" pos:end="201:52"><expr pos:start="201:47" pos:end="201:52"><operator pos:start="201:47" pos:end="201:47">&amp;</operator><name pos:start="201:48" pos:end="201:52"><name pos:start="201:48" pos:end="201:48">s</name><operator pos:start="201:49" pos:end="201:50">-&gt;</operator><name pos:start="201:51" pos:end="201:52">gb</name></name></expr></argument>, <argument pos:start="201:55" pos:end="201:55"><expr pos:start="201:55" pos:end="201:55"><literal type="number" pos:start="201:55" pos:end="201:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="201:59" pos:end="201:83"><expr pos:start="201:59" pos:end="201:82"><call pos:start="201:59" pos:end="201:82"><name pos:start="201:59" pos:end="201:67">SKIP_BITS</name><argument_list pos:start="201:68" pos:end="201:82">(<argument pos:start="201:69" pos:end="201:70"><expr pos:start="201:69" pos:end="201:70"><name pos:start="201:69" pos:end="201:70">re</name></expr></argument>, <argument pos:start="201:73" pos:end="201:78"><expr pos:start="201:73" pos:end="201:78"><operator pos:start="201:73" pos:end="201:73">&amp;</operator><name pos:start="201:74" pos:end="201:78"><name pos:start="201:74" pos:end="201:74">s</name><operator pos:start="201:75" pos:end="201:76">-&gt;</operator><name pos:start="201:77" pos:end="201:78">gb</name></name></expr></argument>, <argument pos:start="201:81" pos:end="201:81"><expr pos:start="201:81" pos:end="201:81"><literal type="number" pos:start="201:81" pos:end="201:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="203:25" pos:end="249:25"><if pos:start="203:25" pos:end="249:25">if<condition pos:start="203:27" pos:end="203:49">(<expr pos:start="203:28" pos:end="203:48"><operator pos:start="203:28" pos:end="203:28">!</operator><name pos:start="203:29" pos:end="203:48"><name pos:start="203:29" pos:end="203:29">s</name><operator pos:start="203:30" pos:end="203:31">-&gt;</operator><name pos:start="203:32" pos:end="203:48">esc3_level_length</name></name></expr>)</condition><block pos:start="203:50" pos:end="249:25">{<block_content pos:start="205:29" pos:end="247:53">

                            <decl_stmt pos:start="205:29" pos:end="205:35"><decl pos:start="205:29" pos:end="205:34"><type pos:start="205:29" pos:end="205:31"><name pos:start="205:29" pos:end="205:31">int</name></type> <name pos:start="205:33" pos:end="205:34">ll</name></decl>;</decl_stmt>

                            <comment type="line" pos:start="207:29" pos:end="207:101">//printf("ESC-3 %X at %d %d\n", show_bits(&amp;s-&gt;gb, 24), s-&gt;mb_x, s-&gt;mb_y);</comment>

                            <if_stmt pos:start="209:29" pos:end="237:29"><if pos:start="209:29" pos:end="223:29">if<condition pos:start="209:31" pos:end="209:43">(<expr pos:start="209:32" pos:end="209:42"><name pos:start="209:32" pos:end="209:40"><name pos:start="209:32" pos:end="209:32">s</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:40">qscale</name></name><operator pos:start="209:41" pos:end="209:41">&lt;</operator><literal type="number" pos:start="209:42" pos:end="209:42">8</literal></expr>)</condition><block pos:start="209:44" pos:end="223:29">{<block_content pos:start="211:33" pos:end="221:33">

                                <expr_stmt pos:start="211:33" pos:end="211:62"><expr pos:start="211:33" pos:end="211:61"><name pos:start="211:33" pos:end="211:34">ll</name><operator pos:start="211:35" pos:end="211:35">=</operator> <call pos:start="211:37" pos:end="211:61"><name pos:start="211:37" pos:end="211:46">SHOW_UBITS</name><argument_list pos:start="211:47" pos:end="211:61">(<argument pos:start="211:48" pos:end="211:49"><expr pos:start="211:48" pos:end="211:49"><name pos:start="211:48" pos:end="211:49">re</name></expr></argument>, <argument pos:start="211:52" pos:end="211:57"><expr pos:start="211:52" pos:end="211:57"><operator pos:start="211:52" pos:end="211:52">&amp;</operator><name pos:start="211:53" pos:end="211:57"><name pos:start="211:53" pos:end="211:53">s</name><operator pos:start="211:54" pos:end="211:55">-&gt;</operator><name pos:start="211:56" pos:end="211:57">gb</name></name></expr></argument>, <argument pos:start="211:60" pos:end="211:60"><expr pos:start="211:60" pos:end="211:60"><literal type="number" pos:start="211:60" pos:end="211:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="211:64" pos:end="211:88"><expr pos:start="211:64" pos:end="211:87"><call pos:start="211:64" pos:end="211:87"><name pos:start="211:64" pos:end="211:72">SKIP_BITS</name><argument_list pos:start="211:73" pos:end="211:87">(<argument pos:start="211:74" pos:end="211:75"><expr pos:start="211:74" pos:end="211:75"><name pos:start="211:74" pos:end="211:75">re</name></expr></argument>, <argument pos:start="211:78" pos:end="211:83"><expr pos:start="211:78" pos:end="211:83"><operator pos:start="211:78" pos:end="211:78">&amp;</operator><name pos:start="211:79" pos:end="211:83"><name pos:start="211:79" pos:end="211:79">s</name><operator pos:start="211:80" pos:end="211:81">-&gt;</operator><name pos:start="211:82" pos:end="211:83">gb</name></name></expr></argument>, <argument pos:start="211:86" pos:end="211:86"><expr pos:start="211:86" pos:end="211:86"><literal type="number" pos:start="211:86" pos:end="211:86">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <if_stmt pos:start="213:33" pos:end="221:33"><if pos:start="213:33" pos:end="221:33">if<condition pos:start="213:35" pos:end="213:41">(<expr pos:start="213:36" pos:end="213:40"><name pos:start="213:36" pos:end="213:37">ll</name><operator pos:start="213:38" pos:end="213:39">==</operator><literal type="number" pos:start="213:40" pos:end="213:40">0</literal></expr>)</condition><block pos:start="213:42" pos:end="221:33">{<block_content pos:start="215:37" pos:end="219:41">

                                    <if_stmt pos:start="215:37" pos:end="215:149"><if pos:start="215:37" pos:end="215:149">if<condition pos:start="215:39" pos:end="215:65">(<expr pos:start="215:40" pos:end="215:64"><call pos:start="215:40" pos:end="215:64"><name pos:start="215:40" pos:end="215:49">SHOW_UBITS</name><argument_list pos:start="215:50" pos:end="215:64">(<argument pos:start="215:51" pos:end="215:52"><expr pos:start="215:51" pos:end="215:52"><name pos:start="215:51" pos:end="215:52">re</name></expr></argument>, <argument pos:start="215:55" pos:end="215:60"><expr pos:start="215:55" pos:end="215:60"><operator pos:start="215:55" pos:end="215:55">&amp;</operator><name pos:start="215:56" pos:end="215:60"><name pos:start="215:56" pos:end="215:56">s</name><operator pos:start="215:57" pos:end="215:58">-&gt;</operator><name pos:start="215:59" pos:end="215:60">gb</name></name></expr></argument>, <argument pos:start="215:63" pos:end="215:63"><expr pos:start="215:63" pos:end="215:63"><literal type="number" pos:start="215:63" pos:end="215:63">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="215:67" pos:end="215:149"><block_content pos:start="215:67" pos:end="215:149"> <expr_stmt pos:start="215:67" pos:end="215:149"><expr pos:start="215:67" pos:end="215:148"><call pos:start="215:67" pos:end="215:148"><name pos:start="215:67" pos:end="215:72">printf</name><argument_list pos:start="215:73" pos:end="215:148">(<argument pos:start="215:74" pos:end="215:147"><expr pos:start="215:74" pos:end="215:147"><literal type="string" pos:start="215:74" pos:end="215:147">"cool a new vlc code ,contact the ffmpeg developers and upload the file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                    <expr_stmt pos:start="217:37" pos:end="217:61"><expr pos:start="217:37" pos:end="217:60"><call pos:start="217:37" pos:end="217:60"><name pos:start="217:37" pos:end="217:45">SKIP_BITS</name><argument_list pos:start="217:46" pos:end="217:60">(<argument pos:start="217:47" pos:end="217:48"><expr pos:start="217:47" pos:end="217:48"><name pos:start="217:47" pos:end="217:48">re</name></expr></argument>, <argument pos:start="217:51" pos:end="217:56"><expr pos:start="217:51" pos:end="217:56"><operator pos:start="217:51" pos:end="217:51">&amp;</operator><name pos:start="217:52" pos:end="217:56"><name pos:start="217:52" pos:end="217:52">s</name><operator pos:start="217:53" pos:end="217:54">-&gt;</operator><name pos:start="217:55" pos:end="217:56">gb</name></name></expr></argument>, <argument pos:start="217:59" pos:end="217:59"><expr pos:start="217:59" pos:end="217:59"><literal type="number" pos:start="217:59" pos:end="217:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="219:37" pos:end="219:41"><expr pos:start="219:37" pos:end="219:40"><name pos:start="219:37" pos:end="219:38">ll</name><operator pos:start="219:39" pos:end="219:39">=</operator><literal type="number" pos:start="219:40" pos:end="219:40">8</literal></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if><else pos:start="223:30" pos:end="237:29">else<block pos:start="223:34" pos:end="237:29">{<block_content pos:start="225:33" pos:end="235:66">

                                <expr_stmt pos:start="225:33" pos:end="225:37"><expr pos:start="225:33" pos:end="225:36"><name pos:start="225:33" pos:end="225:34">ll</name><operator pos:start="225:35" pos:end="225:35">=</operator><literal type="number" pos:start="225:36" pos:end="225:36">2</literal></expr>;</expr_stmt>

                                <while pos:start="227:33" pos:end="233:33">while<condition pos:start="227:38" pos:end="227:75">(<expr pos:start="227:39" pos:end="227:74"><name pos:start="227:39" pos:end="227:40">ll</name><operator pos:start="227:41" pos:end="227:41">&lt;</operator><literal type="number" pos:start="227:42" pos:end="227:42">8</literal> <operator pos:start="227:44" pos:end="227:45">&amp;&amp;</operator> <call pos:start="227:47" pos:end="227:71"><name pos:start="227:47" pos:end="227:56">SHOW_UBITS</name><argument_list pos:start="227:57" pos:end="227:71">(<argument pos:start="227:58" pos:end="227:59"><expr pos:start="227:58" pos:end="227:59"><name pos:start="227:58" pos:end="227:59">re</name></expr></argument>, <argument pos:start="227:62" pos:end="227:67"><expr pos:start="227:62" pos:end="227:67"><operator pos:start="227:62" pos:end="227:62">&amp;</operator><name pos:start="227:63" pos:end="227:67"><name pos:start="227:63" pos:end="227:63">s</name><operator pos:start="227:64" pos:end="227:65">-&gt;</operator><name pos:start="227:66" pos:end="227:67">gb</name></name></expr></argument>, <argument pos:start="227:70" pos:end="227:70"><expr pos:start="227:70" pos:end="227:70"><literal type="number" pos:start="227:70" pos:end="227:70">1</literal></expr></argument>)</argument_list></call><operator pos:start="227:72" pos:end="227:73">==</operator><literal type="number" pos:start="227:74" pos:end="227:74">0</literal></expr>)</condition><block pos:start="227:76" pos:end="233:33">{<block_content pos:start="229:37" pos:end="231:61">

                                    <expr_stmt pos:start="229:37" pos:end="229:41"><expr pos:start="229:37" pos:end="229:40"><name pos:start="229:37" pos:end="229:38">ll</name><operator pos:start="229:39" pos:end="229:40">++</operator></expr>;</expr_stmt>

                                    <expr_stmt pos:start="231:37" pos:end="231:61"><expr pos:start="231:37" pos:end="231:60"><call pos:start="231:37" pos:end="231:60"><name pos:start="231:37" pos:end="231:45">SKIP_BITS</name><argument_list pos:start="231:46" pos:end="231:60">(<argument pos:start="231:47" pos:end="231:48"><expr pos:start="231:47" pos:end="231:48"><name pos:start="231:47" pos:end="231:48">re</name></expr></argument>, <argument pos:start="231:51" pos:end="231:56"><expr pos:start="231:51" pos:end="231:56"><operator pos:start="231:51" pos:end="231:51">&amp;</operator><name pos:start="231:52" pos:end="231:56"><name pos:start="231:52" pos:end="231:52">s</name><operator pos:start="231:53" pos:end="231:54">-&gt;</operator><name pos:start="231:55" pos:end="231:56">gb</name></name></expr></argument>, <argument pos:start="231:59" pos:end="231:59"><expr pos:start="231:59" pos:end="231:59"><literal type="number" pos:start="231:59" pos:end="231:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                </block_content>}</block></while>

                                <if_stmt pos:start="235:33" pos:end="235:66"><if pos:start="235:33" pos:end="235:66">if<condition pos:start="235:35" pos:end="235:40">(<expr pos:start="235:36" pos:end="235:39"><name pos:start="235:36" pos:end="235:37">ll</name><operator pos:start="235:38" pos:end="235:38">&lt;</operator><literal type="number" pos:start="235:39" pos:end="235:39">8</literal></expr>)</condition><block type="pseudo" pos:start="235:42" pos:end="235:66"><block_content pos:start="235:42" pos:end="235:66"> <expr_stmt pos:start="235:42" pos:end="235:66"><expr pos:start="235:42" pos:end="235:65"><call pos:start="235:42" pos:end="235:65"><name pos:start="235:42" pos:end="235:50">SKIP_BITS</name><argument_list pos:start="235:51" pos:end="235:65">(<argument pos:start="235:52" pos:end="235:53"><expr pos:start="235:52" pos:end="235:53"><name pos:start="235:52" pos:end="235:53">re</name></expr></argument>, <argument pos:start="235:56" pos:end="235:61"><expr pos:start="235:56" pos:end="235:61"><operator pos:start="235:56" pos:end="235:56">&amp;</operator><name pos:start="235:57" pos:end="235:61"><name pos:start="235:57" pos:end="235:57">s</name><operator pos:start="235:58" pos:end="235:59">-&gt;</operator><name pos:start="235:60" pos:end="235:61">gb</name></name></expr></argument>, <argument pos:start="235:64" pos:end="235:64"><expr pos:start="235:64" pos:end="235:64"><literal type="number" pos:start="235:64" pos:end="235:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            </block_content>}</block></else></if_stmt>



                            <expr_stmt pos:start="241:29" pos:end="241:53"><expr pos:start="241:29" pos:end="241:52"><name pos:start="241:29" pos:end="241:48"><name pos:start="241:29" pos:end="241:29">s</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:48">esc3_level_length</name></name><operator pos:start="241:49" pos:end="241:49">=</operator> <name pos:start="241:51" pos:end="241:52">ll</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="243:29" pos:end="243:78"><expr pos:start="243:29" pos:end="243:77"><name pos:start="243:29" pos:end="243:46"><name pos:start="243:29" pos:end="243:29">s</name><operator pos:start="243:30" pos:end="243:31">-&gt;</operator><name pos:start="243:32" pos:end="243:46">esc3_run_length</name></name><operator pos:start="243:47" pos:end="243:47">=</operator> <call pos:start="243:49" pos:end="243:73"><name pos:start="243:49" pos:end="243:58">SHOW_UBITS</name><argument_list pos:start="243:59" pos:end="243:73">(<argument pos:start="243:60" pos:end="243:61"><expr pos:start="243:60" pos:end="243:61"><name pos:start="243:60" pos:end="243:61">re</name></expr></argument>, <argument pos:start="243:64" pos:end="243:69"><expr pos:start="243:64" pos:end="243:69"><operator pos:start="243:64" pos:end="243:64">&amp;</operator><name pos:start="243:65" pos:end="243:69"><name pos:start="243:65" pos:end="243:65">s</name><operator pos:start="243:66" pos:end="243:67">-&gt;</operator><name pos:start="243:68" pos:end="243:69">gb</name></name></expr></argument>, <argument pos:start="243:72" pos:end="243:72"><expr pos:start="243:72" pos:end="243:72"><literal type="number" pos:start="243:72" pos:end="243:72">2</literal></expr></argument>)</argument_list></call> <operator pos:start="243:75" pos:end="243:75">+</operator> <literal type="number" pos:start="243:77" pos:end="243:77">3</literal></expr>;</expr_stmt> <expr_stmt pos:start="243:80" pos:end="243:104"><expr pos:start="243:80" pos:end="243:103"><call pos:start="243:80" pos:end="243:103"><name pos:start="243:80" pos:end="243:88">SKIP_BITS</name><argument_list pos:start="243:89" pos:end="243:103">(<argument pos:start="243:90" pos:end="243:91"><expr pos:start="243:90" pos:end="243:91"><name pos:start="243:90" pos:end="243:91">re</name></expr></argument>, <argument pos:start="243:94" pos:end="243:99"><expr pos:start="243:94" pos:end="243:99"><operator pos:start="243:94" pos:end="243:94">&amp;</operator><name pos:start="243:95" pos:end="243:99"><name pos:start="243:95" pos:end="243:95">s</name><operator pos:start="243:96" pos:end="243:97">-&gt;</operator><name pos:start="243:98" pos:end="243:99">gb</name></name></expr></argument>, <argument pos:start="243:102" pos:end="243:102"><expr pos:start="243:102" pos:end="243:102"><literal type="number" pos:start="243:102" pos:end="243:102">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="245:1" pos:end="245:70">//printf("level length:%d, run length: %d\n", ll, s-&gt;esc3_run_length);</comment>

                            <expr_stmt pos:start="247:29" pos:end="247:53"><expr pos:start="247:29" pos:end="247:52"><call pos:start="247:29" pos:end="247:52"><name pos:start="247:29" pos:end="247:40">UPDATE_CACHE</name><argument_list pos:start="247:41" pos:end="247:52">(<argument pos:start="247:42" pos:end="247:43"><expr pos:start="247:42" pos:end="247:43"><name pos:start="247:42" pos:end="247:43">re</name></expr></argument>, <argument pos:start="247:46" pos:end="247:51"><expr pos:start="247:46" pos:end="247:51"><operator pos:start="247:46" pos:end="247:46">&amp;</operator><name pos:start="247:47" pos:end="247:51"><name pos:start="247:47" pos:end="247:47">s</name><operator pos:start="247:48" pos:end="247:49">-&gt;</operator><name pos:start="247:50" pos:end="247:51">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="251:25" pos:end="251:74"><expr pos:start="251:25" pos:end="251:73"><name pos:start="251:25" pos:end="251:27">run</name><operator pos:start="251:28" pos:end="251:28">=</operator>   <call pos:start="251:32" pos:end="251:73"><name pos:start="251:32" pos:end="251:41">SHOW_UBITS</name><argument_list pos:start="251:42" pos:end="251:73">(<argument pos:start="251:43" pos:end="251:44"><expr pos:start="251:43" pos:end="251:44"><name pos:start="251:43" pos:end="251:44">re</name></expr></argument>, <argument pos:start="251:47" pos:end="251:52"><expr pos:start="251:47" pos:end="251:52"><operator pos:start="251:47" pos:end="251:47">&amp;</operator><name pos:start="251:48" pos:end="251:52"><name pos:start="251:48" pos:end="251:48">s</name><operator pos:start="251:49" pos:end="251:50">-&gt;</operator><name pos:start="251:51" pos:end="251:52">gb</name></name></expr></argument>, <argument pos:start="251:55" pos:end="251:72"><expr pos:start="251:55" pos:end="251:72"><name pos:start="251:55" pos:end="251:72"><name pos:start="251:55" pos:end="251:55">s</name><operator pos:start="251:56" pos:end="251:57">-&gt;</operator><name pos:start="251:58" pos:end="251:72">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

                        <expr_stmt pos:start="253:25" pos:end="253:66"><expr pos:start="253:25" pos:end="253:65"><call pos:start="253:25" pos:end="253:65"><name pos:start="253:25" pos:end="253:33">SKIP_BITS</name><argument_list pos:start="253:34" pos:end="253:65">(<argument pos:start="253:35" pos:end="253:36"><expr pos:start="253:35" pos:end="253:36"><name pos:start="253:35" pos:end="253:36">re</name></expr></argument>, <argument pos:start="253:39" pos:end="253:44"><expr pos:start="253:39" pos:end="253:44"><operator pos:start="253:39" pos:end="253:39">&amp;</operator><name pos:start="253:40" pos:end="253:44"><name pos:start="253:40" pos:end="253:40">s</name><operator pos:start="253:41" pos:end="253:42">-&gt;</operator><name pos:start="253:43" pos:end="253:44">gb</name></name></expr></argument>, <argument pos:start="253:47" pos:end="253:64"><expr pos:start="253:47" pos:end="253:64"><name pos:start="253:47" pos:end="253:64"><name pos:start="253:47" pos:end="253:47">s</name><operator pos:start="253:48" pos:end="253:49">-&gt;</operator><name pos:start="253:50" pos:end="253:64">esc3_run_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        

                        <expr_stmt pos:start="257:25" pos:end="257:57"><expr pos:start="257:25" pos:end="257:56"><name pos:start="257:25" pos:end="257:28">sign</name><operator pos:start="257:29" pos:end="257:29">=</operator>  <call pos:start="257:32" pos:end="257:56"><name pos:start="257:32" pos:end="257:41">SHOW_UBITS</name><argument_list pos:start="257:42" pos:end="257:56">(<argument pos:start="257:43" pos:end="257:44"><expr pos:start="257:43" pos:end="257:44"><name pos:start="257:43" pos:end="257:44">re</name></expr></argument>, <argument pos:start="257:47" pos:end="257:52"><expr pos:start="257:47" pos:end="257:52"><operator pos:start="257:47" pos:end="257:47">&amp;</operator><name pos:start="257:48" pos:end="257:52"><name pos:start="257:48" pos:end="257:48">s</name><operator pos:start="257:49" pos:end="257:50">-&gt;</operator><name pos:start="257:51" pos:end="257:52">gb</name></name></expr></argument>, <argument pos:start="257:55" pos:end="257:55"><expr pos:start="257:55" pos:end="257:55"><literal type="number" pos:start="257:55" pos:end="257:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

                        <expr_stmt pos:start="259:25" pos:end="259:49"><expr pos:start="259:25" pos:end="259:48"><call pos:start="259:25" pos:end="259:48"><name pos:start="259:25" pos:end="259:33">SKIP_BITS</name><argument_list pos:start="259:34" pos:end="259:48">(<argument pos:start="259:35" pos:end="259:36"><expr pos:start="259:35" pos:end="259:36"><name pos:start="259:35" pos:end="259:36">re</name></expr></argument>, <argument pos:start="259:39" pos:end="259:44"><expr pos:start="259:39" pos:end="259:44"><operator pos:start="259:39" pos:end="259:39">&amp;</operator><name pos:start="259:40" pos:end="259:44"><name pos:start="259:40" pos:end="259:40">s</name><operator pos:start="259:41" pos:end="259:42">-&gt;</operator><name pos:start="259:43" pos:end="259:44">gb</name></name></expr></argument>, <argument pos:start="259:47" pos:end="259:47"><expr pos:start="259:47" pos:end="259:47"><literal type="number" pos:start="259:47" pos:end="259:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        

                        <expr_stmt pos:start="263:25" pos:end="263:76"><expr pos:start="263:25" pos:end="263:75"><name pos:start="263:25" pos:end="263:29">level</name><operator pos:start="263:30" pos:end="263:30">=</operator> <call pos:start="263:32" pos:end="263:75"><name pos:start="263:32" pos:end="263:41">SHOW_UBITS</name><argument_list pos:start="263:42" pos:end="263:75">(<argument pos:start="263:43" pos:end="263:44"><expr pos:start="263:43" pos:end="263:44"><name pos:start="263:43" pos:end="263:44">re</name></expr></argument>, <argument pos:start="263:47" pos:end="263:52"><expr pos:start="263:47" pos:end="263:52"><operator pos:start="263:47" pos:end="263:47">&amp;</operator><name pos:start="263:48" pos:end="263:52"><name pos:start="263:48" pos:end="263:48">s</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:52">gb</name></name></expr></argument>, <argument pos:start="263:55" pos:end="263:74"><expr pos:start="263:55" pos:end="263:74"><name pos:start="263:55" pos:end="263:74"><name pos:start="263:55" pos:end="263:55">s</name><operator pos:start="263:56" pos:end="263:57">-&gt;</operator><name pos:start="263:58" pos:end="263:74">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

                        <expr_stmt pos:start="265:25" pos:end="265:68"><expr pos:start="265:25" pos:end="265:67"><call pos:start="265:25" pos:end="265:67"><name pos:start="265:25" pos:end="265:33">SKIP_BITS</name><argument_list pos:start="265:34" pos:end="265:67">(<argument pos:start="265:35" pos:end="265:36"><expr pos:start="265:35" pos:end="265:36"><name pos:start="265:35" pos:end="265:36">re</name></expr></argument>, <argument pos:start="265:39" pos:end="265:44"><expr pos:start="265:39" pos:end="265:44"><operator pos:start="265:39" pos:end="265:39">&amp;</operator><name pos:start="265:40" pos:end="265:44"><name pos:start="265:40" pos:end="265:40">s</name><operator pos:start="265:41" pos:end="265:42">-&gt;</operator><name pos:start="265:43" pos:end="265:44">gb</name></name></expr></argument>, <argument pos:start="265:47" pos:end="265:66"><expr pos:start="265:47" pos:end="265:66"><name pos:start="265:47" pos:end="265:66"><name pos:start="265:47" pos:end="265:47">s</name><operator pos:start="265:48" pos:end="265:49">-&gt;</operator><name pos:start="265:50" pos:end="265:66">esc3_level_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="267:25" pos:end="267:47"><if pos:start="267:25" pos:end="267:47">if<condition pos:start="267:27" pos:end="267:32">(<expr pos:start="267:28" pos:end="267:31"><name pos:start="267:28" pos:end="267:31">sign</name></expr>)</condition><block type="pseudo" pos:start="267:34" pos:end="267:47"><block_content pos:start="267:34" pos:end="267:47"> <expr_stmt pos:start="267:34" pos:end="267:47"><expr pos:start="267:34" pos:end="267:46"><name pos:start="267:34" pos:end="267:38">level</name><operator pos:start="267:39" pos:end="267:39">=</operator> <operator pos:start="267:41" pos:end="267:41">-</operator><name pos:start="267:42" pos:end="267:46">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

<comment type="line" pos:start="271:1" pos:end="271:72">//printf("level: %d, run: %d at %d %d\n", level, run, s-&gt;mb_x, s-&gt;mb_y);</comment>

<cpp:if pos:start="273:1" pos:end="273:5">#<cpp:directive pos:start="273:2" pos:end="273:3">if</cpp:directive> <expr pos:start="273:5" pos:end="273:5"><literal type="number" pos:start="273:5" pos:end="273:5">0</literal></expr></cpp:if> <comment type="line" pos:start="273:7" pos:end="273:57">// waste of time / this will detect very few errors</comment>

                    {

                        const int abs_level= ABS(level);

                        const int run1= run - rl-&gt;max_run[last][abs_level] - run_diff;

                        if(abs_level&lt;=MAX_LEVEL &amp;&amp; run&lt;=MAX_RUN){

                            if(abs_level &lt;= rl-&gt;max_level[last][run]){

                                fprintf(stderr, "illegal 3. esc, vlc encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(abs_level &lt;= rl-&gt;max_level[last][run]*2){

                                fprintf(stderr, "illegal 3. esc, esc 1 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                            if(run1&gt;=0 &amp;&amp; abs_level &lt;= rl-&gt;max_level[last][run1]){

                                fprintf(stderr, "illegal 3. esc, esc 2 encoding possible\n");

                                return DECODING_AC_LOST;

                            }

                        }

                    }

<cpp:endif pos:start="311:1" pos:end="311:6">#<cpp:directive pos:start="311:2" pos:end="311:6">endif</cpp:directive></cpp:endif>

		    <comment type="line" pos:start="313:21" pos:end="313:83">//level = level * qmul + (level&gt;0) * qadd - (level&lt;=0) * qadd ;</comment>

		    <if_stmt pos:start="315:21" pos:end="330:0"><if pos:start="315:21" pos:end="315:60">if <condition pos:start="315:24" pos:end="315:32">(<expr pos:start="315:25" pos:end="315:31"><name pos:start="315:25" pos:end="315:29">level</name><operator pos:start="315:30" pos:end="315:30">&gt;</operator><literal type="number" pos:start="315:31" pos:end="315:31">0</literal></expr>)</condition><block type="pseudo" pos:start="315:34" pos:end="315:60"><block_content pos:start="315:34" pos:end="315:60"> <expr_stmt pos:start="315:34" pos:end="315:60"><expr pos:start="315:34" pos:end="315:59"><name pos:start="315:34" pos:end="315:38">level</name><operator pos:start="315:39" pos:end="315:39">=</operator> <name pos:start="315:41" pos:end="315:45">level</name> <operator pos:start="315:47" pos:end="315:47">*</operator> <name pos:start="315:49" pos:end="315:52">qmul</name> <operator pos:start="315:54" pos:end="315:54">+</operator> <name pos:start="315:56" pos:end="315:59">qadd</name></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="317:21" pos:end="330:0">else<block type="pseudo" pos:start="317:34" pos:end="330:0"><block_content pos:start="317:34" pos:end="330:0">         <expr_stmt pos:start="317:34" pos:end="330:0"><expr pos:start="317:34" pos:end="317:59"><name pos:start="317:34" pos:end="317:38">level</name><operator pos:start="317:39" pos:end="317:39">=</operator> <name pos:start="317:41" pos:end="317:45">level</name> <operator pos:start="317:47" pos:end="317:47">*</operator> <name pos:start="317:49" pos:end="317:52">qmul</name> <operator pos:start="317:54" pos:end="317:54">-</operator> <name pos:start="317:56" pos:end="317:59">qadd</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if pos:start="319:1" pos:end="319:5">#<cpp:directive pos:start="319:2" pos:end="319:3">if</cpp:directive> <expr pos:start="319:5" pos:end="319:5"><literal type="number" pos:start="319:5" pos:end="319:5">0</literal></expr></cpp:if> <comment type="line" pos:start="319:7" pos:end="319:29">// waste of time too :(</comment>

                    if(level&gt;2048 || level&lt;-2048){

                        fprintf(stderr, "|level| overflow in 3. esc\n");

                        return DECODING_AC_LOST;

                    }

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="331:21" pos:end="331:32"><expr pos:start="331:21" pos:end="331:31"><name pos:start="331:21" pos:end="331:21">i</name><operator pos:start="331:22" pos:end="331:23">+=</operator> <name pos:start="331:25" pos:end="331:27">run</name> <operator pos:start="331:29" pos:end="331:29">+</operator> <literal type="number" pos:start="331:31" pos:end="331:31">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="333:21" pos:end="336:0"><if pos:start="333:21" pos:end="336:0">if<condition pos:start="333:23" pos:end="333:28">(<expr pos:start="333:24" pos:end="333:27"><name pos:start="333:24" pos:end="333:27">last</name></expr>)</condition><block type="pseudo" pos:start="333:30" pos:end="336:0"><block_content pos:start="333:30" pos:end="336:0"> <expr_stmt pos:start="333:30" pos:end="336:0"><expr pos:start="333:30" pos:end="333:35"><name pos:start="333:30" pos:end="333:30">i</name><operator pos:start="333:31" pos:end="333:32">+=</operator><literal type="number" pos:start="333:33" pos:end="333:35">192</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="335:1" pos:end="335:20">#<cpp:directive pos:start="335:2" pos:end="335:6">ifdef</cpp:directive> <name pos:start="335:8" pos:end="335:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="337:17" pos:end="346:0"><if pos:start="337:17" pos:end="339:82">if<condition pos:start="337:19" pos:end="337:27">(<expr pos:start="337:20" pos:end="337:26"><name pos:start="337:20" pos:end="337:22">run</name><operator pos:start="337:23" pos:end="337:24">==</operator><literal type="number" pos:start="337:25" pos:end="337:26">66</literal></expr>)</condition><block type="pseudo" pos:start="339:21" pos:end="339:82"><block_content pos:start="339:21" pos:end="339:82">

                    <expr_stmt pos:start="339:21" pos:end="339:82"><expr pos:start="339:21" pos:end="339:81"><call pos:start="339:21" pos:end="339:81"><name pos:start="339:21" pos:end="339:27">fprintf</name><argument_list pos:start="339:28" pos:end="339:81">(<argument pos:start="339:29" pos:end="339:34"><expr pos:start="339:29" pos:end="339:34"><name pos:start="339:29" pos:end="339:34">stderr</name></expr></argument>, <argument pos:start="339:37" pos:end="339:73"><expr pos:start="339:37" pos:end="339:73"><literal type="string" pos:start="339:37" pos:end="339:73">"illegal vlc code in ESC3 level=%d\n"</literal></expr></argument>, <argument pos:start="339:76" pos:end="339:80"><expr pos:start="339:76" pos:end="339:80"><name pos:start="339:76" pos:end="339:80">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="341:17" pos:end="346:0">else if<condition pos:start="341:24" pos:end="341:52">(<expr pos:start="341:25" pos:end="341:51"><operator pos:start="341:25" pos:end="341:25">(</operator><name pos:start="341:26" pos:end="341:26">i</name><operator pos:start="341:27" pos:end="341:27">&gt;</operator><literal type="number" pos:start="341:28" pos:end="341:29">62</literal> <operator pos:start="341:31" pos:end="341:32">&amp;&amp;</operator> <name pos:start="341:34" pos:end="341:34">i</name><operator pos:start="341:35" pos:end="341:35">&lt;</operator><literal type="number" pos:start="341:36" pos:end="341:38">192</literal><operator pos:start="341:39" pos:end="341:39">)</operator> <operator pos:start="341:41" pos:end="341:42">||</operator> <name pos:start="341:44" pos:end="341:44">i</name><operator pos:start="341:45" pos:end="341:45">&gt;</operator><literal type="number" pos:start="341:46" pos:end="341:49">192</literal><operator pos:start="341:49" pos:end="341:49">+</operator><literal type="number" pos:start="341:50" pos:end="341:51">63</literal></expr>)</condition><block type="pseudo" pos:start="343:21" pos:end="346:0"><block_content pos:start="343:21" pos:end="346:0">

                    <expr_stmt pos:start="343:21" pos:end="346:0"><expr pos:start="343:21" pos:end="343:97"><call pos:start="343:21" pos:end="343:97"><name pos:start="343:21" pos:end="343:27">fprintf</name><argument_list pos:start="343:28" pos:end="343:97">(<argument pos:start="343:29" pos:end="343:34"><expr pos:start="343:29" pos:end="343:34"><name pos:start="343:29" pos:end="343:34">stderr</name></expr></argument>, <argument pos:start="343:37" pos:end="343:81"><expr pos:start="343:37" pos:end="343:81"><literal type="string" pos:start="343:37" pos:end="343:81">"run overflow in ESC3 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="343:84" pos:end="343:84"><expr pos:start="343:84" pos:end="343:84"><name pos:start="343:84" pos:end="343:84">i</name></expr></argument>, <argument pos:start="343:87" pos:end="343:89"><expr pos:start="343:87" pos:end="343:89"><name pos:start="343:87" pos:end="343:89">run</name></expr></argument>, <argument pos:start="343:92" pos:end="343:96"><expr pos:start="343:92" pos:end="343:96"><name pos:start="343:92" pos:end="343:96">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="345:1" pos:end="345:6">#<cpp:directive pos:start="345:2" pos:end="345:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if> <else pos:start="347:19" pos:end="383:17">else <block pos:start="347:24" pos:end="383:17">{<block_content pos:start="353:21" pos:end="382:0">

                    <comment type="block" pos:start="349:21" pos:end="349:39">/* second escape */</comment>

<cpp:if pos:start="351:1" pos:end="351:23">#<cpp:directive pos:start="351:2" pos:end="351:3">if</cpp:directive> <expr pos:start="351:5" pos:end="351:23"><name pos:start="351:5" pos:end="351:18">MIN_CACHE_BITS</name> <operator pos:start="351:20" pos:end="351:20">&lt;</operator> <literal type="number" pos:start="351:22" pos:end="351:23">23</literal></expr></cpp:if>

                    <expr_stmt pos:start="353:21" pos:end="353:50"><expr pos:start="353:21" pos:end="353:49"><call pos:start="353:21" pos:end="353:49"><name pos:start="353:21" pos:end="353:34">LAST_SKIP_BITS</name><argument_list pos:start="353:35" pos:end="353:49">(<argument pos:start="353:36" pos:end="353:37"><expr pos:start="353:36" pos:end="353:37"><name pos:start="353:36" pos:end="353:37">re</name></expr></argument>, <argument pos:start="353:40" pos:end="353:45"><expr pos:start="353:40" pos:end="353:45"><operator pos:start="353:40" pos:end="353:40">&amp;</operator><name pos:start="353:41" pos:end="353:45"><name pos:start="353:41" pos:end="353:41">s</name><operator pos:start="353:42" pos:end="353:43">-&gt;</operator><name pos:start="353:44" pos:end="353:45">gb</name></name></expr></argument>, <argument pos:start="353:48" pos:end="353:48"><expr pos:start="353:48" pos:end="353:48"><literal type="number" pos:start="353:48" pos:end="353:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="358:0"><expr pos:start="355:21" pos:end="355:44"><call pos:start="355:21" pos:end="355:44"><name pos:start="355:21" pos:end="355:32">UPDATE_CACHE</name><argument_list pos:start="355:33" pos:end="355:44">(<argument pos:start="355:34" pos:end="355:35"><expr pos:start="355:34" pos:end="355:35"><name pos:start="355:34" pos:end="355:35">re</name></expr></argument>, <argument pos:start="355:38" pos:end="355:43"><expr pos:start="355:38" pos:end="355:43"><operator pos:start="355:38" pos:end="355:38">&amp;</operator><name pos:start="355:39" pos:end="355:43"><name pos:start="355:39" pos:end="355:39">s</name><operator pos:start="355:40" pos:end="355:41">-&gt;</operator><name pos:start="355:42" pos:end="355:43">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="357:1" pos:end="357:5">#<cpp:directive pos:start="357:2" pos:end="357:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="359:21" pos:end="362:0"><expr pos:start="359:21" pos:end="359:44"><call pos:start="359:21" pos:end="359:44"><name pos:start="359:21" pos:end="359:29">SKIP_BITS</name><argument_list pos:start="359:30" pos:end="359:44">(<argument pos:start="359:31" pos:end="359:32"><expr pos:start="359:31" pos:end="359:32"><name pos:start="359:31" pos:end="359:32">re</name></expr></argument>, <argument pos:start="359:35" pos:end="359:40"><expr pos:start="359:35" pos:end="359:40"><operator pos:start="359:35" pos:end="359:35">&amp;</operator><name pos:start="359:36" pos:end="359:40"><name pos:start="359:36" pos:end="359:36">s</name><operator pos:start="359:37" pos:end="359:38">-&gt;</operator><name pos:start="359:39" pos:end="359:40">gb</name></name></expr></argument>, <argument pos:start="359:43" pos:end="359:43"><expr pos:start="359:43" pos:end="359:43"><literal type="number" pos:start="359:43" pos:end="359:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="361:1" pos:end="361:6">#<cpp:directive pos:start="361:2" pos:end="361:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="363:21" pos:end="363:80"><expr pos:start="363:21" pos:end="363:79"><call pos:start="363:21" pos:end="363:79"><name pos:start="363:21" pos:end="363:30">GET_RL_VLC</name><argument_list pos:start="363:31" pos:end="363:79">(<argument pos:start="363:32" pos:end="363:36"><expr pos:start="363:32" pos:end="363:36"><name pos:start="363:32" pos:end="363:36">level</name></expr></argument>, <argument pos:start="363:39" pos:end="363:41"><expr pos:start="363:39" pos:end="363:41"><name pos:start="363:39" pos:end="363:41">run</name></expr></argument>, <argument pos:start="363:44" pos:end="363:45"><expr pos:start="363:44" pos:end="363:45"><name pos:start="363:44" pos:end="363:45">re</name></expr></argument>, <argument pos:start="363:48" pos:end="363:53"><expr pos:start="363:48" pos:end="363:53"><operator pos:start="363:48" pos:end="363:48">&amp;</operator><name pos:start="363:49" pos:end="363:53"><name pos:start="363:49" pos:end="363:49">s</name><operator pos:start="363:50" pos:end="363:51">-&gt;</operator><name pos:start="363:52" pos:end="363:53">gb</name></name></expr></argument>, <argument pos:start="363:56" pos:end="363:61"><expr pos:start="363:56" pos:end="363:61"><name pos:start="363:56" pos:end="363:61">rl_vlc</name></expr></argument>, <argument pos:start="363:64" pos:end="363:75"><expr pos:start="363:64" pos:end="363:75"><name pos:start="363:64" pos:end="363:75">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="363:78" pos:end="363:78"><expr pos:start="363:78" pos:end="363:78"><literal type="number" pos:start="363:78" pos:end="363:78">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="365:21" pos:end="365:73"><expr pos:start="365:21" pos:end="365:72"><name pos:start="365:21" pos:end="365:21">i</name><operator pos:start="365:22" pos:end="365:23">+=</operator> <name pos:start="365:25" pos:end="365:27">run</name> <operator pos:start="365:29" pos:end="365:29">+</operator> <name pos:start="365:31" pos:end="365:61"><name pos:start="365:31" pos:end="365:32">rl</name><operator pos:start="365:33" pos:end="365:34">-&gt;</operator><name pos:start="365:35" pos:end="365:41">max_run</name><index pos:start="365:42" pos:end="365:49">[<expr pos:start="365:43" pos:end="365:48"><name pos:start="365:43" pos:end="365:45">run</name><operator pos:start="365:46" pos:end="365:47">&gt;&gt;</operator><literal type="number" pos:start="365:48" pos:end="365:48">7</literal></expr>]</index><index pos:start="365:50" pos:end="365:61">[<expr pos:start="365:51" pos:end="365:60"><name pos:start="365:51" pos:end="365:55">level</name><operator pos:start="365:56" pos:end="365:56">/</operator><name pos:start="365:57" pos:end="365:60">qmul</name></expr>]</index></name> <operator pos:start="365:63" pos:end="365:63">+</operator> <name pos:start="365:65" pos:end="365:72">run_diff</name></expr>;</expr_stmt> <comment type="line" pos:start="365:75" pos:end="365:94">//FIXME opt indexing</comment>

                    <expr_stmt pos:start="367:21" pos:end="367:92"><expr pos:start="367:21" pos:end="367:91"><name pos:start="367:21" pos:end="367:25">level</name> <operator pos:start="367:27" pos:end="367:27">=</operator> <operator pos:start="367:29" pos:end="367:29">(</operator><name pos:start="367:30" pos:end="367:34">level</name> <operator pos:start="367:36" pos:end="367:36">^</operator> <call pos:start="367:38" pos:end="367:62"><name pos:start="367:38" pos:end="367:47">SHOW_SBITS</name><argument_list pos:start="367:48" pos:end="367:62">(<argument pos:start="367:49" pos:end="367:50"><expr pos:start="367:49" pos:end="367:50"><name pos:start="367:49" pos:end="367:50">re</name></expr></argument>, <argument pos:start="367:53" pos:end="367:58"><expr pos:start="367:53" pos:end="367:58"><operator pos:start="367:53" pos:end="367:53">&amp;</operator><name pos:start="367:54" pos:end="367:58"><name pos:start="367:54" pos:end="367:54">s</name><operator pos:start="367:55" pos:end="367:56">-&gt;</operator><name pos:start="367:57" pos:end="367:58">gb</name></name></expr></argument>, <argument pos:start="367:61" pos:end="367:61"><expr pos:start="367:61" pos:end="367:61"><literal type="number" pos:start="367:61" pos:end="367:61">1</literal></expr></argument>)</argument_list></call><operator pos:start="367:63" pos:end="367:63">)</operator> <operator pos:start="367:65" pos:end="367:65">-</operator> <call pos:start="367:67" pos:end="367:91"><name pos:start="367:67" pos:end="367:76">SHOW_SBITS</name><argument_list pos:start="367:77" pos:end="367:91">(<argument pos:start="367:78" pos:end="367:79"><expr pos:start="367:78" pos:end="367:79"><name pos:start="367:78" pos:end="367:79">re</name></expr></argument>, <argument pos:start="367:82" pos:end="367:87"><expr pos:start="367:82" pos:end="367:87"><operator pos:start="367:82" pos:end="367:82">&amp;</operator><name pos:start="367:83" pos:end="367:87"><name pos:start="367:83" pos:end="367:83">s</name><operator pos:start="367:84" pos:end="367:85">-&gt;</operator><name pos:start="367:86" pos:end="367:87">gb</name></name></expr></argument>, <argument pos:start="367:90" pos:end="367:90"><expr pos:start="367:90" pos:end="367:90"><literal type="number" pos:start="367:90" pos:end="367:90">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="369:21" pos:end="372:0"><expr pos:start="369:21" pos:end="369:49"><call pos:start="369:21" pos:end="369:49"><name pos:start="369:21" pos:end="369:34">LAST_SKIP_BITS</name><argument_list pos:start="369:35" pos:end="369:49">(<argument pos:start="369:36" pos:end="369:37"><expr pos:start="369:36" pos:end="369:37"><name pos:start="369:36" pos:end="369:37">re</name></expr></argument>, <argument pos:start="369:40" pos:end="369:45"><expr pos:start="369:40" pos:end="369:45"><operator pos:start="369:40" pos:end="369:40">&amp;</operator><name pos:start="369:41" pos:end="369:45"><name pos:start="369:41" pos:end="369:41">s</name><operator pos:start="369:42" pos:end="369:43">-&gt;</operator><name pos:start="369:44" pos:end="369:45">gb</name></name></expr></argument>, <argument pos:start="369:48" pos:end="369:48"><expr pos:start="369:48" pos:end="369:48"><literal type="number" pos:start="369:48" pos:end="369:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="371:1" pos:end="371:20">#<cpp:directive pos:start="371:2" pos:end="371:6">ifdef</cpp:directive> <name pos:start="371:8" pos:end="371:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="373:17" pos:end="382:0"><if pos:start="373:17" pos:end="375:82">if<condition pos:start="373:19" pos:end="373:27">(<expr pos:start="373:20" pos:end="373:26"><name pos:start="373:20" pos:end="373:22">run</name><operator pos:start="373:23" pos:end="373:24">==</operator><literal type="number" pos:start="373:25" pos:end="373:26">66</literal></expr>)</condition><block type="pseudo" pos:start="375:21" pos:end="375:82"><block_content pos:start="375:21" pos:end="375:82">

                    <expr_stmt pos:start="375:21" pos:end="375:82"><expr pos:start="375:21" pos:end="375:81"><call pos:start="375:21" pos:end="375:81"><name pos:start="375:21" pos:end="375:27">fprintf</name><argument_list pos:start="375:28" pos:end="375:81">(<argument pos:start="375:29" pos:end="375:34"><expr pos:start="375:29" pos:end="375:34"><name pos:start="375:29" pos:end="375:34">stderr</name></expr></argument>, <argument pos:start="375:37" pos:end="375:73"><expr pos:start="375:37" pos:end="375:73"><literal type="string" pos:start="375:37" pos:end="375:73">"illegal vlc code in ESC2 level=%d\n"</literal></expr></argument>, <argument pos:start="375:76" pos:end="375:80"><expr pos:start="375:76" pos:end="375:80"><name pos:start="375:76" pos:end="375:80">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="377:17" pos:end="382:0">else if<condition pos:start="377:24" pos:end="377:52">(<expr pos:start="377:25" pos:end="377:51"><operator pos:start="377:25" pos:end="377:25">(</operator><name pos:start="377:26" pos:end="377:26">i</name><operator pos:start="377:27" pos:end="377:27">&gt;</operator><literal type="number" pos:start="377:28" pos:end="377:29">62</literal> <operator pos:start="377:31" pos:end="377:32">&amp;&amp;</operator> <name pos:start="377:34" pos:end="377:34">i</name><operator pos:start="377:35" pos:end="377:35">&lt;</operator><literal type="number" pos:start="377:36" pos:end="377:38">192</literal><operator pos:start="377:39" pos:end="377:39">)</operator> <operator pos:start="377:41" pos:end="377:42">||</operator> <name pos:start="377:44" pos:end="377:44">i</name><operator pos:start="377:45" pos:end="377:45">&gt;</operator><literal type="number" pos:start="377:46" pos:end="377:49">192</literal><operator pos:start="377:49" pos:end="377:49">+</operator><literal type="number" pos:start="377:50" pos:end="377:51">63</literal></expr>)</condition><block type="pseudo" pos:start="379:21" pos:end="382:0"><block_content pos:start="379:21" pos:end="382:0">

                    <expr_stmt pos:start="379:21" pos:end="382:0"><expr pos:start="379:21" pos:end="379:97"><call pos:start="379:21" pos:end="379:97"><name pos:start="379:21" pos:end="379:27">fprintf</name><argument_list pos:start="379:28" pos:end="379:97">(<argument pos:start="379:29" pos:end="379:34"><expr pos:start="379:29" pos:end="379:34"><name pos:start="379:29" pos:end="379:34">stderr</name></expr></argument>, <argument pos:start="379:37" pos:end="379:81"><expr pos:start="379:37" pos:end="379:81"><literal type="string" pos:start="379:37" pos:end="379:81">"run overflow in ESC2 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="379:84" pos:end="379:84"><expr pos:start="379:84" pos:end="379:84"><name pos:start="379:84" pos:end="379:84">i</name></expr></argument>, <argument pos:start="379:87" pos:end="379:89"><expr pos:start="379:87" pos:end="379:89"><name pos:start="379:87" pos:end="379:89">run</name></expr></argument>, <argument pos:start="379:92" pos:end="379:96"><expr pos:start="379:92" pos:end="379:96"><name pos:start="379:92" pos:end="379:96">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="381:1" pos:end="381:6">#<cpp:directive pos:start="381:2" pos:end="381:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="385:15" pos:end="423:13">else <block pos:start="385:20" pos:end="423:13">{<block_content pos:start="391:17" pos:end="422:0">

                <comment type="block" pos:start="387:17" pos:end="387:34">/* first escape */</comment>

<cpp:if pos:start="389:1" pos:end="389:23">#<cpp:directive pos:start="389:2" pos:end="389:3">if</cpp:directive> <expr pos:start="389:5" pos:end="389:23"><name pos:start="389:5" pos:end="389:18">MIN_CACHE_BITS</name> <operator pos:start="389:20" pos:end="389:20">&lt;</operator> <literal type="number" pos:start="389:22" pos:end="389:23">22</literal></expr></cpp:if>

                <expr_stmt pos:start="391:17" pos:end="391:46"><expr pos:start="391:17" pos:end="391:45"><call pos:start="391:17" pos:end="391:45"><name pos:start="391:17" pos:end="391:30">LAST_SKIP_BITS</name><argument_list pos:start="391:31" pos:end="391:45">(<argument pos:start="391:32" pos:end="391:33"><expr pos:start="391:32" pos:end="391:33"><name pos:start="391:32" pos:end="391:33">re</name></expr></argument>, <argument pos:start="391:36" pos:end="391:41"><expr pos:start="391:36" pos:end="391:41"><operator pos:start="391:36" pos:end="391:36">&amp;</operator><name pos:start="391:37" pos:end="391:41"><name pos:start="391:37" pos:end="391:37">s</name><operator pos:start="391:38" pos:end="391:39">-&gt;</operator><name pos:start="391:40" pos:end="391:41">gb</name></name></expr></argument>, <argument pos:start="391:44" pos:end="391:44"><expr pos:start="391:44" pos:end="391:44"><literal type="number" pos:start="391:44" pos:end="391:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="396:0"><expr pos:start="393:17" pos:end="393:40"><call pos:start="393:17" pos:end="393:40"><name pos:start="393:17" pos:end="393:28">UPDATE_CACHE</name><argument_list pos:start="393:29" pos:end="393:40">(<argument pos:start="393:30" pos:end="393:31"><expr pos:start="393:30" pos:end="393:31"><name pos:start="393:30" pos:end="393:31">re</name></expr></argument>, <argument pos:start="393:34" pos:end="393:39"><expr pos:start="393:34" pos:end="393:39"><operator pos:start="393:34" pos:end="393:34">&amp;</operator><name pos:start="393:35" pos:end="393:39"><name pos:start="393:35" pos:end="393:35">s</name><operator pos:start="393:36" pos:end="393:37">-&gt;</operator><name pos:start="393:38" pos:end="393:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="395:1" pos:end="395:5">#<cpp:directive pos:start="395:2" pos:end="395:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="397:17" pos:end="400:0"><expr pos:start="397:17" pos:end="397:40"><call pos:start="397:17" pos:end="397:40"><name pos:start="397:17" pos:end="397:25">SKIP_BITS</name><argument_list pos:start="397:26" pos:end="397:40">(<argument pos:start="397:27" pos:end="397:28"><expr pos:start="397:27" pos:end="397:28"><name pos:start="397:27" pos:end="397:28">re</name></expr></argument>, <argument pos:start="397:31" pos:end="397:36"><expr pos:start="397:31" pos:end="397:36"><operator pos:start="397:31" pos:end="397:31">&amp;</operator><name pos:start="397:32" pos:end="397:36"><name pos:start="397:32" pos:end="397:32">s</name><operator pos:start="397:33" pos:end="397:34">-&gt;</operator><name pos:start="397:35" pos:end="397:36">gb</name></name></expr></argument>, <argument pos:start="397:39" pos:end="397:39"><expr pos:start="397:39" pos:end="397:39"><literal type="number" pos:start="397:39" pos:end="397:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="399:1" pos:end="399:6">#<cpp:directive pos:start="399:2" pos:end="399:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="401:17" pos:end="401:76"><expr pos:start="401:17" pos:end="401:75"><call pos:start="401:17" pos:end="401:75"><name pos:start="401:17" pos:end="401:26">GET_RL_VLC</name><argument_list pos:start="401:27" pos:end="401:75">(<argument pos:start="401:28" pos:end="401:32"><expr pos:start="401:28" pos:end="401:32"><name pos:start="401:28" pos:end="401:32">level</name></expr></argument>, <argument pos:start="401:35" pos:end="401:37"><expr pos:start="401:35" pos:end="401:37"><name pos:start="401:35" pos:end="401:37">run</name></expr></argument>, <argument pos:start="401:40" pos:end="401:41"><expr pos:start="401:40" pos:end="401:41"><name pos:start="401:40" pos:end="401:41">re</name></expr></argument>, <argument pos:start="401:44" pos:end="401:49"><expr pos:start="401:44" pos:end="401:49"><operator pos:start="401:44" pos:end="401:44">&amp;</operator><name pos:start="401:45" pos:end="401:49"><name pos:start="401:45" pos:end="401:45">s</name><operator pos:start="401:46" pos:end="401:47">-&gt;</operator><name pos:start="401:48" pos:end="401:49">gb</name></name></expr></argument>, <argument pos:start="401:52" pos:end="401:57"><expr pos:start="401:52" pos:end="401:57"><name pos:start="401:52" pos:end="401:57">rl_vlc</name></expr></argument>, <argument pos:start="401:60" pos:end="401:71"><expr pos:start="401:60" pos:end="401:71"><name pos:start="401:60" pos:end="401:71">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="401:74" pos:end="401:74"><expr pos:start="401:74" pos:end="401:74"><literal type="number" pos:start="401:74" pos:end="401:74">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="403:17" pos:end="403:24"><expr pos:start="403:17" pos:end="403:23"><name pos:start="403:17" pos:end="403:17">i</name><operator pos:start="403:18" pos:end="403:19">+=</operator> <name pos:start="403:21" pos:end="403:23">run</name></expr>;</expr_stmt>

                <expr_stmt pos:start="405:17" pos:end="405:73"><expr pos:start="405:17" pos:end="405:72"><name pos:start="405:17" pos:end="405:21">level</name> <operator pos:start="405:23" pos:end="405:23">=</operator> <name pos:start="405:25" pos:end="405:29">level</name> <operator pos:start="405:31" pos:end="405:31">+</operator> <name pos:start="405:33" pos:end="405:65"><name pos:start="405:33" pos:end="405:34">rl</name><operator pos:start="405:35" pos:end="405:36">-&gt;</operator><name pos:start="405:37" pos:end="405:45">max_level</name><index pos:start="405:46" pos:end="405:53">[<expr pos:start="405:47" pos:end="405:52"><name pos:start="405:47" pos:end="405:49">run</name><operator pos:start="405:50" pos:end="405:51">&gt;&gt;</operator><literal type="number" pos:start="405:52" pos:end="405:52">7</literal></expr>]</index><index pos:start="405:54" pos:end="405:65">[<expr pos:start="405:55" pos:end="405:64"><operator pos:start="405:55" pos:end="405:55">(</operator><name pos:start="405:56" pos:end="405:58">run</name><operator pos:start="405:59" pos:end="405:59">-</operator><literal type="number" pos:start="405:60" pos:end="405:60">1</literal><operator pos:start="405:61" pos:end="405:61">)</operator><operator pos:start="405:62" pos:end="405:62">&amp;</operator><literal type="number" pos:start="405:63" pos:end="405:64">63</literal></expr>]</index></name> <operator pos:start="405:67" pos:end="405:67">*</operator> <name pos:start="405:69" pos:end="405:72">qmul</name></expr>;</expr_stmt><comment type="line" pos:start="405:74" pos:end="405:93">//FIXME opt indexing</comment>

                <expr_stmt pos:start="407:17" pos:end="407:88"><expr pos:start="407:17" pos:end="407:87"><name pos:start="407:17" pos:end="407:21">level</name> <operator pos:start="407:23" pos:end="407:23">=</operator> <operator pos:start="407:25" pos:end="407:25">(</operator><name pos:start="407:26" pos:end="407:30">level</name> <operator pos:start="407:32" pos:end="407:32">^</operator> <call pos:start="407:34" pos:end="407:58"><name pos:start="407:34" pos:end="407:43">SHOW_SBITS</name><argument_list pos:start="407:44" pos:end="407:58">(<argument pos:start="407:45" pos:end="407:46"><expr pos:start="407:45" pos:end="407:46"><name pos:start="407:45" pos:end="407:46">re</name></expr></argument>, <argument pos:start="407:49" pos:end="407:54"><expr pos:start="407:49" pos:end="407:54"><operator pos:start="407:49" pos:end="407:49">&amp;</operator><name pos:start="407:50" pos:end="407:54"><name pos:start="407:50" pos:end="407:50">s</name><operator pos:start="407:51" pos:end="407:52">-&gt;</operator><name pos:start="407:53" pos:end="407:54">gb</name></name></expr></argument>, <argument pos:start="407:57" pos:end="407:57"><expr pos:start="407:57" pos:end="407:57"><literal type="number" pos:start="407:57" pos:end="407:57">1</literal></expr></argument>)</argument_list></call><operator pos:start="407:59" pos:end="407:59">)</operator> <operator pos:start="407:61" pos:end="407:61">-</operator> <call pos:start="407:63" pos:end="407:87"><name pos:start="407:63" pos:end="407:72">SHOW_SBITS</name><argument_list pos:start="407:73" pos:end="407:87">(<argument pos:start="407:74" pos:end="407:75"><expr pos:start="407:74" pos:end="407:75"><name pos:start="407:74" pos:end="407:75">re</name></expr></argument>, <argument pos:start="407:78" pos:end="407:83"><expr pos:start="407:78" pos:end="407:83"><operator pos:start="407:78" pos:end="407:78">&amp;</operator><name pos:start="407:79" pos:end="407:83"><name pos:start="407:79" pos:end="407:79">s</name><operator pos:start="407:80" pos:end="407:81">-&gt;</operator><name pos:start="407:82" pos:end="407:83">gb</name></name></expr></argument>, <argument pos:start="407:86" pos:end="407:86"><expr pos:start="407:86" pos:end="407:86"><literal type="number" pos:start="407:86" pos:end="407:86">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="412:0"><expr pos:start="409:17" pos:end="409:45"><call pos:start="409:17" pos:end="409:45"><name pos:start="409:17" pos:end="409:30">LAST_SKIP_BITS</name><argument_list pos:start="409:31" pos:end="409:45">(<argument pos:start="409:32" pos:end="409:33"><expr pos:start="409:32" pos:end="409:33"><name pos:start="409:32" pos:end="409:33">re</name></expr></argument>, <argument pos:start="409:36" pos:end="409:41"><expr pos:start="409:36" pos:end="409:41"><operator pos:start="409:36" pos:end="409:36">&amp;</operator><name pos:start="409:37" pos:end="409:41"><name pos:start="409:37" pos:end="409:37">s</name><operator pos:start="409:38" pos:end="409:39">-&gt;</operator><name pos:start="409:40" pos:end="409:41">gb</name></name></expr></argument>, <argument pos:start="409:44" pos:end="409:44"><expr pos:start="409:44" pos:end="409:44"><literal type="number" pos:start="409:44" pos:end="409:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="411:1" pos:end="411:20">#<cpp:directive pos:start="411:2" pos:end="411:6">ifdef</cpp:directive> <name pos:start="411:8" pos:end="411:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="413:17" pos:end="422:0"><if pos:start="413:17" pos:end="415:82">if<condition pos:start="413:19" pos:end="413:27">(<expr pos:start="413:20" pos:end="413:26"><name pos:start="413:20" pos:end="413:22">run</name><operator pos:start="413:23" pos:end="413:24">==</operator><literal type="number" pos:start="413:25" pos:end="413:26">66</literal></expr>)</condition><block type="pseudo" pos:start="415:21" pos:end="415:82"><block_content pos:start="415:21" pos:end="415:82">

                    <expr_stmt pos:start="415:21" pos:end="415:82"><expr pos:start="415:21" pos:end="415:81"><call pos:start="415:21" pos:end="415:81"><name pos:start="415:21" pos:end="415:27">fprintf</name><argument_list pos:start="415:28" pos:end="415:81">(<argument pos:start="415:29" pos:end="415:34"><expr pos:start="415:29" pos:end="415:34"><name pos:start="415:29" pos:end="415:34">stderr</name></expr></argument>, <argument pos:start="415:37" pos:end="415:73"><expr pos:start="415:37" pos:end="415:73"><literal type="string" pos:start="415:37" pos:end="415:73">"illegal vlc code in ESC1 level=%d\n"</literal></expr></argument>, <argument pos:start="415:76" pos:end="415:80"><expr pos:start="415:76" pos:end="415:80"><name pos:start="415:76" pos:end="415:80">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="417:17" pos:end="422:0">else if<condition pos:start="417:24" pos:end="417:52">(<expr pos:start="417:25" pos:end="417:51"><operator pos:start="417:25" pos:end="417:25">(</operator><name pos:start="417:26" pos:end="417:26">i</name><operator pos:start="417:27" pos:end="417:27">&gt;</operator><literal type="number" pos:start="417:28" pos:end="417:29">62</literal> <operator pos:start="417:31" pos:end="417:32">&amp;&amp;</operator> <name pos:start="417:34" pos:end="417:34">i</name><operator pos:start="417:35" pos:end="417:35">&lt;</operator><literal type="number" pos:start="417:36" pos:end="417:38">192</literal><operator pos:start="417:39" pos:end="417:39">)</operator> <operator pos:start="417:41" pos:end="417:42">||</operator> <name pos:start="417:44" pos:end="417:44">i</name><operator pos:start="417:45" pos:end="417:45">&gt;</operator><literal type="number" pos:start="417:46" pos:end="417:49">192</literal><operator pos:start="417:49" pos:end="417:49">+</operator><literal type="number" pos:start="417:50" pos:end="417:51">63</literal></expr>)</condition><block type="pseudo" pos:start="419:21" pos:end="422:0"><block_content pos:start="419:21" pos:end="422:0">

                    <expr_stmt pos:start="419:21" pos:end="422:0"><expr pos:start="419:21" pos:end="419:97"><call pos:start="419:21" pos:end="419:97"><name pos:start="419:21" pos:end="419:27">fprintf</name><argument_list pos:start="419:28" pos:end="419:97">(<argument pos:start="419:29" pos:end="419:34"><expr pos:start="419:29" pos:end="419:34"><name pos:start="419:29" pos:end="419:34">stderr</name></expr></argument>, <argument pos:start="419:37" pos:end="419:81"><expr pos:start="419:37" pos:end="419:81"><literal type="string" pos:start="419:37" pos:end="419:81">"run overflow in ESC1 i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="419:84" pos:end="419:84"><expr pos:start="419:84" pos:end="419:84"><name pos:start="419:84" pos:end="419:84">i</name></expr></argument>, <argument pos:start="419:87" pos:end="419:89"><expr pos:start="419:87" pos:end="419:89"><name pos:start="419:87" pos:end="419:89">run</name></expr></argument>, <argument pos:start="419:92" pos:end="419:96"><expr pos:start="419:92" pos:end="419:96"><name pos:start="419:92" pos:end="419:96">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="421:1" pos:end="421:6">#<cpp:directive pos:start="421:2" pos:end="421:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="425:11" pos:end="445:9">else <block pos:start="425:16" pos:end="445:9">{<block_content pos:start="427:13" pos:end="444:0">

            <expr_stmt pos:start="427:13" pos:end="427:20"><expr pos:start="427:13" pos:end="427:19"><name pos:start="427:13" pos:end="427:13">i</name><operator pos:start="427:14" pos:end="427:15">+=</operator> <name pos:start="427:17" pos:end="427:19">run</name></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:84"><expr pos:start="429:13" pos:end="429:83"><name pos:start="429:13" pos:end="429:17">level</name> <operator pos:start="429:19" pos:end="429:19">=</operator> <operator pos:start="429:21" pos:end="429:21">(</operator><name pos:start="429:22" pos:end="429:26">level</name> <operator pos:start="429:28" pos:end="429:28">^</operator> <call pos:start="429:30" pos:end="429:54"><name pos:start="429:30" pos:end="429:39">SHOW_SBITS</name><argument_list pos:start="429:40" pos:end="429:54">(<argument pos:start="429:41" pos:end="429:42"><expr pos:start="429:41" pos:end="429:42"><name pos:start="429:41" pos:end="429:42">re</name></expr></argument>, <argument pos:start="429:45" pos:end="429:50"><expr pos:start="429:45" pos:end="429:50"><operator pos:start="429:45" pos:end="429:45">&amp;</operator><name pos:start="429:46" pos:end="429:50"><name pos:start="429:46" pos:end="429:46">s</name><operator pos:start="429:47" pos:end="429:48">-&gt;</operator><name pos:start="429:49" pos:end="429:50">gb</name></name></expr></argument>, <argument pos:start="429:53" pos:end="429:53"><expr pos:start="429:53" pos:end="429:53"><literal type="number" pos:start="429:53" pos:end="429:53">1</literal></expr></argument>)</argument_list></call><operator pos:start="429:55" pos:end="429:55">)</operator> <operator pos:start="429:57" pos:end="429:57">-</operator> <call pos:start="429:59" pos:end="429:83"><name pos:start="429:59" pos:end="429:68">SHOW_SBITS</name><argument_list pos:start="429:69" pos:end="429:83">(<argument pos:start="429:70" pos:end="429:71"><expr pos:start="429:70" pos:end="429:71"><name pos:start="429:70" pos:end="429:71">re</name></expr></argument>, <argument pos:start="429:74" pos:end="429:79"><expr pos:start="429:74" pos:end="429:79"><operator pos:start="429:74" pos:end="429:74">&amp;</operator><name pos:start="429:75" pos:end="429:79"><name pos:start="429:75" pos:end="429:75">s</name><operator pos:start="429:76" pos:end="429:77">-&gt;</operator><name pos:start="429:78" pos:end="429:79">gb</name></name></expr></argument>, <argument pos:start="429:82" pos:end="429:82"><expr pos:start="429:82" pos:end="429:82"><literal type="number" pos:start="429:82" pos:end="429:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="431:13" pos:end="434:0"><expr pos:start="431:13" pos:end="431:41"><call pos:start="431:13" pos:end="431:41"><name pos:start="431:13" pos:end="431:26">LAST_SKIP_BITS</name><argument_list pos:start="431:27" pos:end="431:41">(<argument pos:start="431:28" pos:end="431:29"><expr pos:start="431:28" pos:end="431:29"><name pos:start="431:28" pos:end="431:29">re</name></expr></argument>, <argument pos:start="431:32" pos:end="431:37"><expr pos:start="431:32" pos:end="431:37"><operator pos:start="431:32" pos:end="431:32">&amp;</operator><name pos:start="431:33" pos:end="431:37"><name pos:start="431:33" pos:end="431:33">s</name><operator pos:start="431:34" pos:end="431:35">-&gt;</operator><name pos:start="431:36" pos:end="431:37">gb</name></name></expr></argument>, <argument pos:start="431:40" pos:end="431:40"><expr pos:start="431:40" pos:end="431:40"><literal type="number" pos:start="431:40" pos:end="431:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="433:1" pos:end="433:20">#<cpp:directive pos:start="433:2" pos:end="433:6">ifdef</cpp:directive> <name pos:start="433:8" pos:end="433:20">ERROR_DETAILS</name></cpp:ifdef>

                <if_stmt pos:start="435:17" pos:end="444:0"><if pos:start="435:17" pos:end="437:74">if<condition pos:start="435:19" pos:end="435:27">(<expr pos:start="435:20" pos:end="435:26"><name pos:start="435:20" pos:end="435:22">run</name><operator pos:start="435:23" pos:end="435:24">==</operator><literal type="number" pos:start="435:25" pos:end="435:26">66</literal></expr>)</condition><block type="pseudo" pos:start="437:21" pos:end="437:74"><block_content pos:start="437:21" pos:end="437:74">

                    <expr_stmt pos:start="437:21" pos:end="437:74"><expr pos:start="437:21" pos:end="437:73"><call pos:start="437:21" pos:end="437:73"><name pos:start="437:21" pos:end="437:27">fprintf</name><argument_list pos:start="437:28" pos:end="437:73">(<argument pos:start="437:29" pos:end="437:34"><expr pos:start="437:29" pos:end="437:34"><name pos:start="437:29" pos:end="437:34">stderr</name></expr></argument>, <argument pos:start="437:37" pos:end="437:65"><expr pos:start="437:37" pos:end="437:65"><literal type="string" pos:start="437:37" pos:end="437:65">"illegal vlc code level=%d\n"</literal></expr></argument>, <argument pos:start="437:68" pos:end="437:72"><expr pos:start="437:68" pos:end="437:72"><name pos:start="437:68" pos:end="437:72">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="439:17" pos:end="444:0">else if<condition pos:start="439:24" pos:end="439:52">(<expr pos:start="439:25" pos:end="439:51"><operator pos:start="439:25" pos:end="439:25">(</operator><name pos:start="439:26" pos:end="439:26">i</name><operator pos:start="439:27" pos:end="439:27">&gt;</operator><literal type="number" pos:start="439:28" pos:end="439:29">62</literal> <operator pos:start="439:31" pos:end="439:32">&amp;&amp;</operator> <name pos:start="439:34" pos:end="439:34">i</name><operator pos:start="439:35" pos:end="439:35">&lt;</operator><literal type="number" pos:start="439:36" pos:end="439:38">192</literal><operator pos:start="439:39" pos:end="439:39">)</operator> <operator pos:start="439:41" pos:end="439:42">||</operator> <name pos:start="439:44" pos:end="439:44">i</name><operator pos:start="439:45" pos:end="439:45">&gt;</operator><literal type="number" pos:start="439:46" pos:end="439:49">192</literal><operator pos:start="439:49" pos:end="439:49">+</operator><literal type="number" pos:start="439:50" pos:end="439:51">63</literal></expr>)</condition><block type="pseudo" pos:start="441:21" pos:end="444:0"><block_content pos:start="441:21" pos:end="444:0">

                    <expr_stmt pos:start="441:21" pos:end="444:0"><expr pos:start="441:21" pos:end="441:89"><call pos:start="441:21" pos:end="441:89"><name pos:start="441:21" pos:end="441:27">fprintf</name><argument_list pos:start="441:28" pos:end="441:89">(<argument pos:start="441:29" pos:end="441:34"><expr pos:start="441:29" pos:end="441:34"><name pos:start="441:29" pos:end="441:34">stderr</name></expr></argument>, <argument pos:start="441:37" pos:end="441:73"><expr pos:start="441:37" pos:end="441:73"><literal type="string" pos:start="441:37" pos:end="441:73">"run overflow i=%d run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="441:76" pos:end="441:76"><expr pos:start="441:76" pos:end="441:76"><name pos:start="441:76" pos:end="441:76">i</name></expr></argument>, <argument pos:start="441:79" pos:end="441:81"><expr pos:start="441:79" pos:end="441:81"><name pos:start="441:79" pos:end="441:81">run</name></expr></argument>, <argument pos:start="441:84" pos:end="441:88"><expr pos:start="441:84" pos:end="441:88"><name pos:start="441:84" pos:end="441:88">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="447:9" pos:end="477:9"><if pos:start="447:9" pos:end="477:9">if <condition pos:start="447:12" pos:end="447:19">(<expr pos:start="447:13" pos:end="447:18"><name pos:start="447:13" pos:end="447:13">i</name> <operator pos:start="447:15" pos:end="447:15">&gt;</operator> <literal type="number" pos:start="447:17" pos:end="447:18">62</literal></expr>)</condition><block pos:start="447:20" pos:end="477:9">{<block_content pos:start="449:13" pos:end="475:18">

            <expr_stmt pos:start="449:13" pos:end="449:20"><expr pos:start="449:13" pos:end="449:19"><name pos:start="449:13" pos:end="449:13">i</name><operator pos:start="449:14" pos:end="449:15">-=</operator> <literal type="number" pos:start="449:17" pos:end="449:19">192</literal></expr>;</expr_stmt>

            <if_stmt pos:start="451:13" pos:end="469:13"><if pos:start="451:13" pos:end="469:13">if<condition pos:start="451:15" pos:end="451:23">(<expr pos:start="451:16" pos:end="451:22"><name pos:start="451:16" pos:end="451:16">i</name><operator pos:start="451:17" pos:end="451:17">&amp;</operator><operator pos:start="451:18" pos:end="451:18">(</operator><operator pos:start="451:19" pos:end="451:19">~</operator><literal type="number" pos:start="451:20" pos:end="451:21">63</literal><operator pos:start="451:22" pos:end="451:22">)</operator></expr>)</condition><block pos:start="451:24" pos:end="469:13">{<block_content pos:start="453:17" pos:end="467:17">

                <decl_stmt pos:start="453:17" pos:end="453:70"><decl pos:start="453:17" pos:end="453:69"><type pos:start="453:17" pos:end="453:25"><specifier pos:start="453:17" pos:end="453:21">const</specifier> <name pos:start="453:23" pos:end="453:25">int</name></type> <name pos:start="453:27" pos:end="453:30">left</name><init pos:start="453:31" pos:end="453:69">= <expr pos:start="453:33" pos:end="453:69"><name pos:start="453:33" pos:end="453:42"><name pos:start="453:33" pos:end="453:33">s</name><operator pos:start="453:34" pos:end="453:35">-&gt;</operator><name pos:start="453:36" pos:end="453:37">gb</name><operator pos:start="453:38" pos:end="453:38">.</operator><name pos:start="453:39" pos:end="453:42">size</name></name><operator pos:start="453:43" pos:end="453:43">*</operator><literal type="number" pos:start="453:44" pos:end="453:46">8</literal> <operator pos:start="453:46" pos:end="453:46">-</operator> <call pos:start="453:48" pos:end="453:69"><name pos:start="453:48" pos:end="453:61">get_bits_count</name><argument_list pos:start="453:62" pos:end="453:69">(<argument pos:start="453:63" pos:end="453:68"><expr pos:start="453:63" pos:end="453:68"><operator pos:start="453:63" pos:end="453:63">&amp;</operator><name pos:start="453:64" pos:end="453:68"><name pos:start="453:64" pos:end="453:64">s</name><operator pos:start="453:65" pos:end="453:66">-&gt;</operator><name pos:start="453:67" pos:end="453:68">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="455:17" pos:end="467:17"><if pos:start="455:17" pos:end="461:17">if<condition pos:start="455:19" pos:end="455:90">(<expr pos:start="455:20" pos:end="455:89"><operator pos:start="455:20" pos:end="455:20">(</operator><operator pos:start="455:21" pos:end="455:21">(</operator><name pos:start="455:22" pos:end="455:22">i</name><operator pos:start="455:23" pos:end="455:23">+</operator><literal type="number" pos:start="455:24" pos:end="455:26">192</literal> <operator pos:start="455:28" pos:end="455:29">==</operator> <literal type="number" pos:start="455:31" pos:end="455:32">64</literal> <operator pos:start="455:34" pos:end="455:35">&amp;&amp;</operator> <name pos:start="455:37" pos:end="455:41">level</name><operator pos:start="455:42" pos:end="455:42">/</operator><name pos:start="455:43" pos:end="455:46">qmul</name><operator pos:start="455:47" pos:end="455:48">==</operator><operator pos:start="455:49" pos:end="455:49">-</operator><literal type="number" pos:start="455:50" pos:end="455:50">1</literal><operator pos:start="455:51" pos:end="455:51">)</operator> <operator pos:start="455:53" pos:end="455:54">||</operator> <name pos:start="455:56" pos:end="455:74"><name pos:start="455:56" pos:end="455:56">s</name><operator pos:start="455:57" pos:end="455:58">-&gt;</operator><name pos:start="455:59" pos:end="455:74">error_resilience</name></name><operator pos:start="455:75" pos:end="455:76">&lt;=</operator><literal type="number" pos:start="455:77" pos:end="455:77">1</literal><operator pos:start="455:78" pos:end="455:78">)</operator> <operator pos:start="455:80" pos:end="455:81">&amp;&amp;</operator> <name pos:start="455:83" pos:end="455:86">left</name><operator pos:start="455:87" pos:end="455:88">&gt;=</operator><literal type="number" pos:start="455:89" pos:end="455:89">0</literal></expr>)</condition><block pos:start="455:91" pos:end="461:17">{<block_content pos:start="457:21" pos:end="459:26">

                    <expr_stmt pos:start="457:21" pos:end="457:86"><expr pos:start="457:21" pos:end="457:85"><call pos:start="457:21" pos:end="457:85"><name pos:start="457:21" pos:end="457:27">fprintf</name><argument_list pos:start="457:28" pos:end="457:85">(<argument pos:start="457:29" pos:end="457:34"><expr pos:start="457:29" pos:end="457:34"><name pos:start="457:29" pos:end="457:34">stderr</name></expr></argument>, <argument pos:start="457:37" pos:end="457:66"><expr pos:start="457:37" pos:end="457:66"><literal type="string" pos:start="457:37" pos:end="457:66">"ignoring overflow at %d %d\n"</literal></expr></argument>, <argument pos:start="457:69" pos:end="457:75"><expr pos:start="457:69" pos:end="457:75"><name pos:start="457:69" pos:end="457:75"><name pos:start="457:69" pos:end="457:69">s</name><operator pos:start="457:70" pos:end="457:71">-&gt;</operator><name pos:start="457:72" pos:end="457:75">mb_x</name></name></expr></argument>, <argument pos:start="457:78" pos:end="457:84"><expr pos:start="457:78" pos:end="457:84"><name pos:start="457:78" pos:end="457:84"><name pos:start="457:78" pos:end="457:78">s</name><operator pos:start="457:79" pos:end="457:80">-&gt;</operator><name pos:start="457:81" pos:end="457:84">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="459:21" pos:end="459:26">break;</break>

                </block_content>}</block></if><else pos:start="461:18" pos:end="467:17">else<block pos:start="461:22" pos:end="467:17">{<block_content pos:start="463:21" pos:end="465:30">

                    <expr_stmt pos:start="463:21" pos:end="463:83"><expr pos:start="463:21" pos:end="463:82"><call pos:start="463:21" pos:end="463:82"><name pos:start="463:21" pos:end="463:27">fprintf</name><argument_list pos:start="463:28" pos:end="463:82">(<argument pos:start="463:29" pos:end="463:34"><expr pos:start="463:29" pos:end="463:34"><name pos:start="463:29" pos:end="463:34">stderr</name></expr></argument>, <argument pos:start="463:37" pos:end="463:63"><expr pos:start="463:37" pos:end="463:63"><literal type="string" pos:start="463:37" pos:end="463:63">"ac-tex damaged at %d %d\n"</literal></expr></argument>, <argument pos:start="463:66" pos:end="463:72"><expr pos:start="463:66" pos:end="463:72"><name pos:start="463:66" pos:end="463:72"><name pos:start="463:66" pos:end="463:66">s</name><operator pos:start="463:67" pos:end="463:68">-&gt;</operator><name pos:start="463:69" pos:end="463:72">mb_x</name></name></expr></argument>, <argument pos:start="463:75" pos:end="463:81"><expr pos:start="463:75" pos:end="463:81"><name pos:start="463:75" pos:end="463:81"><name pos:start="463:75" pos:end="463:75">s</name><operator pos:start="463:76" pos:end="463:77">-&gt;</operator><name pos:start="463:78" pos:end="463:81">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="465:21" pos:end="465:30">return <expr pos:start="465:28" pos:end="465:29"><operator pos:start="465:28" pos:end="465:28">-</operator><literal type="number" pos:start="465:29" pos:end="465:29">1</literal></expr>;</return>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="473:13" pos:end="473:41"><expr pos:start="473:13" pos:end="473:40"><name pos:start="473:13" pos:end="473:32"><name pos:start="473:13" pos:end="473:17">block</name><index pos:start="473:18" pos:end="473:32">[<expr pos:start="473:19" pos:end="473:31"><name pos:start="473:19" pos:end="473:31"><name pos:start="473:19" pos:end="473:28">scan_table</name><index pos:start="473:29" pos:end="473:31">[<expr pos:start="473:30" pos:end="473:30"><name pos:start="473:30" pos:end="473:30">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="473:34" pos:end="473:34">=</operator> <name pos:start="473:36" pos:end="473:40">level</name></expr>;</expr_stmt>

            <break pos:start="475:13" pos:end="475:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="481:9" pos:end="481:37"><expr pos:start="481:9" pos:end="481:36"><name pos:start="481:9" pos:end="481:28"><name pos:start="481:9" pos:end="481:13">block</name><index pos:start="481:14" pos:end="481:28">[<expr pos:start="481:15" pos:end="481:27"><name pos:start="481:15" pos:end="481:27"><name pos:start="481:15" pos:end="481:24">scan_table</name><index pos:start="481:25" pos:end="481:27">[<expr pos:start="481:26" pos:end="481:26"><name pos:start="481:26" pos:end="481:26">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="481:30" pos:end="481:30">=</operator> <name pos:start="481:32" pos:end="481:36">level</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="485:5" pos:end="485:29"><expr pos:start="485:5" pos:end="485:28"><call pos:start="485:5" pos:end="485:28"><name pos:start="485:5" pos:end="485:16">CLOSE_READER</name><argument_list pos:start="485:17" pos:end="485:28">(<argument pos:start="485:18" pos:end="485:19"><expr pos:start="485:18" pos:end="485:19"><name pos:start="485:18" pos:end="485:19">re</name></expr></argument>, <argument pos:start="485:22" pos:end="485:27"><expr pos:start="485:22" pos:end="485:27"><operator pos:start="485:22" pos:end="485:22">&amp;</operator><name pos:start="485:23" pos:end="485:27"><name pos:start="485:23" pos:end="485:23">s</name><operator pos:start="485:24" pos:end="485:25">-&gt;</operator><name pos:start="485:26" pos:end="485:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block>

 <label pos:start="489:2" pos:end="489:11"><name pos:start="489:2" pos:end="489:10">not_coded</name>:</label>

    <if_stmt pos:start="491:5" pos:end="501:5"><if pos:start="491:5" pos:end="501:5">if <condition pos:start="491:8" pos:end="491:20">(<expr pos:start="491:9" pos:end="491:19"><name pos:start="491:9" pos:end="491:19"><name pos:start="491:9" pos:end="491:9">s</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:19">mb_intra</name></name></expr>)</condition> <block pos:start="491:22" pos:end="501:5">{<block_content pos:start="493:9" pos:end="499:9">

        <expr_stmt pos:start="493:9" pos:end="493:48"><expr pos:start="493:9" pos:end="493:47"><call pos:start="493:9" pos:end="493:47"><name pos:start="493:9" pos:end="493:21">mpeg4_pred_ac</name><argument_list pos:start="493:22" pos:end="493:47">(<argument pos:start="493:23" pos:end="493:23"><expr pos:start="493:23" pos:end="493:23"><name pos:start="493:23" pos:end="493:23">s</name></expr></argument>, <argument pos:start="493:26" pos:end="493:30"><expr pos:start="493:26" pos:end="493:30"><name pos:start="493:26" pos:end="493:30">block</name></expr></argument>, <argument pos:start="493:33" pos:end="493:33"><expr pos:start="493:33" pos:end="493:33"><name pos:start="493:33" pos:end="493:33">n</name></expr></argument>, <argument pos:start="493:36" pos:end="493:46"><expr pos:start="493:36" pos:end="493:46"><name pos:start="493:36" pos:end="493:46">dc_pred_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="495:9" pos:end="499:9"><if pos:start="495:9" pos:end="499:9">if <condition pos:start="495:12" pos:end="495:23">(<expr pos:start="495:13" pos:end="495:22"><name pos:start="495:13" pos:end="495:22"><name pos:start="495:13" pos:end="495:13">s</name><operator pos:start="495:14" pos:end="495:15">-&gt;</operator><name pos:start="495:16" pos:end="495:22">ac_pred</name></name></expr>)</condition> <block pos:start="495:25" pos:end="499:9">{<block_content pos:start="497:13" pos:end="497:19">

            <expr_stmt pos:start="497:13" pos:end="497:19"><expr pos:start="497:13" pos:end="497:18"><name pos:start="497:13" pos:end="497:13">i</name> <operator pos:start="497:15" pos:end="497:15">=</operator> <literal type="number" pos:start="497:17" pos:end="497:18">63</literal></expr>;</expr_stmt> <comment type="block" pos:start="497:21" pos:end="497:42">/* XXX: not optimal */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="503:5" pos:end="503:42"><if pos:start="503:5" pos:end="503:42">if<condition pos:start="503:7" pos:end="503:36">(<expr pos:start="503:8" pos:end="503:35"><name pos:start="503:8" pos:end="503:25"><name pos:start="503:8" pos:end="503:8">s</name><operator pos:start="503:9" pos:end="503:10">-&gt;</operator><name pos:start="503:11" pos:end="503:25">msmpeg4_version</name></name><operator pos:start="503:26" pos:end="503:27">&gt;=</operator><literal type="number" pos:start="503:28" pos:end="503:28">4</literal> <operator pos:start="503:30" pos:end="503:31">&amp;&amp;</operator> <name pos:start="503:33" pos:end="503:33">i</name><operator pos:start="503:34" pos:end="503:34">&gt;</operator><literal type="number" pos:start="503:35" pos:end="503:35">0</literal></expr>)</condition><block type="pseudo" pos:start="503:38" pos:end="503:42"><block_content pos:start="503:38" pos:end="503:42"> <expr_stmt pos:start="503:38" pos:end="503:42"><expr pos:start="503:38" pos:end="503:41"><name pos:start="503:38" pos:end="503:38">i</name><operator pos:start="503:39" pos:end="503:39">=</operator><literal type="number" pos:start="503:40" pos:end="503:41">63</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="503:44" pos:end="503:63">//FIXME/XXX optimize</comment>

    <expr_stmt pos:start="505:5" pos:end="505:31"><expr pos:start="505:5" pos:end="505:30"><name pos:start="505:5" pos:end="505:26"><name pos:start="505:5" pos:end="505:5">s</name><operator pos:start="505:6" pos:end="505:7">-&gt;</operator><name pos:start="505:8" pos:end="505:23">block_last_index</name><index pos:start="505:24" pos:end="505:26">[<expr pos:start="505:25" pos:end="505:25"><name pos:start="505:25" pos:end="505:25">n</name></expr>]</index></name> <operator pos:start="505:28" pos:end="505:28">=</operator> <name pos:start="505:30" pos:end="505:30">i</name></expr>;</expr_stmt>

    

    <return pos:start="509:5" pos:end="509:13">return <expr pos:start="509:12" pos:end="509:12"><literal type="number" pos:start="509:12" pos:end="509:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
