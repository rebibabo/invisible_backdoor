<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8083.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">usb_msd_set_bootindex</name><parameter_list pos:start="1:34" pos:end="3:61">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:45"><name pos:start="1:35" pos:end="1:40">Object</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">obj</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:54">Visitor</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">v</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:75"><decl pos:start="1:60" pos:end="1:75"><type pos:start="1:60" pos:end="1:75"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">name</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:46"><decl pos:start="3:35" pos:end="3:46"><type pos:start="3:35" pos:end="3:46"><name pos:start="3:35" pos:end="3:38">void</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:46">opaque</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:53">Error</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier><modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:5">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">USBDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">dev</name> <init pos:start="7:20" pos:end="7:36">= <expr pos:start="7:22" pos:end="7:36"><call pos:start="7:22" pos:end="7:36"><name pos:start="7:22" pos:end="7:31">USB_DEVICE</name><argument_list pos:start="7:32" pos:end="7:36">(<argument pos:start="7:33" pos:end="7:35"><expr pos:start="7:33" pos:end="7:35"><name pos:start="7:33" pos:end="7:35">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">MSDState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:38">= <expr pos:start="9:19" pos:end="9:38"><call pos:start="9:19" pos:end="9:38"><name pos:start="9:19" pos:end="9:33">USB_STORAGE_DEV</name><argument_list pos:start="9:34" pos:end="9:38">(<argument pos:start="9:35" pos:end="9:37"><expr pos:start="9:35" pos:end="9:37"><name pos:start="9:35" pos:end="9:37">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int32_t</name></type> <name pos:start="11:13" pos:end="11:22">boot_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><call pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:20">visit_type_int32</name><argument_list pos:start="17:21" pos:end="17:54">(<argument pos:start="17:22" pos:end="17:22"><expr pos:start="17:22" pos:end="17:22"><name pos:start="17:22" pos:end="17:22">v</name></expr></argument>, <argument pos:start="17:25" pos:end="17:28"><expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">name</name></expr></argument>, <argument pos:start="17:31" pos:end="17:41"><expr pos:start="17:31" pos:end="17:41"><operator pos:start="17:31" pos:end="17:31">&amp;</operator><name pos:start="17:32" pos:end="17:41">boot_index</name></expr></argument>, <argument pos:start="17:44" pos:end="17:53"><expr pos:start="17:44" pos:end="17:53"><operator pos:start="17:44" pos:end="17:44">&amp;</operator><name pos:start="17:45" pos:end="17:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:17">local_err</name></expr>)</condition> <block pos:start="19:20" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:17">

        <goto pos:start="21:9" pos:end="21:17">goto <name pos:start="21:14" pos:end="21:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="25:5" pos:end="25:67">/* check whether bootindex is present in fw_boot_order list  */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><call pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:20">check_boot_index</name><argument_list pos:start="27:21" pos:end="27:44">(<argument pos:start="27:22" pos:end="27:31"><expr pos:start="27:22" pos:end="27:31"><name pos:start="27:22" pos:end="27:31">boot_index</name></expr></argument>, <argument pos:start="27:34" pos:end="27:43"><expr pos:start="27:34" pos:end="27:43"><operator pos:start="27:34" pos:end="27:34">&amp;</operator><name pos:start="27:35" pos:end="27:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:17">local_err</name></expr>)</condition> <block pos:start="29:20" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:39">/* change bootindex to a new one */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:11">conf</name><operator pos:start="37:12" pos:end="37:12">.</operator><name pos:start="37:13" pos:end="37:21">bootindex</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:34">boot_index</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="47:5"><if pos:start="41:5" pos:end="47:5">if <condition pos:start="41:8" pos:end="41:20">(<expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:19">scsi_dev</name></name></expr>)</condition> <block pos:start="41:22" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:46">

        <expr_stmt pos:start="43:9" pos:end="45:46"><expr pos:start="43:9" pos:end="45:45"><call pos:start="43:9" pos:end="45:45"><name pos:start="43:9" pos:end="43:31">object_property_set_int</name><argument_list pos:start="43:32" pos:end="45:45">(<argument pos:start="43:33" pos:end="43:51"><expr pos:start="43:33" pos:end="43:51"><call pos:start="43:33" pos:end="43:51"><name pos:start="43:33" pos:end="43:38">OBJECT</name><argument_list pos:start="43:39" pos:end="43:51">(<argument pos:start="43:40" pos:end="43:50"><expr pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:40">s</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:50">scsi_dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:54" pos:end="43:63"><expr pos:start="43:54" pos:end="43:63"><name pos:start="43:54" pos:end="43:63">boot_index</name></expr></argument>, <argument pos:start="43:66" pos:end="43:76"><expr pos:start="43:66" pos:end="43:76"><literal type="string" pos:start="43:66" pos:end="43:76">"bootindex"</literal></expr></argument>,

                                <argument pos:start="45:33" pos:end="45:44"><expr pos:start="45:33" pos:end="45:44"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:44">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="51:1" pos:end="51:4"><name pos:start="51:1" pos:end="51:3">out</name>:</label>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:18">(<expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:17">local_err</name></expr>)</condition> <block pos:start="53:20" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:41">

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><call pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:23">error_propagate</name><argument_list pos:start="55:24" pos:end="55:40">(<argument pos:start="55:25" pos:end="55:28"><expr pos:start="55:25" pos:end="55:28"><name pos:start="55:25" pos:end="55:28">errp</name></expr></argument>, <argument pos:start="55:31" pos:end="55:39"><expr pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
