<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18423.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">mjpeg_decode_dc</name><parameter_list pos:start="1:34" pos:end="1:70">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:52">MJpegDecodeContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:69">dc_index</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:17">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">code</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:62"><expr pos:start="7:5" pos:end="7:61"><name pos:start="7:5" pos:end="7:8">code</name> <operator pos:start="7:10" pos:end="7:10">=</operator> <call pos:start="7:12" pos:end="7:61"><name pos:start="7:12" pos:end="7:19">get_vlc2</name><argument_list pos:start="7:20" pos:end="7:61">(<argument pos:start="7:21" pos:end="7:26"><expr pos:start="7:21" pos:end="7:26"><operator pos:start="7:21" pos:end="7:21">&amp;</operator><name pos:start="7:22" pos:end="7:26"><name pos:start="7:22" pos:end="7:22">s</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:26">gb</name></name></expr></argument>, <argument pos:start="7:29" pos:end="7:54"><expr pos:start="7:29" pos:end="7:54"><name pos:start="7:29" pos:end="7:48"><name pos:start="7:29" pos:end="7:29">s</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:35">vlcs</name><index pos:start="7:36" pos:end="7:38">[<expr pos:start="7:37" pos:end="7:37"><literal type="number" pos:start="7:37" pos:end="7:37">0</literal></expr>]</index><index pos:start="7:39" pos:end="7:48">[<expr pos:start="7:40" pos:end="7:47"><name pos:start="7:40" pos:end="7:47">dc_index</name></expr>]</index></name><operator pos:start="7:49" pos:end="7:49">.</operator><name pos:start="7:50" pos:end="7:54">table</name></expr></argument>, <argument pos:start="7:57" pos:end="7:57"><expr pos:start="7:57" pos:end="7:57"><literal type="number" pos:start="7:57" pos:end="7:57">9</literal></expr></argument>, <argument pos:start="7:60" pos:end="7:60"><expr pos:start="7:60" pos:end="7:60"><literal type="number" pos:start="7:60" pos:end="7:60">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="9:5" pos:end="19:5"><if pos:start="9:5" pos:end="19:5">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:12">code</name> <operator pos:start="9:14" pos:end="9:14">&lt;</operator> <literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr>)</condition> <block pos:start="9:19" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:22">

        <expr_stmt pos:start="11:9" pos:end="15:51"><expr pos:start="11:9" pos:end="15:50"><call pos:start="11:9" pos:end="15:50"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="15:50">(<argument pos:start="11:16" pos:end="11:23"><expr pos:start="11:16" pos:end="11:23"><name pos:start="11:16" pos:end="11:23"><name pos:start="11:16" pos:end="11:16">s</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:23">avctx</name></name></expr></argument>, <argument pos:start="11:26" pos:end="11:39"><expr pos:start="11:26" pos:end="11:39"><name pos:start="11:26" pos:end="11:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="13:16" pos:end="13:55"><expr pos:start="13:16" pos:end="13:55"><literal type="string" pos:start="13:16" pos:end="13:55">"mjpeg_decode_dc: bad vlc: %d:%d (%p)\n"</literal></expr></argument>,

               <argument pos:start="15:16" pos:end="15:16"><expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr></argument>, <argument pos:start="15:19" pos:end="15:26"><expr pos:start="15:19" pos:end="15:26"><name pos:start="15:19" pos:end="15:26">dc_index</name></expr></argument>, <argument pos:start="15:29" pos:end="15:49"><expr pos:start="15:29" pos:end="15:49"><operator pos:start="15:29" pos:end="15:29">&amp;</operator><name pos:start="15:30" pos:end="15:49"><name pos:start="15:30" pos:end="15:30">s</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:36">vlcs</name><index pos:start="15:37" pos:end="15:39">[<expr pos:start="15:38" pos:end="15:38"><literal type="number" pos:start="15:38" pos:end="15:38">0</literal></expr>]</index><index pos:start="15:40" pos:end="15:49">[<expr pos:start="15:41" pos:end="15:48"><name pos:start="15:41" pos:end="15:48">dc_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:22">return <expr pos:start="17:16" pos:end="17:21"><literal type="number" pos:start="17:16" pos:end="17:21">0xffff</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="29:17"><if pos:start="23:5" pos:end="25:39">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><name pos:start="23:9" pos:end="23:12">code</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:39"><block_content pos:start="25:9" pos:end="25:39">

        <return pos:start="25:9" pos:end="25:39">return <expr pos:start="25:16" pos:end="25:38"><call pos:start="25:16" pos:end="25:38"><name pos:start="25:16" pos:end="25:24">get_xbits</name><argument_list pos:start="25:25" pos:end="25:38">(<argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><operator pos:start="25:26" pos:end="25:26">&amp;</operator><name pos:start="25:27" pos:end="25:31"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:31">gb</name></name></expr></argument>, <argument pos:start="25:34" pos:end="25:37"><expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">code</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

    <else pos:start="27:5" pos:end="29:17">else<block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
