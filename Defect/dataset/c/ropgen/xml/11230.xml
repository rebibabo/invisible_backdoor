<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11230.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">bdrv_all_find_snapshot</name><parameter_list pos:start="1:27" pos:end="1:77">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">name</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:76"><decl pos:start="1:46" pos:end="1:76"><type pos:start="1:46" pos:end="1:76"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier><modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:76">first_bad_bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:15">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">QEMUSnapshotInfo</name></type> <name pos:start="5:22" pos:end="5:23">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BdrvNextIterator</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">it</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="31:5">while <condition pos:start="15:11" pos:end="15:49">(<expr pos:start="15:12" pos:end="15:48"><name pos:start="15:12" pos:end="15:14">err</name> <operator pos:start="15:16" pos:end="15:17">==</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal> <operator pos:start="15:21" pos:end="15:22">&amp;&amp;</operator> <operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:26">it</name> <operator pos:start="15:28" pos:end="15:28">=</operator> <call pos:start="15:30" pos:end="15:47"><name pos:start="15:30" pos:end="15:38">bdrv_next</name><argument_list pos:start="15:39" pos:end="15:47">(<argument pos:start="15:40" pos:end="15:41"><expr pos:start="15:40" pos:end="15:41"><name pos:start="15:40" pos:end="15:41">it</name></expr></argument>, <argument pos:start="15:44" pos:end="15:46"><expr pos:start="15:44" pos:end="15:46"><operator pos:start="15:44" pos:end="15:44">&amp;</operator><name pos:start="15:45" pos:end="15:46">bs</name></expr></argument>)</argument_list></call><operator pos:start="15:48" pos:end="15:48">)</operator></expr>)</condition> <block pos:start="15:51" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:33">

        <decl_stmt pos:start="17:9" pos:end="17:51"><decl pos:start="17:9" pos:end="17:50"><type pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:18">AioContext</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:23">ctx</name> <init pos:start="17:25" pos:end="17:50">= <expr pos:start="17:27" pos:end="17:50"><call pos:start="17:27" pos:end="17:50"><name pos:start="17:27" pos:end="17:46">bdrv_get_aio_context</name><argument_list pos:start="17:47" pos:end="17:50">(<argument pos:start="17:48" pos:end="17:49"><expr pos:start="17:48" pos:end="17:49"><name pos:start="17:48" pos:end="17:49">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:33"><expr pos:start="21:9" pos:end="21:32"><call pos:start="21:9" pos:end="21:32"><name pos:start="21:9" pos:end="21:27">aio_context_acquire</name><argument_list pos:start="21:28" pos:end="21:32">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:34">(<expr pos:start="23:13" pos:end="23:33"><call pos:start="23:13" pos:end="23:33"><name pos:start="23:13" pos:end="23:29">bdrv_can_snapshot</name><argument_list pos:start="23:30" pos:end="23:33">(<argument pos:start="23:31" pos:end="23:32"><expr pos:start="23:31" pos:end="23:32"><name pos:start="23:31" pos:end="23:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:36" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:52">

            <expr_stmt pos:start="25:13" pos:end="25:52"><expr pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:15">err</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:51"><name pos:start="25:19" pos:end="25:36">bdrv_snapshot_find</name><argument_list pos:start="25:37" pos:end="25:51">(<argument pos:start="25:38" pos:end="25:39"><expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">bs</name></expr></argument>, <argument pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><operator pos:start="25:42" pos:end="25:42">&amp;</operator><name pos:start="25:43" pos:end="25:44">sn</name></expr></argument>, <argument pos:start="25:47" pos:end="25:50"><expr pos:start="25:47" pos:end="25:50"><name pos:start="25:47" pos:end="25:50">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:27">aio_context_release</name><argument_list pos:start="29:28" pos:end="29:32">(<argument pos:start="29:29" pos:end="29:31"><expr pos:start="29:29" pos:end="29:31"><name pos:start="29:29" pos:end="29:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:17">first_bad_bs</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:22">bs</name></expr>;</expr_stmt>

    <return pos:start="37:5" pos:end="37:15">return <expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
