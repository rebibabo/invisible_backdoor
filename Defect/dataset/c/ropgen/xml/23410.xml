<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23410.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">cpu_handle_ioreq</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">XenIOState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">state</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">ioreq_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">req</name> <init pos:start="7:18" pos:end="7:39">= <expr pos:start="7:20" pos:end="7:39"><call pos:start="7:20" pos:end="7:39"><name pos:start="7:20" pos:end="7:32">cpu_get_ioreq</name><argument_list pos:start="7:33" pos:end="7:39">(<argument pos:start="7:34" pos:end="7:38"><expr pos:start="7:34" pos:end="7:38"><name pos:start="7:34" pos:end="7:38">state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><call pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:26">handle_buffered_iopage</name><argument_list pos:start="11:27" pos:end="11:33">(<argument pos:start="11:28" pos:end="11:32"><expr pos:start="11:28" pos:end="11:32"><name pos:start="11:28" pos:end="11:32">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="83:5"><if pos:start="13:5" pos:end="83:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">req</name></expr>)</condition> <block pos:start="13:14" pos:end="83:5">{<block_content pos:start="15:9" pos:end="81:87">

        <expr_stmt pos:start="15:9" pos:end="15:33"><expr pos:start="15:9" pos:end="15:32"><call pos:start="15:9" pos:end="15:32"><name pos:start="15:9" pos:end="15:20">handle_ioreq</name><argument_list pos:start="15:21" pos:end="15:32">(<argument pos:start="15:22" pos:end="15:26"><expr pos:start="15:22" pos:end="15:26"><name pos:start="15:22" pos:end="15:26">state</name></expr></argument>, <argument pos:start="15:29" pos:end="15:31"><expr pos:start="15:29" pos:end="15:31"><name pos:start="15:29" pos:end="15:31">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="19:9" pos:end="39:9"><if pos:start="19:9" pos:end="39:9">if <condition pos:start="19:12" pos:end="19:48">(<expr pos:start="19:13" pos:end="19:47"><name pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:15">req</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:22">state</name></name> <operator pos:start="19:24" pos:end="19:25">!=</operator> <name pos:start="19:27" pos:end="19:47">STATE_IOREQ_INPROCESS</name></expr>)</condition> <block pos:start="19:50" pos:end="39:9">{<block_content pos:start="21:13" pos:end="37:19">

            <expr_stmt pos:start="21:13" pos:end="33:65"><expr pos:start="21:13" pos:end="33:64"><call pos:start="21:13" pos:end="33:64"><name pos:start="21:13" pos:end="21:19">fprintf</name><argument_list pos:start="21:20" pos:end="33:64">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">stderr</name></expr></argument>, <argument pos:start="21:29" pos:end="29:49"><expr pos:start="21:29" pos:end="29:49"><literal type="string" pos:start="21:29" pos:end="21:75">"Badness in I/O request ... not in service?!: "</literal>

                    <literal type="string" pos:start="23:21" pos:end="23:42">"%x, ptr: %x, port: %"</literal><name pos:start="23:43" pos:end="23:48">PRIx64</name><literal type="string" pos:start="23:49" pos:end="23:52">", "</literal>

                    <literal type="string" pos:start="25:21" pos:end="25:29">"data: %"</literal><name pos:start="25:30" pos:end="25:35">PRIx64</name><literal type="string" pos:start="25:36" pos:end="25:47">", count: %"</literal> <name pos:start="25:49" pos:end="25:62">FMT_ioreq_size</name>

                    <literal type="string" pos:start="27:21" pos:end="27:31">", size: %"</literal> <name pos:start="27:33" pos:end="27:46">FMT_ioreq_size</name>

                    <literal type="string" pos:start="29:21" pos:end="29:31">", type: %"</literal><name pos:start="29:32" pos:end="29:45">FMT_ioreq_size</name><literal type="string" pos:start="29:46" pos:end="29:49">"\n"</literal></expr></argument>,

                    <argument pos:start="31:21" pos:end="31:30"><expr pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:23">req</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:30">state</name></name></expr></argument>, <argument pos:start="31:33" pos:end="31:48"><expr pos:start="31:33" pos:end="31:48"><name pos:start="31:33" pos:end="31:48"><name pos:start="31:33" pos:end="31:35">req</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:48">data_is_ptr</name></name></expr></argument>, <argument pos:start="31:51" pos:end="31:59"><expr pos:start="31:51" pos:end="31:59"><name pos:start="31:51" pos:end="31:59"><name pos:start="31:51" pos:end="31:53">req</name><operator pos:start="31:54" pos:end="31:55">-&gt;</operator><name pos:start="31:56" pos:end="31:59">addr</name></name></expr></argument>,

                    <argument pos:start="33:21" pos:end="33:29"><expr pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:23">req</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">data</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:41"><expr pos:start="33:32" pos:end="33:41"><name pos:start="33:32" pos:end="33:41"><name pos:start="33:32" pos:end="33:34">req</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:41">count</name></name></expr></argument>, <argument pos:start="33:44" pos:end="33:52"><expr pos:start="33:44" pos:end="33:52"><name pos:start="33:44" pos:end="33:52"><name pos:start="33:44" pos:end="33:46">req</name><operator pos:start="33:47" pos:end="33:48">-&gt;</operator><name pos:start="33:49" pos:end="33:52">size</name></name></expr></argument>, <argument pos:start="33:55" pos:end="33:63"><expr pos:start="33:55" pos:end="33:63"><name pos:start="33:55" pos:end="33:63"><name pos:start="33:55" pos:end="33:57">req</name><operator pos:start="33:58" pos:end="33:59">-&gt;</operator><name pos:start="33:60" pos:end="33:63">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:38"><expr pos:start="35:13" pos:end="35:37"><call pos:start="35:13" pos:end="35:37"><name pos:start="35:13" pos:end="35:30">destroy_hvm_domain</name><argument_list pos:start="35:31" pos:end="35:37">(<argument pos:start="35:32" pos:end="35:36"><expr pos:start="35:32" pos:end="35:36"><name pos:start="35:32" pos:end="35:36">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><call pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">xen_wmb</name><argument_list pos:start="43:16" pos:end="43:17">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:20" pos:end="43:67">/* Update ioreq contents /then/ update state. */</comment>



        <comment type="block" pos:start="47:9" pos:end="57:11">/*

         * We do this before we send the response so that the tools

         * have the opportunity to pick up on the reset before the

         * guest resumes and does a hlt with interrupts disabled which

         * causes Xen to powerdown the domain.

         */</comment>

        <if_stmt pos:start="59:9" pos:end="75:9"><if pos:start="59:9" pos:end="75:9">if <condition pos:start="59:12" pos:end="59:34">(<expr pos:start="59:13" pos:end="59:33"><call pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:31">runstate_is_running</name><argument_list pos:start="59:32" pos:end="59:33">()</argument_list></call></expr>)</condition> <block pos:start="59:36" pos:end="75:9">{<block_content pos:start="61:13" pos:end="73:13">

            <if_stmt pos:start="61:13" pos:end="65:13"><if pos:start="61:13" pos:end="65:13">if <condition pos:start="61:16" pos:end="61:46">(<expr pos:start="61:17" pos:end="61:45"><call pos:start="61:17" pos:end="61:45"><name pos:start="61:17" pos:end="61:43">qemu_shutdown_requested_get</name><argument_list pos:start="61:44" pos:end="61:45">()</argument_list></call></expr>)</condition> <block pos:start="61:48" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:42">

                <expr_stmt pos:start="63:17" pos:end="63:42"><expr pos:start="63:17" pos:end="63:41"><call pos:start="63:17" pos:end="63:41"><name pos:start="63:17" pos:end="63:34">destroy_hvm_domain</name><argument_list pos:start="63:35" pos:end="63:41">(<argument pos:start="63:36" pos:end="63:40"><expr pos:start="63:36" pos:end="63:40"><name pos:start="63:36" pos:end="63:40">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:43">(<expr pos:start="67:17" pos:end="67:42"><call pos:start="67:17" pos:end="67:42"><name pos:start="67:17" pos:end="67:40">qemu_reset_requested_get</name><argument_list pos:start="67:41" pos:end="67:42">()</argument_list></call></expr>)</condition> <block pos:start="67:45" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:41">

                <expr_stmt pos:start="69:17" pos:end="69:50"><expr pos:start="69:17" pos:end="69:49"><call pos:start="69:17" pos:end="69:49"><name pos:start="69:17" pos:end="69:33">qemu_system_reset</name><argument_list pos:start="69:34" pos:end="69:49">(<argument pos:start="69:35" pos:end="69:48"><expr pos:start="69:35" pos:end="69:48"><name pos:start="69:35" pos:end="69:48">VMRESET_REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:41"><expr pos:start="71:17" pos:end="71:40"><call pos:start="71:17" pos:end="71:40"><name pos:start="71:17" pos:end="71:34">destroy_hvm_domain</name><argument_list pos:start="71:35" pos:end="71:40">(<argument pos:start="71:36" pos:end="71:39"><expr pos:start="71:36" pos:end="71:39"><name pos:start="71:36" pos:end="71:39">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:40"><expr pos:start="79:9" pos:end="79:39"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:11">req</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:18">state</name></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:39">STATE_IORESP_READY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:87"><expr pos:start="81:9" pos:end="81:86"><call pos:start="81:9" pos:end="81:86"><name pos:start="81:9" pos:end="81:24">xc_evtchn_notify</name><argument_list pos:start="81:25" pos:end="81:86">(<argument pos:start="81:26" pos:end="81:42"><expr pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:30">state</name><operator pos:start="81:31" pos:end="81:32">-&gt;</operator><name pos:start="81:33" pos:end="81:42">xce_handle</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:85"><expr pos:start="81:45" pos:end="81:85"><name pos:start="81:45" pos:end="81:85"><name pos:start="81:45" pos:end="81:49">state</name><operator pos:start="81:50" pos:end="81:51">-&gt;</operator><name pos:start="81:52" pos:end="81:67">ioreq_local_port</name><index pos:start="81:68" pos:end="81:85">[<expr pos:start="81:69" pos:end="81:84"><name pos:start="81:69" pos:end="81:84"><name pos:start="81:69" pos:end="81:73">state</name><operator pos:start="81:74" pos:end="81:75">-&gt;</operator><name pos:start="81:76" pos:end="81:84">send_vcpu</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
