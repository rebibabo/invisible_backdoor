<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15896.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:34">tb_invalidate_phys_page_range</name><parameter_list pos:start="1:35" pos:end="3:59">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:49">tb_page_addr_t</name></type> <name pos:start="1:51" pos:end="1:55">start</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><name pos:start="1:58" pos:end="1:71">tb_page_addr_t</name></type> <name pos:start="1:73" pos:end="1:75">end</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:58"><decl pos:start="3:36" pos:end="3:58"><type pos:start="3:36" pos:end="3:58"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:58">is_cpu_write_access</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="192:0">

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">TranslationBlock</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">tb</name></decl>, <decl pos:start="7:27" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:22"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:34">tb_next</name></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:35">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:35"><call pos:start="9:5" pos:end="9:35"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:35">(<argument pos:start="9:13" pos:end="9:34"><expr pos:start="9:13" pos:end="9:34"><name pos:start="9:13" pos:end="9:34">TARGET_HAS_PRECISE_SMC</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">cpu</name> <init pos:start="11:19" pos:end="11:31">= <expr pos:start="11:21" pos:end="11:31"><name pos:start="11:21" pos:end="11:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">CPUArchState</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">env</name> <init pos:start="13:23" pos:end="13:28">= <expr pos:start="13:25" pos:end="13:28"><name pos:start="13:25" pos:end="13:28">NULL</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:18">tb_page_addr_t</name></type> <name pos:start="17:20" pos:end="17:27">tb_start</name></decl>, <decl pos:start="17:30" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:18"/><name pos:start="17:30" pos:end="17:35">tb_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">PageDesc</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:15">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">n</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="23:1" pos:end="23:29">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

    <decl_stmt pos:start="25:5" pos:end="25:51"><decl pos:start="25:5" pos:end="25:50"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:28">current_tb_not_found</name> <init pos:start="25:30" pos:end="25:50">= <expr pos:start="25:32" pos:end="25:50"><name pos:start="25:32" pos:end="25:50">is_cpu_write_access</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:20">TranslationBlock</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:32">current_tb</name> <init pos:start="27:34" pos:end="27:39">= <expr pos:start="27:36" pos:end="27:39"><name pos:start="27:36" pos:end="27:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:32"><decl pos:start="29:5" pos:end="29:31"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:27">current_tb_modified</name> <init pos:start="29:29" pos:end="29:31">= <expr pos:start="29:31" pos:end="29:31"><literal type="number" pos:start="29:31" pos:end="29:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:32"><decl pos:start="31:5" pos:end="31:31"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:16">target_ulong</name></type> <name pos:start="31:18" pos:end="31:27">current_pc</name> <init pos:start="31:29" pos:end="31:31">= <expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:37"><decl pos:start="33:5" pos:end="33:36"><type pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:16">target_ulong</name></type> <name pos:start="33:18" pos:end="33:32">current_cs_base</name> <init pos:start="33:34" pos:end="33:36">= <expr pos:start="33:36" pos:end="33:36"><literal type="number" pos:start="33:36" pos:end="33:36">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="38:0"><decl pos:start="35:5" pos:end="35:30"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:26">current_flags</name> <init pos:start="35:28" pos:end="35:30">= <expr pos:start="35:30" pos:end="35:30"><literal type="number" pos:start="35:30" pos:end="35:30">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="37:8" pos:end="37:35">/* TARGET_HAS_PRECISE_SMC */</comment>



    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:22">assert_memory_lock</name><argument_list pos:start="41:23" pos:end="41:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:23"><expr pos:start="43:5" pos:end="43:22"><call pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:20">assert_tb_locked</name><argument_list pos:start="43:21" pos:end="43:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:5">p</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <call pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:17">page_find</name><argument_list pos:start="47:18" pos:end="47:44">(<argument pos:start="47:19" pos:end="47:43"><expr pos:start="47:19" pos:end="47:43"><name pos:start="47:19" pos:end="47:23">start</name> <operator pos:start="47:25" pos:end="47:26">&gt;&gt;</operator> <name pos:start="47:28" pos:end="47:43">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="56:0"><if pos:start="49:5" pos:end="56:0">if <condition pos:start="49:8" pos:end="49:11">(<expr pos:start="49:9" pos:end="49:10"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:10">p</name></expr>)</condition> <block pos:start="49:13" pos:end="56:0">{<block_content pos:start="51:9" pos:end="51:15">

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="55:1" pos:end="55:35">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:35"><call pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:35">(<argument pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:34">TARGET_HAS_PRECISE_SMC</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="57:5" pos:end="64:0"><if pos:start="57:5" pos:end="64:0">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:11">cpu</name> <operator pos:start="57:13" pos:end="57:14">!=</operator> <name pos:start="57:16" pos:end="57:19">NULL</name></expr>)</condition> <block pos:start="57:22" pos:end="64:0">{<block_content pos:start="59:9" pos:end="59:27">

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:11">env</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:26"><name pos:start="59:15" pos:end="59:17">cpu</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:26">env_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="67:5" pos:end="67:57">/* we remove all the TBs in the range [start, end[ */</comment>

    <comment type="block" pos:start="69:5" pos:end="71:18">/* XXX: see if in some cases it could be faster to invalidate all

       the code */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:21"><expr pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:6">tb</name> <operator pos:start="73:8" pos:end="73:8">=</operator> <name pos:start="73:10" pos:end="73:20"><name pos:start="73:10" pos:end="73:10">p</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:20">first_tb</name></name></expr>;</expr_stmt>

    <while pos:start="75:5" pos:end="160:0">while <condition pos:start="75:11" pos:end="75:22">(<expr pos:start="75:12" pos:end="75:21"><name pos:start="75:12" pos:end="75:13">tb</name> <operator pos:start="75:15" pos:end="75:16">!=</operator> <name pos:start="75:18" pos:end="75:21">NULL</name></expr>)</condition> <block pos:start="75:24" pos:end="160:0">{<block_content pos:start="77:9" pos:end="155:21">

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:9">n</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:22">uintptr_t</name><operator pos:start="77:23" pos:end="77:23">)</operator><name pos:start="77:24" pos:end="77:25">tb</name> <operator pos:start="77:27" pos:end="77:27">&amp;</operator> <literal type="number" pos:start="77:29" pos:end="77:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:54"><expr pos:start="79:9" pos:end="79:53"><name pos:start="79:9" pos:end="79:10">tb</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <operator pos:start="79:14" pos:end="79:14">(</operator><name pos:start="79:15" pos:end="79:30">TranslationBlock</name> <operator pos:start="79:32" pos:end="79:32">*</operator><operator pos:start="79:33" pos:end="79:33">)</operator><operator pos:start="79:34" pos:end="79:34">(</operator><operator pos:start="79:35" pos:end="79:35">(</operator><name pos:start="79:36" pos:end="79:44">uintptr_t</name><operator pos:start="79:45" pos:end="79:45">)</operator><name pos:start="79:46" pos:end="79:47">tb</name> <operator pos:start="79:49" pos:end="79:49">&amp;</operator> <operator pos:start="79:51" pos:end="79:51">~</operator><literal type="number" pos:start="79:52" pos:end="79:52">3</literal><operator pos:start="79:53" pos:end="79:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:15">tb_next</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:34"><name pos:start="81:19" pos:end="81:20">tb</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:31">page_next</name><index pos:start="81:32" pos:end="81:34">[<expr pos:start="81:33" pos:end="81:33"><name pos:start="81:33" pos:end="81:33">n</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="83:9" pos:end="83:70">/* NOTE: this is subtle as a TB may span two physical pages */</comment>

        <if_stmt pos:start="85:9" pos:end="101:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:19">(<expr pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:13">n</name> <operator pos:start="85:15" pos:end="85:16">==</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>)</condition> <block pos:start="85:21" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:41">

            <comment type="block" pos:start="87:13" pos:end="89:37">/* NOTE: tb_end may be after the end of the page, but

               it is not a problem */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:71"><expr pos:start="91:13" pos:end="91:70"><name pos:start="91:13" pos:end="91:20">tb_start</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <name pos:start="91:24" pos:end="91:39"><name pos:start="91:24" pos:end="91:25">tb</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:36">page_addr</name><index pos:start="91:37" pos:end="91:39">[<expr pos:start="91:38" pos:end="91:38"><literal type="number" pos:start="91:38" pos:end="91:38">0</literal></expr>]</index></name> <operator pos:start="91:41" pos:end="91:41">+</operator> <operator pos:start="91:43" pos:end="91:43">(</operator><name pos:start="91:44" pos:end="91:49"><name pos:start="91:44" pos:end="91:45">tb</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:49">pc</name></name> <operator pos:start="91:51" pos:end="91:51">&amp;</operator> <operator pos:start="91:53" pos:end="91:53">~</operator><name pos:start="91:54" pos:end="91:69">TARGET_PAGE_MASK</name><operator pos:start="91:70" pos:end="91:70">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:18">tb_end</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:29">tb_start</name> <operator pos:start="93:31" pos:end="93:31">+</operator> <name pos:start="93:33" pos:end="93:40"><name pos:start="93:33" pos:end="93:34">tb</name><operator pos:start="93:35" pos:end="93:36">-&gt;</operator><name pos:start="93:37" pos:end="93:40">size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="101:9">else <block pos:start="95:16" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:74">

            <expr_stmt pos:start="97:13" pos:end="97:40"><expr pos:start="97:13" pos:end="97:39"><name pos:start="97:13" pos:end="97:20">tb_start</name> <operator pos:start="97:22" pos:end="97:22">=</operator> <name pos:start="97:24" pos:end="97:39"><name pos:start="97:24" pos:end="97:25">tb</name><operator pos:start="97:26" pos:end="97:27">-&gt;</operator><name pos:start="97:28" pos:end="97:36">page_addr</name><index pos:start="97:37" pos:end="97:39">[<expr pos:start="97:38" pos:end="97:38"><literal type="number" pos:start="97:38" pos:end="97:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:74"><expr pos:start="99:13" pos:end="99:73"><name pos:start="99:13" pos:end="99:18">tb_end</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <name pos:start="99:22" pos:end="99:29">tb_start</name> <operator pos:start="99:31" pos:end="99:31">+</operator> <operator pos:start="99:33" pos:end="99:33">(</operator><operator pos:start="99:34" pos:end="99:34">(</operator><name pos:start="99:35" pos:end="99:40"><name pos:start="99:35" pos:end="99:36">tb</name><operator pos:start="99:37" pos:end="99:38">-&gt;</operator><name pos:start="99:39" pos:end="99:40">pc</name></name> <operator pos:start="99:42" pos:end="99:42">+</operator> <name pos:start="99:44" pos:end="99:51"><name pos:start="99:44" pos:end="99:45">tb</name><operator pos:start="99:46" pos:end="99:47">-&gt;</operator><name pos:start="99:48" pos:end="99:51">size</name></name><operator pos:start="99:52" pos:end="99:52">)</operator> <operator pos:start="99:54" pos:end="99:54">&amp;</operator> <operator pos:start="99:56" pos:end="99:56">~</operator><name pos:start="99:57" pos:end="99:72">TARGET_PAGE_MASK</name><operator pos:start="99:73" pos:end="99:73">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="103:9" pos:end="153:9"><if pos:start="103:9" pos:end="153:9">if <condition pos:start="103:12" pos:end="103:50">(<expr pos:start="103:13" pos:end="103:49"><operator pos:start="103:13" pos:end="103:13">!</operator><operator pos:start="103:14" pos:end="103:14">(</operator><name pos:start="103:15" pos:end="103:20">tb_end</name> <operator pos:start="103:22" pos:end="103:23">&lt;=</operator> <name pos:start="103:25" pos:end="103:29">start</name> <operator pos:start="103:31" pos:end="103:32">||</operator> <name pos:start="103:34" pos:end="103:41">tb_start</name> <operator pos:start="103:43" pos:end="103:44">&gt;=</operator> <name pos:start="103:46" pos:end="103:48">end</name><operator pos:start="103:49" pos:end="103:49">)</operator></expr>)</condition> <block pos:start="103:52" pos:end="153:9">{<block_content pos:start="107:13" pos:end="151:39">

<cpp:ifdef pos:start="105:1" pos:end="105:29">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

            <if_stmt pos:start="107:13" pos:end="121:13"><if pos:start="107:13" pos:end="121:13">if <condition pos:start="107:16" pos:end="107:37">(<expr pos:start="107:17" pos:end="107:36"><name pos:start="107:17" pos:end="107:36">current_tb_not_found</name></expr>)</condition> <block pos:start="107:39" pos:end="121:13">{<block_content pos:start="109:17" pos:end="119:17">

                <expr_stmt pos:start="109:17" pos:end="109:41"><expr pos:start="109:17" pos:end="109:40"><name pos:start="109:17" pos:end="109:36">current_tb_not_found</name> <operator pos:start="109:38" pos:end="109:38">=</operator> <literal type="number" pos:start="109:40" pos:end="109:40">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:34"><expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:26">current_tb</name> <operator pos:start="111:28" pos:end="111:28">=</operator> <name pos:start="111:30" pos:end="111:33">NULL</name></expr>;</expr_stmt>

                <if_stmt pos:start="113:17" pos:end="119:17"><if pos:start="113:17" pos:end="119:17">if <condition pos:start="113:20" pos:end="113:35">(<expr pos:start="113:21" pos:end="113:34"><name pos:start="113:21" pos:end="113:34"><name pos:start="113:21" pos:end="113:23">cpu</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:34">mem_io_pc</name></name></expr>)</condition> <block pos:start="113:37" pos:end="119:17">{<block_content pos:start="117:21" pos:end="117:60">

                    <comment type="block" pos:start="115:21" pos:end="115:54">/* now we have a real cpu fault */</comment>

                    <expr_stmt pos:start="117:21" pos:end="117:60"><expr pos:start="117:21" pos:end="117:59"><name pos:start="117:21" pos:end="117:30">current_tb</name> <operator pos:start="117:32" pos:end="117:32">=</operator> <call pos:start="117:34" pos:end="117:59"><name pos:start="117:34" pos:end="117:43">tb_find_pc</name><argument_list pos:start="117:44" pos:end="117:59">(<argument pos:start="117:45" pos:end="117:58"><expr pos:start="117:45" pos:end="117:58"><name pos:start="117:45" pos:end="117:58"><name pos:start="117:45" pos:end="117:47">cpu</name><operator pos:start="117:48" pos:end="117:49">-&gt;</operator><name pos:start="117:50" pos:end="117:58">mem_io_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="123:13" pos:end="150:0"><if pos:start="123:13" pos:end="150:0">if <condition pos:start="123:16" pos:end="125:58">(<expr pos:start="123:17" pos:end="125:57"><name pos:start="123:17" pos:end="123:26">current_tb</name> <operator pos:start="123:28" pos:end="123:29">==</operator> <name pos:start="123:31" pos:end="123:32">tb</name> <operator pos:start="123:34" pos:end="123:35">&amp;&amp;</operator>

                <operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:35"><name pos:start="125:18" pos:end="125:27">current_tb</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:35">cflags</name></name> <operator pos:start="125:37" pos:end="125:37">&amp;</operator> <name pos:start="125:39" pos:end="125:51">CF_COUNT_MASK</name><operator pos:start="125:52" pos:end="125:52">)</operator> <operator pos:start="125:54" pos:end="125:55">!=</operator> <literal type="number" pos:start="125:57" pos:end="125:57">1</literal></expr>)</condition> <block pos:start="125:60" pos:end="150:0">{<block_content pos:start="139:17" pos:end="145:53">

                <comment type="block" pos:start="127:17" pos:end="135:40">/* If we are modifying the current TB, we must stop

                its execution. We could be more precise by checking

                that the modification is after the current PC, but it

                would require a specialized function to partially

                restore the CPU state */</comment>



                <expr_stmt pos:start="139:17" pos:end="139:40"><expr pos:start="139:17" pos:end="139:39"><name pos:start="139:17" pos:end="139:35">current_tb_modified</name> <operator pos:start="139:37" pos:end="139:37">=</operator> <literal type="number" pos:start="139:39" pos:end="139:39">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:75"><expr pos:start="141:17" pos:end="141:74"><call pos:start="141:17" pos:end="141:74"><name pos:start="141:17" pos:end="141:41">cpu_restore_state_from_tb</name><argument_list pos:start="141:42" pos:end="141:74">(<argument pos:start="141:43" pos:end="141:45"><expr pos:start="141:43" pos:end="141:45"><name pos:start="141:43" pos:end="141:45">cpu</name></expr></argument>, <argument pos:start="141:48" pos:end="141:57"><expr pos:start="141:48" pos:end="141:57"><name pos:start="141:48" pos:end="141:57">current_tb</name></expr></argument>, <argument pos:start="141:60" pos:end="141:73"><expr pos:start="141:60" pos:end="141:73"><name pos:start="141:60" pos:end="141:73"><name pos:start="141:60" pos:end="141:62">cpu</name><operator pos:start="141:63" pos:end="141:64">-&gt;</operator><name pos:start="141:65" pos:end="141:73">mem_io_pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="145:53"><expr pos:start="143:17" pos:end="145:52"><call pos:start="143:17" pos:end="145:52"><name pos:start="143:17" pos:end="143:36">cpu_get_tb_cpu_state</name><argument_list pos:start="143:37" pos:end="145:52">(<argument pos:start="143:38" pos:end="143:40"><expr pos:start="143:38" pos:end="143:40"><name pos:start="143:38" pos:end="143:40">env</name></expr></argument>, <argument pos:start="143:43" pos:end="143:53"><expr pos:start="143:43" pos:end="143:53"><operator pos:start="143:43" pos:end="143:43">&amp;</operator><name pos:start="143:44" pos:end="143:53">current_pc</name></expr></argument>, <argument pos:start="143:56" pos:end="143:71"><expr pos:start="143:56" pos:end="143:71"><operator pos:start="143:56" pos:end="143:56">&amp;</operator><name pos:start="143:57" pos:end="143:71">current_cs_base</name></expr></argument>,

                                     <argument pos:start="145:38" pos:end="145:51"><expr pos:start="145:38" pos:end="145:51"><operator pos:start="145:38" pos:end="145:38">&amp;</operator><name pos:start="145:39" pos:end="145:51">current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="149:1" pos:end="149:6">#<cpp:directive pos:start="149:2" pos:end="149:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="149:8" pos:end="149:35">/* TARGET_HAS_PRECISE_SMC */</comment>

            <expr_stmt pos:start="151:13" pos:end="151:39"><expr pos:start="151:13" pos:end="151:38"><call pos:start="151:13" pos:end="151:38"><name pos:start="151:13" pos:end="151:30">tb_phys_invalidate</name><argument_list pos:start="151:31" pos:end="151:38">(<argument pos:start="151:32" pos:end="151:33"><expr pos:start="151:32" pos:end="151:33"><name pos:start="151:32" pos:end="151:33">tb</name></expr></argument>, <argument pos:start="151:36" pos:end="151:37"><expr pos:start="151:36" pos:end="151:37"><operator pos:start="151:36" pos:end="151:36">-</operator><literal type="number" pos:start="151:37" pos:end="151:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:21"><expr pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:10">tb</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <name pos:start="155:14" pos:end="155:20">tb_next</name></expr>;</expr_stmt>

    </block_content>}</block></while>

<cpp:if pos:start="159:1" pos:end="159:30">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:30"><operator pos:start="159:5" pos:end="159:5">!</operator><call pos:start="159:6" pos:end="159:30"><name pos:start="159:6" pos:end="159:12">defined</name><argument_list pos:start="159:13" pos:end="159:30">(<argument pos:start="159:14" pos:end="159:29"><expr pos:start="159:14" pos:end="159:29"><name pos:start="159:14" pos:end="159:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="161:5" pos:end="161:70">/* if no code remaining, no need to continue to use slow writes */</comment>

    <if_stmt pos:start="163:5" pos:end="174:0"><if pos:start="163:5" pos:end="174:0">if <condition pos:start="163:8" pos:end="163:21">(<expr pos:start="163:9" pos:end="163:20"><operator pos:start="163:9" pos:end="163:9">!</operator><name pos:start="163:10" pos:end="163:20"><name pos:start="163:10" pos:end="163:10">p</name><operator pos:start="163:11" pos:end="163:12">-&gt;</operator><name pos:start="163:13" pos:end="163:20">first_tb</name></name></expr>)</condition> <block pos:start="163:23" pos:end="174:0">{<block_content pos:start="165:9" pos:end="167:34">

        <expr_stmt pos:start="165:9" pos:end="165:34"><expr pos:start="165:9" pos:end="165:33"><call pos:start="165:9" pos:end="165:33"><name pos:start="165:9" pos:end="165:30">invalidate_page_bitmap</name><argument_list pos:start="165:31" pos:end="165:33">(<argument pos:start="165:32" pos:end="165:32"><expr pos:start="165:32" pos:end="165:32"><name pos:start="165:32" pos:end="165:32">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:34"><expr pos:start="167:9" pos:end="167:33"><call pos:start="167:9" pos:end="167:33"><name pos:start="167:9" pos:end="167:26">tlb_unprotect_code</name><argument_list pos:start="167:27" pos:end="167:33">(<argument pos:start="167:28" pos:end="167:32"><expr pos:start="167:28" pos:end="167:32"><name pos:start="167:28" pos:end="167:32">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="173:1" pos:end="173:29">#<cpp:directive pos:start="173:2" pos:end="173:6">ifdef</cpp:directive> <name pos:start="173:8" pos:end="173:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

    <if_stmt pos:start="175:5" pos:end="192:0"><if pos:start="175:5" pos:end="192:0">if <condition pos:start="175:8" pos:end="175:28">(<expr pos:start="175:9" pos:end="175:27"><name pos:start="175:9" pos:end="175:27">current_tb_modified</name></expr>)</condition> <block pos:start="175:30" pos:end="192:0">{<block_content pos:start="183:9" pos:end="187:33">

        <comment type="block" pos:start="177:9" pos:end="181:20">/* we generate a block containing just the instruction

           modifying the memory. It will ensure that it cannot modify

           itself */</comment>

        <expr_stmt pos:start="183:9" pos:end="185:39"><expr pos:start="183:9" pos:end="185:38"><call pos:start="183:9" pos:end="185:38"><name pos:start="183:9" pos:end="183:19">tb_gen_code</name><argument_list pos:start="183:20" pos:end="185:38">(<argument pos:start="183:21" pos:end="183:23"><expr pos:start="183:21" pos:end="183:23"><name pos:start="183:21" pos:end="183:23">cpu</name></expr></argument>, <argument pos:start="183:26" pos:end="183:35"><expr pos:start="183:26" pos:end="183:35"><name pos:start="183:26" pos:end="183:35">current_pc</name></expr></argument>, <argument pos:start="183:38" pos:end="183:52"><expr pos:start="183:38" pos:end="183:52"><name pos:start="183:38" pos:end="183:52">current_cs_base</name></expr></argument>, <argument pos:start="183:55" pos:end="183:67"><expr pos:start="183:55" pos:end="183:67"><name pos:start="183:55" pos:end="183:67">current_flags</name></expr></argument>,

                    <argument pos:start="185:21" pos:end="185:37"><expr pos:start="185:21" pos:end="185:37"><literal type="number" pos:start="185:21" pos:end="185:21">1</literal> <operator pos:start="185:23" pos:end="185:23">|</operator> <call pos:start="185:25" pos:end="185:37"><name pos:start="185:25" pos:end="185:35">curr_cflags</name><argument_list pos:start="185:36" pos:end="185:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:33"><expr pos:start="187:9" pos:end="187:32"><call pos:start="187:9" pos:end="187:32"><name pos:start="187:9" pos:end="187:27">cpu_loop_exit_noexc</name><argument_list pos:start="187:28" pos:end="187:32">(<argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
