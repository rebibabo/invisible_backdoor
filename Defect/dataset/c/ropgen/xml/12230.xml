<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12230.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">fill_note_info</name><parameter_list pos:start="1:26" pos:end="3:62">(<parameter pos:start="1:27" pos:end="1:52"><decl pos:start="1:27" pos:end="1:52"><type pos:start="1:27" pos:end="1:52"><name pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:32">struct</name> <name pos:start="1:34" pos:end="1:46">elf_note_info</name></name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">info</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:36"><decl pos:start="3:27" pos:end="3:36"><type pos:start="3:27" pos:end="3:36"><name pos:start="3:27" pos:end="3:30">long</name></type> <name pos:start="3:32" pos:end="3:36">signr</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:61"><decl pos:start="3:39" pos:end="3:61"><type pos:start="3:39" pos:end="3:61"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:56">CPUArchState</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">env</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="9:5" pos:end="93:15">

<cpp:define pos:start="7:1" pos:end="7:18">#<cpp:directive pos:start="7:2" pos:end="7:7">define</cpp:directive> <cpp:macro pos:start="7:9" pos:end="7:16"><name pos:start="7:9" pos:end="7:16">NUMNOTES</name></cpp:macro> <cpp:value pos:start="7:18" pos:end="7:18">3</cpp:value></cpp:define>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name> <init pos:start="9:19" pos:end="9:52">= <expr pos:start="9:21" pos:end="9:52"><call pos:start="9:21" pos:end="9:52"><name pos:start="9:21" pos:end="9:31">ENV_GET_CPU</name><argument_list pos:start="9:32" pos:end="9:52">(<argument pos:start="9:33" pos:end="9:51"><expr pos:start="9:33" pos:end="9:51"><operator pos:start="9:33" pos:end="9:33">(</operator><name pos:start="9:34" pos:end="9:45">CPUArchState</name> <operator pos:start="9:47" pos:end="9:47">*</operator><operator pos:start="9:48" pos:end="9:48">)</operator><name pos:start="9:49" pos:end="9:51">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">TaskState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:17">ts</name> <init pos:start="11:19" pos:end="11:44">= <expr pos:start="11:21" pos:end="11:44"><operator pos:start="11:21" pos:end="11:21">(</operator><name pos:start="11:22" pos:end="11:30">TaskState</name> <operator pos:start="11:32" pos:end="11:32">*</operator><operator pos:start="11:33" pos:end="11:33">)</operator><name pos:start="11:34" pos:end="11:44"><name pos:start="11:34" pos:end="11:36">cpu</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:44">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:67"><expr pos:start="17:5" pos:end="17:66"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:8">info</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:15">notes</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:66"><name pos:start="17:19" pos:end="17:27">g_malloc0</name><argument_list pos:start="17:28" pos:end="17:66">(<argument pos:start="17:29" pos:end="17:65"><expr pos:start="17:29" pos:end="17:65"><name pos:start="17:29" pos:end="17:36">NUMNOTES</name> <operator pos:start="17:38" pos:end="17:38">*</operator> <sizeof pos:start="17:40" pos:end="17:65">sizeof <argument_list pos:start="17:47" pos:end="17:65">(<argument pos:start="17:48" pos:end="17:64"><expr pos:start="17:48" pos:end="17:64">struct <name pos:start="17:55" pos:end="17:64">memelfnote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:25"><if pos:start="19:5" pos:end="21:25">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:12">info</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:19">notes</name></name> <operator pos:start="19:21" pos:end="19:22">==</operator> <name pos:start="19:24" pos:end="19:27">NULL</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:25"><block_content pos:start="21:9" pos:end="21:25">

        <return pos:start="21:9" pos:end="21:25">return <expr pos:start="21:16" pos:end="21:24"><operator pos:start="21:16" pos:end="21:16">(</operator><operator pos:start="21:17" pos:end="21:17">-</operator><name pos:start="21:18" pos:end="21:23">ENOMEM</name><operator pos:start="21:24" pos:end="21:24">)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:8">info</name><operator pos:start="23:9" pos:end="23:10">-&gt;</operator><name pos:start="23:11" pos:end="23:18">prstatus</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:56"><name pos:start="23:22" pos:end="23:30">g_malloc0</name><argument_list pos:start="23:31" pos:end="23:56">(<argument pos:start="23:32" pos:end="23:55"><expr pos:start="23:32" pos:end="23:55"><sizeof pos:start="23:32" pos:end="23:55">sizeof <argument_list pos:start="23:39" pos:end="23:55">(<argument pos:start="23:40" pos:end="23:54"><expr pos:start="23:40" pos:end="23:54"><operator pos:start="23:40" pos:end="23:40">*</operator><name pos:start="23:41" pos:end="23:54"><name pos:start="23:41" pos:end="23:44">info</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:54">prstatus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:25"><if pos:start="25:5" pos:end="27:25">if <condition pos:start="25:8" pos:end="25:31">(<expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:12">info</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:22">prstatus</name></name> <operator pos:start="25:24" pos:end="25:25">==</operator> <name pos:start="25:27" pos:end="25:30">NULL</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:25"><block_content pos:start="27:9" pos:end="27:25">

        <return pos:start="27:9" pos:end="27:25">return <expr pos:start="27:16" pos:end="27:24"><operator pos:start="27:16" pos:end="27:16">(</operator><operator pos:start="27:17" pos:end="27:17">-</operator><name pos:start="27:18" pos:end="27:23">ENOMEM</name><operator pos:start="27:24" pos:end="27:24">)</operator></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:53"><expr pos:start="29:5" pos:end="29:52"><name pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:8">info</name><operator pos:start="29:9" pos:end="29:10">-&gt;</operator><name pos:start="29:11" pos:end="29:16">psinfo</name></name> <operator pos:start="29:18" pos:end="29:18">=</operator> <call pos:start="29:20" pos:end="29:52"><name pos:start="29:20" pos:end="29:28">g_malloc0</name><argument_list pos:start="29:29" pos:end="29:52">(<argument pos:start="29:30" pos:end="29:51"><expr pos:start="29:30" pos:end="29:51"><sizeof pos:start="29:30" pos:end="29:51">sizeof <argument_list pos:start="29:37" pos:end="29:51">(<argument pos:start="29:38" pos:end="29:50"><expr pos:start="29:38" pos:end="29:50"><operator pos:start="29:38" pos:end="29:38">*</operator><name pos:start="29:39" pos:end="29:50"><name pos:start="29:39" pos:end="29:42">info</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:50">psinfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:25"><if pos:start="31:5" pos:end="33:25">if <condition pos:start="31:8" pos:end="31:31">(<expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:12">info</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:22">prstatus</name></name> <operator pos:start="31:24" pos:end="31:25">==</operator> <name pos:start="31:27" pos:end="31:30">NULL</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:25"><block_content pos:start="33:9" pos:end="33:25">

        <return pos:start="33:9" pos:end="33:25">return <expr pos:start="33:16" pos:end="33:24"><operator pos:start="33:16" pos:end="33:16">(</operator><operator pos:start="33:17" pos:end="33:17">-</operator><name pos:start="33:18" pos:end="33:23">ENOMEM</name><operator pos:start="33:24" pos:end="33:24">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="43:7">/*

     * First fill in status (and registers) of current thread

     * including process info &amp; aux vector.

     */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:45"><expr pos:start="45:5" pos:end="45:44"><call pos:start="45:5" pos:end="45:44"><name pos:start="45:5" pos:end="45:17">fill_prstatus</name><argument_list pos:start="45:18" pos:end="45:44">(<argument pos:start="45:19" pos:end="45:32"><expr pos:start="45:19" pos:end="45:32"><name pos:start="45:19" pos:end="45:32"><name pos:start="45:19" pos:end="45:22">info</name><operator pos:start="45:23" pos:end="45:24">-&gt;</operator><name pos:start="45:25" pos:end="45:32">prstatus</name></name></expr></argument>, <argument pos:start="45:35" pos:end="45:36"><expr pos:start="45:35" pos:end="45:36"><name pos:start="45:35" pos:end="45:36">ts</name></expr></argument>, <argument pos:start="45:39" pos:end="45:43"><expr pos:start="45:39" pos:end="45:43"><name pos:start="45:39" pos:end="45:43">signr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:53"><expr pos:start="47:5" pos:end="47:52"><call pos:start="47:5" pos:end="47:52"><name pos:start="47:5" pos:end="47:22">elf_core_copy_regs</name><argument_list pos:start="47:23" pos:end="47:52">(<argument pos:start="47:24" pos:end="47:46"><expr pos:start="47:24" pos:end="47:46"><operator pos:start="47:24" pos:end="47:24">&amp;</operator><name pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:28">info</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:38">prstatus</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:46">pr_reg</name></name></expr></argument>, <argument pos:start="47:49" pos:end="47:51"><expr pos:start="47:49" pos:end="47:51"><name pos:start="47:49" pos:end="47:51">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:56"><expr pos:start="49:5" pos:end="51:55"><call pos:start="49:5" pos:end="51:55"><name pos:start="49:5" pos:end="49:13">fill_note</name><argument_list pos:start="49:14" pos:end="51:55">(<argument pos:start="49:15" pos:end="49:29"><expr pos:start="49:15" pos:end="49:29"><operator pos:start="49:15" pos:end="49:15">&amp;</operator><name pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:19">info</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:26">notes</name><index pos:start="49:27" pos:end="49:29">[<expr pos:start="49:28" pos:end="49:28"><literal type="number" pos:start="49:28" pos:end="49:28">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:32" pos:end="49:37"><expr pos:start="49:32" pos:end="49:37"><literal type="string" pos:start="49:32" pos:end="49:37">"CORE"</literal></expr></argument>, <argument pos:start="49:40" pos:end="49:50"><expr pos:start="49:40" pos:end="49:50"><name pos:start="49:40" pos:end="49:50">NT_PRSTATUS</name></expr></argument>,

              <argument pos:start="51:15" pos:end="51:38"><expr pos:start="51:15" pos:end="51:38"><sizeof pos:start="51:15" pos:end="51:38">sizeof <argument_list pos:start="51:22" pos:end="51:38">(<argument pos:start="51:23" pos:end="51:37"><expr pos:start="51:23" pos:end="51:37"><operator pos:start="51:23" pos:end="51:23">*</operator><name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:27">info</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:37">prstatus</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="51:41" pos:end="51:54"><expr pos:start="51:41" pos:end="51:54"><name pos:start="51:41" pos:end="51:54"><name pos:start="51:41" pos:end="51:44">info</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:54">prstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><call pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:15">fill_psinfo</name><argument_list pos:start="53:16" pos:end="53:33">(<argument pos:start="53:17" pos:end="53:28"><expr pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:20">info</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:28">psinfo</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:32"><expr pos:start="53:31" pos:end="53:32"><name pos:start="53:31" pos:end="53:32">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="57:52"><expr pos:start="55:5" pos:end="57:51"><call pos:start="55:5" pos:end="57:51"><name pos:start="55:5" pos:end="55:13">fill_note</name><argument_list pos:start="55:14" pos:end="57:51">(<argument pos:start="55:15" pos:end="55:29"><expr pos:start="55:15" pos:end="55:29"><operator pos:start="55:15" pos:end="55:15">&amp;</operator><name pos:start="55:16" pos:end="55:29"><name pos:start="55:16" pos:end="55:19">info</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:26">notes</name><index pos:start="55:27" pos:end="55:29">[<expr pos:start="55:28" pos:end="55:28"><literal type="number" pos:start="55:28" pos:end="55:28">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:32" pos:end="55:37"><expr pos:start="55:32" pos:end="55:37"><literal type="string" pos:start="55:32" pos:end="55:37">"CORE"</literal></expr></argument>, <argument pos:start="55:40" pos:end="55:50"><expr pos:start="55:40" pos:end="55:50"><name pos:start="55:40" pos:end="55:50">NT_PRPSINFO</name></expr></argument>,

              <argument pos:start="57:15" pos:end="57:36"><expr pos:start="57:15" pos:end="57:36"><sizeof pos:start="57:15" pos:end="57:36">sizeof <argument_list pos:start="57:22" pos:end="57:36">(<argument pos:start="57:23" pos:end="57:35"><expr pos:start="57:23" pos:end="57:35"><operator pos:start="57:23" pos:end="57:23">*</operator><name pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:27">info</name><operator pos:start="57:28" pos:end="57:29">-&gt;</operator><name pos:start="57:30" pos:end="57:35">psinfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="57:39" pos:end="57:50"><expr pos:start="57:39" pos:end="57:50"><name pos:start="57:39" pos:end="57:50"><name pos:start="57:39" pos:end="57:42">info</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:50">psinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:40"><expr pos:start="59:5" pos:end="59:39"><call pos:start="59:5" pos:end="59:39"><name pos:start="59:5" pos:end="59:18">fill_auxv_note</name><argument_list pos:start="59:19" pos:end="59:39">(<argument pos:start="59:20" pos:end="59:34"><expr pos:start="59:20" pos:end="59:34"><operator pos:start="59:20" pos:end="59:20">&amp;</operator><name pos:start="59:21" pos:end="59:34"><name pos:start="59:21" pos:end="59:24">info</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:31">notes</name><index pos:start="59:32" pos:end="59:34">[<expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:37" pos:end="59:38"><expr pos:start="59:37" pos:end="59:38"><name pos:start="59:37" pos:end="59:38">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:8">info</name><operator pos:start="61:9" pos:end="61:10">-&gt;</operator><name pos:start="61:11" pos:end="61:17">numnote</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">3</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:25"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:8">info</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:20">notes_size</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">0</literal></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="69:55">for <control pos:start="67:9" pos:end="67:39">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:34"><expr pos:start="67:17" pos:end="67:33"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:33"><name pos:start="67:21" pos:end="67:24">info</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:33">numnote</name></name></expr>;</condition> <incr pos:start="67:36" pos:end="67:38"><expr pos:start="67:36" pos:end="67:38"><name pos:start="67:36" pos:end="67:36">i</name><operator pos:start="67:37" pos:end="67:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="69:9" pos:end="69:55"><block_content pos:start="69:9" pos:end="69:55">

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:12">info</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:24">notes_size</name></name> <operator pos:start="69:26" pos:end="69:27">+=</operator> <call pos:start="69:29" pos:end="69:54"><name pos:start="69:29" pos:end="69:37">note_size</name><argument_list pos:start="69:38" pos:end="69:54">(<argument pos:start="69:39" pos:end="69:53"><expr pos:start="69:39" pos:end="69:53"><operator pos:start="69:39" pos:end="69:39">&amp;</operator><name pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:43">info</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:50">notes</name><index pos:start="69:51" pos:end="69:53">[<expr pos:start="69:52" pos:end="69:52"><name pos:start="69:52" pos:end="69:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="73:5" pos:end="73:45">/* read and fill status of all threads */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><call pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:17">cpu_list_lock</name><argument_list pos:start="75:18" pos:end="75:19">()</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="77:5" pos:end="77:20"><name pos:start="77:5" pos:end="77:15">CPU_FOREACH</name><argument_list pos:start="77:16" pos:end="77:20">(<argument pos:start="77:17" pos:end="77:19">cpu</argument>)</argument_list></macro> <block pos:start="77:22" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:61">

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:30">(<expr pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:15">cpu</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <name pos:start="79:20" pos:end="79:29">thread_cpu</name></expr>)</condition> <block pos:start="79:32" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:21">

            <continue pos:start="81:13" pos:end="81:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:61"><expr pos:start="85:9" pos:end="85:60"><call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:24">fill_thread_info</name><argument_list pos:start="85:25" pos:end="85:60">(<argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">info</name></expr></argument>, <argument pos:start="85:32" pos:end="85:59"><expr pos:start="85:32" pos:end="85:59"><operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:44">CPUArchState</name> <operator pos:start="85:46" pos:end="85:46">*</operator><operator pos:start="85:47" pos:end="85:47">)</operator><name pos:start="85:48" pos:end="85:59"><name pos:start="85:48" pos:end="85:50">cpu</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:59">env_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="89:5" pos:end="89:22"><expr pos:start="89:5" pos:end="89:21"><call pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:19">cpu_list_unlock</name><argument_list pos:start="89:20" pos:end="89:21">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><operator pos:start="93:12" pos:end="93:12">(</operator><literal type="number" pos:start="93:13" pos:end="93:13">0</literal><operator pos:start="93:14" pos:end="93:14">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
